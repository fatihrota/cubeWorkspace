
highSpeedDaq_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008714  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08008900  08008900  00018900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cc0  08008cc0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008cc0  08008cc0  00018cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cc8  08008cc8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cc8  08008cc8  00018cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ccc  08008ccc  00018ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031bc  200001dc  08008eac  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003398  08008eac  00023398  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd2d  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f79  00000000  00000000  0002bf32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009b0  00000000  00000000  0002deb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008a8  00000000  00000000  0002e860  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020df6  00000000  00000000  0002f108  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000093e4  00000000  00000000  0004fefe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b5f57  00000000  00000000  000592e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010f239  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038e8  00000000  00000000  0010f2b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001dc 	.word	0x200001dc
 8000204:	00000000 	.word	0x00000000
 8000208:	080088e4 	.word	0x080088e4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e0 	.word	0x200001e0
 8000224:	080088e4 	.word	0x080088e4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295
 8000c54:	f000 b974 	b.w	8000f40 <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f806 	bl	8000c70 <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__udivmoddi4>:
 8000c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c74:	468c      	mov	ip, r1
 8000c76:	4604      	mov	r4, r0
 8000c78:	9e08      	ldr	r6, [sp, #32]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d14b      	bne.n	8000d16 <__udivmoddi4+0xa6>
 8000c7e:	428a      	cmp	r2, r1
 8000c80:	4615      	mov	r5, r2
 8000c82:	d967      	bls.n	8000d54 <__udivmoddi4+0xe4>
 8000c84:	fab2 f282 	clz	r2, r2
 8000c88:	b14a      	cbz	r2, 8000c9e <__udivmoddi4+0x2e>
 8000c8a:	f1c2 0720 	rsb	r7, r2, #32
 8000c8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c92:	fa20 f707 	lsr.w	r7, r0, r7
 8000c96:	4095      	lsls	r5, r2
 8000c98:	ea47 0c03 	orr.w	ip, r7, r3
 8000c9c:	4094      	lsls	r4, r2
 8000c9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ca2:	fbbc f7fe 	udiv	r7, ip, lr
 8000ca6:	fa1f f885 	uxth.w	r8, r5
 8000caa:	fb0e c317 	mls	r3, lr, r7, ip
 8000cae:	fb07 f908 	mul.w	r9, r7, r8
 8000cb2:	0c21      	lsrs	r1, r4, #16
 8000cb4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cb8:	4599      	cmp	r9, r3
 8000cba:	d909      	bls.n	8000cd0 <__udivmoddi4+0x60>
 8000cbc:	18eb      	adds	r3, r5, r3
 8000cbe:	f107 31ff 	add.w	r1, r7, #4294967295
 8000cc2:	f080 811c 	bcs.w	8000efe <__udivmoddi4+0x28e>
 8000cc6:	4599      	cmp	r9, r3
 8000cc8:	f240 8119 	bls.w	8000efe <__udivmoddi4+0x28e>
 8000ccc:	3f02      	subs	r7, #2
 8000cce:	442b      	add	r3, r5
 8000cd0:	eba3 0309 	sub.w	r3, r3, r9
 8000cd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cdc:	fb00 f108 	mul.w	r1, r0, r8
 8000ce0:	b2a4      	uxth	r4, r4
 8000ce2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce6:	42a1      	cmp	r1, r4
 8000ce8:	d909      	bls.n	8000cfe <__udivmoddi4+0x8e>
 8000cea:	192c      	adds	r4, r5, r4
 8000cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf0:	f080 8107 	bcs.w	8000f02 <__udivmoddi4+0x292>
 8000cf4:	42a1      	cmp	r1, r4
 8000cf6:	f240 8104 	bls.w	8000f02 <__udivmoddi4+0x292>
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	442c      	add	r4, r5
 8000cfe:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d02:	2700      	movs	r7, #0
 8000d04:	1a64      	subs	r4, r4, r1
 8000d06:	b11e      	cbz	r6, 8000d10 <__udivmoddi4+0xa0>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	40d4      	lsrs	r4, r2
 8000d0c:	e9c6 4300 	strd	r4, r3, [r6]
 8000d10:	4639      	mov	r1, r7
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d909      	bls.n	8000d2e <__udivmoddi4+0xbe>
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	f000 80ec 	beq.w	8000ef8 <__udivmoddi4+0x288>
 8000d20:	2700      	movs	r7, #0
 8000d22:	e9c6 0100 	strd	r0, r1, [r6]
 8000d26:	4638      	mov	r0, r7
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	fab3 f783 	clz	r7, r3
 8000d32:	2f00      	cmp	r7, #0
 8000d34:	d148      	bne.n	8000dc8 <__udivmoddi4+0x158>
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xd0>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 80fb 	bhi.w	8000f36 <__udivmoddi4+0x2c6>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb61 0303 	sbc.w	r3, r1, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	469c      	mov	ip, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d0e0      	beq.n	8000d10 <__udivmoddi4+0xa0>
 8000d4e:	e9c6 4c00 	strd	r4, ip, [r6]
 8000d52:	e7dd      	b.n	8000d10 <__udivmoddi4+0xa0>
 8000d54:	b902      	cbnz	r2, 8000d58 <__udivmoddi4+0xe8>
 8000d56:	deff      	udf	#255	; 0xff
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	2a00      	cmp	r2, #0
 8000d5e:	f040 808f 	bne.w	8000e80 <__udivmoddi4+0x210>
 8000d62:	2701      	movs	r7, #1
 8000d64:	1b49      	subs	r1, r1, r5
 8000d66:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000d6a:	fa1f f985 	uxth.w	r9, r5
 8000d6e:	fbb1 fef8 	udiv	lr, r1, r8
 8000d72:	fb08 111e 	mls	r1, r8, lr, r1
 8000d76:	fb09 f00e 	mul.w	r0, r9, lr
 8000d7a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000d7e:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000d82:	4298      	cmp	r0, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x126>
 8000d86:	18eb      	adds	r3, r5, r3
 8000d88:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x124>
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	f200 80cd 	bhi.w	8000f2e <__udivmoddi4+0x2be>
 8000d94:	468e      	mov	lr, r1
 8000d96:	1a1b      	subs	r3, r3, r0
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	fb09 f900 	mul.w	r9, r9, r0
 8000da4:	b2a4      	uxth	r4, r4
 8000da6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000daa:	45a1      	cmp	r9, r4
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x14e>
 8000dae:	192c      	adds	r4, r5, r4
 8000db0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db4:	d202      	bcs.n	8000dbc <__udivmoddi4+0x14c>
 8000db6:	45a1      	cmp	r9, r4
 8000db8:	f200 80b6 	bhi.w	8000f28 <__udivmoddi4+0x2b8>
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000dc6:	e79e      	b.n	8000d06 <__udivmoddi4+0x96>
 8000dc8:	f1c7 0520 	rsb	r5, r7, #32
 8000dcc:	40bb      	lsls	r3, r7
 8000dce:	fa22 fc05 	lsr.w	ip, r2, r5
 8000dd2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dd6:	fa21 f405 	lsr.w	r4, r1, r5
 8000dda:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dde:	fbb4 f9fe 	udiv	r9, r4, lr
 8000de2:	fa1f f88c 	uxth.w	r8, ip
 8000de6:	fb0e 4419 	mls	r4, lr, r9, r4
 8000dea:	fa20 f305 	lsr.w	r3, r0, r5
 8000dee:	40b9      	lsls	r1, r7
 8000df0:	fb09 fa08 	mul.w	sl, r9, r8
 8000df4:	4319      	orrs	r1, r3
 8000df6:	0c0b      	lsrs	r3, r1, #16
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	45a2      	cmp	sl, r4
 8000dfe:	fa02 f207 	lsl.w	r2, r2, r7
 8000e02:	fa00 f307 	lsl.w	r3, r0, r7
 8000e06:	d90b      	bls.n	8000e20 <__udivmoddi4+0x1b0>
 8000e08:	eb1c 0404 	adds.w	r4, ip, r4
 8000e0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e10:	f080 8088 	bcs.w	8000f24 <__udivmoddi4+0x2b4>
 8000e14:	45a2      	cmp	sl, r4
 8000e16:	f240 8085 	bls.w	8000f24 <__udivmoddi4+0x2b4>
 8000e1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e1e:	4464      	add	r4, ip
 8000e20:	eba4 040a 	sub.w	r4, r4, sl
 8000e24:	fbb4 f0fe 	udiv	r0, r4, lr
 8000e28:	fb0e 4410 	mls	r4, lr, r0, r4
 8000e2c:	fb00 fa08 	mul.w	sl, r0, r8
 8000e30:	b289      	uxth	r1, r1
 8000e32:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000e36:	45a2      	cmp	sl, r4
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x1dc>
 8000e3a:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e42:	d26b      	bcs.n	8000f1c <__udivmoddi4+0x2ac>
 8000e44:	45a2      	cmp	sl, r4
 8000e46:	d969      	bls.n	8000f1c <__udivmoddi4+0x2ac>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4464      	add	r4, ip
 8000e4c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e50:	fba0 8902 	umull	r8, r9, r0, r2
 8000e54:	eba4 040a 	sub.w	r4, r4, sl
 8000e58:	454c      	cmp	r4, r9
 8000e5a:	4641      	mov	r1, r8
 8000e5c:	46ce      	mov	lr, r9
 8000e5e:	d354      	bcc.n	8000f0a <__udivmoddi4+0x29a>
 8000e60:	d051      	beq.n	8000f06 <__udivmoddi4+0x296>
 8000e62:	2e00      	cmp	r6, #0
 8000e64:	d069      	beq.n	8000f3a <__udivmoddi4+0x2ca>
 8000e66:	1a5a      	subs	r2, r3, r1
 8000e68:	eb64 040e 	sbc.w	r4, r4, lr
 8000e6c:	fa04 f505 	lsl.w	r5, r4, r5
 8000e70:	fa22 f307 	lsr.w	r3, r2, r7
 8000e74:	40fc      	lsrs	r4, r7
 8000e76:	431d      	orrs	r5, r3
 8000e78:	e9c6 5400 	strd	r5, r4, [r6]
 8000e7c:	2700      	movs	r7, #0
 8000e7e:	e747      	b.n	8000d10 <__udivmoddi4+0xa0>
 8000e80:	4095      	lsls	r5, r2
 8000e82:	f1c2 0320 	rsb	r3, r2, #32
 8000e86:	fa21 f003 	lsr.w	r0, r1, r3
 8000e8a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000e8e:	fbb0 f7f8 	udiv	r7, r0, r8
 8000e92:	fa1f f985 	uxth.w	r9, r5
 8000e96:	fb08 0017 	mls	r0, r8, r7, r0
 8000e9a:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9e:	4091      	lsls	r1, r2
 8000ea0:	fb07 fc09 	mul.w	ip, r7, r9
 8000ea4:	430b      	orrs	r3, r1
 8000ea6:	0c19      	lsrs	r1, r3, #16
 8000ea8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eac:	458c      	cmp	ip, r1
 8000eae:	fa04 f402 	lsl.w	r4, r4, r2
 8000eb2:	d907      	bls.n	8000ec4 <__udivmoddi4+0x254>
 8000eb4:	1869      	adds	r1, r5, r1
 8000eb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000eba:	d231      	bcs.n	8000f20 <__udivmoddi4+0x2b0>
 8000ebc:	458c      	cmp	ip, r1
 8000ebe:	d92f      	bls.n	8000f20 <__udivmoddi4+0x2b0>
 8000ec0:	3f02      	subs	r7, #2
 8000ec2:	4429      	add	r1, r5
 8000ec4:	eba1 010c 	sub.w	r1, r1, ip
 8000ec8:	fbb1 f0f8 	udiv	r0, r1, r8
 8000ecc:	fb08 1c10 	mls	ip, r8, r0, r1
 8000ed0:	fb00 fe09 	mul.w	lr, r0, r9
 8000ed4:	b299      	uxth	r1, r3
 8000ed6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eda:	458e      	cmp	lr, r1
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x27e>
 8000ede:	1869      	adds	r1, r5, r1
 8000ee0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ee4:	d218      	bcs.n	8000f18 <__udivmoddi4+0x2a8>
 8000ee6:	458e      	cmp	lr, r1
 8000ee8:	d916      	bls.n	8000f18 <__udivmoddi4+0x2a8>
 8000eea:	3802      	subs	r0, #2
 8000eec:	4429      	add	r1, r5
 8000eee:	eba1 010e 	sub.w	r1, r1, lr
 8000ef2:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ef6:	e73a      	b.n	8000d6e <__udivmoddi4+0xfe>
 8000ef8:	4637      	mov	r7, r6
 8000efa:	4630      	mov	r0, r6
 8000efc:	e708      	b.n	8000d10 <__udivmoddi4+0xa0>
 8000efe:	460f      	mov	r7, r1
 8000f00:	e6e6      	b.n	8000cd0 <__udivmoddi4+0x60>
 8000f02:	4618      	mov	r0, r3
 8000f04:	e6fb      	b.n	8000cfe <__udivmoddi4+0x8e>
 8000f06:	4543      	cmp	r3, r8
 8000f08:	d2ab      	bcs.n	8000e62 <__udivmoddi4+0x1f2>
 8000f0a:	ebb8 0102 	subs.w	r1, r8, r2
 8000f0e:	eb69 020c 	sbc.w	r2, r9, ip
 8000f12:	3801      	subs	r0, #1
 8000f14:	4696      	mov	lr, r2
 8000f16:	e7a4      	b.n	8000e62 <__udivmoddi4+0x1f2>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e7e8      	b.n	8000eee <__udivmoddi4+0x27e>
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	e795      	b.n	8000e4c <__udivmoddi4+0x1dc>
 8000f20:	4607      	mov	r7, r0
 8000f22:	e7cf      	b.n	8000ec4 <__udivmoddi4+0x254>
 8000f24:	4681      	mov	r9, r0
 8000f26:	e77b      	b.n	8000e20 <__udivmoddi4+0x1b0>
 8000f28:	3802      	subs	r0, #2
 8000f2a:	442c      	add	r4, r5
 8000f2c:	e747      	b.n	8000dbe <__udivmoddi4+0x14e>
 8000f2e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f32:	442b      	add	r3, r5
 8000f34:	e72f      	b.n	8000d96 <__udivmoddi4+0x126>
 8000f36:	4638      	mov	r0, r7
 8000f38:	e707      	b.n	8000d4a <__udivmoddi4+0xda>
 8000f3a:	4637      	mov	r7, r6
 8000f3c:	e6e8      	b.n	8000d10 <__udivmoddi4+0xa0>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <AD7768_writeReg>:
#include "debug.h"

extern SPI_HandleTypeDef hspi3;

void AD7768_writeReg(uint8_t addr, uint8_t value)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	460a      	mov	r2, r1
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	uint8_t read[2];

	buf[0] = (addr & 0x7F);
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 8000f5e:	79bb      	ldrb	r3, [r7, #6]
 8000f60:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ADC_CS_PIN, ADC_CS_PIN_NO, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2101      	movs	r1, #1
 8000f66:	480b      	ldr	r0, [pc, #44]	; (8000f94 <AD7768_writeReg+0x50>)
 8000f68:	f001 fd1e 	bl	80029a8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, &buf[0], &read[0], 2, 1000);
 8000f6c:	f107 0208 	add.w	r2, r7, #8
 8000f70:	f107 010c 	add.w	r1, r7, #12
 8000f74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	4806      	ldr	r0, [pc, #24]	; (8000f98 <AD7768_writeReg+0x54>)
 8000f7e:	f002 fad3 	bl	8003528 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(ADC_CS_PIN, ADC_CS_PIN_NO, GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2101      	movs	r1, #1
 8000f86:	4803      	ldr	r0, [pc, #12]	; (8000f94 <AD7768_writeReg+0x50>)
 8000f88:	f001 fd0e 	bl	80029a8 <HAL_GPIO_WritePin>
}
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40011400 	.word	0x40011400
 8000f98:	20003218 	.word	0x20003218

08000f9c <AD7768_readReg>:


uint8_t AD7768_readReg(uint8_t addr)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af02      	add	r7, sp, #8
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2];
	uint8_t read[2];
	HAL_GPIO_WritePin(ADC_CS_PIN, ADC_CS_PIN_NO, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2101      	movs	r1, #1
 8000faa:	481d      	ldr	r0, [pc, #116]	; (8001020 <AD7768_readReg+0x84>)
 8000fac:	f001 fcfc 	bl	80029a8 <HAL_GPIO_WritePin>
	buf[0] = 0x80 | (addr & 0x7F);
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	733b      	strb	r3, [r7, #12]
	buf[1] = 0x00;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	737b      	strb	r3, [r7, #13]
	HAL_SPI_TransmitReceive(&hspi3, &buf[0], &read[0], 2, 1000);
 8000fbe:	f107 0208 	add.w	r2, r7, #8
 8000fc2:	f107 010c 	add.w	r1, r7, #12
 8000fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	2302      	movs	r3, #2
 8000fce:	4815      	ldr	r0, [pc, #84]	; (8001024 <AD7768_readReg+0x88>)
 8000fd0:	f002 faaa 	bl	8003528 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(ADC_CS_PIN, ADC_CS_PIN_NO, GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	4811      	ldr	r0, [pc, #68]	; (8001020 <AD7768_readReg+0x84>)
 8000fda:	f001 fce5 	bl	80029a8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(ADC_CS_PIN, ADC_CS_PIN_NO, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	480f      	ldr	r0, [pc, #60]	; (8001020 <AD7768_readReg+0x84>)
 8000fe4:	f001 fce0 	bl	80029a8 <HAL_GPIO_WritePin>
	buf[0] = 0x80 | (addr & 0x7F);
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	733b      	strb	r3, [r7, #12]
	buf[1] = 0x00;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	737b      	strb	r3, [r7, #13]
	HAL_SPI_TransmitReceive(&hspi3, &buf[0], &read[0], 2, 1000);
 8000ff6:	f107 0208 	add.w	r2, r7, #8
 8000ffa:	f107 010c 	add.w	r1, r7, #12
 8000ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2302      	movs	r3, #2
 8001006:	4807      	ldr	r0, [pc, #28]	; (8001024 <AD7768_readReg+0x88>)
 8001008:	f002 fa8e 	bl	8003528 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(ADC_CS_PIN, ADC_CS_PIN_NO, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	2101      	movs	r1, #1
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <AD7768_readReg+0x84>)
 8001012:	f001 fcc9 	bl	80029a8 <HAL_GPIO_WritePin>

	return read[1];
 8001016:	7a7b      	ldrb	r3, [r7, #9]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40011400 	.word	0x40011400
 8001024:	20003218 	.word	0x20003218

08001028 <AD7768_setup>:


void AD7768_setup(uint8_t dClk, uint8_t decRate, uint8_t pwrMode)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
 8001032:	460b      	mov	r3, r1
 8001034:	71bb      	strb	r3, [r7, #6]
 8001036:	4613      	mov	r3, r2
 8001038:	717b      	strb	r3, [r7, #5]
	uint8_t readVal = AD7768_readReg(AD7768_REG_REV_ID);
 800103a:	200a      	movs	r0, #10
 800103c:	f7ff ffae 	bl	8000f9c <AD7768_readReg>
 8001040:	4603      	mov	r3, r0
 8001042:	73fb      	strb	r3, [r7, #15]

	dbg_printf("readVal : %x  \n", readVal);
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	4619      	mov	r1, r3
 8001048:	4816      	ldr	r0, [pc, #88]	; (80010a4 <AD7768_setup+0x7c>)
 800104a:	f004 f845 	bl	80050d8 <iprintf>
	if (readVal != 0x06)
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	2b06      	cmp	r3, #6
 8001052:	d002      	beq.n	800105a <AD7768_setup+0x32>
	{
		dbg_printf("There is a problem with ADC\n");
 8001054:	4814      	ldr	r0, [pc, #80]	; (80010a8 <AD7768_setup+0x80>)
 8001056:	f004 f8b3 	bl	80051c0 <puts>
	}HAL_Delay(100);
 800105a:	2064      	movs	r0, #100	; 0x64
 800105c:	f000 fea0 	bl	8001da0 <HAL_Delay>

	AD7768_writeReg(AD7768_REG_CH_MODE_A, decRate);
 8001060:	79bb      	ldrb	r3, [r7, #6]
 8001062:	4619      	mov	r1, r3
 8001064:	2001      	movs	r0, #1
 8001066:	f7ff ff6d 	bl	8000f44 <AD7768_writeReg>
	HAL_Delay(100);
 800106a:	2064      	movs	r0, #100	; 0x64
 800106c:	f000 fe98 	bl	8001da0 <HAL_Delay>
	AD7768_writeReg(AD7768_REG_PWR_MODE, pwrMode);
 8001070:	797b      	ldrb	r3, [r7, #5]
 8001072:	4619      	mov	r1, r3
 8001074:	2004      	movs	r0, #4
 8001076:	f7ff ff65 	bl	8000f44 <AD7768_writeReg>
	HAL_Delay(100);
 800107a:	2064      	movs	r0, #100	; 0x64
 800107c:	f000 fe90 	bl	8001da0 <HAL_Delay>
	AD7768_writeReg(AD7768_REG_INTERFACE_CFG, dClk);
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	4619      	mov	r1, r3
 8001084:	2007      	movs	r0, #7
 8001086:	f7ff ff5d 	bl	8000f44 <AD7768_writeReg>
	HAL_Delay(100);
 800108a:	2064      	movs	r0, #100	; 0x64
 800108c:	f000 fe88 	bl	8001da0 <HAL_Delay>

	dbg_printf("decRate : %x - pwrMode : %x dClk : %x\n", decRate, pwrMode, dClk);
 8001090:	79b9      	ldrb	r1, [r7, #6]
 8001092:	797a      	ldrb	r2, [r7, #5]
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	4805      	ldr	r0, [pc, #20]	; (80010ac <AD7768_setup+0x84>)
 8001098:	f004 f81e 	bl	80050d8 <iprintf>
}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	08008900 	.word	0x08008900
 80010a8:	08008910 	.word	0x08008910
 80010ac:	0800892c 	.word	0x0800892c

080010b0 <debug_init>:

unsigned int dbg_tx_count = 0;


void debug_init()
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	memset(dbg_tx_buffer,0,DEBUG_TX_BUFFER_SIZE);
 80010b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010b8:	2100      	movs	r1, #0
 80010ba:	4804      	ldr	r0, [pc, #16]	; (80010cc <debug_init+0x1c>)
 80010bc:	f003 f9d5 	bl	800446a <memset>
	dbg_tx_count = 0;
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <debug_init+0x20>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20002e18 	.word	0x20002e18
 80010d0:	200001f8 	.word	0x200001f8

080010d4 <debug_transmit_buffer>:

void debug_transmit_buffer()
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
	uint32_t count = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]

	memcpy(dbg_tx_dma_buffer,dbg_tx_buffer,dbg_tx_count);
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <debug_transmit_buffer+0x38>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	490a      	ldr	r1, [pc, #40]	; (8001110 <debug_transmit_buffer+0x3c>)
 80010e6:	480b      	ldr	r0, [pc, #44]	; (8001114 <debug_transmit_buffer+0x40>)
 80010e8:	f003 f9b4 	bl	8004454 <memcpy>
	dbg_tx(dbg_tx_dma_buffer,dbg_tx_count);
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <debug_transmit_buffer+0x38>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	461a      	mov	r2, r3
 80010f4:	4907      	ldr	r1, [pc, #28]	; (8001114 <debug_transmit_buffer+0x40>)
 80010f6:	4808      	ldr	r0, [pc, #32]	; (8001118 <debug_transmit_buffer+0x44>)
 80010f8:	f002 ffba 	bl	8004070 <HAL_UART_Transmit_DMA>
	dbg_tx_count = 0;
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <debug_transmit_buffer+0x38>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200001f8 	.word	0x200001f8
 8001110:	20002e18 	.word	0x20002e18
 8001114:	20002a18 	.word	0x20002a18
 8001118:	2000330c 	.word	0x2000330c

0800111c <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	if (ch != '\r')
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b0d      	cmp	r3, #13
 8001128:	d01a      	beq.n	8001160 <__io_putchar+0x44>
	{
		dbg_tx_buffer[dbg_tx_count++] = ch;
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <__io_putchar+0x50>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	1c5a      	adds	r2, r3, #1
 8001130:	490e      	ldr	r1, [pc, #56]	; (800116c <__io_putchar+0x50>)
 8001132:	600a      	str	r2, [r1, #0]
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	b2d1      	uxtb	r1, r2
 8001138:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <__io_putchar+0x54>)
 800113a:	54d1      	strb	r1, [r2, r3]

		if ((ch == '\n') || (dbg_tx_count >= DEBUG_TX_BUFFER_SIZE))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b0a      	cmp	r3, #10
 8001140:	d004      	beq.n	800114c <__io_putchar+0x30>
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <__io_putchar+0x50>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800114a:	d309      	bcc.n	8001160 <__io_putchar+0x44>
		{
			dbg_tx_buffer[dbg_tx_count++] = '\r';
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <__io_putchar+0x50>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	1c5a      	adds	r2, r3, #1
 8001152:	4906      	ldr	r1, [pc, #24]	; (800116c <__io_putchar+0x50>)
 8001154:	600a      	str	r2, [r1, #0]
 8001156:	4a06      	ldr	r2, [pc, #24]	; (8001170 <__io_putchar+0x54>)
 8001158:	210d      	movs	r1, #13
 800115a:	54d1      	strb	r1, [r2, r3]
			debug_transmit_buffer();
 800115c:	f7ff ffba 	bl	80010d4 <debug_transmit_buffer>
		}
	}

	return ch;
 8001160:	687b      	ldr	r3, [r7, #4]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200001f8 	.word	0x200001f8
 8001170:	20002e18 	.word	0x20002e18

08001174 <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
   // if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <DWT_Init+0x2c>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	4a08      	ldr	r2, [pc, #32]	; (80011a0 <DWT_Init+0x2c>)
 800117e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001182:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <DWT_Init+0x30>)
 8001186:	2200      	movs	r2, #0
 8001188:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <DWT_Init+0x30>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <DWT_Init+0x30>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6013      	str	r3, [r2, #0]
    //}
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000edf0 	.word	0xe000edf0
 80011a4:	e0001000 	.word	0xe0001000

080011a8 <HAL_GPIO_EXTI_Callback>:
uint32_t RxBuf_Idn = 0;
uint32_t RxBufDMA_Idn = 0;

uint32_t extCnt = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_4)
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	2b10      	cmp	r3, #16
 80011b6:	d11a      	bne.n	80011ee <HAL_GPIO_EXTI_Callback+0x46>
	{
		__HAL_SPI_ENABLE(&hspi1);
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <HAL_GPIO_EXTI_Callback+0x50>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_GPIO_EXTI_Callback+0x50>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011c6:	601a      	str	r2, [r3, #0]
		//__HAL_GPIO_EXTI_CLEAR_IT(EXTI4_IRQn);
		EXTI0_Flag = 1;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HAL_GPIO_EXTI_Callback+0x54>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, extCnt%2);
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <HAL_GPIO_EXTI_Callback+0x58>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	461a      	mov	r2, r3
 80011dc:	2140      	movs	r1, #64	; 0x40
 80011de:	4809      	ldr	r0, [pc, #36]	; (8001204 <HAL_GPIO_EXTI_Callback+0x5c>)
 80011e0:	f001 fbe2 	bl	80029a8 <HAL_GPIO_WritePin>
		extCnt++;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_GPIO_EXTI_Callback+0x58>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	4a05      	ldr	r2, [pc, #20]	; (8001200 <HAL_GPIO_EXTI_Callback+0x58>)
 80011ec:	6013      	str	r3, [r2, #0]
	}


}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200032b4 	.word	0x200032b4
 80011fc:	200001fc 	.word	0x200001fc
 8001200:	20002a08 	.word	0x20002a08
 8001204:	40011400 	.word	0x40011400

08001208 <HAL_SPI_RxHalfCpltCallback>:

void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	//dbg_printf("RX\r\n");
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
	...

0800121c <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	//dbg_printf("RX ALL\r\n");
	__HAL_SPI_DISABLE(&hspi1);
 8001224:	4b15      	ldr	r3, [pc, #84]	; (800127c <HAL_SPI_RxCpltCallback+0x60>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <HAL_SPI_RxCpltCallback+0x60>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001232:	601a      	str	r2, [r3, #0]

	RxBufDMA_Idn += SAMPLE_DMA_SIZE;
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_SPI_RxCpltCallback+0x64>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800123c:	4a10      	ldr	r2, [pc, #64]	; (8001280 <HAL_SPI_RxCpltCallback+0x64>)
 800123e:	6013      	str	r3, [r2, #0]
	__HAL_DMA_DISABLE_IT(&hdma_spi1_rx, DMA_IT_HT);
 8001240:	4b10      	ldr	r3, [pc, #64]	; (8001284 <HAL_SPI_RxCpltCallback+0x68>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <HAL_SPI_RxCpltCallback+0x68>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0204 	bic.w	r2, r2, #4
 800124e:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(&hdma_spi1_rx, DMA_IT_TC);
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <HAL_SPI_RxCpltCallback+0x68>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <HAL_SPI_RxCpltCallback+0x68>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0202 	orr.w	r2, r2, #2
 800125e:	601a      	str	r2, [r3, #0]
	HAL_SPI_Receive_DMA(&hspi1, &SPI_RxDMABuffer[RxBufDMA_Idn], SAMPLE_DMA_SIZE);
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <HAL_SPI_RxCpltCallback+0x64>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a08      	ldr	r2, [pc, #32]	; (8001288 <HAL_SPI_RxCpltCallback+0x6c>)
 8001266:	4413      	add	r3, r2
 8001268:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800126c:	4619      	mov	r1, r3
 800126e:	4803      	ldr	r0, [pc, #12]	; (800127c <HAL_SPI_RxCpltCallback+0x60>)
 8001270:	f002 fafc 	bl	800386c <HAL_SPI_Receive_DMA>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200032b4 	.word	0x200032b4
 8001280:	20002a04 	.word	0x20002a04
 8001284:	2000334c 	.word	0x2000334c
 8001288:	20000200 	.word	0x20000200

0800128c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001292:	f000 fd23 	bl	8001cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001296:	f000 f88d 	bl	80013b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800129a:	f000 f99b 	bl	80015d4 <MX_GPIO_Init>
  MX_DMA_Init();
 800129e:	f000 f973 	bl	8001588 <MX_DMA_Init>
  MX_SPI3_Init();
 80012a2:	f000 f911 	bl	80014c8 <MX_SPI3_Init>
  MX_SPI1_Init();
 80012a6:	f000 f8d9 	bl	800145c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80012aa:	f000 f943 	bl	8001534 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	debug_init();
 80012ae:	f7ff feff 	bl	80010b0 <debug_init>
	DWT_Init();
 80012b2:	f7ff ff5f 	bl	8001174 <DWT_Init>
	SystemCoreClockUpdate();
 80012b6:	f000 fc4b 	bl	8001b50 <SystemCoreClockUpdate>

	dbg_printf("Clock : %d\r\n", SystemCoreClock);
 80012ba:	4b34      	ldr	r3, [pc, #208]	; (800138c <main+0x100>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4619      	mov	r1, r3
 80012c0:	4833      	ldr	r0, [pc, #204]	; (8001390 <main+0x104>)
 80012c2:	f003 ff09 	bl	80050d8 <iprintf>

	AD7768_setup(AD7768_INTERFACE_CFG_DCLK_DIV(AD7768_DCLK_DIV_2), AD7768_CH_MODE_FILTER_TYPE | AD7768_CH_MODE_DEC_RATE(AD7768_DEC_X32),
 80012c6:	2233      	movs	r2, #51	; 0x33
 80012c8:	2108      	movs	r1, #8
 80012ca:	2002      	movs	r0, #2
 80012cc:	f7ff feac 	bl	8001028 <AD7768_setup>
			AD7768_PWR_MODE_POWER_MODE(AD7768_FAST) | AD7768_PWR_MODE_MCLK_DIV(AD7768_MCLK_DIV_4));
	HAL_Delay(100);
 80012d0:	2064      	movs	r0, #100	; 0x64
 80012d2:	f000 fd65 	bl	8001da0 <HAL_Delay>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
	/*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2140      	movs	r1, #64	; 0x40
 80012e6:	482b      	ldr	r0, [pc, #172]	; (8001394 <main+0x108>)
 80012e8:	f001 fb5e 	bl	80029a8 <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : PD0 ADC_SYNC_START_Pin */
	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012ec:	2340      	movs	r3, #64	; 0x40
 80012ee:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f8:	2303      	movs	r3, #3
 80012fa:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4619      	mov	r1, r3
 8001300:	4824      	ldr	r0, [pc, #144]	; (8001394 <main+0x108>)
 8001302:	f001 f9f7 	bl	80026f4 <HAL_GPIO_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t Rx_temp;
	uint8_t initial = 1;
 8001306:	2301      	movs	r3, #1
 8001308:	77fb      	strb	r3, [r7, #31]
	uint32_t startMsec = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
	uint32_t starttime = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]

	__HAL_DMA_DISABLE_IT(&hdma_spi1_rx, DMA_IT_HT);
 8001312:	4b21      	ldr	r3, [pc, #132]	; (8001398 <main+0x10c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <main+0x10c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0204 	bic.w	r2, r2, #4
 8001320:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(&hdma_spi1_rx, DMA_IT_TC);
 8001322:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <main+0x10c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <main+0x10c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f042 0202 	orr.w	r2, r2, #2
 8001330:	601a      	str	r2, [r3, #0]
	HAL_SPI_Receive_DMA(&hspi1, SPI_RxDMABuffer, SAMPLE_DMA_SIZE);
 8001332:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001336:	4919      	ldr	r1, [pc, #100]	; (800139c <main+0x110>)
 8001338:	4819      	ldr	r0, [pc, #100]	; (80013a0 <main+0x114>)
 800133a:	f002 fa97 	bl	800386c <HAL_SPI_Receive_DMA>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (EXTI0_Flag)
 800133e:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <main+0x118>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d015      	beq.n	8001372 <main+0xe6>
		{


			EXTI0_Flag = 0;
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <main+0x118>)
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
			//Rx_temp = *(__IO uint8_t *)&hspi1.Instance->DR;
			/*if (Rx_temp > 0x00)
			  {
				  dbg_printf("%x \r\n", Rx_temp);
			  }*/
			__HAL_SPI_ENABLE(&hspi1);
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <main+0x114>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <main+0x114>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800135a:	601a      	str	r2, [r3, #0]
			if (initial)
 800135c:	7ffb      	ldrb	r3, [r7, #31]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d007      	beq.n	8001372 <main+0xe6>
			{
				initial = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	77fb      	strb	r3, [r7, #31]
				starttime = DWT->CYCCNT;
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <main+0x11c>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	617b      	str	r3, [r7, #20]
				startMsec = HAL_GetTick();
 800136c:	f000 fd0e 	bl	8001d8c <HAL_GetTick>
 8001370:	61b8      	str	r0, [r7, #24]
		}
		else
		{

		}
		if (RxBufDMA_Idn >= SAMPLE_DMA_SIZE * 10)
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <main+0x120>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800137a:	d3e0      	bcc.n	800133e <main+0xb2>
		{

			HAL_DMA_Abort(&hdma_spi1_rx);
 800137c:	4806      	ldr	r0, [pc, #24]	; (8001398 <main+0x10c>)
 800137e:	f000 ff14 	bl	80021aa <HAL_DMA_Abort>
			RxBuf_Idn = 0;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <main+0x124>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
		if (EXTI0_Flag)
 8001388:	e7d9      	b.n	800133e <main+0xb2>
 800138a:	bf00      	nop
 800138c:	20000000 	.word	0x20000000
 8001390:	08008954 	.word	0x08008954
 8001394:	40011400 	.word	0x40011400
 8001398:	2000334c 	.word	0x2000334c
 800139c:	20000200 	.word	0x20000200
 80013a0:	200032b4 	.word	0x200032b4
 80013a4:	200001fc 	.word	0x200001fc
 80013a8:	e0001000 	.word	0xe0001000
 80013ac:	20002a04 	.word	0x20002a04
 80013b0:	20002a00 	.word	0x20002a00

080013b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b094      	sub	sp, #80	; 0x50
 80013b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ba:	f107 0318 	add.w	r3, r7, #24
 80013be:	2238      	movs	r2, #56	; 0x38
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f003 f851 	bl	800446a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013d6:	2301      	movs	r3, #1
 80013d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80013e0:	2304      	movs	r3, #4
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e4:	2301      	movs	r3, #1
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80013e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ec:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ee:	2302      	movs	r3, #2
 80013f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013f8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80013fe:	2302      	movs	r3, #2
 8001400:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8001402:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001406:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8001408:	2340      	movs	r3, #64	; 0x40
 800140a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140c:	f107 0318 	add.w	r3, r7, #24
 8001410:	4618      	mov	r0, r3
 8001412:	f001 faf9 	bl	8002a08 <HAL_RCC_OscConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800141c:	f000 f924 	bl	8001668 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001420:	230f      	movs	r3, #15
 8001422:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001424:	2302      	movs	r3, #2
 8001426:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800142c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001430:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	2102      	movs	r1, #2
 800143a:	4618      	mov	r0, r3
 800143c:	f001 fdfa 	bl	8003034 <HAL_RCC_ClockConfig>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001446:	f000 f90f 	bl	8001668 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800144a:	4b03      	ldr	r3, [pc, #12]	; (8001458 <SystemClock_Config+0xa4>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]
}
 8001450:	bf00      	nop
 8001452:	3750      	adds	r7, #80	; 0x50
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	42420070 	.word	0x42420070

0800145c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001460:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <MX_SPI1_Init+0x64>)
 8001462:	4a18      	ldr	r2, [pc, #96]	; (80014c4 <MX_SPI1_Init+0x68>)
 8001464:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001466:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <MX_SPI1_Init+0x64>)
 8001468:	2200      	movs	r2, #0
 800146a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <MX_SPI1_Init+0x64>)
 800146e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001472:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <MX_SPI1_Init+0x64>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_SPI1_Init+0x64>)
 800147c:	2202      	movs	r2, #2
 800147e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <MX_SPI1_Init+0x64>)
 8001482:	2200      	movs	r2, #0
 8001484:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_SPI1_Init+0x64>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_SPI1_Init+0x64>)
 800148e:	2208      	movs	r2, #8
 8001490:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <MX_SPI1_Init+0x64>)
 8001494:	2200      	movs	r2, #0
 8001496:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_SPI1_Init+0x64>)
 800149a:	2200      	movs	r2, #0
 800149c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <MX_SPI1_Init+0x64>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_SPI1_Init+0x64>)
 80014a6:	220a      	movs	r2, #10
 80014a8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_SPI1_Init+0x64>)
 80014ac:	f001 ffb8 	bl	8003420 <HAL_SPI_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 80014b6:	f000 f8d7 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200032b4 	.word	0x200032b4
 80014c4:	40013000 	.word	0x40013000

080014c8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80014cc:	4b17      	ldr	r3, [pc, #92]	; (800152c <MX_SPI3_Init+0x64>)
 80014ce:	4a18      	ldr	r2, [pc, #96]	; (8001530 <MX_SPI3_Init+0x68>)
 80014d0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014d2:	4b16      	ldr	r3, [pc, #88]	; (800152c <MX_SPI3_Init+0x64>)
 80014d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014d8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <MX_SPI3_Init+0x64>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <MX_SPI3_Init+0x64>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_SPI3_Init+0x64>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <MX_SPI3_Init+0x64>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_SPI3_Init+0x64>)
 80014f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014f8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_SPI3_Init+0x64>)
 80014fc:	2208      	movs	r2, #8
 80014fe:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001500:	4b0a      	ldr	r3, [pc, #40]	; (800152c <MX_SPI3_Init+0x64>)
 8001502:	2200      	movs	r2, #0
 8001504:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_SPI3_Init+0x64>)
 8001508:	2200      	movs	r2, #0
 800150a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800150c:	4b07      	ldr	r3, [pc, #28]	; (800152c <MX_SPI3_Init+0x64>)
 800150e:	2200      	movs	r2, #0
 8001510:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_SPI3_Init+0x64>)
 8001514:	220a      	movs	r2, #10
 8001516:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001518:	4804      	ldr	r0, [pc, #16]	; (800152c <MX_SPI3_Init+0x64>)
 800151a:	f001 ff81 	bl	8003420 <HAL_SPI_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001524:	f000 f8a0 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20003218 	.word	0x20003218
 8001530:	40003c00 	.word	0x40003c00

08001534 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_USART2_UART_Init+0x4c>)
 800153a:	4a12      	ldr	r2, [pc, #72]	; (8001584 <MX_USART2_UART_Init+0x50>)
 800153c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <MX_USART2_UART_Init+0x4c>)
 8001540:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001544:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_USART2_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_USART2_UART_Init+0x4c>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <MX_USART2_UART_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_USART2_UART_Init+0x4c>)
 800155a:	2208      	movs	r2, #8
 800155c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <MX_USART2_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_USART2_UART_Init+0x4c>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_USART2_UART_Init+0x4c>)
 800156c:	f002 fd32 	bl	8003fd4 <HAL_UART_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001576:	f000 f877 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2000330c 	.word	0x2000330c
 8001584:	40004400 	.word	0x40004400

08001588 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <MX_DMA_Init+0x48>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	4a0f      	ldr	r2, [pc, #60]	; (80015d0 <MX_DMA_Init+0x48>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6153      	str	r3, [r2, #20]
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <MX_DMA_Init+0x48>)
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	200c      	movs	r0, #12
 80015ac:	f000 fcf1 	bl	8001f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80015b0:	200c      	movs	r0, #12
 80015b2:	f000 fd0a 	bl	8001fca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	2011      	movs	r0, #17
 80015bc:	f000 fce9 	bl	8001f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80015c0:	2011      	movs	r0, #17
 80015c2:	f000 fd02 	bl	8001fca <HAL_NVIC_EnableIRQ>

}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000

080015d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e8:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <MX_GPIO_Init+0x8c>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a1c      	ldr	r2, [pc, #112]	; (8001660 <MX_GPIO_Init+0x8c>)
 80015ee:	f043 0304 	orr.w	r3, r3, #4
 80015f2:	6193      	str	r3, [r2, #24]
 80015f4:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <MX_GPIO_Init+0x8c>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <MX_GPIO_Init+0x8c>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	4a16      	ldr	r2, [pc, #88]	; (8001660 <MX_GPIO_Init+0x8c>)
 8001606:	f043 0310 	orr.w	r3, r3, #16
 800160a:	6193      	str	r3, [r2, #24]
 800160c:	4b14      	ldr	r3, [pc, #80]	; (8001660 <MX_GPIO_Init+0x8c>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f003 0310 	and.w	r3, r3, #16
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_GPIO_Init+0x8c>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a10      	ldr	r2, [pc, #64]	; (8001660 <MX_GPIO_Init+0x8c>)
 800161e:	f043 0320 	orr.w	r3, r3, #32
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <MX_GPIO_Init+0x8c>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f003 0320 	and.w	r3, r3, #32
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|ADC_SYNC_START_Pin, GPIO_PIN_RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	2103      	movs	r1, #3
 8001634:	480b      	ldr	r0, [pc, #44]	; (8001664 <MX_GPIO_Init+0x90>)
 8001636:	f001 f9b7 	bl	80029a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD0 ADC_SYNC_START_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|ADC_SYNC_START_Pin;
 800163a:	2303      	movs	r3, #3
 800163c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163e:	2301      	movs	r3, #1
 8001640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2302      	movs	r3, #2
 8001648:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800164a:	f107 0310 	add.w	r3, r7, #16
 800164e:	4619      	mov	r1, r3
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <MX_GPIO_Init+0x90>)
 8001652:	f001 f84f 	bl	80026f4 <HAL_GPIO_Init>

}
 8001656:	bf00      	nop
 8001658:	3720      	adds	r7, #32
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000
 8001664:	40011400 	.word	0x40011400

08001668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800166c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800166e:	e7fe      	b.n	800166e <Error_Handler+0x6>

08001670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <HAL_MspInit+0x5c>)
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	4a14      	ldr	r2, [pc, #80]	; (80016cc <HAL_MspInit+0x5c>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6193      	str	r3, [r2, #24]
 8001682:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_MspInit+0x5c>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <HAL_MspInit+0x5c>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <HAL_MspInit+0x5c>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001698:	61d3      	str	r3, [r2, #28]
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <HAL_MspInit+0x5c>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <HAL_MspInit+0x60>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <HAL_MspInit+0x60>)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40010000 	.word	0x40010000

080016d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08c      	sub	sp, #48	; 0x30
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 031c 	add.w	r3, r7, #28
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a58      	ldr	r2, [pc, #352]	; (8001850 <HAL_SPI_MspInit+0x17c>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d164      	bne.n	80017be <HAL_SPI_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016f4:	4b57      	ldr	r3, [pc, #348]	; (8001854 <HAL_SPI_MspInit+0x180>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4a56      	ldr	r2, [pc, #344]	; (8001854 <HAL_SPI_MspInit+0x180>)
 80016fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016fe:	6193      	str	r3, [r2, #24]
 8001700:	4b54      	ldr	r3, [pc, #336]	; (8001854 <HAL_SPI_MspInit+0x180>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001708:	61bb      	str	r3, [r7, #24]
 800170a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170c:	4b51      	ldr	r3, [pc, #324]	; (8001854 <HAL_SPI_MspInit+0x180>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	4a50      	ldr	r2, [pc, #320]	; (8001854 <HAL_SPI_MspInit+0x180>)
 8001712:	f043 0304 	orr.w	r3, r3, #4
 8001716:	6193      	str	r3, [r2, #24]
 8001718:	4b4e      	ldr	r3, [pc, #312]	; (8001854 <HAL_SPI_MspInit+0x180>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001724:	23b0      	movs	r3, #176	; 0xb0
 8001726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001728:	2300      	movs	r3, #0
 800172a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	4619      	mov	r1, r3
 8001736:	4848      	ldr	r0, [pc, #288]	; (8001858 <HAL_SPI_MspInit+0x184>)
 8001738:	f000 ffdc 	bl	80026f4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800173c:	4b47      	ldr	r3, [pc, #284]	; (800185c <HAL_SPI_MspInit+0x188>)
 800173e:	4a48      	ldr	r2, [pc, #288]	; (8001860 <HAL_SPI_MspInit+0x18c>)
 8001740:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001742:	4b46      	ldr	r3, [pc, #280]	; (800185c <HAL_SPI_MspInit+0x188>)
 8001744:	2200      	movs	r2, #0
 8001746:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001748:	4b44      	ldr	r3, [pc, #272]	; (800185c <HAL_SPI_MspInit+0x188>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800174e:	4b43      	ldr	r3, [pc, #268]	; (800185c <HAL_SPI_MspInit+0x188>)
 8001750:	2280      	movs	r2, #128	; 0x80
 8001752:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001754:	4b41      	ldr	r3, [pc, #260]	; (800185c <HAL_SPI_MspInit+0x188>)
 8001756:	2200      	movs	r2, #0
 8001758:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800175a:	4b40      	ldr	r3, [pc, #256]	; (800185c <HAL_SPI_MspInit+0x188>)
 800175c:	2200      	movs	r2, #0
 800175e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001760:	4b3e      	ldr	r3, [pc, #248]	; (800185c <HAL_SPI_MspInit+0x188>)
 8001762:	2200      	movs	r2, #0
 8001764:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001766:	4b3d      	ldr	r3, [pc, #244]	; (800185c <HAL_SPI_MspInit+0x188>)
 8001768:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800176c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800176e:	483b      	ldr	r0, [pc, #236]	; (800185c <HAL_SPI_MspInit+0x188>)
 8001770:	f000 fc46 	bl	8002000 <HAL_DMA_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 800177a:	f7ff ff75 	bl	8001668 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a36      	ldr	r2, [pc, #216]	; (800185c <HAL_SPI_MspInit+0x188>)
 8001782:	64da      	str	r2, [r3, #76]	; 0x4c
 8001784:	4a35      	ldr	r2, [pc, #212]	; (800185c <HAL_SPI_MspInit+0x188>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI1_MspInit 1 */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800178a:	2310      	movs	r3, #16
 800178c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800178e:	4b35      	ldr	r3, [pc, #212]	; (8001864 <HAL_SPI_MspInit+0x190>)
 8001790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001796:	2303      	movs	r3, #3
 8001798:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179a:	f107 031c 	add.w	r3, r7, #28
 800179e:	4619      	mov	r1, r3
 80017a0:	482d      	ldr	r0, [pc, #180]	; (8001858 <HAL_SPI_MspInit+0x184>)
 80017a2:	f000 ffa7 	bl	80026f4 <HAL_GPIO_Init>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80017a6:	4b30      	ldr	r3, [pc, #192]	; (8001868 <HAL_SPI_MspInit+0x194>)
 80017a8:	2210      	movs	r2, #16
 80017aa:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2100      	movs	r1, #0
 80017b0:	200a      	movs	r0, #10
 80017b2:	f000 fbee 	bl	8001f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80017b6:	200a      	movs	r0, #10
 80017b8:	f000 fc07 	bl	8001fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017bc:	e044      	b.n	8001848 <HAL_SPI_MspInit+0x174>
  else if(hspi->Instance==SPI3)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a2a      	ldr	r2, [pc, #168]	; (800186c <HAL_SPI_MspInit+0x198>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d13f      	bne.n	8001848 <HAL_SPI_MspInit+0x174>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017c8:	4b22      	ldr	r3, [pc, #136]	; (8001854 <HAL_SPI_MspInit+0x180>)
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	4a21      	ldr	r2, [pc, #132]	; (8001854 <HAL_SPI_MspInit+0x180>)
 80017ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017d2:	61d3      	str	r3, [r2, #28]
 80017d4:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <HAL_SPI_MspInit+0x180>)
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e0:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <HAL_SPI_MspInit+0x180>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	4a1b      	ldr	r2, [pc, #108]	; (8001854 <HAL_SPI_MspInit+0x180>)
 80017e6:	f043 0310 	orr.w	r3, r3, #16
 80017ea:	6193      	str	r3, [r2, #24]
 80017ec:	4b19      	ldr	r3, [pc, #100]	; (8001854 <HAL_SPI_MspInit+0x180>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f003 0310 	and.w	r3, r3, #16
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80017f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001806:	f107 031c 	add.w	r3, r7, #28
 800180a:	4619      	mov	r1, r3
 800180c:	4818      	ldr	r0, [pc, #96]	; (8001870 <HAL_SPI_MspInit+0x19c>)
 800180e:	f000 ff71 	bl	80026f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001812:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001818:	2300      	movs	r3, #0
 800181a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001820:	f107 031c 	add.w	r3, r7, #28
 8001824:	4619      	mov	r1, r3
 8001826:	4812      	ldr	r0, [pc, #72]	; (8001870 <HAL_SPI_MspInit+0x19c>)
 8001828:	f000 ff64 	bl	80026f4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_SPI3_ENABLE();
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <HAL_SPI_MspInit+0x1a0>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001834:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001842:	4a0c      	ldr	r2, [pc, #48]	; (8001874 <HAL_SPI_MspInit+0x1a0>)
 8001844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001846:	6053      	str	r3, [r2, #4]
}
 8001848:	bf00      	nop
 800184a:	3730      	adds	r7, #48	; 0x30
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40013000 	.word	0x40013000
 8001854:	40021000 	.word	0x40021000
 8001858:	40010800 	.word	0x40010800
 800185c:	2000334c 	.word	0x2000334c
 8001860:	4002001c 	.word	0x4002001c
 8001864:	10110000 	.word	0x10110000
 8001868:	40010400 	.word	0x40010400
 800186c:	40003c00 	.word	0x40003c00
 8001870:	40011000 	.word	0x40011000
 8001874:	40010000 	.word	0x40010000

08001878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a35      	ldr	r2, [pc, #212]	; (8001968 <HAL_UART_MspInit+0xf0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d163      	bne.n	8001960 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001898:	4b34      	ldr	r3, [pc, #208]	; (800196c <HAL_UART_MspInit+0xf4>)
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	4a33      	ldr	r2, [pc, #204]	; (800196c <HAL_UART_MspInit+0xf4>)
 800189e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a2:	61d3      	str	r3, [r2, #28]
 80018a4:	4b31      	ldr	r3, [pc, #196]	; (800196c <HAL_UART_MspInit+0xf4>)
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b0:	4b2e      	ldr	r3, [pc, #184]	; (800196c <HAL_UART_MspInit+0xf4>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	4a2d      	ldr	r2, [pc, #180]	; (800196c <HAL_UART_MspInit+0xf4>)
 80018b6:	f043 0320 	orr.w	r3, r3, #32
 80018ba:	6193      	str	r3, [r2, #24]
 80018bc:	4b2b      	ldr	r3, [pc, #172]	; (800196c <HAL_UART_MspInit+0xf4>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f003 0320 	and.w	r3, r3, #32
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018c8:	2320      	movs	r3, #32
 80018ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d0:	2303      	movs	r3, #3
 80018d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4619      	mov	r1, r3
 80018da:	4825      	ldr	r0, [pc, #148]	; (8001970 <HAL_UART_MspInit+0xf8>)
 80018dc:	f000 ff0a 	bl	80026f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018e0:	2340      	movs	r3, #64	; 0x40
 80018e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	4619      	mov	r1, r3
 80018f2:	481f      	ldr	r0, [pc, #124]	; (8001970 <HAL_UART_MspInit+0xf8>)
 80018f4:	f000 fefe 	bl	80026f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART2_ENABLE();
 80018f8:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <HAL_UART_MspInit+0xfc>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	f043 0308 	orr.w	r3, r3, #8
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
 800190e:	4a19      	ldr	r2, [pc, #100]	; (8001974 <HAL_UART_MspInit+0xfc>)
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	6053      	str	r3, [r2, #4]

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001914:	4b18      	ldr	r3, [pc, #96]	; (8001978 <HAL_UART_MspInit+0x100>)
 8001916:	4a19      	ldr	r2, [pc, #100]	; (800197c <HAL_UART_MspInit+0x104>)
 8001918:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800191a:	4b17      	ldr	r3, [pc, #92]	; (8001978 <HAL_UART_MspInit+0x100>)
 800191c:	2210      	movs	r2, #16
 800191e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <HAL_UART_MspInit+0x100>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001926:	4b14      	ldr	r3, [pc, #80]	; (8001978 <HAL_UART_MspInit+0x100>)
 8001928:	2280      	movs	r2, #128	; 0x80
 800192a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_UART_MspInit+0x100>)
 800192e:	2200      	movs	r2, #0
 8001930:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <HAL_UART_MspInit+0x100>)
 8001934:	2200      	movs	r2, #0
 8001936:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <HAL_UART_MspInit+0x100>)
 800193a:	2200      	movs	r2, #0
 800193c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <HAL_UART_MspInit+0x100>)
 8001940:	2200      	movs	r2, #0
 8001942:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001944:	480c      	ldr	r0, [pc, #48]	; (8001978 <HAL_UART_MspInit+0x100>)
 8001946:	f000 fb5b 	bl	8002000 <HAL_DMA_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 8001950:	f7ff fe8a 	bl	8001668 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a08      	ldr	r2, [pc, #32]	; (8001978 <HAL_UART_MspInit+0x100>)
 8001958:	631a      	str	r2, [r3, #48]	; 0x30
 800195a:	4a07      	ldr	r2, [pc, #28]	; (8001978 <HAL_UART_MspInit+0x100>)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001960:	bf00      	nop
 8001962:	3728      	adds	r7, #40	; 0x28
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40004400 	.word	0x40004400
 800196c:	40021000 	.word	0x40021000
 8001970:	40011400 	.word	0x40011400
 8001974:	40010000 	.word	0x40010000
 8001978:	20003270 	.word	0x20003270
 800197c:	40020080 	.word	0x40020080

08001980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <NMI_Handler+0x4>

08001986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <HardFault_Handler+0x4>

0800198c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <MemManage_Handler+0x4>

08001992 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <BusFault_Handler+0x4>

08001998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <UsageFault_Handler+0x4>

0800199e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c6:	f000 f9cf 	bl	8001d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <DMA1_Channel2_IRQHandler+0x10>)
 80019d6:	f000 fc23 	bl	8002220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	2000334c 	.word	0x2000334c

080019e4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80019e8:	4802      	ldr	r0, [pc, #8]	; (80019f4 <DMA1_Channel7_IRQHandler+0x10>)
 80019ea:	f000 fc19 	bl	8002220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20003270 	.word	0x20003270

080019f8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80019fc:	2010      	movs	r0, #16
 80019fe:	f000 ffeb 	bl	80029d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	e00a      	b.n	8001a2e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a18:	f3af 8000 	nop.w
 8001a1c:	4601      	mov	r1, r0
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	60ba      	str	r2, [r7, #8]
 8001a24:	b2ca      	uxtb	r2, r1
 8001a26:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	dbf0      	blt.n	8001a18 <_read+0x12>
	}

return len;
 8001a36:	687b      	ldr	r3, [r7, #4]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	e009      	b.n	8001a66 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	60ba      	str	r2, [r7, #8]
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fb5e 	bl	800111c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	3301      	adds	r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	dbf1      	blt.n	8001a52 <_write+0x12>
	}
	return len;
 8001a6e:	687b      	ldr	r3, [r7, #4]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <_close>:

int _close(int file)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	return -1;
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr

08001a8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a9e:	605a      	str	r2, [r3, #4]
	return 0;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <_isatty>:

int _isatty(int file)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	return 1;
 8001ab4:	2301      	movs	r3, #1
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
	return 0;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae0:	4a14      	ldr	r2, [pc, #80]	; (8001b34 <_sbrk+0x5c>)
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <_sbrk+0x60>)
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <_sbrk+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d102      	bne.n	8001afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <_sbrk+0x64>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <_sbrk+0x68>)
 8001af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d207      	bcs.n	8001b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b08:	f002 fc7a 	bl	8004400 <__errno>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	230c      	movs	r3, #12
 8001b10:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
 8001b16:	e009      	b.n	8001b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1e:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	4a05      	ldr	r2, [pc, #20]	; (8001b3c <_sbrk+0x64>)
 8001b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20010000 	.word	0x20010000
 8001b38:	00000400 	.word	0x00000400
 8001b3c:	20002a0c 	.word	0x20002a0c
 8001b40:	20003398 	.word	0x20003398

08001b44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b089      	sub	sp, #36	; 0x24
 8001b54:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61bb      	str	r3, [r7, #24]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]

#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t prediv1source = 0U, prediv1factor = 0U, prediv2factor = 0U, pll2mull = 0U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001b72:	4b41      	ldr	r3, [pc, #260]	; (8001c78 <SystemCoreClockUpdate+0x128>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d007      	beq.n	8001b92 <SystemCoreClockUpdate+0x42>
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d009      	beq.n	8001b9a <SystemCoreClockUpdate+0x4a>
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d15d      	bne.n	8001c46 <SystemCoreClockUpdate+0xf6>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8001b8a:	4b3c      	ldr	r3, [pc, #240]	; (8001c7c <SystemCoreClockUpdate+0x12c>)
 8001b8c:	4a3c      	ldr	r2, [pc, #240]	; (8001c80 <SystemCoreClockUpdate+0x130>)
 8001b8e:	601a      	str	r2, [r3, #0]
      break;
 8001b90:	e05d      	b.n	8001c4e <SystemCoreClockUpdate+0xfe>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8001b92:	4b3a      	ldr	r3, [pc, #232]	; (8001c7c <SystemCoreClockUpdate+0x12c>)
 8001b94:	4a3b      	ldr	r2, [pc, #236]	; (8001c84 <SystemCoreClockUpdate+0x134>)
 8001b96:	601a      	str	r2, [r3, #0]
      break;
 8001b98:	e059      	b.n	8001c4e <SystemCoreClockUpdate+0xfe>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8001b9a:	4b37      	ldr	r3, [pc, #220]	; (8001c78 <SystemCoreClockUpdate+0x128>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001ba2:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001ba4:	4b34      	ldr	r3, [pc, #208]	; (8001c78 <SystemCoreClockUpdate+0x128>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bac:	617b      	str	r3, [r7, #20]
          SystemCoreClock = HSE_VALUE * pllmull;
        }
 #endif
      }
#else
      pllmull = pllmull >> 18U;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	0c9b      	lsrs	r3, r3, #18
 8001bb2:	61fb      	str	r3, [r7, #28]
      
      if (pllmull != 0x0DU)
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	2b0d      	cmp	r3, #13
 8001bb8:	d003      	beq.n	8001bc2 <SystemCoreClockUpdate+0x72>
      {
         pllmull += 2U;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	61fb      	str	r3, [r7, #28]
 8001bc0:	e001      	b.n	8001bc6 <SystemCoreClockUpdate+0x76>
      }
      else
      { /* PLL multiplication factor = PLL input clock * 6.5 */
        pllmull = 13U / 2U; 
 8001bc2:	2306      	movs	r3, #6
 8001bc4:	61fb      	str	r3, [r7, #28]
      }
            
      if (pllsource == 0x00U)
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d106      	bne.n	8001bda <SystemCoreClockUpdate+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	4a2e      	ldr	r2, [pc, #184]	; (8001c88 <SystemCoreClockUpdate+0x138>)
 8001bd0:	fb02 f303 	mul.w	r3, r2, r3
 8001bd4:	4a29      	ldr	r2, [pc, #164]	; (8001c7c <SystemCoreClockUpdate+0x12c>)
 8001bd6:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 8001bd8:	e039      	b.n	8001c4e <SystemCoreClockUpdate+0xfe>
        prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
 8001bda:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <SystemCoreClockUpdate+0x128>)
 8001bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be2:	613b      	str	r3, [r7, #16]
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 8001be4:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <SystemCoreClockUpdate+0x128>)
 8001be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be8:	f003 030f 	and.w	r3, r3, #15
 8001bec:	3301      	adds	r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
        if (prediv1source == 0U)
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d109      	bne.n	8001c0a <SystemCoreClockUpdate+0xba>
          SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;          
 8001bf6:	4a23      	ldr	r2, [pc, #140]	; (8001c84 <SystemCoreClockUpdate+0x134>)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	fb02 f303 	mul.w	r3, r2, r3
 8001c04:	4a1d      	ldr	r2, [pc, #116]	; (8001c7c <SystemCoreClockUpdate+0x12c>)
 8001c06:	6013      	str	r3, [r2, #0]
      break;
 8001c08:	e021      	b.n	8001c4e <SystemCoreClockUpdate+0xfe>
          prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4U) + 1U;
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <SystemCoreClockUpdate+0x128>)
 8001c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0e:	091b      	lsrs	r3, r3, #4
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	3301      	adds	r3, #1
 8001c16:	60bb      	str	r3, [r7, #8]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
 8001c18:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <SystemCoreClockUpdate+0x128>)
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	3302      	adds	r3, #2
 8001c24:	607b      	str	r3, [r7, #4]
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
 8001c26:	4a17      	ldr	r2, [pc, #92]	; (8001c84 <SystemCoreClockUpdate+0x134>)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	fb02 f203 	mul.w	r2, r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	fb02 f303 	mul.w	r3, r2, r3
 8001c40:	4a0e      	ldr	r2, [pc, #56]	; (8001c7c <SystemCoreClockUpdate+0x12c>)
 8001c42:	6013      	str	r3, [r2, #0]
      break;
 8001c44:	e003      	b.n	8001c4e <SystemCoreClockUpdate+0xfe>

    default:
      SystemCoreClock = HSI_VALUE;
 8001c46:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <SystemCoreClockUpdate+0x12c>)
 8001c48:	4a0d      	ldr	r2, [pc, #52]	; (8001c80 <SystemCoreClockUpdate+0x130>)
 8001c4a:	601a      	str	r2, [r3, #0]
      break;
 8001c4c:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <SystemCoreClockUpdate+0x128>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	091b      	lsrs	r3, r3, #4
 8001c54:	f003 030f 	and.w	r3, r3, #15
 8001c58:	4a0c      	ldr	r2, [pc, #48]	; (8001c8c <SystemCoreClockUpdate+0x13c>)
 8001c5a:	5cd3      	ldrb	r3, [r2, r3]
 8001c5c:	61bb      	str	r3, [r7, #24]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <SystemCoreClockUpdate+0x12c>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	fa22 f303 	lsr.w	r3, r2, r3
 8001c68:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <SystemCoreClockUpdate+0x12c>)
 8001c6a:	6013      	str	r3, [r2, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	3724      	adds	r7, #36	; 0x24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	007a1200 	.word	0x007a1200
 8001c84:	017d7840 	.word	0x017d7840
 8001c88:	003d0900 	.word	0x003d0900
 8001c8c:	08008984 	.word	0x08008984

08001c90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c90:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c92:	e003      	b.n	8001c9c <LoopCopyDataInit>

08001c94 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001c96:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c98:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c9a:	3104      	adds	r1, #4

08001c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c9c:	480a      	ldr	r0, [pc, #40]	; (8001cc8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001c9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001ca0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001ca2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001ca4:	d3f6      	bcc.n	8001c94 <CopyDataInit>
  ldr r2, =_sbss
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	; (8001cd0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001ca8:	e002      	b.n	8001cb0 <LoopFillZerobss>

08001caa <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001caa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001cac:	f842 3b04 	str.w	r3, [r2], #4

08001cb0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001cb2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001cb4:	d3f9      	bcc.n	8001caa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cb6:	f7ff ff45 	bl	8001b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cba:	f002 fba7 	bl	800440c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cbe:	f7ff fae5 	bl	800128c <main>
  bx lr
 8001cc2:	4770      	bx	lr
  ldr r3, =_sidata
 8001cc4:	08008cd0 	.word	0x08008cd0
  ldr r0, =_sdata
 8001cc8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001ccc:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8001cd0:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8001cd4:	20003398 	.word	0x20003398

08001cd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cd8:	e7fe      	b.n	8001cd8 <ADC1_2_IRQHandler>
	...

08001cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <HAL_Init+0x28>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <HAL_Init+0x28>)
 8001ce6:	f043 0310 	orr.w	r3, r3, #16
 8001cea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cec:	2003      	movs	r0, #3
 8001cee:	f000 f945 	bl	8001f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f000 f808 	bl	8001d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf8:	f7ff fcba 	bl	8001670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40022000 	.word	0x40022000

08001d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_InitTick+0x54>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_InitTick+0x58>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 f95d 	bl	8001fe6 <HAL_SYSTICK_Config>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00e      	b.n	8001d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b0f      	cmp	r3, #15
 8001d3a:	d80a      	bhi.n	8001d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295
 8001d44:	f000 f925 	bl	8001f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d48:	4a06      	ldr	r2, [pc, #24]	; (8001d64 <HAL_InitTick+0x5c>)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e000      	b.n	8001d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	20000008 	.word	0x20000008
 8001d64:	20000004 	.word	0x20000004

08001d68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <HAL_IncTick+0x1c>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_IncTick+0x20>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4413      	add	r3, r2
 8001d78:	4a03      	ldr	r2, [pc, #12]	; (8001d88 <HAL_IncTick+0x20>)
 8001d7a:	6013      	str	r3, [r2, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	20000008 	.word	0x20000008
 8001d88:	20003390 	.word	0x20003390

08001d8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d90:	4b02      	ldr	r3, [pc, #8]	; (8001d9c <HAL_GetTick+0x10>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	20003390 	.word	0x20003390

08001da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da8:	f7ff fff0 	bl	8001d8c <HAL_GetTick>
 8001dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db8:	d005      	beq.n	8001dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <HAL_Delay+0x40>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dc6:	bf00      	nop
 8001dc8:	f7ff ffe0 	bl	8001d8c <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d8f7      	bhi.n	8001dc8 <HAL_Delay+0x28>
  {
  }
}
 8001dd8:	bf00      	nop
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000008 	.word	0x20000008

08001de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e00:	4013      	ands	r3, r2
 8001e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e16:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	60d3      	str	r3, [r2, #12]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e30:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <__NVIC_GetPriorityGrouping+0x18>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	0a1b      	lsrs	r3, r3, #8
 8001e36:	f003 0307 	and.w	r3, r3, #7
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	db0b      	blt.n	8001e72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	f003 021f 	and.w	r2, r3, #31
 8001e60:	4906      	ldr	r1, [pc, #24]	; (8001e7c <__NVIC_EnableIRQ+0x34>)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	2001      	movs	r0, #1
 8001e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr
 8001e7c:	e000e100 	.word	0xe000e100

08001e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	6039      	str	r1, [r7, #0]
 8001e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	db0a      	blt.n	8001eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	490c      	ldr	r1, [pc, #48]	; (8001ecc <__NVIC_SetPriority+0x4c>)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	0112      	lsls	r2, r2, #4
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea8:	e00a      	b.n	8001ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	4908      	ldr	r1, [pc, #32]	; (8001ed0 <__NVIC_SetPriority+0x50>)
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	3b04      	subs	r3, #4
 8001eb8:	0112      	lsls	r2, r2, #4
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	761a      	strb	r2, [r3, #24]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000e100 	.word	0xe000e100
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	; 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f1c3 0307 	rsb	r3, r3, #7
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	bf28      	it	cs
 8001ef2:	2304      	movcs	r3, #4
 8001ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	2b06      	cmp	r3, #6
 8001efc:	d902      	bls.n	8001f04 <NVIC_EncodePriority+0x30>
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3b03      	subs	r3, #3
 8001f02:	e000      	b.n	8001f06 <NVIC_EncodePriority+0x32>
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f08:	f04f 32ff 	mov.w	r2, #4294967295
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43da      	mvns	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	401a      	ands	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	fa01 f303 	lsl.w	r3, r1, r3
 8001f26:	43d9      	mvns	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2c:	4313      	orrs	r3, r2
         );
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3724      	adds	r7, #36	; 0x24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f48:	d301      	bcc.n	8001f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00f      	b.n	8001f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <SysTick_Config+0x40>)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f56:	210f      	movs	r1, #15
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5c:	f7ff ff90 	bl	8001e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <SysTick_Config+0x40>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f66:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <SysTick_Config+0x40>)
 8001f68:	2207      	movs	r2, #7
 8001f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	e000e010 	.word	0xe000e010

08001f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ff2d 	bl	8001de4 <__NVIC_SetPriorityGrouping>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b086      	sub	sp, #24
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	4603      	mov	r3, r0
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa4:	f7ff ff42 	bl	8001e2c <__NVIC_GetPriorityGrouping>
 8001fa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	6978      	ldr	r0, [r7, #20]
 8001fb0:	f7ff ff90 	bl	8001ed4 <NVIC_EncodePriority>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff5f 	bl	8001e80 <__NVIC_SetPriority>
}
 8001fc2:	bf00      	nop
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff35 	bl	8001e48 <__NVIC_EnableIRQ>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff ffa2 	bl	8001f38 <SysTick_Config>
 8001ff4:	4603      	mov	r3, r0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e059      	b.n	80020ca <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	4b2d      	ldr	r3, [pc, #180]	; (80020d4 <HAL_DMA_Init+0xd4>)
 800201e:	429a      	cmp	r2, r3
 8002020:	d80f      	bhi.n	8002042 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	4b2b      	ldr	r3, [pc, #172]	; (80020d8 <HAL_DMA_Init+0xd8>)
 800202a:	4413      	add	r3, r2
 800202c:	4a2b      	ldr	r2, [pc, #172]	; (80020dc <HAL_DMA_Init+0xdc>)
 800202e:	fba2 2303 	umull	r2, r3, r2, r3
 8002032:	091b      	lsrs	r3, r3, #4
 8002034:	009a      	lsls	r2, r3, #2
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a28      	ldr	r2, [pc, #160]	; (80020e0 <HAL_DMA_Init+0xe0>)
 800203e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002040:	e00e      	b.n	8002060 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <HAL_DMA_Init+0xe4>)
 800204a:	4413      	add	r3, r2
 800204c:	4a23      	ldr	r2, [pc, #140]	; (80020dc <HAL_DMA_Init+0xdc>)
 800204e:	fba2 2303 	umull	r2, r3, r2, r3
 8002052:	091b      	lsrs	r3, r3, #4
 8002054:	009a      	lsls	r2, r3, #2
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a22      	ldr	r2, [pc, #136]	; (80020e8 <HAL_DMA_Init+0xe8>)
 800205e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002076:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800207a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002084:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002090:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800209c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	40020407 	.word	0x40020407
 80020d8:	bffdfff8 	.word	0xbffdfff8
 80020dc:	cccccccd 	.word	0xcccccccd
 80020e0:	40020000 	.word	0x40020000
 80020e4:	bffdfbf8 	.word	0xbffdfbf8
 80020e8:	40020400 	.word	0x40020400

080020ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_DMA_Start_IT+0x20>
 8002108:	2302      	movs	r3, #2
 800210a:	e04a      	b.n	80021a2 <HAL_DMA_Start_IT+0xb6>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800211a:	2b01      	cmp	r3, #1
 800211c:	d13a      	bne.n	8002194 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2202      	movs	r2, #2
 8002122:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0201 	bic.w	r2, r2, #1
 800213a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 faa8 	bl	8002698 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	2b00      	cmp	r3, #0
 800214e:	d008      	beq.n	8002162 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 020e 	orr.w	r2, r2, #14
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	e00f      	b.n	8002182 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0204 	bic.w	r2, r2, #4
 8002170:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f042 020a 	orr.w	r2, r2, #10
 8002180:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 0201 	orr.w	r2, r2, #1
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e005      	b.n	80021a0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800219c:	2302      	movs	r3, #2
 800219e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80021a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b085      	sub	sp, #20
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d008      	beq.n	80021d2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2204      	movs	r2, #4
 80021c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e020      	b.n	8002214 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 020e 	bic.w	r2, r2, #14
 80021e0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0201 	bic.w	r2, r2, #1
 80021f0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fa:	2101      	movs	r1, #1
 80021fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002200:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002212:	7bfb      	ldrb	r3, [r7, #15]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
	...

08002220 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	2204      	movs	r2, #4
 800223e:	409a      	lsls	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4013      	ands	r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80d6 	beq.w	80023f6 <HAL_DMA_IRQHandler+0x1d6>
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 80d0 	beq.w	80023f6 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0320 	and.w	r3, r3, #32
 8002260:	2b00      	cmp	r3, #0
 8002262:	d107      	bne.n	8002274 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0204 	bic.w	r2, r2, #4
 8002272:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	4b9b      	ldr	r3, [pc, #620]	; (80024e8 <HAL_DMA_IRQHandler+0x2c8>)
 800227c:	429a      	cmp	r2, r3
 800227e:	d958      	bls.n	8002332 <HAL_DMA_IRQHandler+0x112>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a99      	ldr	r2, [pc, #612]	; (80024ec <HAL_DMA_IRQHandler+0x2cc>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d04f      	beq.n	800232a <HAL_DMA_IRQHandler+0x10a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a98      	ldr	r2, [pc, #608]	; (80024f0 <HAL_DMA_IRQHandler+0x2d0>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d048      	beq.n	8002326 <HAL_DMA_IRQHandler+0x106>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a96      	ldr	r2, [pc, #600]	; (80024f4 <HAL_DMA_IRQHandler+0x2d4>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d040      	beq.n	8002320 <HAL_DMA_IRQHandler+0x100>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a95      	ldr	r2, [pc, #596]	; (80024f8 <HAL_DMA_IRQHandler+0x2d8>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d038      	beq.n	800231a <HAL_DMA_IRQHandler+0xfa>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a93      	ldr	r2, [pc, #588]	; (80024fc <HAL_DMA_IRQHandler+0x2dc>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d030      	beq.n	8002314 <HAL_DMA_IRQHandler+0xf4>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a92      	ldr	r2, [pc, #584]	; (8002500 <HAL_DMA_IRQHandler+0x2e0>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d028      	beq.n	800230e <HAL_DMA_IRQHandler+0xee>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a89      	ldr	r2, [pc, #548]	; (80024e8 <HAL_DMA_IRQHandler+0x2c8>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d020      	beq.n	8002308 <HAL_DMA_IRQHandler+0xe8>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a8e      	ldr	r2, [pc, #568]	; (8002504 <HAL_DMA_IRQHandler+0x2e4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d019      	beq.n	8002304 <HAL_DMA_IRQHandler+0xe4>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a8c      	ldr	r2, [pc, #560]	; (8002508 <HAL_DMA_IRQHandler+0x2e8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d012      	beq.n	8002300 <HAL_DMA_IRQHandler+0xe0>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a8b      	ldr	r2, [pc, #556]	; (800250c <HAL_DMA_IRQHandler+0x2ec>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d00a      	beq.n	80022fa <HAL_DMA_IRQHandler+0xda>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a89      	ldr	r2, [pc, #548]	; (8002510 <HAL_DMA_IRQHandler+0x2f0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d102      	bne.n	80022f4 <HAL_DMA_IRQHandler+0xd4>
 80022ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022f2:	e01b      	b.n	800232c <HAL_DMA_IRQHandler+0x10c>
 80022f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022f8:	e018      	b.n	800232c <HAL_DMA_IRQHandler+0x10c>
 80022fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022fe:	e015      	b.n	800232c <HAL_DMA_IRQHandler+0x10c>
 8002300:	2340      	movs	r3, #64	; 0x40
 8002302:	e013      	b.n	800232c <HAL_DMA_IRQHandler+0x10c>
 8002304:	2304      	movs	r3, #4
 8002306:	e011      	b.n	800232c <HAL_DMA_IRQHandler+0x10c>
 8002308:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800230c:	e00e      	b.n	800232c <HAL_DMA_IRQHandler+0x10c>
 800230e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002312:	e00b      	b.n	800232c <HAL_DMA_IRQHandler+0x10c>
 8002314:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002318:	e008      	b.n	800232c <HAL_DMA_IRQHandler+0x10c>
 800231a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800231e:	e005      	b.n	800232c <HAL_DMA_IRQHandler+0x10c>
 8002320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002324:	e002      	b.n	800232c <HAL_DMA_IRQHandler+0x10c>
 8002326:	2340      	movs	r3, #64	; 0x40
 8002328:	e000      	b.n	800232c <HAL_DMA_IRQHandler+0x10c>
 800232a:	2304      	movs	r3, #4
 800232c:	4a79      	ldr	r2, [pc, #484]	; (8002514 <HAL_DMA_IRQHandler+0x2f4>)
 800232e:	6053      	str	r3, [r2, #4]
 8002330:	e057      	b.n	80023e2 <HAL_DMA_IRQHandler+0x1c2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a6d      	ldr	r2, [pc, #436]	; (80024ec <HAL_DMA_IRQHandler+0x2cc>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d04f      	beq.n	80023dc <HAL_DMA_IRQHandler+0x1bc>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a6b      	ldr	r2, [pc, #428]	; (80024f0 <HAL_DMA_IRQHandler+0x2d0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d048      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x1b8>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a6a      	ldr	r2, [pc, #424]	; (80024f4 <HAL_DMA_IRQHandler+0x2d4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d040      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x1b2>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a68      	ldr	r2, [pc, #416]	; (80024f8 <HAL_DMA_IRQHandler+0x2d8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d038      	beq.n	80023cc <HAL_DMA_IRQHandler+0x1ac>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a67      	ldr	r2, [pc, #412]	; (80024fc <HAL_DMA_IRQHandler+0x2dc>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d030      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x1a6>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a65      	ldr	r2, [pc, #404]	; (8002500 <HAL_DMA_IRQHandler+0x2e0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d028      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x1a0>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a5d      	ldr	r2, [pc, #372]	; (80024e8 <HAL_DMA_IRQHandler+0x2c8>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d020      	beq.n	80023ba <HAL_DMA_IRQHandler+0x19a>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a61      	ldr	r2, [pc, #388]	; (8002504 <HAL_DMA_IRQHandler+0x2e4>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d019      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x196>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a60      	ldr	r2, [pc, #384]	; (8002508 <HAL_DMA_IRQHandler+0x2e8>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d012      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x192>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a5e      	ldr	r2, [pc, #376]	; (800250c <HAL_DMA_IRQHandler+0x2ec>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00a      	beq.n	80023ac <HAL_DMA_IRQHandler+0x18c>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a5d      	ldr	r2, [pc, #372]	; (8002510 <HAL_DMA_IRQHandler+0x2f0>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d102      	bne.n	80023a6 <HAL_DMA_IRQHandler+0x186>
 80023a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023a4:	e01b      	b.n	80023de <HAL_DMA_IRQHandler+0x1be>
 80023a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80023aa:	e018      	b.n	80023de <HAL_DMA_IRQHandler+0x1be>
 80023ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023b0:	e015      	b.n	80023de <HAL_DMA_IRQHandler+0x1be>
 80023b2:	2340      	movs	r3, #64	; 0x40
 80023b4:	e013      	b.n	80023de <HAL_DMA_IRQHandler+0x1be>
 80023b6:	2304      	movs	r3, #4
 80023b8:	e011      	b.n	80023de <HAL_DMA_IRQHandler+0x1be>
 80023ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80023be:	e00e      	b.n	80023de <HAL_DMA_IRQHandler+0x1be>
 80023c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023c4:	e00b      	b.n	80023de <HAL_DMA_IRQHandler+0x1be>
 80023c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80023ca:	e008      	b.n	80023de <HAL_DMA_IRQHandler+0x1be>
 80023cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023d0:	e005      	b.n	80023de <HAL_DMA_IRQHandler+0x1be>
 80023d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023d6:	e002      	b.n	80023de <HAL_DMA_IRQHandler+0x1be>
 80023d8:	2340      	movs	r3, #64	; 0x40
 80023da:	e000      	b.n	80023de <HAL_DMA_IRQHandler+0x1be>
 80023dc:	2304      	movs	r3, #4
 80023de:	4a4e      	ldr	r2, [pc, #312]	; (8002518 <HAL_DMA_IRQHandler+0x2f8>)
 80023e0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 8136 	beq.w	8002658 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80023f4:	e130      	b.n	8002658 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	2202      	movs	r2, #2
 80023fc:	409a      	lsls	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4013      	ands	r3, r2
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 80f8 	beq.w	80025f8 <HAL_DMA_IRQHandler+0x3d8>
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 80f2 	beq.w	80025f8 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0320 	and.w	r3, r3, #32
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10b      	bne.n	800243a <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 020a 	bic.w	r2, r2, #10
 8002430:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	4b29      	ldr	r3, [pc, #164]	; (80024e8 <HAL_DMA_IRQHandler+0x2c8>)
 8002442:	429a      	cmp	r2, r3
 8002444:	d973      	bls.n	800252e <HAL_DMA_IRQHandler+0x30e>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a28      	ldr	r2, [pc, #160]	; (80024ec <HAL_DMA_IRQHandler+0x2cc>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d06a      	beq.n	8002526 <HAL_DMA_IRQHandler+0x306>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a26      	ldr	r2, [pc, #152]	; (80024f0 <HAL_DMA_IRQHandler+0x2d0>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d063      	beq.n	8002522 <HAL_DMA_IRQHandler+0x302>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a25      	ldr	r2, [pc, #148]	; (80024f4 <HAL_DMA_IRQHandler+0x2d4>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d05b      	beq.n	800251c <HAL_DMA_IRQHandler+0x2fc>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a23      	ldr	r2, [pc, #140]	; (80024f8 <HAL_DMA_IRQHandler+0x2d8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d038      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x2c0>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a22      	ldr	r2, [pc, #136]	; (80024fc <HAL_DMA_IRQHandler+0x2dc>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d030      	beq.n	80024da <HAL_DMA_IRQHandler+0x2ba>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a20      	ldr	r2, [pc, #128]	; (8002500 <HAL_DMA_IRQHandler+0x2e0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d028      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x2b4>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a18      	ldr	r2, [pc, #96]	; (80024e8 <HAL_DMA_IRQHandler+0x2c8>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d020      	beq.n	80024ce <HAL_DMA_IRQHandler+0x2ae>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a1c      	ldr	r2, [pc, #112]	; (8002504 <HAL_DMA_IRQHandler+0x2e4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d019      	beq.n	80024ca <HAL_DMA_IRQHandler+0x2aa>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1b      	ldr	r2, [pc, #108]	; (8002508 <HAL_DMA_IRQHandler+0x2e8>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d012      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x2a6>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a19      	ldr	r2, [pc, #100]	; (800250c <HAL_DMA_IRQHandler+0x2ec>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00a      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x2a0>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a18      	ldr	r2, [pc, #96]	; (8002510 <HAL_DMA_IRQHandler+0x2f0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d102      	bne.n	80024ba <HAL_DMA_IRQHandler+0x29a>
 80024b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024b8:	e036      	b.n	8002528 <HAL_DMA_IRQHandler+0x308>
 80024ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024be:	e033      	b.n	8002528 <HAL_DMA_IRQHandler+0x308>
 80024c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024c4:	e030      	b.n	8002528 <HAL_DMA_IRQHandler+0x308>
 80024c6:	2320      	movs	r3, #32
 80024c8:	e02e      	b.n	8002528 <HAL_DMA_IRQHandler+0x308>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e02c      	b.n	8002528 <HAL_DMA_IRQHandler+0x308>
 80024ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024d2:	e029      	b.n	8002528 <HAL_DMA_IRQHandler+0x308>
 80024d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80024d8:	e026      	b.n	8002528 <HAL_DMA_IRQHandler+0x308>
 80024da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024de:	e023      	b.n	8002528 <HAL_DMA_IRQHandler+0x308>
 80024e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024e4:	e020      	b.n	8002528 <HAL_DMA_IRQHandler+0x308>
 80024e6:	bf00      	nop
 80024e8:	40020080 	.word	0x40020080
 80024ec:	40020008 	.word	0x40020008
 80024f0:	4002001c 	.word	0x4002001c
 80024f4:	40020030 	.word	0x40020030
 80024f8:	40020044 	.word	0x40020044
 80024fc:	40020058 	.word	0x40020058
 8002500:	4002006c 	.word	0x4002006c
 8002504:	40020408 	.word	0x40020408
 8002508:	4002041c 	.word	0x4002041c
 800250c:	40020430 	.word	0x40020430
 8002510:	40020444 	.word	0x40020444
 8002514:	40020400 	.word	0x40020400
 8002518:	40020000 	.word	0x40020000
 800251c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002520:	e002      	b.n	8002528 <HAL_DMA_IRQHandler+0x308>
 8002522:	2320      	movs	r3, #32
 8002524:	e000      	b.n	8002528 <HAL_DMA_IRQHandler+0x308>
 8002526:	2302      	movs	r3, #2
 8002528:	4a4e      	ldr	r2, [pc, #312]	; (8002664 <HAL_DMA_IRQHandler+0x444>)
 800252a:	6053      	str	r3, [r2, #4]
 800252c:	e057      	b.n	80025de <HAL_DMA_IRQHandler+0x3be>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a4d      	ldr	r2, [pc, #308]	; (8002668 <HAL_DMA_IRQHandler+0x448>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d04f      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x3b8>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a4b      	ldr	r2, [pc, #300]	; (800266c <HAL_DMA_IRQHandler+0x44c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d048      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x3b4>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a4a      	ldr	r2, [pc, #296]	; (8002670 <HAL_DMA_IRQHandler+0x450>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d040      	beq.n	80025ce <HAL_DMA_IRQHandler+0x3ae>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a48      	ldr	r2, [pc, #288]	; (8002674 <HAL_DMA_IRQHandler+0x454>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d038      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x3a8>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a47      	ldr	r2, [pc, #284]	; (8002678 <HAL_DMA_IRQHandler+0x458>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d030      	beq.n	80025c2 <HAL_DMA_IRQHandler+0x3a2>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a45      	ldr	r2, [pc, #276]	; (800267c <HAL_DMA_IRQHandler+0x45c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d028      	beq.n	80025bc <HAL_DMA_IRQHandler+0x39c>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a44      	ldr	r2, [pc, #272]	; (8002680 <HAL_DMA_IRQHandler+0x460>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d020      	beq.n	80025b6 <HAL_DMA_IRQHandler+0x396>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a42      	ldr	r2, [pc, #264]	; (8002684 <HAL_DMA_IRQHandler+0x464>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d019      	beq.n	80025b2 <HAL_DMA_IRQHandler+0x392>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a41      	ldr	r2, [pc, #260]	; (8002688 <HAL_DMA_IRQHandler+0x468>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d012      	beq.n	80025ae <HAL_DMA_IRQHandler+0x38e>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a3f      	ldr	r2, [pc, #252]	; (800268c <HAL_DMA_IRQHandler+0x46c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d00a      	beq.n	80025a8 <HAL_DMA_IRQHandler+0x388>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a3e      	ldr	r2, [pc, #248]	; (8002690 <HAL_DMA_IRQHandler+0x470>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d102      	bne.n	80025a2 <HAL_DMA_IRQHandler+0x382>
 800259c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025a0:	e01b      	b.n	80025da <HAL_DMA_IRQHandler+0x3ba>
 80025a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025a6:	e018      	b.n	80025da <HAL_DMA_IRQHandler+0x3ba>
 80025a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025ac:	e015      	b.n	80025da <HAL_DMA_IRQHandler+0x3ba>
 80025ae:	2320      	movs	r3, #32
 80025b0:	e013      	b.n	80025da <HAL_DMA_IRQHandler+0x3ba>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e011      	b.n	80025da <HAL_DMA_IRQHandler+0x3ba>
 80025b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ba:	e00e      	b.n	80025da <HAL_DMA_IRQHandler+0x3ba>
 80025bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025c0:	e00b      	b.n	80025da <HAL_DMA_IRQHandler+0x3ba>
 80025c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c6:	e008      	b.n	80025da <HAL_DMA_IRQHandler+0x3ba>
 80025c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025cc:	e005      	b.n	80025da <HAL_DMA_IRQHandler+0x3ba>
 80025ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025d2:	e002      	b.n	80025da <HAL_DMA_IRQHandler+0x3ba>
 80025d4:	2320      	movs	r3, #32
 80025d6:	e000      	b.n	80025da <HAL_DMA_IRQHandler+0x3ba>
 80025d8:	2302      	movs	r3, #2
 80025da:	4a2e      	ldr	r2, [pc, #184]	; (8002694 <HAL_DMA_IRQHandler+0x474>)
 80025dc:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d034      	beq.n	8002658 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80025f6:	e02f      	b.n	8002658 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	2208      	movs	r2, #8
 80025fe:	409a      	lsls	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4013      	ands	r3, r2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d028      	beq.n	800265a <HAL_DMA_IRQHandler+0x43a>
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b00      	cmp	r3, #0
 8002610:	d023      	beq.n	800265a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 020e 	bic.w	r2, r2, #14
 8002620:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262a:	2101      	movs	r1, #1
 800262c:	fa01 f202 	lsl.w	r2, r1, r2
 8002630:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	2b00      	cmp	r3, #0
 800264e:	d004      	beq.n	800265a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	4798      	blx	r3
    }
  }
  return;
 8002658:	bf00      	nop
 800265a:	bf00      	nop
}
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40020400 	.word	0x40020400
 8002668:	40020008 	.word	0x40020008
 800266c:	4002001c 	.word	0x4002001c
 8002670:	40020030 	.word	0x40020030
 8002674:	40020044 	.word	0x40020044
 8002678:	40020058 	.word	0x40020058
 800267c:	4002006c 	.word	0x4002006c
 8002680:	40020080 	.word	0x40020080
 8002684:	40020408 	.word	0x40020408
 8002688:	4002041c 	.word	0x4002041c
 800268c:	40020430 	.word	0x40020430
 8002690:	40020444 	.word	0x40020444
 8002694:	40020000 	.word	0x40020000

08002698 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
 80026a4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ae:	2101      	movs	r1, #1
 80026b0:	fa01 f202 	lsl.w	r2, r1, r2
 80026b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b10      	cmp	r3, #16
 80026c4:	d108      	bne.n	80026d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80026d6:	e007      	b.n	80026e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	60da      	str	r2, [r3, #12]
}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr
	...

080026f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b08b      	sub	sp, #44	; 0x2c
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026fe:	2300      	movs	r3, #0
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002702:	2300      	movs	r3, #0
 8002704:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002706:	e127      	b.n	8002958 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002708:	2201      	movs	r2, #1
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	69fa      	ldr	r2, [r7, #28]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	429a      	cmp	r2, r3
 8002722:	f040 8116 	bne.w	8002952 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b12      	cmp	r3, #18
 800272c:	d034      	beq.n	8002798 <HAL_GPIO_Init+0xa4>
 800272e:	2b12      	cmp	r3, #18
 8002730:	d80d      	bhi.n	800274e <HAL_GPIO_Init+0x5a>
 8002732:	2b02      	cmp	r3, #2
 8002734:	d02b      	beq.n	800278e <HAL_GPIO_Init+0x9a>
 8002736:	2b02      	cmp	r3, #2
 8002738:	d804      	bhi.n	8002744 <HAL_GPIO_Init+0x50>
 800273a:	2b00      	cmp	r3, #0
 800273c:	d031      	beq.n	80027a2 <HAL_GPIO_Init+0xae>
 800273e:	2b01      	cmp	r3, #1
 8002740:	d01c      	beq.n	800277c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002742:	e048      	b.n	80027d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002744:	2b03      	cmp	r3, #3
 8002746:	d043      	beq.n	80027d0 <HAL_GPIO_Init+0xdc>
 8002748:	2b11      	cmp	r3, #17
 800274a:	d01b      	beq.n	8002784 <HAL_GPIO_Init+0x90>
          break;
 800274c:	e043      	b.n	80027d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800274e:	4a89      	ldr	r2, [pc, #548]	; (8002974 <HAL_GPIO_Init+0x280>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d026      	beq.n	80027a2 <HAL_GPIO_Init+0xae>
 8002754:	4a87      	ldr	r2, [pc, #540]	; (8002974 <HAL_GPIO_Init+0x280>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d806      	bhi.n	8002768 <HAL_GPIO_Init+0x74>
 800275a:	4a87      	ldr	r2, [pc, #540]	; (8002978 <HAL_GPIO_Init+0x284>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d020      	beq.n	80027a2 <HAL_GPIO_Init+0xae>
 8002760:	4a86      	ldr	r2, [pc, #536]	; (800297c <HAL_GPIO_Init+0x288>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d01d      	beq.n	80027a2 <HAL_GPIO_Init+0xae>
          break;
 8002766:	e036      	b.n	80027d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002768:	4a85      	ldr	r2, [pc, #532]	; (8002980 <HAL_GPIO_Init+0x28c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d019      	beq.n	80027a2 <HAL_GPIO_Init+0xae>
 800276e:	4a85      	ldr	r2, [pc, #532]	; (8002984 <HAL_GPIO_Init+0x290>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d016      	beq.n	80027a2 <HAL_GPIO_Init+0xae>
 8002774:	4a84      	ldr	r2, [pc, #528]	; (8002988 <HAL_GPIO_Init+0x294>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d013      	beq.n	80027a2 <HAL_GPIO_Init+0xae>
          break;
 800277a:	e02c      	b.n	80027d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	623b      	str	r3, [r7, #32]
          break;
 8002782:	e028      	b.n	80027d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	3304      	adds	r3, #4
 800278a:	623b      	str	r3, [r7, #32]
          break;
 800278c:	e023      	b.n	80027d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	3308      	adds	r3, #8
 8002794:	623b      	str	r3, [r7, #32]
          break;
 8002796:	e01e      	b.n	80027d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	330c      	adds	r3, #12
 800279e:	623b      	str	r3, [r7, #32]
          break;
 80027a0:	e019      	b.n	80027d6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d102      	bne.n	80027b0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027aa:	2304      	movs	r3, #4
 80027ac:	623b      	str	r3, [r7, #32]
          break;
 80027ae:	e012      	b.n	80027d6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d105      	bne.n	80027c4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027b8:	2308      	movs	r3, #8
 80027ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69fa      	ldr	r2, [r7, #28]
 80027c0:	611a      	str	r2, [r3, #16]
          break;
 80027c2:	e008      	b.n	80027d6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027c4:	2308      	movs	r3, #8
 80027c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69fa      	ldr	r2, [r7, #28]
 80027cc:	615a      	str	r2, [r3, #20]
          break;
 80027ce:	e002      	b.n	80027d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027d0:	2300      	movs	r3, #0
 80027d2:	623b      	str	r3, [r7, #32]
          break;
 80027d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	2bff      	cmp	r3, #255	; 0xff
 80027da:	d801      	bhi.n	80027e0 <HAL_GPIO_Init+0xec>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	e001      	b.n	80027e4 <HAL_GPIO_Init+0xf0>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3304      	adds	r3, #4
 80027e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	2bff      	cmp	r3, #255	; 0xff
 80027ea:	d802      	bhi.n	80027f2 <HAL_GPIO_Init+0xfe>
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	e002      	b.n	80027f8 <HAL_GPIO_Init+0x104>
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	3b08      	subs	r3, #8
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	210f      	movs	r1, #15
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	fa01 f303 	lsl.w	r3, r1, r3
 8002806:	43db      	mvns	r3, r3
 8002808:	401a      	ands	r2, r3
 800280a:	6a39      	ldr	r1, [r7, #32]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	fa01 f303 	lsl.w	r3, r1, r3
 8002812:	431a      	orrs	r2, r3
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 8096 	beq.w	8002952 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002826:	4b59      	ldr	r3, [pc, #356]	; (800298c <HAL_GPIO_Init+0x298>)
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	4a58      	ldr	r2, [pc, #352]	; (800298c <HAL_GPIO_Init+0x298>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	6193      	str	r3, [r2, #24]
 8002832:	4b56      	ldr	r3, [pc, #344]	; (800298c <HAL_GPIO_Init+0x298>)
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800283e:	4a54      	ldr	r2, [pc, #336]	; (8002990 <HAL_GPIO_Init+0x29c>)
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	089b      	lsrs	r3, r3, #2
 8002844:	3302      	adds	r3, #2
 8002846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	220f      	movs	r2, #15
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43db      	mvns	r3, r3
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	4013      	ands	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a4b      	ldr	r2, [pc, #300]	; (8002994 <HAL_GPIO_Init+0x2a0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d013      	beq.n	8002892 <HAL_GPIO_Init+0x19e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a4a      	ldr	r2, [pc, #296]	; (8002998 <HAL_GPIO_Init+0x2a4>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d00d      	beq.n	800288e <HAL_GPIO_Init+0x19a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a49      	ldr	r2, [pc, #292]	; (800299c <HAL_GPIO_Init+0x2a8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d007      	beq.n	800288a <HAL_GPIO_Init+0x196>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a48      	ldr	r2, [pc, #288]	; (80029a0 <HAL_GPIO_Init+0x2ac>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d101      	bne.n	8002886 <HAL_GPIO_Init+0x192>
 8002882:	2303      	movs	r3, #3
 8002884:	e006      	b.n	8002894 <HAL_GPIO_Init+0x1a0>
 8002886:	2304      	movs	r3, #4
 8002888:	e004      	b.n	8002894 <HAL_GPIO_Init+0x1a0>
 800288a:	2302      	movs	r3, #2
 800288c:	e002      	b.n	8002894 <HAL_GPIO_Init+0x1a0>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <HAL_GPIO_Init+0x1a0>
 8002892:	2300      	movs	r3, #0
 8002894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002896:	f002 0203 	and.w	r2, r2, #3
 800289a:	0092      	lsls	r2, r2, #2
 800289c:	4093      	lsls	r3, r2
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028a4:	493a      	ldr	r1, [pc, #232]	; (8002990 <HAL_GPIO_Init+0x29c>)
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	089b      	lsrs	r3, r3, #2
 80028aa:	3302      	adds	r3, #2
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d006      	beq.n	80028cc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028be:	4b39      	ldr	r3, [pc, #228]	; (80029a4 <HAL_GPIO_Init+0x2b0>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	4938      	ldr	r1, [pc, #224]	; (80029a4 <HAL_GPIO_Init+0x2b0>)
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]
 80028ca:	e006      	b.n	80028da <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028cc:	4b35      	ldr	r3, [pc, #212]	; (80029a4 <HAL_GPIO_Init+0x2b0>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	43db      	mvns	r3, r3
 80028d4:	4933      	ldr	r1, [pc, #204]	; (80029a4 <HAL_GPIO_Init+0x2b0>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d006      	beq.n	80028f4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028e6:	4b2f      	ldr	r3, [pc, #188]	; (80029a4 <HAL_GPIO_Init+0x2b0>)
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	492e      	ldr	r1, [pc, #184]	; (80029a4 <HAL_GPIO_Init+0x2b0>)
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	604b      	str	r3, [r1, #4]
 80028f2:	e006      	b.n	8002902 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028f4:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <HAL_GPIO_Init+0x2b0>)
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	43db      	mvns	r3, r3
 80028fc:	4929      	ldr	r1, [pc, #164]	; (80029a4 <HAL_GPIO_Init+0x2b0>)
 80028fe:	4013      	ands	r3, r2
 8002900:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d006      	beq.n	800291c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800290e:	4b25      	ldr	r3, [pc, #148]	; (80029a4 <HAL_GPIO_Init+0x2b0>)
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	4924      	ldr	r1, [pc, #144]	; (80029a4 <HAL_GPIO_Init+0x2b0>)
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	4313      	orrs	r3, r2
 8002918:	608b      	str	r3, [r1, #8]
 800291a:	e006      	b.n	800292a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800291c:	4b21      	ldr	r3, [pc, #132]	; (80029a4 <HAL_GPIO_Init+0x2b0>)
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	43db      	mvns	r3, r3
 8002924:	491f      	ldr	r1, [pc, #124]	; (80029a4 <HAL_GPIO_Init+0x2b0>)
 8002926:	4013      	ands	r3, r2
 8002928:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d006      	beq.n	8002944 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002936:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <HAL_GPIO_Init+0x2b0>)
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	491a      	ldr	r1, [pc, #104]	; (80029a4 <HAL_GPIO_Init+0x2b0>)
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	60cb      	str	r3, [r1, #12]
 8002942:	e006      	b.n	8002952 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002944:	4b17      	ldr	r3, [pc, #92]	; (80029a4 <HAL_GPIO_Init+0x2b0>)
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	43db      	mvns	r3, r3
 800294c:	4915      	ldr	r1, [pc, #84]	; (80029a4 <HAL_GPIO_Init+0x2b0>)
 800294e:	4013      	ands	r3, r2
 8002950:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	3301      	adds	r3, #1
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	fa22 f303 	lsr.w	r3, r2, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	f47f aed0 	bne.w	8002708 <HAL_GPIO_Init+0x14>
  }
}
 8002968:	bf00      	nop
 800296a:	372c      	adds	r7, #44	; 0x2c
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	10210000 	.word	0x10210000
 8002978:	10110000 	.word	0x10110000
 800297c:	10120000 	.word	0x10120000
 8002980:	10310000 	.word	0x10310000
 8002984:	10320000 	.word	0x10320000
 8002988:	10220000 	.word	0x10220000
 800298c:	40021000 	.word	0x40021000
 8002990:	40010000 	.word	0x40010000
 8002994:	40010800 	.word	0x40010800
 8002998:	40010c00 	.word	0x40010c00
 800299c:	40011000 	.word	0x40011000
 80029a0:	40011400 	.word	0x40011400
 80029a4:	40010400 	.word	0x40010400

080029a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	807b      	strh	r3, [r7, #2]
 80029b4:	4613      	mov	r3, r2
 80029b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029b8:	787b      	ldrb	r3, [r7, #1]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029be:	887a      	ldrh	r2, [r7, #2]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029c4:	e003      	b.n	80029ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029c6:	887b      	ldrh	r3, [r7, #2]
 80029c8:	041a      	lsls	r2, r3, #16
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	611a      	str	r2, [r3, #16]
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d006      	beq.n	80029fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029ee:	4a05      	ldr	r2, [pc, #20]	; (8002a04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029f0:	88fb      	ldrh	r3, [r7, #6]
 80029f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029f4:	88fb      	ldrh	r3, [r7, #6]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fe fbd6 	bl	80011a8 <HAL_GPIO_EXTI_Callback>
  }
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40010400 	.word	0x40010400

08002a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e304      	b.n	8003024 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 8087 	beq.w	8002b36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a28:	4b92      	ldr	r3, [pc, #584]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 030c 	and.w	r3, r3, #12
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d00c      	beq.n	8002a4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a34:	4b8f      	ldr	r3, [pc, #572]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 030c 	and.w	r3, r3, #12
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d112      	bne.n	8002a66 <HAL_RCC_OscConfig+0x5e>
 8002a40:	4b8c      	ldr	r3, [pc, #560]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a4c:	d10b      	bne.n	8002a66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a4e:	4b89      	ldr	r3, [pc, #548]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d06c      	beq.n	8002b34 <HAL_RCC_OscConfig+0x12c>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d168      	bne.n	8002b34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e2de      	b.n	8003024 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a6e:	d106      	bne.n	8002a7e <HAL_RCC_OscConfig+0x76>
 8002a70:	4b80      	ldr	r3, [pc, #512]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a7f      	ldr	r2, [pc, #508]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	e02e      	b.n	8002adc <HAL_RCC_OscConfig+0xd4>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x98>
 8002a86:	4b7b      	ldr	r3, [pc, #492]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a7a      	ldr	r2, [pc, #488]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	4b78      	ldr	r3, [pc, #480]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a77      	ldr	r2, [pc, #476]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	e01d      	b.n	8002adc <HAL_RCC_OscConfig+0xd4>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0xbc>
 8002aaa:	4b72      	ldr	r3, [pc, #456]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a71      	ldr	r2, [pc, #452]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b6f      	ldr	r3, [pc, #444]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a6e      	ldr	r2, [pc, #440]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e00b      	b.n	8002adc <HAL_RCC_OscConfig+0xd4>
 8002ac4:	4b6b      	ldr	r3, [pc, #428]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a6a      	ldr	r2, [pc, #424]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	4b68      	ldr	r3, [pc, #416]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a67      	ldr	r2, [pc, #412]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ada:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d013      	beq.n	8002b0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7ff f952 	bl	8001d8c <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aec:	f7ff f94e 	bl	8001d8c <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e292      	b.n	8003024 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	4b5d      	ldr	r3, [pc, #372]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0xe4>
 8002b0a:	e014      	b.n	8002b36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7ff f93e 	bl	8001d8c <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b14:	f7ff f93a 	bl	8001d8c <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	; 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e27e      	b.n	8003024 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b26:	4b53      	ldr	r3, [pc, #332]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x10c>
 8002b32:	e000      	b.n	8002b36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d063      	beq.n	8002c0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b42:	4b4c      	ldr	r3, [pc, #304]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00b      	beq.n	8002b66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b4e:	4b49      	ldr	r3, [pc, #292]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d11c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x18c>
 8002b5a:	4b46      	ldr	r3, [pc, #280]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d116      	bne.n	8002b94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b66:	4b43      	ldr	r3, [pc, #268]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <HAL_RCC_OscConfig+0x176>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d001      	beq.n	8002b7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e252      	b.n	8003024 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7e:	4b3d      	ldr	r3, [pc, #244]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4939      	ldr	r1, [pc, #228]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b92:	e03a      	b.n	8002c0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d020      	beq.n	8002bde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b9c:	4b36      	ldr	r3, [pc, #216]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba2:	f7ff f8f3 	bl	8001d8c <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002baa:	f7ff f8ef 	bl	8001d8c <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e233      	b.n	8003024 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbc:	4b2d      	ldr	r3, [pc, #180]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc8:	4b2a      	ldr	r3, [pc, #168]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4927      	ldr	r1, [pc, #156]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	600b      	str	r3, [r1, #0]
 8002bdc:	e015      	b.n	8002c0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bde:	4b26      	ldr	r3, [pc, #152]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be4:	f7ff f8d2 	bl	8001d8c <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bec:	f7ff f8ce 	bl	8001d8c <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e212      	b.n	8003024 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfe:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d03a      	beq.n	8002c8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d019      	beq.n	8002c52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1e:	4b17      	ldr	r3, [pc, #92]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c24:	f7ff f8b2 	bl	8001d8c <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c2c:	f7ff f8ae 	bl	8001d8c <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e1f2      	b.n	8003024 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	f000 fbca 	bl	80033e4 <RCC_Delay>
 8002c50:	e01c      	b.n	8002c8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c52:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c58:	f7ff f898 	bl	8001d8c <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c5e:	e00f      	b.n	8002c80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c60:	f7ff f894 	bl	8001d8c <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d908      	bls.n	8002c80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e1d8      	b.n	8003024 <HAL_RCC_OscConfig+0x61c>
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000
 8002c78:	42420000 	.word	0x42420000
 8002c7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c80:	4b9b      	ldr	r3, [pc, #620]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1e9      	bne.n	8002c60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 80a6 	beq.w	8002de6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c9e:	4b94      	ldr	r3, [pc, #592]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10d      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002caa:	4b91      	ldr	r3, [pc, #580]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	4a90      	ldr	r2, [pc, #576]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	61d3      	str	r3, [r2, #28]
 8002cb6:	4b8e      	ldr	r3, [pc, #568]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbe:	60bb      	str	r3, [r7, #8]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc6:	4b8b      	ldr	r3, [pc, #556]	; (8002ef4 <HAL_RCC_OscConfig+0x4ec>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d118      	bne.n	8002d04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cd2:	4b88      	ldr	r3, [pc, #544]	; (8002ef4 <HAL_RCC_OscConfig+0x4ec>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a87      	ldr	r2, [pc, #540]	; (8002ef4 <HAL_RCC_OscConfig+0x4ec>)
 8002cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cde:	f7ff f855 	bl	8001d8c <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce6:	f7ff f851 	bl	8001d8c <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b64      	cmp	r3, #100	; 0x64
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e195      	b.n	8003024 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf8:	4b7e      	ldr	r3, [pc, #504]	; (8002ef4 <HAL_RCC_OscConfig+0x4ec>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d106      	bne.n	8002d1a <HAL_RCC_OscConfig+0x312>
 8002d0c:	4b78      	ldr	r3, [pc, #480]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	4a77      	ldr	r2, [pc, #476]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	6213      	str	r3, [r2, #32]
 8002d18:	e02d      	b.n	8002d76 <HAL_RCC_OscConfig+0x36e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x334>
 8002d22:	4b73      	ldr	r3, [pc, #460]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	4a72      	ldr	r2, [pc, #456]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002d28:	f023 0301 	bic.w	r3, r3, #1
 8002d2c:	6213      	str	r3, [r2, #32]
 8002d2e:	4b70      	ldr	r3, [pc, #448]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	4a6f      	ldr	r2, [pc, #444]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002d34:	f023 0304 	bic.w	r3, r3, #4
 8002d38:	6213      	str	r3, [r2, #32]
 8002d3a:	e01c      	b.n	8002d76 <HAL_RCC_OscConfig+0x36e>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	2b05      	cmp	r3, #5
 8002d42:	d10c      	bne.n	8002d5e <HAL_RCC_OscConfig+0x356>
 8002d44:	4b6a      	ldr	r3, [pc, #424]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	4a69      	ldr	r2, [pc, #420]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002d4a:	f043 0304 	orr.w	r3, r3, #4
 8002d4e:	6213      	str	r3, [r2, #32]
 8002d50:	4b67      	ldr	r3, [pc, #412]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	4a66      	ldr	r2, [pc, #408]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	6213      	str	r3, [r2, #32]
 8002d5c:	e00b      	b.n	8002d76 <HAL_RCC_OscConfig+0x36e>
 8002d5e:	4b64      	ldr	r3, [pc, #400]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	4a63      	ldr	r2, [pc, #396]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	6213      	str	r3, [r2, #32]
 8002d6a:	4b61      	ldr	r3, [pc, #388]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	4a60      	ldr	r2, [pc, #384]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002d70:	f023 0304 	bic.w	r3, r3, #4
 8002d74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d015      	beq.n	8002daa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7e:	f7ff f805 	bl	8001d8c <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d84:	e00a      	b.n	8002d9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d86:	f7ff f801 	bl	8001d8c <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e143      	b.n	8003024 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9c:	4b54      	ldr	r3, [pc, #336]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0ee      	beq.n	8002d86 <HAL_RCC_OscConfig+0x37e>
 8002da8:	e014      	b.n	8002dd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002daa:	f7fe ffef 	bl	8001d8c <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db2:	f7fe ffeb 	bl	8001d8c <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e12d      	b.n	8003024 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc8:	4b49      	ldr	r3, [pc, #292]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1ee      	bne.n	8002db2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dd4:	7dfb      	ldrb	r3, [r7, #23]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d105      	bne.n	8002de6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dda:	4b45      	ldr	r3, [pc, #276]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	4a44      	ldr	r2, [pc, #272]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de4:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 808c 	beq.w	8002f08 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002df0:	4b3f      	ldr	r3, [pc, #252]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dfc:	d10e      	bne.n	8002e1c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002dfe:	4b3c      	ldr	r3, [pc, #240]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002e06:	2b08      	cmp	r3, #8
 8002e08:	d108      	bne.n	8002e1c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8002e0a:	4b39      	ldr	r3, [pc, #228]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e16:	d101      	bne.n	8002e1c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e103      	b.n	8003024 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d14e      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002e24:	4b32      	ldr	r3, [pc, #200]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d009      	beq.n	8002e44 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002e30:	4b2f      	ldr	r3, [pc, #188]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d001      	beq.n	8002e44 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0ef      	b.n	8003024 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002e44:	4b2c      	ldr	r3, [pc, #176]	; (8002ef8 <HAL_RCC_OscConfig+0x4f0>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4a:	f7fe ff9f 	bl	8001d8c <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002e52:	f7fe ff9b 	bl	8001d8c <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b64      	cmp	r3, #100	; 0x64
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e0df      	b.n	8003024 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002e64:	4b22      	ldr	r3, [pc, #136]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1f0      	bne.n	8002e52 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002e70:	4b1f      	ldr	r3, [pc, #124]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7c:	491c      	ldr	r1, [pc, #112]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002e82:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e86:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4918      	ldr	r1, [pc, #96]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002e94:	4b18      	ldr	r3, [pc, #96]	; (8002ef8 <HAL_RCC_OscConfig+0x4f0>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9a:	f7fe ff77 	bl	8001d8c <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002ea2:	f7fe ff73 	bl	8001d8c <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b64      	cmp	r3, #100	; 0x64
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e0b7      	b.n	8003024 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002eb4:	4b0e      	ldr	r3, [pc, #56]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f0      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x49a>
 8002ec0:	e022      	b.n	8002f08 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec6:	4a0a      	ldr	r2, [pc, #40]	; (8002ef0 <HAL_RCC_OscConfig+0x4e8>)
 8002ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ecc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <HAL_RCC_OscConfig+0x4f0>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7fe ff5a 	bl	8001d8c <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002eda:	e00f      	b.n	8002efc <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002edc:	f7fe ff56 	bl	8001d8c <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	; 0x64
 8002ee8:	d908      	bls.n	8002efc <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e09a      	b.n	8003024 <HAL_RCC_OscConfig+0x61c>
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	40007000 	.word	0x40007000
 8002ef8:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002efc:	4b4b      	ldr	r3, [pc, #300]	; (800302c <HAL_RCC_OscConfig+0x624>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1e9      	bne.n	8002edc <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 8088 	beq.w	8003022 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f12:	4b46      	ldr	r3, [pc, #280]	; (800302c <HAL_RCC_OscConfig+0x624>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 030c 	and.w	r3, r3, #12
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d068      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d14d      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f26:	4b42      	ldr	r3, [pc, #264]	; (8003030 <HAL_RCC_OscConfig+0x628>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2c:	f7fe ff2e 	bl	8001d8c <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f34:	f7fe ff2a 	bl	8001d8c <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e06e      	b.n	8003024 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f46:	4b39      	ldr	r3, [pc, #228]	; (800302c <HAL_RCC_OscConfig+0x624>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f5a:	d10f      	bne.n	8002f7c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8002f5c:	4b33      	ldr	r3, [pc, #204]	; (800302c <HAL_RCC_OscConfig+0x624>)
 8002f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	4931      	ldr	r1, [pc, #196]	; (800302c <HAL_RCC_OscConfig+0x624>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f6a:	4b30      	ldr	r3, [pc, #192]	; (800302c <HAL_RCC_OscConfig+0x624>)
 8002f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6e:	f023 020f 	bic.w	r2, r3, #15
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	492d      	ldr	r1, [pc, #180]	; (800302c <HAL_RCC_OscConfig+0x624>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f7c:	4b2b      	ldr	r3, [pc, #172]	; (800302c <HAL_RCC_OscConfig+0x624>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	4927      	ldr	r1, [pc, #156]	; (800302c <HAL_RCC_OscConfig+0x624>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f94:	4b26      	ldr	r3, [pc, #152]	; (8003030 <HAL_RCC_OscConfig+0x628>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9a:	f7fe fef7 	bl	8001d8c <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa2:	f7fe fef3 	bl	8001d8c <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e037      	b.n	8003024 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fb4:	4b1d      	ldr	r3, [pc, #116]	; (800302c <HAL_RCC_OscConfig+0x624>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x59a>
 8002fc0:	e02f      	b.n	8003022 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc2:	4b1b      	ldr	r3, [pc, #108]	; (8003030 <HAL_RCC_OscConfig+0x628>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fee0 	bl	8001d8c <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd0:	f7fe fedc 	bl	8001d8c <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e020      	b.n	8003024 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe2:	4b12      	ldr	r3, [pc, #72]	; (800302c <HAL_RCC_OscConfig+0x624>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x5c8>
 8002fee:	e018      	b.n	8003022 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e013      	b.n	8003024 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <HAL_RCC_OscConfig+0x624>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	429a      	cmp	r2, r3
 800300e:	d106      	bne.n	800301e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301a:	429a      	cmp	r2, r3
 800301c:	d001      	beq.n	8003022 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40021000 	.word	0x40021000
 8003030:	42420060 	.word	0x42420060

08003034 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0d0      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003048:	4b6a      	ldr	r3, [pc, #424]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d910      	bls.n	8003078 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003056:	4b67      	ldr	r3, [pc, #412]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 0207 	bic.w	r2, r3, #7
 800305e:	4965      	ldr	r1, [pc, #404]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	4313      	orrs	r3, r2
 8003064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003066:	4b63      	ldr	r3, [pc, #396]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0b8      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d020      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003090:	4b59      	ldr	r3, [pc, #356]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	4a58      	ldr	r2, [pc, #352]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800309a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030a8:	4b53      	ldr	r3, [pc, #332]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	4a52      	ldr	r2, [pc, #328]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b4:	4b50      	ldr	r3, [pc, #320]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	494d      	ldr	r1, [pc, #308]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d040      	beq.n	8003154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d107      	bne.n	80030ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030da:	4b47      	ldr	r3, [pc, #284]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d115      	bne.n	8003112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e07f      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d107      	bne.n	8003102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f2:	4b41      	ldr	r3, [pc, #260]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d109      	bne.n	8003112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e073      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003102:	4b3d      	ldr	r3, [pc, #244]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e06b      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003112:	4b39      	ldr	r3, [pc, #228]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f023 0203 	bic.w	r2, r3, #3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4936      	ldr	r1, [pc, #216]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	4313      	orrs	r3, r2
 8003122:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003124:	f7fe fe32 	bl	8001d8c <HAL_GetTick>
 8003128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312a:	e00a      	b.n	8003142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800312c:	f7fe fe2e 	bl	8001d8c <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f241 3288 	movw	r2, #5000	; 0x1388
 800313a:	4293      	cmp	r3, r2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e053      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003142:	4b2d      	ldr	r3, [pc, #180]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f003 020c 	and.w	r2, r3, #12
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	429a      	cmp	r2, r3
 8003152:	d1eb      	bne.n	800312c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003154:	4b27      	ldr	r3, [pc, #156]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d210      	bcs.n	8003184 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003162:	4b24      	ldr	r3, [pc, #144]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f023 0207 	bic.w	r2, r3, #7
 800316a:	4922      	ldr	r1, [pc, #136]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003172:	4b20      	ldr	r3, [pc, #128]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e032      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003190:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4916      	ldr	r1, [pc, #88]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d009      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031ae:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	490e      	ldr	r1, [pc, #56]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031c2:	f000 f821 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 80031c6:	4601      	mov	r1, r0
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <HAL_RCC_ClockConfig+0x1c8>)
 80031d4:	5cd3      	ldrb	r3, [r2, r3]
 80031d6:	fa21 f303 	lsr.w	r3, r1, r3
 80031da:	4a09      	ldr	r2, [pc, #36]	; (8003200 <HAL_RCC_ClockConfig+0x1cc>)
 80031dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031de:	4b09      	ldr	r3, [pc, #36]	; (8003204 <HAL_RCC_ClockConfig+0x1d0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fe fd90 	bl	8001d08 <HAL_InitTick>

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40022000 	.word	0x40022000
 80031f8:	40021000 	.word	0x40021000
 80031fc:	08008984 	.word	0x08008984
 8003200:	20000000 	.word	0x20000000
 8003204:	20000004 	.word	0x20000004

08003208 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800320a:	b091      	sub	sp, #68	; 0x44
 800320c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 800320e:	4b56      	ldr	r3, [pc, #344]	; (8003368 <HAL_RCC_GetSysClockFreq+0x160>)
 8003210:	f107 0414 	add.w	r4, r7, #20
 8003214:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003216:	c407      	stmia	r4!, {r0, r1, r2}
 8003218:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800321a:	4b54      	ldr	r3, [pc, #336]	; (800336c <HAL_RCC_GetSysClockFreq+0x164>)
 800321c:	1d3c      	adds	r4, r7, #4
 800321e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003220:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	637b      	str	r3, [r7, #52]	; 0x34
 8003228:	2300      	movs	r3, #0
 800322a:	633b      	str	r3, [r7, #48]	; 0x30
 800322c:	2300      	movs	r3, #0
 800322e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003230:	2300      	movs	r3, #0
 8003232:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	62bb      	str	r3, [r7, #40]	; 0x28
 800323c:	2300      	movs	r3, #0
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003240:	4b4b      	ldr	r3, [pc, #300]	; (8003370 <HAL_RCC_GetSysClockFreq+0x168>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003248:	f003 030c 	and.w	r3, r3, #12
 800324c:	2b04      	cmp	r3, #4
 800324e:	d002      	beq.n	8003256 <HAL_RCC_GetSysClockFreq+0x4e>
 8003250:	2b08      	cmp	r3, #8
 8003252:	d003      	beq.n	800325c <HAL_RCC_GetSysClockFreq+0x54>
 8003254:	e07f      	b.n	8003356 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003256:	4b47      	ldr	r3, [pc, #284]	; (8003374 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003258:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800325a:	e07f      	b.n	800335c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800325c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325e:	0c9b      	lsrs	r3, r3, #18
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003268:	4413      	add	r3, r2
 800326a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800326e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d065      	beq.n	8003346 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800327a:	4b3d      	ldr	r3, [pc, #244]	; (8003370 <HAL_RCC_GetSysClockFreq+0x168>)
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003286:	4413      	add	r3, r2
 8003288:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800328c:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800328e:	4b38      	ldr	r3, [pc, #224]	; (8003370 <HAL_RCC_GetSysClockFreq+0x168>)
 8003290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d043      	beq.n	8003322 <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800329a:	4b35      	ldr	r3, [pc, #212]	; (8003370 <HAL_RCC_GetSysClockFreq+0x168>)
 800329c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329e:	091b      	lsrs	r3, r3, #4
 80032a0:	f003 030f 	and.w	r3, r3, #15
 80032a4:	3301      	adds	r3, #1
 80032a6:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80032a8:	4b31      	ldr	r3, [pc, #196]	; (8003370 <HAL_RCC_GetSysClockFreq+0x168>)
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	0a1b      	lsrs	r3, r3, #8
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	3302      	adds	r3, #2
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	4619      	mov	r1, r3
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c0:	f04f 0400 	mov.w	r4, #0
 80032c4:	fb03 f502 	mul.w	r5, r3, r2
 80032c8:	fb01 f004 	mul.w	r0, r1, r4
 80032cc:	4428      	add	r0, r5
 80032ce:	fba1 3403 	umull	r3, r4, r1, r3
 80032d2:	1902      	adds	r2, r0, r4
 80032d4:	4614      	mov	r4, r2
 80032d6:	4a27      	ldr	r2, [pc, #156]	; (8003374 <HAL_RCC_GetSysClockFreq+0x16c>)
 80032d8:	fb02 f104 	mul.w	r1, r2, r4
 80032dc:	2200      	movs	r2, #0
 80032de:	fb02 f203 	mul.w	r2, r2, r3
 80032e2:	440a      	add	r2, r1
 80032e4:	4923      	ldr	r1, [pc, #140]	; (8003374 <HAL_RCC_GetSysClockFreq+0x16c>)
 80032e6:	fba3 5601 	umull	r5, r6, r3, r1
 80032ea:	1993      	adds	r3, r2, r6
 80032ec:	461e      	mov	r6, r3
 80032ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f0:	4619      	mov	r1, r3
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f8:	f04f 0400 	mov.w	r4, #0
 80032fc:	fb03 fc02 	mul.w	ip, r3, r2
 8003300:	fb01 f004 	mul.w	r0, r1, r4
 8003304:	4460      	add	r0, ip
 8003306:	fba1 3403 	umull	r3, r4, r1, r3
 800330a:	1902      	adds	r2, r0, r4
 800330c:	4614      	mov	r4, r2
 800330e:	461a      	mov	r2, r3
 8003310:	4623      	mov	r3, r4
 8003312:	4628      	mov	r0, r5
 8003314:	4631      	mov	r1, r6
 8003316:	f7fd fc93 	bl	8000c40 <__aeabi_uldivmod>
 800331a:	4603      	mov	r3, r0
 800331c:	460c      	mov	r4, r1
 800331e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003320:	e007      	b.n	8003332 <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8003322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003324:	4a13      	ldr	r2, [pc, #76]	; (8003374 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003326:	fb02 f203 	mul.w	r2, r2, r3
 800332a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003330:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8003332:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003336:	461a      	mov	r2, r3
 8003338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333a:	4293      	cmp	r3, r2
 800333c:	d108      	bne.n	8003350 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 800333e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003340:	085b      	lsrs	r3, r3, #1
 8003342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003344:	e004      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003348:	4a0b      	ldr	r2, [pc, #44]	; (8003378 <HAL_RCC_GetSysClockFreq+0x170>)
 800334a:	fb02 f303 	mul.w	r3, r2, r3
 800334e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8003350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003352:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003354:	e002      	b.n	800335c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003356:	4b09      	ldr	r3, [pc, #36]	; (800337c <HAL_RCC_GetSysClockFreq+0x174>)
 8003358:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800335a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800335c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800335e:	4618      	mov	r0, r3
 8003360:	3744      	adds	r7, #68	; 0x44
 8003362:	46bd      	mov	sp, r7
 8003364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003366:	bf00      	nop
 8003368:	08008964 	.word	0x08008964
 800336c:	08008974 	.word	0x08008974
 8003370:	40021000 	.word	0x40021000
 8003374:	017d7840 	.word	0x017d7840
 8003378:	003d0900 	.word	0x003d0900
 800337c:	007a1200 	.word	0x007a1200

08003380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003384:	4b02      	ldr	r3, [pc, #8]	; (8003390 <HAL_RCC_GetHCLKFreq+0x10>)
 8003386:	681b      	ldr	r3, [r3, #0]
}
 8003388:	4618      	mov	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr
 8003390:	20000000 	.word	0x20000000

08003394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003398:	f7ff fff2 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 800339c:	4601      	mov	r1, r0
 800339e:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	0a1b      	lsrs	r3, r3, #8
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	4a03      	ldr	r2, [pc, #12]	; (80033b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033aa:	5cd3      	ldrb	r3, [r2, r3]
 80033ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40021000 	.word	0x40021000
 80033b8:	08008994 	.word	0x08008994

080033bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033c0:	f7ff ffde 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 80033c4:	4601      	mov	r1, r0
 80033c6:	4b05      	ldr	r3, [pc, #20]	; (80033dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	0adb      	lsrs	r3, r3, #11
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	4a03      	ldr	r2, [pc, #12]	; (80033e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033d2:	5cd3      	ldrb	r3, [r2, r3]
 80033d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033d8:	4618      	mov	r0, r3
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40021000 	.word	0x40021000
 80033e0:	08008994 	.word	0x08008994

080033e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033ec:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <RCC_Delay+0x34>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a0a      	ldr	r2, [pc, #40]	; (800341c <RCC_Delay+0x38>)
 80033f2:	fba2 2303 	umull	r2, r3, r2, r3
 80033f6:	0a5b      	lsrs	r3, r3, #9
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	fb02 f303 	mul.w	r3, r2, r3
 80033fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003400:	bf00      	nop
  }
  while (Delay --);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1e5a      	subs	r2, r3, #1
 8003406:	60fa      	str	r2, [r7, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1f9      	bne.n	8003400 <RCC_Delay+0x1c>
}
 800340c:	bf00      	nop
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	20000000 	.word	0x20000000
 800341c:	10624dd3 	.word	0x10624dd3

08003420 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e076      	b.n	8003520 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	2b00      	cmp	r3, #0
 8003438:	d108      	bne.n	800344c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003442:	d009      	beq.n	8003458 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	61da      	str	r2, [r3, #28]
 800344a:	e005      	b.n	8003458 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d106      	bne.n	8003478 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7fe f92e 	bl	80016d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800348e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	431a      	orrs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034dc:	ea42 0103 	orr.w	r1, r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	0c1a      	lsrs	r2, r3, #16
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f002 0204 	and.w	r2, r2, #4
 80034fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	69da      	ldr	r2, [r3, #28]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800350e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08c      	sub	sp, #48	; 0x30
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003536:	2301      	movs	r3, #1
 8003538:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <HAL_SPI_TransmitReceive+0x26>
 800354a:	2302      	movs	r3, #2
 800354c:	e18a      	b.n	8003864 <HAL_SPI_TransmitReceive+0x33c>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003556:	f7fe fc19 	bl	8001d8c <HAL_GetTick>
 800355a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800356c:	887b      	ldrh	r3, [r7, #2]
 800356e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003570:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003574:	2b01      	cmp	r3, #1
 8003576:	d00f      	beq.n	8003598 <HAL_SPI_TransmitReceive+0x70>
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800357e:	d107      	bne.n	8003590 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d103      	bne.n	8003590 <HAL_SPI_TransmitReceive+0x68>
 8003588:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800358c:	2b04      	cmp	r3, #4
 800358e:	d003      	beq.n	8003598 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003590:	2302      	movs	r3, #2
 8003592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003596:	e15b      	b.n	8003850 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d005      	beq.n	80035aa <HAL_SPI_TransmitReceive+0x82>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <HAL_SPI_TransmitReceive+0x82>
 80035a4:	887b      	ldrh	r3, [r7, #2]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d103      	bne.n	80035b2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80035b0:	e14e      	b.n	8003850 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d003      	beq.n	80035c6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2205      	movs	r2, #5
 80035c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	887a      	ldrh	r2, [r7, #2]
 80035d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	887a      	ldrh	r2, [r7, #2]
 80035dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	887a      	ldrh	r2, [r7, #2]
 80035e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	887a      	ldrh	r2, [r7, #2]
 80035ee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003606:	2b40      	cmp	r3, #64	; 0x40
 8003608:	d007      	beq.n	800361a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003618:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003622:	d178      	bne.n	8003716 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <HAL_SPI_TransmitReceive+0x10a>
 800362c:	8b7b      	ldrh	r3, [r7, #26]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d166      	bne.n	8003700 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	881a      	ldrh	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	1c9a      	adds	r2, r3, #2
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003656:	e053      	b.n	8003700 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b02      	cmp	r3, #2
 8003664:	d11b      	bne.n	800369e <HAL_SPI_TransmitReceive+0x176>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800366a:	b29b      	uxth	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d016      	beq.n	800369e <HAL_SPI_TransmitReceive+0x176>
 8003670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003672:	2b01      	cmp	r3, #1
 8003674:	d113      	bne.n	800369e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	881a      	ldrh	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	1c9a      	adds	r2, r3, #2
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003690:	b29b      	uxth	r3, r3
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800369a:	2300      	movs	r3, #0
 800369c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d119      	bne.n	80036e0 <HAL_SPI_TransmitReceive+0x1b8>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d014      	beq.n	80036e0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c0:	b292      	uxth	r2, r2
 80036c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c8:	1c9a      	adds	r2, r3, #2
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036dc:	2301      	movs	r3, #1
 80036de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80036e0:	f7fe fb54 	bl	8001d8c <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d807      	bhi.n	8003700 <HAL_SPI_TransmitReceive+0x1d8>
 80036f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f6:	d003      	beq.n	8003700 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80036fe:	e0a7      	b.n	8003850 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003704:	b29b      	uxth	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1a6      	bne.n	8003658 <HAL_SPI_TransmitReceive+0x130>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800370e:	b29b      	uxth	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1a1      	bne.n	8003658 <HAL_SPI_TransmitReceive+0x130>
 8003714:	e07c      	b.n	8003810 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <HAL_SPI_TransmitReceive+0x1fc>
 800371e:	8b7b      	ldrh	r3, [r7, #26]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d16b      	bne.n	80037fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	330c      	adds	r3, #12
 800372e:	7812      	ldrb	r2, [r2, #0]
 8003730:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b01      	subs	r3, #1
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800374a:	e057      	b.n	80037fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b02      	cmp	r3, #2
 8003758:	d11c      	bne.n	8003794 <HAL_SPI_TransmitReceive+0x26c>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800375e:	b29b      	uxth	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d017      	beq.n	8003794 <HAL_SPI_TransmitReceive+0x26c>
 8003764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003766:	2b01      	cmp	r3, #1
 8003768:	d114      	bne.n	8003794 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	330c      	adds	r3, #12
 8003774:	7812      	ldrb	r2, [r2, #0]
 8003776:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003786:	b29b      	uxth	r3, r3
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d119      	bne.n	80037d6 <HAL_SPI_TransmitReceive+0x2ae>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d014      	beq.n	80037d6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037d2:	2301      	movs	r3, #1
 80037d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037d6:	f7fe fad9 	bl	8001d8c <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d803      	bhi.n	80037ee <HAL_SPI_TransmitReceive+0x2c6>
 80037e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ec:	d102      	bne.n	80037f4 <HAL_SPI_TransmitReceive+0x2cc>
 80037ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d103      	bne.n	80037fc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80037fa:	e029      	b.n	8003850 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1a2      	bne.n	800374c <HAL_SPI_TransmitReceive+0x224>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800380a:	b29b      	uxth	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d19d      	bne.n	800374c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003812:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 fbbf 	bl	8003f98 <SPI_EndRxTxTransaction>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d006      	beq.n	800382e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2220      	movs	r2, #32
 800382a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800382c:	e010      	b.n	8003850 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10b      	bne.n	800384e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	e000      	b.n	8003850 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800384e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003860:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003864:	4618      	mov	r0, r3
 8003866:	3730      	adds	r7, #48	; 0x30
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	4613      	mov	r3, r2
 8003878:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d110      	bne.n	80038a8 <HAL_SPI_Receive_DMA+0x3c>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800388e:	d10b      	bne.n	80038a8 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2204      	movs	r2, #4
 8003894:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8003898:	88fb      	ldrh	r3, [r7, #6]
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	68b9      	ldr	r1, [r7, #8]
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 f8ac 	bl	80039fc <HAL_SPI_TransmitReceive_DMA>
 80038a4:	4603      	mov	r3, r0
 80038a6:	e09f      	b.n	80039e8 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_SPI_Receive_DMA+0x4a>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e098      	b.n	80039e8 <HAL_SPI_Receive_DMA+0x17c>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d002      	beq.n	80038d0 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80038ca:	2302      	movs	r3, #2
 80038cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038ce:	e086      	b.n	80039de <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <HAL_SPI_Receive_DMA+0x70>
 80038d6:	88fb      	ldrh	r3, [r7, #6]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d102      	bne.n	80038e2 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038e0:	e07d      	b.n	80039de <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2204      	movs	r2, #4
 80038e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	88fa      	ldrh	r2, [r7, #6]
 80038fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	88fa      	ldrh	r2, [r7, #6]
 8003900:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003922:	d10f      	bne.n	8003944 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003932:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003942:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003948:	4a29      	ldr	r2, [pc, #164]	; (80039f0 <HAL_SPI_Receive_DMA+0x184>)
 800394a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003950:	4a28      	ldr	r2, [pc, #160]	; (80039f4 <HAL_SPI_Receive_DMA+0x188>)
 8003952:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003958:	4a27      	ldr	r2, [pc, #156]	; (80039f8 <HAL_SPI_Receive_DMA+0x18c>)
 800395a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003960:	2200      	movs	r2, #0
 8003962:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	330c      	adds	r3, #12
 800396e:	4619      	mov	r1, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800397a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800397c:	f7fe fbb6 	bl	80020ec <HAL_DMA_Start_IT>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00c      	beq.n	80039a0 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398a:	f043 0210 	orr.w	r2, r3, #16
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800399e:	e01e      	b.n	80039de <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039aa:	2b40      	cmp	r3, #64	; 0x40
 80039ac:	d007      	beq.n	80039be <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039bc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f042 0220 	orr.w	r2, r2, #32
 80039cc:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f042 0201 	orr.w	r2, r2, #1
 80039dc:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	08003d6b 	.word	0x08003d6b
 80039f4:	08003c37 	.word	0x08003c37
 80039f8:	08003da3 	.word	0x08003da3

080039fc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
 8003a08:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_SPI_TransmitReceive_DMA+0x20>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e0e3      	b.n	8003be4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a2a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003a32:	7dbb      	ldrb	r3, [r7, #22]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d00d      	beq.n	8003a54 <HAL_SPI_TransmitReceive_DMA+0x58>
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a3e:	d106      	bne.n	8003a4e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d102      	bne.n	8003a4e <HAL_SPI_TransmitReceive_DMA+0x52>
 8003a48:	7dbb      	ldrb	r3, [r7, #22]
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d002      	beq.n	8003a54 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a52:	e0c2      	b.n	8003bda <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d005      	beq.n	8003a66 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003a60:	887b      	ldrh	r3, [r7, #2]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d102      	bne.n	8003a6c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a6a:	e0b6      	b.n	8003bda <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d003      	beq.n	8003a80 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2205      	movs	r2, #5
 8003a7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	887a      	ldrh	r2, [r7, #2]
 8003a90:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	887a      	ldrh	r2, [r7, #2]
 8003a96:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	887a      	ldrh	r2, [r7, #2]
 8003aa2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	887a      	ldrh	r2, [r7, #2]
 8003aa8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d108      	bne.n	8003ad4 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac6:	4a49      	ldr	r2, [pc, #292]	; (8003bec <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8003ac8:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ace:	4a48      	ldr	r2, [pc, #288]	; (8003bf0 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8003ad0:	629a      	str	r2, [r3, #40]	; 0x28
 8003ad2:	e007      	b.n	8003ae4 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad8:	4a46      	ldr	r2, [pc, #280]	; (8003bf4 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8003ada:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae0:	4a45      	ldr	r2, [pc, #276]	; (8003bf8 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8003ae2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae8:	4a44      	ldr	r2, [pc, #272]	; (8003bfc <HAL_SPI_TransmitReceive_DMA+0x200>)
 8003aea:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af0:	2200      	movs	r2, #0
 8003af2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	330c      	adds	r3, #12
 8003afe:	4619      	mov	r1, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b04:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b0a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003b0c:	f7fe faee 	bl	80020ec <HAL_DMA_Start_IT>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00c      	beq.n	8003b30 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1a:	f043 0210 	orr.w	r2, r3, #16
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003b2e:	e054      	b.n	8003bda <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b44:	2200      	movs	r2, #0
 8003b46:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b54:	2200      	movs	r2, #0
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	4619      	mov	r1, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	330c      	adds	r3, #12
 8003b70:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b76:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003b78:	f7fe fab8 	bl	80020ec <HAL_DMA_Start_IT>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00c      	beq.n	8003b9c <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b86:	f043 0210 	orr.w	r2, r3, #16
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003b9a:	e01e      	b.n	8003bda <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba6:	2b40      	cmp	r3, #64	; 0x40
 8003ba8:	d007      	beq.n	8003bba <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bb8:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f042 0220 	orr.w	r2, r2, #32
 8003bc8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f042 0202 	orr.w	r2, r2, #2
 8003bd8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	08003d6b 	.word	0x08003d6b
 8003bf0:	08003c37 	.word	0x08003c37
 8003bf4:	08003d87 	.word	0x08003d87
 8003bf8:	08003cdd 	.word	0x08003cdd
 8003bfc:	08003da3 	.word	0x08003da3

08003c00 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr

08003c12 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr

08003c24 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	4770      	bx	lr

08003c36 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b084      	sub	sp, #16
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c44:	f7fe f8a2 	bl	8001d8c <HAL_GetTick>
 8003c48:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b20      	cmp	r3, #32
 8003c56:	d03b      	beq.n	8003cd0 <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0220 	bic.w	r2, r2, #32
 8003c66:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10d      	bne.n	8003c8c <SPI_DMAReceiveCplt+0x56>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c78:	d108      	bne.n	8003c8c <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0203 	bic.w	r2, r2, #3
 8003c88:	605a      	str	r2, [r3, #4]
 8003c8a:	e007      	b.n	8003c9c <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0201 	bic.w	r2, r2, #1
 8003c9a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	2164      	movs	r1, #100	; 0x64
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f927 	bl	8003ef4 <SPI_EndRxTransaction>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f7ff ffab 	bl	8003c24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003cce:	e002      	b.n	8003cd6 <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f7fd faa3 	bl	800121c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cea:	f7fe f84f 	bl	8001d8c <HAL_GetTick>
 8003cee:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d02f      	beq.n	8003d5e <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0220 	bic.w	r2, r2, #32
 8003d0c:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	2164      	movs	r1, #100	; 0x64
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 f940 	bl	8003f98 <SPI_EndRxTxTransaction>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d22:	f043 0220 	orr.w	r2, r3, #32
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0203 	bic.w	r2, r2, #3
 8003d38:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f7ff ff64 	bl	8003c24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003d5c:	e002      	b.n	8003d64 <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f7ff ff4e 	bl	8003c00 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f7fd fa45 	bl	8001208 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d7e:	bf00      	nop
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b084      	sub	sp, #16
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f7ff ff3c 	bl	8003c12 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d9a:	bf00      	nop
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b084      	sub	sp, #16
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0203 	bic.w	r2, r2, #3
 8003dbe:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc4:	f043 0210 	orr.w	r2, r3, #16
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f7ff ff25 	bl	8003c24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	4613      	mov	r3, r2
 8003df2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003df4:	f7fd ffca 	bl	8001d8c <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	4413      	add	r3, r2
 8003e02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e04:	f7fd ffc2 	bl	8001d8c <HAL_GetTick>
 8003e08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e0a:	4b39      	ldr	r3, [pc, #228]	; (8003ef0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	015b      	lsls	r3, r3, #5
 8003e10:	0d1b      	lsrs	r3, r3, #20
 8003e12:	69fa      	ldr	r2, [r7, #28]
 8003e14:	fb02 f303 	mul.w	r3, r2, r3
 8003e18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e1a:	e054      	b.n	8003ec6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e22:	d050      	beq.n	8003ec6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e24:	f7fd ffb2 	bl	8001d8c <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	69fa      	ldr	r2, [r7, #28]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d902      	bls.n	8003e3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d13d      	bne.n	8003eb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e52:	d111      	bne.n	8003e78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e5c:	d004      	beq.n	8003e68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e66:	d107      	bne.n	8003e78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e80:	d10f      	bne.n	8003ea2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ea0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e017      	b.n	8003ee6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	bf0c      	ite	eq
 8003ed6:	2301      	moveq	r3, #1
 8003ed8:	2300      	movne	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	461a      	mov	r2, r3
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d19b      	bne.n	8003e1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3720      	adds	r7, #32
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20000000 	.word	0x20000000

08003ef4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f08:	d111      	bne.n	8003f2e <SPI_EndRxTransaction+0x3a>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f12:	d004      	beq.n	8003f1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1c:	d107      	bne.n	8003f2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f2c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f36:	d117      	bne.n	8003f68 <SPI_EndRxTransaction+0x74>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f40:	d112      	bne.n	8003f68 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f7ff ff49 	bl	8003de4 <SPI_WaitFlagStateUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d01a      	beq.n	8003f8e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5c:	f043 0220 	orr.w	r2, r3, #32
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e013      	b.n	8003f90 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	2180      	movs	r1, #128	; 0x80
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f7ff ff36 	bl	8003de4 <SPI_WaitFlagStateUntilTimeout>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d007      	beq.n	8003f8e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f82:	f043 0220 	orr.w	r2, r3, #32
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e000      	b.n	8003f90 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2200      	movs	r2, #0
 8003fac:	2180      	movs	r1, #128	; 0x80
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f7ff ff18 	bl	8003de4 <SPI_WaitFlagStateUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d007      	beq.n	8003fca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbe:	f043 0220 	orr.w	r2, r3, #32
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e000      	b.n	8003fcc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e03f      	b.n	8004066 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7fd fc3c 	bl	8001878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2224      	movs	r2, #36	; 0x24
 8004004:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004016:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f963 	bl	80042e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800402c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695a      	ldr	r2, [r3, #20]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800403c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800404c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
	...

08004070 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	4613      	mov	r3, r2
 800407c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b20      	cmp	r3, #32
 8004088:	d153      	bne.n	8004132 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <HAL_UART_Transmit_DMA+0x26>
 8004090:	88fb      	ldrh	r3, [r7, #6]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e04c      	b.n	8004134 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_UART_Transmit_DMA+0x38>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e045      	b.n	8004134 <HAL_UART_Transmit_DMA+0xc4>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	88fa      	ldrh	r2, [r7, #6]
 80040ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	88fa      	ldrh	r2, [r7, #6]
 80040c0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2221      	movs	r2, #33	; 0x21
 80040cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	4a19      	ldr	r2, [pc, #100]	; (800413c <HAL_UART_Transmit_DMA+0xcc>)
 80040d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040dc:	4a18      	ldr	r2, [pc, #96]	; (8004140 <HAL_UART_Transmit_DMA+0xd0>)
 80040de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	4a17      	ldr	r2, [pc, #92]	; (8004144 <HAL_UART_Transmit_DMA+0xd4>)
 80040e6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	2200      	movs	r2, #0
 80040ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80040f0:	f107 0308 	add.w	r3, r7, #8
 80040f4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	6819      	ldr	r1, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3304      	adds	r3, #4
 8004104:	461a      	mov	r2, r3
 8004106:	88fb      	ldrh	r3, [r7, #6]
 8004108:	f7fd fff0 	bl	80020ec <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004114:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695a      	ldr	r2, [r3, #20]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800412c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	e000      	b.n	8004134 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8004132:	2302      	movs	r3, #2
  }
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	0800417f 	.word	0x0800417f
 8004140:	080041d1 	.word	0x080041d1
 8004144:	080041ed 	.word	0x080041ed

08004148 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr

0800415a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr

0800416c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr

0800417e <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0320 	and.w	r3, r3, #32
 8004196:	2b00      	cmp	r3, #0
 8004198:	d113      	bne.n	80041c2 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695a      	ldr	r2, [r3, #20]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041ae:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041be:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041c0:	e002      	b.n	80041c8 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f7ff ffc0 	bl	8004148 <HAL_UART_TxCpltCallback>
}
 80041c8:	bf00      	nop
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f7ff ffbb 	bl	800415a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041e4:	bf00      	nop
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004208:	2b00      	cmp	r3, #0
 800420a:	bf14      	ite	ne
 800420c:	2301      	movne	r3, #1
 800420e:	2300      	moveq	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b21      	cmp	r3, #33	; 0x21
 800421e:	d108      	bne.n	8004232 <UART_DMAError+0x46>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d005      	beq.n	8004232 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2200      	movs	r2, #0
 800422a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800422c:	68b8      	ldr	r0, [r7, #8]
 800422e:	f000 f827 	bl	8004280 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423c:	2b00      	cmp	r3, #0
 800423e:	bf14      	ite	ne
 8004240:	2301      	movne	r3, #1
 8004242:	2300      	moveq	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b22      	cmp	r3, #34	; 0x22
 8004252:	d108      	bne.n	8004266 <UART_DMAError+0x7a>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d005      	beq.n	8004266 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2200      	movs	r2, #0
 800425e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004260:	68b8      	ldr	r0, [r7, #8]
 8004262:	f000 f822 	bl	80042aa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426a:	f043 0210 	orr.w	r2, r3, #16
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004272:	68b8      	ldr	r0, [r7, #8]
 8004274:	f7ff ff7a 	bl	800416c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004278:	bf00      	nop
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004296:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2220      	movs	r2, #32
 800429c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bc80      	pop	{r7}
 80042a8:	4770      	bx	lr

080042aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68da      	ldr	r2, [r3, #12]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042c0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695a      	ldr	r2, [r3, #20]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0201 	bic.w	r2, r2, #1
 80042d0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr

080042e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	4313      	orrs	r3, r2
 8004312:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800431e:	f023 030c 	bic.w	r3, r3, #12
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6812      	ldr	r2, [r2, #0]
 8004326:	68b9      	ldr	r1, [r7, #8]
 8004328:	430b      	orrs	r3, r1
 800432a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	699a      	ldr	r2, [r3, #24]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a2c      	ldr	r2, [pc, #176]	; (80043f8 <UART_SetConfig+0x114>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d103      	bne.n	8004354 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800434c:	f7ff f836 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	e002      	b.n	800435a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004354:	f7ff f81e 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 8004358:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4613      	mov	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	009a      	lsls	r2, r3, #2
 8004364:	441a      	add	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004370:	4a22      	ldr	r2, [pc, #136]	; (80043fc <UART_SetConfig+0x118>)
 8004372:	fba2 2303 	umull	r2, r3, r2, r3
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	0119      	lsls	r1, r3, #4
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	4613      	mov	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	009a      	lsls	r2, r3, #2
 8004384:	441a      	add	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004390:	4b1a      	ldr	r3, [pc, #104]	; (80043fc <UART_SetConfig+0x118>)
 8004392:	fba3 0302 	umull	r0, r3, r3, r2
 8004396:	095b      	lsrs	r3, r3, #5
 8004398:	2064      	movs	r0, #100	; 0x64
 800439a:	fb00 f303 	mul.w	r3, r0, r3
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	3332      	adds	r3, #50	; 0x32
 80043a4:	4a15      	ldr	r2, [pc, #84]	; (80043fc <UART_SetConfig+0x118>)
 80043a6:	fba2 2303 	umull	r2, r3, r2, r3
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043b0:	4419      	add	r1, r3
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	009a      	lsls	r2, r3, #2
 80043bc:	441a      	add	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043c8:	4b0c      	ldr	r3, [pc, #48]	; (80043fc <UART_SetConfig+0x118>)
 80043ca:	fba3 0302 	umull	r0, r3, r3, r2
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	2064      	movs	r0, #100	; 0x64
 80043d2:	fb00 f303 	mul.w	r3, r0, r3
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	3332      	adds	r3, #50	; 0x32
 80043dc:	4a07      	ldr	r2, [pc, #28]	; (80043fc <UART_SetConfig+0x118>)
 80043de:	fba2 2303 	umull	r2, r3, r2, r3
 80043e2:	095b      	lsrs	r3, r3, #5
 80043e4:	f003 020f 	and.w	r2, r3, #15
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	440a      	add	r2, r1
 80043ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80043f0:	bf00      	nop
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40013800 	.word	0x40013800
 80043fc:	51eb851f 	.word	0x51eb851f

08004400 <__errno>:
 8004400:	4b01      	ldr	r3, [pc, #4]	; (8004408 <__errno+0x8>)
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	2000000c 	.word	0x2000000c

0800440c <__libc_init_array>:
 800440c:	b570      	push	{r4, r5, r6, lr}
 800440e:	2500      	movs	r5, #0
 8004410:	4e0c      	ldr	r6, [pc, #48]	; (8004444 <__libc_init_array+0x38>)
 8004412:	4c0d      	ldr	r4, [pc, #52]	; (8004448 <__libc_init_array+0x3c>)
 8004414:	1ba4      	subs	r4, r4, r6
 8004416:	10a4      	asrs	r4, r4, #2
 8004418:	42a5      	cmp	r5, r4
 800441a:	d109      	bne.n	8004430 <__libc_init_array+0x24>
 800441c:	f004 fa62 	bl	80088e4 <_init>
 8004420:	2500      	movs	r5, #0
 8004422:	4e0a      	ldr	r6, [pc, #40]	; (800444c <__libc_init_array+0x40>)
 8004424:	4c0a      	ldr	r4, [pc, #40]	; (8004450 <__libc_init_array+0x44>)
 8004426:	1ba4      	subs	r4, r4, r6
 8004428:	10a4      	asrs	r4, r4, #2
 800442a:	42a5      	cmp	r5, r4
 800442c:	d105      	bne.n	800443a <__libc_init_array+0x2e>
 800442e:	bd70      	pop	{r4, r5, r6, pc}
 8004430:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004434:	4798      	blx	r3
 8004436:	3501      	adds	r5, #1
 8004438:	e7ee      	b.n	8004418 <__libc_init_array+0xc>
 800443a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800443e:	4798      	blx	r3
 8004440:	3501      	adds	r5, #1
 8004442:	e7f2      	b.n	800442a <__libc_init_array+0x1e>
 8004444:	08008cc8 	.word	0x08008cc8
 8004448:	08008cc8 	.word	0x08008cc8
 800444c:	08008cc8 	.word	0x08008cc8
 8004450:	08008ccc 	.word	0x08008ccc

08004454 <memcpy>:
 8004454:	b510      	push	{r4, lr}
 8004456:	1e43      	subs	r3, r0, #1
 8004458:	440a      	add	r2, r1
 800445a:	4291      	cmp	r1, r2
 800445c:	d100      	bne.n	8004460 <memcpy+0xc>
 800445e:	bd10      	pop	{r4, pc}
 8004460:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004464:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004468:	e7f7      	b.n	800445a <memcpy+0x6>

0800446a <memset>:
 800446a:	4603      	mov	r3, r0
 800446c:	4402      	add	r2, r0
 800446e:	4293      	cmp	r3, r2
 8004470:	d100      	bne.n	8004474 <memset+0xa>
 8004472:	4770      	bx	lr
 8004474:	f803 1b01 	strb.w	r1, [r3], #1
 8004478:	e7f9      	b.n	800446e <memset+0x4>

0800447a <__cvt>:
 800447a:	2b00      	cmp	r3, #0
 800447c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004480:	461e      	mov	r6, r3
 8004482:	bfbb      	ittet	lt
 8004484:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004488:	461e      	movlt	r6, r3
 800448a:	2300      	movge	r3, #0
 800448c:	232d      	movlt	r3, #45	; 0x2d
 800448e:	b088      	sub	sp, #32
 8004490:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004492:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004496:	f027 0720 	bic.w	r7, r7, #32
 800449a:	2f46      	cmp	r7, #70	; 0x46
 800449c:	4614      	mov	r4, r2
 800449e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80044a0:	700b      	strb	r3, [r1, #0]
 80044a2:	d004      	beq.n	80044ae <__cvt+0x34>
 80044a4:	2f45      	cmp	r7, #69	; 0x45
 80044a6:	d100      	bne.n	80044aa <__cvt+0x30>
 80044a8:	3501      	adds	r5, #1
 80044aa:	2302      	movs	r3, #2
 80044ac:	e000      	b.n	80044b0 <__cvt+0x36>
 80044ae:	2303      	movs	r3, #3
 80044b0:	aa07      	add	r2, sp, #28
 80044b2:	9204      	str	r2, [sp, #16]
 80044b4:	aa06      	add	r2, sp, #24
 80044b6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80044ba:	e9cd 3500 	strd	r3, r5, [sp]
 80044be:	4622      	mov	r2, r4
 80044c0:	4633      	mov	r3, r6
 80044c2:	f001 feb9 	bl	8006238 <_dtoa_r>
 80044c6:	2f47      	cmp	r7, #71	; 0x47
 80044c8:	4680      	mov	r8, r0
 80044ca:	d102      	bne.n	80044d2 <__cvt+0x58>
 80044cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80044ce:	07db      	lsls	r3, r3, #31
 80044d0:	d526      	bpl.n	8004520 <__cvt+0xa6>
 80044d2:	2f46      	cmp	r7, #70	; 0x46
 80044d4:	eb08 0905 	add.w	r9, r8, r5
 80044d8:	d111      	bne.n	80044fe <__cvt+0x84>
 80044da:	f898 3000 	ldrb.w	r3, [r8]
 80044de:	2b30      	cmp	r3, #48	; 0x30
 80044e0:	d10a      	bne.n	80044f8 <__cvt+0x7e>
 80044e2:	2200      	movs	r2, #0
 80044e4:	2300      	movs	r3, #0
 80044e6:	4620      	mov	r0, r4
 80044e8:	4631      	mov	r1, r6
 80044ea:	f7fc fac9 	bl	8000a80 <__aeabi_dcmpeq>
 80044ee:	b918      	cbnz	r0, 80044f8 <__cvt+0x7e>
 80044f0:	f1c5 0501 	rsb	r5, r5, #1
 80044f4:	f8ca 5000 	str.w	r5, [sl]
 80044f8:	f8da 3000 	ldr.w	r3, [sl]
 80044fc:	4499      	add	r9, r3
 80044fe:	2200      	movs	r2, #0
 8004500:	2300      	movs	r3, #0
 8004502:	4620      	mov	r0, r4
 8004504:	4631      	mov	r1, r6
 8004506:	f7fc fabb 	bl	8000a80 <__aeabi_dcmpeq>
 800450a:	b938      	cbnz	r0, 800451c <__cvt+0xa2>
 800450c:	2230      	movs	r2, #48	; 0x30
 800450e:	9b07      	ldr	r3, [sp, #28]
 8004510:	454b      	cmp	r3, r9
 8004512:	d205      	bcs.n	8004520 <__cvt+0xa6>
 8004514:	1c59      	adds	r1, r3, #1
 8004516:	9107      	str	r1, [sp, #28]
 8004518:	701a      	strb	r2, [r3, #0]
 800451a:	e7f8      	b.n	800450e <__cvt+0x94>
 800451c:	f8cd 901c 	str.w	r9, [sp, #28]
 8004520:	4640      	mov	r0, r8
 8004522:	9b07      	ldr	r3, [sp, #28]
 8004524:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004526:	eba3 0308 	sub.w	r3, r3, r8
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	b008      	add	sp, #32
 800452e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004532 <__exponent>:
 8004532:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004534:	2900      	cmp	r1, #0
 8004536:	bfb4      	ite	lt
 8004538:	232d      	movlt	r3, #45	; 0x2d
 800453a:	232b      	movge	r3, #43	; 0x2b
 800453c:	4604      	mov	r4, r0
 800453e:	bfb8      	it	lt
 8004540:	4249      	neglt	r1, r1
 8004542:	2909      	cmp	r1, #9
 8004544:	f804 2b02 	strb.w	r2, [r4], #2
 8004548:	7043      	strb	r3, [r0, #1]
 800454a:	dd21      	ble.n	8004590 <__exponent+0x5e>
 800454c:	f10d 0307 	add.w	r3, sp, #7
 8004550:	461f      	mov	r7, r3
 8004552:	260a      	movs	r6, #10
 8004554:	fb91 f5f6 	sdiv	r5, r1, r6
 8004558:	fb06 1115 	mls	r1, r6, r5, r1
 800455c:	2d09      	cmp	r5, #9
 800455e:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004562:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004566:	f103 32ff 	add.w	r2, r3, #4294967295
 800456a:	4629      	mov	r1, r5
 800456c:	dc09      	bgt.n	8004582 <__exponent+0x50>
 800456e:	3130      	adds	r1, #48	; 0x30
 8004570:	3b02      	subs	r3, #2
 8004572:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004576:	42bb      	cmp	r3, r7
 8004578:	4622      	mov	r2, r4
 800457a:	d304      	bcc.n	8004586 <__exponent+0x54>
 800457c:	1a10      	subs	r0, r2, r0
 800457e:	b003      	add	sp, #12
 8004580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004582:	4613      	mov	r3, r2
 8004584:	e7e6      	b.n	8004554 <__exponent+0x22>
 8004586:	f813 2b01 	ldrb.w	r2, [r3], #1
 800458a:	f804 2b01 	strb.w	r2, [r4], #1
 800458e:	e7f2      	b.n	8004576 <__exponent+0x44>
 8004590:	2330      	movs	r3, #48	; 0x30
 8004592:	4419      	add	r1, r3
 8004594:	7083      	strb	r3, [r0, #2]
 8004596:	1d02      	adds	r2, r0, #4
 8004598:	70c1      	strb	r1, [r0, #3]
 800459a:	e7ef      	b.n	800457c <__exponent+0x4a>

0800459c <_printf_float>:
 800459c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a0:	b091      	sub	sp, #68	; 0x44
 80045a2:	460c      	mov	r4, r1
 80045a4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80045a6:	4693      	mov	fp, r2
 80045a8:	461e      	mov	r6, r3
 80045aa:	4605      	mov	r5, r0
 80045ac:	f003 f8a0 	bl	80076f0 <_localeconv_r>
 80045b0:	6803      	ldr	r3, [r0, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	9309      	str	r3, [sp, #36]	; 0x24
 80045b6:	f7fb fe37 	bl	8000228 <strlen>
 80045ba:	2300      	movs	r3, #0
 80045bc:	930e      	str	r3, [sp, #56]	; 0x38
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	900a      	str	r0, [sp, #40]	; 0x28
 80045c2:	3307      	adds	r3, #7
 80045c4:	f023 0307 	bic.w	r3, r3, #7
 80045c8:	f103 0208 	add.w	r2, r3, #8
 80045cc:	f894 8018 	ldrb.w	r8, [r4, #24]
 80045d0:	f8d4 a000 	ldr.w	sl, [r4]
 80045d4:	603a      	str	r2, [r7, #0]
 80045d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80045de:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80045e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80045e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80045e8:	f04f 32ff 	mov.w	r2, #4294967295
 80045ec:	4ba6      	ldr	r3, [pc, #664]	; (8004888 <_printf_float+0x2ec>)
 80045ee:	4638      	mov	r0, r7
 80045f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045f2:	f7fc fa77 	bl	8000ae4 <__aeabi_dcmpun>
 80045f6:	bb68      	cbnz	r0, 8004654 <_printf_float+0xb8>
 80045f8:	f04f 32ff 	mov.w	r2, #4294967295
 80045fc:	4ba2      	ldr	r3, [pc, #648]	; (8004888 <_printf_float+0x2ec>)
 80045fe:	4638      	mov	r0, r7
 8004600:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004602:	f7fc fa51 	bl	8000aa8 <__aeabi_dcmple>
 8004606:	bb28      	cbnz	r0, 8004654 <_printf_float+0xb8>
 8004608:	2200      	movs	r2, #0
 800460a:	2300      	movs	r3, #0
 800460c:	4638      	mov	r0, r7
 800460e:	4649      	mov	r1, r9
 8004610:	f7fc fa40 	bl	8000a94 <__aeabi_dcmplt>
 8004614:	b110      	cbz	r0, 800461c <_printf_float+0x80>
 8004616:	232d      	movs	r3, #45	; 0x2d
 8004618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800461c:	4f9b      	ldr	r7, [pc, #620]	; (800488c <_printf_float+0x2f0>)
 800461e:	4b9c      	ldr	r3, [pc, #624]	; (8004890 <_printf_float+0x2f4>)
 8004620:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004624:	bf98      	it	ls
 8004626:	461f      	movls	r7, r3
 8004628:	2303      	movs	r3, #3
 800462a:	f04f 0900 	mov.w	r9, #0
 800462e:	6123      	str	r3, [r4, #16]
 8004630:	f02a 0304 	bic.w	r3, sl, #4
 8004634:	6023      	str	r3, [r4, #0]
 8004636:	9600      	str	r6, [sp, #0]
 8004638:	465b      	mov	r3, fp
 800463a:	aa0f      	add	r2, sp, #60	; 0x3c
 800463c:	4621      	mov	r1, r4
 800463e:	4628      	mov	r0, r5
 8004640:	f000 f9e2 	bl	8004a08 <_printf_common>
 8004644:	3001      	adds	r0, #1
 8004646:	f040 8090 	bne.w	800476a <_printf_float+0x1ce>
 800464a:	f04f 30ff 	mov.w	r0, #4294967295
 800464e:	b011      	add	sp, #68	; 0x44
 8004650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004654:	463a      	mov	r2, r7
 8004656:	464b      	mov	r3, r9
 8004658:	4638      	mov	r0, r7
 800465a:	4649      	mov	r1, r9
 800465c:	f7fc fa42 	bl	8000ae4 <__aeabi_dcmpun>
 8004660:	b110      	cbz	r0, 8004668 <_printf_float+0xcc>
 8004662:	4f8c      	ldr	r7, [pc, #560]	; (8004894 <_printf_float+0x2f8>)
 8004664:	4b8c      	ldr	r3, [pc, #560]	; (8004898 <_printf_float+0x2fc>)
 8004666:	e7db      	b.n	8004620 <_printf_float+0x84>
 8004668:	6863      	ldr	r3, [r4, #4]
 800466a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800466e:	1c59      	adds	r1, r3, #1
 8004670:	a80d      	add	r0, sp, #52	; 0x34
 8004672:	a90e      	add	r1, sp, #56	; 0x38
 8004674:	d140      	bne.n	80046f8 <_printf_float+0x15c>
 8004676:	2306      	movs	r3, #6
 8004678:	6063      	str	r3, [r4, #4]
 800467a:	f04f 0c00 	mov.w	ip, #0
 800467e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004682:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004686:	6863      	ldr	r3, [r4, #4]
 8004688:	6022      	str	r2, [r4, #0]
 800468a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	463a      	mov	r2, r7
 8004692:	464b      	mov	r3, r9
 8004694:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004698:	4628      	mov	r0, r5
 800469a:	f7ff feee 	bl	800447a <__cvt>
 800469e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80046a2:	2b47      	cmp	r3, #71	; 0x47
 80046a4:	4607      	mov	r7, r0
 80046a6:	d109      	bne.n	80046bc <_printf_float+0x120>
 80046a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046aa:	1cd8      	adds	r0, r3, #3
 80046ac:	db02      	blt.n	80046b4 <_printf_float+0x118>
 80046ae:	6862      	ldr	r2, [r4, #4]
 80046b0:	4293      	cmp	r3, r2
 80046b2:	dd47      	ble.n	8004744 <_printf_float+0x1a8>
 80046b4:	f1a8 0802 	sub.w	r8, r8, #2
 80046b8:	fa5f f888 	uxtb.w	r8, r8
 80046bc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80046c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80046c2:	d824      	bhi.n	800470e <_printf_float+0x172>
 80046c4:	3901      	subs	r1, #1
 80046c6:	4642      	mov	r2, r8
 80046c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80046cc:	910d      	str	r1, [sp, #52]	; 0x34
 80046ce:	f7ff ff30 	bl	8004532 <__exponent>
 80046d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046d4:	4681      	mov	r9, r0
 80046d6:	1813      	adds	r3, r2, r0
 80046d8:	2a01      	cmp	r2, #1
 80046da:	6123      	str	r3, [r4, #16]
 80046dc:	dc02      	bgt.n	80046e4 <_printf_float+0x148>
 80046de:	6822      	ldr	r2, [r4, #0]
 80046e0:	07d1      	lsls	r1, r2, #31
 80046e2:	d501      	bpl.n	80046e8 <_printf_float+0x14c>
 80046e4:	3301      	adds	r3, #1
 80046e6:	6123      	str	r3, [r4, #16]
 80046e8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0a2      	beq.n	8004636 <_printf_float+0x9a>
 80046f0:	232d      	movs	r3, #45	; 0x2d
 80046f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046f6:	e79e      	b.n	8004636 <_printf_float+0x9a>
 80046f8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80046fc:	f000 816e 	beq.w	80049dc <_printf_float+0x440>
 8004700:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004704:	d1b9      	bne.n	800467a <_printf_float+0xde>
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1b7      	bne.n	800467a <_printf_float+0xde>
 800470a:	2301      	movs	r3, #1
 800470c:	e7b4      	b.n	8004678 <_printf_float+0xdc>
 800470e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004712:	d119      	bne.n	8004748 <_printf_float+0x1ac>
 8004714:	2900      	cmp	r1, #0
 8004716:	6863      	ldr	r3, [r4, #4]
 8004718:	dd0c      	ble.n	8004734 <_printf_float+0x198>
 800471a:	6121      	str	r1, [r4, #16]
 800471c:	b913      	cbnz	r3, 8004724 <_printf_float+0x188>
 800471e:	6822      	ldr	r2, [r4, #0]
 8004720:	07d2      	lsls	r2, r2, #31
 8004722:	d502      	bpl.n	800472a <_printf_float+0x18e>
 8004724:	3301      	adds	r3, #1
 8004726:	440b      	add	r3, r1
 8004728:	6123      	str	r3, [r4, #16]
 800472a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800472c:	f04f 0900 	mov.w	r9, #0
 8004730:	65a3      	str	r3, [r4, #88]	; 0x58
 8004732:	e7d9      	b.n	80046e8 <_printf_float+0x14c>
 8004734:	b913      	cbnz	r3, 800473c <_printf_float+0x1a0>
 8004736:	6822      	ldr	r2, [r4, #0]
 8004738:	07d0      	lsls	r0, r2, #31
 800473a:	d501      	bpl.n	8004740 <_printf_float+0x1a4>
 800473c:	3302      	adds	r3, #2
 800473e:	e7f3      	b.n	8004728 <_printf_float+0x18c>
 8004740:	2301      	movs	r3, #1
 8004742:	e7f1      	b.n	8004728 <_printf_float+0x18c>
 8004744:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004748:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800474c:	4293      	cmp	r3, r2
 800474e:	db05      	blt.n	800475c <_printf_float+0x1c0>
 8004750:	6822      	ldr	r2, [r4, #0]
 8004752:	6123      	str	r3, [r4, #16]
 8004754:	07d1      	lsls	r1, r2, #31
 8004756:	d5e8      	bpl.n	800472a <_printf_float+0x18e>
 8004758:	3301      	adds	r3, #1
 800475a:	e7e5      	b.n	8004728 <_printf_float+0x18c>
 800475c:	2b00      	cmp	r3, #0
 800475e:	bfcc      	ite	gt
 8004760:	2301      	movgt	r3, #1
 8004762:	f1c3 0302 	rsble	r3, r3, #2
 8004766:	4413      	add	r3, r2
 8004768:	e7de      	b.n	8004728 <_printf_float+0x18c>
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	055a      	lsls	r2, r3, #21
 800476e:	d407      	bmi.n	8004780 <_printf_float+0x1e4>
 8004770:	6923      	ldr	r3, [r4, #16]
 8004772:	463a      	mov	r2, r7
 8004774:	4659      	mov	r1, fp
 8004776:	4628      	mov	r0, r5
 8004778:	47b0      	blx	r6
 800477a:	3001      	adds	r0, #1
 800477c:	d129      	bne.n	80047d2 <_printf_float+0x236>
 800477e:	e764      	b.n	800464a <_printf_float+0xae>
 8004780:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004784:	f240 80d7 	bls.w	8004936 <_printf_float+0x39a>
 8004788:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800478c:	2200      	movs	r2, #0
 800478e:	2300      	movs	r3, #0
 8004790:	f7fc f976 	bl	8000a80 <__aeabi_dcmpeq>
 8004794:	b388      	cbz	r0, 80047fa <_printf_float+0x25e>
 8004796:	2301      	movs	r3, #1
 8004798:	4a40      	ldr	r2, [pc, #256]	; (800489c <_printf_float+0x300>)
 800479a:	4659      	mov	r1, fp
 800479c:	4628      	mov	r0, r5
 800479e:	47b0      	blx	r6
 80047a0:	3001      	adds	r0, #1
 80047a2:	f43f af52 	beq.w	800464a <_printf_float+0xae>
 80047a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80047aa:	429a      	cmp	r2, r3
 80047ac:	db02      	blt.n	80047b4 <_printf_float+0x218>
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	07d8      	lsls	r0, r3, #31
 80047b2:	d50e      	bpl.n	80047d2 <_printf_float+0x236>
 80047b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047b8:	4659      	mov	r1, fp
 80047ba:	4628      	mov	r0, r5
 80047bc:	47b0      	blx	r6
 80047be:	3001      	adds	r0, #1
 80047c0:	f43f af43 	beq.w	800464a <_printf_float+0xae>
 80047c4:	2700      	movs	r7, #0
 80047c6:	f104 081a 	add.w	r8, r4, #26
 80047ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047cc:	3b01      	subs	r3, #1
 80047ce:	42bb      	cmp	r3, r7
 80047d0:	dc09      	bgt.n	80047e6 <_printf_float+0x24a>
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	079f      	lsls	r7, r3, #30
 80047d6:	f100 80fd 	bmi.w	80049d4 <_printf_float+0x438>
 80047da:	68e0      	ldr	r0, [r4, #12]
 80047dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80047de:	4298      	cmp	r0, r3
 80047e0:	bfb8      	it	lt
 80047e2:	4618      	movlt	r0, r3
 80047e4:	e733      	b.n	800464e <_printf_float+0xb2>
 80047e6:	2301      	movs	r3, #1
 80047e8:	4642      	mov	r2, r8
 80047ea:	4659      	mov	r1, fp
 80047ec:	4628      	mov	r0, r5
 80047ee:	47b0      	blx	r6
 80047f0:	3001      	adds	r0, #1
 80047f2:	f43f af2a 	beq.w	800464a <_printf_float+0xae>
 80047f6:	3701      	adds	r7, #1
 80047f8:	e7e7      	b.n	80047ca <_printf_float+0x22e>
 80047fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	dc2b      	bgt.n	8004858 <_printf_float+0x2bc>
 8004800:	2301      	movs	r3, #1
 8004802:	4a26      	ldr	r2, [pc, #152]	; (800489c <_printf_float+0x300>)
 8004804:	4659      	mov	r1, fp
 8004806:	4628      	mov	r0, r5
 8004808:	47b0      	blx	r6
 800480a:	3001      	adds	r0, #1
 800480c:	f43f af1d 	beq.w	800464a <_printf_float+0xae>
 8004810:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004812:	b923      	cbnz	r3, 800481e <_printf_float+0x282>
 8004814:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004816:	b913      	cbnz	r3, 800481e <_printf_float+0x282>
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	07d9      	lsls	r1, r3, #31
 800481c:	d5d9      	bpl.n	80047d2 <_printf_float+0x236>
 800481e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004822:	4659      	mov	r1, fp
 8004824:	4628      	mov	r0, r5
 8004826:	47b0      	blx	r6
 8004828:	3001      	adds	r0, #1
 800482a:	f43f af0e 	beq.w	800464a <_printf_float+0xae>
 800482e:	f04f 0800 	mov.w	r8, #0
 8004832:	f104 091a 	add.w	r9, r4, #26
 8004836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004838:	425b      	negs	r3, r3
 800483a:	4543      	cmp	r3, r8
 800483c:	dc01      	bgt.n	8004842 <_printf_float+0x2a6>
 800483e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004840:	e797      	b.n	8004772 <_printf_float+0x1d6>
 8004842:	2301      	movs	r3, #1
 8004844:	464a      	mov	r2, r9
 8004846:	4659      	mov	r1, fp
 8004848:	4628      	mov	r0, r5
 800484a:	47b0      	blx	r6
 800484c:	3001      	adds	r0, #1
 800484e:	f43f aefc 	beq.w	800464a <_printf_float+0xae>
 8004852:	f108 0801 	add.w	r8, r8, #1
 8004856:	e7ee      	b.n	8004836 <_printf_float+0x29a>
 8004858:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800485a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800485c:	429a      	cmp	r2, r3
 800485e:	bfa8      	it	ge
 8004860:	461a      	movge	r2, r3
 8004862:	2a00      	cmp	r2, #0
 8004864:	4690      	mov	r8, r2
 8004866:	dd07      	ble.n	8004878 <_printf_float+0x2dc>
 8004868:	4613      	mov	r3, r2
 800486a:	4659      	mov	r1, fp
 800486c:	463a      	mov	r2, r7
 800486e:	4628      	mov	r0, r5
 8004870:	47b0      	blx	r6
 8004872:	3001      	adds	r0, #1
 8004874:	f43f aee9 	beq.w	800464a <_printf_float+0xae>
 8004878:	f104 031a 	add.w	r3, r4, #26
 800487c:	f04f 0a00 	mov.w	sl, #0
 8004880:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004884:	930b      	str	r3, [sp, #44]	; 0x2c
 8004886:	e015      	b.n	80048b4 <_printf_float+0x318>
 8004888:	7fefffff 	.word	0x7fefffff
 800488c:	080089a4 	.word	0x080089a4
 8004890:	080089a0 	.word	0x080089a0
 8004894:	080089ac 	.word	0x080089ac
 8004898:	080089a8 	.word	0x080089a8
 800489c:	080089b0 	.word	0x080089b0
 80048a0:	2301      	movs	r3, #1
 80048a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80048a4:	4659      	mov	r1, fp
 80048a6:	4628      	mov	r0, r5
 80048a8:	47b0      	blx	r6
 80048aa:	3001      	adds	r0, #1
 80048ac:	f43f aecd 	beq.w	800464a <_printf_float+0xae>
 80048b0:	f10a 0a01 	add.w	sl, sl, #1
 80048b4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80048b8:	eba9 0308 	sub.w	r3, r9, r8
 80048bc:	4553      	cmp	r3, sl
 80048be:	dcef      	bgt.n	80048a0 <_printf_float+0x304>
 80048c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80048c4:	429a      	cmp	r2, r3
 80048c6:	444f      	add	r7, r9
 80048c8:	db14      	blt.n	80048f4 <_printf_float+0x358>
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	07da      	lsls	r2, r3, #31
 80048ce:	d411      	bmi.n	80048f4 <_printf_float+0x358>
 80048d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80048d4:	eba3 0209 	sub.w	r2, r3, r9
 80048d8:	eba3 0901 	sub.w	r9, r3, r1
 80048dc:	4591      	cmp	r9, r2
 80048de:	bfa8      	it	ge
 80048e0:	4691      	movge	r9, r2
 80048e2:	f1b9 0f00 	cmp.w	r9, #0
 80048e6:	dc0d      	bgt.n	8004904 <_printf_float+0x368>
 80048e8:	2700      	movs	r7, #0
 80048ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048ee:	f104 081a 	add.w	r8, r4, #26
 80048f2:	e018      	b.n	8004926 <_printf_float+0x38a>
 80048f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048f8:	4659      	mov	r1, fp
 80048fa:	4628      	mov	r0, r5
 80048fc:	47b0      	blx	r6
 80048fe:	3001      	adds	r0, #1
 8004900:	d1e6      	bne.n	80048d0 <_printf_float+0x334>
 8004902:	e6a2      	b.n	800464a <_printf_float+0xae>
 8004904:	464b      	mov	r3, r9
 8004906:	463a      	mov	r2, r7
 8004908:	4659      	mov	r1, fp
 800490a:	4628      	mov	r0, r5
 800490c:	47b0      	blx	r6
 800490e:	3001      	adds	r0, #1
 8004910:	d1ea      	bne.n	80048e8 <_printf_float+0x34c>
 8004912:	e69a      	b.n	800464a <_printf_float+0xae>
 8004914:	2301      	movs	r3, #1
 8004916:	4642      	mov	r2, r8
 8004918:	4659      	mov	r1, fp
 800491a:	4628      	mov	r0, r5
 800491c:	47b0      	blx	r6
 800491e:	3001      	adds	r0, #1
 8004920:	f43f ae93 	beq.w	800464a <_printf_float+0xae>
 8004924:	3701      	adds	r7, #1
 8004926:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800492a:	1a9b      	subs	r3, r3, r2
 800492c:	eba3 0309 	sub.w	r3, r3, r9
 8004930:	42bb      	cmp	r3, r7
 8004932:	dcef      	bgt.n	8004914 <_printf_float+0x378>
 8004934:	e74d      	b.n	80047d2 <_printf_float+0x236>
 8004936:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004938:	2a01      	cmp	r2, #1
 800493a:	dc01      	bgt.n	8004940 <_printf_float+0x3a4>
 800493c:	07db      	lsls	r3, r3, #31
 800493e:	d538      	bpl.n	80049b2 <_printf_float+0x416>
 8004940:	2301      	movs	r3, #1
 8004942:	463a      	mov	r2, r7
 8004944:	4659      	mov	r1, fp
 8004946:	4628      	mov	r0, r5
 8004948:	47b0      	blx	r6
 800494a:	3001      	adds	r0, #1
 800494c:	f43f ae7d 	beq.w	800464a <_printf_float+0xae>
 8004950:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004954:	4659      	mov	r1, fp
 8004956:	4628      	mov	r0, r5
 8004958:	47b0      	blx	r6
 800495a:	3001      	adds	r0, #1
 800495c:	f107 0701 	add.w	r7, r7, #1
 8004960:	f43f ae73 	beq.w	800464a <_printf_float+0xae>
 8004964:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004968:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800496a:	2200      	movs	r2, #0
 800496c:	f103 38ff 	add.w	r8, r3, #4294967295
 8004970:	2300      	movs	r3, #0
 8004972:	f7fc f885 	bl	8000a80 <__aeabi_dcmpeq>
 8004976:	b9c0      	cbnz	r0, 80049aa <_printf_float+0x40e>
 8004978:	4643      	mov	r3, r8
 800497a:	463a      	mov	r2, r7
 800497c:	4659      	mov	r1, fp
 800497e:	4628      	mov	r0, r5
 8004980:	47b0      	blx	r6
 8004982:	3001      	adds	r0, #1
 8004984:	d10d      	bne.n	80049a2 <_printf_float+0x406>
 8004986:	e660      	b.n	800464a <_printf_float+0xae>
 8004988:	2301      	movs	r3, #1
 800498a:	4642      	mov	r2, r8
 800498c:	4659      	mov	r1, fp
 800498e:	4628      	mov	r0, r5
 8004990:	47b0      	blx	r6
 8004992:	3001      	adds	r0, #1
 8004994:	f43f ae59 	beq.w	800464a <_printf_float+0xae>
 8004998:	3701      	adds	r7, #1
 800499a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800499c:	3b01      	subs	r3, #1
 800499e:	42bb      	cmp	r3, r7
 80049a0:	dcf2      	bgt.n	8004988 <_printf_float+0x3ec>
 80049a2:	464b      	mov	r3, r9
 80049a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80049a8:	e6e4      	b.n	8004774 <_printf_float+0x1d8>
 80049aa:	2700      	movs	r7, #0
 80049ac:	f104 081a 	add.w	r8, r4, #26
 80049b0:	e7f3      	b.n	800499a <_printf_float+0x3fe>
 80049b2:	2301      	movs	r3, #1
 80049b4:	e7e1      	b.n	800497a <_printf_float+0x3de>
 80049b6:	2301      	movs	r3, #1
 80049b8:	4642      	mov	r2, r8
 80049ba:	4659      	mov	r1, fp
 80049bc:	4628      	mov	r0, r5
 80049be:	47b0      	blx	r6
 80049c0:	3001      	adds	r0, #1
 80049c2:	f43f ae42 	beq.w	800464a <_printf_float+0xae>
 80049c6:	3701      	adds	r7, #1
 80049c8:	68e3      	ldr	r3, [r4, #12]
 80049ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80049cc:	1a9b      	subs	r3, r3, r2
 80049ce:	42bb      	cmp	r3, r7
 80049d0:	dcf1      	bgt.n	80049b6 <_printf_float+0x41a>
 80049d2:	e702      	b.n	80047da <_printf_float+0x23e>
 80049d4:	2700      	movs	r7, #0
 80049d6:	f104 0819 	add.w	r8, r4, #25
 80049da:	e7f5      	b.n	80049c8 <_printf_float+0x42c>
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f43f ae94 	beq.w	800470a <_printf_float+0x16e>
 80049e2:	f04f 0c00 	mov.w	ip, #0
 80049e6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80049ea:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80049ee:	6022      	str	r2, [r4, #0]
 80049f0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80049f4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	463a      	mov	r2, r7
 80049fc:	464b      	mov	r3, r9
 80049fe:	4628      	mov	r0, r5
 8004a00:	f7ff fd3b 	bl	800447a <__cvt>
 8004a04:	4607      	mov	r7, r0
 8004a06:	e64f      	b.n	80046a8 <_printf_float+0x10c>

08004a08 <_printf_common>:
 8004a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a0c:	4691      	mov	r9, r2
 8004a0e:	461f      	mov	r7, r3
 8004a10:	688a      	ldr	r2, [r1, #8]
 8004a12:	690b      	ldr	r3, [r1, #16]
 8004a14:	4606      	mov	r6, r0
 8004a16:	4293      	cmp	r3, r2
 8004a18:	bfb8      	it	lt
 8004a1a:	4613      	movlt	r3, r2
 8004a1c:	f8c9 3000 	str.w	r3, [r9]
 8004a20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a24:	460c      	mov	r4, r1
 8004a26:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a2a:	b112      	cbz	r2, 8004a32 <_printf_common+0x2a>
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	f8c9 3000 	str.w	r3, [r9]
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	0699      	lsls	r1, r3, #26
 8004a36:	bf42      	ittt	mi
 8004a38:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004a3c:	3302      	addmi	r3, #2
 8004a3e:	f8c9 3000 	strmi.w	r3, [r9]
 8004a42:	6825      	ldr	r5, [r4, #0]
 8004a44:	f015 0506 	ands.w	r5, r5, #6
 8004a48:	d107      	bne.n	8004a5a <_printf_common+0x52>
 8004a4a:	f104 0a19 	add.w	sl, r4, #25
 8004a4e:	68e3      	ldr	r3, [r4, #12]
 8004a50:	f8d9 2000 	ldr.w	r2, [r9]
 8004a54:	1a9b      	subs	r3, r3, r2
 8004a56:	42ab      	cmp	r3, r5
 8004a58:	dc29      	bgt.n	8004aae <_printf_common+0xa6>
 8004a5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004a5e:	6822      	ldr	r2, [r4, #0]
 8004a60:	3300      	adds	r3, #0
 8004a62:	bf18      	it	ne
 8004a64:	2301      	movne	r3, #1
 8004a66:	0692      	lsls	r2, r2, #26
 8004a68:	d42e      	bmi.n	8004ac8 <_printf_common+0xc0>
 8004a6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a6e:	4639      	mov	r1, r7
 8004a70:	4630      	mov	r0, r6
 8004a72:	47c0      	blx	r8
 8004a74:	3001      	adds	r0, #1
 8004a76:	d021      	beq.n	8004abc <_printf_common+0xb4>
 8004a78:	6823      	ldr	r3, [r4, #0]
 8004a7a:	68e5      	ldr	r5, [r4, #12]
 8004a7c:	f003 0306 	and.w	r3, r3, #6
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	bf18      	it	ne
 8004a84:	2500      	movne	r5, #0
 8004a86:	f8d9 2000 	ldr.w	r2, [r9]
 8004a8a:	f04f 0900 	mov.w	r9, #0
 8004a8e:	bf08      	it	eq
 8004a90:	1aad      	subeq	r5, r5, r2
 8004a92:	68a3      	ldr	r3, [r4, #8]
 8004a94:	6922      	ldr	r2, [r4, #16]
 8004a96:	bf08      	it	eq
 8004a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	bfc4      	itt	gt
 8004aa0:	1a9b      	subgt	r3, r3, r2
 8004aa2:	18ed      	addgt	r5, r5, r3
 8004aa4:	341a      	adds	r4, #26
 8004aa6:	454d      	cmp	r5, r9
 8004aa8:	d11a      	bne.n	8004ae0 <_printf_common+0xd8>
 8004aaa:	2000      	movs	r0, #0
 8004aac:	e008      	b.n	8004ac0 <_printf_common+0xb8>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	4652      	mov	r2, sl
 8004ab2:	4639      	mov	r1, r7
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	47c0      	blx	r8
 8004ab8:	3001      	adds	r0, #1
 8004aba:	d103      	bne.n	8004ac4 <_printf_common+0xbc>
 8004abc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac4:	3501      	adds	r5, #1
 8004ac6:	e7c2      	b.n	8004a4e <_printf_common+0x46>
 8004ac8:	2030      	movs	r0, #48	; 0x30
 8004aca:	18e1      	adds	r1, r4, r3
 8004acc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ad6:	4422      	add	r2, r4
 8004ad8:	3302      	adds	r3, #2
 8004ada:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ade:	e7c4      	b.n	8004a6a <_printf_common+0x62>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	4622      	mov	r2, r4
 8004ae4:	4639      	mov	r1, r7
 8004ae6:	4630      	mov	r0, r6
 8004ae8:	47c0      	blx	r8
 8004aea:	3001      	adds	r0, #1
 8004aec:	d0e6      	beq.n	8004abc <_printf_common+0xb4>
 8004aee:	f109 0901 	add.w	r9, r9, #1
 8004af2:	e7d8      	b.n	8004aa6 <_printf_common+0x9e>

08004af4 <_printf_i>:
 8004af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004af8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004afc:	460c      	mov	r4, r1
 8004afe:	7e09      	ldrb	r1, [r1, #24]
 8004b00:	b085      	sub	sp, #20
 8004b02:	296e      	cmp	r1, #110	; 0x6e
 8004b04:	4617      	mov	r7, r2
 8004b06:	4606      	mov	r6, r0
 8004b08:	4698      	mov	r8, r3
 8004b0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b0c:	f000 80b3 	beq.w	8004c76 <_printf_i+0x182>
 8004b10:	d822      	bhi.n	8004b58 <_printf_i+0x64>
 8004b12:	2963      	cmp	r1, #99	; 0x63
 8004b14:	d036      	beq.n	8004b84 <_printf_i+0x90>
 8004b16:	d80a      	bhi.n	8004b2e <_printf_i+0x3a>
 8004b18:	2900      	cmp	r1, #0
 8004b1a:	f000 80b9 	beq.w	8004c90 <_printf_i+0x19c>
 8004b1e:	2958      	cmp	r1, #88	; 0x58
 8004b20:	f000 8083 	beq.w	8004c2a <_printf_i+0x136>
 8004b24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004b2c:	e032      	b.n	8004b94 <_printf_i+0xa0>
 8004b2e:	2964      	cmp	r1, #100	; 0x64
 8004b30:	d001      	beq.n	8004b36 <_printf_i+0x42>
 8004b32:	2969      	cmp	r1, #105	; 0x69
 8004b34:	d1f6      	bne.n	8004b24 <_printf_i+0x30>
 8004b36:	6820      	ldr	r0, [r4, #0]
 8004b38:	6813      	ldr	r3, [r2, #0]
 8004b3a:	0605      	lsls	r5, r0, #24
 8004b3c:	f103 0104 	add.w	r1, r3, #4
 8004b40:	d52a      	bpl.n	8004b98 <_printf_i+0xa4>
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6011      	str	r1, [r2, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	da03      	bge.n	8004b52 <_printf_i+0x5e>
 8004b4a:	222d      	movs	r2, #45	; 0x2d
 8004b4c:	425b      	negs	r3, r3
 8004b4e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004b52:	486f      	ldr	r0, [pc, #444]	; (8004d10 <_printf_i+0x21c>)
 8004b54:	220a      	movs	r2, #10
 8004b56:	e039      	b.n	8004bcc <_printf_i+0xd8>
 8004b58:	2973      	cmp	r1, #115	; 0x73
 8004b5a:	f000 809d 	beq.w	8004c98 <_printf_i+0x1a4>
 8004b5e:	d808      	bhi.n	8004b72 <_printf_i+0x7e>
 8004b60:	296f      	cmp	r1, #111	; 0x6f
 8004b62:	d020      	beq.n	8004ba6 <_printf_i+0xb2>
 8004b64:	2970      	cmp	r1, #112	; 0x70
 8004b66:	d1dd      	bne.n	8004b24 <_printf_i+0x30>
 8004b68:	6823      	ldr	r3, [r4, #0]
 8004b6a:	f043 0320 	orr.w	r3, r3, #32
 8004b6e:	6023      	str	r3, [r4, #0]
 8004b70:	e003      	b.n	8004b7a <_printf_i+0x86>
 8004b72:	2975      	cmp	r1, #117	; 0x75
 8004b74:	d017      	beq.n	8004ba6 <_printf_i+0xb2>
 8004b76:	2978      	cmp	r1, #120	; 0x78
 8004b78:	d1d4      	bne.n	8004b24 <_printf_i+0x30>
 8004b7a:	2378      	movs	r3, #120	; 0x78
 8004b7c:	4865      	ldr	r0, [pc, #404]	; (8004d14 <_printf_i+0x220>)
 8004b7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b82:	e055      	b.n	8004c30 <_printf_i+0x13c>
 8004b84:	6813      	ldr	r3, [r2, #0]
 8004b86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b8a:	1d19      	adds	r1, r3, #4
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6011      	str	r1, [r2, #0]
 8004b90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b94:	2301      	movs	r3, #1
 8004b96:	e08c      	b.n	8004cb2 <_printf_i+0x1be>
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b9e:	6011      	str	r1, [r2, #0]
 8004ba0:	bf18      	it	ne
 8004ba2:	b21b      	sxthne	r3, r3
 8004ba4:	e7cf      	b.n	8004b46 <_printf_i+0x52>
 8004ba6:	6813      	ldr	r3, [r2, #0]
 8004ba8:	6825      	ldr	r5, [r4, #0]
 8004baa:	1d18      	adds	r0, r3, #4
 8004bac:	6010      	str	r0, [r2, #0]
 8004bae:	0628      	lsls	r0, r5, #24
 8004bb0:	d501      	bpl.n	8004bb6 <_printf_i+0xc2>
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	e002      	b.n	8004bbc <_printf_i+0xc8>
 8004bb6:	0668      	lsls	r0, r5, #25
 8004bb8:	d5fb      	bpl.n	8004bb2 <_printf_i+0xbe>
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	296f      	cmp	r1, #111	; 0x6f
 8004bbe:	bf14      	ite	ne
 8004bc0:	220a      	movne	r2, #10
 8004bc2:	2208      	moveq	r2, #8
 8004bc4:	4852      	ldr	r0, [pc, #328]	; (8004d10 <_printf_i+0x21c>)
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bcc:	6865      	ldr	r5, [r4, #4]
 8004bce:	2d00      	cmp	r5, #0
 8004bd0:	60a5      	str	r5, [r4, #8]
 8004bd2:	f2c0 8095 	blt.w	8004d00 <_printf_i+0x20c>
 8004bd6:	6821      	ldr	r1, [r4, #0]
 8004bd8:	f021 0104 	bic.w	r1, r1, #4
 8004bdc:	6021      	str	r1, [r4, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d13d      	bne.n	8004c5e <_printf_i+0x16a>
 8004be2:	2d00      	cmp	r5, #0
 8004be4:	f040 808e 	bne.w	8004d04 <_printf_i+0x210>
 8004be8:	4665      	mov	r5, ip
 8004bea:	2a08      	cmp	r2, #8
 8004bec:	d10b      	bne.n	8004c06 <_printf_i+0x112>
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	07db      	lsls	r3, r3, #31
 8004bf2:	d508      	bpl.n	8004c06 <_printf_i+0x112>
 8004bf4:	6923      	ldr	r3, [r4, #16]
 8004bf6:	6862      	ldr	r2, [r4, #4]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	bfde      	ittt	le
 8004bfc:	2330      	movle	r3, #48	; 0x30
 8004bfe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c06:	ebac 0305 	sub.w	r3, ip, r5
 8004c0a:	6123      	str	r3, [r4, #16]
 8004c0c:	f8cd 8000 	str.w	r8, [sp]
 8004c10:	463b      	mov	r3, r7
 8004c12:	aa03      	add	r2, sp, #12
 8004c14:	4621      	mov	r1, r4
 8004c16:	4630      	mov	r0, r6
 8004c18:	f7ff fef6 	bl	8004a08 <_printf_common>
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	d14d      	bne.n	8004cbc <_printf_i+0x1c8>
 8004c20:	f04f 30ff 	mov.w	r0, #4294967295
 8004c24:	b005      	add	sp, #20
 8004c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c2a:	4839      	ldr	r0, [pc, #228]	; (8004d10 <_printf_i+0x21c>)
 8004c2c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004c30:	6813      	ldr	r3, [r2, #0]
 8004c32:	6821      	ldr	r1, [r4, #0]
 8004c34:	1d1d      	adds	r5, r3, #4
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6015      	str	r5, [r2, #0]
 8004c3a:	060a      	lsls	r2, r1, #24
 8004c3c:	d50b      	bpl.n	8004c56 <_printf_i+0x162>
 8004c3e:	07ca      	lsls	r2, r1, #31
 8004c40:	bf44      	itt	mi
 8004c42:	f041 0120 	orrmi.w	r1, r1, #32
 8004c46:	6021      	strmi	r1, [r4, #0]
 8004c48:	b91b      	cbnz	r3, 8004c52 <_printf_i+0x15e>
 8004c4a:	6822      	ldr	r2, [r4, #0]
 8004c4c:	f022 0220 	bic.w	r2, r2, #32
 8004c50:	6022      	str	r2, [r4, #0]
 8004c52:	2210      	movs	r2, #16
 8004c54:	e7b7      	b.n	8004bc6 <_printf_i+0xd2>
 8004c56:	064d      	lsls	r5, r1, #25
 8004c58:	bf48      	it	mi
 8004c5a:	b29b      	uxthmi	r3, r3
 8004c5c:	e7ef      	b.n	8004c3e <_printf_i+0x14a>
 8004c5e:	4665      	mov	r5, ip
 8004c60:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c64:	fb02 3311 	mls	r3, r2, r1, r3
 8004c68:	5cc3      	ldrb	r3, [r0, r3]
 8004c6a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004c6e:	460b      	mov	r3, r1
 8004c70:	2900      	cmp	r1, #0
 8004c72:	d1f5      	bne.n	8004c60 <_printf_i+0x16c>
 8004c74:	e7b9      	b.n	8004bea <_printf_i+0xf6>
 8004c76:	6813      	ldr	r3, [r2, #0]
 8004c78:	6825      	ldr	r5, [r4, #0]
 8004c7a:	1d18      	adds	r0, r3, #4
 8004c7c:	6961      	ldr	r1, [r4, #20]
 8004c7e:	6010      	str	r0, [r2, #0]
 8004c80:	0628      	lsls	r0, r5, #24
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	d501      	bpl.n	8004c8a <_printf_i+0x196>
 8004c86:	6019      	str	r1, [r3, #0]
 8004c88:	e002      	b.n	8004c90 <_printf_i+0x19c>
 8004c8a:	066a      	lsls	r2, r5, #25
 8004c8c:	d5fb      	bpl.n	8004c86 <_printf_i+0x192>
 8004c8e:	8019      	strh	r1, [r3, #0]
 8004c90:	2300      	movs	r3, #0
 8004c92:	4665      	mov	r5, ip
 8004c94:	6123      	str	r3, [r4, #16]
 8004c96:	e7b9      	b.n	8004c0c <_printf_i+0x118>
 8004c98:	6813      	ldr	r3, [r2, #0]
 8004c9a:	1d19      	adds	r1, r3, #4
 8004c9c:	6011      	str	r1, [r2, #0]
 8004c9e:	681d      	ldr	r5, [r3, #0]
 8004ca0:	6862      	ldr	r2, [r4, #4]
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	f002 fdaf 	bl	8007808 <memchr>
 8004caa:	b108      	cbz	r0, 8004cb0 <_printf_i+0x1bc>
 8004cac:	1b40      	subs	r0, r0, r5
 8004cae:	6060      	str	r0, [r4, #4]
 8004cb0:	6863      	ldr	r3, [r4, #4]
 8004cb2:	6123      	str	r3, [r4, #16]
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cba:	e7a7      	b.n	8004c0c <_printf_i+0x118>
 8004cbc:	6923      	ldr	r3, [r4, #16]
 8004cbe:	462a      	mov	r2, r5
 8004cc0:	4639      	mov	r1, r7
 8004cc2:	4630      	mov	r0, r6
 8004cc4:	47c0      	blx	r8
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	d0aa      	beq.n	8004c20 <_printf_i+0x12c>
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	079b      	lsls	r3, r3, #30
 8004cce:	d413      	bmi.n	8004cf8 <_printf_i+0x204>
 8004cd0:	68e0      	ldr	r0, [r4, #12]
 8004cd2:	9b03      	ldr	r3, [sp, #12]
 8004cd4:	4298      	cmp	r0, r3
 8004cd6:	bfb8      	it	lt
 8004cd8:	4618      	movlt	r0, r3
 8004cda:	e7a3      	b.n	8004c24 <_printf_i+0x130>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	464a      	mov	r2, r9
 8004ce0:	4639      	mov	r1, r7
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	47c0      	blx	r8
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	d09a      	beq.n	8004c20 <_printf_i+0x12c>
 8004cea:	3501      	adds	r5, #1
 8004cec:	68e3      	ldr	r3, [r4, #12]
 8004cee:	9a03      	ldr	r2, [sp, #12]
 8004cf0:	1a9b      	subs	r3, r3, r2
 8004cf2:	42ab      	cmp	r3, r5
 8004cf4:	dcf2      	bgt.n	8004cdc <_printf_i+0x1e8>
 8004cf6:	e7eb      	b.n	8004cd0 <_printf_i+0x1dc>
 8004cf8:	2500      	movs	r5, #0
 8004cfa:	f104 0919 	add.w	r9, r4, #25
 8004cfe:	e7f5      	b.n	8004cec <_printf_i+0x1f8>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1ac      	bne.n	8004c5e <_printf_i+0x16a>
 8004d04:	7803      	ldrb	r3, [r0, #0]
 8004d06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d0e:	e76c      	b.n	8004bea <_printf_i+0xf6>
 8004d10:	080089b2 	.word	0x080089b2
 8004d14:	080089c3 	.word	0x080089c3

08004d18 <_scanf_float>:
 8004d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d1c:	469a      	mov	sl, r3
 8004d1e:	688b      	ldr	r3, [r1, #8]
 8004d20:	4616      	mov	r6, r2
 8004d22:	1e5a      	subs	r2, r3, #1
 8004d24:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004d28:	bf88      	it	hi
 8004d2a:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8004d2e:	b087      	sub	sp, #28
 8004d30:	bf85      	ittet	hi
 8004d32:	189b      	addhi	r3, r3, r2
 8004d34:	9301      	strhi	r3, [sp, #4]
 8004d36:	2300      	movls	r3, #0
 8004d38:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004d3c:	4688      	mov	r8, r1
 8004d3e:	f04f 0b00 	mov.w	fp, #0
 8004d42:	bf8c      	ite	hi
 8004d44:	608b      	strhi	r3, [r1, #8]
 8004d46:	9301      	strls	r3, [sp, #4]
 8004d48:	680b      	ldr	r3, [r1, #0]
 8004d4a:	4607      	mov	r7, r0
 8004d4c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004d50:	f848 3b1c 	str.w	r3, [r8], #28
 8004d54:	460c      	mov	r4, r1
 8004d56:	4645      	mov	r5, r8
 8004d58:	465a      	mov	r2, fp
 8004d5a:	46d9      	mov	r9, fp
 8004d5c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004d60:	f8cd b008 	str.w	fp, [sp, #8]
 8004d64:	68a1      	ldr	r1, [r4, #8]
 8004d66:	b181      	cbz	r1, 8004d8a <_scanf_float+0x72>
 8004d68:	6833      	ldr	r3, [r6, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b49      	cmp	r3, #73	; 0x49
 8004d6e:	d071      	beq.n	8004e54 <_scanf_float+0x13c>
 8004d70:	d84d      	bhi.n	8004e0e <_scanf_float+0xf6>
 8004d72:	2b39      	cmp	r3, #57	; 0x39
 8004d74:	d840      	bhi.n	8004df8 <_scanf_float+0xe0>
 8004d76:	2b31      	cmp	r3, #49	; 0x31
 8004d78:	f080 8088 	bcs.w	8004e8c <_scanf_float+0x174>
 8004d7c:	2b2d      	cmp	r3, #45	; 0x2d
 8004d7e:	f000 8090 	beq.w	8004ea2 <_scanf_float+0x18a>
 8004d82:	d815      	bhi.n	8004db0 <_scanf_float+0x98>
 8004d84:	2b2b      	cmp	r3, #43	; 0x2b
 8004d86:	f000 808c 	beq.w	8004ea2 <_scanf_float+0x18a>
 8004d8a:	f1b9 0f00 	cmp.w	r9, #0
 8004d8e:	d003      	beq.n	8004d98 <_scanf_float+0x80>
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d96:	6023      	str	r3, [r4, #0]
 8004d98:	3a01      	subs	r2, #1
 8004d9a:	2a01      	cmp	r2, #1
 8004d9c:	f200 80ea 	bhi.w	8004f74 <_scanf_float+0x25c>
 8004da0:	4545      	cmp	r5, r8
 8004da2:	f200 80dc 	bhi.w	8004f5e <_scanf_float+0x246>
 8004da6:	2601      	movs	r6, #1
 8004da8:	4630      	mov	r0, r6
 8004daa:	b007      	add	sp, #28
 8004dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db0:	2b2e      	cmp	r3, #46	; 0x2e
 8004db2:	f000 809f 	beq.w	8004ef4 <_scanf_float+0x1dc>
 8004db6:	2b30      	cmp	r3, #48	; 0x30
 8004db8:	d1e7      	bne.n	8004d8a <_scanf_float+0x72>
 8004dba:	6820      	ldr	r0, [r4, #0]
 8004dbc:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004dc0:	d064      	beq.n	8004e8c <_scanf_float+0x174>
 8004dc2:	9b01      	ldr	r3, [sp, #4]
 8004dc4:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004dc8:	6020      	str	r0, [r4, #0]
 8004dca:	f109 0901 	add.w	r9, r9, #1
 8004dce:	b11b      	cbz	r3, 8004dd8 <_scanf_float+0xc0>
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	3101      	adds	r1, #1
 8004dd4:	9301      	str	r3, [sp, #4]
 8004dd6:	60a1      	str	r1, [r4, #8]
 8004dd8:	68a3      	ldr	r3, [r4, #8]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	60a3      	str	r3, [r4, #8]
 8004dde:	6923      	ldr	r3, [r4, #16]
 8004de0:	3301      	adds	r3, #1
 8004de2:	6123      	str	r3, [r4, #16]
 8004de4:	6873      	ldr	r3, [r6, #4]
 8004de6:	3b01      	subs	r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	6073      	str	r3, [r6, #4]
 8004dec:	f340 80ac 	ble.w	8004f48 <_scanf_float+0x230>
 8004df0:	6833      	ldr	r3, [r6, #0]
 8004df2:	3301      	adds	r3, #1
 8004df4:	6033      	str	r3, [r6, #0]
 8004df6:	e7b5      	b.n	8004d64 <_scanf_float+0x4c>
 8004df8:	2b45      	cmp	r3, #69	; 0x45
 8004dfa:	f000 8085 	beq.w	8004f08 <_scanf_float+0x1f0>
 8004dfe:	2b46      	cmp	r3, #70	; 0x46
 8004e00:	d06a      	beq.n	8004ed8 <_scanf_float+0x1c0>
 8004e02:	2b41      	cmp	r3, #65	; 0x41
 8004e04:	d1c1      	bne.n	8004d8a <_scanf_float+0x72>
 8004e06:	2a01      	cmp	r2, #1
 8004e08:	d1bf      	bne.n	8004d8a <_scanf_float+0x72>
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	e046      	b.n	8004e9c <_scanf_float+0x184>
 8004e0e:	2b65      	cmp	r3, #101	; 0x65
 8004e10:	d07a      	beq.n	8004f08 <_scanf_float+0x1f0>
 8004e12:	d818      	bhi.n	8004e46 <_scanf_float+0x12e>
 8004e14:	2b54      	cmp	r3, #84	; 0x54
 8004e16:	d066      	beq.n	8004ee6 <_scanf_float+0x1ce>
 8004e18:	d811      	bhi.n	8004e3e <_scanf_float+0x126>
 8004e1a:	2b4e      	cmp	r3, #78	; 0x4e
 8004e1c:	d1b5      	bne.n	8004d8a <_scanf_float+0x72>
 8004e1e:	2a00      	cmp	r2, #0
 8004e20:	d146      	bne.n	8004eb0 <_scanf_float+0x198>
 8004e22:	f1b9 0f00 	cmp.w	r9, #0
 8004e26:	d145      	bne.n	8004eb4 <_scanf_float+0x19c>
 8004e28:	6821      	ldr	r1, [r4, #0]
 8004e2a:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004e2e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004e32:	d13f      	bne.n	8004eb4 <_scanf_float+0x19c>
 8004e34:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004e38:	6021      	str	r1, [r4, #0]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	e02e      	b.n	8004e9c <_scanf_float+0x184>
 8004e3e:	2b59      	cmp	r3, #89	; 0x59
 8004e40:	d01e      	beq.n	8004e80 <_scanf_float+0x168>
 8004e42:	2b61      	cmp	r3, #97	; 0x61
 8004e44:	e7de      	b.n	8004e04 <_scanf_float+0xec>
 8004e46:	2b6e      	cmp	r3, #110	; 0x6e
 8004e48:	d0e9      	beq.n	8004e1e <_scanf_float+0x106>
 8004e4a:	d815      	bhi.n	8004e78 <_scanf_float+0x160>
 8004e4c:	2b66      	cmp	r3, #102	; 0x66
 8004e4e:	d043      	beq.n	8004ed8 <_scanf_float+0x1c0>
 8004e50:	2b69      	cmp	r3, #105	; 0x69
 8004e52:	d19a      	bne.n	8004d8a <_scanf_float+0x72>
 8004e54:	f1bb 0f00 	cmp.w	fp, #0
 8004e58:	d138      	bne.n	8004ecc <_scanf_float+0x1b4>
 8004e5a:	f1b9 0f00 	cmp.w	r9, #0
 8004e5e:	d197      	bne.n	8004d90 <_scanf_float+0x78>
 8004e60:	6821      	ldr	r1, [r4, #0]
 8004e62:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004e66:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004e6a:	d195      	bne.n	8004d98 <_scanf_float+0x80>
 8004e6c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004e70:	6021      	str	r1, [r4, #0]
 8004e72:	f04f 0b01 	mov.w	fp, #1
 8004e76:	e011      	b.n	8004e9c <_scanf_float+0x184>
 8004e78:	2b74      	cmp	r3, #116	; 0x74
 8004e7a:	d034      	beq.n	8004ee6 <_scanf_float+0x1ce>
 8004e7c:	2b79      	cmp	r3, #121	; 0x79
 8004e7e:	d184      	bne.n	8004d8a <_scanf_float+0x72>
 8004e80:	f1bb 0f07 	cmp.w	fp, #7
 8004e84:	d181      	bne.n	8004d8a <_scanf_float+0x72>
 8004e86:	f04f 0b08 	mov.w	fp, #8
 8004e8a:	e007      	b.n	8004e9c <_scanf_float+0x184>
 8004e8c:	eb12 0f0b 	cmn.w	r2, fp
 8004e90:	f47f af7b 	bne.w	8004d8a <_scanf_float+0x72>
 8004e94:	6821      	ldr	r1, [r4, #0]
 8004e96:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8004e9a:	6021      	str	r1, [r4, #0]
 8004e9c:	702b      	strb	r3, [r5, #0]
 8004e9e:	3501      	adds	r5, #1
 8004ea0:	e79a      	b.n	8004dd8 <_scanf_float+0xc0>
 8004ea2:	6821      	ldr	r1, [r4, #0]
 8004ea4:	0608      	lsls	r0, r1, #24
 8004ea6:	f57f af70 	bpl.w	8004d8a <_scanf_float+0x72>
 8004eaa:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004eae:	e7f4      	b.n	8004e9a <_scanf_float+0x182>
 8004eb0:	2a02      	cmp	r2, #2
 8004eb2:	d047      	beq.n	8004f44 <_scanf_float+0x22c>
 8004eb4:	f1bb 0f01 	cmp.w	fp, #1
 8004eb8:	d003      	beq.n	8004ec2 <_scanf_float+0x1aa>
 8004eba:	f1bb 0f04 	cmp.w	fp, #4
 8004ebe:	f47f af64 	bne.w	8004d8a <_scanf_float+0x72>
 8004ec2:	f10b 0b01 	add.w	fp, fp, #1
 8004ec6:	fa5f fb8b 	uxtb.w	fp, fp
 8004eca:	e7e7      	b.n	8004e9c <_scanf_float+0x184>
 8004ecc:	f1bb 0f03 	cmp.w	fp, #3
 8004ed0:	d0f7      	beq.n	8004ec2 <_scanf_float+0x1aa>
 8004ed2:	f1bb 0f05 	cmp.w	fp, #5
 8004ed6:	e7f2      	b.n	8004ebe <_scanf_float+0x1a6>
 8004ed8:	f1bb 0f02 	cmp.w	fp, #2
 8004edc:	f47f af55 	bne.w	8004d8a <_scanf_float+0x72>
 8004ee0:	f04f 0b03 	mov.w	fp, #3
 8004ee4:	e7da      	b.n	8004e9c <_scanf_float+0x184>
 8004ee6:	f1bb 0f06 	cmp.w	fp, #6
 8004eea:	f47f af4e 	bne.w	8004d8a <_scanf_float+0x72>
 8004eee:	f04f 0b07 	mov.w	fp, #7
 8004ef2:	e7d3      	b.n	8004e9c <_scanf_float+0x184>
 8004ef4:	6821      	ldr	r1, [r4, #0]
 8004ef6:	0588      	lsls	r0, r1, #22
 8004ef8:	f57f af47 	bpl.w	8004d8a <_scanf_float+0x72>
 8004efc:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8004f00:	6021      	str	r1, [r4, #0]
 8004f02:	f8cd 9008 	str.w	r9, [sp, #8]
 8004f06:	e7c9      	b.n	8004e9c <_scanf_float+0x184>
 8004f08:	6821      	ldr	r1, [r4, #0]
 8004f0a:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004f0e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004f12:	d006      	beq.n	8004f22 <_scanf_float+0x20a>
 8004f14:	0548      	lsls	r0, r1, #21
 8004f16:	f57f af38 	bpl.w	8004d8a <_scanf_float+0x72>
 8004f1a:	f1b9 0f00 	cmp.w	r9, #0
 8004f1e:	f43f af3b 	beq.w	8004d98 <_scanf_float+0x80>
 8004f22:	0588      	lsls	r0, r1, #22
 8004f24:	bf58      	it	pl
 8004f26:	9802      	ldrpl	r0, [sp, #8]
 8004f28:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004f2c:	bf58      	it	pl
 8004f2e:	eba9 0000 	subpl.w	r0, r9, r0
 8004f32:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004f36:	bf58      	it	pl
 8004f38:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004f3c:	6021      	str	r1, [r4, #0]
 8004f3e:	f04f 0900 	mov.w	r9, #0
 8004f42:	e7ab      	b.n	8004e9c <_scanf_float+0x184>
 8004f44:	2203      	movs	r2, #3
 8004f46:	e7a9      	b.n	8004e9c <_scanf_float+0x184>
 8004f48:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004f4c:	4631      	mov	r1, r6
 8004f4e:	4638      	mov	r0, r7
 8004f50:	9205      	str	r2, [sp, #20]
 8004f52:	4798      	blx	r3
 8004f54:	9a05      	ldr	r2, [sp, #20]
 8004f56:	2800      	cmp	r0, #0
 8004f58:	f43f af04 	beq.w	8004d64 <_scanf_float+0x4c>
 8004f5c:	e715      	b.n	8004d8a <_scanf_float+0x72>
 8004f5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f62:	4632      	mov	r2, r6
 8004f64:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004f68:	4638      	mov	r0, r7
 8004f6a:	4798      	blx	r3
 8004f6c:	6923      	ldr	r3, [r4, #16]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	6123      	str	r3, [r4, #16]
 8004f72:	e715      	b.n	8004da0 <_scanf_float+0x88>
 8004f74:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004f78:	2b06      	cmp	r3, #6
 8004f7a:	d80a      	bhi.n	8004f92 <_scanf_float+0x27a>
 8004f7c:	f1bb 0f02 	cmp.w	fp, #2
 8004f80:	d967      	bls.n	8005052 <_scanf_float+0x33a>
 8004f82:	f1ab 0b03 	sub.w	fp, fp, #3
 8004f86:	fa5f fb8b 	uxtb.w	fp, fp
 8004f8a:	eba5 0b0b 	sub.w	fp, r5, fp
 8004f8e:	455d      	cmp	r5, fp
 8004f90:	d14a      	bne.n	8005028 <_scanf_float+0x310>
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	05da      	lsls	r2, r3, #23
 8004f96:	d51f      	bpl.n	8004fd8 <_scanf_float+0x2c0>
 8004f98:	055b      	lsls	r3, r3, #21
 8004f9a:	d467      	bmi.n	800506c <_scanf_float+0x354>
 8004f9c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004fa0:	6923      	ldr	r3, [r4, #16]
 8004fa2:	2965      	cmp	r1, #101	; 0x65
 8004fa4:	f103 33ff 	add.w	r3, r3, #4294967295
 8004fa8:	f105 3bff 	add.w	fp, r5, #4294967295
 8004fac:	6123      	str	r3, [r4, #16]
 8004fae:	d00d      	beq.n	8004fcc <_scanf_float+0x2b4>
 8004fb0:	2945      	cmp	r1, #69	; 0x45
 8004fb2:	d00b      	beq.n	8004fcc <_scanf_float+0x2b4>
 8004fb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004fb8:	4632      	mov	r2, r6
 8004fba:	4638      	mov	r0, r7
 8004fbc:	4798      	blx	r3
 8004fbe:	6923      	ldr	r3, [r4, #16]
 8004fc0:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	f1a5 0b02 	sub.w	fp, r5, #2
 8004fca:	6123      	str	r3, [r4, #16]
 8004fcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004fd0:	4632      	mov	r2, r6
 8004fd2:	4638      	mov	r0, r7
 8004fd4:	4798      	blx	r3
 8004fd6:	465d      	mov	r5, fp
 8004fd8:	6826      	ldr	r6, [r4, #0]
 8004fda:	f016 0610 	ands.w	r6, r6, #16
 8004fde:	d176      	bne.n	80050ce <_scanf_float+0x3b6>
 8004fe0:	702e      	strb	r6, [r5, #0]
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fec:	d141      	bne.n	8005072 <_scanf_float+0x35a>
 8004fee:	9b02      	ldr	r3, [sp, #8]
 8004ff0:	eba9 0303 	sub.w	r3, r9, r3
 8004ff4:	425a      	negs	r2, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d148      	bne.n	800508c <_scanf_float+0x374>
 8004ffa:	4641      	mov	r1, r8
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	4638      	mov	r0, r7
 8005000:	f000 ff2e 	bl	8005e60 <_strtod_r>
 8005004:	6825      	ldr	r5, [r4, #0]
 8005006:	4680      	mov	r8, r0
 8005008:	f015 0f02 	tst.w	r5, #2
 800500c:	4689      	mov	r9, r1
 800500e:	f8da 3000 	ldr.w	r3, [sl]
 8005012:	d046      	beq.n	80050a2 <_scanf_float+0x38a>
 8005014:	1d1a      	adds	r2, r3, #4
 8005016:	f8ca 2000 	str.w	r2, [sl]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	e9c3 8900 	strd	r8, r9, [r3]
 8005020:	68e3      	ldr	r3, [r4, #12]
 8005022:	3301      	adds	r3, #1
 8005024:	60e3      	str	r3, [r4, #12]
 8005026:	e6bf      	b.n	8004da8 <_scanf_float+0x90>
 8005028:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800502c:	4632      	mov	r2, r6
 800502e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005032:	4638      	mov	r0, r7
 8005034:	4798      	blx	r3
 8005036:	6923      	ldr	r3, [r4, #16]
 8005038:	3b01      	subs	r3, #1
 800503a:	6123      	str	r3, [r4, #16]
 800503c:	e7a7      	b.n	8004f8e <_scanf_float+0x276>
 800503e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005042:	4632      	mov	r2, r6
 8005044:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005048:	4638      	mov	r0, r7
 800504a:	4798      	blx	r3
 800504c:	6923      	ldr	r3, [r4, #16]
 800504e:	3b01      	subs	r3, #1
 8005050:	6123      	str	r3, [r4, #16]
 8005052:	4545      	cmp	r5, r8
 8005054:	d8f3      	bhi.n	800503e <_scanf_float+0x326>
 8005056:	e6a6      	b.n	8004da6 <_scanf_float+0x8e>
 8005058:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800505c:	4632      	mov	r2, r6
 800505e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005062:	4638      	mov	r0, r7
 8005064:	4798      	blx	r3
 8005066:	6923      	ldr	r3, [r4, #16]
 8005068:	3b01      	subs	r3, #1
 800506a:	6123      	str	r3, [r4, #16]
 800506c:	4545      	cmp	r5, r8
 800506e:	d8f3      	bhi.n	8005058 <_scanf_float+0x340>
 8005070:	e699      	b.n	8004da6 <_scanf_float+0x8e>
 8005072:	9b03      	ldr	r3, [sp, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0c0      	beq.n	8004ffa <_scanf_float+0x2e2>
 8005078:	9904      	ldr	r1, [sp, #16]
 800507a:	230a      	movs	r3, #10
 800507c:	4632      	mov	r2, r6
 800507e:	3101      	adds	r1, #1
 8005080:	4638      	mov	r0, r7
 8005082:	f000 ff79 	bl	8005f78 <_strtol_r>
 8005086:	9b03      	ldr	r3, [sp, #12]
 8005088:	9d04      	ldr	r5, [sp, #16]
 800508a:	1ac2      	subs	r2, r0, r3
 800508c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005090:	429d      	cmp	r5, r3
 8005092:	bf28      	it	cs
 8005094:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8005098:	490e      	ldr	r1, [pc, #56]	; (80050d4 <_scanf_float+0x3bc>)
 800509a:	4628      	mov	r0, r5
 800509c:	f000 f89c 	bl	80051d8 <siprintf>
 80050a0:	e7ab      	b.n	8004ffa <_scanf_float+0x2e2>
 80050a2:	1d1f      	adds	r7, r3, #4
 80050a4:	f015 0504 	ands.w	r5, r5, #4
 80050a8:	f8ca 7000 	str.w	r7, [sl]
 80050ac:	d1b5      	bne.n	800501a <_scanf_float+0x302>
 80050ae:	681f      	ldr	r7, [r3, #0]
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	f7fb fd16 	bl	8000ae4 <__aeabi_dcmpun>
 80050b8:	b120      	cbz	r0, 80050c4 <_scanf_float+0x3ac>
 80050ba:	4628      	mov	r0, r5
 80050bc:	f000 f888 	bl	80051d0 <nanf>
 80050c0:	6038      	str	r0, [r7, #0]
 80050c2:	e7ad      	b.n	8005020 <_scanf_float+0x308>
 80050c4:	4640      	mov	r0, r8
 80050c6:	4649      	mov	r1, r9
 80050c8:	f7fb fd6a 	bl	8000ba0 <__aeabi_d2f>
 80050cc:	e7f8      	b.n	80050c0 <_scanf_float+0x3a8>
 80050ce:	2600      	movs	r6, #0
 80050d0:	e66a      	b.n	8004da8 <_scanf_float+0x90>
 80050d2:	bf00      	nop
 80050d4:	080089d4 	.word	0x080089d4

080050d8 <iprintf>:
 80050d8:	b40f      	push	{r0, r1, r2, r3}
 80050da:	4b0a      	ldr	r3, [pc, #40]	; (8005104 <iprintf+0x2c>)
 80050dc:	b513      	push	{r0, r1, r4, lr}
 80050de:	681c      	ldr	r4, [r3, #0]
 80050e0:	b124      	cbz	r4, 80050ec <iprintf+0x14>
 80050e2:	69a3      	ldr	r3, [r4, #24]
 80050e4:	b913      	cbnz	r3, 80050ec <iprintf+0x14>
 80050e6:	4620      	mov	r0, r4
 80050e8:	f001 ff4a 	bl	8006f80 <__sinit>
 80050ec:	ab05      	add	r3, sp, #20
 80050ee:	9a04      	ldr	r2, [sp, #16]
 80050f0:	68a1      	ldr	r1, [r4, #8]
 80050f2:	4620      	mov	r0, r4
 80050f4:	9301      	str	r3, [sp, #4]
 80050f6:	f003 f9bb 	bl	8008470 <_vfiprintf_r>
 80050fa:	b002      	add	sp, #8
 80050fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005100:	b004      	add	sp, #16
 8005102:	4770      	bx	lr
 8005104:	2000000c 	.word	0x2000000c

08005108 <_puts_r>:
 8005108:	b570      	push	{r4, r5, r6, lr}
 800510a:	460e      	mov	r6, r1
 800510c:	4605      	mov	r5, r0
 800510e:	b118      	cbz	r0, 8005118 <_puts_r+0x10>
 8005110:	6983      	ldr	r3, [r0, #24]
 8005112:	b90b      	cbnz	r3, 8005118 <_puts_r+0x10>
 8005114:	f001 ff34 	bl	8006f80 <__sinit>
 8005118:	69ab      	ldr	r3, [r5, #24]
 800511a:	68ac      	ldr	r4, [r5, #8]
 800511c:	b913      	cbnz	r3, 8005124 <_puts_r+0x1c>
 800511e:	4628      	mov	r0, r5
 8005120:	f001 ff2e 	bl	8006f80 <__sinit>
 8005124:	4b23      	ldr	r3, [pc, #140]	; (80051b4 <_puts_r+0xac>)
 8005126:	429c      	cmp	r4, r3
 8005128:	d117      	bne.n	800515a <_puts_r+0x52>
 800512a:	686c      	ldr	r4, [r5, #4]
 800512c:	89a3      	ldrh	r3, [r4, #12]
 800512e:	071b      	lsls	r3, r3, #28
 8005130:	d51d      	bpl.n	800516e <_puts_r+0x66>
 8005132:	6923      	ldr	r3, [r4, #16]
 8005134:	b1db      	cbz	r3, 800516e <_puts_r+0x66>
 8005136:	3e01      	subs	r6, #1
 8005138:	68a3      	ldr	r3, [r4, #8]
 800513a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800513e:	3b01      	subs	r3, #1
 8005140:	60a3      	str	r3, [r4, #8]
 8005142:	b9e9      	cbnz	r1, 8005180 <_puts_r+0x78>
 8005144:	2b00      	cmp	r3, #0
 8005146:	da2e      	bge.n	80051a6 <_puts_r+0x9e>
 8005148:	4622      	mov	r2, r4
 800514a:	210a      	movs	r1, #10
 800514c:	4628      	mov	r0, r5
 800514e:	f000 ff25 	bl	8005f9c <__swbuf_r>
 8005152:	3001      	adds	r0, #1
 8005154:	d011      	beq.n	800517a <_puts_r+0x72>
 8005156:	200a      	movs	r0, #10
 8005158:	e011      	b.n	800517e <_puts_r+0x76>
 800515a:	4b17      	ldr	r3, [pc, #92]	; (80051b8 <_puts_r+0xb0>)
 800515c:	429c      	cmp	r4, r3
 800515e:	d101      	bne.n	8005164 <_puts_r+0x5c>
 8005160:	68ac      	ldr	r4, [r5, #8]
 8005162:	e7e3      	b.n	800512c <_puts_r+0x24>
 8005164:	4b15      	ldr	r3, [pc, #84]	; (80051bc <_puts_r+0xb4>)
 8005166:	429c      	cmp	r4, r3
 8005168:	bf08      	it	eq
 800516a:	68ec      	ldreq	r4, [r5, #12]
 800516c:	e7de      	b.n	800512c <_puts_r+0x24>
 800516e:	4621      	mov	r1, r4
 8005170:	4628      	mov	r0, r5
 8005172:	f000 ff65 	bl	8006040 <__swsetup_r>
 8005176:	2800      	cmp	r0, #0
 8005178:	d0dd      	beq.n	8005136 <_puts_r+0x2e>
 800517a:	f04f 30ff 	mov.w	r0, #4294967295
 800517e:	bd70      	pop	{r4, r5, r6, pc}
 8005180:	2b00      	cmp	r3, #0
 8005182:	da04      	bge.n	800518e <_puts_r+0x86>
 8005184:	69a2      	ldr	r2, [r4, #24]
 8005186:	429a      	cmp	r2, r3
 8005188:	dc06      	bgt.n	8005198 <_puts_r+0x90>
 800518a:	290a      	cmp	r1, #10
 800518c:	d004      	beq.n	8005198 <_puts_r+0x90>
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	6022      	str	r2, [r4, #0]
 8005194:	7019      	strb	r1, [r3, #0]
 8005196:	e7cf      	b.n	8005138 <_puts_r+0x30>
 8005198:	4622      	mov	r2, r4
 800519a:	4628      	mov	r0, r5
 800519c:	f000 fefe 	bl	8005f9c <__swbuf_r>
 80051a0:	3001      	adds	r0, #1
 80051a2:	d1c9      	bne.n	8005138 <_puts_r+0x30>
 80051a4:	e7e9      	b.n	800517a <_puts_r+0x72>
 80051a6:	200a      	movs	r0, #10
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	6022      	str	r2, [r4, #0]
 80051ae:	7018      	strb	r0, [r3, #0]
 80051b0:	e7e5      	b.n	800517e <_puts_r+0x76>
 80051b2:	bf00      	nop
 80051b4:	08008a60 	.word	0x08008a60
 80051b8:	08008a80 	.word	0x08008a80
 80051bc:	08008a40 	.word	0x08008a40

080051c0 <puts>:
 80051c0:	4b02      	ldr	r3, [pc, #8]	; (80051cc <puts+0xc>)
 80051c2:	4601      	mov	r1, r0
 80051c4:	6818      	ldr	r0, [r3, #0]
 80051c6:	f7ff bf9f 	b.w	8005108 <_puts_r>
 80051ca:	bf00      	nop
 80051cc:	2000000c 	.word	0x2000000c

080051d0 <nanf>:
 80051d0:	4800      	ldr	r0, [pc, #0]	; (80051d4 <nanf+0x4>)
 80051d2:	4770      	bx	lr
 80051d4:	7fc00000 	.word	0x7fc00000

080051d8 <siprintf>:
 80051d8:	b40e      	push	{r1, r2, r3}
 80051da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051de:	b500      	push	{lr}
 80051e0:	b09c      	sub	sp, #112	; 0x70
 80051e2:	ab1d      	add	r3, sp, #116	; 0x74
 80051e4:	9002      	str	r0, [sp, #8]
 80051e6:	9006      	str	r0, [sp, #24]
 80051e8:	9107      	str	r1, [sp, #28]
 80051ea:	9104      	str	r1, [sp, #16]
 80051ec:	4808      	ldr	r0, [pc, #32]	; (8005210 <siprintf+0x38>)
 80051ee:	4909      	ldr	r1, [pc, #36]	; (8005214 <siprintf+0x3c>)
 80051f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80051f4:	9105      	str	r1, [sp, #20]
 80051f6:	6800      	ldr	r0, [r0, #0]
 80051f8:	a902      	add	r1, sp, #8
 80051fa:	9301      	str	r3, [sp, #4]
 80051fc:	f003 f818 	bl	8008230 <_svfiprintf_r>
 8005200:	2200      	movs	r2, #0
 8005202:	9b02      	ldr	r3, [sp, #8]
 8005204:	701a      	strb	r2, [r3, #0]
 8005206:	b01c      	add	sp, #112	; 0x70
 8005208:	f85d eb04 	ldr.w	lr, [sp], #4
 800520c:	b003      	add	sp, #12
 800520e:	4770      	bx	lr
 8005210:	2000000c 	.word	0x2000000c
 8005214:	ffff0208 	.word	0xffff0208

08005218 <sulp>:
 8005218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800521c:	460f      	mov	r7, r1
 800521e:	4690      	mov	r8, r2
 8005220:	f002 fdca 	bl	8007db8 <__ulp>
 8005224:	4604      	mov	r4, r0
 8005226:	460d      	mov	r5, r1
 8005228:	f1b8 0f00 	cmp.w	r8, #0
 800522c:	d011      	beq.n	8005252 <sulp+0x3a>
 800522e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005232:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005236:	2b00      	cmp	r3, #0
 8005238:	dd0b      	ble.n	8005252 <sulp+0x3a>
 800523a:	2400      	movs	r4, #0
 800523c:	051b      	lsls	r3, r3, #20
 800523e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005242:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005246:	4622      	mov	r2, r4
 8005248:	462b      	mov	r3, r5
 800524a:	f7fb f9b1 	bl	80005b0 <__aeabi_dmul>
 800524e:	4604      	mov	r4, r0
 8005250:	460d      	mov	r5, r1
 8005252:	4620      	mov	r0, r4
 8005254:	4629      	mov	r1, r5
 8005256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800525a:	0000      	movs	r0, r0
 800525c:	0000      	movs	r0, r0
	...

08005260 <_strtod_l>:
 8005260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005264:	461f      	mov	r7, r3
 8005266:	2300      	movs	r3, #0
 8005268:	b0a1      	sub	sp, #132	; 0x84
 800526a:	4683      	mov	fp, r0
 800526c:	4638      	mov	r0, r7
 800526e:	460e      	mov	r6, r1
 8005270:	9217      	str	r2, [sp, #92]	; 0x5c
 8005272:	931c      	str	r3, [sp, #112]	; 0x70
 8005274:	f002 fa39 	bl	80076ea <__localeconv_l>
 8005278:	4680      	mov	r8, r0
 800527a:	6800      	ldr	r0, [r0, #0]
 800527c:	f7fa ffd4 	bl	8000228 <strlen>
 8005280:	f04f 0900 	mov.w	r9, #0
 8005284:	4604      	mov	r4, r0
 8005286:	f04f 0a00 	mov.w	sl, #0
 800528a:	961b      	str	r6, [sp, #108]	; 0x6c
 800528c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800528e:	781a      	ldrb	r2, [r3, #0]
 8005290:	2a0d      	cmp	r2, #13
 8005292:	d832      	bhi.n	80052fa <_strtod_l+0x9a>
 8005294:	2a09      	cmp	r2, #9
 8005296:	d236      	bcs.n	8005306 <_strtod_l+0xa6>
 8005298:	2a00      	cmp	r2, #0
 800529a:	d03e      	beq.n	800531a <_strtod_l+0xba>
 800529c:	2300      	movs	r3, #0
 800529e:	930d      	str	r3, [sp, #52]	; 0x34
 80052a0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80052a2:	782b      	ldrb	r3, [r5, #0]
 80052a4:	2b30      	cmp	r3, #48	; 0x30
 80052a6:	f040 80ac 	bne.w	8005402 <_strtod_l+0x1a2>
 80052aa:	786b      	ldrb	r3, [r5, #1]
 80052ac:	2b58      	cmp	r3, #88	; 0x58
 80052ae:	d001      	beq.n	80052b4 <_strtod_l+0x54>
 80052b0:	2b78      	cmp	r3, #120	; 0x78
 80052b2:	d167      	bne.n	8005384 <_strtod_l+0x124>
 80052b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052b6:	9702      	str	r7, [sp, #8]
 80052b8:	9301      	str	r3, [sp, #4]
 80052ba:	ab1c      	add	r3, sp, #112	; 0x70
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	4a89      	ldr	r2, [pc, #548]	; (80054e4 <_strtod_l+0x284>)
 80052c0:	ab1d      	add	r3, sp, #116	; 0x74
 80052c2:	a91b      	add	r1, sp, #108	; 0x6c
 80052c4:	4658      	mov	r0, fp
 80052c6:	f001 ff35 	bl	8007134 <__gethex>
 80052ca:	f010 0407 	ands.w	r4, r0, #7
 80052ce:	4606      	mov	r6, r0
 80052d0:	d005      	beq.n	80052de <_strtod_l+0x7e>
 80052d2:	2c06      	cmp	r4, #6
 80052d4:	d12b      	bne.n	800532e <_strtod_l+0xce>
 80052d6:	2300      	movs	r3, #0
 80052d8:	3501      	adds	r5, #1
 80052da:	951b      	str	r5, [sp, #108]	; 0x6c
 80052dc:	930d      	str	r3, [sp, #52]	; 0x34
 80052de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f040 85a6 	bne.w	8005e32 <_strtod_l+0xbd2>
 80052e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052e8:	b1e3      	cbz	r3, 8005324 <_strtod_l+0xc4>
 80052ea:	464a      	mov	r2, r9
 80052ec:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80052f0:	4610      	mov	r0, r2
 80052f2:	4619      	mov	r1, r3
 80052f4:	b021      	add	sp, #132	; 0x84
 80052f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052fa:	2a2b      	cmp	r2, #43	; 0x2b
 80052fc:	d015      	beq.n	800532a <_strtod_l+0xca>
 80052fe:	2a2d      	cmp	r2, #45	; 0x2d
 8005300:	d004      	beq.n	800530c <_strtod_l+0xac>
 8005302:	2a20      	cmp	r2, #32
 8005304:	d1ca      	bne.n	800529c <_strtod_l+0x3c>
 8005306:	3301      	adds	r3, #1
 8005308:	931b      	str	r3, [sp, #108]	; 0x6c
 800530a:	e7bf      	b.n	800528c <_strtod_l+0x2c>
 800530c:	2201      	movs	r2, #1
 800530e:	920d      	str	r2, [sp, #52]	; 0x34
 8005310:	1c5a      	adds	r2, r3, #1
 8005312:	921b      	str	r2, [sp, #108]	; 0x6c
 8005314:	785b      	ldrb	r3, [r3, #1]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1c2      	bne.n	80052a0 <_strtod_l+0x40>
 800531a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800531c:	961b      	str	r6, [sp, #108]	; 0x6c
 800531e:	2b00      	cmp	r3, #0
 8005320:	f040 8585 	bne.w	8005e2e <_strtod_l+0xbce>
 8005324:	464a      	mov	r2, r9
 8005326:	4653      	mov	r3, sl
 8005328:	e7e2      	b.n	80052f0 <_strtod_l+0x90>
 800532a:	2200      	movs	r2, #0
 800532c:	e7ef      	b.n	800530e <_strtod_l+0xae>
 800532e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005330:	b13a      	cbz	r2, 8005342 <_strtod_l+0xe2>
 8005332:	2135      	movs	r1, #53	; 0x35
 8005334:	a81e      	add	r0, sp, #120	; 0x78
 8005336:	f002 fe32 	bl	8007f9e <__copybits>
 800533a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800533c:	4658      	mov	r0, fp
 800533e:	f002 faa5 	bl	800788c <_Bfree>
 8005342:	3c01      	subs	r4, #1
 8005344:	2c04      	cmp	r4, #4
 8005346:	d806      	bhi.n	8005356 <_strtod_l+0xf6>
 8005348:	e8df f004 	tbb	[pc, r4]
 800534c:	1714030a 	.word	0x1714030a
 8005350:	0a          	.byte	0x0a
 8005351:	00          	.byte	0x00
 8005352:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8005356:	0731      	lsls	r1, r6, #28
 8005358:	d5c1      	bpl.n	80052de <_strtod_l+0x7e>
 800535a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800535e:	e7be      	b.n	80052de <_strtod_l+0x7e>
 8005360:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005362:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8005366:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800536a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800536e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8005372:	e7f0      	b.n	8005356 <_strtod_l+0xf6>
 8005374:	f8df a170 	ldr.w	sl, [pc, #368]	; 80054e8 <_strtod_l+0x288>
 8005378:	e7ed      	b.n	8005356 <_strtod_l+0xf6>
 800537a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800537e:	f04f 39ff 	mov.w	r9, #4294967295
 8005382:	e7e8      	b.n	8005356 <_strtod_l+0xf6>
 8005384:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	921b      	str	r2, [sp, #108]	; 0x6c
 800538a:	785b      	ldrb	r3, [r3, #1]
 800538c:	2b30      	cmp	r3, #48	; 0x30
 800538e:	d0f9      	beq.n	8005384 <_strtod_l+0x124>
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0a4      	beq.n	80052de <_strtod_l+0x7e>
 8005394:	2301      	movs	r3, #1
 8005396:	2500      	movs	r5, #0
 8005398:	220a      	movs	r2, #10
 800539a:	9307      	str	r3, [sp, #28]
 800539c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800539e:	9506      	str	r5, [sp, #24]
 80053a0:	9308      	str	r3, [sp, #32]
 80053a2:	9504      	str	r5, [sp, #16]
 80053a4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80053a6:	7807      	ldrb	r7, [r0, #0]
 80053a8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80053ac:	b2d9      	uxtb	r1, r3
 80053ae:	2909      	cmp	r1, #9
 80053b0:	d929      	bls.n	8005406 <_strtod_l+0x1a6>
 80053b2:	4622      	mov	r2, r4
 80053b4:	f8d8 1000 	ldr.w	r1, [r8]
 80053b8:	f003 f9c3 	bl	8008742 <strncmp>
 80053bc:	2800      	cmp	r0, #0
 80053be:	d031      	beq.n	8005424 <_strtod_l+0x1c4>
 80053c0:	2000      	movs	r0, #0
 80053c2:	463b      	mov	r3, r7
 80053c4:	4602      	mov	r2, r0
 80053c6:	9c04      	ldr	r4, [sp, #16]
 80053c8:	9005      	str	r0, [sp, #20]
 80053ca:	2b65      	cmp	r3, #101	; 0x65
 80053cc:	d001      	beq.n	80053d2 <_strtod_l+0x172>
 80053ce:	2b45      	cmp	r3, #69	; 0x45
 80053d0:	d114      	bne.n	80053fc <_strtod_l+0x19c>
 80053d2:	b924      	cbnz	r4, 80053de <_strtod_l+0x17e>
 80053d4:	b910      	cbnz	r0, 80053dc <_strtod_l+0x17c>
 80053d6:	9b07      	ldr	r3, [sp, #28]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d09e      	beq.n	800531a <_strtod_l+0xba>
 80053dc:	2400      	movs	r4, #0
 80053de:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80053e0:	1c73      	adds	r3, r6, #1
 80053e2:	931b      	str	r3, [sp, #108]	; 0x6c
 80053e4:	7873      	ldrb	r3, [r6, #1]
 80053e6:	2b2b      	cmp	r3, #43	; 0x2b
 80053e8:	d078      	beq.n	80054dc <_strtod_l+0x27c>
 80053ea:	2b2d      	cmp	r3, #45	; 0x2d
 80053ec:	d070      	beq.n	80054d0 <_strtod_l+0x270>
 80053ee:	f04f 0c00 	mov.w	ip, #0
 80053f2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80053f6:	2f09      	cmp	r7, #9
 80053f8:	d97c      	bls.n	80054f4 <_strtod_l+0x294>
 80053fa:	961b      	str	r6, [sp, #108]	; 0x6c
 80053fc:	f04f 0e00 	mov.w	lr, #0
 8005400:	e09a      	b.n	8005538 <_strtod_l+0x2d8>
 8005402:	2300      	movs	r3, #0
 8005404:	e7c7      	b.n	8005396 <_strtod_l+0x136>
 8005406:	9904      	ldr	r1, [sp, #16]
 8005408:	3001      	adds	r0, #1
 800540a:	2908      	cmp	r1, #8
 800540c:	bfd7      	itett	le
 800540e:	9906      	ldrle	r1, [sp, #24]
 8005410:	fb02 3505 	mlagt	r5, r2, r5, r3
 8005414:	fb02 3301 	mlale	r3, r2, r1, r3
 8005418:	9306      	strle	r3, [sp, #24]
 800541a:	9b04      	ldr	r3, [sp, #16]
 800541c:	901b      	str	r0, [sp, #108]	; 0x6c
 800541e:	3301      	adds	r3, #1
 8005420:	9304      	str	r3, [sp, #16]
 8005422:	e7bf      	b.n	80053a4 <_strtod_l+0x144>
 8005424:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005426:	191a      	adds	r2, r3, r4
 8005428:	921b      	str	r2, [sp, #108]	; 0x6c
 800542a:	9a04      	ldr	r2, [sp, #16]
 800542c:	5d1b      	ldrb	r3, [r3, r4]
 800542e:	2a00      	cmp	r2, #0
 8005430:	d037      	beq.n	80054a2 <_strtod_l+0x242>
 8005432:	4602      	mov	r2, r0
 8005434:	9c04      	ldr	r4, [sp, #16]
 8005436:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800543a:	2909      	cmp	r1, #9
 800543c:	d913      	bls.n	8005466 <_strtod_l+0x206>
 800543e:	2101      	movs	r1, #1
 8005440:	9105      	str	r1, [sp, #20]
 8005442:	e7c2      	b.n	80053ca <_strtod_l+0x16a>
 8005444:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005446:	3001      	adds	r0, #1
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	921b      	str	r2, [sp, #108]	; 0x6c
 800544c:	785b      	ldrb	r3, [r3, #1]
 800544e:	2b30      	cmp	r3, #48	; 0x30
 8005450:	d0f8      	beq.n	8005444 <_strtod_l+0x1e4>
 8005452:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005456:	2a08      	cmp	r2, #8
 8005458:	f200 84f0 	bhi.w	8005e3c <_strtod_l+0xbdc>
 800545c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800545e:	9208      	str	r2, [sp, #32]
 8005460:	4602      	mov	r2, r0
 8005462:	2000      	movs	r0, #0
 8005464:	4604      	mov	r4, r0
 8005466:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800546a:	f100 0101 	add.w	r1, r0, #1
 800546e:	d012      	beq.n	8005496 <_strtod_l+0x236>
 8005470:	440a      	add	r2, r1
 8005472:	270a      	movs	r7, #10
 8005474:	4621      	mov	r1, r4
 8005476:	eb00 0c04 	add.w	ip, r0, r4
 800547a:	458c      	cmp	ip, r1
 800547c:	d113      	bne.n	80054a6 <_strtod_l+0x246>
 800547e:	1821      	adds	r1, r4, r0
 8005480:	2908      	cmp	r1, #8
 8005482:	f104 0401 	add.w	r4, r4, #1
 8005486:	4404      	add	r4, r0
 8005488:	dc19      	bgt.n	80054be <_strtod_l+0x25e>
 800548a:	210a      	movs	r1, #10
 800548c:	9b06      	ldr	r3, [sp, #24]
 800548e:	fb01 e303 	mla	r3, r1, r3, lr
 8005492:	9306      	str	r3, [sp, #24]
 8005494:	2100      	movs	r1, #0
 8005496:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005498:	1c58      	adds	r0, r3, #1
 800549a:	901b      	str	r0, [sp, #108]	; 0x6c
 800549c:	785b      	ldrb	r3, [r3, #1]
 800549e:	4608      	mov	r0, r1
 80054a0:	e7c9      	b.n	8005436 <_strtod_l+0x1d6>
 80054a2:	9804      	ldr	r0, [sp, #16]
 80054a4:	e7d3      	b.n	800544e <_strtod_l+0x1ee>
 80054a6:	2908      	cmp	r1, #8
 80054a8:	f101 0101 	add.w	r1, r1, #1
 80054ac:	dc03      	bgt.n	80054b6 <_strtod_l+0x256>
 80054ae:	9b06      	ldr	r3, [sp, #24]
 80054b0:	437b      	muls	r3, r7
 80054b2:	9306      	str	r3, [sp, #24]
 80054b4:	e7e1      	b.n	800547a <_strtod_l+0x21a>
 80054b6:	2910      	cmp	r1, #16
 80054b8:	bfd8      	it	le
 80054ba:	437d      	mulle	r5, r7
 80054bc:	e7dd      	b.n	800547a <_strtod_l+0x21a>
 80054be:	2c10      	cmp	r4, #16
 80054c0:	bfdc      	itt	le
 80054c2:	210a      	movle	r1, #10
 80054c4:	fb01 e505 	mlale	r5, r1, r5, lr
 80054c8:	e7e4      	b.n	8005494 <_strtod_l+0x234>
 80054ca:	2301      	movs	r3, #1
 80054cc:	9305      	str	r3, [sp, #20]
 80054ce:	e781      	b.n	80053d4 <_strtod_l+0x174>
 80054d0:	f04f 0c01 	mov.w	ip, #1
 80054d4:	1cb3      	adds	r3, r6, #2
 80054d6:	931b      	str	r3, [sp, #108]	; 0x6c
 80054d8:	78b3      	ldrb	r3, [r6, #2]
 80054da:	e78a      	b.n	80053f2 <_strtod_l+0x192>
 80054dc:	f04f 0c00 	mov.w	ip, #0
 80054e0:	e7f8      	b.n	80054d4 <_strtod_l+0x274>
 80054e2:	bf00      	nop
 80054e4:	080089dc 	.word	0x080089dc
 80054e8:	7ff00000 	.word	0x7ff00000
 80054ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80054ee:	1c5f      	adds	r7, r3, #1
 80054f0:	971b      	str	r7, [sp, #108]	; 0x6c
 80054f2:	785b      	ldrb	r3, [r3, #1]
 80054f4:	2b30      	cmp	r3, #48	; 0x30
 80054f6:	d0f9      	beq.n	80054ec <_strtod_l+0x28c>
 80054f8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80054fc:	2f08      	cmp	r7, #8
 80054fe:	f63f af7d 	bhi.w	80053fc <_strtod_l+0x19c>
 8005502:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005506:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005508:	9309      	str	r3, [sp, #36]	; 0x24
 800550a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800550c:	1c5f      	adds	r7, r3, #1
 800550e:	971b      	str	r7, [sp, #108]	; 0x6c
 8005510:	785b      	ldrb	r3, [r3, #1]
 8005512:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8005516:	f1b8 0f09 	cmp.w	r8, #9
 800551a:	d937      	bls.n	800558c <_strtod_l+0x32c>
 800551c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800551e:	1a7f      	subs	r7, r7, r1
 8005520:	2f08      	cmp	r7, #8
 8005522:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005526:	dc37      	bgt.n	8005598 <_strtod_l+0x338>
 8005528:	45be      	cmp	lr, r7
 800552a:	bfa8      	it	ge
 800552c:	46be      	movge	lr, r7
 800552e:	f1bc 0f00 	cmp.w	ip, #0
 8005532:	d001      	beq.n	8005538 <_strtod_l+0x2d8>
 8005534:	f1ce 0e00 	rsb	lr, lr, #0
 8005538:	2c00      	cmp	r4, #0
 800553a:	d151      	bne.n	80055e0 <_strtod_l+0x380>
 800553c:	2800      	cmp	r0, #0
 800553e:	f47f aece 	bne.w	80052de <_strtod_l+0x7e>
 8005542:	9a07      	ldr	r2, [sp, #28]
 8005544:	2a00      	cmp	r2, #0
 8005546:	f47f aeca 	bne.w	80052de <_strtod_l+0x7e>
 800554a:	9a05      	ldr	r2, [sp, #20]
 800554c:	2a00      	cmp	r2, #0
 800554e:	f47f aee4 	bne.w	800531a <_strtod_l+0xba>
 8005552:	2b4e      	cmp	r3, #78	; 0x4e
 8005554:	d027      	beq.n	80055a6 <_strtod_l+0x346>
 8005556:	dc21      	bgt.n	800559c <_strtod_l+0x33c>
 8005558:	2b49      	cmp	r3, #73	; 0x49
 800555a:	f47f aede 	bne.w	800531a <_strtod_l+0xba>
 800555e:	49a4      	ldr	r1, [pc, #656]	; (80057f0 <_strtod_l+0x590>)
 8005560:	a81b      	add	r0, sp, #108	; 0x6c
 8005562:	f002 f81b 	bl	800759c <__match>
 8005566:	2800      	cmp	r0, #0
 8005568:	f43f aed7 	beq.w	800531a <_strtod_l+0xba>
 800556c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800556e:	49a1      	ldr	r1, [pc, #644]	; (80057f4 <_strtod_l+0x594>)
 8005570:	3b01      	subs	r3, #1
 8005572:	a81b      	add	r0, sp, #108	; 0x6c
 8005574:	931b      	str	r3, [sp, #108]	; 0x6c
 8005576:	f002 f811 	bl	800759c <__match>
 800557a:	b910      	cbnz	r0, 8005582 <_strtod_l+0x322>
 800557c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800557e:	3301      	adds	r3, #1
 8005580:	931b      	str	r3, [sp, #108]	; 0x6c
 8005582:	f8df a284 	ldr.w	sl, [pc, #644]	; 8005808 <_strtod_l+0x5a8>
 8005586:	f04f 0900 	mov.w	r9, #0
 800558a:	e6a8      	b.n	80052de <_strtod_l+0x7e>
 800558c:	210a      	movs	r1, #10
 800558e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005592:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005596:	e7b8      	b.n	800550a <_strtod_l+0x2aa>
 8005598:	46be      	mov	lr, r7
 800559a:	e7c8      	b.n	800552e <_strtod_l+0x2ce>
 800559c:	2b69      	cmp	r3, #105	; 0x69
 800559e:	d0de      	beq.n	800555e <_strtod_l+0x2fe>
 80055a0:	2b6e      	cmp	r3, #110	; 0x6e
 80055a2:	f47f aeba 	bne.w	800531a <_strtod_l+0xba>
 80055a6:	4994      	ldr	r1, [pc, #592]	; (80057f8 <_strtod_l+0x598>)
 80055a8:	a81b      	add	r0, sp, #108	; 0x6c
 80055aa:	f001 fff7 	bl	800759c <__match>
 80055ae:	2800      	cmp	r0, #0
 80055b0:	f43f aeb3 	beq.w	800531a <_strtod_l+0xba>
 80055b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b28      	cmp	r3, #40	; 0x28
 80055ba:	d10e      	bne.n	80055da <_strtod_l+0x37a>
 80055bc:	aa1e      	add	r2, sp, #120	; 0x78
 80055be:	498f      	ldr	r1, [pc, #572]	; (80057fc <_strtod_l+0x59c>)
 80055c0:	a81b      	add	r0, sp, #108	; 0x6c
 80055c2:	f001 ffff 	bl	80075c4 <__hexnan>
 80055c6:	2805      	cmp	r0, #5
 80055c8:	d107      	bne.n	80055da <_strtod_l+0x37a>
 80055ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80055cc:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80055d0:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80055d4:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80055d8:	e681      	b.n	80052de <_strtod_l+0x7e>
 80055da:	f8df a234 	ldr.w	sl, [pc, #564]	; 8005810 <_strtod_l+0x5b0>
 80055de:	e7d2      	b.n	8005586 <_strtod_l+0x326>
 80055e0:	ebae 0302 	sub.w	r3, lr, r2
 80055e4:	9307      	str	r3, [sp, #28]
 80055e6:	9b04      	ldr	r3, [sp, #16]
 80055e8:	9806      	ldr	r0, [sp, #24]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	bf08      	it	eq
 80055ee:	4623      	moveq	r3, r4
 80055f0:	2c10      	cmp	r4, #16
 80055f2:	9304      	str	r3, [sp, #16]
 80055f4:	46a0      	mov	r8, r4
 80055f6:	bfa8      	it	ge
 80055f8:	f04f 0810 	movge.w	r8, #16
 80055fc:	f7fa ff5e 	bl	80004bc <__aeabi_ui2d>
 8005600:	2c09      	cmp	r4, #9
 8005602:	4681      	mov	r9, r0
 8005604:	468a      	mov	sl, r1
 8005606:	dc13      	bgt.n	8005630 <_strtod_l+0x3d0>
 8005608:	9b07      	ldr	r3, [sp, #28]
 800560a:	2b00      	cmp	r3, #0
 800560c:	f43f ae67 	beq.w	80052de <_strtod_l+0x7e>
 8005610:	9b07      	ldr	r3, [sp, #28]
 8005612:	dd7e      	ble.n	8005712 <_strtod_l+0x4b2>
 8005614:	2b16      	cmp	r3, #22
 8005616:	dc65      	bgt.n	80056e4 <_strtod_l+0x484>
 8005618:	4a79      	ldr	r2, [pc, #484]	; (8005800 <_strtod_l+0x5a0>)
 800561a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800561e:	464a      	mov	r2, r9
 8005620:	e9de 0100 	ldrd	r0, r1, [lr]
 8005624:	4653      	mov	r3, sl
 8005626:	f7fa ffc3 	bl	80005b0 <__aeabi_dmul>
 800562a:	4681      	mov	r9, r0
 800562c:	468a      	mov	sl, r1
 800562e:	e656      	b.n	80052de <_strtod_l+0x7e>
 8005630:	4b73      	ldr	r3, [pc, #460]	; (8005800 <_strtod_l+0x5a0>)
 8005632:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005636:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800563a:	f7fa ffb9 	bl	80005b0 <__aeabi_dmul>
 800563e:	4606      	mov	r6, r0
 8005640:	4628      	mov	r0, r5
 8005642:	460f      	mov	r7, r1
 8005644:	f7fa ff3a 	bl	80004bc <__aeabi_ui2d>
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	4630      	mov	r0, r6
 800564e:	4639      	mov	r1, r7
 8005650:	f7fa fdf8 	bl	8000244 <__adddf3>
 8005654:	2c0f      	cmp	r4, #15
 8005656:	4681      	mov	r9, r0
 8005658:	468a      	mov	sl, r1
 800565a:	ddd5      	ble.n	8005608 <_strtod_l+0x3a8>
 800565c:	9b07      	ldr	r3, [sp, #28]
 800565e:	eba4 0808 	sub.w	r8, r4, r8
 8005662:	4498      	add	r8, r3
 8005664:	f1b8 0f00 	cmp.w	r8, #0
 8005668:	f340 809a 	ble.w	80057a0 <_strtod_l+0x540>
 800566c:	f018 030f 	ands.w	r3, r8, #15
 8005670:	d00a      	beq.n	8005688 <_strtod_l+0x428>
 8005672:	4963      	ldr	r1, [pc, #396]	; (8005800 <_strtod_l+0x5a0>)
 8005674:	464a      	mov	r2, r9
 8005676:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800567a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800567e:	4653      	mov	r3, sl
 8005680:	f7fa ff96 	bl	80005b0 <__aeabi_dmul>
 8005684:	4681      	mov	r9, r0
 8005686:	468a      	mov	sl, r1
 8005688:	f038 080f 	bics.w	r8, r8, #15
 800568c:	d077      	beq.n	800577e <_strtod_l+0x51e>
 800568e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005692:	dd4b      	ble.n	800572c <_strtod_l+0x4cc>
 8005694:	f04f 0800 	mov.w	r8, #0
 8005698:	f8cd 8010 	str.w	r8, [sp, #16]
 800569c:	f8cd 8020 	str.w	r8, [sp, #32]
 80056a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80056a4:	2322      	movs	r3, #34	; 0x22
 80056a6:	f04f 0900 	mov.w	r9, #0
 80056aa:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8005808 <_strtod_l+0x5a8>
 80056ae:	f8cb 3000 	str.w	r3, [fp]
 80056b2:	9b08      	ldr	r3, [sp, #32]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f43f ae12 	beq.w	80052de <_strtod_l+0x7e>
 80056ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 80056bc:	4658      	mov	r0, fp
 80056be:	f002 f8e5 	bl	800788c <_Bfree>
 80056c2:	9906      	ldr	r1, [sp, #24]
 80056c4:	4658      	mov	r0, fp
 80056c6:	f002 f8e1 	bl	800788c <_Bfree>
 80056ca:	9904      	ldr	r1, [sp, #16]
 80056cc:	4658      	mov	r0, fp
 80056ce:	f002 f8dd 	bl	800788c <_Bfree>
 80056d2:	9908      	ldr	r1, [sp, #32]
 80056d4:	4658      	mov	r0, fp
 80056d6:	f002 f8d9 	bl	800788c <_Bfree>
 80056da:	4641      	mov	r1, r8
 80056dc:	4658      	mov	r0, fp
 80056de:	f002 f8d5 	bl	800788c <_Bfree>
 80056e2:	e5fc      	b.n	80052de <_strtod_l+0x7e>
 80056e4:	9a07      	ldr	r2, [sp, #28]
 80056e6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80056ea:	4293      	cmp	r3, r2
 80056ec:	dbb6      	blt.n	800565c <_strtod_l+0x3fc>
 80056ee:	4d44      	ldr	r5, [pc, #272]	; (8005800 <_strtod_l+0x5a0>)
 80056f0:	f1c4 040f 	rsb	r4, r4, #15
 80056f4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80056f8:	464a      	mov	r2, r9
 80056fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056fe:	4653      	mov	r3, sl
 8005700:	f7fa ff56 	bl	80005b0 <__aeabi_dmul>
 8005704:	9b07      	ldr	r3, [sp, #28]
 8005706:	1b1c      	subs	r4, r3, r4
 8005708:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800570c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005710:	e789      	b.n	8005626 <_strtod_l+0x3c6>
 8005712:	f113 0f16 	cmn.w	r3, #22
 8005716:	dba1      	blt.n	800565c <_strtod_l+0x3fc>
 8005718:	4a39      	ldr	r2, [pc, #228]	; (8005800 <_strtod_l+0x5a0>)
 800571a:	4648      	mov	r0, r9
 800571c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005720:	e9d2 2300 	ldrd	r2, r3, [r2]
 8005724:	4651      	mov	r1, sl
 8005726:	f7fb f86d 	bl	8000804 <__aeabi_ddiv>
 800572a:	e77e      	b.n	800562a <_strtod_l+0x3ca>
 800572c:	2300      	movs	r3, #0
 800572e:	4648      	mov	r0, r9
 8005730:	4651      	mov	r1, sl
 8005732:	461d      	mov	r5, r3
 8005734:	4e33      	ldr	r6, [pc, #204]	; (8005804 <_strtod_l+0x5a4>)
 8005736:	ea4f 1828 	mov.w	r8, r8, asr #4
 800573a:	f1b8 0f01 	cmp.w	r8, #1
 800573e:	dc21      	bgt.n	8005784 <_strtod_l+0x524>
 8005740:	b10b      	cbz	r3, 8005746 <_strtod_l+0x4e6>
 8005742:	4681      	mov	r9, r0
 8005744:	468a      	mov	sl, r1
 8005746:	4b2f      	ldr	r3, [pc, #188]	; (8005804 <_strtod_l+0x5a4>)
 8005748:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800574c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005750:	464a      	mov	r2, r9
 8005752:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005756:	4653      	mov	r3, sl
 8005758:	f7fa ff2a 	bl	80005b0 <__aeabi_dmul>
 800575c:	4b2a      	ldr	r3, [pc, #168]	; (8005808 <_strtod_l+0x5a8>)
 800575e:	460a      	mov	r2, r1
 8005760:	400b      	ands	r3, r1
 8005762:	492a      	ldr	r1, [pc, #168]	; (800580c <_strtod_l+0x5ac>)
 8005764:	4681      	mov	r9, r0
 8005766:	428b      	cmp	r3, r1
 8005768:	d894      	bhi.n	8005694 <_strtod_l+0x434>
 800576a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800576e:	428b      	cmp	r3, r1
 8005770:	bf86      	itte	hi
 8005772:	f04f 39ff 	movhi.w	r9, #4294967295
 8005776:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8005814 <_strtod_l+0x5b4>
 800577a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800577e:	2300      	movs	r3, #0
 8005780:	9305      	str	r3, [sp, #20]
 8005782:	e07b      	b.n	800587c <_strtod_l+0x61c>
 8005784:	f018 0f01 	tst.w	r8, #1
 8005788:	d006      	beq.n	8005798 <_strtod_l+0x538>
 800578a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005792:	f7fa ff0d 	bl	80005b0 <__aeabi_dmul>
 8005796:	2301      	movs	r3, #1
 8005798:	3501      	adds	r5, #1
 800579a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800579e:	e7cc      	b.n	800573a <_strtod_l+0x4da>
 80057a0:	d0ed      	beq.n	800577e <_strtod_l+0x51e>
 80057a2:	f1c8 0800 	rsb	r8, r8, #0
 80057a6:	f018 020f 	ands.w	r2, r8, #15
 80057aa:	d00a      	beq.n	80057c2 <_strtod_l+0x562>
 80057ac:	4b14      	ldr	r3, [pc, #80]	; (8005800 <_strtod_l+0x5a0>)
 80057ae:	4648      	mov	r0, r9
 80057b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057b4:	4651      	mov	r1, sl
 80057b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ba:	f7fb f823 	bl	8000804 <__aeabi_ddiv>
 80057be:	4681      	mov	r9, r0
 80057c0:	468a      	mov	sl, r1
 80057c2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80057c6:	d0da      	beq.n	800577e <_strtod_l+0x51e>
 80057c8:	f1b8 0f1f 	cmp.w	r8, #31
 80057cc:	dd24      	ble.n	8005818 <_strtod_l+0x5b8>
 80057ce:	f04f 0800 	mov.w	r8, #0
 80057d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80057d6:	f8cd 8020 	str.w	r8, [sp, #32]
 80057da:	f8cd 8018 	str.w	r8, [sp, #24]
 80057de:	2322      	movs	r3, #34	; 0x22
 80057e0:	f04f 0900 	mov.w	r9, #0
 80057e4:	f04f 0a00 	mov.w	sl, #0
 80057e8:	f8cb 3000 	str.w	r3, [fp]
 80057ec:	e761      	b.n	80056b2 <_strtod_l+0x452>
 80057ee:	bf00      	nop
 80057f0:	080089a5 	.word	0x080089a5
 80057f4:	08008a33 	.word	0x08008a33
 80057f8:	080089ad 	.word	0x080089ad
 80057fc:	080089f0 	.word	0x080089f0
 8005800:	08008ad8 	.word	0x08008ad8
 8005804:	08008ab0 	.word	0x08008ab0
 8005808:	7ff00000 	.word	0x7ff00000
 800580c:	7ca00000 	.word	0x7ca00000
 8005810:	fff80000 	.word	0xfff80000
 8005814:	7fefffff 	.word	0x7fefffff
 8005818:	f018 0310 	ands.w	r3, r8, #16
 800581c:	bf18      	it	ne
 800581e:	236a      	movne	r3, #106	; 0x6a
 8005820:	4648      	mov	r0, r9
 8005822:	9305      	str	r3, [sp, #20]
 8005824:	4651      	mov	r1, sl
 8005826:	2300      	movs	r3, #0
 8005828:	4da1      	ldr	r5, [pc, #644]	; (8005ab0 <_strtod_l+0x850>)
 800582a:	f1b8 0f00 	cmp.w	r8, #0
 800582e:	f300 8113 	bgt.w	8005a58 <_strtod_l+0x7f8>
 8005832:	b10b      	cbz	r3, 8005838 <_strtod_l+0x5d8>
 8005834:	4681      	mov	r9, r0
 8005836:	468a      	mov	sl, r1
 8005838:	9b05      	ldr	r3, [sp, #20]
 800583a:	b1bb      	cbz	r3, 800586c <_strtod_l+0x60c>
 800583c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8005840:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005844:	2b00      	cmp	r3, #0
 8005846:	4651      	mov	r1, sl
 8005848:	dd10      	ble.n	800586c <_strtod_l+0x60c>
 800584a:	2b1f      	cmp	r3, #31
 800584c:	f340 8110 	ble.w	8005a70 <_strtod_l+0x810>
 8005850:	2b34      	cmp	r3, #52	; 0x34
 8005852:	bfd8      	it	le
 8005854:	f04f 32ff 	movle.w	r2, #4294967295
 8005858:	f04f 0900 	mov.w	r9, #0
 800585c:	bfcf      	iteee	gt
 800585e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8005862:	3b20      	suble	r3, #32
 8005864:	fa02 f303 	lslle.w	r3, r2, r3
 8005868:	ea03 0a01 	andle.w	sl, r3, r1
 800586c:	2200      	movs	r2, #0
 800586e:	2300      	movs	r3, #0
 8005870:	4648      	mov	r0, r9
 8005872:	4651      	mov	r1, sl
 8005874:	f7fb f904 	bl	8000a80 <__aeabi_dcmpeq>
 8005878:	2800      	cmp	r0, #0
 800587a:	d1a8      	bne.n	80057ce <_strtod_l+0x56e>
 800587c:	9b06      	ldr	r3, [sp, #24]
 800587e:	9a04      	ldr	r2, [sp, #16]
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	9908      	ldr	r1, [sp, #32]
 8005884:	4623      	mov	r3, r4
 8005886:	4658      	mov	r0, fp
 8005888:	f002 f852 	bl	8007930 <__s2b>
 800588c:	9008      	str	r0, [sp, #32]
 800588e:	2800      	cmp	r0, #0
 8005890:	f43f af00 	beq.w	8005694 <_strtod_l+0x434>
 8005894:	9a07      	ldr	r2, [sp, #28]
 8005896:	9b07      	ldr	r3, [sp, #28]
 8005898:	2a00      	cmp	r2, #0
 800589a:	f1c3 0300 	rsb	r3, r3, #0
 800589e:	bfa8      	it	ge
 80058a0:	2300      	movge	r3, #0
 80058a2:	f04f 0800 	mov.w	r8, #0
 80058a6:	930e      	str	r3, [sp, #56]	; 0x38
 80058a8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80058ac:	9316      	str	r3, [sp, #88]	; 0x58
 80058ae:	f8cd 8010 	str.w	r8, [sp, #16]
 80058b2:	9b08      	ldr	r3, [sp, #32]
 80058b4:	4658      	mov	r0, fp
 80058b6:	6859      	ldr	r1, [r3, #4]
 80058b8:	f001 ffb4 	bl	8007824 <_Balloc>
 80058bc:	9006      	str	r0, [sp, #24]
 80058be:	2800      	cmp	r0, #0
 80058c0:	f43f aef0 	beq.w	80056a4 <_strtod_l+0x444>
 80058c4:	9b08      	ldr	r3, [sp, #32]
 80058c6:	300c      	adds	r0, #12
 80058c8:	691a      	ldr	r2, [r3, #16]
 80058ca:	f103 010c 	add.w	r1, r3, #12
 80058ce:	3202      	adds	r2, #2
 80058d0:	0092      	lsls	r2, r2, #2
 80058d2:	f7fe fdbf 	bl	8004454 <memcpy>
 80058d6:	ab1e      	add	r3, sp, #120	; 0x78
 80058d8:	9301      	str	r3, [sp, #4]
 80058da:	ab1d      	add	r3, sp, #116	; 0x74
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	464a      	mov	r2, r9
 80058e0:	4653      	mov	r3, sl
 80058e2:	4658      	mov	r0, fp
 80058e4:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80058e8:	f002 fadc 	bl	8007ea4 <__d2b>
 80058ec:	901c      	str	r0, [sp, #112]	; 0x70
 80058ee:	2800      	cmp	r0, #0
 80058f0:	f43f aed8 	beq.w	80056a4 <_strtod_l+0x444>
 80058f4:	2101      	movs	r1, #1
 80058f6:	4658      	mov	r0, fp
 80058f8:	f002 f8a6 	bl	8007a48 <__i2b>
 80058fc:	9004      	str	r0, [sp, #16]
 80058fe:	4603      	mov	r3, r0
 8005900:	2800      	cmp	r0, #0
 8005902:	f43f aecf 	beq.w	80056a4 <_strtod_l+0x444>
 8005906:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005908:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800590a:	2d00      	cmp	r5, #0
 800590c:	bfab      	itete	ge
 800590e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005910:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005912:	18ee      	addge	r6, r5, r3
 8005914:	1b5c      	sublt	r4, r3, r5
 8005916:	9b05      	ldr	r3, [sp, #20]
 8005918:	bfa8      	it	ge
 800591a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800591c:	eba5 0503 	sub.w	r5, r5, r3
 8005920:	4415      	add	r5, r2
 8005922:	4b64      	ldr	r3, [pc, #400]	; (8005ab4 <_strtod_l+0x854>)
 8005924:	f105 35ff 	add.w	r5, r5, #4294967295
 8005928:	bfb8      	it	lt
 800592a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800592c:	429d      	cmp	r5, r3
 800592e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005932:	f280 80af 	bge.w	8005a94 <_strtod_l+0x834>
 8005936:	1b5b      	subs	r3, r3, r5
 8005938:	2b1f      	cmp	r3, #31
 800593a:	eba2 0203 	sub.w	r2, r2, r3
 800593e:	f04f 0701 	mov.w	r7, #1
 8005942:	f300 809c 	bgt.w	8005a7e <_strtod_l+0x81e>
 8005946:	2500      	movs	r5, #0
 8005948:	fa07 f303 	lsl.w	r3, r7, r3
 800594c:	930f      	str	r3, [sp, #60]	; 0x3c
 800594e:	18b7      	adds	r7, r6, r2
 8005950:	9b05      	ldr	r3, [sp, #20]
 8005952:	42be      	cmp	r6, r7
 8005954:	4414      	add	r4, r2
 8005956:	441c      	add	r4, r3
 8005958:	4633      	mov	r3, r6
 800595a:	bfa8      	it	ge
 800595c:	463b      	movge	r3, r7
 800595e:	42a3      	cmp	r3, r4
 8005960:	bfa8      	it	ge
 8005962:	4623      	movge	r3, r4
 8005964:	2b00      	cmp	r3, #0
 8005966:	bfc2      	ittt	gt
 8005968:	1aff      	subgt	r7, r7, r3
 800596a:	1ae4      	subgt	r4, r4, r3
 800596c:	1af6      	subgt	r6, r6, r3
 800596e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005970:	b1bb      	cbz	r3, 80059a2 <_strtod_l+0x742>
 8005972:	461a      	mov	r2, r3
 8005974:	9904      	ldr	r1, [sp, #16]
 8005976:	4658      	mov	r0, fp
 8005978:	f002 f904 	bl	8007b84 <__pow5mult>
 800597c:	9004      	str	r0, [sp, #16]
 800597e:	2800      	cmp	r0, #0
 8005980:	f43f ae90 	beq.w	80056a4 <_strtod_l+0x444>
 8005984:	4601      	mov	r1, r0
 8005986:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005988:	4658      	mov	r0, fp
 800598a:	f002 f866 	bl	8007a5a <__multiply>
 800598e:	9009      	str	r0, [sp, #36]	; 0x24
 8005990:	2800      	cmp	r0, #0
 8005992:	f43f ae87 	beq.w	80056a4 <_strtod_l+0x444>
 8005996:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005998:	4658      	mov	r0, fp
 800599a:	f001 ff77 	bl	800788c <_Bfree>
 800599e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059a0:	931c      	str	r3, [sp, #112]	; 0x70
 80059a2:	2f00      	cmp	r7, #0
 80059a4:	dc7a      	bgt.n	8005a9c <_strtod_l+0x83c>
 80059a6:	9b07      	ldr	r3, [sp, #28]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	dd08      	ble.n	80059be <_strtod_l+0x75e>
 80059ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80059ae:	9906      	ldr	r1, [sp, #24]
 80059b0:	4658      	mov	r0, fp
 80059b2:	f002 f8e7 	bl	8007b84 <__pow5mult>
 80059b6:	9006      	str	r0, [sp, #24]
 80059b8:	2800      	cmp	r0, #0
 80059ba:	f43f ae73 	beq.w	80056a4 <_strtod_l+0x444>
 80059be:	2c00      	cmp	r4, #0
 80059c0:	dd08      	ble.n	80059d4 <_strtod_l+0x774>
 80059c2:	4622      	mov	r2, r4
 80059c4:	9906      	ldr	r1, [sp, #24]
 80059c6:	4658      	mov	r0, fp
 80059c8:	f002 f92a 	bl	8007c20 <__lshift>
 80059cc:	9006      	str	r0, [sp, #24]
 80059ce:	2800      	cmp	r0, #0
 80059d0:	f43f ae68 	beq.w	80056a4 <_strtod_l+0x444>
 80059d4:	2e00      	cmp	r6, #0
 80059d6:	dd08      	ble.n	80059ea <_strtod_l+0x78a>
 80059d8:	4632      	mov	r2, r6
 80059da:	9904      	ldr	r1, [sp, #16]
 80059dc:	4658      	mov	r0, fp
 80059de:	f002 f91f 	bl	8007c20 <__lshift>
 80059e2:	9004      	str	r0, [sp, #16]
 80059e4:	2800      	cmp	r0, #0
 80059e6:	f43f ae5d 	beq.w	80056a4 <_strtod_l+0x444>
 80059ea:	9a06      	ldr	r2, [sp, #24]
 80059ec:	991c      	ldr	r1, [sp, #112]	; 0x70
 80059ee:	4658      	mov	r0, fp
 80059f0:	f002 f984 	bl	8007cfc <__mdiff>
 80059f4:	4680      	mov	r8, r0
 80059f6:	2800      	cmp	r0, #0
 80059f8:	f43f ae54 	beq.w	80056a4 <_strtod_l+0x444>
 80059fc:	2400      	movs	r4, #0
 80059fe:	68c3      	ldr	r3, [r0, #12]
 8005a00:	9904      	ldr	r1, [sp, #16]
 8005a02:	60c4      	str	r4, [r0, #12]
 8005a04:	930c      	str	r3, [sp, #48]	; 0x30
 8005a06:	f002 f95f 	bl	8007cc8 <__mcmp>
 8005a0a:	42a0      	cmp	r0, r4
 8005a0c:	da54      	bge.n	8005ab8 <_strtod_l+0x858>
 8005a0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a10:	b9f3      	cbnz	r3, 8005a50 <_strtod_l+0x7f0>
 8005a12:	f1b9 0f00 	cmp.w	r9, #0
 8005a16:	d11b      	bne.n	8005a50 <_strtod_l+0x7f0>
 8005a18:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005a1c:	b9c3      	cbnz	r3, 8005a50 <_strtod_l+0x7f0>
 8005a1e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005a22:	0d1b      	lsrs	r3, r3, #20
 8005a24:	051b      	lsls	r3, r3, #20
 8005a26:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005a2a:	d911      	bls.n	8005a50 <_strtod_l+0x7f0>
 8005a2c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005a30:	b91b      	cbnz	r3, 8005a3a <_strtod_l+0x7da>
 8005a32:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	dd0a      	ble.n	8005a50 <_strtod_l+0x7f0>
 8005a3a:	4641      	mov	r1, r8
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	4658      	mov	r0, fp
 8005a40:	f002 f8ee 	bl	8007c20 <__lshift>
 8005a44:	9904      	ldr	r1, [sp, #16]
 8005a46:	4680      	mov	r8, r0
 8005a48:	f002 f93e 	bl	8007cc8 <__mcmp>
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	dc68      	bgt.n	8005b22 <_strtod_l+0x8c2>
 8005a50:	9b05      	ldr	r3, [sp, #20]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d172      	bne.n	8005b3c <_strtod_l+0x8dc>
 8005a56:	e630      	b.n	80056ba <_strtod_l+0x45a>
 8005a58:	f018 0f01 	tst.w	r8, #1
 8005a5c:	d004      	beq.n	8005a68 <_strtod_l+0x808>
 8005a5e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a62:	f7fa fda5 	bl	80005b0 <__aeabi_dmul>
 8005a66:	2301      	movs	r3, #1
 8005a68:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005a6c:	3508      	adds	r5, #8
 8005a6e:	e6dc      	b.n	800582a <_strtod_l+0x5ca>
 8005a70:	f04f 32ff 	mov.w	r2, #4294967295
 8005a74:	fa02 f303 	lsl.w	r3, r2, r3
 8005a78:	ea03 0909 	and.w	r9, r3, r9
 8005a7c:	e6f6      	b.n	800586c <_strtod_l+0x60c>
 8005a7e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005a82:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005a86:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005a8a:	35e2      	adds	r5, #226	; 0xe2
 8005a8c:	fa07 f505 	lsl.w	r5, r7, r5
 8005a90:	970f      	str	r7, [sp, #60]	; 0x3c
 8005a92:	e75c      	b.n	800594e <_strtod_l+0x6ee>
 8005a94:	2301      	movs	r3, #1
 8005a96:	2500      	movs	r5, #0
 8005a98:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a9a:	e758      	b.n	800594e <_strtod_l+0x6ee>
 8005a9c:	463a      	mov	r2, r7
 8005a9e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005aa0:	4658      	mov	r0, fp
 8005aa2:	f002 f8bd 	bl	8007c20 <__lshift>
 8005aa6:	901c      	str	r0, [sp, #112]	; 0x70
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	f47f af7c 	bne.w	80059a6 <_strtod_l+0x746>
 8005aae:	e5f9      	b.n	80056a4 <_strtod_l+0x444>
 8005ab0:	08008a08 	.word	0x08008a08
 8005ab4:	fffffc02 	.word	0xfffffc02
 8005ab8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005abc:	f040 8089 	bne.w	8005bd2 <_strtod_l+0x972>
 8005ac0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ac2:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005ac6:	b342      	cbz	r2, 8005b1a <_strtod_l+0x8ba>
 8005ac8:	4aaf      	ldr	r2, [pc, #700]	; (8005d88 <_strtod_l+0xb28>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d156      	bne.n	8005b7c <_strtod_l+0x91c>
 8005ace:	9b05      	ldr	r3, [sp, #20]
 8005ad0:	4648      	mov	r0, r9
 8005ad2:	b1eb      	cbz	r3, 8005b10 <_strtod_l+0x8b0>
 8005ad4:	4653      	mov	r3, sl
 8005ad6:	4aad      	ldr	r2, [pc, #692]	; (8005d8c <_strtod_l+0xb2c>)
 8005ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8005adc:	401a      	ands	r2, r3
 8005ade:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005ae2:	d818      	bhi.n	8005b16 <_strtod_l+0x8b6>
 8005ae4:	0d12      	lsrs	r2, r2, #20
 8005ae6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005aea:	fa01 f303 	lsl.w	r3, r1, r3
 8005aee:	4298      	cmp	r0, r3
 8005af0:	d144      	bne.n	8005b7c <_strtod_l+0x91c>
 8005af2:	4ba7      	ldr	r3, [pc, #668]	; (8005d90 <_strtod_l+0xb30>)
 8005af4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d102      	bne.n	8005b00 <_strtod_l+0x8a0>
 8005afa:	3001      	adds	r0, #1
 8005afc:	f43f add2 	beq.w	80056a4 <_strtod_l+0x444>
 8005b00:	4ba2      	ldr	r3, [pc, #648]	; (8005d8c <_strtod_l+0xb2c>)
 8005b02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b04:	f04f 0900 	mov.w	r9, #0
 8005b08:	401a      	ands	r2, r3
 8005b0a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8005b0e:	e79f      	b.n	8005a50 <_strtod_l+0x7f0>
 8005b10:	f04f 33ff 	mov.w	r3, #4294967295
 8005b14:	e7eb      	b.n	8005aee <_strtod_l+0x88e>
 8005b16:	460b      	mov	r3, r1
 8005b18:	e7e9      	b.n	8005aee <_strtod_l+0x88e>
 8005b1a:	bb7b      	cbnz	r3, 8005b7c <_strtod_l+0x91c>
 8005b1c:	f1b9 0f00 	cmp.w	r9, #0
 8005b20:	d12c      	bne.n	8005b7c <_strtod_l+0x91c>
 8005b22:	9905      	ldr	r1, [sp, #20]
 8005b24:	4653      	mov	r3, sl
 8005b26:	4a99      	ldr	r2, [pc, #612]	; (8005d8c <_strtod_l+0xb2c>)
 8005b28:	b1f1      	cbz	r1, 8005b68 <_strtod_l+0x908>
 8005b2a:	ea02 010a 	and.w	r1, r2, sl
 8005b2e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005b32:	dc19      	bgt.n	8005b68 <_strtod_l+0x908>
 8005b34:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005b38:	f77f ae51 	ble.w	80057de <_strtod_l+0x57e>
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	4a95      	ldr	r2, [pc, #596]	; (8005d94 <_strtod_l+0xb34>)
 8005b40:	4648      	mov	r0, r9
 8005b42:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005b46:	4651      	mov	r1, sl
 8005b48:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005b4c:	f7fa fd30 	bl	80005b0 <__aeabi_dmul>
 8005b50:	4681      	mov	r9, r0
 8005b52:	468a      	mov	sl, r1
 8005b54:	2900      	cmp	r1, #0
 8005b56:	f47f adb0 	bne.w	80056ba <_strtod_l+0x45a>
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	f47f adad 	bne.w	80056ba <_strtod_l+0x45a>
 8005b60:	2322      	movs	r3, #34	; 0x22
 8005b62:	f8cb 3000 	str.w	r3, [fp]
 8005b66:	e5a8      	b.n	80056ba <_strtod_l+0x45a>
 8005b68:	4013      	ands	r3, r2
 8005b6a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005b6e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8005b72:	f04f 39ff 	mov.w	r9, #4294967295
 8005b76:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8005b7a:	e769      	b.n	8005a50 <_strtod_l+0x7f0>
 8005b7c:	b19d      	cbz	r5, 8005ba6 <_strtod_l+0x946>
 8005b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b80:	421d      	tst	r5, r3
 8005b82:	f43f af65 	beq.w	8005a50 <_strtod_l+0x7f0>
 8005b86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b88:	9a05      	ldr	r2, [sp, #20]
 8005b8a:	4648      	mov	r0, r9
 8005b8c:	4651      	mov	r1, sl
 8005b8e:	b173      	cbz	r3, 8005bae <_strtod_l+0x94e>
 8005b90:	f7ff fb42 	bl	8005218 <sulp>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b9c:	f7fa fb52 	bl	8000244 <__adddf3>
 8005ba0:	4681      	mov	r9, r0
 8005ba2:	468a      	mov	sl, r1
 8005ba4:	e754      	b.n	8005a50 <_strtod_l+0x7f0>
 8005ba6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ba8:	ea13 0f09 	tst.w	r3, r9
 8005bac:	e7e9      	b.n	8005b82 <_strtod_l+0x922>
 8005bae:	f7ff fb33 	bl	8005218 <sulp>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005bba:	f7fa fb41 	bl	8000240 <__aeabi_dsub>
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	4681      	mov	r9, r0
 8005bc4:	468a      	mov	sl, r1
 8005bc6:	f7fa ff5b 	bl	8000a80 <__aeabi_dcmpeq>
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	f47f ae07 	bne.w	80057de <_strtod_l+0x57e>
 8005bd0:	e73e      	b.n	8005a50 <_strtod_l+0x7f0>
 8005bd2:	9904      	ldr	r1, [sp, #16]
 8005bd4:	4640      	mov	r0, r8
 8005bd6:	f002 f9b4 	bl	8007f42 <__ratio>
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005be0:	4606      	mov	r6, r0
 8005be2:	460f      	mov	r7, r1
 8005be4:	f7fa ff60 	bl	8000aa8 <__aeabi_dcmple>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	d075      	beq.n	8005cd8 <_strtod_l+0xa78>
 8005bec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d047      	beq.n	8005c82 <_strtod_l+0xa22>
 8005bf2:	2600      	movs	r6, #0
 8005bf4:	4f68      	ldr	r7, [pc, #416]	; (8005d98 <_strtod_l+0xb38>)
 8005bf6:	4d68      	ldr	r5, [pc, #416]	; (8005d98 <_strtod_l+0xb38>)
 8005bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bfe:	0d1b      	lsrs	r3, r3, #20
 8005c00:	051b      	lsls	r3, r3, #20
 8005c02:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c06:	4b65      	ldr	r3, [pc, #404]	; (8005d9c <_strtod_l+0xb3c>)
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	f040 80cf 	bne.w	8005dac <_strtod_l+0xb4c>
 8005c0e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005c12:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c18:	4648      	mov	r0, r9
 8005c1a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8005c1e:	4651      	mov	r1, sl
 8005c20:	f002 f8ca 	bl	8007db8 <__ulp>
 8005c24:	4602      	mov	r2, r0
 8005c26:	460b      	mov	r3, r1
 8005c28:	4630      	mov	r0, r6
 8005c2a:	4639      	mov	r1, r7
 8005c2c:	f7fa fcc0 	bl	80005b0 <__aeabi_dmul>
 8005c30:	464a      	mov	r2, r9
 8005c32:	4653      	mov	r3, sl
 8005c34:	f7fa fb06 	bl	8000244 <__adddf3>
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4954      	ldr	r1, [pc, #336]	; (8005d8c <_strtod_l+0xb2c>)
 8005c3c:	4a58      	ldr	r2, [pc, #352]	; (8005da0 <_strtod_l+0xb40>)
 8005c3e:	4019      	ands	r1, r3
 8005c40:	4291      	cmp	r1, r2
 8005c42:	4681      	mov	r9, r0
 8005c44:	d95e      	bls.n	8005d04 <_strtod_l+0xaa4>
 8005c46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c48:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d103      	bne.n	8005c58 <_strtod_l+0x9f8>
 8005c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c52:	3301      	adds	r3, #1
 8005c54:	f43f ad26 	beq.w	80056a4 <_strtod_l+0x444>
 8005c58:	f04f 39ff 	mov.w	r9, #4294967295
 8005c5c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8005d90 <_strtod_l+0xb30>
 8005c60:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005c62:	4658      	mov	r0, fp
 8005c64:	f001 fe12 	bl	800788c <_Bfree>
 8005c68:	9906      	ldr	r1, [sp, #24]
 8005c6a:	4658      	mov	r0, fp
 8005c6c:	f001 fe0e 	bl	800788c <_Bfree>
 8005c70:	9904      	ldr	r1, [sp, #16]
 8005c72:	4658      	mov	r0, fp
 8005c74:	f001 fe0a 	bl	800788c <_Bfree>
 8005c78:	4641      	mov	r1, r8
 8005c7a:	4658      	mov	r0, fp
 8005c7c:	f001 fe06 	bl	800788c <_Bfree>
 8005c80:	e617      	b.n	80058b2 <_strtod_l+0x652>
 8005c82:	f1b9 0f00 	cmp.w	r9, #0
 8005c86:	d119      	bne.n	8005cbc <_strtod_l+0xa5c>
 8005c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c8e:	b9e3      	cbnz	r3, 8005cca <_strtod_l+0xa6a>
 8005c90:	2200      	movs	r2, #0
 8005c92:	4b41      	ldr	r3, [pc, #260]	; (8005d98 <_strtod_l+0xb38>)
 8005c94:	4630      	mov	r0, r6
 8005c96:	4639      	mov	r1, r7
 8005c98:	f7fa fefc 	bl	8000a94 <__aeabi_dcmplt>
 8005c9c:	b9c8      	cbnz	r0, 8005cd2 <_strtod_l+0xa72>
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	4b40      	ldr	r3, [pc, #256]	; (8005da4 <_strtod_l+0xb44>)
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	4639      	mov	r1, r7
 8005ca6:	f7fa fc83 	bl	80005b0 <__aeabi_dmul>
 8005caa:	4604      	mov	r4, r0
 8005cac:	460d      	mov	r5, r1
 8005cae:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005cb2:	9418      	str	r4, [sp, #96]	; 0x60
 8005cb4:	9319      	str	r3, [sp, #100]	; 0x64
 8005cb6:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8005cba:	e79d      	b.n	8005bf8 <_strtod_l+0x998>
 8005cbc:	f1b9 0f01 	cmp.w	r9, #1
 8005cc0:	d103      	bne.n	8005cca <_strtod_l+0xa6a>
 8005cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f43f ad8a 	beq.w	80057de <_strtod_l+0x57e>
 8005cca:	2600      	movs	r6, #0
 8005ccc:	4f36      	ldr	r7, [pc, #216]	; (8005da8 <_strtod_l+0xb48>)
 8005cce:	2400      	movs	r4, #0
 8005cd0:	e791      	b.n	8005bf6 <_strtod_l+0x996>
 8005cd2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005cd4:	4d33      	ldr	r5, [pc, #204]	; (8005da4 <_strtod_l+0xb44>)
 8005cd6:	e7ea      	b.n	8005cae <_strtod_l+0xa4e>
 8005cd8:	4b32      	ldr	r3, [pc, #200]	; (8005da4 <_strtod_l+0xb44>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	4630      	mov	r0, r6
 8005cde:	4639      	mov	r1, r7
 8005ce0:	f7fa fc66 	bl	80005b0 <__aeabi_dmul>
 8005ce4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	460d      	mov	r5, r1
 8005cea:	b933      	cbnz	r3, 8005cfa <_strtod_l+0xa9a>
 8005cec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005cf0:	9010      	str	r0, [sp, #64]	; 0x40
 8005cf2:	9311      	str	r3, [sp, #68]	; 0x44
 8005cf4:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005cf8:	e77e      	b.n	8005bf8 <_strtod_l+0x998>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005d02:	e7f7      	b.n	8005cf4 <_strtod_l+0xa94>
 8005d04:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8005d08:	9b05      	ldr	r3, [sp, #20]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1a8      	bne.n	8005c60 <_strtod_l+0xa00>
 8005d0e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005d12:	0d1b      	lsrs	r3, r3, #20
 8005d14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d16:	051b      	lsls	r3, r3, #20
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	4656      	mov	r6, sl
 8005d1c:	d1a0      	bne.n	8005c60 <_strtod_l+0xa00>
 8005d1e:	4629      	mov	r1, r5
 8005d20:	4620      	mov	r0, r4
 8005d22:	f7fa fef5 	bl	8000b10 <__aeabi_d2iz>
 8005d26:	f7fa fbd9 	bl	80004dc <__aeabi_i2d>
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	4629      	mov	r1, r5
 8005d30:	4620      	mov	r0, r4
 8005d32:	f7fa fa85 	bl	8000240 <__aeabi_dsub>
 8005d36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d38:	4604      	mov	r4, r0
 8005d3a:	460d      	mov	r5, r1
 8005d3c:	b933      	cbnz	r3, 8005d4c <_strtod_l+0xaec>
 8005d3e:	f1b9 0f00 	cmp.w	r9, #0
 8005d42:	d103      	bne.n	8005d4c <_strtod_l+0xaec>
 8005d44:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8005d48:	2e00      	cmp	r6, #0
 8005d4a:	d06a      	beq.n	8005e22 <_strtod_l+0xbc2>
 8005d4c:	a30a      	add	r3, pc, #40	; (adr r3, 8005d78 <_strtod_l+0xb18>)
 8005d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d52:	4620      	mov	r0, r4
 8005d54:	4629      	mov	r1, r5
 8005d56:	f7fa fe9d 	bl	8000a94 <__aeabi_dcmplt>
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	f47f acad 	bne.w	80056ba <_strtod_l+0x45a>
 8005d60:	a307      	add	r3, pc, #28	; (adr r3, 8005d80 <_strtod_l+0xb20>)
 8005d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d66:	4620      	mov	r0, r4
 8005d68:	4629      	mov	r1, r5
 8005d6a:	f7fa feb1 	bl	8000ad0 <__aeabi_dcmpgt>
 8005d6e:	2800      	cmp	r0, #0
 8005d70:	f43f af76 	beq.w	8005c60 <_strtod_l+0xa00>
 8005d74:	e4a1      	b.n	80056ba <_strtod_l+0x45a>
 8005d76:	bf00      	nop
 8005d78:	94a03595 	.word	0x94a03595
 8005d7c:	3fdfffff 	.word	0x3fdfffff
 8005d80:	35afe535 	.word	0x35afe535
 8005d84:	3fe00000 	.word	0x3fe00000
 8005d88:	000fffff 	.word	0x000fffff
 8005d8c:	7ff00000 	.word	0x7ff00000
 8005d90:	7fefffff 	.word	0x7fefffff
 8005d94:	39500000 	.word	0x39500000
 8005d98:	3ff00000 	.word	0x3ff00000
 8005d9c:	7fe00000 	.word	0x7fe00000
 8005da0:	7c9fffff 	.word	0x7c9fffff
 8005da4:	3fe00000 	.word	0x3fe00000
 8005da8:	bff00000 	.word	0xbff00000
 8005dac:	9b05      	ldr	r3, [sp, #20]
 8005dae:	b313      	cbz	r3, 8005df6 <_strtod_l+0xb96>
 8005db0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005db2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005db6:	d81e      	bhi.n	8005df6 <_strtod_l+0xb96>
 8005db8:	a325      	add	r3, pc, #148	; (adr r3, 8005e50 <_strtod_l+0xbf0>)
 8005dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	f7fa fe71 	bl	8000aa8 <__aeabi_dcmple>
 8005dc6:	b190      	cbz	r0, 8005dee <_strtod_l+0xb8e>
 8005dc8:	4629      	mov	r1, r5
 8005dca:	4620      	mov	r0, r4
 8005dcc:	f7fa fec8 	bl	8000b60 <__aeabi_d2uiz>
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	bf08      	it	eq
 8005dd4:	2001      	moveq	r0, #1
 8005dd6:	f7fa fb71 	bl	80004bc <__aeabi_ui2d>
 8005dda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ddc:	4604      	mov	r4, r0
 8005dde:	460d      	mov	r5, r1
 8005de0:	b9d3      	cbnz	r3, 8005e18 <_strtod_l+0xbb8>
 8005de2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005de6:	9012      	str	r0, [sp, #72]	; 0x48
 8005de8:	9313      	str	r3, [sp, #76]	; 0x4c
 8005dea:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005dee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005df0:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005df4:	1a9f      	subs	r7, r3, r2
 8005df6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005dfa:	f001 ffdd 	bl	8007db8 <__ulp>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	460b      	mov	r3, r1
 8005e02:	4630      	mov	r0, r6
 8005e04:	4639      	mov	r1, r7
 8005e06:	f7fa fbd3 	bl	80005b0 <__aeabi_dmul>
 8005e0a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005e0e:	f7fa fa19 	bl	8000244 <__adddf3>
 8005e12:	4681      	mov	r9, r0
 8005e14:	468a      	mov	sl, r1
 8005e16:	e777      	b.n	8005d08 <_strtod_l+0xaa8>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005e20:	e7e3      	b.n	8005dea <_strtod_l+0xb8a>
 8005e22:	a30d      	add	r3, pc, #52	; (adr r3, 8005e58 <_strtod_l+0xbf8>)
 8005e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e28:	f7fa fe34 	bl	8000a94 <__aeabi_dcmplt>
 8005e2c:	e79f      	b.n	8005d6e <_strtod_l+0xb0e>
 8005e2e:	2300      	movs	r3, #0
 8005e30:	930d      	str	r3, [sp, #52]	; 0x34
 8005e32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e34:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005e36:	6013      	str	r3, [r2, #0]
 8005e38:	f7ff ba55 	b.w	80052e6 <_strtod_l+0x86>
 8005e3c:	2b65      	cmp	r3, #101	; 0x65
 8005e3e:	f04f 0200 	mov.w	r2, #0
 8005e42:	f43f ab42 	beq.w	80054ca <_strtod_l+0x26a>
 8005e46:	2101      	movs	r1, #1
 8005e48:	4614      	mov	r4, r2
 8005e4a:	9105      	str	r1, [sp, #20]
 8005e4c:	f7ff babf 	b.w	80053ce <_strtod_l+0x16e>
 8005e50:	ffc00000 	.word	0xffc00000
 8005e54:	41dfffff 	.word	0x41dfffff
 8005e58:	94a03595 	.word	0x94a03595
 8005e5c:	3fcfffff 	.word	0x3fcfffff

08005e60 <_strtod_r>:
 8005e60:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <_strtod_r+0x18>)
 8005e62:	b410      	push	{r4}
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4c05      	ldr	r4, [pc, #20]	; (8005e7c <_strtod_r+0x1c>)
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	bf08      	it	eq
 8005e6e:	4623      	moveq	r3, r4
 8005e70:	bc10      	pop	{r4}
 8005e72:	f7ff b9f5 	b.w	8005260 <_strtod_l>
 8005e76:	bf00      	nop
 8005e78:	2000000c 	.word	0x2000000c
 8005e7c:	20000070 	.word	0x20000070

08005e80 <_strtol_l.isra.0>:
 8005e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e84:	4680      	mov	r8, r0
 8005e86:	4689      	mov	r9, r1
 8005e88:	4692      	mov	sl, r2
 8005e8a:	461e      	mov	r6, r3
 8005e8c:	460f      	mov	r7, r1
 8005e8e:	463d      	mov	r5, r7
 8005e90:	9808      	ldr	r0, [sp, #32]
 8005e92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e96:	f001 fc25 	bl	80076e4 <__locale_ctype_ptr_l>
 8005e9a:	4420      	add	r0, r4
 8005e9c:	7843      	ldrb	r3, [r0, #1]
 8005e9e:	f013 0308 	ands.w	r3, r3, #8
 8005ea2:	d132      	bne.n	8005f0a <_strtol_l.isra.0+0x8a>
 8005ea4:	2c2d      	cmp	r4, #45	; 0x2d
 8005ea6:	d132      	bne.n	8005f0e <_strtol_l.isra.0+0x8e>
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	787c      	ldrb	r4, [r7, #1]
 8005eac:	1cbd      	adds	r5, r7, #2
 8005eae:	2e00      	cmp	r6, #0
 8005eb0:	d05d      	beq.n	8005f6e <_strtol_l.isra.0+0xee>
 8005eb2:	2e10      	cmp	r6, #16
 8005eb4:	d109      	bne.n	8005eca <_strtol_l.isra.0+0x4a>
 8005eb6:	2c30      	cmp	r4, #48	; 0x30
 8005eb8:	d107      	bne.n	8005eca <_strtol_l.isra.0+0x4a>
 8005eba:	782b      	ldrb	r3, [r5, #0]
 8005ebc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005ec0:	2b58      	cmp	r3, #88	; 0x58
 8005ec2:	d14f      	bne.n	8005f64 <_strtol_l.isra.0+0xe4>
 8005ec4:	2610      	movs	r6, #16
 8005ec6:	786c      	ldrb	r4, [r5, #1]
 8005ec8:	3502      	adds	r5, #2
 8005eca:	2a00      	cmp	r2, #0
 8005ecc:	bf14      	ite	ne
 8005ece:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005ed2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005ed6:	2700      	movs	r7, #0
 8005ed8:	fbb1 fcf6 	udiv	ip, r1, r6
 8005edc:	4638      	mov	r0, r7
 8005ede:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005ee2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005ee6:	2b09      	cmp	r3, #9
 8005ee8:	d817      	bhi.n	8005f1a <_strtol_l.isra.0+0x9a>
 8005eea:	461c      	mov	r4, r3
 8005eec:	42a6      	cmp	r6, r4
 8005eee:	dd23      	ble.n	8005f38 <_strtol_l.isra.0+0xb8>
 8005ef0:	1c7b      	adds	r3, r7, #1
 8005ef2:	d007      	beq.n	8005f04 <_strtol_l.isra.0+0x84>
 8005ef4:	4584      	cmp	ip, r0
 8005ef6:	d31c      	bcc.n	8005f32 <_strtol_l.isra.0+0xb2>
 8005ef8:	d101      	bne.n	8005efe <_strtol_l.isra.0+0x7e>
 8005efa:	45a6      	cmp	lr, r4
 8005efc:	db19      	blt.n	8005f32 <_strtol_l.isra.0+0xb2>
 8005efe:	2701      	movs	r7, #1
 8005f00:	fb00 4006 	mla	r0, r0, r6, r4
 8005f04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f08:	e7eb      	b.n	8005ee2 <_strtol_l.isra.0+0x62>
 8005f0a:	462f      	mov	r7, r5
 8005f0c:	e7bf      	b.n	8005e8e <_strtol_l.isra.0+0xe>
 8005f0e:	2c2b      	cmp	r4, #43	; 0x2b
 8005f10:	bf04      	itt	eq
 8005f12:	1cbd      	addeq	r5, r7, #2
 8005f14:	787c      	ldrbeq	r4, [r7, #1]
 8005f16:	461a      	mov	r2, r3
 8005f18:	e7c9      	b.n	8005eae <_strtol_l.isra.0+0x2e>
 8005f1a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005f1e:	2b19      	cmp	r3, #25
 8005f20:	d801      	bhi.n	8005f26 <_strtol_l.isra.0+0xa6>
 8005f22:	3c37      	subs	r4, #55	; 0x37
 8005f24:	e7e2      	b.n	8005eec <_strtol_l.isra.0+0x6c>
 8005f26:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005f2a:	2b19      	cmp	r3, #25
 8005f2c:	d804      	bhi.n	8005f38 <_strtol_l.isra.0+0xb8>
 8005f2e:	3c57      	subs	r4, #87	; 0x57
 8005f30:	e7dc      	b.n	8005eec <_strtol_l.isra.0+0x6c>
 8005f32:	f04f 37ff 	mov.w	r7, #4294967295
 8005f36:	e7e5      	b.n	8005f04 <_strtol_l.isra.0+0x84>
 8005f38:	1c7b      	adds	r3, r7, #1
 8005f3a:	d108      	bne.n	8005f4e <_strtol_l.isra.0+0xce>
 8005f3c:	2322      	movs	r3, #34	; 0x22
 8005f3e:	4608      	mov	r0, r1
 8005f40:	f8c8 3000 	str.w	r3, [r8]
 8005f44:	f1ba 0f00 	cmp.w	sl, #0
 8005f48:	d107      	bne.n	8005f5a <_strtol_l.isra.0+0xda>
 8005f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f4e:	b102      	cbz	r2, 8005f52 <_strtol_l.isra.0+0xd2>
 8005f50:	4240      	negs	r0, r0
 8005f52:	f1ba 0f00 	cmp.w	sl, #0
 8005f56:	d0f8      	beq.n	8005f4a <_strtol_l.isra.0+0xca>
 8005f58:	b10f      	cbz	r7, 8005f5e <_strtol_l.isra.0+0xde>
 8005f5a:	f105 39ff 	add.w	r9, r5, #4294967295
 8005f5e:	f8ca 9000 	str.w	r9, [sl]
 8005f62:	e7f2      	b.n	8005f4a <_strtol_l.isra.0+0xca>
 8005f64:	2430      	movs	r4, #48	; 0x30
 8005f66:	2e00      	cmp	r6, #0
 8005f68:	d1af      	bne.n	8005eca <_strtol_l.isra.0+0x4a>
 8005f6a:	2608      	movs	r6, #8
 8005f6c:	e7ad      	b.n	8005eca <_strtol_l.isra.0+0x4a>
 8005f6e:	2c30      	cmp	r4, #48	; 0x30
 8005f70:	d0a3      	beq.n	8005eba <_strtol_l.isra.0+0x3a>
 8005f72:	260a      	movs	r6, #10
 8005f74:	e7a9      	b.n	8005eca <_strtol_l.isra.0+0x4a>
	...

08005f78 <_strtol_r>:
 8005f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f7a:	4c06      	ldr	r4, [pc, #24]	; (8005f94 <_strtol_r+0x1c>)
 8005f7c:	4d06      	ldr	r5, [pc, #24]	; (8005f98 <_strtol_r+0x20>)
 8005f7e:	6824      	ldr	r4, [r4, #0]
 8005f80:	6a24      	ldr	r4, [r4, #32]
 8005f82:	2c00      	cmp	r4, #0
 8005f84:	bf08      	it	eq
 8005f86:	462c      	moveq	r4, r5
 8005f88:	9400      	str	r4, [sp, #0]
 8005f8a:	f7ff ff79 	bl	8005e80 <_strtol_l.isra.0>
 8005f8e:	b003      	add	sp, #12
 8005f90:	bd30      	pop	{r4, r5, pc}
 8005f92:	bf00      	nop
 8005f94:	2000000c 	.word	0x2000000c
 8005f98:	20000070 	.word	0x20000070

08005f9c <__swbuf_r>:
 8005f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9e:	460e      	mov	r6, r1
 8005fa0:	4614      	mov	r4, r2
 8005fa2:	4605      	mov	r5, r0
 8005fa4:	b118      	cbz	r0, 8005fae <__swbuf_r+0x12>
 8005fa6:	6983      	ldr	r3, [r0, #24]
 8005fa8:	b90b      	cbnz	r3, 8005fae <__swbuf_r+0x12>
 8005faa:	f000 ffe9 	bl	8006f80 <__sinit>
 8005fae:	4b21      	ldr	r3, [pc, #132]	; (8006034 <__swbuf_r+0x98>)
 8005fb0:	429c      	cmp	r4, r3
 8005fb2:	d12a      	bne.n	800600a <__swbuf_r+0x6e>
 8005fb4:	686c      	ldr	r4, [r5, #4]
 8005fb6:	69a3      	ldr	r3, [r4, #24]
 8005fb8:	60a3      	str	r3, [r4, #8]
 8005fba:	89a3      	ldrh	r3, [r4, #12]
 8005fbc:	071a      	lsls	r2, r3, #28
 8005fbe:	d52e      	bpl.n	800601e <__swbuf_r+0x82>
 8005fc0:	6923      	ldr	r3, [r4, #16]
 8005fc2:	b363      	cbz	r3, 800601e <__swbuf_r+0x82>
 8005fc4:	6923      	ldr	r3, [r4, #16]
 8005fc6:	6820      	ldr	r0, [r4, #0]
 8005fc8:	b2f6      	uxtb	r6, r6
 8005fca:	1ac0      	subs	r0, r0, r3
 8005fcc:	6963      	ldr	r3, [r4, #20]
 8005fce:	4637      	mov	r7, r6
 8005fd0:	4283      	cmp	r3, r0
 8005fd2:	dc04      	bgt.n	8005fde <__swbuf_r+0x42>
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f000 ff68 	bl	8006eac <_fflush_r>
 8005fdc:	bb28      	cbnz	r0, 800602a <__swbuf_r+0x8e>
 8005fde:	68a3      	ldr	r3, [r4, #8]
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	60a3      	str	r3, [r4, #8]
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	6022      	str	r2, [r4, #0]
 8005fec:	701e      	strb	r6, [r3, #0]
 8005fee:	6963      	ldr	r3, [r4, #20]
 8005ff0:	4283      	cmp	r3, r0
 8005ff2:	d004      	beq.n	8005ffe <__swbuf_r+0x62>
 8005ff4:	89a3      	ldrh	r3, [r4, #12]
 8005ff6:	07db      	lsls	r3, r3, #31
 8005ff8:	d519      	bpl.n	800602e <__swbuf_r+0x92>
 8005ffa:	2e0a      	cmp	r6, #10
 8005ffc:	d117      	bne.n	800602e <__swbuf_r+0x92>
 8005ffe:	4621      	mov	r1, r4
 8006000:	4628      	mov	r0, r5
 8006002:	f000 ff53 	bl	8006eac <_fflush_r>
 8006006:	b190      	cbz	r0, 800602e <__swbuf_r+0x92>
 8006008:	e00f      	b.n	800602a <__swbuf_r+0x8e>
 800600a:	4b0b      	ldr	r3, [pc, #44]	; (8006038 <__swbuf_r+0x9c>)
 800600c:	429c      	cmp	r4, r3
 800600e:	d101      	bne.n	8006014 <__swbuf_r+0x78>
 8006010:	68ac      	ldr	r4, [r5, #8]
 8006012:	e7d0      	b.n	8005fb6 <__swbuf_r+0x1a>
 8006014:	4b09      	ldr	r3, [pc, #36]	; (800603c <__swbuf_r+0xa0>)
 8006016:	429c      	cmp	r4, r3
 8006018:	bf08      	it	eq
 800601a:	68ec      	ldreq	r4, [r5, #12]
 800601c:	e7cb      	b.n	8005fb6 <__swbuf_r+0x1a>
 800601e:	4621      	mov	r1, r4
 8006020:	4628      	mov	r0, r5
 8006022:	f000 f80d 	bl	8006040 <__swsetup_r>
 8006026:	2800      	cmp	r0, #0
 8006028:	d0cc      	beq.n	8005fc4 <__swbuf_r+0x28>
 800602a:	f04f 37ff 	mov.w	r7, #4294967295
 800602e:	4638      	mov	r0, r7
 8006030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006032:	bf00      	nop
 8006034:	08008a60 	.word	0x08008a60
 8006038:	08008a80 	.word	0x08008a80
 800603c:	08008a40 	.word	0x08008a40

08006040 <__swsetup_r>:
 8006040:	4b32      	ldr	r3, [pc, #200]	; (800610c <__swsetup_r+0xcc>)
 8006042:	b570      	push	{r4, r5, r6, lr}
 8006044:	681d      	ldr	r5, [r3, #0]
 8006046:	4606      	mov	r6, r0
 8006048:	460c      	mov	r4, r1
 800604a:	b125      	cbz	r5, 8006056 <__swsetup_r+0x16>
 800604c:	69ab      	ldr	r3, [r5, #24]
 800604e:	b913      	cbnz	r3, 8006056 <__swsetup_r+0x16>
 8006050:	4628      	mov	r0, r5
 8006052:	f000 ff95 	bl	8006f80 <__sinit>
 8006056:	4b2e      	ldr	r3, [pc, #184]	; (8006110 <__swsetup_r+0xd0>)
 8006058:	429c      	cmp	r4, r3
 800605a:	d10f      	bne.n	800607c <__swsetup_r+0x3c>
 800605c:	686c      	ldr	r4, [r5, #4]
 800605e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006062:	b29a      	uxth	r2, r3
 8006064:	0715      	lsls	r5, r2, #28
 8006066:	d42c      	bmi.n	80060c2 <__swsetup_r+0x82>
 8006068:	06d0      	lsls	r0, r2, #27
 800606a:	d411      	bmi.n	8006090 <__swsetup_r+0x50>
 800606c:	2209      	movs	r2, #9
 800606e:	6032      	str	r2, [r6, #0]
 8006070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006074:	81a3      	strh	r3, [r4, #12]
 8006076:	f04f 30ff 	mov.w	r0, #4294967295
 800607a:	e03e      	b.n	80060fa <__swsetup_r+0xba>
 800607c:	4b25      	ldr	r3, [pc, #148]	; (8006114 <__swsetup_r+0xd4>)
 800607e:	429c      	cmp	r4, r3
 8006080:	d101      	bne.n	8006086 <__swsetup_r+0x46>
 8006082:	68ac      	ldr	r4, [r5, #8]
 8006084:	e7eb      	b.n	800605e <__swsetup_r+0x1e>
 8006086:	4b24      	ldr	r3, [pc, #144]	; (8006118 <__swsetup_r+0xd8>)
 8006088:	429c      	cmp	r4, r3
 800608a:	bf08      	it	eq
 800608c:	68ec      	ldreq	r4, [r5, #12]
 800608e:	e7e6      	b.n	800605e <__swsetup_r+0x1e>
 8006090:	0751      	lsls	r1, r2, #29
 8006092:	d512      	bpl.n	80060ba <__swsetup_r+0x7a>
 8006094:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006096:	b141      	cbz	r1, 80060aa <__swsetup_r+0x6a>
 8006098:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800609c:	4299      	cmp	r1, r3
 800609e:	d002      	beq.n	80060a6 <__swsetup_r+0x66>
 80060a0:	4630      	mov	r0, r6
 80060a2:	f001 ffc5 	bl	8008030 <_free_r>
 80060a6:	2300      	movs	r3, #0
 80060a8:	6363      	str	r3, [r4, #52]	; 0x34
 80060aa:	89a3      	ldrh	r3, [r4, #12]
 80060ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80060b0:	81a3      	strh	r3, [r4, #12]
 80060b2:	2300      	movs	r3, #0
 80060b4:	6063      	str	r3, [r4, #4]
 80060b6:	6923      	ldr	r3, [r4, #16]
 80060b8:	6023      	str	r3, [r4, #0]
 80060ba:	89a3      	ldrh	r3, [r4, #12]
 80060bc:	f043 0308 	orr.w	r3, r3, #8
 80060c0:	81a3      	strh	r3, [r4, #12]
 80060c2:	6923      	ldr	r3, [r4, #16]
 80060c4:	b94b      	cbnz	r3, 80060da <__swsetup_r+0x9a>
 80060c6:	89a3      	ldrh	r3, [r4, #12]
 80060c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80060cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060d0:	d003      	beq.n	80060da <__swsetup_r+0x9a>
 80060d2:	4621      	mov	r1, r4
 80060d4:	4630      	mov	r0, r6
 80060d6:	f001 fb3d 	bl	8007754 <__smakebuf_r>
 80060da:	89a2      	ldrh	r2, [r4, #12]
 80060dc:	f012 0301 	ands.w	r3, r2, #1
 80060e0:	d00c      	beq.n	80060fc <__swsetup_r+0xbc>
 80060e2:	2300      	movs	r3, #0
 80060e4:	60a3      	str	r3, [r4, #8]
 80060e6:	6963      	ldr	r3, [r4, #20]
 80060e8:	425b      	negs	r3, r3
 80060ea:	61a3      	str	r3, [r4, #24]
 80060ec:	6923      	ldr	r3, [r4, #16]
 80060ee:	b953      	cbnz	r3, 8006106 <__swsetup_r+0xc6>
 80060f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060f4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80060f8:	d1ba      	bne.n	8006070 <__swsetup_r+0x30>
 80060fa:	bd70      	pop	{r4, r5, r6, pc}
 80060fc:	0792      	lsls	r2, r2, #30
 80060fe:	bf58      	it	pl
 8006100:	6963      	ldrpl	r3, [r4, #20]
 8006102:	60a3      	str	r3, [r4, #8]
 8006104:	e7f2      	b.n	80060ec <__swsetup_r+0xac>
 8006106:	2000      	movs	r0, #0
 8006108:	e7f7      	b.n	80060fa <__swsetup_r+0xba>
 800610a:	bf00      	nop
 800610c:	2000000c 	.word	0x2000000c
 8006110:	08008a60 	.word	0x08008a60
 8006114:	08008a80 	.word	0x08008a80
 8006118:	08008a40 	.word	0x08008a40

0800611c <quorem>:
 800611c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006120:	6903      	ldr	r3, [r0, #16]
 8006122:	690c      	ldr	r4, [r1, #16]
 8006124:	4680      	mov	r8, r0
 8006126:	42a3      	cmp	r3, r4
 8006128:	f2c0 8084 	blt.w	8006234 <quorem+0x118>
 800612c:	3c01      	subs	r4, #1
 800612e:	f101 0714 	add.w	r7, r1, #20
 8006132:	f100 0614 	add.w	r6, r0, #20
 8006136:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800613a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800613e:	3501      	adds	r5, #1
 8006140:	fbb0 f5f5 	udiv	r5, r0, r5
 8006144:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006148:	eb06 030c 	add.w	r3, r6, ip
 800614c:	eb07 090c 	add.w	r9, r7, ip
 8006150:	9301      	str	r3, [sp, #4]
 8006152:	b39d      	cbz	r5, 80061bc <quorem+0xa0>
 8006154:	f04f 0a00 	mov.w	sl, #0
 8006158:	4638      	mov	r0, r7
 800615a:	46b6      	mov	lr, r6
 800615c:	46d3      	mov	fp, sl
 800615e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006162:	b293      	uxth	r3, r2
 8006164:	fb05 a303 	mla	r3, r5, r3, sl
 8006168:	0c12      	lsrs	r2, r2, #16
 800616a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800616e:	fb05 a202 	mla	r2, r5, r2, sl
 8006172:	b29b      	uxth	r3, r3
 8006174:	ebab 0303 	sub.w	r3, fp, r3
 8006178:	f8de b000 	ldr.w	fp, [lr]
 800617c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006180:	fa1f fb8b 	uxth.w	fp, fp
 8006184:	445b      	add	r3, fp
 8006186:	fa1f fb82 	uxth.w	fp, r2
 800618a:	f8de 2000 	ldr.w	r2, [lr]
 800618e:	4581      	cmp	r9, r0
 8006190:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006194:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006198:	b29b      	uxth	r3, r3
 800619a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800619e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80061a2:	f84e 3b04 	str.w	r3, [lr], #4
 80061a6:	d2da      	bcs.n	800615e <quorem+0x42>
 80061a8:	f856 300c 	ldr.w	r3, [r6, ip]
 80061ac:	b933      	cbnz	r3, 80061bc <quorem+0xa0>
 80061ae:	9b01      	ldr	r3, [sp, #4]
 80061b0:	3b04      	subs	r3, #4
 80061b2:	429e      	cmp	r6, r3
 80061b4:	461a      	mov	r2, r3
 80061b6:	d331      	bcc.n	800621c <quorem+0x100>
 80061b8:	f8c8 4010 	str.w	r4, [r8, #16]
 80061bc:	4640      	mov	r0, r8
 80061be:	f001 fd83 	bl	8007cc8 <__mcmp>
 80061c2:	2800      	cmp	r0, #0
 80061c4:	db26      	blt.n	8006214 <quorem+0xf8>
 80061c6:	4630      	mov	r0, r6
 80061c8:	f04f 0c00 	mov.w	ip, #0
 80061cc:	3501      	adds	r5, #1
 80061ce:	f857 1b04 	ldr.w	r1, [r7], #4
 80061d2:	f8d0 e000 	ldr.w	lr, [r0]
 80061d6:	b28b      	uxth	r3, r1
 80061d8:	ebac 0303 	sub.w	r3, ip, r3
 80061dc:	fa1f f28e 	uxth.w	r2, lr
 80061e0:	4413      	add	r3, r2
 80061e2:	0c0a      	lsrs	r2, r1, #16
 80061e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80061e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061f2:	45b9      	cmp	r9, r7
 80061f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80061f8:	f840 3b04 	str.w	r3, [r0], #4
 80061fc:	d2e7      	bcs.n	80061ce <quorem+0xb2>
 80061fe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006202:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006206:	b92a      	cbnz	r2, 8006214 <quorem+0xf8>
 8006208:	3b04      	subs	r3, #4
 800620a:	429e      	cmp	r6, r3
 800620c:	461a      	mov	r2, r3
 800620e:	d30b      	bcc.n	8006228 <quorem+0x10c>
 8006210:	f8c8 4010 	str.w	r4, [r8, #16]
 8006214:	4628      	mov	r0, r5
 8006216:	b003      	add	sp, #12
 8006218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800621c:	6812      	ldr	r2, [r2, #0]
 800621e:	3b04      	subs	r3, #4
 8006220:	2a00      	cmp	r2, #0
 8006222:	d1c9      	bne.n	80061b8 <quorem+0x9c>
 8006224:	3c01      	subs	r4, #1
 8006226:	e7c4      	b.n	80061b2 <quorem+0x96>
 8006228:	6812      	ldr	r2, [r2, #0]
 800622a:	3b04      	subs	r3, #4
 800622c:	2a00      	cmp	r2, #0
 800622e:	d1ef      	bne.n	8006210 <quorem+0xf4>
 8006230:	3c01      	subs	r4, #1
 8006232:	e7ea      	b.n	800620a <quorem+0xee>
 8006234:	2000      	movs	r0, #0
 8006236:	e7ee      	b.n	8006216 <quorem+0xfa>

08006238 <_dtoa_r>:
 8006238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800623c:	4616      	mov	r6, r2
 800623e:	461f      	mov	r7, r3
 8006240:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006242:	b095      	sub	sp, #84	; 0x54
 8006244:	4604      	mov	r4, r0
 8006246:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800624a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800624e:	b93d      	cbnz	r5, 8006260 <_dtoa_r+0x28>
 8006250:	2010      	movs	r0, #16
 8006252:	f001 fabf 	bl	80077d4 <malloc>
 8006256:	6260      	str	r0, [r4, #36]	; 0x24
 8006258:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800625c:	6005      	str	r5, [r0, #0]
 800625e:	60c5      	str	r5, [r0, #12]
 8006260:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006262:	6819      	ldr	r1, [r3, #0]
 8006264:	b151      	cbz	r1, 800627c <_dtoa_r+0x44>
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	2301      	movs	r3, #1
 800626a:	4093      	lsls	r3, r2
 800626c:	604a      	str	r2, [r1, #4]
 800626e:	608b      	str	r3, [r1, #8]
 8006270:	4620      	mov	r0, r4
 8006272:	f001 fb0b 	bl	800788c <_Bfree>
 8006276:	2200      	movs	r2, #0
 8006278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	1e3b      	subs	r3, r7, #0
 800627e:	bfaf      	iteee	ge
 8006280:	2300      	movge	r3, #0
 8006282:	2201      	movlt	r2, #1
 8006284:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006288:	9303      	strlt	r3, [sp, #12]
 800628a:	bfac      	ite	ge
 800628c:	f8c8 3000 	strge.w	r3, [r8]
 8006290:	f8c8 2000 	strlt.w	r2, [r8]
 8006294:	4bae      	ldr	r3, [pc, #696]	; (8006550 <_dtoa_r+0x318>)
 8006296:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800629a:	ea33 0308 	bics.w	r3, r3, r8
 800629e:	d11b      	bne.n	80062d8 <_dtoa_r+0xa0>
 80062a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80062a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80062a6:	6013      	str	r3, [r2, #0]
 80062a8:	9b02      	ldr	r3, [sp, #8]
 80062aa:	b923      	cbnz	r3, 80062b6 <_dtoa_r+0x7e>
 80062ac:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80062b0:	2800      	cmp	r0, #0
 80062b2:	f000 8545 	beq.w	8006d40 <_dtoa_r+0xb08>
 80062b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062b8:	b953      	cbnz	r3, 80062d0 <_dtoa_r+0x98>
 80062ba:	4ba6      	ldr	r3, [pc, #664]	; (8006554 <_dtoa_r+0x31c>)
 80062bc:	e021      	b.n	8006302 <_dtoa_r+0xca>
 80062be:	4ba6      	ldr	r3, [pc, #664]	; (8006558 <_dtoa_r+0x320>)
 80062c0:	9306      	str	r3, [sp, #24]
 80062c2:	3308      	adds	r3, #8
 80062c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80062c6:	6013      	str	r3, [r2, #0]
 80062c8:	9806      	ldr	r0, [sp, #24]
 80062ca:	b015      	add	sp, #84	; 0x54
 80062cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d0:	4ba0      	ldr	r3, [pc, #640]	; (8006554 <_dtoa_r+0x31c>)
 80062d2:	9306      	str	r3, [sp, #24]
 80062d4:	3303      	adds	r3, #3
 80062d6:	e7f5      	b.n	80062c4 <_dtoa_r+0x8c>
 80062d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80062dc:	2200      	movs	r2, #0
 80062de:	2300      	movs	r3, #0
 80062e0:	4630      	mov	r0, r6
 80062e2:	4639      	mov	r1, r7
 80062e4:	f7fa fbcc 	bl	8000a80 <__aeabi_dcmpeq>
 80062e8:	4682      	mov	sl, r0
 80062ea:	b160      	cbz	r0, 8006306 <_dtoa_r+0xce>
 80062ec:	2301      	movs	r3, #1
 80062ee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 8520 	beq.w	8006d3a <_dtoa_r+0xb02>
 80062fa:	4b98      	ldr	r3, [pc, #608]	; (800655c <_dtoa_r+0x324>)
 80062fc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80062fe:	6013      	str	r3, [r2, #0]
 8006300:	3b01      	subs	r3, #1
 8006302:	9306      	str	r3, [sp, #24]
 8006304:	e7e0      	b.n	80062c8 <_dtoa_r+0x90>
 8006306:	ab12      	add	r3, sp, #72	; 0x48
 8006308:	9301      	str	r3, [sp, #4]
 800630a:	ab13      	add	r3, sp, #76	; 0x4c
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	4632      	mov	r2, r6
 8006310:	463b      	mov	r3, r7
 8006312:	4620      	mov	r0, r4
 8006314:	f001 fdc6 	bl	8007ea4 <__d2b>
 8006318:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800631c:	4683      	mov	fp, r0
 800631e:	2d00      	cmp	r5, #0
 8006320:	d07d      	beq.n	800641e <_dtoa_r+0x1e6>
 8006322:	46b0      	mov	r8, r6
 8006324:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006328:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800632c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006330:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006334:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006338:	2200      	movs	r2, #0
 800633a:	4b89      	ldr	r3, [pc, #548]	; (8006560 <_dtoa_r+0x328>)
 800633c:	4640      	mov	r0, r8
 800633e:	4649      	mov	r1, r9
 8006340:	f7f9 ff7e 	bl	8000240 <__aeabi_dsub>
 8006344:	a37c      	add	r3, pc, #496	; (adr r3, 8006538 <_dtoa_r+0x300>)
 8006346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634a:	f7fa f931 	bl	80005b0 <__aeabi_dmul>
 800634e:	a37c      	add	r3, pc, #496	; (adr r3, 8006540 <_dtoa_r+0x308>)
 8006350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006354:	f7f9 ff76 	bl	8000244 <__adddf3>
 8006358:	4606      	mov	r6, r0
 800635a:	4628      	mov	r0, r5
 800635c:	460f      	mov	r7, r1
 800635e:	f7fa f8bd 	bl	80004dc <__aeabi_i2d>
 8006362:	a379      	add	r3, pc, #484	; (adr r3, 8006548 <_dtoa_r+0x310>)
 8006364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006368:	f7fa f922 	bl	80005b0 <__aeabi_dmul>
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	4630      	mov	r0, r6
 8006372:	4639      	mov	r1, r7
 8006374:	f7f9 ff66 	bl	8000244 <__adddf3>
 8006378:	4606      	mov	r6, r0
 800637a:	460f      	mov	r7, r1
 800637c:	f7fa fbc8 	bl	8000b10 <__aeabi_d2iz>
 8006380:	2200      	movs	r2, #0
 8006382:	4682      	mov	sl, r0
 8006384:	2300      	movs	r3, #0
 8006386:	4630      	mov	r0, r6
 8006388:	4639      	mov	r1, r7
 800638a:	f7fa fb83 	bl	8000a94 <__aeabi_dcmplt>
 800638e:	b148      	cbz	r0, 80063a4 <_dtoa_r+0x16c>
 8006390:	4650      	mov	r0, sl
 8006392:	f7fa f8a3 	bl	80004dc <__aeabi_i2d>
 8006396:	4632      	mov	r2, r6
 8006398:	463b      	mov	r3, r7
 800639a:	f7fa fb71 	bl	8000a80 <__aeabi_dcmpeq>
 800639e:	b908      	cbnz	r0, 80063a4 <_dtoa_r+0x16c>
 80063a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063a4:	f1ba 0f16 	cmp.w	sl, #22
 80063a8:	d85a      	bhi.n	8006460 <_dtoa_r+0x228>
 80063aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063ae:	496d      	ldr	r1, [pc, #436]	; (8006564 <_dtoa_r+0x32c>)
 80063b0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80063b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063b8:	f7fa fb8a 	bl	8000ad0 <__aeabi_dcmpgt>
 80063bc:	2800      	cmp	r0, #0
 80063be:	d051      	beq.n	8006464 <_dtoa_r+0x22c>
 80063c0:	2300      	movs	r3, #0
 80063c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063c6:	930d      	str	r3, [sp, #52]	; 0x34
 80063c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063ca:	1b5d      	subs	r5, r3, r5
 80063cc:	1e6b      	subs	r3, r5, #1
 80063ce:	9307      	str	r3, [sp, #28]
 80063d0:	bf43      	ittte	mi
 80063d2:	2300      	movmi	r3, #0
 80063d4:	f1c5 0901 	rsbmi	r9, r5, #1
 80063d8:	9307      	strmi	r3, [sp, #28]
 80063da:	f04f 0900 	movpl.w	r9, #0
 80063de:	f1ba 0f00 	cmp.w	sl, #0
 80063e2:	db41      	blt.n	8006468 <_dtoa_r+0x230>
 80063e4:	9b07      	ldr	r3, [sp, #28]
 80063e6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80063ea:	4453      	add	r3, sl
 80063ec:	9307      	str	r3, [sp, #28]
 80063ee:	2300      	movs	r3, #0
 80063f0:	9308      	str	r3, [sp, #32]
 80063f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80063f4:	2b09      	cmp	r3, #9
 80063f6:	f200 808f 	bhi.w	8006518 <_dtoa_r+0x2e0>
 80063fa:	2b05      	cmp	r3, #5
 80063fc:	bfc4      	itt	gt
 80063fe:	3b04      	subgt	r3, #4
 8006400:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006402:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006404:	bfc8      	it	gt
 8006406:	2500      	movgt	r5, #0
 8006408:	f1a3 0302 	sub.w	r3, r3, #2
 800640c:	bfd8      	it	le
 800640e:	2501      	movle	r5, #1
 8006410:	2b03      	cmp	r3, #3
 8006412:	f200 808d 	bhi.w	8006530 <_dtoa_r+0x2f8>
 8006416:	e8df f003 	tbb	[pc, r3]
 800641a:	7d7b      	.short	0x7d7b
 800641c:	6f2f      	.short	0x6f2f
 800641e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006422:	441d      	add	r5, r3
 8006424:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006428:	2820      	cmp	r0, #32
 800642a:	dd13      	ble.n	8006454 <_dtoa_r+0x21c>
 800642c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006430:	9b02      	ldr	r3, [sp, #8]
 8006432:	fa08 f800 	lsl.w	r8, r8, r0
 8006436:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800643a:	fa23 f000 	lsr.w	r0, r3, r0
 800643e:	ea48 0000 	orr.w	r0, r8, r0
 8006442:	f7fa f83b 	bl	80004bc <__aeabi_ui2d>
 8006446:	2301      	movs	r3, #1
 8006448:	4680      	mov	r8, r0
 800644a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800644e:	3d01      	subs	r5, #1
 8006450:	9310      	str	r3, [sp, #64]	; 0x40
 8006452:	e771      	b.n	8006338 <_dtoa_r+0x100>
 8006454:	9b02      	ldr	r3, [sp, #8]
 8006456:	f1c0 0020 	rsb	r0, r0, #32
 800645a:	fa03 f000 	lsl.w	r0, r3, r0
 800645e:	e7f0      	b.n	8006442 <_dtoa_r+0x20a>
 8006460:	2301      	movs	r3, #1
 8006462:	e7b0      	b.n	80063c6 <_dtoa_r+0x18e>
 8006464:	900d      	str	r0, [sp, #52]	; 0x34
 8006466:	e7af      	b.n	80063c8 <_dtoa_r+0x190>
 8006468:	f1ca 0300 	rsb	r3, sl, #0
 800646c:	9308      	str	r3, [sp, #32]
 800646e:	2300      	movs	r3, #0
 8006470:	eba9 090a 	sub.w	r9, r9, sl
 8006474:	930c      	str	r3, [sp, #48]	; 0x30
 8006476:	e7bc      	b.n	80063f2 <_dtoa_r+0x1ba>
 8006478:	2301      	movs	r3, #1
 800647a:	9309      	str	r3, [sp, #36]	; 0x24
 800647c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800647e:	2b00      	cmp	r3, #0
 8006480:	dd74      	ble.n	800656c <_dtoa_r+0x334>
 8006482:	4698      	mov	r8, r3
 8006484:	9304      	str	r3, [sp, #16]
 8006486:	2200      	movs	r2, #0
 8006488:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800648a:	6072      	str	r2, [r6, #4]
 800648c:	2204      	movs	r2, #4
 800648e:	f102 0014 	add.w	r0, r2, #20
 8006492:	4298      	cmp	r0, r3
 8006494:	6871      	ldr	r1, [r6, #4]
 8006496:	d96e      	bls.n	8006576 <_dtoa_r+0x33e>
 8006498:	4620      	mov	r0, r4
 800649a:	f001 f9c3 	bl	8007824 <_Balloc>
 800649e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064a0:	6030      	str	r0, [r6, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f1b8 0f0e 	cmp.w	r8, #14
 80064a8:	9306      	str	r3, [sp, #24]
 80064aa:	f200 80ed 	bhi.w	8006688 <_dtoa_r+0x450>
 80064ae:	2d00      	cmp	r5, #0
 80064b0:	f000 80ea 	beq.w	8006688 <_dtoa_r+0x450>
 80064b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064b8:	f1ba 0f00 	cmp.w	sl, #0
 80064bc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80064c0:	dd77      	ble.n	80065b2 <_dtoa_r+0x37a>
 80064c2:	4a28      	ldr	r2, [pc, #160]	; (8006564 <_dtoa_r+0x32c>)
 80064c4:	f00a 030f 	and.w	r3, sl, #15
 80064c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80064cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80064d0:	06f0      	lsls	r0, r6, #27
 80064d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80064da:	d568      	bpl.n	80065ae <_dtoa_r+0x376>
 80064dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80064e0:	4b21      	ldr	r3, [pc, #132]	; (8006568 <_dtoa_r+0x330>)
 80064e2:	2503      	movs	r5, #3
 80064e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064e8:	f7fa f98c 	bl	8000804 <__aeabi_ddiv>
 80064ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064f0:	f006 060f 	and.w	r6, r6, #15
 80064f4:	4f1c      	ldr	r7, [pc, #112]	; (8006568 <_dtoa_r+0x330>)
 80064f6:	e04f      	b.n	8006598 <_dtoa_r+0x360>
 80064f8:	2301      	movs	r3, #1
 80064fa:	9309      	str	r3, [sp, #36]	; 0x24
 80064fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80064fe:	4453      	add	r3, sl
 8006500:	f103 0801 	add.w	r8, r3, #1
 8006504:	9304      	str	r3, [sp, #16]
 8006506:	4643      	mov	r3, r8
 8006508:	2b01      	cmp	r3, #1
 800650a:	bfb8      	it	lt
 800650c:	2301      	movlt	r3, #1
 800650e:	e7ba      	b.n	8006486 <_dtoa_r+0x24e>
 8006510:	2300      	movs	r3, #0
 8006512:	e7b2      	b.n	800647a <_dtoa_r+0x242>
 8006514:	2300      	movs	r3, #0
 8006516:	e7f0      	b.n	80064fa <_dtoa_r+0x2c2>
 8006518:	2501      	movs	r5, #1
 800651a:	2300      	movs	r3, #0
 800651c:	9509      	str	r5, [sp, #36]	; 0x24
 800651e:	931e      	str	r3, [sp, #120]	; 0x78
 8006520:	f04f 33ff 	mov.w	r3, #4294967295
 8006524:	2200      	movs	r2, #0
 8006526:	9304      	str	r3, [sp, #16]
 8006528:	4698      	mov	r8, r3
 800652a:	2312      	movs	r3, #18
 800652c:	921f      	str	r2, [sp, #124]	; 0x7c
 800652e:	e7aa      	b.n	8006486 <_dtoa_r+0x24e>
 8006530:	2301      	movs	r3, #1
 8006532:	9309      	str	r3, [sp, #36]	; 0x24
 8006534:	e7f4      	b.n	8006520 <_dtoa_r+0x2e8>
 8006536:	bf00      	nop
 8006538:	636f4361 	.word	0x636f4361
 800653c:	3fd287a7 	.word	0x3fd287a7
 8006540:	8b60c8b3 	.word	0x8b60c8b3
 8006544:	3fc68a28 	.word	0x3fc68a28
 8006548:	509f79fb 	.word	0x509f79fb
 800654c:	3fd34413 	.word	0x3fd34413
 8006550:	7ff00000 	.word	0x7ff00000
 8006554:	08008a39 	.word	0x08008a39
 8006558:	08008a30 	.word	0x08008a30
 800655c:	080089b1 	.word	0x080089b1
 8006560:	3ff80000 	.word	0x3ff80000
 8006564:	08008ad8 	.word	0x08008ad8
 8006568:	08008ab0 	.word	0x08008ab0
 800656c:	2301      	movs	r3, #1
 800656e:	9304      	str	r3, [sp, #16]
 8006570:	4698      	mov	r8, r3
 8006572:	461a      	mov	r2, r3
 8006574:	e7da      	b.n	800652c <_dtoa_r+0x2f4>
 8006576:	3101      	adds	r1, #1
 8006578:	6071      	str	r1, [r6, #4]
 800657a:	0052      	lsls	r2, r2, #1
 800657c:	e787      	b.n	800648e <_dtoa_r+0x256>
 800657e:	07f1      	lsls	r1, r6, #31
 8006580:	d508      	bpl.n	8006594 <_dtoa_r+0x35c>
 8006582:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006586:	e9d7 2300 	ldrd	r2, r3, [r7]
 800658a:	f7fa f811 	bl	80005b0 <__aeabi_dmul>
 800658e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006592:	3501      	adds	r5, #1
 8006594:	1076      	asrs	r6, r6, #1
 8006596:	3708      	adds	r7, #8
 8006598:	2e00      	cmp	r6, #0
 800659a:	d1f0      	bne.n	800657e <_dtoa_r+0x346>
 800659c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80065a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065a4:	f7fa f92e 	bl	8000804 <__aeabi_ddiv>
 80065a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065ac:	e01b      	b.n	80065e6 <_dtoa_r+0x3ae>
 80065ae:	2502      	movs	r5, #2
 80065b0:	e7a0      	b.n	80064f4 <_dtoa_r+0x2bc>
 80065b2:	f000 80a4 	beq.w	80066fe <_dtoa_r+0x4c6>
 80065b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80065ba:	f1ca 0600 	rsb	r6, sl, #0
 80065be:	4ba0      	ldr	r3, [pc, #640]	; (8006840 <_dtoa_r+0x608>)
 80065c0:	f006 020f 	and.w	r2, r6, #15
 80065c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065cc:	f7f9 fff0 	bl	80005b0 <__aeabi_dmul>
 80065d0:	2502      	movs	r5, #2
 80065d2:	2300      	movs	r3, #0
 80065d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065d8:	4f9a      	ldr	r7, [pc, #616]	; (8006844 <_dtoa_r+0x60c>)
 80065da:	1136      	asrs	r6, r6, #4
 80065dc:	2e00      	cmp	r6, #0
 80065de:	f040 8083 	bne.w	80066e8 <_dtoa_r+0x4b0>
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1e0      	bne.n	80065a8 <_dtoa_r+0x370>
 80065e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 808a 	beq.w	8006702 <_dtoa_r+0x4ca>
 80065ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065f2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80065f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065fa:	2200      	movs	r2, #0
 80065fc:	4b92      	ldr	r3, [pc, #584]	; (8006848 <_dtoa_r+0x610>)
 80065fe:	f7fa fa49 	bl	8000a94 <__aeabi_dcmplt>
 8006602:	2800      	cmp	r0, #0
 8006604:	d07d      	beq.n	8006702 <_dtoa_r+0x4ca>
 8006606:	f1b8 0f00 	cmp.w	r8, #0
 800660a:	d07a      	beq.n	8006702 <_dtoa_r+0x4ca>
 800660c:	9b04      	ldr	r3, [sp, #16]
 800660e:	2b00      	cmp	r3, #0
 8006610:	dd36      	ble.n	8006680 <_dtoa_r+0x448>
 8006612:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006616:	2200      	movs	r2, #0
 8006618:	4b8c      	ldr	r3, [pc, #560]	; (800684c <_dtoa_r+0x614>)
 800661a:	f7f9 ffc9 	bl	80005b0 <__aeabi_dmul>
 800661e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006622:	9e04      	ldr	r6, [sp, #16]
 8006624:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006628:	3501      	adds	r5, #1
 800662a:	4628      	mov	r0, r5
 800662c:	f7f9 ff56 	bl	80004dc <__aeabi_i2d>
 8006630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006634:	f7f9 ffbc 	bl	80005b0 <__aeabi_dmul>
 8006638:	2200      	movs	r2, #0
 800663a:	4b85      	ldr	r3, [pc, #532]	; (8006850 <_dtoa_r+0x618>)
 800663c:	f7f9 fe02 	bl	8000244 <__adddf3>
 8006640:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006644:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006648:	950b      	str	r5, [sp, #44]	; 0x2c
 800664a:	2e00      	cmp	r6, #0
 800664c:	d15c      	bne.n	8006708 <_dtoa_r+0x4d0>
 800664e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006652:	2200      	movs	r2, #0
 8006654:	4b7f      	ldr	r3, [pc, #508]	; (8006854 <_dtoa_r+0x61c>)
 8006656:	f7f9 fdf3 	bl	8000240 <__aeabi_dsub>
 800665a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800665c:	462b      	mov	r3, r5
 800665e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006662:	f7fa fa35 	bl	8000ad0 <__aeabi_dcmpgt>
 8006666:	2800      	cmp	r0, #0
 8006668:	f040 8281 	bne.w	8006b6e <_dtoa_r+0x936>
 800666c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006670:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006672:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006676:	f7fa fa0d 	bl	8000a94 <__aeabi_dcmplt>
 800667a:	2800      	cmp	r0, #0
 800667c:	f040 8275 	bne.w	8006b6a <_dtoa_r+0x932>
 8006680:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006684:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006688:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800668a:	2b00      	cmp	r3, #0
 800668c:	f2c0 814b 	blt.w	8006926 <_dtoa_r+0x6ee>
 8006690:	f1ba 0f0e 	cmp.w	sl, #14
 8006694:	f300 8147 	bgt.w	8006926 <_dtoa_r+0x6ee>
 8006698:	4b69      	ldr	r3, [pc, #420]	; (8006840 <_dtoa_r+0x608>)
 800669a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800669e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80066a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f280 80d7 	bge.w	800685c <_dtoa_r+0x624>
 80066ae:	f1b8 0f00 	cmp.w	r8, #0
 80066b2:	f300 80d3 	bgt.w	800685c <_dtoa_r+0x624>
 80066b6:	f040 8257 	bne.w	8006b68 <_dtoa_r+0x930>
 80066ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066be:	2200      	movs	r2, #0
 80066c0:	4b64      	ldr	r3, [pc, #400]	; (8006854 <_dtoa_r+0x61c>)
 80066c2:	f7f9 ff75 	bl	80005b0 <__aeabi_dmul>
 80066c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066ca:	f7fa f9f7 	bl	8000abc <__aeabi_dcmpge>
 80066ce:	4646      	mov	r6, r8
 80066d0:	4647      	mov	r7, r8
 80066d2:	2800      	cmp	r0, #0
 80066d4:	f040 822d 	bne.w	8006b32 <_dtoa_r+0x8fa>
 80066d8:	9b06      	ldr	r3, [sp, #24]
 80066da:	9a06      	ldr	r2, [sp, #24]
 80066dc:	1c5d      	adds	r5, r3, #1
 80066de:	2331      	movs	r3, #49	; 0x31
 80066e0:	f10a 0a01 	add.w	sl, sl, #1
 80066e4:	7013      	strb	r3, [r2, #0]
 80066e6:	e228      	b.n	8006b3a <_dtoa_r+0x902>
 80066e8:	07f2      	lsls	r2, r6, #31
 80066ea:	d505      	bpl.n	80066f8 <_dtoa_r+0x4c0>
 80066ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066f0:	f7f9 ff5e 	bl	80005b0 <__aeabi_dmul>
 80066f4:	2301      	movs	r3, #1
 80066f6:	3501      	adds	r5, #1
 80066f8:	1076      	asrs	r6, r6, #1
 80066fa:	3708      	adds	r7, #8
 80066fc:	e76e      	b.n	80065dc <_dtoa_r+0x3a4>
 80066fe:	2502      	movs	r5, #2
 8006700:	e771      	b.n	80065e6 <_dtoa_r+0x3ae>
 8006702:	4657      	mov	r7, sl
 8006704:	4646      	mov	r6, r8
 8006706:	e790      	b.n	800662a <_dtoa_r+0x3f2>
 8006708:	4b4d      	ldr	r3, [pc, #308]	; (8006840 <_dtoa_r+0x608>)
 800670a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800670e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006714:	2b00      	cmp	r3, #0
 8006716:	d048      	beq.n	80067aa <_dtoa_r+0x572>
 8006718:	4602      	mov	r2, r0
 800671a:	460b      	mov	r3, r1
 800671c:	2000      	movs	r0, #0
 800671e:	494e      	ldr	r1, [pc, #312]	; (8006858 <_dtoa_r+0x620>)
 8006720:	f7fa f870 	bl	8000804 <__aeabi_ddiv>
 8006724:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006728:	f7f9 fd8a 	bl	8000240 <__aeabi_dsub>
 800672c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006730:	9d06      	ldr	r5, [sp, #24]
 8006732:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006736:	f7fa f9eb 	bl	8000b10 <__aeabi_d2iz>
 800673a:	9011      	str	r0, [sp, #68]	; 0x44
 800673c:	f7f9 fece 	bl	80004dc <__aeabi_i2d>
 8006740:	4602      	mov	r2, r0
 8006742:	460b      	mov	r3, r1
 8006744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006748:	f7f9 fd7a 	bl	8000240 <__aeabi_dsub>
 800674c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800674e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006752:	3330      	adds	r3, #48	; 0x30
 8006754:	f805 3b01 	strb.w	r3, [r5], #1
 8006758:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800675c:	f7fa f99a 	bl	8000a94 <__aeabi_dcmplt>
 8006760:	2800      	cmp	r0, #0
 8006762:	d163      	bne.n	800682c <_dtoa_r+0x5f4>
 8006764:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006768:	2000      	movs	r0, #0
 800676a:	4937      	ldr	r1, [pc, #220]	; (8006848 <_dtoa_r+0x610>)
 800676c:	f7f9 fd68 	bl	8000240 <__aeabi_dsub>
 8006770:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006774:	f7fa f98e 	bl	8000a94 <__aeabi_dcmplt>
 8006778:	2800      	cmp	r0, #0
 800677a:	f040 80b5 	bne.w	80068e8 <_dtoa_r+0x6b0>
 800677e:	9b06      	ldr	r3, [sp, #24]
 8006780:	1aeb      	subs	r3, r5, r3
 8006782:	429e      	cmp	r6, r3
 8006784:	f77f af7c 	ble.w	8006680 <_dtoa_r+0x448>
 8006788:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800678c:	2200      	movs	r2, #0
 800678e:	4b2f      	ldr	r3, [pc, #188]	; (800684c <_dtoa_r+0x614>)
 8006790:	f7f9 ff0e 	bl	80005b0 <__aeabi_dmul>
 8006794:	2200      	movs	r2, #0
 8006796:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800679a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800679e:	4b2b      	ldr	r3, [pc, #172]	; (800684c <_dtoa_r+0x614>)
 80067a0:	f7f9 ff06 	bl	80005b0 <__aeabi_dmul>
 80067a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067a8:	e7c3      	b.n	8006732 <_dtoa_r+0x4fa>
 80067aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80067ae:	f7f9 feff 	bl	80005b0 <__aeabi_dmul>
 80067b2:	9b06      	ldr	r3, [sp, #24]
 80067b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80067b8:	199d      	adds	r5, r3, r6
 80067ba:	461e      	mov	r6, r3
 80067bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067c0:	f7fa f9a6 	bl	8000b10 <__aeabi_d2iz>
 80067c4:	9011      	str	r0, [sp, #68]	; 0x44
 80067c6:	f7f9 fe89 	bl	80004dc <__aeabi_i2d>
 80067ca:	4602      	mov	r2, r0
 80067cc:	460b      	mov	r3, r1
 80067ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067d2:	f7f9 fd35 	bl	8000240 <__aeabi_dsub>
 80067d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067dc:	3330      	adds	r3, #48	; 0x30
 80067de:	f806 3b01 	strb.w	r3, [r6], #1
 80067e2:	42ae      	cmp	r6, r5
 80067e4:	f04f 0200 	mov.w	r2, #0
 80067e8:	d124      	bne.n	8006834 <_dtoa_r+0x5fc>
 80067ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80067ee:	4b1a      	ldr	r3, [pc, #104]	; (8006858 <_dtoa_r+0x620>)
 80067f0:	f7f9 fd28 	bl	8000244 <__adddf3>
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067fc:	f7fa f968 	bl	8000ad0 <__aeabi_dcmpgt>
 8006800:	2800      	cmp	r0, #0
 8006802:	d171      	bne.n	80068e8 <_dtoa_r+0x6b0>
 8006804:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006808:	2000      	movs	r0, #0
 800680a:	4913      	ldr	r1, [pc, #76]	; (8006858 <_dtoa_r+0x620>)
 800680c:	f7f9 fd18 	bl	8000240 <__aeabi_dsub>
 8006810:	4602      	mov	r2, r0
 8006812:	460b      	mov	r3, r1
 8006814:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006818:	f7fa f93c 	bl	8000a94 <__aeabi_dcmplt>
 800681c:	2800      	cmp	r0, #0
 800681e:	f43f af2f 	beq.w	8006680 <_dtoa_r+0x448>
 8006822:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006826:	1e6a      	subs	r2, r5, #1
 8006828:	2b30      	cmp	r3, #48	; 0x30
 800682a:	d001      	beq.n	8006830 <_dtoa_r+0x5f8>
 800682c:	46ba      	mov	sl, r7
 800682e:	e04a      	b.n	80068c6 <_dtoa_r+0x68e>
 8006830:	4615      	mov	r5, r2
 8006832:	e7f6      	b.n	8006822 <_dtoa_r+0x5ea>
 8006834:	4b05      	ldr	r3, [pc, #20]	; (800684c <_dtoa_r+0x614>)
 8006836:	f7f9 febb 	bl	80005b0 <__aeabi_dmul>
 800683a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800683e:	e7bd      	b.n	80067bc <_dtoa_r+0x584>
 8006840:	08008ad8 	.word	0x08008ad8
 8006844:	08008ab0 	.word	0x08008ab0
 8006848:	3ff00000 	.word	0x3ff00000
 800684c:	40240000 	.word	0x40240000
 8006850:	401c0000 	.word	0x401c0000
 8006854:	40140000 	.word	0x40140000
 8006858:	3fe00000 	.word	0x3fe00000
 800685c:	9d06      	ldr	r5, [sp, #24]
 800685e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006862:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006866:	4630      	mov	r0, r6
 8006868:	4639      	mov	r1, r7
 800686a:	f7f9 ffcb 	bl	8000804 <__aeabi_ddiv>
 800686e:	f7fa f94f 	bl	8000b10 <__aeabi_d2iz>
 8006872:	4681      	mov	r9, r0
 8006874:	f7f9 fe32 	bl	80004dc <__aeabi_i2d>
 8006878:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800687c:	f7f9 fe98 	bl	80005b0 <__aeabi_dmul>
 8006880:	4602      	mov	r2, r0
 8006882:	460b      	mov	r3, r1
 8006884:	4630      	mov	r0, r6
 8006886:	4639      	mov	r1, r7
 8006888:	f7f9 fcda 	bl	8000240 <__aeabi_dsub>
 800688c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006890:	f805 6b01 	strb.w	r6, [r5], #1
 8006894:	9e06      	ldr	r6, [sp, #24]
 8006896:	4602      	mov	r2, r0
 8006898:	1bae      	subs	r6, r5, r6
 800689a:	45b0      	cmp	r8, r6
 800689c:	460b      	mov	r3, r1
 800689e:	d135      	bne.n	800690c <_dtoa_r+0x6d4>
 80068a0:	f7f9 fcd0 	bl	8000244 <__adddf3>
 80068a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068a8:	4606      	mov	r6, r0
 80068aa:	460f      	mov	r7, r1
 80068ac:	f7fa f910 	bl	8000ad0 <__aeabi_dcmpgt>
 80068b0:	b9c8      	cbnz	r0, 80068e6 <_dtoa_r+0x6ae>
 80068b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068b6:	4630      	mov	r0, r6
 80068b8:	4639      	mov	r1, r7
 80068ba:	f7fa f8e1 	bl	8000a80 <__aeabi_dcmpeq>
 80068be:	b110      	cbz	r0, 80068c6 <_dtoa_r+0x68e>
 80068c0:	f019 0f01 	tst.w	r9, #1
 80068c4:	d10f      	bne.n	80068e6 <_dtoa_r+0x6ae>
 80068c6:	4659      	mov	r1, fp
 80068c8:	4620      	mov	r0, r4
 80068ca:	f000 ffdf 	bl	800788c <_Bfree>
 80068ce:	2300      	movs	r3, #0
 80068d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80068d2:	702b      	strb	r3, [r5, #0]
 80068d4:	f10a 0301 	add.w	r3, sl, #1
 80068d8:	6013      	str	r3, [r2, #0]
 80068da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f43f acf3 	beq.w	80062c8 <_dtoa_r+0x90>
 80068e2:	601d      	str	r5, [r3, #0]
 80068e4:	e4f0      	b.n	80062c8 <_dtoa_r+0x90>
 80068e6:	4657      	mov	r7, sl
 80068e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80068ec:	1e6b      	subs	r3, r5, #1
 80068ee:	2a39      	cmp	r2, #57	; 0x39
 80068f0:	d106      	bne.n	8006900 <_dtoa_r+0x6c8>
 80068f2:	9a06      	ldr	r2, [sp, #24]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d107      	bne.n	8006908 <_dtoa_r+0x6d0>
 80068f8:	2330      	movs	r3, #48	; 0x30
 80068fa:	7013      	strb	r3, [r2, #0]
 80068fc:	4613      	mov	r3, r2
 80068fe:	3701      	adds	r7, #1
 8006900:	781a      	ldrb	r2, [r3, #0]
 8006902:	3201      	adds	r2, #1
 8006904:	701a      	strb	r2, [r3, #0]
 8006906:	e791      	b.n	800682c <_dtoa_r+0x5f4>
 8006908:	461d      	mov	r5, r3
 800690a:	e7ed      	b.n	80068e8 <_dtoa_r+0x6b0>
 800690c:	2200      	movs	r2, #0
 800690e:	4b99      	ldr	r3, [pc, #612]	; (8006b74 <_dtoa_r+0x93c>)
 8006910:	f7f9 fe4e 	bl	80005b0 <__aeabi_dmul>
 8006914:	2200      	movs	r2, #0
 8006916:	2300      	movs	r3, #0
 8006918:	4606      	mov	r6, r0
 800691a:	460f      	mov	r7, r1
 800691c:	f7fa f8b0 	bl	8000a80 <__aeabi_dcmpeq>
 8006920:	2800      	cmp	r0, #0
 8006922:	d09e      	beq.n	8006862 <_dtoa_r+0x62a>
 8006924:	e7cf      	b.n	80068c6 <_dtoa_r+0x68e>
 8006926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006928:	2a00      	cmp	r2, #0
 800692a:	f000 8088 	beq.w	8006a3e <_dtoa_r+0x806>
 800692e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006930:	2a01      	cmp	r2, #1
 8006932:	dc6d      	bgt.n	8006a10 <_dtoa_r+0x7d8>
 8006934:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006936:	2a00      	cmp	r2, #0
 8006938:	d066      	beq.n	8006a08 <_dtoa_r+0x7d0>
 800693a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800693e:	464d      	mov	r5, r9
 8006940:	9e08      	ldr	r6, [sp, #32]
 8006942:	9a07      	ldr	r2, [sp, #28]
 8006944:	2101      	movs	r1, #1
 8006946:	441a      	add	r2, r3
 8006948:	4620      	mov	r0, r4
 800694a:	4499      	add	r9, r3
 800694c:	9207      	str	r2, [sp, #28]
 800694e:	f001 f87b 	bl	8007a48 <__i2b>
 8006952:	4607      	mov	r7, r0
 8006954:	2d00      	cmp	r5, #0
 8006956:	dd0b      	ble.n	8006970 <_dtoa_r+0x738>
 8006958:	9b07      	ldr	r3, [sp, #28]
 800695a:	2b00      	cmp	r3, #0
 800695c:	dd08      	ble.n	8006970 <_dtoa_r+0x738>
 800695e:	42ab      	cmp	r3, r5
 8006960:	bfa8      	it	ge
 8006962:	462b      	movge	r3, r5
 8006964:	9a07      	ldr	r2, [sp, #28]
 8006966:	eba9 0903 	sub.w	r9, r9, r3
 800696a:	1aed      	subs	r5, r5, r3
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	9307      	str	r3, [sp, #28]
 8006970:	9b08      	ldr	r3, [sp, #32]
 8006972:	b1eb      	cbz	r3, 80069b0 <_dtoa_r+0x778>
 8006974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006976:	2b00      	cmp	r3, #0
 8006978:	d065      	beq.n	8006a46 <_dtoa_r+0x80e>
 800697a:	b18e      	cbz	r6, 80069a0 <_dtoa_r+0x768>
 800697c:	4639      	mov	r1, r7
 800697e:	4632      	mov	r2, r6
 8006980:	4620      	mov	r0, r4
 8006982:	f001 f8ff 	bl	8007b84 <__pow5mult>
 8006986:	465a      	mov	r2, fp
 8006988:	4601      	mov	r1, r0
 800698a:	4607      	mov	r7, r0
 800698c:	4620      	mov	r0, r4
 800698e:	f001 f864 	bl	8007a5a <__multiply>
 8006992:	4659      	mov	r1, fp
 8006994:	900a      	str	r0, [sp, #40]	; 0x28
 8006996:	4620      	mov	r0, r4
 8006998:	f000 ff78 	bl	800788c <_Bfree>
 800699c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800699e:	469b      	mov	fp, r3
 80069a0:	9b08      	ldr	r3, [sp, #32]
 80069a2:	1b9a      	subs	r2, r3, r6
 80069a4:	d004      	beq.n	80069b0 <_dtoa_r+0x778>
 80069a6:	4659      	mov	r1, fp
 80069a8:	4620      	mov	r0, r4
 80069aa:	f001 f8eb 	bl	8007b84 <__pow5mult>
 80069ae:	4683      	mov	fp, r0
 80069b0:	2101      	movs	r1, #1
 80069b2:	4620      	mov	r0, r4
 80069b4:	f001 f848 	bl	8007a48 <__i2b>
 80069b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069ba:	4606      	mov	r6, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 81c6 	beq.w	8006d4e <_dtoa_r+0xb16>
 80069c2:	461a      	mov	r2, r3
 80069c4:	4601      	mov	r1, r0
 80069c6:	4620      	mov	r0, r4
 80069c8:	f001 f8dc 	bl	8007b84 <__pow5mult>
 80069cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80069ce:	4606      	mov	r6, r0
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	dc3e      	bgt.n	8006a52 <_dtoa_r+0x81a>
 80069d4:	9b02      	ldr	r3, [sp, #8]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d137      	bne.n	8006a4a <_dtoa_r+0x812>
 80069da:	9b03      	ldr	r3, [sp, #12]
 80069dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d134      	bne.n	8006a4e <_dtoa_r+0x816>
 80069e4:	9b03      	ldr	r3, [sp, #12]
 80069e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069ea:	0d1b      	lsrs	r3, r3, #20
 80069ec:	051b      	lsls	r3, r3, #20
 80069ee:	b12b      	cbz	r3, 80069fc <_dtoa_r+0x7c4>
 80069f0:	9b07      	ldr	r3, [sp, #28]
 80069f2:	f109 0901 	add.w	r9, r9, #1
 80069f6:	3301      	adds	r3, #1
 80069f8:	9307      	str	r3, [sp, #28]
 80069fa:	2301      	movs	r3, #1
 80069fc:	9308      	str	r3, [sp, #32]
 80069fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d128      	bne.n	8006a56 <_dtoa_r+0x81e>
 8006a04:	2001      	movs	r0, #1
 8006a06:	e02e      	b.n	8006a66 <_dtoa_r+0x82e>
 8006a08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a0a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006a0e:	e796      	b.n	800693e <_dtoa_r+0x706>
 8006a10:	9b08      	ldr	r3, [sp, #32]
 8006a12:	f108 36ff 	add.w	r6, r8, #4294967295
 8006a16:	42b3      	cmp	r3, r6
 8006a18:	bfb7      	itett	lt
 8006a1a:	9b08      	ldrlt	r3, [sp, #32]
 8006a1c:	1b9e      	subge	r6, r3, r6
 8006a1e:	1af2      	sublt	r2, r6, r3
 8006a20:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006a22:	bfbf      	itttt	lt
 8006a24:	9608      	strlt	r6, [sp, #32]
 8006a26:	189b      	addlt	r3, r3, r2
 8006a28:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006a2a:	2600      	movlt	r6, #0
 8006a2c:	f1b8 0f00 	cmp.w	r8, #0
 8006a30:	bfb9      	ittee	lt
 8006a32:	eba9 0508 	sublt.w	r5, r9, r8
 8006a36:	2300      	movlt	r3, #0
 8006a38:	464d      	movge	r5, r9
 8006a3a:	4643      	movge	r3, r8
 8006a3c:	e781      	b.n	8006942 <_dtoa_r+0x70a>
 8006a3e:	9e08      	ldr	r6, [sp, #32]
 8006a40:	464d      	mov	r5, r9
 8006a42:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006a44:	e786      	b.n	8006954 <_dtoa_r+0x71c>
 8006a46:	9a08      	ldr	r2, [sp, #32]
 8006a48:	e7ad      	b.n	80069a6 <_dtoa_r+0x76e>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	e7d6      	b.n	80069fc <_dtoa_r+0x7c4>
 8006a4e:	9b02      	ldr	r3, [sp, #8]
 8006a50:	e7d4      	b.n	80069fc <_dtoa_r+0x7c4>
 8006a52:	2300      	movs	r3, #0
 8006a54:	9308      	str	r3, [sp, #32]
 8006a56:	6933      	ldr	r3, [r6, #16]
 8006a58:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006a5c:	6918      	ldr	r0, [r3, #16]
 8006a5e:	f000 ffa5 	bl	80079ac <__hi0bits>
 8006a62:	f1c0 0020 	rsb	r0, r0, #32
 8006a66:	9b07      	ldr	r3, [sp, #28]
 8006a68:	4418      	add	r0, r3
 8006a6a:	f010 001f 	ands.w	r0, r0, #31
 8006a6e:	d047      	beq.n	8006b00 <_dtoa_r+0x8c8>
 8006a70:	f1c0 0320 	rsb	r3, r0, #32
 8006a74:	2b04      	cmp	r3, #4
 8006a76:	dd3b      	ble.n	8006af0 <_dtoa_r+0x8b8>
 8006a78:	9b07      	ldr	r3, [sp, #28]
 8006a7a:	f1c0 001c 	rsb	r0, r0, #28
 8006a7e:	4481      	add	r9, r0
 8006a80:	4405      	add	r5, r0
 8006a82:	4403      	add	r3, r0
 8006a84:	9307      	str	r3, [sp, #28]
 8006a86:	f1b9 0f00 	cmp.w	r9, #0
 8006a8a:	dd05      	ble.n	8006a98 <_dtoa_r+0x860>
 8006a8c:	4659      	mov	r1, fp
 8006a8e:	464a      	mov	r2, r9
 8006a90:	4620      	mov	r0, r4
 8006a92:	f001 f8c5 	bl	8007c20 <__lshift>
 8006a96:	4683      	mov	fp, r0
 8006a98:	9b07      	ldr	r3, [sp, #28]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	dd05      	ble.n	8006aaa <_dtoa_r+0x872>
 8006a9e:	4631      	mov	r1, r6
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f001 f8bc 	bl	8007c20 <__lshift>
 8006aa8:	4606      	mov	r6, r0
 8006aaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006aac:	b353      	cbz	r3, 8006b04 <_dtoa_r+0x8cc>
 8006aae:	4631      	mov	r1, r6
 8006ab0:	4658      	mov	r0, fp
 8006ab2:	f001 f909 	bl	8007cc8 <__mcmp>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	da24      	bge.n	8006b04 <_dtoa_r+0x8cc>
 8006aba:	2300      	movs	r3, #0
 8006abc:	4659      	mov	r1, fp
 8006abe:	220a      	movs	r2, #10
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f000 fefa 	bl	80078ba <__multadd>
 8006ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006acc:	4683      	mov	fp, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 8144 	beq.w	8006d5c <_dtoa_r+0xb24>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	4639      	mov	r1, r7
 8006ad8:	220a      	movs	r2, #10
 8006ada:	4620      	mov	r0, r4
 8006adc:	f000 feed 	bl	80078ba <__multadd>
 8006ae0:	9b04      	ldr	r3, [sp, #16]
 8006ae2:	4607      	mov	r7, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	dc4d      	bgt.n	8006b84 <_dtoa_r+0x94c>
 8006ae8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	dd4a      	ble.n	8006b84 <_dtoa_r+0x94c>
 8006aee:	e011      	b.n	8006b14 <_dtoa_r+0x8dc>
 8006af0:	d0c9      	beq.n	8006a86 <_dtoa_r+0x84e>
 8006af2:	9a07      	ldr	r2, [sp, #28]
 8006af4:	331c      	adds	r3, #28
 8006af6:	441a      	add	r2, r3
 8006af8:	4499      	add	r9, r3
 8006afa:	441d      	add	r5, r3
 8006afc:	4613      	mov	r3, r2
 8006afe:	e7c1      	b.n	8006a84 <_dtoa_r+0x84c>
 8006b00:	4603      	mov	r3, r0
 8006b02:	e7f6      	b.n	8006af2 <_dtoa_r+0x8ba>
 8006b04:	f1b8 0f00 	cmp.w	r8, #0
 8006b08:	dc36      	bgt.n	8006b78 <_dtoa_r+0x940>
 8006b0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	dd33      	ble.n	8006b78 <_dtoa_r+0x940>
 8006b10:	f8cd 8010 	str.w	r8, [sp, #16]
 8006b14:	9b04      	ldr	r3, [sp, #16]
 8006b16:	b963      	cbnz	r3, 8006b32 <_dtoa_r+0x8fa>
 8006b18:	4631      	mov	r1, r6
 8006b1a:	2205      	movs	r2, #5
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	f000 fecc 	bl	80078ba <__multadd>
 8006b22:	4601      	mov	r1, r0
 8006b24:	4606      	mov	r6, r0
 8006b26:	4658      	mov	r0, fp
 8006b28:	f001 f8ce 	bl	8007cc8 <__mcmp>
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	f73f add3 	bgt.w	80066d8 <_dtoa_r+0x4a0>
 8006b32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006b34:	9d06      	ldr	r5, [sp, #24]
 8006b36:	ea6f 0a03 	mvn.w	sl, r3
 8006b3a:	f04f 0900 	mov.w	r9, #0
 8006b3e:	4631      	mov	r1, r6
 8006b40:	4620      	mov	r0, r4
 8006b42:	f000 fea3 	bl	800788c <_Bfree>
 8006b46:	2f00      	cmp	r7, #0
 8006b48:	f43f aebd 	beq.w	80068c6 <_dtoa_r+0x68e>
 8006b4c:	f1b9 0f00 	cmp.w	r9, #0
 8006b50:	d005      	beq.n	8006b5e <_dtoa_r+0x926>
 8006b52:	45b9      	cmp	r9, r7
 8006b54:	d003      	beq.n	8006b5e <_dtoa_r+0x926>
 8006b56:	4649      	mov	r1, r9
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f000 fe97 	bl	800788c <_Bfree>
 8006b5e:	4639      	mov	r1, r7
 8006b60:	4620      	mov	r0, r4
 8006b62:	f000 fe93 	bl	800788c <_Bfree>
 8006b66:	e6ae      	b.n	80068c6 <_dtoa_r+0x68e>
 8006b68:	2600      	movs	r6, #0
 8006b6a:	4637      	mov	r7, r6
 8006b6c:	e7e1      	b.n	8006b32 <_dtoa_r+0x8fa>
 8006b6e:	46ba      	mov	sl, r7
 8006b70:	4637      	mov	r7, r6
 8006b72:	e5b1      	b.n	80066d8 <_dtoa_r+0x4a0>
 8006b74:	40240000 	.word	0x40240000
 8006b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b7a:	f8cd 8010 	str.w	r8, [sp, #16]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f000 80f3 	beq.w	8006d6a <_dtoa_r+0xb32>
 8006b84:	2d00      	cmp	r5, #0
 8006b86:	dd05      	ble.n	8006b94 <_dtoa_r+0x95c>
 8006b88:	4639      	mov	r1, r7
 8006b8a:	462a      	mov	r2, r5
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f001 f847 	bl	8007c20 <__lshift>
 8006b92:	4607      	mov	r7, r0
 8006b94:	9b08      	ldr	r3, [sp, #32]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d04c      	beq.n	8006c34 <_dtoa_r+0x9fc>
 8006b9a:	6879      	ldr	r1, [r7, #4]
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f000 fe41 	bl	8007824 <_Balloc>
 8006ba2:	4605      	mov	r5, r0
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	f107 010c 	add.w	r1, r7, #12
 8006baa:	3202      	adds	r2, #2
 8006bac:	0092      	lsls	r2, r2, #2
 8006bae:	300c      	adds	r0, #12
 8006bb0:	f7fd fc50 	bl	8004454 <memcpy>
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	4629      	mov	r1, r5
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f001 f831 	bl	8007c20 <__lshift>
 8006bbe:	46b9      	mov	r9, r7
 8006bc0:	4607      	mov	r7, r0
 8006bc2:	9b06      	ldr	r3, [sp, #24]
 8006bc4:	9307      	str	r3, [sp, #28]
 8006bc6:	9b02      	ldr	r3, [sp, #8]
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	9308      	str	r3, [sp, #32]
 8006bce:	4631      	mov	r1, r6
 8006bd0:	4658      	mov	r0, fp
 8006bd2:	f7ff faa3 	bl	800611c <quorem>
 8006bd6:	4649      	mov	r1, r9
 8006bd8:	4605      	mov	r5, r0
 8006bda:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006bde:	4658      	mov	r0, fp
 8006be0:	f001 f872 	bl	8007cc8 <__mcmp>
 8006be4:	463a      	mov	r2, r7
 8006be6:	9002      	str	r0, [sp, #8]
 8006be8:	4631      	mov	r1, r6
 8006bea:	4620      	mov	r0, r4
 8006bec:	f001 f886 	bl	8007cfc <__mdiff>
 8006bf0:	68c3      	ldr	r3, [r0, #12]
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	bb03      	cbnz	r3, 8006c38 <_dtoa_r+0xa00>
 8006bf6:	4601      	mov	r1, r0
 8006bf8:	9009      	str	r0, [sp, #36]	; 0x24
 8006bfa:	4658      	mov	r0, fp
 8006bfc:	f001 f864 	bl	8007cc8 <__mcmp>
 8006c00:	4603      	mov	r3, r0
 8006c02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c04:	4611      	mov	r1, r2
 8006c06:	4620      	mov	r0, r4
 8006c08:	9309      	str	r3, [sp, #36]	; 0x24
 8006c0a:	f000 fe3f 	bl	800788c <_Bfree>
 8006c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c10:	b9a3      	cbnz	r3, 8006c3c <_dtoa_r+0xa04>
 8006c12:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006c14:	b992      	cbnz	r2, 8006c3c <_dtoa_r+0xa04>
 8006c16:	9a08      	ldr	r2, [sp, #32]
 8006c18:	b982      	cbnz	r2, 8006c3c <_dtoa_r+0xa04>
 8006c1a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006c1e:	d029      	beq.n	8006c74 <_dtoa_r+0xa3c>
 8006c20:	9b02      	ldr	r3, [sp, #8]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	dd01      	ble.n	8006c2a <_dtoa_r+0x9f2>
 8006c26:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006c2a:	9b07      	ldr	r3, [sp, #28]
 8006c2c:	1c5d      	adds	r5, r3, #1
 8006c2e:	f883 8000 	strb.w	r8, [r3]
 8006c32:	e784      	b.n	8006b3e <_dtoa_r+0x906>
 8006c34:	4638      	mov	r0, r7
 8006c36:	e7c2      	b.n	8006bbe <_dtoa_r+0x986>
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e7e3      	b.n	8006c04 <_dtoa_r+0x9cc>
 8006c3c:	9a02      	ldr	r2, [sp, #8]
 8006c3e:	2a00      	cmp	r2, #0
 8006c40:	db04      	blt.n	8006c4c <_dtoa_r+0xa14>
 8006c42:	d123      	bne.n	8006c8c <_dtoa_r+0xa54>
 8006c44:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006c46:	bb0a      	cbnz	r2, 8006c8c <_dtoa_r+0xa54>
 8006c48:	9a08      	ldr	r2, [sp, #32]
 8006c4a:	b9fa      	cbnz	r2, 8006c8c <_dtoa_r+0xa54>
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	ddec      	ble.n	8006c2a <_dtoa_r+0x9f2>
 8006c50:	4659      	mov	r1, fp
 8006c52:	2201      	movs	r2, #1
 8006c54:	4620      	mov	r0, r4
 8006c56:	f000 ffe3 	bl	8007c20 <__lshift>
 8006c5a:	4631      	mov	r1, r6
 8006c5c:	4683      	mov	fp, r0
 8006c5e:	f001 f833 	bl	8007cc8 <__mcmp>
 8006c62:	2800      	cmp	r0, #0
 8006c64:	dc03      	bgt.n	8006c6e <_dtoa_r+0xa36>
 8006c66:	d1e0      	bne.n	8006c2a <_dtoa_r+0x9f2>
 8006c68:	f018 0f01 	tst.w	r8, #1
 8006c6c:	d0dd      	beq.n	8006c2a <_dtoa_r+0x9f2>
 8006c6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006c72:	d1d8      	bne.n	8006c26 <_dtoa_r+0x9ee>
 8006c74:	9b07      	ldr	r3, [sp, #28]
 8006c76:	9a07      	ldr	r2, [sp, #28]
 8006c78:	1c5d      	adds	r5, r3, #1
 8006c7a:	2339      	movs	r3, #57	; 0x39
 8006c7c:	7013      	strb	r3, [r2, #0]
 8006c7e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c82:	1e6a      	subs	r2, r5, #1
 8006c84:	2b39      	cmp	r3, #57	; 0x39
 8006c86:	d04d      	beq.n	8006d24 <_dtoa_r+0xaec>
 8006c88:	3301      	adds	r3, #1
 8006c8a:	e052      	b.n	8006d32 <_dtoa_r+0xafa>
 8006c8c:	9a07      	ldr	r2, [sp, #28]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f102 0501 	add.w	r5, r2, #1
 8006c94:	dd06      	ble.n	8006ca4 <_dtoa_r+0xa6c>
 8006c96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006c9a:	d0eb      	beq.n	8006c74 <_dtoa_r+0xa3c>
 8006c9c:	f108 0801 	add.w	r8, r8, #1
 8006ca0:	9b07      	ldr	r3, [sp, #28]
 8006ca2:	e7c4      	b.n	8006c2e <_dtoa_r+0x9f6>
 8006ca4:	9b06      	ldr	r3, [sp, #24]
 8006ca6:	9a04      	ldr	r2, [sp, #16]
 8006ca8:	1aeb      	subs	r3, r5, r3
 8006caa:	4293      	cmp	r3, r2
 8006cac:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006cb0:	d021      	beq.n	8006cf6 <_dtoa_r+0xabe>
 8006cb2:	4659      	mov	r1, fp
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	220a      	movs	r2, #10
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f000 fdfe 	bl	80078ba <__multadd>
 8006cbe:	45b9      	cmp	r9, r7
 8006cc0:	4683      	mov	fp, r0
 8006cc2:	f04f 0300 	mov.w	r3, #0
 8006cc6:	f04f 020a 	mov.w	r2, #10
 8006cca:	4649      	mov	r1, r9
 8006ccc:	4620      	mov	r0, r4
 8006cce:	d105      	bne.n	8006cdc <_dtoa_r+0xaa4>
 8006cd0:	f000 fdf3 	bl	80078ba <__multadd>
 8006cd4:	4681      	mov	r9, r0
 8006cd6:	4607      	mov	r7, r0
 8006cd8:	9507      	str	r5, [sp, #28]
 8006cda:	e778      	b.n	8006bce <_dtoa_r+0x996>
 8006cdc:	f000 fded 	bl	80078ba <__multadd>
 8006ce0:	4639      	mov	r1, r7
 8006ce2:	4681      	mov	r9, r0
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	220a      	movs	r2, #10
 8006ce8:	4620      	mov	r0, r4
 8006cea:	f000 fde6 	bl	80078ba <__multadd>
 8006cee:	4607      	mov	r7, r0
 8006cf0:	e7f2      	b.n	8006cd8 <_dtoa_r+0xaa0>
 8006cf2:	f04f 0900 	mov.w	r9, #0
 8006cf6:	4659      	mov	r1, fp
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f000 ff90 	bl	8007c20 <__lshift>
 8006d00:	4631      	mov	r1, r6
 8006d02:	4683      	mov	fp, r0
 8006d04:	f000 ffe0 	bl	8007cc8 <__mcmp>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	dcb8      	bgt.n	8006c7e <_dtoa_r+0xa46>
 8006d0c:	d102      	bne.n	8006d14 <_dtoa_r+0xadc>
 8006d0e:	f018 0f01 	tst.w	r8, #1
 8006d12:	d1b4      	bne.n	8006c7e <_dtoa_r+0xa46>
 8006d14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d18:	1e6a      	subs	r2, r5, #1
 8006d1a:	2b30      	cmp	r3, #48	; 0x30
 8006d1c:	f47f af0f 	bne.w	8006b3e <_dtoa_r+0x906>
 8006d20:	4615      	mov	r5, r2
 8006d22:	e7f7      	b.n	8006d14 <_dtoa_r+0xadc>
 8006d24:	9b06      	ldr	r3, [sp, #24]
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d105      	bne.n	8006d36 <_dtoa_r+0xafe>
 8006d2a:	2331      	movs	r3, #49	; 0x31
 8006d2c:	9a06      	ldr	r2, [sp, #24]
 8006d2e:	f10a 0a01 	add.w	sl, sl, #1
 8006d32:	7013      	strb	r3, [r2, #0]
 8006d34:	e703      	b.n	8006b3e <_dtoa_r+0x906>
 8006d36:	4615      	mov	r5, r2
 8006d38:	e7a1      	b.n	8006c7e <_dtoa_r+0xa46>
 8006d3a:	4b17      	ldr	r3, [pc, #92]	; (8006d98 <_dtoa_r+0xb60>)
 8006d3c:	f7ff bae1 	b.w	8006302 <_dtoa_r+0xca>
 8006d40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f47f aabb 	bne.w	80062be <_dtoa_r+0x86>
 8006d48:	4b14      	ldr	r3, [pc, #80]	; (8006d9c <_dtoa_r+0xb64>)
 8006d4a:	f7ff bada 	b.w	8006302 <_dtoa_r+0xca>
 8006d4e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	f77f ae3f 	ble.w	80069d4 <_dtoa_r+0x79c>
 8006d56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d58:	9308      	str	r3, [sp, #32]
 8006d5a:	e653      	b.n	8006a04 <_dtoa_r+0x7cc>
 8006d5c:	9b04      	ldr	r3, [sp, #16]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	dc03      	bgt.n	8006d6a <_dtoa_r+0xb32>
 8006d62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	f73f aed5 	bgt.w	8006b14 <_dtoa_r+0x8dc>
 8006d6a:	9d06      	ldr	r5, [sp, #24]
 8006d6c:	4631      	mov	r1, r6
 8006d6e:	4658      	mov	r0, fp
 8006d70:	f7ff f9d4 	bl	800611c <quorem>
 8006d74:	9b06      	ldr	r3, [sp, #24]
 8006d76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006d7a:	f805 8b01 	strb.w	r8, [r5], #1
 8006d7e:	9a04      	ldr	r2, [sp, #16]
 8006d80:	1aeb      	subs	r3, r5, r3
 8006d82:	429a      	cmp	r2, r3
 8006d84:	ddb5      	ble.n	8006cf2 <_dtoa_r+0xaba>
 8006d86:	4659      	mov	r1, fp
 8006d88:	2300      	movs	r3, #0
 8006d8a:	220a      	movs	r2, #10
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	f000 fd94 	bl	80078ba <__multadd>
 8006d92:	4683      	mov	fp, r0
 8006d94:	e7ea      	b.n	8006d6c <_dtoa_r+0xb34>
 8006d96:	bf00      	nop
 8006d98:	080089b0 	.word	0x080089b0
 8006d9c:	08008a30 	.word	0x08008a30

08006da0 <__sflush_r>:
 8006da0:	898a      	ldrh	r2, [r1, #12]
 8006da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006da6:	4605      	mov	r5, r0
 8006da8:	0710      	lsls	r0, r2, #28
 8006daa:	460c      	mov	r4, r1
 8006dac:	d458      	bmi.n	8006e60 <__sflush_r+0xc0>
 8006dae:	684b      	ldr	r3, [r1, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	dc05      	bgt.n	8006dc0 <__sflush_r+0x20>
 8006db4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	dc02      	bgt.n	8006dc0 <__sflush_r+0x20>
 8006dba:	2000      	movs	r0, #0
 8006dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dc2:	2e00      	cmp	r6, #0
 8006dc4:	d0f9      	beq.n	8006dba <__sflush_r+0x1a>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006dcc:	682f      	ldr	r7, [r5, #0]
 8006dce:	6a21      	ldr	r1, [r4, #32]
 8006dd0:	602b      	str	r3, [r5, #0]
 8006dd2:	d032      	beq.n	8006e3a <__sflush_r+0x9a>
 8006dd4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006dd6:	89a3      	ldrh	r3, [r4, #12]
 8006dd8:	075a      	lsls	r2, r3, #29
 8006dda:	d505      	bpl.n	8006de8 <__sflush_r+0x48>
 8006ddc:	6863      	ldr	r3, [r4, #4]
 8006dde:	1ac0      	subs	r0, r0, r3
 8006de0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006de2:	b10b      	cbz	r3, 8006de8 <__sflush_r+0x48>
 8006de4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006de6:	1ac0      	subs	r0, r0, r3
 8006de8:	2300      	movs	r3, #0
 8006dea:	4602      	mov	r2, r0
 8006dec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dee:	6a21      	ldr	r1, [r4, #32]
 8006df0:	4628      	mov	r0, r5
 8006df2:	47b0      	blx	r6
 8006df4:	1c43      	adds	r3, r0, #1
 8006df6:	89a3      	ldrh	r3, [r4, #12]
 8006df8:	d106      	bne.n	8006e08 <__sflush_r+0x68>
 8006dfa:	6829      	ldr	r1, [r5, #0]
 8006dfc:	291d      	cmp	r1, #29
 8006dfe:	d848      	bhi.n	8006e92 <__sflush_r+0xf2>
 8006e00:	4a29      	ldr	r2, [pc, #164]	; (8006ea8 <__sflush_r+0x108>)
 8006e02:	40ca      	lsrs	r2, r1
 8006e04:	07d6      	lsls	r6, r2, #31
 8006e06:	d544      	bpl.n	8006e92 <__sflush_r+0xf2>
 8006e08:	2200      	movs	r2, #0
 8006e0a:	6062      	str	r2, [r4, #4]
 8006e0c:	6922      	ldr	r2, [r4, #16]
 8006e0e:	04d9      	lsls	r1, r3, #19
 8006e10:	6022      	str	r2, [r4, #0]
 8006e12:	d504      	bpl.n	8006e1e <__sflush_r+0x7e>
 8006e14:	1c42      	adds	r2, r0, #1
 8006e16:	d101      	bne.n	8006e1c <__sflush_r+0x7c>
 8006e18:	682b      	ldr	r3, [r5, #0]
 8006e1a:	b903      	cbnz	r3, 8006e1e <__sflush_r+0x7e>
 8006e1c:	6560      	str	r0, [r4, #84]	; 0x54
 8006e1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e20:	602f      	str	r7, [r5, #0]
 8006e22:	2900      	cmp	r1, #0
 8006e24:	d0c9      	beq.n	8006dba <__sflush_r+0x1a>
 8006e26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e2a:	4299      	cmp	r1, r3
 8006e2c:	d002      	beq.n	8006e34 <__sflush_r+0x94>
 8006e2e:	4628      	mov	r0, r5
 8006e30:	f001 f8fe 	bl	8008030 <_free_r>
 8006e34:	2000      	movs	r0, #0
 8006e36:	6360      	str	r0, [r4, #52]	; 0x34
 8006e38:	e7c0      	b.n	8006dbc <__sflush_r+0x1c>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	4628      	mov	r0, r5
 8006e3e:	47b0      	blx	r6
 8006e40:	1c41      	adds	r1, r0, #1
 8006e42:	d1c8      	bne.n	8006dd6 <__sflush_r+0x36>
 8006e44:	682b      	ldr	r3, [r5, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d0c5      	beq.n	8006dd6 <__sflush_r+0x36>
 8006e4a:	2b1d      	cmp	r3, #29
 8006e4c:	d001      	beq.n	8006e52 <__sflush_r+0xb2>
 8006e4e:	2b16      	cmp	r3, #22
 8006e50:	d101      	bne.n	8006e56 <__sflush_r+0xb6>
 8006e52:	602f      	str	r7, [r5, #0]
 8006e54:	e7b1      	b.n	8006dba <__sflush_r+0x1a>
 8006e56:	89a3      	ldrh	r3, [r4, #12]
 8006e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e5c:	81a3      	strh	r3, [r4, #12]
 8006e5e:	e7ad      	b.n	8006dbc <__sflush_r+0x1c>
 8006e60:	690f      	ldr	r7, [r1, #16]
 8006e62:	2f00      	cmp	r7, #0
 8006e64:	d0a9      	beq.n	8006dba <__sflush_r+0x1a>
 8006e66:	0793      	lsls	r3, r2, #30
 8006e68:	bf18      	it	ne
 8006e6a:	2300      	movne	r3, #0
 8006e6c:	680e      	ldr	r6, [r1, #0]
 8006e6e:	bf08      	it	eq
 8006e70:	694b      	ldreq	r3, [r1, #20]
 8006e72:	eba6 0807 	sub.w	r8, r6, r7
 8006e76:	600f      	str	r7, [r1, #0]
 8006e78:	608b      	str	r3, [r1, #8]
 8006e7a:	f1b8 0f00 	cmp.w	r8, #0
 8006e7e:	dd9c      	ble.n	8006dba <__sflush_r+0x1a>
 8006e80:	4643      	mov	r3, r8
 8006e82:	463a      	mov	r2, r7
 8006e84:	6a21      	ldr	r1, [r4, #32]
 8006e86:	4628      	mov	r0, r5
 8006e88:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e8a:	47b0      	blx	r6
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	dc06      	bgt.n	8006e9e <__sflush_r+0xfe>
 8006e90:	89a3      	ldrh	r3, [r4, #12]
 8006e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e96:	81a3      	strh	r3, [r4, #12]
 8006e98:	f04f 30ff 	mov.w	r0, #4294967295
 8006e9c:	e78e      	b.n	8006dbc <__sflush_r+0x1c>
 8006e9e:	4407      	add	r7, r0
 8006ea0:	eba8 0800 	sub.w	r8, r8, r0
 8006ea4:	e7e9      	b.n	8006e7a <__sflush_r+0xda>
 8006ea6:	bf00      	nop
 8006ea8:	20400001 	.word	0x20400001

08006eac <_fflush_r>:
 8006eac:	b538      	push	{r3, r4, r5, lr}
 8006eae:	690b      	ldr	r3, [r1, #16]
 8006eb0:	4605      	mov	r5, r0
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	b1db      	cbz	r3, 8006eee <_fflush_r+0x42>
 8006eb6:	b118      	cbz	r0, 8006ec0 <_fflush_r+0x14>
 8006eb8:	6983      	ldr	r3, [r0, #24]
 8006eba:	b90b      	cbnz	r3, 8006ec0 <_fflush_r+0x14>
 8006ebc:	f000 f860 	bl	8006f80 <__sinit>
 8006ec0:	4b0c      	ldr	r3, [pc, #48]	; (8006ef4 <_fflush_r+0x48>)
 8006ec2:	429c      	cmp	r4, r3
 8006ec4:	d109      	bne.n	8006eda <_fflush_r+0x2e>
 8006ec6:	686c      	ldr	r4, [r5, #4]
 8006ec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ecc:	b17b      	cbz	r3, 8006eee <_fflush_r+0x42>
 8006ece:	4621      	mov	r1, r4
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ed6:	f7ff bf63 	b.w	8006da0 <__sflush_r>
 8006eda:	4b07      	ldr	r3, [pc, #28]	; (8006ef8 <_fflush_r+0x4c>)
 8006edc:	429c      	cmp	r4, r3
 8006ede:	d101      	bne.n	8006ee4 <_fflush_r+0x38>
 8006ee0:	68ac      	ldr	r4, [r5, #8]
 8006ee2:	e7f1      	b.n	8006ec8 <_fflush_r+0x1c>
 8006ee4:	4b05      	ldr	r3, [pc, #20]	; (8006efc <_fflush_r+0x50>)
 8006ee6:	429c      	cmp	r4, r3
 8006ee8:	bf08      	it	eq
 8006eea:	68ec      	ldreq	r4, [r5, #12]
 8006eec:	e7ec      	b.n	8006ec8 <_fflush_r+0x1c>
 8006eee:	2000      	movs	r0, #0
 8006ef0:	bd38      	pop	{r3, r4, r5, pc}
 8006ef2:	bf00      	nop
 8006ef4:	08008a60 	.word	0x08008a60
 8006ef8:	08008a80 	.word	0x08008a80
 8006efc:	08008a40 	.word	0x08008a40

08006f00 <std>:
 8006f00:	2300      	movs	r3, #0
 8006f02:	b510      	push	{r4, lr}
 8006f04:	4604      	mov	r4, r0
 8006f06:	e9c0 3300 	strd	r3, r3, [r0]
 8006f0a:	6083      	str	r3, [r0, #8]
 8006f0c:	8181      	strh	r1, [r0, #12]
 8006f0e:	6643      	str	r3, [r0, #100]	; 0x64
 8006f10:	81c2      	strh	r2, [r0, #14]
 8006f12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f16:	6183      	str	r3, [r0, #24]
 8006f18:	4619      	mov	r1, r3
 8006f1a:	2208      	movs	r2, #8
 8006f1c:	305c      	adds	r0, #92	; 0x5c
 8006f1e:	f7fd faa4 	bl	800446a <memset>
 8006f22:	4b05      	ldr	r3, [pc, #20]	; (8006f38 <std+0x38>)
 8006f24:	6224      	str	r4, [r4, #32]
 8006f26:	6263      	str	r3, [r4, #36]	; 0x24
 8006f28:	4b04      	ldr	r3, [pc, #16]	; (8006f3c <std+0x3c>)
 8006f2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f2c:	4b04      	ldr	r3, [pc, #16]	; (8006f40 <std+0x40>)
 8006f2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f30:	4b04      	ldr	r3, [pc, #16]	; (8006f44 <std+0x44>)
 8006f32:	6323      	str	r3, [r4, #48]	; 0x30
 8006f34:	bd10      	pop	{r4, pc}
 8006f36:	bf00      	nop
 8006f38:	080086bd 	.word	0x080086bd
 8006f3c:	080086df 	.word	0x080086df
 8006f40:	08008717 	.word	0x08008717
 8006f44:	0800873b 	.word	0x0800873b

08006f48 <_cleanup_r>:
 8006f48:	4901      	ldr	r1, [pc, #4]	; (8006f50 <_cleanup_r+0x8>)
 8006f4a:	f000 b885 	b.w	8007058 <_fwalk_reent>
 8006f4e:	bf00      	nop
 8006f50:	08006ead 	.word	0x08006ead

08006f54 <__sfmoreglue>:
 8006f54:	b570      	push	{r4, r5, r6, lr}
 8006f56:	2568      	movs	r5, #104	; 0x68
 8006f58:	1e4a      	subs	r2, r1, #1
 8006f5a:	4355      	muls	r5, r2
 8006f5c:	460e      	mov	r6, r1
 8006f5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f62:	f001 f8b1 	bl	80080c8 <_malloc_r>
 8006f66:	4604      	mov	r4, r0
 8006f68:	b140      	cbz	r0, 8006f7c <__sfmoreglue+0x28>
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	e9c0 1600 	strd	r1, r6, [r0]
 8006f70:	300c      	adds	r0, #12
 8006f72:	60a0      	str	r0, [r4, #8]
 8006f74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f78:	f7fd fa77 	bl	800446a <memset>
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	bd70      	pop	{r4, r5, r6, pc}

08006f80 <__sinit>:
 8006f80:	6983      	ldr	r3, [r0, #24]
 8006f82:	b510      	push	{r4, lr}
 8006f84:	4604      	mov	r4, r0
 8006f86:	bb33      	cbnz	r3, 8006fd6 <__sinit+0x56>
 8006f88:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006f8c:	6503      	str	r3, [r0, #80]	; 0x50
 8006f8e:	4b12      	ldr	r3, [pc, #72]	; (8006fd8 <__sinit+0x58>)
 8006f90:	4a12      	ldr	r2, [pc, #72]	; (8006fdc <__sinit+0x5c>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6282      	str	r2, [r0, #40]	; 0x28
 8006f96:	4298      	cmp	r0, r3
 8006f98:	bf04      	itt	eq
 8006f9a:	2301      	moveq	r3, #1
 8006f9c:	6183      	streq	r3, [r0, #24]
 8006f9e:	f000 f81f 	bl	8006fe0 <__sfp>
 8006fa2:	6060      	str	r0, [r4, #4]
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	f000 f81b 	bl	8006fe0 <__sfp>
 8006faa:	60a0      	str	r0, [r4, #8]
 8006fac:	4620      	mov	r0, r4
 8006fae:	f000 f817 	bl	8006fe0 <__sfp>
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	60e0      	str	r0, [r4, #12]
 8006fb6:	2104      	movs	r1, #4
 8006fb8:	6860      	ldr	r0, [r4, #4]
 8006fba:	f7ff ffa1 	bl	8006f00 <std>
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	2109      	movs	r1, #9
 8006fc2:	68a0      	ldr	r0, [r4, #8]
 8006fc4:	f7ff ff9c 	bl	8006f00 <std>
 8006fc8:	2202      	movs	r2, #2
 8006fca:	2112      	movs	r1, #18
 8006fcc:	68e0      	ldr	r0, [r4, #12]
 8006fce:	f7ff ff97 	bl	8006f00 <std>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	61a3      	str	r3, [r4, #24]
 8006fd6:	bd10      	pop	{r4, pc}
 8006fd8:	0800899c 	.word	0x0800899c
 8006fdc:	08006f49 	.word	0x08006f49

08006fe0 <__sfp>:
 8006fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe2:	4b1b      	ldr	r3, [pc, #108]	; (8007050 <__sfp+0x70>)
 8006fe4:	4607      	mov	r7, r0
 8006fe6:	681e      	ldr	r6, [r3, #0]
 8006fe8:	69b3      	ldr	r3, [r6, #24]
 8006fea:	b913      	cbnz	r3, 8006ff2 <__sfp+0x12>
 8006fec:	4630      	mov	r0, r6
 8006fee:	f7ff ffc7 	bl	8006f80 <__sinit>
 8006ff2:	3648      	adds	r6, #72	; 0x48
 8006ff4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	d503      	bpl.n	8007004 <__sfp+0x24>
 8006ffc:	6833      	ldr	r3, [r6, #0]
 8006ffe:	b133      	cbz	r3, 800700e <__sfp+0x2e>
 8007000:	6836      	ldr	r6, [r6, #0]
 8007002:	e7f7      	b.n	8006ff4 <__sfp+0x14>
 8007004:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007008:	b16d      	cbz	r5, 8007026 <__sfp+0x46>
 800700a:	3468      	adds	r4, #104	; 0x68
 800700c:	e7f4      	b.n	8006ff8 <__sfp+0x18>
 800700e:	2104      	movs	r1, #4
 8007010:	4638      	mov	r0, r7
 8007012:	f7ff ff9f 	bl	8006f54 <__sfmoreglue>
 8007016:	6030      	str	r0, [r6, #0]
 8007018:	2800      	cmp	r0, #0
 800701a:	d1f1      	bne.n	8007000 <__sfp+0x20>
 800701c:	230c      	movs	r3, #12
 800701e:	4604      	mov	r4, r0
 8007020:	603b      	str	r3, [r7, #0]
 8007022:	4620      	mov	r0, r4
 8007024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007026:	4b0b      	ldr	r3, [pc, #44]	; (8007054 <__sfp+0x74>)
 8007028:	6665      	str	r5, [r4, #100]	; 0x64
 800702a:	e9c4 5500 	strd	r5, r5, [r4]
 800702e:	60a5      	str	r5, [r4, #8]
 8007030:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007034:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007038:	2208      	movs	r2, #8
 800703a:	4629      	mov	r1, r5
 800703c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007040:	f7fd fa13 	bl	800446a <memset>
 8007044:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007048:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800704c:	e7e9      	b.n	8007022 <__sfp+0x42>
 800704e:	bf00      	nop
 8007050:	0800899c 	.word	0x0800899c
 8007054:	ffff0001 	.word	0xffff0001

08007058 <_fwalk_reent>:
 8007058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800705c:	4680      	mov	r8, r0
 800705e:	4689      	mov	r9, r1
 8007060:	2600      	movs	r6, #0
 8007062:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007066:	b914      	cbnz	r4, 800706e <_fwalk_reent+0x16>
 8007068:	4630      	mov	r0, r6
 800706a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800706e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007072:	3f01      	subs	r7, #1
 8007074:	d501      	bpl.n	800707a <_fwalk_reent+0x22>
 8007076:	6824      	ldr	r4, [r4, #0]
 8007078:	e7f5      	b.n	8007066 <_fwalk_reent+0xe>
 800707a:	89ab      	ldrh	r3, [r5, #12]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d907      	bls.n	8007090 <_fwalk_reent+0x38>
 8007080:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007084:	3301      	adds	r3, #1
 8007086:	d003      	beq.n	8007090 <_fwalk_reent+0x38>
 8007088:	4629      	mov	r1, r5
 800708a:	4640      	mov	r0, r8
 800708c:	47c8      	blx	r9
 800708e:	4306      	orrs	r6, r0
 8007090:	3568      	adds	r5, #104	; 0x68
 8007092:	e7ee      	b.n	8007072 <_fwalk_reent+0x1a>

08007094 <rshift>:
 8007094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007096:	6906      	ldr	r6, [r0, #16]
 8007098:	114b      	asrs	r3, r1, #5
 800709a:	429e      	cmp	r6, r3
 800709c:	f100 0414 	add.w	r4, r0, #20
 80070a0:	dd31      	ble.n	8007106 <rshift+0x72>
 80070a2:	f011 011f 	ands.w	r1, r1, #31
 80070a6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80070aa:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80070ae:	d108      	bne.n	80070c2 <rshift+0x2e>
 80070b0:	4621      	mov	r1, r4
 80070b2:	42b2      	cmp	r2, r6
 80070b4:	460b      	mov	r3, r1
 80070b6:	d211      	bcs.n	80070dc <rshift+0x48>
 80070b8:	f852 3b04 	ldr.w	r3, [r2], #4
 80070bc:	f841 3b04 	str.w	r3, [r1], #4
 80070c0:	e7f7      	b.n	80070b2 <rshift+0x1e>
 80070c2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80070c6:	4623      	mov	r3, r4
 80070c8:	f1c1 0c20 	rsb	ip, r1, #32
 80070cc:	40cd      	lsrs	r5, r1
 80070ce:	3204      	adds	r2, #4
 80070d0:	42b2      	cmp	r2, r6
 80070d2:	4617      	mov	r7, r2
 80070d4:	d30d      	bcc.n	80070f2 <rshift+0x5e>
 80070d6:	601d      	str	r5, [r3, #0]
 80070d8:	b105      	cbz	r5, 80070dc <rshift+0x48>
 80070da:	3304      	adds	r3, #4
 80070dc:	42a3      	cmp	r3, r4
 80070de:	eba3 0204 	sub.w	r2, r3, r4
 80070e2:	bf08      	it	eq
 80070e4:	2300      	moveq	r3, #0
 80070e6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80070ea:	6102      	str	r2, [r0, #16]
 80070ec:	bf08      	it	eq
 80070ee:	6143      	streq	r3, [r0, #20]
 80070f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070f2:	683f      	ldr	r7, [r7, #0]
 80070f4:	fa07 f70c 	lsl.w	r7, r7, ip
 80070f8:	433d      	orrs	r5, r7
 80070fa:	f843 5b04 	str.w	r5, [r3], #4
 80070fe:	f852 5b04 	ldr.w	r5, [r2], #4
 8007102:	40cd      	lsrs	r5, r1
 8007104:	e7e4      	b.n	80070d0 <rshift+0x3c>
 8007106:	4623      	mov	r3, r4
 8007108:	e7e8      	b.n	80070dc <rshift+0x48>

0800710a <__hexdig_fun>:
 800710a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800710e:	2b09      	cmp	r3, #9
 8007110:	d802      	bhi.n	8007118 <__hexdig_fun+0xe>
 8007112:	3820      	subs	r0, #32
 8007114:	b2c0      	uxtb	r0, r0
 8007116:	4770      	bx	lr
 8007118:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800711c:	2b05      	cmp	r3, #5
 800711e:	d801      	bhi.n	8007124 <__hexdig_fun+0x1a>
 8007120:	3847      	subs	r0, #71	; 0x47
 8007122:	e7f7      	b.n	8007114 <__hexdig_fun+0xa>
 8007124:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007128:	2b05      	cmp	r3, #5
 800712a:	d801      	bhi.n	8007130 <__hexdig_fun+0x26>
 800712c:	3827      	subs	r0, #39	; 0x27
 800712e:	e7f1      	b.n	8007114 <__hexdig_fun+0xa>
 8007130:	2000      	movs	r0, #0
 8007132:	4770      	bx	lr

08007134 <__gethex>:
 8007134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007138:	b08b      	sub	sp, #44	; 0x2c
 800713a:	9002      	str	r0, [sp, #8]
 800713c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800713e:	468a      	mov	sl, r1
 8007140:	4690      	mov	r8, r2
 8007142:	9306      	str	r3, [sp, #24]
 8007144:	f000 fad1 	bl	80076ea <__localeconv_l>
 8007148:	6803      	ldr	r3, [r0, #0]
 800714a:	f04f 0b00 	mov.w	fp, #0
 800714e:	4618      	mov	r0, r3
 8007150:	9303      	str	r3, [sp, #12]
 8007152:	f7f9 f869 	bl	8000228 <strlen>
 8007156:	9b03      	ldr	r3, [sp, #12]
 8007158:	9001      	str	r0, [sp, #4]
 800715a:	4403      	add	r3, r0
 800715c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007160:	9307      	str	r3, [sp, #28]
 8007162:	f8da 3000 	ldr.w	r3, [sl]
 8007166:	3302      	adds	r3, #2
 8007168:	461f      	mov	r7, r3
 800716a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800716e:	2830      	cmp	r0, #48	; 0x30
 8007170:	d06c      	beq.n	800724c <__gethex+0x118>
 8007172:	f7ff ffca 	bl	800710a <__hexdig_fun>
 8007176:	4604      	mov	r4, r0
 8007178:	2800      	cmp	r0, #0
 800717a:	d16a      	bne.n	8007252 <__gethex+0x11e>
 800717c:	9a01      	ldr	r2, [sp, #4]
 800717e:	9903      	ldr	r1, [sp, #12]
 8007180:	4638      	mov	r0, r7
 8007182:	f001 fade 	bl	8008742 <strncmp>
 8007186:	2800      	cmp	r0, #0
 8007188:	d166      	bne.n	8007258 <__gethex+0x124>
 800718a:	9b01      	ldr	r3, [sp, #4]
 800718c:	5cf8      	ldrb	r0, [r7, r3]
 800718e:	18fe      	adds	r6, r7, r3
 8007190:	f7ff ffbb 	bl	800710a <__hexdig_fun>
 8007194:	2800      	cmp	r0, #0
 8007196:	d062      	beq.n	800725e <__gethex+0x12a>
 8007198:	4633      	mov	r3, r6
 800719a:	7818      	ldrb	r0, [r3, #0]
 800719c:	461f      	mov	r7, r3
 800719e:	2830      	cmp	r0, #48	; 0x30
 80071a0:	f103 0301 	add.w	r3, r3, #1
 80071a4:	d0f9      	beq.n	800719a <__gethex+0x66>
 80071a6:	f7ff ffb0 	bl	800710a <__hexdig_fun>
 80071aa:	fab0 f580 	clz	r5, r0
 80071ae:	4634      	mov	r4, r6
 80071b0:	f04f 0b01 	mov.w	fp, #1
 80071b4:	096d      	lsrs	r5, r5, #5
 80071b6:	463a      	mov	r2, r7
 80071b8:	4616      	mov	r6, r2
 80071ba:	7830      	ldrb	r0, [r6, #0]
 80071bc:	3201      	adds	r2, #1
 80071be:	f7ff ffa4 	bl	800710a <__hexdig_fun>
 80071c2:	2800      	cmp	r0, #0
 80071c4:	d1f8      	bne.n	80071b8 <__gethex+0x84>
 80071c6:	9a01      	ldr	r2, [sp, #4]
 80071c8:	9903      	ldr	r1, [sp, #12]
 80071ca:	4630      	mov	r0, r6
 80071cc:	f001 fab9 	bl	8008742 <strncmp>
 80071d0:	b950      	cbnz	r0, 80071e8 <__gethex+0xb4>
 80071d2:	b954      	cbnz	r4, 80071ea <__gethex+0xb6>
 80071d4:	9b01      	ldr	r3, [sp, #4]
 80071d6:	18f4      	adds	r4, r6, r3
 80071d8:	4622      	mov	r2, r4
 80071da:	4616      	mov	r6, r2
 80071dc:	7830      	ldrb	r0, [r6, #0]
 80071de:	3201      	adds	r2, #1
 80071e0:	f7ff ff93 	bl	800710a <__hexdig_fun>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	d1f8      	bne.n	80071da <__gethex+0xa6>
 80071e8:	b10c      	cbz	r4, 80071ee <__gethex+0xba>
 80071ea:	1ba4      	subs	r4, r4, r6
 80071ec:	00a4      	lsls	r4, r4, #2
 80071ee:	7833      	ldrb	r3, [r6, #0]
 80071f0:	2b50      	cmp	r3, #80	; 0x50
 80071f2:	d001      	beq.n	80071f8 <__gethex+0xc4>
 80071f4:	2b70      	cmp	r3, #112	; 0x70
 80071f6:	d140      	bne.n	800727a <__gethex+0x146>
 80071f8:	7873      	ldrb	r3, [r6, #1]
 80071fa:	2b2b      	cmp	r3, #43	; 0x2b
 80071fc:	d031      	beq.n	8007262 <__gethex+0x12e>
 80071fe:	2b2d      	cmp	r3, #45	; 0x2d
 8007200:	d033      	beq.n	800726a <__gethex+0x136>
 8007202:	f04f 0900 	mov.w	r9, #0
 8007206:	1c71      	adds	r1, r6, #1
 8007208:	7808      	ldrb	r0, [r1, #0]
 800720a:	f7ff ff7e 	bl	800710a <__hexdig_fun>
 800720e:	1e43      	subs	r3, r0, #1
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b18      	cmp	r3, #24
 8007214:	d831      	bhi.n	800727a <__gethex+0x146>
 8007216:	f1a0 0210 	sub.w	r2, r0, #16
 800721a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800721e:	f7ff ff74 	bl	800710a <__hexdig_fun>
 8007222:	1e43      	subs	r3, r0, #1
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b18      	cmp	r3, #24
 8007228:	d922      	bls.n	8007270 <__gethex+0x13c>
 800722a:	f1b9 0f00 	cmp.w	r9, #0
 800722e:	d000      	beq.n	8007232 <__gethex+0xfe>
 8007230:	4252      	negs	r2, r2
 8007232:	4414      	add	r4, r2
 8007234:	f8ca 1000 	str.w	r1, [sl]
 8007238:	b30d      	cbz	r5, 800727e <__gethex+0x14a>
 800723a:	f1bb 0f00 	cmp.w	fp, #0
 800723e:	bf0c      	ite	eq
 8007240:	2706      	moveq	r7, #6
 8007242:	2700      	movne	r7, #0
 8007244:	4638      	mov	r0, r7
 8007246:	b00b      	add	sp, #44	; 0x2c
 8007248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800724c:	f10b 0b01 	add.w	fp, fp, #1
 8007250:	e78a      	b.n	8007168 <__gethex+0x34>
 8007252:	2500      	movs	r5, #0
 8007254:	462c      	mov	r4, r5
 8007256:	e7ae      	b.n	80071b6 <__gethex+0x82>
 8007258:	463e      	mov	r6, r7
 800725a:	2501      	movs	r5, #1
 800725c:	e7c7      	b.n	80071ee <__gethex+0xba>
 800725e:	4604      	mov	r4, r0
 8007260:	e7fb      	b.n	800725a <__gethex+0x126>
 8007262:	f04f 0900 	mov.w	r9, #0
 8007266:	1cb1      	adds	r1, r6, #2
 8007268:	e7ce      	b.n	8007208 <__gethex+0xd4>
 800726a:	f04f 0901 	mov.w	r9, #1
 800726e:	e7fa      	b.n	8007266 <__gethex+0x132>
 8007270:	230a      	movs	r3, #10
 8007272:	fb03 0202 	mla	r2, r3, r2, r0
 8007276:	3a10      	subs	r2, #16
 8007278:	e7cf      	b.n	800721a <__gethex+0xe6>
 800727a:	4631      	mov	r1, r6
 800727c:	e7da      	b.n	8007234 <__gethex+0x100>
 800727e:	4629      	mov	r1, r5
 8007280:	1bf3      	subs	r3, r6, r7
 8007282:	3b01      	subs	r3, #1
 8007284:	2b07      	cmp	r3, #7
 8007286:	dc49      	bgt.n	800731c <__gethex+0x1e8>
 8007288:	9802      	ldr	r0, [sp, #8]
 800728a:	f000 facb 	bl	8007824 <_Balloc>
 800728e:	f04f 0b00 	mov.w	fp, #0
 8007292:	4605      	mov	r5, r0
 8007294:	46da      	mov	sl, fp
 8007296:	9b01      	ldr	r3, [sp, #4]
 8007298:	f100 0914 	add.w	r9, r0, #20
 800729c:	f1c3 0301 	rsb	r3, r3, #1
 80072a0:	f8cd 9010 	str.w	r9, [sp, #16]
 80072a4:	9308      	str	r3, [sp, #32]
 80072a6:	42b7      	cmp	r7, r6
 80072a8:	d33b      	bcc.n	8007322 <__gethex+0x1ee>
 80072aa:	9804      	ldr	r0, [sp, #16]
 80072ac:	f840 ab04 	str.w	sl, [r0], #4
 80072b0:	eba0 0009 	sub.w	r0, r0, r9
 80072b4:	1080      	asrs	r0, r0, #2
 80072b6:	6128      	str	r0, [r5, #16]
 80072b8:	0147      	lsls	r7, r0, #5
 80072ba:	4650      	mov	r0, sl
 80072bc:	f000 fb76 	bl	80079ac <__hi0bits>
 80072c0:	f8d8 6000 	ldr.w	r6, [r8]
 80072c4:	1a3f      	subs	r7, r7, r0
 80072c6:	42b7      	cmp	r7, r6
 80072c8:	dd64      	ble.n	8007394 <__gethex+0x260>
 80072ca:	1bbf      	subs	r7, r7, r6
 80072cc:	4639      	mov	r1, r7
 80072ce:	4628      	mov	r0, r5
 80072d0:	f000 fe7f 	bl	8007fd2 <__any_on>
 80072d4:	4682      	mov	sl, r0
 80072d6:	b178      	cbz	r0, 80072f8 <__gethex+0x1c4>
 80072d8:	f04f 0a01 	mov.w	sl, #1
 80072dc:	1e7b      	subs	r3, r7, #1
 80072de:	1159      	asrs	r1, r3, #5
 80072e0:	f003 021f 	and.w	r2, r3, #31
 80072e4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80072e8:	fa0a f202 	lsl.w	r2, sl, r2
 80072ec:	420a      	tst	r2, r1
 80072ee:	d003      	beq.n	80072f8 <__gethex+0x1c4>
 80072f0:	4553      	cmp	r3, sl
 80072f2:	dc46      	bgt.n	8007382 <__gethex+0x24e>
 80072f4:	f04f 0a02 	mov.w	sl, #2
 80072f8:	4639      	mov	r1, r7
 80072fa:	4628      	mov	r0, r5
 80072fc:	f7ff feca 	bl	8007094 <rshift>
 8007300:	443c      	add	r4, r7
 8007302:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007306:	42a3      	cmp	r3, r4
 8007308:	da52      	bge.n	80073b0 <__gethex+0x27c>
 800730a:	4629      	mov	r1, r5
 800730c:	9802      	ldr	r0, [sp, #8]
 800730e:	f000 fabd 	bl	800788c <_Bfree>
 8007312:	2300      	movs	r3, #0
 8007314:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007316:	27a3      	movs	r7, #163	; 0xa3
 8007318:	6013      	str	r3, [r2, #0]
 800731a:	e793      	b.n	8007244 <__gethex+0x110>
 800731c:	3101      	adds	r1, #1
 800731e:	105b      	asrs	r3, r3, #1
 8007320:	e7b0      	b.n	8007284 <__gethex+0x150>
 8007322:	1e73      	subs	r3, r6, #1
 8007324:	9305      	str	r3, [sp, #20]
 8007326:	9a07      	ldr	r2, [sp, #28]
 8007328:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800732c:	4293      	cmp	r3, r2
 800732e:	d018      	beq.n	8007362 <__gethex+0x22e>
 8007330:	f1bb 0f20 	cmp.w	fp, #32
 8007334:	d107      	bne.n	8007346 <__gethex+0x212>
 8007336:	9b04      	ldr	r3, [sp, #16]
 8007338:	f8c3 a000 	str.w	sl, [r3]
 800733c:	f04f 0a00 	mov.w	sl, #0
 8007340:	46d3      	mov	fp, sl
 8007342:	3304      	adds	r3, #4
 8007344:	9304      	str	r3, [sp, #16]
 8007346:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800734a:	f7ff fede 	bl	800710a <__hexdig_fun>
 800734e:	f000 000f 	and.w	r0, r0, #15
 8007352:	fa00 f00b 	lsl.w	r0, r0, fp
 8007356:	ea4a 0a00 	orr.w	sl, sl, r0
 800735a:	f10b 0b04 	add.w	fp, fp, #4
 800735e:	9b05      	ldr	r3, [sp, #20]
 8007360:	e00d      	b.n	800737e <__gethex+0x24a>
 8007362:	9b05      	ldr	r3, [sp, #20]
 8007364:	9a08      	ldr	r2, [sp, #32]
 8007366:	4413      	add	r3, r2
 8007368:	42bb      	cmp	r3, r7
 800736a:	d3e1      	bcc.n	8007330 <__gethex+0x1fc>
 800736c:	4618      	mov	r0, r3
 800736e:	9a01      	ldr	r2, [sp, #4]
 8007370:	9903      	ldr	r1, [sp, #12]
 8007372:	9309      	str	r3, [sp, #36]	; 0x24
 8007374:	f001 f9e5 	bl	8008742 <strncmp>
 8007378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800737a:	2800      	cmp	r0, #0
 800737c:	d1d8      	bne.n	8007330 <__gethex+0x1fc>
 800737e:	461e      	mov	r6, r3
 8007380:	e791      	b.n	80072a6 <__gethex+0x172>
 8007382:	1eb9      	subs	r1, r7, #2
 8007384:	4628      	mov	r0, r5
 8007386:	f000 fe24 	bl	8007fd2 <__any_on>
 800738a:	2800      	cmp	r0, #0
 800738c:	d0b2      	beq.n	80072f4 <__gethex+0x1c0>
 800738e:	f04f 0a03 	mov.w	sl, #3
 8007392:	e7b1      	b.n	80072f8 <__gethex+0x1c4>
 8007394:	da09      	bge.n	80073aa <__gethex+0x276>
 8007396:	1bf7      	subs	r7, r6, r7
 8007398:	4629      	mov	r1, r5
 800739a:	463a      	mov	r2, r7
 800739c:	9802      	ldr	r0, [sp, #8]
 800739e:	f000 fc3f 	bl	8007c20 <__lshift>
 80073a2:	4605      	mov	r5, r0
 80073a4:	1be4      	subs	r4, r4, r7
 80073a6:	f100 0914 	add.w	r9, r0, #20
 80073aa:	f04f 0a00 	mov.w	sl, #0
 80073ae:	e7a8      	b.n	8007302 <__gethex+0x1ce>
 80073b0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80073b4:	42a0      	cmp	r0, r4
 80073b6:	dd6b      	ble.n	8007490 <__gethex+0x35c>
 80073b8:	1b04      	subs	r4, r0, r4
 80073ba:	42a6      	cmp	r6, r4
 80073bc:	dc2e      	bgt.n	800741c <__gethex+0x2e8>
 80073be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d022      	beq.n	800740c <__gethex+0x2d8>
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d024      	beq.n	8007414 <__gethex+0x2e0>
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d115      	bne.n	80073fa <__gethex+0x2c6>
 80073ce:	42a6      	cmp	r6, r4
 80073d0:	d113      	bne.n	80073fa <__gethex+0x2c6>
 80073d2:	2e01      	cmp	r6, #1
 80073d4:	dc0b      	bgt.n	80073ee <__gethex+0x2ba>
 80073d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80073da:	9a06      	ldr	r2, [sp, #24]
 80073dc:	2762      	movs	r7, #98	; 0x62
 80073de:	6013      	str	r3, [r2, #0]
 80073e0:	2301      	movs	r3, #1
 80073e2:	612b      	str	r3, [r5, #16]
 80073e4:	f8c9 3000 	str.w	r3, [r9]
 80073e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80073ea:	601d      	str	r5, [r3, #0]
 80073ec:	e72a      	b.n	8007244 <__gethex+0x110>
 80073ee:	1e71      	subs	r1, r6, #1
 80073f0:	4628      	mov	r0, r5
 80073f2:	f000 fdee 	bl	8007fd2 <__any_on>
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d1ed      	bne.n	80073d6 <__gethex+0x2a2>
 80073fa:	4629      	mov	r1, r5
 80073fc:	9802      	ldr	r0, [sp, #8]
 80073fe:	f000 fa45 	bl	800788c <_Bfree>
 8007402:	2300      	movs	r3, #0
 8007404:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007406:	2750      	movs	r7, #80	; 0x50
 8007408:	6013      	str	r3, [r2, #0]
 800740a:	e71b      	b.n	8007244 <__gethex+0x110>
 800740c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800740e:	2b00      	cmp	r3, #0
 8007410:	d0e1      	beq.n	80073d6 <__gethex+0x2a2>
 8007412:	e7f2      	b.n	80073fa <__gethex+0x2c6>
 8007414:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1dd      	bne.n	80073d6 <__gethex+0x2a2>
 800741a:	e7ee      	b.n	80073fa <__gethex+0x2c6>
 800741c:	1e67      	subs	r7, r4, #1
 800741e:	f1ba 0f00 	cmp.w	sl, #0
 8007422:	d132      	bne.n	800748a <__gethex+0x356>
 8007424:	b127      	cbz	r7, 8007430 <__gethex+0x2fc>
 8007426:	4639      	mov	r1, r7
 8007428:	4628      	mov	r0, r5
 800742a:	f000 fdd2 	bl	8007fd2 <__any_on>
 800742e:	4682      	mov	sl, r0
 8007430:	2301      	movs	r3, #1
 8007432:	117a      	asrs	r2, r7, #5
 8007434:	f007 071f 	and.w	r7, r7, #31
 8007438:	fa03 f707 	lsl.w	r7, r3, r7
 800743c:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8007440:	4621      	mov	r1, r4
 8007442:	421f      	tst	r7, r3
 8007444:	f04f 0702 	mov.w	r7, #2
 8007448:	4628      	mov	r0, r5
 800744a:	bf18      	it	ne
 800744c:	f04a 0a02 	orrne.w	sl, sl, #2
 8007450:	1b36      	subs	r6, r6, r4
 8007452:	f7ff fe1f 	bl	8007094 <rshift>
 8007456:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800745a:	f1ba 0f00 	cmp.w	sl, #0
 800745e:	d048      	beq.n	80074f2 <__gethex+0x3be>
 8007460:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007464:	2b02      	cmp	r3, #2
 8007466:	d015      	beq.n	8007494 <__gethex+0x360>
 8007468:	2b03      	cmp	r3, #3
 800746a:	d017      	beq.n	800749c <__gethex+0x368>
 800746c:	2b01      	cmp	r3, #1
 800746e:	d109      	bne.n	8007484 <__gethex+0x350>
 8007470:	f01a 0f02 	tst.w	sl, #2
 8007474:	d006      	beq.n	8007484 <__gethex+0x350>
 8007476:	f8d9 3000 	ldr.w	r3, [r9]
 800747a:	ea4a 0a03 	orr.w	sl, sl, r3
 800747e:	f01a 0f01 	tst.w	sl, #1
 8007482:	d10e      	bne.n	80074a2 <__gethex+0x36e>
 8007484:	f047 0710 	orr.w	r7, r7, #16
 8007488:	e033      	b.n	80074f2 <__gethex+0x3be>
 800748a:	f04f 0a01 	mov.w	sl, #1
 800748e:	e7cf      	b.n	8007430 <__gethex+0x2fc>
 8007490:	2701      	movs	r7, #1
 8007492:	e7e2      	b.n	800745a <__gethex+0x326>
 8007494:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007496:	f1c3 0301 	rsb	r3, r3, #1
 800749a:	9315      	str	r3, [sp, #84]	; 0x54
 800749c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d0f0      	beq.n	8007484 <__gethex+0x350>
 80074a2:	f04f 0c00 	mov.w	ip, #0
 80074a6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80074aa:	f105 0314 	add.w	r3, r5, #20
 80074ae:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80074b2:	eb03 010a 	add.w	r1, r3, sl
 80074b6:	4618      	mov	r0, r3
 80074b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80074bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80074c0:	d01c      	beq.n	80074fc <__gethex+0x3c8>
 80074c2:	3201      	adds	r2, #1
 80074c4:	6002      	str	r2, [r0, #0]
 80074c6:	2f02      	cmp	r7, #2
 80074c8:	f105 0314 	add.w	r3, r5, #20
 80074cc:	d138      	bne.n	8007540 <__gethex+0x40c>
 80074ce:	f8d8 2000 	ldr.w	r2, [r8]
 80074d2:	3a01      	subs	r2, #1
 80074d4:	42b2      	cmp	r2, r6
 80074d6:	d10a      	bne.n	80074ee <__gethex+0x3ba>
 80074d8:	2201      	movs	r2, #1
 80074da:	1171      	asrs	r1, r6, #5
 80074dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80074e0:	f006 061f 	and.w	r6, r6, #31
 80074e4:	fa02 f606 	lsl.w	r6, r2, r6
 80074e8:	421e      	tst	r6, r3
 80074ea:	bf18      	it	ne
 80074ec:	4617      	movne	r7, r2
 80074ee:	f047 0720 	orr.w	r7, r7, #32
 80074f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074f4:	601d      	str	r5, [r3, #0]
 80074f6:	9b06      	ldr	r3, [sp, #24]
 80074f8:	601c      	str	r4, [r3, #0]
 80074fa:	e6a3      	b.n	8007244 <__gethex+0x110>
 80074fc:	4299      	cmp	r1, r3
 80074fe:	f843 cc04 	str.w	ip, [r3, #-4]
 8007502:	d8d8      	bhi.n	80074b6 <__gethex+0x382>
 8007504:	68ab      	ldr	r3, [r5, #8]
 8007506:	4599      	cmp	r9, r3
 8007508:	db12      	blt.n	8007530 <__gethex+0x3fc>
 800750a:	6869      	ldr	r1, [r5, #4]
 800750c:	9802      	ldr	r0, [sp, #8]
 800750e:	3101      	adds	r1, #1
 8007510:	f000 f988 	bl	8007824 <_Balloc>
 8007514:	4683      	mov	fp, r0
 8007516:	692a      	ldr	r2, [r5, #16]
 8007518:	f105 010c 	add.w	r1, r5, #12
 800751c:	3202      	adds	r2, #2
 800751e:	0092      	lsls	r2, r2, #2
 8007520:	300c      	adds	r0, #12
 8007522:	f7fc ff97 	bl	8004454 <memcpy>
 8007526:	4629      	mov	r1, r5
 8007528:	9802      	ldr	r0, [sp, #8]
 800752a:	f000 f9af 	bl	800788c <_Bfree>
 800752e:	465d      	mov	r5, fp
 8007530:	692b      	ldr	r3, [r5, #16]
 8007532:	1c5a      	adds	r2, r3, #1
 8007534:	612a      	str	r2, [r5, #16]
 8007536:	2201      	movs	r2, #1
 8007538:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800753c:	615a      	str	r2, [r3, #20]
 800753e:	e7c2      	b.n	80074c6 <__gethex+0x392>
 8007540:	692a      	ldr	r2, [r5, #16]
 8007542:	454a      	cmp	r2, r9
 8007544:	dd0b      	ble.n	800755e <__gethex+0x42a>
 8007546:	2101      	movs	r1, #1
 8007548:	4628      	mov	r0, r5
 800754a:	f7ff fda3 	bl	8007094 <rshift>
 800754e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007552:	3401      	adds	r4, #1
 8007554:	42a3      	cmp	r3, r4
 8007556:	f6ff aed8 	blt.w	800730a <__gethex+0x1d6>
 800755a:	2701      	movs	r7, #1
 800755c:	e7c7      	b.n	80074ee <__gethex+0x3ba>
 800755e:	f016 061f 	ands.w	r6, r6, #31
 8007562:	d0fa      	beq.n	800755a <__gethex+0x426>
 8007564:	449a      	add	sl, r3
 8007566:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800756a:	f000 fa1f 	bl	80079ac <__hi0bits>
 800756e:	f1c6 0620 	rsb	r6, r6, #32
 8007572:	42b0      	cmp	r0, r6
 8007574:	dbe7      	blt.n	8007546 <__gethex+0x412>
 8007576:	e7f0      	b.n	800755a <__gethex+0x426>

08007578 <L_shift>:
 8007578:	f1c2 0208 	rsb	r2, r2, #8
 800757c:	0092      	lsls	r2, r2, #2
 800757e:	b570      	push	{r4, r5, r6, lr}
 8007580:	f1c2 0620 	rsb	r6, r2, #32
 8007584:	6843      	ldr	r3, [r0, #4]
 8007586:	6804      	ldr	r4, [r0, #0]
 8007588:	fa03 f506 	lsl.w	r5, r3, r6
 800758c:	432c      	orrs	r4, r5
 800758e:	40d3      	lsrs	r3, r2
 8007590:	6004      	str	r4, [r0, #0]
 8007592:	f840 3f04 	str.w	r3, [r0, #4]!
 8007596:	4288      	cmp	r0, r1
 8007598:	d3f4      	bcc.n	8007584 <L_shift+0xc>
 800759a:	bd70      	pop	{r4, r5, r6, pc}

0800759c <__match>:
 800759c:	b530      	push	{r4, r5, lr}
 800759e:	6803      	ldr	r3, [r0, #0]
 80075a0:	3301      	adds	r3, #1
 80075a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075a6:	b914      	cbnz	r4, 80075ae <__match+0x12>
 80075a8:	6003      	str	r3, [r0, #0]
 80075aa:	2001      	movs	r0, #1
 80075ac:	bd30      	pop	{r4, r5, pc}
 80075ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80075b6:	2d19      	cmp	r5, #25
 80075b8:	bf98      	it	ls
 80075ba:	3220      	addls	r2, #32
 80075bc:	42a2      	cmp	r2, r4
 80075be:	d0f0      	beq.n	80075a2 <__match+0x6>
 80075c0:	2000      	movs	r0, #0
 80075c2:	e7f3      	b.n	80075ac <__match+0x10>

080075c4 <__hexnan>:
 80075c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c8:	2500      	movs	r5, #0
 80075ca:	680b      	ldr	r3, [r1, #0]
 80075cc:	4682      	mov	sl, r0
 80075ce:	115f      	asrs	r7, r3, #5
 80075d0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80075d4:	f013 031f 	ands.w	r3, r3, #31
 80075d8:	bf18      	it	ne
 80075da:	3704      	addne	r7, #4
 80075dc:	1f3e      	subs	r6, r7, #4
 80075de:	4690      	mov	r8, r2
 80075e0:	46b1      	mov	r9, r6
 80075e2:	4634      	mov	r4, r6
 80075e4:	46ab      	mov	fp, r5
 80075e6:	b087      	sub	sp, #28
 80075e8:	6801      	ldr	r1, [r0, #0]
 80075ea:	9301      	str	r3, [sp, #4]
 80075ec:	f847 5c04 	str.w	r5, [r7, #-4]
 80075f0:	9502      	str	r5, [sp, #8]
 80075f2:	784a      	ldrb	r2, [r1, #1]
 80075f4:	1c4b      	adds	r3, r1, #1
 80075f6:	9303      	str	r3, [sp, #12]
 80075f8:	b342      	cbz	r2, 800764c <__hexnan+0x88>
 80075fa:	4610      	mov	r0, r2
 80075fc:	9105      	str	r1, [sp, #20]
 80075fe:	9204      	str	r2, [sp, #16]
 8007600:	f7ff fd83 	bl	800710a <__hexdig_fun>
 8007604:	2800      	cmp	r0, #0
 8007606:	d143      	bne.n	8007690 <__hexnan+0xcc>
 8007608:	9a04      	ldr	r2, [sp, #16]
 800760a:	9905      	ldr	r1, [sp, #20]
 800760c:	2a20      	cmp	r2, #32
 800760e:	d818      	bhi.n	8007642 <__hexnan+0x7e>
 8007610:	9b02      	ldr	r3, [sp, #8]
 8007612:	459b      	cmp	fp, r3
 8007614:	dd13      	ble.n	800763e <__hexnan+0x7a>
 8007616:	454c      	cmp	r4, r9
 8007618:	d206      	bcs.n	8007628 <__hexnan+0x64>
 800761a:	2d07      	cmp	r5, #7
 800761c:	dc04      	bgt.n	8007628 <__hexnan+0x64>
 800761e:	462a      	mov	r2, r5
 8007620:	4649      	mov	r1, r9
 8007622:	4620      	mov	r0, r4
 8007624:	f7ff ffa8 	bl	8007578 <L_shift>
 8007628:	4544      	cmp	r4, r8
 800762a:	d944      	bls.n	80076b6 <__hexnan+0xf2>
 800762c:	2300      	movs	r3, #0
 800762e:	f1a4 0904 	sub.w	r9, r4, #4
 8007632:	f844 3c04 	str.w	r3, [r4, #-4]
 8007636:	461d      	mov	r5, r3
 8007638:	464c      	mov	r4, r9
 800763a:	f8cd b008 	str.w	fp, [sp, #8]
 800763e:	9903      	ldr	r1, [sp, #12]
 8007640:	e7d7      	b.n	80075f2 <__hexnan+0x2e>
 8007642:	2a29      	cmp	r2, #41	; 0x29
 8007644:	d14a      	bne.n	80076dc <__hexnan+0x118>
 8007646:	3102      	adds	r1, #2
 8007648:	f8ca 1000 	str.w	r1, [sl]
 800764c:	f1bb 0f00 	cmp.w	fp, #0
 8007650:	d044      	beq.n	80076dc <__hexnan+0x118>
 8007652:	454c      	cmp	r4, r9
 8007654:	d206      	bcs.n	8007664 <__hexnan+0xa0>
 8007656:	2d07      	cmp	r5, #7
 8007658:	dc04      	bgt.n	8007664 <__hexnan+0xa0>
 800765a:	462a      	mov	r2, r5
 800765c:	4649      	mov	r1, r9
 800765e:	4620      	mov	r0, r4
 8007660:	f7ff ff8a 	bl	8007578 <L_shift>
 8007664:	4544      	cmp	r4, r8
 8007666:	d928      	bls.n	80076ba <__hexnan+0xf6>
 8007668:	4643      	mov	r3, r8
 800766a:	f854 2b04 	ldr.w	r2, [r4], #4
 800766e:	42a6      	cmp	r6, r4
 8007670:	f843 2b04 	str.w	r2, [r3], #4
 8007674:	d2f9      	bcs.n	800766a <__hexnan+0xa6>
 8007676:	2200      	movs	r2, #0
 8007678:	f843 2b04 	str.w	r2, [r3], #4
 800767c:	429e      	cmp	r6, r3
 800767e:	d2fb      	bcs.n	8007678 <__hexnan+0xb4>
 8007680:	6833      	ldr	r3, [r6, #0]
 8007682:	b91b      	cbnz	r3, 800768c <__hexnan+0xc8>
 8007684:	4546      	cmp	r6, r8
 8007686:	d127      	bne.n	80076d8 <__hexnan+0x114>
 8007688:	2301      	movs	r3, #1
 800768a:	6033      	str	r3, [r6, #0]
 800768c:	2005      	movs	r0, #5
 800768e:	e026      	b.n	80076de <__hexnan+0x11a>
 8007690:	3501      	adds	r5, #1
 8007692:	2d08      	cmp	r5, #8
 8007694:	f10b 0b01 	add.w	fp, fp, #1
 8007698:	dd06      	ble.n	80076a8 <__hexnan+0xe4>
 800769a:	4544      	cmp	r4, r8
 800769c:	d9cf      	bls.n	800763e <__hexnan+0x7a>
 800769e:	2300      	movs	r3, #0
 80076a0:	2501      	movs	r5, #1
 80076a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80076a6:	3c04      	subs	r4, #4
 80076a8:	6822      	ldr	r2, [r4, #0]
 80076aa:	f000 000f 	and.w	r0, r0, #15
 80076ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80076b2:	6020      	str	r0, [r4, #0]
 80076b4:	e7c3      	b.n	800763e <__hexnan+0x7a>
 80076b6:	2508      	movs	r5, #8
 80076b8:	e7c1      	b.n	800763e <__hexnan+0x7a>
 80076ba:	9b01      	ldr	r3, [sp, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d0df      	beq.n	8007680 <__hexnan+0xbc>
 80076c0:	f04f 32ff 	mov.w	r2, #4294967295
 80076c4:	f1c3 0320 	rsb	r3, r3, #32
 80076c8:	fa22 f303 	lsr.w	r3, r2, r3
 80076cc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80076d0:	401a      	ands	r2, r3
 80076d2:	f847 2c04 	str.w	r2, [r7, #-4]
 80076d6:	e7d3      	b.n	8007680 <__hexnan+0xbc>
 80076d8:	3e04      	subs	r6, #4
 80076da:	e7d1      	b.n	8007680 <__hexnan+0xbc>
 80076dc:	2004      	movs	r0, #4
 80076de:	b007      	add	sp, #28
 80076e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080076e4 <__locale_ctype_ptr_l>:
 80076e4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80076e8:	4770      	bx	lr

080076ea <__localeconv_l>:
 80076ea:	30f0      	adds	r0, #240	; 0xf0
 80076ec:	4770      	bx	lr
	...

080076f0 <_localeconv_r>:
 80076f0:	4b04      	ldr	r3, [pc, #16]	; (8007704 <_localeconv_r+0x14>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6a18      	ldr	r0, [r3, #32]
 80076f6:	4b04      	ldr	r3, [pc, #16]	; (8007708 <_localeconv_r+0x18>)
 80076f8:	2800      	cmp	r0, #0
 80076fa:	bf08      	it	eq
 80076fc:	4618      	moveq	r0, r3
 80076fe:	30f0      	adds	r0, #240	; 0xf0
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	2000000c 	.word	0x2000000c
 8007708:	20000070 	.word	0x20000070

0800770c <__swhatbuf_r>:
 800770c:	b570      	push	{r4, r5, r6, lr}
 800770e:	460e      	mov	r6, r1
 8007710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007714:	b096      	sub	sp, #88	; 0x58
 8007716:	2900      	cmp	r1, #0
 8007718:	4614      	mov	r4, r2
 800771a:	461d      	mov	r5, r3
 800771c:	da07      	bge.n	800772e <__swhatbuf_r+0x22>
 800771e:	2300      	movs	r3, #0
 8007720:	602b      	str	r3, [r5, #0]
 8007722:	89b3      	ldrh	r3, [r6, #12]
 8007724:	061a      	lsls	r2, r3, #24
 8007726:	d410      	bmi.n	800774a <__swhatbuf_r+0x3e>
 8007728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800772c:	e00e      	b.n	800774c <__swhatbuf_r+0x40>
 800772e:	466a      	mov	r2, sp
 8007730:	f001 f848 	bl	80087c4 <_fstat_r>
 8007734:	2800      	cmp	r0, #0
 8007736:	dbf2      	blt.n	800771e <__swhatbuf_r+0x12>
 8007738:	9a01      	ldr	r2, [sp, #4]
 800773a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800773e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007742:	425a      	negs	r2, r3
 8007744:	415a      	adcs	r2, r3
 8007746:	602a      	str	r2, [r5, #0]
 8007748:	e7ee      	b.n	8007728 <__swhatbuf_r+0x1c>
 800774a:	2340      	movs	r3, #64	; 0x40
 800774c:	2000      	movs	r0, #0
 800774e:	6023      	str	r3, [r4, #0]
 8007750:	b016      	add	sp, #88	; 0x58
 8007752:	bd70      	pop	{r4, r5, r6, pc}

08007754 <__smakebuf_r>:
 8007754:	898b      	ldrh	r3, [r1, #12]
 8007756:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007758:	079d      	lsls	r5, r3, #30
 800775a:	4606      	mov	r6, r0
 800775c:	460c      	mov	r4, r1
 800775e:	d507      	bpl.n	8007770 <__smakebuf_r+0x1c>
 8007760:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007764:	6023      	str	r3, [r4, #0]
 8007766:	6123      	str	r3, [r4, #16]
 8007768:	2301      	movs	r3, #1
 800776a:	6163      	str	r3, [r4, #20]
 800776c:	b002      	add	sp, #8
 800776e:	bd70      	pop	{r4, r5, r6, pc}
 8007770:	ab01      	add	r3, sp, #4
 8007772:	466a      	mov	r2, sp
 8007774:	f7ff ffca 	bl	800770c <__swhatbuf_r>
 8007778:	9900      	ldr	r1, [sp, #0]
 800777a:	4605      	mov	r5, r0
 800777c:	4630      	mov	r0, r6
 800777e:	f000 fca3 	bl	80080c8 <_malloc_r>
 8007782:	b948      	cbnz	r0, 8007798 <__smakebuf_r+0x44>
 8007784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007788:	059a      	lsls	r2, r3, #22
 800778a:	d4ef      	bmi.n	800776c <__smakebuf_r+0x18>
 800778c:	f023 0303 	bic.w	r3, r3, #3
 8007790:	f043 0302 	orr.w	r3, r3, #2
 8007794:	81a3      	strh	r3, [r4, #12]
 8007796:	e7e3      	b.n	8007760 <__smakebuf_r+0xc>
 8007798:	4b0d      	ldr	r3, [pc, #52]	; (80077d0 <__smakebuf_r+0x7c>)
 800779a:	62b3      	str	r3, [r6, #40]	; 0x28
 800779c:	89a3      	ldrh	r3, [r4, #12]
 800779e:	6020      	str	r0, [r4, #0]
 80077a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077a4:	81a3      	strh	r3, [r4, #12]
 80077a6:	9b00      	ldr	r3, [sp, #0]
 80077a8:	6120      	str	r0, [r4, #16]
 80077aa:	6163      	str	r3, [r4, #20]
 80077ac:	9b01      	ldr	r3, [sp, #4]
 80077ae:	b15b      	cbz	r3, 80077c8 <__smakebuf_r+0x74>
 80077b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077b4:	4630      	mov	r0, r6
 80077b6:	f001 f817 	bl	80087e8 <_isatty_r>
 80077ba:	b128      	cbz	r0, 80077c8 <__smakebuf_r+0x74>
 80077bc:	89a3      	ldrh	r3, [r4, #12]
 80077be:	f023 0303 	bic.w	r3, r3, #3
 80077c2:	f043 0301 	orr.w	r3, r3, #1
 80077c6:	81a3      	strh	r3, [r4, #12]
 80077c8:	89a3      	ldrh	r3, [r4, #12]
 80077ca:	431d      	orrs	r5, r3
 80077cc:	81a5      	strh	r5, [r4, #12]
 80077ce:	e7cd      	b.n	800776c <__smakebuf_r+0x18>
 80077d0:	08006f49 	.word	0x08006f49

080077d4 <malloc>:
 80077d4:	4b02      	ldr	r3, [pc, #8]	; (80077e0 <malloc+0xc>)
 80077d6:	4601      	mov	r1, r0
 80077d8:	6818      	ldr	r0, [r3, #0]
 80077da:	f000 bc75 	b.w	80080c8 <_malloc_r>
 80077de:	bf00      	nop
 80077e0:	2000000c 	.word	0x2000000c

080077e4 <__ascii_mbtowc>:
 80077e4:	b082      	sub	sp, #8
 80077e6:	b901      	cbnz	r1, 80077ea <__ascii_mbtowc+0x6>
 80077e8:	a901      	add	r1, sp, #4
 80077ea:	b142      	cbz	r2, 80077fe <__ascii_mbtowc+0x1a>
 80077ec:	b14b      	cbz	r3, 8007802 <__ascii_mbtowc+0x1e>
 80077ee:	7813      	ldrb	r3, [r2, #0]
 80077f0:	600b      	str	r3, [r1, #0]
 80077f2:	7812      	ldrb	r2, [r2, #0]
 80077f4:	1c10      	adds	r0, r2, #0
 80077f6:	bf18      	it	ne
 80077f8:	2001      	movne	r0, #1
 80077fa:	b002      	add	sp, #8
 80077fc:	4770      	bx	lr
 80077fe:	4610      	mov	r0, r2
 8007800:	e7fb      	b.n	80077fa <__ascii_mbtowc+0x16>
 8007802:	f06f 0001 	mvn.w	r0, #1
 8007806:	e7f8      	b.n	80077fa <__ascii_mbtowc+0x16>

08007808 <memchr>:
 8007808:	b510      	push	{r4, lr}
 800780a:	b2c9      	uxtb	r1, r1
 800780c:	4402      	add	r2, r0
 800780e:	4290      	cmp	r0, r2
 8007810:	4603      	mov	r3, r0
 8007812:	d101      	bne.n	8007818 <memchr+0x10>
 8007814:	2300      	movs	r3, #0
 8007816:	e003      	b.n	8007820 <memchr+0x18>
 8007818:	781c      	ldrb	r4, [r3, #0]
 800781a:	3001      	adds	r0, #1
 800781c:	428c      	cmp	r4, r1
 800781e:	d1f6      	bne.n	800780e <memchr+0x6>
 8007820:	4618      	mov	r0, r3
 8007822:	bd10      	pop	{r4, pc}

08007824 <_Balloc>:
 8007824:	b570      	push	{r4, r5, r6, lr}
 8007826:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007828:	4604      	mov	r4, r0
 800782a:	460e      	mov	r6, r1
 800782c:	b93d      	cbnz	r5, 800783e <_Balloc+0x1a>
 800782e:	2010      	movs	r0, #16
 8007830:	f7ff ffd0 	bl	80077d4 <malloc>
 8007834:	6260      	str	r0, [r4, #36]	; 0x24
 8007836:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800783a:	6005      	str	r5, [r0, #0]
 800783c:	60c5      	str	r5, [r0, #12]
 800783e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007840:	68eb      	ldr	r3, [r5, #12]
 8007842:	b183      	cbz	r3, 8007866 <_Balloc+0x42>
 8007844:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800784c:	b9b8      	cbnz	r0, 800787e <_Balloc+0x5a>
 800784e:	2101      	movs	r1, #1
 8007850:	fa01 f506 	lsl.w	r5, r1, r6
 8007854:	1d6a      	adds	r2, r5, #5
 8007856:	0092      	lsls	r2, r2, #2
 8007858:	4620      	mov	r0, r4
 800785a:	f000 fbdb 	bl	8008014 <_calloc_r>
 800785e:	b160      	cbz	r0, 800787a <_Balloc+0x56>
 8007860:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007864:	e00e      	b.n	8007884 <_Balloc+0x60>
 8007866:	2221      	movs	r2, #33	; 0x21
 8007868:	2104      	movs	r1, #4
 800786a:	4620      	mov	r0, r4
 800786c:	f000 fbd2 	bl	8008014 <_calloc_r>
 8007870:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007872:	60e8      	str	r0, [r5, #12]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1e4      	bne.n	8007844 <_Balloc+0x20>
 800787a:	2000      	movs	r0, #0
 800787c:	bd70      	pop	{r4, r5, r6, pc}
 800787e:	6802      	ldr	r2, [r0, #0]
 8007880:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007884:	2300      	movs	r3, #0
 8007886:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800788a:	e7f7      	b.n	800787c <_Balloc+0x58>

0800788c <_Bfree>:
 800788c:	b570      	push	{r4, r5, r6, lr}
 800788e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007890:	4606      	mov	r6, r0
 8007892:	460d      	mov	r5, r1
 8007894:	b93c      	cbnz	r4, 80078a6 <_Bfree+0x1a>
 8007896:	2010      	movs	r0, #16
 8007898:	f7ff ff9c 	bl	80077d4 <malloc>
 800789c:	6270      	str	r0, [r6, #36]	; 0x24
 800789e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078a2:	6004      	str	r4, [r0, #0]
 80078a4:	60c4      	str	r4, [r0, #12]
 80078a6:	b13d      	cbz	r5, 80078b8 <_Bfree+0x2c>
 80078a8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80078aa:	686a      	ldr	r2, [r5, #4]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078b2:	6029      	str	r1, [r5, #0]
 80078b4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80078b8:	bd70      	pop	{r4, r5, r6, pc}

080078ba <__multadd>:
 80078ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078be:	461f      	mov	r7, r3
 80078c0:	4606      	mov	r6, r0
 80078c2:	460c      	mov	r4, r1
 80078c4:	2300      	movs	r3, #0
 80078c6:	690d      	ldr	r5, [r1, #16]
 80078c8:	f101 0c14 	add.w	ip, r1, #20
 80078cc:	f8dc 0000 	ldr.w	r0, [ip]
 80078d0:	3301      	adds	r3, #1
 80078d2:	b281      	uxth	r1, r0
 80078d4:	fb02 7101 	mla	r1, r2, r1, r7
 80078d8:	0c00      	lsrs	r0, r0, #16
 80078da:	0c0f      	lsrs	r7, r1, #16
 80078dc:	fb02 7000 	mla	r0, r2, r0, r7
 80078e0:	b289      	uxth	r1, r1
 80078e2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80078e6:	429d      	cmp	r5, r3
 80078e8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80078ec:	f84c 1b04 	str.w	r1, [ip], #4
 80078f0:	dcec      	bgt.n	80078cc <__multadd+0x12>
 80078f2:	b1d7      	cbz	r7, 800792a <__multadd+0x70>
 80078f4:	68a3      	ldr	r3, [r4, #8]
 80078f6:	42ab      	cmp	r3, r5
 80078f8:	dc12      	bgt.n	8007920 <__multadd+0x66>
 80078fa:	6861      	ldr	r1, [r4, #4]
 80078fc:	4630      	mov	r0, r6
 80078fe:	3101      	adds	r1, #1
 8007900:	f7ff ff90 	bl	8007824 <_Balloc>
 8007904:	4680      	mov	r8, r0
 8007906:	6922      	ldr	r2, [r4, #16]
 8007908:	f104 010c 	add.w	r1, r4, #12
 800790c:	3202      	adds	r2, #2
 800790e:	0092      	lsls	r2, r2, #2
 8007910:	300c      	adds	r0, #12
 8007912:	f7fc fd9f 	bl	8004454 <memcpy>
 8007916:	4621      	mov	r1, r4
 8007918:	4630      	mov	r0, r6
 800791a:	f7ff ffb7 	bl	800788c <_Bfree>
 800791e:	4644      	mov	r4, r8
 8007920:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007924:	3501      	adds	r5, #1
 8007926:	615f      	str	r7, [r3, #20]
 8007928:	6125      	str	r5, [r4, #16]
 800792a:	4620      	mov	r0, r4
 800792c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007930 <__s2b>:
 8007930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007934:	4615      	mov	r5, r2
 8007936:	2209      	movs	r2, #9
 8007938:	461f      	mov	r7, r3
 800793a:	3308      	adds	r3, #8
 800793c:	460c      	mov	r4, r1
 800793e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007942:	4606      	mov	r6, r0
 8007944:	2201      	movs	r2, #1
 8007946:	2100      	movs	r1, #0
 8007948:	429a      	cmp	r2, r3
 800794a:	db20      	blt.n	800798e <__s2b+0x5e>
 800794c:	4630      	mov	r0, r6
 800794e:	f7ff ff69 	bl	8007824 <_Balloc>
 8007952:	9b08      	ldr	r3, [sp, #32]
 8007954:	2d09      	cmp	r5, #9
 8007956:	6143      	str	r3, [r0, #20]
 8007958:	f04f 0301 	mov.w	r3, #1
 800795c:	6103      	str	r3, [r0, #16]
 800795e:	dd19      	ble.n	8007994 <__s2b+0x64>
 8007960:	f104 0809 	add.w	r8, r4, #9
 8007964:	46c1      	mov	r9, r8
 8007966:	442c      	add	r4, r5
 8007968:	f819 3b01 	ldrb.w	r3, [r9], #1
 800796c:	4601      	mov	r1, r0
 800796e:	3b30      	subs	r3, #48	; 0x30
 8007970:	220a      	movs	r2, #10
 8007972:	4630      	mov	r0, r6
 8007974:	f7ff ffa1 	bl	80078ba <__multadd>
 8007978:	45a1      	cmp	r9, r4
 800797a:	d1f5      	bne.n	8007968 <__s2b+0x38>
 800797c:	eb08 0405 	add.w	r4, r8, r5
 8007980:	3c08      	subs	r4, #8
 8007982:	1b2d      	subs	r5, r5, r4
 8007984:	1963      	adds	r3, r4, r5
 8007986:	42bb      	cmp	r3, r7
 8007988:	db07      	blt.n	800799a <__s2b+0x6a>
 800798a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800798e:	0052      	lsls	r2, r2, #1
 8007990:	3101      	adds	r1, #1
 8007992:	e7d9      	b.n	8007948 <__s2b+0x18>
 8007994:	340a      	adds	r4, #10
 8007996:	2509      	movs	r5, #9
 8007998:	e7f3      	b.n	8007982 <__s2b+0x52>
 800799a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800799e:	4601      	mov	r1, r0
 80079a0:	3b30      	subs	r3, #48	; 0x30
 80079a2:	220a      	movs	r2, #10
 80079a4:	4630      	mov	r0, r6
 80079a6:	f7ff ff88 	bl	80078ba <__multadd>
 80079aa:	e7eb      	b.n	8007984 <__s2b+0x54>

080079ac <__hi0bits>:
 80079ac:	0c02      	lsrs	r2, r0, #16
 80079ae:	0412      	lsls	r2, r2, #16
 80079b0:	4603      	mov	r3, r0
 80079b2:	b9b2      	cbnz	r2, 80079e2 <__hi0bits+0x36>
 80079b4:	0403      	lsls	r3, r0, #16
 80079b6:	2010      	movs	r0, #16
 80079b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80079bc:	bf04      	itt	eq
 80079be:	021b      	lsleq	r3, r3, #8
 80079c0:	3008      	addeq	r0, #8
 80079c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80079c6:	bf04      	itt	eq
 80079c8:	011b      	lsleq	r3, r3, #4
 80079ca:	3004      	addeq	r0, #4
 80079cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80079d0:	bf04      	itt	eq
 80079d2:	009b      	lsleq	r3, r3, #2
 80079d4:	3002      	addeq	r0, #2
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	db06      	blt.n	80079e8 <__hi0bits+0x3c>
 80079da:	005b      	lsls	r3, r3, #1
 80079dc:	d503      	bpl.n	80079e6 <__hi0bits+0x3a>
 80079de:	3001      	adds	r0, #1
 80079e0:	4770      	bx	lr
 80079e2:	2000      	movs	r0, #0
 80079e4:	e7e8      	b.n	80079b8 <__hi0bits+0xc>
 80079e6:	2020      	movs	r0, #32
 80079e8:	4770      	bx	lr

080079ea <__lo0bits>:
 80079ea:	6803      	ldr	r3, [r0, #0]
 80079ec:	4601      	mov	r1, r0
 80079ee:	f013 0207 	ands.w	r2, r3, #7
 80079f2:	d00b      	beq.n	8007a0c <__lo0bits+0x22>
 80079f4:	07da      	lsls	r2, r3, #31
 80079f6:	d423      	bmi.n	8007a40 <__lo0bits+0x56>
 80079f8:	0798      	lsls	r0, r3, #30
 80079fa:	bf49      	itett	mi
 80079fc:	085b      	lsrmi	r3, r3, #1
 80079fe:	089b      	lsrpl	r3, r3, #2
 8007a00:	2001      	movmi	r0, #1
 8007a02:	600b      	strmi	r3, [r1, #0]
 8007a04:	bf5c      	itt	pl
 8007a06:	600b      	strpl	r3, [r1, #0]
 8007a08:	2002      	movpl	r0, #2
 8007a0a:	4770      	bx	lr
 8007a0c:	b298      	uxth	r0, r3
 8007a0e:	b9a8      	cbnz	r0, 8007a3c <__lo0bits+0x52>
 8007a10:	2010      	movs	r0, #16
 8007a12:	0c1b      	lsrs	r3, r3, #16
 8007a14:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007a18:	bf04      	itt	eq
 8007a1a:	0a1b      	lsreq	r3, r3, #8
 8007a1c:	3008      	addeq	r0, #8
 8007a1e:	071a      	lsls	r2, r3, #28
 8007a20:	bf04      	itt	eq
 8007a22:	091b      	lsreq	r3, r3, #4
 8007a24:	3004      	addeq	r0, #4
 8007a26:	079a      	lsls	r2, r3, #30
 8007a28:	bf04      	itt	eq
 8007a2a:	089b      	lsreq	r3, r3, #2
 8007a2c:	3002      	addeq	r0, #2
 8007a2e:	07da      	lsls	r2, r3, #31
 8007a30:	d402      	bmi.n	8007a38 <__lo0bits+0x4e>
 8007a32:	085b      	lsrs	r3, r3, #1
 8007a34:	d006      	beq.n	8007a44 <__lo0bits+0x5a>
 8007a36:	3001      	adds	r0, #1
 8007a38:	600b      	str	r3, [r1, #0]
 8007a3a:	4770      	bx	lr
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	e7e9      	b.n	8007a14 <__lo0bits+0x2a>
 8007a40:	2000      	movs	r0, #0
 8007a42:	4770      	bx	lr
 8007a44:	2020      	movs	r0, #32
 8007a46:	4770      	bx	lr

08007a48 <__i2b>:
 8007a48:	b510      	push	{r4, lr}
 8007a4a:	460c      	mov	r4, r1
 8007a4c:	2101      	movs	r1, #1
 8007a4e:	f7ff fee9 	bl	8007824 <_Balloc>
 8007a52:	2201      	movs	r2, #1
 8007a54:	6144      	str	r4, [r0, #20]
 8007a56:	6102      	str	r2, [r0, #16]
 8007a58:	bd10      	pop	{r4, pc}

08007a5a <__multiply>:
 8007a5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5e:	4614      	mov	r4, r2
 8007a60:	690a      	ldr	r2, [r1, #16]
 8007a62:	6923      	ldr	r3, [r4, #16]
 8007a64:	4688      	mov	r8, r1
 8007a66:	429a      	cmp	r2, r3
 8007a68:	bfbe      	ittt	lt
 8007a6a:	460b      	movlt	r3, r1
 8007a6c:	46a0      	movlt	r8, r4
 8007a6e:	461c      	movlt	r4, r3
 8007a70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007a74:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007a78:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007a7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007a80:	eb07 0609 	add.w	r6, r7, r9
 8007a84:	42b3      	cmp	r3, r6
 8007a86:	bfb8      	it	lt
 8007a88:	3101      	addlt	r1, #1
 8007a8a:	f7ff fecb 	bl	8007824 <_Balloc>
 8007a8e:	f100 0514 	add.w	r5, r0, #20
 8007a92:	462b      	mov	r3, r5
 8007a94:	2200      	movs	r2, #0
 8007a96:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007a9a:	4573      	cmp	r3, lr
 8007a9c:	d316      	bcc.n	8007acc <__multiply+0x72>
 8007a9e:	f104 0214 	add.w	r2, r4, #20
 8007aa2:	f108 0114 	add.w	r1, r8, #20
 8007aa6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007aaa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	9b00      	ldr	r3, [sp, #0]
 8007ab2:	9201      	str	r2, [sp, #4]
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d80c      	bhi.n	8007ad2 <__multiply+0x78>
 8007ab8:	2e00      	cmp	r6, #0
 8007aba:	dd03      	ble.n	8007ac4 <__multiply+0x6a>
 8007abc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d05d      	beq.n	8007b80 <__multiply+0x126>
 8007ac4:	6106      	str	r6, [r0, #16]
 8007ac6:	b003      	add	sp, #12
 8007ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007acc:	f843 2b04 	str.w	r2, [r3], #4
 8007ad0:	e7e3      	b.n	8007a9a <__multiply+0x40>
 8007ad2:	f8b2 b000 	ldrh.w	fp, [r2]
 8007ad6:	f1bb 0f00 	cmp.w	fp, #0
 8007ada:	d023      	beq.n	8007b24 <__multiply+0xca>
 8007adc:	4689      	mov	r9, r1
 8007ade:	46ac      	mov	ip, r5
 8007ae0:	f04f 0800 	mov.w	r8, #0
 8007ae4:	f859 4b04 	ldr.w	r4, [r9], #4
 8007ae8:	f8dc a000 	ldr.w	sl, [ip]
 8007aec:	b2a3      	uxth	r3, r4
 8007aee:	fa1f fa8a 	uxth.w	sl, sl
 8007af2:	fb0b a303 	mla	r3, fp, r3, sl
 8007af6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007afa:	f8dc 4000 	ldr.w	r4, [ip]
 8007afe:	4443      	add	r3, r8
 8007b00:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007b04:	fb0b 840a 	mla	r4, fp, sl, r8
 8007b08:	46e2      	mov	sl, ip
 8007b0a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007b14:	454f      	cmp	r7, r9
 8007b16:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007b1a:	f84a 3b04 	str.w	r3, [sl], #4
 8007b1e:	d82b      	bhi.n	8007b78 <__multiply+0x11e>
 8007b20:	f8cc 8004 	str.w	r8, [ip, #4]
 8007b24:	9b01      	ldr	r3, [sp, #4]
 8007b26:	3204      	adds	r2, #4
 8007b28:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007b2c:	f1ba 0f00 	cmp.w	sl, #0
 8007b30:	d020      	beq.n	8007b74 <__multiply+0x11a>
 8007b32:	4689      	mov	r9, r1
 8007b34:	46a8      	mov	r8, r5
 8007b36:	f04f 0b00 	mov.w	fp, #0
 8007b3a:	682b      	ldr	r3, [r5, #0]
 8007b3c:	f8b9 c000 	ldrh.w	ip, [r9]
 8007b40:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	fb0a 440c 	mla	r4, sl, ip, r4
 8007b4a:	46c4      	mov	ip, r8
 8007b4c:	445c      	add	r4, fp
 8007b4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007b52:	f84c 3b04 	str.w	r3, [ip], #4
 8007b56:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b5a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007b5e:	0c1b      	lsrs	r3, r3, #16
 8007b60:	fb0a b303 	mla	r3, sl, r3, fp
 8007b64:	454f      	cmp	r7, r9
 8007b66:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007b6a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007b6e:	d805      	bhi.n	8007b7c <__multiply+0x122>
 8007b70:	f8c8 3004 	str.w	r3, [r8, #4]
 8007b74:	3504      	adds	r5, #4
 8007b76:	e79b      	b.n	8007ab0 <__multiply+0x56>
 8007b78:	46d4      	mov	ip, sl
 8007b7a:	e7b3      	b.n	8007ae4 <__multiply+0x8a>
 8007b7c:	46e0      	mov	r8, ip
 8007b7e:	e7dd      	b.n	8007b3c <__multiply+0xe2>
 8007b80:	3e01      	subs	r6, #1
 8007b82:	e799      	b.n	8007ab8 <__multiply+0x5e>

08007b84 <__pow5mult>:
 8007b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b88:	4615      	mov	r5, r2
 8007b8a:	f012 0203 	ands.w	r2, r2, #3
 8007b8e:	4606      	mov	r6, r0
 8007b90:	460f      	mov	r7, r1
 8007b92:	d007      	beq.n	8007ba4 <__pow5mult+0x20>
 8007b94:	4c21      	ldr	r4, [pc, #132]	; (8007c1c <__pow5mult+0x98>)
 8007b96:	3a01      	subs	r2, #1
 8007b98:	2300      	movs	r3, #0
 8007b9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b9e:	f7ff fe8c 	bl	80078ba <__multadd>
 8007ba2:	4607      	mov	r7, r0
 8007ba4:	10ad      	asrs	r5, r5, #2
 8007ba6:	d035      	beq.n	8007c14 <__pow5mult+0x90>
 8007ba8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007baa:	b93c      	cbnz	r4, 8007bbc <__pow5mult+0x38>
 8007bac:	2010      	movs	r0, #16
 8007bae:	f7ff fe11 	bl	80077d4 <malloc>
 8007bb2:	6270      	str	r0, [r6, #36]	; 0x24
 8007bb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007bb8:	6004      	str	r4, [r0, #0]
 8007bba:	60c4      	str	r4, [r0, #12]
 8007bbc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007bc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007bc4:	b94c      	cbnz	r4, 8007bda <__pow5mult+0x56>
 8007bc6:	f240 2171 	movw	r1, #625	; 0x271
 8007bca:	4630      	mov	r0, r6
 8007bcc:	f7ff ff3c 	bl	8007a48 <__i2b>
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	f8c8 0008 	str.w	r0, [r8, #8]
 8007bd8:	6003      	str	r3, [r0, #0]
 8007bda:	f04f 0800 	mov.w	r8, #0
 8007bde:	07eb      	lsls	r3, r5, #31
 8007be0:	d50a      	bpl.n	8007bf8 <__pow5mult+0x74>
 8007be2:	4639      	mov	r1, r7
 8007be4:	4622      	mov	r2, r4
 8007be6:	4630      	mov	r0, r6
 8007be8:	f7ff ff37 	bl	8007a5a <__multiply>
 8007bec:	4681      	mov	r9, r0
 8007bee:	4639      	mov	r1, r7
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	f7ff fe4b 	bl	800788c <_Bfree>
 8007bf6:	464f      	mov	r7, r9
 8007bf8:	106d      	asrs	r5, r5, #1
 8007bfa:	d00b      	beq.n	8007c14 <__pow5mult+0x90>
 8007bfc:	6820      	ldr	r0, [r4, #0]
 8007bfe:	b938      	cbnz	r0, 8007c10 <__pow5mult+0x8c>
 8007c00:	4622      	mov	r2, r4
 8007c02:	4621      	mov	r1, r4
 8007c04:	4630      	mov	r0, r6
 8007c06:	f7ff ff28 	bl	8007a5a <__multiply>
 8007c0a:	6020      	str	r0, [r4, #0]
 8007c0c:	f8c0 8000 	str.w	r8, [r0]
 8007c10:	4604      	mov	r4, r0
 8007c12:	e7e4      	b.n	8007bde <__pow5mult+0x5a>
 8007c14:	4638      	mov	r0, r7
 8007c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c1a:	bf00      	nop
 8007c1c:	08008ba0 	.word	0x08008ba0

08007c20 <__lshift>:
 8007c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c24:	460c      	mov	r4, r1
 8007c26:	4607      	mov	r7, r0
 8007c28:	4616      	mov	r6, r2
 8007c2a:	6923      	ldr	r3, [r4, #16]
 8007c2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c30:	eb0a 0903 	add.w	r9, sl, r3
 8007c34:	6849      	ldr	r1, [r1, #4]
 8007c36:	68a3      	ldr	r3, [r4, #8]
 8007c38:	f109 0501 	add.w	r5, r9, #1
 8007c3c:	42ab      	cmp	r3, r5
 8007c3e:	db32      	blt.n	8007ca6 <__lshift+0x86>
 8007c40:	4638      	mov	r0, r7
 8007c42:	f7ff fdef 	bl	8007824 <_Balloc>
 8007c46:	2300      	movs	r3, #0
 8007c48:	4680      	mov	r8, r0
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	f100 0114 	add.w	r1, r0, #20
 8007c50:	4553      	cmp	r3, sl
 8007c52:	db2b      	blt.n	8007cac <__lshift+0x8c>
 8007c54:	6920      	ldr	r0, [r4, #16]
 8007c56:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c5a:	f104 0314 	add.w	r3, r4, #20
 8007c5e:	f016 021f 	ands.w	r2, r6, #31
 8007c62:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c66:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c6a:	d025      	beq.n	8007cb8 <__lshift+0x98>
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	f1c2 0e20 	rsb	lr, r2, #32
 8007c72:	468a      	mov	sl, r1
 8007c74:	681e      	ldr	r6, [r3, #0]
 8007c76:	4096      	lsls	r6, r2
 8007c78:	4330      	orrs	r0, r6
 8007c7a:	f84a 0b04 	str.w	r0, [sl], #4
 8007c7e:	f853 0b04 	ldr.w	r0, [r3], #4
 8007c82:	459c      	cmp	ip, r3
 8007c84:	fa20 f00e 	lsr.w	r0, r0, lr
 8007c88:	d814      	bhi.n	8007cb4 <__lshift+0x94>
 8007c8a:	6048      	str	r0, [r1, #4]
 8007c8c:	b108      	cbz	r0, 8007c92 <__lshift+0x72>
 8007c8e:	f109 0502 	add.w	r5, r9, #2
 8007c92:	3d01      	subs	r5, #1
 8007c94:	4638      	mov	r0, r7
 8007c96:	f8c8 5010 	str.w	r5, [r8, #16]
 8007c9a:	4621      	mov	r1, r4
 8007c9c:	f7ff fdf6 	bl	800788c <_Bfree>
 8007ca0:	4640      	mov	r0, r8
 8007ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca6:	3101      	adds	r1, #1
 8007ca8:	005b      	lsls	r3, r3, #1
 8007caa:	e7c7      	b.n	8007c3c <__lshift+0x1c>
 8007cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	e7cd      	b.n	8007c50 <__lshift+0x30>
 8007cb4:	4651      	mov	r1, sl
 8007cb6:	e7dc      	b.n	8007c72 <__lshift+0x52>
 8007cb8:	3904      	subs	r1, #4
 8007cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cbe:	459c      	cmp	ip, r3
 8007cc0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007cc4:	d8f9      	bhi.n	8007cba <__lshift+0x9a>
 8007cc6:	e7e4      	b.n	8007c92 <__lshift+0x72>

08007cc8 <__mcmp>:
 8007cc8:	6903      	ldr	r3, [r0, #16]
 8007cca:	690a      	ldr	r2, [r1, #16]
 8007ccc:	b530      	push	{r4, r5, lr}
 8007cce:	1a9b      	subs	r3, r3, r2
 8007cd0:	d10c      	bne.n	8007cec <__mcmp+0x24>
 8007cd2:	0092      	lsls	r2, r2, #2
 8007cd4:	3014      	adds	r0, #20
 8007cd6:	3114      	adds	r1, #20
 8007cd8:	1884      	adds	r4, r0, r2
 8007cda:	4411      	add	r1, r2
 8007cdc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ce0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007ce4:	4295      	cmp	r5, r2
 8007ce6:	d003      	beq.n	8007cf0 <__mcmp+0x28>
 8007ce8:	d305      	bcc.n	8007cf6 <__mcmp+0x2e>
 8007cea:	2301      	movs	r3, #1
 8007cec:	4618      	mov	r0, r3
 8007cee:	bd30      	pop	{r4, r5, pc}
 8007cf0:	42a0      	cmp	r0, r4
 8007cf2:	d3f3      	bcc.n	8007cdc <__mcmp+0x14>
 8007cf4:	e7fa      	b.n	8007cec <__mcmp+0x24>
 8007cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cfa:	e7f7      	b.n	8007cec <__mcmp+0x24>

08007cfc <__mdiff>:
 8007cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d00:	460d      	mov	r5, r1
 8007d02:	4607      	mov	r7, r0
 8007d04:	4611      	mov	r1, r2
 8007d06:	4628      	mov	r0, r5
 8007d08:	4614      	mov	r4, r2
 8007d0a:	f7ff ffdd 	bl	8007cc8 <__mcmp>
 8007d0e:	1e06      	subs	r6, r0, #0
 8007d10:	d108      	bne.n	8007d24 <__mdiff+0x28>
 8007d12:	4631      	mov	r1, r6
 8007d14:	4638      	mov	r0, r7
 8007d16:	f7ff fd85 	bl	8007824 <_Balloc>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d24:	bfa4      	itt	ge
 8007d26:	4623      	movge	r3, r4
 8007d28:	462c      	movge	r4, r5
 8007d2a:	4638      	mov	r0, r7
 8007d2c:	6861      	ldr	r1, [r4, #4]
 8007d2e:	bfa6      	itte	ge
 8007d30:	461d      	movge	r5, r3
 8007d32:	2600      	movge	r6, #0
 8007d34:	2601      	movlt	r6, #1
 8007d36:	f7ff fd75 	bl	8007824 <_Balloc>
 8007d3a:	f04f 0e00 	mov.w	lr, #0
 8007d3e:	60c6      	str	r6, [r0, #12]
 8007d40:	692b      	ldr	r3, [r5, #16]
 8007d42:	6926      	ldr	r6, [r4, #16]
 8007d44:	f104 0214 	add.w	r2, r4, #20
 8007d48:	f105 0914 	add.w	r9, r5, #20
 8007d4c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007d50:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007d54:	f100 0114 	add.w	r1, r0, #20
 8007d58:	f852 ab04 	ldr.w	sl, [r2], #4
 8007d5c:	f859 5b04 	ldr.w	r5, [r9], #4
 8007d60:	fa1f f38a 	uxth.w	r3, sl
 8007d64:	4473      	add	r3, lr
 8007d66:	b2ac      	uxth	r4, r5
 8007d68:	1b1b      	subs	r3, r3, r4
 8007d6a:	0c2c      	lsrs	r4, r5, #16
 8007d6c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007d70:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007d7a:	45c8      	cmp	r8, r9
 8007d7c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007d80:	4694      	mov	ip, r2
 8007d82:	f841 4b04 	str.w	r4, [r1], #4
 8007d86:	d8e7      	bhi.n	8007d58 <__mdiff+0x5c>
 8007d88:	45bc      	cmp	ip, r7
 8007d8a:	d304      	bcc.n	8007d96 <__mdiff+0x9a>
 8007d8c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007d90:	b183      	cbz	r3, 8007db4 <__mdiff+0xb8>
 8007d92:	6106      	str	r6, [r0, #16]
 8007d94:	e7c4      	b.n	8007d20 <__mdiff+0x24>
 8007d96:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007d9a:	b2a2      	uxth	r2, r4
 8007d9c:	4472      	add	r2, lr
 8007d9e:	1413      	asrs	r3, r2, #16
 8007da0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007da4:	b292      	uxth	r2, r2
 8007da6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007daa:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007dae:	f841 2b04 	str.w	r2, [r1], #4
 8007db2:	e7e9      	b.n	8007d88 <__mdiff+0x8c>
 8007db4:	3e01      	subs	r6, #1
 8007db6:	e7e9      	b.n	8007d8c <__mdiff+0x90>

08007db8 <__ulp>:
 8007db8:	4b10      	ldr	r3, [pc, #64]	; (8007dfc <__ulp+0x44>)
 8007dba:	400b      	ands	r3, r1
 8007dbc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	dd02      	ble.n	8007dca <__ulp+0x12>
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	4770      	bx	lr
 8007dca:	425b      	negs	r3, r3
 8007dcc:	151b      	asrs	r3, r3, #20
 8007dce:	2b13      	cmp	r3, #19
 8007dd0:	f04f 0000 	mov.w	r0, #0
 8007dd4:	f04f 0100 	mov.w	r1, #0
 8007dd8:	dc04      	bgt.n	8007de4 <__ulp+0x2c>
 8007dda:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007dde:	fa42 f103 	asr.w	r1, r2, r3
 8007de2:	4770      	bx	lr
 8007de4:	2201      	movs	r2, #1
 8007de6:	3b14      	subs	r3, #20
 8007de8:	2b1e      	cmp	r3, #30
 8007dea:	bfce      	itee	gt
 8007dec:	4613      	movgt	r3, r2
 8007dee:	f1c3 031f 	rsble	r3, r3, #31
 8007df2:	fa02 f303 	lslle.w	r3, r2, r3
 8007df6:	4618      	mov	r0, r3
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	7ff00000 	.word	0x7ff00000

08007e00 <__b2d>:
 8007e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e04:	6907      	ldr	r7, [r0, #16]
 8007e06:	f100 0914 	add.w	r9, r0, #20
 8007e0a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007e0e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007e12:	f1a7 0804 	sub.w	r8, r7, #4
 8007e16:	4630      	mov	r0, r6
 8007e18:	f7ff fdc8 	bl	80079ac <__hi0bits>
 8007e1c:	f1c0 0320 	rsb	r3, r0, #32
 8007e20:	280a      	cmp	r0, #10
 8007e22:	600b      	str	r3, [r1, #0]
 8007e24:	491e      	ldr	r1, [pc, #120]	; (8007ea0 <__b2d+0xa0>)
 8007e26:	dc17      	bgt.n	8007e58 <__b2d+0x58>
 8007e28:	45c1      	cmp	r9, r8
 8007e2a:	bf28      	it	cs
 8007e2c:	2200      	movcs	r2, #0
 8007e2e:	f1c0 0c0b 	rsb	ip, r0, #11
 8007e32:	fa26 f30c 	lsr.w	r3, r6, ip
 8007e36:	bf38      	it	cc
 8007e38:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007e3c:	ea43 0501 	orr.w	r5, r3, r1
 8007e40:	f100 0315 	add.w	r3, r0, #21
 8007e44:	fa06 f303 	lsl.w	r3, r6, r3
 8007e48:	fa22 f20c 	lsr.w	r2, r2, ip
 8007e4c:	ea43 0402 	orr.w	r4, r3, r2
 8007e50:	4620      	mov	r0, r4
 8007e52:	4629      	mov	r1, r5
 8007e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e58:	45c1      	cmp	r9, r8
 8007e5a:	bf3a      	itte	cc
 8007e5c:	f1a7 0808 	subcc.w	r8, r7, #8
 8007e60:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007e64:	2200      	movcs	r2, #0
 8007e66:	f1b0 030b 	subs.w	r3, r0, #11
 8007e6a:	d015      	beq.n	8007e98 <__b2d+0x98>
 8007e6c:	409e      	lsls	r6, r3
 8007e6e:	f1c3 0720 	rsb	r7, r3, #32
 8007e72:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8007e76:	fa22 f107 	lsr.w	r1, r2, r7
 8007e7a:	45c8      	cmp	r8, r9
 8007e7c:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8007e80:	ea46 0501 	orr.w	r5, r6, r1
 8007e84:	bf94      	ite	ls
 8007e86:	2100      	movls	r1, #0
 8007e88:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007e8c:	fa02 f003 	lsl.w	r0, r2, r3
 8007e90:	40f9      	lsrs	r1, r7
 8007e92:	ea40 0401 	orr.w	r4, r0, r1
 8007e96:	e7db      	b.n	8007e50 <__b2d+0x50>
 8007e98:	ea46 0501 	orr.w	r5, r6, r1
 8007e9c:	4614      	mov	r4, r2
 8007e9e:	e7d7      	b.n	8007e50 <__b2d+0x50>
 8007ea0:	3ff00000 	.word	0x3ff00000

08007ea4 <__d2b>:
 8007ea4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007ea8:	461c      	mov	r4, r3
 8007eaa:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8007eae:	2101      	movs	r1, #1
 8007eb0:	4690      	mov	r8, r2
 8007eb2:	f7ff fcb7 	bl	8007824 <_Balloc>
 8007eb6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007eba:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007ebe:	4607      	mov	r7, r0
 8007ec0:	bb34      	cbnz	r4, 8007f10 <__d2b+0x6c>
 8007ec2:	9201      	str	r2, [sp, #4]
 8007ec4:	f1b8 0200 	subs.w	r2, r8, #0
 8007ec8:	d027      	beq.n	8007f1a <__d2b+0x76>
 8007eca:	a802      	add	r0, sp, #8
 8007ecc:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007ed0:	f7ff fd8b 	bl	80079ea <__lo0bits>
 8007ed4:	9900      	ldr	r1, [sp, #0]
 8007ed6:	b1f0      	cbz	r0, 8007f16 <__d2b+0x72>
 8007ed8:	9a01      	ldr	r2, [sp, #4]
 8007eda:	f1c0 0320 	rsb	r3, r0, #32
 8007ede:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee2:	430b      	orrs	r3, r1
 8007ee4:	40c2      	lsrs	r2, r0
 8007ee6:	617b      	str	r3, [r7, #20]
 8007ee8:	9201      	str	r2, [sp, #4]
 8007eea:	9b01      	ldr	r3, [sp, #4]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	bf14      	ite	ne
 8007ef0:	2102      	movne	r1, #2
 8007ef2:	2101      	moveq	r1, #1
 8007ef4:	61bb      	str	r3, [r7, #24]
 8007ef6:	6139      	str	r1, [r7, #16]
 8007ef8:	b1c4      	cbz	r4, 8007f2c <__d2b+0x88>
 8007efa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007efe:	4404      	add	r4, r0
 8007f00:	6034      	str	r4, [r6, #0]
 8007f02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f06:	6028      	str	r0, [r5, #0]
 8007f08:	4638      	mov	r0, r7
 8007f0a:	b002      	add	sp, #8
 8007f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f10:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007f14:	e7d5      	b.n	8007ec2 <__d2b+0x1e>
 8007f16:	6179      	str	r1, [r7, #20]
 8007f18:	e7e7      	b.n	8007eea <__d2b+0x46>
 8007f1a:	a801      	add	r0, sp, #4
 8007f1c:	f7ff fd65 	bl	80079ea <__lo0bits>
 8007f20:	2101      	movs	r1, #1
 8007f22:	9b01      	ldr	r3, [sp, #4]
 8007f24:	6139      	str	r1, [r7, #16]
 8007f26:	617b      	str	r3, [r7, #20]
 8007f28:	3020      	adds	r0, #32
 8007f2a:	e7e5      	b.n	8007ef8 <__d2b+0x54>
 8007f2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f30:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007f34:	6030      	str	r0, [r6, #0]
 8007f36:	6918      	ldr	r0, [r3, #16]
 8007f38:	f7ff fd38 	bl	80079ac <__hi0bits>
 8007f3c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007f40:	e7e1      	b.n	8007f06 <__d2b+0x62>

08007f42 <__ratio>:
 8007f42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f46:	4688      	mov	r8, r1
 8007f48:	4669      	mov	r1, sp
 8007f4a:	4681      	mov	r9, r0
 8007f4c:	f7ff ff58 	bl	8007e00 <__b2d>
 8007f50:	468b      	mov	fp, r1
 8007f52:	4606      	mov	r6, r0
 8007f54:	460f      	mov	r7, r1
 8007f56:	4640      	mov	r0, r8
 8007f58:	a901      	add	r1, sp, #4
 8007f5a:	f7ff ff51 	bl	8007e00 <__b2d>
 8007f5e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007f62:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007f66:	460d      	mov	r5, r1
 8007f68:	eba3 0c02 	sub.w	ip, r3, r2
 8007f6c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007f70:	1a9b      	subs	r3, r3, r2
 8007f72:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	bfd5      	itete	le
 8007f7a:	460a      	movle	r2, r1
 8007f7c:	463a      	movgt	r2, r7
 8007f7e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007f82:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007f86:	bfd8      	it	le
 8007f88:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8007f8c:	462b      	mov	r3, r5
 8007f8e:	4602      	mov	r2, r0
 8007f90:	4659      	mov	r1, fp
 8007f92:	4630      	mov	r0, r6
 8007f94:	f7f8 fc36 	bl	8000804 <__aeabi_ddiv>
 8007f98:	b003      	add	sp, #12
 8007f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007f9e <__copybits>:
 8007f9e:	3901      	subs	r1, #1
 8007fa0:	b510      	push	{r4, lr}
 8007fa2:	1149      	asrs	r1, r1, #5
 8007fa4:	6914      	ldr	r4, [r2, #16]
 8007fa6:	3101      	adds	r1, #1
 8007fa8:	f102 0314 	add.w	r3, r2, #20
 8007fac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007fb0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007fb4:	42a3      	cmp	r3, r4
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	d303      	bcc.n	8007fc2 <__copybits+0x24>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	428a      	cmp	r2, r1
 8007fbe:	d305      	bcc.n	8007fcc <__copybits+0x2e>
 8007fc0:	bd10      	pop	{r4, pc}
 8007fc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fc6:	f840 2b04 	str.w	r2, [r0], #4
 8007fca:	e7f3      	b.n	8007fb4 <__copybits+0x16>
 8007fcc:	f842 3b04 	str.w	r3, [r2], #4
 8007fd0:	e7f4      	b.n	8007fbc <__copybits+0x1e>

08007fd2 <__any_on>:
 8007fd2:	f100 0214 	add.w	r2, r0, #20
 8007fd6:	6900      	ldr	r0, [r0, #16]
 8007fd8:	114b      	asrs	r3, r1, #5
 8007fda:	4298      	cmp	r0, r3
 8007fdc:	b510      	push	{r4, lr}
 8007fde:	db11      	blt.n	8008004 <__any_on+0x32>
 8007fe0:	dd0a      	ble.n	8007ff8 <__any_on+0x26>
 8007fe2:	f011 011f 	ands.w	r1, r1, #31
 8007fe6:	d007      	beq.n	8007ff8 <__any_on+0x26>
 8007fe8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007fec:	fa24 f001 	lsr.w	r0, r4, r1
 8007ff0:	fa00 f101 	lsl.w	r1, r0, r1
 8007ff4:	428c      	cmp	r4, r1
 8007ff6:	d10b      	bne.n	8008010 <__any_on+0x3e>
 8007ff8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d803      	bhi.n	8008008 <__any_on+0x36>
 8008000:	2000      	movs	r0, #0
 8008002:	bd10      	pop	{r4, pc}
 8008004:	4603      	mov	r3, r0
 8008006:	e7f7      	b.n	8007ff8 <__any_on+0x26>
 8008008:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800800c:	2900      	cmp	r1, #0
 800800e:	d0f5      	beq.n	8007ffc <__any_on+0x2a>
 8008010:	2001      	movs	r0, #1
 8008012:	e7f6      	b.n	8008002 <__any_on+0x30>

08008014 <_calloc_r>:
 8008014:	b538      	push	{r3, r4, r5, lr}
 8008016:	fb02 f401 	mul.w	r4, r2, r1
 800801a:	4621      	mov	r1, r4
 800801c:	f000 f854 	bl	80080c8 <_malloc_r>
 8008020:	4605      	mov	r5, r0
 8008022:	b118      	cbz	r0, 800802c <_calloc_r+0x18>
 8008024:	4622      	mov	r2, r4
 8008026:	2100      	movs	r1, #0
 8008028:	f7fc fa1f 	bl	800446a <memset>
 800802c:	4628      	mov	r0, r5
 800802e:	bd38      	pop	{r3, r4, r5, pc}

08008030 <_free_r>:
 8008030:	b538      	push	{r3, r4, r5, lr}
 8008032:	4605      	mov	r5, r0
 8008034:	2900      	cmp	r1, #0
 8008036:	d043      	beq.n	80080c0 <_free_r+0x90>
 8008038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800803c:	1f0c      	subs	r4, r1, #4
 800803e:	2b00      	cmp	r3, #0
 8008040:	bfb8      	it	lt
 8008042:	18e4      	addlt	r4, r4, r3
 8008044:	f000 fc0b 	bl	800885e <__malloc_lock>
 8008048:	4a1e      	ldr	r2, [pc, #120]	; (80080c4 <_free_r+0x94>)
 800804a:	6813      	ldr	r3, [r2, #0]
 800804c:	4610      	mov	r0, r2
 800804e:	b933      	cbnz	r3, 800805e <_free_r+0x2e>
 8008050:	6063      	str	r3, [r4, #4]
 8008052:	6014      	str	r4, [r2, #0]
 8008054:	4628      	mov	r0, r5
 8008056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800805a:	f000 bc01 	b.w	8008860 <__malloc_unlock>
 800805e:	42a3      	cmp	r3, r4
 8008060:	d90b      	bls.n	800807a <_free_r+0x4a>
 8008062:	6821      	ldr	r1, [r4, #0]
 8008064:	1862      	adds	r2, r4, r1
 8008066:	4293      	cmp	r3, r2
 8008068:	bf01      	itttt	eq
 800806a:	681a      	ldreq	r2, [r3, #0]
 800806c:	685b      	ldreq	r3, [r3, #4]
 800806e:	1852      	addeq	r2, r2, r1
 8008070:	6022      	streq	r2, [r4, #0]
 8008072:	6063      	str	r3, [r4, #4]
 8008074:	6004      	str	r4, [r0, #0]
 8008076:	e7ed      	b.n	8008054 <_free_r+0x24>
 8008078:	4613      	mov	r3, r2
 800807a:	685a      	ldr	r2, [r3, #4]
 800807c:	b10a      	cbz	r2, 8008082 <_free_r+0x52>
 800807e:	42a2      	cmp	r2, r4
 8008080:	d9fa      	bls.n	8008078 <_free_r+0x48>
 8008082:	6819      	ldr	r1, [r3, #0]
 8008084:	1858      	adds	r0, r3, r1
 8008086:	42a0      	cmp	r0, r4
 8008088:	d10b      	bne.n	80080a2 <_free_r+0x72>
 800808a:	6820      	ldr	r0, [r4, #0]
 800808c:	4401      	add	r1, r0
 800808e:	1858      	adds	r0, r3, r1
 8008090:	4282      	cmp	r2, r0
 8008092:	6019      	str	r1, [r3, #0]
 8008094:	d1de      	bne.n	8008054 <_free_r+0x24>
 8008096:	6810      	ldr	r0, [r2, #0]
 8008098:	6852      	ldr	r2, [r2, #4]
 800809a:	4401      	add	r1, r0
 800809c:	6019      	str	r1, [r3, #0]
 800809e:	605a      	str	r2, [r3, #4]
 80080a0:	e7d8      	b.n	8008054 <_free_r+0x24>
 80080a2:	d902      	bls.n	80080aa <_free_r+0x7a>
 80080a4:	230c      	movs	r3, #12
 80080a6:	602b      	str	r3, [r5, #0]
 80080a8:	e7d4      	b.n	8008054 <_free_r+0x24>
 80080aa:	6820      	ldr	r0, [r4, #0]
 80080ac:	1821      	adds	r1, r4, r0
 80080ae:	428a      	cmp	r2, r1
 80080b0:	bf01      	itttt	eq
 80080b2:	6811      	ldreq	r1, [r2, #0]
 80080b4:	6852      	ldreq	r2, [r2, #4]
 80080b6:	1809      	addeq	r1, r1, r0
 80080b8:	6021      	streq	r1, [r4, #0]
 80080ba:	6062      	str	r2, [r4, #4]
 80080bc:	605c      	str	r4, [r3, #4]
 80080be:	e7c9      	b.n	8008054 <_free_r+0x24>
 80080c0:	bd38      	pop	{r3, r4, r5, pc}
 80080c2:	bf00      	nop
 80080c4:	20002a10 	.word	0x20002a10

080080c8 <_malloc_r>:
 80080c8:	b570      	push	{r4, r5, r6, lr}
 80080ca:	1ccd      	adds	r5, r1, #3
 80080cc:	f025 0503 	bic.w	r5, r5, #3
 80080d0:	3508      	adds	r5, #8
 80080d2:	2d0c      	cmp	r5, #12
 80080d4:	bf38      	it	cc
 80080d6:	250c      	movcc	r5, #12
 80080d8:	2d00      	cmp	r5, #0
 80080da:	4606      	mov	r6, r0
 80080dc:	db01      	blt.n	80080e2 <_malloc_r+0x1a>
 80080de:	42a9      	cmp	r1, r5
 80080e0:	d903      	bls.n	80080ea <_malloc_r+0x22>
 80080e2:	230c      	movs	r3, #12
 80080e4:	6033      	str	r3, [r6, #0]
 80080e6:	2000      	movs	r0, #0
 80080e8:	bd70      	pop	{r4, r5, r6, pc}
 80080ea:	f000 fbb8 	bl	800885e <__malloc_lock>
 80080ee:	4a21      	ldr	r2, [pc, #132]	; (8008174 <_malloc_r+0xac>)
 80080f0:	6814      	ldr	r4, [r2, #0]
 80080f2:	4621      	mov	r1, r4
 80080f4:	b991      	cbnz	r1, 800811c <_malloc_r+0x54>
 80080f6:	4c20      	ldr	r4, [pc, #128]	; (8008178 <_malloc_r+0xb0>)
 80080f8:	6823      	ldr	r3, [r4, #0]
 80080fa:	b91b      	cbnz	r3, 8008104 <_malloc_r+0x3c>
 80080fc:	4630      	mov	r0, r6
 80080fe:	f000 facd 	bl	800869c <_sbrk_r>
 8008102:	6020      	str	r0, [r4, #0]
 8008104:	4629      	mov	r1, r5
 8008106:	4630      	mov	r0, r6
 8008108:	f000 fac8 	bl	800869c <_sbrk_r>
 800810c:	1c43      	adds	r3, r0, #1
 800810e:	d124      	bne.n	800815a <_malloc_r+0x92>
 8008110:	230c      	movs	r3, #12
 8008112:	4630      	mov	r0, r6
 8008114:	6033      	str	r3, [r6, #0]
 8008116:	f000 fba3 	bl	8008860 <__malloc_unlock>
 800811a:	e7e4      	b.n	80080e6 <_malloc_r+0x1e>
 800811c:	680b      	ldr	r3, [r1, #0]
 800811e:	1b5b      	subs	r3, r3, r5
 8008120:	d418      	bmi.n	8008154 <_malloc_r+0x8c>
 8008122:	2b0b      	cmp	r3, #11
 8008124:	d90f      	bls.n	8008146 <_malloc_r+0x7e>
 8008126:	600b      	str	r3, [r1, #0]
 8008128:	18cc      	adds	r4, r1, r3
 800812a:	50cd      	str	r5, [r1, r3]
 800812c:	4630      	mov	r0, r6
 800812e:	f000 fb97 	bl	8008860 <__malloc_unlock>
 8008132:	f104 000b 	add.w	r0, r4, #11
 8008136:	1d23      	adds	r3, r4, #4
 8008138:	f020 0007 	bic.w	r0, r0, #7
 800813c:	1ac3      	subs	r3, r0, r3
 800813e:	d0d3      	beq.n	80080e8 <_malloc_r+0x20>
 8008140:	425a      	negs	r2, r3
 8008142:	50e2      	str	r2, [r4, r3]
 8008144:	e7d0      	b.n	80080e8 <_malloc_r+0x20>
 8008146:	684b      	ldr	r3, [r1, #4]
 8008148:	428c      	cmp	r4, r1
 800814a:	bf16      	itet	ne
 800814c:	6063      	strne	r3, [r4, #4]
 800814e:	6013      	streq	r3, [r2, #0]
 8008150:	460c      	movne	r4, r1
 8008152:	e7eb      	b.n	800812c <_malloc_r+0x64>
 8008154:	460c      	mov	r4, r1
 8008156:	6849      	ldr	r1, [r1, #4]
 8008158:	e7cc      	b.n	80080f4 <_malloc_r+0x2c>
 800815a:	1cc4      	adds	r4, r0, #3
 800815c:	f024 0403 	bic.w	r4, r4, #3
 8008160:	42a0      	cmp	r0, r4
 8008162:	d005      	beq.n	8008170 <_malloc_r+0xa8>
 8008164:	1a21      	subs	r1, r4, r0
 8008166:	4630      	mov	r0, r6
 8008168:	f000 fa98 	bl	800869c <_sbrk_r>
 800816c:	3001      	adds	r0, #1
 800816e:	d0cf      	beq.n	8008110 <_malloc_r+0x48>
 8008170:	6025      	str	r5, [r4, #0]
 8008172:	e7db      	b.n	800812c <_malloc_r+0x64>
 8008174:	20002a10 	.word	0x20002a10
 8008178:	20002a14 	.word	0x20002a14

0800817c <__ssputs_r>:
 800817c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008180:	688e      	ldr	r6, [r1, #8]
 8008182:	4682      	mov	sl, r0
 8008184:	429e      	cmp	r6, r3
 8008186:	460c      	mov	r4, r1
 8008188:	4690      	mov	r8, r2
 800818a:	4699      	mov	r9, r3
 800818c:	d837      	bhi.n	80081fe <__ssputs_r+0x82>
 800818e:	898a      	ldrh	r2, [r1, #12]
 8008190:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008194:	d031      	beq.n	80081fa <__ssputs_r+0x7e>
 8008196:	2302      	movs	r3, #2
 8008198:	6825      	ldr	r5, [r4, #0]
 800819a:	6909      	ldr	r1, [r1, #16]
 800819c:	1a6f      	subs	r7, r5, r1
 800819e:	6965      	ldr	r5, [r4, #20]
 80081a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081a4:	fb95 f5f3 	sdiv	r5, r5, r3
 80081a8:	f109 0301 	add.w	r3, r9, #1
 80081ac:	443b      	add	r3, r7
 80081ae:	429d      	cmp	r5, r3
 80081b0:	bf38      	it	cc
 80081b2:	461d      	movcc	r5, r3
 80081b4:	0553      	lsls	r3, r2, #21
 80081b6:	d530      	bpl.n	800821a <__ssputs_r+0x9e>
 80081b8:	4629      	mov	r1, r5
 80081ba:	f7ff ff85 	bl	80080c8 <_malloc_r>
 80081be:	4606      	mov	r6, r0
 80081c0:	b950      	cbnz	r0, 80081d8 <__ssputs_r+0x5c>
 80081c2:	230c      	movs	r3, #12
 80081c4:	f04f 30ff 	mov.w	r0, #4294967295
 80081c8:	f8ca 3000 	str.w	r3, [sl]
 80081cc:	89a3      	ldrh	r3, [r4, #12]
 80081ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081d2:	81a3      	strh	r3, [r4, #12]
 80081d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081d8:	463a      	mov	r2, r7
 80081da:	6921      	ldr	r1, [r4, #16]
 80081dc:	f7fc f93a 	bl	8004454 <memcpy>
 80081e0:	89a3      	ldrh	r3, [r4, #12]
 80081e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80081e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ea:	81a3      	strh	r3, [r4, #12]
 80081ec:	6126      	str	r6, [r4, #16]
 80081ee:	443e      	add	r6, r7
 80081f0:	6026      	str	r6, [r4, #0]
 80081f2:	464e      	mov	r6, r9
 80081f4:	6165      	str	r5, [r4, #20]
 80081f6:	1bed      	subs	r5, r5, r7
 80081f8:	60a5      	str	r5, [r4, #8]
 80081fa:	454e      	cmp	r6, r9
 80081fc:	d900      	bls.n	8008200 <__ssputs_r+0x84>
 80081fe:	464e      	mov	r6, r9
 8008200:	4632      	mov	r2, r6
 8008202:	4641      	mov	r1, r8
 8008204:	6820      	ldr	r0, [r4, #0]
 8008206:	f000 fb11 	bl	800882c <memmove>
 800820a:	68a3      	ldr	r3, [r4, #8]
 800820c:	2000      	movs	r0, #0
 800820e:	1b9b      	subs	r3, r3, r6
 8008210:	60a3      	str	r3, [r4, #8]
 8008212:	6823      	ldr	r3, [r4, #0]
 8008214:	441e      	add	r6, r3
 8008216:	6026      	str	r6, [r4, #0]
 8008218:	e7dc      	b.n	80081d4 <__ssputs_r+0x58>
 800821a:	462a      	mov	r2, r5
 800821c:	f000 fb21 	bl	8008862 <_realloc_r>
 8008220:	4606      	mov	r6, r0
 8008222:	2800      	cmp	r0, #0
 8008224:	d1e2      	bne.n	80081ec <__ssputs_r+0x70>
 8008226:	6921      	ldr	r1, [r4, #16]
 8008228:	4650      	mov	r0, sl
 800822a:	f7ff ff01 	bl	8008030 <_free_r>
 800822e:	e7c8      	b.n	80081c2 <__ssputs_r+0x46>

08008230 <_svfiprintf_r>:
 8008230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008234:	461d      	mov	r5, r3
 8008236:	898b      	ldrh	r3, [r1, #12]
 8008238:	b09d      	sub	sp, #116	; 0x74
 800823a:	061f      	lsls	r7, r3, #24
 800823c:	4680      	mov	r8, r0
 800823e:	460c      	mov	r4, r1
 8008240:	4616      	mov	r6, r2
 8008242:	d50f      	bpl.n	8008264 <_svfiprintf_r+0x34>
 8008244:	690b      	ldr	r3, [r1, #16]
 8008246:	b96b      	cbnz	r3, 8008264 <_svfiprintf_r+0x34>
 8008248:	2140      	movs	r1, #64	; 0x40
 800824a:	f7ff ff3d 	bl	80080c8 <_malloc_r>
 800824e:	6020      	str	r0, [r4, #0]
 8008250:	6120      	str	r0, [r4, #16]
 8008252:	b928      	cbnz	r0, 8008260 <_svfiprintf_r+0x30>
 8008254:	230c      	movs	r3, #12
 8008256:	f8c8 3000 	str.w	r3, [r8]
 800825a:	f04f 30ff 	mov.w	r0, #4294967295
 800825e:	e0c8      	b.n	80083f2 <_svfiprintf_r+0x1c2>
 8008260:	2340      	movs	r3, #64	; 0x40
 8008262:	6163      	str	r3, [r4, #20]
 8008264:	2300      	movs	r3, #0
 8008266:	9309      	str	r3, [sp, #36]	; 0x24
 8008268:	2320      	movs	r3, #32
 800826a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800826e:	2330      	movs	r3, #48	; 0x30
 8008270:	f04f 0b01 	mov.w	fp, #1
 8008274:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008278:	9503      	str	r5, [sp, #12]
 800827a:	4637      	mov	r7, r6
 800827c:	463d      	mov	r5, r7
 800827e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008282:	b10b      	cbz	r3, 8008288 <_svfiprintf_r+0x58>
 8008284:	2b25      	cmp	r3, #37	; 0x25
 8008286:	d13e      	bne.n	8008306 <_svfiprintf_r+0xd6>
 8008288:	ebb7 0a06 	subs.w	sl, r7, r6
 800828c:	d00b      	beq.n	80082a6 <_svfiprintf_r+0x76>
 800828e:	4653      	mov	r3, sl
 8008290:	4632      	mov	r2, r6
 8008292:	4621      	mov	r1, r4
 8008294:	4640      	mov	r0, r8
 8008296:	f7ff ff71 	bl	800817c <__ssputs_r>
 800829a:	3001      	adds	r0, #1
 800829c:	f000 80a4 	beq.w	80083e8 <_svfiprintf_r+0x1b8>
 80082a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082a2:	4453      	add	r3, sl
 80082a4:	9309      	str	r3, [sp, #36]	; 0x24
 80082a6:	783b      	ldrb	r3, [r7, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 809d 	beq.w	80083e8 <_svfiprintf_r+0x1b8>
 80082ae:	2300      	movs	r3, #0
 80082b0:	f04f 32ff 	mov.w	r2, #4294967295
 80082b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082b8:	9304      	str	r3, [sp, #16]
 80082ba:	9307      	str	r3, [sp, #28]
 80082bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082c0:	931a      	str	r3, [sp, #104]	; 0x68
 80082c2:	462f      	mov	r7, r5
 80082c4:	2205      	movs	r2, #5
 80082c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80082ca:	4850      	ldr	r0, [pc, #320]	; (800840c <_svfiprintf_r+0x1dc>)
 80082cc:	f7ff fa9c 	bl	8007808 <memchr>
 80082d0:	9b04      	ldr	r3, [sp, #16]
 80082d2:	b9d0      	cbnz	r0, 800830a <_svfiprintf_r+0xda>
 80082d4:	06d9      	lsls	r1, r3, #27
 80082d6:	bf44      	itt	mi
 80082d8:	2220      	movmi	r2, #32
 80082da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80082de:	071a      	lsls	r2, r3, #28
 80082e0:	bf44      	itt	mi
 80082e2:	222b      	movmi	r2, #43	; 0x2b
 80082e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80082e8:	782a      	ldrb	r2, [r5, #0]
 80082ea:	2a2a      	cmp	r2, #42	; 0x2a
 80082ec:	d015      	beq.n	800831a <_svfiprintf_r+0xea>
 80082ee:	462f      	mov	r7, r5
 80082f0:	2000      	movs	r0, #0
 80082f2:	250a      	movs	r5, #10
 80082f4:	9a07      	ldr	r2, [sp, #28]
 80082f6:	4639      	mov	r1, r7
 80082f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082fc:	3b30      	subs	r3, #48	; 0x30
 80082fe:	2b09      	cmp	r3, #9
 8008300:	d94d      	bls.n	800839e <_svfiprintf_r+0x16e>
 8008302:	b1b8      	cbz	r0, 8008334 <_svfiprintf_r+0x104>
 8008304:	e00f      	b.n	8008326 <_svfiprintf_r+0xf6>
 8008306:	462f      	mov	r7, r5
 8008308:	e7b8      	b.n	800827c <_svfiprintf_r+0x4c>
 800830a:	4a40      	ldr	r2, [pc, #256]	; (800840c <_svfiprintf_r+0x1dc>)
 800830c:	463d      	mov	r5, r7
 800830e:	1a80      	subs	r0, r0, r2
 8008310:	fa0b f000 	lsl.w	r0, fp, r0
 8008314:	4318      	orrs	r0, r3
 8008316:	9004      	str	r0, [sp, #16]
 8008318:	e7d3      	b.n	80082c2 <_svfiprintf_r+0x92>
 800831a:	9a03      	ldr	r2, [sp, #12]
 800831c:	1d11      	adds	r1, r2, #4
 800831e:	6812      	ldr	r2, [r2, #0]
 8008320:	9103      	str	r1, [sp, #12]
 8008322:	2a00      	cmp	r2, #0
 8008324:	db01      	blt.n	800832a <_svfiprintf_r+0xfa>
 8008326:	9207      	str	r2, [sp, #28]
 8008328:	e004      	b.n	8008334 <_svfiprintf_r+0x104>
 800832a:	4252      	negs	r2, r2
 800832c:	f043 0302 	orr.w	r3, r3, #2
 8008330:	9207      	str	r2, [sp, #28]
 8008332:	9304      	str	r3, [sp, #16]
 8008334:	783b      	ldrb	r3, [r7, #0]
 8008336:	2b2e      	cmp	r3, #46	; 0x2e
 8008338:	d10c      	bne.n	8008354 <_svfiprintf_r+0x124>
 800833a:	787b      	ldrb	r3, [r7, #1]
 800833c:	2b2a      	cmp	r3, #42	; 0x2a
 800833e:	d133      	bne.n	80083a8 <_svfiprintf_r+0x178>
 8008340:	9b03      	ldr	r3, [sp, #12]
 8008342:	3702      	adds	r7, #2
 8008344:	1d1a      	adds	r2, r3, #4
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	9203      	str	r2, [sp, #12]
 800834a:	2b00      	cmp	r3, #0
 800834c:	bfb8      	it	lt
 800834e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008352:	9305      	str	r3, [sp, #20]
 8008354:	4d2e      	ldr	r5, [pc, #184]	; (8008410 <_svfiprintf_r+0x1e0>)
 8008356:	2203      	movs	r2, #3
 8008358:	7839      	ldrb	r1, [r7, #0]
 800835a:	4628      	mov	r0, r5
 800835c:	f7ff fa54 	bl	8007808 <memchr>
 8008360:	b138      	cbz	r0, 8008372 <_svfiprintf_r+0x142>
 8008362:	2340      	movs	r3, #64	; 0x40
 8008364:	1b40      	subs	r0, r0, r5
 8008366:	fa03 f000 	lsl.w	r0, r3, r0
 800836a:	9b04      	ldr	r3, [sp, #16]
 800836c:	3701      	adds	r7, #1
 800836e:	4303      	orrs	r3, r0
 8008370:	9304      	str	r3, [sp, #16]
 8008372:	7839      	ldrb	r1, [r7, #0]
 8008374:	2206      	movs	r2, #6
 8008376:	4827      	ldr	r0, [pc, #156]	; (8008414 <_svfiprintf_r+0x1e4>)
 8008378:	1c7e      	adds	r6, r7, #1
 800837a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800837e:	f7ff fa43 	bl	8007808 <memchr>
 8008382:	2800      	cmp	r0, #0
 8008384:	d038      	beq.n	80083f8 <_svfiprintf_r+0x1c8>
 8008386:	4b24      	ldr	r3, [pc, #144]	; (8008418 <_svfiprintf_r+0x1e8>)
 8008388:	bb13      	cbnz	r3, 80083d0 <_svfiprintf_r+0x1a0>
 800838a:	9b03      	ldr	r3, [sp, #12]
 800838c:	3307      	adds	r3, #7
 800838e:	f023 0307 	bic.w	r3, r3, #7
 8008392:	3308      	adds	r3, #8
 8008394:	9303      	str	r3, [sp, #12]
 8008396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008398:	444b      	add	r3, r9
 800839a:	9309      	str	r3, [sp, #36]	; 0x24
 800839c:	e76d      	b.n	800827a <_svfiprintf_r+0x4a>
 800839e:	fb05 3202 	mla	r2, r5, r2, r3
 80083a2:	2001      	movs	r0, #1
 80083a4:	460f      	mov	r7, r1
 80083a6:	e7a6      	b.n	80082f6 <_svfiprintf_r+0xc6>
 80083a8:	2300      	movs	r3, #0
 80083aa:	250a      	movs	r5, #10
 80083ac:	4619      	mov	r1, r3
 80083ae:	3701      	adds	r7, #1
 80083b0:	9305      	str	r3, [sp, #20]
 80083b2:	4638      	mov	r0, r7
 80083b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083b8:	3a30      	subs	r2, #48	; 0x30
 80083ba:	2a09      	cmp	r2, #9
 80083bc:	d903      	bls.n	80083c6 <_svfiprintf_r+0x196>
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d0c8      	beq.n	8008354 <_svfiprintf_r+0x124>
 80083c2:	9105      	str	r1, [sp, #20]
 80083c4:	e7c6      	b.n	8008354 <_svfiprintf_r+0x124>
 80083c6:	fb05 2101 	mla	r1, r5, r1, r2
 80083ca:	2301      	movs	r3, #1
 80083cc:	4607      	mov	r7, r0
 80083ce:	e7f0      	b.n	80083b2 <_svfiprintf_r+0x182>
 80083d0:	ab03      	add	r3, sp, #12
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	4622      	mov	r2, r4
 80083d6:	4b11      	ldr	r3, [pc, #68]	; (800841c <_svfiprintf_r+0x1ec>)
 80083d8:	a904      	add	r1, sp, #16
 80083da:	4640      	mov	r0, r8
 80083dc:	f7fc f8de 	bl	800459c <_printf_float>
 80083e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80083e4:	4681      	mov	r9, r0
 80083e6:	d1d6      	bne.n	8008396 <_svfiprintf_r+0x166>
 80083e8:	89a3      	ldrh	r3, [r4, #12]
 80083ea:	065b      	lsls	r3, r3, #25
 80083ec:	f53f af35 	bmi.w	800825a <_svfiprintf_r+0x2a>
 80083f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083f2:	b01d      	add	sp, #116	; 0x74
 80083f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f8:	ab03      	add	r3, sp, #12
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	4622      	mov	r2, r4
 80083fe:	4b07      	ldr	r3, [pc, #28]	; (800841c <_svfiprintf_r+0x1ec>)
 8008400:	a904      	add	r1, sp, #16
 8008402:	4640      	mov	r0, r8
 8008404:	f7fc fb76 	bl	8004af4 <_printf_i>
 8008408:	e7ea      	b.n	80083e0 <_svfiprintf_r+0x1b0>
 800840a:	bf00      	nop
 800840c:	08008bac 	.word	0x08008bac
 8008410:	08008bb2 	.word	0x08008bb2
 8008414:	08008bb6 	.word	0x08008bb6
 8008418:	0800459d 	.word	0x0800459d
 800841c:	0800817d 	.word	0x0800817d

08008420 <__sfputc_r>:
 8008420:	6893      	ldr	r3, [r2, #8]
 8008422:	b410      	push	{r4}
 8008424:	3b01      	subs	r3, #1
 8008426:	2b00      	cmp	r3, #0
 8008428:	6093      	str	r3, [r2, #8]
 800842a:	da07      	bge.n	800843c <__sfputc_r+0x1c>
 800842c:	6994      	ldr	r4, [r2, #24]
 800842e:	42a3      	cmp	r3, r4
 8008430:	db01      	blt.n	8008436 <__sfputc_r+0x16>
 8008432:	290a      	cmp	r1, #10
 8008434:	d102      	bne.n	800843c <__sfputc_r+0x1c>
 8008436:	bc10      	pop	{r4}
 8008438:	f7fd bdb0 	b.w	8005f9c <__swbuf_r>
 800843c:	6813      	ldr	r3, [r2, #0]
 800843e:	1c58      	adds	r0, r3, #1
 8008440:	6010      	str	r0, [r2, #0]
 8008442:	7019      	strb	r1, [r3, #0]
 8008444:	4608      	mov	r0, r1
 8008446:	bc10      	pop	{r4}
 8008448:	4770      	bx	lr

0800844a <__sfputs_r>:
 800844a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800844c:	4606      	mov	r6, r0
 800844e:	460f      	mov	r7, r1
 8008450:	4614      	mov	r4, r2
 8008452:	18d5      	adds	r5, r2, r3
 8008454:	42ac      	cmp	r4, r5
 8008456:	d101      	bne.n	800845c <__sfputs_r+0x12>
 8008458:	2000      	movs	r0, #0
 800845a:	e007      	b.n	800846c <__sfputs_r+0x22>
 800845c:	463a      	mov	r2, r7
 800845e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008462:	4630      	mov	r0, r6
 8008464:	f7ff ffdc 	bl	8008420 <__sfputc_r>
 8008468:	1c43      	adds	r3, r0, #1
 800846a:	d1f3      	bne.n	8008454 <__sfputs_r+0xa>
 800846c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008470 <_vfiprintf_r>:
 8008470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008474:	460c      	mov	r4, r1
 8008476:	b09d      	sub	sp, #116	; 0x74
 8008478:	4617      	mov	r7, r2
 800847a:	461d      	mov	r5, r3
 800847c:	4606      	mov	r6, r0
 800847e:	b118      	cbz	r0, 8008488 <_vfiprintf_r+0x18>
 8008480:	6983      	ldr	r3, [r0, #24]
 8008482:	b90b      	cbnz	r3, 8008488 <_vfiprintf_r+0x18>
 8008484:	f7fe fd7c 	bl	8006f80 <__sinit>
 8008488:	4b7c      	ldr	r3, [pc, #496]	; (800867c <_vfiprintf_r+0x20c>)
 800848a:	429c      	cmp	r4, r3
 800848c:	d158      	bne.n	8008540 <_vfiprintf_r+0xd0>
 800848e:	6874      	ldr	r4, [r6, #4]
 8008490:	89a3      	ldrh	r3, [r4, #12]
 8008492:	0718      	lsls	r0, r3, #28
 8008494:	d55e      	bpl.n	8008554 <_vfiprintf_r+0xe4>
 8008496:	6923      	ldr	r3, [r4, #16]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d05b      	beq.n	8008554 <_vfiprintf_r+0xe4>
 800849c:	2300      	movs	r3, #0
 800849e:	9309      	str	r3, [sp, #36]	; 0x24
 80084a0:	2320      	movs	r3, #32
 80084a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084a6:	2330      	movs	r3, #48	; 0x30
 80084a8:	f04f 0b01 	mov.w	fp, #1
 80084ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084b0:	9503      	str	r5, [sp, #12]
 80084b2:	46b8      	mov	r8, r7
 80084b4:	4645      	mov	r5, r8
 80084b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80084ba:	b10b      	cbz	r3, 80084c0 <_vfiprintf_r+0x50>
 80084bc:	2b25      	cmp	r3, #37	; 0x25
 80084be:	d154      	bne.n	800856a <_vfiprintf_r+0xfa>
 80084c0:	ebb8 0a07 	subs.w	sl, r8, r7
 80084c4:	d00b      	beq.n	80084de <_vfiprintf_r+0x6e>
 80084c6:	4653      	mov	r3, sl
 80084c8:	463a      	mov	r2, r7
 80084ca:	4621      	mov	r1, r4
 80084cc:	4630      	mov	r0, r6
 80084ce:	f7ff ffbc 	bl	800844a <__sfputs_r>
 80084d2:	3001      	adds	r0, #1
 80084d4:	f000 80c2 	beq.w	800865c <_vfiprintf_r+0x1ec>
 80084d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084da:	4453      	add	r3, sl
 80084dc:	9309      	str	r3, [sp, #36]	; 0x24
 80084de:	f898 3000 	ldrb.w	r3, [r8]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 80ba 	beq.w	800865c <_vfiprintf_r+0x1ec>
 80084e8:	2300      	movs	r3, #0
 80084ea:	f04f 32ff 	mov.w	r2, #4294967295
 80084ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084f2:	9304      	str	r3, [sp, #16]
 80084f4:	9307      	str	r3, [sp, #28]
 80084f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084fa:	931a      	str	r3, [sp, #104]	; 0x68
 80084fc:	46a8      	mov	r8, r5
 80084fe:	2205      	movs	r2, #5
 8008500:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008504:	485e      	ldr	r0, [pc, #376]	; (8008680 <_vfiprintf_r+0x210>)
 8008506:	f7ff f97f 	bl	8007808 <memchr>
 800850a:	9b04      	ldr	r3, [sp, #16]
 800850c:	bb78      	cbnz	r0, 800856e <_vfiprintf_r+0xfe>
 800850e:	06d9      	lsls	r1, r3, #27
 8008510:	bf44      	itt	mi
 8008512:	2220      	movmi	r2, #32
 8008514:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008518:	071a      	lsls	r2, r3, #28
 800851a:	bf44      	itt	mi
 800851c:	222b      	movmi	r2, #43	; 0x2b
 800851e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008522:	782a      	ldrb	r2, [r5, #0]
 8008524:	2a2a      	cmp	r2, #42	; 0x2a
 8008526:	d02a      	beq.n	800857e <_vfiprintf_r+0x10e>
 8008528:	46a8      	mov	r8, r5
 800852a:	2000      	movs	r0, #0
 800852c:	250a      	movs	r5, #10
 800852e:	9a07      	ldr	r2, [sp, #28]
 8008530:	4641      	mov	r1, r8
 8008532:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008536:	3b30      	subs	r3, #48	; 0x30
 8008538:	2b09      	cmp	r3, #9
 800853a:	d969      	bls.n	8008610 <_vfiprintf_r+0x1a0>
 800853c:	b360      	cbz	r0, 8008598 <_vfiprintf_r+0x128>
 800853e:	e024      	b.n	800858a <_vfiprintf_r+0x11a>
 8008540:	4b50      	ldr	r3, [pc, #320]	; (8008684 <_vfiprintf_r+0x214>)
 8008542:	429c      	cmp	r4, r3
 8008544:	d101      	bne.n	800854a <_vfiprintf_r+0xda>
 8008546:	68b4      	ldr	r4, [r6, #8]
 8008548:	e7a2      	b.n	8008490 <_vfiprintf_r+0x20>
 800854a:	4b4f      	ldr	r3, [pc, #316]	; (8008688 <_vfiprintf_r+0x218>)
 800854c:	429c      	cmp	r4, r3
 800854e:	bf08      	it	eq
 8008550:	68f4      	ldreq	r4, [r6, #12]
 8008552:	e79d      	b.n	8008490 <_vfiprintf_r+0x20>
 8008554:	4621      	mov	r1, r4
 8008556:	4630      	mov	r0, r6
 8008558:	f7fd fd72 	bl	8006040 <__swsetup_r>
 800855c:	2800      	cmp	r0, #0
 800855e:	d09d      	beq.n	800849c <_vfiprintf_r+0x2c>
 8008560:	f04f 30ff 	mov.w	r0, #4294967295
 8008564:	b01d      	add	sp, #116	; 0x74
 8008566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800856a:	46a8      	mov	r8, r5
 800856c:	e7a2      	b.n	80084b4 <_vfiprintf_r+0x44>
 800856e:	4a44      	ldr	r2, [pc, #272]	; (8008680 <_vfiprintf_r+0x210>)
 8008570:	4645      	mov	r5, r8
 8008572:	1a80      	subs	r0, r0, r2
 8008574:	fa0b f000 	lsl.w	r0, fp, r0
 8008578:	4318      	orrs	r0, r3
 800857a:	9004      	str	r0, [sp, #16]
 800857c:	e7be      	b.n	80084fc <_vfiprintf_r+0x8c>
 800857e:	9a03      	ldr	r2, [sp, #12]
 8008580:	1d11      	adds	r1, r2, #4
 8008582:	6812      	ldr	r2, [r2, #0]
 8008584:	9103      	str	r1, [sp, #12]
 8008586:	2a00      	cmp	r2, #0
 8008588:	db01      	blt.n	800858e <_vfiprintf_r+0x11e>
 800858a:	9207      	str	r2, [sp, #28]
 800858c:	e004      	b.n	8008598 <_vfiprintf_r+0x128>
 800858e:	4252      	negs	r2, r2
 8008590:	f043 0302 	orr.w	r3, r3, #2
 8008594:	9207      	str	r2, [sp, #28]
 8008596:	9304      	str	r3, [sp, #16]
 8008598:	f898 3000 	ldrb.w	r3, [r8]
 800859c:	2b2e      	cmp	r3, #46	; 0x2e
 800859e:	d10e      	bne.n	80085be <_vfiprintf_r+0x14e>
 80085a0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80085a4:	2b2a      	cmp	r3, #42	; 0x2a
 80085a6:	d138      	bne.n	800861a <_vfiprintf_r+0x1aa>
 80085a8:	9b03      	ldr	r3, [sp, #12]
 80085aa:	f108 0802 	add.w	r8, r8, #2
 80085ae:	1d1a      	adds	r2, r3, #4
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	9203      	str	r2, [sp, #12]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	bfb8      	it	lt
 80085b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80085bc:	9305      	str	r3, [sp, #20]
 80085be:	4d33      	ldr	r5, [pc, #204]	; (800868c <_vfiprintf_r+0x21c>)
 80085c0:	2203      	movs	r2, #3
 80085c2:	f898 1000 	ldrb.w	r1, [r8]
 80085c6:	4628      	mov	r0, r5
 80085c8:	f7ff f91e 	bl	8007808 <memchr>
 80085cc:	b140      	cbz	r0, 80085e0 <_vfiprintf_r+0x170>
 80085ce:	2340      	movs	r3, #64	; 0x40
 80085d0:	1b40      	subs	r0, r0, r5
 80085d2:	fa03 f000 	lsl.w	r0, r3, r0
 80085d6:	9b04      	ldr	r3, [sp, #16]
 80085d8:	f108 0801 	add.w	r8, r8, #1
 80085dc:	4303      	orrs	r3, r0
 80085de:	9304      	str	r3, [sp, #16]
 80085e0:	f898 1000 	ldrb.w	r1, [r8]
 80085e4:	2206      	movs	r2, #6
 80085e6:	482a      	ldr	r0, [pc, #168]	; (8008690 <_vfiprintf_r+0x220>)
 80085e8:	f108 0701 	add.w	r7, r8, #1
 80085ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085f0:	f7ff f90a 	bl	8007808 <memchr>
 80085f4:	2800      	cmp	r0, #0
 80085f6:	d037      	beq.n	8008668 <_vfiprintf_r+0x1f8>
 80085f8:	4b26      	ldr	r3, [pc, #152]	; (8008694 <_vfiprintf_r+0x224>)
 80085fa:	bb1b      	cbnz	r3, 8008644 <_vfiprintf_r+0x1d4>
 80085fc:	9b03      	ldr	r3, [sp, #12]
 80085fe:	3307      	adds	r3, #7
 8008600:	f023 0307 	bic.w	r3, r3, #7
 8008604:	3308      	adds	r3, #8
 8008606:	9303      	str	r3, [sp, #12]
 8008608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800860a:	444b      	add	r3, r9
 800860c:	9309      	str	r3, [sp, #36]	; 0x24
 800860e:	e750      	b.n	80084b2 <_vfiprintf_r+0x42>
 8008610:	fb05 3202 	mla	r2, r5, r2, r3
 8008614:	2001      	movs	r0, #1
 8008616:	4688      	mov	r8, r1
 8008618:	e78a      	b.n	8008530 <_vfiprintf_r+0xc0>
 800861a:	2300      	movs	r3, #0
 800861c:	250a      	movs	r5, #10
 800861e:	4619      	mov	r1, r3
 8008620:	f108 0801 	add.w	r8, r8, #1
 8008624:	9305      	str	r3, [sp, #20]
 8008626:	4640      	mov	r0, r8
 8008628:	f810 2b01 	ldrb.w	r2, [r0], #1
 800862c:	3a30      	subs	r2, #48	; 0x30
 800862e:	2a09      	cmp	r2, #9
 8008630:	d903      	bls.n	800863a <_vfiprintf_r+0x1ca>
 8008632:	2b00      	cmp	r3, #0
 8008634:	d0c3      	beq.n	80085be <_vfiprintf_r+0x14e>
 8008636:	9105      	str	r1, [sp, #20]
 8008638:	e7c1      	b.n	80085be <_vfiprintf_r+0x14e>
 800863a:	fb05 2101 	mla	r1, r5, r1, r2
 800863e:	2301      	movs	r3, #1
 8008640:	4680      	mov	r8, r0
 8008642:	e7f0      	b.n	8008626 <_vfiprintf_r+0x1b6>
 8008644:	ab03      	add	r3, sp, #12
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	4622      	mov	r2, r4
 800864a:	4b13      	ldr	r3, [pc, #76]	; (8008698 <_vfiprintf_r+0x228>)
 800864c:	a904      	add	r1, sp, #16
 800864e:	4630      	mov	r0, r6
 8008650:	f7fb ffa4 	bl	800459c <_printf_float>
 8008654:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008658:	4681      	mov	r9, r0
 800865a:	d1d5      	bne.n	8008608 <_vfiprintf_r+0x198>
 800865c:	89a3      	ldrh	r3, [r4, #12]
 800865e:	065b      	lsls	r3, r3, #25
 8008660:	f53f af7e 	bmi.w	8008560 <_vfiprintf_r+0xf0>
 8008664:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008666:	e77d      	b.n	8008564 <_vfiprintf_r+0xf4>
 8008668:	ab03      	add	r3, sp, #12
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	4622      	mov	r2, r4
 800866e:	4b0a      	ldr	r3, [pc, #40]	; (8008698 <_vfiprintf_r+0x228>)
 8008670:	a904      	add	r1, sp, #16
 8008672:	4630      	mov	r0, r6
 8008674:	f7fc fa3e 	bl	8004af4 <_printf_i>
 8008678:	e7ec      	b.n	8008654 <_vfiprintf_r+0x1e4>
 800867a:	bf00      	nop
 800867c:	08008a60 	.word	0x08008a60
 8008680:	08008bac 	.word	0x08008bac
 8008684:	08008a80 	.word	0x08008a80
 8008688:	08008a40 	.word	0x08008a40
 800868c:	08008bb2 	.word	0x08008bb2
 8008690:	08008bb6 	.word	0x08008bb6
 8008694:	0800459d 	.word	0x0800459d
 8008698:	0800844b 	.word	0x0800844b

0800869c <_sbrk_r>:
 800869c:	b538      	push	{r3, r4, r5, lr}
 800869e:	2300      	movs	r3, #0
 80086a0:	4c05      	ldr	r4, [pc, #20]	; (80086b8 <_sbrk_r+0x1c>)
 80086a2:	4605      	mov	r5, r0
 80086a4:	4608      	mov	r0, r1
 80086a6:	6023      	str	r3, [r4, #0]
 80086a8:	f7f9 fa16 	bl	8001ad8 <_sbrk>
 80086ac:	1c43      	adds	r3, r0, #1
 80086ae:	d102      	bne.n	80086b6 <_sbrk_r+0x1a>
 80086b0:	6823      	ldr	r3, [r4, #0]
 80086b2:	b103      	cbz	r3, 80086b6 <_sbrk_r+0x1a>
 80086b4:	602b      	str	r3, [r5, #0]
 80086b6:	bd38      	pop	{r3, r4, r5, pc}
 80086b8:	20003394 	.word	0x20003394

080086bc <__sread>:
 80086bc:	b510      	push	{r4, lr}
 80086be:	460c      	mov	r4, r1
 80086c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086c4:	f000 f8f4 	bl	80088b0 <_read_r>
 80086c8:	2800      	cmp	r0, #0
 80086ca:	bfab      	itete	ge
 80086cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086ce:	89a3      	ldrhlt	r3, [r4, #12]
 80086d0:	181b      	addge	r3, r3, r0
 80086d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086d6:	bfac      	ite	ge
 80086d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80086da:	81a3      	strhlt	r3, [r4, #12]
 80086dc:	bd10      	pop	{r4, pc}

080086de <__swrite>:
 80086de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086e2:	461f      	mov	r7, r3
 80086e4:	898b      	ldrh	r3, [r1, #12]
 80086e6:	4605      	mov	r5, r0
 80086e8:	05db      	lsls	r3, r3, #23
 80086ea:	460c      	mov	r4, r1
 80086ec:	4616      	mov	r6, r2
 80086ee:	d505      	bpl.n	80086fc <__swrite+0x1e>
 80086f0:	2302      	movs	r3, #2
 80086f2:	2200      	movs	r2, #0
 80086f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f8:	f000 f886 	bl	8008808 <_lseek_r>
 80086fc:	89a3      	ldrh	r3, [r4, #12]
 80086fe:	4632      	mov	r2, r6
 8008700:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008704:	81a3      	strh	r3, [r4, #12]
 8008706:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800870a:	463b      	mov	r3, r7
 800870c:	4628      	mov	r0, r5
 800870e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008712:	f000 b835 	b.w	8008780 <_write_r>

08008716 <__sseek>:
 8008716:	b510      	push	{r4, lr}
 8008718:	460c      	mov	r4, r1
 800871a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800871e:	f000 f873 	bl	8008808 <_lseek_r>
 8008722:	1c43      	adds	r3, r0, #1
 8008724:	89a3      	ldrh	r3, [r4, #12]
 8008726:	bf15      	itete	ne
 8008728:	6560      	strne	r0, [r4, #84]	; 0x54
 800872a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800872e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008732:	81a3      	strheq	r3, [r4, #12]
 8008734:	bf18      	it	ne
 8008736:	81a3      	strhne	r3, [r4, #12]
 8008738:	bd10      	pop	{r4, pc}

0800873a <__sclose>:
 800873a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800873e:	f000 b831 	b.w	80087a4 <_close_r>

08008742 <strncmp>:
 8008742:	b510      	push	{r4, lr}
 8008744:	b16a      	cbz	r2, 8008762 <strncmp+0x20>
 8008746:	3901      	subs	r1, #1
 8008748:	1884      	adds	r4, r0, r2
 800874a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800874e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008752:	4293      	cmp	r3, r2
 8008754:	d103      	bne.n	800875e <strncmp+0x1c>
 8008756:	42a0      	cmp	r0, r4
 8008758:	d001      	beq.n	800875e <strncmp+0x1c>
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1f5      	bne.n	800874a <strncmp+0x8>
 800875e:	1a98      	subs	r0, r3, r2
 8008760:	bd10      	pop	{r4, pc}
 8008762:	4610      	mov	r0, r2
 8008764:	e7fc      	b.n	8008760 <strncmp+0x1e>

08008766 <__ascii_wctomb>:
 8008766:	b149      	cbz	r1, 800877c <__ascii_wctomb+0x16>
 8008768:	2aff      	cmp	r2, #255	; 0xff
 800876a:	bf8b      	itete	hi
 800876c:	238a      	movhi	r3, #138	; 0x8a
 800876e:	700a      	strbls	r2, [r1, #0]
 8008770:	6003      	strhi	r3, [r0, #0]
 8008772:	2001      	movls	r0, #1
 8008774:	bf88      	it	hi
 8008776:	f04f 30ff 	movhi.w	r0, #4294967295
 800877a:	4770      	bx	lr
 800877c:	4608      	mov	r0, r1
 800877e:	4770      	bx	lr

08008780 <_write_r>:
 8008780:	b538      	push	{r3, r4, r5, lr}
 8008782:	4605      	mov	r5, r0
 8008784:	4608      	mov	r0, r1
 8008786:	4611      	mov	r1, r2
 8008788:	2200      	movs	r2, #0
 800878a:	4c05      	ldr	r4, [pc, #20]	; (80087a0 <_write_r+0x20>)
 800878c:	6022      	str	r2, [r4, #0]
 800878e:	461a      	mov	r2, r3
 8008790:	f7f9 f956 	bl	8001a40 <_write>
 8008794:	1c43      	adds	r3, r0, #1
 8008796:	d102      	bne.n	800879e <_write_r+0x1e>
 8008798:	6823      	ldr	r3, [r4, #0]
 800879a:	b103      	cbz	r3, 800879e <_write_r+0x1e>
 800879c:	602b      	str	r3, [r5, #0]
 800879e:	bd38      	pop	{r3, r4, r5, pc}
 80087a0:	20003394 	.word	0x20003394

080087a4 <_close_r>:
 80087a4:	b538      	push	{r3, r4, r5, lr}
 80087a6:	2300      	movs	r3, #0
 80087a8:	4c05      	ldr	r4, [pc, #20]	; (80087c0 <_close_r+0x1c>)
 80087aa:	4605      	mov	r5, r0
 80087ac:	4608      	mov	r0, r1
 80087ae:	6023      	str	r3, [r4, #0]
 80087b0:	f7f9 f962 	bl	8001a78 <_close>
 80087b4:	1c43      	adds	r3, r0, #1
 80087b6:	d102      	bne.n	80087be <_close_r+0x1a>
 80087b8:	6823      	ldr	r3, [r4, #0]
 80087ba:	b103      	cbz	r3, 80087be <_close_r+0x1a>
 80087bc:	602b      	str	r3, [r5, #0]
 80087be:	bd38      	pop	{r3, r4, r5, pc}
 80087c0:	20003394 	.word	0x20003394

080087c4 <_fstat_r>:
 80087c4:	b538      	push	{r3, r4, r5, lr}
 80087c6:	2300      	movs	r3, #0
 80087c8:	4c06      	ldr	r4, [pc, #24]	; (80087e4 <_fstat_r+0x20>)
 80087ca:	4605      	mov	r5, r0
 80087cc:	4608      	mov	r0, r1
 80087ce:	4611      	mov	r1, r2
 80087d0:	6023      	str	r3, [r4, #0]
 80087d2:	f7f9 f95c 	bl	8001a8e <_fstat>
 80087d6:	1c43      	adds	r3, r0, #1
 80087d8:	d102      	bne.n	80087e0 <_fstat_r+0x1c>
 80087da:	6823      	ldr	r3, [r4, #0]
 80087dc:	b103      	cbz	r3, 80087e0 <_fstat_r+0x1c>
 80087de:	602b      	str	r3, [r5, #0]
 80087e0:	bd38      	pop	{r3, r4, r5, pc}
 80087e2:	bf00      	nop
 80087e4:	20003394 	.word	0x20003394

080087e8 <_isatty_r>:
 80087e8:	b538      	push	{r3, r4, r5, lr}
 80087ea:	2300      	movs	r3, #0
 80087ec:	4c05      	ldr	r4, [pc, #20]	; (8008804 <_isatty_r+0x1c>)
 80087ee:	4605      	mov	r5, r0
 80087f0:	4608      	mov	r0, r1
 80087f2:	6023      	str	r3, [r4, #0]
 80087f4:	f7f9 f95a 	bl	8001aac <_isatty>
 80087f8:	1c43      	adds	r3, r0, #1
 80087fa:	d102      	bne.n	8008802 <_isatty_r+0x1a>
 80087fc:	6823      	ldr	r3, [r4, #0]
 80087fe:	b103      	cbz	r3, 8008802 <_isatty_r+0x1a>
 8008800:	602b      	str	r3, [r5, #0]
 8008802:	bd38      	pop	{r3, r4, r5, pc}
 8008804:	20003394 	.word	0x20003394

08008808 <_lseek_r>:
 8008808:	b538      	push	{r3, r4, r5, lr}
 800880a:	4605      	mov	r5, r0
 800880c:	4608      	mov	r0, r1
 800880e:	4611      	mov	r1, r2
 8008810:	2200      	movs	r2, #0
 8008812:	4c05      	ldr	r4, [pc, #20]	; (8008828 <_lseek_r+0x20>)
 8008814:	6022      	str	r2, [r4, #0]
 8008816:	461a      	mov	r2, r3
 8008818:	f7f9 f952 	bl	8001ac0 <_lseek>
 800881c:	1c43      	adds	r3, r0, #1
 800881e:	d102      	bne.n	8008826 <_lseek_r+0x1e>
 8008820:	6823      	ldr	r3, [r4, #0]
 8008822:	b103      	cbz	r3, 8008826 <_lseek_r+0x1e>
 8008824:	602b      	str	r3, [r5, #0]
 8008826:	bd38      	pop	{r3, r4, r5, pc}
 8008828:	20003394 	.word	0x20003394

0800882c <memmove>:
 800882c:	4288      	cmp	r0, r1
 800882e:	b510      	push	{r4, lr}
 8008830:	eb01 0302 	add.w	r3, r1, r2
 8008834:	d807      	bhi.n	8008846 <memmove+0x1a>
 8008836:	1e42      	subs	r2, r0, #1
 8008838:	4299      	cmp	r1, r3
 800883a:	d00a      	beq.n	8008852 <memmove+0x26>
 800883c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008840:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008844:	e7f8      	b.n	8008838 <memmove+0xc>
 8008846:	4283      	cmp	r3, r0
 8008848:	d9f5      	bls.n	8008836 <memmove+0xa>
 800884a:	1881      	adds	r1, r0, r2
 800884c:	1ad2      	subs	r2, r2, r3
 800884e:	42d3      	cmn	r3, r2
 8008850:	d100      	bne.n	8008854 <memmove+0x28>
 8008852:	bd10      	pop	{r4, pc}
 8008854:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008858:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800885c:	e7f7      	b.n	800884e <memmove+0x22>

0800885e <__malloc_lock>:
 800885e:	4770      	bx	lr

08008860 <__malloc_unlock>:
 8008860:	4770      	bx	lr

08008862 <_realloc_r>:
 8008862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008864:	4607      	mov	r7, r0
 8008866:	4614      	mov	r4, r2
 8008868:	460e      	mov	r6, r1
 800886a:	b921      	cbnz	r1, 8008876 <_realloc_r+0x14>
 800886c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008870:	4611      	mov	r1, r2
 8008872:	f7ff bc29 	b.w	80080c8 <_malloc_r>
 8008876:	b922      	cbnz	r2, 8008882 <_realloc_r+0x20>
 8008878:	f7ff fbda 	bl	8008030 <_free_r>
 800887c:	4625      	mov	r5, r4
 800887e:	4628      	mov	r0, r5
 8008880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008882:	f000 f827 	bl	80088d4 <_malloc_usable_size_r>
 8008886:	42a0      	cmp	r0, r4
 8008888:	d20f      	bcs.n	80088aa <_realloc_r+0x48>
 800888a:	4621      	mov	r1, r4
 800888c:	4638      	mov	r0, r7
 800888e:	f7ff fc1b 	bl	80080c8 <_malloc_r>
 8008892:	4605      	mov	r5, r0
 8008894:	2800      	cmp	r0, #0
 8008896:	d0f2      	beq.n	800887e <_realloc_r+0x1c>
 8008898:	4631      	mov	r1, r6
 800889a:	4622      	mov	r2, r4
 800889c:	f7fb fdda 	bl	8004454 <memcpy>
 80088a0:	4631      	mov	r1, r6
 80088a2:	4638      	mov	r0, r7
 80088a4:	f7ff fbc4 	bl	8008030 <_free_r>
 80088a8:	e7e9      	b.n	800887e <_realloc_r+0x1c>
 80088aa:	4635      	mov	r5, r6
 80088ac:	e7e7      	b.n	800887e <_realloc_r+0x1c>
	...

080088b0 <_read_r>:
 80088b0:	b538      	push	{r3, r4, r5, lr}
 80088b2:	4605      	mov	r5, r0
 80088b4:	4608      	mov	r0, r1
 80088b6:	4611      	mov	r1, r2
 80088b8:	2200      	movs	r2, #0
 80088ba:	4c05      	ldr	r4, [pc, #20]	; (80088d0 <_read_r+0x20>)
 80088bc:	6022      	str	r2, [r4, #0]
 80088be:	461a      	mov	r2, r3
 80088c0:	f7f9 f8a1 	bl	8001a06 <_read>
 80088c4:	1c43      	adds	r3, r0, #1
 80088c6:	d102      	bne.n	80088ce <_read_r+0x1e>
 80088c8:	6823      	ldr	r3, [r4, #0]
 80088ca:	b103      	cbz	r3, 80088ce <_read_r+0x1e>
 80088cc:	602b      	str	r3, [r5, #0]
 80088ce:	bd38      	pop	{r3, r4, r5, pc}
 80088d0:	20003394 	.word	0x20003394

080088d4 <_malloc_usable_size_r>:
 80088d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088d8:	1f18      	subs	r0, r3, #4
 80088da:	2b00      	cmp	r3, #0
 80088dc:	bfbc      	itt	lt
 80088de:	580b      	ldrlt	r3, [r1, r0]
 80088e0:	18c0      	addlt	r0, r0, r3
 80088e2:	4770      	bx	lr

080088e4 <_init>:
 80088e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088e6:	bf00      	nop
 80088e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ea:	bc08      	pop	{r3}
 80088ec:	469e      	mov	lr, r3
 80088ee:	4770      	bx	lr

080088f0 <_fini>:
 80088f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f2:	bf00      	nop
 80088f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088f6:	bc08      	pop	{r3}
 80088f8:	469e      	mov	lr, r3
 80088fa:	4770      	bx	lr
