
L0_LTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08005000  08005000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .app_info     00000008  080050c0  080050c0  000050c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a6a0  080050c8  080050c8  000050c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a80  0800f768  0800f768  0000f768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080101e8  080101e8  000203f8  2**0
                  CONTENTS
  5 .ARM          00000008  080101e8  080101e8  000101e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080101f0  080101f0  000203f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080101f0  080101f0  000101f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080101f4  080101f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RAMVectorTable 00000100  20000000  20000000  00030000  2**2
                  ALLOC
 10 .IAPMailbox   00000008  20000100  20000100  00030000  2**2
                  ALLOC
 11 .data         000001ec  20000108  080101f8  00020108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .app_sha      00000014  080103e4  080103e4  000203e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .conf         00000000  0802f000  0802f000  000203f8  2**0
                  CONTENTS
 14 .bss          00001d64  200002f4  200002f4  00030000  2**2
                  ALLOC
 15 ._user_heap_stack 00000600  20002058  20002058  00030000  2**0
                  ALLOC
 16 .ARM.attributes 00000028  00000000  00000000  000203f8  2**0
                  CONTENTS, READONLY
 17 .debug_info   0001cae7  00000000  00000000  00020420  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00004925  00000000  00000000  0003cf07  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00008448  00000000  00000000  0004182c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_aranges 00000de0  00000000  00000000  00049c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 000010c0  00000000  00000000  0004aa58  2**3
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macro  00019d4a  00000000  00000000  0004bb18  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line   00012145  00000000  00000000  00065862  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    0008db08  00000000  00000000  000779a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .comment      0000007b  00000000  00000000  001054af  2**0
                  CONTENTS, READONLY
 26 .debug_frame  000038c4  00000000  00000000  0010552c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080050c8 <__do_global_dtors_aux>:
 80050c8:	b510      	push	{r4, lr}
 80050ca:	4c06      	ldr	r4, [pc, #24]	; (80050e4 <__do_global_dtors_aux+0x1c>)
 80050cc:	7823      	ldrb	r3, [r4, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d107      	bne.n	80050e2 <__do_global_dtors_aux+0x1a>
 80050d2:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <__do_global_dtors_aux+0x20>)
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <__do_global_dtors_aux+0x16>
 80050d8:	4804      	ldr	r0, [pc, #16]	; (80050ec <__do_global_dtors_aux+0x24>)
 80050da:	e000      	b.n	80050de <__do_global_dtors_aux+0x16>
 80050dc:	bf00      	nop
 80050de:	2301      	movs	r3, #1
 80050e0:	7023      	strb	r3, [r4, #0]
 80050e2:	bd10      	pop	{r4, pc}
 80050e4:	200002f4 	.word	0x200002f4
 80050e8:	00000000 	.word	0x00000000
 80050ec:	0800f750 	.word	0x0800f750

080050f0 <frame_dummy>:
 80050f0:	4b04      	ldr	r3, [pc, #16]	; (8005104 <frame_dummy+0x14>)
 80050f2:	b510      	push	{r4, lr}
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <frame_dummy+0x10>
 80050f8:	4903      	ldr	r1, [pc, #12]	; (8005108 <frame_dummy+0x18>)
 80050fa:	4804      	ldr	r0, [pc, #16]	; (800510c <frame_dummy+0x1c>)
 80050fc:	e000      	b.n	8005100 <frame_dummy+0x10>
 80050fe:	bf00      	nop
 8005100:	bd10      	pop	{r4, pc}
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	00000000 	.word	0x00000000
 8005108:	200002f8 	.word	0x200002f8
 800510c:	0800f750 	.word	0x0800f750

08005110 <strlen>:
 8005110:	2300      	movs	r3, #0
 8005112:	5cc2      	ldrb	r2, [r0, r3]
 8005114:	3301      	adds	r3, #1
 8005116:	2a00      	cmp	r2, #0
 8005118:	d1fb      	bne.n	8005112 <strlen+0x2>
 800511a:	1e58      	subs	r0, r3, #1
 800511c:	4770      	bx	lr
	...

08005120 <__gnu_thumb1_case_sqi>:
 8005120:	b402      	push	{r1}
 8005122:	4671      	mov	r1, lr
 8005124:	0849      	lsrs	r1, r1, #1
 8005126:	0049      	lsls	r1, r1, #1
 8005128:	5609      	ldrsb	r1, [r1, r0]
 800512a:	0049      	lsls	r1, r1, #1
 800512c:	448e      	add	lr, r1
 800512e:	bc02      	pop	{r1}
 8005130:	4770      	bx	lr
 8005132:	46c0      	nop			; (mov r8, r8)

08005134 <__gnu_thumb1_case_uqi>:
 8005134:	b402      	push	{r1}
 8005136:	4671      	mov	r1, lr
 8005138:	0849      	lsrs	r1, r1, #1
 800513a:	0049      	lsls	r1, r1, #1
 800513c:	5c09      	ldrb	r1, [r1, r0]
 800513e:	0049      	lsls	r1, r1, #1
 8005140:	448e      	add	lr, r1
 8005142:	bc02      	pop	{r1}
 8005144:	4770      	bx	lr
 8005146:	46c0      	nop			; (mov r8, r8)

08005148 <__udivsi3>:
 8005148:	2200      	movs	r2, #0
 800514a:	0843      	lsrs	r3, r0, #1
 800514c:	428b      	cmp	r3, r1
 800514e:	d374      	bcc.n	800523a <__udivsi3+0xf2>
 8005150:	0903      	lsrs	r3, r0, #4
 8005152:	428b      	cmp	r3, r1
 8005154:	d35f      	bcc.n	8005216 <__udivsi3+0xce>
 8005156:	0a03      	lsrs	r3, r0, #8
 8005158:	428b      	cmp	r3, r1
 800515a:	d344      	bcc.n	80051e6 <__udivsi3+0x9e>
 800515c:	0b03      	lsrs	r3, r0, #12
 800515e:	428b      	cmp	r3, r1
 8005160:	d328      	bcc.n	80051b4 <__udivsi3+0x6c>
 8005162:	0c03      	lsrs	r3, r0, #16
 8005164:	428b      	cmp	r3, r1
 8005166:	d30d      	bcc.n	8005184 <__udivsi3+0x3c>
 8005168:	22ff      	movs	r2, #255	; 0xff
 800516a:	0209      	lsls	r1, r1, #8
 800516c:	ba12      	rev	r2, r2
 800516e:	0c03      	lsrs	r3, r0, #16
 8005170:	428b      	cmp	r3, r1
 8005172:	d302      	bcc.n	800517a <__udivsi3+0x32>
 8005174:	1212      	asrs	r2, r2, #8
 8005176:	0209      	lsls	r1, r1, #8
 8005178:	d065      	beq.n	8005246 <__udivsi3+0xfe>
 800517a:	0b03      	lsrs	r3, r0, #12
 800517c:	428b      	cmp	r3, r1
 800517e:	d319      	bcc.n	80051b4 <__udivsi3+0x6c>
 8005180:	e000      	b.n	8005184 <__udivsi3+0x3c>
 8005182:	0a09      	lsrs	r1, r1, #8
 8005184:	0bc3      	lsrs	r3, r0, #15
 8005186:	428b      	cmp	r3, r1
 8005188:	d301      	bcc.n	800518e <__udivsi3+0x46>
 800518a:	03cb      	lsls	r3, r1, #15
 800518c:	1ac0      	subs	r0, r0, r3
 800518e:	4152      	adcs	r2, r2
 8005190:	0b83      	lsrs	r3, r0, #14
 8005192:	428b      	cmp	r3, r1
 8005194:	d301      	bcc.n	800519a <__udivsi3+0x52>
 8005196:	038b      	lsls	r3, r1, #14
 8005198:	1ac0      	subs	r0, r0, r3
 800519a:	4152      	adcs	r2, r2
 800519c:	0b43      	lsrs	r3, r0, #13
 800519e:	428b      	cmp	r3, r1
 80051a0:	d301      	bcc.n	80051a6 <__udivsi3+0x5e>
 80051a2:	034b      	lsls	r3, r1, #13
 80051a4:	1ac0      	subs	r0, r0, r3
 80051a6:	4152      	adcs	r2, r2
 80051a8:	0b03      	lsrs	r3, r0, #12
 80051aa:	428b      	cmp	r3, r1
 80051ac:	d301      	bcc.n	80051b2 <__udivsi3+0x6a>
 80051ae:	030b      	lsls	r3, r1, #12
 80051b0:	1ac0      	subs	r0, r0, r3
 80051b2:	4152      	adcs	r2, r2
 80051b4:	0ac3      	lsrs	r3, r0, #11
 80051b6:	428b      	cmp	r3, r1
 80051b8:	d301      	bcc.n	80051be <__udivsi3+0x76>
 80051ba:	02cb      	lsls	r3, r1, #11
 80051bc:	1ac0      	subs	r0, r0, r3
 80051be:	4152      	adcs	r2, r2
 80051c0:	0a83      	lsrs	r3, r0, #10
 80051c2:	428b      	cmp	r3, r1
 80051c4:	d301      	bcc.n	80051ca <__udivsi3+0x82>
 80051c6:	028b      	lsls	r3, r1, #10
 80051c8:	1ac0      	subs	r0, r0, r3
 80051ca:	4152      	adcs	r2, r2
 80051cc:	0a43      	lsrs	r3, r0, #9
 80051ce:	428b      	cmp	r3, r1
 80051d0:	d301      	bcc.n	80051d6 <__udivsi3+0x8e>
 80051d2:	024b      	lsls	r3, r1, #9
 80051d4:	1ac0      	subs	r0, r0, r3
 80051d6:	4152      	adcs	r2, r2
 80051d8:	0a03      	lsrs	r3, r0, #8
 80051da:	428b      	cmp	r3, r1
 80051dc:	d301      	bcc.n	80051e2 <__udivsi3+0x9a>
 80051de:	020b      	lsls	r3, r1, #8
 80051e0:	1ac0      	subs	r0, r0, r3
 80051e2:	4152      	adcs	r2, r2
 80051e4:	d2cd      	bcs.n	8005182 <__udivsi3+0x3a>
 80051e6:	09c3      	lsrs	r3, r0, #7
 80051e8:	428b      	cmp	r3, r1
 80051ea:	d301      	bcc.n	80051f0 <__udivsi3+0xa8>
 80051ec:	01cb      	lsls	r3, r1, #7
 80051ee:	1ac0      	subs	r0, r0, r3
 80051f0:	4152      	adcs	r2, r2
 80051f2:	0983      	lsrs	r3, r0, #6
 80051f4:	428b      	cmp	r3, r1
 80051f6:	d301      	bcc.n	80051fc <__udivsi3+0xb4>
 80051f8:	018b      	lsls	r3, r1, #6
 80051fa:	1ac0      	subs	r0, r0, r3
 80051fc:	4152      	adcs	r2, r2
 80051fe:	0943      	lsrs	r3, r0, #5
 8005200:	428b      	cmp	r3, r1
 8005202:	d301      	bcc.n	8005208 <__udivsi3+0xc0>
 8005204:	014b      	lsls	r3, r1, #5
 8005206:	1ac0      	subs	r0, r0, r3
 8005208:	4152      	adcs	r2, r2
 800520a:	0903      	lsrs	r3, r0, #4
 800520c:	428b      	cmp	r3, r1
 800520e:	d301      	bcc.n	8005214 <__udivsi3+0xcc>
 8005210:	010b      	lsls	r3, r1, #4
 8005212:	1ac0      	subs	r0, r0, r3
 8005214:	4152      	adcs	r2, r2
 8005216:	08c3      	lsrs	r3, r0, #3
 8005218:	428b      	cmp	r3, r1
 800521a:	d301      	bcc.n	8005220 <__udivsi3+0xd8>
 800521c:	00cb      	lsls	r3, r1, #3
 800521e:	1ac0      	subs	r0, r0, r3
 8005220:	4152      	adcs	r2, r2
 8005222:	0883      	lsrs	r3, r0, #2
 8005224:	428b      	cmp	r3, r1
 8005226:	d301      	bcc.n	800522c <__udivsi3+0xe4>
 8005228:	008b      	lsls	r3, r1, #2
 800522a:	1ac0      	subs	r0, r0, r3
 800522c:	4152      	adcs	r2, r2
 800522e:	0843      	lsrs	r3, r0, #1
 8005230:	428b      	cmp	r3, r1
 8005232:	d301      	bcc.n	8005238 <__udivsi3+0xf0>
 8005234:	004b      	lsls	r3, r1, #1
 8005236:	1ac0      	subs	r0, r0, r3
 8005238:	4152      	adcs	r2, r2
 800523a:	1a41      	subs	r1, r0, r1
 800523c:	d200      	bcs.n	8005240 <__udivsi3+0xf8>
 800523e:	4601      	mov	r1, r0
 8005240:	4152      	adcs	r2, r2
 8005242:	4610      	mov	r0, r2
 8005244:	4770      	bx	lr
 8005246:	e7ff      	b.n	8005248 <__udivsi3+0x100>
 8005248:	b501      	push	{r0, lr}
 800524a:	2000      	movs	r0, #0
 800524c:	f000 f8f0 	bl	8005430 <__aeabi_idiv0>
 8005250:	bd02      	pop	{r1, pc}
 8005252:	46c0      	nop			; (mov r8, r8)

08005254 <__aeabi_uidivmod>:
 8005254:	2900      	cmp	r1, #0
 8005256:	d0f7      	beq.n	8005248 <__udivsi3+0x100>
 8005258:	e776      	b.n	8005148 <__udivsi3>
 800525a:	4770      	bx	lr

0800525c <__divsi3>:
 800525c:	4603      	mov	r3, r0
 800525e:	430b      	orrs	r3, r1
 8005260:	d47f      	bmi.n	8005362 <__divsi3+0x106>
 8005262:	2200      	movs	r2, #0
 8005264:	0843      	lsrs	r3, r0, #1
 8005266:	428b      	cmp	r3, r1
 8005268:	d374      	bcc.n	8005354 <__divsi3+0xf8>
 800526a:	0903      	lsrs	r3, r0, #4
 800526c:	428b      	cmp	r3, r1
 800526e:	d35f      	bcc.n	8005330 <__divsi3+0xd4>
 8005270:	0a03      	lsrs	r3, r0, #8
 8005272:	428b      	cmp	r3, r1
 8005274:	d344      	bcc.n	8005300 <__divsi3+0xa4>
 8005276:	0b03      	lsrs	r3, r0, #12
 8005278:	428b      	cmp	r3, r1
 800527a:	d328      	bcc.n	80052ce <__divsi3+0x72>
 800527c:	0c03      	lsrs	r3, r0, #16
 800527e:	428b      	cmp	r3, r1
 8005280:	d30d      	bcc.n	800529e <__divsi3+0x42>
 8005282:	22ff      	movs	r2, #255	; 0xff
 8005284:	0209      	lsls	r1, r1, #8
 8005286:	ba12      	rev	r2, r2
 8005288:	0c03      	lsrs	r3, r0, #16
 800528a:	428b      	cmp	r3, r1
 800528c:	d302      	bcc.n	8005294 <__divsi3+0x38>
 800528e:	1212      	asrs	r2, r2, #8
 8005290:	0209      	lsls	r1, r1, #8
 8005292:	d065      	beq.n	8005360 <__divsi3+0x104>
 8005294:	0b03      	lsrs	r3, r0, #12
 8005296:	428b      	cmp	r3, r1
 8005298:	d319      	bcc.n	80052ce <__divsi3+0x72>
 800529a:	e000      	b.n	800529e <__divsi3+0x42>
 800529c:	0a09      	lsrs	r1, r1, #8
 800529e:	0bc3      	lsrs	r3, r0, #15
 80052a0:	428b      	cmp	r3, r1
 80052a2:	d301      	bcc.n	80052a8 <__divsi3+0x4c>
 80052a4:	03cb      	lsls	r3, r1, #15
 80052a6:	1ac0      	subs	r0, r0, r3
 80052a8:	4152      	adcs	r2, r2
 80052aa:	0b83      	lsrs	r3, r0, #14
 80052ac:	428b      	cmp	r3, r1
 80052ae:	d301      	bcc.n	80052b4 <__divsi3+0x58>
 80052b0:	038b      	lsls	r3, r1, #14
 80052b2:	1ac0      	subs	r0, r0, r3
 80052b4:	4152      	adcs	r2, r2
 80052b6:	0b43      	lsrs	r3, r0, #13
 80052b8:	428b      	cmp	r3, r1
 80052ba:	d301      	bcc.n	80052c0 <__divsi3+0x64>
 80052bc:	034b      	lsls	r3, r1, #13
 80052be:	1ac0      	subs	r0, r0, r3
 80052c0:	4152      	adcs	r2, r2
 80052c2:	0b03      	lsrs	r3, r0, #12
 80052c4:	428b      	cmp	r3, r1
 80052c6:	d301      	bcc.n	80052cc <__divsi3+0x70>
 80052c8:	030b      	lsls	r3, r1, #12
 80052ca:	1ac0      	subs	r0, r0, r3
 80052cc:	4152      	adcs	r2, r2
 80052ce:	0ac3      	lsrs	r3, r0, #11
 80052d0:	428b      	cmp	r3, r1
 80052d2:	d301      	bcc.n	80052d8 <__divsi3+0x7c>
 80052d4:	02cb      	lsls	r3, r1, #11
 80052d6:	1ac0      	subs	r0, r0, r3
 80052d8:	4152      	adcs	r2, r2
 80052da:	0a83      	lsrs	r3, r0, #10
 80052dc:	428b      	cmp	r3, r1
 80052de:	d301      	bcc.n	80052e4 <__divsi3+0x88>
 80052e0:	028b      	lsls	r3, r1, #10
 80052e2:	1ac0      	subs	r0, r0, r3
 80052e4:	4152      	adcs	r2, r2
 80052e6:	0a43      	lsrs	r3, r0, #9
 80052e8:	428b      	cmp	r3, r1
 80052ea:	d301      	bcc.n	80052f0 <__divsi3+0x94>
 80052ec:	024b      	lsls	r3, r1, #9
 80052ee:	1ac0      	subs	r0, r0, r3
 80052f0:	4152      	adcs	r2, r2
 80052f2:	0a03      	lsrs	r3, r0, #8
 80052f4:	428b      	cmp	r3, r1
 80052f6:	d301      	bcc.n	80052fc <__divsi3+0xa0>
 80052f8:	020b      	lsls	r3, r1, #8
 80052fa:	1ac0      	subs	r0, r0, r3
 80052fc:	4152      	adcs	r2, r2
 80052fe:	d2cd      	bcs.n	800529c <__divsi3+0x40>
 8005300:	09c3      	lsrs	r3, r0, #7
 8005302:	428b      	cmp	r3, r1
 8005304:	d301      	bcc.n	800530a <__divsi3+0xae>
 8005306:	01cb      	lsls	r3, r1, #7
 8005308:	1ac0      	subs	r0, r0, r3
 800530a:	4152      	adcs	r2, r2
 800530c:	0983      	lsrs	r3, r0, #6
 800530e:	428b      	cmp	r3, r1
 8005310:	d301      	bcc.n	8005316 <__divsi3+0xba>
 8005312:	018b      	lsls	r3, r1, #6
 8005314:	1ac0      	subs	r0, r0, r3
 8005316:	4152      	adcs	r2, r2
 8005318:	0943      	lsrs	r3, r0, #5
 800531a:	428b      	cmp	r3, r1
 800531c:	d301      	bcc.n	8005322 <__divsi3+0xc6>
 800531e:	014b      	lsls	r3, r1, #5
 8005320:	1ac0      	subs	r0, r0, r3
 8005322:	4152      	adcs	r2, r2
 8005324:	0903      	lsrs	r3, r0, #4
 8005326:	428b      	cmp	r3, r1
 8005328:	d301      	bcc.n	800532e <__divsi3+0xd2>
 800532a:	010b      	lsls	r3, r1, #4
 800532c:	1ac0      	subs	r0, r0, r3
 800532e:	4152      	adcs	r2, r2
 8005330:	08c3      	lsrs	r3, r0, #3
 8005332:	428b      	cmp	r3, r1
 8005334:	d301      	bcc.n	800533a <__divsi3+0xde>
 8005336:	00cb      	lsls	r3, r1, #3
 8005338:	1ac0      	subs	r0, r0, r3
 800533a:	4152      	adcs	r2, r2
 800533c:	0883      	lsrs	r3, r0, #2
 800533e:	428b      	cmp	r3, r1
 8005340:	d301      	bcc.n	8005346 <__divsi3+0xea>
 8005342:	008b      	lsls	r3, r1, #2
 8005344:	1ac0      	subs	r0, r0, r3
 8005346:	4152      	adcs	r2, r2
 8005348:	0843      	lsrs	r3, r0, #1
 800534a:	428b      	cmp	r3, r1
 800534c:	d301      	bcc.n	8005352 <__divsi3+0xf6>
 800534e:	004b      	lsls	r3, r1, #1
 8005350:	1ac0      	subs	r0, r0, r3
 8005352:	4152      	adcs	r2, r2
 8005354:	1a41      	subs	r1, r0, r1
 8005356:	d200      	bcs.n	800535a <__divsi3+0xfe>
 8005358:	4601      	mov	r1, r0
 800535a:	4152      	adcs	r2, r2
 800535c:	4610      	mov	r0, r2
 800535e:	4770      	bx	lr
 8005360:	e05d      	b.n	800541e <__divsi3+0x1c2>
 8005362:	0fca      	lsrs	r2, r1, #31
 8005364:	d000      	beq.n	8005368 <__divsi3+0x10c>
 8005366:	4249      	negs	r1, r1
 8005368:	1003      	asrs	r3, r0, #32
 800536a:	d300      	bcc.n	800536e <__divsi3+0x112>
 800536c:	4240      	negs	r0, r0
 800536e:	4053      	eors	r3, r2
 8005370:	2200      	movs	r2, #0
 8005372:	469c      	mov	ip, r3
 8005374:	0903      	lsrs	r3, r0, #4
 8005376:	428b      	cmp	r3, r1
 8005378:	d32d      	bcc.n	80053d6 <__divsi3+0x17a>
 800537a:	0a03      	lsrs	r3, r0, #8
 800537c:	428b      	cmp	r3, r1
 800537e:	d312      	bcc.n	80053a6 <__divsi3+0x14a>
 8005380:	22fc      	movs	r2, #252	; 0xfc
 8005382:	0189      	lsls	r1, r1, #6
 8005384:	ba12      	rev	r2, r2
 8005386:	0a03      	lsrs	r3, r0, #8
 8005388:	428b      	cmp	r3, r1
 800538a:	d30c      	bcc.n	80053a6 <__divsi3+0x14a>
 800538c:	0189      	lsls	r1, r1, #6
 800538e:	1192      	asrs	r2, r2, #6
 8005390:	428b      	cmp	r3, r1
 8005392:	d308      	bcc.n	80053a6 <__divsi3+0x14a>
 8005394:	0189      	lsls	r1, r1, #6
 8005396:	1192      	asrs	r2, r2, #6
 8005398:	428b      	cmp	r3, r1
 800539a:	d304      	bcc.n	80053a6 <__divsi3+0x14a>
 800539c:	0189      	lsls	r1, r1, #6
 800539e:	d03a      	beq.n	8005416 <__divsi3+0x1ba>
 80053a0:	1192      	asrs	r2, r2, #6
 80053a2:	e000      	b.n	80053a6 <__divsi3+0x14a>
 80053a4:	0989      	lsrs	r1, r1, #6
 80053a6:	09c3      	lsrs	r3, r0, #7
 80053a8:	428b      	cmp	r3, r1
 80053aa:	d301      	bcc.n	80053b0 <__divsi3+0x154>
 80053ac:	01cb      	lsls	r3, r1, #7
 80053ae:	1ac0      	subs	r0, r0, r3
 80053b0:	4152      	adcs	r2, r2
 80053b2:	0983      	lsrs	r3, r0, #6
 80053b4:	428b      	cmp	r3, r1
 80053b6:	d301      	bcc.n	80053bc <__divsi3+0x160>
 80053b8:	018b      	lsls	r3, r1, #6
 80053ba:	1ac0      	subs	r0, r0, r3
 80053bc:	4152      	adcs	r2, r2
 80053be:	0943      	lsrs	r3, r0, #5
 80053c0:	428b      	cmp	r3, r1
 80053c2:	d301      	bcc.n	80053c8 <__divsi3+0x16c>
 80053c4:	014b      	lsls	r3, r1, #5
 80053c6:	1ac0      	subs	r0, r0, r3
 80053c8:	4152      	adcs	r2, r2
 80053ca:	0903      	lsrs	r3, r0, #4
 80053cc:	428b      	cmp	r3, r1
 80053ce:	d301      	bcc.n	80053d4 <__divsi3+0x178>
 80053d0:	010b      	lsls	r3, r1, #4
 80053d2:	1ac0      	subs	r0, r0, r3
 80053d4:	4152      	adcs	r2, r2
 80053d6:	08c3      	lsrs	r3, r0, #3
 80053d8:	428b      	cmp	r3, r1
 80053da:	d301      	bcc.n	80053e0 <__divsi3+0x184>
 80053dc:	00cb      	lsls	r3, r1, #3
 80053de:	1ac0      	subs	r0, r0, r3
 80053e0:	4152      	adcs	r2, r2
 80053e2:	0883      	lsrs	r3, r0, #2
 80053e4:	428b      	cmp	r3, r1
 80053e6:	d301      	bcc.n	80053ec <__divsi3+0x190>
 80053e8:	008b      	lsls	r3, r1, #2
 80053ea:	1ac0      	subs	r0, r0, r3
 80053ec:	4152      	adcs	r2, r2
 80053ee:	d2d9      	bcs.n	80053a4 <__divsi3+0x148>
 80053f0:	0843      	lsrs	r3, r0, #1
 80053f2:	428b      	cmp	r3, r1
 80053f4:	d301      	bcc.n	80053fa <__divsi3+0x19e>
 80053f6:	004b      	lsls	r3, r1, #1
 80053f8:	1ac0      	subs	r0, r0, r3
 80053fa:	4152      	adcs	r2, r2
 80053fc:	1a41      	subs	r1, r0, r1
 80053fe:	d200      	bcs.n	8005402 <__divsi3+0x1a6>
 8005400:	4601      	mov	r1, r0
 8005402:	4663      	mov	r3, ip
 8005404:	4152      	adcs	r2, r2
 8005406:	105b      	asrs	r3, r3, #1
 8005408:	4610      	mov	r0, r2
 800540a:	d301      	bcc.n	8005410 <__divsi3+0x1b4>
 800540c:	4240      	negs	r0, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d500      	bpl.n	8005414 <__divsi3+0x1b8>
 8005412:	4249      	negs	r1, r1
 8005414:	4770      	bx	lr
 8005416:	4663      	mov	r3, ip
 8005418:	105b      	asrs	r3, r3, #1
 800541a:	d300      	bcc.n	800541e <__divsi3+0x1c2>
 800541c:	4240      	negs	r0, r0
 800541e:	b501      	push	{r0, lr}
 8005420:	2000      	movs	r0, #0
 8005422:	f000 f805 	bl	8005430 <__aeabi_idiv0>
 8005426:	bd02      	pop	{r1, pc}

08005428 <__aeabi_idivmod>:
 8005428:	2900      	cmp	r1, #0
 800542a:	d0f8      	beq.n	800541e <__divsi3+0x1c2>
 800542c:	e716      	b.n	800525c <__divsi3>
 800542e:	4770      	bx	lr

08005430 <__aeabi_idiv0>:
 8005430:	4770      	bx	lr
 8005432:	46c0      	nop			; (mov r8, r8)

08005434 <__aeabi_cdrcmple>:
 8005434:	4684      	mov	ip, r0
 8005436:	1c10      	adds	r0, r2, #0
 8005438:	4662      	mov	r2, ip
 800543a:	468c      	mov	ip, r1
 800543c:	1c19      	adds	r1, r3, #0
 800543e:	4663      	mov	r3, ip
 8005440:	e000      	b.n	8005444 <__aeabi_cdcmpeq>
 8005442:	46c0      	nop			; (mov r8, r8)

08005444 <__aeabi_cdcmpeq>:
 8005444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005446:	f001 fb5b 	bl	8006b00 <__ledf2>
 800544a:	2800      	cmp	r0, #0
 800544c:	d401      	bmi.n	8005452 <__aeabi_cdcmpeq+0xe>
 800544e:	2100      	movs	r1, #0
 8005450:	42c8      	cmn	r0, r1
 8005452:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08005454 <__aeabi_dcmpeq>:
 8005454:	b510      	push	{r4, lr}
 8005456:	f001 fab3 	bl	80069c0 <__eqdf2>
 800545a:	4240      	negs	r0, r0
 800545c:	3001      	adds	r0, #1
 800545e:	bd10      	pop	{r4, pc}

08005460 <__aeabi_dcmplt>:
 8005460:	b510      	push	{r4, lr}
 8005462:	f001 fb4d 	bl	8006b00 <__ledf2>
 8005466:	2800      	cmp	r0, #0
 8005468:	db01      	blt.n	800546e <__aeabi_dcmplt+0xe>
 800546a:	2000      	movs	r0, #0
 800546c:	bd10      	pop	{r4, pc}
 800546e:	2001      	movs	r0, #1
 8005470:	bd10      	pop	{r4, pc}
 8005472:	46c0      	nop			; (mov r8, r8)

08005474 <__aeabi_dcmple>:
 8005474:	b510      	push	{r4, lr}
 8005476:	f001 fb43 	bl	8006b00 <__ledf2>
 800547a:	2800      	cmp	r0, #0
 800547c:	dd01      	ble.n	8005482 <__aeabi_dcmple+0xe>
 800547e:	2000      	movs	r0, #0
 8005480:	bd10      	pop	{r4, pc}
 8005482:	2001      	movs	r0, #1
 8005484:	bd10      	pop	{r4, pc}
 8005486:	46c0      	nop			; (mov r8, r8)

08005488 <__aeabi_dcmpgt>:
 8005488:	b510      	push	{r4, lr}
 800548a:	f001 fad5 	bl	8006a38 <__gedf2>
 800548e:	2800      	cmp	r0, #0
 8005490:	dc01      	bgt.n	8005496 <__aeabi_dcmpgt+0xe>
 8005492:	2000      	movs	r0, #0
 8005494:	bd10      	pop	{r4, pc}
 8005496:	2001      	movs	r0, #1
 8005498:	bd10      	pop	{r4, pc}
 800549a:	46c0      	nop			; (mov r8, r8)

0800549c <__aeabi_dcmpge>:
 800549c:	b510      	push	{r4, lr}
 800549e:	f001 facb 	bl	8006a38 <__gedf2>
 80054a2:	2800      	cmp	r0, #0
 80054a4:	da01      	bge.n	80054aa <__aeabi_dcmpge+0xe>
 80054a6:	2000      	movs	r0, #0
 80054a8:	bd10      	pop	{r4, pc}
 80054aa:	2001      	movs	r0, #1
 80054ac:	bd10      	pop	{r4, pc}
 80054ae:	46c0      	nop			; (mov r8, r8)

080054b0 <__aeabi_uldivmod>:
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d111      	bne.n	80054d8 <__aeabi_uldivmod+0x28>
 80054b4:	2a00      	cmp	r2, #0
 80054b6:	d10f      	bne.n	80054d8 <__aeabi_uldivmod+0x28>
 80054b8:	2900      	cmp	r1, #0
 80054ba:	d100      	bne.n	80054be <__aeabi_uldivmod+0xe>
 80054bc:	2800      	cmp	r0, #0
 80054be:	d002      	beq.n	80054c6 <__aeabi_uldivmod+0x16>
 80054c0:	2100      	movs	r1, #0
 80054c2:	43c9      	mvns	r1, r1
 80054c4:	1c08      	adds	r0, r1, #0
 80054c6:	b407      	push	{r0, r1, r2}
 80054c8:	4802      	ldr	r0, [pc, #8]	; (80054d4 <__aeabi_uldivmod+0x24>)
 80054ca:	a102      	add	r1, pc, #8	; (adr r1, 80054d4 <__aeabi_uldivmod+0x24>)
 80054cc:	1840      	adds	r0, r0, r1
 80054ce:	9002      	str	r0, [sp, #8]
 80054d0:	bd03      	pop	{r0, r1, pc}
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	ffffff5d 	.word	0xffffff5d
 80054d8:	b403      	push	{r0, r1}
 80054da:	4668      	mov	r0, sp
 80054dc:	b501      	push	{r0, lr}
 80054de:	9802      	ldr	r0, [sp, #8]
 80054e0:	f000 f84e 	bl	8005580 <__udivmoddi4>
 80054e4:	9b01      	ldr	r3, [sp, #4]
 80054e6:	469e      	mov	lr, r3
 80054e8:	b002      	add	sp, #8
 80054ea:	bc0c      	pop	{r2, r3}
 80054ec:	4770      	bx	lr
 80054ee:	46c0      	nop			; (mov r8, r8)

080054f0 <__aeabi_lmul>:
 80054f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054f2:	46ce      	mov	lr, r9
 80054f4:	4647      	mov	r7, r8
 80054f6:	0415      	lsls	r5, r2, #16
 80054f8:	0c2d      	lsrs	r5, r5, #16
 80054fa:	002e      	movs	r6, r5
 80054fc:	b580      	push	{r7, lr}
 80054fe:	0407      	lsls	r7, r0, #16
 8005500:	0c14      	lsrs	r4, r2, #16
 8005502:	0c3f      	lsrs	r7, r7, #16
 8005504:	4699      	mov	r9, r3
 8005506:	0c03      	lsrs	r3, r0, #16
 8005508:	437e      	muls	r6, r7
 800550a:	435d      	muls	r5, r3
 800550c:	4367      	muls	r7, r4
 800550e:	4363      	muls	r3, r4
 8005510:	197f      	adds	r7, r7, r5
 8005512:	0c34      	lsrs	r4, r6, #16
 8005514:	19e4      	adds	r4, r4, r7
 8005516:	469c      	mov	ip, r3
 8005518:	42a5      	cmp	r5, r4
 800551a:	d903      	bls.n	8005524 <__aeabi_lmul+0x34>
 800551c:	2380      	movs	r3, #128	; 0x80
 800551e:	025b      	lsls	r3, r3, #9
 8005520:	4698      	mov	r8, r3
 8005522:	44c4      	add	ip, r8
 8005524:	464b      	mov	r3, r9
 8005526:	4343      	muls	r3, r0
 8005528:	4351      	muls	r1, r2
 800552a:	0c25      	lsrs	r5, r4, #16
 800552c:	0436      	lsls	r6, r6, #16
 800552e:	4465      	add	r5, ip
 8005530:	0c36      	lsrs	r6, r6, #16
 8005532:	0424      	lsls	r4, r4, #16
 8005534:	19a4      	adds	r4, r4, r6
 8005536:	195b      	adds	r3, r3, r5
 8005538:	1859      	adds	r1, r3, r1
 800553a:	0020      	movs	r0, r4
 800553c:	bc0c      	pop	{r2, r3}
 800553e:	4690      	mov	r8, r2
 8005540:	4699      	mov	r9, r3
 8005542:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005544 <__aeabi_d2uiz>:
 8005544:	b570      	push	{r4, r5, r6, lr}
 8005546:	2200      	movs	r2, #0
 8005548:	4b0c      	ldr	r3, [pc, #48]	; (800557c <__aeabi_d2uiz+0x38>)
 800554a:	0004      	movs	r4, r0
 800554c:	000d      	movs	r5, r1
 800554e:	f7ff ffa5 	bl	800549c <__aeabi_dcmpge>
 8005552:	2800      	cmp	r0, #0
 8005554:	d104      	bne.n	8005560 <__aeabi_d2uiz+0x1c>
 8005556:	0020      	movs	r0, r4
 8005558:	0029      	movs	r1, r5
 800555a:	f002 f90f 	bl	800777c <__aeabi_d2iz>
 800555e:	bd70      	pop	{r4, r5, r6, pc}
 8005560:	4b06      	ldr	r3, [pc, #24]	; (800557c <__aeabi_d2uiz+0x38>)
 8005562:	2200      	movs	r2, #0
 8005564:	0020      	movs	r0, r4
 8005566:	0029      	movs	r1, r5
 8005568:	f001 fda4 	bl	80070b4 <__aeabi_dsub>
 800556c:	f002 f906 	bl	800777c <__aeabi_d2iz>
 8005570:	2380      	movs	r3, #128	; 0x80
 8005572:	061b      	lsls	r3, r3, #24
 8005574:	469c      	mov	ip, r3
 8005576:	4460      	add	r0, ip
 8005578:	e7f1      	b.n	800555e <__aeabi_d2uiz+0x1a>
 800557a:	46c0      	nop			; (mov r8, r8)
 800557c:	41e00000 	.word	0x41e00000

08005580 <__udivmoddi4>:
 8005580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005582:	464f      	mov	r7, r9
 8005584:	4646      	mov	r6, r8
 8005586:	46d6      	mov	lr, sl
 8005588:	b5c0      	push	{r6, r7, lr}
 800558a:	0004      	movs	r4, r0
 800558c:	b082      	sub	sp, #8
 800558e:	000d      	movs	r5, r1
 8005590:	4691      	mov	r9, r2
 8005592:	4698      	mov	r8, r3
 8005594:	428b      	cmp	r3, r1
 8005596:	d82f      	bhi.n	80055f8 <__udivmoddi4+0x78>
 8005598:	d02c      	beq.n	80055f4 <__udivmoddi4+0x74>
 800559a:	4641      	mov	r1, r8
 800559c:	4648      	mov	r0, r9
 800559e:	f002 fa83 	bl	8007aa8 <__clzdi2>
 80055a2:	0029      	movs	r1, r5
 80055a4:	0006      	movs	r6, r0
 80055a6:	0020      	movs	r0, r4
 80055a8:	f002 fa7e 	bl	8007aa8 <__clzdi2>
 80055ac:	1a33      	subs	r3, r6, r0
 80055ae:	469c      	mov	ip, r3
 80055b0:	3b20      	subs	r3, #32
 80055b2:	469a      	mov	sl, r3
 80055b4:	d500      	bpl.n	80055b8 <__udivmoddi4+0x38>
 80055b6:	e076      	b.n	80056a6 <__udivmoddi4+0x126>
 80055b8:	464b      	mov	r3, r9
 80055ba:	4652      	mov	r2, sl
 80055bc:	4093      	lsls	r3, r2
 80055be:	001f      	movs	r7, r3
 80055c0:	464b      	mov	r3, r9
 80055c2:	4662      	mov	r2, ip
 80055c4:	4093      	lsls	r3, r2
 80055c6:	001e      	movs	r6, r3
 80055c8:	42af      	cmp	r7, r5
 80055ca:	d828      	bhi.n	800561e <__udivmoddi4+0x9e>
 80055cc:	d025      	beq.n	800561a <__udivmoddi4+0x9a>
 80055ce:	4653      	mov	r3, sl
 80055d0:	1ba4      	subs	r4, r4, r6
 80055d2:	41bd      	sbcs	r5, r7
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	da00      	bge.n	80055da <__udivmoddi4+0x5a>
 80055d8:	e07b      	b.n	80056d2 <__udivmoddi4+0x152>
 80055da:	2200      	movs	r2, #0
 80055dc:	2300      	movs	r3, #0
 80055de:	9200      	str	r2, [sp, #0]
 80055e0:	9301      	str	r3, [sp, #4]
 80055e2:	2301      	movs	r3, #1
 80055e4:	4652      	mov	r2, sl
 80055e6:	4093      	lsls	r3, r2
 80055e8:	9301      	str	r3, [sp, #4]
 80055ea:	2301      	movs	r3, #1
 80055ec:	4662      	mov	r2, ip
 80055ee:	4093      	lsls	r3, r2
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	e018      	b.n	8005626 <__udivmoddi4+0xa6>
 80055f4:	4282      	cmp	r2, r0
 80055f6:	d9d0      	bls.n	800559a <__udivmoddi4+0x1a>
 80055f8:	2200      	movs	r2, #0
 80055fa:	2300      	movs	r3, #0
 80055fc:	9200      	str	r2, [sp, #0]
 80055fe:	9301      	str	r3, [sp, #4]
 8005600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <__udivmoddi4+0x8a>
 8005606:	601c      	str	r4, [r3, #0]
 8005608:	605d      	str	r5, [r3, #4]
 800560a:	9800      	ldr	r0, [sp, #0]
 800560c:	9901      	ldr	r1, [sp, #4]
 800560e:	b002      	add	sp, #8
 8005610:	bc1c      	pop	{r2, r3, r4}
 8005612:	4690      	mov	r8, r2
 8005614:	4699      	mov	r9, r3
 8005616:	46a2      	mov	sl, r4
 8005618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800561a:	42a3      	cmp	r3, r4
 800561c:	d9d7      	bls.n	80055ce <__udivmoddi4+0x4e>
 800561e:	2200      	movs	r2, #0
 8005620:	2300      	movs	r3, #0
 8005622:	9200      	str	r2, [sp, #0]
 8005624:	9301      	str	r3, [sp, #4]
 8005626:	4663      	mov	r3, ip
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0e9      	beq.n	8005600 <__udivmoddi4+0x80>
 800562c:	07fb      	lsls	r3, r7, #31
 800562e:	4698      	mov	r8, r3
 8005630:	4641      	mov	r1, r8
 8005632:	0872      	lsrs	r2, r6, #1
 8005634:	430a      	orrs	r2, r1
 8005636:	087b      	lsrs	r3, r7, #1
 8005638:	4666      	mov	r6, ip
 800563a:	e00e      	b.n	800565a <__udivmoddi4+0xda>
 800563c:	42ab      	cmp	r3, r5
 800563e:	d101      	bne.n	8005644 <__udivmoddi4+0xc4>
 8005640:	42a2      	cmp	r2, r4
 8005642:	d80c      	bhi.n	800565e <__udivmoddi4+0xde>
 8005644:	1aa4      	subs	r4, r4, r2
 8005646:	419d      	sbcs	r5, r3
 8005648:	2001      	movs	r0, #1
 800564a:	1924      	adds	r4, r4, r4
 800564c:	416d      	adcs	r5, r5
 800564e:	2100      	movs	r1, #0
 8005650:	3e01      	subs	r6, #1
 8005652:	1824      	adds	r4, r4, r0
 8005654:	414d      	adcs	r5, r1
 8005656:	2e00      	cmp	r6, #0
 8005658:	d006      	beq.n	8005668 <__udivmoddi4+0xe8>
 800565a:	42ab      	cmp	r3, r5
 800565c:	d9ee      	bls.n	800563c <__udivmoddi4+0xbc>
 800565e:	3e01      	subs	r6, #1
 8005660:	1924      	adds	r4, r4, r4
 8005662:	416d      	adcs	r5, r5
 8005664:	2e00      	cmp	r6, #0
 8005666:	d1f8      	bne.n	800565a <__udivmoddi4+0xda>
 8005668:	9800      	ldr	r0, [sp, #0]
 800566a:	9901      	ldr	r1, [sp, #4]
 800566c:	4653      	mov	r3, sl
 800566e:	1900      	adds	r0, r0, r4
 8005670:	4169      	adcs	r1, r5
 8005672:	2b00      	cmp	r3, #0
 8005674:	db23      	blt.n	80056be <__udivmoddi4+0x13e>
 8005676:	002b      	movs	r3, r5
 8005678:	4652      	mov	r2, sl
 800567a:	40d3      	lsrs	r3, r2
 800567c:	002a      	movs	r2, r5
 800567e:	4664      	mov	r4, ip
 8005680:	40e2      	lsrs	r2, r4
 8005682:	001c      	movs	r4, r3
 8005684:	4653      	mov	r3, sl
 8005686:	0015      	movs	r5, r2
 8005688:	2b00      	cmp	r3, #0
 800568a:	db2d      	blt.n	80056e8 <__udivmoddi4+0x168>
 800568c:	0026      	movs	r6, r4
 800568e:	4657      	mov	r7, sl
 8005690:	40be      	lsls	r6, r7
 8005692:	0033      	movs	r3, r6
 8005694:	0026      	movs	r6, r4
 8005696:	4667      	mov	r7, ip
 8005698:	40be      	lsls	r6, r7
 800569a:	0032      	movs	r2, r6
 800569c:	1a80      	subs	r0, r0, r2
 800569e:	4199      	sbcs	r1, r3
 80056a0:	9000      	str	r0, [sp, #0]
 80056a2:	9101      	str	r1, [sp, #4]
 80056a4:	e7ac      	b.n	8005600 <__udivmoddi4+0x80>
 80056a6:	4662      	mov	r2, ip
 80056a8:	2320      	movs	r3, #32
 80056aa:	1a9b      	subs	r3, r3, r2
 80056ac:	464a      	mov	r2, r9
 80056ae:	40da      	lsrs	r2, r3
 80056b0:	4661      	mov	r1, ip
 80056b2:	0013      	movs	r3, r2
 80056b4:	4642      	mov	r2, r8
 80056b6:	408a      	lsls	r2, r1
 80056b8:	0017      	movs	r7, r2
 80056ba:	431f      	orrs	r7, r3
 80056bc:	e780      	b.n	80055c0 <__udivmoddi4+0x40>
 80056be:	4662      	mov	r2, ip
 80056c0:	2320      	movs	r3, #32
 80056c2:	1a9b      	subs	r3, r3, r2
 80056c4:	002a      	movs	r2, r5
 80056c6:	4666      	mov	r6, ip
 80056c8:	409a      	lsls	r2, r3
 80056ca:	0023      	movs	r3, r4
 80056cc:	40f3      	lsrs	r3, r6
 80056ce:	4313      	orrs	r3, r2
 80056d0:	e7d4      	b.n	800567c <__udivmoddi4+0xfc>
 80056d2:	4662      	mov	r2, ip
 80056d4:	2320      	movs	r3, #32
 80056d6:	2100      	movs	r1, #0
 80056d8:	1a9b      	subs	r3, r3, r2
 80056da:	2200      	movs	r2, #0
 80056dc:	9100      	str	r1, [sp, #0]
 80056de:	9201      	str	r2, [sp, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	40da      	lsrs	r2, r3
 80056e4:	9201      	str	r2, [sp, #4]
 80056e6:	e780      	b.n	80055ea <__udivmoddi4+0x6a>
 80056e8:	2320      	movs	r3, #32
 80056ea:	4662      	mov	r2, ip
 80056ec:	0026      	movs	r6, r4
 80056ee:	1a9b      	subs	r3, r3, r2
 80056f0:	40de      	lsrs	r6, r3
 80056f2:	002f      	movs	r7, r5
 80056f4:	46b0      	mov	r8, r6
 80056f6:	4666      	mov	r6, ip
 80056f8:	40b7      	lsls	r7, r6
 80056fa:	4646      	mov	r6, r8
 80056fc:	003b      	movs	r3, r7
 80056fe:	4333      	orrs	r3, r6
 8005700:	e7c8      	b.n	8005694 <__udivmoddi4+0x114>
 8005702:	46c0      	nop			; (mov r8, r8)

08005704 <__aeabi_fmul>:
 8005704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005706:	464e      	mov	r6, r9
 8005708:	4657      	mov	r7, sl
 800570a:	4645      	mov	r5, r8
 800570c:	46de      	mov	lr, fp
 800570e:	b5e0      	push	{r5, r6, r7, lr}
 8005710:	0243      	lsls	r3, r0, #9
 8005712:	0a5b      	lsrs	r3, r3, #9
 8005714:	0045      	lsls	r5, r0, #1
 8005716:	b083      	sub	sp, #12
 8005718:	1c0f      	adds	r7, r1, #0
 800571a:	4699      	mov	r9, r3
 800571c:	0e2d      	lsrs	r5, r5, #24
 800571e:	0fc6      	lsrs	r6, r0, #31
 8005720:	2d00      	cmp	r5, #0
 8005722:	d057      	beq.n	80057d4 <__aeabi_fmul+0xd0>
 8005724:	2dff      	cmp	r5, #255	; 0xff
 8005726:	d024      	beq.n	8005772 <__aeabi_fmul+0x6e>
 8005728:	2080      	movs	r0, #128	; 0x80
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	04c0      	lsls	r0, r0, #19
 800572e:	4318      	orrs	r0, r3
 8005730:	2300      	movs	r3, #0
 8005732:	4681      	mov	r9, r0
 8005734:	469a      	mov	sl, r3
 8005736:	469b      	mov	fp, r3
 8005738:	3d7f      	subs	r5, #127	; 0x7f
 800573a:	027c      	lsls	r4, r7, #9
 800573c:	007a      	lsls	r2, r7, #1
 800573e:	0ffb      	lsrs	r3, r7, #31
 8005740:	0a64      	lsrs	r4, r4, #9
 8005742:	0e12      	lsrs	r2, r2, #24
 8005744:	4698      	mov	r8, r3
 8005746:	d023      	beq.n	8005790 <__aeabi_fmul+0x8c>
 8005748:	2aff      	cmp	r2, #255	; 0xff
 800574a:	d04b      	beq.n	80057e4 <__aeabi_fmul+0xe0>
 800574c:	00e3      	lsls	r3, r4, #3
 800574e:	2480      	movs	r4, #128	; 0x80
 8005750:	2000      	movs	r0, #0
 8005752:	04e4      	lsls	r4, r4, #19
 8005754:	3a7f      	subs	r2, #127	; 0x7f
 8005756:	431c      	orrs	r4, r3
 8005758:	18ad      	adds	r5, r5, r2
 800575a:	1c6b      	adds	r3, r5, #1
 800575c:	4647      	mov	r7, r8
 800575e:	9301      	str	r3, [sp, #4]
 8005760:	4653      	mov	r3, sl
 8005762:	4077      	eors	r7, r6
 8005764:	003a      	movs	r2, r7
 8005766:	2b0f      	cmp	r3, #15
 8005768:	d848      	bhi.n	80057fc <__aeabi_fmul+0xf8>
 800576a:	497d      	ldr	r1, [pc, #500]	; (8005960 <__aeabi_fmul+0x25c>)
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	58cb      	ldr	r3, [r1, r3]
 8005770:	469f      	mov	pc, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d000      	beq.n	8005778 <__aeabi_fmul+0x74>
 8005776:	e085      	b.n	8005884 <__aeabi_fmul+0x180>
 8005778:	3308      	adds	r3, #8
 800577a:	469a      	mov	sl, r3
 800577c:	3b06      	subs	r3, #6
 800577e:	469b      	mov	fp, r3
 8005780:	027c      	lsls	r4, r7, #9
 8005782:	007a      	lsls	r2, r7, #1
 8005784:	0ffb      	lsrs	r3, r7, #31
 8005786:	25ff      	movs	r5, #255	; 0xff
 8005788:	0a64      	lsrs	r4, r4, #9
 800578a:	0e12      	lsrs	r2, r2, #24
 800578c:	4698      	mov	r8, r3
 800578e:	d1db      	bne.n	8005748 <__aeabi_fmul+0x44>
 8005790:	2c00      	cmp	r4, #0
 8005792:	d000      	beq.n	8005796 <__aeabi_fmul+0x92>
 8005794:	e090      	b.n	80058b8 <__aeabi_fmul+0x1b4>
 8005796:	4652      	mov	r2, sl
 8005798:	2301      	movs	r3, #1
 800579a:	431a      	orrs	r2, r3
 800579c:	4692      	mov	sl, r2
 800579e:	2001      	movs	r0, #1
 80057a0:	e7db      	b.n	800575a <__aeabi_fmul+0x56>
 80057a2:	464c      	mov	r4, r9
 80057a4:	4658      	mov	r0, fp
 80057a6:	0017      	movs	r7, r2
 80057a8:	2802      	cmp	r0, #2
 80057aa:	d024      	beq.n	80057f6 <__aeabi_fmul+0xf2>
 80057ac:	2803      	cmp	r0, #3
 80057ae:	d100      	bne.n	80057b2 <__aeabi_fmul+0xae>
 80057b0:	e0cf      	b.n	8005952 <__aeabi_fmul+0x24e>
 80057b2:	2200      	movs	r2, #0
 80057b4:	2300      	movs	r3, #0
 80057b6:	2801      	cmp	r0, #1
 80057b8:	d14d      	bne.n	8005856 <__aeabi_fmul+0x152>
 80057ba:	0258      	lsls	r0, r3, #9
 80057bc:	05d2      	lsls	r2, r2, #23
 80057be:	0a40      	lsrs	r0, r0, #9
 80057c0:	07ff      	lsls	r7, r7, #31
 80057c2:	4310      	orrs	r0, r2
 80057c4:	4338      	orrs	r0, r7
 80057c6:	b003      	add	sp, #12
 80057c8:	bc3c      	pop	{r2, r3, r4, r5}
 80057ca:	4690      	mov	r8, r2
 80057cc:	4699      	mov	r9, r3
 80057ce:	46a2      	mov	sl, r4
 80057d0:	46ab      	mov	fp, r5
 80057d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d15b      	bne.n	8005890 <__aeabi_fmul+0x18c>
 80057d8:	2304      	movs	r3, #4
 80057da:	469a      	mov	sl, r3
 80057dc:	3b03      	subs	r3, #3
 80057de:	2500      	movs	r5, #0
 80057e0:	469b      	mov	fp, r3
 80057e2:	e7aa      	b.n	800573a <__aeabi_fmul+0x36>
 80057e4:	35ff      	adds	r5, #255	; 0xff
 80057e6:	2c00      	cmp	r4, #0
 80057e8:	d160      	bne.n	80058ac <__aeabi_fmul+0x1a8>
 80057ea:	4652      	mov	r2, sl
 80057ec:	2302      	movs	r3, #2
 80057ee:	431a      	orrs	r2, r3
 80057f0:	4692      	mov	sl, r2
 80057f2:	2002      	movs	r0, #2
 80057f4:	e7b1      	b.n	800575a <__aeabi_fmul+0x56>
 80057f6:	22ff      	movs	r2, #255	; 0xff
 80057f8:	2300      	movs	r3, #0
 80057fa:	e7de      	b.n	80057ba <__aeabi_fmul+0xb6>
 80057fc:	464b      	mov	r3, r9
 80057fe:	0c1b      	lsrs	r3, r3, #16
 8005800:	469c      	mov	ip, r3
 8005802:	464b      	mov	r3, r9
 8005804:	0426      	lsls	r6, r4, #16
 8005806:	0c36      	lsrs	r6, r6, #16
 8005808:	0418      	lsls	r0, r3, #16
 800580a:	4661      	mov	r1, ip
 800580c:	0033      	movs	r3, r6
 800580e:	0c22      	lsrs	r2, r4, #16
 8005810:	4664      	mov	r4, ip
 8005812:	0c00      	lsrs	r0, r0, #16
 8005814:	4343      	muls	r3, r0
 8005816:	434e      	muls	r6, r1
 8005818:	4350      	muls	r0, r2
 800581a:	4354      	muls	r4, r2
 800581c:	1980      	adds	r0, r0, r6
 800581e:	0c1a      	lsrs	r2, r3, #16
 8005820:	1812      	adds	r2, r2, r0
 8005822:	4296      	cmp	r6, r2
 8005824:	d903      	bls.n	800582e <__aeabi_fmul+0x12a>
 8005826:	2180      	movs	r1, #128	; 0x80
 8005828:	0249      	lsls	r1, r1, #9
 800582a:	468c      	mov	ip, r1
 800582c:	4464      	add	r4, ip
 800582e:	041b      	lsls	r3, r3, #16
 8005830:	0c1b      	lsrs	r3, r3, #16
 8005832:	0410      	lsls	r0, r2, #16
 8005834:	18c0      	adds	r0, r0, r3
 8005836:	0183      	lsls	r3, r0, #6
 8005838:	1e5e      	subs	r6, r3, #1
 800583a:	41b3      	sbcs	r3, r6
 800583c:	0e80      	lsrs	r0, r0, #26
 800583e:	4318      	orrs	r0, r3
 8005840:	0c13      	lsrs	r3, r2, #16
 8005842:	191b      	adds	r3, r3, r4
 8005844:	019b      	lsls	r3, r3, #6
 8005846:	4303      	orrs	r3, r0
 8005848:	001c      	movs	r4, r3
 800584a:	0123      	lsls	r3, r4, #4
 800584c:	d579      	bpl.n	8005942 <__aeabi_fmul+0x23e>
 800584e:	2301      	movs	r3, #1
 8005850:	0862      	lsrs	r2, r4, #1
 8005852:	401c      	ands	r4, r3
 8005854:	4314      	orrs	r4, r2
 8005856:	9a01      	ldr	r2, [sp, #4]
 8005858:	327f      	adds	r2, #127	; 0x7f
 800585a:	2a00      	cmp	r2, #0
 800585c:	dd4d      	ble.n	80058fa <__aeabi_fmul+0x1f6>
 800585e:	0763      	lsls	r3, r4, #29
 8005860:	d004      	beq.n	800586c <__aeabi_fmul+0x168>
 8005862:	230f      	movs	r3, #15
 8005864:	4023      	ands	r3, r4
 8005866:	2b04      	cmp	r3, #4
 8005868:	d000      	beq.n	800586c <__aeabi_fmul+0x168>
 800586a:	3404      	adds	r4, #4
 800586c:	0123      	lsls	r3, r4, #4
 800586e:	d503      	bpl.n	8005878 <__aeabi_fmul+0x174>
 8005870:	4b3c      	ldr	r3, [pc, #240]	; (8005964 <__aeabi_fmul+0x260>)
 8005872:	9a01      	ldr	r2, [sp, #4]
 8005874:	401c      	ands	r4, r3
 8005876:	3280      	adds	r2, #128	; 0x80
 8005878:	2afe      	cmp	r2, #254	; 0xfe
 800587a:	dcbc      	bgt.n	80057f6 <__aeabi_fmul+0xf2>
 800587c:	01a3      	lsls	r3, r4, #6
 800587e:	0a5b      	lsrs	r3, r3, #9
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	e79a      	b.n	80057ba <__aeabi_fmul+0xb6>
 8005884:	230c      	movs	r3, #12
 8005886:	469a      	mov	sl, r3
 8005888:	3b09      	subs	r3, #9
 800588a:	25ff      	movs	r5, #255	; 0xff
 800588c:	469b      	mov	fp, r3
 800588e:	e754      	b.n	800573a <__aeabi_fmul+0x36>
 8005890:	0018      	movs	r0, r3
 8005892:	f002 f8eb 	bl	8007a6c <__clzsi2>
 8005896:	464a      	mov	r2, r9
 8005898:	1f43      	subs	r3, r0, #5
 800589a:	2576      	movs	r5, #118	; 0x76
 800589c:	409a      	lsls	r2, r3
 800589e:	2300      	movs	r3, #0
 80058a0:	426d      	negs	r5, r5
 80058a2:	4691      	mov	r9, r2
 80058a4:	1a2d      	subs	r5, r5, r0
 80058a6:	469a      	mov	sl, r3
 80058a8:	469b      	mov	fp, r3
 80058aa:	e746      	b.n	800573a <__aeabi_fmul+0x36>
 80058ac:	4652      	mov	r2, sl
 80058ae:	2303      	movs	r3, #3
 80058b0:	431a      	orrs	r2, r3
 80058b2:	4692      	mov	sl, r2
 80058b4:	2003      	movs	r0, #3
 80058b6:	e750      	b.n	800575a <__aeabi_fmul+0x56>
 80058b8:	0020      	movs	r0, r4
 80058ba:	f002 f8d7 	bl	8007a6c <__clzsi2>
 80058be:	1f43      	subs	r3, r0, #5
 80058c0:	1a2d      	subs	r5, r5, r0
 80058c2:	409c      	lsls	r4, r3
 80058c4:	3d76      	subs	r5, #118	; 0x76
 80058c6:	2000      	movs	r0, #0
 80058c8:	e747      	b.n	800575a <__aeabi_fmul+0x56>
 80058ca:	2380      	movs	r3, #128	; 0x80
 80058cc:	2700      	movs	r7, #0
 80058ce:	03db      	lsls	r3, r3, #15
 80058d0:	22ff      	movs	r2, #255	; 0xff
 80058d2:	e772      	b.n	80057ba <__aeabi_fmul+0xb6>
 80058d4:	4642      	mov	r2, r8
 80058d6:	e766      	b.n	80057a6 <__aeabi_fmul+0xa2>
 80058d8:	464c      	mov	r4, r9
 80058da:	0032      	movs	r2, r6
 80058dc:	4658      	mov	r0, fp
 80058de:	e762      	b.n	80057a6 <__aeabi_fmul+0xa2>
 80058e0:	2380      	movs	r3, #128	; 0x80
 80058e2:	464a      	mov	r2, r9
 80058e4:	03db      	lsls	r3, r3, #15
 80058e6:	421a      	tst	r2, r3
 80058e8:	d022      	beq.n	8005930 <__aeabi_fmul+0x22c>
 80058ea:	421c      	tst	r4, r3
 80058ec:	d120      	bne.n	8005930 <__aeabi_fmul+0x22c>
 80058ee:	4323      	orrs	r3, r4
 80058f0:	025b      	lsls	r3, r3, #9
 80058f2:	0a5b      	lsrs	r3, r3, #9
 80058f4:	4647      	mov	r7, r8
 80058f6:	22ff      	movs	r2, #255	; 0xff
 80058f8:	e75f      	b.n	80057ba <__aeabi_fmul+0xb6>
 80058fa:	2301      	movs	r3, #1
 80058fc:	1a9a      	subs	r2, r3, r2
 80058fe:	2a1b      	cmp	r2, #27
 8005900:	dc21      	bgt.n	8005946 <__aeabi_fmul+0x242>
 8005902:	0023      	movs	r3, r4
 8005904:	9901      	ldr	r1, [sp, #4]
 8005906:	40d3      	lsrs	r3, r2
 8005908:	319e      	adds	r1, #158	; 0x9e
 800590a:	408c      	lsls	r4, r1
 800590c:	001a      	movs	r2, r3
 800590e:	0023      	movs	r3, r4
 8005910:	1e5c      	subs	r4, r3, #1
 8005912:	41a3      	sbcs	r3, r4
 8005914:	4313      	orrs	r3, r2
 8005916:	075a      	lsls	r2, r3, #29
 8005918:	d004      	beq.n	8005924 <__aeabi_fmul+0x220>
 800591a:	220f      	movs	r2, #15
 800591c:	401a      	ands	r2, r3
 800591e:	2a04      	cmp	r2, #4
 8005920:	d000      	beq.n	8005924 <__aeabi_fmul+0x220>
 8005922:	3304      	adds	r3, #4
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	d411      	bmi.n	800594c <__aeabi_fmul+0x248>
 8005928:	019b      	lsls	r3, r3, #6
 800592a:	0a5b      	lsrs	r3, r3, #9
 800592c:	2200      	movs	r2, #0
 800592e:	e744      	b.n	80057ba <__aeabi_fmul+0xb6>
 8005930:	2380      	movs	r3, #128	; 0x80
 8005932:	464a      	mov	r2, r9
 8005934:	03db      	lsls	r3, r3, #15
 8005936:	4313      	orrs	r3, r2
 8005938:	025b      	lsls	r3, r3, #9
 800593a:	0a5b      	lsrs	r3, r3, #9
 800593c:	0037      	movs	r7, r6
 800593e:	22ff      	movs	r2, #255	; 0xff
 8005940:	e73b      	b.n	80057ba <__aeabi_fmul+0xb6>
 8005942:	9501      	str	r5, [sp, #4]
 8005944:	e787      	b.n	8005856 <__aeabi_fmul+0x152>
 8005946:	2200      	movs	r2, #0
 8005948:	2300      	movs	r3, #0
 800594a:	e736      	b.n	80057ba <__aeabi_fmul+0xb6>
 800594c:	2201      	movs	r2, #1
 800594e:	2300      	movs	r3, #0
 8005950:	e733      	b.n	80057ba <__aeabi_fmul+0xb6>
 8005952:	2380      	movs	r3, #128	; 0x80
 8005954:	03db      	lsls	r3, r3, #15
 8005956:	4323      	orrs	r3, r4
 8005958:	025b      	lsls	r3, r3, #9
 800595a:	0a5b      	lsrs	r3, r3, #9
 800595c:	22ff      	movs	r2, #255	; 0xff
 800595e:	e72c      	b.n	80057ba <__aeabi_fmul+0xb6>
 8005960:	0800f768 	.word	0x0800f768
 8005964:	f7ffffff 	.word	0xf7ffffff

08005968 <__aeabi_fsub>:
 8005968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596a:	4647      	mov	r7, r8
 800596c:	46ce      	mov	lr, r9
 800596e:	0044      	lsls	r4, r0, #1
 8005970:	0fc2      	lsrs	r2, r0, #31
 8005972:	b580      	push	{r7, lr}
 8005974:	0247      	lsls	r7, r0, #9
 8005976:	0248      	lsls	r0, r1, #9
 8005978:	0a40      	lsrs	r0, r0, #9
 800597a:	4684      	mov	ip, r0
 800597c:	4666      	mov	r6, ip
 800597e:	0048      	lsls	r0, r1, #1
 8005980:	0a7f      	lsrs	r7, r7, #9
 8005982:	0e24      	lsrs	r4, r4, #24
 8005984:	00f6      	lsls	r6, r6, #3
 8005986:	0025      	movs	r5, r4
 8005988:	4690      	mov	r8, r2
 800598a:	00fb      	lsls	r3, r7, #3
 800598c:	0e00      	lsrs	r0, r0, #24
 800598e:	0fc9      	lsrs	r1, r1, #31
 8005990:	46b1      	mov	r9, r6
 8005992:	28ff      	cmp	r0, #255	; 0xff
 8005994:	d100      	bne.n	8005998 <__aeabi_fsub+0x30>
 8005996:	e085      	b.n	8005aa4 <__aeabi_fsub+0x13c>
 8005998:	2601      	movs	r6, #1
 800599a:	4071      	eors	r1, r6
 800599c:	1a26      	subs	r6, r4, r0
 800599e:	4291      	cmp	r1, r2
 80059a0:	d057      	beq.n	8005a52 <__aeabi_fsub+0xea>
 80059a2:	2e00      	cmp	r6, #0
 80059a4:	dd43      	ble.n	8005a2e <__aeabi_fsub+0xc6>
 80059a6:	2800      	cmp	r0, #0
 80059a8:	d000      	beq.n	80059ac <__aeabi_fsub+0x44>
 80059aa:	e07f      	b.n	8005aac <__aeabi_fsub+0x144>
 80059ac:	4649      	mov	r1, r9
 80059ae:	2900      	cmp	r1, #0
 80059b0:	d100      	bne.n	80059b4 <__aeabi_fsub+0x4c>
 80059b2:	e0aa      	b.n	8005b0a <__aeabi_fsub+0x1a2>
 80059b4:	3e01      	subs	r6, #1
 80059b6:	2e00      	cmp	r6, #0
 80059b8:	d000      	beq.n	80059bc <__aeabi_fsub+0x54>
 80059ba:	e0f7      	b.n	8005bac <__aeabi_fsub+0x244>
 80059bc:	1a5b      	subs	r3, r3, r1
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	d400      	bmi.n	80059c4 <__aeabi_fsub+0x5c>
 80059c2:	e08b      	b.n	8005adc <__aeabi_fsub+0x174>
 80059c4:	019b      	lsls	r3, r3, #6
 80059c6:	099c      	lsrs	r4, r3, #6
 80059c8:	0020      	movs	r0, r4
 80059ca:	f002 f84f 	bl	8007a6c <__clzsi2>
 80059ce:	3805      	subs	r0, #5
 80059d0:	4084      	lsls	r4, r0
 80059d2:	4285      	cmp	r5, r0
 80059d4:	dd00      	ble.n	80059d8 <__aeabi_fsub+0x70>
 80059d6:	e0d3      	b.n	8005b80 <__aeabi_fsub+0x218>
 80059d8:	1b45      	subs	r5, r0, r5
 80059da:	0023      	movs	r3, r4
 80059dc:	2020      	movs	r0, #32
 80059de:	3501      	adds	r5, #1
 80059e0:	40eb      	lsrs	r3, r5
 80059e2:	1b45      	subs	r5, r0, r5
 80059e4:	40ac      	lsls	r4, r5
 80059e6:	1e62      	subs	r2, r4, #1
 80059e8:	4194      	sbcs	r4, r2
 80059ea:	4323      	orrs	r3, r4
 80059ec:	2407      	movs	r4, #7
 80059ee:	2500      	movs	r5, #0
 80059f0:	401c      	ands	r4, r3
 80059f2:	2201      	movs	r2, #1
 80059f4:	4641      	mov	r1, r8
 80059f6:	400a      	ands	r2, r1
 80059f8:	2c00      	cmp	r4, #0
 80059fa:	d004      	beq.n	8005a06 <__aeabi_fsub+0x9e>
 80059fc:	210f      	movs	r1, #15
 80059fe:	4019      	ands	r1, r3
 8005a00:	2904      	cmp	r1, #4
 8005a02:	d000      	beq.n	8005a06 <__aeabi_fsub+0x9e>
 8005a04:	3304      	adds	r3, #4
 8005a06:	0159      	lsls	r1, r3, #5
 8005a08:	d400      	bmi.n	8005a0c <__aeabi_fsub+0xa4>
 8005a0a:	e080      	b.n	8005b0e <__aeabi_fsub+0x1a6>
 8005a0c:	3501      	adds	r5, #1
 8005a0e:	b2ec      	uxtb	r4, r5
 8005a10:	2dff      	cmp	r5, #255	; 0xff
 8005a12:	d000      	beq.n	8005a16 <__aeabi_fsub+0xae>
 8005a14:	e0a3      	b.n	8005b5e <__aeabi_fsub+0x1f6>
 8005a16:	24ff      	movs	r4, #255	; 0xff
 8005a18:	2300      	movs	r3, #0
 8005a1a:	025b      	lsls	r3, r3, #9
 8005a1c:	05e4      	lsls	r4, r4, #23
 8005a1e:	0a58      	lsrs	r0, r3, #9
 8005a20:	07d2      	lsls	r2, r2, #31
 8005a22:	4320      	orrs	r0, r4
 8005a24:	4310      	orrs	r0, r2
 8005a26:	bc0c      	pop	{r2, r3}
 8005a28:	4690      	mov	r8, r2
 8005a2a:	4699      	mov	r9, r3
 8005a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a2e:	2e00      	cmp	r6, #0
 8005a30:	d174      	bne.n	8005b1c <__aeabi_fsub+0x1b4>
 8005a32:	1c60      	adds	r0, r4, #1
 8005a34:	b2c0      	uxtb	r0, r0
 8005a36:	2801      	cmp	r0, #1
 8005a38:	dc00      	bgt.n	8005a3c <__aeabi_fsub+0xd4>
 8005a3a:	e0a7      	b.n	8005b8c <__aeabi_fsub+0x224>
 8005a3c:	464a      	mov	r2, r9
 8005a3e:	1a9c      	subs	r4, r3, r2
 8005a40:	0162      	lsls	r2, r4, #5
 8005a42:	d500      	bpl.n	8005a46 <__aeabi_fsub+0xde>
 8005a44:	e0b6      	b.n	8005bb4 <__aeabi_fsub+0x24c>
 8005a46:	2c00      	cmp	r4, #0
 8005a48:	d1be      	bne.n	80059c8 <__aeabi_fsub+0x60>
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	2400      	movs	r4, #0
 8005a4e:	2300      	movs	r3, #0
 8005a50:	e7e3      	b.n	8005a1a <__aeabi_fsub+0xb2>
 8005a52:	2e00      	cmp	r6, #0
 8005a54:	dc00      	bgt.n	8005a58 <__aeabi_fsub+0xf0>
 8005a56:	e085      	b.n	8005b64 <__aeabi_fsub+0x1fc>
 8005a58:	2800      	cmp	r0, #0
 8005a5a:	d046      	beq.n	8005aea <__aeabi_fsub+0x182>
 8005a5c:	2cff      	cmp	r4, #255	; 0xff
 8005a5e:	d049      	beq.n	8005af4 <__aeabi_fsub+0x18c>
 8005a60:	2280      	movs	r2, #128	; 0x80
 8005a62:	4648      	mov	r0, r9
 8005a64:	04d2      	lsls	r2, r2, #19
 8005a66:	4310      	orrs	r0, r2
 8005a68:	4681      	mov	r9, r0
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	2e1b      	cmp	r6, #27
 8005a6e:	dc09      	bgt.n	8005a84 <__aeabi_fsub+0x11c>
 8005a70:	2020      	movs	r0, #32
 8005a72:	464c      	mov	r4, r9
 8005a74:	1b80      	subs	r0, r0, r6
 8005a76:	4084      	lsls	r4, r0
 8005a78:	464a      	mov	r2, r9
 8005a7a:	0020      	movs	r0, r4
 8005a7c:	40f2      	lsrs	r2, r6
 8005a7e:	1e44      	subs	r4, r0, #1
 8005a80:	41a0      	sbcs	r0, r4
 8005a82:	4302      	orrs	r2, r0
 8005a84:	189b      	adds	r3, r3, r2
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	d528      	bpl.n	8005adc <__aeabi_fsub+0x174>
 8005a8a:	3501      	adds	r5, #1
 8005a8c:	2dff      	cmp	r5, #255	; 0xff
 8005a8e:	d100      	bne.n	8005a92 <__aeabi_fsub+0x12a>
 8005a90:	e0a8      	b.n	8005be4 <__aeabi_fsub+0x27c>
 8005a92:	2201      	movs	r2, #1
 8005a94:	2407      	movs	r4, #7
 8005a96:	4994      	ldr	r1, [pc, #592]	; (8005ce8 <__aeabi_fsub+0x380>)
 8005a98:	401a      	ands	r2, r3
 8005a9a:	085b      	lsrs	r3, r3, #1
 8005a9c:	400b      	ands	r3, r1
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	401c      	ands	r4, r3
 8005aa2:	e7a6      	b.n	80059f2 <__aeabi_fsub+0x8a>
 8005aa4:	2e00      	cmp	r6, #0
 8005aa6:	d000      	beq.n	8005aaa <__aeabi_fsub+0x142>
 8005aa8:	e778      	b.n	800599c <__aeabi_fsub+0x34>
 8005aaa:	e775      	b.n	8005998 <__aeabi_fsub+0x30>
 8005aac:	2cff      	cmp	r4, #255	; 0xff
 8005aae:	d054      	beq.n	8005b5a <__aeabi_fsub+0x1f2>
 8005ab0:	2280      	movs	r2, #128	; 0x80
 8005ab2:	4649      	mov	r1, r9
 8005ab4:	04d2      	lsls	r2, r2, #19
 8005ab6:	4311      	orrs	r1, r2
 8005ab8:	4689      	mov	r9, r1
 8005aba:	2201      	movs	r2, #1
 8005abc:	2e1b      	cmp	r6, #27
 8005abe:	dc09      	bgt.n	8005ad4 <__aeabi_fsub+0x16c>
 8005ac0:	2120      	movs	r1, #32
 8005ac2:	4648      	mov	r0, r9
 8005ac4:	1b89      	subs	r1, r1, r6
 8005ac6:	4088      	lsls	r0, r1
 8005ac8:	464a      	mov	r2, r9
 8005aca:	0001      	movs	r1, r0
 8005acc:	40f2      	lsrs	r2, r6
 8005ace:	1e48      	subs	r0, r1, #1
 8005ad0:	4181      	sbcs	r1, r0
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	1a9b      	subs	r3, r3, r2
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	d500      	bpl.n	8005adc <__aeabi_fsub+0x174>
 8005ada:	e773      	b.n	80059c4 <__aeabi_fsub+0x5c>
 8005adc:	2201      	movs	r2, #1
 8005ade:	4641      	mov	r1, r8
 8005ae0:	400a      	ands	r2, r1
 8005ae2:	0759      	lsls	r1, r3, #29
 8005ae4:	d000      	beq.n	8005ae8 <__aeabi_fsub+0x180>
 8005ae6:	e789      	b.n	80059fc <__aeabi_fsub+0x94>
 8005ae8:	e011      	b.n	8005b0e <__aeabi_fsub+0x1a6>
 8005aea:	4648      	mov	r0, r9
 8005aec:	2800      	cmp	r0, #0
 8005aee:	d158      	bne.n	8005ba2 <__aeabi_fsub+0x23a>
 8005af0:	2cff      	cmp	r4, #255	; 0xff
 8005af2:	d10c      	bne.n	8005b0e <__aeabi_fsub+0x1a6>
 8005af4:	08db      	lsrs	r3, r3, #3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d100      	bne.n	8005afc <__aeabi_fsub+0x194>
 8005afa:	e78c      	b.n	8005a16 <__aeabi_fsub+0xae>
 8005afc:	2080      	movs	r0, #128	; 0x80
 8005afe:	03c0      	lsls	r0, r0, #15
 8005b00:	4303      	orrs	r3, r0
 8005b02:	025b      	lsls	r3, r3, #9
 8005b04:	0a5b      	lsrs	r3, r3, #9
 8005b06:	24ff      	movs	r4, #255	; 0xff
 8005b08:	e787      	b.n	8005a1a <__aeabi_fsub+0xb2>
 8005b0a:	2cff      	cmp	r4, #255	; 0xff
 8005b0c:	d025      	beq.n	8005b5a <__aeabi_fsub+0x1f2>
 8005b0e:	08db      	lsrs	r3, r3, #3
 8005b10:	2dff      	cmp	r5, #255	; 0xff
 8005b12:	d0f0      	beq.n	8005af6 <__aeabi_fsub+0x18e>
 8005b14:	025b      	lsls	r3, r3, #9
 8005b16:	0a5b      	lsrs	r3, r3, #9
 8005b18:	b2ec      	uxtb	r4, r5
 8005b1a:	e77e      	b.n	8005a1a <__aeabi_fsub+0xb2>
 8005b1c:	2c00      	cmp	r4, #0
 8005b1e:	d04d      	beq.n	8005bbc <__aeabi_fsub+0x254>
 8005b20:	28ff      	cmp	r0, #255	; 0xff
 8005b22:	d018      	beq.n	8005b56 <__aeabi_fsub+0x1ee>
 8005b24:	2480      	movs	r4, #128	; 0x80
 8005b26:	04e4      	lsls	r4, r4, #19
 8005b28:	4272      	negs	r2, r6
 8005b2a:	4323      	orrs	r3, r4
 8005b2c:	2a1b      	cmp	r2, #27
 8005b2e:	dd00      	ble.n	8005b32 <__aeabi_fsub+0x1ca>
 8005b30:	e0c4      	b.n	8005cbc <__aeabi_fsub+0x354>
 8005b32:	001c      	movs	r4, r3
 8005b34:	2520      	movs	r5, #32
 8005b36:	40d4      	lsrs	r4, r2
 8005b38:	1aaa      	subs	r2, r5, r2
 8005b3a:	4093      	lsls	r3, r2
 8005b3c:	1e5a      	subs	r2, r3, #1
 8005b3e:	4193      	sbcs	r3, r2
 8005b40:	4323      	orrs	r3, r4
 8005b42:	464a      	mov	r2, r9
 8005b44:	0005      	movs	r5, r0
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	4688      	mov	r8, r1
 8005b4a:	e738      	b.n	80059be <__aeabi_fsub+0x56>
 8005b4c:	1c72      	adds	r2, r6, #1
 8005b4e:	d0f8      	beq.n	8005b42 <__aeabi_fsub+0x1da>
 8005b50:	43f2      	mvns	r2, r6
 8005b52:	28ff      	cmp	r0, #255	; 0xff
 8005b54:	d1ea      	bne.n	8005b2c <__aeabi_fsub+0x1c4>
 8005b56:	000a      	movs	r2, r1
 8005b58:	464b      	mov	r3, r9
 8005b5a:	25ff      	movs	r5, #255	; 0xff
 8005b5c:	e7d7      	b.n	8005b0e <__aeabi_fsub+0x1a6>
 8005b5e:	019b      	lsls	r3, r3, #6
 8005b60:	0a5b      	lsrs	r3, r3, #9
 8005b62:	e75a      	b.n	8005a1a <__aeabi_fsub+0xb2>
 8005b64:	2e00      	cmp	r6, #0
 8005b66:	d141      	bne.n	8005bec <__aeabi_fsub+0x284>
 8005b68:	1c65      	adds	r5, r4, #1
 8005b6a:	b2e9      	uxtb	r1, r5
 8005b6c:	2901      	cmp	r1, #1
 8005b6e:	dd45      	ble.n	8005bfc <__aeabi_fsub+0x294>
 8005b70:	2dff      	cmp	r5, #255	; 0xff
 8005b72:	d100      	bne.n	8005b76 <__aeabi_fsub+0x20e>
 8005b74:	e74f      	b.n	8005a16 <__aeabi_fsub+0xae>
 8005b76:	2407      	movs	r4, #7
 8005b78:	444b      	add	r3, r9
 8005b7a:	085b      	lsrs	r3, r3, #1
 8005b7c:	401c      	ands	r4, r3
 8005b7e:	e738      	b.n	80059f2 <__aeabi_fsub+0x8a>
 8005b80:	2207      	movs	r2, #7
 8005b82:	4b5a      	ldr	r3, [pc, #360]	; (8005cec <__aeabi_fsub+0x384>)
 8005b84:	1a2d      	subs	r5, r5, r0
 8005b86:	4023      	ands	r3, r4
 8005b88:	4014      	ands	r4, r2
 8005b8a:	e732      	b.n	80059f2 <__aeabi_fsub+0x8a>
 8005b8c:	2c00      	cmp	r4, #0
 8005b8e:	d11d      	bne.n	8005bcc <__aeabi_fsub+0x264>
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d17a      	bne.n	8005c8a <__aeabi_fsub+0x322>
 8005b94:	464b      	mov	r3, r9
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d100      	bne.n	8005b9c <__aeabi_fsub+0x234>
 8005b9a:	e091      	b.n	8005cc0 <__aeabi_fsub+0x358>
 8005b9c:	000a      	movs	r2, r1
 8005b9e:	2500      	movs	r5, #0
 8005ba0:	e7b5      	b.n	8005b0e <__aeabi_fsub+0x1a6>
 8005ba2:	3e01      	subs	r6, #1
 8005ba4:	2e00      	cmp	r6, #0
 8005ba6:	d119      	bne.n	8005bdc <__aeabi_fsub+0x274>
 8005ba8:	444b      	add	r3, r9
 8005baa:	e76c      	b.n	8005a86 <__aeabi_fsub+0x11e>
 8005bac:	2cff      	cmp	r4, #255	; 0xff
 8005bae:	d184      	bne.n	8005aba <__aeabi_fsub+0x152>
 8005bb0:	25ff      	movs	r5, #255	; 0xff
 8005bb2:	e7ac      	b.n	8005b0e <__aeabi_fsub+0x1a6>
 8005bb4:	464a      	mov	r2, r9
 8005bb6:	4688      	mov	r8, r1
 8005bb8:	1ad4      	subs	r4, r2, r3
 8005bba:	e705      	b.n	80059c8 <__aeabi_fsub+0x60>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1c5      	bne.n	8005b4c <__aeabi_fsub+0x1e4>
 8005bc0:	000a      	movs	r2, r1
 8005bc2:	28ff      	cmp	r0, #255	; 0xff
 8005bc4:	d0c8      	beq.n	8005b58 <__aeabi_fsub+0x1f0>
 8005bc6:	0005      	movs	r5, r0
 8005bc8:	464b      	mov	r3, r9
 8005bca:	e7a0      	b.n	8005b0e <__aeabi_fsub+0x1a6>
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d149      	bne.n	8005c64 <__aeabi_fsub+0x2fc>
 8005bd0:	464b      	mov	r3, r9
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d077      	beq.n	8005cc6 <__aeabi_fsub+0x35e>
 8005bd6:	000a      	movs	r2, r1
 8005bd8:	25ff      	movs	r5, #255	; 0xff
 8005bda:	e798      	b.n	8005b0e <__aeabi_fsub+0x1a6>
 8005bdc:	2cff      	cmp	r4, #255	; 0xff
 8005bde:	d000      	beq.n	8005be2 <__aeabi_fsub+0x27a>
 8005be0:	e743      	b.n	8005a6a <__aeabi_fsub+0x102>
 8005be2:	e787      	b.n	8005af4 <__aeabi_fsub+0x18c>
 8005be4:	000a      	movs	r2, r1
 8005be6:	24ff      	movs	r4, #255	; 0xff
 8005be8:	2300      	movs	r3, #0
 8005bea:	e716      	b.n	8005a1a <__aeabi_fsub+0xb2>
 8005bec:	2c00      	cmp	r4, #0
 8005bee:	d115      	bne.n	8005c1c <__aeabi_fsub+0x2b4>
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d157      	bne.n	8005ca4 <__aeabi_fsub+0x33c>
 8005bf4:	28ff      	cmp	r0, #255	; 0xff
 8005bf6:	d1e6      	bne.n	8005bc6 <__aeabi_fsub+0x25e>
 8005bf8:	464b      	mov	r3, r9
 8005bfa:	e77b      	b.n	8005af4 <__aeabi_fsub+0x18c>
 8005bfc:	2c00      	cmp	r4, #0
 8005bfe:	d120      	bne.n	8005c42 <__aeabi_fsub+0x2da>
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d057      	beq.n	8005cb4 <__aeabi_fsub+0x34c>
 8005c04:	4649      	mov	r1, r9
 8005c06:	2900      	cmp	r1, #0
 8005c08:	d053      	beq.n	8005cb2 <__aeabi_fsub+0x34a>
 8005c0a:	444b      	add	r3, r9
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	d568      	bpl.n	8005ce2 <__aeabi_fsub+0x37a>
 8005c10:	2407      	movs	r4, #7
 8005c12:	4a36      	ldr	r2, [pc, #216]	; (8005cec <__aeabi_fsub+0x384>)
 8005c14:	401c      	ands	r4, r3
 8005c16:	2501      	movs	r5, #1
 8005c18:	4013      	ands	r3, r2
 8005c1a:	e6ea      	b.n	80059f2 <__aeabi_fsub+0x8a>
 8005c1c:	28ff      	cmp	r0, #255	; 0xff
 8005c1e:	d0eb      	beq.n	8005bf8 <__aeabi_fsub+0x290>
 8005c20:	2280      	movs	r2, #128	; 0x80
 8005c22:	04d2      	lsls	r2, r2, #19
 8005c24:	4276      	negs	r6, r6
 8005c26:	4313      	orrs	r3, r2
 8005c28:	2e1b      	cmp	r6, #27
 8005c2a:	dc53      	bgt.n	8005cd4 <__aeabi_fsub+0x36c>
 8005c2c:	2520      	movs	r5, #32
 8005c2e:	1bad      	subs	r5, r5, r6
 8005c30:	001a      	movs	r2, r3
 8005c32:	40ab      	lsls	r3, r5
 8005c34:	40f2      	lsrs	r2, r6
 8005c36:	1e5c      	subs	r4, r3, #1
 8005c38:	41a3      	sbcs	r3, r4
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	444b      	add	r3, r9
 8005c3e:	0005      	movs	r5, r0
 8005c40:	e721      	b.n	8005a86 <__aeabi_fsub+0x11e>
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d0d8      	beq.n	8005bf8 <__aeabi_fsub+0x290>
 8005c46:	4649      	mov	r1, r9
 8005c48:	2900      	cmp	r1, #0
 8005c4a:	d100      	bne.n	8005c4e <__aeabi_fsub+0x2e6>
 8005c4c:	e752      	b.n	8005af4 <__aeabi_fsub+0x18c>
 8005c4e:	2180      	movs	r1, #128	; 0x80
 8005c50:	03c9      	lsls	r1, r1, #15
 8005c52:	420f      	tst	r7, r1
 8005c54:	d100      	bne.n	8005c58 <__aeabi_fsub+0x2f0>
 8005c56:	e74d      	b.n	8005af4 <__aeabi_fsub+0x18c>
 8005c58:	4660      	mov	r0, ip
 8005c5a:	4208      	tst	r0, r1
 8005c5c:	d000      	beq.n	8005c60 <__aeabi_fsub+0x2f8>
 8005c5e:	e749      	b.n	8005af4 <__aeabi_fsub+0x18c>
 8005c60:	464b      	mov	r3, r9
 8005c62:	e747      	b.n	8005af4 <__aeabi_fsub+0x18c>
 8005c64:	4648      	mov	r0, r9
 8005c66:	25ff      	movs	r5, #255	; 0xff
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d100      	bne.n	8005c6e <__aeabi_fsub+0x306>
 8005c6c:	e74f      	b.n	8005b0e <__aeabi_fsub+0x1a6>
 8005c6e:	2280      	movs	r2, #128	; 0x80
 8005c70:	03d2      	lsls	r2, r2, #15
 8005c72:	4217      	tst	r7, r2
 8005c74:	d004      	beq.n	8005c80 <__aeabi_fsub+0x318>
 8005c76:	4660      	mov	r0, ip
 8005c78:	4210      	tst	r0, r2
 8005c7a:	d101      	bne.n	8005c80 <__aeabi_fsub+0x318>
 8005c7c:	464b      	mov	r3, r9
 8005c7e:	4688      	mov	r8, r1
 8005c80:	2201      	movs	r2, #1
 8005c82:	4641      	mov	r1, r8
 8005c84:	25ff      	movs	r5, #255	; 0xff
 8005c86:	400a      	ands	r2, r1
 8005c88:	e741      	b.n	8005b0e <__aeabi_fsub+0x1a6>
 8005c8a:	4648      	mov	r0, r9
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	d01f      	beq.n	8005cd0 <__aeabi_fsub+0x368>
 8005c90:	1a1a      	subs	r2, r3, r0
 8005c92:	0150      	lsls	r0, r2, #5
 8005c94:	d520      	bpl.n	8005cd8 <__aeabi_fsub+0x370>
 8005c96:	464a      	mov	r2, r9
 8005c98:	2407      	movs	r4, #7
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	401c      	ands	r4, r3
 8005c9e:	4688      	mov	r8, r1
 8005ca0:	2500      	movs	r5, #0
 8005ca2:	e6a6      	b.n	80059f2 <__aeabi_fsub+0x8a>
 8005ca4:	1c74      	adds	r4, r6, #1
 8005ca6:	d0c9      	beq.n	8005c3c <__aeabi_fsub+0x2d4>
 8005ca8:	43f6      	mvns	r6, r6
 8005caa:	28ff      	cmp	r0, #255	; 0xff
 8005cac:	d1bc      	bne.n	8005c28 <__aeabi_fsub+0x2c0>
 8005cae:	464b      	mov	r3, r9
 8005cb0:	e720      	b.n	8005af4 <__aeabi_fsub+0x18c>
 8005cb2:	4699      	mov	r9, r3
 8005cb4:	464b      	mov	r3, r9
 8005cb6:	2500      	movs	r5, #0
 8005cb8:	08db      	lsrs	r3, r3, #3
 8005cba:	e72b      	b.n	8005b14 <__aeabi_fsub+0x1ac>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e740      	b.n	8005b42 <__aeabi_fsub+0x1da>
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	e6a9      	b.n	8005a1a <__aeabi_fsub+0xb2>
 8005cc6:	2380      	movs	r3, #128	; 0x80
 8005cc8:	2200      	movs	r2, #0
 8005cca:	03db      	lsls	r3, r3, #15
 8005ccc:	24ff      	movs	r4, #255	; 0xff
 8005cce:	e6a4      	b.n	8005a1a <__aeabi_fsub+0xb2>
 8005cd0:	2500      	movs	r5, #0
 8005cd2:	e71c      	b.n	8005b0e <__aeabi_fsub+0x1a6>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e7b1      	b.n	8005c3c <__aeabi_fsub+0x2d4>
 8005cd8:	2a00      	cmp	r2, #0
 8005cda:	d0f1      	beq.n	8005cc0 <__aeabi_fsub+0x358>
 8005cdc:	0013      	movs	r3, r2
 8005cde:	2500      	movs	r5, #0
 8005ce0:	e6fc      	b.n	8005adc <__aeabi_fsub+0x174>
 8005ce2:	2500      	movs	r5, #0
 8005ce4:	e6fa      	b.n	8005adc <__aeabi_fsub+0x174>
 8005ce6:	46c0      	nop			; (mov r8, r8)
 8005ce8:	7dffffff 	.word	0x7dffffff
 8005cec:	fbffffff 	.word	0xfbffffff

08005cf0 <__aeabi_i2f>:
 8005cf0:	b570      	push	{r4, r5, r6, lr}
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	d03d      	beq.n	8005d72 <__aeabi_i2f+0x82>
 8005cf6:	17c3      	asrs	r3, r0, #31
 8005cf8:	18c5      	adds	r5, r0, r3
 8005cfa:	405d      	eors	r5, r3
 8005cfc:	0fc4      	lsrs	r4, r0, #31
 8005cfe:	0028      	movs	r0, r5
 8005d00:	f001 feb4 	bl	8007a6c <__clzsi2>
 8005d04:	229e      	movs	r2, #158	; 0x9e
 8005d06:	1a12      	subs	r2, r2, r0
 8005d08:	2a96      	cmp	r2, #150	; 0x96
 8005d0a:	dc07      	bgt.n	8005d1c <__aeabi_i2f+0x2c>
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	2808      	cmp	r0, #8
 8005d10:	dd33      	ble.n	8005d7a <__aeabi_i2f+0x8a>
 8005d12:	3808      	subs	r0, #8
 8005d14:	4085      	lsls	r5, r0
 8005d16:	0268      	lsls	r0, r5, #9
 8005d18:	0a40      	lsrs	r0, r0, #9
 8005d1a:	e023      	b.n	8005d64 <__aeabi_i2f+0x74>
 8005d1c:	2a99      	cmp	r2, #153	; 0x99
 8005d1e:	dd0b      	ble.n	8005d38 <__aeabi_i2f+0x48>
 8005d20:	2305      	movs	r3, #5
 8005d22:	0029      	movs	r1, r5
 8005d24:	1a1b      	subs	r3, r3, r0
 8005d26:	40d9      	lsrs	r1, r3
 8005d28:	0003      	movs	r3, r0
 8005d2a:	331b      	adds	r3, #27
 8005d2c:	409d      	lsls	r5, r3
 8005d2e:	002b      	movs	r3, r5
 8005d30:	1e5d      	subs	r5, r3, #1
 8005d32:	41ab      	sbcs	r3, r5
 8005d34:	4319      	orrs	r1, r3
 8005d36:	000d      	movs	r5, r1
 8005d38:	2805      	cmp	r0, #5
 8005d3a:	dd01      	ble.n	8005d40 <__aeabi_i2f+0x50>
 8005d3c:	1f43      	subs	r3, r0, #5
 8005d3e:	409d      	lsls	r5, r3
 8005d40:	002b      	movs	r3, r5
 8005d42:	490f      	ldr	r1, [pc, #60]	; (8005d80 <__aeabi_i2f+0x90>)
 8005d44:	400b      	ands	r3, r1
 8005d46:	076e      	lsls	r6, r5, #29
 8005d48:	d009      	beq.n	8005d5e <__aeabi_i2f+0x6e>
 8005d4a:	260f      	movs	r6, #15
 8005d4c:	4035      	ands	r5, r6
 8005d4e:	2d04      	cmp	r5, #4
 8005d50:	d005      	beq.n	8005d5e <__aeabi_i2f+0x6e>
 8005d52:	3304      	adds	r3, #4
 8005d54:	015d      	lsls	r5, r3, #5
 8005d56:	d502      	bpl.n	8005d5e <__aeabi_i2f+0x6e>
 8005d58:	229f      	movs	r2, #159	; 0x9f
 8005d5a:	400b      	ands	r3, r1
 8005d5c:	1a12      	subs	r2, r2, r0
 8005d5e:	019b      	lsls	r3, r3, #6
 8005d60:	0a58      	lsrs	r0, r3, #9
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	0240      	lsls	r0, r0, #9
 8005d66:	05d2      	lsls	r2, r2, #23
 8005d68:	0a40      	lsrs	r0, r0, #9
 8005d6a:	07e4      	lsls	r4, r4, #31
 8005d6c:	4310      	orrs	r0, r2
 8005d6e:	4320      	orrs	r0, r4
 8005d70:	bd70      	pop	{r4, r5, r6, pc}
 8005d72:	2400      	movs	r4, #0
 8005d74:	2200      	movs	r2, #0
 8005d76:	2000      	movs	r0, #0
 8005d78:	e7f4      	b.n	8005d64 <__aeabi_i2f+0x74>
 8005d7a:	0268      	lsls	r0, r5, #9
 8005d7c:	0a40      	lsrs	r0, r0, #9
 8005d7e:	e7f1      	b.n	8005d64 <__aeabi_i2f+0x74>
 8005d80:	fbffffff 	.word	0xfbffffff

08005d84 <__aeabi_dadd>:
 8005d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d86:	464f      	mov	r7, r9
 8005d88:	4646      	mov	r6, r8
 8005d8a:	46d6      	mov	lr, sl
 8005d8c:	000c      	movs	r4, r1
 8005d8e:	0309      	lsls	r1, r1, #12
 8005d90:	b5c0      	push	{r6, r7, lr}
 8005d92:	0a49      	lsrs	r1, r1, #9
 8005d94:	0f47      	lsrs	r7, r0, #29
 8005d96:	005e      	lsls	r6, r3, #1
 8005d98:	4339      	orrs	r1, r7
 8005d9a:	031f      	lsls	r7, r3, #12
 8005d9c:	0fdb      	lsrs	r3, r3, #31
 8005d9e:	469c      	mov	ip, r3
 8005da0:	0065      	lsls	r5, r4, #1
 8005da2:	0a7b      	lsrs	r3, r7, #9
 8005da4:	0f57      	lsrs	r7, r2, #29
 8005da6:	431f      	orrs	r7, r3
 8005da8:	0d6d      	lsrs	r5, r5, #21
 8005daa:	0fe4      	lsrs	r4, r4, #31
 8005dac:	0d76      	lsrs	r6, r6, #21
 8005dae:	46a1      	mov	r9, r4
 8005db0:	00c0      	lsls	r0, r0, #3
 8005db2:	46b8      	mov	r8, r7
 8005db4:	00d2      	lsls	r2, r2, #3
 8005db6:	1bab      	subs	r3, r5, r6
 8005db8:	4564      	cmp	r4, ip
 8005dba:	d07b      	beq.n	8005eb4 <__aeabi_dadd+0x130>
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	dd5f      	ble.n	8005e80 <__aeabi_dadd+0xfc>
 8005dc0:	2e00      	cmp	r6, #0
 8005dc2:	d000      	beq.n	8005dc6 <__aeabi_dadd+0x42>
 8005dc4:	e0a4      	b.n	8005f10 <__aeabi_dadd+0x18c>
 8005dc6:	003e      	movs	r6, r7
 8005dc8:	4316      	orrs	r6, r2
 8005dca:	d100      	bne.n	8005dce <__aeabi_dadd+0x4a>
 8005dcc:	e112      	b.n	8005ff4 <__aeabi_dadd+0x270>
 8005dce:	1e5e      	subs	r6, r3, #1
 8005dd0:	2e00      	cmp	r6, #0
 8005dd2:	d000      	beq.n	8005dd6 <__aeabi_dadd+0x52>
 8005dd4:	e19e      	b.n	8006114 <__aeabi_dadd+0x390>
 8005dd6:	1a87      	subs	r7, r0, r2
 8005dd8:	4643      	mov	r3, r8
 8005dda:	42b8      	cmp	r0, r7
 8005ddc:	4180      	sbcs	r0, r0
 8005dde:	2501      	movs	r5, #1
 8005de0:	1ac9      	subs	r1, r1, r3
 8005de2:	4240      	negs	r0, r0
 8005de4:	1a09      	subs	r1, r1, r0
 8005de6:	020b      	lsls	r3, r1, #8
 8005de8:	d400      	bmi.n	8005dec <__aeabi_dadd+0x68>
 8005dea:	e131      	b.n	8006050 <__aeabi_dadd+0x2cc>
 8005dec:	0249      	lsls	r1, r1, #9
 8005dee:	0a4e      	lsrs	r6, r1, #9
 8005df0:	2e00      	cmp	r6, #0
 8005df2:	d100      	bne.n	8005df6 <__aeabi_dadd+0x72>
 8005df4:	e16e      	b.n	80060d4 <__aeabi_dadd+0x350>
 8005df6:	0030      	movs	r0, r6
 8005df8:	f001 fe38 	bl	8007a6c <__clzsi2>
 8005dfc:	0003      	movs	r3, r0
 8005dfe:	3b08      	subs	r3, #8
 8005e00:	2b1f      	cmp	r3, #31
 8005e02:	dd00      	ble.n	8005e06 <__aeabi_dadd+0x82>
 8005e04:	e161      	b.n	80060ca <__aeabi_dadd+0x346>
 8005e06:	2220      	movs	r2, #32
 8005e08:	0039      	movs	r1, r7
 8005e0a:	1ad2      	subs	r2, r2, r3
 8005e0c:	409e      	lsls	r6, r3
 8005e0e:	40d1      	lsrs	r1, r2
 8005e10:	409f      	lsls	r7, r3
 8005e12:	430e      	orrs	r6, r1
 8005e14:	429d      	cmp	r5, r3
 8005e16:	dd00      	ble.n	8005e1a <__aeabi_dadd+0x96>
 8005e18:	e151      	b.n	80060be <__aeabi_dadd+0x33a>
 8005e1a:	1b5d      	subs	r5, r3, r5
 8005e1c:	1c6b      	adds	r3, r5, #1
 8005e1e:	2b1f      	cmp	r3, #31
 8005e20:	dd00      	ble.n	8005e24 <__aeabi_dadd+0xa0>
 8005e22:	e17c      	b.n	800611e <__aeabi_dadd+0x39a>
 8005e24:	2120      	movs	r1, #32
 8005e26:	1ac9      	subs	r1, r1, r3
 8005e28:	003d      	movs	r5, r7
 8005e2a:	0030      	movs	r0, r6
 8005e2c:	408f      	lsls	r7, r1
 8005e2e:	4088      	lsls	r0, r1
 8005e30:	40dd      	lsrs	r5, r3
 8005e32:	1e79      	subs	r1, r7, #1
 8005e34:	418f      	sbcs	r7, r1
 8005e36:	0031      	movs	r1, r6
 8005e38:	2207      	movs	r2, #7
 8005e3a:	4328      	orrs	r0, r5
 8005e3c:	40d9      	lsrs	r1, r3
 8005e3e:	2500      	movs	r5, #0
 8005e40:	4307      	orrs	r7, r0
 8005e42:	403a      	ands	r2, r7
 8005e44:	2a00      	cmp	r2, #0
 8005e46:	d009      	beq.n	8005e5c <__aeabi_dadd+0xd8>
 8005e48:	230f      	movs	r3, #15
 8005e4a:	403b      	ands	r3, r7
 8005e4c:	2b04      	cmp	r3, #4
 8005e4e:	d005      	beq.n	8005e5c <__aeabi_dadd+0xd8>
 8005e50:	1d3b      	adds	r3, r7, #4
 8005e52:	42bb      	cmp	r3, r7
 8005e54:	41bf      	sbcs	r7, r7
 8005e56:	427f      	negs	r7, r7
 8005e58:	19c9      	adds	r1, r1, r7
 8005e5a:	001f      	movs	r7, r3
 8005e5c:	020b      	lsls	r3, r1, #8
 8005e5e:	d400      	bmi.n	8005e62 <__aeabi_dadd+0xde>
 8005e60:	e226      	b.n	80062b0 <__aeabi_dadd+0x52c>
 8005e62:	1c6a      	adds	r2, r5, #1
 8005e64:	4bc6      	ldr	r3, [pc, #792]	; (8006180 <__aeabi_dadd+0x3fc>)
 8005e66:	0555      	lsls	r5, r2, #21
 8005e68:	0d6d      	lsrs	r5, r5, #21
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d100      	bne.n	8005e70 <__aeabi_dadd+0xec>
 8005e6e:	e106      	b.n	800607e <__aeabi_dadd+0x2fa>
 8005e70:	4ac4      	ldr	r2, [pc, #784]	; (8006184 <__aeabi_dadd+0x400>)
 8005e72:	08ff      	lsrs	r7, r7, #3
 8005e74:	400a      	ands	r2, r1
 8005e76:	0753      	lsls	r3, r2, #29
 8005e78:	0252      	lsls	r2, r2, #9
 8005e7a:	433b      	orrs	r3, r7
 8005e7c:	0b12      	lsrs	r2, r2, #12
 8005e7e:	e08e      	b.n	8005f9e <__aeabi_dadd+0x21a>
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d000      	beq.n	8005e86 <__aeabi_dadd+0x102>
 8005e84:	e0b8      	b.n	8005ff8 <__aeabi_dadd+0x274>
 8005e86:	1c6b      	adds	r3, r5, #1
 8005e88:	055b      	lsls	r3, r3, #21
 8005e8a:	0d5b      	lsrs	r3, r3, #21
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	dc00      	bgt.n	8005e92 <__aeabi_dadd+0x10e>
 8005e90:	e130      	b.n	80060f4 <__aeabi_dadd+0x370>
 8005e92:	1a87      	subs	r7, r0, r2
 8005e94:	4643      	mov	r3, r8
 8005e96:	42b8      	cmp	r0, r7
 8005e98:	41b6      	sbcs	r6, r6
 8005e9a:	1acb      	subs	r3, r1, r3
 8005e9c:	4276      	negs	r6, r6
 8005e9e:	1b9e      	subs	r6, r3, r6
 8005ea0:	0233      	lsls	r3, r6, #8
 8005ea2:	d500      	bpl.n	8005ea6 <__aeabi_dadd+0x122>
 8005ea4:	e14c      	b.n	8006140 <__aeabi_dadd+0x3bc>
 8005ea6:	003b      	movs	r3, r7
 8005ea8:	4333      	orrs	r3, r6
 8005eaa:	d1a1      	bne.n	8005df0 <__aeabi_dadd+0x6c>
 8005eac:	2200      	movs	r2, #0
 8005eae:	2400      	movs	r4, #0
 8005eb0:	2500      	movs	r5, #0
 8005eb2:	e070      	b.n	8005f96 <__aeabi_dadd+0x212>
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	dc00      	bgt.n	8005eba <__aeabi_dadd+0x136>
 8005eb8:	e0e5      	b.n	8006086 <__aeabi_dadd+0x302>
 8005eba:	2e00      	cmp	r6, #0
 8005ebc:	d100      	bne.n	8005ec0 <__aeabi_dadd+0x13c>
 8005ebe:	e083      	b.n	8005fc8 <__aeabi_dadd+0x244>
 8005ec0:	4eaf      	ldr	r6, [pc, #700]	; (8006180 <__aeabi_dadd+0x3fc>)
 8005ec2:	42b5      	cmp	r5, r6
 8005ec4:	d060      	beq.n	8005f88 <__aeabi_dadd+0x204>
 8005ec6:	2680      	movs	r6, #128	; 0x80
 8005ec8:	0436      	lsls	r6, r6, #16
 8005eca:	4337      	orrs	r7, r6
 8005ecc:	46b8      	mov	r8, r7
 8005ece:	2b38      	cmp	r3, #56	; 0x38
 8005ed0:	dc00      	bgt.n	8005ed4 <__aeabi_dadd+0x150>
 8005ed2:	e13e      	b.n	8006152 <__aeabi_dadd+0x3ce>
 8005ed4:	4643      	mov	r3, r8
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	001f      	movs	r7, r3
 8005eda:	1e7a      	subs	r2, r7, #1
 8005edc:	4197      	sbcs	r7, r2
 8005ede:	183f      	adds	r7, r7, r0
 8005ee0:	4287      	cmp	r7, r0
 8005ee2:	4180      	sbcs	r0, r0
 8005ee4:	4240      	negs	r0, r0
 8005ee6:	1809      	adds	r1, r1, r0
 8005ee8:	020b      	lsls	r3, r1, #8
 8005eea:	d400      	bmi.n	8005eee <__aeabi_dadd+0x16a>
 8005eec:	e0b0      	b.n	8006050 <__aeabi_dadd+0x2cc>
 8005eee:	4ba4      	ldr	r3, [pc, #656]	; (8006180 <__aeabi_dadd+0x3fc>)
 8005ef0:	3501      	adds	r5, #1
 8005ef2:	429d      	cmp	r5, r3
 8005ef4:	d100      	bne.n	8005ef8 <__aeabi_dadd+0x174>
 8005ef6:	e0c3      	b.n	8006080 <__aeabi_dadd+0x2fc>
 8005ef8:	4aa2      	ldr	r2, [pc, #648]	; (8006184 <__aeabi_dadd+0x400>)
 8005efa:	087b      	lsrs	r3, r7, #1
 8005efc:	400a      	ands	r2, r1
 8005efe:	2101      	movs	r1, #1
 8005f00:	400f      	ands	r7, r1
 8005f02:	431f      	orrs	r7, r3
 8005f04:	0851      	lsrs	r1, r2, #1
 8005f06:	07d3      	lsls	r3, r2, #31
 8005f08:	2207      	movs	r2, #7
 8005f0a:	431f      	orrs	r7, r3
 8005f0c:	403a      	ands	r2, r7
 8005f0e:	e799      	b.n	8005e44 <__aeabi_dadd+0xc0>
 8005f10:	4e9b      	ldr	r6, [pc, #620]	; (8006180 <__aeabi_dadd+0x3fc>)
 8005f12:	42b5      	cmp	r5, r6
 8005f14:	d038      	beq.n	8005f88 <__aeabi_dadd+0x204>
 8005f16:	2680      	movs	r6, #128	; 0x80
 8005f18:	0436      	lsls	r6, r6, #16
 8005f1a:	4337      	orrs	r7, r6
 8005f1c:	46b8      	mov	r8, r7
 8005f1e:	2b38      	cmp	r3, #56	; 0x38
 8005f20:	dd00      	ble.n	8005f24 <__aeabi_dadd+0x1a0>
 8005f22:	e0dc      	b.n	80060de <__aeabi_dadd+0x35a>
 8005f24:	2b1f      	cmp	r3, #31
 8005f26:	dc00      	bgt.n	8005f2a <__aeabi_dadd+0x1a6>
 8005f28:	e130      	b.n	800618c <__aeabi_dadd+0x408>
 8005f2a:	001e      	movs	r6, r3
 8005f2c:	4647      	mov	r7, r8
 8005f2e:	3e20      	subs	r6, #32
 8005f30:	40f7      	lsrs	r7, r6
 8005f32:	46bc      	mov	ip, r7
 8005f34:	2b20      	cmp	r3, #32
 8005f36:	d004      	beq.n	8005f42 <__aeabi_dadd+0x1be>
 8005f38:	2640      	movs	r6, #64	; 0x40
 8005f3a:	1af3      	subs	r3, r6, r3
 8005f3c:	4646      	mov	r6, r8
 8005f3e:	409e      	lsls	r6, r3
 8005f40:	4332      	orrs	r2, r6
 8005f42:	0017      	movs	r7, r2
 8005f44:	4663      	mov	r3, ip
 8005f46:	1e7a      	subs	r2, r7, #1
 8005f48:	4197      	sbcs	r7, r2
 8005f4a:	431f      	orrs	r7, r3
 8005f4c:	e0cc      	b.n	80060e8 <__aeabi_dadd+0x364>
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d100      	bne.n	8005f54 <__aeabi_dadd+0x1d0>
 8005f52:	e204      	b.n	800635e <__aeabi_dadd+0x5da>
 8005f54:	4643      	mov	r3, r8
 8005f56:	4313      	orrs	r3, r2
 8005f58:	d100      	bne.n	8005f5c <__aeabi_dadd+0x1d8>
 8005f5a:	e159      	b.n	8006210 <__aeabi_dadd+0x48c>
 8005f5c:	074b      	lsls	r3, r1, #29
 8005f5e:	08c0      	lsrs	r0, r0, #3
 8005f60:	4318      	orrs	r0, r3
 8005f62:	2380      	movs	r3, #128	; 0x80
 8005f64:	08c9      	lsrs	r1, r1, #3
 8005f66:	031b      	lsls	r3, r3, #12
 8005f68:	4219      	tst	r1, r3
 8005f6a:	d008      	beq.n	8005f7e <__aeabi_dadd+0x1fa>
 8005f6c:	4645      	mov	r5, r8
 8005f6e:	08ed      	lsrs	r5, r5, #3
 8005f70:	421d      	tst	r5, r3
 8005f72:	d104      	bne.n	8005f7e <__aeabi_dadd+0x1fa>
 8005f74:	4643      	mov	r3, r8
 8005f76:	08d0      	lsrs	r0, r2, #3
 8005f78:	0759      	lsls	r1, r3, #29
 8005f7a:	4308      	orrs	r0, r1
 8005f7c:	0029      	movs	r1, r5
 8005f7e:	0f42      	lsrs	r2, r0, #29
 8005f80:	00c9      	lsls	r1, r1, #3
 8005f82:	4d7f      	ldr	r5, [pc, #508]	; (8006180 <__aeabi_dadd+0x3fc>)
 8005f84:	4311      	orrs	r1, r2
 8005f86:	00c0      	lsls	r0, r0, #3
 8005f88:	074b      	lsls	r3, r1, #29
 8005f8a:	08ca      	lsrs	r2, r1, #3
 8005f8c:	497c      	ldr	r1, [pc, #496]	; (8006180 <__aeabi_dadd+0x3fc>)
 8005f8e:	08c0      	lsrs	r0, r0, #3
 8005f90:	4303      	orrs	r3, r0
 8005f92:	428d      	cmp	r5, r1
 8005f94:	d068      	beq.n	8006068 <__aeabi_dadd+0x2e4>
 8005f96:	0312      	lsls	r2, r2, #12
 8005f98:	056d      	lsls	r5, r5, #21
 8005f9a:	0b12      	lsrs	r2, r2, #12
 8005f9c:	0d6d      	lsrs	r5, r5, #21
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	0312      	lsls	r2, r2, #12
 8005fa2:	0018      	movs	r0, r3
 8005fa4:	0b13      	lsrs	r3, r2, #12
 8005fa6:	0d0a      	lsrs	r2, r1, #20
 8005fa8:	0512      	lsls	r2, r2, #20
 8005faa:	431a      	orrs	r2, r3
 8005fac:	4b76      	ldr	r3, [pc, #472]	; (8006188 <__aeabi_dadd+0x404>)
 8005fae:	052d      	lsls	r5, r5, #20
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	432b      	orrs	r3, r5
 8005fb4:	005b      	lsls	r3, r3, #1
 8005fb6:	07e4      	lsls	r4, r4, #31
 8005fb8:	085b      	lsrs	r3, r3, #1
 8005fba:	4323      	orrs	r3, r4
 8005fbc:	0019      	movs	r1, r3
 8005fbe:	bc1c      	pop	{r2, r3, r4}
 8005fc0:	4690      	mov	r8, r2
 8005fc2:	4699      	mov	r9, r3
 8005fc4:	46a2      	mov	sl, r4
 8005fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fc8:	003e      	movs	r6, r7
 8005fca:	4316      	orrs	r6, r2
 8005fcc:	d012      	beq.n	8005ff4 <__aeabi_dadd+0x270>
 8005fce:	1e5e      	subs	r6, r3, #1
 8005fd0:	2e00      	cmp	r6, #0
 8005fd2:	d000      	beq.n	8005fd6 <__aeabi_dadd+0x252>
 8005fd4:	e100      	b.n	80061d8 <__aeabi_dadd+0x454>
 8005fd6:	1887      	adds	r7, r0, r2
 8005fd8:	4287      	cmp	r7, r0
 8005fda:	4180      	sbcs	r0, r0
 8005fdc:	4441      	add	r1, r8
 8005fde:	4240      	negs	r0, r0
 8005fe0:	1809      	adds	r1, r1, r0
 8005fe2:	2501      	movs	r5, #1
 8005fe4:	020b      	lsls	r3, r1, #8
 8005fe6:	d533      	bpl.n	8006050 <__aeabi_dadd+0x2cc>
 8005fe8:	2502      	movs	r5, #2
 8005fea:	e785      	b.n	8005ef8 <__aeabi_dadd+0x174>
 8005fec:	4664      	mov	r4, ip
 8005fee:	0033      	movs	r3, r6
 8005ff0:	4641      	mov	r1, r8
 8005ff2:	0010      	movs	r0, r2
 8005ff4:	001d      	movs	r5, r3
 8005ff6:	e7c7      	b.n	8005f88 <__aeabi_dadd+0x204>
 8005ff8:	2d00      	cmp	r5, #0
 8005ffa:	d000      	beq.n	8005ffe <__aeabi_dadd+0x27a>
 8005ffc:	e0da      	b.n	80061b4 <__aeabi_dadd+0x430>
 8005ffe:	000c      	movs	r4, r1
 8006000:	4304      	orrs	r4, r0
 8006002:	d0f3      	beq.n	8005fec <__aeabi_dadd+0x268>
 8006004:	1c5c      	adds	r4, r3, #1
 8006006:	d100      	bne.n	800600a <__aeabi_dadd+0x286>
 8006008:	e19f      	b.n	800634a <__aeabi_dadd+0x5c6>
 800600a:	4c5d      	ldr	r4, [pc, #372]	; (8006180 <__aeabi_dadd+0x3fc>)
 800600c:	42a6      	cmp	r6, r4
 800600e:	d100      	bne.n	8006012 <__aeabi_dadd+0x28e>
 8006010:	e12f      	b.n	8006272 <__aeabi_dadd+0x4ee>
 8006012:	43db      	mvns	r3, r3
 8006014:	2b38      	cmp	r3, #56	; 0x38
 8006016:	dd00      	ble.n	800601a <__aeabi_dadd+0x296>
 8006018:	e166      	b.n	80062e8 <__aeabi_dadd+0x564>
 800601a:	2b1f      	cmp	r3, #31
 800601c:	dd00      	ble.n	8006020 <__aeabi_dadd+0x29c>
 800601e:	e183      	b.n	8006328 <__aeabi_dadd+0x5a4>
 8006020:	2420      	movs	r4, #32
 8006022:	0005      	movs	r5, r0
 8006024:	1ae4      	subs	r4, r4, r3
 8006026:	000f      	movs	r7, r1
 8006028:	40dd      	lsrs	r5, r3
 800602a:	40d9      	lsrs	r1, r3
 800602c:	40a0      	lsls	r0, r4
 800602e:	4643      	mov	r3, r8
 8006030:	40a7      	lsls	r7, r4
 8006032:	1a5b      	subs	r3, r3, r1
 8006034:	1e44      	subs	r4, r0, #1
 8006036:	41a0      	sbcs	r0, r4
 8006038:	4698      	mov	r8, r3
 800603a:	432f      	orrs	r7, r5
 800603c:	4338      	orrs	r0, r7
 800603e:	1a17      	subs	r7, r2, r0
 8006040:	42ba      	cmp	r2, r7
 8006042:	4192      	sbcs	r2, r2
 8006044:	4643      	mov	r3, r8
 8006046:	4252      	negs	r2, r2
 8006048:	1a99      	subs	r1, r3, r2
 800604a:	4664      	mov	r4, ip
 800604c:	0035      	movs	r5, r6
 800604e:	e6ca      	b.n	8005de6 <__aeabi_dadd+0x62>
 8006050:	2207      	movs	r2, #7
 8006052:	403a      	ands	r2, r7
 8006054:	2a00      	cmp	r2, #0
 8006056:	d000      	beq.n	800605a <__aeabi_dadd+0x2d6>
 8006058:	e6f6      	b.n	8005e48 <__aeabi_dadd+0xc4>
 800605a:	074b      	lsls	r3, r1, #29
 800605c:	08ca      	lsrs	r2, r1, #3
 800605e:	4948      	ldr	r1, [pc, #288]	; (8006180 <__aeabi_dadd+0x3fc>)
 8006060:	08ff      	lsrs	r7, r7, #3
 8006062:	433b      	orrs	r3, r7
 8006064:	428d      	cmp	r5, r1
 8006066:	d196      	bne.n	8005f96 <__aeabi_dadd+0x212>
 8006068:	0019      	movs	r1, r3
 800606a:	4311      	orrs	r1, r2
 800606c:	d100      	bne.n	8006070 <__aeabi_dadd+0x2ec>
 800606e:	e19e      	b.n	80063ae <__aeabi_dadd+0x62a>
 8006070:	2180      	movs	r1, #128	; 0x80
 8006072:	0309      	lsls	r1, r1, #12
 8006074:	430a      	orrs	r2, r1
 8006076:	0312      	lsls	r2, r2, #12
 8006078:	0b12      	lsrs	r2, r2, #12
 800607a:	4d41      	ldr	r5, [pc, #260]	; (8006180 <__aeabi_dadd+0x3fc>)
 800607c:	e78f      	b.n	8005f9e <__aeabi_dadd+0x21a>
 800607e:	0015      	movs	r5, r2
 8006080:	2200      	movs	r2, #0
 8006082:	2300      	movs	r3, #0
 8006084:	e78b      	b.n	8005f9e <__aeabi_dadd+0x21a>
 8006086:	2b00      	cmp	r3, #0
 8006088:	d000      	beq.n	800608c <__aeabi_dadd+0x308>
 800608a:	e0c7      	b.n	800621c <__aeabi_dadd+0x498>
 800608c:	1c6b      	adds	r3, r5, #1
 800608e:	055f      	lsls	r7, r3, #21
 8006090:	0d7f      	lsrs	r7, r7, #21
 8006092:	2f01      	cmp	r7, #1
 8006094:	dc00      	bgt.n	8006098 <__aeabi_dadd+0x314>
 8006096:	e0f1      	b.n	800627c <__aeabi_dadd+0x4f8>
 8006098:	4d39      	ldr	r5, [pc, #228]	; (8006180 <__aeabi_dadd+0x3fc>)
 800609a:	42ab      	cmp	r3, r5
 800609c:	d100      	bne.n	80060a0 <__aeabi_dadd+0x31c>
 800609e:	e0b9      	b.n	8006214 <__aeabi_dadd+0x490>
 80060a0:	1885      	adds	r5, r0, r2
 80060a2:	000a      	movs	r2, r1
 80060a4:	4285      	cmp	r5, r0
 80060a6:	4189      	sbcs	r1, r1
 80060a8:	4442      	add	r2, r8
 80060aa:	4249      	negs	r1, r1
 80060ac:	1851      	adds	r1, r2, r1
 80060ae:	2207      	movs	r2, #7
 80060b0:	07cf      	lsls	r7, r1, #31
 80060b2:	086d      	lsrs	r5, r5, #1
 80060b4:	432f      	orrs	r7, r5
 80060b6:	0849      	lsrs	r1, r1, #1
 80060b8:	403a      	ands	r2, r7
 80060ba:	001d      	movs	r5, r3
 80060bc:	e6c2      	b.n	8005e44 <__aeabi_dadd+0xc0>
 80060be:	2207      	movs	r2, #7
 80060c0:	4930      	ldr	r1, [pc, #192]	; (8006184 <__aeabi_dadd+0x400>)
 80060c2:	1aed      	subs	r5, r5, r3
 80060c4:	4031      	ands	r1, r6
 80060c6:	403a      	ands	r2, r7
 80060c8:	e6bc      	b.n	8005e44 <__aeabi_dadd+0xc0>
 80060ca:	003e      	movs	r6, r7
 80060cc:	3828      	subs	r0, #40	; 0x28
 80060ce:	4086      	lsls	r6, r0
 80060d0:	2700      	movs	r7, #0
 80060d2:	e69f      	b.n	8005e14 <__aeabi_dadd+0x90>
 80060d4:	0038      	movs	r0, r7
 80060d6:	f001 fcc9 	bl	8007a6c <__clzsi2>
 80060da:	3020      	adds	r0, #32
 80060dc:	e68e      	b.n	8005dfc <__aeabi_dadd+0x78>
 80060de:	4643      	mov	r3, r8
 80060e0:	4313      	orrs	r3, r2
 80060e2:	001f      	movs	r7, r3
 80060e4:	1e7a      	subs	r2, r7, #1
 80060e6:	4197      	sbcs	r7, r2
 80060e8:	1bc7      	subs	r7, r0, r7
 80060ea:	42b8      	cmp	r0, r7
 80060ec:	4180      	sbcs	r0, r0
 80060ee:	4240      	negs	r0, r0
 80060f0:	1a09      	subs	r1, r1, r0
 80060f2:	e678      	b.n	8005de6 <__aeabi_dadd+0x62>
 80060f4:	000e      	movs	r6, r1
 80060f6:	003b      	movs	r3, r7
 80060f8:	4306      	orrs	r6, r0
 80060fa:	4313      	orrs	r3, r2
 80060fc:	2d00      	cmp	r5, #0
 80060fe:	d161      	bne.n	80061c4 <__aeabi_dadd+0x440>
 8006100:	2e00      	cmp	r6, #0
 8006102:	d000      	beq.n	8006106 <__aeabi_dadd+0x382>
 8006104:	e0f4      	b.n	80062f0 <__aeabi_dadd+0x56c>
 8006106:	2b00      	cmp	r3, #0
 8006108:	d100      	bne.n	800610c <__aeabi_dadd+0x388>
 800610a:	e11b      	b.n	8006344 <__aeabi_dadd+0x5c0>
 800610c:	4664      	mov	r4, ip
 800610e:	0039      	movs	r1, r7
 8006110:	0010      	movs	r0, r2
 8006112:	e739      	b.n	8005f88 <__aeabi_dadd+0x204>
 8006114:	4f1a      	ldr	r7, [pc, #104]	; (8006180 <__aeabi_dadd+0x3fc>)
 8006116:	42bb      	cmp	r3, r7
 8006118:	d07a      	beq.n	8006210 <__aeabi_dadd+0x48c>
 800611a:	0033      	movs	r3, r6
 800611c:	e6ff      	b.n	8005f1e <__aeabi_dadd+0x19a>
 800611e:	0030      	movs	r0, r6
 8006120:	3d1f      	subs	r5, #31
 8006122:	40e8      	lsrs	r0, r5
 8006124:	2b20      	cmp	r3, #32
 8006126:	d003      	beq.n	8006130 <__aeabi_dadd+0x3ac>
 8006128:	2140      	movs	r1, #64	; 0x40
 800612a:	1acb      	subs	r3, r1, r3
 800612c:	409e      	lsls	r6, r3
 800612e:	4337      	orrs	r7, r6
 8006130:	1e7b      	subs	r3, r7, #1
 8006132:	419f      	sbcs	r7, r3
 8006134:	2207      	movs	r2, #7
 8006136:	4307      	orrs	r7, r0
 8006138:	403a      	ands	r2, r7
 800613a:	2100      	movs	r1, #0
 800613c:	2500      	movs	r5, #0
 800613e:	e789      	b.n	8006054 <__aeabi_dadd+0x2d0>
 8006140:	1a17      	subs	r7, r2, r0
 8006142:	4643      	mov	r3, r8
 8006144:	42ba      	cmp	r2, r7
 8006146:	41b6      	sbcs	r6, r6
 8006148:	1a59      	subs	r1, r3, r1
 800614a:	4276      	negs	r6, r6
 800614c:	1b8e      	subs	r6, r1, r6
 800614e:	4664      	mov	r4, ip
 8006150:	e64e      	b.n	8005df0 <__aeabi_dadd+0x6c>
 8006152:	2b1f      	cmp	r3, #31
 8006154:	dd00      	ble.n	8006158 <__aeabi_dadd+0x3d4>
 8006156:	e0ad      	b.n	80062b4 <__aeabi_dadd+0x530>
 8006158:	2620      	movs	r6, #32
 800615a:	4647      	mov	r7, r8
 800615c:	1af6      	subs	r6, r6, r3
 800615e:	40b7      	lsls	r7, r6
 8006160:	46b9      	mov	r9, r7
 8006162:	0017      	movs	r7, r2
 8006164:	46b2      	mov	sl, r6
 8006166:	40df      	lsrs	r7, r3
 8006168:	464e      	mov	r6, r9
 800616a:	433e      	orrs	r6, r7
 800616c:	0037      	movs	r7, r6
 800616e:	4656      	mov	r6, sl
 8006170:	40b2      	lsls	r2, r6
 8006172:	1e56      	subs	r6, r2, #1
 8006174:	41b2      	sbcs	r2, r6
 8006176:	4317      	orrs	r7, r2
 8006178:	4642      	mov	r2, r8
 800617a:	40da      	lsrs	r2, r3
 800617c:	1889      	adds	r1, r1, r2
 800617e:	e6ae      	b.n	8005ede <__aeabi_dadd+0x15a>
 8006180:	000007ff 	.word	0x000007ff
 8006184:	ff7fffff 	.word	0xff7fffff
 8006188:	800fffff 	.word	0x800fffff
 800618c:	2620      	movs	r6, #32
 800618e:	4647      	mov	r7, r8
 8006190:	1af6      	subs	r6, r6, r3
 8006192:	40b7      	lsls	r7, r6
 8006194:	46b9      	mov	r9, r7
 8006196:	0017      	movs	r7, r2
 8006198:	46b2      	mov	sl, r6
 800619a:	40df      	lsrs	r7, r3
 800619c:	464e      	mov	r6, r9
 800619e:	433e      	orrs	r6, r7
 80061a0:	0037      	movs	r7, r6
 80061a2:	4656      	mov	r6, sl
 80061a4:	40b2      	lsls	r2, r6
 80061a6:	1e56      	subs	r6, r2, #1
 80061a8:	41b2      	sbcs	r2, r6
 80061aa:	4317      	orrs	r7, r2
 80061ac:	4642      	mov	r2, r8
 80061ae:	40da      	lsrs	r2, r3
 80061b0:	1a89      	subs	r1, r1, r2
 80061b2:	e799      	b.n	80060e8 <__aeabi_dadd+0x364>
 80061b4:	4c7f      	ldr	r4, [pc, #508]	; (80063b4 <__aeabi_dadd+0x630>)
 80061b6:	42a6      	cmp	r6, r4
 80061b8:	d05b      	beq.n	8006272 <__aeabi_dadd+0x4ee>
 80061ba:	2480      	movs	r4, #128	; 0x80
 80061bc:	0424      	lsls	r4, r4, #16
 80061be:	425b      	negs	r3, r3
 80061c0:	4321      	orrs	r1, r4
 80061c2:	e727      	b.n	8006014 <__aeabi_dadd+0x290>
 80061c4:	2e00      	cmp	r6, #0
 80061c6:	d10c      	bne.n	80061e2 <__aeabi_dadd+0x45e>
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d100      	bne.n	80061ce <__aeabi_dadd+0x44a>
 80061cc:	e0cb      	b.n	8006366 <__aeabi_dadd+0x5e2>
 80061ce:	4664      	mov	r4, ip
 80061d0:	0039      	movs	r1, r7
 80061d2:	0010      	movs	r0, r2
 80061d4:	4d77      	ldr	r5, [pc, #476]	; (80063b4 <__aeabi_dadd+0x630>)
 80061d6:	e6d7      	b.n	8005f88 <__aeabi_dadd+0x204>
 80061d8:	4f76      	ldr	r7, [pc, #472]	; (80063b4 <__aeabi_dadd+0x630>)
 80061da:	42bb      	cmp	r3, r7
 80061dc:	d018      	beq.n	8006210 <__aeabi_dadd+0x48c>
 80061de:	0033      	movs	r3, r6
 80061e0:	e675      	b.n	8005ece <__aeabi_dadd+0x14a>
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d014      	beq.n	8006210 <__aeabi_dadd+0x48c>
 80061e6:	074b      	lsls	r3, r1, #29
 80061e8:	08c0      	lsrs	r0, r0, #3
 80061ea:	4318      	orrs	r0, r3
 80061ec:	2380      	movs	r3, #128	; 0x80
 80061ee:	08c9      	lsrs	r1, r1, #3
 80061f0:	031b      	lsls	r3, r3, #12
 80061f2:	4219      	tst	r1, r3
 80061f4:	d007      	beq.n	8006206 <__aeabi_dadd+0x482>
 80061f6:	08fc      	lsrs	r4, r7, #3
 80061f8:	421c      	tst	r4, r3
 80061fa:	d104      	bne.n	8006206 <__aeabi_dadd+0x482>
 80061fc:	0779      	lsls	r1, r7, #29
 80061fe:	08d0      	lsrs	r0, r2, #3
 8006200:	4308      	orrs	r0, r1
 8006202:	46e1      	mov	r9, ip
 8006204:	0021      	movs	r1, r4
 8006206:	464c      	mov	r4, r9
 8006208:	0f42      	lsrs	r2, r0, #29
 800620a:	00c9      	lsls	r1, r1, #3
 800620c:	4311      	orrs	r1, r2
 800620e:	00c0      	lsls	r0, r0, #3
 8006210:	4d68      	ldr	r5, [pc, #416]	; (80063b4 <__aeabi_dadd+0x630>)
 8006212:	e6b9      	b.n	8005f88 <__aeabi_dadd+0x204>
 8006214:	001d      	movs	r5, r3
 8006216:	2200      	movs	r2, #0
 8006218:	2300      	movs	r3, #0
 800621a:	e6c0      	b.n	8005f9e <__aeabi_dadd+0x21a>
 800621c:	2d00      	cmp	r5, #0
 800621e:	d15b      	bne.n	80062d8 <__aeabi_dadd+0x554>
 8006220:	000d      	movs	r5, r1
 8006222:	4305      	orrs	r5, r0
 8006224:	d100      	bne.n	8006228 <__aeabi_dadd+0x4a4>
 8006226:	e6e2      	b.n	8005fee <__aeabi_dadd+0x26a>
 8006228:	1c5d      	adds	r5, r3, #1
 800622a:	d100      	bne.n	800622e <__aeabi_dadd+0x4aa>
 800622c:	e0b0      	b.n	8006390 <__aeabi_dadd+0x60c>
 800622e:	4d61      	ldr	r5, [pc, #388]	; (80063b4 <__aeabi_dadd+0x630>)
 8006230:	42ae      	cmp	r6, r5
 8006232:	d01f      	beq.n	8006274 <__aeabi_dadd+0x4f0>
 8006234:	43db      	mvns	r3, r3
 8006236:	2b38      	cmp	r3, #56	; 0x38
 8006238:	dc71      	bgt.n	800631e <__aeabi_dadd+0x59a>
 800623a:	2b1f      	cmp	r3, #31
 800623c:	dd00      	ble.n	8006240 <__aeabi_dadd+0x4bc>
 800623e:	e096      	b.n	800636e <__aeabi_dadd+0x5ea>
 8006240:	2520      	movs	r5, #32
 8006242:	000f      	movs	r7, r1
 8006244:	1aed      	subs	r5, r5, r3
 8006246:	40af      	lsls	r7, r5
 8006248:	46b9      	mov	r9, r7
 800624a:	0007      	movs	r7, r0
 800624c:	46aa      	mov	sl, r5
 800624e:	40df      	lsrs	r7, r3
 8006250:	464d      	mov	r5, r9
 8006252:	433d      	orrs	r5, r7
 8006254:	002f      	movs	r7, r5
 8006256:	4655      	mov	r5, sl
 8006258:	40a8      	lsls	r0, r5
 800625a:	40d9      	lsrs	r1, r3
 800625c:	1e45      	subs	r5, r0, #1
 800625e:	41a8      	sbcs	r0, r5
 8006260:	4488      	add	r8, r1
 8006262:	4307      	orrs	r7, r0
 8006264:	18bf      	adds	r7, r7, r2
 8006266:	4297      	cmp	r7, r2
 8006268:	4192      	sbcs	r2, r2
 800626a:	4251      	negs	r1, r2
 800626c:	4441      	add	r1, r8
 800626e:	0035      	movs	r5, r6
 8006270:	e63a      	b.n	8005ee8 <__aeabi_dadd+0x164>
 8006272:	4664      	mov	r4, ip
 8006274:	0035      	movs	r5, r6
 8006276:	4641      	mov	r1, r8
 8006278:	0010      	movs	r0, r2
 800627a:	e685      	b.n	8005f88 <__aeabi_dadd+0x204>
 800627c:	000b      	movs	r3, r1
 800627e:	4303      	orrs	r3, r0
 8006280:	2d00      	cmp	r5, #0
 8006282:	d000      	beq.n	8006286 <__aeabi_dadd+0x502>
 8006284:	e663      	b.n	8005f4e <__aeabi_dadd+0x1ca>
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0f5      	beq.n	8006276 <__aeabi_dadd+0x4f2>
 800628a:	4643      	mov	r3, r8
 800628c:	4313      	orrs	r3, r2
 800628e:	d100      	bne.n	8006292 <__aeabi_dadd+0x50e>
 8006290:	e67a      	b.n	8005f88 <__aeabi_dadd+0x204>
 8006292:	1887      	adds	r7, r0, r2
 8006294:	4287      	cmp	r7, r0
 8006296:	4180      	sbcs	r0, r0
 8006298:	2207      	movs	r2, #7
 800629a:	4441      	add	r1, r8
 800629c:	4240      	negs	r0, r0
 800629e:	1809      	adds	r1, r1, r0
 80062a0:	403a      	ands	r2, r7
 80062a2:	020b      	lsls	r3, r1, #8
 80062a4:	d400      	bmi.n	80062a8 <__aeabi_dadd+0x524>
 80062a6:	e6d5      	b.n	8006054 <__aeabi_dadd+0x2d0>
 80062a8:	4b43      	ldr	r3, [pc, #268]	; (80063b8 <__aeabi_dadd+0x634>)
 80062aa:	3501      	adds	r5, #1
 80062ac:	4019      	ands	r1, r3
 80062ae:	e5c9      	b.n	8005e44 <__aeabi_dadd+0xc0>
 80062b0:	0038      	movs	r0, r7
 80062b2:	e669      	b.n	8005f88 <__aeabi_dadd+0x204>
 80062b4:	001e      	movs	r6, r3
 80062b6:	4647      	mov	r7, r8
 80062b8:	3e20      	subs	r6, #32
 80062ba:	40f7      	lsrs	r7, r6
 80062bc:	46bc      	mov	ip, r7
 80062be:	2b20      	cmp	r3, #32
 80062c0:	d004      	beq.n	80062cc <__aeabi_dadd+0x548>
 80062c2:	2640      	movs	r6, #64	; 0x40
 80062c4:	1af3      	subs	r3, r6, r3
 80062c6:	4646      	mov	r6, r8
 80062c8:	409e      	lsls	r6, r3
 80062ca:	4332      	orrs	r2, r6
 80062cc:	0017      	movs	r7, r2
 80062ce:	4663      	mov	r3, ip
 80062d0:	1e7a      	subs	r2, r7, #1
 80062d2:	4197      	sbcs	r7, r2
 80062d4:	431f      	orrs	r7, r3
 80062d6:	e602      	b.n	8005ede <__aeabi_dadd+0x15a>
 80062d8:	4d36      	ldr	r5, [pc, #216]	; (80063b4 <__aeabi_dadd+0x630>)
 80062da:	42ae      	cmp	r6, r5
 80062dc:	d0ca      	beq.n	8006274 <__aeabi_dadd+0x4f0>
 80062de:	2580      	movs	r5, #128	; 0x80
 80062e0:	042d      	lsls	r5, r5, #16
 80062e2:	425b      	negs	r3, r3
 80062e4:	4329      	orrs	r1, r5
 80062e6:	e7a6      	b.n	8006236 <__aeabi_dadd+0x4b2>
 80062e8:	4308      	orrs	r0, r1
 80062ea:	1e41      	subs	r1, r0, #1
 80062ec:	4188      	sbcs	r0, r1
 80062ee:	e6a6      	b.n	800603e <__aeabi_dadd+0x2ba>
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d100      	bne.n	80062f6 <__aeabi_dadd+0x572>
 80062f4:	e648      	b.n	8005f88 <__aeabi_dadd+0x204>
 80062f6:	1a87      	subs	r7, r0, r2
 80062f8:	4643      	mov	r3, r8
 80062fa:	42b8      	cmp	r0, r7
 80062fc:	41b6      	sbcs	r6, r6
 80062fe:	1acb      	subs	r3, r1, r3
 8006300:	4276      	negs	r6, r6
 8006302:	1b9e      	subs	r6, r3, r6
 8006304:	0233      	lsls	r3, r6, #8
 8006306:	d54b      	bpl.n	80063a0 <__aeabi_dadd+0x61c>
 8006308:	1a17      	subs	r7, r2, r0
 800630a:	4643      	mov	r3, r8
 800630c:	42ba      	cmp	r2, r7
 800630e:	4192      	sbcs	r2, r2
 8006310:	1a59      	subs	r1, r3, r1
 8006312:	4252      	negs	r2, r2
 8006314:	1a89      	subs	r1, r1, r2
 8006316:	2207      	movs	r2, #7
 8006318:	4664      	mov	r4, ip
 800631a:	403a      	ands	r2, r7
 800631c:	e592      	b.n	8005e44 <__aeabi_dadd+0xc0>
 800631e:	4301      	orrs	r1, r0
 8006320:	000f      	movs	r7, r1
 8006322:	1e79      	subs	r1, r7, #1
 8006324:	418f      	sbcs	r7, r1
 8006326:	e79d      	b.n	8006264 <__aeabi_dadd+0x4e0>
 8006328:	001c      	movs	r4, r3
 800632a:	000f      	movs	r7, r1
 800632c:	3c20      	subs	r4, #32
 800632e:	40e7      	lsrs	r7, r4
 8006330:	2b20      	cmp	r3, #32
 8006332:	d003      	beq.n	800633c <__aeabi_dadd+0x5b8>
 8006334:	2440      	movs	r4, #64	; 0x40
 8006336:	1ae3      	subs	r3, r4, r3
 8006338:	4099      	lsls	r1, r3
 800633a:	4308      	orrs	r0, r1
 800633c:	1e41      	subs	r1, r0, #1
 800633e:	4188      	sbcs	r0, r1
 8006340:	4338      	orrs	r0, r7
 8006342:	e67c      	b.n	800603e <__aeabi_dadd+0x2ba>
 8006344:	2200      	movs	r2, #0
 8006346:	2400      	movs	r4, #0
 8006348:	e625      	b.n	8005f96 <__aeabi_dadd+0x212>
 800634a:	1a17      	subs	r7, r2, r0
 800634c:	4643      	mov	r3, r8
 800634e:	42ba      	cmp	r2, r7
 8006350:	4192      	sbcs	r2, r2
 8006352:	1a59      	subs	r1, r3, r1
 8006354:	4252      	negs	r2, r2
 8006356:	1a89      	subs	r1, r1, r2
 8006358:	4664      	mov	r4, ip
 800635a:	0035      	movs	r5, r6
 800635c:	e543      	b.n	8005de6 <__aeabi_dadd+0x62>
 800635e:	4641      	mov	r1, r8
 8006360:	0010      	movs	r0, r2
 8006362:	4d14      	ldr	r5, [pc, #80]	; (80063b4 <__aeabi_dadd+0x630>)
 8006364:	e610      	b.n	8005f88 <__aeabi_dadd+0x204>
 8006366:	2280      	movs	r2, #128	; 0x80
 8006368:	2400      	movs	r4, #0
 800636a:	0312      	lsls	r2, r2, #12
 800636c:	e680      	b.n	8006070 <__aeabi_dadd+0x2ec>
 800636e:	001d      	movs	r5, r3
 8006370:	000f      	movs	r7, r1
 8006372:	3d20      	subs	r5, #32
 8006374:	40ef      	lsrs	r7, r5
 8006376:	46bc      	mov	ip, r7
 8006378:	2b20      	cmp	r3, #32
 800637a:	d003      	beq.n	8006384 <__aeabi_dadd+0x600>
 800637c:	2540      	movs	r5, #64	; 0x40
 800637e:	1aeb      	subs	r3, r5, r3
 8006380:	4099      	lsls	r1, r3
 8006382:	4308      	orrs	r0, r1
 8006384:	0007      	movs	r7, r0
 8006386:	4663      	mov	r3, ip
 8006388:	1e78      	subs	r0, r7, #1
 800638a:	4187      	sbcs	r7, r0
 800638c:	431f      	orrs	r7, r3
 800638e:	e769      	b.n	8006264 <__aeabi_dadd+0x4e0>
 8006390:	1887      	adds	r7, r0, r2
 8006392:	4297      	cmp	r7, r2
 8006394:	419b      	sbcs	r3, r3
 8006396:	4441      	add	r1, r8
 8006398:	425b      	negs	r3, r3
 800639a:	18c9      	adds	r1, r1, r3
 800639c:	0035      	movs	r5, r6
 800639e:	e5a3      	b.n	8005ee8 <__aeabi_dadd+0x164>
 80063a0:	003b      	movs	r3, r7
 80063a2:	4333      	orrs	r3, r6
 80063a4:	d0ce      	beq.n	8006344 <__aeabi_dadd+0x5c0>
 80063a6:	2207      	movs	r2, #7
 80063a8:	0031      	movs	r1, r6
 80063aa:	403a      	ands	r2, r7
 80063ac:	e652      	b.n	8006054 <__aeabi_dadd+0x2d0>
 80063ae:	2300      	movs	r3, #0
 80063b0:	001a      	movs	r2, r3
 80063b2:	e5f4      	b.n	8005f9e <__aeabi_dadd+0x21a>
 80063b4:	000007ff 	.word	0x000007ff
 80063b8:	ff7fffff 	.word	0xff7fffff

080063bc <__aeabi_ddiv>:
 80063bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063be:	4657      	mov	r7, sl
 80063c0:	46de      	mov	lr, fp
 80063c2:	464e      	mov	r6, r9
 80063c4:	4645      	mov	r5, r8
 80063c6:	b5e0      	push	{r5, r6, r7, lr}
 80063c8:	4683      	mov	fp, r0
 80063ca:	0007      	movs	r7, r0
 80063cc:	030e      	lsls	r6, r1, #12
 80063ce:	0048      	lsls	r0, r1, #1
 80063d0:	b085      	sub	sp, #20
 80063d2:	4692      	mov	sl, r2
 80063d4:	001c      	movs	r4, r3
 80063d6:	0b36      	lsrs	r6, r6, #12
 80063d8:	0d40      	lsrs	r0, r0, #21
 80063da:	0fcd      	lsrs	r5, r1, #31
 80063dc:	2800      	cmp	r0, #0
 80063de:	d100      	bne.n	80063e2 <__aeabi_ddiv+0x26>
 80063e0:	e09d      	b.n	800651e <__aeabi_ddiv+0x162>
 80063e2:	4b95      	ldr	r3, [pc, #596]	; (8006638 <__aeabi_ddiv+0x27c>)
 80063e4:	4298      	cmp	r0, r3
 80063e6:	d039      	beq.n	800645c <__aeabi_ddiv+0xa0>
 80063e8:	2380      	movs	r3, #128	; 0x80
 80063ea:	00f6      	lsls	r6, r6, #3
 80063ec:	041b      	lsls	r3, r3, #16
 80063ee:	431e      	orrs	r6, r3
 80063f0:	4a92      	ldr	r2, [pc, #584]	; (800663c <__aeabi_ddiv+0x280>)
 80063f2:	0f7b      	lsrs	r3, r7, #29
 80063f4:	4333      	orrs	r3, r6
 80063f6:	4699      	mov	r9, r3
 80063f8:	4694      	mov	ip, r2
 80063fa:	0003      	movs	r3, r0
 80063fc:	4463      	add	r3, ip
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	2300      	movs	r3, #0
 8006402:	2600      	movs	r6, #0
 8006404:	00ff      	lsls	r7, r7, #3
 8006406:	9302      	str	r3, [sp, #8]
 8006408:	0323      	lsls	r3, r4, #12
 800640a:	0b1b      	lsrs	r3, r3, #12
 800640c:	4698      	mov	r8, r3
 800640e:	0063      	lsls	r3, r4, #1
 8006410:	0fe4      	lsrs	r4, r4, #31
 8006412:	4652      	mov	r2, sl
 8006414:	0d5b      	lsrs	r3, r3, #21
 8006416:	9401      	str	r4, [sp, #4]
 8006418:	d100      	bne.n	800641c <__aeabi_ddiv+0x60>
 800641a:	e0b3      	b.n	8006584 <__aeabi_ddiv+0x1c8>
 800641c:	4986      	ldr	r1, [pc, #536]	; (8006638 <__aeabi_ddiv+0x27c>)
 800641e:	428b      	cmp	r3, r1
 8006420:	d100      	bne.n	8006424 <__aeabi_ddiv+0x68>
 8006422:	e09e      	b.n	8006562 <__aeabi_ddiv+0x1a6>
 8006424:	4642      	mov	r2, r8
 8006426:	00d1      	lsls	r1, r2, #3
 8006428:	2280      	movs	r2, #128	; 0x80
 800642a:	0412      	lsls	r2, r2, #16
 800642c:	430a      	orrs	r2, r1
 800642e:	4651      	mov	r1, sl
 8006430:	0f49      	lsrs	r1, r1, #29
 8006432:	4311      	orrs	r1, r2
 8006434:	468b      	mov	fp, r1
 8006436:	4981      	ldr	r1, [pc, #516]	; (800663c <__aeabi_ddiv+0x280>)
 8006438:	4652      	mov	r2, sl
 800643a:	468c      	mov	ip, r1
 800643c:	9900      	ldr	r1, [sp, #0]
 800643e:	4463      	add	r3, ip
 8006440:	1acb      	subs	r3, r1, r3
 8006442:	2100      	movs	r1, #0
 8006444:	00d2      	lsls	r2, r2, #3
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	002b      	movs	r3, r5
 800644a:	4063      	eors	r3, r4
 800644c:	469a      	mov	sl, r3
 800644e:	2e0f      	cmp	r6, #15
 8006450:	d900      	bls.n	8006454 <__aeabi_ddiv+0x98>
 8006452:	e105      	b.n	8006660 <__aeabi_ddiv+0x2a4>
 8006454:	4b7a      	ldr	r3, [pc, #488]	; (8006640 <__aeabi_ddiv+0x284>)
 8006456:	00b6      	lsls	r6, r6, #2
 8006458:	599b      	ldr	r3, [r3, r6]
 800645a:	469f      	mov	pc, r3
 800645c:	465b      	mov	r3, fp
 800645e:	4333      	orrs	r3, r6
 8006460:	4699      	mov	r9, r3
 8006462:	d000      	beq.n	8006466 <__aeabi_ddiv+0xaa>
 8006464:	e0b8      	b.n	80065d8 <__aeabi_ddiv+0x21c>
 8006466:	2302      	movs	r3, #2
 8006468:	2608      	movs	r6, #8
 800646a:	2700      	movs	r7, #0
 800646c:	9000      	str	r0, [sp, #0]
 800646e:	9302      	str	r3, [sp, #8]
 8006470:	e7ca      	b.n	8006408 <__aeabi_ddiv+0x4c>
 8006472:	46cb      	mov	fp, r9
 8006474:	003a      	movs	r2, r7
 8006476:	9902      	ldr	r1, [sp, #8]
 8006478:	9501      	str	r5, [sp, #4]
 800647a:	9b01      	ldr	r3, [sp, #4]
 800647c:	469a      	mov	sl, r3
 800647e:	2902      	cmp	r1, #2
 8006480:	d027      	beq.n	80064d2 <__aeabi_ddiv+0x116>
 8006482:	2903      	cmp	r1, #3
 8006484:	d100      	bne.n	8006488 <__aeabi_ddiv+0xcc>
 8006486:	e280      	b.n	800698a <__aeabi_ddiv+0x5ce>
 8006488:	2901      	cmp	r1, #1
 800648a:	d044      	beq.n	8006516 <__aeabi_ddiv+0x15a>
 800648c:	496d      	ldr	r1, [pc, #436]	; (8006644 <__aeabi_ddiv+0x288>)
 800648e:	9b00      	ldr	r3, [sp, #0]
 8006490:	468c      	mov	ip, r1
 8006492:	4463      	add	r3, ip
 8006494:	001c      	movs	r4, r3
 8006496:	2c00      	cmp	r4, #0
 8006498:	dd38      	ble.n	800650c <__aeabi_ddiv+0x150>
 800649a:	0753      	lsls	r3, r2, #29
 800649c:	d000      	beq.n	80064a0 <__aeabi_ddiv+0xe4>
 800649e:	e213      	b.n	80068c8 <__aeabi_ddiv+0x50c>
 80064a0:	08d2      	lsrs	r2, r2, #3
 80064a2:	465b      	mov	r3, fp
 80064a4:	01db      	lsls	r3, r3, #7
 80064a6:	d509      	bpl.n	80064bc <__aeabi_ddiv+0x100>
 80064a8:	4659      	mov	r1, fp
 80064aa:	4b67      	ldr	r3, [pc, #412]	; (8006648 <__aeabi_ddiv+0x28c>)
 80064ac:	4019      	ands	r1, r3
 80064ae:	468b      	mov	fp, r1
 80064b0:	2180      	movs	r1, #128	; 0x80
 80064b2:	00c9      	lsls	r1, r1, #3
 80064b4:	468c      	mov	ip, r1
 80064b6:	9b00      	ldr	r3, [sp, #0]
 80064b8:	4463      	add	r3, ip
 80064ba:	001c      	movs	r4, r3
 80064bc:	4b63      	ldr	r3, [pc, #396]	; (800664c <__aeabi_ddiv+0x290>)
 80064be:	429c      	cmp	r4, r3
 80064c0:	dc07      	bgt.n	80064d2 <__aeabi_ddiv+0x116>
 80064c2:	465b      	mov	r3, fp
 80064c4:	0564      	lsls	r4, r4, #21
 80064c6:	075f      	lsls	r7, r3, #29
 80064c8:	025b      	lsls	r3, r3, #9
 80064ca:	4317      	orrs	r7, r2
 80064cc:	0b1b      	lsrs	r3, r3, #12
 80064ce:	0d62      	lsrs	r2, r4, #21
 80064d0:	e002      	b.n	80064d8 <__aeabi_ddiv+0x11c>
 80064d2:	2300      	movs	r3, #0
 80064d4:	2700      	movs	r7, #0
 80064d6:	4a58      	ldr	r2, [pc, #352]	; (8006638 <__aeabi_ddiv+0x27c>)
 80064d8:	2100      	movs	r1, #0
 80064da:	031b      	lsls	r3, r3, #12
 80064dc:	0b1c      	lsrs	r4, r3, #12
 80064de:	0d0b      	lsrs	r3, r1, #20
 80064e0:	051b      	lsls	r3, r3, #20
 80064e2:	4323      	orrs	r3, r4
 80064e4:	0514      	lsls	r4, r2, #20
 80064e6:	4a5a      	ldr	r2, [pc, #360]	; (8006650 <__aeabi_ddiv+0x294>)
 80064e8:	0038      	movs	r0, r7
 80064ea:	4013      	ands	r3, r2
 80064ec:	431c      	orrs	r4, r3
 80064ee:	4653      	mov	r3, sl
 80064f0:	0064      	lsls	r4, r4, #1
 80064f2:	07db      	lsls	r3, r3, #31
 80064f4:	0864      	lsrs	r4, r4, #1
 80064f6:	431c      	orrs	r4, r3
 80064f8:	0021      	movs	r1, r4
 80064fa:	b005      	add	sp, #20
 80064fc:	bc3c      	pop	{r2, r3, r4, r5}
 80064fe:	4690      	mov	r8, r2
 8006500:	4699      	mov	r9, r3
 8006502:	46a2      	mov	sl, r4
 8006504:	46ab      	mov	fp, r5
 8006506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006508:	2201      	movs	r2, #1
 800650a:	4252      	negs	r2, r2
 800650c:	2301      	movs	r3, #1
 800650e:	1b1b      	subs	r3, r3, r4
 8006510:	2b38      	cmp	r3, #56	; 0x38
 8006512:	dc00      	bgt.n	8006516 <__aeabi_ddiv+0x15a>
 8006514:	e1ad      	b.n	8006872 <__aeabi_ddiv+0x4b6>
 8006516:	2200      	movs	r2, #0
 8006518:	2300      	movs	r3, #0
 800651a:	2700      	movs	r7, #0
 800651c:	e7dc      	b.n	80064d8 <__aeabi_ddiv+0x11c>
 800651e:	465b      	mov	r3, fp
 8006520:	4333      	orrs	r3, r6
 8006522:	4699      	mov	r9, r3
 8006524:	d05e      	beq.n	80065e4 <__aeabi_ddiv+0x228>
 8006526:	2e00      	cmp	r6, #0
 8006528:	d100      	bne.n	800652c <__aeabi_ddiv+0x170>
 800652a:	e18a      	b.n	8006842 <__aeabi_ddiv+0x486>
 800652c:	0030      	movs	r0, r6
 800652e:	f001 fa9d 	bl	8007a6c <__clzsi2>
 8006532:	0003      	movs	r3, r0
 8006534:	3b0b      	subs	r3, #11
 8006536:	2b1c      	cmp	r3, #28
 8006538:	dd00      	ble.n	800653c <__aeabi_ddiv+0x180>
 800653a:	e17b      	b.n	8006834 <__aeabi_ddiv+0x478>
 800653c:	221d      	movs	r2, #29
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	465a      	mov	r2, fp
 8006542:	0001      	movs	r1, r0
 8006544:	40da      	lsrs	r2, r3
 8006546:	3908      	subs	r1, #8
 8006548:	408e      	lsls	r6, r1
 800654a:	0013      	movs	r3, r2
 800654c:	465f      	mov	r7, fp
 800654e:	4333      	orrs	r3, r6
 8006550:	4699      	mov	r9, r3
 8006552:	408f      	lsls	r7, r1
 8006554:	4b3f      	ldr	r3, [pc, #252]	; (8006654 <__aeabi_ddiv+0x298>)
 8006556:	2600      	movs	r6, #0
 8006558:	1a1b      	subs	r3, r3, r0
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	2300      	movs	r3, #0
 800655e:	9302      	str	r3, [sp, #8]
 8006560:	e752      	b.n	8006408 <__aeabi_ddiv+0x4c>
 8006562:	4641      	mov	r1, r8
 8006564:	4653      	mov	r3, sl
 8006566:	430b      	orrs	r3, r1
 8006568:	493b      	ldr	r1, [pc, #236]	; (8006658 <__aeabi_ddiv+0x29c>)
 800656a:	469b      	mov	fp, r3
 800656c:	468c      	mov	ip, r1
 800656e:	9b00      	ldr	r3, [sp, #0]
 8006570:	4463      	add	r3, ip
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	465b      	mov	r3, fp
 8006576:	2b00      	cmp	r3, #0
 8006578:	d13b      	bne.n	80065f2 <__aeabi_ddiv+0x236>
 800657a:	2302      	movs	r3, #2
 800657c:	2200      	movs	r2, #0
 800657e:	431e      	orrs	r6, r3
 8006580:	2102      	movs	r1, #2
 8006582:	e761      	b.n	8006448 <__aeabi_ddiv+0x8c>
 8006584:	4643      	mov	r3, r8
 8006586:	4313      	orrs	r3, r2
 8006588:	469b      	mov	fp, r3
 800658a:	d037      	beq.n	80065fc <__aeabi_ddiv+0x240>
 800658c:	4643      	mov	r3, r8
 800658e:	2b00      	cmp	r3, #0
 8006590:	d100      	bne.n	8006594 <__aeabi_ddiv+0x1d8>
 8006592:	e162      	b.n	800685a <__aeabi_ddiv+0x49e>
 8006594:	4640      	mov	r0, r8
 8006596:	f001 fa69 	bl	8007a6c <__clzsi2>
 800659a:	0003      	movs	r3, r0
 800659c:	3b0b      	subs	r3, #11
 800659e:	2b1c      	cmp	r3, #28
 80065a0:	dd00      	ble.n	80065a4 <__aeabi_ddiv+0x1e8>
 80065a2:	e153      	b.n	800684c <__aeabi_ddiv+0x490>
 80065a4:	0002      	movs	r2, r0
 80065a6:	4641      	mov	r1, r8
 80065a8:	3a08      	subs	r2, #8
 80065aa:	4091      	lsls	r1, r2
 80065ac:	4688      	mov	r8, r1
 80065ae:	211d      	movs	r1, #29
 80065b0:	1acb      	subs	r3, r1, r3
 80065b2:	4651      	mov	r1, sl
 80065b4:	40d9      	lsrs	r1, r3
 80065b6:	000b      	movs	r3, r1
 80065b8:	4641      	mov	r1, r8
 80065ba:	430b      	orrs	r3, r1
 80065bc:	469b      	mov	fp, r3
 80065be:	4653      	mov	r3, sl
 80065c0:	4093      	lsls	r3, r2
 80065c2:	001a      	movs	r2, r3
 80065c4:	9b00      	ldr	r3, [sp, #0]
 80065c6:	4925      	ldr	r1, [pc, #148]	; (800665c <__aeabi_ddiv+0x2a0>)
 80065c8:	469c      	mov	ip, r3
 80065ca:	4460      	add	r0, ip
 80065cc:	0003      	movs	r3, r0
 80065ce:	468c      	mov	ip, r1
 80065d0:	4463      	add	r3, ip
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	2100      	movs	r1, #0
 80065d6:	e737      	b.n	8006448 <__aeabi_ddiv+0x8c>
 80065d8:	2303      	movs	r3, #3
 80065da:	46b1      	mov	r9, r6
 80065dc:	9000      	str	r0, [sp, #0]
 80065de:	260c      	movs	r6, #12
 80065e0:	9302      	str	r3, [sp, #8]
 80065e2:	e711      	b.n	8006408 <__aeabi_ddiv+0x4c>
 80065e4:	2300      	movs	r3, #0
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	3301      	adds	r3, #1
 80065ea:	2604      	movs	r6, #4
 80065ec:	2700      	movs	r7, #0
 80065ee:	9302      	str	r3, [sp, #8]
 80065f0:	e70a      	b.n	8006408 <__aeabi_ddiv+0x4c>
 80065f2:	2303      	movs	r3, #3
 80065f4:	46c3      	mov	fp, r8
 80065f6:	431e      	orrs	r6, r3
 80065f8:	2103      	movs	r1, #3
 80065fa:	e725      	b.n	8006448 <__aeabi_ddiv+0x8c>
 80065fc:	3301      	adds	r3, #1
 80065fe:	431e      	orrs	r6, r3
 8006600:	2200      	movs	r2, #0
 8006602:	2101      	movs	r1, #1
 8006604:	e720      	b.n	8006448 <__aeabi_ddiv+0x8c>
 8006606:	2300      	movs	r3, #0
 8006608:	469a      	mov	sl, r3
 800660a:	2380      	movs	r3, #128	; 0x80
 800660c:	2700      	movs	r7, #0
 800660e:	031b      	lsls	r3, r3, #12
 8006610:	4a09      	ldr	r2, [pc, #36]	; (8006638 <__aeabi_ddiv+0x27c>)
 8006612:	e761      	b.n	80064d8 <__aeabi_ddiv+0x11c>
 8006614:	2380      	movs	r3, #128	; 0x80
 8006616:	4649      	mov	r1, r9
 8006618:	031b      	lsls	r3, r3, #12
 800661a:	4219      	tst	r1, r3
 800661c:	d100      	bne.n	8006620 <__aeabi_ddiv+0x264>
 800661e:	e0e2      	b.n	80067e6 <__aeabi_ddiv+0x42a>
 8006620:	4659      	mov	r1, fp
 8006622:	4219      	tst	r1, r3
 8006624:	d000      	beq.n	8006628 <__aeabi_ddiv+0x26c>
 8006626:	e0de      	b.n	80067e6 <__aeabi_ddiv+0x42a>
 8006628:	430b      	orrs	r3, r1
 800662a:	031b      	lsls	r3, r3, #12
 800662c:	0017      	movs	r7, r2
 800662e:	0b1b      	lsrs	r3, r3, #12
 8006630:	46a2      	mov	sl, r4
 8006632:	4a01      	ldr	r2, [pc, #4]	; (8006638 <__aeabi_ddiv+0x27c>)
 8006634:	e750      	b.n	80064d8 <__aeabi_ddiv+0x11c>
 8006636:	46c0      	nop			; (mov r8, r8)
 8006638:	000007ff 	.word	0x000007ff
 800663c:	fffffc01 	.word	0xfffffc01
 8006640:	0800f7a8 	.word	0x0800f7a8
 8006644:	000003ff 	.word	0x000003ff
 8006648:	feffffff 	.word	0xfeffffff
 800664c:	000007fe 	.word	0x000007fe
 8006650:	800fffff 	.word	0x800fffff
 8006654:	fffffc0d 	.word	0xfffffc0d
 8006658:	fffff801 	.word	0xfffff801
 800665c:	000003f3 	.word	0x000003f3
 8006660:	45d9      	cmp	r9, fp
 8006662:	d900      	bls.n	8006666 <__aeabi_ddiv+0x2aa>
 8006664:	e0cb      	b.n	80067fe <__aeabi_ddiv+0x442>
 8006666:	d100      	bne.n	800666a <__aeabi_ddiv+0x2ae>
 8006668:	e0c6      	b.n	80067f8 <__aeabi_ddiv+0x43c>
 800666a:	003c      	movs	r4, r7
 800666c:	4648      	mov	r0, r9
 800666e:	2700      	movs	r7, #0
 8006670:	9b00      	ldr	r3, [sp, #0]
 8006672:	3b01      	subs	r3, #1
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	465b      	mov	r3, fp
 8006678:	0e16      	lsrs	r6, r2, #24
 800667a:	021b      	lsls	r3, r3, #8
 800667c:	431e      	orrs	r6, r3
 800667e:	0213      	lsls	r3, r2, #8
 8006680:	4698      	mov	r8, r3
 8006682:	0433      	lsls	r3, r6, #16
 8006684:	0c1b      	lsrs	r3, r3, #16
 8006686:	4699      	mov	r9, r3
 8006688:	0c31      	lsrs	r1, r6, #16
 800668a:	9101      	str	r1, [sp, #4]
 800668c:	f7fe fde2 	bl	8005254 <__aeabi_uidivmod>
 8006690:	464a      	mov	r2, r9
 8006692:	4342      	muls	r2, r0
 8006694:	040b      	lsls	r3, r1, #16
 8006696:	0c21      	lsrs	r1, r4, #16
 8006698:	0005      	movs	r5, r0
 800669a:	4319      	orrs	r1, r3
 800669c:	428a      	cmp	r2, r1
 800669e:	d907      	bls.n	80066b0 <__aeabi_ddiv+0x2f4>
 80066a0:	1989      	adds	r1, r1, r6
 80066a2:	3d01      	subs	r5, #1
 80066a4:	428e      	cmp	r6, r1
 80066a6:	d803      	bhi.n	80066b0 <__aeabi_ddiv+0x2f4>
 80066a8:	428a      	cmp	r2, r1
 80066aa:	d901      	bls.n	80066b0 <__aeabi_ddiv+0x2f4>
 80066ac:	1e85      	subs	r5, r0, #2
 80066ae:	1989      	adds	r1, r1, r6
 80066b0:	1a88      	subs	r0, r1, r2
 80066b2:	9901      	ldr	r1, [sp, #4]
 80066b4:	f7fe fdce 	bl	8005254 <__aeabi_uidivmod>
 80066b8:	0409      	lsls	r1, r1, #16
 80066ba:	468c      	mov	ip, r1
 80066bc:	464a      	mov	r2, r9
 80066be:	0421      	lsls	r1, r4, #16
 80066c0:	4664      	mov	r4, ip
 80066c2:	4342      	muls	r2, r0
 80066c4:	0c09      	lsrs	r1, r1, #16
 80066c6:	0003      	movs	r3, r0
 80066c8:	4321      	orrs	r1, r4
 80066ca:	428a      	cmp	r2, r1
 80066cc:	d904      	bls.n	80066d8 <__aeabi_ddiv+0x31c>
 80066ce:	1989      	adds	r1, r1, r6
 80066d0:	3b01      	subs	r3, #1
 80066d2:	428e      	cmp	r6, r1
 80066d4:	d800      	bhi.n	80066d8 <__aeabi_ddiv+0x31c>
 80066d6:	e0f1      	b.n	80068bc <__aeabi_ddiv+0x500>
 80066d8:	042d      	lsls	r5, r5, #16
 80066da:	431d      	orrs	r5, r3
 80066dc:	46ab      	mov	fp, r5
 80066de:	4643      	mov	r3, r8
 80066e0:	1a89      	subs	r1, r1, r2
 80066e2:	4642      	mov	r2, r8
 80066e4:	0c28      	lsrs	r0, r5, #16
 80066e6:	0412      	lsls	r2, r2, #16
 80066e8:	0c1d      	lsrs	r5, r3, #16
 80066ea:	465b      	mov	r3, fp
 80066ec:	0c14      	lsrs	r4, r2, #16
 80066ee:	0022      	movs	r2, r4
 80066f0:	041b      	lsls	r3, r3, #16
 80066f2:	0c1b      	lsrs	r3, r3, #16
 80066f4:	435a      	muls	r2, r3
 80066f6:	9403      	str	r4, [sp, #12]
 80066f8:	436b      	muls	r3, r5
 80066fa:	4344      	muls	r4, r0
 80066fc:	9502      	str	r5, [sp, #8]
 80066fe:	4368      	muls	r0, r5
 8006700:	191b      	adds	r3, r3, r4
 8006702:	0c15      	lsrs	r5, r2, #16
 8006704:	18eb      	adds	r3, r5, r3
 8006706:	429c      	cmp	r4, r3
 8006708:	d903      	bls.n	8006712 <__aeabi_ddiv+0x356>
 800670a:	2480      	movs	r4, #128	; 0x80
 800670c:	0264      	lsls	r4, r4, #9
 800670e:	46a4      	mov	ip, r4
 8006710:	4460      	add	r0, ip
 8006712:	0c1c      	lsrs	r4, r3, #16
 8006714:	0415      	lsls	r5, r2, #16
 8006716:	041b      	lsls	r3, r3, #16
 8006718:	0c2d      	lsrs	r5, r5, #16
 800671a:	1820      	adds	r0, r4, r0
 800671c:	195d      	adds	r5, r3, r5
 800671e:	4281      	cmp	r1, r0
 8006720:	d377      	bcc.n	8006812 <__aeabi_ddiv+0x456>
 8006722:	d073      	beq.n	800680c <__aeabi_ddiv+0x450>
 8006724:	1a0c      	subs	r4, r1, r0
 8006726:	4aa2      	ldr	r2, [pc, #648]	; (80069b0 <__aeabi_ddiv+0x5f4>)
 8006728:	1b7d      	subs	r5, r7, r5
 800672a:	42af      	cmp	r7, r5
 800672c:	41bf      	sbcs	r7, r7
 800672e:	4694      	mov	ip, r2
 8006730:	9b00      	ldr	r3, [sp, #0]
 8006732:	427f      	negs	r7, r7
 8006734:	4463      	add	r3, ip
 8006736:	1be0      	subs	r0, r4, r7
 8006738:	001c      	movs	r4, r3
 800673a:	4286      	cmp	r6, r0
 800673c:	d100      	bne.n	8006740 <__aeabi_ddiv+0x384>
 800673e:	e0db      	b.n	80068f8 <__aeabi_ddiv+0x53c>
 8006740:	9901      	ldr	r1, [sp, #4]
 8006742:	f7fe fd87 	bl	8005254 <__aeabi_uidivmod>
 8006746:	464a      	mov	r2, r9
 8006748:	4342      	muls	r2, r0
 800674a:	040b      	lsls	r3, r1, #16
 800674c:	0c29      	lsrs	r1, r5, #16
 800674e:	0007      	movs	r7, r0
 8006750:	4319      	orrs	r1, r3
 8006752:	428a      	cmp	r2, r1
 8006754:	d907      	bls.n	8006766 <__aeabi_ddiv+0x3aa>
 8006756:	1989      	adds	r1, r1, r6
 8006758:	3f01      	subs	r7, #1
 800675a:	428e      	cmp	r6, r1
 800675c:	d803      	bhi.n	8006766 <__aeabi_ddiv+0x3aa>
 800675e:	428a      	cmp	r2, r1
 8006760:	d901      	bls.n	8006766 <__aeabi_ddiv+0x3aa>
 8006762:	1e87      	subs	r7, r0, #2
 8006764:	1989      	adds	r1, r1, r6
 8006766:	1a88      	subs	r0, r1, r2
 8006768:	9901      	ldr	r1, [sp, #4]
 800676a:	f7fe fd73 	bl	8005254 <__aeabi_uidivmod>
 800676e:	0409      	lsls	r1, r1, #16
 8006770:	464a      	mov	r2, r9
 8006772:	4689      	mov	r9, r1
 8006774:	0429      	lsls	r1, r5, #16
 8006776:	464d      	mov	r5, r9
 8006778:	4342      	muls	r2, r0
 800677a:	0c09      	lsrs	r1, r1, #16
 800677c:	0003      	movs	r3, r0
 800677e:	4329      	orrs	r1, r5
 8006780:	428a      	cmp	r2, r1
 8006782:	d907      	bls.n	8006794 <__aeabi_ddiv+0x3d8>
 8006784:	1989      	adds	r1, r1, r6
 8006786:	3b01      	subs	r3, #1
 8006788:	428e      	cmp	r6, r1
 800678a:	d803      	bhi.n	8006794 <__aeabi_ddiv+0x3d8>
 800678c:	428a      	cmp	r2, r1
 800678e:	d901      	bls.n	8006794 <__aeabi_ddiv+0x3d8>
 8006790:	1e83      	subs	r3, r0, #2
 8006792:	1989      	adds	r1, r1, r6
 8006794:	043f      	lsls	r7, r7, #16
 8006796:	1a89      	subs	r1, r1, r2
 8006798:	003a      	movs	r2, r7
 800679a:	9f03      	ldr	r7, [sp, #12]
 800679c:	431a      	orrs	r2, r3
 800679e:	0038      	movs	r0, r7
 80067a0:	0413      	lsls	r3, r2, #16
 80067a2:	0c1b      	lsrs	r3, r3, #16
 80067a4:	4358      	muls	r0, r3
 80067a6:	4681      	mov	r9, r0
 80067a8:	9802      	ldr	r0, [sp, #8]
 80067aa:	0c15      	lsrs	r5, r2, #16
 80067ac:	436f      	muls	r7, r5
 80067ae:	4343      	muls	r3, r0
 80067b0:	4345      	muls	r5, r0
 80067b2:	4648      	mov	r0, r9
 80067b4:	0c00      	lsrs	r0, r0, #16
 80067b6:	4684      	mov	ip, r0
 80067b8:	19db      	adds	r3, r3, r7
 80067ba:	4463      	add	r3, ip
 80067bc:	429f      	cmp	r7, r3
 80067be:	d903      	bls.n	80067c8 <__aeabi_ddiv+0x40c>
 80067c0:	2080      	movs	r0, #128	; 0x80
 80067c2:	0240      	lsls	r0, r0, #9
 80067c4:	4684      	mov	ip, r0
 80067c6:	4465      	add	r5, ip
 80067c8:	4648      	mov	r0, r9
 80067ca:	0c1f      	lsrs	r7, r3, #16
 80067cc:	0400      	lsls	r0, r0, #16
 80067ce:	041b      	lsls	r3, r3, #16
 80067d0:	0c00      	lsrs	r0, r0, #16
 80067d2:	197d      	adds	r5, r7, r5
 80067d4:	1818      	adds	r0, r3, r0
 80067d6:	42a9      	cmp	r1, r5
 80067d8:	d200      	bcs.n	80067dc <__aeabi_ddiv+0x420>
 80067da:	e084      	b.n	80068e6 <__aeabi_ddiv+0x52a>
 80067dc:	d100      	bne.n	80067e0 <__aeabi_ddiv+0x424>
 80067de:	e07f      	b.n	80068e0 <__aeabi_ddiv+0x524>
 80067e0:	2301      	movs	r3, #1
 80067e2:	431a      	orrs	r2, r3
 80067e4:	e657      	b.n	8006496 <__aeabi_ddiv+0xda>
 80067e6:	2380      	movs	r3, #128	; 0x80
 80067e8:	464a      	mov	r2, r9
 80067ea:	031b      	lsls	r3, r3, #12
 80067ec:	4313      	orrs	r3, r2
 80067ee:	031b      	lsls	r3, r3, #12
 80067f0:	0b1b      	lsrs	r3, r3, #12
 80067f2:	46aa      	mov	sl, r5
 80067f4:	4a6f      	ldr	r2, [pc, #444]	; (80069b4 <__aeabi_ddiv+0x5f8>)
 80067f6:	e66f      	b.n	80064d8 <__aeabi_ddiv+0x11c>
 80067f8:	42ba      	cmp	r2, r7
 80067fa:	d900      	bls.n	80067fe <__aeabi_ddiv+0x442>
 80067fc:	e735      	b.n	800666a <__aeabi_ddiv+0x2ae>
 80067fe:	464b      	mov	r3, r9
 8006800:	07dc      	lsls	r4, r3, #31
 8006802:	0858      	lsrs	r0, r3, #1
 8006804:	087b      	lsrs	r3, r7, #1
 8006806:	431c      	orrs	r4, r3
 8006808:	07ff      	lsls	r7, r7, #31
 800680a:	e734      	b.n	8006676 <__aeabi_ddiv+0x2ba>
 800680c:	2400      	movs	r4, #0
 800680e:	42af      	cmp	r7, r5
 8006810:	d289      	bcs.n	8006726 <__aeabi_ddiv+0x36a>
 8006812:	4447      	add	r7, r8
 8006814:	4547      	cmp	r7, r8
 8006816:	41a4      	sbcs	r4, r4
 8006818:	465b      	mov	r3, fp
 800681a:	4264      	negs	r4, r4
 800681c:	19a4      	adds	r4, r4, r6
 800681e:	1864      	adds	r4, r4, r1
 8006820:	3b01      	subs	r3, #1
 8006822:	42a6      	cmp	r6, r4
 8006824:	d21e      	bcs.n	8006864 <__aeabi_ddiv+0x4a8>
 8006826:	42a0      	cmp	r0, r4
 8006828:	d86d      	bhi.n	8006906 <__aeabi_ddiv+0x54a>
 800682a:	d100      	bne.n	800682e <__aeabi_ddiv+0x472>
 800682c:	e0b6      	b.n	800699c <__aeabi_ddiv+0x5e0>
 800682e:	1a24      	subs	r4, r4, r0
 8006830:	469b      	mov	fp, r3
 8006832:	e778      	b.n	8006726 <__aeabi_ddiv+0x36a>
 8006834:	0003      	movs	r3, r0
 8006836:	465a      	mov	r2, fp
 8006838:	3b28      	subs	r3, #40	; 0x28
 800683a:	409a      	lsls	r2, r3
 800683c:	2700      	movs	r7, #0
 800683e:	4691      	mov	r9, r2
 8006840:	e688      	b.n	8006554 <__aeabi_ddiv+0x198>
 8006842:	4658      	mov	r0, fp
 8006844:	f001 f912 	bl	8007a6c <__clzsi2>
 8006848:	3020      	adds	r0, #32
 800684a:	e672      	b.n	8006532 <__aeabi_ddiv+0x176>
 800684c:	0003      	movs	r3, r0
 800684e:	4652      	mov	r2, sl
 8006850:	3b28      	subs	r3, #40	; 0x28
 8006852:	409a      	lsls	r2, r3
 8006854:	4693      	mov	fp, r2
 8006856:	2200      	movs	r2, #0
 8006858:	e6b4      	b.n	80065c4 <__aeabi_ddiv+0x208>
 800685a:	4650      	mov	r0, sl
 800685c:	f001 f906 	bl	8007a6c <__clzsi2>
 8006860:	3020      	adds	r0, #32
 8006862:	e69a      	b.n	800659a <__aeabi_ddiv+0x1de>
 8006864:	42a6      	cmp	r6, r4
 8006866:	d1e2      	bne.n	800682e <__aeabi_ddiv+0x472>
 8006868:	45b8      	cmp	r8, r7
 800686a:	d9dc      	bls.n	8006826 <__aeabi_ddiv+0x46a>
 800686c:	1a34      	subs	r4, r6, r0
 800686e:	469b      	mov	fp, r3
 8006870:	e759      	b.n	8006726 <__aeabi_ddiv+0x36a>
 8006872:	2b1f      	cmp	r3, #31
 8006874:	dc65      	bgt.n	8006942 <__aeabi_ddiv+0x586>
 8006876:	4c50      	ldr	r4, [pc, #320]	; (80069b8 <__aeabi_ddiv+0x5fc>)
 8006878:	9900      	ldr	r1, [sp, #0]
 800687a:	46a4      	mov	ip, r4
 800687c:	465c      	mov	r4, fp
 800687e:	4461      	add	r1, ip
 8006880:	0008      	movs	r0, r1
 8006882:	408c      	lsls	r4, r1
 8006884:	0011      	movs	r1, r2
 8006886:	4082      	lsls	r2, r0
 8006888:	40d9      	lsrs	r1, r3
 800688a:	1e50      	subs	r0, r2, #1
 800688c:	4182      	sbcs	r2, r0
 800688e:	430c      	orrs	r4, r1
 8006890:	4314      	orrs	r4, r2
 8006892:	465a      	mov	r2, fp
 8006894:	40da      	lsrs	r2, r3
 8006896:	0013      	movs	r3, r2
 8006898:	0762      	lsls	r2, r4, #29
 800689a:	d009      	beq.n	80068b0 <__aeabi_ddiv+0x4f4>
 800689c:	220f      	movs	r2, #15
 800689e:	4022      	ands	r2, r4
 80068a0:	2a04      	cmp	r2, #4
 80068a2:	d005      	beq.n	80068b0 <__aeabi_ddiv+0x4f4>
 80068a4:	0022      	movs	r2, r4
 80068a6:	1d14      	adds	r4, r2, #4
 80068a8:	4294      	cmp	r4, r2
 80068aa:	4189      	sbcs	r1, r1
 80068ac:	4249      	negs	r1, r1
 80068ae:	185b      	adds	r3, r3, r1
 80068b0:	021a      	lsls	r2, r3, #8
 80068b2:	d562      	bpl.n	800697a <__aeabi_ddiv+0x5be>
 80068b4:	2201      	movs	r2, #1
 80068b6:	2300      	movs	r3, #0
 80068b8:	2700      	movs	r7, #0
 80068ba:	e60d      	b.n	80064d8 <__aeabi_ddiv+0x11c>
 80068bc:	428a      	cmp	r2, r1
 80068be:	d800      	bhi.n	80068c2 <__aeabi_ddiv+0x506>
 80068c0:	e70a      	b.n	80066d8 <__aeabi_ddiv+0x31c>
 80068c2:	1e83      	subs	r3, r0, #2
 80068c4:	1989      	adds	r1, r1, r6
 80068c6:	e707      	b.n	80066d8 <__aeabi_ddiv+0x31c>
 80068c8:	230f      	movs	r3, #15
 80068ca:	4013      	ands	r3, r2
 80068cc:	2b04      	cmp	r3, #4
 80068ce:	d100      	bne.n	80068d2 <__aeabi_ddiv+0x516>
 80068d0:	e5e6      	b.n	80064a0 <__aeabi_ddiv+0xe4>
 80068d2:	1d17      	adds	r7, r2, #4
 80068d4:	4297      	cmp	r7, r2
 80068d6:	4192      	sbcs	r2, r2
 80068d8:	4253      	negs	r3, r2
 80068da:	449b      	add	fp, r3
 80068dc:	08fa      	lsrs	r2, r7, #3
 80068de:	e5e0      	b.n	80064a2 <__aeabi_ddiv+0xe6>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d100      	bne.n	80068e6 <__aeabi_ddiv+0x52a>
 80068e4:	e5d7      	b.n	8006496 <__aeabi_ddiv+0xda>
 80068e6:	1871      	adds	r1, r6, r1
 80068e8:	1e53      	subs	r3, r2, #1
 80068ea:	42b1      	cmp	r1, r6
 80068ec:	d327      	bcc.n	800693e <__aeabi_ddiv+0x582>
 80068ee:	42a9      	cmp	r1, r5
 80068f0:	d315      	bcc.n	800691e <__aeabi_ddiv+0x562>
 80068f2:	d058      	beq.n	80069a6 <__aeabi_ddiv+0x5ea>
 80068f4:	001a      	movs	r2, r3
 80068f6:	e773      	b.n	80067e0 <__aeabi_ddiv+0x424>
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	dc00      	bgt.n	80068fe <__aeabi_ddiv+0x542>
 80068fc:	e604      	b.n	8006508 <__aeabi_ddiv+0x14c>
 80068fe:	2301      	movs	r3, #1
 8006900:	2200      	movs	r2, #0
 8006902:	449b      	add	fp, r3
 8006904:	e5cd      	b.n	80064a2 <__aeabi_ddiv+0xe6>
 8006906:	2302      	movs	r3, #2
 8006908:	4447      	add	r7, r8
 800690a:	4547      	cmp	r7, r8
 800690c:	4189      	sbcs	r1, r1
 800690e:	425b      	negs	r3, r3
 8006910:	469c      	mov	ip, r3
 8006912:	4249      	negs	r1, r1
 8006914:	1989      	adds	r1, r1, r6
 8006916:	190c      	adds	r4, r1, r4
 8006918:	44e3      	add	fp, ip
 800691a:	1a24      	subs	r4, r4, r0
 800691c:	e703      	b.n	8006726 <__aeabi_ddiv+0x36a>
 800691e:	4643      	mov	r3, r8
 8006920:	005f      	lsls	r7, r3, #1
 8006922:	4547      	cmp	r7, r8
 8006924:	419b      	sbcs	r3, r3
 8006926:	46b8      	mov	r8, r7
 8006928:	425b      	negs	r3, r3
 800692a:	199e      	adds	r6, r3, r6
 800692c:	3a02      	subs	r2, #2
 800692e:	1989      	adds	r1, r1, r6
 8006930:	42a9      	cmp	r1, r5
 8006932:	d000      	beq.n	8006936 <__aeabi_ddiv+0x57a>
 8006934:	e754      	b.n	80067e0 <__aeabi_ddiv+0x424>
 8006936:	4540      	cmp	r0, r8
 8006938:	d000      	beq.n	800693c <__aeabi_ddiv+0x580>
 800693a:	e751      	b.n	80067e0 <__aeabi_ddiv+0x424>
 800693c:	e5ab      	b.n	8006496 <__aeabi_ddiv+0xda>
 800693e:	001a      	movs	r2, r3
 8006940:	e7f6      	b.n	8006930 <__aeabi_ddiv+0x574>
 8006942:	211f      	movs	r1, #31
 8006944:	465f      	mov	r7, fp
 8006946:	4249      	negs	r1, r1
 8006948:	1b0c      	subs	r4, r1, r4
 800694a:	40e7      	lsrs	r7, r4
 800694c:	2b20      	cmp	r3, #32
 800694e:	d007      	beq.n	8006960 <__aeabi_ddiv+0x5a4>
 8006950:	491a      	ldr	r1, [pc, #104]	; (80069bc <__aeabi_ddiv+0x600>)
 8006952:	9b00      	ldr	r3, [sp, #0]
 8006954:	468c      	mov	ip, r1
 8006956:	4463      	add	r3, ip
 8006958:	0018      	movs	r0, r3
 800695a:	465b      	mov	r3, fp
 800695c:	4083      	lsls	r3, r0
 800695e:	431a      	orrs	r2, r3
 8006960:	1e50      	subs	r0, r2, #1
 8006962:	4182      	sbcs	r2, r0
 8006964:	433a      	orrs	r2, r7
 8006966:	2707      	movs	r7, #7
 8006968:	2300      	movs	r3, #0
 800696a:	4017      	ands	r7, r2
 800696c:	d009      	beq.n	8006982 <__aeabi_ddiv+0x5c6>
 800696e:	210f      	movs	r1, #15
 8006970:	2300      	movs	r3, #0
 8006972:	4011      	ands	r1, r2
 8006974:	0014      	movs	r4, r2
 8006976:	2904      	cmp	r1, #4
 8006978:	d195      	bne.n	80068a6 <__aeabi_ddiv+0x4ea>
 800697a:	0022      	movs	r2, r4
 800697c:	075f      	lsls	r7, r3, #29
 800697e:	025b      	lsls	r3, r3, #9
 8006980:	0b1b      	lsrs	r3, r3, #12
 8006982:	08d2      	lsrs	r2, r2, #3
 8006984:	4317      	orrs	r7, r2
 8006986:	2200      	movs	r2, #0
 8006988:	e5a6      	b.n	80064d8 <__aeabi_ddiv+0x11c>
 800698a:	2380      	movs	r3, #128	; 0x80
 800698c:	4659      	mov	r1, fp
 800698e:	031b      	lsls	r3, r3, #12
 8006990:	430b      	orrs	r3, r1
 8006992:	031b      	lsls	r3, r3, #12
 8006994:	0017      	movs	r7, r2
 8006996:	0b1b      	lsrs	r3, r3, #12
 8006998:	4a06      	ldr	r2, [pc, #24]	; (80069b4 <__aeabi_ddiv+0x5f8>)
 800699a:	e59d      	b.n	80064d8 <__aeabi_ddiv+0x11c>
 800699c:	42bd      	cmp	r5, r7
 800699e:	d8b2      	bhi.n	8006906 <__aeabi_ddiv+0x54a>
 80069a0:	469b      	mov	fp, r3
 80069a2:	2400      	movs	r4, #0
 80069a4:	e6bf      	b.n	8006726 <__aeabi_ddiv+0x36a>
 80069a6:	4580      	cmp	r8, r0
 80069a8:	d3b9      	bcc.n	800691e <__aeabi_ddiv+0x562>
 80069aa:	001a      	movs	r2, r3
 80069ac:	e7c3      	b.n	8006936 <__aeabi_ddiv+0x57a>
 80069ae:	46c0      	nop			; (mov r8, r8)
 80069b0:	000003ff 	.word	0x000003ff
 80069b4:	000007ff 	.word	0x000007ff
 80069b8:	0000041e 	.word	0x0000041e
 80069bc:	0000043e 	.word	0x0000043e

080069c0 <__eqdf2>:
 80069c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069c2:	464f      	mov	r7, r9
 80069c4:	4646      	mov	r6, r8
 80069c6:	46d6      	mov	lr, sl
 80069c8:	4684      	mov	ip, r0
 80069ca:	b5c0      	push	{r6, r7, lr}
 80069cc:	4680      	mov	r8, r0
 80069ce:	4e19      	ldr	r6, [pc, #100]	; (8006a34 <__eqdf2+0x74>)
 80069d0:	0318      	lsls	r0, r3, #12
 80069d2:	030f      	lsls	r7, r1, #12
 80069d4:	004d      	lsls	r5, r1, #1
 80069d6:	0b00      	lsrs	r0, r0, #12
 80069d8:	005c      	lsls	r4, r3, #1
 80069da:	4682      	mov	sl, r0
 80069dc:	0b3f      	lsrs	r7, r7, #12
 80069de:	0d6d      	lsrs	r5, r5, #21
 80069e0:	0fc9      	lsrs	r1, r1, #31
 80069e2:	4691      	mov	r9, r2
 80069e4:	0d64      	lsrs	r4, r4, #21
 80069e6:	0fdb      	lsrs	r3, r3, #31
 80069e8:	2001      	movs	r0, #1
 80069ea:	42b5      	cmp	r5, r6
 80069ec:	d00a      	beq.n	8006a04 <__eqdf2+0x44>
 80069ee:	42b4      	cmp	r4, r6
 80069f0:	d003      	beq.n	80069fa <__eqdf2+0x3a>
 80069f2:	42a5      	cmp	r5, r4
 80069f4:	d101      	bne.n	80069fa <__eqdf2+0x3a>
 80069f6:	4557      	cmp	r7, sl
 80069f8:	d00c      	beq.n	8006a14 <__eqdf2+0x54>
 80069fa:	bc1c      	pop	{r2, r3, r4}
 80069fc:	4690      	mov	r8, r2
 80069fe:	4699      	mov	r9, r3
 8006a00:	46a2      	mov	sl, r4
 8006a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a04:	4666      	mov	r6, ip
 8006a06:	433e      	orrs	r6, r7
 8006a08:	d1f7      	bne.n	80069fa <__eqdf2+0x3a>
 8006a0a:	42ac      	cmp	r4, r5
 8006a0c:	d1f5      	bne.n	80069fa <__eqdf2+0x3a>
 8006a0e:	4654      	mov	r4, sl
 8006a10:	4314      	orrs	r4, r2
 8006a12:	d1f2      	bne.n	80069fa <__eqdf2+0x3a>
 8006a14:	2001      	movs	r0, #1
 8006a16:	45c8      	cmp	r8, r9
 8006a18:	d1ef      	bne.n	80069fa <__eqdf2+0x3a>
 8006a1a:	4299      	cmp	r1, r3
 8006a1c:	d007      	beq.n	8006a2e <__eqdf2+0x6e>
 8006a1e:	2d00      	cmp	r5, #0
 8006a20:	d1eb      	bne.n	80069fa <__eqdf2+0x3a>
 8006a22:	4663      	mov	r3, ip
 8006a24:	431f      	orrs	r7, r3
 8006a26:	0038      	movs	r0, r7
 8006a28:	1e47      	subs	r7, r0, #1
 8006a2a:	41b8      	sbcs	r0, r7
 8006a2c:	e7e5      	b.n	80069fa <__eqdf2+0x3a>
 8006a2e:	2000      	movs	r0, #0
 8006a30:	e7e3      	b.n	80069fa <__eqdf2+0x3a>
 8006a32:	46c0      	nop			; (mov r8, r8)
 8006a34:	000007ff 	.word	0x000007ff

08006a38 <__gedf2>:
 8006a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a3a:	464f      	mov	r7, r9
 8006a3c:	4646      	mov	r6, r8
 8006a3e:	46d6      	mov	lr, sl
 8006a40:	004d      	lsls	r5, r1, #1
 8006a42:	b5c0      	push	{r6, r7, lr}
 8006a44:	030e      	lsls	r6, r1, #12
 8006a46:	0fc9      	lsrs	r1, r1, #31
 8006a48:	468a      	mov	sl, r1
 8006a4a:	492c      	ldr	r1, [pc, #176]	; (8006afc <__gedf2+0xc4>)
 8006a4c:	031f      	lsls	r7, r3, #12
 8006a4e:	005c      	lsls	r4, r3, #1
 8006a50:	4680      	mov	r8, r0
 8006a52:	0b36      	lsrs	r6, r6, #12
 8006a54:	0d6d      	lsrs	r5, r5, #21
 8006a56:	4691      	mov	r9, r2
 8006a58:	0b3f      	lsrs	r7, r7, #12
 8006a5a:	0d64      	lsrs	r4, r4, #21
 8006a5c:	0fdb      	lsrs	r3, r3, #31
 8006a5e:	428d      	cmp	r5, r1
 8006a60:	d01e      	beq.n	8006aa0 <__gedf2+0x68>
 8006a62:	428c      	cmp	r4, r1
 8006a64:	d016      	beq.n	8006a94 <__gedf2+0x5c>
 8006a66:	2d00      	cmp	r5, #0
 8006a68:	d11e      	bne.n	8006aa8 <__gedf2+0x70>
 8006a6a:	4330      	orrs	r0, r6
 8006a6c:	4684      	mov	ip, r0
 8006a6e:	2c00      	cmp	r4, #0
 8006a70:	d101      	bne.n	8006a76 <__gedf2+0x3e>
 8006a72:	433a      	orrs	r2, r7
 8006a74:	d023      	beq.n	8006abe <__gedf2+0x86>
 8006a76:	4662      	mov	r2, ip
 8006a78:	2a00      	cmp	r2, #0
 8006a7a:	d01a      	beq.n	8006ab2 <__gedf2+0x7a>
 8006a7c:	459a      	cmp	sl, r3
 8006a7e:	d029      	beq.n	8006ad4 <__gedf2+0x9c>
 8006a80:	4651      	mov	r1, sl
 8006a82:	2002      	movs	r0, #2
 8006a84:	3901      	subs	r1, #1
 8006a86:	4008      	ands	r0, r1
 8006a88:	3801      	subs	r0, #1
 8006a8a:	bc1c      	pop	{r2, r3, r4}
 8006a8c:	4690      	mov	r8, r2
 8006a8e:	4699      	mov	r9, r3
 8006a90:	46a2      	mov	sl, r4
 8006a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a94:	0039      	movs	r1, r7
 8006a96:	4311      	orrs	r1, r2
 8006a98:	d0e5      	beq.n	8006a66 <__gedf2+0x2e>
 8006a9a:	2002      	movs	r0, #2
 8006a9c:	4240      	negs	r0, r0
 8006a9e:	e7f4      	b.n	8006a8a <__gedf2+0x52>
 8006aa0:	4330      	orrs	r0, r6
 8006aa2:	d1fa      	bne.n	8006a9a <__gedf2+0x62>
 8006aa4:	42ac      	cmp	r4, r5
 8006aa6:	d00f      	beq.n	8006ac8 <__gedf2+0x90>
 8006aa8:	2c00      	cmp	r4, #0
 8006aaa:	d10f      	bne.n	8006acc <__gedf2+0x94>
 8006aac:	433a      	orrs	r2, r7
 8006aae:	d0e7      	beq.n	8006a80 <__gedf2+0x48>
 8006ab0:	e00c      	b.n	8006acc <__gedf2+0x94>
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	4393      	bics	r3, r2
 8006ab8:	0018      	movs	r0, r3
 8006aba:	3001      	adds	r0, #1
 8006abc:	e7e5      	b.n	8006a8a <__gedf2+0x52>
 8006abe:	4663      	mov	r3, ip
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d0e1      	beq.n	8006a8a <__gedf2+0x52>
 8006ac6:	e7db      	b.n	8006a80 <__gedf2+0x48>
 8006ac8:	433a      	orrs	r2, r7
 8006aca:	d1e6      	bne.n	8006a9a <__gedf2+0x62>
 8006acc:	459a      	cmp	sl, r3
 8006ace:	d1d7      	bne.n	8006a80 <__gedf2+0x48>
 8006ad0:	42a5      	cmp	r5, r4
 8006ad2:	dcd5      	bgt.n	8006a80 <__gedf2+0x48>
 8006ad4:	42a5      	cmp	r5, r4
 8006ad6:	db05      	blt.n	8006ae4 <__gedf2+0xac>
 8006ad8:	42be      	cmp	r6, r7
 8006ada:	d8d1      	bhi.n	8006a80 <__gedf2+0x48>
 8006adc:	d008      	beq.n	8006af0 <__gedf2+0xb8>
 8006ade:	2000      	movs	r0, #0
 8006ae0:	42be      	cmp	r6, r7
 8006ae2:	d2d2      	bcs.n	8006a8a <__gedf2+0x52>
 8006ae4:	4650      	mov	r0, sl
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	3801      	subs	r0, #1
 8006aea:	4398      	bics	r0, r3
 8006aec:	3001      	adds	r0, #1
 8006aee:	e7cc      	b.n	8006a8a <__gedf2+0x52>
 8006af0:	45c8      	cmp	r8, r9
 8006af2:	d8c5      	bhi.n	8006a80 <__gedf2+0x48>
 8006af4:	2000      	movs	r0, #0
 8006af6:	45c8      	cmp	r8, r9
 8006af8:	d3f4      	bcc.n	8006ae4 <__gedf2+0xac>
 8006afa:	e7c6      	b.n	8006a8a <__gedf2+0x52>
 8006afc:	000007ff 	.word	0x000007ff

08006b00 <__ledf2>:
 8006b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b02:	464f      	mov	r7, r9
 8006b04:	4646      	mov	r6, r8
 8006b06:	46d6      	mov	lr, sl
 8006b08:	004d      	lsls	r5, r1, #1
 8006b0a:	b5c0      	push	{r6, r7, lr}
 8006b0c:	030e      	lsls	r6, r1, #12
 8006b0e:	0fc9      	lsrs	r1, r1, #31
 8006b10:	468a      	mov	sl, r1
 8006b12:	492e      	ldr	r1, [pc, #184]	; (8006bcc <__ledf2+0xcc>)
 8006b14:	031f      	lsls	r7, r3, #12
 8006b16:	005c      	lsls	r4, r3, #1
 8006b18:	4680      	mov	r8, r0
 8006b1a:	0b36      	lsrs	r6, r6, #12
 8006b1c:	0d6d      	lsrs	r5, r5, #21
 8006b1e:	4691      	mov	r9, r2
 8006b20:	0b3f      	lsrs	r7, r7, #12
 8006b22:	0d64      	lsrs	r4, r4, #21
 8006b24:	0fdb      	lsrs	r3, r3, #31
 8006b26:	428d      	cmp	r5, r1
 8006b28:	d018      	beq.n	8006b5c <__ledf2+0x5c>
 8006b2a:	428c      	cmp	r4, r1
 8006b2c:	d011      	beq.n	8006b52 <__ledf2+0x52>
 8006b2e:	2d00      	cmp	r5, #0
 8006b30:	d118      	bne.n	8006b64 <__ledf2+0x64>
 8006b32:	4330      	orrs	r0, r6
 8006b34:	4684      	mov	ip, r0
 8006b36:	2c00      	cmp	r4, #0
 8006b38:	d11e      	bne.n	8006b78 <__ledf2+0x78>
 8006b3a:	433a      	orrs	r2, r7
 8006b3c:	d11c      	bne.n	8006b78 <__ledf2+0x78>
 8006b3e:	4663      	mov	r3, ip
 8006b40:	2000      	movs	r0, #0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d030      	beq.n	8006ba8 <__ledf2+0xa8>
 8006b46:	4651      	mov	r1, sl
 8006b48:	2002      	movs	r0, #2
 8006b4a:	3901      	subs	r1, #1
 8006b4c:	4008      	ands	r0, r1
 8006b4e:	3801      	subs	r0, #1
 8006b50:	e02a      	b.n	8006ba8 <__ledf2+0xa8>
 8006b52:	0039      	movs	r1, r7
 8006b54:	4311      	orrs	r1, r2
 8006b56:	d0ea      	beq.n	8006b2e <__ledf2+0x2e>
 8006b58:	2002      	movs	r0, #2
 8006b5a:	e025      	b.n	8006ba8 <__ledf2+0xa8>
 8006b5c:	4330      	orrs	r0, r6
 8006b5e:	d1fb      	bne.n	8006b58 <__ledf2+0x58>
 8006b60:	42ac      	cmp	r4, r5
 8006b62:	d026      	beq.n	8006bb2 <__ledf2+0xb2>
 8006b64:	2c00      	cmp	r4, #0
 8006b66:	d126      	bne.n	8006bb6 <__ledf2+0xb6>
 8006b68:	433a      	orrs	r2, r7
 8006b6a:	d124      	bne.n	8006bb6 <__ledf2+0xb6>
 8006b6c:	4651      	mov	r1, sl
 8006b6e:	2002      	movs	r0, #2
 8006b70:	3901      	subs	r1, #1
 8006b72:	4008      	ands	r0, r1
 8006b74:	3801      	subs	r0, #1
 8006b76:	e017      	b.n	8006ba8 <__ledf2+0xa8>
 8006b78:	4662      	mov	r2, ip
 8006b7a:	2a00      	cmp	r2, #0
 8006b7c:	d00f      	beq.n	8006b9e <__ledf2+0x9e>
 8006b7e:	459a      	cmp	sl, r3
 8006b80:	d1e1      	bne.n	8006b46 <__ledf2+0x46>
 8006b82:	42a5      	cmp	r5, r4
 8006b84:	db05      	blt.n	8006b92 <__ledf2+0x92>
 8006b86:	42be      	cmp	r6, r7
 8006b88:	d8dd      	bhi.n	8006b46 <__ledf2+0x46>
 8006b8a:	d019      	beq.n	8006bc0 <__ledf2+0xc0>
 8006b8c:	2000      	movs	r0, #0
 8006b8e:	42be      	cmp	r6, r7
 8006b90:	d20a      	bcs.n	8006ba8 <__ledf2+0xa8>
 8006b92:	4650      	mov	r0, sl
 8006b94:	2301      	movs	r3, #1
 8006b96:	3801      	subs	r0, #1
 8006b98:	4398      	bics	r0, r3
 8006b9a:	3001      	adds	r0, #1
 8006b9c:	e004      	b.n	8006ba8 <__ledf2+0xa8>
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	4393      	bics	r3, r2
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	3001      	adds	r0, #1
 8006ba8:	bc1c      	pop	{r2, r3, r4}
 8006baa:	4690      	mov	r8, r2
 8006bac:	4699      	mov	r9, r3
 8006bae:	46a2      	mov	sl, r4
 8006bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bb2:	433a      	orrs	r2, r7
 8006bb4:	d1d0      	bne.n	8006b58 <__ledf2+0x58>
 8006bb6:	459a      	cmp	sl, r3
 8006bb8:	d1c5      	bne.n	8006b46 <__ledf2+0x46>
 8006bba:	42a5      	cmp	r5, r4
 8006bbc:	dcc3      	bgt.n	8006b46 <__ledf2+0x46>
 8006bbe:	e7e0      	b.n	8006b82 <__ledf2+0x82>
 8006bc0:	45c8      	cmp	r8, r9
 8006bc2:	d8c0      	bhi.n	8006b46 <__ledf2+0x46>
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	45c8      	cmp	r8, r9
 8006bc8:	d3e3      	bcc.n	8006b92 <__ledf2+0x92>
 8006bca:	e7ed      	b.n	8006ba8 <__ledf2+0xa8>
 8006bcc:	000007ff 	.word	0x000007ff

08006bd0 <__aeabi_dmul>:
 8006bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bd2:	4657      	mov	r7, sl
 8006bd4:	46de      	mov	lr, fp
 8006bd6:	464e      	mov	r6, r9
 8006bd8:	4645      	mov	r5, r8
 8006bda:	b5e0      	push	{r5, r6, r7, lr}
 8006bdc:	4683      	mov	fp, r0
 8006bde:	0006      	movs	r6, r0
 8006be0:	030f      	lsls	r7, r1, #12
 8006be2:	0048      	lsls	r0, r1, #1
 8006be4:	b087      	sub	sp, #28
 8006be6:	4692      	mov	sl, r2
 8006be8:	001d      	movs	r5, r3
 8006bea:	0b3f      	lsrs	r7, r7, #12
 8006bec:	0d40      	lsrs	r0, r0, #21
 8006bee:	0fcc      	lsrs	r4, r1, #31
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	d100      	bne.n	8006bf6 <__aeabi_dmul+0x26>
 8006bf4:	e06f      	b.n	8006cd6 <__aeabi_dmul+0x106>
 8006bf6:	4bde      	ldr	r3, [pc, #888]	; (8006f70 <__aeabi_dmul+0x3a0>)
 8006bf8:	4298      	cmp	r0, r3
 8006bfa:	d038      	beq.n	8006c6e <__aeabi_dmul+0x9e>
 8006bfc:	2380      	movs	r3, #128	; 0x80
 8006bfe:	00ff      	lsls	r7, r7, #3
 8006c00:	041b      	lsls	r3, r3, #16
 8006c02:	431f      	orrs	r7, r3
 8006c04:	0f73      	lsrs	r3, r6, #29
 8006c06:	433b      	orrs	r3, r7
 8006c08:	9301      	str	r3, [sp, #4]
 8006c0a:	4bda      	ldr	r3, [pc, #872]	; (8006f74 <__aeabi_dmul+0x3a4>)
 8006c0c:	2700      	movs	r7, #0
 8006c0e:	4699      	mov	r9, r3
 8006c10:	2300      	movs	r3, #0
 8006c12:	469b      	mov	fp, r3
 8006c14:	00f6      	lsls	r6, r6, #3
 8006c16:	4481      	add	r9, r0
 8006c18:	032b      	lsls	r3, r5, #12
 8006c1a:	0069      	lsls	r1, r5, #1
 8006c1c:	0b1b      	lsrs	r3, r3, #12
 8006c1e:	4652      	mov	r2, sl
 8006c20:	4698      	mov	r8, r3
 8006c22:	0d49      	lsrs	r1, r1, #21
 8006c24:	0fed      	lsrs	r5, r5, #31
 8006c26:	2900      	cmp	r1, #0
 8006c28:	d100      	bne.n	8006c2c <__aeabi_dmul+0x5c>
 8006c2a:	e085      	b.n	8006d38 <__aeabi_dmul+0x168>
 8006c2c:	4bd0      	ldr	r3, [pc, #832]	; (8006f70 <__aeabi_dmul+0x3a0>)
 8006c2e:	4299      	cmp	r1, r3
 8006c30:	d100      	bne.n	8006c34 <__aeabi_dmul+0x64>
 8006c32:	e073      	b.n	8006d1c <__aeabi_dmul+0x14c>
 8006c34:	4643      	mov	r3, r8
 8006c36:	00da      	lsls	r2, r3, #3
 8006c38:	2380      	movs	r3, #128	; 0x80
 8006c3a:	041b      	lsls	r3, r3, #16
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	4652      	mov	r2, sl
 8006c40:	48cc      	ldr	r0, [pc, #816]	; (8006f74 <__aeabi_dmul+0x3a4>)
 8006c42:	0f52      	lsrs	r2, r2, #29
 8006c44:	4684      	mov	ip, r0
 8006c46:	4313      	orrs	r3, r2
 8006c48:	4652      	mov	r2, sl
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	4461      	add	r1, ip
 8006c4e:	00d2      	lsls	r2, r2, #3
 8006c50:	4489      	add	r9, r1
 8006c52:	0021      	movs	r1, r4
 8006c54:	4069      	eors	r1, r5
 8006c56:	9100      	str	r1, [sp, #0]
 8006c58:	468c      	mov	ip, r1
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	4449      	add	r1, r9
 8006c5e:	468a      	mov	sl, r1
 8006c60:	2f0f      	cmp	r7, #15
 8006c62:	d900      	bls.n	8006c66 <__aeabi_dmul+0x96>
 8006c64:	e090      	b.n	8006d88 <__aeabi_dmul+0x1b8>
 8006c66:	49c4      	ldr	r1, [pc, #784]	; (8006f78 <__aeabi_dmul+0x3a8>)
 8006c68:	00bf      	lsls	r7, r7, #2
 8006c6a:	59cf      	ldr	r7, [r1, r7]
 8006c6c:	46bf      	mov	pc, r7
 8006c6e:	465b      	mov	r3, fp
 8006c70:	433b      	orrs	r3, r7
 8006c72:	9301      	str	r3, [sp, #4]
 8006c74:	d000      	beq.n	8006c78 <__aeabi_dmul+0xa8>
 8006c76:	e16a      	b.n	8006f4e <__aeabi_dmul+0x37e>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	2708      	movs	r7, #8
 8006c7c:	2600      	movs	r6, #0
 8006c7e:	4681      	mov	r9, r0
 8006c80:	469b      	mov	fp, r3
 8006c82:	e7c9      	b.n	8006c18 <__aeabi_dmul+0x48>
 8006c84:	0032      	movs	r2, r6
 8006c86:	4658      	mov	r0, fp
 8006c88:	9b01      	ldr	r3, [sp, #4]
 8006c8a:	4661      	mov	r1, ip
 8006c8c:	9100      	str	r1, [sp, #0]
 8006c8e:	2802      	cmp	r0, #2
 8006c90:	d100      	bne.n	8006c94 <__aeabi_dmul+0xc4>
 8006c92:	e075      	b.n	8006d80 <__aeabi_dmul+0x1b0>
 8006c94:	2803      	cmp	r0, #3
 8006c96:	d100      	bne.n	8006c9a <__aeabi_dmul+0xca>
 8006c98:	e1fe      	b.n	8007098 <__aeabi_dmul+0x4c8>
 8006c9a:	2801      	cmp	r0, #1
 8006c9c:	d000      	beq.n	8006ca0 <__aeabi_dmul+0xd0>
 8006c9e:	e12c      	b.n	8006efa <__aeabi_dmul+0x32a>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	2700      	movs	r7, #0
 8006ca4:	2600      	movs	r6, #0
 8006ca6:	2500      	movs	r5, #0
 8006ca8:	033f      	lsls	r7, r7, #12
 8006caa:	0d2a      	lsrs	r2, r5, #20
 8006cac:	0b3f      	lsrs	r7, r7, #12
 8006cae:	48b3      	ldr	r0, [pc, #716]	; (8006f7c <__aeabi_dmul+0x3ac>)
 8006cb0:	0512      	lsls	r2, r2, #20
 8006cb2:	433a      	orrs	r2, r7
 8006cb4:	4002      	ands	r2, r0
 8006cb6:	051b      	lsls	r3, r3, #20
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	9a00      	ldr	r2, [sp, #0]
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	07d1      	lsls	r1, r2, #31
 8006cc0:	085b      	lsrs	r3, r3, #1
 8006cc2:	430b      	orrs	r3, r1
 8006cc4:	0030      	movs	r0, r6
 8006cc6:	0019      	movs	r1, r3
 8006cc8:	b007      	add	sp, #28
 8006cca:	bc3c      	pop	{r2, r3, r4, r5}
 8006ccc:	4690      	mov	r8, r2
 8006cce:	4699      	mov	r9, r3
 8006cd0:	46a2      	mov	sl, r4
 8006cd2:	46ab      	mov	fp, r5
 8006cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cd6:	465b      	mov	r3, fp
 8006cd8:	433b      	orrs	r3, r7
 8006cda:	9301      	str	r3, [sp, #4]
 8006cdc:	d100      	bne.n	8006ce0 <__aeabi_dmul+0x110>
 8006cde:	e12f      	b.n	8006f40 <__aeabi_dmul+0x370>
 8006ce0:	2f00      	cmp	r7, #0
 8006ce2:	d100      	bne.n	8006ce6 <__aeabi_dmul+0x116>
 8006ce4:	e1a5      	b.n	8007032 <__aeabi_dmul+0x462>
 8006ce6:	0038      	movs	r0, r7
 8006ce8:	f000 fec0 	bl	8007a6c <__clzsi2>
 8006cec:	0003      	movs	r3, r0
 8006cee:	3b0b      	subs	r3, #11
 8006cf0:	2b1c      	cmp	r3, #28
 8006cf2:	dd00      	ble.n	8006cf6 <__aeabi_dmul+0x126>
 8006cf4:	e196      	b.n	8007024 <__aeabi_dmul+0x454>
 8006cf6:	221d      	movs	r2, #29
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	465a      	mov	r2, fp
 8006cfc:	0001      	movs	r1, r0
 8006cfe:	40da      	lsrs	r2, r3
 8006d00:	465e      	mov	r6, fp
 8006d02:	3908      	subs	r1, #8
 8006d04:	408f      	lsls	r7, r1
 8006d06:	0013      	movs	r3, r2
 8006d08:	408e      	lsls	r6, r1
 8006d0a:	433b      	orrs	r3, r7
 8006d0c:	9301      	str	r3, [sp, #4]
 8006d0e:	4b9c      	ldr	r3, [pc, #624]	; (8006f80 <__aeabi_dmul+0x3b0>)
 8006d10:	2700      	movs	r7, #0
 8006d12:	1a1b      	subs	r3, r3, r0
 8006d14:	4699      	mov	r9, r3
 8006d16:	2300      	movs	r3, #0
 8006d18:	469b      	mov	fp, r3
 8006d1a:	e77d      	b.n	8006c18 <__aeabi_dmul+0x48>
 8006d1c:	4641      	mov	r1, r8
 8006d1e:	4653      	mov	r3, sl
 8006d20:	430b      	orrs	r3, r1
 8006d22:	4993      	ldr	r1, [pc, #588]	; (8006f70 <__aeabi_dmul+0x3a0>)
 8006d24:	468c      	mov	ip, r1
 8006d26:	44e1      	add	r9, ip
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d000      	beq.n	8006d2e <__aeabi_dmul+0x15e>
 8006d2c:	e11a      	b.n	8006f64 <__aeabi_dmul+0x394>
 8006d2e:	2202      	movs	r2, #2
 8006d30:	2002      	movs	r0, #2
 8006d32:	4317      	orrs	r7, r2
 8006d34:	2200      	movs	r2, #0
 8006d36:	e78c      	b.n	8006c52 <__aeabi_dmul+0x82>
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	d100      	bne.n	8006d3e <__aeabi_dmul+0x16e>
 8006d3c:	e10d      	b.n	8006f5a <__aeabi_dmul+0x38a>
 8006d3e:	4643      	mov	r3, r8
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d100      	bne.n	8006d46 <__aeabi_dmul+0x176>
 8006d44:	e181      	b.n	800704a <__aeabi_dmul+0x47a>
 8006d46:	4640      	mov	r0, r8
 8006d48:	f000 fe90 	bl	8007a6c <__clzsi2>
 8006d4c:	0002      	movs	r2, r0
 8006d4e:	3a0b      	subs	r2, #11
 8006d50:	2a1c      	cmp	r2, #28
 8006d52:	dd00      	ble.n	8006d56 <__aeabi_dmul+0x186>
 8006d54:	e172      	b.n	800703c <__aeabi_dmul+0x46c>
 8006d56:	0001      	movs	r1, r0
 8006d58:	4643      	mov	r3, r8
 8006d5a:	3908      	subs	r1, #8
 8006d5c:	408b      	lsls	r3, r1
 8006d5e:	4698      	mov	r8, r3
 8006d60:	231d      	movs	r3, #29
 8006d62:	1a9a      	subs	r2, r3, r2
 8006d64:	4653      	mov	r3, sl
 8006d66:	40d3      	lsrs	r3, r2
 8006d68:	001a      	movs	r2, r3
 8006d6a:	4643      	mov	r3, r8
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	4652      	mov	r2, sl
 8006d70:	408a      	lsls	r2, r1
 8006d72:	4649      	mov	r1, r9
 8006d74:	1a08      	subs	r0, r1, r0
 8006d76:	4982      	ldr	r1, [pc, #520]	; (8006f80 <__aeabi_dmul+0x3b0>)
 8006d78:	4689      	mov	r9, r1
 8006d7a:	4481      	add	r9, r0
 8006d7c:	2000      	movs	r0, #0
 8006d7e:	e768      	b.n	8006c52 <__aeabi_dmul+0x82>
 8006d80:	4b7b      	ldr	r3, [pc, #492]	; (8006f70 <__aeabi_dmul+0x3a0>)
 8006d82:	2700      	movs	r7, #0
 8006d84:	2600      	movs	r6, #0
 8006d86:	e78e      	b.n	8006ca6 <__aeabi_dmul+0xd6>
 8006d88:	0c14      	lsrs	r4, r2, #16
 8006d8a:	0412      	lsls	r2, r2, #16
 8006d8c:	0c12      	lsrs	r2, r2, #16
 8006d8e:	0011      	movs	r1, r2
 8006d90:	0c37      	lsrs	r7, r6, #16
 8006d92:	0436      	lsls	r6, r6, #16
 8006d94:	0c35      	lsrs	r5, r6, #16
 8006d96:	4379      	muls	r1, r7
 8006d98:	0028      	movs	r0, r5
 8006d9a:	468c      	mov	ip, r1
 8006d9c:	002e      	movs	r6, r5
 8006d9e:	4360      	muls	r0, r4
 8006da0:	4460      	add	r0, ip
 8006da2:	4683      	mov	fp, r0
 8006da4:	4356      	muls	r6, r2
 8006da6:	0021      	movs	r1, r4
 8006da8:	0c30      	lsrs	r0, r6, #16
 8006daa:	4680      	mov	r8, r0
 8006dac:	4658      	mov	r0, fp
 8006dae:	4379      	muls	r1, r7
 8006db0:	4440      	add	r0, r8
 8006db2:	9102      	str	r1, [sp, #8]
 8006db4:	4584      	cmp	ip, r0
 8006db6:	d906      	bls.n	8006dc6 <__aeabi_dmul+0x1f6>
 8006db8:	4688      	mov	r8, r1
 8006dba:	2180      	movs	r1, #128	; 0x80
 8006dbc:	0249      	lsls	r1, r1, #9
 8006dbe:	468c      	mov	ip, r1
 8006dc0:	44e0      	add	r8, ip
 8006dc2:	4641      	mov	r1, r8
 8006dc4:	9102      	str	r1, [sp, #8]
 8006dc6:	0436      	lsls	r6, r6, #16
 8006dc8:	0c01      	lsrs	r1, r0, #16
 8006dca:	0c36      	lsrs	r6, r6, #16
 8006dcc:	0400      	lsls	r0, r0, #16
 8006dce:	468b      	mov	fp, r1
 8006dd0:	1981      	adds	r1, r0, r6
 8006dd2:	0c1e      	lsrs	r6, r3, #16
 8006dd4:	041b      	lsls	r3, r3, #16
 8006dd6:	0c1b      	lsrs	r3, r3, #16
 8006dd8:	9103      	str	r1, [sp, #12]
 8006dda:	0019      	movs	r1, r3
 8006ddc:	4379      	muls	r1, r7
 8006dde:	468c      	mov	ip, r1
 8006de0:	0028      	movs	r0, r5
 8006de2:	4375      	muls	r5, r6
 8006de4:	4465      	add	r5, ip
 8006de6:	46a8      	mov	r8, r5
 8006de8:	4358      	muls	r0, r3
 8006dea:	0c05      	lsrs	r5, r0, #16
 8006dec:	4445      	add	r5, r8
 8006dee:	4377      	muls	r7, r6
 8006df0:	42a9      	cmp	r1, r5
 8006df2:	d903      	bls.n	8006dfc <__aeabi_dmul+0x22c>
 8006df4:	2180      	movs	r1, #128	; 0x80
 8006df6:	0249      	lsls	r1, r1, #9
 8006df8:	468c      	mov	ip, r1
 8006dfa:	4467      	add	r7, ip
 8006dfc:	0c29      	lsrs	r1, r5, #16
 8006dfe:	468c      	mov	ip, r1
 8006e00:	0039      	movs	r1, r7
 8006e02:	0400      	lsls	r0, r0, #16
 8006e04:	0c00      	lsrs	r0, r0, #16
 8006e06:	042d      	lsls	r5, r5, #16
 8006e08:	182d      	adds	r5, r5, r0
 8006e0a:	4461      	add	r1, ip
 8006e0c:	44ab      	add	fp, r5
 8006e0e:	9105      	str	r1, [sp, #20]
 8006e10:	4659      	mov	r1, fp
 8006e12:	9104      	str	r1, [sp, #16]
 8006e14:	9901      	ldr	r1, [sp, #4]
 8006e16:	040f      	lsls	r7, r1, #16
 8006e18:	0c3f      	lsrs	r7, r7, #16
 8006e1a:	0c08      	lsrs	r0, r1, #16
 8006e1c:	0039      	movs	r1, r7
 8006e1e:	4351      	muls	r1, r2
 8006e20:	4342      	muls	r2, r0
 8006e22:	4690      	mov	r8, r2
 8006e24:	0002      	movs	r2, r0
 8006e26:	468c      	mov	ip, r1
 8006e28:	0c09      	lsrs	r1, r1, #16
 8006e2a:	468b      	mov	fp, r1
 8006e2c:	4362      	muls	r2, r4
 8006e2e:	437c      	muls	r4, r7
 8006e30:	4444      	add	r4, r8
 8006e32:	445c      	add	r4, fp
 8006e34:	45a0      	cmp	r8, r4
 8006e36:	d903      	bls.n	8006e40 <__aeabi_dmul+0x270>
 8006e38:	2180      	movs	r1, #128	; 0x80
 8006e3a:	0249      	lsls	r1, r1, #9
 8006e3c:	4688      	mov	r8, r1
 8006e3e:	4442      	add	r2, r8
 8006e40:	0c21      	lsrs	r1, r4, #16
 8006e42:	4688      	mov	r8, r1
 8006e44:	4661      	mov	r1, ip
 8006e46:	0409      	lsls	r1, r1, #16
 8006e48:	0c09      	lsrs	r1, r1, #16
 8006e4a:	468c      	mov	ip, r1
 8006e4c:	0039      	movs	r1, r7
 8006e4e:	4359      	muls	r1, r3
 8006e50:	4343      	muls	r3, r0
 8006e52:	4370      	muls	r0, r6
 8006e54:	437e      	muls	r6, r7
 8006e56:	0c0f      	lsrs	r7, r1, #16
 8006e58:	18f6      	adds	r6, r6, r3
 8006e5a:	0424      	lsls	r4, r4, #16
 8006e5c:	19be      	adds	r6, r7, r6
 8006e5e:	4464      	add	r4, ip
 8006e60:	4442      	add	r2, r8
 8006e62:	468c      	mov	ip, r1
 8006e64:	42b3      	cmp	r3, r6
 8006e66:	d903      	bls.n	8006e70 <__aeabi_dmul+0x2a0>
 8006e68:	2380      	movs	r3, #128	; 0x80
 8006e6a:	025b      	lsls	r3, r3, #9
 8006e6c:	4698      	mov	r8, r3
 8006e6e:	4440      	add	r0, r8
 8006e70:	9b02      	ldr	r3, [sp, #8]
 8006e72:	4661      	mov	r1, ip
 8006e74:	4698      	mov	r8, r3
 8006e76:	9b04      	ldr	r3, [sp, #16]
 8006e78:	0437      	lsls	r7, r6, #16
 8006e7a:	4443      	add	r3, r8
 8006e7c:	469b      	mov	fp, r3
 8006e7e:	45ab      	cmp	fp, r5
 8006e80:	41ad      	sbcs	r5, r5
 8006e82:	426b      	negs	r3, r5
 8006e84:	040d      	lsls	r5, r1, #16
 8006e86:	9905      	ldr	r1, [sp, #20]
 8006e88:	0c2d      	lsrs	r5, r5, #16
 8006e8a:	468c      	mov	ip, r1
 8006e8c:	197f      	adds	r7, r7, r5
 8006e8e:	4467      	add	r7, ip
 8006e90:	18fd      	adds	r5, r7, r3
 8006e92:	46a8      	mov	r8, r5
 8006e94:	465d      	mov	r5, fp
 8006e96:	192d      	adds	r5, r5, r4
 8006e98:	42a5      	cmp	r5, r4
 8006e9a:	41a4      	sbcs	r4, r4
 8006e9c:	4693      	mov	fp, r2
 8006e9e:	4264      	negs	r4, r4
 8006ea0:	46a4      	mov	ip, r4
 8006ea2:	44c3      	add	fp, r8
 8006ea4:	44dc      	add	ip, fp
 8006ea6:	428f      	cmp	r7, r1
 8006ea8:	41bf      	sbcs	r7, r7
 8006eaa:	4598      	cmp	r8, r3
 8006eac:	419b      	sbcs	r3, r3
 8006eae:	4593      	cmp	fp, r2
 8006eb0:	4192      	sbcs	r2, r2
 8006eb2:	45a4      	cmp	ip, r4
 8006eb4:	41a4      	sbcs	r4, r4
 8006eb6:	425b      	negs	r3, r3
 8006eb8:	427f      	negs	r7, r7
 8006eba:	431f      	orrs	r7, r3
 8006ebc:	0c36      	lsrs	r6, r6, #16
 8006ebe:	4252      	negs	r2, r2
 8006ec0:	4264      	negs	r4, r4
 8006ec2:	19bf      	adds	r7, r7, r6
 8006ec4:	4322      	orrs	r2, r4
 8006ec6:	18bf      	adds	r7, r7, r2
 8006ec8:	4662      	mov	r2, ip
 8006eca:	1838      	adds	r0, r7, r0
 8006ecc:	0243      	lsls	r3, r0, #9
 8006ece:	0dd2      	lsrs	r2, r2, #23
 8006ed0:	9903      	ldr	r1, [sp, #12]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	026a      	lsls	r2, r5, #9
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	1e50      	subs	r0, r2, #1
 8006eda:	4182      	sbcs	r2, r0
 8006edc:	4661      	mov	r1, ip
 8006ede:	0ded      	lsrs	r5, r5, #23
 8006ee0:	432a      	orrs	r2, r5
 8006ee2:	024e      	lsls	r6, r1, #9
 8006ee4:	4332      	orrs	r2, r6
 8006ee6:	01d9      	lsls	r1, r3, #7
 8006ee8:	d400      	bmi.n	8006eec <__aeabi_dmul+0x31c>
 8006eea:	e0b3      	b.n	8007054 <__aeabi_dmul+0x484>
 8006eec:	2601      	movs	r6, #1
 8006eee:	0850      	lsrs	r0, r2, #1
 8006ef0:	4032      	ands	r2, r6
 8006ef2:	4302      	orrs	r2, r0
 8006ef4:	07de      	lsls	r6, r3, #31
 8006ef6:	4332      	orrs	r2, r6
 8006ef8:	085b      	lsrs	r3, r3, #1
 8006efa:	4c22      	ldr	r4, [pc, #136]	; (8006f84 <__aeabi_dmul+0x3b4>)
 8006efc:	4454      	add	r4, sl
 8006efe:	2c00      	cmp	r4, #0
 8006f00:	dd62      	ble.n	8006fc8 <__aeabi_dmul+0x3f8>
 8006f02:	0751      	lsls	r1, r2, #29
 8006f04:	d009      	beq.n	8006f1a <__aeabi_dmul+0x34a>
 8006f06:	200f      	movs	r0, #15
 8006f08:	4010      	ands	r0, r2
 8006f0a:	2804      	cmp	r0, #4
 8006f0c:	d005      	beq.n	8006f1a <__aeabi_dmul+0x34a>
 8006f0e:	1d10      	adds	r0, r2, #4
 8006f10:	4290      	cmp	r0, r2
 8006f12:	4192      	sbcs	r2, r2
 8006f14:	4252      	negs	r2, r2
 8006f16:	189b      	adds	r3, r3, r2
 8006f18:	0002      	movs	r2, r0
 8006f1a:	01d9      	lsls	r1, r3, #7
 8006f1c:	d504      	bpl.n	8006f28 <__aeabi_dmul+0x358>
 8006f1e:	2480      	movs	r4, #128	; 0x80
 8006f20:	4819      	ldr	r0, [pc, #100]	; (8006f88 <__aeabi_dmul+0x3b8>)
 8006f22:	00e4      	lsls	r4, r4, #3
 8006f24:	4003      	ands	r3, r0
 8006f26:	4454      	add	r4, sl
 8006f28:	4818      	ldr	r0, [pc, #96]	; (8006f8c <__aeabi_dmul+0x3bc>)
 8006f2a:	4284      	cmp	r4, r0
 8006f2c:	dd00      	ble.n	8006f30 <__aeabi_dmul+0x360>
 8006f2e:	e727      	b.n	8006d80 <__aeabi_dmul+0x1b0>
 8006f30:	075e      	lsls	r6, r3, #29
 8006f32:	025b      	lsls	r3, r3, #9
 8006f34:	08d2      	lsrs	r2, r2, #3
 8006f36:	0b1f      	lsrs	r7, r3, #12
 8006f38:	0563      	lsls	r3, r4, #21
 8006f3a:	4316      	orrs	r6, r2
 8006f3c:	0d5b      	lsrs	r3, r3, #21
 8006f3e:	e6b2      	b.n	8006ca6 <__aeabi_dmul+0xd6>
 8006f40:	2300      	movs	r3, #0
 8006f42:	4699      	mov	r9, r3
 8006f44:	3301      	adds	r3, #1
 8006f46:	2704      	movs	r7, #4
 8006f48:	2600      	movs	r6, #0
 8006f4a:	469b      	mov	fp, r3
 8006f4c:	e664      	b.n	8006c18 <__aeabi_dmul+0x48>
 8006f4e:	2303      	movs	r3, #3
 8006f50:	9701      	str	r7, [sp, #4]
 8006f52:	4681      	mov	r9, r0
 8006f54:	270c      	movs	r7, #12
 8006f56:	469b      	mov	fp, r3
 8006f58:	e65e      	b.n	8006c18 <__aeabi_dmul+0x48>
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	2001      	movs	r0, #1
 8006f5e:	4317      	orrs	r7, r2
 8006f60:	2200      	movs	r2, #0
 8006f62:	e676      	b.n	8006c52 <__aeabi_dmul+0x82>
 8006f64:	2303      	movs	r3, #3
 8006f66:	2003      	movs	r0, #3
 8006f68:	431f      	orrs	r7, r3
 8006f6a:	4643      	mov	r3, r8
 8006f6c:	e671      	b.n	8006c52 <__aeabi_dmul+0x82>
 8006f6e:	46c0      	nop			; (mov r8, r8)
 8006f70:	000007ff 	.word	0x000007ff
 8006f74:	fffffc01 	.word	0xfffffc01
 8006f78:	0800f7e8 	.word	0x0800f7e8
 8006f7c:	800fffff 	.word	0x800fffff
 8006f80:	fffffc0d 	.word	0xfffffc0d
 8006f84:	000003ff 	.word	0x000003ff
 8006f88:	feffffff 	.word	0xfeffffff
 8006f8c:	000007fe 	.word	0x000007fe
 8006f90:	2300      	movs	r3, #0
 8006f92:	2780      	movs	r7, #128	; 0x80
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	033f      	lsls	r7, r7, #12
 8006f98:	2600      	movs	r6, #0
 8006f9a:	4b43      	ldr	r3, [pc, #268]	; (80070a8 <__aeabi_dmul+0x4d8>)
 8006f9c:	e683      	b.n	8006ca6 <__aeabi_dmul+0xd6>
 8006f9e:	9b01      	ldr	r3, [sp, #4]
 8006fa0:	0032      	movs	r2, r6
 8006fa2:	46a4      	mov	ip, r4
 8006fa4:	4658      	mov	r0, fp
 8006fa6:	e670      	b.n	8006c8a <__aeabi_dmul+0xba>
 8006fa8:	46ac      	mov	ip, r5
 8006faa:	e66e      	b.n	8006c8a <__aeabi_dmul+0xba>
 8006fac:	2780      	movs	r7, #128	; 0x80
 8006fae:	9901      	ldr	r1, [sp, #4]
 8006fb0:	033f      	lsls	r7, r7, #12
 8006fb2:	4239      	tst	r1, r7
 8006fb4:	d02d      	beq.n	8007012 <__aeabi_dmul+0x442>
 8006fb6:	423b      	tst	r3, r7
 8006fb8:	d12b      	bne.n	8007012 <__aeabi_dmul+0x442>
 8006fba:	431f      	orrs	r7, r3
 8006fbc:	033f      	lsls	r7, r7, #12
 8006fbe:	0b3f      	lsrs	r7, r7, #12
 8006fc0:	9500      	str	r5, [sp, #0]
 8006fc2:	0016      	movs	r6, r2
 8006fc4:	4b38      	ldr	r3, [pc, #224]	; (80070a8 <__aeabi_dmul+0x4d8>)
 8006fc6:	e66e      	b.n	8006ca6 <__aeabi_dmul+0xd6>
 8006fc8:	2501      	movs	r5, #1
 8006fca:	1b2d      	subs	r5, r5, r4
 8006fcc:	2d38      	cmp	r5, #56	; 0x38
 8006fce:	dd00      	ble.n	8006fd2 <__aeabi_dmul+0x402>
 8006fd0:	e666      	b.n	8006ca0 <__aeabi_dmul+0xd0>
 8006fd2:	2d1f      	cmp	r5, #31
 8006fd4:	dc40      	bgt.n	8007058 <__aeabi_dmul+0x488>
 8006fd6:	4835      	ldr	r0, [pc, #212]	; (80070ac <__aeabi_dmul+0x4dc>)
 8006fd8:	001c      	movs	r4, r3
 8006fda:	4450      	add	r0, sl
 8006fdc:	0016      	movs	r6, r2
 8006fde:	4082      	lsls	r2, r0
 8006fe0:	4084      	lsls	r4, r0
 8006fe2:	40ee      	lsrs	r6, r5
 8006fe4:	1e50      	subs	r0, r2, #1
 8006fe6:	4182      	sbcs	r2, r0
 8006fe8:	4334      	orrs	r4, r6
 8006fea:	4314      	orrs	r4, r2
 8006fec:	40eb      	lsrs	r3, r5
 8006fee:	0762      	lsls	r2, r4, #29
 8006ff0:	d009      	beq.n	8007006 <__aeabi_dmul+0x436>
 8006ff2:	220f      	movs	r2, #15
 8006ff4:	4022      	ands	r2, r4
 8006ff6:	2a04      	cmp	r2, #4
 8006ff8:	d005      	beq.n	8007006 <__aeabi_dmul+0x436>
 8006ffa:	0022      	movs	r2, r4
 8006ffc:	1d14      	adds	r4, r2, #4
 8006ffe:	4294      	cmp	r4, r2
 8007000:	4180      	sbcs	r0, r0
 8007002:	4240      	negs	r0, r0
 8007004:	181b      	adds	r3, r3, r0
 8007006:	021a      	lsls	r2, r3, #8
 8007008:	d53e      	bpl.n	8007088 <__aeabi_dmul+0x4b8>
 800700a:	2301      	movs	r3, #1
 800700c:	2700      	movs	r7, #0
 800700e:	2600      	movs	r6, #0
 8007010:	e649      	b.n	8006ca6 <__aeabi_dmul+0xd6>
 8007012:	2780      	movs	r7, #128	; 0x80
 8007014:	9b01      	ldr	r3, [sp, #4]
 8007016:	033f      	lsls	r7, r7, #12
 8007018:	431f      	orrs	r7, r3
 800701a:	033f      	lsls	r7, r7, #12
 800701c:	0b3f      	lsrs	r7, r7, #12
 800701e:	9400      	str	r4, [sp, #0]
 8007020:	4b21      	ldr	r3, [pc, #132]	; (80070a8 <__aeabi_dmul+0x4d8>)
 8007022:	e640      	b.n	8006ca6 <__aeabi_dmul+0xd6>
 8007024:	0003      	movs	r3, r0
 8007026:	465a      	mov	r2, fp
 8007028:	3b28      	subs	r3, #40	; 0x28
 800702a:	409a      	lsls	r2, r3
 800702c:	2600      	movs	r6, #0
 800702e:	9201      	str	r2, [sp, #4]
 8007030:	e66d      	b.n	8006d0e <__aeabi_dmul+0x13e>
 8007032:	4658      	mov	r0, fp
 8007034:	f000 fd1a 	bl	8007a6c <__clzsi2>
 8007038:	3020      	adds	r0, #32
 800703a:	e657      	b.n	8006cec <__aeabi_dmul+0x11c>
 800703c:	0003      	movs	r3, r0
 800703e:	4652      	mov	r2, sl
 8007040:	3b28      	subs	r3, #40	; 0x28
 8007042:	409a      	lsls	r2, r3
 8007044:	0013      	movs	r3, r2
 8007046:	2200      	movs	r2, #0
 8007048:	e693      	b.n	8006d72 <__aeabi_dmul+0x1a2>
 800704a:	4650      	mov	r0, sl
 800704c:	f000 fd0e 	bl	8007a6c <__clzsi2>
 8007050:	3020      	adds	r0, #32
 8007052:	e67b      	b.n	8006d4c <__aeabi_dmul+0x17c>
 8007054:	46ca      	mov	sl, r9
 8007056:	e750      	b.n	8006efa <__aeabi_dmul+0x32a>
 8007058:	201f      	movs	r0, #31
 800705a:	001e      	movs	r6, r3
 800705c:	4240      	negs	r0, r0
 800705e:	1b04      	subs	r4, r0, r4
 8007060:	40e6      	lsrs	r6, r4
 8007062:	2d20      	cmp	r5, #32
 8007064:	d003      	beq.n	800706e <__aeabi_dmul+0x49e>
 8007066:	4c12      	ldr	r4, [pc, #72]	; (80070b0 <__aeabi_dmul+0x4e0>)
 8007068:	4454      	add	r4, sl
 800706a:	40a3      	lsls	r3, r4
 800706c:	431a      	orrs	r2, r3
 800706e:	1e50      	subs	r0, r2, #1
 8007070:	4182      	sbcs	r2, r0
 8007072:	4332      	orrs	r2, r6
 8007074:	2607      	movs	r6, #7
 8007076:	2700      	movs	r7, #0
 8007078:	4016      	ands	r6, r2
 800707a:	d009      	beq.n	8007090 <__aeabi_dmul+0x4c0>
 800707c:	200f      	movs	r0, #15
 800707e:	2300      	movs	r3, #0
 8007080:	4010      	ands	r0, r2
 8007082:	0014      	movs	r4, r2
 8007084:	2804      	cmp	r0, #4
 8007086:	d1b9      	bne.n	8006ffc <__aeabi_dmul+0x42c>
 8007088:	0022      	movs	r2, r4
 800708a:	075e      	lsls	r6, r3, #29
 800708c:	025b      	lsls	r3, r3, #9
 800708e:	0b1f      	lsrs	r7, r3, #12
 8007090:	08d2      	lsrs	r2, r2, #3
 8007092:	4316      	orrs	r6, r2
 8007094:	2300      	movs	r3, #0
 8007096:	e606      	b.n	8006ca6 <__aeabi_dmul+0xd6>
 8007098:	2780      	movs	r7, #128	; 0x80
 800709a:	033f      	lsls	r7, r7, #12
 800709c:	431f      	orrs	r7, r3
 800709e:	033f      	lsls	r7, r7, #12
 80070a0:	0b3f      	lsrs	r7, r7, #12
 80070a2:	0016      	movs	r6, r2
 80070a4:	4b00      	ldr	r3, [pc, #0]	; (80070a8 <__aeabi_dmul+0x4d8>)
 80070a6:	e5fe      	b.n	8006ca6 <__aeabi_dmul+0xd6>
 80070a8:	000007ff 	.word	0x000007ff
 80070ac:	0000041e 	.word	0x0000041e
 80070b0:	0000043e 	.word	0x0000043e

080070b4 <__aeabi_dsub>:
 80070b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b6:	4657      	mov	r7, sl
 80070b8:	464e      	mov	r6, r9
 80070ba:	4645      	mov	r5, r8
 80070bc:	46de      	mov	lr, fp
 80070be:	000c      	movs	r4, r1
 80070c0:	0309      	lsls	r1, r1, #12
 80070c2:	b5e0      	push	{r5, r6, r7, lr}
 80070c4:	0a49      	lsrs	r1, r1, #9
 80070c6:	0f46      	lsrs	r6, r0, #29
 80070c8:	005f      	lsls	r7, r3, #1
 80070ca:	4331      	orrs	r1, r6
 80070cc:	031e      	lsls	r6, r3, #12
 80070ce:	0fdb      	lsrs	r3, r3, #31
 80070d0:	0a76      	lsrs	r6, r6, #9
 80070d2:	469b      	mov	fp, r3
 80070d4:	0f53      	lsrs	r3, r2, #29
 80070d6:	4333      	orrs	r3, r6
 80070d8:	4ec8      	ldr	r6, [pc, #800]	; (80073fc <__aeabi_dsub+0x348>)
 80070da:	0065      	lsls	r5, r4, #1
 80070dc:	00c0      	lsls	r0, r0, #3
 80070de:	0fe4      	lsrs	r4, r4, #31
 80070e0:	00d2      	lsls	r2, r2, #3
 80070e2:	0d6d      	lsrs	r5, r5, #21
 80070e4:	46a2      	mov	sl, r4
 80070e6:	4681      	mov	r9, r0
 80070e8:	0d7f      	lsrs	r7, r7, #21
 80070ea:	469c      	mov	ip, r3
 80070ec:	4690      	mov	r8, r2
 80070ee:	42b7      	cmp	r7, r6
 80070f0:	d100      	bne.n	80070f4 <__aeabi_dsub+0x40>
 80070f2:	e0b9      	b.n	8007268 <__aeabi_dsub+0x1b4>
 80070f4:	465b      	mov	r3, fp
 80070f6:	2601      	movs	r6, #1
 80070f8:	4073      	eors	r3, r6
 80070fa:	469b      	mov	fp, r3
 80070fc:	1bee      	subs	r6, r5, r7
 80070fe:	45a3      	cmp	fp, r4
 8007100:	d100      	bne.n	8007104 <__aeabi_dsub+0x50>
 8007102:	e083      	b.n	800720c <__aeabi_dsub+0x158>
 8007104:	2e00      	cmp	r6, #0
 8007106:	dd63      	ble.n	80071d0 <__aeabi_dsub+0x11c>
 8007108:	2f00      	cmp	r7, #0
 800710a:	d000      	beq.n	800710e <__aeabi_dsub+0x5a>
 800710c:	e0b1      	b.n	8007272 <__aeabi_dsub+0x1be>
 800710e:	4663      	mov	r3, ip
 8007110:	4313      	orrs	r3, r2
 8007112:	d100      	bne.n	8007116 <__aeabi_dsub+0x62>
 8007114:	e123      	b.n	800735e <__aeabi_dsub+0x2aa>
 8007116:	1e73      	subs	r3, r6, #1
 8007118:	2b00      	cmp	r3, #0
 800711a:	d000      	beq.n	800711e <__aeabi_dsub+0x6a>
 800711c:	e1ba      	b.n	8007494 <__aeabi_dsub+0x3e0>
 800711e:	1a86      	subs	r6, r0, r2
 8007120:	4663      	mov	r3, ip
 8007122:	42b0      	cmp	r0, r6
 8007124:	4180      	sbcs	r0, r0
 8007126:	2501      	movs	r5, #1
 8007128:	1ac9      	subs	r1, r1, r3
 800712a:	4240      	negs	r0, r0
 800712c:	1a09      	subs	r1, r1, r0
 800712e:	020b      	lsls	r3, r1, #8
 8007130:	d400      	bmi.n	8007134 <__aeabi_dsub+0x80>
 8007132:	e147      	b.n	80073c4 <__aeabi_dsub+0x310>
 8007134:	0249      	lsls	r1, r1, #9
 8007136:	0a4b      	lsrs	r3, r1, #9
 8007138:	4698      	mov	r8, r3
 800713a:	4643      	mov	r3, r8
 800713c:	2b00      	cmp	r3, #0
 800713e:	d100      	bne.n	8007142 <__aeabi_dsub+0x8e>
 8007140:	e189      	b.n	8007456 <__aeabi_dsub+0x3a2>
 8007142:	4640      	mov	r0, r8
 8007144:	f000 fc92 	bl	8007a6c <__clzsi2>
 8007148:	0003      	movs	r3, r0
 800714a:	3b08      	subs	r3, #8
 800714c:	2b1f      	cmp	r3, #31
 800714e:	dd00      	ble.n	8007152 <__aeabi_dsub+0x9e>
 8007150:	e17c      	b.n	800744c <__aeabi_dsub+0x398>
 8007152:	2220      	movs	r2, #32
 8007154:	0030      	movs	r0, r6
 8007156:	1ad2      	subs	r2, r2, r3
 8007158:	4641      	mov	r1, r8
 800715a:	40d0      	lsrs	r0, r2
 800715c:	4099      	lsls	r1, r3
 800715e:	0002      	movs	r2, r0
 8007160:	409e      	lsls	r6, r3
 8007162:	430a      	orrs	r2, r1
 8007164:	429d      	cmp	r5, r3
 8007166:	dd00      	ble.n	800716a <__aeabi_dsub+0xb6>
 8007168:	e16a      	b.n	8007440 <__aeabi_dsub+0x38c>
 800716a:	1b5d      	subs	r5, r3, r5
 800716c:	1c6b      	adds	r3, r5, #1
 800716e:	2b1f      	cmp	r3, #31
 8007170:	dd00      	ble.n	8007174 <__aeabi_dsub+0xc0>
 8007172:	e194      	b.n	800749e <__aeabi_dsub+0x3ea>
 8007174:	2120      	movs	r1, #32
 8007176:	0010      	movs	r0, r2
 8007178:	0035      	movs	r5, r6
 800717a:	1ac9      	subs	r1, r1, r3
 800717c:	408e      	lsls	r6, r1
 800717e:	40da      	lsrs	r2, r3
 8007180:	4088      	lsls	r0, r1
 8007182:	40dd      	lsrs	r5, r3
 8007184:	1e71      	subs	r1, r6, #1
 8007186:	418e      	sbcs	r6, r1
 8007188:	0011      	movs	r1, r2
 800718a:	2207      	movs	r2, #7
 800718c:	4328      	orrs	r0, r5
 800718e:	2500      	movs	r5, #0
 8007190:	4306      	orrs	r6, r0
 8007192:	4032      	ands	r2, r6
 8007194:	2a00      	cmp	r2, #0
 8007196:	d009      	beq.n	80071ac <__aeabi_dsub+0xf8>
 8007198:	230f      	movs	r3, #15
 800719a:	4033      	ands	r3, r6
 800719c:	2b04      	cmp	r3, #4
 800719e:	d005      	beq.n	80071ac <__aeabi_dsub+0xf8>
 80071a0:	1d33      	adds	r3, r6, #4
 80071a2:	42b3      	cmp	r3, r6
 80071a4:	41b6      	sbcs	r6, r6
 80071a6:	4276      	negs	r6, r6
 80071a8:	1989      	adds	r1, r1, r6
 80071aa:	001e      	movs	r6, r3
 80071ac:	020b      	lsls	r3, r1, #8
 80071ae:	d400      	bmi.n	80071b2 <__aeabi_dsub+0xfe>
 80071b0:	e23d      	b.n	800762e <__aeabi_dsub+0x57a>
 80071b2:	1c6a      	adds	r2, r5, #1
 80071b4:	4b91      	ldr	r3, [pc, #580]	; (80073fc <__aeabi_dsub+0x348>)
 80071b6:	0555      	lsls	r5, r2, #21
 80071b8:	0d6d      	lsrs	r5, r5, #21
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d100      	bne.n	80071c0 <__aeabi_dsub+0x10c>
 80071be:	e119      	b.n	80073f4 <__aeabi_dsub+0x340>
 80071c0:	4a8f      	ldr	r2, [pc, #572]	; (8007400 <__aeabi_dsub+0x34c>)
 80071c2:	08f6      	lsrs	r6, r6, #3
 80071c4:	400a      	ands	r2, r1
 80071c6:	0757      	lsls	r7, r2, #29
 80071c8:	0252      	lsls	r2, r2, #9
 80071ca:	4337      	orrs	r7, r6
 80071cc:	0b12      	lsrs	r2, r2, #12
 80071ce:	e09b      	b.n	8007308 <__aeabi_dsub+0x254>
 80071d0:	2e00      	cmp	r6, #0
 80071d2:	d000      	beq.n	80071d6 <__aeabi_dsub+0x122>
 80071d4:	e0c5      	b.n	8007362 <__aeabi_dsub+0x2ae>
 80071d6:	1c6e      	adds	r6, r5, #1
 80071d8:	0576      	lsls	r6, r6, #21
 80071da:	0d76      	lsrs	r6, r6, #21
 80071dc:	2e01      	cmp	r6, #1
 80071de:	dc00      	bgt.n	80071e2 <__aeabi_dsub+0x12e>
 80071e0:	e148      	b.n	8007474 <__aeabi_dsub+0x3c0>
 80071e2:	4667      	mov	r7, ip
 80071e4:	1a86      	subs	r6, r0, r2
 80071e6:	1bcb      	subs	r3, r1, r7
 80071e8:	42b0      	cmp	r0, r6
 80071ea:	41bf      	sbcs	r7, r7
 80071ec:	427f      	negs	r7, r7
 80071ee:	46b8      	mov	r8, r7
 80071f0:	001f      	movs	r7, r3
 80071f2:	4643      	mov	r3, r8
 80071f4:	1aff      	subs	r7, r7, r3
 80071f6:	003b      	movs	r3, r7
 80071f8:	46b8      	mov	r8, r7
 80071fa:	021b      	lsls	r3, r3, #8
 80071fc:	d500      	bpl.n	8007200 <__aeabi_dsub+0x14c>
 80071fe:	e15f      	b.n	80074c0 <__aeabi_dsub+0x40c>
 8007200:	4337      	orrs	r7, r6
 8007202:	d19a      	bne.n	800713a <__aeabi_dsub+0x86>
 8007204:	2200      	movs	r2, #0
 8007206:	2400      	movs	r4, #0
 8007208:	2500      	movs	r5, #0
 800720a:	e079      	b.n	8007300 <__aeabi_dsub+0x24c>
 800720c:	2e00      	cmp	r6, #0
 800720e:	dc00      	bgt.n	8007212 <__aeabi_dsub+0x15e>
 8007210:	e0fa      	b.n	8007408 <__aeabi_dsub+0x354>
 8007212:	2f00      	cmp	r7, #0
 8007214:	d100      	bne.n	8007218 <__aeabi_dsub+0x164>
 8007216:	e08d      	b.n	8007334 <__aeabi_dsub+0x280>
 8007218:	4b78      	ldr	r3, [pc, #480]	; (80073fc <__aeabi_dsub+0x348>)
 800721a:	429d      	cmp	r5, r3
 800721c:	d067      	beq.n	80072ee <__aeabi_dsub+0x23a>
 800721e:	2380      	movs	r3, #128	; 0x80
 8007220:	4667      	mov	r7, ip
 8007222:	041b      	lsls	r3, r3, #16
 8007224:	431f      	orrs	r7, r3
 8007226:	46bc      	mov	ip, r7
 8007228:	2e38      	cmp	r6, #56	; 0x38
 800722a:	dc00      	bgt.n	800722e <__aeabi_dsub+0x17a>
 800722c:	e152      	b.n	80074d4 <__aeabi_dsub+0x420>
 800722e:	4663      	mov	r3, ip
 8007230:	4313      	orrs	r3, r2
 8007232:	1e5a      	subs	r2, r3, #1
 8007234:	4193      	sbcs	r3, r2
 8007236:	181e      	adds	r6, r3, r0
 8007238:	4286      	cmp	r6, r0
 800723a:	4180      	sbcs	r0, r0
 800723c:	4240      	negs	r0, r0
 800723e:	1809      	adds	r1, r1, r0
 8007240:	020b      	lsls	r3, r1, #8
 8007242:	d400      	bmi.n	8007246 <__aeabi_dsub+0x192>
 8007244:	e0be      	b.n	80073c4 <__aeabi_dsub+0x310>
 8007246:	4b6d      	ldr	r3, [pc, #436]	; (80073fc <__aeabi_dsub+0x348>)
 8007248:	3501      	adds	r5, #1
 800724a:	429d      	cmp	r5, r3
 800724c:	d100      	bne.n	8007250 <__aeabi_dsub+0x19c>
 800724e:	e0d2      	b.n	80073f6 <__aeabi_dsub+0x342>
 8007250:	4a6b      	ldr	r2, [pc, #428]	; (8007400 <__aeabi_dsub+0x34c>)
 8007252:	0873      	lsrs	r3, r6, #1
 8007254:	400a      	ands	r2, r1
 8007256:	2101      	movs	r1, #1
 8007258:	400e      	ands	r6, r1
 800725a:	431e      	orrs	r6, r3
 800725c:	0851      	lsrs	r1, r2, #1
 800725e:	07d3      	lsls	r3, r2, #31
 8007260:	2207      	movs	r2, #7
 8007262:	431e      	orrs	r6, r3
 8007264:	4032      	ands	r2, r6
 8007266:	e795      	b.n	8007194 <__aeabi_dsub+0xe0>
 8007268:	001e      	movs	r6, r3
 800726a:	4316      	orrs	r6, r2
 800726c:	d000      	beq.n	8007270 <__aeabi_dsub+0x1bc>
 800726e:	e745      	b.n	80070fc <__aeabi_dsub+0x48>
 8007270:	e740      	b.n	80070f4 <__aeabi_dsub+0x40>
 8007272:	4b62      	ldr	r3, [pc, #392]	; (80073fc <__aeabi_dsub+0x348>)
 8007274:	429d      	cmp	r5, r3
 8007276:	d03a      	beq.n	80072ee <__aeabi_dsub+0x23a>
 8007278:	2380      	movs	r3, #128	; 0x80
 800727a:	4667      	mov	r7, ip
 800727c:	041b      	lsls	r3, r3, #16
 800727e:	431f      	orrs	r7, r3
 8007280:	46bc      	mov	ip, r7
 8007282:	2e38      	cmp	r6, #56	; 0x38
 8007284:	dd00      	ble.n	8007288 <__aeabi_dsub+0x1d4>
 8007286:	e0eb      	b.n	8007460 <__aeabi_dsub+0x3ac>
 8007288:	2e1f      	cmp	r6, #31
 800728a:	dc00      	bgt.n	800728e <__aeabi_dsub+0x1da>
 800728c:	e13a      	b.n	8007504 <__aeabi_dsub+0x450>
 800728e:	0033      	movs	r3, r6
 8007290:	4667      	mov	r7, ip
 8007292:	3b20      	subs	r3, #32
 8007294:	40df      	lsrs	r7, r3
 8007296:	003b      	movs	r3, r7
 8007298:	2e20      	cmp	r6, #32
 800729a:	d005      	beq.n	80072a8 <__aeabi_dsub+0x1f4>
 800729c:	2740      	movs	r7, #64	; 0x40
 800729e:	1bbf      	subs	r7, r7, r6
 80072a0:	4666      	mov	r6, ip
 80072a2:	40be      	lsls	r6, r7
 80072a4:	4332      	orrs	r2, r6
 80072a6:	4690      	mov	r8, r2
 80072a8:	4646      	mov	r6, r8
 80072aa:	1e72      	subs	r2, r6, #1
 80072ac:	4196      	sbcs	r6, r2
 80072ae:	4333      	orrs	r3, r6
 80072b0:	e0da      	b.n	8007468 <__aeabi_dsub+0x3b4>
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d100      	bne.n	80072b8 <__aeabi_dsub+0x204>
 80072b6:	e214      	b.n	80076e2 <__aeabi_dsub+0x62e>
 80072b8:	4663      	mov	r3, ip
 80072ba:	4313      	orrs	r3, r2
 80072bc:	d100      	bne.n	80072c0 <__aeabi_dsub+0x20c>
 80072be:	e168      	b.n	8007592 <__aeabi_dsub+0x4de>
 80072c0:	2380      	movs	r3, #128	; 0x80
 80072c2:	074e      	lsls	r6, r1, #29
 80072c4:	08c0      	lsrs	r0, r0, #3
 80072c6:	08c9      	lsrs	r1, r1, #3
 80072c8:	031b      	lsls	r3, r3, #12
 80072ca:	4306      	orrs	r6, r0
 80072cc:	4219      	tst	r1, r3
 80072ce:	d008      	beq.n	80072e2 <__aeabi_dsub+0x22e>
 80072d0:	4660      	mov	r0, ip
 80072d2:	08c0      	lsrs	r0, r0, #3
 80072d4:	4218      	tst	r0, r3
 80072d6:	d104      	bne.n	80072e2 <__aeabi_dsub+0x22e>
 80072d8:	4663      	mov	r3, ip
 80072da:	0001      	movs	r1, r0
 80072dc:	08d2      	lsrs	r2, r2, #3
 80072de:	075e      	lsls	r6, r3, #29
 80072e0:	4316      	orrs	r6, r2
 80072e2:	00f3      	lsls	r3, r6, #3
 80072e4:	4699      	mov	r9, r3
 80072e6:	00c9      	lsls	r1, r1, #3
 80072e8:	0f72      	lsrs	r2, r6, #29
 80072ea:	4d44      	ldr	r5, [pc, #272]	; (80073fc <__aeabi_dsub+0x348>)
 80072ec:	4311      	orrs	r1, r2
 80072ee:	464b      	mov	r3, r9
 80072f0:	08de      	lsrs	r6, r3, #3
 80072f2:	4b42      	ldr	r3, [pc, #264]	; (80073fc <__aeabi_dsub+0x348>)
 80072f4:	074f      	lsls	r7, r1, #29
 80072f6:	4337      	orrs	r7, r6
 80072f8:	08ca      	lsrs	r2, r1, #3
 80072fa:	429d      	cmp	r5, r3
 80072fc:	d100      	bne.n	8007300 <__aeabi_dsub+0x24c>
 80072fe:	e06e      	b.n	80073de <__aeabi_dsub+0x32a>
 8007300:	0312      	lsls	r2, r2, #12
 8007302:	056d      	lsls	r5, r5, #21
 8007304:	0b12      	lsrs	r2, r2, #12
 8007306:	0d6d      	lsrs	r5, r5, #21
 8007308:	2100      	movs	r1, #0
 800730a:	0312      	lsls	r2, r2, #12
 800730c:	0b13      	lsrs	r3, r2, #12
 800730e:	0d0a      	lsrs	r2, r1, #20
 8007310:	0512      	lsls	r2, r2, #20
 8007312:	431a      	orrs	r2, r3
 8007314:	4b3b      	ldr	r3, [pc, #236]	; (8007404 <__aeabi_dsub+0x350>)
 8007316:	052d      	lsls	r5, r5, #20
 8007318:	4013      	ands	r3, r2
 800731a:	432b      	orrs	r3, r5
 800731c:	005b      	lsls	r3, r3, #1
 800731e:	07e4      	lsls	r4, r4, #31
 8007320:	085b      	lsrs	r3, r3, #1
 8007322:	4323      	orrs	r3, r4
 8007324:	0038      	movs	r0, r7
 8007326:	0019      	movs	r1, r3
 8007328:	bc3c      	pop	{r2, r3, r4, r5}
 800732a:	4690      	mov	r8, r2
 800732c:	4699      	mov	r9, r3
 800732e:	46a2      	mov	sl, r4
 8007330:	46ab      	mov	fp, r5
 8007332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007334:	4663      	mov	r3, ip
 8007336:	4313      	orrs	r3, r2
 8007338:	d011      	beq.n	800735e <__aeabi_dsub+0x2aa>
 800733a:	1e73      	subs	r3, r6, #1
 800733c:	2b00      	cmp	r3, #0
 800733e:	d000      	beq.n	8007342 <__aeabi_dsub+0x28e>
 8007340:	e107      	b.n	8007552 <__aeabi_dsub+0x49e>
 8007342:	1886      	adds	r6, r0, r2
 8007344:	4286      	cmp	r6, r0
 8007346:	4180      	sbcs	r0, r0
 8007348:	4461      	add	r1, ip
 800734a:	4240      	negs	r0, r0
 800734c:	1809      	adds	r1, r1, r0
 800734e:	2501      	movs	r5, #1
 8007350:	020b      	lsls	r3, r1, #8
 8007352:	d537      	bpl.n	80073c4 <__aeabi_dsub+0x310>
 8007354:	2502      	movs	r5, #2
 8007356:	e77b      	b.n	8007250 <__aeabi_dsub+0x19c>
 8007358:	003e      	movs	r6, r7
 800735a:	4661      	mov	r1, ip
 800735c:	4691      	mov	r9, r2
 800735e:	0035      	movs	r5, r6
 8007360:	e7c5      	b.n	80072ee <__aeabi_dsub+0x23a>
 8007362:	465c      	mov	r4, fp
 8007364:	2d00      	cmp	r5, #0
 8007366:	d000      	beq.n	800736a <__aeabi_dsub+0x2b6>
 8007368:	e0e1      	b.n	800752e <__aeabi_dsub+0x47a>
 800736a:	000b      	movs	r3, r1
 800736c:	4303      	orrs	r3, r0
 800736e:	d0f3      	beq.n	8007358 <__aeabi_dsub+0x2a4>
 8007370:	1c73      	adds	r3, r6, #1
 8007372:	d100      	bne.n	8007376 <__aeabi_dsub+0x2c2>
 8007374:	e1ac      	b.n	80076d0 <__aeabi_dsub+0x61c>
 8007376:	4b21      	ldr	r3, [pc, #132]	; (80073fc <__aeabi_dsub+0x348>)
 8007378:	429f      	cmp	r7, r3
 800737a:	d100      	bne.n	800737e <__aeabi_dsub+0x2ca>
 800737c:	e13a      	b.n	80075f4 <__aeabi_dsub+0x540>
 800737e:	43f3      	mvns	r3, r6
 8007380:	2b38      	cmp	r3, #56	; 0x38
 8007382:	dd00      	ble.n	8007386 <__aeabi_dsub+0x2d2>
 8007384:	e16f      	b.n	8007666 <__aeabi_dsub+0x5b2>
 8007386:	2b1f      	cmp	r3, #31
 8007388:	dd00      	ble.n	800738c <__aeabi_dsub+0x2d8>
 800738a:	e18c      	b.n	80076a6 <__aeabi_dsub+0x5f2>
 800738c:	2520      	movs	r5, #32
 800738e:	000e      	movs	r6, r1
 8007390:	1aed      	subs	r5, r5, r3
 8007392:	40ae      	lsls	r6, r5
 8007394:	46b0      	mov	r8, r6
 8007396:	0006      	movs	r6, r0
 8007398:	46aa      	mov	sl, r5
 800739a:	40de      	lsrs	r6, r3
 800739c:	4645      	mov	r5, r8
 800739e:	4335      	orrs	r5, r6
 80073a0:	002e      	movs	r6, r5
 80073a2:	4655      	mov	r5, sl
 80073a4:	40d9      	lsrs	r1, r3
 80073a6:	40a8      	lsls	r0, r5
 80073a8:	4663      	mov	r3, ip
 80073aa:	1e45      	subs	r5, r0, #1
 80073ac:	41a8      	sbcs	r0, r5
 80073ae:	1a5b      	subs	r3, r3, r1
 80073b0:	469c      	mov	ip, r3
 80073b2:	4330      	orrs	r0, r6
 80073b4:	1a16      	subs	r6, r2, r0
 80073b6:	42b2      	cmp	r2, r6
 80073b8:	4192      	sbcs	r2, r2
 80073ba:	4663      	mov	r3, ip
 80073bc:	4252      	negs	r2, r2
 80073be:	1a99      	subs	r1, r3, r2
 80073c0:	003d      	movs	r5, r7
 80073c2:	e6b4      	b.n	800712e <__aeabi_dsub+0x7a>
 80073c4:	2207      	movs	r2, #7
 80073c6:	4032      	ands	r2, r6
 80073c8:	2a00      	cmp	r2, #0
 80073ca:	d000      	beq.n	80073ce <__aeabi_dsub+0x31a>
 80073cc:	e6e4      	b.n	8007198 <__aeabi_dsub+0xe4>
 80073ce:	4b0b      	ldr	r3, [pc, #44]	; (80073fc <__aeabi_dsub+0x348>)
 80073d0:	08f6      	lsrs	r6, r6, #3
 80073d2:	074f      	lsls	r7, r1, #29
 80073d4:	4337      	orrs	r7, r6
 80073d6:	08ca      	lsrs	r2, r1, #3
 80073d8:	429d      	cmp	r5, r3
 80073da:	d000      	beq.n	80073de <__aeabi_dsub+0x32a>
 80073dc:	e790      	b.n	8007300 <__aeabi_dsub+0x24c>
 80073de:	003b      	movs	r3, r7
 80073e0:	4313      	orrs	r3, r2
 80073e2:	d100      	bne.n	80073e6 <__aeabi_dsub+0x332>
 80073e4:	e1a6      	b.n	8007734 <__aeabi_dsub+0x680>
 80073e6:	2380      	movs	r3, #128	; 0x80
 80073e8:	031b      	lsls	r3, r3, #12
 80073ea:	431a      	orrs	r2, r3
 80073ec:	0312      	lsls	r2, r2, #12
 80073ee:	0b12      	lsrs	r2, r2, #12
 80073f0:	4d02      	ldr	r5, [pc, #8]	; (80073fc <__aeabi_dsub+0x348>)
 80073f2:	e789      	b.n	8007308 <__aeabi_dsub+0x254>
 80073f4:	0015      	movs	r5, r2
 80073f6:	2200      	movs	r2, #0
 80073f8:	2700      	movs	r7, #0
 80073fa:	e785      	b.n	8007308 <__aeabi_dsub+0x254>
 80073fc:	000007ff 	.word	0x000007ff
 8007400:	ff7fffff 	.word	0xff7fffff
 8007404:	800fffff 	.word	0x800fffff
 8007408:	2e00      	cmp	r6, #0
 800740a:	d000      	beq.n	800740e <__aeabi_dsub+0x35a>
 800740c:	e0c7      	b.n	800759e <__aeabi_dsub+0x4ea>
 800740e:	1c6b      	adds	r3, r5, #1
 8007410:	055e      	lsls	r6, r3, #21
 8007412:	0d76      	lsrs	r6, r6, #21
 8007414:	2e01      	cmp	r6, #1
 8007416:	dc00      	bgt.n	800741a <__aeabi_dsub+0x366>
 8007418:	e0f0      	b.n	80075fc <__aeabi_dsub+0x548>
 800741a:	4dc8      	ldr	r5, [pc, #800]	; (800773c <__aeabi_dsub+0x688>)
 800741c:	42ab      	cmp	r3, r5
 800741e:	d100      	bne.n	8007422 <__aeabi_dsub+0x36e>
 8007420:	e0b9      	b.n	8007596 <__aeabi_dsub+0x4e2>
 8007422:	1885      	adds	r5, r0, r2
 8007424:	000a      	movs	r2, r1
 8007426:	4285      	cmp	r5, r0
 8007428:	4189      	sbcs	r1, r1
 800742a:	4462      	add	r2, ip
 800742c:	4249      	negs	r1, r1
 800742e:	1851      	adds	r1, r2, r1
 8007430:	2207      	movs	r2, #7
 8007432:	07ce      	lsls	r6, r1, #31
 8007434:	086d      	lsrs	r5, r5, #1
 8007436:	432e      	orrs	r6, r5
 8007438:	0849      	lsrs	r1, r1, #1
 800743a:	4032      	ands	r2, r6
 800743c:	001d      	movs	r5, r3
 800743e:	e6a9      	b.n	8007194 <__aeabi_dsub+0xe0>
 8007440:	49bf      	ldr	r1, [pc, #764]	; (8007740 <__aeabi_dsub+0x68c>)
 8007442:	1aed      	subs	r5, r5, r3
 8007444:	4011      	ands	r1, r2
 8007446:	2207      	movs	r2, #7
 8007448:	4032      	ands	r2, r6
 800744a:	e6a3      	b.n	8007194 <__aeabi_dsub+0xe0>
 800744c:	0032      	movs	r2, r6
 800744e:	3828      	subs	r0, #40	; 0x28
 8007450:	4082      	lsls	r2, r0
 8007452:	2600      	movs	r6, #0
 8007454:	e686      	b.n	8007164 <__aeabi_dsub+0xb0>
 8007456:	0030      	movs	r0, r6
 8007458:	f000 fb08 	bl	8007a6c <__clzsi2>
 800745c:	3020      	adds	r0, #32
 800745e:	e673      	b.n	8007148 <__aeabi_dsub+0x94>
 8007460:	4663      	mov	r3, ip
 8007462:	4313      	orrs	r3, r2
 8007464:	1e5a      	subs	r2, r3, #1
 8007466:	4193      	sbcs	r3, r2
 8007468:	1ac6      	subs	r6, r0, r3
 800746a:	42b0      	cmp	r0, r6
 800746c:	4180      	sbcs	r0, r0
 800746e:	4240      	negs	r0, r0
 8007470:	1a09      	subs	r1, r1, r0
 8007472:	e65c      	b.n	800712e <__aeabi_dsub+0x7a>
 8007474:	000e      	movs	r6, r1
 8007476:	4667      	mov	r7, ip
 8007478:	4306      	orrs	r6, r0
 800747a:	4317      	orrs	r7, r2
 800747c:	2d00      	cmp	r5, #0
 800747e:	d15e      	bne.n	800753e <__aeabi_dsub+0x48a>
 8007480:	2e00      	cmp	r6, #0
 8007482:	d000      	beq.n	8007486 <__aeabi_dsub+0x3d2>
 8007484:	e0f3      	b.n	800766e <__aeabi_dsub+0x5ba>
 8007486:	2f00      	cmp	r7, #0
 8007488:	d100      	bne.n	800748c <__aeabi_dsub+0x3d8>
 800748a:	e11e      	b.n	80076ca <__aeabi_dsub+0x616>
 800748c:	465c      	mov	r4, fp
 800748e:	4661      	mov	r1, ip
 8007490:	4691      	mov	r9, r2
 8007492:	e72c      	b.n	80072ee <__aeabi_dsub+0x23a>
 8007494:	4fa9      	ldr	r7, [pc, #676]	; (800773c <__aeabi_dsub+0x688>)
 8007496:	42be      	cmp	r6, r7
 8007498:	d07b      	beq.n	8007592 <__aeabi_dsub+0x4de>
 800749a:	001e      	movs	r6, r3
 800749c:	e6f1      	b.n	8007282 <__aeabi_dsub+0x1ce>
 800749e:	0010      	movs	r0, r2
 80074a0:	3d1f      	subs	r5, #31
 80074a2:	40e8      	lsrs	r0, r5
 80074a4:	2b20      	cmp	r3, #32
 80074a6:	d003      	beq.n	80074b0 <__aeabi_dsub+0x3fc>
 80074a8:	2140      	movs	r1, #64	; 0x40
 80074aa:	1acb      	subs	r3, r1, r3
 80074ac:	409a      	lsls	r2, r3
 80074ae:	4316      	orrs	r6, r2
 80074b0:	1e73      	subs	r3, r6, #1
 80074b2:	419e      	sbcs	r6, r3
 80074b4:	2207      	movs	r2, #7
 80074b6:	4306      	orrs	r6, r0
 80074b8:	4032      	ands	r2, r6
 80074ba:	2100      	movs	r1, #0
 80074bc:	2500      	movs	r5, #0
 80074be:	e783      	b.n	80073c8 <__aeabi_dsub+0x314>
 80074c0:	1a16      	subs	r6, r2, r0
 80074c2:	4663      	mov	r3, ip
 80074c4:	42b2      	cmp	r2, r6
 80074c6:	4180      	sbcs	r0, r0
 80074c8:	1a59      	subs	r1, r3, r1
 80074ca:	4240      	negs	r0, r0
 80074cc:	1a0b      	subs	r3, r1, r0
 80074ce:	4698      	mov	r8, r3
 80074d0:	465c      	mov	r4, fp
 80074d2:	e632      	b.n	800713a <__aeabi_dsub+0x86>
 80074d4:	2e1f      	cmp	r6, #31
 80074d6:	dd00      	ble.n	80074da <__aeabi_dsub+0x426>
 80074d8:	e0ab      	b.n	8007632 <__aeabi_dsub+0x57e>
 80074da:	2720      	movs	r7, #32
 80074dc:	1bbb      	subs	r3, r7, r6
 80074de:	469a      	mov	sl, r3
 80074e0:	4663      	mov	r3, ip
 80074e2:	4657      	mov	r7, sl
 80074e4:	40bb      	lsls	r3, r7
 80074e6:	4699      	mov	r9, r3
 80074e8:	0013      	movs	r3, r2
 80074ea:	464f      	mov	r7, r9
 80074ec:	40f3      	lsrs	r3, r6
 80074ee:	431f      	orrs	r7, r3
 80074f0:	003b      	movs	r3, r7
 80074f2:	4657      	mov	r7, sl
 80074f4:	40ba      	lsls	r2, r7
 80074f6:	1e57      	subs	r7, r2, #1
 80074f8:	41ba      	sbcs	r2, r7
 80074fa:	4313      	orrs	r3, r2
 80074fc:	4662      	mov	r2, ip
 80074fe:	40f2      	lsrs	r2, r6
 8007500:	1889      	adds	r1, r1, r2
 8007502:	e698      	b.n	8007236 <__aeabi_dsub+0x182>
 8007504:	2720      	movs	r7, #32
 8007506:	1bbb      	subs	r3, r7, r6
 8007508:	469a      	mov	sl, r3
 800750a:	4663      	mov	r3, ip
 800750c:	4657      	mov	r7, sl
 800750e:	40bb      	lsls	r3, r7
 8007510:	4699      	mov	r9, r3
 8007512:	0013      	movs	r3, r2
 8007514:	464f      	mov	r7, r9
 8007516:	40f3      	lsrs	r3, r6
 8007518:	431f      	orrs	r7, r3
 800751a:	003b      	movs	r3, r7
 800751c:	4657      	mov	r7, sl
 800751e:	40ba      	lsls	r2, r7
 8007520:	1e57      	subs	r7, r2, #1
 8007522:	41ba      	sbcs	r2, r7
 8007524:	4313      	orrs	r3, r2
 8007526:	4662      	mov	r2, ip
 8007528:	40f2      	lsrs	r2, r6
 800752a:	1a89      	subs	r1, r1, r2
 800752c:	e79c      	b.n	8007468 <__aeabi_dsub+0x3b4>
 800752e:	4b83      	ldr	r3, [pc, #524]	; (800773c <__aeabi_dsub+0x688>)
 8007530:	429f      	cmp	r7, r3
 8007532:	d05f      	beq.n	80075f4 <__aeabi_dsub+0x540>
 8007534:	2580      	movs	r5, #128	; 0x80
 8007536:	042d      	lsls	r5, r5, #16
 8007538:	4273      	negs	r3, r6
 800753a:	4329      	orrs	r1, r5
 800753c:	e720      	b.n	8007380 <__aeabi_dsub+0x2cc>
 800753e:	2e00      	cmp	r6, #0
 8007540:	d10c      	bne.n	800755c <__aeabi_dsub+0x4a8>
 8007542:	2f00      	cmp	r7, #0
 8007544:	d100      	bne.n	8007548 <__aeabi_dsub+0x494>
 8007546:	e0d0      	b.n	80076ea <__aeabi_dsub+0x636>
 8007548:	465c      	mov	r4, fp
 800754a:	4661      	mov	r1, ip
 800754c:	4691      	mov	r9, r2
 800754e:	4d7b      	ldr	r5, [pc, #492]	; (800773c <__aeabi_dsub+0x688>)
 8007550:	e6cd      	b.n	80072ee <__aeabi_dsub+0x23a>
 8007552:	4f7a      	ldr	r7, [pc, #488]	; (800773c <__aeabi_dsub+0x688>)
 8007554:	42be      	cmp	r6, r7
 8007556:	d01c      	beq.n	8007592 <__aeabi_dsub+0x4de>
 8007558:	001e      	movs	r6, r3
 800755a:	e665      	b.n	8007228 <__aeabi_dsub+0x174>
 800755c:	2f00      	cmp	r7, #0
 800755e:	d018      	beq.n	8007592 <__aeabi_dsub+0x4de>
 8007560:	08c0      	lsrs	r0, r0, #3
 8007562:	074e      	lsls	r6, r1, #29
 8007564:	4306      	orrs	r6, r0
 8007566:	2080      	movs	r0, #128	; 0x80
 8007568:	08c9      	lsrs	r1, r1, #3
 800756a:	0300      	lsls	r0, r0, #12
 800756c:	4201      	tst	r1, r0
 800756e:	d008      	beq.n	8007582 <__aeabi_dsub+0x4ce>
 8007570:	4663      	mov	r3, ip
 8007572:	08dc      	lsrs	r4, r3, #3
 8007574:	4204      	tst	r4, r0
 8007576:	d104      	bne.n	8007582 <__aeabi_dsub+0x4ce>
 8007578:	0021      	movs	r1, r4
 800757a:	46da      	mov	sl, fp
 800757c:	08d2      	lsrs	r2, r2, #3
 800757e:	075e      	lsls	r6, r3, #29
 8007580:	4316      	orrs	r6, r2
 8007582:	00f3      	lsls	r3, r6, #3
 8007584:	4699      	mov	r9, r3
 8007586:	2401      	movs	r4, #1
 8007588:	4653      	mov	r3, sl
 800758a:	00c9      	lsls	r1, r1, #3
 800758c:	0f72      	lsrs	r2, r6, #29
 800758e:	4311      	orrs	r1, r2
 8007590:	401c      	ands	r4, r3
 8007592:	4d6a      	ldr	r5, [pc, #424]	; (800773c <__aeabi_dsub+0x688>)
 8007594:	e6ab      	b.n	80072ee <__aeabi_dsub+0x23a>
 8007596:	001d      	movs	r5, r3
 8007598:	2200      	movs	r2, #0
 800759a:	2700      	movs	r7, #0
 800759c:	e6b4      	b.n	8007308 <__aeabi_dsub+0x254>
 800759e:	2d00      	cmp	r5, #0
 80075a0:	d159      	bne.n	8007656 <__aeabi_dsub+0x5a2>
 80075a2:	000b      	movs	r3, r1
 80075a4:	4303      	orrs	r3, r0
 80075a6:	d100      	bne.n	80075aa <__aeabi_dsub+0x4f6>
 80075a8:	e6d6      	b.n	8007358 <__aeabi_dsub+0x2a4>
 80075aa:	1c73      	adds	r3, r6, #1
 80075ac:	d100      	bne.n	80075b0 <__aeabi_dsub+0x4fc>
 80075ae:	e0b2      	b.n	8007716 <__aeabi_dsub+0x662>
 80075b0:	4b62      	ldr	r3, [pc, #392]	; (800773c <__aeabi_dsub+0x688>)
 80075b2:	429f      	cmp	r7, r3
 80075b4:	d01e      	beq.n	80075f4 <__aeabi_dsub+0x540>
 80075b6:	43f3      	mvns	r3, r6
 80075b8:	2b38      	cmp	r3, #56	; 0x38
 80075ba:	dc6f      	bgt.n	800769c <__aeabi_dsub+0x5e8>
 80075bc:	2b1f      	cmp	r3, #31
 80075be:	dd00      	ble.n	80075c2 <__aeabi_dsub+0x50e>
 80075c0:	e097      	b.n	80076f2 <__aeabi_dsub+0x63e>
 80075c2:	2520      	movs	r5, #32
 80075c4:	000e      	movs	r6, r1
 80075c6:	1aed      	subs	r5, r5, r3
 80075c8:	40ae      	lsls	r6, r5
 80075ca:	46b0      	mov	r8, r6
 80075cc:	0006      	movs	r6, r0
 80075ce:	46aa      	mov	sl, r5
 80075d0:	40de      	lsrs	r6, r3
 80075d2:	4645      	mov	r5, r8
 80075d4:	4335      	orrs	r5, r6
 80075d6:	002e      	movs	r6, r5
 80075d8:	4655      	mov	r5, sl
 80075da:	40a8      	lsls	r0, r5
 80075dc:	40d9      	lsrs	r1, r3
 80075de:	1e45      	subs	r5, r0, #1
 80075e0:	41a8      	sbcs	r0, r5
 80075e2:	448c      	add	ip, r1
 80075e4:	4306      	orrs	r6, r0
 80075e6:	18b6      	adds	r6, r6, r2
 80075e8:	4296      	cmp	r6, r2
 80075ea:	4192      	sbcs	r2, r2
 80075ec:	4251      	negs	r1, r2
 80075ee:	4461      	add	r1, ip
 80075f0:	003d      	movs	r5, r7
 80075f2:	e625      	b.n	8007240 <__aeabi_dsub+0x18c>
 80075f4:	003d      	movs	r5, r7
 80075f6:	4661      	mov	r1, ip
 80075f8:	4691      	mov	r9, r2
 80075fa:	e678      	b.n	80072ee <__aeabi_dsub+0x23a>
 80075fc:	000b      	movs	r3, r1
 80075fe:	4303      	orrs	r3, r0
 8007600:	2d00      	cmp	r5, #0
 8007602:	d000      	beq.n	8007606 <__aeabi_dsub+0x552>
 8007604:	e655      	b.n	80072b2 <__aeabi_dsub+0x1fe>
 8007606:	2b00      	cmp	r3, #0
 8007608:	d0f5      	beq.n	80075f6 <__aeabi_dsub+0x542>
 800760a:	4663      	mov	r3, ip
 800760c:	4313      	orrs	r3, r2
 800760e:	d100      	bne.n	8007612 <__aeabi_dsub+0x55e>
 8007610:	e66d      	b.n	80072ee <__aeabi_dsub+0x23a>
 8007612:	1886      	adds	r6, r0, r2
 8007614:	4286      	cmp	r6, r0
 8007616:	4180      	sbcs	r0, r0
 8007618:	4461      	add	r1, ip
 800761a:	4240      	negs	r0, r0
 800761c:	1809      	adds	r1, r1, r0
 800761e:	2200      	movs	r2, #0
 8007620:	020b      	lsls	r3, r1, #8
 8007622:	d400      	bmi.n	8007626 <__aeabi_dsub+0x572>
 8007624:	e6d0      	b.n	80073c8 <__aeabi_dsub+0x314>
 8007626:	4b46      	ldr	r3, [pc, #280]	; (8007740 <__aeabi_dsub+0x68c>)
 8007628:	3501      	adds	r5, #1
 800762a:	4019      	ands	r1, r3
 800762c:	e5b2      	b.n	8007194 <__aeabi_dsub+0xe0>
 800762e:	46b1      	mov	r9, r6
 8007630:	e65d      	b.n	80072ee <__aeabi_dsub+0x23a>
 8007632:	0033      	movs	r3, r6
 8007634:	4667      	mov	r7, ip
 8007636:	3b20      	subs	r3, #32
 8007638:	40df      	lsrs	r7, r3
 800763a:	003b      	movs	r3, r7
 800763c:	2e20      	cmp	r6, #32
 800763e:	d005      	beq.n	800764c <__aeabi_dsub+0x598>
 8007640:	2740      	movs	r7, #64	; 0x40
 8007642:	1bbf      	subs	r7, r7, r6
 8007644:	4666      	mov	r6, ip
 8007646:	40be      	lsls	r6, r7
 8007648:	4332      	orrs	r2, r6
 800764a:	4690      	mov	r8, r2
 800764c:	4646      	mov	r6, r8
 800764e:	1e72      	subs	r2, r6, #1
 8007650:	4196      	sbcs	r6, r2
 8007652:	4333      	orrs	r3, r6
 8007654:	e5ef      	b.n	8007236 <__aeabi_dsub+0x182>
 8007656:	4b39      	ldr	r3, [pc, #228]	; (800773c <__aeabi_dsub+0x688>)
 8007658:	429f      	cmp	r7, r3
 800765a:	d0cb      	beq.n	80075f4 <__aeabi_dsub+0x540>
 800765c:	2580      	movs	r5, #128	; 0x80
 800765e:	042d      	lsls	r5, r5, #16
 8007660:	4273      	negs	r3, r6
 8007662:	4329      	orrs	r1, r5
 8007664:	e7a8      	b.n	80075b8 <__aeabi_dsub+0x504>
 8007666:	4308      	orrs	r0, r1
 8007668:	1e41      	subs	r1, r0, #1
 800766a:	4188      	sbcs	r0, r1
 800766c:	e6a2      	b.n	80073b4 <__aeabi_dsub+0x300>
 800766e:	2f00      	cmp	r7, #0
 8007670:	d100      	bne.n	8007674 <__aeabi_dsub+0x5c0>
 8007672:	e63c      	b.n	80072ee <__aeabi_dsub+0x23a>
 8007674:	4663      	mov	r3, ip
 8007676:	1a86      	subs	r6, r0, r2
 8007678:	1acf      	subs	r7, r1, r3
 800767a:	42b0      	cmp	r0, r6
 800767c:	419b      	sbcs	r3, r3
 800767e:	425b      	negs	r3, r3
 8007680:	1afb      	subs	r3, r7, r3
 8007682:	4698      	mov	r8, r3
 8007684:	021b      	lsls	r3, r3, #8
 8007686:	d54e      	bpl.n	8007726 <__aeabi_dsub+0x672>
 8007688:	1a16      	subs	r6, r2, r0
 800768a:	4663      	mov	r3, ip
 800768c:	42b2      	cmp	r2, r6
 800768e:	4192      	sbcs	r2, r2
 8007690:	1a59      	subs	r1, r3, r1
 8007692:	4252      	negs	r2, r2
 8007694:	1a89      	subs	r1, r1, r2
 8007696:	465c      	mov	r4, fp
 8007698:	2200      	movs	r2, #0
 800769a:	e57b      	b.n	8007194 <__aeabi_dsub+0xe0>
 800769c:	4301      	orrs	r1, r0
 800769e:	000e      	movs	r6, r1
 80076a0:	1e71      	subs	r1, r6, #1
 80076a2:	418e      	sbcs	r6, r1
 80076a4:	e79f      	b.n	80075e6 <__aeabi_dsub+0x532>
 80076a6:	001d      	movs	r5, r3
 80076a8:	000e      	movs	r6, r1
 80076aa:	3d20      	subs	r5, #32
 80076ac:	40ee      	lsrs	r6, r5
 80076ae:	46b0      	mov	r8, r6
 80076b0:	2b20      	cmp	r3, #32
 80076b2:	d004      	beq.n	80076be <__aeabi_dsub+0x60a>
 80076b4:	2540      	movs	r5, #64	; 0x40
 80076b6:	1aeb      	subs	r3, r5, r3
 80076b8:	4099      	lsls	r1, r3
 80076ba:	4308      	orrs	r0, r1
 80076bc:	4681      	mov	r9, r0
 80076be:	4648      	mov	r0, r9
 80076c0:	4643      	mov	r3, r8
 80076c2:	1e41      	subs	r1, r0, #1
 80076c4:	4188      	sbcs	r0, r1
 80076c6:	4318      	orrs	r0, r3
 80076c8:	e674      	b.n	80073b4 <__aeabi_dsub+0x300>
 80076ca:	2200      	movs	r2, #0
 80076cc:	2400      	movs	r4, #0
 80076ce:	e617      	b.n	8007300 <__aeabi_dsub+0x24c>
 80076d0:	1a16      	subs	r6, r2, r0
 80076d2:	4663      	mov	r3, ip
 80076d4:	42b2      	cmp	r2, r6
 80076d6:	4192      	sbcs	r2, r2
 80076d8:	1a59      	subs	r1, r3, r1
 80076da:	4252      	negs	r2, r2
 80076dc:	1a89      	subs	r1, r1, r2
 80076de:	003d      	movs	r5, r7
 80076e0:	e525      	b.n	800712e <__aeabi_dsub+0x7a>
 80076e2:	4661      	mov	r1, ip
 80076e4:	4691      	mov	r9, r2
 80076e6:	4d15      	ldr	r5, [pc, #84]	; (800773c <__aeabi_dsub+0x688>)
 80076e8:	e601      	b.n	80072ee <__aeabi_dsub+0x23a>
 80076ea:	2280      	movs	r2, #128	; 0x80
 80076ec:	2400      	movs	r4, #0
 80076ee:	0312      	lsls	r2, r2, #12
 80076f0:	e679      	b.n	80073e6 <__aeabi_dsub+0x332>
 80076f2:	001d      	movs	r5, r3
 80076f4:	000e      	movs	r6, r1
 80076f6:	3d20      	subs	r5, #32
 80076f8:	40ee      	lsrs	r6, r5
 80076fa:	46b0      	mov	r8, r6
 80076fc:	2b20      	cmp	r3, #32
 80076fe:	d004      	beq.n	800770a <__aeabi_dsub+0x656>
 8007700:	2540      	movs	r5, #64	; 0x40
 8007702:	1aeb      	subs	r3, r5, r3
 8007704:	4099      	lsls	r1, r3
 8007706:	4308      	orrs	r0, r1
 8007708:	4681      	mov	r9, r0
 800770a:	464e      	mov	r6, r9
 800770c:	4643      	mov	r3, r8
 800770e:	1e71      	subs	r1, r6, #1
 8007710:	418e      	sbcs	r6, r1
 8007712:	431e      	orrs	r6, r3
 8007714:	e767      	b.n	80075e6 <__aeabi_dsub+0x532>
 8007716:	1886      	adds	r6, r0, r2
 8007718:	4296      	cmp	r6, r2
 800771a:	419b      	sbcs	r3, r3
 800771c:	4461      	add	r1, ip
 800771e:	425b      	negs	r3, r3
 8007720:	18c9      	adds	r1, r1, r3
 8007722:	003d      	movs	r5, r7
 8007724:	e58c      	b.n	8007240 <__aeabi_dsub+0x18c>
 8007726:	4647      	mov	r7, r8
 8007728:	4337      	orrs	r7, r6
 800772a:	d0ce      	beq.n	80076ca <__aeabi_dsub+0x616>
 800772c:	2207      	movs	r2, #7
 800772e:	4641      	mov	r1, r8
 8007730:	4032      	ands	r2, r6
 8007732:	e649      	b.n	80073c8 <__aeabi_dsub+0x314>
 8007734:	2700      	movs	r7, #0
 8007736:	003a      	movs	r2, r7
 8007738:	e5e6      	b.n	8007308 <__aeabi_dsub+0x254>
 800773a:	46c0      	nop			; (mov r8, r8)
 800773c:	000007ff 	.word	0x000007ff
 8007740:	ff7fffff 	.word	0xff7fffff

08007744 <__aeabi_dcmpun>:
 8007744:	b570      	push	{r4, r5, r6, lr}
 8007746:	4e0c      	ldr	r6, [pc, #48]	; (8007778 <__aeabi_dcmpun+0x34>)
 8007748:	030d      	lsls	r5, r1, #12
 800774a:	031c      	lsls	r4, r3, #12
 800774c:	0049      	lsls	r1, r1, #1
 800774e:	005b      	lsls	r3, r3, #1
 8007750:	0b2d      	lsrs	r5, r5, #12
 8007752:	0d49      	lsrs	r1, r1, #21
 8007754:	0b24      	lsrs	r4, r4, #12
 8007756:	0d5b      	lsrs	r3, r3, #21
 8007758:	42b1      	cmp	r1, r6
 800775a:	d008      	beq.n	800776e <__aeabi_dcmpun+0x2a>
 800775c:	4906      	ldr	r1, [pc, #24]	; (8007778 <__aeabi_dcmpun+0x34>)
 800775e:	2000      	movs	r0, #0
 8007760:	428b      	cmp	r3, r1
 8007762:	d103      	bne.n	800776c <__aeabi_dcmpun+0x28>
 8007764:	4314      	orrs	r4, r2
 8007766:	0020      	movs	r0, r4
 8007768:	1e44      	subs	r4, r0, #1
 800776a:	41a0      	sbcs	r0, r4
 800776c:	bd70      	pop	{r4, r5, r6, pc}
 800776e:	4305      	orrs	r5, r0
 8007770:	2001      	movs	r0, #1
 8007772:	2d00      	cmp	r5, #0
 8007774:	d1fa      	bne.n	800776c <__aeabi_dcmpun+0x28>
 8007776:	e7f1      	b.n	800775c <__aeabi_dcmpun+0x18>
 8007778:	000007ff 	.word	0x000007ff

0800777c <__aeabi_d2iz>:
 800777c:	b530      	push	{r4, r5, lr}
 800777e:	4d14      	ldr	r5, [pc, #80]	; (80077d0 <__aeabi_d2iz+0x54>)
 8007780:	030a      	lsls	r2, r1, #12
 8007782:	004b      	lsls	r3, r1, #1
 8007784:	0b12      	lsrs	r2, r2, #12
 8007786:	0d5b      	lsrs	r3, r3, #21
 8007788:	0fc9      	lsrs	r1, r1, #31
 800778a:	2400      	movs	r4, #0
 800778c:	42ab      	cmp	r3, r5
 800778e:	dd11      	ble.n	80077b4 <__aeabi_d2iz+0x38>
 8007790:	4c10      	ldr	r4, [pc, #64]	; (80077d4 <__aeabi_d2iz+0x58>)
 8007792:	42a3      	cmp	r3, r4
 8007794:	dc10      	bgt.n	80077b8 <__aeabi_d2iz+0x3c>
 8007796:	2480      	movs	r4, #128	; 0x80
 8007798:	0364      	lsls	r4, r4, #13
 800779a:	4322      	orrs	r2, r4
 800779c:	4c0e      	ldr	r4, [pc, #56]	; (80077d8 <__aeabi_d2iz+0x5c>)
 800779e:	1ae4      	subs	r4, r4, r3
 80077a0:	2c1f      	cmp	r4, #31
 80077a2:	dd0c      	ble.n	80077be <__aeabi_d2iz+0x42>
 80077a4:	480d      	ldr	r0, [pc, #52]	; (80077dc <__aeabi_d2iz+0x60>)
 80077a6:	1ac3      	subs	r3, r0, r3
 80077a8:	40da      	lsrs	r2, r3
 80077aa:	0013      	movs	r3, r2
 80077ac:	425c      	negs	r4, r3
 80077ae:	2900      	cmp	r1, #0
 80077b0:	d100      	bne.n	80077b4 <__aeabi_d2iz+0x38>
 80077b2:	001c      	movs	r4, r3
 80077b4:	0020      	movs	r0, r4
 80077b6:	bd30      	pop	{r4, r5, pc}
 80077b8:	4b09      	ldr	r3, [pc, #36]	; (80077e0 <__aeabi_d2iz+0x64>)
 80077ba:	18cc      	adds	r4, r1, r3
 80077bc:	e7fa      	b.n	80077b4 <__aeabi_d2iz+0x38>
 80077be:	4d09      	ldr	r5, [pc, #36]	; (80077e4 <__aeabi_d2iz+0x68>)
 80077c0:	40e0      	lsrs	r0, r4
 80077c2:	46ac      	mov	ip, r5
 80077c4:	4463      	add	r3, ip
 80077c6:	409a      	lsls	r2, r3
 80077c8:	0013      	movs	r3, r2
 80077ca:	4303      	orrs	r3, r0
 80077cc:	e7ee      	b.n	80077ac <__aeabi_d2iz+0x30>
 80077ce:	46c0      	nop			; (mov r8, r8)
 80077d0:	000003fe 	.word	0x000003fe
 80077d4:	0000041d 	.word	0x0000041d
 80077d8:	00000433 	.word	0x00000433
 80077dc:	00000413 	.word	0x00000413
 80077e0:	7fffffff 	.word	0x7fffffff
 80077e4:	fffffbed 	.word	0xfffffbed

080077e8 <__aeabi_i2d>:
 80077e8:	b570      	push	{r4, r5, r6, lr}
 80077ea:	2800      	cmp	r0, #0
 80077ec:	d02d      	beq.n	800784a <__aeabi_i2d+0x62>
 80077ee:	17c3      	asrs	r3, r0, #31
 80077f0:	18c5      	adds	r5, r0, r3
 80077f2:	405d      	eors	r5, r3
 80077f4:	0fc4      	lsrs	r4, r0, #31
 80077f6:	0028      	movs	r0, r5
 80077f8:	f000 f938 	bl	8007a6c <__clzsi2>
 80077fc:	4b15      	ldr	r3, [pc, #84]	; (8007854 <__aeabi_i2d+0x6c>)
 80077fe:	1a1b      	subs	r3, r3, r0
 8007800:	055b      	lsls	r3, r3, #21
 8007802:	0d5b      	lsrs	r3, r3, #21
 8007804:	280a      	cmp	r0, #10
 8007806:	dd15      	ble.n	8007834 <__aeabi_i2d+0x4c>
 8007808:	380b      	subs	r0, #11
 800780a:	4085      	lsls	r5, r0
 800780c:	2200      	movs	r2, #0
 800780e:	032d      	lsls	r5, r5, #12
 8007810:	0b2d      	lsrs	r5, r5, #12
 8007812:	2100      	movs	r1, #0
 8007814:	0010      	movs	r0, r2
 8007816:	032d      	lsls	r5, r5, #12
 8007818:	0d0a      	lsrs	r2, r1, #20
 800781a:	0b2d      	lsrs	r5, r5, #12
 800781c:	0512      	lsls	r2, r2, #20
 800781e:	432a      	orrs	r2, r5
 8007820:	4d0d      	ldr	r5, [pc, #52]	; (8007858 <__aeabi_i2d+0x70>)
 8007822:	051b      	lsls	r3, r3, #20
 8007824:	402a      	ands	r2, r5
 8007826:	4313      	orrs	r3, r2
 8007828:	005b      	lsls	r3, r3, #1
 800782a:	07e4      	lsls	r4, r4, #31
 800782c:	085b      	lsrs	r3, r3, #1
 800782e:	4323      	orrs	r3, r4
 8007830:	0019      	movs	r1, r3
 8007832:	bd70      	pop	{r4, r5, r6, pc}
 8007834:	0002      	movs	r2, r0
 8007836:	0029      	movs	r1, r5
 8007838:	3215      	adds	r2, #21
 800783a:	4091      	lsls	r1, r2
 800783c:	000a      	movs	r2, r1
 800783e:	210b      	movs	r1, #11
 8007840:	1a08      	subs	r0, r1, r0
 8007842:	40c5      	lsrs	r5, r0
 8007844:	032d      	lsls	r5, r5, #12
 8007846:	0b2d      	lsrs	r5, r5, #12
 8007848:	e7e3      	b.n	8007812 <__aeabi_i2d+0x2a>
 800784a:	2400      	movs	r4, #0
 800784c:	2300      	movs	r3, #0
 800784e:	2500      	movs	r5, #0
 8007850:	2200      	movs	r2, #0
 8007852:	e7de      	b.n	8007812 <__aeabi_i2d+0x2a>
 8007854:	0000041e 	.word	0x0000041e
 8007858:	800fffff 	.word	0x800fffff

0800785c <__aeabi_ui2d>:
 800785c:	b510      	push	{r4, lr}
 800785e:	1e04      	subs	r4, r0, #0
 8007860:	d025      	beq.n	80078ae <__aeabi_ui2d+0x52>
 8007862:	f000 f903 	bl	8007a6c <__clzsi2>
 8007866:	4b14      	ldr	r3, [pc, #80]	; (80078b8 <__aeabi_ui2d+0x5c>)
 8007868:	1a1b      	subs	r3, r3, r0
 800786a:	055b      	lsls	r3, r3, #21
 800786c:	0d5b      	lsrs	r3, r3, #21
 800786e:	280a      	cmp	r0, #10
 8007870:	dd12      	ble.n	8007898 <__aeabi_ui2d+0x3c>
 8007872:	380b      	subs	r0, #11
 8007874:	4084      	lsls	r4, r0
 8007876:	2200      	movs	r2, #0
 8007878:	0324      	lsls	r4, r4, #12
 800787a:	0b24      	lsrs	r4, r4, #12
 800787c:	2100      	movs	r1, #0
 800787e:	0010      	movs	r0, r2
 8007880:	0324      	lsls	r4, r4, #12
 8007882:	0d0a      	lsrs	r2, r1, #20
 8007884:	0b24      	lsrs	r4, r4, #12
 8007886:	0512      	lsls	r2, r2, #20
 8007888:	4322      	orrs	r2, r4
 800788a:	4c0c      	ldr	r4, [pc, #48]	; (80078bc <__aeabi_ui2d+0x60>)
 800788c:	051b      	lsls	r3, r3, #20
 800788e:	4022      	ands	r2, r4
 8007890:	4313      	orrs	r3, r2
 8007892:	005b      	lsls	r3, r3, #1
 8007894:	0859      	lsrs	r1, r3, #1
 8007896:	bd10      	pop	{r4, pc}
 8007898:	0002      	movs	r2, r0
 800789a:	0021      	movs	r1, r4
 800789c:	3215      	adds	r2, #21
 800789e:	4091      	lsls	r1, r2
 80078a0:	000a      	movs	r2, r1
 80078a2:	210b      	movs	r1, #11
 80078a4:	1a08      	subs	r0, r1, r0
 80078a6:	40c4      	lsrs	r4, r0
 80078a8:	0324      	lsls	r4, r4, #12
 80078aa:	0b24      	lsrs	r4, r4, #12
 80078ac:	e7e6      	b.n	800787c <__aeabi_ui2d+0x20>
 80078ae:	2300      	movs	r3, #0
 80078b0:	2400      	movs	r4, #0
 80078b2:	2200      	movs	r2, #0
 80078b4:	e7e2      	b.n	800787c <__aeabi_ui2d+0x20>
 80078b6:	46c0      	nop			; (mov r8, r8)
 80078b8:	0000041e 	.word	0x0000041e
 80078bc:	800fffff 	.word	0x800fffff

080078c0 <__aeabi_f2d>:
 80078c0:	0041      	lsls	r1, r0, #1
 80078c2:	0e09      	lsrs	r1, r1, #24
 80078c4:	1c4b      	adds	r3, r1, #1
 80078c6:	b570      	push	{r4, r5, r6, lr}
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	0246      	lsls	r6, r0, #9
 80078cc:	0a75      	lsrs	r5, r6, #9
 80078ce:	0fc4      	lsrs	r4, r0, #31
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	dd14      	ble.n	80078fe <__aeabi_f2d+0x3e>
 80078d4:	23e0      	movs	r3, #224	; 0xe0
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	076d      	lsls	r5, r5, #29
 80078da:	0b36      	lsrs	r6, r6, #12
 80078dc:	18cb      	adds	r3, r1, r3
 80078de:	2100      	movs	r1, #0
 80078e0:	0d0a      	lsrs	r2, r1, #20
 80078e2:	0028      	movs	r0, r5
 80078e4:	0512      	lsls	r2, r2, #20
 80078e6:	4d1c      	ldr	r5, [pc, #112]	; (8007958 <__aeabi_f2d+0x98>)
 80078e8:	4332      	orrs	r2, r6
 80078ea:	055b      	lsls	r3, r3, #21
 80078ec:	402a      	ands	r2, r5
 80078ee:	085b      	lsrs	r3, r3, #1
 80078f0:	4313      	orrs	r3, r2
 80078f2:	005b      	lsls	r3, r3, #1
 80078f4:	07e4      	lsls	r4, r4, #31
 80078f6:	085b      	lsrs	r3, r3, #1
 80078f8:	4323      	orrs	r3, r4
 80078fa:	0019      	movs	r1, r3
 80078fc:	bd70      	pop	{r4, r5, r6, pc}
 80078fe:	2900      	cmp	r1, #0
 8007900:	d114      	bne.n	800792c <__aeabi_f2d+0x6c>
 8007902:	2d00      	cmp	r5, #0
 8007904:	d01e      	beq.n	8007944 <__aeabi_f2d+0x84>
 8007906:	0028      	movs	r0, r5
 8007908:	f000 f8b0 	bl	8007a6c <__clzsi2>
 800790c:	280a      	cmp	r0, #10
 800790e:	dc1c      	bgt.n	800794a <__aeabi_f2d+0x8a>
 8007910:	230b      	movs	r3, #11
 8007912:	002a      	movs	r2, r5
 8007914:	1a1b      	subs	r3, r3, r0
 8007916:	40da      	lsrs	r2, r3
 8007918:	0003      	movs	r3, r0
 800791a:	3315      	adds	r3, #21
 800791c:	409d      	lsls	r5, r3
 800791e:	4b0f      	ldr	r3, [pc, #60]	; (800795c <__aeabi_f2d+0x9c>)
 8007920:	0312      	lsls	r2, r2, #12
 8007922:	1a1b      	subs	r3, r3, r0
 8007924:	055b      	lsls	r3, r3, #21
 8007926:	0b16      	lsrs	r6, r2, #12
 8007928:	0d5b      	lsrs	r3, r3, #21
 800792a:	e7d8      	b.n	80078de <__aeabi_f2d+0x1e>
 800792c:	2d00      	cmp	r5, #0
 800792e:	d006      	beq.n	800793e <__aeabi_f2d+0x7e>
 8007930:	0b32      	lsrs	r2, r6, #12
 8007932:	2680      	movs	r6, #128	; 0x80
 8007934:	0336      	lsls	r6, r6, #12
 8007936:	076d      	lsls	r5, r5, #29
 8007938:	4316      	orrs	r6, r2
 800793a:	4b09      	ldr	r3, [pc, #36]	; (8007960 <__aeabi_f2d+0xa0>)
 800793c:	e7cf      	b.n	80078de <__aeabi_f2d+0x1e>
 800793e:	4b08      	ldr	r3, [pc, #32]	; (8007960 <__aeabi_f2d+0xa0>)
 8007940:	2600      	movs	r6, #0
 8007942:	e7cc      	b.n	80078de <__aeabi_f2d+0x1e>
 8007944:	2300      	movs	r3, #0
 8007946:	2600      	movs	r6, #0
 8007948:	e7c9      	b.n	80078de <__aeabi_f2d+0x1e>
 800794a:	0003      	movs	r3, r0
 800794c:	002a      	movs	r2, r5
 800794e:	3b0b      	subs	r3, #11
 8007950:	409a      	lsls	r2, r3
 8007952:	2500      	movs	r5, #0
 8007954:	e7e3      	b.n	800791e <__aeabi_f2d+0x5e>
 8007956:	46c0      	nop			; (mov r8, r8)
 8007958:	800fffff 	.word	0x800fffff
 800795c:	00000389 	.word	0x00000389
 8007960:	000007ff 	.word	0x000007ff

08007964 <__aeabi_d2f>:
 8007964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007966:	004c      	lsls	r4, r1, #1
 8007968:	0d64      	lsrs	r4, r4, #21
 800796a:	030b      	lsls	r3, r1, #12
 800796c:	1c62      	adds	r2, r4, #1
 800796e:	0a5b      	lsrs	r3, r3, #9
 8007970:	0f46      	lsrs	r6, r0, #29
 8007972:	0552      	lsls	r2, r2, #21
 8007974:	0fc9      	lsrs	r1, r1, #31
 8007976:	431e      	orrs	r6, r3
 8007978:	00c5      	lsls	r5, r0, #3
 800797a:	0d52      	lsrs	r2, r2, #21
 800797c:	2a01      	cmp	r2, #1
 800797e:	dd29      	ble.n	80079d4 <__aeabi_d2f+0x70>
 8007980:	4b37      	ldr	r3, [pc, #220]	; (8007a60 <__aeabi_d2f+0xfc>)
 8007982:	18e7      	adds	r7, r4, r3
 8007984:	2ffe      	cmp	r7, #254	; 0xfe
 8007986:	dc1c      	bgt.n	80079c2 <__aeabi_d2f+0x5e>
 8007988:	2f00      	cmp	r7, #0
 800798a:	dd3b      	ble.n	8007a04 <__aeabi_d2f+0xa0>
 800798c:	0180      	lsls	r0, r0, #6
 800798e:	1e43      	subs	r3, r0, #1
 8007990:	4198      	sbcs	r0, r3
 8007992:	2207      	movs	r2, #7
 8007994:	00f3      	lsls	r3, r6, #3
 8007996:	0f6d      	lsrs	r5, r5, #29
 8007998:	4303      	orrs	r3, r0
 800799a:	432b      	orrs	r3, r5
 800799c:	401a      	ands	r2, r3
 800799e:	2a00      	cmp	r2, #0
 80079a0:	d004      	beq.n	80079ac <__aeabi_d2f+0x48>
 80079a2:	220f      	movs	r2, #15
 80079a4:	401a      	ands	r2, r3
 80079a6:	2a04      	cmp	r2, #4
 80079a8:	d000      	beq.n	80079ac <__aeabi_d2f+0x48>
 80079aa:	3304      	adds	r3, #4
 80079ac:	2280      	movs	r2, #128	; 0x80
 80079ae:	04d2      	lsls	r2, r2, #19
 80079b0:	401a      	ands	r2, r3
 80079b2:	d024      	beq.n	80079fe <__aeabi_d2f+0x9a>
 80079b4:	3701      	adds	r7, #1
 80079b6:	b2fa      	uxtb	r2, r7
 80079b8:	2fff      	cmp	r7, #255	; 0xff
 80079ba:	d002      	beq.n	80079c2 <__aeabi_d2f+0x5e>
 80079bc:	019b      	lsls	r3, r3, #6
 80079be:	0a58      	lsrs	r0, r3, #9
 80079c0:	e001      	b.n	80079c6 <__aeabi_d2f+0x62>
 80079c2:	22ff      	movs	r2, #255	; 0xff
 80079c4:	2000      	movs	r0, #0
 80079c6:	0240      	lsls	r0, r0, #9
 80079c8:	05d2      	lsls	r2, r2, #23
 80079ca:	0a40      	lsrs	r0, r0, #9
 80079cc:	07c9      	lsls	r1, r1, #31
 80079ce:	4310      	orrs	r0, r2
 80079d0:	4308      	orrs	r0, r1
 80079d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079d4:	4335      	orrs	r5, r6
 80079d6:	2c00      	cmp	r4, #0
 80079d8:	d104      	bne.n	80079e4 <__aeabi_d2f+0x80>
 80079da:	2d00      	cmp	r5, #0
 80079dc:	d10a      	bne.n	80079f4 <__aeabi_d2f+0x90>
 80079de:	2200      	movs	r2, #0
 80079e0:	2000      	movs	r0, #0
 80079e2:	e7f0      	b.n	80079c6 <__aeabi_d2f+0x62>
 80079e4:	2d00      	cmp	r5, #0
 80079e6:	d0ec      	beq.n	80079c2 <__aeabi_d2f+0x5e>
 80079e8:	2080      	movs	r0, #128	; 0x80
 80079ea:	03c0      	lsls	r0, r0, #15
 80079ec:	4330      	orrs	r0, r6
 80079ee:	22ff      	movs	r2, #255	; 0xff
 80079f0:	e7e9      	b.n	80079c6 <__aeabi_d2f+0x62>
 80079f2:	2400      	movs	r4, #0
 80079f4:	2300      	movs	r3, #0
 80079f6:	025b      	lsls	r3, r3, #9
 80079f8:	0a58      	lsrs	r0, r3, #9
 80079fa:	b2e2      	uxtb	r2, r4
 80079fc:	e7e3      	b.n	80079c6 <__aeabi_d2f+0x62>
 80079fe:	08db      	lsrs	r3, r3, #3
 8007a00:	003c      	movs	r4, r7
 8007a02:	e7f8      	b.n	80079f6 <__aeabi_d2f+0x92>
 8007a04:	003b      	movs	r3, r7
 8007a06:	3317      	adds	r3, #23
 8007a08:	dbf3      	blt.n	80079f2 <__aeabi_d2f+0x8e>
 8007a0a:	2380      	movs	r3, #128	; 0x80
 8007a0c:	041b      	lsls	r3, r3, #16
 8007a0e:	4333      	orrs	r3, r6
 8007a10:	261e      	movs	r6, #30
 8007a12:	1bf6      	subs	r6, r6, r7
 8007a14:	2e1f      	cmp	r6, #31
 8007a16:	dd14      	ble.n	8007a42 <__aeabi_d2f+0xde>
 8007a18:	2202      	movs	r2, #2
 8007a1a:	4252      	negs	r2, r2
 8007a1c:	1bd7      	subs	r7, r2, r7
 8007a1e:	001a      	movs	r2, r3
 8007a20:	40fa      	lsrs	r2, r7
 8007a22:	0017      	movs	r7, r2
 8007a24:	2e20      	cmp	r6, #32
 8007a26:	d004      	beq.n	8007a32 <__aeabi_d2f+0xce>
 8007a28:	4a0e      	ldr	r2, [pc, #56]	; (8007a64 <__aeabi_d2f+0x100>)
 8007a2a:	4694      	mov	ip, r2
 8007a2c:	4464      	add	r4, ip
 8007a2e:	40a3      	lsls	r3, r4
 8007a30:	431d      	orrs	r5, r3
 8007a32:	002b      	movs	r3, r5
 8007a34:	1e5d      	subs	r5, r3, #1
 8007a36:	41ab      	sbcs	r3, r5
 8007a38:	2207      	movs	r2, #7
 8007a3a:	433b      	orrs	r3, r7
 8007a3c:	401a      	ands	r2, r3
 8007a3e:	2700      	movs	r7, #0
 8007a40:	e7ad      	b.n	800799e <__aeabi_d2f+0x3a>
 8007a42:	4a09      	ldr	r2, [pc, #36]	; (8007a68 <__aeabi_d2f+0x104>)
 8007a44:	0028      	movs	r0, r5
 8007a46:	18a2      	adds	r2, r4, r2
 8007a48:	4095      	lsls	r5, r2
 8007a4a:	4093      	lsls	r3, r2
 8007a4c:	1e6c      	subs	r4, r5, #1
 8007a4e:	41a5      	sbcs	r5, r4
 8007a50:	40f0      	lsrs	r0, r6
 8007a52:	2207      	movs	r2, #7
 8007a54:	432b      	orrs	r3, r5
 8007a56:	4303      	orrs	r3, r0
 8007a58:	401a      	ands	r2, r3
 8007a5a:	2700      	movs	r7, #0
 8007a5c:	e79f      	b.n	800799e <__aeabi_d2f+0x3a>
 8007a5e:	46c0      	nop			; (mov r8, r8)
 8007a60:	fffffc80 	.word	0xfffffc80
 8007a64:	fffffca2 	.word	0xfffffca2
 8007a68:	fffffc82 	.word	0xfffffc82

08007a6c <__clzsi2>:
 8007a6c:	211c      	movs	r1, #28
 8007a6e:	2301      	movs	r3, #1
 8007a70:	041b      	lsls	r3, r3, #16
 8007a72:	4298      	cmp	r0, r3
 8007a74:	d301      	bcc.n	8007a7a <__clzsi2+0xe>
 8007a76:	0c00      	lsrs	r0, r0, #16
 8007a78:	3910      	subs	r1, #16
 8007a7a:	0a1b      	lsrs	r3, r3, #8
 8007a7c:	4298      	cmp	r0, r3
 8007a7e:	d301      	bcc.n	8007a84 <__clzsi2+0x18>
 8007a80:	0a00      	lsrs	r0, r0, #8
 8007a82:	3908      	subs	r1, #8
 8007a84:	091b      	lsrs	r3, r3, #4
 8007a86:	4298      	cmp	r0, r3
 8007a88:	d301      	bcc.n	8007a8e <__clzsi2+0x22>
 8007a8a:	0900      	lsrs	r0, r0, #4
 8007a8c:	3904      	subs	r1, #4
 8007a8e:	a202      	add	r2, pc, #8	; (adr r2, 8007a98 <__clzsi2+0x2c>)
 8007a90:	5c10      	ldrb	r0, [r2, r0]
 8007a92:	1840      	adds	r0, r0, r1
 8007a94:	4770      	bx	lr
 8007a96:	46c0      	nop			; (mov r8, r8)
 8007a98:	02020304 	.word	0x02020304
 8007a9c:	01010101 	.word	0x01010101
	...

08007aa8 <__clzdi2>:
 8007aa8:	b510      	push	{r4, lr}
 8007aaa:	2900      	cmp	r1, #0
 8007aac:	d103      	bne.n	8007ab6 <__clzdi2+0xe>
 8007aae:	f7ff ffdd 	bl	8007a6c <__clzsi2>
 8007ab2:	3020      	adds	r0, #32
 8007ab4:	e002      	b.n	8007abc <__clzdi2+0x14>
 8007ab6:	1c08      	adds	r0, r1, #0
 8007ab8:	f7ff ffd8 	bl	8007a6c <__clzsi2>
 8007abc:	bd10      	pop	{r4, pc}
 8007abe:	46c0      	nop			; (mov r8, r8)

08007ac0 <bl_remapMemToSRAM>:
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;


void bl_remapMemToSRAM( void )
{
 8007ac0:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007ac2:	b672      	cpsid	i
	static uint32_t  *app_start = &__APPLICATION_ISR_START;

	size = ((&__APPLICATION_ISR_END) - (&__APPLICATION_ISR_START));

	__disable_irq();
	for(vecIndex = 0; vecIndex < size; vecIndex++){
 8007ac4:	2300      	movs	r3, #0
	size = ((&__APPLICATION_ISR_END) - (&__APPLICATION_ISR_START));
 8007ac6:	4908      	ldr	r1, [pc, #32]	; (8007ae8 <bl_remapMemToSRAM+0x28>)
 8007ac8:	4a08      	ldr	r2, [pc, #32]	; (8007aec <bl_remapMemToSRAM+0x2c>)
		VectorTable[vecIndex] = app_start[vecIndex];
 8007aca:	4809      	ldr	r0, [pc, #36]	; (8007af0 <bl_remapMemToSRAM+0x30>)
	size = ((&__APPLICATION_ISR_END) - (&__APPLICATION_ISR_START));
 8007acc:	1a52      	subs	r2, r2, r1
	for(vecIndex = 0; vecIndex < size; vecIndex++){
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d106      	bne.n	8007ae0 <bl_remapMemToSRAM+0x20>
	}
	__HAL_SYSCFG_REMAPMEMORY_SRAM();
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	4a07      	ldr	r2, [pc, #28]	; (8007af4 <bl_remapMemToSRAM+0x34>)
 8007ad6:	6811      	ldr	r1, [r2, #0]
 8007ad8:	430b      	orrs	r3, r1
 8007ada:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007adc:	b662      	cpsie	i
	__enable_irq();
}
 8007ade:	bd10      	pop	{r4, pc}
		VectorTable[vecIndex] = app_start[vecIndex];
 8007ae0:	58cc      	ldr	r4, [r1, r3]
 8007ae2:	50c4      	str	r4, [r0, r3]
 8007ae4:	3304      	adds	r3, #4
 8007ae6:	e7f2      	b.n	8007ace <bl_remapMemToSRAM+0xe>
 8007ae8:	08005000 	.word	0x08005000
 8007aec:	080050c0 	.word	0x080050c0
 8007af0:	20000000 	.word	0x20000000
 8007af4:	40010000 	.word	0x40010000

08007af8 <bl_prepare_jump>:

typedef void (*pFunction)(void);


void bl_prepare_jump()
{
 8007af8:	b510      	push	{r4, lr}

	HAL_DMA_Abort((&huart1)->hdmarx);
	HAL_DMA_Abort((&huart1)->hdmatx);
	HAL_DMA_Abort((&huart2)->hdmatx);
#endif
	HAL_NVIC_DisableIRQ(TIM7_IRQn);
 8007afa:	2012      	movs	r0, #18
 8007afc:	f001 fb10 	bl	8009120 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(SysTick_IRQn);
 8007b00:	2001      	movs	r0, #1
 8007b02:	4240      	negs	r0, r0
 8007b04:	f001 fb0c 	bl	8009120 <HAL_NVIC_DisableIRQ>
  __ASM volatile ("cpsid i" : : : "memory");
 8007b08:	b672      	cpsid	i

	__disable_irq();
	__HAL_SYSCFG_REMAPMEMORY_FLASH();
 8007b0a:	2103      	movs	r1, #3
 8007b0c:	4a02      	ldr	r2, [pc, #8]	; (8007b18 <bl_prepare_jump+0x20>)
 8007b0e:	6813      	ldr	r3, [r2, #0]
 8007b10:	438b      	bics	r3, r1
 8007b12:	6013      	str	r3, [r2, #0]

}
 8007b14:	bd10      	pop	{r4, pc}
 8007b16:	46c0      	nop			; (mov r8, r8)
 8007b18:	40010000 	.word	0x40010000

08007b1c <bl_jump>:

extern uint32_t iapMailbox[2];

void bl_jump()
{
 8007b1c:	b510      	push	{r4, lr}
	bl_prepare_jump();
 8007b1e:	f7ff ffeb 	bl	8007af8 <bl_prepare_jump>

	uint32_t bootloaderStack;
	pFunction bootloaderEntry;

	//Retrieve values
	bootloaderStack = *(__IO uint32_t *) (BL_ADDRESS);
 8007b22:	2380      	movs	r3, #128	; 0x80
 8007b24:	051b      	lsls	r3, r3, #20
 8007b26:	6819      	ldr	r1, [r3, #0]
	bootloaderEntry = (pFunction) *(__IO uint32_t*) (BL_ADDRESS + 4);
 8007b28:	4b05      	ldr	r3, [pc, #20]	; (8007b40 <bl_jump+0x24>)

	// Write magics to mailbox
	iapMailbox[0] = 0x524F5441;
 8007b2a:	4806      	ldr	r0, [pc, #24]	; (8007b44 <bl_jump+0x28>)
	bootloaderEntry = (pFunction) *(__IO uint32_t*) (BL_ADDRESS + 4);
 8007b2c:	681a      	ldr	r2, [r3, #0]
	iapMailbox[0] = 0x524F5441;
 8007b2e:	4b06      	ldr	r3, [pc, #24]	; (8007b48 <bl_jump+0x2c>)
 8007b30:	6018      	str	r0, [r3, #0]
	iapMailbox[1] = 0x54454b4e;
 8007b32:	4806      	ldr	r0, [pc, #24]	; (8007b4c <bl_jump+0x30>)
 8007b34:	6058      	str	r0, [r3, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8007b36:	f381 8808 	msr	MSP, r1
	//Set a valid stack pointer for the bootloader
	__set_MSP(bootloaderStack);


	//Start the bootloader
	bootloaderEntry();
 8007b3a:	4790      	blx	r2
}
 8007b3c:	bd10      	pop	{r4, pc}
 8007b3e:	46c0      	nop			; (mov r8, r8)
 8007b40:	08000004 	.word	0x08000004
 8007b44:	524f5441 	.word	0x524f5441
 8007b48:	20000100 	.word	0x20000100
 8007b4c:	54454b4e 	.word	0x54454b4e

08007b50 <bus_get_max_ch>:
 * @return
 */
int bus_get_max_ch()
{
	return CH_COUNT;
}
 8007b50:	2014      	movs	r0, #20
 8007b52:	4770      	bx	lr

08007b54 <bus_get_ch_conf_length>:
 * @return
 */
int bus_get_ch_conf_length()
{
	return CH_CONF_LENGTH;
}
 8007b54:	200c      	movs	r0, #12
 8007b56:	4770      	bx	lr

08007b58 <bus_read_ch_sample>:
 * @param ch	channel number
 * @param data	pointer to data
 * @return
 */
int bus_read_ch_sample(uint8_t ch, uint8_t* data)
{
 8007b58:	b510      	push	{r4, lr}
 8007b5a:	000b      	movs	r3, r1
	memcpy(data, (unsigned char*)&chData[ch], CH_SAMPLE_SIZE);
 8007b5c:	240c      	movs	r4, #12
 8007b5e:	0001      	movs	r1, r0
 8007b60:	4361      	muls	r1, r4
 8007b62:	4804      	ldr	r0, [pc, #16]	; (8007b74 <bus_read_ch_sample+0x1c>)
 8007b64:	0022      	movs	r2, r4
 8007b66:	1809      	adds	r1, r1, r0
 8007b68:	0018      	movs	r0, r3
 8007b6a:	f003 fb56 	bl	800b21a <memcpy>
	return CH_SAMPLE_SIZE;
}
 8007b6e:	0020      	movs	r0, r4
 8007b70:	bd10      	pop	{r4, pc}
 8007b72:	46c0      	nop			; (mov r8, r8)
 8007b74:	20000438 	.word	0x20000438

08007b78 <bus_read_all_sample>:
 * Wrapper for reading sample from all channels
 * @param data	pointer to data
 * @return
 */
int bus_read_all_sample(uint8_t *data)
{
 8007b78:	b570      	push	{r4, r5, r6, lr}
 8007b7a:	0005      	movs	r5, r0
 8007b7c:	2400      	movs	r4, #0
	memcpy(data, (unsigned char*)&chData[ch], CH_SAMPLE_SIZE);
 8007b7e:	4905      	ldr	r1, [pc, #20]	; (8007b94 <bus_read_all_sample+0x1c>)
 8007b80:	1928      	adds	r0, r5, r4
 8007b82:	1861      	adds	r1, r4, r1
 8007b84:	220c      	movs	r2, #12
 8007b86:	340c      	adds	r4, #12
 8007b88:	f003 fb47 	bl	800b21a <memcpy>
	for (int i=0;i<CH_COUNT;i++)
 8007b8c:	2cf0      	cmp	r4, #240	; 0xf0
 8007b8e:	d1f6      	bne.n	8007b7e <bus_read_all_sample+0x6>
	{
		data+=bus_read_ch_sample(i,data);
	}
	return CH_COUNT * CH_SAMPLE_SIZE;
}
 8007b90:	0020      	movs	r0, r4
 8007b92:	bd70      	pop	{r4, r5, r6, pc}
 8007b94:	20000438 	.word	0x20000438

08007b98 <bus_read_ch_conf>:
 * @param ch	channel number
 * @param data	pointer to data
 * @return
 */
int bus_read_ch_conf(uint8_t ch, uint8_t *data)
{
 8007b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memcpy(&data[0], (const char *)&(chConfig[ch].config), 4);
 8007b9a:	260c      	movs	r6, #12
{
 8007b9c:	000c      	movs	r4, r1
	memcpy(&data[0], (const char *)&(chConfig[ch].config), 4);
 8007b9e:	0031      	movs	r1, r6
 8007ba0:	2704      	movs	r7, #4
 8007ba2:	4341      	muls	r1, r0
 8007ba4:	4b0c      	ldr	r3, [pc, #48]	; (8007bd8 <bus_read_ch_conf+0x40>)
 8007ba6:	003a      	movs	r2, r7
{
 8007ba8:	0005      	movs	r5, r0
	memcpy(&data[0], (const char *)&(chConfig[ch].config), 4);
 8007baa:	18c9      	adds	r1, r1, r3
 8007bac:	0020      	movs	r0, r4
 8007bae:	f003 fb34 	bl	800b21a <memcpy>
	memcpy(&data[4], &gConfig.ch_conf[ch].cjOffset.cjOffBytes[0], 4);
 8007bb2:	231c      	movs	r3, #28
 8007bb4:	1c69      	adds	r1, r5, #1
 8007bb6:	4359      	muls	r1, r3
 8007bb8:	4a08      	ldr	r2, [pc, #32]	; (8007bdc <bus_read_ch_conf+0x44>)
 8007bba:	19e0      	adds	r0, r4, r7
 8007bbc:	1889      	adds	r1, r1, r2
 8007bbe:	003a      	movs	r2, r7
 8007bc0:	f003 fb2b 	bl	800b21a <memcpy>
	data[8] = gConfig.ch_conf[ch].enabled;
 8007bc4:	231c      	movs	r3, #28
 8007bc6:	435d      	muls	r5, r3
 8007bc8:	4b04      	ldr	r3, [pc, #16]	; (8007bdc <bus_read_ch_conf+0x44>)

	return CH_CONF_LENGTH;
}
 8007bca:	0030      	movs	r0, r6
	data[8] = gConfig.ch_conf[ch].enabled;
 8007bcc:	195d      	adds	r5, r3, r5
 8007bce:	3501      	adds	r5, #1
 8007bd0:	7feb      	ldrb	r3, [r5, #31]
 8007bd2:	7223      	strb	r3, [r4, #8]
}
 8007bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bd6:	46c0      	nop			; (mov r8, r8)
 8007bd8:	20000348 	.word	0x20000348
 8007bdc:	20000528 	.word	0x20000528

08007be0 <bus_read_all_conf>:
 * Wrapper for reading configuration from all channels
 * @param data	pointer to data
 * @return
 */
int bus_read_all_conf(uint8_t *data)
{
 8007be0:	b570      	push	{r4, r5, r6, lr}
 8007be2:	0005      	movs	r5, r0

	for (int i=0;i<CH_COUNT;i++)
 8007be4:	2400      	movs	r4, #0
	{
		data+=bus_read_ch_conf(i,data);
 8007be6:	b2e0      	uxtb	r0, r4
 8007be8:	0029      	movs	r1, r5
 8007bea:	f7ff ffd5 	bl	8007b98 <bus_read_ch_conf>
	for (int i=0;i<CH_COUNT;i++)
 8007bee:	3401      	adds	r4, #1
		data+=bus_read_ch_conf(i,data);
 8007bf0:	182d      	adds	r5, r5, r0
	for (int i=0;i<CH_COUNT;i++)
 8007bf2:	2c14      	cmp	r4, #20
 8007bf4:	d1f7      	bne.n	8007be6 <bus_read_all_conf+0x6>
	}
	return (CH_COUNT*CH_CONF_LENGTH);
}
 8007bf6:	20f0      	movs	r0, #240	; 0xf0
 8007bf8:	bd70      	pop	{r4, r5, r6, pc}
	...

08007bfc <bus_write_ch_conf>:
 * @param ch	channel number
 * @param data	pointer to data
 * @return
 */
int bus_write_ch_conf(uint8_t ch,uint8_t *data)
{
 8007bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	memcpy((const char *)&(chConfig[ch].config), &data[0], 4);
 8007bfe:	250c      	movs	r5, #12
 8007c00:	4345      	muls	r5, r0
 8007c02:	4f17      	ldr	r7, [pc, #92]	; (8007c60 <bus_write_ch_conf+0x64>)
{
 8007c04:	0004      	movs	r4, r0
	memcpy((const char *)&(chConfig[ch].config), &data[0], 4);
 8007c06:	2204      	movs	r2, #4
 8007c08:	19e8      	adds	r0, r5, r7
{
 8007c0a:	000e      	movs	r6, r1
	memcpy((const char *)&(chConfig[ch].config), &data[0], 4);
 8007c0c:	f003 fb05 	bl	800b21a <memcpy>
	memcpy(&gConfig.ch_conf[ch].cjOffset.cjOffBytes[0], &data[4], 4);
 8007c10:	231c      	movs	r3, #28
 8007c12:	1c60      	adds	r0, r4, #1
 8007c14:	4358      	muls	r0, r3
 8007c16:	4b13      	ldr	r3, [pc, #76]	; (8007c64 <bus_write_ch_conf+0x68>)
 8007c18:	1d31      	adds	r1, r6, #4
 8007c1a:	18c0      	adds	r0, r0, r3
 8007c1c:	2204      	movs	r2, #4
 8007c1e:	f003 fafc 	bl	800b21a <memcpy>

	gConfig.ch_conf[ch].enabled = data[8];
 8007c22:	7a32      	ldrb	r2, [r6, #8]
 8007c24:	261c      	movs	r6, #28
 8007c26:	4366      	muls	r6, r4
 8007c28:	4b0e      	ldr	r3, [pc, #56]	; (8007c64 <bus_write_ch_conf+0x68>)
	gConfig.ch_conf[ch].sensorType = chConfig[ch].config;
	LTC_TC_configureChannel(ch, chConfig[ch].config, gConfig.ch_conf[ch].CJ_channel,
 8007c2a:	0020      	movs	r0, r4
	gConfig.ch_conf[ch].enabled = data[8];
 8007c2c:	199e      	adds	r6, r3, r6
 8007c2e:	1c73      	adds	r3, r6, #1
 8007c30:	77da      	strb	r2, [r3, #31]
	gConfig.ch_conf[ch].sensorType = chConfig[ch].config;
 8007c32:	59eb      	ldr	r3, [r5, r7]
 8007c34:	60b3      	str	r3, [r6, #8]
	LTC_TC_configureChannel(ch, chConfig[ch].config, gConfig.ch_conf[ch].CJ_channel,
 8007c36:	69b3      	ldr	r3, [r6, #24]
 8007c38:	9301      	str	r3, [sp, #4]
 8007c3a:	6973      	ldr	r3, [r6, #20]
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	6933      	ldr	r3, [r6, #16]
 8007c40:	68f2      	ldr	r2, [r6, #12]
 8007c42:	59e9      	ldr	r1, [r5, r7]
 8007c44:	f000 fae0 	bl	8008208 <LTC_TC_configureChannel>
											gConfig.ch_conf[ch].singleEnded, gConfig.ch_conf[ch].openCktDetect, gConfig.ch_conf[ch].openCktDetectCurrent);

	dbg_printf("Ch : %d Write config : %d offset : %f\n", ch, chConfig[ch].config, gConfig.ch_conf[ch].cjOffset.cjOff);
 8007c48:	69f0      	ldr	r0, [r6, #28]
 8007c4a:	f7ff fe39 	bl	80078c0 <__aeabi_f2d>
 8007c4e:	9000      	str	r0, [sp, #0]
 8007c50:	9101      	str	r1, [sp, #4]
 8007c52:	59ea      	ldr	r2, [r5, r7]
 8007c54:	0021      	movs	r1, r4
 8007c56:	4804      	ldr	r0, [pc, #16]	; (8007c68 <bus_write_ch_conf+0x6c>)
 8007c58:	f004 f94c 	bl	800bef4 <iprintf>

	return CH_CONF_LENGTH;
}
 8007c5c:	200c      	movs	r0, #12
 8007c5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c60:	20000348 	.word	0x20000348
 8007c64:	20000528 	.word	0x20000528
 8007c68:	0800f828 	.word	0x0800f828

08007c6c <bus_write_all_conf>:
 * @param data	pointer to data
 * @param length (unusued)
 * @return
 */
int bus_write_all_conf(uint8_t *data,uint32_t length)
{
 8007c6c:	b570      	push	{r4, r5, r6, lr}
 8007c6e:	0005      	movs	r5, r0
	for (int i=0;i<CH_COUNT;i++)
 8007c70:	2400      	movs	r4, #0
	{
		data+=bus_write_ch_conf(i,data);
 8007c72:	b2e0      	uxtb	r0, r4
 8007c74:	0029      	movs	r1, r5
 8007c76:	f7ff ffc1 	bl	8007bfc <bus_write_ch_conf>
	for (int i=0;i<CH_COUNT;i++)
 8007c7a:	3401      	adds	r4, #1
		data+=bus_write_ch_conf(i,data);
 8007c7c:	182d      	adds	r5, r5, r0
	for (int i=0;i<CH_COUNT;i++)
 8007c7e:	2c14      	cmp	r4, #20
 8007c80:	d1f7      	bne.n	8007c72 <bus_write_all_conf+0x6>
	}

	return CH_COUNT * CH_CONF_LENGTH;
}
 8007c82:	20f0      	movs	r0, #240	; 0xf0
 8007c84:	bd70      	pop	{r4, r5, r6, pc}

08007c86 <bus_save_conf>:
/**
 * bus save conf
 * @return
 */
int bus_save_conf()
{
 8007c86:	b510      	push	{r4, lr}
	conf_save();
 8007c88:	f000 f852 	bl	8007d30 <conf_save>
	return 0;
}
 8007c8c:	2000      	movs	r0, #0
 8007c8e:	bd10      	pop	{r4, pc}

08007c90 <bus_entering_bootlaoder_hook>:
 * bus_entering_bootlaoder_hook
 */
void bus_entering_bootlaoder_hook()
{

}
 8007c90:	4770      	bx	lr
	...

08007c94 <bus_ping_received_hook>:
/**
 * bus_ping_received_hook
 */
void bus_ping_received_hook()
{
	pingReceived = 1;
 8007c94:	2201      	movs	r2, #1
 8007c96:	4b04      	ldr	r3, [pc, #16]	; (8007ca8 <bus_ping_received_hook+0x14>)
{
 8007c98:	b510      	push	{r4, lr}
	pingReceived = 1;
 8007c9a:	701a      	strb	r2, [r3, #0]
	pingTime = HAL_GetTick();
 8007c9c:	f001 f9f2 	bl	8009084 <HAL_GetTick>
 8007ca0:	4b02      	ldr	r3, [pc, #8]	; (8007cac <bus_ping_received_hook+0x18>)
 8007ca2:	6018      	str	r0, [r3, #0]
}
 8007ca4:	bd10      	pop	{r4, pc}
 8007ca6:	46c0      	nop			; (mov r8, r8)
 8007ca8:	20000310 	.word	0x20000310
 8007cac:	20000108 	.word	0x20000108

08007cb0 <bus_reseting_hook>:
 8007cb0:	4770      	bx	lr

08007cb2 <bus_rd_info_hook>:
 */
int bus_rd_info_hook(uint8_t *data)
{

	return 0;
}
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	4770      	bx	lr
	...

08007cb8 <conf_writeconf>:

extern uint32_t __CONFIG_START;
extern const tConfig DefaultConfig;

void conf_writeconf (tConfig * c)
{
 8007cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static tConfig  *conf = (tConfig *)&__CONFIG_START;
	for (int i=0;i<3;i++)
	{
		FLASH_If_Erase((uint32_t)&__CONFIG_START,FLASH_PAGE_SIZE); 								//Delete 1 page
		FLASH_If_Write((uint32_t)&__CONFIG_START,(uint32_t *)c,sizeof(tConfig)/sizeof(uint32_t));
		if (memcmp(conf,c,sizeof(tConfig))==0)
 8007cba:	278e      	movs	r7, #142	; 0x8e
{
 8007cbc:	0006      	movs	r6, r0
 8007cbe:	2403      	movs	r4, #3
		if (memcmp(conf,c,sizeof(tConfig))==0)
 8007cc0:	00bf      	lsls	r7, r7, #2
		FLASH_If_Erase((uint32_t)&__CONFIG_START,FLASH_PAGE_SIZE); 								//Delete 1 page
 8007cc2:	4d0a      	ldr	r5, [pc, #40]	; (8007cec <conf_writeconf+0x34>)
 8007cc4:	2180      	movs	r1, #128	; 0x80
 8007cc6:	0028      	movs	r0, r5
 8007cc8:	f000 f8ba 	bl	8007e40 <FLASH_If_Erase>
		FLASH_If_Write((uint32_t)&__CONFIG_START,(uint32_t *)c,sizeof(tConfig)/sizeof(uint32_t));
 8007ccc:	228e      	movs	r2, #142	; 0x8e
 8007cce:	0031      	movs	r1, r6
 8007cd0:	0028      	movs	r0, r5
 8007cd2:	f000 f8cc 	bl	8007e6e <FLASH_If_Write>
		if (memcmp(conf,c,sizeof(tConfig))==0)
 8007cd6:	003a      	movs	r2, r7
 8007cd8:	0031      	movs	r1, r6
 8007cda:	0028      	movs	r0, r5
 8007cdc:	f003 fa8e 	bl	800b1fc <memcmp>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	d002      	beq.n	8007cea <conf_writeconf+0x32>
 8007ce4:	3c01      	subs	r4, #1
	for (int i=0;i<3;i++)
 8007ce6:	2c00      	cmp	r4, #0
 8007ce8:	d1eb      	bne.n	8007cc2 <conf_writeconf+0xa>
		{
			break;
		}
	}

}
 8007cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cec:	0802f000 	.word	0x0802f000

08007cf0 <conf_checkandload>:

void conf_checkandload()
{
 8007cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	static tConfig  *conf = (tConfig *)&__CONFIG_START;

	if ((memcmp(&conf->magic,&DefaultConfig.magic,4)!= 0) || (conf->vers != DefaultConfig.vers))
 8007cf2:	4d0c      	ldr	r5, [pc, #48]	; (8007d24 <conf_checkandload+0x34>)
 8007cf4:	4c0c      	ldr	r4, [pc, #48]	; (8007d28 <conf_checkandload+0x38>)
 8007cf6:	2204      	movs	r2, #4
 8007cf8:	0029      	movs	r1, r5
 8007cfa:	0020      	movs	r0, r4
 8007cfc:	f003 fa7e 	bl	800b1fc <memcmp>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	d105      	bne.n	8007d10 <conf_checkandload+0x20>
 8007d04:	686b      	ldr	r3, [r5, #4]
 8007d06:	9301      	str	r3, [sp, #4]
 8007d08:	9a01      	ldr	r2, [sp, #4]
 8007d0a:	6863      	ldr	r3, [r4, #4]
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d002      	beq.n	8007d16 <conf_checkandload+0x26>
	{
		conf_writeconf((tConfig *)&DefaultConfig);
 8007d10:	0028      	movs	r0, r5
 8007d12:	f7ff ffd1 	bl	8007cb8 <conf_writeconf>
	}
	memcpy(&gConfig,conf,sizeof(tConfig));
 8007d16:	228e      	movs	r2, #142	; 0x8e
 8007d18:	0021      	movs	r1, r4
 8007d1a:	0092      	lsls	r2, r2, #2
 8007d1c:	4803      	ldr	r0, [pc, #12]	; (8007d2c <conf_checkandload+0x3c>)
 8007d1e:	f003 fa7c 	bl	800b21a <memcpy>
}
 8007d22:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8007d24:	0800f850 	.word	0x0800f850
 8007d28:	0802f000 	.word	0x0802f000
 8007d2c:	20000528 	.word	0x20000528

08007d30 <conf_save>:

void conf_save()
{
 8007d30:	b510      	push	{r4, lr}
	static tConfig  *conf = (tConfig *)&__CONFIG_START;

	memcpy(&gConfig.magic,&DefaultConfig.magic,4); 		//Ensure that magic and vers is the right value
 8007d32:	4b04      	ldr	r3, [pc, #16]	; (8007d44 <conf_save+0x14>)
 8007d34:	4804      	ldr	r0, [pc, #16]	; (8007d48 <conf_save+0x18>)
 8007d36:	681a      	ldr	r2, [r3, #0]
	gConfig.vers = DefaultConfig.vers;
 8007d38:	685b      	ldr	r3, [r3, #4]
	memcpy(&gConfig.magic,&DefaultConfig.magic,4); 		//Ensure that magic and vers is the right value
 8007d3a:	6002      	str	r2, [r0, #0]
	gConfig.vers = DefaultConfig.vers;
 8007d3c:	6043      	str	r3, [r0, #4]

	/*if (memcmp(&gConfig,conf,sizeof(tConfig))==0)		// Flash configuration and ram configuration matches so don't do anything
		return;
*/

	conf_writeconf(&gConfig);
 8007d3e:	f7ff ffbb 	bl	8007cb8 <conf_writeconf>
}
 8007d42:	bd10      	pop	{r4, pc}
 8007d44:	0800f850 	.word	0x0800f850
 8007d48:	20000528 	.word	0x20000528

08007d4c <conf_init>:
	memcpy(&gConfig,conf,sizeof(tConfig));
}


void conf_init()
{
 8007d4c:	b510      	push	{r4, lr}
	FLASH_If_Init();
 8007d4e:	f000 f869 	bl	8007e24 <FLASH_If_Init>
	conf_checkandload();
 8007d52:	f7ff ffcd 	bl	8007cf0 <conf_checkandload>
}
 8007d56:	bd10      	pop	{r4, pc}

08007d58 <crc16>:
static inline unsigned short crc_ccitt_byte(uint16_t crc, const uint8_t c)
{
	return (crc >> 8) ^ crc_ccitt_table[(crc ^ c) & 0xff];
}
unsigned short crc16(unsigned char *data_p, unsigned short length)
{
 8007d58:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int crc = 0x0000;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	0004      	movs	r4, r0
	return (crc >> 8) ^ crc_ccitt_table[(crc ^ c) & 0xff];
 8007d5e:	27ff      	movs	r7, #255	; 0xff
	while (length--)
 8007d60:	4d0a      	ldr	r5, [pc, #40]	; (8007d8c <crc16+0x34>)
	return (crc >> 8) ^ crc_ccitt_table[(crc ^ c) & 0xff];
 8007d62:	4e0b      	ldr	r6, [pc, #44]	; (8007d90 <crc16+0x38>)
	while (length--)
 8007d64:	3901      	subs	r1, #1
 8007d66:	b289      	uxth	r1, r1
 8007d68:	b298      	uxth	r0, r3
 8007d6a:	42a9      	cmp	r1, r5
 8007d6c:	d104      	bne.n	8007d78 <crc16+0x20>
		crc = crc_ccitt_byte(crc, *data_p++);
	return (crc>>8) | (crc<<8);;
 8007d6e:	0a1b      	lsrs	r3, r3, #8
 8007d70:	0200      	lsls	r0, r0, #8
 8007d72:	4318      	orrs	r0, r3
 8007d74:	b280      	uxth	r0, r0
}
 8007d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (crc >> 8) ^ crc_ccitt_table[(crc ^ c) & 0xff];
 8007d78:	7822      	ldrb	r2, [r4, #0]
 8007d7a:	0a00      	lsrs	r0, r0, #8
 8007d7c:	405a      	eors	r2, r3
 8007d7e:	403a      	ands	r2, r7
 8007d80:	0052      	lsls	r2, r2, #1
 8007d82:	5b93      	ldrh	r3, [r2, r6]
 8007d84:	3401      	adds	r4, #1
 8007d86:	4043      	eors	r3, r0
 8007d88:	e7ec      	b.n	8007d64 <crc16+0xc>
 8007d8a:	46c0      	nop			; (mov r8, r8)
 8007d8c:	0000ffff 	.word	0x0000ffff
 8007d90:	0800fa88 	.word	0x0800fa88

08007d94 <debug_init>:
unsigned int dbg_tx_count = 0;


void debug_init()
{
	memset(dbg_tx_buffer,0,DEBUG_TX_BUFFER_SIZE);
 8007d94:	2280      	movs	r2, #128	; 0x80
{
 8007d96:	b510      	push	{r4, lr}
	memset(dbg_tx_buffer,0,DEBUG_TX_BUFFER_SIZE);
 8007d98:	00d2      	lsls	r2, r2, #3
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	4803      	ldr	r0, [pc, #12]	; (8007dac <debug_init+0x18>)
 8007d9e:	f003 fa45 	bl	800b22c <memset>
	dbg_tx_count = 0;
 8007da2:	2200      	movs	r2, #0
 8007da4:	4b02      	ldr	r3, [pc, #8]	; (8007db0 <debug_init+0x1c>)
 8007da6:	601a      	str	r2, [r3, #0]
}
 8007da8:	bd10      	pop	{r4, pc}
 8007daa:	46c0      	nop			; (mov r8, r8)
 8007dac:	20000b60 	.word	0x20000b60
 8007db0:	20000314 	.word	0x20000314

08007db4 <debug_transmit_buffer>:

void debug_transmit_buffer()
{
 8007db4:	b570      	push	{r4, r5, r6, lr}
	uint32_t count = 0;

	memcpy(dbg_tx_dma_buffer,dbg_tx_buffer,dbg_tx_count);
 8007db6:	4d08      	ldr	r5, [pc, #32]	; (8007dd8 <debug_transmit_buffer+0x24>)
 8007db8:	4e08      	ldr	r6, [pc, #32]	; (8007ddc <debug_transmit_buffer+0x28>)
 8007dba:	682c      	ldr	r4, [r5, #0]
 8007dbc:	0030      	movs	r0, r6
 8007dbe:	0022      	movs	r2, r4
 8007dc0:	4907      	ldr	r1, [pc, #28]	; (8007de0 <debug_transmit_buffer+0x2c>)
 8007dc2:	f003 fa2a 	bl	800b21a <memcpy>
	dbg_tx(dbg_tx_dma_buffer,dbg_tx_count);
 8007dc6:	0031      	movs	r1, r6
 8007dc8:	b2a2      	uxth	r2, r4
 8007dca:	4806      	ldr	r0, [pc, #24]	; (8007de4 <debug_transmit_buffer+0x30>)
 8007dcc:	f002 fd94 	bl	800a8f8 <HAL_UART_Transmit_DMA>
	dbg_tx_count = 0;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	602b      	str	r3, [r5, #0]
}
 8007dd4:	bd70      	pop	{r4, r5, r6, pc}
 8007dd6:	46c0      	nop			; (mov r8, r8)
 8007dd8:	20000314 	.word	0x20000314
 8007ddc:	20000760 	.word	0x20000760
 8007de0:	20000b60 	.word	0x20000b60
 8007de4:	20001114 	.word	0x20001114

08007de8 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8007de8:	b570      	push	{r4, r5, r6, lr}
 8007dea:	0004      	movs	r4, r0
	if (ch != '\r')
 8007dec:	280d      	cmp	r0, #13
 8007dee:	d010      	beq.n	8007e12 <__io_putchar+0x2a>
	{
		dbg_tx_buffer[dbg_tx_count++] = ch;
 8007df0:	4909      	ldr	r1, [pc, #36]	; (8007e18 <__io_putchar+0x30>)
 8007df2:	480a      	ldr	r0, [pc, #40]	; (8007e1c <__io_putchar+0x34>)
 8007df4:	680b      	ldr	r3, [r1, #0]
 8007df6:	1c5a      	adds	r2, r3, #1
 8007df8:	600a      	str	r2, [r1, #0]
 8007dfa:	54c4      	strb	r4, [r0, r3]

		if ((ch == '\n') || (dbg_tx_count >= DEBUG_TX_BUFFER_SIZE))
 8007dfc:	2c0a      	cmp	r4, #10
 8007dfe:	d002      	beq.n	8007e06 <__io_putchar+0x1e>
 8007e00:	4d07      	ldr	r5, [pc, #28]	; (8007e20 <__io_putchar+0x38>)
 8007e02:	42aa      	cmp	r2, r5
 8007e04:	d905      	bls.n	8007e12 <__io_putchar+0x2a>
		{
			dbg_tx_buffer[dbg_tx_count++] = '\r';
 8007e06:	3302      	adds	r3, #2
 8007e08:	600b      	str	r3, [r1, #0]
 8007e0a:	230d      	movs	r3, #13
 8007e0c:	5483      	strb	r3, [r0, r2]
			debug_transmit_buffer();
 8007e0e:	f7ff ffd1 	bl	8007db4 <debug_transmit_buffer>
		}
	}

	return ch;
}
 8007e12:	0020      	movs	r0, r4
 8007e14:	bd70      	pop	{r4, r5, r6, pc}
 8007e16:	46c0      	nop			; (mov r8, r8)
 8007e18:	20000314 	.word	0x20000314
 8007e1c:	20000b60 	.word	0x20000b60
 8007e20:	000003ff 	.word	0x000003ff

08007e24 <FLASH_If_Init>:
 * @brief  Unlocks Flash for write access
 * @param  None
 * @retval None
 */
void FLASH_If_Init(void)
{
 8007e24:	b510      	push	{r4, lr}
	/* Unlock the Program memory */
	HAL_FLASH_Unlock();
 8007e26:	f001 fb51 	bl	80094cc <HAL_FLASH_Unlock>

	/* Clear all FLASH flags */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_PGAERR | FLASH_FLAG_WRPERR);
 8007e2a:	4b03      	ldr	r3, [pc, #12]	; (8007e38 <FLASH_If_Init+0x14>)
 8007e2c:	4a03      	ldr	r2, [pc, #12]	; (8007e3c <FLASH_If_Init+0x18>)
 8007e2e:	619a      	str	r2, [r3, #24]
	/* Unlock the Program memory */
	HAL_FLASH_Lock();
 8007e30:	f001 fb7a 	bl	8009528 <HAL_FLASH_Lock>
}
 8007e34:	bd10      	pop	{r4, pc}
 8007e36:	46c0      	nop			; (mov r8, r8)
 8007e38:	40022000 	.word	0x40022000
 8007e3c:	00000302 	.word	0x00000302

08007e40 <FLASH_If_Erase>:
 * @param  start: start of user flash area
 * @retval FLASHIF_OK : user flash area successfully erased
 *         FLASHIF_ERASEKO : error occurred
 */
uint32_t FLASH_If_Erase(uint32_t start,uint32_t length)
{
 8007e40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007e42:	000c      	movs	r4, r1
	uint32_t NbrOfPages = 0;
	uint32_t PageError = 0;
 8007e44:	2500      	movs	r5, #0
{
 8007e46:	0006      	movs	r6, r0
	uint32_t PageError = 0;
 8007e48:	9500      	str	r5, [sp, #0]

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();

	/* Get the sector where start the user flash area */
	NbrOfPages = length/FLASH_PAGE_SIZE;
 8007e4a:	09e4      	lsrs	r4, r4, #7
	HAL_FLASH_Unlock();
 8007e4c:	f001 fb3e 	bl	80094cc <HAL_FLASH_Unlock>

	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
	pEraseInit.PageAddress = start;
	//pEraseInit.Banks = FLASH_BANK_1;
	pEraseInit.NbPages = NbrOfPages;
	status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8007e50:	4669      	mov	r1, sp
 8007e52:	a801      	add	r0, sp, #4
	pEraseInit.NbPages = NbrOfPages;
 8007e54:	9403      	str	r4, [sp, #12]
	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8007e56:	9501      	str	r5, [sp, #4]
	pEraseInit.PageAddress = start;
 8007e58:	9602      	str	r6, [sp, #8]
	status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8007e5a:	f001 fbdf 	bl	800961c <HAL_FLASHEx_Erase>
 8007e5e:	0004      	movs	r4, r0

	/* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8007e60:	f001 fb62 	bl	8009528 <HAL_FLASH_Lock>

	if (status != HAL_OK)
 8007e64:	0020      	movs	r0, r4
 8007e66:	1e44      	subs	r4, r0, #1
 8007e68:	41a0      	sbcs	r0, r4
		/* Error occurred while page erase */
		return FLASHIF_ERASEKO;
	}

	return FLASHIF_OK;
}
 8007e6a:	b004      	add	sp, #16
 8007e6c:	bd70      	pop	{r4, r5, r6, pc}

08007e6e <FLASH_If_Write>:
 * @retval uint32_t 0: Data successfully written to Flash memory
 *         1: Error occurred while writing data in Flash memory
 *         2: Written Data in flash memory is different from expected one
 */
uint32_t FLASH_If_Write(uint32_t destination, uint32_t *p_source, uint32_t length)
{
 8007e6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e70:	0006      	movs	r6, r0
 8007e72:	9100      	str	r1, [sp, #0]
 8007e74:	9201      	str	r2, [sp, #4]
	uint32_t i = 0;

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();

	for (i = 0; i < length; i++)
 8007e76:	0034      	movs	r4, r6
	HAL_FLASH_Unlock();
 8007e78:	f001 fb28 	bl	80094cc <HAL_FLASH_Unlock>
	for (i = 0; i < length; i++)
 8007e7c:	2500      	movs	r5, #0
 8007e7e:	9b01      	ldr	r3, [sp, #4]
 8007e80:	429d      	cmp	r5, r3
 8007e82:	d103      	bne.n	8007e8c <FLASH_If_Write+0x1e>
		}
	}

	/* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8007e84:	f001 fb50 	bl	8009528 <HAL_FLASH_Lock>

	return (FLASHIF_OK);
 8007e88:	2000      	movs	r0, #0
}
 8007e8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e8c:	9b00      	ldr	r3, [sp, #0]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, destination, (p_source[i])) == HAL_OK)
 8007e8e:	0021      	movs	r1, r4
 8007e90:	1b9f      	subs	r7, r3, r6
 8007e92:	593a      	ldr	r2, [r7, r4]
 8007e94:	2002      	movs	r0, #2
 8007e96:	f001 fb8f 	bl	80095b8 <HAL_FLASH_Program>
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	d106      	bne.n	8007eac <FLASH_If_Write+0x3e>
			if (*(uint32_t*)destination != *(uint32_t*)(p_source+i))
 8007e9e:	593b      	ldr	r3, [r7, r4]
 8007ea0:	6822      	ldr	r2, [r4, #0]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d104      	bne.n	8007eb0 <FLASH_If_Write+0x42>
			destination += 4;
 8007ea6:	3404      	adds	r4, #4
	for (i = 0; i < length; i++)
 8007ea8:	3501      	adds	r5, #1
 8007eaa:	e7e8      	b.n	8007e7e <FLASH_If_Write+0x10>
			return (FLASHIF_WRITING_ERROR);
 8007eac:	2003      	movs	r0, #3
 8007eae:	e7ec      	b.n	8007e8a <FLASH_If_Write+0x1c>
				return(FLASHIF_WRITINGCTRL_ERROR);
 8007eb0:	2002      	movs	r0, #2
 8007eb2:	e7ea      	b.n	8007e8a <FLASH_If_Write+0x1c>

08007eb4 <GPIO_Configure>:
#include "stm32l0xx_hal.h"
#include "rt_config.h"

void GPIO_Configure(const tGPIOInit *conf, uint32_t count)
{
 8007eb4:	b530      	push	{r4, r5, lr}
 8007eb6:	2518      	movs	r5, #24
 8007eb8:	0004      	movs	r4, r0
 8007eba:	434d      	muls	r5, r1
 8007ebc:	b087      	sub	sp, #28
 8007ebe:	1945      	adds	r5, r0, r5
	GPIO_InitTypeDef GPIO_InitStruct;

	for (int i=0;i<count;i++)
 8007ec0:	42ac      	cmp	r4, r5
 8007ec2:	d101      	bne.n	8007ec8 <GPIO_Configure+0x14>
		GPIO_InitStruct.Pull = conf[i].pull;
		GPIO_InitStruct.Speed = conf[i].speed;

		HAL_GPIO_Init(conf[i].port,&GPIO_InitStruct);
	}
}
 8007ec4:	b007      	add	sp, #28
 8007ec6:	bd30      	pop	{r4, r5, pc}
		if (conf[i].mode == GPIO_MODE_OUTPUT_PP)
 8007ec8:	68a3      	ldr	r3, [r4, #8]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d104      	bne.n	8007ed8 <GPIO_Configure+0x24>
			HAL_GPIO_WritePin(conf[i].port,conf[i].pin,conf[i].initialState);
 8007ece:	7d22      	ldrb	r2, [r4, #20]
 8007ed0:	88a1      	ldrh	r1, [r4, #4]
 8007ed2:	6820      	ldr	r0, [r4, #0]
 8007ed4:	f001 fcaa 	bl	800982c <HAL_GPIO_WritePin>
		GPIO_InitStruct.Mode = conf[i].mode;
 8007ed8:	68a3      	ldr	r3, [r4, #8]
		HAL_GPIO_Init(conf[i].port,&GPIO_InitStruct);
 8007eda:	6820      	ldr	r0, [r4, #0]
		GPIO_InitStruct.Mode = conf[i].mode;
 8007edc:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Pin = conf[i].pin;
 8007ede:	88a3      	ldrh	r3, [r4, #4]
		HAL_GPIO_Init(conf[i].port,&GPIO_InitStruct);
 8007ee0:	a901      	add	r1, sp, #4
		GPIO_InitStruct.Pin = conf[i].pin;
 8007ee2:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Pull = conf[i].pull;
 8007ee4:	68e3      	ldr	r3, [r4, #12]
 8007ee6:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Speed = conf[i].speed;
 8007ee8:	6923      	ldr	r3, [r4, #16]
 8007eea:	3418      	adds	r4, #24
 8007eec:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(conf[i].port,&GPIO_InitStruct);
 8007eee:	f001 fbd1 	bl	8009694 <HAL_GPIO_Init>
 8007ef2:	e7e5      	b.n	8007ec0 <GPIO_Configure+0xc>

08007ef4 <leds_0_flash>:

int32_t gui_led_ident = 0;
int32_t gui_led_ident_timer = 0;

void leds_0_flash(uint32_t delay)
{
 8007ef4:	23a0      	movs	r3, #160	; 0xa0
	if (gui_led0_flash_delay != -1)
 8007ef6:	4a05      	ldr	r2, [pc, #20]	; (8007f0c <leds_0_flash+0x18>)
 8007ef8:	05db      	lsls	r3, r3, #23
 8007efa:	6811      	ldr	r1, [r2, #0]
 8007efc:	3101      	adds	r1, #1
 8007efe:	d001      	beq.n	8007f04 <leds_0_flash+0x10>
		leds_0_off();
 8007f00:	2101      	movs	r1, #1
 8007f02:	6299      	str	r1, [r3, #40]	; 0x28
	gui_led0_flash_delay = delay;
 8007f04:	6010      	str	r0, [r2, #0]
	leds_0_on();
 8007f06:	2201      	movs	r2, #1
 8007f08:	619a      	str	r2, [r3, #24]
}
 8007f0a:	4770      	bx	lr
 8007f0c:	2000010c 	.word	0x2000010c

08007f10 <leds_ident>:
	leds_1_off();
}

void leds_ident(int on)
{
	gui_led_ident = on;
 8007f10:	4b05      	ldr	r3, [pc, #20]	; (8007f28 <leds_ident+0x18>)
 8007f12:	6018      	str	r0, [r3, #0]
	if (!on)
 8007f14:	2800      	cmp	r0, #0
 8007f16:	d105      	bne.n	8007f24 <leds_ident+0x14>
	{
		leds_1_on();
 8007f18:	23a0      	movs	r3, #160	; 0xa0
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	05db      	lsls	r3, r3, #23
 8007f1e:	619a      	str	r2, [r3, #24]
		gui_led_ident_timer = 0;
 8007f20:	4b02      	ldr	r3, [pc, #8]	; (8007f2c <leds_ident+0x1c>)
 8007f22:	6018      	str	r0, [r3, #0]
	}
}
 8007f24:	4770      	bx	lr
 8007f26:	46c0      	nop			; (mov r8, r8)
 8007f28:	20000318 	.word	0x20000318
 8007f2c:	2000031c 	.word	0x2000031c

08007f30 <leds_counters>:

void leds_counters()
{
	if (gui_led0_flash_delay > 0)
 8007f30:	4a1a      	ldr	r2, [pc, #104]	; (8007f9c <leds_counters+0x6c>)
 8007f32:	6813      	ldr	r3, [r2, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	dd16      	ble.n	8007f66 <leds_counters+0x36>
		gui_led0_flash_delay--;
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	6013      	str	r3, [r2, #0]
	{
		gui_led0_flash_delay = -1;
		leds_0_off();
	}

	if (gui_led1_flash_delay > 0)
 8007f3c:	4a18      	ldr	r2, [pc, #96]	; (8007fa0 <leds_counters+0x70>)
 8007f3e:	6813      	ldr	r3, [r2, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	dd19      	ble.n	8007f78 <leds_counters+0x48>
		gui_led1_flash_delay--;
 8007f44:	3b01      	subs	r3, #1
 8007f46:	6013      	str	r3, [r2, #0]
	{
		gui_led1_flash_delay = -1;
		leds_1_on();
	}

	if (gui_led_ident)
 8007f48:	4b16      	ldr	r3, [pc, #88]	; (8007fa4 <leds_counters+0x74>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d009      	beq.n	8007f64 <leds_counters+0x34>
	{
		gui_led_ident_timer++;
 8007f50:	4a15      	ldr	r2, [pc, #84]	; (8007fa8 <leds_counters+0x78>)
 8007f52:	6813      	ldr	r3, [r2, #0]
 8007f54:	3301      	adds	r3, #1
 8007f56:	6013      	str	r3, [r2, #0]
		if (gui_led_ident_timer == 100)
 8007f58:	2b64      	cmp	r3, #100	; 0x64
 8007f5a:	d116      	bne.n	8007f8a <leds_counters+0x5a>
		{
			leds_1_off();
 8007f5c:	23a0      	movs	r3, #160	; 0xa0
 8007f5e:	2202      	movs	r2, #2
 8007f60:	05db      	lsls	r3, r3, #23
 8007f62:	629a      	str	r2, [r3, #40]	; 0x28
			leds_1_on();
			gui_led_ident_timer = 0;
		}

	}
}
 8007f64:	4770      	bx	lr
	else if (gui_led0_flash_delay == 0)
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1e8      	bne.n	8007f3c <leds_counters+0xc>
		gui_led0_flash_delay = -1;
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	6013      	str	r3, [r2, #0]
		leds_0_off();
 8007f6e:	23a0      	movs	r3, #160	; 0xa0
 8007f70:	2201      	movs	r2, #1
 8007f72:	05db      	lsls	r3, r3, #23
 8007f74:	629a      	str	r2, [r3, #40]	; 0x28
 8007f76:	e7e1      	b.n	8007f3c <leds_counters+0xc>
	else if (gui_led1_flash_delay == 0)
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1e5      	bne.n	8007f48 <leds_counters+0x18>
		gui_led1_flash_delay = -1;
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	6013      	str	r3, [r2, #0]
		leds_1_on();
 8007f80:	23a0      	movs	r3, #160	; 0xa0
 8007f82:	2202      	movs	r2, #2
 8007f84:	05db      	lsls	r3, r3, #23
 8007f86:	619a      	str	r2, [r3, #24]
 8007f88:	e7de      	b.n	8007f48 <leds_counters+0x18>
		else if (gui_led_ident_timer == 200)
 8007f8a:	2bc8      	cmp	r3, #200	; 0xc8
 8007f8c:	d1ea      	bne.n	8007f64 <leds_counters+0x34>
			leds_1_on();
 8007f8e:	23a0      	movs	r3, #160	; 0xa0
 8007f90:	2102      	movs	r1, #2
 8007f92:	05db      	lsls	r3, r3, #23
 8007f94:	6199      	str	r1, [r3, #24]
			gui_led_ident_timer = 0;
 8007f96:	2300      	movs	r3, #0
 8007f98:	6013      	str	r3, [r2, #0]
}
 8007f9a:	e7e3      	b.n	8007f64 <leds_counters+0x34>
 8007f9c:	2000010c 	.word	0x2000010c
 8007fa0:	20000110 	.word	0x20000110
 8007fa4:	20000318 	.word	0x20000318
 8007fa8:	2000031c 	.word	0x2000031c

08007fac <HAL_GPIO_EXTI_Callback>:
		//dbg_printf("INT\r\n");
		//LTC_readTemperatureAll();
	}


}
 8007fac:	4770      	bx	lr
	...

08007fb0 <LTC_writeReg8>:

/*****************************************************************************/
void LTC_writeReg8(uint16_t addr, uint8_t value)
{
 8007fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t addrArr[2];
	addrArr[1] = addr & 0xFF;
	addrArr[0] = addr >> 8;


	HAL_GPIO_WritePin(LTC_CS_PORT, LTC_CS_PIN, GPIO_PIN_RESET);
 8007fb2:	2780      	movs	r7, #128	; 0x80
{
 8007fb4:	b085      	sub	sp, #20
 8007fb6:	466b      	mov	r3, sp
	HAL_SPI_Transmit(&hspi1, &writeCmd, 1, 1000);
 8007fb8:	25fa      	movs	r5, #250	; 0xfa
	addrArr[1] = addr & 0xFF;
 8007fba:	ae03      	add	r6, sp, #12
 8007fbc:	7070      	strb	r0, [r6, #1]
	HAL_GPIO_WritePin(LTC_CS_PORT, LTC_CS_PIN, GPIO_PIN_RESET);
 8007fbe:	017f      	lsls	r7, r7, #5
	addrArr[0] = addr >> 8;
 8007fc0:	0a00      	lsrs	r0, r0, #8
{
 8007fc2:	71d9      	strb	r1, [r3, #7]
	addrArr[0] = addr >> 8;
 8007fc4:	7030      	strb	r0, [r6, #0]
	HAL_GPIO_WritePin(LTC_CS_PORT, LTC_CS_PIN, GPIO_PIN_RESET);
 8007fc6:	0039      	movs	r1, r7
 8007fc8:	2200      	movs	r2, #0
 8007fca:	480f      	ldr	r0, [pc, #60]	; (8008008 <LTC_writeReg8+0x58>)
 8007fcc:	f001 fc2e 	bl	800982c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &writeCmd, 1, 1000);
 8007fd0:	4c0e      	ldr	r4, [pc, #56]	; (800800c <LTC_writeReg8+0x5c>)
 8007fd2:	00ad      	lsls	r5, r5, #2
 8007fd4:	002b      	movs	r3, r5
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	490d      	ldr	r1, [pc, #52]	; (8008010 <LTC_writeReg8+0x60>)
 8007fda:	0020      	movs	r0, r4
 8007fdc:	f002 fa0a 	bl	800a3f4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &addrArr[0], 2, 1000);
 8007fe0:	002b      	movs	r3, r5
 8007fe2:	0031      	movs	r1, r6
 8007fe4:	2202      	movs	r2, #2
 8007fe6:	0020      	movs	r0, r4
 8007fe8:	f002 fa04 	bl	800a3f4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 8007fec:	4669      	mov	r1, sp
 8007fee:	002b      	movs	r3, r5
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	3107      	adds	r1, #7
 8007ff4:	0020      	movs	r0, r4
 8007ff6:	f002 f9fd 	bl	800a3f4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTC_CS_PORT, LTC_CS_PIN, GPIO_PIN_SET);
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	0039      	movs	r1, r7
 8007ffe:	4802      	ldr	r0, [pc, #8]	; (8008008 <LTC_writeReg8+0x58>)
 8008000:	f001 fc14 	bl	800982c <HAL_GPIO_WritePin>

}
 8008004:	b005      	add	sp, #20
 8008006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008008:	50000400 	.word	0x50000400
 800800c:	200010bc 	.word	0x200010bc
 8008010:	20000115 	.word	0x20000115

08008014 <LTC_writeReg32>:

/*****************************************************************************/
void LTC_writeReg32(uint16_t addr, uint32_t value)
{
 8008014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t addrArr[2];
	addrArr[1] = addr & 0xFF;
 8008016:	466b      	mov	r3, sp
	dataArray[3] = (uint8_t)value;
	dataArray[2] = (uint8_t)(value>>=8);
	dataArray[1] = (uint8_t)(value>>=8);
	dataArray[0] = (uint8_t)(value>>=8);

	HAL_GPIO_WritePin(LTC_CS_PORT, LTC_CS_PIN, GPIO_PIN_RESET);
 8008018:	2780      	movs	r7, #128	; 0x80
	HAL_SPI_Transmit(&hspi1, &writeCmd, 1, 1000);
 800801a:	26fa      	movs	r6, #250	; 0xfa
	addrArr[1] = addr & 0xFF;
 800801c:	7058      	strb	r0, [r3, #1]
	addrArr[0] = addr >> 8;
 800801e:	0a00      	lsrs	r0, r0, #8
	dataArray[3] = (uint8_t)value;
 8008020:	ac01      	add	r4, sp, #4
	addrArr[0] = addr >> 8;
 8008022:	7018      	strb	r0, [r3, #0]
	dataArray[2] = (uint8_t)(value>>=8);
 8008024:	0a0b      	lsrs	r3, r1, #8
	HAL_GPIO_WritePin(LTC_CS_PORT, LTC_CS_PIN, GPIO_PIN_RESET);
 8008026:	017f      	lsls	r7, r7, #5
	dataArray[3] = (uint8_t)value;
 8008028:	70e1      	strb	r1, [r4, #3]
	dataArray[2] = (uint8_t)(value>>=8);
 800802a:	70a3      	strb	r3, [r4, #2]
	dataArray[1] = (uint8_t)(value>>=8);
 800802c:	0c0b      	lsrs	r3, r1, #16
	dataArray[0] = (uint8_t)(value>>=8);
 800802e:	0e09      	lsrs	r1, r1, #24
 8008030:	7021      	strb	r1, [r4, #0]
	HAL_GPIO_WritePin(LTC_CS_PORT, LTC_CS_PIN, GPIO_PIN_RESET);
 8008032:	2200      	movs	r2, #0
 8008034:	0039      	movs	r1, r7
 8008036:	480f      	ldr	r0, [pc, #60]	; (8008074 <LTC_writeReg32+0x60>)
	dataArray[1] = (uint8_t)(value>>=8);
 8008038:	7063      	strb	r3, [r4, #1]
	HAL_GPIO_WritePin(LTC_CS_PORT, LTC_CS_PIN, GPIO_PIN_RESET);
 800803a:	f001 fbf7 	bl	800982c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &writeCmd, 1, 1000);
 800803e:	4d0e      	ldr	r5, [pc, #56]	; (8008078 <LTC_writeReg32+0x64>)
 8008040:	00b6      	lsls	r6, r6, #2
 8008042:	0033      	movs	r3, r6
 8008044:	0028      	movs	r0, r5
 8008046:	2201      	movs	r2, #1
 8008048:	490c      	ldr	r1, [pc, #48]	; (800807c <LTC_writeReg32+0x68>)
 800804a:	f002 f9d3 	bl	800a3f4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &addrArr[0], 2, 1000);
 800804e:	0033      	movs	r3, r6
 8008050:	4669      	mov	r1, sp
 8008052:	0028      	movs	r0, r5
 8008054:	2202      	movs	r2, #2
 8008056:	f002 f9cd 	bl	800a3f4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &dataArray[0], 4, 1000);
 800805a:	0033      	movs	r3, r6
 800805c:	0021      	movs	r1, r4
 800805e:	0028      	movs	r0, r5
 8008060:	2204      	movs	r2, #4
 8008062:	f002 f9c7 	bl	800a3f4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTC_CS_PORT, LTC_CS_PIN, GPIO_PIN_SET);
 8008066:	0039      	movs	r1, r7
 8008068:	2201      	movs	r2, #1
 800806a:	4802      	ldr	r0, [pc, #8]	; (8008074 <LTC_writeReg32+0x60>)
 800806c:	f001 fbde 	bl	800982c <HAL_GPIO_WritePin>

}
 8008070:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008072:	46c0      	nop			; (mov r8, r8)
 8008074:	50000400 	.word	0x50000400
 8008078:	200010bc 	.word	0x200010bc
 800807c:	20000115 	.word	0x20000115

08008080 <LTC_readReg8>:

/*****************************************************************************/
uint8_t LTC_readReg8(uint16_t addr)
{
 8008080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	addrArr[1] = addr & 0xFF;
	addrArr[0] = addr >> 8;

	uint8_t readVal = 0;

	HAL_GPIO_WritePin(LTC_CS_PORT, LTC_CS_PIN, GPIO_PIN_RESET);
 8008082:	2180      	movs	r1, #128	; 0x80
	uint8_t readVal = 0;
 8008084:	466b      	mov	r3, sp
 8008086:	2200      	movs	r2, #0
	HAL_SPI_Transmit(&hspi1, &readCmd, 1, 1000);
 8008088:	26fa      	movs	r6, #250	; 0xfa
	addrArr[1] = addr & 0xFF;
 800808a:	af01      	add	r7, sp, #4
 800808c:	7078      	strb	r0, [r7, #1]
	addrArr[0] = addr >> 8;
 800808e:	0a00      	lsrs	r0, r0, #8
 8008090:	7038      	strb	r0, [r7, #0]
	HAL_GPIO_WritePin(LTC_CS_PORT, LTC_CS_PIN, GPIO_PIN_RESET);
 8008092:	0149      	lsls	r1, r1, #5
 8008094:	4810      	ldr	r0, [pc, #64]	; (80080d8 <LTC_readReg8+0x58>)
	uint8_t readVal = 0;
 8008096:	1cdc      	adds	r4, r3, #3
 8008098:	70da      	strb	r2, [r3, #3]
	HAL_GPIO_WritePin(LTC_CS_PORT, LTC_CS_PIN, GPIO_PIN_RESET);
 800809a:	f001 fbc7 	bl	800982c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &readCmd, 1, 1000);
 800809e:	4d0f      	ldr	r5, [pc, #60]	; (80080dc <LTC_readReg8+0x5c>)
 80080a0:	00b6      	lsls	r6, r6, #2
 80080a2:	0033      	movs	r3, r6
 80080a4:	0028      	movs	r0, r5
 80080a6:	2201      	movs	r2, #1
 80080a8:	490d      	ldr	r1, [pc, #52]	; (80080e0 <LTC_readReg8+0x60>)
 80080aa:	f002 f9a3 	bl	800a3f4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &addrArr[0], 2, 1000);
 80080ae:	0033      	movs	r3, r6
 80080b0:	0039      	movs	r1, r7
 80080b2:	0028      	movs	r0, r5
 80080b4:	2202      	movs	r2, #2
 80080b6:	f002 f99d 	bl	800a3f4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &readVal, 1, 1000);
 80080ba:	0033      	movs	r3, r6
 80080bc:	0021      	movs	r1, r4
 80080be:	0028      	movs	r0, r5
 80080c0:	2201      	movs	r2, #1
 80080c2:	f002 fb45 	bl	800a750 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LTC_CS_PORT, LTC_CS_PIN, GPIO_PIN_SET);
 80080c6:	2180      	movs	r1, #128	; 0x80
 80080c8:	2201      	movs	r2, #1
 80080ca:	0149      	lsls	r1, r1, #5
 80080cc:	4802      	ldr	r0, [pc, #8]	; (80080d8 <LTC_readReg8+0x58>)
 80080ce:	f001 fbad 	bl	800982c <HAL_GPIO_WritePin>

	return readVal;
 80080d2:	7820      	ldrb	r0, [r4, #0]
}
 80080d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80080d6:	46c0      	nop			; (mov r8, r8)
 80080d8:	50000400 	.word	0x50000400
 80080dc:	200010bc 	.word	0x200010bc
 80080e0:	20000114 	.word	0x20000114

080080e4 <LTC_readReg32>:

/*****************************************************************************/
uint32_t LTC_readReg32(uint16_t addr)
{
 80080e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	addrArr[1] = addr & 0xFF;
	addrArr[0] = addr >> 8;

	uint8_t readVal[4];

	HAL_GPIO_WritePin(LTC_CS_PORT, LTC_CS_PIN, GPIO_PIN_RESET);
 80080e6:	2780      	movs	r7, #128	; 0x80
	addrArr[1] = addr & 0xFF;
 80080e8:	466b      	mov	r3, sp
	HAL_SPI_Transmit(&hspi1, &readCmd, 1, 1000);
 80080ea:	25fa      	movs	r5, #250	; 0xfa
	HAL_GPIO_WritePin(LTC_CS_PORT, LTC_CS_PIN, GPIO_PIN_RESET);
 80080ec:	4e12      	ldr	r6, [pc, #72]	; (8008138 <LTC_readReg32+0x54>)
 80080ee:	017f      	lsls	r7, r7, #5
	addrArr[1] = addr & 0xFF;
 80080f0:	7058      	strb	r0, [r3, #1]
	addrArr[0] = addr >> 8;
 80080f2:	0a00      	lsrs	r0, r0, #8
	HAL_GPIO_WritePin(LTC_CS_PORT, LTC_CS_PIN, GPIO_PIN_RESET);
 80080f4:	0039      	movs	r1, r7
	addrArr[0] = addr >> 8;
 80080f6:	7018      	strb	r0, [r3, #0]
	HAL_GPIO_WritePin(LTC_CS_PORT, LTC_CS_PIN, GPIO_PIN_RESET);
 80080f8:	2200      	movs	r2, #0
 80080fa:	0030      	movs	r0, r6
 80080fc:	f001 fb96 	bl	800982c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &readCmd, 1, 1000);
 8008100:	4c0e      	ldr	r4, [pc, #56]	; (800813c <LTC_readReg32+0x58>)
 8008102:	00ad      	lsls	r5, r5, #2
 8008104:	002b      	movs	r3, r5
 8008106:	2201      	movs	r2, #1
 8008108:	490d      	ldr	r1, [pc, #52]	; (8008140 <LTC_readReg32+0x5c>)
 800810a:	0020      	movs	r0, r4
 800810c:	f002 f972 	bl	800a3f4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &addrArr[0], 2, 1000);
 8008110:	002b      	movs	r3, r5
 8008112:	4669      	mov	r1, sp
 8008114:	2202      	movs	r2, #2
 8008116:	0020      	movs	r0, r4
 8008118:	f002 f96c 	bl	800a3f4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &readVal, 4, 1000);
 800811c:	002b      	movs	r3, r5
 800811e:	a901      	add	r1, sp, #4
 8008120:	2204      	movs	r2, #4
 8008122:	0020      	movs	r0, r4
 8008124:	f002 fb14 	bl	800a750 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LTC_CS_PORT, LTC_CS_PIN, GPIO_PIN_SET);
 8008128:	0030      	movs	r0, r6
 800812a:	0039      	movs	r1, r7
 800812c:	2201      	movs	r2, #1
 800812e:	f001 fb7d 	bl	800982c <HAL_GPIO_WritePin>
 8008132:	9b01      	ldr	r3, [sp, #4]
					  ((uint32_t) readVal[1]) << 16 |
					  ((uint32_t) readVal[2]) <<  8 |
					  ((uint32_t) readVal[3]) <<  0);

	return rawData;
}
 8008134:	ba18      	rev	r0, r3
 8008136:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008138:	50000400 	.word	0x50000400
 800813c:	200010bc 	.word	0x200010bc
 8008140:	20000114 	.word	0x20000114

08008144 <LTC_waitUntilFinish>:

/*****************************************************************************/
void LTC_waitUntilFinish(void)
{
 8008144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t process_fin = 0;
	uint8_t counter = 0;
 8008146:	2400      	movs	r4, #0

	while(process_fin == 0)
	{
		uint8_t status = LTC_readReg8(COMMAND_STATUS_REGISTER);

		process_fin = status & 0x40;
 8008148:	2640      	movs	r6, #64	; 0x40

		if (counter%2)
 800814a:	2701      	movs	r7, #1
		uint8_t status = LTC_readReg8(COMMAND_STATUS_REGISTER);
 800814c:	2000      	movs	r0, #0
 800814e:	f7ff ff97 	bl	8008080 <LTC_readReg8>
 8008152:	23a0      	movs	r3, #160	; 0xa0
		process_fin = status & 0x40;
 8008154:	4030      	ands	r0, r6
 8008156:	0005      	movs	r5, r0
 8008158:	05db      	lsls	r3, r3, #23
 800815a:	2202      	movs	r2, #2
		if (counter%2)
 800815c:	423c      	tst	r4, r7
 800815e:	d008      	beq.n	8008172 <LTC_waitUntilFinish+0x2e>
		{
			leds_1_on();
 8008160:	619a      	str	r2, [r3, #24]
			HAL_Delay(10);
		}
		else
		{
			leds_1_off();
			HAL_Delay(10);
 8008162:	200a      	movs	r0, #10
		}
		counter++;
 8008164:	3401      	adds	r4, #1
			HAL_Delay(10);
 8008166:	f000 ff93 	bl	8009090 <HAL_Delay>
		counter++;
 800816a:	b2e4      	uxtb	r4, r4
	while(process_fin == 0)
 800816c:	2d00      	cmp	r5, #0
 800816e:	d0ed      	beq.n	800814c <LTC_waitUntilFinish+0x8>
	}
}
 8008170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			leds_1_off();
 8008172:	629a      	str	r2, [r3, #40]	; 0x28
 8008174:	e7f5      	b.n	8008162 <LTC_waitUntilFinish+0x1e>

08008176 <LTC_beginConv>:
}

/*****************************************************************************/
void LTC_beginConv(uint8_t ch)
{
	uint8_t beginConv = 0x80 | ch;
 8008176:	2180      	movs	r1, #128	; 0x80
{
 8008178:	b510      	push	{r4, lr}
	LTC_writeReg8(COMMAND_STATUS_REGISTER, beginConv);
 800817a:	4301      	orrs	r1, r0
 800817c:	2000      	movs	r0, #0
 800817e:	f7ff ff17 	bl	8007fb0 <LTC_writeReg8>

	LTC_waitUntilFinish();
 8008182:	f7ff ffdf 	bl	8008144 <LTC_waitUntilFinish>
}
 8008186:	bd10      	pop	{r4, pc}

08008188 <LTC_readTemperature>:

float LTC_readTemperature(uint32_t ch)
{
 8008188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800818a:	0006      	movs	r6, r0
	uint32_t rawTemperature = LTC_readReg32(READ_CH_BASE + 4 * ch);
 800818c:	3004      	adds	r0, #4
 800818e:	0080      	lsls	r0, r0, #2
 8008190:	b280      	uxth	r0, r0
 8008192:	f7ff ffa7 	bl	80080e4 <LTC_readReg32>
 8008196:	0002      	movs	r2, r0

	uint8_t flag = rawTemperature >> 24;
 8008198:	0e03      	lsrs	r3, r0, #24

	int32_t signedRawData = rawTemperature & 0xFFFFFF;
 800819a:	0200      	lsls	r0, r0, #8
	uint8_t flag = rawTemperature >> 24;
 800819c:	9301      	str	r3, [sp, #4]
	int32_t signedRawData = rawTemperature & 0xFFFFFF;
 800819e:	0a00      	lsrs	r0, r0, #8

	if(signedRawData & 0x800000)
 80081a0:	0213      	lsls	r3, r2, #8
 80081a2:	d502      	bpl.n	80081aa <LTC_readTemperature+0x22>
		signedRawData = signedRawData | 0xFF000000;
 80081a4:	23ff      	movs	r3, #255	; 0xff
 80081a6:	061b      	lsls	r3, r3, #24
 80081a8:	4318      	orrs	r0, r3

	float temperature = (float)signedRawData / 1024;
 80081aa:	f7fd fda1 	bl	8005cf0 <__aeabi_i2f>
 80081ae:	21ea      	movs	r1, #234	; 0xea
 80081b0:	0589      	lsls	r1, r1, #22
 80081b2:	f7fd faa7 	bl	8005704 <__aeabi_fmul>


	chData[ch].HJ = temperature - gConfig.ch_conf[ch].cjOffset.cjOff;
 80081b6:	231c      	movs	r3, #28
 80081b8:	240c      	movs	r4, #12
 80081ba:	4373      	muls	r3, r6
 80081bc:	4374      	muls	r4, r6
 80081be:	4e08      	ldr	r6, [pc, #32]	; (80081e0 <LTC_readTemperature+0x58>)
	float temperature = (float)signedRawData / 1024;
 80081c0:	1c07      	adds	r7, r0, #0
	chData[ch].HJ = temperature - gConfig.ch_conf[ch].cjOffset.cjOff;
 80081c2:	18f6      	adds	r6, r6, r3
 80081c4:	69f1      	ldr	r1, [r6, #28]
 80081c6:	f7fd fbcf 	bl	8005968 <__aeabi_fsub>
 80081ca:	4d06      	ldr	r5, [pc, #24]	; (80081e4 <LTC_readTemperature+0x5c>)
 80081cc:	5160      	str	r0, [r4, r5]
	chData[ch].CJ = chData[11].HJ;
 80081ce:	192c      	adds	r4, r5, r4
 80081d0:	3508      	adds	r5, #8
 80081d2:	6feb      	ldr	r3, [r5, #124]	; 0x7c
	chData[ch].flag = flag;

	return temperature;
}
 80081d4:	1c38      	adds	r0, r7, #0
	chData[ch].CJ = chData[11].HJ;
 80081d6:	6063      	str	r3, [r4, #4]
	chData[ch].flag = flag;
 80081d8:	9b01      	ldr	r3, [sp, #4]
 80081da:	7223      	strb	r3, [r4, #8]
}
 80081dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80081de:	46c0      	nop			; (mov r8, r8)
 80081e0:	20000528 	.word	0x20000528
 80081e4:	20000438 	.word	0x20000438

080081e8 <LTC_readTemperatureAll>:

/*****************************************************************************/
void LTC_readTemperatureAll(void)
{
 80081e8:	b510      	push	{r4, lr}
	for (int idx = 0; idx < 20; idx++)
 80081ea:	2400      	movs	r4, #0
	{
		float temperature = LTC_readTemperature(idx);
 80081ec:	0020      	movs	r0, r4
	for (int idx = 0; idx < 20; idx++)
 80081ee:	3401      	adds	r4, #1
		float temperature = LTC_readTemperature(idx);
 80081f0:	f7ff ffca 	bl	8008188 <LTC_readTemperature>
	for (int idx = 0; idx < 20; idx++)
 80081f4:	2c14      	cmp	r4, #20
 80081f6:	d1f9      	bne.n	80081ec <LTC_readTemperatureAll+0x4>
		/*dbg_printf("Ch : %d - Temperature : %f\n", idx+1, temperature);
		HAL_Delay(100);*/
	}
}
 80081f8:	bd10      	pop	{r4, pc}

080081fa <LTC_enableConvChannels>:
	LTC_writeReg8(GLOBAL_CONFIG_REGISTER, tmp | REJECTION__50_HZ);
}

/*****************************************************************************/
void LTC_enableConvChannels(uint32_t ch)
{
 80081fa:	b510      	push	{r4, lr}
 80081fc:	0001      	movs	r1, r0
	LTC_writeReg32(MULTI_READ_CH_REGISTER, ch);
 80081fe:	20f4      	movs	r0, #244	; 0xf4
 8008200:	f7ff ff08 	bl	8008014 <LTC_writeReg32>
}
 8008204:	bd10      	pop	{r4, pc}
	...

08008208 <LTC_TC_configureChannel>:
	return adcValue;
}

/*****************************************************************************/
void LTC_TC_configureChannel(uint32_t ch, uint32_t tcType, uint32_t cjChannel, uint32_t singleEnded, uint32_t openCktDetect, uint32_t openCktDetectCurrent)
{
 8008208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800820a:	001f      	movs	r7, r3
	uint32_t chCfgData = 0;
	chCfgData = tcType | cjChannel | singleEnded | openCktDetect | openCktDetectCurrent;

	chConfig[ch].config = tcType;
 800820c:	230c      	movs	r3, #12
{
 800820e:	0004      	movs	r4, r0
	chConfig[ch].config = tcType;
 8008210:	4343      	muls	r3, r0
{
 8008212:	0016      	movs	r6, r2
	chConfig[ch].config = tcType;
 8008214:	4a09      	ldr	r2, [pc, #36]	; (800823c <LTC_TC_configureChannel+0x34>)

	dbg_printf("Config Int : %d\n", chConfig[ch].config);
 8008216:	480a      	ldr	r0, [pc, #40]	; (8008240 <LTC_TC_configureChannel+0x38>)
	chConfig[ch].config = tcType;
 8008218:	5099      	str	r1, [r3, r2]
{
 800821a:	000d      	movs	r5, r1
	dbg_printf("Config Int : %d\n", chConfig[ch].config);
 800821c:	f003 fe6a 	bl	800bef4 <iprintf>

	LTC_writeReg32(CH_ADDRESS_BASE + 4*ch, chCfgData);
 8008220:	0020      	movs	r0, r4
	chCfgData = tcType | cjChannel | singleEnded | openCktDetect | openCktDetectCurrent;
 8008222:	9906      	ldr	r1, [sp, #24]
 8008224:	9b07      	ldr	r3, [sp, #28]
	LTC_writeReg32(CH_ADDRESS_BASE + 4*ch, chCfgData);
 8008226:	3080      	adds	r0, #128	; 0x80
	chCfgData = tcType | cjChannel | singleEnded | openCktDetect | openCktDetectCurrent;
 8008228:	4319      	orrs	r1, r3
 800822a:	4339      	orrs	r1, r7
 800822c:	4331      	orrs	r1, r6
	LTC_writeReg32(CH_ADDRESS_BASE + 4*ch, chCfgData);
 800822e:	0080      	lsls	r0, r0, #2
	chCfgData = tcType | cjChannel | singleEnded | openCktDetect | openCktDetectCurrent;
 8008230:	4329      	orrs	r1, r5
	LTC_writeReg32(CH_ADDRESS_BASE + 4*ch, chCfgData);
 8008232:	b280      	uxth	r0, r0
 8008234:	f7ff feee 	bl	8008014 <LTC_writeReg32>
}
 8008238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800823a:	46c0      	nop			; (mov r8, r8)
 800823c:	20000348 	.word	0x20000348
 8008240:	0800fc88 	.word	0x0800fc88

08008244 <LTC_process>:
}

/*****************************************************************************/
int counter = 0;
void LTC_process(void)
{
 8008244:	b570      	push	{r4, r5, r6, lr}
	LTC_beginConv(0);
 8008246:	2000      	movs	r0, #0
 8008248:	f7ff ff95 	bl	8008176 <LTC_beginConv>
	LTC_readTemperatureAll();
 800824c:	f7ff ffcc 	bl	80081e8 <LTC_readTemperatureAll>
	if (counter % 10 == 0)
 8008250:	4d13      	ldr	r5, [pc, #76]	; (80082a0 <LTC_process+0x5c>)
 8008252:	210a      	movs	r1, #10
 8008254:	6828      	ldr	r0, [r5, #0]
 8008256:	f7fd f8e7 	bl	8005428 <__aeabi_idivmod>
 800825a:	1e0c      	subs	r4, r1, #0
 800825c:	d113      	bne.n	8008286 <LTC_process+0x42>
	{
		for (int idx = 0; idx < 20; idx++)
		{
			dbg_printf("Ch : %d - Temperature : %f\r\n", idx+1, chData[idx].HJ);
 800825e:	260c      	movs	r6, #12
 8008260:	0033      	movs	r3, r6
 8008262:	3401      	adds	r4, #1
 8008264:	4363      	muls	r3, r4
 8008266:	4a0f      	ldr	r2, [pc, #60]	; (80082a4 <LTC_process+0x60>)
 8008268:	3b0c      	subs	r3, #12
 800826a:	58d0      	ldr	r0, [r2, r3]
 800826c:	f7ff fb28 	bl	80078c0 <__aeabi_f2d>
 8008270:	0002      	movs	r2, r0
 8008272:	000b      	movs	r3, r1
 8008274:	480c      	ldr	r0, [pc, #48]	; (80082a8 <LTC_process+0x64>)
 8008276:	0021      	movs	r1, r4
 8008278:	f003 fe3c 	bl	800bef4 <iprintf>
			HAL_Delay(10);
 800827c:	200a      	movs	r0, #10
 800827e:	f000 ff07 	bl	8009090 <HAL_Delay>
		for (int idx = 0; idx < 20; idx++)
 8008282:	2c14      	cmp	r4, #20
 8008284:	d1ec      	bne.n	8008260 <LTC_process+0x1c>
 8008286:	22a0      	movs	r2, #160	; 0xa0
		}
	}
	if (counter%2)
 8008288:	682b      	ldr	r3, [r5, #0]
 800828a:	05d2      	lsls	r2, r2, #23
 800828c:	2102      	movs	r1, #2
 800828e:	07d8      	lsls	r0, r3, #31
 8008290:	d503      	bpl.n	800829a <LTC_process+0x56>
	{
		leds_1_on();
 8008292:	6191      	str	r1, [r2, #24]
	}
	else
	{
		leds_1_off();
	}
	counter++;
 8008294:	3301      	adds	r3, #1
 8008296:	602b      	str	r3, [r5, #0]
}
 8008298:	bd70      	pop	{r4, r5, r6, pc}
		leds_1_off();
 800829a:	6291      	str	r1, [r2, #40]	; 0x28
 800829c:	e7fa      	b.n	8008294 <LTC_process+0x50>
 800829e:	46c0      	nop			; (mov r8, r8)
 80082a0:	20000320 	.word	0x20000320
 80082a4:	20000438 	.word	0x20000438
 80082a8:	0800fcd0 	.word	0x0800fcd0

080082ac <LTC_init>:

/*****************************************************************************/
void LTC_init(void)
{
 80082ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t status = LTC_readReg8(COMMAND_STATUS_REGISTER);
	dbg_printf("Initial status : %x\n", status);

	uint32_t readMulti = 0;

	for (int idx = 0; idx < 8; idx++)
 80082ae:	2500      	movs	r5, #0
	uint8_t status = LTC_readReg8(COMMAND_STATUS_REGISTER);
 80082b0:	2000      	movs	r0, #0
 80082b2:	f7ff fee5 	bl	8008080 <LTC_readReg8>
	uint32_t readMulti = 0;
 80082b6:	002e      	movs	r6, r5
		LTC_TC_configureChannel(idx, gConfig.ch_conf[idx].sensorType, gConfig.ch_conf[idx].CJ_channel,
								gConfig.ch_conf[idx].singleEnded, gConfig.ch_conf[idx].openCktDetect, gConfig.ch_conf[idx].openCktDetectCurrent);

		dbg_printf("gConfig.ch_conf[%d].enabled : %d\n", idx, gConfig.ch_conf[idx].enabled);
		if (gConfig.ch_conf[idx].enabled)
			readMulti |= (1 << idx);
 80082b8:	2701      	movs	r7, #1
	uint8_t status = LTC_readReg8(COMMAND_STATUS_REGISTER);
 80082ba:	0001      	movs	r1, r0
	dbg_printf("Initial status : %x\n", status);
 80082bc:	4825      	ldr	r0, [pc, #148]	; (8008354 <LTC_init+0xa8>)
 80082be:	f003 fe19 	bl	800bef4 <iprintf>
 80082c2:	4c25      	ldr	r4, [pc, #148]	; (8008358 <LTC_init+0xac>)
		LTC_TC_configureChannel(idx, gConfig.ch_conf[idx].sensorType, gConfig.ch_conf[idx].CJ_channel,
 80082c4:	6923      	ldr	r3, [r4, #16]
 80082c6:	0028      	movs	r0, r5
 80082c8:	9301      	str	r3, [sp, #4]
 80082ca:	68e3      	ldr	r3, [r4, #12]
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	68a3      	ldr	r3, [r4, #8]
 80082d0:	6862      	ldr	r2, [r4, #4]
 80082d2:	6821      	ldr	r1, [r4, #0]
 80082d4:	f7ff ff98 	bl	8008208 <LTC_TC_configureChannel>
		dbg_printf("gConfig.ch_conf[%d].enabled : %d\n", idx, gConfig.ch_conf[idx].enabled);
 80082d8:	7e22      	ldrb	r2, [r4, #24]
 80082da:	0029      	movs	r1, r5
 80082dc:	481f      	ldr	r0, [pc, #124]	; (800835c <LTC_init+0xb0>)
 80082de:	f003 fe09 	bl	800bef4 <iprintf>
		if (gConfig.ch_conf[idx].enabled)
 80082e2:	7e23      	ldrb	r3, [r4, #24]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d002      	beq.n	80082ee <LTC_init+0x42>
			readMulti |= (1 << idx);
 80082e8:	003b      	movs	r3, r7
 80082ea:	40ab      	lsls	r3, r5
 80082ec:	431e      	orrs	r6, r3
	for (int idx = 0; idx < 8; idx++)
 80082ee:	3501      	adds	r5, #1
 80082f0:	341c      	adds	r4, #28
 80082f2:	2d08      	cmp	r5, #8
 80082f4:	d1e6      	bne.n	80082c4 <LTC_init+0x18>
										gConfig.ch_conf[idx].singleEnded, gConfig.ch_conf[idx].openCktDetect, gConfig.ch_conf[idx].openCktDetectCurrent);

		dbg_printf("gConfig.ch_conf[%d].enabled : %d\n", idx, gConfig.ch_conf[idx].enabled);

		if (gConfig.ch_conf[idx].enabled)
			readMulti |= (1 << idx);
 80082f6:	2701      	movs	r7, #1
 80082f8:	4c19      	ldr	r4, [pc, #100]	; (8008360 <LTC_init+0xb4>)
	for (int idx = 12; idx < 20; idx++)
 80082fa:	3504      	adds	r5, #4
		LTC_TC_configureChannel(idx, gConfig.ch_conf[idx].sensorType, gConfig.ch_conf[idx].CJ_channel,
 80082fc:	6923      	ldr	r3, [r4, #16]
 80082fe:	0028      	movs	r0, r5
 8008300:	9301      	str	r3, [sp, #4]
 8008302:	68e3      	ldr	r3, [r4, #12]
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	68a3      	ldr	r3, [r4, #8]
 8008308:	6862      	ldr	r2, [r4, #4]
 800830a:	6821      	ldr	r1, [r4, #0]
 800830c:	f7ff ff7c 	bl	8008208 <LTC_TC_configureChannel>
		dbg_printf("gConfig.ch_conf[%d].enabled : %d\n", idx, gConfig.ch_conf[idx].enabled);
 8008310:	7e22      	ldrb	r2, [r4, #24]
 8008312:	0029      	movs	r1, r5
 8008314:	4811      	ldr	r0, [pc, #68]	; (800835c <LTC_init+0xb0>)
 8008316:	f003 fded 	bl	800bef4 <iprintf>
		if (gConfig.ch_conf[idx].enabled)
 800831a:	7e23      	ldrb	r3, [r4, #24]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d002      	beq.n	8008326 <LTC_init+0x7a>
			readMulti |= (1 << idx);
 8008320:	003b      	movs	r3, r7
 8008322:	40ab      	lsls	r3, r5
 8008324:	431e      	orrs	r6, r3
	for (int idx = 12; idx < 20; idx++)
 8008326:	3501      	adds	r5, #1
 8008328:	341c      	adds	r4, #28
 800832a:	2d14      	cmp	r5, #20
 800832c:	d1e6      	bne.n	80082fc <LTC_init+0x50>
	}

	LTC_enableConvChannels(readMulti);
 800832e:	0030      	movs	r0, r6
 8008330:	f7ff ff63 	bl	80081fa <LTC_enableConvChannels>
	LTC_writeReg32(CH_ADDRESS_BASE + 4 * ch, rtdData);
 8008334:	208b      	movs	r0, #139	; 0x8b
 8008336:	490b      	ldr	r1, [pc, #44]	; (8008364 <LTC_init+0xb8>)
 8008338:	0080      	lsls	r0, r0, #2
 800833a:	f7ff fe6b 	bl	8008014 <LTC_writeReg32>
	LTC_writeReg32(CH_ADDRESS_BASE + 4 * ch, rSenseData);
 800833e:	2089      	movs	r0, #137	; 0x89
 8008340:	4909      	ldr	r1, [pc, #36]	; (8008368 <LTC_init+0xbc>)
 8008342:	0080      	lsls	r0, r0, #2
 8008344:	f7ff fe66 	bl	8008014 <LTC_writeReg32>


	LTC_RTD_configureRSense(RSENSE_CHANNEL, SENSOR_TYPE__SENSE_RESISTOR, RSENSE_2K, RSENSE_03K);


	HAL_Delay(1000);
 8008348:	20fa      	movs	r0, #250	; 0xfa
 800834a:	0080      	lsls	r0, r0, #2
 800834c:	f000 fea0 	bl	8009090 <HAL_Delay>

}
 8008350:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008352:	46c0      	nop			; (mov r8, r8)
 8008354:	0800fc99 	.word	0x0800fc99
 8008358:	20000530 	.word	0x20000530
 800835c:	0800fcae 	.word	0x0800fcae
 8008360:	20000680 	.word	0x20000680
 8008364:	62a0c000 	.word	0x62a0c000
 8008368:	e81f401e 	.word	0xe81f401e

0800836c <Board_SystickCallBack>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Board_SystickCallBack()
{

}
 800836c:	4770      	bx	lr
	...

08008370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008370:	b530      	push	{r4, r5, lr}
 8008372:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008374:	2224      	movs	r2, #36	; 0x24
 8008376:	2100      	movs	r1, #0
 8008378:	a811      	add	r0, sp, #68	; 0x44
 800837a:	f002 ff57 	bl	800b22c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800837e:	2214      	movs	r2, #20
 8008380:	2100      	movs	r1, #0
 8008382:	a801      	add	r0, sp, #4
 8008384:	f002 ff52 	bl	800b22c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008388:	2228      	movs	r2, #40	; 0x28
 800838a:	2100      	movs	r1, #0
 800838c:	a806      	add	r0, sp, #24
 800838e:	f002 ff4d 	bl	800b22c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008392:	4924      	ldr	r1, [pc, #144]	; (8008424 <SystemClock_Config+0xb4>)
 8008394:	4a24      	ldr	r2, [pc, #144]	; (8008428 <SystemClock_Config+0xb8>)
 8008396:	680b      	ldr	r3, [r1, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008398:	2501      	movs	r5, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800839a:	401a      	ands	r2, r3
 800839c:	2380      	movs	r3, #128	; 0x80
 800839e:	011b      	lsls	r3, r3, #4
 80083a0:	4313      	orrs	r3, r2
 80083a2:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80083a4:	2302      	movs	r3, #2
 80083a6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80083a8:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80083aa:	2300      	movs	r3, #0
 80083ac:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 80083ae:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80083b0:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80083b2:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80083b4:	03db      	lsls	r3, r3, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80083b6:	a810      	add	r0, sp, #64	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80083b8:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80083ba:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80083bc:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80083be:	f001 fa91 	bl	80098e4 <HAL_RCC_OscConfig>
 80083c2:	2800      	cmp	r0, #0
 80083c4:	d001      	beq.n	80083ca <SystemClock_Config+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 80083c6:	b672      	cpsid	i
 80083c8:	e7fe      	b.n	80083c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80083ca:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80083cc:	2403      	movs	r4, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80083ce:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80083d0:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80083d2:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80083d4:	0029      	movs	r1, r5
 80083d6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80083d8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80083da:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80083dc:	f001 fd12 	bl	8009e04 <HAL_RCC_ClockConfig>
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d001      	beq.n	80083e8 <SystemClock_Config+0x78>
 80083e4:	b672      	cpsid	i
 80083e6:	e7fe      	b.n	80083e6 <SystemClock_Config+0x76>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80083e8:	9009      	str	r0, [sp, #36]	; 0x24
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80083ea:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80083ec:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80083ee:	9406      	str	r4, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80083f0:	f001 fdfc 	bl	8009fec <HAL_RCCEx_PeriphCLKConfig>
 80083f4:	1e04      	subs	r4, r0, #0
 80083f6:	d001      	beq.n	80083fc <SystemClock_Config+0x8c>
 80083f8:	b672      	cpsid	i
 80083fa:	e7fe      	b.n	80083fa <SystemClock_Config+0x8a>
    Error_Handler();
  }

  /**Configure the Systick interrupt time
     */
    HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80083fc:	f001 fdd0 	bl	8009fa0 <HAL_RCC_GetHCLKFreq>
 8008400:	21fa      	movs	r1, #250	; 0xfa
 8008402:	0089      	lsls	r1, r1, #2
 8008404:	f7fc fea0 	bl	8005148 <__udivsi3>
 8008408:	f000 fe9a 	bl	8009140 <HAL_SYSTICK_Config>

    /**Configure the Systick
     */
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800840c:	2004      	movs	r0, #4
 800840e:	f000 feb1 	bl	8009174 <HAL_SYSTICK_CLKSourceConfig>

    /* SysTick_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8008412:	2001      	movs	r0, #1
 8008414:	0022      	movs	r2, r4
 8008416:	0021      	movs	r1, r4
 8008418:	4240      	negs	r0, r0
 800841a:	f000 fe4b 	bl	80090b4 <HAL_NVIC_SetPriority>
}
 800841e:	b01f      	add	sp, #124	; 0x7c
 8008420:	bd30      	pop	{r4, r5, pc}
 8008422:	46c0      	nop			; (mov r8, r8)
 8008424:	40007000 	.word	0x40007000
 8008428:	ffffe7ff 	.word	0xffffe7ff

0800842c <main>:
{
 800842c:	b5f0      	push	{r4, r5, r6, r7, lr}
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800842e:	2601      	movs	r6, #1
{
 8008430:	b089      	sub	sp, #36	; 0x24
  bl_remapMemToSRAM();
 8008432:	f7ff fb45 	bl	8007ac0 <bl_remapMemToSRAM>
  HAL_Init();
 8008436:	f000 fe05 	bl	8009044 <HAL_Init>
  SystemClock_Config();
 800843a:	f7ff ff99 	bl	8008370 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800843e:	2214      	movs	r2, #20
 8008440:	2100      	movs	r1, #0
 8008442:	a803      	add	r0, sp, #12
 8008444:	f002 fef2 	bl	800b22c <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008448:	2102      	movs	r1, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800844a:	20a0      	movs	r0, #160	; 0xa0

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800844c:	2780      	movs	r7, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800844e:	4d59      	ldr	r5, [pc, #356]	; (80085b4 <main+0x188>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8008450:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008452:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8008454:	017f      	lsls	r7, r7, #5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008456:	4333      	orrs	r3, r6
 8008458:	62eb      	str	r3, [r5, #44]	; 0x2c
 800845a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800845c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800845e:	4033      	ands	r3, r6
 8008460:	9301      	str	r3, [sp, #4]
 8008462:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008464:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8008466:	430a      	orrs	r2, r1
 8008468:	62ea      	str	r2, [r5, #44]	; 0x2c
 800846a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800846c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800846e:	400b      	ands	r3, r1
 8008470:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8008472:	1989      	adds	r1, r1, r6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008474:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8008476:	f001 f9d9 	bl	800982c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800847a:	2200      	movs	r2, #0
 800847c:	0039      	movs	r1, r7
 800847e:	484e      	ldr	r0, [pc, #312]	; (80085b8 <main+0x18c>)
 8008480:	f001 f9d4 	bl	800982c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008484:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008486:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008488:	a903      	add	r1, sp, #12
 800848a:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800848c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800848e:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008490:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008492:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008494:	f001 f8fe 	bl	8009694 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008498:	2380      	movs	r3, #128	; 0x80
 800849a:	011b      	lsls	r3, r3, #4
 800849c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800849e:	2388      	movs	r3, #136	; 0x88
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084a0:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80084a2:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084a4:	4844      	ldr	r0, [pc, #272]	; (80085b8 <main+0x18c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80084a6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084a8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084aa:	f001 f8f3 	bl	8009694 <HAL_GPIO_Init>
  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084ae:	a903      	add	r1, sp, #12
 80084b0:	4841      	ldr	r0, [pc, #260]	; (80085b8 <main+0x18c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80084b2:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80084b4:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084b6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084b8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084ba:	f001 f8eb 	bl	8009694 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80084be:	0022      	movs	r2, r4
 80084c0:	0021      	movs	r1, r4
 80084c2:	2007      	movs	r0, #7
 80084c4:	f000 fdf6 	bl	80090b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80084c8:	2007      	movs	r0, #7
 80084ca:	f000 fe1d 	bl	8009108 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80084ce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80084d0:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80084d2:	4333      	orrs	r3, r6
 80084d4:	632b      	str	r3, [r5, #48]	; 0x30
 80084d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80084d8:	0021      	movs	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80084da:	401e      	ands	r6, r3
 80084dc:	9603      	str	r6, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80084de:	200a      	movs	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 80084e0:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80084e2:	f000 fde7 	bl	80090b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80084e6:	200a      	movs	r0, #10
 80084e8:	f000 fe0e 	bl	8009108 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80084ec:	0022      	movs	r2, r4
 80084ee:	0021      	movs	r1, r4
 80084f0:	200b      	movs	r0, #11
 80084f2:	f000 fddf 	bl	80090b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80084f6:	200b      	movs	r0, #11
 80084f8:	f000 fe06 	bl	8009108 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 80084fc:	482f      	ldr	r0, [pc, #188]	; (80085bc <main+0x190>)
 80084fe:	4b30      	ldr	r3, [pc, #192]	; (80085c0 <main+0x194>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008500:	6084      	str	r4, [r0, #8]
  hspi1.Instance = SPI1;
 8008502:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008504:	2382      	movs	r3, #130	; 0x82
 8008506:	005b      	lsls	r3, r3, #1
 8008508:	6043      	str	r3, [r0, #4]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800850a:	33fc      	adds	r3, #252	; 0xfc
 800850c:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800850e:	3bf1      	subs	r3, #241	; 0xf1
 8008510:	3bff      	subs	r3, #255	; 0xff
 8008512:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8008514:	3b09      	subs	r3, #9
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008516:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008518:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800851a:	6144      	str	r4, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800851c:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800851e:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008520:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8008522:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008524:	f001 ff04 	bl	800a330 <HAL_SPI_Init>
 8008528:	42a0      	cmp	r0, r4
 800852a:	d001      	beq.n	8008530 <main+0x104>
 800852c:	b672      	cpsid	i
 800852e:	e7fe      	b.n	800852e <main+0x102>
  huart2.Instance = USART2;
 8008530:	4b24      	ldr	r3, [pc, #144]	; (80085c4 <main+0x198>)
 8008532:	4a25      	ldr	r2, [pc, #148]	; (80085c8 <main+0x19c>)
  huart2.Init.Mode = UART_MODE_TX;
 8008534:	2408      	movs	r4, #8
  huart2.Instance = USART2;
 8008536:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008538:	22e1      	movs	r2, #225	; 0xe1
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800853a:	6098      	str	r0, [r3, #8]
  huart2.Init.BaudRate = 115200;
 800853c:	0252      	lsls	r2, r2, #9
  huart2.Init.StopBits = UART_STOPBITS_1;
 800853e:	60d8      	str	r0, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008540:	6118      	str	r0, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008542:	6198      	str	r0, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008544:	61d8      	str	r0, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008546:	6218      	str	r0, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008548:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800854a:	0018      	movs	r0, r3
  huart2.Init.BaudRate = 115200;
 800854c:	605a      	str	r2, [r3, #4]
  huart2.Init.Mode = UART_MODE_TX;
 800854e:	615c      	str	r4, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008550:	f002 fdf6 	bl	800b140 <HAL_UART_Init>
 8008554:	2800      	cmp	r0, #0
 8008556:	d001      	beq.n	800855c <main+0x130>
 8008558:	b672      	cpsid	i
 800855a:	e7fe      	b.n	800855a <main+0x12e>
	huart1.Instance = USART1;
 800855c:	4b1b      	ldr	r3, [pc, #108]	; (80085cc <main+0x1a0>)
 800855e:	4a1c      	ldr	r2, [pc, #112]	; (80085d0 <main+0x1a4>)
	huart1.Init.Mode = UART_MODE_TX_RX;
 8008560:	250c      	movs	r5, #12
	huart1.Instance = USART1;
 8008562:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 1500000;
 8008564:	4a1b      	ldr	r2, [pc, #108]	; (80085d4 <main+0x1a8>)
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008566:	6098      	str	r0, [r3, #8]
	huart1.Init.BaudRate = 1500000;
 8008568:	605a      	str	r2, [r3, #4]
	huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800856a:	2280      	movs	r2, #128	; 0x80
	huart1.Init.StopBits = UART_STOPBITS_1;
 800856c:	60d8      	str	r0, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800856e:	6118      	str	r0, [r3, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008570:	6198      	str	r0, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008572:	61d8      	str	r0, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008574:	6218      	str	r0, [r3, #32]
	huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8008576:	0212      	lsls	r2, r2, #8
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8008578:	0018      	movs	r0, r3
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800857a:	625c      	str	r4, [r3, #36]	; 0x24
	huart1.Init.Mode = UART_MODE_TX_RX;
 800857c:	615d      	str	r5, [r3, #20]
	huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800857e:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8008580:	f002 fdde 	bl	800b140 <HAL_UART_Init>
 8008584:	1e04      	subs	r4, r0, #0
 8008586:	d001      	beq.n	800858c <main+0x160>
 8008588:	b672      	cpsid	i
 800858a:	e7fe      	b.n	800858a <main+0x15e>
  GPIO_Configure(gInitGPIOs, gGPIOPinCount);
 800858c:	0029      	movs	r1, r5
 800858e:	4812      	ldr	r0, [pc, #72]	; (80085d8 <main+0x1ac>)
 8008590:	f7ff fc90 	bl	8007eb4 <GPIO_Configure>
  debug_init();
 8008594:	f7ff fbfe 	bl	8007d94 <debug_init>
  conf_init();
 8008598:	f7ff fbd8 	bl	8007d4c <conf_init>
  rt_bus_init();
 800859c:	f000 f9e0 	bl	8008960 <rt_bus_init>
  iapMailbox[0] = 0x00;
 80085a0:	4b0e      	ldr	r3, [pc, #56]	; (80085dc <main+0x1b0>)
 80085a2:	601c      	str	r4, [r3, #0]
  iapMailbox[1] = 0x00;
 80085a4:	605c      	str	r4, [r3, #4]
  LTC_init();
 80085a6:	f7ff fe81 	bl	80082ac <LTC_init>
	  rt_bus_proto_clear();
 80085aa:	f000 fa5b 	bl	8008a64 <rt_bus_proto_clear>
	  LTC_process();
 80085ae:	f7ff fe49 	bl	8008244 <LTC_process>
 80085b2:	e7fa      	b.n	80085aa <main+0x17e>
 80085b4:	40021000 	.word	0x40021000
 80085b8:	50000400 	.word	0x50000400
 80085bc:	200010bc 	.word	0x200010bc
 80085c0:	40013000 	.word	0x40013000
 80085c4:	20001114 	.word	0x20001114
 80085c8:	40004400 	.word	0x40004400
 80085cc:	20001038 	.word	0x20001038
 80085d0:	40013800 	.word	0x40013800
 80085d4:	0016e360 	.word	0x0016e360
 80085d8:	0800fcf0 	.word	0x0800fcf0
 80085dc:	20000100 	.word	0x20000100

080085e0 <Error_Handler>:
 80085e0:	b672      	cpsid	i
 80085e2:	e7fe      	b.n	80085e2 <Error_Handler+0x2>

080085e4 <rt_bus_cmd_enter_bootloader>:
#if (BUS_CAN_ENTER_BOOTLOADER == 1)
uint32_t enter_bootloader = 0;
extern void bus_entering_bootlaoder_hook();
uint32_t rt_bus_cmd_enter_bootloader(uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
	enter_bootloader = 1; // Can not jump from interrupt context to bootloader application. Just flag the request
 80085e4:	2201      	movs	r2, #1
 80085e6:	4b02      	ldr	r3, [pc, #8]	; (80085f0 <rt_bus_cmd_enter_bootloader+0xc>)
	return RT_PROTO_SkipReply;
}
 80085e8:	2005      	movs	r0, #5
	enter_bootloader = 1; // Can not jump from interrupt context to bootloader application. Just flag the request
 80085ea:	601a      	str	r2, [r3, #0]
}
 80085ec:	4770      	bx	lr
 80085ee:	46c0      	nop			; (mov r8, r8)
 80085f0:	20000324 	.word	0x20000324

080085f4 <rt_bus_cmd_ping_handler>:
{
 80085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return RT_PROTO_FrameError;
 80085f6:	2401      	movs	r4, #1
{
 80085f8:	0007      	movs	r7, r0
 80085fa:	0016      	movs	r6, r2
 80085fc:	001d      	movs	r5, r3
	if (rxLen != 1)
 80085fe:	42a1      	cmp	r1, r4
 8008600:	d106      	bne.n	8008610 <rt_bus_cmd_ping_handler+0x1c>
	bus_ping_received_hook();
 8008602:	f7ff fb47 	bl	8007c94 <bus_ping_received_hook>
	txData[0] = rxData[0] + 1;
 8008606:	783b      	ldrb	r3, [r7, #0]
 8008608:	191b      	adds	r3, r3, r4
 800860a:	7033      	strb	r3, [r6, #0]
	*txLen = 1;
 800860c:	802c      	strh	r4, [r5, #0]
	return RT_PROTO_OK;
 800860e:	2400      	movs	r4, #0
}
 8008610:	0020      	movs	r0, r4
 8008612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008614 <rt_bus_cmd_ident_handler>:
{
 8008614:	0002      	movs	r2, r0
		return RT_PROTO_FrameError;
 8008616:	2001      	movs	r0, #1
{
 8008618:	b510      	push	{r4, lr}
 800861a:	001c      	movs	r4, r3
	if (rxLen != 1)
 800861c:	4281      	cmp	r1, r0
 800861e:	d104      	bne.n	800862a <rt_bus_cmd_ident_handler+0x16>
	leds_ident(rxData[0]);
 8008620:	7810      	ldrb	r0, [r2, #0]
 8008622:	f7ff fc75 	bl	8007f10 <leds_ident>
	*txLen = 0;
 8008626:	2000      	movs	r0, #0
 8008628:	8020      	strh	r0, [r4, #0]
}
 800862a:	bd10      	pop	{r4, pc}

0800862c <rt_bus_cmd_reset>:
	iapMailbox[0] = 0;
 800862c:	2200      	movs	r2, #0
 800862e:	4b07      	ldr	r3, [pc, #28]	; (800864c <rt_bus_cmd_reset+0x20>)
{
 8008630:	b510      	push	{r4, lr}
	iapMailbox[0] = 0;
 8008632:	601a      	str	r2, [r3, #0]
	iapMailbox[1] = 0;
 8008634:	605a      	str	r2, [r3, #4]
	bus_reseting_hook();
 8008636:	f7ff fb3b 	bl	8007cb0 <bus_reseting_hook>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800863a:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800863e:	4b04      	ldr	r3, [pc, #16]	; (8008650 <rt_bus_cmd_reset+0x24>)
 8008640:	4a04      	ldr	r2, [pc, #16]	; (8008654 <rt_bus_cmd_reset+0x28>)
 8008642:	60da      	str	r2, [r3, #12]
 8008644:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8008648:	46c0      	nop			; (mov r8, r8)
 800864a:	e7fd      	b.n	8008648 <rt_bus_cmd_reset+0x1c>
 800864c:	20000100 	.word	0x20000100
 8008650:	e000ed00 	.word	0xe000ed00
 8008654:	05fa0004 	.word	0x05fa0004

08008658 <rt_bus_cmd_read_info_handler>:
{
 8008658:	b570      	push	{r4, r5, r6, lr}
 800865a:	001d      	movs	r5, r3
 800865c:	0014      	movs	r4, r2
 800865e:	2300      	movs	r3, #0
		txData[length++] = *((uint8_t *)UID_BASE + i);
 8008660:	4915      	ldr	r1, [pc, #84]	; (80086b8 <rt_bus_cmd_read_info_handler+0x60>)
 8008662:	1aca      	subs	r2, r1, r3
 8008664:	7812      	ldrb	r2, [r2, #0]
 8008666:	54e2      	strb	r2, [r4, r3]
 8008668:	3301      	adds	r3, #1
	for (int i=11;i>=0;i--)
 800866a:	2b0c      	cmp	r3, #12
 800866c:	d1f9      	bne.n	8008662 <rt_bus_cmd_read_info_handler+0xa>
	sprintf((char *)&txData[length],"%s %s",__DATE__,__TIME__);
 800866e:	0020      	movs	r0, r4
 8008670:	4b12      	ldr	r3, [pc, #72]	; (80086bc <rt_bus_cmd_read_info_handler+0x64>)
 8008672:	4a13      	ldr	r2, [pc, #76]	; (80086c0 <rt_bus_cmd_read_info_handler+0x68>)
 8008674:	4913      	ldr	r1, [pc, #76]	; (80086c4 <rt_bus_cmd_read_info_handler+0x6c>)
 8008676:	300c      	adds	r0, #12
 8008678:	f003 fc5a 	bl	800bf30 <siprintf>
	memcpy(&txData[length],&appinfo,sizeof(appinfo));		//Copy App Version
 800867c:	0020      	movs	r0, r4
 800867e:	2208      	movs	r2, #8
 8008680:	4911      	ldr	r1, [pc, #68]	; (80086c8 <rt_bus_cmd_read_info_handler+0x70>)
 8008682:	302c      	adds	r0, #44	; 0x2c
 8008684:	f002 fdc9 	bl	800b21a <memcpy>
	memcpy(&txData[length],appsha,sizeof(appsha));			// Copy SHA of application
 8008688:	0020      	movs	r0, r4
 800868a:	2214      	movs	r2, #20
 800868c:	490f      	ldr	r1, [pc, #60]	; (80086cc <rt_bus_cmd_read_info_handler+0x74>)
 800868e:	3034      	adds	r0, #52	; 0x34
 8008690:	f002 fdc3 	bl	800b21a <memcpy>
	memcpy(&txData[length],&gFrameCount,sizeof(uint32_t));	// Copy Total Received Frame Count
 8008694:	0020      	movs	r0, r4
 8008696:	490e      	ldr	r1, [pc, #56]	; (80086d0 <rt_bus_cmd_read_info_handler+0x78>)
 8008698:	2204      	movs	r2, #4
 800869a:	3048      	adds	r0, #72	; 0x48
 800869c:	f002 fdbd 	bl	800b21a <memcpy>
	txData[length] = BOARD_TYPE_LTC;
 80086a0:	0023      	movs	r3, r4
 80086a2:	2206      	movs	r2, #6
	length += bus_rd_info_hook(&txData[length]);	// let application to add data to this frame
 80086a4:	0020      	movs	r0, r4
	txData[length] = BOARD_TYPE_LTC;
 80086a6:	334c      	adds	r3, #76	; 0x4c
 80086a8:	701a      	strb	r2, [r3, #0]
	length += bus_rd_info_hook(&txData[length]);	// let application to add data to this frame
 80086aa:	3050      	adds	r0, #80	; 0x50
 80086ac:	f7ff fb01 	bl	8007cb2 <bus_rd_info_hook>
 80086b0:	3050      	adds	r0, #80	; 0x50
	*txLen = length;
 80086b2:	8028      	strh	r0, [r5, #0]
}
 80086b4:	2000      	movs	r0, #0
 80086b6:	bd70      	pop	{r4, r5, r6, pc}
 80086b8:	1ff8005b 	.word	0x1ff8005b
 80086bc:	0800fe5c 	.word	0x0800fe5c
 80086c0:	0800fe65 	.word	0x0800fe65
 80086c4:	0800fe71 	.word	0x0800fe71
 80086c8:	080050c0 	.word	0x080050c0
 80086cc:	080103e4 	.word	0x080103e4
 80086d0:	20000328 	.word	0x20000328

080086d4 <rt_bus_get_bit_count>:
	for (int i=0;i<chCount;i++)	// check if unsupported channel is flagged
 80086d4:	2300      	movs	r3, #0
{
 80086d6:	b530      	push	{r4, r5, lr}
	int mask = 0;
 80086d8:	001a      	movs	r2, r3
		mask |= (1<<i);
 80086da:	2401      	movs	r4, #1
	for (int i=0;i<chCount;i++)	// check if unsupported channel is flagged
 80086dc:	4299      	cmp	r1, r3
 80086de:	dc08      	bgt.n	80086f2 <rt_bus_get_bit_count+0x1e>
	if ((~mask) & data)	// if unsupported ch is flagged than return 0
 80086e0:	0003      	movs	r3, r0
 80086e2:	4393      	bics	r3, r2
 80086e4:	d110      	bne.n	8008708 <rt_bus_get_bit_count+0x34>
	for (int i=0;i<chCount;i++)
 80086e6:	001a      	movs	r2, r3
		if (data & (1<<i))
 80086e8:	2501      	movs	r5, #1
	for (int i=0;i<chCount;i++)
 80086ea:	4291      	cmp	r1, r2
 80086ec:	dc06      	bgt.n	80086fc <rt_bus_get_bit_count+0x28>
}
 80086ee:	0018      	movs	r0, r3
 80086f0:	bd30      	pop	{r4, r5, pc}
		mask |= (1<<i);
 80086f2:	0025      	movs	r5, r4
 80086f4:	409d      	lsls	r5, r3
	for (int i=0;i<chCount;i++)	// check if unsupported channel is flagged
 80086f6:	3301      	adds	r3, #1
		mask |= (1<<i);
 80086f8:	432a      	orrs	r2, r5
 80086fa:	e7ef      	b.n	80086dc <rt_bus_get_bit_count+0x8>
		if (data & (1<<i))
 80086fc:	0004      	movs	r4, r0
 80086fe:	4114      	asrs	r4, r2
			ret ++;
 8008700:	402c      	ands	r4, r5
 8008702:	191b      	adds	r3, r3, r4
	for (int i=0;i<chCount;i++)
 8008704:	3201      	adds	r2, #1
 8008706:	e7f0      	b.n	80086ea <rt_bus_get_bit_count+0x16>
		return 0;
 8008708:	2300      	movs	r3, #0
 800870a:	e7f0      	b.n	80086ee <rt_bus_get_bit_count+0x1a>

0800870c <rt_bus_cmd_conf_read_handler>:
{
 800870c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800870e:	9301      	str	r3, [sp, #4]
	if ((rxData[0] == 0)||(rxData[0] == 0xFF))
 8008710:	7803      	ldrb	r3, [r0, #0]
{
 8008712:	0006      	movs	r6, r0
	if ((rxData[0] == 0)||(rxData[0] == 0xFF))
 8008714:	3b01      	subs	r3, #1
 8008716:	b2db      	uxtb	r3, r3
{
 8008718:	0017      	movs	r7, r2
	if ((rxData[0] == 0)||(rxData[0] == 0xFF))
 800871a:	2bfd      	cmp	r3, #253	; 0xfd
 800871c:	d906      	bls.n	800872c <rt_bus_cmd_conf_read_handler+0x20>
		ret = bus_read_all_conf(&txData[0]);
 800871e:	0010      	movs	r0, r2
 8008720:	f7ff fa5e 	bl	8007be0 <bus_read_all_conf>
 8008724:	1e04      	subs	r4, r0, #0
		if (ret < 0)
 8008726:	da1b      	bge.n	8008760 <rt_bus_cmd_conf_read_handler+0x54>
			return RT_PROTO_DataError;
 8008728:	2002      	movs	r0, #2
}
 800872a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		chCount = bus_get_max_ch();
 800872c:	f7ff fa10 	bl	8007b50 <bus_get_max_ch>
		if (rt_bus_get_bit_count(rxData[0],chCount) == 0)
 8008730:	b2c1      	uxtb	r1, r0
 8008732:	7830      	ldrb	r0, [r6, #0]
 8008734:	f7ff ffce 	bl	80086d4 <rt_bus_get_bit_count>
 8008738:	2800      	cmp	r0, #0
 800873a:	d0f5      	beq.n	8008728 <rt_bus_cmd_conf_read_handler+0x1c>
		for (int i=0;i<8;i++)
 800873c:	2500      	movs	r5, #0
	uint32_t length=0;
 800873e:	002c      	movs	r4, r5
			if ((rxData[0] & (1<<i)) == (1<<i))
 8008740:	2301      	movs	r3, #1
 8008742:	40ab      	lsls	r3, r5
 8008744:	7832      	ldrb	r2, [r6, #0]
 8008746:	401a      	ands	r2, r3
 8008748:	4293      	cmp	r3, r2
 800874a:	d106      	bne.n	800875a <rt_bus_cmd_conf_read_handler+0x4e>
				ret = bus_read_ch_conf(i,&txData[length]);
 800874c:	1939      	adds	r1, r7, r4
 800874e:	b2e8      	uxtb	r0, r5
 8008750:	f7ff fa22 	bl	8007b98 <bus_read_ch_conf>
				if (ret < 0)
 8008754:	2800      	cmp	r0, #0
 8008756:	dbe7      	blt.n	8008728 <rt_bus_cmd_conf_read_handler+0x1c>
				length += ret;
 8008758:	1824      	adds	r4, r4, r0
		for (int i=0;i<8;i++)
 800875a:	3501      	adds	r5, #1
 800875c:	2d08      	cmp	r5, #8
 800875e:	d1ef      	bne.n	8008740 <rt_bus_cmd_conf_read_handler+0x34>
	*txLen = length;
 8008760:	9b01      	ldr	r3, [sp, #4]
	return RT_PROTO_OK;
 8008762:	2000      	movs	r0, #0
	*txLen = length;
 8008764:	801c      	strh	r4, [r3, #0]
	return RT_PROTO_OK;
 8008766:	e7e0      	b.n	800872a <rt_bus_cmd_conf_read_handler+0x1e>

08008768 <rt_bus_cmd_conf_write_handler>:
{
 8008768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800876a:	0004      	movs	r4, r0
 800876c:	9301      	str	r3, [sp, #4]
 800876e:	000d      	movs	r5, r1
	chCount = bus_get_max_ch();
 8008770:	f7ff f9ee 	bl	8007b50 <bus_get_max_ch>
	if ((rxData[0] == 0)||(rxData[0] == 0xFF))
 8008774:	7823      	ldrb	r3, [r4, #0]
	chCount = bus_get_max_ch();
 8008776:	0007      	movs	r7, r0
	if ((rxData[0] == 0)||(rxData[0] == 0xFF))
 8008778:	3b01      	subs	r3, #1
 800877a:	b2db      	uxtb	r3, r3
 800877c:	2bfd      	cmp	r3, #253	; 0xfd
 800877e:	d915      	bls.n	80087ac <rt_bus_cmd_conf_write_handler+0x44>
		if (bus_get_ch_conf_length() * chCount != rxLen-1)	// check received data length matches boards requested length
 8008780:	f7ff f9e8 	bl	8007b54 <bus_get_ch_conf_length>
 8008784:	0039      	movs	r1, r7
 8008786:	4341      	muls	r1, r0
 8008788:	3d01      	subs	r5, #1
 800878a:	42a9      	cmp	r1, r5
 800878c:	d001      	beq.n	8008792 <rt_bus_cmd_conf_write_handler+0x2a>
			return RT_PROTO_DataError;
 800878e:	2002      	movs	r0, #2
}
 8008790:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		ret = bus_write_all_conf(&rxData[1],rxLen-1);
 8008792:	1c60      	adds	r0, r4, #1
 8008794:	f7ff fa6a 	bl	8007c6c <bus_write_all_conf>
		if (ret < 0)
 8008798:	2800      	cmp	r0, #0
 800879a:	dbf8      	blt.n	800878e <rt_bus_cmd_conf_write_handler+0x26>
	ret = bus_save_conf();
 800879c:	f7ff fa73 	bl	8007c86 <bus_save_conf>
	if (ret < 0)
 80087a0:	2800      	cmp	r0, #0
 80087a2:	dbf4      	blt.n	800878e <rt_bus_cmd_conf_write_handler+0x26>
	*txLen = 0;
 80087a4:	2000      	movs	r0, #0
 80087a6:	9b01      	ldr	r3, [sp, #4]
 80087a8:	8018      	strh	r0, [r3, #0]
	return RT_PROTO_OK;
 80087aa:	e7f1      	b.n	8008790 <rt_bus_cmd_conf_write_handler+0x28>
		if ((bus_get_ch_conf_length() * rt_bus_get_bit_count(rxData[0],chCount)) + 1  != rxLen)  // check received data length matches boards requested length
 80087ac:	f7ff f9d2 	bl	8007b54 <bus_get_ch_conf_length>
 80087b0:	b2f9      	uxtb	r1, r7
 80087b2:	0006      	movs	r6, r0
 80087b4:	7820      	ldrb	r0, [r4, #0]
 80087b6:	f7ff ff8d 	bl	80086d4 <rt_bus_get_bit_count>
 80087ba:	4346      	muls	r6, r0
 80087bc:	3601      	adds	r6, #1
 80087be:	42ae      	cmp	r6, r5
 80087c0:	d1e5      	bne.n	800878e <rt_bus_cmd_conf_write_handler+0x26>
		for (int i=0;i<chCount;i++)
 80087c2:	2500      	movs	r5, #0
	uint32_t length=1;
 80087c4:	2601      	movs	r6, #1
		for (int i=0;i<chCount;i++)
 80087c6:	42bd      	cmp	r5, r7
 80087c8:	dae8      	bge.n	800879c <rt_bus_cmd_conf_write_handler+0x34>
			if ((rxData[0] & (1<<i)) == (1<<i))
 80087ca:	2301      	movs	r3, #1
 80087cc:	40ab      	lsls	r3, r5
 80087ce:	7822      	ldrb	r2, [r4, #0]
 80087d0:	401a      	ands	r2, r3
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d106      	bne.n	80087e4 <rt_bus_cmd_conf_write_handler+0x7c>
				ret = bus_write_ch_conf(i,&rxData[length]);
 80087d6:	19a1      	adds	r1, r4, r6
 80087d8:	b2e8      	uxtb	r0, r5
 80087da:	f7ff fa0f 	bl	8007bfc <bus_write_ch_conf>
				if (ret < 0)
 80087de:	2800      	cmp	r0, #0
 80087e0:	dbd5      	blt.n	800878e <rt_bus_cmd_conf_write_handler+0x26>
				length += ret;
 80087e2:	1836      	adds	r6, r6, r0
		for (int i=0;i<chCount;i++)
 80087e4:	3501      	adds	r5, #1
 80087e6:	e7ee      	b.n	80087c6 <rt_bus_cmd_conf_write_handler+0x5e>

080087e8 <rt_bus_cmd_smp_read_handler>:
{
 80087e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087ea:	9301      	str	r3, [sp, #4]
	if ((rxData[0] == 0)||(rxData[0] == 0xFF))
 80087ec:	7803      	ldrb	r3, [r0, #0]
{
 80087ee:	0006      	movs	r6, r0
	if ((rxData[0] == 0)||(rxData[0] == 0xFF))
 80087f0:	3b01      	subs	r3, #1
 80087f2:	b2db      	uxtb	r3, r3
{
 80087f4:	0017      	movs	r7, r2
	if ((rxData[0] == 0)||(rxData[0] == 0xFF))
 80087f6:	2bfd      	cmp	r3, #253	; 0xfd
 80087f8:	d906      	bls.n	8008808 <rt_bus_cmd_smp_read_handler+0x20>
		ret = bus_read_all_sample(&txData[0]);
 80087fa:	0010      	movs	r0, r2
 80087fc:	f7ff f9bc 	bl	8007b78 <bus_read_all_sample>
 8008800:	1e04      	subs	r4, r0, #0
		if (ret < 0)
 8008802:	da1b      	bge.n	800883c <rt_bus_cmd_smp_read_handler+0x54>
			return RT_PROTO_DataError;
 8008804:	2002      	movs	r0, #2
}
 8008806:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		chCount = bus_get_max_ch();
 8008808:	f7ff f9a2 	bl	8007b50 <bus_get_max_ch>
		if (rt_bus_get_bit_count(rxData[0],chCount) == 0)
 800880c:	b2c1      	uxtb	r1, r0
 800880e:	7830      	ldrb	r0, [r6, #0]
 8008810:	f7ff ff60 	bl	80086d4 <rt_bus_get_bit_count>
 8008814:	2800      	cmp	r0, #0
 8008816:	d0f5      	beq.n	8008804 <rt_bus_cmd_smp_read_handler+0x1c>
		for (int i=0;i<8;i++)
 8008818:	2500      	movs	r5, #0
	int length=0;
 800881a:	002c      	movs	r4, r5
			if ((rxData[0] & (1<<i)) == (1<<i))
 800881c:	2301      	movs	r3, #1
 800881e:	40ab      	lsls	r3, r5
 8008820:	7832      	ldrb	r2, [r6, #0]
 8008822:	401a      	ands	r2, r3
 8008824:	4293      	cmp	r3, r2
 8008826:	d106      	bne.n	8008836 <rt_bus_cmd_smp_read_handler+0x4e>
				ret = bus_read_ch_sample(i,&txData[length]);
 8008828:	1939      	adds	r1, r7, r4
 800882a:	b2e8      	uxtb	r0, r5
 800882c:	f7ff f994 	bl	8007b58 <bus_read_ch_sample>
				if (ret < 0)
 8008830:	2800      	cmp	r0, #0
 8008832:	dbe7      	blt.n	8008804 <rt_bus_cmd_smp_read_handler+0x1c>
				length += ret;
 8008834:	1824      	adds	r4, r4, r0
		for (int i=0;i<8;i++)
 8008836:	3501      	adds	r5, #1
 8008838:	2d08      	cmp	r5, #8
 800883a:	d1ef      	bne.n	800881c <rt_bus_cmd_smp_read_handler+0x34>
	*txLen = length;
 800883c:	9b01      	ldr	r3, [sp, #4]
	return RT_PROTO_OK;
 800883e:	2000      	movs	r0, #0
	*txLen = length;
 8008840:	801c      	strh	r4, [r3, #0]
	return RT_PROTO_OK;
 8008842:	e7e0      	b.n	8008806 <rt_bus_cmd_smp_read_handler+0x1e>

08008844 <rt_bus_cmd_process>:
#endif

void rt_bus_cmd_process()
{
#if (BUS_CAN_ENTER_BOOTLOADER == 1)
	if (enter_bootloader)
 8008844:	4b05      	ldr	r3, [pc, #20]	; (800885c <rt_bus_cmd_process+0x18>)
{
 8008846:	b510      	push	{r4, lr}
	if (enter_bootloader)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d004      	beq.n	8008858 <rt_bus_cmd_process+0x14>
	{
		bus_entering_bootlaoder_hook();
 800884e:	f7ff fa1f 	bl	8007c90 <bus_entering_bootlaoder_hook>
		while(1)
		{
			bl_jump();
 8008852:	f7ff f963 	bl	8007b1c <bl_jump>
 8008856:	e7fc      	b.n	8008852 <rt_bus_cmd_process+0xe>
		}
	}
#endif

}
 8008858:	bd10      	pop	{r4, pc}
 800885a:	46c0      	nop			; (mov r8, r8)
 800885c:	20000324 	.word	0x20000324

08008860 <rt_bus_get_bid>:
{
	uint16_t ret=0;
	GPIO_InitTypeDef GPIO_InitStruct;

	//Configure GPIO pin : PtPin
	GPIO_InitStruct.Pin = ADDR_0_PIN;
 8008860:	2380      	movs	r3, #128	; 0x80
{
 8008862:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitStruct.Pin = ADDR_0_PIN;
 8008864:	019b      	lsls	r3, r3, #6
{
 8008866:	b086      	sub	sp, #24
	GPIO_InitStruct.Pin = ADDR_0_PIN;
 8008868:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800886a:	2401      	movs	r4, #1
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800886c:	2300      	movs	r3, #0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(ADDR_0_PORT, &GPIO_InitStruct);
 800886e:	a901      	add	r1, sp, #4
 8008870:	483a      	ldr	r0, [pc, #232]	; (800895c <rt_bus_get_bid+0xfc>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008872:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008874:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008876:	9403      	str	r4, [sp, #12]
	HAL_GPIO_Init(ADDR_0_PORT, &GPIO_InitStruct);
 8008878:	f000 ff0c 	bl	8009694 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ADDR_1_PIN;
 800887c:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(ADDR_1_PORT, &GPIO_InitStruct);
 800887e:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pin = ADDR_1_PIN;
 8008880:	01db      	lsls	r3, r3, #7
	HAL_GPIO_Init(ADDR_1_PORT, &GPIO_InitStruct);
 8008882:	4836      	ldr	r0, [pc, #216]	; (800895c <rt_bus_get_bid+0xfc>)
	GPIO_InitStruct.Pin = ADDR_1_PIN;
 8008884:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(ADDR_1_PORT, &GPIO_InitStruct);
 8008886:	f000 ff05 	bl	8009694 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ADDR_2_PIN;
 800888a:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(ADDR_2_PORT, &GPIO_InitStruct);
 800888c:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pin = ADDR_2_PIN;
 800888e:	021b      	lsls	r3, r3, #8
	HAL_GPIO_Init(ADDR_2_PORT, &GPIO_InitStruct);
 8008890:	4832      	ldr	r0, [pc, #200]	; (800895c <rt_bus_get_bid+0xfc>)
	GPIO_InitStruct.Pin = ADDR_2_PIN;
 8008892:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(ADDR_2_PORT, &GPIO_InitStruct);
 8008894:	f000 fefe 	bl	8009694 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ADDR_3_PIN;
	HAL_GPIO_Init(ADDR_3_PORT, &GPIO_InitStruct);
 8008898:	a901      	add	r1, sp, #4
 800889a:	4830      	ldr	r0, [pc, #192]	; (800895c <rt_bus_get_bid+0xfc>)
	GPIO_InitStruct.Pin = ADDR_3_PIN;
 800889c:	9401      	str	r4, [sp, #4]
	HAL_GPIO_Init(ADDR_3_PORT, &GPIO_InitStruct);
 800889e:	f000 fef9 	bl	8009694 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ADDR_4_PIN;
 80088a2:	2302      	movs	r3, #2
	HAL_GPIO_Init(ADDR_4_PORT, &GPIO_InitStruct);
 80088a4:	a901      	add	r1, sp, #4
 80088a6:	482d      	ldr	r0, [pc, #180]	; (800895c <rt_bus_get_bid+0xfc>)
	GPIO_InitStruct.Pin = ADDR_4_PIN;
 80088a8:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(ADDR_4_PORT, &GPIO_InitStruct);
 80088aa:	f000 fef3 	bl	8009694 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ADDR_5_PIN;
 80088ae:	2304      	movs	r3, #4
	HAL_GPIO_Init(ADDR_5_PORT, &GPIO_InitStruct);
 80088b0:	a901      	add	r1, sp, #4
 80088b2:	482a      	ldr	r0, [pc, #168]	; (800895c <rt_bus_get_bid+0xfc>)
	GPIO_InitStruct.Pin = ADDR_5_PIN;
 80088b4:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(ADDR_5_PORT, &GPIO_InitStruct);
 80088b6:	f000 feed 	bl	8009694 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = BP_PRESENCE_PIN;
 80088ba:	2308      	movs	r3, #8
	HAL_GPIO_Init(BP_PRESENCE_PORT, &GPIO_InitStruct);
 80088bc:	a901      	add	r1, sp, #4
 80088be:	4827      	ldr	r0, [pc, #156]	; (800895c <rt_bus_get_bid+0xfc>)


	while (HAL_GPIO_ReadPin(BP_PRESENCE_PORT,BP_PRESENCE_PIN)) // Backplane didn't recognized
	{
		leds_0_off();
 80088c0:	25a0      	movs	r5, #160	; 0xa0
	GPIO_InitStruct.Pin = BP_PRESENCE_PIN;
 80088c2:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(BP_PRESENCE_PORT, &GPIO_InitStruct);
 80088c4:	f000 fee6 	bl	8009694 <HAL_GPIO_Init>
		leds_0_off();
 80088c8:	05ed      	lsls	r5, r5, #23
	while (HAL_GPIO_ReadPin(BP_PRESENCE_PORT,BP_PRESENCE_PIN)) // Backplane didn't recognized
 80088ca:	2108      	movs	r1, #8
 80088cc:	4823      	ldr	r0, [pc, #140]	; (800895c <rt_bus_get_bid+0xfc>)
 80088ce:	f000 ffa7 	bl	8009820 <HAL_GPIO_ReadPin>
 80088d2:	2800      	cmp	r0, #0
 80088d4:	d134      	bne.n	8008940 <rt_bus_get_bid+0xe0>
		HAL_Delay(500);
	}

	//HAL_Delay(500);

	if (!HAL_GPIO_ReadPin(ADDR_0_PORT,ADDR_0_PIN))
 80088d6:	2180      	movs	r1, #128	; 0x80
 80088d8:	4820      	ldr	r0, [pc, #128]	; (800895c <rt_bus_get_bid+0xfc>)
 80088da:	0189      	lsls	r1, r1, #6
 80088dc:	f000 ffa0 	bl	8009820 <HAL_GPIO_ReadPin>
		ret |= (1<<0);
	if (!HAL_GPIO_ReadPin(ADDR_1_PORT,ADDR_1_PIN))
 80088e0:	2180      	movs	r1, #128	; 0x80
	if (!HAL_GPIO_ReadPin(ADDR_0_PORT,ADDR_0_PIN))
 80088e2:	4244      	negs	r4, r0
 80088e4:	4144      	adcs	r4, r0
	if (!HAL_GPIO_ReadPin(ADDR_1_PORT,ADDR_1_PIN))
 80088e6:	01c9      	lsls	r1, r1, #7
 80088e8:	481c      	ldr	r0, [pc, #112]	; (800895c <rt_bus_get_bid+0xfc>)
	uint16_t ret=0;
 80088ea:	b2a4      	uxth	r4, r4
	if (!HAL_GPIO_ReadPin(ADDR_1_PORT,ADDR_1_PIN))
 80088ec:	f000 ff98 	bl	8009820 <HAL_GPIO_ReadPin>
 80088f0:	2800      	cmp	r0, #0
 80088f2:	d101      	bne.n	80088f8 <rt_bus_get_bid+0x98>
		ret |= (1<<1);
 80088f4:	2302      	movs	r3, #2
 80088f6:	431c      	orrs	r4, r3
	if (!HAL_GPIO_ReadPin(ADDR_2_PORT,ADDR_2_PIN))
 80088f8:	2180      	movs	r1, #128	; 0x80
 80088fa:	4818      	ldr	r0, [pc, #96]	; (800895c <rt_bus_get_bid+0xfc>)
 80088fc:	0209      	lsls	r1, r1, #8
 80088fe:	f000 ff8f 	bl	8009820 <HAL_GPIO_ReadPin>
 8008902:	2800      	cmp	r0, #0
 8008904:	d101      	bne.n	800890a <rt_bus_get_bid+0xaa>
		ret |= (1<<2);
 8008906:	2304      	movs	r3, #4
 8008908:	431c      	orrs	r4, r3
	if (!HAL_GPIO_ReadPin(ADDR_3_PORT,ADDR_3_PIN))
 800890a:	2101      	movs	r1, #1
 800890c:	4813      	ldr	r0, [pc, #76]	; (800895c <rt_bus_get_bid+0xfc>)
 800890e:	f000 ff87 	bl	8009820 <HAL_GPIO_ReadPin>
 8008912:	2800      	cmp	r0, #0
 8008914:	d101      	bne.n	800891a <rt_bus_get_bid+0xba>
		ret |= (1<<3);
 8008916:	2308      	movs	r3, #8
 8008918:	431c      	orrs	r4, r3
	if (!HAL_GPIO_ReadPin(ADDR_4_PORT,ADDR_4_PIN))
 800891a:	2102      	movs	r1, #2
 800891c:	480f      	ldr	r0, [pc, #60]	; (800895c <rt_bus_get_bid+0xfc>)
 800891e:	f000 ff7f 	bl	8009820 <HAL_GPIO_ReadPin>
 8008922:	2800      	cmp	r0, #0
 8008924:	d101      	bne.n	800892a <rt_bus_get_bid+0xca>
		ret |= (1<<4);
 8008926:	2310      	movs	r3, #16
 8008928:	431c      	orrs	r4, r3
	if (!HAL_GPIO_ReadPin(ADDR_5_PORT,ADDR_5_PIN))
 800892a:	2104      	movs	r1, #4
 800892c:	480b      	ldr	r0, [pc, #44]	; (800895c <rt_bus_get_bid+0xfc>)
 800892e:	f000 ff77 	bl	8009820 <HAL_GPIO_ReadPin>
 8008932:	2800      	cmp	r0, #0
 8008934:	d101      	bne.n	800893a <rt_bus_get_bid+0xda>
		ret |= (1<<5);
 8008936:	2320      	movs	r3, #32
 8008938:	431c      	orrs	r4, r3



	return ret;
}
 800893a:	0020      	movs	r0, r4
 800893c:	b006      	add	sp, #24
 800893e:	bd70      	pop	{r4, r5, r6, pc}
		leds_1_on();
 8008940:	2602      	movs	r6, #2
		HAL_Delay(500);
 8008942:	20fa      	movs	r0, #250	; 0xfa
		leds_0_off();
 8008944:	62ac      	str	r4, [r5, #40]	; 0x28
		HAL_Delay(500);
 8008946:	0040      	lsls	r0, r0, #1
		leds_1_on();
 8008948:	61ae      	str	r6, [r5, #24]
		HAL_Delay(500);
 800894a:	f000 fba1 	bl	8009090 <HAL_Delay>
		HAL_Delay(500);
 800894e:	20fa      	movs	r0, #250	; 0xfa
		leds_0_on();
 8008950:	61ac      	str	r4, [r5, #24]
		HAL_Delay(500);
 8008952:	0040      	lsls	r0, r0, #1
		leds_1_off();
 8008954:	62ae      	str	r6, [r5, #40]	; 0x28
		HAL_Delay(500);
 8008956:	f000 fb9b 	bl	8009090 <HAL_Delay>
 800895a:	e7b6      	b.n	80088ca <rt_bus_get_bid+0x6a>
 800895c:	50000800 	.word	0x50000800

08008960 <rt_bus_init>:
void rt_bus_init()
{
 8008960:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8008962:	b672      	cpsid	i
	__disable_irq();
	for (int i=0;i<BUS_RX_BUFFER_SIZE;i++)
 8008964:	2300      	movs	r3, #0
 8008966:	229c      	movs	r2, #156	; 0x9c
		rxBuffer[i] = 0;
 8008968:	0018      	movs	r0, r3
 800896a:	4c16      	ldr	r4, [pc, #88]	; (80089c4 <rt_bus_init+0x64>)
	for (int i=0;i<BUS_RX_BUFFER_SIZE;i++)
 800896c:	00d2      	lsls	r2, r2, #3
		rxBuffer[i] = 0;
 800896e:	1919      	adds	r1, r3, r4
	for (int i=0;i<BUS_RX_BUFFER_SIZE;i++)
 8008970:	3301      	adds	r3, #1
		rxBuffer[i] = 0;
 8008972:	7008      	strb	r0, [r1, #0]
	for (int i=0;i<BUS_RX_BUFFER_SIZE;i++)
 8008974:	4293      	cmp	r3, r2
 8008976:	d1fa      	bne.n	800896e <rt_bus_init+0xe>
	for (int i=0;i<BUS_TX_BUFFER_SIZE;i++)
 8008978:	2400      	movs	r4, #0
 800897a:	239c      	movs	r3, #156	; 0x9c
		txBuffer[i] = 0;
 800897c:	0021      	movs	r1, r4
 800897e:	4812      	ldr	r0, [pc, #72]	; (80089c8 <rt_bus_init+0x68>)
	for (int i=0;i<BUS_TX_BUFFER_SIZE;i++)
 8008980:	00db      	lsls	r3, r3, #3
		txBuffer[i] = 0;
 8008982:	1822      	adds	r2, r4, r0
	for (int i=0;i<BUS_TX_BUFFER_SIZE;i++)
 8008984:	3401      	adds	r4, #1
		txBuffer[i] = 0;
 8008986:	7011      	strb	r1, [r2, #0]
	for (int i=0;i<BUS_TX_BUFFER_SIZE;i++)
 8008988:	429c      	cmp	r4, r3
 800898a:	d1fa      	bne.n	8008982 <rt_bus_init+0x22>
  __ASM volatile ("cpsie i" : : : "memory");
 800898c:	b662      	cpsie	i
	__enable_irq();
	uBusId = rt_bus_get_bid();
 800898e:	f7ff ff67 	bl	8008860 <rt_bus_get_bid>
 8008992:	4b0e      	ldr	r3, [pc, #56]	; (80089cc <rt_bus_init+0x6c>)
 8008994:	0001      	movs	r1, r0
 8008996:	8018      	strh	r0, [r3, #0]

	dbg_printf("Board Init BUS ID %4.4X\n",uBusId);
 8008998:	480d      	ldr	r0, [pc, #52]	; (80089d0 <rt_bus_init+0x70>)
 800899a:	f003 faab 	bl	800bef4 <iprintf>


	// Enable DMA Mode for receive in Circular Buffer Mode which allows for continuous data reception without requiring to be retriggered

	HAL_DMA_Start(BUS_UART->hdmarx, (uint32_t)&BUS_UART->Instance->RDR, (uint32_t)rxDMABuffer, BUS_RX_BUFFER_SIZE);
 800899e:	4d0d      	ldr	r5, [pc, #52]	; (80089d4 <rt_bus_init+0x74>)
 80089a0:	0023      	movs	r3, r4
 80089a2:	6829      	ldr	r1, [r5, #0]
 80089a4:	6f28      	ldr	r0, [r5, #112]	; 0x70
 80089a6:	3124      	adds	r1, #36	; 0x24
 80089a8:	4a0b      	ldr	r2, [pc, #44]	; (80089d8 <rt_bus_init+0x78>)
 80089aa:	f000 fc39 	bl	8009220 <HAL_DMA_Start>

	// Enable the DMA transfer for the receiver request by setting the DMAR bit in the UART CR3 register
	SET_BIT(BUS_UART->Instance->CR3, USART_CR3_DMAR);
 80089ae:	2240      	movs	r2, #64	; 0x40
 80089b0:	682b      	ldr	r3, [r5, #0]
 80089b2:	6899      	ldr	r1, [r3, #8]
 80089b4:	430a      	orrs	r2, r1
 80089b6:	609a      	str	r2, [r3, #8]

	// Enable Idle Detection Interrupt
	SET_BIT(BUS_UART->Instance->CR1 ,USART_CR1_IDLEIE);
 80089b8:	2210      	movs	r2, #16
 80089ba:	6819      	ldr	r1, [r3, #0]
 80089bc:	430a      	orrs	r2, r1
 80089be:	601a      	str	r2, [r3, #0]
		HAL_Delay(500);
		leds_0_on();
		HAL_Delay(100);

	}*/
}
 80089c0:	bd70      	pop	{r4, r5, r6, pc}
 80089c2:	46c0      	nop			; (mov r8, r8)
 80089c4:	20001678 	.word	0x20001678
 80089c8:	20001b58 	.word	0x20001b58
 80089cc:	20000338 	.word	0x20000338
 80089d0:	0800fe77 	.word	0x0800fe77
 80089d4:	20001038 	.word	0x20001038
 80089d8:	20001198 	.word	0x20001198

080089dc <rt_bus_proto_frame_pack>:
void rt_bus_proto_frame_pack(uint8_t cmd, uint16_t *datalength)
{
	uint16_t cCRC = 0;


	txBuffer[0] = PRT_STX;
 80089dc:	2301      	movs	r3, #1
{
 80089de:	b570      	push	{r4, r5, r6, lr}
	txBuffer[0] = PRT_STX;
 80089e0:	4c12      	ldr	r4, [pc, #72]	; (8008a2c <rt_bus_proto_frame_pack+0x50>)
{
 80089e2:	000d      	movs	r5, r1
	txBuffer[0] = PRT_STX;
 80089e4:	7023      	strb	r3, [r4, #0]

	txBuffer[1] = (uBusId & 0xFF00)>>8;
 80089e6:	4b12      	ldr	r3, [pc, #72]	; (8008a30 <rt_bus_proto_frame_pack+0x54>)
 80089e8:	881b      	ldrh	r3, [r3, #0]
 80089ea:	0a1a      	lsrs	r2, r3, #8
 80089ec:	7062      	strb	r2, [r4, #1]
	txBuffer[2] = (uBusId & 0x00FF);
 80089ee:	70a3      	strb	r3, [r4, #2]

	txBuffer[3] = (((*datalength)+1) & 0xFF00)>>8;
 80089f0:	880b      	ldrh	r3, [r1, #0]
 80089f2:	3301      	adds	r3, #1
 80089f4:	121b      	asrs	r3, r3, #8
 80089f6:	70e3      	strb	r3, [r4, #3]
	txBuffer[4] = (((*datalength)+1) & 0xFF);
 80089f8:	880b      	ldrh	r3, [r1, #0]

	txBuffer[5] = cmd;
 80089fa:	7160      	strb	r0, [r4, #5]
	txBuffer[4] = (((*datalength)+1) & 0xFF);
 80089fc:	3301      	adds	r3, #1
 80089fe:	7123      	strb	r3, [r4, #4]

	cCRC =  crc16(&txBuffer[PRT_AD_MSB_IDX], *datalength+5);
 8008a00:	8809      	ldrh	r1, [r1, #0]
 8008a02:	480c      	ldr	r0, [pc, #48]	; (8008a34 <rt_bus_proto_frame_pack+0x58>)
 8008a04:	3105      	adds	r1, #5
 8008a06:	b289      	uxth	r1, r1
 8008a08:	f7ff f9a6 	bl	8007d58 <crc16>

	txBuffer[*datalength + 6] = (cCRC & 0xFF00)>>8;
 8008a0c:	882b      	ldrh	r3, [r5, #0]
 8008a0e:	0a02      	lsrs	r2, r0, #8
 8008a10:	18e3      	adds	r3, r4, r3
 8008a12:	719a      	strb	r2, [r3, #6]
	txBuffer[*datalength + 7] = (cCRC & 0x00FF);
 8008a14:	882b      	ldrh	r3, [r5, #0]
 8008a16:	18e3      	adds	r3, r4, r3
 8008a18:	71d8      	strb	r0, [r3, #7]
	txBuffer[*datalength + 8] = PRT_ETX;
 8008a1a:	882b      	ldrh	r3, [r5, #0]
 8008a1c:	18e4      	adds	r4, r4, r3
 8008a1e:	2303      	movs	r3, #3
 8008a20:	7223      	strb	r3, [r4, #8]

	*datalength += 9;
 8008a22:	882b      	ldrh	r3, [r5, #0]
 8008a24:	3309      	adds	r3, #9
 8008a26:	802b      	strh	r3, [r5, #0]

}
 8008a28:	bd70      	pop	{r4, r5, r6, pc}
 8008a2a:	46c0      	nop			; (mov r8, r8)
 8008a2c:	20001b58 	.word	0x20001b58
 8008a30:	20000338 	.word	0x20000338
 8008a34:	20001b59 	.word	0x20001b59

08008a38 <rt_bus_proto_transmit>:

void rt_bus_proto_transmit(uint16_t length)
{


	uint32_t count = 0;
 8008a38:	2300      	movs	r3, #0
{
 8008a3a:	b510      	push	{r4, lr}
 8008a3c:	0002      	movs	r2, r0
	while ((BUS_UART->gState != HAL_UART_STATE_READY) & (count < 65000))
 8008a3e:	4906      	ldr	r1, [pc, #24]	; (8008a58 <rt_bus_proto_transmit+0x20>)
 8008a40:	4806      	ldr	r0, [pc, #24]	; (8008a5c <rt_bus_proto_transmit+0x24>)
 8008a42:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8008a44:	2c20      	cmp	r4, #32
 8008a46:	d001      	beq.n	8008a4c <rt_bus_proto_transmit+0x14>
 8008a48:	4299      	cmp	r1, r3
 8008a4a:	d203      	bcs.n	8008a54 <rt_bus_proto_transmit+0x1c>
	{
		count ++;
	}

	HAL_UART_Transmit_DMA(BUS_UART,txBuffer,length);
 8008a4c:	4904      	ldr	r1, [pc, #16]	; (8008a60 <rt_bus_proto_transmit+0x28>)
 8008a4e:	f001 ff53 	bl	800a8f8 <HAL_UART_Transmit_DMA>

}
 8008a52:	bd10      	pop	{r4, pc}
		count ++;
 8008a54:	3301      	adds	r3, #1
 8008a56:	e7f4      	b.n	8008a42 <rt_bus_proto_transmit+0xa>
 8008a58:	0000fde7 	.word	0x0000fde7
 8008a5c:	20001038 	.word	0x20001038
 8008a60:	20001b58 	.word	0x20001b58

08008a64 <rt_bus_proto_clear>:

extern void rt_bus_cmd_process();

void rt_bus_proto_clear()
{
 8008a64:	b510      	push	{r4, lr}
	if (rxFrameSize)
 8008a66:	4c09      	ldr	r4, [pc, #36]	; (8008a8c <rt_bus_proto_clear+0x28>)
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00a      	beq.n	8008a84 <rt_bus_proto_clear+0x20>
	{
		if (HAL_GetTick() > (lastRxTime + 10))
 8008a6e:	f000 fb09 	bl	8009084 <HAL_GetTick>
 8008a72:	4b07      	ldr	r3, [pc, #28]	; (8008a90 <rt_bus_proto_clear+0x2c>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	330a      	adds	r3, #10
 8008a78:	4298      	cmp	r0, r3
 8008a7a:	d903      	bls.n	8008a84 <rt_bus_proto_clear+0x20>
  __ASM volatile ("cpsid i" : : : "memory");
 8008a7c:	b672      	cpsid	i
		{
			__disable_irq();
			rxFrameSize = 0;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	6023      	str	r3, [r4, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008a82:	b662      	cpsie	i
		}
	}
#endif
#endif

	rt_bus_cmd_process();
 8008a84:	f7ff fede 	bl	8008844 <rt_bus_cmd_process>
}
 8008a88:	bd10      	pop	{r4, pc}
 8008a8a:	46c0      	nop			; (mov r8, r8)
 8008a8c:	20000334 	.word	0x20000334
 8008a90:	20000330 	.word	0x20000330

08008a94 <rt_bus_proto_process>:
void rt_bus_proto_process()
{

	uint16_t pSize = 0;
	uint16_t addr = 0;
	uint16_t cCRC = 0;
 8008a94:	2300      	movs	r3, #0
{
 8008a96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a98:	b085      	sub	sp, #20
	uint16_t txSize = 0;
 8008a9a:	aa02      	add	r2, sp, #8
	uint16_t cCRC = 0;
 8008a9c:	ae03      	add	r6, sp, #12
	uint16_t txSize = 0;
 8008a9e:	1d94      	adds	r4, r2, #6
	uint16_t cCRC = 0;
 8008aa0:	8033      	strh	r3, [r6, #0]
	uint16_t txSize = 0;
 8008aa2:	8023      	strh	r3, [r4, #0]
	uint32_t ret;
	if (isFrameReady)
 8008aa4:	4b3b      	ldr	r3, [pc, #236]	; (8008b94 <rt_bus_proto_process+0x100>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d100      	bne.n	8008aae <rt_bus_proto_process+0x1a>
 8008aac:	e06d      	b.n	8008b8a <rt_bus_proto_process+0xf6>
	{

		addr = ((uint16_t)rxBuffer[PRT_AD_MSB_IDX] << 8) | (rxBuffer[PRT_AD_LSB_IDX]);
 8008aae:	4d3a      	ldr	r5, [pc, #232]	; (8008b98 <rt_bus_proto_process+0x104>)

		if (addr == uBusId)
 8008ab0:	493a      	ldr	r1, [pc, #232]	; (8008b9c <rt_bus_proto_process+0x108>)
		addr = ((uint16_t)rxBuffer[PRT_AD_MSB_IDX] << 8) | (rxBuffer[PRT_AD_LSB_IDX]);
 8008ab2:	786a      	ldrb	r2, [r5, #1]
 8008ab4:	78ab      	ldrb	r3, [r5, #2]
		if (addr == uBusId)
 8008ab6:	8809      	ldrh	r1, [r1, #0]
		addr = ((uint16_t)rxBuffer[PRT_AD_MSB_IDX] << 8) | (rxBuffer[PRT_AD_LSB_IDX]);
 8008ab8:	0212      	lsls	r2, r2, #8
		if (addr == uBusId)
 8008aba:	4313      	orrs	r3, r2
 8008abc:	4299      	cmp	r1, r3
 8008abe:	d15f      	bne.n	8008b80 <rt_bus_proto_process+0xec>
		{
			if ((rxBuffer[PRT_STX_IDX] == PRT_STX) && (rxBuffer[rxFrameSize-PRT_ETX_LEFT_IDX] == PRT_ETX)) // check stx and etx on received frame
 8008ac0:	782b      	ldrb	r3, [r5, #0]
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d14b      	bne.n	8008b5e <rt_bus_proto_process+0xca>
 8008ac6:	4f36      	ldr	r7, [pc, #216]	; (8008ba0 <rt_bus_proto_process+0x10c>)
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	18ea      	adds	r2, r5, r3
 8008acc:	3a01      	subs	r2, #1
 8008ace:	7812      	ldrb	r2, [r2, #0]
 8008ad0:	2a03      	cmp	r2, #3
 8008ad2:	d144      	bne.n	8008b5e <rt_bus_proto_process+0xca>
			{
				pSize = ((uint16_t)rxBuffer[PRT_LEN_MSB_IDX] << 8) | (rxBuffer[PRT_LEN_LSB_IDX]);
 8008ad4:	78e9      	ldrb	r1, [r5, #3]
 8008ad6:	792a      	ldrb	r2, [r5, #4]
 8008ad8:	0209      	lsls	r1, r1, #8
 8008ada:	430a      	orrs	r2, r1
 8008adc:	9200      	str	r2, [sp, #0]
				if (pSize == rxFrameSize - 8)
 8008ade:	001a      	movs	r2, r3
 8008ae0:	9900      	ldr	r1, [sp, #0]
 8008ae2:	3a08      	subs	r2, #8
 8008ae4:	4291      	cmp	r1, r2
 8008ae6:	d13a      	bne.n	8008b5e <rt_bus_proto_process+0xca>
				{
					cCRC = crc16(&rxBuffer[PRT_AD_MSB_IDX], rxFrameSize-4);
 8008ae8:	1f19      	subs	r1, r3, #4
 8008aea:	b289      	uxth	r1, r1
 8008aec:	482d      	ldr	r0, [pc, #180]	; (8008ba4 <rt_bus_proto_process+0x110>)
 8008aee:	f7ff f933 	bl	8007d58 <crc16>
 8008af2:	8030      	strh	r0, [r6, #0]
					if (memcmp(&rxBuffer[rxFrameSize-3],&cCRC,2)==0)
 8008af4:	6838      	ldr	r0, [r7, #0]
 8008af6:	2202      	movs	r2, #2
 8008af8:	3803      	subs	r0, #3
 8008afa:	1940      	adds	r0, r0, r5
 8008afc:	0031      	movs	r1, r6
 8008afe:	f002 fb7d 	bl	800b1fc <memcmp>
 8008b02:	2800      	cmp	r0, #0
 8008b04:	d12b      	bne.n	8008b5e <rt_bus_proto_process+0xca>
					{
						for (int i=0;i<gCommandCount ;i++)
 8008b06:	4b28      	ldr	r3, [pc, #160]	; (8008ba8 <rt_bus_proto_process+0x114>)
						{
							if (commands[i].cmd == rxBuffer[PRT_CMD_IDX])
 8008b08:	4a28      	ldr	r2, [pc, #160]	; (8008bac <rt_bus_proto_process+0x118>)
						for (int i=0;i<gCommandCount ;i++)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	9301      	str	r3, [sp, #4]
							if (commands[i].cmd == rxBuffer[PRT_CMD_IDX])
 8008b0e:	796b      	ldrb	r3, [r5, #5]
						for (int i=0;i<gCommandCount ;i++)
 8008b10:	9901      	ldr	r1, [sp, #4]
 8008b12:	4281      	cmp	r1, r0
 8008b14:	dd23      	ble.n	8008b5e <rt_bus_proto_process+0xca>
							if (commands[i].cmd == rxBuffer[PRT_CMD_IDX])
 8008b16:	00c5      	lsls	r5, r0, #3
 8008b18:	18ad      	adds	r5, r5, r2
 8008b1a:	782e      	ldrb	r6, [r5, #0]
 8008b1c:	429e      	cmp	r6, r3
 8008b1e:	d12d      	bne.n	8008b7c <rt_bus_proto_process+0xe8>
							{
								leds_0_flash(PROTO_LED_FLASH_TIME);
 8008b20:	2019      	movs	r0, #25
 8008b22:	f7ff f9e7 	bl	8007ef4 <leds_0_flash>
								txSize = 0;
 8008b26:	2300      	movs	r3, #0
								gFrameCount++;
 8008b28:	4a21      	ldr	r2, [pc, #132]	; (8008bb0 <rt_bus_proto_process+0x11c>)
								txSize = 0;
 8008b2a:	8023      	strh	r3, [r4, #0]

								ret = commands[i].handler(&rxBuffer[PRT_DATA_S_IDX],pSize-1,&txBuffer[PRT_DATA_S_IDX+1],&txSize);
 8008b2c:	9900      	ldr	r1, [sp, #0]
								gFrameCount++;
 8008b2e:	6813      	ldr	r3, [r2, #0]
								ret = commands[i].handler(&rxBuffer[PRT_DATA_S_IDX],pSize-1,&txBuffer[PRT_DATA_S_IDX+1],&txSize);
 8008b30:	3901      	subs	r1, #1
								gFrameCount++;
 8008b32:	3301      	adds	r3, #1
 8008b34:	6013      	str	r3, [r2, #0]
								ret = commands[i].handler(&rxBuffer[PRT_DATA_S_IDX],pSize-1,&txBuffer[PRT_DATA_S_IDX+1],&txSize);
 8008b36:	b289      	uxth	r1, r1
 8008b38:	686d      	ldr	r5, [r5, #4]
 8008b3a:	0023      	movs	r3, r4
 8008b3c:	4a1d      	ldr	r2, [pc, #116]	; (8008bb4 <rt_bus_proto_process+0x120>)
 8008b3e:	481e      	ldr	r0, [pc, #120]	; (8008bb8 <rt_bus_proto_process+0x124>)
 8008b40:	47a8      	blx	r5
								if (ret == RT_PROTO_OK)
 8008b42:	2800      	cmp	r0, #0
 8008b44:	d112      	bne.n	8008b6c <rt_bus_proto_process+0xd8>
								{
									txBuffer[PRT_DATA_S_IDX] = PRT_ACK;
 8008b46:	4b1d      	ldr	r3, [pc, #116]	; (8008bbc <rt_bus_proto_process+0x128>)
 8008b48:	7198      	strb	r0, [r3, #6]
									txSize ++;
 8008b4a:	8823      	ldrh	r3, [r4, #0]
 8008b4c:	3301      	adds	r3, #1
										txSize = 2;
									}
								}
								if (ret != RT_PROTO_SkipReply)
								{
									rt_bus_proto_frame_pack(commands[i].cmd,&txSize);
 8008b4e:	0030      	movs	r0, r6
 8008b50:	0021      	movs	r1, r4
										txSize = 2;
 8008b52:	8023      	strh	r3, [r4, #0]
									rt_bus_proto_frame_pack(commands[i].cmd,&txSize);
 8008b54:	f7ff ff42 	bl	80089dc <rt_bus_proto_frame_pack>
									rt_bus_proto_transmit(txSize);
 8008b58:	8820      	ldrh	r0, [r4, #0]
 8008b5a:	f7ff ff6d 	bl	8008a38 <rt_bus_proto_transmit>
		}
		else
		{
			leds_1_on();
		}
		isFrameReady = 0;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	4a0c      	ldr	r2, [pc, #48]	; (8008b94 <rt_bus_proto_process+0x100>)
 8008b62:	6013      	str	r3, [r2, #0]
		rxFrameSize = 0;
 8008b64:	4a0e      	ldr	r2, [pc, #56]	; (8008ba0 <rt_bus_proto_process+0x10c>)
 8008b66:	6013      	str	r3, [r2, #0]
	}
	else
	{
		leds_0_on();
	}
}
 8008b68:	b005      	add	sp, #20
 8008b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
									if (ret != RT_PROTO_SkipReply)
 8008b6c:	2805      	cmp	r0, #5
 8008b6e:	d0f6      	beq.n	8008b5e <rt_bus_proto_process+0xca>
										txBuffer[PRT_DATA_S_IDX] = PRT_NCK;
 8008b70:	2201      	movs	r2, #1
 8008b72:	4b12      	ldr	r3, [pc, #72]	; (8008bbc <rt_bus_proto_process+0x128>)
 8008b74:	719a      	strb	r2, [r3, #6]
										txBuffer[PRT_DATA_S_IDX+1] = ret;
 8008b76:	71d8      	strb	r0, [r3, #7]
										txSize = 2;
 8008b78:	2302      	movs	r3, #2
 8008b7a:	e7e8      	b.n	8008b4e <rt_bus_proto_process+0xba>
						for (int i=0;i<gCommandCount ;i++)
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	e7c7      	b.n	8008b10 <rt_bus_proto_process+0x7c>
			leds_1_on();
 8008b80:	23a0      	movs	r3, #160	; 0xa0
 8008b82:	2202      	movs	r2, #2
 8008b84:	05db      	lsls	r3, r3, #23
 8008b86:	619a      	str	r2, [r3, #24]
 8008b88:	e7e9      	b.n	8008b5e <rt_bus_proto_process+0xca>
		leds_0_on();
 8008b8a:	23a0      	movs	r3, #160	; 0xa0
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	05db      	lsls	r3, r3, #23
 8008b90:	619a      	str	r2, [r3, #24]
}
 8008b92:	e7e9      	b.n	8008b68 <rt_bus_proto_process+0xd4>
 8008b94:	2000032c 	.word	0x2000032c
 8008b98:	20001678 	.word	0x20001678
 8008b9c:	20000338 	.word	0x20000338
 8008ba0:	20000334 	.word	0x20000334
 8008ba4:	20001679 	.word	0x20001679
 8008ba8:	0800fe58 	.word	0x0800fe58
 8008bac:	0800fe18 	.word	0x0800fe18
 8008bb0:	20000328 	.word	0x20000328
 8008bb4:	20001b5f 	.word	0x20001b5f
 8008bb8:	2000167e 	.word	0x2000167e
 8008bbc:	20001b58 	.word	0x20001b58

08008bc0 <HAL_SYSTICK_Callback>:


extern void Board_SystickCallBack(void);

void HAL_SYSTICK_Callback(void)
{
 8008bc0:	b510      	push	{r4, lr}
	leds_counters();
 8008bc2:	f7ff f9b5 	bl	8007f30 <leds_counters>
	Board_SystickCallBack();
 8008bc6:	f7ff fbd1 	bl	800836c <Board_SystickCallBack>
}
 8008bca:	bd10      	pop	{r4, pc}

08008bcc <rt_bus_proto_idle_dt>:

void rt_bus_proto_idle_dt(void)
{
 8008bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint16_t prevDMACnt=BUS_RX_BUFFER_SIZE;
	uint16_t currentDMACnt = BUS_UART->hdmarx->Instance->CNDTR;
 8008bce:	4d30      	ldr	r5, [pc, #192]	; (8008c90 <rt_bus_proto_idle_dt+0xc4>)
 8008bd0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	685c      	ldr	r4, [r3, #4]
	uint16_t size=0;
	uint16_t start = 0;

	lastRxTime = HAL_GetTick();
 8008bd6:	f000 fa55 	bl	8009084 <HAL_GetTick>
 8008bda:	4b2e      	ldr	r3, [pc, #184]	; (8008c94 <rt_bus_proto_idle_dt+0xc8>)
 8008bdc:	6018      	str	r0, [r3, #0]

	if (BUS_UART->hdmarx->State == HAL_DMA_STATE_BUSY)
 8008bde:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008be0:	3306      	adds	r3, #6
 8008be2:	7fdb      	ldrb	r3, [r3, #31]
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d127      	bne.n	8008c38 <rt_bus_proto_idle_dt+0x6c>
	{
		if (prevDMACnt > currentDMACnt) // we haven't looped back yet
 8008be8:	4d2b      	ldr	r5, [pc, #172]	; (8008c98 <rt_bus_proto_idle_dt+0xcc>)
	uint16_t currentDMACnt = BUS_UART->hdmarx->Instance->CNDTR;
 8008bea:	b2a4      	uxth	r4, r4
		if (prevDMACnt > currentDMACnt) // we haven't looped back yet
 8008bec:	882b      	ldrh	r3, [r5, #0]
 8008bee:	42a3      	cmp	r3, r4
 8008bf0:	d923      	bls.n	8008c3a <rt_bus_proto_idle_dt+0x6e>
		{
			size = prevDMACnt - currentDMACnt;

			if (size > BUS_RX_BUFFER_SIZE)
 8008bf2:	219c      	movs	r1, #156	; 0x9c
			size = prevDMACnt - currentDMACnt;
 8008bf4:	1b1a      	subs	r2, r3, r4
 8008bf6:	b292      	uxth	r2, r2
			if (size > BUS_RX_BUFFER_SIZE)
 8008bf8:	00c9      	lsls	r1, r1, #3
 8008bfa:	428a      	cmp	r2, r1
 8008bfc:	d81c      	bhi.n	8008c38 <rt_bus_proto_idle_dt+0x6c>
				return;

			start = (BUS_RX_BUFFER_SIZE - prevDMACnt);

			if (rxFrameSize + size < BUS_RX_BUFFER_SIZE)
 8008bfe:	4f27      	ldr	r7, [pc, #156]	; (8008c9c <rt_bus_proto_idle_dt+0xd0>)
 8008c00:	4927      	ldr	r1, [pc, #156]	; (8008ca0 <rt_bus_proto_idle_dt+0xd4>)
 8008c02:	6838      	ldr	r0, [r7, #0]
 8008c04:	1816      	adds	r6, r2, r0
 8008c06:	428e      	cmp	r6, r1
 8008c08:	d813      	bhi.n	8008c32 <rt_bus_proto_idle_dt+0x66>
			{
				memcpy(&rxBuffer[rxFrameSize],&rxDMABuffer[start],size);
 8008c0a:	4926      	ldr	r1, [pc, #152]	; (8008ca4 <rt_bus_proto_idle_dt+0xd8>)
 8008c0c:	1840      	adds	r0, r0, r1
			start = (BUS_RX_BUFFER_SIZE - prevDMACnt);
 8008c0e:	219c      	movs	r1, #156	; 0x9c
 8008c10:	00c9      	lsls	r1, r1, #3
 8008c12:	1ac9      	subs	r1, r1, r3
				memcpy(&rxBuffer[rxFrameSize],&rxDMABuffer[start],size);
 8008c14:	4b24      	ldr	r3, [pc, #144]	; (8008ca8 <rt_bus_proto_idle_dt+0xdc>)
 8008c16:	b289      	uxth	r1, r1
 8008c18:	18c9      	adds	r1, r1, r3
 8008c1a:	f002 fafe 	bl	800b21a <memcpy>
				rxFrameSize += size;

				if (rxBuffer[rxFrameSize-1] == 0x03)
 8008c1e:	4b21      	ldr	r3, [pc, #132]	; (8008ca4 <rt_bus_proto_idle_dt+0xd8>)
				rxFrameSize += size;
 8008c20:	603e      	str	r6, [r7, #0]
				if (rxBuffer[rxFrameSize-1] == 0x03)
 8008c22:	199e      	adds	r6, r3, r6
 8008c24:	3e01      	subs	r6, #1
 8008c26:	7833      	ldrb	r3, [r6, #0]
			if (rxFrameSize + size < BUS_RX_BUFFER_SIZE)
			{
				memcpy(&rxBuffer[rxFrameSize],&rxDMABuffer[start],size);
				rxFrameSize += size;

				if (rxBuffer[rxFrameSize-1] == 0x03)
 8008c28:	2b03      	cmp	r3, #3
 8008c2a:	d102      	bne.n	8008c32 <rt_bus_proto_idle_dt+0x66>
					isFrameReady = 0x01;
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	4b1f      	ldr	r3, [pc, #124]	; (8008cac <rt_bus_proto_idle_dt+0xe0>)
 8008c30:	601a      	str	r2, [r3, #0]
			}
			prevDMACnt = currentDMACnt;
 8008c32:	802c      	strh	r4, [r5, #0]
		else
		{
			return;
		}
#ifndef RT_BOOTLOADER
		rt_bus_proto_process();
 8008c34:	f7ff ff2e 	bl	8008a94 <rt_bus_proto_process>
#endif
	}

}
 8008c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		else if (prevDMACnt < currentDMACnt)
 8008c3a:	42a3      	cmp	r3, r4
 8008c3c:	d2fc      	bcs.n	8008c38 <rt_bus_proto_idle_dt+0x6c>
			if (size > BUS_RX_BUFFER_SIZE)
 8008c3e:	219c      	movs	r1, #156	; 0x9c
 8008c40:	00c9      	lsls	r1, r1, #3
 8008c42:	428b      	cmp	r3, r1
 8008c44:	d8f8      	bhi.n	8008c38 <rt_bus_proto_idle_dt+0x6c>
			if (rxFrameSize + size < BUS_RX_BUFFER_SIZE)
 8008c46:	4e15      	ldr	r6, [pc, #84]	; (8008c9c <rt_bus_proto_idle_dt+0xd0>)
 8008c48:	4a15      	ldr	r2, [pc, #84]	; (8008ca0 <rt_bus_proto_idle_dt+0xd4>)
 8008c4a:	6830      	ldr	r0, [r6, #0]
 8008c4c:	181f      	adds	r7, r3, r0
 8008c4e:	4297      	cmp	r7, r2
 8008c50:	d809      	bhi.n	8008c66 <rt_bus_proto_idle_dt+0x9a>
				memcpy(&rxBuffer[rxFrameSize],&rxDMABuffer[start],size);
 8008c52:	4a14      	ldr	r2, [pc, #80]	; (8008ca4 <rt_bus_proto_idle_dt+0xd8>)
			start = (BUS_RX_BUFFER_SIZE - prevDMACnt);
 8008c54:	1ac9      	subs	r1, r1, r3
				memcpy(&rxBuffer[rxFrameSize],&rxDMABuffer[start],size);
 8008c56:	1880      	adds	r0, r0, r2
 8008c58:	4a13      	ldr	r2, [pc, #76]	; (8008ca8 <rt_bus_proto_idle_dt+0xdc>)
 8008c5a:	b289      	uxth	r1, r1
 8008c5c:	1889      	adds	r1, r1, r2
 8008c5e:	001a      	movs	r2, r3
 8008c60:	f002 fadb 	bl	800b21a <memcpy>
				rxFrameSize +=size;
 8008c64:	6037      	str	r7, [r6, #0]
			size = BUS_RX_BUFFER_SIZE - currentDMACnt;
 8008c66:	229c      	movs	r2, #156	; 0x9c
 8008c68:	00d2      	lsls	r2, r2, #3
 8008c6a:	1b12      	subs	r2, r2, r4
			if (rxFrameSize + size < BUS_RX_BUFFER_SIZE)
 8008c6c:	6830      	ldr	r0, [r6, #0]
 8008c6e:	b292      	uxth	r2, r2
 8008c70:	4b0b      	ldr	r3, [pc, #44]	; (8008ca0 <rt_bus_proto_idle_dt+0xd4>)
 8008c72:	1817      	adds	r7, r2, r0
 8008c74:	429f      	cmp	r7, r3
 8008c76:	d8dc      	bhi.n	8008c32 <rt_bus_proto_idle_dt+0x66>
				memcpy(&rxBuffer[rxFrameSize],&rxDMABuffer[start],size);
 8008c78:	4b0a      	ldr	r3, [pc, #40]	; (8008ca4 <rt_bus_proto_idle_dt+0xd8>)
 8008c7a:	490b      	ldr	r1, [pc, #44]	; (8008ca8 <rt_bus_proto_idle_dt+0xdc>)
 8008c7c:	18c0      	adds	r0, r0, r3
 8008c7e:	f002 facc 	bl	800b21a <memcpy>
				if (rxBuffer[rxFrameSize-1] == 0x03)
 8008c82:	4b08      	ldr	r3, [pc, #32]	; (8008ca4 <rt_bus_proto_idle_dt+0xd8>)
				rxFrameSize += size;
 8008c84:	6037      	str	r7, [r6, #0]
				if (rxBuffer[rxFrameSize-1] == 0x03)
 8008c86:	19df      	adds	r7, r3, r7
 8008c88:	3f01      	subs	r7, #1
 8008c8a:	783b      	ldrb	r3, [r7, #0]
 8008c8c:	e7cc      	b.n	8008c28 <rt_bus_proto_idle_dt+0x5c>
 8008c8e:	46c0      	nop			; (mov r8, r8)
 8008c90:	20001038 	.word	0x20001038
 8008c94:	20000330 	.word	0x20000330
 8008c98:	20000116 	.word	0x20000116
 8008c9c:	20000334 	.word	0x20000334
 8008ca0:	000004df 	.word	0x000004df
 8008ca4:	20001678 	.word	0x20001678
 8008ca8:	20001198 	.word	0x20001198
 8008cac:	2000032c 	.word	0x2000032c

08008cb0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	4b05      	ldr	r3, [pc, #20]	; (8008cc8 <HAL_MspInit+0x18>)
 8008cb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008cb6:	430a      	orrs	r2, r1
 8008cb8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8008cba:	2280      	movs	r2, #128	; 0x80
 8008cbc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008cbe:	0552      	lsls	r2, r2, #21
 8008cc0:	430a      	orrs	r2, r1
 8008cc2:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008cc4:	4770      	bx	lr
 8008cc6:	46c0      	nop			; (mov r8, r8)
 8008cc8:	40021000 	.word	0x40021000

08008ccc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008ccc:	b510      	push	{r4, lr}
 8008cce:	0004      	movs	r4, r0
 8008cd0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cd2:	2214      	movs	r2, #20
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	a801      	add	r0, sp, #4
 8008cd8:	f002 faa8 	bl	800b22c <memset>
  if(hspi->Instance==SPI1)
 8008cdc:	4b0f      	ldr	r3, [pc, #60]	; (8008d1c <HAL_SPI_MspInit+0x50>)
 8008cde:	6822      	ldr	r2, [r4, #0]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d118      	bne.n	8008d16 <HAL_SPI_MspInit+0x4a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008ce4:	2280      	movs	r2, #128	; 0x80
 8008ce6:	4b0e      	ldr	r3, [pc, #56]	; (8008d20 <HAL_SPI_MspInit+0x54>)
 8008ce8:	0152      	lsls	r2, r2, #5
 8008cea:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cec:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008cee:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cf0:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008cf2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cf6:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cf8:	430a      	orrs	r2, r1
 8008cfa:	62da      	str	r2, [r3, #44]	; 0x2c
 8008cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfe:	400b      	ands	r3, r1
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008d04:	23e0      	movs	r3, #224	; 0xe0
 8008d06:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d08:	3bde      	subs	r3, #222	; 0xde
 8008d0a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d0c:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d0e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d10:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d12:	f000 fcbf 	bl	8009694 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008d16:	b006      	add	sp, #24
 8008d18:	bd10      	pop	{r4, pc}
 8008d1a:	46c0      	nop			; (mov r8, r8)
 8008d1c:	40013000 	.word	0x40013000
 8008d20:	40021000 	.word	0x40021000

08008d24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008d24:	b570      	push	{r4, r5, r6, lr}
 8008d26:	0005      	movs	r5, r0
 8008d28:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d2a:	2214      	movs	r2, #20
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	a803      	add	r0, sp, #12
 8008d30:	f002 fa7c 	bl	800b22c <memset>
  if(huart->Instance==USART1)
 8008d34:	682b      	ldr	r3, [r5, #0]
 8008d36:	4a4c      	ldr	r2, [pc, #304]	; (8008e68 <HAL_UART_MspInit+0x144>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d158      	bne.n	8008dee <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008d3c:	2280      	movs	r2, #128	; 0x80
 8008d3e:	4b4b      	ldr	r3, [pc, #300]	; (8008e6c <HAL_UART_MspInit+0x148>)
 8008d40:	01d2      	lsls	r2, r2, #7
 8008d42:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d44:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 8008d46:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d48:	2101      	movs	r1, #1
    __HAL_RCC_USART1_CLK_ENABLE();
 8008d4a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d4e:	2603      	movs	r6, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d50:	430a      	orrs	r2, r1
 8008d52:	62da      	str	r2, [r3, #44]	; 0x2c
 8008d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d56:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d58:	400b      	ands	r3, r1
 8008d5a:	9301      	str	r3, [sp, #4]
 8008d5c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008d5e:	23c0      	movs	r3, #192	; 0xc0
 8008d60:	00db      	lsls	r3, r3, #3
 8008d62:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d64:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d66:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d68:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8008d6a:	18db      	adds	r3, r3, r3
 8008d6c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d6e:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d70:	f000 fc90 	bl	8009694 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8008d74:	4c3e      	ldr	r4, [pc, #248]	; (8008e70 <HAL_UART_MspInit+0x14c>)
 8008d76:	4b3f      	ldr	r3, [pc, #252]	; (8008e74 <HAL_UART_MspInit+0x150>)
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008d78:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8008d7a:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	60a3      	str	r3, [r4, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008d80:	60e3      	str	r3, [r4, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008d82:	6163      	str	r3, [r4, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008d84:	61a3      	str	r3, [r4, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8008d86:	3320      	adds	r3, #32
 8008d88:	61e3      	str	r3, [r4, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008d8a:	23c0      	movs	r3, #192	; 0xc0
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008d8c:	0020      	movs	r0, r4
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008d8e:	019b      	lsls	r3, r3, #6
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 8008d90:	6066      	str	r6, [r4, #4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008d92:	6122      	str	r2, [r4, #16]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008d94:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008d96:	f000 f9ff 	bl	8009198 <HAL_DMA_Init>
 8008d9a:	2800      	cmp	r0, #0
 8008d9c:	d001      	beq.n	8008da2 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8008d9e:	f7ff fc1f 	bl	80085e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8008da2:	4b35      	ldr	r3, [pc, #212]	; (8008e78 <HAL_UART_MspInit+0x154>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8008da4:	672c      	str	r4, [r5, #112]	; 0x70
 8008da6:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8008da8:	4c34      	ldr	r4, [pc, #208]	; (8008e7c <HAL_UART_MspInit+0x158>)
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008daa:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8008dac:	6023      	str	r3, [r4, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 8008dae:	2303      	movs	r3, #3
 8008db0:	6063      	str	r3, [r4, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008db2:	330d      	adds	r3, #13
 8008db4:	60a3      	str	r3, [r4, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008db6:	2300      	movs	r3, #0
 8008db8:	60e3      	str	r3, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008dba:	6163      	str	r3, [r4, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008dbc:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8008dbe:	61e3      	str	r3, [r4, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8008dc0:	2380      	movs	r3, #128	; 0x80
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8008dc2:	0020      	movs	r0, r4
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8008dc4:	019b      	lsls	r3, r3, #6
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008dc6:	6122      	str	r2, [r4, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8008dc8:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8008dca:	f000 f9e5 	bl	8009198 <HAL_DMA_Init>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d001      	beq.n	8008dd6 <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 8008dd2:	f7ff fc05 	bl	80085e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	201b      	movs	r0, #27
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8008dda:	66ec      	str	r4, [r5, #108]	; 0x6c
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008ddc:	0011      	movs	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8008dde:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008de0:	f000 f968 	bl	80090b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008de4:	201b      	movs	r0, #27

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 2);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008de6:	f000 f98f 	bl	8009108 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008dea:	b008      	add	sp, #32
 8008dec:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART2)
 8008dee:	4a24      	ldr	r2, [pc, #144]	; (8008e80 <HAL_UART_MspInit+0x15c>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d1fa      	bne.n	8008dea <HAL_UART_MspInit+0xc6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008df4:	2280      	movs	r2, #128	; 0x80
 8008df6:	4b1d      	ldr	r3, [pc, #116]	; (8008e6c <HAL_UART_MspInit+0x148>)
 8008df8:	0292      	lsls	r2, r2, #10
 8008dfa:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008dfc:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8008dfe:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e00:	2101      	movs	r1, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 8008e02:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8008e06:	2604      	movs	r6, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e08:	430a      	orrs	r2, r1
 8008e0a:	62da      	str	r2, [r3, #44]	; 0x2c
 8008e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e0e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e10:	400b      	ands	r3, r1
 8008e12:	9302      	str	r3, [sp, #8]
 8008e14:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008e16:	230c      	movs	r3, #12
 8008e18:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e1a:	3b0a      	subs	r3, #10
 8008e1c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e1e:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e20:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e22:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8008e24:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e26:	f000 fc35 	bl	8009694 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8008e2a:	4c16      	ldr	r4, [pc, #88]	; (8008e84 <HAL_UART_MspInit+0x160>)
 8008e2c:	4b16      	ldr	r3, [pc, #88]	; (8008e88 <HAL_UART_MspInit+0x164>)
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008e2e:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8008e30:	6023      	str	r3, [r4, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008e32:	2310      	movs	r3, #16
 8008e34:	60a3      	str	r3, [r4, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008e36:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8008e38:	0020      	movs	r0, r4
    hdma_usart2_tx.Init.Request = DMA_REQUEST_4;
 8008e3a:	6066      	str	r6, [r4, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008e3c:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008e3e:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008e40:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008e42:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8008e44:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008e46:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8008e48:	f000 f9a6 	bl	8009198 <HAL_DMA_Init>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d001      	beq.n	8008e54 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8008e50:	f7ff fbc6 	bl	80085e0 <Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 2);
 8008e54:	2202      	movs	r2, #2
 8008e56:	201c      	movs	r0, #28
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8008e58:	66ec      	str	r4, [r5, #108]	; 0x6c
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 2);
 8008e5a:	0011      	movs	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8008e5c:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 2);
 8008e5e:	f000 f929 	bl	80090b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008e62:	201c      	movs	r0, #28
 8008e64:	e7bf      	b.n	8008de6 <HAL_UART_MspInit+0xc2>
 8008e66:	46c0      	nop			; (mov r8, r8)
 8008e68:	40013800 	.word	0x40013800
 8008e6c:	40021000 	.word	0x40021000
 8008e70:	20000fa8 	.word	0x20000fa8
 8008e74:	40020030 	.word	0x40020030
 8008e78:	4002001c 	.word	0x4002001c
 8008e7c:	20000f60 	.word	0x20000f60
 8008e80:	40004400 	.word	0x40004400
 8008e84:	20000ff0 	.word	0x20000ff0
 8008e88:	40020044 	.word	0x40020044

08008e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8008e8c:	e7fe      	b.n	8008e8c <NMI_Handler>

08008e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008e8e:	e7fe      	b.n	8008e8e <HardFault_Handler>

08008e90 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8008e90:	4770      	bx	lr

08008e92 <PendSV_Handler>:
 8008e92:	4770      	bx	lr

08008e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008e94:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008e96:	f000 f8e9 	bl	800906c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8008e9a:	f000 f979 	bl	8009190 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8008e9e:	bd10      	pop	{r4, pc}

08008ea0 <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8008ea0:	2080      	movs	r0, #128	; 0x80
{
 8008ea2:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8008ea4:	0100      	lsls	r0, r0, #4
 8008ea6:	f000 fcc7 	bl	8009838 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8008eaa:	bd10      	pop	{r4, pc}

08008eac <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8008eac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8008eae:	4803      	ldr	r0, [pc, #12]	; (8008ebc <DMA1_Channel2_3_IRQHandler+0x10>)
 8008eb0:	f000 fa6c 	bl	800938c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8008eb4:	4802      	ldr	r0, [pc, #8]	; (8008ec0 <DMA1_Channel2_3_IRQHandler+0x14>)
 8008eb6:	f000 fa69 	bl	800938c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8008eba:	bd10      	pop	{r4, pc}
 8008ebc:	20000f60 	.word	0x20000f60
 8008ec0:	20000fa8 	.word	0x20000fa8

08008ec4 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8008ec4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8008ec6:	4802      	ldr	r0, [pc, #8]	; (8008ed0 <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 8008ec8:	f000 fa60 	bl	800938c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8008ecc:	bd10      	pop	{r4, pc}
 8008ece:	46c0      	nop			; (mov r8, r8)
 8008ed0:	20000ff0 	.word	0x20000ff0

08008ed4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8008ed4:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
	int32_t isrflags   = READ_REG(huart1.Instance->ISR);
	if (isrflags & USART_ISR_IDLE)
 8008ed6:	2510      	movs	r5, #16
	int32_t isrflags   = READ_REG(huart1.Instance->ISR);
 8008ed8:	4c06      	ldr	r4, [pc, #24]	; (8008ef4 <USART1_IRQHandler+0x20>)
 8008eda:	6823      	ldr	r3, [r4, #0]
 8008edc:	69db      	ldr	r3, [r3, #28]
	if (isrflags & USART_ISR_IDLE)
 8008ede:	422b      	tst	r3, r5
 8008ee0:	d003      	beq.n	8008eea <USART1_IRQHandler+0x16>
	{
		rt_bus_proto_idle_dt();
 8008ee2:	f7ff fe73 	bl	8008bcc <rt_bus_proto_idle_dt>
		__HAL_UART_CLEAR_IT(&huart1,USART_ISR_IDLE);
 8008ee6:	6823      	ldr	r3, [r4, #0]
 8008ee8:	621d      	str	r5, [r3, #32]
	}
	HAL_UART_IRQHandler(&huart1);
 8008eea:	0020      	movs	r0, r4
 8008eec:	f001 fdca 	bl	800aa84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008ef0:	bd70      	pop	{r4, r5, r6, pc}
 8008ef2:	46c0      	nop			; (mov r8, r8)
 8008ef4:	20001038 	.word	0x20001038

08008ef8 <USART2_IRQHandler>:
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
	int32_t isrflags   = READ_REG(huart2.Instance->ISR);
	if (isrflags & USART_ISR_IDLE)
 8008ef8:	2210      	movs	r2, #16
	int32_t isrflags   = READ_REG(huart2.Instance->ISR);
 8008efa:	4805      	ldr	r0, [pc, #20]	; (8008f10 <USART2_IRQHandler+0x18>)
{
 8008efc:	b510      	push	{r4, lr}
	int32_t isrflags   = READ_REG(huart2.Instance->ISR);
 8008efe:	6803      	ldr	r3, [r0, #0]
 8008f00:	69d9      	ldr	r1, [r3, #28]
	if (isrflags & USART_ISR_IDLE)
 8008f02:	4211      	tst	r1, r2
 8008f04:	d000      	beq.n	8008f08 <USART2_IRQHandler+0x10>
	{
		__HAL_UART_CLEAR_IT(&huart2,USART_ISR_IDLE);
 8008f06:	621a      	str	r2, [r3, #32]
	}
	HAL_UART_IRQHandler(&huart2);
 8008f08:	f001 fdbc 	bl	800aa84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008f0c:	bd10      	pop	{r4, pc}
 8008f0e:	46c0      	nop			; (mov r8, r8)
 8008f10:	20001114 	.word	0x20001114

08008f14 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008f14:	b570      	push	{r4, r5, r6, lr}
 8008f16:	000e      	movs	r6, r1
 8008f18:	0015      	movs	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008f1a:	000c      	movs	r4, r1
 8008f1c:	1ba3      	subs	r3, r4, r6
 8008f1e:	429d      	cmp	r5, r3
 8008f20:	dc01      	bgt.n	8008f26 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8008f22:	0028      	movs	r0, r5
 8008f24:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8008f26:	e000      	b.n	8008f2a <_read+0x16>
 8008f28:	bf00      	nop
 8008f2a:	7020      	strb	r0, [r4, #0]
 8008f2c:	3401      	adds	r4, #1
 8008f2e:	e7f5      	b.n	8008f1c <_read+0x8>

08008f30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008f30:	b570      	push	{r4, r5, r6, lr}
 8008f32:	000e      	movs	r6, r1
 8008f34:	0015      	movs	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008f36:	000c      	movs	r4, r1
 8008f38:	1ba3      	subs	r3, r4, r6
 8008f3a:	429d      	cmp	r5, r3
 8008f3c:	dc01      	bgt.n	8008f42 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8008f3e:	0028      	movs	r0, r5
 8008f40:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8008f42:	7820      	ldrb	r0, [r4, #0]
 8008f44:	f7fe ff50 	bl	8007de8 <__io_putchar>
 8008f48:	3401      	adds	r4, #1
 8008f4a:	e7f5      	b.n	8008f38 <_write+0x8>

08008f4c <_close>:

int _close(int file)
{
	return -1;
 8008f4c:	2001      	movs	r0, #1
}
 8008f4e:	4240      	negs	r0, r0
 8008f50:	4770      	bx	lr

08008f52 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8008f52:	2380      	movs	r3, #128	; 0x80
 8008f54:	019b      	lsls	r3, r3, #6
	return 0;
}
 8008f56:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8008f58:	604b      	str	r3, [r1, #4]
}
 8008f5a:	4770      	bx	lr

08008f5c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8008f5c:	2001      	movs	r0, #1
 8008f5e:	4770      	bx	lr

08008f60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8008f60:	2000      	movs	r0, #0
 8008f62:	4770      	bx	lr

08008f64 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008f64:	4b0b      	ldr	r3, [pc, #44]	; (8008f94 <_sbrk+0x30>)
 8008f66:	490c      	ldr	r1, [pc, #48]	; (8008f98 <_sbrk+0x34>)
{
 8008f68:	0002      	movs	r2, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008f6a:	1ac9      	subs	r1, r1, r3
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008f6c:	4b0b      	ldr	r3, [pc, #44]	; (8008f9c <_sbrk+0x38>)
{
 8008f6e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8008f70:	6818      	ldr	r0, [r3, #0]
 8008f72:	2800      	cmp	r0, #0
 8008f74:	d101      	bne.n	8008f7a <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8008f76:	480a      	ldr	r0, [pc, #40]	; (8008fa0 <_sbrk+0x3c>)
 8008f78:	6018      	str	r0, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008f7a:	6818      	ldr	r0, [r3, #0]
 8008f7c:	1882      	adds	r2, r0, r2
 8008f7e:	428a      	cmp	r2, r1
 8008f80:	d906      	bls.n	8008f90 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8008f82:	f002 f911 	bl	800b1a8 <__errno>
 8008f86:	230c      	movs	r3, #12
 8008f88:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8008f8a:	2001      	movs	r0, #1
 8008f8c:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8008f8e:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8008f90:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8008f92:	e7fc      	b.n	8008f8e <_sbrk+0x2a>
 8008f94:	00000400 	.word	0x00000400
 8008f98:	20005000 	.word	0x20005000
 8008f9c:	2000033c 	.word	0x2000033c
 8008fa0:	20002058 	.word	0x20002058

08008fa4 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008fa4:	4770      	bx	lr
	...

08008fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8008fa8:	480d      	ldr	r0, [pc, #52]	; (8008fe0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8008faa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008fac:	480d      	ldr	r0, [pc, #52]	; (8008fe4 <LoopForever+0x6>)
  ldr r1, =_edata
 8008fae:	490e      	ldr	r1, [pc, #56]	; (8008fe8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008fb0:	4a0e      	ldr	r2, [pc, #56]	; (8008fec <LoopForever+0xe>)
  movs r3, #0
 8008fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008fb4:	e002      	b.n	8008fbc <LoopCopyDataInit>

08008fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008fba:	3304      	adds	r3, #4

08008fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008fc0:	d3f9      	bcc.n	8008fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008fc2:	4a0b      	ldr	r2, [pc, #44]	; (8008ff0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008fc4:	4c0b      	ldr	r4, [pc, #44]	; (8008ff4 <LoopForever+0x16>)
  movs r3, #0
 8008fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008fc8:	e001      	b.n	8008fce <LoopFillZerobss>

08008fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008fcc:	3204      	adds	r2, #4

08008fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008fd0:	d3fb      	bcc.n	8008fca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8008fd2:	f7ff ffe7 	bl	8008fa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008fd6:	f002 f8ed 	bl	800b1b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008fda:	f7ff fa27 	bl	800842c <main>

08008fde <LoopForever>:

LoopForever:
    b LoopForever
 8008fde:	e7fe      	b.n	8008fde <LoopForever>
   ldr   r0, =_estack
 8008fe0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8008fe4:	20000108 	.word	0x20000108
  ldr r1, =_edata
 8008fe8:	200002f4 	.word	0x200002f4
  ldr r2, =_sidata
 8008fec:	080101f8 	.word	0x080101f8
  ldr r2, =_sbss
 8008ff0:	200002f4 	.word	0x200002f4
  ldr r4, =_ebss
 8008ff4:	20002058 	.word	0x20002058

08008ff8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008ff8:	e7fe      	b.n	8008ff8 <ADC1_COMP_IRQHandler>
	...

08008ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008ffc:	b570      	push	{r4, r5, r6, lr}
 8008ffe:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009000:	20fa      	movs	r0, #250	; 0xfa
 8009002:	4b0d      	ldr	r3, [pc, #52]	; (8009038 <HAL_InitTick+0x3c>)
 8009004:	0080      	lsls	r0, r0, #2
 8009006:	7819      	ldrb	r1, [r3, #0]
 8009008:	f7fc f89e 	bl	8005148 <__udivsi3>
 800900c:	4b0b      	ldr	r3, [pc, #44]	; (800903c <HAL_InitTick+0x40>)
 800900e:	0001      	movs	r1, r0
 8009010:	6818      	ldr	r0, [r3, #0]
 8009012:	f7fc f899 	bl	8005148 <__udivsi3>
 8009016:	f000 f893 	bl	8009140 <HAL_SYSTICK_Config>
 800901a:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 800901c:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800901e:	2c00      	cmp	r4, #0
 8009020:	d109      	bne.n	8009036 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009022:	2d03      	cmp	r5, #3
 8009024:	d807      	bhi.n	8009036 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009026:	3802      	subs	r0, #2
 8009028:	0022      	movs	r2, r4
 800902a:	0029      	movs	r1, r5
 800902c:	f000 f842 	bl	80090b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009030:	0020      	movs	r0, r4
 8009032:	4b03      	ldr	r3, [pc, #12]	; (8009040 <HAL_InitTick+0x44>)
 8009034:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8009036:	bd70      	pop	{r4, r5, r6, pc}
 8009038:	2000011c 	.word	0x2000011c
 800903c:	20000118 	.word	0x20000118
 8009040:	20000120 	.word	0x20000120

08009044 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8009044:	2340      	movs	r3, #64	; 0x40
 8009046:	4a08      	ldr	r2, [pc, #32]	; (8009068 <HAL_Init+0x24>)
{
 8009048:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800904a:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800904c:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800904e:	430b      	orrs	r3, r1
 8009050:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009052:	f7ff ffd3 	bl	8008ffc <HAL_InitTick>
 8009056:	1e04      	subs	r4, r0, #0
 8009058:	d103      	bne.n	8009062 <HAL_Init+0x1e>
    HAL_MspInit();
 800905a:	f7ff fe29 	bl	8008cb0 <HAL_MspInit>
}
 800905e:	0020      	movs	r0, r4
 8009060:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8009062:	2401      	movs	r4, #1
 8009064:	e7fb      	b.n	800905e <HAL_Init+0x1a>
 8009066:	46c0      	nop			; (mov r8, r8)
 8009068:	40022000 	.word	0x40022000

0800906c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800906c:	4a03      	ldr	r2, [pc, #12]	; (800907c <HAL_IncTick+0x10>)
 800906e:	4b04      	ldr	r3, [pc, #16]	; (8009080 <HAL_IncTick+0x14>)
 8009070:	6811      	ldr	r1, [r2, #0]
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	185b      	adds	r3, r3, r1
 8009076:	6013      	str	r3, [r2, #0]
}
 8009078:	4770      	bx	lr
 800907a:	46c0      	nop			; (mov r8, r8)
 800907c:	20002038 	.word	0x20002038
 8009080:	2000011c 	.word	0x2000011c

08009084 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8009084:	4b01      	ldr	r3, [pc, #4]	; (800908c <HAL_GetTick+0x8>)
 8009086:	6818      	ldr	r0, [r3, #0]
}
 8009088:	4770      	bx	lr
 800908a:	46c0      	nop			; (mov r8, r8)
 800908c:	20002038 	.word	0x20002038

08009090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009090:	b570      	push	{r4, r5, r6, lr}
 8009092:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009094:	f7ff fff6 	bl	8009084 <HAL_GetTick>
 8009098:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800909a:	1c63      	adds	r3, r4, #1
 800909c:	d002      	beq.n	80090a4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800909e:	4b04      	ldr	r3, [pc, #16]	; (80090b0 <HAL_Delay+0x20>)
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80090a4:	f7ff ffee 	bl	8009084 <HAL_GetTick>
 80090a8:	1b40      	subs	r0, r0, r5
 80090aa:	42a0      	cmp	r0, r4
 80090ac:	d3fa      	bcc.n	80090a4 <HAL_Delay+0x14>
  {
  }
}
 80090ae:	bd70      	pop	{r4, r5, r6, pc}
 80090b0:	2000011c 	.word	0x2000011c

080090b4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80090b4:	b530      	push	{r4, r5, lr}
 80090b6:	25ff      	movs	r5, #255	; 0xff
 80090b8:	2403      	movs	r4, #3
 80090ba:	002a      	movs	r2, r5
 80090bc:	b2c3      	uxtb	r3, r0
 80090be:	401c      	ands	r4, r3
 80090c0:	00e4      	lsls	r4, r4, #3
 80090c2:	40a2      	lsls	r2, r4
 80090c4:	0189      	lsls	r1, r1, #6
 80090c6:	4029      	ands	r1, r5
 80090c8:	43d2      	mvns	r2, r2
 80090ca:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80090cc:	2800      	cmp	r0, #0
 80090ce:	db0a      	blt.n	80090e6 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80090d0:	24c0      	movs	r4, #192	; 0xc0
 80090d2:	4b0b      	ldr	r3, [pc, #44]	; (8009100 <HAL_NVIC_SetPriority+0x4c>)
 80090d4:	0880      	lsrs	r0, r0, #2
 80090d6:	0080      	lsls	r0, r0, #2
 80090d8:	18c0      	adds	r0, r0, r3
 80090da:	00a4      	lsls	r4, r4, #2
 80090dc:	5903      	ldr	r3, [r0, r4]
 80090de:	401a      	ands	r2, r3
 80090e0:	4311      	orrs	r1, r2
 80090e2:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80090e4:	bd30      	pop	{r4, r5, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80090e6:	200f      	movs	r0, #15
 80090e8:	4003      	ands	r3, r0
 80090ea:	3b08      	subs	r3, #8
 80090ec:	4805      	ldr	r0, [pc, #20]	; (8009104 <HAL_NVIC_SetPriority+0x50>)
 80090ee:	089b      	lsrs	r3, r3, #2
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	181b      	adds	r3, r3, r0
 80090f4:	69d8      	ldr	r0, [r3, #28]
 80090f6:	4002      	ands	r2, r0
 80090f8:	4311      	orrs	r1, r2
 80090fa:	61d9      	str	r1, [r3, #28]
 80090fc:	e7f2      	b.n	80090e4 <HAL_NVIC_SetPriority+0x30>
 80090fe:	46c0      	nop			; (mov r8, r8)
 8009100:	e000e100 	.word	0xe000e100
 8009104:	e000ed00 	.word	0xe000ed00

08009108 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8009108:	2800      	cmp	r0, #0
 800910a:	db05      	blt.n	8009118 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800910c:	231f      	movs	r3, #31
 800910e:	4018      	ands	r0, r3
 8009110:	3b1e      	subs	r3, #30
 8009112:	4083      	lsls	r3, r0
 8009114:	4a01      	ldr	r2, [pc, #4]	; (800911c <HAL_NVIC_EnableIRQ+0x14>)
 8009116:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8009118:	4770      	bx	lr
 800911a:	46c0      	nop			; (mov r8, r8)
 800911c:	e000e100 	.word	0xe000e100

08009120 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8009120:	2800      	cmp	r0, #0
 8009122:	db09      	blt.n	8009138 <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009124:	231f      	movs	r3, #31
 8009126:	4018      	ands	r0, r3
 8009128:	3b1e      	subs	r3, #30
 800912a:	4083      	lsls	r3, r0
 800912c:	4a03      	ldr	r2, [pc, #12]	; (800913c <HAL_NVIC_DisableIRQ+0x1c>)
 800912e:	67d3      	str	r3, [r2, #124]	; 0x7c
  __ASM volatile ("dsb 0xF":::"memory");
 8009130:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009134:	f3bf 8f6f 	isb	sy
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8009138:	4770      	bx	lr
 800913a:	46c0      	nop			; (mov r8, r8)
 800913c:	e000e104 	.word	0xe000e104

08009140 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009140:	4a09      	ldr	r2, [pc, #36]	; (8009168 <HAL_SYSTICK_Config+0x28>)
 8009142:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8009144:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009146:	4293      	cmp	r3, r2
 8009148:	d80d      	bhi.n	8009166 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800914a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800914c:	4a07      	ldr	r2, [pc, #28]	; (800916c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800914e:	4808      	ldr	r0, [pc, #32]	; (8009170 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009150:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009152:	6a03      	ldr	r3, [r0, #32]
 8009154:	0609      	lsls	r1, r1, #24
 8009156:	021b      	lsls	r3, r3, #8
 8009158:	0a1b      	lsrs	r3, r3, #8
 800915a:	430b      	orrs	r3, r1
 800915c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800915e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009160:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009162:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009164:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8009166:	4770      	bx	lr
 8009168:	00ffffff 	.word	0x00ffffff
 800916c:	e000e010 	.word	0xe000e010
 8009170:	e000ed00 	.word	0xe000ed00

08009174 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8009174:	4b05      	ldr	r3, [pc, #20]	; (800918c <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8009176:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8009178:	2804      	cmp	r0, #4
 800917a:	d102      	bne.n	8009182 <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800917c:	4310      	orrs	r0, r2
 800917e:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8009180:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8009182:	2104      	movs	r1, #4
 8009184:	438a      	bics	r2, r1
 8009186:	601a      	str	r2, [r3, #0]
}
 8009188:	e7fa      	b.n	8009180 <HAL_SYSTICK_CLKSourceConfig+0xc>
 800918a:	46c0      	nop			; (mov r8, r8)
 800918c:	e000e010 	.word	0xe000e010

08009190 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8009190:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8009192:	f7ff fd15 	bl	8008bc0 <HAL_SYSTICK_Callback>
}
 8009196:	bd10      	pop	{r4, pc}

08009198 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919a:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 800919c:	2001      	movs	r0, #1
  if(hdma == NULL)
 800919e:	2c00      	cmp	r4, #0
 80091a0:	d035      	beq.n	800920e <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80091a2:	6825      	ldr	r5, [r4, #0]
 80091a4:	4b1a      	ldr	r3, [pc, #104]	; (8009210 <HAL_DMA_Init+0x78>)
 80091a6:	2114      	movs	r1, #20
 80091a8:	18e8      	adds	r0, r5, r3
 80091aa:	f7fb ffcd 	bl	8005148 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80091ae:	4b19      	ldr	r3, [pc, #100]	; (8009214 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80091b0:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 80091b2:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80091b4:	2302      	movs	r3, #2
 80091b6:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80091b8:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 80091ba:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80091bc:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80091be:	4b16      	ldr	r3, [pc, #88]	; (8009218 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80091c0:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80091c2:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 80091c4:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80091c6:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 80091c8:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80091ca:	433b      	orrs	r3, r7
 80091cc:	6967      	ldr	r7, [r4, #20]
 80091ce:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80091d0:	69a7      	ldr	r7, [r4, #24]
 80091d2:	433b      	orrs	r3, r7
 80091d4:	69e7      	ldr	r7, [r4, #28]
 80091d6:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 80091d8:	6a27      	ldr	r7, [r4, #32]
 80091da:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 80091dc:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80091de:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80091e0:	2380      	movs	r3, #128	; 0x80
 80091e2:	01db      	lsls	r3, r3, #7
 80091e4:	4299      	cmp	r1, r3
 80091e6:	d00c      	beq.n	8009202 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80091e8:	251c      	movs	r5, #28
 80091ea:	4028      	ands	r0, r5
 80091ec:	3d0d      	subs	r5, #13
 80091ee:	4085      	lsls	r5, r0
 80091f0:	490a      	ldr	r1, [pc, #40]	; (800921c <HAL_DMA_Init+0x84>)
 80091f2:	680b      	ldr	r3, [r1, #0]
 80091f4:	43ab      	bics	r3, r5
 80091f6:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80091f8:	6863      	ldr	r3, [r4, #4]
 80091fa:	680d      	ldr	r5, [r1, #0]
 80091fc:	4083      	lsls	r3, r0
 80091fe:	432b      	orrs	r3, r5
 8009200:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009202:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009204:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009206:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009208:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 800920a:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 800920c:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 800920e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009210:	bffdfff8 	.word	0xbffdfff8
 8009214:	40020000 	.word	0x40020000
 8009218:	ffff800f 	.word	0xffff800f
 800921c:	400200a8 	.word	0x400200a8

08009220 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009222:	1d44      	adds	r4, r0, #5
 8009224:	7fe6      	ldrb	r6, [r4, #31]
{
 8009226:	0005      	movs	r5, r0
  __HAL_LOCK(hdma);
 8009228:	2002      	movs	r0, #2
 800922a:	2e01      	cmp	r6, #1
 800922c:	d023      	beq.n	8009276 <HAL_DMA_Start+0x56>
 800922e:	3801      	subs	r0, #1
 8009230:	77e0      	strb	r0, [r4, #31]

  if(HAL_DMA_STATE_READY == hdma->State)
 8009232:	1da8      	adds	r0, r5, #6
 8009234:	7fc6      	ldrb	r6, [r0, #31]
 8009236:	4684      	mov	ip, r0
 8009238:	b2f6      	uxtb	r6, r6
 800923a:	2002      	movs	r0, #2
 800923c:	2700      	movs	r7, #0
 800923e:	2e01      	cmp	r6, #1
 8009240:	d11d      	bne.n	800927e <HAL_DMA_Start+0x5e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009242:	4664      	mov	r4, ip
 8009244:	77e0      	strb	r0, [r4, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009246:	682c      	ldr	r4, [r5, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009248:	63ef      	str	r7, [r5, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800924a:	6820      	ldr	r0, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800924c:	371c      	adds	r7, #28
    __HAL_DMA_DISABLE(hdma);
 800924e:	43b0      	bics	r0, r6
 8009250:	6020      	str	r0, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009252:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8009254:	9001      	str	r0, [sp, #4]
 8009256:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8009258:	4007      	ands	r7, r0
 800925a:	40be      	lsls	r6, r7
 800925c:	9801      	ldr	r0, [sp, #4]
 800925e:	6046      	str	r6, [r0, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009260:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009262:	68ab      	ldr	r3, [r5, #8]
 8009264:	2b10      	cmp	r3, #16
 8009266:	d107      	bne.n	8009278 <HAL_DMA_Start+0x58>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009268:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800926a:	60e1      	str	r1, [r4, #12]
    __HAL_DMA_ENABLE(hdma);
 800926c:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 800926e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8009270:	6822      	ldr	r2, [r4, #0]
 8009272:	4313      	orrs	r3, r2
 8009274:	6023      	str	r3, [r4, #0]
}
 8009276:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8009278:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800927a:	60e2      	str	r2, [r4, #12]
 800927c:	e7f6      	b.n	800926c <HAL_DMA_Start+0x4c>
    __HAL_UNLOCK(hdma);
 800927e:	77e7      	strb	r7, [r4, #31]
 8009280:	e7f9      	b.n	8009276 <HAL_DMA_Start+0x56>

08009282 <HAL_DMA_Start_IT>:
{
 8009282:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8009284:	1d44      	adds	r4, r0, #5
 8009286:	7fe6      	ldrb	r6, [r4, #31]
{
 8009288:	0005      	movs	r5, r0
  __HAL_LOCK(hdma);
 800928a:	2002      	movs	r0, #2
 800928c:	2e01      	cmp	r6, #1
 800928e:	d02b      	beq.n	80092e8 <HAL_DMA_Start_IT+0x66>
 8009290:	3801      	subs	r0, #1
 8009292:	77e0      	strb	r0, [r4, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8009294:	1da8      	adds	r0, r5, #6
 8009296:	7fc6      	ldrb	r6, [r0, #31]
 8009298:	4684      	mov	ip, r0
 800929a:	b2f6      	uxtb	r6, r6
 800929c:	2002      	movs	r0, #2
 800929e:	2700      	movs	r7, #0
 80092a0:	2e01      	cmp	r6, #1
 80092a2:	d12c      	bne.n	80092fe <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80092a4:	4664      	mov	r4, ip
 80092a6:	77e0      	strb	r0, [r4, #31]
    __HAL_DMA_DISABLE(hdma);
 80092a8:	682c      	ldr	r4, [r5, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80092aa:	63ef      	str	r7, [r5, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80092ac:	6820      	ldr	r0, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80092ae:	371c      	adds	r7, #28
    __HAL_DMA_DISABLE(hdma);
 80092b0:	43b0      	bics	r0, r6
 80092b2:	6020      	str	r0, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80092b4:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80092b6:	9001      	str	r0, [sp, #4]
 80092b8:	6c68      	ldr	r0, [r5, #68]	; 0x44
 80092ba:	4007      	ands	r7, r0
 80092bc:	40be      	lsls	r6, r7
 80092be:	9801      	ldr	r0, [sp, #4]
 80092c0:	6046      	str	r6, [r0, #4]
  hdma->Instance->CNDTR = DataLength;
 80092c2:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80092c4:	68ab      	ldr	r3, [r5, #8]
 80092c6:	6828      	ldr	r0, [r5, #0]
 80092c8:	2b10      	cmp	r3, #16
 80092ca:	d10e      	bne.n	80092ea <HAL_DMA_Start_IT+0x68>
    hdma->Instance->CPAR = DstAddress;
 80092cc:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80092ce:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80092d0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00c      	beq.n	80092f0 <HAL_DMA_Start_IT+0x6e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80092d6:	230e      	movs	r3, #14
 80092d8:	6822      	ldr	r2, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80092da:	4313      	orrs	r3, r2
 80092dc:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80092de:	2301      	movs	r3, #1
 80092e0:	6802      	ldr	r2, [r0, #0]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092e6:	2000      	movs	r0, #0
}
 80092e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 80092ea:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 80092ec:	60e2      	str	r2, [r4, #12]
 80092ee:	e7ef      	b.n	80092d0 <HAL_DMA_Start_IT+0x4e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80092f0:	2204      	movs	r2, #4
 80092f2:	6823      	ldr	r3, [r4, #0]
 80092f4:	4393      	bics	r3, r2
 80092f6:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80092f8:	6822      	ldr	r2, [r4, #0]
 80092fa:	230a      	movs	r3, #10
 80092fc:	e7ed      	b.n	80092da <HAL_DMA_Start_IT+0x58>
    __HAL_UNLOCK(hdma);
 80092fe:	77e7      	strb	r7, [r4, #31]
 8009300:	e7f2      	b.n	80092e8 <HAL_DMA_Start_IT+0x66>

08009302 <HAL_DMA_Abort>:
{
 8009302:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009304:	1d85      	adds	r5, r0, #6
 8009306:	7feb      	ldrb	r3, [r5, #31]
 8009308:	1d44      	adds	r4, r0, #5
 800930a:	2b02      	cmp	r3, #2
 800930c:	d005      	beq.n	800931a <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800930e:	2304      	movs	r3, #4
 8009310:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8009312:	2300      	movs	r3, #0
    return HAL_ERROR;
 8009314:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8009316:	77e3      	strb	r3, [r4, #31]
}
 8009318:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800931a:	210e      	movs	r1, #14
 800931c:	6803      	ldr	r3, [r0, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	438a      	bics	r2, r1
 8009322:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8009324:	2201      	movs	r2, #1
 8009326:	6819      	ldr	r1, [r3, #0]
 8009328:	4391      	bics	r1, r2
 800932a:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800932c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800932e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8009330:	201c      	movs	r0, #28
 8009332:	4003      	ands	r3, r0
 8009334:	0010      	movs	r0, r2
 8009336:	4098      	lsls	r0, r3
 8009338:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 800933a:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 800933c:	77ea      	strb	r2, [r5, #31]
    __HAL_UNLOCK(hdma);
 800933e:	77e0      	strb	r0, [r4, #31]
    return status;
 8009340:	e7ea      	b.n	8009318 <HAL_DMA_Abort+0x16>

08009342 <HAL_DMA_Abort_IT>:
{
 8009342:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009344:	1d84      	adds	r4, r0, #6
 8009346:	7fe3      	ldrb	r3, [r4, #31]
 8009348:	2b02      	cmp	r3, #2
 800934a:	d004      	beq.n	8009356 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800934c:	2304      	movs	r3, #4
 800934e:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8009350:	3b03      	subs	r3, #3
}
 8009352:	0018      	movs	r0, r3
 8009354:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009356:	210e      	movs	r1, #14
 8009358:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800935a:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	438a      	bics	r2, r1
 8009360:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8009362:	2201      	movs	r2, #1
 8009364:	6819      	ldr	r1, [r3, #0]
 8009366:	4391      	bics	r1, r2
 8009368:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800936a:	231c      	movs	r3, #28
 800936c:	402b      	ands	r3, r5
 800936e:	0015      	movs	r5, r2
 8009370:	409d      	lsls	r5, r3
 8009372:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 8009374:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009376:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8009378:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 800937a:	2400      	movs	r4, #0
    if(hdma->XferAbortCallback != NULL)
 800937c:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 800937e:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8009380:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8009382:	42a2      	cmp	r2, r4
 8009384:	d0e5      	beq.n	8009352 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8009386:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8009388:	0023      	movs	r3, r4
 800938a:	e7e2      	b.n	8009352 <HAL_DMA_Abort_IT+0x10>

0800938c <HAL_DMA_IRQHandler>:
{
 800938c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800938e:	221c      	movs	r2, #28
 8009390:	2704      	movs	r7, #4
 8009392:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009394:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8009396:	4032      	ands	r2, r6
 8009398:	003e      	movs	r6, r7
 800939a:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800939c:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800939e:	6803      	ldr	r3, [r0, #0]
 80093a0:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80093a2:	4235      	tst	r5, r6
 80093a4:	d00d      	beq.n	80093c2 <HAL_DMA_IRQHandler+0x36>
 80093a6:	423c      	tst	r4, r7
 80093a8:	d00b      	beq.n	80093c2 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	0692      	lsls	r2, r2, #26
 80093ae:	d402      	bmi.n	80093b6 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	43ba      	bics	r2, r7
 80093b4:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 80093b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80093b8:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d019      	beq.n	80093f2 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 80093be:	4798      	blx	r3
  return;
 80093c0:	e017      	b.n	80093f2 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80093c2:	2702      	movs	r7, #2
 80093c4:	003e      	movs	r6, r7
 80093c6:	4096      	lsls	r6, r2
 80093c8:	4235      	tst	r5, r6
 80093ca:	d013      	beq.n	80093f4 <HAL_DMA_IRQHandler+0x68>
 80093cc:	423c      	tst	r4, r7
 80093ce:	d011      	beq.n	80093f4 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	0692      	lsls	r2, r2, #26
 80093d4:	d406      	bmi.n	80093e4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80093d6:	240a      	movs	r4, #10
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	43a2      	bics	r2, r4
 80093dc:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80093de:	2201      	movs	r2, #1
 80093e0:	1d83      	adds	r3, r0, #6
 80093e2:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 80093e4:	2200      	movs	r2, #0
 80093e6:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80093e8:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 80093ea:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 80093ec:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d1e5      	bne.n	80093be <HAL_DMA_IRQHandler+0x32>
}
 80093f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80093f4:	2608      	movs	r6, #8
 80093f6:	0037      	movs	r7, r6
 80093f8:	4097      	lsls	r7, r2
 80093fa:	423d      	tst	r5, r7
 80093fc:	d0f9      	beq.n	80093f2 <HAL_DMA_IRQHandler+0x66>
 80093fe:	4234      	tst	r4, r6
 8009400:	d0f7      	beq.n	80093f2 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009402:	250e      	movs	r5, #14
 8009404:	681c      	ldr	r4, [r3, #0]
 8009406:	43ac      	bics	r4, r5
 8009408:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800940a:	2301      	movs	r3, #1
 800940c:	001c      	movs	r4, r3
 800940e:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8009410:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009412:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009414:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8009416:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8009418:	2200      	movs	r2, #0
 800941a:	1d43      	adds	r3, r0, #5
 800941c:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 800941e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009420:	e7e5      	b.n	80093ee <HAL_DMA_IRQHandler+0x62>
	...

08009424 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8009424:	2180      	movs	r1, #128	; 0x80
 8009426:	4a27      	ldr	r2, [pc, #156]	; (80094c4 <FLASH_SetErrorCode+0xa0>)
 8009428:	0049      	lsls	r1, r1, #1
 800942a:	6990      	ldr	r0, [r2, #24]
{
 800942c:	b530      	push	{r4, r5, lr}
  uint32_t flags = 0;
 800942e:	2300      	movs	r3, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8009430:	4208      	tst	r0, r1
 8009432:	d005      	beq.n	8009440 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8009434:	4824      	ldr	r0, [pc, #144]	; (80094c8 <FLASH_SetErrorCode+0xa4>)
 8009436:	3302      	adds	r3, #2
 8009438:	6944      	ldr	r4, [r0, #20]
 800943a:	4323      	orrs	r3, r4
 800943c:	6143      	str	r3, [r0, #20]
    flags |= FLASH_FLAG_WRPERR;
 800943e:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8009440:	2080      	movs	r0, #128	; 0x80
 8009442:	6991      	ldr	r1, [r2, #24]
 8009444:	0080      	lsls	r0, r0, #2
 8009446:	4201      	tst	r1, r0
 8009448:	d005      	beq.n	8009456 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800944a:	2101      	movs	r1, #1
 800944c:	4c1e      	ldr	r4, [pc, #120]	; (80094c8 <FLASH_SetErrorCode+0xa4>)
    flags |= FLASH_FLAG_PGAERR;
 800944e:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8009450:	6965      	ldr	r5, [r4, #20]
 8009452:	4329      	orrs	r1, r5
 8009454:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8009456:	2080      	movs	r0, #128	; 0x80
 8009458:	6991      	ldr	r1, [r2, #24]
 800945a:	00c0      	lsls	r0, r0, #3
 800945c:	4201      	tst	r1, r0
 800945e:	d005      	beq.n	800946c <FLASH_SetErrorCode+0x48>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8009460:	2108      	movs	r1, #8
 8009462:	4c19      	ldr	r4, [pc, #100]	; (80094c8 <FLASH_SetErrorCode+0xa4>)
    flags |= FLASH_FLAG_SIZERR;
 8009464:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8009466:	6965      	ldr	r5, [r4, #20]
 8009468:	4329      	orrs	r1, r5
 800946a:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800946c:	2080      	movs	r0, #128	; 0x80
 800946e:	6991      	ldr	r1, [r2, #24]
 8009470:	0100      	lsls	r0, r0, #4
 8009472:	4201      	tst	r1, r0
 8009474:	d005      	beq.n	8009482 <FLASH_SetErrorCode+0x5e>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8009476:	2104      	movs	r1, #4
 8009478:	4c13      	ldr	r4, [pc, #76]	; (80094c8 <FLASH_SetErrorCode+0xa4>)
    flags |= FLASH_FLAG_OPTVERR;
 800947a:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800947c:	6965      	ldr	r5, [r4, #20]
 800947e:	4329      	orrs	r1, r5
 8009480:	6161      	str	r1, [r4, #20]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8009482:	2080      	movs	r0, #128	; 0x80
 8009484:	6991      	ldr	r1, [r2, #24]
 8009486:	0180      	lsls	r0, r0, #6
 8009488:	4201      	tst	r1, r0
 800948a:	d005      	beq.n	8009498 <FLASH_SetErrorCode+0x74>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800948c:	2110      	movs	r1, #16
 800948e:	4c0e      	ldr	r4, [pc, #56]	; (80094c8 <FLASH_SetErrorCode+0xa4>)
    flags |= FLASH_FLAG_RDERR;
 8009490:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8009492:	6965      	ldr	r5, [r4, #20]
 8009494:	4329      	orrs	r1, r5
 8009496:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8009498:	6991      	ldr	r1, [r2, #24]
 800949a:	0389      	lsls	r1, r1, #14
 800949c:	d505      	bpl.n	80094aa <FLASH_SetErrorCode+0x86>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800949e:	2020      	movs	r0, #32
 80094a0:	4c09      	ldr	r4, [pc, #36]	; (80094c8 <FLASH_SetErrorCode+0xa4>)
    flags |= HAL_FLASH_ERROR_FWWERR;
 80094a2:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80094a4:	6961      	ldr	r1, [r4, #20]
 80094a6:	4301      	orrs	r1, r0
 80094a8:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80094aa:	2080      	movs	r0, #128	; 0x80
 80094ac:	6991      	ldr	r1, [r2, #24]
 80094ae:	0240      	lsls	r0, r0, #9
 80094b0:	4201      	tst	r1, r0
 80094b2:	d005      	beq.n	80094c0 <FLASH_SetErrorCode+0x9c>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80094b4:	2140      	movs	r1, #64	; 0x40
 80094b6:	4c04      	ldr	r4, [pc, #16]	; (80094c8 <FLASH_SetErrorCode+0xa4>)
    flags |= FLASH_FLAG_NOTZEROERR;
 80094b8:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80094ba:	6965      	ldr	r5, [r4, #20]
 80094bc:	4329      	orrs	r1, r5
 80094be:	6161      	str	r1, [r4, #20]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80094c0:	6193      	str	r3, [r2, #24]
}  
 80094c2:	bd30      	pop	{r4, r5, pc}
 80094c4:	40022000 	.word	0x40022000
 80094c8:	2000203c 	.word	0x2000203c

080094cc <HAL_FLASH_Unlock>:
  if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 80094cc:	2001      	movs	r0, #1
 80094ce:	4b11      	ldr	r3, [pc, #68]	; (8009514 <HAL_FLASH_Unlock+0x48>)
 80094d0:	685a      	ldr	r2, [r3, #4]
 80094d2:	4202      	tst	r2, r0
 80094d4:	d104      	bne.n	80094e0 <HAL_FLASH_Unlock+0x14>
  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 80094d6:	2202      	movs	r2, #2
 80094d8:	6858      	ldr	r0, [r3, #4]
 80094da:	4010      	ands	r0, r2
 80094dc:	d10d      	bne.n	80094fa <HAL_FLASH_Unlock+0x2e>
}
 80094de:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094e0:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80094e4:	b672      	cpsid	i
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 80094e6:	490c      	ldr	r1, [pc, #48]	; (8009518 <HAL_FLASH_Unlock+0x4c>)
 80094e8:	60d9      	str	r1, [r3, #12]
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 80094ea:	490c      	ldr	r1, [pc, #48]	; (800951c <HAL_FLASH_Unlock+0x50>)
 80094ec:	60d9      	str	r1, [r3, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094ee:	f382 8810 	msr	PRIMASK, r2
    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 80094f2:	685a      	ldr	r2, [r3, #4]
 80094f4:	4202      	tst	r2, r0
 80094f6:	d0ee      	beq.n	80094d6 <HAL_FLASH_Unlock+0xa>
 80094f8:	e7f1      	b.n	80094de <HAL_FLASH_Unlock+0x12>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094fa:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80094fe:	b672      	cpsid	i
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 8009500:	4907      	ldr	r1, [pc, #28]	; (8009520 <HAL_FLASH_Unlock+0x54>)
 8009502:	6119      	str	r1, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 8009504:	4907      	ldr	r1, [pc, #28]	; (8009524 <HAL_FLASH_Unlock+0x58>)
 8009506:	6119      	str	r1, [r3, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009508:	f382 8810 	msr	PRIMASK, r2
    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 800950c:	6858      	ldr	r0, [r3, #4]
 800950e:	0780      	lsls	r0, r0, #30
      return HAL_ERROR;
 8009510:	0fc0      	lsrs	r0, r0, #31
 8009512:	e7e4      	b.n	80094de <HAL_FLASH_Unlock+0x12>
 8009514:	40022000 	.word	0x40022000
 8009518:	89abcdef 	.word	0x89abcdef
 800951c:	02030405 	.word	0x02030405
 8009520:	8c9daebf 	.word	0x8c9daebf
 8009524:	13141516 	.word	0x13141516

08009528 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8009528:	2202      	movs	r2, #2
 800952a:	4b05      	ldr	r3, [pc, #20]	; (8009540 <HAL_FLASH_Lock+0x18>)
}
 800952c:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 800952e:	6859      	ldr	r1, [r3, #4]
 8009530:	430a      	orrs	r2, r1
 8009532:	605a      	str	r2, [r3, #4]
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8009534:	2201      	movs	r2, #1
 8009536:	6859      	ldr	r1, [r3, #4]
 8009538:	430a      	orrs	r2, r1
 800953a:	605a      	str	r2, [r3, #4]
}
 800953c:	4770      	bx	lr
 800953e:	46c0      	nop			; (mov r8, r8)
 8009540:	40022000 	.word	0x40022000

08009544 <FLASH_WaitForLastOperation>:
{
 8009544:	b570      	push	{r4, r5, r6, lr}
 8009546:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009548:	f7ff fd9c 	bl	8009084 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800954c:	2501      	movs	r5, #1
  uint32_t tickstart = HAL_GetTick();
 800954e:	0006      	movs	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8009550:	4a18      	ldr	r2, [pc, #96]	; (80095b4 <FLASH_WaitForLastOperation+0x70>)
 8009552:	0013      	movs	r3, r2
 8009554:	6991      	ldr	r1, [r2, #24]
 8009556:	4229      	tst	r1, r5
 8009558:	d11f      	bne.n	800959a <FLASH_WaitForLastOperation+0x56>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800955a:	2102      	movs	r1, #2
 800955c:	6990      	ldr	r0, [r2, #24]
 800955e:	4208      	tst	r0, r1
 8009560:	d000      	beq.n	8009564 <FLASH_WaitForLastOperation+0x20>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009562:	6191      	str	r1, [r2, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8009564:	699a      	ldr	r2, [r3, #24]
 8009566:	05d2      	lsls	r2, r2, #23
 8009568:	d413      	bmi.n	8009592 <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800956a:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800956c:	0592      	lsls	r2, r2, #22
 800956e:	d410      	bmi.n	8009592 <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8009570:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8009572:	0552      	lsls	r2, r2, #21
 8009574:	d40d      	bmi.n	8009592 <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8009576:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8009578:	0512      	lsls	r2, r2, #20
 800957a:	d40a      	bmi.n	8009592 <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800957c:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800957e:	0492      	lsls	r2, r2, #18
 8009580:	d407      	bmi.n	8009592 <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8009582:	2280      	movs	r2, #128	; 0x80
 8009584:	6998      	ldr	r0, [r3, #24]
 8009586:	0292      	lsls	r2, r2, #10
 8009588:	4010      	ands	r0, r2
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800958a:	d102      	bne.n	8009592 <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800958c:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800958e:	03db      	lsls	r3, r3, #15
 8009590:	d508      	bpl.n	80095a4 <FLASH_WaitForLastOperation+0x60>
    FLASH_SetErrorCode();
 8009592:	f7ff ff47 	bl	8009424 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8009596:	2001      	movs	r0, #1
 8009598:	e004      	b.n	80095a4 <FLASH_WaitForLastOperation+0x60>
    if (Timeout != HAL_MAX_DELAY)
 800959a:	1c61      	adds	r1, r4, #1
 800959c:	d0da      	beq.n	8009554 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800959e:	2c00      	cmp	r4, #0
 80095a0:	d101      	bne.n	80095a6 <FLASH_WaitForLastOperation+0x62>
        return HAL_TIMEOUT;
 80095a2:	2003      	movs	r0, #3
}
 80095a4:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80095a6:	f7ff fd6d 	bl	8009084 <HAL_GetTick>
 80095aa:	1b80      	subs	r0, r0, r6
 80095ac:	42a0      	cmp	r0, r4
 80095ae:	d9cf      	bls.n	8009550 <FLASH_WaitForLastOperation+0xc>
 80095b0:	e7f7      	b.n	80095a2 <FLASH_WaitForLastOperation+0x5e>
 80095b2:	46c0      	nop			; (mov r8, r8)
 80095b4:	40022000 	.word	0x40022000

080095b8 <HAL_FLASH_Program>:
{
 80095b8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(&pFlash);
 80095ba:	4c0b      	ldr	r4, [pc, #44]	; (80095e8 <HAL_FLASH_Program+0x30>)
{
 80095bc:	000d      	movs	r5, r1
  __HAL_LOCK(&pFlash);
 80095be:	7c23      	ldrb	r3, [r4, #16]
{
 80095c0:	0016      	movs	r6, r2
  __HAL_LOCK(&pFlash);
 80095c2:	2002      	movs	r0, #2
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d00d      	beq.n	80095e4 <HAL_FLASH_Program+0x2c>
 80095c8:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80095ca:	4808      	ldr	r0, [pc, #32]	; (80095ec <HAL_FLASH_Program+0x34>)
  __HAL_LOCK(&pFlash);
 80095cc:	7423      	strb	r3, [r4, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80095ce:	f7ff ffb9 	bl	8009544 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80095d2:	2800      	cmp	r0, #0
 80095d4:	d104      	bne.n	80095e0 <HAL_FLASH_Program+0x28>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80095d6:	6160      	str	r0, [r4, #20]
    *(__IO uint32_t *)Address = Data;
 80095d8:	602e      	str	r6, [r5, #0]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80095da:	4804      	ldr	r0, [pc, #16]	; (80095ec <HAL_FLASH_Program+0x34>)
 80095dc:	f7ff ffb2 	bl	8009544 <FLASH_WaitForLastOperation>
  __HAL_UNLOCK(&pFlash);
 80095e0:	2300      	movs	r3, #0
 80095e2:	7423      	strb	r3, [r4, #16]
}
 80095e4:	bd70      	pop	{r4, r5, r6, pc}
 80095e6:	46c0      	nop			; (mov r8, r8)
 80095e8:	2000203c 	.word	0x2000203c
 80095ec:	0000c350 	.word	0x0000c350

080095f0 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80095f0:	2100      	movs	r1, #0

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 80095f2:	2280      	movs	r2, #128	; 0x80
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80095f4:	4b07      	ldr	r3, [pc, #28]	; (8009614 <FLASH_PageErase+0x24>)
{
 80095f6:	b510      	push	{r4, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80095f8:	6159      	str	r1, [r3, #20]
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 80095fa:	4b07      	ldr	r3, [pc, #28]	; (8009618 <FLASH_PageErase+0x28>)
 80095fc:	0092      	lsls	r2, r2, #2
 80095fe:	685c      	ldr	r4, [r3, #4]
 8009600:	4322      	orrs	r2, r4
 8009602:	605a      	str	r2, [r3, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8009604:	2208      	movs	r2, #8
 8009606:	685c      	ldr	r4, [r3, #4]
 8009608:	4322      	orrs	r2, r4
 800960a:	605a      	str	r2, [r3, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 800960c:	237f      	movs	r3, #127	; 0x7f
 800960e:	4398      	bics	r0, r3
 8009610:	6001      	str	r1, [r0, #0]
}
 8009612:	bd10      	pop	{r4, pc}
 8009614:	2000203c 	.word	0x2000203c
 8009618:	40022000 	.word	0x40022000

0800961c <HAL_FLASHEx_Erase>:
{
 800961c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 800961e:	4b19      	ldr	r3, [pc, #100]	; (8009684 <HAL_FLASHEx_Erase+0x68>)
{
 8009620:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 8009622:	7c1b      	ldrb	r3, [r3, #16]
{
 8009624:	000f      	movs	r7, r1
  __HAL_LOCK(&pFlash);
 8009626:	2502      	movs	r5, #2
 8009628:	2b01      	cmp	r3, #1
 800962a:	d027      	beq.n	800967c <HAL_FLASHEx_Erase+0x60>
 800962c:	2301      	movs	r3, #1
 800962e:	4a15      	ldr	r2, [pc, #84]	; (8009684 <HAL_FLASHEx_Erase+0x68>)
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009630:	4815      	ldr	r0, [pc, #84]	; (8009688 <HAL_FLASHEx_Erase+0x6c>)
  __HAL_LOCK(&pFlash);
 8009632:	7413      	strb	r3, [r2, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009634:	f7ff ff86 	bl	8009544 <FLASH_WaitForLastOperation>
 8009638:	1e05      	subs	r5, r0, #0
  if (status == HAL_OK)
 800963a:	d11c      	bne.n	8009676 <HAL_FLASHEx_Erase+0x5a>
    *PageError = 0xFFFFFFFFU;
 800963c:	2301      	movs	r3, #1
 800963e:	425b      	negs	r3, r3
 8009640:	603b      	str	r3, [r7, #0]
    for(address = pEraseInit->PageAddress; 
 8009642:	6874      	ldr	r4, [r6, #4]
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8009644:	68b3      	ldr	r3, [r6, #8]
 8009646:	6872      	ldr	r2, [r6, #4]
 8009648:	01db      	lsls	r3, r3, #7
 800964a:	189b      	adds	r3, r3, r2
    for(address = pEraseInit->PageAddress; 
 800964c:	42a3      	cmp	r3, r4
 800964e:	d912      	bls.n	8009676 <HAL_FLASHEx_Erase+0x5a>
      FLASH_PageErase(address);
 8009650:	0020      	movs	r0, r4
 8009652:	f7ff ffcd 	bl	80095f0 <FLASH_PageErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009656:	480c      	ldr	r0, [pc, #48]	; (8009688 <HAL_FLASHEx_Erase+0x6c>)
 8009658:	f7ff ff74 	bl	8009544 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 800965c:	2108      	movs	r1, #8
 800965e:	4b0b      	ldr	r3, [pc, #44]	; (800968c <HAL_FLASHEx_Erase+0x70>)
 8009660:	685a      	ldr	r2, [r3, #4]
 8009662:	438a      	bics	r2, r1
 8009664:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8009666:	685a      	ldr	r2, [r3, #4]
 8009668:	4909      	ldr	r1, [pc, #36]	; (8009690 <HAL_FLASHEx_Erase+0x74>)
 800966a:	400a      	ands	r2, r1
 800966c:	605a      	str	r2, [r3, #4]
      if (status != HAL_OK) 
 800966e:	2800      	cmp	r0, #0
 8009670:	d006      	beq.n	8009680 <HAL_FLASHEx_Erase+0x64>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009672:	0005      	movs	r5, r0
        *PageError = address;
 8009674:	603c      	str	r4, [r7, #0]
  __HAL_UNLOCK(&pFlash);
 8009676:	2300      	movs	r3, #0
 8009678:	4a02      	ldr	r2, [pc, #8]	; (8009684 <HAL_FLASHEx_Erase+0x68>)
 800967a:	7413      	strb	r3, [r2, #16]
}
 800967c:	0028      	movs	r0, r5
 800967e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        address += FLASH_PAGE_SIZE)
 8009680:	3480      	adds	r4, #128	; 0x80
 8009682:	e7df      	b.n	8009644 <HAL_FLASHEx_Erase+0x28>
 8009684:	2000203c 	.word	0x2000203c
 8009688:	0000c350 	.word	0x0000c350
 800968c:	40022000 	.word	0x40022000
 8009690:	fffffdff 	.word	0xfffffdff

08009694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009694:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8009696:	4a5a      	ldr	r2, [pc, #360]	; (8009800 <HAL_GPIO_Init+0x16c>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8009698:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800969a:	1882      	adds	r2, r0, r2
 800969c:	1e54      	subs	r4, r2, #1
 800969e:	41a2      	sbcs	r2, r4
{
 80096a0:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0)
 80096a2:	9304      	str	r3, [sp, #16]
  uint32_t position = 0x00U;
 80096a4:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80096a6:	3205      	adds	r2, #5
{
 80096a8:	9102      	str	r1, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80096aa:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80096ac:	9a04      	ldr	r2, [sp, #16]
 80096ae:	40da      	lsrs	r2, r3
 80096b0:	d101      	bne.n	80096b6 <HAL_GPIO_Init+0x22>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 80096b2:	b007      	add	sp, #28
 80096b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80096b6:	2701      	movs	r7, #1
 80096b8:	003a      	movs	r2, r7
 80096ba:	409a      	lsls	r2, r3
 80096bc:	4694      	mov	ip, r2
 80096be:	4661      	mov	r1, ip
 80096c0:	9a04      	ldr	r2, [sp, #16]
 80096c2:	400a      	ands	r2, r1
 80096c4:	9201      	str	r2, [sp, #4]
    if (iocurrent)
 80096c6:	d100      	bne.n	80096ca <HAL_GPIO_Init+0x36>
 80096c8:	e098      	b.n	80097fc <HAL_GPIO_Init+0x168>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80096ca:	2403      	movs	r4, #3
 80096cc:	9a02      	ldr	r2, [sp, #8]
 80096ce:	005e      	lsls	r6, r3, #1
 80096d0:	6852      	ldr	r2, [r2, #4]
 80096d2:	9200      	str	r2, [sp, #0]
 80096d4:	4022      	ands	r2, r4
 80096d6:	40b4      	lsls	r4, r6
 80096d8:	43e1      	mvns	r1, r4
 80096da:	1e54      	subs	r4, r2, #1
 80096dc:	9103      	str	r1, [sp, #12]
 80096de:	42bc      	cmp	r4, r7
 80096e0:	d829      	bhi.n	8009736 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->OSPEEDR;
 80096e2:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80096e4:	400d      	ands	r5, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 80096e6:	9902      	ldr	r1, [sp, #8]
 80096e8:	68cc      	ldr	r4, [r1, #12]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80096ea:	4661      	mov	r1, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 80096ec:	40b4      	lsls	r4, r6
 80096ee:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80096f0:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80096f2:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80096f4:	438d      	bics	r5, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80096f6:	9900      	ldr	r1, [sp, #0]
 80096f8:	090c      	lsrs	r4, r1, #4
 80096fa:	403c      	ands	r4, r7
 80096fc:	409c      	lsls	r4, r3
 80096fe:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8009700:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8009702:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009704:	9903      	ldr	r1, [sp, #12]
 8009706:	400d      	ands	r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009708:	9902      	ldr	r1, [sp, #8]
 800970a:	688c      	ldr	r4, [r1, #8]
 800970c:	40b4      	lsls	r4, r6
 800970e:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8009710:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009712:	2a02      	cmp	r2, #2
 8009714:	d111      	bne.n	800973a <HAL_GPIO_Init+0xa6>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8009716:	2507      	movs	r5, #7
 8009718:	210f      	movs	r1, #15
 800971a:	401d      	ands	r5, r3
 800971c:	00ad      	lsls	r5, r5, #2
 800971e:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 8009720:	08dc      	lsrs	r4, r3, #3
 8009722:	00a4      	lsls	r4, r4, #2
 8009724:	1904      	adds	r4, r0, r4
 8009726:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8009728:	438f      	bics	r7, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800972a:	9902      	ldr	r1, [sp, #8]
 800972c:	6909      	ldr	r1, [r1, #16]
 800972e:	40a9      	lsls	r1, r5
 8009730:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 8009732:	6227      	str	r7, [r4, #32]
 8009734:	e001      	b.n	800973a <HAL_GPIO_Init+0xa6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009736:	2a03      	cmp	r2, #3
 8009738:	d1e3      	bne.n	8009702 <HAL_GPIO_Init+0x6e>
      temp = GPIOx->MODER;
 800973a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800973c:	9903      	ldr	r1, [sp, #12]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800973e:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009740:	4021      	ands	r1, r4
 8009742:	000c      	movs	r4, r1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009744:	4314      	orrs	r4, r2
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009746:	22c0      	movs	r2, #192	; 0xc0
 8009748:	9900      	ldr	r1, [sp, #0]
 800974a:	0292      	lsls	r2, r2, #10
      GPIOx->MODER = temp;
 800974c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800974e:	4211      	tst	r1, r2
 8009750:	d054      	beq.n	80097fc <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009752:	2701      	movs	r7, #1
 8009754:	4c2b      	ldr	r4, [pc, #172]	; (8009804 <HAL_GPIO_Init+0x170>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8009756:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009758:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800975a:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800975c:	433a      	orrs	r2, r7
 800975e:	6362      	str	r2, [r4, #52]	; 0x34
 8009760:	4a29      	ldr	r2, [pc, #164]	; (8009808 <HAL_GPIO_Init+0x174>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8009762:	089c      	lsrs	r4, r3, #2
 8009764:	00a4      	lsls	r4, r4, #2
 8009766:	18a4      	adds	r4, r4, r2
 8009768:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800976a:	4035      	ands	r5, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 800976c:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800976e:	220f      	movs	r2, #15
 8009770:	00ad      	lsls	r5, r5, #2
 8009772:	40aa      	lsls	r2, r5
 8009774:	4661      	mov	r1, ip
 8009776:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8009778:	22a0      	movs	r2, #160	; 0xa0
 800977a:	05d2      	lsls	r2, r2, #23
 800977c:	4694      	mov	ip, r2
 800977e:	2200      	movs	r2, #0
 8009780:	4560      	cmp	r0, ip
 8009782:	d011      	beq.n	80097a8 <HAL_GPIO_Init+0x114>
 8009784:	4a21      	ldr	r2, [pc, #132]	; (800980c <HAL_GPIO_Init+0x178>)
 8009786:	4694      	mov	ip, r2
 8009788:	003a      	movs	r2, r7
 800978a:	4560      	cmp	r0, ip
 800978c:	d00c      	beq.n	80097a8 <HAL_GPIO_Init+0x114>
 800978e:	4f20      	ldr	r7, [pc, #128]	; (8009810 <HAL_GPIO_Init+0x17c>)
 8009790:	1892      	adds	r2, r2, r2
 8009792:	42b8      	cmp	r0, r7
 8009794:	d008      	beq.n	80097a8 <HAL_GPIO_Init+0x114>
 8009796:	4f1f      	ldr	r7, [pc, #124]	; (8009814 <HAL_GPIO_Init+0x180>)
 8009798:	0032      	movs	r2, r6
 800979a:	42b8      	cmp	r0, r7
 800979c:	d004      	beq.n	80097a8 <HAL_GPIO_Init+0x114>
 800979e:	4e1e      	ldr	r6, [pc, #120]	; (8009818 <HAL_GPIO_Init+0x184>)
 80097a0:	3201      	adds	r2, #1
 80097a2:	42b0      	cmp	r0, r6
 80097a4:	d000      	beq.n	80097a8 <HAL_GPIO_Init+0x114>
 80097a6:	9a05      	ldr	r2, [sp, #20]
 80097a8:	40aa      	lsls	r2, r5
 80097aa:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 80097ac:	9901      	ldr	r1, [sp, #4]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80097ae:	60a2      	str	r2, [r4, #8]
          temp |= iocurrent;
 80097b0:	000d      	movs	r5, r1
        temp = EXTI->IMR;
 80097b2:	4a1a      	ldr	r2, [pc, #104]	; (800981c <HAL_GPIO_Init+0x188>)
        temp &= ~((uint32_t)iocurrent);
 80097b4:	43cc      	mvns	r4, r1
        temp = EXTI->IMR;
 80097b6:	6816      	ldr	r6, [r2, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80097b8:	9900      	ldr	r1, [sp, #0]
          temp |= iocurrent;
 80097ba:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80097bc:	03c9      	lsls	r1, r1, #15
 80097be:	d401      	bmi.n	80097c4 <HAL_GPIO_Init+0x130>
        temp &= ~((uint32_t)iocurrent);
 80097c0:	0035      	movs	r5, r6
 80097c2:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 80097c4:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80097c6:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80097c8:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80097ca:	9900      	ldr	r1, [sp, #0]
          temp |= iocurrent;
 80097cc:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80097ce:	0389      	lsls	r1, r1, #14
 80097d0:	d401      	bmi.n	80097d6 <HAL_GPIO_Init+0x142>
        temp &= ~((uint32_t)iocurrent);
 80097d2:	0035      	movs	r5, r6
 80097d4:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 80097d6:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80097d8:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80097da:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80097dc:	9900      	ldr	r1, [sp, #0]
          temp |= iocurrent;
 80097de:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80097e0:	02c9      	lsls	r1, r1, #11
 80097e2:	d401      	bmi.n	80097e8 <HAL_GPIO_Init+0x154>
        temp &= ~((uint32_t)iocurrent);
 80097e4:	0035      	movs	r5, r6
 80097e6:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 80097e8:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80097ea:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80097ec:	9e01      	ldr	r6, [sp, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80097ee:	9900      	ldr	r1, [sp, #0]
          temp |= iocurrent;
 80097f0:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80097f2:	0289      	lsls	r1, r1, #10
 80097f4:	d401      	bmi.n	80097fa <HAL_GPIO_Init+0x166>
        temp &= ~((uint32_t)iocurrent);
 80097f6:	4025      	ands	r5, r4
 80097f8:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80097fa:	60d6      	str	r6, [r2, #12]
    position++;
 80097fc:	3301      	adds	r3, #1
 80097fe:	e755      	b.n	80096ac <HAL_GPIO_Init+0x18>
 8009800:	afffe400 	.word	0xafffe400
 8009804:	40021000 	.word	0x40021000
 8009808:	40010000 	.word	0x40010000
 800980c:	50000400 	.word	0x50000400
 8009810:	50000800 	.word	0x50000800
 8009814:	50000c00 	.word	0x50000c00
 8009818:	50001000 	.word	0x50001000
 800981c:	40010400 	.word	0x40010400

08009820 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009820:	6900      	ldr	r0, [r0, #16]
 8009822:	4008      	ands	r0, r1
 8009824:	1e41      	subs	r1, r0, #1
 8009826:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8009828:	b2c0      	uxtb	r0, r0
}
 800982a:	4770      	bx	lr

0800982c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800982c:	2a00      	cmp	r2, #0
 800982e:	d001      	beq.n	8009834 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009830:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8009832:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8009834:	6281      	str	r1, [r0, #40]	; 0x28
}
 8009836:	e7fc      	b.n	8009832 <HAL_GPIO_WritePin+0x6>

08009838 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009838:	4b04      	ldr	r3, [pc, #16]	; (800984c <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800983a:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800983c:	695a      	ldr	r2, [r3, #20]
 800983e:	4210      	tst	r0, r2
 8009840:	d002      	beq.n	8009848 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009842:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009844:	f7fe fbb2 	bl	8007fac <HAL_GPIO_EXTI_Callback>
  }
}
 8009848:	bd10      	pop	{r4, pc}
 800984a:	46c0      	nop			; (mov r8, r8)
 800984c:	40010400 	.word	0x40010400

08009850 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009850:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8009852:	4a1e      	ldr	r2, [pc, #120]	; (80098cc <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8009854:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8009856:	68d4      	ldr	r4, [r2, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8009858:	4023      	ands	r3, r4
 800985a:	2b08      	cmp	r3, #8
 800985c:	d034      	beq.n	80098c8 <HAL_RCC_GetSysClockFreq+0x78>
 800985e:	2b0c      	cmp	r3, #12
 8009860:	d00c      	beq.n	800987c <HAL_RCC_GetSysClockFreq+0x2c>
 8009862:	2b04      	cmp	r3, #4
 8009864:	d128      	bne.n	80098b8 <HAL_RCC_GetSysClockFreq+0x68>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8009866:	6810      	ldr	r0, [r2, #0]
 8009868:	330c      	adds	r3, #12
 800986a:	4018      	ands	r0, r3
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800986c:	4243      	negs	r3, r0
 800986e:	4158      	adcs	r0, r3
 8009870:	4b17      	ldr	r3, [pc, #92]	; (80098d0 <HAL_RCC_GetSysClockFreq+0x80>)
 8009872:	4240      	negs	r0, r0
 8009874:	4018      	ands	r0, r3
 8009876:	4b17      	ldr	r3, [pc, #92]	; (80098d4 <HAL_RCC_GetSysClockFreq+0x84>)
 8009878:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 800987a:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800987c:	02a3      	lsls	r3, r4, #10
 800987e:	4916      	ldr	r1, [pc, #88]	; (80098d8 <HAL_RCC_GetSysClockFreq+0x88>)
 8009880:	0f1b      	lsrs	r3, r3, #28
 8009882:	5cc8      	ldrb	r0, [r1, r3]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009884:	2380      	movs	r3, #128	; 0x80
 8009886:	68d5      	ldr	r5, [r2, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8009888:	0224      	lsls	r4, r4, #8
 800988a:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800988c:	025b      	lsls	r3, r3, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800988e:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009890:	401d      	ands	r5, r3
 8009892:	d009      	beq.n	80098a8 <HAL_RCC_GetSysClockFreq+0x58>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009894:	4a11      	ldr	r2, [pc, #68]	; (80098dc <HAL_RCC_GetSysClockFreq+0x8c>)
 8009896:	2300      	movs	r3, #0
 8009898:	2100      	movs	r1, #0
 800989a:	f7fb fe29 	bl	80054f0 <__aeabi_lmul>
 800989e:	0022      	movs	r2, r4
 80098a0:	2300      	movs	r3, #0
 80098a2:	f7fb fe05 	bl	80054b0 <__aeabi_uldivmod>
 80098a6:	e7e8      	b.n	800987a <HAL_RCC_GetSysClockFreq+0x2a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80098a8:	2310      	movs	r3, #16
 80098aa:	6816      	ldr	r6, [r2, #0]
 80098ac:	401e      	ands	r6, r3
 80098ae:	d001      	beq.n	80098b4 <HAL_RCC_GetSysClockFreq+0x64>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80098b0:	4a08      	ldr	r2, [pc, #32]	; (80098d4 <HAL_RCC_GetSysClockFreq+0x84>)
 80098b2:	e7f0      	b.n	8009896 <HAL_RCC_GetSysClockFreq+0x46>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80098b4:	4a0a      	ldr	r2, [pc, #40]	; (80098e0 <HAL_RCC_GetSysClockFreq+0x90>)
 80098b6:	e7ee      	b.n	8009896 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80098b8:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80098ba:	6853      	ldr	r3, [r2, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80098bc:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80098be:	041b      	lsls	r3, r3, #16
 80098c0:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80098c2:	3301      	adds	r3, #1
 80098c4:	4098      	lsls	r0, r3
 80098c6:	e7d8      	b.n	800987a <HAL_RCC_GetSysClockFreq+0x2a>
      sysclockfreq = HSE_VALUE;
 80098c8:	4804      	ldr	r0, [pc, #16]	; (80098dc <HAL_RCC_GetSysClockFreq+0x8c>)
 80098ca:	e7d6      	b.n	800987a <HAL_RCC_GetSysClockFreq+0x2a>
 80098cc:	40021000 	.word	0x40021000
 80098d0:	00b71b00 	.word	0x00b71b00
 80098d4:	003d0900 	.word	0x003d0900
 80098d8:	0800fea8 	.word	0x0800fea8
 80098dc:	007a1200 	.word	0x007a1200
 80098e0:	00f42400 	.word	0x00f42400

080098e4 <HAL_RCC_OscConfig>:
{
 80098e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098e6:	0005      	movs	r5, r0
 80098e8:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 80098ea:	2800      	cmp	r0, #0
 80098ec:	d102      	bne.n	80098f4 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80098ee:	2001      	movs	r0, #1
}
 80098f0:	b007      	add	sp, #28
 80098f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098f4:	230c      	movs	r3, #12
 80098f6:	4cc3      	ldr	r4, [pc, #780]	; (8009c04 <HAL_RCC_OscConfig+0x320>)
 80098f8:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80098fa:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098fc:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80098fe:	2380      	movs	r3, #128	; 0x80
 8009900:	025b      	lsls	r3, r3, #9
 8009902:	401a      	ands	r2, r3
 8009904:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009906:	6802      	ldr	r2, [r0, #0]
 8009908:	07d2      	lsls	r2, r2, #31
 800990a:	d442      	bmi.n	8009992 <HAL_RCC_OscConfig+0xae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800990c:	682b      	ldr	r3, [r5, #0]
 800990e:	079b      	lsls	r3, r3, #30
 8009910:	d500      	bpl.n	8009914 <HAL_RCC_OscConfig+0x30>
 8009912:	e088      	b.n	8009a26 <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009914:	682b      	ldr	r3, [r5, #0]
 8009916:	06db      	lsls	r3, r3, #27
 8009918:	d529      	bpl.n	800996e <HAL_RCC_OscConfig+0x8a>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800991a:	2e00      	cmp	r6, #0
 800991c:	d000      	beq.n	8009920 <HAL_RCC_OscConfig+0x3c>
 800991e:	e0e3      	b.n	8009ae8 <HAL_RCC_OscConfig+0x204>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009920:	6823      	ldr	r3, [r4, #0]
 8009922:	059b      	lsls	r3, r3, #22
 8009924:	d502      	bpl.n	800992c <HAL_RCC_OscConfig+0x48>
 8009926:	69eb      	ldr	r3, [r5, #28]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d0e0      	beq.n	80098ee <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800992c:	6862      	ldr	r2, [r4, #4]
 800992e:	49b6      	ldr	r1, [pc, #728]	; (8009c08 <HAL_RCC_OscConfig+0x324>)
 8009930:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009932:	400a      	ands	r2, r1
 8009934:	431a      	orrs	r2, r3
 8009936:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009938:	6861      	ldr	r1, [r4, #4]
 800993a:	6a2a      	ldr	r2, [r5, #32]
 800993c:	0209      	lsls	r1, r1, #8
 800993e:	0a09      	lsrs	r1, r1, #8
 8009940:	0612      	lsls	r2, r2, #24
 8009942:	430a      	orrs	r2, r1
 8009944:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8009946:	2280      	movs	r2, #128	; 0x80
 8009948:	0b5b      	lsrs	r3, r3, #13
 800994a:	3301      	adds	r3, #1
 800994c:	0212      	lsls	r2, r2, #8
 800994e:	409a      	lsls	r2, r3
 8009950:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8009952:	68e1      	ldr	r1, [r4, #12]
 8009954:	060a      	lsls	r2, r1, #24
 8009956:	49ad      	ldr	r1, [pc, #692]	; (8009c0c <HAL_RCC_OscConfig+0x328>)
 8009958:	0f12      	lsrs	r2, r2, #28
 800995a:	5c8a      	ldrb	r2, [r1, r2]
 800995c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800995e:	4aac      	ldr	r2, [pc, #688]	; (8009c10 <HAL_RCC_OscConfig+0x32c>)
 8009960:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8009962:	4bac      	ldr	r3, [pc, #688]	; (8009c14 <HAL_RCC_OscConfig+0x330>)
 8009964:	6818      	ldr	r0, [r3, #0]
 8009966:	f7ff fb49 	bl	8008ffc <HAL_InitTick>
        if(status != HAL_OK)
 800996a:	2800      	cmp	r0, #0
 800996c:	d1c0      	bne.n	80098f0 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800996e:	682b      	ldr	r3, [r5, #0]
 8009970:	071b      	lsls	r3, r3, #28
 8009972:	d500      	bpl.n	8009976 <HAL_RCC_OscConfig+0x92>
 8009974:	e0ef      	b.n	8009b56 <HAL_RCC_OscConfig+0x272>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009976:	682b      	ldr	r3, [r5, #0]
 8009978:	075b      	lsls	r3, r3, #29
 800997a:	d500      	bpl.n	800997e <HAL_RCC_OscConfig+0x9a>
 800997c:	e111      	b.n	8009ba2 <HAL_RCC_OscConfig+0x2be>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800997e:	682b      	ldr	r3, [r5, #0]
 8009980:	069b      	lsls	r3, r3, #26
 8009982:	d500      	bpl.n	8009986 <HAL_RCC_OscConfig+0xa2>
 8009984:	e198      	b.n	8009cb8 <HAL_RCC_OscConfig+0x3d4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009986:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009988:	2b00      	cmp	r3, #0
 800998a:	d000      	beq.n	800998e <HAL_RCC_OscConfig+0xaa>
 800998c:	e1c7      	b.n	8009d1e <HAL_RCC_OscConfig+0x43a>
  return HAL_OK;
 800998e:	2000      	movs	r0, #0
 8009990:	e7ae      	b.n	80098f0 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009992:	2e08      	cmp	r6, #8
 8009994:	d004      	beq.n	80099a0 <HAL_RCC_OscConfig+0xbc>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009996:	2e0c      	cmp	r6, #12
 8009998:	d109      	bne.n	80099ae <HAL_RCC_OscConfig+0xca>
 800999a:	9a01      	ldr	r2, [sp, #4]
 800999c:	2a00      	cmp	r2, #0
 800999e:	d006      	beq.n	80099ae <HAL_RCC_OscConfig+0xca>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099a0:	6823      	ldr	r3, [r4, #0]
 80099a2:	039b      	lsls	r3, r3, #14
 80099a4:	d5b2      	bpl.n	800990c <HAL_RCC_OscConfig+0x28>
 80099a6:	686b      	ldr	r3, [r5, #4]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1af      	bne.n	800990c <HAL_RCC_OscConfig+0x28>
 80099ac:	e79f      	b.n	80098ee <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80099ae:	686a      	ldr	r2, [r5, #4]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d111      	bne.n	80099d8 <HAL_RCC_OscConfig+0xf4>
 80099b4:	6822      	ldr	r2, [r4, #0]
 80099b6:	4313      	orrs	r3, r2
 80099b8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80099ba:	f7ff fb63 	bl	8009084 <HAL_GetTick>
 80099be:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80099c0:	2280      	movs	r2, #128	; 0x80
 80099c2:	6823      	ldr	r3, [r4, #0]
 80099c4:	0292      	lsls	r2, r2, #10
 80099c6:	4213      	tst	r3, r2
 80099c8:	d1a0      	bne.n	800990c <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80099ca:	f7ff fb5b 	bl	8009084 <HAL_GetTick>
 80099ce:	1bc0      	subs	r0, r0, r7
 80099d0:	2864      	cmp	r0, #100	; 0x64
 80099d2:	d9f5      	bls.n	80099c0 <HAL_RCC_OscConfig+0xdc>
            return HAL_TIMEOUT;
 80099d4:	2003      	movs	r0, #3
 80099d6:	e78b      	b.n	80098f0 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80099d8:	21a0      	movs	r1, #160	; 0xa0
 80099da:	02c9      	lsls	r1, r1, #11
 80099dc:	428a      	cmp	r2, r1
 80099de:	d105      	bne.n	80099ec <HAL_RCC_OscConfig+0x108>
 80099e0:	2280      	movs	r2, #128	; 0x80
 80099e2:	6821      	ldr	r1, [r4, #0]
 80099e4:	02d2      	lsls	r2, r2, #11
 80099e6:	430a      	orrs	r2, r1
 80099e8:	6022      	str	r2, [r4, #0]
 80099ea:	e7e3      	b.n	80099b4 <HAL_RCC_OscConfig+0xd0>
 80099ec:	6821      	ldr	r1, [r4, #0]
 80099ee:	488a      	ldr	r0, [pc, #552]	; (8009c18 <HAL_RCC_OscConfig+0x334>)
 80099f0:	4001      	ands	r1, r0
 80099f2:	6021      	str	r1, [r4, #0]
 80099f4:	6821      	ldr	r1, [r4, #0]
 80099f6:	400b      	ands	r3, r1
 80099f8:	9305      	str	r3, [sp, #20]
 80099fa:	9b05      	ldr	r3, [sp, #20]
 80099fc:	4987      	ldr	r1, [pc, #540]	; (8009c1c <HAL_RCC_OscConfig+0x338>)
 80099fe:	6823      	ldr	r3, [r4, #0]
 8009a00:	400b      	ands	r3, r1
 8009a02:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009a04:	2a00      	cmp	r2, #0
 8009a06:	d1d8      	bne.n	80099ba <HAL_RCC_OscConfig+0xd6>
        tickstart = HAL_GetTick();
 8009a08:	f7ff fb3c 	bl	8009084 <HAL_GetTick>
 8009a0c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009a0e:	2280      	movs	r2, #128	; 0x80
 8009a10:	6823      	ldr	r3, [r4, #0]
 8009a12:	0292      	lsls	r2, r2, #10
 8009a14:	4213      	tst	r3, r2
 8009a16:	d100      	bne.n	8009a1a <HAL_RCC_OscConfig+0x136>
 8009a18:	e778      	b.n	800990c <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009a1a:	f7ff fb33 	bl	8009084 <HAL_GetTick>
 8009a1e:	1bc0      	subs	r0, r0, r7
 8009a20:	2864      	cmp	r0, #100	; 0x64
 8009a22:	d9f4      	bls.n	8009a0e <HAL_RCC_OscConfig+0x12a>
 8009a24:	e7d6      	b.n	80099d4 <HAL_RCC_OscConfig+0xf0>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8009a26:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8009a28:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8009a2a:	4213      	tst	r3, r2
 8009a2c:	d003      	beq.n	8009a36 <HAL_RCC_OscConfig+0x152>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8009a2e:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8009a30:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8009a32:	4311      	orrs	r1, r2
 8009a34:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009a36:	2e04      	cmp	r6, #4
 8009a38:	d004      	beq.n	8009a44 <HAL_RCC_OscConfig+0x160>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009a3a:	2e0c      	cmp	r6, #12
 8009a3c:	d126      	bne.n	8009a8c <HAL_RCC_OscConfig+0x1a8>
 8009a3e:	9a01      	ldr	r2, [sp, #4]
 8009a40:	2a00      	cmp	r2, #0
 8009a42:	d123      	bne.n	8009a8c <HAL_RCC_OscConfig+0x1a8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8009a44:	6822      	ldr	r2, [r4, #0]
 8009a46:	0752      	lsls	r2, r2, #29
 8009a48:	d502      	bpl.n	8009a50 <HAL_RCC_OscConfig+0x16c>
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d100      	bne.n	8009a50 <HAL_RCC_OscConfig+0x16c>
 8009a4e:	e74e      	b.n	80098ee <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a50:	6861      	ldr	r1, [r4, #4]
 8009a52:	692a      	ldr	r2, [r5, #16]
 8009a54:	4872      	ldr	r0, [pc, #456]	; (8009c20 <HAL_RCC_OscConfig+0x33c>)
 8009a56:	0212      	lsls	r2, r2, #8
 8009a58:	4001      	ands	r1, r0
 8009a5a:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8009a5c:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a5e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8009a60:	6822      	ldr	r2, [r4, #0]
 8009a62:	438a      	bics	r2, r1
 8009a64:	4313      	orrs	r3, r2
 8009a66:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009a68:	f7ff fef2 	bl	8009850 <HAL_RCC_GetSysClockFreq>
 8009a6c:	68e3      	ldr	r3, [r4, #12]
 8009a6e:	4a67      	ldr	r2, [pc, #412]	; (8009c0c <HAL_RCC_OscConfig+0x328>)
 8009a70:	061b      	lsls	r3, r3, #24
 8009a72:	0f1b      	lsrs	r3, r3, #28
 8009a74:	5cd3      	ldrb	r3, [r2, r3]
 8009a76:	40d8      	lsrs	r0, r3
 8009a78:	4b65      	ldr	r3, [pc, #404]	; (8009c10 <HAL_RCC_OscConfig+0x32c>)
 8009a7a:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8009a7c:	4b65      	ldr	r3, [pc, #404]	; (8009c14 <HAL_RCC_OscConfig+0x330>)
 8009a7e:	6818      	ldr	r0, [r3, #0]
 8009a80:	f7ff fabc 	bl	8008ffc <HAL_InitTick>
      if(status != HAL_OK)
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d100      	bne.n	8009a8a <HAL_RCC_OscConfig+0x1a6>
 8009a88:	e744      	b.n	8009914 <HAL_RCC_OscConfig+0x30>
 8009a8a:	e731      	b.n	80098f0 <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d019      	beq.n	8009ac4 <HAL_RCC_OscConfig+0x1e0>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8009a90:	2109      	movs	r1, #9
 8009a92:	6822      	ldr	r2, [r4, #0]
 8009a94:	438a      	bics	r2, r1
 8009a96:	4313      	orrs	r3, r2
 8009a98:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009a9a:	f7ff faf3 	bl	8009084 <HAL_GetTick>
 8009a9e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009aa0:	2204      	movs	r2, #4
 8009aa2:	6823      	ldr	r3, [r4, #0]
 8009aa4:	4213      	tst	r3, r2
 8009aa6:	d007      	beq.n	8009ab8 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009aa8:	6862      	ldr	r2, [r4, #4]
 8009aaa:	692b      	ldr	r3, [r5, #16]
 8009aac:	495c      	ldr	r1, [pc, #368]	; (8009c20 <HAL_RCC_OscConfig+0x33c>)
 8009aae:	021b      	lsls	r3, r3, #8
 8009ab0:	400a      	ands	r2, r1
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	6063      	str	r3, [r4, #4]
 8009ab6:	e72d      	b.n	8009914 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ab8:	f7ff fae4 	bl	8009084 <HAL_GetTick>
 8009abc:	1bc0      	subs	r0, r0, r7
 8009abe:	2802      	cmp	r0, #2
 8009ac0:	d9ee      	bls.n	8009aa0 <HAL_RCC_OscConfig+0x1bc>
 8009ac2:	e787      	b.n	80099d4 <HAL_RCC_OscConfig+0xf0>
        __HAL_RCC_HSI_DISABLE();
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	6823      	ldr	r3, [r4, #0]
 8009ac8:	4393      	bics	r3, r2
 8009aca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009acc:	f7ff fada 	bl	8009084 <HAL_GetTick>
 8009ad0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009ad2:	2204      	movs	r2, #4
 8009ad4:	6823      	ldr	r3, [r4, #0]
 8009ad6:	4213      	tst	r3, r2
 8009ad8:	d100      	bne.n	8009adc <HAL_RCC_OscConfig+0x1f8>
 8009ada:	e71b      	b.n	8009914 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009adc:	f7ff fad2 	bl	8009084 <HAL_GetTick>
 8009ae0:	1bc0      	subs	r0, r0, r7
 8009ae2:	2802      	cmp	r0, #2
 8009ae4:	d9f5      	bls.n	8009ad2 <HAL_RCC_OscConfig+0x1ee>
 8009ae6:	e775      	b.n	80099d4 <HAL_RCC_OscConfig+0xf0>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009ae8:	69eb      	ldr	r3, [r5, #28]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d020      	beq.n	8009b30 <HAL_RCC_OscConfig+0x24c>
        __HAL_RCC_MSI_ENABLE();
 8009aee:	2380      	movs	r3, #128	; 0x80
 8009af0:	6822      	ldr	r2, [r4, #0]
 8009af2:	005b      	lsls	r3, r3, #1
 8009af4:	4313      	orrs	r3, r2
 8009af6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009af8:	f7ff fac4 	bl	8009084 <HAL_GetTick>
 8009afc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009afe:	2280      	movs	r2, #128	; 0x80
 8009b00:	6823      	ldr	r3, [r4, #0]
 8009b02:	0092      	lsls	r2, r2, #2
 8009b04:	4213      	tst	r3, r2
 8009b06:	d00d      	beq.n	8009b24 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009b08:	6863      	ldr	r3, [r4, #4]
 8009b0a:	4a3f      	ldr	r2, [pc, #252]	; (8009c08 <HAL_RCC_OscConfig+0x324>)
 8009b0c:	4013      	ands	r3, r2
 8009b0e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8009b10:	4313      	orrs	r3, r2
 8009b12:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009b14:	6862      	ldr	r2, [r4, #4]
 8009b16:	6a2b      	ldr	r3, [r5, #32]
 8009b18:	0212      	lsls	r2, r2, #8
 8009b1a:	061b      	lsls	r3, r3, #24
 8009b1c:	0a12      	lsrs	r2, r2, #8
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	6063      	str	r3, [r4, #4]
 8009b22:	e724      	b.n	800996e <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009b24:	f7ff faae 	bl	8009084 <HAL_GetTick>
 8009b28:	1bc0      	subs	r0, r0, r7
 8009b2a:	2802      	cmp	r0, #2
 8009b2c:	d9e7      	bls.n	8009afe <HAL_RCC_OscConfig+0x21a>
 8009b2e:	e751      	b.n	80099d4 <HAL_RCC_OscConfig+0xf0>
        __HAL_RCC_MSI_DISABLE();
 8009b30:	6823      	ldr	r3, [r4, #0]
 8009b32:	4a3c      	ldr	r2, [pc, #240]	; (8009c24 <HAL_RCC_OscConfig+0x340>)
 8009b34:	4013      	ands	r3, r2
 8009b36:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009b38:	f7ff faa4 	bl	8009084 <HAL_GetTick>
 8009b3c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009b3e:	2280      	movs	r2, #128	; 0x80
 8009b40:	6823      	ldr	r3, [r4, #0]
 8009b42:	0092      	lsls	r2, r2, #2
 8009b44:	4213      	tst	r3, r2
 8009b46:	d100      	bne.n	8009b4a <HAL_RCC_OscConfig+0x266>
 8009b48:	e711      	b.n	800996e <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009b4a:	f7ff fa9b 	bl	8009084 <HAL_GetTick>
 8009b4e:	1bc0      	subs	r0, r0, r7
 8009b50:	2802      	cmp	r0, #2
 8009b52:	d9f4      	bls.n	8009b3e <HAL_RCC_OscConfig+0x25a>
 8009b54:	e73e      	b.n	80099d4 <HAL_RCC_OscConfig+0xf0>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009b56:	696a      	ldr	r2, [r5, #20]
 8009b58:	2301      	movs	r3, #1
 8009b5a:	2a00      	cmp	r2, #0
 8009b5c:	d010      	beq.n	8009b80 <HAL_RCC_OscConfig+0x29c>
      __HAL_RCC_LSI_ENABLE();
 8009b5e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009b60:	4313      	orrs	r3, r2
 8009b62:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8009b64:	f7ff fa8e 	bl	8009084 <HAL_GetTick>
 8009b68:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b6a:	2202      	movs	r2, #2
 8009b6c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009b6e:	4213      	tst	r3, r2
 8009b70:	d000      	beq.n	8009b74 <HAL_RCC_OscConfig+0x290>
 8009b72:	e700      	b.n	8009976 <HAL_RCC_OscConfig+0x92>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b74:	f7ff fa86 	bl	8009084 <HAL_GetTick>
 8009b78:	1bc0      	subs	r0, r0, r7
 8009b7a:	2802      	cmp	r0, #2
 8009b7c:	d9f5      	bls.n	8009b6a <HAL_RCC_OscConfig+0x286>
 8009b7e:	e729      	b.n	80099d4 <HAL_RCC_OscConfig+0xf0>
      __HAL_RCC_LSI_DISABLE();
 8009b80:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009b82:	439a      	bics	r2, r3
 8009b84:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8009b86:	f7ff fa7d 	bl	8009084 <HAL_GetTick>
 8009b8a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b8c:	2202      	movs	r2, #2
 8009b8e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009b90:	4213      	tst	r3, r2
 8009b92:	d100      	bne.n	8009b96 <HAL_RCC_OscConfig+0x2b2>
 8009b94:	e6ef      	b.n	8009976 <HAL_RCC_OscConfig+0x92>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b96:	f7ff fa75 	bl	8009084 <HAL_GetTick>
 8009b9a:	1bc0      	subs	r0, r0, r7
 8009b9c:	2802      	cmp	r0, #2
 8009b9e:	d9f5      	bls.n	8009b8c <HAL_RCC_OscConfig+0x2a8>
 8009ba0:	e718      	b.n	80099d4 <HAL_RCC_OscConfig+0xf0>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ba2:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8009ba4:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ba6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009ba8:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8009baa:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009bac:	421a      	tst	r2, r3
 8009bae:	d104      	bne.n	8009bba <HAL_RCC_OscConfig+0x2d6>
      __HAL_RCC_PWR_CLK_ENABLE();
 8009bb0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bba:	2280      	movs	r2, #128	; 0x80
 8009bbc:	4f1a      	ldr	r7, [pc, #104]	; (8009c28 <HAL_RCC_OscConfig+0x344>)
 8009bbe:	0052      	lsls	r2, r2, #1
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	4213      	tst	r3, r2
 8009bc4:	d008      	beq.n	8009bd8 <HAL_RCC_OscConfig+0x2f4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009bc6:	2280      	movs	r2, #128	; 0x80
 8009bc8:	68ab      	ldr	r3, [r5, #8]
 8009bca:	0052      	lsls	r2, r2, #1
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d12d      	bne.n	8009c2c <HAL_RCC_OscConfig+0x348>
 8009bd0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	6523      	str	r3, [r4, #80]	; 0x50
 8009bd6:	e04e      	b.n	8009c76 <HAL_RCC_OscConfig+0x392>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009bd8:	2280      	movs	r2, #128	; 0x80
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	0052      	lsls	r2, r2, #1
 8009bde:	4313      	orrs	r3, r2
 8009be0:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8009be2:	f7ff fa4f 	bl	8009084 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009be6:	2380      	movs	r3, #128	; 0x80
 8009be8:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8009bea:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bec:	9303      	str	r3, [sp, #12]
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	9a03      	ldr	r2, [sp, #12]
 8009bf2:	4213      	tst	r3, r2
 8009bf4:	d1e7      	bne.n	8009bc6 <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bf6:	f7ff fa45 	bl	8009084 <HAL_GetTick>
 8009bfa:	9b02      	ldr	r3, [sp, #8]
 8009bfc:	1ac0      	subs	r0, r0, r3
 8009bfe:	2864      	cmp	r0, #100	; 0x64
 8009c00:	d9f5      	bls.n	8009bee <HAL_RCC_OscConfig+0x30a>
 8009c02:	e6e7      	b.n	80099d4 <HAL_RCC_OscConfig+0xf0>
 8009c04:	40021000 	.word	0x40021000
 8009c08:	ffff1fff 	.word	0xffff1fff
 8009c0c:	0800fe90 	.word	0x0800fe90
 8009c10:	20000118 	.word	0x20000118
 8009c14:	20000120 	.word	0x20000120
 8009c18:	fffeffff 	.word	0xfffeffff
 8009c1c:	fffbffff 	.word	0xfffbffff
 8009c20:	ffffe0ff 	.word	0xffffe0ff
 8009c24:	fffffeff 	.word	0xfffffeff
 8009c28:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d116      	bne.n	8009c5e <HAL_RCC_OscConfig+0x37a>
 8009c30:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009c32:	4a6c      	ldr	r2, [pc, #432]	; (8009de4 <HAL_RCC_OscConfig+0x500>)
 8009c34:	4013      	ands	r3, r2
 8009c36:	6523      	str	r3, [r4, #80]	; 0x50
 8009c38:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009c3a:	4a6b      	ldr	r2, [pc, #428]	; (8009de8 <HAL_RCC_OscConfig+0x504>)
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8009c40:	f7ff fa20 	bl	8009084 <HAL_GetTick>
 8009c44:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009c46:	2280      	movs	r2, #128	; 0x80
 8009c48:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009c4a:	0092      	lsls	r2, r2, #2
 8009c4c:	4213      	tst	r3, r2
 8009c4e:	d02a      	beq.n	8009ca6 <HAL_RCC_OscConfig+0x3c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c50:	f7ff fa18 	bl	8009084 <HAL_GetTick>
 8009c54:	4b65      	ldr	r3, [pc, #404]	; (8009dec <HAL_RCC_OscConfig+0x508>)
 8009c56:	1bc0      	subs	r0, r0, r7
 8009c58:	4298      	cmp	r0, r3
 8009c5a:	d9f4      	bls.n	8009c46 <HAL_RCC_OscConfig+0x362>
 8009c5c:	e6ba      	b.n	80099d4 <HAL_RCC_OscConfig+0xf0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c5e:	21a0      	movs	r1, #160	; 0xa0
 8009c60:	00c9      	lsls	r1, r1, #3
 8009c62:	428b      	cmp	r3, r1
 8009c64:	d10b      	bne.n	8009c7e <HAL_RCC_OscConfig+0x39a>
 8009c66:	2380      	movs	r3, #128	; 0x80
 8009c68:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009c6a:	00db      	lsls	r3, r3, #3
 8009c6c:	430b      	orrs	r3, r1
 8009c6e:	6523      	str	r3, [r4, #80]	; 0x50
 8009c70:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009c72:	431a      	orrs	r2, r3
 8009c74:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8009c76:	f7ff fa05 	bl	8009084 <HAL_GetTick>
 8009c7a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c7c:	e00e      	b.n	8009c9c <HAL_RCC_OscConfig+0x3b8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c7e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009c80:	4a58      	ldr	r2, [pc, #352]	; (8009de4 <HAL_RCC_OscConfig+0x500>)
 8009c82:	4013      	ands	r3, r2
 8009c84:	6523      	str	r3, [r4, #80]	; 0x50
 8009c86:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009c88:	4a57      	ldr	r2, [pc, #348]	; (8009de8 <HAL_RCC_OscConfig+0x504>)
 8009c8a:	4013      	ands	r3, r2
 8009c8c:	e7a2      	b.n	8009bd4 <HAL_RCC_OscConfig+0x2f0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c8e:	f7ff f9f9 	bl	8009084 <HAL_GetTick>
 8009c92:	4b56      	ldr	r3, [pc, #344]	; (8009dec <HAL_RCC_OscConfig+0x508>)
 8009c94:	1bc0      	subs	r0, r0, r7
 8009c96:	4298      	cmp	r0, r3
 8009c98:	d900      	bls.n	8009c9c <HAL_RCC_OscConfig+0x3b8>
 8009c9a:	e69b      	b.n	80099d4 <HAL_RCC_OscConfig+0xf0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c9c:	2280      	movs	r2, #128	; 0x80
 8009c9e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009ca0:	0092      	lsls	r2, r2, #2
 8009ca2:	4213      	tst	r3, r2
 8009ca4:	d0f3      	beq.n	8009c8e <HAL_RCC_OscConfig+0x3aa>
    if(pwrclkchanged == SET)
 8009ca6:	9b01      	ldr	r3, [sp, #4]
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d000      	beq.n	8009cae <HAL_RCC_OscConfig+0x3ca>
 8009cac:	e667      	b.n	800997e <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009cae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009cb0:	4a4f      	ldr	r2, [pc, #316]	; (8009df0 <HAL_RCC_OscConfig+0x50c>)
 8009cb2:	4013      	ands	r3, r2
 8009cb4:	63a3      	str	r3, [r4, #56]	; 0x38
 8009cb6:	e662      	b.n	800997e <HAL_RCC_OscConfig+0x9a>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009cb8:	69a9      	ldr	r1, [r5, #24]
 8009cba:	2301      	movs	r3, #1
 8009cbc:	4a4d      	ldr	r2, [pc, #308]	; (8009df4 <HAL_RCC_OscConfig+0x510>)
 8009cbe:	2900      	cmp	r1, #0
 8009cc0:	d018      	beq.n	8009cf4 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI48_ENABLE();
 8009cc2:	68a1      	ldr	r1, [r4, #8]
 8009cc4:	4319      	orrs	r1, r3
 8009cc6:	60a1      	str	r1, [r4, #8]
 8009cc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cca:	430b      	orrs	r3, r1
 8009ccc:	6363      	str	r3, [r4, #52]	; 0x34
 8009cce:	2380      	movs	r3, #128	; 0x80
 8009cd0:	6a11      	ldr	r1, [r2, #32]
 8009cd2:	019b      	lsls	r3, r3, #6
 8009cd4:	430b      	orrs	r3, r1
 8009cd6:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8009cd8:	f7ff f9d4 	bl	8009084 <HAL_GetTick>
 8009cdc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009cde:	2202      	movs	r2, #2
 8009ce0:	68a3      	ldr	r3, [r4, #8]
 8009ce2:	4213      	tst	r3, r2
 8009ce4:	d000      	beq.n	8009ce8 <HAL_RCC_OscConfig+0x404>
 8009ce6:	e64e      	b.n	8009986 <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009ce8:	f7ff f9cc 	bl	8009084 <HAL_GetTick>
 8009cec:	1bc0      	subs	r0, r0, r7
 8009cee:	2802      	cmp	r0, #2
 8009cf0:	d9f5      	bls.n	8009cde <HAL_RCC_OscConfig+0x3fa>
 8009cf2:	e66f      	b.n	80099d4 <HAL_RCC_OscConfig+0xf0>
        __HAL_RCC_HSI48_DISABLE();
 8009cf4:	68a1      	ldr	r1, [r4, #8]
 8009cf6:	4399      	bics	r1, r3
 8009cf8:	60a1      	str	r1, [r4, #8]
 8009cfa:	6a13      	ldr	r3, [r2, #32]
 8009cfc:	493e      	ldr	r1, [pc, #248]	; (8009df8 <HAL_RCC_OscConfig+0x514>)
 8009cfe:	400b      	ands	r3, r1
 8009d00:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8009d02:	f7ff f9bf 	bl	8009084 <HAL_GetTick>
 8009d06:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009d08:	2202      	movs	r2, #2
 8009d0a:	68a3      	ldr	r3, [r4, #8]
 8009d0c:	4213      	tst	r3, r2
 8009d0e:	d100      	bne.n	8009d12 <HAL_RCC_OscConfig+0x42e>
 8009d10:	e639      	b.n	8009986 <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d12:	f7ff f9b7 	bl	8009084 <HAL_GetTick>
 8009d16:	1bc0      	subs	r0, r0, r7
 8009d18:	2802      	cmp	r0, #2
 8009d1a:	d9f5      	bls.n	8009d08 <HAL_RCC_OscConfig+0x424>
 8009d1c:	e65a      	b.n	80099d4 <HAL_RCC_OscConfig+0xf0>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009d1e:	2e0c      	cmp	r6, #12
 8009d20:	d043      	beq.n	8009daa <HAL_RCC_OscConfig+0x4c6>
 8009d22:	4a36      	ldr	r2, [pc, #216]	; (8009dfc <HAL_RCC_OscConfig+0x518>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	d12e      	bne.n	8009d86 <HAL_RCC_OscConfig+0x4a2>
        __HAL_RCC_PLL_DISABLE();
 8009d28:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009d2a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009d30:	f7ff f9a8 	bl	8009084 <HAL_GetTick>
 8009d34:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009d36:	04b6      	lsls	r6, r6, #18
 8009d38:	6823      	ldr	r3, [r4, #0]
 8009d3a:	4233      	tst	r3, r6
 8009d3c:	d11d      	bne.n	8009d7a <HAL_RCC_OscConfig+0x496>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009d3e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8009d40:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009d42:	68e2      	ldr	r2, [r4, #12]
 8009d44:	430b      	orrs	r3, r1
 8009d46:	492e      	ldr	r1, [pc, #184]	; (8009e00 <HAL_RCC_OscConfig+0x51c>)
 8009d48:	400a      	ands	r2, r1
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8009d4e:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009d50:	4313      	orrs	r3, r2
 8009d52:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8009d54:	2380      	movs	r3, #128	; 0x80
 8009d56:	6822      	ldr	r2, [r4, #0]
 8009d58:	045b      	lsls	r3, r3, #17
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009d5e:	f7ff f991 	bl	8009084 <HAL_GetTick>
 8009d62:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8009d64:	04ad      	lsls	r5, r5, #18
 8009d66:	6823      	ldr	r3, [r4, #0]
 8009d68:	422b      	tst	r3, r5
 8009d6a:	d000      	beq.n	8009d6e <HAL_RCC_OscConfig+0x48a>
 8009d6c:	e60f      	b.n	800998e <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d6e:	f7ff f989 	bl	8009084 <HAL_GetTick>
 8009d72:	1b80      	subs	r0, r0, r6
 8009d74:	2802      	cmp	r0, #2
 8009d76:	d9f6      	bls.n	8009d66 <HAL_RCC_OscConfig+0x482>
 8009d78:	e62c      	b.n	80099d4 <HAL_RCC_OscConfig+0xf0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d7a:	f7ff f983 	bl	8009084 <HAL_GetTick>
 8009d7e:	1bc0      	subs	r0, r0, r7
 8009d80:	2802      	cmp	r0, #2
 8009d82:	d9d9      	bls.n	8009d38 <HAL_RCC_OscConfig+0x454>
 8009d84:	e626      	b.n	80099d4 <HAL_RCC_OscConfig+0xf0>
        __HAL_RCC_PLL_DISABLE();
 8009d86:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009d88:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8009d8a:	4013      	ands	r3, r2
 8009d8c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009d8e:	f7ff f979 	bl	8009084 <HAL_GetTick>
 8009d92:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009d94:	04ad      	lsls	r5, r5, #18
 8009d96:	6823      	ldr	r3, [r4, #0]
 8009d98:	422b      	tst	r3, r5
 8009d9a:	d100      	bne.n	8009d9e <HAL_RCC_OscConfig+0x4ba>
 8009d9c:	e5f7      	b.n	800998e <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d9e:	f7ff f971 	bl	8009084 <HAL_GetTick>
 8009da2:	1b80      	subs	r0, r0, r6
 8009da4:	2802      	cmp	r0, #2
 8009da6:	d9f6      	bls.n	8009d96 <HAL_RCC_OscConfig+0x4b2>
 8009da8:	e614      	b.n	80099d4 <HAL_RCC_OscConfig+0xf0>
        return HAL_ERROR;
 8009daa:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d100      	bne.n	8009db2 <HAL_RCC_OscConfig+0x4ce>
 8009db0:	e59e      	b.n	80098f0 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009db2:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8009db4:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009db6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8009db8:	0252      	lsls	r2, r2, #9
 8009dba:	401a      	ands	r2, r3
        return HAL_ERROR;
 8009dbc:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009dbe:	428a      	cmp	r2, r1
 8009dc0:	d000      	beq.n	8009dc4 <HAL_RCC_OscConfig+0x4e0>
 8009dc2:	e595      	b.n	80098f0 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009dc4:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009dc6:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009dc8:	0392      	lsls	r2, r2, #14
 8009dca:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009dcc:	428a      	cmp	r2, r1
 8009dce:	d000      	beq.n	8009dd2 <HAL_RCC_OscConfig+0x4ee>
 8009dd0:	e58e      	b.n	80098f0 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8009dd2:	20c0      	movs	r0, #192	; 0xc0
 8009dd4:	0400      	lsls	r0, r0, #16
 8009dd6:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009dd8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8009dda:	1a18      	subs	r0, r3, r0
 8009ddc:	1e43      	subs	r3, r0, #1
 8009dde:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8009de0:	b2c0      	uxtb	r0, r0
 8009de2:	e585      	b.n	80098f0 <HAL_RCC_OscConfig+0xc>
 8009de4:	fffffeff 	.word	0xfffffeff
 8009de8:	fffffbff 	.word	0xfffffbff
 8009dec:	00001388 	.word	0x00001388
 8009df0:	efffffff 	.word	0xefffffff
 8009df4:	40010000 	.word	0x40010000
 8009df8:	ffffdfff 	.word	0xffffdfff
 8009dfc:	feffffff 	.word	0xfeffffff
 8009e00:	ff02ffff 	.word	0xff02ffff

08009e04 <HAL_RCC_ClockConfig>:
{
 8009e04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e06:	1e06      	subs	r6, r0, #0
 8009e08:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8009e0a:	d101      	bne.n	8009e10 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8009e0c:	2001      	movs	r0, #1
}
 8009e0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009e10:	2501      	movs	r5, #1
 8009e12:	4c5b      	ldr	r4, [pc, #364]	; (8009f80 <HAL_RCC_ClockConfig+0x17c>)
 8009e14:	9a01      	ldr	r2, [sp, #4]
 8009e16:	6823      	ldr	r3, [r4, #0]
 8009e18:	402b      	ands	r3, r5
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d331      	bcc.n	8009e82 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e1e:	6832      	ldr	r2, [r6, #0]
 8009e20:	0793      	lsls	r3, r2, #30
 8009e22:	d443      	bmi.n	8009eac <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e24:	07d3      	lsls	r3, r2, #31
 8009e26:	d449      	bmi.n	8009ebc <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009e28:	2501      	movs	r5, #1
 8009e2a:	6823      	ldr	r3, [r4, #0]
 8009e2c:	9a01      	ldr	r2, [sp, #4]
 8009e2e:	402b      	ands	r3, r5
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d909      	bls.n	8009e48 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e34:	6823      	ldr	r3, [r4, #0]
 8009e36:	43ab      	bics	r3, r5
 8009e38:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8009e3a:	f7ff f923 	bl	8009084 <HAL_GetTick>
 8009e3e:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e40:	6823      	ldr	r3, [r4, #0]
 8009e42:	422b      	tst	r3, r5
 8009e44:	d000      	beq.n	8009e48 <HAL_RCC_ClockConfig+0x44>
 8009e46:	e08c      	b.n	8009f62 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e48:	6832      	ldr	r2, [r6, #0]
 8009e4a:	4c4e      	ldr	r4, [pc, #312]	; (8009f84 <HAL_RCC_ClockConfig+0x180>)
 8009e4c:	0753      	lsls	r3, r2, #29
 8009e4e:	d500      	bpl.n	8009e52 <HAL_RCC_ClockConfig+0x4e>
 8009e50:	e08f      	b.n	8009f72 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e52:	0713      	lsls	r3, r2, #28
 8009e54:	d506      	bpl.n	8009e64 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009e56:	68e2      	ldr	r2, [r4, #12]
 8009e58:	6933      	ldr	r3, [r6, #16]
 8009e5a:	494b      	ldr	r1, [pc, #300]	; (8009f88 <HAL_RCC_ClockConfig+0x184>)
 8009e5c:	00db      	lsls	r3, r3, #3
 8009e5e:	400a      	ands	r2, r1
 8009e60:	4313      	orrs	r3, r2
 8009e62:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009e64:	f7ff fcf4 	bl	8009850 <HAL_RCC_GetSysClockFreq>
 8009e68:	68e3      	ldr	r3, [r4, #12]
 8009e6a:	4a48      	ldr	r2, [pc, #288]	; (8009f8c <HAL_RCC_ClockConfig+0x188>)
 8009e6c:	061b      	lsls	r3, r3, #24
 8009e6e:	0f1b      	lsrs	r3, r3, #28
 8009e70:	5cd3      	ldrb	r3, [r2, r3]
 8009e72:	40d8      	lsrs	r0, r3
 8009e74:	4b46      	ldr	r3, [pc, #280]	; (8009f90 <HAL_RCC_ClockConfig+0x18c>)
 8009e76:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8009e78:	4b46      	ldr	r3, [pc, #280]	; (8009f94 <HAL_RCC_ClockConfig+0x190>)
 8009e7a:	6818      	ldr	r0, [r3, #0]
 8009e7c:	f7ff f8be 	bl	8008ffc <HAL_InitTick>
 8009e80:	e7c5      	b.n	8009e0e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e82:	6823      	ldr	r3, [r4, #0]
 8009e84:	9a01      	ldr	r2, [sp, #4]
 8009e86:	43ab      	bics	r3, r5
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8009e8c:	f7ff f8fa 	bl	8009084 <HAL_GetTick>
 8009e90:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e92:	6823      	ldr	r3, [r4, #0]
 8009e94:	9a01      	ldr	r2, [sp, #4]
 8009e96:	402b      	ands	r3, r5
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d0c0      	beq.n	8009e1e <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e9c:	f7ff f8f2 	bl	8009084 <HAL_GetTick>
 8009ea0:	4b3d      	ldr	r3, [pc, #244]	; (8009f98 <HAL_RCC_ClockConfig+0x194>)
 8009ea2:	1bc0      	subs	r0, r0, r7
 8009ea4:	4298      	cmp	r0, r3
 8009ea6:	d9f4      	bls.n	8009e92 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8009ea8:	2003      	movs	r0, #3
 8009eaa:	e7b0      	b.n	8009e0e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009eac:	20f0      	movs	r0, #240	; 0xf0
 8009eae:	4935      	ldr	r1, [pc, #212]	; (8009f84 <HAL_RCC_ClockConfig+0x180>)
 8009eb0:	68cb      	ldr	r3, [r1, #12]
 8009eb2:	4383      	bics	r3, r0
 8009eb4:	68b0      	ldr	r0, [r6, #8]
 8009eb6:	4303      	orrs	r3, r0
 8009eb8:	60cb      	str	r3, [r1, #12]
 8009eba:	e7b3      	b.n	8009e24 <HAL_RCC_ClockConfig+0x20>
 8009ebc:	4d31      	ldr	r5, [pc, #196]	; (8009f84 <HAL_RCC_ClockConfig+0x180>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009ebe:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ec0:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009ec2:	2a02      	cmp	r2, #2
 8009ec4:	d118      	bne.n	8009ef8 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ec6:	039b      	lsls	r3, r3, #14
 8009ec8:	d5a0      	bpl.n	8009e0c <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009eca:	2103      	movs	r1, #3
 8009ecc:	68eb      	ldr	r3, [r5, #12]
 8009ece:	438b      	bics	r3, r1
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8009ed4:	f7ff f8d6 	bl	8009084 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009ed8:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8009eda:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	d118      	bne.n	8009f12 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009ee0:	220c      	movs	r2, #12
 8009ee2:	68eb      	ldr	r3, [r5, #12]
 8009ee4:	4013      	ands	r3, r2
 8009ee6:	2b08      	cmp	r3, #8
 8009ee8:	d09e      	beq.n	8009e28 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009eea:	f7ff f8cb 	bl	8009084 <HAL_GetTick>
 8009eee:	4b2a      	ldr	r3, [pc, #168]	; (8009f98 <HAL_RCC_ClockConfig+0x194>)
 8009ef0:	1bc0      	subs	r0, r0, r7
 8009ef2:	4298      	cmp	r0, r3
 8009ef4:	d9f4      	bls.n	8009ee0 <HAL_RCC_ClockConfig+0xdc>
 8009ef6:	e7d7      	b.n	8009ea8 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009ef8:	2a03      	cmp	r2, #3
 8009efa:	d102      	bne.n	8009f02 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009efc:	019b      	lsls	r3, r3, #6
 8009efe:	d4e4      	bmi.n	8009eca <HAL_RCC_ClockConfig+0xc6>
 8009f00:	e784      	b.n	8009e0c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009f02:	2a01      	cmp	r2, #1
 8009f04:	d102      	bne.n	8009f0c <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f06:	075b      	lsls	r3, r3, #29
 8009f08:	d4df      	bmi.n	8009eca <HAL_RCC_ClockConfig+0xc6>
 8009f0a:	e77f      	b.n	8009e0c <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009f0c:	059b      	lsls	r3, r3, #22
 8009f0e:	d4dc      	bmi.n	8009eca <HAL_RCC_ClockConfig+0xc6>
 8009f10:	e77c      	b.n	8009e0c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009f12:	2b03      	cmp	r3, #3
 8009f14:	d10b      	bne.n	8009f2e <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009f16:	220c      	movs	r2, #12
 8009f18:	68eb      	ldr	r3, [r5, #12]
 8009f1a:	4013      	ands	r3, r2
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d083      	beq.n	8009e28 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f20:	f7ff f8b0 	bl	8009084 <HAL_GetTick>
 8009f24:	4b1c      	ldr	r3, [pc, #112]	; (8009f98 <HAL_RCC_ClockConfig+0x194>)
 8009f26:	1bc0      	subs	r0, r0, r7
 8009f28:	4298      	cmp	r0, r3
 8009f2a:	d9f4      	bls.n	8009f16 <HAL_RCC_ClockConfig+0x112>
 8009f2c:	e7bc      	b.n	8009ea8 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d011      	beq.n	8009f56 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009f32:	220c      	movs	r2, #12
 8009f34:	68eb      	ldr	r3, [r5, #12]
 8009f36:	4213      	tst	r3, r2
 8009f38:	d100      	bne.n	8009f3c <HAL_RCC_ClockConfig+0x138>
 8009f3a:	e775      	b.n	8009e28 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f3c:	f7ff f8a2 	bl	8009084 <HAL_GetTick>
 8009f40:	4b15      	ldr	r3, [pc, #84]	; (8009f98 <HAL_RCC_ClockConfig+0x194>)
 8009f42:	1bc0      	subs	r0, r0, r7
 8009f44:	4298      	cmp	r0, r3
 8009f46:	d9f4      	bls.n	8009f32 <HAL_RCC_ClockConfig+0x12e>
 8009f48:	e7ae      	b.n	8009ea8 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f4a:	f7ff f89b 	bl	8009084 <HAL_GetTick>
 8009f4e:	4b12      	ldr	r3, [pc, #72]	; (8009f98 <HAL_RCC_ClockConfig+0x194>)
 8009f50:	1bc0      	subs	r0, r0, r7
 8009f52:	4298      	cmp	r0, r3
 8009f54:	d8a8      	bhi.n	8009ea8 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009f56:	220c      	movs	r2, #12
 8009f58:	68eb      	ldr	r3, [r5, #12]
 8009f5a:	4013      	ands	r3, r2
 8009f5c:	2b04      	cmp	r3, #4
 8009f5e:	d1f4      	bne.n	8009f4a <HAL_RCC_ClockConfig+0x146>
 8009f60:	e762      	b.n	8009e28 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f62:	f7ff f88f 	bl	8009084 <HAL_GetTick>
 8009f66:	4b0c      	ldr	r3, [pc, #48]	; (8009f98 <HAL_RCC_ClockConfig+0x194>)
 8009f68:	1bc0      	subs	r0, r0, r7
 8009f6a:	4298      	cmp	r0, r3
 8009f6c:	d800      	bhi.n	8009f70 <HAL_RCC_ClockConfig+0x16c>
 8009f6e:	e767      	b.n	8009e40 <HAL_RCC_ClockConfig+0x3c>
 8009f70:	e79a      	b.n	8009ea8 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009f72:	68e3      	ldr	r3, [r4, #12]
 8009f74:	4909      	ldr	r1, [pc, #36]	; (8009f9c <HAL_RCC_ClockConfig+0x198>)
 8009f76:	400b      	ands	r3, r1
 8009f78:	68f1      	ldr	r1, [r6, #12]
 8009f7a:	430b      	orrs	r3, r1
 8009f7c:	60e3      	str	r3, [r4, #12]
 8009f7e:	e768      	b.n	8009e52 <HAL_RCC_ClockConfig+0x4e>
 8009f80:	40022000 	.word	0x40022000
 8009f84:	40021000 	.word	0x40021000
 8009f88:	ffffc7ff 	.word	0xffffc7ff
 8009f8c:	0800fe90 	.word	0x0800fe90
 8009f90:	20000118 	.word	0x20000118
 8009f94:	20000120 	.word	0x20000120
 8009f98:	00001388 	.word	0x00001388
 8009f9c:	fffff8ff 	.word	0xfffff8ff

08009fa0 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8009fa0:	4b01      	ldr	r3, [pc, #4]	; (8009fa8 <HAL_RCC_GetHCLKFreq+0x8>)
 8009fa2:	6818      	ldr	r0, [r3, #0]
}
 8009fa4:	4770      	bx	lr
 8009fa6:	46c0      	nop			; (mov r8, r8)
 8009fa8:	20000118 	.word	0x20000118

08009fac <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009fac:	4b04      	ldr	r3, [pc, #16]	; (8009fc0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8009fae:	4a05      	ldr	r2, [pc, #20]	; (8009fc4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	055b      	lsls	r3, r3, #21
 8009fb4:	0f5b      	lsrs	r3, r3, #29
 8009fb6:	5cd3      	ldrb	r3, [r2, r3]
 8009fb8:	4a03      	ldr	r2, [pc, #12]	; (8009fc8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009fba:	6810      	ldr	r0, [r2, #0]
 8009fbc:	40d8      	lsrs	r0, r3
}
 8009fbe:	4770      	bx	lr
 8009fc0:	40021000 	.word	0x40021000
 8009fc4:	0800fea0 	.word	0x0800fea0
 8009fc8:	20000118 	.word	0x20000118

08009fcc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009fcc:	4b04      	ldr	r3, [pc, #16]	; (8009fe0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8009fce:	4a05      	ldr	r2, [pc, #20]	; (8009fe4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	049b      	lsls	r3, r3, #18
 8009fd4:	0f5b      	lsrs	r3, r3, #29
 8009fd6:	5cd3      	ldrb	r3, [r2, r3]
 8009fd8:	4a03      	ldr	r2, [pc, #12]	; (8009fe8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009fda:	6810      	ldr	r0, [r2, #0]
 8009fdc:	40d8      	lsrs	r0, r3
}
 8009fde:	4770      	bx	lr
 8009fe0:	40021000 	.word	0x40021000
 8009fe4:	0800fea0 	.word	0x0800fea0
 8009fe8:	20000118 	.word	0x20000118

08009fec <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8009fec:	2382      	movs	r3, #130	; 0x82
{
 8009fee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009ff0:	6802      	ldr	r2, [r0, #0]
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8009ff2:	011b      	lsls	r3, r3, #4
{
 8009ff4:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009ff6:	421a      	tst	r2, r3
 8009ff8:	d048      	beq.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0xa0>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ffa:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8009ffc:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ffe:	4c65      	ldr	r4, [pc, #404]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800a000:	055b      	lsls	r3, r3, #21
 800a002:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 800a004:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a006:	421a      	tst	r2, r3
 800a008:	d104      	bne.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x28>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a00a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a00c:	4313      	orrs	r3, r2
 800a00e:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 800a010:	2301      	movs	r3, #1
 800a012:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a014:	2780      	movs	r7, #128	; 0x80
 800a016:	4e60      	ldr	r6, [pc, #384]	; (800a198 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a018:	007f      	lsls	r7, r7, #1
 800a01a:	6833      	ldr	r3, [r6, #0]
 800a01c:	423b      	tst	r3, r7
 800a01e:	d077      	beq.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x124>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800a020:	6869      	ldr	r1, [r5, #4]
 800a022:	23c0      	movs	r3, #192	; 0xc0
 800a024:	0008      	movs	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800a026:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800a028:	039b      	lsls	r3, r3, #14
 800a02a:	4018      	ands	r0, r3
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800a02c:	401a      	ands	r2, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800a02e:	4290      	cmp	r0, r2
 800a030:	d103      	bne.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0x4e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800a032:	68aa      	ldr	r2, [r5, #8]
 800a034:	4013      	ands	r3, r2
 800a036:	4298      	cmp	r0, r3
 800a038:	d009      	beq.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800a03a:	23c0      	movs	r3, #192	; 0xc0
 800a03c:	000a      	movs	r2, r1
 800a03e:	029b      	lsls	r3, r3, #10
 800a040:	401a      	ands	r2, r3
 800a042:	429a      	cmp	r2, r3
 800a044:	d103      	bne.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x62>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a046:	6823      	ldr	r3, [r4, #0]
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800a048:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a04a:	039b      	lsls	r3, r3, #14
 800a04c:	d471      	bmi.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x146>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800a04e:	22c0      	movs	r2, #192	; 0xc0
 800a050:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a052:	0292      	lsls	r2, r2, #10
 800a054:	4013      	ands	r3, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800a056:	d000      	beq.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800a058:	e06c      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x148>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a05a:	6869      	ldr	r1, [r5, #4]
 800a05c:	23c0      	movs	r3, #192	; 0xc0
 800a05e:	000a      	movs	r2, r1
 800a060:	029b      	lsls	r3, r3, #10
 800a062:	401a      	ands	r2, r3
 800a064:	429a      	cmp	r2, r3
 800a066:	d107      	bne.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 800a068:	6823      	ldr	r3, [r4, #0]
 800a06a:	484c      	ldr	r0, [pc, #304]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a06c:	4003      	ands	r3, r0
 800a06e:	20c0      	movs	r0, #192	; 0xc0
 800a070:	0380      	lsls	r0, r0, #14
 800a072:	4001      	ands	r1, r0
 800a074:	430b      	orrs	r3, r1
 800a076:	6023      	str	r3, [r4, #0]
 800a078:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a07a:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a07c:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a07e:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 800a080:	2b01      	cmp	r3, #1
 800a082:	d103      	bne.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a084:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a086:	4a46      	ldr	r2, [pc, #280]	; (800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a088:	4013      	ands	r3, r2
 800a08a:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a08c:	682b      	ldr	r3, [r5, #0]
 800a08e:	07da      	lsls	r2, r3, #31
 800a090:	d506      	bpl.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a092:	2003      	movs	r0, #3
 800a094:	493f      	ldr	r1, [pc, #252]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800a096:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800a098:	4382      	bics	r2, r0
 800a09a:	68e8      	ldr	r0, [r5, #12]
 800a09c:	4302      	orrs	r2, r0
 800a09e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a0a0:	079a      	lsls	r2, r3, #30
 800a0a2:	d506      	bpl.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a0a4:	200c      	movs	r0, #12
 800a0a6:	493b      	ldr	r1, [pc, #236]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800a0a8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800a0aa:	4382      	bics	r2, r0
 800a0ac:	6928      	ldr	r0, [r5, #16]
 800a0ae:	4302      	orrs	r2, r0
 800a0b0:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a0b2:	075a      	lsls	r2, r3, #29
 800a0b4:	d506      	bpl.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a0b6:	4937      	ldr	r1, [pc, #220]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800a0b8:	483a      	ldr	r0, [pc, #232]	; (800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a0ba:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800a0bc:	4002      	ands	r2, r0
 800a0be:	6968      	ldr	r0, [r5, #20]
 800a0c0:	4302      	orrs	r2, r0
 800a0c2:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a0c4:	071a      	lsls	r2, r3, #28
 800a0c6:	d506      	bpl.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a0c8:	4932      	ldr	r1, [pc, #200]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800a0ca:	4837      	ldr	r0, [pc, #220]	; (800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a0cc:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800a0ce:	4002      	ands	r2, r0
 800a0d0:	69a8      	ldr	r0, [r5, #24]
 800a0d2:	4302      	orrs	r2, r0
 800a0d4:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a0d6:	05da      	lsls	r2, r3, #23
 800a0d8:	d506      	bpl.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a0da:	492e      	ldr	r1, [pc, #184]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800a0dc:	4833      	ldr	r0, [pc, #204]	; (800a1ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a0de:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800a0e0:	4002      	ands	r2, r0
 800a0e2:	69e8      	ldr	r0, [r5, #28]
 800a0e4:	4302      	orrs	r2, r0
 800a0e6:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a0e8:	065a      	lsls	r2, r3, #25
 800a0ea:	d506      	bpl.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a0ec:	4929      	ldr	r1, [pc, #164]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800a0ee:	4830      	ldr	r0, [pc, #192]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a0f0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800a0f2:	4002      	ands	r2, r0
 800a0f4:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a0f6:	4302      	orrs	r2, r0
 800a0f8:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 800a0fa:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a0fc:	061b      	lsls	r3, r3, #24
 800a0fe:	d518      	bpl.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x146>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800a100:	4a24      	ldr	r2, [pc, #144]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800a102:	492c      	ldr	r1, [pc, #176]	; (800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a104:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800a106:	400b      	ands	r3, r1
 800a108:	6a29      	ldr	r1, [r5, #32]
 800a10a:	430b      	orrs	r3, r1
 800a10c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a10e:	e010      	b.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x146>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a110:	6833      	ldr	r3, [r6, #0]
 800a112:	433b      	orrs	r3, r7
 800a114:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800a116:	f7fe ffb5 	bl	8009084 <HAL_GetTick>
 800a11a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a11c:	6833      	ldr	r3, [r6, #0]
 800a11e:	423b      	tst	r3, r7
 800a120:	d000      	beq.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x138>
 800a122:	e77d      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a124:	f7fe ffae 	bl	8009084 <HAL_GetTick>
 800a128:	9b01      	ldr	r3, [sp, #4]
 800a12a:	1ac0      	subs	r0, r0, r3
 800a12c:	2864      	cmp	r0, #100	; 0x64
 800a12e:	d9f5      	bls.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x130>
          return HAL_TIMEOUT;
 800a130:	2003      	movs	r0, #3
}
 800a132:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800a134:	4011      	ands	r1, r2
 800a136:	428b      	cmp	r3, r1
 800a138:	d002      	beq.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x154>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800a13a:	6829      	ldr	r1, [r5, #0]
 800a13c:	0689      	lsls	r1, r1, #26
 800a13e:	d408      	bmi.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x166>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800a140:	68a9      	ldr	r1, [r5, #8]
 800a142:	400a      	ands	r2, r1
 800a144:	429a      	cmp	r2, r3
 800a146:	d100      	bne.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800a148:	e787      	b.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x6e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800a14a:	682b      	ldr	r3, [r5, #0]
 800a14c:	051b      	lsls	r3, r3, #20
 800a14e:	d400      	bmi.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800a150:	e783      	b.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_BACKUPRESET_FORCE();
 800a152:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800a154:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 800a156:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a158:	0312      	lsls	r2, r2, #12
 800a15a:	4302      	orrs	r2, r0
 800a15c:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a15e:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800a160:	4b12      	ldr	r3, [pc, #72]	; (800a1ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a162:	4815      	ldr	r0, [pc, #84]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800a164:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a166:	4002      	ands	r2, r0
 800a168:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 800a16a:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800a16c:	05cb      	lsls	r3, r1, #23
 800a16e:	d400      	bmi.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800a170:	e773      	b.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        tickstart = HAL_GetTick();
 800a172:	f7fe ff87 	bl	8009084 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a176:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800a178:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a17a:	00bf      	lsls	r7, r7, #2
 800a17c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a17e:	423b      	tst	r3, r7
 800a180:	d000      	beq.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800a182:	e76a      	b.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a184:	f7fe ff7e 	bl	8009084 <HAL_GetTick>
 800a188:	4b0c      	ldr	r3, [pc, #48]	; (800a1bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a18a:	1b80      	subs	r0, r0, r6
 800a18c:	4298      	cmp	r0, r3
 800a18e:	d9f5      	bls.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x190>
 800a190:	e7ce      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x144>
 800a192:	46c0      	nop			; (mov r8, r8)
 800a194:	40021000 	.word	0x40021000
 800a198:	40007000 	.word	0x40007000
 800a19c:	ffcfffff 	.word	0xffcfffff
 800a1a0:	efffffff 	.word	0xefffffff
 800a1a4:	fffff3ff 	.word	0xfffff3ff
 800a1a8:	ffffcfff 	.word	0xffffcfff
 800a1ac:	fffcffff 	.word	0xfffcffff
 800a1b0:	fbffffff 	.word	0xfbffffff
 800a1b4:	fff3ffff 	.word	0xfff3ffff
 800a1b8:	fff7ffff 	.word	0xfff7ffff
 800a1bc:	00001388 	.word	0x00001388

0800a1c0 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800a1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1c2:	001d      	movs	r5, r3
 800a1c4:	b085      	sub	sp, #20
 800a1c6:	0016      	movs	r6, r2
 800a1c8:	000f      	movs	r7, r1
 800a1ca:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a1cc:	f7fe ff5a 	bl	8009084 <HAL_GetTick>
 800a1d0:	19ad      	adds	r5, r5, r6
 800a1d2:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800a1d4:	f7fe ff56 	bl	8009084 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a1d8:	4b25      	ldr	r3, [pc, #148]	; (800a270 <SPI_WaitFlagStateUntilTimeout.constprop.7+0xb0>)
  tmp_tickstart = HAL_GetTick();
 800a1da:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	015b      	lsls	r3, r3, #5
 800a1e0:	0d1b      	lsrs	r3, r3, #20
 800a1e2:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a1e4:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 800a1e6:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a1e8:	6893      	ldr	r3, [r2, #8]
 800a1ea:	403b      	ands	r3, r7
 800a1ec:	429f      	cmp	r7, r3
 800a1ee:	d001      	beq.n	800a1f4 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x34>
    }
  }

  return HAL_OK;
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	e032      	b.n	800a25a <SPI_WaitFlagStateUntilTimeout.constprop.7+0x9a>
    if (Timeout != HAL_MAX_DELAY)
 800a1f4:	1c73      	adds	r3, r6, #1
 800a1f6:	d0f7      	beq.n	800a1e8 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a1f8:	f7fe ff44 	bl	8009084 <HAL_GetTick>
 800a1fc:	9b01      	ldr	r3, [sp, #4]
 800a1fe:	1ac0      	subs	r0, r0, r3
 800a200:	42a8      	cmp	r0, r5
 800a202:	d32c      	bcc.n	800a25e <SPI_WaitFlagStateUntilTimeout.constprop.7+0x9e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a204:	21e0      	movs	r1, #224	; 0xe0
 800a206:	6823      	ldr	r3, [r4, #0]
 800a208:	685a      	ldr	r2, [r3, #4]
 800a20a:	438a      	bics	r2, r1
 800a20c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a20e:	2282      	movs	r2, #130	; 0x82
 800a210:	6861      	ldr	r1, [r4, #4]
 800a212:	0052      	lsls	r2, r2, #1
 800a214:	4291      	cmp	r1, r2
 800a216:	d10c      	bne.n	800a232 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x72>
 800a218:	2180      	movs	r1, #128	; 0x80
 800a21a:	68a2      	ldr	r2, [r4, #8]
 800a21c:	0209      	lsls	r1, r1, #8
 800a21e:	428a      	cmp	r2, r1
 800a220:	d003      	beq.n	800a22a <SPI_WaitFlagStateUntilTimeout.constprop.7+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a222:	2180      	movs	r1, #128	; 0x80
 800a224:	00c9      	lsls	r1, r1, #3
 800a226:	428a      	cmp	r2, r1
 800a228:	d103      	bne.n	800a232 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x72>
          __HAL_SPI_DISABLE(hspi);
 800a22a:	2140      	movs	r1, #64	; 0x40
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	438a      	bics	r2, r1
 800a230:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a232:	2180      	movs	r1, #128	; 0x80
 800a234:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a236:	0189      	lsls	r1, r1, #6
 800a238:	428a      	cmp	r2, r1
 800a23a:	d106      	bne.n	800a24a <SPI_WaitFlagStateUntilTimeout.constprop.7+0x8a>
          SPI_RESET_CRC(hspi);
 800a23c:	6819      	ldr	r1, [r3, #0]
 800a23e:	480d      	ldr	r0, [pc, #52]	; (800a274 <SPI_WaitFlagStateUntilTimeout.constprop.7+0xb4>)
 800a240:	4001      	ands	r1, r0
 800a242:	6019      	str	r1, [r3, #0]
 800a244:	6819      	ldr	r1, [r3, #0]
 800a246:	430a      	orrs	r2, r1
 800a248:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800a24a:	0023      	movs	r3, r4
 800a24c:	2201      	movs	r2, #1
 800a24e:	3351      	adds	r3, #81	; 0x51
 800a250:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 800a252:	2300      	movs	r3, #0
 800a254:	2003      	movs	r0, #3
 800a256:	3450      	adds	r4, #80	; 0x50
 800a258:	7023      	strb	r3, [r4, #0]
}
 800a25a:	b005      	add	sp, #20
 800a25c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 800a25e:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 800a260:	1e5a      	subs	r2, r3, #1
 800a262:	4193      	sbcs	r3, r2
 800a264:	425b      	negs	r3, r3
 800a266:	401d      	ands	r5, r3
      count--;
 800a268:	9b03      	ldr	r3, [sp, #12]
 800a26a:	3b01      	subs	r3, #1
 800a26c:	e7ba      	b.n	800a1e4 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x24>
 800a26e:	46c0      	nop			; (mov r8, r8)
 800a270:	20000118 	.word	0x20000118
 800a274:	ffffdfff 	.word	0xffffdfff

0800a278 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a27a:	0013      	movs	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a27c:	2282      	movs	r2, #130	; 0x82
{
 800a27e:	0004      	movs	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a280:	6840      	ldr	r0, [r0, #4]
 800a282:	0052      	lsls	r2, r2, #1
 800a284:	4290      	cmp	r0, r2
 800a286:	d11e      	bne.n	800a2c6 <SPI_EndRxTransaction+0x4e>
 800a288:	2080      	movs	r0, #128	; 0x80
 800a28a:	2580      	movs	r5, #128	; 0x80
 800a28c:	68a2      	ldr	r2, [r4, #8]
 800a28e:	0200      	lsls	r0, r0, #8
 800a290:	00ed      	lsls	r5, r5, #3
 800a292:	4282      	cmp	r2, r0
 800a294:	d001      	beq.n	800a29a <SPI_EndRxTransaction+0x22>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a296:	42aa      	cmp	r2, r5
 800a298:	d106      	bne.n	800a2a8 <SPI_EndRxTransaction+0x30>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a29a:	2740      	movs	r7, #64	; 0x40
 800a29c:	6826      	ldr	r6, [r4, #0]
 800a29e:	6830      	ldr	r0, [r6, #0]
 800a2a0:	43b8      	bics	r0, r7
 800a2a2:	6030      	str	r0, [r6, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a2a4:	42aa      	cmp	r2, r5
 800a2a6:	d00e      	beq.n	800a2c6 <SPI_EndRxTransaction+0x4e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a2a8:	000a      	movs	r2, r1
 800a2aa:	2180      	movs	r1, #128	; 0x80
 800a2ac:	0020      	movs	r0, r4
 800a2ae:	f7ff ff87 	bl	800a1c0 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	d101      	bne.n	800a2ba <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 800a2b6:	2000      	movs	r0, #0
}
 800a2b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2ba:	2320      	movs	r3, #32
 800a2bc:	6d62      	ldr	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800a2be:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800a2c4:	e7f8      	b.n	800a2b8 <SPI_EndRxTransaction+0x40>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a2c6:	000a      	movs	r2, r1
 800a2c8:	2101      	movs	r1, #1
 800a2ca:	e7ef      	b.n	800a2ac <SPI_EndRxTransaction+0x34>

0800a2cc <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a2cc:	4b16      	ldr	r3, [pc, #88]	; (800a328 <SPI_EndRxTxTransaction+0x5c>)
{
 800a2ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2d0:	0004      	movs	r4, r0
 800a2d2:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a2d4:	6818      	ldr	r0, [r3, #0]
 800a2d6:	4915      	ldr	r1, [pc, #84]	; (800a32c <SPI_EndRxTxTransaction+0x60>)
{
 800a2d8:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a2da:	f7fa ff35 	bl	8005148 <__udivsi3>
 800a2de:	23fa      	movs	r3, #250	; 0xfa
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	4358      	muls	r0, r3
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a2e4:	2382      	movs	r3, #130	; 0x82
 800a2e6:	6861      	ldr	r1, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a2e8:	9001      	str	r0, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a2ea:	005b      	lsls	r3, r3, #1
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a2ec:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a2ee:	4299      	cmp	r1, r3
 800a2f0:	d10d      	bne.n	800a30e <SPI_EndRxTxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a2f2:	0033      	movs	r3, r6
 800a2f4:	002a      	movs	r2, r5
 800a2f6:	2180      	movs	r1, #128	; 0x80
 800a2f8:	0020      	movs	r0, r4
 800a2fa:	f7ff ff61 	bl	800a1c0 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 800a2fe:	2800      	cmp	r0, #0
 800a300:	d00f      	beq.n	800a322 <SPI_EndRxTxTransaction+0x56>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a302:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800a304:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a306:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a308:	4313      	orrs	r3, r2
 800a30a:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 800a30c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      if (count == 0U)
 800a30e:	9b01      	ldr	r3, [sp, #4]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d006      	beq.n	800a322 <SPI_EndRxTxTransaction+0x56>
      count--;
 800a314:	9b01      	ldr	r3, [sp, #4]
 800a316:	3b01      	subs	r3, #1
 800a318:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a31a:	6823      	ldr	r3, [r4, #0]
 800a31c:	689b      	ldr	r3, [r3, #8]
 800a31e:	4213      	tst	r3, r2
 800a320:	d1f5      	bne.n	800a30e <SPI_EndRxTxTransaction+0x42>
  return HAL_OK;
 800a322:	2000      	movs	r0, #0
 800a324:	e7f2      	b.n	800a30c <SPI_EndRxTxTransaction+0x40>
 800a326:	46c0      	nop			; (mov r8, r8)
 800a328:	20000118 	.word	0x20000118
 800a32c:	016e3600 	.word	0x016e3600

0800a330 <HAL_SPI_Init>:
{
 800a330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a332:	0004      	movs	r4, r0
    return HAL_ERROR;
 800a334:	2001      	movs	r0, #1
  if (hspi == NULL)
 800a336:	2c00      	cmp	r4, #0
 800a338:	d054      	beq.n	800a3e4 <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a33a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d152      	bne.n	800a3e6 <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a340:	2282      	movs	r2, #130	; 0x82
 800a342:	6861      	ldr	r1, [r4, #4]
 800a344:	0052      	lsls	r2, r2, #1
 800a346:	4291      	cmp	r1, r2
 800a348:	d000      	beq.n	800a34c <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a34a:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a34c:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800a34e:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a350:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800a352:	3551      	adds	r5, #81	; 0x51
 800a354:	782b      	ldrb	r3, [r5, #0]
 800a356:	b2db      	uxtb	r3, r3
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d105      	bne.n	800a368 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 800a35c:	0022      	movs	r2, r4
 800a35e:	3250      	adds	r2, #80	; 0x50
 800a360:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 800a362:	0020      	movs	r0, r4
 800a364:	f7fe fcb2 	bl	8008ccc <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800a368:	2002      	movs	r0, #2
  __HAL_SPI_DISABLE(hspi);
 800a36a:	2240      	movs	r2, #64	; 0x40
 800a36c:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800a36e:	7028      	strb	r0, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 800a370:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a372:	6866      	ldr	r6, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 800a374:	4393      	bics	r3, r2
 800a376:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a378:	2382      	movs	r3, #130	; 0x82
 800a37a:	005b      	lsls	r3, r3, #1
 800a37c:	4033      	ands	r3, r6
 800a37e:	2684      	movs	r6, #132	; 0x84
 800a380:	68a7      	ldr	r7, [r4, #8]
 800a382:	0236      	lsls	r6, r6, #8
 800a384:	403e      	ands	r6, r7
 800a386:	4333      	orrs	r3, r6
 800a388:	2680      	movs	r6, #128	; 0x80
 800a38a:	68e7      	ldr	r7, [r4, #12]
 800a38c:	0136      	lsls	r6, r6, #4
 800a38e:	403e      	ands	r6, r7
 800a390:	4333      	orrs	r3, r6
 800a392:	6926      	ldr	r6, [r4, #16]
 800a394:	69a2      	ldr	r2, [r4, #24]
 800a396:	4030      	ands	r0, r6
 800a398:	2601      	movs	r6, #1
 800a39a:	4303      	orrs	r3, r0
 800a39c:	6960      	ldr	r0, [r4, #20]
 800a39e:	69e7      	ldr	r7, [r4, #28]
 800a3a0:	4030      	ands	r0, r6
 800a3a2:	4303      	orrs	r3, r0
 800a3a4:	2080      	movs	r0, #128	; 0x80
 800a3a6:	0080      	lsls	r0, r0, #2
 800a3a8:	4010      	ands	r0, r2
 800a3aa:	4303      	orrs	r3, r0
 800a3ac:	2038      	movs	r0, #56	; 0x38
 800a3ae:	4038      	ands	r0, r7
 800a3b0:	4303      	orrs	r3, r0
 800a3b2:	2080      	movs	r0, #128	; 0x80
 800a3b4:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a3b6:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a3b8:	4038      	ands	r0, r7
 800a3ba:	4303      	orrs	r3, r0
 800a3bc:	2080      	movs	r0, #128	; 0x80
 800a3be:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800a3c0:	0180      	lsls	r0, r0, #6
 800a3c2:	4038      	ands	r0, r7
 800a3c4:	4303      	orrs	r3, r0
 800a3c6:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a3c8:	2304      	movs	r3, #4
 800a3ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a3cc:	401a      	ands	r2, r3
 800a3ce:	330c      	adds	r3, #12
 800a3d0:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a3d2:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a3d4:	431a      	orrs	r2, r3
 800a3d6:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a3d8:	69cb      	ldr	r3, [r1, #28]
 800a3da:	4a05      	ldr	r2, [pc, #20]	; (800a3f0 <HAL_SPI_Init+0xc0>)
 800a3dc:	4013      	ands	r3, r2
 800a3de:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a3e0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a3e2:	702e      	strb	r6, [r5, #0]
}
 800a3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a3ea:	6163      	str	r3, [r4, #20]
 800a3ec:	e7ae      	b.n	800a34c <HAL_SPI_Init+0x1c>
 800a3ee:	46c0      	nop			; (mov r8, r8)
 800a3f0:	fffff7ff 	.word	0xfffff7ff

0800a3f4 <HAL_SPI_Transmit>:
{
 800a3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3f6:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 800a3f8:	0003      	movs	r3, r0
{
 800a3fa:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 800a3fc:	3350      	adds	r3, #80	; 0x50
 800a3fe:	9301      	str	r3, [sp, #4]
 800a400:	781b      	ldrb	r3, [r3, #0]
{
 800a402:	0004      	movs	r4, r0
 800a404:	000d      	movs	r5, r1
 800a406:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 800a408:	2002      	movs	r0, #2
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d100      	bne.n	800a410 <HAL_SPI_Transmit+0x1c>
 800a40e:	e07c      	b.n	800a50a <HAL_SPI_Transmit+0x116>
 800a410:	2301      	movs	r3, #1
 800a412:	9a01      	ldr	r2, [sp, #4]
 800a414:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800a416:	f7fe fe35 	bl	8009084 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800a41a:	0022      	movs	r2, r4
  tickstart = HAL_GetTick();
 800a41c:	9000      	str	r0, [sp, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 800a41e:	3251      	adds	r2, #81	; 0x51
 800a420:	7813      	ldrb	r3, [r2, #0]
    errorcode = HAL_BUSY;
 800a422:	2002      	movs	r0, #2
  if (hspi->State != HAL_SPI_STATE_READY)
 800a424:	b2db      	uxtb	r3, r3
 800a426:	2b01      	cmp	r3, #1
 800a428:	d169      	bne.n	800a4fe <HAL_SPI_Transmit+0x10a>
    errorcode = HAL_ERROR;
 800a42a:	0018      	movs	r0, r3
  if ((pData == NULL) || (Size == 0U))
 800a42c:	2d00      	cmp	r5, #0
 800a42e:	d066      	beq.n	800a4fe <HAL_SPI_Transmit+0x10a>
 800a430:	2f00      	cmp	r7, #0
 800a432:	d064      	beq.n	800a4fe <HAL_SPI_Transmit+0x10a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a434:	3302      	adds	r3, #2
 800a436:	7013      	strb	r3, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a438:	2300      	movs	r3, #0
 800a43a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a43c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a43e:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 800a440:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a442:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a444:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a446:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a448:	2380      	movs	r3, #128	; 0x80
 800a44a:	68a1      	ldr	r1, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a44c:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a44e:	86a7      	strh	r7, [r4, #52]	; 0x34
 800a450:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a452:	021b      	lsls	r3, r3, #8
 800a454:	4299      	cmp	r1, r3
 800a456:	d108      	bne.n	800a46a <HAL_SPI_Transmit+0x76>
    __HAL_SPI_DISABLE(hspi);
 800a458:	2140      	movs	r1, #64	; 0x40
 800a45a:	6813      	ldr	r3, [r2, #0]
 800a45c:	438b      	bics	r3, r1
 800a45e:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800a460:	2380      	movs	r3, #128	; 0x80
 800a462:	6811      	ldr	r1, [r2, #0]
 800a464:	01db      	lsls	r3, r3, #7
 800a466:	430b      	orrs	r3, r1
 800a468:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a46a:	2340      	movs	r3, #64	; 0x40
 800a46c:	6811      	ldr	r1, [r2, #0]
 800a46e:	4219      	tst	r1, r3
 800a470:	d102      	bne.n	800a478 <HAL_SPI_Transmit+0x84>
    __HAL_SPI_ENABLE(hspi);
 800a472:	6811      	ldr	r1, [r2, #0]
 800a474:	430b      	orrs	r3, r1
 800a476:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a478:	2180      	movs	r1, #128	; 0x80
 800a47a:	68e0      	ldr	r0, [r4, #12]
 800a47c:	6863      	ldr	r3, [r4, #4]
 800a47e:	0109      	lsls	r1, r1, #4
 800a480:	4288      	cmp	r0, r1
 800a482:	d144      	bne.n	800a50e <HAL_SPI_Transmit+0x11a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <HAL_SPI_Transmit+0x98>
 800a488:	2f01      	cmp	r7, #1
 800a48a:	d107      	bne.n	800a49c <HAL_SPI_Transmit+0xa8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a48c:	882b      	ldrh	r3, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a48e:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a490:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 800a492:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a494:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800a496:	3b01      	subs	r3, #1
 800a498:	b29b      	uxth	r3, r3
 800a49a:	86e3      	strh	r3, [r4, #54]	; 0x36
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a49c:	2502      	movs	r5, #2
 800a49e:	e00c      	b.n	800a4ba <HAL_SPI_Transmit+0xc6>
 800a4a0:	6822      	ldr	r2, [r4, #0]
 800a4a2:	6893      	ldr	r3, [r2, #8]
 800a4a4:	422b      	tst	r3, r5
 800a4a6:	d021      	beq.n	800a4ec <HAL_SPI_Transmit+0xf8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a4a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a4aa:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4ac:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a4ae:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4b0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800a4b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800a4ba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d1ef      	bne.n	800a4a0 <HAL_SPI_Transmit+0xac>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a4c0:	9a00      	ldr	r2, [sp, #0]
 800a4c2:	0031      	movs	r1, r6
 800a4c4:	0020      	movs	r0, r4
 800a4c6:	f7ff ff01 	bl	800a2cc <SPI_EndRxTxTransaction>
 800a4ca:	2800      	cmp	r0, #0
 800a4cc:	d149      	bne.n	800a562 <HAL_SPI_Transmit+0x16e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a4ce:	68a3      	ldr	r3, [r4, #8]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d106      	bne.n	800a4e2 <HAL_SPI_Transmit+0xee>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a4d4:	9303      	str	r3, [sp, #12]
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	68da      	ldr	r2, [r3, #12]
 800a4da:	9203      	str	r2, [sp, #12]
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	9303      	str	r3, [sp, #12]
 800a4e0:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a4e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a4e4:	1e43      	subs	r3, r0, #1
 800a4e6:	4198      	sbcs	r0, r3
    errorcode = HAL_BUSY;
 800a4e8:	b2c0      	uxtb	r0, r0
error:
 800a4ea:	e008      	b.n	800a4fe <HAL_SPI_Transmit+0x10a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4ec:	f7fe fdca 	bl	8009084 <HAL_GetTick>
 800a4f0:	9b00      	ldr	r3, [sp, #0]
 800a4f2:	1ac0      	subs	r0, r0, r3
 800a4f4:	42b0      	cmp	r0, r6
 800a4f6:	d3e0      	bcc.n	800a4ba <HAL_SPI_Transmit+0xc6>
 800a4f8:	1c73      	adds	r3, r6, #1
 800a4fa:	d0de      	beq.n	800a4ba <HAL_SPI_Transmit+0xc6>
          errorcode = HAL_TIMEOUT;
 800a4fc:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800a4fe:	2301      	movs	r3, #1
 800a500:	3451      	adds	r4, #81	; 0x51
 800a502:	7023      	strb	r3, [r4, #0]
  __HAL_UNLOCK(hspi);
 800a504:	2300      	movs	r3, #0
 800a506:	9a01      	ldr	r2, [sp, #4]
 800a508:	7013      	strb	r3, [r2, #0]
}
 800a50a:	b005      	add	sp, #20
 800a50c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d001      	beq.n	800a516 <HAL_SPI_Transmit+0x122>
 800a512:	2f01      	cmp	r7, #1
 800a514:	d108      	bne.n	800a528 <HAL_SPI_Transmit+0x134>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a516:	782b      	ldrb	r3, [r5, #0]
 800a518:	7313      	strb	r3, [r2, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a51a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a51c:	3301      	adds	r3, #1
 800a51e:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800a520:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a522:	3b01      	subs	r3, #1
 800a524:	b29b      	uxth	r3, r3
 800a526:	86e3      	strh	r3, [r4, #54]	; 0x36
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a528:	2502      	movs	r5, #2
 800a52a:	e00d      	b.n	800a548 <HAL_SPI_Transmit+0x154>
 800a52c:	6823      	ldr	r3, [r4, #0]
 800a52e:	689a      	ldr	r2, [r3, #8]
 800a530:	422a      	tst	r2, r5
 800a532:	d00d      	beq.n	800a550 <HAL_SPI_Transmit+0x15c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a534:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a536:	7812      	ldrb	r2, [r2, #0]
 800a538:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a53a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a53c:	3301      	adds	r3, #1
 800a53e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800a540:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a542:	3b01      	subs	r3, #1
 800a544:	b29b      	uxth	r3, r3
 800a546:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800a548:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d1ee      	bne.n	800a52c <HAL_SPI_Transmit+0x138>
 800a54e:	e7b7      	b.n	800a4c0 <HAL_SPI_Transmit+0xcc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a550:	f7fe fd98 	bl	8009084 <HAL_GetTick>
 800a554:	9b00      	ldr	r3, [sp, #0]
 800a556:	1ac0      	subs	r0, r0, r3
 800a558:	42b0      	cmp	r0, r6
 800a55a:	d3f5      	bcc.n	800a548 <HAL_SPI_Transmit+0x154>
 800a55c:	1c73      	adds	r3, r6, #1
 800a55e:	d0f3      	beq.n	800a548 <HAL_SPI_Transmit+0x154>
 800a560:	e7cc      	b.n	800a4fc <HAL_SPI_Transmit+0x108>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a562:	2320      	movs	r3, #32
 800a564:	6563      	str	r3, [r4, #84]	; 0x54
 800a566:	e7b2      	b.n	800a4ce <HAL_SPI_Transmit+0xda>

0800a568 <HAL_SPI_TransmitReceive>:
{
 800a568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a56a:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 800a56c:	0003      	movs	r3, r0
 800a56e:	3350      	adds	r3, #80	; 0x50
{
 800a570:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 800a572:	781a      	ldrb	r2, [r3, #0]
{
 800a574:	0004      	movs	r4, r0
 800a576:	b085      	sub	sp, #20
 800a578:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 800a57a:	2002      	movs	r0, #2
 800a57c:	2a01      	cmp	r2, #1
 800a57e:	d100      	bne.n	800a582 <HAL_SPI_TransmitReceive+0x1a>
 800a580:	e099      	b.n	800a6b6 <HAL_SPI_TransmitReceive+0x14e>
 800a582:	2201      	movs	r2, #1
 800a584:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800a586:	f7fe fd7d 	bl	8009084 <HAL_GetTick>
  tmp_state           = hspi->State;
 800a58a:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 800a58c:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 800a58e:	3351      	adds	r3, #81	; 0x51
 800a590:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800a592:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 800a594:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a596:	2b01      	cmp	r3, #1
 800a598:	d00c      	beq.n	800a5b4 <HAL_SPI_TransmitReceive+0x4c>
 800a59a:	2282      	movs	r2, #130	; 0x82
    errorcode = HAL_BUSY;
 800a59c:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a59e:	0052      	lsls	r2, r2, #1
 800a5a0:	4291      	cmp	r1, r2
 800a5a2:	d000      	beq.n	800a5a6 <HAL_SPI_TransmitReceive+0x3e>
 800a5a4:	e080      	b.n	800a6a8 <HAL_SPI_TransmitReceive+0x140>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a5a6:	68a2      	ldr	r2, [r4, #8]
 800a5a8:	2a00      	cmp	r2, #0
 800a5aa:	d000      	beq.n	800a5ae <HAL_SPI_TransmitReceive+0x46>
 800a5ac:	e07c      	b.n	800a6a8 <HAL_SPI_TransmitReceive+0x140>
 800a5ae:	2b04      	cmp	r3, #4
 800a5b0:	d000      	beq.n	800a5b4 <HAL_SPI_TransmitReceive+0x4c>
 800a5b2:	e079      	b.n	800a6a8 <HAL_SPI_TransmitReceive+0x140>
    errorcode = HAL_ERROR;
 800a5b4:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a5b6:	2d00      	cmp	r5, #0
 800a5b8:	d076      	beq.n	800a6a8 <HAL_SPI_TransmitReceive+0x140>
 800a5ba:	2f00      	cmp	r7, #0
 800a5bc:	d074      	beq.n	800a6a8 <HAL_SPI_TransmitReceive+0x140>
 800a5be:	2e00      	cmp	r6, #0
 800a5c0:	d072      	beq.n	800a6a8 <HAL_SPI_TransmitReceive+0x140>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a5c2:	0023      	movs	r3, r4
 800a5c4:	3351      	adds	r3, #81	; 0x51
 800a5c6:	781a      	ldrb	r2, [r3, #0]
 800a5c8:	2a04      	cmp	r2, #4
 800a5ca:	d001      	beq.n	800a5d0 <HAL_SPI_TransmitReceive+0x68>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a5cc:	2205      	movs	r2, #5
 800a5ce:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a5d0:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a5d2:	2240      	movs	r2, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a5d4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 800a5d6:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a5d8:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a5da:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800a5dc:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800a5de:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a5e0:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a5e2:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a5e4:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a5e6:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a5e8:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a5ea:	4210      	tst	r0, r2
 800a5ec:	d102      	bne.n	800a5f4 <HAL_SPI_TransmitReceive+0x8c>
    __HAL_SPI_ENABLE(hspi);
 800a5ee:	6818      	ldr	r0, [r3, #0]
 800a5f0:	4302      	orrs	r2, r0
 800a5f2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a5f4:	2280      	movs	r2, #128	; 0x80
 800a5f6:	68e0      	ldr	r0, [r4, #12]
 800a5f8:	0112      	lsls	r2, r2, #4
 800a5fa:	4290      	cmp	r0, r2
 800a5fc:	d15d      	bne.n	800a6ba <HAL_SPI_TransmitReceive+0x152>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a5fe:	2900      	cmp	r1, #0
 800a600:	d001      	beq.n	800a606 <HAL_SPI_TransmitReceive+0x9e>
 800a602:	2e01      	cmp	r6, #1
 800a604:	d107      	bne.n	800a616 <HAL_SPI_TransmitReceive+0xae>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a606:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a608:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a60a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800a60c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a60e:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800a610:	3b01      	subs	r3, #1
 800a612:	b29b      	uxth	r3, r3
 800a614:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800a616:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a618:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a61a:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a61c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d115      	bne.n	800a64e <HAL_SPI_TransmitReceive+0xe6>
 800a622:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a624:	2b00      	cmp	r3, #0
 800a626:	d112      	bne.n	800a64e <HAL_SPI_TransmitReceive+0xe6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a628:	9a01      	ldr	r2, [sp, #4]
 800a62a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a62c:	0020      	movs	r0, r4
 800a62e:	f7ff fe4d 	bl	800a2cc <SPI_EndRxTxTransaction>
 800a632:	2800      	cmp	r0, #0
 800a634:	d000      	beq.n	800a638 <HAL_SPI_TransmitReceive+0xd0>
 800a636:	e086      	b.n	800a746 <HAL_SPI_TransmitReceive+0x1de>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a638:	68a3      	ldr	r3, [r4, #8]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d134      	bne.n	800a6a8 <HAL_SPI_TransmitReceive+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a63e:	6823      	ldr	r3, [r4, #0]
 800a640:	9003      	str	r0, [sp, #12]
 800a642:	68da      	ldr	r2, [r3, #12]
 800a644:	9203      	str	r2, [sp, #12]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	9303      	str	r3, [sp, #12]
 800a64a:	9b03      	ldr	r3, [sp, #12]
 800a64c:	e02c      	b.n	800a6a8 <HAL_SPI_TransmitReceive+0x140>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a64e:	6822      	ldr	r2, [r4, #0]
 800a650:	6893      	ldr	r3, [r2, #8]
 800a652:	423b      	tst	r3, r7
 800a654:	d00e      	beq.n	800a674 <HAL_SPI_TransmitReceive+0x10c>
 800a656:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d00b      	beq.n	800a674 <HAL_SPI_TransmitReceive+0x10c>
 800a65c:	2d01      	cmp	r5, #1
 800a65e:	d109      	bne.n	800a674 <HAL_SPI_TransmitReceive+0x10c>
        txallowed = 0U;
 800a660:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a662:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a664:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a666:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a668:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a66a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800a66c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a66e:	3b01      	subs	r3, #1
 800a670:	b29b      	uxth	r3, r3
 800a672:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a674:	6893      	ldr	r3, [r2, #8]
 800a676:	4233      	tst	r3, r6
 800a678:	d00c      	beq.n	800a694 <HAL_SPI_TransmitReceive+0x12c>
 800a67a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d009      	beq.n	800a694 <HAL_SPI_TransmitReceive+0x12c>
        txallowed = 1U;
 800a680:	0035      	movs	r5, r6
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a682:	68d2      	ldr	r2, [r2, #12]
 800a684:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a686:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a688:	3302      	adds	r3, #2
 800a68a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800a68c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a68e:	3b01      	subs	r3, #1
 800a690:	b29b      	uxth	r3, r3
 800a692:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a694:	f7fe fcf6 	bl	8009084 <HAL_GetTick>
 800a698:	9b01      	ldr	r3, [sp, #4]
 800a69a:	1ac0      	subs	r0, r0, r3
 800a69c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a69e:	4283      	cmp	r3, r0
 800a6a0:	d8bc      	bhi.n	800a61c <HAL_SPI_TransmitReceive+0xb4>
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	d0ba      	beq.n	800a61c <HAL_SPI_TransmitReceive+0xb4>
        errorcode = HAL_TIMEOUT;
 800a6a6:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800a6a8:	0023      	movs	r3, r4
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	3351      	adds	r3, #81	; 0x51
 800a6ae:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	3450      	adds	r4, #80	; 0x50
 800a6b4:	7023      	strb	r3, [r4, #0]
}
 800a6b6:	b005      	add	sp, #20
 800a6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a6ba:	2900      	cmp	r1, #0
 800a6bc:	d001      	beq.n	800a6c2 <HAL_SPI_TransmitReceive+0x15a>
 800a6be:	2e01      	cmp	r6, #1
 800a6c0:	d108      	bne.n	800a6d4 <HAL_SPI_TransmitReceive+0x16c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a6c2:	782a      	ldrb	r2, [r5, #0]
 800a6c4:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a6c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800a6cc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a6ce:	3b01      	subs	r3, #1
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800a6d4:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a6d6:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a6d8:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a6da:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d102      	bne.n	800a6e6 <HAL_SPI_TransmitReceive+0x17e>
 800a6e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d0a0      	beq.n	800a628 <HAL_SPI_TransmitReceive+0xc0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a6e6:	6823      	ldr	r3, [r4, #0]
 800a6e8:	689a      	ldr	r2, [r3, #8]
 800a6ea:	423a      	tst	r2, r7
 800a6ec:	d00f      	beq.n	800a70e <HAL_SPI_TransmitReceive+0x1a6>
 800a6ee:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800a6f0:	2a00      	cmp	r2, #0
 800a6f2:	d00c      	beq.n	800a70e <HAL_SPI_TransmitReceive+0x1a6>
 800a6f4:	2d01      	cmp	r5, #1
 800a6f6:	d10a      	bne.n	800a70e <HAL_SPI_TransmitReceive+0x1a6>
        txallowed = 0U;
 800a6f8:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a6fa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a6fc:	7812      	ldrb	r2, [r2, #0]
 800a6fe:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800a700:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a702:	3301      	adds	r3, #1
 800a704:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800a706:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a708:	3b01      	subs	r3, #1
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a70e:	6823      	ldr	r3, [r4, #0]
 800a710:	689a      	ldr	r2, [r3, #8]
 800a712:	4232      	tst	r2, r6
 800a714:	d00d      	beq.n	800a732 <HAL_SPI_TransmitReceive+0x1ca>
 800a716:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a718:	2a00      	cmp	r2, #0
 800a71a:	d00a      	beq.n	800a732 <HAL_SPI_TransmitReceive+0x1ca>
        txallowed = 1U;
 800a71c:	0035      	movs	r5, r6
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a722:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 800a724:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a726:	3301      	adds	r3, #1
 800a728:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800a72a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a72c:	3b01      	subs	r3, #1
 800a72e:	b29b      	uxth	r3, r3
 800a730:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a732:	f7fe fca7 	bl	8009084 <HAL_GetTick>
 800a736:	9b01      	ldr	r3, [sp, #4]
 800a738:	1ac0      	subs	r0, r0, r3
 800a73a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a73c:	4283      	cmp	r3, r0
 800a73e:	d8cc      	bhi.n	800a6da <HAL_SPI_TransmitReceive+0x172>
 800a740:	3301      	adds	r3, #1
 800a742:	d0ca      	beq.n	800a6da <HAL_SPI_TransmitReceive+0x172>
 800a744:	e7af      	b.n	800a6a6 <HAL_SPI_TransmitReceive+0x13e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a746:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 800a748:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a74a:	6563      	str	r3, [r4, #84]	; 0x54
 800a74c:	e7ac      	b.n	800a6a8 <HAL_SPI_TransmitReceive+0x140>
	...

0800a750 <HAL_SPI_Receive>:
{
 800a750:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a752:	001d      	movs	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a754:	2382      	movs	r3, #130	; 0x82
{
 800a756:	0016      	movs	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a758:	6842      	ldr	r2, [r0, #4]
{
 800a75a:	b087      	sub	sp, #28
 800a75c:	0004      	movs	r4, r0
 800a75e:	000f      	movs	r7, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a760:	005b      	lsls	r3, r3, #1
 800a762:	429a      	cmp	r2, r3
 800a764:	d10d      	bne.n	800a782 <HAL_SPI_Receive+0x32>
 800a766:	6883      	ldr	r3, [r0, #8]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d10a      	bne.n	800a782 <HAL_SPI_Receive+0x32>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a76c:	0003      	movs	r3, r0
 800a76e:	2204      	movs	r2, #4
 800a770:	3351      	adds	r3, #81	; 0x51
 800a772:	701a      	strb	r2, [r3, #0]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a774:	9500      	str	r5, [sp, #0]
 800a776:	0033      	movs	r3, r6
 800a778:	000a      	movs	r2, r1
 800a77a:	f7ff fef5 	bl	800a568 <HAL_SPI_TransmitReceive>
}
 800a77e:	b007      	add	sp, #28
 800a780:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 800a782:	0023      	movs	r3, r4
 800a784:	3350      	adds	r3, #80	; 0x50
 800a786:	9304      	str	r3, [sp, #16]
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	2002      	movs	r0, #2
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d0f6      	beq.n	800a77e <HAL_SPI_Receive+0x2e>
 800a790:	2301      	movs	r3, #1
 800a792:	9a04      	ldr	r2, [sp, #16]
 800a794:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800a796:	f7fe fc75 	bl	8009084 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800a79a:	0023      	movs	r3, r4
 800a79c:	3351      	adds	r3, #81	; 0x51
  tickstart = HAL_GetTick();
 800a79e:	9003      	str	r0, [sp, #12]
  if (hspi->State != HAL_SPI_STATE_READY)
 800a7a0:	9305      	str	r3, [sp, #20]
 800a7a2:	781b      	ldrb	r3, [r3, #0]
    errorcode = HAL_BUSY;
 800a7a4:	2002      	movs	r0, #2
  if (hspi->State != HAL_SPI_STATE_READY)
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d151      	bne.n	800a850 <HAL_SPI_Receive+0x100>
    errorcode = HAL_ERROR;
 800a7ac:	0018      	movs	r0, r3
  if ((pData == NULL) || (Size == 0U))
 800a7ae:	2f00      	cmp	r7, #0
 800a7b0:	d04e      	beq.n	800a850 <HAL_SPI_Receive+0x100>
 800a7b2:	2e00      	cmp	r6, #0
 800a7b4:	d04c      	beq.n	800a850 <HAL_SPI_Receive+0x100>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a7b6:	9a05      	ldr	r2, [sp, #20]
 800a7b8:	3303      	adds	r3, #3
 800a7ba:	7013      	strb	r3, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a7bc:	2300      	movs	r3, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a7be:	2280      	movs	r2, #128	; 0x80
 800a7c0:	68a1      	ldr	r1, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a7c2:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a7c4:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 800a7c6:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 800a7c8:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800a7ca:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 800a7cc:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a7ce:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a7d0:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a7d2:	87a6      	strh	r6, [r4, #60]	; 0x3c
 800a7d4:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a7d6:	0212      	lsls	r2, r2, #8
 800a7d8:	4291      	cmp	r1, r2
 800a7da:	d107      	bne.n	800a7ec <HAL_SPI_Receive+0x9c>
    __HAL_SPI_DISABLE(hspi);
 800a7dc:	2140      	movs	r1, #64	; 0x40
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	438a      	bics	r2, r1
 800a7e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	492c      	ldr	r1, [pc, #176]	; (800a898 <HAL_SPI_Receive+0x148>)
 800a7e8:	400a      	ands	r2, r1
 800a7ea:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a7ec:	2240      	movs	r2, #64	; 0x40
 800a7ee:	6819      	ldr	r1, [r3, #0]
 800a7f0:	4211      	tst	r1, r2
 800a7f2:	d102      	bne.n	800a7fa <HAL_SPI_Receive+0xaa>
    __HAL_SPI_ENABLE(hspi);
 800a7f4:	6819      	ldr	r1, [r3, #0]
 800a7f6:	430a      	orrs	r2, r1
 800a7f8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a7fa:	68e3      	ldr	r3, [r4, #12]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a7fc:	2601      	movs	r6, #1
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d13a      	bne.n	800a878 <HAL_SPI_Receive+0x128>
    while (hspi->RxXferCount > 0U)
 800a802:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a804:	2b00      	cmp	r3, #0
 800a806:	d10b      	bne.n	800a820 <HAL_SPI_Receive+0xd0>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a808:	9a03      	ldr	r2, [sp, #12]
 800a80a:	0029      	movs	r1, r5
 800a80c:	0020      	movs	r0, r4
 800a80e:	f7ff fd33 	bl	800a278 <SPI_EndRxTransaction>
 800a812:	2800      	cmp	r0, #0
 800a814:	d13d      	bne.n	800a892 <HAL_SPI_Receive+0x142>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a816:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a818:	1e43      	subs	r3, r0, #1
 800a81a:	4198      	sbcs	r0, r3
    errorcode = HAL_BUSY;
 800a81c:	b2c0      	uxtb	r0, r0
error :
 800a81e:	e017      	b.n	800a850 <HAL_SPI_Receive+0x100>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a820:	6823      	ldr	r3, [r4, #0]
 800a822:	689a      	ldr	r2, [r3, #8]
 800a824:	4232      	tst	r2, r6
 800a826:	d00a      	beq.n	800a83e <HAL_SPI_Receive+0xee>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a828:	7b1b      	ldrb	r3, [r3, #12]
 800a82a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a82c:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a82e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a830:	3301      	adds	r3, #1
 800a832:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800a834:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a836:	3b01      	subs	r3, #1
 800a838:	b29b      	uxth	r3, r3
 800a83a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800a83c:	e7e1      	b.n	800a802 <HAL_SPI_Receive+0xb2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a83e:	f7fe fc21 	bl	8009084 <HAL_GetTick>
 800a842:	9b03      	ldr	r3, [sp, #12]
 800a844:	1ac0      	subs	r0, r0, r3
 800a846:	42a8      	cmp	r0, r5
 800a848:	d3db      	bcc.n	800a802 <HAL_SPI_Receive+0xb2>
 800a84a:	1c6b      	adds	r3, r5, #1
 800a84c:	d0d9      	beq.n	800a802 <HAL_SPI_Receive+0xb2>
          errorcode = HAL_TIMEOUT;
 800a84e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800a850:	2301      	movs	r3, #1
 800a852:	9a05      	ldr	r2, [sp, #20]
 800a854:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800a856:	2300      	movs	r3, #0
 800a858:	9a04      	ldr	r2, [sp, #16]
 800a85a:	7013      	strb	r3, [r2, #0]
  return errorcode;
 800a85c:	e78f      	b.n	800a77e <HAL_SPI_Receive+0x2e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a85e:	6823      	ldr	r3, [r4, #0]
 800a860:	689a      	ldr	r2, [r3, #8]
 800a862:	4232      	tst	r2, r6
 800a864:	d00c      	beq.n	800a880 <HAL_SPI_Receive+0x130>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a866:	68da      	ldr	r2, [r3, #12]
 800a868:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a86a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a86c:	3302      	adds	r3, #2
 800a86e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800a870:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a872:	3b01      	subs	r3, #1
 800a874:	b29b      	uxth	r3, r3
 800a876:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 800a878:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d1ef      	bne.n	800a85e <HAL_SPI_Receive+0x10e>
 800a87e:	e7c3      	b.n	800a808 <HAL_SPI_Receive+0xb8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a880:	f7fe fc00 	bl	8009084 <HAL_GetTick>
 800a884:	9b03      	ldr	r3, [sp, #12]
 800a886:	1ac0      	subs	r0, r0, r3
 800a888:	42a8      	cmp	r0, r5
 800a88a:	d3f5      	bcc.n	800a878 <HAL_SPI_Receive+0x128>
 800a88c:	1c6b      	adds	r3, r5, #1
 800a88e:	d0f3      	beq.n	800a878 <HAL_SPI_Receive+0x128>
 800a890:	e7dd      	b.n	800a84e <HAL_SPI_Receive+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a892:	2320      	movs	r3, #32
 800a894:	6563      	str	r3, [r4, #84]	; 0x54
 800a896:	e7be      	b.n	800a816 <HAL_SPI_Receive+0xc6>
 800a898:	ffffbfff 	.word	0xffffbfff

0800a89c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a89c:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a89e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8a8:	6801      	ldr	r1, [r0, #0]
 800a8aa:	4d12      	ldr	r5, [pc, #72]	; (800a8f4 <UART_EndRxTransfer+0x58>)
 800a8ac:	680b      	ldr	r3, [r1, #0]
 800a8ae:	402b      	ands	r3, r5
 800a8b0:	600b      	str	r3, [r1, #0]
 800a8b2:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8b6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8ba:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8be:	6801      	ldr	r1, [r0, #0]
 800a8c0:	688b      	ldr	r3, [r1, #8]
 800a8c2:	4393      	bics	r3, r2
 800a8c4:	608b      	str	r3, [r1, #8]
 800a8c6:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8ca:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d10a      	bne.n	800a8e6 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8d0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8d4:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8d8:	2410      	movs	r4, #16
 800a8da:	6802      	ldr	r2, [r0, #0]
 800a8dc:	6813      	ldr	r3, [r2, #0]
 800a8de:	43a3      	bics	r3, r4
 800a8e0:	6013      	str	r3, [r2, #0]
 800a8e2:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a8e6:	2320      	movs	r3, #32
 800a8e8:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a8ee:	6643      	str	r3, [r0, #100]	; 0x64
}
 800a8f0:	bd30      	pop	{r4, r5, pc}
 800a8f2:	46c0      	nop			; (mov r8, r8)
 800a8f4:	fffffedf 	.word	0xfffffedf

0800a8f8 <HAL_UART_Transmit_DMA>:
{
 800a8f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8fa:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800a8fc:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 800a8fe:	0004      	movs	r4, r0
    return HAL_BUSY;
 800a900:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800a902:	2a20      	cmp	r2, #32
 800a904:	d138      	bne.n	800a978 <HAL_UART_Transmit_DMA+0x80>
      return HAL_ERROR;
 800a906:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800a908:	2900      	cmp	r1, #0
 800a90a:	d035      	beq.n	800a978 <HAL_UART_Transmit_DMA+0x80>
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d033      	beq.n	800a978 <HAL_UART_Transmit_DMA+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a910:	2280      	movs	r2, #128	; 0x80
 800a912:	68a5      	ldr	r5, [r4, #8]
 800a914:	0152      	lsls	r2, r2, #5
 800a916:	4295      	cmp	r5, r2
 800a918:	d104      	bne.n	800a924 <HAL_UART_Transmit_DMA+0x2c>
 800a91a:	6922      	ldr	r2, [r4, #16]
 800a91c:	2a00      	cmp	r2, #0
 800a91e:	d101      	bne.n	800a924 <HAL_UART_Transmit_DMA+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 800a920:	4201      	tst	r1, r0
 800a922:	d129      	bne.n	800a978 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 800a924:	0025      	movs	r5, r4
 800a926:	3574      	adds	r5, #116	; 0x74
 800a928:	782a      	ldrb	r2, [r5, #0]
    return HAL_BUSY;
 800a92a:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800a92c:	2a01      	cmp	r2, #1
 800a92e:	d023      	beq.n	800a978 <HAL_UART_Transmit_DMA+0x80>
 800a930:	2201      	movs	r2, #1
 800a932:	702a      	strb	r2, [r5, #0]
    huart->TxXferSize  = Size;
 800a934:	0022      	movs	r2, r4
 800a936:	3250      	adds	r2, #80	; 0x50
    huart->pTxBuffPtr  = pData;
 800a938:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a93a:	2600      	movs	r6, #0
    huart->TxXferSize  = Size;
 800a93c:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 800a93e:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a940:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 800a942:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a944:	1d27      	adds	r7, r4, #4
 800a946:	67fe      	str	r6, [r7, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a948:	67a2      	str	r2, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 800a94a:	42b0      	cmp	r0, r6
 800a94c:	d015      	beq.n	800a97a <HAL_UART_Transmit_DMA+0x82>
 800a94e:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferAbortCallback = NULL;
 800a950:	6386      	str	r6, [r0, #56]	; 0x38
 800a952:	9201      	str	r2, [sp, #4]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a954:	4a12      	ldr	r2, [pc, #72]	; (800a9a0 <HAL_UART_Transmit_DMA+0xa8>)
 800a956:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a958:	4a12      	ldr	r2, [pc, #72]	; (800a9a4 <HAL_UART_Transmit_DMA+0xac>)
 800a95a:	6302      	str	r2, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a95c:	4a12      	ldr	r2, [pc, #72]	; (800a9a8 <HAL_UART_Transmit_DMA+0xb0>)
 800a95e:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a960:	9a01      	ldr	r2, [sp, #4]
 800a962:	3228      	adds	r2, #40	; 0x28
 800a964:	f7fe fc8d 	bl	8009282 <HAL_DMA_Start_IT>
 800a968:	42b0      	cmp	r0, r6
 800a96a:	d006      	beq.n	800a97a <HAL_UART_Transmit_DMA+0x82>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a96c:	2310      	movs	r3, #16
        return HAL_ERROR;
 800a96e:	2001      	movs	r0, #1
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a970:	67fb      	str	r3, [r7, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 800a972:	18db      	adds	r3, r3, r3
        __HAL_UNLOCK(huart);
 800a974:	702e      	strb	r6, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 800a976:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800a978:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a97a:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 800a97c:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a97e:	6823      	ldr	r3, [r4, #0]
 800a980:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 800a982:	7028      	strb	r0, [r5, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a984:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a988:	2301      	movs	r3, #1
 800a98a:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a98e:	6822      	ldr	r2, [r4, #0]
 800a990:	337f      	adds	r3, #127	; 0x7f
 800a992:	6894      	ldr	r4, [r2, #8]
 800a994:	4323      	orrs	r3, r4
 800a996:	6093      	str	r3, [r2, #8]
 800a998:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 800a99c:	e7ec      	b.n	800a978 <HAL_UART_Transmit_DMA+0x80>
 800a99e:	46c0      	nop			; (mov r8, r8)
 800a9a0:	0800a9af 	.word	0x0800a9af
 800a9a4:	0800a9fd 	.word	0x0800a9fd
 800a9a8:	0800aa09 	.word	0x0800aa09

0800a9ac <HAL_UART_TxCpltCallback>:
 800a9ac:	4770      	bx	lr

0800a9ae <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a9ae:	2120      	movs	r1, #32
 800a9b0:	6802      	ldr	r2, [r0, #0]
{
 800a9b2:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a9b4:	6812      	ldr	r2, [r2, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a9b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a9b8:	400a      	ands	r2, r1
 800a9ba:	d11a      	bne.n	800a9f2 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 800a9bc:	0019      	movs	r1, r3
 800a9be:	3152      	adds	r1, #82	; 0x52
 800a9c0:	800a      	strh	r2, [r1, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9c2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9c6:	2101      	movs	r1, #1
 800a9c8:	f381 8810 	msr	PRIMASK, r1

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a9cc:	2580      	movs	r5, #128	; 0x80
 800a9ce:	6818      	ldr	r0, [r3, #0]
 800a9d0:	6882      	ldr	r2, [r0, #8]
 800a9d2:	43aa      	bics	r2, r5
 800a9d4:	6082      	str	r2, [r0, #8]
 800a9d6:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9da:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9de:	f381 8810 	msr	PRIMASK, r1

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a9e2:	681a      	ldr	r2, [r3, #0]
 800a9e4:	2340      	movs	r3, #64	; 0x40
 800a9e6:	6811      	ldr	r1, [r2, #0]
 800a9e8:	430b      	orrs	r3, r1
 800a9ea:	6013      	str	r3, [r2, #0]
 800a9ec:	f380 8810 	msr	PRIMASK, r0
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a9f0:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_TxCpltCallback(huart);
 800a9f2:	0018      	movs	r0, r3
 800a9f4:	f7ff ffda 	bl	800a9ac <HAL_UART_TxCpltCallback>
}
 800a9f8:	e7fa      	b.n	800a9f0 <UART_DMATransmitCplt+0x42>

0800a9fa <HAL_UART_TxHalfCpltCallback>:
 800a9fa:	4770      	bx	lr

0800a9fc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a9fc:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a9fe:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800aa00:	f7ff fffb 	bl	800a9fa <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa04:	bd10      	pop	{r4, pc}

0800aa06 <HAL_UART_ErrorCallback>:
 800aa06:	4770      	bx	lr

0800aa08 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aa08:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa0a:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800aa0c:	6822      	ldr	r2, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800aa0e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800aa10:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800aa12:	6892      	ldr	r2, [r2, #8]
 800aa14:	0612      	lsls	r2, r2, #24
 800aa16:	d513      	bpl.n	800aa40 <UART_DMAError+0x38>
 800aa18:	2b21      	cmp	r3, #33	; 0x21
 800aa1a:	d111      	bne.n	800aa40 <UART_DMAError+0x38>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800aa1c:	0023      	movs	r3, r4
 800aa1e:	2200      	movs	r2, #0
 800aa20:	3352      	adds	r3, #82	; 0x52
 800aa22:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa24:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa28:	2301      	movs	r3, #1
 800aa2a:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800aa2e:	25c0      	movs	r5, #192	; 0xc0
 800aa30:	6822      	ldr	r2, [r4, #0]
 800aa32:	6813      	ldr	r3, [r2, #0]
 800aa34:	43ab      	bics	r3, r5
 800aa36:	6013      	str	r3, [r2, #0]
 800aa38:	f380 8810 	msr	PRIMASK, r0
  huart->gState = HAL_UART_STATE_READY;
 800aa3c:	2320      	movs	r3, #32
 800aa3e:	67a3      	str	r3, [r4, #120]	; 0x78
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800aa40:	6823      	ldr	r3, [r4, #0]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	065b      	lsls	r3, r3, #25
 800aa46:	d508      	bpl.n	800aa5a <UART_DMAError+0x52>
 800aa48:	2922      	cmp	r1, #34	; 0x22
 800aa4a:	d106      	bne.n	800aa5a <UART_DMAError+0x52>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800aa4c:	0023      	movs	r3, r4
 800aa4e:	2200      	movs	r2, #0
 800aa50:	335a      	adds	r3, #90	; 0x5a
 800aa52:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 800aa54:	0020      	movs	r0, r4
 800aa56:	f7ff ff21 	bl	800a89c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aa5a:	2310      	movs	r3, #16
 800aa5c:	1d22      	adds	r2, r4, #4
 800aa5e:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aa60:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aa62:	430b      	orrs	r3, r1
 800aa64:	67d3      	str	r3, [r2, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 800aa66:	f7ff ffce 	bl	800aa06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa6a:	bd70      	pop	{r4, r5, r6, pc}

0800aa6c <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa6c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	0002      	movs	r2, r0
{
 800aa72:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 800aa74:	325a      	adds	r2, #90	; 0x5a
 800aa76:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 800aa78:	3a08      	subs	r2, #8
 800aa7a:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aa7c:	f7ff ffc3 	bl	800aa06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa80:	bd10      	pop	{r4, pc}

0800aa82 <HAL_UARTEx_RxEventCallback>:
}
 800aa82:	4770      	bx	lr

0800aa84 <HAL_UART_IRQHandler>:
{
 800aa84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa86:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aa88:	6800      	ldr	r0, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aa8a:	4ba5      	ldr	r3, [pc, #660]	; (800ad20 <HAL_UART_IRQHandler+0x29c>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aa8c:	69c1      	ldr	r1, [r0, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aa8e:	6806      	ldr	r6, [r0, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aa90:	6885      	ldr	r5, [r0, #8]
  if (errorflags == 0U)
 800aa92:	4219      	tst	r1, r3
 800aa94:	d10b      	bne.n	800aaae <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800aa96:	2320      	movs	r3, #32
 800aa98:	4219      	tst	r1, r3
 800aa9a:	d100      	bne.n	800aa9e <HAL_UART_IRQHandler+0x1a>
 800aa9c:	e07f      	b.n	800ab9e <HAL_UART_IRQHandler+0x11a>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800aa9e:	421e      	tst	r6, r3
 800aaa0:	d100      	bne.n	800aaa4 <HAL_UART_IRQHandler+0x20>
 800aaa2:	e07c      	b.n	800ab9e <HAL_UART_IRQHandler+0x11a>
      if (huart->RxISR != NULL)
 800aaa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
      huart->TxISR(huart);
 800aaa6:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d16e      	bne.n	800ab8a <HAL_UART_IRQHandler+0x106>
 800aaac:	e06e      	b.n	800ab8c <HAL_UART_IRQHandler+0x108>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800aaae:	2301      	movs	r3, #1
 800aab0:	002a      	movs	r2, r5
 800aab2:	401a      	ands	r2, r3
 800aab4:	d103      	bne.n	800aabe <HAL_UART_IRQHandler+0x3a>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800aab6:	4f9b      	ldr	r7, [pc, #620]	; (800ad24 <HAL_UART_IRQHandler+0x2a0>)
 800aab8:	423e      	tst	r6, r7
 800aaba:	d100      	bne.n	800aabe <HAL_UART_IRQHandler+0x3a>
 800aabc:	e06f      	b.n	800ab9e <HAL_UART_IRQHandler+0x11a>
 800aabe:	1d25      	adds	r5, r4, #4
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aac0:	4219      	tst	r1, r3
 800aac2:	d005      	beq.n	800aad0 <HAL_UART_IRQHandler+0x4c>
 800aac4:	05f7      	lsls	r7, r6, #23
 800aac6:	d503      	bpl.n	800aad0 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aac8:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aaca:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 800aacc:	433b      	orrs	r3, r7
 800aace:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aad0:	2302      	movs	r3, #2
 800aad2:	4219      	tst	r1, r3
 800aad4:	d006      	beq.n	800aae4 <HAL_UART_IRQHandler+0x60>
 800aad6:	2a00      	cmp	r2, #0
 800aad8:	d004      	beq.n	800aae4 <HAL_UART_IRQHandler+0x60>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aada:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aadc:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 800aade:	18db      	adds	r3, r3, r3
 800aae0:	433b      	orrs	r3, r7
 800aae2:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aae4:	2304      	movs	r3, #4
 800aae6:	4219      	tst	r1, r3
 800aae8:	d006      	beq.n	800aaf8 <HAL_UART_IRQHandler+0x74>
 800aaea:	2a00      	cmp	r2, #0
 800aaec:	d004      	beq.n	800aaf8 <HAL_UART_IRQHandler+0x74>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aaee:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aaf0:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 800aaf2:	3b02      	subs	r3, #2
 800aaf4:	433b      	orrs	r3, r7
 800aaf6:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aaf8:	070b      	lsls	r3, r1, #28
 800aafa:	d508      	bpl.n	800ab0e <HAL_UART_IRQHandler+0x8a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aafc:	06b3      	lsls	r3, r6, #26
 800aafe:	d401      	bmi.n	800ab04 <HAL_UART_IRQHandler+0x80>
 800ab00:	2a00      	cmp	r2, #0
 800ab02:	d004      	beq.n	800ab0e <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab04:	2308      	movs	r3, #8
 800ab06:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ab08:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ab0e:	2380      	movs	r3, #128	; 0x80
 800ab10:	011b      	lsls	r3, r3, #4
 800ab12:	4219      	tst	r1, r3
 800ab14:	d006      	beq.n	800ab24 <HAL_UART_IRQHandler+0xa0>
 800ab16:	0172      	lsls	r2, r6, #5
 800ab18:	d504      	bpl.n	800ab24 <HAL_UART_IRQHandler+0xa0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab1a:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ab1c:	2320      	movs	r3, #32
 800ab1e:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 800ab20:	4313      	orrs	r3, r2
 800ab22:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab24:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d030      	beq.n	800ab8c <HAL_UART_IRQHandler+0x108>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ab2a:	2320      	movs	r3, #32
 800ab2c:	4219      	tst	r1, r3
 800ab2e:	d006      	beq.n	800ab3e <HAL_UART_IRQHandler+0xba>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ab30:	421e      	tst	r6, r3
 800ab32:	d004      	beq.n	800ab3e <HAL_UART_IRQHandler+0xba>
        if (huart->RxISR != NULL)
 800ab34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d001      	beq.n	800ab3e <HAL_UART_IRQHandler+0xba>
          huart->RxISR(huart);
 800ab3a:	0020      	movs	r0, r4
 800ab3c:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab3e:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800ab40:	6fee      	ldr	r6, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab42:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 800ab44:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab46:	065b      	lsls	r3, r3, #25
 800ab48:	d402      	bmi.n	800ab50 <HAL_UART_IRQHandler+0xcc>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ab4a:	2328      	movs	r3, #40	; 0x28
 800ab4c:	401e      	ands	r6, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab4e:	d022      	beq.n	800ab96 <HAL_UART_IRQHandler+0x112>
        UART_EndRxTransfer(huart);
 800ab50:	f7ff fea4 	bl	800a89c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab54:	2140      	movs	r1, #64	; 0x40
 800ab56:	6823      	ldr	r3, [r4, #0]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	420b      	tst	r3, r1
 800ab5c:	d017      	beq.n	800ab8e <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab5e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab62:	2301      	movs	r3, #1
 800ab64:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab68:	6822      	ldr	r2, [r4, #0]
 800ab6a:	6893      	ldr	r3, [r2, #8]
 800ab6c:	438b      	bics	r3, r1
 800ab6e:	6093      	str	r3, [r2, #8]
 800ab70:	f380 8810 	msr	PRIMASK, r0
          if (huart->hdmarx != NULL)
 800ab74:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800ab76:	2800      	cmp	r0, #0
 800ab78:	d009      	beq.n	800ab8e <HAL_UART_IRQHandler+0x10a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ab7a:	4b6b      	ldr	r3, [pc, #428]	; (800ad28 <HAL_UART_IRQHandler+0x2a4>)
 800ab7c:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ab7e:	f7fe fbe0 	bl	8009342 <HAL_DMA_Abort_IT>
 800ab82:	2800      	cmp	r0, #0
 800ab84:	d002      	beq.n	800ab8c <HAL_UART_IRQHandler+0x108>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ab86:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800ab88:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ab8a:	4798      	blx	r3
}
 800ab8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 800ab8e:	0020      	movs	r0, r4
 800ab90:	f7ff ff39 	bl	800aa06 <HAL_UART_ErrorCallback>
 800ab94:	e7fa      	b.n	800ab8c <HAL_UART_IRQHandler+0x108>
        HAL_UART_ErrorCallback(huart);
 800ab96:	f7ff ff36 	bl	800aa06 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab9a:	67ee      	str	r6, [r5, #124]	; 0x7c
 800ab9c:	e7f6      	b.n	800ab8c <HAL_UART_IRQHandler+0x108>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab9e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d000      	beq.n	800aba6 <HAL_UART_IRQHandler+0x122>
 800aba4:	e08f      	b.n	800acc6 <HAL_UART_IRQHandler+0x242>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800aba6:	2210      	movs	r2, #16
 800aba8:	4211      	tst	r1, r2
 800abaa:	d100      	bne.n	800abae <HAL_UART_IRQHandler+0x12a>
 800abac:	e08b      	b.n	800acc6 <HAL_UART_IRQHandler+0x242>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800abae:	4216      	tst	r6, r2
 800abb0:	d100      	bne.n	800abb4 <HAL_UART_IRQHandler+0x130>
 800abb2:	e088      	b.n	800acc6 <HAL_UART_IRQHandler+0x242>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abb4:	2640      	movs	r6, #64	; 0x40
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800abb6:	6202      	str	r2, [r0, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abb8:	6880      	ldr	r0, [r0, #8]
 800abba:	4030      	ands	r0, r6
 800abbc:	d04d      	beq.n	800ac5a <HAL_UART_IRQHandler+0x1d6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800abbe:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800abc0:	6808      	ldr	r0, [r1, #0]
 800abc2:	6841      	ldr	r1, [r0, #4]
 800abc4:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 800abc6:	2900      	cmp	r1, #0
 800abc8:	d0e0      	beq.n	800ab8c <HAL_UART_IRQHandler+0x108>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800abca:	0025      	movs	r5, r4
 800abcc:	3558      	adds	r5, #88	; 0x58
 800abce:	882d      	ldrh	r5, [r5, #0]
 800abd0:	428d      	cmp	r5, r1
 800abd2:	d9db      	bls.n	800ab8c <HAL_UART_IRQHandler+0x108>
        huart->RxXferCount = nb_remaining_rx_data;
 800abd4:	0025      	movs	r5, r4
 800abd6:	355a      	adds	r5, #90	; 0x5a
 800abd8:	8029      	strh	r1, [r5, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800abda:	2520      	movs	r5, #32
 800abdc:	6801      	ldr	r1, [r0, #0]
 800abde:	4029      	ands	r1, r5
 800abe0:	d12f      	bne.n	800ac42 <HAL_UART_IRQHandler+0x1be>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abe2:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abe6:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abea:	6820      	ldr	r0, [r4, #0]
 800abec:	4a4f      	ldr	r2, [pc, #316]	; (800ad2c <HAL_UART_IRQHandler+0x2a8>)
 800abee:	6800      	ldr	r0, [r0, #0]
 800abf0:	4010      	ands	r0, r2
 800abf2:	6822      	ldr	r2, [r4, #0]
 800abf4:	6010      	str	r0, [r2, #0]
 800abf6:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abfa:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abfe:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac02:	6827      	ldr	r7, [r4, #0]
 800ac04:	68b8      	ldr	r0, [r7, #8]
 800ac06:	4398      	bics	r0, r3
 800ac08:	60b8      	str	r0, [r7, #8]
 800ac0a:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac0e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac12:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac16:	6827      	ldr	r7, [r4, #0]
 800ac18:	68b8      	ldr	r0, [r7, #8]
 800ac1a:	43b0      	bics	r0, r6
 800ac1c:	60b8      	str	r0, [r7, #8]
 800ac1e:	f38c 8810 	msr	PRIMASK, ip
          huart->RxState = HAL_UART_STATE_READY;
 800ac22:	67e5      	str	r5, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac24:	6621      	str	r1, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac26:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac2a:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac2e:	2210      	movs	r2, #16
 800ac30:	6821      	ldr	r1, [r4, #0]
 800ac32:	680b      	ldr	r3, [r1, #0]
 800ac34:	4393      	bics	r3, r2
 800ac36:	600b      	str	r3, [r1, #0]
 800ac38:	f380 8810 	msr	PRIMASK, r0
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ac3c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800ac3e:	f7fe fb60 	bl	8009302 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ac42:	0023      	movs	r3, r4
 800ac44:	0022      	movs	r2, r4
 800ac46:	335a      	adds	r3, #90	; 0x5a
 800ac48:	3258      	adds	r2, #88	; 0x58
 800ac4a:	881b      	ldrh	r3, [r3, #0]
 800ac4c:	8811      	ldrh	r1, [r2, #0]
 800ac4e:	1ac9      	subs	r1, r1, r3
 800ac50:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ac52:	0020      	movs	r0, r4
 800ac54:	f7ff ff15 	bl	800aa82 <HAL_UARTEx_RxEventCallback>
 800ac58:	e798      	b.n	800ab8c <HAL_UART_IRQHandler+0x108>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ac5a:	0026      	movs	r6, r4
 800ac5c:	365a      	adds	r6, #90	; 0x5a
 800ac5e:	8835      	ldrh	r5, [r6, #0]
      if ((huart->RxXferCount > 0U)
 800ac60:	8831      	ldrh	r1, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ac62:	b2ad      	uxth	r5, r5
      if ((huart->RxXferCount > 0U)
 800ac64:	2900      	cmp	r1, #0
 800ac66:	d100      	bne.n	800ac6a <HAL_UART_IRQHandler+0x1e6>
 800ac68:	e790      	b.n	800ab8c <HAL_UART_IRQHandler+0x108>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ac6a:	0021      	movs	r1, r4
 800ac6c:	3158      	adds	r1, #88	; 0x58
 800ac6e:	8809      	ldrh	r1, [r1, #0]
 800ac70:	1b49      	subs	r1, r1, r5
 800ac72:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800ac74:	2900      	cmp	r1, #0
 800ac76:	d100      	bne.n	800ac7a <HAL_UART_IRQHandler+0x1f6>
 800ac78:	e788      	b.n	800ab8c <HAL_UART_IRQHandler+0x108>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac7a:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac7e:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac82:	6826      	ldr	r6, [r4, #0]
 800ac84:	4a2a      	ldr	r2, [pc, #168]	; (800ad30 <HAL_UART_IRQHandler+0x2ac>)
 800ac86:	6835      	ldr	r5, [r6, #0]
 800ac88:	4015      	ands	r5, r2
 800ac8a:	6035      	str	r5, [r6, #0]
 800ac8c:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac90:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac94:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac98:	6826      	ldr	r6, [r4, #0]
 800ac9a:	68b5      	ldr	r5, [r6, #8]
 800ac9c:	439d      	bics	r5, r3
 800ac9e:	60b5      	str	r5, [r6, #8]
 800aca0:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 800aca4:	2520      	movs	r5, #32
        huart->RxISR = NULL;
 800aca6:	6660      	str	r0, [r4, #100]	; 0x64
        huart->RxState = HAL_UART_STATE_READY;
 800aca8:	67e5      	str	r5, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acaa:	6620      	str	r0, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acac:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acb0:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acb4:	6820      	ldr	r0, [r4, #0]
 800acb6:	3232      	adds	r2, #50	; 0x32
 800acb8:	6803      	ldr	r3, [r0, #0]
 800acba:	32ff      	adds	r2, #255	; 0xff
 800acbc:	4393      	bics	r3, r2
 800acbe:	6003      	str	r3, [r0, #0]
 800acc0:	f385 8810 	msr	PRIMASK, r5
 800acc4:	e7c5      	b.n	800ac52 <HAL_UART_IRQHandler+0x1ce>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800acc6:	2380      	movs	r3, #128	; 0x80
 800acc8:	035b      	lsls	r3, r3, #13
 800acca:	4219      	tst	r1, r3
 800accc:	d006      	beq.n	800acdc <HAL_UART_IRQHandler+0x258>
 800acce:	026a      	lsls	r2, r5, #9
 800acd0:	d504      	bpl.n	800acdc <HAL_UART_IRQHandler+0x258>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800acd2:	6203      	str	r3, [r0, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800acd4:	0020      	movs	r0, r4
 800acd6:	f000 fa65 	bl	800b1a4 <HAL_UARTEx_WakeupCallback>
    return;
 800acda:	e757      	b.n	800ab8c <HAL_UART_IRQHandler+0x108>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800acdc:	2380      	movs	r3, #128	; 0x80
 800acde:	4219      	tst	r1, r3
 800ace0:	d003      	beq.n	800acea <HAL_UART_IRQHandler+0x266>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ace2:	421e      	tst	r6, r3
 800ace4:	d001      	beq.n	800acea <HAL_UART_IRQHandler+0x266>
    if (huart->TxISR != NULL)
 800ace6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800ace8:	e6dd      	b.n	800aaa6 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800acea:	2240      	movs	r2, #64	; 0x40
 800acec:	4211      	tst	r1, r2
 800acee:	d100      	bne.n	800acf2 <HAL_UART_IRQHandler+0x26e>
 800acf0:	e74c      	b.n	800ab8c <HAL_UART_IRQHandler+0x108>
 800acf2:	4216      	tst	r6, r2
 800acf4:	d100      	bne.n	800acf8 <HAL_UART_IRQHandler+0x274>
 800acf6:	e749      	b.n	800ab8c <HAL_UART_IRQHandler+0x108>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acf8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acfc:	2301      	movs	r3, #1
 800acfe:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad02:	6821      	ldr	r1, [r4, #0]
 800ad04:	680b      	ldr	r3, [r1, #0]
 800ad06:	4393      	bics	r3, r2
 800ad08:	600b      	str	r3, [r1, #0]
 800ad0a:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad0e:	2320      	movs	r3, #32
 800ad10:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ad12:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad14:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 800ad16:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 800ad18:	f7ff fe48 	bl	800a9ac <HAL_UART_TxCpltCallback>
 800ad1c:	e736      	b.n	800ab8c <HAL_UART_IRQHandler+0x108>
 800ad1e:	46c0      	nop			; (mov r8, r8)
 800ad20:	0000080f 	.word	0x0000080f
 800ad24:	04000120 	.word	0x04000120
 800ad28:	0800aa6d 	.word	0x0800aa6d
 800ad2c:	fffffeff 	.word	0xfffffeff
 800ad30:	fffffedf 	.word	0xfffffedf

0800ad34 <UART_SetConfig>:
{
 800ad34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad36:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad38:	6925      	ldr	r5, [r4, #16]
 800ad3a:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 800ad3c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad3e:	432a      	orrs	r2, r5
 800ad40:	6965      	ldr	r5, [r4, #20]
 800ad42:	69c1      	ldr	r1, [r0, #28]
 800ad44:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad46:	6818      	ldr	r0, [r3, #0]
 800ad48:	4d6f      	ldr	r5, [pc, #444]	; (800af08 <UART_SetConfig+0x1d4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad4a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad4c:	4028      	ands	r0, r5
 800ad4e:	4302      	orrs	r2, r0
 800ad50:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad52:	685a      	ldr	r2, [r3, #4]
 800ad54:	486d      	ldr	r0, [pc, #436]	; (800af0c <UART_SetConfig+0x1d8>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ad56:	4d6e      	ldr	r5, [pc, #440]	; (800af10 <UART_SetConfig+0x1dc>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad58:	4002      	ands	r2, r0
 800ad5a:	68e0      	ldr	r0, [r4, #12]
 800ad5c:	4302      	orrs	r2, r0
 800ad5e:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ad60:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ad62:	42ab      	cmp	r3, r5
 800ad64:	d001      	beq.n	800ad6a <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 800ad66:	6a22      	ldr	r2, [r4, #32]
 800ad68:	4310      	orrs	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ad6a:	689a      	ldr	r2, [r3, #8]
 800ad6c:	4e69      	ldr	r6, [pc, #420]	; (800af14 <UART_SetConfig+0x1e0>)
 800ad6e:	4032      	ands	r2, r6
 800ad70:	4302      	orrs	r2, r0
 800ad72:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad74:	4a68      	ldr	r2, [pc, #416]	; (800af18 <UART_SetConfig+0x1e4>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d113      	bne.n	800ada2 <UART_SetConfig+0x6e>
 800ad7a:	2203      	movs	r2, #3
 800ad7c:	4b67      	ldr	r3, [pc, #412]	; (800af1c <UART_SetConfig+0x1e8>)
 800ad7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad80:	4013      	ands	r3, r2
 800ad82:	4a67      	ldr	r2, [pc, #412]	; (800af20 <UART_SetConfig+0x1ec>)
 800ad84:	5cd0      	ldrb	r0, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad86:	2380      	movs	r3, #128	; 0x80
 800ad88:	021b      	lsls	r3, r3, #8
 800ad8a:	4299      	cmp	r1, r3
 800ad8c:	d000      	beq.n	800ad90 <UART_SetConfig+0x5c>
 800ad8e:	e08d      	b.n	800aeac <UART_SetConfig+0x178>
    switch (clocksource)
 800ad90:	2808      	cmp	r0, #8
 800ad92:	d825      	bhi.n	800ade0 <UART_SetConfig+0xac>
 800ad94:	f7fa f9ce 	bl	8005134 <__gnu_thumb1_case_uqi>
 800ad98:	2466635e 	.word	0x2466635e
 800ad9c:	24242484 	.word	0x24242484
 800ada0:	87          	.byte	0x87
 800ada1:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ada2:	4a60      	ldr	r2, [pc, #384]	; (800af24 <UART_SetConfig+0x1f0>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d105      	bne.n	800adb4 <UART_SetConfig+0x80>
 800ada8:	220c      	movs	r2, #12
 800adaa:	4b5c      	ldr	r3, [pc, #368]	; (800af1c <UART_SetConfig+0x1e8>)
 800adac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adae:	4013      	ands	r3, r2
 800adb0:	4a5d      	ldr	r2, [pc, #372]	; (800af28 <UART_SetConfig+0x1f4>)
 800adb2:	e7e7      	b.n	800ad84 <UART_SetConfig+0x50>
 800adb4:	4a5d      	ldr	r2, [pc, #372]	; (800af2c <UART_SetConfig+0x1f8>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d100      	bne.n	800adbc <UART_SetConfig+0x88>
 800adba:	e09c      	b.n	800aef6 <UART_SetConfig+0x1c2>
 800adbc:	4a5c      	ldr	r2, [pc, #368]	; (800af30 <UART_SetConfig+0x1fc>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d100      	bne.n	800adc4 <UART_SetConfig+0x90>
 800adc2:	e098      	b.n	800aef6 <UART_SetConfig+0x1c2>
 800adc4:	42ab      	cmp	r3, r5
 800adc6:	d10b      	bne.n	800ade0 <UART_SetConfig+0xac>
 800adc8:	21c0      	movs	r1, #192	; 0xc0
 800adca:	2080      	movs	r0, #128	; 0x80
 800adcc:	4a53      	ldr	r2, [pc, #332]	; (800af1c <UART_SetConfig+0x1e8>)
 800adce:	0109      	lsls	r1, r1, #4
 800add0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800add2:	00c0      	lsls	r0, r0, #3
 800add4:	400b      	ands	r3, r1
 800add6:	4283      	cmp	r3, r0
 800add8:	d039      	beq.n	800ae4e <UART_SetConfig+0x11a>
 800adda:	d803      	bhi.n	800ade4 <UART_SetConfig+0xb0>
 800addc:	2b00      	cmp	r3, #0
 800adde:	d00a      	beq.n	800adf6 <UART_SetConfig+0xc2>
        ret = HAL_ERROR;
 800ade0:	2001      	movs	r0, #1
 800ade2:	e00d      	b.n	800ae00 <UART_SetConfig+0xcc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ade4:	2080      	movs	r0, #128	; 0x80
 800ade6:	0100      	lsls	r0, r0, #4
 800ade8:	4283      	cmp	r3, r0
 800adea:	d00d      	beq.n	800ae08 <UART_SetConfig+0xd4>
 800adec:	428b      	cmp	r3, r1
 800adee:	d1f7      	bne.n	800ade0 <UART_SetConfig+0xac>
        pclk = (uint32_t) LSE_VALUE;
 800adf0:	2080      	movs	r0, #128	; 0x80
 800adf2:	0200      	lsls	r0, r0, #8
 800adf4:	e00f      	b.n	800ae16 <UART_SetConfig+0xe2>
        pclk = HAL_RCC_GetPCLK1Freq();
 800adf6:	f7ff f8d9 	bl	8009fac <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800adfa:	2800      	cmp	r0, #0
 800adfc:	d10b      	bne.n	800ae16 <UART_SetConfig+0xe2>
 800adfe:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 800ae00:	2300      	movs	r3, #0
 800ae02:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 800ae04:	66a3      	str	r3, [r4, #104]	; 0x68
}
 800ae06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae08:	6810      	ldr	r0, [r2, #0]
          pclk = (uint32_t) HSI_VALUE;
 800ae0a:	4b4a      	ldr	r3, [pc, #296]	; (800af34 <UART_SetConfig+0x200>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae0c:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 800ae0e:	17c0      	asrs	r0, r0, #31
 800ae10:	4018      	ands	r0, r3
 800ae12:	4b49      	ldr	r3, [pc, #292]	; (800af38 <UART_SetConfig+0x204>)
 800ae14:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ae16:	2203      	movs	r2, #3
 800ae18:	6863      	ldr	r3, [r4, #4]
 800ae1a:	435a      	muls	r2, r3
 800ae1c:	4282      	cmp	r2, r0
 800ae1e:	d8df      	bhi.n	800ade0 <UART_SetConfig+0xac>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ae20:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ae22:	4282      	cmp	r2, r0
 800ae24:	d3dc      	bcc.n	800ade0 <UART_SetConfig+0xac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ae26:	2700      	movs	r7, #0
 800ae28:	0e02      	lsrs	r2, r0, #24
 800ae2a:	0201      	lsls	r1, r0, #8
 800ae2c:	085e      	lsrs	r6, r3, #1
 800ae2e:	1989      	adds	r1, r1, r6
 800ae30:	417a      	adcs	r2, r7
 800ae32:	0008      	movs	r0, r1
 800ae34:	0011      	movs	r1, r2
 800ae36:	001a      	movs	r2, r3
 800ae38:	003b      	movs	r3, r7
 800ae3a:	f7fa fb39 	bl	80054b0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ae3e:	4b3f      	ldr	r3, [pc, #252]	; (800af3c <UART_SetConfig+0x208>)
 800ae40:	18c2      	adds	r2, r0, r3
 800ae42:	4b3f      	ldr	r3, [pc, #252]	; (800af40 <UART_SetConfig+0x20c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d8cb      	bhi.n	800ade0 <UART_SetConfig+0xac>
        huart->Instance->BRR = usartdiv;
 800ae48:	6823      	ldr	r3, [r4, #0]
 800ae4a:	60d8      	str	r0, [r3, #12]
 800ae4c:	e7d7      	b.n	800adfe <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetSysClockFreq();
 800ae4e:	f7fe fcff 	bl	8009850 <HAL_RCC_GetSysClockFreq>
        break;
 800ae52:	e7d2      	b.n	800adfa <UART_SetConfig+0xc6>
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae54:	f7ff f8aa 	bl	8009fac <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	d10b      	bne.n	800ae74 <UART_SetConfig+0x140>
 800ae5c:	e7cf      	b.n	800adfe <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae5e:	f7ff f8b5 	bl	8009fcc <HAL_RCC_GetPCLK2Freq>
        break;
 800ae62:	e7f9      	b.n	800ae58 <UART_SetConfig+0x124>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae64:	4b2d      	ldr	r3, [pc, #180]	; (800af1c <UART_SetConfig+0x1e8>)
 800ae66:	6818      	ldr	r0, [r3, #0]
          pclk = (uint32_t) HSI_VALUE;
 800ae68:	4b32      	ldr	r3, [pc, #200]	; (800af34 <UART_SetConfig+0x200>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae6a:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 800ae6c:	17c0      	asrs	r0, r0, #31
 800ae6e:	4018      	ands	r0, r3
 800ae70:	4b31      	ldr	r3, [pc, #196]	; (800af38 <UART_SetConfig+0x204>)
 800ae72:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ae74:	6863      	ldr	r3, [r4, #4]
 800ae76:	0040      	lsls	r0, r0, #1
 800ae78:	085b      	lsrs	r3, r3, #1
 800ae7a:	18c0      	adds	r0, r0, r3
 800ae7c:	6861      	ldr	r1, [r4, #4]
 800ae7e:	f7fa f963 	bl	8005148 <__udivsi3>
 800ae82:	0403      	lsls	r3, r0, #16
 800ae84:	0c1a      	lsrs	r2, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae86:	492f      	ldr	r1, [pc, #188]	; (800af44 <UART_SetConfig+0x210>)
 800ae88:	3a10      	subs	r2, #16
 800ae8a:	428a      	cmp	r2, r1
 800ae8c:	d8a8      	bhi.n	800ade0 <UART_SetConfig+0xac>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae8e:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae90:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae92:	4390      	bics	r0, r2
 800ae94:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 800ae96:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae98:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 800ae9a:	4318      	orrs	r0, r3
 800ae9c:	60d0      	str	r0, [r2, #12]
 800ae9e:	e7ae      	b.n	800adfe <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetSysClockFreq();
 800aea0:	f7fe fcd6 	bl	8009850 <HAL_RCC_GetSysClockFreq>
        break;
 800aea4:	e7d8      	b.n	800ae58 <UART_SetConfig+0x124>
        pclk = (uint32_t) LSE_VALUE;
 800aea6:	2080      	movs	r0, #128	; 0x80
 800aea8:	0200      	lsls	r0, r0, #8
 800aeaa:	e7e3      	b.n	800ae74 <UART_SetConfig+0x140>
    switch (clocksource)
 800aeac:	2808      	cmp	r0, #8
 800aeae:	d897      	bhi.n	800ade0 <UART_SetConfig+0xac>
 800aeb0:	f7fa f936 	bl	8005120 <__gnu_thumb1_case_sqi>
 800aeb4:	96080525 	.word	0x96080525
 800aeb8:	9696961b 	.word	0x9696961b
 800aebc:	1e          	.byte	0x1e
 800aebd:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK2Freq();
 800aebe:	f7ff f885 	bl	8009fcc <HAL_RCC_GetPCLK2Freq>
        break;
 800aec2:	e01e      	b.n	800af02 <UART_SetConfig+0x1ce>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aec4:	4b15      	ldr	r3, [pc, #84]	; (800af1c <UART_SetConfig+0x1e8>)
 800aec6:	6818      	ldr	r0, [r3, #0]
          pclk = (uint32_t) HSI_VALUE;
 800aec8:	4b1a      	ldr	r3, [pc, #104]	; (800af34 <UART_SetConfig+0x200>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aeca:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 800aecc:	17c0      	asrs	r0, r0, #31
 800aece:	4018      	ands	r0, r3
 800aed0:	4b19      	ldr	r3, [pc, #100]	; (800af38 <UART_SetConfig+0x204>)
 800aed2:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aed4:	6863      	ldr	r3, [r4, #4]
 800aed6:	6861      	ldr	r1, [r4, #4]
 800aed8:	085b      	lsrs	r3, r3, #1
 800aeda:	1818      	adds	r0, r3, r0
 800aedc:	f7fa f934 	bl	8005148 <__udivsi3>
 800aee0:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aee2:	0002      	movs	r2, r0
 800aee4:	4b17      	ldr	r3, [pc, #92]	; (800af44 <UART_SetConfig+0x210>)
 800aee6:	3a10      	subs	r2, #16
 800aee8:	e7ac      	b.n	800ae44 <UART_SetConfig+0x110>
        pclk = HAL_RCC_GetSysClockFreq();
 800aeea:	f7fe fcb1 	bl	8009850 <HAL_RCC_GetSysClockFreq>
        break;
 800aeee:	e008      	b.n	800af02 <UART_SetConfig+0x1ce>
        pclk = (uint32_t) LSE_VALUE;
 800aef0:	2080      	movs	r0, #128	; 0x80
 800aef2:	0200      	lsls	r0, r0, #8
 800aef4:	e7ee      	b.n	800aed4 <UART_SetConfig+0x1a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aef6:	2380      	movs	r3, #128	; 0x80
 800aef8:	021b      	lsls	r3, r3, #8
 800aefa:	4299      	cmp	r1, r3
 800aefc:	d0aa      	beq.n	800ae54 <UART_SetConfig+0x120>
        pclk = HAL_RCC_GetPCLK1Freq();
 800aefe:	f7ff f855 	bl	8009fac <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800af02:	2800      	cmp	r0, #0
 800af04:	d1e6      	bne.n	800aed4 <UART_SetConfig+0x1a0>
 800af06:	e77a      	b.n	800adfe <UART_SetConfig+0xca>
 800af08:	efff69f3 	.word	0xefff69f3
 800af0c:	ffffcfff 	.word	0xffffcfff
 800af10:	40004800 	.word	0x40004800
 800af14:	fffff4ff 	.word	0xfffff4ff
 800af18:	40013800 	.word	0x40013800
 800af1c:	40021000 	.word	0x40021000
 800af20:	0800feb1 	.word	0x0800feb1
 800af24:	40004400 	.word	0x40004400
 800af28:	0800feb5 	.word	0x0800feb5
 800af2c:	40004c00 	.word	0x40004c00
 800af30:	40005000 	.word	0x40005000
 800af34:	ff48e500 	.word	0xff48e500
 800af38:	00f42400 	.word	0x00f42400
 800af3c:	fffffd00 	.word	0xfffffd00
 800af40:	000ffcff 	.word	0x000ffcff
 800af44:	0000ffef 	.word	0x0000ffef

0800af48 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af48:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800af4a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af4c:	07da      	lsls	r2, r3, #31
 800af4e:	d506      	bpl.n	800af5e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af50:	6801      	ldr	r1, [r0, #0]
 800af52:	4c28      	ldr	r4, [pc, #160]	; (800aff4 <UART_AdvFeatureConfig+0xac>)
 800af54:	684a      	ldr	r2, [r1, #4]
 800af56:	4022      	ands	r2, r4
 800af58:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800af5a:	4322      	orrs	r2, r4
 800af5c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af5e:	079a      	lsls	r2, r3, #30
 800af60:	d506      	bpl.n	800af70 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af62:	6801      	ldr	r1, [r0, #0]
 800af64:	4c24      	ldr	r4, [pc, #144]	; (800aff8 <UART_AdvFeatureConfig+0xb0>)
 800af66:	684a      	ldr	r2, [r1, #4]
 800af68:	4022      	ands	r2, r4
 800af6a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800af6c:	4322      	orrs	r2, r4
 800af6e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af70:	075a      	lsls	r2, r3, #29
 800af72:	d506      	bpl.n	800af82 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af74:	6801      	ldr	r1, [r0, #0]
 800af76:	4c21      	ldr	r4, [pc, #132]	; (800affc <UART_AdvFeatureConfig+0xb4>)
 800af78:	684a      	ldr	r2, [r1, #4]
 800af7a:	4022      	ands	r2, r4
 800af7c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800af7e:	4322      	orrs	r2, r4
 800af80:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800af82:	071a      	lsls	r2, r3, #28
 800af84:	d506      	bpl.n	800af94 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800af86:	6801      	ldr	r1, [r0, #0]
 800af88:	4c1d      	ldr	r4, [pc, #116]	; (800b000 <UART_AdvFeatureConfig+0xb8>)
 800af8a:	684a      	ldr	r2, [r1, #4]
 800af8c:	4022      	ands	r2, r4
 800af8e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800af90:	4322      	orrs	r2, r4
 800af92:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af94:	06da      	lsls	r2, r3, #27
 800af96:	d506      	bpl.n	800afa6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af98:	6801      	ldr	r1, [r0, #0]
 800af9a:	4c1a      	ldr	r4, [pc, #104]	; (800b004 <UART_AdvFeatureConfig+0xbc>)
 800af9c:	688a      	ldr	r2, [r1, #8]
 800af9e:	4022      	ands	r2, r4
 800afa0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800afa2:	4322      	orrs	r2, r4
 800afa4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800afa6:	069a      	lsls	r2, r3, #26
 800afa8:	d506      	bpl.n	800afb8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800afaa:	6801      	ldr	r1, [r0, #0]
 800afac:	4c16      	ldr	r4, [pc, #88]	; (800b008 <UART_AdvFeatureConfig+0xc0>)
 800afae:	688a      	ldr	r2, [r1, #8]
 800afb0:	4022      	ands	r2, r4
 800afb2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800afb4:	4322      	orrs	r2, r4
 800afb6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800afb8:	065a      	lsls	r2, r3, #25
 800afba:	d510      	bpl.n	800afde <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800afbc:	6801      	ldr	r1, [r0, #0]
 800afbe:	4d13      	ldr	r5, [pc, #76]	; (800b00c <UART_AdvFeatureConfig+0xc4>)
 800afc0:	684a      	ldr	r2, [r1, #4]
 800afc2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800afc4:	402a      	ands	r2, r5
 800afc6:	4322      	orrs	r2, r4
 800afc8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800afca:	2280      	movs	r2, #128	; 0x80
 800afcc:	0352      	lsls	r2, r2, #13
 800afce:	4294      	cmp	r4, r2
 800afd0:	d105      	bne.n	800afde <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800afd2:	684a      	ldr	r2, [r1, #4]
 800afd4:	4c0e      	ldr	r4, [pc, #56]	; (800b010 <UART_AdvFeatureConfig+0xc8>)
 800afd6:	4022      	ands	r2, r4
 800afd8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800afda:	4322      	orrs	r2, r4
 800afdc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800afde:	061b      	lsls	r3, r3, #24
 800afe0:	d506      	bpl.n	800aff0 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800afe2:	6802      	ldr	r2, [r0, #0]
 800afe4:	490b      	ldr	r1, [pc, #44]	; (800b014 <UART_AdvFeatureConfig+0xcc>)
 800afe6:	6853      	ldr	r3, [r2, #4]
 800afe8:	400b      	ands	r3, r1
 800afea:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800afec:	430b      	orrs	r3, r1
 800afee:	6053      	str	r3, [r2, #4]
}
 800aff0:	bd30      	pop	{r4, r5, pc}
 800aff2:	46c0      	nop			; (mov r8, r8)
 800aff4:	fffdffff 	.word	0xfffdffff
 800aff8:	fffeffff 	.word	0xfffeffff
 800affc:	fffbffff 	.word	0xfffbffff
 800b000:	ffff7fff 	.word	0xffff7fff
 800b004:	ffffefff 	.word	0xffffefff
 800b008:	ffffdfff 	.word	0xffffdfff
 800b00c:	ffefffff 	.word	0xffefffff
 800b010:	ff9fffff 	.word	0xff9fffff
 800b014:	fff7ffff 	.word	0xfff7ffff

0800b018 <UART_WaitOnFlagUntilTimeout>:
{
 800b018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b01a:	2780      	movs	r7, #128	; 0x80
{
 800b01c:	0004      	movs	r4, r0
 800b01e:	000e      	movs	r6, r1
 800b020:	0015      	movs	r5, r2
 800b022:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b024:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b026:	6822      	ldr	r2, [r4, #0]
 800b028:	69d3      	ldr	r3, [r2, #28]
 800b02a:	4033      	ands	r3, r6
 800b02c:	1b9b      	subs	r3, r3, r6
 800b02e:	4259      	negs	r1, r3
 800b030:	414b      	adcs	r3, r1
 800b032:	42ab      	cmp	r3, r5
 800b034:	d001      	beq.n	800b03a <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 800b036:	2000      	movs	r0, #0
 800b038:	e028      	b.n	800b08c <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 800b03a:	9b08      	ldr	r3, [sp, #32]
 800b03c:	3301      	adds	r3, #1
 800b03e:	d0f3      	beq.n	800b028 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b040:	f7fe f820 	bl	8009084 <HAL_GetTick>
 800b044:	9b01      	ldr	r3, [sp, #4]
 800b046:	1ac0      	subs	r0, r0, r3
 800b048:	9b08      	ldr	r3, [sp, #32]
 800b04a:	4298      	cmp	r0, r3
 800b04c:	d801      	bhi.n	800b052 <UART_WaitOnFlagUntilTimeout+0x3a>
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d11d      	bne.n	800b08e <UART_WaitOnFlagUntilTimeout+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b052:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b056:	2201      	movs	r2, #1
 800b058:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b05c:	6821      	ldr	r1, [r4, #0]
 800b05e:	4d1e      	ldr	r5, [pc, #120]	; (800b0d8 <UART_WaitOnFlagUntilTimeout+0xc0>)
 800b060:	680b      	ldr	r3, [r1, #0]
 800b062:	402b      	ands	r3, r5
 800b064:	600b      	str	r3, [r1, #0]
 800b066:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b06a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b06e:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b072:	6821      	ldr	r1, [r4, #0]
 800b074:	688b      	ldr	r3, [r1, #8]
 800b076:	4393      	bics	r3, r2
 800b078:	608b      	str	r3, [r1, #8]
 800b07a:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 800b07e:	2320      	movs	r3, #32
 800b080:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b082:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 800b084:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800b086:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800b088:	3474      	adds	r4, #116	; 0x74
 800b08a:	7023      	strb	r3, [r4, #0]
}
 800b08c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b08e:	2104      	movs	r1, #4
 800b090:	6823      	ldr	r3, [r4, #0]
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	420a      	tst	r2, r1
 800b096:	d0c6      	beq.n	800b026 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b098:	69da      	ldr	r2, [r3, #28]
 800b09a:	423a      	tst	r2, r7
 800b09c:	d0c3      	beq.n	800b026 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b09e:	621f      	str	r7, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0a0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b0aa:	6821      	ldr	r1, [r4, #0]
 800b0ac:	4d0a      	ldr	r5, [pc, #40]	; (800b0d8 <UART_WaitOnFlagUntilTimeout+0xc0>)
 800b0ae:	680b      	ldr	r3, [r1, #0]
 800b0b0:	402b      	ands	r3, r5
 800b0b2:	600b      	str	r3, [r1, #0]
 800b0b4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0b8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0bc:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0c0:	6821      	ldr	r1, [r4, #0]
 800b0c2:	688b      	ldr	r3, [r1, #8]
 800b0c4:	4393      	bics	r3, r2
 800b0c6:	608b      	str	r3, [r1, #8]
 800b0c8:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 800b0cc:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b0ce:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 800b0d0:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b0d2:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b0d4:	67d3      	str	r3, [r2, #124]	; 0x7c
 800b0d6:	e7d5      	b.n	800b084 <UART_WaitOnFlagUntilTimeout+0x6c>
 800b0d8:	fffffe5f 	.word	0xfffffe5f

0800b0dc <UART_CheckIdleState>:
{
 800b0dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0de:	2600      	movs	r6, #0
{
 800b0e0:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0e2:	1d03      	adds	r3, r0, #4
 800b0e4:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800b0e6:	f7fd ffcd 	bl	8009084 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b0ea:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800b0ec:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	071b      	lsls	r3, r3, #28
 800b0f2:	d416      	bmi.n	800b122 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b0f4:	6823      	ldr	r3, [r4, #0]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	075b      	lsls	r3, r3, #29
 800b0fa:	d50a      	bpl.n	800b112 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0fc:	2180      	movs	r1, #128	; 0x80
 800b0fe:	4b0f      	ldr	r3, [pc, #60]	; (800b13c <UART_CheckIdleState+0x60>)
 800b100:	2200      	movs	r2, #0
 800b102:	9300      	str	r3, [sp, #0]
 800b104:	03c9      	lsls	r1, r1, #15
 800b106:	002b      	movs	r3, r5
 800b108:	0020      	movs	r0, r4
 800b10a:	f7ff ff85 	bl	800b018 <UART_WaitOnFlagUntilTimeout>
 800b10e:	2800      	cmp	r0, #0
 800b110:	d112      	bne.n	800b138 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 800b112:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b114:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800b116:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b118:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b11a:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 800b11c:	3474      	adds	r4, #116	; 0x74
 800b11e:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800b120:	e00b      	b.n	800b13a <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b122:	2180      	movs	r1, #128	; 0x80
 800b124:	4b05      	ldr	r3, [pc, #20]	; (800b13c <UART_CheckIdleState+0x60>)
 800b126:	0032      	movs	r2, r6
 800b128:	9300      	str	r3, [sp, #0]
 800b12a:	0389      	lsls	r1, r1, #14
 800b12c:	0003      	movs	r3, r0
 800b12e:	0020      	movs	r0, r4
 800b130:	f7ff ff72 	bl	800b018 <UART_WaitOnFlagUntilTimeout>
 800b134:	2800      	cmp	r0, #0
 800b136:	d0dd      	beq.n	800b0f4 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800b138:	2003      	movs	r0, #3
}
 800b13a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800b13c:	01ffffff 	.word	0x01ffffff

0800b140 <HAL_UART_Init>:
{
 800b140:	b510      	push	{r4, lr}
 800b142:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800b144:	d101      	bne.n	800b14a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800b146:	2001      	movs	r0, #1
}
 800b148:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800b14a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d104      	bne.n	800b15a <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 800b150:	0002      	movs	r2, r0
 800b152:	3274      	adds	r2, #116	; 0x74
 800b154:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800b156:	f7fd fde5 	bl	8008d24 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800b15a:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800b15c:	2101      	movs	r1, #1
 800b15e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b160:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 800b162:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b164:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800b166:	438b      	bics	r3, r1
 800b168:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b16a:	f7ff fde3 	bl	800ad34 <UART_SetConfig>
 800b16e:	2801      	cmp	r0, #1
 800b170:	d0e9      	beq.n	800b146 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b174:	2b00      	cmp	r3, #0
 800b176:	d002      	beq.n	800b17e <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 800b178:	0020      	movs	r0, r4
 800b17a:	f7ff fee5 	bl	800af48 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b17e:	6823      	ldr	r3, [r4, #0]
 800b180:	4907      	ldr	r1, [pc, #28]	; (800b1a0 <HAL_UART_Init+0x60>)
 800b182:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800b184:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b186:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b188:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b18a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b18c:	689a      	ldr	r2, [r3, #8]
 800b18e:	438a      	bics	r2, r1
 800b190:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800b192:	2201      	movs	r2, #1
 800b194:	6819      	ldr	r1, [r3, #0]
 800b196:	430a      	orrs	r2, r1
 800b198:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800b19a:	f7ff ff9f 	bl	800b0dc <UART_CheckIdleState>
 800b19e:	e7d3      	b.n	800b148 <HAL_UART_Init+0x8>
 800b1a0:	ffffb7ff 	.word	0xffffb7ff

0800b1a4 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b1a4:	4770      	bx	lr
	...

0800b1a8 <__errno>:
 800b1a8:	4b01      	ldr	r3, [pc, #4]	; (800b1b0 <__errno+0x8>)
 800b1aa:	6818      	ldr	r0, [r3, #0]
 800b1ac:	4770      	bx	lr
 800b1ae:	46c0      	nop			; (mov r8, r8)
 800b1b0:	20000124 	.word	0x20000124

0800b1b4 <__libc_init_array>:
 800b1b4:	b570      	push	{r4, r5, r6, lr}
 800b1b6:	2600      	movs	r6, #0
 800b1b8:	4d0c      	ldr	r5, [pc, #48]	; (800b1ec <__libc_init_array+0x38>)
 800b1ba:	4c0d      	ldr	r4, [pc, #52]	; (800b1f0 <__libc_init_array+0x3c>)
 800b1bc:	1b64      	subs	r4, r4, r5
 800b1be:	10a4      	asrs	r4, r4, #2
 800b1c0:	42a6      	cmp	r6, r4
 800b1c2:	d109      	bne.n	800b1d8 <__libc_init_array+0x24>
 800b1c4:	2600      	movs	r6, #0
 800b1c6:	f004 fac3 	bl	800f750 <_init>
 800b1ca:	4d0a      	ldr	r5, [pc, #40]	; (800b1f4 <__libc_init_array+0x40>)
 800b1cc:	4c0a      	ldr	r4, [pc, #40]	; (800b1f8 <__libc_init_array+0x44>)
 800b1ce:	1b64      	subs	r4, r4, r5
 800b1d0:	10a4      	asrs	r4, r4, #2
 800b1d2:	42a6      	cmp	r6, r4
 800b1d4:	d105      	bne.n	800b1e2 <__libc_init_array+0x2e>
 800b1d6:	bd70      	pop	{r4, r5, r6, pc}
 800b1d8:	00b3      	lsls	r3, r6, #2
 800b1da:	58eb      	ldr	r3, [r5, r3]
 800b1dc:	4798      	blx	r3
 800b1de:	3601      	adds	r6, #1
 800b1e0:	e7ee      	b.n	800b1c0 <__libc_init_array+0xc>
 800b1e2:	00b3      	lsls	r3, r6, #2
 800b1e4:	58eb      	ldr	r3, [r5, r3]
 800b1e6:	4798      	blx	r3
 800b1e8:	3601      	adds	r6, #1
 800b1ea:	e7f2      	b.n	800b1d2 <__libc_init_array+0x1e>
 800b1ec:	080101f0 	.word	0x080101f0
 800b1f0:	080101f0 	.word	0x080101f0
 800b1f4:	080101f0 	.word	0x080101f0
 800b1f8:	080101f4 	.word	0x080101f4

0800b1fc <memcmp>:
 800b1fc:	b530      	push	{r4, r5, lr}
 800b1fe:	2400      	movs	r4, #0
 800b200:	42a2      	cmp	r2, r4
 800b202:	d101      	bne.n	800b208 <memcmp+0xc>
 800b204:	2000      	movs	r0, #0
 800b206:	e005      	b.n	800b214 <memcmp+0x18>
 800b208:	5d03      	ldrb	r3, [r0, r4]
 800b20a:	1c65      	adds	r5, r4, #1
 800b20c:	5d0c      	ldrb	r4, [r1, r4]
 800b20e:	42a3      	cmp	r3, r4
 800b210:	d001      	beq.n	800b216 <memcmp+0x1a>
 800b212:	1b18      	subs	r0, r3, r4
 800b214:	bd30      	pop	{r4, r5, pc}
 800b216:	002c      	movs	r4, r5
 800b218:	e7f2      	b.n	800b200 <memcmp+0x4>

0800b21a <memcpy>:
 800b21a:	2300      	movs	r3, #0
 800b21c:	b510      	push	{r4, lr}
 800b21e:	429a      	cmp	r2, r3
 800b220:	d100      	bne.n	800b224 <memcpy+0xa>
 800b222:	bd10      	pop	{r4, pc}
 800b224:	5ccc      	ldrb	r4, [r1, r3]
 800b226:	54c4      	strb	r4, [r0, r3]
 800b228:	3301      	adds	r3, #1
 800b22a:	e7f8      	b.n	800b21e <memcpy+0x4>

0800b22c <memset>:
 800b22c:	0003      	movs	r3, r0
 800b22e:	1812      	adds	r2, r2, r0
 800b230:	4293      	cmp	r3, r2
 800b232:	d100      	bne.n	800b236 <memset+0xa>
 800b234:	4770      	bx	lr
 800b236:	7019      	strb	r1, [r3, #0]
 800b238:	3301      	adds	r3, #1
 800b23a:	e7f9      	b.n	800b230 <memset+0x4>

0800b23c <__cvt>:
 800b23c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b23e:	b08b      	sub	sp, #44	; 0x2c
 800b240:	0014      	movs	r4, r2
 800b242:	1e1d      	subs	r5, r3, #0
 800b244:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b246:	da53      	bge.n	800b2f0 <__cvt+0xb4>
 800b248:	2480      	movs	r4, #128	; 0x80
 800b24a:	0624      	lsls	r4, r4, #24
 800b24c:	191b      	adds	r3, r3, r4
 800b24e:	001d      	movs	r5, r3
 800b250:	0014      	movs	r4, r2
 800b252:	232d      	movs	r3, #45	; 0x2d
 800b254:	700b      	strb	r3, [r1, #0]
 800b256:	2320      	movs	r3, #32
 800b258:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800b25a:	2203      	movs	r2, #3
 800b25c:	439e      	bics	r6, r3
 800b25e:	2e46      	cmp	r6, #70	; 0x46
 800b260:	d007      	beq.n	800b272 <__cvt+0x36>
 800b262:	0033      	movs	r3, r6
 800b264:	3b45      	subs	r3, #69	; 0x45
 800b266:	4259      	negs	r1, r3
 800b268:	414b      	adcs	r3, r1
 800b26a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b26c:	3a01      	subs	r2, #1
 800b26e:	18cb      	adds	r3, r1, r3
 800b270:	9310      	str	r3, [sp, #64]	; 0x40
 800b272:	ab09      	add	r3, sp, #36	; 0x24
 800b274:	9304      	str	r3, [sp, #16]
 800b276:	ab08      	add	r3, sp, #32
 800b278:	9303      	str	r3, [sp, #12]
 800b27a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b27c:	9200      	str	r2, [sp, #0]
 800b27e:	9302      	str	r3, [sp, #8]
 800b280:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b282:	0022      	movs	r2, r4
 800b284:	9301      	str	r3, [sp, #4]
 800b286:	002b      	movs	r3, r5
 800b288:	f001 fdd8 	bl	800ce3c <_dtoa_r>
 800b28c:	0007      	movs	r7, r0
 800b28e:	2e47      	cmp	r6, #71	; 0x47
 800b290:	d102      	bne.n	800b298 <__cvt+0x5c>
 800b292:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b294:	07db      	lsls	r3, r3, #31
 800b296:	d524      	bpl.n	800b2e2 <__cvt+0xa6>
 800b298:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b29a:	18fb      	adds	r3, r7, r3
 800b29c:	9307      	str	r3, [sp, #28]
 800b29e:	2e46      	cmp	r6, #70	; 0x46
 800b2a0:	d114      	bne.n	800b2cc <__cvt+0x90>
 800b2a2:	783b      	ldrb	r3, [r7, #0]
 800b2a4:	2b30      	cmp	r3, #48	; 0x30
 800b2a6:	d10c      	bne.n	800b2c2 <__cvt+0x86>
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	0020      	movs	r0, r4
 800b2ae:	0029      	movs	r1, r5
 800b2b0:	f7fa f8d0 	bl	8005454 <__aeabi_dcmpeq>
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	d104      	bne.n	800b2c2 <__cvt+0x86>
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b2bc:	1a9b      	subs	r3, r3, r2
 800b2be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b2c0:	6013      	str	r3, [r2, #0]
 800b2c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b2c4:	9a07      	ldr	r2, [sp, #28]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	18d3      	adds	r3, r2, r3
 800b2ca:	9307      	str	r3, [sp, #28]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	0020      	movs	r0, r4
 800b2d2:	0029      	movs	r1, r5
 800b2d4:	f7fa f8be 	bl	8005454 <__aeabi_dcmpeq>
 800b2d8:	2230      	movs	r2, #48	; 0x30
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	d00d      	beq.n	800b2fa <__cvt+0xbe>
 800b2de:	9b07      	ldr	r3, [sp, #28]
 800b2e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b2e2:	0038      	movs	r0, r7
 800b2e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b2e8:	1bdb      	subs	r3, r3, r7
 800b2ea:	6013      	str	r3, [r2, #0]
 800b2ec:	b00b      	add	sp, #44	; 0x2c
 800b2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	e7af      	b.n	800b254 <__cvt+0x18>
 800b2f4:	1c59      	adds	r1, r3, #1
 800b2f6:	9109      	str	r1, [sp, #36]	; 0x24
 800b2f8:	701a      	strb	r2, [r3, #0]
 800b2fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2fc:	9907      	ldr	r1, [sp, #28]
 800b2fe:	428b      	cmp	r3, r1
 800b300:	d3f8      	bcc.n	800b2f4 <__cvt+0xb8>
 800b302:	e7ee      	b.n	800b2e2 <__cvt+0xa6>

0800b304 <__exponent>:
 800b304:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b306:	1c83      	adds	r3, r0, #2
 800b308:	b085      	sub	sp, #20
 800b30a:	9301      	str	r3, [sp, #4]
 800b30c:	0006      	movs	r6, r0
 800b30e:	000c      	movs	r4, r1
 800b310:	7002      	strb	r2, [r0, #0]
 800b312:	232b      	movs	r3, #43	; 0x2b
 800b314:	2900      	cmp	r1, #0
 800b316:	da01      	bge.n	800b31c <__exponent+0x18>
 800b318:	232d      	movs	r3, #45	; 0x2d
 800b31a:	424c      	negs	r4, r1
 800b31c:	7073      	strb	r3, [r6, #1]
 800b31e:	2c09      	cmp	r4, #9
 800b320:	dd22      	ble.n	800b368 <__exponent+0x64>
 800b322:	ab02      	add	r3, sp, #8
 800b324:	1ddd      	adds	r5, r3, #7
 800b326:	0020      	movs	r0, r4
 800b328:	210a      	movs	r1, #10
 800b32a:	f7fa f87d 	bl	8005428 <__aeabi_idivmod>
 800b32e:	1e6f      	subs	r7, r5, #1
 800b330:	3130      	adds	r1, #48	; 0x30
 800b332:	7039      	strb	r1, [r7, #0]
 800b334:	0020      	movs	r0, r4
 800b336:	210a      	movs	r1, #10
 800b338:	f7f9 ff90 	bl	800525c <__divsi3>
 800b33c:	0004      	movs	r4, r0
 800b33e:	2809      	cmp	r0, #9
 800b340:	dc0b      	bgt.n	800b35a <__exponent+0x56>
 800b342:	3d02      	subs	r5, #2
 800b344:	3430      	adds	r4, #48	; 0x30
 800b346:	9b01      	ldr	r3, [sp, #4]
 800b348:	702c      	strb	r4, [r5, #0]
 800b34a:	aa02      	add	r2, sp, #8
 800b34c:	3207      	adds	r2, #7
 800b34e:	0018      	movs	r0, r3
 800b350:	42aa      	cmp	r2, r5
 800b352:	d804      	bhi.n	800b35e <__exponent+0x5a>
 800b354:	1b80      	subs	r0, r0, r6
 800b356:	b005      	add	sp, #20
 800b358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b35a:	003d      	movs	r5, r7
 800b35c:	e7e3      	b.n	800b326 <__exponent+0x22>
 800b35e:	782a      	ldrb	r2, [r5, #0]
 800b360:	3501      	adds	r5, #1
 800b362:	701a      	strb	r2, [r3, #0]
 800b364:	3301      	adds	r3, #1
 800b366:	e7f0      	b.n	800b34a <__exponent+0x46>
 800b368:	2330      	movs	r3, #48	; 0x30
 800b36a:	18e4      	adds	r4, r4, r3
 800b36c:	70b3      	strb	r3, [r6, #2]
 800b36e:	1d30      	adds	r0, r6, #4
 800b370:	70f4      	strb	r4, [r6, #3]
 800b372:	e7ef      	b.n	800b354 <__exponent+0x50>

0800b374 <_printf_float>:
 800b374:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b376:	b095      	sub	sp, #84	; 0x54
 800b378:	000c      	movs	r4, r1
 800b37a:	920a      	str	r2, [sp, #40]	; 0x28
 800b37c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b37e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b380:	9009      	str	r0, [sp, #36]	; 0x24
 800b382:	f002 ff47 	bl	800e214 <_localeconv_r>
 800b386:	6803      	ldr	r3, [r0, #0]
 800b388:	0018      	movs	r0, r3
 800b38a:	930c      	str	r3, [sp, #48]	; 0x30
 800b38c:	f7f9 fec0 	bl	8005110 <strlen>
 800b390:	2300      	movs	r3, #0
 800b392:	9312      	str	r3, [sp, #72]	; 0x48
 800b394:	6823      	ldr	r3, [r4, #0]
 800b396:	900e      	str	r0, [sp, #56]	; 0x38
 800b398:	930d      	str	r3, [sp, #52]	; 0x34
 800b39a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b39c:	7e27      	ldrb	r7, [r4, #24]
 800b39e:	682b      	ldr	r3, [r5, #0]
 800b3a0:	2207      	movs	r2, #7
 800b3a2:	05c9      	lsls	r1, r1, #23
 800b3a4:	d545      	bpl.n	800b432 <_printf_float+0xbe>
 800b3a6:	189b      	adds	r3, r3, r2
 800b3a8:	4393      	bics	r3, r2
 800b3aa:	001a      	movs	r2, r3
 800b3ac:	3208      	adds	r2, #8
 800b3ae:	602a      	str	r2, [r5, #0]
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	64a2      	str	r2, [r4, #72]	; 0x48
 800b3b6:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800b3bc:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 800b3be:	006b      	lsls	r3, r5, #1
 800b3c0:	085b      	lsrs	r3, r3, #1
 800b3c2:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3c4:	4252      	negs	r2, r2
 800b3c6:	4bac      	ldr	r3, [pc, #688]	; (800b678 <_printf_float+0x304>)
 800b3c8:	0030      	movs	r0, r6
 800b3ca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b3cc:	f7fc f9ba 	bl	8007744 <__aeabi_dcmpun>
 800b3d0:	2800      	cmp	r0, #0
 800b3d2:	d130      	bne.n	800b436 <_printf_float+0xc2>
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	4ba8      	ldr	r3, [pc, #672]	; (800b678 <_printf_float+0x304>)
 800b3d8:	4252      	negs	r2, r2
 800b3da:	0030      	movs	r0, r6
 800b3dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b3de:	f7fa f849 	bl	8005474 <__aeabi_dcmple>
 800b3e2:	2800      	cmp	r0, #0
 800b3e4:	d127      	bne.n	800b436 <_printf_float+0xc2>
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	0030      	movs	r0, r6
 800b3ec:	0029      	movs	r1, r5
 800b3ee:	f7fa f837 	bl	8005460 <__aeabi_dcmplt>
 800b3f2:	2800      	cmp	r0, #0
 800b3f4:	d003      	beq.n	800b3fe <_printf_float+0x8a>
 800b3f6:	0023      	movs	r3, r4
 800b3f8:	222d      	movs	r2, #45	; 0x2d
 800b3fa:	3343      	adds	r3, #67	; 0x43
 800b3fc:	701a      	strb	r2, [r3, #0]
 800b3fe:	4d9f      	ldr	r5, [pc, #636]	; (800b67c <_printf_float+0x308>)
 800b400:	2f47      	cmp	r7, #71	; 0x47
 800b402:	d800      	bhi.n	800b406 <_printf_float+0x92>
 800b404:	4d9e      	ldr	r5, [pc, #632]	; (800b680 <_printf_float+0x30c>)
 800b406:	2303      	movs	r3, #3
 800b408:	2600      	movs	r6, #0
 800b40a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b40c:	6123      	str	r3, [r4, #16]
 800b40e:	3301      	adds	r3, #1
 800b410:	439a      	bics	r2, r3
 800b412:	6022      	str	r2, [r4, #0]
 800b414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b416:	aa13      	add	r2, sp, #76	; 0x4c
 800b418:	9300      	str	r3, [sp, #0]
 800b41a:	0021      	movs	r1, r4
 800b41c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b41e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b420:	f000 f9f4 	bl	800b80c <_printf_common>
 800b424:	1c43      	adds	r3, r0, #1
 800b426:	d000      	beq.n	800b42a <_printf_float+0xb6>
 800b428:	e093      	b.n	800b552 <_printf_float+0x1de>
 800b42a:	2001      	movs	r0, #1
 800b42c:	4240      	negs	r0, r0
 800b42e:	b015      	add	sp, #84	; 0x54
 800b430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b432:	3307      	adds	r3, #7
 800b434:	e7b8      	b.n	800b3a8 <_printf_float+0x34>
 800b436:	0032      	movs	r2, r6
 800b438:	002b      	movs	r3, r5
 800b43a:	0030      	movs	r0, r6
 800b43c:	0029      	movs	r1, r5
 800b43e:	f7fc f981 	bl	8007744 <__aeabi_dcmpun>
 800b442:	2800      	cmp	r0, #0
 800b444:	d004      	beq.n	800b450 <_printf_float+0xdc>
 800b446:	4d8f      	ldr	r5, [pc, #572]	; (800b684 <_printf_float+0x310>)
 800b448:	2f47      	cmp	r7, #71	; 0x47
 800b44a:	d8dc      	bhi.n	800b406 <_printf_float+0x92>
 800b44c:	4d8e      	ldr	r5, [pc, #568]	; (800b688 <_printf_float+0x314>)
 800b44e:	e7da      	b.n	800b406 <_printf_float+0x92>
 800b450:	2380      	movs	r3, #128	; 0x80
 800b452:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b454:	6862      	ldr	r2, [r4, #4]
 800b456:	00db      	lsls	r3, r3, #3
 800b458:	430b      	orrs	r3, r1
 800b45a:	1c51      	adds	r1, r2, #1
 800b45c:	d143      	bne.n	800b4e6 <_printf_float+0x172>
 800b45e:	3207      	adds	r2, #7
 800b460:	6062      	str	r2, [r4, #4]
 800b462:	aa12      	add	r2, sp, #72	; 0x48
 800b464:	2100      	movs	r1, #0
 800b466:	9205      	str	r2, [sp, #20]
 800b468:	aa11      	add	r2, sp, #68	; 0x44
 800b46a:	9203      	str	r2, [sp, #12]
 800b46c:	2223      	movs	r2, #35	; 0x23
 800b46e:	6023      	str	r3, [r4, #0]
 800b470:	9106      	str	r1, [sp, #24]
 800b472:	9301      	str	r3, [sp, #4]
 800b474:	a908      	add	r1, sp, #32
 800b476:	6863      	ldr	r3, [r4, #4]
 800b478:	1852      	adds	r2, r2, r1
 800b47a:	9202      	str	r2, [sp, #8]
 800b47c:	9300      	str	r3, [sp, #0]
 800b47e:	0032      	movs	r2, r6
 800b480:	002b      	movs	r3, r5
 800b482:	9704      	str	r7, [sp, #16]
 800b484:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b486:	f7ff fed9 	bl	800b23c <__cvt>
 800b48a:	2320      	movs	r3, #32
 800b48c:	003a      	movs	r2, r7
 800b48e:	0005      	movs	r5, r0
 800b490:	439a      	bics	r2, r3
 800b492:	2a47      	cmp	r2, #71	; 0x47
 800b494:	d107      	bne.n	800b4a6 <_printf_float+0x132>
 800b496:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b498:	1cda      	adds	r2, r3, #3
 800b49a:	db02      	blt.n	800b4a2 <_printf_float+0x12e>
 800b49c:	6862      	ldr	r2, [r4, #4]
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	dd45      	ble.n	800b52e <_printf_float+0x1ba>
 800b4a2:	3f02      	subs	r7, #2
 800b4a4:	b2ff      	uxtb	r7, r7
 800b4a6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b4a8:	2f65      	cmp	r7, #101	; 0x65
 800b4aa:	d825      	bhi.n	800b4f8 <_printf_float+0x184>
 800b4ac:	0020      	movs	r0, r4
 800b4ae:	3901      	subs	r1, #1
 800b4b0:	003a      	movs	r2, r7
 800b4b2:	3050      	adds	r0, #80	; 0x50
 800b4b4:	9111      	str	r1, [sp, #68]	; 0x44
 800b4b6:	f7ff ff25 	bl	800b304 <__exponent>
 800b4ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b4bc:	0006      	movs	r6, r0
 800b4be:	1813      	adds	r3, r2, r0
 800b4c0:	6123      	str	r3, [r4, #16]
 800b4c2:	2a01      	cmp	r2, #1
 800b4c4:	dc02      	bgt.n	800b4cc <_printf_float+0x158>
 800b4c6:	6822      	ldr	r2, [r4, #0]
 800b4c8:	07d2      	lsls	r2, r2, #31
 800b4ca:	d501      	bpl.n	800b4d0 <_printf_float+0x15c>
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	6123      	str	r3, [r4, #16]
 800b4d0:	2323      	movs	r3, #35	; 0x23
 800b4d2:	aa08      	add	r2, sp, #32
 800b4d4:	189b      	adds	r3, r3, r2
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d09b      	beq.n	800b414 <_printf_float+0xa0>
 800b4dc:	0023      	movs	r3, r4
 800b4de:	222d      	movs	r2, #45	; 0x2d
 800b4e0:	3343      	adds	r3, #67	; 0x43
 800b4e2:	701a      	strb	r2, [r3, #0]
 800b4e4:	e796      	b.n	800b414 <_printf_float+0xa0>
 800b4e6:	2f67      	cmp	r7, #103	; 0x67
 800b4e8:	d100      	bne.n	800b4ec <_printf_float+0x178>
 800b4ea:	e176      	b.n	800b7da <_printf_float+0x466>
 800b4ec:	2f47      	cmp	r7, #71	; 0x47
 800b4ee:	d1b8      	bne.n	800b462 <_printf_float+0xee>
 800b4f0:	2a00      	cmp	r2, #0
 800b4f2:	d1b6      	bne.n	800b462 <_printf_float+0xee>
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	e7b3      	b.n	800b460 <_printf_float+0xec>
 800b4f8:	2f66      	cmp	r7, #102	; 0x66
 800b4fa:	d119      	bne.n	800b530 <_printf_float+0x1bc>
 800b4fc:	6863      	ldr	r3, [r4, #4]
 800b4fe:	2900      	cmp	r1, #0
 800b500:	dd0c      	ble.n	800b51c <_printf_float+0x1a8>
 800b502:	6121      	str	r1, [r4, #16]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d102      	bne.n	800b50e <_printf_float+0x19a>
 800b508:	6822      	ldr	r2, [r4, #0]
 800b50a:	07d2      	lsls	r2, r2, #31
 800b50c:	d502      	bpl.n	800b514 <_printf_float+0x1a0>
 800b50e:	3301      	adds	r3, #1
 800b510:	185b      	adds	r3, r3, r1
 800b512:	6123      	str	r3, [r4, #16]
 800b514:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b516:	2600      	movs	r6, #0
 800b518:	65a3      	str	r3, [r4, #88]	; 0x58
 800b51a:	e7d9      	b.n	800b4d0 <_printf_float+0x15c>
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d103      	bne.n	800b528 <_printf_float+0x1b4>
 800b520:	2201      	movs	r2, #1
 800b522:	6821      	ldr	r1, [r4, #0]
 800b524:	4211      	tst	r1, r2
 800b526:	d000      	beq.n	800b52a <_printf_float+0x1b6>
 800b528:	1c9a      	adds	r2, r3, #2
 800b52a:	6122      	str	r2, [r4, #16]
 800b52c:	e7f2      	b.n	800b514 <_printf_float+0x1a0>
 800b52e:	2767      	movs	r7, #103	; 0x67
 800b530:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b532:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b534:	4293      	cmp	r3, r2
 800b536:	db05      	blt.n	800b544 <_printf_float+0x1d0>
 800b538:	6822      	ldr	r2, [r4, #0]
 800b53a:	6123      	str	r3, [r4, #16]
 800b53c:	07d2      	lsls	r2, r2, #31
 800b53e:	d5e9      	bpl.n	800b514 <_printf_float+0x1a0>
 800b540:	3301      	adds	r3, #1
 800b542:	e7e6      	b.n	800b512 <_printf_float+0x19e>
 800b544:	2101      	movs	r1, #1
 800b546:	2b00      	cmp	r3, #0
 800b548:	dc01      	bgt.n	800b54e <_printf_float+0x1da>
 800b54a:	1849      	adds	r1, r1, r1
 800b54c:	1ac9      	subs	r1, r1, r3
 800b54e:	1852      	adds	r2, r2, r1
 800b550:	e7eb      	b.n	800b52a <_printf_float+0x1b6>
 800b552:	6822      	ldr	r2, [r4, #0]
 800b554:	0553      	lsls	r3, r2, #21
 800b556:	d408      	bmi.n	800b56a <_printf_float+0x1f6>
 800b558:	6923      	ldr	r3, [r4, #16]
 800b55a:	002a      	movs	r2, r5
 800b55c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b55e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b560:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b562:	47a8      	blx	r5
 800b564:	1c43      	adds	r3, r0, #1
 800b566:	d129      	bne.n	800b5bc <_printf_float+0x248>
 800b568:	e75f      	b.n	800b42a <_printf_float+0xb6>
 800b56a:	2f65      	cmp	r7, #101	; 0x65
 800b56c:	d800      	bhi.n	800b570 <_printf_float+0x1fc>
 800b56e:	e0e0      	b.n	800b732 <_printf_float+0x3be>
 800b570:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b572:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b574:	2200      	movs	r2, #0
 800b576:	2300      	movs	r3, #0
 800b578:	f7f9 ff6c 	bl	8005454 <__aeabi_dcmpeq>
 800b57c:	2800      	cmp	r0, #0
 800b57e:	d034      	beq.n	800b5ea <_printf_float+0x276>
 800b580:	2301      	movs	r3, #1
 800b582:	4a42      	ldr	r2, [pc, #264]	; (800b68c <_printf_float+0x318>)
 800b584:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b586:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b588:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b58a:	47a8      	blx	r5
 800b58c:	1c43      	adds	r3, r0, #1
 800b58e:	d100      	bne.n	800b592 <_printf_float+0x21e>
 800b590:	e74b      	b.n	800b42a <_printf_float+0xb6>
 800b592:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b594:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b596:	4293      	cmp	r3, r2
 800b598:	db02      	blt.n	800b5a0 <_printf_float+0x22c>
 800b59a:	6823      	ldr	r3, [r4, #0]
 800b59c:	07db      	lsls	r3, r3, #31
 800b59e:	d50d      	bpl.n	800b5bc <_printf_float+0x248>
 800b5a0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b5a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b5a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5aa:	47a8      	blx	r5
 800b5ac:	2500      	movs	r5, #0
 800b5ae:	1c43      	adds	r3, r0, #1
 800b5b0:	d100      	bne.n	800b5b4 <_printf_float+0x240>
 800b5b2:	e73a      	b.n	800b42a <_printf_float+0xb6>
 800b5b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	42ab      	cmp	r3, r5
 800b5ba:	dc0a      	bgt.n	800b5d2 <_printf_float+0x25e>
 800b5bc:	6823      	ldr	r3, [r4, #0]
 800b5be:	079b      	lsls	r3, r3, #30
 800b5c0:	d500      	bpl.n	800b5c4 <_printf_float+0x250>
 800b5c2:	e108      	b.n	800b7d6 <_printf_float+0x462>
 800b5c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b5c6:	68e0      	ldr	r0, [r4, #12]
 800b5c8:	4298      	cmp	r0, r3
 800b5ca:	db00      	blt.n	800b5ce <_printf_float+0x25a>
 800b5cc:	e72f      	b.n	800b42e <_printf_float+0xba>
 800b5ce:	0018      	movs	r0, r3
 800b5d0:	e72d      	b.n	800b42e <_printf_float+0xba>
 800b5d2:	0022      	movs	r2, r4
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	321a      	adds	r2, #26
 800b5d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b5da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5dc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b5de:	47b0      	blx	r6
 800b5e0:	1c43      	adds	r3, r0, #1
 800b5e2:	d100      	bne.n	800b5e6 <_printf_float+0x272>
 800b5e4:	e721      	b.n	800b42a <_printf_float+0xb6>
 800b5e6:	3501      	adds	r5, #1
 800b5e8:	e7e4      	b.n	800b5b4 <_printf_float+0x240>
 800b5ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	dc2d      	bgt.n	800b64c <_printf_float+0x2d8>
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	4a26      	ldr	r2, [pc, #152]	; (800b68c <_printf_float+0x318>)
 800b5f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b5f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5f8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b5fa:	47b0      	blx	r6
 800b5fc:	1c43      	adds	r3, r0, #1
 800b5fe:	d100      	bne.n	800b602 <_printf_float+0x28e>
 800b600:	e713      	b.n	800b42a <_printf_float+0xb6>
 800b602:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b604:	2b00      	cmp	r3, #0
 800b606:	d105      	bne.n	800b614 <_printf_float+0x2a0>
 800b608:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d102      	bne.n	800b614 <_printf_float+0x2a0>
 800b60e:	6823      	ldr	r3, [r4, #0]
 800b610:	07db      	lsls	r3, r3, #31
 800b612:	d5d3      	bpl.n	800b5bc <_printf_float+0x248>
 800b614:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b618:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b61a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b61c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b61e:	47b0      	blx	r6
 800b620:	2600      	movs	r6, #0
 800b622:	1c43      	adds	r3, r0, #1
 800b624:	d100      	bne.n	800b628 <_printf_float+0x2b4>
 800b626:	e700      	b.n	800b42a <_printf_float+0xb6>
 800b628:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b62a:	425b      	negs	r3, r3
 800b62c:	42b3      	cmp	r3, r6
 800b62e:	dc01      	bgt.n	800b634 <_printf_float+0x2c0>
 800b630:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b632:	e792      	b.n	800b55a <_printf_float+0x1e6>
 800b634:	0022      	movs	r2, r4
 800b636:	2301      	movs	r3, #1
 800b638:	321a      	adds	r2, #26
 800b63a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b63c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b63e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800b640:	47b8      	blx	r7
 800b642:	1c43      	adds	r3, r0, #1
 800b644:	d100      	bne.n	800b648 <_printf_float+0x2d4>
 800b646:	e6f0      	b.n	800b42a <_printf_float+0xb6>
 800b648:	3601      	adds	r6, #1
 800b64a:	e7ed      	b.n	800b628 <_printf_float+0x2b4>
 800b64c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b64e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800b650:	429f      	cmp	r7, r3
 800b652:	dd00      	ble.n	800b656 <_printf_float+0x2e2>
 800b654:	001f      	movs	r7, r3
 800b656:	2f00      	cmp	r7, #0
 800b658:	dd08      	ble.n	800b66c <_printf_float+0x2f8>
 800b65a:	003b      	movs	r3, r7
 800b65c:	002a      	movs	r2, r5
 800b65e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b660:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b662:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b664:	47b0      	blx	r6
 800b666:	1c43      	adds	r3, r0, #1
 800b668:	d100      	bne.n	800b66c <_printf_float+0x2f8>
 800b66a:	e6de      	b.n	800b42a <_printf_float+0xb6>
 800b66c:	2300      	movs	r3, #0
 800b66e:	930d      	str	r3, [sp, #52]	; 0x34
 800b670:	43fb      	mvns	r3, r7
 800b672:	17db      	asrs	r3, r3, #31
 800b674:	930f      	str	r3, [sp, #60]	; 0x3c
 800b676:	e018      	b.n	800b6aa <_printf_float+0x336>
 800b678:	7fefffff 	.word	0x7fefffff
 800b67c:	0800fecc 	.word	0x0800fecc
 800b680:	0800fec8 	.word	0x0800fec8
 800b684:	0800fed4 	.word	0x0800fed4
 800b688:	0800fed0 	.word	0x0800fed0
 800b68c:	0800fed8 	.word	0x0800fed8
 800b690:	0022      	movs	r2, r4
 800b692:	2301      	movs	r3, #1
 800b694:	321a      	adds	r2, #26
 800b696:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b698:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b69a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b69c:	47b0      	blx	r6
 800b69e:	1c43      	adds	r3, r0, #1
 800b6a0:	d100      	bne.n	800b6a4 <_printf_float+0x330>
 800b6a2:	e6c2      	b.n	800b42a <_printf_float+0xb6>
 800b6a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	930d      	str	r3, [sp, #52]	; 0x34
 800b6aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6ac:	6da6      	ldr	r6, [r4, #88]	; 0x58
 800b6ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6b0:	403b      	ands	r3, r7
 800b6b2:	1af3      	subs	r3, r6, r3
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	dceb      	bgt.n	800b690 <_printf_float+0x31c>
 800b6b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b6ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b6bc:	19ad      	adds	r5, r5, r6
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	db10      	blt.n	800b6e4 <_printf_float+0x370>
 800b6c2:	6823      	ldr	r3, [r4, #0]
 800b6c4:	07db      	lsls	r3, r3, #31
 800b6c6:	d40d      	bmi.n	800b6e4 <_printf_float+0x370>
 800b6c8:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800b6ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b6cc:	1bbe      	subs	r6, r7, r6
 800b6ce:	1aff      	subs	r7, r7, r3
 800b6d0:	42b7      	cmp	r7, r6
 800b6d2:	dd00      	ble.n	800b6d6 <_printf_float+0x362>
 800b6d4:	0037      	movs	r7, r6
 800b6d6:	2f00      	cmp	r7, #0
 800b6d8:	dc0d      	bgt.n	800b6f6 <_printf_float+0x382>
 800b6da:	43fe      	mvns	r6, r7
 800b6dc:	17f3      	asrs	r3, r6, #31
 800b6de:	2500      	movs	r5, #0
 800b6e0:	930c      	str	r3, [sp, #48]	; 0x30
 800b6e2:	e01c      	b.n	800b71e <_printf_float+0x3aa>
 800b6e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b6ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6ec:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800b6ee:	47b8      	blx	r7
 800b6f0:	1c43      	adds	r3, r0, #1
 800b6f2:	d1e9      	bne.n	800b6c8 <_printf_float+0x354>
 800b6f4:	e699      	b.n	800b42a <_printf_float+0xb6>
 800b6f6:	003b      	movs	r3, r7
 800b6f8:	002a      	movs	r2, r5
 800b6fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b6fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6fe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b700:	47a8      	blx	r5
 800b702:	1c43      	adds	r3, r0, #1
 800b704:	d1e9      	bne.n	800b6da <_printf_float+0x366>
 800b706:	e690      	b.n	800b42a <_printf_float+0xb6>
 800b708:	0022      	movs	r2, r4
 800b70a:	2301      	movs	r3, #1
 800b70c:	321a      	adds	r2, #26
 800b70e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b710:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b712:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b714:	47b0      	blx	r6
 800b716:	1c43      	adds	r3, r0, #1
 800b718:	d100      	bne.n	800b71c <_printf_float+0x3a8>
 800b71a:	e686      	b.n	800b42a <_printf_float+0xb6>
 800b71c:	3501      	adds	r5, #1
 800b71e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b720:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b722:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b724:	1a9b      	subs	r3, r3, r2
 800b726:	003a      	movs	r2, r7
 800b728:	400a      	ands	r2, r1
 800b72a:	1a9b      	subs	r3, r3, r2
 800b72c:	42ab      	cmp	r3, r5
 800b72e:	dceb      	bgt.n	800b708 <_printf_float+0x394>
 800b730:	e744      	b.n	800b5bc <_printf_float+0x248>
 800b732:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b734:	2b01      	cmp	r3, #1
 800b736:	dc02      	bgt.n	800b73e <_printf_float+0x3ca>
 800b738:	2301      	movs	r3, #1
 800b73a:	421a      	tst	r2, r3
 800b73c:	d032      	beq.n	800b7a4 <_printf_float+0x430>
 800b73e:	2301      	movs	r3, #1
 800b740:	002a      	movs	r2, r5
 800b742:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b744:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b746:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800b748:	47b8      	blx	r7
 800b74a:	1c43      	adds	r3, r0, #1
 800b74c:	d100      	bne.n	800b750 <_printf_float+0x3dc>
 800b74e:	e66c      	b.n	800b42a <_printf_float+0xb6>
 800b750:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b752:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b754:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b756:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b758:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800b75a:	3501      	adds	r5, #1
 800b75c:	47b8      	blx	r7
 800b75e:	1c43      	adds	r3, r0, #1
 800b760:	d100      	bne.n	800b764 <_printf_float+0x3f0>
 800b762:	e662      	b.n	800b42a <_printf_float+0xb6>
 800b764:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b766:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b768:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b76a:	2200      	movs	r2, #0
 800b76c:	1e5f      	subs	r7, r3, #1
 800b76e:	2300      	movs	r3, #0
 800b770:	f7f9 fe70 	bl	8005454 <__aeabi_dcmpeq>
 800b774:	003b      	movs	r3, r7
 800b776:	2800      	cmp	r0, #0
 800b778:	d014      	beq.n	800b7a4 <_printf_float+0x430>
 800b77a:	2500      	movs	r5, #0
 800b77c:	e00a      	b.n	800b794 <_printf_float+0x420>
 800b77e:	0022      	movs	r2, r4
 800b780:	2301      	movs	r3, #1
 800b782:	321a      	adds	r2, #26
 800b784:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b786:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b788:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800b78a:	47b8      	blx	r7
 800b78c:	1c43      	adds	r3, r0, #1
 800b78e:	d100      	bne.n	800b792 <_printf_float+0x41e>
 800b790:	e64b      	b.n	800b42a <_printf_float+0xb6>
 800b792:	3501      	adds	r5, #1
 800b794:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b796:	3b01      	subs	r3, #1
 800b798:	42ab      	cmp	r3, r5
 800b79a:	dcf0      	bgt.n	800b77e <_printf_float+0x40a>
 800b79c:	0022      	movs	r2, r4
 800b79e:	0033      	movs	r3, r6
 800b7a0:	3250      	adds	r2, #80	; 0x50
 800b7a2:	e6db      	b.n	800b55c <_printf_float+0x1e8>
 800b7a4:	002a      	movs	r2, r5
 800b7a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b7a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7aa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b7ac:	47a8      	blx	r5
 800b7ae:	1c43      	adds	r3, r0, #1
 800b7b0:	d1f4      	bne.n	800b79c <_printf_float+0x428>
 800b7b2:	e63a      	b.n	800b42a <_printf_float+0xb6>
 800b7b4:	0022      	movs	r2, r4
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	3219      	adds	r2, #25
 800b7ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b7bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7be:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b7c0:	47b0      	blx	r6
 800b7c2:	1c43      	adds	r3, r0, #1
 800b7c4:	d100      	bne.n	800b7c8 <_printf_float+0x454>
 800b7c6:	e630      	b.n	800b42a <_printf_float+0xb6>
 800b7c8:	3501      	adds	r5, #1
 800b7ca:	68e3      	ldr	r3, [r4, #12]
 800b7cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b7ce:	1a9b      	subs	r3, r3, r2
 800b7d0:	42ab      	cmp	r3, r5
 800b7d2:	dcef      	bgt.n	800b7b4 <_printf_float+0x440>
 800b7d4:	e6f6      	b.n	800b5c4 <_printf_float+0x250>
 800b7d6:	2500      	movs	r5, #0
 800b7d8:	e7f7      	b.n	800b7ca <_printf_float+0x456>
 800b7da:	2a00      	cmp	r2, #0
 800b7dc:	d100      	bne.n	800b7e0 <_printf_float+0x46c>
 800b7de:	e689      	b.n	800b4f4 <_printf_float+0x180>
 800b7e0:	2100      	movs	r1, #0
 800b7e2:	9106      	str	r1, [sp, #24]
 800b7e4:	a912      	add	r1, sp, #72	; 0x48
 800b7e6:	9105      	str	r1, [sp, #20]
 800b7e8:	a911      	add	r1, sp, #68	; 0x44
 800b7ea:	9103      	str	r1, [sp, #12]
 800b7ec:	2123      	movs	r1, #35	; 0x23
 800b7ee:	a808      	add	r0, sp, #32
 800b7f0:	1809      	adds	r1, r1, r0
 800b7f2:	6023      	str	r3, [r4, #0]
 800b7f4:	9301      	str	r3, [sp, #4]
 800b7f6:	9200      	str	r2, [sp, #0]
 800b7f8:	002b      	movs	r3, r5
 800b7fa:	9704      	str	r7, [sp, #16]
 800b7fc:	9102      	str	r1, [sp, #8]
 800b7fe:	0032      	movs	r2, r6
 800b800:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b802:	f7ff fd1b 	bl	800b23c <__cvt>
 800b806:	0005      	movs	r5, r0
 800b808:	e645      	b.n	800b496 <_printf_float+0x122>
 800b80a:	46c0      	nop			; (mov r8, r8)

0800b80c <_printf_common>:
 800b80c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b80e:	0015      	movs	r5, r2
 800b810:	9301      	str	r3, [sp, #4]
 800b812:	688a      	ldr	r2, [r1, #8]
 800b814:	690b      	ldr	r3, [r1, #16]
 800b816:	9000      	str	r0, [sp, #0]
 800b818:	000c      	movs	r4, r1
 800b81a:	4293      	cmp	r3, r2
 800b81c:	da00      	bge.n	800b820 <_printf_common+0x14>
 800b81e:	0013      	movs	r3, r2
 800b820:	0022      	movs	r2, r4
 800b822:	602b      	str	r3, [r5, #0]
 800b824:	3243      	adds	r2, #67	; 0x43
 800b826:	7812      	ldrb	r2, [r2, #0]
 800b828:	2a00      	cmp	r2, #0
 800b82a:	d001      	beq.n	800b830 <_printf_common+0x24>
 800b82c:	3301      	adds	r3, #1
 800b82e:	602b      	str	r3, [r5, #0]
 800b830:	6823      	ldr	r3, [r4, #0]
 800b832:	069b      	lsls	r3, r3, #26
 800b834:	d502      	bpl.n	800b83c <_printf_common+0x30>
 800b836:	682b      	ldr	r3, [r5, #0]
 800b838:	3302      	adds	r3, #2
 800b83a:	602b      	str	r3, [r5, #0]
 800b83c:	2706      	movs	r7, #6
 800b83e:	6823      	ldr	r3, [r4, #0]
 800b840:	401f      	ands	r7, r3
 800b842:	d027      	beq.n	800b894 <_printf_common+0x88>
 800b844:	0023      	movs	r3, r4
 800b846:	3343      	adds	r3, #67	; 0x43
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	1e5a      	subs	r2, r3, #1
 800b84c:	4193      	sbcs	r3, r2
 800b84e:	6822      	ldr	r2, [r4, #0]
 800b850:	0692      	lsls	r2, r2, #26
 800b852:	d430      	bmi.n	800b8b6 <_printf_common+0xaa>
 800b854:	0022      	movs	r2, r4
 800b856:	9901      	ldr	r1, [sp, #4]
 800b858:	3243      	adds	r2, #67	; 0x43
 800b85a:	9800      	ldr	r0, [sp, #0]
 800b85c:	9e08      	ldr	r6, [sp, #32]
 800b85e:	47b0      	blx	r6
 800b860:	1c43      	adds	r3, r0, #1
 800b862:	d025      	beq.n	800b8b0 <_printf_common+0xa4>
 800b864:	2306      	movs	r3, #6
 800b866:	6820      	ldr	r0, [r4, #0]
 800b868:	682a      	ldr	r2, [r5, #0]
 800b86a:	68e1      	ldr	r1, [r4, #12]
 800b86c:	4003      	ands	r3, r0
 800b86e:	2500      	movs	r5, #0
 800b870:	2b04      	cmp	r3, #4
 800b872:	d103      	bne.n	800b87c <_printf_common+0x70>
 800b874:	1a8d      	subs	r5, r1, r2
 800b876:	43eb      	mvns	r3, r5
 800b878:	17db      	asrs	r3, r3, #31
 800b87a:	401d      	ands	r5, r3
 800b87c:	68a3      	ldr	r3, [r4, #8]
 800b87e:	6922      	ldr	r2, [r4, #16]
 800b880:	4293      	cmp	r3, r2
 800b882:	dd01      	ble.n	800b888 <_printf_common+0x7c>
 800b884:	1a9b      	subs	r3, r3, r2
 800b886:	18ed      	adds	r5, r5, r3
 800b888:	2700      	movs	r7, #0
 800b88a:	42bd      	cmp	r5, r7
 800b88c:	d120      	bne.n	800b8d0 <_printf_common+0xc4>
 800b88e:	2000      	movs	r0, #0
 800b890:	e010      	b.n	800b8b4 <_printf_common+0xa8>
 800b892:	3701      	adds	r7, #1
 800b894:	68e3      	ldr	r3, [r4, #12]
 800b896:	682a      	ldr	r2, [r5, #0]
 800b898:	1a9b      	subs	r3, r3, r2
 800b89a:	42bb      	cmp	r3, r7
 800b89c:	ddd2      	ble.n	800b844 <_printf_common+0x38>
 800b89e:	0022      	movs	r2, r4
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	3219      	adds	r2, #25
 800b8a4:	9901      	ldr	r1, [sp, #4]
 800b8a6:	9800      	ldr	r0, [sp, #0]
 800b8a8:	9e08      	ldr	r6, [sp, #32]
 800b8aa:	47b0      	blx	r6
 800b8ac:	1c43      	adds	r3, r0, #1
 800b8ae:	d1f0      	bne.n	800b892 <_printf_common+0x86>
 800b8b0:	2001      	movs	r0, #1
 800b8b2:	4240      	negs	r0, r0
 800b8b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b8b6:	2030      	movs	r0, #48	; 0x30
 800b8b8:	18e1      	adds	r1, r4, r3
 800b8ba:	3143      	adds	r1, #67	; 0x43
 800b8bc:	7008      	strb	r0, [r1, #0]
 800b8be:	0021      	movs	r1, r4
 800b8c0:	1c5a      	adds	r2, r3, #1
 800b8c2:	3145      	adds	r1, #69	; 0x45
 800b8c4:	7809      	ldrb	r1, [r1, #0]
 800b8c6:	18a2      	adds	r2, r4, r2
 800b8c8:	3243      	adds	r2, #67	; 0x43
 800b8ca:	3302      	adds	r3, #2
 800b8cc:	7011      	strb	r1, [r2, #0]
 800b8ce:	e7c1      	b.n	800b854 <_printf_common+0x48>
 800b8d0:	0022      	movs	r2, r4
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	321a      	adds	r2, #26
 800b8d6:	9901      	ldr	r1, [sp, #4]
 800b8d8:	9800      	ldr	r0, [sp, #0]
 800b8da:	9e08      	ldr	r6, [sp, #32]
 800b8dc:	47b0      	blx	r6
 800b8de:	1c43      	adds	r3, r0, #1
 800b8e0:	d0e6      	beq.n	800b8b0 <_printf_common+0xa4>
 800b8e2:	3701      	adds	r7, #1
 800b8e4:	e7d1      	b.n	800b88a <_printf_common+0x7e>
	...

0800b8e8 <_printf_i>:
 800b8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8ea:	b089      	sub	sp, #36	; 0x24
 800b8ec:	9204      	str	r2, [sp, #16]
 800b8ee:	000a      	movs	r2, r1
 800b8f0:	3243      	adds	r2, #67	; 0x43
 800b8f2:	9305      	str	r3, [sp, #20]
 800b8f4:	9003      	str	r0, [sp, #12]
 800b8f6:	9202      	str	r2, [sp, #8]
 800b8f8:	7e0a      	ldrb	r2, [r1, #24]
 800b8fa:	000c      	movs	r4, r1
 800b8fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8fe:	2a6e      	cmp	r2, #110	; 0x6e
 800b900:	d100      	bne.n	800b904 <_printf_i+0x1c>
 800b902:	e086      	b.n	800ba12 <_printf_i+0x12a>
 800b904:	d81f      	bhi.n	800b946 <_printf_i+0x5e>
 800b906:	2a63      	cmp	r2, #99	; 0x63
 800b908:	d033      	beq.n	800b972 <_printf_i+0x8a>
 800b90a:	d808      	bhi.n	800b91e <_printf_i+0x36>
 800b90c:	2a00      	cmp	r2, #0
 800b90e:	d100      	bne.n	800b912 <_printf_i+0x2a>
 800b910:	e08c      	b.n	800ba2c <_printf_i+0x144>
 800b912:	2a58      	cmp	r2, #88	; 0x58
 800b914:	d04d      	beq.n	800b9b2 <_printf_i+0xca>
 800b916:	0025      	movs	r5, r4
 800b918:	3542      	adds	r5, #66	; 0x42
 800b91a:	702a      	strb	r2, [r5, #0]
 800b91c:	e030      	b.n	800b980 <_printf_i+0x98>
 800b91e:	2a64      	cmp	r2, #100	; 0x64
 800b920:	d001      	beq.n	800b926 <_printf_i+0x3e>
 800b922:	2a69      	cmp	r2, #105	; 0x69
 800b924:	d1f7      	bne.n	800b916 <_printf_i+0x2e>
 800b926:	6819      	ldr	r1, [r3, #0]
 800b928:	6825      	ldr	r5, [r4, #0]
 800b92a:	1d0a      	adds	r2, r1, #4
 800b92c:	0628      	lsls	r0, r5, #24
 800b92e:	d529      	bpl.n	800b984 <_printf_i+0x9c>
 800b930:	6808      	ldr	r0, [r1, #0]
 800b932:	601a      	str	r2, [r3, #0]
 800b934:	2800      	cmp	r0, #0
 800b936:	da03      	bge.n	800b940 <_printf_i+0x58>
 800b938:	232d      	movs	r3, #45	; 0x2d
 800b93a:	9a02      	ldr	r2, [sp, #8]
 800b93c:	4240      	negs	r0, r0
 800b93e:	7013      	strb	r3, [r2, #0]
 800b940:	4e6b      	ldr	r6, [pc, #428]	; (800baf0 <_printf_i+0x208>)
 800b942:	270a      	movs	r7, #10
 800b944:	e04f      	b.n	800b9e6 <_printf_i+0xfe>
 800b946:	2a73      	cmp	r2, #115	; 0x73
 800b948:	d074      	beq.n	800ba34 <_printf_i+0x14c>
 800b94a:	d808      	bhi.n	800b95e <_printf_i+0x76>
 800b94c:	2a6f      	cmp	r2, #111	; 0x6f
 800b94e:	d01f      	beq.n	800b990 <_printf_i+0xa8>
 800b950:	2a70      	cmp	r2, #112	; 0x70
 800b952:	d1e0      	bne.n	800b916 <_printf_i+0x2e>
 800b954:	2220      	movs	r2, #32
 800b956:	6809      	ldr	r1, [r1, #0]
 800b958:	430a      	orrs	r2, r1
 800b95a:	6022      	str	r2, [r4, #0]
 800b95c:	e003      	b.n	800b966 <_printf_i+0x7e>
 800b95e:	2a75      	cmp	r2, #117	; 0x75
 800b960:	d016      	beq.n	800b990 <_printf_i+0xa8>
 800b962:	2a78      	cmp	r2, #120	; 0x78
 800b964:	d1d7      	bne.n	800b916 <_printf_i+0x2e>
 800b966:	0022      	movs	r2, r4
 800b968:	2178      	movs	r1, #120	; 0x78
 800b96a:	3245      	adds	r2, #69	; 0x45
 800b96c:	7011      	strb	r1, [r2, #0]
 800b96e:	4e61      	ldr	r6, [pc, #388]	; (800baf4 <_printf_i+0x20c>)
 800b970:	e022      	b.n	800b9b8 <_printf_i+0xd0>
 800b972:	0025      	movs	r5, r4
 800b974:	681a      	ldr	r2, [r3, #0]
 800b976:	3542      	adds	r5, #66	; 0x42
 800b978:	1d11      	adds	r1, r2, #4
 800b97a:	6019      	str	r1, [r3, #0]
 800b97c:	6813      	ldr	r3, [r2, #0]
 800b97e:	702b      	strb	r3, [r5, #0]
 800b980:	2301      	movs	r3, #1
 800b982:	e065      	b.n	800ba50 <_printf_i+0x168>
 800b984:	6808      	ldr	r0, [r1, #0]
 800b986:	601a      	str	r2, [r3, #0]
 800b988:	0669      	lsls	r1, r5, #25
 800b98a:	d5d3      	bpl.n	800b934 <_printf_i+0x4c>
 800b98c:	b200      	sxth	r0, r0
 800b98e:	e7d1      	b.n	800b934 <_printf_i+0x4c>
 800b990:	6819      	ldr	r1, [r3, #0]
 800b992:	6825      	ldr	r5, [r4, #0]
 800b994:	1d08      	adds	r0, r1, #4
 800b996:	6018      	str	r0, [r3, #0]
 800b998:	6808      	ldr	r0, [r1, #0]
 800b99a:	062e      	lsls	r6, r5, #24
 800b99c:	d505      	bpl.n	800b9aa <_printf_i+0xc2>
 800b99e:	4e54      	ldr	r6, [pc, #336]	; (800baf0 <_printf_i+0x208>)
 800b9a0:	2708      	movs	r7, #8
 800b9a2:	2a6f      	cmp	r2, #111	; 0x6f
 800b9a4:	d01b      	beq.n	800b9de <_printf_i+0xf6>
 800b9a6:	270a      	movs	r7, #10
 800b9a8:	e019      	b.n	800b9de <_printf_i+0xf6>
 800b9aa:	066d      	lsls	r5, r5, #25
 800b9ac:	d5f7      	bpl.n	800b99e <_printf_i+0xb6>
 800b9ae:	b280      	uxth	r0, r0
 800b9b0:	e7f5      	b.n	800b99e <_printf_i+0xb6>
 800b9b2:	3145      	adds	r1, #69	; 0x45
 800b9b4:	4e4e      	ldr	r6, [pc, #312]	; (800baf0 <_printf_i+0x208>)
 800b9b6:	700a      	strb	r2, [r1, #0]
 800b9b8:	6818      	ldr	r0, [r3, #0]
 800b9ba:	6822      	ldr	r2, [r4, #0]
 800b9bc:	1d01      	adds	r1, r0, #4
 800b9be:	6800      	ldr	r0, [r0, #0]
 800b9c0:	6019      	str	r1, [r3, #0]
 800b9c2:	0615      	lsls	r5, r2, #24
 800b9c4:	d521      	bpl.n	800ba0a <_printf_i+0x122>
 800b9c6:	07d3      	lsls	r3, r2, #31
 800b9c8:	d502      	bpl.n	800b9d0 <_printf_i+0xe8>
 800b9ca:	2320      	movs	r3, #32
 800b9cc:	431a      	orrs	r2, r3
 800b9ce:	6022      	str	r2, [r4, #0]
 800b9d0:	2710      	movs	r7, #16
 800b9d2:	2800      	cmp	r0, #0
 800b9d4:	d103      	bne.n	800b9de <_printf_i+0xf6>
 800b9d6:	2320      	movs	r3, #32
 800b9d8:	6822      	ldr	r2, [r4, #0]
 800b9da:	439a      	bics	r2, r3
 800b9dc:	6022      	str	r2, [r4, #0]
 800b9de:	0023      	movs	r3, r4
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	3343      	adds	r3, #67	; 0x43
 800b9e4:	701a      	strb	r2, [r3, #0]
 800b9e6:	6863      	ldr	r3, [r4, #4]
 800b9e8:	60a3      	str	r3, [r4, #8]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	db58      	blt.n	800baa0 <_printf_i+0x1b8>
 800b9ee:	2204      	movs	r2, #4
 800b9f0:	6821      	ldr	r1, [r4, #0]
 800b9f2:	4391      	bics	r1, r2
 800b9f4:	6021      	str	r1, [r4, #0]
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	d154      	bne.n	800baa4 <_printf_i+0x1bc>
 800b9fa:	9d02      	ldr	r5, [sp, #8]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d05a      	beq.n	800bab6 <_printf_i+0x1ce>
 800ba00:	0025      	movs	r5, r4
 800ba02:	7833      	ldrb	r3, [r6, #0]
 800ba04:	3542      	adds	r5, #66	; 0x42
 800ba06:	702b      	strb	r3, [r5, #0]
 800ba08:	e055      	b.n	800bab6 <_printf_i+0x1ce>
 800ba0a:	0655      	lsls	r5, r2, #25
 800ba0c:	d5db      	bpl.n	800b9c6 <_printf_i+0xde>
 800ba0e:	b280      	uxth	r0, r0
 800ba10:	e7d9      	b.n	800b9c6 <_printf_i+0xde>
 800ba12:	681a      	ldr	r2, [r3, #0]
 800ba14:	680d      	ldr	r5, [r1, #0]
 800ba16:	1d10      	adds	r0, r2, #4
 800ba18:	6949      	ldr	r1, [r1, #20]
 800ba1a:	6018      	str	r0, [r3, #0]
 800ba1c:	6813      	ldr	r3, [r2, #0]
 800ba1e:	062e      	lsls	r6, r5, #24
 800ba20:	d501      	bpl.n	800ba26 <_printf_i+0x13e>
 800ba22:	6019      	str	r1, [r3, #0]
 800ba24:	e002      	b.n	800ba2c <_printf_i+0x144>
 800ba26:	066d      	lsls	r5, r5, #25
 800ba28:	d5fb      	bpl.n	800ba22 <_printf_i+0x13a>
 800ba2a:	8019      	strh	r1, [r3, #0]
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	9d02      	ldr	r5, [sp, #8]
 800ba30:	6123      	str	r3, [r4, #16]
 800ba32:	e04f      	b.n	800bad4 <_printf_i+0x1ec>
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	1d11      	adds	r1, r2, #4
 800ba38:	6019      	str	r1, [r3, #0]
 800ba3a:	6815      	ldr	r5, [r2, #0]
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	6862      	ldr	r2, [r4, #4]
 800ba40:	0028      	movs	r0, r5
 800ba42:	f002 fc0f 	bl	800e264 <memchr>
 800ba46:	2800      	cmp	r0, #0
 800ba48:	d001      	beq.n	800ba4e <_printf_i+0x166>
 800ba4a:	1b40      	subs	r0, r0, r5
 800ba4c:	6060      	str	r0, [r4, #4]
 800ba4e:	6863      	ldr	r3, [r4, #4]
 800ba50:	6123      	str	r3, [r4, #16]
 800ba52:	2300      	movs	r3, #0
 800ba54:	9a02      	ldr	r2, [sp, #8]
 800ba56:	7013      	strb	r3, [r2, #0]
 800ba58:	e03c      	b.n	800bad4 <_printf_i+0x1ec>
 800ba5a:	6923      	ldr	r3, [r4, #16]
 800ba5c:	002a      	movs	r2, r5
 800ba5e:	9904      	ldr	r1, [sp, #16]
 800ba60:	9803      	ldr	r0, [sp, #12]
 800ba62:	9d05      	ldr	r5, [sp, #20]
 800ba64:	47a8      	blx	r5
 800ba66:	1c43      	adds	r3, r0, #1
 800ba68:	d03e      	beq.n	800bae8 <_printf_i+0x200>
 800ba6a:	6823      	ldr	r3, [r4, #0]
 800ba6c:	079b      	lsls	r3, r3, #30
 800ba6e:	d415      	bmi.n	800ba9c <_printf_i+0x1b4>
 800ba70:	9b07      	ldr	r3, [sp, #28]
 800ba72:	68e0      	ldr	r0, [r4, #12]
 800ba74:	4298      	cmp	r0, r3
 800ba76:	da39      	bge.n	800baec <_printf_i+0x204>
 800ba78:	0018      	movs	r0, r3
 800ba7a:	e037      	b.n	800baec <_printf_i+0x204>
 800ba7c:	0022      	movs	r2, r4
 800ba7e:	2301      	movs	r3, #1
 800ba80:	3219      	adds	r2, #25
 800ba82:	9904      	ldr	r1, [sp, #16]
 800ba84:	9803      	ldr	r0, [sp, #12]
 800ba86:	9e05      	ldr	r6, [sp, #20]
 800ba88:	47b0      	blx	r6
 800ba8a:	1c43      	adds	r3, r0, #1
 800ba8c:	d02c      	beq.n	800bae8 <_printf_i+0x200>
 800ba8e:	3501      	adds	r5, #1
 800ba90:	68e3      	ldr	r3, [r4, #12]
 800ba92:	9a07      	ldr	r2, [sp, #28]
 800ba94:	1a9b      	subs	r3, r3, r2
 800ba96:	42ab      	cmp	r3, r5
 800ba98:	dcf0      	bgt.n	800ba7c <_printf_i+0x194>
 800ba9a:	e7e9      	b.n	800ba70 <_printf_i+0x188>
 800ba9c:	2500      	movs	r5, #0
 800ba9e:	e7f7      	b.n	800ba90 <_printf_i+0x1a8>
 800baa0:	2800      	cmp	r0, #0
 800baa2:	d0ad      	beq.n	800ba00 <_printf_i+0x118>
 800baa4:	9d02      	ldr	r5, [sp, #8]
 800baa6:	0039      	movs	r1, r7
 800baa8:	f7f9 fbd4 	bl	8005254 <__aeabi_uidivmod>
 800baac:	5c73      	ldrb	r3, [r6, r1]
 800baae:	3d01      	subs	r5, #1
 800bab0:	702b      	strb	r3, [r5, #0]
 800bab2:	2800      	cmp	r0, #0
 800bab4:	d1f7      	bne.n	800baa6 <_printf_i+0x1be>
 800bab6:	2f08      	cmp	r7, #8
 800bab8:	d109      	bne.n	800bace <_printf_i+0x1e6>
 800baba:	6823      	ldr	r3, [r4, #0]
 800babc:	07db      	lsls	r3, r3, #31
 800babe:	d506      	bpl.n	800bace <_printf_i+0x1e6>
 800bac0:	6863      	ldr	r3, [r4, #4]
 800bac2:	6922      	ldr	r2, [r4, #16]
 800bac4:	4293      	cmp	r3, r2
 800bac6:	dc02      	bgt.n	800bace <_printf_i+0x1e6>
 800bac8:	2330      	movs	r3, #48	; 0x30
 800baca:	3d01      	subs	r5, #1
 800bacc:	702b      	strb	r3, [r5, #0]
 800bace:	9b02      	ldr	r3, [sp, #8]
 800bad0:	1b5b      	subs	r3, r3, r5
 800bad2:	6123      	str	r3, [r4, #16]
 800bad4:	9b05      	ldr	r3, [sp, #20]
 800bad6:	aa07      	add	r2, sp, #28
 800bad8:	9300      	str	r3, [sp, #0]
 800bada:	0021      	movs	r1, r4
 800badc:	9b04      	ldr	r3, [sp, #16]
 800bade:	9803      	ldr	r0, [sp, #12]
 800bae0:	f7ff fe94 	bl	800b80c <_printf_common>
 800bae4:	1c43      	adds	r3, r0, #1
 800bae6:	d1b8      	bne.n	800ba5a <_printf_i+0x172>
 800bae8:	2001      	movs	r0, #1
 800baea:	4240      	negs	r0, r0
 800baec:	b009      	add	sp, #36	; 0x24
 800baee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baf0:	0800feda 	.word	0x0800feda
 800baf4:	0800feeb 	.word	0x0800feeb

0800baf8 <_scanf_float>:
 800baf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bafa:	b08b      	sub	sp, #44	; 0x2c
 800bafc:	9002      	str	r0, [sp, #8]
 800bafe:	9200      	str	r2, [sp, #0]
 800bb00:	2000      	movs	r0, #0
 800bb02:	22ae      	movs	r2, #174	; 0xae
 800bb04:	9305      	str	r3, [sp, #20]
 800bb06:	688b      	ldr	r3, [r1, #8]
 800bb08:	000e      	movs	r6, r1
 800bb0a:	1e59      	subs	r1, r3, #1
 800bb0c:	0052      	lsls	r2, r2, #1
 800bb0e:	9004      	str	r0, [sp, #16]
 800bb10:	4291      	cmp	r1, r2
 800bb12:	d905      	bls.n	800bb20 <_scanf_float+0x28>
 800bb14:	3b5e      	subs	r3, #94	; 0x5e
 800bb16:	3bff      	subs	r3, #255	; 0xff
 800bb18:	9304      	str	r3, [sp, #16]
 800bb1a:	235e      	movs	r3, #94	; 0x5e
 800bb1c:	33ff      	adds	r3, #255	; 0xff
 800bb1e:	60b3      	str	r3, [r6, #8]
 800bb20:	23f0      	movs	r3, #240	; 0xf0
 800bb22:	6832      	ldr	r2, [r6, #0]
 800bb24:	00db      	lsls	r3, r3, #3
 800bb26:	4313      	orrs	r3, r2
 800bb28:	6033      	str	r3, [r6, #0]
 800bb2a:	0033      	movs	r3, r6
 800bb2c:	2700      	movs	r7, #0
 800bb2e:	331c      	adds	r3, #28
 800bb30:	001d      	movs	r5, r3
 800bb32:	003c      	movs	r4, r7
 800bb34:	9303      	str	r3, [sp, #12]
 800bb36:	9708      	str	r7, [sp, #32]
 800bb38:	9707      	str	r7, [sp, #28]
 800bb3a:	9701      	str	r7, [sp, #4]
 800bb3c:	9706      	str	r7, [sp, #24]
 800bb3e:	68b2      	ldr	r2, [r6, #8]
 800bb40:	2a00      	cmp	r2, #0
 800bb42:	d013      	beq.n	800bb6c <_scanf_float+0x74>
 800bb44:	9b00      	ldr	r3, [sp, #0]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	9309      	str	r3, [sp, #36]	; 0x24
 800bb4a:	781b      	ldrb	r3, [r3, #0]
 800bb4c:	2b49      	cmp	r3, #73	; 0x49
 800bb4e:	d100      	bne.n	800bb52 <_scanf_float+0x5a>
 800bb50:	e07c      	b.n	800bc4c <_scanf_float+0x154>
 800bb52:	d854      	bhi.n	800bbfe <_scanf_float+0x106>
 800bb54:	2b39      	cmp	r3, #57	; 0x39
 800bb56:	d847      	bhi.n	800bbe8 <_scanf_float+0xf0>
 800bb58:	2b31      	cmp	r3, #49	; 0x31
 800bb5a:	d300      	bcc.n	800bb5e <_scanf_float+0x66>
 800bb5c:	e094      	b.n	800bc88 <_scanf_float+0x190>
 800bb5e:	2b2d      	cmp	r3, #45	; 0x2d
 800bb60:	d100      	bne.n	800bb64 <_scanf_float+0x6c>
 800bb62:	e09c      	b.n	800bc9e <_scanf_float+0x1a6>
 800bb64:	d817      	bhi.n	800bb96 <_scanf_float+0x9e>
 800bb66:	2b2b      	cmp	r3, #43	; 0x2b
 800bb68:	d100      	bne.n	800bb6c <_scanf_float+0x74>
 800bb6a:	e098      	b.n	800bc9e <_scanf_float+0x1a6>
 800bb6c:	9b01      	ldr	r3, [sp, #4]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d003      	beq.n	800bb7a <_scanf_float+0x82>
 800bb72:	6832      	ldr	r2, [r6, #0]
 800bb74:	4b9b      	ldr	r3, [pc, #620]	; (800bde4 <_scanf_float+0x2ec>)
 800bb76:	4013      	ands	r3, r2
 800bb78:	6033      	str	r3, [r6, #0]
 800bb7a:	3c01      	subs	r4, #1
 800bb7c:	2c01      	cmp	r4, #1
 800bb7e:	d900      	bls.n	800bb82 <_scanf_float+0x8a>
 800bb80:	e0ee      	b.n	800bd60 <_scanf_float+0x268>
 800bb82:	24be      	movs	r4, #190	; 0xbe
 800bb84:	0064      	lsls	r4, r4, #1
 800bb86:	9b03      	ldr	r3, [sp, #12]
 800bb88:	429d      	cmp	r5, r3
 800bb8a:	d900      	bls.n	800bb8e <_scanf_float+0x96>
 800bb8c:	e0de      	b.n	800bd4c <_scanf_float+0x254>
 800bb8e:	2701      	movs	r7, #1
 800bb90:	0038      	movs	r0, r7
 800bb92:	b00b      	add	sp, #44	; 0x2c
 800bb94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb96:	2b2e      	cmp	r3, #46	; 0x2e
 800bb98:	d100      	bne.n	800bb9c <_scanf_float+0xa4>
 800bb9a:	e0a2      	b.n	800bce2 <_scanf_float+0x1ea>
 800bb9c:	2b30      	cmp	r3, #48	; 0x30
 800bb9e:	d1e5      	bne.n	800bb6c <_scanf_float+0x74>
 800bba0:	6831      	ldr	r1, [r6, #0]
 800bba2:	05c8      	lsls	r0, r1, #23
 800bba4:	d570      	bpl.n	800bc88 <_scanf_float+0x190>
 800bba6:	2380      	movs	r3, #128	; 0x80
 800bba8:	4399      	bics	r1, r3
 800bbaa:	9b01      	ldr	r3, [sp, #4]
 800bbac:	6031      	str	r1, [r6, #0]
 800bbae:	3301      	adds	r3, #1
 800bbb0:	9301      	str	r3, [sp, #4]
 800bbb2:	9b04      	ldr	r3, [sp, #16]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d003      	beq.n	800bbc0 <_scanf_float+0xc8>
 800bbb8:	3b01      	subs	r3, #1
 800bbba:	3201      	adds	r2, #1
 800bbbc:	9304      	str	r3, [sp, #16]
 800bbbe:	60b2      	str	r2, [r6, #8]
 800bbc0:	68b3      	ldr	r3, [r6, #8]
 800bbc2:	9a00      	ldr	r2, [sp, #0]
 800bbc4:	3b01      	subs	r3, #1
 800bbc6:	60b3      	str	r3, [r6, #8]
 800bbc8:	6933      	ldr	r3, [r6, #16]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	6133      	str	r3, [r6, #16]
 800bbce:	9b00      	ldr	r3, [sp, #0]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	9309      	str	r3, [sp, #36]	; 0x24
 800bbd4:	3b01      	subs	r3, #1
 800bbd6:	6053      	str	r3, [r2, #4]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	dc00      	bgt.n	800bbde <_scanf_float+0xe6>
 800bbdc:	e0ac      	b.n	800bd38 <_scanf_float+0x240>
 800bbde:	6813      	ldr	r3, [r2, #0]
 800bbe0:	9309      	str	r3, [sp, #36]	; 0x24
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	6013      	str	r3, [r2, #0]
 800bbe6:	e7aa      	b.n	800bb3e <_scanf_float+0x46>
 800bbe8:	2b45      	cmp	r3, #69	; 0x45
 800bbea:	d100      	bne.n	800bbee <_scanf_float+0xf6>
 800bbec:	e083      	b.n	800bcf6 <_scanf_float+0x1fe>
 800bbee:	2b46      	cmp	r3, #70	; 0x46
 800bbf0:	d06d      	beq.n	800bcce <_scanf_float+0x1d6>
 800bbf2:	2b41      	cmp	r3, #65	; 0x41
 800bbf4:	d1ba      	bne.n	800bb6c <_scanf_float+0x74>
 800bbf6:	2c01      	cmp	r4, #1
 800bbf8:	d1b8      	bne.n	800bb6c <_scanf_float+0x74>
 800bbfa:	2402      	movs	r4, #2
 800bbfc:	e04c      	b.n	800bc98 <_scanf_float+0x1a0>
 800bbfe:	2b65      	cmp	r3, #101	; 0x65
 800bc00:	d079      	beq.n	800bcf6 <_scanf_float+0x1fe>
 800bc02:	d81b      	bhi.n	800bc3c <_scanf_float+0x144>
 800bc04:	2b54      	cmp	r3, #84	; 0x54
 800bc06:	d067      	beq.n	800bcd8 <_scanf_float+0x1e0>
 800bc08:	d813      	bhi.n	800bc32 <_scanf_float+0x13a>
 800bc0a:	2b4e      	cmp	r3, #78	; 0x4e
 800bc0c:	d1ae      	bne.n	800bb6c <_scanf_float+0x74>
 800bc0e:	2c00      	cmp	r4, #0
 800bc10:	d14c      	bne.n	800bcac <_scanf_float+0x1b4>
 800bc12:	9a01      	ldr	r2, [sp, #4]
 800bc14:	2a00      	cmp	r2, #0
 800bc16:	d14b      	bne.n	800bcb0 <_scanf_float+0x1b8>
 800bc18:	21e0      	movs	r1, #224	; 0xe0
 800bc1a:	20e0      	movs	r0, #224	; 0xe0
 800bc1c:	6832      	ldr	r2, [r6, #0]
 800bc1e:	00c9      	lsls	r1, r1, #3
 800bc20:	4011      	ands	r1, r2
 800bc22:	00c0      	lsls	r0, r0, #3
 800bc24:	4281      	cmp	r1, r0
 800bc26:	d143      	bne.n	800bcb0 <_scanf_float+0x1b8>
 800bc28:	496f      	ldr	r1, [pc, #444]	; (800bde8 <_scanf_float+0x2f0>)
 800bc2a:	3401      	adds	r4, #1
 800bc2c:	400a      	ands	r2, r1
 800bc2e:	6032      	str	r2, [r6, #0]
 800bc30:	e032      	b.n	800bc98 <_scanf_float+0x1a0>
 800bc32:	2b59      	cmp	r3, #89	; 0x59
 800bc34:	d023      	beq.n	800bc7e <_scanf_float+0x186>
 800bc36:	2b61      	cmp	r3, #97	; 0x61
 800bc38:	d0dd      	beq.n	800bbf6 <_scanf_float+0xfe>
 800bc3a:	e797      	b.n	800bb6c <_scanf_float+0x74>
 800bc3c:	2b6e      	cmp	r3, #110	; 0x6e
 800bc3e:	d0e6      	beq.n	800bc0e <_scanf_float+0x116>
 800bc40:	d818      	bhi.n	800bc74 <_scanf_float+0x17c>
 800bc42:	2b66      	cmp	r3, #102	; 0x66
 800bc44:	d043      	beq.n	800bcce <_scanf_float+0x1d6>
 800bc46:	2b69      	cmp	r3, #105	; 0x69
 800bc48:	d000      	beq.n	800bc4c <_scanf_float+0x154>
 800bc4a:	e78f      	b.n	800bb6c <_scanf_float+0x74>
 800bc4c:	2f00      	cmp	r7, #0
 800bc4e:	d137      	bne.n	800bcc0 <_scanf_float+0x1c8>
 800bc50:	9a01      	ldr	r2, [sp, #4]
 800bc52:	2a00      	cmp	r2, #0
 800bc54:	d000      	beq.n	800bc58 <_scanf_float+0x160>
 800bc56:	e78c      	b.n	800bb72 <_scanf_float+0x7a>
 800bc58:	21e0      	movs	r1, #224	; 0xe0
 800bc5a:	20e0      	movs	r0, #224	; 0xe0
 800bc5c:	6832      	ldr	r2, [r6, #0]
 800bc5e:	00c9      	lsls	r1, r1, #3
 800bc60:	4011      	ands	r1, r2
 800bc62:	00c0      	lsls	r0, r0, #3
 800bc64:	4281      	cmp	r1, r0
 800bc66:	d000      	beq.n	800bc6a <_scanf_float+0x172>
 800bc68:	e787      	b.n	800bb7a <_scanf_float+0x82>
 800bc6a:	495f      	ldr	r1, [pc, #380]	; (800bde8 <_scanf_float+0x2f0>)
 800bc6c:	3701      	adds	r7, #1
 800bc6e:	400a      	ands	r2, r1
 800bc70:	6032      	str	r2, [r6, #0]
 800bc72:	e011      	b.n	800bc98 <_scanf_float+0x1a0>
 800bc74:	2b74      	cmp	r3, #116	; 0x74
 800bc76:	d02f      	beq.n	800bcd8 <_scanf_float+0x1e0>
 800bc78:	2b79      	cmp	r3, #121	; 0x79
 800bc7a:	d000      	beq.n	800bc7e <_scanf_float+0x186>
 800bc7c:	e776      	b.n	800bb6c <_scanf_float+0x74>
 800bc7e:	2f07      	cmp	r7, #7
 800bc80:	d000      	beq.n	800bc84 <_scanf_float+0x18c>
 800bc82:	e773      	b.n	800bb6c <_scanf_float+0x74>
 800bc84:	2708      	movs	r7, #8
 800bc86:	e007      	b.n	800bc98 <_scanf_float+0x1a0>
 800bc88:	19e2      	adds	r2, r4, r7
 800bc8a:	2a00      	cmp	r2, #0
 800bc8c:	d000      	beq.n	800bc90 <_scanf_float+0x198>
 800bc8e:	e76d      	b.n	800bb6c <_scanf_float+0x74>
 800bc90:	4a56      	ldr	r2, [pc, #344]	; (800bdec <_scanf_float+0x2f4>)
 800bc92:	6831      	ldr	r1, [r6, #0]
 800bc94:	400a      	ands	r2, r1
 800bc96:	6032      	str	r2, [r6, #0]
 800bc98:	702b      	strb	r3, [r5, #0]
 800bc9a:	3501      	adds	r5, #1
 800bc9c:	e790      	b.n	800bbc0 <_scanf_float+0xc8>
 800bc9e:	2180      	movs	r1, #128	; 0x80
 800bca0:	6832      	ldr	r2, [r6, #0]
 800bca2:	420a      	tst	r2, r1
 800bca4:	d100      	bne.n	800bca8 <_scanf_float+0x1b0>
 800bca6:	e761      	b.n	800bb6c <_scanf_float+0x74>
 800bca8:	438a      	bics	r2, r1
 800bcaa:	e7f4      	b.n	800bc96 <_scanf_float+0x19e>
 800bcac:	2c02      	cmp	r4, #2
 800bcae:	d041      	beq.n	800bd34 <_scanf_float+0x23c>
 800bcb0:	2f01      	cmp	r7, #1
 800bcb2:	d002      	beq.n	800bcba <_scanf_float+0x1c2>
 800bcb4:	2f04      	cmp	r7, #4
 800bcb6:	d000      	beq.n	800bcba <_scanf_float+0x1c2>
 800bcb8:	e758      	b.n	800bb6c <_scanf_float+0x74>
 800bcba:	3701      	adds	r7, #1
 800bcbc:	b2ff      	uxtb	r7, r7
 800bcbe:	e7eb      	b.n	800bc98 <_scanf_float+0x1a0>
 800bcc0:	2102      	movs	r1, #2
 800bcc2:	1efa      	subs	r2, r7, #3
 800bcc4:	438a      	bics	r2, r1
 800bcc6:	b2d2      	uxtb	r2, r2
 800bcc8:	2a00      	cmp	r2, #0
 800bcca:	d0f6      	beq.n	800bcba <_scanf_float+0x1c2>
 800bccc:	e74e      	b.n	800bb6c <_scanf_float+0x74>
 800bcce:	2f02      	cmp	r7, #2
 800bcd0:	d000      	beq.n	800bcd4 <_scanf_float+0x1dc>
 800bcd2:	e74b      	b.n	800bb6c <_scanf_float+0x74>
 800bcd4:	2703      	movs	r7, #3
 800bcd6:	e7df      	b.n	800bc98 <_scanf_float+0x1a0>
 800bcd8:	2f06      	cmp	r7, #6
 800bcda:	d000      	beq.n	800bcde <_scanf_float+0x1e6>
 800bcdc:	e746      	b.n	800bb6c <_scanf_float+0x74>
 800bcde:	2707      	movs	r7, #7
 800bce0:	e7da      	b.n	800bc98 <_scanf_float+0x1a0>
 800bce2:	6832      	ldr	r2, [r6, #0]
 800bce4:	0591      	lsls	r1, r2, #22
 800bce6:	d400      	bmi.n	800bcea <_scanf_float+0x1f2>
 800bce8:	e740      	b.n	800bb6c <_scanf_float+0x74>
 800bcea:	4941      	ldr	r1, [pc, #260]	; (800bdf0 <_scanf_float+0x2f8>)
 800bcec:	400a      	ands	r2, r1
 800bcee:	6032      	str	r2, [r6, #0]
 800bcf0:	9a01      	ldr	r2, [sp, #4]
 800bcf2:	9206      	str	r2, [sp, #24]
 800bcf4:	e7d0      	b.n	800bc98 <_scanf_float+0x1a0>
 800bcf6:	21a0      	movs	r1, #160	; 0xa0
 800bcf8:	2080      	movs	r0, #128	; 0x80
 800bcfa:	6832      	ldr	r2, [r6, #0]
 800bcfc:	00c9      	lsls	r1, r1, #3
 800bcfe:	4011      	ands	r1, r2
 800bd00:	00c0      	lsls	r0, r0, #3
 800bd02:	4281      	cmp	r1, r0
 800bd04:	d006      	beq.n	800bd14 <_scanf_float+0x21c>
 800bd06:	4202      	tst	r2, r0
 800bd08:	d100      	bne.n	800bd0c <_scanf_float+0x214>
 800bd0a:	e72f      	b.n	800bb6c <_scanf_float+0x74>
 800bd0c:	9901      	ldr	r1, [sp, #4]
 800bd0e:	2900      	cmp	r1, #0
 800bd10:	d100      	bne.n	800bd14 <_scanf_float+0x21c>
 800bd12:	e732      	b.n	800bb7a <_scanf_float+0x82>
 800bd14:	0591      	lsls	r1, r2, #22
 800bd16:	d404      	bmi.n	800bd22 <_scanf_float+0x22a>
 800bd18:	9901      	ldr	r1, [sp, #4]
 800bd1a:	9806      	ldr	r0, [sp, #24]
 800bd1c:	9508      	str	r5, [sp, #32]
 800bd1e:	1a09      	subs	r1, r1, r0
 800bd20:	9107      	str	r1, [sp, #28]
 800bd22:	4931      	ldr	r1, [pc, #196]	; (800bde8 <_scanf_float+0x2f0>)
 800bd24:	400a      	ands	r2, r1
 800bd26:	21c0      	movs	r1, #192	; 0xc0
 800bd28:	0049      	lsls	r1, r1, #1
 800bd2a:	430a      	orrs	r2, r1
 800bd2c:	6032      	str	r2, [r6, #0]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	9201      	str	r2, [sp, #4]
 800bd32:	e7b1      	b.n	800bc98 <_scanf_float+0x1a0>
 800bd34:	2403      	movs	r4, #3
 800bd36:	e7af      	b.n	800bc98 <_scanf_float+0x1a0>
 800bd38:	23c0      	movs	r3, #192	; 0xc0
 800bd3a:	005b      	lsls	r3, r3, #1
 800bd3c:	58f3      	ldr	r3, [r6, r3]
 800bd3e:	9900      	ldr	r1, [sp, #0]
 800bd40:	9802      	ldr	r0, [sp, #8]
 800bd42:	4798      	blx	r3
 800bd44:	2800      	cmp	r0, #0
 800bd46:	d100      	bne.n	800bd4a <_scanf_float+0x252>
 800bd48:	e6f9      	b.n	800bb3e <_scanf_float+0x46>
 800bd4a:	e70f      	b.n	800bb6c <_scanf_float+0x74>
 800bd4c:	3d01      	subs	r5, #1
 800bd4e:	5933      	ldr	r3, [r6, r4]
 800bd50:	7829      	ldrb	r1, [r5, #0]
 800bd52:	9a00      	ldr	r2, [sp, #0]
 800bd54:	9802      	ldr	r0, [sp, #8]
 800bd56:	4798      	blx	r3
 800bd58:	6933      	ldr	r3, [r6, #16]
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	6133      	str	r3, [r6, #16]
 800bd5e:	e712      	b.n	800bb86 <_scanf_float+0x8e>
 800bd60:	1e7b      	subs	r3, r7, #1
 800bd62:	2b06      	cmp	r3, #6
 800bd64:	d826      	bhi.n	800bdb4 <_scanf_float+0x2bc>
 800bd66:	2f02      	cmp	r7, #2
 800bd68:	d839      	bhi.n	800bdde <_scanf_float+0x2e6>
 800bd6a:	24be      	movs	r4, #190	; 0xbe
 800bd6c:	0064      	lsls	r4, r4, #1
 800bd6e:	9b03      	ldr	r3, [sp, #12]
 800bd70:	429d      	cmp	r5, r3
 800bd72:	d800      	bhi.n	800bd76 <_scanf_float+0x27e>
 800bd74:	e70b      	b.n	800bb8e <_scanf_float+0x96>
 800bd76:	3d01      	subs	r5, #1
 800bd78:	5933      	ldr	r3, [r6, r4]
 800bd7a:	7829      	ldrb	r1, [r5, #0]
 800bd7c:	9a00      	ldr	r2, [sp, #0]
 800bd7e:	9802      	ldr	r0, [sp, #8]
 800bd80:	4798      	blx	r3
 800bd82:	6933      	ldr	r3, [r6, #16]
 800bd84:	3b01      	subs	r3, #1
 800bd86:	6133      	str	r3, [r6, #16]
 800bd88:	e7f1      	b.n	800bd6e <_scanf_float+0x276>
 800bd8a:	9b04      	ldr	r3, [sp, #16]
 800bd8c:	9a00      	ldr	r2, [sp, #0]
 800bd8e:	3b01      	subs	r3, #1
 800bd90:	9304      	str	r3, [sp, #16]
 800bd92:	7819      	ldrb	r1, [r3, #0]
 800bd94:	23be      	movs	r3, #190	; 0xbe
 800bd96:	005b      	lsls	r3, r3, #1
 800bd98:	58f3      	ldr	r3, [r6, r3]
 800bd9a:	9802      	ldr	r0, [sp, #8]
 800bd9c:	9309      	str	r3, [sp, #36]	; 0x24
 800bd9e:	4798      	blx	r3
 800bda0:	6933      	ldr	r3, [r6, #16]
 800bda2:	3b01      	subs	r3, #1
 800bda4:	6133      	str	r3, [r6, #16]
 800bda6:	3c01      	subs	r4, #1
 800bda8:	b2e4      	uxtb	r4, r4
 800bdaa:	2c02      	cmp	r4, #2
 800bdac:	d1ed      	bne.n	800bd8a <_scanf_float+0x292>
 800bdae:	3f03      	subs	r7, #3
 800bdb0:	b2ff      	uxtb	r7, r7
 800bdb2:	1bed      	subs	r5, r5, r7
 800bdb4:	6833      	ldr	r3, [r6, #0]
 800bdb6:	05da      	lsls	r2, r3, #23
 800bdb8:	d537      	bpl.n	800be2a <_scanf_float+0x332>
 800bdba:	055b      	lsls	r3, r3, #21
 800bdbc:	d51a      	bpl.n	800bdf4 <_scanf_float+0x2fc>
 800bdbe:	24be      	movs	r4, #190	; 0xbe
 800bdc0:	0064      	lsls	r4, r4, #1
 800bdc2:	9b03      	ldr	r3, [sp, #12]
 800bdc4:	429d      	cmp	r5, r3
 800bdc6:	d800      	bhi.n	800bdca <_scanf_float+0x2d2>
 800bdc8:	e6e1      	b.n	800bb8e <_scanf_float+0x96>
 800bdca:	3d01      	subs	r5, #1
 800bdcc:	5933      	ldr	r3, [r6, r4]
 800bdce:	7829      	ldrb	r1, [r5, #0]
 800bdd0:	9a00      	ldr	r2, [sp, #0]
 800bdd2:	9802      	ldr	r0, [sp, #8]
 800bdd4:	4798      	blx	r3
 800bdd6:	6933      	ldr	r3, [r6, #16]
 800bdd8:	3b01      	subs	r3, #1
 800bdda:	6133      	str	r3, [r6, #16]
 800bddc:	e7f1      	b.n	800bdc2 <_scanf_float+0x2ca>
 800bdde:	003c      	movs	r4, r7
 800bde0:	9504      	str	r5, [sp, #16]
 800bde2:	e7e0      	b.n	800bda6 <_scanf_float+0x2ae>
 800bde4:	fffffeff 	.word	0xfffffeff
 800bde8:	fffff87f 	.word	0xfffff87f
 800bdec:	fffffe7f 	.word	0xfffffe7f
 800bdf0:	fffffd7f 	.word	0xfffffd7f
 800bdf4:	6933      	ldr	r3, [r6, #16]
 800bdf6:	1e6c      	subs	r4, r5, #1
 800bdf8:	7821      	ldrb	r1, [r4, #0]
 800bdfa:	3b01      	subs	r3, #1
 800bdfc:	6133      	str	r3, [r6, #16]
 800bdfe:	2965      	cmp	r1, #101	; 0x65
 800be00:	d00c      	beq.n	800be1c <_scanf_float+0x324>
 800be02:	2945      	cmp	r1, #69	; 0x45
 800be04:	d00a      	beq.n	800be1c <_scanf_float+0x324>
 800be06:	23be      	movs	r3, #190	; 0xbe
 800be08:	005b      	lsls	r3, r3, #1
 800be0a:	58f3      	ldr	r3, [r6, r3]
 800be0c:	9a00      	ldr	r2, [sp, #0]
 800be0e:	9802      	ldr	r0, [sp, #8]
 800be10:	4798      	blx	r3
 800be12:	6933      	ldr	r3, [r6, #16]
 800be14:	1eac      	subs	r4, r5, #2
 800be16:	3b01      	subs	r3, #1
 800be18:	7821      	ldrb	r1, [r4, #0]
 800be1a:	6133      	str	r3, [r6, #16]
 800be1c:	23be      	movs	r3, #190	; 0xbe
 800be1e:	005b      	lsls	r3, r3, #1
 800be20:	58f3      	ldr	r3, [r6, r3]
 800be22:	9a00      	ldr	r2, [sp, #0]
 800be24:	9802      	ldr	r0, [sp, #8]
 800be26:	4798      	blx	r3
 800be28:	0025      	movs	r5, r4
 800be2a:	2710      	movs	r7, #16
 800be2c:	6833      	ldr	r3, [r6, #0]
 800be2e:	401f      	ands	r7, r3
 800be30:	d15b      	bne.n	800beea <_scanf_float+0x3f2>
 800be32:	23c0      	movs	r3, #192	; 0xc0
 800be34:	702f      	strb	r7, [r5, #0]
 800be36:	6832      	ldr	r2, [r6, #0]
 800be38:	00db      	lsls	r3, r3, #3
 800be3a:	4013      	ands	r3, r2
 800be3c:	2280      	movs	r2, #128	; 0x80
 800be3e:	00d2      	lsls	r2, r2, #3
 800be40:	4293      	cmp	r3, r2
 800be42:	d11b      	bne.n	800be7c <_scanf_float+0x384>
 800be44:	9a06      	ldr	r2, [sp, #24]
 800be46:	9b01      	ldr	r3, [sp, #4]
 800be48:	1a9b      	subs	r3, r3, r2
 800be4a:	425a      	negs	r2, r3
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d122      	bne.n	800be96 <_scanf_float+0x39e>
 800be50:	2200      	movs	r2, #0
 800be52:	9903      	ldr	r1, [sp, #12]
 800be54:	9802      	ldr	r0, [sp, #8]
 800be56:	f000 fecb 	bl	800cbf0 <_strtod_r>
 800be5a:	9b05      	ldr	r3, [sp, #20]
 800be5c:	0004      	movs	r4, r0
 800be5e:	6830      	ldr	r0, [r6, #0]
 800be60:	000d      	movs	r5, r1
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	0782      	lsls	r2, r0, #30
 800be66:	d523      	bpl.n	800beb0 <_scanf_float+0x3b8>
 800be68:	1d1a      	adds	r2, r3, #4
 800be6a:	9905      	ldr	r1, [sp, #20]
 800be6c:	600a      	str	r2, [r1, #0]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	601c      	str	r4, [r3, #0]
 800be72:	605d      	str	r5, [r3, #4]
 800be74:	68f3      	ldr	r3, [r6, #12]
 800be76:	3301      	adds	r3, #1
 800be78:	60f3      	str	r3, [r6, #12]
 800be7a:	e689      	b.n	800bb90 <_scanf_float+0x98>
 800be7c:	9b07      	ldr	r3, [sp, #28]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d0e6      	beq.n	800be50 <_scanf_float+0x358>
 800be82:	9b08      	ldr	r3, [sp, #32]
 800be84:	003a      	movs	r2, r7
 800be86:	1c59      	adds	r1, r3, #1
 800be88:	9802      	ldr	r0, [sp, #8]
 800be8a:	230a      	movs	r3, #10
 800be8c:	f000 ff40 	bl	800cd10 <_strtol_r>
 800be90:	9b07      	ldr	r3, [sp, #28]
 800be92:	9d08      	ldr	r5, [sp, #32]
 800be94:	1ac2      	subs	r2, r0, r3
 800be96:	0033      	movs	r3, r6
 800be98:	3370      	adds	r3, #112	; 0x70
 800be9a:	33ff      	adds	r3, #255	; 0xff
 800be9c:	429d      	cmp	r5, r3
 800be9e:	d302      	bcc.n	800bea6 <_scanf_float+0x3ae>
 800bea0:	0035      	movs	r5, r6
 800bea2:	356f      	adds	r5, #111	; 0x6f
 800bea4:	35ff      	adds	r5, #255	; 0xff
 800bea6:	4912      	ldr	r1, [pc, #72]	; (800bef0 <_scanf_float+0x3f8>)
 800bea8:	0028      	movs	r0, r5
 800beaa:	f000 f841 	bl	800bf30 <siprintf>
 800beae:	e7cf      	b.n	800be50 <_scanf_float+0x358>
 800beb0:	2104      	movs	r1, #4
 800beb2:	4008      	ands	r0, r1
 800beb4:	1d1a      	adds	r2, r3, #4
 800beb6:	9001      	str	r0, [sp, #4]
 800beb8:	2800      	cmp	r0, #0
 800beba:	d1d6      	bne.n	800be6a <_scanf_float+0x372>
 800bebc:	9905      	ldr	r1, [sp, #20]
 800bebe:	0020      	movs	r0, r4
 800bec0:	600a      	str	r2, [r1, #0]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	0022      	movs	r2, r4
 800bec6:	9300      	str	r3, [sp, #0]
 800bec8:	0029      	movs	r1, r5
 800beca:	002b      	movs	r3, r5
 800becc:	f7fb fc3a 	bl	8007744 <__aeabi_dcmpun>
 800bed0:	2800      	cmp	r0, #0
 800bed2:	d005      	beq.n	800bee0 <_scanf_float+0x3e8>
 800bed4:	9801      	ldr	r0, [sp, #4]
 800bed6:	f000 f827 	bl	800bf28 <nanf>
 800beda:	9b00      	ldr	r3, [sp, #0]
 800bedc:	6018      	str	r0, [r3, #0]
 800bede:	e7c9      	b.n	800be74 <_scanf_float+0x37c>
 800bee0:	0020      	movs	r0, r4
 800bee2:	0029      	movs	r1, r5
 800bee4:	f7fb fd3e 	bl	8007964 <__aeabi_d2f>
 800bee8:	e7f7      	b.n	800beda <_scanf_float+0x3e2>
 800beea:	2700      	movs	r7, #0
 800beec:	e650      	b.n	800bb90 <_scanf_float+0x98>
 800beee:	46c0      	nop			; (mov r8, r8)
 800bef0:	0800fefc 	.word	0x0800fefc

0800bef4 <iprintf>:
 800bef4:	b40f      	push	{r0, r1, r2, r3}
 800bef6:	4b0b      	ldr	r3, [pc, #44]	; (800bf24 <iprintf+0x30>)
 800bef8:	b513      	push	{r0, r1, r4, lr}
 800befa:	681c      	ldr	r4, [r3, #0]
 800befc:	2c00      	cmp	r4, #0
 800befe:	d005      	beq.n	800bf0c <iprintf+0x18>
 800bf00:	69a3      	ldr	r3, [r4, #24]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d102      	bne.n	800bf0c <iprintf+0x18>
 800bf06:	0020      	movs	r0, r4
 800bf08:	f001 fdba 	bl	800da80 <__sinit>
 800bf0c:	ab05      	add	r3, sp, #20
 800bf0e:	9a04      	ldr	r2, [sp, #16]
 800bf10:	68a1      	ldr	r1, [r4, #8]
 800bf12:	0020      	movs	r0, r4
 800bf14:	9301      	str	r3, [sp, #4]
 800bf16:	f002 ffe5 	bl	800eee4 <_vfiprintf_r>
 800bf1a:	bc16      	pop	{r1, r2, r4}
 800bf1c:	bc08      	pop	{r3}
 800bf1e:	b004      	add	sp, #16
 800bf20:	4718      	bx	r3
 800bf22:	46c0      	nop			; (mov r8, r8)
 800bf24:	20000124 	.word	0x20000124

0800bf28 <nanf>:
 800bf28:	4800      	ldr	r0, [pc, #0]	; (800bf2c <nanf+0x4>)
 800bf2a:	4770      	bx	lr
 800bf2c:	7fc00000 	.word	0x7fc00000

0800bf30 <siprintf>:
 800bf30:	b40e      	push	{r1, r2, r3}
 800bf32:	b500      	push	{lr}
 800bf34:	490b      	ldr	r1, [pc, #44]	; (800bf64 <siprintf+0x34>)
 800bf36:	b09c      	sub	sp, #112	; 0x70
 800bf38:	ab1d      	add	r3, sp, #116	; 0x74
 800bf3a:	9002      	str	r0, [sp, #8]
 800bf3c:	9006      	str	r0, [sp, #24]
 800bf3e:	9107      	str	r1, [sp, #28]
 800bf40:	9104      	str	r1, [sp, #16]
 800bf42:	4809      	ldr	r0, [pc, #36]	; (800bf68 <siprintf+0x38>)
 800bf44:	4909      	ldr	r1, [pc, #36]	; (800bf6c <siprintf+0x3c>)
 800bf46:	cb04      	ldmia	r3!, {r2}
 800bf48:	9105      	str	r1, [sp, #20]
 800bf4a:	6800      	ldr	r0, [r0, #0]
 800bf4c:	a902      	add	r1, sp, #8
 800bf4e:	9301      	str	r3, [sp, #4]
 800bf50:	f002 fea2 	bl	800ec98 <_svfiprintf_r>
 800bf54:	2300      	movs	r3, #0
 800bf56:	9a02      	ldr	r2, [sp, #8]
 800bf58:	7013      	strb	r3, [r2, #0]
 800bf5a:	b01c      	add	sp, #112	; 0x70
 800bf5c:	bc08      	pop	{r3}
 800bf5e:	b003      	add	sp, #12
 800bf60:	4718      	bx	r3
 800bf62:	46c0      	nop			; (mov r8, r8)
 800bf64:	7fffffff 	.word	0x7fffffff
 800bf68:	20000124 	.word	0x20000124
 800bf6c:	ffff0208 	.word	0xffff0208

0800bf70 <sulp>:
 800bf70:	b570      	push	{r4, r5, r6, lr}
 800bf72:	0016      	movs	r6, r2
 800bf74:	000d      	movs	r5, r1
 800bf76:	f002 fc51 	bl	800e81c <__ulp>
 800bf7a:	2e00      	cmp	r6, #0
 800bf7c:	d00d      	beq.n	800bf9a <sulp+0x2a>
 800bf7e:	236b      	movs	r3, #107	; 0x6b
 800bf80:	006a      	lsls	r2, r5, #1
 800bf82:	0d52      	lsrs	r2, r2, #21
 800bf84:	1a9b      	subs	r3, r3, r2
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	dd07      	ble.n	800bf9a <sulp+0x2a>
 800bf8a:	2400      	movs	r4, #0
 800bf8c:	4a03      	ldr	r2, [pc, #12]	; (800bf9c <sulp+0x2c>)
 800bf8e:	051b      	lsls	r3, r3, #20
 800bf90:	189d      	adds	r5, r3, r2
 800bf92:	002b      	movs	r3, r5
 800bf94:	0022      	movs	r2, r4
 800bf96:	f7fa fe1b 	bl	8006bd0 <__aeabi_dmul>
 800bf9a:	bd70      	pop	{r4, r5, r6, pc}
 800bf9c:	3ff00000 	.word	0x3ff00000

0800bfa0 <_strtod_l>:
 800bfa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfa2:	b0a7      	sub	sp, #156	; 0x9c
 800bfa4:	9307      	str	r3, [sp, #28]
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	9004      	str	r0, [sp, #16]
 800bfaa:	9807      	ldr	r0, [sp, #28]
 800bfac:	9322      	str	r3, [sp, #136]	; 0x88
 800bfae:	9106      	str	r1, [sp, #24]
 800bfb0:	921d      	str	r2, [sp, #116]	; 0x74
 800bfb2:	f002 f92c 	bl	800e20e <__localeconv_l>
 800bfb6:	0005      	movs	r5, r0
 800bfb8:	6800      	ldr	r0, [r0, #0]
 800bfba:	f7f9 f8a9 	bl	8005110 <strlen>
 800bfbe:	2600      	movs	r6, #0
 800bfc0:	2700      	movs	r7, #0
 800bfc2:	9b06      	ldr	r3, [sp, #24]
 800bfc4:	9005      	str	r0, [sp, #20]
 800bfc6:	9321      	str	r3, [sp, #132]	; 0x84
 800bfc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfca:	781a      	ldrb	r2, [r3, #0]
 800bfcc:	2a0d      	cmp	r2, #13
 800bfce:	d839      	bhi.n	800c044 <_strtod_l+0xa4>
 800bfd0:	2a09      	cmp	r2, #9
 800bfd2:	d23d      	bcs.n	800c050 <_strtod_l+0xb0>
 800bfd4:	2a00      	cmp	r2, #0
 800bfd6:	d044      	beq.n	800c062 <_strtod_l+0xc2>
 800bfd8:	2300      	movs	r3, #0
 800bfda:	9313      	str	r3, [sp, #76]	; 0x4c
 800bfdc:	2200      	movs	r2, #0
 800bfde:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800bfe0:	920c      	str	r2, [sp, #48]	; 0x30
 800bfe2:	7823      	ldrb	r3, [r4, #0]
 800bfe4:	2b30      	cmp	r3, #48	; 0x30
 800bfe6:	d000      	beq.n	800bfea <_strtod_l+0x4a>
 800bfe8:	e07e      	b.n	800c0e8 <_strtod_l+0x148>
 800bfea:	7863      	ldrb	r3, [r4, #1]
 800bfec:	2b58      	cmp	r3, #88	; 0x58
 800bfee:	d002      	beq.n	800bff6 <_strtod_l+0x56>
 800bff0:	2b78      	cmp	r3, #120	; 0x78
 800bff2:	d000      	beq.n	800bff6 <_strtod_l+0x56>
 800bff4:	e06e      	b.n	800c0d4 <_strtod_l+0x134>
 800bff6:	9b07      	ldr	r3, [sp, #28]
 800bff8:	4a96      	ldr	r2, [pc, #600]	; (800c254 <_strtod_l+0x2b4>)
 800bffa:	9302      	str	r3, [sp, #8]
 800bffc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bffe:	a921      	add	r1, sp, #132	; 0x84
 800c000:	9301      	str	r3, [sp, #4]
 800c002:	ab22      	add	r3, sp, #136	; 0x88
 800c004:	9300      	str	r3, [sp, #0]
 800c006:	9804      	ldr	r0, [sp, #16]
 800c008:	ab23      	add	r3, sp, #140	; 0x8c
 800c00a:	f001 fe15 	bl	800dc38 <__gethex>
 800c00e:	2507      	movs	r5, #7
 800c010:	9005      	str	r0, [sp, #20]
 800c012:	4005      	ands	r5, r0
 800c014:	d005      	beq.n	800c022 <_strtod_l+0x82>
 800c016:	2d06      	cmp	r5, #6
 800c018:	d12f      	bne.n	800c07a <_strtod_l+0xda>
 800c01a:	2300      	movs	r3, #0
 800c01c:	3401      	adds	r4, #1
 800c01e:	9421      	str	r4, [sp, #132]	; 0x84
 800c020:	9313      	str	r3, [sp, #76]	; 0x4c
 800c022:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c024:	2b00      	cmp	r3, #0
 800c026:	d002      	beq.n	800c02e <_strtod_l+0x8e>
 800c028:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c02a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c02c:	601a      	str	r2, [r3, #0]
 800c02e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c030:	2b00      	cmp	r3, #0
 800c032:	d01d      	beq.n	800c070 <_strtod_l+0xd0>
 800c034:	2380      	movs	r3, #128	; 0x80
 800c036:	0032      	movs	r2, r6
 800c038:	061b      	lsls	r3, r3, #24
 800c03a:	18fb      	adds	r3, r7, r3
 800c03c:	0010      	movs	r0, r2
 800c03e:	0019      	movs	r1, r3
 800c040:	b027      	add	sp, #156	; 0x9c
 800c042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c044:	2a2b      	cmp	r2, #43	; 0x2b
 800c046:	d016      	beq.n	800c076 <_strtod_l+0xd6>
 800c048:	2a2d      	cmp	r2, #45	; 0x2d
 800c04a:	d003      	beq.n	800c054 <_strtod_l+0xb4>
 800c04c:	2a20      	cmp	r2, #32
 800c04e:	d1c3      	bne.n	800bfd8 <_strtod_l+0x38>
 800c050:	3301      	adds	r3, #1
 800c052:	e7b8      	b.n	800bfc6 <_strtod_l+0x26>
 800c054:	2201      	movs	r2, #1
 800c056:	9213      	str	r2, [sp, #76]	; 0x4c
 800c058:	1c5a      	adds	r2, r3, #1
 800c05a:	9221      	str	r2, [sp, #132]	; 0x84
 800c05c:	785b      	ldrb	r3, [r3, #1]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d1bc      	bne.n	800bfdc <_strtod_l+0x3c>
 800c062:	9b06      	ldr	r3, [sp, #24]
 800c064:	9321      	str	r3, [sp, #132]	; 0x84
 800c066:	2300      	movs	r3, #0
 800c068:	9313      	str	r3, [sp, #76]	; 0x4c
 800c06a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d1db      	bne.n	800c028 <_strtod_l+0x88>
 800c070:	0032      	movs	r2, r6
 800c072:	003b      	movs	r3, r7
 800c074:	e7e2      	b.n	800c03c <_strtod_l+0x9c>
 800c076:	2200      	movs	r2, #0
 800c078:	e7ed      	b.n	800c056 <_strtod_l+0xb6>
 800c07a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c07c:	2a00      	cmp	r2, #0
 800c07e:	d007      	beq.n	800c090 <_strtod_l+0xf0>
 800c080:	2135      	movs	r1, #53	; 0x35
 800c082:	a824      	add	r0, sp, #144	; 0x90
 800c084:	f002 fcb7 	bl	800e9f6 <__copybits>
 800c088:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c08a:	9804      	ldr	r0, [sp, #16]
 800c08c:	f002 f92d 	bl	800e2ea <_Bfree>
 800c090:	1e68      	subs	r0, r5, #1
 800c092:	2804      	cmp	r0, #4
 800c094:	d806      	bhi.n	800c0a4 <_strtod_l+0x104>
 800c096:	f7f9 f84d 	bl	8005134 <__gnu_thumb1_case_uqi>
 800c09a:	030c      	.short	0x030c
 800c09c:	1917      	.short	0x1917
 800c09e:	0c          	.byte	0x0c
 800c09f:	00          	.byte	0x00
 800c0a0:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800c0a2:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800c0a4:	9b05      	ldr	r3, [sp, #20]
 800c0a6:	071b      	lsls	r3, r3, #28
 800c0a8:	d5bb      	bpl.n	800c022 <_strtod_l+0x82>
 800c0aa:	2380      	movs	r3, #128	; 0x80
 800c0ac:	061b      	lsls	r3, r3, #24
 800c0ae:	431f      	orrs	r7, r3
 800c0b0:	e7b7      	b.n	800c022 <_strtod_l+0x82>
 800c0b2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800c0b4:	4a68      	ldr	r2, [pc, #416]	; (800c258 <_strtod_l+0x2b8>)
 800c0b6:	4969      	ldr	r1, [pc, #420]	; (800c25c <_strtod_l+0x2bc>)
 800c0b8:	401a      	ands	r2, r3
 800c0ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c0bc:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800c0be:	185b      	adds	r3, r3, r1
 800c0c0:	051b      	lsls	r3, r3, #20
 800c0c2:	431a      	orrs	r2, r3
 800c0c4:	0017      	movs	r7, r2
 800c0c6:	e7ed      	b.n	800c0a4 <_strtod_l+0x104>
 800c0c8:	4f65      	ldr	r7, [pc, #404]	; (800c260 <_strtod_l+0x2c0>)
 800c0ca:	e7eb      	b.n	800c0a4 <_strtod_l+0x104>
 800c0cc:	2601      	movs	r6, #1
 800c0ce:	4f65      	ldr	r7, [pc, #404]	; (800c264 <_strtod_l+0x2c4>)
 800c0d0:	4276      	negs	r6, r6
 800c0d2:	e7e7      	b.n	800c0a4 <_strtod_l+0x104>
 800c0d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0d6:	1c5a      	adds	r2, r3, #1
 800c0d8:	9221      	str	r2, [sp, #132]	; 0x84
 800c0da:	785b      	ldrb	r3, [r3, #1]
 800c0dc:	2b30      	cmp	r3, #48	; 0x30
 800c0de:	d0f9      	beq.n	800c0d4 <_strtod_l+0x134>
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d09e      	beq.n	800c022 <_strtod_l+0x82>
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	930c      	str	r3, [sp, #48]	; 0x30
 800c0e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0ea:	220a      	movs	r2, #10
 800c0ec:	9312      	str	r3, [sp, #72]	; 0x48
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c0f2:	9308      	str	r3, [sp, #32]
 800c0f4:	930a      	str	r3, [sp, #40]	; 0x28
 800c0f6:	9821      	ldr	r0, [sp, #132]	; 0x84
 800c0f8:	7804      	ldrb	r4, [r0, #0]
 800c0fa:	0023      	movs	r3, r4
 800c0fc:	3b30      	subs	r3, #48	; 0x30
 800c0fe:	b2d9      	uxtb	r1, r3
 800c100:	2909      	cmp	r1, #9
 800c102:	d934      	bls.n	800c16e <_strtod_l+0x1ce>
 800c104:	9a05      	ldr	r2, [sp, #20]
 800c106:	6829      	ldr	r1, [r5, #0]
 800c108:	f003 f860 	bl	800f1cc <strncmp>
 800c10c:	2800      	cmp	r0, #0
 800c10e:	d040      	beq.n	800c192 <_strtod_l+0x1f2>
 800c110:	2000      	movs	r0, #0
 800c112:	0023      	movs	r3, r4
 800c114:	4684      	mov	ip, r0
 800c116:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c118:	9007      	str	r0, [sp, #28]
 800c11a:	9205      	str	r2, [sp, #20]
 800c11c:	2220      	movs	r2, #32
 800c11e:	0019      	movs	r1, r3
 800c120:	4391      	bics	r1, r2
 800c122:	000a      	movs	r2, r1
 800c124:	2100      	movs	r1, #0
 800c126:	2a45      	cmp	r2, #69	; 0x45
 800c128:	d000      	beq.n	800c12c <_strtod_l+0x18c>
 800c12a:	e0bf      	b.n	800c2ac <_strtod_l+0x30c>
 800c12c:	9b05      	ldr	r3, [sp, #20]
 800c12e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c130:	4303      	orrs	r3, r0
 800c132:	4313      	orrs	r3, r2
 800c134:	428b      	cmp	r3, r1
 800c136:	d094      	beq.n	800c062 <_strtod_l+0xc2>
 800c138:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c13a:	9306      	str	r3, [sp, #24]
 800c13c:	3301      	adds	r3, #1
 800c13e:	9321      	str	r3, [sp, #132]	; 0x84
 800c140:	9b06      	ldr	r3, [sp, #24]
 800c142:	785b      	ldrb	r3, [r3, #1]
 800c144:	2b2b      	cmp	r3, #43	; 0x2b
 800c146:	d100      	bne.n	800c14a <_strtod_l+0x1aa>
 800c148:	e082      	b.n	800c250 <_strtod_l+0x2b0>
 800c14a:	000c      	movs	r4, r1
 800c14c:	2b2d      	cmp	r3, #45	; 0x2d
 800c14e:	d105      	bne.n	800c15c <_strtod_l+0x1bc>
 800c150:	2401      	movs	r4, #1
 800c152:	9b06      	ldr	r3, [sp, #24]
 800c154:	3302      	adds	r3, #2
 800c156:	9321      	str	r3, [sp, #132]	; 0x84
 800c158:	9b06      	ldr	r3, [sp, #24]
 800c15a:	789b      	ldrb	r3, [r3, #2]
 800c15c:	001a      	movs	r2, r3
 800c15e:	3a30      	subs	r2, #48	; 0x30
 800c160:	2a09      	cmp	r2, #9
 800c162:	d800      	bhi.n	800c166 <_strtod_l+0x1c6>
 800c164:	e084      	b.n	800c270 <_strtod_l+0x2d0>
 800c166:	9a06      	ldr	r2, [sp, #24]
 800c168:	2100      	movs	r1, #0
 800c16a:	9221      	str	r2, [sp, #132]	; 0x84
 800c16c:	e09e      	b.n	800c2ac <_strtod_l+0x30c>
 800c16e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c170:	2908      	cmp	r1, #8
 800c172:	dc09      	bgt.n	800c188 <_strtod_l+0x1e8>
 800c174:	9908      	ldr	r1, [sp, #32]
 800c176:	4351      	muls	r1, r2
 800c178:	18cb      	adds	r3, r1, r3
 800c17a:	9308      	str	r3, [sp, #32]
 800c17c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c17e:	3001      	adds	r0, #1
 800c180:	3301      	adds	r3, #1
 800c182:	930a      	str	r3, [sp, #40]	; 0x28
 800c184:	9021      	str	r0, [sp, #132]	; 0x84
 800c186:	e7b6      	b.n	800c0f6 <_strtod_l+0x156>
 800c188:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c18a:	4351      	muls	r1, r2
 800c18c:	18cb      	adds	r3, r1, r3
 800c18e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c190:	e7f4      	b.n	800c17c <_strtod_l+0x1dc>
 800c192:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c194:	9b05      	ldr	r3, [sp, #20]
 800c196:	4694      	mov	ip, r2
 800c198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c19a:	4463      	add	r3, ip
 800c19c:	9321      	str	r3, [sp, #132]	; 0x84
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	2a00      	cmp	r2, #0
 800c1a2:	d036      	beq.n	800c212 <_strtod_l+0x272>
 800c1a4:	4684      	mov	ip, r0
 800c1a6:	9205      	str	r2, [sp, #20]
 800c1a8:	001a      	movs	r2, r3
 800c1aa:	3a30      	subs	r2, #48	; 0x30
 800c1ac:	2a09      	cmp	r2, #9
 800c1ae:	d912      	bls.n	800c1d6 <_strtod_l+0x236>
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	9207      	str	r2, [sp, #28]
 800c1b4:	e7b2      	b.n	800c11c <_strtod_l+0x17c>
 800c1b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1b8:	3001      	adds	r0, #1
 800c1ba:	1c5a      	adds	r2, r3, #1
 800c1bc:	9221      	str	r2, [sp, #132]	; 0x84
 800c1be:	785b      	ldrb	r3, [r3, #1]
 800c1c0:	2b30      	cmp	r3, #48	; 0x30
 800c1c2:	d0f8      	beq.n	800c1b6 <_strtod_l+0x216>
 800c1c4:	001a      	movs	r2, r3
 800c1c6:	3a31      	subs	r2, #49	; 0x31
 800c1c8:	2a08      	cmp	r2, #8
 800c1ca:	d83c      	bhi.n	800c246 <_strtod_l+0x2a6>
 800c1cc:	4684      	mov	ip, r0
 800c1ce:	2000      	movs	r0, #0
 800c1d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c1d2:	9005      	str	r0, [sp, #20]
 800c1d4:	9212      	str	r2, [sp, #72]	; 0x48
 800c1d6:	3b30      	subs	r3, #48	; 0x30
 800c1d8:	1c42      	adds	r2, r0, #1
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d013      	beq.n	800c206 <_strtod_l+0x266>
 800c1de:	210a      	movs	r1, #10
 800c1e0:	4494      	add	ip, r2
 800c1e2:	9a05      	ldr	r2, [sp, #20]
 800c1e4:	1885      	adds	r5, r0, r2
 800c1e6:	42aa      	cmp	r2, r5
 800c1e8:	d115      	bne.n	800c216 <_strtod_l+0x276>
 800c1ea:	9905      	ldr	r1, [sp, #20]
 800c1ec:	9a05      	ldr	r2, [sp, #20]
 800c1ee:	3101      	adds	r1, #1
 800c1f0:	1809      	adds	r1, r1, r0
 800c1f2:	1812      	adds	r2, r2, r0
 800c1f4:	9105      	str	r1, [sp, #20]
 800c1f6:	2a08      	cmp	r2, #8
 800c1f8:	dc1b      	bgt.n	800c232 <_strtod_l+0x292>
 800c1fa:	220a      	movs	r2, #10
 800c1fc:	9908      	ldr	r1, [sp, #32]
 800c1fe:	434a      	muls	r2, r1
 800c200:	189b      	adds	r3, r3, r2
 800c202:	2200      	movs	r2, #0
 800c204:	9308      	str	r3, [sp, #32]
 800c206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c208:	0010      	movs	r0, r2
 800c20a:	1c59      	adds	r1, r3, #1
 800c20c:	9121      	str	r1, [sp, #132]	; 0x84
 800c20e:	785b      	ldrb	r3, [r3, #1]
 800c210:	e7ca      	b.n	800c1a8 <_strtod_l+0x208>
 800c212:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c214:	e7d4      	b.n	800c1c0 <_strtod_l+0x220>
 800c216:	1c54      	adds	r4, r2, #1
 800c218:	2a08      	cmp	r2, #8
 800c21a:	dc04      	bgt.n	800c226 <_strtod_l+0x286>
 800c21c:	9a08      	ldr	r2, [sp, #32]
 800c21e:	434a      	muls	r2, r1
 800c220:	9208      	str	r2, [sp, #32]
 800c222:	0022      	movs	r2, r4
 800c224:	e7df      	b.n	800c1e6 <_strtod_l+0x246>
 800c226:	2c10      	cmp	r4, #16
 800c228:	dcfb      	bgt.n	800c222 <_strtod_l+0x282>
 800c22a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c22c:	434a      	muls	r2, r1
 800c22e:	920b      	str	r2, [sp, #44]	; 0x2c
 800c230:	e7f7      	b.n	800c222 <_strtod_l+0x282>
 800c232:	9905      	ldr	r1, [sp, #20]
 800c234:	2200      	movs	r2, #0
 800c236:	2910      	cmp	r1, #16
 800c238:	dce5      	bgt.n	800c206 <_strtod_l+0x266>
 800c23a:	210a      	movs	r1, #10
 800c23c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c23e:	4341      	muls	r1, r0
 800c240:	185b      	adds	r3, r3, r1
 800c242:	930b      	str	r3, [sp, #44]	; 0x2c
 800c244:	e7df      	b.n	800c206 <_strtod_l+0x266>
 800c246:	2200      	movs	r2, #0
 800c248:	4694      	mov	ip, r2
 800c24a:	9205      	str	r2, [sp, #20]
 800c24c:	3201      	adds	r2, #1
 800c24e:	e7b0      	b.n	800c1b2 <_strtod_l+0x212>
 800c250:	000c      	movs	r4, r1
 800c252:	e77e      	b.n	800c152 <_strtod_l+0x1b2>
 800c254:	0800ff04 	.word	0x0800ff04
 800c258:	ffefffff 	.word	0xffefffff
 800c25c:	00000433 	.word	0x00000433
 800c260:	7ff00000 	.word	0x7ff00000
 800c264:	7fffffff 	.word	0x7fffffff
 800c268:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c26a:	1c5a      	adds	r2, r3, #1
 800c26c:	9221      	str	r2, [sp, #132]	; 0x84
 800c26e:	785b      	ldrb	r3, [r3, #1]
 800c270:	2b30      	cmp	r3, #48	; 0x30
 800c272:	d0f9      	beq.n	800c268 <_strtod_l+0x2c8>
 800c274:	001a      	movs	r2, r3
 800c276:	3a31      	subs	r2, #49	; 0x31
 800c278:	2100      	movs	r1, #0
 800c27a:	2a08      	cmp	r2, #8
 800c27c:	d816      	bhi.n	800c2ac <_strtod_l+0x30c>
 800c27e:	3b30      	subs	r3, #48	; 0x30
 800c280:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800c282:	930e      	str	r3, [sp, #56]	; 0x38
 800c284:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c286:	1c59      	adds	r1, r3, #1
 800c288:	9121      	str	r1, [sp, #132]	; 0x84
 800c28a:	785b      	ldrb	r3, [r3, #1]
 800c28c:	001a      	movs	r2, r3
 800c28e:	3a30      	subs	r2, #48	; 0x30
 800c290:	2a09      	cmp	r2, #9
 800c292:	d932      	bls.n	800c2fa <_strtod_l+0x35a>
 800c294:	1b4a      	subs	r2, r1, r5
 800c296:	4dad      	ldr	r5, [pc, #692]	; (800c54c <_strtod_l+0x5ac>)
 800c298:	0029      	movs	r1, r5
 800c29a:	2a08      	cmp	r2, #8
 800c29c:	dc03      	bgt.n	800c2a6 <_strtod_l+0x306>
 800c29e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c2a0:	42a9      	cmp	r1, r5
 800c2a2:	dd00      	ble.n	800c2a6 <_strtod_l+0x306>
 800c2a4:	0029      	movs	r1, r5
 800c2a6:	2c00      	cmp	r4, #0
 800c2a8:	d000      	beq.n	800c2ac <_strtod_l+0x30c>
 800c2aa:	4249      	negs	r1, r1
 800c2ac:	9a05      	ldr	r2, [sp, #20]
 800c2ae:	2a00      	cmp	r2, #0
 800c2b0:	d149      	bne.n	800c346 <_strtod_l+0x3a6>
 800c2b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2b4:	4310      	orrs	r0, r2
 800c2b6:	d000      	beq.n	800c2ba <_strtod_l+0x31a>
 800c2b8:	e6b3      	b.n	800c022 <_strtod_l+0x82>
 800c2ba:	9a07      	ldr	r2, [sp, #28]
 800c2bc:	2a00      	cmp	r2, #0
 800c2be:	d000      	beq.n	800c2c2 <_strtod_l+0x322>
 800c2c0:	e6cf      	b.n	800c062 <_strtod_l+0xc2>
 800c2c2:	2b4e      	cmp	r3, #78	; 0x4e
 800c2c4:	d025      	beq.n	800c312 <_strtod_l+0x372>
 800c2c6:	dc1f      	bgt.n	800c308 <_strtod_l+0x368>
 800c2c8:	2b49      	cmp	r3, #73	; 0x49
 800c2ca:	d000      	beq.n	800c2ce <_strtod_l+0x32e>
 800c2cc:	e6c9      	b.n	800c062 <_strtod_l+0xc2>
 800c2ce:	49a0      	ldr	r1, [pc, #640]	; (800c550 <_strtod_l+0x5b0>)
 800c2d0:	a821      	add	r0, sp, #132	; 0x84
 800c2d2:	f001 feee 	bl	800e0b2 <__match>
 800c2d6:	2800      	cmp	r0, #0
 800c2d8:	d100      	bne.n	800c2dc <_strtod_l+0x33c>
 800c2da:	e6c2      	b.n	800c062 <_strtod_l+0xc2>
 800c2dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2de:	499d      	ldr	r1, [pc, #628]	; (800c554 <_strtod_l+0x5b4>)
 800c2e0:	3b01      	subs	r3, #1
 800c2e2:	a821      	add	r0, sp, #132	; 0x84
 800c2e4:	9321      	str	r3, [sp, #132]	; 0x84
 800c2e6:	f001 fee4 	bl	800e0b2 <__match>
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	d102      	bne.n	800c2f4 <_strtod_l+0x354>
 800c2ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	9321      	str	r3, [sp, #132]	; 0x84
 800c2f4:	4f98      	ldr	r7, [pc, #608]	; (800c558 <_strtod_l+0x5b8>)
 800c2f6:	2600      	movs	r6, #0
 800c2f8:	e693      	b.n	800c022 <_strtod_l+0x82>
 800c2fa:	220a      	movs	r2, #10
 800c2fc:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c2fe:	434a      	muls	r2, r1
 800c300:	18d2      	adds	r2, r2, r3
 800c302:	3a30      	subs	r2, #48	; 0x30
 800c304:	920e      	str	r2, [sp, #56]	; 0x38
 800c306:	e7bd      	b.n	800c284 <_strtod_l+0x2e4>
 800c308:	2b69      	cmp	r3, #105	; 0x69
 800c30a:	d0e0      	beq.n	800c2ce <_strtod_l+0x32e>
 800c30c:	2b6e      	cmp	r3, #110	; 0x6e
 800c30e:	d000      	beq.n	800c312 <_strtod_l+0x372>
 800c310:	e6a7      	b.n	800c062 <_strtod_l+0xc2>
 800c312:	4992      	ldr	r1, [pc, #584]	; (800c55c <_strtod_l+0x5bc>)
 800c314:	a821      	add	r0, sp, #132	; 0x84
 800c316:	f001 fecc 	bl	800e0b2 <__match>
 800c31a:	2800      	cmp	r0, #0
 800c31c:	d100      	bne.n	800c320 <_strtod_l+0x380>
 800c31e:	e6a0      	b.n	800c062 <_strtod_l+0xc2>
 800c320:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	2b28      	cmp	r3, #40	; 0x28
 800c326:	d10c      	bne.n	800c342 <_strtod_l+0x3a2>
 800c328:	aa24      	add	r2, sp, #144	; 0x90
 800c32a:	498d      	ldr	r1, [pc, #564]	; (800c560 <_strtod_l+0x5c0>)
 800c32c:	a821      	add	r0, sp, #132	; 0x84
 800c32e:	f001 fed4 	bl	800e0da <__hexnan>
 800c332:	2805      	cmp	r0, #5
 800c334:	d105      	bne.n	800c342 <_strtod_l+0x3a2>
 800c336:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800c338:	4a87      	ldr	r2, [pc, #540]	; (800c558 <_strtod_l+0x5b8>)
 800c33a:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800c33c:	431a      	orrs	r2, r3
 800c33e:	0017      	movs	r7, r2
 800c340:	e66f      	b.n	800c022 <_strtod_l+0x82>
 800c342:	4f88      	ldr	r7, [pc, #544]	; (800c564 <_strtod_l+0x5c4>)
 800c344:	e7d7      	b.n	800c2f6 <_strtod_l+0x356>
 800c346:	4663      	mov	r3, ip
 800c348:	1acb      	subs	r3, r1, r3
 800c34a:	9307      	str	r3, [sp, #28]
 800c34c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d101      	bne.n	800c356 <_strtod_l+0x3b6>
 800c352:	9b05      	ldr	r3, [sp, #20]
 800c354:	930a      	str	r3, [sp, #40]	; 0x28
 800c356:	9c05      	ldr	r4, [sp, #20]
 800c358:	2c10      	cmp	r4, #16
 800c35a:	dd00      	ble.n	800c35e <_strtod_l+0x3be>
 800c35c:	2410      	movs	r4, #16
 800c35e:	9808      	ldr	r0, [sp, #32]
 800c360:	f7fb fa7c 	bl	800785c <__aeabi_ui2d>
 800c364:	9b05      	ldr	r3, [sp, #20]
 800c366:	0006      	movs	r6, r0
 800c368:	000f      	movs	r7, r1
 800c36a:	2b09      	cmp	r3, #9
 800c36c:	dc15      	bgt.n	800c39a <_strtod_l+0x3fa>
 800c36e:	9b07      	ldr	r3, [sp, #28]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d100      	bne.n	800c376 <_strtod_l+0x3d6>
 800c374:	e655      	b.n	800c022 <_strtod_l+0x82>
 800c376:	9b07      	ldr	r3, [sp, #28]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	dc00      	bgt.n	800c37e <_strtod_l+0x3de>
 800c37c:	e07d      	b.n	800c47a <_strtod_l+0x4da>
 800c37e:	2b16      	cmp	r3, #22
 800c380:	dc62      	bgt.n	800c448 <_strtod_l+0x4a8>
 800c382:	00dc      	lsls	r4, r3, #3
 800c384:	4b78      	ldr	r3, [pc, #480]	; (800c568 <_strtod_l+0x5c8>)
 800c386:	0032      	movs	r2, r6
 800c388:	1919      	adds	r1, r3, r4
 800c38a:	003b      	movs	r3, r7
 800c38c:	6808      	ldr	r0, [r1, #0]
 800c38e:	6849      	ldr	r1, [r1, #4]
 800c390:	f7fa fc1e 	bl	8006bd0 <__aeabi_dmul>
 800c394:	0006      	movs	r6, r0
 800c396:	000f      	movs	r7, r1
 800c398:	e643      	b.n	800c022 <_strtod_l+0x82>
 800c39a:	0022      	movs	r2, r4
 800c39c:	4b72      	ldr	r3, [pc, #456]	; (800c568 <_strtod_l+0x5c8>)
 800c39e:	3a09      	subs	r2, #9
 800c3a0:	00d2      	lsls	r2, r2, #3
 800c3a2:	189b      	adds	r3, r3, r2
 800c3a4:	681a      	ldr	r2, [r3, #0]
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	f7fa fc12 	bl	8006bd0 <__aeabi_dmul>
 800c3ac:	0006      	movs	r6, r0
 800c3ae:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c3b0:	000f      	movs	r7, r1
 800c3b2:	f7fb fa53 	bl	800785c <__aeabi_ui2d>
 800c3b6:	000b      	movs	r3, r1
 800c3b8:	0002      	movs	r2, r0
 800c3ba:	0039      	movs	r1, r7
 800c3bc:	0030      	movs	r0, r6
 800c3be:	f7f9 fce1 	bl	8005d84 <__aeabi_dadd>
 800c3c2:	9b05      	ldr	r3, [sp, #20]
 800c3c4:	0006      	movs	r6, r0
 800c3c6:	000f      	movs	r7, r1
 800c3c8:	2b0f      	cmp	r3, #15
 800c3ca:	ddd0      	ble.n	800c36e <_strtod_l+0x3ce>
 800c3cc:	9b05      	ldr	r3, [sp, #20]
 800c3ce:	1b1c      	subs	r4, r3, r4
 800c3d0:	9b07      	ldr	r3, [sp, #28]
 800c3d2:	18e4      	adds	r4, r4, r3
 800c3d4:	2c00      	cmp	r4, #0
 800c3d6:	dc00      	bgt.n	800c3da <_strtod_l+0x43a>
 800c3d8:	e094      	b.n	800c504 <_strtod_l+0x564>
 800c3da:	230f      	movs	r3, #15
 800c3dc:	4023      	ands	r3, r4
 800c3de:	d00a      	beq.n	800c3f6 <_strtod_l+0x456>
 800c3e0:	4961      	ldr	r1, [pc, #388]	; (800c568 <_strtod_l+0x5c8>)
 800c3e2:	00db      	lsls	r3, r3, #3
 800c3e4:	18c9      	adds	r1, r1, r3
 800c3e6:	0032      	movs	r2, r6
 800c3e8:	6808      	ldr	r0, [r1, #0]
 800c3ea:	6849      	ldr	r1, [r1, #4]
 800c3ec:	003b      	movs	r3, r7
 800c3ee:	f7fa fbef 	bl	8006bd0 <__aeabi_dmul>
 800c3f2:	0006      	movs	r6, r0
 800c3f4:	000f      	movs	r7, r1
 800c3f6:	230f      	movs	r3, #15
 800c3f8:	439c      	bics	r4, r3
 800c3fa:	d06e      	beq.n	800c4da <_strtod_l+0x53a>
 800c3fc:	3326      	adds	r3, #38	; 0x26
 800c3fe:	33ff      	adds	r3, #255	; 0xff
 800c400:	429c      	cmp	r4, r3
 800c402:	dd48      	ble.n	800c496 <_strtod_l+0x4f6>
 800c404:	2400      	movs	r4, #0
 800c406:	9405      	str	r4, [sp, #20]
 800c408:	940b      	str	r4, [sp, #44]	; 0x2c
 800c40a:	940a      	str	r4, [sp, #40]	; 0x28
 800c40c:	2322      	movs	r3, #34	; 0x22
 800c40e:	2600      	movs	r6, #0
 800c410:	9a04      	ldr	r2, [sp, #16]
 800c412:	4f51      	ldr	r7, [pc, #324]	; (800c558 <_strtod_l+0x5b8>)
 800c414:	6013      	str	r3, [r2, #0]
 800c416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c418:	42b3      	cmp	r3, r6
 800c41a:	d100      	bne.n	800c41e <_strtod_l+0x47e>
 800c41c:	e601      	b.n	800c022 <_strtod_l+0x82>
 800c41e:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c420:	9804      	ldr	r0, [sp, #16]
 800c422:	f001 ff62 	bl	800e2ea <_Bfree>
 800c426:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c428:	9804      	ldr	r0, [sp, #16]
 800c42a:	f001 ff5e 	bl	800e2ea <_Bfree>
 800c42e:	9905      	ldr	r1, [sp, #20]
 800c430:	9804      	ldr	r0, [sp, #16]
 800c432:	f001 ff5a 	bl	800e2ea <_Bfree>
 800c436:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c438:	9804      	ldr	r0, [sp, #16]
 800c43a:	f001 ff56 	bl	800e2ea <_Bfree>
 800c43e:	0021      	movs	r1, r4
 800c440:	9804      	ldr	r0, [sp, #16]
 800c442:	f001 ff52 	bl	800e2ea <_Bfree>
 800c446:	e5ec      	b.n	800c022 <_strtod_l+0x82>
 800c448:	2325      	movs	r3, #37	; 0x25
 800c44a:	9a05      	ldr	r2, [sp, #20]
 800c44c:	1a9b      	subs	r3, r3, r2
 800c44e:	9a07      	ldr	r2, [sp, #28]
 800c450:	4293      	cmp	r3, r2
 800c452:	dbbb      	blt.n	800c3cc <_strtod_l+0x42c>
 800c454:	230f      	movs	r3, #15
 800c456:	9a05      	ldr	r2, [sp, #20]
 800c458:	4c43      	ldr	r4, [pc, #268]	; (800c568 <_strtod_l+0x5c8>)
 800c45a:	1a9d      	subs	r5, r3, r2
 800c45c:	00e9      	lsls	r1, r5, #3
 800c45e:	1861      	adds	r1, r4, r1
 800c460:	0032      	movs	r2, r6
 800c462:	6808      	ldr	r0, [r1, #0]
 800c464:	6849      	ldr	r1, [r1, #4]
 800c466:	003b      	movs	r3, r7
 800c468:	f7fa fbb2 	bl	8006bd0 <__aeabi_dmul>
 800c46c:	9b07      	ldr	r3, [sp, #28]
 800c46e:	1b5e      	subs	r6, r3, r5
 800c470:	00f6      	lsls	r6, r6, #3
 800c472:	19a6      	adds	r6, r4, r6
 800c474:	6832      	ldr	r2, [r6, #0]
 800c476:	6873      	ldr	r3, [r6, #4]
 800c478:	e78a      	b.n	800c390 <_strtod_l+0x3f0>
 800c47a:	9b07      	ldr	r3, [sp, #28]
 800c47c:	3316      	adds	r3, #22
 800c47e:	dba5      	blt.n	800c3cc <_strtod_l+0x42c>
 800c480:	9b07      	ldr	r3, [sp, #28]
 800c482:	0030      	movs	r0, r6
 800c484:	00da      	lsls	r2, r3, #3
 800c486:	4b38      	ldr	r3, [pc, #224]	; (800c568 <_strtod_l+0x5c8>)
 800c488:	0039      	movs	r1, r7
 800c48a:	1a9b      	subs	r3, r3, r2
 800c48c:	681a      	ldr	r2, [r3, #0]
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	f7f9 ff94 	bl	80063bc <__aeabi_ddiv>
 800c494:	e77e      	b.n	800c394 <_strtod_l+0x3f4>
 800c496:	2300      	movs	r3, #0
 800c498:	0030      	movs	r0, r6
 800c49a:	0039      	movs	r1, r7
 800c49c:	001d      	movs	r5, r3
 800c49e:	1124      	asrs	r4, r4, #4
 800c4a0:	2c01      	cmp	r4, #1
 800c4a2:	dc1d      	bgt.n	800c4e0 <_strtod_l+0x540>
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d001      	beq.n	800c4ac <_strtod_l+0x50c>
 800c4a8:	0006      	movs	r6, r0
 800c4aa:	000f      	movs	r7, r1
 800c4ac:	4b2f      	ldr	r3, [pc, #188]	; (800c56c <_strtod_l+0x5cc>)
 800c4ae:	00ed      	lsls	r5, r5, #3
 800c4b0:	18ff      	adds	r7, r7, r3
 800c4b2:	4b2f      	ldr	r3, [pc, #188]	; (800c570 <_strtod_l+0x5d0>)
 800c4b4:	0032      	movs	r2, r6
 800c4b6:	195d      	adds	r5, r3, r5
 800c4b8:	6828      	ldr	r0, [r5, #0]
 800c4ba:	6869      	ldr	r1, [r5, #4]
 800c4bc:	003b      	movs	r3, r7
 800c4be:	f7fa fb87 	bl	8006bd0 <__aeabi_dmul>
 800c4c2:	4b25      	ldr	r3, [pc, #148]	; (800c558 <_strtod_l+0x5b8>)
 800c4c4:	4a2b      	ldr	r2, [pc, #172]	; (800c574 <_strtod_l+0x5d4>)
 800c4c6:	0006      	movs	r6, r0
 800c4c8:	400b      	ands	r3, r1
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d89a      	bhi.n	800c404 <_strtod_l+0x464>
 800c4ce:	4a2a      	ldr	r2, [pc, #168]	; (800c578 <_strtod_l+0x5d8>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d913      	bls.n	800c4fc <_strtod_l+0x55c>
 800c4d4:	2601      	movs	r6, #1
 800c4d6:	4f29      	ldr	r7, [pc, #164]	; (800c57c <_strtod_l+0x5dc>)
 800c4d8:	4276      	negs	r6, r6
 800c4da:	2300      	movs	r3, #0
 800c4dc:	9306      	str	r3, [sp, #24]
 800c4de:	e07b      	b.n	800c5d8 <_strtod_l+0x638>
 800c4e0:	2201      	movs	r2, #1
 800c4e2:	4214      	tst	r4, r2
 800c4e4:	d007      	beq.n	800c4f6 <_strtod_l+0x556>
 800c4e6:	4a22      	ldr	r2, [pc, #136]	; (800c570 <_strtod_l+0x5d0>)
 800c4e8:	00eb      	lsls	r3, r5, #3
 800c4ea:	189b      	adds	r3, r3, r2
 800c4ec:	681a      	ldr	r2, [r3, #0]
 800c4ee:	685b      	ldr	r3, [r3, #4]
 800c4f0:	f7fa fb6e 	bl	8006bd0 <__aeabi_dmul>
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	3501      	adds	r5, #1
 800c4f8:	1064      	asrs	r4, r4, #1
 800c4fa:	e7d1      	b.n	800c4a0 <_strtod_l+0x500>
 800c4fc:	23d4      	movs	r3, #212	; 0xd4
 800c4fe:	049b      	lsls	r3, r3, #18
 800c500:	18cf      	adds	r7, r1, r3
 800c502:	e7ea      	b.n	800c4da <_strtod_l+0x53a>
 800c504:	2c00      	cmp	r4, #0
 800c506:	d0e8      	beq.n	800c4da <_strtod_l+0x53a>
 800c508:	230f      	movs	r3, #15
 800c50a:	4264      	negs	r4, r4
 800c50c:	4023      	ands	r3, r4
 800c50e:	d00a      	beq.n	800c526 <_strtod_l+0x586>
 800c510:	4a15      	ldr	r2, [pc, #84]	; (800c568 <_strtod_l+0x5c8>)
 800c512:	00db      	lsls	r3, r3, #3
 800c514:	18d3      	adds	r3, r2, r3
 800c516:	0030      	movs	r0, r6
 800c518:	681a      	ldr	r2, [r3, #0]
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	0039      	movs	r1, r7
 800c51e:	f7f9 ff4d 	bl	80063bc <__aeabi_ddiv>
 800c522:	0006      	movs	r6, r0
 800c524:	000f      	movs	r7, r1
 800c526:	1124      	asrs	r4, r4, #4
 800c528:	d0d7      	beq.n	800c4da <_strtod_l+0x53a>
 800c52a:	2c1f      	cmp	r4, #31
 800c52c:	dd28      	ble.n	800c580 <_strtod_l+0x5e0>
 800c52e:	2400      	movs	r4, #0
 800c530:	9405      	str	r4, [sp, #20]
 800c532:	940b      	str	r4, [sp, #44]	; 0x2c
 800c534:	940a      	str	r4, [sp, #40]	; 0x28
 800c536:	2322      	movs	r3, #34	; 0x22
 800c538:	9a04      	ldr	r2, [sp, #16]
 800c53a:	2600      	movs	r6, #0
 800c53c:	6013      	str	r3, [r2, #0]
 800c53e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c540:	2700      	movs	r7, #0
 800c542:	2b00      	cmp	r3, #0
 800c544:	d000      	beq.n	800c548 <_strtod_l+0x5a8>
 800c546:	e76a      	b.n	800c41e <_strtod_l+0x47e>
 800c548:	e56b      	b.n	800c022 <_strtod_l+0x82>
 800c54a:	46c0      	nop			; (mov r8, r8)
 800c54c:	00004e1f 	.word	0x00004e1f
 800c550:	0800fecd 	.word	0x0800fecd
 800c554:	0800ff5b 	.word	0x0800ff5b
 800c558:	7ff00000 	.word	0x7ff00000
 800c55c:	0800fed5 	.word	0x0800fed5
 800c560:	0800ff18 	.word	0x0800ff18
 800c564:	fff80000 	.word	0xfff80000
 800c568:	08010000 	.word	0x08010000
 800c56c:	fcb00000 	.word	0xfcb00000
 800c570:	0800ffd8 	.word	0x0800ffd8
 800c574:	7ca00000 	.word	0x7ca00000
 800c578:	7c900000 	.word	0x7c900000
 800c57c:	7fefffff 	.word	0x7fefffff
 800c580:	2310      	movs	r3, #16
 800c582:	4023      	ands	r3, r4
 800c584:	9306      	str	r3, [sp, #24]
 800c586:	d001      	beq.n	800c58c <_strtod_l+0x5ec>
 800c588:	236a      	movs	r3, #106	; 0x6a
 800c58a:	9306      	str	r3, [sp, #24]
 800c58c:	2300      	movs	r3, #0
 800c58e:	0030      	movs	r0, r6
 800c590:	0039      	movs	r1, r7
 800c592:	001d      	movs	r5, r3
 800c594:	2c00      	cmp	r4, #0
 800c596:	dd00      	ble.n	800c59a <_strtod_l+0x5fa>
 800c598:	e10e      	b.n	800c7b8 <_strtod_l+0x818>
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d001      	beq.n	800c5a2 <_strtod_l+0x602>
 800c59e:	0006      	movs	r6, r0
 800c5a0:	000f      	movs	r7, r1
 800c5a2:	9b06      	ldr	r3, [sp, #24]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d00f      	beq.n	800c5c8 <_strtod_l+0x628>
 800c5a8:	236b      	movs	r3, #107	; 0x6b
 800c5aa:	0079      	lsls	r1, r7, #1
 800c5ac:	0d49      	lsrs	r1, r1, #21
 800c5ae:	003a      	movs	r2, r7
 800c5b0:	1a5b      	subs	r3, r3, r1
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	dd08      	ble.n	800c5c8 <_strtod_l+0x628>
 800c5b6:	2b1f      	cmp	r3, #31
 800c5b8:	dc00      	bgt.n	800c5bc <_strtod_l+0x61c>
 800c5ba:	e112      	b.n	800c7e2 <_strtod_l+0x842>
 800c5bc:	2600      	movs	r6, #0
 800c5be:	2b34      	cmp	r3, #52	; 0x34
 800c5c0:	dc00      	bgt.n	800c5c4 <_strtod_l+0x624>
 800c5c2:	e107      	b.n	800c7d4 <_strtod_l+0x834>
 800c5c4:	27dc      	movs	r7, #220	; 0xdc
 800c5c6:	04bf      	lsls	r7, r7, #18
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	0030      	movs	r0, r6
 800c5ce:	0039      	movs	r1, r7
 800c5d0:	f7f8 ff40 	bl	8005454 <__aeabi_dcmpeq>
 800c5d4:	2800      	cmp	r0, #0
 800c5d6:	d1aa      	bne.n	800c52e <_strtod_l+0x58e>
 800c5d8:	9b08      	ldr	r3, [sp, #32]
 800c5da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5dc:	9300      	str	r3, [sp, #0]
 800c5de:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c5e0:	9b05      	ldr	r3, [sp, #20]
 800c5e2:	9804      	ldr	r0, [sp, #16]
 800c5e4:	f001 fed8 	bl	800e398 <__s2b>
 800c5e8:	900b      	str	r0, [sp, #44]	; 0x2c
 800c5ea:	2800      	cmp	r0, #0
 800c5ec:	d100      	bne.n	800c5f0 <_strtod_l+0x650>
 800c5ee:	e709      	b.n	800c404 <_strtod_l+0x464>
 800c5f0:	9b07      	ldr	r3, [sp, #28]
 800c5f2:	9a07      	ldr	r2, [sp, #28]
 800c5f4:	17db      	asrs	r3, r3, #31
 800c5f6:	4252      	negs	r2, r2
 800c5f8:	4013      	ands	r3, r2
 800c5fa:	9315      	str	r3, [sp, #84]	; 0x54
 800c5fc:	9b07      	ldr	r3, [sp, #28]
 800c5fe:	2400      	movs	r4, #0
 800c600:	43db      	mvns	r3, r3
 800c602:	9a07      	ldr	r2, [sp, #28]
 800c604:	17db      	asrs	r3, r3, #31
 800c606:	401a      	ands	r2, r3
 800c608:	921c      	str	r2, [sp, #112]	; 0x70
 800c60a:	9405      	str	r4, [sp, #20]
 800c60c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c60e:	9804      	ldr	r0, [sp, #16]
 800c610:	6859      	ldr	r1, [r3, #4]
 800c612:	f001 fe32 	bl	800e27a <_Balloc>
 800c616:	900a      	str	r0, [sp, #40]	; 0x28
 800c618:	2800      	cmp	r0, #0
 800c61a:	d100      	bne.n	800c61e <_strtod_l+0x67e>
 800c61c:	e6f6      	b.n	800c40c <_strtod_l+0x46c>
 800c61e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c620:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c622:	691b      	ldr	r3, [r3, #16]
 800c624:	310c      	adds	r1, #12
 800c626:	1c9a      	adds	r2, r3, #2
 800c628:	0092      	lsls	r2, r2, #2
 800c62a:	300c      	adds	r0, #12
 800c62c:	9308      	str	r3, [sp, #32]
 800c62e:	f7fe fdf4 	bl	800b21a <memcpy>
 800c632:	ab24      	add	r3, sp, #144	; 0x90
 800c634:	9301      	str	r3, [sp, #4]
 800c636:	ab23      	add	r3, sp, #140	; 0x8c
 800c638:	9300      	str	r3, [sp, #0]
 800c63a:	0032      	movs	r2, r6
 800c63c:	003b      	movs	r3, r7
 800c63e:	9804      	ldr	r0, [sp, #16]
 800c640:	960e      	str	r6, [sp, #56]	; 0x38
 800c642:	970f      	str	r7, [sp, #60]	; 0x3c
 800c644:	f002 f95c 	bl	800e900 <__d2b>
 800c648:	9022      	str	r0, [sp, #136]	; 0x88
 800c64a:	2800      	cmp	r0, #0
 800c64c:	d100      	bne.n	800c650 <_strtod_l+0x6b0>
 800c64e:	e6dd      	b.n	800c40c <_strtod_l+0x46c>
 800c650:	2101      	movs	r1, #1
 800c652:	9804      	ldr	r0, [sp, #16]
 800c654:	f001 ff27 	bl	800e4a6 <__i2b>
 800c658:	9005      	str	r0, [sp, #20]
 800c65a:	2800      	cmp	r0, #0
 800c65c:	d100      	bne.n	800c660 <_strtod_l+0x6c0>
 800c65e:	e6d5      	b.n	800c40c <_strtod_l+0x46c>
 800c660:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c662:	2b00      	cmp	r3, #0
 800c664:	da00      	bge.n	800c668 <_strtod_l+0x6c8>
 800c666:	e0c1      	b.n	800c7ec <_strtod_l+0x84c>
 800c668:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c66a:	189d      	adds	r5, r3, r2
 800c66c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c66e:	4694      	mov	ip, r2
 800c670:	9906      	ldr	r1, [sp, #24]
 800c672:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c674:	1a5b      	subs	r3, r3, r1
 800c676:	2136      	movs	r1, #54	; 0x36
 800c678:	189b      	adds	r3, r3, r2
 800c67a:	1a8a      	subs	r2, r1, r2
 800c67c:	49b2      	ldr	r1, [pc, #712]	; (800c948 <_strtod_l+0x9a8>)
 800c67e:	3b01      	subs	r3, #1
 800c680:	2001      	movs	r0, #1
 800c682:	428b      	cmp	r3, r1
 800c684:	db00      	blt.n	800c688 <_strtod_l+0x6e8>
 800c686:	e0bd      	b.n	800c804 <_strtod_l+0x864>
 800c688:	1ac9      	subs	r1, r1, r3
 800c68a:	1a52      	subs	r2, r2, r1
 800c68c:	291f      	cmp	r1, #31
 800c68e:	dd00      	ble.n	800c692 <_strtod_l+0x6f2>
 800c690:	e0b1      	b.n	800c7f6 <_strtod_l+0x856>
 800c692:	4088      	lsls	r0, r1
 800c694:	2300      	movs	r3, #0
 800c696:	9014      	str	r0, [sp, #80]	; 0x50
 800c698:	9310      	str	r3, [sp, #64]	; 0x40
 800c69a:	18ab      	adds	r3, r5, r2
 800c69c:	9308      	str	r3, [sp, #32]
 800c69e:	0013      	movs	r3, r2
 800c6a0:	9a06      	ldr	r2, [sp, #24]
 800c6a2:	4463      	add	r3, ip
 800c6a4:	18d3      	adds	r3, r2, r3
 800c6a6:	9a08      	ldr	r2, [sp, #32]
 800c6a8:	930c      	str	r3, [sp, #48]	; 0x30
 800c6aa:	002b      	movs	r3, r5
 800c6ac:	4295      	cmp	r5, r2
 800c6ae:	dd00      	ble.n	800c6b2 <_strtod_l+0x712>
 800c6b0:	0013      	movs	r3, r2
 800c6b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	dd00      	ble.n	800c6ba <_strtod_l+0x71a>
 800c6b8:	0013      	movs	r3, r2
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	dd06      	ble.n	800c6cc <_strtod_l+0x72c>
 800c6be:	9a08      	ldr	r2, [sp, #32]
 800c6c0:	1aed      	subs	r5, r5, r3
 800c6c2:	1ad2      	subs	r2, r2, r3
 800c6c4:	9208      	str	r2, [sp, #32]
 800c6c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6c8:	1ad2      	subs	r2, r2, r3
 800c6ca:	920c      	str	r2, [sp, #48]	; 0x30
 800c6cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d017      	beq.n	800c702 <_strtod_l+0x762>
 800c6d2:	001a      	movs	r2, r3
 800c6d4:	9905      	ldr	r1, [sp, #20]
 800c6d6:	9804      	ldr	r0, [sp, #16]
 800c6d8:	f001 ff7e 	bl	800e5d8 <__pow5mult>
 800c6dc:	9005      	str	r0, [sp, #20]
 800c6de:	2800      	cmp	r0, #0
 800c6e0:	d100      	bne.n	800c6e4 <_strtod_l+0x744>
 800c6e2:	e693      	b.n	800c40c <_strtod_l+0x46c>
 800c6e4:	0001      	movs	r1, r0
 800c6e6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c6e8:	9804      	ldr	r0, [sp, #16]
 800c6ea:	f001 fee5 	bl	800e4b8 <__multiply>
 800c6ee:	9012      	str	r0, [sp, #72]	; 0x48
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	d100      	bne.n	800c6f6 <_strtod_l+0x756>
 800c6f4:	e68a      	b.n	800c40c <_strtod_l+0x46c>
 800c6f6:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c6f8:	9804      	ldr	r0, [sp, #16]
 800c6fa:	f001 fdf6 	bl	800e2ea <_Bfree>
 800c6fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c700:	9322      	str	r3, [sp, #136]	; 0x88
 800c702:	9b08      	ldr	r3, [sp, #32]
 800c704:	2b00      	cmp	r3, #0
 800c706:	dd00      	ble.n	800c70a <_strtod_l+0x76a>
 800c708:	e07f      	b.n	800c80a <_strtod_l+0x86a>
 800c70a:	9b07      	ldr	r3, [sp, #28]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	dd08      	ble.n	800c722 <_strtod_l+0x782>
 800c710:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c712:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c714:	9804      	ldr	r0, [sp, #16]
 800c716:	f001 ff5f 	bl	800e5d8 <__pow5mult>
 800c71a:	900a      	str	r0, [sp, #40]	; 0x28
 800c71c:	2800      	cmp	r0, #0
 800c71e:	d100      	bne.n	800c722 <_strtod_l+0x782>
 800c720:	e674      	b.n	800c40c <_strtod_l+0x46c>
 800c722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c724:	2b00      	cmp	r3, #0
 800c726:	dd08      	ble.n	800c73a <_strtod_l+0x79a>
 800c728:	001a      	movs	r2, r3
 800c72a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c72c:	9804      	ldr	r0, [sp, #16]
 800c72e:	f001 ffa5 	bl	800e67c <__lshift>
 800c732:	900a      	str	r0, [sp, #40]	; 0x28
 800c734:	2800      	cmp	r0, #0
 800c736:	d100      	bne.n	800c73a <_strtod_l+0x79a>
 800c738:	e668      	b.n	800c40c <_strtod_l+0x46c>
 800c73a:	2d00      	cmp	r5, #0
 800c73c:	dd08      	ble.n	800c750 <_strtod_l+0x7b0>
 800c73e:	002a      	movs	r2, r5
 800c740:	9905      	ldr	r1, [sp, #20]
 800c742:	9804      	ldr	r0, [sp, #16]
 800c744:	f001 ff9a 	bl	800e67c <__lshift>
 800c748:	9005      	str	r0, [sp, #20]
 800c74a:	2800      	cmp	r0, #0
 800c74c:	d100      	bne.n	800c750 <_strtod_l+0x7b0>
 800c74e:	e65d      	b.n	800c40c <_strtod_l+0x46c>
 800c750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c752:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c754:	9804      	ldr	r0, [sp, #16]
 800c756:	f001 fffd 	bl	800e754 <__mdiff>
 800c75a:	1e04      	subs	r4, r0, #0
 800c75c:	d100      	bne.n	800c760 <_strtod_l+0x7c0>
 800c75e:	e655      	b.n	800c40c <_strtod_l+0x46c>
 800c760:	2500      	movs	r5, #0
 800c762:	68c3      	ldr	r3, [r0, #12]
 800c764:	9905      	ldr	r1, [sp, #20]
 800c766:	60c5      	str	r5, [r0, #12]
 800c768:	9312      	str	r3, [sp, #72]	; 0x48
 800c76a:	f001 ffd9 	bl	800e720 <__mcmp>
 800c76e:	42a8      	cmp	r0, r5
 800c770:	da55      	bge.n	800c81e <_strtod_l+0x87e>
 800c772:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c774:	42ab      	cmp	r3, r5
 800c776:	d11b      	bne.n	800c7b0 <_strtod_l+0x810>
 800c778:	42ae      	cmp	r6, r5
 800c77a:	d119      	bne.n	800c7b0 <_strtod_l+0x810>
 800c77c:	033b      	lsls	r3, r7, #12
 800c77e:	42ab      	cmp	r3, r5
 800c780:	d116      	bne.n	800c7b0 <_strtod_l+0x810>
 800c782:	22d6      	movs	r2, #214	; 0xd6
 800c784:	4b71      	ldr	r3, [pc, #452]	; (800c94c <_strtod_l+0x9ac>)
 800c786:	04d2      	lsls	r2, r2, #19
 800c788:	403b      	ands	r3, r7
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d910      	bls.n	800c7b0 <_strtod_l+0x810>
 800c78e:	6963      	ldr	r3, [r4, #20]
 800c790:	42ab      	cmp	r3, r5
 800c792:	d102      	bne.n	800c79a <_strtod_l+0x7fa>
 800c794:	6923      	ldr	r3, [r4, #16]
 800c796:	2b01      	cmp	r3, #1
 800c798:	dd0a      	ble.n	800c7b0 <_strtod_l+0x810>
 800c79a:	0021      	movs	r1, r4
 800c79c:	2201      	movs	r2, #1
 800c79e:	9804      	ldr	r0, [sp, #16]
 800c7a0:	f001 ff6c 	bl	800e67c <__lshift>
 800c7a4:	9905      	ldr	r1, [sp, #20]
 800c7a6:	0004      	movs	r4, r0
 800c7a8:	f001 ffba 	bl	800e720 <__mcmp>
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	dc6b      	bgt.n	800c888 <_strtod_l+0x8e8>
 800c7b0:	9b06      	ldr	r3, [sp, #24]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d178      	bne.n	800c8a8 <_strtod_l+0x908>
 800c7b6:	e632      	b.n	800c41e <_strtod_l+0x47e>
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	4214      	tst	r4, r2
 800c7bc:	d007      	beq.n	800c7ce <_strtod_l+0x82e>
 800c7be:	4a64      	ldr	r2, [pc, #400]	; (800c950 <_strtod_l+0x9b0>)
 800c7c0:	00eb      	lsls	r3, r5, #3
 800c7c2:	18d3      	adds	r3, r2, r3
 800c7c4:	681a      	ldr	r2, [r3, #0]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	f7fa fa02 	bl	8006bd0 <__aeabi_dmul>
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	3501      	adds	r5, #1
 800c7d0:	1064      	asrs	r4, r4, #1
 800c7d2:	e6df      	b.n	800c594 <_strtod_l+0x5f4>
 800c7d4:	2101      	movs	r1, #1
 800c7d6:	3b20      	subs	r3, #32
 800c7d8:	4249      	negs	r1, r1
 800c7da:	4099      	lsls	r1, r3
 800c7dc:	400a      	ands	r2, r1
 800c7de:	0017      	movs	r7, r2
 800c7e0:	e6f2      	b.n	800c5c8 <_strtod_l+0x628>
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	4252      	negs	r2, r2
 800c7e6:	409a      	lsls	r2, r3
 800c7e8:	4016      	ands	r6, r2
 800c7ea:	e6ed      	b.n	800c5c8 <_strtod_l+0x628>
 800c7ec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c7ee:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c7f0:	1ad2      	subs	r2, r2, r3
 800c7f2:	4694      	mov	ip, r2
 800c7f4:	e73c      	b.n	800c670 <_strtod_l+0x6d0>
 800c7f6:	4957      	ldr	r1, [pc, #348]	; (800c954 <_strtod_l+0x9b4>)
 800c7f8:	1acb      	subs	r3, r1, r3
 800c7fa:	0001      	movs	r1, r0
 800c7fc:	4099      	lsls	r1, r3
 800c7fe:	9110      	str	r1, [sp, #64]	; 0x40
 800c800:	9014      	str	r0, [sp, #80]	; 0x50
 800c802:	e74a      	b.n	800c69a <_strtod_l+0x6fa>
 800c804:	2300      	movs	r3, #0
 800c806:	9310      	str	r3, [sp, #64]	; 0x40
 800c808:	e7fa      	b.n	800c800 <_strtod_l+0x860>
 800c80a:	9a08      	ldr	r2, [sp, #32]
 800c80c:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c80e:	9804      	ldr	r0, [sp, #16]
 800c810:	f001 ff34 	bl	800e67c <__lshift>
 800c814:	9022      	str	r0, [sp, #136]	; 0x88
 800c816:	2800      	cmp	r0, #0
 800c818:	d000      	beq.n	800c81c <_strtod_l+0x87c>
 800c81a:	e776      	b.n	800c70a <_strtod_l+0x76a>
 800c81c:	e5f6      	b.n	800c40c <_strtod_l+0x46c>
 800c81e:	970c      	str	r7, [sp, #48]	; 0x30
 800c820:	2800      	cmp	r0, #0
 800c822:	d000      	beq.n	800c826 <_strtod_l+0x886>
 800c824:	e0a0      	b.n	800c968 <_strtod_l+0x9c8>
 800c826:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c828:	033b      	lsls	r3, r7, #12
 800c82a:	0b1b      	lsrs	r3, r3, #12
 800c82c:	2a00      	cmp	r2, #0
 800c82e:	d027      	beq.n	800c880 <_strtod_l+0x8e0>
 800c830:	4a49      	ldr	r2, [pc, #292]	; (800c958 <_strtod_l+0x9b8>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d157      	bne.n	800c8e6 <_strtod_l+0x946>
 800c836:	2201      	movs	r2, #1
 800c838:	9b06      	ldr	r3, [sp, #24]
 800c83a:	4252      	negs	r2, r2
 800c83c:	0031      	movs	r1, r6
 800c83e:	0010      	movs	r0, r2
 800c840:	2b00      	cmp	r3, #0
 800c842:	d00b      	beq.n	800c85c <_strtod_l+0x8bc>
 800c844:	25d4      	movs	r5, #212	; 0xd4
 800c846:	4b41      	ldr	r3, [pc, #260]	; (800c94c <_strtod_l+0x9ac>)
 800c848:	04ed      	lsls	r5, r5, #19
 800c84a:	403b      	ands	r3, r7
 800c84c:	0010      	movs	r0, r2
 800c84e:	42ab      	cmp	r3, r5
 800c850:	d804      	bhi.n	800c85c <_strtod_l+0x8bc>
 800c852:	306c      	adds	r0, #108	; 0x6c
 800c854:	0d1b      	lsrs	r3, r3, #20
 800c856:	1ac3      	subs	r3, r0, r3
 800c858:	409a      	lsls	r2, r3
 800c85a:	0010      	movs	r0, r2
 800c85c:	4281      	cmp	r1, r0
 800c85e:	d142      	bne.n	800c8e6 <_strtod_l+0x946>
 800c860:	4b3e      	ldr	r3, [pc, #248]	; (800c95c <_strtod_l+0x9bc>)
 800c862:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c864:	429a      	cmp	r2, r3
 800c866:	d102      	bne.n	800c86e <_strtod_l+0x8ce>
 800c868:	1c4b      	adds	r3, r1, #1
 800c86a:	d100      	bne.n	800c86e <_strtod_l+0x8ce>
 800c86c:	e5ce      	b.n	800c40c <_strtod_l+0x46c>
 800c86e:	4b37      	ldr	r3, [pc, #220]	; (800c94c <_strtod_l+0x9ac>)
 800c870:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c872:	2600      	movs	r6, #0
 800c874:	401a      	ands	r2, r3
 800c876:	0013      	movs	r3, r2
 800c878:	2280      	movs	r2, #128	; 0x80
 800c87a:	0352      	lsls	r2, r2, #13
 800c87c:	189f      	adds	r7, r3, r2
 800c87e:	e797      	b.n	800c7b0 <_strtod_l+0x810>
 800c880:	2b00      	cmp	r3, #0
 800c882:	d130      	bne.n	800c8e6 <_strtod_l+0x946>
 800c884:	2e00      	cmp	r6, #0
 800c886:	d12e      	bne.n	800c8e6 <_strtod_l+0x946>
 800c888:	9906      	ldr	r1, [sp, #24]
 800c88a:	003b      	movs	r3, r7
 800c88c:	4a2f      	ldr	r2, [pc, #188]	; (800c94c <_strtod_l+0x9ac>)
 800c88e:	2900      	cmp	r1, #0
 800c890:	d020      	beq.n	800c8d4 <_strtod_l+0x934>
 800c892:	0011      	movs	r1, r2
 800c894:	20d6      	movs	r0, #214	; 0xd6
 800c896:	4039      	ands	r1, r7
 800c898:	04c0      	lsls	r0, r0, #19
 800c89a:	4281      	cmp	r1, r0
 800c89c:	dc1a      	bgt.n	800c8d4 <_strtod_l+0x934>
 800c89e:	23dc      	movs	r3, #220	; 0xdc
 800c8a0:	049b      	lsls	r3, r3, #18
 800c8a2:	4299      	cmp	r1, r3
 800c8a4:	dc00      	bgt.n	800c8a8 <_strtod_l+0x908>
 800c8a6:	e646      	b.n	800c536 <_strtod_l+0x596>
 800c8a8:	4b2d      	ldr	r3, [pc, #180]	; (800c960 <_strtod_l+0x9c0>)
 800c8aa:	0030      	movs	r0, r6
 800c8ac:	931b      	str	r3, [sp, #108]	; 0x6c
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	931a      	str	r3, [sp, #104]	; 0x68
 800c8b2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c8b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c8b6:	0039      	movs	r1, r7
 800c8b8:	f7fa f98a 	bl	8006bd0 <__aeabi_dmul>
 800c8bc:	0006      	movs	r6, r0
 800c8be:	000f      	movs	r7, r1
 800c8c0:	1e0b      	subs	r3, r1, #0
 800c8c2:	d000      	beq.n	800c8c6 <_strtod_l+0x926>
 800c8c4:	e5ab      	b.n	800c41e <_strtod_l+0x47e>
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	d000      	beq.n	800c8cc <_strtod_l+0x92c>
 800c8ca:	e5a8      	b.n	800c41e <_strtod_l+0x47e>
 800c8cc:	9a04      	ldr	r2, [sp, #16]
 800c8ce:	3322      	adds	r3, #34	; 0x22
 800c8d0:	6013      	str	r3, [r2, #0]
 800c8d2:	e5a4      	b.n	800c41e <_strtod_l+0x47e>
 800c8d4:	2601      	movs	r6, #1
 800c8d6:	4013      	ands	r3, r2
 800c8d8:	4a22      	ldr	r2, [pc, #136]	; (800c964 <_strtod_l+0x9c4>)
 800c8da:	4276      	negs	r6, r6
 800c8dc:	189b      	adds	r3, r3, r2
 800c8de:	4a1e      	ldr	r2, [pc, #120]	; (800c958 <_strtod_l+0x9b8>)
 800c8e0:	431a      	orrs	r2, r3
 800c8e2:	0017      	movs	r7, r2
 800c8e4:	e764      	b.n	800c7b0 <_strtod_l+0x810>
 800c8e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d015      	beq.n	800c918 <_strtod_l+0x978>
 800c8ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c8f0:	4213      	tst	r3, r2
 800c8f2:	d100      	bne.n	800c8f6 <_strtod_l+0x956>
 800c8f4:	e75c      	b.n	800c7b0 <_strtod_l+0x810>
 800c8f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c8f8:	9a06      	ldr	r2, [sp, #24]
 800c8fa:	0030      	movs	r0, r6
 800c8fc:	0039      	movs	r1, r7
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d00f      	beq.n	800c922 <_strtod_l+0x982>
 800c902:	f7ff fb35 	bl	800bf70 <sulp>
 800c906:	0002      	movs	r2, r0
 800c908:	000b      	movs	r3, r1
 800c90a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c90c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c90e:	f7f9 fa39 	bl	8005d84 <__aeabi_dadd>
 800c912:	0006      	movs	r6, r0
 800c914:	000f      	movs	r7, r1
 800c916:	e74b      	b.n	800c7b0 <_strtod_l+0x810>
 800c918:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c91a:	4233      	tst	r3, r6
 800c91c:	d100      	bne.n	800c920 <_strtod_l+0x980>
 800c91e:	e747      	b.n	800c7b0 <_strtod_l+0x810>
 800c920:	e7e9      	b.n	800c8f6 <_strtod_l+0x956>
 800c922:	f7ff fb25 	bl	800bf70 <sulp>
 800c926:	0002      	movs	r2, r0
 800c928:	000b      	movs	r3, r1
 800c92a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c92c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c92e:	f7fa fbc1 	bl	80070b4 <__aeabi_dsub>
 800c932:	2200      	movs	r2, #0
 800c934:	2300      	movs	r3, #0
 800c936:	0006      	movs	r6, r0
 800c938:	000f      	movs	r7, r1
 800c93a:	f7f8 fd8b 	bl	8005454 <__aeabi_dcmpeq>
 800c93e:	2800      	cmp	r0, #0
 800c940:	d000      	beq.n	800c944 <_strtod_l+0x9a4>
 800c942:	e5f8      	b.n	800c536 <_strtod_l+0x596>
 800c944:	e734      	b.n	800c7b0 <_strtod_l+0x810>
 800c946:	46c0      	nop			; (mov r8, r8)
 800c948:	fffffc02 	.word	0xfffffc02
 800c94c:	7ff00000 	.word	0x7ff00000
 800c950:	0800ff30 	.word	0x0800ff30
 800c954:	fffffbe2 	.word	0xfffffbe2
 800c958:	000fffff 	.word	0x000fffff
 800c95c:	7fefffff 	.word	0x7fefffff
 800c960:	39500000 	.word	0x39500000
 800c964:	fff00000 	.word	0xfff00000
 800c968:	9905      	ldr	r1, [sp, #20]
 800c96a:	0020      	movs	r0, r4
 800c96c:	f002 f81c 	bl	800e9a8 <__ratio>
 800c970:	2380      	movs	r3, #128	; 0x80
 800c972:	2200      	movs	r2, #0
 800c974:	05db      	lsls	r3, r3, #23
 800c976:	9008      	str	r0, [sp, #32]
 800c978:	9109      	str	r1, [sp, #36]	; 0x24
 800c97a:	f7f8 fd7b 	bl	8005474 <__aeabi_dcmple>
 800c97e:	2800      	cmp	r0, #0
 800c980:	d100      	bne.n	800c984 <_strtod_l+0x9e4>
 800c982:	e07f      	b.n	800ca84 <_strtod_l+0xae4>
 800c984:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c986:	2b00      	cmp	r3, #0
 800c988:	d04b      	beq.n	800ca22 <_strtod_l+0xa82>
 800c98a:	2200      	movs	r2, #0
 800c98c:	4b8a      	ldr	r3, [pc, #552]	; (800cbb8 <_strtod_l+0xc18>)
 800c98e:	9210      	str	r2, [sp, #64]	; 0x40
 800c990:	9311      	str	r3, [sp, #68]	; 0x44
 800c992:	4b89      	ldr	r3, [pc, #548]	; (800cbb8 <_strtod_l+0xc18>)
 800c994:	9308      	str	r3, [sp, #32]
 800c996:	4a89      	ldr	r2, [pc, #548]	; (800cbbc <_strtod_l+0xc1c>)
 800c998:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c99a:	4013      	ands	r3, r2
 800c99c:	9314      	str	r3, [sp, #80]	; 0x50
 800c99e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c9a0:	4b87      	ldr	r3, [pc, #540]	; (800cbc0 <_strtod_l+0xc20>)
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d000      	beq.n	800c9a8 <_strtod_l+0xa08>
 800c9a6:	e0ba      	b.n	800cb1e <_strtod_l+0xb7e>
 800c9a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c9ac:	921a      	str	r2, [sp, #104]	; 0x68
 800c9ae:	931b      	str	r3, [sp, #108]	; 0x6c
 800c9b0:	4a84      	ldr	r2, [pc, #528]	; (800cbc4 <_strtod_l+0xc24>)
 800c9b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9b4:	4694      	mov	ip, r2
 800c9b6:	4463      	add	r3, ip
 800c9b8:	001f      	movs	r7, r3
 800c9ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c9bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c9be:	0030      	movs	r0, r6
 800c9c0:	0039      	movs	r1, r7
 800c9c2:	920c      	str	r2, [sp, #48]	; 0x30
 800c9c4:	930d      	str	r3, [sp, #52]	; 0x34
 800c9c6:	f001 ff29 	bl	800e81c <__ulp>
 800c9ca:	0002      	movs	r2, r0
 800c9cc:	000b      	movs	r3, r1
 800c9ce:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c9d0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c9d2:	f7fa f8fd 	bl	8006bd0 <__aeabi_dmul>
 800c9d6:	0032      	movs	r2, r6
 800c9d8:	003b      	movs	r3, r7
 800c9da:	f7f9 f9d3 	bl	8005d84 <__aeabi_dadd>
 800c9de:	4a77      	ldr	r2, [pc, #476]	; (800cbbc <_strtod_l+0xc1c>)
 800c9e0:	4b79      	ldr	r3, [pc, #484]	; (800cbc8 <_strtod_l+0xc28>)
 800c9e2:	0006      	movs	r6, r0
 800c9e4:	400a      	ands	r2, r1
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	d964      	bls.n	800cab4 <_strtod_l+0xb14>
 800c9ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c9ec:	4a77      	ldr	r2, [pc, #476]	; (800cbcc <_strtod_l+0xc2c>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d103      	bne.n	800c9fa <_strtod_l+0xa5a>
 800c9f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	d100      	bne.n	800c9fa <_strtod_l+0xa5a>
 800c9f8:	e508      	b.n	800c40c <_strtod_l+0x46c>
 800c9fa:	2601      	movs	r6, #1
 800c9fc:	4f73      	ldr	r7, [pc, #460]	; (800cbcc <_strtod_l+0xc2c>)
 800c9fe:	4276      	negs	r6, r6
 800ca00:	9922      	ldr	r1, [sp, #136]	; 0x88
 800ca02:	9804      	ldr	r0, [sp, #16]
 800ca04:	f001 fc71 	bl	800e2ea <_Bfree>
 800ca08:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ca0a:	9804      	ldr	r0, [sp, #16]
 800ca0c:	f001 fc6d 	bl	800e2ea <_Bfree>
 800ca10:	9905      	ldr	r1, [sp, #20]
 800ca12:	9804      	ldr	r0, [sp, #16]
 800ca14:	f001 fc69 	bl	800e2ea <_Bfree>
 800ca18:	0021      	movs	r1, r4
 800ca1a:	9804      	ldr	r0, [sp, #16]
 800ca1c:	f001 fc65 	bl	800e2ea <_Bfree>
 800ca20:	e5f4      	b.n	800c60c <_strtod_l+0x66c>
 800ca22:	2e00      	cmp	r6, #0
 800ca24:	d11e      	bne.n	800ca64 <_strtod_l+0xac4>
 800ca26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca28:	031b      	lsls	r3, r3, #12
 800ca2a:	d121      	bne.n	800ca70 <_strtod_l+0xad0>
 800ca2c:	9808      	ldr	r0, [sp, #32]
 800ca2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca30:	2200      	movs	r2, #0
 800ca32:	4b61      	ldr	r3, [pc, #388]	; (800cbb8 <_strtod_l+0xc18>)
 800ca34:	f7f8 fd14 	bl	8005460 <__aeabi_dcmplt>
 800ca38:	2800      	cmp	r0, #0
 800ca3a:	d11f      	bne.n	800ca7c <_strtod_l+0xadc>
 800ca3c:	9808      	ldr	r0, [sp, #32]
 800ca3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca40:	2200      	movs	r2, #0
 800ca42:	4b63      	ldr	r3, [pc, #396]	; (800cbd0 <_strtod_l+0xc30>)
 800ca44:	f7fa f8c4 	bl	8006bd0 <__aeabi_dmul>
 800ca48:	0005      	movs	r5, r0
 800ca4a:	9108      	str	r1, [sp, #32]
 800ca4c:	2280      	movs	r2, #128	; 0x80
 800ca4e:	0612      	lsls	r2, r2, #24
 800ca50:	4694      	mov	ip, r2
 800ca52:	9b08      	ldr	r3, [sp, #32]
 800ca54:	951e      	str	r5, [sp, #120]	; 0x78
 800ca56:	4463      	add	r3, ip
 800ca58:	931f      	str	r3, [sp, #124]	; 0x7c
 800ca5a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ca5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ca5e:	9210      	str	r2, [sp, #64]	; 0x40
 800ca60:	9311      	str	r3, [sp, #68]	; 0x44
 800ca62:	e798      	b.n	800c996 <_strtod_l+0x9f6>
 800ca64:	2e01      	cmp	r6, #1
 800ca66:	d103      	bne.n	800ca70 <_strtod_l+0xad0>
 800ca68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d100      	bne.n	800ca70 <_strtod_l+0xad0>
 800ca6e:	e562      	b.n	800c536 <_strtod_l+0x596>
 800ca70:	2200      	movs	r2, #0
 800ca72:	4b58      	ldr	r3, [pc, #352]	; (800cbd4 <_strtod_l+0xc34>)
 800ca74:	2500      	movs	r5, #0
 800ca76:	9210      	str	r2, [sp, #64]	; 0x40
 800ca78:	9311      	str	r3, [sp, #68]	; 0x44
 800ca7a:	e78a      	b.n	800c992 <_strtod_l+0x9f2>
 800ca7c:	4b54      	ldr	r3, [pc, #336]	; (800cbd0 <_strtod_l+0xc30>)
 800ca7e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800ca80:	9308      	str	r3, [sp, #32]
 800ca82:	e7e3      	b.n	800ca4c <_strtod_l+0xaac>
 800ca84:	4b52      	ldr	r3, [pc, #328]	; (800cbd0 <_strtod_l+0xc30>)
 800ca86:	9808      	ldr	r0, [sp, #32]
 800ca88:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	f7fa f8a0 	bl	8006bd0 <__aeabi_dmul>
 800ca90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ca92:	0005      	movs	r5, r0
 800ca94:	9108      	str	r1, [sp, #32]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d107      	bne.n	800caaa <_strtod_l+0xb0a>
 800ca9a:	2380      	movs	r3, #128	; 0x80
 800ca9c:	061b      	lsls	r3, r3, #24
 800ca9e:	18cb      	adds	r3, r1, r3
 800caa0:	9016      	str	r0, [sp, #88]	; 0x58
 800caa2:	9317      	str	r3, [sp, #92]	; 0x5c
 800caa4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800caa6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800caa8:	e7d9      	b.n	800ca5e <_strtod_l+0xabe>
 800caaa:	0002      	movs	r2, r0
 800caac:	9b08      	ldr	r3, [sp, #32]
 800caae:	9216      	str	r2, [sp, #88]	; 0x58
 800cab0:	9317      	str	r3, [sp, #92]	; 0x5c
 800cab2:	e7f7      	b.n	800caa4 <_strtod_l+0xb04>
 800cab4:	23d4      	movs	r3, #212	; 0xd4
 800cab6:	049b      	lsls	r3, r3, #18
 800cab8:	18cf      	adds	r7, r1, r3
 800caba:	9b06      	ldr	r3, [sp, #24]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d19f      	bne.n	800ca00 <_strtod_l+0xa60>
 800cac0:	4b3e      	ldr	r3, [pc, #248]	; (800cbbc <_strtod_l+0xc1c>)
 800cac2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cac4:	970c      	str	r7, [sp, #48]	; 0x30
 800cac6:	403b      	ands	r3, r7
 800cac8:	429a      	cmp	r2, r3
 800caca:	d199      	bne.n	800ca00 <_strtod_l+0xa60>
 800cacc:	9908      	ldr	r1, [sp, #32]
 800cace:	0028      	movs	r0, r5
 800cad0:	f7fa fe54 	bl	800777c <__aeabi_d2iz>
 800cad4:	f7fa fe88 	bl	80077e8 <__aeabi_i2d>
 800cad8:	000b      	movs	r3, r1
 800cada:	0002      	movs	r2, r0
 800cadc:	9908      	ldr	r1, [sp, #32]
 800cade:	0028      	movs	r0, r5
 800cae0:	f7fa fae8 	bl	80070b4 <__aeabi_dsub>
 800cae4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cae6:	9008      	str	r0, [sp, #32]
 800cae8:	9109      	str	r1, [sp, #36]	; 0x24
 800caea:	2b00      	cmp	r3, #0
 800caec:	d104      	bne.n	800caf8 <_strtod_l+0xb58>
 800caee:	2e00      	cmp	r6, #0
 800caf0:	d102      	bne.n	800caf8 <_strtod_l+0xb58>
 800caf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800caf4:	031b      	lsls	r3, r3, #12
 800caf6:	d058      	beq.n	800cbaa <_strtod_l+0xc0a>
 800caf8:	9808      	ldr	r0, [sp, #32]
 800cafa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cafc:	4a36      	ldr	r2, [pc, #216]	; (800cbd8 <_strtod_l+0xc38>)
 800cafe:	4b37      	ldr	r3, [pc, #220]	; (800cbdc <_strtod_l+0xc3c>)
 800cb00:	f7f8 fcae 	bl	8005460 <__aeabi_dcmplt>
 800cb04:	2800      	cmp	r0, #0
 800cb06:	d000      	beq.n	800cb0a <_strtod_l+0xb6a>
 800cb08:	e489      	b.n	800c41e <_strtod_l+0x47e>
 800cb0a:	9808      	ldr	r0, [sp, #32]
 800cb0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb0e:	4a34      	ldr	r2, [pc, #208]	; (800cbe0 <_strtod_l+0xc40>)
 800cb10:	4b2f      	ldr	r3, [pc, #188]	; (800cbd0 <_strtod_l+0xc30>)
 800cb12:	f7f8 fcb9 	bl	8005488 <__aeabi_dcmpgt>
 800cb16:	2800      	cmp	r0, #0
 800cb18:	d100      	bne.n	800cb1c <_strtod_l+0xb7c>
 800cb1a:	e771      	b.n	800ca00 <_strtod_l+0xa60>
 800cb1c:	e47f      	b.n	800c41e <_strtod_l+0x47e>
 800cb1e:	9b06      	ldr	r3, [sp, #24]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d02a      	beq.n	800cb7a <_strtod_l+0xbda>
 800cb24:	23d4      	movs	r3, #212	; 0xd4
 800cb26:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cb28:	04db      	lsls	r3, r3, #19
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d825      	bhi.n	800cb7a <_strtod_l+0xbda>
 800cb2e:	4a2d      	ldr	r2, [pc, #180]	; (800cbe4 <_strtod_l+0xc44>)
 800cb30:	4b2d      	ldr	r3, [pc, #180]	; (800cbe8 <_strtod_l+0xc48>)
 800cb32:	0028      	movs	r0, r5
 800cb34:	9908      	ldr	r1, [sp, #32]
 800cb36:	f7f8 fc9d 	bl	8005474 <__aeabi_dcmple>
 800cb3a:	2800      	cmp	r0, #0
 800cb3c:	d016      	beq.n	800cb6c <_strtod_l+0xbcc>
 800cb3e:	0028      	movs	r0, r5
 800cb40:	9908      	ldr	r1, [sp, #32]
 800cb42:	f7f8 fcff 	bl	8005544 <__aeabi_d2uiz>
 800cb46:	2800      	cmp	r0, #0
 800cb48:	d100      	bne.n	800cb4c <_strtod_l+0xbac>
 800cb4a:	3001      	adds	r0, #1
 800cb4c:	f7fa fe86 	bl	800785c <__aeabi_ui2d>
 800cb50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cb52:	0005      	movs	r5, r0
 800cb54:	9108      	str	r1, [sp, #32]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d122      	bne.n	800cba0 <_strtod_l+0xc00>
 800cb5a:	2380      	movs	r3, #128	; 0x80
 800cb5c:	061b      	lsls	r3, r3, #24
 800cb5e:	18cb      	adds	r3, r1, r3
 800cb60:	9018      	str	r0, [sp, #96]	; 0x60
 800cb62:	9319      	str	r3, [sp, #100]	; 0x64
 800cb64:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cb66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cb68:	9210      	str	r2, [sp, #64]	; 0x40
 800cb6a:	9311      	str	r3, [sp, #68]	; 0x44
 800cb6c:	22d6      	movs	r2, #214	; 0xd6
 800cb6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cb70:	04d2      	lsls	r2, r2, #19
 800cb72:	189b      	adds	r3, r3, r2
 800cb74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cb76:	1a9b      	subs	r3, r3, r2
 800cb78:	9311      	str	r3, [sp, #68]	; 0x44
 800cb7a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800cb7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cb7e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800cb80:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800cb82:	f001 fe4b 	bl	800e81c <__ulp>
 800cb86:	0002      	movs	r2, r0
 800cb88:	000b      	movs	r3, r1
 800cb8a:	0030      	movs	r0, r6
 800cb8c:	0039      	movs	r1, r7
 800cb8e:	f7fa f81f 	bl	8006bd0 <__aeabi_dmul>
 800cb92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb96:	f7f9 f8f5 	bl	8005d84 <__aeabi_dadd>
 800cb9a:	0006      	movs	r6, r0
 800cb9c:	000f      	movs	r7, r1
 800cb9e:	e78c      	b.n	800caba <_strtod_l+0xb1a>
 800cba0:	0002      	movs	r2, r0
 800cba2:	9b08      	ldr	r3, [sp, #32]
 800cba4:	9218      	str	r2, [sp, #96]	; 0x60
 800cba6:	9319      	str	r3, [sp, #100]	; 0x64
 800cba8:	e7dc      	b.n	800cb64 <_strtod_l+0xbc4>
 800cbaa:	4a0b      	ldr	r2, [pc, #44]	; (800cbd8 <_strtod_l+0xc38>)
 800cbac:	4b0f      	ldr	r3, [pc, #60]	; (800cbec <_strtod_l+0xc4c>)
 800cbae:	9808      	ldr	r0, [sp, #32]
 800cbb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cbb2:	f7f8 fc55 	bl	8005460 <__aeabi_dcmplt>
 800cbb6:	e7ae      	b.n	800cb16 <_strtod_l+0xb76>
 800cbb8:	3ff00000 	.word	0x3ff00000
 800cbbc:	7ff00000 	.word	0x7ff00000
 800cbc0:	7fe00000 	.word	0x7fe00000
 800cbc4:	fcb00000 	.word	0xfcb00000
 800cbc8:	7c9fffff 	.word	0x7c9fffff
 800cbcc:	7fefffff 	.word	0x7fefffff
 800cbd0:	3fe00000 	.word	0x3fe00000
 800cbd4:	bff00000 	.word	0xbff00000
 800cbd8:	94a03595 	.word	0x94a03595
 800cbdc:	3fdfffff 	.word	0x3fdfffff
 800cbe0:	35afe535 	.word	0x35afe535
 800cbe4:	ffc00000 	.word	0xffc00000
 800cbe8:	41dfffff 	.word	0x41dfffff
 800cbec:	3fcfffff 	.word	0x3fcfffff

0800cbf0 <_strtod_r>:
 800cbf0:	4b04      	ldr	r3, [pc, #16]	; (800cc04 <_strtod_r+0x14>)
 800cbf2:	b510      	push	{r4, lr}
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	6a1b      	ldr	r3, [r3, #32]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d100      	bne.n	800cbfe <_strtod_r+0xe>
 800cbfc:	4b02      	ldr	r3, [pc, #8]	; (800cc08 <_strtod_r+0x18>)
 800cbfe:	f7ff f9cf 	bl	800bfa0 <_strtod_l>
 800cc02:	bd10      	pop	{r4, pc}
 800cc04:	20000124 	.word	0x20000124
 800cc08:	20000188 	.word	0x20000188

0800cc0c <_strtol_l.isra.0>:
 800cc0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc0e:	001f      	movs	r7, r3
 800cc10:	000e      	movs	r6, r1
 800cc12:	b087      	sub	sp, #28
 800cc14:	9005      	str	r0, [sp, #20]
 800cc16:	9101      	str	r1, [sp, #4]
 800cc18:	9202      	str	r2, [sp, #8]
 800cc1a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cc1c:	7834      	ldrb	r4, [r6, #0]
 800cc1e:	f001 faf3 	bl	800e208 <__locale_ctype_ptr_l>
 800cc22:	2208      	movs	r2, #8
 800cc24:	1900      	adds	r0, r0, r4
 800cc26:	7843      	ldrb	r3, [r0, #1]
 800cc28:	1c75      	adds	r5, r6, #1
 800cc2a:	4013      	ands	r3, r2
 800cc2c:	d136      	bne.n	800cc9c <_strtol_l.isra.0+0x90>
 800cc2e:	2c2d      	cmp	r4, #45	; 0x2d
 800cc30:	d136      	bne.n	800cca0 <_strtol_l.isra.0+0x94>
 800cc32:	1cb5      	adds	r5, r6, #2
 800cc34:	7874      	ldrb	r4, [r6, #1]
 800cc36:	2601      	movs	r6, #1
 800cc38:	2f00      	cmp	r7, #0
 800cc3a:	d062      	beq.n	800cd02 <_strtol_l.isra.0+0xf6>
 800cc3c:	2f10      	cmp	r7, #16
 800cc3e:	d109      	bne.n	800cc54 <_strtol_l.isra.0+0x48>
 800cc40:	2c30      	cmp	r4, #48	; 0x30
 800cc42:	d107      	bne.n	800cc54 <_strtol_l.isra.0+0x48>
 800cc44:	2220      	movs	r2, #32
 800cc46:	782b      	ldrb	r3, [r5, #0]
 800cc48:	4393      	bics	r3, r2
 800cc4a:	2b58      	cmp	r3, #88	; 0x58
 800cc4c:	d154      	bne.n	800ccf8 <_strtol_l.isra.0+0xec>
 800cc4e:	2710      	movs	r7, #16
 800cc50:	786c      	ldrb	r4, [r5, #1]
 800cc52:	3502      	adds	r5, #2
 800cc54:	4b2d      	ldr	r3, [pc, #180]	; (800cd0c <_strtol_l.isra.0+0x100>)
 800cc56:	0039      	movs	r1, r7
 800cc58:	18f3      	adds	r3, r6, r3
 800cc5a:	0018      	movs	r0, r3
 800cc5c:	9303      	str	r3, [sp, #12]
 800cc5e:	f7f8 faf9 	bl	8005254 <__aeabi_uidivmod>
 800cc62:	9104      	str	r1, [sp, #16]
 800cc64:	2101      	movs	r1, #1
 800cc66:	2300      	movs	r3, #0
 800cc68:	4249      	negs	r1, r1
 800cc6a:	0002      	movs	r2, r0
 800cc6c:	468c      	mov	ip, r1
 800cc6e:	0018      	movs	r0, r3
 800cc70:	0021      	movs	r1, r4
 800cc72:	3930      	subs	r1, #48	; 0x30
 800cc74:	2909      	cmp	r1, #9
 800cc76:	d81a      	bhi.n	800ccae <_strtol_l.isra.0+0xa2>
 800cc78:	000c      	movs	r4, r1
 800cc7a:	42a7      	cmp	r7, r4
 800cc7c:	dd23      	ble.n	800ccc6 <_strtol_l.isra.0+0xba>
 800cc7e:	1c59      	adds	r1, r3, #1
 800cc80:	d009      	beq.n	800cc96 <_strtol_l.isra.0+0x8a>
 800cc82:	4663      	mov	r3, ip
 800cc84:	4282      	cmp	r2, r0
 800cc86:	d306      	bcc.n	800cc96 <_strtol_l.isra.0+0x8a>
 800cc88:	d102      	bne.n	800cc90 <_strtol_l.isra.0+0x84>
 800cc8a:	9904      	ldr	r1, [sp, #16]
 800cc8c:	42a1      	cmp	r1, r4
 800cc8e:	db02      	blt.n	800cc96 <_strtol_l.isra.0+0x8a>
 800cc90:	2301      	movs	r3, #1
 800cc92:	4378      	muls	r0, r7
 800cc94:	1820      	adds	r0, r4, r0
 800cc96:	782c      	ldrb	r4, [r5, #0]
 800cc98:	3501      	adds	r5, #1
 800cc9a:	e7e9      	b.n	800cc70 <_strtol_l.isra.0+0x64>
 800cc9c:	002e      	movs	r6, r5
 800cc9e:	e7bc      	b.n	800cc1a <_strtol_l.isra.0+0xe>
 800cca0:	2c2b      	cmp	r4, #43	; 0x2b
 800cca2:	d001      	beq.n	800cca8 <_strtol_l.isra.0+0x9c>
 800cca4:	001e      	movs	r6, r3
 800cca6:	e7c7      	b.n	800cc38 <_strtol_l.isra.0+0x2c>
 800cca8:	1cb5      	adds	r5, r6, #2
 800ccaa:	7874      	ldrb	r4, [r6, #1]
 800ccac:	e7fa      	b.n	800cca4 <_strtol_l.isra.0+0x98>
 800ccae:	0021      	movs	r1, r4
 800ccb0:	3941      	subs	r1, #65	; 0x41
 800ccb2:	2919      	cmp	r1, #25
 800ccb4:	d801      	bhi.n	800ccba <_strtol_l.isra.0+0xae>
 800ccb6:	3c37      	subs	r4, #55	; 0x37
 800ccb8:	e7df      	b.n	800cc7a <_strtol_l.isra.0+0x6e>
 800ccba:	0021      	movs	r1, r4
 800ccbc:	3961      	subs	r1, #97	; 0x61
 800ccbe:	2919      	cmp	r1, #25
 800ccc0:	d801      	bhi.n	800ccc6 <_strtol_l.isra.0+0xba>
 800ccc2:	3c57      	subs	r4, #87	; 0x57
 800ccc4:	e7d9      	b.n	800cc7a <_strtol_l.isra.0+0x6e>
 800ccc6:	1c5a      	adds	r2, r3, #1
 800ccc8:	d108      	bne.n	800ccdc <_strtol_l.isra.0+0xd0>
 800ccca:	9a05      	ldr	r2, [sp, #20]
 800cccc:	3323      	adds	r3, #35	; 0x23
 800ccce:	6013      	str	r3, [r2, #0]
 800ccd0:	9b02      	ldr	r3, [sp, #8]
 800ccd2:	9803      	ldr	r0, [sp, #12]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d109      	bne.n	800ccec <_strtol_l.isra.0+0xe0>
 800ccd8:	b007      	add	sp, #28
 800ccda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccdc:	2e00      	cmp	r6, #0
 800ccde:	d000      	beq.n	800cce2 <_strtol_l.isra.0+0xd6>
 800cce0:	4240      	negs	r0, r0
 800cce2:	9a02      	ldr	r2, [sp, #8]
 800cce4:	2a00      	cmp	r2, #0
 800cce6:	d0f7      	beq.n	800ccd8 <_strtol_l.isra.0+0xcc>
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d001      	beq.n	800ccf0 <_strtol_l.isra.0+0xe4>
 800ccec:	1e6b      	subs	r3, r5, #1
 800ccee:	9301      	str	r3, [sp, #4]
 800ccf0:	9b02      	ldr	r3, [sp, #8]
 800ccf2:	9a01      	ldr	r2, [sp, #4]
 800ccf4:	601a      	str	r2, [r3, #0]
 800ccf6:	e7ef      	b.n	800ccd8 <_strtol_l.isra.0+0xcc>
 800ccf8:	2430      	movs	r4, #48	; 0x30
 800ccfa:	2f00      	cmp	r7, #0
 800ccfc:	d1aa      	bne.n	800cc54 <_strtol_l.isra.0+0x48>
 800ccfe:	2708      	movs	r7, #8
 800cd00:	e7a8      	b.n	800cc54 <_strtol_l.isra.0+0x48>
 800cd02:	2c30      	cmp	r4, #48	; 0x30
 800cd04:	d09e      	beq.n	800cc44 <_strtol_l.isra.0+0x38>
 800cd06:	270a      	movs	r7, #10
 800cd08:	e7a4      	b.n	800cc54 <_strtol_l.isra.0+0x48>
 800cd0a:	46c0      	nop			; (mov r8, r8)
 800cd0c:	7fffffff 	.word	0x7fffffff

0800cd10 <_strtol_r>:
 800cd10:	b513      	push	{r0, r1, r4, lr}
 800cd12:	4c05      	ldr	r4, [pc, #20]	; (800cd28 <_strtol_r+0x18>)
 800cd14:	6824      	ldr	r4, [r4, #0]
 800cd16:	6a24      	ldr	r4, [r4, #32]
 800cd18:	2c00      	cmp	r4, #0
 800cd1a:	d100      	bne.n	800cd1e <_strtol_r+0xe>
 800cd1c:	4c03      	ldr	r4, [pc, #12]	; (800cd2c <_strtol_r+0x1c>)
 800cd1e:	9400      	str	r4, [sp, #0]
 800cd20:	f7ff ff74 	bl	800cc0c <_strtol_l.isra.0>
 800cd24:	bd16      	pop	{r1, r2, r4, pc}
 800cd26:	46c0      	nop			; (mov r8, r8)
 800cd28:	20000124 	.word	0x20000124
 800cd2c:	20000188 	.word	0x20000188

0800cd30 <quorem>:
 800cd30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd32:	6903      	ldr	r3, [r0, #16]
 800cd34:	690c      	ldr	r4, [r1, #16]
 800cd36:	b089      	sub	sp, #36	; 0x24
 800cd38:	0007      	movs	r7, r0
 800cd3a:	9105      	str	r1, [sp, #20]
 800cd3c:	2600      	movs	r6, #0
 800cd3e:	42a3      	cmp	r3, r4
 800cd40:	db65      	blt.n	800ce0e <quorem+0xde>
 800cd42:	000b      	movs	r3, r1
 800cd44:	3c01      	subs	r4, #1
 800cd46:	3314      	adds	r3, #20
 800cd48:	00a5      	lsls	r5, r4, #2
 800cd4a:	9303      	str	r3, [sp, #12]
 800cd4c:	195b      	adds	r3, r3, r5
 800cd4e:	9304      	str	r3, [sp, #16]
 800cd50:	0003      	movs	r3, r0
 800cd52:	3314      	adds	r3, #20
 800cd54:	9302      	str	r3, [sp, #8]
 800cd56:	195d      	adds	r5, r3, r5
 800cd58:	9b04      	ldr	r3, [sp, #16]
 800cd5a:	6828      	ldr	r0, [r5, #0]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	1c59      	adds	r1, r3, #1
 800cd60:	9301      	str	r3, [sp, #4]
 800cd62:	f7f8 f9f1 	bl	8005148 <__udivsi3>
 800cd66:	9001      	str	r0, [sp, #4]
 800cd68:	42b0      	cmp	r0, r6
 800cd6a:	d029      	beq.n	800cdc0 <quorem+0x90>
 800cd6c:	9b03      	ldr	r3, [sp, #12]
 800cd6e:	9802      	ldr	r0, [sp, #8]
 800cd70:	469c      	mov	ip, r3
 800cd72:	9606      	str	r6, [sp, #24]
 800cd74:	4662      	mov	r2, ip
 800cd76:	ca08      	ldmia	r2!, {r3}
 800cd78:	4694      	mov	ip, r2
 800cd7a:	9a01      	ldr	r2, [sp, #4]
 800cd7c:	b299      	uxth	r1, r3
 800cd7e:	4351      	muls	r1, r2
 800cd80:	0c1b      	lsrs	r3, r3, #16
 800cd82:	4353      	muls	r3, r2
 800cd84:	1989      	adds	r1, r1, r6
 800cd86:	0c0a      	lsrs	r2, r1, #16
 800cd88:	189b      	adds	r3, r3, r2
 800cd8a:	9307      	str	r3, [sp, #28]
 800cd8c:	0c1e      	lsrs	r6, r3, #16
 800cd8e:	6803      	ldr	r3, [r0, #0]
 800cd90:	b289      	uxth	r1, r1
 800cd92:	b29a      	uxth	r2, r3
 800cd94:	9b06      	ldr	r3, [sp, #24]
 800cd96:	18d2      	adds	r2, r2, r3
 800cd98:	6803      	ldr	r3, [r0, #0]
 800cd9a:	1a52      	subs	r2, r2, r1
 800cd9c:	0c19      	lsrs	r1, r3, #16
 800cd9e:	466b      	mov	r3, sp
 800cda0:	8b9b      	ldrh	r3, [r3, #28]
 800cda2:	1acb      	subs	r3, r1, r3
 800cda4:	1411      	asrs	r1, r2, #16
 800cda6:	185b      	adds	r3, r3, r1
 800cda8:	1419      	asrs	r1, r3, #16
 800cdaa:	b292      	uxth	r2, r2
 800cdac:	041b      	lsls	r3, r3, #16
 800cdae:	431a      	orrs	r2, r3
 800cdb0:	9b04      	ldr	r3, [sp, #16]
 800cdb2:	9106      	str	r1, [sp, #24]
 800cdb4:	c004      	stmia	r0!, {r2}
 800cdb6:	4563      	cmp	r3, ip
 800cdb8:	d2dc      	bcs.n	800cd74 <quorem+0x44>
 800cdba:	682b      	ldr	r3, [r5, #0]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d02d      	beq.n	800ce1c <quorem+0xec>
 800cdc0:	9905      	ldr	r1, [sp, #20]
 800cdc2:	0038      	movs	r0, r7
 800cdc4:	f001 fcac 	bl	800e720 <__mcmp>
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	db1f      	blt.n	800ce0c <quorem+0xdc>
 800cdcc:	2500      	movs	r5, #0
 800cdce:	9b01      	ldr	r3, [sp, #4]
 800cdd0:	9802      	ldr	r0, [sp, #8]
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	9903      	ldr	r1, [sp, #12]
 800cdd6:	9301      	str	r3, [sp, #4]
 800cdd8:	6802      	ldr	r2, [r0, #0]
 800cdda:	c908      	ldmia	r1!, {r3}
 800cddc:	b292      	uxth	r2, r2
 800cdde:	1955      	adds	r5, r2, r5
 800cde0:	b29a      	uxth	r2, r3
 800cde2:	1aaa      	subs	r2, r5, r2
 800cde4:	6805      	ldr	r5, [r0, #0]
 800cde6:	0c1b      	lsrs	r3, r3, #16
 800cde8:	0c2d      	lsrs	r5, r5, #16
 800cdea:	1aeb      	subs	r3, r5, r3
 800cdec:	1415      	asrs	r5, r2, #16
 800cdee:	195b      	adds	r3, r3, r5
 800cdf0:	141d      	asrs	r5, r3, #16
 800cdf2:	b292      	uxth	r2, r2
 800cdf4:	041b      	lsls	r3, r3, #16
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	c008      	stmia	r0!, {r3}
 800cdfa:	9b04      	ldr	r3, [sp, #16]
 800cdfc:	428b      	cmp	r3, r1
 800cdfe:	d2eb      	bcs.n	800cdd8 <quorem+0xa8>
 800ce00:	9a02      	ldr	r2, [sp, #8]
 800ce02:	00a3      	lsls	r3, r4, #2
 800ce04:	18d3      	adds	r3, r2, r3
 800ce06:	681a      	ldr	r2, [r3, #0]
 800ce08:	2a00      	cmp	r2, #0
 800ce0a:	d011      	beq.n	800ce30 <quorem+0x100>
 800ce0c:	9e01      	ldr	r6, [sp, #4]
 800ce0e:	0030      	movs	r0, r6
 800ce10:	b009      	add	sp, #36	; 0x24
 800ce12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce14:	682b      	ldr	r3, [r5, #0]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d104      	bne.n	800ce24 <quorem+0xf4>
 800ce1a:	3c01      	subs	r4, #1
 800ce1c:	9b02      	ldr	r3, [sp, #8]
 800ce1e:	3d04      	subs	r5, #4
 800ce20:	42ab      	cmp	r3, r5
 800ce22:	d3f7      	bcc.n	800ce14 <quorem+0xe4>
 800ce24:	613c      	str	r4, [r7, #16]
 800ce26:	e7cb      	b.n	800cdc0 <quorem+0x90>
 800ce28:	681a      	ldr	r2, [r3, #0]
 800ce2a:	2a00      	cmp	r2, #0
 800ce2c:	d104      	bne.n	800ce38 <quorem+0x108>
 800ce2e:	3c01      	subs	r4, #1
 800ce30:	9a02      	ldr	r2, [sp, #8]
 800ce32:	3b04      	subs	r3, #4
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d3f7      	bcc.n	800ce28 <quorem+0xf8>
 800ce38:	613c      	str	r4, [r7, #16]
 800ce3a:	e7e7      	b.n	800ce0c <quorem+0xdc>

0800ce3c <_dtoa_r>:
 800ce3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce3e:	0016      	movs	r6, r2
 800ce40:	001f      	movs	r7, r3
 800ce42:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ce44:	b09b      	sub	sp, #108	; 0x6c
 800ce46:	9002      	str	r0, [sp, #8]
 800ce48:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800ce4a:	9606      	str	r6, [sp, #24]
 800ce4c:	9707      	str	r7, [sp, #28]
 800ce4e:	2c00      	cmp	r4, #0
 800ce50:	d108      	bne.n	800ce64 <_dtoa_r+0x28>
 800ce52:	2010      	movs	r0, #16
 800ce54:	f001 f9ea 	bl	800e22c <malloc>
 800ce58:	9b02      	ldr	r3, [sp, #8]
 800ce5a:	6258      	str	r0, [r3, #36]	; 0x24
 800ce5c:	6044      	str	r4, [r0, #4]
 800ce5e:	6084      	str	r4, [r0, #8]
 800ce60:	6004      	str	r4, [r0, #0]
 800ce62:	60c4      	str	r4, [r0, #12]
 800ce64:	9b02      	ldr	r3, [sp, #8]
 800ce66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce68:	6819      	ldr	r1, [r3, #0]
 800ce6a:	2900      	cmp	r1, #0
 800ce6c:	d00b      	beq.n	800ce86 <_dtoa_r+0x4a>
 800ce6e:	685a      	ldr	r2, [r3, #4]
 800ce70:	2301      	movs	r3, #1
 800ce72:	4093      	lsls	r3, r2
 800ce74:	604a      	str	r2, [r1, #4]
 800ce76:	608b      	str	r3, [r1, #8]
 800ce78:	9802      	ldr	r0, [sp, #8]
 800ce7a:	f001 fa36 	bl	800e2ea <_Bfree>
 800ce7e:	2200      	movs	r2, #0
 800ce80:	9b02      	ldr	r3, [sp, #8]
 800ce82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce84:	601a      	str	r2, [r3, #0]
 800ce86:	2f00      	cmp	r7, #0
 800ce88:	da20      	bge.n	800cecc <_dtoa_r+0x90>
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	602b      	str	r3, [r5, #0]
 800ce8e:	007b      	lsls	r3, r7, #1
 800ce90:	085b      	lsrs	r3, r3, #1
 800ce92:	9307      	str	r3, [sp, #28]
 800ce94:	9c07      	ldr	r4, [sp, #28]
 800ce96:	4bb2      	ldr	r3, [pc, #712]	; (800d160 <_dtoa_r+0x324>)
 800ce98:	0022      	movs	r2, r4
 800ce9a:	9317      	str	r3, [sp, #92]	; 0x5c
 800ce9c:	401a      	ands	r2, r3
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	d117      	bne.n	800ced2 <_dtoa_r+0x96>
 800cea2:	4bb0      	ldr	r3, [pc, #704]	; (800d164 <_dtoa_r+0x328>)
 800cea4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cea6:	6013      	str	r3, [r2, #0]
 800cea8:	9b06      	ldr	r3, [sp, #24]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d103      	bne.n	800ceb6 <_dtoa_r+0x7a>
 800ceae:	0324      	lsls	r4, r4, #12
 800ceb0:	d101      	bne.n	800ceb6 <_dtoa_r+0x7a>
 800ceb2:	f000 fd87 	bl	800d9c4 <_dtoa_r+0xb88>
 800ceb6:	4bac      	ldr	r3, [pc, #688]	; (800d168 <_dtoa_r+0x32c>)
 800ceb8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ceba:	9308      	str	r3, [sp, #32]
 800cebc:	2a00      	cmp	r2, #0
 800cebe:	d002      	beq.n	800cec6 <_dtoa_r+0x8a>
 800cec0:	4baa      	ldr	r3, [pc, #680]	; (800d16c <_dtoa_r+0x330>)
 800cec2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cec4:	6013      	str	r3, [r2, #0]
 800cec6:	9808      	ldr	r0, [sp, #32]
 800cec8:	b01b      	add	sp, #108	; 0x6c
 800ceca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cecc:	2300      	movs	r3, #0
 800cece:	602b      	str	r3, [r5, #0]
 800ced0:	e7e0      	b.n	800ce94 <_dtoa_r+0x58>
 800ced2:	9e06      	ldr	r6, [sp, #24]
 800ced4:	9f07      	ldr	r7, [sp, #28]
 800ced6:	2200      	movs	r2, #0
 800ced8:	2300      	movs	r3, #0
 800ceda:	0030      	movs	r0, r6
 800cedc:	0039      	movs	r1, r7
 800cede:	f7f8 fab9 	bl	8005454 <__aeabi_dcmpeq>
 800cee2:	1e05      	subs	r5, r0, #0
 800cee4:	d00b      	beq.n	800cefe <_dtoa_r+0xc2>
 800cee6:	2301      	movs	r3, #1
 800cee8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ceea:	6013      	str	r3, [r2, #0]
 800ceec:	4ba0      	ldr	r3, [pc, #640]	; (800d170 <_dtoa_r+0x334>)
 800ceee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cef0:	9308      	str	r3, [sp, #32]
 800cef2:	2a00      	cmp	r2, #0
 800cef4:	d0e7      	beq.n	800cec6 <_dtoa_r+0x8a>
 800cef6:	4a9f      	ldr	r2, [pc, #636]	; (800d174 <_dtoa_r+0x338>)
 800cef8:	9924      	ldr	r1, [sp, #144]	; 0x90
 800cefa:	600a      	str	r2, [r1, #0]
 800cefc:	e7e3      	b.n	800cec6 <_dtoa_r+0x8a>
 800cefe:	ab18      	add	r3, sp, #96	; 0x60
 800cf00:	9301      	str	r3, [sp, #4]
 800cf02:	ab19      	add	r3, sp, #100	; 0x64
 800cf04:	9300      	str	r3, [sp, #0]
 800cf06:	0032      	movs	r2, r6
 800cf08:	003b      	movs	r3, r7
 800cf0a:	9802      	ldr	r0, [sp, #8]
 800cf0c:	f001 fcf8 	bl	800e900 <__d2b>
 800cf10:	0063      	lsls	r3, r4, #1
 800cf12:	9003      	str	r0, [sp, #12]
 800cf14:	0d5b      	lsrs	r3, r3, #21
 800cf16:	d074      	beq.n	800d002 <_dtoa_r+0x1c6>
 800cf18:	033a      	lsls	r2, r7, #12
 800cf1a:	4c97      	ldr	r4, [pc, #604]	; (800d178 <_dtoa_r+0x33c>)
 800cf1c:	0b12      	lsrs	r2, r2, #12
 800cf1e:	4314      	orrs	r4, r2
 800cf20:	0021      	movs	r1, r4
 800cf22:	4a96      	ldr	r2, [pc, #600]	; (800d17c <_dtoa_r+0x340>)
 800cf24:	0030      	movs	r0, r6
 800cf26:	9516      	str	r5, [sp, #88]	; 0x58
 800cf28:	189e      	adds	r6, r3, r2
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	4b94      	ldr	r3, [pc, #592]	; (800d180 <_dtoa_r+0x344>)
 800cf2e:	f7fa f8c1 	bl	80070b4 <__aeabi_dsub>
 800cf32:	4a94      	ldr	r2, [pc, #592]	; (800d184 <_dtoa_r+0x348>)
 800cf34:	4b94      	ldr	r3, [pc, #592]	; (800d188 <_dtoa_r+0x34c>)
 800cf36:	f7f9 fe4b 	bl	8006bd0 <__aeabi_dmul>
 800cf3a:	4a94      	ldr	r2, [pc, #592]	; (800d18c <_dtoa_r+0x350>)
 800cf3c:	4b94      	ldr	r3, [pc, #592]	; (800d190 <_dtoa_r+0x354>)
 800cf3e:	f7f8 ff21 	bl	8005d84 <__aeabi_dadd>
 800cf42:	0004      	movs	r4, r0
 800cf44:	0030      	movs	r0, r6
 800cf46:	000d      	movs	r5, r1
 800cf48:	f7fa fc4e 	bl	80077e8 <__aeabi_i2d>
 800cf4c:	4a91      	ldr	r2, [pc, #580]	; (800d194 <_dtoa_r+0x358>)
 800cf4e:	4b92      	ldr	r3, [pc, #584]	; (800d198 <_dtoa_r+0x35c>)
 800cf50:	f7f9 fe3e 	bl	8006bd0 <__aeabi_dmul>
 800cf54:	0002      	movs	r2, r0
 800cf56:	000b      	movs	r3, r1
 800cf58:	0020      	movs	r0, r4
 800cf5a:	0029      	movs	r1, r5
 800cf5c:	f7f8 ff12 	bl	8005d84 <__aeabi_dadd>
 800cf60:	0004      	movs	r4, r0
 800cf62:	000d      	movs	r5, r1
 800cf64:	f7fa fc0a 	bl	800777c <__aeabi_d2iz>
 800cf68:	2200      	movs	r2, #0
 800cf6a:	0007      	movs	r7, r0
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	0020      	movs	r0, r4
 800cf70:	0029      	movs	r1, r5
 800cf72:	f7f8 fa75 	bl	8005460 <__aeabi_dcmplt>
 800cf76:	2800      	cmp	r0, #0
 800cf78:	d009      	beq.n	800cf8e <_dtoa_r+0x152>
 800cf7a:	0038      	movs	r0, r7
 800cf7c:	f7fa fc34 	bl	80077e8 <__aeabi_i2d>
 800cf80:	002b      	movs	r3, r5
 800cf82:	0022      	movs	r2, r4
 800cf84:	f7f8 fa66 	bl	8005454 <__aeabi_dcmpeq>
 800cf88:	4243      	negs	r3, r0
 800cf8a:	4158      	adcs	r0, r3
 800cf8c:	1a3f      	subs	r7, r7, r0
 800cf8e:	2301      	movs	r3, #1
 800cf90:	9314      	str	r3, [sp, #80]	; 0x50
 800cf92:	2f16      	cmp	r7, #22
 800cf94:	d80d      	bhi.n	800cfb2 <_dtoa_r+0x176>
 800cf96:	4981      	ldr	r1, [pc, #516]	; (800d19c <_dtoa_r+0x360>)
 800cf98:	00fb      	lsls	r3, r7, #3
 800cf9a:	18c9      	adds	r1, r1, r3
 800cf9c:	6808      	ldr	r0, [r1, #0]
 800cf9e:	6849      	ldr	r1, [r1, #4]
 800cfa0:	9a06      	ldr	r2, [sp, #24]
 800cfa2:	9b07      	ldr	r3, [sp, #28]
 800cfa4:	f7f8 fa70 	bl	8005488 <__aeabi_dcmpgt>
 800cfa8:	2800      	cmp	r0, #0
 800cfaa:	d046      	beq.n	800d03a <_dtoa_r+0x1fe>
 800cfac:	2300      	movs	r3, #0
 800cfae:	3f01      	subs	r7, #1
 800cfb0:	9314      	str	r3, [sp, #80]	; 0x50
 800cfb2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cfb4:	1b9e      	subs	r6, r3, r6
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	930a      	str	r3, [sp, #40]	; 0x28
 800cfba:	0033      	movs	r3, r6
 800cfbc:	3b01      	subs	r3, #1
 800cfbe:	930b      	str	r3, [sp, #44]	; 0x2c
 800cfc0:	d504      	bpl.n	800cfcc <_dtoa_r+0x190>
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	1b9b      	subs	r3, r3, r6
 800cfc6:	930a      	str	r3, [sp, #40]	; 0x28
 800cfc8:	2300      	movs	r3, #0
 800cfca:	930b      	str	r3, [sp, #44]	; 0x2c
 800cfcc:	2f00      	cmp	r7, #0
 800cfce:	db36      	blt.n	800d03e <_dtoa_r+0x202>
 800cfd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfd2:	9711      	str	r7, [sp, #68]	; 0x44
 800cfd4:	19db      	adds	r3, r3, r7
 800cfd6:	930b      	str	r3, [sp, #44]	; 0x2c
 800cfd8:	2300      	movs	r3, #0
 800cfda:	9304      	str	r3, [sp, #16]
 800cfdc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cfde:	2401      	movs	r4, #1
 800cfe0:	2b09      	cmp	r3, #9
 800cfe2:	d900      	bls.n	800cfe6 <_dtoa_r+0x1aa>
 800cfe4:	e084      	b.n	800d0f0 <_dtoa_r+0x2b4>
 800cfe6:	2b05      	cmp	r3, #5
 800cfe8:	dd02      	ble.n	800cff0 <_dtoa_r+0x1b4>
 800cfea:	2400      	movs	r4, #0
 800cfec:	3b04      	subs	r3, #4
 800cfee:	9320      	str	r3, [sp, #128]	; 0x80
 800cff0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cff2:	1e98      	subs	r0, r3, #2
 800cff4:	2803      	cmp	r0, #3
 800cff6:	d900      	bls.n	800cffa <_dtoa_r+0x1be>
 800cff8:	e084      	b.n	800d104 <_dtoa_r+0x2c8>
 800cffa:	f7f8 f89b 	bl	8005134 <__gnu_thumb1_case_uqi>
 800cffe:	7775      	.short	0x7775
 800d000:	6a28      	.short	0x6a28
 800d002:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d004:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d006:	189e      	adds	r6, r3, r2
 800d008:	4b65      	ldr	r3, [pc, #404]	; (800d1a0 <_dtoa_r+0x364>)
 800d00a:	18f2      	adds	r2, r6, r3
 800d00c:	2a20      	cmp	r2, #32
 800d00e:	dd0f      	ble.n	800d030 <_dtoa_r+0x1f4>
 800d010:	2340      	movs	r3, #64	; 0x40
 800d012:	1a9b      	subs	r3, r3, r2
 800d014:	409c      	lsls	r4, r3
 800d016:	4b63      	ldr	r3, [pc, #396]	; (800d1a4 <_dtoa_r+0x368>)
 800d018:	9806      	ldr	r0, [sp, #24]
 800d01a:	18f3      	adds	r3, r6, r3
 800d01c:	40d8      	lsrs	r0, r3
 800d01e:	4320      	orrs	r0, r4
 800d020:	f7fa fc1c 	bl	800785c <__aeabi_ui2d>
 800d024:	2301      	movs	r3, #1
 800d026:	4c60      	ldr	r4, [pc, #384]	; (800d1a8 <_dtoa_r+0x36c>)
 800d028:	3e01      	subs	r6, #1
 800d02a:	1909      	adds	r1, r1, r4
 800d02c:	9316      	str	r3, [sp, #88]	; 0x58
 800d02e:	e77c      	b.n	800cf2a <_dtoa_r+0xee>
 800d030:	2320      	movs	r3, #32
 800d032:	9806      	ldr	r0, [sp, #24]
 800d034:	1a9b      	subs	r3, r3, r2
 800d036:	4098      	lsls	r0, r3
 800d038:	e7f2      	b.n	800d020 <_dtoa_r+0x1e4>
 800d03a:	9014      	str	r0, [sp, #80]	; 0x50
 800d03c:	e7b9      	b.n	800cfb2 <_dtoa_r+0x176>
 800d03e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d040:	1bdb      	subs	r3, r3, r7
 800d042:	930a      	str	r3, [sp, #40]	; 0x28
 800d044:	427b      	negs	r3, r7
 800d046:	9304      	str	r3, [sp, #16]
 800d048:	2300      	movs	r3, #0
 800d04a:	9311      	str	r3, [sp, #68]	; 0x44
 800d04c:	e7c6      	b.n	800cfdc <_dtoa_r+0x1a0>
 800d04e:	2301      	movs	r3, #1
 800d050:	930d      	str	r3, [sp, #52]	; 0x34
 800d052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d054:	2b00      	cmp	r3, #0
 800d056:	dd59      	ble.n	800d10c <_dtoa_r+0x2d0>
 800d058:	930c      	str	r3, [sp, #48]	; 0x30
 800d05a:	9309      	str	r3, [sp, #36]	; 0x24
 800d05c:	9a02      	ldr	r2, [sp, #8]
 800d05e:	6a55      	ldr	r5, [r2, #36]	; 0x24
 800d060:	2200      	movs	r2, #0
 800d062:	606a      	str	r2, [r5, #4]
 800d064:	3204      	adds	r2, #4
 800d066:	0010      	movs	r0, r2
 800d068:	3014      	adds	r0, #20
 800d06a:	6869      	ldr	r1, [r5, #4]
 800d06c:	4298      	cmp	r0, r3
 800d06e:	d952      	bls.n	800d116 <_dtoa_r+0x2da>
 800d070:	9802      	ldr	r0, [sp, #8]
 800d072:	f001 f902 	bl	800e27a <_Balloc>
 800d076:	9b02      	ldr	r3, [sp, #8]
 800d078:	6028      	str	r0, [r5, #0]
 800d07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	9308      	str	r3, [sp, #32]
 800d080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d082:	2b0e      	cmp	r3, #14
 800d084:	d900      	bls.n	800d088 <_dtoa_r+0x24c>
 800d086:	e10a      	b.n	800d29e <_dtoa_r+0x462>
 800d088:	2c00      	cmp	r4, #0
 800d08a:	d100      	bne.n	800d08e <_dtoa_r+0x252>
 800d08c:	e107      	b.n	800d29e <_dtoa_r+0x462>
 800d08e:	9b06      	ldr	r3, [sp, #24]
 800d090:	9c07      	ldr	r4, [sp, #28]
 800d092:	9312      	str	r3, [sp, #72]	; 0x48
 800d094:	9413      	str	r4, [sp, #76]	; 0x4c
 800d096:	2f00      	cmp	r7, #0
 800d098:	dc00      	bgt.n	800d09c <_dtoa_r+0x260>
 800d09a:	e089      	b.n	800d1b0 <_dtoa_r+0x374>
 800d09c:	210f      	movs	r1, #15
 800d09e:	003a      	movs	r2, r7
 800d0a0:	4b3e      	ldr	r3, [pc, #248]	; (800d19c <_dtoa_r+0x360>)
 800d0a2:	400a      	ands	r2, r1
 800d0a4:	00d2      	lsls	r2, r2, #3
 800d0a6:	189b      	adds	r3, r3, r2
 800d0a8:	681d      	ldr	r5, [r3, #0]
 800d0aa:	685e      	ldr	r6, [r3, #4]
 800d0ac:	2302      	movs	r3, #2
 800d0ae:	113c      	asrs	r4, r7, #4
 800d0b0:	930e      	str	r3, [sp, #56]	; 0x38
 800d0b2:	06e3      	lsls	r3, r4, #27
 800d0b4:	d50b      	bpl.n	800d0ce <_dtoa_r+0x292>
 800d0b6:	4b3d      	ldr	r3, [pc, #244]	; (800d1ac <_dtoa_r+0x370>)
 800d0b8:	400c      	ands	r4, r1
 800d0ba:	6a1a      	ldr	r2, [r3, #32]
 800d0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0be:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d0c0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d0c2:	f7f9 f97b 	bl	80063bc <__aeabi_ddiv>
 800d0c6:	2303      	movs	r3, #3
 800d0c8:	9006      	str	r0, [sp, #24]
 800d0ca:	9107      	str	r1, [sp, #28]
 800d0cc:	930e      	str	r3, [sp, #56]	; 0x38
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	e03a      	b.n	800d148 <_dtoa_r+0x30c>
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	930d      	str	r3, [sp, #52]	; 0x34
 800d0d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0d8:	18fb      	adds	r3, r7, r3
 800d0da:	930c      	str	r3, [sp, #48]	; 0x30
 800d0dc:	3301      	adds	r3, #1
 800d0de:	9309      	str	r3, [sp, #36]	; 0x24
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	dcbb      	bgt.n	800d05c <_dtoa_r+0x220>
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	e7b9      	b.n	800d05c <_dtoa_r+0x220>
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	e7b1      	b.n	800d050 <_dtoa_r+0x214>
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	e7f1      	b.n	800d0d4 <_dtoa_r+0x298>
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	940d      	str	r4, [sp, #52]	; 0x34
 800d0f4:	9320      	str	r3, [sp, #128]	; 0x80
 800d0f6:	3b01      	subs	r3, #1
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	930c      	str	r3, [sp, #48]	; 0x30
 800d0fc:	9309      	str	r3, [sp, #36]	; 0x24
 800d0fe:	3313      	adds	r3, #19
 800d100:	9221      	str	r2, [sp, #132]	; 0x84
 800d102:	e7ab      	b.n	800d05c <_dtoa_r+0x220>
 800d104:	2301      	movs	r3, #1
 800d106:	930d      	str	r3, [sp, #52]	; 0x34
 800d108:	3b02      	subs	r3, #2
 800d10a:	e7f5      	b.n	800d0f8 <_dtoa_r+0x2bc>
 800d10c:	2301      	movs	r3, #1
 800d10e:	930c      	str	r3, [sp, #48]	; 0x30
 800d110:	9309      	str	r3, [sp, #36]	; 0x24
 800d112:	001a      	movs	r2, r3
 800d114:	e7f4      	b.n	800d100 <_dtoa_r+0x2c4>
 800d116:	3101      	adds	r1, #1
 800d118:	6069      	str	r1, [r5, #4]
 800d11a:	0052      	lsls	r2, r2, #1
 800d11c:	e7a3      	b.n	800d066 <_dtoa_r+0x22a>
 800d11e:	2301      	movs	r3, #1
 800d120:	421c      	tst	r4, r3
 800d122:	d00e      	beq.n	800d142 <_dtoa_r+0x306>
 800d124:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d126:	4a21      	ldr	r2, [pc, #132]	; (800d1ac <_dtoa_r+0x370>)
 800d128:	3301      	adds	r3, #1
 800d12a:	930e      	str	r3, [sp, #56]	; 0x38
 800d12c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d12e:	0028      	movs	r0, r5
 800d130:	00db      	lsls	r3, r3, #3
 800d132:	189b      	adds	r3, r3, r2
 800d134:	0031      	movs	r1, r6
 800d136:	681a      	ldr	r2, [r3, #0]
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	f7f9 fd49 	bl	8006bd0 <__aeabi_dmul>
 800d13e:	0005      	movs	r5, r0
 800d140:	000e      	movs	r6, r1
 800d142:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d144:	1064      	asrs	r4, r4, #1
 800d146:	3301      	adds	r3, #1
 800d148:	9310      	str	r3, [sp, #64]	; 0x40
 800d14a:	2c00      	cmp	r4, #0
 800d14c:	d1e7      	bne.n	800d11e <_dtoa_r+0x2e2>
 800d14e:	9806      	ldr	r0, [sp, #24]
 800d150:	9907      	ldr	r1, [sp, #28]
 800d152:	002a      	movs	r2, r5
 800d154:	0033      	movs	r3, r6
 800d156:	f7f9 f931 	bl	80063bc <__aeabi_ddiv>
 800d15a:	9006      	str	r0, [sp, #24]
 800d15c:	9107      	str	r1, [sp, #28]
 800d15e:	e042      	b.n	800d1e6 <_dtoa_r+0x3aa>
 800d160:	7ff00000 	.word	0x7ff00000
 800d164:	0000270f 	.word	0x0000270f
 800d168:	0800ff61 	.word	0x0800ff61
 800d16c:	0800ff64 	.word	0x0800ff64
 800d170:	0800fed8 	.word	0x0800fed8
 800d174:	0800fed9 	.word	0x0800fed9
 800d178:	3ff00000 	.word	0x3ff00000
 800d17c:	fffffc01 	.word	0xfffffc01
 800d180:	3ff80000 	.word	0x3ff80000
 800d184:	636f4361 	.word	0x636f4361
 800d188:	3fd287a7 	.word	0x3fd287a7
 800d18c:	8b60c8b3 	.word	0x8b60c8b3
 800d190:	3fc68a28 	.word	0x3fc68a28
 800d194:	509f79fb 	.word	0x509f79fb
 800d198:	3fd34413 	.word	0x3fd34413
 800d19c:	08010000 	.word	0x08010000
 800d1a0:	00000432 	.word	0x00000432
 800d1a4:	00000412 	.word	0x00000412
 800d1a8:	fe100000 	.word	0xfe100000
 800d1ac:	0800ffd8 	.word	0x0800ffd8
 800d1b0:	2302      	movs	r3, #2
 800d1b2:	930e      	str	r3, [sp, #56]	; 0x38
 800d1b4:	2f00      	cmp	r7, #0
 800d1b6:	d016      	beq.n	800d1e6 <_dtoa_r+0x3aa>
 800d1b8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d1ba:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d1bc:	427c      	negs	r4, r7
 800d1be:	330d      	adds	r3, #13
 800d1c0:	4023      	ands	r3, r4
 800d1c2:	4ace      	ldr	r2, [pc, #824]	; (800d4fc <_dtoa_r+0x6c0>)
 800d1c4:	00db      	lsls	r3, r3, #3
 800d1c6:	18d3      	adds	r3, r2, r3
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	685b      	ldr	r3, [r3, #4]
 800d1cc:	f7f9 fd00 	bl	8006bd0 <__aeabi_dmul>
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	2601      	movs	r6, #1
 800d1d4:	001d      	movs	r5, r3
 800d1d6:	9006      	str	r0, [sp, #24]
 800d1d8:	9107      	str	r1, [sp, #28]
 800d1da:	1124      	asrs	r4, r4, #4
 800d1dc:	2c00      	cmp	r4, #0
 800d1de:	d000      	beq.n	800d1e2 <_dtoa_r+0x3a6>
 800d1e0:	e08c      	b.n	800d2fc <_dtoa_r+0x4c0>
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d1b9      	bne.n	800d15a <_dtoa_r+0x31e>
 800d1e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d100      	bne.n	800d1ee <_dtoa_r+0x3b2>
 800d1ec:	e096      	b.n	800d31c <_dtoa_r+0x4e0>
 800d1ee:	9c06      	ldr	r4, [sp, #24]
 800d1f0:	9d07      	ldr	r5, [sp, #28]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	4bc2      	ldr	r3, [pc, #776]	; (800d500 <_dtoa_r+0x6c4>)
 800d1f6:	0020      	movs	r0, r4
 800d1f8:	0029      	movs	r1, r5
 800d1fa:	f7f8 f931 	bl	8005460 <__aeabi_dcmplt>
 800d1fe:	2800      	cmp	r0, #0
 800d200:	d100      	bne.n	800d204 <_dtoa_r+0x3c8>
 800d202:	e08b      	b.n	800d31c <_dtoa_r+0x4e0>
 800d204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d206:	2b00      	cmp	r3, #0
 800d208:	d100      	bne.n	800d20c <_dtoa_r+0x3d0>
 800d20a:	e087      	b.n	800d31c <_dtoa_r+0x4e0>
 800d20c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d20e:	2b00      	cmp	r3, #0
 800d210:	dd41      	ble.n	800d296 <_dtoa_r+0x45a>
 800d212:	4bbc      	ldr	r3, [pc, #752]	; (800d504 <_dtoa_r+0x6c8>)
 800d214:	2200      	movs	r2, #0
 800d216:	0020      	movs	r0, r4
 800d218:	0029      	movs	r1, r5
 800d21a:	f7f9 fcd9 	bl	8006bd0 <__aeabi_dmul>
 800d21e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d220:	9006      	str	r0, [sp, #24]
 800d222:	9107      	str	r1, [sp, #28]
 800d224:	3301      	adds	r3, #1
 800d226:	930e      	str	r3, [sp, #56]	; 0x38
 800d228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d22a:	1e7e      	subs	r6, r7, #1
 800d22c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d22e:	9310      	str	r3, [sp, #64]	; 0x40
 800d230:	f7fa fada 	bl	80077e8 <__aeabi_i2d>
 800d234:	9a06      	ldr	r2, [sp, #24]
 800d236:	9b07      	ldr	r3, [sp, #28]
 800d238:	f7f9 fcca 	bl	8006bd0 <__aeabi_dmul>
 800d23c:	2200      	movs	r2, #0
 800d23e:	4bb2      	ldr	r3, [pc, #712]	; (800d508 <_dtoa_r+0x6cc>)
 800d240:	f7f8 fda0 	bl	8005d84 <__aeabi_dadd>
 800d244:	4ab1      	ldr	r2, [pc, #708]	; (800d50c <_dtoa_r+0x6d0>)
 800d246:	900e      	str	r0, [sp, #56]	; 0x38
 800d248:	910f      	str	r1, [sp, #60]	; 0x3c
 800d24a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800d24c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d24e:	4694      	mov	ip, r2
 800d250:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d252:	4463      	add	r3, ip
 800d254:	9315      	str	r3, [sp, #84]	; 0x54
 800d256:	001d      	movs	r5, r3
 800d258:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d161      	bne.n	800d322 <_dtoa_r+0x4e6>
 800d25e:	9806      	ldr	r0, [sp, #24]
 800d260:	9907      	ldr	r1, [sp, #28]
 800d262:	2200      	movs	r2, #0
 800d264:	4baa      	ldr	r3, [pc, #680]	; (800d510 <_dtoa_r+0x6d4>)
 800d266:	f7f9 ff25 	bl	80070b4 <__aeabi_dsub>
 800d26a:	0022      	movs	r2, r4
 800d26c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d26e:	9006      	str	r0, [sp, #24]
 800d270:	9107      	str	r1, [sp, #28]
 800d272:	f7f8 f909 	bl	8005488 <__aeabi_dcmpgt>
 800d276:	2800      	cmp	r0, #0
 800d278:	d000      	beq.n	800d27c <_dtoa_r+0x440>
 800d27a:	e2a8      	b.n	800d7ce <_dtoa_r+0x992>
 800d27c:	48a5      	ldr	r0, [pc, #660]	; (800d514 <_dtoa_r+0x6d8>)
 800d27e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d280:	4684      	mov	ip, r0
 800d282:	4461      	add	r1, ip
 800d284:	000b      	movs	r3, r1
 800d286:	9806      	ldr	r0, [sp, #24]
 800d288:	9907      	ldr	r1, [sp, #28]
 800d28a:	0022      	movs	r2, r4
 800d28c:	f7f8 f8e8 	bl	8005460 <__aeabi_dcmplt>
 800d290:	2800      	cmp	r0, #0
 800d292:	d000      	beq.n	800d296 <_dtoa_r+0x45a>
 800d294:	e295      	b.n	800d7c2 <_dtoa_r+0x986>
 800d296:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d298:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800d29a:	9306      	str	r3, [sp, #24]
 800d29c:	9407      	str	r4, [sp, #28]
 800d29e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	da00      	bge.n	800d2a6 <_dtoa_r+0x46a>
 800d2a4:	e15c      	b.n	800d560 <_dtoa_r+0x724>
 800d2a6:	2f0e      	cmp	r7, #14
 800d2a8:	dd00      	ble.n	800d2ac <_dtoa_r+0x470>
 800d2aa:	e159      	b.n	800d560 <_dtoa_r+0x724>
 800d2ac:	4b93      	ldr	r3, [pc, #588]	; (800d4fc <_dtoa_r+0x6c0>)
 800d2ae:	00fa      	lsls	r2, r7, #3
 800d2b0:	189b      	adds	r3, r3, r2
 800d2b2:	685c      	ldr	r4, [r3, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	9304      	str	r3, [sp, #16]
 800d2b8:	9405      	str	r4, [sp, #20]
 800d2ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	db00      	blt.n	800d2c2 <_dtoa_r+0x486>
 800d2c0:	e0d8      	b.n	800d474 <_dtoa_r+0x638>
 800d2c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	dd00      	ble.n	800d2ca <_dtoa_r+0x48e>
 800d2c8:	e0d4      	b.n	800d474 <_dtoa_r+0x638>
 800d2ca:	d000      	beq.n	800d2ce <_dtoa_r+0x492>
 800d2cc:	e27d      	b.n	800d7ca <_dtoa_r+0x98e>
 800d2ce:	9804      	ldr	r0, [sp, #16]
 800d2d0:	9905      	ldr	r1, [sp, #20]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	4b8e      	ldr	r3, [pc, #568]	; (800d510 <_dtoa_r+0x6d4>)
 800d2d6:	f7f9 fc7b 	bl	8006bd0 <__aeabi_dmul>
 800d2da:	9a06      	ldr	r2, [sp, #24]
 800d2dc:	9b07      	ldr	r3, [sp, #28]
 800d2de:	f7f8 f8dd 	bl	800549c <__aeabi_dcmpge>
 800d2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2e4:	9304      	str	r3, [sp, #16]
 800d2e6:	001e      	movs	r6, r3
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	d000      	beq.n	800d2ee <_dtoa_r+0x4b2>
 800d2ec:	e24f      	b.n	800d78e <_dtoa_r+0x952>
 800d2ee:	9b08      	ldr	r3, [sp, #32]
 800d2f0:	9a08      	ldr	r2, [sp, #32]
 800d2f2:	1c5d      	adds	r5, r3, #1
 800d2f4:	2331      	movs	r3, #49	; 0x31
 800d2f6:	3701      	adds	r7, #1
 800d2f8:	7013      	strb	r3, [r2, #0]
 800d2fa:	e24b      	b.n	800d794 <_dtoa_r+0x958>
 800d2fc:	4234      	tst	r4, r6
 800d2fe:	d00a      	beq.n	800d316 <_dtoa_r+0x4da>
 800d300:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d302:	4a85      	ldr	r2, [pc, #532]	; (800d518 <_dtoa_r+0x6dc>)
 800d304:	3301      	adds	r3, #1
 800d306:	930e      	str	r3, [sp, #56]	; 0x38
 800d308:	00eb      	lsls	r3, r5, #3
 800d30a:	189b      	adds	r3, r3, r2
 800d30c:	681a      	ldr	r2, [r3, #0]
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	f7f9 fc5e 	bl	8006bd0 <__aeabi_dmul>
 800d314:	0033      	movs	r3, r6
 800d316:	1064      	asrs	r4, r4, #1
 800d318:	3501      	adds	r5, #1
 800d31a:	e75f      	b.n	800d1dc <_dtoa_r+0x3a0>
 800d31c:	003e      	movs	r6, r7
 800d31e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d320:	e784      	b.n	800d22c <_dtoa_r+0x3f0>
 800d322:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d324:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d326:	1e5a      	subs	r2, r3, #1
 800d328:	4b74      	ldr	r3, [pc, #464]	; (800d4fc <_dtoa_r+0x6c0>)
 800d32a:	00d2      	lsls	r2, r2, #3
 800d32c:	189b      	adds	r3, r3, r2
 800d32e:	681a      	ldr	r2, [r3, #0]
 800d330:	685b      	ldr	r3, [r3, #4]
 800d332:	2900      	cmp	r1, #0
 800d334:	d049      	beq.n	800d3ca <_dtoa_r+0x58e>
 800d336:	2000      	movs	r0, #0
 800d338:	4978      	ldr	r1, [pc, #480]	; (800d51c <_dtoa_r+0x6e0>)
 800d33a:	f7f9 f83f 	bl	80063bc <__aeabi_ddiv>
 800d33e:	002b      	movs	r3, r5
 800d340:	0022      	movs	r2, r4
 800d342:	f7f9 feb7 	bl	80070b4 <__aeabi_dsub>
 800d346:	9b08      	ldr	r3, [sp, #32]
 800d348:	900e      	str	r0, [sp, #56]	; 0x38
 800d34a:	910f      	str	r1, [sp, #60]	; 0x3c
 800d34c:	9315      	str	r3, [sp, #84]	; 0x54
 800d34e:	9806      	ldr	r0, [sp, #24]
 800d350:	9907      	ldr	r1, [sp, #28]
 800d352:	f7fa fa13 	bl	800777c <__aeabi_d2iz>
 800d356:	0004      	movs	r4, r0
 800d358:	f7fa fa46 	bl	80077e8 <__aeabi_i2d>
 800d35c:	0002      	movs	r2, r0
 800d35e:	000b      	movs	r3, r1
 800d360:	9806      	ldr	r0, [sp, #24]
 800d362:	9907      	ldr	r1, [sp, #28]
 800d364:	f7f9 fea6 	bl	80070b4 <__aeabi_dsub>
 800d368:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d36a:	3430      	adds	r4, #48	; 0x30
 800d36c:	1c5d      	adds	r5, r3, #1
 800d36e:	701c      	strb	r4, [r3, #0]
 800d370:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d372:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d374:	9006      	str	r0, [sp, #24]
 800d376:	9107      	str	r1, [sp, #28]
 800d378:	f7f8 f872 	bl	8005460 <__aeabi_dcmplt>
 800d37c:	2800      	cmp	r0, #0
 800d37e:	d16c      	bne.n	800d45a <_dtoa_r+0x61e>
 800d380:	9a06      	ldr	r2, [sp, #24]
 800d382:	9b07      	ldr	r3, [sp, #28]
 800d384:	2000      	movs	r0, #0
 800d386:	495e      	ldr	r1, [pc, #376]	; (800d500 <_dtoa_r+0x6c4>)
 800d388:	f7f9 fe94 	bl	80070b4 <__aeabi_dsub>
 800d38c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d38e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d390:	f7f8 f866 	bl	8005460 <__aeabi_dcmplt>
 800d394:	2800      	cmp	r0, #0
 800d396:	d000      	beq.n	800d39a <_dtoa_r+0x55e>
 800d398:	e0c3      	b.n	800d522 <_dtoa_r+0x6e6>
 800d39a:	9b08      	ldr	r3, [sp, #32]
 800d39c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d39e:	1aeb      	subs	r3, r5, r3
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	dc00      	bgt.n	800d3a6 <_dtoa_r+0x56a>
 800d3a4:	e777      	b.n	800d296 <_dtoa_r+0x45a>
 800d3a6:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d3a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	4b55      	ldr	r3, [pc, #340]	; (800d504 <_dtoa_r+0x6c8>)
 800d3ae:	f7f9 fc0f 	bl	8006bd0 <__aeabi_dmul>
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	900e      	str	r0, [sp, #56]	; 0x38
 800d3b6:	910f      	str	r1, [sp, #60]	; 0x3c
 800d3b8:	9806      	ldr	r0, [sp, #24]
 800d3ba:	9907      	ldr	r1, [sp, #28]
 800d3bc:	4b51      	ldr	r3, [pc, #324]	; (800d504 <_dtoa_r+0x6c8>)
 800d3be:	f7f9 fc07 	bl	8006bd0 <__aeabi_dmul>
 800d3c2:	9515      	str	r5, [sp, #84]	; 0x54
 800d3c4:	9006      	str	r0, [sp, #24]
 800d3c6:	9107      	str	r1, [sp, #28]
 800d3c8:	e7c1      	b.n	800d34e <_dtoa_r+0x512>
 800d3ca:	0020      	movs	r0, r4
 800d3cc:	0029      	movs	r1, r5
 800d3ce:	f7f9 fbff 	bl	8006bd0 <__aeabi_dmul>
 800d3d2:	9c08      	ldr	r4, [sp, #32]
 800d3d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d3d6:	0023      	movs	r3, r4
 800d3d8:	4694      	mov	ip, r2
 800d3da:	900e      	str	r0, [sp, #56]	; 0x38
 800d3dc:	910f      	str	r1, [sp, #60]	; 0x3c
 800d3de:	4463      	add	r3, ip
 800d3e0:	9315      	str	r3, [sp, #84]	; 0x54
 800d3e2:	9806      	ldr	r0, [sp, #24]
 800d3e4:	9907      	ldr	r1, [sp, #28]
 800d3e6:	f7fa f9c9 	bl	800777c <__aeabi_d2iz>
 800d3ea:	0005      	movs	r5, r0
 800d3ec:	f7fa f9fc 	bl	80077e8 <__aeabi_i2d>
 800d3f0:	000b      	movs	r3, r1
 800d3f2:	0002      	movs	r2, r0
 800d3f4:	9806      	ldr	r0, [sp, #24]
 800d3f6:	9907      	ldr	r1, [sp, #28]
 800d3f8:	f7f9 fe5c 	bl	80070b4 <__aeabi_dsub>
 800d3fc:	3530      	adds	r5, #48	; 0x30
 800d3fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d400:	7025      	strb	r5, [r4, #0]
 800d402:	3401      	adds	r4, #1
 800d404:	9006      	str	r0, [sp, #24]
 800d406:	9107      	str	r1, [sp, #28]
 800d408:	42a3      	cmp	r3, r4
 800d40a:	d12a      	bne.n	800d462 <_dtoa_r+0x626>
 800d40c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d40e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d410:	9a08      	ldr	r2, [sp, #32]
 800d412:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d414:	4694      	mov	ip, r2
 800d416:	4463      	add	r3, ip
 800d418:	2200      	movs	r2, #0
 800d41a:	001d      	movs	r5, r3
 800d41c:	4b3f      	ldr	r3, [pc, #252]	; (800d51c <_dtoa_r+0x6e0>)
 800d41e:	f7f8 fcb1 	bl	8005d84 <__aeabi_dadd>
 800d422:	0002      	movs	r2, r0
 800d424:	000b      	movs	r3, r1
 800d426:	9806      	ldr	r0, [sp, #24]
 800d428:	9907      	ldr	r1, [sp, #28]
 800d42a:	f7f8 f82d 	bl	8005488 <__aeabi_dcmpgt>
 800d42e:	2800      	cmp	r0, #0
 800d430:	d000      	beq.n	800d434 <_dtoa_r+0x5f8>
 800d432:	e076      	b.n	800d522 <_dtoa_r+0x6e6>
 800d434:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d436:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d438:	2000      	movs	r0, #0
 800d43a:	4938      	ldr	r1, [pc, #224]	; (800d51c <_dtoa_r+0x6e0>)
 800d43c:	f7f9 fe3a 	bl	80070b4 <__aeabi_dsub>
 800d440:	0002      	movs	r2, r0
 800d442:	000b      	movs	r3, r1
 800d444:	9806      	ldr	r0, [sp, #24]
 800d446:	9907      	ldr	r1, [sp, #28]
 800d448:	f7f8 f80a 	bl	8005460 <__aeabi_dcmplt>
 800d44c:	2800      	cmp	r0, #0
 800d44e:	d100      	bne.n	800d452 <_dtoa_r+0x616>
 800d450:	e721      	b.n	800d296 <_dtoa_r+0x45a>
 800d452:	1e6b      	subs	r3, r5, #1
 800d454:	781a      	ldrb	r2, [r3, #0]
 800d456:	2a30      	cmp	r2, #48	; 0x30
 800d458:	d001      	beq.n	800d45e <_dtoa_r+0x622>
 800d45a:	0037      	movs	r7, r6
 800d45c:	e03f      	b.n	800d4de <_dtoa_r+0x6a2>
 800d45e:	001d      	movs	r5, r3
 800d460:	e7f7      	b.n	800d452 <_dtoa_r+0x616>
 800d462:	9806      	ldr	r0, [sp, #24]
 800d464:	9907      	ldr	r1, [sp, #28]
 800d466:	2200      	movs	r2, #0
 800d468:	4b26      	ldr	r3, [pc, #152]	; (800d504 <_dtoa_r+0x6c8>)
 800d46a:	f7f9 fbb1 	bl	8006bd0 <__aeabi_dmul>
 800d46e:	9006      	str	r0, [sp, #24]
 800d470:	9107      	str	r1, [sp, #28]
 800d472:	e7b6      	b.n	800d3e2 <_dtoa_r+0x5a6>
 800d474:	9e08      	ldr	r6, [sp, #32]
 800d476:	9a04      	ldr	r2, [sp, #16]
 800d478:	9b05      	ldr	r3, [sp, #20]
 800d47a:	9806      	ldr	r0, [sp, #24]
 800d47c:	9907      	ldr	r1, [sp, #28]
 800d47e:	f7f8 ff9d 	bl	80063bc <__aeabi_ddiv>
 800d482:	f7fa f97b 	bl	800777c <__aeabi_d2iz>
 800d486:	0004      	movs	r4, r0
 800d488:	f7fa f9ae 	bl	80077e8 <__aeabi_i2d>
 800d48c:	9a04      	ldr	r2, [sp, #16]
 800d48e:	9b05      	ldr	r3, [sp, #20]
 800d490:	f7f9 fb9e 	bl	8006bd0 <__aeabi_dmul>
 800d494:	0002      	movs	r2, r0
 800d496:	000b      	movs	r3, r1
 800d498:	9806      	ldr	r0, [sp, #24]
 800d49a:	9907      	ldr	r1, [sp, #28]
 800d49c:	f7f9 fe0a 	bl	80070b4 <__aeabi_dsub>
 800d4a0:	0023      	movs	r3, r4
 800d4a2:	3330      	adds	r3, #48	; 0x30
 800d4a4:	7033      	strb	r3, [r6, #0]
 800d4a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4a8:	9b08      	ldr	r3, [sp, #32]
 800d4aa:	1c75      	adds	r5, r6, #1
 800d4ac:	1aeb      	subs	r3, r5, r3
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d148      	bne.n	800d544 <_dtoa_r+0x708>
 800d4b2:	0002      	movs	r2, r0
 800d4b4:	000b      	movs	r3, r1
 800d4b6:	f7f8 fc65 	bl	8005d84 <__aeabi_dadd>
 800d4ba:	9a04      	ldr	r2, [sp, #16]
 800d4bc:	9b05      	ldr	r3, [sp, #20]
 800d4be:	9006      	str	r0, [sp, #24]
 800d4c0:	9107      	str	r1, [sp, #28]
 800d4c2:	f7f7 ffe1 	bl	8005488 <__aeabi_dcmpgt>
 800d4c6:	2800      	cmp	r0, #0
 800d4c8:	d12a      	bne.n	800d520 <_dtoa_r+0x6e4>
 800d4ca:	9a04      	ldr	r2, [sp, #16]
 800d4cc:	9b05      	ldr	r3, [sp, #20]
 800d4ce:	9806      	ldr	r0, [sp, #24]
 800d4d0:	9907      	ldr	r1, [sp, #28]
 800d4d2:	f7f7 ffbf 	bl	8005454 <__aeabi_dcmpeq>
 800d4d6:	2800      	cmp	r0, #0
 800d4d8:	d001      	beq.n	800d4de <_dtoa_r+0x6a2>
 800d4da:	07e3      	lsls	r3, r4, #31
 800d4dc:	d420      	bmi.n	800d520 <_dtoa_r+0x6e4>
 800d4de:	9903      	ldr	r1, [sp, #12]
 800d4e0:	9802      	ldr	r0, [sp, #8]
 800d4e2:	f000 ff02 	bl	800e2ea <_Bfree>
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	702b      	strb	r3, [r5, #0]
 800d4ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d4ec:	3701      	adds	r7, #1
 800d4ee:	601f      	str	r7, [r3, #0]
 800d4f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d100      	bne.n	800d4f8 <_dtoa_r+0x6bc>
 800d4f6:	e4e6      	b.n	800cec6 <_dtoa_r+0x8a>
 800d4f8:	601d      	str	r5, [r3, #0]
 800d4fa:	e4e4      	b.n	800cec6 <_dtoa_r+0x8a>
 800d4fc:	08010000 	.word	0x08010000
 800d500:	3ff00000 	.word	0x3ff00000
 800d504:	40240000 	.word	0x40240000
 800d508:	401c0000 	.word	0x401c0000
 800d50c:	fcc00000 	.word	0xfcc00000
 800d510:	40140000 	.word	0x40140000
 800d514:	7cc00000 	.word	0x7cc00000
 800d518:	0800ffd8 	.word	0x0800ffd8
 800d51c:	3fe00000 	.word	0x3fe00000
 800d520:	003e      	movs	r6, r7
 800d522:	1e6b      	subs	r3, r5, #1
 800d524:	781a      	ldrb	r2, [r3, #0]
 800d526:	2a39      	cmp	r2, #57	; 0x39
 800d528:	d106      	bne.n	800d538 <_dtoa_r+0x6fc>
 800d52a:	9a08      	ldr	r2, [sp, #32]
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d107      	bne.n	800d540 <_dtoa_r+0x704>
 800d530:	2330      	movs	r3, #48	; 0x30
 800d532:	7013      	strb	r3, [r2, #0]
 800d534:	0013      	movs	r3, r2
 800d536:	3601      	adds	r6, #1
 800d538:	781a      	ldrb	r2, [r3, #0]
 800d53a:	3201      	adds	r2, #1
 800d53c:	701a      	strb	r2, [r3, #0]
 800d53e:	e78c      	b.n	800d45a <_dtoa_r+0x61e>
 800d540:	001d      	movs	r5, r3
 800d542:	e7ee      	b.n	800d522 <_dtoa_r+0x6e6>
 800d544:	2200      	movs	r2, #0
 800d546:	4ba4      	ldr	r3, [pc, #656]	; (800d7d8 <_dtoa_r+0x99c>)
 800d548:	f7f9 fb42 	bl	8006bd0 <__aeabi_dmul>
 800d54c:	2200      	movs	r2, #0
 800d54e:	2300      	movs	r3, #0
 800d550:	9006      	str	r0, [sp, #24]
 800d552:	9107      	str	r1, [sp, #28]
 800d554:	002e      	movs	r6, r5
 800d556:	f7f7 ff7d 	bl	8005454 <__aeabi_dcmpeq>
 800d55a:	2800      	cmp	r0, #0
 800d55c:	d08b      	beq.n	800d476 <_dtoa_r+0x63a>
 800d55e:	e7be      	b.n	800d4de <_dtoa_r+0x6a2>
 800d560:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d562:	2a00      	cmp	r2, #0
 800d564:	d100      	bne.n	800d568 <_dtoa_r+0x72c>
 800d566:	e0da      	b.n	800d71e <_dtoa_r+0x8e2>
 800d568:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d56a:	2a01      	cmp	r2, #1
 800d56c:	dd00      	ble.n	800d570 <_dtoa_r+0x734>
 800d56e:	e0bd      	b.n	800d6ec <_dtoa_r+0x8b0>
 800d570:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d572:	2a00      	cmp	r2, #0
 800d574:	d100      	bne.n	800d578 <_dtoa_r+0x73c>
 800d576:	e0b5      	b.n	800d6e4 <_dtoa_r+0x8a8>
 800d578:	4a98      	ldr	r2, [pc, #608]	; (800d7dc <_dtoa_r+0x9a0>)
 800d57a:	189b      	adds	r3, r3, r2
 800d57c:	9d04      	ldr	r5, [sp, #16]
 800d57e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d580:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d582:	2101      	movs	r1, #1
 800d584:	18d2      	adds	r2, r2, r3
 800d586:	920a      	str	r2, [sp, #40]	; 0x28
 800d588:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d58a:	9802      	ldr	r0, [sp, #8]
 800d58c:	18d3      	adds	r3, r2, r3
 800d58e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d590:	f000 ff89 	bl	800e4a6 <__i2b>
 800d594:	0006      	movs	r6, r0
 800d596:	2c00      	cmp	r4, #0
 800d598:	dd0e      	ble.n	800d5b8 <_dtoa_r+0x77c>
 800d59a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	dd0b      	ble.n	800d5b8 <_dtoa_r+0x77c>
 800d5a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d5a2:	0023      	movs	r3, r4
 800d5a4:	4294      	cmp	r4, r2
 800d5a6:	dd00      	ble.n	800d5aa <_dtoa_r+0x76e>
 800d5a8:	0013      	movs	r3, r2
 800d5aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5ac:	1ae4      	subs	r4, r4, r3
 800d5ae:	1ad2      	subs	r2, r2, r3
 800d5b0:	920a      	str	r2, [sp, #40]	; 0x28
 800d5b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d5b4:	1ad3      	subs	r3, r2, r3
 800d5b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d5b8:	9b04      	ldr	r3, [sp, #16]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d01f      	beq.n	800d5fe <_dtoa_r+0x7c2>
 800d5be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d100      	bne.n	800d5c6 <_dtoa_r+0x78a>
 800d5c4:	e0af      	b.n	800d726 <_dtoa_r+0x8ea>
 800d5c6:	2d00      	cmp	r5, #0
 800d5c8:	d011      	beq.n	800d5ee <_dtoa_r+0x7b2>
 800d5ca:	0031      	movs	r1, r6
 800d5cc:	002a      	movs	r2, r5
 800d5ce:	9802      	ldr	r0, [sp, #8]
 800d5d0:	f001 f802 	bl	800e5d8 <__pow5mult>
 800d5d4:	9a03      	ldr	r2, [sp, #12]
 800d5d6:	0001      	movs	r1, r0
 800d5d8:	0006      	movs	r6, r0
 800d5da:	9802      	ldr	r0, [sp, #8]
 800d5dc:	f000 ff6c 	bl	800e4b8 <__multiply>
 800d5e0:	9903      	ldr	r1, [sp, #12]
 800d5e2:	9010      	str	r0, [sp, #64]	; 0x40
 800d5e4:	9802      	ldr	r0, [sp, #8]
 800d5e6:	f000 fe80 	bl	800e2ea <_Bfree>
 800d5ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d5ec:	9303      	str	r3, [sp, #12]
 800d5ee:	9b04      	ldr	r3, [sp, #16]
 800d5f0:	1b5a      	subs	r2, r3, r5
 800d5f2:	d004      	beq.n	800d5fe <_dtoa_r+0x7c2>
 800d5f4:	9903      	ldr	r1, [sp, #12]
 800d5f6:	9802      	ldr	r0, [sp, #8]
 800d5f8:	f000 ffee 	bl	800e5d8 <__pow5mult>
 800d5fc:	9003      	str	r0, [sp, #12]
 800d5fe:	2101      	movs	r1, #1
 800d600:	9802      	ldr	r0, [sp, #8]
 800d602:	f000 ff50 	bl	800e4a6 <__i2b>
 800d606:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d608:	9004      	str	r0, [sp, #16]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d100      	bne.n	800d610 <_dtoa_r+0x7d4>
 800d60e:	e1e3      	b.n	800d9d8 <_dtoa_r+0xb9c>
 800d610:	001a      	movs	r2, r3
 800d612:	0001      	movs	r1, r0
 800d614:	9802      	ldr	r0, [sp, #8]
 800d616:	f000 ffdf 	bl	800e5d8 <__pow5mult>
 800d61a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d61c:	9004      	str	r0, [sp, #16]
 800d61e:	2b01      	cmp	r3, #1
 800d620:	dd00      	ble.n	800d624 <_dtoa_r+0x7e8>
 800d622:	e082      	b.n	800d72a <_dtoa_r+0x8ee>
 800d624:	2500      	movs	r5, #0
 800d626:	9b06      	ldr	r3, [sp, #24]
 800d628:	42ab      	cmp	r3, r5
 800d62a:	d10e      	bne.n	800d64a <_dtoa_r+0x80e>
 800d62c:	9b07      	ldr	r3, [sp, #28]
 800d62e:	031b      	lsls	r3, r3, #12
 800d630:	42ab      	cmp	r3, r5
 800d632:	d10a      	bne.n	800d64a <_dtoa_r+0x80e>
 800d634:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d636:	9a07      	ldr	r2, [sp, #28]
 800d638:	4213      	tst	r3, r2
 800d63a:	d006      	beq.n	800d64a <_dtoa_r+0x80e>
 800d63c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d63e:	3501      	adds	r5, #1
 800d640:	3301      	adds	r3, #1
 800d642:	930a      	str	r3, [sp, #40]	; 0x28
 800d644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d646:	3301      	adds	r3, #1
 800d648:	930b      	str	r3, [sp, #44]	; 0x2c
 800d64a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d64c:	2001      	movs	r0, #1
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d16c      	bne.n	800d72c <_dtoa_r+0x8f0>
 800d652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d654:	1818      	adds	r0, r3, r0
 800d656:	231f      	movs	r3, #31
 800d658:	4018      	ands	r0, r3
 800d65a:	d07e      	beq.n	800d75a <_dtoa_r+0x91e>
 800d65c:	3301      	adds	r3, #1
 800d65e:	1a1b      	subs	r3, r3, r0
 800d660:	2b04      	cmp	r3, #4
 800d662:	dd70      	ble.n	800d746 <_dtoa_r+0x90a>
 800d664:	231c      	movs	r3, #28
 800d666:	1a18      	subs	r0, r3, r0
 800d668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d66a:	1824      	adds	r4, r4, r0
 800d66c:	181b      	adds	r3, r3, r0
 800d66e:	930a      	str	r3, [sp, #40]	; 0x28
 800d670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d672:	181b      	adds	r3, r3, r0
 800d674:	930b      	str	r3, [sp, #44]	; 0x2c
 800d676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d678:	2b00      	cmp	r3, #0
 800d67a:	dd05      	ble.n	800d688 <_dtoa_r+0x84c>
 800d67c:	001a      	movs	r2, r3
 800d67e:	9903      	ldr	r1, [sp, #12]
 800d680:	9802      	ldr	r0, [sp, #8]
 800d682:	f000 fffb 	bl	800e67c <__lshift>
 800d686:	9003      	str	r0, [sp, #12]
 800d688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	dd05      	ble.n	800d69a <_dtoa_r+0x85e>
 800d68e:	001a      	movs	r2, r3
 800d690:	9904      	ldr	r1, [sp, #16]
 800d692:	9802      	ldr	r0, [sp, #8]
 800d694:	f000 fff2 	bl	800e67c <__lshift>
 800d698:	9004      	str	r0, [sp, #16]
 800d69a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d05e      	beq.n	800d75e <_dtoa_r+0x922>
 800d6a0:	9904      	ldr	r1, [sp, #16]
 800d6a2:	9803      	ldr	r0, [sp, #12]
 800d6a4:	f001 f83c 	bl	800e720 <__mcmp>
 800d6a8:	2800      	cmp	r0, #0
 800d6aa:	da58      	bge.n	800d75e <_dtoa_r+0x922>
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	220a      	movs	r2, #10
 800d6b0:	9903      	ldr	r1, [sp, #12]
 800d6b2:	9802      	ldr	r0, [sp, #8]
 800d6b4:	f000 fe32 	bl	800e31c <__multadd>
 800d6b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6ba:	3f01      	subs	r7, #1
 800d6bc:	9003      	str	r0, [sp, #12]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d100      	bne.n	800d6c4 <_dtoa_r+0x888>
 800d6c2:	e190      	b.n	800d9e6 <_dtoa_r+0xbaa>
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	0031      	movs	r1, r6
 800d6c8:	220a      	movs	r2, #10
 800d6ca:	9802      	ldr	r0, [sp, #8]
 800d6cc:	f000 fe26 	bl	800e31c <__multadd>
 800d6d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d6d2:	0006      	movs	r6, r0
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	dd00      	ble.n	800d6da <_dtoa_r+0x89e>
 800d6d8:	e088      	b.n	800d7ec <_dtoa_r+0x9b0>
 800d6da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d6dc:	2b02      	cmp	r3, #2
 800d6de:	dc00      	bgt.n	800d6e2 <_dtoa_r+0x8a6>
 800d6e0:	e084      	b.n	800d7ec <_dtoa_r+0x9b0>
 800d6e2:	e044      	b.n	800d76e <_dtoa_r+0x932>
 800d6e4:	2336      	movs	r3, #54	; 0x36
 800d6e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d6e8:	1a9b      	subs	r3, r3, r2
 800d6ea:	e747      	b.n	800d57c <_dtoa_r+0x740>
 800d6ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6ee:	1e5d      	subs	r5, r3, #1
 800d6f0:	9b04      	ldr	r3, [sp, #16]
 800d6f2:	42ab      	cmp	r3, r5
 800d6f4:	db08      	blt.n	800d708 <_dtoa_r+0x8cc>
 800d6f6:	1b5d      	subs	r5, r3, r5
 800d6f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	da0c      	bge.n	800d718 <_dtoa_r+0x8dc>
 800d6fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d700:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d702:	1a9c      	subs	r4, r3, r2
 800d704:	2300      	movs	r3, #0
 800d706:	e73b      	b.n	800d580 <_dtoa_r+0x744>
 800d708:	9b04      	ldr	r3, [sp, #16]
 800d70a:	9504      	str	r5, [sp, #16]
 800d70c:	1aea      	subs	r2, r5, r3
 800d70e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d710:	2500      	movs	r5, #0
 800d712:	189b      	adds	r3, r3, r2
 800d714:	9311      	str	r3, [sp, #68]	; 0x44
 800d716:	e7ef      	b.n	800d6f8 <_dtoa_r+0x8bc>
 800d718:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d71c:	e730      	b.n	800d580 <_dtoa_r+0x744>
 800d71e:	9d04      	ldr	r5, [sp, #16]
 800d720:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d722:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800d724:	e737      	b.n	800d596 <_dtoa_r+0x75a>
 800d726:	9a04      	ldr	r2, [sp, #16]
 800d728:	e764      	b.n	800d5f4 <_dtoa_r+0x7b8>
 800d72a:	2500      	movs	r5, #0
 800d72c:	9b04      	ldr	r3, [sp, #16]
 800d72e:	9a04      	ldr	r2, [sp, #16]
 800d730:	691b      	ldr	r3, [r3, #16]
 800d732:	9310      	str	r3, [sp, #64]	; 0x40
 800d734:	3303      	adds	r3, #3
 800d736:	009b      	lsls	r3, r3, #2
 800d738:	18d3      	adds	r3, r2, r3
 800d73a:	6858      	ldr	r0, [r3, #4]
 800d73c:	f000 fe6a 	bl	800e414 <__hi0bits>
 800d740:	2320      	movs	r3, #32
 800d742:	1a18      	subs	r0, r3, r0
 800d744:	e785      	b.n	800d652 <_dtoa_r+0x816>
 800d746:	2b04      	cmp	r3, #4
 800d748:	d095      	beq.n	800d676 <_dtoa_r+0x83a>
 800d74a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d74c:	331c      	adds	r3, #28
 800d74e:	18d2      	adds	r2, r2, r3
 800d750:	920a      	str	r2, [sp, #40]	; 0x28
 800d752:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d754:	18e4      	adds	r4, r4, r3
 800d756:	18d3      	adds	r3, r2, r3
 800d758:	e78c      	b.n	800d674 <_dtoa_r+0x838>
 800d75a:	0003      	movs	r3, r0
 800d75c:	e7f5      	b.n	800d74a <_dtoa_r+0x90e>
 800d75e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d760:	2b00      	cmp	r3, #0
 800d762:	dc3d      	bgt.n	800d7e0 <_dtoa_r+0x9a4>
 800d764:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d766:	2b02      	cmp	r3, #2
 800d768:	dd3a      	ble.n	800d7e0 <_dtoa_r+0x9a4>
 800d76a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d76c:	930c      	str	r3, [sp, #48]	; 0x30
 800d76e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d770:	2b00      	cmp	r3, #0
 800d772:	d10c      	bne.n	800d78e <_dtoa_r+0x952>
 800d774:	9904      	ldr	r1, [sp, #16]
 800d776:	2205      	movs	r2, #5
 800d778:	9802      	ldr	r0, [sp, #8]
 800d77a:	f000 fdcf 	bl	800e31c <__multadd>
 800d77e:	9004      	str	r0, [sp, #16]
 800d780:	0001      	movs	r1, r0
 800d782:	9803      	ldr	r0, [sp, #12]
 800d784:	f000 ffcc 	bl	800e720 <__mcmp>
 800d788:	2800      	cmp	r0, #0
 800d78a:	dd00      	ble.n	800d78e <_dtoa_r+0x952>
 800d78c:	e5af      	b.n	800d2ee <_dtoa_r+0x4b2>
 800d78e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d790:	9d08      	ldr	r5, [sp, #32]
 800d792:	43df      	mvns	r7, r3
 800d794:	2300      	movs	r3, #0
 800d796:	9309      	str	r3, [sp, #36]	; 0x24
 800d798:	9904      	ldr	r1, [sp, #16]
 800d79a:	9802      	ldr	r0, [sp, #8]
 800d79c:	f000 fda5 	bl	800e2ea <_Bfree>
 800d7a0:	2e00      	cmp	r6, #0
 800d7a2:	d100      	bne.n	800d7a6 <_dtoa_r+0x96a>
 800d7a4:	e69b      	b.n	800d4de <_dtoa_r+0x6a2>
 800d7a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d005      	beq.n	800d7b8 <_dtoa_r+0x97c>
 800d7ac:	42b3      	cmp	r3, r6
 800d7ae:	d003      	beq.n	800d7b8 <_dtoa_r+0x97c>
 800d7b0:	0019      	movs	r1, r3
 800d7b2:	9802      	ldr	r0, [sp, #8]
 800d7b4:	f000 fd99 	bl	800e2ea <_Bfree>
 800d7b8:	0031      	movs	r1, r6
 800d7ba:	9802      	ldr	r0, [sp, #8]
 800d7bc:	f000 fd95 	bl	800e2ea <_Bfree>
 800d7c0:	e68d      	b.n	800d4de <_dtoa_r+0x6a2>
 800d7c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d7c4:	9304      	str	r3, [sp, #16]
 800d7c6:	001e      	movs	r6, r3
 800d7c8:	e7e1      	b.n	800d78e <_dtoa_r+0x952>
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	e7fa      	b.n	800d7c4 <_dtoa_r+0x988>
 800d7ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d7d0:	0037      	movs	r7, r6
 800d7d2:	9304      	str	r3, [sp, #16]
 800d7d4:	001e      	movs	r6, r3
 800d7d6:	e58a      	b.n	800d2ee <_dtoa_r+0x4b2>
 800d7d8:	40240000 	.word	0x40240000
 800d7dc:	00000433 	.word	0x00000433
 800d7e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d100      	bne.n	800d7e8 <_dtoa_r+0x9ac>
 800d7e6:	e0b2      	b.n	800d94e <_dtoa_r+0xb12>
 800d7e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7ea:	930c      	str	r3, [sp, #48]	; 0x30
 800d7ec:	2c00      	cmp	r4, #0
 800d7ee:	dd05      	ble.n	800d7fc <_dtoa_r+0x9c0>
 800d7f0:	0031      	movs	r1, r6
 800d7f2:	0022      	movs	r2, r4
 800d7f4:	9802      	ldr	r0, [sp, #8]
 800d7f6:	f000 ff41 	bl	800e67c <__lshift>
 800d7fa:	0006      	movs	r6, r0
 800d7fc:	0030      	movs	r0, r6
 800d7fe:	2d00      	cmp	r5, #0
 800d800:	d011      	beq.n	800d826 <_dtoa_r+0x9ea>
 800d802:	6871      	ldr	r1, [r6, #4]
 800d804:	9802      	ldr	r0, [sp, #8]
 800d806:	f000 fd38 	bl	800e27a <_Balloc>
 800d80a:	0031      	movs	r1, r6
 800d80c:	0004      	movs	r4, r0
 800d80e:	6933      	ldr	r3, [r6, #16]
 800d810:	310c      	adds	r1, #12
 800d812:	1c9a      	adds	r2, r3, #2
 800d814:	0092      	lsls	r2, r2, #2
 800d816:	300c      	adds	r0, #12
 800d818:	f7fd fcff 	bl	800b21a <memcpy>
 800d81c:	2201      	movs	r2, #1
 800d81e:	0021      	movs	r1, r4
 800d820:	9802      	ldr	r0, [sp, #8]
 800d822:	f000 ff2b 	bl	800e67c <__lshift>
 800d826:	9609      	str	r6, [sp, #36]	; 0x24
 800d828:	0006      	movs	r6, r0
 800d82a:	9b08      	ldr	r3, [sp, #32]
 800d82c:	930a      	str	r3, [sp, #40]	; 0x28
 800d82e:	9904      	ldr	r1, [sp, #16]
 800d830:	9803      	ldr	r0, [sp, #12]
 800d832:	f7ff fa7d 	bl	800cd30 <quorem>
 800d836:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d838:	900d      	str	r0, [sp, #52]	; 0x34
 800d83a:	0004      	movs	r4, r0
 800d83c:	9803      	ldr	r0, [sp, #12]
 800d83e:	f000 ff6f 	bl	800e720 <__mcmp>
 800d842:	0032      	movs	r2, r6
 800d844:	9010      	str	r0, [sp, #64]	; 0x40
 800d846:	9904      	ldr	r1, [sp, #16]
 800d848:	9802      	ldr	r0, [sp, #8]
 800d84a:	f000 ff83 	bl	800e754 <__mdiff>
 800d84e:	2301      	movs	r3, #1
 800d850:	930b      	str	r3, [sp, #44]	; 0x2c
 800d852:	68c3      	ldr	r3, [r0, #12]
 800d854:	3430      	adds	r4, #48	; 0x30
 800d856:	0005      	movs	r5, r0
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d104      	bne.n	800d866 <_dtoa_r+0xa2a>
 800d85c:	0001      	movs	r1, r0
 800d85e:	9803      	ldr	r0, [sp, #12]
 800d860:	f000 ff5e 	bl	800e720 <__mcmp>
 800d864:	900b      	str	r0, [sp, #44]	; 0x2c
 800d866:	0029      	movs	r1, r5
 800d868:	9802      	ldr	r0, [sp, #8]
 800d86a:	f000 fd3e 	bl	800e2ea <_Bfree>
 800d86e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d870:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d872:	4313      	orrs	r3, r2
 800d874:	d10e      	bne.n	800d894 <_dtoa_r+0xa58>
 800d876:	9a06      	ldr	r2, [sp, #24]
 800d878:	3301      	adds	r3, #1
 800d87a:	4213      	tst	r3, r2
 800d87c:	d10a      	bne.n	800d894 <_dtoa_r+0xa58>
 800d87e:	2c39      	cmp	r4, #57	; 0x39
 800d880:	d026      	beq.n	800d8d0 <_dtoa_r+0xa94>
 800d882:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d884:	2b00      	cmp	r3, #0
 800d886:	dd01      	ble.n	800d88c <_dtoa_r+0xa50>
 800d888:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800d88a:	3431      	adds	r4, #49	; 0x31
 800d88c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d88e:	1c5d      	adds	r5, r3, #1
 800d890:	701c      	strb	r4, [r3, #0]
 800d892:	e781      	b.n	800d798 <_dtoa_r+0x95c>
 800d894:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d896:	2b00      	cmp	r3, #0
 800d898:	db07      	blt.n	800d8aa <_dtoa_r+0xa6e>
 800d89a:	001d      	movs	r5, r3
 800d89c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d89e:	431d      	orrs	r5, r3
 800d8a0:	d122      	bne.n	800d8e8 <_dtoa_r+0xaac>
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	9a06      	ldr	r2, [sp, #24]
 800d8a6:	4213      	tst	r3, r2
 800d8a8:	d11e      	bne.n	800d8e8 <_dtoa_r+0xaac>
 800d8aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	dded      	ble.n	800d88c <_dtoa_r+0xa50>
 800d8b0:	9903      	ldr	r1, [sp, #12]
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	9802      	ldr	r0, [sp, #8]
 800d8b6:	f000 fee1 	bl	800e67c <__lshift>
 800d8ba:	9904      	ldr	r1, [sp, #16]
 800d8bc:	9003      	str	r0, [sp, #12]
 800d8be:	f000 ff2f 	bl	800e720 <__mcmp>
 800d8c2:	2800      	cmp	r0, #0
 800d8c4:	dc02      	bgt.n	800d8cc <_dtoa_r+0xa90>
 800d8c6:	d1e1      	bne.n	800d88c <_dtoa_r+0xa50>
 800d8c8:	07e3      	lsls	r3, r4, #31
 800d8ca:	d5df      	bpl.n	800d88c <_dtoa_r+0xa50>
 800d8cc:	2c39      	cmp	r4, #57	; 0x39
 800d8ce:	d1db      	bne.n	800d888 <_dtoa_r+0xa4c>
 800d8d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8d4:	1c5d      	adds	r5, r3, #1
 800d8d6:	2339      	movs	r3, #57	; 0x39
 800d8d8:	7013      	strb	r3, [r2, #0]
 800d8da:	1e6b      	subs	r3, r5, #1
 800d8dc:	781a      	ldrb	r2, [r3, #0]
 800d8de:	2a39      	cmp	r2, #57	; 0x39
 800d8e0:	d067      	beq.n	800d9b2 <_dtoa_r+0xb76>
 800d8e2:	3201      	adds	r2, #1
 800d8e4:	701a      	strb	r2, [r3, #0]
 800d8e6:	e757      	b.n	800d798 <_dtoa_r+0x95c>
 800d8e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8ea:	1c5d      	adds	r5, r3, #1
 800d8ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	dd04      	ble.n	800d8fc <_dtoa_r+0xac0>
 800d8f2:	2c39      	cmp	r4, #57	; 0x39
 800d8f4:	d0ec      	beq.n	800d8d0 <_dtoa_r+0xa94>
 800d8f6:	3401      	adds	r4, #1
 800d8f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8fa:	e7c9      	b.n	800d890 <_dtoa_r+0xa54>
 800d8fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d900:	701c      	strb	r4, [r3, #0]
 800d902:	9b08      	ldr	r3, [sp, #32]
 800d904:	1aeb      	subs	r3, r5, r3
 800d906:	4293      	cmp	r3, r2
 800d908:	d03e      	beq.n	800d988 <_dtoa_r+0xb4c>
 800d90a:	2300      	movs	r3, #0
 800d90c:	220a      	movs	r2, #10
 800d90e:	9903      	ldr	r1, [sp, #12]
 800d910:	9802      	ldr	r0, [sp, #8]
 800d912:	f000 fd03 	bl	800e31c <__multadd>
 800d916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d918:	9003      	str	r0, [sp, #12]
 800d91a:	42b3      	cmp	r3, r6
 800d91c:	d109      	bne.n	800d932 <_dtoa_r+0xaf6>
 800d91e:	2300      	movs	r3, #0
 800d920:	220a      	movs	r2, #10
 800d922:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d924:	9802      	ldr	r0, [sp, #8]
 800d926:	f000 fcf9 	bl	800e31c <__multadd>
 800d92a:	9009      	str	r0, [sp, #36]	; 0x24
 800d92c:	0006      	movs	r6, r0
 800d92e:	950a      	str	r5, [sp, #40]	; 0x28
 800d930:	e77d      	b.n	800d82e <_dtoa_r+0x9f2>
 800d932:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d934:	2300      	movs	r3, #0
 800d936:	220a      	movs	r2, #10
 800d938:	9802      	ldr	r0, [sp, #8]
 800d93a:	f000 fcef 	bl	800e31c <__multadd>
 800d93e:	2300      	movs	r3, #0
 800d940:	9009      	str	r0, [sp, #36]	; 0x24
 800d942:	220a      	movs	r2, #10
 800d944:	0031      	movs	r1, r6
 800d946:	9802      	ldr	r0, [sp, #8]
 800d948:	f000 fce8 	bl	800e31c <__multadd>
 800d94c:	e7ee      	b.n	800d92c <_dtoa_r+0xaf0>
 800d94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d950:	930c      	str	r3, [sp, #48]	; 0x30
 800d952:	9b08      	ldr	r3, [sp, #32]
 800d954:	9306      	str	r3, [sp, #24]
 800d956:	9904      	ldr	r1, [sp, #16]
 800d958:	9803      	ldr	r0, [sp, #12]
 800d95a:	f7ff f9e9 	bl	800cd30 <quorem>
 800d95e:	9b06      	ldr	r3, [sp, #24]
 800d960:	3030      	adds	r0, #48	; 0x30
 800d962:	1c5d      	adds	r5, r3, #1
 800d964:	7018      	strb	r0, [r3, #0]
 800d966:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d968:	9b08      	ldr	r3, [sp, #32]
 800d96a:	0004      	movs	r4, r0
 800d96c:	1aeb      	subs	r3, r5, r3
 800d96e:	429a      	cmp	r2, r3
 800d970:	dd08      	ble.n	800d984 <_dtoa_r+0xb48>
 800d972:	2300      	movs	r3, #0
 800d974:	220a      	movs	r2, #10
 800d976:	9903      	ldr	r1, [sp, #12]
 800d978:	9802      	ldr	r0, [sp, #8]
 800d97a:	f000 fccf 	bl	800e31c <__multadd>
 800d97e:	9506      	str	r5, [sp, #24]
 800d980:	9003      	str	r0, [sp, #12]
 800d982:	e7e8      	b.n	800d956 <_dtoa_r+0xb1a>
 800d984:	2300      	movs	r3, #0
 800d986:	9309      	str	r3, [sp, #36]	; 0x24
 800d988:	9903      	ldr	r1, [sp, #12]
 800d98a:	2201      	movs	r2, #1
 800d98c:	9802      	ldr	r0, [sp, #8]
 800d98e:	f000 fe75 	bl	800e67c <__lshift>
 800d992:	9904      	ldr	r1, [sp, #16]
 800d994:	9003      	str	r0, [sp, #12]
 800d996:	f000 fec3 	bl	800e720 <__mcmp>
 800d99a:	2800      	cmp	r0, #0
 800d99c:	dc9d      	bgt.n	800d8da <_dtoa_r+0xa9e>
 800d99e:	d101      	bne.n	800d9a4 <_dtoa_r+0xb68>
 800d9a0:	07e3      	lsls	r3, r4, #31
 800d9a2:	d49a      	bmi.n	800d8da <_dtoa_r+0xa9e>
 800d9a4:	1e6b      	subs	r3, r5, #1
 800d9a6:	781a      	ldrb	r2, [r3, #0]
 800d9a8:	2a30      	cmp	r2, #48	; 0x30
 800d9aa:	d000      	beq.n	800d9ae <_dtoa_r+0xb72>
 800d9ac:	e6f4      	b.n	800d798 <_dtoa_r+0x95c>
 800d9ae:	001d      	movs	r5, r3
 800d9b0:	e7f8      	b.n	800d9a4 <_dtoa_r+0xb68>
 800d9b2:	9a08      	ldr	r2, [sp, #32]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d103      	bne.n	800d9c0 <_dtoa_r+0xb84>
 800d9b8:	2331      	movs	r3, #49	; 0x31
 800d9ba:	3701      	adds	r7, #1
 800d9bc:	7013      	strb	r3, [r2, #0]
 800d9be:	e6eb      	b.n	800d798 <_dtoa_r+0x95c>
 800d9c0:	001d      	movs	r5, r3
 800d9c2:	e78a      	b.n	800d8da <_dtoa_r+0xa9e>
 800d9c4:	4b0b      	ldr	r3, [pc, #44]	; (800d9f4 <_dtoa_r+0xbb8>)
 800d9c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d9c8:	9308      	str	r3, [sp, #32]
 800d9ca:	4b0b      	ldr	r3, [pc, #44]	; (800d9f8 <_dtoa_r+0xbbc>)
 800d9cc:	2a00      	cmp	r2, #0
 800d9ce:	d001      	beq.n	800d9d4 <_dtoa_r+0xb98>
 800d9d0:	f7ff fa77 	bl	800cec2 <_dtoa_r+0x86>
 800d9d4:	f7ff fa77 	bl	800cec6 <_dtoa_r+0x8a>
 800d9d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d9da:	2b01      	cmp	r3, #1
 800d9dc:	dc00      	bgt.n	800d9e0 <_dtoa_r+0xba4>
 800d9de:	e621      	b.n	800d624 <_dtoa_r+0x7e8>
 800d9e0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800d9e2:	2001      	movs	r0, #1
 800d9e4:	e635      	b.n	800d652 <_dtoa_r+0x816>
 800d9e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	dcb2      	bgt.n	800d952 <_dtoa_r+0xb16>
 800d9ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d9ee:	2b02      	cmp	r3, #2
 800d9f0:	ddaf      	ble.n	800d952 <_dtoa_r+0xb16>
 800d9f2:	e6bc      	b.n	800d76e <_dtoa_r+0x932>
 800d9f4:	0800ff58 	.word	0x0800ff58
 800d9f8:	0800ff60 	.word	0x0800ff60

0800d9fc <std>:
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	b510      	push	{r4, lr}
 800da00:	0004      	movs	r4, r0
 800da02:	6003      	str	r3, [r0, #0]
 800da04:	6043      	str	r3, [r0, #4]
 800da06:	6083      	str	r3, [r0, #8]
 800da08:	8181      	strh	r1, [r0, #12]
 800da0a:	6643      	str	r3, [r0, #100]	; 0x64
 800da0c:	81c2      	strh	r2, [r0, #14]
 800da0e:	6103      	str	r3, [r0, #16]
 800da10:	6143      	str	r3, [r0, #20]
 800da12:	6183      	str	r3, [r0, #24]
 800da14:	0019      	movs	r1, r3
 800da16:	2208      	movs	r2, #8
 800da18:	305c      	adds	r0, #92	; 0x5c
 800da1a:	f7fd fc07 	bl	800b22c <memset>
 800da1e:	4b05      	ldr	r3, [pc, #20]	; (800da34 <std+0x38>)
 800da20:	6224      	str	r4, [r4, #32]
 800da22:	6263      	str	r3, [r4, #36]	; 0x24
 800da24:	4b04      	ldr	r3, [pc, #16]	; (800da38 <std+0x3c>)
 800da26:	62a3      	str	r3, [r4, #40]	; 0x28
 800da28:	4b04      	ldr	r3, [pc, #16]	; (800da3c <std+0x40>)
 800da2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800da2c:	4b04      	ldr	r3, [pc, #16]	; (800da40 <std+0x44>)
 800da2e:	6323      	str	r3, [r4, #48]	; 0x30
 800da30:	bd10      	pop	{r4, pc}
 800da32:	46c0      	nop			; (mov r8, r8)
 800da34:	0800f135 	.word	0x0800f135
 800da38:	0800f15d 	.word	0x0800f15d
 800da3c:	0800f195 	.word	0x0800f195
 800da40:	0800f1c1 	.word	0x0800f1c1

0800da44 <_cleanup_r>:
 800da44:	b510      	push	{r4, lr}
 800da46:	4902      	ldr	r1, [pc, #8]	; (800da50 <_cleanup_r+0xc>)
 800da48:	f000 f88c 	bl	800db64 <_fwalk_reent>
 800da4c:	bd10      	pop	{r4, pc}
 800da4e:	46c0      	nop			; (mov r8, r8)
 800da50:	0800f501 	.word	0x0800f501

0800da54 <__sfmoreglue>:
 800da54:	b570      	push	{r4, r5, r6, lr}
 800da56:	2568      	movs	r5, #104	; 0x68
 800da58:	1e4a      	subs	r2, r1, #1
 800da5a:	4355      	muls	r5, r2
 800da5c:	000e      	movs	r6, r1
 800da5e:	0029      	movs	r1, r5
 800da60:	3174      	adds	r1, #116	; 0x74
 800da62:	f001 f859 	bl	800eb18 <_malloc_r>
 800da66:	1e04      	subs	r4, r0, #0
 800da68:	d008      	beq.n	800da7c <__sfmoreglue+0x28>
 800da6a:	2100      	movs	r1, #0
 800da6c:	002a      	movs	r2, r5
 800da6e:	6001      	str	r1, [r0, #0]
 800da70:	6046      	str	r6, [r0, #4]
 800da72:	300c      	adds	r0, #12
 800da74:	60a0      	str	r0, [r4, #8]
 800da76:	3268      	adds	r2, #104	; 0x68
 800da78:	f7fd fbd8 	bl	800b22c <memset>
 800da7c:	0020      	movs	r0, r4
 800da7e:	bd70      	pop	{r4, r5, r6, pc}

0800da80 <__sinit>:
 800da80:	6983      	ldr	r3, [r0, #24]
 800da82:	b513      	push	{r0, r1, r4, lr}
 800da84:	0004      	movs	r4, r0
 800da86:	2b00      	cmp	r3, #0
 800da88:	d128      	bne.n	800dadc <__sinit+0x5c>
 800da8a:	6483      	str	r3, [r0, #72]	; 0x48
 800da8c:	64c3      	str	r3, [r0, #76]	; 0x4c
 800da8e:	6503      	str	r3, [r0, #80]	; 0x50
 800da90:	4b13      	ldr	r3, [pc, #76]	; (800dae0 <__sinit+0x60>)
 800da92:	4a14      	ldr	r2, [pc, #80]	; (800dae4 <__sinit+0x64>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	6282      	str	r2, [r0, #40]	; 0x28
 800da98:	9301      	str	r3, [sp, #4]
 800da9a:	4298      	cmp	r0, r3
 800da9c:	d101      	bne.n	800daa2 <__sinit+0x22>
 800da9e:	2301      	movs	r3, #1
 800daa0:	6183      	str	r3, [r0, #24]
 800daa2:	0020      	movs	r0, r4
 800daa4:	f000 f820 	bl	800dae8 <__sfp>
 800daa8:	6060      	str	r0, [r4, #4]
 800daaa:	0020      	movs	r0, r4
 800daac:	f000 f81c 	bl	800dae8 <__sfp>
 800dab0:	60a0      	str	r0, [r4, #8]
 800dab2:	0020      	movs	r0, r4
 800dab4:	f000 f818 	bl	800dae8 <__sfp>
 800dab8:	2200      	movs	r2, #0
 800daba:	60e0      	str	r0, [r4, #12]
 800dabc:	2104      	movs	r1, #4
 800dabe:	6860      	ldr	r0, [r4, #4]
 800dac0:	f7ff ff9c 	bl	800d9fc <std>
 800dac4:	2201      	movs	r2, #1
 800dac6:	2109      	movs	r1, #9
 800dac8:	68a0      	ldr	r0, [r4, #8]
 800daca:	f7ff ff97 	bl	800d9fc <std>
 800dace:	2202      	movs	r2, #2
 800dad0:	2112      	movs	r1, #18
 800dad2:	68e0      	ldr	r0, [r4, #12]
 800dad4:	f7ff ff92 	bl	800d9fc <std>
 800dad8:	2301      	movs	r3, #1
 800dada:	61a3      	str	r3, [r4, #24]
 800dadc:	bd13      	pop	{r0, r1, r4, pc}
 800dade:	46c0      	nop			; (mov r8, r8)
 800dae0:	0800fec4 	.word	0x0800fec4
 800dae4:	0800da45 	.word	0x0800da45

0800dae8 <__sfp>:
 800dae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daea:	4b1c      	ldr	r3, [pc, #112]	; (800db5c <__sfp+0x74>)
 800daec:	0007      	movs	r7, r0
 800daee:	681e      	ldr	r6, [r3, #0]
 800daf0:	69b3      	ldr	r3, [r6, #24]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d102      	bne.n	800dafc <__sfp+0x14>
 800daf6:	0030      	movs	r0, r6
 800daf8:	f7ff ffc2 	bl	800da80 <__sinit>
 800dafc:	3648      	adds	r6, #72	; 0x48
 800dafe:	68b4      	ldr	r4, [r6, #8]
 800db00:	6873      	ldr	r3, [r6, #4]
 800db02:	3b01      	subs	r3, #1
 800db04:	d504      	bpl.n	800db10 <__sfp+0x28>
 800db06:	6833      	ldr	r3, [r6, #0]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d007      	beq.n	800db1c <__sfp+0x34>
 800db0c:	6836      	ldr	r6, [r6, #0]
 800db0e:	e7f6      	b.n	800dafe <__sfp+0x16>
 800db10:	220c      	movs	r2, #12
 800db12:	5ea5      	ldrsh	r5, [r4, r2]
 800db14:	2d00      	cmp	r5, #0
 800db16:	d00d      	beq.n	800db34 <__sfp+0x4c>
 800db18:	3468      	adds	r4, #104	; 0x68
 800db1a:	e7f2      	b.n	800db02 <__sfp+0x1a>
 800db1c:	2104      	movs	r1, #4
 800db1e:	0038      	movs	r0, r7
 800db20:	f7ff ff98 	bl	800da54 <__sfmoreglue>
 800db24:	6030      	str	r0, [r6, #0]
 800db26:	2800      	cmp	r0, #0
 800db28:	d1f0      	bne.n	800db0c <__sfp+0x24>
 800db2a:	230c      	movs	r3, #12
 800db2c:	0004      	movs	r4, r0
 800db2e:	603b      	str	r3, [r7, #0]
 800db30:	0020      	movs	r0, r4
 800db32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db34:	0020      	movs	r0, r4
 800db36:	4b0a      	ldr	r3, [pc, #40]	; (800db60 <__sfp+0x78>)
 800db38:	6665      	str	r5, [r4, #100]	; 0x64
 800db3a:	6025      	str	r5, [r4, #0]
 800db3c:	6065      	str	r5, [r4, #4]
 800db3e:	60a5      	str	r5, [r4, #8]
 800db40:	60e3      	str	r3, [r4, #12]
 800db42:	6125      	str	r5, [r4, #16]
 800db44:	6165      	str	r5, [r4, #20]
 800db46:	61a5      	str	r5, [r4, #24]
 800db48:	2208      	movs	r2, #8
 800db4a:	0029      	movs	r1, r5
 800db4c:	305c      	adds	r0, #92	; 0x5c
 800db4e:	f7fd fb6d 	bl	800b22c <memset>
 800db52:	6365      	str	r5, [r4, #52]	; 0x34
 800db54:	63a5      	str	r5, [r4, #56]	; 0x38
 800db56:	64a5      	str	r5, [r4, #72]	; 0x48
 800db58:	64e5      	str	r5, [r4, #76]	; 0x4c
 800db5a:	e7e9      	b.n	800db30 <__sfp+0x48>
 800db5c:	0800fec4 	.word	0x0800fec4
 800db60:	ffff0001 	.word	0xffff0001

0800db64 <_fwalk_reent>:
 800db64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db66:	0004      	movs	r4, r0
 800db68:	0007      	movs	r7, r0
 800db6a:	2600      	movs	r6, #0
 800db6c:	9101      	str	r1, [sp, #4]
 800db6e:	3448      	adds	r4, #72	; 0x48
 800db70:	2c00      	cmp	r4, #0
 800db72:	d101      	bne.n	800db78 <_fwalk_reent+0x14>
 800db74:	0030      	movs	r0, r6
 800db76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800db78:	6863      	ldr	r3, [r4, #4]
 800db7a:	68a5      	ldr	r5, [r4, #8]
 800db7c:	9300      	str	r3, [sp, #0]
 800db7e:	9b00      	ldr	r3, [sp, #0]
 800db80:	3b01      	subs	r3, #1
 800db82:	9300      	str	r3, [sp, #0]
 800db84:	d501      	bpl.n	800db8a <_fwalk_reent+0x26>
 800db86:	6824      	ldr	r4, [r4, #0]
 800db88:	e7f2      	b.n	800db70 <_fwalk_reent+0xc>
 800db8a:	89ab      	ldrh	r3, [r5, #12]
 800db8c:	2b01      	cmp	r3, #1
 800db8e:	d908      	bls.n	800dba2 <_fwalk_reent+0x3e>
 800db90:	220e      	movs	r2, #14
 800db92:	5eab      	ldrsh	r3, [r5, r2]
 800db94:	3301      	adds	r3, #1
 800db96:	d004      	beq.n	800dba2 <_fwalk_reent+0x3e>
 800db98:	0029      	movs	r1, r5
 800db9a:	0038      	movs	r0, r7
 800db9c:	9b01      	ldr	r3, [sp, #4]
 800db9e:	4798      	blx	r3
 800dba0:	4306      	orrs	r6, r0
 800dba2:	3568      	adds	r5, #104	; 0x68
 800dba4:	e7eb      	b.n	800db7e <_fwalk_reent+0x1a>

0800dba6 <rshift>:
 800dba6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dba8:	0004      	movs	r4, r0
 800dbaa:	6905      	ldr	r5, [r0, #16]
 800dbac:	3414      	adds	r4, #20
 800dbae:	114b      	asrs	r3, r1, #5
 800dbb0:	0026      	movs	r6, r4
 800dbb2:	429d      	cmp	r5, r3
 800dbb4:	dd14      	ble.n	800dbe0 <rshift+0x3a>
 800dbb6:	221f      	movs	r2, #31
 800dbb8:	00ad      	lsls	r5, r5, #2
 800dbba:	009b      	lsls	r3, r3, #2
 800dbbc:	4011      	ands	r1, r2
 800dbbe:	1965      	adds	r5, r4, r5
 800dbc0:	18e3      	adds	r3, r4, r3
 800dbc2:	0022      	movs	r2, r4
 800dbc4:	2900      	cmp	r1, #0
 800dbc6:	d01e      	beq.n	800dc06 <rshift+0x60>
 800dbc8:	cb04      	ldmia	r3!, {r2}
 800dbca:	2720      	movs	r7, #32
 800dbcc:	40ca      	lsrs	r2, r1
 800dbce:	46a4      	mov	ip, r4
 800dbd0:	1a7f      	subs	r7, r7, r1
 800dbd2:	4666      	mov	r6, ip
 800dbd4:	429d      	cmp	r5, r3
 800dbd6:	d80b      	bhi.n	800dbf0 <rshift+0x4a>
 800dbd8:	6032      	str	r2, [r6, #0]
 800dbda:	2a00      	cmp	r2, #0
 800dbdc:	d000      	beq.n	800dbe0 <rshift+0x3a>
 800dbde:	3604      	adds	r6, #4
 800dbe0:	1b33      	subs	r3, r6, r4
 800dbe2:	109b      	asrs	r3, r3, #2
 800dbe4:	6103      	str	r3, [r0, #16]
 800dbe6:	42a6      	cmp	r6, r4
 800dbe8:	d101      	bne.n	800dbee <rshift+0x48>
 800dbea:	2300      	movs	r3, #0
 800dbec:	6143      	str	r3, [r0, #20]
 800dbee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbf0:	681e      	ldr	r6, [r3, #0]
 800dbf2:	40be      	lsls	r6, r7
 800dbf4:	4332      	orrs	r2, r6
 800dbf6:	4666      	mov	r6, ip
 800dbf8:	c604      	stmia	r6!, {r2}
 800dbfa:	cb04      	ldmia	r3!, {r2}
 800dbfc:	46b4      	mov	ip, r6
 800dbfe:	40ca      	lsrs	r2, r1
 800dc00:	e7e7      	b.n	800dbd2 <rshift+0x2c>
 800dc02:	cb02      	ldmia	r3!, {r1}
 800dc04:	c202      	stmia	r2!, {r1}
 800dc06:	0016      	movs	r6, r2
 800dc08:	429d      	cmp	r5, r3
 800dc0a:	d8fa      	bhi.n	800dc02 <rshift+0x5c>
 800dc0c:	e7e8      	b.n	800dbe0 <rshift+0x3a>

0800dc0e <__hexdig_fun>:
 800dc0e:	0003      	movs	r3, r0
 800dc10:	3b30      	subs	r3, #48	; 0x30
 800dc12:	2b09      	cmp	r3, #9
 800dc14:	d803      	bhi.n	800dc1e <__hexdig_fun+0x10>
 800dc16:	3820      	subs	r0, #32
 800dc18:	b2c3      	uxtb	r3, r0
 800dc1a:	0018      	movs	r0, r3
 800dc1c:	4770      	bx	lr
 800dc1e:	0003      	movs	r3, r0
 800dc20:	3b61      	subs	r3, #97	; 0x61
 800dc22:	2b05      	cmp	r3, #5
 800dc24:	d801      	bhi.n	800dc2a <__hexdig_fun+0x1c>
 800dc26:	3847      	subs	r0, #71	; 0x47
 800dc28:	e7f6      	b.n	800dc18 <__hexdig_fun+0xa>
 800dc2a:	0002      	movs	r2, r0
 800dc2c:	3a41      	subs	r2, #65	; 0x41
 800dc2e:	2300      	movs	r3, #0
 800dc30:	2a05      	cmp	r2, #5
 800dc32:	d8f2      	bhi.n	800dc1a <__hexdig_fun+0xc>
 800dc34:	3827      	subs	r0, #39	; 0x27
 800dc36:	e7ef      	b.n	800dc18 <__hexdig_fun+0xa>

0800dc38 <__gethex>:
 800dc38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc3a:	b08d      	sub	sp, #52	; 0x34
 800dc3c:	9005      	str	r0, [sp, #20]
 800dc3e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800dc40:	9109      	str	r1, [sp, #36]	; 0x24
 800dc42:	9202      	str	r2, [sp, #8]
 800dc44:	930a      	str	r3, [sp, #40]	; 0x28
 800dc46:	f000 fae2 	bl	800e20e <__localeconv_l>
 800dc4a:	6803      	ldr	r3, [r0, #0]
 800dc4c:	0018      	movs	r0, r3
 800dc4e:	9307      	str	r3, [sp, #28]
 800dc50:	f7f7 fa5e 	bl	8005110 <strlen>
 800dc54:	2202      	movs	r2, #2
 800dc56:	9b07      	ldr	r3, [sp, #28]
 800dc58:	4252      	negs	r2, r2
 800dc5a:	181b      	adds	r3, r3, r0
 800dc5c:	3b01      	subs	r3, #1
 800dc5e:	781b      	ldrb	r3, [r3, #0]
 800dc60:	9004      	str	r0, [sp, #16]
 800dc62:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc66:	6819      	ldr	r1, [r3, #0]
 800dc68:	1c8b      	adds	r3, r1, #2
 800dc6a:	1a52      	subs	r2, r2, r1
 800dc6c:	18d1      	adds	r1, r2, r3
 800dc6e:	9301      	str	r3, [sp, #4]
 800dc70:	9108      	str	r1, [sp, #32]
 800dc72:	9901      	ldr	r1, [sp, #4]
 800dc74:	3301      	adds	r3, #1
 800dc76:	7808      	ldrb	r0, [r1, #0]
 800dc78:	2830      	cmp	r0, #48	; 0x30
 800dc7a:	d0f7      	beq.n	800dc6c <__gethex+0x34>
 800dc7c:	f7ff ffc7 	bl	800dc0e <__hexdig_fun>
 800dc80:	1e07      	subs	r7, r0, #0
 800dc82:	d000      	beq.n	800dc86 <__gethex+0x4e>
 800dc84:	e06f      	b.n	800dd66 <__gethex+0x12e>
 800dc86:	9a04      	ldr	r2, [sp, #16]
 800dc88:	9907      	ldr	r1, [sp, #28]
 800dc8a:	9801      	ldr	r0, [sp, #4]
 800dc8c:	f001 fa9e 	bl	800f1cc <strncmp>
 800dc90:	2800      	cmp	r0, #0
 800dc92:	d000      	beq.n	800dc96 <__gethex+0x5e>
 800dc94:	e06d      	b.n	800dd72 <__gethex+0x13a>
 800dc96:	9b01      	ldr	r3, [sp, #4]
 800dc98:	9a04      	ldr	r2, [sp, #16]
 800dc9a:	189c      	adds	r4, r3, r2
 800dc9c:	7820      	ldrb	r0, [r4, #0]
 800dc9e:	f7ff ffb6 	bl	800dc0e <__hexdig_fun>
 800dca2:	2800      	cmp	r0, #0
 800dca4:	d069      	beq.n	800dd7a <__gethex+0x142>
 800dca6:	9401      	str	r4, [sp, #4]
 800dca8:	9b01      	ldr	r3, [sp, #4]
 800dcaa:	7818      	ldrb	r0, [r3, #0]
 800dcac:	2830      	cmp	r0, #48	; 0x30
 800dcae:	d009      	beq.n	800dcc4 <__gethex+0x8c>
 800dcb0:	f7ff ffad 	bl	800dc0e <__hexdig_fun>
 800dcb4:	4243      	negs	r3, r0
 800dcb6:	4143      	adcs	r3, r0
 800dcb8:	9303      	str	r3, [sp, #12]
 800dcba:	2301      	movs	r3, #1
 800dcbc:	0026      	movs	r6, r4
 800dcbe:	9308      	str	r3, [sp, #32]
 800dcc0:	9c01      	ldr	r4, [sp, #4]
 800dcc2:	e004      	b.n	800dcce <__gethex+0x96>
 800dcc4:	9b01      	ldr	r3, [sp, #4]
 800dcc6:	3301      	adds	r3, #1
 800dcc8:	9301      	str	r3, [sp, #4]
 800dcca:	e7ed      	b.n	800dca8 <__gethex+0x70>
 800dccc:	3401      	adds	r4, #1
 800dcce:	7820      	ldrb	r0, [r4, #0]
 800dcd0:	f7ff ff9d 	bl	800dc0e <__hexdig_fun>
 800dcd4:	2800      	cmp	r0, #0
 800dcd6:	d1f9      	bne.n	800dccc <__gethex+0x94>
 800dcd8:	9a04      	ldr	r2, [sp, #16]
 800dcda:	9907      	ldr	r1, [sp, #28]
 800dcdc:	0020      	movs	r0, r4
 800dcde:	f001 fa75 	bl	800f1cc <strncmp>
 800dce2:	2800      	cmp	r0, #0
 800dce4:	d109      	bne.n	800dcfa <__gethex+0xc2>
 800dce6:	2e00      	cmp	r6, #0
 800dce8:	d10a      	bne.n	800dd00 <__gethex+0xc8>
 800dcea:	9b04      	ldr	r3, [sp, #16]
 800dcec:	18e4      	adds	r4, r4, r3
 800dcee:	0026      	movs	r6, r4
 800dcf0:	7820      	ldrb	r0, [r4, #0]
 800dcf2:	f7ff ff8c 	bl	800dc0e <__hexdig_fun>
 800dcf6:	2800      	cmp	r0, #0
 800dcf8:	d139      	bne.n	800dd6e <__gethex+0x136>
 800dcfa:	2700      	movs	r7, #0
 800dcfc:	42be      	cmp	r6, r7
 800dcfe:	d001      	beq.n	800dd04 <__gethex+0xcc>
 800dd00:	1b37      	subs	r7, r6, r4
 800dd02:	00bf      	lsls	r7, r7, #2
 800dd04:	7823      	ldrb	r3, [r4, #0]
 800dd06:	2b50      	cmp	r3, #80	; 0x50
 800dd08:	d001      	beq.n	800dd0e <__gethex+0xd6>
 800dd0a:	2b70      	cmp	r3, #112	; 0x70
 800dd0c:	d142      	bne.n	800dd94 <__gethex+0x15c>
 800dd0e:	7863      	ldrb	r3, [r4, #1]
 800dd10:	2b2b      	cmp	r3, #43	; 0x2b
 800dd12:	d034      	beq.n	800dd7e <__gethex+0x146>
 800dd14:	2b2d      	cmp	r3, #45	; 0x2d
 800dd16:	d036      	beq.n	800dd86 <__gethex+0x14e>
 800dd18:	2300      	movs	r3, #0
 800dd1a:	1c66      	adds	r6, r4, #1
 800dd1c:	9306      	str	r3, [sp, #24]
 800dd1e:	7830      	ldrb	r0, [r6, #0]
 800dd20:	f7ff ff75 	bl	800dc0e <__hexdig_fun>
 800dd24:	1e43      	subs	r3, r0, #1
 800dd26:	b2db      	uxtb	r3, r3
 800dd28:	2b18      	cmp	r3, #24
 800dd2a:	d833      	bhi.n	800dd94 <__gethex+0x15c>
 800dd2c:	3810      	subs	r0, #16
 800dd2e:	0005      	movs	r5, r0
 800dd30:	3601      	adds	r6, #1
 800dd32:	7830      	ldrb	r0, [r6, #0]
 800dd34:	f7ff ff6b 	bl	800dc0e <__hexdig_fun>
 800dd38:	1e43      	subs	r3, r0, #1
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	2b18      	cmp	r3, #24
 800dd3e:	d924      	bls.n	800dd8a <__gethex+0x152>
 800dd40:	9b06      	ldr	r3, [sp, #24]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d000      	beq.n	800dd48 <__gethex+0x110>
 800dd46:	426d      	negs	r5, r5
 800dd48:	197f      	adds	r7, r7, r5
 800dd4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd4c:	601e      	str	r6, [r3, #0]
 800dd4e:	9b03      	ldr	r3, [sp, #12]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d021      	beq.n	800dd98 <__gethex+0x160>
 800dd54:	9b08      	ldr	r3, [sp, #32]
 800dd56:	2606      	movs	r6, #6
 800dd58:	425a      	negs	r2, r3
 800dd5a:	4153      	adcs	r3, r2
 800dd5c:	425b      	negs	r3, r3
 800dd5e:	401e      	ands	r6, r3
 800dd60:	0030      	movs	r0, r6
 800dd62:	b00d      	add	sp, #52	; 0x34
 800dd64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd66:	2300      	movs	r3, #0
 800dd68:	9303      	str	r3, [sp, #12]
 800dd6a:	001e      	movs	r6, r3
 800dd6c:	e7a8      	b.n	800dcc0 <__gethex+0x88>
 800dd6e:	3401      	adds	r4, #1
 800dd70:	e7be      	b.n	800dcf0 <__gethex+0xb8>
 800dd72:	9c01      	ldr	r4, [sp, #4]
 800dd74:	2301      	movs	r3, #1
 800dd76:	9303      	str	r3, [sp, #12]
 800dd78:	e7c4      	b.n	800dd04 <__gethex+0xcc>
 800dd7a:	0007      	movs	r7, r0
 800dd7c:	e7fa      	b.n	800dd74 <__gethex+0x13c>
 800dd7e:	2300      	movs	r3, #0
 800dd80:	9306      	str	r3, [sp, #24]
 800dd82:	1ca6      	adds	r6, r4, #2
 800dd84:	e7cb      	b.n	800dd1e <__gethex+0xe6>
 800dd86:	2301      	movs	r3, #1
 800dd88:	e7fa      	b.n	800dd80 <__gethex+0x148>
 800dd8a:	230a      	movs	r3, #10
 800dd8c:	435d      	muls	r5, r3
 800dd8e:	182d      	adds	r5, r5, r0
 800dd90:	3d10      	subs	r5, #16
 800dd92:	e7cd      	b.n	800dd30 <__gethex+0xf8>
 800dd94:	0026      	movs	r6, r4
 800dd96:	e7d8      	b.n	800dd4a <__gethex+0x112>
 800dd98:	9b01      	ldr	r3, [sp, #4]
 800dd9a:	9903      	ldr	r1, [sp, #12]
 800dd9c:	1ae3      	subs	r3, r4, r3
 800dd9e:	3b01      	subs	r3, #1
 800dda0:	2b07      	cmp	r3, #7
 800dda2:	dc47      	bgt.n	800de34 <__gethex+0x1fc>
 800dda4:	9805      	ldr	r0, [sp, #20]
 800dda6:	f000 fa68 	bl	800e27a <_Balloc>
 800ddaa:	0003      	movs	r3, r0
 800ddac:	3314      	adds	r3, #20
 800ddae:	9303      	str	r3, [sp, #12]
 800ddb0:	9308      	str	r3, [sp, #32]
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	0005      	movs	r5, r0
 800ddb6:	001e      	movs	r6, r3
 800ddb8:	9306      	str	r3, [sp, #24]
 800ddba:	9b01      	ldr	r3, [sp, #4]
 800ddbc:	42a3      	cmp	r3, r4
 800ddbe:	d33c      	bcc.n	800de3a <__gethex+0x202>
 800ddc0:	9c08      	ldr	r4, [sp, #32]
 800ddc2:	9b03      	ldr	r3, [sp, #12]
 800ddc4:	c440      	stmia	r4!, {r6}
 800ddc6:	1ae4      	subs	r4, r4, r3
 800ddc8:	10a4      	asrs	r4, r4, #2
 800ddca:	612c      	str	r4, [r5, #16]
 800ddcc:	0030      	movs	r0, r6
 800ddce:	f000 fb21 	bl	800e414 <__hi0bits>
 800ddd2:	9b02      	ldr	r3, [sp, #8]
 800ddd4:	0164      	lsls	r4, r4, #5
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	1a26      	subs	r6, r4, r0
 800ddda:	9301      	str	r3, [sp, #4]
 800dddc:	429e      	cmp	r6, r3
 800ddde:	dd5f      	ble.n	800dea0 <__gethex+0x268>
 800dde0:	1af6      	subs	r6, r6, r3
 800dde2:	0031      	movs	r1, r6
 800dde4:	0028      	movs	r0, r5
 800dde6:	f000 fe1c 	bl	800ea22 <__any_on>
 800ddea:	1e04      	subs	r4, r0, #0
 800ddec:	d00f      	beq.n	800de0e <__gethex+0x1d6>
 800ddee:	2401      	movs	r4, #1
 800ddf0:	211f      	movs	r1, #31
 800ddf2:	0020      	movs	r0, r4
 800ddf4:	1e73      	subs	r3, r6, #1
 800ddf6:	4019      	ands	r1, r3
 800ddf8:	4088      	lsls	r0, r1
 800ddfa:	0001      	movs	r1, r0
 800ddfc:	115a      	asrs	r2, r3, #5
 800ddfe:	9803      	ldr	r0, [sp, #12]
 800de00:	0092      	lsls	r2, r2, #2
 800de02:	5812      	ldr	r2, [r2, r0]
 800de04:	420a      	tst	r2, r1
 800de06:	d002      	beq.n	800de0e <__gethex+0x1d6>
 800de08:	42a3      	cmp	r3, r4
 800de0a:	dc41      	bgt.n	800de90 <__gethex+0x258>
 800de0c:	2402      	movs	r4, #2
 800de0e:	0031      	movs	r1, r6
 800de10:	0028      	movs	r0, r5
 800de12:	f7ff fec8 	bl	800dba6 <rshift>
 800de16:	19bf      	adds	r7, r7, r6
 800de18:	9b02      	ldr	r3, [sp, #8]
 800de1a:	689b      	ldr	r3, [r3, #8]
 800de1c:	9304      	str	r3, [sp, #16]
 800de1e:	42bb      	cmp	r3, r7
 800de20:	da4e      	bge.n	800dec0 <__gethex+0x288>
 800de22:	0029      	movs	r1, r5
 800de24:	9805      	ldr	r0, [sp, #20]
 800de26:	f000 fa60 	bl	800e2ea <_Bfree>
 800de2a:	2300      	movs	r3, #0
 800de2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800de2e:	26a3      	movs	r6, #163	; 0xa3
 800de30:	6013      	str	r3, [r2, #0]
 800de32:	e795      	b.n	800dd60 <__gethex+0x128>
 800de34:	3101      	adds	r1, #1
 800de36:	105b      	asrs	r3, r3, #1
 800de38:	e7b2      	b.n	800dda0 <__gethex+0x168>
 800de3a:	1e63      	subs	r3, r4, #1
 800de3c:	9309      	str	r3, [sp, #36]	; 0x24
 800de3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	4293      	cmp	r3, r2
 800de44:	d015      	beq.n	800de72 <__gethex+0x23a>
 800de46:	9b06      	ldr	r3, [sp, #24]
 800de48:	2b20      	cmp	r3, #32
 800de4a:	d105      	bne.n	800de58 <__gethex+0x220>
 800de4c:	9b08      	ldr	r3, [sp, #32]
 800de4e:	601e      	str	r6, [r3, #0]
 800de50:	2600      	movs	r6, #0
 800de52:	3304      	adds	r3, #4
 800de54:	9308      	str	r3, [sp, #32]
 800de56:	9606      	str	r6, [sp, #24]
 800de58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de5a:	7818      	ldrb	r0, [r3, #0]
 800de5c:	f7ff fed7 	bl	800dc0e <__hexdig_fun>
 800de60:	230f      	movs	r3, #15
 800de62:	4018      	ands	r0, r3
 800de64:	9b06      	ldr	r3, [sp, #24]
 800de66:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800de68:	4098      	lsls	r0, r3
 800de6a:	3304      	adds	r3, #4
 800de6c:	4306      	orrs	r6, r0
 800de6e:	9306      	str	r3, [sp, #24]
 800de70:	e7a3      	b.n	800ddba <__gethex+0x182>
 800de72:	2301      	movs	r3, #1
 800de74:	9a04      	ldr	r2, [sp, #16]
 800de76:	1a9c      	subs	r4, r3, r2
 800de78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de7a:	191c      	adds	r4, r3, r4
 800de7c:	9b01      	ldr	r3, [sp, #4]
 800de7e:	429c      	cmp	r4, r3
 800de80:	d3e1      	bcc.n	800de46 <__gethex+0x20e>
 800de82:	9907      	ldr	r1, [sp, #28]
 800de84:	0020      	movs	r0, r4
 800de86:	f001 f9a1 	bl	800f1cc <strncmp>
 800de8a:	2800      	cmp	r0, #0
 800de8c:	d1db      	bne.n	800de46 <__gethex+0x20e>
 800de8e:	e794      	b.n	800ddba <__gethex+0x182>
 800de90:	1eb1      	subs	r1, r6, #2
 800de92:	0028      	movs	r0, r5
 800de94:	f000 fdc5 	bl	800ea22 <__any_on>
 800de98:	2800      	cmp	r0, #0
 800de9a:	d0b7      	beq.n	800de0c <__gethex+0x1d4>
 800de9c:	2403      	movs	r4, #3
 800de9e:	e7b6      	b.n	800de0e <__gethex+0x1d6>
 800dea0:	9b01      	ldr	r3, [sp, #4]
 800dea2:	2400      	movs	r4, #0
 800dea4:	429e      	cmp	r6, r3
 800dea6:	dab7      	bge.n	800de18 <__gethex+0x1e0>
 800dea8:	1b9e      	subs	r6, r3, r6
 800deaa:	0029      	movs	r1, r5
 800deac:	0032      	movs	r2, r6
 800deae:	9805      	ldr	r0, [sp, #20]
 800deb0:	f000 fbe4 	bl	800e67c <__lshift>
 800deb4:	0003      	movs	r3, r0
 800deb6:	3314      	adds	r3, #20
 800deb8:	0005      	movs	r5, r0
 800deba:	1bbf      	subs	r7, r7, r6
 800debc:	9303      	str	r3, [sp, #12]
 800debe:	e7ab      	b.n	800de18 <__gethex+0x1e0>
 800dec0:	9b02      	ldr	r3, [sp, #8]
 800dec2:	685e      	ldr	r6, [r3, #4]
 800dec4:	42be      	cmp	r6, r7
 800dec6:	dd6b      	ble.n	800dfa0 <__gethex+0x368>
 800dec8:	9b01      	ldr	r3, [sp, #4]
 800deca:	1bf6      	subs	r6, r6, r7
 800decc:	42b3      	cmp	r3, r6
 800dece:	dc32      	bgt.n	800df36 <__gethex+0x2fe>
 800ded0:	9b02      	ldr	r3, [sp, #8]
 800ded2:	68db      	ldr	r3, [r3, #12]
 800ded4:	2b02      	cmp	r3, #2
 800ded6:	d026      	beq.n	800df26 <__gethex+0x2ee>
 800ded8:	2b03      	cmp	r3, #3
 800deda:	d028      	beq.n	800df2e <__gethex+0x2f6>
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d119      	bne.n	800df14 <__gethex+0x2dc>
 800dee0:	9b01      	ldr	r3, [sp, #4]
 800dee2:	42b3      	cmp	r3, r6
 800dee4:	d116      	bne.n	800df14 <__gethex+0x2dc>
 800dee6:	2b01      	cmp	r3, #1
 800dee8:	dc0d      	bgt.n	800df06 <__gethex+0x2ce>
 800deea:	9b02      	ldr	r3, [sp, #8]
 800deec:	2662      	movs	r6, #98	; 0x62
 800deee:	685b      	ldr	r3, [r3, #4]
 800def0:	9301      	str	r3, [sp, #4]
 800def2:	9a01      	ldr	r2, [sp, #4]
 800def4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800def6:	601a      	str	r2, [r3, #0]
 800def8:	2301      	movs	r3, #1
 800defa:	9a03      	ldr	r2, [sp, #12]
 800defc:	612b      	str	r3, [r5, #16]
 800defe:	6013      	str	r3, [r2, #0]
 800df00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800df02:	601d      	str	r5, [r3, #0]
 800df04:	e72c      	b.n	800dd60 <__gethex+0x128>
 800df06:	9901      	ldr	r1, [sp, #4]
 800df08:	0028      	movs	r0, r5
 800df0a:	3901      	subs	r1, #1
 800df0c:	f000 fd89 	bl	800ea22 <__any_on>
 800df10:	2800      	cmp	r0, #0
 800df12:	d1ea      	bne.n	800deea <__gethex+0x2b2>
 800df14:	0029      	movs	r1, r5
 800df16:	9805      	ldr	r0, [sp, #20]
 800df18:	f000 f9e7 	bl	800e2ea <_Bfree>
 800df1c:	2300      	movs	r3, #0
 800df1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800df20:	2650      	movs	r6, #80	; 0x50
 800df22:	6013      	str	r3, [r2, #0]
 800df24:	e71c      	b.n	800dd60 <__gethex+0x128>
 800df26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d0de      	beq.n	800deea <__gethex+0x2b2>
 800df2c:	e7f2      	b.n	800df14 <__gethex+0x2dc>
 800df2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800df30:	2b00      	cmp	r3, #0
 800df32:	d1da      	bne.n	800deea <__gethex+0x2b2>
 800df34:	e7ee      	b.n	800df14 <__gethex+0x2dc>
 800df36:	1e77      	subs	r7, r6, #1
 800df38:	2c00      	cmp	r4, #0
 800df3a:	d12f      	bne.n	800df9c <__gethex+0x364>
 800df3c:	2f00      	cmp	r7, #0
 800df3e:	d004      	beq.n	800df4a <__gethex+0x312>
 800df40:	0039      	movs	r1, r7
 800df42:	0028      	movs	r0, r5
 800df44:	f000 fd6d 	bl	800ea22 <__any_on>
 800df48:	0004      	movs	r4, r0
 800df4a:	231f      	movs	r3, #31
 800df4c:	117a      	asrs	r2, r7, #5
 800df4e:	401f      	ands	r7, r3
 800df50:	3b1e      	subs	r3, #30
 800df52:	40bb      	lsls	r3, r7
 800df54:	9903      	ldr	r1, [sp, #12]
 800df56:	0092      	lsls	r2, r2, #2
 800df58:	5852      	ldr	r2, [r2, r1]
 800df5a:	421a      	tst	r2, r3
 800df5c:	d001      	beq.n	800df62 <__gethex+0x32a>
 800df5e:	2302      	movs	r3, #2
 800df60:	431c      	orrs	r4, r3
 800df62:	9b01      	ldr	r3, [sp, #4]
 800df64:	0031      	movs	r1, r6
 800df66:	1b9b      	subs	r3, r3, r6
 800df68:	2602      	movs	r6, #2
 800df6a:	0028      	movs	r0, r5
 800df6c:	9301      	str	r3, [sp, #4]
 800df6e:	f7ff fe1a 	bl	800dba6 <rshift>
 800df72:	9b02      	ldr	r3, [sp, #8]
 800df74:	685f      	ldr	r7, [r3, #4]
 800df76:	2c00      	cmp	r4, #0
 800df78:	d040      	beq.n	800dffc <__gethex+0x3c4>
 800df7a:	9b02      	ldr	r3, [sp, #8]
 800df7c:	68db      	ldr	r3, [r3, #12]
 800df7e:	2b02      	cmp	r3, #2
 800df80:	d010      	beq.n	800dfa4 <__gethex+0x36c>
 800df82:	2b03      	cmp	r3, #3
 800df84:	d012      	beq.n	800dfac <__gethex+0x374>
 800df86:	2b01      	cmp	r3, #1
 800df88:	d106      	bne.n	800df98 <__gethex+0x360>
 800df8a:	07a2      	lsls	r2, r4, #30
 800df8c:	d504      	bpl.n	800df98 <__gethex+0x360>
 800df8e:	9a03      	ldr	r2, [sp, #12]
 800df90:	6812      	ldr	r2, [r2, #0]
 800df92:	4314      	orrs	r4, r2
 800df94:	421c      	tst	r4, r3
 800df96:	d10c      	bne.n	800dfb2 <__gethex+0x37a>
 800df98:	2310      	movs	r3, #16
 800df9a:	e02e      	b.n	800dffa <__gethex+0x3c2>
 800df9c:	2401      	movs	r4, #1
 800df9e:	e7d4      	b.n	800df4a <__gethex+0x312>
 800dfa0:	2601      	movs	r6, #1
 800dfa2:	e7e8      	b.n	800df76 <__gethex+0x33e>
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dfa8:	1a9b      	subs	r3, r3, r2
 800dfaa:	9313      	str	r3, [sp, #76]	; 0x4c
 800dfac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d0f2      	beq.n	800df98 <__gethex+0x360>
 800dfb2:	692c      	ldr	r4, [r5, #16]
 800dfb4:	00a3      	lsls	r3, r4, #2
 800dfb6:	9304      	str	r3, [sp, #16]
 800dfb8:	002b      	movs	r3, r5
 800dfba:	00a2      	lsls	r2, r4, #2
 800dfbc:	3314      	adds	r3, #20
 800dfbe:	1899      	adds	r1, r3, r2
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	4694      	mov	ip, r2
 800dfc4:	681a      	ldr	r2, [r3, #0]
 800dfc6:	1c50      	adds	r0, r2, #1
 800dfc8:	d01d      	beq.n	800e006 <__gethex+0x3ce>
 800dfca:	3201      	adds	r2, #1
 800dfcc:	601a      	str	r2, [r3, #0]
 800dfce:	002b      	movs	r3, r5
 800dfd0:	3314      	adds	r3, #20
 800dfd2:	2e02      	cmp	r6, #2
 800dfd4:	d13a      	bne.n	800e04c <__gethex+0x414>
 800dfd6:	9a02      	ldr	r2, [sp, #8]
 800dfd8:	9901      	ldr	r1, [sp, #4]
 800dfda:	6812      	ldr	r2, [r2, #0]
 800dfdc:	3a01      	subs	r2, #1
 800dfde:	428a      	cmp	r2, r1
 800dfe0:	d10a      	bne.n	800dff8 <__gethex+0x3c0>
 800dfe2:	114a      	asrs	r2, r1, #5
 800dfe4:	211f      	movs	r1, #31
 800dfe6:	9801      	ldr	r0, [sp, #4]
 800dfe8:	0092      	lsls	r2, r2, #2
 800dfea:	4001      	ands	r1, r0
 800dfec:	2001      	movs	r0, #1
 800dfee:	0004      	movs	r4, r0
 800dff0:	408c      	lsls	r4, r1
 800dff2:	58d3      	ldr	r3, [r2, r3]
 800dff4:	4223      	tst	r3, r4
 800dff6:	d148      	bne.n	800e08a <__gethex+0x452>
 800dff8:	2320      	movs	r3, #32
 800dffa:	431e      	orrs	r6, r3
 800dffc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dffe:	601d      	str	r5, [r3, #0]
 800e000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e002:	601f      	str	r7, [r3, #0]
 800e004:	e6ac      	b.n	800dd60 <__gethex+0x128>
 800e006:	4662      	mov	r2, ip
 800e008:	c304      	stmia	r3!, {r2}
 800e00a:	4299      	cmp	r1, r3
 800e00c:	d8da      	bhi.n	800dfc4 <__gethex+0x38c>
 800e00e:	68ab      	ldr	r3, [r5, #8]
 800e010:	429c      	cmp	r4, r3
 800e012:	db12      	blt.n	800e03a <__gethex+0x402>
 800e014:	686b      	ldr	r3, [r5, #4]
 800e016:	9805      	ldr	r0, [sp, #20]
 800e018:	1c59      	adds	r1, r3, #1
 800e01a:	f000 f92e 	bl	800e27a <_Balloc>
 800e01e:	0029      	movs	r1, r5
 800e020:	692b      	ldr	r3, [r5, #16]
 800e022:	9003      	str	r0, [sp, #12]
 800e024:	1c9a      	adds	r2, r3, #2
 800e026:	0092      	lsls	r2, r2, #2
 800e028:	310c      	adds	r1, #12
 800e02a:	300c      	adds	r0, #12
 800e02c:	f7fd f8f5 	bl	800b21a <memcpy>
 800e030:	0029      	movs	r1, r5
 800e032:	9805      	ldr	r0, [sp, #20]
 800e034:	f000 f959 	bl	800e2ea <_Bfree>
 800e038:	9d03      	ldr	r5, [sp, #12]
 800e03a:	692b      	ldr	r3, [r5, #16]
 800e03c:	1c5a      	adds	r2, r3, #1
 800e03e:	612a      	str	r2, [r5, #16]
 800e040:	2201      	movs	r2, #1
 800e042:	3304      	adds	r3, #4
 800e044:	009b      	lsls	r3, r3, #2
 800e046:	18eb      	adds	r3, r5, r3
 800e048:	605a      	str	r2, [r3, #4]
 800e04a:	e7c0      	b.n	800dfce <__gethex+0x396>
 800e04c:	692a      	ldr	r2, [r5, #16]
 800e04e:	42a2      	cmp	r2, r4
 800e050:	dd0a      	ble.n	800e068 <__gethex+0x430>
 800e052:	2101      	movs	r1, #1
 800e054:	0028      	movs	r0, r5
 800e056:	f7ff fda6 	bl	800dba6 <rshift>
 800e05a:	9b02      	ldr	r3, [sp, #8]
 800e05c:	3701      	adds	r7, #1
 800e05e:	689b      	ldr	r3, [r3, #8]
 800e060:	2601      	movs	r6, #1
 800e062:	42bb      	cmp	r3, r7
 800e064:	dac8      	bge.n	800dff8 <__gethex+0x3c0>
 800e066:	e6dc      	b.n	800de22 <__gethex+0x1ea>
 800e068:	241f      	movs	r4, #31
 800e06a:	9a01      	ldr	r2, [sp, #4]
 800e06c:	2601      	movs	r6, #1
 800e06e:	4022      	ands	r2, r4
 800e070:	1e14      	subs	r4, r2, #0
 800e072:	d0c1      	beq.n	800dff8 <__gethex+0x3c0>
 800e074:	9a04      	ldr	r2, [sp, #16]
 800e076:	189b      	adds	r3, r3, r2
 800e078:	3b04      	subs	r3, #4
 800e07a:	6818      	ldr	r0, [r3, #0]
 800e07c:	f000 f9ca 	bl	800e414 <__hi0bits>
 800e080:	2120      	movs	r1, #32
 800e082:	1b0c      	subs	r4, r1, r4
 800e084:	42a0      	cmp	r0, r4
 800e086:	dbe4      	blt.n	800e052 <__gethex+0x41a>
 800e088:	e7b6      	b.n	800dff8 <__gethex+0x3c0>
 800e08a:	0006      	movs	r6, r0
 800e08c:	e7b4      	b.n	800dff8 <__gethex+0x3c0>

0800e08e <L_shift>:
 800e08e:	2308      	movs	r3, #8
 800e090:	b570      	push	{r4, r5, r6, lr}
 800e092:	2520      	movs	r5, #32
 800e094:	1a9a      	subs	r2, r3, r2
 800e096:	0092      	lsls	r2, r2, #2
 800e098:	1aad      	subs	r5, r5, r2
 800e09a:	6843      	ldr	r3, [r0, #4]
 800e09c:	6806      	ldr	r6, [r0, #0]
 800e09e:	001c      	movs	r4, r3
 800e0a0:	40ac      	lsls	r4, r5
 800e0a2:	40d3      	lsrs	r3, r2
 800e0a4:	4334      	orrs	r4, r6
 800e0a6:	6004      	str	r4, [r0, #0]
 800e0a8:	6043      	str	r3, [r0, #4]
 800e0aa:	3004      	adds	r0, #4
 800e0ac:	4288      	cmp	r0, r1
 800e0ae:	d3f4      	bcc.n	800e09a <L_shift+0xc>
 800e0b0:	bd70      	pop	{r4, r5, r6, pc}

0800e0b2 <__match>:
 800e0b2:	b530      	push	{r4, r5, lr}
 800e0b4:	6803      	ldr	r3, [r0, #0]
 800e0b6:	780c      	ldrb	r4, [r1, #0]
 800e0b8:	3301      	adds	r3, #1
 800e0ba:	2c00      	cmp	r4, #0
 800e0bc:	d102      	bne.n	800e0c4 <__match+0x12>
 800e0be:	6003      	str	r3, [r0, #0]
 800e0c0:	2001      	movs	r0, #1
 800e0c2:	bd30      	pop	{r4, r5, pc}
 800e0c4:	781a      	ldrb	r2, [r3, #0]
 800e0c6:	0015      	movs	r5, r2
 800e0c8:	3d41      	subs	r5, #65	; 0x41
 800e0ca:	2d19      	cmp	r5, #25
 800e0cc:	d800      	bhi.n	800e0d0 <__match+0x1e>
 800e0ce:	3220      	adds	r2, #32
 800e0d0:	3101      	adds	r1, #1
 800e0d2:	42a2      	cmp	r2, r4
 800e0d4:	d0ef      	beq.n	800e0b6 <__match+0x4>
 800e0d6:	2000      	movs	r0, #0
 800e0d8:	e7f3      	b.n	800e0c2 <__match+0x10>

0800e0da <__hexnan>:
 800e0da:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0dc:	b08b      	sub	sp, #44	; 0x2c
 800e0de:	9201      	str	r2, [sp, #4]
 800e0e0:	680a      	ldr	r2, [r1, #0]
 800e0e2:	9901      	ldr	r1, [sp, #4]
 800e0e4:	1153      	asrs	r3, r2, #5
 800e0e6:	009b      	lsls	r3, r3, #2
 800e0e8:	18cb      	adds	r3, r1, r3
 800e0ea:	9304      	str	r3, [sp, #16]
 800e0ec:	231f      	movs	r3, #31
 800e0ee:	401a      	ands	r2, r3
 800e0f0:	9008      	str	r0, [sp, #32]
 800e0f2:	9206      	str	r2, [sp, #24]
 800e0f4:	d002      	beq.n	800e0fc <__hexnan+0x22>
 800e0f6:	9b04      	ldr	r3, [sp, #16]
 800e0f8:	3304      	adds	r3, #4
 800e0fa:	9304      	str	r3, [sp, #16]
 800e0fc:	9b04      	ldr	r3, [sp, #16]
 800e0fe:	2500      	movs	r5, #0
 800e100:	1f1e      	subs	r6, r3, #4
 800e102:	0037      	movs	r7, r6
 800e104:	0034      	movs	r4, r6
 800e106:	9b08      	ldr	r3, [sp, #32]
 800e108:	6035      	str	r5, [r6, #0]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	9507      	str	r5, [sp, #28]
 800e10e:	9305      	str	r3, [sp, #20]
 800e110:	9502      	str	r5, [sp, #8]
 800e112:	9b05      	ldr	r3, [sp, #20]
 800e114:	3301      	adds	r3, #1
 800e116:	9309      	str	r3, [sp, #36]	; 0x24
 800e118:	9b05      	ldr	r3, [sp, #20]
 800e11a:	785b      	ldrb	r3, [r3, #1]
 800e11c:	9303      	str	r3, [sp, #12]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d028      	beq.n	800e174 <__hexnan+0x9a>
 800e122:	9803      	ldr	r0, [sp, #12]
 800e124:	f7ff fd73 	bl	800dc0e <__hexdig_fun>
 800e128:	2800      	cmp	r0, #0
 800e12a:	d145      	bne.n	800e1b8 <__hexnan+0xde>
 800e12c:	9b03      	ldr	r3, [sp, #12]
 800e12e:	2b20      	cmp	r3, #32
 800e130:	d819      	bhi.n	800e166 <__hexnan+0x8c>
 800e132:	9b02      	ldr	r3, [sp, #8]
 800e134:	9a07      	ldr	r2, [sp, #28]
 800e136:	4293      	cmp	r3, r2
 800e138:	dd12      	ble.n	800e160 <__hexnan+0x86>
 800e13a:	42bc      	cmp	r4, r7
 800e13c:	d206      	bcs.n	800e14c <__hexnan+0x72>
 800e13e:	2d07      	cmp	r5, #7
 800e140:	dc04      	bgt.n	800e14c <__hexnan+0x72>
 800e142:	002a      	movs	r2, r5
 800e144:	0039      	movs	r1, r7
 800e146:	0020      	movs	r0, r4
 800e148:	f7ff ffa1 	bl	800e08e <L_shift>
 800e14c:	9b01      	ldr	r3, [sp, #4]
 800e14e:	2508      	movs	r5, #8
 800e150:	429c      	cmp	r4, r3
 800e152:	d905      	bls.n	800e160 <__hexnan+0x86>
 800e154:	1f27      	subs	r7, r4, #4
 800e156:	2500      	movs	r5, #0
 800e158:	003c      	movs	r4, r7
 800e15a:	9b02      	ldr	r3, [sp, #8]
 800e15c:	603d      	str	r5, [r7, #0]
 800e15e:	9307      	str	r3, [sp, #28]
 800e160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e162:	9305      	str	r3, [sp, #20]
 800e164:	e7d5      	b.n	800e112 <__hexnan+0x38>
 800e166:	9b03      	ldr	r3, [sp, #12]
 800e168:	2b29      	cmp	r3, #41	; 0x29
 800e16a:	d14a      	bne.n	800e202 <__hexnan+0x128>
 800e16c:	9b05      	ldr	r3, [sp, #20]
 800e16e:	9a08      	ldr	r2, [sp, #32]
 800e170:	3302      	adds	r3, #2
 800e172:	6013      	str	r3, [r2, #0]
 800e174:	9b02      	ldr	r3, [sp, #8]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d043      	beq.n	800e202 <__hexnan+0x128>
 800e17a:	42bc      	cmp	r4, r7
 800e17c:	d206      	bcs.n	800e18c <__hexnan+0xb2>
 800e17e:	2d07      	cmp	r5, #7
 800e180:	dc04      	bgt.n	800e18c <__hexnan+0xb2>
 800e182:	002a      	movs	r2, r5
 800e184:	0039      	movs	r1, r7
 800e186:	0020      	movs	r0, r4
 800e188:	f7ff ff81 	bl	800e08e <L_shift>
 800e18c:	9b01      	ldr	r3, [sp, #4]
 800e18e:	429c      	cmp	r4, r3
 800e190:	d926      	bls.n	800e1e0 <__hexnan+0x106>
 800e192:	cc04      	ldmia	r4!, {r2}
 800e194:	601a      	str	r2, [r3, #0]
 800e196:	3304      	adds	r3, #4
 800e198:	42a6      	cmp	r6, r4
 800e19a:	d2fa      	bcs.n	800e192 <__hexnan+0xb8>
 800e19c:	2200      	movs	r2, #0
 800e19e:	c304      	stmia	r3!, {r2}
 800e1a0:	429e      	cmp	r6, r3
 800e1a2:	d2fc      	bcs.n	800e19e <__hexnan+0xc4>
 800e1a4:	6833      	ldr	r3, [r6, #0]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d104      	bne.n	800e1b4 <__hexnan+0xda>
 800e1aa:	9b01      	ldr	r3, [sp, #4]
 800e1ac:	429e      	cmp	r6, r3
 800e1ae:	d126      	bne.n	800e1fe <__hexnan+0x124>
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	6033      	str	r3, [r6, #0]
 800e1b4:	2005      	movs	r0, #5
 800e1b6:	e025      	b.n	800e204 <__hexnan+0x12a>
 800e1b8:	9b02      	ldr	r3, [sp, #8]
 800e1ba:	3501      	adds	r5, #1
 800e1bc:	3301      	adds	r3, #1
 800e1be:	9302      	str	r3, [sp, #8]
 800e1c0:	2d08      	cmp	r5, #8
 800e1c2:	dd06      	ble.n	800e1d2 <__hexnan+0xf8>
 800e1c4:	9b01      	ldr	r3, [sp, #4]
 800e1c6:	429c      	cmp	r4, r3
 800e1c8:	d9ca      	bls.n	800e160 <__hexnan+0x86>
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	2501      	movs	r5, #1
 800e1ce:	3c04      	subs	r4, #4
 800e1d0:	6023      	str	r3, [r4, #0]
 800e1d2:	220f      	movs	r2, #15
 800e1d4:	6823      	ldr	r3, [r4, #0]
 800e1d6:	4010      	ands	r0, r2
 800e1d8:	011b      	lsls	r3, r3, #4
 800e1da:	4318      	orrs	r0, r3
 800e1dc:	6020      	str	r0, [r4, #0]
 800e1de:	e7bf      	b.n	800e160 <__hexnan+0x86>
 800e1e0:	9b06      	ldr	r3, [sp, #24]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d0de      	beq.n	800e1a4 <__hexnan+0xca>
 800e1e6:	2120      	movs	r1, #32
 800e1e8:	9a06      	ldr	r2, [sp, #24]
 800e1ea:	9b04      	ldr	r3, [sp, #16]
 800e1ec:	1a89      	subs	r1, r1, r2
 800e1ee:	2201      	movs	r2, #1
 800e1f0:	4252      	negs	r2, r2
 800e1f2:	40ca      	lsrs	r2, r1
 800e1f4:	3b04      	subs	r3, #4
 800e1f6:	6819      	ldr	r1, [r3, #0]
 800e1f8:	400a      	ands	r2, r1
 800e1fa:	601a      	str	r2, [r3, #0]
 800e1fc:	e7d2      	b.n	800e1a4 <__hexnan+0xca>
 800e1fe:	3e04      	subs	r6, #4
 800e200:	e7d0      	b.n	800e1a4 <__hexnan+0xca>
 800e202:	2004      	movs	r0, #4
 800e204:	b00b      	add	sp, #44	; 0x2c
 800e206:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e208 <__locale_ctype_ptr_l>:
 800e208:	30ec      	adds	r0, #236	; 0xec
 800e20a:	6800      	ldr	r0, [r0, #0]
 800e20c:	4770      	bx	lr

0800e20e <__localeconv_l>:
 800e20e:	30f0      	adds	r0, #240	; 0xf0
 800e210:	4770      	bx	lr
	...

0800e214 <_localeconv_r>:
 800e214:	4b03      	ldr	r3, [pc, #12]	; (800e224 <_localeconv_r+0x10>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	6a18      	ldr	r0, [r3, #32]
 800e21a:	2800      	cmp	r0, #0
 800e21c:	d100      	bne.n	800e220 <_localeconv_r+0xc>
 800e21e:	4802      	ldr	r0, [pc, #8]	; (800e228 <_localeconv_r+0x14>)
 800e220:	30f0      	adds	r0, #240	; 0xf0
 800e222:	4770      	bx	lr
 800e224:	20000124 	.word	0x20000124
 800e228:	20000188 	.word	0x20000188

0800e22c <malloc>:
 800e22c:	b510      	push	{r4, lr}
 800e22e:	4b03      	ldr	r3, [pc, #12]	; (800e23c <malloc+0x10>)
 800e230:	0001      	movs	r1, r0
 800e232:	6818      	ldr	r0, [r3, #0]
 800e234:	f000 fc70 	bl	800eb18 <_malloc_r>
 800e238:	bd10      	pop	{r4, pc}
 800e23a:	46c0      	nop			; (mov r8, r8)
 800e23c:	20000124 	.word	0x20000124

0800e240 <__ascii_mbtowc>:
 800e240:	b082      	sub	sp, #8
 800e242:	2900      	cmp	r1, #0
 800e244:	d100      	bne.n	800e248 <__ascii_mbtowc+0x8>
 800e246:	a901      	add	r1, sp, #4
 800e248:	1e10      	subs	r0, r2, #0
 800e24a:	d006      	beq.n	800e25a <__ascii_mbtowc+0x1a>
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d006      	beq.n	800e25e <__ascii_mbtowc+0x1e>
 800e250:	7813      	ldrb	r3, [r2, #0]
 800e252:	600b      	str	r3, [r1, #0]
 800e254:	7810      	ldrb	r0, [r2, #0]
 800e256:	1e43      	subs	r3, r0, #1
 800e258:	4198      	sbcs	r0, r3
 800e25a:	b002      	add	sp, #8
 800e25c:	4770      	bx	lr
 800e25e:	2002      	movs	r0, #2
 800e260:	4240      	negs	r0, r0
 800e262:	e7fa      	b.n	800e25a <__ascii_mbtowc+0x1a>

0800e264 <memchr>:
 800e264:	b2c9      	uxtb	r1, r1
 800e266:	1882      	adds	r2, r0, r2
 800e268:	4290      	cmp	r0, r2
 800e26a:	d101      	bne.n	800e270 <memchr+0xc>
 800e26c:	2000      	movs	r0, #0
 800e26e:	4770      	bx	lr
 800e270:	7803      	ldrb	r3, [r0, #0]
 800e272:	428b      	cmp	r3, r1
 800e274:	d0fb      	beq.n	800e26e <memchr+0xa>
 800e276:	3001      	adds	r0, #1
 800e278:	e7f6      	b.n	800e268 <memchr+0x4>

0800e27a <_Balloc>:
 800e27a:	b570      	push	{r4, r5, r6, lr}
 800e27c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e27e:	0004      	movs	r4, r0
 800e280:	000d      	movs	r5, r1
 800e282:	2e00      	cmp	r6, #0
 800e284:	d107      	bne.n	800e296 <_Balloc+0x1c>
 800e286:	2010      	movs	r0, #16
 800e288:	f7ff ffd0 	bl	800e22c <malloc>
 800e28c:	6260      	str	r0, [r4, #36]	; 0x24
 800e28e:	6046      	str	r6, [r0, #4]
 800e290:	6086      	str	r6, [r0, #8]
 800e292:	6006      	str	r6, [r0, #0]
 800e294:	60c6      	str	r6, [r0, #12]
 800e296:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e298:	68f3      	ldr	r3, [r6, #12]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d013      	beq.n	800e2c6 <_Balloc+0x4c>
 800e29e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2a0:	00aa      	lsls	r2, r5, #2
 800e2a2:	68db      	ldr	r3, [r3, #12]
 800e2a4:	189b      	adds	r3, r3, r2
 800e2a6:	6818      	ldr	r0, [r3, #0]
 800e2a8:	2800      	cmp	r0, #0
 800e2aa:	d118      	bne.n	800e2de <_Balloc+0x64>
 800e2ac:	2101      	movs	r1, #1
 800e2ae:	000e      	movs	r6, r1
 800e2b0:	40ae      	lsls	r6, r5
 800e2b2:	1d72      	adds	r2, r6, #5
 800e2b4:	0092      	lsls	r2, r2, #2
 800e2b6:	0020      	movs	r0, r4
 800e2b8:	f000 fbd5 	bl	800ea66 <_calloc_r>
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	d00c      	beq.n	800e2da <_Balloc+0x60>
 800e2c0:	6045      	str	r5, [r0, #4]
 800e2c2:	6086      	str	r6, [r0, #8]
 800e2c4:	e00d      	b.n	800e2e2 <_Balloc+0x68>
 800e2c6:	2221      	movs	r2, #33	; 0x21
 800e2c8:	2104      	movs	r1, #4
 800e2ca:	0020      	movs	r0, r4
 800e2cc:	f000 fbcb 	bl	800ea66 <_calloc_r>
 800e2d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2d2:	60f0      	str	r0, [r6, #12]
 800e2d4:	68db      	ldr	r3, [r3, #12]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d1e1      	bne.n	800e29e <_Balloc+0x24>
 800e2da:	2000      	movs	r0, #0
 800e2dc:	bd70      	pop	{r4, r5, r6, pc}
 800e2de:	6802      	ldr	r2, [r0, #0]
 800e2e0:	601a      	str	r2, [r3, #0]
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	6103      	str	r3, [r0, #16]
 800e2e6:	60c3      	str	r3, [r0, #12]
 800e2e8:	e7f8      	b.n	800e2dc <_Balloc+0x62>

0800e2ea <_Bfree>:
 800e2ea:	b570      	push	{r4, r5, r6, lr}
 800e2ec:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e2ee:	0006      	movs	r6, r0
 800e2f0:	000d      	movs	r5, r1
 800e2f2:	2c00      	cmp	r4, #0
 800e2f4:	d107      	bne.n	800e306 <_Bfree+0x1c>
 800e2f6:	2010      	movs	r0, #16
 800e2f8:	f7ff ff98 	bl	800e22c <malloc>
 800e2fc:	6270      	str	r0, [r6, #36]	; 0x24
 800e2fe:	6044      	str	r4, [r0, #4]
 800e300:	6084      	str	r4, [r0, #8]
 800e302:	6004      	str	r4, [r0, #0]
 800e304:	60c4      	str	r4, [r0, #12]
 800e306:	2d00      	cmp	r5, #0
 800e308:	d007      	beq.n	800e31a <_Bfree+0x30>
 800e30a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e30c:	686a      	ldr	r2, [r5, #4]
 800e30e:	68db      	ldr	r3, [r3, #12]
 800e310:	0092      	lsls	r2, r2, #2
 800e312:	189b      	adds	r3, r3, r2
 800e314:	681a      	ldr	r2, [r3, #0]
 800e316:	602a      	str	r2, [r5, #0]
 800e318:	601d      	str	r5, [r3, #0]
 800e31a:	bd70      	pop	{r4, r5, r6, pc}

0800e31c <__multadd>:
 800e31c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e31e:	001e      	movs	r6, r3
 800e320:	2314      	movs	r3, #20
 800e322:	469c      	mov	ip, r3
 800e324:	0007      	movs	r7, r0
 800e326:	000c      	movs	r4, r1
 800e328:	2000      	movs	r0, #0
 800e32a:	690d      	ldr	r5, [r1, #16]
 800e32c:	448c      	add	ip, r1
 800e32e:	4663      	mov	r3, ip
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	3001      	adds	r0, #1
 800e334:	b299      	uxth	r1, r3
 800e336:	4663      	mov	r3, ip
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	4351      	muls	r1, r2
 800e33c:	0c1b      	lsrs	r3, r3, #16
 800e33e:	4353      	muls	r3, r2
 800e340:	1989      	adds	r1, r1, r6
 800e342:	0c0e      	lsrs	r6, r1, #16
 800e344:	199b      	adds	r3, r3, r6
 800e346:	b289      	uxth	r1, r1
 800e348:	0c1e      	lsrs	r6, r3, #16
 800e34a:	041b      	lsls	r3, r3, #16
 800e34c:	185b      	adds	r3, r3, r1
 800e34e:	4661      	mov	r1, ip
 800e350:	c108      	stmia	r1!, {r3}
 800e352:	468c      	mov	ip, r1
 800e354:	4285      	cmp	r5, r0
 800e356:	dcea      	bgt.n	800e32e <__multadd+0x12>
 800e358:	2e00      	cmp	r6, #0
 800e35a:	d01b      	beq.n	800e394 <__multadd+0x78>
 800e35c:	68a3      	ldr	r3, [r4, #8]
 800e35e:	42ab      	cmp	r3, r5
 800e360:	dc12      	bgt.n	800e388 <__multadd+0x6c>
 800e362:	6863      	ldr	r3, [r4, #4]
 800e364:	0038      	movs	r0, r7
 800e366:	1c59      	adds	r1, r3, #1
 800e368:	f7ff ff87 	bl	800e27a <_Balloc>
 800e36c:	0021      	movs	r1, r4
 800e36e:	6923      	ldr	r3, [r4, #16]
 800e370:	9001      	str	r0, [sp, #4]
 800e372:	1c9a      	adds	r2, r3, #2
 800e374:	0092      	lsls	r2, r2, #2
 800e376:	310c      	adds	r1, #12
 800e378:	300c      	adds	r0, #12
 800e37a:	f7fc ff4e 	bl	800b21a <memcpy>
 800e37e:	0021      	movs	r1, r4
 800e380:	0038      	movs	r0, r7
 800e382:	f7ff ffb2 	bl	800e2ea <_Bfree>
 800e386:	9c01      	ldr	r4, [sp, #4]
 800e388:	1d2b      	adds	r3, r5, #4
 800e38a:	009b      	lsls	r3, r3, #2
 800e38c:	18e3      	adds	r3, r4, r3
 800e38e:	3501      	adds	r5, #1
 800e390:	605e      	str	r6, [r3, #4]
 800e392:	6125      	str	r5, [r4, #16]
 800e394:	0020      	movs	r0, r4
 800e396:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800e398 <__s2b>:
 800e398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e39a:	0006      	movs	r6, r0
 800e39c:	0018      	movs	r0, r3
 800e39e:	000c      	movs	r4, r1
 800e3a0:	3008      	adds	r0, #8
 800e3a2:	2109      	movs	r1, #9
 800e3a4:	9301      	str	r3, [sp, #4]
 800e3a6:	0015      	movs	r5, r2
 800e3a8:	f7f6 ff58 	bl	800525c <__divsi3>
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	2100      	movs	r1, #0
 800e3b0:	4283      	cmp	r3, r0
 800e3b2:	db1f      	blt.n	800e3f4 <__s2b+0x5c>
 800e3b4:	0030      	movs	r0, r6
 800e3b6:	f7ff ff60 	bl	800e27a <_Balloc>
 800e3ba:	9b08      	ldr	r3, [sp, #32]
 800e3bc:	6143      	str	r3, [r0, #20]
 800e3be:	2301      	movs	r3, #1
 800e3c0:	6103      	str	r3, [r0, #16]
 800e3c2:	2d09      	cmp	r5, #9
 800e3c4:	dd19      	ble.n	800e3fa <__s2b+0x62>
 800e3c6:	0023      	movs	r3, r4
 800e3c8:	3309      	adds	r3, #9
 800e3ca:	001f      	movs	r7, r3
 800e3cc:	9300      	str	r3, [sp, #0]
 800e3ce:	1964      	adds	r4, r4, r5
 800e3d0:	783b      	ldrb	r3, [r7, #0]
 800e3d2:	0001      	movs	r1, r0
 800e3d4:	3b30      	subs	r3, #48	; 0x30
 800e3d6:	220a      	movs	r2, #10
 800e3d8:	0030      	movs	r0, r6
 800e3da:	3701      	adds	r7, #1
 800e3dc:	f7ff ff9e 	bl	800e31c <__multadd>
 800e3e0:	42a7      	cmp	r7, r4
 800e3e2:	d1f5      	bne.n	800e3d0 <__s2b+0x38>
 800e3e4:	9b00      	ldr	r3, [sp, #0]
 800e3e6:	195c      	adds	r4, r3, r5
 800e3e8:	3c08      	subs	r4, #8
 800e3ea:	002f      	movs	r7, r5
 800e3ec:	9b01      	ldr	r3, [sp, #4]
 800e3ee:	429f      	cmp	r7, r3
 800e3f0:	db06      	blt.n	800e400 <__s2b+0x68>
 800e3f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e3f4:	005b      	lsls	r3, r3, #1
 800e3f6:	3101      	adds	r1, #1
 800e3f8:	e7da      	b.n	800e3b0 <__s2b+0x18>
 800e3fa:	340a      	adds	r4, #10
 800e3fc:	2509      	movs	r5, #9
 800e3fe:	e7f4      	b.n	800e3ea <__s2b+0x52>
 800e400:	1b63      	subs	r3, r4, r5
 800e402:	5ddb      	ldrb	r3, [r3, r7]
 800e404:	0001      	movs	r1, r0
 800e406:	3b30      	subs	r3, #48	; 0x30
 800e408:	220a      	movs	r2, #10
 800e40a:	0030      	movs	r0, r6
 800e40c:	f7ff ff86 	bl	800e31c <__multadd>
 800e410:	3701      	adds	r7, #1
 800e412:	e7eb      	b.n	800e3ec <__s2b+0x54>

0800e414 <__hi0bits>:
 800e414:	0003      	movs	r3, r0
 800e416:	0c02      	lsrs	r2, r0, #16
 800e418:	2000      	movs	r0, #0
 800e41a:	4282      	cmp	r2, r0
 800e41c:	d101      	bne.n	800e422 <__hi0bits+0xe>
 800e41e:	041b      	lsls	r3, r3, #16
 800e420:	3010      	adds	r0, #16
 800e422:	0e1a      	lsrs	r2, r3, #24
 800e424:	d101      	bne.n	800e42a <__hi0bits+0x16>
 800e426:	3008      	adds	r0, #8
 800e428:	021b      	lsls	r3, r3, #8
 800e42a:	0f1a      	lsrs	r2, r3, #28
 800e42c:	d101      	bne.n	800e432 <__hi0bits+0x1e>
 800e42e:	3004      	adds	r0, #4
 800e430:	011b      	lsls	r3, r3, #4
 800e432:	0f9a      	lsrs	r2, r3, #30
 800e434:	d101      	bne.n	800e43a <__hi0bits+0x26>
 800e436:	3002      	adds	r0, #2
 800e438:	009b      	lsls	r3, r3, #2
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	db03      	blt.n	800e446 <__hi0bits+0x32>
 800e43e:	3001      	adds	r0, #1
 800e440:	005b      	lsls	r3, r3, #1
 800e442:	d400      	bmi.n	800e446 <__hi0bits+0x32>
 800e444:	2020      	movs	r0, #32
 800e446:	4770      	bx	lr

0800e448 <__lo0bits>:
 800e448:	2207      	movs	r2, #7
 800e44a:	6803      	ldr	r3, [r0, #0]
 800e44c:	b510      	push	{r4, lr}
 800e44e:	0001      	movs	r1, r0
 800e450:	401a      	ands	r2, r3
 800e452:	d00d      	beq.n	800e470 <__lo0bits+0x28>
 800e454:	2401      	movs	r4, #1
 800e456:	2000      	movs	r0, #0
 800e458:	4223      	tst	r3, r4
 800e45a:	d105      	bne.n	800e468 <__lo0bits+0x20>
 800e45c:	3002      	adds	r0, #2
 800e45e:	4203      	tst	r3, r0
 800e460:	d003      	beq.n	800e46a <__lo0bits+0x22>
 800e462:	40e3      	lsrs	r3, r4
 800e464:	0020      	movs	r0, r4
 800e466:	600b      	str	r3, [r1, #0]
 800e468:	bd10      	pop	{r4, pc}
 800e46a:	089b      	lsrs	r3, r3, #2
 800e46c:	600b      	str	r3, [r1, #0]
 800e46e:	e7fb      	b.n	800e468 <__lo0bits+0x20>
 800e470:	b29c      	uxth	r4, r3
 800e472:	0010      	movs	r0, r2
 800e474:	2c00      	cmp	r4, #0
 800e476:	d101      	bne.n	800e47c <__lo0bits+0x34>
 800e478:	2010      	movs	r0, #16
 800e47a:	0c1b      	lsrs	r3, r3, #16
 800e47c:	b2da      	uxtb	r2, r3
 800e47e:	2a00      	cmp	r2, #0
 800e480:	d101      	bne.n	800e486 <__lo0bits+0x3e>
 800e482:	3008      	adds	r0, #8
 800e484:	0a1b      	lsrs	r3, r3, #8
 800e486:	071a      	lsls	r2, r3, #28
 800e488:	d101      	bne.n	800e48e <__lo0bits+0x46>
 800e48a:	3004      	adds	r0, #4
 800e48c:	091b      	lsrs	r3, r3, #4
 800e48e:	079a      	lsls	r2, r3, #30
 800e490:	d101      	bne.n	800e496 <__lo0bits+0x4e>
 800e492:	3002      	adds	r0, #2
 800e494:	089b      	lsrs	r3, r3, #2
 800e496:	07da      	lsls	r2, r3, #31
 800e498:	d4e8      	bmi.n	800e46c <__lo0bits+0x24>
 800e49a:	085b      	lsrs	r3, r3, #1
 800e49c:	d001      	beq.n	800e4a2 <__lo0bits+0x5a>
 800e49e:	3001      	adds	r0, #1
 800e4a0:	e7e4      	b.n	800e46c <__lo0bits+0x24>
 800e4a2:	2020      	movs	r0, #32
 800e4a4:	e7e0      	b.n	800e468 <__lo0bits+0x20>

0800e4a6 <__i2b>:
 800e4a6:	b510      	push	{r4, lr}
 800e4a8:	000c      	movs	r4, r1
 800e4aa:	2101      	movs	r1, #1
 800e4ac:	f7ff fee5 	bl	800e27a <_Balloc>
 800e4b0:	2301      	movs	r3, #1
 800e4b2:	6144      	str	r4, [r0, #20]
 800e4b4:	6103      	str	r3, [r0, #16]
 800e4b6:	bd10      	pop	{r4, pc}

0800e4b8 <__multiply>:
 800e4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4ba:	690b      	ldr	r3, [r1, #16]
 800e4bc:	0014      	movs	r4, r2
 800e4be:	6912      	ldr	r2, [r2, #16]
 800e4c0:	b089      	sub	sp, #36	; 0x24
 800e4c2:	000d      	movs	r5, r1
 800e4c4:	4293      	cmp	r3, r2
 800e4c6:	da01      	bge.n	800e4cc <__multiply+0x14>
 800e4c8:	0025      	movs	r5, r4
 800e4ca:	000c      	movs	r4, r1
 800e4cc:	692f      	ldr	r7, [r5, #16]
 800e4ce:	6926      	ldr	r6, [r4, #16]
 800e4d0:	6869      	ldr	r1, [r5, #4]
 800e4d2:	19bb      	adds	r3, r7, r6
 800e4d4:	9302      	str	r3, [sp, #8]
 800e4d6:	68ab      	ldr	r3, [r5, #8]
 800e4d8:	19ba      	adds	r2, r7, r6
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	da00      	bge.n	800e4e0 <__multiply+0x28>
 800e4de:	3101      	adds	r1, #1
 800e4e0:	f7ff fecb 	bl	800e27a <_Balloc>
 800e4e4:	0002      	movs	r2, r0
 800e4e6:	19bb      	adds	r3, r7, r6
 800e4e8:	3214      	adds	r2, #20
 800e4ea:	009b      	lsls	r3, r3, #2
 800e4ec:	18d3      	adds	r3, r2, r3
 800e4ee:	469c      	mov	ip, r3
 800e4f0:	2100      	movs	r1, #0
 800e4f2:	0013      	movs	r3, r2
 800e4f4:	9004      	str	r0, [sp, #16]
 800e4f6:	4563      	cmp	r3, ip
 800e4f8:	d31d      	bcc.n	800e536 <__multiply+0x7e>
 800e4fa:	3514      	adds	r5, #20
 800e4fc:	00bf      	lsls	r7, r7, #2
 800e4fe:	19eb      	adds	r3, r5, r7
 800e500:	3414      	adds	r4, #20
 800e502:	00b6      	lsls	r6, r6, #2
 800e504:	9305      	str	r3, [sp, #20]
 800e506:	19a3      	adds	r3, r4, r6
 800e508:	9503      	str	r5, [sp, #12]
 800e50a:	9401      	str	r4, [sp, #4]
 800e50c:	9307      	str	r3, [sp, #28]
 800e50e:	9b07      	ldr	r3, [sp, #28]
 800e510:	9901      	ldr	r1, [sp, #4]
 800e512:	4299      	cmp	r1, r3
 800e514:	d311      	bcc.n	800e53a <__multiply+0x82>
 800e516:	9b02      	ldr	r3, [sp, #8]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	dd06      	ble.n	800e52a <__multiply+0x72>
 800e51c:	2304      	movs	r3, #4
 800e51e:	425b      	negs	r3, r3
 800e520:	449c      	add	ip, r3
 800e522:	4663      	mov	r3, ip
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d051      	beq.n	800e5ce <__multiply+0x116>
 800e52a:	9b04      	ldr	r3, [sp, #16]
 800e52c:	9a02      	ldr	r2, [sp, #8]
 800e52e:	0018      	movs	r0, r3
 800e530:	611a      	str	r2, [r3, #16]
 800e532:	b009      	add	sp, #36	; 0x24
 800e534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e536:	c302      	stmia	r3!, {r1}
 800e538:	e7dd      	b.n	800e4f6 <__multiply+0x3e>
 800e53a:	9b01      	ldr	r3, [sp, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	b298      	uxth	r0, r3
 800e540:	2800      	cmp	r0, #0
 800e542:	d01c      	beq.n	800e57e <__multiply+0xc6>
 800e544:	0015      	movs	r5, r2
 800e546:	2600      	movs	r6, #0
 800e548:	9f03      	ldr	r7, [sp, #12]
 800e54a:	cf02      	ldmia	r7!, {r1}
 800e54c:	682c      	ldr	r4, [r5, #0]
 800e54e:	b28b      	uxth	r3, r1
 800e550:	4343      	muls	r3, r0
 800e552:	0c09      	lsrs	r1, r1, #16
 800e554:	4341      	muls	r1, r0
 800e556:	b2a4      	uxth	r4, r4
 800e558:	191b      	adds	r3, r3, r4
 800e55a:	199b      	adds	r3, r3, r6
 800e55c:	000e      	movs	r6, r1
 800e55e:	6829      	ldr	r1, [r5, #0]
 800e560:	9506      	str	r5, [sp, #24]
 800e562:	0c09      	lsrs	r1, r1, #16
 800e564:	1871      	adds	r1, r6, r1
 800e566:	0c1e      	lsrs	r6, r3, #16
 800e568:	1989      	adds	r1, r1, r6
 800e56a:	0c0e      	lsrs	r6, r1, #16
 800e56c:	b29b      	uxth	r3, r3
 800e56e:	0409      	lsls	r1, r1, #16
 800e570:	430b      	orrs	r3, r1
 800e572:	c508      	stmia	r5!, {r3}
 800e574:	9b05      	ldr	r3, [sp, #20]
 800e576:	42bb      	cmp	r3, r7
 800e578:	d8e7      	bhi.n	800e54a <__multiply+0x92>
 800e57a:	9b06      	ldr	r3, [sp, #24]
 800e57c:	605e      	str	r6, [r3, #4]
 800e57e:	9b01      	ldr	r3, [sp, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	0c1d      	lsrs	r5, r3, #16
 800e584:	d01e      	beq.n	800e5c4 <__multiply+0x10c>
 800e586:	0010      	movs	r0, r2
 800e588:	2700      	movs	r7, #0
 800e58a:	6813      	ldr	r3, [r2, #0]
 800e58c:	9e03      	ldr	r6, [sp, #12]
 800e58e:	6831      	ldr	r1, [r6, #0]
 800e590:	6804      	ldr	r4, [r0, #0]
 800e592:	b289      	uxth	r1, r1
 800e594:	4369      	muls	r1, r5
 800e596:	0c24      	lsrs	r4, r4, #16
 800e598:	1909      	adds	r1, r1, r4
 800e59a:	19c9      	adds	r1, r1, r7
 800e59c:	040f      	lsls	r7, r1, #16
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	433b      	orrs	r3, r7
 800e5a2:	6003      	str	r3, [r0, #0]
 800e5a4:	ce80      	ldmia	r6!, {r7}
 800e5a6:	6843      	ldr	r3, [r0, #4]
 800e5a8:	0c3f      	lsrs	r7, r7, #16
 800e5aa:	436f      	muls	r7, r5
 800e5ac:	b29b      	uxth	r3, r3
 800e5ae:	18fb      	adds	r3, r7, r3
 800e5b0:	0c09      	lsrs	r1, r1, #16
 800e5b2:	185b      	adds	r3, r3, r1
 800e5b4:	9905      	ldr	r1, [sp, #20]
 800e5b6:	9006      	str	r0, [sp, #24]
 800e5b8:	0c1f      	lsrs	r7, r3, #16
 800e5ba:	3004      	adds	r0, #4
 800e5bc:	42b1      	cmp	r1, r6
 800e5be:	d8e6      	bhi.n	800e58e <__multiply+0xd6>
 800e5c0:	9906      	ldr	r1, [sp, #24]
 800e5c2:	604b      	str	r3, [r1, #4]
 800e5c4:	9b01      	ldr	r3, [sp, #4]
 800e5c6:	3204      	adds	r2, #4
 800e5c8:	3304      	adds	r3, #4
 800e5ca:	9301      	str	r3, [sp, #4]
 800e5cc:	e79f      	b.n	800e50e <__multiply+0x56>
 800e5ce:	9b02      	ldr	r3, [sp, #8]
 800e5d0:	3b01      	subs	r3, #1
 800e5d2:	9302      	str	r3, [sp, #8]
 800e5d4:	e79f      	b.n	800e516 <__multiply+0x5e>
	...

0800e5d8 <__pow5mult>:
 800e5d8:	2303      	movs	r3, #3
 800e5da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e5dc:	4013      	ands	r3, r2
 800e5de:	0005      	movs	r5, r0
 800e5e0:	000e      	movs	r6, r1
 800e5e2:	0014      	movs	r4, r2
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d008      	beq.n	800e5fa <__pow5mult+0x22>
 800e5e8:	4922      	ldr	r1, [pc, #136]	; (800e674 <__pow5mult+0x9c>)
 800e5ea:	3b01      	subs	r3, #1
 800e5ec:	009a      	lsls	r2, r3, #2
 800e5ee:	5852      	ldr	r2, [r2, r1]
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	0031      	movs	r1, r6
 800e5f4:	f7ff fe92 	bl	800e31c <__multadd>
 800e5f8:	0006      	movs	r6, r0
 800e5fa:	10a3      	asrs	r3, r4, #2
 800e5fc:	9301      	str	r3, [sp, #4]
 800e5fe:	d036      	beq.n	800e66e <__pow5mult+0x96>
 800e600:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800e602:	2c00      	cmp	r4, #0
 800e604:	d107      	bne.n	800e616 <__pow5mult+0x3e>
 800e606:	2010      	movs	r0, #16
 800e608:	f7ff fe10 	bl	800e22c <malloc>
 800e60c:	6268      	str	r0, [r5, #36]	; 0x24
 800e60e:	6044      	str	r4, [r0, #4]
 800e610:	6084      	str	r4, [r0, #8]
 800e612:	6004      	str	r4, [r0, #0]
 800e614:	60c4      	str	r4, [r0, #12]
 800e616:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800e618:	68bc      	ldr	r4, [r7, #8]
 800e61a:	2c00      	cmp	r4, #0
 800e61c:	d107      	bne.n	800e62e <__pow5mult+0x56>
 800e61e:	4916      	ldr	r1, [pc, #88]	; (800e678 <__pow5mult+0xa0>)
 800e620:	0028      	movs	r0, r5
 800e622:	f7ff ff40 	bl	800e4a6 <__i2b>
 800e626:	2300      	movs	r3, #0
 800e628:	0004      	movs	r4, r0
 800e62a:	60b8      	str	r0, [r7, #8]
 800e62c:	6003      	str	r3, [r0, #0]
 800e62e:	2201      	movs	r2, #1
 800e630:	9b01      	ldr	r3, [sp, #4]
 800e632:	4213      	tst	r3, r2
 800e634:	d00a      	beq.n	800e64c <__pow5mult+0x74>
 800e636:	0031      	movs	r1, r6
 800e638:	0022      	movs	r2, r4
 800e63a:	0028      	movs	r0, r5
 800e63c:	f7ff ff3c 	bl	800e4b8 <__multiply>
 800e640:	0007      	movs	r7, r0
 800e642:	0031      	movs	r1, r6
 800e644:	0028      	movs	r0, r5
 800e646:	f7ff fe50 	bl	800e2ea <_Bfree>
 800e64a:	003e      	movs	r6, r7
 800e64c:	9b01      	ldr	r3, [sp, #4]
 800e64e:	105b      	asrs	r3, r3, #1
 800e650:	9301      	str	r3, [sp, #4]
 800e652:	d00c      	beq.n	800e66e <__pow5mult+0x96>
 800e654:	6820      	ldr	r0, [r4, #0]
 800e656:	2800      	cmp	r0, #0
 800e658:	d107      	bne.n	800e66a <__pow5mult+0x92>
 800e65a:	0022      	movs	r2, r4
 800e65c:	0021      	movs	r1, r4
 800e65e:	0028      	movs	r0, r5
 800e660:	f7ff ff2a 	bl	800e4b8 <__multiply>
 800e664:	2300      	movs	r3, #0
 800e666:	6020      	str	r0, [r4, #0]
 800e668:	6003      	str	r3, [r0, #0]
 800e66a:	0004      	movs	r4, r0
 800e66c:	e7df      	b.n	800e62e <__pow5mult+0x56>
 800e66e:	0030      	movs	r0, r6
 800e670:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e672:	46c0      	nop			; (mov r8, r8)
 800e674:	080100c8 	.word	0x080100c8
 800e678:	00000271 	.word	0x00000271

0800e67c <__lshift>:
 800e67c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e67e:	000d      	movs	r5, r1
 800e680:	0017      	movs	r7, r2
 800e682:	692b      	ldr	r3, [r5, #16]
 800e684:	1154      	asrs	r4, r2, #5
 800e686:	b085      	sub	sp, #20
 800e688:	18e3      	adds	r3, r4, r3
 800e68a:	9301      	str	r3, [sp, #4]
 800e68c:	3301      	adds	r3, #1
 800e68e:	9300      	str	r3, [sp, #0]
 800e690:	6849      	ldr	r1, [r1, #4]
 800e692:	68ab      	ldr	r3, [r5, #8]
 800e694:	9002      	str	r0, [sp, #8]
 800e696:	9a00      	ldr	r2, [sp, #0]
 800e698:	4293      	cmp	r3, r2
 800e69a:	db35      	blt.n	800e708 <__lshift+0x8c>
 800e69c:	9802      	ldr	r0, [sp, #8]
 800e69e:	f7ff fdec 	bl	800e27a <_Balloc>
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	0002      	movs	r2, r0
 800e6a6:	0006      	movs	r6, r0
 800e6a8:	0019      	movs	r1, r3
 800e6aa:	3214      	adds	r2, #20
 800e6ac:	42a3      	cmp	r3, r4
 800e6ae:	db2e      	blt.n	800e70e <__lshift+0x92>
 800e6b0:	43e3      	mvns	r3, r4
 800e6b2:	17db      	asrs	r3, r3, #31
 800e6b4:	401c      	ands	r4, r3
 800e6b6:	002b      	movs	r3, r5
 800e6b8:	00a4      	lsls	r4, r4, #2
 800e6ba:	1914      	adds	r4, r2, r4
 800e6bc:	692a      	ldr	r2, [r5, #16]
 800e6be:	3314      	adds	r3, #20
 800e6c0:	0092      	lsls	r2, r2, #2
 800e6c2:	189a      	adds	r2, r3, r2
 800e6c4:	4694      	mov	ip, r2
 800e6c6:	221f      	movs	r2, #31
 800e6c8:	4017      	ands	r7, r2
 800e6ca:	d024      	beq.n	800e716 <__lshift+0x9a>
 800e6cc:	3201      	adds	r2, #1
 800e6ce:	1bd2      	subs	r2, r2, r7
 800e6d0:	9203      	str	r2, [sp, #12]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	6819      	ldr	r1, [r3, #0]
 800e6d6:	0020      	movs	r0, r4
 800e6d8:	40b9      	lsls	r1, r7
 800e6da:	430a      	orrs	r2, r1
 800e6dc:	c404      	stmia	r4!, {r2}
 800e6de:	cb04      	ldmia	r3!, {r2}
 800e6e0:	9903      	ldr	r1, [sp, #12]
 800e6e2:	40ca      	lsrs	r2, r1
 800e6e4:	459c      	cmp	ip, r3
 800e6e6:	d8f5      	bhi.n	800e6d4 <__lshift+0x58>
 800e6e8:	6042      	str	r2, [r0, #4]
 800e6ea:	2a00      	cmp	r2, #0
 800e6ec:	d002      	beq.n	800e6f4 <__lshift+0x78>
 800e6ee:	9b01      	ldr	r3, [sp, #4]
 800e6f0:	3302      	adds	r3, #2
 800e6f2:	9300      	str	r3, [sp, #0]
 800e6f4:	9b00      	ldr	r3, [sp, #0]
 800e6f6:	9802      	ldr	r0, [sp, #8]
 800e6f8:	3b01      	subs	r3, #1
 800e6fa:	6133      	str	r3, [r6, #16]
 800e6fc:	0029      	movs	r1, r5
 800e6fe:	f7ff fdf4 	bl	800e2ea <_Bfree>
 800e702:	0030      	movs	r0, r6
 800e704:	b005      	add	sp, #20
 800e706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e708:	3101      	adds	r1, #1
 800e70a:	005b      	lsls	r3, r3, #1
 800e70c:	e7c3      	b.n	800e696 <__lshift+0x1a>
 800e70e:	0098      	lsls	r0, r3, #2
 800e710:	5011      	str	r1, [r2, r0]
 800e712:	3301      	adds	r3, #1
 800e714:	e7ca      	b.n	800e6ac <__lshift+0x30>
 800e716:	cb04      	ldmia	r3!, {r2}
 800e718:	c404      	stmia	r4!, {r2}
 800e71a:	459c      	cmp	ip, r3
 800e71c:	d8fb      	bhi.n	800e716 <__lshift+0x9a>
 800e71e:	e7e9      	b.n	800e6f4 <__lshift+0x78>

0800e720 <__mcmp>:
 800e720:	690a      	ldr	r2, [r1, #16]
 800e722:	6903      	ldr	r3, [r0, #16]
 800e724:	b530      	push	{r4, r5, lr}
 800e726:	1a9b      	subs	r3, r3, r2
 800e728:	d10d      	bne.n	800e746 <__mcmp+0x26>
 800e72a:	0092      	lsls	r2, r2, #2
 800e72c:	3014      	adds	r0, #20
 800e72e:	3114      	adds	r1, #20
 800e730:	1884      	adds	r4, r0, r2
 800e732:	1889      	adds	r1, r1, r2
 800e734:	3c04      	subs	r4, #4
 800e736:	3904      	subs	r1, #4
 800e738:	6825      	ldr	r5, [r4, #0]
 800e73a:	680a      	ldr	r2, [r1, #0]
 800e73c:	4295      	cmp	r5, r2
 800e73e:	d004      	beq.n	800e74a <__mcmp+0x2a>
 800e740:	2301      	movs	r3, #1
 800e742:	4295      	cmp	r5, r2
 800e744:	d304      	bcc.n	800e750 <__mcmp+0x30>
 800e746:	0018      	movs	r0, r3
 800e748:	bd30      	pop	{r4, r5, pc}
 800e74a:	42a0      	cmp	r0, r4
 800e74c:	d3f2      	bcc.n	800e734 <__mcmp+0x14>
 800e74e:	e7fa      	b.n	800e746 <__mcmp+0x26>
 800e750:	425b      	negs	r3, r3
 800e752:	e7f8      	b.n	800e746 <__mcmp+0x26>

0800e754 <__mdiff>:
 800e754:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e756:	000d      	movs	r5, r1
 800e758:	b085      	sub	sp, #20
 800e75a:	0007      	movs	r7, r0
 800e75c:	0011      	movs	r1, r2
 800e75e:	0028      	movs	r0, r5
 800e760:	0014      	movs	r4, r2
 800e762:	f7ff ffdd 	bl	800e720 <__mcmp>
 800e766:	1e06      	subs	r6, r0, #0
 800e768:	d108      	bne.n	800e77c <__mdiff+0x28>
 800e76a:	0001      	movs	r1, r0
 800e76c:	0038      	movs	r0, r7
 800e76e:	f7ff fd84 	bl	800e27a <_Balloc>
 800e772:	2301      	movs	r3, #1
 800e774:	6146      	str	r6, [r0, #20]
 800e776:	6103      	str	r3, [r0, #16]
 800e778:	b005      	add	sp, #20
 800e77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e77c:	2301      	movs	r3, #1
 800e77e:	9301      	str	r3, [sp, #4]
 800e780:	2800      	cmp	r0, #0
 800e782:	db04      	blt.n	800e78e <__mdiff+0x3a>
 800e784:	0023      	movs	r3, r4
 800e786:	002c      	movs	r4, r5
 800e788:	001d      	movs	r5, r3
 800e78a:	2300      	movs	r3, #0
 800e78c:	9301      	str	r3, [sp, #4]
 800e78e:	6861      	ldr	r1, [r4, #4]
 800e790:	0038      	movs	r0, r7
 800e792:	f7ff fd72 	bl	800e27a <_Balloc>
 800e796:	002f      	movs	r7, r5
 800e798:	2200      	movs	r2, #0
 800e79a:	9b01      	ldr	r3, [sp, #4]
 800e79c:	6926      	ldr	r6, [r4, #16]
 800e79e:	60c3      	str	r3, [r0, #12]
 800e7a0:	3414      	adds	r4, #20
 800e7a2:	00b3      	lsls	r3, r6, #2
 800e7a4:	18e3      	adds	r3, r4, r3
 800e7a6:	9302      	str	r3, [sp, #8]
 800e7a8:	692b      	ldr	r3, [r5, #16]
 800e7aa:	3714      	adds	r7, #20
 800e7ac:	009b      	lsls	r3, r3, #2
 800e7ae:	18fb      	adds	r3, r7, r3
 800e7b0:	9303      	str	r3, [sp, #12]
 800e7b2:	0003      	movs	r3, r0
 800e7b4:	4694      	mov	ip, r2
 800e7b6:	3314      	adds	r3, #20
 800e7b8:	cc20      	ldmia	r4!, {r5}
 800e7ba:	cf04      	ldmia	r7!, {r2}
 800e7bc:	9201      	str	r2, [sp, #4]
 800e7be:	b2aa      	uxth	r2, r5
 800e7c0:	4494      	add	ip, r2
 800e7c2:	466a      	mov	r2, sp
 800e7c4:	4661      	mov	r1, ip
 800e7c6:	8892      	ldrh	r2, [r2, #4]
 800e7c8:	0c2d      	lsrs	r5, r5, #16
 800e7ca:	1a8a      	subs	r2, r1, r2
 800e7cc:	9901      	ldr	r1, [sp, #4]
 800e7ce:	0c09      	lsrs	r1, r1, #16
 800e7d0:	1a69      	subs	r1, r5, r1
 800e7d2:	1415      	asrs	r5, r2, #16
 800e7d4:	1949      	adds	r1, r1, r5
 800e7d6:	140d      	asrs	r5, r1, #16
 800e7d8:	b292      	uxth	r2, r2
 800e7da:	0409      	lsls	r1, r1, #16
 800e7dc:	430a      	orrs	r2, r1
 800e7de:	601a      	str	r2, [r3, #0]
 800e7e0:	9a03      	ldr	r2, [sp, #12]
 800e7e2:	46ac      	mov	ip, r5
 800e7e4:	3304      	adds	r3, #4
 800e7e6:	42ba      	cmp	r2, r7
 800e7e8:	d8e6      	bhi.n	800e7b8 <__mdiff+0x64>
 800e7ea:	9902      	ldr	r1, [sp, #8]
 800e7ec:	001a      	movs	r2, r3
 800e7ee:	428c      	cmp	r4, r1
 800e7f0:	d305      	bcc.n	800e7fe <__mdiff+0xaa>
 800e7f2:	3a04      	subs	r2, #4
 800e7f4:	6813      	ldr	r3, [r2, #0]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d00e      	beq.n	800e818 <__mdiff+0xc4>
 800e7fa:	6106      	str	r6, [r0, #16]
 800e7fc:	e7bc      	b.n	800e778 <__mdiff+0x24>
 800e7fe:	cc04      	ldmia	r4!, {r2}
 800e800:	b291      	uxth	r1, r2
 800e802:	4461      	add	r1, ip
 800e804:	140d      	asrs	r5, r1, #16
 800e806:	0c12      	lsrs	r2, r2, #16
 800e808:	1952      	adds	r2, r2, r5
 800e80a:	1415      	asrs	r5, r2, #16
 800e80c:	b289      	uxth	r1, r1
 800e80e:	0412      	lsls	r2, r2, #16
 800e810:	430a      	orrs	r2, r1
 800e812:	46ac      	mov	ip, r5
 800e814:	c304      	stmia	r3!, {r2}
 800e816:	e7e8      	b.n	800e7ea <__mdiff+0x96>
 800e818:	3e01      	subs	r6, #1
 800e81a:	e7ea      	b.n	800e7f2 <__mdiff+0x9e>

0800e81c <__ulp>:
 800e81c:	000b      	movs	r3, r1
 800e81e:	4910      	ldr	r1, [pc, #64]	; (800e860 <__ulp+0x44>)
 800e820:	b510      	push	{r4, lr}
 800e822:	4019      	ands	r1, r3
 800e824:	4b0f      	ldr	r3, [pc, #60]	; (800e864 <__ulp+0x48>)
 800e826:	18c9      	adds	r1, r1, r3
 800e828:	2900      	cmp	r1, #0
 800e82a:	dd04      	ble.n	800e836 <__ulp+0x1a>
 800e82c:	2200      	movs	r2, #0
 800e82e:	000b      	movs	r3, r1
 800e830:	0010      	movs	r0, r2
 800e832:	0019      	movs	r1, r3
 800e834:	bd10      	pop	{r4, pc}
 800e836:	4249      	negs	r1, r1
 800e838:	1509      	asrs	r1, r1, #20
 800e83a:	2200      	movs	r2, #0
 800e83c:	2300      	movs	r3, #0
 800e83e:	2913      	cmp	r1, #19
 800e840:	dc04      	bgt.n	800e84c <__ulp+0x30>
 800e842:	2080      	movs	r0, #128	; 0x80
 800e844:	0300      	lsls	r0, r0, #12
 800e846:	4108      	asrs	r0, r1
 800e848:	0003      	movs	r3, r0
 800e84a:	e7f1      	b.n	800e830 <__ulp+0x14>
 800e84c:	3914      	subs	r1, #20
 800e84e:	2001      	movs	r0, #1
 800e850:	291e      	cmp	r1, #30
 800e852:	dc02      	bgt.n	800e85a <__ulp+0x3e>
 800e854:	241f      	movs	r4, #31
 800e856:	1a61      	subs	r1, r4, r1
 800e858:	4088      	lsls	r0, r1
 800e85a:	0002      	movs	r2, r0
 800e85c:	e7e8      	b.n	800e830 <__ulp+0x14>
 800e85e:	46c0      	nop			; (mov r8, r8)
 800e860:	7ff00000 	.word	0x7ff00000
 800e864:	fcc00000 	.word	0xfcc00000

0800e868 <__b2d>:
 800e868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e86a:	0006      	movs	r6, r0
 800e86c:	6903      	ldr	r3, [r0, #16]
 800e86e:	3614      	adds	r6, #20
 800e870:	009b      	lsls	r3, r3, #2
 800e872:	18f3      	adds	r3, r6, r3
 800e874:	1f1d      	subs	r5, r3, #4
 800e876:	682c      	ldr	r4, [r5, #0]
 800e878:	000f      	movs	r7, r1
 800e87a:	0020      	movs	r0, r4
 800e87c:	9301      	str	r3, [sp, #4]
 800e87e:	f7ff fdc9 	bl	800e414 <__hi0bits>
 800e882:	2320      	movs	r3, #32
 800e884:	1a1b      	subs	r3, r3, r0
 800e886:	603b      	str	r3, [r7, #0]
 800e888:	491c      	ldr	r1, [pc, #112]	; (800e8fc <__b2d+0x94>)
 800e88a:	280a      	cmp	r0, #10
 800e88c:	dc16      	bgt.n	800e8bc <__b2d+0x54>
 800e88e:	230b      	movs	r3, #11
 800e890:	0027      	movs	r7, r4
 800e892:	1a1b      	subs	r3, r3, r0
 800e894:	40df      	lsrs	r7, r3
 800e896:	4339      	orrs	r1, r7
 800e898:	469c      	mov	ip, r3
 800e89a:	000b      	movs	r3, r1
 800e89c:	2100      	movs	r1, #0
 800e89e:	42ae      	cmp	r6, r5
 800e8a0:	d202      	bcs.n	800e8a8 <__b2d+0x40>
 800e8a2:	9901      	ldr	r1, [sp, #4]
 800e8a4:	3908      	subs	r1, #8
 800e8a6:	6809      	ldr	r1, [r1, #0]
 800e8a8:	3015      	adds	r0, #21
 800e8aa:	4084      	lsls	r4, r0
 800e8ac:	4660      	mov	r0, ip
 800e8ae:	40c1      	lsrs	r1, r0
 800e8b0:	430c      	orrs	r4, r1
 800e8b2:	0022      	movs	r2, r4
 800e8b4:	0010      	movs	r0, r2
 800e8b6:	0019      	movs	r1, r3
 800e8b8:	b003      	add	sp, #12
 800e8ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8bc:	2700      	movs	r7, #0
 800e8be:	42ae      	cmp	r6, r5
 800e8c0:	d202      	bcs.n	800e8c8 <__b2d+0x60>
 800e8c2:	9d01      	ldr	r5, [sp, #4]
 800e8c4:	3d08      	subs	r5, #8
 800e8c6:	682f      	ldr	r7, [r5, #0]
 800e8c8:	380b      	subs	r0, #11
 800e8ca:	4684      	mov	ip, r0
 800e8cc:	1e03      	subs	r3, r0, #0
 800e8ce:	d012      	beq.n	800e8f6 <__b2d+0x8e>
 800e8d0:	409c      	lsls	r4, r3
 800e8d2:	2020      	movs	r0, #32
 800e8d4:	4321      	orrs	r1, r4
 800e8d6:	003c      	movs	r4, r7
 800e8d8:	1ac0      	subs	r0, r0, r3
 800e8da:	40c4      	lsrs	r4, r0
 800e8dc:	4321      	orrs	r1, r4
 800e8de:	000b      	movs	r3, r1
 800e8e0:	2100      	movs	r1, #0
 800e8e2:	42b5      	cmp	r5, r6
 800e8e4:	d901      	bls.n	800e8ea <__b2d+0x82>
 800e8e6:	3d04      	subs	r5, #4
 800e8e8:	6829      	ldr	r1, [r5, #0]
 800e8ea:	4664      	mov	r4, ip
 800e8ec:	40c1      	lsrs	r1, r0
 800e8ee:	40a7      	lsls	r7, r4
 800e8f0:	430f      	orrs	r7, r1
 800e8f2:	003a      	movs	r2, r7
 800e8f4:	e7de      	b.n	800e8b4 <__b2d+0x4c>
 800e8f6:	4321      	orrs	r1, r4
 800e8f8:	000b      	movs	r3, r1
 800e8fa:	e7fa      	b.n	800e8f2 <__b2d+0x8a>
 800e8fc:	3ff00000 	.word	0x3ff00000

0800e900 <__d2b>:
 800e900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e902:	001d      	movs	r5, r3
 800e904:	2101      	movs	r1, #1
 800e906:	0014      	movs	r4, r2
 800e908:	9f08      	ldr	r7, [sp, #32]
 800e90a:	f7ff fcb6 	bl	800e27a <_Balloc>
 800e90e:	032b      	lsls	r3, r5, #12
 800e910:	006d      	lsls	r5, r5, #1
 800e912:	0006      	movs	r6, r0
 800e914:	0b1b      	lsrs	r3, r3, #12
 800e916:	0d6d      	lsrs	r5, r5, #21
 800e918:	d124      	bne.n	800e964 <__d2b+0x64>
 800e91a:	9301      	str	r3, [sp, #4]
 800e91c:	2c00      	cmp	r4, #0
 800e91e:	d027      	beq.n	800e970 <__d2b+0x70>
 800e920:	4668      	mov	r0, sp
 800e922:	9400      	str	r4, [sp, #0]
 800e924:	f7ff fd90 	bl	800e448 <__lo0bits>
 800e928:	9c00      	ldr	r4, [sp, #0]
 800e92a:	2800      	cmp	r0, #0
 800e92c:	d01e      	beq.n	800e96c <__d2b+0x6c>
 800e92e:	9b01      	ldr	r3, [sp, #4]
 800e930:	2120      	movs	r1, #32
 800e932:	001a      	movs	r2, r3
 800e934:	1a09      	subs	r1, r1, r0
 800e936:	408a      	lsls	r2, r1
 800e938:	40c3      	lsrs	r3, r0
 800e93a:	4322      	orrs	r2, r4
 800e93c:	6172      	str	r2, [r6, #20]
 800e93e:	9301      	str	r3, [sp, #4]
 800e940:	9c01      	ldr	r4, [sp, #4]
 800e942:	61b4      	str	r4, [r6, #24]
 800e944:	1e63      	subs	r3, r4, #1
 800e946:	419c      	sbcs	r4, r3
 800e948:	3401      	adds	r4, #1
 800e94a:	6134      	str	r4, [r6, #16]
 800e94c:	2d00      	cmp	r5, #0
 800e94e:	d018      	beq.n	800e982 <__d2b+0x82>
 800e950:	4b12      	ldr	r3, [pc, #72]	; (800e99c <__d2b+0x9c>)
 800e952:	18ed      	adds	r5, r5, r3
 800e954:	2335      	movs	r3, #53	; 0x35
 800e956:	182d      	adds	r5, r5, r0
 800e958:	603d      	str	r5, [r7, #0]
 800e95a:	1a18      	subs	r0, r3, r0
 800e95c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e95e:	6018      	str	r0, [r3, #0]
 800e960:	0030      	movs	r0, r6
 800e962:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e964:	2280      	movs	r2, #128	; 0x80
 800e966:	0352      	lsls	r2, r2, #13
 800e968:	4313      	orrs	r3, r2
 800e96a:	e7d6      	b.n	800e91a <__d2b+0x1a>
 800e96c:	6174      	str	r4, [r6, #20]
 800e96e:	e7e7      	b.n	800e940 <__d2b+0x40>
 800e970:	a801      	add	r0, sp, #4
 800e972:	f7ff fd69 	bl	800e448 <__lo0bits>
 800e976:	2401      	movs	r4, #1
 800e978:	9b01      	ldr	r3, [sp, #4]
 800e97a:	6134      	str	r4, [r6, #16]
 800e97c:	6173      	str	r3, [r6, #20]
 800e97e:	3020      	adds	r0, #32
 800e980:	e7e4      	b.n	800e94c <__d2b+0x4c>
 800e982:	4b07      	ldr	r3, [pc, #28]	; (800e9a0 <__d2b+0xa0>)
 800e984:	18c0      	adds	r0, r0, r3
 800e986:	4b07      	ldr	r3, [pc, #28]	; (800e9a4 <__d2b+0xa4>)
 800e988:	6038      	str	r0, [r7, #0]
 800e98a:	18e3      	adds	r3, r4, r3
 800e98c:	009b      	lsls	r3, r3, #2
 800e98e:	18f3      	adds	r3, r6, r3
 800e990:	6958      	ldr	r0, [r3, #20]
 800e992:	f7ff fd3f 	bl	800e414 <__hi0bits>
 800e996:	0164      	lsls	r4, r4, #5
 800e998:	1a20      	subs	r0, r4, r0
 800e99a:	e7df      	b.n	800e95c <__d2b+0x5c>
 800e99c:	fffffbcd 	.word	0xfffffbcd
 800e9a0:	fffffbce 	.word	0xfffffbce
 800e9a4:	3fffffff 	.word	0x3fffffff

0800e9a8 <__ratio>:
 800e9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9aa:	b085      	sub	sp, #20
 800e9ac:	000f      	movs	r7, r1
 800e9ae:	a902      	add	r1, sp, #8
 800e9b0:	0006      	movs	r6, r0
 800e9b2:	f7ff ff59 	bl	800e868 <__b2d>
 800e9b6:	0004      	movs	r4, r0
 800e9b8:	000d      	movs	r5, r1
 800e9ba:	0038      	movs	r0, r7
 800e9bc:	a903      	add	r1, sp, #12
 800e9be:	9400      	str	r4, [sp, #0]
 800e9c0:	9501      	str	r5, [sp, #4]
 800e9c2:	f7ff ff51 	bl	800e868 <__b2d>
 800e9c6:	6936      	ldr	r6, [r6, #16]
 800e9c8:	693f      	ldr	r7, [r7, #16]
 800e9ca:	0002      	movs	r2, r0
 800e9cc:	1bf7      	subs	r7, r6, r7
 800e9ce:	017e      	lsls	r6, r7, #5
 800e9d0:	46b4      	mov	ip, r6
 800e9d2:	9f03      	ldr	r7, [sp, #12]
 800e9d4:	9e02      	ldr	r6, [sp, #8]
 800e9d6:	000b      	movs	r3, r1
 800e9d8:	1bf6      	subs	r6, r6, r7
 800e9da:	4466      	add	r6, ip
 800e9dc:	0537      	lsls	r7, r6, #20
 800e9de:	2e00      	cmp	r6, #0
 800e9e0:	dd07      	ble.n	800e9f2 <__ratio+0x4a>
 800e9e2:	1979      	adds	r1, r7, r5
 800e9e4:	9101      	str	r1, [sp, #4]
 800e9e6:	9800      	ldr	r0, [sp, #0]
 800e9e8:	9901      	ldr	r1, [sp, #4]
 800e9ea:	f7f7 fce7 	bl	80063bc <__aeabi_ddiv>
 800e9ee:	b005      	add	sp, #20
 800e9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9f2:	1bcb      	subs	r3, r1, r7
 800e9f4:	e7f7      	b.n	800e9e6 <__ratio+0x3e>

0800e9f6 <__copybits>:
 800e9f6:	0013      	movs	r3, r2
 800e9f8:	3901      	subs	r1, #1
 800e9fa:	b510      	push	{r4, lr}
 800e9fc:	1149      	asrs	r1, r1, #5
 800e9fe:	6912      	ldr	r2, [r2, #16]
 800ea00:	3101      	adds	r1, #1
 800ea02:	0089      	lsls	r1, r1, #2
 800ea04:	3314      	adds	r3, #20
 800ea06:	0092      	lsls	r2, r2, #2
 800ea08:	1841      	adds	r1, r0, r1
 800ea0a:	189a      	adds	r2, r3, r2
 800ea0c:	429a      	cmp	r2, r3
 800ea0e:	d803      	bhi.n	800ea18 <__copybits+0x22>
 800ea10:	2300      	movs	r3, #0
 800ea12:	4281      	cmp	r1, r0
 800ea14:	d803      	bhi.n	800ea1e <__copybits+0x28>
 800ea16:	bd10      	pop	{r4, pc}
 800ea18:	cb10      	ldmia	r3!, {r4}
 800ea1a:	c010      	stmia	r0!, {r4}
 800ea1c:	e7f6      	b.n	800ea0c <__copybits+0x16>
 800ea1e:	c008      	stmia	r0!, {r3}
 800ea20:	e7f7      	b.n	800ea12 <__copybits+0x1c>

0800ea22 <__any_on>:
 800ea22:	0002      	movs	r2, r0
 800ea24:	6900      	ldr	r0, [r0, #16]
 800ea26:	b510      	push	{r4, lr}
 800ea28:	3214      	adds	r2, #20
 800ea2a:	114b      	asrs	r3, r1, #5
 800ea2c:	4298      	cmp	r0, r3
 800ea2e:	db12      	blt.n	800ea56 <__any_on+0x34>
 800ea30:	dd0b      	ble.n	800ea4a <__any_on+0x28>
 800ea32:	201f      	movs	r0, #31
 800ea34:	4001      	ands	r1, r0
 800ea36:	d008      	beq.n	800ea4a <__any_on+0x28>
 800ea38:	0098      	lsls	r0, r3, #2
 800ea3a:	5884      	ldr	r4, [r0, r2]
 800ea3c:	0020      	movs	r0, r4
 800ea3e:	40c8      	lsrs	r0, r1
 800ea40:	4088      	lsls	r0, r1
 800ea42:	0001      	movs	r1, r0
 800ea44:	2001      	movs	r0, #1
 800ea46:	428c      	cmp	r4, r1
 800ea48:	d104      	bne.n	800ea54 <__any_on+0x32>
 800ea4a:	009b      	lsls	r3, r3, #2
 800ea4c:	18d3      	adds	r3, r2, r3
 800ea4e:	4293      	cmp	r3, r2
 800ea50:	d803      	bhi.n	800ea5a <__any_on+0x38>
 800ea52:	2000      	movs	r0, #0
 800ea54:	bd10      	pop	{r4, pc}
 800ea56:	0003      	movs	r3, r0
 800ea58:	e7f7      	b.n	800ea4a <__any_on+0x28>
 800ea5a:	3b04      	subs	r3, #4
 800ea5c:	6819      	ldr	r1, [r3, #0]
 800ea5e:	2900      	cmp	r1, #0
 800ea60:	d0f5      	beq.n	800ea4e <__any_on+0x2c>
 800ea62:	2001      	movs	r0, #1
 800ea64:	e7f6      	b.n	800ea54 <__any_on+0x32>

0800ea66 <_calloc_r>:
 800ea66:	434a      	muls	r2, r1
 800ea68:	b570      	push	{r4, r5, r6, lr}
 800ea6a:	0011      	movs	r1, r2
 800ea6c:	0014      	movs	r4, r2
 800ea6e:	f000 f853 	bl	800eb18 <_malloc_r>
 800ea72:	1e05      	subs	r5, r0, #0
 800ea74:	d003      	beq.n	800ea7e <_calloc_r+0x18>
 800ea76:	0022      	movs	r2, r4
 800ea78:	2100      	movs	r1, #0
 800ea7a:	f7fc fbd7 	bl	800b22c <memset>
 800ea7e:	0028      	movs	r0, r5
 800ea80:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ea84 <_free_r>:
 800ea84:	b570      	push	{r4, r5, r6, lr}
 800ea86:	0005      	movs	r5, r0
 800ea88:	2900      	cmp	r1, #0
 800ea8a:	d010      	beq.n	800eaae <_free_r+0x2a>
 800ea8c:	1f0c      	subs	r4, r1, #4
 800ea8e:	6823      	ldr	r3, [r4, #0]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	da00      	bge.n	800ea96 <_free_r+0x12>
 800ea94:	18e4      	adds	r4, r4, r3
 800ea96:	0028      	movs	r0, r5
 800ea98:	f000 fdf1 	bl	800f67e <__malloc_lock>
 800ea9c:	4a1d      	ldr	r2, [pc, #116]	; (800eb14 <_free_r+0x90>)
 800ea9e:	6813      	ldr	r3, [r2, #0]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d105      	bne.n	800eab0 <_free_r+0x2c>
 800eaa4:	6063      	str	r3, [r4, #4]
 800eaa6:	6014      	str	r4, [r2, #0]
 800eaa8:	0028      	movs	r0, r5
 800eaaa:	f000 fde9 	bl	800f680 <__malloc_unlock>
 800eaae:	bd70      	pop	{r4, r5, r6, pc}
 800eab0:	42a3      	cmp	r3, r4
 800eab2:	d909      	bls.n	800eac8 <_free_r+0x44>
 800eab4:	6821      	ldr	r1, [r4, #0]
 800eab6:	1860      	adds	r0, r4, r1
 800eab8:	4283      	cmp	r3, r0
 800eaba:	d1f3      	bne.n	800eaa4 <_free_r+0x20>
 800eabc:	6818      	ldr	r0, [r3, #0]
 800eabe:	685b      	ldr	r3, [r3, #4]
 800eac0:	1841      	adds	r1, r0, r1
 800eac2:	6021      	str	r1, [r4, #0]
 800eac4:	e7ee      	b.n	800eaa4 <_free_r+0x20>
 800eac6:	0013      	movs	r3, r2
 800eac8:	685a      	ldr	r2, [r3, #4]
 800eaca:	2a00      	cmp	r2, #0
 800eacc:	d001      	beq.n	800ead2 <_free_r+0x4e>
 800eace:	42a2      	cmp	r2, r4
 800ead0:	d9f9      	bls.n	800eac6 <_free_r+0x42>
 800ead2:	6819      	ldr	r1, [r3, #0]
 800ead4:	1858      	adds	r0, r3, r1
 800ead6:	42a0      	cmp	r0, r4
 800ead8:	d10b      	bne.n	800eaf2 <_free_r+0x6e>
 800eada:	6820      	ldr	r0, [r4, #0]
 800eadc:	1809      	adds	r1, r1, r0
 800eade:	1858      	adds	r0, r3, r1
 800eae0:	6019      	str	r1, [r3, #0]
 800eae2:	4282      	cmp	r2, r0
 800eae4:	d1e0      	bne.n	800eaa8 <_free_r+0x24>
 800eae6:	6810      	ldr	r0, [r2, #0]
 800eae8:	6852      	ldr	r2, [r2, #4]
 800eaea:	1841      	adds	r1, r0, r1
 800eaec:	6019      	str	r1, [r3, #0]
 800eaee:	605a      	str	r2, [r3, #4]
 800eaf0:	e7da      	b.n	800eaa8 <_free_r+0x24>
 800eaf2:	42a0      	cmp	r0, r4
 800eaf4:	d902      	bls.n	800eafc <_free_r+0x78>
 800eaf6:	230c      	movs	r3, #12
 800eaf8:	602b      	str	r3, [r5, #0]
 800eafa:	e7d5      	b.n	800eaa8 <_free_r+0x24>
 800eafc:	6821      	ldr	r1, [r4, #0]
 800eafe:	1860      	adds	r0, r4, r1
 800eb00:	4282      	cmp	r2, r0
 800eb02:	d103      	bne.n	800eb0c <_free_r+0x88>
 800eb04:	6810      	ldr	r0, [r2, #0]
 800eb06:	6852      	ldr	r2, [r2, #4]
 800eb08:	1841      	adds	r1, r0, r1
 800eb0a:	6021      	str	r1, [r4, #0]
 800eb0c:	6062      	str	r2, [r4, #4]
 800eb0e:	605c      	str	r4, [r3, #4]
 800eb10:	e7ca      	b.n	800eaa8 <_free_r+0x24>
 800eb12:	46c0      	nop			; (mov r8, r8)
 800eb14:	20000340 	.word	0x20000340

0800eb18 <_malloc_r>:
 800eb18:	2303      	movs	r3, #3
 800eb1a:	b570      	push	{r4, r5, r6, lr}
 800eb1c:	1ccd      	adds	r5, r1, #3
 800eb1e:	439d      	bics	r5, r3
 800eb20:	3508      	adds	r5, #8
 800eb22:	0006      	movs	r6, r0
 800eb24:	2d0c      	cmp	r5, #12
 800eb26:	d21e      	bcs.n	800eb66 <_malloc_r+0x4e>
 800eb28:	250c      	movs	r5, #12
 800eb2a:	42a9      	cmp	r1, r5
 800eb2c:	d81d      	bhi.n	800eb6a <_malloc_r+0x52>
 800eb2e:	0030      	movs	r0, r6
 800eb30:	f000 fda5 	bl	800f67e <__malloc_lock>
 800eb34:	4a25      	ldr	r2, [pc, #148]	; (800ebcc <_malloc_r+0xb4>)
 800eb36:	6814      	ldr	r4, [r2, #0]
 800eb38:	0021      	movs	r1, r4
 800eb3a:	2900      	cmp	r1, #0
 800eb3c:	d119      	bne.n	800eb72 <_malloc_r+0x5a>
 800eb3e:	4c24      	ldr	r4, [pc, #144]	; (800ebd0 <_malloc_r+0xb8>)
 800eb40:	6823      	ldr	r3, [r4, #0]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d103      	bne.n	800eb4e <_malloc_r+0x36>
 800eb46:	0030      	movs	r0, r6
 800eb48:	f000 fae2 	bl	800f110 <_sbrk_r>
 800eb4c:	6020      	str	r0, [r4, #0]
 800eb4e:	0029      	movs	r1, r5
 800eb50:	0030      	movs	r0, r6
 800eb52:	f000 fadd 	bl	800f110 <_sbrk_r>
 800eb56:	1c43      	adds	r3, r0, #1
 800eb58:	d12b      	bne.n	800ebb2 <_malloc_r+0x9a>
 800eb5a:	230c      	movs	r3, #12
 800eb5c:	0030      	movs	r0, r6
 800eb5e:	6033      	str	r3, [r6, #0]
 800eb60:	f000 fd8e 	bl	800f680 <__malloc_unlock>
 800eb64:	e003      	b.n	800eb6e <_malloc_r+0x56>
 800eb66:	2d00      	cmp	r5, #0
 800eb68:	dadf      	bge.n	800eb2a <_malloc_r+0x12>
 800eb6a:	230c      	movs	r3, #12
 800eb6c:	6033      	str	r3, [r6, #0]
 800eb6e:	2000      	movs	r0, #0
 800eb70:	bd70      	pop	{r4, r5, r6, pc}
 800eb72:	680b      	ldr	r3, [r1, #0]
 800eb74:	1b5b      	subs	r3, r3, r5
 800eb76:	d419      	bmi.n	800ebac <_malloc_r+0x94>
 800eb78:	2b0b      	cmp	r3, #11
 800eb7a:	d903      	bls.n	800eb84 <_malloc_r+0x6c>
 800eb7c:	600b      	str	r3, [r1, #0]
 800eb7e:	18cc      	adds	r4, r1, r3
 800eb80:	6025      	str	r5, [r4, #0]
 800eb82:	e003      	b.n	800eb8c <_malloc_r+0x74>
 800eb84:	684b      	ldr	r3, [r1, #4]
 800eb86:	428c      	cmp	r4, r1
 800eb88:	d10d      	bne.n	800eba6 <_malloc_r+0x8e>
 800eb8a:	6013      	str	r3, [r2, #0]
 800eb8c:	0030      	movs	r0, r6
 800eb8e:	f000 fd77 	bl	800f680 <__malloc_unlock>
 800eb92:	0020      	movs	r0, r4
 800eb94:	2207      	movs	r2, #7
 800eb96:	300b      	adds	r0, #11
 800eb98:	1d23      	adds	r3, r4, #4
 800eb9a:	4390      	bics	r0, r2
 800eb9c:	1ac3      	subs	r3, r0, r3
 800eb9e:	d0e7      	beq.n	800eb70 <_malloc_r+0x58>
 800eba0:	425a      	negs	r2, r3
 800eba2:	50e2      	str	r2, [r4, r3]
 800eba4:	e7e4      	b.n	800eb70 <_malloc_r+0x58>
 800eba6:	6063      	str	r3, [r4, #4]
 800eba8:	000c      	movs	r4, r1
 800ebaa:	e7ef      	b.n	800eb8c <_malloc_r+0x74>
 800ebac:	000c      	movs	r4, r1
 800ebae:	6849      	ldr	r1, [r1, #4]
 800ebb0:	e7c3      	b.n	800eb3a <_malloc_r+0x22>
 800ebb2:	2303      	movs	r3, #3
 800ebb4:	1cc4      	adds	r4, r0, #3
 800ebb6:	439c      	bics	r4, r3
 800ebb8:	42a0      	cmp	r0, r4
 800ebba:	d0e1      	beq.n	800eb80 <_malloc_r+0x68>
 800ebbc:	1a21      	subs	r1, r4, r0
 800ebbe:	0030      	movs	r0, r6
 800ebc0:	f000 faa6 	bl	800f110 <_sbrk_r>
 800ebc4:	1c43      	adds	r3, r0, #1
 800ebc6:	d1db      	bne.n	800eb80 <_malloc_r+0x68>
 800ebc8:	e7c7      	b.n	800eb5a <_malloc_r+0x42>
 800ebca:	46c0      	nop			; (mov r8, r8)
 800ebcc:	20000340 	.word	0x20000340
 800ebd0:	20000344 	.word	0x20000344

0800ebd4 <__ssputs_r>:
 800ebd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebd6:	688e      	ldr	r6, [r1, #8]
 800ebd8:	b085      	sub	sp, #20
 800ebda:	0007      	movs	r7, r0
 800ebdc:	000c      	movs	r4, r1
 800ebde:	9203      	str	r2, [sp, #12]
 800ebe0:	9301      	str	r3, [sp, #4]
 800ebe2:	429e      	cmp	r6, r3
 800ebe4:	d83c      	bhi.n	800ec60 <__ssputs_r+0x8c>
 800ebe6:	2390      	movs	r3, #144	; 0x90
 800ebe8:	898a      	ldrh	r2, [r1, #12]
 800ebea:	00db      	lsls	r3, r3, #3
 800ebec:	421a      	tst	r2, r3
 800ebee:	d034      	beq.n	800ec5a <__ssputs_r+0x86>
 800ebf0:	2503      	movs	r5, #3
 800ebf2:	6909      	ldr	r1, [r1, #16]
 800ebf4:	6823      	ldr	r3, [r4, #0]
 800ebf6:	1a5b      	subs	r3, r3, r1
 800ebf8:	9302      	str	r3, [sp, #8]
 800ebfa:	6963      	ldr	r3, [r4, #20]
 800ebfc:	9802      	ldr	r0, [sp, #8]
 800ebfe:	435d      	muls	r5, r3
 800ec00:	0feb      	lsrs	r3, r5, #31
 800ec02:	195d      	adds	r5, r3, r5
 800ec04:	9b01      	ldr	r3, [sp, #4]
 800ec06:	106d      	asrs	r5, r5, #1
 800ec08:	3301      	adds	r3, #1
 800ec0a:	181b      	adds	r3, r3, r0
 800ec0c:	42ab      	cmp	r3, r5
 800ec0e:	d900      	bls.n	800ec12 <__ssputs_r+0x3e>
 800ec10:	001d      	movs	r5, r3
 800ec12:	0553      	lsls	r3, r2, #21
 800ec14:	d532      	bpl.n	800ec7c <__ssputs_r+0xa8>
 800ec16:	0029      	movs	r1, r5
 800ec18:	0038      	movs	r0, r7
 800ec1a:	f7ff ff7d 	bl	800eb18 <_malloc_r>
 800ec1e:	1e06      	subs	r6, r0, #0
 800ec20:	d109      	bne.n	800ec36 <__ssputs_r+0x62>
 800ec22:	230c      	movs	r3, #12
 800ec24:	603b      	str	r3, [r7, #0]
 800ec26:	2340      	movs	r3, #64	; 0x40
 800ec28:	2001      	movs	r0, #1
 800ec2a:	89a2      	ldrh	r2, [r4, #12]
 800ec2c:	4240      	negs	r0, r0
 800ec2e:	4313      	orrs	r3, r2
 800ec30:	81a3      	strh	r3, [r4, #12]
 800ec32:	b005      	add	sp, #20
 800ec34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec36:	9a02      	ldr	r2, [sp, #8]
 800ec38:	6921      	ldr	r1, [r4, #16]
 800ec3a:	f7fc faee 	bl	800b21a <memcpy>
 800ec3e:	89a3      	ldrh	r3, [r4, #12]
 800ec40:	4a14      	ldr	r2, [pc, #80]	; (800ec94 <__ssputs_r+0xc0>)
 800ec42:	401a      	ands	r2, r3
 800ec44:	2380      	movs	r3, #128	; 0x80
 800ec46:	4313      	orrs	r3, r2
 800ec48:	81a3      	strh	r3, [r4, #12]
 800ec4a:	9b02      	ldr	r3, [sp, #8]
 800ec4c:	6126      	str	r6, [r4, #16]
 800ec4e:	18f6      	adds	r6, r6, r3
 800ec50:	6026      	str	r6, [r4, #0]
 800ec52:	6165      	str	r5, [r4, #20]
 800ec54:	9e01      	ldr	r6, [sp, #4]
 800ec56:	1aed      	subs	r5, r5, r3
 800ec58:	60a5      	str	r5, [r4, #8]
 800ec5a:	9b01      	ldr	r3, [sp, #4]
 800ec5c:	429e      	cmp	r6, r3
 800ec5e:	d900      	bls.n	800ec62 <__ssputs_r+0x8e>
 800ec60:	9e01      	ldr	r6, [sp, #4]
 800ec62:	0032      	movs	r2, r6
 800ec64:	9903      	ldr	r1, [sp, #12]
 800ec66:	6820      	ldr	r0, [r4, #0]
 800ec68:	f000 fcf6 	bl	800f658 <memmove>
 800ec6c:	68a3      	ldr	r3, [r4, #8]
 800ec6e:	2000      	movs	r0, #0
 800ec70:	1b9b      	subs	r3, r3, r6
 800ec72:	60a3      	str	r3, [r4, #8]
 800ec74:	6823      	ldr	r3, [r4, #0]
 800ec76:	199e      	adds	r6, r3, r6
 800ec78:	6026      	str	r6, [r4, #0]
 800ec7a:	e7da      	b.n	800ec32 <__ssputs_r+0x5e>
 800ec7c:	002a      	movs	r2, r5
 800ec7e:	0038      	movs	r0, r7
 800ec80:	f000 fcff 	bl	800f682 <_realloc_r>
 800ec84:	1e06      	subs	r6, r0, #0
 800ec86:	d1e0      	bne.n	800ec4a <__ssputs_r+0x76>
 800ec88:	6921      	ldr	r1, [r4, #16]
 800ec8a:	0038      	movs	r0, r7
 800ec8c:	f7ff fefa 	bl	800ea84 <_free_r>
 800ec90:	e7c7      	b.n	800ec22 <__ssputs_r+0x4e>
 800ec92:	46c0      	nop			; (mov r8, r8)
 800ec94:	fffffb7f 	.word	0xfffffb7f

0800ec98 <_svfiprintf_r>:
 800ec98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec9a:	b0a1      	sub	sp, #132	; 0x84
 800ec9c:	9003      	str	r0, [sp, #12]
 800ec9e:	001d      	movs	r5, r3
 800eca0:	898b      	ldrh	r3, [r1, #12]
 800eca2:	000f      	movs	r7, r1
 800eca4:	0016      	movs	r6, r2
 800eca6:	061b      	lsls	r3, r3, #24
 800eca8:	d511      	bpl.n	800ecce <_svfiprintf_r+0x36>
 800ecaa:	690b      	ldr	r3, [r1, #16]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d10e      	bne.n	800ecce <_svfiprintf_r+0x36>
 800ecb0:	2140      	movs	r1, #64	; 0x40
 800ecb2:	f7ff ff31 	bl	800eb18 <_malloc_r>
 800ecb6:	6038      	str	r0, [r7, #0]
 800ecb8:	6138      	str	r0, [r7, #16]
 800ecba:	2800      	cmp	r0, #0
 800ecbc:	d105      	bne.n	800ecca <_svfiprintf_r+0x32>
 800ecbe:	230c      	movs	r3, #12
 800ecc0:	9a03      	ldr	r2, [sp, #12]
 800ecc2:	3801      	subs	r0, #1
 800ecc4:	6013      	str	r3, [r2, #0]
 800ecc6:	b021      	add	sp, #132	; 0x84
 800ecc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecca:	2340      	movs	r3, #64	; 0x40
 800eccc:	617b      	str	r3, [r7, #20]
 800ecce:	2300      	movs	r3, #0
 800ecd0:	ac08      	add	r4, sp, #32
 800ecd2:	6163      	str	r3, [r4, #20]
 800ecd4:	3320      	adds	r3, #32
 800ecd6:	7663      	strb	r3, [r4, #25]
 800ecd8:	3310      	adds	r3, #16
 800ecda:	76a3      	strb	r3, [r4, #26]
 800ecdc:	9507      	str	r5, [sp, #28]
 800ecde:	0035      	movs	r5, r6
 800ece0:	782b      	ldrb	r3, [r5, #0]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d001      	beq.n	800ecea <_svfiprintf_r+0x52>
 800ece6:	2b25      	cmp	r3, #37	; 0x25
 800ece8:	d146      	bne.n	800ed78 <_svfiprintf_r+0xe0>
 800ecea:	1bab      	subs	r3, r5, r6
 800ecec:	9305      	str	r3, [sp, #20]
 800ecee:	d00c      	beq.n	800ed0a <_svfiprintf_r+0x72>
 800ecf0:	0032      	movs	r2, r6
 800ecf2:	0039      	movs	r1, r7
 800ecf4:	9803      	ldr	r0, [sp, #12]
 800ecf6:	f7ff ff6d 	bl	800ebd4 <__ssputs_r>
 800ecfa:	1c43      	adds	r3, r0, #1
 800ecfc:	d100      	bne.n	800ed00 <_svfiprintf_r+0x68>
 800ecfe:	e0ae      	b.n	800ee5e <_svfiprintf_r+0x1c6>
 800ed00:	6962      	ldr	r2, [r4, #20]
 800ed02:	9b05      	ldr	r3, [sp, #20]
 800ed04:	4694      	mov	ip, r2
 800ed06:	4463      	add	r3, ip
 800ed08:	6163      	str	r3, [r4, #20]
 800ed0a:	782b      	ldrb	r3, [r5, #0]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d100      	bne.n	800ed12 <_svfiprintf_r+0x7a>
 800ed10:	e0a5      	b.n	800ee5e <_svfiprintf_r+0x1c6>
 800ed12:	2201      	movs	r2, #1
 800ed14:	2300      	movs	r3, #0
 800ed16:	4252      	negs	r2, r2
 800ed18:	6062      	str	r2, [r4, #4]
 800ed1a:	a904      	add	r1, sp, #16
 800ed1c:	3254      	adds	r2, #84	; 0x54
 800ed1e:	1852      	adds	r2, r2, r1
 800ed20:	1c6e      	adds	r6, r5, #1
 800ed22:	6023      	str	r3, [r4, #0]
 800ed24:	60e3      	str	r3, [r4, #12]
 800ed26:	60a3      	str	r3, [r4, #8]
 800ed28:	7013      	strb	r3, [r2, #0]
 800ed2a:	65a3      	str	r3, [r4, #88]	; 0x58
 800ed2c:	7831      	ldrb	r1, [r6, #0]
 800ed2e:	2205      	movs	r2, #5
 800ed30:	4853      	ldr	r0, [pc, #332]	; (800ee80 <_svfiprintf_r+0x1e8>)
 800ed32:	f7ff fa97 	bl	800e264 <memchr>
 800ed36:	1c75      	adds	r5, r6, #1
 800ed38:	2800      	cmp	r0, #0
 800ed3a:	d11f      	bne.n	800ed7c <_svfiprintf_r+0xe4>
 800ed3c:	6822      	ldr	r2, [r4, #0]
 800ed3e:	06d3      	lsls	r3, r2, #27
 800ed40:	d504      	bpl.n	800ed4c <_svfiprintf_r+0xb4>
 800ed42:	2353      	movs	r3, #83	; 0x53
 800ed44:	a904      	add	r1, sp, #16
 800ed46:	185b      	adds	r3, r3, r1
 800ed48:	2120      	movs	r1, #32
 800ed4a:	7019      	strb	r1, [r3, #0]
 800ed4c:	0713      	lsls	r3, r2, #28
 800ed4e:	d504      	bpl.n	800ed5a <_svfiprintf_r+0xc2>
 800ed50:	2353      	movs	r3, #83	; 0x53
 800ed52:	a904      	add	r1, sp, #16
 800ed54:	185b      	adds	r3, r3, r1
 800ed56:	212b      	movs	r1, #43	; 0x2b
 800ed58:	7019      	strb	r1, [r3, #0]
 800ed5a:	7833      	ldrb	r3, [r6, #0]
 800ed5c:	2b2a      	cmp	r3, #42	; 0x2a
 800ed5e:	d016      	beq.n	800ed8e <_svfiprintf_r+0xf6>
 800ed60:	0035      	movs	r5, r6
 800ed62:	2100      	movs	r1, #0
 800ed64:	200a      	movs	r0, #10
 800ed66:	68e3      	ldr	r3, [r4, #12]
 800ed68:	782a      	ldrb	r2, [r5, #0]
 800ed6a:	1c6e      	adds	r6, r5, #1
 800ed6c:	3a30      	subs	r2, #48	; 0x30
 800ed6e:	2a09      	cmp	r2, #9
 800ed70:	d94e      	bls.n	800ee10 <_svfiprintf_r+0x178>
 800ed72:	2900      	cmp	r1, #0
 800ed74:	d018      	beq.n	800eda8 <_svfiprintf_r+0x110>
 800ed76:	e010      	b.n	800ed9a <_svfiprintf_r+0x102>
 800ed78:	3501      	adds	r5, #1
 800ed7a:	e7b1      	b.n	800ece0 <_svfiprintf_r+0x48>
 800ed7c:	4b40      	ldr	r3, [pc, #256]	; (800ee80 <_svfiprintf_r+0x1e8>)
 800ed7e:	6822      	ldr	r2, [r4, #0]
 800ed80:	1ac0      	subs	r0, r0, r3
 800ed82:	2301      	movs	r3, #1
 800ed84:	4083      	lsls	r3, r0
 800ed86:	4313      	orrs	r3, r2
 800ed88:	6023      	str	r3, [r4, #0]
 800ed8a:	002e      	movs	r6, r5
 800ed8c:	e7ce      	b.n	800ed2c <_svfiprintf_r+0x94>
 800ed8e:	9b07      	ldr	r3, [sp, #28]
 800ed90:	1d19      	adds	r1, r3, #4
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	9107      	str	r1, [sp, #28]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	db01      	blt.n	800ed9e <_svfiprintf_r+0x106>
 800ed9a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed9c:	e004      	b.n	800eda8 <_svfiprintf_r+0x110>
 800ed9e:	425b      	negs	r3, r3
 800eda0:	60e3      	str	r3, [r4, #12]
 800eda2:	2302      	movs	r3, #2
 800eda4:	4313      	orrs	r3, r2
 800eda6:	6023      	str	r3, [r4, #0]
 800eda8:	782b      	ldrb	r3, [r5, #0]
 800edaa:	2b2e      	cmp	r3, #46	; 0x2e
 800edac:	d10a      	bne.n	800edc4 <_svfiprintf_r+0x12c>
 800edae:	786b      	ldrb	r3, [r5, #1]
 800edb0:	2b2a      	cmp	r3, #42	; 0x2a
 800edb2:	d135      	bne.n	800ee20 <_svfiprintf_r+0x188>
 800edb4:	9b07      	ldr	r3, [sp, #28]
 800edb6:	3502      	adds	r5, #2
 800edb8:	1d1a      	adds	r2, r3, #4
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	9207      	str	r2, [sp, #28]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	db2b      	blt.n	800ee1a <_svfiprintf_r+0x182>
 800edc2:	9309      	str	r3, [sp, #36]	; 0x24
 800edc4:	4e2f      	ldr	r6, [pc, #188]	; (800ee84 <_svfiprintf_r+0x1ec>)
 800edc6:	7829      	ldrb	r1, [r5, #0]
 800edc8:	2203      	movs	r2, #3
 800edca:	0030      	movs	r0, r6
 800edcc:	f7ff fa4a 	bl	800e264 <memchr>
 800edd0:	2800      	cmp	r0, #0
 800edd2:	d006      	beq.n	800ede2 <_svfiprintf_r+0x14a>
 800edd4:	2340      	movs	r3, #64	; 0x40
 800edd6:	1b80      	subs	r0, r0, r6
 800edd8:	4083      	lsls	r3, r0
 800edda:	6822      	ldr	r2, [r4, #0]
 800eddc:	3501      	adds	r5, #1
 800edde:	4313      	orrs	r3, r2
 800ede0:	6023      	str	r3, [r4, #0]
 800ede2:	7829      	ldrb	r1, [r5, #0]
 800ede4:	2206      	movs	r2, #6
 800ede6:	4828      	ldr	r0, [pc, #160]	; (800ee88 <_svfiprintf_r+0x1f0>)
 800ede8:	1c6e      	adds	r6, r5, #1
 800edea:	7621      	strb	r1, [r4, #24]
 800edec:	f7ff fa3a 	bl	800e264 <memchr>
 800edf0:	2800      	cmp	r0, #0
 800edf2:	d03c      	beq.n	800ee6e <_svfiprintf_r+0x1d6>
 800edf4:	4b25      	ldr	r3, [pc, #148]	; (800ee8c <_svfiprintf_r+0x1f4>)
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d125      	bne.n	800ee46 <_svfiprintf_r+0x1ae>
 800edfa:	2207      	movs	r2, #7
 800edfc:	9b07      	ldr	r3, [sp, #28]
 800edfe:	3307      	adds	r3, #7
 800ee00:	4393      	bics	r3, r2
 800ee02:	3308      	adds	r3, #8
 800ee04:	9307      	str	r3, [sp, #28]
 800ee06:	6963      	ldr	r3, [r4, #20]
 800ee08:	9a04      	ldr	r2, [sp, #16]
 800ee0a:	189b      	adds	r3, r3, r2
 800ee0c:	6163      	str	r3, [r4, #20]
 800ee0e:	e766      	b.n	800ecde <_svfiprintf_r+0x46>
 800ee10:	4343      	muls	r3, r0
 800ee12:	2101      	movs	r1, #1
 800ee14:	189b      	adds	r3, r3, r2
 800ee16:	0035      	movs	r5, r6
 800ee18:	e7a6      	b.n	800ed68 <_svfiprintf_r+0xd0>
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	425b      	negs	r3, r3
 800ee1e:	e7d0      	b.n	800edc2 <_svfiprintf_r+0x12a>
 800ee20:	2300      	movs	r3, #0
 800ee22:	200a      	movs	r0, #10
 800ee24:	001a      	movs	r2, r3
 800ee26:	3501      	adds	r5, #1
 800ee28:	6063      	str	r3, [r4, #4]
 800ee2a:	7829      	ldrb	r1, [r5, #0]
 800ee2c:	1c6e      	adds	r6, r5, #1
 800ee2e:	3930      	subs	r1, #48	; 0x30
 800ee30:	2909      	cmp	r1, #9
 800ee32:	d903      	bls.n	800ee3c <_svfiprintf_r+0x1a4>
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d0c5      	beq.n	800edc4 <_svfiprintf_r+0x12c>
 800ee38:	9209      	str	r2, [sp, #36]	; 0x24
 800ee3a:	e7c3      	b.n	800edc4 <_svfiprintf_r+0x12c>
 800ee3c:	4342      	muls	r2, r0
 800ee3e:	2301      	movs	r3, #1
 800ee40:	1852      	adds	r2, r2, r1
 800ee42:	0035      	movs	r5, r6
 800ee44:	e7f1      	b.n	800ee2a <_svfiprintf_r+0x192>
 800ee46:	ab07      	add	r3, sp, #28
 800ee48:	9300      	str	r3, [sp, #0]
 800ee4a:	003a      	movs	r2, r7
 800ee4c:	4b10      	ldr	r3, [pc, #64]	; (800ee90 <_svfiprintf_r+0x1f8>)
 800ee4e:	0021      	movs	r1, r4
 800ee50:	9803      	ldr	r0, [sp, #12]
 800ee52:	f7fc fa8f 	bl	800b374 <_printf_float>
 800ee56:	9004      	str	r0, [sp, #16]
 800ee58:	9b04      	ldr	r3, [sp, #16]
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	d1d3      	bne.n	800ee06 <_svfiprintf_r+0x16e>
 800ee5e:	89bb      	ldrh	r3, [r7, #12]
 800ee60:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ee62:	065b      	lsls	r3, r3, #25
 800ee64:	d400      	bmi.n	800ee68 <_svfiprintf_r+0x1d0>
 800ee66:	e72e      	b.n	800ecc6 <_svfiprintf_r+0x2e>
 800ee68:	2001      	movs	r0, #1
 800ee6a:	4240      	negs	r0, r0
 800ee6c:	e72b      	b.n	800ecc6 <_svfiprintf_r+0x2e>
 800ee6e:	ab07      	add	r3, sp, #28
 800ee70:	9300      	str	r3, [sp, #0]
 800ee72:	003a      	movs	r2, r7
 800ee74:	4b06      	ldr	r3, [pc, #24]	; (800ee90 <_svfiprintf_r+0x1f8>)
 800ee76:	0021      	movs	r1, r4
 800ee78:	9803      	ldr	r0, [sp, #12]
 800ee7a:	f7fc fd35 	bl	800b8e8 <_printf_i>
 800ee7e:	e7ea      	b.n	800ee56 <_svfiprintf_r+0x1be>
 800ee80:	080100d4 	.word	0x080100d4
 800ee84:	080100da 	.word	0x080100da
 800ee88:	080100de 	.word	0x080100de
 800ee8c:	0800b375 	.word	0x0800b375
 800ee90:	0800ebd5 	.word	0x0800ebd5

0800ee94 <__sfputc_r>:
 800ee94:	6893      	ldr	r3, [r2, #8]
 800ee96:	b510      	push	{r4, lr}
 800ee98:	3b01      	subs	r3, #1
 800ee9a:	6093      	str	r3, [r2, #8]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	da04      	bge.n	800eeaa <__sfputc_r+0x16>
 800eea0:	6994      	ldr	r4, [r2, #24]
 800eea2:	42a3      	cmp	r3, r4
 800eea4:	db07      	blt.n	800eeb6 <__sfputc_r+0x22>
 800eea6:	290a      	cmp	r1, #10
 800eea8:	d005      	beq.n	800eeb6 <__sfputc_r+0x22>
 800eeaa:	6813      	ldr	r3, [r2, #0]
 800eeac:	1c58      	adds	r0, r3, #1
 800eeae:	6010      	str	r0, [r2, #0]
 800eeb0:	7019      	strb	r1, [r3, #0]
 800eeb2:	0008      	movs	r0, r1
 800eeb4:	bd10      	pop	{r4, pc}
 800eeb6:	f000 f99b 	bl	800f1f0 <__swbuf_r>
 800eeba:	0001      	movs	r1, r0
 800eebc:	e7f9      	b.n	800eeb2 <__sfputc_r+0x1e>

0800eebe <__sfputs_r>:
 800eebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eec0:	0006      	movs	r6, r0
 800eec2:	000f      	movs	r7, r1
 800eec4:	0014      	movs	r4, r2
 800eec6:	18d5      	adds	r5, r2, r3
 800eec8:	42ac      	cmp	r4, r5
 800eeca:	d101      	bne.n	800eed0 <__sfputs_r+0x12>
 800eecc:	2000      	movs	r0, #0
 800eece:	e007      	b.n	800eee0 <__sfputs_r+0x22>
 800eed0:	7821      	ldrb	r1, [r4, #0]
 800eed2:	003a      	movs	r2, r7
 800eed4:	0030      	movs	r0, r6
 800eed6:	f7ff ffdd 	bl	800ee94 <__sfputc_r>
 800eeda:	3401      	adds	r4, #1
 800eedc:	1c43      	adds	r3, r0, #1
 800eede:	d1f3      	bne.n	800eec8 <__sfputs_r+0xa>
 800eee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eee4 <_vfiprintf_r>:
 800eee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eee6:	b0a1      	sub	sp, #132	; 0x84
 800eee8:	9003      	str	r0, [sp, #12]
 800eeea:	000f      	movs	r7, r1
 800eeec:	0016      	movs	r6, r2
 800eeee:	001d      	movs	r5, r3
 800eef0:	2800      	cmp	r0, #0
 800eef2:	d005      	beq.n	800ef00 <_vfiprintf_r+0x1c>
 800eef4:	6983      	ldr	r3, [r0, #24]
 800eef6:	9305      	str	r3, [sp, #20]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d101      	bne.n	800ef00 <_vfiprintf_r+0x1c>
 800eefc:	f7fe fdc0 	bl	800da80 <__sinit>
 800ef00:	4b7b      	ldr	r3, [pc, #492]	; (800f0f0 <_vfiprintf_r+0x20c>)
 800ef02:	429f      	cmp	r7, r3
 800ef04:	d15c      	bne.n	800efc0 <_vfiprintf_r+0xdc>
 800ef06:	9b03      	ldr	r3, [sp, #12]
 800ef08:	685f      	ldr	r7, [r3, #4]
 800ef0a:	89bb      	ldrh	r3, [r7, #12]
 800ef0c:	071b      	lsls	r3, r3, #28
 800ef0e:	d563      	bpl.n	800efd8 <_vfiprintf_r+0xf4>
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d060      	beq.n	800efd8 <_vfiprintf_r+0xf4>
 800ef16:	2300      	movs	r3, #0
 800ef18:	ac08      	add	r4, sp, #32
 800ef1a:	6163      	str	r3, [r4, #20]
 800ef1c:	3320      	adds	r3, #32
 800ef1e:	7663      	strb	r3, [r4, #25]
 800ef20:	3310      	adds	r3, #16
 800ef22:	76a3      	strb	r3, [r4, #26]
 800ef24:	9507      	str	r5, [sp, #28]
 800ef26:	0035      	movs	r5, r6
 800ef28:	782b      	ldrb	r3, [r5, #0]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d001      	beq.n	800ef32 <_vfiprintf_r+0x4e>
 800ef2e:	2b25      	cmp	r3, #37	; 0x25
 800ef30:	d15c      	bne.n	800efec <_vfiprintf_r+0x108>
 800ef32:	1bab      	subs	r3, r5, r6
 800ef34:	9305      	str	r3, [sp, #20]
 800ef36:	d00c      	beq.n	800ef52 <_vfiprintf_r+0x6e>
 800ef38:	0032      	movs	r2, r6
 800ef3a:	0039      	movs	r1, r7
 800ef3c:	9803      	ldr	r0, [sp, #12]
 800ef3e:	f7ff ffbe 	bl	800eebe <__sfputs_r>
 800ef42:	1c43      	adds	r3, r0, #1
 800ef44:	d100      	bne.n	800ef48 <_vfiprintf_r+0x64>
 800ef46:	e0c4      	b.n	800f0d2 <_vfiprintf_r+0x1ee>
 800ef48:	6962      	ldr	r2, [r4, #20]
 800ef4a:	9b05      	ldr	r3, [sp, #20]
 800ef4c:	4694      	mov	ip, r2
 800ef4e:	4463      	add	r3, ip
 800ef50:	6163      	str	r3, [r4, #20]
 800ef52:	782b      	ldrb	r3, [r5, #0]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d100      	bne.n	800ef5a <_vfiprintf_r+0x76>
 800ef58:	e0bb      	b.n	800f0d2 <_vfiprintf_r+0x1ee>
 800ef5a:	2201      	movs	r2, #1
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	4252      	negs	r2, r2
 800ef60:	6062      	str	r2, [r4, #4]
 800ef62:	a904      	add	r1, sp, #16
 800ef64:	3254      	adds	r2, #84	; 0x54
 800ef66:	1852      	adds	r2, r2, r1
 800ef68:	1c6e      	adds	r6, r5, #1
 800ef6a:	6023      	str	r3, [r4, #0]
 800ef6c:	60e3      	str	r3, [r4, #12]
 800ef6e:	60a3      	str	r3, [r4, #8]
 800ef70:	7013      	strb	r3, [r2, #0]
 800ef72:	65a3      	str	r3, [r4, #88]	; 0x58
 800ef74:	7831      	ldrb	r1, [r6, #0]
 800ef76:	2205      	movs	r2, #5
 800ef78:	485e      	ldr	r0, [pc, #376]	; (800f0f4 <_vfiprintf_r+0x210>)
 800ef7a:	f7ff f973 	bl	800e264 <memchr>
 800ef7e:	1c75      	adds	r5, r6, #1
 800ef80:	2800      	cmp	r0, #0
 800ef82:	d135      	bne.n	800eff0 <_vfiprintf_r+0x10c>
 800ef84:	6822      	ldr	r2, [r4, #0]
 800ef86:	06d3      	lsls	r3, r2, #27
 800ef88:	d504      	bpl.n	800ef94 <_vfiprintf_r+0xb0>
 800ef8a:	2353      	movs	r3, #83	; 0x53
 800ef8c:	a904      	add	r1, sp, #16
 800ef8e:	185b      	adds	r3, r3, r1
 800ef90:	2120      	movs	r1, #32
 800ef92:	7019      	strb	r1, [r3, #0]
 800ef94:	0713      	lsls	r3, r2, #28
 800ef96:	d504      	bpl.n	800efa2 <_vfiprintf_r+0xbe>
 800ef98:	2353      	movs	r3, #83	; 0x53
 800ef9a:	a904      	add	r1, sp, #16
 800ef9c:	185b      	adds	r3, r3, r1
 800ef9e:	212b      	movs	r1, #43	; 0x2b
 800efa0:	7019      	strb	r1, [r3, #0]
 800efa2:	7833      	ldrb	r3, [r6, #0]
 800efa4:	2b2a      	cmp	r3, #42	; 0x2a
 800efa6:	d02c      	beq.n	800f002 <_vfiprintf_r+0x11e>
 800efa8:	0035      	movs	r5, r6
 800efaa:	2100      	movs	r1, #0
 800efac:	200a      	movs	r0, #10
 800efae:	68e3      	ldr	r3, [r4, #12]
 800efb0:	782a      	ldrb	r2, [r5, #0]
 800efb2:	1c6e      	adds	r6, r5, #1
 800efb4:	3a30      	subs	r2, #48	; 0x30
 800efb6:	2a09      	cmp	r2, #9
 800efb8:	d964      	bls.n	800f084 <_vfiprintf_r+0x1a0>
 800efba:	2900      	cmp	r1, #0
 800efbc:	d02e      	beq.n	800f01c <_vfiprintf_r+0x138>
 800efbe:	e026      	b.n	800f00e <_vfiprintf_r+0x12a>
 800efc0:	4b4d      	ldr	r3, [pc, #308]	; (800f0f8 <_vfiprintf_r+0x214>)
 800efc2:	429f      	cmp	r7, r3
 800efc4:	d102      	bne.n	800efcc <_vfiprintf_r+0xe8>
 800efc6:	9b03      	ldr	r3, [sp, #12]
 800efc8:	689f      	ldr	r7, [r3, #8]
 800efca:	e79e      	b.n	800ef0a <_vfiprintf_r+0x26>
 800efcc:	4b4b      	ldr	r3, [pc, #300]	; (800f0fc <_vfiprintf_r+0x218>)
 800efce:	429f      	cmp	r7, r3
 800efd0:	d19b      	bne.n	800ef0a <_vfiprintf_r+0x26>
 800efd2:	9b03      	ldr	r3, [sp, #12]
 800efd4:	68df      	ldr	r7, [r3, #12]
 800efd6:	e798      	b.n	800ef0a <_vfiprintf_r+0x26>
 800efd8:	0039      	movs	r1, r7
 800efda:	9803      	ldr	r0, [sp, #12]
 800efdc:	f000 f97e 	bl	800f2dc <__swsetup_r>
 800efe0:	2800      	cmp	r0, #0
 800efe2:	d098      	beq.n	800ef16 <_vfiprintf_r+0x32>
 800efe4:	2001      	movs	r0, #1
 800efe6:	4240      	negs	r0, r0
 800efe8:	b021      	add	sp, #132	; 0x84
 800efea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efec:	3501      	adds	r5, #1
 800efee:	e79b      	b.n	800ef28 <_vfiprintf_r+0x44>
 800eff0:	4b40      	ldr	r3, [pc, #256]	; (800f0f4 <_vfiprintf_r+0x210>)
 800eff2:	6822      	ldr	r2, [r4, #0]
 800eff4:	1ac0      	subs	r0, r0, r3
 800eff6:	2301      	movs	r3, #1
 800eff8:	4083      	lsls	r3, r0
 800effa:	4313      	orrs	r3, r2
 800effc:	6023      	str	r3, [r4, #0]
 800effe:	002e      	movs	r6, r5
 800f000:	e7b8      	b.n	800ef74 <_vfiprintf_r+0x90>
 800f002:	9b07      	ldr	r3, [sp, #28]
 800f004:	1d19      	adds	r1, r3, #4
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	9107      	str	r1, [sp, #28]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	db01      	blt.n	800f012 <_vfiprintf_r+0x12e>
 800f00e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f010:	e004      	b.n	800f01c <_vfiprintf_r+0x138>
 800f012:	425b      	negs	r3, r3
 800f014:	60e3      	str	r3, [r4, #12]
 800f016:	2302      	movs	r3, #2
 800f018:	4313      	orrs	r3, r2
 800f01a:	6023      	str	r3, [r4, #0]
 800f01c:	782b      	ldrb	r3, [r5, #0]
 800f01e:	2b2e      	cmp	r3, #46	; 0x2e
 800f020:	d10a      	bne.n	800f038 <_vfiprintf_r+0x154>
 800f022:	786b      	ldrb	r3, [r5, #1]
 800f024:	2b2a      	cmp	r3, #42	; 0x2a
 800f026:	d135      	bne.n	800f094 <_vfiprintf_r+0x1b0>
 800f028:	9b07      	ldr	r3, [sp, #28]
 800f02a:	3502      	adds	r5, #2
 800f02c:	1d1a      	adds	r2, r3, #4
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	9207      	str	r2, [sp, #28]
 800f032:	2b00      	cmp	r3, #0
 800f034:	db2b      	blt.n	800f08e <_vfiprintf_r+0x1aa>
 800f036:	9309      	str	r3, [sp, #36]	; 0x24
 800f038:	4e31      	ldr	r6, [pc, #196]	; (800f100 <_vfiprintf_r+0x21c>)
 800f03a:	7829      	ldrb	r1, [r5, #0]
 800f03c:	2203      	movs	r2, #3
 800f03e:	0030      	movs	r0, r6
 800f040:	f7ff f910 	bl	800e264 <memchr>
 800f044:	2800      	cmp	r0, #0
 800f046:	d006      	beq.n	800f056 <_vfiprintf_r+0x172>
 800f048:	2340      	movs	r3, #64	; 0x40
 800f04a:	1b80      	subs	r0, r0, r6
 800f04c:	4083      	lsls	r3, r0
 800f04e:	6822      	ldr	r2, [r4, #0]
 800f050:	3501      	adds	r5, #1
 800f052:	4313      	orrs	r3, r2
 800f054:	6023      	str	r3, [r4, #0]
 800f056:	7829      	ldrb	r1, [r5, #0]
 800f058:	2206      	movs	r2, #6
 800f05a:	482a      	ldr	r0, [pc, #168]	; (800f104 <_vfiprintf_r+0x220>)
 800f05c:	1c6e      	adds	r6, r5, #1
 800f05e:	7621      	strb	r1, [r4, #24]
 800f060:	f7ff f900 	bl	800e264 <memchr>
 800f064:	2800      	cmp	r0, #0
 800f066:	d03a      	beq.n	800f0de <_vfiprintf_r+0x1fa>
 800f068:	4b27      	ldr	r3, [pc, #156]	; (800f108 <_vfiprintf_r+0x224>)
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d125      	bne.n	800f0ba <_vfiprintf_r+0x1d6>
 800f06e:	2207      	movs	r2, #7
 800f070:	9b07      	ldr	r3, [sp, #28]
 800f072:	3307      	adds	r3, #7
 800f074:	4393      	bics	r3, r2
 800f076:	3308      	adds	r3, #8
 800f078:	9307      	str	r3, [sp, #28]
 800f07a:	6963      	ldr	r3, [r4, #20]
 800f07c:	9a04      	ldr	r2, [sp, #16]
 800f07e:	189b      	adds	r3, r3, r2
 800f080:	6163      	str	r3, [r4, #20]
 800f082:	e750      	b.n	800ef26 <_vfiprintf_r+0x42>
 800f084:	4343      	muls	r3, r0
 800f086:	2101      	movs	r1, #1
 800f088:	189b      	adds	r3, r3, r2
 800f08a:	0035      	movs	r5, r6
 800f08c:	e790      	b.n	800efb0 <_vfiprintf_r+0xcc>
 800f08e:	2301      	movs	r3, #1
 800f090:	425b      	negs	r3, r3
 800f092:	e7d0      	b.n	800f036 <_vfiprintf_r+0x152>
 800f094:	2300      	movs	r3, #0
 800f096:	200a      	movs	r0, #10
 800f098:	001a      	movs	r2, r3
 800f09a:	3501      	adds	r5, #1
 800f09c:	6063      	str	r3, [r4, #4]
 800f09e:	7829      	ldrb	r1, [r5, #0]
 800f0a0:	1c6e      	adds	r6, r5, #1
 800f0a2:	3930      	subs	r1, #48	; 0x30
 800f0a4:	2909      	cmp	r1, #9
 800f0a6:	d903      	bls.n	800f0b0 <_vfiprintf_r+0x1cc>
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d0c5      	beq.n	800f038 <_vfiprintf_r+0x154>
 800f0ac:	9209      	str	r2, [sp, #36]	; 0x24
 800f0ae:	e7c3      	b.n	800f038 <_vfiprintf_r+0x154>
 800f0b0:	4342      	muls	r2, r0
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	1852      	adds	r2, r2, r1
 800f0b6:	0035      	movs	r5, r6
 800f0b8:	e7f1      	b.n	800f09e <_vfiprintf_r+0x1ba>
 800f0ba:	ab07      	add	r3, sp, #28
 800f0bc:	9300      	str	r3, [sp, #0]
 800f0be:	003a      	movs	r2, r7
 800f0c0:	4b12      	ldr	r3, [pc, #72]	; (800f10c <_vfiprintf_r+0x228>)
 800f0c2:	0021      	movs	r1, r4
 800f0c4:	9803      	ldr	r0, [sp, #12]
 800f0c6:	f7fc f955 	bl	800b374 <_printf_float>
 800f0ca:	9004      	str	r0, [sp, #16]
 800f0cc:	9b04      	ldr	r3, [sp, #16]
 800f0ce:	3301      	adds	r3, #1
 800f0d0:	d1d3      	bne.n	800f07a <_vfiprintf_r+0x196>
 800f0d2:	89bb      	ldrh	r3, [r7, #12]
 800f0d4:	065b      	lsls	r3, r3, #25
 800f0d6:	d500      	bpl.n	800f0da <_vfiprintf_r+0x1f6>
 800f0d8:	e784      	b.n	800efe4 <_vfiprintf_r+0x100>
 800f0da:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f0dc:	e784      	b.n	800efe8 <_vfiprintf_r+0x104>
 800f0de:	ab07      	add	r3, sp, #28
 800f0e0:	9300      	str	r3, [sp, #0]
 800f0e2:	003a      	movs	r2, r7
 800f0e4:	4b09      	ldr	r3, [pc, #36]	; (800f10c <_vfiprintf_r+0x228>)
 800f0e6:	0021      	movs	r1, r4
 800f0e8:	9803      	ldr	r0, [sp, #12]
 800f0ea:	f7fc fbfd 	bl	800b8e8 <_printf_i>
 800f0ee:	e7ec      	b.n	800f0ca <_vfiprintf_r+0x1e6>
 800f0f0:	0800ff88 	.word	0x0800ff88
 800f0f4:	080100d4 	.word	0x080100d4
 800f0f8:	0800ffa8 	.word	0x0800ffa8
 800f0fc:	0800ff68 	.word	0x0800ff68
 800f100:	080100da 	.word	0x080100da
 800f104:	080100de 	.word	0x080100de
 800f108:	0800b375 	.word	0x0800b375
 800f10c:	0800eebf 	.word	0x0800eebf

0800f110 <_sbrk_r>:
 800f110:	2300      	movs	r3, #0
 800f112:	b570      	push	{r4, r5, r6, lr}
 800f114:	4c06      	ldr	r4, [pc, #24]	; (800f130 <_sbrk_r+0x20>)
 800f116:	0005      	movs	r5, r0
 800f118:	0008      	movs	r0, r1
 800f11a:	6023      	str	r3, [r4, #0]
 800f11c:	f7f9 ff22 	bl	8008f64 <_sbrk>
 800f120:	1c43      	adds	r3, r0, #1
 800f122:	d103      	bne.n	800f12c <_sbrk_r+0x1c>
 800f124:	6823      	ldr	r3, [r4, #0]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d000      	beq.n	800f12c <_sbrk_r+0x1c>
 800f12a:	602b      	str	r3, [r5, #0]
 800f12c:	bd70      	pop	{r4, r5, r6, pc}
 800f12e:	46c0      	nop			; (mov r8, r8)
 800f130:	20002054 	.word	0x20002054

0800f134 <__sread>:
 800f134:	b570      	push	{r4, r5, r6, lr}
 800f136:	000c      	movs	r4, r1
 800f138:	250e      	movs	r5, #14
 800f13a:	5f49      	ldrsh	r1, [r1, r5]
 800f13c:	f000 fac8 	bl	800f6d0 <_read_r>
 800f140:	2800      	cmp	r0, #0
 800f142:	db03      	blt.n	800f14c <__sread+0x18>
 800f144:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f146:	181b      	adds	r3, r3, r0
 800f148:	6563      	str	r3, [r4, #84]	; 0x54
 800f14a:	bd70      	pop	{r4, r5, r6, pc}
 800f14c:	89a3      	ldrh	r3, [r4, #12]
 800f14e:	4a02      	ldr	r2, [pc, #8]	; (800f158 <__sread+0x24>)
 800f150:	4013      	ands	r3, r2
 800f152:	81a3      	strh	r3, [r4, #12]
 800f154:	e7f9      	b.n	800f14a <__sread+0x16>
 800f156:	46c0      	nop			; (mov r8, r8)
 800f158:	ffffefff 	.word	0xffffefff

0800f15c <__swrite>:
 800f15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f15e:	001f      	movs	r7, r3
 800f160:	898b      	ldrh	r3, [r1, #12]
 800f162:	0005      	movs	r5, r0
 800f164:	000c      	movs	r4, r1
 800f166:	0016      	movs	r6, r2
 800f168:	05db      	lsls	r3, r3, #23
 800f16a:	d505      	bpl.n	800f178 <__swrite+0x1c>
 800f16c:	230e      	movs	r3, #14
 800f16e:	5ec9      	ldrsh	r1, [r1, r3]
 800f170:	2200      	movs	r2, #0
 800f172:	2302      	movs	r3, #2
 800f174:	f000 f9f0 	bl	800f558 <_lseek_r>
 800f178:	89a3      	ldrh	r3, [r4, #12]
 800f17a:	4a05      	ldr	r2, [pc, #20]	; (800f190 <__swrite+0x34>)
 800f17c:	0028      	movs	r0, r5
 800f17e:	4013      	ands	r3, r2
 800f180:	81a3      	strh	r3, [r4, #12]
 800f182:	0032      	movs	r2, r6
 800f184:	230e      	movs	r3, #14
 800f186:	5ee1      	ldrsh	r1, [r4, r3]
 800f188:	003b      	movs	r3, r7
 800f18a:	f000 f893 	bl	800f2b4 <_write_r>
 800f18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f190:	ffffefff 	.word	0xffffefff

0800f194 <__sseek>:
 800f194:	b570      	push	{r4, r5, r6, lr}
 800f196:	000c      	movs	r4, r1
 800f198:	250e      	movs	r5, #14
 800f19a:	5f49      	ldrsh	r1, [r1, r5]
 800f19c:	f000 f9dc 	bl	800f558 <_lseek_r>
 800f1a0:	89a3      	ldrh	r3, [r4, #12]
 800f1a2:	1c42      	adds	r2, r0, #1
 800f1a4:	d103      	bne.n	800f1ae <__sseek+0x1a>
 800f1a6:	4a05      	ldr	r2, [pc, #20]	; (800f1bc <__sseek+0x28>)
 800f1a8:	4013      	ands	r3, r2
 800f1aa:	81a3      	strh	r3, [r4, #12]
 800f1ac:	bd70      	pop	{r4, r5, r6, pc}
 800f1ae:	2280      	movs	r2, #128	; 0x80
 800f1b0:	0152      	lsls	r2, r2, #5
 800f1b2:	4313      	orrs	r3, r2
 800f1b4:	81a3      	strh	r3, [r4, #12]
 800f1b6:	6560      	str	r0, [r4, #84]	; 0x54
 800f1b8:	e7f8      	b.n	800f1ac <__sseek+0x18>
 800f1ba:	46c0      	nop			; (mov r8, r8)
 800f1bc:	ffffefff 	.word	0xffffefff

0800f1c0 <__sclose>:
 800f1c0:	b510      	push	{r4, lr}
 800f1c2:	230e      	movs	r3, #14
 800f1c4:	5ec9      	ldrsh	r1, [r1, r3]
 800f1c6:	f000 f8ff 	bl	800f3c8 <_close_r>
 800f1ca:	bd10      	pop	{r4, pc}

0800f1cc <strncmp>:
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	b530      	push	{r4, r5, lr}
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d00a      	beq.n	800f1ea <strncmp+0x1e>
 800f1d4:	3a01      	subs	r2, #1
 800f1d6:	5cc4      	ldrb	r4, [r0, r3]
 800f1d8:	5ccd      	ldrb	r5, [r1, r3]
 800f1da:	42ac      	cmp	r4, r5
 800f1dc:	d104      	bne.n	800f1e8 <strncmp+0x1c>
 800f1de:	4293      	cmp	r3, r2
 800f1e0:	d002      	beq.n	800f1e8 <strncmp+0x1c>
 800f1e2:	3301      	adds	r3, #1
 800f1e4:	2c00      	cmp	r4, #0
 800f1e6:	d1f6      	bne.n	800f1d6 <strncmp+0xa>
 800f1e8:	1b63      	subs	r3, r4, r5
 800f1ea:	0018      	movs	r0, r3
 800f1ec:	bd30      	pop	{r4, r5, pc}
	...

0800f1f0 <__swbuf_r>:
 800f1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1f2:	0005      	movs	r5, r0
 800f1f4:	000e      	movs	r6, r1
 800f1f6:	0014      	movs	r4, r2
 800f1f8:	2800      	cmp	r0, #0
 800f1fa:	d004      	beq.n	800f206 <__swbuf_r+0x16>
 800f1fc:	6983      	ldr	r3, [r0, #24]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d101      	bne.n	800f206 <__swbuf_r+0x16>
 800f202:	f7fe fc3d 	bl	800da80 <__sinit>
 800f206:	4b22      	ldr	r3, [pc, #136]	; (800f290 <__swbuf_r+0xa0>)
 800f208:	429c      	cmp	r4, r3
 800f20a:	d12d      	bne.n	800f268 <__swbuf_r+0x78>
 800f20c:	686c      	ldr	r4, [r5, #4]
 800f20e:	69a3      	ldr	r3, [r4, #24]
 800f210:	60a3      	str	r3, [r4, #8]
 800f212:	89a3      	ldrh	r3, [r4, #12]
 800f214:	071b      	lsls	r3, r3, #28
 800f216:	d531      	bpl.n	800f27c <__swbuf_r+0x8c>
 800f218:	6923      	ldr	r3, [r4, #16]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d02e      	beq.n	800f27c <__swbuf_r+0x8c>
 800f21e:	6823      	ldr	r3, [r4, #0]
 800f220:	6922      	ldr	r2, [r4, #16]
 800f222:	b2f7      	uxtb	r7, r6
 800f224:	1a98      	subs	r0, r3, r2
 800f226:	6963      	ldr	r3, [r4, #20]
 800f228:	b2f6      	uxtb	r6, r6
 800f22a:	4283      	cmp	r3, r0
 800f22c:	dc05      	bgt.n	800f23a <__swbuf_r+0x4a>
 800f22e:	0021      	movs	r1, r4
 800f230:	0028      	movs	r0, r5
 800f232:	f000 f965 	bl	800f500 <_fflush_r>
 800f236:	2800      	cmp	r0, #0
 800f238:	d126      	bne.n	800f288 <__swbuf_r+0x98>
 800f23a:	68a3      	ldr	r3, [r4, #8]
 800f23c:	3001      	adds	r0, #1
 800f23e:	3b01      	subs	r3, #1
 800f240:	60a3      	str	r3, [r4, #8]
 800f242:	6823      	ldr	r3, [r4, #0]
 800f244:	1c5a      	adds	r2, r3, #1
 800f246:	6022      	str	r2, [r4, #0]
 800f248:	701f      	strb	r7, [r3, #0]
 800f24a:	6963      	ldr	r3, [r4, #20]
 800f24c:	4283      	cmp	r3, r0
 800f24e:	d004      	beq.n	800f25a <__swbuf_r+0x6a>
 800f250:	89a3      	ldrh	r3, [r4, #12]
 800f252:	07db      	lsls	r3, r3, #31
 800f254:	d51a      	bpl.n	800f28c <__swbuf_r+0x9c>
 800f256:	2e0a      	cmp	r6, #10
 800f258:	d118      	bne.n	800f28c <__swbuf_r+0x9c>
 800f25a:	0021      	movs	r1, r4
 800f25c:	0028      	movs	r0, r5
 800f25e:	f000 f94f 	bl	800f500 <_fflush_r>
 800f262:	2800      	cmp	r0, #0
 800f264:	d012      	beq.n	800f28c <__swbuf_r+0x9c>
 800f266:	e00f      	b.n	800f288 <__swbuf_r+0x98>
 800f268:	4b0a      	ldr	r3, [pc, #40]	; (800f294 <__swbuf_r+0xa4>)
 800f26a:	429c      	cmp	r4, r3
 800f26c:	d101      	bne.n	800f272 <__swbuf_r+0x82>
 800f26e:	68ac      	ldr	r4, [r5, #8]
 800f270:	e7cd      	b.n	800f20e <__swbuf_r+0x1e>
 800f272:	4b09      	ldr	r3, [pc, #36]	; (800f298 <__swbuf_r+0xa8>)
 800f274:	429c      	cmp	r4, r3
 800f276:	d1ca      	bne.n	800f20e <__swbuf_r+0x1e>
 800f278:	68ec      	ldr	r4, [r5, #12]
 800f27a:	e7c8      	b.n	800f20e <__swbuf_r+0x1e>
 800f27c:	0021      	movs	r1, r4
 800f27e:	0028      	movs	r0, r5
 800f280:	f000 f82c 	bl	800f2dc <__swsetup_r>
 800f284:	2800      	cmp	r0, #0
 800f286:	d0ca      	beq.n	800f21e <__swbuf_r+0x2e>
 800f288:	2601      	movs	r6, #1
 800f28a:	4276      	negs	r6, r6
 800f28c:	0030      	movs	r0, r6
 800f28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f290:	0800ff88 	.word	0x0800ff88
 800f294:	0800ffa8 	.word	0x0800ffa8
 800f298:	0800ff68 	.word	0x0800ff68

0800f29c <__ascii_wctomb>:
 800f29c:	1e0b      	subs	r3, r1, #0
 800f29e:	d004      	beq.n	800f2aa <__ascii_wctomb+0xe>
 800f2a0:	2aff      	cmp	r2, #255	; 0xff
 800f2a2:	d904      	bls.n	800f2ae <__ascii_wctomb+0x12>
 800f2a4:	238a      	movs	r3, #138	; 0x8a
 800f2a6:	6003      	str	r3, [r0, #0]
 800f2a8:	3b8b      	subs	r3, #139	; 0x8b
 800f2aa:	0018      	movs	r0, r3
 800f2ac:	4770      	bx	lr
 800f2ae:	700a      	strb	r2, [r1, #0]
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	e7fa      	b.n	800f2aa <__ascii_wctomb+0xe>

0800f2b4 <_write_r>:
 800f2b4:	b570      	push	{r4, r5, r6, lr}
 800f2b6:	0005      	movs	r5, r0
 800f2b8:	0008      	movs	r0, r1
 800f2ba:	0011      	movs	r1, r2
 800f2bc:	2200      	movs	r2, #0
 800f2be:	4c06      	ldr	r4, [pc, #24]	; (800f2d8 <_write_r+0x24>)
 800f2c0:	6022      	str	r2, [r4, #0]
 800f2c2:	001a      	movs	r2, r3
 800f2c4:	f7f9 fe34 	bl	8008f30 <_write>
 800f2c8:	1c43      	adds	r3, r0, #1
 800f2ca:	d103      	bne.n	800f2d4 <_write_r+0x20>
 800f2cc:	6823      	ldr	r3, [r4, #0]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d000      	beq.n	800f2d4 <_write_r+0x20>
 800f2d2:	602b      	str	r3, [r5, #0]
 800f2d4:	bd70      	pop	{r4, r5, r6, pc}
 800f2d6:	46c0      	nop			; (mov r8, r8)
 800f2d8:	20002054 	.word	0x20002054

0800f2dc <__swsetup_r>:
 800f2dc:	4b36      	ldr	r3, [pc, #216]	; (800f3b8 <__swsetup_r+0xdc>)
 800f2de:	b570      	push	{r4, r5, r6, lr}
 800f2e0:	681d      	ldr	r5, [r3, #0]
 800f2e2:	0006      	movs	r6, r0
 800f2e4:	000c      	movs	r4, r1
 800f2e6:	2d00      	cmp	r5, #0
 800f2e8:	d005      	beq.n	800f2f6 <__swsetup_r+0x1a>
 800f2ea:	69ab      	ldr	r3, [r5, #24]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d102      	bne.n	800f2f6 <__swsetup_r+0x1a>
 800f2f0:	0028      	movs	r0, r5
 800f2f2:	f7fe fbc5 	bl	800da80 <__sinit>
 800f2f6:	4b31      	ldr	r3, [pc, #196]	; (800f3bc <__swsetup_r+0xe0>)
 800f2f8:	429c      	cmp	r4, r3
 800f2fa:	d10f      	bne.n	800f31c <__swsetup_r+0x40>
 800f2fc:	686c      	ldr	r4, [r5, #4]
 800f2fe:	230c      	movs	r3, #12
 800f300:	5ee2      	ldrsh	r2, [r4, r3]
 800f302:	b293      	uxth	r3, r2
 800f304:	0719      	lsls	r1, r3, #28
 800f306:	d42d      	bmi.n	800f364 <__swsetup_r+0x88>
 800f308:	06d9      	lsls	r1, r3, #27
 800f30a:	d411      	bmi.n	800f330 <__swsetup_r+0x54>
 800f30c:	2309      	movs	r3, #9
 800f30e:	2001      	movs	r0, #1
 800f310:	6033      	str	r3, [r6, #0]
 800f312:	3337      	adds	r3, #55	; 0x37
 800f314:	4313      	orrs	r3, r2
 800f316:	81a3      	strh	r3, [r4, #12]
 800f318:	4240      	negs	r0, r0
 800f31a:	bd70      	pop	{r4, r5, r6, pc}
 800f31c:	4b28      	ldr	r3, [pc, #160]	; (800f3c0 <__swsetup_r+0xe4>)
 800f31e:	429c      	cmp	r4, r3
 800f320:	d101      	bne.n	800f326 <__swsetup_r+0x4a>
 800f322:	68ac      	ldr	r4, [r5, #8]
 800f324:	e7eb      	b.n	800f2fe <__swsetup_r+0x22>
 800f326:	4b27      	ldr	r3, [pc, #156]	; (800f3c4 <__swsetup_r+0xe8>)
 800f328:	429c      	cmp	r4, r3
 800f32a:	d1e8      	bne.n	800f2fe <__swsetup_r+0x22>
 800f32c:	68ec      	ldr	r4, [r5, #12]
 800f32e:	e7e6      	b.n	800f2fe <__swsetup_r+0x22>
 800f330:	075b      	lsls	r3, r3, #29
 800f332:	d513      	bpl.n	800f35c <__swsetup_r+0x80>
 800f334:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f336:	2900      	cmp	r1, #0
 800f338:	d008      	beq.n	800f34c <__swsetup_r+0x70>
 800f33a:	0023      	movs	r3, r4
 800f33c:	3344      	adds	r3, #68	; 0x44
 800f33e:	4299      	cmp	r1, r3
 800f340:	d002      	beq.n	800f348 <__swsetup_r+0x6c>
 800f342:	0030      	movs	r0, r6
 800f344:	f7ff fb9e 	bl	800ea84 <_free_r>
 800f348:	2300      	movs	r3, #0
 800f34a:	6363      	str	r3, [r4, #52]	; 0x34
 800f34c:	2224      	movs	r2, #36	; 0x24
 800f34e:	89a3      	ldrh	r3, [r4, #12]
 800f350:	4393      	bics	r3, r2
 800f352:	81a3      	strh	r3, [r4, #12]
 800f354:	2300      	movs	r3, #0
 800f356:	6063      	str	r3, [r4, #4]
 800f358:	6923      	ldr	r3, [r4, #16]
 800f35a:	6023      	str	r3, [r4, #0]
 800f35c:	2308      	movs	r3, #8
 800f35e:	89a2      	ldrh	r2, [r4, #12]
 800f360:	4313      	orrs	r3, r2
 800f362:	81a3      	strh	r3, [r4, #12]
 800f364:	6923      	ldr	r3, [r4, #16]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d10b      	bne.n	800f382 <__swsetup_r+0xa6>
 800f36a:	21a0      	movs	r1, #160	; 0xa0
 800f36c:	2280      	movs	r2, #128	; 0x80
 800f36e:	89a3      	ldrh	r3, [r4, #12]
 800f370:	0089      	lsls	r1, r1, #2
 800f372:	0092      	lsls	r2, r2, #2
 800f374:	400b      	ands	r3, r1
 800f376:	4293      	cmp	r3, r2
 800f378:	d003      	beq.n	800f382 <__swsetup_r+0xa6>
 800f37a:	0021      	movs	r1, r4
 800f37c:	0030      	movs	r0, r6
 800f37e:	f000 f927 	bl	800f5d0 <__smakebuf_r>
 800f382:	2301      	movs	r3, #1
 800f384:	89a2      	ldrh	r2, [r4, #12]
 800f386:	4013      	ands	r3, r2
 800f388:	d011      	beq.n	800f3ae <__swsetup_r+0xd2>
 800f38a:	2300      	movs	r3, #0
 800f38c:	60a3      	str	r3, [r4, #8]
 800f38e:	6963      	ldr	r3, [r4, #20]
 800f390:	425b      	negs	r3, r3
 800f392:	61a3      	str	r3, [r4, #24]
 800f394:	2000      	movs	r0, #0
 800f396:	6923      	ldr	r3, [r4, #16]
 800f398:	4283      	cmp	r3, r0
 800f39a:	d1be      	bne.n	800f31a <__swsetup_r+0x3e>
 800f39c:	230c      	movs	r3, #12
 800f39e:	5ee2      	ldrsh	r2, [r4, r3]
 800f3a0:	0613      	lsls	r3, r2, #24
 800f3a2:	d5ba      	bpl.n	800f31a <__swsetup_r+0x3e>
 800f3a4:	2340      	movs	r3, #64	; 0x40
 800f3a6:	4313      	orrs	r3, r2
 800f3a8:	81a3      	strh	r3, [r4, #12]
 800f3aa:	3801      	subs	r0, #1
 800f3ac:	e7b5      	b.n	800f31a <__swsetup_r+0x3e>
 800f3ae:	0792      	lsls	r2, r2, #30
 800f3b0:	d400      	bmi.n	800f3b4 <__swsetup_r+0xd8>
 800f3b2:	6963      	ldr	r3, [r4, #20]
 800f3b4:	60a3      	str	r3, [r4, #8]
 800f3b6:	e7ed      	b.n	800f394 <__swsetup_r+0xb8>
 800f3b8:	20000124 	.word	0x20000124
 800f3bc:	0800ff88 	.word	0x0800ff88
 800f3c0:	0800ffa8 	.word	0x0800ffa8
 800f3c4:	0800ff68 	.word	0x0800ff68

0800f3c8 <_close_r>:
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	b570      	push	{r4, r5, r6, lr}
 800f3cc:	4c06      	ldr	r4, [pc, #24]	; (800f3e8 <_close_r+0x20>)
 800f3ce:	0005      	movs	r5, r0
 800f3d0:	0008      	movs	r0, r1
 800f3d2:	6023      	str	r3, [r4, #0]
 800f3d4:	f7f9 fdba 	bl	8008f4c <_close>
 800f3d8:	1c43      	adds	r3, r0, #1
 800f3da:	d103      	bne.n	800f3e4 <_close_r+0x1c>
 800f3dc:	6823      	ldr	r3, [r4, #0]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d000      	beq.n	800f3e4 <_close_r+0x1c>
 800f3e2:	602b      	str	r3, [r5, #0]
 800f3e4:	bd70      	pop	{r4, r5, r6, pc}
 800f3e6:	46c0      	nop			; (mov r8, r8)
 800f3e8:	20002054 	.word	0x20002054

0800f3ec <__sflush_r>:
 800f3ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f3ee:	898a      	ldrh	r2, [r1, #12]
 800f3f0:	0005      	movs	r5, r0
 800f3f2:	000c      	movs	r4, r1
 800f3f4:	0713      	lsls	r3, r2, #28
 800f3f6:	d460      	bmi.n	800f4ba <__sflush_r+0xce>
 800f3f8:	684b      	ldr	r3, [r1, #4]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	dc04      	bgt.n	800f408 <__sflush_r+0x1c>
 800f3fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f400:	2b00      	cmp	r3, #0
 800f402:	dc01      	bgt.n	800f408 <__sflush_r+0x1c>
 800f404:	2000      	movs	r0, #0
 800f406:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f408:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800f40a:	2f00      	cmp	r7, #0
 800f40c:	d0fa      	beq.n	800f404 <__sflush_r+0x18>
 800f40e:	2300      	movs	r3, #0
 800f410:	682e      	ldr	r6, [r5, #0]
 800f412:	602b      	str	r3, [r5, #0]
 800f414:	2380      	movs	r3, #128	; 0x80
 800f416:	015b      	lsls	r3, r3, #5
 800f418:	6a21      	ldr	r1, [r4, #32]
 800f41a:	401a      	ands	r2, r3
 800f41c:	d034      	beq.n	800f488 <__sflush_r+0x9c>
 800f41e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f420:	89a3      	ldrh	r3, [r4, #12]
 800f422:	075b      	lsls	r3, r3, #29
 800f424:	d506      	bpl.n	800f434 <__sflush_r+0x48>
 800f426:	6863      	ldr	r3, [r4, #4]
 800f428:	1ac0      	subs	r0, r0, r3
 800f42a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d001      	beq.n	800f434 <__sflush_r+0x48>
 800f430:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f432:	1ac0      	subs	r0, r0, r3
 800f434:	0002      	movs	r2, r0
 800f436:	6a21      	ldr	r1, [r4, #32]
 800f438:	2300      	movs	r3, #0
 800f43a:	0028      	movs	r0, r5
 800f43c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800f43e:	47b8      	blx	r7
 800f440:	89a1      	ldrh	r1, [r4, #12]
 800f442:	1c43      	adds	r3, r0, #1
 800f444:	d106      	bne.n	800f454 <__sflush_r+0x68>
 800f446:	682b      	ldr	r3, [r5, #0]
 800f448:	2b1d      	cmp	r3, #29
 800f44a:	d830      	bhi.n	800f4ae <__sflush_r+0xc2>
 800f44c:	4a2b      	ldr	r2, [pc, #172]	; (800f4fc <__sflush_r+0x110>)
 800f44e:	40da      	lsrs	r2, r3
 800f450:	07d3      	lsls	r3, r2, #31
 800f452:	d52c      	bpl.n	800f4ae <__sflush_r+0xc2>
 800f454:	2300      	movs	r3, #0
 800f456:	6063      	str	r3, [r4, #4]
 800f458:	6923      	ldr	r3, [r4, #16]
 800f45a:	6023      	str	r3, [r4, #0]
 800f45c:	04cb      	lsls	r3, r1, #19
 800f45e:	d505      	bpl.n	800f46c <__sflush_r+0x80>
 800f460:	1c43      	adds	r3, r0, #1
 800f462:	d102      	bne.n	800f46a <__sflush_r+0x7e>
 800f464:	682b      	ldr	r3, [r5, #0]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d100      	bne.n	800f46c <__sflush_r+0x80>
 800f46a:	6560      	str	r0, [r4, #84]	; 0x54
 800f46c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f46e:	602e      	str	r6, [r5, #0]
 800f470:	2900      	cmp	r1, #0
 800f472:	d0c7      	beq.n	800f404 <__sflush_r+0x18>
 800f474:	0023      	movs	r3, r4
 800f476:	3344      	adds	r3, #68	; 0x44
 800f478:	4299      	cmp	r1, r3
 800f47a:	d002      	beq.n	800f482 <__sflush_r+0x96>
 800f47c:	0028      	movs	r0, r5
 800f47e:	f7ff fb01 	bl	800ea84 <_free_r>
 800f482:	2000      	movs	r0, #0
 800f484:	6360      	str	r0, [r4, #52]	; 0x34
 800f486:	e7be      	b.n	800f406 <__sflush_r+0x1a>
 800f488:	2301      	movs	r3, #1
 800f48a:	0028      	movs	r0, r5
 800f48c:	47b8      	blx	r7
 800f48e:	1c43      	adds	r3, r0, #1
 800f490:	d1c6      	bne.n	800f420 <__sflush_r+0x34>
 800f492:	682b      	ldr	r3, [r5, #0]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d0c3      	beq.n	800f420 <__sflush_r+0x34>
 800f498:	2b1d      	cmp	r3, #29
 800f49a:	d001      	beq.n	800f4a0 <__sflush_r+0xb4>
 800f49c:	2b16      	cmp	r3, #22
 800f49e:	d101      	bne.n	800f4a4 <__sflush_r+0xb8>
 800f4a0:	602e      	str	r6, [r5, #0]
 800f4a2:	e7af      	b.n	800f404 <__sflush_r+0x18>
 800f4a4:	2340      	movs	r3, #64	; 0x40
 800f4a6:	89a2      	ldrh	r2, [r4, #12]
 800f4a8:	4313      	orrs	r3, r2
 800f4aa:	81a3      	strh	r3, [r4, #12]
 800f4ac:	e7ab      	b.n	800f406 <__sflush_r+0x1a>
 800f4ae:	2340      	movs	r3, #64	; 0x40
 800f4b0:	430b      	orrs	r3, r1
 800f4b2:	2001      	movs	r0, #1
 800f4b4:	81a3      	strh	r3, [r4, #12]
 800f4b6:	4240      	negs	r0, r0
 800f4b8:	e7a5      	b.n	800f406 <__sflush_r+0x1a>
 800f4ba:	690f      	ldr	r7, [r1, #16]
 800f4bc:	2f00      	cmp	r7, #0
 800f4be:	d0a1      	beq.n	800f404 <__sflush_r+0x18>
 800f4c0:	680b      	ldr	r3, [r1, #0]
 800f4c2:	600f      	str	r7, [r1, #0]
 800f4c4:	1bdb      	subs	r3, r3, r7
 800f4c6:	9301      	str	r3, [sp, #4]
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	0792      	lsls	r2, r2, #30
 800f4cc:	d100      	bne.n	800f4d0 <__sflush_r+0xe4>
 800f4ce:	694b      	ldr	r3, [r1, #20]
 800f4d0:	60a3      	str	r3, [r4, #8]
 800f4d2:	9b01      	ldr	r3, [sp, #4]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	dc00      	bgt.n	800f4da <__sflush_r+0xee>
 800f4d8:	e794      	b.n	800f404 <__sflush_r+0x18>
 800f4da:	9b01      	ldr	r3, [sp, #4]
 800f4dc:	003a      	movs	r2, r7
 800f4de:	6a21      	ldr	r1, [r4, #32]
 800f4e0:	0028      	movs	r0, r5
 800f4e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f4e4:	47b0      	blx	r6
 800f4e6:	2800      	cmp	r0, #0
 800f4e8:	dc03      	bgt.n	800f4f2 <__sflush_r+0x106>
 800f4ea:	2340      	movs	r3, #64	; 0x40
 800f4ec:	89a2      	ldrh	r2, [r4, #12]
 800f4ee:	4313      	orrs	r3, r2
 800f4f0:	e7df      	b.n	800f4b2 <__sflush_r+0xc6>
 800f4f2:	9b01      	ldr	r3, [sp, #4]
 800f4f4:	183f      	adds	r7, r7, r0
 800f4f6:	1a1b      	subs	r3, r3, r0
 800f4f8:	9301      	str	r3, [sp, #4]
 800f4fa:	e7ea      	b.n	800f4d2 <__sflush_r+0xe6>
 800f4fc:	20400001 	.word	0x20400001

0800f500 <_fflush_r>:
 800f500:	690b      	ldr	r3, [r1, #16]
 800f502:	b570      	push	{r4, r5, r6, lr}
 800f504:	0005      	movs	r5, r0
 800f506:	000c      	movs	r4, r1
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d101      	bne.n	800f510 <_fflush_r+0x10>
 800f50c:	2000      	movs	r0, #0
 800f50e:	bd70      	pop	{r4, r5, r6, pc}
 800f510:	2800      	cmp	r0, #0
 800f512:	d004      	beq.n	800f51e <_fflush_r+0x1e>
 800f514:	6983      	ldr	r3, [r0, #24]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d101      	bne.n	800f51e <_fflush_r+0x1e>
 800f51a:	f7fe fab1 	bl	800da80 <__sinit>
 800f51e:	4b0b      	ldr	r3, [pc, #44]	; (800f54c <_fflush_r+0x4c>)
 800f520:	429c      	cmp	r4, r3
 800f522:	d109      	bne.n	800f538 <_fflush_r+0x38>
 800f524:	686c      	ldr	r4, [r5, #4]
 800f526:	220c      	movs	r2, #12
 800f528:	5ea3      	ldrsh	r3, [r4, r2]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d0ee      	beq.n	800f50c <_fflush_r+0xc>
 800f52e:	0021      	movs	r1, r4
 800f530:	0028      	movs	r0, r5
 800f532:	f7ff ff5b 	bl	800f3ec <__sflush_r>
 800f536:	e7ea      	b.n	800f50e <_fflush_r+0xe>
 800f538:	4b05      	ldr	r3, [pc, #20]	; (800f550 <_fflush_r+0x50>)
 800f53a:	429c      	cmp	r4, r3
 800f53c:	d101      	bne.n	800f542 <_fflush_r+0x42>
 800f53e:	68ac      	ldr	r4, [r5, #8]
 800f540:	e7f1      	b.n	800f526 <_fflush_r+0x26>
 800f542:	4b04      	ldr	r3, [pc, #16]	; (800f554 <_fflush_r+0x54>)
 800f544:	429c      	cmp	r4, r3
 800f546:	d1ee      	bne.n	800f526 <_fflush_r+0x26>
 800f548:	68ec      	ldr	r4, [r5, #12]
 800f54a:	e7ec      	b.n	800f526 <_fflush_r+0x26>
 800f54c:	0800ff88 	.word	0x0800ff88
 800f550:	0800ffa8 	.word	0x0800ffa8
 800f554:	0800ff68 	.word	0x0800ff68

0800f558 <_lseek_r>:
 800f558:	b570      	push	{r4, r5, r6, lr}
 800f55a:	0005      	movs	r5, r0
 800f55c:	0008      	movs	r0, r1
 800f55e:	0011      	movs	r1, r2
 800f560:	2200      	movs	r2, #0
 800f562:	4c06      	ldr	r4, [pc, #24]	; (800f57c <_lseek_r+0x24>)
 800f564:	6022      	str	r2, [r4, #0]
 800f566:	001a      	movs	r2, r3
 800f568:	f7f9 fcfa 	bl	8008f60 <_lseek>
 800f56c:	1c43      	adds	r3, r0, #1
 800f56e:	d103      	bne.n	800f578 <_lseek_r+0x20>
 800f570:	6823      	ldr	r3, [r4, #0]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d000      	beq.n	800f578 <_lseek_r+0x20>
 800f576:	602b      	str	r3, [r5, #0]
 800f578:	bd70      	pop	{r4, r5, r6, pc}
 800f57a:	46c0      	nop			; (mov r8, r8)
 800f57c:	20002054 	.word	0x20002054

0800f580 <__swhatbuf_r>:
 800f580:	b570      	push	{r4, r5, r6, lr}
 800f582:	000e      	movs	r6, r1
 800f584:	001d      	movs	r5, r3
 800f586:	230e      	movs	r3, #14
 800f588:	5ec9      	ldrsh	r1, [r1, r3]
 800f58a:	b096      	sub	sp, #88	; 0x58
 800f58c:	0014      	movs	r4, r2
 800f58e:	2900      	cmp	r1, #0
 800f590:	da07      	bge.n	800f5a2 <__swhatbuf_r+0x22>
 800f592:	2300      	movs	r3, #0
 800f594:	602b      	str	r3, [r5, #0]
 800f596:	89b3      	ldrh	r3, [r6, #12]
 800f598:	061b      	lsls	r3, r3, #24
 800f59a:	d411      	bmi.n	800f5c0 <__swhatbuf_r+0x40>
 800f59c:	2380      	movs	r3, #128	; 0x80
 800f59e:	00db      	lsls	r3, r3, #3
 800f5a0:	e00f      	b.n	800f5c2 <__swhatbuf_r+0x42>
 800f5a2:	466a      	mov	r2, sp
 800f5a4:	f000 f8a8 	bl	800f6f8 <_fstat_r>
 800f5a8:	2800      	cmp	r0, #0
 800f5aa:	dbf2      	blt.n	800f592 <__swhatbuf_r+0x12>
 800f5ac:	22f0      	movs	r2, #240	; 0xf0
 800f5ae:	9b01      	ldr	r3, [sp, #4]
 800f5b0:	0212      	lsls	r2, r2, #8
 800f5b2:	4013      	ands	r3, r2
 800f5b4:	4a05      	ldr	r2, [pc, #20]	; (800f5cc <__swhatbuf_r+0x4c>)
 800f5b6:	189b      	adds	r3, r3, r2
 800f5b8:	425a      	negs	r2, r3
 800f5ba:	4153      	adcs	r3, r2
 800f5bc:	602b      	str	r3, [r5, #0]
 800f5be:	e7ed      	b.n	800f59c <__swhatbuf_r+0x1c>
 800f5c0:	2340      	movs	r3, #64	; 0x40
 800f5c2:	2000      	movs	r0, #0
 800f5c4:	6023      	str	r3, [r4, #0]
 800f5c6:	b016      	add	sp, #88	; 0x58
 800f5c8:	bd70      	pop	{r4, r5, r6, pc}
 800f5ca:	46c0      	nop			; (mov r8, r8)
 800f5cc:	ffffe000 	.word	0xffffe000

0800f5d0 <__smakebuf_r>:
 800f5d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f5d2:	2602      	movs	r6, #2
 800f5d4:	898b      	ldrh	r3, [r1, #12]
 800f5d6:	0005      	movs	r5, r0
 800f5d8:	000c      	movs	r4, r1
 800f5da:	4233      	tst	r3, r6
 800f5dc:	d006      	beq.n	800f5ec <__smakebuf_r+0x1c>
 800f5de:	0023      	movs	r3, r4
 800f5e0:	3347      	adds	r3, #71	; 0x47
 800f5e2:	6023      	str	r3, [r4, #0]
 800f5e4:	6123      	str	r3, [r4, #16]
 800f5e6:	2301      	movs	r3, #1
 800f5e8:	6163      	str	r3, [r4, #20]
 800f5ea:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800f5ec:	ab01      	add	r3, sp, #4
 800f5ee:	466a      	mov	r2, sp
 800f5f0:	f7ff ffc6 	bl	800f580 <__swhatbuf_r>
 800f5f4:	9900      	ldr	r1, [sp, #0]
 800f5f6:	0007      	movs	r7, r0
 800f5f8:	0028      	movs	r0, r5
 800f5fa:	f7ff fa8d 	bl	800eb18 <_malloc_r>
 800f5fe:	2800      	cmp	r0, #0
 800f600:	d108      	bne.n	800f614 <__smakebuf_r+0x44>
 800f602:	220c      	movs	r2, #12
 800f604:	5ea3      	ldrsh	r3, [r4, r2]
 800f606:	059a      	lsls	r2, r3, #22
 800f608:	d4ef      	bmi.n	800f5ea <__smakebuf_r+0x1a>
 800f60a:	2203      	movs	r2, #3
 800f60c:	4393      	bics	r3, r2
 800f60e:	431e      	orrs	r6, r3
 800f610:	81a6      	strh	r6, [r4, #12]
 800f612:	e7e4      	b.n	800f5de <__smakebuf_r+0xe>
 800f614:	4b0f      	ldr	r3, [pc, #60]	; (800f654 <__smakebuf_r+0x84>)
 800f616:	62ab      	str	r3, [r5, #40]	; 0x28
 800f618:	2380      	movs	r3, #128	; 0x80
 800f61a:	89a2      	ldrh	r2, [r4, #12]
 800f61c:	6020      	str	r0, [r4, #0]
 800f61e:	4313      	orrs	r3, r2
 800f620:	81a3      	strh	r3, [r4, #12]
 800f622:	9b00      	ldr	r3, [sp, #0]
 800f624:	6120      	str	r0, [r4, #16]
 800f626:	6163      	str	r3, [r4, #20]
 800f628:	9b01      	ldr	r3, [sp, #4]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d00d      	beq.n	800f64a <__smakebuf_r+0x7a>
 800f62e:	230e      	movs	r3, #14
 800f630:	5ee1      	ldrsh	r1, [r4, r3]
 800f632:	0028      	movs	r0, r5
 800f634:	f000 f872 	bl	800f71c <_isatty_r>
 800f638:	2800      	cmp	r0, #0
 800f63a:	d006      	beq.n	800f64a <__smakebuf_r+0x7a>
 800f63c:	2203      	movs	r2, #3
 800f63e:	89a3      	ldrh	r3, [r4, #12]
 800f640:	4393      	bics	r3, r2
 800f642:	001a      	movs	r2, r3
 800f644:	2301      	movs	r3, #1
 800f646:	4313      	orrs	r3, r2
 800f648:	81a3      	strh	r3, [r4, #12]
 800f64a:	89a0      	ldrh	r0, [r4, #12]
 800f64c:	4338      	orrs	r0, r7
 800f64e:	81a0      	strh	r0, [r4, #12]
 800f650:	e7cb      	b.n	800f5ea <__smakebuf_r+0x1a>
 800f652:	46c0      	nop			; (mov r8, r8)
 800f654:	0800da45 	.word	0x0800da45

0800f658 <memmove>:
 800f658:	b510      	push	{r4, lr}
 800f65a:	4288      	cmp	r0, r1
 800f65c:	d902      	bls.n	800f664 <memmove+0xc>
 800f65e:	188b      	adds	r3, r1, r2
 800f660:	4298      	cmp	r0, r3
 800f662:	d303      	bcc.n	800f66c <memmove+0x14>
 800f664:	2300      	movs	r3, #0
 800f666:	e007      	b.n	800f678 <memmove+0x20>
 800f668:	5c8b      	ldrb	r3, [r1, r2]
 800f66a:	5483      	strb	r3, [r0, r2]
 800f66c:	3a01      	subs	r2, #1
 800f66e:	d2fb      	bcs.n	800f668 <memmove+0x10>
 800f670:	bd10      	pop	{r4, pc}
 800f672:	5ccc      	ldrb	r4, [r1, r3]
 800f674:	54c4      	strb	r4, [r0, r3]
 800f676:	3301      	adds	r3, #1
 800f678:	429a      	cmp	r2, r3
 800f67a:	d1fa      	bne.n	800f672 <memmove+0x1a>
 800f67c:	e7f8      	b.n	800f670 <memmove+0x18>

0800f67e <__malloc_lock>:
 800f67e:	4770      	bx	lr

0800f680 <__malloc_unlock>:
 800f680:	4770      	bx	lr

0800f682 <_realloc_r>:
 800f682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f684:	0007      	movs	r7, r0
 800f686:	000d      	movs	r5, r1
 800f688:	0016      	movs	r6, r2
 800f68a:	2900      	cmp	r1, #0
 800f68c:	d105      	bne.n	800f69a <_realloc_r+0x18>
 800f68e:	0011      	movs	r1, r2
 800f690:	f7ff fa42 	bl	800eb18 <_malloc_r>
 800f694:	0004      	movs	r4, r0
 800f696:	0020      	movs	r0, r4
 800f698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f69a:	2a00      	cmp	r2, #0
 800f69c:	d103      	bne.n	800f6a6 <_realloc_r+0x24>
 800f69e:	f7ff f9f1 	bl	800ea84 <_free_r>
 800f6a2:	0034      	movs	r4, r6
 800f6a4:	e7f7      	b.n	800f696 <_realloc_r+0x14>
 800f6a6:	f000 f84b 	bl	800f740 <_malloc_usable_size_r>
 800f6aa:	002c      	movs	r4, r5
 800f6ac:	42b0      	cmp	r0, r6
 800f6ae:	d2f2      	bcs.n	800f696 <_realloc_r+0x14>
 800f6b0:	0031      	movs	r1, r6
 800f6b2:	0038      	movs	r0, r7
 800f6b4:	f7ff fa30 	bl	800eb18 <_malloc_r>
 800f6b8:	1e04      	subs	r4, r0, #0
 800f6ba:	d0ec      	beq.n	800f696 <_realloc_r+0x14>
 800f6bc:	0029      	movs	r1, r5
 800f6be:	0032      	movs	r2, r6
 800f6c0:	f7fb fdab 	bl	800b21a <memcpy>
 800f6c4:	0029      	movs	r1, r5
 800f6c6:	0038      	movs	r0, r7
 800f6c8:	f7ff f9dc 	bl	800ea84 <_free_r>
 800f6cc:	e7e3      	b.n	800f696 <_realloc_r+0x14>
	...

0800f6d0 <_read_r>:
 800f6d0:	b570      	push	{r4, r5, r6, lr}
 800f6d2:	0005      	movs	r5, r0
 800f6d4:	0008      	movs	r0, r1
 800f6d6:	0011      	movs	r1, r2
 800f6d8:	2200      	movs	r2, #0
 800f6da:	4c06      	ldr	r4, [pc, #24]	; (800f6f4 <_read_r+0x24>)
 800f6dc:	6022      	str	r2, [r4, #0]
 800f6de:	001a      	movs	r2, r3
 800f6e0:	f7f9 fc18 	bl	8008f14 <_read>
 800f6e4:	1c43      	adds	r3, r0, #1
 800f6e6:	d103      	bne.n	800f6f0 <_read_r+0x20>
 800f6e8:	6823      	ldr	r3, [r4, #0]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d000      	beq.n	800f6f0 <_read_r+0x20>
 800f6ee:	602b      	str	r3, [r5, #0]
 800f6f0:	bd70      	pop	{r4, r5, r6, pc}
 800f6f2:	46c0      	nop			; (mov r8, r8)
 800f6f4:	20002054 	.word	0x20002054

0800f6f8 <_fstat_r>:
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	b570      	push	{r4, r5, r6, lr}
 800f6fc:	4c06      	ldr	r4, [pc, #24]	; (800f718 <_fstat_r+0x20>)
 800f6fe:	0005      	movs	r5, r0
 800f700:	0008      	movs	r0, r1
 800f702:	0011      	movs	r1, r2
 800f704:	6023      	str	r3, [r4, #0]
 800f706:	f7f9 fc24 	bl	8008f52 <_fstat>
 800f70a:	1c43      	adds	r3, r0, #1
 800f70c:	d103      	bne.n	800f716 <_fstat_r+0x1e>
 800f70e:	6823      	ldr	r3, [r4, #0]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d000      	beq.n	800f716 <_fstat_r+0x1e>
 800f714:	602b      	str	r3, [r5, #0]
 800f716:	bd70      	pop	{r4, r5, r6, pc}
 800f718:	20002054 	.word	0x20002054

0800f71c <_isatty_r>:
 800f71c:	2300      	movs	r3, #0
 800f71e:	b570      	push	{r4, r5, r6, lr}
 800f720:	4c06      	ldr	r4, [pc, #24]	; (800f73c <_isatty_r+0x20>)
 800f722:	0005      	movs	r5, r0
 800f724:	0008      	movs	r0, r1
 800f726:	6023      	str	r3, [r4, #0]
 800f728:	f7f9 fc18 	bl	8008f5c <_isatty>
 800f72c:	1c43      	adds	r3, r0, #1
 800f72e:	d103      	bne.n	800f738 <_isatty_r+0x1c>
 800f730:	6823      	ldr	r3, [r4, #0]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d000      	beq.n	800f738 <_isatty_r+0x1c>
 800f736:	602b      	str	r3, [r5, #0]
 800f738:	bd70      	pop	{r4, r5, r6, pc}
 800f73a:	46c0      	nop			; (mov r8, r8)
 800f73c:	20002054 	.word	0x20002054

0800f740 <_malloc_usable_size_r>:
 800f740:	1f0b      	subs	r3, r1, #4
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	1f18      	subs	r0, r3, #4
 800f746:	2b00      	cmp	r3, #0
 800f748:	da01      	bge.n	800f74e <_malloc_usable_size_r+0xe>
 800f74a:	580b      	ldr	r3, [r1, r0]
 800f74c:	18c0      	adds	r0, r0, r3
 800f74e:	4770      	bx	lr

0800f750 <_init>:
 800f750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f752:	46c0      	nop			; (mov r8, r8)
 800f754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f756:	bc08      	pop	{r3}
 800f758:	469e      	mov	lr, r3
 800f75a:	4770      	bx	lr

0800f75c <_fini>:
 800f75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f75e:	46c0      	nop			; (mov r8, r8)
 800f760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f762:	bc08      	pop	{r3}
 800f764:	469e      	mov	lr, r3
 800f766:	4770      	bx	lr
