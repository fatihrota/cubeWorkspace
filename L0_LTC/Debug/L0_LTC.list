
L0_LTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08005000  08005000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .app_info     00000008  080050c0  080050c0  000050c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000d2f4  080050c8  080050c8  000050c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000b08  080123c0  080123c0  000123c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08012ec8  08012ec8  000230e0  2**0
                  CONTENTS
  5 .ARM          00000008  08012ec8  08012ec8  00012ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08012ed0  08012ed0  000230e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08012ed0  08012ed0  00012ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08012ed4  08012ed4  00012ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RAMVectorTable 00000100  20000000  20000000  00030000  2**2
                  ALLOC
 10 .IAPMailbox   00000008  20000100  20000100  00030000  2**2
                  ALLOC
 11 .data         000001f4  20000108  08012ed8  00020108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .app_sha      00000014  080130cc  080130cc  000230cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .conf         00000000  0802f000  0802f000  000230e0  2**0
                  CONTENTS
 14 .bss          00001d64  200002fc  200002fc  00030000  2**2
                  ALLOC
 15 ._user_heap_stack 00000600  20002060  20002060  00030000  2**0
                  ALLOC
 16 .ARM.attributes 00000028  00000000  00000000  000230e0  2**0
                  CONTENTS, READONLY
 17 .debug_info   0001955a  00000000  00000000  00023108  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00003d52  00000000  00000000  0003c662  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00000fa0  00000000  00000000  000403b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00000e20  00000000  00000000  00041358  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  000192ad  00000000  00000000  00042178  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   00011afc  00000000  00000000  0005b425  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    00087502  00000000  00000000  0006cf21  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  000f4423  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000047b8  00000000  00000000  000f44a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080050c8 <__do_global_dtors_aux>:
 80050c8:	b510      	push	{r4, lr}
 80050ca:	4c06      	ldr	r4, [pc, #24]	; (80050e4 <__do_global_dtors_aux+0x1c>)
 80050cc:	7823      	ldrb	r3, [r4, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d107      	bne.n	80050e2 <__do_global_dtors_aux+0x1a>
 80050d2:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <__do_global_dtors_aux+0x20>)
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <__do_global_dtors_aux+0x16>
 80050d8:	4804      	ldr	r0, [pc, #16]	; (80050ec <__do_global_dtors_aux+0x24>)
 80050da:	e000      	b.n	80050de <__do_global_dtors_aux+0x16>
 80050dc:	bf00      	nop
 80050de:	2301      	movs	r3, #1
 80050e0:	7023      	strb	r3, [r4, #0]
 80050e2:	bd10      	pop	{r4, pc}
 80050e4:	200002fc 	.word	0x200002fc
 80050e8:	00000000 	.word	0x00000000
 80050ec:	080123a4 	.word	0x080123a4

080050f0 <frame_dummy>:
 80050f0:	4b04      	ldr	r3, [pc, #16]	; (8005104 <frame_dummy+0x14>)
 80050f2:	b510      	push	{r4, lr}
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <frame_dummy+0x10>
 80050f8:	4903      	ldr	r1, [pc, #12]	; (8005108 <frame_dummy+0x18>)
 80050fa:	4804      	ldr	r0, [pc, #16]	; (800510c <frame_dummy+0x1c>)
 80050fc:	e000      	b.n	8005100 <frame_dummy+0x10>
 80050fe:	bf00      	nop
 8005100:	bd10      	pop	{r4, pc}
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	00000000 	.word	0x00000000
 8005108:	20000300 	.word	0x20000300
 800510c:	080123a4 	.word	0x080123a4

08005110 <strlen>:
 8005110:	2300      	movs	r3, #0
 8005112:	5cc2      	ldrb	r2, [r0, r3]
 8005114:	3301      	adds	r3, #1
 8005116:	2a00      	cmp	r2, #0
 8005118:	d1fb      	bne.n	8005112 <strlen+0x2>
 800511a:	1e58      	subs	r0, r3, #1
 800511c:	4770      	bx	lr
	...

08005120 <__gnu_thumb1_case_uqi>:
 8005120:	b402      	push	{r1}
 8005122:	4671      	mov	r1, lr
 8005124:	0849      	lsrs	r1, r1, #1
 8005126:	0049      	lsls	r1, r1, #1
 8005128:	5c09      	ldrb	r1, [r1, r0]
 800512a:	0049      	lsls	r1, r1, #1
 800512c:	448e      	add	lr, r1
 800512e:	bc02      	pop	{r1}
 8005130:	4770      	bx	lr
 8005132:	46c0      	nop			; (mov r8, r8)

08005134 <__udivsi3>:
 8005134:	2200      	movs	r2, #0
 8005136:	0843      	lsrs	r3, r0, #1
 8005138:	428b      	cmp	r3, r1
 800513a:	d374      	bcc.n	8005226 <__udivsi3+0xf2>
 800513c:	0903      	lsrs	r3, r0, #4
 800513e:	428b      	cmp	r3, r1
 8005140:	d35f      	bcc.n	8005202 <__udivsi3+0xce>
 8005142:	0a03      	lsrs	r3, r0, #8
 8005144:	428b      	cmp	r3, r1
 8005146:	d344      	bcc.n	80051d2 <__udivsi3+0x9e>
 8005148:	0b03      	lsrs	r3, r0, #12
 800514a:	428b      	cmp	r3, r1
 800514c:	d328      	bcc.n	80051a0 <__udivsi3+0x6c>
 800514e:	0c03      	lsrs	r3, r0, #16
 8005150:	428b      	cmp	r3, r1
 8005152:	d30d      	bcc.n	8005170 <__udivsi3+0x3c>
 8005154:	22ff      	movs	r2, #255	; 0xff
 8005156:	0209      	lsls	r1, r1, #8
 8005158:	ba12      	rev	r2, r2
 800515a:	0c03      	lsrs	r3, r0, #16
 800515c:	428b      	cmp	r3, r1
 800515e:	d302      	bcc.n	8005166 <__udivsi3+0x32>
 8005160:	1212      	asrs	r2, r2, #8
 8005162:	0209      	lsls	r1, r1, #8
 8005164:	d065      	beq.n	8005232 <__udivsi3+0xfe>
 8005166:	0b03      	lsrs	r3, r0, #12
 8005168:	428b      	cmp	r3, r1
 800516a:	d319      	bcc.n	80051a0 <__udivsi3+0x6c>
 800516c:	e000      	b.n	8005170 <__udivsi3+0x3c>
 800516e:	0a09      	lsrs	r1, r1, #8
 8005170:	0bc3      	lsrs	r3, r0, #15
 8005172:	428b      	cmp	r3, r1
 8005174:	d301      	bcc.n	800517a <__udivsi3+0x46>
 8005176:	03cb      	lsls	r3, r1, #15
 8005178:	1ac0      	subs	r0, r0, r3
 800517a:	4152      	adcs	r2, r2
 800517c:	0b83      	lsrs	r3, r0, #14
 800517e:	428b      	cmp	r3, r1
 8005180:	d301      	bcc.n	8005186 <__udivsi3+0x52>
 8005182:	038b      	lsls	r3, r1, #14
 8005184:	1ac0      	subs	r0, r0, r3
 8005186:	4152      	adcs	r2, r2
 8005188:	0b43      	lsrs	r3, r0, #13
 800518a:	428b      	cmp	r3, r1
 800518c:	d301      	bcc.n	8005192 <__udivsi3+0x5e>
 800518e:	034b      	lsls	r3, r1, #13
 8005190:	1ac0      	subs	r0, r0, r3
 8005192:	4152      	adcs	r2, r2
 8005194:	0b03      	lsrs	r3, r0, #12
 8005196:	428b      	cmp	r3, r1
 8005198:	d301      	bcc.n	800519e <__udivsi3+0x6a>
 800519a:	030b      	lsls	r3, r1, #12
 800519c:	1ac0      	subs	r0, r0, r3
 800519e:	4152      	adcs	r2, r2
 80051a0:	0ac3      	lsrs	r3, r0, #11
 80051a2:	428b      	cmp	r3, r1
 80051a4:	d301      	bcc.n	80051aa <__udivsi3+0x76>
 80051a6:	02cb      	lsls	r3, r1, #11
 80051a8:	1ac0      	subs	r0, r0, r3
 80051aa:	4152      	adcs	r2, r2
 80051ac:	0a83      	lsrs	r3, r0, #10
 80051ae:	428b      	cmp	r3, r1
 80051b0:	d301      	bcc.n	80051b6 <__udivsi3+0x82>
 80051b2:	028b      	lsls	r3, r1, #10
 80051b4:	1ac0      	subs	r0, r0, r3
 80051b6:	4152      	adcs	r2, r2
 80051b8:	0a43      	lsrs	r3, r0, #9
 80051ba:	428b      	cmp	r3, r1
 80051bc:	d301      	bcc.n	80051c2 <__udivsi3+0x8e>
 80051be:	024b      	lsls	r3, r1, #9
 80051c0:	1ac0      	subs	r0, r0, r3
 80051c2:	4152      	adcs	r2, r2
 80051c4:	0a03      	lsrs	r3, r0, #8
 80051c6:	428b      	cmp	r3, r1
 80051c8:	d301      	bcc.n	80051ce <__udivsi3+0x9a>
 80051ca:	020b      	lsls	r3, r1, #8
 80051cc:	1ac0      	subs	r0, r0, r3
 80051ce:	4152      	adcs	r2, r2
 80051d0:	d2cd      	bcs.n	800516e <__udivsi3+0x3a>
 80051d2:	09c3      	lsrs	r3, r0, #7
 80051d4:	428b      	cmp	r3, r1
 80051d6:	d301      	bcc.n	80051dc <__udivsi3+0xa8>
 80051d8:	01cb      	lsls	r3, r1, #7
 80051da:	1ac0      	subs	r0, r0, r3
 80051dc:	4152      	adcs	r2, r2
 80051de:	0983      	lsrs	r3, r0, #6
 80051e0:	428b      	cmp	r3, r1
 80051e2:	d301      	bcc.n	80051e8 <__udivsi3+0xb4>
 80051e4:	018b      	lsls	r3, r1, #6
 80051e6:	1ac0      	subs	r0, r0, r3
 80051e8:	4152      	adcs	r2, r2
 80051ea:	0943      	lsrs	r3, r0, #5
 80051ec:	428b      	cmp	r3, r1
 80051ee:	d301      	bcc.n	80051f4 <__udivsi3+0xc0>
 80051f0:	014b      	lsls	r3, r1, #5
 80051f2:	1ac0      	subs	r0, r0, r3
 80051f4:	4152      	adcs	r2, r2
 80051f6:	0903      	lsrs	r3, r0, #4
 80051f8:	428b      	cmp	r3, r1
 80051fa:	d301      	bcc.n	8005200 <__udivsi3+0xcc>
 80051fc:	010b      	lsls	r3, r1, #4
 80051fe:	1ac0      	subs	r0, r0, r3
 8005200:	4152      	adcs	r2, r2
 8005202:	08c3      	lsrs	r3, r0, #3
 8005204:	428b      	cmp	r3, r1
 8005206:	d301      	bcc.n	800520c <__udivsi3+0xd8>
 8005208:	00cb      	lsls	r3, r1, #3
 800520a:	1ac0      	subs	r0, r0, r3
 800520c:	4152      	adcs	r2, r2
 800520e:	0883      	lsrs	r3, r0, #2
 8005210:	428b      	cmp	r3, r1
 8005212:	d301      	bcc.n	8005218 <__udivsi3+0xe4>
 8005214:	008b      	lsls	r3, r1, #2
 8005216:	1ac0      	subs	r0, r0, r3
 8005218:	4152      	adcs	r2, r2
 800521a:	0843      	lsrs	r3, r0, #1
 800521c:	428b      	cmp	r3, r1
 800521e:	d301      	bcc.n	8005224 <__udivsi3+0xf0>
 8005220:	004b      	lsls	r3, r1, #1
 8005222:	1ac0      	subs	r0, r0, r3
 8005224:	4152      	adcs	r2, r2
 8005226:	1a41      	subs	r1, r0, r1
 8005228:	d200      	bcs.n	800522c <__udivsi3+0xf8>
 800522a:	4601      	mov	r1, r0
 800522c:	4152      	adcs	r2, r2
 800522e:	4610      	mov	r0, r2
 8005230:	4770      	bx	lr
 8005232:	e7ff      	b.n	8005234 <__udivsi3+0x100>
 8005234:	b501      	push	{r0, lr}
 8005236:	2000      	movs	r0, #0
 8005238:	f000 f8f0 	bl	800541c <__aeabi_idiv0>
 800523c:	bd02      	pop	{r1, pc}
 800523e:	46c0      	nop			; (mov r8, r8)

08005240 <__aeabi_uidivmod>:
 8005240:	2900      	cmp	r1, #0
 8005242:	d0f7      	beq.n	8005234 <__udivsi3+0x100>
 8005244:	e776      	b.n	8005134 <__udivsi3>
 8005246:	4770      	bx	lr

08005248 <__divsi3>:
 8005248:	4603      	mov	r3, r0
 800524a:	430b      	orrs	r3, r1
 800524c:	d47f      	bmi.n	800534e <__divsi3+0x106>
 800524e:	2200      	movs	r2, #0
 8005250:	0843      	lsrs	r3, r0, #1
 8005252:	428b      	cmp	r3, r1
 8005254:	d374      	bcc.n	8005340 <__divsi3+0xf8>
 8005256:	0903      	lsrs	r3, r0, #4
 8005258:	428b      	cmp	r3, r1
 800525a:	d35f      	bcc.n	800531c <__divsi3+0xd4>
 800525c:	0a03      	lsrs	r3, r0, #8
 800525e:	428b      	cmp	r3, r1
 8005260:	d344      	bcc.n	80052ec <__divsi3+0xa4>
 8005262:	0b03      	lsrs	r3, r0, #12
 8005264:	428b      	cmp	r3, r1
 8005266:	d328      	bcc.n	80052ba <__divsi3+0x72>
 8005268:	0c03      	lsrs	r3, r0, #16
 800526a:	428b      	cmp	r3, r1
 800526c:	d30d      	bcc.n	800528a <__divsi3+0x42>
 800526e:	22ff      	movs	r2, #255	; 0xff
 8005270:	0209      	lsls	r1, r1, #8
 8005272:	ba12      	rev	r2, r2
 8005274:	0c03      	lsrs	r3, r0, #16
 8005276:	428b      	cmp	r3, r1
 8005278:	d302      	bcc.n	8005280 <__divsi3+0x38>
 800527a:	1212      	asrs	r2, r2, #8
 800527c:	0209      	lsls	r1, r1, #8
 800527e:	d065      	beq.n	800534c <__divsi3+0x104>
 8005280:	0b03      	lsrs	r3, r0, #12
 8005282:	428b      	cmp	r3, r1
 8005284:	d319      	bcc.n	80052ba <__divsi3+0x72>
 8005286:	e000      	b.n	800528a <__divsi3+0x42>
 8005288:	0a09      	lsrs	r1, r1, #8
 800528a:	0bc3      	lsrs	r3, r0, #15
 800528c:	428b      	cmp	r3, r1
 800528e:	d301      	bcc.n	8005294 <__divsi3+0x4c>
 8005290:	03cb      	lsls	r3, r1, #15
 8005292:	1ac0      	subs	r0, r0, r3
 8005294:	4152      	adcs	r2, r2
 8005296:	0b83      	lsrs	r3, r0, #14
 8005298:	428b      	cmp	r3, r1
 800529a:	d301      	bcc.n	80052a0 <__divsi3+0x58>
 800529c:	038b      	lsls	r3, r1, #14
 800529e:	1ac0      	subs	r0, r0, r3
 80052a0:	4152      	adcs	r2, r2
 80052a2:	0b43      	lsrs	r3, r0, #13
 80052a4:	428b      	cmp	r3, r1
 80052a6:	d301      	bcc.n	80052ac <__divsi3+0x64>
 80052a8:	034b      	lsls	r3, r1, #13
 80052aa:	1ac0      	subs	r0, r0, r3
 80052ac:	4152      	adcs	r2, r2
 80052ae:	0b03      	lsrs	r3, r0, #12
 80052b0:	428b      	cmp	r3, r1
 80052b2:	d301      	bcc.n	80052b8 <__divsi3+0x70>
 80052b4:	030b      	lsls	r3, r1, #12
 80052b6:	1ac0      	subs	r0, r0, r3
 80052b8:	4152      	adcs	r2, r2
 80052ba:	0ac3      	lsrs	r3, r0, #11
 80052bc:	428b      	cmp	r3, r1
 80052be:	d301      	bcc.n	80052c4 <__divsi3+0x7c>
 80052c0:	02cb      	lsls	r3, r1, #11
 80052c2:	1ac0      	subs	r0, r0, r3
 80052c4:	4152      	adcs	r2, r2
 80052c6:	0a83      	lsrs	r3, r0, #10
 80052c8:	428b      	cmp	r3, r1
 80052ca:	d301      	bcc.n	80052d0 <__divsi3+0x88>
 80052cc:	028b      	lsls	r3, r1, #10
 80052ce:	1ac0      	subs	r0, r0, r3
 80052d0:	4152      	adcs	r2, r2
 80052d2:	0a43      	lsrs	r3, r0, #9
 80052d4:	428b      	cmp	r3, r1
 80052d6:	d301      	bcc.n	80052dc <__divsi3+0x94>
 80052d8:	024b      	lsls	r3, r1, #9
 80052da:	1ac0      	subs	r0, r0, r3
 80052dc:	4152      	adcs	r2, r2
 80052de:	0a03      	lsrs	r3, r0, #8
 80052e0:	428b      	cmp	r3, r1
 80052e2:	d301      	bcc.n	80052e8 <__divsi3+0xa0>
 80052e4:	020b      	lsls	r3, r1, #8
 80052e6:	1ac0      	subs	r0, r0, r3
 80052e8:	4152      	adcs	r2, r2
 80052ea:	d2cd      	bcs.n	8005288 <__divsi3+0x40>
 80052ec:	09c3      	lsrs	r3, r0, #7
 80052ee:	428b      	cmp	r3, r1
 80052f0:	d301      	bcc.n	80052f6 <__divsi3+0xae>
 80052f2:	01cb      	lsls	r3, r1, #7
 80052f4:	1ac0      	subs	r0, r0, r3
 80052f6:	4152      	adcs	r2, r2
 80052f8:	0983      	lsrs	r3, r0, #6
 80052fa:	428b      	cmp	r3, r1
 80052fc:	d301      	bcc.n	8005302 <__divsi3+0xba>
 80052fe:	018b      	lsls	r3, r1, #6
 8005300:	1ac0      	subs	r0, r0, r3
 8005302:	4152      	adcs	r2, r2
 8005304:	0943      	lsrs	r3, r0, #5
 8005306:	428b      	cmp	r3, r1
 8005308:	d301      	bcc.n	800530e <__divsi3+0xc6>
 800530a:	014b      	lsls	r3, r1, #5
 800530c:	1ac0      	subs	r0, r0, r3
 800530e:	4152      	adcs	r2, r2
 8005310:	0903      	lsrs	r3, r0, #4
 8005312:	428b      	cmp	r3, r1
 8005314:	d301      	bcc.n	800531a <__divsi3+0xd2>
 8005316:	010b      	lsls	r3, r1, #4
 8005318:	1ac0      	subs	r0, r0, r3
 800531a:	4152      	adcs	r2, r2
 800531c:	08c3      	lsrs	r3, r0, #3
 800531e:	428b      	cmp	r3, r1
 8005320:	d301      	bcc.n	8005326 <__divsi3+0xde>
 8005322:	00cb      	lsls	r3, r1, #3
 8005324:	1ac0      	subs	r0, r0, r3
 8005326:	4152      	adcs	r2, r2
 8005328:	0883      	lsrs	r3, r0, #2
 800532a:	428b      	cmp	r3, r1
 800532c:	d301      	bcc.n	8005332 <__divsi3+0xea>
 800532e:	008b      	lsls	r3, r1, #2
 8005330:	1ac0      	subs	r0, r0, r3
 8005332:	4152      	adcs	r2, r2
 8005334:	0843      	lsrs	r3, r0, #1
 8005336:	428b      	cmp	r3, r1
 8005338:	d301      	bcc.n	800533e <__divsi3+0xf6>
 800533a:	004b      	lsls	r3, r1, #1
 800533c:	1ac0      	subs	r0, r0, r3
 800533e:	4152      	adcs	r2, r2
 8005340:	1a41      	subs	r1, r0, r1
 8005342:	d200      	bcs.n	8005346 <__divsi3+0xfe>
 8005344:	4601      	mov	r1, r0
 8005346:	4152      	adcs	r2, r2
 8005348:	4610      	mov	r0, r2
 800534a:	4770      	bx	lr
 800534c:	e05d      	b.n	800540a <__divsi3+0x1c2>
 800534e:	0fca      	lsrs	r2, r1, #31
 8005350:	d000      	beq.n	8005354 <__divsi3+0x10c>
 8005352:	4249      	negs	r1, r1
 8005354:	1003      	asrs	r3, r0, #32
 8005356:	d300      	bcc.n	800535a <__divsi3+0x112>
 8005358:	4240      	negs	r0, r0
 800535a:	4053      	eors	r3, r2
 800535c:	2200      	movs	r2, #0
 800535e:	469c      	mov	ip, r3
 8005360:	0903      	lsrs	r3, r0, #4
 8005362:	428b      	cmp	r3, r1
 8005364:	d32d      	bcc.n	80053c2 <__divsi3+0x17a>
 8005366:	0a03      	lsrs	r3, r0, #8
 8005368:	428b      	cmp	r3, r1
 800536a:	d312      	bcc.n	8005392 <__divsi3+0x14a>
 800536c:	22fc      	movs	r2, #252	; 0xfc
 800536e:	0189      	lsls	r1, r1, #6
 8005370:	ba12      	rev	r2, r2
 8005372:	0a03      	lsrs	r3, r0, #8
 8005374:	428b      	cmp	r3, r1
 8005376:	d30c      	bcc.n	8005392 <__divsi3+0x14a>
 8005378:	0189      	lsls	r1, r1, #6
 800537a:	1192      	asrs	r2, r2, #6
 800537c:	428b      	cmp	r3, r1
 800537e:	d308      	bcc.n	8005392 <__divsi3+0x14a>
 8005380:	0189      	lsls	r1, r1, #6
 8005382:	1192      	asrs	r2, r2, #6
 8005384:	428b      	cmp	r3, r1
 8005386:	d304      	bcc.n	8005392 <__divsi3+0x14a>
 8005388:	0189      	lsls	r1, r1, #6
 800538a:	d03a      	beq.n	8005402 <__divsi3+0x1ba>
 800538c:	1192      	asrs	r2, r2, #6
 800538e:	e000      	b.n	8005392 <__divsi3+0x14a>
 8005390:	0989      	lsrs	r1, r1, #6
 8005392:	09c3      	lsrs	r3, r0, #7
 8005394:	428b      	cmp	r3, r1
 8005396:	d301      	bcc.n	800539c <__divsi3+0x154>
 8005398:	01cb      	lsls	r3, r1, #7
 800539a:	1ac0      	subs	r0, r0, r3
 800539c:	4152      	adcs	r2, r2
 800539e:	0983      	lsrs	r3, r0, #6
 80053a0:	428b      	cmp	r3, r1
 80053a2:	d301      	bcc.n	80053a8 <__divsi3+0x160>
 80053a4:	018b      	lsls	r3, r1, #6
 80053a6:	1ac0      	subs	r0, r0, r3
 80053a8:	4152      	adcs	r2, r2
 80053aa:	0943      	lsrs	r3, r0, #5
 80053ac:	428b      	cmp	r3, r1
 80053ae:	d301      	bcc.n	80053b4 <__divsi3+0x16c>
 80053b0:	014b      	lsls	r3, r1, #5
 80053b2:	1ac0      	subs	r0, r0, r3
 80053b4:	4152      	adcs	r2, r2
 80053b6:	0903      	lsrs	r3, r0, #4
 80053b8:	428b      	cmp	r3, r1
 80053ba:	d301      	bcc.n	80053c0 <__divsi3+0x178>
 80053bc:	010b      	lsls	r3, r1, #4
 80053be:	1ac0      	subs	r0, r0, r3
 80053c0:	4152      	adcs	r2, r2
 80053c2:	08c3      	lsrs	r3, r0, #3
 80053c4:	428b      	cmp	r3, r1
 80053c6:	d301      	bcc.n	80053cc <__divsi3+0x184>
 80053c8:	00cb      	lsls	r3, r1, #3
 80053ca:	1ac0      	subs	r0, r0, r3
 80053cc:	4152      	adcs	r2, r2
 80053ce:	0883      	lsrs	r3, r0, #2
 80053d0:	428b      	cmp	r3, r1
 80053d2:	d301      	bcc.n	80053d8 <__divsi3+0x190>
 80053d4:	008b      	lsls	r3, r1, #2
 80053d6:	1ac0      	subs	r0, r0, r3
 80053d8:	4152      	adcs	r2, r2
 80053da:	d2d9      	bcs.n	8005390 <__divsi3+0x148>
 80053dc:	0843      	lsrs	r3, r0, #1
 80053de:	428b      	cmp	r3, r1
 80053e0:	d301      	bcc.n	80053e6 <__divsi3+0x19e>
 80053e2:	004b      	lsls	r3, r1, #1
 80053e4:	1ac0      	subs	r0, r0, r3
 80053e6:	4152      	adcs	r2, r2
 80053e8:	1a41      	subs	r1, r0, r1
 80053ea:	d200      	bcs.n	80053ee <__divsi3+0x1a6>
 80053ec:	4601      	mov	r1, r0
 80053ee:	4663      	mov	r3, ip
 80053f0:	4152      	adcs	r2, r2
 80053f2:	105b      	asrs	r3, r3, #1
 80053f4:	4610      	mov	r0, r2
 80053f6:	d301      	bcc.n	80053fc <__divsi3+0x1b4>
 80053f8:	4240      	negs	r0, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d500      	bpl.n	8005400 <__divsi3+0x1b8>
 80053fe:	4249      	negs	r1, r1
 8005400:	4770      	bx	lr
 8005402:	4663      	mov	r3, ip
 8005404:	105b      	asrs	r3, r3, #1
 8005406:	d300      	bcc.n	800540a <__divsi3+0x1c2>
 8005408:	4240      	negs	r0, r0
 800540a:	b501      	push	{r0, lr}
 800540c:	2000      	movs	r0, #0
 800540e:	f000 f805 	bl	800541c <__aeabi_idiv0>
 8005412:	bd02      	pop	{r1, pc}

08005414 <__aeabi_idivmod>:
 8005414:	2900      	cmp	r1, #0
 8005416:	d0f8      	beq.n	800540a <__divsi3+0x1c2>
 8005418:	e716      	b.n	8005248 <__divsi3>
 800541a:	4770      	bx	lr

0800541c <__aeabi_idiv0>:
 800541c:	4770      	bx	lr
 800541e:	46c0      	nop			; (mov r8, r8)

08005420 <__aeabi_cdrcmple>:
 8005420:	4684      	mov	ip, r0
 8005422:	1c10      	adds	r0, r2, #0
 8005424:	4662      	mov	r2, ip
 8005426:	468c      	mov	ip, r1
 8005428:	1c19      	adds	r1, r3, #0
 800542a:	4663      	mov	r3, ip
 800542c:	e000      	b.n	8005430 <__aeabi_cdcmpeq>
 800542e:	46c0      	nop			; (mov r8, r8)

08005430 <__aeabi_cdcmpeq>:
 8005430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005432:	f001 fb3b 	bl	8006aac <__ledf2>
 8005436:	2800      	cmp	r0, #0
 8005438:	d401      	bmi.n	800543e <__aeabi_cdcmpeq+0xe>
 800543a:	2100      	movs	r1, #0
 800543c:	42c8      	cmn	r0, r1
 800543e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08005440 <__aeabi_dcmpeq>:
 8005440:	b510      	push	{r4, lr}
 8005442:	f001 fa93 	bl	800696c <__eqdf2>
 8005446:	4240      	negs	r0, r0
 8005448:	3001      	adds	r0, #1
 800544a:	bd10      	pop	{r4, pc}

0800544c <__aeabi_dcmplt>:
 800544c:	b510      	push	{r4, lr}
 800544e:	f001 fb2d 	bl	8006aac <__ledf2>
 8005452:	2800      	cmp	r0, #0
 8005454:	db01      	blt.n	800545a <__aeabi_dcmplt+0xe>
 8005456:	2000      	movs	r0, #0
 8005458:	bd10      	pop	{r4, pc}
 800545a:	2001      	movs	r0, #1
 800545c:	bd10      	pop	{r4, pc}
 800545e:	46c0      	nop			; (mov r8, r8)

08005460 <__aeabi_dcmple>:
 8005460:	b510      	push	{r4, lr}
 8005462:	f001 fb23 	bl	8006aac <__ledf2>
 8005466:	2800      	cmp	r0, #0
 8005468:	dd01      	ble.n	800546e <__aeabi_dcmple+0xe>
 800546a:	2000      	movs	r0, #0
 800546c:	bd10      	pop	{r4, pc}
 800546e:	2001      	movs	r0, #1
 8005470:	bd10      	pop	{r4, pc}
 8005472:	46c0      	nop			; (mov r8, r8)

08005474 <__aeabi_dcmpgt>:
 8005474:	b510      	push	{r4, lr}
 8005476:	f001 fab5 	bl	80069e4 <__gedf2>
 800547a:	2800      	cmp	r0, #0
 800547c:	dc01      	bgt.n	8005482 <__aeabi_dcmpgt+0xe>
 800547e:	2000      	movs	r0, #0
 8005480:	bd10      	pop	{r4, pc}
 8005482:	2001      	movs	r0, #1
 8005484:	bd10      	pop	{r4, pc}
 8005486:	46c0      	nop			; (mov r8, r8)

08005488 <__aeabi_dcmpge>:
 8005488:	b510      	push	{r4, lr}
 800548a:	f001 faab 	bl	80069e4 <__gedf2>
 800548e:	2800      	cmp	r0, #0
 8005490:	da01      	bge.n	8005496 <__aeabi_dcmpge+0xe>
 8005492:	2000      	movs	r0, #0
 8005494:	bd10      	pop	{r4, pc}
 8005496:	2001      	movs	r0, #1
 8005498:	bd10      	pop	{r4, pc}
 800549a:	46c0      	nop			; (mov r8, r8)

0800549c <__aeabi_uldivmod>:
 800549c:	2b00      	cmp	r3, #0
 800549e:	d111      	bne.n	80054c4 <__aeabi_uldivmod+0x28>
 80054a0:	2a00      	cmp	r2, #0
 80054a2:	d10f      	bne.n	80054c4 <__aeabi_uldivmod+0x28>
 80054a4:	2900      	cmp	r1, #0
 80054a6:	d100      	bne.n	80054aa <__aeabi_uldivmod+0xe>
 80054a8:	2800      	cmp	r0, #0
 80054aa:	d002      	beq.n	80054b2 <__aeabi_uldivmod+0x16>
 80054ac:	2100      	movs	r1, #0
 80054ae:	43c9      	mvns	r1, r1
 80054b0:	1c08      	adds	r0, r1, #0
 80054b2:	b407      	push	{r0, r1, r2}
 80054b4:	4802      	ldr	r0, [pc, #8]	; (80054c0 <__aeabi_uldivmod+0x24>)
 80054b6:	a102      	add	r1, pc, #8	; (adr r1, 80054c0 <__aeabi_uldivmod+0x24>)
 80054b8:	1840      	adds	r0, r0, r1
 80054ba:	9002      	str	r0, [sp, #8]
 80054bc:	bd03      	pop	{r0, r1, pc}
 80054be:	46c0      	nop			; (mov r8, r8)
 80054c0:	ffffff5d 	.word	0xffffff5d
 80054c4:	b403      	push	{r0, r1}
 80054c6:	4668      	mov	r0, sp
 80054c8:	b501      	push	{r0, lr}
 80054ca:	9802      	ldr	r0, [sp, #8]
 80054cc:	f000 f84e 	bl	800556c <__udivmoddi4>
 80054d0:	9b01      	ldr	r3, [sp, #4]
 80054d2:	469e      	mov	lr, r3
 80054d4:	b002      	add	sp, #8
 80054d6:	bc0c      	pop	{r2, r3}
 80054d8:	4770      	bx	lr
 80054da:	46c0      	nop			; (mov r8, r8)

080054dc <__aeabi_lmul>:
 80054dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054de:	46ce      	mov	lr, r9
 80054e0:	4647      	mov	r7, r8
 80054e2:	0415      	lsls	r5, r2, #16
 80054e4:	0c2d      	lsrs	r5, r5, #16
 80054e6:	002e      	movs	r6, r5
 80054e8:	b580      	push	{r7, lr}
 80054ea:	0407      	lsls	r7, r0, #16
 80054ec:	0c14      	lsrs	r4, r2, #16
 80054ee:	0c3f      	lsrs	r7, r7, #16
 80054f0:	4699      	mov	r9, r3
 80054f2:	0c03      	lsrs	r3, r0, #16
 80054f4:	437e      	muls	r6, r7
 80054f6:	435d      	muls	r5, r3
 80054f8:	4367      	muls	r7, r4
 80054fa:	4363      	muls	r3, r4
 80054fc:	197f      	adds	r7, r7, r5
 80054fe:	0c34      	lsrs	r4, r6, #16
 8005500:	19e4      	adds	r4, r4, r7
 8005502:	469c      	mov	ip, r3
 8005504:	42a5      	cmp	r5, r4
 8005506:	d903      	bls.n	8005510 <__aeabi_lmul+0x34>
 8005508:	2380      	movs	r3, #128	; 0x80
 800550a:	025b      	lsls	r3, r3, #9
 800550c:	4698      	mov	r8, r3
 800550e:	44c4      	add	ip, r8
 8005510:	464b      	mov	r3, r9
 8005512:	4343      	muls	r3, r0
 8005514:	4351      	muls	r1, r2
 8005516:	0c25      	lsrs	r5, r4, #16
 8005518:	0436      	lsls	r6, r6, #16
 800551a:	4465      	add	r5, ip
 800551c:	0c36      	lsrs	r6, r6, #16
 800551e:	0424      	lsls	r4, r4, #16
 8005520:	19a4      	adds	r4, r4, r6
 8005522:	195b      	adds	r3, r3, r5
 8005524:	1859      	adds	r1, r3, r1
 8005526:	0020      	movs	r0, r4
 8005528:	bc0c      	pop	{r2, r3}
 800552a:	4690      	mov	r8, r2
 800552c:	4699      	mov	r9, r3
 800552e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005530 <__aeabi_d2uiz>:
 8005530:	b570      	push	{r4, r5, r6, lr}
 8005532:	2200      	movs	r2, #0
 8005534:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <__aeabi_d2uiz+0x38>)
 8005536:	0004      	movs	r4, r0
 8005538:	000d      	movs	r5, r1
 800553a:	f7ff ffa5 	bl	8005488 <__aeabi_dcmpge>
 800553e:	2800      	cmp	r0, #0
 8005540:	d104      	bne.n	800554c <__aeabi_d2uiz+0x1c>
 8005542:	0020      	movs	r0, r4
 8005544:	0029      	movs	r1, r5
 8005546:	f002 f8ef 	bl	8007728 <__aeabi_d2iz>
 800554a:	bd70      	pop	{r4, r5, r6, pc}
 800554c:	4b06      	ldr	r3, [pc, #24]	; (8005568 <__aeabi_d2uiz+0x38>)
 800554e:	2200      	movs	r2, #0
 8005550:	0020      	movs	r0, r4
 8005552:	0029      	movs	r1, r5
 8005554:	f001 fd84 	bl	8007060 <__aeabi_dsub>
 8005558:	f002 f8e6 	bl	8007728 <__aeabi_d2iz>
 800555c:	2380      	movs	r3, #128	; 0x80
 800555e:	061b      	lsls	r3, r3, #24
 8005560:	469c      	mov	ip, r3
 8005562:	4460      	add	r0, ip
 8005564:	e7f1      	b.n	800554a <__aeabi_d2uiz+0x1a>
 8005566:	46c0      	nop			; (mov r8, r8)
 8005568:	41e00000 	.word	0x41e00000

0800556c <__udivmoddi4>:
 800556c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800556e:	464f      	mov	r7, r9
 8005570:	4646      	mov	r6, r8
 8005572:	46d6      	mov	lr, sl
 8005574:	b5c0      	push	{r6, r7, lr}
 8005576:	0004      	movs	r4, r0
 8005578:	b082      	sub	sp, #8
 800557a:	000d      	movs	r5, r1
 800557c:	4691      	mov	r9, r2
 800557e:	4698      	mov	r8, r3
 8005580:	428b      	cmp	r3, r1
 8005582:	d82f      	bhi.n	80055e4 <__udivmoddi4+0x78>
 8005584:	d02c      	beq.n	80055e0 <__udivmoddi4+0x74>
 8005586:	4641      	mov	r1, r8
 8005588:	4648      	mov	r0, r9
 800558a:	f002 fa63 	bl	8007a54 <__clzdi2>
 800558e:	0029      	movs	r1, r5
 8005590:	0006      	movs	r6, r0
 8005592:	0020      	movs	r0, r4
 8005594:	f002 fa5e 	bl	8007a54 <__clzdi2>
 8005598:	1a33      	subs	r3, r6, r0
 800559a:	469c      	mov	ip, r3
 800559c:	3b20      	subs	r3, #32
 800559e:	469a      	mov	sl, r3
 80055a0:	d500      	bpl.n	80055a4 <__udivmoddi4+0x38>
 80055a2:	e076      	b.n	8005692 <__udivmoddi4+0x126>
 80055a4:	464b      	mov	r3, r9
 80055a6:	4652      	mov	r2, sl
 80055a8:	4093      	lsls	r3, r2
 80055aa:	001f      	movs	r7, r3
 80055ac:	464b      	mov	r3, r9
 80055ae:	4662      	mov	r2, ip
 80055b0:	4093      	lsls	r3, r2
 80055b2:	001e      	movs	r6, r3
 80055b4:	42af      	cmp	r7, r5
 80055b6:	d828      	bhi.n	800560a <__udivmoddi4+0x9e>
 80055b8:	d025      	beq.n	8005606 <__udivmoddi4+0x9a>
 80055ba:	4653      	mov	r3, sl
 80055bc:	1ba4      	subs	r4, r4, r6
 80055be:	41bd      	sbcs	r5, r7
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	da00      	bge.n	80055c6 <__udivmoddi4+0x5a>
 80055c4:	e07b      	b.n	80056be <__udivmoddi4+0x152>
 80055c6:	2200      	movs	r2, #0
 80055c8:	2300      	movs	r3, #0
 80055ca:	9200      	str	r2, [sp, #0]
 80055cc:	9301      	str	r3, [sp, #4]
 80055ce:	2301      	movs	r3, #1
 80055d0:	4652      	mov	r2, sl
 80055d2:	4093      	lsls	r3, r2
 80055d4:	9301      	str	r3, [sp, #4]
 80055d6:	2301      	movs	r3, #1
 80055d8:	4662      	mov	r2, ip
 80055da:	4093      	lsls	r3, r2
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	e018      	b.n	8005612 <__udivmoddi4+0xa6>
 80055e0:	4282      	cmp	r2, r0
 80055e2:	d9d0      	bls.n	8005586 <__udivmoddi4+0x1a>
 80055e4:	2200      	movs	r2, #0
 80055e6:	2300      	movs	r3, #0
 80055e8:	9200      	str	r2, [sp, #0]
 80055ea:	9301      	str	r3, [sp, #4]
 80055ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <__udivmoddi4+0x8a>
 80055f2:	601c      	str	r4, [r3, #0]
 80055f4:	605d      	str	r5, [r3, #4]
 80055f6:	9800      	ldr	r0, [sp, #0]
 80055f8:	9901      	ldr	r1, [sp, #4]
 80055fa:	b002      	add	sp, #8
 80055fc:	bc1c      	pop	{r2, r3, r4}
 80055fe:	4690      	mov	r8, r2
 8005600:	4699      	mov	r9, r3
 8005602:	46a2      	mov	sl, r4
 8005604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005606:	42a3      	cmp	r3, r4
 8005608:	d9d7      	bls.n	80055ba <__udivmoddi4+0x4e>
 800560a:	2200      	movs	r2, #0
 800560c:	2300      	movs	r3, #0
 800560e:	9200      	str	r2, [sp, #0]
 8005610:	9301      	str	r3, [sp, #4]
 8005612:	4663      	mov	r3, ip
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0e9      	beq.n	80055ec <__udivmoddi4+0x80>
 8005618:	07fb      	lsls	r3, r7, #31
 800561a:	4698      	mov	r8, r3
 800561c:	4641      	mov	r1, r8
 800561e:	0872      	lsrs	r2, r6, #1
 8005620:	430a      	orrs	r2, r1
 8005622:	087b      	lsrs	r3, r7, #1
 8005624:	4666      	mov	r6, ip
 8005626:	e00e      	b.n	8005646 <__udivmoddi4+0xda>
 8005628:	42ab      	cmp	r3, r5
 800562a:	d101      	bne.n	8005630 <__udivmoddi4+0xc4>
 800562c:	42a2      	cmp	r2, r4
 800562e:	d80c      	bhi.n	800564a <__udivmoddi4+0xde>
 8005630:	1aa4      	subs	r4, r4, r2
 8005632:	419d      	sbcs	r5, r3
 8005634:	2001      	movs	r0, #1
 8005636:	1924      	adds	r4, r4, r4
 8005638:	416d      	adcs	r5, r5
 800563a:	2100      	movs	r1, #0
 800563c:	3e01      	subs	r6, #1
 800563e:	1824      	adds	r4, r4, r0
 8005640:	414d      	adcs	r5, r1
 8005642:	2e00      	cmp	r6, #0
 8005644:	d006      	beq.n	8005654 <__udivmoddi4+0xe8>
 8005646:	42ab      	cmp	r3, r5
 8005648:	d9ee      	bls.n	8005628 <__udivmoddi4+0xbc>
 800564a:	3e01      	subs	r6, #1
 800564c:	1924      	adds	r4, r4, r4
 800564e:	416d      	adcs	r5, r5
 8005650:	2e00      	cmp	r6, #0
 8005652:	d1f8      	bne.n	8005646 <__udivmoddi4+0xda>
 8005654:	9800      	ldr	r0, [sp, #0]
 8005656:	9901      	ldr	r1, [sp, #4]
 8005658:	4653      	mov	r3, sl
 800565a:	1900      	adds	r0, r0, r4
 800565c:	4169      	adcs	r1, r5
 800565e:	2b00      	cmp	r3, #0
 8005660:	db23      	blt.n	80056aa <__udivmoddi4+0x13e>
 8005662:	002b      	movs	r3, r5
 8005664:	4652      	mov	r2, sl
 8005666:	40d3      	lsrs	r3, r2
 8005668:	002a      	movs	r2, r5
 800566a:	4664      	mov	r4, ip
 800566c:	40e2      	lsrs	r2, r4
 800566e:	001c      	movs	r4, r3
 8005670:	4653      	mov	r3, sl
 8005672:	0015      	movs	r5, r2
 8005674:	2b00      	cmp	r3, #0
 8005676:	db2d      	blt.n	80056d4 <__udivmoddi4+0x168>
 8005678:	0026      	movs	r6, r4
 800567a:	4657      	mov	r7, sl
 800567c:	40be      	lsls	r6, r7
 800567e:	0033      	movs	r3, r6
 8005680:	0026      	movs	r6, r4
 8005682:	4667      	mov	r7, ip
 8005684:	40be      	lsls	r6, r7
 8005686:	0032      	movs	r2, r6
 8005688:	1a80      	subs	r0, r0, r2
 800568a:	4199      	sbcs	r1, r3
 800568c:	9000      	str	r0, [sp, #0]
 800568e:	9101      	str	r1, [sp, #4]
 8005690:	e7ac      	b.n	80055ec <__udivmoddi4+0x80>
 8005692:	4662      	mov	r2, ip
 8005694:	2320      	movs	r3, #32
 8005696:	1a9b      	subs	r3, r3, r2
 8005698:	464a      	mov	r2, r9
 800569a:	40da      	lsrs	r2, r3
 800569c:	4661      	mov	r1, ip
 800569e:	0013      	movs	r3, r2
 80056a0:	4642      	mov	r2, r8
 80056a2:	408a      	lsls	r2, r1
 80056a4:	0017      	movs	r7, r2
 80056a6:	431f      	orrs	r7, r3
 80056a8:	e780      	b.n	80055ac <__udivmoddi4+0x40>
 80056aa:	4662      	mov	r2, ip
 80056ac:	2320      	movs	r3, #32
 80056ae:	1a9b      	subs	r3, r3, r2
 80056b0:	002a      	movs	r2, r5
 80056b2:	4666      	mov	r6, ip
 80056b4:	409a      	lsls	r2, r3
 80056b6:	0023      	movs	r3, r4
 80056b8:	40f3      	lsrs	r3, r6
 80056ba:	4313      	orrs	r3, r2
 80056bc:	e7d4      	b.n	8005668 <__udivmoddi4+0xfc>
 80056be:	4662      	mov	r2, ip
 80056c0:	2320      	movs	r3, #32
 80056c2:	2100      	movs	r1, #0
 80056c4:	1a9b      	subs	r3, r3, r2
 80056c6:	2200      	movs	r2, #0
 80056c8:	9100      	str	r1, [sp, #0]
 80056ca:	9201      	str	r2, [sp, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	40da      	lsrs	r2, r3
 80056d0:	9201      	str	r2, [sp, #4]
 80056d2:	e780      	b.n	80055d6 <__udivmoddi4+0x6a>
 80056d4:	2320      	movs	r3, #32
 80056d6:	4662      	mov	r2, ip
 80056d8:	0026      	movs	r6, r4
 80056da:	1a9b      	subs	r3, r3, r2
 80056dc:	40de      	lsrs	r6, r3
 80056de:	002f      	movs	r7, r5
 80056e0:	46b0      	mov	r8, r6
 80056e2:	4666      	mov	r6, ip
 80056e4:	40b7      	lsls	r7, r6
 80056e6:	4646      	mov	r6, r8
 80056e8:	003b      	movs	r3, r7
 80056ea:	4333      	orrs	r3, r6
 80056ec:	e7c8      	b.n	8005680 <__udivmoddi4+0x114>
 80056ee:	46c0      	nop			; (mov r8, r8)

080056f0 <__aeabi_fdiv>:
 80056f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f2:	4657      	mov	r7, sl
 80056f4:	464e      	mov	r6, r9
 80056f6:	4645      	mov	r5, r8
 80056f8:	46de      	mov	lr, fp
 80056fa:	0244      	lsls	r4, r0, #9
 80056fc:	b5e0      	push	{r5, r6, r7, lr}
 80056fe:	0046      	lsls	r6, r0, #1
 8005700:	4688      	mov	r8, r1
 8005702:	0a64      	lsrs	r4, r4, #9
 8005704:	0e36      	lsrs	r6, r6, #24
 8005706:	0fc7      	lsrs	r7, r0, #31
 8005708:	2e00      	cmp	r6, #0
 800570a:	d063      	beq.n	80057d4 <__aeabi_fdiv+0xe4>
 800570c:	2eff      	cmp	r6, #255	; 0xff
 800570e:	d024      	beq.n	800575a <__aeabi_fdiv+0x6a>
 8005710:	2380      	movs	r3, #128	; 0x80
 8005712:	00e4      	lsls	r4, r4, #3
 8005714:	04db      	lsls	r3, r3, #19
 8005716:	431c      	orrs	r4, r3
 8005718:	2300      	movs	r3, #0
 800571a:	4699      	mov	r9, r3
 800571c:	469b      	mov	fp, r3
 800571e:	3e7f      	subs	r6, #127	; 0x7f
 8005720:	4643      	mov	r3, r8
 8005722:	4642      	mov	r2, r8
 8005724:	025d      	lsls	r5, r3, #9
 8005726:	0fd2      	lsrs	r2, r2, #31
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	0a6d      	lsrs	r5, r5, #9
 800572c:	0e1b      	lsrs	r3, r3, #24
 800572e:	4690      	mov	r8, r2
 8005730:	4692      	mov	sl, r2
 8005732:	d065      	beq.n	8005800 <__aeabi_fdiv+0x110>
 8005734:	2bff      	cmp	r3, #255	; 0xff
 8005736:	d055      	beq.n	80057e4 <__aeabi_fdiv+0xf4>
 8005738:	2280      	movs	r2, #128	; 0x80
 800573a:	2100      	movs	r1, #0
 800573c:	00ed      	lsls	r5, r5, #3
 800573e:	04d2      	lsls	r2, r2, #19
 8005740:	3b7f      	subs	r3, #127	; 0x7f
 8005742:	4315      	orrs	r5, r2
 8005744:	1af6      	subs	r6, r6, r3
 8005746:	4643      	mov	r3, r8
 8005748:	464a      	mov	r2, r9
 800574a:	407b      	eors	r3, r7
 800574c:	2a0f      	cmp	r2, #15
 800574e:	d900      	bls.n	8005752 <__aeabi_fdiv+0x62>
 8005750:	e08d      	b.n	800586e <__aeabi_fdiv+0x17e>
 8005752:	486d      	ldr	r0, [pc, #436]	; (8005908 <__aeabi_fdiv+0x218>)
 8005754:	0092      	lsls	r2, r2, #2
 8005756:	5882      	ldr	r2, [r0, r2]
 8005758:	4697      	mov	pc, r2
 800575a:	2c00      	cmp	r4, #0
 800575c:	d154      	bne.n	8005808 <__aeabi_fdiv+0x118>
 800575e:	2308      	movs	r3, #8
 8005760:	4699      	mov	r9, r3
 8005762:	3b06      	subs	r3, #6
 8005764:	26ff      	movs	r6, #255	; 0xff
 8005766:	469b      	mov	fp, r3
 8005768:	e7da      	b.n	8005720 <__aeabi_fdiv+0x30>
 800576a:	2500      	movs	r5, #0
 800576c:	4653      	mov	r3, sl
 800576e:	2902      	cmp	r1, #2
 8005770:	d01b      	beq.n	80057aa <__aeabi_fdiv+0xba>
 8005772:	2903      	cmp	r1, #3
 8005774:	d100      	bne.n	8005778 <__aeabi_fdiv+0x88>
 8005776:	e0bf      	b.n	80058f8 <__aeabi_fdiv+0x208>
 8005778:	2901      	cmp	r1, #1
 800577a:	d028      	beq.n	80057ce <__aeabi_fdiv+0xde>
 800577c:	0030      	movs	r0, r6
 800577e:	307f      	adds	r0, #127	; 0x7f
 8005780:	2800      	cmp	r0, #0
 8005782:	dd20      	ble.n	80057c6 <__aeabi_fdiv+0xd6>
 8005784:	076a      	lsls	r2, r5, #29
 8005786:	d004      	beq.n	8005792 <__aeabi_fdiv+0xa2>
 8005788:	220f      	movs	r2, #15
 800578a:	402a      	ands	r2, r5
 800578c:	2a04      	cmp	r2, #4
 800578e:	d000      	beq.n	8005792 <__aeabi_fdiv+0xa2>
 8005790:	3504      	adds	r5, #4
 8005792:	012a      	lsls	r2, r5, #4
 8005794:	d503      	bpl.n	800579e <__aeabi_fdiv+0xae>
 8005796:	0030      	movs	r0, r6
 8005798:	4a5c      	ldr	r2, [pc, #368]	; (800590c <__aeabi_fdiv+0x21c>)
 800579a:	3080      	adds	r0, #128	; 0x80
 800579c:	4015      	ands	r5, r2
 800579e:	28fe      	cmp	r0, #254	; 0xfe
 80057a0:	dc03      	bgt.n	80057aa <__aeabi_fdiv+0xba>
 80057a2:	01ac      	lsls	r4, r5, #6
 80057a4:	0a64      	lsrs	r4, r4, #9
 80057a6:	b2c2      	uxtb	r2, r0
 80057a8:	e001      	b.n	80057ae <__aeabi_fdiv+0xbe>
 80057aa:	22ff      	movs	r2, #255	; 0xff
 80057ac:	2400      	movs	r4, #0
 80057ae:	0264      	lsls	r4, r4, #9
 80057b0:	05d2      	lsls	r2, r2, #23
 80057b2:	0a60      	lsrs	r0, r4, #9
 80057b4:	07db      	lsls	r3, r3, #31
 80057b6:	4310      	orrs	r0, r2
 80057b8:	4318      	orrs	r0, r3
 80057ba:	bc3c      	pop	{r2, r3, r4, r5}
 80057bc:	4690      	mov	r8, r2
 80057be:	4699      	mov	r9, r3
 80057c0:	46a2      	mov	sl, r4
 80057c2:	46ab      	mov	fp, r5
 80057c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057c6:	2201      	movs	r2, #1
 80057c8:	1a10      	subs	r0, r2, r0
 80057ca:	281b      	cmp	r0, #27
 80057cc:	dd7c      	ble.n	80058c8 <__aeabi_fdiv+0x1d8>
 80057ce:	2200      	movs	r2, #0
 80057d0:	2400      	movs	r4, #0
 80057d2:	e7ec      	b.n	80057ae <__aeabi_fdiv+0xbe>
 80057d4:	2c00      	cmp	r4, #0
 80057d6:	d11d      	bne.n	8005814 <__aeabi_fdiv+0x124>
 80057d8:	2304      	movs	r3, #4
 80057da:	4699      	mov	r9, r3
 80057dc:	3b03      	subs	r3, #3
 80057de:	2600      	movs	r6, #0
 80057e0:	469b      	mov	fp, r3
 80057e2:	e79d      	b.n	8005720 <__aeabi_fdiv+0x30>
 80057e4:	3eff      	subs	r6, #255	; 0xff
 80057e6:	2d00      	cmp	r5, #0
 80057e8:	d120      	bne.n	800582c <__aeabi_fdiv+0x13c>
 80057ea:	2102      	movs	r1, #2
 80057ec:	4643      	mov	r3, r8
 80057ee:	464a      	mov	r2, r9
 80057f0:	407b      	eors	r3, r7
 80057f2:	430a      	orrs	r2, r1
 80057f4:	2a0f      	cmp	r2, #15
 80057f6:	d8d8      	bhi.n	80057aa <__aeabi_fdiv+0xba>
 80057f8:	4845      	ldr	r0, [pc, #276]	; (8005910 <__aeabi_fdiv+0x220>)
 80057fa:	0092      	lsls	r2, r2, #2
 80057fc:	5882      	ldr	r2, [r0, r2]
 80057fe:	4697      	mov	pc, r2
 8005800:	2d00      	cmp	r5, #0
 8005802:	d119      	bne.n	8005838 <__aeabi_fdiv+0x148>
 8005804:	2101      	movs	r1, #1
 8005806:	e7f1      	b.n	80057ec <__aeabi_fdiv+0xfc>
 8005808:	230c      	movs	r3, #12
 800580a:	4699      	mov	r9, r3
 800580c:	3b09      	subs	r3, #9
 800580e:	26ff      	movs	r6, #255	; 0xff
 8005810:	469b      	mov	fp, r3
 8005812:	e785      	b.n	8005720 <__aeabi_fdiv+0x30>
 8005814:	0020      	movs	r0, r4
 8005816:	f002 f8ff 	bl	8007a18 <__clzsi2>
 800581a:	2676      	movs	r6, #118	; 0x76
 800581c:	1f43      	subs	r3, r0, #5
 800581e:	409c      	lsls	r4, r3
 8005820:	2300      	movs	r3, #0
 8005822:	4276      	negs	r6, r6
 8005824:	1a36      	subs	r6, r6, r0
 8005826:	4699      	mov	r9, r3
 8005828:	469b      	mov	fp, r3
 800582a:	e779      	b.n	8005720 <__aeabi_fdiv+0x30>
 800582c:	464a      	mov	r2, r9
 800582e:	2303      	movs	r3, #3
 8005830:	431a      	orrs	r2, r3
 8005832:	4691      	mov	r9, r2
 8005834:	2103      	movs	r1, #3
 8005836:	e786      	b.n	8005746 <__aeabi_fdiv+0x56>
 8005838:	0028      	movs	r0, r5
 800583a:	f002 f8ed 	bl	8007a18 <__clzsi2>
 800583e:	1f43      	subs	r3, r0, #5
 8005840:	1836      	adds	r6, r6, r0
 8005842:	409d      	lsls	r5, r3
 8005844:	3676      	adds	r6, #118	; 0x76
 8005846:	2100      	movs	r1, #0
 8005848:	e77d      	b.n	8005746 <__aeabi_fdiv+0x56>
 800584a:	2480      	movs	r4, #128	; 0x80
 800584c:	2300      	movs	r3, #0
 800584e:	03e4      	lsls	r4, r4, #15
 8005850:	22ff      	movs	r2, #255	; 0xff
 8005852:	e7ac      	b.n	80057ae <__aeabi_fdiv+0xbe>
 8005854:	2500      	movs	r5, #0
 8005856:	2380      	movs	r3, #128	; 0x80
 8005858:	03db      	lsls	r3, r3, #15
 800585a:	421c      	tst	r4, r3
 800585c:	d028      	beq.n	80058b0 <__aeabi_fdiv+0x1c0>
 800585e:	421d      	tst	r5, r3
 8005860:	d126      	bne.n	80058b0 <__aeabi_fdiv+0x1c0>
 8005862:	432b      	orrs	r3, r5
 8005864:	025c      	lsls	r4, r3, #9
 8005866:	0a64      	lsrs	r4, r4, #9
 8005868:	4643      	mov	r3, r8
 800586a:	22ff      	movs	r2, #255	; 0xff
 800586c:	e79f      	b.n	80057ae <__aeabi_fdiv+0xbe>
 800586e:	0162      	lsls	r2, r4, #5
 8005870:	016c      	lsls	r4, r5, #5
 8005872:	42a2      	cmp	r2, r4
 8005874:	d224      	bcs.n	80058c0 <__aeabi_fdiv+0x1d0>
 8005876:	211b      	movs	r1, #27
 8005878:	2500      	movs	r5, #0
 800587a:	3e01      	subs	r6, #1
 800587c:	2701      	movs	r7, #1
 800587e:	0010      	movs	r0, r2
 8005880:	006d      	lsls	r5, r5, #1
 8005882:	0052      	lsls	r2, r2, #1
 8005884:	2800      	cmp	r0, #0
 8005886:	db01      	blt.n	800588c <__aeabi_fdiv+0x19c>
 8005888:	4294      	cmp	r4, r2
 800588a:	d801      	bhi.n	8005890 <__aeabi_fdiv+0x1a0>
 800588c:	1b12      	subs	r2, r2, r4
 800588e:	433d      	orrs	r5, r7
 8005890:	3901      	subs	r1, #1
 8005892:	2900      	cmp	r1, #0
 8005894:	d1f3      	bne.n	800587e <__aeabi_fdiv+0x18e>
 8005896:	0014      	movs	r4, r2
 8005898:	1e62      	subs	r2, r4, #1
 800589a:	4194      	sbcs	r4, r2
 800589c:	4325      	orrs	r5, r4
 800589e:	e76d      	b.n	800577c <__aeabi_fdiv+0x8c>
 80058a0:	46ba      	mov	sl, r7
 80058a2:	4659      	mov	r1, fp
 80058a4:	0025      	movs	r5, r4
 80058a6:	4653      	mov	r3, sl
 80058a8:	2902      	cmp	r1, #2
 80058aa:	d000      	beq.n	80058ae <__aeabi_fdiv+0x1be>
 80058ac:	e761      	b.n	8005772 <__aeabi_fdiv+0x82>
 80058ae:	e77c      	b.n	80057aa <__aeabi_fdiv+0xba>
 80058b0:	2380      	movs	r3, #128	; 0x80
 80058b2:	03db      	lsls	r3, r3, #15
 80058b4:	431c      	orrs	r4, r3
 80058b6:	0264      	lsls	r4, r4, #9
 80058b8:	0a64      	lsrs	r4, r4, #9
 80058ba:	003b      	movs	r3, r7
 80058bc:	22ff      	movs	r2, #255	; 0xff
 80058be:	e776      	b.n	80057ae <__aeabi_fdiv+0xbe>
 80058c0:	1b12      	subs	r2, r2, r4
 80058c2:	211a      	movs	r1, #26
 80058c4:	2501      	movs	r5, #1
 80058c6:	e7d9      	b.n	800587c <__aeabi_fdiv+0x18c>
 80058c8:	369e      	adds	r6, #158	; 0x9e
 80058ca:	002a      	movs	r2, r5
 80058cc:	40b5      	lsls	r5, r6
 80058ce:	002c      	movs	r4, r5
 80058d0:	40c2      	lsrs	r2, r0
 80058d2:	1e65      	subs	r5, r4, #1
 80058d4:	41ac      	sbcs	r4, r5
 80058d6:	4314      	orrs	r4, r2
 80058d8:	0762      	lsls	r2, r4, #29
 80058da:	d004      	beq.n	80058e6 <__aeabi_fdiv+0x1f6>
 80058dc:	220f      	movs	r2, #15
 80058de:	4022      	ands	r2, r4
 80058e0:	2a04      	cmp	r2, #4
 80058e2:	d000      	beq.n	80058e6 <__aeabi_fdiv+0x1f6>
 80058e4:	3404      	adds	r4, #4
 80058e6:	0162      	lsls	r2, r4, #5
 80058e8:	d403      	bmi.n	80058f2 <__aeabi_fdiv+0x202>
 80058ea:	01a4      	lsls	r4, r4, #6
 80058ec:	0a64      	lsrs	r4, r4, #9
 80058ee:	2200      	movs	r2, #0
 80058f0:	e75d      	b.n	80057ae <__aeabi_fdiv+0xbe>
 80058f2:	2201      	movs	r2, #1
 80058f4:	2400      	movs	r4, #0
 80058f6:	e75a      	b.n	80057ae <__aeabi_fdiv+0xbe>
 80058f8:	2480      	movs	r4, #128	; 0x80
 80058fa:	03e4      	lsls	r4, r4, #15
 80058fc:	432c      	orrs	r4, r5
 80058fe:	0264      	lsls	r4, r4, #9
 8005900:	0a64      	lsrs	r4, r4, #9
 8005902:	22ff      	movs	r2, #255	; 0xff
 8005904:	e753      	b.n	80057ae <__aeabi_fdiv+0xbe>
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	0801249c 	.word	0x0801249c
 800590c:	f7ffffff 	.word	0xf7ffffff
 8005910:	080124dc 	.word	0x080124dc

08005914 <__aeabi_fsub>:
 8005914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005916:	4647      	mov	r7, r8
 8005918:	46ce      	mov	lr, r9
 800591a:	0044      	lsls	r4, r0, #1
 800591c:	0fc2      	lsrs	r2, r0, #31
 800591e:	b580      	push	{r7, lr}
 8005920:	0247      	lsls	r7, r0, #9
 8005922:	0248      	lsls	r0, r1, #9
 8005924:	0a40      	lsrs	r0, r0, #9
 8005926:	4684      	mov	ip, r0
 8005928:	4666      	mov	r6, ip
 800592a:	0048      	lsls	r0, r1, #1
 800592c:	0a7f      	lsrs	r7, r7, #9
 800592e:	0e24      	lsrs	r4, r4, #24
 8005930:	00f6      	lsls	r6, r6, #3
 8005932:	0025      	movs	r5, r4
 8005934:	4690      	mov	r8, r2
 8005936:	00fb      	lsls	r3, r7, #3
 8005938:	0e00      	lsrs	r0, r0, #24
 800593a:	0fc9      	lsrs	r1, r1, #31
 800593c:	46b1      	mov	r9, r6
 800593e:	28ff      	cmp	r0, #255	; 0xff
 8005940:	d100      	bne.n	8005944 <__aeabi_fsub+0x30>
 8005942:	e085      	b.n	8005a50 <__aeabi_fsub+0x13c>
 8005944:	2601      	movs	r6, #1
 8005946:	4071      	eors	r1, r6
 8005948:	1a26      	subs	r6, r4, r0
 800594a:	4291      	cmp	r1, r2
 800594c:	d057      	beq.n	80059fe <__aeabi_fsub+0xea>
 800594e:	2e00      	cmp	r6, #0
 8005950:	dd43      	ble.n	80059da <__aeabi_fsub+0xc6>
 8005952:	2800      	cmp	r0, #0
 8005954:	d000      	beq.n	8005958 <__aeabi_fsub+0x44>
 8005956:	e07f      	b.n	8005a58 <__aeabi_fsub+0x144>
 8005958:	4649      	mov	r1, r9
 800595a:	2900      	cmp	r1, #0
 800595c:	d100      	bne.n	8005960 <__aeabi_fsub+0x4c>
 800595e:	e0aa      	b.n	8005ab6 <__aeabi_fsub+0x1a2>
 8005960:	3e01      	subs	r6, #1
 8005962:	2e00      	cmp	r6, #0
 8005964:	d000      	beq.n	8005968 <__aeabi_fsub+0x54>
 8005966:	e0f7      	b.n	8005b58 <__aeabi_fsub+0x244>
 8005968:	1a5b      	subs	r3, r3, r1
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	d400      	bmi.n	8005970 <__aeabi_fsub+0x5c>
 800596e:	e08b      	b.n	8005a88 <__aeabi_fsub+0x174>
 8005970:	019b      	lsls	r3, r3, #6
 8005972:	099c      	lsrs	r4, r3, #6
 8005974:	0020      	movs	r0, r4
 8005976:	f002 f84f 	bl	8007a18 <__clzsi2>
 800597a:	3805      	subs	r0, #5
 800597c:	4084      	lsls	r4, r0
 800597e:	4285      	cmp	r5, r0
 8005980:	dd00      	ble.n	8005984 <__aeabi_fsub+0x70>
 8005982:	e0d3      	b.n	8005b2c <__aeabi_fsub+0x218>
 8005984:	1b45      	subs	r5, r0, r5
 8005986:	0023      	movs	r3, r4
 8005988:	2020      	movs	r0, #32
 800598a:	3501      	adds	r5, #1
 800598c:	40eb      	lsrs	r3, r5
 800598e:	1b45      	subs	r5, r0, r5
 8005990:	40ac      	lsls	r4, r5
 8005992:	1e62      	subs	r2, r4, #1
 8005994:	4194      	sbcs	r4, r2
 8005996:	4323      	orrs	r3, r4
 8005998:	2407      	movs	r4, #7
 800599a:	2500      	movs	r5, #0
 800599c:	401c      	ands	r4, r3
 800599e:	2201      	movs	r2, #1
 80059a0:	4641      	mov	r1, r8
 80059a2:	400a      	ands	r2, r1
 80059a4:	2c00      	cmp	r4, #0
 80059a6:	d004      	beq.n	80059b2 <__aeabi_fsub+0x9e>
 80059a8:	210f      	movs	r1, #15
 80059aa:	4019      	ands	r1, r3
 80059ac:	2904      	cmp	r1, #4
 80059ae:	d000      	beq.n	80059b2 <__aeabi_fsub+0x9e>
 80059b0:	3304      	adds	r3, #4
 80059b2:	0159      	lsls	r1, r3, #5
 80059b4:	d400      	bmi.n	80059b8 <__aeabi_fsub+0xa4>
 80059b6:	e080      	b.n	8005aba <__aeabi_fsub+0x1a6>
 80059b8:	3501      	adds	r5, #1
 80059ba:	b2ec      	uxtb	r4, r5
 80059bc:	2dff      	cmp	r5, #255	; 0xff
 80059be:	d000      	beq.n	80059c2 <__aeabi_fsub+0xae>
 80059c0:	e0a3      	b.n	8005b0a <__aeabi_fsub+0x1f6>
 80059c2:	24ff      	movs	r4, #255	; 0xff
 80059c4:	2300      	movs	r3, #0
 80059c6:	025b      	lsls	r3, r3, #9
 80059c8:	05e4      	lsls	r4, r4, #23
 80059ca:	0a58      	lsrs	r0, r3, #9
 80059cc:	07d2      	lsls	r2, r2, #31
 80059ce:	4320      	orrs	r0, r4
 80059d0:	4310      	orrs	r0, r2
 80059d2:	bc0c      	pop	{r2, r3}
 80059d4:	4690      	mov	r8, r2
 80059d6:	4699      	mov	r9, r3
 80059d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059da:	2e00      	cmp	r6, #0
 80059dc:	d174      	bne.n	8005ac8 <__aeabi_fsub+0x1b4>
 80059de:	1c60      	adds	r0, r4, #1
 80059e0:	b2c0      	uxtb	r0, r0
 80059e2:	2801      	cmp	r0, #1
 80059e4:	dc00      	bgt.n	80059e8 <__aeabi_fsub+0xd4>
 80059e6:	e0a7      	b.n	8005b38 <__aeabi_fsub+0x224>
 80059e8:	464a      	mov	r2, r9
 80059ea:	1a9c      	subs	r4, r3, r2
 80059ec:	0162      	lsls	r2, r4, #5
 80059ee:	d500      	bpl.n	80059f2 <__aeabi_fsub+0xde>
 80059f0:	e0b6      	b.n	8005b60 <__aeabi_fsub+0x24c>
 80059f2:	2c00      	cmp	r4, #0
 80059f4:	d1be      	bne.n	8005974 <__aeabi_fsub+0x60>
 80059f6:	2200      	movs	r2, #0
 80059f8:	2400      	movs	r4, #0
 80059fa:	2300      	movs	r3, #0
 80059fc:	e7e3      	b.n	80059c6 <__aeabi_fsub+0xb2>
 80059fe:	2e00      	cmp	r6, #0
 8005a00:	dc00      	bgt.n	8005a04 <__aeabi_fsub+0xf0>
 8005a02:	e085      	b.n	8005b10 <__aeabi_fsub+0x1fc>
 8005a04:	2800      	cmp	r0, #0
 8005a06:	d046      	beq.n	8005a96 <__aeabi_fsub+0x182>
 8005a08:	2cff      	cmp	r4, #255	; 0xff
 8005a0a:	d049      	beq.n	8005aa0 <__aeabi_fsub+0x18c>
 8005a0c:	2280      	movs	r2, #128	; 0x80
 8005a0e:	4648      	mov	r0, r9
 8005a10:	04d2      	lsls	r2, r2, #19
 8005a12:	4310      	orrs	r0, r2
 8005a14:	4681      	mov	r9, r0
 8005a16:	2201      	movs	r2, #1
 8005a18:	2e1b      	cmp	r6, #27
 8005a1a:	dc09      	bgt.n	8005a30 <__aeabi_fsub+0x11c>
 8005a1c:	2020      	movs	r0, #32
 8005a1e:	464c      	mov	r4, r9
 8005a20:	1b80      	subs	r0, r0, r6
 8005a22:	4084      	lsls	r4, r0
 8005a24:	464a      	mov	r2, r9
 8005a26:	0020      	movs	r0, r4
 8005a28:	40f2      	lsrs	r2, r6
 8005a2a:	1e44      	subs	r4, r0, #1
 8005a2c:	41a0      	sbcs	r0, r4
 8005a2e:	4302      	orrs	r2, r0
 8005a30:	189b      	adds	r3, r3, r2
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	d528      	bpl.n	8005a88 <__aeabi_fsub+0x174>
 8005a36:	3501      	adds	r5, #1
 8005a38:	2dff      	cmp	r5, #255	; 0xff
 8005a3a:	d100      	bne.n	8005a3e <__aeabi_fsub+0x12a>
 8005a3c:	e0a8      	b.n	8005b90 <__aeabi_fsub+0x27c>
 8005a3e:	2201      	movs	r2, #1
 8005a40:	2407      	movs	r4, #7
 8005a42:	4994      	ldr	r1, [pc, #592]	; (8005c94 <__aeabi_fsub+0x380>)
 8005a44:	401a      	ands	r2, r3
 8005a46:	085b      	lsrs	r3, r3, #1
 8005a48:	400b      	ands	r3, r1
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	401c      	ands	r4, r3
 8005a4e:	e7a6      	b.n	800599e <__aeabi_fsub+0x8a>
 8005a50:	2e00      	cmp	r6, #0
 8005a52:	d000      	beq.n	8005a56 <__aeabi_fsub+0x142>
 8005a54:	e778      	b.n	8005948 <__aeabi_fsub+0x34>
 8005a56:	e775      	b.n	8005944 <__aeabi_fsub+0x30>
 8005a58:	2cff      	cmp	r4, #255	; 0xff
 8005a5a:	d054      	beq.n	8005b06 <__aeabi_fsub+0x1f2>
 8005a5c:	2280      	movs	r2, #128	; 0x80
 8005a5e:	4649      	mov	r1, r9
 8005a60:	04d2      	lsls	r2, r2, #19
 8005a62:	4311      	orrs	r1, r2
 8005a64:	4689      	mov	r9, r1
 8005a66:	2201      	movs	r2, #1
 8005a68:	2e1b      	cmp	r6, #27
 8005a6a:	dc09      	bgt.n	8005a80 <__aeabi_fsub+0x16c>
 8005a6c:	2120      	movs	r1, #32
 8005a6e:	4648      	mov	r0, r9
 8005a70:	1b89      	subs	r1, r1, r6
 8005a72:	4088      	lsls	r0, r1
 8005a74:	464a      	mov	r2, r9
 8005a76:	0001      	movs	r1, r0
 8005a78:	40f2      	lsrs	r2, r6
 8005a7a:	1e48      	subs	r0, r1, #1
 8005a7c:	4181      	sbcs	r1, r0
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	1a9b      	subs	r3, r3, r2
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	d500      	bpl.n	8005a88 <__aeabi_fsub+0x174>
 8005a86:	e773      	b.n	8005970 <__aeabi_fsub+0x5c>
 8005a88:	2201      	movs	r2, #1
 8005a8a:	4641      	mov	r1, r8
 8005a8c:	400a      	ands	r2, r1
 8005a8e:	0759      	lsls	r1, r3, #29
 8005a90:	d000      	beq.n	8005a94 <__aeabi_fsub+0x180>
 8005a92:	e789      	b.n	80059a8 <__aeabi_fsub+0x94>
 8005a94:	e011      	b.n	8005aba <__aeabi_fsub+0x1a6>
 8005a96:	4648      	mov	r0, r9
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	d158      	bne.n	8005b4e <__aeabi_fsub+0x23a>
 8005a9c:	2cff      	cmp	r4, #255	; 0xff
 8005a9e:	d10c      	bne.n	8005aba <__aeabi_fsub+0x1a6>
 8005aa0:	08db      	lsrs	r3, r3, #3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d100      	bne.n	8005aa8 <__aeabi_fsub+0x194>
 8005aa6:	e78c      	b.n	80059c2 <__aeabi_fsub+0xae>
 8005aa8:	2080      	movs	r0, #128	; 0x80
 8005aaa:	03c0      	lsls	r0, r0, #15
 8005aac:	4303      	orrs	r3, r0
 8005aae:	025b      	lsls	r3, r3, #9
 8005ab0:	0a5b      	lsrs	r3, r3, #9
 8005ab2:	24ff      	movs	r4, #255	; 0xff
 8005ab4:	e787      	b.n	80059c6 <__aeabi_fsub+0xb2>
 8005ab6:	2cff      	cmp	r4, #255	; 0xff
 8005ab8:	d025      	beq.n	8005b06 <__aeabi_fsub+0x1f2>
 8005aba:	08db      	lsrs	r3, r3, #3
 8005abc:	2dff      	cmp	r5, #255	; 0xff
 8005abe:	d0f0      	beq.n	8005aa2 <__aeabi_fsub+0x18e>
 8005ac0:	025b      	lsls	r3, r3, #9
 8005ac2:	0a5b      	lsrs	r3, r3, #9
 8005ac4:	b2ec      	uxtb	r4, r5
 8005ac6:	e77e      	b.n	80059c6 <__aeabi_fsub+0xb2>
 8005ac8:	2c00      	cmp	r4, #0
 8005aca:	d04d      	beq.n	8005b68 <__aeabi_fsub+0x254>
 8005acc:	28ff      	cmp	r0, #255	; 0xff
 8005ace:	d018      	beq.n	8005b02 <__aeabi_fsub+0x1ee>
 8005ad0:	2480      	movs	r4, #128	; 0x80
 8005ad2:	04e4      	lsls	r4, r4, #19
 8005ad4:	4272      	negs	r2, r6
 8005ad6:	4323      	orrs	r3, r4
 8005ad8:	2a1b      	cmp	r2, #27
 8005ada:	dd00      	ble.n	8005ade <__aeabi_fsub+0x1ca>
 8005adc:	e0c4      	b.n	8005c68 <__aeabi_fsub+0x354>
 8005ade:	001c      	movs	r4, r3
 8005ae0:	2520      	movs	r5, #32
 8005ae2:	40d4      	lsrs	r4, r2
 8005ae4:	1aaa      	subs	r2, r5, r2
 8005ae6:	4093      	lsls	r3, r2
 8005ae8:	1e5a      	subs	r2, r3, #1
 8005aea:	4193      	sbcs	r3, r2
 8005aec:	4323      	orrs	r3, r4
 8005aee:	464a      	mov	r2, r9
 8005af0:	0005      	movs	r5, r0
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	4688      	mov	r8, r1
 8005af6:	e738      	b.n	800596a <__aeabi_fsub+0x56>
 8005af8:	1c72      	adds	r2, r6, #1
 8005afa:	d0f8      	beq.n	8005aee <__aeabi_fsub+0x1da>
 8005afc:	43f2      	mvns	r2, r6
 8005afe:	28ff      	cmp	r0, #255	; 0xff
 8005b00:	d1ea      	bne.n	8005ad8 <__aeabi_fsub+0x1c4>
 8005b02:	000a      	movs	r2, r1
 8005b04:	464b      	mov	r3, r9
 8005b06:	25ff      	movs	r5, #255	; 0xff
 8005b08:	e7d7      	b.n	8005aba <__aeabi_fsub+0x1a6>
 8005b0a:	019b      	lsls	r3, r3, #6
 8005b0c:	0a5b      	lsrs	r3, r3, #9
 8005b0e:	e75a      	b.n	80059c6 <__aeabi_fsub+0xb2>
 8005b10:	2e00      	cmp	r6, #0
 8005b12:	d141      	bne.n	8005b98 <__aeabi_fsub+0x284>
 8005b14:	1c65      	adds	r5, r4, #1
 8005b16:	b2e9      	uxtb	r1, r5
 8005b18:	2901      	cmp	r1, #1
 8005b1a:	dd45      	ble.n	8005ba8 <__aeabi_fsub+0x294>
 8005b1c:	2dff      	cmp	r5, #255	; 0xff
 8005b1e:	d100      	bne.n	8005b22 <__aeabi_fsub+0x20e>
 8005b20:	e74f      	b.n	80059c2 <__aeabi_fsub+0xae>
 8005b22:	2407      	movs	r4, #7
 8005b24:	444b      	add	r3, r9
 8005b26:	085b      	lsrs	r3, r3, #1
 8005b28:	401c      	ands	r4, r3
 8005b2a:	e738      	b.n	800599e <__aeabi_fsub+0x8a>
 8005b2c:	2207      	movs	r2, #7
 8005b2e:	4b5a      	ldr	r3, [pc, #360]	; (8005c98 <__aeabi_fsub+0x384>)
 8005b30:	1a2d      	subs	r5, r5, r0
 8005b32:	4023      	ands	r3, r4
 8005b34:	4014      	ands	r4, r2
 8005b36:	e732      	b.n	800599e <__aeabi_fsub+0x8a>
 8005b38:	2c00      	cmp	r4, #0
 8005b3a:	d11d      	bne.n	8005b78 <__aeabi_fsub+0x264>
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d17a      	bne.n	8005c36 <__aeabi_fsub+0x322>
 8005b40:	464b      	mov	r3, r9
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d100      	bne.n	8005b48 <__aeabi_fsub+0x234>
 8005b46:	e091      	b.n	8005c6c <__aeabi_fsub+0x358>
 8005b48:	000a      	movs	r2, r1
 8005b4a:	2500      	movs	r5, #0
 8005b4c:	e7b5      	b.n	8005aba <__aeabi_fsub+0x1a6>
 8005b4e:	3e01      	subs	r6, #1
 8005b50:	2e00      	cmp	r6, #0
 8005b52:	d119      	bne.n	8005b88 <__aeabi_fsub+0x274>
 8005b54:	444b      	add	r3, r9
 8005b56:	e76c      	b.n	8005a32 <__aeabi_fsub+0x11e>
 8005b58:	2cff      	cmp	r4, #255	; 0xff
 8005b5a:	d184      	bne.n	8005a66 <__aeabi_fsub+0x152>
 8005b5c:	25ff      	movs	r5, #255	; 0xff
 8005b5e:	e7ac      	b.n	8005aba <__aeabi_fsub+0x1a6>
 8005b60:	464a      	mov	r2, r9
 8005b62:	4688      	mov	r8, r1
 8005b64:	1ad4      	subs	r4, r2, r3
 8005b66:	e705      	b.n	8005974 <__aeabi_fsub+0x60>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1c5      	bne.n	8005af8 <__aeabi_fsub+0x1e4>
 8005b6c:	000a      	movs	r2, r1
 8005b6e:	28ff      	cmp	r0, #255	; 0xff
 8005b70:	d0c8      	beq.n	8005b04 <__aeabi_fsub+0x1f0>
 8005b72:	0005      	movs	r5, r0
 8005b74:	464b      	mov	r3, r9
 8005b76:	e7a0      	b.n	8005aba <__aeabi_fsub+0x1a6>
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d149      	bne.n	8005c10 <__aeabi_fsub+0x2fc>
 8005b7c:	464b      	mov	r3, r9
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d077      	beq.n	8005c72 <__aeabi_fsub+0x35e>
 8005b82:	000a      	movs	r2, r1
 8005b84:	25ff      	movs	r5, #255	; 0xff
 8005b86:	e798      	b.n	8005aba <__aeabi_fsub+0x1a6>
 8005b88:	2cff      	cmp	r4, #255	; 0xff
 8005b8a:	d000      	beq.n	8005b8e <__aeabi_fsub+0x27a>
 8005b8c:	e743      	b.n	8005a16 <__aeabi_fsub+0x102>
 8005b8e:	e787      	b.n	8005aa0 <__aeabi_fsub+0x18c>
 8005b90:	000a      	movs	r2, r1
 8005b92:	24ff      	movs	r4, #255	; 0xff
 8005b94:	2300      	movs	r3, #0
 8005b96:	e716      	b.n	80059c6 <__aeabi_fsub+0xb2>
 8005b98:	2c00      	cmp	r4, #0
 8005b9a:	d115      	bne.n	8005bc8 <__aeabi_fsub+0x2b4>
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d157      	bne.n	8005c50 <__aeabi_fsub+0x33c>
 8005ba0:	28ff      	cmp	r0, #255	; 0xff
 8005ba2:	d1e6      	bne.n	8005b72 <__aeabi_fsub+0x25e>
 8005ba4:	464b      	mov	r3, r9
 8005ba6:	e77b      	b.n	8005aa0 <__aeabi_fsub+0x18c>
 8005ba8:	2c00      	cmp	r4, #0
 8005baa:	d120      	bne.n	8005bee <__aeabi_fsub+0x2da>
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d057      	beq.n	8005c60 <__aeabi_fsub+0x34c>
 8005bb0:	4649      	mov	r1, r9
 8005bb2:	2900      	cmp	r1, #0
 8005bb4:	d053      	beq.n	8005c5e <__aeabi_fsub+0x34a>
 8005bb6:	444b      	add	r3, r9
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	d568      	bpl.n	8005c8e <__aeabi_fsub+0x37a>
 8005bbc:	2407      	movs	r4, #7
 8005bbe:	4a36      	ldr	r2, [pc, #216]	; (8005c98 <__aeabi_fsub+0x384>)
 8005bc0:	401c      	ands	r4, r3
 8005bc2:	2501      	movs	r5, #1
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	e6ea      	b.n	800599e <__aeabi_fsub+0x8a>
 8005bc8:	28ff      	cmp	r0, #255	; 0xff
 8005bca:	d0eb      	beq.n	8005ba4 <__aeabi_fsub+0x290>
 8005bcc:	2280      	movs	r2, #128	; 0x80
 8005bce:	04d2      	lsls	r2, r2, #19
 8005bd0:	4276      	negs	r6, r6
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	2e1b      	cmp	r6, #27
 8005bd6:	dc53      	bgt.n	8005c80 <__aeabi_fsub+0x36c>
 8005bd8:	2520      	movs	r5, #32
 8005bda:	1bad      	subs	r5, r5, r6
 8005bdc:	001a      	movs	r2, r3
 8005bde:	40ab      	lsls	r3, r5
 8005be0:	40f2      	lsrs	r2, r6
 8005be2:	1e5c      	subs	r4, r3, #1
 8005be4:	41a3      	sbcs	r3, r4
 8005be6:	4313      	orrs	r3, r2
 8005be8:	444b      	add	r3, r9
 8005bea:	0005      	movs	r5, r0
 8005bec:	e721      	b.n	8005a32 <__aeabi_fsub+0x11e>
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0d8      	beq.n	8005ba4 <__aeabi_fsub+0x290>
 8005bf2:	4649      	mov	r1, r9
 8005bf4:	2900      	cmp	r1, #0
 8005bf6:	d100      	bne.n	8005bfa <__aeabi_fsub+0x2e6>
 8005bf8:	e752      	b.n	8005aa0 <__aeabi_fsub+0x18c>
 8005bfa:	2180      	movs	r1, #128	; 0x80
 8005bfc:	03c9      	lsls	r1, r1, #15
 8005bfe:	420f      	tst	r7, r1
 8005c00:	d100      	bne.n	8005c04 <__aeabi_fsub+0x2f0>
 8005c02:	e74d      	b.n	8005aa0 <__aeabi_fsub+0x18c>
 8005c04:	4660      	mov	r0, ip
 8005c06:	4208      	tst	r0, r1
 8005c08:	d000      	beq.n	8005c0c <__aeabi_fsub+0x2f8>
 8005c0a:	e749      	b.n	8005aa0 <__aeabi_fsub+0x18c>
 8005c0c:	464b      	mov	r3, r9
 8005c0e:	e747      	b.n	8005aa0 <__aeabi_fsub+0x18c>
 8005c10:	4648      	mov	r0, r9
 8005c12:	25ff      	movs	r5, #255	; 0xff
 8005c14:	2800      	cmp	r0, #0
 8005c16:	d100      	bne.n	8005c1a <__aeabi_fsub+0x306>
 8005c18:	e74f      	b.n	8005aba <__aeabi_fsub+0x1a6>
 8005c1a:	2280      	movs	r2, #128	; 0x80
 8005c1c:	03d2      	lsls	r2, r2, #15
 8005c1e:	4217      	tst	r7, r2
 8005c20:	d004      	beq.n	8005c2c <__aeabi_fsub+0x318>
 8005c22:	4660      	mov	r0, ip
 8005c24:	4210      	tst	r0, r2
 8005c26:	d101      	bne.n	8005c2c <__aeabi_fsub+0x318>
 8005c28:	464b      	mov	r3, r9
 8005c2a:	4688      	mov	r8, r1
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	4641      	mov	r1, r8
 8005c30:	25ff      	movs	r5, #255	; 0xff
 8005c32:	400a      	ands	r2, r1
 8005c34:	e741      	b.n	8005aba <__aeabi_fsub+0x1a6>
 8005c36:	4648      	mov	r0, r9
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	d01f      	beq.n	8005c7c <__aeabi_fsub+0x368>
 8005c3c:	1a1a      	subs	r2, r3, r0
 8005c3e:	0150      	lsls	r0, r2, #5
 8005c40:	d520      	bpl.n	8005c84 <__aeabi_fsub+0x370>
 8005c42:	464a      	mov	r2, r9
 8005c44:	2407      	movs	r4, #7
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	401c      	ands	r4, r3
 8005c4a:	4688      	mov	r8, r1
 8005c4c:	2500      	movs	r5, #0
 8005c4e:	e6a6      	b.n	800599e <__aeabi_fsub+0x8a>
 8005c50:	1c74      	adds	r4, r6, #1
 8005c52:	d0c9      	beq.n	8005be8 <__aeabi_fsub+0x2d4>
 8005c54:	43f6      	mvns	r6, r6
 8005c56:	28ff      	cmp	r0, #255	; 0xff
 8005c58:	d1bc      	bne.n	8005bd4 <__aeabi_fsub+0x2c0>
 8005c5a:	464b      	mov	r3, r9
 8005c5c:	e720      	b.n	8005aa0 <__aeabi_fsub+0x18c>
 8005c5e:	4699      	mov	r9, r3
 8005c60:	464b      	mov	r3, r9
 8005c62:	2500      	movs	r5, #0
 8005c64:	08db      	lsrs	r3, r3, #3
 8005c66:	e72b      	b.n	8005ac0 <__aeabi_fsub+0x1ac>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e740      	b.n	8005aee <__aeabi_fsub+0x1da>
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	2300      	movs	r3, #0
 8005c70:	e6a9      	b.n	80059c6 <__aeabi_fsub+0xb2>
 8005c72:	2380      	movs	r3, #128	; 0x80
 8005c74:	2200      	movs	r2, #0
 8005c76:	03db      	lsls	r3, r3, #15
 8005c78:	24ff      	movs	r4, #255	; 0xff
 8005c7a:	e6a4      	b.n	80059c6 <__aeabi_fsub+0xb2>
 8005c7c:	2500      	movs	r5, #0
 8005c7e:	e71c      	b.n	8005aba <__aeabi_fsub+0x1a6>
 8005c80:	2301      	movs	r3, #1
 8005c82:	e7b1      	b.n	8005be8 <__aeabi_fsub+0x2d4>
 8005c84:	2a00      	cmp	r2, #0
 8005c86:	d0f1      	beq.n	8005c6c <__aeabi_fsub+0x358>
 8005c88:	0013      	movs	r3, r2
 8005c8a:	2500      	movs	r5, #0
 8005c8c:	e6fc      	b.n	8005a88 <__aeabi_fsub+0x174>
 8005c8e:	2500      	movs	r5, #0
 8005c90:	e6fa      	b.n	8005a88 <__aeabi_fsub+0x174>
 8005c92:	46c0      	nop			; (mov r8, r8)
 8005c94:	7dffffff 	.word	0x7dffffff
 8005c98:	fbffffff 	.word	0xfbffffff

08005c9c <__aeabi_i2f>:
 8005c9c:	b570      	push	{r4, r5, r6, lr}
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d03d      	beq.n	8005d1e <__aeabi_i2f+0x82>
 8005ca2:	17c3      	asrs	r3, r0, #31
 8005ca4:	18c5      	adds	r5, r0, r3
 8005ca6:	405d      	eors	r5, r3
 8005ca8:	0fc4      	lsrs	r4, r0, #31
 8005caa:	0028      	movs	r0, r5
 8005cac:	f001 feb4 	bl	8007a18 <__clzsi2>
 8005cb0:	229e      	movs	r2, #158	; 0x9e
 8005cb2:	1a12      	subs	r2, r2, r0
 8005cb4:	2a96      	cmp	r2, #150	; 0x96
 8005cb6:	dc07      	bgt.n	8005cc8 <__aeabi_i2f+0x2c>
 8005cb8:	b2d2      	uxtb	r2, r2
 8005cba:	2808      	cmp	r0, #8
 8005cbc:	dd33      	ble.n	8005d26 <__aeabi_i2f+0x8a>
 8005cbe:	3808      	subs	r0, #8
 8005cc0:	4085      	lsls	r5, r0
 8005cc2:	0268      	lsls	r0, r5, #9
 8005cc4:	0a40      	lsrs	r0, r0, #9
 8005cc6:	e023      	b.n	8005d10 <__aeabi_i2f+0x74>
 8005cc8:	2a99      	cmp	r2, #153	; 0x99
 8005cca:	dd0b      	ble.n	8005ce4 <__aeabi_i2f+0x48>
 8005ccc:	2305      	movs	r3, #5
 8005cce:	0029      	movs	r1, r5
 8005cd0:	1a1b      	subs	r3, r3, r0
 8005cd2:	40d9      	lsrs	r1, r3
 8005cd4:	0003      	movs	r3, r0
 8005cd6:	331b      	adds	r3, #27
 8005cd8:	409d      	lsls	r5, r3
 8005cda:	002b      	movs	r3, r5
 8005cdc:	1e5d      	subs	r5, r3, #1
 8005cde:	41ab      	sbcs	r3, r5
 8005ce0:	4319      	orrs	r1, r3
 8005ce2:	000d      	movs	r5, r1
 8005ce4:	2805      	cmp	r0, #5
 8005ce6:	dd01      	ble.n	8005cec <__aeabi_i2f+0x50>
 8005ce8:	1f43      	subs	r3, r0, #5
 8005cea:	409d      	lsls	r5, r3
 8005cec:	002b      	movs	r3, r5
 8005cee:	490f      	ldr	r1, [pc, #60]	; (8005d2c <__aeabi_i2f+0x90>)
 8005cf0:	400b      	ands	r3, r1
 8005cf2:	076e      	lsls	r6, r5, #29
 8005cf4:	d009      	beq.n	8005d0a <__aeabi_i2f+0x6e>
 8005cf6:	260f      	movs	r6, #15
 8005cf8:	4035      	ands	r5, r6
 8005cfa:	2d04      	cmp	r5, #4
 8005cfc:	d005      	beq.n	8005d0a <__aeabi_i2f+0x6e>
 8005cfe:	3304      	adds	r3, #4
 8005d00:	015d      	lsls	r5, r3, #5
 8005d02:	d502      	bpl.n	8005d0a <__aeabi_i2f+0x6e>
 8005d04:	229f      	movs	r2, #159	; 0x9f
 8005d06:	400b      	ands	r3, r1
 8005d08:	1a12      	subs	r2, r2, r0
 8005d0a:	019b      	lsls	r3, r3, #6
 8005d0c:	0a58      	lsrs	r0, r3, #9
 8005d0e:	b2d2      	uxtb	r2, r2
 8005d10:	0240      	lsls	r0, r0, #9
 8005d12:	05d2      	lsls	r2, r2, #23
 8005d14:	0a40      	lsrs	r0, r0, #9
 8005d16:	07e4      	lsls	r4, r4, #31
 8005d18:	4310      	orrs	r0, r2
 8005d1a:	4320      	orrs	r0, r4
 8005d1c:	bd70      	pop	{r4, r5, r6, pc}
 8005d1e:	2400      	movs	r4, #0
 8005d20:	2200      	movs	r2, #0
 8005d22:	2000      	movs	r0, #0
 8005d24:	e7f4      	b.n	8005d10 <__aeabi_i2f+0x74>
 8005d26:	0268      	lsls	r0, r5, #9
 8005d28:	0a40      	lsrs	r0, r0, #9
 8005d2a:	e7f1      	b.n	8005d10 <__aeabi_i2f+0x74>
 8005d2c:	fbffffff 	.word	0xfbffffff

08005d30 <__aeabi_dadd>:
 8005d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d32:	464f      	mov	r7, r9
 8005d34:	4646      	mov	r6, r8
 8005d36:	46d6      	mov	lr, sl
 8005d38:	000c      	movs	r4, r1
 8005d3a:	0309      	lsls	r1, r1, #12
 8005d3c:	b5c0      	push	{r6, r7, lr}
 8005d3e:	0a49      	lsrs	r1, r1, #9
 8005d40:	0f47      	lsrs	r7, r0, #29
 8005d42:	005e      	lsls	r6, r3, #1
 8005d44:	4339      	orrs	r1, r7
 8005d46:	031f      	lsls	r7, r3, #12
 8005d48:	0fdb      	lsrs	r3, r3, #31
 8005d4a:	469c      	mov	ip, r3
 8005d4c:	0065      	lsls	r5, r4, #1
 8005d4e:	0a7b      	lsrs	r3, r7, #9
 8005d50:	0f57      	lsrs	r7, r2, #29
 8005d52:	431f      	orrs	r7, r3
 8005d54:	0d6d      	lsrs	r5, r5, #21
 8005d56:	0fe4      	lsrs	r4, r4, #31
 8005d58:	0d76      	lsrs	r6, r6, #21
 8005d5a:	46a1      	mov	r9, r4
 8005d5c:	00c0      	lsls	r0, r0, #3
 8005d5e:	46b8      	mov	r8, r7
 8005d60:	00d2      	lsls	r2, r2, #3
 8005d62:	1bab      	subs	r3, r5, r6
 8005d64:	4564      	cmp	r4, ip
 8005d66:	d07b      	beq.n	8005e60 <__aeabi_dadd+0x130>
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	dd5f      	ble.n	8005e2c <__aeabi_dadd+0xfc>
 8005d6c:	2e00      	cmp	r6, #0
 8005d6e:	d000      	beq.n	8005d72 <__aeabi_dadd+0x42>
 8005d70:	e0a4      	b.n	8005ebc <__aeabi_dadd+0x18c>
 8005d72:	003e      	movs	r6, r7
 8005d74:	4316      	orrs	r6, r2
 8005d76:	d100      	bne.n	8005d7a <__aeabi_dadd+0x4a>
 8005d78:	e112      	b.n	8005fa0 <__aeabi_dadd+0x270>
 8005d7a:	1e5e      	subs	r6, r3, #1
 8005d7c:	2e00      	cmp	r6, #0
 8005d7e:	d000      	beq.n	8005d82 <__aeabi_dadd+0x52>
 8005d80:	e19e      	b.n	80060c0 <__aeabi_dadd+0x390>
 8005d82:	1a87      	subs	r7, r0, r2
 8005d84:	4643      	mov	r3, r8
 8005d86:	42b8      	cmp	r0, r7
 8005d88:	4180      	sbcs	r0, r0
 8005d8a:	2501      	movs	r5, #1
 8005d8c:	1ac9      	subs	r1, r1, r3
 8005d8e:	4240      	negs	r0, r0
 8005d90:	1a09      	subs	r1, r1, r0
 8005d92:	020b      	lsls	r3, r1, #8
 8005d94:	d400      	bmi.n	8005d98 <__aeabi_dadd+0x68>
 8005d96:	e131      	b.n	8005ffc <__aeabi_dadd+0x2cc>
 8005d98:	0249      	lsls	r1, r1, #9
 8005d9a:	0a4e      	lsrs	r6, r1, #9
 8005d9c:	2e00      	cmp	r6, #0
 8005d9e:	d100      	bne.n	8005da2 <__aeabi_dadd+0x72>
 8005da0:	e16e      	b.n	8006080 <__aeabi_dadd+0x350>
 8005da2:	0030      	movs	r0, r6
 8005da4:	f001 fe38 	bl	8007a18 <__clzsi2>
 8005da8:	0003      	movs	r3, r0
 8005daa:	3b08      	subs	r3, #8
 8005dac:	2b1f      	cmp	r3, #31
 8005dae:	dd00      	ble.n	8005db2 <__aeabi_dadd+0x82>
 8005db0:	e161      	b.n	8006076 <__aeabi_dadd+0x346>
 8005db2:	2220      	movs	r2, #32
 8005db4:	0039      	movs	r1, r7
 8005db6:	1ad2      	subs	r2, r2, r3
 8005db8:	409e      	lsls	r6, r3
 8005dba:	40d1      	lsrs	r1, r2
 8005dbc:	409f      	lsls	r7, r3
 8005dbe:	430e      	orrs	r6, r1
 8005dc0:	429d      	cmp	r5, r3
 8005dc2:	dd00      	ble.n	8005dc6 <__aeabi_dadd+0x96>
 8005dc4:	e151      	b.n	800606a <__aeabi_dadd+0x33a>
 8005dc6:	1b5d      	subs	r5, r3, r5
 8005dc8:	1c6b      	adds	r3, r5, #1
 8005dca:	2b1f      	cmp	r3, #31
 8005dcc:	dd00      	ble.n	8005dd0 <__aeabi_dadd+0xa0>
 8005dce:	e17c      	b.n	80060ca <__aeabi_dadd+0x39a>
 8005dd0:	2120      	movs	r1, #32
 8005dd2:	1ac9      	subs	r1, r1, r3
 8005dd4:	003d      	movs	r5, r7
 8005dd6:	0030      	movs	r0, r6
 8005dd8:	408f      	lsls	r7, r1
 8005dda:	4088      	lsls	r0, r1
 8005ddc:	40dd      	lsrs	r5, r3
 8005dde:	1e79      	subs	r1, r7, #1
 8005de0:	418f      	sbcs	r7, r1
 8005de2:	0031      	movs	r1, r6
 8005de4:	2207      	movs	r2, #7
 8005de6:	4328      	orrs	r0, r5
 8005de8:	40d9      	lsrs	r1, r3
 8005dea:	2500      	movs	r5, #0
 8005dec:	4307      	orrs	r7, r0
 8005dee:	403a      	ands	r2, r7
 8005df0:	2a00      	cmp	r2, #0
 8005df2:	d009      	beq.n	8005e08 <__aeabi_dadd+0xd8>
 8005df4:	230f      	movs	r3, #15
 8005df6:	403b      	ands	r3, r7
 8005df8:	2b04      	cmp	r3, #4
 8005dfa:	d005      	beq.n	8005e08 <__aeabi_dadd+0xd8>
 8005dfc:	1d3b      	adds	r3, r7, #4
 8005dfe:	42bb      	cmp	r3, r7
 8005e00:	41bf      	sbcs	r7, r7
 8005e02:	427f      	negs	r7, r7
 8005e04:	19c9      	adds	r1, r1, r7
 8005e06:	001f      	movs	r7, r3
 8005e08:	020b      	lsls	r3, r1, #8
 8005e0a:	d400      	bmi.n	8005e0e <__aeabi_dadd+0xde>
 8005e0c:	e226      	b.n	800625c <__aeabi_dadd+0x52c>
 8005e0e:	1c6a      	adds	r2, r5, #1
 8005e10:	4bc6      	ldr	r3, [pc, #792]	; (800612c <__aeabi_dadd+0x3fc>)
 8005e12:	0555      	lsls	r5, r2, #21
 8005e14:	0d6d      	lsrs	r5, r5, #21
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d100      	bne.n	8005e1c <__aeabi_dadd+0xec>
 8005e1a:	e106      	b.n	800602a <__aeabi_dadd+0x2fa>
 8005e1c:	4ac4      	ldr	r2, [pc, #784]	; (8006130 <__aeabi_dadd+0x400>)
 8005e1e:	08ff      	lsrs	r7, r7, #3
 8005e20:	400a      	ands	r2, r1
 8005e22:	0753      	lsls	r3, r2, #29
 8005e24:	0252      	lsls	r2, r2, #9
 8005e26:	433b      	orrs	r3, r7
 8005e28:	0b12      	lsrs	r2, r2, #12
 8005e2a:	e08e      	b.n	8005f4a <__aeabi_dadd+0x21a>
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d000      	beq.n	8005e32 <__aeabi_dadd+0x102>
 8005e30:	e0b8      	b.n	8005fa4 <__aeabi_dadd+0x274>
 8005e32:	1c6b      	adds	r3, r5, #1
 8005e34:	055b      	lsls	r3, r3, #21
 8005e36:	0d5b      	lsrs	r3, r3, #21
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	dc00      	bgt.n	8005e3e <__aeabi_dadd+0x10e>
 8005e3c:	e130      	b.n	80060a0 <__aeabi_dadd+0x370>
 8005e3e:	1a87      	subs	r7, r0, r2
 8005e40:	4643      	mov	r3, r8
 8005e42:	42b8      	cmp	r0, r7
 8005e44:	41b6      	sbcs	r6, r6
 8005e46:	1acb      	subs	r3, r1, r3
 8005e48:	4276      	negs	r6, r6
 8005e4a:	1b9e      	subs	r6, r3, r6
 8005e4c:	0233      	lsls	r3, r6, #8
 8005e4e:	d500      	bpl.n	8005e52 <__aeabi_dadd+0x122>
 8005e50:	e14c      	b.n	80060ec <__aeabi_dadd+0x3bc>
 8005e52:	003b      	movs	r3, r7
 8005e54:	4333      	orrs	r3, r6
 8005e56:	d1a1      	bne.n	8005d9c <__aeabi_dadd+0x6c>
 8005e58:	2200      	movs	r2, #0
 8005e5a:	2400      	movs	r4, #0
 8005e5c:	2500      	movs	r5, #0
 8005e5e:	e070      	b.n	8005f42 <__aeabi_dadd+0x212>
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	dc00      	bgt.n	8005e66 <__aeabi_dadd+0x136>
 8005e64:	e0e5      	b.n	8006032 <__aeabi_dadd+0x302>
 8005e66:	2e00      	cmp	r6, #0
 8005e68:	d100      	bne.n	8005e6c <__aeabi_dadd+0x13c>
 8005e6a:	e083      	b.n	8005f74 <__aeabi_dadd+0x244>
 8005e6c:	4eaf      	ldr	r6, [pc, #700]	; (800612c <__aeabi_dadd+0x3fc>)
 8005e6e:	42b5      	cmp	r5, r6
 8005e70:	d060      	beq.n	8005f34 <__aeabi_dadd+0x204>
 8005e72:	2680      	movs	r6, #128	; 0x80
 8005e74:	0436      	lsls	r6, r6, #16
 8005e76:	4337      	orrs	r7, r6
 8005e78:	46b8      	mov	r8, r7
 8005e7a:	2b38      	cmp	r3, #56	; 0x38
 8005e7c:	dc00      	bgt.n	8005e80 <__aeabi_dadd+0x150>
 8005e7e:	e13e      	b.n	80060fe <__aeabi_dadd+0x3ce>
 8005e80:	4643      	mov	r3, r8
 8005e82:	4313      	orrs	r3, r2
 8005e84:	001f      	movs	r7, r3
 8005e86:	1e7a      	subs	r2, r7, #1
 8005e88:	4197      	sbcs	r7, r2
 8005e8a:	183f      	adds	r7, r7, r0
 8005e8c:	4287      	cmp	r7, r0
 8005e8e:	4180      	sbcs	r0, r0
 8005e90:	4240      	negs	r0, r0
 8005e92:	1809      	adds	r1, r1, r0
 8005e94:	020b      	lsls	r3, r1, #8
 8005e96:	d400      	bmi.n	8005e9a <__aeabi_dadd+0x16a>
 8005e98:	e0b0      	b.n	8005ffc <__aeabi_dadd+0x2cc>
 8005e9a:	4ba4      	ldr	r3, [pc, #656]	; (800612c <__aeabi_dadd+0x3fc>)
 8005e9c:	3501      	adds	r5, #1
 8005e9e:	429d      	cmp	r5, r3
 8005ea0:	d100      	bne.n	8005ea4 <__aeabi_dadd+0x174>
 8005ea2:	e0c3      	b.n	800602c <__aeabi_dadd+0x2fc>
 8005ea4:	4aa2      	ldr	r2, [pc, #648]	; (8006130 <__aeabi_dadd+0x400>)
 8005ea6:	087b      	lsrs	r3, r7, #1
 8005ea8:	400a      	ands	r2, r1
 8005eaa:	2101      	movs	r1, #1
 8005eac:	400f      	ands	r7, r1
 8005eae:	431f      	orrs	r7, r3
 8005eb0:	0851      	lsrs	r1, r2, #1
 8005eb2:	07d3      	lsls	r3, r2, #31
 8005eb4:	2207      	movs	r2, #7
 8005eb6:	431f      	orrs	r7, r3
 8005eb8:	403a      	ands	r2, r7
 8005eba:	e799      	b.n	8005df0 <__aeabi_dadd+0xc0>
 8005ebc:	4e9b      	ldr	r6, [pc, #620]	; (800612c <__aeabi_dadd+0x3fc>)
 8005ebe:	42b5      	cmp	r5, r6
 8005ec0:	d038      	beq.n	8005f34 <__aeabi_dadd+0x204>
 8005ec2:	2680      	movs	r6, #128	; 0x80
 8005ec4:	0436      	lsls	r6, r6, #16
 8005ec6:	4337      	orrs	r7, r6
 8005ec8:	46b8      	mov	r8, r7
 8005eca:	2b38      	cmp	r3, #56	; 0x38
 8005ecc:	dd00      	ble.n	8005ed0 <__aeabi_dadd+0x1a0>
 8005ece:	e0dc      	b.n	800608a <__aeabi_dadd+0x35a>
 8005ed0:	2b1f      	cmp	r3, #31
 8005ed2:	dc00      	bgt.n	8005ed6 <__aeabi_dadd+0x1a6>
 8005ed4:	e130      	b.n	8006138 <__aeabi_dadd+0x408>
 8005ed6:	001e      	movs	r6, r3
 8005ed8:	4647      	mov	r7, r8
 8005eda:	3e20      	subs	r6, #32
 8005edc:	40f7      	lsrs	r7, r6
 8005ede:	46bc      	mov	ip, r7
 8005ee0:	2b20      	cmp	r3, #32
 8005ee2:	d004      	beq.n	8005eee <__aeabi_dadd+0x1be>
 8005ee4:	2640      	movs	r6, #64	; 0x40
 8005ee6:	1af3      	subs	r3, r6, r3
 8005ee8:	4646      	mov	r6, r8
 8005eea:	409e      	lsls	r6, r3
 8005eec:	4332      	orrs	r2, r6
 8005eee:	0017      	movs	r7, r2
 8005ef0:	4663      	mov	r3, ip
 8005ef2:	1e7a      	subs	r2, r7, #1
 8005ef4:	4197      	sbcs	r7, r2
 8005ef6:	431f      	orrs	r7, r3
 8005ef8:	e0cc      	b.n	8006094 <__aeabi_dadd+0x364>
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d100      	bne.n	8005f00 <__aeabi_dadd+0x1d0>
 8005efe:	e204      	b.n	800630a <__aeabi_dadd+0x5da>
 8005f00:	4643      	mov	r3, r8
 8005f02:	4313      	orrs	r3, r2
 8005f04:	d100      	bne.n	8005f08 <__aeabi_dadd+0x1d8>
 8005f06:	e159      	b.n	80061bc <__aeabi_dadd+0x48c>
 8005f08:	074b      	lsls	r3, r1, #29
 8005f0a:	08c0      	lsrs	r0, r0, #3
 8005f0c:	4318      	orrs	r0, r3
 8005f0e:	2380      	movs	r3, #128	; 0x80
 8005f10:	08c9      	lsrs	r1, r1, #3
 8005f12:	031b      	lsls	r3, r3, #12
 8005f14:	4219      	tst	r1, r3
 8005f16:	d008      	beq.n	8005f2a <__aeabi_dadd+0x1fa>
 8005f18:	4645      	mov	r5, r8
 8005f1a:	08ed      	lsrs	r5, r5, #3
 8005f1c:	421d      	tst	r5, r3
 8005f1e:	d104      	bne.n	8005f2a <__aeabi_dadd+0x1fa>
 8005f20:	4643      	mov	r3, r8
 8005f22:	08d0      	lsrs	r0, r2, #3
 8005f24:	0759      	lsls	r1, r3, #29
 8005f26:	4308      	orrs	r0, r1
 8005f28:	0029      	movs	r1, r5
 8005f2a:	0f42      	lsrs	r2, r0, #29
 8005f2c:	00c9      	lsls	r1, r1, #3
 8005f2e:	4d7f      	ldr	r5, [pc, #508]	; (800612c <__aeabi_dadd+0x3fc>)
 8005f30:	4311      	orrs	r1, r2
 8005f32:	00c0      	lsls	r0, r0, #3
 8005f34:	074b      	lsls	r3, r1, #29
 8005f36:	08ca      	lsrs	r2, r1, #3
 8005f38:	497c      	ldr	r1, [pc, #496]	; (800612c <__aeabi_dadd+0x3fc>)
 8005f3a:	08c0      	lsrs	r0, r0, #3
 8005f3c:	4303      	orrs	r3, r0
 8005f3e:	428d      	cmp	r5, r1
 8005f40:	d068      	beq.n	8006014 <__aeabi_dadd+0x2e4>
 8005f42:	0312      	lsls	r2, r2, #12
 8005f44:	056d      	lsls	r5, r5, #21
 8005f46:	0b12      	lsrs	r2, r2, #12
 8005f48:	0d6d      	lsrs	r5, r5, #21
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	0312      	lsls	r2, r2, #12
 8005f4e:	0018      	movs	r0, r3
 8005f50:	0b13      	lsrs	r3, r2, #12
 8005f52:	0d0a      	lsrs	r2, r1, #20
 8005f54:	0512      	lsls	r2, r2, #20
 8005f56:	431a      	orrs	r2, r3
 8005f58:	4b76      	ldr	r3, [pc, #472]	; (8006134 <__aeabi_dadd+0x404>)
 8005f5a:	052d      	lsls	r5, r5, #20
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	432b      	orrs	r3, r5
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	07e4      	lsls	r4, r4, #31
 8005f64:	085b      	lsrs	r3, r3, #1
 8005f66:	4323      	orrs	r3, r4
 8005f68:	0019      	movs	r1, r3
 8005f6a:	bc1c      	pop	{r2, r3, r4}
 8005f6c:	4690      	mov	r8, r2
 8005f6e:	4699      	mov	r9, r3
 8005f70:	46a2      	mov	sl, r4
 8005f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f74:	003e      	movs	r6, r7
 8005f76:	4316      	orrs	r6, r2
 8005f78:	d012      	beq.n	8005fa0 <__aeabi_dadd+0x270>
 8005f7a:	1e5e      	subs	r6, r3, #1
 8005f7c:	2e00      	cmp	r6, #0
 8005f7e:	d000      	beq.n	8005f82 <__aeabi_dadd+0x252>
 8005f80:	e100      	b.n	8006184 <__aeabi_dadd+0x454>
 8005f82:	1887      	adds	r7, r0, r2
 8005f84:	4287      	cmp	r7, r0
 8005f86:	4180      	sbcs	r0, r0
 8005f88:	4441      	add	r1, r8
 8005f8a:	4240      	negs	r0, r0
 8005f8c:	1809      	adds	r1, r1, r0
 8005f8e:	2501      	movs	r5, #1
 8005f90:	020b      	lsls	r3, r1, #8
 8005f92:	d533      	bpl.n	8005ffc <__aeabi_dadd+0x2cc>
 8005f94:	2502      	movs	r5, #2
 8005f96:	e785      	b.n	8005ea4 <__aeabi_dadd+0x174>
 8005f98:	4664      	mov	r4, ip
 8005f9a:	0033      	movs	r3, r6
 8005f9c:	4641      	mov	r1, r8
 8005f9e:	0010      	movs	r0, r2
 8005fa0:	001d      	movs	r5, r3
 8005fa2:	e7c7      	b.n	8005f34 <__aeabi_dadd+0x204>
 8005fa4:	2d00      	cmp	r5, #0
 8005fa6:	d000      	beq.n	8005faa <__aeabi_dadd+0x27a>
 8005fa8:	e0da      	b.n	8006160 <__aeabi_dadd+0x430>
 8005faa:	000c      	movs	r4, r1
 8005fac:	4304      	orrs	r4, r0
 8005fae:	d0f3      	beq.n	8005f98 <__aeabi_dadd+0x268>
 8005fb0:	1c5c      	adds	r4, r3, #1
 8005fb2:	d100      	bne.n	8005fb6 <__aeabi_dadd+0x286>
 8005fb4:	e19f      	b.n	80062f6 <__aeabi_dadd+0x5c6>
 8005fb6:	4c5d      	ldr	r4, [pc, #372]	; (800612c <__aeabi_dadd+0x3fc>)
 8005fb8:	42a6      	cmp	r6, r4
 8005fba:	d100      	bne.n	8005fbe <__aeabi_dadd+0x28e>
 8005fbc:	e12f      	b.n	800621e <__aeabi_dadd+0x4ee>
 8005fbe:	43db      	mvns	r3, r3
 8005fc0:	2b38      	cmp	r3, #56	; 0x38
 8005fc2:	dd00      	ble.n	8005fc6 <__aeabi_dadd+0x296>
 8005fc4:	e166      	b.n	8006294 <__aeabi_dadd+0x564>
 8005fc6:	2b1f      	cmp	r3, #31
 8005fc8:	dd00      	ble.n	8005fcc <__aeabi_dadd+0x29c>
 8005fca:	e183      	b.n	80062d4 <__aeabi_dadd+0x5a4>
 8005fcc:	2420      	movs	r4, #32
 8005fce:	0005      	movs	r5, r0
 8005fd0:	1ae4      	subs	r4, r4, r3
 8005fd2:	000f      	movs	r7, r1
 8005fd4:	40dd      	lsrs	r5, r3
 8005fd6:	40d9      	lsrs	r1, r3
 8005fd8:	40a0      	lsls	r0, r4
 8005fda:	4643      	mov	r3, r8
 8005fdc:	40a7      	lsls	r7, r4
 8005fde:	1a5b      	subs	r3, r3, r1
 8005fe0:	1e44      	subs	r4, r0, #1
 8005fe2:	41a0      	sbcs	r0, r4
 8005fe4:	4698      	mov	r8, r3
 8005fe6:	432f      	orrs	r7, r5
 8005fe8:	4338      	orrs	r0, r7
 8005fea:	1a17      	subs	r7, r2, r0
 8005fec:	42ba      	cmp	r2, r7
 8005fee:	4192      	sbcs	r2, r2
 8005ff0:	4643      	mov	r3, r8
 8005ff2:	4252      	negs	r2, r2
 8005ff4:	1a99      	subs	r1, r3, r2
 8005ff6:	4664      	mov	r4, ip
 8005ff8:	0035      	movs	r5, r6
 8005ffa:	e6ca      	b.n	8005d92 <__aeabi_dadd+0x62>
 8005ffc:	2207      	movs	r2, #7
 8005ffe:	403a      	ands	r2, r7
 8006000:	2a00      	cmp	r2, #0
 8006002:	d000      	beq.n	8006006 <__aeabi_dadd+0x2d6>
 8006004:	e6f6      	b.n	8005df4 <__aeabi_dadd+0xc4>
 8006006:	074b      	lsls	r3, r1, #29
 8006008:	08ca      	lsrs	r2, r1, #3
 800600a:	4948      	ldr	r1, [pc, #288]	; (800612c <__aeabi_dadd+0x3fc>)
 800600c:	08ff      	lsrs	r7, r7, #3
 800600e:	433b      	orrs	r3, r7
 8006010:	428d      	cmp	r5, r1
 8006012:	d196      	bne.n	8005f42 <__aeabi_dadd+0x212>
 8006014:	0019      	movs	r1, r3
 8006016:	4311      	orrs	r1, r2
 8006018:	d100      	bne.n	800601c <__aeabi_dadd+0x2ec>
 800601a:	e19e      	b.n	800635a <__aeabi_dadd+0x62a>
 800601c:	2180      	movs	r1, #128	; 0x80
 800601e:	0309      	lsls	r1, r1, #12
 8006020:	430a      	orrs	r2, r1
 8006022:	0312      	lsls	r2, r2, #12
 8006024:	0b12      	lsrs	r2, r2, #12
 8006026:	4d41      	ldr	r5, [pc, #260]	; (800612c <__aeabi_dadd+0x3fc>)
 8006028:	e78f      	b.n	8005f4a <__aeabi_dadd+0x21a>
 800602a:	0015      	movs	r5, r2
 800602c:	2200      	movs	r2, #0
 800602e:	2300      	movs	r3, #0
 8006030:	e78b      	b.n	8005f4a <__aeabi_dadd+0x21a>
 8006032:	2b00      	cmp	r3, #0
 8006034:	d000      	beq.n	8006038 <__aeabi_dadd+0x308>
 8006036:	e0c7      	b.n	80061c8 <__aeabi_dadd+0x498>
 8006038:	1c6b      	adds	r3, r5, #1
 800603a:	055f      	lsls	r7, r3, #21
 800603c:	0d7f      	lsrs	r7, r7, #21
 800603e:	2f01      	cmp	r7, #1
 8006040:	dc00      	bgt.n	8006044 <__aeabi_dadd+0x314>
 8006042:	e0f1      	b.n	8006228 <__aeabi_dadd+0x4f8>
 8006044:	4d39      	ldr	r5, [pc, #228]	; (800612c <__aeabi_dadd+0x3fc>)
 8006046:	42ab      	cmp	r3, r5
 8006048:	d100      	bne.n	800604c <__aeabi_dadd+0x31c>
 800604a:	e0b9      	b.n	80061c0 <__aeabi_dadd+0x490>
 800604c:	1885      	adds	r5, r0, r2
 800604e:	000a      	movs	r2, r1
 8006050:	4285      	cmp	r5, r0
 8006052:	4189      	sbcs	r1, r1
 8006054:	4442      	add	r2, r8
 8006056:	4249      	negs	r1, r1
 8006058:	1851      	adds	r1, r2, r1
 800605a:	2207      	movs	r2, #7
 800605c:	07cf      	lsls	r7, r1, #31
 800605e:	086d      	lsrs	r5, r5, #1
 8006060:	432f      	orrs	r7, r5
 8006062:	0849      	lsrs	r1, r1, #1
 8006064:	403a      	ands	r2, r7
 8006066:	001d      	movs	r5, r3
 8006068:	e6c2      	b.n	8005df0 <__aeabi_dadd+0xc0>
 800606a:	2207      	movs	r2, #7
 800606c:	4930      	ldr	r1, [pc, #192]	; (8006130 <__aeabi_dadd+0x400>)
 800606e:	1aed      	subs	r5, r5, r3
 8006070:	4031      	ands	r1, r6
 8006072:	403a      	ands	r2, r7
 8006074:	e6bc      	b.n	8005df0 <__aeabi_dadd+0xc0>
 8006076:	003e      	movs	r6, r7
 8006078:	3828      	subs	r0, #40	; 0x28
 800607a:	4086      	lsls	r6, r0
 800607c:	2700      	movs	r7, #0
 800607e:	e69f      	b.n	8005dc0 <__aeabi_dadd+0x90>
 8006080:	0038      	movs	r0, r7
 8006082:	f001 fcc9 	bl	8007a18 <__clzsi2>
 8006086:	3020      	adds	r0, #32
 8006088:	e68e      	b.n	8005da8 <__aeabi_dadd+0x78>
 800608a:	4643      	mov	r3, r8
 800608c:	4313      	orrs	r3, r2
 800608e:	001f      	movs	r7, r3
 8006090:	1e7a      	subs	r2, r7, #1
 8006092:	4197      	sbcs	r7, r2
 8006094:	1bc7      	subs	r7, r0, r7
 8006096:	42b8      	cmp	r0, r7
 8006098:	4180      	sbcs	r0, r0
 800609a:	4240      	negs	r0, r0
 800609c:	1a09      	subs	r1, r1, r0
 800609e:	e678      	b.n	8005d92 <__aeabi_dadd+0x62>
 80060a0:	000e      	movs	r6, r1
 80060a2:	003b      	movs	r3, r7
 80060a4:	4306      	orrs	r6, r0
 80060a6:	4313      	orrs	r3, r2
 80060a8:	2d00      	cmp	r5, #0
 80060aa:	d161      	bne.n	8006170 <__aeabi_dadd+0x440>
 80060ac:	2e00      	cmp	r6, #0
 80060ae:	d000      	beq.n	80060b2 <__aeabi_dadd+0x382>
 80060b0:	e0f4      	b.n	800629c <__aeabi_dadd+0x56c>
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d100      	bne.n	80060b8 <__aeabi_dadd+0x388>
 80060b6:	e11b      	b.n	80062f0 <__aeabi_dadd+0x5c0>
 80060b8:	4664      	mov	r4, ip
 80060ba:	0039      	movs	r1, r7
 80060bc:	0010      	movs	r0, r2
 80060be:	e739      	b.n	8005f34 <__aeabi_dadd+0x204>
 80060c0:	4f1a      	ldr	r7, [pc, #104]	; (800612c <__aeabi_dadd+0x3fc>)
 80060c2:	42bb      	cmp	r3, r7
 80060c4:	d07a      	beq.n	80061bc <__aeabi_dadd+0x48c>
 80060c6:	0033      	movs	r3, r6
 80060c8:	e6ff      	b.n	8005eca <__aeabi_dadd+0x19a>
 80060ca:	0030      	movs	r0, r6
 80060cc:	3d1f      	subs	r5, #31
 80060ce:	40e8      	lsrs	r0, r5
 80060d0:	2b20      	cmp	r3, #32
 80060d2:	d003      	beq.n	80060dc <__aeabi_dadd+0x3ac>
 80060d4:	2140      	movs	r1, #64	; 0x40
 80060d6:	1acb      	subs	r3, r1, r3
 80060d8:	409e      	lsls	r6, r3
 80060da:	4337      	orrs	r7, r6
 80060dc:	1e7b      	subs	r3, r7, #1
 80060de:	419f      	sbcs	r7, r3
 80060e0:	2207      	movs	r2, #7
 80060e2:	4307      	orrs	r7, r0
 80060e4:	403a      	ands	r2, r7
 80060e6:	2100      	movs	r1, #0
 80060e8:	2500      	movs	r5, #0
 80060ea:	e789      	b.n	8006000 <__aeabi_dadd+0x2d0>
 80060ec:	1a17      	subs	r7, r2, r0
 80060ee:	4643      	mov	r3, r8
 80060f0:	42ba      	cmp	r2, r7
 80060f2:	41b6      	sbcs	r6, r6
 80060f4:	1a59      	subs	r1, r3, r1
 80060f6:	4276      	negs	r6, r6
 80060f8:	1b8e      	subs	r6, r1, r6
 80060fa:	4664      	mov	r4, ip
 80060fc:	e64e      	b.n	8005d9c <__aeabi_dadd+0x6c>
 80060fe:	2b1f      	cmp	r3, #31
 8006100:	dd00      	ble.n	8006104 <__aeabi_dadd+0x3d4>
 8006102:	e0ad      	b.n	8006260 <__aeabi_dadd+0x530>
 8006104:	2620      	movs	r6, #32
 8006106:	4647      	mov	r7, r8
 8006108:	1af6      	subs	r6, r6, r3
 800610a:	40b7      	lsls	r7, r6
 800610c:	46b9      	mov	r9, r7
 800610e:	0017      	movs	r7, r2
 8006110:	46b2      	mov	sl, r6
 8006112:	40df      	lsrs	r7, r3
 8006114:	464e      	mov	r6, r9
 8006116:	433e      	orrs	r6, r7
 8006118:	0037      	movs	r7, r6
 800611a:	4656      	mov	r6, sl
 800611c:	40b2      	lsls	r2, r6
 800611e:	1e56      	subs	r6, r2, #1
 8006120:	41b2      	sbcs	r2, r6
 8006122:	4317      	orrs	r7, r2
 8006124:	4642      	mov	r2, r8
 8006126:	40da      	lsrs	r2, r3
 8006128:	1889      	adds	r1, r1, r2
 800612a:	e6ae      	b.n	8005e8a <__aeabi_dadd+0x15a>
 800612c:	000007ff 	.word	0x000007ff
 8006130:	ff7fffff 	.word	0xff7fffff
 8006134:	800fffff 	.word	0x800fffff
 8006138:	2620      	movs	r6, #32
 800613a:	4647      	mov	r7, r8
 800613c:	1af6      	subs	r6, r6, r3
 800613e:	40b7      	lsls	r7, r6
 8006140:	46b9      	mov	r9, r7
 8006142:	0017      	movs	r7, r2
 8006144:	46b2      	mov	sl, r6
 8006146:	40df      	lsrs	r7, r3
 8006148:	464e      	mov	r6, r9
 800614a:	433e      	orrs	r6, r7
 800614c:	0037      	movs	r7, r6
 800614e:	4656      	mov	r6, sl
 8006150:	40b2      	lsls	r2, r6
 8006152:	1e56      	subs	r6, r2, #1
 8006154:	41b2      	sbcs	r2, r6
 8006156:	4317      	orrs	r7, r2
 8006158:	4642      	mov	r2, r8
 800615a:	40da      	lsrs	r2, r3
 800615c:	1a89      	subs	r1, r1, r2
 800615e:	e799      	b.n	8006094 <__aeabi_dadd+0x364>
 8006160:	4c7f      	ldr	r4, [pc, #508]	; (8006360 <__aeabi_dadd+0x630>)
 8006162:	42a6      	cmp	r6, r4
 8006164:	d05b      	beq.n	800621e <__aeabi_dadd+0x4ee>
 8006166:	2480      	movs	r4, #128	; 0x80
 8006168:	0424      	lsls	r4, r4, #16
 800616a:	425b      	negs	r3, r3
 800616c:	4321      	orrs	r1, r4
 800616e:	e727      	b.n	8005fc0 <__aeabi_dadd+0x290>
 8006170:	2e00      	cmp	r6, #0
 8006172:	d10c      	bne.n	800618e <__aeabi_dadd+0x45e>
 8006174:	2b00      	cmp	r3, #0
 8006176:	d100      	bne.n	800617a <__aeabi_dadd+0x44a>
 8006178:	e0cb      	b.n	8006312 <__aeabi_dadd+0x5e2>
 800617a:	4664      	mov	r4, ip
 800617c:	0039      	movs	r1, r7
 800617e:	0010      	movs	r0, r2
 8006180:	4d77      	ldr	r5, [pc, #476]	; (8006360 <__aeabi_dadd+0x630>)
 8006182:	e6d7      	b.n	8005f34 <__aeabi_dadd+0x204>
 8006184:	4f76      	ldr	r7, [pc, #472]	; (8006360 <__aeabi_dadd+0x630>)
 8006186:	42bb      	cmp	r3, r7
 8006188:	d018      	beq.n	80061bc <__aeabi_dadd+0x48c>
 800618a:	0033      	movs	r3, r6
 800618c:	e675      	b.n	8005e7a <__aeabi_dadd+0x14a>
 800618e:	2b00      	cmp	r3, #0
 8006190:	d014      	beq.n	80061bc <__aeabi_dadd+0x48c>
 8006192:	074b      	lsls	r3, r1, #29
 8006194:	08c0      	lsrs	r0, r0, #3
 8006196:	4318      	orrs	r0, r3
 8006198:	2380      	movs	r3, #128	; 0x80
 800619a:	08c9      	lsrs	r1, r1, #3
 800619c:	031b      	lsls	r3, r3, #12
 800619e:	4219      	tst	r1, r3
 80061a0:	d007      	beq.n	80061b2 <__aeabi_dadd+0x482>
 80061a2:	08fc      	lsrs	r4, r7, #3
 80061a4:	421c      	tst	r4, r3
 80061a6:	d104      	bne.n	80061b2 <__aeabi_dadd+0x482>
 80061a8:	0779      	lsls	r1, r7, #29
 80061aa:	08d0      	lsrs	r0, r2, #3
 80061ac:	4308      	orrs	r0, r1
 80061ae:	46e1      	mov	r9, ip
 80061b0:	0021      	movs	r1, r4
 80061b2:	464c      	mov	r4, r9
 80061b4:	0f42      	lsrs	r2, r0, #29
 80061b6:	00c9      	lsls	r1, r1, #3
 80061b8:	4311      	orrs	r1, r2
 80061ba:	00c0      	lsls	r0, r0, #3
 80061bc:	4d68      	ldr	r5, [pc, #416]	; (8006360 <__aeabi_dadd+0x630>)
 80061be:	e6b9      	b.n	8005f34 <__aeabi_dadd+0x204>
 80061c0:	001d      	movs	r5, r3
 80061c2:	2200      	movs	r2, #0
 80061c4:	2300      	movs	r3, #0
 80061c6:	e6c0      	b.n	8005f4a <__aeabi_dadd+0x21a>
 80061c8:	2d00      	cmp	r5, #0
 80061ca:	d15b      	bne.n	8006284 <__aeabi_dadd+0x554>
 80061cc:	000d      	movs	r5, r1
 80061ce:	4305      	orrs	r5, r0
 80061d0:	d100      	bne.n	80061d4 <__aeabi_dadd+0x4a4>
 80061d2:	e6e2      	b.n	8005f9a <__aeabi_dadd+0x26a>
 80061d4:	1c5d      	adds	r5, r3, #1
 80061d6:	d100      	bne.n	80061da <__aeabi_dadd+0x4aa>
 80061d8:	e0b0      	b.n	800633c <__aeabi_dadd+0x60c>
 80061da:	4d61      	ldr	r5, [pc, #388]	; (8006360 <__aeabi_dadd+0x630>)
 80061dc:	42ae      	cmp	r6, r5
 80061de:	d01f      	beq.n	8006220 <__aeabi_dadd+0x4f0>
 80061e0:	43db      	mvns	r3, r3
 80061e2:	2b38      	cmp	r3, #56	; 0x38
 80061e4:	dc71      	bgt.n	80062ca <__aeabi_dadd+0x59a>
 80061e6:	2b1f      	cmp	r3, #31
 80061e8:	dd00      	ble.n	80061ec <__aeabi_dadd+0x4bc>
 80061ea:	e096      	b.n	800631a <__aeabi_dadd+0x5ea>
 80061ec:	2520      	movs	r5, #32
 80061ee:	000f      	movs	r7, r1
 80061f0:	1aed      	subs	r5, r5, r3
 80061f2:	40af      	lsls	r7, r5
 80061f4:	46b9      	mov	r9, r7
 80061f6:	0007      	movs	r7, r0
 80061f8:	46aa      	mov	sl, r5
 80061fa:	40df      	lsrs	r7, r3
 80061fc:	464d      	mov	r5, r9
 80061fe:	433d      	orrs	r5, r7
 8006200:	002f      	movs	r7, r5
 8006202:	4655      	mov	r5, sl
 8006204:	40a8      	lsls	r0, r5
 8006206:	40d9      	lsrs	r1, r3
 8006208:	1e45      	subs	r5, r0, #1
 800620a:	41a8      	sbcs	r0, r5
 800620c:	4488      	add	r8, r1
 800620e:	4307      	orrs	r7, r0
 8006210:	18bf      	adds	r7, r7, r2
 8006212:	4297      	cmp	r7, r2
 8006214:	4192      	sbcs	r2, r2
 8006216:	4251      	negs	r1, r2
 8006218:	4441      	add	r1, r8
 800621a:	0035      	movs	r5, r6
 800621c:	e63a      	b.n	8005e94 <__aeabi_dadd+0x164>
 800621e:	4664      	mov	r4, ip
 8006220:	0035      	movs	r5, r6
 8006222:	4641      	mov	r1, r8
 8006224:	0010      	movs	r0, r2
 8006226:	e685      	b.n	8005f34 <__aeabi_dadd+0x204>
 8006228:	000b      	movs	r3, r1
 800622a:	4303      	orrs	r3, r0
 800622c:	2d00      	cmp	r5, #0
 800622e:	d000      	beq.n	8006232 <__aeabi_dadd+0x502>
 8006230:	e663      	b.n	8005efa <__aeabi_dadd+0x1ca>
 8006232:	2b00      	cmp	r3, #0
 8006234:	d0f5      	beq.n	8006222 <__aeabi_dadd+0x4f2>
 8006236:	4643      	mov	r3, r8
 8006238:	4313      	orrs	r3, r2
 800623a:	d100      	bne.n	800623e <__aeabi_dadd+0x50e>
 800623c:	e67a      	b.n	8005f34 <__aeabi_dadd+0x204>
 800623e:	1887      	adds	r7, r0, r2
 8006240:	4287      	cmp	r7, r0
 8006242:	4180      	sbcs	r0, r0
 8006244:	2207      	movs	r2, #7
 8006246:	4441      	add	r1, r8
 8006248:	4240      	negs	r0, r0
 800624a:	1809      	adds	r1, r1, r0
 800624c:	403a      	ands	r2, r7
 800624e:	020b      	lsls	r3, r1, #8
 8006250:	d400      	bmi.n	8006254 <__aeabi_dadd+0x524>
 8006252:	e6d5      	b.n	8006000 <__aeabi_dadd+0x2d0>
 8006254:	4b43      	ldr	r3, [pc, #268]	; (8006364 <__aeabi_dadd+0x634>)
 8006256:	3501      	adds	r5, #1
 8006258:	4019      	ands	r1, r3
 800625a:	e5c9      	b.n	8005df0 <__aeabi_dadd+0xc0>
 800625c:	0038      	movs	r0, r7
 800625e:	e669      	b.n	8005f34 <__aeabi_dadd+0x204>
 8006260:	001e      	movs	r6, r3
 8006262:	4647      	mov	r7, r8
 8006264:	3e20      	subs	r6, #32
 8006266:	40f7      	lsrs	r7, r6
 8006268:	46bc      	mov	ip, r7
 800626a:	2b20      	cmp	r3, #32
 800626c:	d004      	beq.n	8006278 <__aeabi_dadd+0x548>
 800626e:	2640      	movs	r6, #64	; 0x40
 8006270:	1af3      	subs	r3, r6, r3
 8006272:	4646      	mov	r6, r8
 8006274:	409e      	lsls	r6, r3
 8006276:	4332      	orrs	r2, r6
 8006278:	0017      	movs	r7, r2
 800627a:	4663      	mov	r3, ip
 800627c:	1e7a      	subs	r2, r7, #1
 800627e:	4197      	sbcs	r7, r2
 8006280:	431f      	orrs	r7, r3
 8006282:	e602      	b.n	8005e8a <__aeabi_dadd+0x15a>
 8006284:	4d36      	ldr	r5, [pc, #216]	; (8006360 <__aeabi_dadd+0x630>)
 8006286:	42ae      	cmp	r6, r5
 8006288:	d0ca      	beq.n	8006220 <__aeabi_dadd+0x4f0>
 800628a:	2580      	movs	r5, #128	; 0x80
 800628c:	042d      	lsls	r5, r5, #16
 800628e:	425b      	negs	r3, r3
 8006290:	4329      	orrs	r1, r5
 8006292:	e7a6      	b.n	80061e2 <__aeabi_dadd+0x4b2>
 8006294:	4308      	orrs	r0, r1
 8006296:	1e41      	subs	r1, r0, #1
 8006298:	4188      	sbcs	r0, r1
 800629a:	e6a6      	b.n	8005fea <__aeabi_dadd+0x2ba>
 800629c:	2b00      	cmp	r3, #0
 800629e:	d100      	bne.n	80062a2 <__aeabi_dadd+0x572>
 80062a0:	e648      	b.n	8005f34 <__aeabi_dadd+0x204>
 80062a2:	1a87      	subs	r7, r0, r2
 80062a4:	4643      	mov	r3, r8
 80062a6:	42b8      	cmp	r0, r7
 80062a8:	41b6      	sbcs	r6, r6
 80062aa:	1acb      	subs	r3, r1, r3
 80062ac:	4276      	negs	r6, r6
 80062ae:	1b9e      	subs	r6, r3, r6
 80062b0:	0233      	lsls	r3, r6, #8
 80062b2:	d54b      	bpl.n	800634c <__aeabi_dadd+0x61c>
 80062b4:	1a17      	subs	r7, r2, r0
 80062b6:	4643      	mov	r3, r8
 80062b8:	42ba      	cmp	r2, r7
 80062ba:	4192      	sbcs	r2, r2
 80062bc:	1a59      	subs	r1, r3, r1
 80062be:	4252      	negs	r2, r2
 80062c0:	1a89      	subs	r1, r1, r2
 80062c2:	2207      	movs	r2, #7
 80062c4:	4664      	mov	r4, ip
 80062c6:	403a      	ands	r2, r7
 80062c8:	e592      	b.n	8005df0 <__aeabi_dadd+0xc0>
 80062ca:	4301      	orrs	r1, r0
 80062cc:	000f      	movs	r7, r1
 80062ce:	1e79      	subs	r1, r7, #1
 80062d0:	418f      	sbcs	r7, r1
 80062d2:	e79d      	b.n	8006210 <__aeabi_dadd+0x4e0>
 80062d4:	001c      	movs	r4, r3
 80062d6:	000f      	movs	r7, r1
 80062d8:	3c20      	subs	r4, #32
 80062da:	40e7      	lsrs	r7, r4
 80062dc:	2b20      	cmp	r3, #32
 80062de:	d003      	beq.n	80062e8 <__aeabi_dadd+0x5b8>
 80062e0:	2440      	movs	r4, #64	; 0x40
 80062e2:	1ae3      	subs	r3, r4, r3
 80062e4:	4099      	lsls	r1, r3
 80062e6:	4308      	orrs	r0, r1
 80062e8:	1e41      	subs	r1, r0, #1
 80062ea:	4188      	sbcs	r0, r1
 80062ec:	4338      	orrs	r0, r7
 80062ee:	e67c      	b.n	8005fea <__aeabi_dadd+0x2ba>
 80062f0:	2200      	movs	r2, #0
 80062f2:	2400      	movs	r4, #0
 80062f4:	e625      	b.n	8005f42 <__aeabi_dadd+0x212>
 80062f6:	1a17      	subs	r7, r2, r0
 80062f8:	4643      	mov	r3, r8
 80062fa:	42ba      	cmp	r2, r7
 80062fc:	4192      	sbcs	r2, r2
 80062fe:	1a59      	subs	r1, r3, r1
 8006300:	4252      	negs	r2, r2
 8006302:	1a89      	subs	r1, r1, r2
 8006304:	4664      	mov	r4, ip
 8006306:	0035      	movs	r5, r6
 8006308:	e543      	b.n	8005d92 <__aeabi_dadd+0x62>
 800630a:	4641      	mov	r1, r8
 800630c:	0010      	movs	r0, r2
 800630e:	4d14      	ldr	r5, [pc, #80]	; (8006360 <__aeabi_dadd+0x630>)
 8006310:	e610      	b.n	8005f34 <__aeabi_dadd+0x204>
 8006312:	2280      	movs	r2, #128	; 0x80
 8006314:	2400      	movs	r4, #0
 8006316:	0312      	lsls	r2, r2, #12
 8006318:	e680      	b.n	800601c <__aeabi_dadd+0x2ec>
 800631a:	001d      	movs	r5, r3
 800631c:	000f      	movs	r7, r1
 800631e:	3d20      	subs	r5, #32
 8006320:	40ef      	lsrs	r7, r5
 8006322:	46bc      	mov	ip, r7
 8006324:	2b20      	cmp	r3, #32
 8006326:	d003      	beq.n	8006330 <__aeabi_dadd+0x600>
 8006328:	2540      	movs	r5, #64	; 0x40
 800632a:	1aeb      	subs	r3, r5, r3
 800632c:	4099      	lsls	r1, r3
 800632e:	4308      	orrs	r0, r1
 8006330:	0007      	movs	r7, r0
 8006332:	4663      	mov	r3, ip
 8006334:	1e78      	subs	r0, r7, #1
 8006336:	4187      	sbcs	r7, r0
 8006338:	431f      	orrs	r7, r3
 800633a:	e769      	b.n	8006210 <__aeabi_dadd+0x4e0>
 800633c:	1887      	adds	r7, r0, r2
 800633e:	4297      	cmp	r7, r2
 8006340:	419b      	sbcs	r3, r3
 8006342:	4441      	add	r1, r8
 8006344:	425b      	negs	r3, r3
 8006346:	18c9      	adds	r1, r1, r3
 8006348:	0035      	movs	r5, r6
 800634a:	e5a3      	b.n	8005e94 <__aeabi_dadd+0x164>
 800634c:	003b      	movs	r3, r7
 800634e:	4333      	orrs	r3, r6
 8006350:	d0ce      	beq.n	80062f0 <__aeabi_dadd+0x5c0>
 8006352:	2207      	movs	r2, #7
 8006354:	0031      	movs	r1, r6
 8006356:	403a      	ands	r2, r7
 8006358:	e652      	b.n	8006000 <__aeabi_dadd+0x2d0>
 800635a:	2300      	movs	r3, #0
 800635c:	001a      	movs	r2, r3
 800635e:	e5f4      	b.n	8005f4a <__aeabi_dadd+0x21a>
 8006360:	000007ff 	.word	0x000007ff
 8006364:	ff7fffff 	.word	0xff7fffff

08006368 <__aeabi_ddiv>:
 8006368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800636a:	4657      	mov	r7, sl
 800636c:	46de      	mov	lr, fp
 800636e:	464e      	mov	r6, r9
 8006370:	4645      	mov	r5, r8
 8006372:	b5e0      	push	{r5, r6, r7, lr}
 8006374:	4683      	mov	fp, r0
 8006376:	0007      	movs	r7, r0
 8006378:	030e      	lsls	r6, r1, #12
 800637a:	0048      	lsls	r0, r1, #1
 800637c:	b085      	sub	sp, #20
 800637e:	4692      	mov	sl, r2
 8006380:	001c      	movs	r4, r3
 8006382:	0b36      	lsrs	r6, r6, #12
 8006384:	0d40      	lsrs	r0, r0, #21
 8006386:	0fcd      	lsrs	r5, r1, #31
 8006388:	2800      	cmp	r0, #0
 800638a:	d100      	bne.n	800638e <__aeabi_ddiv+0x26>
 800638c:	e09d      	b.n	80064ca <__aeabi_ddiv+0x162>
 800638e:	4b95      	ldr	r3, [pc, #596]	; (80065e4 <__aeabi_ddiv+0x27c>)
 8006390:	4298      	cmp	r0, r3
 8006392:	d039      	beq.n	8006408 <__aeabi_ddiv+0xa0>
 8006394:	2380      	movs	r3, #128	; 0x80
 8006396:	00f6      	lsls	r6, r6, #3
 8006398:	041b      	lsls	r3, r3, #16
 800639a:	431e      	orrs	r6, r3
 800639c:	4a92      	ldr	r2, [pc, #584]	; (80065e8 <__aeabi_ddiv+0x280>)
 800639e:	0f7b      	lsrs	r3, r7, #29
 80063a0:	4333      	orrs	r3, r6
 80063a2:	4699      	mov	r9, r3
 80063a4:	4694      	mov	ip, r2
 80063a6:	0003      	movs	r3, r0
 80063a8:	4463      	add	r3, ip
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	2300      	movs	r3, #0
 80063ae:	2600      	movs	r6, #0
 80063b0:	00ff      	lsls	r7, r7, #3
 80063b2:	9302      	str	r3, [sp, #8]
 80063b4:	0323      	lsls	r3, r4, #12
 80063b6:	0b1b      	lsrs	r3, r3, #12
 80063b8:	4698      	mov	r8, r3
 80063ba:	0063      	lsls	r3, r4, #1
 80063bc:	0fe4      	lsrs	r4, r4, #31
 80063be:	4652      	mov	r2, sl
 80063c0:	0d5b      	lsrs	r3, r3, #21
 80063c2:	9401      	str	r4, [sp, #4]
 80063c4:	d100      	bne.n	80063c8 <__aeabi_ddiv+0x60>
 80063c6:	e0b3      	b.n	8006530 <__aeabi_ddiv+0x1c8>
 80063c8:	4986      	ldr	r1, [pc, #536]	; (80065e4 <__aeabi_ddiv+0x27c>)
 80063ca:	428b      	cmp	r3, r1
 80063cc:	d100      	bne.n	80063d0 <__aeabi_ddiv+0x68>
 80063ce:	e09e      	b.n	800650e <__aeabi_ddiv+0x1a6>
 80063d0:	4642      	mov	r2, r8
 80063d2:	00d1      	lsls	r1, r2, #3
 80063d4:	2280      	movs	r2, #128	; 0x80
 80063d6:	0412      	lsls	r2, r2, #16
 80063d8:	430a      	orrs	r2, r1
 80063da:	4651      	mov	r1, sl
 80063dc:	0f49      	lsrs	r1, r1, #29
 80063de:	4311      	orrs	r1, r2
 80063e0:	468b      	mov	fp, r1
 80063e2:	4981      	ldr	r1, [pc, #516]	; (80065e8 <__aeabi_ddiv+0x280>)
 80063e4:	4652      	mov	r2, sl
 80063e6:	468c      	mov	ip, r1
 80063e8:	9900      	ldr	r1, [sp, #0]
 80063ea:	4463      	add	r3, ip
 80063ec:	1acb      	subs	r3, r1, r3
 80063ee:	2100      	movs	r1, #0
 80063f0:	00d2      	lsls	r2, r2, #3
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	002b      	movs	r3, r5
 80063f6:	4063      	eors	r3, r4
 80063f8:	469a      	mov	sl, r3
 80063fa:	2e0f      	cmp	r6, #15
 80063fc:	d900      	bls.n	8006400 <__aeabi_ddiv+0x98>
 80063fe:	e105      	b.n	800660c <__aeabi_ddiv+0x2a4>
 8006400:	4b7a      	ldr	r3, [pc, #488]	; (80065ec <__aeabi_ddiv+0x284>)
 8006402:	00b6      	lsls	r6, r6, #2
 8006404:	599b      	ldr	r3, [r3, r6]
 8006406:	469f      	mov	pc, r3
 8006408:	465b      	mov	r3, fp
 800640a:	4333      	orrs	r3, r6
 800640c:	4699      	mov	r9, r3
 800640e:	d000      	beq.n	8006412 <__aeabi_ddiv+0xaa>
 8006410:	e0b8      	b.n	8006584 <__aeabi_ddiv+0x21c>
 8006412:	2302      	movs	r3, #2
 8006414:	2608      	movs	r6, #8
 8006416:	2700      	movs	r7, #0
 8006418:	9000      	str	r0, [sp, #0]
 800641a:	9302      	str	r3, [sp, #8]
 800641c:	e7ca      	b.n	80063b4 <__aeabi_ddiv+0x4c>
 800641e:	46cb      	mov	fp, r9
 8006420:	003a      	movs	r2, r7
 8006422:	9902      	ldr	r1, [sp, #8]
 8006424:	9501      	str	r5, [sp, #4]
 8006426:	9b01      	ldr	r3, [sp, #4]
 8006428:	469a      	mov	sl, r3
 800642a:	2902      	cmp	r1, #2
 800642c:	d027      	beq.n	800647e <__aeabi_ddiv+0x116>
 800642e:	2903      	cmp	r1, #3
 8006430:	d100      	bne.n	8006434 <__aeabi_ddiv+0xcc>
 8006432:	e280      	b.n	8006936 <__aeabi_ddiv+0x5ce>
 8006434:	2901      	cmp	r1, #1
 8006436:	d044      	beq.n	80064c2 <__aeabi_ddiv+0x15a>
 8006438:	496d      	ldr	r1, [pc, #436]	; (80065f0 <__aeabi_ddiv+0x288>)
 800643a:	9b00      	ldr	r3, [sp, #0]
 800643c:	468c      	mov	ip, r1
 800643e:	4463      	add	r3, ip
 8006440:	001c      	movs	r4, r3
 8006442:	2c00      	cmp	r4, #0
 8006444:	dd38      	ble.n	80064b8 <__aeabi_ddiv+0x150>
 8006446:	0753      	lsls	r3, r2, #29
 8006448:	d000      	beq.n	800644c <__aeabi_ddiv+0xe4>
 800644a:	e213      	b.n	8006874 <__aeabi_ddiv+0x50c>
 800644c:	08d2      	lsrs	r2, r2, #3
 800644e:	465b      	mov	r3, fp
 8006450:	01db      	lsls	r3, r3, #7
 8006452:	d509      	bpl.n	8006468 <__aeabi_ddiv+0x100>
 8006454:	4659      	mov	r1, fp
 8006456:	4b67      	ldr	r3, [pc, #412]	; (80065f4 <__aeabi_ddiv+0x28c>)
 8006458:	4019      	ands	r1, r3
 800645a:	468b      	mov	fp, r1
 800645c:	2180      	movs	r1, #128	; 0x80
 800645e:	00c9      	lsls	r1, r1, #3
 8006460:	468c      	mov	ip, r1
 8006462:	9b00      	ldr	r3, [sp, #0]
 8006464:	4463      	add	r3, ip
 8006466:	001c      	movs	r4, r3
 8006468:	4b63      	ldr	r3, [pc, #396]	; (80065f8 <__aeabi_ddiv+0x290>)
 800646a:	429c      	cmp	r4, r3
 800646c:	dc07      	bgt.n	800647e <__aeabi_ddiv+0x116>
 800646e:	465b      	mov	r3, fp
 8006470:	0564      	lsls	r4, r4, #21
 8006472:	075f      	lsls	r7, r3, #29
 8006474:	025b      	lsls	r3, r3, #9
 8006476:	4317      	orrs	r7, r2
 8006478:	0b1b      	lsrs	r3, r3, #12
 800647a:	0d62      	lsrs	r2, r4, #21
 800647c:	e002      	b.n	8006484 <__aeabi_ddiv+0x11c>
 800647e:	2300      	movs	r3, #0
 8006480:	2700      	movs	r7, #0
 8006482:	4a58      	ldr	r2, [pc, #352]	; (80065e4 <__aeabi_ddiv+0x27c>)
 8006484:	2100      	movs	r1, #0
 8006486:	031b      	lsls	r3, r3, #12
 8006488:	0b1c      	lsrs	r4, r3, #12
 800648a:	0d0b      	lsrs	r3, r1, #20
 800648c:	051b      	lsls	r3, r3, #20
 800648e:	4323      	orrs	r3, r4
 8006490:	0514      	lsls	r4, r2, #20
 8006492:	4a5a      	ldr	r2, [pc, #360]	; (80065fc <__aeabi_ddiv+0x294>)
 8006494:	0038      	movs	r0, r7
 8006496:	4013      	ands	r3, r2
 8006498:	431c      	orrs	r4, r3
 800649a:	4653      	mov	r3, sl
 800649c:	0064      	lsls	r4, r4, #1
 800649e:	07db      	lsls	r3, r3, #31
 80064a0:	0864      	lsrs	r4, r4, #1
 80064a2:	431c      	orrs	r4, r3
 80064a4:	0021      	movs	r1, r4
 80064a6:	b005      	add	sp, #20
 80064a8:	bc3c      	pop	{r2, r3, r4, r5}
 80064aa:	4690      	mov	r8, r2
 80064ac:	4699      	mov	r9, r3
 80064ae:	46a2      	mov	sl, r4
 80064b0:	46ab      	mov	fp, r5
 80064b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064b4:	2201      	movs	r2, #1
 80064b6:	4252      	negs	r2, r2
 80064b8:	2301      	movs	r3, #1
 80064ba:	1b1b      	subs	r3, r3, r4
 80064bc:	2b38      	cmp	r3, #56	; 0x38
 80064be:	dc00      	bgt.n	80064c2 <__aeabi_ddiv+0x15a>
 80064c0:	e1ad      	b.n	800681e <__aeabi_ddiv+0x4b6>
 80064c2:	2200      	movs	r2, #0
 80064c4:	2300      	movs	r3, #0
 80064c6:	2700      	movs	r7, #0
 80064c8:	e7dc      	b.n	8006484 <__aeabi_ddiv+0x11c>
 80064ca:	465b      	mov	r3, fp
 80064cc:	4333      	orrs	r3, r6
 80064ce:	4699      	mov	r9, r3
 80064d0:	d05e      	beq.n	8006590 <__aeabi_ddiv+0x228>
 80064d2:	2e00      	cmp	r6, #0
 80064d4:	d100      	bne.n	80064d8 <__aeabi_ddiv+0x170>
 80064d6:	e18a      	b.n	80067ee <__aeabi_ddiv+0x486>
 80064d8:	0030      	movs	r0, r6
 80064da:	f001 fa9d 	bl	8007a18 <__clzsi2>
 80064de:	0003      	movs	r3, r0
 80064e0:	3b0b      	subs	r3, #11
 80064e2:	2b1c      	cmp	r3, #28
 80064e4:	dd00      	ble.n	80064e8 <__aeabi_ddiv+0x180>
 80064e6:	e17b      	b.n	80067e0 <__aeabi_ddiv+0x478>
 80064e8:	221d      	movs	r2, #29
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	465a      	mov	r2, fp
 80064ee:	0001      	movs	r1, r0
 80064f0:	40da      	lsrs	r2, r3
 80064f2:	3908      	subs	r1, #8
 80064f4:	408e      	lsls	r6, r1
 80064f6:	0013      	movs	r3, r2
 80064f8:	465f      	mov	r7, fp
 80064fa:	4333      	orrs	r3, r6
 80064fc:	4699      	mov	r9, r3
 80064fe:	408f      	lsls	r7, r1
 8006500:	4b3f      	ldr	r3, [pc, #252]	; (8006600 <__aeabi_ddiv+0x298>)
 8006502:	2600      	movs	r6, #0
 8006504:	1a1b      	subs	r3, r3, r0
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	2300      	movs	r3, #0
 800650a:	9302      	str	r3, [sp, #8]
 800650c:	e752      	b.n	80063b4 <__aeabi_ddiv+0x4c>
 800650e:	4641      	mov	r1, r8
 8006510:	4653      	mov	r3, sl
 8006512:	430b      	orrs	r3, r1
 8006514:	493b      	ldr	r1, [pc, #236]	; (8006604 <__aeabi_ddiv+0x29c>)
 8006516:	469b      	mov	fp, r3
 8006518:	468c      	mov	ip, r1
 800651a:	9b00      	ldr	r3, [sp, #0]
 800651c:	4463      	add	r3, ip
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	465b      	mov	r3, fp
 8006522:	2b00      	cmp	r3, #0
 8006524:	d13b      	bne.n	800659e <__aeabi_ddiv+0x236>
 8006526:	2302      	movs	r3, #2
 8006528:	2200      	movs	r2, #0
 800652a:	431e      	orrs	r6, r3
 800652c:	2102      	movs	r1, #2
 800652e:	e761      	b.n	80063f4 <__aeabi_ddiv+0x8c>
 8006530:	4643      	mov	r3, r8
 8006532:	4313      	orrs	r3, r2
 8006534:	469b      	mov	fp, r3
 8006536:	d037      	beq.n	80065a8 <__aeabi_ddiv+0x240>
 8006538:	4643      	mov	r3, r8
 800653a:	2b00      	cmp	r3, #0
 800653c:	d100      	bne.n	8006540 <__aeabi_ddiv+0x1d8>
 800653e:	e162      	b.n	8006806 <__aeabi_ddiv+0x49e>
 8006540:	4640      	mov	r0, r8
 8006542:	f001 fa69 	bl	8007a18 <__clzsi2>
 8006546:	0003      	movs	r3, r0
 8006548:	3b0b      	subs	r3, #11
 800654a:	2b1c      	cmp	r3, #28
 800654c:	dd00      	ble.n	8006550 <__aeabi_ddiv+0x1e8>
 800654e:	e153      	b.n	80067f8 <__aeabi_ddiv+0x490>
 8006550:	0002      	movs	r2, r0
 8006552:	4641      	mov	r1, r8
 8006554:	3a08      	subs	r2, #8
 8006556:	4091      	lsls	r1, r2
 8006558:	4688      	mov	r8, r1
 800655a:	211d      	movs	r1, #29
 800655c:	1acb      	subs	r3, r1, r3
 800655e:	4651      	mov	r1, sl
 8006560:	40d9      	lsrs	r1, r3
 8006562:	000b      	movs	r3, r1
 8006564:	4641      	mov	r1, r8
 8006566:	430b      	orrs	r3, r1
 8006568:	469b      	mov	fp, r3
 800656a:	4653      	mov	r3, sl
 800656c:	4093      	lsls	r3, r2
 800656e:	001a      	movs	r2, r3
 8006570:	9b00      	ldr	r3, [sp, #0]
 8006572:	4925      	ldr	r1, [pc, #148]	; (8006608 <__aeabi_ddiv+0x2a0>)
 8006574:	469c      	mov	ip, r3
 8006576:	4460      	add	r0, ip
 8006578:	0003      	movs	r3, r0
 800657a:	468c      	mov	ip, r1
 800657c:	4463      	add	r3, ip
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	2100      	movs	r1, #0
 8006582:	e737      	b.n	80063f4 <__aeabi_ddiv+0x8c>
 8006584:	2303      	movs	r3, #3
 8006586:	46b1      	mov	r9, r6
 8006588:	9000      	str	r0, [sp, #0]
 800658a:	260c      	movs	r6, #12
 800658c:	9302      	str	r3, [sp, #8]
 800658e:	e711      	b.n	80063b4 <__aeabi_ddiv+0x4c>
 8006590:	2300      	movs	r3, #0
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	3301      	adds	r3, #1
 8006596:	2604      	movs	r6, #4
 8006598:	2700      	movs	r7, #0
 800659a:	9302      	str	r3, [sp, #8]
 800659c:	e70a      	b.n	80063b4 <__aeabi_ddiv+0x4c>
 800659e:	2303      	movs	r3, #3
 80065a0:	46c3      	mov	fp, r8
 80065a2:	431e      	orrs	r6, r3
 80065a4:	2103      	movs	r1, #3
 80065a6:	e725      	b.n	80063f4 <__aeabi_ddiv+0x8c>
 80065a8:	3301      	adds	r3, #1
 80065aa:	431e      	orrs	r6, r3
 80065ac:	2200      	movs	r2, #0
 80065ae:	2101      	movs	r1, #1
 80065b0:	e720      	b.n	80063f4 <__aeabi_ddiv+0x8c>
 80065b2:	2300      	movs	r3, #0
 80065b4:	469a      	mov	sl, r3
 80065b6:	2380      	movs	r3, #128	; 0x80
 80065b8:	2700      	movs	r7, #0
 80065ba:	031b      	lsls	r3, r3, #12
 80065bc:	4a09      	ldr	r2, [pc, #36]	; (80065e4 <__aeabi_ddiv+0x27c>)
 80065be:	e761      	b.n	8006484 <__aeabi_ddiv+0x11c>
 80065c0:	2380      	movs	r3, #128	; 0x80
 80065c2:	4649      	mov	r1, r9
 80065c4:	031b      	lsls	r3, r3, #12
 80065c6:	4219      	tst	r1, r3
 80065c8:	d100      	bne.n	80065cc <__aeabi_ddiv+0x264>
 80065ca:	e0e2      	b.n	8006792 <__aeabi_ddiv+0x42a>
 80065cc:	4659      	mov	r1, fp
 80065ce:	4219      	tst	r1, r3
 80065d0:	d000      	beq.n	80065d4 <__aeabi_ddiv+0x26c>
 80065d2:	e0de      	b.n	8006792 <__aeabi_ddiv+0x42a>
 80065d4:	430b      	orrs	r3, r1
 80065d6:	031b      	lsls	r3, r3, #12
 80065d8:	0017      	movs	r7, r2
 80065da:	0b1b      	lsrs	r3, r3, #12
 80065dc:	46a2      	mov	sl, r4
 80065de:	4a01      	ldr	r2, [pc, #4]	; (80065e4 <__aeabi_ddiv+0x27c>)
 80065e0:	e750      	b.n	8006484 <__aeabi_ddiv+0x11c>
 80065e2:	46c0      	nop			; (mov r8, r8)
 80065e4:	000007ff 	.word	0x000007ff
 80065e8:	fffffc01 	.word	0xfffffc01
 80065ec:	0801251c 	.word	0x0801251c
 80065f0:	000003ff 	.word	0x000003ff
 80065f4:	feffffff 	.word	0xfeffffff
 80065f8:	000007fe 	.word	0x000007fe
 80065fc:	800fffff 	.word	0x800fffff
 8006600:	fffffc0d 	.word	0xfffffc0d
 8006604:	fffff801 	.word	0xfffff801
 8006608:	000003f3 	.word	0x000003f3
 800660c:	45d9      	cmp	r9, fp
 800660e:	d900      	bls.n	8006612 <__aeabi_ddiv+0x2aa>
 8006610:	e0cb      	b.n	80067aa <__aeabi_ddiv+0x442>
 8006612:	d100      	bne.n	8006616 <__aeabi_ddiv+0x2ae>
 8006614:	e0c6      	b.n	80067a4 <__aeabi_ddiv+0x43c>
 8006616:	003c      	movs	r4, r7
 8006618:	4648      	mov	r0, r9
 800661a:	2700      	movs	r7, #0
 800661c:	9b00      	ldr	r3, [sp, #0]
 800661e:	3b01      	subs	r3, #1
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	465b      	mov	r3, fp
 8006624:	0e16      	lsrs	r6, r2, #24
 8006626:	021b      	lsls	r3, r3, #8
 8006628:	431e      	orrs	r6, r3
 800662a:	0213      	lsls	r3, r2, #8
 800662c:	4698      	mov	r8, r3
 800662e:	0433      	lsls	r3, r6, #16
 8006630:	0c1b      	lsrs	r3, r3, #16
 8006632:	4699      	mov	r9, r3
 8006634:	0c31      	lsrs	r1, r6, #16
 8006636:	9101      	str	r1, [sp, #4]
 8006638:	f7fe fe02 	bl	8005240 <__aeabi_uidivmod>
 800663c:	464a      	mov	r2, r9
 800663e:	4342      	muls	r2, r0
 8006640:	040b      	lsls	r3, r1, #16
 8006642:	0c21      	lsrs	r1, r4, #16
 8006644:	0005      	movs	r5, r0
 8006646:	4319      	orrs	r1, r3
 8006648:	428a      	cmp	r2, r1
 800664a:	d907      	bls.n	800665c <__aeabi_ddiv+0x2f4>
 800664c:	1989      	adds	r1, r1, r6
 800664e:	3d01      	subs	r5, #1
 8006650:	428e      	cmp	r6, r1
 8006652:	d803      	bhi.n	800665c <__aeabi_ddiv+0x2f4>
 8006654:	428a      	cmp	r2, r1
 8006656:	d901      	bls.n	800665c <__aeabi_ddiv+0x2f4>
 8006658:	1e85      	subs	r5, r0, #2
 800665a:	1989      	adds	r1, r1, r6
 800665c:	1a88      	subs	r0, r1, r2
 800665e:	9901      	ldr	r1, [sp, #4]
 8006660:	f7fe fdee 	bl	8005240 <__aeabi_uidivmod>
 8006664:	0409      	lsls	r1, r1, #16
 8006666:	468c      	mov	ip, r1
 8006668:	464a      	mov	r2, r9
 800666a:	0421      	lsls	r1, r4, #16
 800666c:	4664      	mov	r4, ip
 800666e:	4342      	muls	r2, r0
 8006670:	0c09      	lsrs	r1, r1, #16
 8006672:	0003      	movs	r3, r0
 8006674:	4321      	orrs	r1, r4
 8006676:	428a      	cmp	r2, r1
 8006678:	d904      	bls.n	8006684 <__aeabi_ddiv+0x31c>
 800667a:	1989      	adds	r1, r1, r6
 800667c:	3b01      	subs	r3, #1
 800667e:	428e      	cmp	r6, r1
 8006680:	d800      	bhi.n	8006684 <__aeabi_ddiv+0x31c>
 8006682:	e0f1      	b.n	8006868 <__aeabi_ddiv+0x500>
 8006684:	042d      	lsls	r5, r5, #16
 8006686:	431d      	orrs	r5, r3
 8006688:	46ab      	mov	fp, r5
 800668a:	4643      	mov	r3, r8
 800668c:	1a89      	subs	r1, r1, r2
 800668e:	4642      	mov	r2, r8
 8006690:	0c28      	lsrs	r0, r5, #16
 8006692:	0412      	lsls	r2, r2, #16
 8006694:	0c1d      	lsrs	r5, r3, #16
 8006696:	465b      	mov	r3, fp
 8006698:	0c14      	lsrs	r4, r2, #16
 800669a:	0022      	movs	r2, r4
 800669c:	041b      	lsls	r3, r3, #16
 800669e:	0c1b      	lsrs	r3, r3, #16
 80066a0:	435a      	muls	r2, r3
 80066a2:	9403      	str	r4, [sp, #12]
 80066a4:	436b      	muls	r3, r5
 80066a6:	4344      	muls	r4, r0
 80066a8:	9502      	str	r5, [sp, #8]
 80066aa:	4368      	muls	r0, r5
 80066ac:	191b      	adds	r3, r3, r4
 80066ae:	0c15      	lsrs	r5, r2, #16
 80066b0:	18eb      	adds	r3, r5, r3
 80066b2:	429c      	cmp	r4, r3
 80066b4:	d903      	bls.n	80066be <__aeabi_ddiv+0x356>
 80066b6:	2480      	movs	r4, #128	; 0x80
 80066b8:	0264      	lsls	r4, r4, #9
 80066ba:	46a4      	mov	ip, r4
 80066bc:	4460      	add	r0, ip
 80066be:	0c1c      	lsrs	r4, r3, #16
 80066c0:	0415      	lsls	r5, r2, #16
 80066c2:	041b      	lsls	r3, r3, #16
 80066c4:	0c2d      	lsrs	r5, r5, #16
 80066c6:	1820      	adds	r0, r4, r0
 80066c8:	195d      	adds	r5, r3, r5
 80066ca:	4281      	cmp	r1, r0
 80066cc:	d377      	bcc.n	80067be <__aeabi_ddiv+0x456>
 80066ce:	d073      	beq.n	80067b8 <__aeabi_ddiv+0x450>
 80066d0:	1a0c      	subs	r4, r1, r0
 80066d2:	4aa2      	ldr	r2, [pc, #648]	; (800695c <__aeabi_ddiv+0x5f4>)
 80066d4:	1b7d      	subs	r5, r7, r5
 80066d6:	42af      	cmp	r7, r5
 80066d8:	41bf      	sbcs	r7, r7
 80066da:	4694      	mov	ip, r2
 80066dc:	9b00      	ldr	r3, [sp, #0]
 80066de:	427f      	negs	r7, r7
 80066e0:	4463      	add	r3, ip
 80066e2:	1be0      	subs	r0, r4, r7
 80066e4:	001c      	movs	r4, r3
 80066e6:	4286      	cmp	r6, r0
 80066e8:	d100      	bne.n	80066ec <__aeabi_ddiv+0x384>
 80066ea:	e0db      	b.n	80068a4 <__aeabi_ddiv+0x53c>
 80066ec:	9901      	ldr	r1, [sp, #4]
 80066ee:	f7fe fda7 	bl	8005240 <__aeabi_uidivmod>
 80066f2:	464a      	mov	r2, r9
 80066f4:	4342      	muls	r2, r0
 80066f6:	040b      	lsls	r3, r1, #16
 80066f8:	0c29      	lsrs	r1, r5, #16
 80066fa:	0007      	movs	r7, r0
 80066fc:	4319      	orrs	r1, r3
 80066fe:	428a      	cmp	r2, r1
 8006700:	d907      	bls.n	8006712 <__aeabi_ddiv+0x3aa>
 8006702:	1989      	adds	r1, r1, r6
 8006704:	3f01      	subs	r7, #1
 8006706:	428e      	cmp	r6, r1
 8006708:	d803      	bhi.n	8006712 <__aeabi_ddiv+0x3aa>
 800670a:	428a      	cmp	r2, r1
 800670c:	d901      	bls.n	8006712 <__aeabi_ddiv+0x3aa>
 800670e:	1e87      	subs	r7, r0, #2
 8006710:	1989      	adds	r1, r1, r6
 8006712:	1a88      	subs	r0, r1, r2
 8006714:	9901      	ldr	r1, [sp, #4]
 8006716:	f7fe fd93 	bl	8005240 <__aeabi_uidivmod>
 800671a:	0409      	lsls	r1, r1, #16
 800671c:	464a      	mov	r2, r9
 800671e:	4689      	mov	r9, r1
 8006720:	0429      	lsls	r1, r5, #16
 8006722:	464d      	mov	r5, r9
 8006724:	4342      	muls	r2, r0
 8006726:	0c09      	lsrs	r1, r1, #16
 8006728:	0003      	movs	r3, r0
 800672a:	4329      	orrs	r1, r5
 800672c:	428a      	cmp	r2, r1
 800672e:	d907      	bls.n	8006740 <__aeabi_ddiv+0x3d8>
 8006730:	1989      	adds	r1, r1, r6
 8006732:	3b01      	subs	r3, #1
 8006734:	428e      	cmp	r6, r1
 8006736:	d803      	bhi.n	8006740 <__aeabi_ddiv+0x3d8>
 8006738:	428a      	cmp	r2, r1
 800673a:	d901      	bls.n	8006740 <__aeabi_ddiv+0x3d8>
 800673c:	1e83      	subs	r3, r0, #2
 800673e:	1989      	adds	r1, r1, r6
 8006740:	043f      	lsls	r7, r7, #16
 8006742:	1a89      	subs	r1, r1, r2
 8006744:	003a      	movs	r2, r7
 8006746:	9f03      	ldr	r7, [sp, #12]
 8006748:	431a      	orrs	r2, r3
 800674a:	0038      	movs	r0, r7
 800674c:	0413      	lsls	r3, r2, #16
 800674e:	0c1b      	lsrs	r3, r3, #16
 8006750:	4358      	muls	r0, r3
 8006752:	4681      	mov	r9, r0
 8006754:	9802      	ldr	r0, [sp, #8]
 8006756:	0c15      	lsrs	r5, r2, #16
 8006758:	436f      	muls	r7, r5
 800675a:	4343      	muls	r3, r0
 800675c:	4345      	muls	r5, r0
 800675e:	4648      	mov	r0, r9
 8006760:	0c00      	lsrs	r0, r0, #16
 8006762:	4684      	mov	ip, r0
 8006764:	19db      	adds	r3, r3, r7
 8006766:	4463      	add	r3, ip
 8006768:	429f      	cmp	r7, r3
 800676a:	d903      	bls.n	8006774 <__aeabi_ddiv+0x40c>
 800676c:	2080      	movs	r0, #128	; 0x80
 800676e:	0240      	lsls	r0, r0, #9
 8006770:	4684      	mov	ip, r0
 8006772:	4465      	add	r5, ip
 8006774:	4648      	mov	r0, r9
 8006776:	0c1f      	lsrs	r7, r3, #16
 8006778:	0400      	lsls	r0, r0, #16
 800677a:	041b      	lsls	r3, r3, #16
 800677c:	0c00      	lsrs	r0, r0, #16
 800677e:	197d      	adds	r5, r7, r5
 8006780:	1818      	adds	r0, r3, r0
 8006782:	42a9      	cmp	r1, r5
 8006784:	d200      	bcs.n	8006788 <__aeabi_ddiv+0x420>
 8006786:	e084      	b.n	8006892 <__aeabi_ddiv+0x52a>
 8006788:	d100      	bne.n	800678c <__aeabi_ddiv+0x424>
 800678a:	e07f      	b.n	800688c <__aeabi_ddiv+0x524>
 800678c:	2301      	movs	r3, #1
 800678e:	431a      	orrs	r2, r3
 8006790:	e657      	b.n	8006442 <__aeabi_ddiv+0xda>
 8006792:	2380      	movs	r3, #128	; 0x80
 8006794:	464a      	mov	r2, r9
 8006796:	031b      	lsls	r3, r3, #12
 8006798:	4313      	orrs	r3, r2
 800679a:	031b      	lsls	r3, r3, #12
 800679c:	0b1b      	lsrs	r3, r3, #12
 800679e:	46aa      	mov	sl, r5
 80067a0:	4a6f      	ldr	r2, [pc, #444]	; (8006960 <__aeabi_ddiv+0x5f8>)
 80067a2:	e66f      	b.n	8006484 <__aeabi_ddiv+0x11c>
 80067a4:	42ba      	cmp	r2, r7
 80067a6:	d900      	bls.n	80067aa <__aeabi_ddiv+0x442>
 80067a8:	e735      	b.n	8006616 <__aeabi_ddiv+0x2ae>
 80067aa:	464b      	mov	r3, r9
 80067ac:	07dc      	lsls	r4, r3, #31
 80067ae:	0858      	lsrs	r0, r3, #1
 80067b0:	087b      	lsrs	r3, r7, #1
 80067b2:	431c      	orrs	r4, r3
 80067b4:	07ff      	lsls	r7, r7, #31
 80067b6:	e734      	b.n	8006622 <__aeabi_ddiv+0x2ba>
 80067b8:	2400      	movs	r4, #0
 80067ba:	42af      	cmp	r7, r5
 80067bc:	d289      	bcs.n	80066d2 <__aeabi_ddiv+0x36a>
 80067be:	4447      	add	r7, r8
 80067c0:	4547      	cmp	r7, r8
 80067c2:	41a4      	sbcs	r4, r4
 80067c4:	465b      	mov	r3, fp
 80067c6:	4264      	negs	r4, r4
 80067c8:	19a4      	adds	r4, r4, r6
 80067ca:	1864      	adds	r4, r4, r1
 80067cc:	3b01      	subs	r3, #1
 80067ce:	42a6      	cmp	r6, r4
 80067d0:	d21e      	bcs.n	8006810 <__aeabi_ddiv+0x4a8>
 80067d2:	42a0      	cmp	r0, r4
 80067d4:	d86d      	bhi.n	80068b2 <__aeabi_ddiv+0x54a>
 80067d6:	d100      	bne.n	80067da <__aeabi_ddiv+0x472>
 80067d8:	e0b6      	b.n	8006948 <__aeabi_ddiv+0x5e0>
 80067da:	1a24      	subs	r4, r4, r0
 80067dc:	469b      	mov	fp, r3
 80067de:	e778      	b.n	80066d2 <__aeabi_ddiv+0x36a>
 80067e0:	0003      	movs	r3, r0
 80067e2:	465a      	mov	r2, fp
 80067e4:	3b28      	subs	r3, #40	; 0x28
 80067e6:	409a      	lsls	r2, r3
 80067e8:	2700      	movs	r7, #0
 80067ea:	4691      	mov	r9, r2
 80067ec:	e688      	b.n	8006500 <__aeabi_ddiv+0x198>
 80067ee:	4658      	mov	r0, fp
 80067f0:	f001 f912 	bl	8007a18 <__clzsi2>
 80067f4:	3020      	adds	r0, #32
 80067f6:	e672      	b.n	80064de <__aeabi_ddiv+0x176>
 80067f8:	0003      	movs	r3, r0
 80067fa:	4652      	mov	r2, sl
 80067fc:	3b28      	subs	r3, #40	; 0x28
 80067fe:	409a      	lsls	r2, r3
 8006800:	4693      	mov	fp, r2
 8006802:	2200      	movs	r2, #0
 8006804:	e6b4      	b.n	8006570 <__aeabi_ddiv+0x208>
 8006806:	4650      	mov	r0, sl
 8006808:	f001 f906 	bl	8007a18 <__clzsi2>
 800680c:	3020      	adds	r0, #32
 800680e:	e69a      	b.n	8006546 <__aeabi_ddiv+0x1de>
 8006810:	42a6      	cmp	r6, r4
 8006812:	d1e2      	bne.n	80067da <__aeabi_ddiv+0x472>
 8006814:	45b8      	cmp	r8, r7
 8006816:	d9dc      	bls.n	80067d2 <__aeabi_ddiv+0x46a>
 8006818:	1a34      	subs	r4, r6, r0
 800681a:	469b      	mov	fp, r3
 800681c:	e759      	b.n	80066d2 <__aeabi_ddiv+0x36a>
 800681e:	2b1f      	cmp	r3, #31
 8006820:	dc65      	bgt.n	80068ee <__aeabi_ddiv+0x586>
 8006822:	4c50      	ldr	r4, [pc, #320]	; (8006964 <__aeabi_ddiv+0x5fc>)
 8006824:	9900      	ldr	r1, [sp, #0]
 8006826:	46a4      	mov	ip, r4
 8006828:	465c      	mov	r4, fp
 800682a:	4461      	add	r1, ip
 800682c:	0008      	movs	r0, r1
 800682e:	408c      	lsls	r4, r1
 8006830:	0011      	movs	r1, r2
 8006832:	4082      	lsls	r2, r0
 8006834:	40d9      	lsrs	r1, r3
 8006836:	1e50      	subs	r0, r2, #1
 8006838:	4182      	sbcs	r2, r0
 800683a:	430c      	orrs	r4, r1
 800683c:	4314      	orrs	r4, r2
 800683e:	465a      	mov	r2, fp
 8006840:	40da      	lsrs	r2, r3
 8006842:	0013      	movs	r3, r2
 8006844:	0762      	lsls	r2, r4, #29
 8006846:	d009      	beq.n	800685c <__aeabi_ddiv+0x4f4>
 8006848:	220f      	movs	r2, #15
 800684a:	4022      	ands	r2, r4
 800684c:	2a04      	cmp	r2, #4
 800684e:	d005      	beq.n	800685c <__aeabi_ddiv+0x4f4>
 8006850:	0022      	movs	r2, r4
 8006852:	1d14      	adds	r4, r2, #4
 8006854:	4294      	cmp	r4, r2
 8006856:	4189      	sbcs	r1, r1
 8006858:	4249      	negs	r1, r1
 800685a:	185b      	adds	r3, r3, r1
 800685c:	021a      	lsls	r2, r3, #8
 800685e:	d562      	bpl.n	8006926 <__aeabi_ddiv+0x5be>
 8006860:	2201      	movs	r2, #1
 8006862:	2300      	movs	r3, #0
 8006864:	2700      	movs	r7, #0
 8006866:	e60d      	b.n	8006484 <__aeabi_ddiv+0x11c>
 8006868:	428a      	cmp	r2, r1
 800686a:	d800      	bhi.n	800686e <__aeabi_ddiv+0x506>
 800686c:	e70a      	b.n	8006684 <__aeabi_ddiv+0x31c>
 800686e:	1e83      	subs	r3, r0, #2
 8006870:	1989      	adds	r1, r1, r6
 8006872:	e707      	b.n	8006684 <__aeabi_ddiv+0x31c>
 8006874:	230f      	movs	r3, #15
 8006876:	4013      	ands	r3, r2
 8006878:	2b04      	cmp	r3, #4
 800687a:	d100      	bne.n	800687e <__aeabi_ddiv+0x516>
 800687c:	e5e6      	b.n	800644c <__aeabi_ddiv+0xe4>
 800687e:	1d17      	adds	r7, r2, #4
 8006880:	4297      	cmp	r7, r2
 8006882:	4192      	sbcs	r2, r2
 8006884:	4253      	negs	r3, r2
 8006886:	449b      	add	fp, r3
 8006888:	08fa      	lsrs	r2, r7, #3
 800688a:	e5e0      	b.n	800644e <__aeabi_ddiv+0xe6>
 800688c:	2800      	cmp	r0, #0
 800688e:	d100      	bne.n	8006892 <__aeabi_ddiv+0x52a>
 8006890:	e5d7      	b.n	8006442 <__aeabi_ddiv+0xda>
 8006892:	1871      	adds	r1, r6, r1
 8006894:	1e53      	subs	r3, r2, #1
 8006896:	42b1      	cmp	r1, r6
 8006898:	d327      	bcc.n	80068ea <__aeabi_ddiv+0x582>
 800689a:	42a9      	cmp	r1, r5
 800689c:	d315      	bcc.n	80068ca <__aeabi_ddiv+0x562>
 800689e:	d058      	beq.n	8006952 <__aeabi_ddiv+0x5ea>
 80068a0:	001a      	movs	r2, r3
 80068a2:	e773      	b.n	800678c <__aeabi_ddiv+0x424>
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	dc00      	bgt.n	80068aa <__aeabi_ddiv+0x542>
 80068a8:	e604      	b.n	80064b4 <__aeabi_ddiv+0x14c>
 80068aa:	2301      	movs	r3, #1
 80068ac:	2200      	movs	r2, #0
 80068ae:	449b      	add	fp, r3
 80068b0:	e5cd      	b.n	800644e <__aeabi_ddiv+0xe6>
 80068b2:	2302      	movs	r3, #2
 80068b4:	4447      	add	r7, r8
 80068b6:	4547      	cmp	r7, r8
 80068b8:	4189      	sbcs	r1, r1
 80068ba:	425b      	negs	r3, r3
 80068bc:	469c      	mov	ip, r3
 80068be:	4249      	negs	r1, r1
 80068c0:	1989      	adds	r1, r1, r6
 80068c2:	190c      	adds	r4, r1, r4
 80068c4:	44e3      	add	fp, ip
 80068c6:	1a24      	subs	r4, r4, r0
 80068c8:	e703      	b.n	80066d2 <__aeabi_ddiv+0x36a>
 80068ca:	4643      	mov	r3, r8
 80068cc:	005f      	lsls	r7, r3, #1
 80068ce:	4547      	cmp	r7, r8
 80068d0:	419b      	sbcs	r3, r3
 80068d2:	46b8      	mov	r8, r7
 80068d4:	425b      	negs	r3, r3
 80068d6:	199e      	adds	r6, r3, r6
 80068d8:	3a02      	subs	r2, #2
 80068da:	1989      	adds	r1, r1, r6
 80068dc:	42a9      	cmp	r1, r5
 80068de:	d000      	beq.n	80068e2 <__aeabi_ddiv+0x57a>
 80068e0:	e754      	b.n	800678c <__aeabi_ddiv+0x424>
 80068e2:	4540      	cmp	r0, r8
 80068e4:	d000      	beq.n	80068e8 <__aeabi_ddiv+0x580>
 80068e6:	e751      	b.n	800678c <__aeabi_ddiv+0x424>
 80068e8:	e5ab      	b.n	8006442 <__aeabi_ddiv+0xda>
 80068ea:	001a      	movs	r2, r3
 80068ec:	e7f6      	b.n	80068dc <__aeabi_ddiv+0x574>
 80068ee:	211f      	movs	r1, #31
 80068f0:	465f      	mov	r7, fp
 80068f2:	4249      	negs	r1, r1
 80068f4:	1b0c      	subs	r4, r1, r4
 80068f6:	40e7      	lsrs	r7, r4
 80068f8:	2b20      	cmp	r3, #32
 80068fa:	d007      	beq.n	800690c <__aeabi_ddiv+0x5a4>
 80068fc:	491a      	ldr	r1, [pc, #104]	; (8006968 <__aeabi_ddiv+0x600>)
 80068fe:	9b00      	ldr	r3, [sp, #0]
 8006900:	468c      	mov	ip, r1
 8006902:	4463      	add	r3, ip
 8006904:	0018      	movs	r0, r3
 8006906:	465b      	mov	r3, fp
 8006908:	4083      	lsls	r3, r0
 800690a:	431a      	orrs	r2, r3
 800690c:	1e50      	subs	r0, r2, #1
 800690e:	4182      	sbcs	r2, r0
 8006910:	433a      	orrs	r2, r7
 8006912:	2707      	movs	r7, #7
 8006914:	2300      	movs	r3, #0
 8006916:	4017      	ands	r7, r2
 8006918:	d009      	beq.n	800692e <__aeabi_ddiv+0x5c6>
 800691a:	210f      	movs	r1, #15
 800691c:	2300      	movs	r3, #0
 800691e:	4011      	ands	r1, r2
 8006920:	0014      	movs	r4, r2
 8006922:	2904      	cmp	r1, #4
 8006924:	d195      	bne.n	8006852 <__aeabi_ddiv+0x4ea>
 8006926:	0022      	movs	r2, r4
 8006928:	075f      	lsls	r7, r3, #29
 800692a:	025b      	lsls	r3, r3, #9
 800692c:	0b1b      	lsrs	r3, r3, #12
 800692e:	08d2      	lsrs	r2, r2, #3
 8006930:	4317      	orrs	r7, r2
 8006932:	2200      	movs	r2, #0
 8006934:	e5a6      	b.n	8006484 <__aeabi_ddiv+0x11c>
 8006936:	2380      	movs	r3, #128	; 0x80
 8006938:	4659      	mov	r1, fp
 800693a:	031b      	lsls	r3, r3, #12
 800693c:	430b      	orrs	r3, r1
 800693e:	031b      	lsls	r3, r3, #12
 8006940:	0017      	movs	r7, r2
 8006942:	0b1b      	lsrs	r3, r3, #12
 8006944:	4a06      	ldr	r2, [pc, #24]	; (8006960 <__aeabi_ddiv+0x5f8>)
 8006946:	e59d      	b.n	8006484 <__aeabi_ddiv+0x11c>
 8006948:	42bd      	cmp	r5, r7
 800694a:	d8b2      	bhi.n	80068b2 <__aeabi_ddiv+0x54a>
 800694c:	469b      	mov	fp, r3
 800694e:	2400      	movs	r4, #0
 8006950:	e6bf      	b.n	80066d2 <__aeabi_ddiv+0x36a>
 8006952:	4580      	cmp	r8, r0
 8006954:	d3b9      	bcc.n	80068ca <__aeabi_ddiv+0x562>
 8006956:	001a      	movs	r2, r3
 8006958:	e7c3      	b.n	80068e2 <__aeabi_ddiv+0x57a>
 800695a:	46c0      	nop			; (mov r8, r8)
 800695c:	000003ff 	.word	0x000003ff
 8006960:	000007ff 	.word	0x000007ff
 8006964:	0000041e 	.word	0x0000041e
 8006968:	0000043e 	.word	0x0000043e

0800696c <__eqdf2>:
 800696c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800696e:	464f      	mov	r7, r9
 8006970:	4646      	mov	r6, r8
 8006972:	46d6      	mov	lr, sl
 8006974:	4684      	mov	ip, r0
 8006976:	b5c0      	push	{r6, r7, lr}
 8006978:	4680      	mov	r8, r0
 800697a:	4e19      	ldr	r6, [pc, #100]	; (80069e0 <__eqdf2+0x74>)
 800697c:	0318      	lsls	r0, r3, #12
 800697e:	030f      	lsls	r7, r1, #12
 8006980:	004d      	lsls	r5, r1, #1
 8006982:	0b00      	lsrs	r0, r0, #12
 8006984:	005c      	lsls	r4, r3, #1
 8006986:	4682      	mov	sl, r0
 8006988:	0b3f      	lsrs	r7, r7, #12
 800698a:	0d6d      	lsrs	r5, r5, #21
 800698c:	0fc9      	lsrs	r1, r1, #31
 800698e:	4691      	mov	r9, r2
 8006990:	0d64      	lsrs	r4, r4, #21
 8006992:	0fdb      	lsrs	r3, r3, #31
 8006994:	2001      	movs	r0, #1
 8006996:	42b5      	cmp	r5, r6
 8006998:	d00a      	beq.n	80069b0 <__eqdf2+0x44>
 800699a:	42b4      	cmp	r4, r6
 800699c:	d003      	beq.n	80069a6 <__eqdf2+0x3a>
 800699e:	42a5      	cmp	r5, r4
 80069a0:	d101      	bne.n	80069a6 <__eqdf2+0x3a>
 80069a2:	4557      	cmp	r7, sl
 80069a4:	d00c      	beq.n	80069c0 <__eqdf2+0x54>
 80069a6:	bc1c      	pop	{r2, r3, r4}
 80069a8:	4690      	mov	r8, r2
 80069aa:	4699      	mov	r9, r3
 80069ac:	46a2      	mov	sl, r4
 80069ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069b0:	4666      	mov	r6, ip
 80069b2:	433e      	orrs	r6, r7
 80069b4:	d1f7      	bne.n	80069a6 <__eqdf2+0x3a>
 80069b6:	42ac      	cmp	r4, r5
 80069b8:	d1f5      	bne.n	80069a6 <__eqdf2+0x3a>
 80069ba:	4654      	mov	r4, sl
 80069bc:	4314      	orrs	r4, r2
 80069be:	d1f2      	bne.n	80069a6 <__eqdf2+0x3a>
 80069c0:	2001      	movs	r0, #1
 80069c2:	45c8      	cmp	r8, r9
 80069c4:	d1ef      	bne.n	80069a6 <__eqdf2+0x3a>
 80069c6:	4299      	cmp	r1, r3
 80069c8:	d007      	beq.n	80069da <__eqdf2+0x6e>
 80069ca:	2d00      	cmp	r5, #0
 80069cc:	d1eb      	bne.n	80069a6 <__eqdf2+0x3a>
 80069ce:	4663      	mov	r3, ip
 80069d0:	431f      	orrs	r7, r3
 80069d2:	0038      	movs	r0, r7
 80069d4:	1e47      	subs	r7, r0, #1
 80069d6:	41b8      	sbcs	r0, r7
 80069d8:	e7e5      	b.n	80069a6 <__eqdf2+0x3a>
 80069da:	2000      	movs	r0, #0
 80069dc:	e7e3      	b.n	80069a6 <__eqdf2+0x3a>
 80069de:	46c0      	nop			; (mov r8, r8)
 80069e0:	000007ff 	.word	0x000007ff

080069e4 <__gedf2>:
 80069e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069e6:	464f      	mov	r7, r9
 80069e8:	4646      	mov	r6, r8
 80069ea:	46d6      	mov	lr, sl
 80069ec:	004d      	lsls	r5, r1, #1
 80069ee:	b5c0      	push	{r6, r7, lr}
 80069f0:	030e      	lsls	r6, r1, #12
 80069f2:	0fc9      	lsrs	r1, r1, #31
 80069f4:	468a      	mov	sl, r1
 80069f6:	492c      	ldr	r1, [pc, #176]	; (8006aa8 <__gedf2+0xc4>)
 80069f8:	031f      	lsls	r7, r3, #12
 80069fa:	005c      	lsls	r4, r3, #1
 80069fc:	4680      	mov	r8, r0
 80069fe:	0b36      	lsrs	r6, r6, #12
 8006a00:	0d6d      	lsrs	r5, r5, #21
 8006a02:	4691      	mov	r9, r2
 8006a04:	0b3f      	lsrs	r7, r7, #12
 8006a06:	0d64      	lsrs	r4, r4, #21
 8006a08:	0fdb      	lsrs	r3, r3, #31
 8006a0a:	428d      	cmp	r5, r1
 8006a0c:	d01e      	beq.n	8006a4c <__gedf2+0x68>
 8006a0e:	428c      	cmp	r4, r1
 8006a10:	d016      	beq.n	8006a40 <__gedf2+0x5c>
 8006a12:	2d00      	cmp	r5, #0
 8006a14:	d11e      	bne.n	8006a54 <__gedf2+0x70>
 8006a16:	4330      	orrs	r0, r6
 8006a18:	4684      	mov	ip, r0
 8006a1a:	2c00      	cmp	r4, #0
 8006a1c:	d101      	bne.n	8006a22 <__gedf2+0x3e>
 8006a1e:	433a      	orrs	r2, r7
 8006a20:	d023      	beq.n	8006a6a <__gedf2+0x86>
 8006a22:	4662      	mov	r2, ip
 8006a24:	2a00      	cmp	r2, #0
 8006a26:	d01a      	beq.n	8006a5e <__gedf2+0x7a>
 8006a28:	459a      	cmp	sl, r3
 8006a2a:	d029      	beq.n	8006a80 <__gedf2+0x9c>
 8006a2c:	4651      	mov	r1, sl
 8006a2e:	2002      	movs	r0, #2
 8006a30:	3901      	subs	r1, #1
 8006a32:	4008      	ands	r0, r1
 8006a34:	3801      	subs	r0, #1
 8006a36:	bc1c      	pop	{r2, r3, r4}
 8006a38:	4690      	mov	r8, r2
 8006a3a:	4699      	mov	r9, r3
 8006a3c:	46a2      	mov	sl, r4
 8006a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a40:	0039      	movs	r1, r7
 8006a42:	4311      	orrs	r1, r2
 8006a44:	d0e5      	beq.n	8006a12 <__gedf2+0x2e>
 8006a46:	2002      	movs	r0, #2
 8006a48:	4240      	negs	r0, r0
 8006a4a:	e7f4      	b.n	8006a36 <__gedf2+0x52>
 8006a4c:	4330      	orrs	r0, r6
 8006a4e:	d1fa      	bne.n	8006a46 <__gedf2+0x62>
 8006a50:	42ac      	cmp	r4, r5
 8006a52:	d00f      	beq.n	8006a74 <__gedf2+0x90>
 8006a54:	2c00      	cmp	r4, #0
 8006a56:	d10f      	bne.n	8006a78 <__gedf2+0x94>
 8006a58:	433a      	orrs	r2, r7
 8006a5a:	d0e7      	beq.n	8006a2c <__gedf2+0x48>
 8006a5c:	e00c      	b.n	8006a78 <__gedf2+0x94>
 8006a5e:	2201      	movs	r2, #1
 8006a60:	3b01      	subs	r3, #1
 8006a62:	4393      	bics	r3, r2
 8006a64:	0018      	movs	r0, r3
 8006a66:	3001      	adds	r0, #1
 8006a68:	e7e5      	b.n	8006a36 <__gedf2+0x52>
 8006a6a:	4663      	mov	r3, ip
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d0e1      	beq.n	8006a36 <__gedf2+0x52>
 8006a72:	e7db      	b.n	8006a2c <__gedf2+0x48>
 8006a74:	433a      	orrs	r2, r7
 8006a76:	d1e6      	bne.n	8006a46 <__gedf2+0x62>
 8006a78:	459a      	cmp	sl, r3
 8006a7a:	d1d7      	bne.n	8006a2c <__gedf2+0x48>
 8006a7c:	42a5      	cmp	r5, r4
 8006a7e:	dcd5      	bgt.n	8006a2c <__gedf2+0x48>
 8006a80:	42a5      	cmp	r5, r4
 8006a82:	db05      	blt.n	8006a90 <__gedf2+0xac>
 8006a84:	42be      	cmp	r6, r7
 8006a86:	d8d1      	bhi.n	8006a2c <__gedf2+0x48>
 8006a88:	d008      	beq.n	8006a9c <__gedf2+0xb8>
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	42be      	cmp	r6, r7
 8006a8e:	d2d2      	bcs.n	8006a36 <__gedf2+0x52>
 8006a90:	4650      	mov	r0, sl
 8006a92:	2301      	movs	r3, #1
 8006a94:	3801      	subs	r0, #1
 8006a96:	4398      	bics	r0, r3
 8006a98:	3001      	adds	r0, #1
 8006a9a:	e7cc      	b.n	8006a36 <__gedf2+0x52>
 8006a9c:	45c8      	cmp	r8, r9
 8006a9e:	d8c5      	bhi.n	8006a2c <__gedf2+0x48>
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	45c8      	cmp	r8, r9
 8006aa4:	d3f4      	bcc.n	8006a90 <__gedf2+0xac>
 8006aa6:	e7c6      	b.n	8006a36 <__gedf2+0x52>
 8006aa8:	000007ff 	.word	0x000007ff

08006aac <__ledf2>:
 8006aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006aae:	464f      	mov	r7, r9
 8006ab0:	4646      	mov	r6, r8
 8006ab2:	46d6      	mov	lr, sl
 8006ab4:	004d      	lsls	r5, r1, #1
 8006ab6:	b5c0      	push	{r6, r7, lr}
 8006ab8:	030e      	lsls	r6, r1, #12
 8006aba:	0fc9      	lsrs	r1, r1, #31
 8006abc:	468a      	mov	sl, r1
 8006abe:	492e      	ldr	r1, [pc, #184]	; (8006b78 <__ledf2+0xcc>)
 8006ac0:	031f      	lsls	r7, r3, #12
 8006ac2:	005c      	lsls	r4, r3, #1
 8006ac4:	4680      	mov	r8, r0
 8006ac6:	0b36      	lsrs	r6, r6, #12
 8006ac8:	0d6d      	lsrs	r5, r5, #21
 8006aca:	4691      	mov	r9, r2
 8006acc:	0b3f      	lsrs	r7, r7, #12
 8006ace:	0d64      	lsrs	r4, r4, #21
 8006ad0:	0fdb      	lsrs	r3, r3, #31
 8006ad2:	428d      	cmp	r5, r1
 8006ad4:	d018      	beq.n	8006b08 <__ledf2+0x5c>
 8006ad6:	428c      	cmp	r4, r1
 8006ad8:	d011      	beq.n	8006afe <__ledf2+0x52>
 8006ada:	2d00      	cmp	r5, #0
 8006adc:	d118      	bne.n	8006b10 <__ledf2+0x64>
 8006ade:	4330      	orrs	r0, r6
 8006ae0:	4684      	mov	ip, r0
 8006ae2:	2c00      	cmp	r4, #0
 8006ae4:	d11e      	bne.n	8006b24 <__ledf2+0x78>
 8006ae6:	433a      	orrs	r2, r7
 8006ae8:	d11c      	bne.n	8006b24 <__ledf2+0x78>
 8006aea:	4663      	mov	r3, ip
 8006aec:	2000      	movs	r0, #0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d030      	beq.n	8006b54 <__ledf2+0xa8>
 8006af2:	4651      	mov	r1, sl
 8006af4:	2002      	movs	r0, #2
 8006af6:	3901      	subs	r1, #1
 8006af8:	4008      	ands	r0, r1
 8006afa:	3801      	subs	r0, #1
 8006afc:	e02a      	b.n	8006b54 <__ledf2+0xa8>
 8006afe:	0039      	movs	r1, r7
 8006b00:	4311      	orrs	r1, r2
 8006b02:	d0ea      	beq.n	8006ada <__ledf2+0x2e>
 8006b04:	2002      	movs	r0, #2
 8006b06:	e025      	b.n	8006b54 <__ledf2+0xa8>
 8006b08:	4330      	orrs	r0, r6
 8006b0a:	d1fb      	bne.n	8006b04 <__ledf2+0x58>
 8006b0c:	42ac      	cmp	r4, r5
 8006b0e:	d026      	beq.n	8006b5e <__ledf2+0xb2>
 8006b10:	2c00      	cmp	r4, #0
 8006b12:	d126      	bne.n	8006b62 <__ledf2+0xb6>
 8006b14:	433a      	orrs	r2, r7
 8006b16:	d124      	bne.n	8006b62 <__ledf2+0xb6>
 8006b18:	4651      	mov	r1, sl
 8006b1a:	2002      	movs	r0, #2
 8006b1c:	3901      	subs	r1, #1
 8006b1e:	4008      	ands	r0, r1
 8006b20:	3801      	subs	r0, #1
 8006b22:	e017      	b.n	8006b54 <__ledf2+0xa8>
 8006b24:	4662      	mov	r2, ip
 8006b26:	2a00      	cmp	r2, #0
 8006b28:	d00f      	beq.n	8006b4a <__ledf2+0x9e>
 8006b2a:	459a      	cmp	sl, r3
 8006b2c:	d1e1      	bne.n	8006af2 <__ledf2+0x46>
 8006b2e:	42a5      	cmp	r5, r4
 8006b30:	db05      	blt.n	8006b3e <__ledf2+0x92>
 8006b32:	42be      	cmp	r6, r7
 8006b34:	d8dd      	bhi.n	8006af2 <__ledf2+0x46>
 8006b36:	d019      	beq.n	8006b6c <__ledf2+0xc0>
 8006b38:	2000      	movs	r0, #0
 8006b3a:	42be      	cmp	r6, r7
 8006b3c:	d20a      	bcs.n	8006b54 <__ledf2+0xa8>
 8006b3e:	4650      	mov	r0, sl
 8006b40:	2301      	movs	r3, #1
 8006b42:	3801      	subs	r0, #1
 8006b44:	4398      	bics	r0, r3
 8006b46:	3001      	adds	r0, #1
 8006b48:	e004      	b.n	8006b54 <__ledf2+0xa8>
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	4393      	bics	r3, r2
 8006b50:	0018      	movs	r0, r3
 8006b52:	3001      	adds	r0, #1
 8006b54:	bc1c      	pop	{r2, r3, r4}
 8006b56:	4690      	mov	r8, r2
 8006b58:	4699      	mov	r9, r3
 8006b5a:	46a2      	mov	sl, r4
 8006b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b5e:	433a      	orrs	r2, r7
 8006b60:	d1d0      	bne.n	8006b04 <__ledf2+0x58>
 8006b62:	459a      	cmp	sl, r3
 8006b64:	d1c5      	bne.n	8006af2 <__ledf2+0x46>
 8006b66:	42a5      	cmp	r5, r4
 8006b68:	dcc3      	bgt.n	8006af2 <__ledf2+0x46>
 8006b6a:	e7e0      	b.n	8006b2e <__ledf2+0x82>
 8006b6c:	45c8      	cmp	r8, r9
 8006b6e:	d8c0      	bhi.n	8006af2 <__ledf2+0x46>
 8006b70:	2000      	movs	r0, #0
 8006b72:	45c8      	cmp	r8, r9
 8006b74:	d3e3      	bcc.n	8006b3e <__ledf2+0x92>
 8006b76:	e7ed      	b.n	8006b54 <__ledf2+0xa8>
 8006b78:	000007ff 	.word	0x000007ff

08006b7c <__aeabi_dmul>:
 8006b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b7e:	4657      	mov	r7, sl
 8006b80:	46de      	mov	lr, fp
 8006b82:	464e      	mov	r6, r9
 8006b84:	4645      	mov	r5, r8
 8006b86:	b5e0      	push	{r5, r6, r7, lr}
 8006b88:	4683      	mov	fp, r0
 8006b8a:	0006      	movs	r6, r0
 8006b8c:	030f      	lsls	r7, r1, #12
 8006b8e:	0048      	lsls	r0, r1, #1
 8006b90:	b087      	sub	sp, #28
 8006b92:	4692      	mov	sl, r2
 8006b94:	001d      	movs	r5, r3
 8006b96:	0b3f      	lsrs	r7, r7, #12
 8006b98:	0d40      	lsrs	r0, r0, #21
 8006b9a:	0fcc      	lsrs	r4, r1, #31
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	d100      	bne.n	8006ba2 <__aeabi_dmul+0x26>
 8006ba0:	e06f      	b.n	8006c82 <__aeabi_dmul+0x106>
 8006ba2:	4bde      	ldr	r3, [pc, #888]	; (8006f1c <__aeabi_dmul+0x3a0>)
 8006ba4:	4298      	cmp	r0, r3
 8006ba6:	d038      	beq.n	8006c1a <__aeabi_dmul+0x9e>
 8006ba8:	2380      	movs	r3, #128	; 0x80
 8006baa:	00ff      	lsls	r7, r7, #3
 8006bac:	041b      	lsls	r3, r3, #16
 8006bae:	431f      	orrs	r7, r3
 8006bb0:	0f73      	lsrs	r3, r6, #29
 8006bb2:	433b      	orrs	r3, r7
 8006bb4:	9301      	str	r3, [sp, #4]
 8006bb6:	4bda      	ldr	r3, [pc, #872]	; (8006f20 <__aeabi_dmul+0x3a4>)
 8006bb8:	2700      	movs	r7, #0
 8006bba:	4699      	mov	r9, r3
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	469b      	mov	fp, r3
 8006bc0:	00f6      	lsls	r6, r6, #3
 8006bc2:	4481      	add	r9, r0
 8006bc4:	032b      	lsls	r3, r5, #12
 8006bc6:	0069      	lsls	r1, r5, #1
 8006bc8:	0b1b      	lsrs	r3, r3, #12
 8006bca:	4652      	mov	r2, sl
 8006bcc:	4698      	mov	r8, r3
 8006bce:	0d49      	lsrs	r1, r1, #21
 8006bd0:	0fed      	lsrs	r5, r5, #31
 8006bd2:	2900      	cmp	r1, #0
 8006bd4:	d100      	bne.n	8006bd8 <__aeabi_dmul+0x5c>
 8006bd6:	e085      	b.n	8006ce4 <__aeabi_dmul+0x168>
 8006bd8:	4bd0      	ldr	r3, [pc, #832]	; (8006f1c <__aeabi_dmul+0x3a0>)
 8006bda:	4299      	cmp	r1, r3
 8006bdc:	d100      	bne.n	8006be0 <__aeabi_dmul+0x64>
 8006bde:	e073      	b.n	8006cc8 <__aeabi_dmul+0x14c>
 8006be0:	4643      	mov	r3, r8
 8006be2:	00da      	lsls	r2, r3, #3
 8006be4:	2380      	movs	r3, #128	; 0x80
 8006be6:	041b      	lsls	r3, r3, #16
 8006be8:	4313      	orrs	r3, r2
 8006bea:	4652      	mov	r2, sl
 8006bec:	48cc      	ldr	r0, [pc, #816]	; (8006f20 <__aeabi_dmul+0x3a4>)
 8006bee:	0f52      	lsrs	r2, r2, #29
 8006bf0:	4684      	mov	ip, r0
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	4652      	mov	r2, sl
 8006bf6:	2000      	movs	r0, #0
 8006bf8:	4461      	add	r1, ip
 8006bfa:	00d2      	lsls	r2, r2, #3
 8006bfc:	4489      	add	r9, r1
 8006bfe:	0021      	movs	r1, r4
 8006c00:	4069      	eors	r1, r5
 8006c02:	9100      	str	r1, [sp, #0]
 8006c04:	468c      	mov	ip, r1
 8006c06:	2101      	movs	r1, #1
 8006c08:	4449      	add	r1, r9
 8006c0a:	468a      	mov	sl, r1
 8006c0c:	2f0f      	cmp	r7, #15
 8006c0e:	d900      	bls.n	8006c12 <__aeabi_dmul+0x96>
 8006c10:	e090      	b.n	8006d34 <__aeabi_dmul+0x1b8>
 8006c12:	49c4      	ldr	r1, [pc, #784]	; (8006f24 <__aeabi_dmul+0x3a8>)
 8006c14:	00bf      	lsls	r7, r7, #2
 8006c16:	59cf      	ldr	r7, [r1, r7]
 8006c18:	46bf      	mov	pc, r7
 8006c1a:	465b      	mov	r3, fp
 8006c1c:	433b      	orrs	r3, r7
 8006c1e:	9301      	str	r3, [sp, #4]
 8006c20:	d000      	beq.n	8006c24 <__aeabi_dmul+0xa8>
 8006c22:	e16a      	b.n	8006efa <__aeabi_dmul+0x37e>
 8006c24:	2302      	movs	r3, #2
 8006c26:	2708      	movs	r7, #8
 8006c28:	2600      	movs	r6, #0
 8006c2a:	4681      	mov	r9, r0
 8006c2c:	469b      	mov	fp, r3
 8006c2e:	e7c9      	b.n	8006bc4 <__aeabi_dmul+0x48>
 8006c30:	0032      	movs	r2, r6
 8006c32:	4658      	mov	r0, fp
 8006c34:	9b01      	ldr	r3, [sp, #4]
 8006c36:	4661      	mov	r1, ip
 8006c38:	9100      	str	r1, [sp, #0]
 8006c3a:	2802      	cmp	r0, #2
 8006c3c:	d100      	bne.n	8006c40 <__aeabi_dmul+0xc4>
 8006c3e:	e075      	b.n	8006d2c <__aeabi_dmul+0x1b0>
 8006c40:	2803      	cmp	r0, #3
 8006c42:	d100      	bne.n	8006c46 <__aeabi_dmul+0xca>
 8006c44:	e1fe      	b.n	8007044 <__aeabi_dmul+0x4c8>
 8006c46:	2801      	cmp	r0, #1
 8006c48:	d000      	beq.n	8006c4c <__aeabi_dmul+0xd0>
 8006c4a:	e12c      	b.n	8006ea6 <__aeabi_dmul+0x32a>
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	2700      	movs	r7, #0
 8006c50:	2600      	movs	r6, #0
 8006c52:	2500      	movs	r5, #0
 8006c54:	033f      	lsls	r7, r7, #12
 8006c56:	0d2a      	lsrs	r2, r5, #20
 8006c58:	0b3f      	lsrs	r7, r7, #12
 8006c5a:	48b3      	ldr	r0, [pc, #716]	; (8006f28 <__aeabi_dmul+0x3ac>)
 8006c5c:	0512      	lsls	r2, r2, #20
 8006c5e:	433a      	orrs	r2, r7
 8006c60:	4002      	ands	r2, r0
 8006c62:	051b      	lsls	r3, r3, #20
 8006c64:	4313      	orrs	r3, r2
 8006c66:	9a00      	ldr	r2, [sp, #0]
 8006c68:	005b      	lsls	r3, r3, #1
 8006c6a:	07d1      	lsls	r1, r2, #31
 8006c6c:	085b      	lsrs	r3, r3, #1
 8006c6e:	430b      	orrs	r3, r1
 8006c70:	0030      	movs	r0, r6
 8006c72:	0019      	movs	r1, r3
 8006c74:	b007      	add	sp, #28
 8006c76:	bc3c      	pop	{r2, r3, r4, r5}
 8006c78:	4690      	mov	r8, r2
 8006c7a:	4699      	mov	r9, r3
 8006c7c:	46a2      	mov	sl, r4
 8006c7e:	46ab      	mov	fp, r5
 8006c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c82:	465b      	mov	r3, fp
 8006c84:	433b      	orrs	r3, r7
 8006c86:	9301      	str	r3, [sp, #4]
 8006c88:	d100      	bne.n	8006c8c <__aeabi_dmul+0x110>
 8006c8a:	e12f      	b.n	8006eec <__aeabi_dmul+0x370>
 8006c8c:	2f00      	cmp	r7, #0
 8006c8e:	d100      	bne.n	8006c92 <__aeabi_dmul+0x116>
 8006c90:	e1a5      	b.n	8006fde <__aeabi_dmul+0x462>
 8006c92:	0038      	movs	r0, r7
 8006c94:	f000 fec0 	bl	8007a18 <__clzsi2>
 8006c98:	0003      	movs	r3, r0
 8006c9a:	3b0b      	subs	r3, #11
 8006c9c:	2b1c      	cmp	r3, #28
 8006c9e:	dd00      	ble.n	8006ca2 <__aeabi_dmul+0x126>
 8006ca0:	e196      	b.n	8006fd0 <__aeabi_dmul+0x454>
 8006ca2:	221d      	movs	r2, #29
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	465a      	mov	r2, fp
 8006ca8:	0001      	movs	r1, r0
 8006caa:	40da      	lsrs	r2, r3
 8006cac:	465e      	mov	r6, fp
 8006cae:	3908      	subs	r1, #8
 8006cb0:	408f      	lsls	r7, r1
 8006cb2:	0013      	movs	r3, r2
 8006cb4:	408e      	lsls	r6, r1
 8006cb6:	433b      	orrs	r3, r7
 8006cb8:	9301      	str	r3, [sp, #4]
 8006cba:	4b9c      	ldr	r3, [pc, #624]	; (8006f2c <__aeabi_dmul+0x3b0>)
 8006cbc:	2700      	movs	r7, #0
 8006cbe:	1a1b      	subs	r3, r3, r0
 8006cc0:	4699      	mov	r9, r3
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	469b      	mov	fp, r3
 8006cc6:	e77d      	b.n	8006bc4 <__aeabi_dmul+0x48>
 8006cc8:	4641      	mov	r1, r8
 8006cca:	4653      	mov	r3, sl
 8006ccc:	430b      	orrs	r3, r1
 8006cce:	4993      	ldr	r1, [pc, #588]	; (8006f1c <__aeabi_dmul+0x3a0>)
 8006cd0:	468c      	mov	ip, r1
 8006cd2:	44e1      	add	r9, ip
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d000      	beq.n	8006cda <__aeabi_dmul+0x15e>
 8006cd8:	e11a      	b.n	8006f10 <__aeabi_dmul+0x394>
 8006cda:	2202      	movs	r2, #2
 8006cdc:	2002      	movs	r0, #2
 8006cde:	4317      	orrs	r7, r2
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	e78c      	b.n	8006bfe <__aeabi_dmul+0x82>
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	d100      	bne.n	8006cea <__aeabi_dmul+0x16e>
 8006ce8:	e10d      	b.n	8006f06 <__aeabi_dmul+0x38a>
 8006cea:	4643      	mov	r3, r8
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d100      	bne.n	8006cf2 <__aeabi_dmul+0x176>
 8006cf0:	e181      	b.n	8006ff6 <__aeabi_dmul+0x47a>
 8006cf2:	4640      	mov	r0, r8
 8006cf4:	f000 fe90 	bl	8007a18 <__clzsi2>
 8006cf8:	0002      	movs	r2, r0
 8006cfa:	3a0b      	subs	r2, #11
 8006cfc:	2a1c      	cmp	r2, #28
 8006cfe:	dd00      	ble.n	8006d02 <__aeabi_dmul+0x186>
 8006d00:	e172      	b.n	8006fe8 <__aeabi_dmul+0x46c>
 8006d02:	0001      	movs	r1, r0
 8006d04:	4643      	mov	r3, r8
 8006d06:	3908      	subs	r1, #8
 8006d08:	408b      	lsls	r3, r1
 8006d0a:	4698      	mov	r8, r3
 8006d0c:	231d      	movs	r3, #29
 8006d0e:	1a9a      	subs	r2, r3, r2
 8006d10:	4653      	mov	r3, sl
 8006d12:	40d3      	lsrs	r3, r2
 8006d14:	001a      	movs	r2, r3
 8006d16:	4643      	mov	r3, r8
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	4652      	mov	r2, sl
 8006d1c:	408a      	lsls	r2, r1
 8006d1e:	4649      	mov	r1, r9
 8006d20:	1a08      	subs	r0, r1, r0
 8006d22:	4982      	ldr	r1, [pc, #520]	; (8006f2c <__aeabi_dmul+0x3b0>)
 8006d24:	4689      	mov	r9, r1
 8006d26:	4481      	add	r9, r0
 8006d28:	2000      	movs	r0, #0
 8006d2a:	e768      	b.n	8006bfe <__aeabi_dmul+0x82>
 8006d2c:	4b7b      	ldr	r3, [pc, #492]	; (8006f1c <__aeabi_dmul+0x3a0>)
 8006d2e:	2700      	movs	r7, #0
 8006d30:	2600      	movs	r6, #0
 8006d32:	e78e      	b.n	8006c52 <__aeabi_dmul+0xd6>
 8006d34:	0c14      	lsrs	r4, r2, #16
 8006d36:	0412      	lsls	r2, r2, #16
 8006d38:	0c12      	lsrs	r2, r2, #16
 8006d3a:	0011      	movs	r1, r2
 8006d3c:	0c37      	lsrs	r7, r6, #16
 8006d3e:	0436      	lsls	r6, r6, #16
 8006d40:	0c35      	lsrs	r5, r6, #16
 8006d42:	4379      	muls	r1, r7
 8006d44:	0028      	movs	r0, r5
 8006d46:	468c      	mov	ip, r1
 8006d48:	002e      	movs	r6, r5
 8006d4a:	4360      	muls	r0, r4
 8006d4c:	4460      	add	r0, ip
 8006d4e:	4683      	mov	fp, r0
 8006d50:	4356      	muls	r6, r2
 8006d52:	0021      	movs	r1, r4
 8006d54:	0c30      	lsrs	r0, r6, #16
 8006d56:	4680      	mov	r8, r0
 8006d58:	4658      	mov	r0, fp
 8006d5a:	4379      	muls	r1, r7
 8006d5c:	4440      	add	r0, r8
 8006d5e:	9102      	str	r1, [sp, #8]
 8006d60:	4584      	cmp	ip, r0
 8006d62:	d906      	bls.n	8006d72 <__aeabi_dmul+0x1f6>
 8006d64:	4688      	mov	r8, r1
 8006d66:	2180      	movs	r1, #128	; 0x80
 8006d68:	0249      	lsls	r1, r1, #9
 8006d6a:	468c      	mov	ip, r1
 8006d6c:	44e0      	add	r8, ip
 8006d6e:	4641      	mov	r1, r8
 8006d70:	9102      	str	r1, [sp, #8]
 8006d72:	0436      	lsls	r6, r6, #16
 8006d74:	0c01      	lsrs	r1, r0, #16
 8006d76:	0c36      	lsrs	r6, r6, #16
 8006d78:	0400      	lsls	r0, r0, #16
 8006d7a:	468b      	mov	fp, r1
 8006d7c:	1981      	adds	r1, r0, r6
 8006d7e:	0c1e      	lsrs	r6, r3, #16
 8006d80:	041b      	lsls	r3, r3, #16
 8006d82:	0c1b      	lsrs	r3, r3, #16
 8006d84:	9103      	str	r1, [sp, #12]
 8006d86:	0019      	movs	r1, r3
 8006d88:	4379      	muls	r1, r7
 8006d8a:	468c      	mov	ip, r1
 8006d8c:	0028      	movs	r0, r5
 8006d8e:	4375      	muls	r5, r6
 8006d90:	4465      	add	r5, ip
 8006d92:	46a8      	mov	r8, r5
 8006d94:	4358      	muls	r0, r3
 8006d96:	0c05      	lsrs	r5, r0, #16
 8006d98:	4445      	add	r5, r8
 8006d9a:	4377      	muls	r7, r6
 8006d9c:	42a9      	cmp	r1, r5
 8006d9e:	d903      	bls.n	8006da8 <__aeabi_dmul+0x22c>
 8006da0:	2180      	movs	r1, #128	; 0x80
 8006da2:	0249      	lsls	r1, r1, #9
 8006da4:	468c      	mov	ip, r1
 8006da6:	4467      	add	r7, ip
 8006da8:	0c29      	lsrs	r1, r5, #16
 8006daa:	468c      	mov	ip, r1
 8006dac:	0039      	movs	r1, r7
 8006dae:	0400      	lsls	r0, r0, #16
 8006db0:	0c00      	lsrs	r0, r0, #16
 8006db2:	042d      	lsls	r5, r5, #16
 8006db4:	182d      	adds	r5, r5, r0
 8006db6:	4461      	add	r1, ip
 8006db8:	44ab      	add	fp, r5
 8006dba:	9105      	str	r1, [sp, #20]
 8006dbc:	4659      	mov	r1, fp
 8006dbe:	9104      	str	r1, [sp, #16]
 8006dc0:	9901      	ldr	r1, [sp, #4]
 8006dc2:	040f      	lsls	r7, r1, #16
 8006dc4:	0c3f      	lsrs	r7, r7, #16
 8006dc6:	0c08      	lsrs	r0, r1, #16
 8006dc8:	0039      	movs	r1, r7
 8006dca:	4351      	muls	r1, r2
 8006dcc:	4342      	muls	r2, r0
 8006dce:	4690      	mov	r8, r2
 8006dd0:	0002      	movs	r2, r0
 8006dd2:	468c      	mov	ip, r1
 8006dd4:	0c09      	lsrs	r1, r1, #16
 8006dd6:	468b      	mov	fp, r1
 8006dd8:	4362      	muls	r2, r4
 8006dda:	437c      	muls	r4, r7
 8006ddc:	4444      	add	r4, r8
 8006dde:	445c      	add	r4, fp
 8006de0:	45a0      	cmp	r8, r4
 8006de2:	d903      	bls.n	8006dec <__aeabi_dmul+0x270>
 8006de4:	2180      	movs	r1, #128	; 0x80
 8006de6:	0249      	lsls	r1, r1, #9
 8006de8:	4688      	mov	r8, r1
 8006dea:	4442      	add	r2, r8
 8006dec:	0c21      	lsrs	r1, r4, #16
 8006dee:	4688      	mov	r8, r1
 8006df0:	4661      	mov	r1, ip
 8006df2:	0409      	lsls	r1, r1, #16
 8006df4:	0c09      	lsrs	r1, r1, #16
 8006df6:	468c      	mov	ip, r1
 8006df8:	0039      	movs	r1, r7
 8006dfa:	4359      	muls	r1, r3
 8006dfc:	4343      	muls	r3, r0
 8006dfe:	4370      	muls	r0, r6
 8006e00:	437e      	muls	r6, r7
 8006e02:	0c0f      	lsrs	r7, r1, #16
 8006e04:	18f6      	adds	r6, r6, r3
 8006e06:	0424      	lsls	r4, r4, #16
 8006e08:	19be      	adds	r6, r7, r6
 8006e0a:	4464      	add	r4, ip
 8006e0c:	4442      	add	r2, r8
 8006e0e:	468c      	mov	ip, r1
 8006e10:	42b3      	cmp	r3, r6
 8006e12:	d903      	bls.n	8006e1c <__aeabi_dmul+0x2a0>
 8006e14:	2380      	movs	r3, #128	; 0x80
 8006e16:	025b      	lsls	r3, r3, #9
 8006e18:	4698      	mov	r8, r3
 8006e1a:	4440      	add	r0, r8
 8006e1c:	9b02      	ldr	r3, [sp, #8]
 8006e1e:	4661      	mov	r1, ip
 8006e20:	4698      	mov	r8, r3
 8006e22:	9b04      	ldr	r3, [sp, #16]
 8006e24:	0437      	lsls	r7, r6, #16
 8006e26:	4443      	add	r3, r8
 8006e28:	469b      	mov	fp, r3
 8006e2a:	45ab      	cmp	fp, r5
 8006e2c:	41ad      	sbcs	r5, r5
 8006e2e:	426b      	negs	r3, r5
 8006e30:	040d      	lsls	r5, r1, #16
 8006e32:	9905      	ldr	r1, [sp, #20]
 8006e34:	0c2d      	lsrs	r5, r5, #16
 8006e36:	468c      	mov	ip, r1
 8006e38:	197f      	adds	r7, r7, r5
 8006e3a:	4467      	add	r7, ip
 8006e3c:	18fd      	adds	r5, r7, r3
 8006e3e:	46a8      	mov	r8, r5
 8006e40:	465d      	mov	r5, fp
 8006e42:	192d      	adds	r5, r5, r4
 8006e44:	42a5      	cmp	r5, r4
 8006e46:	41a4      	sbcs	r4, r4
 8006e48:	4693      	mov	fp, r2
 8006e4a:	4264      	negs	r4, r4
 8006e4c:	46a4      	mov	ip, r4
 8006e4e:	44c3      	add	fp, r8
 8006e50:	44dc      	add	ip, fp
 8006e52:	428f      	cmp	r7, r1
 8006e54:	41bf      	sbcs	r7, r7
 8006e56:	4598      	cmp	r8, r3
 8006e58:	419b      	sbcs	r3, r3
 8006e5a:	4593      	cmp	fp, r2
 8006e5c:	4192      	sbcs	r2, r2
 8006e5e:	45a4      	cmp	ip, r4
 8006e60:	41a4      	sbcs	r4, r4
 8006e62:	425b      	negs	r3, r3
 8006e64:	427f      	negs	r7, r7
 8006e66:	431f      	orrs	r7, r3
 8006e68:	0c36      	lsrs	r6, r6, #16
 8006e6a:	4252      	negs	r2, r2
 8006e6c:	4264      	negs	r4, r4
 8006e6e:	19bf      	adds	r7, r7, r6
 8006e70:	4322      	orrs	r2, r4
 8006e72:	18bf      	adds	r7, r7, r2
 8006e74:	4662      	mov	r2, ip
 8006e76:	1838      	adds	r0, r7, r0
 8006e78:	0243      	lsls	r3, r0, #9
 8006e7a:	0dd2      	lsrs	r2, r2, #23
 8006e7c:	9903      	ldr	r1, [sp, #12]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	026a      	lsls	r2, r5, #9
 8006e82:	430a      	orrs	r2, r1
 8006e84:	1e50      	subs	r0, r2, #1
 8006e86:	4182      	sbcs	r2, r0
 8006e88:	4661      	mov	r1, ip
 8006e8a:	0ded      	lsrs	r5, r5, #23
 8006e8c:	432a      	orrs	r2, r5
 8006e8e:	024e      	lsls	r6, r1, #9
 8006e90:	4332      	orrs	r2, r6
 8006e92:	01d9      	lsls	r1, r3, #7
 8006e94:	d400      	bmi.n	8006e98 <__aeabi_dmul+0x31c>
 8006e96:	e0b3      	b.n	8007000 <__aeabi_dmul+0x484>
 8006e98:	2601      	movs	r6, #1
 8006e9a:	0850      	lsrs	r0, r2, #1
 8006e9c:	4032      	ands	r2, r6
 8006e9e:	4302      	orrs	r2, r0
 8006ea0:	07de      	lsls	r6, r3, #31
 8006ea2:	4332      	orrs	r2, r6
 8006ea4:	085b      	lsrs	r3, r3, #1
 8006ea6:	4c22      	ldr	r4, [pc, #136]	; (8006f30 <__aeabi_dmul+0x3b4>)
 8006ea8:	4454      	add	r4, sl
 8006eaa:	2c00      	cmp	r4, #0
 8006eac:	dd62      	ble.n	8006f74 <__aeabi_dmul+0x3f8>
 8006eae:	0751      	lsls	r1, r2, #29
 8006eb0:	d009      	beq.n	8006ec6 <__aeabi_dmul+0x34a>
 8006eb2:	200f      	movs	r0, #15
 8006eb4:	4010      	ands	r0, r2
 8006eb6:	2804      	cmp	r0, #4
 8006eb8:	d005      	beq.n	8006ec6 <__aeabi_dmul+0x34a>
 8006eba:	1d10      	adds	r0, r2, #4
 8006ebc:	4290      	cmp	r0, r2
 8006ebe:	4192      	sbcs	r2, r2
 8006ec0:	4252      	negs	r2, r2
 8006ec2:	189b      	adds	r3, r3, r2
 8006ec4:	0002      	movs	r2, r0
 8006ec6:	01d9      	lsls	r1, r3, #7
 8006ec8:	d504      	bpl.n	8006ed4 <__aeabi_dmul+0x358>
 8006eca:	2480      	movs	r4, #128	; 0x80
 8006ecc:	4819      	ldr	r0, [pc, #100]	; (8006f34 <__aeabi_dmul+0x3b8>)
 8006ece:	00e4      	lsls	r4, r4, #3
 8006ed0:	4003      	ands	r3, r0
 8006ed2:	4454      	add	r4, sl
 8006ed4:	4818      	ldr	r0, [pc, #96]	; (8006f38 <__aeabi_dmul+0x3bc>)
 8006ed6:	4284      	cmp	r4, r0
 8006ed8:	dd00      	ble.n	8006edc <__aeabi_dmul+0x360>
 8006eda:	e727      	b.n	8006d2c <__aeabi_dmul+0x1b0>
 8006edc:	075e      	lsls	r6, r3, #29
 8006ede:	025b      	lsls	r3, r3, #9
 8006ee0:	08d2      	lsrs	r2, r2, #3
 8006ee2:	0b1f      	lsrs	r7, r3, #12
 8006ee4:	0563      	lsls	r3, r4, #21
 8006ee6:	4316      	orrs	r6, r2
 8006ee8:	0d5b      	lsrs	r3, r3, #21
 8006eea:	e6b2      	b.n	8006c52 <__aeabi_dmul+0xd6>
 8006eec:	2300      	movs	r3, #0
 8006eee:	4699      	mov	r9, r3
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	2704      	movs	r7, #4
 8006ef4:	2600      	movs	r6, #0
 8006ef6:	469b      	mov	fp, r3
 8006ef8:	e664      	b.n	8006bc4 <__aeabi_dmul+0x48>
 8006efa:	2303      	movs	r3, #3
 8006efc:	9701      	str	r7, [sp, #4]
 8006efe:	4681      	mov	r9, r0
 8006f00:	270c      	movs	r7, #12
 8006f02:	469b      	mov	fp, r3
 8006f04:	e65e      	b.n	8006bc4 <__aeabi_dmul+0x48>
 8006f06:	2201      	movs	r2, #1
 8006f08:	2001      	movs	r0, #1
 8006f0a:	4317      	orrs	r7, r2
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	e676      	b.n	8006bfe <__aeabi_dmul+0x82>
 8006f10:	2303      	movs	r3, #3
 8006f12:	2003      	movs	r0, #3
 8006f14:	431f      	orrs	r7, r3
 8006f16:	4643      	mov	r3, r8
 8006f18:	e671      	b.n	8006bfe <__aeabi_dmul+0x82>
 8006f1a:	46c0      	nop			; (mov r8, r8)
 8006f1c:	000007ff 	.word	0x000007ff
 8006f20:	fffffc01 	.word	0xfffffc01
 8006f24:	0801255c 	.word	0x0801255c
 8006f28:	800fffff 	.word	0x800fffff
 8006f2c:	fffffc0d 	.word	0xfffffc0d
 8006f30:	000003ff 	.word	0x000003ff
 8006f34:	feffffff 	.word	0xfeffffff
 8006f38:	000007fe 	.word	0x000007fe
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	2780      	movs	r7, #128	; 0x80
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	033f      	lsls	r7, r7, #12
 8006f44:	2600      	movs	r6, #0
 8006f46:	4b43      	ldr	r3, [pc, #268]	; (8007054 <__aeabi_dmul+0x4d8>)
 8006f48:	e683      	b.n	8006c52 <__aeabi_dmul+0xd6>
 8006f4a:	9b01      	ldr	r3, [sp, #4]
 8006f4c:	0032      	movs	r2, r6
 8006f4e:	46a4      	mov	ip, r4
 8006f50:	4658      	mov	r0, fp
 8006f52:	e670      	b.n	8006c36 <__aeabi_dmul+0xba>
 8006f54:	46ac      	mov	ip, r5
 8006f56:	e66e      	b.n	8006c36 <__aeabi_dmul+0xba>
 8006f58:	2780      	movs	r7, #128	; 0x80
 8006f5a:	9901      	ldr	r1, [sp, #4]
 8006f5c:	033f      	lsls	r7, r7, #12
 8006f5e:	4239      	tst	r1, r7
 8006f60:	d02d      	beq.n	8006fbe <__aeabi_dmul+0x442>
 8006f62:	423b      	tst	r3, r7
 8006f64:	d12b      	bne.n	8006fbe <__aeabi_dmul+0x442>
 8006f66:	431f      	orrs	r7, r3
 8006f68:	033f      	lsls	r7, r7, #12
 8006f6a:	0b3f      	lsrs	r7, r7, #12
 8006f6c:	9500      	str	r5, [sp, #0]
 8006f6e:	0016      	movs	r6, r2
 8006f70:	4b38      	ldr	r3, [pc, #224]	; (8007054 <__aeabi_dmul+0x4d8>)
 8006f72:	e66e      	b.n	8006c52 <__aeabi_dmul+0xd6>
 8006f74:	2501      	movs	r5, #1
 8006f76:	1b2d      	subs	r5, r5, r4
 8006f78:	2d38      	cmp	r5, #56	; 0x38
 8006f7a:	dd00      	ble.n	8006f7e <__aeabi_dmul+0x402>
 8006f7c:	e666      	b.n	8006c4c <__aeabi_dmul+0xd0>
 8006f7e:	2d1f      	cmp	r5, #31
 8006f80:	dc40      	bgt.n	8007004 <__aeabi_dmul+0x488>
 8006f82:	4835      	ldr	r0, [pc, #212]	; (8007058 <__aeabi_dmul+0x4dc>)
 8006f84:	001c      	movs	r4, r3
 8006f86:	4450      	add	r0, sl
 8006f88:	0016      	movs	r6, r2
 8006f8a:	4082      	lsls	r2, r0
 8006f8c:	4084      	lsls	r4, r0
 8006f8e:	40ee      	lsrs	r6, r5
 8006f90:	1e50      	subs	r0, r2, #1
 8006f92:	4182      	sbcs	r2, r0
 8006f94:	4334      	orrs	r4, r6
 8006f96:	4314      	orrs	r4, r2
 8006f98:	40eb      	lsrs	r3, r5
 8006f9a:	0762      	lsls	r2, r4, #29
 8006f9c:	d009      	beq.n	8006fb2 <__aeabi_dmul+0x436>
 8006f9e:	220f      	movs	r2, #15
 8006fa0:	4022      	ands	r2, r4
 8006fa2:	2a04      	cmp	r2, #4
 8006fa4:	d005      	beq.n	8006fb2 <__aeabi_dmul+0x436>
 8006fa6:	0022      	movs	r2, r4
 8006fa8:	1d14      	adds	r4, r2, #4
 8006faa:	4294      	cmp	r4, r2
 8006fac:	4180      	sbcs	r0, r0
 8006fae:	4240      	negs	r0, r0
 8006fb0:	181b      	adds	r3, r3, r0
 8006fb2:	021a      	lsls	r2, r3, #8
 8006fb4:	d53e      	bpl.n	8007034 <__aeabi_dmul+0x4b8>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	2700      	movs	r7, #0
 8006fba:	2600      	movs	r6, #0
 8006fbc:	e649      	b.n	8006c52 <__aeabi_dmul+0xd6>
 8006fbe:	2780      	movs	r7, #128	; 0x80
 8006fc0:	9b01      	ldr	r3, [sp, #4]
 8006fc2:	033f      	lsls	r7, r7, #12
 8006fc4:	431f      	orrs	r7, r3
 8006fc6:	033f      	lsls	r7, r7, #12
 8006fc8:	0b3f      	lsrs	r7, r7, #12
 8006fca:	9400      	str	r4, [sp, #0]
 8006fcc:	4b21      	ldr	r3, [pc, #132]	; (8007054 <__aeabi_dmul+0x4d8>)
 8006fce:	e640      	b.n	8006c52 <__aeabi_dmul+0xd6>
 8006fd0:	0003      	movs	r3, r0
 8006fd2:	465a      	mov	r2, fp
 8006fd4:	3b28      	subs	r3, #40	; 0x28
 8006fd6:	409a      	lsls	r2, r3
 8006fd8:	2600      	movs	r6, #0
 8006fda:	9201      	str	r2, [sp, #4]
 8006fdc:	e66d      	b.n	8006cba <__aeabi_dmul+0x13e>
 8006fde:	4658      	mov	r0, fp
 8006fe0:	f000 fd1a 	bl	8007a18 <__clzsi2>
 8006fe4:	3020      	adds	r0, #32
 8006fe6:	e657      	b.n	8006c98 <__aeabi_dmul+0x11c>
 8006fe8:	0003      	movs	r3, r0
 8006fea:	4652      	mov	r2, sl
 8006fec:	3b28      	subs	r3, #40	; 0x28
 8006fee:	409a      	lsls	r2, r3
 8006ff0:	0013      	movs	r3, r2
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	e693      	b.n	8006d1e <__aeabi_dmul+0x1a2>
 8006ff6:	4650      	mov	r0, sl
 8006ff8:	f000 fd0e 	bl	8007a18 <__clzsi2>
 8006ffc:	3020      	adds	r0, #32
 8006ffe:	e67b      	b.n	8006cf8 <__aeabi_dmul+0x17c>
 8007000:	46ca      	mov	sl, r9
 8007002:	e750      	b.n	8006ea6 <__aeabi_dmul+0x32a>
 8007004:	201f      	movs	r0, #31
 8007006:	001e      	movs	r6, r3
 8007008:	4240      	negs	r0, r0
 800700a:	1b04      	subs	r4, r0, r4
 800700c:	40e6      	lsrs	r6, r4
 800700e:	2d20      	cmp	r5, #32
 8007010:	d003      	beq.n	800701a <__aeabi_dmul+0x49e>
 8007012:	4c12      	ldr	r4, [pc, #72]	; (800705c <__aeabi_dmul+0x4e0>)
 8007014:	4454      	add	r4, sl
 8007016:	40a3      	lsls	r3, r4
 8007018:	431a      	orrs	r2, r3
 800701a:	1e50      	subs	r0, r2, #1
 800701c:	4182      	sbcs	r2, r0
 800701e:	4332      	orrs	r2, r6
 8007020:	2607      	movs	r6, #7
 8007022:	2700      	movs	r7, #0
 8007024:	4016      	ands	r6, r2
 8007026:	d009      	beq.n	800703c <__aeabi_dmul+0x4c0>
 8007028:	200f      	movs	r0, #15
 800702a:	2300      	movs	r3, #0
 800702c:	4010      	ands	r0, r2
 800702e:	0014      	movs	r4, r2
 8007030:	2804      	cmp	r0, #4
 8007032:	d1b9      	bne.n	8006fa8 <__aeabi_dmul+0x42c>
 8007034:	0022      	movs	r2, r4
 8007036:	075e      	lsls	r6, r3, #29
 8007038:	025b      	lsls	r3, r3, #9
 800703a:	0b1f      	lsrs	r7, r3, #12
 800703c:	08d2      	lsrs	r2, r2, #3
 800703e:	4316      	orrs	r6, r2
 8007040:	2300      	movs	r3, #0
 8007042:	e606      	b.n	8006c52 <__aeabi_dmul+0xd6>
 8007044:	2780      	movs	r7, #128	; 0x80
 8007046:	033f      	lsls	r7, r7, #12
 8007048:	431f      	orrs	r7, r3
 800704a:	033f      	lsls	r7, r7, #12
 800704c:	0b3f      	lsrs	r7, r7, #12
 800704e:	0016      	movs	r6, r2
 8007050:	4b00      	ldr	r3, [pc, #0]	; (8007054 <__aeabi_dmul+0x4d8>)
 8007052:	e5fe      	b.n	8006c52 <__aeabi_dmul+0xd6>
 8007054:	000007ff 	.word	0x000007ff
 8007058:	0000041e 	.word	0x0000041e
 800705c:	0000043e 	.word	0x0000043e

08007060 <__aeabi_dsub>:
 8007060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007062:	4657      	mov	r7, sl
 8007064:	464e      	mov	r6, r9
 8007066:	4645      	mov	r5, r8
 8007068:	46de      	mov	lr, fp
 800706a:	000c      	movs	r4, r1
 800706c:	0309      	lsls	r1, r1, #12
 800706e:	b5e0      	push	{r5, r6, r7, lr}
 8007070:	0a49      	lsrs	r1, r1, #9
 8007072:	0f46      	lsrs	r6, r0, #29
 8007074:	005f      	lsls	r7, r3, #1
 8007076:	4331      	orrs	r1, r6
 8007078:	031e      	lsls	r6, r3, #12
 800707a:	0fdb      	lsrs	r3, r3, #31
 800707c:	0a76      	lsrs	r6, r6, #9
 800707e:	469b      	mov	fp, r3
 8007080:	0f53      	lsrs	r3, r2, #29
 8007082:	4333      	orrs	r3, r6
 8007084:	4ec8      	ldr	r6, [pc, #800]	; (80073a8 <__aeabi_dsub+0x348>)
 8007086:	0065      	lsls	r5, r4, #1
 8007088:	00c0      	lsls	r0, r0, #3
 800708a:	0fe4      	lsrs	r4, r4, #31
 800708c:	00d2      	lsls	r2, r2, #3
 800708e:	0d6d      	lsrs	r5, r5, #21
 8007090:	46a2      	mov	sl, r4
 8007092:	4681      	mov	r9, r0
 8007094:	0d7f      	lsrs	r7, r7, #21
 8007096:	469c      	mov	ip, r3
 8007098:	4690      	mov	r8, r2
 800709a:	42b7      	cmp	r7, r6
 800709c:	d100      	bne.n	80070a0 <__aeabi_dsub+0x40>
 800709e:	e0b9      	b.n	8007214 <__aeabi_dsub+0x1b4>
 80070a0:	465b      	mov	r3, fp
 80070a2:	2601      	movs	r6, #1
 80070a4:	4073      	eors	r3, r6
 80070a6:	469b      	mov	fp, r3
 80070a8:	1bee      	subs	r6, r5, r7
 80070aa:	45a3      	cmp	fp, r4
 80070ac:	d100      	bne.n	80070b0 <__aeabi_dsub+0x50>
 80070ae:	e083      	b.n	80071b8 <__aeabi_dsub+0x158>
 80070b0:	2e00      	cmp	r6, #0
 80070b2:	dd63      	ble.n	800717c <__aeabi_dsub+0x11c>
 80070b4:	2f00      	cmp	r7, #0
 80070b6:	d000      	beq.n	80070ba <__aeabi_dsub+0x5a>
 80070b8:	e0b1      	b.n	800721e <__aeabi_dsub+0x1be>
 80070ba:	4663      	mov	r3, ip
 80070bc:	4313      	orrs	r3, r2
 80070be:	d100      	bne.n	80070c2 <__aeabi_dsub+0x62>
 80070c0:	e123      	b.n	800730a <__aeabi_dsub+0x2aa>
 80070c2:	1e73      	subs	r3, r6, #1
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d000      	beq.n	80070ca <__aeabi_dsub+0x6a>
 80070c8:	e1ba      	b.n	8007440 <__aeabi_dsub+0x3e0>
 80070ca:	1a86      	subs	r6, r0, r2
 80070cc:	4663      	mov	r3, ip
 80070ce:	42b0      	cmp	r0, r6
 80070d0:	4180      	sbcs	r0, r0
 80070d2:	2501      	movs	r5, #1
 80070d4:	1ac9      	subs	r1, r1, r3
 80070d6:	4240      	negs	r0, r0
 80070d8:	1a09      	subs	r1, r1, r0
 80070da:	020b      	lsls	r3, r1, #8
 80070dc:	d400      	bmi.n	80070e0 <__aeabi_dsub+0x80>
 80070de:	e147      	b.n	8007370 <__aeabi_dsub+0x310>
 80070e0:	0249      	lsls	r1, r1, #9
 80070e2:	0a4b      	lsrs	r3, r1, #9
 80070e4:	4698      	mov	r8, r3
 80070e6:	4643      	mov	r3, r8
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d100      	bne.n	80070ee <__aeabi_dsub+0x8e>
 80070ec:	e189      	b.n	8007402 <__aeabi_dsub+0x3a2>
 80070ee:	4640      	mov	r0, r8
 80070f0:	f000 fc92 	bl	8007a18 <__clzsi2>
 80070f4:	0003      	movs	r3, r0
 80070f6:	3b08      	subs	r3, #8
 80070f8:	2b1f      	cmp	r3, #31
 80070fa:	dd00      	ble.n	80070fe <__aeabi_dsub+0x9e>
 80070fc:	e17c      	b.n	80073f8 <__aeabi_dsub+0x398>
 80070fe:	2220      	movs	r2, #32
 8007100:	0030      	movs	r0, r6
 8007102:	1ad2      	subs	r2, r2, r3
 8007104:	4641      	mov	r1, r8
 8007106:	40d0      	lsrs	r0, r2
 8007108:	4099      	lsls	r1, r3
 800710a:	0002      	movs	r2, r0
 800710c:	409e      	lsls	r6, r3
 800710e:	430a      	orrs	r2, r1
 8007110:	429d      	cmp	r5, r3
 8007112:	dd00      	ble.n	8007116 <__aeabi_dsub+0xb6>
 8007114:	e16a      	b.n	80073ec <__aeabi_dsub+0x38c>
 8007116:	1b5d      	subs	r5, r3, r5
 8007118:	1c6b      	adds	r3, r5, #1
 800711a:	2b1f      	cmp	r3, #31
 800711c:	dd00      	ble.n	8007120 <__aeabi_dsub+0xc0>
 800711e:	e194      	b.n	800744a <__aeabi_dsub+0x3ea>
 8007120:	2120      	movs	r1, #32
 8007122:	0010      	movs	r0, r2
 8007124:	0035      	movs	r5, r6
 8007126:	1ac9      	subs	r1, r1, r3
 8007128:	408e      	lsls	r6, r1
 800712a:	40da      	lsrs	r2, r3
 800712c:	4088      	lsls	r0, r1
 800712e:	40dd      	lsrs	r5, r3
 8007130:	1e71      	subs	r1, r6, #1
 8007132:	418e      	sbcs	r6, r1
 8007134:	0011      	movs	r1, r2
 8007136:	2207      	movs	r2, #7
 8007138:	4328      	orrs	r0, r5
 800713a:	2500      	movs	r5, #0
 800713c:	4306      	orrs	r6, r0
 800713e:	4032      	ands	r2, r6
 8007140:	2a00      	cmp	r2, #0
 8007142:	d009      	beq.n	8007158 <__aeabi_dsub+0xf8>
 8007144:	230f      	movs	r3, #15
 8007146:	4033      	ands	r3, r6
 8007148:	2b04      	cmp	r3, #4
 800714a:	d005      	beq.n	8007158 <__aeabi_dsub+0xf8>
 800714c:	1d33      	adds	r3, r6, #4
 800714e:	42b3      	cmp	r3, r6
 8007150:	41b6      	sbcs	r6, r6
 8007152:	4276      	negs	r6, r6
 8007154:	1989      	adds	r1, r1, r6
 8007156:	001e      	movs	r6, r3
 8007158:	020b      	lsls	r3, r1, #8
 800715a:	d400      	bmi.n	800715e <__aeabi_dsub+0xfe>
 800715c:	e23d      	b.n	80075da <__aeabi_dsub+0x57a>
 800715e:	1c6a      	adds	r2, r5, #1
 8007160:	4b91      	ldr	r3, [pc, #580]	; (80073a8 <__aeabi_dsub+0x348>)
 8007162:	0555      	lsls	r5, r2, #21
 8007164:	0d6d      	lsrs	r5, r5, #21
 8007166:	429a      	cmp	r2, r3
 8007168:	d100      	bne.n	800716c <__aeabi_dsub+0x10c>
 800716a:	e119      	b.n	80073a0 <__aeabi_dsub+0x340>
 800716c:	4a8f      	ldr	r2, [pc, #572]	; (80073ac <__aeabi_dsub+0x34c>)
 800716e:	08f6      	lsrs	r6, r6, #3
 8007170:	400a      	ands	r2, r1
 8007172:	0757      	lsls	r7, r2, #29
 8007174:	0252      	lsls	r2, r2, #9
 8007176:	4337      	orrs	r7, r6
 8007178:	0b12      	lsrs	r2, r2, #12
 800717a:	e09b      	b.n	80072b4 <__aeabi_dsub+0x254>
 800717c:	2e00      	cmp	r6, #0
 800717e:	d000      	beq.n	8007182 <__aeabi_dsub+0x122>
 8007180:	e0c5      	b.n	800730e <__aeabi_dsub+0x2ae>
 8007182:	1c6e      	adds	r6, r5, #1
 8007184:	0576      	lsls	r6, r6, #21
 8007186:	0d76      	lsrs	r6, r6, #21
 8007188:	2e01      	cmp	r6, #1
 800718a:	dc00      	bgt.n	800718e <__aeabi_dsub+0x12e>
 800718c:	e148      	b.n	8007420 <__aeabi_dsub+0x3c0>
 800718e:	4667      	mov	r7, ip
 8007190:	1a86      	subs	r6, r0, r2
 8007192:	1bcb      	subs	r3, r1, r7
 8007194:	42b0      	cmp	r0, r6
 8007196:	41bf      	sbcs	r7, r7
 8007198:	427f      	negs	r7, r7
 800719a:	46b8      	mov	r8, r7
 800719c:	001f      	movs	r7, r3
 800719e:	4643      	mov	r3, r8
 80071a0:	1aff      	subs	r7, r7, r3
 80071a2:	003b      	movs	r3, r7
 80071a4:	46b8      	mov	r8, r7
 80071a6:	021b      	lsls	r3, r3, #8
 80071a8:	d500      	bpl.n	80071ac <__aeabi_dsub+0x14c>
 80071aa:	e15f      	b.n	800746c <__aeabi_dsub+0x40c>
 80071ac:	4337      	orrs	r7, r6
 80071ae:	d19a      	bne.n	80070e6 <__aeabi_dsub+0x86>
 80071b0:	2200      	movs	r2, #0
 80071b2:	2400      	movs	r4, #0
 80071b4:	2500      	movs	r5, #0
 80071b6:	e079      	b.n	80072ac <__aeabi_dsub+0x24c>
 80071b8:	2e00      	cmp	r6, #0
 80071ba:	dc00      	bgt.n	80071be <__aeabi_dsub+0x15e>
 80071bc:	e0fa      	b.n	80073b4 <__aeabi_dsub+0x354>
 80071be:	2f00      	cmp	r7, #0
 80071c0:	d100      	bne.n	80071c4 <__aeabi_dsub+0x164>
 80071c2:	e08d      	b.n	80072e0 <__aeabi_dsub+0x280>
 80071c4:	4b78      	ldr	r3, [pc, #480]	; (80073a8 <__aeabi_dsub+0x348>)
 80071c6:	429d      	cmp	r5, r3
 80071c8:	d067      	beq.n	800729a <__aeabi_dsub+0x23a>
 80071ca:	2380      	movs	r3, #128	; 0x80
 80071cc:	4667      	mov	r7, ip
 80071ce:	041b      	lsls	r3, r3, #16
 80071d0:	431f      	orrs	r7, r3
 80071d2:	46bc      	mov	ip, r7
 80071d4:	2e38      	cmp	r6, #56	; 0x38
 80071d6:	dc00      	bgt.n	80071da <__aeabi_dsub+0x17a>
 80071d8:	e152      	b.n	8007480 <__aeabi_dsub+0x420>
 80071da:	4663      	mov	r3, ip
 80071dc:	4313      	orrs	r3, r2
 80071de:	1e5a      	subs	r2, r3, #1
 80071e0:	4193      	sbcs	r3, r2
 80071e2:	181e      	adds	r6, r3, r0
 80071e4:	4286      	cmp	r6, r0
 80071e6:	4180      	sbcs	r0, r0
 80071e8:	4240      	negs	r0, r0
 80071ea:	1809      	adds	r1, r1, r0
 80071ec:	020b      	lsls	r3, r1, #8
 80071ee:	d400      	bmi.n	80071f2 <__aeabi_dsub+0x192>
 80071f0:	e0be      	b.n	8007370 <__aeabi_dsub+0x310>
 80071f2:	4b6d      	ldr	r3, [pc, #436]	; (80073a8 <__aeabi_dsub+0x348>)
 80071f4:	3501      	adds	r5, #1
 80071f6:	429d      	cmp	r5, r3
 80071f8:	d100      	bne.n	80071fc <__aeabi_dsub+0x19c>
 80071fa:	e0d2      	b.n	80073a2 <__aeabi_dsub+0x342>
 80071fc:	4a6b      	ldr	r2, [pc, #428]	; (80073ac <__aeabi_dsub+0x34c>)
 80071fe:	0873      	lsrs	r3, r6, #1
 8007200:	400a      	ands	r2, r1
 8007202:	2101      	movs	r1, #1
 8007204:	400e      	ands	r6, r1
 8007206:	431e      	orrs	r6, r3
 8007208:	0851      	lsrs	r1, r2, #1
 800720a:	07d3      	lsls	r3, r2, #31
 800720c:	2207      	movs	r2, #7
 800720e:	431e      	orrs	r6, r3
 8007210:	4032      	ands	r2, r6
 8007212:	e795      	b.n	8007140 <__aeabi_dsub+0xe0>
 8007214:	001e      	movs	r6, r3
 8007216:	4316      	orrs	r6, r2
 8007218:	d000      	beq.n	800721c <__aeabi_dsub+0x1bc>
 800721a:	e745      	b.n	80070a8 <__aeabi_dsub+0x48>
 800721c:	e740      	b.n	80070a0 <__aeabi_dsub+0x40>
 800721e:	4b62      	ldr	r3, [pc, #392]	; (80073a8 <__aeabi_dsub+0x348>)
 8007220:	429d      	cmp	r5, r3
 8007222:	d03a      	beq.n	800729a <__aeabi_dsub+0x23a>
 8007224:	2380      	movs	r3, #128	; 0x80
 8007226:	4667      	mov	r7, ip
 8007228:	041b      	lsls	r3, r3, #16
 800722a:	431f      	orrs	r7, r3
 800722c:	46bc      	mov	ip, r7
 800722e:	2e38      	cmp	r6, #56	; 0x38
 8007230:	dd00      	ble.n	8007234 <__aeabi_dsub+0x1d4>
 8007232:	e0eb      	b.n	800740c <__aeabi_dsub+0x3ac>
 8007234:	2e1f      	cmp	r6, #31
 8007236:	dc00      	bgt.n	800723a <__aeabi_dsub+0x1da>
 8007238:	e13a      	b.n	80074b0 <__aeabi_dsub+0x450>
 800723a:	0033      	movs	r3, r6
 800723c:	4667      	mov	r7, ip
 800723e:	3b20      	subs	r3, #32
 8007240:	40df      	lsrs	r7, r3
 8007242:	003b      	movs	r3, r7
 8007244:	2e20      	cmp	r6, #32
 8007246:	d005      	beq.n	8007254 <__aeabi_dsub+0x1f4>
 8007248:	2740      	movs	r7, #64	; 0x40
 800724a:	1bbf      	subs	r7, r7, r6
 800724c:	4666      	mov	r6, ip
 800724e:	40be      	lsls	r6, r7
 8007250:	4332      	orrs	r2, r6
 8007252:	4690      	mov	r8, r2
 8007254:	4646      	mov	r6, r8
 8007256:	1e72      	subs	r2, r6, #1
 8007258:	4196      	sbcs	r6, r2
 800725a:	4333      	orrs	r3, r6
 800725c:	e0da      	b.n	8007414 <__aeabi_dsub+0x3b4>
 800725e:	2b00      	cmp	r3, #0
 8007260:	d100      	bne.n	8007264 <__aeabi_dsub+0x204>
 8007262:	e214      	b.n	800768e <__aeabi_dsub+0x62e>
 8007264:	4663      	mov	r3, ip
 8007266:	4313      	orrs	r3, r2
 8007268:	d100      	bne.n	800726c <__aeabi_dsub+0x20c>
 800726a:	e168      	b.n	800753e <__aeabi_dsub+0x4de>
 800726c:	2380      	movs	r3, #128	; 0x80
 800726e:	074e      	lsls	r6, r1, #29
 8007270:	08c0      	lsrs	r0, r0, #3
 8007272:	08c9      	lsrs	r1, r1, #3
 8007274:	031b      	lsls	r3, r3, #12
 8007276:	4306      	orrs	r6, r0
 8007278:	4219      	tst	r1, r3
 800727a:	d008      	beq.n	800728e <__aeabi_dsub+0x22e>
 800727c:	4660      	mov	r0, ip
 800727e:	08c0      	lsrs	r0, r0, #3
 8007280:	4218      	tst	r0, r3
 8007282:	d104      	bne.n	800728e <__aeabi_dsub+0x22e>
 8007284:	4663      	mov	r3, ip
 8007286:	0001      	movs	r1, r0
 8007288:	08d2      	lsrs	r2, r2, #3
 800728a:	075e      	lsls	r6, r3, #29
 800728c:	4316      	orrs	r6, r2
 800728e:	00f3      	lsls	r3, r6, #3
 8007290:	4699      	mov	r9, r3
 8007292:	00c9      	lsls	r1, r1, #3
 8007294:	0f72      	lsrs	r2, r6, #29
 8007296:	4d44      	ldr	r5, [pc, #272]	; (80073a8 <__aeabi_dsub+0x348>)
 8007298:	4311      	orrs	r1, r2
 800729a:	464b      	mov	r3, r9
 800729c:	08de      	lsrs	r6, r3, #3
 800729e:	4b42      	ldr	r3, [pc, #264]	; (80073a8 <__aeabi_dsub+0x348>)
 80072a0:	074f      	lsls	r7, r1, #29
 80072a2:	4337      	orrs	r7, r6
 80072a4:	08ca      	lsrs	r2, r1, #3
 80072a6:	429d      	cmp	r5, r3
 80072a8:	d100      	bne.n	80072ac <__aeabi_dsub+0x24c>
 80072aa:	e06e      	b.n	800738a <__aeabi_dsub+0x32a>
 80072ac:	0312      	lsls	r2, r2, #12
 80072ae:	056d      	lsls	r5, r5, #21
 80072b0:	0b12      	lsrs	r2, r2, #12
 80072b2:	0d6d      	lsrs	r5, r5, #21
 80072b4:	2100      	movs	r1, #0
 80072b6:	0312      	lsls	r2, r2, #12
 80072b8:	0b13      	lsrs	r3, r2, #12
 80072ba:	0d0a      	lsrs	r2, r1, #20
 80072bc:	0512      	lsls	r2, r2, #20
 80072be:	431a      	orrs	r2, r3
 80072c0:	4b3b      	ldr	r3, [pc, #236]	; (80073b0 <__aeabi_dsub+0x350>)
 80072c2:	052d      	lsls	r5, r5, #20
 80072c4:	4013      	ands	r3, r2
 80072c6:	432b      	orrs	r3, r5
 80072c8:	005b      	lsls	r3, r3, #1
 80072ca:	07e4      	lsls	r4, r4, #31
 80072cc:	085b      	lsrs	r3, r3, #1
 80072ce:	4323      	orrs	r3, r4
 80072d0:	0038      	movs	r0, r7
 80072d2:	0019      	movs	r1, r3
 80072d4:	bc3c      	pop	{r2, r3, r4, r5}
 80072d6:	4690      	mov	r8, r2
 80072d8:	4699      	mov	r9, r3
 80072da:	46a2      	mov	sl, r4
 80072dc:	46ab      	mov	fp, r5
 80072de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072e0:	4663      	mov	r3, ip
 80072e2:	4313      	orrs	r3, r2
 80072e4:	d011      	beq.n	800730a <__aeabi_dsub+0x2aa>
 80072e6:	1e73      	subs	r3, r6, #1
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d000      	beq.n	80072ee <__aeabi_dsub+0x28e>
 80072ec:	e107      	b.n	80074fe <__aeabi_dsub+0x49e>
 80072ee:	1886      	adds	r6, r0, r2
 80072f0:	4286      	cmp	r6, r0
 80072f2:	4180      	sbcs	r0, r0
 80072f4:	4461      	add	r1, ip
 80072f6:	4240      	negs	r0, r0
 80072f8:	1809      	adds	r1, r1, r0
 80072fa:	2501      	movs	r5, #1
 80072fc:	020b      	lsls	r3, r1, #8
 80072fe:	d537      	bpl.n	8007370 <__aeabi_dsub+0x310>
 8007300:	2502      	movs	r5, #2
 8007302:	e77b      	b.n	80071fc <__aeabi_dsub+0x19c>
 8007304:	003e      	movs	r6, r7
 8007306:	4661      	mov	r1, ip
 8007308:	4691      	mov	r9, r2
 800730a:	0035      	movs	r5, r6
 800730c:	e7c5      	b.n	800729a <__aeabi_dsub+0x23a>
 800730e:	465c      	mov	r4, fp
 8007310:	2d00      	cmp	r5, #0
 8007312:	d000      	beq.n	8007316 <__aeabi_dsub+0x2b6>
 8007314:	e0e1      	b.n	80074da <__aeabi_dsub+0x47a>
 8007316:	000b      	movs	r3, r1
 8007318:	4303      	orrs	r3, r0
 800731a:	d0f3      	beq.n	8007304 <__aeabi_dsub+0x2a4>
 800731c:	1c73      	adds	r3, r6, #1
 800731e:	d100      	bne.n	8007322 <__aeabi_dsub+0x2c2>
 8007320:	e1ac      	b.n	800767c <__aeabi_dsub+0x61c>
 8007322:	4b21      	ldr	r3, [pc, #132]	; (80073a8 <__aeabi_dsub+0x348>)
 8007324:	429f      	cmp	r7, r3
 8007326:	d100      	bne.n	800732a <__aeabi_dsub+0x2ca>
 8007328:	e13a      	b.n	80075a0 <__aeabi_dsub+0x540>
 800732a:	43f3      	mvns	r3, r6
 800732c:	2b38      	cmp	r3, #56	; 0x38
 800732e:	dd00      	ble.n	8007332 <__aeabi_dsub+0x2d2>
 8007330:	e16f      	b.n	8007612 <__aeabi_dsub+0x5b2>
 8007332:	2b1f      	cmp	r3, #31
 8007334:	dd00      	ble.n	8007338 <__aeabi_dsub+0x2d8>
 8007336:	e18c      	b.n	8007652 <__aeabi_dsub+0x5f2>
 8007338:	2520      	movs	r5, #32
 800733a:	000e      	movs	r6, r1
 800733c:	1aed      	subs	r5, r5, r3
 800733e:	40ae      	lsls	r6, r5
 8007340:	46b0      	mov	r8, r6
 8007342:	0006      	movs	r6, r0
 8007344:	46aa      	mov	sl, r5
 8007346:	40de      	lsrs	r6, r3
 8007348:	4645      	mov	r5, r8
 800734a:	4335      	orrs	r5, r6
 800734c:	002e      	movs	r6, r5
 800734e:	4655      	mov	r5, sl
 8007350:	40d9      	lsrs	r1, r3
 8007352:	40a8      	lsls	r0, r5
 8007354:	4663      	mov	r3, ip
 8007356:	1e45      	subs	r5, r0, #1
 8007358:	41a8      	sbcs	r0, r5
 800735a:	1a5b      	subs	r3, r3, r1
 800735c:	469c      	mov	ip, r3
 800735e:	4330      	orrs	r0, r6
 8007360:	1a16      	subs	r6, r2, r0
 8007362:	42b2      	cmp	r2, r6
 8007364:	4192      	sbcs	r2, r2
 8007366:	4663      	mov	r3, ip
 8007368:	4252      	negs	r2, r2
 800736a:	1a99      	subs	r1, r3, r2
 800736c:	003d      	movs	r5, r7
 800736e:	e6b4      	b.n	80070da <__aeabi_dsub+0x7a>
 8007370:	2207      	movs	r2, #7
 8007372:	4032      	ands	r2, r6
 8007374:	2a00      	cmp	r2, #0
 8007376:	d000      	beq.n	800737a <__aeabi_dsub+0x31a>
 8007378:	e6e4      	b.n	8007144 <__aeabi_dsub+0xe4>
 800737a:	4b0b      	ldr	r3, [pc, #44]	; (80073a8 <__aeabi_dsub+0x348>)
 800737c:	08f6      	lsrs	r6, r6, #3
 800737e:	074f      	lsls	r7, r1, #29
 8007380:	4337      	orrs	r7, r6
 8007382:	08ca      	lsrs	r2, r1, #3
 8007384:	429d      	cmp	r5, r3
 8007386:	d000      	beq.n	800738a <__aeabi_dsub+0x32a>
 8007388:	e790      	b.n	80072ac <__aeabi_dsub+0x24c>
 800738a:	003b      	movs	r3, r7
 800738c:	4313      	orrs	r3, r2
 800738e:	d100      	bne.n	8007392 <__aeabi_dsub+0x332>
 8007390:	e1a6      	b.n	80076e0 <__aeabi_dsub+0x680>
 8007392:	2380      	movs	r3, #128	; 0x80
 8007394:	031b      	lsls	r3, r3, #12
 8007396:	431a      	orrs	r2, r3
 8007398:	0312      	lsls	r2, r2, #12
 800739a:	0b12      	lsrs	r2, r2, #12
 800739c:	4d02      	ldr	r5, [pc, #8]	; (80073a8 <__aeabi_dsub+0x348>)
 800739e:	e789      	b.n	80072b4 <__aeabi_dsub+0x254>
 80073a0:	0015      	movs	r5, r2
 80073a2:	2200      	movs	r2, #0
 80073a4:	2700      	movs	r7, #0
 80073a6:	e785      	b.n	80072b4 <__aeabi_dsub+0x254>
 80073a8:	000007ff 	.word	0x000007ff
 80073ac:	ff7fffff 	.word	0xff7fffff
 80073b0:	800fffff 	.word	0x800fffff
 80073b4:	2e00      	cmp	r6, #0
 80073b6:	d000      	beq.n	80073ba <__aeabi_dsub+0x35a>
 80073b8:	e0c7      	b.n	800754a <__aeabi_dsub+0x4ea>
 80073ba:	1c6b      	adds	r3, r5, #1
 80073bc:	055e      	lsls	r6, r3, #21
 80073be:	0d76      	lsrs	r6, r6, #21
 80073c0:	2e01      	cmp	r6, #1
 80073c2:	dc00      	bgt.n	80073c6 <__aeabi_dsub+0x366>
 80073c4:	e0f0      	b.n	80075a8 <__aeabi_dsub+0x548>
 80073c6:	4dc8      	ldr	r5, [pc, #800]	; (80076e8 <__aeabi_dsub+0x688>)
 80073c8:	42ab      	cmp	r3, r5
 80073ca:	d100      	bne.n	80073ce <__aeabi_dsub+0x36e>
 80073cc:	e0b9      	b.n	8007542 <__aeabi_dsub+0x4e2>
 80073ce:	1885      	adds	r5, r0, r2
 80073d0:	000a      	movs	r2, r1
 80073d2:	4285      	cmp	r5, r0
 80073d4:	4189      	sbcs	r1, r1
 80073d6:	4462      	add	r2, ip
 80073d8:	4249      	negs	r1, r1
 80073da:	1851      	adds	r1, r2, r1
 80073dc:	2207      	movs	r2, #7
 80073de:	07ce      	lsls	r6, r1, #31
 80073e0:	086d      	lsrs	r5, r5, #1
 80073e2:	432e      	orrs	r6, r5
 80073e4:	0849      	lsrs	r1, r1, #1
 80073e6:	4032      	ands	r2, r6
 80073e8:	001d      	movs	r5, r3
 80073ea:	e6a9      	b.n	8007140 <__aeabi_dsub+0xe0>
 80073ec:	49bf      	ldr	r1, [pc, #764]	; (80076ec <__aeabi_dsub+0x68c>)
 80073ee:	1aed      	subs	r5, r5, r3
 80073f0:	4011      	ands	r1, r2
 80073f2:	2207      	movs	r2, #7
 80073f4:	4032      	ands	r2, r6
 80073f6:	e6a3      	b.n	8007140 <__aeabi_dsub+0xe0>
 80073f8:	0032      	movs	r2, r6
 80073fa:	3828      	subs	r0, #40	; 0x28
 80073fc:	4082      	lsls	r2, r0
 80073fe:	2600      	movs	r6, #0
 8007400:	e686      	b.n	8007110 <__aeabi_dsub+0xb0>
 8007402:	0030      	movs	r0, r6
 8007404:	f000 fb08 	bl	8007a18 <__clzsi2>
 8007408:	3020      	adds	r0, #32
 800740a:	e673      	b.n	80070f4 <__aeabi_dsub+0x94>
 800740c:	4663      	mov	r3, ip
 800740e:	4313      	orrs	r3, r2
 8007410:	1e5a      	subs	r2, r3, #1
 8007412:	4193      	sbcs	r3, r2
 8007414:	1ac6      	subs	r6, r0, r3
 8007416:	42b0      	cmp	r0, r6
 8007418:	4180      	sbcs	r0, r0
 800741a:	4240      	negs	r0, r0
 800741c:	1a09      	subs	r1, r1, r0
 800741e:	e65c      	b.n	80070da <__aeabi_dsub+0x7a>
 8007420:	000e      	movs	r6, r1
 8007422:	4667      	mov	r7, ip
 8007424:	4306      	orrs	r6, r0
 8007426:	4317      	orrs	r7, r2
 8007428:	2d00      	cmp	r5, #0
 800742a:	d15e      	bne.n	80074ea <__aeabi_dsub+0x48a>
 800742c:	2e00      	cmp	r6, #0
 800742e:	d000      	beq.n	8007432 <__aeabi_dsub+0x3d2>
 8007430:	e0f3      	b.n	800761a <__aeabi_dsub+0x5ba>
 8007432:	2f00      	cmp	r7, #0
 8007434:	d100      	bne.n	8007438 <__aeabi_dsub+0x3d8>
 8007436:	e11e      	b.n	8007676 <__aeabi_dsub+0x616>
 8007438:	465c      	mov	r4, fp
 800743a:	4661      	mov	r1, ip
 800743c:	4691      	mov	r9, r2
 800743e:	e72c      	b.n	800729a <__aeabi_dsub+0x23a>
 8007440:	4fa9      	ldr	r7, [pc, #676]	; (80076e8 <__aeabi_dsub+0x688>)
 8007442:	42be      	cmp	r6, r7
 8007444:	d07b      	beq.n	800753e <__aeabi_dsub+0x4de>
 8007446:	001e      	movs	r6, r3
 8007448:	e6f1      	b.n	800722e <__aeabi_dsub+0x1ce>
 800744a:	0010      	movs	r0, r2
 800744c:	3d1f      	subs	r5, #31
 800744e:	40e8      	lsrs	r0, r5
 8007450:	2b20      	cmp	r3, #32
 8007452:	d003      	beq.n	800745c <__aeabi_dsub+0x3fc>
 8007454:	2140      	movs	r1, #64	; 0x40
 8007456:	1acb      	subs	r3, r1, r3
 8007458:	409a      	lsls	r2, r3
 800745a:	4316      	orrs	r6, r2
 800745c:	1e73      	subs	r3, r6, #1
 800745e:	419e      	sbcs	r6, r3
 8007460:	2207      	movs	r2, #7
 8007462:	4306      	orrs	r6, r0
 8007464:	4032      	ands	r2, r6
 8007466:	2100      	movs	r1, #0
 8007468:	2500      	movs	r5, #0
 800746a:	e783      	b.n	8007374 <__aeabi_dsub+0x314>
 800746c:	1a16      	subs	r6, r2, r0
 800746e:	4663      	mov	r3, ip
 8007470:	42b2      	cmp	r2, r6
 8007472:	4180      	sbcs	r0, r0
 8007474:	1a59      	subs	r1, r3, r1
 8007476:	4240      	negs	r0, r0
 8007478:	1a0b      	subs	r3, r1, r0
 800747a:	4698      	mov	r8, r3
 800747c:	465c      	mov	r4, fp
 800747e:	e632      	b.n	80070e6 <__aeabi_dsub+0x86>
 8007480:	2e1f      	cmp	r6, #31
 8007482:	dd00      	ble.n	8007486 <__aeabi_dsub+0x426>
 8007484:	e0ab      	b.n	80075de <__aeabi_dsub+0x57e>
 8007486:	2720      	movs	r7, #32
 8007488:	1bbb      	subs	r3, r7, r6
 800748a:	469a      	mov	sl, r3
 800748c:	4663      	mov	r3, ip
 800748e:	4657      	mov	r7, sl
 8007490:	40bb      	lsls	r3, r7
 8007492:	4699      	mov	r9, r3
 8007494:	0013      	movs	r3, r2
 8007496:	464f      	mov	r7, r9
 8007498:	40f3      	lsrs	r3, r6
 800749a:	431f      	orrs	r7, r3
 800749c:	003b      	movs	r3, r7
 800749e:	4657      	mov	r7, sl
 80074a0:	40ba      	lsls	r2, r7
 80074a2:	1e57      	subs	r7, r2, #1
 80074a4:	41ba      	sbcs	r2, r7
 80074a6:	4313      	orrs	r3, r2
 80074a8:	4662      	mov	r2, ip
 80074aa:	40f2      	lsrs	r2, r6
 80074ac:	1889      	adds	r1, r1, r2
 80074ae:	e698      	b.n	80071e2 <__aeabi_dsub+0x182>
 80074b0:	2720      	movs	r7, #32
 80074b2:	1bbb      	subs	r3, r7, r6
 80074b4:	469a      	mov	sl, r3
 80074b6:	4663      	mov	r3, ip
 80074b8:	4657      	mov	r7, sl
 80074ba:	40bb      	lsls	r3, r7
 80074bc:	4699      	mov	r9, r3
 80074be:	0013      	movs	r3, r2
 80074c0:	464f      	mov	r7, r9
 80074c2:	40f3      	lsrs	r3, r6
 80074c4:	431f      	orrs	r7, r3
 80074c6:	003b      	movs	r3, r7
 80074c8:	4657      	mov	r7, sl
 80074ca:	40ba      	lsls	r2, r7
 80074cc:	1e57      	subs	r7, r2, #1
 80074ce:	41ba      	sbcs	r2, r7
 80074d0:	4313      	orrs	r3, r2
 80074d2:	4662      	mov	r2, ip
 80074d4:	40f2      	lsrs	r2, r6
 80074d6:	1a89      	subs	r1, r1, r2
 80074d8:	e79c      	b.n	8007414 <__aeabi_dsub+0x3b4>
 80074da:	4b83      	ldr	r3, [pc, #524]	; (80076e8 <__aeabi_dsub+0x688>)
 80074dc:	429f      	cmp	r7, r3
 80074de:	d05f      	beq.n	80075a0 <__aeabi_dsub+0x540>
 80074e0:	2580      	movs	r5, #128	; 0x80
 80074e2:	042d      	lsls	r5, r5, #16
 80074e4:	4273      	negs	r3, r6
 80074e6:	4329      	orrs	r1, r5
 80074e8:	e720      	b.n	800732c <__aeabi_dsub+0x2cc>
 80074ea:	2e00      	cmp	r6, #0
 80074ec:	d10c      	bne.n	8007508 <__aeabi_dsub+0x4a8>
 80074ee:	2f00      	cmp	r7, #0
 80074f0:	d100      	bne.n	80074f4 <__aeabi_dsub+0x494>
 80074f2:	e0d0      	b.n	8007696 <__aeabi_dsub+0x636>
 80074f4:	465c      	mov	r4, fp
 80074f6:	4661      	mov	r1, ip
 80074f8:	4691      	mov	r9, r2
 80074fa:	4d7b      	ldr	r5, [pc, #492]	; (80076e8 <__aeabi_dsub+0x688>)
 80074fc:	e6cd      	b.n	800729a <__aeabi_dsub+0x23a>
 80074fe:	4f7a      	ldr	r7, [pc, #488]	; (80076e8 <__aeabi_dsub+0x688>)
 8007500:	42be      	cmp	r6, r7
 8007502:	d01c      	beq.n	800753e <__aeabi_dsub+0x4de>
 8007504:	001e      	movs	r6, r3
 8007506:	e665      	b.n	80071d4 <__aeabi_dsub+0x174>
 8007508:	2f00      	cmp	r7, #0
 800750a:	d018      	beq.n	800753e <__aeabi_dsub+0x4de>
 800750c:	08c0      	lsrs	r0, r0, #3
 800750e:	074e      	lsls	r6, r1, #29
 8007510:	4306      	orrs	r6, r0
 8007512:	2080      	movs	r0, #128	; 0x80
 8007514:	08c9      	lsrs	r1, r1, #3
 8007516:	0300      	lsls	r0, r0, #12
 8007518:	4201      	tst	r1, r0
 800751a:	d008      	beq.n	800752e <__aeabi_dsub+0x4ce>
 800751c:	4663      	mov	r3, ip
 800751e:	08dc      	lsrs	r4, r3, #3
 8007520:	4204      	tst	r4, r0
 8007522:	d104      	bne.n	800752e <__aeabi_dsub+0x4ce>
 8007524:	0021      	movs	r1, r4
 8007526:	46da      	mov	sl, fp
 8007528:	08d2      	lsrs	r2, r2, #3
 800752a:	075e      	lsls	r6, r3, #29
 800752c:	4316      	orrs	r6, r2
 800752e:	00f3      	lsls	r3, r6, #3
 8007530:	4699      	mov	r9, r3
 8007532:	2401      	movs	r4, #1
 8007534:	4653      	mov	r3, sl
 8007536:	00c9      	lsls	r1, r1, #3
 8007538:	0f72      	lsrs	r2, r6, #29
 800753a:	4311      	orrs	r1, r2
 800753c:	401c      	ands	r4, r3
 800753e:	4d6a      	ldr	r5, [pc, #424]	; (80076e8 <__aeabi_dsub+0x688>)
 8007540:	e6ab      	b.n	800729a <__aeabi_dsub+0x23a>
 8007542:	001d      	movs	r5, r3
 8007544:	2200      	movs	r2, #0
 8007546:	2700      	movs	r7, #0
 8007548:	e6b4      	b.n	80072b4 <__aeabi_dsub+0x254>
 800754a:	2d00      	cmp	r5, #0
 800754c:	d159      	bne.n	8007602 <__aeabi_dsub+0x5a2>
 800754e:	000b      	movs	r3, r1
 8007550:	4303      	orrs	r3, r0
 8007552:	d100      	bne.n	8007556 <__aeabi_dsub+0x4f6>
 8007554:	e6d6      	b.n	8007304 <__aeabi_dsub+0x2a4>
 8007556:	1c73      	adds	r3, r6, #1
 8007558:	d100      	bne.n	800755c <__aeabi_dsub+0x4fc>
 800755a:	e0b2      	b.n	80076c2 <__aeabi_dsub+0x662>
 800755c:	4b62      	ldr	r3, [pc, #392]	; (80076e8 <__aeabi_dsub+0x688>)
 800755e:	429f      	cmp	r7, r3
 8007560:	d01e      	beq.n	80075a0 <__aeabi_dsub+0x540>
 8007562:	43f3      	mvns	r3, r6
 8007564:	2b38      	cmp	r3, #56	; 0x38
 8007566:	dc6f      	bgt.n	8007648 <__aeabi_dsub+0x5e8>
 8007568:	2b1f      	cmp	r3, #31
 800756a:	dd00      	ble.n	800756e <__aeabi_dsub+0x50e>
 800756c:	e097      	b.n	800769e <__aeabi_dsub+0x63e>
 800756e:	2520      	movs	r5, #32
 8007570:	000e      	movs	r6, r1
 8007572:	1aed      	subs	r5, r5, r3
 8007574:	40ae      	lsls	r6, r5
 8007576:	46b0      	mov	r8, r6
 8007578:	0006      	movs	r6, r0
 800757a:	46aa      	mov	sl, r5
 800757c:	40de      	lsrs	r6, r3
 800757e:	4645      	mov	r5, r8
 8007580:	4335      	orrs	r5, r6
 8007582:	002e      	movs	r6, r5
 8007584:	4655      	mov	r5, sl
 8007586:	40a8      	lsls	r0, r5
 8007588:	40d9      	lsrs	r1, r3
 800758a:	1e45      	subs	r5, r0, #1
 800758c:	41a8      	sbcs	r0, r5
 800758e:	448c      	add	ip, r1
 8007590:	4306      	orrs	r6, r0
 8007592:	18b6      	adds	r6, r6, r2
 8007594:	4296      	cmp	r6, r2
 8007596:	4192      	sbcs	r2, r2
 8007598:	4251      	negs	r1, r2
 800759a:	4461      	add	r1, ip
 800759c:	003d      	movs	r5, r7
 800759e:	e625      	b.n	80071ec <__aeabi_dsub+0x18c>
 80075a0:	003d      	movs	r5, r7
 80075a2:	4661      	mov	r1, ip
 80075a4:	4691      	mov	r9, r2
 80075a6:	e678      	b.n	800729a <__aeabi_dsub+0x23a>
 80075a8:	000b      	movs	r3, r1
 80075aa:	4303      	orrs	r3, r0
 80075ac:	2d00      	cmp	r5, #0
 80075ae:	d000      	beq.n	80075b2 <__aeabi_dsub+0x552>
 80075b0:	e655      	b.n	800725e <__aeabi_dsub+0x1fe>
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d0f5      	beq.n	80075a2 <__aeabi_dsub+0x542>
 80075b6:	4663      	mov	r3, ip
 80075b8:	4313      	orrs	r3, r2
 80075ba:	d100      	bne.n	80075be <__aeabi_dsub+0x55e>
 80075bc:	e66d      	b.n	800729a <__aeabi_dsub+0x23a>
 80075be:	1886      	adds	r6, r0, r2
 80075c0:	4286      	cmp	r6, r0
 80075c2:	4180      	sbcs	r0, r0
 80075c4:	4461      	add	r1, ip
 80075c6:	4240      	negs	r0, r0
 80075c8:	1809      	adds	r1, r1, r0
 80075ca:	2200      	movs	r2, #0
 80075cc:	020b      	lsls	r3, r1, #8
 80075ce:	d400      	bmi.n	80075d2 <__aeabi_dsub+0x572>
 80075d0:	e6d0      	b.n	8007374 <__aeabi_dsub+0x314>
 80075d2:	4b46      	ldr	r3, [pc, #280]	; (80076ec <__aeabi_dsub+0x68c>)
 80075d4:	3501      	adds	r5, #1
 80075d6:	4019      	ands	r1, r3
 80075d8:	e5b2      	b.n	8007140 <__aeabi_dsub+0xe0>
 80075da:	46b1      	mov	r9, r6
 80075dc:	e65d      	b.n	800729a <__aeabi_dsub+0x23a>
 80075de:	0033      	movs	r3, r6
 80075e0:	4667      	mov	r7, ip
 80075e2:	3b20      	subs	r3, #32
 80075e4:	40df      	lsrs	r7, r3
 80075e6:	003b      	movs	r3, r7
 80075e8:	2e20      	cmp	r6, #32
 80075ea:	d005      	beq.n	80075f8 <__aeabi_dsub+0x598>
 80075ec:	2740      	movs	r7, #64	; 0x40
 80075ee:	1bbf      	subs	r7, r7, r6
 80075f0:	4666      	mov	r6, ip
 80075f2:	40be      	lsls	r6, r7
 80075f4:	4332      	orrs	r2, r6
 80075f6:	4690      	mov	r8, r2
 80075f8:	4646      	mov	r6, r8
 80075fa:	1e72      	subs	r2, r6, #1
 80075fc:	4196      	sbcs	r6, r2
 80075fe:	4333      	orrs	r3, r6
 8007600:	e5ef      	b.n	80071e2 <__aeabi_dsub+0x182>
 8007602:	4b39      	ldr	r3, [pc, #228]	; (80076e8 <__aeabi_dsub+0x688>)
 8007604:	429f      	cmp	r7, r3
 8007606:	d0cb      	beq.n	80075a0 <__aeabi_dsub+0x540>
 8007608:	2580      	movs	r5, #128	; 0x80
 800760a:	042d      	lsls	r5, r5, #16
 800760c:	4273      	negs	r3, r6
 800760e:	4329      	orrs	r1, r5
 8007610:	e7a8      	b.n	8007564 <__aeabi_dsub+0x504>
 8007612:	4308      	orrs	r0, r1
 8007614:	1e41      	subs	r1, r0, #1
 8007616:	4188      	sbcs	r0, r1
 8007618:	e6a2      	b.n	8007360 <__aeabi_dsub+0x300>
 800761a:	2f00      	cmp	r7, #0
 800761c:	d100      	bne.n	8007620 <__aeabi_dsub+0x5c0>
 800761e:	e63c      	b.n	800729a <__aeabi_dsub+0x23a>
 8007620:	4663      	mov	r3, ip
 8007622:	1a86      	subs	r6, r0, r2
 8007624:	1acf      	subs	r7, r1, r3
 8007626:	42b0      	cmp	r0, r6
 8007628:	419b      	sbcs	r3, r3
 800762a:	425b      	negs	r3, r3
 800762c:	1afb      	subs	r3, r7, r3
 800762e:	4698      	mov	r8, r3
 8007630:	021b      	lsls	r3, r3, #8
 8007632:	d54e      	bpl.n	80076d2 <__aeabi_dsub+0x672>
 8007634:	1a16      	subs	r6, r2, r0
 8007636:	4663      	mov	r3, ip
 8007638:	42b2      	cmp	r2, r6
 800763a:	4192      	sbcs	r2, r2
 800763c:	1a59      	subs	r1, r3, r1
 800763e:	4252      	negs	r2, r2
 8007640:	1a89      	subs	r1, r1, r2
 8007642:	465c      	mov	r4, fp
 8007644:	2200      	movs	r2, #0
 8007646:	e57b      	b.n	8007140 <__aeabi_dsub+0xe0>
 8007648:	4301      	orrs	r1, r0
 800764a:	000e      	movs	r6, r1
 800764c:	1e71      	subs	r1, r6, #1
 800764e:	418e      	sbcs	r6, r1
 8007650:	e79f      	b.n	8007592 <__aeabi_dsub+0x532>
 8007652:	001d      	movs	r5, r3
 8007654:	000e      	movs	r6, r1
 8007656:	3d20      	subs	r5, #32
 8007658:	40ee      	lsrs	r6, r5
 800765a:	46b0      	mov	r8, r6
 800765c:	2b20      	cmp	r3, #32
 800765e:	d004      	beq.n	800766a <__aeabi_dsub+0x60a>
 8007660:	2540      	movs	r5, #64	; 0x40
 8007662:	1aeb      	subs	r3, r5, r3
 8007664:	4099      	lsls	r1, r3
 8007666:	4308      	orrs	r0, r1
 8007668:	4681      	mov	r9, r0
 800766a:	4648      	mov	r0, r9
 800766c:	4643      	mov	r3, r8
 800766e:	1e41      	subs	r1, r0, #1
 8007670:	4188      	sbcs	r0, r1
 8007672:	4318      	orrs	r0, r3
 8007674:	e674      	b.n	8007360 <__aeabi_dsub+0x300>
 8007676:	2200      	movs	r2, #0
 8007678:	2400      	movs	r4, #0
 800767a:	e617      	b.n	80072ac <__aeabi_dsub+0x24c>
 800767c:	1a16      	subs	r6, r2, r0
 800767e:	4663      	mov	r3, ip
 8007680:	42b2      	cmp	r2, r6
 8007682:	4192      	sbcs	r2, r2
 8007684:	1a59      	subs	r1, r3, r1
 8007686:	4252      	negs	r2, r2
 8007688:	1a89      	subs	r1, r1, r2
 800768a:	003d      	movs	r5, r7
 800768c:	e525      	b.n	80070da <__aeabi_dsub+0x7a>
 800768e:	4661      	mov	r1, ip
 8007690:	4691      	mov	r9, r2
 8007692:	4d15      	ldr	r5, [pc, #84]	; (80076e8 <__aeabi_dsub+0x688>)
 8007694:	e601      	b.n	800729a <__aeabi_dsub+0x23a>
 8007696:	2280      	movs	r2, #128	; 0x80
 8007698:	2400      	movs	r4, #0
 800769a:	0312      	lsls	r2, r2, #12
 800769c:	e679      	b.n	8007392 <__aeabi_dsub+0x332>
 800769e:	001d      	movs	r5, r3
 80076a0:	000e      	movs	r6, r1
 80076a2:	3d20      	subs	r5, #32
 80076a4:	40ee      	lsrs	r6, r5
 80076a6:	46b0      	mov	r8, r6
 80076a8:	2b20      	cmp	r3, #32
 80076aa:	d004      	beq.n	80076b6 <__aeabi_dsub+0x656>
 80076ac:	2540      	movs	r5, #64	; 0x40
 80076ae:	1aeb      	subs	r3, r5, r3
 80076b0:	4099      	lsls	r1, r3
 80076b2:	4308      	orrs	r0, r1
 80076b4:	4681      	mov	r9, r0
 80076b6:	464e      	mov	r6, r9
 80076b8:	4643      	mov	r3, r8
 80076ba:	1e71      	subs	r1, r6, #1
 80076bc:	418e      	sbcs	r6, r1
 80076be:	431e      	orrs	r6, r3
 80076c0:	e767      	b.n	8007592 <__aeabi_dsub+0x532>
 80076c2:	1886      	adds	r6, r0, r2
 80076c4:	4296      	cmp	r6, r2
 80076c6:	419b      	sbcs	r3, r3
 80076c8:	4461      	add	r1, ip
 80076ca:	425b      	negs	r3, r3
 80076cc:	18c9      	adds	r1, r1, r3
 80076ce:	003d      	movs	r5, r7
 80076d0:	e58c      	b.n	80071ec <__aeabi_dsub+0x18c>
 80076d2:	4647      	mov	r7, r8
 80076d4:	4337      	orrs	r7, r6
 80076d6:	d0ce      	beq.n	8007676 <__aeabi_dsub+0x616>
 80076d8:	2207      	movs	r2, #7
 80076da:	4641      	mov	r1, r8
 80076dc:	4032      	ands	r2, r6
 80076de:	e649      	b.n	8007374 <__aeabi_dsub+0x314>
 80076e0:	2700      	movs	r7, #0
 80076e2:	003a      	movs	r2, r7
 80076e4:	e5e6      	b.n	80072b4 <__aeabi_dsub+0x254>
 80076e6:	46c0      	nop			; (mov r8, r8)
 80076e8:	000007ff 	.word	0x000007ff
 80076ec:	ff7fffff 	.word	0xff7fffff

080076f0 <__aeabi_dcmpun>:
 80076f0:	b570      	push	{r4, r5, r6, lr}
 80076f2:	4e0c      	ldr	r6, [pc, #48]	; (8007724 <__aeabi_dcmpun+0x34>)
 80076f4:	030d      	lsls	r5, r1, #12
 80076f6:	031c      	lsls	r4, r3, #12
 80076f8:	0049      	lsls	r1, r1, #1
 80076fa:	005b      	lsls	r3, r3, #1
 80076fc:	0b2d      	lsrs	r5, r5, #12
 80076fe:	0d49      	lsrs	r1, r1, #21
 8007700:	0b24      	lsrs	r4, r4, #12
 8007702:	0d5b      	lsrs	r3, r3, #21
 8007704:	42b1      	cmp	r1, r6
 8007706:	d008      	beq.n	800771a <__aeabi_dcmpun+0x2a>
 8007708:	4906      	ldr	r1, [pc, #24]	; (8007724 <__aeabi_dcmpun+0x34>)
 800770a:	2000      	movs	r0, #0
 800770c:	428b      	cmp	r3, r1
 800770e:	d103      	bne.n	8007718 <__aeabi_dcmpun+0x28>
 8007710:	4314      	orrs	r4, r2
 8007712:	0020      	movs	r0, r4
 8007714:	1e44      	subs	r4, r0, #1
 8007716:	41a0      	sbcs	r0, r4
 8007718:	bd70      	pop	{r4, r5, r6, pc}
 800771a:	4305      	orrs	r5, r0
 800771c:	2001      	movs	r0, #1
 800771e:	2d00      	cmp	r5, #0
 8007720:	d1fa      	bne.n	8007718 <__aeabi_dcmpun+0x28>
 8007722:	e7f1      	b.n	8007708 <__aeabi_dcmpun+0x18>
 8007724:	000007ff 	.word	0x000007ff

08007728 <__aeabi_d2iz>:
 8007728:	b530      	push	{r4, r5, lr}
 800772a:	4d14      	ldr	r5, [pc, #80]	; (800777c <__aeabi_d2iz+0x54>)
 800772c:	030a      	lsls	r2, r1, #12
 800772e:	004b      	lsls	r3, r1, #1
 8007730:	0b12      	lsrs	r2, r2, #12
 8007732:	0d5b      	lsrs	r3, r3, #21
 8007734:	0fc9      	lsrs	r1, r1, #31
 8007736:	2400      	movs	r4, #0
 8007738:	42ab      	cmp	r3, r5
 800773a:	dd11      	ble.n	8007760 <__aeabi_d2iz+0x38>
 800773c:	4c10      	ldr	r4, [pc, #64]	; (8007780 <__aeabi_d2iz+0x58>)
 800773e:	42a3      	cmp	r3, r4
 8007740:	dc10      	bgt.n	8007764 <__aeabi_d2iz+0x3c>
 8007742:	2480      	movs	r4, #128	; 0x80
 8007744:	0364      	lsls	r4, r4, #13
 8007746:	4322      	orrs	r2, r4
 8007748:	4c0e      	ldr	r4, [pc, #56]	; (8007784 <__aeabi_d2iz+0x5c>)
 800774a:	1ae4      	subs	r4, r4, r3
 800774c:	2c1f      	cmp	r4, #31
 800774e:	dd0c      	ble.n	800776a <__aeabi_d2iz+0x42>
 8007750:	480d      	ldr	r0, [pc, #52]	; (8007788 <__aeabi_d2iz+0x60>)
 8007752:	1ac3      	subs	r3, r0, r3
 8007754:	40da      	lsrs	r2, r3
 8007756:	0013      	movs	r3, r2
 8007758:	425c      	negs	r4, r3
 800775a:	2900      	cmp	r1, #0
 800775c:	d100      	bne.n	8007760 <__aeabi_d2iz+0x38>
 800775e:	001c      	movs	r4, r3
 8007760:	0020      	movs	r0, r4
 8007762:	bd30      	pop	{r4, r5, pc}
 8007764:	4b09      	ldr	r3, [pc, #36]	; (800778c <__aeabi_d2iz+0x64>)
 8007766:	18cc      	adds	r4, r1, r3
 8007768:	e7fa      	b.n	8007760 <__aeabi_d2iz+0x38>
 800776a:	4d09      	ldr	r5, [pc, #36]	; (8007790 <__aeabi_d2iz+0x68>)
 800776c:	40e0      	lsrs	r0, r4
 800776e:	46ac      	mov	ip, r5
 8007770:	4463      	add	r3, ip
 8007772:	409a      	lsls	r2, r3
 8007774:	0013      	movs	r3, r2
 8007776:	4303      	orrs	r3, r0
 8007778:	e7ee      	b.n	8007758 <__aeabi_d2iz+0x30>
 800777a:	46c0      	nop			; (mov r8, r8)
 800777c:	000003fe 	.word	0x000003fe
 8007780:	0000041d 	.word	0x0000041d
 8007784:	00000433 	.word	0x00000433
 8007788:	00000413 	.word	0x00000413
 800778c:	7fffffff 	.word	0x7fffffff
 8007790:	fffffbed 	.word	0xfffffbed

08007794 <__aeabi_i2d>:
 8007794:	b570      	push	{r4, r5, r6, lr}
 8007796:	2800      	cmp	r0, #0
 8007798:	d02d      	beq.n	80077f6 <__aeabi_i2d+0x62>
 800779a:	17c3      	asrs	r3, r0, #31
 800779c:	18c5      	adds	r5, r0, r3
 800779e:	405d      	eors	r5, r3
 80077a0:	0fc4      	lsrs	r4, r0, #31
 80077a2:	0028      	movs	r0, r5
 80077a4:	f000 f938 	bl	8007a18 <__clzsi2>
 80077a8:	4b15      	ldr	r3, [pc, #84]	; (8007800 <__aeabi_i2d+0x6c>)
 80077aa:	1a1b      	subs	r3, r3, r0
 80077ac:	055b      	lsls	r3, r3, #21
 80077ae:	0d5b      	lsrs	r3, r3, #21
 80077b0:	280a      	cmp	r0, #10
 80077b2:	dd15      	ble.n	80077e0 <__aeabi_i2d+0x4c>
 80077b4:	380b      	subs	r0, #11
 80077b6:	4085      	lsls	r5, r0
 80077b8:	2200      	movs	r2, #0
 80077ba:	032d      	lsls	r5, r5, #12
 80077bc:	0b2d      	lsrs	r5, r5, #12
 80077be:	2100      	movs	r1, #0
 80077c0:	0010      	movs	r0, r2
 80077c2:	032d      	lsls	r5, r5, #12
 80077c4:	0d0a      	lsrs	r2, r1, #20
 80077c6:	0b2d      	lsrs	r5, r5, #12
 80077c8:	0512      	lsls	r2, r2, #20
 80077ca:	432a      	orrs	r2, r5
 80077cc:	4d0d      	ldr	r5, [pc, #52]	; (8007804 <__aeabi_i2d+0x70>)
 80077ce:	051b      	lsls	r3, r3, #20
 80077d0:	402a      	ands	r2, r5
 80077d2:	4313      	orrs	r3, r2
 80077d4:	005b      	lsls	r3, r3, #1
 80077d6:	07e4      	lsls	r4, r4, #31
 80077d8:	085b      	lsrs	r3, r3, #1
 80077da:	4323      	orrs	r3, r4
 80077dc:	0019      	movs	r1, r3
 80077de:	bd70      	pop	{r4, r5, r6, pc}
 80077e0:	0002      	movs	r2, r0
 80077e2:	0029      	movs	r1, r5
 80077e4:	3215      	adds	r2, #21
 80077e6:	4091      	lsls	r1, r2
 80077e8:	000a      	movs	r2, r1
 80077ea:	210b      	movs	r1, #11
 80077ec:	1a08      	subs	r0, r1, r0
 80077ee:	40c5      	lsrs	r5, r0
 80077f0:	032d      	lsls	r5, r5, #12
 80077f2:	0b2d      	lsrs	r5, r5, #12
 80077f4:	e7e3      	b.n	80077be <__aeabi_i2d+0x2a>
 80077f6:	2400      	movs	r4, #0
 80077f8:	2300      	movs	r3, #0
 80077fa:	2500      	movs	r5, #0
 80077fc:	2200      	movs	r2, #0
 80077fe:	e7de      	b.n	80077be <__aeabi_i2d+0x2a>
 8007800:	0000041e 	.word	0x0000041e
 8007804:	800fffff 	.word	0x800fffff

08007808 <__aeabi_ui2d>:
 8007808:	b510      	push	{r4, lr}
 800780a:	1e04      	subs	r4, r0, #0
 800780c:	d025      	beq.n	800785a <__aeabi_ui2d+0x52>
 800780e:	f000 f903 	bl	8007a18 <__clzsi2>
 8007812:	4b14      	ldr	r3, [pc, #80]	; (8007864 <__aeabi_ui2d+0x5c>)
 8007814:	1a1b      	subs	r3, r3, r0
 8007816:	055b      	lsls	r3, r3, #21
 8007818:	0d5b      	lsrs	r3, r3, #21
 800781a:	280a      	cmp	r0, #10
 800781c:	dd12      	ble.n	8007844 <__aeabi_ui2d+0x3c>
 800781e:	380b      	subs	r0, #11
 8007820:	4084      	lsls	r4, r0
 8007822:	2200      	movs	r2, #0
 8007824:	0324      	lsls	r4, r4, #12
 8007826:	0b24      	lsrs	r4, r4, #12
 8007828:	2100      	movs	r1, #0
 800782a:	0010      	movs	r0, r2
 800782c:	0324      	lsls	r4, r4, #12
 800782e:	0d0a      	lsrs	r2, r1, #20
 8007830:	0b24      	lsrs	r4, r4, #12
 8007832:	0512      	lsls	r2, r2, #20
 8007834:	4322      	orrs	r2, r4
 8007836:	4c0c      	ldr	r4, [pc, #48]	; (8007868 <__aeabi_ui2d+0x60>)
 8007838:	051b      	lsls	r3, r3, #20
 800783a:	4022      	ands	r2, r4
 800783c:	4313      	orrs	r3, r2
 800783e:	005b      	lsls	r3, r3, #1
 8007840:	0859      	lsrs	r1, r3, #1
 8007842:	bd10      	pop	{r4, pc}
 8007844:	0002      	movs	r2, r0
 8007846:	0021      	movs	r1, r4
 8007848:	3215      	adds	r2, #21
 800784a:	4091      	lsls	r1, r2
 800784c:	000a      	movs	r2, r1
 800784e:	210b      	movs	r1, #11
 8007850:	1a08      	subs	r0, r1, r0
 8007852:	40c4      	lsrs	r4, r0
 8007854:	0324      	lsls	r4, r4, #12
 8007856:	0b24      	lsrs	r4, r4, #12
 8007858:	e7e6      	b.n	8007828 <__aeabi_ui2d+0x20>
 800785a:	2300      	movs	r3, #0
 800785c:	2400      	movs	r4, #0
 800785e:	2200      	movs	r2, #0
 8007860:	e7e2      	b.n	8007828 <__aeabi_ui2d+0x20>
 8007862:	46c0      	nop			; (mov r8, r8)
 8007864:	0000041e 	.word	0x0000041e
 8007868:	800fffff 	.word	0x800fffff

0800786c <__aeabi_f2d>:
 800786c:	0041      	lsls	r1, r0, #1
 800786e:	0e09      	lsrs	r1, r1, #24
 8007870:	1c4b      	adds	r3, r1, #1
 8007872:	b570      	push	{r4, r5, r6, lr}
 8007874:	b2db      	uxtb	r3, r3
 8007876:	0246      	lsls	r6, r0, #9
 8007878:	0a75      	lsrs	r5, r6, #9
 800787a:	0fc4      	lsrs	r4, r0, #31
 800787c:	2b01      	cmp	r3, #1
 800787e:	dd14      	ble.n	80078aa <__aeabi_f2d+0x3e>
 8007880:	23e0      	movs	r3, #224	; 0xe0
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	076d      	lsls	r5, r5, #29
 8007886:	0b36      	lsrs	r6, r6, #12
 8007888:	18cb      	adds	r3, r1, r3
 800788a:	2100      	movs	r1, #0
 800788c:	0d0a      	lsrs	r2, r1, #20
 800788e:	0028      	movs	r0, r5
 8007890:	0512      	lsls	r2, r2, #20
 8007892:	4d1c      	ldr	r5, [pc, #112]	; (8007904 <__aeabi_f2d+0x98>)
 8007894:	4332      	orrs	r2, r6
 8007896:	055b      	lsls	r3, r3, #21
 8007898:	402a      	ands	r2, r5
 800789a:	085b      	lsrs	r3, r3, #1
 800789c:	4313      	orrs	r3, r2
 800789e:	005b      	lsls	r3, r3, #1
 80078a0:	07e4      	lsls	r4, r4, #31
 80078a2:	085b      	lsrs	r3, r3, #1
 80078a4:	4323      	orrs	r3, r4
 80078a6:	0019      	movs	r1, r3
 80078a8:	bd70      	pop	{r4, r5, r6, pc}
 80078aa:	2900      	cmp	r1, #0
 80078ac:	d114      	bne.n	80078d8 <__aeabi_f2d+0x6c>
 80078ae:	2d00      	cmp	r5, #0
 80078b0:	d01e      	beq.n	80078f0 <__aeabi_f2d+0x84>
 80078b2:	0028      	movs	r0, r5
 80078b4:	f000 f8b0 	bl	8007a18 <__clzsi2>
 80078b8:	280a      	cmp	r0, #10
 80078ba:	dc1c      	bgt.n	80078f6 <__aeabi_f2d+0x8a>
 80078bc:	230b      	movs	r3, #11
 80078be:	002a      	movs	r2, r5
 80078c0:	1a1b      	subs	r3, r3, r0
 80078c2:	40da      	lsrs	r2, r3
 80078c4:	0003      	movs	r3, r0
 80078c6:	3315      	adds	r3, #21
 80078c8:	409d      	lsls	r5, r3
 80078ca:	4b0f      	ldr	r3, [pc, #60]	; (8007908 <__aeabi_f2d+0x9c>)
 80078cc:	0312      	lsls	r2, r2, #12
 80078ce:	1a1b      	subs	r3, r3, r0
 80078d0:	055b      	lsls	r3, r3, #21
 80078d2:	0b16      	lsrs	r6, r2, #12
 80078d4:	0d5b      	lsrs	r3, r3, #21
 80078d6:	e7d8      	b.n	800788a <__aeabi_f2d+0x1e>
 80078d8:	2d00      	cmp	r5, #0
 80078da:	d006      	beq.n	80078ea <__aeabi_f2d+0x7e>
 80078dc:	0b32      	lsrs	r2, r6, #12
 80078de:	2680      	movs	r6, #128	; 0x80
 80078e0:	0336      	lsls	r6, r6, #12
 80078e2:	076d      	lsls	r5, r5, #29
 80078e4:	4316      	orrs	r6, r2
 80078e6:	4b09      	ldr	r3, [pc, #36]	; (800790c <__aeabi_f2d+0xa0>)
 80078e8:	e7cf      	b.n	800788a <__aeabi_f2d+0x1e>
 80078ea:	4b08      	ldr	r3, [pc, #32]	; (800790c <__aeabi_f2d+0xa0>)
 80078ec:	2600      	movs	r6, #0
 80078ee:	e7cc      	b.n	800788a <__aeabi_f2d+0x1e>
 80078f0:	2300      	movs	r3, #0
 80078f2:	2600      	movs	r6, #0
 80078f4:	e7c9      	b.n	800788a <__aeabi_f2d+0x1e>
 80078f6:	0003      	movs	r3, r0
 80078f8:	002a      	movs	r2, r5
 80078fa:	3b0b      	subs	r3, #11
 80078fc:	409a      	lsls	r2, r3
 80078fe:	2500      	movs	r5, #0
 8007900:	e7e3      	b.n	80078ca <__aeabi_f2d+0x5e>
 8007902:	46c0      	nop			; (mov r8, r8)
 8007904:	800fffff 	.word	0x800fffff
 8007908:	00000389 	.word	0x00000389
 800790c:	000007ff 	.word	0x000007ff

08007910 <__aeabi_d2f>:
 8007910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007912:	004c      	lsls	r4, r1, #1
 8007914:	0d64      	lsrs	r4, r4, #21
 8007916:	030b      	lsls	r3, r1, #12
 8007918:	1c62      	adds	r2, r4, #1
 800791a:	0a5b      	lsrs	r3, r3, #9
 800791c:	0f46      	lsrs	r6, r0, #29
 800791e:	0552      	lsls	r2, r2, #21
 8007920:	0fc9      	lsrs	r1, r1, #31
 8007922:	431e      	orrs	r6, r3
 8007924:	00c5      	lsls	r5, r0, #3
 8007926:	0d52      	lsrs	r2, r2, #21
 8007928:	2a01      	cmp	r2, #1
 800792a:	dd29      	ble.n	8007980 <__aeabi_d2f+0x70>
 800792c:	4b37      	ldr	r3, [pc, #220]	; (8007a0c <__aeabi_d2f+0xfc>)
 800792e:	18e7      	adds	r7, r4, r3
 8007930:	2ffe      	cmp	r7, #254	; 0xfe
 8007932:	dc1c      	bgt.n	800796e <__aeabi_d2f+0x5e>
 8007934:	2f00      	cmp	r7, #0
 8007936:	dd3b      	ble.n	80079b0 <__aeabi_d2f+0xa0>
 8007938:	0180      	lsls	r0, r0, #6
 800793a:	1e43      	subs	r3, r0, #1
 800793c:	4198      	sbcs	r0, r3
 800793e:	2207      	movs	r2, #7
 8007940:	00f3      	lsls	r3, r6, #3
 8007942:	0f6d      	lsrs	r5, r5, #29
 8007944:	4303      	orrs	r3, r0
 8007946:	432b      	orrs	r3, r5
 8007948:	401a      	ands	r2, r3
 800794a:	2a00      	cmp	r2, #0
 800794c:	d004      	beq.n	8007958 <__aeabi_d2f+0x48>
 800794e:	220f      	movs	r2, #15
 8007950:	401a      	ands	r2, r3
 8007952:	2a04      	cmp	r2, #4
 8007954:	d000      	beq.n	8007958 <__aeabi_d2f+0x48>
 8007956:	3304      	adds	r3, #4
 8007958:	2280      	movs	r2, #128	; 0x80
 800795a:	04d2      	lsls	r2, r2, #19
 800795c:	401a      	ands	r2, r3
 800795e:	d024      	beq.n	80079aa <__aeabi_d2f+0x9a>
 8007960:	3701      	adds	r7, #1
 8007962:	b2fa      	uxtb	r2, r7
 8007964:	2fff      	cmp	r7, #255	; 0xff
 8007966:	d002      	beq.n	800796e <__aeabi_d2f+0x5e>
 8007968:	019b      	lsls	r3, r3, #6
 800796a:	0a58      	lsrs	r0, r3, #9
 800796c:	e001      	b.n	8007972 <__aeabi_d2f+0x62>
 800796e:	22ff      	movs	r2, #255	; 0xff
 8007970:	2000      	movs	r0, #0
 8007972:	0240      	lsls	r0, r0, #9
 8007974:	05d2      	lsls	r2, r2, #23
 8007976:	0a40      	lsrs	r0, r0, #9
 8007978:	07c9      	lsls	r1, r1, #31
 800797a:	4310      	orrs	r0, r2
 800797c:	4308      	orrs	r0, r1
 800797e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007980:	4335      	orrs	r5, r6
 8007982:	2c00      	cmp	r4, #0
 8007984:	d104      	bne.n	8007990 <__aeabi_d2f+0x80>
 8007986:	2d00      	cmp	r5, #0
 8007988:	d10a      	bne.n	80079a0 <__aeabi_d2f+0x90>
 800798a:	2200      	movs	r2, #0
 800798c:	2000      	movs	r0, #0
 800798e:	e7f0      	b.n	8007972 <__aeabi_d2f+0x62>
 8007990:	2d00      	cmp	r5, #0
 8007992:	d0ec      	beq.n	800796e <__aeabi_d2f+0x5e>
 8007994:	2080      	movs	r0, #128	; 0x80
 8007996:	03c0      	lsls	r0, r0, #15
 8007998:	4330      	orrs	r0, r6
 800799a:	22ff      	movs	r2, #255	; 0xff
 800799c:	e7e9      	b.n	8007972 <__aeabi_d2f+0x62>
 800799e:	2400      	movs	r4, #0
 80079a0:	2300      	movs	r3, #0
 80079a2:	025b      	lsls	r3, r3, #9
 80079a4:	0a58      	lsrs	r0, r3, #9
 80079a6:	b2e2      	uxtb	r2, r4
 80079a8:	e7e3      	b.n	8007972 <__aeabi_d2f+0x62>
 80079aa:	08db      	lsrs	r3, r3, #3
 80079ac:	003c      	movs	r4, r7
 80079ae:	e7f8      	b.n	80079a2 <__aeabi_d2f+0x92>
 80079b0:	003b      	movs	r3, r7
 80079b2:	3317      	adds	r3, #23
 80079b4:	dbf3      	blt.n	800799e <__aeabi_d2f+0x8e>
 80079b6:	2380      	movs	r3, #128	; 0x80
 80079b8:	041b      	lsls	r3, r3, #16
 80079ba:	4333      	orrs	r3, r6
 80079bc:	261e      	movs	r6, #30
 80079be:	1bf6      	subs	r6, r6, r7
 80079c0:	2e1f      	cmp	r6, #31
 80079c2:	dd14      	ble.n	80079ee <__aeabi_d2f+0xde>
 80079c4:	2202      	movs	r2, #2
 80079c6:	4252      	negs	r2, r2
 80079c8:	1bd7      	subs	r7, r2, r7
 80079ca:	001a      	movs	r2, r3
 80079cc:	40fa      	lsrs	r2, r7
 80079ce:	0017      	movs	r7, r2
 80079d0:	2e20      	cmp	r6, #32
 80079d2:	d004      	beq.n	80079de <__aeabi_d2f+0xce>
 80079d4:	4a0e      	ldr	r2, [pc, #56]	; (8007a10 <__aeabi_d2f+0x100>)
 80079d6:	4694      	mov	ip, r2
 80079d8:	4464      	add	r4, ip
 80079da:	40a3      	lsls	r3, r4
 80079dc:	431d      	orrs	r5, r3
 80079de:	002b      	movs	r3, r5
 80079e0:	1e5d      	subs	r5, r3, #1
 80079e2:	41ab      	sbcs	r3, r5
 80079e4:	2207      	movs	r2, #7
 80079e6:	433b      	orrs	r3, r7
 80079e8:	401a      	ands	r2, r3
 80079ea:	2700      	movs	r7, #0
 80079ec:	e7ad      	b.n	800794a <__aeabi_d2f+0x3a>
 80079ee:	4a09      	ldr	r2, [pc, #36]	; (8007a14 <__aeabi_d2f+0x104>)
 80079f0:	0028      	movs	r0, r5
 80079f2:	18a2      	adds	r2, r4, r2
 80079f4:	4095      	lsls	r5, r2
 80079f6:	4093      	lsls	r3, r2
 80079f8:	1e6c      	subs	r4, r5, #1
 80079fa:	41a5      	sbcs	r5, r4
 80079fc:	40f0      	lsrs	r0, r6
 80079fe:	2207      	movs	r2, #7
 8007a00:	432b      	orrs	r3, r5
 8007a02:	4303      	orrs	r3, r0
 8007a04:	401a      	ands	r2, r3
 8007a06:	2700      	movs	r7, #0
 8007a08:	e79f      	b.n	800794a <__aeabi_d2f+0x3a>
 8007a0a:	46c0      	nop			; (mov r8, r8)
 8007a0c:	fffffc80 	.word	0xfffffc80
 8007a10:	fffffca2 	.word	0xfffffca2
 8007a14:	fffffc82 	.word	0xfffffc82

08007a18 <__clzsi2>:
 8007a18:	211c      	movs	r1, #28
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	041b      	lsls	r3, r3, #16
 8007a1e:	4298      	cmp	r0, r3
 8007a20:	d301      	bcc.n	8007a26 <__clzsi2+0xe>
 8007a22:	0c00      	lsrs	r0, r0, #16
 8007a24:	3910      	subs	r1, #16
 8007a26:	0a1b      	lsrs	r3, r3, #8
 8007a28:	4298      	cmp	r0, r3
 8007a2a:	d301      	bcc.n	8007a30 <__clzsi2+0x18>
 8007a2c:	0a00      	lsrs	r0, r0, #8
 8007a2e:	3908      	subs	r1, #8
 8007a30:	091b      	lsrs	r3, r3, #4
 8007a32:	4298      	cmp	r0, r3
 8007a34:	d301      	bcc.n	8007a3a <__clzsi2+0x22>
 8007a36:	0900      	lsrs	r0, r0, #4
 8007a38:	3904      	subs	r1, #4
 8007a3a:	a202      	add	r2, pc, #8	; (adr r2, 8007a44 <__clzsi2+0x2c>)
 8007a3c:	5c10      	ldrb	r0, [r2, r0]
 8007a3e:	1840      	adds	r0, r0, r1
 8007a40:	4770      	bx	lr
 8007a42:	46c0      	nop			; (mov r8, r8)
 8007a44:	02020304 	.word	0x02020304
 8007a48:	01010101 	.word	0x01010101
	...

08007a54 <__clzdi2>:
 8007a54:	b510      	push	{r4, lr}
 8007a56:	2900      	cmp	r1, #0
 8007a58:	d103      	bne.n	8007a62 <__clzdi2+0xe>
 8007a5a:	f7ff ffdd 	bl	8007a18 <__clzsi2>
 8007a5e:	3020      	adds	r0, #32
 8007a60:	e002      	b.n	8007a68 <__clzdi2+0x14>
 8007a62:	1c08      	adds	r0, r1, #0
 8007a64:	f7ff ffd8 	bl	8007a18 <__clzsi2>
 8007a68:	bd10      	pop	{r4, pc}
 8007a6a:	46c0      	nop			; (mov r8, r8)

08007a6c <bl_remapMemToSRAM>:
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;


void bl_remapMemToSRAM( void )
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
	uint32_t size = 0;
 8007a72:	2300      	movs	r3, #0
 8007a74:	603b      	str	r3, [r7, #0]
	int32_t vecIndex = 0;
 8007a76:	2300      	movs	r3, #0
 8007a78:	607b      	str	r3, [r7, #4]
	static uint32_t  *app_start = &__APPLICATION_ISR_START;

	size = ((&__APPLICATION_ISR_END) - (&__APPLICATION_ISR_START));
 8007a7a:	4a12      	ldr	r2, [pc, #72]	; (8007ac4 <bl_remapMemToSRAM+0x58>)
 8007a7c:	4b12      	ldr	r3, [pc, #72]	; (8007ac8 <bl_remapMemToSRAM+0x5c>)
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	109b      	asrs	r3, r3, #2
 8007a82:	603b      	str	r3, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007a84:	b672      	cpsid	i

	__disable_irq();
	for(vecIndex = 0; vecIndex < size; vecIndex++){
 8007a86:	2300      	movs	r3, #0
 8007a88:	607b      	str	r3, [r7, #4]
 8007a8a:	e00c      	b.n	8007aa6 <bl_remapMemToSRAM+0x3a>
		VectorTable[vecIndex] = app_start[vecIndex];
 8007a8c:	4b0f      	ldr	r3, [pc, #60]	; (8007acc <bl_remapMemToSRAM+0x60>)
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	18d3      	adds	r3, r2, r3
 8007a96:	6819      	ldr	r1, [r3, #0]
 8007a98:	4b0d      	ldr	r3, [pc, #52]	; (8007ad0 <bl_remapMemToSRAM+0x64>)
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	0092      	lsls	r2, r2, #2
 8007a9e:	50d1      	str	r1, [r2, r3]
	for(vecIndex = 0; vecIndex < size; vecIndex++){
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	607b      	str	r3, [r7, #4]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	683a      	ldr	r2, [r7, #0]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d8ee      	bhi.n	8007a8c <bl_remapMemToSRAM+0x20>
	}
	__HAL_SYSCFG_REMAPMEMORY_SRAM();
 8007aae:	4b09      	ldr	r3, [pc, #36]	; (8007ad4 <bl_remapMemToSRAM+0x68>)
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	4b08      	ldr	r3, [pc, #32]	; (8007ad4 <bl_remapMemToSRAM+0x68>)
 8007ab4:	2103      	movs	r1, #3
 8007ab6:	430a      	orrs	r2, r1
 8007ab8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007aba:	b662      	cpsie	i
	__enable_irq();
}
 8007abc:	46c0      	nop			; (mov r8, r8)
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	b002      	add	sp, #8
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	080050c0 	.word	0x080050c0
 8007ac8:	08005000 	.word	0x08005000
 8007acc:	20000108 	.word	0x20000108
 8007ad0:	20000000 	.word	0x20000000
 8007ad4:	40010000 	.word	0x40010000

08007ad8 <bl_prepare_jump>:

typedef void (*pFunction)(void);


void bl_prepare_jump()
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	af00      	add	r7, sp, #0

	HAL_DMA_Abort((&huart1)->hdmarx);
	HAL_DMA_Abort((&huart1)->hdmatx);
	HAL_DMA_Abort((&huart2)->hdmatx);
#endif
	HAL_NVIC_DisableIRQ(TIM7_IRQn);
 8007adc:	2012      	movs	r0, #18
 8007ade:	f002 fbc4 	bl	800a26a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(SysTick_IRQn);
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	425b      	negs	r3, r3
 8007ae6:	0018      	movs	r0, r3
 8007ae8:	f002 fbbf 	bl	800a26a <HAL_NVIC_DisableIRQ>
  __ASM volatile ("cpsid i" : : : "memory");
 8007aec:	b672      	cpsid	i

	__disable_irq();
	__HAL_SYSCFG_REMAPMEMORY_FLASH();
 8007aee:	4b04      	ldr	r3, [pc, #16]	; (8007b00 <bl_prepare_jump+0x28>)
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	4b03      	ldr	r3, [pc, #12]	; (8007b00 <bl_prepare_jump+0x28>)
 8007af4:	2103      	movs	r1, #3
 8007af6:	438a      	bics	r2, r1
 8007af8:	601a      	str	r2, [r3, #0]

}
 8007afa:	46c0      	nop			; (mov r8, r8)
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	40010000 	.word	0x40010000

08007b04 <bl_jump>:

extern uint32_t iapMailbox[2];

void bl_jump()
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
	bl_prepare_jump();
 8007b0a:	f7ff ffe5 	bl	8007ad8 <bl_prepare_jump>

	uint32_t bootloaderStack;
	pFunction bootloaderEntry;

	//Retrieve values
	bootloaderStack = *(__IO uint32_t *) (BL_ADDRESS);
 8007b0e:	2380      	movs	r3, #128	; 0x80
 8007b10:	051b      	lsls	r3, r3, #20
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	60fb      	str	r3, [r7, #12]
	bootloaderEntry = (pFunction) *(__IO uint32_t*) (BL_ADDRESS + 4);
 8007b16:	4b0a      	ldr	r3, [pc, #40]	; (8007b40 <bl_jump+0x3c>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	60bb      	str	r3, [r7, #8]

	// Write magics to mailbox
	iapMailbox[0] = 0x524F5441;
 8007b1c:	4b09      	ldr	r3, [pc, #36]	; (8007b44 <bl_jump+0x40>)
 8007b1e:	4a0a      	ldr	r2, [pc, #40]	; (8007b48 <bl_jump+0x44>)
 8007b20:	601a      	str	r2, [r3, #0]
	iapMailbox[1] = 0x54454b4e;
 8007b22:	4b08      	ldr	r3, [pc, #32]	; (8007b44 <bl_jump+0x40>)
 8007b24:	4a09      	ldr	r2, [pc, #36]	; (8007b4c <bl_jump+0x48>)
 8007b26:	605a      	str	r2, [r3, #4]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f383 8808 	msr	MSP, r3
	//Set a valid stack pointer for the bootloader
	__set_MSP(bootloaderStack);


	//Start the bootloader
	bootloaderEntry();
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	4798      	blx	r3
}
 8007b36:	46c0      	nop			; (mov r8, r8)
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	b004      	add	sp, #16
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	46c0      	nop			; (mov r8, r8)
 8007b40:	08000004 	.word	0x08000004
 8007b44:	20000100 	.word	0x20000100
 8007b48:	524f5441 	.word	0x524f5441
 8007b4c:	54454b4e 	.word	0x54454b4e

08007b50 <bus_get_max_ch>:
/**
 * Get Number of thermocouple channel
 * @return
 */
int bus_get_max_ch()
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	af00      	add	r7, sp, #0
	return CH_COUNT;
 8007b54:	2314      	movs	r3, #20
}
 8007b56:	0018      	movs	r0, r3
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <bus_get_ch_conf_length>:
/**
 * Get Channel configuration data length
 * @return
 */
int bus_get_ch_conf_length()
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	af00      	add	r7, sp, #0
	return CH_CONF_LENGTH;
 8007b60:	230c      	movs	r3, #12
}
 8007b62:	0018      	movs	r0, r3
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <bus_read_ch_sample>:
 * @param ch	channel number
 * @param data	pointer to data
 * @return
 */
int bus_read_ch_sample(uint8_t ch, uint8_t* data)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	0002      	movs	r2, r0
 8007b70:	6039      	str	r1, [r7, #0]
 8007b72:	1dfb      	adds	r3, r7, #7
 8007b74:	701a      	strb	r2, [r3, #0]
	memcpy(data, (unsigned char*)&chData[ch], CH_SAMPLE_SIZE);
 8007b76:	1dfb      	adds	r3, r7, #7
 8007b78:	781a      	ldrb	r2, [r3, #0]
 8007b7a:	0013      	movs	r3, r2
 8007b7c:	005b      	lsls	r3, r3, #1
 8007b7e:	189b      	adds	r3, r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4a06      	ldr	r2, [pc, #24]	; (8007b9c <bus_read_ch_sample+0x34>)
 8007b84:	1899      	adds	r1, r3, r2
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	220c      	movs	r2, #12
 8007b8a:	0018      	movs	r0, r3
 8007b8c:	f006 f96f 	bl	800de6e <memcpy>
	return CH_SAMPLE_SIZE;
 8007b90:	230c      	movs	r3, #12
}
 8007b92:	0018      	movs	r0, r3
 8007b94:	46bd      	mov	sp, r7
 8007b96:	b002      	add	sp, #8
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	46c0      	nop			; (mov r8, r8)
 8007b9c:	20000440 	.word	0x20000440

08007ba0 <bus_read_all_sample>:
 * Wrapper for reading sample from all channels
 * @param data	pointer to data
 * @return
 */
int bus_read_all_sample(uint8_t *data)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
	for (int i=0;i<CH_COUNT;i++)
 8007ba8:	2300      	movs	r3, #0
 8007baa:	60fb      	str	r3, [r7, #12]
 8007bac:	e00e      	b.n	8007bcc <bus_read_all_sample+0x2c>
	{
		data+=bus_read_ch_sample(i,data);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	0011      	movs	r1, r2
 8007bb6:	0018      	movs	r0, r3
 8007bb8:	f7ff ffd6 	bl	8007b68 <bus_read_ch_sample>
 8007bbc:	0003      	movs	r3, r0
 8007bbe:	001a      	movs	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	189b      	adds	r3, r3, r2
 8007bc4:	607b      	str	r3, [r7, #4]
	for (int i=0;i<CH_COUNT;i++)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2b13      	cmp	r3, #19
 8007bd0:	dded      	ble.n	8007bae <bus_read_all_sample+0xe>
	}
	return CH_COUNT * CH_SAMPLE_SIZE;
 8007bd2:	23f0      	movs	r3, #240	; 0xf0
}
 8007bd4:	0018      	movs	r0, r3
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	b004      	add	sp, #16
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <bus_read_ch_conf>:
 * @param ch	channel number
 * @param data	pointer to data
 * @return
 */
int bus_read_ch_conf(uint8_t ch, uint8_t *data)
{
 8007bdc:	b590      	push	{r4, r7, lr}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	0002      	movs	r2, r0
 8007be4:	6039      	str	r1, [r7, #0]
 8007be6:	1dfb      	adds	r3, r7, #7
 8007be8:	701a      	strb	r2, [r3, #0]
	memcpy(&data[0], (const char *)&(chConfig[ch].config), 4);
 8007bea:	1dfb      	adds	r3, r7, #7
 8007bec:	781a      	ldrb	r2, [r3, #0]
 8007bee:	0013      	movs	r3, r2
 8007bf0:	005b      	lsls	r3, r3, #1
 8007bf2:	189b      	adds	r3, r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4a16      	ldr	r2, [pc, #88]	; (8007c50 <bus_read_ch_conf+0x74>)
 8007bf8:	1899      	adds	r1, r3, r2
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	2204      	movs	r2, #4
 8007bfe:	0018      	movs	r0, r3
 8007c00:	f006 f935 	bl	800de6e <memcpy>
	memcpy(&data[4], &gConfig.ch_conf[ch].cjOffset.cjOffBytes[0], 4);
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	1d18      	adds	r0, r3, #4
 8007c08:	1dfb      	adds	r3, r7, #7
 8007c0a:	781a      	ldrb	r2, [r3, #0]
 8007c0c:	0013      	movs	r3, r2
 8007c0e:	00db      	lsls	r3, r3, #3
 8007c10:	1a9b      	subs	r3, r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	3318      	adds	r3, #24
 8007c16:	001a      	movs	r2, r3
 8007c18:	4b0e      	ldr	r3, [pc, #56]	; (8007c54 <bus_read_ch_conf+0x78>)
 8007c1a:	18d3      	adds	r3, r2, r3
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	2204      	movs	r2, #4
 8007c20:	0019      	movs	r1, r3
 8007c22:	f006 f924 	bl	800de6e <memcpy>
	data[8] = gConfig.ch_conf[ch].enabled;
 8007c26:	1dfb      	adds	r3, r7, #7
 8007c28:	781a      	ldrb	r2, [r3, #0]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	3308      	adds	r3, #8
 8007c2e:	0019      	movs	r1, r3
 8007c30:	4808      	ldr	r0, [pc, #32]	; (8007c54 <bus_read_ch_conf+0x78>)
 8007c32:	2420      	movs	r4, #32
 8007c34:	0013      	movs	r3, r2
 8007c36:	00db      	lsls	r3, r3, #3
 8007c38:	1a9b      	subs	r3, r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	18c3      	adds	r3, r0, r3
 8007c3e:	191b      	adds	r3, r3, r4
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	700b      	strb	r3, [r1, #0]

	return CH_CONF_LENGTH;
 8007c44:	230c      	movs	r3, #12
}
 8007c46:	0018      	movs	r0, r3
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	b003      	add	sp, #12
 8007c4c:	bd90      	pop	{r4, r7, pc}
 8007c4e:	46c0      	nop			; (mov r8, r8)
 8007c50:	20000350 	.word	0x20000350
 8007c54:	20000530 	.word	0x20000530

08007c58 <bus_read_all_conf>:
 * Wrapper for reading configuration from all channels
 * @param data	pointer to data
 * @return
 */
int bus_read_all_conf(uint8_t *data)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]

	for (int i=0;i<CH_COUNT;i++)
 8007c60:	2300      	movs	r3, #0
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	e00e      	b.n	8007c84 <bus_read_all_conf+0x2c>
	{
		data+=bus_read_ch_conf(i,data);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	0011      	movs	r1, r2
 8007c6e:	0018      	movs	r0, r3
 8007c70:	f7ff ffb4 	bl	8007bdc <bus_read_ch_conf>
 8007c74:	0003      	movs	r3, r0
 8007c76:	001a      	movs	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	189b      	adds	r3, r3, r2
 8007c7c:	607b      	str	r3, [r7, #4]
	for (int i=0;i<CH_COUNT;i++)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	3301      	adds	r3, #1
 8007c82:	60fb      	str	r3, [r7, #12]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2b13      	cmp	r3, #19
 8007c88:	dded      	ble.n	8007c66 <bus_read_all_conf+0xe>
	}
	return (CH_COUNT*CH_CONF_LENGTH);
 8007c8a:	23f0      	movs	r3, #240	; 0xf0
}
 8007c8c:	0018      	movs	r0, r3
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	b004      	add	sp, #16
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <bus_write_ch_conf>:
 * @param ch	channel number
 * @param data	pointer to data
 * @return
 */
int bus_write_ch_conf(uint8_t ch,uint8_t *data)
{
 8007c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af02      	add	r7, sp, #8
 8007c9a:	0002      	movs	r2, r0
 8007c9c:	6039      	str	r1, [r7, #0]
 8007c9e:	1dfb      	adds	r3, r7, #7
 8007ca0:	701a      	strb	r2, [r3, #0]
	memcpy((const char *)&(chConfig[ch].config), &data[0], 4);
 8007ca2:	1dfb      	adds	r3, r7, #7
 8007ca4:	781a      	ldrb	r2, [r3, #0]
 8007ca6:	0013      	movs	r3, r2
 8007ca8:	005b      	lsls	r3, r3, #1
 8007caa:	189b      	adds	r3, r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4a60      	ldr	r2, [pc, #384]	; (8007e30 <bus_write_ch_conf+0x19c>)
 8007cb0:	189b      	adds	r3, r3, r2
 8007cb2:	6839      	ldr	r1, [r7, #0]
 8007cb4:	2204      	movs	r2, #4
 8007cb6:	0018      	movs	r0, r3
 8007cb8:	f006 f8d9 	bl	800de6e <memcpy>
	memcpy(&gConfig.ch_conf[ch].cjOffset.cjOffBytes[0], &data[4], 4);
 8007cbc:	1dfb      	adds	r3, r7, #7
 8007cbe:	781a      	ldrb	r2, [r3, #0]
 8007cc0:	0013      	movs	r3, r2
 8007cc2:	00db      	lsls	r3, r3, #3
 8007cc4:	1a9b      	subs	r3, r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	3318      	adds	r3, #24
 8007cca:	001a      	movs	r2, r3
 8007ccc:	4b59      	ldr	r3, [pc, #356]	; (8007e34 <bus_write_ch_conf+0x1a0>)
 8007cce:	18d3      	adds	r3, r2, r3
 8007cd0:	1d18      	adds	r0, r3, #4
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	2204      	movs	r2, #4
 8007cd8:	0019      	movs	r1, r3
 8007cda:	f006 f8c8 	bl	800de6e <memcpy>

	gConfig.ch_conf[ch].enabled = data[8];
 8007cde:	1dfb      	adds	r3, r7, #7
 8007ce0:	781a      	ldrb	r2, [r3, #0]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	7a1c      	ldrb	r4, [r3, #8]
 8007ce6:	4953      	ldr	r1, [pc, #332]	; (8007e34 <bus_write_ch_conf+0x1a0>)
 8007ce8:	2020      	movs	r0, #32
 8007cea:	0013      	movs	r3, r2
 8007cec:	00db      	lsls	r3, r3, #3
 8007cee:	1a9b      	subs	r3, r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	18cb      	adds	r3, r1, r3
 8007cf4:	181b      	adds	r3, r3, r0
 8007cf6:	1c22      	adds	r2, r4, #0
 8007cf8:	701a      	strb	r2, [r3, #0]
	gConfig.ch_conf[ch].sensorType = chConfig[ch].config & (0x0F << 27) ;
 8007cfa:	1dfb      	adds	r3, r7, #7
 8007cfc:	781a      	ldrb	r2, [r3, #0]
 8007cfe:	494c      	ldr	r1, [pc, #304]	; (8007e30 <bus_write_ch_conf+0x19c>)
 8007d00:	0013      	movs	r3, r2
 8007d02:	005b      	lsls	r3, r3, #1
 8007d04:	189b      	adds	r3, r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	5859      	ldr	r1, [r3, r1]
 8007d0a:	1dfb      	adds	r3, r7, #7
 8007d0c:	781a      	ldrb	r2, [r3, #0]
 8007d0e:	23f0      	movs	r3, #240	; 0xf0
 8007d10:	05db      	lsls	r3, r3, #23
 8007d12:	4019      	ands	r1, r3
 8007d14:	4847      	ldr	r0, [pc, #284]	; (8007e34 <bus_write_ch_conf+0x1a0>)
 8007d16:	0013      	movs	r3, r2
 8007d18:	00db      	lsls	r3, r3, #3
 8007d1a:	1a9b      	subs	r3, r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	18c3      	adds	r3, r0, r3
 8007d20:	3308      	adds	r3, #8
 8007d22:	6019      	str	r1, [r3, #0]
	gConfig.ch_conf[ch].CJ_channel = chConfig[ch].config  & (0x0F << 22);
 8007d24:	1dfb      	adds	r3, r7, #7
 8007d26:	781a      	ldrb	r2, [r3, #0]
 8007d28:	4941      	ldr	r1, [pc, #260]	; (8007e30 <bus_write_ch_conf+0x19c>)
 8007d2a:	0013      	movs	r3, r2
 8007d2c:	005b      	lsls	r3, r3, #1
 8007d2e:	189b      	adds	r3, r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	5859      	ldr	r1, [r3, r1]
 8007d34:	1dfb      	adds	r3, r7, #7
 8007d36:	781a      	ldrb	r2, [r3, #0]
 8007d38:	23f0      	movs	r3, #240	; 0xf0
 8007d3a:	049b      	lsls	r3, r3, #18
 8007d3c:	4019      	ands	r1, r3
 8007d3e:	483d      	ldr	r0, [pc, #244]	; (8007e34 <bus_write_ch_conf+0x1a0>)
 8007d40:	0013      	movs	r3, r2
 8007d42:	00db      	lsls	r3, r3, #3
 8007d44:	1a9b      	subs	r3, r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	18c3      	adds	r3, r0, r3
 8007d4a:	330c      	adds	r3, #12
 8007d4c:	6019      	str	r1, [r3, #0]
	gConfig.ch_conf[ch].singleEnded = chConfig[ch].config & (0x01 << 21);
 8007d4e:	1dfb      	adds	r3, r7, #7
 8007d50:	781a      	ldrb	r2, [r3, #0]
 8007d52:	4937      	ldr	r1, [pc, #220]	; (8007e30 <bus_write_ch_conf+0x19c>)
 8007d54:	0013      	movs	r3, r2
 8007d56:	005b      	lsls	r3, r3, #1
 8007d58:	189b      	adds	r3, r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	5859      	ldr	r1, [r3, r1]
 8007d5e:	1dfb      	adds	r3, r7, #7
 8007d60:	781a      	ldrb	r2, [r3, #0]
 8007d62:	2380      	movs	r3, #128	; 0x80
 8007d64:	039b      	lsls	r3, r3, #14
 8007d66:	4019      	ands	r1, r3
 8007d68:	4832      	ldr	r0, [pc, #200]	; (8007e34 <bus_write_ch_conf+0x1a0>)
 8007d6a:	0013      	movs	r3, r2
 8007d6c:	00db      	lsls	r3, r3, #3
 8007d6e:	1a9b      	subs	r3, r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	18c3      	adds	r3, r0, r3
 8007d74:	3310      	adds	r3, #16
 8007d76:	6019      	str	r1, [r3, #0]
	gConfig.ch_conf[ch].openCktDetect = chConfig[ch].config  & (0x01 << 20);
 8007d78:	1dfb      	adds	r3, r7, #7
 8007d7a:	781a      	ldrb	r2, [r3, #0]
 8007d7c:	492c      	ldr	r1, [pc, #176]	; (8007e30 <bus_write_ch_conf+0x19c>)
 8007d7e:	0013      	movs	r3, r2
 8007d80:	005b      	lsls	r3, r3, #1
 8007d82:	189b      	adds	r3, r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	5859      	ldr	r1, [r3, r1]
 8007d88:	1dfb      	adds	r3, r7, #7
 8007d8a:	781a      	ldrb	r2, [r3, #0]
 8007d8c:	2380      	movs	r3, #128	; 0x80
 8007d8e:	035b      	lsls	r3, r3, #13
 8007d90:	4019      	ands	r1, r3
 8007d92:	4828      	ldr	r0, [pc, #160]	; (8007e34 <bus_write_ch_conf+0x1a0>)
 8007d94:	0013      	movs	r3, r2
 8007d96:	00db      	lsls	r3, r3, #3
 8007d98:	1a9b      	subs	r3, r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	18c3      	adds	r3, r0, r3
 8007d9e:	3314      	adds	r3, #20
 8007da0:	6019      	str	r1, [r3, #0]
	gConfig.ch_conf[ch].openCktDetectCurrent = chConfig[ch].config & (0x03 << 18);
 8007da2:	1dfb      	adds	r3, r7, #7
 8007da4:	781a      	ldrb	r2, [r3, #0]
 8007da6:	4922      	ldr	r1, [pc, #136]	; (8007e30 <bus_write_ch_conf+0x19c>)
 8007da8:	0013      	movs	r3, r2
 8007daa:	005b      	lsls	r3, r3, #1
 8007dac:	189b      	adds	r3, r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	5859      	ldr	r1, [r3, r1]
 8007db2:	1dfb      	adds	r3, r7, #7
 8007db4:	781a      	ldrb	r2, [r3, #0]
 8007db6:	23c0      	movs	r3, #192	; 0xc0
 8007db8:	031b      	lsls	r3, r3, #12
 8007dba:	4019      	ands	r1, r3
 8007dbc:	481d      	ldr	r0, [pc, #116]	; (8007e34 <bus_write_ch_conf+0x1a0>)
 8007dbe:	0013      	movs	r3, r2
 8007dc0:	00db      	lsls	r3, r3, #3
 8007dc2:	1a9b      	subs	r3, r3, r2
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	18c3      	adds	r3, r0, r3
 8007dc8:	3318      	adds	r3, #24
 8007dca:	6019      	str	r1, [r3, #0]

	LTC_TC_writeChannelConfig(ch, chConfig[ch].config);
 8007dcc:	1dfb      	adds	r3, r7, #7
 8007dce:	7818      	ldrb	r0, [r3, #0]
 8007dd0:	1dfb      	adds	r3, r7, #7
 8007dd2:	781a      	ldrb	r2, [r3, #0]
 8007dd4:	4916      	ldr	r1, [pc, #88]	; (8007e30 <bus_write_ch_conf+0x19c>)
 8007dd6:	0013      	movs	r3, r2
 8007dd8:	005b      	lsls	r3, r3, #1
 8007dda:	189b      	adds	r3, r3, r2
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	585b      	ldr	r3, [r3, r1]
 8007de0:	0019      	movs	r1, r3
 8007de2:	f000 fd1f 	bl	8008824 <LTC_TC_writeChannelConfig>

	dbg_printf("Ch : %d Write config : %d offset : %f\n", ch, chConfig[ch].config, gConfig.ch_conf[ch].cjOffset.cjOff);
 8007de6:	1dfb      	adds	r3, r7, #7
 8007de8:	781d      	ldrb	r5, [r3, #0]
 8007dea:	1dfb      	adds	r3, r7, #7
 8007dec:	781a      	ldrb	r2, [r3, #0]
 8007dee:	4910      	ldr	r1, [pc, #64]	; (8007e30 <bus_write_ch_conf+0x19c>)
 8007df0:	0013      	movs	r3, r2
 8007df2:	005b      	lsls	r3, r3, #1
 8007df4:	189b      	adds	r3, r3, r2
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	585e      	ldr	r6, [r3, r1]
 8007dfa:	1dfb      	adds	r3, r7, #7
 8007dfc:	781a      	ldrb	r2, [r3, #0]
 8007dfe:	490d      	ldr	r1, [pc, #52]	; (8007e34 <bus_write_ch_conf+0x1a0>)
 8007e00:	0013      	movs	r3, r2
 8007e02:	00db      	lsls	r3, r3, #3
 8007e04:	1a9b      	subs	r3, r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	18cb      	adds	r3, r1, r3
 8007e0a:	331c      	adds	r3, #28
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	1c18      	adds	r0, r3, #0
 8007e10:	f7ff fd2c 	bl	800786c <__aeabi_f2d>
 8007e14:	0003      	movs	r3, r0
 8007e16:	000c      	movs	r4, r1
 8007e18:	4807      	ldr	r0, [pc, #28]	; (8007e38 <bus_write_ch_conf+0x1a4>)
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	9401      	str	r4, [sp, #4]
 8007e1e:	0032      	movs	r2, r6
 8007e20:	0029      	movs	r1, r5
 8007e22:	f006 fe91 	bl	800eb48 <iprintf>

	return CH_CONF_LENGTH;
 8007e26:	230c      	movs	r3, #12
}
 8007e28:	0018      	movs	r0, r3
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	b003      	add	sp, #12
 8007e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e30:	20000350 	.word	0x20000350
 8007e34:	20000530 	.word	0x20000530
 8007e38:	080123c0 	.word	0x080123c0

08007e3c <bus_write_all_conf>:
 * @param data	pointer to data
 * @param length (unusued)
 * @return
 */
int bus_write_all_conf(uint8_t *data,uint32_t length)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
	for (int i=0;i<CH_COUNT;i++)
 8007e46:	2300      	movs	r3, #0
 8007e48:	60fb      	str	r3, [r7, #12]
 8007e4a:	e00e      	b.n	8007e6a <bus_write_all_conf+0x2e>
	{
		data+=bus_write_ch_conf(i,data);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	0011      	movs	r1, r2
 8007e54:	0018      	movs	r0, r3
 8007e56:	f7ff ff1d 	bl	8007c94 <bus_write_ch_conf>
 8007e5a:	0003      	movs	r3, r0
 8007e5c:	001a      	movs	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	189b      	adds	r3, r3, r2
 8007e62:	607b      	str	r3, [r7, #4]
	for (int i=0;i<CH_COUNT;i++)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	3301      	adds	r3, #1
 8007e68:	60fb      	str	r3, [r7, #12]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2b13      	cmp	r3, #19
 8007e6e:	dded      	ble.n	8007e4c <bus_write_all_conf+0x10>
	}

	return CH_COUNT * CH_CONF_LENGTH;
 8007e70:	23f0      	movs	r3, #240	; 0xf0
}
 8007e72:	0018      	movs	r0, r3
 8007e74:	46bd      	mov	sp, r7
 8007e76:	b004      	add	sp, #16
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <bus_save_conf>:
/**
 * bus save conf
 * @return
 */
int bus_save_conf()
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	af00      	add	r7, sp, #0
	conf_save();
 8007e7e:	f000 f87d 	bl	8007f7c <conf_save>
	return 0;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	0018      	movs	r0, r3
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <bus_entering_bootlaoder_hook>:
/*****************************************************************************/
/**
 * bus_entering_bootlaoder_hook
 */
void bus_entering_bootlaoder_hook()
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	af00      	add	r7, sp, #0

}
 8007e8e:	46c0      	nop			; (mov r8, r8)
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <bus_ping_received_hook>:
/*****************************************************************************/
/**
 * bus_ping_received_hook
 */
void bus_ping_received_hook()
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	af00      	add	r7, sp, #0
	pingReceived = 1;
 8007e98:	4b05      	ldr	r3, [pc, #20]	; (8007eb0 <bus_ping_received_hook+0x1c>)
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	701a      	strb	r2, [r3, #0]
	pingTime = HAL_GetTick();
 8007e9e:	f002 f8c7 	bl	800a030 <HAL_GetTick>
 8007ea2:	0002      	movs	r2, r0
 8007ea4:	4b03      	ldr	r3, [pc, #12]	; (8007eb4 <bus_ping_received_hook+0x20>)
 8007ea6:	601a      	str	r2, [r3, #0]
}
 8007ea8:	46c0      	nop			; (mov r8, r8)
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	46c0      	nop			; (mov r8, r8)
 8007eb0:	20000318 	.word	0x20000318
 8007eb4:	2000010c 	.word	0x2000010c

08007eb8 <bus_reseting_hook>:
/*****************************************************************************/
/**
 * bus_reseting_hook
 */
void bus_reseting_hook()
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	af00      	add	r7, sp, #0

}
 8007ebc:	46c0      	nop			; (mov r8, r8)
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <bus_rd_info_hook>:
 * bus_rd_info_hook
 * @param data
 * @return
 */
int bus_rd_info_hook(uint8_t *data)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b082      	sub	sp, #8
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]

	return 0;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	0018      	movs	r0, r3
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	b002      	add	sp, #8
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <conf_writeconf>:

extern uint32_t __CONFIG_START;
extern const tConfig DefaultConfig;

void conf_writeconf (tConfig * c)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
	static tConfig  *conf = (tConfig *)&__CONFIG_START;
	for (int i=0;i<3;i++)
 8007edc:	2300      	movs	r3, #0
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	e017      	b.n	8007f12 <conf_writeconf+0x3e>
	{
		FLASH_If_Erase((uint32_t)&__CONFIG_START,FLASH_PAGE_SIZE); 								//Delete 1 page
 8007ee2:	4b10      	ldr	r3, [pc, #64]	; (8007f24 <conf_writeconf+0x50>)
 8007ee4:	2180      	movs	r1, #128	; 0x80
 8007ee6:	0018      	movs	r0, r3
 8007ee8:	f000 f928 	bl	800813c <FLASH_If_Erase>
		FLASH_If_Write((uint32_t)&__CONFIG_START,(uint32_t *)c,sizeof(tConfig)/sizeof(uint32_t));
 8007eec:	4b0d      	ldr	r3, [pc, #52]	; (8007f24 <conf_writeconf+0x50>)
 8007eee:	6879      	ldr	r1, [r7, #4]
 8007ef0:	228e      	movs	r2, #142	; 0x8e
 8007ef2:	0018      	movs	r0, r3
 8007ef4:	f000 f957 	bl	80081a6 <FLASH_If_Write>
		if (memcmp(conf,c,sizeof(tConfig))==0)
 8007ef8:	4b0b      	ldr	r3, [pc, #44]	; (8007f28 <conf_writeconf+0x54>)
 8007efa:	6818      	ldr	r0, [r3, #0]
 8007efc:	238e      	movs	r3, #142	; 0x8e
 8007efe:	009a      	lsls	r2, r3, #2
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	0019      	movs	r1, r3
 8007f04:	f005 ffa4 	bl	800de50 <memcmp>
 8007f08:	1e03      	subs	r3, r0, #0
 8007f0a:	d006      	beq.n	8007f1a <conf_writeconf+0x46>
	for (int i=0;i<3;i++)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	60fb      	str	r3, [r7, #12]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	dde4      	ble.n	8007ee2 <conf_writeconf+0xe>
		{
			break;
		}
	}

}
 8007f18:	e000      	b.n	8007f1c <conf_writeconf+0x48>
			break;
 8007f1a:	46c0      	nop			; (mov r8, r8)
}
 8007f1c:	46c0      	nop			; (mov r8, r8)
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	b004      	add	sp, #16
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	0802f000 	.word	0x0802f000
 8007f28:	20000110 	.word	0x20000110

08007f2c <conf_checkandload>:

void conf_checkandload()
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	af00      	add	r7, sp, #0
	static tConfig  *conf = (tConfig *)&__CONFIG_START;

	if ((memcmp(&conf->magic,&DefaultConfig.magic,4)!= 0) || (conf->vers != DefaultConfig.vers))
 8007f30:	4b0f      	ldr	r3, [pc, #60]	; (8007f70 <conf_checkandload+0x44>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	0018      	movs	r0, r3
 8007f36:	4b0f      	ldr	r3, [pc, #60]	; (8007f74 <conf_checkandload+0x48>)
 8007f38:	2204      	movs	r2, #4
 8007f3a:	0019      	movs	r1, r3
 8007f3c:	f005 ff88 	bl	800de50 <memcmp>
 8007f40:	1e03      	subs	r3, r0, #0
 8007f42:	d106      	bne.n	8007f52 <conf_checkandload+0x26>
 8007f44:	4b0a      	ldr	r3, [pc, #40]	; (8007f70 <conf_checkandload+0x44>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	685a      	ldr	r2, [r3, #4]
 8007f4a:	4b0a      	ldr	r3, [pc, #40]	; (8007f74 <conf_checkandload+0x48>)
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d003      	beq.n	8007f5a <conf_checkandload+0x2e>
	{
		conf_writeconf((tConfig *)&DefaultConfig);
 8007f52:	4b08      	ldr	r3, [pc, #32]	; (8007f74 <conf_checkandload+0x48>)
 8007f54:	0018      	movs	r0, r3
 8007f56:	f7ff ffbd 	bl	8007ed4 <conf_writeconf>
	}
	memcpy(&gConfig,conf,sizeof(tConfig));
 8007f5a:	4b05      	ldr	r3, [pc, #20]	; (8007f70 <conf_checkandload+0x44>)
 8007f5c:	6819      	ldr	r1, [r3, #0]
 8007f5e:	238e      	movs	r3, #142	; 0x8e
 8007f60:	009a      	lsls	r2, r3, #2
 8007f62:	4b05      	ldr	r3, [pc, #20]	; (8007f78 <conf_checkandload+0x4c>)
 8007f64:	0018      	movs	r0, r3
 8007f66:	f005 ff82 	bl	800de6e <memcpy>
}
 8007f6a:	46c0      	nop			; (mov r8, r8)
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	20000114 	.word	0x20000114
 8007f74:	0801259c 	.word	0x0801259c
 8007f78:	20000530 	.word	0x20000530

08007f7c <conf_save>:

void conf_save()
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	af00      	add	r7, sp, #0
	static tConfig  *conf = (tConfig *)&__CONFIG_START;

	memcpy(&gConfig.magic,&DefaultConfig.magic,4); 		//Ensure that magic and vers is the right value
 8007f80:	4b07      	ldr	r3, [pc, #28]	; (8007fa0 <conf_save+0x24>)
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	4b07      	ldr	r3, [pc, #28]	; (8007fa4 <conf_save+0x28>)
 8007f86:	601a      	str	r2, [r3, #0]
	gConfig.vers = DefaultConfig.vers;
 8007f88:	4b05      	ldr	r3, [pc, #20]	; (8007fa0 <conf_save+0x24>)
 8007f8a:	685a      	ldr	r2, [r3, #4]
 8007f8c:	4b05      	ldr	r3, [pc, #20]	; (8007fa4 <conf_save+0x28>)
 8007f8e:	605a      	str	r2, [r3, #4]

	/*if (memcmp(&gConfig,conf,sizeof(tConfig))==0)		// Flash configuration and ram configuration matches so don't do anything
		return;
*/

	conf_writeconf(&gConfig);
 8007f90:	4b04      	ldr	r3, [pc, #16]	; (8007fa4 <conf_save+0x28>)
 8007f92:	0018      	movs	r0, r3
 8007f94:	f7ff ff9e 	bl	8007ed4 <conf_writeconf>
}
 8007f98:	46c0      	nop			; (mov r8, r8)
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	46c0      	nop			; (mov r8, r8)
 8007fa0:	0801259c 	.word	0x0801259c
 8007fa4:	20000530 	.word	0x20000530

08007fa8 <conf_init>:
	memcpy(&gConfig,conf,sizeof(tConfig));
}


void conf_init()
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	af00      	add	r7, sp, #0
	FLASH_If_Init();
 8007fac:	f000 f8b6 	bl	800811c <FLASH_If_Init>
	conf_checkandload();
 8007fb0:	f7ff ffbc 	bl	8007f2c <conf_checkandload>
}
 8007fb4:	46c0      	nop			; (mov r8, r8)
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
	...

08007fbc <crc_ccitt_byte>:
	0x6b46, 0x7acf, 0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9,
	0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330,
	0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78
};
static inline unsigned short crc_ccitt_byte(uint16_t crc, const uint8_t c)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	0002      	movs	r2, r0
 8007fc4:	1dbb      	adds	r3, r7, #6
 8007fc6:	801a      	strh	r2, [r3, #0]
 8007fc8:	1d7b      	adds	r3, r7, #5
 8007fca:	1c0a      	adds	r2, r1, #0
 8007fcc:	701a      	strb	r2, [r3, #0]
	return (crc >> 8) ^ crc_ccitt_table[(crc ^ c) & 0xff];
 8007fce:	1dbb      	adds	r3, r7, #6
 8007fd0:	881b      	ldrh	r3, [r3, #0]
 8007fd2:	0a1b      	lsrs	r3, r3, #8
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	1dbb      	adds	r3, r7, #6
 8007fd8:	8819      	ldrh	r1, [r3, #0]
 8007fda:	1d7b      	adds	r3, r7, #5
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	404b      	eors	r3, r1
 8007fe0:	21ff      	movs	r1, #255	; 0xff
 8007fe2:	4019      	ands	r1, r3
 8007fe4:	4b04      	ldr	r3, [pc, #16]	; (8007ff8 <crc_ccitt_byte+0x3c>)
 8007fe6:	0049      	lsls	r1, r1, #1
 8007fe8:	5acb      	ldrh	r3, [r1, r3]
 8007fea:	4053      	eors	r3, r2
 8007fec:	b29b      	uxth	r3, r3
}
 8007fee:	0018      	movs	r0, r3
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	b002      	add	sp, #8
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	46c0      	nop			; (mov r8, r8)
 8007ff8:	080127d4 	.word	0x080127d4

08007ffc <crc16>:
unsigned short crc16(unsigned char *data_p, unsigned short length)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	000a      	movs	r2, r1
 8008006:	1cbb      	adds	r3, r7, #2
 8008008:	801a      	strh	r2, [r3, #0]
	unsigned int crc = 0x0000;
 800800a:	2300      	movs	r3, #0
 800800c:	60fb      	str	r3, [r7, #12]
	while (length--)
 800800e:	e00a      	b.n	8008026 <crc16+0x2a>
		crc = crc_ccitt_byte(crc, *data_p++);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	b298      	uxth	r0, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	1c5a      	adds	r2, r3, #1
 8008018:	607a      	str	r2, [r7, #4]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	0019      	movs	r1, r3
 800801e:	f7ff ffcd 	bl	8007fbc <crc_ccitt_byte>
 8008022:	0003      	movs	r3, r0
 8008024:	60fb      	str	r3, [r7, #12]
	while (length--)
 8008026:	1cbb      	adds	r3, r7, #2
 8008028:	881b      	ldrh	r3, [r3, #0]
 800802a:	1cba      	adds	r2, r7, #2
 800802c:	1e59      	subs	r1, r3, #1
 800802e:	8011      	strh	r1, [r2, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1ed      	bne.n	8008010 <crc16+0x14>
	return (crc>>8) | (crc<<8);;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	0a1b      	lsrs	r3, r3, #8
 8008038:	b29a      	uxth	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	b29b      	uxth	r3, r3
 800803e:	021b      	lsls	r3, r3, #8
 8008040:	b29b      	uxth	r3, r3
 8008042:	4313      	orrs	r3, r2
 8008044:	b29b      	uxth	r3, r3
}
 8008046:	0018      	movs	r0, r3
 8008048:	46bd      	mov	sp, r7
 800804a:	b004      	add	sp, #16
 800804c:	bd80      	pop	{r7, pc}
	...

08008050 <debug_init>:

unsigned int dbg_tx_count = 0;


void debug_init()
{
 8008050:	b580      	push	{r7, lr}
 8008052:	af00      	add	r7, sp, #0
	memset(dbg_tx_buffer,0,DEBUG_TX_BUFFER_SIZE);
 8008054:	2380      	movs	r3, #128	; 0x80
 8008056:	00da      	lsls	r2, r3, #3
 8008058:	4b05      	ldr	r3, [pc, #20]	; (8008070 <debug_init+0x20>)
 800805a:	2100      	movs	r1, #0
 800805c:	0018      	movs	r0, r3
 800805e:	f005 ff0f 	bl	800de80 <memset>
	dbg_tx_count = 0;
 8008062:	4b04      	ldr	r3, [pc, #16]	; (8008074 <debug_init+0x24>)
 8008064:	2200      	movs	r2, #0
 8008066:	601a      	str	r2, [r3, #0]
}
 8008068:	46c0      	nop			; (mov r8, r8)
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	46c0      	nop			; (mov r8, r8)
 8008070:	20000b68 	.word	0x20000b68
 8008074:	2000031c 	.word	0x2000031c

08008078 <debug_transmit_buffer>:

void debug_transmit_buffer()
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
	uint32_t count = 0;
 800807e:	2300      	movs	r3, #0
 8008080:	607b      	str	r3, [r7, #4]

	memcpy(dbg_tx_dma_buffer,dbg_tx_buffer,dbg_tx_count);
 8008082:	4b0b      	ldr	r3, [pc, #44]	; (80080b0 <debug_transmit_buffer+0x38>)
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	490b      	ldr	r1, [pc, #44]	; (80080b4 <debug_transmit_buffer+0x3c>)
 8008088:	4b0b      	ldr	r3, [pc, #44]	; (80080b8 <debug_transmit_buffer+0x40>)
 800808a:	0018      	movs	r0, r3
 800808c:	f005 feef 	bl	800de6e <memcpy>
	dbg_tx(dbg_tx_dma_buffer,dbg_tx_count);
 8008090:	4b07      	ldr	r3, [pc, #28]	; (80080b0 <debug_transmit_buffer+0x38>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	b29a      	uxth	r2, r3
 8008096:	4908      	ldr	r1, [pc, #32]	; (80080b8 <debug_transmit_buffer+0x40>)
 8008098:	4b08      	ldr	r3, [pc, #32]	; (80080bc <debug_transmit_buffer+0x44>)
 800809a:	0018      	movs	r0, r3
 800809c:	f004 fd44 	bl	800cb28 <HAL_UART_Transmit_DMA>
	dbg_tx_count = 0;
 80080a0:	4b03      	ldr	r3, [pc, #12]	; (80080b0 <debug_transmit_buffer+0x38>)
 80080a2:	2200      	movs	r2, #0
 80080a4:	601a      	str	r2, [r3, #0]
}
 80080a6:	46c0      	nop			; (mov r8, r8)
 80080a8:	46bd      	mov	sp, r7
 80080aa:	b002      	add	sp, #8
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	46c0      	nop			; (mov r8, r8)
 80080b0:	2000031c 	.word	0x2000031c
 80080b4:	20000b68 	.word	0x20000b68
 80080b8:	20000768 	.word	0x20000768
 80080bc:	2000111c 	.word	0x2000111c

080080c0 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
	if (ch != '\r')
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2b0d      	cmp	r3, #13
 80080cc:	d01a      	beq.n	8008104 <__io_putchar+0x44>
	{
		dbg_tx_buffer[dbg_tx_count++] = ch;
 80080ce:	4b10      	ldr	r3, [pc, #64]	; (8008110 <__io_putchar+0x50>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	1c59      	adds	r1, r3, #1
 80080d4:	4a0e      	ldr	r2, [pc, #56]	; (8008110 <__io_putchar+0x50>)
 80080d6:	6011      	str	r1, [r2, #0]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	b2d1      	uxtb	r1, r2
 80080dc:	4a0d      	ldr	r2, [pc, #52]	; (8008114 <__io_putchar+0x54>)
 80080de:	54d1      	strb	r1, [r2, r3]

		if ((ch == '\n') || (dbg_tx_count >= DEBUG_TX_BUFFER_SIZE))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2b0a      	cmp	r3, #10
 80080e4:	d004      	beq.n	80080f0 <__io_putchar+0x30>
 80080e6:	4b0a      	ldr	r3, [pc, #40]	; (8008110 <__io_putchar+0x50>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a0b      	ldr	r2, [pc, #44]	; (8008118 <__io_putchar+0x58>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d909      	bls.n	8008104 <__io_putchar+0x44>
		{
			dbg_tx_buffer[dbg_tx_count++] = '\r';
 80080f0:	4b07      	ldr	r3, [pc, #28]	; (8008110 <__io_putchar+0x50>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	1c59      	adds	r1, r3, #1
 80080f6:	4a06      	ldr	r2, [pc, #24]	; (8008110 <__io_putchar+0x50>)
 80080f8:	6011      	str	r1, [r2, #0]
 80080fa:	4a06      	ldr	r2, [pc, #24]	; (8008114 <__io_putchar+0x54>)
 80080fc:	210d      	movs	r1, #13
 80080fe:	54d1      	strb	r1, [r2, r3]
			debug_transmit_buffer();
 8008100:	f7ff ffba 	bl	8008078 <debug_transmit_buffer>
		}
	}

	return ch;
 8008104:	687b      	ldr	r3, [r7, #4]
}
 8008106:	0018      	movs	r0, r3
 8008108:	46bd      	mov	sp, r7
 800810a:	b002      	add	sp, #8
 800810c:	bd80      	pop	{r7, pc}
 800810e:	46c0      	nop			; (mov r8, r8)
 8008110:	2000031c 	.word	0x2000031c
 8008114:	20000b68 	.word	0x20000b68
 8008118:	000003ff 	.word	0x000003ff

0800811c <FLASH_If_Init>:
 * @brief  Unlocks Flash for write access
 * @param  None
 * @retval None
 */
void FLASH_If_Init(void)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	af00      	add	r7, sp, #0
	/* Unlock the Program memory */
	HAL_FLASH_Unlock();
 8008120:	f002 fb88 	bl	800a834 <HAL_FLASH_Unlock>

	/* Clear all FLASH flags */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_PGAERR | FLASH_FLAG_WRPERR);
 8008124:	4b03      	ldr	r3, [pc, #12]	; (8008134 <FLASH_If_Init+0x18>)
 8008126:	4a04      	ldr	r2, [pc, #16]	; (8008138 <FLASH_If_Init+0x1c>)
 8008128:	619a      	str	r2, [r3, #24]
	/* Unlock the Program memory */
	HAL_FLASH_Lock();
 800812a:	f002 fbd3 	bl	800a8d4 <HAL_FLASH_Lock>
}
 800812e:	46c0      	nop			; (mov r8, r8)
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	40022000 	.word	0x40022000
 8008138:	00000302 	.word	0x00000302

0800813c <FLASH_If_Erase>:
 * @param  start: start of user flash area
 * @retval FLASHIF_OK : user flash area successfully erased
 *         FLASHIF_ERASEKO : error occurred
 */
uint32_t FLASH_If_Erase(uint32_t start,uint32_t length)
{
 800813c:	b5b0      	push	{r4, r5, r7, lr}
 800813e:	b088      	sub	sp, #32
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
	uint32_t NbrOfPages = 0;
 8008146:	2300      	movs	r3, #0
 8008148:	61fb      	str	r3, [r7, #28]
	uint32_t PageError = 0;
 800814a:	2300      	movs	r3, #0
 800814c:	617b      	str	r3, [r7, #20]
	FLASH_EraseInitTypeDef pEraseInit;
	HAL_StatusTypeDef status = HAL_OK;
 800814e:	241b      	movs	r4, #27
 8008150:	193b      	adds	r3, r7, r4
 8008152:	2200      	movs	r2, #0
 8008154:	701a      	strb	r2, [r3, #0]

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8008156:	f002 fb6d 	bl	800a834 <HAL_FLASH_Unlock>

	/* Get the sector where start the user flash area */
	NbrOfPages = length/FLASH_PAGE_SIZE;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	09db      	lsrs	r3, r3, #7
 800815e:	61fb      	str	r3, [r7, #28]

	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8008160:	2108      	movs	r1, #8
 8008162:	187b      	adds	r3, r7, r1
 8008164:	2200      	movs	r2, #0
 8008166:	601a      	str	r2, [r3, #0]
	pEraseInit.PageAddress = start;
 8008168:	187b      	adds	r3, r7, r1
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	605a      	str	r2, [r3, #4]
	//pEraseInit.Banks = FLASH_BANK_1;
	pEraseInit.NbPages = NbrOfPages;
 800816e:	187b      	adds	r3, r7, r1
 8008170:	69fa      	ldr	r2, [r7, #28]
 8008172:	609a      	str	r2, [r3, #8]
	status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8008174:	0025      	movs	r5, r4
 8008176:	193c      	adds	r4, r7, r4
 8008178:	2314      	movs	r3, #20
 800817a:	18fa      	adds	r2, r7, r3
 800817c:	187b      	adds	r3, r7, r1
 800817e:	0011      	movs	r1, r2
 8008180:	0018      	movs	r0, r3
 8008182:	f002 fcc9 	bl	800ab18 <HAL_FLASHEx_Erase>
 8008186:	0003      	movs	r3, r0
 8008188:	7023      	strb	r3, [r4, #0]

	/* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 800818a:	f002 fba3 	bl	800a8d4 <HAL_FLASH_Lock>

	if (status != HAL_OK)
 800818e:	002c      	movs	r4, r5
 8008190:	193b      	adds	r3, r7, r4
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d001      	beq.n	800819c <FLASH_If_Erase+0x60>
	{
		/* Error occurred while page erase */
		return FLASHIF_ERASEKO;
 8008198:	2301      	movs	r3, #1
 800819a:	e000      	b.n	800819e <FLASH_If_Erase+0x62>
	}

	return FLASHIF_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	0018      	movs	r0, r3
 80081a0:	46bd      	mov	sp, r7
 80081a2:	b008      	add	sp, #32
 80081a4:	bdb0      	pop	{r4, r5, r7, pc}

080081a6 <FLASH_If_Write>:
 * @retval uint32_t 0: Data successfully written to Flash memory
 *         1: Error occurred while writing data in Flash memory
 *         2: Written Data in flash memory is different from expected one
 */
uint32_t FLASH_If_Write(uint32_t destination, uint32_t *p_source, uint32_t length)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b086      	sub	sp, #24
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	60f8      	str	r0, [r7, #12]
 80081ae:	60b9      	str	r1, [r7, #8]
 80081b0:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 80081b2:	2300      	movs	r3, #0
 80081b4:	617b      	str	r3, [r7, #20]

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80081b6:	f002 fb3d 	bl	800a834 <HAL_FLASH_Unlock>

	for (i = 0; i < length; i++)
 80081ba:	2300      	movs	r3, #0
 80081bc:	617b      	str	r3, [r7, #20]
 80081be:	e01f      	b.n	8008200 <FLASH_If_Write+0x5a>
	{
		/* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, destination, (p_source[i])) == HAL_OK)
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	18d3      	adds	r3, r2, r3
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	0019      	movs	r1, r3
 80081ce:	2002      	movs	r0, #2
 80081d0:	f002 faf4 	bl	800a7bc <HAL_FLASH_Program>
 80081d4:	1e03      	subs	r3, r0, #0
 80081d6:	d10e      	bne.n	80081f6 <FLASH_If_Write+0x50>
		{
			/* Check the written value */
			if (*(uint32_t*)destination != *(uint32_t*)(p_source+i))
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	68b9      	ldr	r1, [r7, #8]
 80081e2:	18cb      	adds	r3, r1, r3
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d001      	beq.n	80081ee <FLASH_If_Write+0x48>
			{
				/* Flash content doesn't match SRAM content */
				return(FLASHIF_WRITINGCTRL_ERROR);
 80081ea:	2302      	movs	r3, #2
 80081ec:	e00f      	b.n	800820e <FLASH_If_Write+0x68>
			}
			/* Increment FLASH destination address */
			destination += 4;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	3304      	adds	r3, #4
 80081f2:	60fb      	str	r3, [r7, #12]
 80081f4:	e001      	b.n	80081fa <FLASH_If_Write+0x54>
		}
		else
		{
			/* Error occurred while writing data in Flash memory */
			return (FLASHIF_WRITING_ERROR);
 80081f6:	2303      	movs	r3, #3
 80081f8:	e009      	b.n	800820e <FLASH_If_Write+0x68>
	for (i = 0; i < length; i++)
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	3301      	adds	r3, #1
 80081fe:	617b      	str	r3, [r7, #20]
 8008200:	697a      	ldr	r2, [r7, #20]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	429a      	cmp	r2, r3
 8008206:	d3db      	bcc.n	80081c0 <FLASH_If_Write+0x1a>
		}
	}

	/* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8008208:	f002 fb64 	bl	800a8d4 <HAL_FLASH_Lock>

	return (FLASHIF_OK);
 800820c:	2300      	movs	r3, #0
}
 800820e:	0018      	movs	r0, r3
 8008210:	46bd      	mov	sp, r7
 8008212:	b006      	add	sp, #24
 8008214:	bd80      	pop	{r7, pc}

08008216 <GPIO_Configure>:
#include "stm32l0xx_hal.h"
#include "rt_config.h"

void GPIO_Configure(const tGPIOInit *conf, uint32_t count)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b088      	sub	sp, #32
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
 800821e:	6039      	str	r1, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct;

	for (int i=0;i<count;i++)
 8008220:	2300      	movs	r3, #0
 8008222:	61fb      	str	r3, [r7, #28]
 8008224:	e067      	b.n	80082f6 <GPIO_Configure+0xe0>
	{
		//if this pin is a output pin write initial stat for this pin befor configuring as an output.
		if (conf[i].mode == GPIO_MODE_OUTPUT_PP)
 8008226:	69fa      	ldr	r2, [r7, #28]
 8008228:	0013      	movs	r3, r2
 800822a:	005b      	lsls	r3, r3, #1
 800822c:	189b      	adds	r3, r3, r2
 800822e:	00db      	lsls	r3, r3, #3
 8008230:	001a      	movs	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	189b      	adds	r3, r3, r2
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d11d      	bne.n	8008278 <GPIO_Configure+0x62>
			HAL_GPIO_WritePin(conf[i].port,conf[i].pin,conf[i].initialState);
 800823c:	69fa      	ldr	r2, [r7, #28]
 800823e:	0013      	movs	r3, r2
 8008240:	005b      	lsls	r3, r3, #1
 8008242:	189b      	adds	r3, r3, r2
 8008244:	00db      	lsls	r3, r3, #3
 8008246:	001a      	movs	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	189b      	adds	r3, r3, r2
 800824c:	6818      	ldr	r0, [r3, #0]
 800824e:	69fa      	ldr	r2, [r7, #28]
 8008250:	0013      	movs	r3, r2
 8008252:	005b      	lsls	r3, r3, #1
 8008254:	189b      	adds	r3, r3, r2
 8008256:	00db      	lsls	r3, r3, #3
 8008258:	001a      	movs	r2, r3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	189b      	adds	r3, r3, r2
 800825e:	8899      	ldrh	r1, [r3, #4]
 8008260:	69fa      	ldr	r2, [r7, #28]
 8008262:	0013      	movs	r3, r2
 8008264:	005b      	lsls	r3, r3, #1
 8008266:	189b      	adds	r3, r3, r2
 8008268:	00db      	lsls	r3, r3, #3
 800826a:	001a      	movs	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	189b      	adds	r3, r3, r2
 8008270:	7d1b      	ldrb	r3, [r3, #20]
 8008272:	001a      	movs	r2, r3
 8008274:	f002 fe56 	bl	800af24 <HAL_GPIO_WritePin>

		GPIO_InitStruct.Mode = conf[i].mode;
 8008278:	69fa      	ldr	r2, [r7, #28]
 800827a:	0013      	movs	r3, r2
 800827c:	005b      	lsls	r3, r3, #1
 800827e:	189b      	adds	r3, r3, r2
 8008280:	00db      	lsls	r3, r3, #3
 8008282:	001a      	movs	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	189b      	adds	r3, r3, r2
 8008288:	689a      	ldr	r2, [r3, #8]
 800828a:	2108      	movs	r1, #8
 800828c:	187b      	adds	r3, r7, r1
 800828e:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pin = conf[i].pin;
 8008290:	69fa      	ldr	r2, [r7, #28]
 8008292:	0013      	movs	r3, r2
 8008294:	005b      	lsls	r3, r3, #1
 8008296:	189b      	adds	r3, r3, r2
 8008298:	00db      	lsls	r3, r3, #3
 800829a:	001a      	movs	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	189b      	adds	r3, r3, r2
 80082a0:	889b      	ldrh	r3, [r3, #4]
 80082a2:	001a      	movs	r2, r3
 80082a4:	187b      	adds	r3, r7, r1
 80082a6:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Pull = conf[i].pull;
 80082a8:	69fa      	ldr	r2, [r7, #28]
 80082aa:	0013      	movs	r3, r2
 80082ac:	005b      	lsls	r3, r3, #1
 80082ae:	189b      	adds	r3, r3, r2
 80082b0:	00db      	lsls	r3, r3, #3
 80082b2:	001a      	movs	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	189b      	adds	r3, r3, r2
 80082b8:	68da      	ldr	r2, [r3, #12]
 80082ba:	187b      	adds	r3, r7, r1
 80082bc:	609a      	str	r2, [r3, #8]
		GPIO_InitStruct.Speed = conf[i].speed;
 80082be:	69fa      	ldr	r2, [r7, #28]
 80082c0:	0013      	movs	r3, r2
 80082c2:	005b      	lsls	r3, r3, #1
 80082c4:	189b      	adds	r3, r3, r2
 80082c6:	00db      	lsls	r3, r3, #3
 80082c8:	001a      	movs	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	189b      	adds	r3, r3, r2
 80082ce:	691a      	ldr	r2, [r3, #16]
 80082d0:	187b      	adds	r3, r7, r1
 80082d2:	60da      	str	r2, [r3, #12]

		HAL_GPIO_Init(conf[i].port,&GPIO_InitStruct);
 80082d4:	69fa      	ldr	r2, [r7, #28]
 80082d6:	0013      	movs	r3, r2
 80082d8:	005b      	lsls	r3, r3, #1
 80082da:	189b      	adds	r3, r3, r2
 80082dc:	00db      	lsls	r3, r3, #3
 80082de:	001a      	movs	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	189b      	adds	r3, r3, r2
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	187a      	adds	r2, r7, r1
 80082e8:	0011      	movs	r1, r2
 80082ea:	0018      	movs	r0, r3
 80082ec:	f002 fc9c 	bl	800ac28 <HAL_GPIO_Init>
	for (int i=0;i<count;i++)
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	3301      	adds	r3, #1
 80082f4:	61fb      	str	r3, [r7, #28]
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	683a      	ldr	r2, [r7, #0]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d893      	bhi.n	8008226 <GPIO_Configure+0x10>
	}
}
 80082fe:	46c0      	nop			; (mov r8, r8)
 8008300:	46bd      	mov	sp, r7
 8008302:	b008      	add	sp, #32
 8008304:	bd80      	pop	{r7, pc}
	...

08008308 <leds_0_flash>:

int32_t gui_led_ident = 0;
int32_t gui_led_ident_timer = 0;

void leds_0_flash(uint32_t delay)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
	if (gui_led0_flash_delay != -1)
 8008310:	4b09      	ldr	r3, [pc, #36]	; (8008338 <leds_0_flash+0x30>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	3301      	adds	r3, #1
 8008316:	d003      	beq.n	8008320 <leds_0_flash+0x18>
		leds_0_off();
 8008318:	23a0      	movs	r3, #160	; 0xa0
 800831a:	05db      	lsls	r3, r3, #23
 800831c:	2201      	movs	r2, #1
 800831e:	629a      	str	r2, [r3, #40]	; 0x28
	gui_led0_flash_delay = delay;
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	4b05      	ldr	r3, [pc, #20]	; (8008338 <leds_0_flash+0x30>)
 8008324:	601a      	str	r2, [r3, #0]
	leds_0_on();
 8008326:	23a0      	movs	r3, #160	; 0xa0
 8008328:	05db      	lsls	r3, r3, #23
 800832a:	2201      	movs	r2, #1
 800832c:	619a      	str	r2, [r3, #24]
}
 800832e:	46c0      	nop			; (mov r8, r8)
 8008330:	46bd      	mov	sp, r7
 8008332:	b002      	add	sp, #8
 8008334:	bd80      	pop	{r7, pc}
 8008336:	46c0      	nop			; (mov r8, r8)
 8008338:	20000118 	.word	0x20000118

0800833c <leds_ident>:
	gui_led1_flash_delay = delay;
	leds_1_off();
}

void leds_ident(int on)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
	gui_led_ident = on;
 8008344:	4b08      	ldr	r3, [pc, #32]	; (8008368 <leds_ident+0x2c>)
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	601a      	str	r2, [r3, #0]
	if (!on)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d106      	bne.n	800835e <leds_ident+0x22>
	{
		leds_1_on();
 8008350:	23a0      	movs	r3, #160	; 0xa0
 8008352:	05db      	lsls	r3, r3, #23
 8008354:	2202      	movs	r2, #2
 8008356:	619a      	str	r2, [r3, #24]
		gui_led_ident_timer = 0;
 8008358:	4b04      	ldr	r3, [pc, #16]	; (800836c <leds_ident+0x30>)
 800835a:	2200      	movs	r2, #0
 800835c:	601a      	str	r2, [r3, #0]
	}
}
 800835e:	46c0      	nop			; (mov r8, r8)
 8008360:	46bd      	mov	sp, r7
 8008362:	b002      	add	sp, #8
 8008364:	bd80      	pop	{r7, pc}
 8008366:	46c0      	nop			; (mov r8, r8)
 8008368:	20000320 	.word	0x20000320
 800836c:	20000324 	.word	0x20000324

08008370 <HAL_GPIO_EXTI_Callback>:
extern SPI_HandleTypeDef hspi1;


/*****************************************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	0002      	movs	r2, r0
 8008378:	1dbb      	adds	r3, r7, #6
 800837a:	801a      	strh	r2, [r3, #0]
		//dbg_printf("INT\r\n");
		//LTC_readTemperatureAll();
	}


}
 800837c:	46c0      	nop			; (mov r8, r8)
 800837e:	46bd      	mov	sp, r7
 8008380:	b002      	add	sp, #8
 8008382:	bd80      	pop	{r7, pc}

08008384 <LTC_writeReg8>:

/*****************************************************************************/
void LTC_writeReg8(uint16_t addr, uint8_t value)
{
 8008384:	b590      	push	{r4, r7, lr}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	0002      	movs	r2, r0
 800838c:	1dbb      	adds	r3, r7, #6
 800838e:	801a      	strh	r2, [r3, #0]
 8008390:	1d7b      	adds	r3, r7, #5
 8008392:	1c0a      	adds	r2, r1, #0
 8008394:	701a      	strb	r2, [r3, #0]
	uint8_t addrArr[2];
	addrArr[1] = addr & 0xFF;
 8008396:	1dbb      	adds	r3, r7, #6
 8008398:	881b      	ldrh	r3, [r3, #0]
 800839a:	b2da      	uxtb	r2, r3
 800839c:	240c      	movs	r4, #12
 800839e:	193b      	adds	r3, r7, r4
 80083a0:	705a      	strb	r2, [r3, #1]
	addrArr[0] = addr >> 8;
 80083a2:	1dbb      	adds	r3, r7, #6
 80083a4:	881b      	ldrh	r3, [r3, #0]
 80083a6:	0a1b      	lsrs	r3, r3, #8
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	b2da      	uxtb	r2, r3
 80083ac:	193b      	adds	r3, r7, r4
 80083ae:	701a      	strb	r2, [r3, #0]


	HAL_GPIO_WritePin(LTC_CS_PORT, LTC_CS_PIN, GPIO_PIN_RESET);
 80083b0:	2380      	movs	r3, #128	; 0x80
 80083b2:	015b      	lsls	r3, r3, #5
 80083b4:	4812      	ldr	r0, [pc, #72]	; (8008400 <LTC_writeReg8+0x7c>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	0019      	movs	r1, r3
 80083ba:	f002 fdb3 	bl	800af24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &writeCmd, 1, 1000);
 80083be:	23fa      	movs	r3, #250	; 0xfa
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4910      	ldr	r1, [pc, #64]	; (8008404 <LTC_writeReg8+0x80>)
 80083c4:	4810      	ldr	r0, [pc, #64]	; (8008408 <LTC_writeReg8+0x84>)
 80083c6:	2201      	movs	r2, #1
 80083c8:	f003 fde4 	bl	800bf94 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &addrArr[0], 2, 1000);
 80083cc:	23fa      	movs	r3, #250	; 0xfa
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	1939      	adds	r1, r7, r4
 80083d2:	480d      	ldr	r0, [pc, #52]	; (8008408 <LTC_writeReg8+0x84>)
 80083d4:	2202      	movs	r2, #2
 80083d6:	f003 fddd 	bl	800bf94 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 80083da:	23fa      	movs	r3, #250	; 0xfa
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	1d79      	adds	r1, r7, #5
 80083e0:	4809      	ldr	r0, [pc, #36]	; (8008408 <LTC_writeReg8+0x84>)
 80083e2:	2201      	movs	r2, #1
 80083e4:	f003 fdd6 	bl	800bf94 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTC_CS_PORT, LTC_CS_PIN, GPIO_PIN_SET);
 80083e8:	2380      	movs	r3, #128	; 0x80
 80083ea:	015b      	lsls	r3, r3, #5
 80083ec:	4804      	ldr	r0, [pc, #16]	; (8008400 <LTC_writeReg8+0x7c>)
 80083ee:	2201      	movs	r2, #1
 80083f0:	0019      	movs	r1, r3
 80083f2:	f002 fd97 	bl	800af24 <HAL_GPIO_WritePin>

}
 80083f6:	46c0      	nop			; (mov r8, r8)
 80083f8:	46bd      	mov	sp, r7
 80083fa:	b005      	add	sp, #20
 80083fc:	bd90      	pop	{r4, r7, pc}
 80083fe:	46c0      	nop			; (mov r8, r8)
 8008400:	50000400 	.word	0x50000400
 8008404:	2000011c 	.word	0x2000011c
 8008408:	200010c4 	.word	0x200010c4

0800840c <LTC_writeReg32>:

/*****************************************************************************/
void LTC_writeReg32(uint16_t addr, uint32_t value)
{
 800840c:	b5b0      	push	{r4, r5, r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	0002      	movs	r2, r0
 8008414:	6039      	str	r1, [r7, #0]
 8008416:	1dbb      	adds	r3, r7, #6
 8008418:	801a      	strh	r2, [r3, #0]
	uint8_t addrArr[2];
	addrArr[1] = addr & 0xFF;
 800841a:	1dbb      	adds	r3, r7, #6
 800841c:	881b      	ldrh	r3, [r3, #0]
 800841e:	b2da      	uxtb	r2, r3
 8008420:	250c      	movs	r5, #12
 8008422:	197b      	adds	r3, r7, r5
 8008424:	705a      	strb	r2, [r3, #1]
	addrArr[0] = addr >> 8;
 8008426:	1dbb      	adds	r3, r7, #6
 8008428:	881b      	ldrh	r3, [r3, #0]
 800842a:	0a1b      	lsrs	r3, r3, #8
 800842c:	b29b      	uxth	r3, r3
 800842e:	b2da      	uxtb	r2, r3
 8008430:	197b      	adds	r3, r7, r5
 8008432:	701a      	strb	r2, [r3, #0]

	uint8_t dataArray[4];
	dataArray[3] = (uint8_t)value;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	b2da      	uxtb	r2, r3
 8008438:	2408      	movs	r4, #8
 800843a:	193b      	adds	r3, r7, r4
 800843c:	70da      	strb	r2, [r3, #3]
	dataArray[2] = (uint8_t)(value>>=8);
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	0a1b      	lsrs	r3, r3, #8
 8008442:	603b      	str	r3, [r7, #0]
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	b2da      	uxtb	r2, r3
 8008448:	193b      	adds	r3, r7, r4
 800844a:	709a      	strb	r2, [r3, #2]
	dataArray[1] = (uint8_t)(value>>=8);
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	0a1b      	lsrs	r3, r3, #8
 8008450:	603b      	str	r3, [r7, #0]
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	b2da      	uxtb	r2, r3
 8008456:	193b      	adds	r3, r7, r4
 8008458:	705a      	strb	r2, [r3, #1]
	dataArray[0] = (uint8_t)(value>>=8);
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	0a1b      	lsrs	r3, r3, #8
 800845e:	603b      	str	r3, [r7, #0]
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	b2da      	uxtb	r2, r3
 8008464:	193b      	adds	r3, r7, r4
 8008466:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LTC_CS_PORT, LTC_CS_PIN, GPIO_PIN_RESET);
 8008468:	2380      	movs	r3, #128	; 0x80
 800846a:	015b      	lsls	r3, r3, #5
 800846c:	4812      	ldr	r0, [pc, #72]	; (80084b8 <LTC_writeReg32+0xac>)
 800846e:	2200      	movs	r2, #0
 8008470:	0019      	movs	r1, r3
 8008472:	f002 fd57 	bl	800af24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &writeCmd, 1, 1000);
 8008476:	23fa      	movs	r3, #250	; 0xfa
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4910      	ldr	r1, [pc, #64]	; (80084bc <LTC_writeReg32+0xb0>)
 800847c:	4810      	ldr	r0, [pc, #64]	; (80084c0 <LTC_writeReg32+0xb4>)
 800847e:	2201      	movs	r2, #1
 8008480:	f003 fd88 	bl	800bf94 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &addrArr[0], 2, 1000);
 8008484:	23fa      	movs	r3, #250	; 0xfa
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	1979      	adds	r1, r7, r5
 800848a:	480d      	ldr	r0, [pc, #52]	; (80084c0 <LTC_writeReg32+0xb4>)
 800848c:	2202      	movs	r2, #2
 800848e:	f003 fd81 	bl	800bf94 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &dataArray[0], 4, 1000);
 8008492:	23fa      	movs	r3, #250	; 0xfa
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	1939      	adds	r1, r7, r4
 8008498:	4809      	ldr	r0, [pc, #36]	; (80084c0 <LTC_writeReg32+0xb4>)
 800849a:	2204      	movs	r2, #4
 800849c:	f003 fd7a 	bl	800bf94 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTC_CS_PORT, LTC_CS_PIN, GPIO_PIN_SET);
 80084a0:	2380      	movs	r3, #128	; 0x80
 80084a2:	015b      	lsls	r3, r3, #5
 80084a4:	4804      	ldr	r0, [pc, #16]	; (80084b8 <LTC_writeReg32+0xac>)
 80084a6:	2201      	movs	r2, #1
 80084a8:	0019      	movs	r1, r3
 80084aa:	f002 fd3b 	bl	800af24 <HAL_GPIO_WritePin>

}
 80084ae:	46c0      	nop			; (mov r8, r8)
 80084b0:	46bd      	mov	sp, r7
 80084b2:	b004      	add	sp, #16
 80084b4:	bdb0      	pop	{r4, r5, r7, pc}
 80084b6:	46c0      	nop			; (mov r8, r8)
 80084b8:	50000400 	.word	0x50000400
 80084bc:	2000011c 	.word	0x2000011c
 80084c0:	200010c4 	.word	0x200010c4

080084c4 <LTC_readReg8>:

/*****************************************************************************/
uint8_t LTC_readReg8(uint16_t addr)
{
 80084c4:	b5b0      	push	{r4, r5, r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	0002      	movs	r2, r0
 80084cc:	1dbb      	adds	r3, r7, #6
 80084ce:	801a      	strh	r2, [r3, #0]
	uint8_t addrArr[2];
	addrArr[1] = addr & 0xFF;
 80084d0:	1dbb      	adds	r3, r7, #6
 80084d2:	881b      	ldrh	r3, [r3, #0]
 80084d4:	b2da      	uxtb	r2, r3
 80084d6:	240c      	movs	r4, #12
 80084d8:	193b      	adds	r3, r7, r4
 80084da:	705a      	strb	r2, [r3, #1]
	addrArr[0] = addr >> 8;
 80084dc:	1dbb      	adds	r3, r7, #6
 80084de:	881b      	ldrh	r3, [r3, #0]
 80084e0:	0a1b      	lsrs	r3, r3, #8
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	b2da      	uxtb	r2, r3
 80084e6:	193b      	adds	r3, r7, r4
 80084e8:	701a      	strb	r2, [r3, #0]

	uint8_t readVal = 0;
 80084ea:	250b      	movs	r5, #11
 80084ec:	197b      	adds	r3, r7, r5
 80084ee:	2200      	movs	r2, #0
 80084f0:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LTC_CS_PORT, LTC_CS_PIN, GPIO_PIN_RESET);
 80084f2:	2380      	movs	r3, #128	; 0x80
 80084f4:	015b      	lsls	r3, r3, #5
 80084f6:	4813      	ldr	r0, [pc, #76]	; (8008544 <LTC_readReg8+0x80>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	0019      	movs	r1, r3
 80084fc:	f002 fd12 	bl	800af24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &readCmd, 1, 1000);
 8008500:	23fa      	movs	r3, #250	; 0xfa
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	4910      	ldr	r1, [pc, #64]	; (8008548 <LTC_readReg8+0x84>)
 8008506:	4811      	ldr	r0, [pc, #68]	; (800854c <LTC_readReg8+0x88>)
 8008508:	2201      	movs	r2, #1
 800850a:	f003 fd43 	bl	800bf94 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &addrArr[0], 2, 1000);
 800850e:	23fa      	movs	r3, #250	; 0xfa
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	1939      	adds	r1, r7, r4
 8008514:	480d      	ldr	r0, [pc, #52]	; (800854c <LTC_readReg8+0x88>)
 8008516:	2202      	movs	r2, #2
 8008518:	f003 fd3c 	bl	800bf94 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &readVal, 1, 1000);
 800851c:	23fa      	movs	r3, #250	; 0xfa
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	1979      	adds	r1, r7, r5
 8008522:	480a      	ldr	r0, [pc, #40]	; (800854c <LTC_readReg8+0x88>)
 8008524:	2201      	movs	r2, #1
 8008526:	f003 fe8b 	bl	800c240 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LTC_CS_PORT, LTC_CS_PIN, GPIO_PIN_SET);
 800852a:	2380      	movs	r3, #128	; 0x80
 800852c:	015b      	lsls	r3, r3, #5
 800852e:	4805      	ldr	r0, [pc, #20]	; (8008544 <LTC_readReg8+0x80>)
 8008530:	2201      	movs	r2, #1
 8008532:	0019      	movs	r1, r3
 8008534:	f002 fcf6 	bl	800af24 <HAL_GPIO_WritePin>

	return readVal;
 8008538:	197b      	adds	r3, r7, r5
 800853a:	781b      	ldrb	r3, [r3, #0]
}
 800853c:	0018      	movs	r0, r3
 800853e:	46bd      	mov	sp, r7
 8008540:	b004      	add	sp, #16
 8008542:	bdb0      	pop	{r4, r5, r7, pc}
 8008544:	50000400 	.word	0x50000400
 8008548:	2000011d 	.word	0x2000011d
 800854c:	200010c4 	.word	0x200010c4

08008550 <LTC_readReg32>:

/*****************************************************************************/
uint32_t LTC_readReg32(uint16_t addr)
{
 8008550:	b590      	push	{r4, r7, lr}
 8008552:	b087      	sub	sp, #28
 8008554:	af00      	add	r7, sp, #0
 8008556:	0002      	movs	r2, r0
 8008558:	1dbb      	adds	r3, r7, #6
 800855a:	801a      	strh	r2, [r3, #0]
	uint8_t addrArr[2];
	addrArr[1] = addr & 0xFF;
 800855c:	1dbb      	adds	r3, r7, #6
 800855e:	881b      	ldrh	r3, [r3, #0]
 8008560:	b2da      	uxtb	r2, r3
 8008562:	2410      	movs	r4, #16
 8008564:	193b      	adds	r3, r7, r4
 8008566:	705a      	strb	r2, [r3, #1]
	addrArr[0] = addr >> 8;
 8008568:	1dbb      	adds	r3, r7, #6
 800856a:	881b      	ldrh	r3, [r3, #0]
 800856c:	0a1b      	lsrs	r3, r3, #8
 800856e:	b29b      	uxth	r3, r3
 8008570:	b2da      	uxtb	r2, r3
 8008572:	193b      	adds	r3, r7, r4
 8008574:	701a      	strb	r2, [r3, #0]

	uint8_t readVal[4];

	HAL_GPIO_WritePin(LTC_CS_PORT, LTC_CS_PIN, GPIO_PIN_RESET);
 8008576:	2380      	movs	r3, #128	; 0x80
 8008578:	015b      	lsls	r3, r3, #5
 800857a:	481c      	ldr	r0, [pc, #112]	; (80085ec <LTC_readReg32+0x9c>)
 800857c:	2200      	movs	r2, #0
 800857e:	0019      	movs	r1, r3
 8008580:	f002 fcd0 	bl	800af24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &readCmd, 1, 1000);
 8008584:	23fa      	movs	r3, #250	; 0xfa
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4919      	ldr	r1, [pc, #100]	; (80085f0 <LTC_readReg32+0xa0>)
 800858a:	481a      	ldr	r0, [pc, #104]	; (80085f4 <LTC_readReg32+0xa4>)
 800858c:	2201      	movs	r2, #1
 800858e:	f003 fd01 	bl	800bf94 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &addrArr[0], 2, 1000);
 8008592:	23fa      	movs	r3, #250	; 0xfa
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	1939      	adds	r1, r7, r4
 8008598:	4816      	ldr	r0, [pc, #88]	; (80085f4 <LTC_readReg32+0xa4>)
 800859a:	2202      	movs	r2, #2
 800859c:	f003 fcfa 	bl	800bf94 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &readVal, 4, 1000);
 80085a0:	23fa      	movs	r3, #250	; 0xfa
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	210c      	movs	r1, #12
 80085a6:	000c      	movs	r4, r1
 80085a8:	1879      	adds	r1, r7, r1
 80085aa:	4812      	ldr	r0, [pc, #72]	; (80085f4 <LTC_readReg32+0xa4>)
 80085ac:	2204      	movs	r2, #4
 80085ae:	f003 fe47 	bl	800c240 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LTC_CS_PORT, LTC_CS_PIN, GPIO_PIN_SET);
 80085b2:	2380      	movs	r3, #128	; 0x80
 80085b4:	015b      	lsls	r3, r3, #5
 80085b6:	480d      	ldr	r0, [pc, #52]	; (80085ec <LTC_readReg32+0x9c>)
 80085b8:	2201      	movs	r2, #1
 80085ba:	0019      	movs	r1, r3
 80085bc:	f002 fcb2 	bl	800af24 <HAL_GPIO_WritePin>

	uint32_t rawData = (((uint32_t) readVal[0]) << 24 |
 80085c0:	0021      	movs	r1, r4
 80085c2:	187b      	adds	r3, r7, r1
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	061a      	lsls	r2, r3, #24
					  ((uint32_t) readVal[1]) << 16 |
 80085c8:	187b      	adds	r3, r7, r1
 80085ca:	785b      	ldrb	r3, [r3, #1]
 80085cc:	041b      	lsls	r3, r3, #16
	uint32_t rawData = (((uint32_t) readVal[0]) << 24 |
 80085ce:	431a      	orrs	r2, r3
					  ((uint32_t) readVal[2]) <<  8 |
 80085d0:	187b      	adds	r3, r7, r1
 80085d2:	789b      	ldrb	r3, [r3, #2]
 80085d4:	021b      	lsls	r3, r3, #8
					  ((uint32_t) readVal[1]) << 16 |
 80085d6:	4313      	orrs	r3, r2
					  ((uint32_t) readVal[3]) <<  0);
 80085d8:	187a      	adds	r2, r7, r1
 80085da:	78d2      	ldrb	r2, [r2, #3]
	uint32_t rawData = (((uint32_t) readVal[0]) << 24 |
 80085dc:	4313      	orrs	r3, r2
 80085de:	617b      	str	r3, [r7, #20]

	return rawData;
 80085e0:	697b      	ldr	r3, [r7, #20]
}
 80085e2:	0018      	movs	r0, r3
 80085e4:	46bd      	mov	sp, r7
 80085e6:	b007      	add	sp, #28
 80085e8:	bd90      	pop	{r4, r7, pc}
 80085ea:	46c0      	nop			; (mov r8, r8)
 80085ec:	50000400 	.word	0x50000400
 80085f0:	2000011d 	.word	0x2000011d
 80085f4:	200010c4 	.word	0x200010c4

080085f8 <LTC_waitUntilFinish>:

/*****************************************************************************/
void LTC_waitUntilFinish(void)
{
 80085f8:	b590      	push	{r4, r7, lr}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
	uint8_t process_fin = 0;
 80085fe:	1dfb      	adds	r3, r7, #7
 8008600:	2200      	movs	r2, #0
 8008602:	701a      	strb	r2, [r3, #0]
	uint8_t counter = 0;
 8008604:	1dbb      	adds	r3, r7, #6
 8008606:	2200      	movs	r2, #0
 8008608:	701a      	strb	r2, [r3, #0]

	while(process_fin == 0)
 800860a:	e026      	b.n	800865a <LTC_waitUntilFinish+0x62>
	{
		uint8_t status = LTC_readReg8(COMMAND_STATUS_REGISTER);
 800860c:	1d7c      	adds	r4, r7, #5
 800860e:	2000      	movs	r0, #0
 8008610:	f7ff ff58 	bl	80084c4 <LTC_readReg8>
 8008614:	0003      	movs	r3, r0
 8008616:	7023      	strb	r3, [r4, #0]

		process_fin = status & 0x40;
 8008618:	1dfb      	adds	r3, r7, #7
 800861a:	1d7a      	adds	r2, r7, #5
 800861c:	7812      	ldrb	r2, [r2, #0]
 800861e:	2140      	movs	r1, #64	; 0x40
 8008620:	400a      	ands	r2, r1
 8008622:	701a      	strb	r2, [r3, #0]

		if (counter%2)
 8008624:	1dbb      	adds	r3, r7, #6
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	2201      	movs	r2, #1
 800862a:	4013      	ands	r3, r2
 800862c:	b2db      	uxtb	r3, r3
 800862e:	2b00      	cmp	r3, #0
 8008630:	d007      	beq.n	8008642 <LTC_waitUntilFinish+0x4a>
		{
			leds_1_on();
 8008632:	23a0      	movs	r3, #160	; 0xa0
 8008634:	05db      	lsls	r3, r3, #23
 8008636:	2202      	movs	r2, #2
 8008638:	619a      	str	r2, [r3, #24]
			HAL_Delay(10);
 800863a:	200a      	movs	r0, #10
 800863c:	f001 fd02 	bl	800a044 <HAL_Delay>
 8008640:	e006      	b.n	8008650 <LTC_waitUntilFinish+0x58>
		}
		else
		{
			leds_1_off();
 8008642:	23a0      	movs	r3, #160	; 0xa0
 8008644:	05db      	lsls	r3, r3, #23
 8008646:	2202      	movs	r2, #2
 8008648:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_Delay(10);
 800864a:	200a      	movs	r0, #10
 800864c:	f001 fcfa 	bl	800a044 <HAL_Delay>
		}
		counter++;
 8008650:	1dbb      	adds	r3, r7, #6
 8008652:	781a      	ldrb	r2, [r3, #0]
 8008654:	1dbb      	adds	r3, r7, #6
 8008656:	3201      	adds	r2, #1
 8008658:	701a      	strb	r2, [r3, #0]
	while(process_fin == 0)
 800865a:	1dfb      	adds	r3, r7, #7
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d0d4      	beq.n	800860c <LTC_waitUntilFinish+0x14>
	}
}
 8008662:	46c0      	nop			; (mov r8, r8)
 8008664:	46bd      	mov	sp, r7
 8008666:	b003      	add	sp, #12
 8008668:	bd90      	pop	{r4, r7, pc}

0800866a <LTC_beginConv>:
	//NVIC_SystemReset();
}

/*****************************************************************************/
void LTC_beginConv(uint8_t ch)
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b084      	sub	sp, #16
 800866e:	af00      	add	r7, sp, #0
 8008670:	0002      	movs	r2, r0
 8008672:	1dfb      	adds	r3, r7, #7
 8008674:	701a      	strb	r2, [r3, #0]
	uint8_t beginConv = 0x80 | ch;
 8008676:	200f      	movs	r0, #15
 8008678:	183b      	adds	r3, r7, r0
 800867a:	1dfa      	adds	r2, r7, #7
 800867c:	7812      	ldrb	r2, [r2, #0]
 800867e:	2180      	movs	r1, #128	; 0x80
 8008680:	4249      	negs	r1, r1
 8008682:	430a      	orrs	r2, r1
 8008684:	701a      	strb	r2, [r3, #0]
	LTC_writeReg8(COMMAND_STATUS_REGISTER, beginConv);
 8008686:	183b      	adds	r3, r7, r0
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	0019      	movs	r1, r3
 800868c:	2000      	movs	r0, #0
 800868e:	f7ff fe79 	bl	8008384 <LTC_writeReg8>

	LTC_waitUntilFinish();
 8008692:	f7ff ffb1 	bl	80085f8 <LTC_waitUntilFinish>
}
 8008696:	46c0      	nop			; (mov r8, r8)
 8008698:	46bd      	mov	sp, r7
 800869a:	b004      	add	sp, #16
 800869c:	bd80      	pop	{r7, pc}
	...

080086a0 <LTC_readTemperature>:

float LTC_readTemperature(uint32_t ch)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
	uint32_t rawTemperature = LTC_readReg32(READ_CH_BASE + 4 * ch);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	3304      	adds	r3, #4
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	0018      	movs	r0, r3
 80086b4:	f7ff ff4c 	bl	8008550 <LTC_readReg32>
 80086b8:	0003      	movs	r3, r0
 80086ba:	613b      	str	r3, [r7, #16]

	uint8_t flag = rawTemperature >> 24;
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	0e1a      	lsrs	r2, r3, #24
 80086c0:	230f      	movs	r3, #15
 80086c2:	18fb      	adds	r3, r7, r3
 80086c4:	701a      	strb	r2, [r3, #0]

	int32_t signedRawData = rawTemperature & 0xFFFFFF;
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	021b      	lsls	r3, r3, #8
 80086ca:	0a1b      	lsrs	r3, r3, #8
 80086cc:	617b      	str	r3, [r7, #20]

	if(signedRawData & 0x800000)
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	2380      	movs	r3, #128	; 0x80
 80086d2:	041b      	lsls	r3, r3, #16
 80086d4:	4013      	ands	r3, r2
 80086d6:	d004      	beq.n	80086e2 <LTC_readTemperature+0x42>
		signedRawData = signedRawData | 0xFF000000;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	22ff      	movs	r2, #255	; 0xff
 80086dc:	0612      	lsls	r2, r2, #24
 80086de:	4313      	orrs	r3, r2
 80086e0:	617b      	str	r3, [r7, #20]

	float temperature = (float)signedRawData / 1024;
 80086e2:	6978      	ldr	r0, [r7, #20]
 80086e4:	f7fd fada 	bl	8005c9c <__aeabi_i2f>
 80086e8:	1c03      	adds	r3, r0, #0
 80086ea:	2189      	movs	r1, #137	; 0x89
 80086ec:	05c9      	lsls	r1, r1, #23
 80086ee:	1c18      	adds	r0, r3, #0
 80086f0:	f7fc fffe 	bl	80056f0 <__aeabi_fdiv>
 80086f4:	1c03      	adds	r3, r0, #0
 80086f6:	60bb      	str	r3, [r7, #8]


	chData[ch].HJ = temperature - gConfig.ch_conf[ch].cjOffset.cjOff;
 80086f8:	4919      	ldr	r1, [pc, #100]	; (8008760 <LTC_readTemperature+0xc0>)
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	0013      	movs	r3, r2
 80086fe:	00db      	lsls	r3, r3, #3
 8008700:	1a9b      	subs	r3, r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	18cb      	adds	r3, r1, r3
 8008706:	331c      	adds	r3, #28
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	1c19      	adds	r1, r3, #0
 800870c:	68b8      	ldr	r0, [r7, #8]
 800870e:	f7fd f901 	bl	8005914 <__aeabi_fsub>
 8008712:	1c03      	adds	r3, r0, #0
 8008714:	1c18      	adds	r0, r3, #0
 8008716:	4913      	ldr	r1, [pc, #76]	; (8008764 <LTC_readTemperature+0xc4>)
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	0013      	movs	r3, r2
 800871c:	005b      	lsls	r3, r3, #1
 800871e:	189b      	adds	r3, r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	5058      	str	r0, [r3, r1]
	chData[ch].CJ = chData[11].HJ;
 8008724:	4b0f      	ldr	r3, [pc, #60]	; (8008764 <LTC_readTemperature+0xc4>)
 8008726:	2284      	movs	r2, #132	; 0x84
 8008728:	5899      	ldr	r1, [r3, r2]
 800872a:	480e      	ldr	r0, [pc, #56]	; (8008764 <LTC_readTemperature+0xc4>)
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	0013      	movs	r3, r2
 8008730:	005b      	lsls	r3, r3, #1
 8008732:	189b      	adds	r3, r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	18c3      	adds	r3, r0, r3
 8008738:	3304      	adds	r3, #4
 800873a:	6019      	str	r1, [r3, #0]
	chData[ch].flag = flag;
 800873c:	4909      	ldr	r1, [pc, #36]	; (8008764 <LTC_readTemperature+0xc4>)
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	0013      	movs	r3, r2
 8008742:	005b      	lsls	r3, r3, #1
 8008744:	189b      	adds	r3, r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	18cb      	adds	r3, r1, r3
 800874a:	3308      	adds	r3, #8
 800874c:	220f      	movs	r2, #15
 800874e:	18ba      	adds	r2, r7, r2
 8008750:	7812      	ldrb	r2, [r2, #0]
 8008752:	701a      	strb	r2, [r3, #0]

	return temperature;
 8008754:	68bb      	ldr	r3, [r7, #8]
}
 8008756:	1c18      	adds	r0, r3, #0
 8008758:	46bd      	mov	sp, r7
 800875a:	b006      	add	sp, #24
 800875c:	bd80      	pop	{r7, pc}
 800875e:	46c0      	nop			; (mov r8, r8)
 8008760:	20000530 	.word	0x20000530
 8008764:	20000440 	.word	0x20000440

08008768 <LTC_readTemperatureAll>:

/*****************************************************************************/
void LTC_readTemperatureAll(void)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
	for (int idx = 0; idx < 20; idx++)
 800876e:	2300      	movs	r3, #0
 8008770:	607b      	str	r3, [r7, #4]
 8008772:	e008      	b.n	8008786 <LTC_readTemperatureAll+0x1e>
	{
		float temperature = LTC_readTemperature(idx);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	0018      	movs	r0, r3
 8008778:	f7ff ff92 	bl	80086a0 <LTC_readTemperature>
 800877c:	1c03      	adds	r3, r0, #0
 800877e:	603b      	str	r3, [r7, #0]
	for (int idx = 0; idx < 20; idx++)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	3301      	adds	r3, #1
 8008784:	607b      	str	r3, [r7, #4]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2b13      	cmp	r3, #19
 800878a:	ddf3      	ble.n	8008774 <LTC_readTemperatureAll+0xc>
		/*dbg_printf("Ch : %d - Temperature : %f\n", idx+1, temperature);
		HAL_Delay(100);*/
	}
}
 800878c:	46c0      	nop			; (mov r8, r8)
 800878e:	46bd      	mov	sp, r7
 8008790:	b002      	add	sp, #8
 8008792:	bd80      	pop	{r7, pc}

08008794 <LTC_enableConvChannels>:
	LTC_writeReg8(GLOBAL_CONFIG_REGISTER, tmp | REJECTION__50_HZ);
}

/*****************************************************************************/
void LTC_enableConvChannels(uint32_t ch)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
	LTC_writeReg32(MULTI_READ_CH_REGISTER, ch);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	0019      	movs	r1, r3
 80087a0:	20f4      	movs	r0, #244	; 0xf4
 80087a2:	f7ff fe33 	bl	800840c <LTC_writeReg32>
}
 80087a6:	46c0      	nop			; (mov r8, r8)
 80087a8:	46bd      	mov	sp, r7
 80087aa:	b002      	add	sp, #8
 80087ac:	bd80      	pop	{r7, pc}
	...

080087b0 <LTC_TC_configureChannel>:
	return adcValue;
}

/*****************************************************************************/
void LTC_TC_configureChannel(uint32_t ch, uint32_t tcType, uint32_t cjChannel, uint32_t singleEnded, uint32_t openCktDetect, uint32_t openCktDetectCurrent)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
 80087bc:	603b      	str	r3, [r7, #0]
	uint32_t chCfgData = 0;
 80087be:	2300      	movs	r3, #0
 80087c0:	617b      	str	r3, [r7, #20]
	chCfgData = tcType | cjChannel | singleEnded | openCktDetect | openCktDetectCurrent;
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	431a      	orrs	r2, r3
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	431a      	orrs	r2, r3
 80087cc:	6a3b      	ldr	r3, [r7, #32]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087d2:	4313      	orrs	r3, r2
 80087d4:	617b      	str	r3, [r7, #20]

	chConfig[ch].config = chCfgData;
 80087d6:	4911      	ldr	r1, [pc, #68]	; (800881c <LTC_TC_configureChannel+0x6c>)
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	0013      	movs	r3, r2
 80087dc:	005b      	lsls	r3, r3, #1
 80087de:	189b      	adds	r3, r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	505a      	str	r2, [r3, r1]

	dbg_printf("Config Int : %d\n", chConfig[ch].config);
 80087e6:	490d      	ldr	r1, [pc, #52]	; (800881c <LTC_TC_configureChannel+0x6c>)
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	0013      	movs	r3, r2
 80087ec:	005b      	lsls	r3, r3, #1
 80087ee:	189b      	adds	r3, r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	585a      	ldr	r2, [r3, r1]
 80087f4:	4b0a      	ldr	r3, [pc, #40]	; (8008820 <LTC_TC_configureChannel+0x70>)
 80087f6:	0011      	movs	r1, r2
 80087f8:	0018      	movs	r0, r3
 80087fa:	f006 f9a5 	bl	800eb48 <iprintf>

	LTC_writeReg32(CH_ADDRESS_BASE + 4*ch, chCfgData);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	3380      	adds	r3, #128	; 0x80
 8008802:	b29b      	uxth	r3, r3
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	b29b      	uxth	r3, r3
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	0011      	movs	r1, r2
 800880c:	0018      	movs	r0, r3
 800880e:	f7ff fdfd 	bl	800840c <LTC_writeReg32>
}
 8008812:	46c0      	nop			; (mov r8, r8)
 8008814:	46bd      	mov	sp, r7
 8008816:	b006      	add	sp, #24
 8008818:	bd80      	pop	{r7, pc}
 800881a:	46c0      	nop			; (mov r8, r8)
 800881c:	20000350 	.word	0x20000350
 8008820:	080123e8 	.word	0x080123e8

08008824 <LTC_TC_writeChannelConfig>:
	return LTC_readReg32(CH_ADDRESS_BASE + 4*ch);
}

/*****************************************************************************/
uint32_t LTC_TC_writeChannelConfig(uint32_t ch, uint32_t value)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
	LTC_writeReg32(CH_ADDRESS_BASE + 4 * ch, value);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	3380      	adds	r3, #128	; 0x80
 8008832:	b29b      	uxth	r3, r3
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	b29b      	uxth	r3, r3
 8008838:	683a      	ldr	r2, [r7, #0]
 800883a:	0011      	movs	r1, r2
 800883c:	0018      	movs	r0, r3
 800883e:	f7ff fde5 	bl	800840c <LTC_writeReg32>
}
 8008842:	46c0      	nop			; (mov r8, r8)
 8008844:	0018      	movs	r0, r3
 8008846:	46bd      	mov	sp, r7
 8008848:	b002      	add	sp, #8
 800884a:	bd80      	pop	{r7, pc}

0800884c <LTC_RTD_configureChannel>:

/*****************************************************************************/
void LTC_RTD_configureChannel(uint32_t ch, uint32_t rtdSensorType, uint32_t rSenseChannel, uint32_t wireNo, uint32_t excitationMode, uint32_t excitationCurrent, uint32_t rtdStandard)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b086      	sub	sp, #24
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
 8008858:	603b      	str	r3, [r7, #0]
	uint32_t rtdData = rtdSensorType | rSenseChannel | wireNo | excitationMode | excitationCurrent | rtdStandard;
 800885a:	68ba      	ldr	r2, [r7, #8]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	431a      	orrs	r2, r3
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	431a      	orrs	r2, r3
 8008864:	6a3b      	ldr	r3, [r7, #32]
 8008866:	431a      	orrs	r2, r3
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	4313      	orrs	r3, r2
 800886c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800886e:	4313      	orrs	r3, r2
 8008870:	617b      	str	r3, [r7, #20]

	LTC_writeReg32(CH_ADDRESS_BASE + 4 * ch, rtdData);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	3380      	adds	r3, #128	; 0x80
 8008876:	b29b      	uxth	r3, r3
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	b29b      	uxth	r3, r3
 800887c:	697a      	ldr	r2, [r7, #20]
 800887e:	0011      	movs	r1, r2
 8008880:	0018      	movs	r0, r3
 8008882:	f7ff fdc3 	bl	800840c <LTC_writeReg32>

}
 8008886:	46c0      	nop			; (mov r8, r8)
 8008888:	46bd      	mov	sp, r7
 800888a:	b006      	add	sp, #24
 800888c:	bd80      	pop	{r7, pc}

0800888e <LTC_RTD_configureRSense>:

/*****************************************************************************/
void LTC_RTD_configureRSense(uint32_t ch, uint32_t sensorType, uint32_t rSenseValHigh, uint32_t rSenseValLow)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b086      	sub	sp, #24
 8008892:	af00      	add	r7, sp, #0
 8008894:	60f8      	str	r0, [r7, #12]
 8008896:	60b9      	str	r1, [r7, #8]
 8008898:	607a      	str	r2, [r7, #4]
 800889a:	603b      	str	r3, [r7, #0]
	uint32_t rSenseData = sensorType | rSenseValHigh | rSenseValLow;
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	683a      	ldr	r2, [r7, #0]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	617b      	str	r3, [r7, #20]

	LTC_writeReg32(CH_ADDRESS_BASE + 4 * ch, rSenseData);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	3380      	adds	r3, #128	; 0x80
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	697a      	ldr	r2, [r7, #20]
 80088b4:	0011      	movs	r1, r2
 80088b6:	0018      	movs	r0, r3
 80088b8:	f7ff fda8 	bl	800840c <LTC_writeReg32>
}
 80088bc:	46c0      	nop			; (mov r8, r8)
 80088be:	46bd      	mov	sp, r7
 80088c0:	b006      	add	sp, #24
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <LTC_process>:

/*****************************************************************************/
int counter = 0;
void LTC_process(void)
{
 80088c4:	b590      	push	{r4, r7, lr}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
	LTC_beginConv(0);
 80088ca:	2000      	movs	r0, #0
 80088cc:	f7ff fecd 	bl	800866a <LTC_beginConv>
	LTC_readTemperatureAll();
 80088d0:	f7ff ff4a 	bl	8008768 <LTC_readTemperatureAll>
	if (counter % 10 == 0)
 80088d4:	4b1d      	ldr	r3, [pc, #116]	; (800894c <LTC_process+0x88>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	210a      	movs	r1, #10
 80088da:	0018      	movs	r0, r3
 80088dc:	f7fc fd9a 	bl	8005414 <__aeabi_idivmod>
 80088e0:	1e0b      	subs	r3, r1, #0
 80088e2:	d11a      	bne.n	800891a <LTC_process+0x56>
	{
		for (int idx = 0; idx < 20; idx++)
 80088e4:	2300      	movs	r3, #0
 80088e6:	607b      	str	r3, [r7, #4]
 80088e8:	e014      	b.n	8008914 <LTC_process+0x50>
		{
			dbg_printf("Ch : %d - Temperature : %f\r\n", idx+1, chData[idx].HJ);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	1c5c      	adds	r4, r3, #1
 80088ee:	4918      	ldr	r1, [pc, #96]	; (8008950 <LTC_process+0x8c>)
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	0013      	movs	r3, r2
 80088f4:	005b      	lsls	r3, r3, #1
 80088f6:	189b      	adds	r3, r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	585b      	ldr	r3, [r3, r1]
 80088fc:	1c18      	adds	r0, r3, #0
 80088fe:	f7fe ffb5 	bl	800786c <__aeabi_f2d>
 8008902:	0002      	movs	r2, r0
 8008904:	000b      	movs	r3, r1
 8008906:	4813      	ldr	r0, [pc, #76]	; (8008954 <LTC_process+0x90>)
 8008908:	0021      	movs	r1, r4
 800890a:	f006 f91d 	bl	800eb48 <iprintf>
		for (int idx = 0; idx < 20; idx++)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	3301      	adds	r3, #1
 8008912:	607b      	str	r3, [r7, #4]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b13      	cmp	r3, #19
 8008918:	dde7      	ble.n	80088ea <LTC_process+0x26>
			//HAL_Delay(100);
		}
	}
	if (counter%2)
 800891a:	4b0c      	ldr	r3, [pc, #48]	; (800894c <LTC_process+0x88>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	001a      	movs	r2, r3
 8008920:	2301      	movs	r3, #1
 8008922:	4013      	ands	r3, r2
 8008924:	d004      	beq.n	8008930 <LTC_process+0x6c>
	{
		leds_1_on();
 8008926:	23a0      	movs	r3, #160	; 0xa0
 8008928:	05db      	lsls	r3, r3, #23
 800892a:	2202      	movs	r2, #2
 800892c:	619a      	str	r2, [r3, #24]
 800892e:	e003      	b.n	8008938 <LTC_process+0x74>
	}
	else
	{
		leds_1_off();
 8008930:	23a0      	movs	r3, #160	; 0xa0
 8008932:	05db      	lsls	r3, r3, #23
 8008934:	2202      	movs	r2, #2
 8008936:	629a      	str	r2, [r3, #40]	; 0x28
	}
	counter++;
 8008938:	4b04      	ldr	r3, [pc, #16]	; (800894c <LTC_process+0x88>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	1c5a      	adds	r2, r3, #1
 800893e:	4b03      	ldr	r3, [pc, #12]	; (800894c <LTC_process+0x88>)
 8008940:	601a      	str	r2, [r3, #0]
}
 8008942:	46c0      	nop			; (mov r8, r8)
 8008944:	46bd      	mov	sp, r7
 8008946:	b003      	add	sp, #12
 8008948:	bd90      	pop	{r4, r7, pc}
 800894a:	46c0      	nop			; (mov r8, r8)
 800894c:	20000328 	.word	0x20000328
 8008950:	20000440 	.word	0x20000440
 8008954:	080123fc 	.word	0x080123fc

08008958 <LTC_init>:

/*****************************************************************************/
void LTC_init(void)
{
 8008958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800895a:	b089      	sub	sp, #36	; 0x24
 800895c:	af04      	add	r7, sp, #16
	uint8_t status = LTC_readReg8(COMMAND_STATUS_REGISTER);
 800895e:	1cfc      	adds	r4, r7, #3
 8008960:	2000      	movs	r0, #0
 8008962:	f7ff fdaf 	bl	80084c4 <LTC_readReg8>
 8008966:	0003      	movs	r3, r0
 8008968:	7023      	strb	r3, [r4, #0]
	dbg_printf("Initial status : %x\n", status);
 800896a:	1cfb      	adds	r3, r7, #3
 800896c:	781a      	ldrb	r2, [r3, #0]
 800896e:	4b7a      	ldr	r3, [pc, #488]	; (8008b58 <LTC_init+0x200>)
 8008970:	0011      	movs	r1, r2
 8008972:	0018      	movs	r0, r3
 8008974:	f006 f8e8 	bl	800eb48 <iprintf>

	uint32_t readMulti = 0;
 8008978:	2300      	movs	r3, #0
 800897a:	60fb      	str	r3, [r7, #12]

	for (int idx = 0; idx < 8; idx++)
 800897c:	2300      	movs	r3, #0
 800897e:	60bb      	str	r3, [r7, #8]
 8008980:	e05d      	b.n	8008a3e <LTC_init+0xe6>
	{
		/*LTC_TC_configureChannel(idx, SENSOR_TYPE__TYPE_T_THERMOCOUPLE, TC_COLD_JUNCTION_CH__12,

										TC_SINGLE_ENDED, TC_OPEN_CKT_DETECT__YES, TC_OPEN_CKT_DETECT_CURRENT__10UA);*/

		LTC_TC_configureChannel(idx, gConfig.ch_conf[idx].sensorType, gConfig.ch_conf[idx].CJ_channel,
 8008982:	68bc      	ldr	r4, [r7, #8]
 8008984:	4975      	ldr	r1, [pc, #468]	; (8008b5c <LTC_init+0x204>)
 8008986:	68ba      	ldr	r2, [r7, #8]
 8008988:	0013      	movs	r3, r2
 800898a:	00db      	lsls	r3, r3, #3
 800898c:	1a9b      	subs	r3, r3, r2
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	18cb      	adds	r3, r1, r3
 8008992:	3308      	adds	r3, #8
 8008994:	681d      	ldr	r5, [r3, #0]
 8008996:	4971      	ldr	r1, [pc, #452]	; (8008b5c <LTC_init+0x204>)
 8008998:	68ba      	ldr	r2, [r7, #8]
 800899a:	0013      	movs	r3, r2
 800899c:	00db      	lsls	r3, r3, #3
 800899e:	1a9b      	subs	r3, r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	18cb      	adds	r3, r1, r3
 80089a4:	330c      	adds	r3, #12
 80089a6:	681e      	ldr	r6, [r3, #0]
 80089a8:	496c      	ldr	r1, [pc, #432]	; (8008b5c <LTC_init+0x204>)
 80089aa:	68ba      	ldr	r2, [r7, #8]
 80089ac:	0013      	movs	r3, r2
 80089ae:	00db      	lsls	r3, r3, #3
 80089b0:	1a9b      	subs	r3, r3, r2
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	18cb      	adds	r3, r1, r3
 80089b6:	3310      	adds	r3, #16
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	469c      	mov	ip, r3
 80089bc:	4967      	ldr	r1, [pc, #412]	; (8008b5c <LTC_init+0x204>)
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	0013      	movs	r3, r2
 80089c2:	00db      	lsls	r3, r3, #3
 80089c4:	1a9b      	subs	r3, r3, r2
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	18cb      	adds	r3, r1, r3
 80089ca:	3314      	adds	r3, #20
 80089cc:	6819      	ldr	r1, [r3, #0]
 80089ce:	4863      	ldr	r0, [pc, #396]	; (8008b5c <LTC_init+0x204>)
 80089d0:	68ba      	ldr	r2, [r7, #8]
 80089d2:	0013      	movs	r3, r2
 80089d4:	00db      	lsls	r3, r3, #3
 80089d6:	1a9b      	subs	r3, r3, r2
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	18c3      	adds	r3, r0, r3
 80089dc:	3318      	adds	r3, #24
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	9301      	str	r3, [sp, #4]
 80089e2:	9100      	str	r1, [sp, #0]
 80089e4:	4663      	mov	r3, ip
 80089e6:	0032      	movs	r2, r6
 80089e8:	0029      	movs	r1, r5
 80089ea:	0020      	movs	r0, r4
 80089ec:	f7ff fee0 	bl	80087b0 <LTC_TC_configureChannel>
								gConfig.ch_conf[idx].singleEnded, gConfig.ch_conf[idx].openCktDetect, gConfig.ch_conf[idx].openCktDetectCurrent);

		dbg_printf("gConfig.ch_conf[%d].enabled : %d\n", idx, gConfig.ch_conf[idx].enabled);
 80089f0:	495a      	ldr	r1, [pc, #360]	; (8008b5c <LTC_init+0x204>)
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	2020      	movs	r0, #32
 80089f6:	0013      	movs	r3, r2
 80089f8:	00db      	lsls	r3, r3, #3
 80089fa:	1a9b      	subs	r3, r3, r2
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	18cb      	adds	r3, r1, r3
 8008a00:	181b      	adds	r3, r3, r0
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	001a      	movs	r2, r3
 8008a06:	68b9      	ldr	r1, [r7, #8]
 8008a08:	4b55      	ldr	r3, [pc, #340]	; (8008b60 <LTC_init+0x208>)
 8008a0a:	0018      	movs	r0, r3
 8008a0c:	f006 f89c 	bl	800eb48 <iprintf>
		if (gConfig.ch_conf[idx].enabled)
 8008a10:	4952      	ldr	r1, [pc, #328]	; (8008b5c <LTC_init+0x204>)
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	2020      	movs	r0, #32
 8008a16:	0013      	movs	r3, r2
 8008a18:	00db      	lsls	r3, r3, #3
 8008a1a:	1a9b      	subs	r3, r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	18cb      	adds	r3, r1, r3
 8008a20:	181b      	adds	r3, r3, r0
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d007      	beq.n	8008a38 <LTC_init+0xe0>
			readMulti |= (1 << idx);
 8008a28:	2201      	movs	r2, #1
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	409a      	lsls	r2, r3
 8008a2e:	0013      	movs	r3, r2
 8008a30:	001a      	movs	r2, r3
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	60fb      	str	r3, [r7, #12]
	for (int idx = 0; idx < 8; idx++)
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	60bb      	str	r3, [r7, #8]
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	2b07      	cmp	r3, #7
 8008a42:	dd9e      	ble.n	8008982 <LTC_init+0x2a>

	}

	for (int idx = 12; idx < 20; idx++)
 8008a44:	230c      	movs	r3, #12
 8008a46:	607b      	str	r3, [r7, #4]
 8008a48:	e05d      	b.n	8008b06 <LTC_init+0x1ae>
	{
		/*LTC_TC_configureChannel(idx, SENSOR_TYPE__TYPE_T_THERMOCOUPLE, TC_COLD_JUNCTION_CH__12,
										TC_SINGLE_ENDED, TC_OPEN_CKT_DETECT__YES, TC_OPEN_CKT_DETECT_CURRENT__10UA);*/
		LTC_TC_configureChannel(idx, gConfig.ch_conf[idx].sensorType, gConfig.ch_conf[idx].CJ_channel,
 8008a4a:	687c      	ldr	r4, [r7, #4]
 8008a4c:	4943      	ldr	r1, [pc, #268]	; (8008b5c <LTC_init+0x204>)
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	0013      	movs	r3, r2
 8008a52:	00db      	lsls	r3, r3, #3
 8008a54:	1a9b      	subs	r3, r3, r2
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	18cb      	adds	r3, r1, r3
 8008a5a:	3308      	adds	r3, #8
 8008a5c:	681d      	ldr	r5, [r3, #0]
 8008a5e:	493f      	ldr	r1, [pc, #252]	; (8008b5c <LTC_init+0x204>)
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	0013      	movs	r3, r2
 8008a64:	00db      	lsls	r3, r3, #3
 8008a66:	1a9b      	subs	r3, r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	18cb      	adds	r3, r1, r3
 8008a6c:	330c      	adds	r3, #12
 8008a6e:	681e      	ldr	r6, [r3, #0]
 8008a70:	493a      	ldr	r1, [pc, #232]	; (8008b5c <LTC_init+0x204>)
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	0013      	movs	r3, r2
 8008a76:	00db      	lsls	r3, r3, #3
 8008a78:	1a9b      	subs	r3, r3, r2
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	18cb      	adds	r3, r1, r3
 8008a7e:	3310      	adds	r3, #16
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	469c      	mov	ip, r3
 8008a84:	4935      	ldr	r1, [pc, #212]	; (8008b5c <LTC_init+0x204>)
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	0013      	movs	r3, r2
 8008a8a:	00db      	lsls	r3, r3, #3
 8008a8c:	1a9b      	subs	r3, r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	18cb      	adds	r3, r1, r3
 8008a92:	3314      	adds	r3, #20
 8008a94:	6819      	ldr	r1, [r3, #0]
 8008a96:	4831      	ldr	r0, [pc, #196]	; (8008b5c <LTC_init+0x204>)
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	0013      	movs	r3, r2
 8008a9c:	00db      	lsls	r3, r3, #3
 8008a9e:	1a9b      	subs	r3, r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	18c3      	adds	r3, r0, r3
 8008aa4:	3318      	adds	r3, #24
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	9301      	str	r3, [sp, #4]
 8008aaa:	9100      	str	r1, [sp, #0]
 8008aac:	4663      	mov	r3, ip
 8008aae:	0032      	movs	r2, r6
 8008ab0:	0029      	movs	r1, r5
 8008ab2:	0020      	movs	r0, r4
 8008ab4:	f7ff fe7c 	bl	80087b0 <LTC_TC_configureChannel>
										gConfig.ch_conf[idx].singleEnded, gConfig.ch_conf[idx].openCktDetect, gConfig.ch_conf[idx].openCktDetectCurrent);

		dbg_printf("gConfig.ch_conf[%d].enabled : %d\n", idx, gConfig.ch_conf[idx].enabled);
 8008ab8:	4928      	ldr	r1, [pc, #160]	; (8008b5c <LTC_init+0x204>)
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	2020      	movs	r0, #32
 8008abe:	0013      	movs	r3, r2
 8008ac0:	00db      	lsls	r3, r3, #3
 8008ac2:	1a9b      	subs	r3, r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	18cb      	adds	r3, r1, r3
 8008ac8:	181b      	adds	r3, r3, r0
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	001a      	movs	r2, r3
 8008ace:	6879      	ldr	r1, [r7, #4]
 8008ad0:	4b23      	ldr	r3, [pc, #140]	; (8008b60 <LTC_init+0x208>)
 8008ad2:	0018      	movs	r0, r3
 8008ad4:	f006 f838 	bl	800eb48 <iprintf>

		if (gConfig.ch_conf[idx].enabled)
 8008ad8:	4920      	ldr	r1, [pc, #128]	; (8008b5c <LTC_init+0x204>)
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	2020      	movs	r0, #32
 8008ade:	0013      	movs	r3, r2
 8008ae0:	00db      	lsls	r3, r3, #3
 8008ae2:	1a9b      	subs	r3, r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	18cb      	adds	r3, r1, r3
 8008ae8:	181b      	adds	r3, r3, r0
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d007      	beq.n	8008b00 <LTC_init+0x1a8>
			readMulti |= (1 << idx);
 8008af0:	2201      	movs	r2, #1
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	409a      	lsls	r2, r3
 8008af6:	0013      	movs	r3, r2
 8008af8:	001a      	movs	r2, r3
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	60fb      	str	r3, [r7, #12]
	for (int idx = 12; idx < 20; idx++)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	3301      	adds	r3, #1
 8008b04:	607b      	str	r3, [r7, #4]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2b13      	cmp	r3, #19
 8008b0a:	dd9e      	ble.n	8008a4a <LTC_init+0xf2>
	}

	LTC_enableConvChannels(readMulti);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	0018      	movs	r0, r3
 8008b10:	f7ff fe40 	bl	8008794 <LTC_enableConvChannels>

	LTC_RTD_configureChannel(RTD_CHANNEL, SENSOR_TYPE__RTD_PT_100, RTD_RSENSE_CHANNEL__10, RTD_NUM_WIRES__4_WIRE,
 8008b14:	2380      	movs	r3, #128	; 0x80
 8008b16:	0398      	lsls	r0, r3, #14
 8008b18:	23a0      	movs	r3, #160	; 0xa0
 8008b1a:	049a      	lsls	r2, r3, #18
 8008b1c:	23c0      	movs	r3, #192	; 0xc0
 8008b1e:	05d9      	lsls	r1, r3, #23
 8008b20:	2300      	movs	r3, #0
 8008b22:	9302      	str	r3, [sp, #8]
 8008b24:	23c0      	movs	r3, #192	; 0xc0
 8008b26:	021b      	lsls	r3, r3, #8
 8008b28:	9301      	str	r3, [sp, #4]
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	9300      	str	r3, [sp, #0]
 8008b2e:	0003      	movs	r3, r0
 8008b30:	200b      	movs	r0, #11
 8008b32:	f7ff fe8b 	bl	800884c <LTC_RTD_configureChannel>
							RTD_EXCITATION_MODE__NO_ROTATION_NO_SHARING, RTD_EXCITATION_CURRENT__25UA, RTD_STANDARD__EUROPEAN);


	LTC_RTD_configureRSense(RSENSE_CHANNEL, SENSOR_TYPE__SENSE_RESISTOR, RSENSE_2K, RSENSE_03K);
 8008b36:	23fa      	movs	r3, #250	; 0xfa
 8008b38:	035a      	lsls	r2, r3, #13
 8008b3a:	23e8      	movs	r3, #232	; 0xe8
 8008b3c:	0619      	lsls	r1, r3, #24
 8008b3e:	231e      	movs	r3, #30
 8008b40:	2009      	movs	r0, #9
 8008b42:	f7ff fea4 	bl	800888e <LTC_RTD_configureRSense>


	HAL_Delay(1000);
 8008b46:	23fa      	movs	r3, #250	; 0xfa
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	0018      	movs	r0, r3
 8008b4c:	f001 fa7a 	bl	800a044 <HAL_Delay>

}
 8008b50:	46c0      	nop			; (mov r8, r8)
 8008b52:	46bd      	mov	sp, r7
 8008b54:	b005      	add	sp, #20
 8008b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b58:	0801241c 	.word	0x0801241c
 8008b5c:	20000530 	.word	0x20000530
 8008b60:	08012434 	.word	0x08012434

08008b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  bl_remapMemToSRAM();
 8008b68:	f7fe ff80 	bl	8007a6c <bl_remapMemToSRAM>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008b6c:	f001 f9fa 	bl	8009f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008b70:	f000 f828 	bl	8008bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008b74:	f000 f958 	bl	8008e28 <MX_GPIO_Init>
  MX_DMA_Init();
 8008b78:	f000 f930 	bl	8008ddc <MX_DMA_Init>
  MX_SPI1_Init();
 8008b7c:	f000 f896 	bl	8008cac <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8008b80:	f000 f8fc 	bl	8008d7c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8008b84:	f000 f8ca 	bl	8008d1c <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  GPIO_Configure(gInitGPIOs, gGPIOPinCount);
 8008b88:	230c      	movs	r3, #12
 8008b8a:	001a      	movs	r2, r3
 8008b8c:	4b0b      	ldr	r3, [pc, #44]	; (8008bbc <main+0x58>)
 8008b8e:	0011      	movs	r1, r2
 8008b90:	0018      	movs	r0, r3
 8008b92:	f7ff fb40 	bl	8008216 <GPIO_Configure>

  debug_init();
 8008b96:	f7ff fa5b 	bl	8008050 <debug_init>

  conf_init();
 8008b9a:	f7ff fa05 	bl	8007fa8 <conf_init>

  rt_bus_init();
 8008b9e:	f000 fc61 	bl	8009464 <rt_bus_init>

  iapMailbox[0] = 0x00;
 8008ba2:	4b07      	ldr	r3, [pc, #28]	; (8008bc0 <main+0x5c>)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	601a      	str	r2, [r3, #0]
  iapMailbox[1] = 0x00;
 8008ba8:	4b05      	ldr	r3, [pc, #20]	; (8008bc0 <main+0x5c>)
 8008baa:	2200      	movs	r2, #0
 8008bac:	605a      	str	r2, [r3, #4]

  LTC_init();
 8008bae:	f7ff fed3 	bl	8008958 <LTC_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rt_bus_proto_clear();
 8008bb2:	f000 fd41 	bl	8009638 <rt_bus_proto_clear>

	  LTC_process();
 8008bb6:	f7ff fe85 	bl	80088c4 <LTC_process>
	  rt_bus_proto_clear();
 8008bba:	e7fa      	b.n	8008bb2 <main+0x4e>
 8008bbc:	080129d4 	.word	0x080129d4
 8008bc0:	20000100 	.word	0x20000100

08008bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008bc4:	b590      	push	{r4, r7, lr}
 8008bc6:	b09f      	sub	sp, #124	; 0x7c
 8008bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008bca:	2440      	movs	r4, #64	; 0x40
 8008bcc:	193b      	adds	r3, r7, r4
 8008bce:	0018      	movs	r0, r3
 8008bd0:	2338      	movs	r3, #56	; 0x38
 8008bd2:	001a      	movs	r2, r3
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	f005 f953 	bl	800de80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008bda:	232c      	movs	r3, #44	; 0x2c
 8008bdc:	18fb      	adds	r3, r7, r3
 8008bde:	0018      	movs	r0, r3
 8008be0:	2314      	movs	r3, #20
 8008be2:	001a      	movs	r2, r3
 8008be4:	2100      	movs	r1, #0
 8008be6:	f005 f94b 	bl	800de80 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008bea:	1d3b      	adds	r3, r7, #4
 8008bec:	0018      	movs	r0, r3
 8008bee:	2328      	movs	r3, #40	; 0x28
 8008bf0:	001a      	movs	r2, r3
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	f005 f944 	bl	800de80 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008bf8:	4b2a      	ldr	r3, [pc, #168]	; (8008ca4 <SystemClock_Config+0xe0>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a2a      	ldr	r2, [pc, #168]	; (8008ca8 <SystemClock_Config+0xe4>)
 8008bfe:	401a      	ands	r2, r3
 8008c00:	4b28      	ldr	r3, [pc, #160]	; (8008ca4 <SystemClock_Config+0xe0>)
 8008c02:	2180      	movs	r1, #128	; 0x80
 8008c04:	0109      	lsls	r1, r1, #4
 8008c06:	430a      	orrs	r2, r1
 8008c08:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008c0a:	0021      	movs	r1, r4
 8008c0c:	187b      	adds	r3, r7, r1
 8008c0e:	2202      	movs	r2, #2
 8008c10:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008c12:	187b      	adds	r3, r7, r1
 8008c14:	2201      	movs	r2, #1
 8008c16:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008c18:	187b      	adds	r3, r7, r1
 8008c1a:	2210      	movs	r2, #16
 8008c1c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008c1e:	187b      	adds	r3, r7, r1
 8008c20:	2202      	movs	r2, #2
 8008c22:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008c24:	187b      	adds	r3, r7, r1
 8008c26:	2200      	movs	r2, #0
 8008c28:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8008c2a:	187b      	adds	r3, r7, r1
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8008c30:	187b      	adds	r3, r7, r1
 8008c32:	2280      	movs	r2, #128	; 0x80
 8008c34:	03d2      	lsls	r2, r2, #15
 8008c36:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008c38:	187b      	adds	r3, r7, r1
 8008c3a:	0018      	movs	r0, r3
 8008c3c:	f002 f9ac 	bl	800af98 <HAL_RCC_OscConfig>
 8008c40:	1e03      	subs	r3, r0, #0
 8008c42:	d001      	beq.n	8008c48 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8008c44:	f000 f96e 	bl	8008f24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008c48:	212c      	movs	r1, #44	; 0x2c
 8008c4a:	187b      	adds	r3, r7, r1
 8008c4c:	220f      	movs	r2, #15
 8008c4e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008c50:	187b      	adds	r3, r7, r1
 8008c52:	2203      	movs	r2, #3
 8008c54:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008c56:	187b      	adds	r3, r7, r1
 8008c58:	2200      	movs	r2, #0
 8008c5a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008c5c:	187b      	adds	r3, r7, r1
 8008c5e:	2200      	movs	r2, #0
 8008c60:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008c62:	187b      	adds	r3, r7, r1
 8008c64:	2200      	movs	r2, #0
 8008c66:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8008c68:	187b      	adds	r3, r7, r1
 8008c6a:	2101      	movs	r1, #1
 8008c6c:	0018      	movs	r0, r3
 8008c6e:	f002 fd69 	bl	800b744 <HAL_RCC_ClockConfig>
 8008c72:	1e03      	subs	r3, r0, #0
 8008c74:	d001      	beq.n	8008c7a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8008c76:	f000 f955 	bl	8008f24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8008c7a:	1d3b      	adds	r3, r7, #4
 8008c7c:	2203      	movs	r2, #3
 8008c7e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008c80:	1d3b      	adds	r3, r7, #4
 8008c82:	2200      	movs	r2, #0
 8008c84:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008c86:	1d3b      	adds	r3, r7, #4
 8008c88:	2200      	movs	r2, #0
 8008c8a:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008c8c:	1d3b      	adds	r3, r7, #4
 8008c8e:	0018      	movs	r0, r3
 8008c90:	f002 ff78 	bl	800bb84 <HAL_RCCEx_PeriphCLKConfig>
 8008c94:	1e03      	subs	r3, r0, #0
 8008c96:	d001      	beq.n	8008c9c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8008c98:	f000 f944 	bl	8008f24 <Error_Handler>
  }
}
 8008c9c:	46c0      	nop			; (mov r8, r8)
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	b01f      	add	sp, #124	; 0x7c
 8008ca2:	bd90      	pop	{r4, r7, pc}
 8008ca4:	40007000 	.word	0x40007000
 8008ca8:	ffffe7ff 	.word	0xffffe7ff

08008cac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8008cb0:	4b18      	ldr	r3, [pc, #96]	; (8008d14 <MX_SPI1_Init+0x68>)
 8008cb2:	4a19      	ldr	r2, [pc, #100]	; (8008d18 <MX_SPI1_Init+0x6c>)
 8008cb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008cb6:	4b17      	ldr	r3, [pc, #92]	; (8008d14 <MX_SPI1_Init+0x68>)
 8008cb8:	2282      	movs	r2, #130	; 0x82
 8008cba:	0052      	lsls	r2, r2, #1
 8008cbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008cbe:	4b15      	ldr	r3, [pc, #84]	; (8008d14 <MX_SPI1_Init+0x68>)
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008cc4:	4b13      	ldr	r3, [pc, #76]	; (8008d14 <MX_SPI1_Init+0x68>)
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008cca:	4b12      	ldr	r3, [pc, #72]	; (8008d14 <MX_SPI1_Init+0x68>)
 8008ccc:	2200      	movs	r2, #0
 8008cce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008cd0:	4b10      	ldr	r3, [pc, #64]	; (8008d14 <MX_SPI1_Init+0x68>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008cd6:	4b0f      	ldr	r3, [pc, #60]	; (8008d14 <MX_SPI1_Init+0x68>)
 8008cd8:	2280      	movs	r2, #128	; 0x80
 8008cda:	0092      	lsls	r2, r2, #2
 8008cdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008cde:	4b0d      	ldr	r3, [pc, #52]	; (8008d14 <MX_SPI1_Init+0x68>)
 8008ce0:	2210      	movs	r2, #16
 8008ce2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008ce4:	4b0b      	ldr	r3, [pc, #44]	; (8008d14 <MX_SPI1_Init+0x68>)
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008cea:	4b0a      	ldr	r3, [pc, #40]	; (8008d14 <MX_SPI1_Init+0x68>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008cf0:	4b08      	ldr	r3, [pc, #32]	; (8008d14 <MX_SPI1_Init+0x68>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8008cf6:	4b07      	ldr	r3, [pc, #28]	; (8008d14 <MX_SPI1_Init+0x68>)
 8008cf8:	2207      	movs	r2, #7
 8008cfa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008cfc:	4b05      	ldr	r3, [pc, #20]	; (8008d14 <MX_SPI1_Init+0x68>)
 8008cfe:	0018      	movs	r0, r3
 8008d00:	f003 f8b4 	bl	800be6c <HAL_SPI_Init>
 8008d04:	1e03      	subs	r3, r0, #0
 8008d06:	d001      	beq.n	8008d0c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8008d08:	f000 f90c 	bl	8008f24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008d0c:	46c0      	nop			; (mov r8, r8)
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	46c0      	nop			; (mov r8, r8)
 8008d14:	200010c4 	.word	0x200010c4
 8008d18:	40013000 	.word	0x40013000

08008d1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008d20:	4b14      	ldr	r3, [pc, #80]	; (8008d74 <MX_USART1_UART_Init+0x58>)
 8008d22:	4a15      	ldr	r2, [pc, #84]	; (8008d78 <MX_USART1_UART_Init+0x5c>)
 8008d24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008d26:	4b13      	ldr	r3, [pc, #76]	; (8008d74 <MX_USART1_UART_Init+0x58>)
 8008d28:	22e1      	movs	r2, #225	; 0xe1
 8008d2a:	0252      	lsls	r2, r2, #9
 8008d2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008d2e:	4b11      	ldr	r3, [pc, #68]	; (8008d74 <MX_USART1_UART_Init+0x58>)
 8008d30:	2200      	movs	r2, #0
 8008d32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008d34:	4b0f      	ldr	r3, [pc, #60]	; (8008d74 <MX_USART1_UART_Init+0x58>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008d3a:	4b0e      	ldr	r3, [pc, #56]	; (8008d74 <MX_USART1_UART_Init+0x58>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008d40:	4b0c      	ldr	r3, [pc, #48]	; (8008d74 <MX_USART1_UART_Init+0x58>)
 8008d42:	220c      	movs	r2, #12
 8008d44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008d46:	4b0b      	ldr	r3, [pc, #44]	; (8008d74 <MX_USART1_UART_Init+0x58>)
 8008d48:	2200      	movs	r2, #0
 8008d4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008d4c:	4b09      	ldr	r3, [pc, #36]	; (8008d74 <MX_USART1_UART_Init+0x58>)
 8008d4e:	2200      	movs	r2, #0
 8008d50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008d52:	4b08      	ldr	r3, [pc, #32]	; (8008d74 <MX_USART1_UART_Init+0x58>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008d58:	4b06      	ldr	r3, [pc, #24]	; (8008d74 <MX_USART1_UART_Init+0x58>)
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008d5e:	4b05      	ldr	r3, [pc, #20]	; (8008d74 <MX_USART1_UART_Init+0x58>)
 8008d60:	0018      	movs	r0, r3
 8008d62:	f003 fe8d 	bl	800ca80 <HAL_UART_Init>
 8008d66:	1e03      	subs	r3, r0, #0
 8008d68:	d001      	beq.n	8008d6e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8008d6a:	f000 f8db 	bl	8008f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008d6e:	46c0      	nop			; (mov r8, r8)
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	20001040 	.word	0x20001040
 8008d78:	40013800 	.word	0x40013800

08008d7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008d80:	4b14      	ldr	r3, [pc, #80]	; (8008dd4 <MX_USART2_UART_Init+0x58>)
 8008d82:	4a15      	ldr	r2, [pc, #84]	; (8008dd8 <MX_USART2_UART_Init+0x5c>)
 8008d84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008d86:	4b13      	ldr	r3, [pc, #76]	; (8008dd4 <MX_USART2_UART_Init+0x58>)
 8008d88:	22e1      	movs	r2, #225	; 0xe1
 8008d8a:	0252      	lsls	r2, r2, #9
 8008d8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008d8e:	4b11      	ldr	r3, [pc, #68]	; (8008dd4 <MX_USART2_UART_Init+0x58>)
 8008d90:	2200      	movs	r2, #0
 8008d92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008d94:	4b0f      	ldr	r3, [pc, #60]	; (8008dd4 <MX_USART2_UART_Init+0x58>)
 8008d96:	2200      	movs	r2, #0
 8008d98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008d9a:	4b0e      	ldr	r3, [pc, #56]	; (8008dd4 <MX_USART2_UART_Init+0x58>)
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8008da0:	4b0c      	ldr	r3, [pc, #48]	; (8008dd4 <MX_USART2_UART_Init+0x58>)
 8008da2:	2208      	movs	r2, #8
 8008da4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008da6:	4b0b      	ldr	r3, [pc, #44]	; (8008dd4 <MX_USART2_UART_Init+0x58>)
 8008da8:	2200      	movs	r2, #0
 8008daa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008dac:	4b09      	ldr	r3, [pc, #36]	; (8008dd4 <MX_USART2_UART_Init+0x58>)
 8008dae:	2200      	movs	r2, #0
 8008db0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008db2:	4b08      	ldr	r3, [pc, #32]	; (8008dd4 <MX_USART2_UART_Init+0x58>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008db8:	4b06      	ldr	r3, [pc, #24]	; (8008dd4 <MX_USART2_UART_Init+0x58>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008dbe:	4b05      	ldr	r3, [pc, #20]	; (8008dd4 <MX_USART2_UART_Init+0x58>)
 8008dc0:	0018      	movs	r0, r3
 8008dc2:	f003 fe5d 	bl	800ca80 <HAL_UART_Init>
 8008dc6:	1e03      	subs	r3, r0, #0
 8008dc8:	d001      	beq.n	8008dce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8008dca:	f000 f8ab 	bl	8008f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008dce:	46c0      	nop			; (mov r8, r8)
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	2000111c 	.word	0x2000111c
 8008dd8:	40004400 	.word	0x40004400

08008ddc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008de2:	4b10      	ldr	r3, [pc, #64]	; (8008e24 <MX_DMA_Init+0x48>)
 8008de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008de6:	4b0f      	ldr	r3, [pc, #60]	; (8008e24 <MX_DMA_Init+0x48>)
 8008de8:	2101      	movs	r1, #1
 8008dea:	430a      	orrs	r2, r1
 8008dec:	631a      	str	r2, [r3, #48]	; 0x30
 8008dee:	4b0d      	ldr	r3, [pc, #52]	; (8008e24 <MX_DMA_Init+0x48>)
 8008df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df2:	2201      	movs	r2, #1
 8008df4:	4013      	ands	r3, r2
 8008df6:	607b      	str	r3, [r7, #4]
 8008df8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	2100      	movs	r1, #0
 8008dfe:	200a      	movs	r0, #10
 8008e00:	f001 fa0e 	bl	800a220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8008e04:	200a      	movs	r0, #10
 8008e06:	f001 fa20 	bl	800a24a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	200b      	movs	r0, #11
 8008e10:	f001 fa06 	bl	800a220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8008e14:	200b      	movs	r0, #11
 8008e16:	f001 fa18 	bl	800a24a <HAL_NVIC_EnableIRQ>

}
 8008e1a:	46c0      	nop			; (mov r8, r8)
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	b002      	add	sp, #8
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	46c0      	nop			; (mov r8, r8)
 8008e24:	40021000 	.word	0x40021000

08008e28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008e28:	b590      	push	{r4, r7, lr}
 8008e2a:	b089      	sub	sp, #36	; 0x24
 8008e2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e2e:	240c      	movs	r4, #12
 8008e30:	193b      	adds	r3, r7, r4
 8008e32:	0018      	movs	r0, r3
 8008e34:	2314      	movs	r3, #20
 8008e36:	001a      	movs	r2, r3
 8008e38:	2100      	movs	r1, #0
 8008e3a:	f005 f821 	bl	800de80 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e3e:	4b37      	ldr	r3, [pc, #220]	; (8008f1c <MX_GPIO_Init+0xf4>)
 8008e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e42:	4b36      	ldr	r3, [pc, #216]	; (8008f1c <MX_GPIO_Init+0xf4>)
 8008e44:	2101      	movs	r1, #1
 8008e46:	430a      	orrs	r2, r1
 8008e48:	62da      	str	r2, [r3, #44]	; 0x2c
 8008e4a:	4b34      	ldr	r3, [pc, #208]	; (8008f1c <MX_GPIO_Init+0xf4>)
 8008e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4e:	2201      	movs	r2, #1
 8008e50:	4013      	ands	r3, r2
 8008e52:	60bb      	str	r3, [r7, #8]
 8008e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e56:	4b31      	ldr	r3, [pc, #196]	; (8008f1c <MX_GPIO_Init+0xf4>)
 8008e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e5a:	4b30      	ldr	r3, [pc, #192]	; (8008f1c <MX_GPIO_Init+0xf4>)
 8008e5c:	2102      	movs	r1, #2
 8008e5e:	430a      	orrs	r2, r1
 8008e60:	62da      	str	r2, [r3, #44]	; 0x2c
 8008e62:	4b2e      	ldr	r3, [pc, #184]	; (8008f1c <MX_GPIO_Init+0xf4>)
 8008e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e66:	2202      	movs	r2, #2
 8008e68:	4013      	ands	r3, r2
 8008e6a:	607b      	str	r3, [r7, #4]
 8008e6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8008e6e:	23a0      	movs	r3, #160	; 0xa0
 8008e70:	05db      	lsls	r3, r3, #23
 8008e72:	2200      	movs	r2, #0
 8008e74:	2103      	movs	r1, #3
 8008e76:	0018      	movs	r0, r3
 8008e78:	f002 f854 	bl	800af24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8008e7c:	2380      	movs	r3, #128	; 0x80
 8008e7e:	015b      	lsls	r3, r3, #5
 8008e80:	4827      	ldr	r0, [pc, #156]	; (8008f20 <MX_GPIO_Init+0xf8>)
 8008e82:	2200      	movs	r2, #0
 8008e84:	0019      	movs	r1, r3
 8008e86:	f002 f84d 	bl	800af24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008e8a:	0021      	movs	r1, r4
 8008e8c:	187b      	adds	r3, r7, r1
 8008e8e:	2203      	movs	r2, #3
 8008e90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e92:	187b      	adds	r3, r7, r1
 8008e94:	2201      	movs	r2, #1
 8008e96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e98:	187b      	adds	r3, r7, r1
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e9e:	187b      	adds	r3, r7, r1
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ea4:	000c      	movs	r4, r1
 8008ea6:	187a      	adds	r2, r7, r1
 8008ea8:	23a0      	movs	r3, #160	; 0xa0
 8008eaa:	05db      	lsls	r3, r3, #23
 8008eac:	0011      	movs	r1, r2
 8008eae:	0018      	movs	r0, r3
 8008eb0:	f001 feba 	bl	800ac28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008eb4:	0021      	movs	r1, r4
 8008eb6:	187b      	adds	r3, r7, r1
 8008eb8:	2280      	movs	r2, #128	; 0x80
 8008eba:	0112      	lsls	r2, r2, #4
 8008ebc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008ebe:	187b      	adds	r3, r7, r1
 8008ec0:	2288      	movs	r2, #136	; 0x88
 8008ec2:	0352      	lsls	r2, r2, #13
 8008ec4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ec6:	187b      	adds	r3, r7, r1
 8008ec8:	2200      	movs	r2, #0
 8008eca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ecc:	000c      	movs	r4, r1
 8008ece:	187b      	adds	r3, r7, r1
 8008ed0:	4a13      	ldr	r2, [pc, #76]	; (8008f20 <MX_GPIO_Init+0xf8>)
 8008ed2:	0019      	movs	r1, r3
 8008ed4:	0010      	movs	r0, r2
 8008ed6:	f001 fea7 	bl	800ac28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008eda:	0021      	movs	r1, r4
 8008edc:	187b      	adds	r3, r7, r1
 8008ede:	2280      	movs	r2, #128	; 0x80
 8008ee0:	0152      	lsls	r2, r2, #5
 8008ee2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ee4:	187b      	adds	r3, r7, r1
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eea:	187b      	adds	r3, r7, r1
 8008eec:	2200      	movs	r2, #0
 8008eee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ef0:	187b      	adds	r3, r7, r1
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ef6:	187b      	adds	r3, r7, r1
 8008ef8:	4a09      	ldr	r2, [pc, #36]	; (8008f20 <MX_GPIO_Init+0xf8>)
 8008efa:	0019      	movs	r1, r3
 8008efc:	0010      	movs	r0, r2
 8008efe:	f001 fe93 	bl	800ac28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8008f02:	2200      	movs	r2, #0
 8008f04:	2100      	movs	r1, #0
 8008f06:	2007      	movs	r0, #7
 8008f08:	f001 f98a 	bl	800a220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8008f0c:	2007      	movs	r0, #7
 8008f0e:	f001 f99c 	bl	800a24a <HAL_NVIC_EnableIRQ>

}
 8008f12:	46c0      	nop			; (mov r8, r8)
 8008f14:	46bd      	mov	sp, r7
 8008f16:	b009      	add	sp, #36	; 0x24
 8008f18:	bd90      	pop	{r4, r7, pc}
 8008f1a:	46c0      	nop			; (mov r8, r8)
 8008f1c:	40021000 	.word	0x40021000
 8008f20:	50000400 	.word	0x50000400

08008f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008f28:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008f2a:	e7fe      	b.n	8008f2a <Error_Handler+0x6>

08008f2c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008f30:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f34:	4b03      	ldr	r3, [pc, #12]	; (8008f44 <__NVIC_SystemReset+0x18>)
 8008f36:	4a04      	ldr	r2, [pc, #16]	; (8008f48 <__NVIC_SystemReset+0x1c>)
 8008f38:	60da      	str	r2, [r3, #12]
 8008f3a:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8008f3e:	46c0      	nop			; (mov r8, r8)
 8008f40:	e7fd      	b.n	8008f3e <__NVIC_SystemReset+0x12>
 8008f42:	46c0      	nop			; (mov r8, r8)
 8008f44:	e000ed00 	.word	0xe000ed00
 8008f48:	05fa0004 	.word	0x05fa0004

08008f4c <rt_bus_get_bit_count>:
extern int bus_get_max_ch();



int rt_bus_get_bit_count(uint8_t data,uint8_t chCount)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	0002      	movs	r2, r0
 8008f54:	1dfb      	adds	r3, r7, #7
 8008f56:	701a      	strb	r2, [r3, #0]
 8008f58:	1dbb      	adds	r3, r7, #6
 8008f5a:	1c0a      	adds	r2, r1, #0
 8008f5c:	701a      	strb	r2, [r3, #0]
	int ret = 0;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	617b      	str	r3, [r7, #20]
	int mask = 0;
 8008f62:	2300      	movs	r3, #0
 8008f64:	613b      	str	r3, [r7, #16]

	for (int i=0;i<chCount;i++)	// check if unsupported channel is flagged
 8008f66:	2300      	movs	r3, #0
 8008f68:	60fb      	str	r3, [r7, #12]
 8008f6a:	e009      	b.n	8008f80 <rt_bus_get_bit_count+0x34>
	{
		mask |= (1<<i);
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	409a      	lsls	r2, r3
 8008f72:	0013      	movs	r3, r2
 8008f74:	693a      	ldr	r2, [r7, #16]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	613b      	str	r3, [r7, #16]
	for (int i=0;i<chCount;i++)	// check if unsupported channel is flagged
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	60fb      	str	r3, [r7, #12]
 8008f80:	1dbb      	adds	r3, r7, #6
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	dbf0      	blt.n	8008f6c <rt_bus_get_bit_count+0x20>
	}

	if ((~mask) & data)	// if unsupported ch is flagged than return 0
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	43db      	mvns	r3, r3
 8008f8e:	1dfa      	adds	r2, r7, #7
 8008f90:	7812      	ldrb	r2, [r2, #0]
 8008f92:	4013      	ands	r3, r2
 8008f94:	d001      	beq.n	8008f9a <rt_bus_get_bit_count+0x4e>
		return 0;
 8008f96:	2300      	movs	r3, #0
 8008f98:	e016      	b.n	8008fc8 <rt_bus_get_bit_count+0x7c>

	for (int i=0;i<chCount;i++)
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	60bb      	str	r3, [r7, #8]
 8008f9e:	e00d      	b.n	8008fbc <rt_bus_get_bit_count+0x70>
	{
		if (data & (1<<i))
 8008fa0:	1dfb      	adds	r3, r7, #7
 8008fa2:	781a      	ldrb	r2, [r3, #0]
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	411a      	asrs	r2, r3
 8008fa8:	0013      	movs	r3, r2
 8008faa:	2201      	movs	r2, #1
 8008fac:	4013      	ands	r3, r2
 8008fae:	d002      	beq.n	8008fb6 <rt_bus_get_bit_count+0x6a>
		{
			ret ++;
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	617b      	str	r3, [r7, #20]
	for (int i=0;i<chCount;i++)
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	60bb      	str	r3, [r7, #8]
 8008fbc:	1dbb      	adds	r3, r7, #6
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	68ba      	ldr	r2, [r7, #8]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	dbec      	blt.n	8008fa0 <rt_bus_get_bit_count+0x54>
		}
	}
	return ret;
 8008fc6:	697b      	ldr	r3, [r7, #20]
}
 8008fc8:	0018      	movs	r0, r3
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	b006      	add	sp, #24
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <rt_bus_cmd_ping_handler>:
#endif

#if (BUS_CAN_PING == 1)
extern void bus_ping_received_hook();
uint32_t rt_bus_cmd_ping_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	607a      	str	r2, [r7, #4]
 8008fda:	603b      	str	r3, [r7, #0]
 8008fdc:	200a      	movs	r0, #10
 8008fde:	183b      	adds	r3, r7, r0
 8008fe0:	1c0a      	adds	r2, r1, #0
 8008fe2:	801a      	strh	r2, [r3, #0]
	if (rxLen != 1)
 8008fe4:	183b      	adds	r3, r7, r0
 8008fe6:	881b      	ldrh	r3, [r3, #0]
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d001      	beq.n	8008ff0 <rt_bus_cmd_ping_handler+0x20>
	{
		return RT_PROTO_FrameError;
 8008fec:	2301      	movs	r3, #1
 8008fee:	e00b      	b.n	8009008 <rt_bus_cmd_ping_handler+0x38>
	}

	bus_ping_received_hook();
 8008ff0:	f7fe ff50 	bl	8007e94 <bus_ping_received_hook>

	txData[0] = rxData[0] + 1;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	701a      	strb	r2, [r3, #0]
	*txLen = 1;
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	2201      	movs	r2, #1
 8009004:	801a      	strh	r2, [r3, #0]
	return RT_PROTO_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	0018      	movs	r0, r3
 800900a:	46bd      	mov	sp, r7
 800900c:	b004      	add	sp, #16
 800900e:	bd80      	pop	{r7, pc}

08009010 <rt_bus_cmd_ident_handler>:
#endif

#if (BUS_CAN_IDENT == 1)
uint32_t rt_bus_cmd_ident_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	607a      	str	r2, [r7, #4]
 800901a:	603b      	str	r3, [r7, #0]
 800901c:	200a      	movs	r0, #10
 800901e:	183b      	adds	r3, r7, r0
 8009020:	1c0a      	adds	r2, r1, #0
 8009022:	801a      	strh	r2, [r3, #0]
	if (rxLen != 1)
 8009024:	183b      	adds	r3, r7, r0
 8009026:	881b      	ldrh	r3, [r3, #0]
 8009028:	2b01      	cmp	r3, #1
 800902a:	d001      	beq.n	8009030 <rt_bus_cmd_ident_handler+0x20>
	{
		return RT_PROTO_FrameError;
 800902c:	2301      	movs	r3, #1
 800902e:	e008      	b.n	8009042 <rt_bus_cmd_ident_handler+0x32>
	}


	leds_ident(rxData[0]);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	0018      	movs	r0, r3
 8009036:	f7ff f981 	bl	800833c <leds_ident>

	*txLen = 0;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	2200      	movs	r2, #0
 800903e:	801a      	strh	r2, [r3, #0]
	return RT_PROTO_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	0018      	movs	r0, r3
 8009044:	46bd      	mov	sp, r7
 8009046:	b004      	add	sp, #16
 8009048:	bd80      	pop	{r7, pc}
	...

0800904c <rt_bus_cmd_reset>:

#if (BUS_CAN_RESET == 1)
extern void bus_reseting_hook();
extern uint32_t iapMailbox[2];
uint32_t rt_bus_cmd_reset (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	607a      	str	r2, [r7, #4]
 8009056:	603b      	str	r3, [r7, #0]
 8009058:	230a      	movs	r3, #10
 800905a:	18fb      	adds	r3, r7, r3
 800905c:	1c0a      	adds	r2, r1, #0
 800905e:	801a      	strh	r2, [r3, #0]
	iapMailbox[0] = 0;
 8009060:	4b04      	ldr	r3, [pc, #16]	; (8009074 <rt_bus_cmd_reset+0x28>)
 8009062:	2200      	movs	r2, #0
 8009064:	601a      	str	r2, [r3, #0]
	iapMailbox[1] = 0;
 8009066:	4b03      	ldr	r3, [pc, #12]	; (8009074 <rt_bus_cmd_reset+0x28>)
 8009068:	2200      	movs	r2, #0
 800906a:	605a      	str	r2, [r3, #4]
	bus_reseting_hook();
 800906c:	f7fe ff24 	bl	8007eb8 <bus_reseting_hook>
	NVIC_SystemReset();
 8009070:	f7ff ff5c 	bl	8008f2c <__NVIC_SystemReset>
 8009074:	20000100 	.word	0x20000100

08009078 <rt_bus_cmd_conf_read_handler>:

#if (BUS_CAN_RD_CONF == 1)
extern int bus_read_ch_conf(uint8_t ch, uint8_t *data);
extern int bus_read_all_conf(uint8_t *data);
uint32_t rt_bus_cmd_conf_read_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b088      	sub	sp, #32
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	607a      	str	r2, [r7, #4]
 8009082:	603b      	str	r3, [r7, #0]
 8009084:	230a      	movs	r3, #10
 8009086:	18fb      	adds	r3, r7, r3
 8009088:	1c0a      	adds	r2, r1, #0
 800908a:	801a      	strh	r2, [r3, #0]
	uint32_t length=0;
 800908c:	2300      	movs	r3, #0
 800908e:	61fb      	str	r3, [r7, #28]
	int ret = 0;
 8009090:	2300      	movs	r3, #0
 8009092:	617b      	str	r3, [r7, #20]
	int chCount;

	if ((rxData[0] == 0)||(rxData[0] == 0xFF))
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d003      	beq.n	80090a4 <rt_bus_cmd_conf_read_handler+0x2c>
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	2bff      	cmp	r3, #255	; 0xff
 80090a2:	d10d      	bne.n	80090c0 <rt_bus_cmd_conf_read_handler+0x48>
	{
		ret = bus_read_all_conf(&txData[0]);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	0018      	movs	r0, r3
 80090a8:	f7fe fdd6 	bl	8007c58 <bus_read_all_conf>
 80090ac:	0003      	movs	r3, r0
 80090ae:	617b      	str	r3, [r7, #20]
		if (ret < 0)
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	da01      	bge.n	80090ba <rt_bus_cmd_conf_read_handler+0x42>
			return RT_PROTO_DataError;
 80090b6:	2302      	movs	r3, #2
 80090b8:	e042      	b.n	8009140 <rt_bus_cmd_conf_read_handler+0xc8>
		length = ret;
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	61fb      	str	r3, [r7, #28]
 80090be:	e03a      	b.n	8009136 <rt_bus_cmd_conf_read_handler+0xbe>
	}
	else
	{
		chCount = bus_get_max_ch();
 80090c0:	f7fe fd46 	bl	8007b50 <bus_get_max_ch>
 80090c4:	0003      	movs	r3, r0
 80090c6:	613b      	str	r3, [r7, #16]
		if (rt_bus_get_bit_count(rxData[0],chCount) == 0)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	693a      	ldr	r2, [r7, #16]
 80090ce:	b2d2      	uxtb	r2, r2
 80090d0:	0011      	movs	r1, r2
 80090d2:	0018      	movs	r0, r3
 80090d4:	f7ff ff3a 	bl	8008f4c <rt_bus_get_bit_count>
 80090d8:	1e03      	subs	r3, r0, #0
 80090da:	d101      	bne.n	80090e0 <rt_bus_cmd_conf_read_handler+0x68>
			return RT_PROTO_DataError;
 80090dc:	2302      	movs	r3, #2
 80090de:	e02f      	b.n	8009140 <rt_bus_cmd_conf_read_handler+0xc8>

		for (int i=0;i<8;i++)
 80090e0:	2300      	movs	r3, #0
 80090e2:	61bb      	str	r3, [r7, #24]
 80090e4:	e024      	b.n	8009130 <rt_bus_cmd_conf_read_handler+0xb8>
		{
			if ((rxData[0] & (1<<i)) == (1<<i))
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	0019      	movs	r1, r3
 80090ec:	2201      	movs	r2, #1
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	409a      	lsls	r2, r3
 80090f2:	0013      	movs	r3, r2
 80090f4:	400b      	ands	r3, r1
 80090f6:	001a      	movs	r2, r3
 80090f8:	2101      	movs	r1, #1
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	4099      	lsls	r1, r3
 80090fe:	000b      	movs	r3, r1
 8009100:	429a      	cmp	r2, r3
 8009102:	d112      	bne.n	800912a <rt_bus_cmd_conf_read_handler+0xb2>
			{
				ret = bus_read_ch_conf(i,&txData[length]);
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	b2d8      	uxtb	r0, r3
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	69fb      	ldr	r3, [r7, #28]
 800910c:	18d3      	adds	r3, r2, r3
 800910e:	0019      	movs	r1, r3
 8009110:	f7fe fd64 	bl	8007bdc <bus_read_ch_conf>
 8009114:	0003      	movs	r3, r0
 8009116:	617b      	str	r3, [r7, #20]
				if (ret < 0)
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	2b00      	cmp	r3, #0
 800911c:	da01      	bge.n	8009122 <rt_bus_cmd_conf_read_handler+0xaa>
					return RT_PROTO_DataError;
 800911e:	2302      	movs	r3, #2
 8009120:	e00e      	b.n	8009140 <rt_bus_cmd_conf_read_handler+0xc8>
				length += ret;
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	69fa      	ldr	r2, [r7, #28]
 8009126:	18d3      	adds	r3, r2, r3
 8009128:	61fb      	str	r3, [r7, #28]
		for (int i=0;i<8;i++)
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	3301      	adds	r3, #1
 800912e:	61bb      	str	r3, [r7, #24]
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	2b07      	cmp	r3, #7
 8009134:	ddd7      	ble.n	80090e6 <rt_bus_cmd_conf_read_handler+0x6e>
			}
		}
	}
	*txLen = length;
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	b29a      	uxth	r2, r3
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	801a      	strh	r2, [r3, #0]
	return RT_PROTO_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	0018      	movs	r0, r3
 8009142:	46bd      	mov	sp, r7
 8009144:	b008      	add	sp, #32
 8009146:	bd80      	pop	{r7, pc}

08009148 <rt_bus_cmd_conf_write_handler>:
extern int bus_write_all_conf(uint8_t *data,uint32_t length);
extern int bus_save_conf();


uint32_t rt_bus_cmd_conf_write_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8009148:	b590      	push	{r4, r7, lr}
 800914a:	b089      	sub	sp, #36	; 0x24
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	607a      	str	r2, [r7, #4]
 8009152:	603b      	str	r3, [r7, #0]
 8009154:	230a      	movs	r3, #10
 8009156:	18fb      	adds	r3, r7, r3
 8009158:	1c0a      	adds	r2, r1, #0
 800915a:	801a      	strh	r2, [r3, #0]
	uint32_t length=1;
 800915c:	2301      	movs	r3, #1
 800915e:	61fb      	str	r3, [r7, #28]
	int ret;
	int chCount = 0;
 8009160:	2300      	movs	r3, #0
 8009162:	617b      	str	r3, [r7, #20]

	chCount = bus_get_max_ch();
 8009164:	f7fe fcf4 	bl	8007b50 <bus_get_max_ch>
 8009168:	0003      	movs	r3, r0
 800916a:	617b      	str	r3, [r7, #20]

	if ((rxData[0] == 0)||(rxData[0] == 0xFF))
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d003      	beq.n	800917c <rt_bus_cmd_conf_write_handler+0x34>
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	2bff      	cmp	r3, #255	; 0xff
 800917a:	d11d      	bne.n	80091b8 <rt_bus_cmd_conf_write_handler+0x70>
	{
		if (bus_get_ch_conf_length() * chCount != rxLen-1)	// check received data length matches boards requested length
 800917c:	f7fe fcee 	bl	8007b5c <bus_get_ch_conf_length>
 8009180:	0002      	movs	r2, r0
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	435a      	muls	r2, r3
 8009186:	230a      	movs	r3, #10
 8009188:	18fb      	adds	r3, r7, r3
 800918a:	881b      	ldrh	r3, [r3, #0]
 800918c:	3b01      	subs	r3, #1
 800918e:	429a      	cmp	r2, r3
 8009190:	d001      	beq.n	8009196 <rt_bus_cmd_conf_write_handler+0x4e>
			return RT_PROTO_DataError;
 8009192:	2302      	movs	r3, #2
 8009194:	e05e      	b.n	8009254 <rt_bus_cmd_conf_write_handler+0x10c>

		ret = bus_write_all_conf(&rxData[1],rxLen-1);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	1c5a      	adds	r2, r3, #1
 800919a:	230a      	movs	r3, #10
 800919c:	18fb      	adds	r3, r7, r3
 800919e:	881b      	ldrh	r3, [r3, #0]
 80091a0:	3b01      	subs	r3, #1
 80091a2:	0019      	movs	r1, r3
 80091a4:	0010      	movs	r0, r2
 80091a6:	f7fe fe49 	bl	8007e3c <bus_write_all_conf>
 80091aa:	0003      	movs	r3, r0
 80091ac:	613b      	str	r3, [r7, #16]

		if (ret < 0)
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	da42      	bge.n	800923a <rt_bus_cmd_conf_write_handler+0xf2>
			return RT_PROTO_DataError;
 80091b4:	2302      	movs	r3, #2
 80091b6:	e04d      	b.n	8009254 <rt_bus_cmd_conf_write_handler+0x10c>
	}
	else
	{
		if ((bus_get_ch_conf_length() * rt_bus_get_bit_count(rxData[0],chCount)) + 1  != rxLen)  // check received data length matches boards requested length
 80091b8:	f7fe fcd0 	bl	8007b5c <bus_get_ch_conf_length>
 80091bc:	0004      	movs	r4, r0
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	697a      	ldr	r2, [r7, #20]
 80091c4:	b2d2      	uxtb	r2, r2
 80091c6:	0011      	movs	r1, r2
 80091c8:	0018      	movs	r0, r3
 80091ca:	f7ff febf 	bl	8008f4c <rt_bus_get_bit_count>
 80091ce:	0003      	movs	r3, r0
 80091d0:	4363      	muls	r3, r4
 80091d2:	1c5a      	adds	r2, r3, #1
 80091d4:	230a      	movs	r3, #10
 80091d6:	18fb      	adds	r3, r7, r3
 80091d8:	881b      	ldrh	r3, [r3, #0]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d001      	beq.n	80091e2 <rt_bus_cmd_conf_write_handler+0x9a>
			return RT_PROTO_DataError;
 80091de:	2302      	movs	r3, #2
 80091e0:	e038      	b.n	8009254 <rt_bus_cmd_conf_write_handler+0x10c>

		for (int i=0;i<chCount;i++)
 80091e2:	2300      	movs	r3, #0
 80091e4:	61bb      	str	r3, [r7, #24]
 80091e6:	e024      	b.n	8009232 <rt_bus_cmd_conf_write_handler+0xea>
		{
			if ((rxData[0] & (1<<i)) == (1<<i))
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	0019      	movs	r1, r3
 80091ee:	2201      	movs	r2, #1
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	409a      	lsls	r2, r3
 80091f4:	0013      	movs	r3, r2
 80091f6:	400b      	ands	r3, r1
 80091f8:	001a      	movs	r2, r3
 80091fa:	2101      	movs	r1, #1
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	4099      	lsls	r1, r3
 8009200:	000b      	movs	r3, r1
 8009202:	429a      	cmp	r2, r3
 8009204:	d112      	bne.n	800922c <rt_bus_cmd_conf_write_handler+0xe4>
			{
				ret = bus_write_ch_conf(i,&rxData[length]);
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	b2d8      	uxtb	r0, r3
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	18d3      	adds	r3, r2, r3
 8009210:	0019      	movs	r1, r3
 8009212:	f7fe fd3f 	bl	8007c94 <bus_write_ch_conf>
 8009216:	0003      	movs	r3, r0
 8009218:	613b      	str	r3, [r7, #16]
				if (ret < 0)
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	2b00      	cmp	r3, #0
 800921e:	da01      	bge.n	8009224 <rt_bus_cmd_conf_write_handler+0xdc>
					return RT_PROTO_DataError;
 8009220:	2302      	movs	r3, #2
 8009222:	e017      	b.n	8009254 <rt_bus_cmd_conf_write_handler+0x10c>
				length += ret;
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	69fa      	ldr	r2, [r7, #28]
 8009228:	18d3      	adds	r3, r2, r3
 800922a:	61fb      	str	r3, [r7, #28]
		for (int i=0;i<chCount;i++)
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	3301      	adds	r3, #1
 8009230:	61bb      	str	r3, [r7, #24]
 8009232:	69ba      	ldr	r2, [r7, #24]
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	429a      	cmp	r2, r3
 8009238:	dbd6      	blt.n	80091e8 <rt_bus_cmd_conf_write_handler+0xa0>
			}
		}
	}

	ret = bus_save_conf();
 800923a:	f7fe fe1e 	bl	8007e7a <bus_save_conf>
 800923e:	0003      	movs	r3, r0
 8009240:	613b      	str	r3, [r7, #16]
	if (ret < 0)
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	2b00      	cmp	r3, #0
 8009246:	da01      	bge.n	800924c <rt_bus_cmd_conf_write_handler+0x104>
		return RT_PROTO_DataError;
 8009248:	2302      	movs	r3, #2
 800924a:	e003      	b.n	8009254 <rt_bus_cmd_conf_write_handler+0x10c>

	*txLen = 0;
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	2200      	movs	r2, #0
 8009250:	801a      	strh	r2, [r3, #0]
	return RT_PROTO_OK;
 8009252:	2300      	movs	r3, #0

}
 8009254:	0018      	movs	r0, r3
 8009256:	46bd      	mov	sp, r7
 8009258:	b009      	add	sp, #36	; 0x24
 800925a:	bd90      	pop	{r4, r7, pc}

0800925c <rt_bus_cmd_smp_read_handler>:
#if (BUS_CAN_RD_SAMPLE == 1)
extern int bus_read_ch_sample(uint8_t ch, uint8_t* data);
extern int bus_read_all_sample(uint8_t *data);

uint32_t rt_bus_cmd_smp_read_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b088      	sub	sp, #32
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	607a      	str	r2, [r7, #4]
 8009266:	603b      	str	r3, [r7, #0]
 8009268:	230a      	movs	r3, #10
 800926a:	18fb      	adds	r3, r7, r3
 800926c:	1c0a      	adds	r2, r1, #0
 800926e:	801a      	strh	r2, [r3, #0]
	int length=0;
 8009270:	2300      	movs	r3, #0
 8009272:	61fb      	str	r3, [r7, #28]
	int ret=0;
 8009274:	2300      	movs	r3, #0
 8009276:	617b      	str	r3, [r7, #20]
	int chCount;

	if ((rxData[0] == 0)||(rxData[0] == 0xFF))
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d003      	beq.n	8009288 <rt_bus_cmd_smp_read_handler+0x2c>
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	2bff      	cmp	r3, #255	; 0xff
 8009286:	d10d      	bne.n	80092a4 <rt_bus_cmd_smp_read_handler+0x48>
	{
		ret = bus_read_all_sample(&txData[0]);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	0018      	movs	r0, r3
 800928c:	f7fe fc88 	bl	8007ba0 <bus_read_all_sample>
 8009290:	0003      	movs	r3, r0
 8009292:	617b      	str	r3, [r7, #20]
		if (ret < 0)
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	2b00      	cmp	r3, #0
 8009298:	da01      	bge.n	800929e <rt_bus_cmd_smp_read_handler+0x42>
			return RT_PROTO_DataError;
 800929a:	2302      	movs	r3, #2
 800929c:	e042      	b.n	8009324 <rt_bus_cmd_smp_read_handler+0xc8>
		length = ret;
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	61fb      	str	r3, [r7, #28]
 80092a2:	e03a      	b.n	800931a <rt_bus_cmd_smp_read_handler+0xbe>
	}
	else
	{
		chCount = bus_get_max_ch();
 80092a4:	f7fe fc54 	bl	8007b50 <bus_get_max_ch>
 80092a8:	0003      	movs	r3, r0
 80092aa:	613b      	str	r3, [r7, #16]
		if (rt_bus_get_bit_count(rxData[0],chCount) == 0)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	693a      	ldr	r2, [r7, #16]
 80092b2:	b2d2      	uxtb	r2, r2
 80092b4:	0011      	movs	r1, r2
 80092b6:	0018      	movs	r0, r3
 80092b8:	f7ff fe48 	bl	8008f4c <rt_bus_get_bit_count>
 80092bc:	1e03      	subs	r3, r0, #0
 80092be:	d101      	bne.n	80092c4 <rt_bus_cmd_smp_read_handler+0x68>
			return RT_PROTO_DataError;
 80092c0:	2302      	movs	r3, #2
 80092c2:	e02f      	b.n	8009324 <rt_bus_cmd_smp_read_handler+0xc8>


		for (int i=0;i<8;i++)
 80092c4:	2300      	movs	r3, #0
 80092c6:	61bb      	str	r3, [r7, #24]
 80092c8:	e024      	b.n	8009314 <rt_bus_cmd_smp_read_handler+0xb8>
		{
			if ((rxData[0] & (1<<i)) == (1<<i))
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	0019      	movs	r1, r3
 80092d0:	2201      	movs	r2, #1
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	409a      	lsls	r2, r3
 80092d6:	0013      	movs	r3, r2
 80092d8:	400b      	ands	r3, r1
 80092da:	001a      	movs	r2, r3
 80092dc:	2101      	movs	r1, #1
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	4099      	lsls	r1, r3
 80092e2:	000b      	movs	r3, r1
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d112      	bne.n	800930e <rt_bus_cmd_smp_read_handler+0xb2>
			{
				ret = bus_read_ch_sample(i,&txData[length]);
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	b2d8      	uxtb	r0, r3
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	18d3      	adds	r3, r2, r3
 80092f2:	0019      	movs	r1, r3
 80092f4:	f7fe fc38 	bl	8007b68 <bus_read_ch_sample>
 80092f8:	0003      	movs	r3, r0
 80092fa:	617b      	str	r3, [r7, #20]
				if (ret < 0)
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	da01      	bge.n	8009306 <rt_bus_cmd_smp_read_handler+0xaa>
					return RT_PROTO_DataError;
 8009302:	2302      	movs	r3, #2
 8009304:	e00e      	b.n	8009324 <rt_bus_cmd_smp_read_handler+0xc8>
				length += ret;
 8009306:	69fa      	ldr	r2, [r7, #28]
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	18d3      	adds	r3, r2, r3
 800930c:	61fb      	str	r3, [r7, #28]
		for (int i=0;i<8;i++)
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	3301      	adds	r3, #1
 8009312:	61bb      	str	r3, [r7, #24]
 8009314:	69bb      	ldr	r3, [r7, #24]
 8009316:	2b07      	cmp	r3, #7
 8009318:	ddd7      	ble.n	80092ca <rt_bus_cmd_smp_read_handler+0x6e>
			}
		}
	}
	*txLen = length;
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	b29a      	uxth	r2, r3
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	801a      	strh	r2, [r3, #0]
	return RT_PROTO_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	0018      	movs	r0, r3
 8009326:	46bd      	mov	sp, r7
 8009328:	b008      	add	sp, #32
 800932a:	bd80      	pop	{r7, pc}

0800932c <rt_bus_cmd_read_info_handler>:
extern const tAppInfo appinfo;
extern const uint8_t appsha[20];
extern uint32_t gFrameCount;

uint32_t rt_bus_cmd_read_info_handler(uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b086      	sub	sp, #24
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	607a      	str	r2, [r7, #4]
 8009336:	603b      	str	r3, [r7, #0]
 8009338:	230a      	movs	r3, #10
 800933a:	18fb      	adds	r3, r7, r3
 800933c:	1c0a      	adds	r2, r1, #0
 800933e:	801a      	strh	r2, [r3, #0]
	uint32_t length = 0;
 8009340:	2300      	movs	r3, #0
 8009342:	617b      	str	r3, [r7, #20]

	for (int i=11;i>=0;i--)
 8009344:	230b      	movs	r3, #11
 8009346:	613b      	str	r3, [r7, #16]
 8009348:	e00c      	b.n	8009364 <rt_bus_cmd_read_info_handler+0x38>
	{
		txData[length++] = *((uint8_t *)UID_BASE + i);
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	4a2c      	ldr	r2, [pc, #176]	; (8009400 <rt_bus_cmd_read_info_handler+0xd4>)
 800934e:	189a      	adds	r2, r3, r2
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	1c59      	adds	r1, r3, #1
 8009354:	6179      	str	r1, [r7, #20]
 8009356:	6879      	ldr	r1, [r7, #4]
 8009358:	18cb      	adds	r3, r1, r3
 800935a:	7812      	ldrb	r2, [r2, #0]
 800935c:	701a      	strb	r2, [r3, #0]
	for (int i=11;i>=0;i--)
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	3b01      	subs	r3, #1
 8009362:	613b      	str	r3, [r7, #16]
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	2b00      	cmp	r3, #0
 8009368:	daef      	bge.n	800934a <rt_bus_cmd_read_info_handler+0x1e>
	}


	sprintf((char *)&txData[length],"%s %s",__DATE__,__TIME__);
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	18d0      	adds	r0, r2, r3
 8009370:	4b24      	ldr	r3, [pc, #144]	; (8009404 <rt_bus_cmd_read_info_handler+0xd8>)
 8009372:	4a25      	ldr	r2, [pc, #148]	; (8009408 <rt_bus_cmd_read_info_handler+0xdc>)
 8009374:	4925      	ldr	r1, [pc, #148]	; (800940c <rt_bus_cmd_read_info_handler+0xe0>)
 8009376:	f005 fc05 	bl	800eb84 <siprintf>
	length += 32;
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	3320      	adds	r3, #32
 800937e:	617b      	str	r3, [r7, #20]

	memcpy(&txData[length],&appinfo,sizeof(appinfo));		//Copy App Version
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	18d3      	adds	r3, r2, r3
 8009386:	4922      	ldr	r1, [pc, #136]	; (8009410 <rt_bus_cmd_read_info_handler+0xe4>)
 8009388:	2208      	movs	r2, #8
 800938a:	0018      	movs	r0, r3
 800938c:	f004 fd6f 	bl	800de6e <memcpy>
	length += sizeof(appinfo);
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	3308      	adds	r3, #8
 8009394:	617b      	str	r3, [r7, #20]

	memcpy(&txData[length],appsha,sizeof(appsha));			// Copy SHA of application
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	18d2      	adds	r2, r2, r3
 800939c:	4b1d      	ldr	r3, [pc, #116]	; (8009414 <rt_bus_cmd_read_info_handler+0xe8>)
 800939e:	0010      	movs	r0, r2
 80093a0:	0019      	movs	r1, r3
 80093a2:	2314      	movs	r3, #20
 80093a4:	001a      	movs	r2, r3
 80093a6:	f004 fd62 	bl	800de6e <memcpy>
	length += sizeof(appsha);
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	3314      	adds	r3, #20
 80093ae:	617b      	str	r3, [r7, #20]

	memcpy(&txData[length],&gFrameCount,sizeof(uint32_t));	// Copy Total Received Frame Count
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	18d3      	adds	r3, r2, r3
 80093b6:	4918      	ldr	r1, [pc, #96]	; (8009418 <rt_bus_cmd_read_info_handler+0xec>)
 80093b8:	2204      	movs	r2, #4
 80093ba:	0018      	movs	r0, r3
 80093bc:	f004 fd57 	bl	800de6e <memcpy>
	length += sizeof(uint32_t);
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	3304      	adds	r3, #4
 80093c4:	617b      	str	r3, [r7, #20]

	txData[length] = BOARD_TYPE_TC;
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	18d3      	adds	r3, r2, r3
 80093cc:	2201      	movs	r2, #1
 80093ce:	701a      	strb	r2, [r3, #0]
	length += 4;
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	3304      	adds	r3, #4
 80093d4:	617b      	str	r3, [r7, #20]

	length += bus_rd_info_hook(&txData[length]);	// let application to add data to this frame
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	18d3      	adds	r3, r2, r3
 80093dc:	0018      	movs	r0, r3
 80093de:	f7fe fd70 	bl	8007ec2 <bus_rd_info_hook>
 80093e2:	0003      	movs	r3, r0
 80093e4:	001a      	movs	r2, r3
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	189b      	adds	r3, r3, r2
 80093ea:	617b      	str	r3, [r7, #20]

	*txLen = length;
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	b29a      	uxth	r2, r3
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	801a      	strh	r2, [r3, #0]
	return RT_PROTO_OK;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	0018      	movs	r0, r3
 80093f8:	46bd      	mov	sp, r7
 80093fa:	b006      	add	sp, #24
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	46c0      	nop			; (mov r8, r8)
 8009400:	1ff80050 	.word	0x1ff80050
 8009404:	08012460 	.word	0x08012460
 8009408:	0801246c 	.word	0x0801246c
 800940c:	08012478 	.word	0x08012478
 8009410:	080050c0 	.word	0x080050c0
 8009414:	080130cc 	.word	0x080130cc
 8009418:	20000340 	.word	0x20000340

0800941c <rt_bus_cmd_enter_bootloader>:

#if (BUS_CAN_ENTER_BOOTLOADER == 1)
uint32_t enter_bootloader = 0;
extern void bus_entering_bootlaoder_hook();
uint32_t rt_bus_cmd_enter_bootloader(uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	607a      	str	r2, [r7, #4]
 8009426:	603b      	str	r3, [r7, #0]
 8009428:	230a      	movs	r3, #10
 800942a:	18fb      	adds	r3, r7, r3
 800942c:	1c0a      	adds	r2, r1, #0
 800942e:	801a      	strh	r2, [r3, #0]
	enter_bootloader = 1; // Can not jump from interrupt context to bootloader application. Just flag the request
 8009430:	4b03      	ldr	r3, [pc, #12]	; (8009440 <rt_bus_cmd_enter_bootloader+0x24>)
 8009432:	2201      	movs	r2, #1
 8009434:	601a      	str	r2, [r3, #0]
	return RT_PROTO_SkipReply;
 8009436:	2305      	movs	r3, #5
}
 8009438:	0018      	movs	r0, r3
 800943a:	46bd      	mov	sp, r7
 800943c:	b004      	add	sp, #16
 800943e:	bd80      	pop	{r7, pc}
 8009440:	2000032c 	.word	0x2000032c

08009444 <rt_bus_cmd_process>:
#endif

void rt_bus_cmd_process()
{
 8009444:	b580      	push	{r7, lr}
 8009446:	af00      	add	r7, sp, #0
#if (BUS_CAN_ENTER_BOOTLOADER == 1)
	if (enter_bootloader)
 8009448:	4b05      	ldr	r3, [pc, #20]	; (8009460 <rt_bus_cmd_process+0x1c>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d004      	beq.n	800945a <rt_bus_cmd_process+0x16>
	{
		bus_entering_bootlaoder_hook();
 8009450:	f7fe fd1b 	bl	8007e8a <bus_entering_bootlaoder_hook>
		while(1)
		{
			bl_jump();
 8009454:	f7fe fb56 	bl	8007b04 <bl_jump>
 8009458:	e7fc      	b.n	8009454 <rt_bus_cmd_process+0x10>
		}
	}
#endif

}
 800945a:	46c0      	nop			; (mov r8, r8)
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	2000032c 	.word	0x2000032c

08009464 <rt_bus_init>:


	return ret;
}
void rt_bus_init()
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800946a:	b672      	cpsid	i
	__disable_irq();
	for (int i=0;i<BUS_RX_BUFFER_SIZE;i++)
 800946c:	2300      	movs	r3, #0
 800946e:	607b      	str	r3, [r7, #4]
 8009470:	e007      	b.n	8009482 <rt_bus_init+0x1e>
		rxBuffer[i] = 0;
 8009472:	4a21      	ldr	r2, [pc, #132]	; (80094f8 <rt_bus_init+0x94>)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	18d3      	adds	r3, r2, r3
 8009478:	2200      	movs	r2, #0
 800947a:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<BUS_RX_BUFFER_SIZE;i++)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	3301      	adds	r3, #1
 8009480:	607b      	str	r3, [r7, #4]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a1d      	ldr	r2, [pc, #116]	; (80094fc <rt_bus_init+0x98>)
 8009486:	4293      	cmp	r3, r2
 8009488:	ddf3      	ble.n	8009472 <rt_bus_init+0xe>
	for (int i=0;i<BUS_TX_BUFFER_SIZE;i++)
 800948a:	2300      	movs	r3, #0
 800948c:	603b      	str	r3, [r7, #0]
 800948e:	e007      	b.n	80094a0 <rt_bus_init+0x3c>
		txBuffer[i] = 0;
 8009490:	4a1b      	ldr	r2, [pc, #108]	; (8009500 <rt_bus_init+0x9c>)
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	18d3      	adds	r3, r2, r3
 8009496:	2200      	movs	r2, #0
 8009498:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<BUS_TX_BUFFER_SIZE;i++)
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	3301      	adds	r3, #1
 800949e:	603b      	str	r3, [r7, #0]
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	4a16      	ldr	r2, [pc, #88]	; (80094fc <rt_bus_init+0x98>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	ddf3      	ble.n	8009490 <rt_bus_init+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
 80094a8:	b662      	cpsie	i
	__enable_irq();
	//uBusId = rt_bus_get_bid();

	dbg_printf("Board Init BUS ID %4.4X\n",uBusId);
 80094aa:	4b16      	ldr	r3, [pc, #88]	; (8009504 <rt_bus_init+0xa0>)
 80094ac:	881b      	ldrh	r3, [r3, #0]
 80094ae:	001a      	movs	r2, r3
 80094b0:	4b15      	ldr	r3, [pc, #84]	; (8009508 <rt_bus_init+0xa4>)
 80094b2:	0011      	movs	r1, r2
 80094b4:	0018      	movs	r0, r3
 80094b6:	f005 fb47 	bl	800eb48 <iprintf>


	// Enable DMA Mode for receive in Circular Buffer Mode which allows for continuous data reception without requiring to be retriggered

	HAL_DMA_Start(BUS_UART->hdmarx, (uint32_t)&BUS_UART->Instance->RDR, (uint32_t)rxDMABuffer, BUS_RX_BUFFER_SIZE);
 80094ba:	4b14      	ldr	r3, [pc, #80]	; (800950c <rt_bus_init+0xa8>)
 80094bc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80094be:	4b13      	ldr	r3, [pc, #76]	; (800950c <rt_bus_init+0xa8>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3324      	adds	r3, #36	; 0x24
 80094c4:	0019      	movs	r1, r3
 80094c6:	4a12      	ldr	r2, [pc, #72]	; (8009510 <rt_bus_init+0xac>)
 80094c8:	239c      	movs	r3, #156	; 0x9c
 80094ca:	00db      	lsls	r3, r3, #3
 80094cc:	f000 ff62 	bl	800a394 <HAL_DMA_Start>

	// Enable the DMA transfer for the receiver request by setting the DMAR bit in the UART CR3 register
	SET_BIT(BUS_UART->Instance->CR3, USART_CR3_DMAR);
 80094d0:	4b0e      	ldr	r3, [pc, #56]	; (800950c <rt_bus_init+0xa8>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	689a      	ldr	r2, [r3, #8]
 80094d6:	4b0d      	ldr	r3, [pc, #52]	; (800950c <rt_bus_init+0xa8>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2140      	movs	r1, #64	; 0x40
 80094dc:	430a      	orrs	r2, r1
 80094de:	609a      	str	r2, [r3, #8]

	// Enable Idle Detection Interrupt
	SET_BIT(BUS_UART->Instance->CR1 ,USART_CR1_IDLEIE);
 80094e0:	4b0a      	ldr	r3, [pc, #40]	; (800950c <rt_bus_init+0xa8>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	4b09      	ldr	r3, [pc, #36]	; (800950c <rt_bus_init+0xa8>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2110      	movs	r1, #16
 80094ec:	430a      	orrs	r2, r1
 80094ee:	601a      	str	r2, [r3, #0]
		HAL_Delay(500);
		leds_0_on();
		HAL_Delay(100);

	}*/
}
 80094f0:	46c0      	nop			; (mov r8, r8)
 80094f2:	46bd      	mov	sp, r7
 80094f4:	b002      	add	sp, #8
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	20001680 	.word	0x20001680
 80094fc:	000004df 	.word	0x000004df
 8009500:	20001b60 	.word	0x20001b60
 8009504:	20000330 	.word	0x20000330
 8009508:	08012480 	.word	0x08012480
 800950c:	20001040 	.word	0x20001040
 8009510:	200011a0 	.word	0x200011a0

08009514 <rt_bus_proto_frame_pack>:
//										CMD = Valid CMD means data ok
//										CMD = 0xFF means error followed by error code


void rt_bus_proto_frame_pack(uint8_t cmd, uint16_t *datalength)
{
 8009514:	b5b0      	push	{r4, r5, r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	0002      	movs	r2, r0
 800951c:	6039      	str	r1, [r7, #0]
 800951e:	1dfb      	adds	r3, r7, #7
 8009520:	701a      	strb	r2, [r3, #0]
	uint16_t cCRC = 0;
 8009522:	210e      	movs	r1, #14
 8009524:	187b      	adds	r3, r7, r1
 8009526:	2200      	movs	r2, #0
 8009528:	801a      	strh	r2, [r3, #0]


	txBuffer[0] = PRT_STX;
 800952a:	4b29      	ldr	r3, [pc, #164]	; (80095d0 <rt_bus_proto_frame_pack+0xbc>)
 800952c:	2201      	movs	r2, #1
 800952e:	701a      	strb	r2, [r3, #0]

	txBuffer[1] = (uBusId & 0xFF00)>>8;
 8009530:	4b28      	ldr	r3, [pc, #160]	; (80095d4 <rt_bus_proto_frame_pack+0xc0>)
 8009532:	881b      	ldrh	r3, [r3, #0]
 8009534:	0a1b      	lsrs	r3, r3, #8
 8009536:	b29b      	uxth	r3, r3
 8009538:	b2da      	uxtb	r2, r3
 800953a:	4b25      	ldr	r3, [pc, #148]	; (80095d0 <rt_bus_proto_frame_pack+0xbc>)
 800953c:	705a      	strb	r2, [r3, #1]
	txBuffer[2] = (uBusId & 0x00FF);
 800953e:	4b25      	ldr	r3, [pc, #148]	; (80095d4 <rt_bus_proto_frame_pack+0xc0>)
 8009540:	881b      	ldrh	r3, [r3, #0]
 8009542:	b2da      	uxtb	r2, r3
 8009544:	4b22      	ldr	r3, [pc, #136]	; (80095d0 <rt_bus_proto_frame_pack+0xbc>)
 8009546:	709a      	strb	r2, [r3, #2]

	txBuffer[3] = (((*datalength)+1) & 0xFF00)>>8;
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	881b      	ldrh	r3, [r3, #0]
 800954c:	3301      	adds	r3, #1
 800954e:	121b      	asrs	r3, r3, #8
 8009550:	b2da      	uxtb	r2, r3
 8009552:	4b1f      	ldr	r3, [pc, #124]	; (80095d0 <rt_bus_proto_frame_pack+0xbc>)
 8009554:	70da      	strb	r2, [r3, #3]
	txBuffer[4] = (((*datalength)+1) & 0xFF);
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	881b      	ldrh	r3, [r3, #0]
 800955a:	b2db      	uxtb	r3, r3
 800955c:	3301      	adds	r3, #1
 800955e:	b2da      	uxtb	r2, r3
 8009560:	4b1b      	ldr	r3, [pc, #108]	; (80095d0 <rt_bus_proto_frame_pack+0xbc>)
 8009562:	711a      	strb	r2, [r3, #4]

	txBuffer[5] = cmd;
 8009564:	4b1a      	ldr	r3, [pc, #104]	; (80095d0 <rt_bus_proto_frame_pack+0xbc>)
 8009566:	1dfa      	adds	r2, r7, #7
 8009568:	7812      	ldrb	r2, [r2, #0]
 800956a:	715a      	strb	r2, [r3, #5]

	cCRC =  crc16(&txBuffer[PRT_AD_MSB_IDX], *datalength+5);
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	881b      	ldrh	r3, [r3, #0]
 8009570:	3305      	adds	r3, #5
 8009572:	b29a      	uxth	r2, r3
 8009574:	000d      	movs	r5, r1
 8009576:	187c      	adds	r4, r7, r1
 8009578:	4b17      	ldr	r3, [pc, #92]	; (80095d8 <rt_bus_proto_frame_pack+0xc4>)
 800957a:	0011      	movs	r1, r2
 800957c:	0018      	movs	r0, r3
 800957e:	f7fe fd3d 	bl	8007ffc <crc16>
 8009582:	0003      	movs	r3, r0
 8009584:	8023      	strh	r3, [r4, #0]

	txBuffer[*datalength + 6] = (cCRC & 0xFF00)>>8;
 8009586:	0029      	movs	r1, r5
 8009588:	0008      	movs	r0, r1
 800958a:	187b      	adds	r3, r7, r1
 800958c:	881b      	ldrh	r3, [r3, #0]
 800958e:	0a1b      	lsrs	r3, r3, #8
 8009590:	b29a      	uxth	r2, r3
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	881b      	ldrh	r3, [r3, #0]
 8009596:	3306      	adds	r3, #6
 8009598:	b2d1      	uxtb	r1, r2
 800959a:	4a0d      	ldr	r2, [pc, #52]	; (80095d0 <rt_bus_proto_frame_pack+0xbc>)
 800959c:	54d1      	strb	r1, [r2, r3]
	txBuffer[*datalength + 7] = (cCRC & 0x00FF);
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	881b      	ldrh	r3, [r3, #0]
 80095a2:	3307      	adds	r3, #7
 80095a4:	0001      	movs	r1, r0
 80095a6:	187a      	adds	r2, r7, r1
 80095a8:	8812      	ldrh	r2, [r2, #0]
 80095aa:	b2d1      	uxtb	r1, r2
 80095ac:	4a08      	ldr	r2, [pc, #32]	; (80095d0 <rt_bus_proto_frame_pack+0xbc>)
 80095ae:	54d1      	strb	r1, [r2, r3]
	txBuffer[*datalength + 8] = PRT_ETX;
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	881b      	ldrh	r3, [r3, #0]
 80095b4:	3308      	adds	r3, #8
 80095b6:	4a06      	ldr	r2, [pc, #24]	; (80095d0 <rt_bus_proto_frame_pack+0xbc>)
 80095b8:	2103      	movs	r1, #3
 80095ba:	54d1      	strb	r1, [r2, r3]

	*datalength += 9;
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	881b      	ldrh	r3, [r3, #0]
 80095c0:	3309      	adds	r3, #9
 80095c2:	b29a      	uxth	r2, r3
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	801a      	strh	r2, [r3, #0]

}
 80095c8:	46c0      	nop			; (mov r8, r8)
 80095ca:	46bd      	mov	sp, r7
 80095cc:	b004      	add	sp, #16
 80095ce:	bdb0      	pop	{r4, r5, r7, pc}
 80095d0:	20001b60 	.word	0x20001b60
 80095d4:	20000330 	.word	0x20000330
 80095d8:	20001b61 	.word	0x20001b61

080095dc <rt_bus_proto_transmit>:

void rt_bus_proto_transmit(uint16_t length)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	0002      	movs	r2, r0
 80095e4:	1dbb      	adds	r3, r7, #6
 80095e6:	801a      	strh	r2, [r3, #0]


	uint32_t count = 0;
 80095e8:	2300      	movs	r3, #0
 80095ea:	60fb      	str	r3, [r7, #12]
	while ((BUS_UART->gState != HAL_UART_STATE_READY) & (count < 65000))
 80095ec:	e002      	b.n	80095f4 <rt_bus_proto_transmit+0x18>
	{
		count ++;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	3301      	adds	r3, #1
 80095f2:	60fb      	str	r3, [r7, #12]
	while ((BUS_UART->gState != HAL_UART_STATE_READY) & (count < 65000))
 80095f4:	4b0d      	ldr	r3, [pc, #52]	; (800962c <rt_bus_proto_transmit+0x50>)
 80095f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095f8:	3b20      	subs	r3, #32
 80095fa:	1e5a      	subs	r2, r3, #1
 80095fc:	4193      	sbcs	r3, r2
 80095fe:	b2da      	uxtb	r2, r3
 8009600:	68f9      	ldr	r1, [r7, #12]
 8009602:	480b      	ldr	r0, [pc, #44]	; (8009630 <rt_bus_proto_transmit+0x54>)
 8009604:	2300      	movs	r3, #0
 8009606:	4288      	cmp	r0, r1
 8009608:	415b      	adcs	r3, r3
 800960a:	b2db      	uxtb	r3, r3
 800960c:	4013      	ands	r3, r2
 800960e:	b2db      	uxtb	r3, r3
 8009610:	2b00      	cmp	r3, #0
 8009612:	d1ec      	bne.n	80095ee <rt_bus_proto_transmit+0x12>
	}

	HAL_UART_Transmit_DMA(BUS_UART,txBuffer,length);
 8009614:	1dbb      	adds	r3, r7, #6
 8009616:	881a      	ldrh	r2, [r3, #0]
 8009618:	4906      	ldr	r1, [pc, #24]	; (8009634 <rt_bus_proto_transmit+0x58>)
 800961a:	4b04      	ldr	r3, [pc, #16]	; (800962c <rt_bus_proto_transmit+0x50>)
 800961c:	0018      	movs	r0, r3
 800961e:	f003 fa83 	bl	800cb28 <HAL_UART_Transmit_DMA>

}
 8009622:	46c0      	nop			; (mov r8, r8)
 8009624:	46bd      	mov	sp, r7
 8009626:	b004      	add	sp, #16
 8009628:	bd80      	pop	{r7, pc}
 800962a:	46c0      	nop			; (mov r8, r8)
 800962c:	20001040 	.word	0x20001040
 8009630:	0000fde7 	.word	0x0000fde7
 8009634:	20001b60 	.word	0x20001b60

08009638 <rt_bus_proto_clear>:

extern void rt_bus_cmd_process();

void rt_bus_proto_clear()
{
 8009638:	b580      	push	{r7, lr}
 800963a:	af00      	add	r7, sp, #0
	if (rxFrameSize)
 800963c:	4b0a      	ldr	r3, [pc, #40]	; (8009668 <rt_bus_proto_clear+0x30>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00c      	beq.n	800965e <rt_bus_proto_clear+0x26>
	{
		if (HAL_GetTick() > (lastRxTime + 10))
 8009644:	f000 fcf4 	bl	800a030 <HAL_GetTick>
 8009648:	0002      	movs	r2, r0
 800964a:	4b08      	ldr	r3, [pc, #32]	; (800966c <rt_bus_proto_clear+0x34>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	330a      	adds	r3, #10
 8009650:	429a      	cmp	r2, r3
 8009652:	d904      	bls.n	800965e <rt_bus_proto_clear+0x26>
  __ASM volatile ("cpsid i" : : : "memory");
 8009654:	b672      	cpsid	i
		{
			__disable_irq();
			rxFrameSize = 0;
 8009656:	4b04      	ldr	r3, [pc, #16]	; (8009668 <rt_bus_proto_clear+0x30>)
 8009658:	2200      	movs	r2, #0
 800965a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800965c:	b662      	cpsie	i
		}
	}
#endif
#endif

	rt_bus_cmd_process();
 800965e:	f7ff fef1 	bl	8009444 <rt_bus_cmd_process>
}
 8009662:	46c0      	nop			; (mov r8, r8)
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	20000338 	.word	0x20000338
 800966c:	2000033c 	.word	0x2000033c

08009670 <rt_bus_proto_process>:
void rt_bus_proto_process()
{
 8009670:	b590      	push	{r4, r7, lr}
 8009672:	b085      	sub	sp, #20
 8009674:	af00      	add	r7, sp, #0

	uint16_t pSize = 0;
 8009676:	230a      	movs	r3, #10
 8009678:	18fb      	adds	r3, r7, r3
 800967a:	2200      	movs	r2, #0
 800967c:	801a      	strh	r2, [r3, #0]
	uint16_t addr = 0;
 800967e:	2308      	movs	r3, #8
 8009680:	18fb      	adds	r3, r7, r3
 8009682:	2200      	movs	r2, #0
 8009684:	801a      	strh	r2, [r3, #0]
	uint16_t cCRC = 0;
 8009686:	1cbb      	adds	r3, r7, #2
 8009688:	2200      	movs	r2, #0
 800968a:	801a      	strh	r2, [r3, #0]
	uint16_t txSize = 0;
 800968c:	003b      	movs	r3, r7
 800968e:	2200      	movs	r2, #0
 8009690:	801a      	strh	r2, [r3, #0]
	uint32_t ret;
	if (isFrameReady)
 8009692:	4b62      	ldr	r3, [pc, #392]	; (800981c <rt_bus_proto_process+0x1ac>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d100      	bne.n	800969c <rt_bus_proto_process+0x2c>
 800969a:	e0b6      	b.n	800980a <rt_bus_proto_process+0x19a>
	{

		addr = ((uint16_t)rxBuffer[PRT_AD_MSB_IDX] << 8) | (rxBuffer[PRT_AD_LSB_IDX]);
 800969c:	4b60      	ldr	r3, [pc, #384]	; (8009820 <rt_bus_proto_process+0x1b0>)
 800969e:	785b      	ldrb	r3, [r3, #1]
 80096a0:	021b      	lsls	r3, r3, #8
 80096a2:	b21a      	sxth	r2, r3
 80096a4:	4b5e      	ldr	r3, [pc, #376]	; (8009820 <rt_bus_proto_process+0x1b0>)
 80096a6:	789b      	ldrb	r3, [r3, #2]
 80096a8:	b21b      	sxth	r3, r3
 80096aa:	4313      	orrs	r3, r2
 80096ac:	b21a      	sxth	r2, r3
 80096ae:	2108      	movs	r1, #8
 80096b0:	187b      	adds	r3, r7, r1
 80096b2:	801a      	strh	r2, [r3, #0]

		if (addr == uBusId)
 80096b4:	4b5b      	ldr	r3, [pc, #364]	; (8009824 <rt_bus_proto_process+0x1b4>)
 80096b6:	881b      	ldrh	r3, [r3, #0]
 80096b8:	187a      	adds	r2, r7, r1
 80096ba:	8812      	ldrh	r2, [r2, #0]
 80096bc:	429a      	cmp	r2, r3
 80096be:	d000      	beq.n	80096c2 <rt_bus_proto_process+0x52>
 80096c0:	e096      	b.n	80097f0 <rt_bus_proto_process+0x180>
		{
			if ((rxBuffer[PRT_STX_IDX] == PRT_STX) && (rxBuffer[rxFrameSize-PRT_ETX_LEFT_IDX] == PRT_ETX)) // check stx and etx on received frame
 80096c2:	4b57      	ldr	r3, [pc, #348]	; (8009820 <rt_bus_proto_process+0x1b0>)
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d000      	beq.n	80096cc <rt_bus_proto_process+0x5c>
 80096ca:	e097      	b.n	80097fc <rt_bus_proto_process+0x18c>
 80096cc:	4b56      	ldr	r3, [pc, #344]	; (8009828 <rt_bus_proto_process+0x1b8>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	3b01      	subs	r3, #1
 80096d2:	4a53      	ldr	r2, [pc, #332]	; (8009820 <rt_bus_proto_process+0x1b0>)
 80096d4:	5cd3      	ldrb	r3, [r2, r3]
 80096d6:	2b03      	cmp	r3, #3
 80096d8:	d000      	beq.n	80096dc <rt_bus_proto_process+0x6c>
 80096da:	e08f      	b.n	80097fc <rt_bus_proto_process+0x18c>
			{
				pSize = ((uint16_t)rxBuffer[PRT_LEN_MSB_IDX] << 8) | (rxBuffer[PRT_LEN_LSB_IDX]);
 80096dc:	4b50      	ldr	r3, [pc, #320]	; (8009820 <rt_bus_proto_process+0x1b0>)
 80096de:	78db      	ldrb	r3, [r3, #3]
 80096e0:	021b      	lsls	r3, r3, #8
 80096e2:	b21a      	sxth	r2, r3
 80096e4:	4b4e      	ldr	r3, [pc, #312]	; (8009820 <rt_bus_proto_process+0x1b0>)
 80096e6:	791b      	ldrb	r3, [r3, #4]
 80096e8:	b21b      	sxth	r3, r3
 80096ea:	4313      	orrs	r3, r2
 80096ec:	b21a      	sxth	r2, r3
 80096ee:	210a      	movs	r1, #10
 80096f0:	187b      	adds	r3, r7, r1
 80096f2:	801a      	strh	r2, [r3, #0]
				if (pSize == rxFrameSize - 8)
 80096f4:	187b      	adds	r3, r7, r1
 80096f6:	881a      	ldrh	r2, [r3, #0]
 80096f8:	4b4b      	ldr	r3, [pc, #300]	; (8009828 <rt_bus_proto_process+0x1b8>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	3b08      	subs	r3, #8
 80096fe:	429a      	cmp	r2, r3
 8009700:	d000      	beq.n	8009704 <rt_bus_proto_process+0x94>
 8009702:	e07b      	b.n	80097fc <rt_bus_proto_process+0x18c>
				{
					cCRC = crc16(&rxBuffer[PRT_AD_MSB_IDX], rxFrameSize-4);
 8009704:	4b48      	ldr	r3, [pc, #288]	; (8009828 <rt_bus_proto_process+0x1b8>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	b29b      	uxth	r3, r3
 800970a:	3b04      	subs	r3, #4
 800970c:	b29a      	uxth	r2, r3
 800970e:	4b47      	ldr	r3, [pc, #284]	; (800982c <rt_bus_proto_process+0x1bc>)
 8009710:	0011      	movs	r1, r2
 8009712:	0018      	movs	r0, r3
 8009714:	f7fe fc72 	bl	8007ffc <crc16>
 8009718:	0003      	movs	r3, r0
 800971a:	001a      	movs	r2, r3
 800971c:	1cbb      	adds	r3, r7, #2
 800971e:	801a      	strh	r2, [r3, #0]
					if (memcmp(&rxBuffer[rxFrameSize-3],&cCRC,2)==0)
 8009720:	4b41      	ldr	r3, [pc, #260]	; (8009828 <rt_bus_proto_process+0x1b8>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	1eda      	subs	r2, r3, #3
 8009726:	4b3e      	ldr	r3, [pc, #248]	; (8009820 <rt_bus_proto_process+0x1b0>)
 8009728:	18d3      	adds	r3, r2, r3
 800972a:	1cb9      	adds	r1, r7, #2
 800972c:	2202      	movs	r2, #2
 800972e:	0018      	movs	r0, r3
 8009730:	f004 fb8e 	bl	800de50 <memcmp>
 8009734:	1e03      	subs	r3, r0, #0
 8009736:	d161      	bne.n	80097fc <rt_bus_proto_process+0x18c>
					{
						for (int i=0;i<gCommandCount ;i++)
 8009738:	2300      	movs	r3, #0
 800973a:	60fb      	str	r3, [r7, #12]
 800973c:	e052      	b.n	80097e4 <rt_bus_proto_process+0x174>
						{
							if (commands[i].cmd == rxBuffer[PRT_CMD_IDX])
 800973e:	4b3c      	ldr	r3, [pc, #240]	; (8009830 <rt_bus_proto_process+0x1c0>)
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	00d2      	lsls	r2, r2, #3
 8009744:	5cd2      	ldrb	r2, [r2, r3]
 8009746:	4b36      	ldr	r3, [pc, #216]	; (8009820 <rt_bus_proto_process+0x1b0>)
 8009748:	795b      	ldrb	r3, [r3, #5]
 800974a:	429a      	cmp	r2, r3
 800974c:	d147      	bne.n	80097de <rt_bus_proto_process+0x16e>
							{
								leds_0_flash(PROTO_LED_FLASH_TIME);
 800974e:	2019      	movs	r0, #25
 8009750:	f7fe fdda 	bl	8008308 <leds_0_flash>
								txSize = 0;
 8009754:	003b      	movs	r3, r7
 8009756:	2200      	movs	r2, #0
 8009758:	801a      	strh	r2, [r3, #0]
								gFrameCount++;
 800975a:	4b36      	ldr	r3, [pc, #216]	; (8009834 <rt_bus_proto_process+0x1c4>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	1c5a      	adds	r2, r3, #1
 8009760:	4b34      	ldr	r3, [pc, #208]	; (8009834 <rt_bus_proto_process+0x1c4>)
 8009762:	601a      	str	r2, [r3, #0]

								ret = commands[i].handler(&rxBuffer[PRT_DATA_S_IDX],pSize-1,&txBuffer[PRT_DATA_S_IDX+1],&txSize);
 8009764:	4a32      	ldr	r2, [pc, #200]	; (8009830 <rt_bus_proto_process+0x1c0>)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	00db      	lsls	r3, r3, #3
 800976a:	18d3      	adds	r3, r2, r3
 800976c:	3304      	adds	r3, #4
 800976e:	681c      	ldr	r4, [r3, #0]
 8009770:	230a      	movs	r3, #10
 8009772:	18fb      	adds	r3, r7, r3
 8009774:	881b      	ldrh	r3, [r3, #0]
 8009776:	3b01      	subs	r3, #1
 8009778:	b299      	uxth	r1, r3
 800977a:	003b      	movs	r3, r7
 800977c:	4a2e      	ldr	r2, [pc, #184]	; (8009838 <rt_bus_proto_process+0x1c8>)
 800977e:	482f      	ldr	r0, [pc, #188]	; (800983c <rt_bus_proto_process+0x1cc>)
 8009780:	47a0      	blx	r4
 8009782:	0003      	movs	r3, r0
 8009784:	607b      	str	r3, [r7, #4]
								if (ret == RT_PROTO_OK)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d109      	bne.n	80097a0 <rt_bus_proto_process+0x130>
								{
									txBuffer[PRT_DATA_S_IDX] = PRT_ACK;
 800978c:	4b2c      	ldr	r3, [pc, #176]	; (8009840 <rt_bus_proto_process+0x1d0>)
 800978e:	2200      	movs	r2, #0
 8009790:	719a      	strb	r2, [r3, #6]
									txSize ++;
 8009792:	003b      	movs	r3, r7
 8009794:	881b      	ldrh	r3, [r3, #0]
 8009796:	3301      	adds	r3, #1
 8009798:	b29a      	uxth	r2, r3
 800979a:	003b      	movs	r3, r7
 800979c:	801a      	strh	r2, [r3, #0]
 800979e:	e00c      	b.n	80097ba <rt_bus_proto_process+0x14a>
								}
								else
								{
									if (ret != RT_PROTO_SkipReply)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2b05      	cmp	r3, #5
 80097a4:	d009      	beq.n	80097ba <rt_bus_proto_process+0x14a>
									{
										txBuffer[PRT_DATA_S_IDX] = PRT_NCK;
 80097a6:	4b26      	ldr	r3, [pc, #152]	; (8009840 <rt_bus_proto_process+0x1d0>)
 80097a8:	2201      	movs	r2, #1
 80097aa:	719a      	strb	r2, [r3, #6]
										txBuffer[PRT_DATA_S_IDX+1] = ret;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	b2da      	uxtb	r2, r3
 80097b0:	4b23      	ldr	r3, [pc, #140]	; (8009840 <rt_bus_proto_process+0x1d0>)
 80097b2:	71da      	strb	r2, [r3, #7]
										txSize = 2;
 80097b4:	003b      	movs	r3, r7
 80097b6:	2202      	movs	r2, #2
 80097b8:	801a      	strh	r2, [r3, #0]
									}
								}
								if (ret != RT_PROTO_SkipReply)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2b05      	cmp	r3, #5
 80097be:	d01c      	beq.n	80097fa <rt_bus_proto_process+0x18a>
								{
									rt_bus_proto_frame_pack(commands[i].cmd,&txSize);
 80097c0:	4b1b      	ldr	r3, [pc, #108]	; (8009830 <rt_bus_proto_process+0x1c0>)
 80097c2:	68fa      	ldr	r2, [r7, #12]
 80097c4:	00d2      	lsls	r2, r2, #3
 80097c6:	5cd3      	ldrb	r3, [r2, r3]
 80097c8:	003a      	movs	r2, r7
 80097ca:	0011      	movs	r1, r2
 80097cc:	0018      	movs	r0, r3
 80097ce:	f7ff fea1 	bl	8009514 <rt_bus_proto_frame_pack>
									rt_bus_proto_transmit(txSize);
 80097d2:	003b      	movs	r3, r7
 80097d4:	881b      	ldrh	r3, [r3, #0]
 80097d6:	0018      	movs	r0, r3
 80097d8:	f7ff ff00 	bl	80095dc <rt_bus_proto_transmit>
								}
								break;
 80097dc:	e00d      	b.n	80097fa <rt_bus_proto_process+0x18a>
						for (int i=0;i<gCommandCount ;i++)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	3301      	adds	r3, #1
 80097e2:	60fb      	str	r3, [r7, #12]
 80097e4:	4b17      	ldr	r3, [pc, #92]	; (8009844 <rt_bus_proto_process+0x1d4>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	429a      	cmp	r2, r3
 80097ec:	dba7      	blt.n	800973e <rt_bus_proto_process+0xce>
 80097ee:	e005      	b.n	80097fc <rt_bus_proto_process+0x18c>
				}
			}
		}
		else
		{
			leds_1_on();
 80097f0:	23a0      	movs	r3, #160	; 0xa0
 80097f2:	05db      	lsls	r3, r3, #23
 80097f4:	2202      	movs	r2, #2
 80097f6:	619a      	str	r2, [r3, #24]
 80097f8:	e000      	b.n	80097fc <rt_bus_proto_process+0x18c>
								break;
 80097fa:	46c0      	nop			; (mov r8, r8)
		}
		isFrameReady = 0;
 80097fc:	4b07      	ldr	r3, [pc, #28]	; (800981c <rt_bus_proto_process+0x1ac>)
 80097fe:	2200      	movs	r2, #0
 8009800:	601a      	str	r2, [r3, #0]
		rxFrameSize = 0;
 8009802:	4b09      	ldr	r3, [pc, #36]	; (8009828 <rt_bus_proto_process+0x1b8>)
 8009804:	2200      	movs	r2, #0
 8009806:	601a      	str	r2, [r3, #0]
	}
	else
	{
		leds_0_on();
	}
}
 8009808:	e003      	b.n	8009812 <rt_bus_proto_process+0x1a2>
		leds_0_on();
 800980a:	23a0      	movs	r3, #160	; 0xa0
 800980c:	05db      	lsls	r3, r3, #23
 800980e:	2201      	movs	r2, #1
 8009810:	619a      	str	r2, [r3, #24]
}
 8009812:	46c0      	nop			; (mov r8, r8)
 8009814:	46bd      	mov	sp, r7
 8009816:	b005      	add	sp, #20
 8009818:	bd90      	pop	{r4, r7, pc}
 800981a:	46c0      	nop			; (mov r8, r8)
 800981c:	20000334 	.word	0x20000334
 8009820:	20001680 	.word	0x20001680
 8009824:	20000330 	.word	0x20000330
 8009828:	20000338 	.word	0x20000338
 800982c:	20001681 	.word	0x20001681
 8009830:	08012af4 	.word	0x08012af4
 8009834:	20000340 	.word	0x20000340
 8009838:	20001b67 	.word	0x20001b67
 800983c:	20001686 	.word	0x20001686
 8009840:	20001b60 	.word	0x20001b60
 8009844:	08012b34 	.word	0x08012b34

08009848 <rt_bus_proto_idle_dt>:
	leds_counters();
	Board_SystickCallBack();
}

void rt_bus_proto_idle_dt(void)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
	static uint16_t prevDMACnt=BUS_RX_BUFFER_SIZE;
	uint16_t currentDMACnt = BUS_UART->hdmarx->Instance->CNDTR;
 800984e:	4b68      	ldr	r3, [pc, #416]	; (80099f0 <rt_bus_proto_idle_dt+0x1a8>)
 8009850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	685a      	ldr	r2, [r3, #4]
 8009856:	1dbb      	adds	r3, r7, #6
 8009858:	801a      	strh	r2, [r3, #0]
	uint16_t size=0;
 800985a:	1d3b      	adds	r3, r7, #4
 800985c:	2200      	movs	r2, #0
 800985e:	801a      	strh	r2, [r3, #0]
	uint16_t start = 0;
 8009860:	1cbb      	adds	r3, r7, #2
 8009862:	2200      	movs	r2, #0
 8009864:	801a      	strh	r2, [r3, #0]

	lastRxTime = HAL_GetTick();
 8009866:	f000 fbe3 	bl	800a030 <HAL_GetTick>
 800986a:	0002      	movs	r2, r0
 800986c:	4b61      	ldr	r3, [pc, #388]	; (80099f4 <rt_bus_proto_idle_dt+0x1ac>)
 800986e:	601a      	str	r2, [r3, #0]

	if (BUS_UART->hdmarx->State == HAL_DMA_STATE_BUSY)
 8009870:	4b5f      	ldr	r3, [pc, #380]	; (80099f0 <rt_bus_proto_idle_dt+0x1a8>)
 8009872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009874:	2225      	movs	r2, #37	; 0x25
 8009876:	5c9b      	ldrb	r3, [r3, r2]
 8009878:	b2db      	uxtb	r3, r3
 800987a:	2b02      	cmp	r3, #2
 800987c:	d000      	beq.n	8009880 <rt_bus_proto_idle_dt+0x38>
 800987e:	e0b4      	b.n	80099ea <rt_bus_proto_idle_dt+0x1a2>
	{
		if (prevDMACnt > currentDMACnt) // we haven't looped back yet
 8009880:	4b5d      	ldr	r3, [pc, #372]	; (80099f8 <rt_bus_proto_idle_dt+0x1b0>)
 8009882:	881b      	ldrh	r3, [r3, #0]
 8009884:	1dba      	adds	r2, r7, #6
 8009886:	8812      	ldrh	r2, [r2, #0]
 8009888:	429a      	cmp	r2, r3
 800988a:	d23f      	bcs.n	800990c <rt_bus_proto_idle_dt+0xc4>
		{
			size = prevDMACnt - currentDMACnt;
 800988c:	4b5a      	ldr	r3, [pc, #360]	; (80099f8 <rt_bus_proto_idle_dt+0x1b0>)
 800988e:	8819      	ldrh	r1, [r3, #0]
 8009890:	1d3b      	adds	r3, r7, #4
 8009892:	1dba      	adds	r2, r7, #6
 8009894:	8812      	ldrh	r2, [r2, #0]
 8009896:	1a8a      	subs	r2, r1, r2
 8009898:	801a      	strh	r2, [r3, #0]

			if (size > BUS_RX_BUFFER_SIZE)
 800989a:	1d3b      	adds	r3, r7, #4
 800989c:	881a      	ldrh	r2, [r3, #0]
 800989e:	239c      	movs	r3, #156	; 0x9c
 80098a0:	00db      	lsls	r3, r3, #3
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d900      	bls.n	80098a8 <rt_bus_proto_idle_dt+0x60>
 80098a6:	e09b      	b.n	80099e0 <rt_bus_proto_idle_dt+0x198>
				return;

			start = (BUS_RX_BUFFER_SIZE - prevDMACnt);
 80098a8:	4b53      	ldr	r3, [pc, #332]	; (80099f8 <rt_bus_proto_idle_dt+0x1b0>)
 80098aa:	881a      	ldrh	r2, [r3, #0]
 80098ac:	1cbb      	adds	r3, r7, #2
 80098ae:	219c      	movs	r1, #156	; 0x9c
 80098b0:	00c9      	lsls	r1, r1, #3
 80098b2:	1a8a      	subs	r2, r1, r2
 80098b4:	801a      	strh	r2, [r3, #0]

			if (rxFrameSize + size < BUS_RX_BUFFER_SIZE)
 80098b6:	1d3b      	adds	r3, r7, #4
 80098b8:	881a      	ldrh	r2, [r3, #0]
 80098ba:	4b50      	ldr	r3, [pc, #320]	; (80099fc <rt_bus_proto_idle_dt+0x1b4>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	18d3      	adds	r3, r2, r3
 80098c0:	4a4f      	ldr	r2, [pc, #316]	; (8009a00 <rt_bus_proto_idle_dt+0x1b8>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d81d      	bhi.n	8009902 <rt_bus_proto_idle_dt+0xba>
			{
				memcpy(&rxBuffer[rxFrameSize],&rxDMABuffer[start],size);
 80098c6:	4b4d      	ldr	r3, [pc, #308]	; (80099fc <rt_bus_proto_idle_dt+0x1b4>)
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	4b4e      	ldr	r3, [pc, #312]	; (8009a04 <rt_bus_proto_idle_dt+0x1bc>)
 80098cc:	18d0      	adds	r0, r2, r3
 80098ce:	1cbb      	adds	r3, r7, #2
 80098d0:	881a      	ldrh	r2, [r3, #0]
 80098d2:	4b4d      	ldr	r3, [pc, #308]	; (8009a08 <rt_bus_proto_idle_dt+0x1c0>)
 80098d4:	18d1      	adds	r1, r2, r3
 80098d6:	1d3b      	adds	r3, r7, #4
 80098d8:	881b      	ldrh	r3, [r3, #0]
 80098da:	001a      	movs	r2, r3
 80098dc:	f004 fac7 	bl	800de6e <memcpy>
				rxFrameSize += size;
 80098e0:	1d3b      	adds	r3, r7, #4
 80098e2:	881a      	ldrh	r2, [r3, #0]
 80098e4:	4b45      	ldr	r3, [pc, #276]	; (80099fc <rt_bus_proto_idle_dt+0x1b4>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	18d2      	adds	r2, r2, r3
 80098ea:	4b44      	ldr	r3, [pc, #272]	; (80099fc <rt_bus_proto_idle_dt+0x1b4>)
 80098ec:	601a      	str	r2, [r3, #0]

				if (rxBuffer[rxFrameSize-1] == 0x03)
 80098ee:	4b43      	ldr	r3, [pc, #268]	; (80099fc <rt_bus_proto_idle_dt+0x1b4>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	3b01      	subs	r3, #1
 80098f4:	4a43      	ldr	r2, [pc, #268]	; (8009a04 <rt_bus_proto_idle_dt+0x1bc>)
 80098f6:	5cd3      	ldrb	r3, [r2, r3]
 80098f8:	2b03      	cmp	r3, #3
 80098fa:	d102      	bne.n	8009902 <rt_bus_proto_idle_dt+0xba>
					isFrameReady = 0x01;
 80098fc:	4b43      	ldr	r3, [pc, #268]	; (8009a0c <rt_bus_proto_idle_dt+0x1c4>)
 80098fe:	2201      	movs	r2, #1
 8009900:	601a      	str	r2, [r3, #0]
			}

			prevDMACnt = currentDMACnt;
 8009902:	4b3d      	ldr	r3, [pc, #244]	; (80099f8 <rt_bus_proto_idle_dt+0x1b0>)
 8009904:	1dba      	adds	r2, r7, #6
 8009906:	8812      	ldrh	r2, [r2, #0]
 8009908:	801a      	strh	r2, [r3, #0]
 800990a:	e066      	b.n	80099da <rt_bus_proto_idle_dt+0x192>
		}
		else if (prevDMACnt < currentDMACnt)
 800990c:	4b3a      	ldr	r3, [pc, #232]	; (80099f8 <rt_bus_proto_idle_dt+0x1b0>)
 800990e:	881b      	ldrh	r3, [r3, #0]
 8009910:	1dba      	adds	r2, r7, #6
 8009912:	8812      	ldrh	r2, [r2, #0]
 8009914:	429a      	cmp	r2, r3
 8009916:	d965      	bls.n	80099e4 <rt_bus_proto_idle_dt+0x19c>
		{
			size = prevDMACnt;
 8009918:	1d3b      	adds	r3, r7, #4
 800991a:	4a37      	ldr	r2, [pc, #220]	; (80099f8 <rt_bus_proto_idle_dt+0x1b0>)
 800991c:	8812      	ldrh	r2, [r2, #0]
 800991e:	801a      	strh	r2, [r3, #0]
			if (size > BUS_RX_BUFFER_SIZE)
 8009920:	1d3b      	adds	r3, r7, #4
 8009922:	881a      	ldrh	r2, [r3, #0]
 8009924:	239c      	movs	r3, #156	; 0x9c
 8009926:	00db      	lsls	r3, r3, #3
 8009928:	429a      	cmp	r2, r3
 800992a:	d85d      	bhi.n	80099e8 <rt_bus_proto_idle_dt+0x1a0>
				return;
			start = (BUS_RX_BUFFER_SIZE - prevDMACnt);
 800992c:	4b32      	ldr	r3, [pc, #200]	; (80099f8 <rt_bus_proto_idle_dt+0x1b0>)
 800992e:	881a      	ldrh	r2, [r3, #0]
 8009930:	1cbb      	adds	r3, r7, #2
 8009932:	219c      	movs	r1, #156	; 0x9c
 8009934:	00c9      	lsls	r1, r1, #3
 8009936:	1a8a      	subs	r2, r1, r2
 8009938:	801a      	strh	r2, [r3, #0]

			if (rxFrameSize + size < BUS_RX_BUFFER_SIZE)
 800993a:	1d3b      	adds	r3, r7, #4
 800993c:	881a      	ldrh	r2, [r3, #0]
 800993e:	4b2f      	ldr	r3, [pc, #188]	; (80099fc <rt_bus_proto_idle_dt+0x1b4>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	18d3      	adds	r3, r2, r3
 8009944:	4a2e      	ldr	r2, [pc, #184]	; (8009a00 <rt_bus_proto_idle_dt+0x1b8>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d813      	bhi.n	8009972 <rt_bus_proto_idle_dt+0x12a>
			{
				memcpy(&rxBuffer[rxFrameSize],&rxDMABuffer[start],size);
 800994a:	4b2c      	ldr	r3, [pc, #176]	; (80099fc <rt_bus_proto_idle_dt+0x1b4>)
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	4b2d      	ldr	r3, [pc, #180]	; (8009a04 <rt_bus_proto_idle_dt+0x1bc>)
 8009950:	18d0      	adds	r0, r2, r3
 8009952:	1cbb      	adds	r3, r7, #2
 8009954:	881a      	ldrh	r2, [r3, #0]
 8009956:	4b2c      	ldr	r3, [pc, #176]	; (8009a08 <rt_bus_proto_idle_dt+0x1c0>)
 8009958:	18d1      	adds	r1, r2, r3
 800995a:	1d3b      	adds	r3, r7, #4
 800995c:	881b      	ldrh	r3, [r3, #0]
 800995e:	001a      	movs	r2, r3
 8009960:	f004 fa85 	bl	800de6e <memcpy>
				rxFrameSize +=size;
 8009964:	1d3b      	adds	r3, r7, #4
 8009966:	881a      	ldrh	r2, [r3, #0]
 8009968:	4b24      	ldr	r3, [pc, #144]	; (80099fc <rt_bus_proto_idle_dt+0x1b4>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	18d2      	adds	r2, r2, r3
 800996e:	4b23      	ldr	r3, [pc, #140]	; (80099fc <rt_bus_proto_idle_dt+0x1b4>)
 8009970:	601a      	str	r2, [r3, #0]
			}

			size = BUS_RX_BUFFER_SIZE - currentDMACnt;
 8009972:	1d3b      	adds	r3, r7, #4
 8009974:	1dba      	adds	r2, r7, #6
 8009976:	8812      	ldrh	r2, [r2, #0]
 8009978:	219c      	movs	r1, #156	; 0x9c
 800997a:	00c9      	lsls	r1, r1, #3
 800997c:	1a8a      	subs	r2, r1, r2
 800997e:	801a      	strh	r2, [r3, #0]
			start = 0;
 8009980:	1cbb      	adds	r3, r7, #2
 8009982:	2200      	movs	r2, #0
 8009984:	801a      	strh	r2, [r3, #0]
			if (rxFrameSize + size < BUS_RX_BUFFER_SIZE)
 8009986:	1d3b      	adds	r3, r7, #4
 8009988:	881a      	ldrh	r2, [r3, #0]
 800998a:	4b1c      	ldr	r3, [pc, #112]	; (80099fc <rt_bus_proto_idle_dt+0x1b4>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	18d3      	adds	r3, r2, r3
 8009990:	4a1b      	ldr	r2, [pc, #108]	; (8009a00 <rt_bus_proto_idle_dt+0x1b8>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d81d      	bhi.n	80099d2 <rt_bus_proto_idle_dt+0x18a>
			{
				memcpy(&rxBuffer[rxFrameSize],&rxDMABuffer[start],size);
 8009996:	4b19      	ldr	r3, [pc, #100]	; (80099fc <rt_bus_proto_idle_dt+0x1b4>)
 8009998:	681a      	ldr	r2, [r3, #0]
 800999a:	4b1a      	ldr	r3, [pc, #104]	; (8009a04 <rt_bus_proto_idle_dt+0x1bc>)
 800999c:	18d0      	adds	r0, r2, r3
 800999e:	1cbb      	adds	r3, r7, #2
 80099a0:	881a      	ldrh	r2, [r3, #0]
 80099a2:	4b19      	ldr	r3, [pc, #100]	; (8009a08 <rt_bus_proto_idle_dt+0x1c0>)
 80099a4:	18d1      	adds	r1, r2, r3
 80099a6:	1d3b      	adds	r3, r7, #4
 80099a8:	881b      	ldrh	r3, [r3, #0]
 80099aa:	001a      	movs	r2, r3
 80099ac:	f004 fa5f 	bl	800de6e <memcpy>
				rxFrameSize += size;
 80099b0:	1d3b      	adds	r3, r7, #4
 80099b2:	881a      	ldrh	r2, [r3, #0]
 80099b4:	4b11      	ldr	r3, [pc, #68]	; (80099fc <rt_bus_proto_idle_dt+0x1b4>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	18d2      	adds	r2, r2, r3
 80099ba:	4b10      	ldr	r3, [pc, #64]	; (80099fc <rt_bus_proto_idle_dt+0x1b4>)
 80099bc:	601a      	str	r2, [r3, #0]

				if (rxBuffer[rxFrameSize-1] == 0x03)
 80099be:	4b0f      	ldr	r3, [pc, #60]	; (80099fc <rt_bus_proto_idle_dt+0x1b4>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	3b01      	subs	r3, #1
 80099c4:	4a0f      	ldr	r2, [pc, #60]	; (8009a04 <rt_bus_proto_idle_dt+0x1bc>)
 80099c6:	5cd3      	ldrb	r3, [r2, r3]
 80099c8:	2b03      	cmp	r3, #3
 80099ca:	d102      	bne.n	80099d2 <rt_bus_proto_idle_dt+0x18a>
					isFrameReady = 0x01;
 80099cc:	4b0f      	ldr	r3, [pc, #60]	; (8009a0c <rt_bus_proto_idle_dt+0x1c4>)
 80099ce:	2201      	movs	r2, #1
 80099d0:	601a      	str	r2, [r3, #0]
			}
			prevDMACnt = currentDMACnt;
 80099d2:	4b09      	ldr	r3, [pc, #36]	; (80099f8 <rt_bus_proto_idle_dt+0x1b0>)
 80099d4:	1dba      	adds	r2, r7, #6
 80099d6:	8812      	ldrh	r2, [r2, #0]
 80099d8:	801a      	strh	r2, [r3, #0]
		else
		{
			return;
		}
#ifndef RT_BOOTLOADER
		rt_bus_proto_process();
 80099da:	f7ff fe49 	bl	8009670 <rt_bus_proto_process>
 80099de:	e004      	b.n	80099ea <rt_bus_proto_idle_dt+0x1a2>
				return;
 80099e0:	46c0      	nop			; (mov r8, r8)
 80099e2:	e002      	b.n	80099ea <rt_bus_proto_idle_dt+0x1a2>
			return;
 80099e4:	46c0      	nop			; (mov r8, r8)
 80099e6:	e000      	b.n	80099ea <rt_bus_proto_idle_dt+0x1a2>
				return;
 80099e8:	46c0      	nop			; (mov r8, r8)
#endif
	}

}
 80099ea:	46bd      	mov	sp, r7
 80099ec:	b002      	add	sp, #8
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	20001040 	.word	0x20001040
 80099f4:	2000033c 	.word	0x2000033c
 80099f8:	2000011e 	.word	0x2000011e
 80099fc:	20000338 	.word	0x20000338
 8009a00:	000004df 	.word	0x000004df
 8009a04:	20001680 	.word	0x20001680
 8009a08:	200011a0 	.word	0x200011a0
 8009a0c:	20000334 	.word	0x20000334

08009a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a14:	4b07      	ldr	r3, [pc, #28]	; (8009a34 <HAL_MspInit+0x24>)
 8009a16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a18:	4b06      	ldr	r3, [pc, #24]	; (8009a34 <HAL_MspInit+0x24>)
 8009a1a:	2101      	movs	r1, #1
 8009a1c:	430a      	orrs	r2, r1
 8009a1e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8009a20:	4b04      	ldr	r3, [pc, #16]	; (8009a34 <HAL_MspInit+0x24>)
 8009a22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a24:	4b03      	ldr	r3, [pc, #12]	; (8009a34 <HAL_MspInit+0x24>)
 8009a26:	2180      	movs	r1, #128	; 0x80
 8009a28:	0549      	lsls	r1, r1, #21
 8009a2a:	430a      	orrs	r2, r1
 8009a2c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009a2e:	46c0      	nop			; (mov r8, r8)
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	40021000 	.word	0x40021000

08009a38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b088      	sub	sp, #32
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a40:	230c      	movs	r3, #12
 8009a42:	18fb      	adds	r3, r7, r3
 8009a44:	0018      	movs	r0, r3
 8009a46:	2314      	movs	r3, #20
 8009a48:	001a      	movs	r2, r3
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	f004 fa18 	bl	800de80 <memset>
  if(hspi->Instance==SPI1)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a18      	ldr	r2, [pc, #96]	; (8009ab8 <HAL_SPI_MspInit+0x80>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d129      	bne.n	8009aae <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009a5a:	4b18      	ldr	r3, [pc, #96]	; (8009abc <HAL_SPI_MspInit+0x84>)
 8009a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a5e:	4b17      	ldr	r3, [pc, #92]	; (8009abc <HAL_SPI_MspInit+0x84>)
 8009a60:	2180      	movs	r1, #128	; 0x80
 8009a62:	0149      	lsls	r1, r1, #5
 8009a64:	430a      	orrs	r2, r1
 8009a66:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a68:	4b14      	ldr	r3, [pc, #80]	; (8009abc <HAL_SPI_MspInit+0x84>)
 8009a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a6c:	4b13      	ldr	r3, [pc, #76]	; (8009abc <HAL_SPI_MspInit+0x84>)
 8009a6e:	2101      	movs	r1, #1
 8009a70:	430a      	orrs	r2, r1
 8009a72:	62da      	str	r2, [r3, #44]	; 0x2c
 8009a74:	4b11      	ldr	r3, [pc, #68]	; (8009abc <HAL_SPI_MspInit+0x84>)
 8009a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a78:	2201      	movs	r2, #1
 8009a7a:	4013      	ands	r3, r2
 8009a7c:	60bb      	str	r3, [r7, #8]
 8009a7e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8009a80:	210c      	movs	r1, #12
 8009a82:	187b      	adds	r3, r7, r1
 8009a84:	22e0      	movs	r2, #224	; 0xe0
 8009a86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a88:	187b      	adds	r3, r7, r1
 8009a8a:	2202      	movs	r2, #2
 8009a8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a8e:	187b      	adds	r3, r7, r1
 8009a90:	2200      	movs	r2, #0
 8009a92:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a94:	187b      	adds	r3, r7, r1
 8009a96:	2203      	movs	r2, #3
 8009a98:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8009a9a:	187b      	adds	r3, r7, r1
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009aa0:	187a      	adds	r2, r7, r1
 8009aa2:	23a0      	movs	r3, #160	; 0xa0
 8009aa4:	05db      	lsls	r3, r3, #23
 8009aa6:	0011      	movs	r1, r2
 8009aa8:	0018      	movs	r0, r3
 8009aaa:	f001 f8bd 	bl	800ac28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8009aae:	46c0      	nop			; (mov r8, r8)
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	b008      	add	sp, #32
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	46c0      	nop			; (mov r8, r8)
 8009ab8:	40013000 	.word	0x40013000
 8009abc:	40021000 	.word	0x40021000

08009ac0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b08a      	sub	sp, #40	; 0x28
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ac8:	2314      	movs	r3, #20
 8009aca:	18fb      	adds	r3, r7, r3
 8009acc:	0018      	movs	r0, r3
 8009ace:	2314      	movs	r3, #20
 8009ad0:	001a      	movs	r2, r3
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	f004 f9d4 	bl	800de80 <memset>
  if(huart->Instance==USART1)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a77      	ldr	r2, [pc, #476]	; (8009cbc <HAL_UART_MspInit+0x1fc>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d000      	beq.n	8009ae4 <HAL_UART_MspInit+0x24>
 8009ae2:	e087      	b.n	8009bf4 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009ae4:	4b76      	ldr	r3, [pc, #472]	; (8009cc0 <HAL_UART_MspInit+0x200>)
 8009ae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ae8:	4b75      	ldr	r3, [pc, #468]	; (8009cc0 <HAL_UART_MspInit+0x200>)
 8009aea:	2180      	movs	r1, #128	; 0x80
 8009aec:	01c9      	lsls	r1, r1, #7
 8009aee:	430a      	orrs	r2, r1
 8009af0:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009af2:	4b73      	ldr	r3, [pc, #460]	; (8009cc0 <HAL_UART_MspInit+0x200>)
 8009af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af6:	4b72      	ldr	r3, [pc, #456]	; (8009cc0 <HAL_UART_MspInit+0x200>)
 8009af8:	2101      	movs	r1, #1
 8009afa:	430a      	orrs	r2, r1
 8009afc:	62da      	str	r2, [r3, #44]	; 0x2c
 8009afe:	4b70      	ldr	r3, [pc, #448]	; (8009cc0 <HAL_UART_MspInit+0x200>)
 8009b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b02:	2201      	movs	r2, #1
 8009b04:	4013      	ands	r3, r2
 8009b06:	613b      	str	r3, [r7, #16]
 8009b08:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009b0a:	2114      	movs	r1, #20
 8009b0c:	187b      	adds	r3, r7, r1
 8009b0e:	22c0      	movs	r2, #192	; 0xc0
 8009b10:	00d2      	lsls	r2, r2, #3
 8009b12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b14:	187b      	adds	r3, r7, r1
 8009b16:	2202      	movs	r2, #2
 8009b18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b1a:	187b      	adds	r3, r7, r1
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b20:	187b      	adds	r3, r7, r1
 8009b22:	2203      	movs	r2, #3
 8009b24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8009b26:	187b      	adds	r3, r7, r1
 8009b28:	2204      	movs	r2, #4
 8009b2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b2c:	187a      	adds	r2, r7, r1
 8009b2e:	23a0      	movs	r3, #160	; 0xa0
 8009b30:	05db      	lsls	r3, r3, #23
 8009b32:	0011      	movs	r1, r2
 8009b34:	0018      	movs	r0, r3
 8009b36:	f001 f877 	bl	800ac28 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8009b3a:	4b62      	ldr	r3, [pc, #392]	; (8009cc4 <HAL_UART_MspInit+0x204>)
 8009b3c:	4a62      	ldr	r2, [pc, #392]	; (8009cc8 <HAL_UART_MspInit+0x208>)
 8009b3e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 8009b40:	4b60      	ldr	r3, [pc, #384]	; (8009cc4 <HAL_UART_MspInit+0x204>)
 8009b42:	2203      	movs	r2, #3
 8009b44:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009b46:	4b5f      	ldr	r3, [pc, #380]	; (8009cc4 <HAL_UART_MspInit+0x204>)
 8009b48:	2200      	movs	r2, #0
 8009b4a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009b4c:	4b5d      	ldr	r3, [pc, #372]	; (8009cc4 <HAL_UART_MspInit+0x204>)
 8009b4e:	2200      	movs	r2, #0
 8009b50:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009b52:	4b5c      	ldr	r3, [pc, #368]	; (8009cc4 <HAL_UART_MspInit+0x204>)
 8009b54:	2280      	movs	r2, #128	; 0x80
 8009b56:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009b58:	4b5a      	ldr	r3, [pc, #360]	; (8009cc4 <HAL_UART_MspInit+0x204>)
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009b5e:	4b59      	ldr	r3, [pc, #356]	; (8009cc4 <HAL_UART_MspInit+0x204>)
 8009b60:	2200      	movs	r2, #0
 8009b62:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8009b64:	4b57      	ldr	r3, [pc, #348]	; (8009cc4 <HAL_UART_MspInit+0x204>)
 8009b66:	2200      	movs	r2, #0
 8009b68:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009b6a:	4b56      	ldr	r3, [pc, #344]	; (8009cc4 <HAL_UART_MspInit+0x204>)
 8009b6c:	22c0      	movs	r2, #192	; 0xc0
 8009b6e:	0192      	lsls	r2, r2, #6
 8009b70:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8009b72:	4b54      	ldr	r3, [pc, #336]	; (8009cc4 <HAL_UART_MspInit+0x204>)
 8009b74:	0018      	movs	r0, r3
 8009b76:	f000 fb95 	bl	800a2a4 <HAL_DMA_Init>
 8009b7a:	1e03      	subs	r3, r0, #0
 8009b7c:	d001      	beq.n	8009b82 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8009b7e:	f7ff f9d1 	bl	8008f24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4a4f      	ldr	r2, [pc, #316]	; (8009cc4 <HAL_UART_MspInit+0x204>)
 8009b86:	671a      	str	r2, [r3, #112]	; 0x70
 8009b88:	4b4e      	ldr	r3, [pc, #312]	; (8009cc4 <HAL_UART_MspInit+0x204>)
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8009b8e:	4b4f      	ldr	r3, [pc, #316]	; (8009ccc <HAL_UART_MspInit+0x20c>)
 8009b90:	4a4f      	ldr	r2, [pc, #316]	; (8009cd0 <HAL_UART_MspInit+0x210>)
 8009b92:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 8009b94:	4b4d      	ldr	r3, [pc, #308]	; (8009ccc <HAL_UART_MspInit+0x20c>)
 8009b96:	2203      	movs	r2, #3
 8009b98:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009b9a:	4b4c      	ldr	r3, [pc, #304]	; (8009ccc <HAL_UART_MspInit+0x20c>)
 8009b9c:	2210      	movs	r2, #16
 8009b9e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009ba0:	4b4a      	ldr	r3, [pc, #296]	; (8009ccc <HAL_UART_MspInit+0x20c>)
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009ba6:	4b49      	ldr	r3, [pc, #292]	; (8009ccc <HAL_UART_MspInit+0x20c>)
 8009ba8:	2280      	movs	r2, #128	; 0x80
 8009baa:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009bac:	4b47      	ldr	r3, [pc, #284]	; (8009ccc <HAL_UART_MspInit+0x20c>)
 8009bae:	2200      	movs	r2, #0
 8009bb0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009bb2:	4b46      	ldr	r3, [pc, #280]	; (8009ccc <HAL_UART_MspInit+0x20c>)
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8009bb8:	4b44      	ldr	r3, [pc, #272]	; (8009ccc <HAL_UART_MspInit+0x20c>)
 8009bba:	2200      	movs	r2, #0
 8009bbc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8009bbe:	4b43      	ldr	r3, [pc, #268]	; (8009ccc <HAL_UART_MspInit+0x20c>)
 8009bc0:	2280      	movs	r2, #128	; 0x80
 8009bc2:	0152      	lsls	r2, r2, #5
 8009bc4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8009bc6:	4b41      	ldr	r3, [pc, #260]	; (8009ccc <HAL_UART_MspInit+0x20c>)
 8009bc8:	0018      	movs	r0, r3
 8009bca:	f000 fb6b 	bl	800a2a4 <HAL_DMA_Init>
 8009bce:	1e03      	subs	r3, r0, #0
 8009bd0:	d001      	beq.n	8009bd6 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8009bd2:	f7ff f9a7 	bl	8008f24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	4a3c      	ldr	r2, [pc, #240]	; (8009ccc <HAL_UART_MspInit+0x20c>)
 8009bda:	66da      	str	r2, [r3, #108]	; 0x6c
 8009bdc:	4b3b      	ldr	r3, [pc, #236]	; (8009ccc <HAL_UART_MspInit+0x20c>)
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009be2:	2200      	movs	r2, #0
 8009be4:	2100      	movs	r1, #0
 8009be6:	201b      	movs	r0, #27
 8009be8:	f000 fb1a 	bl	800a220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009bec:	201b      	movs	r0, #27
 8009bee:	f000 fb2c 	bl	800a24a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8009bf2:	e05f      	b.n	8009cb4 <HAL_UART_MspInit+0x1f4>
  else if(huart->Instance==USART2)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a36      	ldr	r2, [pc, #216]	; (8009cd4 <HAL_UART_MspInit+0x214>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d15a      	bne.n	8009cb4 <HAL_UART_MspInit+0x1f4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009bfe:	4b30      	ldr	r3, [pc, #192]	; (8009cc0 <HAL_UART_MspInit+0x200>)
 8009c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c02:	4b2f      	ldr	r3, [pc, #188]	; (8009cc0 <HAL_UART_MspInit+0x200>)
 8009c04:	2180      	movs	r1, #128	; 0x80
 8009c06:	0289      	lsls	r1, r1, #10
 8009c08:	430a      	orrs	r2, r1
 8009c0a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c0c:	4b2c      	ldr	r3, [pc, #176]	; (8009cc0 <HAL_UART_MspInit+0x200>)
 8009c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c10:	4b2b      	ldr	r3, [pc, #172]	; (8009cc0 <HAL_UART_MspInit+0x200>)
 8009c12:	2101      	movs	r1, #1
 8009c14:	430a      	orrs	r2, r1
 8009c16:	62da      	str	r2, [r3, #44]	; 0x2c
 8009c18:	4b29      	ldr	r3, [pc, #164]	; (8009cc0 <HAL_UART_MspInit+0x200>)
 8009c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	4013      	ands	r3, r2
 8009c20:	60fb      	str	r3, [r7, #12]
 8009c22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009c24:	2114      	movs	r1, #20
 8009c26:	187b      	adds	r3, r7, r1
 8009c28:	220c      	movs	r2, #12
 8009c2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c2c:	187b      	adds	r3, r7, r1
 8009c2e:	2202      	movs	r2, #2
 8009c30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c32:	187b      	adds	r3, r7, r1
 8009c34:	2200      	movs	r2, #0
 8009c36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c38:	187b      	adds	r3, r7, r1
 8009c3a:	2203      	movs	r2, #3
 8009c3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8009c3e:	187b      	adds	r3, r7, r1
 8009c40:	2204      	movs	r2, #4
 8009c42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c44:	187a      	adds	r2, r7, r1
 8009c46:	23a0      	movs	r3, #160	; 0xa0
 8009c48:	05db      	lsls	r3, r3, #23
 8009c4a:	0011      	movs	r1, r2
 8009c4c:	0018      	movs	r0, r3
 8009c4e:	f000 ffeb 	bl	800ac28 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8009c52:	4b21      	ldr	r3, [pc, #132]	; (8009cd8 <HAL_UART_MspInit+0x218>)
 8009c54:	4a21      	ldr	r2, [pc, #132]	; (8009cdc <HAL_UART_MspInit+0x21c>)
 8009c56:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_4;
 8009c58:	4b1f      	ldr	r3, [pc, #124]	; (8009cd8 <HAL_UART_MspInit+0x218>)
 8009c5a:	2204      	movs	r2, #4
 8009c5c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009c5e:	4b1e      	ldr	r3, [pc, #120]	; (8009cd8 <HAL_UART_MspInit+0x218>)
 8009c60:	2210      	movs	r2, #16
 8009c62:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009c64:	4b1c      	ldr	r3, [pc, #112]	; (8009cd8 <HAL_UART_MspInit+0x218>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009c6a:	4b1b      	ldr	r3, [pc, #108]	; (8009cd8 <HAL_UART_MspInit+0x218>)
 8009c6c:	2280      	movs	r2, #128	; 0x80
 8009c6e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009c70:	4b19      	ldr	r3, [pc, #100]	; (8009cd8 <HAL_UART_MspInit+0x218>)
 8009c72:	2200      	movs	r2, #0
 8009c74:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009c76:	4b18      	ldr	r3, [pc, #96]	; (8009cd8 <HAL_UART_MspInit+0x218>)
 8009c78:	2200      	movs	r2, #0
 8009c7a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8009c7c:	4b16      	ldr	r3, [pc, #88]	; (8009cd8 <HAL_UART_MspInit+0x218>)
 8009c7e:	2200      	movs	r2, #0
 8009c80:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009c82:	4b15      	ldr	r3, [pc, #84]	; (8009cd8 <HAL_UART_MspInit+0x218>)
 8009c84:	2200      	movs	r2, #0
 8009c86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8009c88:	4b13      	ldr	r3, [pc, #76]	; (8009cd8 <HAL_UART_MspInit+0x218>)
 8009c8a:	0018      	movs	r0, r3
 8009c8c:	f000 fb0a 	bl	800a2a4 <HAL_DMA_Init>
 8009c90:	1e03      	subs	r3, r0, #0
 8009c92:	d001      	beq.n	8009c98 <HAL_UART_MspInit+0x1d8>
      Error_Handler();
 8009c94:	f7ff f946 	bl	8008f24 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a0f      	ldr	r2, [pc, #60]	; (8009cd8 <HAL_UART_MspInit+0x218>)
 8009c9c:	66da      	str	r2, [r3, #108]	; 0x6c
 8009c9e:	4b0e      	ldr	r3, [pc, #56]	; (8009cd8 <HAL_UART_MspInit+0x218>)
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	201c      	movs	r0, #28
 8009caa:	f000 fab9 	bl	800a220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009cae:	201c      	movs	r0, #28
 8009cb0:	f000 facb 	bl	800a24a <HAL_NVIC_EnableIRQ>
}
 8009cb4:	46c0      	nop			; (mov r8, r8)
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	b00a      	add	sp, #40	; 0x28
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	40013800 	.word	0x40013800
 8009cc0:	40021000 	.word	0x40021000
 8009cc4:	20000fb0 	.word	0x20000fb0
 8009cc8:	40020030 	.word	0x40020030
 8009ccc:	20000f68 	.word	0x20000f68
 8009cd0:	4002001c 	.word	0x4002001c
 8009cd4:	40004400 	.word	0x40004400
 8009cd8:	20000ff8 	.word	0x20000ff8
 8009cdc:	40020044 	.word	0x40020044

08009ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009ce4:	e7fe      	b.n	8009ce4 <NMI_Handler+0x4>

08009ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009cea:	e7fe      	b.n	8009cea <HardFault_Handler+0x4>

08009cec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8009cf0:	46c0      	nop			; (mov r8, r8)
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009cfa:	46c0      	nop			; (mov r8, r8)
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009d04:	f000 f982 	bl	800a00c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009d08:	46c0      	nop			; (mov r8, r8)
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8009d12:	2380      	movs	r3, #128	; 0x80
 8009d14:	011b      	lsls	r3, r3, #4
 8009d16:	0018      	movs	r0, r3
 8009d18:	f001 f922 	bl	800af60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8009d1c:	46c0      	nop			; (mov r8, r8)
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
	...

08009d24 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8009d28:	4b05      	ldr	r3, [pc, #20]	; (8009d40 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8009d2a:	0018      	movs	r0, r3
 8009d2c:	f000 fc69 	bl	800a602 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8009d30:	4b04      	ldr	r3, [pc, #16]	; (8009d44 <DMA1_Channel2_3_IRQHandler+0x20>)
 8009d32:	0018      	movs	r0, r3
 8009d34:	f000 fc65 	bl	800a602 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8009d38:	46c0      	nop			; (mov r8, r8)
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	46c0      	nop			; (mov r8, r8)
 8009d40:	20000f68 	.word	0x20000f68
 8009d44:	20000fb0 	.word	0x20000fb0

08009d48 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8009d4c:	4b03      	ldr	r3, [pc, #12]	; (8009d5c <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8009d4e:	0018      	movs	r0, r3
 8009d50:	f000 fc57 	bl	800a602 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8009d54:	46c0      	nop			; (mov r8, r8)
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	46c0      	nop			; (mov r8, r8)
 8009d5c:	20000ff8 	.word	0x20000ff8

08009d60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
	int32_t isrflags   = READ_REG(huart1.Instance->ISR);
 8009d66:	4b0b      	ldr	r3, [pc, #44]	; (8009d94 <USART1_IRQHandler+0x34>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	69db      	ldr	r3, [r3, #28]
 8009d6c:	607b      	str	r3, [r7, #4]
	if (isrflags & USART_ISR_IDLE)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2210      	movs	r2, #16
 8009d72:	4013      	ands	r3, r2
 8009d74:	d005      	beq.n	8009d82 <USART1_IRQHandler+0x22>
	{
		rt_bus_proto_idle_dt();
 8009d76:	f7ff fd67 	bl	8009848 <rt_bus_proto_idle_dt>
		__HAL_UART_CLEAR_IT(&huart1,USART_ISR_IDLE);
 8009d7a:	4b06      	ldr	r3, [pc, #24]	; (8009d94 <USART1_IRQHandler+0x34>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2210      	movs	r2, #16
 8009d80:	621a      	str	r2, [r3, #32]
	}
	HAL_UART_IRQHandler(&huart1);
 8009d82:	4b04      	ldr	r3, [pc, #16]	; (8009d94 <USART1_IRQHandler+0x34>)
 8009d84:	0018      	movs	r0, r3
 8009d86:	f002 ff6f 	bl	800cc68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009d8a:	46c0      	nop			; (mov r8, r8)
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	b002      	add	sp, #8
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	46c0      	nop			; (mov r8, r8)
 8009d94:	20001040 	.word	0x20001040

08009d98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
	int32_t isrflags   = READ_REG(huart2.Instance->ISR);
 8009d9e:	4b0a      	ldr	r3, [pc, #40]	; (8009dc8 <USART2_IRQHandler+0x30>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	69db      	ldr	r3, [r3, #28]
 8009da4:	607b      	str	r3, [r7, #4]
	if (isrflags & USART_ISR_IDLE)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2210      	movs	r2, #16
 8009daa:	4013      	ands	r3, r2
 8009dac:	d003      	beq.n	8009db6 <USART2_IRQHandler+0x1e>
	{
		__HAL_UART_CLEAR_IT(&huart2,USART_ISR_IDLE);
 8009dae:	4b06      	ldr	r3, [pc, #24]	; (8009dc8 <USART2_IRQHandler+0x30>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2210      	movs	r2, #16
 8009db4:	621a      	str	r2, [r3, #32]
	}
	HAL_UART_IRQHandler(&huart2);
 8009db6:	4b04      	ldr	r3, [pc, #16]	; (8009dc8 <USART2_IRQHandler+0x30>)
 8009db8:	0018      	movs	r0, r3
 8009dba:	f002 ff55 	bl	800cc68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009dbe:	46c0      	nop			; (mov r8, r8)
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	b002      	add	sp, #8
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	46c0      	nop			; (mov r8, r8)
 8009dc8:	2000111c 	.word	0x2000111c

08009dcc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b086      	sub	sp, #24
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009dd8:	2300      	movs	r3, #0
 8009dda:	617b      	str	r3, [r7, #20]
 8009ddc:	e00a      	b.n	8009df4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8009dde:	e000      	b.n	8009de2 <_read+0x16>
 8009de0:	bf00      	nop
 8009de2:	0001      	movs	r1, r0
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	1c5a      	adds	r2, r3, #1
 8009de8:	60ba      	str	r2, [r7, #8]
 8009dea:	b2ca      	uxtb	r2, r1
 8009dec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	3301      	adds	r3, #1
 8009df2:	617b      	str	r3, [r7, #20]
 8009df4:	697a      	ldr	r2, [r7, #20]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	dbf0      	blt.n	8009dde <_read+0x12>
	}

return len;
 8009dfc:	687b      	ldr	r3, [r7, #4]
}
 8009dfe:	0018      	movs	r0, r3
 8009e00:	46bd      	mov	sp, r7
 8009e02:	b006      	add	sp, #24
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b086      	sub	sp, #24
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	60f8      	str	r0, [r7, #12]
 8009e0e:	60b9      	str	r1, [r7, #8]
 8009e10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009e12:	2300      	movs	r3, #0
 8009e14:	617b      	str	r3, [r7, #20]
 8009e16:	e009      	b.n	8009e2c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	1c5a      	adds	r2, r3, #1
 8009e1c:	60ba      	str	r2, [r7, #8]
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	0018      	movs	r0, r3
 8009e22:	f7fe f94d 	bl	80080c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	617b      	str	r3, [r7, #20]
 8009e2c:	697a      	ldr	r2, [r7, #20]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	dbf1      	blt.n	8009e18 <_write+0x12>
	}
	return len;
 8009e34:	687b      	ldr	r3, [r7, #4]
}
 8009e36:	0018      	movs	r0, r3
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	b006      	add	sp, #24
 8009e3c:	bd80      	pop	{r7, pc}

08009e3e <_close>:

int _close(int file)
{
 8009e3e:	b580      	push	{r7, lr}
 8009e40:	b082      	sub	sp, #8
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
	return -1;
 8009e46:	2301      	movs	r3, #1
 8009e48:	425b      	negs	r3, r3
}
 8009e4a:	0018      	movs	r0, r3
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	b002      	add	sp, #8
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b082      	sub	sp, #8
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
 8009e5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	2280      	movs	r2, #128	; 0x80
 8009e60:	0192      	lsls	r2, r2, #6
 8009e62:	605a      	str	r2, [r3, #4]
	return 0;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	0018      	movs	r0, r3
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	b002      	add	sp, #8
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <_isatty>:

int _isatty(int file)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b082      	sub	sp, #8
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
	return 1;
 8009e76:	2301      	movs	r3, #1
}
 8009e78:	0018      	movs	r0, r3
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	b002      	add	sp, #8
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
	return 0;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	0018      	movs	r0, r3
 8009e90:	46bd      	mov	sp, r7
 8009e92:	b004      	add	sp, #16
 8009e94:	bd80      	pop	{r7, pc}
	...

08009e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b086      	sub	sp, #24
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009ea0:	4a14      	ldr	r2, [pc, #80]	; (8009ef4 <_sbrk+0x5c>)
 8009ea2:	4b15      	ldr	r3, [pc, #84]	; (8009ef8 <_sbrk+0x60>)
 8009ea4:	1ad3      	subs	r3, r2, r3
 8009ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009eac:	4b13      	ldr	r3, [pc, #76]	; (8009efc <_sbrk+0x64>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d102      	bne.n	8009eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009eb4:	4b11      	ldr	r3, [pc, #68]	; (8009efc <_sbrk+0x64>)
 8009eb6:	4a12      	ldr	r2, [pc, #72]	; (8009f00 <_sbrk+0x68>)
 8009eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009eba:	4b10      	ldr	r3, [pc, #64]	; (8009efc <_sbrk+0x64>)
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	18d3      	adds	r3, r2, r3
 8009ec2:	693a      	ldr	r2, [r7, #16]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d207      	bcs.n	8009ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009ec8:	f003 ff98 	bl	800ddfc <__errno>
 8009ecc:	0003      	movs	r3, r0
 8009ece:	220c      	movs	r2, #12
 8009ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	425b      	negs	r3, r3
 8009ed6:	e009      	b.n	8009eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009ed8:	4b08      	ldr	r3, [pc, #32]	; (8009efc <_sbrk+0x64>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009ede:	4b07      	ldr	r3, [pc, #28]	; (8009efc <_sbrk+0x64>)
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	18d2      	adds	r2, r2, r3
 8009ee6:	4b05      	ldr	r3, [pc, #20]	; (8009efc <_sbrk+0x64>)
 8009ee8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8009eea:	68fb      	ldr	r3, [r7, #12]
}
 8009eec:	0018      	movs	r0, r3
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	b006      	add	sp, #24
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	20005000 	.word	0x20005000
 8009ef8:	00000400 	.word	0x00000400
 8009efc:	20000344 	.word	0x20000344
 8009f00:	20002060 	.word	0x20002060

08009f04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009f08:	46c0      	nop			; (mov r8, r8)
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
	...

08009f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8009f10:	480d      	ldr	r0, [pc, #52]	; (8009f48 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8009f12:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009f14:	480d      	ldr	r0, [pc, #52]	; (8009f4c <LoopForever+0x6>)
  ldr r1, =_edata
 8009f16:	490e      	ldr	r1, [pc, #56]	; (8009f50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009f18:	4a0e      	ldr	r2, [pc, #56]	; (8009f54 <LoopForever+0xe>)
  movs r3, #0
 8009f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009f1c:	e002      	b.n	8009f24 <LoopCopyDataInit>

08009f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009f22:	3304      	adds	r3, #4

08009f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009f28:	d3f9      	bcc.n	8009f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009f2a:	4a0b      	ldr	r2, [pc, #44]	; (8009f58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009f2c:	4c0b      	ldr	r4, [pc, #44]	; (8009f5c <LoopForever+0x16>)
  movs r3, #0
 8009f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009f30:	e001      	b.n	8009f36 <LoopFillZerobss>

08009f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009f34:	3204      	adds	r2, #4

08009f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009f38:	d3fb      	bcc.n	8009f32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8009f3a:	f7ff ffe3 	bl	8009f04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009f3e:	f003 ff63 	bl	800de08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009f42:	f7fe fe0f 	bl	8008b64 <main>

08009f46 <LoopForever>:

LoopForever:
    b LoopForever
 8009f46:	e7fe      	b.n	8009f46 <LoopForever>
   ldr   r0, =_estack
 8009f48:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8009f4c:	20000108 	.word	0x20000108
  ldr r1, =_edata
 8009f50:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 8009f54:	08012ed8 	.word	0x08012ed8
  ldr r2, =_sbss
 8009f58:	200002fc 	.word	0x200002fc
  ldr r4, =_ebss
 8009f5c:	20002060 	.word	0x20002060

08009f60 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009f60:	e7fe      	b.n	8009f60 <ADC1_COMP_IRQHandler>
	...

08009f64 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009f6a:	1dfb      	adds	r3, r7, #7
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8009f70:	4b0b      	ldr	r3, [pc, #44]	; (8009fa0 <HAL_Init+0x3c>)
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	4b0a      	ldr	r3, [pc, #40]	; (8009fa0 <HAL_Init+0x3c>)
 8009f76:	2140      	movs	r1, #64	; 0x40
 8009f78:	430a      	orrs	r2, r1
 8009f7a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009f7c:	2000      	movs	r0, #0
 8009f7e:	f000 f811 	bl	8009fa4 <HAL_InitTick>
 8009f82:	1e03      	subs	r3, r0, #0
 8009f84:	d003      	beq.n	8009f8e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8009f86:	1dfb      	adds	r3, r7, #7
 8009f88:	2201      	movs	r2, #1
 8009f8a:	701a      	strb	r2, [r3, #0]
 8009f8c:	e001      	b.n	8009f92 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009f8e:	f7ff fd3f 	bl	8009a10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009f92:	1dfb      	adds	r3, r7, #7
 8009f94:	781b      	ldrb	r3, [r3, #0]
}
 8009f96:	0018      	movs	r0, r3
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	b002      	add	sp, #8
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	46c0      	nop			; (mov r8, r8)
 8009fa0:	40022000 	.word	0x40022000

08009fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009fa4:	b590      	push	{r4, r7, lr}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009fac:	4b14      	ldr	r3, [pc, #80]	; (800a000 <HAL_InitTick+0x5c>)
 8009fae:	681c      	ldr	r4, [r3, #0]
 8009fb0:	4b14      	ldr	r3, [pc, #80]	; (800a004 <HAL_InitTick+0x60>)
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	0019      	movs	r1, r3
 8009fb6:	23fa      	movs	r3, #250	; 0xfa
 8009fb8:	0098      	lsls	r0, r3, #2
 8009fba:	f7fb f8bb 	bl	8005134 <__udivsi3>
 8009fbe:	0003      	movs	r3, r0
 8009fc0:	0019      	movs	r1, r3
 8009fc2:	0020      	movs	r0, r4
 8009fc4:	f7fb f8b6 	bl	8005134 <__udivsi3>
 8009fc8:	0003      	movs	r3, r0
 8009fca:	0018      	movs	r0, r3
 8009fcc:	f000 f95d 	bl	800a28a <HAL_SYSTICK_Config>
 8009fd0:	1e03      	subs	r3, r0, #0
 8009fd2:	d001      	beq.n	8009fd8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e00f      	b.n	8009ff8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2b03      	cmp	r3, #3
 8009fdc:	d80b      	bhi.n	8009ff6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009fde:	6879      	ldr	r1, [r7, #4]
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	425b      	negs	r3, r3
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	0018      	movs	r0, r3
 8009fe8:	f000 f91a 	bl	800a220 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009fec:	4b06      	ldr	r3, [pc, #24]	; (800a008 <HAL_InitTick+0x64>)
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	e000      	b.n	8009ff8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
}
 8009ff8:	0018      	movs	r0, r3
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	b003      	add	sp, #12
 8009ffe:	bd90      	pop	{r4, r7, pc}
 800a000:	20000120 	.word	0x20000120
 800a004:	20000128 	.word	0x20000128
 800a008:	20000124 	.word	0x20000124

0800a00c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a010:	4b05      	ldr	r3, [pc, #20]	; (800a028 <HAL_IncTick+0x1c>)
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	001a      	movs	r2, r3
 800a016:	4b05      	ldr	r3, [pc, #20]	; (800a02c <HAL_IncTick+0x20>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	18d2      	adds	r2, r2, r3
 800a01c:	4b03      	ldr	r3, [pc, #12]	; (800a02c <HAL_IncTick+0x20>)
 800a01e:	601a      	str	r2, [r3, #0]
}
 800a020:	46c0      	nop			; (mov r8, r8)
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	46c0      	nop			; (mov r8, r8)
 800a028:	20000128 	.word	0x20000128
 800a02c:	20002040 	.word	0x20002040

0800a030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	af00      	add	r7, sp, #0
  return uwTick;
 800a034:	4b02      	ldr	r3, [pc, #8]	; (800a040 <HAL_GetTick+0x10>)
 800a036:	681b      	ldr	r3, [r3, #0]
}
 800a038:	0018      	movs	r0, r3
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	46c0      	nop			; (mov r8, r8)
 800a040:	20002040 	.word	0x20002040

0800a044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a04c:	f7ff fff0 	bl	800a030 <HAL_GetTick>
 800a050:	0003      	movs	r3, r0
 800a052:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	3301      	adds	r3, #1
 800a05c:	d005      	beq.n	800a06a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a05e:	4b09      	ldr	r3, [pc, #36]	; (800a084 <HAL_Delay+0x40>)
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	001a      	movs	r2, r3
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	189b      	adds	r3, r3, r2
 800a068:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a06a:	46c0      	nop			; (mov r8, r8)
 800a06c:	f7ff ffe0 	bl	800a030 <HAL_GetTick>
 800a070:	0002      	movs	r2, r0
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	1ad3      	subs	r3, r2, r3
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d8f7      	bhi.n	800a06c <HAL_Delay+0x28>
  {
  }
}
 800a07c:	46c0      	nop			; (mov r8, r8)
 800a07e:	46bd      	mov	sp, r7
 800a080:	b004      	add	sp, #16
 800a082:	bd80      	pop	{r7, pc}
 800a084:	20000128 	.word	0x20000128

0800a088 <__NVIC_EnableIRQ>:
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	0002      	movs	r2, r0
 800a090:	1dfb      	adds	r3, r7, #7
 800a092:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800a094:	1dfb      	adds	r3, r7, #7
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	2b7f      	cmp	r3, #127	; 0x7f
 800a09a:	d809      	bhi.n	800a0b0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a09c:	1dfb      	adds	r3, r7, #7
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	001a      	movs	r2, r3
 800a0a2:	231f      	movs	r3, #31
 800a0a4:	401a      	ands	r2, r3
 800a0a6:	4b04      	ldr	r3, [pc, #16]	; (800a0b8 <__NVIC_EnableIRQ+0x30>)
 800a0a8:	2101      	movs	r1, #1
 800a0aa:	4091      	lsls	r1, r2
 800a0ac:	000a      	movs	r2, r1
 800a0ae:	601a      	str	r2, [r3, #0]
}
 800a0b0:	46c0      	nop			; (mov r8, r8)
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	b002      	add	sp, #8
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	e000e100 	.word	0xe000e100

0800a0bc <__NVIC_DisableIRQ>:
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	0002      	movs	r2, r0
 800a0c4:	1dfb      	adds	r3, r7, #7
 800a0c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800a0c8:	1dfb      	adds	r3, r7, #7
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	2b7f      	cmp	r3, #127	; 0x7f
 800a0ce:	d80e      	bhi.n	800a0ee <__NVIC_DisableIRQ+0x32>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a0d0:	1dfb      	adds	r3, r7, #7
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	001a      	movs	r2, r3
 800a0d6:	231f      	movs	r3, #31
 800a0d8:	4013      	ands	r3, r2
 800a0da:	4907      	ldr	r1, [pc, #28]	; (800a0f8 <__NVIC_DisableIRQ+0x3c>)
 800a0dc:	2201      	movs	r2, #1
 800a0de:	409a      	lsls	r2, r3
 800a0e0:	0013      	movs	r3, r2
 800a0e2:	2280      	movs	r2, #128	; 0x80
 800a0e4:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a0e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a0ea:	f3bf 8f6f 	isb	sy
}
 800a0ee:	46c0      	nop			; (mov r8, r8)
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	b002      	add	sp, #8
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	46c0      	nop			; (mov r8, r8)
 800a0f8:	e000e100 	.word	0xe000e100

0800a0fc <__NVIC_SetPriority>:
{
 800a0fc:	b590      	push	{r4, r7, lr}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	0002      	movs	r2, r0
 800a104:	6039      	str	r1, [r7, #0]
 800a106:	1dfb      	adds	r3, r7, #7
 800a108:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800a10a:	1dfb      	adds	r3, r7, #7
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	2b7f      	cmp	r3, #127	; 0x7f
 800a110:	d828      	bhi.n	800a164 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a112:	4a2f      	ldr	r2, [pc, #188]	; (800a1d0 <__NVIC_SetPriority+0xd4>)
 800a114:	1dfb      	adds	r3, r7, #7
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	b25b      	sxtb	r3, r3
 800a11a:	089b      	lsrs	r3, r3, #2
 800a11c:	33c0      	adds	r3, #192	; 0xc0
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	589b      	ldr	r3, [r3, r2]
 800a122:	1dfa      	adds	r2, r7, #7
 800a124:	7812      	ldrb	r2, [r2, #0]
 800a126:	0011      	movs	r1, r2
 800a128:	2203      	movs	r2, #3
 800a12a:	400a      	ands	r2, r1
 800a12c:	00d2      	lsls	r2, r2, #3
 800a12e:	21ff      	movs	r1, #255	; 0xff
 800a130:	4091      	lsls	r1, r2
 800a132:	000a      	movs	r2, r1
 800a134:	43d2      	mvns	r2, r2
 800a136:	401a      	ands	r2, r3
 800a138:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	019b      	lsls	r3, r3, #6
 800a13e:	22ff      	movs	r2, #255	; 0xff
 800a140:	401a      	ands	r2, r3
 800a142:	1dfb      	adds	r3, r7, #7
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	0018      	movs	r0, r3
 800a148:	2303      	movs	r3, #3
 800a14a:	4003      	ands	r3, r0
 800a14c:	00db      	lsls	r3, r3, #3
 800a14e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a150:	481f      	ldr	r0, [pc, #124]	; (800a1d0 <__NVIC_SetPriority+0xd4>)
 800a152:	1dfb      	adds	r3, r7, #7
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	b25b      	sxtb	r3, r3
 800a158:	089b      	lsrs	r3, r3, #2
 800a15a:	430a      	orrs	r2, r1
 800a15c:	33c0      	adds	r3, #192	; 0xc0
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	501a      	str	r2, [r3, r0]
}
 800a162:	e031      	b.n	800a1c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a164:	4a1b      	ldr	r2, [pc, #108]	; (800a1d4 <__NVIC_SetPriority+0xd8>)
 800a166:	1dfb      	adds	r3, r7, #7
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	0019      	movs	r1, r3
 800a16c:	230f      	movs	r3, #15
 800a16e:	400b      	ands	r3, r1
 800a170:	3b08      	subs	r3, #8
 800a172:	089b      	lsrs	r3, r3, #2
 800a174:	3306      	adds	r3, #6
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	18d3      	adds	r3, r2, r3
 800a17a:	3304      	adds	r3, #4
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	1dfa      	adds	r2, r7, #7
 800a180:	7812      	ldrb	r2, [r2, #0]
 800a182:	0011      	movs	r1, r2
 800a184:	2203      	movs	r2, #3
 800a186:	400a      	ands	r2, r1
 800a188:	00d2      	lsls	r2, r2, #3
 800a18a:	21ff      	movs	r1, #255	; 0xff
 800a18c:	4091      	lsls	r1, r2
 800a18e:	000a      	movs	r2, r1
 800a190:	43d2      	mvns	r2, r2
 800a192:	401a      	ands	r2, r3
 800a194:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	019b      	lsls	r3, r3, #6
 800a19a:	22ff      	movs	r2, #255	; 0xff
 800a19c:	401a      	ands	r2, r3
 800a19e:	1dfb      	adds	r3, r7, #7
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	0018      	movs	r0, r3
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	4003      	ands	r3, r0
 800a1a8:	00db      	lsls	r3, r3, #3
 800a1aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a1ac:	4809      	ldr	r0, [pc, #36]	; (800a1d4 <__NVIC_SetPriority+0xd8>)
 800a1ae:	1dfb      	adds	r3, r7, #7
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	001c      	movs	r4, r3
 800a1b4:	230f      	movs	r3, #15
 800a1b6:	4023      	ands	r3, r4
 800a1b8:	3b08      	subs	r3, #8
 800a1ba:	089b      	lsrs	r3, r3, #2
 800a1bc:	430a      	orrs	r2, r1
 800a1be:	3306      	adds	r3, #6
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	18c3      	adds	r3, r0, r3
 800a1c4:	3304      	adds	r3, #4
 800a1c6:	601a      	str	r2, [r3, #0]
}
 800a1c8:	46c0      	nop			; (mov r8, r8)
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	b003      	add	sp, #12
 800a1ce:	bd90      	pop	{r4, r7, pc}
 800a1d0:	e000e100 	.word	0xe000e100
 800a1d4:	e000ed00 	.word	0xe000ed00

0800a1d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	4a0c      	ldr	r2, [pc, #48]	; (800a218 <SysTick_Config+0x40>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d901      	bls.n	800a1ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e010      	b.n	800a210 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a1ee:	4b0b      	ldr	r3, [pc, #44]	; (800a21c <SysTick_Config+0x44>)
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	3a01      	subs	r2, #1
 800a1f4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	425b      	negs	r3, r3
 800a1fa:	2103      	movs	r1, #3
 800a1fc:	0018      	movs	r0, r3
 800a1fe:	f7ff ff7d 	bl	800a0fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a202:	4b06      	ldr	r3, [pc, #24]	; (800a21c <SysTick_Config+0x44>)
 800a204:	2200      	movs	r2, #0
 800a206:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a208:	4b04      	ldr	r3, [pc, #16]	; (800a21c <SysTick_Config+0x44>)
 800a20a:	2207      	movs	r2, #7
 800a20c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a20e:	2300      	movs	r3, #0
}
 800a210:	0018      	movs	r0, r3
 800a212:	46bd      	mov	sp, r7
 800a214:	b002      	add	sp, #8
 800a216:	bd80      	pop	{r7, pc}
 800a218:	00ffffff 	.word	0x00ffffff
 800a21c:	e000e010 	.word	0xe000e010

0800a220 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	60b9      	str	r1, [r7, #8]
 800a228:	607a      	str	r2, [r7, #4]
 800a22a:	210f      	movs	r1, #15
 800a22c:	187b      	adds	r3, r7, r1
 800a22e:	1c02      	adds	r2, r0, #0
 800a230:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800a232:	68ba      	ldr	r2, [r7, #8]
 800a234:	187b      	adds	r3, r7, r1
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	b25b      	sxtb	r3, r3
 800a23a:	0011      	movs	r1, r2
 800a23c:	0018      	movs	r0, r3
 800a23e:	f7ff ff5d 	bl	800a0fc <__NVIC_SetPriority>
}
 800a242:	46c0      	nop			; (mov r8, r8)
 800a244:	46bd      	mov	sp, r7
 800a246:	b004      	add	sp, #16
 800a248:	bd80      	pop	{r7, pc}

0800a24a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b082      	sub	sp, #8
 800a24e:	af00      	add	r7, sp, #0
 800a250:	0002      	movs	r2, r0
 800a252:	1dfb      	adds	r3, r7, #7
 800a254:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a256:	1dfb      	adds	r3, r7, #7
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	b25b      	sxtb	r3, r3
 800a25c:	0018      	movs	r0, r3
 800a25e:	f7ff ff13 	bl	800a088 <__NVIC_EnableIRQ>
}
 800a262:	46c0      	nop			; (mov r8, r8)
 800a264:	46bd      	mov	sp, r7
 800a266:	b002      	add	sp, #8
 800a268:	bd80      	pop	{r7, pc}

0800a26a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a26a:	b580      	push	{r7, lr}
 800a26c:	b082      	sub	sp, #8
 800a26e:	af00      	add	r7, sp, #0
 800a270:	0002      	movs	r2, r0
 800a272:	1dfb      	adds	r3, r7, #7
 800a274:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800a276:	1dfb      	adds	r3, r7, #7
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	b25b      	sxtb	r3, r3
 800a27c:	0018      	movs	r0, r3
 800a27e:	f7ff ff1d 	bl	800a0bc <__NVIC_DisableIRQ>
}
 800a282:	46c0      	nop			; (mov r8, r8)
 800a284:	46bd      	mov	sp, r7
 800a286:	b002      	add	sp, #8
 800a288:	bd80      	pop	{r7, pc}

0800a28a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b082      	sub	sp, #8
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	0018      	movs	r0, r3
 800a296:	f7ff ff9f 	bl	800a1d8 <SysTick_Config>
 800a29a:	0003      	movs	r3, r0
}
 800a29c:	0018      	movs	r0, r3
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	b002      	add	sp, #8
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d101      	bne.n	800a2b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e061      	b.n	800a37a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a32      	ldr	r2, [pc, #200]	; (800a384 <HAL_DMA_Init+0xe0>)
 800a2bc:	4694      	mov	ip, r2
 800a2be:	4463      	add	r3, ip
 800a2c0:	2114      	movs	r1, #20
 800a2c2:	0018      	movs	r0, r3
 800a2c4:	f7fa ff36 	bl	8005134 <__udivsi3>
 800a2c8:	0003      	movs	r3, r0
 800a2ca:	009a      	lsls	r2, r3, #2
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	4a2d      	ldr	r2, [pc, #180]	; (800a388 <HAL_DMA_Init+0xe4>)
 800a2d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2225      	movs	r2, #37	; 0x25
 800a2da:	2102      	movs	r1, #2
 800a2dc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	4a28      	ldr	r2, [pc, #160]	; (800a38c <HAL_DMA_Init+0xe8>)
 800a2ea:	4013      	ands	r3, r2
 800a2ec:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a2f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	691b      	ldr	r3, [r3, #16]
 800a2fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a302:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	699b      	ldr	r3, [r3, #24]
 800a308:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a30e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6a1b      	ldr	r3, [r3, #32]
 800a314:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a316:	68fa      	ldr	r2, [r7, #12]
 800a318:	4313      	orrs	r3, r2
 800a31a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	68fa      	ldr	r2, [r7, #12]
 800a322:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	689a      	ldr	r2, [r3, #8]
 800a328:	2380      	movs	r3, #128	; 0x80
 800a32a:	01db      	lsls	r3, r3, #7
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d018      	beq.n	800a362 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800a330:	4b17      	ldr	r3, [pc, #92]	; (800a390 <HAL_DMA_Init+0xec>)
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a338:	211c      	movs	r1, #28
 800a33a:	400b      	ands	r3, r1
 800a33c:	210f      	movs	r1, #15
 800a33e:	4099      	lsls	r1, r3
 800a340:	000b      	movs	r3, r1
 800a342:	43d9      	mvns	r1, r3
 800a344:	4b12      	ldr	r3, [pc, #72]	; (800a390 <HAL_DMA_Init+0xec>)
 800a346:	400a      	ands	r2, r1
 800a348:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800a34a:	4b11      	ldr	r3, [pc, #68]	; (800a390 <HAL_DMA_Init+0xec>)
 800a34c:	6819      	ldr	r1, [r3, #0]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	685a      	ldr	r2, [r3, #4]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a356:	201c      	movs	r0, #28
 800a358:	4003      	ands	r3, r0
 800a35a:	409a      	lsls	r2, r3
 800a35c:	4b0c      	ldr	r3, [pc, #48]	; (800a390 <HAL_DMA_Init+0xec>)
 800a35e:	430a      	orrs	r2, r1
 800a360:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2225      	movs	r2, #37	; 0x25
 800a36c:	2101      	movs	r1, #1
 800a36e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2224      	movs	r2, #36	; 0x24
 800a374:	2100      	movs	r1, #0
 800a376:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a378:	2300      	movs	r3, #0
}
 800a37a:	0018      	movs	r0, r3
 800a37c:	46bd      	mov	sp, r7
 800a37e:	b004      	add	sp, #16
 800a380:	bd80      	pop	{r7, pc}
 800a382:	46c0      	nop			; (mov r8, r8)
 800a384:	bffdfff8 	.word	0xbffdfff8
 800a388:	40020000 	.word	0x40020000
 800a38c:	ffff800f 	.word	0xffff800f
 800a390:	400200a8 	.word	0x400200a8

0800a394 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b086      	sub	sp, #24
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
 800a3a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3a2:	2317      	movs	r3, #23
 800a3a4:	18fb      	adds	r3, r7, r3
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2224      	movs	r2, #36	; 0x24
 800a3ae:	5c9b      	ldrb	r3, [r3, r2]
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d101      	bne.n	800a3b8 <HAL_DMA_Start+0x24>
 800a3b4:	2302      	movs	r3, #2
 800a3b6:	e032      	b.n	800a41e <HAL_DMA_Start+0x8a>
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2224      	movs	r2, #36	; 0x24
 800a3bc:	2101      	movs	r1, #1
 800a3be:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2225      	movs	r2, #37	; 0x25
 800a3c4:	5c9b      	ldrb	r3, [r3, r2]
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d11d      	bne.n	800a408 <HAL_DMA_Start+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2225      	movs	r2, #37	; 0x25
 800a3d0:	2102      	movs	r1, #2
 800a3d2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2101      	movs	r1, #1
 800a3e6:	438a      	bics	r2, r1
 800a3e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	68b9      	ldr	r1, [r7, #8]
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	f000 f9b4 	bl	800a75e <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2101      	movs	r1, #1
 800a402:	430a      	orrs	r2, r1
 800a404:	601a      	str	r2, [r3, #0]
 800a406:	e007      	b.n	800a418 <HAL_DMA_Start+0x84>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2224      	movs	r2, #36	; 0x24
 800a40c:	2100      	movs	r1, #0
 800a40e:	5499      	strb	r1, [r3, r2]
    status = HAL_BUSY;
 800a410:	2317      	movs	r3, #23
 800a412:	18fb      	adds	r3, r7, r3
 800a414:	2202      	movs	r2, #2
 800a416:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800a418:	2317      	movs	r3, #23
 800a41a:	18fb      	adds	r3, r7, r3
 800a41c:	781b      	ldrb	r3, [r3, #0]
}
 800a41e:	0018      	movs	r0, r3
 800a420:	46bd      	mov	sp, r7
 800a422:	b006      	add	sp, #24
 800a424:	bd80      	pop	{r7, pc}

0800a426 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a426:	b580      	push	{r7, lr}
 800a428:	b086      	sub	sp, #24
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	60f8      	str	r0, [r7, #12]
 800a42e:	60b9      	str	r1, [r7, #8]
 800a430:	607a      	str	r2, [r7, #4]
 800a432:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a434:	2317      	movs	r3, #23
 800a436:	18fb      	adds	r3, r7, r3
 800a438:	2200      	movs	r2, #0
 800a43a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2224      	movs	r2, #36	; 0x24
 800a440:	5c9b      	ldrb	r3, [r3, r2]
 800a442:	2b01      	cmp	r3, #1
 800a444:	d101      	bne.n	800a44a <HAL_DMA_Start_IT+0x24>
 800a446:	2302      	movs	r3, #2
 800a448:	e04f      	b.n	800a4ea <HAL_DMA_Start_IT+0xc4>
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2224      	movs	r2, #36	; 0x24
 800a44e:	2101      	movs	r1, #1
 800a450:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2225      	movs	r2, #37	; 0x25
 800a456:	5c9b      	ldrb	r3, [r3, r2]
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d13a      	bne.n	800a4d4 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2225      	movs	r2, #37	; 0x25
 800a462:	2102      	movs	r1, #2
 800a464:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2200      	movs	r2, #0
 800a46a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	2101      	movs	r1, #1
 800a478:	438a      	bics	r2, r1
 800a47a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	68b9      	ldr	r1, [r7, #8]
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f000 f96b 	bl	800a75e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d008      	beq.n	800a4a2 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	210e      	movs	r1, #14
 800a49c:	430a      	orrs	r2, r1
 800a49e:	601a      	str	r2, [r3, #0]
 800a4a0:	e00f      	b.n	800a4c2 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2104      	movs	r1, #4
 800a4ae:	438a      	bics	r2, r1
 800a4b0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	210a      	movs	r1, #10
 800a4be:	430a      	orrs	r2, r1
 800a4c0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	2101      	movs	r1, #1
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	601a      	str	r2, [r3, #0]
 800a4d2:	e007      	b.n	800a4e4 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2224      	movs	r2, #36	; 0x24
 800a4d8:	2100      	movs	r1, #0
 800a4da:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800a4dc:	2317      	movs	r3, #23
 800a4de:	18fb      	adds	r3, r7, r3
 800a4e0:	2202      	movs	r2, #2
 800a4e2:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800a4e4:	2317      	movs	r3, #23
 800a4e6:	18fb      	adds	r3, r7, r3
 800a4e8:	781b      	ldrb	r3, [r3, #0]
}
 800a4ea:	0018      	movs	r0, r3
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	b006      	add	sp, #24
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b084      	sub	sp, #16
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4fa:	230f      	movs	r3, #15
 800a4fc:	18fb      	adds	r3, r7, r3
 800a4fe:	2200      	movs	r2, #0
 800a500:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2225      	movs	r2, #37	; 0x25
 800a506:	5c9b      	ldrb	r3, [r3, r2]
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	2b02      	cmp	r3, #2
 800a50c:	d008      	beq.n	800a520 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2204      	movs	r2, #4
 800a512:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2224      	movs	r2, #36	; 0x24
 800a518:	2100      	movs	r1, #0
 800a51a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800a51c:	2301      	movs	r3, #1
 800a51e:	e024      	b.n	800a56a <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	210e      	movs	r1, #14
 800a52c:	438a      	bics	r2, r1
 800a52e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2101      	movs	r1, #1
 800a53c:	438a      	bics	r2, r1
 800a53e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a544:	221c      	movs	r2, #28
 800a546:	401a      	ands	r2, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a54c:	2101      	movs	r1, #1
 800a54e:	4091      	lsls	r1, r2
 800a550:	000a      	movs	r2, r1
 800a552:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2225      	movs	r2, #37	; 0x25
 800a558:	2101      	movs	r1, #1
 800a55a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2224      	movs	r2, #36	; 0x24
 800a560:	2100      	movs	r1, #0
 800a562:	5499      	strb	r1, [r3, r2]

    return status;
 800a564:	230f      	movs	r3, #15
 800a566:	18fb      	adds	r3, r7, r3
 800a568:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a56a:	0018      	movs	r0, r3
 800a56c:	46bd      	mov	sp, r7
 800a56e:	b004      	add	sp, #16
 800a570:	bd80      	pop	{r7, pc}

0800a572 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b084      	sub	sp, #16
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a57a:	230f      	movs	r3, #15
 800a57c:	18fb      	adds	r3, r7, r3
 800a57e:	2200      	movs	r2, #0
 800a580:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2225      	movs	r2, #37	; 0x25
 800a586:	5c9b      	ldrb	r3, [r3, r2]
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	2b02      	cmp	r3, #2
 800a58c:	d007      	beq.n	800a59e <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2204      	movs	r2, #4
 800a592:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800a594:	230f      	movs	r3, #15
 800a596:	18fb      	adds	r3, r7, r3
 800a598:	2201      	movs	r2, #1
 800a59a:	701a      	strb	r2, [r3, #0]
 800a59c:	e02a      	b.n	800a5f4 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	210e      	movs	r1, #14
 800a5aa:	438a      	bics	r2, r1
 800a5ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2101      	movs	r1, #1
 800a5ba:	438a      	bics	r2, r1
 800a5bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5c2:	221c      	movs	r2, #28
 800a5c4:	401a      	ands	r2, r3
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ca:	2101      	movs	r1, #1
 800a5cc:	4091      	lsls	r1, r2
 800a5ce:	000a      	movs	r2, r1
 800a5d0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2225      	movs	r2, #37	; 0x25
 800a5d6:	2101      	movs	r1, #1
 800a5d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2224      	movs	r2, #36	; 0x24
 800a5de:	2100      	movs	r1, #0
 800a5e0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d004      	beq.n	800a5f4 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	0010      	movs	r0, r2
 800a5f2:	4798      	blx	r3
    }
  }
  return status;
 800a5f4:	230f      	movs	r3, #15
 800a5f6:	18fb      	adds	r3, r7, r3
 800a5f8:	781b      	ldrb	r3, [r3, #0]
}
 800a5fa:	0018      	movs	r0, r3
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	b004      	add	sp, #16
 800a600:	bd80      	pop	{r7, pc}

0800a602 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a602:	b580      	push	{r7, lr}
 800a604:	b084      	sub	sp, #16
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a61e:	221c      	movs	r2, #28
 800a620:	4013      	ands	r3, r2
 800a622:	2204      	movs	r2, #4
 800a624:	409a      	lsls	r2, r3
 800a626:	0013      	movs	r3, r2
 800a628:	68fa      	ldr	r2, [r7, #12]
 800a62a:	4013      	ands	r3, r2
 800a62c:	d026      	beq.n	800a67c <HAL_DMA_IRQHandler+0x7a>
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	2204      	movs	r2, #4
 800a632:	4013      	ands	r3, r2
 800a634:	d022      	beq.n	800a67c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2220      	movs	r2, #32
 800a63e:	4013      	ands	r3, r2
 800a640:	d107      	bne.n	800a652 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2104      	movs	r1, #4
 800a64e:	438a      	bics	r2, r1
 800a650:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a656:	221c      	movs	r2, #28
 800a658:	401a      	ands	r2, r3
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65e:	2104      	movs	r1, #4
 800a660:	4091      	lsls	r1, r2
 800a662:	000a      	movs	r2, r1
 800a664:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d100      	bne.n	800a670 <HAL_DMA_IRQHandler+0x6e>
 800a66e:	e071      	b.n	800a754 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	0010      	movs	r0, r2
 800a678:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800a67a:	e06b      	b.n	800a754 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a680:	221c      	movs	r2, #28
 800a682:	4013      	ands	r3, r2
 800a684:	2202      	movs	r2, #2
 800a686:	409a      	lsls	r2, r3
 800a688:	0013      	movs	r3, r2
 800a68a:	68fa      	ldr	r2, [r7, #12]
 800a68c:	4013      	ands	r3, r2
 800a68e:	d02d      	beq.n	800a6ec <HAL_DMA_IRQHandler+0xea>
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	2202      	movs	r2, #2
 800a694:	4013      	ands	r3, r2
 800a696:	d029      	beq.n	800a6ec <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2220      	movs	r2, #32
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	d10b      	bne.n	800a6bc <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	210a      	movs	r1, #10
 800a6b0:	438a      	bics	r2, r1
 800a6b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2225      	movs	r2, #37	; 0x25
 800a6b8:	2101      	movs	r1, #1
 800a6ba:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6c0:	221c      	movs	r2, #28
 800a6c2:	401a      	ands	r2, r3
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c8:	2102      	movs	r1, #2
 800a6ca:	4091      	lsls	r1, r2
 800a6cc:	000a      	movs	r2, r1
 800a6ce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2224      	movs	r2, #36	; 0x24
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d039      	beq.n	800a754 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	0010      	movs	r0, r2
 800a6e8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800a6ea:	e033      	b.n	800a754 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6f0:	221c      	movs	r2, #28
 800a6f2:	4013      	ands	r3, r2
 800a6f4:	2208      	movs	r2, #8
 800a6f6:	409a      	lsls	r2, r3
 800a6f8:	0013      	movs	r3, r2
 800a6fa:	68fa      	ldr	r2, [r7, #12]
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	d02a      	beq.n	800a756 <HAL_DMA_IRQHandler+0x154>
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	2208      	movs	r2, #8
 800a704:	4013      	ands	r3, r2
 800a706:	d026      	beq.n	800a756 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	210e      	movs	r1, #14
 800a714:	438a      	bics	r2, r1
 800a716:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a71c:	221c      	movs	r2, #28
 800a71e:	401a      	ands	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a724:	2101      	movs	r1, #1
 800a726:	4091      	lsls	r1, r2
 800a728:	000a      	movs	r2, r1
 800a72a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2201      	movs	r2, #1
 800a730:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2225      	movs	r2, #37	; 0x25
 800a736:	2101      	movs	r1, #1
 800a738:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2224      	movs	r2, #36	; 0x24
 800a73e:	2100      	movs	r1, #0
 800a740:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a746:	2b00      	cmp	r3, #0
 800a748:	d005      	beq.n	800a756 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	0010      	movs	r0, r2
 800a752:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a754:	46c0      	nop			; (mov r8, r8)
 800a756:	46c0      	nop			; (mov r8, r8)
}
 800a758:	46bd      	mov	sp, r7
 800a75a:	b004      	add	sp, #16
 800a75c:	bd80      	pop	{r7, pc}

0800a75e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a75e:	b580      	push	{r7, lr}
 800a760:	b084      	sub	sp, #16
 800a762:	af00      	add	r7, sp, #0
 800a764:	60f8      	str	r0, [r7, #12]
 800a766:	60b9      	str	r1, [r7, #8]
 800a768:	607a      	str	r2, [r7, #4]
 800a76a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a770:	221c      	movs	r2, #28
 800a772:	401a      	ands	r2, r3
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a778:	2101      	movs	r1, #1
 800a77a:	4091      	lsls	r1, r2
 800a77c:	000a      	movs	r2, r1
 800a77e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	683a      	ldr	r2, [r7, #0]
 800a786:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	689b      	ldr	r3, [r3, #8]
 800a78c:	2b10      	cmp	r3, #16
 800a78e:	d108      	bne.n	800a7a2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	68ba      	ldr	r2, [r7, #8]
 800a79e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a7a0:	e007      	b.n	800a7b2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68ba      	ldr	r2, [r7, #8]
 800a7a8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	60da      	str	r2, [r3, #12]
}
 800a7b2:	46c0      	nop			; (mov r8, r8)
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	b004      	add	sp, #16
 800a7b8:	bd80      	pop	{r7, pc}
	...

0800a7bc <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800a7bc:	b5b0      	push	{r4, r5, r7, lr}
 800a7be:	b086      	sub	sp, #24
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a7c8:	2317      	movs	r3, #23
 800a7ca:	18fb      	adds	r3, r7, r3
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a7d0:	4b16      	ldr	r3, [pc, #88]	; (800a82c <HAL_FLASH_Program+0x70>)
 800a7d2:	7c1b      	ldrb	r3, [r3, #16]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d101      	bne.n	800a7dc <HAL_FLASH_Program+0x20>
 800a7d8:	2302      	movs	r3, #2
 800a7da:	e022      	b.n	800a822 <HAL_FLASH_Program+0x66>
 800a7dc:	4b13      	ldr	r3, [pc, #76]	; (800a82c <HAL_FLASH_Program+0x70>)
 800a7de:	2201      	movs	r2, #1
 800a7e0:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800a7e2:	2517      	movs	r5, #23
 800a7e4:	197c      	adds	r4, r7, r5
 800a7e6:	4b12      	ldr	r3, [pc, #72]	; (800a830 <HAL_FLASH_Program+0x74>)
 800a7e8:	0018      	movs	r0, r3
 800a7ea:	f000 f887 	bl	800a8fc <FLASH_WaitForLastOperation>
 800a7ee:	0003      	movs	r3, r0
 800a7f0:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800a7f2:	197b      	adds	r3, r7, r5
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d10d      	bne.n	800a816 <HAL_FLASH_Program+0x5a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a7fa:	4b0c      	ldr	r3, [pc, #48]	; (800a82c <HAL_FLASH_Program+0x70>)
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	615a      	str	r2, [r3, #20]

    /*Program word (32-bit) at a specified address.*/
    *(__IO uint32_t *)Address = Data;
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800a806:	2317      	movs	r3, #23
 800a808:	18fc      	adds	r4, r7, r3
 800a80a:	4b09      	ldr	r3, [pc, #36]	; (800a830 <HAL_FLASH_Program+0x74>)
 800a80c:	0018      	movs	r0, r3
 800a80e:	f000 f875 	bl	800a8fc <FLASH_WaitForLastOperation>
 800a812:	0003      	movs	r3, r0
 800a814:	7023      	strb	r3, [r4, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a816:	4b05      	ldr	r3, [pc, #20]	; (800a82c <HAL_FLASH_Program+0x70>)
 800a818:	2200      	movs	r2, #0
 800a81a:	741a      	strb	r2, [r3, #16]

  return status;
 800a81c:	2317      	movs	r3, #23
 800a81e:	18fb      	adds	r3, r7, r3
 800a820:	781b      	ldrb	r3, [r3, #0]
}
 800a822:	0018      	movs	r0, r3
 800a824:	46bd      	mov	sp, r7
 800a826:	b006      	add	sp, #24
 800a828:	bdb0      	pop	{r4, r5, r7, pc}
 800a82a:	46c0      	nop			; (mov r8, r8)
 800a82c:	20002044 	.word	0x20002044
 800a830:	0000c350 	.word	0x0000c350

0800a834 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b086      	sub	sp, #24
 800a838:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  /* Unlocking FLASH_PECR register access*/
  if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 800a83a:	4b21      	ldr	r3, [pc, #132]	; (800a8c0 <HAL_FLASH_Unlock+0x8c>)
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	2201      	movs	r2, #1
 800a840:	4013      	ands	r3, r2
 800a842:	2b01      	cmp	r3, #1
 800a844:	d118      	bne.n	800a878 <HAL_FLASH_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a846:	f3ef 8310 	mrs	r3, PRIMASK
 800a84a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a84c:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800a84e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a850:	b672      	cpsid	i
    __disable_irq();

    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 800a852:	4b1b      	ldr	r3, [pc, #108]	; (800a8c0 <HAL_FLASH_Unlock+0x8c>)
 800a854:	4a1b      	ldr	r2, [pc, #108]	; (800a8c4 <HAL_FLASH_Unlock+0x90>)
 800a856:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 800a858:	4b19      	ldr	r3, [pc, #100]	; (800a8c0 <HAL_FLASH_Unlock+0x8c>)
 800a85a:	4a1b      	ldr	r2, [pc, #108]	; (800a8c8 <HAL_FLASH_Unlock+0x94>)
 800a85c:	60da      	str	r2, [r3, #12]
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	f383 8810 	msr	PRIMASK, r3

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 800a868:	4b15      	ldr	r3, [pc, #84]	; (800a8c0 <HAL_FLASH_Unlock+0x8c>)
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	2201      	movs	r2, #1
 800a86e:	4013      	ands	r3, r2
 800a870:	2b01      	cmp	r3, #1
 800a872:	d101      	bne.n	800a878 <HAL_FLASH_Unlock+0x44>
    {
      return HAL_ERROR;
 800a874:	2301      	movs	r3, #1
 800a876:	e01f      	b.n	800a8b8 <HAL_FLASH_Unlock+0x84>
    }
  }

  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 800a878:	4b11      	ldr	r3, [pc, #68]	; (800a8c0 <HAL_FLASH_Unlock+0x8c>)
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	2202      	movs	r2, #2
 800a87e:	4013      	ands	r3, r2
 800a880:	2b02      	cmp	r3, #2
 800a882:	d118      	bne.n	800a8b6 <HAL_FLASH_Unlock+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a884:	f3ef 8310 	mrs	r3, PRIMASK
 800a888:	607b      	str	r3, [r7, #4]
  return(result);
 800a88a:	687b      	ldr	r3, [r7, #4]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800a88c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a88e:	b672      	cpsid	i
    __disable_irq();

    /* Unlocking the program memory access */
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 800a890:	4b0b      	ldr	r3, [pc, #44]	; (800a8c0 <HAL_FLASH_Unlock+0x8c>)
 800a892:	4a0e      	ldr	r2, [pc, #56]	; (800a8cc <HAL_FLASH_Unlock+0x98>)
 800a894:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 800a896:	4b0a      	ldr	r3, [pc, #40]	; (800a8c0 <HAL_FLASH_Unlock+0x8c>)
 800a898:	4a0d      	ldr	r2, [pc, #52]	; (800a8d0 <HAL_FLASH_Unlock+0x9c>)
 800a89a:	611a      	str	r2, [r3, #16]
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	f383 8810 	msr	PRIMASK, r3

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 800a8a6:	4b06      	ldr	r3, [pc, #24]	; (800a8c0 <HAL_FLASH_Unlock+0x8c>)
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	2202      	movs	r2, #2
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	2b02      	cmp	r3, #2
 800a8b0:	d101      	bne.n	800a8b6 <HAL_FLASH_Unlock+0x82>
    {
      return HAL_ERROR;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e000      	b.n	800a8b8 <HAL_FLASH_Unlock+0x84>
    }
  }

  return HAL_OK; 
 800a8b6:	2300      	movs	r3, #0
}
 800a8b8:	0018      	movs	r0, r3
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	b006      	add	sp, #24
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	40022000 	.word	0x40022000
 800a8c4:	89abcdef 	.word	0x89abcdef
 800a8c8:	02030405 	.word	0x02030405
 800a8cc:	8c9daebf 	.word	0x8c9daebf
 800a8d0:	13141516 	.word	0x13141516

0800a8d4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	af00      	add	r7, sp, #0
  /* Set the PRGLOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 800a8d8:	4b07      	ldr	r3, [pc, #28]	; (800a8f8 <HAL_FLASH_Lock+0x24>)
 800a8da:	685a      	ldr	r2, [r3, #4]
 800a8dc:	4b06      	ldr	r3, [pc, #24]	; (800a8f8 <HAL_FLASH_Lock+0x24>)
 800a8de:	2102      	movs	r1, #2
 800a8e0:	430a      	orrs	r2, r1
 800a8e2:	605a      	str	r2, [r3, #4]
  
  /* Set the PELOCK Bit to lock the PECR Register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800a8e4:	4b04      	ldr	r3, [pc, #16]	; (800a8f8 <HAL_FLASH_Lock+0x24>)
 800a8e6:	685a      	ldr	r2, [r3, #4]
 800a8e8:	4b03      	ldr	r3, [pc, #12]	; (800a8f8 <HAL_FLASH_Lock+0x24>)
 800a8ea:	2101      	movs	r1, #1
 800a8ec:	430a      	orrs	r2, r1
 800a8ee:	605a      	str	r2, [r3, #4]

  return HAL_OK;  
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	0018      	movs	r0, r3
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	40022000 	.word	0x40022000

0800a8fc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800a904:	f7ff fb94 	bl	800a030 <HAL_GetTick>
 800a908:	0003      	movs	r3, r0
 800a90a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800a90c:	e00f      	b.n	800a92e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	3301      	adds	r3, #1
 800a912:	d00c      	beq.n	800a92e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d007      	beq.n	800a92a <FLASH_WaitForLastOperation+0x2e>
 800a91a:	f7ff fb89 	bl	800a030 <HAL_GetTick>
 800a91e:	0002      	movs	r2, r0
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	1ad3      	subs	r3, r2, r3
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	429a      	cmp	r2, r3
 800a928:	d201      	bcs.n	800a92e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800a92a:	2303      	movs	r3, #3
 800a92c:	e052      	b.n	800a9d4 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800a92e:	4b2b      	ldr	r3, [pc, #172]	; (800a9dc <FLASH_WaitForLastOperation+0xe0>)
 800a930:	699b      	ldr	r3, [r3, #24]
 800a932:	2201      	movs	r2, #1
 800a934:	4013      	ands	r3, r2
 800a936:	2b01      	cmp	r3, #1
 800a938:	d0e9      	beq.n	800a90e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800a93a:	4b28      	ldr	r3, [pc, #160]	; (800a9dc <FLASH_WaitForLastOperation+0xe0>)
 800a93c:	699b      	ldr	r3, [r3, #24]
 800a93e:	2202      	movs	r2, #2
 800a940:	4013      	ands	r3, r2
 800a942:	2b02      	cmp	r3, #2
 800a944:	d102      	bne.n	800a94c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a946:	4b25      	ldr	r3, [pc, #148]	; (800a9dc <FLASH_WaitForLastOperation+0xe0>)
 800a948:	2202      	movs	r2, #2
 800a94a:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800a94c:	4b23      	ldr	r3, [pc, #140]	; (800a9dc <FLASH_WaitForLastOperation+0xe0>)
 800a94e:	699a      	ldr	r2, [r3, #24]
 800a950:	2380      	movs	r3, #128	; 0x80
 800a952:	005b      	lsls	r3, r3, #1
 800a954:	401a      	ands	r2, r3
 800a956:	2380      	movs	r3, #128	; 0x80
 800a958:	005b      	lsls	r3, r3, #1
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d035      	beq.n	800a9ca <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800a95e:	4b1f      	ldr	r3, [pc, #124]	; (800a9dc <FLASH_WaitForLastOperation+0xe0>)
 800a960:	699a      	ldr	r2, [r3, #24]
 800a962:	2380      	movs	r3, #128	; 0x80
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800a968:	2380      	movs	r3, #128	; 0x80
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d02c      	beq.n	800a9ca <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800a970:	4b1a      	ldr	r3, [pc, #104]	; (800a9dc <FLASH_WaitForLastOperation+0xe0>)
 800a972:	699a      	ldr	r2, [r3, #24]
 800a974:	2380      	movs	r3, #128	; 0x80
 800a976:	00db      	lsls	r3, r3, #3
 800a978:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800a97a:	2380      	movs	r3, #128	; 0x80
 800a97c:	00db      	lsls	r3, r3, #3
 800a97e:	429a      	cmp	r2, r3
 800a980:	d023      	beq.n	800a9ca <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800a982:	4b16      	ldr	r3, [pc, #88]	; (800a9dc <FLASH_WaitForLastOperation+0xe0>)
 800a984:	699a      	ldr	r2, [r3, #24]
 800a986:	2380      	movs	r3, #128	; 0x80
 800a988:	011b      	lsls	r3, r3, #4
 800a98a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800a98c:	2380      	movs	r3, #128	; 0x80
 800a98e:	011b      	lsls	r3, r3, #4
 800a990:	429a      	cmp	r2, r3
 800a992:	d01a      	beq.n	800a9ca <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800a994:	4b11      	ldr	r3, [pc, #68]	; (800a9dc <FLASH_WaitForLastOperation+0xe0>)
 800a996:	699a      	ldr	r2, [r3, #24]
 800a998:	2380      	movs	r3, #128	; 0x80
 800a99a:	019b      	lsls	r3, r3, #6
 800a99c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800a99e:	2380      	movs	r3, #128	; 0x80
 800a9a0:	019b      	lsls	r3, r3, #6
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d011      	beq.n	800a9ca <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800a9a6:	4b0d      	ldr	r3, [pc, #52]	; (800a9dc <FLASH_WaitForLastOperation+0xe0>)
 800a9a8:	699a      	ldr	r2, [r3, #24]
 800a9aa:	2380      	movs	r3, #128	; 0x80
 800a9ac:	029b      	lsls	r3, r3, #10
 800a9ae:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800a9b0:	2380      	movs	r3, #128	; 0x80
 800a9b2:	029b      	lsls	r3, r3, #10
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d008      	beq.n	800a9ca <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800a9b8:	4b08      	ldr	r3, [pc, #32]	; (800a9dc <FLASH_WaitForLastOperation+0xe0>)
 800a9ba:	699a      	ldr	r2, [r3, #24]
 800a9bc:	2380      	movs	r3, #128	; 0x80
 800a9be:	025b      	lsls	r3, r3, #9
 800a9c0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800a9c2:	2380      	movs	r3, #128	; 0x80
 800a9c4:	025b      	lsls	r3, r3, #9
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d103      	bne.n	800a9d2 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800a9ca:	f000 f809 	bl	800a9e0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e000      	b.n	800a9d4 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800a9d2:	2300      	movs	r3, #0
}
 800a9d4:	0018      	movs	r0, r3
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	b004      	add	sp, #16
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	40022000 	.word	0x40022000

0800a9e0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800a9ea:	4b49      	ldr	r3, [pc, #292]	; (800ab10 <FLASH_SetErrorCode+0x130>)
 800a9ec:	699a      	ldr	r2, [r3, #24]
 800a9ee:	2380      	movs	r3, #128	; 0x80
 800a9f0:	005b      	lsls	r3, r3, #1
 800a9f2:	401a      	ands	r2, r3
 800a9f4:	2380      	movs	r3, #128	; 0x80
 800a9f6:	005b      	lsls	r3, r3, #1
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d10a      	bne.n	800aa12 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800a9fc:	4b45      	ldr	r3, [pc, #276]	; (800ab14 <FLASH_SetErrorCode+0x134>)
 800a9fe:	695b      	ldr	r3, [r3, #20]
 800aa00:	2202      	movs	r2, #2
 800aa02:	431a      	orrs	r2, r3
 800aa04:	4b43      	ldr	r3, [pc, #268]	; (800ab14 <FLASH_SetErrorCode+0x134>)
 800aa06:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2280      	movs	r2, #128	; 0x80
 800aa0c:	0052      	lsls	r2, r2, #1
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800aa12:	4b3f      	ldr	r3, [pc, #252]	; (800ab10 <FLASH_SetErrorCode+0x130>)
 800aa14:	699a      	ldr	r2, [r3, #24]
 800aa16:	2380      	movs	r3, #128	; 0x80
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	401a      	ands	r2, r3
 800aa1c:	2380      	movs	r3, #128	; 0x80
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d10a      	bne.n	800aa3a <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800aa24:	4b3b      	ldr	r3, [pc, #236]	; (800ab14 <FLASH_SetErrorCode+0x134>)
 800aa26:	695b      	ldr	r3, [r3, #20]
 800aa28:	2201      	movs	r2, #1
 800aa2a:	431a      	orrs	r2, r3
 800aa2c:	4b39      	ldr	r3, [pc, #228]	; (800ab14 <FLASH_SetErrorCode+0x134>)
 800aa2e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2280      	movs	r2, #128	; 0x80
 800aa34:	0092      	lsls	r2, r2, #2
 800aa36:	4313      	orrs	r3, r2
 800aa38:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800aa3a:	4b35      	ldr	r3, [pc, #212]	; (800ab10 <FLASH_SetErrorCode+0x130>)
 800aa3c:	699a      	ldr	r2, [r3, #24]
 800aa3e:	2380      	movs	r3, #128	; 0x80
 800aa40:	00db      	lsls	r3, r3, #3
 800aa42:	401a      	ands	r2, r3
 800aa44:	2380      	movs	r3, #128	; 0x80
 800aa46:	00db      	lsls	r3, r3, #3
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d10a      	bne.n	800aa62 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800aa4c:	4b31      	ldr	r3, [pc, #196]	; (800ab14 <FLASH_SetErrorCode+0x134>)
 800aa4e:	695b      	ldr	r3, [r3, #20]
 800aa50:	2208      	movs	r2, #8
 800aa52:	431a      	orrs	r2, r3
 800aa54:	4b2f      	ldr	r3, [pc, #188]	; (800ab14 <FLASH_SetErrorCode+0x134>)
 800aa56:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2280      	movs	r2, #128	; 0x80
 800aa5c:	00d2      	lsls	r2, r2, #3
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800aa62:	4b2b      	ldr	r3, [pc, #172]	; (800ab10 <FLASH_SetErrorCode+0x130>)
 800aa64:	699a      	ldr	r2, [r3, #24]
 800aa66:	2380      	movs	r3, #128	; 0x80
 800aa68:	011b      	lsls	r3, r3, #4
 800aa6a:	401a      	ands	r2, r3
 800aa6c:	2380      	movs	r3, #128	; 0x80
 800aa6e:	011b      	lsls	r3, r3, #4
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d10a      	bne.n	800aa8a <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800aa74:	4b27      	ldr	r3, [pc, #156]	; (800ab14 <FLASH_SetErrorCode+0x134>)
 800aa76:	695b      	ldr	r3, [r3, #20]
 800aa78:	2204      	movs	r2, #4
 800aa7a:	431a      	orrs	r2, r3
 800aa7c:	4b25      	ldr	r3, [pc, #148]	; (800ab14 <FLASH_SetErrorCode+0x134>)
 800aa7e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2280      	movs	r2, #128	; 0x80
 800aa84:	0112      	lsls	r2, r2, #4
 800aa86:	4313      	orrs	r3, r2
 800aa88:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800aa8a:	4b21      	ldr	r3, [pc, #132]	; (800ab10 <FLASH_SetErrorCode+0x130>)
 800aa8c:	699a      	ldr	r2, [r3, #24]
 800aa8e:	2380      	movs	r3, #128	; 0x80
 800aa90:	019b      	lsls	r3, r3, #6
 800aa92:	401a      	ands	r2, r3
 800aa94:	2380      	movs	r3, #128	; 0x80
 800aa96:	019b      	lsls	r3, r3, #6
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d10a      	bne.n	800aab2 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800aa9c:	4b1d      	ldr	r3, [pc, #116]	; (800ab14 <FLASH_SetErrorCode+0x134>)
 800aa9e:	695b      	ldr	r3, [r3, #20]
 800aaa0:	2210      	movs	r2, #16
 800aaa2:	431a      	orrs	r2, r3
 800aaa4:	4b1b      	ldr	r3, [pc, #108]	; (800ab14 <FLASH_SetErrorCode+0x134>)
 800aaa6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2280      	movs	r2, #128	; 0x80
 800aaac:	0192      	lsls	r2, r2, #6
 800aaae:	4313      	orrs	r3, r2
 800aab0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800aab2:	4b17      	ldr	r3, [pc, #92]	; (800ab10 <FLASH_SetErrorCode+0x130>)
 800aab4:	699a      	ldr	r2, [r3, #24]
 800aab6:	2380      	movs	r3, #128	; 0x80
 800aab8:	029b      	lsls	r3, r3, #10
 800aaba:	401a      	ands	r2, r3
 800aabc:	2380      	movs	r3, #128	; 0x80
 800aabe:	029b      	lsls	r3, r3, #10
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d109      	bne.n	800aad8 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800aac4:	4b13      	ldr	r3, [pc, #76]	; (800ab14 <FLASH_SetErrorCode+0x134>)
 800aac6:	695b      	ldr	r3, [r3, #20]
 800aac8:	2220      	movs	r2, #32
 800aaca:	431a      	orrs	r2, r3
 800aacc:	4b11      	ldr	r3, [pc, #68]	; (800ab14 <FLASH_SetErrorCode+0x134>)
 800aace:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2220      	movs	r2, #32
 800aad4:	4313      	orrs	r3, r2
 800aad6:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800aad8:	4b0d      	ldr	r3, [pc, #52]	; (800ab10 <FLASH_SetErrorCode+0x130>)
 800aada:	699a      	ldr	r2, [r3, #24]
 800aadc:	2380      	movs	r3, #128	; 0x80
 800aade:	025b      	lsls	r3, r3, #9
 800aae0:	401a      	ands	r2, r3
 800aae2:	2380      	movs	r3, #128	; 0x80
 800aae4:	025b      	lsls	r3, r3, #9
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d10a      	bne.n	800ab00 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800aaea:	4b0a      	ldr	r3, [pc, #40]	; (800ab14 <FLASH_SetErrorCode+0x134>)
 800aaec:	695b      	ldr	r3, [r3, #20]
 800aaee:	2240      	movs	r2, #64	; 0x40
 800aaf0:	431a      	orrs	r2, r3
 800aaf2:	4b08      	ldr	r3, [pc, #32]	; (800ab14 <FLASH_SetErrorCode+0x134>)
 800aaf4:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2280      	movs	r2, #128	; 0x80
 800aafa:	0252      	lsls	r2, r2, #9
 800aafc:	4313      	orrs	r3, r2
 800aafe:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800ab00:	4b03      	ldr	r3, [pc, #12]	; (800ab10 <FLASH_SetErrorCode+0x130>)
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	619a      	str	r2, [r3, #24]
}  
 800ab06:	46c0      	nop			; (mov r8, r8)
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	b002      	add	sp, #8
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	46c0      	nop			; (mov r8, r8)
 800ab10:	40022000 	.word	0x40022000
 800ab14:	20002044 	.word	0x20002044

0800ab18 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800ab18:	b5b0      	push	{r4, r5, r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ab22:	230f      	movs	r3, #15
 800ab24:	18fb      	adds	r3, r7, r3
 800ab26:	2201      	movs	r2, #1
 800ab28:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ab2e:	4b29      	ldr	r3, [pc, #164]	; (800abd4 <HAL_FLASHEx_Erase+0xbc>)
 800ab30:	7c1b      	ldrb	r3, [r3, #16]
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d101      	bne.n	800ab3a <HAL_FLASHEx_Erase+0x22>
 800ab36:	2302      	movs	r3, #2
 800ab38:	e048      	b.n	800abcc <HAL_FLASHEx_Erase+0xb4>
 800ab3a:	4b26      	ldr	r3, [pc, #152]	; (800abd4 <HAL_FLASHEx_Erase+0xbc>)
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	741a      	strb	r2, [r3, #16]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ab40:	250f      	movs	r5, #15
 800ab42:	197c      	adds	r4, r7, r5
 800ab44:	4b24      	ldr	r3, [pc, #144]	; (800abd8 <HAL_FLASHEx_Erase+0xc0>)
 800ab46:	0018      	movs	r0, r3
 800ab48:	f7ff fed8 	bl	800a8fc <FLASH_WaitForLastOperation>
 800ab4c:	0003      	movs	r3, r0
 800ab4e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800ab50:	197b      	adds	r3, r7, r5
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d133      	bne.n	800abc0 <HAL_FLASHEx_Erase+0xa8>
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	4252      	negs	r2, r2
 800ab5e:	601a      	str	r2, [r3, #0]
    assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_PROGRAM_ADDRESS((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEraseInit->NbPages * FLASH_PAGE_SIZE - 1U));

    /* Erase page by page to be done*/
    for(address = pEraseInit->PageAddress; 
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	60bb      	str	r3, [r7, #8]
 800ab66:	e022      	b.n	800abae <HAL_FLASHEx_Erase+0x96>
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
        address += FLASH_PAGE_SIZE)
    {
      FLASH_PageErase(address);
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	0018      	movs	r0, r3
 800ab6c:	f000 f83a 	bl	800abe4 <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ab70:	250f      	movs	r5, #15
 800ab72:	197c      	adds	r4, r7, r5
 800ab74:	4b18      	ldr	r3, [pc, #96]	; (800abd8 <HAL_FLASHEx_Erase+0xc0>)
 800ab76:	0018      	movs	r0, r3
 800ab78:	f7ff fec0 	bl	800a8fc <FLASH_WaitForLastOperation>
 800ab7c:	0003      	movs	r3, r0
 800ab7e:	7023      	strb	r3, [r4, #0]

      /* If the erase operation is completed, disable the ERASE Bit */
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 800ab80:	4b16      	ldr	r3, [pc, #88]	; (800abdc <HAL_FLASHEx_Erase+0xc4>)
 800ab82:	685a      	ldr	r2, [r3, #4]
 800ab84:	4b15      	ldr	r3, [pc, #84]	; (800abdc <HAL_FLASHEx_Erase+0xc4>)
 800ab86:	2108      	movs	r1, #8
 800ab88:	438a      	bics	r2, r1
 800ab8a:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 800ab8c:	4b13      	ldr	r3, [pc, #76]	; (800abdc <HAL_FLASHEx_Erase+0xc4>)
 800ab8e:	685a      	ldr	r2, [r3, #4]
 800ab90:	4b12      	ldr	r3, [pc, #72]	; (800abdc <HAL_FLASHEx_Erase+0xc4>)
 800ab92:	4913      	ldr	r1, [pc, #76]	; (800abe0 <HAL_FLASHEx_Erase+0xc8>)
 800ab94:	400a      	ands	r2, r1
 800ab96:	605a      	str	r2, [r3, #4]

      if (status != HAL_OK) 
 800ab98:	197b      	adds	r3, r7, r5
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d003      	beq.n	800aba8 <HAL_FLASHEx_Erase+0x90>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = address;
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	68ba      	ldr	r2, [r7, #8]
 800aba4:	601a      	str	r2, [r3, #0]
        break;
 800aba6:	e00b      	b.n	800abc0 <HAL_FLASHEx_Erase+0xa8>
        address += FLASH_PAGE_SIZE)
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	3380      	adds	r3, #128	; 0x80
 800abac:	60bb      	str	r3, [r7, #8]
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	01da      	lsls	r2, r3, #7
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	18d3      	adds	r3, r2, r3
    for(address = pEraseInit->PageAddress; 
 800abba:	68ba      	ldr	r2, [r7, #8]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d3d3      	bcc.n	800ab68 <HAL_FLASHEx_Erase+0x50>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800abc0:	4b04      	ldr	r3, [pc, #16]	; (800abd4 <HAL_FLASHEx_Erase+0xbc>)
 800abc2:	2200      	movs	r2, #0
 800abc4:	741a      	strb	r2, [r3, #16]

  return status;
 800abc6:	230f      	movs	r3, #15
 800abc8:	18fb      	adds	r3, r7, r3
 800abca:	781b      	ldrb	r3, [r3, #0]
}
 800abcc:	0018      	movs	r0, r3
 800abce:	46bd      	mov	sp, r7
 800abd0:	b004      	add	sp, #16
 800abd2:	bdb0      	pop	{r4, r5, r7, pc}
 800abd4:	20002044 	.word	0x20002044
 800abd8:	0000c350 	.word	0x0000c350
 800abdc:	40022000 	.word	0x40022000
 800abe0:	fffffdff 	.word	0xfffffdff

0800abe4 <FLASH_PageErase>:
  * @note   A Page is erased in the Program memory only if the address to load 
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800abec:	4b0c      	ldr	r3, [pc, #48]	; (800ac20 <FLASH_PageErase+0x3c>)
 800abee:	2200      	movs	r2, #0
 800abf0:	615a      	str	r2, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 800abf2:	4b0c      	ldr	r3, [pc, #48]	; (800ac24 <FLASH_PageErase+0x40>)
 800abf4:	685a      	ldr	r2, [r3, #4]
 800abf6:	4b0b      	ldr	r3, [pc, #44]	; (800ac24 <FLASH_PageErase+0x40>)
 800abf8:	2180      	movs	r1, #128	; 0x80
 800abfa:	0089      	lsls	r1, r1, #2
 800abfc:	430a      	orrs	r2, r1
 800abfe:	605a      	str	r2, [r3, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 800ac00:	4b08      	ldr	r3, [pc, #32]	; (800ac24 <FLASH_PageErase+0x40>)
 800ac02:	685a      	ldr	r2, [r3, #4]
 800ac04:	4b07      	ldr	r3, [pc, #28]	; (800ac24 <FLASH_PageErase+0x40>)
 800ac06:	2108      	movs	r1, #8
 800ac08:	430a      	orrs	r2, r1
 800ac0a:	605a      	str	r2, [r3, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	227f      	movs	r2, #127	; 0x7f
 800ac10:	4393      	bics	r3, r2
 800ac12:	2200      	movs	r2, #0
 800ac14:	601a      	str	r2, [r3, #0]
}
 800ac16:	46c0      	nop			; (mov r8, r8)
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	b002      	add	sp, #8
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	46c0      	nop			; (mov r8, r8)
 800ac20:	20002044 	.word	0x20002044
 800ac24:	40022000 	.word	0x40022000

0800ac28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b086      	sub	sp, #24
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ac32:	2300      	movs	r3, #0
 800ac34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ac36:	2300      	movs	r3, #0
 800ac38:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800ac3e:	e155      	b.n	800aeec <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2101      	movs	r1, #1
 800ac46:	697a      	ldr	r2, [r7, #20]
 800ac48:	4091      	lsls	r1, r2
 800ac4a:	000a      	movs	r2, r1
 800ac4c:	4013      	ands	r3, r2
 800ac4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d100      	bne.n	800ac58 <HAL_GPIO_Init+0x30>
 800ac56:	e146      	b.n	800aee6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	2203      	movs	r2, #3
 800ac5e:	4013      	ands	r3, r2
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d005      	beq.n	800ac70 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	2203      	movs	r2, #3
 800ac6a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800ac6c:	2b02      	cmp	r3, #2
 800ac6e:	d130      	bne.n	800acd2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	005b      	lsls	r3, r3, #1
 800ac7a:	2203      	movs	r2, #3
 800ac7c:	409a      	lsls	r2, r3
 800ac7e:	0013      	movs	r3, r2
 800ac80:	43da      	mvns	r2, r3
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	4013      	ands	r3, r2
 800ac86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	68da      	ldr	r2, [r3, #12]
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	005b      	lsls	r3, r3, #1
 800ac90:	409a      	lsls	r2, r3
 800ac92:	0013      	movs	r3, r2
 800ac94:	693a      	ldr	r2, [r7, #16]
 800ac96:	4313      	orrs	r3, r2
 800ac98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	693a      	ldr	r2, [r7, #16]
 800ac9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800aca6:	2201      	movs	r2, #1
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	409a      	lsls	r2, r3
 800acac:	0013      	movs	r3, r2
 800acae:	43da      	mvns	r2, r3
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	4013      	ands	r3, r2
 800acb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	091b      	lsrs	r3, r3, #4
 800acbc:	2201      	movs	r2, #1
 800acbe:	401a      	ands	r2, r3
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	409a      	lsls	r2, r3
 800acc4:	0013      	movs	r3, r2
 800acc6:	693a      	ldr	r2, [r7, #16]
 800acc8:	4313      	orrs	r3, r2
 800acca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	693a      	ldr	r2, [r7, #16]
 800acd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	2203      	movs	r2, #3
 800acd8:	4013      	ands	r3, r2
 800acda:	2b03      	cmp	r3, #3
 800acdc:	d017      	beq.n	800ad0e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	005b      	lsls	r3, r3, #1
 800ace8:	2203      	movs	r2, #3
 800acea:	409a      	lsls	r2, r3
 800acec:	0013      	movs	r3, r2
 800acee:	43da      	mvns	r2, r3
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	4013      	ands	r3, r2
 800acf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	689a      	ldr	r2, [r3, #8]
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	005b      	lsls	r3, r3, #1
 800acfe:	409a      	lsls	r2, r3
 800ad00:	0013      	movs	r3, r2
 800ad02:	693a      	ldr	r2, [r7, #16]
 800ad04:	4313      	orrs	r3, r2
 800ad06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	693a      	ldr	r2, [r7, #16]
 800ad0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	2203      	movs	r2, #3
 800ad14:	4013      	ands	r3, r2
 800ad16:	2b02      	cmp	r3, #2
 800ad18:	d123      	bne.n	800ad62 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	08da      	lsrs	r2, r3, #3
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	3208      	adds	r2, #8
 800ad22:	0092      	lsls	r2, r2, #2
 800ad24:	58d3      	ldr	r3, [r2, r3]
 800ad26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	2207      	movs	r2, #7
 800ad2c:	4013      	ands	r3, r2
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	220f      	movs	r2, #15
 800ad32:	409a      	lsls	r2, r3
 800ad34:	0013      	movs	r3, r2
 800ad36:	43da      	mvns	r2, r3
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	4013      	ands	r3, r2
 800ad3c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	691a      	ldr	r2, [r3, #16]
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	2107      	movs	r1, #7
 800ad46:	400b      	ands	r3, r1
 800ad48:	009b      	lsls	r3, r3, #2
 800ad4a:	409a      	lsls	r2, r3
 800ad4c:	0013      	movs	r3, r2
 800ad4e:	693a      	ldr	r2, [r7, #16]
 800ad50:	4313      	orrs	r3, r2
 800ad52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	08da      	lsrs	r2, r3, #3
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	3208      	adds	r2, #8
 800ad5c:	0092      	lsls	r2, r2, #2
 800ad5e:	6939      	ldr	r1, [r7, #16]
 800ad60:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	005b      	lsls	r3, r3, #1
 800ad6c:	2203      	movs	r2, #3
 800ad6e:	409a      	lsls	r2, r3
 800ad70:	0013      	movs	r3, r2
 800ad72:	43da      	mvns	r2, r3
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	4013      	ands	r3, r2
 800ad78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	2203      	movs	r2, #3
 800ad80:	401a      	ands	r2, r3
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	005b      	lsls	r3, r3, #1
 800ad86:	409a      	lsls	r2, r3
 800ad88:	0013      	movs	r3, r2
 800ad8a:	693a      	ldr	r2, [r7, #16]
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	693a      	ldr	r2, [r7, #16]
 800ad94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	685a      	ldr	r2, [r3, #4]
 800ad9a:	23c0      	movs	r3, #192	; 0xc0
 800ad9c:	029b      	lsls	r3, r3, #10
 800ad9e:	4013      	ands	r3, r2
 800ada0:	d100      	bne.n	800ada4 <HAL_GPIO_Init+0x17c>
 800ada2:	e0a0      	b.n	800aee6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ada4:	4b57      	ldr	r3, [pc, #348]	; (800af04 <HAL_GPIO_Init+0x2dc>)
 800ada6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ada8:	4b56      	ldr	r3, [pc, #344]	; (800af04 <HAL_GPIO_Init+0x2dc>)
 800adaa:	2101      	movs	r1, #1
 800adac:	430a      	orrs	r2, r1
 800adae:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800adb0:	4a55      	ldr	r2, [pc, #340]	; (800af08 <HAL_GPIO_Init+0x2e0>)
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	089b      	lsrs	r3, r3, #2
 800adb6:	3302      	adds	r3, #2
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	589b      	ldr	r3, [r3, r2]
 800adbc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	2203      	movs	r2, #3
 800adc2:	4013      	ands	r3, r2
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	220f      	movs	r2, #15
 800adc8:	409a      	lsls	r2, r3
 800adca:	0013      	movs	r3, r2
 800adcc:	43da      	mvns	r2, r3
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	4013      	ands	r3, r2
 800add2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	23a0      	movs	r3, #160	; 0xa0
 800add8:	05db      	lsls	r3, r3, #23
 800adda:	429a      	cmp	r2, r3
 800addc:	d01f      	beq.n	800ae1e <HAL_GPIO_Init+0x1f6>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	4a4a      	ldr	r2, [pc, #296]	; (800af0c <HAL_GPIO_Init+0x2e4>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d019      	beq.n	800ae1a <HAL_GPIO_Init+0x1f2>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	4a49      	ldr	r2, [pc, #292]	; (800af10 <HAL_GPIO_Init+0x2e8>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d013      	beq.n	800ae16 <HAL_GPIO_Init+0x1ee>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	4a48      	ldr	r2, [pc, #288]	; (800af14 <HAL_GPIO_Init+0x2ec>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d00d      	beq.n	800ae12 <HAL_GPIO_Init+0x1ea>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	4a47      	ldr	r2, [pc, #284]	; (800af18 <HAL_GPIO_Init+0x2f0>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d007      	beq.n	800ae0e <HAL_GPIO_Init+0x1e6>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	4a46      	ldr	r2, [pc, #280]	; (800af1c <HAL_GPIO_Init+0x2f4>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d101      	bne.n	800ae0a <HAL_GPIO_Init+0x1e2>
 800ae06:	2305      	movs	r3, #5
 800ae08:	e00a      	b.n	800ae20 <HAL_GPIO_Init+0x1f8>
 800ae0a:	2306      	movs	r3, #6
 800ae0c:	e008      	b.n	800ae20 <HAL_GPIO_Init+0x1f8>
 800ae0e:	2304      	movs	r3, #4
 800ae10:	e006      	b.n	800ae20 <HAL_GPIO_Init+0x1f8>
 800ae12:	2303      	movs	r3, #3
 800ae14:	e004      	b.n	800ae20 <HAL_GPIO_Init+0x1f8>
 800ae16:	2302      	movs	r3, #2
 800ae18:	e002      	b.n	800ae20 <HAL_GPIO_Init+0x1f8>
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e000      	b.n	800ae20 <HAL_GPIO_Init+0x1f8>
 800ae1e:	2300      	movs	r3, #0
 800ae20:	697a      	ldr	r2, [r7, #20]
 800ae22:	2103      	movs	r1, #3
 800ae24:	400a      	ands	r2, r1
 800ae26:	0092      	lsls	r2, r2, #2
 800ae28:	4093      	lsls	r3, r2
 800ae2a:	693a      	ldr	r2, [r7, #16]
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ae30:	4935      	ldr	r1, [pc, #212]	; (800af08 <HAL_GPIO_Init+0x2e0>)
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	089b      	lsrs	r3, r3, #2
 800ae36:	3302      	adds	r3, #2
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	693a      	ldr	r2, [r7, #16]
 800ae3c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ae3e:	4b38      	ldr	r3, [pc, #224]	; (800af20 <HAL_GPIO_Init+0x2f8>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	43da      	mvns	r2, r3
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	4013      	ands	r3, r2
 800ae4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	685a      	ldr	r2, [r3, #4]
 800ae52:	2380      	movs	r3, #128	; 0x80
 800ae54:	025b      	lsls	r3, r3, #9
 800ae56:	4013      	ands	r3, r2
 800ae58:	d003      	beq.n	800ae62 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800ae5a:	693a      	ldr	r2, [r7, #16]
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800ae62:	4b2f      	ldr	r3, [pc, #188]	; (800af20 <HAL_GPIO_Init+0x2f8>)
 800ae64:	693a      	ldr	r2, [r7, #16]
 800ae66:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800ae68:	4b2d      	ldr	r3, [pc, #180]	; (800af20 <HAL_GPIO_Init+0x2f8>)
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	43da      	mvns	r2, r3
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	4013      	ands	r3, r2
 800ae76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	685a      	ldr	r2, [r3, #4]
 800ae7c:	2380      	movs	r3, #128	; 0x80
 800ae7e:	029b      	lsls	r3, r3, #10
 800ae80:	4013      	ands	r3, r2
 800ae82:	d003      	beq.n	800ae8c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800ae84:	693a      	ldr	r2, [r7, #16]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800ae8c:	4b24      	ldr	r3, [pc, #144]	; (800af20 <HAL_GPIO_Init+0x2f8>)
 800ae8e:	693a      	ldr	r2, [r7, #16]
 800ae90:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ae92:	4b23      	ldr	r3, [pc, #140]	; (800af20 <HAL_GPIO_Init+0x2f8>)
 800ae94:	689b      	ldr	r3, [r3, #8]
 800ae96:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	43da      	mvns	r2, r3
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	4013      	ands	r3, r2
 800aea0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	685a      	ldr	r2, [r3, #4]
 800aea6:	2380      	movs	r3, #128	; 0x80
 800aea8:	035b      	lsls	r3, r3, #13
 800aeaa:	4013      	ands	r3, r2
 800aeac:	d003      	beq.n	800aeb6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800aeae:	693a      	ldr	r2, [r7, #16]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800aeb6:	4b1a      	ldr	r3, [pc, #104]	; (800af20 <HAL_GPIO_Init+0x2f8>)
 800aeb8:	693a      	ldr	r2, [r7, #16]
 800aeba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800aebc:	4b18      	ldr	r3, [pc, #96]	; (800af20 <HAL_GPIO_Init+0x2f8>)
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	43da      	mvns	r2, r3
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	4013      	ands	r3, r2
 800aeca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	685a      	ldr	r2, [r3, #4]
 800aed0:	2380      	movs	r3, #128	; 0x80
 800aed2:	039b      	lsls	r3, r3, #14
 800aed4:	4013      	ands	r3, r2
 800aed6:	d003      	beq.n	800aee0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800aed8:	693a      	ldr	r2, [r7, #16]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	4313      	orrs	r3, r2
 800aede:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800aee0:	4b0f      	ldr	r3, [pc, #60]	; (800af20 <HAL_GPIO_Init+0x2f8>)
 800aee2:	693a      	ldr	r2, [r7, #16]
 800aee4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	3301      	adds	r3, #1
 800aeea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	40da      	lsrs	r2, r3
 800aef4:	1e13      	subs	r3, r2, #0
 800aef6:	d000      	beq.n	800aefa <HAL_GPIO_Init+0x2d2>
 800aef8:	e6a2      	b.n	800ac40 <HAL_GPIO_Init+0x18>
  }
}
 800aefa:	46c0      	nop			; (mov r8, r8)
 800aefc:	46bd      	mov	sp, r7
 800aefe:	b006      	add	sp, #24
 800af00:	bd80      	pop	{r7, pc}
 800af02:	46c0      	nop			; (mov r8, r8)
 800af04:	40021000 	.word	0x40021000
 800af08:	40010000 	.word	0x40010000
 800af0c:	50000400 	.word	0x50000400
 800af10:	50000800 	.word	0x50000800
 800af14:	50000c00 	.word	0x50000c00
 800af18:	50001000 	.word	0x50001000
 800af1c:	50001c00 	.word	0x50001c00
 800af20:	40010400 	.word	0x40010400

0800af24 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	0008      	movs	r0, r1
 800af2e:	0011      	movs	r1, r2
 800af30:	1cbb      	adds	r3, r7, #2
 800af32:	1c02      	adds	r2, r0, #0
 800af34:	801a      	strh	r2, [r3, #0]
 800af36:	1c7b      	adds	r3, r7, #1
 800af38:	1c0a      	adds	r2, r1, #0
 800af3a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800af3c:	1c7b      	adds	r3, r7, #1
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d004      	beq.n	800af4e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800af44:	1cbb      	adds	r3, r7, #2
 800af46:	881a      	ldrh	r2, [r3, #0]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800af4c:	e003      	b.n	800af56 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800af4e:	1cbb      	adds	r3, r7, #2
 800af50:	881a      	ldrh	r2, [r3, #0]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	629a      	str	r2, [r3, #40]	; 0x28
}
 800af56:	46c0      	nop			; (mov r8, r8)
 800af58:	46bd      	mov	sp, r7
 800af5a:	b002      	add	sp, #8
 800af5c:	bd80      	pop	{r7, pc}
	...

0800af60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	0002      	movs	r2, r0
 800af68:	1dbb      	adds	r3, r7, #6
 800af6a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800af6c:	4b09      	ldr	r3, [pc, #36]	; (800af94 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800af6e:	695b      	ldr	r3, [r3, #20]
 800af70:	1dba      	adds	r2, r7, #6
 800af72:	8812      	ldrh	r2, [r2, #0]
 800af74:	4013      	ands	r3, r2
 800af76:	d008      	beq.n	800af8a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800af78:	4b06      	ldr	r3, [pc, #24]	; (800af94 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800af7a:	1dba      	adds	r2, r7, #6
 800af7c:	8812      	ldrh	r2, [r2, #0]
 800af7e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800af80:	1dbb      	adds	r3, r7, #6
 800af82:	881b      	ldrh	r3, [r3, #0]
 800af84:	0018      	movs	r0, r3
 800af86:	f7fd f9f3 	bl	8008370 <HAL_GPIO_EXTI_Callback>
  }
}
 800af8a:	46c0      	nop			; (mov r8, r8)
 800af8c:	46bd      	mov	sp, r7
 800af8e:	b002      	add	sp, #8
 800af90:	bd80      	pop	{r7, pc}
 800af92:	46c0      	nop			; (mov r8, r8)
 800af94:	40010400 	.word	0x40010400

0800af98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800af98:	b5b0      	push	{r4, r5, r7, lr}
 800af9a:	b08a      	sub	sp, #40	; 0x28
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d102      	bne.n	800afac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800afa6:	2301      	movs	r3, #1
 800afa8:	f000 fbc2 	bl	800b730 <HAL_RCC_OscConfig+0x798>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800afac:	4bca      	ldr	r3, [pc, #808]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	220c      	movs	r2, #12
 800afb2:	4013      	ands	r3, r2
 800afb4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800afb6:	4bc8      	ldr	r3, [pc, #800]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800afb8:	68da      	ldr	r2, [r3, #12]
 800afba:	2380      	movs	r3, #128	; 0x80
 800afbc:	025b      	lsls	r3, r3, #9
 800afbe:	4013      	ands	r3, r2
 800afc0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	2201      	movs	r2, #1
 800afc8:	4013      	ands	r3, r2
 800afca:	d100      	bne.n	800afce <HAL_RCC_OscConfig+0x36>
 800afcc:	e07e      	b.n	800b0cc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800afce:	69fb      	ldr	r3, [r7, #28]
 800afd0:	2b08      	cmp	r3, #8
 800afd2:	d007      	beq.n	800afe4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800afd4:	69fb      	ldr	r3, [r7, #28]
 800afd6:	2b0c      	cmp	r3, #12
 800afd8:	d112      	bne.n	800b000 <HAL_RCC_OscConfig+0x68>
 800afda:	69ba      	ldr	r2, [r7, #24]
 800afdc:	2380      	movs	r3, #128	; 0x80
 800afde:	025b      	lsls	r3, r3, #9
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d10d      	bne.n	800b000 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800afe4:	4bbc      	ldr	r3, [pc, #752]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800afe6:	681a      	ldr	r2, [r3, #0]
 800afe8:	2380      	movs	r3, #128	; 0x80
 800afea:	029b      	lsls	r3, r3, #10
 800afec:	4013      	ands	r3, r2
 800afee:	d100      	bne.n	800aff2 <HAL_RCC_OscConfig+0x5a>
 800aff0:	e06b      	b.n	800b0ca <HAL_RCC_OscConfig+0x132>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d167      	bne.n	800b0ca <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800affa:	2301      	movs	r3, #1
 800affc:	f000 fb98 	bl	800b730 <HAL_RCC_OscConfig+0x798>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	685a      	ldr	r2, [r3, #4]
 800b004:	2380      	movs	r3, #128	; 0x80
 800b006:	025b      	lsls	r3, r3, #9
 800b008:	429a      	cmp	r2, r3
 800b00a:	d107      	bne.n	800b01c <HAL_RCC_OscConfig+0x84>
 800b00c:	4bb2      	ldr	r3, [pc, #712]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	4bb1      	ldr	r3, [pc, #708]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b012:	2180      	movs	r1, #128	; 0x80
 800b014:	0249      	lsls	r1, r1, #9
 800b016:	430a      	orrs	r2, r1
 800b018:	601a      	str	r2, [r3, #0]
 800b01a:	e027      	b.n	800b06c <HAL_RCC_OscConfig+0xd4>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	685a      	ldr	r2, [r3, #4]
 800b020:	23a0      	movs	r3, #160	; 0xa0
 800b022:	02db      	lsls	r3, r3, #11
 800b024:	429a      	cmp	r2, r3
 800b026:	d10e      	bne.n	800b046 <HAL_RCC_OscConfig+0xae>
 800b028:	4bab      	ldr	r3, [pc, #684]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	4baa      	ldr	r3, [pc, #680]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b02e:	2180      	movs	r1, #128	; 0x80
 800b030:	02c9      	lsls	r1, r1, #11
 800b032:	430a      	orrs	r2, r1
 800b034:	601a      	str	r2, [r3, #0]
 800b036:	4ba8      	ldr	r3, [pc, #672]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	4ba7      	ldr	r3, [pc, #668]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b03c:	2180      	movs	r1, #128	; 0x80
 800b03e:	0249      	lsls	r1, r1, #9
 800b040:	430a      	orrs	r2, r1
 800b042:	601a      	str	r2, [r3, #0]
 800b044:	e012      	b.n	800b06c <HAL_RCC_OscConfig+0xd4>
 800b046:	4ba4      	ldr	r3, [pc, #656]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	4ba3      	ldr	r3, [pc, #652]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b04c:	49a3      	ldr	r1, [pc, #652]	; (800b2dc <HAL_RCC_OscConfig+0x344>)
 800b04e:	400a      	ands	r2, r1
 800b050:	601a      	str	r2, [r3, #0]
 800b052:	4ba1      	ldr	r3, [pc, #644]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b054:	681a      	ldr	r2, [r3, #0]
 800b056:	2380      	movs	r3, #128	; 0x80
 800b058:	025b      	lsls	r3, r3, #9
 800b05a:	4013      	ands	r3, r2
 800b05c:	60fb      	str	r3, [r7, #12]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	4b9d      	ldr	r3, [pc, #628]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	4b9c      	ldr	r3, [pc, #624]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b066:	499e      	ldr	r1, [pc, #632]	; (800b2e0 <HAL_RCC_OscConfig+0x348>)
 800b068:	400a      	ands	r2, r1
 800b06a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d015      	beq.n	800b0a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b074:	f7fe ffdc 	bl	800a030 <HAL_GetTick>
 800b078:	0003      	movs	r3, r0
 800b07a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b07c:	e009      	b.n	800b092 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b07e:	f7fe ffd7 	bl	800a030 <HAL_GetTick>
 800b082:	0002      	movs	r2, r0
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	1ad3      	subs	r3, r2, r3
 800b088:	2b64      	cmp	r3, #100	; 0x64
 800b08a:	d902      	bls.n	800b092 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b08c:	2303      	movs	r3, #3
 800b08e:	f000 fb4f 	bl	800b730 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b092:	4b91      	ldr	r3, [pc, #580]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b094:	681a      	ldr	r2, [r3, #0]
 800b096:	2380      	movs	r3, #128	; 0x80
 800b098:	029b      	lsls	r3, r3, #10
 800b09a:	4013      	ands	r3, r2
 800b09c:	d0ef      	beq.n	800b07e <HAL_RCC_OscConfig+0xe6>
 800b09e:	e015      	b.n	800b0cc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b0a0:	f7fe ffc6 	bl	800a030 <HAL_GetTick>
 800b0a4:	0003      	movs	r3, r0
 800b0a6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b0a8:	e008      	b.n	800b0bc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b0aa:	f7fe ffc1 	bl	800a030 <HAL_GetTick>
 800b0ae:	0002      	movs	r2, r0
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	1ad3      	subs	r3, r2, r3
 800b0b4:	2b64      	cmp	r3, #100	; 0x64
 800b0b6:	d901      	bls.n	800b0bc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800b0b8:	2303      	movs	r3, #3
 800b0ba:	e339      	b.n	800b730 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b0bc:	4b86      	ldr	r3, [pc, #536]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b0be:	681a      	ldr	r2, [r3, #0]
 800b0c0:	2380      	movs	r3, #128	; 0x80
 800b0c2:	029b      	lsls	r3, r3, #10
 800b0c4:	4013      	ands	r3, r2
 800b0c6:	d1f0      	bne.n	800b0aa <HAL_RCC_OscConfig+0x112>
 800b0c8:	e000      	b.n	800b0cc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b0ca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2202      	movs	r2, #2
 800b0d2:	4013      	ands	r3, r2
 800b0d4:	d100      	bne.n	800b0d8 <HAL_RCC_OscConfig+0x140>
 800b0d6:	e09a      	b.n	800b20e <HAL_RCC_OscConfig+0x276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800b0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e0:	2220      	movs	r2, #32
 800b0e2:	4013      	ands	r3, r2
 800b0e4:	d009      	beq.n	800b0fa <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800b0e6:	4b7c      	ldr	r3, [pc, #496]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	4b7b      	ldr	r3, [pc, #492]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b0ec:	2120      	movs	r1, #32
 800b0ee:	430a      	orrs	r2, r1
 800b0f0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800b0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f4:	2220      	movs	r2, #32
 800b0f6:	4393      	bics	r3, r2
 800b0f8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	2b04      	cmp	r3, #4
 800b0fe:	d005      	beq.n	800b10c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800b100:	69fb      	ldr	r3, [r7, #28]
 800b102:	2b0c      	cmp	r3, #12
 800b104:	d13f      	bne.n	800b186 <HAL_RCC_OscConfig+0x1ee>
 800b106:	69bb      	ldr	r3, [r7, #24]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d13c      	bne.n	800b186 <HAL_RCC_OscConfig+0x1ee>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800b10c:	4b72      	ldr	r3, [pc, #456]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2204      	movs	r2, #4
 800b112:	4013      	ands	r3, r2
 800b114:	d004      	beq.n	800b120 <HAL_RCC_OscConfig+0x188>
 800b116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d101      	bne.n	800b120 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800b11c:	2301      	movs	r3, #1
 800b11e:	e307      	b.n	800b730 <HAL_RCC_OscConfig+0x798>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b120:	4b6d      	ldr	r3, [pc, #436]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	4a6f      	ldr	r2, [pc, #444]	; (800b2e4 <HAL_RCC_OscConfig+0x34c>)
 800b126:	4013      	ands	r3, r2
 800b128:	0019      	movs	r1, r3
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	691b      	ldr	r3, [r3, #16]
 800b12e:	021a      	lsls	r2, r3, #8
 800b130:	4b69      	ldr	r3, [pc, #420]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b132:	430a      	orrs	r2, r1
 800b134:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800b136:	4b68      	ldr	r3, [pc, #416]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	2209      	movs	r2, #9
 800b13c:	4393      	bics	r3, r2
 800b13e:	0019      	movs	r1, r3
 800b140:	4b65      	ldr	r3, [pc, #404]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b144:	430a      	orrs	r2, r1
 800b146:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b148:	f000 fc44 	bl	800b9d4 <HAL_RCC_GetSysClockFreq>
 800b14c:	0001      	movs	r1, r0
 800b14e:	4b62      	ldr	r3, [pc, #392]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b150:	68db      	ldr	r3, [r3, #12]
 800b152:	091b      	lsrs	r3, r3, #4
 800b154:	220f      	movs	r2, #15
 800b156:	4013      	ands	r3, r2
 800b158:	4a63      	ldr	r2, [pc, #396]	; (800b2e8 <HAL_RCC_OscConfig+0x350>)
 800b15a:	5cd3      	ldrb	r3, [r2, r3]
 800b15c:	000a      	movs	r2, r1
 800b15e:	40da      	lsrs	r2, r3
 800b160:	4b62      	ldr	r3, [pc, #392]	; (800b2ec <HAL_RCC_OscConfig+0x354>)
 800b162:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800b164:	4b62      	ldr	r3, [pc, #392]	; (800b2f0 <HAL_RCC_OscConfig+0x358>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	2513      	movs	r5, #19
 800b16a:	197c      	adds	r4, r7, r5
 800b16c:	0018      	movs	r0, r3
 800b16e:	f7fe ff19 	bl	8009fa4 <HAL_InitTick>
 800b172:	0003      	movs	r3, r0
 800b174:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800b176:	197b      	adds	r3, r7, r5
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d047      	beq.n	800b20e <HAL_RCC_OscConfig+0x276>
      {
        return status;
 800b17e:	2313      	movs	r3, #19
 800b180:	18fb      	adds	r3, r7, r3
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	e2d4      	b.n	800b730 <HAL_RCC_OscConfig+0x798>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800b186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d027      	beq.n	800b1dc <HAL_RCC_OscConfig+0x244>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800b18c:	4b52      	ldr	r3, [pc, #328]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2209      	movs	r2, #9
 800b192:	4393      	bics	r3, r2
 800b194:	0019      	movs	r1, r3
 800b196:	4b50      	ldr	r3, [pc, #320]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b19a:	430a      	orrs	r2, r1
 800b19c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b19e:	f7fe ff47 	bl	800a030 <HAL_GetTick>
 800b1a2:	0003      	movs	r3, r0
 800b1a4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b1a6:	e008      	b.n	800b1ba <HAL_RCC_OscConfig+0x222>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b1a8:	f7fe ff42 	bl	800a030 <HAL_GetTick>
 800b1ac:	0002      	movs	r2, r0
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	1ad3      	subs	r3, r2, r3
 800b1b2:	2b02      	cmp	r3, #2
 800b1b4:	d901      	bls.n	800b1ba <HAL_RCC_OscConfig+0x222>
          {
            return HAL_TIMEOUT;
 800b1b6:	2303      	movs	r3, #3
 800b1b8:	e2ba      	b.n	800b730 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b1ba:	4b47      	ldr	r3, [pc, #284]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2204      	movs	r2, #4
 800b1c0:	4013      	ands	r3, r2
 800b1c2:	d0f1      	beq.n	800b1a8 <HAL_RCC_OscConfig+0x210>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b1c4:	4b44      	ldr	r3, [pc, #272]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	4a46      	ldr	r2, [pc, #280]	; (800b2e4 <HAL_RCC_OscConfig+0x34c>)
 800b1ca:	4013      	ands	r3, r2
 800b1cc:	0019      	movs	r1, r3
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	691b      	ldr	r3, [r3, #16]
 800b1d2:	021a      	lsls	r2, r3, #8
 800b1d4:	4b40      	ldr	r3, [pc, #256]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b1d6:	430a      	orrs	r2, r1
 800b1d8:	605a      	str	r2, [r3, #4]
 800b1da:	e018      	b.n	800b20e <HAL_RCC_OscConfig+0x276>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b1dc:	4b3e      	ldr	r3, [pc, #248]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	4b3d      	ldr	r3, [pc, #244]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b1e2:	2101      	movs	r1, #1
 800b1e4:	438a      	bics	r2, r1
 800b1e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1e8:	f7fe ff22 	bl	800a030 <HAL_GetTick>
 800b1ec:	0003      	movs	r3, r0
 800b1ee:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b1f0:	e008      	b.n	800b204 <HAL_RCC_OscConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b1f2:	f7fe ff1d 	bl	800a030 <HAL_GetTick>
 800b1f6:	0002      	movs	r2, r0
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	1ad3      	subs	r3, r2, r3
 800b1fc:	2b02      	cmp	r3, #2
 800b1fe:	d901      	bls.n	800b204 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 800b200:	2303      	movs	r3, #3
 800b202:	e295      	b.n	800b730 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b204:	4b34      	ldr	r3, [pc, #208]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	2204      	movs	r2, #4
 800b20a:	4013      	ands	r3, r2
 800b20c:	d1f1      	bne.n	800b1f2 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	2210      	movs	r2, #16
 800b214:	4013      	ands	r3, r2
 800b216:	d100      	bne.n	800b21a <HAL_RCC_OscConfig+0x282>
 800b218:	e0a3      	b.n	800b362 <HAL_RCC_OscConfig+0x3ca>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b21a:	69fb      	ldr	r3, [r7, #28]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d141      	bne.n	800b2a4 <HAL_RCC_OscConfig+0x30c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b220:	4b2d      	ldr	r3, [pc, #180]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	2380      	movs	r3, #128	; 0x80
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	4013      	ands	r3, r2
 800b22a:	d005      	beq.n	800b238 <HAL_RCC_OscConfig+0x2a0>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	69db      	ldr	r3, [r3, #28]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d101      	bne.n	800b238 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800b234:	2301      	movs	r3, #1
 800b236:	e27b      	b.n	800b730 <HAL_RCC_OscConfig+0x798>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b238:	4b27      	ldr	r3, [pc, #156]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	4a2d      	ldr	r2, [pc, #180]	; (800b2f4 <HAL_RCC_OscConfig+0x35c>)
 800b23e:	4013      	ands	r3, r2
 800b240:	0019      	movs	r1, r3
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b246:	4b24      	ldr	r3, [pc, #144]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b248:	430a      	orrs	r2, r1
 800b24a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b24c:	4b22      	ldr	r3, [pc, #136]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	021b      	lsls	r3, r3, #8
 800b252:	0a19      	lsrs	r1, r3, #8
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6a1b      	ldr	r3, [r3, #32]
 800b258:	061a      	lsls	r2, r3, #24
 800b25a:	4b1f      	ldr	r3, [pc, #124]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b25c:	430a      	orrs	r2, r1
 800b25e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b264:	0b5b      	lsrs	r3, r3, #13
 800b266:	3301      	adds	r3, #1
 800b268:	2280      	movs	r2, #128	; 0x80
 800b26a:	0212      	lsls	r2, r2, #8
 800b26c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800b26e:	4b1a      	ldr	r3, [pc, #104]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	091b      	lsrs	r3, r3, #4
 800b274:	210f      	movs	r1, #15
 800b276:	400b      	ands	r3, r1
 800b278:	491b      	ldr	r1, [pc, #108]	; (800b2e8 <HAL_RCC_OscConfig+0x350>)
 800b27a:	5ccb      	ldrb	r3, [r1, r3]
 800b27c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800b27e:	4b1b      	ldr	r3, [pc, #108]	; (800b2ec <HAL_RCC_OscConfig+0x354>)
 800b280:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800b282:	4b1b      	ldr	r3, [pc, #108]	; (800b2f0 <HAL_RCC_OscConfig+0x358>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	2513      	movs	r5, #19
 800b288:	197c      	adds	r4, r7, r5
 800b28a:	0018      	movs	r0, r3
 800b28c:	f7fe fe8a 	bl	8009fa4 <HAL_InitTick>
 800b290:	0003      	movs	r3, r0
 800b292:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800b294:	197b      	adds	r3, r7, r5
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d062      	beq.n	800b362 <HAL_RCC_OscConfig+0x3ca>
        {
          return status;
 800b29c:	2313      	movs	r3, #19
 800b29e:	18fb      	adds	r3, r7, r3
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	e245      	b.n	800b730 <HAL_RCC_OscConfig+0x798>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	69db      	ldr	r3, [r3, #28]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d040      	beq.n	800b32e <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b2ac:	4b0a      	ldr	r3, [pc, #40]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	4b09      	ldr	r3, [pc, #36]	; (800b2d8 <HAL_RCC_OscConfig+0x340>)
 800b2b2:	2180      	movs	r1, #128	; 0x80
 800b2b4:	0049      	lsls	r1, r1, #1
 800b2b6:	430a      	orrs	r2, r1
 800b2b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2ba:	f7fe feb9 	bl	800a030 <HAL_GetTick>
 800b2be:	0003      	movs	r3, r0
 800b2c0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800b2c2:	e019      	b.n	800b2f8 <HAL_RCC_OscConfig+0x360>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b2c4:	f7fe feb4 	bl	800a030 <HAL_GetTick>
 800b2c8:	0002      	movs	r2, r0
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	1ad3      	subs	r3, r2, r3
 800b2ce:	2b02      	cmp	r3, #2
 800b2d0:	d912      	bls.n	800b2f8 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 800b2d2:	2303      	movs	r3, #3
 800b2d4:	e22c      	b.n	800b730 <HAL_RCC_OscConfig+0x798>
 800b2d6:	46c0      	nop			; (mov r8, r8)
 800b2d8:	40021000 	.word	0x40021000
 800b2dc:	fffeffff 	.word	0xfffeffff
 800b2e0:	fffbffff 	.word	0xfffbffff
 800b2e4:	ffffe0ff 	.word	0xffffe0ff
 800b2e8:	08012b38 	.word	0x08012b38
 800b2ec:	20000120 	.word	0x20000120
 800b2f0:	20000124 	.word	0x20000124
 800b2f4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800b2f8:	4bc6      	ldr	r3, [pc, #792]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	2380      	movs	r3, #128	; 0x80
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	4013      	ands	r3, r2
 800b302:	d0df      	beq.n	800b2c4 <HAL_RCC_OscConfig+0x32c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b304:	4bc3      	ldr	r3, [pc, #780]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	4ac3      	ldr	r2, [pc, #780]	; (800b618 <HAL_RCC_OscConfig+0x680>)
 800b30a:	4013      	ands	r3, r2
 800b30c:	0019      	movs	r1, r3
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b312:	4bc0      	ldr	r3, [pc, #768]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b314:	430a      	orrs	r2, r1
 800b316:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b318:	4bbe      	ldr	r3, [pc, #760]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	021b      	lsls	r3, r3, #8
 800b31e:	0a19      	lsrs	r1, r3, #8
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6a1b      	ldr	r3, [r3, #32]
 800b324:	061a      	lsls	r2, r3, #24
 800b326:	4bbb      	ldr	r3, [pc, #748]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b328:	430a      	orrs	r2, r1
 800b32a:	605a      	str	r2, [r3, #4]
 800b32c:	e019      	b.n	800b362 <HAL_RCC_OscConfig+0x3ca>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b32e:	4bb9      	ldr	r3, [pc, #740]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	4bb8      	ldr	r3, [pc, #736]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b334:	49b9      	ldr	r1, [pc, #740]	; (800b61c <HAL_RCC_OscConfig+0x684>)
 800b336:	400a      	ands	r2, r1
 800b338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b33a:	f7fe fe79 	bl	800a030 <HAL_GetTick>
 800b33e:	0003      	movs	r3, r0
 800b340:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800b342:	e008      	b.n	800b356 <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b344:	f7fe fe74 	bl	800a030 <HAL_GetTick>
 800b348:	0002      	movs	r2, r0
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	1ad3      	subs	r3, r2, r3
 800b34e:	2b02      	cmp	r3, #2
 800b350:	d901      	bls.n	800b356 <HAL_RCC_OscConfig+0x3be>
          {
            return HAL_TIMEOUT;
 800b352:	2303      	movs	r3, #3
 800b354:	e1ec      	b.n	800b730 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800b356:	4baf      	ldr	r3, [pc, #700]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b358:	681a      	ldr	r2, [r3, #0]
 800b35a:	2380      	movs	r3, #128	; 0x80
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	4013      	ands	r3, r2
 800b360:	d1f0      	bne.n	800b344 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	2208      	movs	r2, #8
 800b368:	4013      	ands	r3, r2
 800b36a:	d036      	beq.n	800b3da <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	695b      	ldr	r3, [r3, #20]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d019      	beq.n	800b3a8 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b374:	4ba7      	ldr	r3, [pc, #668]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b376:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b378:	4ba6      	ldr	r3, [pc, #664]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b37a:	2101      	movs	r1, #1
 800b37c:	430a      	orrs	r2, r1
 800b37e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b380:	f7fe fe56 	bl	800a030 <HAL_GetTick>
 800b384:	0003      	movs	r3, r0
 800b386:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b388:	e008      	b.n	800b39c <HAL_RCC_OscConfig+0x404>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b38a:	f7fe fe51 	bl	800a030 <HAL_GetTick>
 800b38e:	0002      	movs	r2, r0
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	1ad3      	subs	r3, r2, r3
 800b394:	2b02      	cmp	r3, #2
 800b396:	d901      	bls.n	800b39c <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 800b398:	2303      	movs	r3, #3
 800b39a:	e1c9      	b.n	800b730 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b39c:	4b9d      	ldr	r3, [pc, #628]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b39e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3a0:	2202      	movs	r2, #2
 800b3a2:	4013      	ands	r3, r2
 800b3a4:	d0f1      	beq.n	800b38a <HAL_RCC_OscConfig+0x3f2>
 800b3a6:	e018      	b.n	800b3da <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b3a8:	4b9a      	ldr	r3, [pc, #616]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b3aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b3ac:	4b99      	ldr	r3, [pc, #612]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b3ae:	2101      	movs	r1, #1
 800b3b0:	438a      	bics	r2, r1
 800b3b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b3b4:	f7fe fe3c 	bl	800a030 <HAL_GetTick>
 800b3b8:	0003      	movs	r3, r0
 800b3ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b3bc:	e008      	b.n	800b3d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b3be:	f7fe fe37 	bl	800a030 <HAL_GetTick>
 800b3c2:	0002      	movs	r2, r0
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	1ad3      	subs	r3, r2, r3
 800b3c8:	2b02      	cmp	r3, #2
 800b3ca:	d901      	bls.n	800b3d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800b3cc:	2303      	movs	r3, #3
 800b3ce:	e1af      	b.n	800b730 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b3d0:	4b90      	ldr	r3, [pc, #576]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b3d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3d4:	2202      	movs	r2, #2
 800b3d6:	4013      	ands	r3, r2
 800b3d8:	d1f1      	bne.n	800b3be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2204      	movs	r2, #4
 800b3e0:	4013      	ands	r3, r2
 800b3e2:	d100      	bne.n	800b3e6 <HAL_RCC_OscConfig+0x44e>
 800b3e4:	e0af      	b.n	800b546 <HAL_RCC_OscConfig+0x5ae>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b3e6:	2323      	movs	r3, #35	; 0x23
 800b3e8:	18fb      	adds	r3, r7, r3
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b3ee:	4b89      	ldr	r3, [pc, #548]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b3f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3f2:	2380      	movs	r3, #128	; 0x80
 800b3f4:	055b      	lsls	r3, r3, #21
 800b3f6:	4013      	ands	r3, r2
 800b3f8:	d10a      	bne.n	800b410 <HAL_RCC_OscConfig+0x478>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b3fa:	4b86      	ldr	r3, [pc, #536]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b3fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3fe:	4b85      	ldr	r3, [pc, #532]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b400:	2180      	movs	r1, #128	; 0x80
 800b402:	0549      	lsls	r1, r1, #21
 800b404:	430a      	orrs	r2, r1
 800b406:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800b408:	2323      	movs	r3, #35	; 0x23
 800b40a:	18fb      	adds	r3, r7, r3
 800b40c:	2201      	movs	r2, #1
 800b40e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b410:	4b83      	ldr	r3, [pc, #524]	; (800b620 <HAL_RCC_OscConfig+0x688>)
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	2380      	movs	r3, #128	; 0x80
 800b416:	005b      	lsls	r3, r3, #1
 800b418:	4013      	ands	r3, r2
 800b41a:	d11a      	bne.n	800b452 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b41c:	4b80      	ldr	r3, [pc, #512]	; (800b620 <HAL_RCC_OscConfig+0x688>)
 800b41e:	681a      	ldr	r2, [r3, #0]
 800b420:	4b7f      	ldr	r3, [pc, #508]	; (800b620 <HAL_RCC_OscConfig+0x688>)
 800b422:	2180      	movs	r1, #128	; 0x80
 800b424:	0049      	lsls	r1, r1, #1
 800b426:	430a      	orrs	r2, r1
 800b428:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b42a:	f7fe fe01 	bl	800a030 <HAL_GetTick>
 800b42e:	0003      	movs	r3, r0
 800b430:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b432:	e008      	b.n	800b446 <HAL_RCC_OscConfig+0x4ae>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b434:	f7fe fdfc 	bl	800a030 <HAL_GetTick>
 800b438:	0002      	movs	r2, r0
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	1ad3      	subs	r3, r2, r3
 800b43e:	2b64      	cmp	r3, #100	; 0x64
 800b440:	d901      	bls.n	800b446 <HAL_RCC_OscConfig+0x4ae>
        {
          return HAL_TIMEOUT;
 800b442:	2303      	movs	r3, #3
 800b444:	e174      	b.n	800b730 <HAL_RCC_OscConfig+0x798>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b446:	4b76      	ldr	r3, [pc, #472]	; (800b620 <HAL_RCC_OscConfig+0x688>)
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	2380      	movs	r3, #128	; 0x80
 800b44c:	005b      	lsls	r3, r3, #1
 800b44e:	4013      	ands	r3, r2
 800b450:	d0f0      	beq.n	800b434 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	689a      	ldr	r2, [r3, #8]
 800b456:	2380      	movs	r3, #128	; 0x80
 800b458:	005b      	lsls	r3, r3, #1
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d107      	bne.n	800b46e <HAL_RCC_OscConfig+0x4d6>
 800b45e:	4b6d      	ldr	r3, [pc, #436]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b460:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b462:	4b6c      	ldr	r3, [pc, #432]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b464:	2180      	movs	r1, #128	; 0x80
 800b466:	0049      	lsls	r1, r1, #1
 800b468:	430a      	orrs	r2, r1
 800b46a:	651a      	str	r2, [r3, #80]	; 0x50
 800b46c:	e031      	b.n	800b4d2 <HAL_RCC_OscConfig+0x53a>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	689b      	ldr	r3, [r3, #8]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d10c      	bne.n	800b490 <HAL_RCC_OscConfig+0x4f8>
 800b476:	4b67      	ldr	r3, [pc, #412]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b478:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b47a:	4b66      	ldr	r3, [pc, #408]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b47c:	4967      	ldr	r1, [pc, #412]	; (800b61c <HAL_RCC_OscConfig+0x684>)
 800b47e:	400a      	ands	r2, r1
 800b480:	651a      	str	r2, [r3, #80]	; 0x50
 800b482:	4b64      	ldr	r3, [pc, #400]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b484:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b486:	4b63      	ldr	r3, [pc, #396]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b488:	4966      	ldr	r1, [pc, #408]	; (800b624 <HAL_RCC_OscConfig+0x68c>)
 800b48a:	400a      	ands	r2, r1
 800b48c:	651a      	str	r2, [r3, #80]	; 0x50
 800b48e:	e020      	b.n	800b4d2 <HAL_RCC_OscConfig+0x53a>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	689a      	ldr	r2, [r3, #8]
 800b494:	23a0      	movs	r3, #160	; 0xa0
 800b496:	00db      	lsls	r3, r3, #3
 800b498:	429a      	cmp	r2, r3
 800b49a:	d10e      	bne.n	800b4ba <HAL_RCC_OscConfig+0x522>
 800b49c:	4b5d      	ldr	r3, [pc, #372]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b49e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b4a0:	4b5c      	ldr	r3, [pc, #368]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b4a2:	2180      	movs	r1, #128	; 0x80
 800b4a4:	00c9      	lsls	r1, r1, #3
 800b4a6:	430a      	orrs	r2, r1
 800b4a8:	651a      	str	r2, [r3, #80]	; 0x50
 800b4aa:	4b5a      	ldr	r3, [pc, #360]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b4ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b4ae:	4b59      	ldr	r3, [pc, #356]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b4b0:	2180      	movs	r1, #128	; 0x80
 800b4b2:	0049      	lsls	r1, r1, #1
 800b4b4:	430a      	orrs	r2, r1
 800b4b6:	651a      	str	r2, [r3, #80]	; 0x50
 800b4b8:	e00b      	b.n	800b4d2 <HAL_RCC_OscConfig+0x53a>
 800b4ba:	4b56      	ldr	r3, [pc, #344]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b4bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b4be:	4b55      	ldr	r3, [pc, #340]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b4c0:	4956      	ldr	r1, [pc, #344]	; (800b61c <HAL_RCC_OscConfig+0x684>)
 800b4c2:	400a      	ands	r2, r1
 800b4c4:	651a      	str	r2, [r3, #80]	; 0x50
 800b4c6:	4b53      	ldr	r3, [pc, #332]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b4c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b4ca:	4b52      	ldr	r3, [pc, #328]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b4cc:	4955      	ldr	r1, [pc, #340]	; (800b624 <HAL_RCC_OscConfig+0x68c>)
 800b4ce:	400a      	ands	r2, r1
 800b4d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	689b      	ldr	r3, [r3, #8]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d015      	beq.n	800b506 <HAL_RCC_OscConfig+0x56e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b4da:	f7fe fda9 	bl	800a030 <HAL_GetTick>
 800b4de:	0003      	movs	r3, r0
 800b4e0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b4e2:	e009      	b.n	800b4f8 <HAL_RCC_OscConfig+0x560>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b4e4:	f7fe fda4 	bl	800a030 <HAL_GetTick>
 800b4e8:	0002      	movs	r2, r0
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	1ad3      	subs	r3, r2, r3
 800b4ee:	4a4e      	ldr	r2, [pc, #312]	; (800b628 <HAL_RCC_OscConfig+0x690>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d901      	bls.n	800b4f8 <HAL_RCC_OscConfig+0x560>
        {
          return HAL_TIMEOUT;
 800b4f4:	2303      	movs	r3, #3
 800b4f6:	e11b      	b.n	800b730 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b4f8:	4b46      	ldr	r3, [pc, #280]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b4fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b4fc:	2380      	movs	r3, #128	; 0x80
 800b4fe:	009b      	lsls	r3, r3, #2
 800b500:	4013      	ands	r3, r2
 800b502:	d0ef      	beq.n	800b4e4 <HAL_RCC_OscConfig+0x54c>
 800b504:	e014      	b.n	800b530 <HAL_RCC_OscConfig+0x598>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b506:	f7fe fd93 	bl	800a030 <HAL_GetTick>
 800b50a:	0003      	movs	r3, r0
 800b50c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b50e:	e009      	b.n	800b524 <HAL_RCC_OscConfig+0x58c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b510:	f7fe fd8e 	bl	800a030 <HAL_GetTick>
 800b514:	0002      	movs	r2, r0
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	1ad3      	subs	r3, r2, r3
 800b51a:	4a43      	ldr	r2, [pc, #268]	; (800b628 <HAL_RCC_OscConfig+0x690>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d901      	bls.n	800b524 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 800b520:	2303      	movs	r3, #3
 800b522:	e105      	b.n	800b730 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b524:	4b3b      	ldr	r3, [pc, #236]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b526:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b528:	2380      	movs	r3, #128	; 0x80
 800b52a:	009b      	lsls	r3, r3, #2
 800b52c:	4013      	ands	r3, r2
 800b52e:	d1ef      	bne.n	800b510 <HAL_RCC_OscConfig+0x578>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800b530:	2323      	movs	r3, #35	; 0x23
 800b532:	18fb      	adds	r3, r7, r3
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	2b01      	cmp	r3, #1
 800b538:	d105      	bne.n	800b546 <HAL_RCC_OscConfig+0x5ae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b53a:	4b36      	ldr	r3, [pc, #216]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b53c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b53e:	4b35      	ldr	r3, [pc, #212]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b540:	493a      	ldr	r1, [pc, #232]	; (800b62c <HAL_RCC_OscConfig+0x694>)
 800b542:	400a      	ands	r2, r1
 800b544:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	2220      	movs	r2, #32
 800b54c:	4013      	ands	r3, r2
 800b54e:	d049      	beq.n	800b5e4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	699b      	ldr	r3, [r3, #24]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d026      	beq.n	800b5a6 <HAL_RCC_OscConfig+0x60e>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800b558:	4b2e      	ldr	r3, [pc, #184]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b55a:	689a      	ldr	r2, [r3, #8]
 800b55c:	4b2d      	ldr	r3, [pc, #180]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b55e:	2101      	movs	r1, #1
 800b560:	430a      	orrs	r2, r1
 800b562:	609a      	str	r2, [r3, #8]
 800b564:	4b2b      	ldr	r3, [pc, #172]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b568:	4b2a      	ldr	r3, [pc, #168]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b56a:	2101      	movs	r1, #1
 800b56c:	430a      	orrs	r2, r1
 800b56e:	635a      	str	r2, [r3, #52]	; 0x34
 800b570:	4b2f      	ldr	r3, [pc, #188]	; (800b630 <HAL_RCC_OscConfig+0x698>)
 800b572:	6a1a      	ldr	r2, [r3, #32]
 800b574:	4b2e      	ldr	r3, [pc, #184]	; (800b630 <HAL_RCC_OscConfig+0x698>)
 800b576:	2180      	movs	r1, #128	; 0x80
 800b578:	0189      	lsls	r1, r1, #6
 800b57a:	430a      	orrs	r2, r1
 800b57c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b57e:	f7fe fd57 	bl	800a030 <HAL_GetTick>
 800b582:	0003      	movs	r3, r0
 800b584:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b586:	e008      	b.n	800b59a <HAL_RCC_OscConfig+0x602>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b588:	f7fe fd52 	bl	800a030 <HAL_GetTick>
 800b58c:	0002      	movs	r2, r0
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	1ad3      	subs	r3, r2, r3
 800b592:	2b02      	cmp	r3, #2
 800b594:	d901      	bls.n	800b59a <HAL_RCC_OscConfig+0x602>
          {
            return HAL_TIMEOUT;
 800b596:	2303      	movs	r3, #3
 800b598:	e0ca      	b.n	800b730 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b59a:	4b1e      	ldr	r3, [pc, #120]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b59c:	689b      	ldr	r3, [r3, #8]
 800b59e:	2202      	movs	r2, #2
 800b5a0:	4013      	ands	r3, r2
 800b5a2:	d0f1      	beq.n	800b588 <HAL_RCC_OscConfig+0x5f0>
 800b5a4:	e01e      	b.n	800b5e4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800b5a6:	4b1b      	ldr	r3, [pc, #108]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b5a8:	689a      	ldr	r2, [r3, #8]
 800b5aa:	4b1a      	ldr	r3, [pc, #104]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b5ac:	2101      	movs	r1, #1
 800b5ae:	438a      	bics	r2, r1
 800b5b0:	609a      	str	r2, [r3, #8]
 800b5b2:	4b1f      	ldr	r3, [pc, #124]	; (800b630 <HAL_RCC_OscConfig+0x698>)
 800b5b4:	6a1a      	ldr	r2, [r3, #32]
 800b5b6:	4b1e      	ldr	r3, [pc, #120]	; (800b630 <HAL_RCC_OscConfig+0x698>)
 800b5b8:	491e      	ldr	r1, [pc, #120]	; (800b634 <HAL_RCC_OscConfig+0x69c>)
 800b5ba:	400a      	ands	r2, r1
 800b5bc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b5be:	f7fe fd37 	bl	800a030 <HAL_GetTick>
 800b5c2:	0003      	movs	r3, r0
 800b5c4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b5c6:	e008      	b.n	800b5da <HAL_RCC_OscConfig+0x642>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b5c8:	f7fe fd32 	bl	800a030 <HAL_GetTick>
 800b5cc:	0002      	movs	r2, r0
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	1ad3      	subs	r3, r2, r3
 800b5d2:	2b02      	cmp	r3, #2
 800b5d4:	d901      	bls.n	800b5da <HAL_RCC_OscConfig+0x642>
          {
            return HAL_TIMEOUT;
 800b5d6:	2303      	movs	r3, #3
 800b5d8:	e0aa      	b.n	800b730 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b5da:	4b0e      	ldr	r3, [pc, #56]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	2202      	movs	r2, #2
 800b5e0:	4013      	ands	r3, r2
 800b5e2:	d1f1      	bne.n	800b5c8 <HAL_RCC_OscConfig+0x630>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d100      	bne.n	800b5ee <HAL_RCC_OscConfig+0x656>
 800b5ec:	e09f      	b.n	800b72e <HAL_RCC_OscConfig+0x796>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b5ee:	69fb      	ldr	r3, [r7, #28]
 800b5f0:	2b0c      	cmp	r3, #12
 800b5f2:	d100      	bne.n	800b5f6 <HAL_RCC_OscConfig+0x65e>
 800b5f4:	e078      	b.n	800b6e8 <HAL_RCC_OscConfig+0x750>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5fa:	2b02      	cmp	r3, #2
 800b5fc:	d159      	bne.n	800b6b2 <HAL_RCC_OscConfig+0x71a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b5fe:	4b05      	ldr	r3, [pc, #20]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b600:	681a      	ldr	r2, [r3, #0]
 800b602:	4b04      	ldr	r3, [pc, #16]	; (800b614 <HAL_RCC_OscConfig+0x67c>)
 800b604:	490c      	ldr	r1, [pc, #48]	; (800b638 <HAL_RCC_OscConfig+0x6a0>)
 800b606:	400a      	ands	r2, r1
 800b608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b60a:	f7fe fd11 	bl	800a030 <HAL_GetTick>
 800b60e:	0003      	movs	r3, r0
 800b610:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800b612:	e01c      	b.n	800b64e <HAL_RCC_OscConfig+0x6b6>
 800b614:	40021000 	.word	0x40021000
 800b618:	ffff1fff 	.word	0xffff1fff
 800b61c:	fffffeff 	.word	0xfffffeff
 800b620:	40007000 	.word	0x40007000
 800b624:	fffffbff 	.word	0xfffffbff
 800b628:	00001388 	.word	0x00001388
 800b62c:	efffffff 	.word	0xefffffff
 800b630:	40010000 	.word	0x40010000
 800b634:	ffffdfff 	.word	0xffffdfff
 800b638:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b63c:	f7fe fcf8 	bl	800a030 <HAL_GetTick>
 800b640:	0002      	movs	r2, r0
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	1ad3      	subs	r3, r2, r3
 800b646:	2b02      	cmp	r3, #2
 800b648:	d901      	bls.n	800b64e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800b64a:	2303      	movs	r3, #3
 800b64c:	e070      	b.n	800b730 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800b64e:	4b3a      	ldr	r3, [pc, #232]	; (800b738 <HAL_RCC_OscConfig+0x7a0>)
 800b650:	681a      	ldr	r2, [r3, #0]
 800b652:	2380      	movs	r3, #128	; 0x80
 800b654:	049b      	lsls	r3, r3, #18
 800b656:	4013      	ands	r3, r2
 800b658:	d1f0      	bne.n	800b63c <HAL_RCC_OscConfig+0x6a4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b65a:	4b37      	ldr	r3, [pc, #220]	; (800b738 <HAL_RCC_OscConfig+0x7a0>)
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	4a37      	ldr	r2, [pc, #220]	; (800b73c <HAL_RCC_OscConfig+0x7a4>)
 800b660:	4013      	ands	r3, r2
 800b662:	0019      	movs	r1, r3
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b66c:	431a      	orrs	r2, r3
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b672:	431a      	orrs	r2, r3
 800b674:	4b30      	ldr	r3, [pc, #192]	; (800b738 <HAL_RCC_OscConfig+0x7a0>)
 800b676:	430a      	orrs	r2, r1
 800b678:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b67a:	4b2f      	ldr	r3, [pc, #188]	; (800b738 <HAL_RCC_OscConfig+0x7a0>)
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	4b2e      	ldr	r3, [pc, #184]	; (800b738 <HAL_RCC_OscConfig+0x7a0>)
 800b680:	2180      	movs	r1, #128	; 0x80
 800b682:	0449      	lsls	r1, r1, #17
 800b684:	430a      	orrs	r2, r1
 800b686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b688:	f7fe fcd2 	bl	800a030 <HAL_GetTick>
 800b68c:	0003      	movs	r3, r0
 800b68e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800b690:	e008      	b.n	800b6a4 <HAL_RCC_OscConfig+0x70c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b692:	f7fe fccd 	bl	800a030 <HAL_GetTick>
 800b696:	0002      	movs	r2, r0
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	1ad3      	subs	r3, r2, r3
 800b69c:	2b02      	cmp	r3, #2
 800b69e:	d901      	bls.n	800b6a4 <HAL_RCC_OscConfig+0x70c>
          {
            return HAL_TIMEOUT;
 800b6a0:	2303      	movs	r3, #3
 800b6a2:	e045      	b.n	800b730 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800b6a4:	4b24      	ldr	r3, [pc, #144]	; (800b738 <HAL_RCC_OscConfig+0x7a0>)
 800b6a6:	681a      	ldr	r2, [r3, #0]
 800b6a8:	2380      	movs	r3, #128	; 0x80
 800b6aa:	049b      	lsls	r3, r3, #18
 800b6ac:	4013      	ands	r3, r2
 800b6ae:	d0f0      	beq.n	800b692 <HAL_RCC_OscConfig+0x6fa>
 800b6b0:	e03d      	b.n	800b72e <HAL_RCC_OscConfig+0x796>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b6b2:	4b21      	ldr	r3, [pc, #132]	; (800b738 <HAL_RCC_OscConfig+0x7a0>)
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	4b20      	ldr	r3, [pc, #128]	; (800b738 <HAL_RCC_OscConfig+0x7a0>)
 800b6b8:	4921      	ldr	r1, [pc, #132]	; (800b740 <HAL_RCC_OscConfig+0x7a8>)
 800b6ba:	400a      	ands	r2, r1
 800b6bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b6be:	f7fe fcb7 	bl	800a030 <HAL_GetTick>
 800b6c2:	0003      	movs	r3, r0
 800b6c4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800b6c6:	e008      	b.n	800b6da <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b6c8:	f7fe fcb2 	bl	800a030 <HAL_GetTick>
 800b6cc:	0002      	movs	r2, r0
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	1ad3      	subs	r3, r2, r3
 800b6d2:	2b02      	cmp	r3, #2
 800b6d4:	d901      	bls.n	800b6da <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800b6d6:	2303      	movs	r3, #3
 800b6d8:	e02a      	b.n	800b730 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800b6da:	4b17      	ldr	r3, [pc, #92]	; (800b738 <HAL_RCC_OscConfig+0x7a0>)
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	2380      	movs	r3, #128	; 0x80
 800b6e0:	049b      	lsls	r3, r3, #18
 800b6e2:	4013      	ands	r3, r2
 800b6e4:	d1f0      	bne.n	800b6c8 <HAL_RCC_OscConfig+0x730>
 800b6e6:	e022      	b.n	800b72e <HAL_RCC_OscConfig+0x796>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d101      	bne.n	800b6f4 <HAL_RCC_OscConfig+0x75c>
      {
        return HAL_ERROR;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	e01d      	b.n	800b730 <HAL_RCC_OscConfig+0x798>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b6f4:	4b10      	ldr	r3, [pc, #64]	; (800b738 <HAL_RCC_OscConfig+0x7a0>)
 800b6f6:	68db      	ldr	r3, [r3, #12]
 800b6f8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b6fa:	69ba      	ldr	r2, [r7, #24]
 800b6fc:	2380      	movs	r3, #128	; 0x80
 800b6fe:	025b      	lsls	r3, r3, #9
 800b700:	401a      	ands	r2, r3
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b706:	429a      	cmp	r2, r3
 800b708:	d10f      	bne.n	800b72a <HAL_RCC_OscConfig+0x792>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800b70a:	69ba      	ldr	r2, [r7, #24]
 800b70c:	23f0      	movs	r3, #240	; 0xf0
 800b70e:	039b      	lsls	r3, r3, #14
 800b710:	401a      	ands	r2, r3
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b716:	429a      	cmp	r2, r3
 800b718:	d107      	bne.n	800b72a <HAL_RCC_OscConfig+0x792>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800b71a:	69ba      	ldr	r2, [r7, #24]
 800b71c:	23c0      	movs	r3, #192	; 0xc0
 800b71e:	041b      	lsls	r3, r3, #16
 800b720:	401a      	ands	r2, r3
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800b726:	429a      	cmp	r2, r3
 800b728:	d001      	beq.n	800b72e <HAL_RCC_OscConfig+0x796>
        {
          return HAL_ERROR;
 800b72a:	2301      	movs	r3, #1
 800b72c:	e000      	b.n	800b730 <HAL_RCC_OscConfig+0x798>
        }
      }
    }
  }
  return HAL_OK;
 800b72e:	2300      	movs	r3, #0
}
 800b730:	0018      	movs	r0, r3
 800b732:	46bd      	mov	sp, r7
 800b734:	b00a      	add	sp, #40	; 0x28
 800b736:	bdb0      	pop	{r4, r5, r7, pc}
 800b738:	40021000 	.word	0x40021000
 800b73c:	ff02ffff 	.word	0xff02ffff
 800b740:	feffffff 	.word	0xfeffffff

0800b744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b744:	b5b0      	push	{r4, r5, r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d101      	bne.n	800b758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b754:	2301      	movs	r3, #1
 800b756:	e129      	b.n	800b9ac <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b758:	4b96      	ldr	r3, [pc, #600]	; (800b9b4 <HAL_RCC_ClockConfig+0x270>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	2201      	movs	r2, #1
 800b75e:	4013      	ands	r3, r2
 800b760:	683a      	ldr	r2, [r7, #0]
 800b762:	429a      	cmp	r2, r3
 800b764:	d91e      	bls.n	800b7a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b766:	4b93      	ldr	r3, [pc, #588]	; (800b9b4 <HAL_RCC_ClockConfig+0x270>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	2201      	movs	r2, #1
 800b76c:	4393      	bics	r3, r2
 800b76e:	0019      	movs	r1, r3
 800b770:	4b90      	ldr	r3, [pc, #576]	; (800b9b4 <HAL_RCC_ClockConfig+0x270>)
 800b772:	683a      	ldr	r2, [r7, #0]
 800b774:	430a      	orrs	r2, r1
 800b776:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b778:	f7fe fc5a 	bl	800a030 <HAL_GetTick>
 800b77c:	0003      	movs	r3, r0
 800b77e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b780:	e009      	b.n	800b796 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b782:	f7fe fc55 	bl	800a030 <HAL_GetTick>
 800b786:	0002      	movs	r2, r0
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	1ad3      	subs	r3, r2, r3
 800b78c:	4a8a      	ldr	r2, [pc, #552]	; (800b9b8 <HAL_RCC_ClockConfig+0x274>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d901      	bls.n	800b796 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800b792:	2303      	movs	r3, #3
 800b794:	e10a      	b.n	800b9ac <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b796:	4b87      	ldr	r3, [pc, #540]	; (800b9b4 <HAL_RCC_ClockConfig+0x270>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2201      	movs	r2, #1
 800b79c:	4013      	ands	r3, r2
 800b79e:	683a      	ldr	r2, [r7, #0]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d1ee      	bne.n	800b782 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	2202      	movs	r2, #2
 800b7aa:	4013      	ands	r3, r2
 800b7ac:	d009      	beq.n	800b7c2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b7ae:	4b83      	ldr	r3, [pc, #524]	; (800b9bc <HAL_RCC_ClockConfig+0x278>)
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	22f0      	movs	r2, #240	; 0xf0
 800b7b4:	4393      	bics	r3, r2
 800b7b6:	0019      	movs	r1, r3
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	689a      	ldr	r2, [r3, #8]
 800b7bc:	4b7f      	ldr	r3, [pc, #508]	; (800b9bc <HAL_RCC_ClockConfig+0x278>)
 800b7be:	430a      	orrs	r2, r1
 800b7c0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	4013      	ands	r3, r2
 800b7ca:	d100      	bne.n	800b7ce <HAL_RCC_ClockConfig+0x8a>
 800b7cc:	e089      	b.n	800b8e2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	2b02      	cmp	r3, #2
 800b7d4:	d107      	bne.n	800b7e6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b7d6:	4b79      	ldr	r3, [pc, #484]	; (800b9bc <HAL_RCC_ClockConfig+0x278>)
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	2380      	movs	r3, #128	; 0x80
 800b7dc:	029b      	lsls	r3, r3, #10
 800b7de:	4013      	ands	r3, r2
 800b7e0:	d120      	bne.n	800b824 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e0e2      	b.n	800b9ac <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	2b03      	cmp	r3, #3
 800b7ec:	d107      	bne.n	800b7fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b7ee:	4b73      	ldr	r3, [pc, #460]	; (800b9bc <HAL_RCC_ClockConfig+0x278>)
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	2380      	movs	r3, #128	; 0x80
 800b7f4:	049b      	lsls	r3, r3, #18
 800b7f6:	4013      	ands	r3, r2
 800b7f8:	d114      	bne.n	800b824 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	e0d6      	b.n	800b9ac <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	2b01      	cmp	r3, #1
 800b804:	d106      	bne.n	800b814 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b806:	4b6d      	ldr	r3, [pc, #436]	; (800b9bc <HAL_RCC_ClockConfig+0x278>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2204      	movs	r2, #4
 800b80c:	4013      	ands	r3, r2
 800b80e:	d109      	bne.n	800b824 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800b810:	2301      	movs	r3, #1
 800b812:	e0cb      	b.n	800b9ac <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800b814:	4b69      	ldr	r3, [pc, #420]	; (800b9bc <HAL_RCC_ClockConfig+0x278>)
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	2380      	movs	r3, #128	; 0x80
 800b81a:	009b      	lsls	r3, r3, #2
 800b81c:	4013      	ands	r3, r2
 800b81e:	d101      	bne.n	800b824 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800b820:	2301      	movs	r3, #1
 800b822:	e0c3      	b.n	800b9ac <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b824:	4b65      	ldr	r3, [pc, #404]	; (800b9bc <HAL_RCC_ClockConfig+0x278>)
 800b826:	68db      	ldr	r3, [r3, #12]
 800b828:	2203      	movs	r2, #3
 800b82a:	4393      	bics	r3, r2
 800b82c:	0019      	movs	r1, r3
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	685a      	ldr	r2, [r3, #4]
 800b832:	4b62      	ldr	r3, [pc, #392]	; (800b9bc <HAL_RCC_ClockConfig+0x278>)
 800b834:	430a      	orrs	r2, r1
 800b836:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b838:	f7fe fbfa 	bl	800a030 <HAL_GetTick>
 800b83c:	0003      	movs	r3, r0
 800b83e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	2b02      	cmp	r3, #2
 800b846:	d111      	bne.n	800b86c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b848:	e009      	b.n	800b85e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b84a:	f7fe fbf1 	bl	800a030 <HAL_GetTick>
 800b84e:	0002      	movs	r2, r0
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	1ad3      	subs	r3, r2, r3
 800b854:	4a58      	ldr	r2, [pc, #352]	; (800b9b8 <HAL_RCC_ClockConfig+0x274>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d901      	bls.n	800b85e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800b85a:	2303      	movs	r3, #3
 800b85c:	e0a6      	b.n	800b9ac <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b85e:	4b57      	ldr	r3, [pc, #348]	; (800b9bc <HAL_RCC_ClockConfig+0x278>)
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	220c      	movs	r2, #12
 800b864:	4013      	ands	r3, r2
 800b866:	2b08      	cmp	r3, #8
 800b868:	d1ef      	bne.n	800b84a <HAL_RCC_ClockConfig+0x106>
 800b86a:	e03a      	b.n	800b8e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	2b03      	cmp	r3, #3
 800b872:	d111      	bne.n	800b898 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b874:	e009      	b.n	800b88a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b876:	f7fe fbdb 	bl	800a030 <HAL_GetTick>
 800b87a:	0002      	movs	r2, r0
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	1ad3      	subs	r3, r2, r3
 800b880:	4a4d      	ldr	r2, [pc, #308]	; (800b9b8 <HAL_RCC_ClockConfig+0x274>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d901      	bls.n	800b88a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800b886:	2303      	movs	r3, #3
 800b888:	e090      	b.n	800b9ac <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b88a:	4b4c      	ldr	r3, [pc, #304]	; (800b9bc <HAL_RCC_ClockConfig+0x278>)
 800b88c:	68db      	ldr	r3, [r3, #12]
 800b88e:	220c      	movs	r2, #12
 800b890:	4013      	ands	r3, r2
 800b892:	2b0c      	cmp	r3, #12
 800b894:	d1ef      	bne.n	800b876 <HAL_RCC_ClockConfig+0x132>
 800b896:	e024      	b.n	800b8e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d11b      	bne.n	800b8d8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800b8a0:	e009      	b.n	800b8b6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b8a2:	f7fe fbc5 	bl	800a030 <HAL_GetTick>
 800b8a6:	0002      	movs	r2, r0
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	1ad3      	subs	r3, r2, r3
 800b8ac:	4a42      	ldr	r2, [pc, #264]	; (800b9b8 <HAL_RCC_ClockConfig+0x274>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d901      	bls.n	800b8b6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800b8b2:	2303      	movs	r3, #3
 800b8b4:	e07a      	b.n	800b9ac <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800b8b6:	4b41      	ldr	r3, [pc, #260]	; (800b9bc <HAL_RCC_ClockConfig+0x278>)
 800b8b8:	68db      	ldr	r3, [r3, #12]
 800b8ba:	220c      	movs	r2, #12
 800b8bc:	4013      	ands	r3, r2
 800b8be:	2b04      	cmp	r3, #4
 800b8c0:	d1ef      	bne.n	800b8a2 <HAL_RCC_ClockConfig+0x15e>
 800b8c2:	e00e      	b.n	800b8e2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b8c4:	f7fe fbb4 	bl	800a030 <HAL_GetTick>
 800b8c8:	0002      	movs	r2, r0
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	1ad3      	subs	r3, r2, r3
 800b8ce:	4a3a      	ldr	r2, [pc, #232]	; (800b9b8 <HAL_RCC_ClockConfig+0x274>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d901      	bls.n	800b8d8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800b8d4:	2303      	movs	r3, #3
 800b8d6:	e069      	b.n	800b9ac <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800b8d8:	4b38      	ldr	r3, [pc, #224]	; (800b9bc <HAL_RCC_ClockConfig+0x278>)
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	220c      	movs	r2, #12
 800b8de:	4013      	ands	r3, r2
 800b8e0:	d1f0      	bne.n	800b8c4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b8e2:	4b34      	ldr	r3, [pc, #208]	; (800b9b4 <HAL_RCC_ClockConfig+0x270>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	4013      	ands	r3, r2
 800b8ea:	683a      	ldr	r2, [r7, #0]
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d21e      	bcs.n	800b92e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b8f0:	4b30      	ldr	r3, [pc, #192]	; (800b9b4 <HAL_RCC_ClockConfig+0x270>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	4393      	bics	r3, r2
 800b8f8:	0019      	movs	r1, r3
 800b8fa:	4b2e      	ldr	r3, [pc, #184]	; (800b9b4 <HAL_RCC_ClockConfig+0x270>)
 800b8fc:	683a      	ldr	r2, [r7, #0]
 800b8fe:	430a      	orrs	r2, r1
 800b900:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b902:	f7fe fb95 	bl	800a030 <HAL_GetTick>
 800b906:	0003      	movs	r3, r0
 800b908:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b90a:	e009      	b.n	800b920 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b90c:	f7fe fb90 	bl	800a030 <HAL_GetTick>
 800b910:	0002      	movs	r2, r0
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	1ad3      	subs	r3, r2, r3
 800b916:	4a28      	ldr	r2, [pc, #160]	; (800b9b8 <HAL_RCC_ClockConfig+0x274>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d901      	bls.n	800b920 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800b91c:	2303      	movs	r3, #3
 800b91e:	e045      	b.n	800b9ac <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b920:	4b24      	ldr	r3, [pc, #144]	; (800b9b4 <HAL_RCC_ClockConfig+0x270>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	2201      	movs	r2, #1
 800b926:	4013      	ands	r3, r2
 800b928:	683a      	ldr	r2, [r7, #0]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d1ee      	bne.n	800b90c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2204      	movs	r2, #4
 800b934:	4013      	ands	r3, r2
 800b936:	d009      	beq.n	800b94c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b938:	4b20      	ldr	r3, [pc, #128]	; (800b9bc <HAL_RCC_ClockConfig+0x278>)
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	4a20      	ldr	r2, [pc, #128]	; (800b9c0 <HAL_RCC_ClockConfig+0x27c>)
 800b93e:	4013      	ands	r3, r2
 800b940:	0019      	movs	r1, r3
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	68da      	ldr	r2, [r3, #12]
 800b946:	4b1d      	ldr	r3, [pc, #116]	; (800b9bc <HAL_RCC_ClockConfig+0x278>)
 800b948:	430a      	orrs	r2, r1
 800b94a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	2208      	movs	r2, #8
 800b952:	4013      	ands	r3, r2
 800b954:	d00a      	beq.n	800b96c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b956:	4b19      	ldr	r3, [pc, #100]	; (800b9bc <HAL_RCC_ClockConfig+0x278>)
 800b958:	68db      	ldr	r3, [r3, #12]
 800b95a:	4a1a      	ldr	r2, [pc, #104]	; (800b9c4 <HAL_RCC_ClockConfig+0x280>)
 800b95c:	4013      	ands	r3, r2
 800b95e:	0019      	movs	r1, r3
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	691b      	ldr	r3, [r3, #16]
 800b964:	00da      	lsls	r2, r3, #3
 800b966:	4b15      	ldr	r3, [pc, #84]	; (800b9bc <HAL_RCC_ClockConfig+0x278>)
 800b968:	430a      	orrs	r2, r1
 800b96a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b96c:	f000 f832 	bl	800b9d4 <HAL_RCC_GetSysClockFreq>
 800b970:	0001      	movs	r1, r0
 800b972:	4b12      	ldr	r3, [pc, #72]	; (800b9bc <HAL_RCC_ClockConfig+0x278>)
 800b974:	68db      	ldr	r3, [r3, #12]
 800b976:	091b      	lsrs	r3, r3, #4
 800b978:	220f      	movs	r2, #15
 800b97a:	4013      	ands	r3, r2
 800b97c:	4a12      	ldr	r2, [pc, #72]	; (800b9c8 <HAL_RCC_ClockConfig+0x284>)
 800b97e:	5cd3      	ldrb	r3, [r2, r3]
 800b980:	000a      	movs	r2, r1
 800b982:	40da      	lsrs	r2, r3
 800b984:	4b11      	ldr	r3, [pc, #68]	; (800b9cc <HAL_RCC_ClockConfig+0x288>)
 800b986:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b988:	4b11      	ldr	r3, [pc, #68]	; (800b9d0 <HAL_RCC_ClockConfig+0x28c>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	250b      	movs	r5, #11
 800b98e:	197c      	adds	r4, r7, r5
 800b990:	0018      	movs	r0, r3
 800b992:	f7fe fb07 	bl	8009fa4 <HAL_InitTick>
 800b996:	0003      	movs	r3, r0
 800b998:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800b99a:	197b      	adds	r3, r7, r5
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d003      	beq.n	800b9aa <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 800b9a2:	230b      	movs	r3, #11
 800b9a4:	18fb      	adds	r3, r7, r3
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	e000      	b.n	800b9ac <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 800b9aa:	2300      	movs	r3, #0
}
 800b9ac:	0018      	movs	r0, r3
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	b004      	add	sp, #16
 800b9b2:	bdb0      	pop	{r4, r5, r7, pc}
 800b9b4:	40022000 	.word	0x40022000
 800b9b8:	00001388 	.word	0x00001388
 800b9bc:	40021000 	.word	0x40021000
 800b9c0:	fffff8ff 	.word	0xfffff8ff
 800b9c4:	ffffc7ff 	.word	0xffffc7ff
 800b9c8:	08012b38 	.word	0x08012b38
 800b9cc:	20000120 	.word	0x20000120
 800b9d0:	20000124 	.word	0x20000124

0800b9d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9d6:	b08f      	sub	sp, #60	; 0x3c
 800b9d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800b9da:	4b4a      	ldr	r3, [pc, #296]	; (800bb04 <HAL_RCC_GetSysClockFreq+0x130>)
 800b9dc:	68db      	ldr	r3, [r3, #12]
 800b9de:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b9e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9e2:	230c      	movs	r3, #12
 800b9e4:	4013      	ands	r3, r2
 800b9e6:	2b08      	cmp	r3, #8
 800b9e8:	d00f      	beq.n	800ba0a <HAL_RCC_GetSysClockFreq+0x36>
 800b9ea:	2b0c      	cmp	r3, #12
 800b9ec:	d010      	beq.n	800ba10 <HAL_RCC_GetSysClockFreq+0x3c>
 800b9ee:	2b04      	cmp	r3, #4
 800b9f0:	d000      	beq.n	800b9f4 <HAL_RCC_GetSysClockFreq+0x20>
 800b9f2:	e073      	b.n	800badc <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800b9f4:	4b43      	ldr	r3, [pc, #268]	; (800bb04 <HAL_RCC_GetSysClockFreq+0x130>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2210      	movs	r2, #16
 800b9fa:	4013      	ands	r3, r2
 800b9fc:	d002      	beq.n	800ba04 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800b9fe:	4b42      	ldr	r3, [pc, #264]	; (800bb08 <HAL_RCC_GetSysClockFreq+0x134>)
 800ba00:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800ba02:	e079      	b.n	800baf8 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 800ba04:	4b41      	ldr	r3, [pc, #260]	; (800bb0c <HAL_RCC_GetSysClockFreq+0x138>)
 800ba06:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800ba08:	e076      	b.n	800baf8 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ba0a:	4b41      	ldr	r3, [pc, #260]	; (800bb10 <HAL_RCC_GetSysClockFreq+0x13c>)
 800ba0c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800ba0e:	e073      	b.n	800baf8 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800ba10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba12:	0c9a      	lsrs	r2, r3, #18
 800ba14:	230f      	movs	r3, #15
 800ba16:	401a      	ands	r2, r3
 800ba18:	4b3e      	ldr	r3, [pc, #248]	; (800bb14 <HAL_RCC_GetSysClockFreq+0x140>)
 800ba1a:	5c9b      	ldrb	r3, [r3, r2]
 800ba1c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800ba1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba20:	0d9a      	lsrs	r2, r3, #22
 800ba22:	2303      	movs	r3, #3
 800ba24:	4013      	ands	r3, r2
 800ba26:	3301      	adds	r3, #1
 800ba28:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ba2a:	4b36      	ldr	r3, [pc, #216]	; (800bb04 <HAL_RCC_GetSysClockFreq+0x130>)
 800ba2c:	68da      	ldr	r2, [r3, #12]
 800ba2e:	2380      	movs	r3, #128	; 0x80
 800ba30:	025b      	lsls	r3, r3, #9
 800ba32:	4013      	ands	r3, r2
 800ba34:	d019      	beq.n	800ba6a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800ba36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba38:	61bb      	str	r3, [r7, #24]
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	61fb      	str	r3, [r7, #28]
 800ba3e:	4a34      	ldr	r2, [pc, #208]	; (800bb10 <HAL_RCC_GetSysClockFreq+0x13c>)
 800ba40:	2300      	movs	r3, #0
 800ba42:	69b8      	ldr	r0, [r7, #24]
 800ba44:	69f9      	ldr	r1, [r7, #28]
 800ba46:	f7f9 fd49 	bl	80054dc <__aeabi_lmul>
 800ba4a:	0003      	movs	r3, r0
 800ba4c:	000c      	movs	r4, r1
 800ba4e:	0018      	movs	r0, r3
 800ba50:	0021      	movs	r1, r4
 800ba52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba54:	613b      	str	r3, [r7, #16]
 800ba56:	2300      	movs	r3, #0
 800ba58:	617b      	str	r3, [r7, #20]
 800ba5a:	693a      	ldr	r2, [r7, #16]
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	f7f9 fd1d 	bl	800549c <__aeabi_uldivmod>
 800ba62:	0003      	movs	r3, r0
 800ba64:	000c      	movs	r4, r1
 800ba66:	637b      	str	r3, [r7, #52]	; 0x34
 800ba68:	e035      	b.n	800bad6 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800ba6a:	4b26      	ldr	r3, [pc, #152]	; (800bb04 <HAL_RCC_GetSysClockFreq+0x130>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	2210      	movs	r2, #16
 800ba70:	4013      	ands	r3, r2
 800ba72:	d019      	beq.n	800baa8 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800ba74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba76:	60bb      	str	r3, [r7, #8]
 800ba78:	2300      	movs	r3, #0
 800ba7a:	60fb      	str	r3, [r7, #12]
 800ba7c:	4a22      	ldr	r2, [pc, #136]	; (800bb08 <HAL_RCC_GetSysClockFreq+0x134>)
 800ba7e:	2300      	movs	r3, #0
 800ba80:	68b8      	ldr	r0, [r7, #8]
 800ba82:	68f9      	ldr	r1, [r7, #12]
 800ba84:	f7f9 fd2a 	bl	80054dc <__aeabi_lmul>
 800ba88:	0003      	movs	r3, r0
 800ba8a:	000c      	movs	r4, r1
 800ba8c:	0018      	movs	r0, r3
 800ba8e:	0021      	movs	r1, r4
 800ba90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba92:	603b      	str	r3, [r7, #0]
 800ba94:	2300      	movs	r3, #0
 800ba96:	607b      	str	r3, [r7, #4]
 800ba98:	683a      	ldr	r2, [r7, #0]
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f7f9 fcfe 	bl	800549c <__aeabi_uldivmod>
 800baa0:	0003      	movs	r3, r0
 800baa2:	000c      	movs	r4, r1
 800baa4:	637b      	str	r3, [r7, #52]	; 0x34
 800baa6:	e016      	b.n	800bad6 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800baa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baaa:	0018      	movs	r0, r3
 800baac:	2300      	movs	r3, #0
 800baae:	0019      	movs	r1, r3
 800bab0:	4a16      	ldr	r2, [pc, #88]	; (800bb0c <HAL_RCC_GetSysClockFreq+0x138>)
 800bab2:	2300      	movs	r3, #0
 800bab4:	f7f9 fd12 	bl	80054dc <__aeabi_lmul>
 800bab8:	0003      	movs	r3, r0
 800baba:	000c      	movs	r4, r1
 800babc:	0018      	movs	r0, r3
 800babe:	0021      	movs	r1, r4
 800bac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac2:	001d      	movs	r5, r3
 800bac4:	2300      	movs	r3, #0
 800bac6:	001e      	movs	r6, r3
 800bac8:	002a      	movs	r2, r5
 800baca:	0033      	movs	r3, r6
 800bacc:	f7f9 fce6 	bl	800549c <__aeabi_uldivmod>
 800bad0:	0003      	movs	r3, r0
 800bad2:	000c      	movs	r4, r1
 800bad4:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800bad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bad8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800bada:	e00d      	b.n	800baf8 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800badc:	4b09      	ldr	r3, [pc, #36]	; (800bb04 <HAL_RCC_GetSysClockFreq+0x130>)
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	0b5b      	lsrs	r3, r3, #13
 800bae2:	2207      	movs	r2, #7
 800bae4:	4013      	ands	r3, r2
 800bae6:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800bae8:	6a3b      	ldr	r3, [r7, #32]
 800baea:	3301      	adds	r3, #1
 800baec:	2280      	movs	r2, #128	; 0x80
 800baee:	0212      	lsls	r2, r2, #8
 800baf0:	409a      	lsls	r2, r3
 800baf2:	0013      	movs	r3, r2
 800baf4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800baf6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800baf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800bafa:	0018      	movs	r0, r3
 800bafc:	46bd      	mov	sp, r7
 800bafe:	b00f      	add	sp, #60	; 0x3c
 800bb00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb02:	46c0      	nop			; (mov r8, r8)
 800bb04:	40021000 	.word	0x40021000
 800bb08:	003d0900 	.word	0x003d0900
 800bb0c:	00f42400 	.word	0x00f42400
 800bb10:	007a1200 	.word	0x007a1200
 800bb14:	08012b50 	.word	0x08012b50

0800bb18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bb1c:	4b02      	ldr	r3, [pc, #8]	; (800bb28 <HAL_RCC_GetHCLKFreq+0x10>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
}
 800bb20:	0018      	movs	r0, r3
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	46c0      	nop			; (mov r8, r8)
 800bb28:	20000120 	.word	0x20000120

0800bb2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bb30:	f7ff fff2 	bl	800bb18 <HAL_RCC_GetHCLKFreq>
 800bb34:	0001      	movs	r1, r0
 800bb36:	4b06      	ldr	r3, [pc, #24]	; (800bb50 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	0a1b      	lsrs	r3, r3, #8
 800bb3c:	2207      	movs	r2, #7
 800bb3e:	4013      	ands	r3, r2
 800bb40:	4a04      	ldr	r2, [pc, #16]	; (800bb54 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bb42:	5cd3      	ldrb	r3, [r2, r3]
 800bb44:	40d9      	lsrs	r1, r3
 800bb46:	000b      	movs	r3, r1
}
 800bb48:	0018      	movs	r0, r3
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	46c0      	nop			; (mov r8, r8)
 800bb50:	40021000 	.word	0x40021000
 800bb54:	08012b48 	.word	0x08012b48

0800bb58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bb5c:	f7ff ffdc 	bl	800bb18 <HAL_RCC_GetHCLKFreq>
 800bb60:	0001      	movs	r1, r0
 800bb62:	4b06      	ldr	r3, [pc, #24]	; (800bb7c <HAL_RCC_GetPCLK2Freq+0x24>)
 800bb64:	68db      	ldr	r3, [r3, #12]
 800bb66:	0adb      	lsrs	r3, r3, #11
 800bb68:	2207      	movs	r2, #7
 800bb6a:	4013      	ands	r3, r2
 800bb6c:	4a04      	ldr	r2, [pc, #16]	; (800bb80 <HAL_RCC_GetPCLK2Freq+0x28>)
 800bb6e:	5cd3      	ldrb	r3, [r2, r3]
 800bb70:	40d9      	lsrs	r1, r3
 800bb72:	000b      	movs	r3, r1
}
 800bb74:	0018      	movs	r0, r3
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	46c0      	nop			; (mov r8, r8)
 800bb7c:	40021000 	.word	0x40021000
 800bb80:	08012b48 	.word	0x08012b48

0800bb84 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b086      	sub	sp, #24
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800bb8c:	2317      	movs	r3, #23
 800bb8e:	18fb      	adds	r3, r7, r3
 800bb90:	2200      	movs	r2, #0
 800bb92:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	2220      	movs	r2, #32
 800bb9a:	4013      	ands	r3, r2
 800bb9c:	d106      	bne.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	2380      	movs	r3, #128	; 0x80
 800bba4:	011b      	lsls	r3, r3, #4
 800bba6:	4013      	ands	r3, r2
 800bba8:	d100      	bne.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0x28>
 800bbaa:	e0d9      	b.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bbac:	4ba4      	ldr	r3, [pc, #656]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bbae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbb0:	2380      	movs	r3, #128	; 0x80
 800bbb2:	055b      	lsls	r3, r3, #21
 800bbb4:	4013      	ands	r3, r2
 800bbb6:	d10a      	bne.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bbb8:	4ba1      	ldr	r3, [pc, #644]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bbba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbbc:	4ba0      	ldr	r3, [pc, #640]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bbbe:	2180      	movs	r1, #128	; 0x80
 800bbc0:	0549      	lsls	r1, r1, #21
 800bbc2:	430a      	orrs	r2, r1
 800bbc4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800bbc6:	2317      	movs	r3, #23
 800bbc8:	18fb      	adds	r3, r7, r3
 800bbca:	2201      	movs	r2, #1
 800bbcc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bbce:	4b9d      	ldr	r3, [pc, #628]	; (800be44 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	2380      	movs	r3, #128	; 0x80
 800bbd4:	005b      	lsls	r3, r3, #1
 800bbd6:	4013      	ands	r3, r2
 800bbd8:	d11a      	bne.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bbda:	4b9a      	ldr	r3, [pc, #616]	; (800be44 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800bbdc:	681a      	ldr	r2, [r3, #0]
 800bbde:	4b99      	ldr	r3, [pc, #612]	; (800be44 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800bbe0:	2180      	movs	r1, #128	; 0x80
 800bbe2:	0049      	lsls	r1, r1, #1
 800bbe4:	430a      	orrs	r2, r1
 800bbe6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bbe8:	f7fe fa22 	bl	800a030 <HAL_GetTick>
 800bbec:	0003      	movs	r3, r0
 800bbee:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bbf0:	e008      	b.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bbf2:	f7fe fa1d 	bl	800a030 <HAL_GetTick>
 800bbf6:	0002      	movs	r2, r0
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	1ad3      	subs	r3, r2, r3
 800bbfc:	2b64      	cmp	r3, #100	; 0x64
 800bbfe:	d901      	bls.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800bc00:	2303      	movs	r3, #3
 800bc02:	e118      	b.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc04:	4b8f      	ldr	r3, [pc, #572]	; (800be44 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	2380      	movs	r3, #128	; 0x80
 800bc0a:	005b      	lsls	r3, r3, #1
 800bc0c:	4013      	ands	r3, r2
 800bc0e:	d0f0      	beq.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800bc10:	4b8b      	ldr	r3, [pc, #556]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	23c0      	movs	r3, #192	; 0xc0
 800bc16:	039b      	lsls	r3, r3, #14
 800bc18:	4013      	ands	r3, r2
 800bc1a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	685a      	ldr	r2, [r3, #4]
 800bc20:	23c0      	movs	r3, #192	; 0xc0
 800bc22:	039b      	lsls	r3, r3, #14
 800bc24:	4013      	ands	r3, r2
 800bc26:	68fa      	ldr	r2, [r7, #12]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d107      	bne.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	689a      	ldr	r2, [r3, #8]
 800bc30:	23c0      	movs	r3, #192	; 0xc0
 800bc32:	039b      	lsls	r3, r3, #14
 800bc34:	4013      	ands	r3, r2
 800bc36:	68fa      	ldr	r2, [r7, #12]
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d013      	beq.n	800bc64 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	685a      	ldr	r2, [r3, #4]
 800bc40:	23c0      	movs	r3, #192	; 0xc0
 800bc42:	029b      	lsls	r3, r3, #10
 800bc44:	401a      	ands	r2, r3
 800bc46:	23c0      	movs	r3, #192	; 0xc0
 800bc48:	029b      	lsls	r3, r3, #10
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d10a      	bne.n	800bc64 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bc4e:	4b7c      	ldr	r3, [pc, #496]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	2380      	movs	r3, #128	; 0x80
 800bc54:	029b      	lsls	r3, r3, #10
 800bc56:	401a      	ands	r2, r3
 800bc58:	2380      	movs	r3, #128	; 0x80
 800bc5a:	029b      	lsls	r3, r3, #10
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d101      	bne.n	800bc64 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	e0e8      	b.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800bc64:	4b76      	ldr	r3, [pc, #472]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bc66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc68:	23c0      	movs	r3, #192	; 0xc0
 800bc6a:	029b      	lsls	r3, r3, #10
 800bc6c:	4013      	ands	r3, r2
 800bc6e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d049      	beq.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	685a      	ldr	r2, [r3, #4]
 800bc7a:	23c0      	movs	r3, #192	; 0xc0
 800bc7c:	029b      	lsls	r3, r3, #10
 800bc7e:	4013      	ands	r3, r2
 800bc80:	68fa      	ldr	r2, [r7, #12]
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d004      	beq.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	2220      	movs	r2, #32
 800bc8c:	4013      	ands	r3, r2
 800bc8e:	d10d      	bne.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	689a      	ldr	r2, [r3, #8]
 800bc94:	23c0      	movs	r3, #192	; 0xc0
 800bc96:	029b      	lsls	r3, r3, #10
 800bc98:	4013      	ands	r3, r2
 800bc9a:	68fa      	ldr	r2, [r7, #12]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d034      	beq.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	2380      	movs	r3, #128	; 0x80
 800bca6:	011b      	lsls	r3, r3, #4
 800bca8:	4013      	ands	r3, r2
 800bcaa:	d02e      	beq.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800bcac:	4b64      	ldr	r3, [pc, #400]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bcae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcb0:	4a65      	ldr	r2, [pc, #404]	; (800be48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800bcb2:	4013      	ands	r3, r2
 800bcb4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800bcb6:	4b62      	ldr	r3, [pc, #392]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bcb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bcba:	4b61      	ldr	r3, [pc, #388]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bcbc:	2180      	movs	r1, #128	; 0x80
 800bcbe:	0309      	lsls	r1, r1, #12
 800bcc0:	430a      	orrs	r2, r1
 800bcc2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800bcc4:	4b5e      	ldr	r3, [pc, #376]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bcc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bcc8:	4b5d      	ldr	r3, [pc, #372]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bcca:	4960      	ldr	r1, [pc, #384]	; (800be4c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800bccc:	400a      	ands	r2, r1
 800bcce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800bcd0:	4b5b      	ldr	r3, [pc, #364]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bcd2:	68fa      	ldr	r2, [r7, #12]
 800bcd4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	2380      	movs	r3, #128	; 0x80
 800bcda:	005b      	lsls	r3, r3, #1
 800bcdc:	4013      	ands	r3, r2
 800bcde:	d014      	beq.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bce0:	f7fe f9a6 	bl	800a030 <HAL_GetTick>
 800bce4:	0003      	movs	r3, r0
 800bce6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bce8:	e009      	b.n	800bcfe <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bcea:	f7fe f9a1 	bl	800a030 <HAL_GetTick>
 800bcee:	0002      	movs	r2, r0
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	1ad3      	subs	r3, r2, r3
 800bcf4:	4a56      	ldr	r2, [pc, #344]	; (800be50 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d901      	bls.n	800bcfe <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800bcfa:	2303      	movs	r3, #3
 800bcfc:	e09b      	b.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bcfe:	4b50      	ldr	r3, [pc, #320]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bd00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bd02:	2380      	movs	r3, #128	; 0x80
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	4013      	ands	r3, r2
 800bd08:	d0ef      	beq.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	685a      	ldr	r2, [r3, #4]
 800bd0e:	23c0      	movs	r3, #192	; 0xc0
 800bd10:	029b      	lsls	r3, r3, #10
 800bd12:	401a      	ands	r2, r3
 800bd14:	23c0      	movs	r3, #192	; 0xc0
 800bd16:	029b      	lsls	r3, r3, #10
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d10c      	bne.n	800bd36 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800bd1c:	4b48      	ldr	r3, [pc, #288]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4a4c      	ldr	r2, [pc, #304]	; (800be54 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800bd22:	4013      	ands	r3, r2
 800bd24:	0019      	movs	r1, r3
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	685a      	ldr	r2, [r3, #4]
 800bd2a:	23c0      	movs	r3, #192	; 0xc0
 800bd2c:	039b      	lsls	r3, r3, #14
 800bd2e:	401a      	ands	r2, r3
 800bd30:	4b43      	ldr	r3, [pc, #268]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bd32:	430a      	orrs	r2, r1
 800bd34:	601a      	str	r2, [r3, #0]
 800bd36:	4b42      	ldr	r3, [pc, #264]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bd38:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	685a      	ldr	r2, [r3, #4]
 800bd3e:	23c0      	movs	r3, #192	; 0xc0
 800bd40:	029b      	lsls	r3, r3, #10
 800bd42:	401a      	ands	r2, r3
 800bd44:	4b3e      	ldr	r3, [pc, #248]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bd46:	430a      	orrs	r2, r1
 800bd48:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800bd4a:	2317      	movs	r3, #23
 800bd4c:	18fb      	adds	r3, r7, r3
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d105      	bne.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd54:	4b3a      	ldr	r3, [pc, #232]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bd56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd58:	4b39      	ldr	r3, [pc, #228]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bd5a:	493f      	ldr	r1, [pc, #252]	; (800be58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bd5c:	400a      	ands	r2, r1
 800bd5e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	2201      	movs	r2, #1
 800bd66:	4013      	ands	r3, r2
 800bd68:	d009      	beq.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bd6a:	4b35      	ldr	r3, [pc, #212]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bd6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd6e:	2203      	movs	r2, #3
 800bd70:	4393      	bics	r3, r2
 800bd72:	0019      	movs	r1, r3
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	68da      	ldr	r2, [r3, #12]
 800bd78:	4b31      	ldr	r3, [pc, #196]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bd7a:	430a      	orrs	r2, r1
 800bd7c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	2202      	movs	r2, #2
 800bd84:	4013      	ands	r3, r2
 800bd86:	d009      	beq.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bd88:	4b2d      	ldr	r3, [pc, #180]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bd8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd8c:	220c      	movs	r2, #12
 800bd8e:	4393      	bics	r3, r2
 800bd90:	0019      	movs	r1, r3
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	691a      	ldr	r2, [r3, #16]
 800bd96:	4b2a      	ldr	r3, [pc, #168]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bd98:	430a      	orrs	r2, r1
 800bd9a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	2204      	movs	r2, #4
 800bda2:	4013      	ands	r3, r2
 800bda4:	d009      	beq.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bda6:	4b26      	ldr	r3, [pc, #152]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bda8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdaa:	4a2c      	ldr	r2, [pc, #176]	; (800be5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800bdac:	4013      	ands	r3, r2
 800bdae:	0019      	movs	r1, r3
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	695a      	ldr	r2, [r3, #20]
 800bdb4:	4b22      	ldr	r3, [pc, #136]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bdb6:	430a      	orrs	r2, r1
 800bdb8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2208      	movs	r2, #8
 800bdc0:	4013      	ands	r3, r2
 800bdc2:	d009      	beq.n	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bdc4:	4b1e      	ldr	r3, [pc, #120]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bdc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdc8:	4a25      	ldr	r2, [pc, #148]	; (800be60 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800bdca:	4013      	ands	r3, r2
 800bdcc:	0019      	movs	r1, r3
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	699a      	ldr	r2, [r3, #24]
 800bdd2:	4b1b      	ldr	r3, [pc, #108]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bdd4:	430a      	orrs	r2, r1
 800bdd6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681a      	ldr	r2, [r3, #0]
 800bddc:	2380      	movs	r3, #128	; 0x80
 800bdde:	005b      	lsls	r3, r3, #1
 800bde0:	4013      	ands	r3, r2
 800bde2:	d009      	beq.n	800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bde4:	4b16      	ldr	r3, [pc, #88]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bde6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bde8:	4a17      	ldr	r2, [pc, #92]	; (800be48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800bdea:	4013      	ands	r3, r2
 800bdec:	0019      	movs	r1, r3
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	69da      	ldr	r2, [r3, #28]
 800bdf2:	4b13      	ldr	r3, [pc, #76]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800bdf4:	430a      	orrs	r2, r1
 800bdf6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2240      	movs	r2, #64	; 0x40
 800bdfe:	4013      	ands	r3, r2
 800be00:	d009      	beq.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800be02:	4b0f      	ldr	r3, [pc, #60]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800be04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be06:	4a17      	ldr	r2, [pc, #92]	; (800be64 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800be08:	4013      	ands	r3, r2
 800be0a:	0019      	movs	r1, r3
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be10:	4b0b      	ldr	r3, [pc, #44]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800be12:	430a      	orrs	r2, r1
 800be14:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	2280      	movs	r2, #128	; 0x80
 800be1c:	4013      	ands	r3, r2
 800be1e:	d009      	beq.n	800be34 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800be20:	4b07      	ldr	r3, [pc, #28]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800be22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be24:	4a10      	ldr	r2, [pc, #64]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800be26:	4013      	ands	r3, r2
 800be28:	0019      	movs	r1, r3
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6a1a      	ldr	r2, [r3, #32]
 800be2e:	4b04      	ldr	r3, [pc, #16]	; (800be40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800be30:	430a      	orrs	r2, r1
 800be32:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800be34:	2300      	movs	r3, #0
}
 800be36:	0018      	movs	r0, r3
 800be38:	46bd      	mov	sp, r7
 800be3a:	b006      	add	sp, #24
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	46c0      	nop			; (mov r8, r8)
 800be40:	40021000 	.word	0x40021000
 800be44:	40007000 	.word	0x40007000
 800be48:	fffcffff 	.word	0xfffcffff
 800be4c:	fff7ffff 	.word	0xfff7ffff
 800be50:	00001388 	.word	0x00001388
 800be54:	ffcfffff 	.word	0xffcfffff
 800be58:	efffffff 	.word	0xefffffff
 800be5c:	fffff3ff 	.word	0xfffff3ff
 800be60:	ffffcfff 	.word	0xffffcfff
 800be64:	fbffffff 	.word	0xfbffffff
 800be68:	fff3ffff 	.word	0xfff3ffff

0800be6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d101      	bne.n	800be7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800be7a:	2301      	movs	r3, #1
 800be7c:	e083      	b.n	800bf86 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be82:	2b00      	cmp	r3, #0
 800be84:	d109      	bne.n	800be9a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	685a      	ldr	r2, [r3, #4]
 800be8a:	2382      	movs	r3, #130	; 0x82
 800be8c:	005b      	lsls	r3, r3, #1
 800be8e:	429a      	cmp	r2, r3
 800be90:	d009      	beq.n	800bea6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2200      	movs	r2, #0
 800be96:	61da      	str	r2, [r3, #28]
 800be98:	e005      	b.n	800bea6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2200      	movs	r2, #0
 800be9e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2200      	movs	r2, #0
 800bea4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2200      	movs	r2, #0
 800beaa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2251      	movs	r2, #81	; 0x51
 800beb0:	5c9b      	ldrb	r3, [r3, r2]
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d107      	bne.n	800bec8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2250      	movs	r2, #80	; 0x50
 800bebc:	2100      	movs	r1, #0
 800bebe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	0018      	movs	r0, r3
 800bec4:	f7fd fdb8 	bl	8009a38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2251      	movs	r2, #81	; 0x51
 800becc:	2102      	movs	r1, #2
 800bece:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	2140      	movs	r1, #64	; 0x40
 800bedc:	438a      	bics	r2, r1
 800bede:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	685a      	ldr	r2, [r3, #4]
 800bee4:	2382      	movs	r3, #130	; 0x82
 800bee6:	005b      	lsls	r3, r3, #1
 800bee8:	401a      	ands	r2, r3
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6899      	ldr	r1, [r3, #8]
 800beee:	2384      	movs	r3, #132	; 0x84
 800bef0:	021b      	lsls	r3, r3, #8
 800bef2:	400b      	ands	r3, r1
 800bef4:	431a      	orrs	r2, r3
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	68d9      	ldr	r1, [r3, #12]
 800befa:	2380      	movs	r3, #128	; 0x80
 800befc:	011b      	lsls	r3, r3, #4
 800befe:	400b      	ands	r3, r1
 800bf00:	431a      	orrs	r2, r3
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	691b      	ldr	r3, [r3, #16]
 800bf06:	2102      	movs	r1, #2
 800bf08:	400b      	ands	r3, r1
 800bf0a:	431a      	orrs	r2, r3
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	695b      	ldr	r3, [r3, #20]
 800bf10:	2101      	movs	r1, #1
 800bf12:	400b      	ands	r3, r1
 800bf14:	431a      	orrs	r2, r3
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6999      	ldr	r1, [r3, #24]
 800bf1a:	2380      	movs	r3, #128	; 0x80
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	400b      	ands	r3, r1
 800bf20:	431a      	orrs	r2, r3
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	69db      	ldr	r3, [r3, #28]
 800bf26:	2138      	movs	r1, #56	; 0x38
 800bf28:	400b      	ands	r3, r1
 800bf2a:	431a      	orrs	r2, r3
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6a1b      	ldr	r3, [r3, #32]
 800bf30:	2180      	movs	r1, #128	; 0x80
 800bf32:	400b      	ands	r3, r1
 800bf34:	431a      	orrs	r2, r3
 800bf36:	0011      	movs	r1, r2
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf3c:	2380      	movs	r3, #128	; 0x80
 800bf3e:	019b      	lsls	r3, r3, #6
 800bf40:	401a      	ands	r2, r3
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	430a      	orrs	r2, r1
 800bf48:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	699b      	ldr	r3, [r3, #24]
 800bf4e:	0c1b      	lsrs	r3, r3, #16
 800bf50:	2204      	movs	r2, #4
 800bf52:	4013      	ands	r3, r2
 800bf54:	0019      	movs	r1, r3
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf5a:	2210      	movs	r2, #16
 800bf5c:	401a      	ands	r2, r3
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	430a      	orrs	r2, r1
 800bf64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	69da      	ldr	r2, [r3, #28]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4907      	ldr	r1, [pc, #28]	; (800bf90 <HAL_SPI_Init+0x124>)
 800bf72:	400a      	ands	r2, r1
 800bf74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2251      	movs	r2, #81	; 0x51
 800bf80:	2101      	movs	r1, #1
 800bf82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bf84:	2300      	movs	r3, #0
}
 800bf86:	0018      	movs	r0, r3
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	b002      	add	sp, #8
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	46c0      	nop			; (mov r8, r8)
 800bf90:	fffff7ff 	.word	0xfffff7ff

0800bf94 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b088      	sub	sp, #32
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	603b      	str	r3, [r7, #0]
 800bfa0:	1dbb      	adds	r3, r7, #6
 800bfa2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bfa4:	231f      	movs	r3, #31
 800bfa6:	18fb      	adds	r3, r7, r3
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2250      	movs	r2, #80	; 0x50
 800bfb0:	5c9b      	ldrb	r3, [r3, r2]
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	d101      	bne.n	800bfba <HAL_SPI_Transmit+0x26>
 800bfb6:	2302      	movs	r3, #2
 800bfb8:	e13e      	b.n	800c238 <HAL_SPI_Transmit+0x2a4>
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	2250      	movs	r2, #80	; 0x50
 800bfbe:	2101      	movs	r1, #1
 800bfc0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bfc2:	f7fe f835 	bl	800a030 <HAL_GetTick>
 800bfc6:	0003      	movs	r3, r0
 800bfc8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800bfca:	2316      	movs	r3, #22
 800bfcc:	18fb      	adds	r3, r7, r3
 800bfce:	1dba      	adds	r2, r7, #6
 800bfd0:	8812      	ldrh	r2, [r2, #0]
 800bfd2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2251      	movs	r2, #81	; 0x51
 800bfd8:	5c9b      	ldrb	r3, [r3, r2]
 800bfda:	b2db      	uxtb	r3, r3
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d004      	beq.n	800bfea <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800bfe0:	231f      	movs	r3, #31
 800bfe2:	18fb      	adds	r3, r7, r3
 800bfe4:	2202      	movs	r2, #2
 800bfe6:	701a      	strb	r2, [r3, #0]
    goto error;
 800bfe8:	e11b      	b.n	800c222 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d003      	beq.n	800bff8 <HAL_SPI_Transmit+0x64>
 800bff0:	1dbb      	adds	r3, r7, #6
 800bff2:	881b      	ldrh	r3, [r3, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d104      	bne.n	800c002 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800bff8:	231f      	movs	r3, #31
 800bffa:	18fb      	adds	r3, r7, r3
 800bffc:	2201      	movs	r2, #1
 800bffe:	701a      	strb	r2, [r3, #0]
    goto error;
 800c000:	e10f      	b.n	800c222 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2251      	movs	r2, #81	; 0x51
 800c006:	2103      	movs	r1, #3
 800c008:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	2200      	movs	r2, #0
 800c00e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	68ba      	ldr	r2, [r7, #8]
 800c014:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	1dba      	adds	r2, r7, #6
 800c01a:	8812      	ldrh	r2, [r2, #0]
 800c01c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	1dba      	adds	r2, r7, #6
 800c022:	8812      	ldrh	r2, [r2, #0]
 800c024:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2200      	movs	r2, #0
 800c02a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2200      	movs	r2, #0
 800c030:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2200      	movs	r2, #0
 800c036:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	2200      	movs	r2, #0
 800c03c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	2200      	movs	r2, #0
 800c042:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	689a      	ldr	r2, [r3, #8]
 800c048:	2380      	movs	r3, #128	; 0x80
 800c04a:	021b      	lsls	r3, r3, #8
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d110      	bne.n	800c072 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2140      	movs	r1, #64	; 0x40
 800c05c:	438a      	bics	r2, r1
 800c05e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	681a      	ldr	r2, [r3, #0]
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	2180      	movs	r1, #128	; 0x80
 800c06c:	01c9      	lsls	r1, r1, #7
 800c06e:	430a      	orrs	r2, r1
 800c070:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	2240      	movs	r2, #64	; 0x40
 800c07a:	4013      	ands	r3, r2
 800c07c:	2b40      	cmp	r3, #64	; 0x40
 800c07e:	d007      	beq.n	800c090 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	681a      	ldr	r2, [r3, #0]
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2140      	movs	r1, #64	; 0x40
 800c08c:	430a      	orrs	r2, r1
 800c08e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	68da      	ldr	r2, [r3, #12]
 800c094:	2380      	movs	r3, #128	; 0x80
 800c096:	011b      	lsls	r3, r3, #4
 800c098:	429a      	cmp	r2, r3
 800c09a:	d14e      	bne.n	800c13a <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d004      	beq.n	800c0ae <HAL_SPI_Transmit+0x11a>
 800c0a4:	2316      	movs	r3, #22
 800c0a6:	18fb      	adds	r3, r7, r3
 800c0a8:	881b      	ldrh	r3, [r3, #0]
 800c0aa:	2b01      	cmp	r3, #1
 800c0ac:	d13f      	bne.n	800c12e <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0b2:	881a      	ldrh	r2, [r3, #0]
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0be:	1c9a      	adds	r2, r3, #2
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0c8:	b29b      	uxth	r3, r3
 800c0ca:	3b01      	subs	r3, #1
 800c0cc:	b29a      	uxth	r2, r3
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c0d2:	e02c      	b.n	800c12e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	689b      	ldr	r3, [r3, #8]
 800c0da:	2202      	movs	r2, #2
 800c0dc:	4013      	ands	r3, r2
 800c0de:	2b02      	cmp	r3, #2
 800c0e0:	d112      	bne.n	800c108 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0e6:	881a      	ldrh	r2, [r3, #0]
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0f2:	1c9a      	adds	r2, r3, #2
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	3b01      	subs	r3, #1
 800c100:	b29a      	uxth	r2, r3
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	86da      	strh	r2, [r3, #54]	; 0x36
 800c106:	e012      	b.n	800c12e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c108:	f7fd ff92 	bl	800a030 <HAL_GetTick>
 800c10c:	0002      	movs	r2, r0
 800c10e:	69bb      	ldr	r3, [r7, #24]
 800c110:	1ad3      	subs	r3, r2, r3
 800c112:	683a      	ldr	r2, [r7, #0]
 800c114:	429a      	cmp	r2, r3
 800c116:	d802      	bhi.n	800c11e <HAL_SPI_Transmit+0x18a>
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	3301      	adds	r3, #1
 800c11c:	d102      	bne.n	800c124 <HAL_SPI_Transmit+0x190>
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d104      	bne.n	800c12e <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 800c124:	231f      	movs	r3, #31
 800c126:	18fb      	adds	r3, r7, r3
 800c128:	2203      	movs	r2, #3
 800c12a:	701a      	strb	r2, [r3, #0]
          goto error;
 800c12c:	e079      	b.n	800c222 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c132:	b29b      	uxth	r3, r3
 800c134:	2b00      	cmp	r3, #0
 800c136:	d1cd      	bne.n	800c0d4 <HAL_SPI_Transmit+0x140>
 800c138:	e04f      	b.n	800c1da <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d004      	beq.n	800c14c <HAL_SPI_Transmit+0x1b8>
 800c142:	2316      	movs	r3, #22
 800c144:	18fb      	adds	r3, r7, r3
 800c146:	881b      	ldrh	r3, [r3, #0]
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d141      	bne.n	800c1d0 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	330c      	adds	r3, #12
 800c156:	7812      	ldrb	r2, [r2, #0]
 800c158:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c15e:	1c5a      	adds	r2, r3, #1
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c168:	b29b      	uxth	r3, r3
 800c16a:	3b01      	subs	r3, #1
 800c16c:	b29a      	uxth	r2, r3
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c172:	e02d      	b.n	800c1d0 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	689b      	ldr	r3, [r3, #8]
 800c17a:	2202      	movs	r2, #2
 800c17c:	4013      	ands	r3, r2
 800c17e:	2b02      	cmp	r3, #2
 800c180:	d113      	bne.n	800c1aa <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	330c      	adds	r3, #12
 800c18c:	7812      	ldrb	r2, [r2, #0]
 800c18e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c194:	1c5a      	adds	r2, r3, #1
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c19e:	b29b      	uxth	r3, r3
 800c1a0:	3b01      	subs	r3, #1
 800c1a2:	b29a      	uxth	r2, r3
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	86da      	strh	r2, [r3, #54]	; 0x36
 800c1a8:	e012      	b.n	800c1d0 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1aa:	f7fd ff41 	bl	800a030 <HAL_GetTick>
 800c1ae:	0002      	movs	r2, r0
 800c1b0:	69bb      	ldr	r3, [r7, #24]
 800c1b2:	1ad3      	subs	r3, r2, r3
 800c1b4:	683a      	ldr	r2, [r7, #0]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d802      	bhi.n	800c1c0 <HAL_SPI_Transmit+0x22c>
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	3301      	adds	r3, #1
 800c1be:	d102      	bne.n	800c1c6 <HAL_SPI_Transmit+0x232>
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d104      	bne.n	800c1d0 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 800c1c6:	231f      	movs	r3, #31
 800c1c8:	18fb      	adds	r3, r7, r3
 800c1ca:	2203      	movs	r2, #3
 800c1cc:	701a      	strb	r2, [r3, #0]
          goto error;
 800c1ce:	e028      	b.n	800c222 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d1cc      	bne.n	800c174 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c1da:	69ba      	ldr	r2, [r7, #24]
 800c1dc:	6839      	ldr	r1, [r7, #0]
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	0018      	movs	r0, r3
 800c1e2:	f000 fc07 	bl	800c9f4 <SPI_EndRxTxTransaction>
 800c1e6:	1e03      	subs	r3, r0, #0
 800c1e8:	d002      	beq.n	800c1f0 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2220      	movs	r2, #32
 800c1ee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d10a      	bne.n	800c20e <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	613b      	str	r3, [r7, #16]
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	68db      	ldr	r3, [r3, #12]
 800c202:	613b      	str	r3, [r7, #16]
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	613b      	str	r3, [r7, #16]
 800c20c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c212:	2b00      	cmp	r3, #0
 800c214:	d004      	beq.n	800c220 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 800c216:	231f      	movs	r3, #31
 800c218:	18fb      	adds	r3, r7, r3
 800c21a:	2201      	movs	r2, #1
 800c21c:	701a      	strb	r2, [r3, #0]
 800c21e:	e000      	b.n	800c222 <HAL_SPI_Transmit+0x28e>
  }

error:
 800c220:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2251      	movs	r2, #81	; 0x51
 800c226:	2101      	movs	r1, #1
 800c228:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2250      	movs	r2, #80	; 0x50
 800c22e:	2100      	movs	r1, #0
 800c230:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800c232:	231f      	movs	r3, #31
 800c234:	18fb      	adds	r3, r7, r3
 800c236:	781b      	ldrb	r3, [r3, #0]
}
 800c238:	0018      	movs	r0, r3
 800c23a:	46bd      	mov	sp, r7
 800c23c:	b008      	add	sp, #32
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c240:	b590      	push	{r4, r7, lr}
 800c242:	b089      	sub	sp, #36	; 0x24
 800c244:	af02      	add	r7, sp, #8
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	60b9      	str	r1, [r7, #8]
 800c24a:	603b      	str	r3, [r7, #0]
 800c24c:	1dbb      	adds	r3, r7, #6
 800c24e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c250:	2317      	movs	r3, #23
 800c252:	18fb      	adds	r3, r7, r3
 800c254:	2200      	movs	r2, #0
 800c256:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	685a      	ldr	r2, [r3, #4]
 800c25c:	2382      	movs	r3, #130	; 0x82
 800c25e:	005b      	lsls	r3, r3, #1
 800c260:	429a      	cmp	r2, r3
 800c262:	d113      	bne.n	800c28c <HAL_SPI_Receive+0x4c>
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	689b      	ldr	r3, [r3, #8]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d10f      	bne.n	800c28c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	2251      	movs	r2, #81	; 0x51
 800c270:	2104      	movs	r1, #4
 800c272:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c274:	1dbb      	adds	r3, r7, #6
 800c276:	881c      	ldrh	r4, [r3, #0]
 800c278:	68ba      	ldr	r2, [r7, #8]
 800c27a:	68b9      	ldr	r1, [r7, #8]
 800c27c:	68f8      	ldr	r0, [r7, #12]
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	0023      	movs	r3, r4
 800c284:	f000 f902 	bl	800c48c <HAL_SPI_TransmitReceive>
 800c288:	0003      	movs	r3, r0
 800c28a:	e0f9      	b.n	800c480 <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2250      	movs	r2, #80	; 0x50
 800c290:	5c9b      	ldrb	r3, [r3, r2]
 800c292:	2b01      	cmp	r3, #1
 800c294:	d101      	bne.n	800c29a <HAL_SPI_Receive+0x5a>
 800c296:	2302      	movs	r3, #2
 800c298:	e0f2      	b.n	800c480 <HAL_SPI_Receive+0x240>
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2250      	movs	r2, #80	; 0x50
 800c29e:	2101      	movs	r1, #1
 800c2a0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c2a2:	f7fd fec5 	bl	800a030 <HAL_GetTick>
 800c2a6:	0003      	movs	r3, r0
 800c2a8:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2251      	movs	r2, #81	; 0x51
 800c2ae:	5c9b      	ldrb	r3, [r3, r2]
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	2b01      	cmp	r3, #1
 800c2b4:	d004      	beq.n	800c2c0 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800c2b6:	2317      	movs	r3, #23
 800c2b8:	18fb      	adds	r3, r7, r3
 800c2ba:	2202      	movs	r2, #2
 800c2bc:	701a      	strb	r2, [r3, #0]
    goto error;
 800c2be:	e0d4      	b.n	800c46a <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d003      	beq.n	800c2ce <HAL_SPI_Receive+0x8e>
 800c2c6:	1dbb      	adds	r3, r7, #6
 800c2c8:	881b      	ldrh	r3, [r3, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d104      	bne.n	800c2d8 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800c2ce:	2317      	movs	r3, #23
 800c2d0:	18fb      	adds	r3, r7, r3
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	701a      	strb	r2, [r3, #0]
    goto error;
 800c2d6:	e0c8      	b.n	800c46a <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2251      	movs	r2, #81	; 0x51
 800c2dc:	2104      	movs	r1, #4
 800c2de:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	68ba      	ldr	r2, [r7, #8]
 800c2ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	1dba      	adds	r2, r7, #6
 800c2f0:	8812      	ldrh	r2, [r2, #0]
 800c2f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	1dba      	adds	r2, r7, #6
 800c2f8:	8812      	ldrh	r2, [r2, #0]
 800c2fa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2200      	movs	r2, #0
 800c300:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	2200      	movs	r2, #0
 800c306:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	2200      	movs	r2, #0
 800c30c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	2200      	movs	r2, #0
 800c312:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2200      	movs	r2, #0
 800c318:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	689a      	ldr	r2, [r3, #8]
 800c31e:	2380      	movs	r3, #128	; 0x80
 800c320:	021b      	lsls	r3, r3, #8
 800c322:	429a      	cmp	r2, r3
 800c324:	d10f      	bne.n	800c346 <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	681a      	ldr	r2, [r3, #0]
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	2140      	movs	r1, #64	; 0x40
 800c332:	438a      	bics	r2, r1
 800c334:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4951      	ldr	r1, [pc, #324]	; (800c488 <HAL_SPI_Receive+0x248>)
 800c342:	400a      	ands	r2, r1
 800c344:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	2240      	movs	r2, #64	; 0x40
 800c34e:	4013      	ands	r3, r2
 800c350:	2b40      	cmp	r3, #64	; 0x40
 800c352:	d007      	beq.n	800c364 <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	2140      	movs	r1, #64	; 0x40
 800c360:	430a      	orrs	r2, r1
 800c362:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	68db      	ldr	r3, [r3, #12]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d164      	bne.n	800c436 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c36c:	e02f      	b.n	800c3ce <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	689b      	ldr	r3, [r3, #8]
 800c374:	2201      	movs	r2, #1
 800c376:	4013      	ands	r3, r2
 800c378:	2b01      	cmp	r3, #1
 800c37a:	d115      	bne.n	800c3a8 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	330c      	adds	r3, #12
 800c382:	001a      	movs	r2, r3
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c388:	7812      	ldrb	r2, [r2, #0]
 800c38a:	b2d2      	uxtb	r2, r2
 800c38c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c392:	1c5a      	adds	r2, r3, #1
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	3b01      	subs	r3, #1
 800c3a0:	b29a      	uxth	r2, r3
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c3a6:	e012      	b.n	800c3ce <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c3a8:	f7fd fe42 	bl	800a030 <HAL_GetTick>
 800c3ac:	0002      	movs	r2, r0
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	1ad3      	subs	r3, r2, r3
 800c3b2:	683a      	ldr	r2, [r7, #0]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d802      	bhi.n	800c3be <HAL_SPI_Receive+0x17e>
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	d102      	bne.n	800c3c4 <HAL_SPI_Receive+0x184>
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d104      	bne.n	800c3ce <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 800c3c4:	2317      	movs	r3, #23
 800c3c6:	18fb      	adds	r3, r7, r3
 800c3c8:	2203      	movs	r2, #3
 800c3ca:	701a      	strb	r2, [r3, #0]
          goto error;
 800c3cc:	e04d      	b.n	800c46a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d1ca      	bne.n	800c36e <HAL_SPI_Receive+0x12e>
 800c3d8:	e032      	b.n	800c440 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	689b      	ldr	r3, [r3, #8]
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	4013      	ands	r3, r2
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d113      	bne.n	800c410 <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	68da      	ldr	r2, [r3, #12]
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3f2:	b292      	uxth	r2, r2
 800c3f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3fa:	1c9a      	adds	r2, r3, #2
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c404:	b29b      	uxth	r3, r3
 800c406:	3b01      	subs	r3, #1
 800c408:	b29a      	uxth	r2, r3
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c40e:	e012      	b.n	800c436 <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c410:	f7fd fe0e 	bl	800a030 <HAL_GetTick>
 800c414:	0002      	movs	r2, r0
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	1ad3      	subs	r3, r2, r3
 800c41a:	683a      	ldr	r2, [r7, #0]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d802      	bhi.n	800c426 <HAL_SPI_Receive+0x1e6>
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	3301      	adds	r3, #1
 800c424:	d102      	bne.n	800c42c <HAL_SPI_Receive+0x1ec>
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d104      	bne.n	800c436 <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 800c42c:	2317      	movs	r3, #23
 800c42e:	18fb      	adds	r3, r7, r3
 800c430:	2203      	movs	r2, #3
 800c432:	701a      	strb	r2, [r3, #0]
          goto error;
 800c434:	e019      	b.n	800c46a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d1cc      	bne.n	800c3da <HAL_SPI_Receive+0x19a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c440:	693a      	ldr	r2, [r7, #16]
 800c442:	6839      	ldr	r1, [r7, #0]
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	0018      	movs	r0, r3
 800c448:	f000 fa6a 	bl	800c920 <SPI_EndRxTransaction>
 800c44c:	1e03      	subs	r3, r0, #0
 800c44e:	d002      	beq.n	800c456 <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2220      	movs	r2, #32
 800c454:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d004      	beq.n	800c468 <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 800c45e:	2317      	movs	r3, #23
 800c460:	18fb      	adds	r3, r7, r3
 800c462:	2201      	movs	r2, #1
 800c464:	701a      	strb	r2, [r3, #0]
 800c466:	e000      	b.n	800c46a <HAL_SPI_Receive+0x22a>
  }

error :
 800c468:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	2251      	movs	r2, #81	; 0x51
 800c46e:	2101      	movs	r1, #1
 800c470:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2250      	movs	r2, #80	; 0x50
 800c476:	2100      	movs	r1, #0
 800c478:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800c47a:	2317      	movs	r3, #23
 800c47c:	18fb      	adds	r3, r7, r3
 800c47e:	781b      	ldrb	r3, [r3, #0]
}
 800c480:	0018      	movs	r0, r3
 800c482:	46bd      	mov	sp, r7
 800c484:	b007      	add	sp, #28
 800c486:	bd90      	pop	{r4, r7, pc}
 800c488:	ffffbfff 	.word	0xffffbfff

0800c48c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b08c      	sub	sp, #48	; 0x30
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	607a      	str	r2, [r7, #4]
 800c498:	001a      	movs	r2, r3
 800c49a:	1cbb      	adds	r3, r7, #2
 800c49c:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c49e:	2301      	movs	r3, #1
 800c4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c4a2:	232b      	movs	r3, #43	; 0x2b
 800c4a4:	18fb      	adds	r3, r7, r3
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	2250      	movs	r2, #80	; 0x50
 800c4ae:	5c9b      	ldrb	r3, [r3, r2]
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d101      	bne.n	800c4b8 <HAL_SPI_TransmitReceive+0x2c>
 800c4b4:	2302      	movs	r3, #2
 800c4b6:	e1a1      	b.n	800c7fc <HAL_SPI_TransmitReceive+0x370>
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2250      	movs	r2, #80	; 0x50
 800c4bc:	2101      	movs	r1, #1
 800c4be:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c4c0:	f7fd fdb6 	bl	800a030 <HAL_GetTick>
 800c4c4:	0003      	movs	r3, r0
 800c4c6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c4c8:	2023      	movs	r0, #35	; 0x23
 800c4ca:	183b      	adds	r3, r7, r0
 800c4cc:	68fa      	ldr	r2, [r7, #12]
 800c4ce:	2151      	movs	r1, #81	; 0x51
 800c4d0:	5c52      	ldrb	r2, [r2, r1]
 800c4d2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c4da:	231a      	movs	r3, #26
 800c4dc:	18fb      	adds	r3, r7, r3
 800c4de:	1cba      	adds	r2, r7, #2
 800c4e0:	8812      	ldrh	r2, [r2, #0]
 800c4e2:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c4e4:	183b      	adds	r3, r7, r0
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d012      	beq.n	800c512 <HAL_SPI_TransmitReceive+0x86>
 800c4ec:	69fa      	ldr	r2, [r7, #28]
 800c4ee:	2382      	movs	r3, #130	; 0x82
 800c4f0:	005b      	lsls	r3, r3, #1
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d108      	bne.n	800c508 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	689b      	ldr	r3, [r3, #8]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d104      	bne.n	800c508 <HAL_SPI_TransmitReceive+0x7c>
 800c4fe:	2323      	movs	r3, #35	; 0x23
 800c500:	18fb      	adds	r3, r7, r3
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	2b04      	cmp	r3, #4
 800c506:	d004      	beq.n	800c512 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800c508:	232b      	movs	r3, #43	; 0x2b
 800c50a:	18fb      	adds	r3, r7, r3
 800c50c:	2202      	movs	r2, #2
 800c50e:	701a      	strb	r2, [r3, #0]
    goto error;
 800c510:	e169      	b.n	800c7e6 <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d006      	beq.n	800c526 <HAL_SPI_TransmitReceive+0x9a>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d003      	beq.n	800c526 <HAL_SPI_TransmitReceive+0x9a>
 800c51e:	1cbb      	adds	r3, r7, #2
 800c520:	881b      	ldrh	r3, [r3, #0]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d104      	bne.n	800c530 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 800c526:	232b      	movs	r3, #43	; 0x2b
 800c528:	18fb      	adds	r3, r7, r3
 800c52a:	2201      	movs	r2, #1
 800c52c:	701a      	strb	r2, [r3, #0]
    goto error;
 800c52e:	e15a      	b.n	800c7e6 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2251      	movs	r2, #81	; 0x51
 800c534:	5c9b      	ldrb	r3, [r3, r2]
 800c536:	b2db      	uxtb	r3, r3
 800c538:	2b04      	cmp	r3, #4
 800c53a:	d003      	beq.n	800c544 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2251      	movs	r2, #81	; 0x51
 800c540:	2105      	movs	r1, #5
 800c542:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2200      	movs	r2, #0
 800c548:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	1cba      	adds	r2, r7, #2
 800c554:	8812      	ldrh	r2, [r2, #0]
 800c556:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	1cba      	adds	r2, r7, #2
 800c55c:	8812      	ldrh	r2, [r2, #0]
 800c55e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	68ba      	ldr	r2, [r7, #8]
 800c564:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	1cba      	adds	r2, r7, #2
 800c56a:	8812      	ldrh	r2, [r2, #0]
 800c56c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	1cba      	adds	r2, r7, #2
 800c572:	8812      	ldrh	r2, [r2, #0]
 800c574:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2200      	movs	r2, #0
 800c57a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2200      	movs	r2, #0
 800c580:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	2240      	movs	r2, #64	; 0x40
 800c58a:	4013      	ands	r3, r2
 800c58c:	2b40      	cmp	r3, #64	; 0x40
 800c58e:	d007      	beq.n	800c5a0 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	681a      	ldr	r2, [r3, #0]
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	2140      	movs	r1, #64	; 0x40
 800c59c:	430a      	orrs	r2, r1
 800c59e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	68da      	ldr	r2, [r3, #12]
 800c5a4:	2380      	movs	r3, #128	; 0x80
 800c5a6:	011b      	lsls	r3, r3, #4
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d000      	beq.n	800c5ae <HAL_SPI_TransmitReceive+0x122>
 800c5ac:	e07a      	b.n	800c6a4 <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	685b      	ldr	r3, [r3, #4]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d004      	beq.n	800c5c0 <HAL_SPI_TransmitReceive+0x134>
 800c5b6:	231a      	movs	r3, #26
 800c5b8:	18fb      	adds	r3, r7, r3
 800c5ba:	881b      	ldrh	r3, [r3, #0]
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	d166      	bne.n	800c68e <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5c4:	881a      	ldrh	r2, [r3, #0]
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5d0:	1c9a      	adds	r2, r3, #2
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	3b01      	subs	r3, #1
 800c5de:	b29a      	uxth	r2, r3
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c5e4:	e053      	b.n	800c68e <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	689b      	ldr	r3, [r3, #8]
 800c5ec:	2202      	movs	r2, #2
 800c5ee:	4013      	ands	r3, r2
 800c5f0:	2b02      	cmp	r3, #2
 800c5f2:	d11b      	bne.n	800c62c <HAL_SPI_TransmitReceive+0x1a0>
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d016      	beq.n	800c62c <HAL_SPI_TransmitReceive+0x1a0>
 800c5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c600:	2b01      	cmp	r3, #1
 800c602:	d113      	bne.n	800c62c <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c608:	881a      	ldrh	r2, [r3, #0]
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c614:	1c9a      	adds	r2, r3, #2
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c61e:	b29b      	uxth	r3, r3
 800c620:	3b01      	subs	r3, #1
 800c622:	b29a      	uxth	r2, r3
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c628:	2300      	movs	r3, #0
 800c62a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	689b      	ldr	r3, [r3, #8]
 800c632:	2201      	movs	r2, #1
 800c634:	4013      	ands	r3, r2
 800c636:	2b01      	cmp	r3, #1
 800c638:	d119      	bne.n	800c66e <HAL_SPI_TransmitReceive+0x1e2>
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c63e:	b29b      	uxth	r3, r3
 800c640:	2b00      	cmp	r3, #0
 800c642:	d014      	beq.n	800c66e <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	68da      	ldr	r2, [r3, #12]
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c64e:	b292      	uxth	r2, r2
 800c650:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c656:	1c9a      	adds	r2, r3, #2
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c660:	b29b      	uxth	r3, r3
 800c662:	3b01      	subs	r3, #1
 800c664:	b29a      	uxth	r2, r3
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c66a:	2301      	movs	r3, #1
 800c66c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c66e:	f7fd fcdf 	bl	800a030 <HAL_GetTick>
 800c672:	0002      	movs	r2, r0
 800c674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c676:	1ad3      	subs	r3, r2, r3
 800c678:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d807      	bhi.n	800c68e <HAL_SPI_TransmitReceive+0x202>
 800c67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c680:	3301      	adds	r3, #1
 800c682:	d004      	beq.n	800c68e <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 800c684:	232b      	movs	r3, #43	; 0x2b
 800c686:	18fb      	adds	r3, r7, r3
 800c688:	2203      	movs	r2, #3
 800c68a:	701a      	strb	r2, [r3, #0]
        goto error;
 800c68c:	e0ab      	b.n	800c7e6 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c692:	b29b      	uxth	r3, r3
 800c694:	2b00      	cmp	r3, #0
 800c696:	d1a6      	bne.n	800c5e6 <HAL_SPI_TransmitReceive+0x15a>
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d1a1      	bne.n	800c5e6 <HAL_SPI_TransmitReceive+0x15a>
 800c6a2:	e07f      	b.n	800c7a4 <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	685b      	ldr	r3, [r3, #4]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d005      	beq.n	800c6b8 <HAL_SPI_TransmitReceive+0x22c>
 800c6ac:	231a      	movs	r3, #26
 800c6ae:	18fb      	adds	r3, r7, r3
 800c6b0:	881b      	ldrh	r3, [r3, #0]
 800c6b2:	2b01      	cmp	r3, #1
 800c6b4:	d000      	beq.n	800c6b8 <HAL_SPI_TransmitReceive+0x22c>
 800c6b6:	e06b      	b.n	800c790 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	330c      	adds	r3, #12
 800c6c2:	7812      	ldrb	r2, [r2, #0]
 800c6c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6ca:	1c5a      	adds	r2, r3, #1
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	3b01      	subs	r3, #1
 800c6d8:	b29a      	uxth	r2, r3
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c6de:	e057      	b.n	800c790 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	689b      	ldr	r3, [r3, #8]
 800c6e6:	2202      	movs	r2, #2
 800c6e8:	4013      	ands	r3, r2
 800c6ea:	2b02      	cmp	r3, #2
 800c6ec:	d11c      	bne.n	800c728 <HAL_SPI_TransmitReceive+0x29c>
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c6f2:	b29b      	uxth	r3, r3
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d017      	beq.n	800c728 <HAL_SPI_TransmitReceive+0x29c>
 800c6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6fa:	2b01      	cmp	r3, #1
 800c6fc:	d114      	bne.n	800c728 <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	330c      	adds	r3, #12
 800c708:	7812      	ldrb	r2, [r2, #0]
 800c70a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c710:	1c5a      	adds	r2, r3, #1
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c71a:	b29b      	uxth	r3, r3
 800c71c:	3b01      	subs	r3, #1
 800c71e:	b29a      	uxth	r2, r3
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c724:	2300      	movs	r3, #0
 800c726:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	689b      	ldr	r3, [r3, #8]
 800c72e:	2201      	movs	r2, #1
 800c730:	4013      	ands	r3, r2
 800c732:	2b01      	cmp	r3, #1
 800c734:	d119      	bne.n	800c76a <HAL_SPI_TransmitReceive+0x2de>
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d014      	beq.n	800c76a <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	68da      	ldr	r2, [r3, #12]
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c74a:	b2d2      	uxtb	r2, r2
 800c74c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c752:	1c5a      	adds	r2, r3, #1
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c75c:	b29b      	uxth	r3, r3
 800c75e:	3b01      	subs	r3, #1
 800c760:	b29a      	uxth	r2, r3
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c766:	2301      	movs	r3, #1
 800c768:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c76a:	f7fd fc61 	bl	800a030 <HAL_GetTick>
 800c76e:	0002      	movs	r2, r0
 800c770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c772:	1ad3      	subs	r3, r2, r3
 800c774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c776:	429a      	cmp	r2, r3
 800c778:	d802      	bhi.n	800c780 <HAL_SPI_TransmitReceive+0x2f4>
 800c77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77c:	3301      	adds	r3, #1
 800c77e:	d102      	bne.n	800c786 <HAL_SPI_TransmitReceive+0x2fa>
 800c780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c782:	2b00      	cmp	r3, #0
 800c784:	d104      	bne.n	800c790 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 800c786:	232b      	movs	r3, #43	; 0x2b
 800c788:	18fb      	adds	r3, r7, r3
 800c78a:	2203      	movs	r2, #3
 800c78c:	701a      	strb	r2, [r3, #0]
        goto error;
 800c78e:	e02a      	b.n	800c7e6 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c794:	b29b      	uxth	r3, r3
 800c796:	2b00      	cmp	r3, #0
 800c798:	d1a2      	bne.n	800c6e0 <HAL_SPI_TransmitReceive+0x254>
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c79e:	b29b      	uxth	r3, r3
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d19d      	bne.n	800c6e0 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c7a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	0018      	movs	r0, r3
 800c7ac:	f000 f922 	bl	800c9f4 <SPI_EndRxTxTransaction>
 800c7b0:	1e03      	subs	r3, r0, #0
 800c7b2:	d007      	beq.n	800c7c4 <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 800c7b4:	232b      	movs	r3, #43	; 0x2b
 800c7b6:	18fb      	adds	r3, r7, r3
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	2220      	movs	r2, #32
 800c7c0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c7c2:	e010      	b.n	800c7e6 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	689b      	ldr	r3, [r3, #8]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d10b      	bne.n	800c7e4 <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	617b      	str	r3, [r7, #20]
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	68db      	ldr	r3, [r3, #12]
 800c7d6:	617b      	str	r3, [r7, #20]
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	689b      	ldr	r3, [r3, #8]
 800c7de:	617b      	str	r3, [r7, #20]
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	e000      	b.n	800c7e6 <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 800c7e4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2251      	movs	r2, #81	; 0x51
 800c7ea:	2101      	movs	r1, #1
 800c7ec:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2250      	movs	r2, #80	; 0x50
 800c7f2:	2100      	movs	r1, #0
 800c7f4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800c7f6:	232b      	movs	r3, #43	; 0x2b
 800c7f8:	18fb      	adds	r3, r7, r3
 800c7fa:	781b      	ldrb	r3, [r3, #0]
}
 800c7fc:	0018      	movs	r0, r3
 800c7fe:	46bd      	mov	sp, r7
 800c800:	b00c      	add	sp, #48	; 0x30
 800c802:	bd80      	pop	{r7, pc}

0800c804 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b088      	sub	sp, #32
 800c808:	af00      	add	r7, sp, #0
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	603b      	str	r3, [r7, #0]
 800c810:	1dfb      	adds	r3, r7, #7
 800c812:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c814:	f7fd fc0c 	bl	800a030 <HAL_GetTick>
 800c818:	0002      	movs	r2, r0
 800c81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81c:	1a9b      	subs	r3, r3, r2
 800c81e:	683a      	ldr	r2, [r7, #0]
 800c820:	18d3      	adds	r3, r2, r3
 800c822:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c824:	f7fd fc04 	bl	800a030 <HAL_GetTick>
 800c828:	0003      	movs	r3, r0
 800c82a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c82c:	4b3a      	ldr	r3, [pc, #232]	; (800c918 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	015b      	lsls	r3, r3, #5
 800c832:	0d1b      	lsrs	r3, r3, #20
 800c834:	69fa      	ldr	r2, [r7, #28]
 800c836:	4353      	muls	r3, r2
 800c838:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c83a:	e058      	b.n	800c8ee <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	3301      	adds	r3, #1
 800c840:	d055      	beq.n	800c8ee <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c842:	f7fd fbf5 	bl	800a030 <HAL_GetTick>
 800c846:	0002      	movs	r2, r0
 800c848:	69bb      	ldr	r3, [r7, #24]
 800c84a:	1ad3      	subs	r3, r2, r3
 800c84c:	69fa      	ldr	r2, [r7, #28]
 800c84e:	429a      	cmp	r2, r3
 800c850:	d902      	bls.n	800c858 <SPI_WaitFlagStateUntilTimeout+0x54>
 800c852:	69fb      	ldr	r3, [r7, #28]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d142      	bne.n	800c8de <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	685a      	ldr	r2, [r3, #4]
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	21e0      	movs	r1, #224	; 0xe0
 800c864:	438a      	bics	r2, r1
 800c866:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	685a      	ldr	r2, [r3, #4]
 800c86c:	2382      	movs	r3, #130	; 0x82
 800c86e:	005b      	lsls	r3, r3, #1
 800c870:	429a      	cmp	r2, r3
 800c872:	d113      	bne.n	800c89c <SPI_WaitFlagStateUntilTimeout+0x98>
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	689a      	ldr	r2, [r3, #8]
 800c878:	2380      	movs	r3, #128	; 0x80
 800c87a:	021b      	lsls	r3, r3, #8
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d005      	beq.n	800c88c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	689a      	ldr	r2, [r3, #8]
 800c884:	2380      	movs	r3, #128	; 0x80
 800c886:	00db      	lsls	r3, r3, #3
 800c888:	429a      	cmp	r2, r3
 800c88a:	d107      	bne.n	800c89c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	681a      	ldr	r2, [r3, #0]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	2140      	movs	r1, #64	; 0x40
 800c898:	438a      	bics	r2, r1
 800c89a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c8a0:	2380      	movs	r3, #128	; 0x80
 800c8a2:	019b      	lsls	r3, r3, #6
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d110      	bne.n	800c8ca <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	681a      	ldr	r2, [r3, #0]
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	491a      	ldr	r1, [pc, #104]	; (800c91c <SPI_WaitFlagStateUntilTimeout+0x118>)
 800c8b4:	400a      	ands	r2, r1
 800c8b6:	601a      	str	r2, [r3, #0]
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	681a      	ldr	r2, [r3, #0]
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	2180      	movs	r1, #128	; 0x80
 800c8c4:	0189      	lsls	r1, r1, #6
 800c8c6:	430a      	orrs	r2, r1
 800c8c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2251      	movs	r2, #81	; 0x51
 800c8ce:	2101      	movs	r1, #1
 800c8d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	2250      	movs	r2, #80	; 0x50
 800c8d6:	2100      	movs	r1, #0
 800c8d8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c8da:	2303      	movs	r3, #3
 800c8dc:	e017      	b.n	800c90e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d101      	bne.n	800c8e8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	3b01      	subs	r3, #1
 800c8ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	68ba      	ldr	r2, [r7, #8]
 800c8f6:	4013      	ands	r3, r2
 800c8f8:	68ba      	ldr	r2, [r7, #8]
 800c8fa:	1ad3      	subs	r3, r2, r3
 800c8fc:	425a      	negs	r2, r3
 800c8fe:	4153      	adcs	r3, r2
 800c900:	b2db      	uxtb	r3, r3
 800c902:	001a      	movs	r2, r3
 800c904:	1dfb      	adds	r3, r7, #7
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d197      	bne.n	800c83c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c90c:	2300      	movs	r3, #0
}
 800c90e:	0018      	movs	r0, r3
 800c910:	46bd      	mov	sp, r7
 800c912:	b008      	add	sp, #32
 800c914:	bd80      	pop	{r7, pc}
 800c916:	46c0      	nop			; (mov r8, r8)
 800c918:	20000120 	.word	0x20000120
 800c91c:	ffffdfff 	.word	0xffffdfff

0800c920 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b086      	sub	sp, #24
 800c924:	af02      	add	r7, sp, #8
 800c926:	60f8      	str	r0, [r7, #12]
 800c928:	60b9      	str	r1, [r7, #8]
 800c92a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	685a      	ldr	r2, [r3, #4]
 800c930:	2382      	movs	r3, #130	; 0x82
 800c932:	005b      	lsls	r3, r3, #1
 800c934:	429a      	cmp	r2, r3
 800c936:	d113      	bne.n	800c960 <SPI_EndRxTransaction+0x40>
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	689a      	ldr	r2, [r3, #8]
 800c93c:	2380      	movs	r3, #128	; 0x80
 800c93e:	021b      	lsls	r3, r3, #8
 800c940:	429a      	cmp	r2, r3
 800c942:	d005      	beq.n	800c950 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	689a      	ldr	r2, [r3, #8]
 800c948:	2380      	movs	r3, #128	; 0x80
 800c94a:	00db      	lsls	r3, r3, #3
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d107      	bne.n	800c960 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	2140      	movs	r1, #64	; 0x40
 800c95c:	438a      	bics	r2, r1
 800c95e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	685a      	ldr	r2, [r3, #4]
 800c964:	2382      	movs	r3, #130	; 0x82
 800c966:	005b      	lsls	r3, r3, #1
 800c968:	429a      	cmp	r2, r3
 800c96a:	d12b      	bne.n	800c9c4 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	689a      	ldr	r2, [r3, #8]
 800c970:	2380      	movs	r3, #128	; 0x80
 800c972:	00db      	lsls	r3, r3, #3
 800c974:	429a      	cmp	r2, r3
 800c976:	d012      	beq.n	800c99e <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c978:	68ba      	ldr	r2, [r7, #8]
 800c97a:	68f8      	ldr	r0, [r7, #12]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	9300      	str	r3, [sp, #0]
 800c980:	0013      	movs	r3, r2
 800c982:	2200      	movs	r2, #0
 800c984:	2180      	movs	r1, #128	; 0x80
 800c986:	f7ff ff3d 	bl	800c804 <SPI_WaitFlagStateUntilTimeout>
 800c98a:	1e03      	subs	r3, r0, #0
 800c98c:	d02d      	beq.n	800c9ea <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c992:	2220      	movs	r2, #32
 800c994:	431a      	orrs	r2, r3
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c99a:	2303      	movs	r3, #3
 800c99c:	e026      	b.n	800c9ec <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c99e:	68ba      	ldr	r2, [r7, #8]
 800c9a0:	68f8      	ldr	r0, [r7, #12]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	9300      	str	r3, [sp, #0]
 800c9a6:	0013      	movs	r3, r2
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	2101      	movs	r1, #1
 800c9ac:	f7ff ff2a 	bl	800c804 <SPI_WaitFlagStateUntilTimeout>
 800c9b0:	1e03      	subs	r3, r0, #0
 800c9b2:	d01a      	beq.n	800c9ea <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9b8:	2220      	movs	r2, #32
 800c9ba:	431a      	orrs	r2, r3
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c9c0:	2303      	movs	r3, #3
 800c9c2:	e013      	b.n	800c9ec <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c9c4:	68ba      	ldr	r2, [r7, #8]
 800c9c6:	68f8      	ldr	r0, [r7, #12]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	9300      	str	r3, [sp, #0]
 800c9cc:	0013      	movs	r3, r2
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	2101      	movs	r1, #1
 800c9d2:	f7ff ff17 	bl	800c804 <SPI_WaitFlagStateUntilTimeout>
 800c9d6:	1e03      	subs	r3, r0, #0
 800c9d8:	d007      	beq.n	800c9ea <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9de:	2220      	movs	r2, #32
 800c9e0:	431a      	orrs	r2, r3
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c9e6:	2303      	movs	r3, #3
 800c9e8:	e000      	b.n	800c9ec <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 800c9ea:	2300      	movs	r3, #0
}
 800c9ec:	0018      	movs	r0, r3
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	b004      	add	sp, #16
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b088      	sub	sp, #32
 800c9f8:	af02      	add	r7, sp, #8
 800c9fa:	60f8      	str	r0, [r7, #12]
 800c9fc:	60b9      	str	r1, [r7, #8]
 800c9fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ca00:	4b1d      	ldr	r3, [pc, #116]	; (800ca78 <SPI_EndRxTxTransaction+0x84>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	491d      	ldr	r1, [pc, #116]	; (800ca7c <SPI_EndRxTxTransaction+0x88>)
 800ca06:	0018      	movs	r0, r3
 800ca08:	f7f8 fb94 	bl	8005134 <__udivsi3>
 800ca0c:	0003      	movs	r3, r0
 800ca0e:	001a      	movs	r2, r3
 800ca10:	0013      	movs	r3, r2
 800ca12:	015b      	lsls	r3, r3, #5
 800ca14:	1a9b      	subs	r3, r3, r2
 800ca16:	009b      	lsls	r3, r3, #2
 800ca18:	189b      	adds	r3, r3, r2
 800ca1a:	00db      	lsls	r3, r3, #3
 800ca1c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	685a      	ldr	r2, [r3, #4]
 800ca22:	2382      	movs	r3, #130	; 0x82
 800ca24:	005b      	lsls	r3, r3, #1
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d112      	bne.n	800ca50 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ca2a:	68ba      	ldr	r2, [r7, #8]
 800ca2c:	68f8      	ldr	r0, [r7, #12]
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	9300      	str	r3, [sp, #0]
 800ca32:	0013      	movs	r3, r2
 800ca34:	2200      	movs	r2, #0
 800ca36:	2180      	movs	r1, #128	; 0x80
 800ca38:	f7ff fee4 	bl	800c804 <SPI_WaitFlagStateUntilTimeout>
 800ca3c:	1e03      	subs	r3, r0, #0
 800ca3e:	d016      	beq.n	800ca6e <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca44:	2220      	movs	r2, #32
 800ca46:	431a      	orrs	r2, r3
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ca4c:	2303      	movs	r3, #3
 800ca4e:	e00f      	b.n	800ca70 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d00a      	beq.n	800ca6c <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	3b01      	subs	r3, #1
 800ca5a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	689b      	ldr	r3, [r3, #8]
 800ca62:	2280      	movs	r2, #128	; 0x80
 800ca64:	4013      	ands	r3, r2
 800ca66:	2b80      	cmp	r3, #128	; 0x80
 800ca68:	d0f2      	beq.n	800ca50 <SPI_EndRxTxTransaction+0x5c>
 800ca6a:	e000      	b.n	800ca6e <SPI_EndRxTxTransaction+0x7a>
        break;
 800ca6c:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800ca6e:	2300      	movs	r3, #0
}
 800ca70:	0018      	movs	r0, r3
 800ca72:	46bd      	mov	sp, r7
 800ca74:	b006      	add	sp, #24
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	20000120 	.word	0x20000120
 800ca7c:	016e3600 	.word	0x016e3600

0800ca80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d101      	bne.n	800ca92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	e044      	b.n	800cb1c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d107      	bne.n	800caaa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2274      	movs	r2, #116	; 0x74
 800ca9e:	2100      	movs	r1, #0
 800caa0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	0018      	movs	r0, r3
 800caa6:	f7fd f80b 	bl	8009ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2224      	movs	r2, #36	; 0x24
 800caae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	2101      	movs	r1, #1
 800cabc:	438a      	bics	r2, r1
 800cabe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	0018      	movs	r0, r3
 800cac4:	f000 fbc6 	bl	800d254 <UART_SetConfig>
 800cac8:	0003      	movs	r3, r0
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d101      	bne.n	800cad2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cace:	2301      	movs	r3, #1
 800cad0:	e024      	b.n	800cb1c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d003      	beq.n	800cae2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	0018      	movs	r0, r3
 800cade:	f000 fe75 	bl	800d7cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	685a      	ldr	r2, [r3, #4]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	490d      	ldr	r1, [pc, #52]	; (800cb24 <HAL_UART_Init+0xa4>)
 800caee:	400a      	ands	r2, r1
 800caf0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	689a      	ldr	r2, [r3, #8]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	212a      	movs	r1, #42	; 0x2a
 800cafe:	438a      	bics	r2, r1
 800cb00:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	681a      	ldr	r2, [r3, #0]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	2101      	movs	r1, #1
 800cb0e:	430a      	orrs	r2, r1
 800cb10:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	0018      	movs	r0, r3
 800cb16:	f000 ff0d 	bl	800d934 <UART_CheckIdleState>
 800cb1a:	0003      	movs	r3, r0
}
 800cb1c:	0018      	movs	r0, r3
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	b002      	add	sp, #8
 800cb22:	bd80      	pop	{r7, pc}
 800cb24:	ffffb7ff 	.word	0xffffb7ff

0800cb28 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b088      	sub	sp, #32
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	60b9      	str	r1, [r7, #8]
 800cb32:	1dbb      	adds	r3, r7, #6
 800cb34:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb3a:	2b20      	cmp	r3, #32
 800cb3c:	d000      	beq.n	800cb40 <HAL_UART_Transmit_DMA+0x18>
 800cb3e:	e088      	b.n	800cc52 <HAL_UART_Transmit_DMA+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d003      	beq.n	800cb4e <HAL_UART_Transmit_DMA+0x26>
 800cb46:	1dbb      	adds	r3, r7, #6
 800cb48:	881b      	ldrh	r3, [r3, #0]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d101      	bne.n	800cb52 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	e080      	b.n	800cc54 <HAL_UART_Transmit_DMA+0x12c>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	689a      	ldr	r2, [r3, #8]
 800cb56:	2380      	movs	r3, #128	; 0x80
 800cb58:	015b      	lsls	r3, r3, #5
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d109      	bne.n	800cb72 <HAL_UART_Transmit_DMA+0x4a>
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	691b      	ldr	r3, [r3, #16]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d105      	bne.n	800cb72 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	2201      	movs	r2, #1
 800cb6a:	4013      	ands	r3, r2
 800cb6c:	d001      	beq.n	800cb72 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800cb6e:	2301      	movs	r3, #1
 800cb70:	e070      	b.n	800cc54 <HAL_UART_Transmit_DMA+0x12c>
      }
    }

    __HAL_LOCK(huart);
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2274      	movs	r2, #116	; 0x74
 800cb76:	5c9b      	ldrb	r3, [r3, r2]
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d101      	bne.n	800cb80 <HAL_UART_Transmit_DMA+0x58>
 800cb7c:	2302      	movs	r3, #2
 800cb7e:	e069      	b.n	800cc54 <HAL_UART_Transmit_DMA+0x12c>
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2274      	movs	r2, #116	; 0x74
 800cb84:	2101      	movs	r1, #1
 800cb86:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	68ba      	ldr	r2, [r7, #8]
 800cb8c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	1dba      	adds	r2, r7, #6
 800cb92:	2150      	movs	r1, #80	; 0x50
 800cb94:	8812      	ldrh	r2, [r2, #0]
 800cb96:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	1dba      	adds	r2, r7, #6
 800cb9c:	2152      	movs	r1, #82	; 0x52
 800cb9e:	8812      	ldrh	r2, [r2, #0]
 800cba0:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	2280      	movs	r2, #128	; 0x80
 800cba6:	2100      	movs	r1, #0
 800cba8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	2221      	movs	r2, #33	; 0x21
 800cbae:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d02b      	beq.n	800cc10 <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbbc:	4a27      	ldr	r2, [pc, #156]	; (800cc5c <HAL_UART_Transmit_DMA+0x134>)
 800cbbe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbc4:	4a26      	ldr	r2, [pc, #152]	; (800cc60 <HAL_UART_Transmit_DMA+0x138>)
 800cbc6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbcc:	4a25      	ldr	r2, [pc, #148]	; (800cc64 <HAL_UART_Transmit_DMA+0x13c>)
 800cbce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbe0:	0019      	movs	r1, r3
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	3328      	adds	r3, #40	; 0x28
 800cbe8:	001a      	movs	r2, r3
 800cbea:	1dbb      	adds	r3, r7, #6
 800cbec:	881b      	ldrh	r3, [r3, #0]
 800cbee:	f7fd fc1a 	bl	800a426 <HAL_DMA_Start_IT>
 800cbf2:	1e03      	subs	r3, r0, #0
 800cbf4:	d00c      	beq.n	800cc10 <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2280      	movs	r2, #128	; 0x80
 800cbfa:	2110      	movs	r1, #16
 800cbfc:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2274      	movs	r2, #116	; 0x74
 800cc02:	2100      	movs	r1, #0
 800cc04:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2220      	movs	r2, #32
 800cc0a:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	e021      	b.n	800cc54 <HAL_UART_Transmit_DMA+0x12c>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	2240      	movs	r2, #64	; 0x40
 800cc16:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2274      	movs	r2, #116	; 0x74
 800cc1c:	2100      	movs	r1, #0
 800cc1e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc20:	f3ef 8310 	mrs	r3, PRIMASK
 800cc24:	613b      	str	r3, [r7, #16]
  return(result);
 800cc26:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cc28:	61fb      	str	r3, [r7, #28]
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	f383 8810 	msr	PRIMASK, r3
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	689a      	ldr	r2, [r3, #8]
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	2180      	movs	r1, #128	; 0x80
 800cc40:	430a      	orrs	r2, r1
 800cc42:	609a      	str	r2, [r3, #8]
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	61bb      	str	r3, [r7, #24]
 800cc48:	69bb      	ldr	r3, [r7, #24]
 800cc4a:	f383 8810 	msr	PRIMASK, r3

    return HAL_OK;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	e000      	b.n	800cc54 <HAL_UART_Transmit_DMA+0x12c>
  }
  else
  {
    return HAL_BUSY;
 800cc52:	2302      	movs	r3, #2
  }
}
 800cc54:	0018      	movs	r0, r3
 800cc56:	46bd      	mov	sp, r7
 800cc58:	b008      	add	sp, #32
 800cc5a:	bd80      	pop	{r7, pc}
 800cc5c:	0800dc3d 	.word	0x0800dc3d
 800cc60:	0800dccd 	.word	0x0800dccd
 800cc64:	0800dceb 	.word	0x0800dceb

0800cc68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b0aa      	sub	sp, #168	; 0xa8
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	69db      	ldr	r3, [r3, #28]
 800cc76:	22a4      	movs	r2, #164	; 0xa4
 800cc78:	18b9      	adds	r1, r7, r2
 800cc7a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	21a0      	movs	r1, #160	; 0xa0
 800cc84:	1879      	adds	r1, r7, r1
 800cc86:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	689b      	ldr	r3, [r3, #8]
 800cc8e:	219c      	movs	r1, #156	; 0x9c
 800cc90:	1879      	adds	r1, r7, r1
 800cc92:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cc94:	18bb      	adds	r3, r7, r2
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	4a99      	ldr	r2, [pc, #612]	; (800cf00 <HAL_UART_IRQHandler+0x298>)
 800cc9a:	4013      	ands	r3, r2
 800cc9c:	2298      	movs	r2, #152	; 0x98
 800cc9e:	18b9      	adds	r1, r7, r2
 800cca0:	600b      	str	r3, [r1, #0]
  if (errorflags == 0U)
 800cca2:	18bb      	adds	r3, r7, r2
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d116      	bne.n	800ccd8 <HAL_UART_IRQHandler+0x70>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ccaa:	23a4      	movs	r3, #164	; 0xa4
 800ccac:	18fb      	adds	r3, r7, r3
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2220      	movs	r2, #32
 800ccb2:	4013      	ands	r3, r2
 800ccb4:	d010      	beq.n	800ccd8 <HAL_UART_IRQHandler+0x70>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ccb6:	23a0      	movs	r3, #160	; 0xa0
 800ccb8:	18fb      	adds	r3, r7, r3
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	2220      	movs	r2, #32
 800ccbe:	4013      	ands	r3, r2
 800ccc0:	d00a      	beq.n	800ccd8 <HAL_UART_IRQHandler+0x70>
    {
      if (huart->RxISR != NULL)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d100      	bne.n	800cccc <HAL_UART_IRQHandler+0x64>
 800ccca:	e28e      	b.n	800d1ea <HAL_UART_IRQHandler+0x582>
      {
        huart->RxISR(huart);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccd0:	687a      	ldr	r2, [r7, #4]
 800ccd2:	0010      	movs	r0, r2
 800ccd4:	4798      	blx	r3
      }
      return;
 800ccd6:	e288      	b.n	800d1ea <HAL_UART_IRQHandler+0x582>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ccd8:	2398      	movs	r3, #152	; 0x98
 800ccda:	18fb      	adds	r3, r7, r3
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d100      	bne.n	800cce4 <HAL_UART_IRQHandler+0x7c>
 800cce2:	e113      	b.n	800cf0c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800cce4:	239c      	movs	r3, #156	; 0x9c
 800cce6:	18fb      	adds	r3, r7, r3
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2201      	movs	r2, #1
 800ccec:	4013      	ands	r3, r2
 800ccee:	d106      	bne.n	800ccfe <HAL_UART_IRQHandler+0x96>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ccf0:	23a0      	movs	r3, #160	; 0xa0
 800ccf2:	18fb      	adds	r3, r7, r3
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a83      	ldr	r2, [pc, #524]	; (800cf04 <HAL_UART_IRQHandler+0x29c>)
 800ccf8:	4013      	ands	r3, r2
 800ccfa:	d100      	bne.n	800ccfe <HAL_UART_IRQHandler+0x96>
 800ccfc:	e106      	b.n	800cf0c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ccfe:	23a4      	movs	r3, #164	; 0xa4
 800cd00:	18fb      	adds	r3, r7, r3
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	2201      	movs	r2, #1
 800cd06:	4013      	ands	r3, r2
 800cd08:	d012      	beq.n	800cd30 <HAL_UART_IRQHandler+0xc8>
 800cd0a:	23a0      	movs	r3, #160	; 0xa0
 800cd0c:	18fb      	adds	r3, r7, r3
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	2380      	movs	r3, #128	; 0x80
 800cd12:	005b      	lsls	r3, r3, #1
 800cd14:	4013      	ands	r3, r2
 800cd16:	d00b      	beq.n	800cd30 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	2201      	movs	r2, #1
 800cd1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2280      	movs	r2, #128	; 0x80
 800cd24:	589b      	ldr	r3, [r3, r2]
 800cd26:	2201      	movs	r2, #1
 800cd28:	431a      	orrs	r2, r3
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2180      	movs	r1, #128	; 0x80
 800cd2e:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cd30:	23a4      	movs	r3, #164	; 0xa4
 800cd32:	18fb      	adds	r3, r7, r3
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	2202      	movs	r2, #2
 800cd38:	4013      	ands	r3, r2
 800cd3a:	d011      	beq.n	800cd60 <HAL_UART_IRQHandler+0xf8>
 800cd3c:	239c      	movs	r3, #156	; 0x9c
 800cd3e:	18fb      	adds	r3, r7, r3
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	2201      	movs	r2, #1
 800cd44:	4013      	ands	r3, r2
 800cd46:	d00b      	beq.n	800cd60 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	2202      	movs	r2, #2
 800cd4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2280      	movs	r2, #128	; 0x80
 800cd54:	589b      	ldr	r3, [r3, r2]
 800cd56:	2204      	movs	r2, #4
 800cd58:	431a      	orrs	r2, r3
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2180      	movs	r1, #128	; 0x80
 800cd5e:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cd60:	23a4      	movs	r3, #164	; 0xa4
 800cd62:	18fb      	adds	r3, r7, r3
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	2204      	movs	r2, #4
 800cd68:	4013      	ands	r3, r2
 800cd6a:	d011      	beq.n	800cd90 <HAL_UART_IRQHandler+0x128>
 800cd6c:	239c      	movs	r3, #156	; 0x9c
 800cd6e:	18fb      	adds	r3, r7, r3
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	2201      	movs	r2, #1
 800cd74:	4013      	ands	r3, r2
 800cd76:	d00b      	beq.n	800cd90 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	2204      	movs	r2, #4
 800cd7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2280      	movs	r2, #128	; 0x80
 800cd84:	589b      	ldr	r3, [r3, r2]
 800cd86:	2202      	movs	r2, #2
 800cd88:	431a      	orrs	r2, r3
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2180      	movs	r1, #128	; 0x80
 800cd8e:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cd90:	23a4      	movs	r3, #164	; 0xa4
 800cd92:	18fb      	adds	r3, r7, r3
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	2208      	movs	r2, #8
 800cd98:	4013      	ands	r3, r2
 800cd9a:	d017      	beq.n	800cdcc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cd9c:	23a0      	movs	r3, #160	; 0xa0
 800cd9e:	18fb      	adds	r3, r7, r3
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	2220      	movs	r2, #32
 800cda4:	4013      	ands	r3, r2
 800cda6:	d105      	bne.n	800cdb4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800cda8:	239c      	movs	r3, #156	; 0x9c
 800cdaa:	18fb      	adds	r3, r7, r3
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cdb2:	d00b      	beq.n	800cdcc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	2208      	movs	r2, #8
 800cdba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2280      	movs	r2, #128	; 0x80
 800cdc0:	589b      	ldr	r3, [r3, r2]
 800cdc2:	2208      	movs	r2, #8
 800cdc4:	431a      	orrs	r2, r3
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2180      	movs	r1, #128	; 0x80
 800cdca:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cdcc:	23a4      	movs	r3, #164	; 0xa4
 800cdce:	18fb      	adds	r3, r7, r3
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	2380      	movs	r3, #128	; 0x80
 800cdd4:	011b      	lsls	r3, r3, #4
 800cdd6:	4013      	ands	r3, r2
 800cdd8:	d013      	beq.n	800ce02 <HAL_UART_IRQHandler+0x19a>
 800cdda:	23a0      	movs	r3, #160	; 0xa0
 800cddc:	18fb      	adds	r3, r7, r3
 800cdde:	681a      	ldr	r2, [r3, #0]
 800cde0:	2380      	movs	r3, #128	; 0x80
 800cde2:	04db      	lsls	r3, r3, #19
 800cde4:	4013      	ands	r3, r2
 800cde6:	d00c      	beq.n	800ce02 <HAL_UART_IRQHandler+0x19a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	2280      	movs	r2, #128	; 0x80
 800cdee:	0112      	lsls	r2, r2, #4
 800cdf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2280      	movs	r2, #128	; 0x80
 800cdf6:	589b      	ldr	r3, [r3, r2]
 800cdf8:	2220      	movs	r2, #32
 800cdfa:	431a      	orrs	r2, r3
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2180      	movs	r1, #128	; 0x80
 800ce00:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2280      	movs	r2, #128	; 0x80
 800ce06:	589b      	ldr	r3, [r3, r2]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d100      	bne.n	800ce0e <HAL_UART_IRQHandler+0x1a6>
 800ce0c:	e1ef      	b.n	800d1ee <HAL_UART_IRQHandler+0x586>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ce0e:	23a4      	movs	r3, #164	; 0xa4
 800ce10:	18fb      	adds	r3, r7, r3
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	2220      	movs	r2, #32
 800ce16:	4013      	ands	r3, r2
 800ce18:	d00e      	beq.n	800ce38 <HAL_UART_IRQHandler+0x1d0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ce1a:	23a0      	movs	r3, #160	; 0xa0
 800ce1c:	18fb      	adds	r3, r7, r3
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	2220      	movs	r2, #32
 800ce22:	4013      	ands	r3, r2
 800ce24:	d008      	beq.n	800ce38 <HAL_UART_IRQHandler+0x1d0>
      {
        if (huart->RxISR != NULL)
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d004      	beq.n	800ce38 <HAL_UART_IRQHandler+0x1d0>
        {
          huart->RxISR(huart);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	0010      	movs	r0, r2
 800ce36:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2280      	movs	r2, #128	; 0x80
 800ce3c:	589b      	ldr	r3, [r3, r2]
 800ce3e:	2294      	movs	r2, #148	; 0x94
 800ce40:	18ba      	adds	r2, r7, r2
 800ce42:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	689b      	ldr	r3, [r3, #8]
 800ce4a:	2240      	movs	r2, #64	; 0x40
 800ce4c:	4013      	ands	r3, r2
 800ce4e:	2b40      	cmp	r3, #64	; 0x40
 800ce50:	d005      	beq.n	800ce5e <HAL_UART_IRQHandler+0x1f6>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ce52:	2394      	movs	r3, #148	; 0x94
 800ce54:	18fb      	adds	r3, r7, r3
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	2228      	movs	r2, #40	; 0x28
 800ce5a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ce5c:	d045      	beq.n	800ceea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	0018      	movs	r0, r3
 800ce62:	f000 fe8f 	bl	800db84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	689b      	ldr	r3, [r3, #8]
 800ce6c:	2240      	movs	r2, #64	; 0x40
 800ce6e:	4013      	ands	r3, r2
 800ce70:	2b40      	cmp	r3, #64	; 0x40
 800ce72:	d135      	bne.n	800cee0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce74:	f3ef 8310 	mrs	r3, PRIMASK
 800ce78:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800ce7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce7c:	2090      	movs	r0, #144	; 0x90
 800ce7e:	183a      	adds	r2, r7, r0
 800ce80:	6013      	str	r3, [r2, #0]
 800ce82:	2301      	movs	r3, #1
 800ce84:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce88:	f383 8810 	msr	PRIMASK, r3
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	689a      	ldr	r2, [r3, #8]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	2140      	movs	r1, #64	; 0x40
 800ce98:	438a      	bics	r2, r1
 800ce9a:	609a      	str	r2, [r3, #8]
 800ce9c:	183b      	adds	r3, r7, r0
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	66bb      	str	r3, [r7, #104]	; 0x68
 800cea2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cea4:	f383 8810 	msr	PRIMASK, r3

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d012      	beq.n	800ced6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceb4:	4a14      	ldr	r2, [pc, #80]	; (800cf08 <HAL_UART_IRQHandler+0x2a0>)
 800ceb6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cebc:	0018      	movs	r0, r3
 800cebe:	f7fd fb58 	bl	800a572 <HAL_DMA_Abort_IT>
 800cec2:	1e03      	subs	r3, r0, #0
 800cec4:	d01a      	beq.n	800cefc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ced0:	0018      	movs	r0, r3
 800ced2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ced4:	e012      	b.n	800cefc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	0018      	movs	r0, r3
 800ceda:	f000 f9a7 	bl	800d22c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cede:	e00d      	b.n	800cefc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	0018      	movs	r0, r3
 800cee4:	f000 f9a2 	bl	800d22c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cee8:	e008      	b.n	800cefc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	0018      	movs	r0, r3
 800ceee:	f000 f99d 	bl	800d22c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2280      	movs	r2, #128	; 0x80
 800cef6:	2100      	movs	r1, #0
 800cef8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800cefa:	e178      	b.n	800d1ee <HAL_UART_IRQHandler+0x586>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cefc:	46c0      	nop			; (mov r8, r8)
    return;
 800cefe:	e176      	b.n	800d1ee <HAL_UART_IRQHandler+0x586>
 800cf00:	0000080f 	.word	0x0000080f
 800cf04:	04000120 	.word	0x04000120
 800cf08:	0800dd6d 	.word	0x0800dd6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d000      	beq.n	800cf16 <HAL_UART_IRQHandler+0x2ae>
 800cf14:	e129      	b.n	800d16a <HAL_UART_IRQHandler+0x502>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cf16:	23a4      	movs	r3, #164	; 0xa4
 800cf18:	18fb      	adds	r3, r7, r3
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	2210      	movs	r2, #16
 800cf1e:	4013      	ands	r3, r2
 800cf20:	d100      	bne.n	800cf24 <HAL_UART_IRQHandler+0x2bc>
 800cf22:	e122      	b.n	800d16a <HAL_UART_IRQHandler+0x502>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cf24:	23a0      	movs	r3, #160	; 0xa0
 800cf26:	18fb      	adds	r3, r7, r3
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	2210      	movs	r2, #16
 800cf2c:	4013      	ands	r3, r2
 800cf2e:	d100      	bne.n	800cf32 <HAL_UART_IRQHandler+0x2ca>
 800cf30:	e11b      	b.n	800d16a <HAL_UART_IRQHandler+0x502>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	2210      	movs	r2, #16
 800cf38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	689b      	ldr	r3, [r3, #8]
 800cf40:	2240      	movs	r2, #64	; 0x40
 800cf42:	4013      	ands	r3, r2
 800cf44:	2b40      	cmp	r3, #64	; 0x40
 800cf46:	d000      	beq.n	800cf4a <HAL_UART_IRQHandler+0x2e2>
 800cf48:	e097      	b.n	800d07a <HAL_UART_IRQHandler+0x412>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	685a      	ldr	r2, [r3, #4]
 800cf52:	217e      	movs	r1, #126	; 0x7e
 800cf54:	187b      	adds	r3, r7, r1
 800cf56:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800cf58:	187b      	adds	r3, r7, r1
 800cf5a:	881b      	ldrh	r3, [r3, #0]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d100      	bne.n	800cf62 <HAL_UART_IRQHandler+0x2fa>
 800cf60:	e147      	b.n	800d1f2 <HAL_UART_IRQHandler+0x58a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2258      	movs	r2, #88	; 0x58
 800cf66:	5a9b      	ldrh	r3, [r3, r2]
 800cf68:	227e      	movs	r2, #126	; 0x7e
 800cf6a:	18ba      	adds	r2, r7, r2
 800cf6c:	8812      	ldrh	r2, [r2, #0]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d300      	bcc.n	800cf74 <HAL_UART_IRQHandler+0x30c>
 800cf72:	e13e      	b.n	800d1f2 <HAL_UART_IRQHandler+0x58a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	227e      	movs	r2, #126	; 0x7e
 800cf78:	18ba      	adds	r2, r7, r2
 800cf7a:	215a      	movs	r1, #90	; 0x5a
 800cf7c:	8812      	ldrh	r2, [r2, #0]
 800cf7e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	2220      	movs	r2, #32
 800cf8a:	4013      	ands	r3, r2
 800cf8c:	d166      	bne.n	800d05c <HAL_UART_IRQHandler+0x3f4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf8e:	f3ef 8310 	mrs	r3, PRIMASK
 800cf92:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800cf94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cf96:	67bb      	str	r3, [r7, #120]	; 0x78
 800cf98:	2301      	movs	r3, #1
 800cf9a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf9e:	f383 8810 	msr	PRIMASK, r3
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	681a      	ldr	r2, [r3, #0]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4995      	ldr	r1, [pc, #596]	; (800d204 <HAL_UART_IRQHandler+0x59c>)
 800cfae:	400a      	ands	r2, r1
 800cfb0:	601a      	str	r2, [r3, #0]
 800cfb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cfb4:	63bb      	str	r3, [r7, #56]	; 0x38
 800cfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb8:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfbc:	f3ef 8310 	mrs	r3, PRIMASK
 800cfc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800cfc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfc4:	677b      	str	r3, [r7, #116]	; 0x74
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cfca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfcc:	f383 8810 	msr	PRIMASK, r3
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	689a      	ldr	r2, [r3, #8]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	2101      	movs	r1, #1
 800cfdc:	438a      	bics	r2, r1
 800cfde:	609a      	str	r2, [r3, #8]
 800cfe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cfe2:	647b      	str	r3, [r7, #68]	; 0x44
 800cfe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfe6:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfea:	f3ef 8310 	mrs	r3, PRIMASK
 800cfee:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800cff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cff2:	673b      	str	r3, [r7, #112]	; 0x70
 800cff4:	2301      	movs	r3, #1
 800cff6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cffa:	f383 8810 	msr	PRIMASK, r3
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	689a      	ldr	r2, [r3, #8]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2140      	movs	r1, #64	; 0x40
 800d00a:	438a      	bics	r2, r1
 800d00c:	609a      	str	r2, [r3, #8]
 800d00e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d010:	653b      	str	r3, [r7, #80]	; 0x50
 800d012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d014:	f383 8810 	msr	PRIMASK, r3

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2220      	movs	r2, #32
 800d01c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2200      	movs	r2, #0
 800d022:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d024:	f3ef 8310 	mrs	r3, PRIMASK
 800d028:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800d02a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d02c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d02e:	2301      	movs	r3, #1
 800d030:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d034:	f383 8810 	msr	PRIMASK, r3
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	681a      	ldr	r2, [r3, #0]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	2110      	movs	r1, #16
 800d044:	438a      	bics	r2, r1
 800d046:	601a      	str	r2, [r3, #0]
 800d048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d04a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d04c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d04e:	f383 8810 	msr	PRIMASK, r3

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d056:	0018      	movs	r0, r3
 800d058:	f7fd fa4b 	bl	800a4f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2258      	movs	r2, #88	; 0x58
 800d060:	5a9a      	ldrh	r2, [r3, r2]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	215a      	movs	r1, #90	; 0x5a
 800d066:	5a5b      	ldrh	r3, [r3, r1]
 800d068:	b29b      	uxth	r3, r3
 800d06a:	1ad3      	subs	r3, r2, r3
 800d06c:	b29a      	uxth	r2, r3
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	0011      	movs	r1, r2
 800d072:	0018      	movs	r0, r3
 800d074:	f000 f8e2 	bl	800d23c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d078:	e0bb      	b.n	800d1f2 <HAL_UART_IRQHandler+0x58a>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2258      	movs	r2, #88	; 0x58
 800d07e:	5a99      	ldrh	r1, [r3, r2]
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	225a      	movs	r2, #90	; 0x5a
 800d084:	5a9b      	ldrh	r3, [r3, r2]
 800d086:	b29a      	uxth	r2, r3
 800d088:	238e      	movs	r3, #142	; 0x8e
 800d08a:	18fb      	adds	r3, r7, r3
 800d08c:	1a8a      	subs	r2, r1, r2
 800d08e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	225a      	movs	r2, #90	; 0x5a
 800d094:	5a9b      	ldrh	r3, [r3, r2]
 800d096:	b29b      	uxth	r3, r3
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d100      	bne.n	800d09e <HAL_UART_IRQHandler+0x436>
 800d09c:	e0ab      	b.n	800d1f6 <HAL_UART_IRQHandler+0x58e>
          && (nb_rx_data > 0U))
 800d09e:	238e      	movs	r3, #142	; 0x8e
 800d0a0:	18fb      	adds	r3, r7, r3
 800d0a2:	881b      	ldrh	r3, [r3, #0]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d100      	bne.n	800d0aa <HAL_UART_IRQHandler+0x442>
 800d0a8:	e0a5      	b.n	800d1f6 <HAL_UART_IRQHandler+0x58e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0aa:	f3ef 8310 	mrs	r3, PRIMASK
 800d0ae:	60fb      	str	r3, [r7, #12]
  return(result);
 800d0b0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d0b2:	2088      	movs	r0, #136	; 0x88
 800d0b4:	183a      	adds	r2, r7, r0
 800d0b6:	6013      	str	r3, [r2, #0]
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	f383 8810 	msr	PRIMASK, r3
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	681a      	ldr	r2, [r3, #0]
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	494e      	ldr	r1, [pc, #312]	; (800d208 <HAL_UART_IRQHandler+0x5a0>)
 800d0ce:	400a      	ands	r2, r1
 800d0d0:	601a      	str	r2, [r3, #0]
 800d0d2:	183b      	adds	r3, r7, r0
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	617b      	str	r3, [r7, #20]
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0de:	f3ef 8310 	mrs	r3, PRIMASK
 800d0e2:	61bb      	str	r3, [r7, #24]
  return(result);
 800d0e4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0e6:	2084      	movs	r0, #132	; 0x84
 800d0e8:	183a      	adds	r2, r7, r0
 800d0ea:	6013      	str	r3, [r2, #0]
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0f0:	69fb      	ldr	r3, [r7, #28]
 800d0f2:	f383 8810 	msr	PRIMASK, r3
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	689a      	ldr	r2, [r3, #8]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2101      	movs	r1, #1
 800d102:	438a      	bics	r2, r1
 800d104:	609a      	str	r2, [r3, #8]
 800d106:	183b      	adds	r3, r7, r0
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	623b      	str	r3, [r7, #32]
 800d10c:	6a3b      	ldr	r3, [r7, #32]
 800d10e:	f383 8810 	msr	PRIMASK, r3

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2220      	movs	r2, #32
 800d116:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2200      	movs	r2, #0
 800d11c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2200      	movs	r2, #0
 800d122:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d124:	f3ef 8310 	mrs	r3, PRIMASK
 800d128:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800d12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d12c:	2080      	movs	r0, #128	; 0x80
 800d12e:	183a      	adds	r2, r7, r0
 800d130:	6013      	str	r3, [r2, #0]
 800d132:	2301      	movs	r3, #1
 800d134:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d138:	f383 8810 	msr	PRIMASK, r3
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	681a      	ldr	r2, [r3, #0]
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	2110      	movs	r1, #16
 800d148:	438a      	bics	r2, r1
 800d14a:	601a      	str	r2, [r3, #0]
 800d14c:	183b      	adds	r3, r7, r0
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d154:	f383 8810 	msr	PRIMASK, r3
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d158:	238e      	movs	r3, #142	; 0x8e
 800d15a:	18fb      	adds	r3, r7, r3
 800d15c:	881a      	ldrh	r2, [r3, #0]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	0011      	movs	r1, r2
 800d162:	0018      	movs	r0, r3
 800d164:	f000 f86a 	bl	800d23c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d168:	e045      	b.n	800d1f6 <HAL_UART_IRQHandler+0x58e>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d16a:	23a4      	movs	r3, #164	; 0xa4
 800d16c:	18fb      	adds	r3, r7, r3
 800d16e:	681a      	ldr	r2, [r3, #0]
 800d170:	2380      	movs	r3, #128	; 0x80
 800d172:	035b      	lsls	r3, r3, #13
 800d174:	4013      	ands	r3, r2
 800d176:	d010      	beq.n	800d19a <HAL_UART_IRQHandler+0x532>
 800d178:	239c      	movs	r3, #156	; 0x9c
 800d17a:	18fb      	adds	r3, r7, r3
 800d17c:	681a      	ldr	r2, [r3, #0]
 800d17e:	2380      	movs	r3, #128	; 0x80
 800d180:	03db      	lsls	r3, r3, #15
 800d182:	4013      	ands	r3, r2
 800d184:	d009      	beq.n	800d19a <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	2280      	movs	r2, #128	; 0x80
 800d18c:	0352      	lsls	r2, r2, #13
 800d18e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	0018      	movs	r0, r3
 800d194:	f000 fe2a 	bl	800ddec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d198:	e030      	b.n	800d1fc <HAL_UART_IRQHandler+0x594>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800d19a:	23a4      	movs	r3, #164	; 0xa4
 800d19c:	18fb      	adds	r3, r7, r3
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	2280      	movs	r2, #128	; 0x80
 800d1a2:	4013      	ands	r3, r2
 800d1a4:	d00f      	beq.n	800d1c6 <HAL_UART_IRQHandler+0x55e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800d1a6:	23a0      	movs	r3, #160	; 0xa0
 800d1a8:	18fb      	adds	r3, r7, r3
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	2280      	movs	r2, #128	; 0x80
 800d1ae:	4013      	ands	r3, r2
 800d1b0:	d009      	beq.n	800d1c6 <HAL_UART_IRQHandler+0x55e>
  {
    if (huart->TxISR != NULL)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d01f      	beq.n	800d1fa <HAL_UART_IRQHandler+0x592>
    {
      huart->TxISR(huart);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	0010      	movs	r0, r2
 800d1c2:	4798      	blx	r3
    }
    return;
 800d1c4:	e019      	b.n	800d1fa <HAL_UART_IRQHandler+0x592>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d1c6:	23a4      	movs	r3, #164	; 0xa4
 800d1c8:	18fb      	adds	r3, r7, r3
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	2240      	movs	r2, #64	; 0x40
 800d1ce:	4013      	ands	r3, r2
 800d1d0:	d014      	beq.n	800d1fc <HAL_UART_IRQHandler+0x594>
 800d1d2:	23a0      	movs	r3, #160	; 0xa0
 800d1d4:	18fb      	adds	r3, r7, r3
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	2240      	movs	r2, #64	; 0x40
 800d1da:	4013      	ands	r3, r2
 800d1dc:	d00e      	beq.n	800d1fc <HAL_UART_IRQHandler+0x594>
  {
    UART_EndTransmit_IT(huart);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	0018      	movs	r0, r3
 800d1e2:	f000 fdda 	bl	800dd9a <UART_EndTransmit_IT>
    return;
 800d1e6:	46c0      	nop			; (mov r8, r8)
 800d1e8:	e008      	b.n	800d1fc <HAL_UART_IRQHandler+0x594>
      return;
 800d1ea:	46c0      	nop			; (mov r8, r8)
 800d1ec:	e006      	b.n	800d1fc <HAL_UART_IRQHandler+0x594>
    return;
 800d1ee:	46c0      	nop			; (mov r8, r8)
 800d1f0:	e004      	b.n	800d1fc <HAL_UART_IRQHandler+0x594>
      return;
 800d1f2:	46c0      	nop			; (mov r8, r8)
 800d1f4:	e002      	b.n	800d1fc <HAL_UART_IRQHandler+0x594>
      return;
 800d1f6:	46c0      	nop			; (mov r8, r8)
 800d1f8:	e000      	b.n	800d1fc <HAL_UART_IRQHandler+0x594>
    return;
 800d1fa:	46c0      	nop			; (mov r8, r8)
  }

}
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	b02a      	add	sp, #168	; 0xa8
 800d200:	bd80      	pop	{r7, pc}
 800d202:	46c0      	nop			; (mov r8, r8)
 800d204:	fffffeff 	.word	0xfffffeff
 800d208:	fffffedf 	.word	0xfffffedf

0800d20c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b082      	sub	sp, #8
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d214:	46c0      	nop			; (mov r8, r8)
 800d216:	46bd      	mov	sp, r7
 800d218:	b002      	add	sp, #8
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b082      	sub	sp, #8
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d224:	46c0      	nop			; (mov r8, r8)
 800d226:	46bd      	mov	sp, r7
 800d228:	b002      	add	sp, #8
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b082      	sub	sp, #8
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d234:	46c0      	nop			; (mov r8, r8)
 800d236:	46bd      	mov	sp, r7
 800d238:	b002      	add	sp, #8
 800d23a:	bd80      	pop	{r7, pc}

0800d23c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	000a      	movs	r2, r1
 800d246:	1cbb      	adds	r3, r7, #2
 800d248:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d24a:	46c0      	nop			; (mov r8, r8)
 800d24c:	46bd      	mov	sp, r7
 800d24e:	b002      	add	sp, #8
 800d250:	bd80      	pop	{r7, pc}
	...

0800d254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d254:	b5b0      	push	{r4, r5, r7, lr}
 800d256:	b08e      	sub	sp, #56	; 0x38
 800d258:	af00      	add	r7, sp, #0
 800d25a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d25c:	231a      	movs	r3, #26
 800d25e:	2218      	movs	r2, #24
 800d260:	4694      	mov	ip, r2
 800d262:	44bc      	add	ip, r7
 800d264:	4463      	add	r3, ip
 800d266:	2200      	movs	r2, #0
 800d268:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d26a:	69fb      	ldr	r3, [r7, #28]
 800d26c:	689a      	ldr	r2, [r3, #8]
 800d26e:	69fb      	ldr	r3, [r7, #28]
 800d270:	691b      	ldr	r3, [r3, #16]
 800d272:	431a      	orrs	r2, r3
 800d274:	69fb      	ldr	r3, [r7, #28]
 800d276:	695b      	ldr	r3, [r3, #20]
 800d278:	431a      	orrs	r2, r3
 800d27a:	69fb      	ldr	r3, [r7, #28]
 800d27c:	69db      	ldr	r3, [r3, #28]
 800d27e:	4313      	orrs	r3, r2
 800d280:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d282:	69fb      	ldr	r3, [r7, #28]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	4acb      	ldr	r2, [pc, #812]	; (800d5b8 <UART_SetConfig+0x364>)
 800d28a:	4013      	ands	r3, r2
 800d28c:	0019      	movs	r1, r3
 800d28e:	69fb      	ldr	r3, [r7, #28]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d294:	430a      	orrs	r2, r1
 800d296:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d298:	69fb      	ldr	r3, [r7, #28]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	685b      	ldr	r3, [r3, #4]
 800d29e:	4ac7      	ldr	r2, [pc, #796]	; (800d5bc <UART_SetConfig+0x368>)
 800d2a0:	4013      	ands	r3, r2
 800d2a2:	0019      	movs	r1, r3
 800d2a4:	69fb      	ldr	r3, [r7, #28]
 800d2a6:	68da      	ldr	r2, [r3, #12]
 800d2a8:	69fb      	ldr	r3, [r7, #28]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	430a      	orrs	r2, r1
 800d2ae:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d2b0:	69fb      	ldr	r3, [r7, #28]
 800d2b2:	699b      	ldr	r3, [r3, #24]
 800d2b4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d2b6:	69fb      	ldr	r3, [r7, #28]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4ac1      	ldr	r2, [pc, #772]	; (800d5c0 <UART_SetConfig+0x36c>)
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d004      	beq.n	800d2ca <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d2c0:	69fb      	ldr	r3, [r7, #28]
 800d2c2:	6a1b      	ldr	r3, [r3, #32]
 800d2c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d2ca:	69fb      	ldr	r3, [r7, #28]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	689b      	ldr	r3, [r3, #8]
 800d2d0:	4abc      	ldr	r2, [pc, #752]	; (800d5c4 <UART_SetConfig+0x370>)
 800d2d2:	4013      	ands	r3, r2
 800d2d4:	0019      	movs	r1, r3
 800d2d6:	69fb      	ldr	r3, [r7, #28]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2dc:	430a      	orrs	r2, r1
 800d2de:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d2e0:	69fb      	ldr	r3, [r7, #28]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4ab8      	ldr	r2, [pc, #736]	; (800d5c8 <UART_SetConfig+0x374>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d134      	bne.n	800d354 <UART_SetConfig+0x100>
 800d2ea:	4bb8      	ldr	r3, [pc, #736]	; (800d5cc <UART_SetConfig+0x378>)
 800d2ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2ee:	2203      	movs	r2, #3
 800d2f0:	4013      	ands	r3, r2
 800d2f2:	2b01      	cmp	r3, #1
 800d2f4:	d015      	beq.n	800d322 <UART_SetConfig+0xce>
 800d2f6:	d304      	bcc.n	800d302 <UART_SetConfig+0xae>
 800d2f8:	2b02      	cmp	r3, #2
 800d2fa:	d00a      	beq.n	800d312 <UART_SetConfig+0xbe>
 800d2fc:	2b03      	cmp	r3, #3
 800d2fe:	d018      	beq.n	800d332 <UART_SetConfig+0xde>
 800d300:	e01f      	b.n	800d342 <UART_SetConfig+0xee>
 800d302:	231b      	movs	r3, #27
 800d304:	2218      	movs	r2, #24
 800d306:	4694      	mov	ip, r2
 800d308:	44bc      	add	ip, r7
 800d30a:	4463      	add	r3, ip
 800d30c:	2201      	movs	r2, #1
 800d30e:	701a      	strb	r2, [r3, #0]
 800d310:	e0c5      	b.n	800d49e <UART_SetConfig+0x24a>
 800d312:	231b      	movs	r3, #27
 800d314:	2218      	movs	r2, #24
 800d316:	4694      	mov	ip, r2
 800d318:	44bc      	add	ip, r7
 800d31a:	4463      	add	r3, ip
 800d31c:	2202      	movs	r2, #2
 800d31e:	701a      	strb	r2, [r3, #0]
 800d320:	e0bd      	b.n	800d49e <UART_SetConfig+0x24a>
 800d322:	231b      	movs	r3, #27
 800d324:	2218      	movs	r2, #24
 800d326:	4694      	mov	ip, r2
 800d328:	44bc      	add	ip, r7
 800d32a:	4463      	add	r3, ip
 800d32c:	2204      	movs	r2, #4
 800d32e:	701a      	strb	r2, [r3, #0]
 800d330:	e0b5      	b.n	800d49e <UART_SetConfig+0x24a>
 800d332:	231b      	movs	r3, #27
 800d334:	2218      	movs	r2, #24
 800d336:	4694      	mov	ip, r2
 800d338:	44bc      	add	ip, r7
 800d33a:	4463      	add	r3, ip
 800d33c:	2208      	movs	r2, #8
 800d33e:	701a      	strb	r2, [r3, #0]
 800d340:	e0ad      	b.n	800d49e <UART_SetConfig+0x24a>
 800d342:	231b      	movs	r3, #27
 800d344:	2218      	movs	r2, #24
 800d346:	4694      	mov	ip, r2
 800d348:	44bc      	add	ip, r7
 800d34a:	4463      	add	r3, ip
 800d34c:	2210      	movs	r2, #16
 800d34e:	701a      	strb	r2, [r3, #0]
 800d350:	46c0      	nop			; (mov r8, r8)
 800d352:	e0a4      	b.n	800d49e <UART_SetConfig+0x24a>
 800d354:	69fb      	ldr	r3, [r7, #28]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	4a9d      	ldr	r2, [pc, #628]	; (800d5d0 <UART_SetConfig+0x37c>)
 800d35a:	4293      	cmp	r3, r2
 800d35c:	d137      	bne.n	800d3ce <UART_SetConfig+0x17a>
 800d35e:	4b9b      	ldr	r3, [pc, #620]	; (800d5cc <UART_SetConfig+0x378>)
 800d360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d362:	220c      	movs	r2, #12
 800d364:	4013      	ands	r3, r2
 800d366:	2b04      	cmp	r3, #4
 800d368:	d018      	beq.n	800d39c <UART_SetConfig+0x148>
 800d36a:	d802      	bhi.n	800d372 <UART_SetConfig+0x11e>
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d005      	beq.n	800d37c <UART_SetConfig+0x128>
 800d370:	e024      	b.n	800d3bc <UART_SetConfig+0x168>
 800d372:	2b08      	cmp	r3, #8
 800d374:	d00a      	beq.n	800d38c <UART_SetConfig+0x138>
 800d376:	2b0c      	cmp	r3, #12
 800d378:	d018      	beq.n	800d3ac <UART_SetConfig+0x158>
 800d37a:	e01f      	b.n	800d3bc <UART_SetConfig+0x168>
 800d37c:	231b      	movs	r3, #27
 800d37e:	2218      	movs	r2, #24
 800d380:	4694      	mov	ip, r2
 800d382:	44bc      	add	ip, r7
 800d384:	4463      	add	r3, ip
 800d386:	2200      	movs	r2, #0
 800d388:	701a      	strb	r2, [r3, #0]
 800d38a:	e088      	b.n	800d49e <UART_SetConfig+0x24a>
 800d38c:	231b      	movs	r3, #27
 800d38e:	2218      	movs	r2, #24
 800d390:	4694      	mov	ip, r2
 800d392:	44bc      	add	ip, r7
 800d394:	4463      	add	r3, ip
 800d396:	2202      	movs	r2, #2
 800d398:	701a      	strb	r2, [r3, #0]
 800d39a:	e080      	b.n	800d49e <UART_SetConfig+0x24a>
 800d39c:	231b      	movs	r3, #27
 800d39e:	2218      	movs	r2, #24
 800d3a0:	4694      	mov	ip, r2
 800d3a2:	44bc      	add	ip, r7
 800d3a4:	4463      	add	r3, ip
 800d3a6:	2204      	movs	r2, #4
 800d3a8:	701a      	strb	r2, [r3, #0]
 800d3aa:	e078      	b.n	800d49e <UART_SetConfig+0x24a>
 800d3ac:	231b      	movs	r3, #27
 800d3ae:	2218      	movs	r2, #24
 800d3b0:	4694      	mov	ip, r2
 800d3b2:	44bc      	add	ip, r7
 800d3b4:	4463      	add	r3, ip
 800d3b6:	2208      	movs	r2, #8
 800d3b8:	701a      	strb	r2, [r3, #0]
 800d3ba:	e070      	b.n	800d49e <UART_SetConfig+0x24a>
 800d3bc:	231b      	movs	r3, #27
 800d3be:	2218      	movs	r2, #24
 800d3c0:	4694      	mov	ip, r2
 800d3c2:	44bc      	add	ip, r7
 800d3c4:	4463      	add	r3, ip
 800d3c6:	2210      	movs	r2, #16
 800d3c8:	701a      	strb	r2, [r3, #0]
 800d3ca:	46c0      	nop			; (mov r8, r8)
 800d3cc:	e067      	b.n	800d49e <UART_SetConfig+0x24a>
 800d3ce:	69fb      	ldr	r3, [r7, #28]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	4a80      	ldr	r2, [pc, #512]	; (800d5d4 <UART_SetConfig+0x380>)
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	d107      	bne.n	800d3e8 <UART_SetConfig+0x194>
 800d3d8:	231b      	movs	r3, #27
 800d3da:	2218      	movs	r2, #24
 800d3dc:	4694      	mov	ip, r2
 800d3de:	44bc      	add	ip, r7
 800d3e0:	4463      	add	r3, ip
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	701a      	strb	r2, [r3, #0]
 800d3e6:	e05a      	b.n	800d49e <UART_SetConfig+0x24a>
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4a7a      	ldr	r2, [pc, #488]	; (800d5d8 <UART_SetConfig+0x384>)
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	d107      	bne.n	800d402 <UART_SetConfig+0x1ae>
 800d3f2:	231b      	movs	r3, #27
 800d3f4:	2218      	movs	r2, #24
 800d3f6:	4694      	mov	ip, r2
 800d3f8:	44bc      	add	ip, r7
 800d3fa:	4463      	add	r3, ip
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	701a      	strb	r2, [r3, #0]
 800d400:	e04d      	b.n	800d49e <UART_SetConfig+0x24a>
 800d402:	69fb      	ldr	r3, [r7, #28]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	4a6e      	ldr	r2, [pc, #440]	; (800d5c0 <UART_SetConfig+0x36c>)
 800d408:	4293      	cmp	r3, r2
 800d40a:	d141      	bne.n	800d490 <UART_SetConfig+0x23c>
 800d40c:	4b6f      	ldr	r3, [pc, #444]	; (800d5cc <UART_SetConfig+0x378>)
 800d40e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d410:	23c0      	movs	r3, #192	; 0xc0
 800d412:	011b      	lsls	r3, r3, #4
 800d414:	4013      	ands	r3, r2
 800d416:	2280      	movs	r2, #128	; 0x80
 800d418:	00d2      	lsls	r2, r2, #3
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d01f      	beq.n	800d45e <UART_SetConfig+0x20a>
 800d41e:	2280      	movs	r2, #128	; 0x80
 800d420:	00d2      	lsls	r2, r2, #3
 800d422:	4293      	cmp	r3, r2
 800d424:	d802      	bhi.n	800d42c <UART_SetConfig+0x1d8>
 800d426:	2b00      	cmp	r3, #0
 800d428:	d009      	beq.n	800d43e <UART_SetConfig+0x1ea>
 800d42a:	e028      	b.n	800d47e <UART_SetConfig+0x22a>
 800d42c:	2280      	movs	r2, #128	; 0x80
 800d42e:	0112      	lsls	r2, r2, #4
 800d430:	4293      	cmp	r3, r2
 800d432:	d00c      	beq.n	800d44e <UART_SetConfig+0x1fa>
 800d434:	22c0      	movs	r2, #192	; 0xc0
 800d436:	0112      	lsls	r2, r2, #4
 800d438:	4293      	cmp	r3, r2
 800d43a:	d018      	beq.n	800d46e <UART_SetConfig+0x21a>
 800d43c:	e01f      	b.n	800d47e <UART_SetConfig+0x22a>
 800d43e:	231b      	movs	r3, #27
 800d440:	2218      	movs	r2, #24
 800d442:	4694      	mov	ip, r2
 800d444:	44bc      	add	ip, r7
 800d446:	4463      	add	r3, ip
 800d448:	2200      	movs	r2, #0
 800d44a:	701a      	strb	r2, [r3, #0]
 800d44c:	e027      	b.n	800d49e <UART_SetConfig+0x24a>
 800d44e:	231b      	movs	r3, #27
 800d450:	2218      	movs	r2, #24
 800d452:	4694      	mov	ip, r2
 800d454:	44bc      	add	ip, r7
 800d456:	4463      	add	r3, ip
 800d458:	2202      	movs	r2, #2
 800d45a:	701a      	strb	r2, [r3, #0]
 800d45c:	e01f      	b.n	800d49e <UART_SetConfig+0x24a>
 800d45e:	231b      	movs	r3, #27
 800d460:	2218      	movs	r2, #24
 800d462:	4694      	mov	ip, r2
 800d464:	44bc      	add	ip, r7
 800d466:	4463      	add	r3, ip
 800d468:	2204      	movs	r2, #4
 800d46a:	701a      	strb	r2, [r3, #0]
 800d46c:	e017      	b.n	800d49e <UART_SetConfig+0x24a>
 800d46e:	231b      	movs	r3, #27
 800d470:	2218      	movs	r2, #24
 800d472:	4694      	mov	ip, r2
 800d474:	44bc      	add	ip, r7
 800d476:	4463      	add	r3, ip
 800d478:	2208      	movs	r2, #8
 800d47a:	701a      	strb	r2, [r3, #0]
 800d47c:	e00f      	b.n	800d49e <UART_SetConfig+0x24a>
 800d47e:	231b      	movs	r3, #27
 800d480:	2218      	movs	r2, #24
 800d482:	4694      	mov	ip, r2
 800d484:	44bc      	add	ip, r7
 800d486:	4463      	add	r3, ip
 800d488:	2210      	movs	r2, #16
 800d48a:	701a      	strb	r2, [r3, #0]
 800d48c:	46c0      	nop			; (mov r8, r8)
 800d48e:	e006      	b.n	800d49e <UART_SetConfig+0x24a>
 800d490:	231b      	movs	r3, #27
 800d492:	2218      	movs	r2, #24
 800d494:	4694      	mov	ip, r2
 800d496:	44bc      	add	ip, r7
 800d498:	4463      	add	r3, ip
 800d49a:	2210      	movs	r2, #16
 800d49c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d49e:	69fb      	ldr	r3, [r7, #28]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	4a47      	ldr	r2, [pc, #284]	; (800d5c0 <UART_SetConfig+0x36c>)
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d000      	beq.n	800d4aa <UART_SetConfig+0x256>
 800d4a8:	e0a0      	b.n	800d5ec <UART_SetConfig+0x398>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d4aa:	231b      	movs	r3, #27
 800d4ac:	2218      	movs	r2, #24
 800d4ae:	4694      	mov	ip, r2
 800d4b0:	44bc      	add	ip, r7
 800d4b2:	4463      	add	r3, ip
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	2b02      	cmp	r3, #2
 800d4b8:	d00d      	beq.n	800d4d6 <UART_SetConfig+0x282>
 800d4ba:	dc02      	bgt.n	800d4c2 <UART_SetConfig+0x26e>
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d005      	beq.n	800d4cc <UART_SetConfig+0x278>
 800d4c0:	e01d      	b.n	800d4fe <UART_SetConfig+0x2aa>
 800d4c2:	2b04      	cmp	r3, #4
 800d4c4:	d012      	beq.n	800d4ec <UART_SetConfig+0x298>
 800d4c6:	2b08      	cmp	r3, #8
 800d4c8:	d015      	beq.n	800d4f6 <UART_SetConfig+0x2a2>
 800d4ca:	e018      	b.n	800d4fe <UART_SetConfig+0x2aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d4cc:	f7fe fb2e 	bl	800bb2c <HAL_RCC_GetPCLK1Freq>
 800d4d0:	0003      	movs	r3, r0
 800d4d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d4d4:	e01d      	b.n	800d512 <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d4d6:	4b3d      	ldr	r3, [pc, #244]	; (800d5cc <UART_SetConfig+0x378>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	2210      	movs	r2, #16
 800d4dc:	4013      	ands	r3, r2
 800d4de:	d002      	beq.n	800d4e6 <UART_SetConfig+0x292>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800d4e0:	4b3e      	ldr	r3, [pc, #248]	; (800d5dc <UART_SetConfig+0x388>)
 800d4e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d4e4:	e015      	b.n	800d512 <UART_SetConfig+0x2be>
          pclk = (uint32_t) HSI_VALUE;
 800d4e6:	4b3e      	ldr	r3, [pc, #248]	; (800d5e0 <UART_SetConfig+0x38c>)
 800d4e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d4ea:	e012      	b.n	800d512 <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d4ec:	f7fe fa72 	bl	800b9d4 <HAL_RCC_GetSysClockFreq>
 800d4f0:	0003      	movs	r3, r0
 800d4f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d4f4:	e00d      	b.n	800d512 <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d4f6:	2380      	movs	r3, #128	; 0x80
 800d4f8:	021b      	lsls	r3, r3, #8
 800d4fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d4fc:	e009      	b.n	800d512 <UART_SetConfig+0x2be>
      default:
        pclk = 0U;
 800d4fe:	2300      	movs	r3, #0
 800d500:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d502:	231a      	movs	r3, #26
 800d504:	2218      	movs	r2, #24
 800d506:	4694      	mov	ip, r2
 800d508:	44bc      	add	ip, r7
 800d50a:	4463      	add	r3, ip
 800d50c:	2201      	movs	r2, #1
 800d50e:	701a      	strb	r2, [r3, #0]
        break;
 800d510:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d514:	2b00      	cmp	r3, #0
 800d516:	d100      	bne.n	800d51a <UART_SetConfig+0x2c6>
 800d518:	e13c      	b.n	800d794 <UART_SetConfig+0x540>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d51a:	69fb      	ldr	r3, [r7, #28]
 800d51c:	685a      	ldr	r2, [r3, #4]
 800d51e:	0013      	movs	r3, r2
 800d520:	005b      	lsls	r3, r3, #1
 800d522:	189b      	adds	r3, r3, r2
 800d524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d526:	429a      	cmp	r2, r3
 800d528:	d305      	bcc.n	800d536 <UART_SetConfig+0x2e2>
          (pclk > (4096U * huart->Init.BaudRate)))
 800d52a:	69fb      	ldr	r3, [r7, #28]
 800d52c:	685b      	ldr	r3, [r3, #4]
 800d52e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d532:	429a      	cmp	r2, r3
 800d534:	d907      	bls.n	800d546 <UART_SetConfig+0x2f2>
      {
        ret = HAL_ERROR;
 800d536:	231a      	movs	r3, #26
 800d538:	2218      	movs	r2, #24
 800d53a:	4694      	mov	ip, r2
 800d53c:	44bc      	add	ip, r7
 800d53e:	4463      	add	r3, ip
 800d540:	2201      	movs	r2, #1
 800d542:	701a      	strb	r2, [r3, #0]
 800d544:	e126      	b.n	800d794 <UART_SetConfig+0x540>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800d546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d548:	613b      	str	r3, [r7, #16]
 800d54a:	2300      	movs	r3, #0
 800d54c:	617b      	str	r3, [r7, #20]
 800d54e:	6939      	ldr	r1, [r7, #16]
 800d550:	697a      	ldr	r2, [r7, #20]
 800d552:	000b      	movs	r3, r1
 800d554:	0e1b      	lsrs	r3, r3, #24
 800d556:	0010      	movs	r0, r2
 800d558:	0205      	lsls	r5, r0, #8
 800d55a:	431d      	orrs	r5, r3
 800d55c:	000b      	movs	r3, r1
 800d55e:	021c      	lsls	r4, r3, #8
 800d560:	69fb      	ldr	r3, [r7, #28]
 800d562:	685b      	ldr	r3, [r3, #4]
 800d564:	085b      	lsrs	r3, r3, #1
 800d566:	60bb      	str	r3, [r7, #8]
 800d568:	2300      	movs	r3, #0
 800d56a:	60fb      	str	r3, [r7, #12]
 800d56c:	68b8      	ldr	r0, [r7, #8]
 800d56e:	68f9      	ldr	r1, [r7, #12]
 800d570:	1900      	adds	r0, r0, r4
 800d572:	4169      	adcs	r1, r5
 800d574:	69fb      	ldr	r3, [r7, #28]
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	603b      	str	r3, [r7, #0]
 800d57a:	2300      	movs	r3, #0
 800d57c:	607b      	str	r3, [r7, #4]
 800d57e:	683a      	ldr	r2, [r7, #0]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f7f7 ff8b 	bl	800549c <__aeabi_uldivmod>
 800d586:	0003      	movs	r3, r0
 800d588:	000c      	movs	r4, r1
 800d58a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d58e:	4a15      	ldr	r2, [pc, #84]	; (800d5e4 <UART_SetConfig+0x390>)
 800d590:	4293      	cmp	r3, r2
 800d592:	d908      	bls.n	800d5a6 <UART_SetConfig+0x352>
 800d594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d596:	4a14      	ldr	r2, [pc, #80]	; (800d5e8 <UART_SetConfig+0x394>)
 800d598:	4293      	cmp	r3, r2
 800d59a:	d804      	bhi.n	800d5a6 <UART_SetConfig+0x352>
        {
          huart->Instance->BRR = usartdiv;
 800d59c:	69fb      	ldr	r3, [r7, #28]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5a2:	60da      	str	r2, [r3, #12]
 800d5a4:	e0f6      	b.n	800d794 <UART_SetConfig+0x540>
        }
        else
        {
          ret = HAL_ERROR;
 800d5a6:	231a      	movs	r3, #26
 800d5a8:	2218      	movs	r2, #24
 800d5aa:	4694      	mov	ip, r2
 800d5ac:	44bc      	add	ip, r7
 800d5ae:	4463      	add	r3, ip
 800d5b0:	2201      	movs	r2, #1
 800d5b2:	701a      	strb	r2, [r3, #0]
 800d5b4:	e0ee      	b.n	800d794 <UART_SetConfig+0x540>
 800d5b6:	46c0      	nop			; (mov r8, r8)
 800d5b8:	efff69f3 	.word	0xefff69f3
 800d5bc:	ffffcfff 	.word	0xffffcfff
 800d5c0:	40004800 	.word	0x40004800
 800d5c4:	fffff4ff 	.word	0xfffff4ff
 800d5c8:	40013800 	.word	0x40013800
 800d5cc:	40021000 	.word	0x40021000
 800d5d0:	40004400 	.word	0x40004400
 800d5d4:	40004c00 	.word	0x40004c00
 800d5d8:	40005000 	.word	0x40005000
 800d5dc:	003d0900 	.word	0x003d0900
 800d5e0:	00f42400 	.word	0x00f42400
 800d5e4:	000002ff 	.word	0x000002ff
 800d5e8:	000fffff 	.word	0x000fffff
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d5ec:	69fb      	ldr	r3, [r7, #28]
 800d5ee:	69da      	ldr	r2, [r3, #28]
 800d5f0:	2380      	movs	r3, #128	; 0x80
 800d5f2:	021b      	lsls	r3, r3, #8
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d000      	beq.n	800d5fa <UART_SetConfig+0x3a6>
 800d5f8:	e073      	b.n	800d6e2 <UART_SetConfig+0x48e>
  {
    switch (clocksource)
 800d5fa:	231b      	movs	r3, #27
 800d5fc:	2218      	movs	r2, #24
 800d5fe:	4694      	mov	ip, r2
 800d600:	44bc      	add	ip, r7
 800d602:	4463      	add	r3, ip
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	2b08      	cmp	r3, #8
 800d608:	d822      	bhi.n	800d650 <UART_SetConfig+0x3fc>
 800d60a:	009a      	lsls	r2, r3, #2
 800d60c:	4b69      	ldr	r3, [pc, #420]	; (800d7b4 <UART_SetConfig+0x560>)
 800d60e:	18d3      	adds	r3, r2, r3
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d614:	f7fe fa8a 	bl	800bb2c <HAL_RCC_GetPCLK1Freq>
 800d618:	0003      	movs	r3, r0
 800d61a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d61c:	e022      	b.n	800d664 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d61e:	f7fe fa9b 	bl	800bb58 <HAL_RCC_GetPCLK2Freq>
 800d622:	0003      	movs	r3, r0
 800d624:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d626:	e01d      	b.n	800d664 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d628:	4b63      	ldr	r3, [pc, #396]	; (800d7b8 <UART_SetConfig+0x564>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	2210      	movs	r2, #16
 800d62e:	4013      	ands	r3, r2
 800d630:	d002      	beq.n	800d638 <UART_SetConfig+0x3e4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800d632:	4b62      	ldr	r3, [pc, #392]	; (800d7bc <UART_SetConfig+0x568>)
 800d634:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d636:	e015      	b.n	800d664 <UART_SetConfig+0x410>
          pclk = (uint32_t) HSI_VALUE;
 800d638:	4b61      	ldr	r3, [pc, #388]	; (800d7c0 <UART_SetConfig+0x56c>)
 800d63a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d63c:	e012      	b.n	800d664 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d63e:	f7fe f9c9 	bl	800b9d4 <HAL_RCC_GetSysClockFreq>
 800d642:	0003      	movs	r3, r0
 800d644:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d646:	e00d      	b.n	800d664 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d648:	2380      	movs	r3, #128	; 0x80
 800d64a:	021b      	lsls	r3, r3, #8
 800d64c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d64e:	e009      	b.n	800d664 <UART_SetConfig+0x410>
      default:
        pclk = 0U;
 800d650:	2300      	movs	r3, #0
 800d652:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d654:	231a      	movs	r3, #26
 800d656:	2218      	movs	r2, #24
 800d658:	4694      	mov	ip, r2
 800d65a:	44bc      	add	ip, r7
 800d65c:	4463      	add	r3, ip
 800d65e:	2201      	movs	r2, #1
 800d660:	701a      	strb	r2, [r3, #0]
        break;
 800d662:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d666:	2b00      	cmp	r3, #0
 800d668:	d100      	bne.n	800d66c <UART_SetConfig+0x418>
 800d66a:	e093      	b.n	800d794 <UART_SetConfig+0x540>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d66e:	005a      	lsls	r2, r3, #1
 800d670:	69fb      	ldr	r3, [r7, #28]
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	085b      	lsrs	r3, r3, #1
 800d676:	18d2      	adds	r2, r2, r3
 800d678:	69fb      	ldr	r3, [r7, #28]
 800d67a:	685b      	ldr	r3, [r3, #4]
 800d67c:	0019      	movs	r1, r3
 800d67e:	0010      	movs	r0, r2
 800d680:	f7f7 fd58 	bl	8005134 <__udivsi3>
 800d684:	0003      	movs	r3, r0
 800d686:	b29b      	uxth	r3, r3
 800d688:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d68c:	2b0f      	cmp	r3, #15
 800d68e:	d920      	bls.n	800d6d2 <UART_SetConfig+0x47e>
 800d690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d692:	4a4c      	ldr	r2, [pc, #304]	; (800d7c4 <UART_SetConfig+0x570>)
 800d694:	4293      	cmp	r3, r2
 800d696:	d81c      	bhi.n	800d6d2 <UART_SetConfig+0x47e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d69a:	b29a      	uxth	r2, r3
 800d69c:	200e      	movs	r0, #14
 800d69e:	2418      	movs	r4, #24
 800d6a0:	193b      	adds	r3, r7, r4
 800d6a2:	181b      	adds	r3, r3, r0
 800d6a4:	210f      	movs	r1, #15
 800d6a6:	438a      	bics	r2, r1
 800d6a8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ac:	085b      	lsrs	r3, r3, #1
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	2207      	movs	r2, #7
 800d6b2:	4013      	ands	r3, r2
 800d6b4:	b299      	uxth	r1, r3
 800d6b6:	193b      	adds	r3, r7, r4
 800d6b8:	181b      	adds	r3, r3, r0
 800d6ba:	193a      	adds	r2, r7, r4
 800d6bc:	1812      	adds	r2, r2, r0
 800d6be:	8812      	ldrh	r2, [r2, #0]
 800d6c0:	430a      	orrs	r2, r1
 800d6c2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800d6c4:	69fb      	ldr	r3, [r7, #28]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	193a      	adds	r2, r7, r4
 800d6ca:	1812      	adds	r2, r2, r0
 800d6cc:	8812      	ldrh	r2, [r2, #0]
 800d6ce:	60da      	str	r2, [r3, #12]
 800d6d0:	e060      	b.n	800d794 <UART_SetConfig+0x540>
      }
      else
      {
        ret = HAL_ERROR;
 800d6d2:	231a      	movs	r3, #26
 800d6d4:	2218      	movs	r2, #24
 800d6d6:	4694      	mov	ip, r2
 800d6d8:	44bc      	add	ip, r7
 800d6da:	4463      	add	r3, ip
 800d6dc:	2201      	movs	r2, #1
 800d6de:	701a      	strb	r2, [r3, #0]
 800d6e0:	e058      	b.n	800d794 <UART_SetConfig+0x540>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d6e2:	231b      	movs	r3, #27
 800d6e4:	2218      	movs	r2, #24
 800d6e6:	4694      	mov	ip, r2
 800d6e8:	44bc      	add	ip, r7
 800d6ea:	4463      	add	r3, ip
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	2b08      	cmp	r3, #8
 800d6f0:	d822      	bhi.n	800d738 <UART_SetConfig+0x4e4>
 800d6f2:	009a      	lsls	r2, r3, #2
 800d6f4:	4b34      	ldr	r3, [pc, #208]	; (800d7c8 <UART_SetConfig+0x574>)
 800d6f6:	18d3      	adds	r3, r2, r3
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d6fc:	f7fe fa16 	bl	800bb2c <HAL_RCC_GetPCLK1Freq>
 800d700:	0003      	movs	r3, r0
 800d702:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d704:	e022      	b.n	800d74c <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d706:	f7fe fa27 	bl	800bb58 <HAL_RCC_GetPCLK2Freq>
 800d70a:	0003      	movs	r3, r0
 800d70c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d70e:	e01d      	b.n	800d74c <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d710:	4b29      	ldr	r3, [pc, #164]	; (800d7b8 <UART_SetConfig+0x564>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	2210      	movs	r2, #16
 800d716:	4013      	ands	r3, r2
 800d718:	d002      	beq.n	800d720 <UART_SetConfig+0x4cc>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800d71a:	4b28      	ldr	r3, [pc, #160]	; (800d7bc <UART_SetConfig+0x568>)
 800d71c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d71e:	e015      	b.n	800d74c <UART_SetConfig+0x4f8>
          pclk = (uint32_t) HSI_VALUE;
 800d720:	4b27      	ldr	r3, [pc, #156]	; (800d7c0 <UART_SetConfig+0x56c>)
 800d722:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d724:	e012      	b.n	800d74c <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d726:	f7fe f955 	bl	800b9d4 <HAL_RCC_GetSysClockFreq>
 800d72a:	0003      	movs	r3, r0
 800d72c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d72e:	e00d      	b.n	800d74c <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d730:	2380      	movs	r3, #128	; 0x80
 800d732:	021b      	lsls	r3, r3, #8
 800d734:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d736:	e009      	b.n	800d74c <UART_SetConfig+0x4f8>
      default:
        pclk = 0U;
 800d738:	2300      	movs	r3, #0
 800d73a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d73c:	231a      	movs	r3, #26
 800d73e:	2218      	movs	r2, #24
 800d740:	4694      	mov	ip, r2
 800d742:	44bc      	add	ip, r7
 800d744:	4463      	add	r3, ip
 800d746:	2201      	movs	r2, #1
 800d748:	701a      	strb	r2, [r3, #0]
        break;
 800d74a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800d74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d020      	beq.n	800d794 <UART_SetConfig+0x540>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d752:	69fb      	ldr	r3, [r7, #28]
 800d754:	685b      	ldr	r3, [r3, #4]
 800d756:	085a      	lsrs	r2, r3, #1
 800d758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d75a:	18d2      	adds	r2, r2, r3
 800d75c:	69fb      	ldr	r3, [r7, #28]
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	0019      	movs	r1, r3
 800d762:	0010      	movs	r0, r2
 800d764:	f7f7 fce6 	bl	8005134 <__udivsi3>
 800d768:	0003      	movs	r3, r0
 800d76a:	b29b      	uxth	r3, r3
 800d76c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d770:	2b0f      	cmp	r3, #15
 800d772:	d908      	bls.n	800d786 <UART_SetConfig+0x532>
 800d774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d776:	4a13      	ldr	r2, [pc, #76]	; (800d7c4 <UART_SetConfig+0x570>)
 800d778:	4293      	cmp	r3, r2
 800d77a:	d804      	bhi.n	800d786 <UART_SetConfig+0x532>
      {
        huart->Instance->BRR = usartdiv;
 800d77c:	69fb      	ldr	r3, [r7, #28]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d782:	60da      	str	r2, [r3, #12]
 800d784:	e006      	b.n	800d794 <UART_SetConfig+0x540>
      }
      else
      {
        ret = HAL_ERROR;
 800d786:	231a      	movs	r3, #26
 800d788:	2218      	movs	r2, #24
 800d78a:	4694      	mov	ip, r2
 800d78c:	44bc      	add	ip, r7
 800d78e:	4463      	add	r3, ip
 800d790:	2201      	movs	r2, #1
 800d792:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	2200      	movs	r2, #0
 800d798:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800d79a:	69fb      	ldr	r3, [r7, #28]
 800d79c:	2200      	movs	r2, #0
 800d79e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800d7a0:	231a      	movs	r3, #26
 800d7a2:	2218      	movs	r2, #24
 800d7a4:	4694      	mov	ip, r2
 800d7a6:	44bc      	add	ip, r7
 800d7a8:	4463      	add	r3, ip
 800d7aa:	781b      	ldrb	r3, [r3, #0]
}
 800d7ac:	0018      	movs	r0, r3
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	b00e      	add	sp, #56	; 0x38
 800d7b2:	bdb0      	pop	{r4, r5, r7, pc}
 800d7b4:	08012b5c 	.word	0x08012b5c
 800d7b8:	40021000 	.word	0x40021000
 800d7bc:	003d0900 	.word	0x003d0900
 800d7c0:	00f42400 	.word	0x00f42400
 800d7c4:	0000ffff 	.word	0x0000ffff
 800d7c8:	08012b80 	.word	0x08012b80

0800d7cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b082      	sub	sp, #8
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7d8:	2201      	movs	r2, #1
 800d7da:	4013      	ands	r3, r2
 800d7dc:	d00b      	beq.n	800d7f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	685b      	ldr	r3, [r3, #4]
 800d7e4:	4a4a      	ldr	r2, [pc, #296]	; (800d910 <UART_AdvFeatureConfig+0x144>)
 800d7e6:	4013      	ands	r3, r2
 800d7e8:	0019      	movs	r1, r3
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	430a      	orrs	r2, r1
 800d7f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7fa:	2202      	movs	r2, #2
 800d7fc:	4013      	ands	r3, r2
 800d7fe:	d00b      	beq.n	800d818 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	685b      	ldr	r3, [r3, #4]
 800d806:	4a43      	ldr	r2, [pc, #268]	; (800d914 <UART_AdvFeatureConfig+0x148>)
 800d808:	4013      	ands	r3, r2
 800d80a:	0019      	movs	r1, r3
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	430a      	orrs	r2, r1
 800d816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d81c:	2204      	movs	r2, #4
 800d81e:	4013      	ands	r3, r2
 800d820:	d00b      	beq.n	800d83a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	4a3b      	ldr	r2, [pc, #236]	; (800d918 <UART_AdvFeatureConfig+0x14c>)
 800d82a:	4013      	ands	r3, r2
 800d82c:	0019      	movs	r1, r3
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	430a      	orrs	r2, r1
 800d838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d83e:	2208      	movs	r2, #8
 800d840:	4013      	ands	r3, r2
 800d842:	d00b      	beq.n	800d85c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	4a34      	ldr	r2, [pc, #208]	; (800d91c <UART_AdvFeatureConfig+0x150>)
 800d84c:	4013      	ands	r3, r2
 800d84e:	0019      	movs	r1, r3
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	430a      	orrs	r2, r1
 800d85a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d860:	2210      	movs	r2, #16
 800d862:	4013      	ands	r3, r2
 800d864:	d00b      	beq.n	800d87e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	689b      	ldr	r3, [r3, #8]
 800d86c:	4a2c      	ldr	r2, [pc, #176]	; (800d920 <UART_AdvFeatureConfig+0x154>)
 800d86e:	4013      	ands	r3, r2
 800d870:	0019      	movs	r1, r3
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	430a      	orrs	r2, r1
 800d87c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d882:	2220      	movs	r2, #32
 800d884:	4013      	ands	r3, r2
 800d886:	d00b      	beq.n	800d8a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	689b      	ldr	r3, [r3, #8]
 800d88e:	4a25      	ldr	r2, [pc, #148]	; (800d924 <UART_AdvFeatureConfig+0x158>)
 800d890:	4013      	ands	r3, r2
 800d892:	0019      	movs	r1, r3
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	430a      	orrs	r2, r1
 800d89e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8a4:	2240      	movs	r2, #64	; 0x40
 800d8a6:	4013      	ands	r3, r2
 800d8a8:	d01d      	beq.n	800d8e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	685b      	ldr	r3, [r3, #4]
 800d8b0:	4a1d      	ldr	r2, [pc, #116]	; (800d928 <UART_AdvFeatureConfig+0x15c>)
 800d8b2:	4013      	ands	r3, r2
 800d8b4:	0019      	movs	r1, r3
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	430a      	orrs	r2, r1
 800d8c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d8c6:	2380      	movs	r3, #128	; 0x80
 800d8c8:	035b      	lsls	r3, r3, #13
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d10b      	bne.n	800d8e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	685b      	ldr	r3, [r3, #4]
 800d8d4:	4a15      	ldr	r2, [pc, #84]	; (800d92c <UART_AdvFeatureConfig+0x160>)
 800d8d6:	4013      	ands	r3, r2
 800d8d8:	0019      	movs	r1, r3
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	430a      	orrs	r2, r1
 800d8e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8ea:	2280      	movs	r2, #128	; 0x80
 800d8ec:	4013      	ands	r3, r2
 800d8ee:	d00b      	beq.n	800d908 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	685b      	ldr	r3, [r3, #4]
 800d8f6:	4a0e      	ldr	r2, [pc, #56]	; (800d930 <UART_AdvFeatureConfig+0x164>)
 800d8f8:	4013      	ands	r3, r2
 800d8fa:	0019      	movs	r1, r3
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	430a      	orrs	r2, r1
 800d906:	605a      	str	r2, [r3, #4]
  }
}
 800d908:	46c0      	nop			; (mov r8, r8)
 800d90a:	46bd      	mov	sp, r7
 800d90c:	b002      	add	sp, #8
 800d90e:	bd80      	pop	{r7, pc}
 800d910:	fffdffff 	.word	0xfffdffff
 800d914:	fffeffff 	.word	0xfffeffff
 800d918:	fffbffff 	.word	0xfffbffff
 800d91c:	ffff7fff 	.word	0xffff7fff
 800d920:	ffffefff 	.word	0xffffefff
 800d924:	ffffdfff 	.word	0xffffdfff
 800d928:	ffefffff 	.word	0xffefffff
 800d92c:	ff9fffff 	.word	0xff9fffff
 800d930:	fff7ffff 	.word	0xfff7ffff

0800d934 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b086      	sub	sp, #24
 800d938:	af02      	add	r7, sp, #8
 800d93a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2280      	movs	r2, #128	; 0x80
 800d940:	2100      	movs	r1, #0
 800d942:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d944:	f7fc fb74 	bl	800a030 <HAL_GetTick>
 800d948:	0003      	movs	r3, r0
 800d94a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	2208      	movs	r2, #8
 800d954:	4013      	ands	r3, r2
 800d956:	2b08      	cmp	r3, #8
 800d958:	d10d      	bne.n	800d976 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d95a:	68fa      	ldr	r2, [r7, #12]
 800d95c:	2380      	movs	r3, #128	; 0x80
 800d95e:	0399      	lsls	r1, r3, #14
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	4b18      	ldr	r3, [pc, #96]	; (800d9c4 <UART_CheckIdleState+0x90>)
 800d964:	9300      	str	r3, [sp, #0]
 800d966:	0013      	movs	r3, r2
 800d968:	2200      	movs	r2, #0
 800d96a:	f000 f82d 	bl	800d9c8 <UART_WaitOnFlagUntilTimeout>
 800d96e:	1e03      	subs	r3, r0, #0
 800d970:	d001      	beq.n	800d976 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d972:	2303      	movs	r3, #3
 800d974:	e022      	b.n	800d9bc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	2204      	movs	r2, #4
 800d97e:	4013      	ands	r3, r2
 800d980:	2b04      	cmp	r3, #4
 800d982:	d10d      	bne.n	800d9a0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d984:	68fa      	ldr	r2, [r7, #12]
 800d986:	2380      	movs	r3, #128	; 0x80
 800d988:	03d9      	lsls	r1, r3, #15
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	4b0d      	ldr	r3, [pc, #52]	; (800d9c4 <UART_CheckIdleState+0x90>)
 800d98e:	9300      	str	r3, [sp, #0]
 800d990:	0013      	movs	r3, r2
 800d992:	2200      	movs	r2, #0
 800d994:	f000 f818 	bl	800d9c8 <UART_WaitOnFlagUntilTimeout>
 800d998:	1e03      	subs	r3, r0, #0
 800d99a:	d001      	beq.n	800d9a0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d99c:	2303      	movs	r3, #3
 800d99e:	e00d      	b.n	800d9bc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2220      	movs	r2, #32
 800d9a4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2220      	movs	r2, #32
 800d9aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2274      	movs	r2, #116	; 0x74
 800d9b6:	2100      	movs	r1, #0
 800d9b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d9ba:	2300      	movs	r3, #0
}
 800d9bc:	0018      	movs	r0, r3
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	b004      	add	sp, #16
 800d9c2:	bd80      	pop	{r7, pc}
 800d9c4:	01ffffff 	.word	0x01ffffff

0800d9c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b094      	sub	sp, #80	; 0x50
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	60f8      	str	r0, [r7, #12]
 800d9d0:	60b9      	str	r1, [r7, #8]
 800d9d2:	603b      	str	r3, [r7, #0]
 800d9d4:	1dfb      	adds	r3, r7, #7
 800d9d6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d9d8:	e09b      	b.n	800db12 <UART_WaitOnFlagUntilTimeout+0x14a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d9da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d9dc:	3301      	adds	r3, #1
 800d9de:	d100      	bne.n	800d9e2 <UART_WaitOnFlagUntilTimeout+0x1a>
 800d9e0:	e097      	b.n	800db12 <UART_WaitOnFlagUntilTimeout+0x14a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d9e2:	f7fc fb25 	bl	800a030 <HAL_GetTick>
 800d9e6:	0002      	movs	r2, r0
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	1ad3      	subs	r3, r2, r3
 800d9ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d9ee:	429a      	cmp	r2, r3
 800d9f0:	d302      	bcc.n	800d9f8 <UART_WaitOnFlagUntilTimeout+0x30>
 800d9f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d139      	bne.n	800da6c <UART_WaitOnFlagUntilTimeout+0xa4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9f8:	f3ef 8310 	mrs	r3, PRIMASK
 800d9fc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800d9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800da00:	647b      	str	r3, [r7, #68]	; 0x44
 800da02:	2301      	movs	r3, #1
 800da04:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da08:	f383 8810 	msr	PRIMASK, r3
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	681a      	ldr	r2, [r3, #0]
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	4949      	ldr	r1, [pc, #292]	; (800db3c <UART_WaitOnFlagUntilTimeout+0x174>)
 800da18:	400a      	ands	r2, r1
 800da1a:	601a      	str	r2, [r3, #0]
 800da1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da1e:	633b      	str	r3, [r7, #48]	; 0x30
 800da20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da22:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da26:	f3ef 8310 	mrs	r3, PRIMASK
 800da2a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800da2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da2e:	643b      	str	r3, [r7, #64]	; 0x40
 800da30:	2301      	movs	r3, #1
 800da32:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da36:	f383 8810 	msr	PRIMASK, r3
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	689a      	ldr	r2, [r3, #8]
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	2101      	movs	r1, #1
 800da46:	438a      	bics	r2, r1
 800da48:	609a      	str	r2, [r3, #8]
 800da4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da50:	f383 8810 	msr	PRIMASK, r3

        huart->gState = HAL_UART_STATE_READY;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	2220      	movs	r2, #32
 800da58:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	2220      	movs	r2, #32
 800da5e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	2274      	movs	r2, #116	; 0x74
 800da64:	2100      	movs	r1, #0
 800da66:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800da68:	2303      	movs	r3, #3
 800da6a:	e063      	b.n	800db34 <UART_WaitOnFlagUntilTimeout+0x16c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	2204      	movs	r2, #4
 800da74:	4013      	ands	r3, r2
 800da76:	d04c      	beq.n	800db12 <UART_WaitOnFlagUntilTimeout+0x14a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	69da      	ldr	r2, [r3, #28]
 800da7e:	2380      	movs	r3, #128	; 0x80
 800da80:	011b      	lsls	r3, r3, #4
 800da82:	401a      	ands	r2, r3
 800da84:	2380      	movs	r3, #128	; 0x80
 800da86:	011b      	lsls	r3, r3, #4
 800da88:	429a      	cmp	r2, r3
 800da8a:	d142      	bne.n	800db12 <UART_WaitOnFlagUntilTimeout+0x14a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	2280      	movs	r2, #128	; 0x80
 800da92:	0112      	lsls	r2, r2, #4
 800da94:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da96:	f3ef 8310 	mrs	r3, PRIMASK
 800da9a:	613b      	str	r3, [r7, #16]
  return(result);
 800da9c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800da9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800daa0:	2301      	movs	r3, #1
 800daa2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	f383 8810 	msr	PRIMASK, r3
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	681a      	ldr	r2, [r3, #0]
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	4921      	ldr	r1, [pc, #132]	; (800db3c <UART_WaitOnFlagUntilTimeout+0x174>)
 800dab6:	400a      	ands	r2, r1
 800dab8:	601a      	str	r2, [r3, #0]
 800daba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dabc:	61bb      	str	r3, [r7, #24]
 800dabe:	69bb      	ldr	r3, [r7, #24]
 800dac0:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dac4:	f3ef 8310 	mrs	r3, PRIMASK
 800dac8:	61fb      	str	r3, [r7, #28]
  return(result);
 800daca:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dacc:	64bb      	str	r3, [r7, #72]	; 0x48
 800dace:	2301      	movs	r3, #1
 800dad0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dad2:	6a3b      	ldr	r3, [r7, #32]
 800dad4:	f383 8810 	msr	PRIMASK, r3
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	689a      	ldr	r2, [r3, #8]
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	2101      	movs	r1, #1
 800dae4:	438a      	bics	r2, r1
 800dae6:	609a      	str	r2, [r3, #8]
 800dae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800daea:	627b      	str	r3, [r7, #36]	; 0x24
 800daec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daee:	f383 8810 	msr	PRIMASK, r3

          huart->gState = HAL_UART_STATE_READY;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	2220      	movs	r2, #32
 800daf6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2220      	movs	r2, #32
 800dafc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	2280      	movs	r2, #128	; 0x80
 800db02:	2120      	movs	r1, #32
 800db04:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	2274      	movs	r2, #116	; 0x74
 800db0a:	2100      	movs	r1, #0
 800db0c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800db0e:	2303      	movs	r3, #3
 800db10:	e010      	b.n	800db34 <UART_WaitOnFlagUntilTimeout+0x16c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	69db      	ldr	r3, [r3, #28]
 800db18:	68ba      	ldr	r2, [r7, #8]
 800db1a:	4013      	ands	r3, r2
 800db1c:	68ba      	ldr	r2, [r7, #8]
 800db1e:	1ad3      	subs	r3, r2, r3
 800db20:	425a      	negs	r2, r3
 800db22:	4153      	adcs	r3, r2
 800db24:	b2db      	uxtb	r3, r3
 800db26:	001a      	movs	r2, r3
 800db28:	1dfb      	adds	r3, r7, #7
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	429a      	cmp	r2, r3
 800db2e:	d100      	bne.n	800db32 <UART_WaitOnFlagUntilTimeout+0x16a>
 800db30:	e753      	b.n	800d9da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800db32:	2300      	movs	r3, #0
}
 800db34:	0018      	movs	r0, r3
 800db36:	46bd      	mov	sp, r7
 800db38:	b014      	add	sp, #80	; 0x50
 800db3a:	bd80      	pop	{r7, pc}
 800db3c:	fffffe5f 	.word	0xfffffe5f

0800db40 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b086      	sub	sp, #24
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db48:	f3ef 8310 	mrs	r3, PRIMASK
 800db4c:	60bb      	str	r3, [r7, #8]
  return(result);
 800db4e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800db50:	617b      	str	r3, [r7, #20]
 800db52:	2301      	movs	r3, #1
 800db54:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	f383 8810 	msr	PRIMASK, r3
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	681a      	ldr	r2, [r3, #0]
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	21c0      	movs	r1, #192	; 0xc0
 800db68:	438a      	bics	r2, r1
 800db6a:	601a      	str	r2, [r3, #0]
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	613b      	str	r3, [r7, #16]
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	f383 8810 	msr	PRIMASK, r3

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2220      	movs	r2, #32
 800db7a:	679a      	str	r2, [r3, #120]	; 0x78
}
 800db7c:	46c0      	nop			; (mov r8, r8)
 800db7e:	46bd      	mov	sp, r7
 800db80:	b006      	add	sp, #24
 800db82:	bd80      	pop	{r7, pc}

0800db84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b08e      	sub	sp, #56	; 0x38
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db8c:	f3ef 8310 	mrs	r3, PRIMASK
 800db90:	617b      	str	r3, [r7, #20]
  return(result);
 800db92:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800db94:	637b      	str	r3, [r7, #52]	; 0x34
 800db96:	2301      	movs	r3, #1
 800db98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db9a:	69bb      	ldr	r3, [r7, #24]
 800db9c:	f383 8810 	msr	PRIMASK, r3
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	681a      	ldr	r2, [r3, #0]
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4923      	ldr	r1, [pc, #140]	; (800dc38 <UART_EndRxTransfer+0xb4>)
 800dbac:	400a      	ands	r2, r1
 800dbae:	601a      	str	r2, [r3, #0]
 800dbb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbb2:	61fb      	str	r3, [r7, #28]
 800dbb4:	69fb      	ldr	r3, [r7, #28]
 800dbb6:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbba:	f3ef 8310 	mrs	r3, PRIMASK
 800dbbe:	623b      	str	r3, [r7, #32]
  return(result);
 800dbc0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbc2:	633b      	str	r3, [r7, #48]	; 0x30
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbca:	f383 8810 	msr	PRIMASK, r3
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	689a      	ldr	r2, [r3, #8]
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	2101      	movs	r1, #1
 800dbda:	438a      	bics	r2, r1
 800dbdc:	609a      	str	r2, [r3, #8]
 800dbde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe0:	62bb      	str	r3, [r7, #40]	; 0x28
 800dbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe4:	f383 8810 	msr	PRIMASK, r3

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	d116      	bne.n	800dc1e <UART_EndRxTransfer+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbf0:	f3ef 8310 	mrs	r3, PRIMASK
 800dbf4:	60bb      	str	r3, [r7, #8]
  return(result);
 800dbf6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dbf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f383 8810 	msr	PRIMASK, r3
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	681a      	ldr	r2, [r3, #0]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	2110      	movs	r1, #16
 800dc10:	438a      	bics	r2, r1
 800dc12:	601a      	str	r2, [r3, #0]
 800dc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc16:	613b      	str	r3, [r7, #16]
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	f383 8810 	msr	PRIMASK, r3
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2220      	movs	r2, #32
 800dc22:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2200      	movs	r2, #0
 800dc28:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	665a      	str	r2, [r3, #100]	; 0x64
}
 800dc30:	46c0      	nop			; (mov r8, r8)
 800dc32:	46bd      	mov	sp, r7
 800dc34:	b00e      	add	sp, #56	; 0x38
 800dc36:	bd80      	pop	{r7, pc}
 800dc38:	fffffedf 	.word	0xfffffedf

0800dc3c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b08c      	sub	sp, #48	; 0x30
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc48:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	2220      	movs	r2, #32
 800dc52:	4013      	ands	r3, r2
 800dc54:	d132      	bne.n	800dcbc <UART_DMATransmitCplt+0x80>
  {
    huart->TxXferCount = 0U;
 800dc56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc58:	2252      	movs	r2, #82	; 0x52
 800dc5a:	2100      	movs	r1, #0
 800dc5c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc5e:	f3ef 8310 	mrs	r3, PRIMASK
 800dc62:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc64:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dc66:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc68:	2301      	movs	r3, #1
 800dc6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	f383 8810 	msr	PRIMASK, r3
 800dc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	689a      	ldr	r2, [r3, #8]
 800dc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	2180      	movs	r1, #128	; 0x80
 800dc7e:	438a      	bics	r2, r1
 800dc80:	609a      	str	r2, [r3, #8]
 800dc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc84:	617b      	str	r3, [r7, #20]
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc8c:	f3ef 8310 	mrs	r3, PRIMASK
 800dc90:	61bb      	str	r3, [r7, #24]
  return(result);
 800dc92:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dc94:	627b      	str	r3, [r7, #36]	; 0x24
 800dc96:	2301      	movs	r3, #1
 800dc98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc9a:	69fb      	ldr	r3, [r7, #28]
 800dc9c:	f383 8810 	msr	PRIMASK, r3
 800dca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	681a      	ldr	r2, [r3, #0]
 800dca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	2140      	movs	r1, #64	; 0x40
 800dcac:	430a      	orrs	r2, r1
 800dcae:	601a      	str	r2, [r3, #0]
 800dcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb2:	623b      	str	r3, [r7, #32]
 800dcb4:	6a3b      	ldr	r3, [r7, #32]
 800dcb6:	f383 8810 	msr	PRIMASK, r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dcba:	e003      	b.n	800dcc4 <UART_DMATransmitCplt+0x88>
    HAL_UART_TxCpltCallback(huart);
 800dcbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcbe:	0018      	movs	r0, r3
 800dcc0:	f7ff faa4 	bl	800d20c <HAL_UART_TxCpltCallback>
}
 800dcc4:	46c0      	nop			; (mov r8, r8)
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	b00c      	add	sp, #48	; 0x30
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b084      	sub	sp, #16
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcd8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	0018      	movs	r0, r3
 800dcde:	f7ff fa9d 	bl	800d21c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dce2:	46c0      	nop			; (mov r8, r8)
 800dce4:	46bd      	mov	sp, r7
 800dce6:	b004      	add	sp, #16
 800dce8:	bd80      	pop	{r7, pc}

0800dcea <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dcea:	b580      	push	{r7, lr}
 800dcec:	b086      	sub	sp, #24
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcf6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcfc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd02:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	689b      	ldr	r3, [r3, #8]
 800dd0a:	2280      	movs	r2, #128	; 0x80
 800dd0c:	4013      	ands	r3, r2
 800dd0e:	2b80      	cmp	r3, #128	; 0x80
 800dd10:	d10a      	bne.n	800dd28 <UART_DMAError+0x3e>
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	2b21      	cmp	r3, #33	; 0x21
 800dd16:	d107      	bne.n	800dd28 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	2252      	movs	r2, #82	; 0x52
 800dd1c:	2100      	movs	r1, #0
 800dd1e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	0018      	movs	r0, r3
 800dd24:	f7ff ff0c 	bl	800db40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	689b      	ldr	r3, [r3, #8]
 800dd2e:	2240      	movs	r2, #64	; 0x40
 800dd30:	4013      	ands	r3, r2
 800dd32:	2b40      	cmp	r3, #64	; 0x40
 800dd34:	d10a      	bne.n	800dd4c <UART_DMAError+0x62>
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	2b22      	cmp	r3, #34	; 0x22
 800dd3a:	d107      	bne.n	800dd4c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	225a      	movs	r2, #90	; 0x5a
 800dd40:	2100      	movs	r1, #0
 800dd42:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	0018      	movs	r0, r3
 800dd48:	f7ff ff1c 	bl	800db84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	2280      	movs	r2, #128	; 0x80
 800dd50:	589b      	ldr	r3, [r3, r2]
 800dd52:	2210      	movs	r2, #16
 800dd54:	431a      	orrs	r2, r3
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	2180      	movs	r1, #128	; 0x80
 800dd5a:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	0018      	movs	r0, r3
 800dd60:	f7ff fa64 	bl	800d22c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd64:	46c0      	nop			; (mov r8, r8)
 800dd66:	46bd      	mov	sp, r7
 800dd68:	b006      	add	sp, #24
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b084      	sub	sp, #16
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	225a      	movs	r2, #90	; 0x5a
 800dd7e:	2100      	movs	r1, #0
 800dd80:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	2252      	movs	r2, #82	; 0x52
 800dd86:	2100      	movs	r1, #0
 800dd88:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	0018      	movs	r0, r3
 800dd8e:	f7ff fa4d 	bl	800d22c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd92:	46c0      	nop			; (mov r8, r8)
 800dd94:	46bd      	mov	sp, r7
 800dd96:	b004      	add	sp, #16
 800dd98:	bd80      	pop	{r7, pc}

0800dd9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dd9a:	b580      	push	{r7, lr}
 800dd9c:	b086      	sub	sp, #24
 800dd9e:	af00      	add	r7, sp, #0
 800dda0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dda2:	f3ef 8310 	mrs	r3, PRIMASK
 800dda6:	60bb      	str	r3, [r7, #8]
  return(result);
 800dda8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ddaa:	617b      	str	r3, [r7, #20]
 800ddac:	2301      	movs	r3, #1
 800ddae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	f383 8810 	msr	PRIMASK, r3
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	681a      	ldr	r2, [r3, #0]
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	2140      	movs	r1, #64	; 0x40
 800ddc2:	438a      	bics	r2, r1
 800ddc4:	601a      	str	r2, [r3, #0]
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	613b      	str	r3, [r7, #16]
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	f383 8810 	msr	PRIMASK, r3

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2220      	movs	r2, #32
 800ddd4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2200      	movs	r2, #0
 800ddda:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	0018      	movs	r0, r3
 800dde0:	f7ff fa14 	bl	800d20c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dde4:	46c0      	nop			; (mov r8, r8)
 800dde6:	46bd      	mov	sp, r7
 800dde8:	b006      	add	sp, #24
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ddf4:	46c0      	nop			; (mov r8, r8)
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	b002      	add	sp, #8
 800ddfa:	bd80      	pop	{r7, pc}

0800ddfc <__errno>:
 800ddfc:	4b01      	ldr	r3, [pc, #4]	; (800de04 <__errno+0x8>)
 800ddfe:	6818      	ldr	r0, [r3, #0]
 800de00:	4770      	bx	lr
 800de02:	46c0      	nop			; (mov r8, r8)
 800de04:	2000012c 	.word	0x2000012c

0800de08 <__libc_init_array>:
 800de08:	b570      	push	{r4, r5, r6, lr}
 800de0a:	2600      	movs	r6, #0
 800de0c:	4d0c      	ldr	r5, [pc, #48]	; (800de40 <__libc_init_array+0x38>)
 800de0e:	4c0d      	ldr	r4, [pc, #52]	; (800de44 <__libc_init_array+0x3c>)
 800de10:	1b64      	subs	r4, r4, r5
 800de12:	10a4      	asrs	r4, r4, #2
 800de14:	42a6      	cmp	r6, r4
 800de16:	d109      	bne.n	800de2c <__libc_init_array+0x24>
 800de18:	2600      	movs	r6, #0
 800de1a:	f004 fac3 	bl	80123a4 <_init>
 800de1e:	4d0a      	ldr	r5, [pc, #40]	; (800de48 <__libc_init_array+0x40>)
 800de20:	4c0a      	ldr	r4, [pc, #40]	; (800de4c <__libc_init_array+0x44>)
 800de22:	1b64      	subs	r4, r4, r5
 800de24:	10a4      	asrs	r4, r4, #2
 800de26:	42a6      	cmp	r6, r4
 800de28:	d105      	bne.n	800de36 <__libc_init_array+0x2e>
 800de2a:	bd70      	pop	{r4, r5, r6, pc}
 800de2c:	00b3      	lsls	r3, r6, #2
 800de2e:	58eb      	ldr	r3, [r5, r3]
 800de30:	4798      	blx	r3
 800de32:	3601      	adds	r6, #1
 800de34:	e7ee      	b.n	800de14 <__libc_init_array+0xc>
 800de36:	00b3      	lsls	r3, r6, #2
 800de38:	58eb      	ldr	r3, [r5, r3]
 800de3a:	4798      	blx	r3
 800de3c:	3601      	adds	r6, #1
 800de3e:	e7f2      	b.n	800de26 <__libc_init_array+0x1e>
 800de40:	08012ed0 	.word	0x08012ed0
 800de44:	08012ed0 	.word	0x08012ed0
 800de48:	08012ed0 	.word	0x08012ed0
 800de4c:	08012ed4 	.word	0x08012ed4

0800de50 <memcmp>:
 800de50:	b530      	push	{r4, r5, lr}
 800de52:	2400      	movs	r4, #0
 800de54:	42a2      	cmp	r2, r4
 800de56:	d101      	bne.n	800de5c <memcmp+0xc>
 800de58:	2000      	movs	r0, #0
 800de5a:	e005      	b.n	800de68 <memcmp+0x18>
 800de5c:	5d03      	ldrb	r3, [r0, r4]
 800de5e:	1c65      	adds	r5, r4, #1
 800de60:	5d0c      	ldrb	r4, [r1, r4]
 800de62:	42a3      	cmp	r3, r4
 800de64:	d001      	beq.n	800de6a <memcmp+0x1a>
 800de66:	1b18      	subs	r0, r3, r4
 800de68:	bd30      	pop	{r4, r5, pc}
 800de6a:	002c      	movs	r4, r5
 800de6c:	e7f2      	b.n	800de54 <memcmp+0x4>

0800de6e <memcpy>:
 800de6e:	2300      	movs	r3, #0
 800de70:	b510      	push	{r4, lr}
 800de72:	429a      	cmp	r2, r3
 800de74:	d100      	bne.n	800de78 <memcpy+0xa>
 800de76:	bd10      	pop	{r4, pc}
 800de78:	5ccc      	ldrb	r4, [r1, r3]
 800de7a:	54c4      	strb	r4, [r0, r3]
 800de7c:	3301      	adds	r3, #1
 800de7e:	e7f8      	b.n	800de72 <memcpy+0x4>

0800de80 <memset>:
 800de80:	0003      	movs	r3, r0
 800de82:	1812      	adds	r2, r2, r0
 800de84:	4293      	cmp	r3, r2
 800de86:	d100      	bne.n	800de8a <memset+0xa>
 800de88:	4770      	bx	lr
 800de8a:	7019      	strb	r1, [r3, #0]
 800de8c:	3301      	adds	r3, #1
 800de8e:	e7f9      	b.n	800de84 <memset+0x4>

0800de90 <__cvt>:
 800de90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de92:	b08b      	sub	sp, #44	; 0x2c
 800de94:	0014      	movs	r4, r2
 800de96:	1e1d      	subs	r5, r3, #0
 800de98:	9912      	ldr	r1, [sp, #72]	; 0x48
 800de9a:	da53      	bge.n	800df44 <__cvt+0xb4>
 800de9c:	2480      	movs	r4, #128	; 0x80
 800de9e:	0624      	lsls	r4, r4, #24
 800dea0:	191b      	adds	r3, r3, r4
 800dea2:	001d      	movs	r5, r3
 800dea4:	0014      	movs	r4, r2
 800dea6:	232d      	movs	r3, #45	; 0x2d
 800dea8:	700b      	strb	r3, [r1, #0]
 800deaa:	2320      	movs	r3, #32
 800deac:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800deae:	2203      	movs	r2, #3
 800deb0:	439e      	bics	r6, r3
 800deb2:	2e46      	cmp	r6, #70	; 0x46
 800deb4:	d007      	beq.n	800dec6 <__cvt+0x36>
 800deb6:	0033      	movs	r3, r6
 800deb8:	3b45      	subs	r3, #69	; 0x45
 800deba:	4259      	negs	r1, r3
 800debc:	414b      	adcs	r3, r1
 800debe:	9910      	ldr	r1, [sp, #64]	; 0x40
 800dec0:	3a01      	subs	r2, #1
 800dec2:	18cb      	adds	r3, r1, r3
 800dec4:	9310      	str	r3, [sp, #64]	; 0x40
 800dec6:	ab09      	add	r3, sp, #36	; 0x24
 800dec8:	9304      	str	r3, [sp, #16]
 800deca:	ab08      	add	r3, sp, #32
 800decc:	9303      	str	r3, [sp, #12]
 800dece:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ded0:	9200      	str	r2, [sp, #0]
 800ded2:	9302      	str	r3, [sp, #8]
 800ded4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ded6:	0022      	movs	r2, r4
 800ded8:	9301      	str	r3, [sp, #4]
 800deda:	002b      	movs	r3, r5
 800dedc:	f001 fdd8 	bl	800fa90 <_dtoa_r>
 800dee0:	0007      	movs	r7, r0
 800dee2:	2e47      	cmp	r6, #71	; 0x47
 800dee4:	d102      	bne.n	800deec <__cvt+0x5c>
 800dee6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dee8:	07db      	lsls	r3, r3, #31
 800deea:	d524      	bpl.n	800df36 <__cvt+0xa6>
 800deec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800deee:	18fb      	adds	r3, r7, r3
 800def0:	9307      	str	r3, [sp, #28]
 800def2:	2e46      	cmp	r6, #70	; 0x46
 800def4:	d114      	bne.n	800df20 <__cvt+0x90>
 800def6:	783b      	ldrb	r3, [r7, #0]
 800def8:	2b30      	cmp	r3, #48	; 0x30
 800defa:	d10c      	bne.n	800df16 <__cvt+0x86>
 800defc:	2200      	movs	r2, #0
 800defe:	2300      	movs	r3, #0
 800df00:	0020      	movs	r0, r4
 800df02:	0029      	movs	r1, r5
 800df04:	f7f7 fa9c 	bl	8005440 <__aeabi_dcmpeq>
 800df08:	2800      	cmp	r0, #0
 800df0a:	d104      	bne.n	800df16 <__cvt+0x86>
 800df0c:	2301      	movs	r3, #1
 800df0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800df10:	1a9b      	subs	r3, r3, r2
 800df12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800df14:	6013      	str	r3, [r2, #0]
 800df16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800df18:	9a07      	ldr	r2, [sp, #28]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	18d3      	adds	r3, r2, r3
 800df1e:	9307      	str	r3, [sp, #28]
 800df20:	2200      	movs	r2, #0
 800df22:	2300      	movs	r3, #0
 800df24:	0020      	movs	r0, r4
 800df26:	0029      	movs	r1, r5
 800df28:	f7f7 fa8a 	bl	8005440 <__aeabi_dcmpeq>
 800df2c:	2230      	movs	r2, #48	; 0x30
 800df2e:	2800      	cmp	r0, #0
 800df30:	d00d      	beq.n	800df4e <__cvt+0xbe>
 800df32:	9b07      	ldr	r3, [sp, #28]
 800df34:	9309      	str	r3, [sp, #36]	; 0x24
 800df36:	0038      	movs	r0, r7
 800df38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df3a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800df3c:	1bdb      	subs	r3, r3, r7
 800df3e:	6013      	str	r3, [r2, #0]
 800df40:	b00b      	add	sp, #44	; 0x2c
 800df42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df44:	2300      	movs	r3, #0
 800df46:	e7af      	b.n	800dea8 <__cvt+0x18>
 800df48:	1c59      	adds	r1, r3, #1
 800df4a:	9109      	str	r1, [sp, #36]	; 0x24
 800df4c:	701a      	strb	r2, [r3, #0]
 800df4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df50:	9907      	ldr	r1, [sp, #28]
 800df52:	428b      	cmp	r3, r1
 800df54:	d3f8      	bcc.n	800df48 <__cvt+0xb8>
 800df56:	e7ee      	b.n	800df36 <__cvt+0xa6>

0800df58 <__exponent>:
 800df58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df5a:	1c83      	adds	r3, r0, #2
 800df5c:	b085      	sub	sp, #20
 800df5e:	9301      	str	r3, [sp, #4]
 800df60:	0006      	movs	r6, r0
 800df62:	000c      	movs	r4, r1
 800df64:	7002      	strb	r2, [r0, #0]
 800df66:	232b      	movs	r3, #43	; 0x2b
 800df68:	2900      	cmp	r1, #0
 800df6a:	da01      	bge.n	800df70 <__exponent+0x18>
 800df6c:	232d      	movs	r3, #45	; 0x2d
 800df6e:	424c      	negs	r4, r1
 800df70:	7073      	strb	r3, [r6, #1]
 800df72:	2c09      	cmp	r4, #9
 800df74:	dd22      	ble.n	800dfbc <__exponent+0x64>
 800df76:	ab02      	add	r3, sp, #8
 800df78:	1ddd      	adds	r5, r3, #7
 800df7a:	0020      	movs	r0, r4
 800df7c:	210a      	movs	r1, #10
 800df7e:	f7f7 fa49 	bl	8005414 <__aeabi_idivmod>
 800df82:	1e6f      	subs	r7, r5, #1
 800df84:	3130      	adds	r1, #48	; 0x30
 800df86:	7039      	strb	r1, [r7, #0]
 800df88:	0020      	movs	r0, r4
 800df8a:	210a      	movs	r1, #10
 800df8c:	f7f7 f95c 	bl	8005248 <__divsi3>
 800df90:	0004      	movs	r4, r0
 800df92:	2809      	cmp	r0, #9
 800df94:	dc0b      	bgt.n	800dfae <__exponent+0x56>
 800df96:	3d02      	subs	r5, #2
 800df98:	3430      	adds	r4, #48	; 0x30
 800df9a:	9b01      	ldr	r3, [sp, #4]
 800df9c:	702c      	strb	r4, [r5, #0]
 800df9e:	aa02      	add	r2, sp, #8
 800dfa0:	3207      	adds	r2, #7
 800dfa2:	0018      	movs	r0, r3
 800dfa4:	42aa      	cmp	r2, r5
 800dfa6:	d804      	bhi.n	800dfb2 <__exponent+0x5a>
 800dfa8:	1b80      	subs	r0, r0, r6
 800dfaa:	b005      	add	sp, #20
 800dfac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfae:	003d      	movs	r5, r7
 800dfb0:	e7e3      	b.n	800df7a <__exponent+0x22>
 800dfb2:	782a      	ldrb	r2, [r5, #0]
 800dfb4:	3501      	adds	r5, #1
 800dfb6:	701a      	strb	r2, [r3, #0]
 800dfb8:	3301      	adds	r3, #1
 800dfba:	e7f0      	b.n	800df9e <__exponent+0x46>
 800dfbc:	2330      	movs	r3, #48	; 0x30
 800dfbe:	18e4      	adds	r4, r4, r3
 800dfc0:	70b3      	strb	r3, [r6, #2]
 800dfc2:	1d30      	adds	r0, r6, #4
 800dfc4:	70f4      	strb	r4, [r6, #3]
 800dfc6:	e7ef      	b.n	800dfa8 <__exponent+0x50>

0800dfc8 <_printf_float>:
 800dfc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfca:	b095      	sub	sp, #84	; 0x54
 800dfcc:	000c      	movs	r4, r1
 800dfce:	920a      	str	r2, [sp, #40]	; 0x28
 800dfd0:	930b      	str	r3, [sp, #44]	; 0x2c
 800dfd2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800dfd4:	9009      	str	r0, [sp, #36]	; 0x24
 800dfd6:	f002 ff47 	bl	8010e68 <_localeconv_r>
 800dfda:	6803      	ldr	r3, [r0, #0]
 800dfdc:	0018      	movs	r0, r3
 800dfde:	930c      	str	r3, [sp, #48]	; 0x30
 800dfe0:	f7f7 f896 	bl	8005110 <strlen>
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	9312      	str	r3, [sp, #72]	; 0x48
 800dfe8:	6823      	ldr	r3, [r4, #0]
 800dfea:	900e      	str	r0, [sp, #56]	; 0x38
 800dfec:	930d      	str	r3, [sp, #52]	; 0x34
 800dfee:	990d      	ldr	r1, [sp, #52]	; 0x34
 800dff0:	7e27      	ldrb	r7, [r4, #24]
 800dff2:	682b      	ldr	r3, [r5, #0]
 800dff4:	2207      	movs	r2, #7
 800dff6:	05c9      	lsls	r1, r1, #23
 800dff8:	d545      	bpl.n	800e086 <_printf_float+0xbe>
 800dffa:	189b      	adds	r3, r3, r2
 800dffc:	4393      	bics	r3, r2
 800dffe:	001a      	movs	r2, r3
 800e000:	3208      	adds	r2, #8
 800e002:	602a      	str	r2, [r5, #0]
 800e004:	681a      	ldr	r2, [r3, #0]
 800e006:	685b      	ldr	r3, [r3, #4]
 800e008:	64a2      	str	r2, [r4, #72]	; 0x48
 800e00a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e00c:	2201      	movs	r2, #1
 800e00e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800e010:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 800e012:	006b      	lsls	r3, r5, #1
 800e014:	085b      	lsrs	r3, r3, #1
 800e016:	930f      	str	r3, [sp, #60]	; 0x3c
 800e018:	4252      	negs	r2, r2
 800e01a:	4bac      	ldr	r3, [pc, #688]	; (800e2cc <_printf_float+0x304>)
 800e01c:	0030      	movs	r0, r6
 800e01e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e020:	f7f9 fb66 	bl	80076f0 <__aeabi_dcmpun>
 800e024:	2800      	cmp	r0, #0
 800e026:	d130      	bne.n	800e08a <_printf_float+0xc2>
 800e028:	2201      	movs	r2, #1
 800e02a:	4ba8      	ldr	r3, [pc, #672]	; (800e2cc <_printf_float+0x304>)
 800e02c:	4252      	negs	r2, r2
 800e02e:	0030      	movs	r0, r6
 800e030:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e032:	f7f7 fa15 	bl	8005460 <__aeabi_dcmple>
 800e036:	2800      	cmp	r0, #0
 800e038:	d127      	bne.n	800e08a <_printf_float+0xc2>
 800e03a:	2200      	movs	r2, #0
 800e03c:	2300      	movs	r3, #0
 800e03e:	0030      	movs	r0, r6
 800e040:	0029      	movs	r1, r5
 800e042:	f7f7 fa03 	bl	800544c <__aeabi_dcmplt>
 800e046:	2800      	cmp	r0, #0
 800e048:	d003      	beq.n	800e052 <_printf_float+0x8a>
 800e04a:	0023      	movs	r3, r4
 800e04c:	222d      	movs	r2, #45	; 0x2d
 800e04e:	3343      	adds	r3, #67	; 0x43
 800e050:	701a      	strb	r2, [r3, #0]
 800e052:	4d9f      	ldr	r5, [pc, #636]	; (800e2d0 <_printf_float+0x308>)
 800e054:	2f47      	cmp	r7, #71	; 0x47
 800e056:	d800      	bhi.n	800e05a <_printf_float+0x92>
 800e058:	4d9e      	ldr	r5, [pc, #632]	; (800e2d4 <_printf_float+0x30c>)
 800e05a:	2303      	movs	r3, #3
 800e05c:	2600      	movs	r6, #0
 800e05e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e060:	6123      	str	r3, [r4, #16]
 800e062:	3301      	adds	r3, #1
 800e064:	439a      	bics	r2, r3
 800e066:	6022      	str	r2, [r4, #0]
 800e068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e06a:	aa13      	add	r2, sp, #76	; 0x4c
 800e06c:	9300      	str	r3, [sp, #0]
 800e06e:	0021      	movs	r1, r4
 800e070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e072:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e074:	f000 f9f4 	bl	800e460 <_printf_common>
 800e078:	1c43      	adds	r3, r0, #1
 800e07a:	d000      	beq.n	800e07e <_printf_float+0xb6>
 800e07c:	e093      	b.n	800e1a6 <_printf_float+0x1de>
 800e07e:	2001      	movs	r0, #1
 800e080:	4240      	negs	r0, r0
 800e082:	b015      	add	sp, #84	; 0x54
 800e084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e086:	3307      	adds	r3, #7
 800e088:	e7b8      	b.n	800dffc <_printf_float+0x34>
 800e08a:	0032      	movs	r2, r6
 800e08c:	002b      	movs	r3, r5
 800e08e:	0030      	movs	r0, r6
 800e090:	0029      	movs	r1, r5
 800e092:	f7f9 fb2d 	bl	80076f0 <__aeabi_dcmpun>
 800e096:	2800      	cmp	r0, #0
 800e098:	d004      	beq.n	800e0a4 <_printf_float+0xdc>
 800e09a:	4d8f      	ldr	r5, [pc, #572]	; (800e2d8 <_printf_float+0x310>)
 800e09c:	2f47      	cmp	r7, #71	; 0x47
 800e09e:	d8dc      	bhi.n	800e05a <_printf_float+0x92>
 800e0a0:	4d8e      	ldr	r5, [pc, #568]	; (800e2dc <_printf_float+0x314>)
 800e0a2:	e7da      	b.n	800e05a <_printf_float+0x92>
 800e0a4:	2380      	movs	r3, #128	; 0x80
 800e0a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e0a8:	6862      	ldr	r2, [r4, #4]
 800e0aa:	00db      	lsls	r3, r3, #3
 800e0ac:	430b      	orrs	r3, r1
 800e0ae:	1c51      	adds	r1, r2, #1
 800e0b0:	d143      	bne.n	800e13a <_printf_float+0x172>
 800e0b2:	3207      	adds	r2, #7
 800e0b4:	6062      	str	r2, [r4, #4]
 800e0b6:	aa12      	add	r2, sp, #72	; 0x48
 800e0b8:	2100      	movs	r1, #0
 800e0ba:	9205      	str	r2, [sp, #20]
 800e0bc:	aa11      	add	r2, sp, #68	; 0x44
 800e0be:	9203      	str	r2, [sp, #12]
 800e0c0:	2223      	movs	r2, #35	; 0x23
 800e0c2:	6023      	str	r3, [r4, #0]
 800e0c4:	9106      	str	r1, [sp, #24]
 800e0c6:	9301      	str	r3, [sp, #4]
 800e0c8:	a908      	add	r1, sp, #32
 800e0ca:	6863      	ldr	r3, [r4, #4]
 800e0cc:	1852      	adds	r2, r2, r1
 800e0ce:	9202      	str	r2, [sp, #8]
 800e0d0:	9300      	str	r3, [sp, #0]
 800e0d2:	0032      	movs	r2, r6
 800e0d4:	002b      	movs	r3, r5
 800e0d6:	9704      	str	r7, [sp, #16]
 800e0d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e0da:	f7ff fed9 	bl	800de90 <__cvt>
 800e0de:	2320      	movs	r3, #32
 800e0e0:	003a      	movs	r2, r7
 800e0e2:	0005      	movs	r5, r0
 800e0e4:	439a      	bics	r2, r3
 800e0e6:	2a47      	cmp	r2, #71	; 0x47
 800e0e8:	d107      	bne.n	800e0fa <_printf_float+0x132>
 800e0ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e0ec:	1cda      	adds	r2, r3, #3
 800e0ee:	db02      	blt.n	800e0f6 <_printf_float+0x12e>
 800e0f0:	6862      	ldr	r2, [r4, #4]
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	dd45      	ble.n	800e182 <_printf_float+0x1ba>
 800e0f6:	3f02      	subs	r7, #2
 800e0f8:	b2ff      	uxtb	r7, r7
 800e0fa:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e0fc:	2f65      	cmp	r7, #101	; 0x65
 800e0fe:	d825      	bhi.n	800e14c <_printf_float+0x184>
 800e100:	0020      	movs	r0, r4
 800e102:	3901      	subs	r1, #1
 800e104:	003a      	movs	r2, r7
 800e106:	3050      	adds	r0, #80	; 0x50
 800e108:	9111      	str	r1, [sp, #68]	; 0x44
 800e10a:	f7ff ff25 	bl	800df58 <__exponent>
 800e10e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e110:	0006      	movs	r6, r0
 800e112:	1813      	adds	r3, r2, r0
 800e114:	6123      	str	r3, [r4, #16]
 800e116:	2a01      	cmp	r2, #1
 800e118:	dc02      	bgt.n	800e120 <_printf_float+0x158>
 800e11a:	6822      	ldr	r2, [r4, #0]
 800e11c:	07d2      	lsls	r2, r2, #31
 800e11e:	d501      	bpl.n	800e124 <_printf_float+0x15c>
 800e120:	3301      	adds	r3, #1
 800e122:	6123      	str	r3, [r4, #16]
 800e124:	2323      	movs	r3, #35	; 0x23
 800e126:	aa08      	add	r2, sp, #32
 800e128:	189b      	adds	r3, r3, r2
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d09b      	beq.n	800e068 <_printf_float+0xa0>
 800e130:	0023      	movs	r3, r4
 800e132:	222d      	movs	r2, #45	; 0x2d
 800e134:	3343      	adds	r3, #67	; 0x43
 800e136:	701a      	strb	r2, [r3, #0]
 800e138:	e796      	b.n	800e068 <_printf_float+0xa0>
 800e13a:	2f67      	cmp	r7, #103	; 0x67
 800e13c:	d100      	bne.n	800e140 <_printf_float+0x178>
 800e13e:	e176      	b.n	800e42e <_printf_float+0x466>
 800e140:	2f47      	cmp	r7, #71	; 0x47
 800e142:	d1b8      	bne.n	800e0b6 <_printf_float+0xee>
 800e144:	2a00      	cmp	r2, #0
 800e146:	d1b6      	bne.n	800e0b6 <_printf_float+0xee>
 800e148:	2201      	movs	r2, #1
 800e14a:	e7b3      	b.n	800e0b4 <_printf_float+0xec>
 800e14c:	2f66      	cmp	r7, #102	; 0x66
 800e14e:	d119      	bne.n	800e184 <_printf_float+0x1bc>
 800e150:	6863      	ldr	r3, [r4, #4]
 800e152:	2900      	cmp	r1, #0
 800e154:	dd0c      	ble.n	800e170 <_printf_float+0x1a8>
 800e156:	6121      	str	r1, [r4, #16]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d102      	bne.n	800e162 <_printf_float+0x19a>
 800e15c:	6822      	ldr	r2, [r4, #0]
 800e15e:	07d2      	lsls	r2, r2, #31
 800e160:	d502      	bpl.n	800e168 <_printf_float+0x1a0>
 800e162:	3301      	adds	r3, #1
 800e164:	185b      	adds	r3, r3, r1
 800e166:	6123      	str	r3, [r4, #16]
 800e168:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e16a:	2600      	movs	r6, #0
 800e16c:	65a3      	str	r3, [r4, #88]	; 0x58
 800e16e:	e7d9      	b.n	800e124 <_printf_float+0x15c>
 800e170:	2b00      	cmp	r3, #0
 800e172:	d103      	bne.n	800e17c <_printf_float+0x1b4>
 800e174:	2201      	movs	r2, #1
 800e176:	6821      	ldr	r1, [r4, #0]
 800e178:	4211      	tst	r1, r2
 800e17a:	d000      	beq.n	800e17e <_printf_float+0x1b6>
 800e17c:	1c9a      	adds	r2, r3, #2
 800e17e:	6122      	str	r2, [r4, #16]
 800e180:	e7f2      	b.n	800e168 <_printf_float+0x1a0>
 800e182:	2767      	movs	r7, #103	; 0x67
 800e184:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e186:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e188:	4293      	cmp	r3, r2
 800e18a:	db05      	blt.n	800e198 <_printf_float+0x1d0>
 800e18c:	6822      	ldr	r2, [r4, #0]
 800e18e:	6123      	str	r3, [r4, #16]
 800e190:	07d2      	lsls	r2, r2, #31
 800e192:	d5e9      	bpl.n	800e168 <_printf_float+0x1a0>
 800e194:	3301      	adds	r3, #1
 800e196:	e7e6      	b.n	800e166 <_printf_float+0x19e>
 800e198:	2101      	movs	r1, #1
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	dc01      	bgt.n	800e1a2 <_printf_float+0x1da>
 800e19e:	1849      	adds	r1, r1, r1
 800e1a0:	1ac9      	subs	r1, r1, r3
 800e1a2:	1852      	adds	r2, r2, r1
 800e1a4:	e7eb      	b.n	800e17e <_printf_float+0x1b6>
 800e1a6:	6822      	ldr	r2, [r4, #0]
 800e1a8:	0553      	lsls	r3, r2, #21
 800e1aa:	d408      	bmi.n	800e1be <_printf_float+0x1f6>
 800e1ac:	6923      	ldr	r3, [r4, #16]
 800e1ae:	002a      	movs	r2, r5
 800e1b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e1b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e1b4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e1b6:	47a8      	blx	r5
 800e1b8:	1c43      	adds	r3, r0, #1
 800e1ba:	d129      	bne.n	800e210 <_printf_float+0x248>
 800e1bc:	e75f      	b.n	800e07e <_printf_float+0xb6>
 800e1be:	2f65      	cmp	r7, #101	; 0x65
 800e1c0:	d800      	bhi.n	800e1c4 <_printf_float+0x1fc>
 800e1c2:	e0e0      	b.n	800e386 <_printf_float+0x3be>
 800e1c4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800e1c6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	f7f7 f938 	bl	8005440 <__aeabi_dcmpeq>
 800e1d0:	2800      	cmp	r0, #0
 800e1d2:	d034      	beq.n	800e23e <_printf_float+0x276>
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	4a42      	ldr	r2, [pc, #264]	; (800e2e0 <_printf_float+0x318>)
 800e1d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e1da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e1dc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e1de:	47a8      	blx	r5
 800e1e0:	1c43      	adds	r3, r0, #1
 800e1e2:	d100      	bne.n	800e1e6 <_printf_float+0x21e>
 800e1e4:	e74b      	b.n	800e07e <_printf_float+0xb6>
 800e1e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e1e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	db02      	blt.n	800e1f4 <_printf_float+0x22c>
 800e1ee:	6823      	ldr	r3, [r4, #0]
 800e1f0:	07db      	lsls	r3, r3, #31
 800e1f2:	d50d      	bpl.n	800e210 <_printf_float+0x248>
 800e1f4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e1f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e1f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e1fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e1fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e1fe:	47a8      	blx	r5
 800e200:	2500      	movs	r5, #0
 800e202:	1c43      	adds	r3, r0, #1
 800e204:	d100      	bne.n	800e208 <_printf_float+0x240>
 800e206:	e73a      	b.n	800e07e <_printf_float+0xb6>
 800e208:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e20a:	3b01      	subs	r3, #1
 800e20c:	42ab      	cmp	r3, r5
 800e20e:	dc0a      	bgt.n	800e226 <_printf_float+0x25e>
 800e210:	6823      	ldr	r3, [r4, #0]
 800e212:	079b      	lsls	r3, r3, #30
 800e214:	d500      	bpl.n	800e218 <_printf_float+0x250>
 800e216:	e108      	b.n	800e42a <_printf_float+0x462>
 800e218:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e21a:	68e0      	ldr	r0, [r4, #12]
 800e21c:	4298      	cmp	r0, r3
 800e21e:	db00      	blt.n	800e222 <_printf_float+0x25a>
 800e220:	e72f      	b.n	800e082 <_printf_float+0xba>
 800e222:	0018      	movs	r0, r3
 800e224:	e72d      	b.n	800e082 <_printf_float+0xba>
 800e226:	0022      	movs	r2, r4
 800e228:	2301      	movs	r3, #1
 800e22a:	321a      	adds	r2, #26
 800e22c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e22e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e230:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800e232:	47b0      	blx	r6
 800e234:	1c43      	adds	r3, r0, #1
 800e236:	d100      	bne.n	800e23a <_printf_float+0x272>
 800e238:	e721      	b.n	800e07e <_printf_float+0xb6>
 800e23a:	3501      	adds	r5, #1
 800e23c:	e7e4      	b.n	800e208 <_printf_float+0x240>
 800e23e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e240:	2b00      	cmp	r3, #0
 800e242:	dc2d      	bgt.n	800e2a0 <_printf_float+0x2d8>
 800e244:	2301      	movs	r3, #1
 800e246:	4a26      	ldr	r2, [pc, #152]	; (800e2e0 <_printf_float+0x318>)
 800e248:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e24a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e24c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800e24e:	47b0      	blx	r6
 800e250:	1c43      	adds	r3, r0, #1
 800e252:	d100      	bne.n	800e256 <_printf_float+0x28e>
 800e254:	e713      	b.n	800e07e <_printf_float+0xb6>
 800e256:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d105      	bne.n	800e268 <_printf_float+0x2a0>
 800e25c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d102      	bne.n	800e268 <_printf_float+0x2a0>
 800e262:	6823      	ldr	r3, [r4, #0]
 800e264:	07db      	lsls	r3, r3, #31
 800e266:	d5d3      	bpl.n	800e210 <_printf_float+0x248>
 800e268:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800e26a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e26c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e26e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e270:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e272:	47b0      	blx	r6
 800e274:	2600      	movs	r6, #0
 800e276:	1c43      	adds	r3, r0, #1
 800e278:	d100      	bne.n	800e27c <_printf_float+0x2b4>
 800e27a:	e700      	b.n	800e07e <_printf_float+0xb6>
 800e27c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e27e:	425b      	negs	r3, r3
 800e280:	42b3      	cmp	r3, r6
 800e282:	dc01      	bgt.n	800e288 <_printf_float+0x2c0>
 800e284:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e286:	e792      	b.n	800e1ae <_printf_float+0x1e6>
 800e288:	0022      	movs	r2, r4
 800e28a:	2301      	movs	r3, #1
 800e28c:	321a      	adds	r2, #26
 800e28e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e290:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e292:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800e294:	47b8      	blx	r7
 800e296:	1c43      	adds	r3, r0, #1
 800e298:	d100      	bne.n	800e29c <_printf_float+0x2d4>
 800e29a:	e6f0      	b.n	800e07e <_printf_float+0xb6>
 800e29c:	3601      	adds	r6, #1
 800e29e:	e7ed      	b.n	800e27c <_printf_float+0x2b4>
 800e2a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e2a2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800e2a4:	429f      	cmp	r7, r3
 800e2a6:	dd00      	ble.n	800e2aa <_printf_float+0x2e2>
 800e2a8:	001f      	movs	r7, r3
 800e2aa:	2f00      	cmp	r7, #0
 800e2ac:	dd08      	ble.n	800e2c0 <_printf_float+0x2f8>
 800e2ae:	003b      	movs	r3, r7
 800e2b0:	002a      	movs	r2, r5
 800e2b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e2b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2b6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800e2b8:	47b0      	blx	r6
 800e2ba:	1c43      	adds	r3, r0, #1
 800e2bc:	d100      	bne.n	800e2c0 <_printf_float+0x2f8>
 800e2be:	e6de      	b.n	800e07e <_printf_float+0xb6>
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	930d      	str	r3, [sp, #52]	; 0x34
 800e2c4:	43fb      	mvns	r3, r7
 800e2c6:	17db      	asrs	r3, r3, #31
 800e2c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800e2ca:	e018      	b.n	800e2fe <_printf_float+0x336>
 800e2cc:	7fefffff 	.word	0x7fefffff
 800e2d0:	08012bac 	.word	0x08012bac
 800e2d4:	08012ba8 	.word	0x08012ba8
 800e2d8:	08012bb4 	.word	0x08012bb4
 800e2dc:	08012bb0 	.word	0x08012bb0
 800e2e0:	08012bb8 	.word	0x08012bb8
 800e2e4:	0022      	movs	r2, r4
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	321a      	adds	r2, #26
 800e2ea:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e2ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2ee:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800e2f0:	47b0      	blx	r6
 800e2f2:	1c43      	adds	r3, r0, #1
 800e2f4:	d100      	bne.n	800e2f8 <_printf_float+0x330>
 800e2f6:	e6c2      	b.n	800e07e <_printf_float+0xb6>
 800e2f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2fa:	3301      	adds	r3, #1
 800e2fc:	930d      	str	r3, [sp, #52]	; 0x34
 800e2fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e300:	6da6      	ldr	r6, [r4, #88]	; 0x58
 800e302:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e304:	403b      	ands	r3, r7
 800e306:	1af3      	subs	r3, r6, r3
 800e308:	4293      	cmp	r3, r2
 800e30a:	dceb      	bgt.n	800e2e4 <_printf_float+0x31c>
 800e30c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e30e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e310:	19ad      	adds	r5, r5, r6
 800e312:	4293      	cmp	r3, r2
 800e314:	db10      	blt.n	800e338 <_printf_float+0x370>
 800e316:	6823      	ldr	r3, [r4, #0]
 800e318:	07db      	lsls	r3, r3, #31
 800e31a:	d40d      	bmi.n	800e338 <_printf_float+0x370>
 800e31c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800e31e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e320:	1bbe      	subs	r6, r7, r6
 800e322:	1aff      	subs	r7, r7, r3
 800e324:	42b7      	cmp	r7, r6
 800e326:	dd00      	ble.n	800e32a <_printf_float+0x362>
 800e328:	0037      	movs	r7, r6
 800e32a:	2f00      	cmp	r7, #0
 800e32c:	dc0d      	bgt.n	800e34a <_printf_float+0x382>
 800e32e:	43fe      	mvns	r6, r7
 800e330:	17f3      	asrs	r3, r6, #31
 800e332:	2500      	movs	r5, #0
 800e334:	930c      	str	r3, [sp, #48]	; 0x30
 800e336:	e01c      	b.n	800e372 <_printf_float+0x3aa>
 800e338:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e33a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e33c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e33e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e340:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800e342:	47b8      	blx	r7
 800e344:	1c43      	adds	r3, r0, #1
 800e346:	d1e9      	bne.n	800e31c <_printf_float+0x354>
 800e348:	e699      	b.n	800e07e <_printf_float+0xb6>
 800e34a:	003b      	movs	r3, r7
 800e34c:	002a      	movs	r2, r5
 800e34e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e350:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e352:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e354:	47a8      	blx	r5
 800e356:	1c43      	adds	r3, r0, #1
 800e358:	d1e9      	bne.n	800e32e <_printf_float+0x366>
 800e35a:	e690      	b.n	800e07e <_printf_float+0xb6>
 800e35c:	0022      	movs	r2, r4
 800e35e:	2301      	movs	r3, #1
 800e360:	321a      	adds	r2, #26
 800e362:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e364:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e366:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800e368:	47b0      	blx	r6
 800e36a:	1c43      	adds	r3, r0, #1
 800e36c:	d100      	bne.n	800e370 <_printf_float+0x3a8>
 800e36e:	e686      	b.n	800e07e <_printf_float+0xb6>
 800e370:	3501      	adds	r5, #1
 800e372:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e374:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e376:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e378:	1a9b      	subs	r3, r3, r2
 800e37a:	003a      	movs	r2, r7
 800e37c:	400a      	ands	r2, r1
 800e37e:	1a9b      	subs	r3, r3, r2
 800e380:	42ab      	cmp	r3, r5
 800e382:	dceb      	bgt.n	800e35c <_printf_float+0x394>
 800e384:	e744      	b.n	800e210 <_printf_float+0x248>
 800e386:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e388:	2b01      	cmp	r3, #1
 800e38a:	dc02      	bgt.n	800e392 <_printf_float+0x3ca>
 800e38c:	2301      	movs	r3, #1
 800e38e:	421a      	tst	r2, r3
 800e390:	d032      	beq.n	800e3f8 <_printf_float+0x430>
 800e392:	2301      	movs	r3, #1
 800e394:	002a      	movs	r2, r5
 800e396:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e398:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e39a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800e39c:	47b8      	blx	r7
 800e39e:	1c43      	adds	r3, r0, #1
 800e3a0:	d100      	bne.n	800e3a4 <_printf_float+0x3dc>
 800e3a2:	e66c      	b.n	800e07e <_printf_float+0xb6>
 800e3a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e3a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e3a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e3aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e3ac:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800e3ae:	3501      	adds	r5, #1
 800e3b0:	47b8      	blx	r7
 800e3b2:	1c43      	adds	r3, r0, #1
 800e3b4:	d100      	bne.n	800e3b8 <_printf_float+0x3f0>
 800e3b6:	e662      	b.n	800e07e <_printf_float+0xb6>
 800e3b8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800e3ba:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800e3bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e3be:	2200      	movs	r2, #0
 800e3c0:	1e5f      	subs	r7, r3, #1
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	f7f7 f83c 	bl	8005440 <__aeabi_dcmpeq>
 800e3c8:	003b      	movs	r3, r7
 800e3ca:	2800      	cmp	r0, #0
 800e3cc:	d014      	beq.n	800e3f8 <_printf_float+0x430>
 800e3ce:	2500      	movs	r5, #0
 800e3d0:	e00a      	b.n	800e3e8 <_printf_float+0x420>
 800e3d2:	0022      	movs	r2, r4
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	321a      	adds	r2, #26
 800e3d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e3da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e3dc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800e3de:	47b8      	blx	r7
 800e3e0:	1c43      	adds	r3, r0, #1
 800e3e2:	d100      	bne.n	800e3e6 <_printf_float+0x41e>
 800e3e4:	e64b      	b.n	800e07e <_printf_float+0xb6>
 800e3e6:	3501      	adds	r5, #1
 800e3e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e3ea:	3b01      	subs	r3, #1
 800e3ec:	42ab      	cmp	r3, r5
 800e3ee:	dcf0      	bgt.n	800e3d2 <_printf_float+0x40a>
 800e3f0:	0022      	movs	r2, r4
 800e3f2:	0033      	movs	r3, r6
 800e3f4:	3250      	adds	r2, #80	; 0x50
 800e3f6:	e6db      	b.n	800e1b0 <_printf_float+0x1e8>
 800e3f8:	002a      	movs	r2, r5
 800e3fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e3fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e3fe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e400:	47a8      	blx	r5
 800e402:	1c43      	adds	r3, r0, #1
 800e404:	d1f4      	bne.n	800e3f0 <_printf_float+0x428>
 800e406:	e63a      	b.n	800e07e <_printf_float+0xb6>
 800e408:	0022      	movs	r2, r4
 800e40a:	2301      	movs	r3, #1
 800e40c:	3219      	adds	r2, #25
 800e40e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e410:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e412:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800e414:	47b0      	blx	r6
 800e416:	1c43      	adds	r3, r0, #1
 800e418:	d100      	bne.n	800e41c <_printf_float+0x454>
 800e41a:	e630      	b.n	800e07e <_printf_float+0xb6>
 800e41c:	3501      	adds	r5, #1
 800e41e:	68e3      	ldr	r3, [r4, #12]
 800e420:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e422:	1a9b      	subs	r3, r3, r2
 800e424:	42ab      	cmp	r3, r5
 800e426:	dcef      	bgt.n	800e408 <_printf_float+0x440>
 800e428:	e6f6      	b.n	800e218 <_printf_float+0x250>
 800e42a:	2500      	movs	r5, #0
 800e42c:	e7f7      	b.n	800e41e <_printf_float+0x456>
 800e42e:	2a00      	cmp	r2, #0
 800e430:	d100      	bne.n	800e434 <_printf_float+0x46c>
 800e432:	e689      	b.n	800e148 <_printf_float+0x180>
 800e434:	2100      	movs	r1, #0
 800e436:	9106      	str	r1, [sp, #24]
 800e438:	a912      	add	r1, sp, #72	; 0x48
 800e43a:	9105      	str	r1, [sp, #20]
 800e43c:	a911      	add	r1, sp, #68	; 0x44
 800e43e:	9103      	str	r1, [sp, #12]
 800e440:	2123      	movs	r1, #35	; 0x23
 800e442:	a808      	add	r0, sp, #32
 800e444:	1809      	adds	r1, r1, r0
 800e446:	6023      	str	r3, [r4, #0]
 800e448:	9301      	str	r3, [sp, #4]
 800e44a:	9200      	str	r2, [sp, #0]
 800e44c:	002b      	movs	r3, r5
 800e44e:	9704      	str	r7, [sp, #16]
 800e450:	9102      	str	r1, [sp, #8]
 800e452:	0032      	movs	r2, r6
 800e454:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e456:	f7ff fd1b 	bl	800de90 <__cvt>
 800e45a:	0005      	movs	r5, r0
 800e45c:	e645      	b.n	800e0ea <_printf_float+0x122>
 800e45e:	46c0      	nop			; (mov r8, r8)

0800e460 <_printf_common>:
 800e460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e462:	0015      	movs	r5, r2
 800e464:	9301      	str	r3, [sp, #4]
 800e466:	688a      	ldr	r2, [r1, #8]
 800e468:	690b      	ldr	r3, [r1, #16]
 800e46a:	9000      	str	r0, [sp, #0]
 800e46c:	000c      	movs	r4, r1
 800e46e:	4293      	cmp	r3, r2
 800e470:	da00      	bge.n	800e474 <_printf_common+0x14>
 800e472:	0013      	movs	r3, r2
 800e474:	0022      	movs	r2, r4
 800e476:	602b      	str	r3, [r5, #0]
 800e478:	3243      	adds	r2, #67	; 0x43
 800e47a:	7812      	ldrb	r2, [r2, #0]
 800e47c:	2a00      	cmp	r2, #0
 800e47e:	d001      	beq.n	800e484 <_printf_common+0x24>
 800e480:	3301      	adds	r3, #1
 800e482:	602b      	str	r3, [r5, #0]
 800e484:	6823      	ldr	r3, [r4, #0]
 800e486:	069b      	lsls	r3, r3, #26
 800e488:	d502      	bpl.n	800e490 <_printf_common+0x30>
 800e48a:	682b      	ldr	r3, [r5, #0]
 800e48c:	3302      	adds	r3, #2
 800e48e:	602b      	str	r3, [r5, #0]
 800e490:	2706      	movs	r7, #6
 800e492:	6823      	ldr	r3, [r4, #0]
 800e494:	401f      	ands	r7, r3
 800e496:	d027      	beq.n	800e4e8 <_printf_common+0x88>
 800e498:	0023      	movs	r3, r4
 800e49a:	3343      	adds	r3, #67	; 0x43
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	1e5a      	subs	r2, r3, #1
 800e4a0:	4193      	sbcs	r3, r2
 800e4a2:	6822      	ldr	r2, [r4, #0]
 800e4a4:	0692      	lsls	r2, r2, #26
 800e4a6:	d430      	bmi.n	800e50a <_printf_common+0xaa>
 800e4a8:	0022      	movs	r2, r4
 800e4aa:	9901      	ldr	r1, [sp, #4]
 800e4ac:	3243      	adds	r2, #67	; 0x43
 800e4ae:	9800      	ldr	r0, [sp, #0]
 800e4b0:	9e08      	ldr	r6, [sp, #32]
 800e4b2:	47b0      	blx	r6
 800e4b4:	1c43      	adds	r3, r0, #1
 800e4b6:	d025      	beq.n	800e504 <_printf_common+0xa4>
 800e4b8:	2306      	movs	r3, #6
 800e4ba:	6820      	ldr	r0, [r4, #0]
 800e4bc:	682a      	ldr	r2, [r5, #0]
 800e4be:	68e1      	ldr	r1, [r4, #12]
 800e4c0:	4003      	ands	r3, r0
 800e4c2:	2500      	movs	r5, #0
 800e4c4:	2b04      	cmp	r3, #4
 800e4c6:	d103      	bne.n	800e4d0 <_printf_common+0x70>
 800e4c8:	1a8d      	subs	r5, r1, r2
 800e4ca:	43eb      	mvns	r3, r5
 800e4cc:	17db      	asrs	r3, r3, #31
 800e4ce:	401d      	ands	r5, r3
 800e4d0:	68a3      	ldr	r3, [r4, #8]
 800e4d2:	6922      	ldr	r2, [r4, #16]
 800e4d4:	4293      	cmp	r3, r2
 800e4d6:	dd01      	ble.n	800e4dc <_printf_common+0x7c>
 800e4d8:	1a9b      	subs	r3, r3, r2
 800e4da:	18ed      	adds	r5, r5, r3
 800e4dc:	2700      	movs	r7, #0
 800e4de:	42bd      	cmp	r5, r7
 800e4e0:	d120      	bne.n	800e524 <_printf_common+0xc4>
 800e4e2:	2000      	movs	r0, #0
 800e4e4:	e010      	b.n	800e508 <_printf_common+0xa8>
 800e4e6:	3701      	adds	r7, #1
 800e4e8:	68e3      	ldr	r3, [r4, #12]
 800e4ea:	682a      	ldr	r2, [r5, #0]
 800e4ec:	1a9b      	subs	r3, r3, r2
 800e4ee:	42bb      	cmp	r3, r7
 800e4f0:	ddd2      	ble.n	800e498 <_printf_common+0x38>
 800e4f2:	0022      	movs	r2, r4
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	3219      	adds	r2, #25
 800e4f8:	9901      	ldr	r1, [sp, #4]
 800e4fa:	9800      	ldr	r0, [sp, #0]
 800e4fc:	9e08      	ldr	r6, [sp, #32]
 800e4fe:	47b0      	blx	r6
 800e500:	1c43      	adds	r3, r0, #1
 800e502:	d1f0      	bne.n	800e4e6 <_printf_common+0x86>
 800e504:	2001      	movs	r0, #1
 800e506:	4240      	negs	r0, r0
 800e508:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e50a:	2030      	movs	r0, #48	; 0x30
 800e50c:	18e1      	adds	r1, r4, r3
 800e50e:	3143      	adds	r1, #67	; 0x43
 800e510:	7008      	strb	r0, [r1, #0]
 800e512:	0021      	movs	r1, r4
 800e514:	1c5a      	adds	r2, r3, #1
 800e516:	3145      	adds	r1, #69	; 0x45
 800e518:	7809      	ldrb	r1, [r1, #0]
 800e51a:	18a2      	adds	r2, r4, r2
 800e51c:	3243      	adds	r2, #67	; 0x43
 800e51e:	3302      	adds	r3, #2
 800e520:	7011      	strb	r1, [r2, #0]
 800e522:	e7c1      	b.n	800e4a8 <_printf_common+0x48>
 800e524:	0022      	movs	r2, r4
 800e526:	2301      	movs	r3, #1
 800e528:	321a      	adds	r2, #26
 800e52a:	9901      	ldr	r1, [sp, #4]
 800e52c:	9800      	ldr	r0, [sp, #0]
 800e52e:	9e08      	ldr	r6, [sp, #32]
 800e530:	47b0      	blx	r6
 800e532:	1c43      	adds	r3, r0, #1
 800e534:	d0e6      	beq.n	800e504 <_printf_common+0xa4>
 800e536:	3701      	adds	r7, #1
 800e538:	e7d1      	b.n	800e4de <_printf_common+0x7e>
	...

0800e53c <_printf_i>:
 800e53c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e53e:	b089      	sub	sp, #36	; 0x24
 800e540:	9204      	str	r2, [sp, #16]
 800e542:	000a      	movs	r2, r1
 800e544:	3243      	adds	r2, #67	; 0x43
 800e546:	9305      	str	r3, [sp, #20]
 800e548:	9003      	str	r0, [sp, #12]
 800e54a:	9202      	str	r2, [sp, #8]
 800e54c:	7e0a      	ldrb	r2, [r1, #24]
 800e54e:	000c      	movs	r4, r1
 800e550:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e552:	2a6e      	cmp	r2, #110	; 0x6e
 800e554:	d100      	bne.n	800e558 <_printf_i+0x1c>
 800e556:	e086      	b.n	800e666 <_printf_i+0x12a>
 800e558:	d81f      	bhi.n	800e59a <_printf_i+0x5e>
 800e55a:	2a63      	cmp	r2, #99	; 0x63
 800e55c:	d033      	beq.n	800e5c6 <_printf_i+0x8a>
 800e55e:	d808      	bhi.n	800e572 <_printf_i+0x36>
 800e560:	2a00      	cmp	r2, #0
 800e562:	d100      	bne.n	800e566 <_printf_i+0x2a>
 800e564:	e08c      	b.n	800e680 <_printf_i+0x144>
 800e566:	2a58      	cmp	r2, #88	; 0x58
 800e568:	d04d      	beq.n	800e606 <_printf_i+0xca>
 800e56a:	0025      	movs	r5, r4
 800e56c:	3542      	adds	r5, #66	; 0x42
 800e56e:	702a      	strb	r2, [r5, #0]
 800e570:	e030      	b.n	800e5d4 <_printf_i+0x98>
 800e572:	2a64      	cmp	r2, #100	; 0x64
 800e574:	d001      	beq.n	800e57a <_printf_i+0x3e>
 800e576:	2a69      	cmp	r2, #105	; 0x69
 800e578:	d1f7      	bne.n	800e56a <_printf_i+0x2e>
 800e57a:	6819      	ldr	r1, [r3, #0]
 800e57c:	6825      	ldr	r5, [r4, #0]
 800e57e:	1d0a      	adds	r2, r1, #4
 800e580:	0628      	lsls	r0, r5, #24
 800e582:	d529      	bpl.n	800e5d8 <_printf_i+0x9c>
 800e584:	6808      	ldr	r0, [r1, #0]
 800e586:	601a      	str	r2, [r3, #0]
 800e588:	2800      	cmp	r0, #0
 800e58a:	da03      	bge.n	800e594 <_printf_i+0x58>
 800e58c:	232d      	movs	r3, #45	; 0x2d
 800e58e:	9a02      	ldr	r2, [sp, #8]
 800e590:	4240      	negs	r0, r0
 800e592:	7013      	strb	r3, [r2, #0]
 800e594:	4e6b      	ldr	r6, [pc, #428]	; (800e744 <_printf_i+0x208>)
 800e596:	270a      	movs	r7, #10
 800e598:	e04f      	b.n	800e63a <_printf_i+0xfe>
 800e59a:	2a73      	cmp	r2, #115	; 0x73
 800e59c:	d074      	beq.n	800e688 <_printf_i+0x14c>
 800e59e:	d808      	bhi.n	800e5b2 <_printf_i+0x76>
 800e5a0:	2a6f      	cmp	r2, #111	; 0x6f
 800e5a2:	d01f      	beq.n	800e5e4 <_printf_i+0xa8>
 800e5a4:	2a70      	cmp	r2, #112	; 0x70
 800e5a6:	d1e0      	bne.n	800e56a <_printf_i+0x2e>
 800e5a8:	2220      	movs	r2, #32
 800e5aa:	6809      	ldr	r1, [r1, #0]
 800e5ac:	430a      	orrs	r2, r1
 800e5ae:	6022      	str	r2, [r4, #0]
 800e5b0:	e003      	b.n	800e5ba <_printf_i+0x7e>
 800e5b2:	2a75      	cmp	r2, #117	; 0x75
 800e5b4:	d016      	beq.n	800e5e4 <_printf_i+0xa8>
 800e5b6:	2a78      	cmp	r2, #120	; 0x78
 800e5b8:	d1d7      	bne.n	800e56a <_printf_i+0x2e>
 800e5ba:	0022      	movs	r2, r4
 800e5bc:	2178      	movs	r1, #120	; 0x78
 800e5be:	3245      	adds	r2, #69	; 0x45
 800e5c0:	7011      	strb	r1, [r2, #0]
 800e5c2:	4e61      	ldr	r6, [pc, #388]	; (800e748 <_printf_i+0x20c>)
 800e5c4:	e022      	b.n	800e60c <_printf_i+0xd0>
 800e5c6:	0025      	movs	r5, r4
 800e5c8:	681a      	ldr	r2, [r3, #0]
 800e5ca:	3542      	adds	r5, #66	; 0x42
 800e5cc:	1d11      	adds	r1, r2, #4
 800e5ce:	6019      	str	r1, [r3, #0]
 800e5d0:	6813      	ldr	r3, [r2, #0]
 800e5d2:	702b      	strb	r3, [r5, #0]
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	e065      	b.n	800e6a4 <_printf_i+0x168>
 800e5d8:	6808      	ldr	r0, [r1, #0]
 800e5da:	601a      	str	r2, [r3, #0]
 800e5dc:	0669      	lsls	r1, r5, #25
 800e5de:	d5d3      	bpl.n	800e588 <_printf_i+0x4c>
 800e5e0:	b200      	sxth	r0, r0
 800e5e2:	e7d1      	b.n	800e588 <_printf_i+0x4c>
 800e5e4:	6819      	ldr	r1, [r3, #0]
 800e5e6:	6825      	ldr	r5, [r4, #0]
 800e5e8:	1d08      	adds	r0, r1, #4
 800e5ea:	6018      	str	r0, [r3, #0]
 800e5ec:	6808      	ldr	r0, [r1, #0]
 800e5ee:	062e      	lsls	r6, r5, #24
 800e5f0:	d505      	bpl.n	800e5fe <_printf_i+0xc2>
 800e5f2:	4e54      	ldr	r6, [pc, #336]	; (800e744 <_printf_i+0x208>)
 800e5f4:	2708      	movs	r7, #8
 800e5f6:	2a6f      	cmp	r2, #111	; 0x6f
 800e5f8:	d01b      	beq.n	800e632 <_printf_i+0xf6>
 800e5fa:	270a      	movs	r7, #10
 800e5fc:	e019      	b.n	800e632 <_printf_i+0xf6>
 800e5fe:	066d      	lsls	r5, r5, #25
 800e600:	d5f7      	bpl.n	800e5f2 <_printf_i+0xb6>
 800e602:	b280      	uxth	r0, r0
 800e604:	e7f5      	b.n	800e5f2 <_printf_i+0xb6>
 800e606:	3145      	adds	r1, #69	; 0x45
 800e608:	4e4e      	ldr	r6, [pc, #312]	; (800e744 <_printf_i+0x208>)
 800e60a:	700a      	strb	r2, [r1, #0]
 800e60c:	6818      	ldr	r0, [r3, #0]
 800e60e:	6822      	ldr	r2, [r4, #0]
 800e610:	1d01      	adds	r1, r0, #4
 800e612:	6800      	ldr	r0, [r0, #0]
 800e614:	6019      	str	r1, [r3, #0]
 800e616:	0615      	lsls	r5, r2, #24
 800e618:	d521      	bpl.n	800e65e <_printf_i+0x122>
 800e61a:	07d3      	lsls	r3, r2, #31
 800e61c:	d502      	bpl.n	800e624 <_printf_i+0xe8>
 800e61e:	2320      	movs	r3, #32
 800e620:	431a      	orrs	r2, r3
 800e622:	6022      	str	r2, [r4, #0]
 800e624:	2710      	movs	r7, #16
 800e626:	2800      	cmp	r0, #0
 800e628:	d103      	bne.n	800e632 <_printf_i+0xf6>
 800e62a:	2320      	movs	r3, #32
 800e62c:	6822      	ldr	r2, [r4, #0]
 800e62e:	439a      	bics	r2, r3
 800e630:	6022      	str	r2, [r4, #0]
 800e632:	0023      	movs	r3, r4
 800e634:	2200      	movs	r2, #0
 800e636:	3343      	adds	r3, #67	; 0x43
 800e638:	701a      	strb	r2, [r3, #0]
 800e63a:	6863      	ldr	r3, [r4, #4]
 800e63c:	60a3      	str	r3, [r4, #8]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	db58      	blt.n	800e6f4 <_printf_i+0x1b8>
 800e642:	2204      	movs	r2, #4
 800e644:	6821      	ldr	r1, [r4, #0]
 800e646:	4391      	bics	r1, r2
 800e648:	6021      	str	r1, [r4, #0]
 800e64a:	2800      	cmp	r0, #0
 800e64c:	d154      	bne.n	800e6f8 <_printf_i+0x1bc>
 800e64e:	9d02      	ldr	r5, [sp, #8]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d05a      	beq.n	800e70a <_printf_i+0x1ce>
 800e654:	0025      	movs	r5, r4
 800e656:	7833      	ldrb	r3, [r6, #0]
 800e658:	3542      	adds	r5, #66	; 0x42
 800e65a:	702b      	strb	r3, [r5, #0]
 800e65c:	e055      	b.n	800e70a <_printf_i+0x1ce>
 800e65e:	0655      	lsls	r5, r2, #25
 800e660:	d5db      	bpl.n	800e61a <_printf_i+0xde>
 800e662:	b280      	uxth	r0, r0
 800e664:	e7d9      	b.n	800e61a <_printf_i+0xde>
 800e666:	681a      	ldr	r2, [r3, #0]
 800e668:	680d      	ldr	r5, [r1, #0]
 800e66a:	1d10      	adds	r0, r2, #4
 800e66c:	6949      	ldr	r1, [r1, #20]
 800e66e:	6018      	str	r0, [r3, #0]
 800e670:	6813      	ldr	r3, [r2, #0]
 800e672:	062e      	lsls	r6, r5, #24
 800e674:	d501      	bpl.n	800e67a <_printf_i+0x13e>
 800e676:	6019      	str	r1, [r3, #0]
 800e678:	e002      	b.n	800e680 <_printf_i+0x144>
 800e67a:	066d      	lsls	r5, r5, #25
 800e67c:	d5fb      	bpl.n	800e676 <_printf_i+0x13a>
 800e67e:	8019      	strh	r1, [r3, #0]
 800e680:	2300      	movs	r3, #0
 800e682:	9d02      	ldr	r5, [sp, #8]
 800e684:	6123      	str	r3, [r4, #16]
 800e686:	e04f      	b.n	800e728 <_printf_i+0x1ec>
 800e688:	681a      	ldr	r2, [r3, #0]
 800e68a:	1d11      	adds	r1, r2, #4
 800e68c:	6019      	str	r1, [r3, #0]
 800e68e:	6815      	ldr	r5, [r2, #0]
 800e690:	2100      	movs	r1, #0
 800e692:	6862      	ldr	r2, [r4, #4]
 800e694:	0028      	movs	r0, r5
 800e696:	f002 fc0f 	bl	8010eb8 <memchr>
 800e69a:	2800      	cmp	r0, #0
 800e69c:	d001      	beq.n	800e6a2 <_printf_i+0x166>
 800e69e:	1b40      	subs	r0, r0, r5
 800e6a0:	6060      	str	r0, [r4, #4]
 800e6a2:	6863      	ldr	r3, [r4, #4]
 800e6a4:	6123      	str	r3, [r4, #16]
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	9a02      	ldr	r2, [sp, #8]
 800e6aa:	7013      	strb	r3, [r2, #0]
 800e6ac:	e03c      	b.n	800e728 <_printf_i+0x1ec>
 800e6ae:	6923      	ldr	r3, [r4, #16]
 800e6b0:	002a      	movs	r2, r5
 800e6b2:	9904      	ldr	r1, [sp, #16]
 800e6b4:	9803      	ldr	r0, [sp, #12]
 800e6b6:	9d05      	ldr	r5, [sp, #20]
 800e6b8:	47a8      	blx	r5
 800e6ba:	1c43      	adds	r3, r0, #1
 800e6bc:	d03e      	beq.n	800e73c <_printf_i+0x200>
 800e6be:	6823      	ldr	r3, [r4, #0]
 800e6c0:	079b      	lsls	r3, r3, #30
 800e6c2:	d415      	bmi.n	800e6f0 <_printf_i+0x1b4>
 800e6c4:	9b07      	ldr	r3, [sp, #28]
 800e6c6:	68e0      	ldr	r0, [r4, #12]
 800e6c8:	4298      	cmp	r0, r3
 800e6ca:	da39      	bge.n	800e740 <_printf_i+0x204>
 800e6cc:	0018      	movs	r0, r3
 800e6ce:	e037      	b.n	800e740 <_printf_i+0x204>
 800e6d0:	0022      	movs	r2, r4
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	3219      	adds	r2, #25
 800e6d6:	9904      	ldr	r1, [sp, #16]
 800e6d8:	9803      	ldr	r0, [sp, #12]
 800e6da:	9e05      	ldr	r6, [sp, #20]
 800e6dc:	47b0      	blx	r6
 800e6de:	1c43      	adds	r3, r0, #1
 800e6e0:	d02c      	beq.n	800e73c <_printf_i+0x200>
 800e6e2:	3501      	adds	r5, #1
 800e6e4:	68e3      	ldr	r3, [r4, #12]
 800e6e6:	9a07      	ldr	r2, [sp, #28]
 800e6e8:	1a9b      	subs	r3, r3, r2
 800e6ea:	42ab      	cmp	r3, r5
 800e6ec:	dcf0      	bgt.n	800e6d0 <_printf_i+0x194>
 800e6ee:	e7e9      	b.n	800e6c4 <_printf_i+0x188>
 800e6f0:	2500      	movs	r5, #0
 800e6f2:	e7f7      	b.n	800e6e4 <_printf_i+0x1a8>
 800e6f4:	2800      	cmp	r0, #0
 800e6f6:	d0ad      	beq.n	800e654 <_printf_i+0x118>
 800e6f8:	9d02      	ldr	r5, [sp, #8]
 800e6fa:	0039      	movs	r1, r7
 800e6fc:	f7f6 fda0 	bl	8005240 <__aeabi_uidivmod>
 800e700:	5c73      	ldrb	r3, [r6, r1]
 800e702:	3d01      	subs	r5, #1
 800e704:	702b      	strb	r3, [r5, #0]
 800e706:	2800      	cmp	r0, #0
 800e708:	d1f7      	bne.n	800e6fa <_printf_i+0x1be>
 800e70a:	2f08      	cmp	r7, #8
 800e70c:	d109      	bne.n	800e722 <_printf_i+0x1e6>
 800e70e:	6823      	ldr	r3, [r4, #0]
 800e710:	07db      	lsls	r3, r3, #31
 800e712:	d506      	bpl.n	800e722 <_printf_i+0x1e6>
 800e714:	6863      	ldr	r3, [r4, #4]
 800e716:	6922      	ldr	r2, [r4, #16]
 800e718:	4293      	cmp	r3, r2
 800e71a:	dc02      	bgt.n	800e722 <_printf_i+0x1e6>
 800e71c:	2330      	movs	r3, #48	; 0x30
 800e71e:	3d01      	subs	r5, #1
 800e720:	702b      	strb	r3, [r5, #0]
 800e722:	9b02      	ldr	r3, [sp, #8]
 800e724:	1b5b      	subs	r3, r3, r5
 800e726:	6123      	str	r3, [r4, #16]
 800e728:	9b05      	ldr	r3, [sp, #20]
 800e72a:	aa07      	add	r2, sp, #28
 800e72c:	9300      	str	r3, [sp, #0]
 800e72e:	0021      	movs	r1, r4
 800e730:	9b04      	ldr	r3, [sp, #16]
 800e732:	9803      	ldr	r0, [sp, #12]
 800e734:	f7ff fe94 	bl	800e460 <_printf_common>
 800e738:	1c43      	adds	r3, r0, #1
 800e73a:	d1b8      	bne.n	800e6ae <_printf_i+0x172>
 800e73c:	2001      	movs	r0, #1
 800e73e:	4240      	negs	r0, r0
 800e740:	b009      	add	sp, #36	; 0x24
 800e742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e744:	08012bba 	.word	0x08012bba
 800e748:	08012bcb 	.word	0x08012bcb

0800e74c <_scanf_float>:
 800e74c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e74e:	b08b      	sub	sp, #44	; 0x2c
 800e750:	9002      	str	r0, [sp, #8]
 800e752:	9200      	str	r2, [sp, #0]
 800e754:	2000      	movs	r0, #0
 800e756:	22ae      	movs	r2, #174	; 0xae
 800e758:	9305      	str	r3, [sp, #20]
 800e75a:	688b      	ldr	r3, [r1, #8]
 800e75c:	000e      	movs	r6, r1
 800e75e:	1e59      	subs	r1, r3, #1
 800e760:	0052      	lsls	r2, r2, #1
 800e762:	9004      	str	r0, [sp, #16]
 800e764:	4291      	cmp	r1, r2
 800e766:	d905      	bls.n	800e774 <_scanf_float+0x28>
 800e768:	3b5e      	subs	r3, #94	; 0x5e
 800e76a:	3bff      	subs	r3, #255	; 0xff
 800e76c:	9304      	str	r3, [sp, #16]
 800e76e:	235e      	movs	r3, #94	; 0x5e
 800e770:	33ff      	adds	r3, #255	; 0xff
 800e772:	60b3      	str	r3, [r6, #8]
 800e774:	23f0      	movs	r3, #240	; 0xf0
 800e776:	6832      	ldr	r2, [r6, #0]
 800e778:	00db      	lsls	r3, r3, #3
 800e77a:	4313      	orrs	r3, r2
 800e77c:	6033      	str	r3, [r6, #0]
 800e77e:	0033      	movs	r3, r6
 800e780:	2700      	movs	r7, #0
 800e782:	331c      	adds	r3, #28
 800e784:	001d      	movs	r5, r3
 800e786:	003c      	movs	r4, r7
 800e788:	9303      	str	r3, [sp, #12]
 800e78a:	9708      	str	r7, [sp, #32]
 800e78c:	9707      	str	r7, [sp, #28]
 800e78e:	9701      	str	r7, [sp, #4]
 800e790:	9706      	str	r7, [sp, #24]
 800e792:	68b2      	ldr	r2, [r6, #8]
 800e794:	2a00      	cmp	r2, #0
 800e796:	d013      	beq.n	800e7c0 <_scanf_float+0x74>
 800e798:	9b00      	ldr	r3, [sp, #0]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	9309      	str	r3, [sp, #36]	; 0x24
 800e79e:	781b      	ldrb	r3, [r3, #0]
 800e7a0:	2b49      	cmp	r3, #73	; 0x49
 800e7a2:	d100      	bne.n	800e7a6 <_scanf_float+0x5a>
 800e7a4:	e07c      	b.n	800e8a0 <_scanf_float+0x154>
 800e7a6:	d854      	bhi.n	800e852 <_scanf_float+0x106>
 800e7a8:	2b39      	cmp	r3, #57	; 0x39
 800e7aa:	d847      	bhi.n	800e83c <_scanf_float+0xf0>
 800e7ac:	2b31      	cmp	r3, #49	; 0x31
 800e7ae:	d300      	bcc.n	800e7b2 <_scanf_float+0x66>
 800e7b0:	e094      	b.n	800e8dc <_scanf_float+0x190>
 800e7b2:	2b2d      	cmp	r3, #45	; 0x2d
 800e7b4:	d100      	bne.n	800e7b8 <_scanf_float+0x6c>
 800e7b6:	e09c      	b.n	800e8f2 <_scanf_float+0x1a6>
 800e7b8:	d817      	bhi.n	800e7ea <_scanf_float+0x9e>
 800e7ba:	2b2b      	cmp	r3, #43	; 0x2b
 800e7bc:	d100      	bne.n	800e7c0 <_scanf_float+0x74>
 800e7be:	e098      	b.n	800e8f2 <_scanf_float+0x1a6>
 800e7c0:	9b01      	ldr	r3, [sp, #4]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d003      	beq.n	800e7ce <_scanf_float+0x82>
 800e7c6:	6832      	ldr	r2, [r6, #0]
 800e7c8:	4b9b      	ldr	r3, [pc, #620]	; (800ea38 <_scanf_float+0x2ec>)
 800e7ca:	4013      	ands	r3, r2
 800e7cc:	6033      	str	r3, [r6, #0]
 800e7ce:	3c01      	subs	r4, #1
 800e7d0:	2c01      	cmp	r4, #1
 800e7d2:	d900      	bls.n	800e7d6 <_scanf_float+0x8a>
 800e7d4:	e0ee      	b.n	800e9b4 <_scanf_float+0x268>
 800e7d6:	24be      	movs	r4, #190	; 0xbe
 800e7d8:	0064      	lsls	r4, r4, #1
 800e7da:	9b03      	ldr	r3, [sp, #12]
 800e7dc:	429d      	cmp	r5, r3
 800e7de:	d900      	bls.n	800e7e2 <_scanf_float+0x96>
 800e7e0:	e0de      	b.n	800e9a0 <_scanf_float+0x254>
 800e7e2:	2701      	movs	r7, #1
 800e7e4:	0038      	movs	r0, r7
 800e7e6:	b00b      	add	sp, #44	; 0x2c
 800e7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7ea:	2b2e      	cmp	r3, #46	; 0x2e
 800e7ec:	d100      	bne.n	800e7f0 <_scanf_float+0xa4>
 800e7ee:	e0a2      	b.n	800e936 <_scanf_float+0x1ea>
 800e7f0:	2b30      	cmp	r3, #48	; 0x30
 800e7f2:	d1e5      	bne.n	800e7c0 <_scanf_float+0x74>
 800e7f4:	6831      	ldr	r1, [r6, #0]
 800e7f6:	05c8      	lsls	r0, r1, #23
 800e7f8:	d570      	bpl.n	800e8dc <_scanf_float+0x190>
 800e7fa:	2380      	movs	r3, #128	; 0x80
 800e7fc:	4399      	bics	r1, r3
 800e7fe:	9b01      	ldr	r3, [sp, #4]
 800e800:	6031      	str	r1, [r6, #0]
 800e802:	3301      	adds	r3, #1
 800e804:	9301      	str	r3, [sp, #4]
 800e806:	9b04      	ldr	r3, [sp, #16]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d003      	beq.n	800e814 <_scanf_float+0xc8>
 800e80c:	3b01      	subs	r3, #1
 800e80e:	3201      	adds	r2, #1
 800e810:	9304      	str	r3, [sp, #16]
 800e812:	60b2      	str	r2, [r6, #8]
 800e814:	68b3      	ldr	r3, [r6, #8]
 800e816:	9a00      	ldr	r2, [sp, #0]
 800e818:	3b01      	subs	r3, #1
 800e81a:	60b3      	str	r3, [r6, #8]
 800e81c:	6933      	ldr	r3, [r6, #16]
 800e81e:	3301      	adds	r3, #1
 800e820:	6133      	str	r3, [r6, #16]
 800e822:	9b00      	ldr	r3, [sp, #0]
 800e824:	685b      	ldr	r3, [r3, #4]
 800e826:	9309      	str	r3, [sp, #36]	; 0x24
 800e828:	3b01      	subs	r3, #1
 800e82a:	6053      	str	r3, [r2, #4]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	dc00      	bgt.n	800e832 <_scanf_float+0xe6>
 800e830:	e0ac      	b.n	800e98c <_scanf_float+0x240>
 800e832:	6813      	ldr	r3, [r2, #0]
 800e834:	9309      	str	r3, [sp, #36]	; 0x24
 800e836:	3301      	adds	r3, #1
 800e838:	6013      	str	r3, [r2, #0]
 800e83a:	e7aa      	b.n	800e792 <_scanf_float+0x46>
 800e83c:	2b45      	cmp	r3, #69	; 0x45
 800e83e:	d100      	bne.n	800e842 <_scanf_float+0xf6>
 800e840:	e083      	b.n	800e94a <_scanf_float+0x1fe>
 800e842:	2b46      	cmp	r3, #70	; 0x46
 800e844:	d06d      	beq.n	800e922 <_scanf_float+0x1d6>
 800e846:	2b41      	cmp	r3, #65	; 0x41
 800e848:	d1ba      	bne.n	800e7c0 <_scanf_float+0x74>
 800e84a:	2c01      	cmp	r4, #1
 800e84c:	d1b8      	bne.n	800e7c0 <_scanf_float+0x74>
 800e84e:	2402      	movs	r4, #2
 800e850:	e04c      	b.n	800e8ec <_scanf_float+0x1a0>
 800e852:	2b65      	cmp	r3, #101	; 0x65
 800e854:	d079      	beq.n	800e94a <_scanf_float+0x1fe>
 800e856:	d81b      	bhi.n	800e890 <_scanf_float+0x144>
 800e858:	2b54      	cmp	r3, #84	; 0x54
 800e85a:	d067      	beq.n	800e92c <_scanf_float+0x1e0>
 800e85c:	d813      	bhi.n	800e886 <_scanf_float+0x13a>
 800e85e:	2b4e      	cmp	r3, #78	; 0x4e
 800e860:	d1ae      	bne.n	800e7c0 <_scanf_float+0x74>
 800e862:	2c00      	cmp	r4, #0
 800e864:	d14c      	bne.n	800e900 <_scanf_float+0x1b4>
 800e866:	9a01      	ldr	r2, [sp, #4]
 800e868:	2a00      	cmp	r2, #0
 800e86a:	d14b      	bne.n	800e904 <_scanf_float+0x1b8>
 800e86c:	21e0      	movs	r1, #224	; 0xe0
 800e86e:	20e0      	movs	r0, #224	; 0xe0
 800e870:	6832      	ldr	r2, [r6, #0]
 800e872:	00c9      	lsls	r1, r1, #3
 800e874:	4011      	ands	r1, r2
 800e876:	00c0      	lsls	r0, r0, #3
 800e878:	4281      	cmp	r1, r0
 800e87a:	d143      	bne.n	800e904 <_scanf_float+0x1b8>
 800e87c:	496f      	ldr	r1, [pc, #444]	; (800ea3c <_scanf_float+0x2f0>)
 800e87e:	3401      	adds	r4, #1
 800e880:	400a      	ands	r2, r1
 800e882:	6032      	str	r2, [r6, #0]
 800e884:	e032      	b.n	800e8ec <_scanf_float+0x1a0>
 800e886:	2b59      	cmp	r3, #89	; 0x59
 800e888:	d023      	beq.n	800e8d2 <_scanf_float+0x186>
 800e88a:	2b61      	cmp	r3, #97	; 0x61
 800e88c:	d0dd      	beq.n	800e84a <_scanf_float+0xfe>
 800e88e:	e797      	b.n	800e7c0 <_scanf_float+0x74>
 800e890:	2b6e      	cmp	r3, #110	; 0x6e
 800e892:	d0e6      	beq.n	800e862 <_scanf_float+0x116>
 800e894:	d818      	bhi.n	800e8c8 <_scanf_float+0x17c>
 800e896:	2b66      	cmp	r3, #102	; 0x66
 800e898:	d043      	beq.n	800e922 <_scanf_float+0x1d6>
 800e89a:	2b69      	cmp	r3, #105	; 0x69
 800e89c:	d000      	beq.n	800e8a0 <_scanf_float+0x154>
 800e89e:	e78f      	b.n	800e7c0 <_scanf_float+0x74>
 800e8a0:	2f00      	cmp	r7, #0
 800e8a2:	d137      	bne.n	800e914 <_scanf_float+0x1c8>
 800e8a4:	9a01      	ldr	r2, [sp, #4]
 800e8a6:	2a00      	cmp	r2, #0
 800e8a8:	d000      	beq.n	800e8ac <_scanf_float+0x160>
 800e8aa:	e78c      	b.n	800e7c6 <_scanf_float+0x7a>
 800e8ac:	21e0      	movs	r1, #224	; 0xe0
 800e8ae:	20e0      	movs	r0, #224	; 0xe0
 800e8b0:	6832      	ldr	r2, [r6, #0]
 800e8b2:	00c9      	lsls	r1, r1, #3
 800e8b4:	4011      	ands	r1, r2
 800e8b6:	00c0      	lsls	r0, r0, #3
 800e8b8:	4281      	cmp	r1, r0
 800e8ba:	d000      	beq.n	800e8be <_scanf_float+0x172>
 800e8bc:	e787      	b.n	800e7ce <_scanf_float+0x82>
 800e8be:	495f      	ldr	r1, [pc, #380]	; (800ea3c <_scanf_float+0x2f0>)
 800e8c0:	3701      	adds	r7, #1
 800e8c2:	400a      	ands	r2, r1
 800e8c4:	6032      	str	r2, [r6, #0]
 800e8c6:	e011      	b.n	800e8ec <_scanf_float+0x1a0>
 800e8c8:	2b74      	cmp	r3, #116	; 0x74
 800e8ca:	d02f      	beq.n	800e92c <_scanf_float+0x1e0>
 800e8cc:	2b79      	cmp	r3, #121	; 0x79
 800e8ce:	d000      	beq.n	800e8d2 <_scanf_float+0x186>
 800e8d0:	e776      	b.n	800e7c0 <_scanf_float+0x74>
 800e8d2:	2f07      	cmp	r7, #7
 800e8d4:	d000      	beq.n	800e8d8 <_scanf_float+0x18c>
 800e8d6:	e773      	b.n	800e7c0 <_scanf_float+0x74>
 800e8d8:	2708      	movs	r7, #8
 800e8da:	e007      	b.n	800e8ec <_scanf_float+0x1a0>
 800e8dc:	19e2      	adds	r2, r4, r7
 800e8de:	2a00      	cmp	r2, #0
 800e8e0:	d000      	beq.n	800e8e4 <_scanf_float+0x198>
 800e8e2:	e76d      	b.n	800e7c0 <_scanf_float+0x74>
 800e8e4:	4a56      	ldr	r2, [pc, #344]	; (800ea40 <_scanf_float+0x2f4>)
 800e8e6:	6831      	ldr	r1, [r6, #0]
 800e8e8:	400a      	ands	r2, r1
 800e8ea:	6032      	str	r2, [r6, #0]
 800e8ec:	702b      	strb	r3, [r5, #0]
 800e8ee:	3501      	adds	r5, #1
 800e8f0:	e790      	b.n	800e814 <_scanf_float+0xc8>
 800e8f2:	2180      	movs	r1, #128	; 0x80
 800e8f4:	6832      	ldr	r2, [r6, #0]
 800e8f6:	420a      	tst	r2, r1
 800e8f8:	d100      	bne.n	800e8fc <_scanf_float+0x1b0>
 800e8fa:	e761      	b.n	800e7c0 <_scanf_float+0x74>
 800e8fc:	438a      	bics	r2, r1
 800e8fe:	e7f4      	b.n	800e8ea <_scanf_float+0x19e>
 800e900:	2c02      	cmp	r4, #2
 800e902:	d041      	beq.n	800e988 <_scanf_float+0x23c>
 800e904:	2f01      	cmp	r7, #1
 800e906:	d002      	beq.n	800e90e <_scanf_float+0x1c2>
 800e908:	2f04      	cmp	r7, #4
 800e90a:	d000      	beq.n	800e90e <_scanf_float+0x1c2>
 800e90c:	e758      	b.n	800e7c0 <_scanf_float+0x74>
 800e90e:	3701      	adds	r7, #1
 800e910:	b2ff      	uxtb	r7, r7
 800e912:	e7eb      	b.n	800e8ec <_scanf_float+0x1a0>
 800e914:	2102      	movs	r1, #2
 800e916:	1efa      	subs	r2, r7, #3
 800e918:	438a      	bics	r2, r1
 800e91a:	b2d2      	uxtb	r2, r2
 800e91c:	2a00      	cmp	r2, #0
 800e91e:	d0f6      	beq.n	800e90e <_scanf_float+0x1c2>
 800e920:	e74e      	b.n	800e7c0 <_scanf_float+0x74>
 800e922:	2f02      	cmp	r7, #2
 800e924:	d000      	beq.n	800e928 <_scanf_float+0x1dc>
 800e926:	e74b      	b.n	800e7c0 <_scanf_float+0x74>
 800e928:	2703      	movs	r7, #3
 800e92a:	e7df      	b.n	800e8ec <_scanf_float+0x1a0>
 800e92c:	2f06      	cmp	r7, #6
 800e92e:	d000      	beq.n	800e932 <_scanf_float+0x1e6>
 800e930:	e746      	b.n	800e7c0 <_scanf_float+0x74>
 800e932:	2707      	movs	r7, #7
 800e934:	e7da      	b.n	800e8ec <_scanf_float+0x1a0>
 800e936:	6832      	ldr	r2, [r6, #0]
 800e938:	0591      	lsls	r1, r2, #22
 800e93a:	d400      	bmi.n	800e93e <_scanf_float+0x1f2>
 800e93c:	e740      	b.n	800e7c0 <_scanf_float+0x74>
 800e93e:	4941      	ldr	r1, [pc, #260]	; (800ea44 <_scanf_float+0x2f8>)
 800e940:	400a      	ands	r2, r1
 800e942:	6032      	str	r2, [r6, #0]
 800e944:	9a01      	ldr	r2, [sp, #4]
 800e946:	9206      	str	r2, [sp, #24]
 800e948:	e7d0      	b.n	800e8ec <_scanf_float+0x1a0>
 800e94a:	21a0      	movs	r1, #160	; 0xa0
 800e94c:	2080      	movs	r0, #128	; 0x80
 800e94e:	6832      	ldr	r2, [r6, #0]
 800e950:	00c9      	lsls	r1, r1, #3
 800e952:	4011      	ands	r1, r2
 800e954:	00c0      	lsls	r0, r0, #3
 800e956:	4281      	cmp	r1, r0
 800e958:	d006      	beq.n	800e968 <_scanf_float+0x21c>
 800e95a:	4202      	tst	r2, r0
 800e95c:	d100      	bne.n	800e960 <_scanf_float+0x214>
 800e95e:	e72f      	b.n	800e7c0 <_scanf_float+0x74>
 800e960:	9901      	ldr	r1, [sp, #4]
 800e962:	2900      	cmp	r1, #0
 800e964:	d100      	bne.n	800e968 <_scanf_float+0x21c>
 800e966:	e732      	b.n	800e7ce <_scanf_float+0x82>
 800e968:	0591      	lsls	r1, r2, #22
 800e96a:	d404      	bmi.n	800e976 <_scanf_float+0x22a>
 800e96c:	9901      	ldr	r1, [sp, #4]
 800e96e:	9806      	ldr	r0, [sp, #24]
 800e970:	9508      	str	r5, [sp, #32]
 800e972:	1a09      	subs	r1, r1, r0
 800e974:	9107      	str	r1, [sp, #28]
 800e976:	4931      	ldr	r1, [pc, #196]	; (800ea3c <_scanf_float+0x2f0>)
 800e978:	400a      	ands	r2, r1
 800e97a:	21c0      	movs	r1, #192	; 0xc0
 800e97c:	0049      	lsls	r1, r1, #1
 800e97e:	430a      	orrs	r2, r1
 800e980:	6032      	str	r2, [r6, #0]
 800e982:	2200      	movs	r2, #0
 800e984:	9201      	str	r2, [sp, #4]
 800e986:	e7b1      	b.n	800e8ec <_scanf_float+0x1a0>
 800e988:	2403      	movs	r4, #3
 800e98a:	e7af      	b.n	800e8ec <_scanf_float+0x1a0>
 800e98c:	23c0      	movs	r3, #192	; 0xc0
 800e98e:	005b      	lsls	r3, r3, #1
 800e990:	58f3      	ldr	r3, [r6, r3]
 800e992:	9900      	ldr	r1, [sp, #0]
 800e994:	9802      	ldr	r0, [sp, #8]
 800e996:	4798      	blx	r3
 800e998:	2800      	cmp	r0, #0
 800e99a:	d100      	bne.n	800e99e <_scanf_float+0x252>
 800e99c:	e6f9      	b.n	800e792 <_scanf_float+0x46>
 800e99e:	e70f      	b.n	800e7c0 <_scanf_float+0x74>
 800e9a0:	3d01      	subs	r5, #1
 800e9a2:	5933      	ldr	r3, [r6, r4]
 800e9a4:	7829      	ldrb	r1, [r5, #0]
 800e9a6:	9a00      	ldr	r2, [sp, #0]
 800e9a8:	9802      	ldr	r0, [sp, #8]
 800e9aa:	4798      	blx	r3
 800e9ac:	6933      	ldr	r3, [r6, #16]
 800e9ae:	3b01      	subs	r3, #1
 800e9b0:	6133      	str	r3, [r6, #16]
 800e9b2:	e712      	b.n	800e7da <_scanf_float+0x8e>
 800e9b4:	1e7b      	subs	r3, r7, #1
 800e9b6:	2b06      	cmp	r3, #6
 800e9b8:	d826      	bhi.n	800ea08 <_scanf_float+0x2bc>
 800e9ba:	2f02      	cmp	r7, #2
 800e9bc:	d839      	bhi.n	800ea32 <_scanf_float+0x2e6>
 800e9be:	24be      	movs	r4, #190	; 0xbe
 800e9c0:	0064      	lsls	r4, r4, #1
 800e9c2:	9b03      	ldr	r3, [sp, #12]
 800e9c4:	429d      	cmp	r5, r3
 800e9c6:	d800      	bhi.n	800e9ca <_scanf_float+0x27e>
 800e9c8:	e70b      	b.n	800e7e2 <_scanf_float+0x96>
 800e9ca:	3d01      	subs	r5, #1
 800e9cc:	5933      	ldr	r3, [r6, r4]
 800e9ce:	7829      	ldrb	r1, [r5, #0]
 800e9d0:	9a00      	ldr	r2, [sp, #0]
 800e9d2:	9802      	ldr	r0, [sp, #8]
 800e9d4:	4798      	blx	r3
 800e9d6:	6933      	ldr	r3, [r6, #16]
 800e9d8:	3b01      	subs	r3, #1
 800e9da:	6133      	str	r3, [r6, #16]
 800e9dc:	e7f1      	b.n	800e9c2 <_scanf_float+0x276>
 800e9de:	9b04      	ldr	r3, [sp, #16]
 800e9e0:	9a00      	ldr	r2, [sp, #0]
 800e9e2:	3b01      	subs	r3, #1
 800e9e4:	9304      	str	r3, [sp, #16]
 800e9e6:	7819      	ldrb	r1, [r3, #0]
 800e9e8:	23be      	movs	r3, #190	; 0xbe
 800e9ea:	005b      	lsls	r3, r3, #1
 800e9ec:	58f3      	ldr	r3, [r6, r3]
 800e9ee:	9802      	ldr	r0, [sp, #8]
 800e9f0:	9309      	str	r3, [sp, #36]	; 0x24
 800e9f2:	4798      	blx	r3
 800e9f4:	6933      	ldr	r3, [r6, #16]
 800e9f6:	3b01      	subs	r3, #1
 800e9f8:	6133      	str	r3, [r6, #16]
 800e9fa:	3c01      	subs	r4, #1
 800e9fc:	b2e4      	uxtb	r4, r4
 800e9fe:	2c02      	cmp	r4, #2
 800ea00:	d1ed      	bne.n	800e9de <_scanf_float+0x292>
 800ea02:	3f03      	subs	r7, #3
 800ea04:	b2ff      	uxtb	r7, r7
 800ea06:	1bed      	subs	r5, r5, r7
 800ea08:	6833      	ldr	r3, [r6, #0]
 800ea0a:	05da      	lsls	r2, r3, #23
 800ea0c:	d537      	bpl.n	800ea7e <_scanf_float+0x332>
 800ea0e:	055b      	lsls	r3, r3, #21
 800ea10:	d51a      	bpl.n	800ea48 <_scanf_float+0x2fc>
 800ea12:	24be      	movs	r4, #190	; 0xbe
 800ea14:	0064      	lsls	r4, r4, #1
 800ea16:	9b03      	ldr	r3, [sp, #12]
 800ea18:	429d      	cmp	r5, r3
 800ea1a:	d800      	bhi.n	800ea1e <_scanf_float+0x2d2>
 800ea1c:	e6e1      	b.n	800e7e2 <_scanf_float+0x96>
 800ea1e:	3d01      	subs	r5, #1
 800ea20:	5933      	ldr	r3, [r6, r4]
 800ea22:	7829      	ldrb	r1, [r5, #0]
 800ea24:	9a00      	ldr	r2, [sp, #0]
 800ea26:	9802      	ldr	r0, [sp, #8]
 800ea28:	4798      	blx	r3
 800ea2a:	6933      	ldr	r3, [r6, #16]
 800ea2c:	3b01      	subs	r3, #1
 800ea2e:	6133      	str	r3, [r6, #16]
 800ea30:	e7f1      	b.n	800ea16 <_scanf_float+0x2ca>
 800ea32:	003c      	movs	r4, r7
 800ea34:	9504      	str	r5, [sp, #16]
 800ea36:	e7e0      	b.n	800e9fa <_scanf_float+0x2ae>
 800ea38:	fffffeff 	.word	0xfffffeff
 800ea3c:	fffff87f 	.word	0xfffff87f
 800ea40:	fffffe7f 	.word	0xfffffe7f
 800ea44:	fffffd7f 	.word	0xfffffd7f
 800ea48:	6933      	ldr	r3, [r6, #16]
 800ea4a:	1e6c      	subs	r4, r5, #1
 800ea4c:	7821      	ldrb	r1, [r4, #0]
 800ea4e:	3b01      	subs	r3, #1
 800ea50:	6133      	str	r3, [r6, #16]
 800ea52:	2965      	cmp	r1, #101	; 0x65
 800ea54:	d00c      	beq.n	800ea70 <_scanf_float+0x324>
 800ea56:	2945      	cmp	r1, #69	; 0x45
 800ea58:	d00a      	beq.n	800ea70 <_scanf_float+0x324>
 800ea5a:	23be      	movs	r3, #190	; 0xbe
 800ea5c:	005b      	lsls	r3, r3, #1
 800ea5e:	58f3      	ldr	r3, [r6, r3]
 800ea60:	9a00      	ldr	r2, [sp, #0]
 800ea62:	9802      	ldr	r0, [sp, #8]
 800ea64:	4798      	blx	r3
 800ea66:	6933      	ldr	r3, [r6, #16]
 800ea68:	1eac      	subs	r4, r5, #2
 800ea6a:	3b01      	subs	r3, #1
 800ea6c:	7821      	ldrb	r1, [r4, #0]
 800ea6e:	6133      	str	r3, [r6, #16]
 800ea70:	23be      	movs	r3, #190	; 0xbe
 800ea72:	005b      	lsls	r3, r3, #1
 800ea74:	58f3      	ldr	r3, [r6, r3]
 800ea76:	9a00      	ldr	r2, [sp, #0]
 800ea78:	9802      	ldr	r0, [sp, #8]
 800ea7a:	4798      	blx	r3
 800ea7c:	0025      	movs	r5, r4
 800ea7e:	2710      	movs	r7, #16
 800ea80:	6833      	ldr	r3, [r6, #0]
 800ea82:	401f      	ands	r7, r3
 800ea84:	d15b      	bne.n	800eb3e <_scanf_float+0x3f2>
 800ea86:	23c0      	movs	r3, #192	; 0xc0
 800ea88:	702f      	strb	r7, [r5, #0]
 800ea8a:	6832      	ldr	r2, [r6, #0]
 800ea8c:	00db      	lsls	r3, r3, #3
 800ea8e:	4013      	ands	r3, r2
 800ea90:	2280      	movs	r2, #128	; 0x80
 800ea92:	00d2      	lsls	r2, r2, #3
 800ea94:	4293      	cmp	r3, r2
 800ea96:	d11b      	bne.n	800ead0 <_scanf_float+0x384>
 800ea98:	9a06      	ldr	r2, [sp, #24]
 800ea9a:	9b01      	ldr	r3, [sp, #4]
 800ea9c:	1a9b      	subs	r3, r3, r2
 800ea9e:	425a      	negs	r2, r3
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d122      	bne.n	800eaea <_scanf_float+0x39e>
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	9903      	ldr	r1, [sp, #12]
 800eaa8:	9802      	ldr	r0, [sp, #8]
 800eaaa:	f000 fecb 	bl	800f844 <_strtod_r>
 800eaae:	9b05      	ldr	r3, [sp, #20]
 800eab0:	0004      	movs	r4, r0
 800eab2:	6830      	ldr	r0, [r6, #0]
 800eab4:	000d      	movs	r5, r1
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	0782      	lsls	r2, r0, #30
 800eaba:	d523      	bpl.n	800eb04 <_scanf_float+0x3b8>
 800eabc:	1d1a      	adds	r2, r3, #4
 800eabe:	9905      	ldr	r1, [sp, #20]
 800eac0:	600a      	str	r2, [r1, #0]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	601c      	str	r4, [r3, #0]
 800eac6:	605d      	str	r5, [r3, #4]
 800eac8:	68f3      	ldr	r3, [r6, #12]
 800eaca:	3301      	adds	r3, #1
 800eacc:	60f3      	str	r3, [r6, #12]
 800eace:	e689      	b.n	800e7e4 <_scanf_float+0x98>
 800ead0:	9b07      	ldr	r3, [sp, #28]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d0e6      	beq.n	800eaa4 <_scanf_float+0x358>
 800ead6:	9b08      	ldr	r3, [sp, #32]
 800ead8:	003a      	movs	r2, r7
 800eada:	1c59      	adds	r1, r3, #1
 800eadc:	9802      	ldr	r0, [sp, #8]
 800eade:	230a      	movs	r3, #10
 800eae0:	f000 ff40 	bl	800f964 <_strtol_r>
 800eae4:	9b07      	ldr	r3, [sp, #28]
 800eae6:	9d08      	ldr	r5, [sp, #32]
 800eae8:	1ac2      	subs	r2, r0, r3
 800eaea:	0033      	movs	r3, r6
 800eaec:	3370      	adds	r3, #112	; 0x70
 800eaee:	33ff      	adds	r3, #255	; 0xff
 800eaf0:	429d      	cmp	r5, r3
 800eaf2:	d302      	bcc.n	800eafa <_scanf_float+0x3ae>
 800eaf4:	0035      	movs	r5, r6
 800eaf6:	356f      	adds	r5, #111	; 0x6f
 800eaf8:	35ff      	adds	r5, #255	; 0xff
 800eafa:	4912      	ldr	r1, [pc, #72]	; (800eb44 <_scanf_float+0x3f8>)
 800eafc:	0028      	movs	r0, r5
 800eafe:	f000 f841 	bl	800eb84 <siprintf>
 800eb02:	e7cf      	b.n	800eaa4 <_scanf_float+0x358>
 800eb04:	2104      	movs	r1, #4
 800eb06:	4008      	ands	r0, r1
 800eb08:	1d1a      	adds	r2, r3, #4
 800eb0a:	9001      	str	r0, [sp, #4]
 800eb0c:	2800      	cmp	r0, #0
 800eb0e:	d1d6      	bne.n	800eabe <_scanf_float+0x372>
 800eb10:	9905      	ldr	r1, [sp, #20]
 800eb12:	0020      	movs	r0, r4
 800eb14:	600a      	str	r2, [r1, #0]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	0022      	movs	r2, r4
 800eb1a:	9300      	str	r3, [sp, #0]
 800eb1c:	0029      	movs	r1, r5
 800eb1e:	002b      	movs	r3, r5
 800eb20:	f7f8 fde6 	bl	80076f0 <__aeabi_dcmpun>
 800eb24:	2800      	cmp	r0, #0
 800eb26:	d005      	beq.n	800eb34 <_scanf_float+0x3e8>
 800eb28:	9801      	ldr	r0, [sp, #4]
 800eb2a:	f000 f827 	bl	800eb7c <nanf>
 800eb2e:	9b00      	ldr	r3, [sp, #0]
 800eb30:	6018      	str	r0, [r3, #0]
 800eb32:	e7c9      	b.n	800eac8 <_scanf_float+0x37c>
 800eb34:	0020      	movs	r0, r4
 800eb36:	0029      	movs	r1, r5
 800eb38:	f7f8 feea 	bl	8007910 <__aeabi_d2f>
 800eb3c:	e7f7      	b.n	800eb2e <_scanf_float+0x3e2>
 800eb3e:	2700      	movs	r7, #0
 800eb40:	e650      	b.n	800e7e4 <_scanf_float+0x98>
 800eb42:	46c0      	nop			; (mov r8, r8)
 800eb44:	08012bdc 	.word	0x08012bdc

0800eb48 <iprintf>:
 800eb48:	b40f      	push	{r0, r1, r2, r3}
 800eb4a:	4b0b      	ldr	r3, [pc, #44]	; (800eb78 <iprintf+0x30>)
 800eb4c:	b513      	push	{r0, r1, r4, lr}
 800eb4e:	681c      	ldr	r4, [r3, #0]
 800eb50:	2c00      	cmp	r4, #0
 800eb52:	d005      	beq.n	800eb60 <iprintf+0x18>
 800eb54:	69a3      	ldr	r3, [r4, #24]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d102      	bne.n	800eb60 <iprintf+0x18>
 800eb5a:	0020      	movs	r0, r4
 800eb5c:	f001 fdba 	bl	80106d4 <__sinit>
 800eb60:	ab05      	add	r3, sp, #20
 800eb62:	9a04      	ldr	r2, [sp, #16]
 800eb64:	68a1      	ldr	r1, [r4, #8]
 800eb66:	0020      	movs	r0, r4
 800eb68:	9301      	str	r3, [sp, #4]
 800eb6a:	f002 ffe5 	bl	8011b38 <_vfiprintf_r>
 800eb6e:	bc16      	pop	{r1, r2, r4}
 800eb70:	bc08      	pop	{r3}
 800eb72:	b004      	add	sp, #16
 800eb74:	4718      	bx	r3
 800eb76:	46c0      	nop			; (mov r8, r8)
 800eb78:	2000012c 	.word	0x2000012c

0800eb7c <nanf>:
 800eb7c:	4800      	ldr	r0, [pc, #0]	; (800eb80 <nanf+0x4>)
 800eb7e:	4770      	bx	lr
 800eb80:	7fc00000 	.word	0x7fc00000

0800eb84 <siprintf>:
 800eb84:	b40e      	push	{r1, r2, r3}
 800eb86:	b500      	push	{lr}
 800eb88:	490b      	ldr	r1, [pc, #44]	; (800ebb8 <siprintf+0x34>)
 800eb8a:	b09c      	sub	sp, #112	; 0x70
 800eb8c:	ab1d      	add	r3, sp, #116	; 0x74
 800eb8e:	9002      	str	r0, [sp, #8]
 800eb90:	9006      	str	r0, [sp, #24]
 800eb92:	9107      	str	r1, [sp, #28]
 800eb94:	9104      	str	r1, [sp, #16]
 800eb96:	4809      	ldr	r0, [pc, #36]	; (800ebbc <siprintf+0x38>)
 800eb98:	4909      	ldr	r1, [pc, #36]	; (800ebc0 <siprintf+0x3c>)
 800eb9a:	cb04      	ldmia	r3!, {r2}
 800eb9c:	9105      	str	r1, [sp, #20]
 800eb9e:	6800      	ldr	r0, [r0, #0]
 800eba0:	a902      	add	r1, sp, #8
 800eba2:	9301      	str	r3, [sp, #4]
 800eba4:	f002 fea2 	bl	80118ec <_svfiprintf_r>
 800eba8:	2300      	movs	r3, #0
 800ebaa:	9a02      	ldr	r2, [sp, #8]
 800ebac:	7013      	strb	r3, [r2, #0]
 800ebae:	b01c      	add	sp, #112	; 0x70
 800ebb0:	bc08      	pop	{r3}
 800ebb2:	b003      	add	sp, #12
 800ebb4:	4718      	bx	r3
 800ebb6:	46c0      	nop			; (mov r8, r8)
 800ebb8:	7fffffff 	.word	0x7fffffff
 800ebbc:	2000012c 	.word	0x2000012c
 800ebc0:	ffff0208 	.word	0xffff0208

0800ebc4 <sulp>:
 800ebc4:	b570      	push	{r4, r5, r6, lr}
 800ebc6:	0016      	movs	r6, r2
 800ebc8:	000d      	movs	r5, r1
 800ebca:	f002 fc51 	bl	8011470 <__ulp>
 800ebce:	2e00      	cmp	r6, #0
 800ebd0:	d00d      	beq.n	800ebee <sulp+0x2a>
 800ebd2:	236b      	movs	r3, #107	; 0x6b
 800ebd4:	006a      	lsls	r2, r5, #1
 800ebd6:	0d52      	lsrs	r2, r2, #21
 800ebd8:	1a9b      	subs	r3, r3, r2
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	dd07      	ble.n	800ebee <sulp+0x2a>
 800ebde:	2400      	movs	r4, #0
 800ebe0:	4a03      	ldr	r2, [pc, #12]	; (800ebf0 <sulp+0x2c>)
 800ebe2:	051b      	lsls	r3, r3, #20
 800ebe4:	189d      	adds	r5, r3, r2
 800ebe6:	002b      	movs	r3, r5
 800ebe8:	0022      	movs	r2, r4
 800ebea:	f7f7 ffc7 	bl	8006b7c <__aeabi_dmul>
 800ebee:	bd70      	pop	{r4, r5, r6, pc}
 800ebf0:	3ff00000 	.word	0x3ff00000

0800ebf4 <_strtod_l>:
 800ebf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebf6:	b0a7      	sub	sp, #156	; 0x9c
 800ebf8:	9307      	str	r3, [sp, #28]
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	9004      	str	r0, [sp, #16]
 800ebfe:	9807      	ldr	r0, [sp, #28]
 800ec00:	9322      	str	r3, [sp, #136]	; 0x88
 800ec02:	9106      	str	r1, [sp, #24]
 800ec04:	921d      	str	r2, [sp, #116]	; 0x74
 800ec06:	f002 f92c 	bl	8010e62 <__localeconv_l>
 800ec0a:	0005      	movs	r5, r0
 800ec0c:	6800      	ldr	r0, [r0, #0]
 800ec0e:	f7f6 fa7f 	bl	8005110 <strlen>
 800ec12:	2600      	movs	r6, #0
 800ec14:	2700      	movs	r7, #0
 800ec16:	9b06      	ldr	r3, [sp, #24]
 800ec18:	9005      	str	r0, [sp, #20]
 800ec1a:	9321      	str	r3, [sp, #132]	; 0x84
 800ec1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec1e:	781a      	ldrb	r2, [r3, #0]
 800ec20:	2a0d      	cmp	r2, #13
 800ec22:	d839      	bhi.n	800ec98 <_strtod_l+0xa4>
 800ec24:	2a09      	cmp	r2, #9
 800ec26:	d23d      	bcs.n	800eca4 <_strtod_l+0xb0>
 800ec28:	2a00      	cmp	r2, #0
 800ec2a:	d044      	beq.n	800ecb6 <_strtod_l+0xc2>
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	9313      	str	r3, [sp, #76]	; 0x4c
 800ec30:	2200      	movs	r2, #0
 800ec32:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800ec34:	920c      	str	r2, [sp, #48]	; 0x30
 800ec36:	7823      	ldrb	r3, [r4, #0]
 800ec38:	2b30      	cmp	r3, #48	; 0x30
 800ec3a:	d000      	beq.n	800ec3e <_strtod_l+0x4a>
 800ec3c:	e07e      	b.n	800ed3c <_strtod_l+0x148>
 800ec3e:	7863      	ldrb	r3, [r4, #1]
 800ec40:	2b58      	cmp	r3, #88	; 0x58
 800ec42:	d002      	beq.n	800ec4a <_strtod_l+0x56>
 800ec44:	2b78      	cmp	r3, #120	; 0x78
 800ec46:	d000      	beq.n	800ec4a <_strtod_l+0x56>
 800ec48:	e06e      	b.n	800ed28 <_strtod_l+0x134>
 800ec4a:	9b07      	ldr	r3, [sp, #28]
 800ec4c:	4a96      	ldr	r2, [pc, #600]	; (800eea8 <_strtod_l+0x2b4>)
 800ec4e:	9302      	str	r3, [sp, #8]
 800ec50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ec52:	a921      	add	r1, sp, #132	; 0x84
 800ec54:	9301      	str	r3, [sp, #4]
 800ec56:	ab22      	add	r3, sp, #136	; 0x88
 800ec58:	9300      	str	r3, [sp, #0]
 800ec5a:	9804      	ldr	r0, [sp, #16]
 800ec5c:	ab23      	add	r3, sp, #140	; 0x8c
 800ec5e:	f001 fe15 	bl	801088c <__gethex>
 800ec62:	2507      	movs	r5, #7
 800ec64:	9005      	str	r0, [sp, #20]
 800ec66:	4005      	ands	r5, r0
 800ec68:	d005      	beq.n	800ec76 <_strtod_l+0x82>
 800ec6a:	2d06      	cmp	r5, #6
 800ec6c:	d12f      	bne.n	800ecce <_strtod_l+0xda>
 800ec6e:	2300      	movs	r3, #0
 800ec70:	3401      	adds	r4, #1
 800ec72:	9421      	str	r4, [sp, #132]	; 0x84
 800ec74:	9313      	str	r3, [sp, #76]	; 0x4c
 800ec76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d002      	beq.n	800ec82 <_strtod_l+0x8e>
 800ec7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ec7e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ec80:	601a      	str	r2, [r3, #0]
 800ec82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d01d      	beq.n	800ecc4 <_strtod_l+0xd0>
 800ec88:	2380      	movs	r3, #128	; 0x80
 800ec8a:	0032      	movs	r2, r6
 800ec8c:	061b      	lsls	r3, r3, #24
 800ec8e:	18fb      	adds	r3, r7, r3
 800ec90:	0010      	movs	r0, r2
 800ec92:	0019      	movs	r1, r3
 800ec94:	b027      	add	sp, #156	; 0x9c
 800ec96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec98:	2a2b      	cmp	r2, #43	; 0x2b
 800ec9a:	d016      	beq.n	800ecca <_strtod_l+0xd6>
 800ec9c:	2a2d      	cmp	r2, #45	; 0x2d
 800ec9e:	d003      	beq.n	800eca8 <_strtod_l+0xb4>
 800eca0:	2a20      	cmp	r2, #32
 800eca2:	d1c3      	bne.n	800ec2c <_strtod_l+0x38>
 800eca4:	3301      	adds	r3, #1
 800eca6:	e7b8      	b.n	800ec1a <_strtod_l+0x26>
 800eca8:	2201      	movs	r2, #1
 800ecaa:	9213      	str	r2, [sp, #76]	; 0x4c
 800ecac:	1c5a      	adds	r2, r3, #1
 800ecae:	9221      	str	r2, [sp, #132]	; 0x84
 800ecb0:	785b      	ldrb	r3, [r3, #1]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d1bc      	bne.n	800ec30 <_strtod_l+0x3c>
 800ecb6:	9b06      	ldr	r3, [sp, #24]
 800ecb8:	9321      	str	r3, [sp, #132]	; 0x84
 800ecba:	2300      	movs	r3, #0
 800ecbc:	9313      	str	r3, [sp, #76]	; 0x4c
 800ecbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d1db      	bne.n	800ec7c <_strtod_l+0x88>
 800ecc4:	0032      	movs	r2, r6
 800ecc6:	003b      	movs	r3, r7
 800ecc8:	e7e2      	b.n	800ec90 <_strtod_l+0x9c>
 800ecca:	2200      	movs	r2, #0
 800eccc:	e7ed      	b.n	800ecaa <_strtod_l+0xb6>
 800ecce:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ecd0:	2a00      	cmp	r2, #0
 800ecd2:	d007      	beq.n	800ece4 <_strtod_l+0xf0>
 800ecd4:	2135      	movs	r1, #53	; 0x35
 800ecd6:	a824      	add	r0, sp, #144	; 0x90
 800ecd8:	f002 fcb7 	bl	801164a <__copybits>
 800ecdc:	9922      	ldr	r1, [sp, #136]	; 0x88
 800ecde:	9804      	ldr	r0, [sp, #16]
 800ece0:	f002 f92d 	bl	8010f3e <_Bfree>
 800ece4:	1e68      	subs	r0, r5, #1
 800ece6:	2804      	cmp	r0, #4
 800ece8:	d806      	bhi.n	800ecf8 <_strtod_l+0x104>
 800ecea:	f7f6 fa19 	bl	8005120 <__gnu_thumb1_case_uqi>
 800ecee:	030c      	.short	0x030c
 800ecf0:	1917      	.short	0x1917
 800ecf2:	0c          	.byte	0x0c
 800ecf3:	00          	.byte	0x00
 800ecf4:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800ecf6:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800ecf8:	9b05      	ldr	r3, [sp, #20]
 800ecfa:	071b      	lsls	r3, r3, #28
 800ecfc:	d5bb      	bpl.n	800ec76 <_strtod_l+0x82>
 800ecfe:	2380      	movs	r3, #128	; 0x80
 800ed00:	061b      	lsls	r3, r3, #24
 800ed02:	431f      	orrs	r7, r3
 800ed04:	e7b7      	b.n	800ec76 <_strtod_l+0x82>
 800ed06:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800ed08:	4a68      	ldr	r2, [pc, #416]	; (800eeac <_strtod_l+0x2b8>)
 800ed0a:	4969      	ldr	r1, [pc, #420]	; (800eeb0 <_strtod_l+0x2bc>)
 800ed0c:	401a      	ands	r2, r3
 800ed0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ed10:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800ed12:	185b      	adds	r3, r3, r1
 800ed14:	051b      	lsls	r3, r3, #20
 800ed16:	431a      	orrs	r2, r3
 800ed18:	0017      	movs	r7, r2
 800ed1a:	e7ed      	b.n	800ecf8 <_strtod_l+0x104>
 800ed1c:	4f65      	ldr	r7, [pc, #404]	; (800eeb4 <_strtod_l+0x2c0>)
 800ed1e:	e7eb      	b.n	800ecf8 <_strtod_l+0x104>
 800ed20:	2601      	movs	r6, #1
 800ed22:	4f65      	ldr	r7, [pc, #404]	; (800eeb8 <_strtod_l+0x2c4>)
 800ed24:	4276      	negs	r6, r6
 800ed26:	e7e7      	b.n	800ecf8 <_strtod_l+0x104>
 800ed28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed2a:	1c5a      	adds	r2, r3, #1
 800ed2c:	9221      	str	r2, [sp, #132]	; 0x84
 800ed2e:	785b      	ldrb	r3, [r3, #1]
 800ed30:	2b30      	cmp	r3, #48	; 0x30
 800ed32:	d0f9      	beq.n	800ed28 <_strtod_l+0x134>
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d09e      	beq.n	800ec76 <_strtod_l+0x82>
 800ed38:	2301      	movs	r3, #1
 800ed3a:	930c      	str	r3, [sp, #48]	; 0x30
 800ed3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed3e:	220a      	movs	r2, #10
 800ed40:	9312      	str	r3, [sp, #72]	; 0x48
 800ed42:	2300      	movs	r3, #0
 800ed44:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed46:	9308      	str	r3, [sp, #32]
 800ed48:	930a      	str	r3, [sp, #40]	; 0x28
 800ed4a:	9821      	ldr	r0, [sp, #132]	; 0x84
 800ed4c:	7804      	ldrb	r4, [r0, #0]
 800ed4e:	0023      	movs	r3, r4
 800ed50:	3b30      	subs	r3, #48	; 0x30
 800ed52:	b2d9      	uxtb	r1, r3
 800ed54:	2909      	cmp	r1, #9
 800ed56:	d934      	bls.n	800edc2 <_strtod_l+0x1ce>
 800ed58:	9a05      	ldr	r2, [sp, #20]
 800ed5a:	6829      	ldr	r1, [r5, #0]
 800ed5c:	f003 f860 	bl	8011e20 <strncmp>
 800ed60:	2800      	cmp	r0, #0
 800ed62:	d040      	beq.n	800ede6 <_strtod_l+0x1f2>
 800ed64:	2000      	movs	r0, #0
 800ed66:	0023      	movs	r3, r4
 800ed68:	4684      	mov	ip, r0
 800ed6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed6c:	9007      	str	r0, [sp, #28]
 800ed6e:	9205      	str	r2, [sp, #20]
 800ed70:	2220      	movs	r2, #32
 800ed72:	0019      	movs	r1, r3
 800ed74:	4391      	bics	r1, r2
 800ed76:	000a      	movs	r2, r1
 800ed78:	2100      	movs	r1, #0
 800ed7a:	2a45      	cmp	r2, #69	; 0x45
 800ed7c:	d000      	beq.n	800ed80 <_strtod_l+0x18c>
 800ed7e:	e0bf      	b.n	800ef00 <_strtod_l+0x30c>
 800ed80:	9b05      	ldr	r3, [sp, #20]
 800ed82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ed84:	4303      	orrs	r3, r0
 800ed86:	4313      	orrs	r3, r2
 800ed88:	428b      	cmp	r3, r1
 800ed8a:	d094      	beq.n	800ecb6 <_strtod_l+0xc2>
 800ed8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed8e:	9306      	str	r3, [sp, #24]
 800ed90:	3301      	adds	r3, #1
 800ed92:	9321      	str	r3, [sp, #132]	; 0x84
 800ed94:	9b06      	ldr	r3, [sp, #24]
 800ed96:	785b      	ldrb	r3, [r3, #1]
 800ed98:	2b2b      	cmp	r3, #43	; 0x2b
 800ed9a:	d100      	bne.n	800ed9e <_strtod_l+0x1aa>
 800ed9c:	e082      	b.n	800eea4 <_strtod_l+0x2b0>
 800ed9e:	000c      	movs	r4, r1
 800eda0:	2b2d      	cmp	r3, #45	; 0x2d
 800eda2:	d105      	bne.n	800edb0 <_strtod_l+0x1bc>
 800eda4:	2401      	movs	r4, #1
 800eda6:	9b06      	ldr	r3, [sp, #24]
 800eda8:	3302      	adds	r3, #2
 800edaa:	9321      	str	r3, [sp, #132]	; 0x84
 800edac:	9b06      	ldr	r3, [sp, #24]
 800edae:	789b      	ldrb	r3, [r3, #2]
 800edb0:	001a      	movs	r2, r3
 800edb2:	3a30      	subs	r2, #48	; 0x30
 800edb4:	2a09      	cmp	r2, #9
 800edb6:	d800      	bhi.n	800edba <_strtod_l+0x1c6>
 800edb8:	e084      	b.n	800eec4 <_strtod_l+0x2d0>
 800edba:	9a06      	ldr	r2, [sp, #24]
 800edbc:	2100      	movs	r1, #0
 800edbe:	9221      	str	r2, [sp, #132]	; 0x84
 800edc0:	e09e      	b.n	800ef00 <_strtod_l+0x30c>
 800edc2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800edc4:	2908      	cmp	r1, #8
 800edc6:	dc09      	bgt.n	800eddc <_strtod_l+0x1e8>
 800edc8:	9908      	ldr	r1, [sp, #32]
 800edca:	4351      	muls	r1, r2
 800edcc:	18cb      	adds	r3, r1, r3
 800edce:	9308      	str	r3, [sp, #32]
 800edd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edd2:	3001      	adds	r0, #1
 800edd4:	3301      	adds	r3, #1
 800edd6:	930a      	str	r3, [sp, #40]	; 0x28
 800edd8:	9021      	str	r0, [sp, #132]	; 0x84
 800edda:	e7b6      	b.n	800ed4a <_strtod_l+0x156>
 800eddc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800edde:	4351      	muls	r1, r2
 800ede0:	18cb      	adds	r3, r1, r3
 800ede2:	930b      	str	r3, [sp, #44]	; 0x2c
 800ede4:	e7f4      	b.n	800edd0 <_strtod_l+0x1dc>
 800ede6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ede8:	9b05      	ldr	r3, [sp, #20]
 800edea:	4694      	mov	ip, r2
 800edec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800edee:	4463      	add	r3, ip
 800edf0:	9321      	str	r3, [sp, #132]	; 0x84
 800edf2:	781b      	ldrb	r3, [r3, #0]
 800edf4:	2a00      	cmp	r2, #0
 800edf6:	d036      	beq.n	800ee66 <_strtod_l+0x272>
 800edf8:	4684      	mov	ip, r0
 800edfa:	9205      	str	r2, [sp, #20]
 800edfc:	001a      	movs	r2, r3
 800edfe:	3a30      	subs	r2, #48	; 0x30
 800ee00:	2a09      	cmp	r2, #9
 800ee02:	d912      	bls.n	800ee2a <_strtod_l+0x236>
 800ee04:	2201      	movs	r2, #1
 800ee06:	9207      	str	r2, [sp, #28]
 800ee08:	e7b2      	b.n	800ed70 <_strtod_l+0x17c>
 800ee0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee0c:	3001      	adds	r0, #1
 800ee0e:	1c5a      	adds	r2, r3, #1
 800ee10:	9221      	str	r2, [sp, #132]	; 0x84
 800ee12:	785b      	ldrb	r3, [r3, #1]
 800ee14:	2b30      	cmp	r3, #48	; 0x30
 800ee16:	d0f8      	beq.n	800ee0a <_strtod_l+0x216>
 800ee18:	001a      	movs	r2, r3
 800ee1a:	3a31      	subs	r2, #49	; 0x31
 800ee1c:	2a08      	cmp	r2, #8
 800ee1e:	d83c      	bhi.n	800ee9a <_strtod_l+0x2a6>
 800ee20:	4684      	mov	ip, r0
 800ee22:	2000      	movs	r0, #0
 800ee24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ee26:	9005      	str	r0, [sp, #20]
 800ee28:	9212      	str	r2, [sp, #72]	; 0x48
 800ee2a:	3b30      	subs	r3, #48	; 0x30
 800ee2c:	1c42      	adds	r2, r0, #1
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d013      	beq.n	800ee5a <_strtod_l+0x266>
 800ee32:	210a      	movs	r1, #10
 800ee34:	4494      	add	ip, r2
 800ee36:	9a05      	ldr	r2, [sp, #20]
 800ee38:	1885      	adds	r5, r0, r2
 800ee3a:	42aa      	cmp	r2, r5
 800ee3c:	d115      	bne.n	800ee6a <_strtod_l+0x276>
 800ee3e:	9905      	ldr	r1, [sp, #20]
 800ee40:	9a05      	ldr	r2, [sp, #20]
 800ee42:	3101      	adds	r1, #1
 800ee44:	1809      	adds	r1, r1, r0
 800ee46:	1812      	adds	r2, r2, r0
 800ee48:	9105      	str	r1, [sp, #20]
 800ee4a:	2a08      	cmp	r2, #8
 800ee4c:	dc1b      	bgt.n	800ee86 <_strtod_l+0x292>
 800ee4e:	220a      	movs	r2, #10
 800ee50:	9908      	ldr	r1, [sp, #32]
 800ee52:	434a      	muls	r2, r1
 800ee54:	189b      	adds	r3, r3, r2
 800ee56:	2200      	movs	r2, #0
 800ee58:	9308      	str	r3, [sp, #32]
 800ee5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee5c:	0010      	movs	r0, r2
 800ee5e:	1c59      	adds	r1, r3, #1
 800ee60:	9121      	str	r1, [sp, #132]	; 0x84
 800ee62:	785b      	ldrb	r3, [r3, #1]
 800ee64:	e7ca      	b.n	800edfc <_strtod_l+0x208>
 800ee66:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ee68:	e7d4      	b.n	800ee14 <_strtod_l+0x220>
 800ee6a:	1c54      	adds	r4, r2, #1
 800ee6c:	2a08      	cmp	r2, #8
 800ee6e:	dc04      	bgt.n	800ee7a <_strtod_l+0x286>
 800ee70:	9a08      	ldr	r2, [sp, #32]
 800ee72:	434a      	muls	r2, r1
 800ee74:	9208      	str	r2, [sp, #32]
 800ee76:	0022      	movs	r2, r4
 800ee78:	e7df      	b.n	800ee3a <_strtod_l+0x246>
 800ee7a:	2c10      	cmp	r4, #16
 800ee7c:	dcfb      	bgt.n	800ee76 <_strtod_l+0x282>
 800ee7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ee80:	434a      	muls	r2, r1
 800ee82:	920b      	str	r2, [sp, #44]	; 0x2c
 800ee84:	e7f7      	b.n	800ee76 <_strtod_l+0x282>
 800ee86:	9905      	ldr	r1, [sp, #20]
 800ee88:	2200      	movs	r2, #0
 800ee8a:	2910      	cmp	r1, #16
 800ee8c:	dce5      	bgt.n	800ee5a <_strtod_l+0x266>
 800ee8e:	210a      	movs	r1, #10
 800ee90:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ee92:	4341      	muls	r1, r0
 800ee94:	185b      	adds	r3, r3, r1
 800ee96:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee98:	e7df      	b.n	800ee5a <_strtod_l+0x266>
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	4694      	mov	ip, r2
 800ee9e:	9205      	str	r2, [sp, #20]
 800eea0:	3201      	adds	r2, #1
 800eea2:	e7b0      	b.n	800ee06 <_strtod_l+0x212>
 800eea4:	000c      	movs	r4, r1
 800eea6:	e77e      	b.n	800eda6 <_strtod_l+0x1b2>
 800eea8:	08012be4 	.word	0x08012be4
 800eeac:	ffefffff 	.word	0xffefffff
 800eeb0:	00000433 	.word	0x00000433
 800eeb4:	7ff00000 	.word	0x7ff00000
 800eeb8:	7fffffff 	.word	0x7fffffff
 800eebc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eebe:	1c5a      	adds	r2, r3, #1
 800eec0:	9221      	str	r2, [sp, #132]	; 0x84
 800eec2:	785b      	ldrb	r3, [r3, #1]
 800eec4:	2b30      	cmp	r3, #48	; 0x30
 800eec6:	d0f9      	beq.n	800eebc <_strtod_l+0x2c8>
 800eec8:	001a      	movs	r2, r3
 800eeca:	3a31      	subs	r2, #49	; 0x31
 800eecc:	2100      	movs	r1, #0
 800eece:	2a08      	cmp	r2, #8
 800eed0:	d816      	bhi.n	800ef00 <_strtod_l+0x30c>
 800eed2:	3b30      	subs	r3, #48	; 0x30
 800eed4:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800eed6:	930e      	str	r3, [sp, #56]	; 0x38
 800eed8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eeda:	1c59      	adds	r1, r3, #1
 800eedc:	9121      	str	r1, [sp, #132]	; 0x84
 800eede:	785b      	ldrb	r3, [r3, #1]
 800eee0:	001a      	movs	r2, r3
 800eee2:	3a30      	subs	r2, #48	; 0x30
 800eee4:	2a09      	cmp	r2, #9
 800eee6:	d932      	bls.n	800ef4e <_strtod_l+0x35a>
 800eee8:	1b4a      	subs	r2, r1, r5
 800eeea:	4dad      	ldr	r5, [pc, #692]	; (800f1a0 <_strtod_l+0x5ac>)
 800eeec:	0029      	movs	r1, r5
 800eeee:	2a08      	cmp	r2, #8
 800eef0:	dc03      	bgt.n	800eefa <_strtod_l+0x306>
 800eef2:	990e      	ldr	r1, [sp, #56]	; 0x38
 800eef4:	42a9      	cmp	r1, r5
 800eef6:	dd00      	ble.n	800eefa <_strtod_l+0x306>
 800eef8:	0029      	movs	r1, r5
 800eefa:	2c00      	cmp	r4, #0
 800eefc:	d000      	beq.n	800ef00 <_strtod_l+0x30c>
 800eefe:	4249      	negs	r1, r1
 800ef00:	9a05      	ldr	r2, [sp, #20]
 800ef02:	2a00      	cmp	r2, #0
 800ef04:	d149      	bne.n	800ef9a <_strtod_l+0x3a6>
 800ef06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ef08:	4310      	orrs	r0, r2
 800ef0a:	d000      	beq.n	800ef0e <_strtod_l+0x31a>
 800ef0c:	e6b3      	b.n	800ec76 <_strtod_l+0x82>
 800ef0e:	9a07      	ldr	r2, [sp, #28]
 800ef10:	2a00      	cmp	r2, #0
 800ef12:	d000      	beq.n	800ef16 <_strtod_l+0x322>
 800ef14:	e6cf      	b.n	800ecb6 <_strtod_l+0xc2>
 800ef16:	2b4e      	cmp	r3, #78	; 0x4e
 800ef18:	d025      	beq.n	800ef66 <_strtod_l+0x372>
 800ef1a:	dc1f      	bgt.n	800ef5c <_strtod_l+0x368>
 800ef1c:	2b49      	cmp	r3, #73	; 0x49
 800ef1e:	d000      	beq.n	800ef22 <_strtod_l+0x32e>
 800ef20:	e6c9      	b.n	800ecb6 <_strtod_l+0xc2>
 800ef22:	49a0      	ldr	r1, [pc, #640]	; (800f1a4 <_strtod_l+0x5b0>)
 800ef24:	a821      	add	r0, sp, #132	; 0x84
 800ef26:	f001 feee 	bl	8010d06 <__match>
 800ef2a:	2800      	cmp	r0, #0
 800ef2c:	d100      	bne.n	800ef30 <_strtod_l+0x33c>
 800ef2e:	e6c2      	b.n	800ecb6 <_strtod_l+0xc2>
 800ef30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef32:	499d      	ldr	r1, [pc, #628]	; (800f1a8 <_strtod_l+0x5b4>)
 800ef34:	3b01      	subs	r3, #1
 800ef36:	a821      	add	r0, sp, #132	; 0x84
 800ef38:	9321      	str	r3, [sp, #132]	; 0x84
 800ef3a:	f001 fee4 	bl	8010d06 <__match>
 800ef3e:	2800      	cmp	r0, #0
 800ef40:	d102      	bne.n	800ef48 <_strtod_l+0x354>
 800ef42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef44:	3301      	adds	r3, #1
 800ef46:	9321      	str	r3, [sp, #132]	; 0x84
 800ef48:	4f98      	ldr	r7, [pc, #608]	; (800f1ac <_strtod_l+0x5b8>)
 800ef4a:	2600      	movs	r6, #0
 800ef4c:	e693      	b.n	800ec76 <_strtod_l+0x82>
 800ef4e:	220a      	movs	r2, #10
 800ef50:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ef52:	434a      	muls	r2, r1
 800ef54:	18d2      	adds	r2, r2, r3
 800ef56:	3a30      	subs	r2, #48	; 0x30
 800ef58:	920e      	str	r2, [sp, #56]	; 0x38
 800ef5a:	e7bd      	b.n	800eed8 <_strtod_l+0x2e4>
 800ef5c:	2b69      	cmp	r3, #105	; 0x69
 800ef5e:	d0e0      	beq.n	800ef22 <_strtod_l+0x32e>
 800ef60:	2b6e      	cmp	r3, #110	; 0x6e
 800ef62:	d000      	beq.n	800ef66 <_strtod_l+0x372>
 800ef64:	e6a7      	b.n	800ecb6 <_strtod_l+0xc2>
 800ef66:	4992      	ldr	r1, [pc, #584]	; (800f1b0 <_strtod_l+0x5bc>)
 800ef68:	a821      	add	r0, sp, #132	; 0x84
 800ef6a:	f001 fecc 	bl	8010d06 <__match>
 800ef6e:	2800      	cmp	r0, #0
 800ef70:	d100      	bne.n	800ef74 <_strtod_l+0x380>
 800ef72:	e6a0      	b.n	800ecb6 <_strtod_l+0xc2>
 800ef74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef76:	781b      	ldrb	r3, [r3, #0]
 800ef78:	2b28      	cmp	r3, #40	; 0x28
 800ef7a:	d10c      	bne.n	800ef96 <_strtod_l+0x3a2>
 800ef7c:	aa24      	add	r2, sp, #144	; 0x90
 800ef7e:	498d      	ldr	r1, [pc, #564]	; (800f1b4 <_strtod_l+0x5c0>)
 800ef80:	a821      	add	r0, sp, #132	; 0x84
 800ef82:	f001 fed4 	bl	8010d2e <__hexnan>
 800ef86:	2805      	cmp	r0, #5
 800ef88:	d105      	bne.n	800ef96 <_strtod_l+0x3a2>
 800ef8a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800ef8c:	4a87      	ldr	r2, [pc, #540]	; (800f1ac <_strtod_l+0x5b8>)
 800ef8e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800ef90:	431a      	orrs	r2, r3
 800ef92:	0017      	movs	r7, r2
 800ef94:	e66f      	b.n	800ec76 <_strtod_l+0x82>
 800ef96:	4f88      	ldr	r7, [pc, #544]	; (800f1b8 <_strtod_l+0x5c4>)
 800ef98:	e7d7      	b.n	800ef4a <_strtod_l+0x356>
 800ef9a:	4663      	mov	r3, ip
 800ef9c:	1acb      	subs	r3, r1, r3
 800ef9e:	9307      	str	r3, [sp, #28]
 800efa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d101      	bne.n	800efaa <_strtod_l+0x3b6>
 800efa6:	9b05      	ldr	r3, [sp, #20]
 800efa8:	930a      	str	r3, [sp, #40]	; 0x28
 800efaa:	9c05      	ldr	r4, [sp, #20]
 800efac:	2c10      	cmp	r4, #16
 800efae:	dd00      	ble.n	800efb2 <_strtod_l+0x3be>
 800efb0:	2410      	movs	r4, #16
 800efb2:	9808      	ldr	r0, [sp, #32]
 800efb4:	f7f8 fc28 	bl	8007808 <__aeabi_ui2d>
 800efb8:	9b05      	ldr	r3, [sp, #20]
 800efba:	0006      	movs	r6, r0
 800efbc:	000f      	movs	r7, r1
 800efbe:	2b09      	cmp	r3, #9
 800efc0:	dc15      	bgt.n	800efee <_strtod_l+0x3fa>
 800efc2:	9b07      	ldr	r3, [sp, #28]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d100      	bne.n	800efca <_strtod_l+0x3d6>
 800efc8:	e655      	b.n	800ec76 <_strtod_l+0x82>
 800efca:	9b07      	ldr	r3, [sp, #28]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	dc00      	bgt.n	800efd2 <_strtod_l+0x3de>
 800efd0:	e07d      	b.n	800f0ce <_strtod_l+0x4da>
 800efd2:	2b16      	cmp	r3, #22
 800efd4:	dc62      	bgt.n	800f09c <_strtod_l+0x4a8>
 800efd6:	00dc      	lsls	r4, r3, #3
 800efd8:	4b78      	ldr	r3, [pc, #480]	; (800f1bc <_strtod_l+0x5c8>)
 800efda:	0032      	movs	r2, r6
 800efdc:	1919      	adds	r1, r3, r4
 800efde:	003b      	movs	r3, r7
 800efe0:	6808      	ldr	r0, [r1, #0]
 800efe2:	6849      	ldr	r1, [r1, #4]
 800efe4:	f7f7 fdca 	bl	8006b7c <__aeabi_dmul>
 800efe8:	0006      	movs	r6, r0
 800efea:	000f      	movs	r7, r1
 800efec:	e643      	b.n	800ec76 <_strtod_l+0x82>
 800efee:	0022      	movs	r2, r4
 800eff0:	4b72      	ldr	r3, [pc, #456]	; (800f1bc <_strtod_l+0x5c8>)
 800eff2:	3a09      	subs	r2, #9
 800eff4:	00d2      	lsls	r2, r2, #3
 800eff6:	189b      	adds	r3, r3, r2
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	685b      	ldr	r3, [r3, #4]
 800effc:	f7f7 fdbe 	bl	8006b7c <__aeabi_dmul>
 800f000:	0006      	movs	r6, r0
 800f002:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f004:	000f      	movs	r7, r1
 800f006:	f7f8 fbff 	bl	8007808 <__aeabi_ui2d>
 800f00a:	000b      	movs	r3, r1
 800f00c:	0002      	movs	r2, r0
 800f00e:	0039      	movs	r1, r7
 800f010:	0030      	movs	r0, r6
 800f012:	f7f6 fe8d 	bl	8005d30 <__aeabi_dadd>
 800f016:	9b05      	ldr	r3, [sp, #20]
 800f018:	0006      	movs	r6, r0
 800f01a:	000f      	movs	r7, r1
 800f01c:	2b0f      	cmp	r3, #15
 800f01e:	ddd0      	ble.n	800efc2 <_strtod_l+0x3ce>
 800f020:	9b05      	ldr	r3, [sp, #20]
 800f022:	1b1c      	subs	r4, r3, r4
 800f024:	9b07      	ldr	r3, [sp, #28]
 800f026:	18e4      	adds	r4, r4, r3
 800f028:	2c00      	cmp	r4, #0
 800f02a:	dc00      	bgt.n	800f02e <_strtod_l+0x43a>
 800f02c:	e094      	b.n	800f158 <_strtod_l+0x564>
 800f02e:	230f      	movs	r3, #15
 800f030:	4023      	ands	r3, r4
 800f032:	d00a      	beq.n	800f04a <_strtod_l+0x456>
 800f034:	4961      	ldr	r1, [pc, #388]	; (800f1bc <_strtod_l+0x5c8>)
 800f036:	00db      	lsls	r3, r3, #3
 800f038:	18c9      	adds	r1, r1, r3
 800f03a:	0032      	movs	r2, r6
 800f03c:	6808      	ldr	r0, [r1, #0]
 800f03e:	6849      	ldr	r1, [r1, #4]
 800f040:	003b      	movs	r3, r7
 800f042:	f7f7 fd9b 	bl	8006b7c <__aeabi_dmul>
 800f046:	0006      	movs	r6, r0
 800f048:	000f      	movs	r7, r1
 800f04a:	230f      	movs	r3, #15
 800f04c:	439c      	bics	r4, r3
 800f04e:	d06e      	beq.n	800f12e <_strtod_l+0x53a>
 800f050:	3326      	adds	r3, #38	; 0x26
 800f052:	33ff      	adds	r3, #255	; 0xff
 800f054:	429c      	cmp	r4, r3
 800f056:	dd48      	ble.n	800f0ea <_strtod_l+0x4f6>
 800f058:	2400      	movs	r4, #0
 800f05a:	9405      	str	r4, [sp, #20]
 800f05c:	940b      	str	r4, [sp, #44]	; 0x2c
 800f05e:	940a      	str	r4, [sp, #40]	; 0x28
 800f060:	2322      	movs	r3, #34	; 0x22
 800f062:	2600      	movs	r6, #0
 800f064:	9a04      	ldr	r2, [sp, #16]
 800f066:	4f51      	ldr	r7, [pc, #324]	; (800f1ac <_strtod_l+0x5b8>)
 800f068:	6013      	str	r3, [r2, #0]
 800f06a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f06c:	42b3      	cmp	r3, r6
 800f06e:	d100      	bne.n	800f072 <_strtod_l+0x47e>
 800f070:	e601      	b.n	800ec76 <_strtod_l+0x82>
 800f072:	9922      	ldr	r1, [sp, #136]	; 0x88
 800f074:	9804      	ldr	r0, [sp, #16]
 800f076:	f001 ff62 	bl	8010f3e <_Bfree>
 800f07a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f07c:	9804      	ldr	r0, [sp, #16]
 800f07e:	f001 ff5e 	bl	8010f3e <_Bfree>
 800f082:	9905      	ldr	r1, [sp, #20]
 800f084:	9804      	ldr	r0, [sp, #16]
 800f086:	f001 ff5a 	bl	8010f3e <_Bfree>
 800f08a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f08c:	9804      	ldr	r0, [sp, #16]
 800f08e:	f001 ff56 	bl	8010f3e <_Bfree>
 800f092:	0021      	movs	r1, r4
 800f094:	9804      	ldr	r0, [sp, #16]
 800f096:	f001 ff52 	bl	8010f3e <_Bfree>
 800f09a:	e5ec      	b.n	800ec76 <_strtod_l+0x82>
 800f09c:	2325      	movs	r3, #37	; 0x25
 800f09e:	9a05      	ldr	r2, [sp, #20]
 800f0a0:	1a9b      	subs	r3, r3, r2
 800f0a2:	9a07      	ldr	r2, [sp, #28]
 800f0a4:	4293      	cmp	r3, r2
 800f0a6:	dbbb      	blt.n	800f020 <_strtod_l+0x42c>
 800f0a8:	230f      	movs	r3, #15
 800f0aa:	9a05      	ldr	r2, [sp, #20]
 800f0ac:	4c43      	ldr	r4, [pc, #268]	; (800f1bc <_strtod_l+0x5c8>)
 800f0ae:	1a9d      	subs	r5, r3, r2
 800f0b0:	00e9      	lsls	r1, r5, #3
 800f0b2:	1861      	adds	r1, r4, r1
 800f0b4:	0032      	movs	r2, r6
 800f0b6:	6808      	ldr	r0, [r1, #0]
 800f0b8:	6849      	ldr	r1, [r1, #4]
 800f0ba:	003b      	movs	r3, r7
 800f0bc:	f7f7 fd5e 	bl	8006b7c <__aeabi_dmul>
 800f0c0:	9b07      	ldr	r3, [sp, #28]
 800f0c2:	1b5e      	subs	r6, r3, r5
 800f0c4:	00f6      	lsls	r6, r6, #3
 800f0c6:	19a6      	adds	r6, r4, r6
 800f0c8:	6832      	ldr	r2, [r6, #0]
 800f0ca:	6873      	ldr	r3, [r6, #4]
 800f0cc:	e78a      	b.n	800efe4 <_strtod_l+0x3f0>
 800f0ce:	9b07      	ldr	r3, [sp, #28]
 800f0d0:	3316      	adds	r3, #22
 800f0d2:	dba5      	blt.n	800f020 <_strtod_l+0x42c>
 800f0d4:	9b07      	ldr	r3, [sp, #28]
 800f0d6:	0030      	movs	r0, r6
 800f0d8:	00da      	lsls	r2, r3, #3
 800f0da:	4b38      	ldr	r3, [pc, #224]	; (800f1bc <_strtod_l+0x5c8>)
 800f0dc:	0039      	movs	r1, r7
 800f0de:	1a9b      	subs	r3, r3, r2
 800f0e0:	681a      	ldr	r2, [r3, #0]
 800f0e2:	685b      	ldr	r3, [r3, #4]
 800f0e4:	f7f7 f940 	bl	8006368 <__aeabi_ddiv>
 800f0e8:	e77e      	b.n	800efe8 <_strtod_l+0x3f4>
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	0030      	movs	r0, r6
 800f0ee:	0039      	movs	r1, r7
 800f0f0:	001d      	movs	r5, r3
 800f0f2:	1124      	asrs	r4, r4, #4
 800f0f4:	2c01      	cmp	r4, #1
 800f0f6:	dc1d      	bgt.n	800f134 <_strtod_l+0x540>
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d001      	beq.n	800f100 <_strtod_l+0x50c>
 800f0fc:	0006      	movs	r6, r0
 800f0fe:	000f      	movs	r7, r1
 800f100:	4b2f      	ldr	r3, [pc, #188]	; (800f1c0 <_strtod_l+0x5cc>)
 800f102:	00ed      	lsls	r5, r5, #3
 800f104:	18ff      	adds	r7, r7, r3
 800f106:	4b2f      	ldr	r3, [pc, #188]	; (800f1c4 <_strtod_l+0x5d0>)
 800f108:	0032      	movs	r2, r6
 800f10a:	195d      	adds	r5, r3, r5
 800f10c:	6828      	ldr	r0, [r5, #0]
 800f10e:	6869      	ldr	r1, [r5, #4]
 800f110:	003b      	movs	r3, r7
 800f112:	f7f7 fd33 	bl	8006b7c <__aeabi_dmul>
 800f116:	4b25      	ldr	r3, [pc, #148]	; (800f1ac <_strtod_l+0x5b8>)
 800f118:	4a2b      	ldr	r2, [pc, #172]	; (800f1c8 <_strtod_l+0x5d4>)
 800f11a:	0006      	movs	r6, r0
 800f11c:	400b      	ands	r3, r1
 800f11e:	4293      	cmp	r3, r2
 800f120:	d89a      	bhi.n	800f058 <_strtod_l+0x464>
 800f122:	4a2a      	ldr	r2, [pc, #168]	; (800f1cc <_strtod_l+0x5d8>)
 800f124:	4293      	cmp	r3, r2
 800f126:	d913      	bls.n	800f150 <_strtod_l+0x55c>
 800f128:	2601      	movs	r6, #1
 800f12a:	4f29      	ldr	r7, [pc, #164]	; (800f1d0 <_strtod_l+0x5dc>)
 800f12c:	4276      	negs	r6, r6
 800f12e:	2300      	movs	r3, #0
 800f130:	9306      	str	r3, [sp, #24]
 800f132:	e07b      	b.n	800f22c <_strtod_l+0x638>
 800f134:	2201      	movs	r2, #1
 800f136:	4214      	tst	r4, r2
 800f138:	d007      	beq.n	800f14a <_strtod_l+0x556>
 800f13a:	4a22      	ldr	r2, [pc, #136]	; (800f1c4 <_strtod_l+0x5d0>)
 800f13c:	00eb      	lsls	r3, r5, #3
 800f13e:	189b      	adds	r3, r3, r2
 800f140:	681a      	ldr	r2, [r3, #0]
 800f142:	685b      	ldr	r3, [r3, #4]
 800f144:	f7f7 fd1a 	bl	8006b7c <__aeabi_dmul>
 800f148:	2301      	movs	r3, #1
 800f14a:	3501      	adds	r5, #1
 800f14c:	1064      	asrs	r4, r4, #1
 800f14e:	e7d1      	b.n	800f0f4 <_strtod_l+0x500>
 800f150:	23d4      	movs	r3, #212	; 0xd4
 800f152:	049b      	lsls	r3, r3, #18
 800f154:	18cf      	adds	r7, r1, r3
 800f156:	e7ea      	b.n	800f12e <_strtod_l+0x53a>
 800f158:	2c00      	cmp	r4, #0
 800f15a:	d0e8      	beq.n	800f12e <_strtod_l+0x53a>
 800f15c:	230f      	movs	r3, #15
 800f15e:	4264      	negs	r4, r4
 800f160:	4023      	ands	r3, r4
 800f162:	d00a      	beq.n	800f17a <_strtod_l+0x586>
 800f164:	4a15      	ldr	r2, [pc, #84]	; (800f1bc <_strtod_l+0x5c8>)
 800f166:	00db      	lsls	r3, r3, #3
 800f168:	18d3      	adds	r3, r2, r3
 800f16a:	0030      	movs	r0, r6
 800f16c:	681a      	ldr	r2, [r3, #0]
 800f16e:	685b      	ldr	r3, [r3, #4]
 800f170:	0039      	movs	r1, r7
 800f172:	f7f7 f8f9 	bl	8006368 <__aeabi_ddiv>
 800f176:	0006      	movs	r6, r0
 800f178:	000f      	movs	r7, r1
 800f17a:	1124      	asrs	r4, r4, #4
 800f17c:	d0d7      	beq.n	800f12e <_strtod_l+0x53a>
 800f17e:	2c1f      	cmp	r4, #31
 800f180:	dd28      	ble.n	800f1d4 <_strtod_l+0x5e0>
 800f182:	2400      	movs	r4, #0
 800f184:	9405      	str	r4, [sp, #20]
 800f186:	940b      	str	r4, [sp, #44]	; 0x2c
 800f188:	940a      	str	r4, [sp, #40]	; 0x28
 800f18a:	2322      	movs	r3, #34	; 0x22
 800f18c:	9a04      	ldr	r2, [sp, #16]
 800f18e:	2600      	movs	r6, #0
 800f190:	6013      	str	r3, [r2, #0]
 800f192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f194:	2700      	movs	r7, #0
 800f196:	2b00      	cmp	r3, #0
 800f198:	d000      	beq.n	800f19c <_strtod_l+0x5a8>
 800f19a:	e76a      	b.n	800f072 <_strtod_l+0x47e>
 800f19c:	e56b      	b.n	800ec76 <_strtod_l+0x82>
 800f19e:	46c0      	nop			; (mov r8, r8)
 800f1a0:	00004e1f 	.word	0x00004e1f
 800f1a4:	08012bad 	.word	0x08012bad
 800f1a8:	08012c3b 	.word	0x08012c3b
 800f1ac:	7ff00000 	.word	0x7ff00000
 800f1b0:	08012bb5 	.word	0x08012bb5
 800f1b4:	08012bf8 	.word	0x08012bf8
 800f1b8:	fff80000 	.word	0xfff80000
 800f1bc:	08012ce0 	.word	0x08012ce0
 800f1c0:	fcb00000 	.word	0xfcb00000
 800f1c4:	08012cb8 	.word	0x08012cb8
 800f1c8:	7ca00000 	.word	0x7ca00000
 800f1cc:	7c900000 	.word	0x7c900000
 800f1d0:	7fefffff 	.word	0x7fefffff
 800f1d4:	2310      	movs	r3, #16
 800f1d6:	4023      	ands	r3, r4
 800f1d8:	9306      	str	r3, [sp, #24]
 800f1da:	d001      	beq.n	800f1e0 <_strtod_l+0x5ec>
 800f1dc:	236a      	movs	r3, #106	; 0x6a
 800f1de:	9306      	str	r3, [sp, #24]
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	0030      	movs	r0, r6
 800f1e4:	0039      	movs	r1, r7
 800f1e6:	001d      	movs	r5, r3
 800f1e8:	2c00      	cmp	r4, #0
 800f1ea:	dd00      	ble.n	800f1ee <_strtod_l+0x5fa>
 800f1ec:	e10e      	b.n	800f40c <_strtod_l+0x818>
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d001      	beq.n	800f1f6 <_strtod_l+0x602>
 800f1f2:	0006      	movs	r6, r0
 800f1f4:	000f      	movs	r7, r1
 800f1f6:	9b06      	ldr	r3, [sp, #24]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d00f      	beq.n	800f21c <_strtod_l+0x628>
 800f1fc:	236b      	movs	r3, #107	; 0x6b
 800f1fe:	0079      	lsls	r1, r7, #1
 800f200:	0d49      	lsrs	r1, r1, #21
 800f202:	003a      	movs	r2, r7
 800f204:	1a5b      	subs	r3, r3, r1
 800f206:	2b00      	cmp	r3, #0
 800f208:	dd08      	ble.n	800f21c <_strtod_l+0x628>
 800f20a:	2b1f      	cmp	r3, #31
 800f20c:	dc00      	bgt.n	800f210 <_strtod_l+0x61c>
 800f20e:	e112      	b.n	800f436 <_strtod_l+0x842>
 800f210:	2600      	movs	r6, #0
 800f212:	2b34      	cmp	r3, #52	; 0x34
 800f214:	dc00      	bgt.n	800f218 <_strtod_l+0x624>
 800f216:	e107      	b.n	800f428 <_strtod_l+0x834>
 800f218:	27dc      	movs	r7, #220	; 0xdc
 800f21a:	04bf      	lsls	r7, r7, #18
 800f21c:	2200      	movs	r2, #0
 800f21e:	2300      	movs	r3, #0
 800f220:	0030      	movs	r0, r6
 800f222:	0039      	movs	r1, r7
 800f224:	f7f6 f90c 	bl	8005440 <__aeabi_dcmpeq>
 800f228:	2800      	cmp	r0, #0
 800f22a:	d1aa      	bne.n	800f182 <_strtod_l+0x58e>
 800f22c:	9b08      	ldr	r3, [sp, #32]
 800f22e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f230:	9300      	str	r3, [sp, #0]
 800f232:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f234:	9b05      	ldr	r3, [sp, #20]
 800f236:	9804      	ldr	r0, [sp, #16]
 800f238:	f001 fed8 	bl	8010fec <__s2b>
 800f23c:	900b      	str	r0, [sp, #44]	; 0x2c
 800f23e:	2800      	cmp	r0, #0
 800f240:	d100      	bne.n	800f244 <_strtod_l+0x650>
 800f242:	e709      	b.n	800f058 <_strtod_l+0x464>
 800f244:	9b07      	ldr	r3, [sp, #28]
 800f246:	9a07      	ldr	r2, [sp, #28]
 800f248:	17db      	asrs	r3, r3, #31
 800f24a:	4252      	negs	r2, r2
 800f24c:	4013      	ands	r3, r2
 800f24e:	9315      	str	r3, [sp, #84]	; 0x54
 800f250:	9b07      	ldr	r3, [sp, #28]
 800f252:	2400      	movs	r4, #0
 800f254:	43db      	mvns	r3, r3
 800f256:	9a07      	ldr	r2, [sp, #28]
 800f258:	17db      	asrs	r3, r3, #31
 800f25a:	401a      	ands	r2, r3
 800f25c:	921c      	str	r2, [sp, #112]	; 0x70
 800f25e:	9405      	str	r4, [sp, #20]
 800f260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f262:	9804      	ldr	r0, [sp, #16]
 800f264:	6859      	ldr	r1, [r3, #4]
 800f266:	f001 fe32 	bl	8010ece <_Balloc>
 800f26a:	900a      	str	r0, [sp, #40]	; 0x28
 800f26c:	2800      	cmp	r0, #0
 800f26e:	d100      	bne.n	800f272 <_strtod_l+0x67e>
 800f270:	e6f6      	b.n	800f060 <_strtod_l+0x46c>
 800f272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f274:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f276:	691b      	ldr	r3, [r3, #16]
 800f278:	310c      	adds	r1, #12
 800f27a:	1c9a      	adds	r2, r3, #2
 800f27c:	0092      	lsls	r2, r2, #2
 800f27e:	300c      	adds	r0, #12
 800f280:	9308      	str	r3, [sp, #32]
 800f282:	f7fe fdf4 	bl	800de6e <memcpy>
 800f286:	ab24      	add	r3, sp, #144	; 0x90
 800f288:	9301      	str	r3, [sp, #4]
 800f28a:	ab23      	add	r3, sp, #140	; 0x8c
 800f28c:	9300      	str	r3, [sp, #0]
 800f28e:	0032      	movs	r2, r6
 800f290:	003b      	movs	r3, r7
 800f292:	9804      	ldr	r0, [sp, #16]
 800f294:	960e      	str	r6, [sp, #56]	; 0x38
 800f296:	970f      	str	r7, [sp, #60]	; 0x3c
 800f298:	f002 f95c 	bl	8011554 <__d2b>
 800f29c:	9022      	str	r0, [sp, #136]	; 0x88
 800f29e:	2800      	cmp	r0, #0
 800f2a0:	d100      	bne.n	800f2a4 <_strtod_l+0x6b0>
 800f2a2:	e6dd      	b.n	800f060 <_strtod_l+0x46c>
 800f2a4:	2101      	movs	r1, #1
 800f2a6:	9804      	ldr	r0, [sp, #16]
 800f2a8:	f001 ff27 	bl	80110fa <__i2b>
 800f2ac:	9005      	str	r0, [sp, #20]
 800f2ae:	2800      	cmp	r0, #0
 800f2b0:	d100      	bne.n	800f2b4 <_strtod_l+0x6c0>
 800f2b2:	e6d5      	b.n	800f060 <_strtod_l+0x46c>
 800f2b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	da00      	bge.n	800f2bc <_strtod_l+0x6c8>
 800f2ba:	e0c1      	b.n	800f440 <_strtod_l+0x84c>
 800f2bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f2be:	189d      	adds	r5, r3, r2
 800f2c0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f2c2:	4694      	mov	ip, r2
 800f2c4:	9906      	ldr	r1, [sp, #24]
 800f2c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f2c8:	1a5b      	subs	r3, r3, r1
 800f2ca:	2136      	movs	r1, #54	; 0x36
 800f2cc:	189b      	adds	r3, r3, r2
 800f2ce:	1a8a      	subs	r2, r1, r2
 800f2d0:	49b2      	ldr	r1, [pc, #712]	; (800f59c <_strtod_l+0x9a8>)
 800f2d2:	3b01      	subs	r3, #1
 800f2d4:	2001      	movs	r0, #1
 800f2d6:	428b      	cmp	r3, r1
 800f2d8:	db00      	blt.n	800f2dc <_strtod_l+0x6e8>
 800f2da:	e0bd      	b.n	800f458 <_strtod_l+0x864>
 800f2dc:	1ac9      	subs	r1, r1, r3
 800f2de:	1a52      	subs	r2, r2, r1
 800f2e0:	291f      	cmp	r1, #31
 800f2e2:	dd00      	ble.n	800f2e6 <_strtod_l+0x6f2>
 800f2e4:	e0b1      	b.n	800f44a <_strtod_l+0x856>
 800f2e6:	4088      	lsls	r0, r1
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	9014      	str	r0, [sp, #80]	; 0x50
 800f2ec:	9310      	str	r3, [sp, #64]	; 0x40
 800f2ee:	18ab      	adds	r3, r5, r2
 800f2f0:	9308      	str	r3, [sp, #32]
 800f2f2:	0013      	movs	r3, r2
 800f2f4:	9a06      	ldr	r2, [sp, #24]
 800f2f6:	4463      	add	r3, ip
 800f2f8:	18d3      	adds	r3, r2, r3
 800f2fa:	9a08      	ldr	r2, [sp, #32]
 800f2fc:	930c      	str	r3, [sp, #48]	; 0x30
 800f2fe:	002b      	movs	r3, r5
 800f300:	4295      	cmp	r5, r2
 800f302:	dd00      	ble.n	800f306 <_strtod_l+0x712>
 800f304:	0013      	movs	r3, r2
 800f306:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f308:	4293      	cmp	r3, r2
 800f30a:	dd00      	ble.n	800f30e <_strtod_l+0x71a>
 800f30c:	0013      	movs	r3, r2
 800f30e:	2b00      	cmp	r3, #0
 800f310:	dd06      	ble.n	800f320 <_strtod_l+0x72c>
 800f312:	9a08      	ldr	r2, [sp, #32]
 800f314:	1aed      	subs	r5, r5, r3
 800f316:	1ad2      	subs	r2, r2, r3
 800f318:	9208      	str	r2, [sp, #32]
 800f31a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f31c:	1ad2      	subs	r2, r2, r3
 800f31e:	920c      	str	r2, [sp, #48]	; 0x30
 800f320:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f322:	2b00      	cmp	r3, #0
 800f324:	d017      	beq.n	800f356 <_strtod_l+0x762>
 800f326:	001a      	movs	r2, r3
 800f328:	9905      	ldr	r1, [sp, #20]
 800f32a:	9804      	ldr	r0, [sp, #16]
 800f32c:	f001 ff7e 	bl	801122c <__pow5mult>
 800f330:	9005      	str	r0, [sp, #20]
 800f332:	2800      	cmp	r0, #0
 800f334:	d100      	bne.n	800f338 <_strtod_l+0x744>
 800f336:	e693      	b.n	800f060 <_strtod_l+0x46c>
 800f338:	0001      	movs	r1, r0
 800f33a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f33c:	9804      	ldr	r0, [sp, #16]
 800f33e:	f001 fee5 	bl	801110c <__multiply>
 800f342:	9012      	str	r0, [sp, #72]	; 0x48
 800f344:	2800      	cmp	r0, #0
 800f346:	d100      	bne.n	800f34a <_strtod_l+0x756>
 800f348:	e68a      	b.n	800f060 <_strtod_l+0x46c>
 800f34a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800f34c:	9804      	ldr	r0, [sp, #16]
 800f34e:	f001 fdf6 	bl	8010f3e <_Bfree>
 800f352:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f354:	9322      	str	r3, [sp, #136]	; 0x88
 800f356:	9b08      	ldr	r3, [sp, #32]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	dd00      	ble.n	800f35e <_strtod_l+0x76a>
 800f35c:	e07f      	b.n	800f45e <_strtod_l+0x86a>
 800f35e:	9b07      	ldr	r3, [sp, #28]
 800f360:	2b00      	cmp	r3, #0
 800f362:	dd08      	ble.n	800f376 <_strtod_l+0x782>
 800f364:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f366:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f368:	9804      	ldr	r0, [sp, #16]
 800f36a:	f001 ff5f 	bl	801122c <__pow5mult>
 800f36e:	900a      	str	r0, [sp, #40]	; 0x28
 800f370:	2800      	cmp	r0, #0
 800f372:	d100      	bne.n	800f376 <_strtod_l+0x782>
 800f374:	e674      	b.n	800f060 <_strtod_l+0x46c>
 800f376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f378:	2b00      	cmp	r3, #0
 800f37a:	dd08      	ble.n	800f38e <_strtod_l+0x79a>
 800f37c:	001a      	movs	r2, r3
 800f37e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f380:	9804      	ldr	r0, [sp, #16]
 800f382:	f001 ffa5 	bl	80112d0 <__lshift>
 800f386:	900a      	str	r0, [sp, #40]	; 0x28
 800f388:	2800      	cmp	r0, #0
 800f38a:	d100      	bne.n	800f38e <_strtod_l+0x79a>
 800f38c:	e668      	b.n	800f060 <_strtod_l+0x46c>
 800f38e:	2d00      	cmp	r5, #0
 800f390:	dd08      	ble.n	800f3a4 <_strtod_l+0x7b0>
 800f392:	002a      	movs	r2, r5
 800f394:	9905      	ldr	r1, [sp, #20]
 800f396:	9804      	ldr	r0, [sp, #16]
 800f398:	f001 ff9a 	bl	80112d0 <__lshift>
 800f39c:	9005      	str	r0, [sp, #20]
 800f39e:	2800      	cmp	r0, #0
 800f3a0:	d100      	bne.n	800f3a4 <_strtod_l+0x7b0>
 800f3a2:	e65d      	b.n	800f060 <_strtod_l+0x46c>
 800f3a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f3a6:	9922      	ldr	r1, [sp, #136]	; 0x88
 800f3a8:	9804      	ldr	r0, [sp, #16]
 800f3aa:	f001 fffd 	bl	80113a8 <__mdiff>
 800f3ae:	1e04      	subs	r4, r0, #0
 800f3b0:	d100      	bne.n	800f3b4 <_strtod_l+0x7c0>
 800f3b2:	e655      	b.n	800f060 <_strtod_l+0x46c>
 800f3b4:	2500      	movs	r5, #0
 800f3b6:	68c3      	ldr	r3, [r0, #12]
 800f3b8:	9905      	ldr	r1, [sp, #20]
 800f3ba:	60c5      	str	r5, [r0, #12]
 800f3bc:	9312      	str	r3, [sp, #72]	; 0x48
 800f3be:	f001 ffd9 	bl	8011374 <__mcmp>
 800f3c2:	42a8      	cmp	r0, r5
 800f3c4:	da55      	bge.n	800f472 <_strtod_l+0x87e>
 800f3c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f3c8:	42ab      	cmp	r3, r5
 800f3ca:	d11b      	bne.n	800f404 <_strtod_l+0x810>
 800f3cc:	42ae      	cmp	r6, r5
 800f3ce:	d119      	bne.n	800f404 <_strtod_l+0x810>
 800f3d0:	033b      	lsls	r3, r7, #12
 800f3d2:	42ab      	cmp	r3, r5
 800f3d4:	d116      	bne.n	800f404 <_strtod_l+0x810>
 800f3d6:	22d6      	movs	r2, #214	; 0xd6
 800f3d8:	4b71      	ldr	r3, [pc, #452]	; (800f5a0 <_strtod_l+0x9ac>)
 800f3da:	04d2      	lsls	r2, r2, #19
 800f3dc:	403b      	ands	r3, r7
 800f3de:	4293      	cmp	r3, r2
 800f3e0:	d910      	bls.n	800f404 <_strtod_l+0x810>
 800f3e2:	6963      	ldr	r3, [r4, #20]
 800f3e4:	42ab      	cmp	r3, r5
 800f3e6:	d102      	bne.n	800f3ee <_strtod_l+0x7fa>
 800f3e8:	6923      	ldr	r3, [r4, #16]
 800f3ea:	2b01      	cmp	r3, #1
 800f3ec:	dd0a      	ble.n	800f404 <_strtod_l+0x810>
 800f3ee:	0021      	movs	r1, r4
 800f3f0:	2201      	movs	r2, #1
 800f3f2:	9804      	ldr	r0, [sp, #16]
 800f3f4:	f001 ff6c 	bl	80112d0 <__lshift>
 800f3f8:	9905      	ldr	r1, [sp, #20]
 800f3fa:	0004      	movs	r4, r0
 800f3fc:	f001 ffba 	bl	8011374 <__mcmp>
 800f400:	2800      	cmp	r0, #0
 800f402:	dc6b      	bgt.n	800f4dc <_strtod_l+0x8e8>
 800f404:	9b06      	ldr	r3, [sp, #24]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d178      	bne.n	800f4fc <_strtod_l+0x908>
 800f40a:	e632      	b.n	800f072 <_strtod_l+0x47e>
 800f40c:	2201      	movs	r2, #1
 800f40e:	4214      	tst	r4, r2
 800f410:	d007      	beq.n	800f422 <_strtod_l+0x82e>
 800f412:	4a64      	ldr	r2, [pc, #400]	; (800f5a4 <_strtod_l+0x9b0>)
 800f414:	00eb      	lsls	r3, r5, #3
 800f416:	18d3      	adds	r3, r2, r3
 800f418:	681a      	ldr	r2, [r3, #0]
 800f41a:	685b      	ldr	r3, [r3, #4]
 800f41c:	f7f7 fbae 	bl	8006b7c <__aeabi_dmul>
 800f420:	2301      	movs	r3, #1
 800f422:	3501      	adds	r5, #1
 800f424:	1064      	asrs	r4, r4, #1
 800f426:	e6df      	b.n	800f1e8 <_strtod_l+0x5f4>
 800f428:	2101      	movs	r1, #1
 800f42a:	3b20      	subs	r3, #32
 800f42c:	4249      	negs	r1, r1
 800f42e:	4099      	lsls	r1, r3
 800f430:	400a      	ands	r2, r1
 800f432:	0017      	movs	r7, r2
 800f434:	e6f2      	b.n	800f21c <_strtod_l+0x628>
 800f436:	2201      	movs	r2, #1
 800f438:	4252      	negs	r2, r2
 800f43a:	409a      	lsls	r2, r3
 800f43c:	4016      	ands	r6, r2
 800f43e:	e6ed      	b.n	800f21c <_strtod_l+0x628>
 800f440:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f442:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800f444:	1ad2      	subs	r2, r2, r3
 800f446:	4694      	mov	ip, r2
 800f448:	e73c      	b.n	800f2c4 <_strtod_l+0x6d0>
 800f44a:	4957      	ldr	r1, [pc, #348]	; (800f5a8 <_strtod_l+0x9b4>)
 800f44c:	1acb      	subs	r3, r1, r3
 800f44e:	0001      	movs	r1, r0
 800f450:	4099      	lsls	r1, r3
 800f452:	9110      	str	r1, [sp, #64]	; 0x40
 800f454:	9014      	str	r0, [sp, #80]	; 0x50
 800f456:	e74a      	b.n	800f2ee <_strtod_l+0x6fa>
 800f458:	2300      	movs	r3, #0
 800f45a:	9310      	str	r3, [sp, #64]	; 0x40
 800f45c:	e7fa      	b.n	800f454 <_strtod_l+0x860>
 800f45e:	9a08      	ldr	r2, [sp, #32]
 800f460:	9922      	ldr	r1, [sp, #136]	; 0x88
 800f462:	9804      	ldr	r0, [sp, #16]
 800f464:	f001 ff34 	bl	80112d0 <__lshift>
 800f468:	9022      	str	r0, [sp, #136]	; 0x88
 800f46a:	2800      	cmp	r0, #0
 800f46c:	d000      	beq.n	800f470 <_strtod_l+0x87c>
 800f46e:	e776      	b.n	800f35e <_strtod_l+0x76a>
 800f470:	e5f6      	b.n	800f060 <_strtod_l+0x46c>
 800f472:	970c      	str	r7, [sp, #48]	; 0x30
 800f474:	2800      	cmp	r0, #0
 800f476:	d000      	beq.n	800f47a <_strtod_l+0x886>
 800f478:	e0a0      	b.n	800f5bc <_strtod_l+0x9c8>
 800f47a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f47c:	033b      	lsls	r3, r7, #12
 800f47e:	0b1b      	lsrs	r3, r3, #12
 800f480:	2a00      	cmp	r2, #0
 800f482:	d027      	beq.n	800f4d4 <_strtod_l+0x8e0>
 800f484:	4a49      	ldr	r2, [pc, #292]	; (800f5ac <_strtod_l+0x9b8>)
 800f486:	4293      	cmp	r3, r2
 800f488:	d157      	bne.n	800f53a <_strtod_l+0x946>
 800f48a:	2201      	movs	r2, #1
 800f48c:	9b06      	ldr	r3, [sp, #24]
 800f48e:	4252      	negs	r2, r2
 800f490:	0031      	movs	r1, r6
 800f492:	0010      	movs	r0, r2
 800f494:	2b00      	cmp	r3, #0
 800f496:	d00b      	beq.n	800f4b0 <_strtod_l+0x8bc>
 800f498:	25d4      	movs	r5, #212	; 0xd4
 800f49a:	4b41      	ldr	r3, [pc, #260]	; (800f5a0 <_strtod_l+0x9ac>)
 800f49c:	04ed      	lsls	r5, r5, #19
 800f49e:	403b      	ands	r3, r7
 800f4a0:	0010      	movs	r0, r2
 800f4a2:	42ab      	cmp	r3, r5
 800f4a4:	d804      	bhi.n	800f4b0 <_strtod_l+0x8bc>
 800f4a6:	306c      	adds	r0, #108	; 0x6c
 800f4a8:	0d1b      	lsrs	r3, r3, #20
 800f4aa:	1ac3      	subs	r3, r0, r3
 800f4ac:	409a      	lsls	r2, r3
 800f4ae:	0010      	movs	r0, r2
 800f4b0:	4281      	cmp	r1, r0
 800f4b2:	d142      	bne.n	800f53a <_strtod_l+0x946>
 800f4b4:	4b3e      	ldr	r3, [pc, #248]	; (800f5b0 <_strtod_l+0x9bc>)
 800f4b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	d102      	bne.n	800f4c2 <_strtod_l+0x8ce>
 800f4bc:	1c4b      	adds	r3, r1, #1
 800f4be:	d100      	bne.n	800f4c2 <_strtod_l+0x8ce>
 800f4c0:	e5ce      	b.n	800f060 <_strtod_l+0x46c>
 800f4c2:	4b37      	ldr	r3, [pc, #220]	; (800f5a0 <_strtod_l+0x9ac>)
 800f4c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f4c6:	2600      	movs	r6, #0
 800f4c8:	401a      	ands	r2, r3
 800f4ca:	0013      	movs	r3, r2
 800f4cc:	2280      	movs	r2, #128	; 0x80
 800f4ce:	0352      	lsls	r2, r2, #13
 800f4d0:	189f      	adds	r7, r3, r2
 800f4d2:	e797      	b.n	800f404 <_strtod_l+0x810>
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d130      	bne.n	800f53a <_strtod_l+0x946>
 800f4d8:	2e00      	cmp	r6, #0
 800f4da:	d12e      	bne.n	800f53a <_strtod_l+0x946>
 800f4dc:	9906      	ldr	r1, [sp, #24]
 800f4de:	003b      	movs	r3, r7
 800f4e0:	4a2f      	ldr	r2, [pc, #188]	; (800f5a0 <_strtod_l+0x9ac>)
 800f4e2:	2900      	cmp	r1, #0
 800f4e4:	d020      	beq.n	800f528 <_strtod_l+0x934>
 800f4e6:	0011      	movs	r1, r2
 800f4e8:	20d6      	movs	r0, #214	; 0xd6
 800f4ea:	4039      	ands	r1, r7
 800f4ec:	04c0      	lsls	r0, r0, #19
 800f4ee:	4281      	cmp	r1, r0
 800f4f0:	dc1a      	bgt.n	800f528 <_strtod_l+0x934>
 800f4f2:	23dc      	movs	r3, #220	; 0xdc
 800f4f4:	049b      	lsls	r3, r3, #18
 800f4f6:	4299      	cmp	r1, r3
 800f4f8:	dc00      	bgt.n	800f4fc <_strtod_l+0x908>
 800f4fa:	e646      	b.n	800f18a <_strtod_l+0x596>
 800f4fc:	4b2d      	ldr	r3, [pc, #180]	; (800f5b4 <_strtod_l+0x9c0>)
 800f4fe:	0030      	movs	r0, r6
 800f500:	931b      	str	r3, [sp, #108]	; 0x6c
 800f502:	2300      	movs	r3, #0
 800f504:	931a      	str	r3, [sp, #104]	; 0x68
 800f506:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f508:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f50a:	0039      	movs	r1, r7
 800f50c:	f7f7 fb36 	bl	8006b7c <__aeabi_dmul>
 800f510:	0006      	movs	r6, r0
 800f512:	000f      	movs	r7, r1
 800f514:	1e0b      	subs	r3, r1, #0
 800f516:	d000      	beq.n	800f51a <_strtod_l+0x926>
 800f518:	e5ab      	b.n	800f072 <_strtod_l+0x47e>
 800f51a:	2800      	cmp	r0, #0
 800f51c:	d000      	beq.n	800f520 <_strtod_l+0x92c>
 800f51e:	e5a8      	b.n	800f072 <_strtod_l+0x47e>
 800f520:	9a04      	ldr	r2, [sp, #16]
 800f522:	3322      	adds	r3, #34	; 0x22
 800f524:	6013      	str	r3, [r2, #0]
 800f526:	e5a4      	b.n	800f072 <_strtod_l+0x47e>
 800f528:	2601      	movs	r6, #1
 800f52a:	4013      	ands	r3, r2
 800f52c:	4a22      	ldr	r2, [pc, #136]	; (800f5b8 <_strtod_l+0x9c4>)
 800f52e:	4276      	negs	r6, r6
 800f530:	189b      	adds	r3, r3, r2
 800f532:	4a1e      	ldr	r2, [pc, #120]	; (800f5ac <_strtod_l+0x9b8>)
 800f534:	431a      	orrs	r2, r3
 800f536:	0017      	movs	r7, r2
 800f538:	e764      	b.n	800f404 <_strtod_l+0x810>
 800f53a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d015      	beq.n	800f56c <_strtod_l+0x978>
 800f540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f542:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f544:	4213      	tst	r3, r2
 800f546:	d100      	bne.n	800f54a <_strtod_l+0x956>
 800f548:	e75c      	b.n	800f404 <_strtod_l+0x810>
 800f54a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f54c:	9a06      	ldr	r2, [sp, #24]
 800f54e:	0030      	movs	r0, r6
 800f550:	0039      	movs	r1, r7
 800f552:	2b00      	cmp	r3, #0
 800f554:	d00f      	beq.n	800f576 <_strtod_l+0x982>
 800f556:	f7ff fb35 	bl	800ebc4 <sulp>
 800f55a:	0002      	movs	r2, r0
 800f55c:	000b      	movs	r3, r1
 800f55e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f560:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f562:	f7f6 fbe5 	bl	8005d30 <__aeabi_dadd>
 800f566:	0006      	movs	r6, r0
 800f568:	000f      	movs	r7, r1
 800f56a:	e74b      	b.n	800f404 <_strtod_l+0x810>
 800f56c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f56e:	4233      	tst	r3, r6
 800f570:	d100      	bne.n	800f574 <_strtod_l+0x980>
 800f572:	e747      	b.n	800f404 <_strtod_l+0x810>
 800f574:	e7e9      	b.n	800f54a <_strtod_l+0x956>
 800f576:	f7ff fb25 	bl	800ebc4 <sulp>
 800f57a:	0002      	movs	r2, r0
 800f57c:	000b      	movs	r3, r1
 800f57e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f580:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f582:	f7f7 fd6d 	bl	8007060 <__aeabi_dsub>
 800f586:	2200      	movs	r2, #0
 800f588:	2300      	movs	r3, #0
 800f58a:	0006      	movs	r6, r0
 800f58c:	000f      	movs	r7, r1
 800f58e:	f7f5 ff57 	bl	8005440 <__aeabi_dcmpeq>
 800f592:	2800      	cmp	r0, #0
 800f594:	d000      	beq.n	800f598 <_strtod_l+0x9a4>
 800f596:	e5f8      	b.n	800f18a <_strtod_l+0x596>
 800f598:	e734      	b.n	800f404 <_strtod_l+0x810>
 800f59a:	46c0      	nop			; (mov r8, r8)
 800f59c:	fffffc02 	.word	0xfffffc02
 800f5a0:	7ff00000 	.word	0x7ff00000
 800f5a4:	08012c10 	.word	0x08012c10
 800f5a8:	fffffbe2 	.word	0xfffffbe2
 800f5ac:	000fffff 	.word	0x000fffff
 800f5b0:	7fefffff 	.word	0x7fefffff
 800f5b4:	39500000 	.word	0x39500000
 800f5b8:	fff00000 	.word	0xfff00000
 800f5bc:	9905      	ldr	r1, [sp, #20]
 800f5be:	0020      	movs	r0, r4
 800f5c0:	f002 f81c 	bl	80115fc <__ratio>
 800f5c4:	2380      	movs	r3, #128	; 0x80
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	05db      	lsls	r3, r3, #23
 800f5ca:	9008      	str	r0, [sp, #32]
 800f5cc:	9109      	str	r1, [sp, #36]	; 0x24
 800f5ce:	f7f5 ff47 	bl	8005460 <__aeabi_dcmple>
 800f5d2:	2800      	cmp	r0, #0
 800f5d4:	d100      	bne.n	800f5d8 <_strtod_l+0x9e4>
 800f5d6:	e07f      	b.n	800f6d8 <_strtod_l+0xae4>
 800f5d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d04b      	beq.n	800f676 <_strtod_l+0xa82>
 800f5de:	2200      	movs	r2, #0
 800f5e0:	4b8a      	ldr	r3, [pc, #552]	; (800f80c <_strtod_l+0xc18>)
 800f5e2:	9210      	str	r2, [sp, #64]	; 0x40
 800f5e4:	9311      	str	r3, [sp, #68]	; 0x44
 800f5e6:	4b89      	ldr	r3, [pc, #548]	; (800f80c <_strtod_l+0xc18>)
 800f5e8:	9308      	str	r3, [sp, #32]
 800f5ea:	4a89      	ldr	r2, [pc, #548]	; (800f810 <_strtod_l+0xc1c>)
 800f5ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5ee:	4013      	ands	r3, r2
 800f5f0:	9314      	str	r3, [sp, #80]	; 0x50
 800f5f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f5f4:	4b87      	ldr	r3, [pc, #540]	; (800f814 <_strtod_l+0xc20>)
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d000      	beq.n	800f5fc <_strtod_l+0xa08>
 800f5fa:	e0ba      	b.n	800f772 <_strtod_l+0xb7e>
 800f5fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f5fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f600:	921a      	str	r2, [sp, #104]	; 0x68
 800f602:	931b      	str	r3, [sp, #108]	; 0x6c
 800f604:	4a84      	ldr	r2, [pc, #528]	; (800f818 <_strtod_l+0xc24>)
 800f606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f608:	4694      	mov	ip, r2
 800f60a:	4463      	add	r3, ip
 800f60c:	001f      	movs	r7, r3
 800f60e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f610:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f612:	0030      	movs	r0, r6
 800f614:	0039      	movs	r1, r7
 800f616:	920c      	str	r2, [sp, #48]	; 0x30
 800f618:	930d      	str	r3, [sp, #52]	; 0x34
 800f61a:	f001 ff29 	bl	8011470 <__ulp>
 800f61e:	0002      	movs	r2, r0
 800f620:	000b      	movs	r3, r1
 800f622:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f624:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f626:	f7f7 faa9 	bl	8006b7c <__aeabi_dmul>
 800f62a:	0032      	movs	r2, r6
 800f62c:	003b      	movs	r3, r7
 800f62e:	f7f6 fb7f 	bl	8005d30 <__aeabi_dadd>
 800f632:	4a77      	ldr	r2, [pc, #476]	; (800f810 <_strtod_l+0xc1c>)
 800f634:	4b79      	ldr	r3, [pc, #484]	; (800f81c <_strtod_l+0xc28>)
 800f636:	0006      	movs	r6, r0
 800f638:	400a      	ands	r2, r1
 800f63a:	429a      	cmp	r2, r3
 800f63c:	d964      	bls.n	800f708 <_strtod_l+0xb14>
 800f63e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f640:	4a77      	ldr	r2, [pc, #476]	; (800f820 <_strtod_l+0xc2c>)
 800f642:	4293      	cmp	r3, r2
 800f644:	d103      	bne.n	800f64e <_strtod_l+0xa5a>
 800f646:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f648:	3301      	adds	r3, #1
 800f64a:	d100      	bne.n	800f64e <_strtod_l+0xa5a>
 800f64c:	e508      	b.n	800f060 <_strtod_l+0x46c>
 800f64e:	2601      	movs	r6, #1
 800f650:	4f73      	ldr	r7, [pc, #460]	; (800f820 <_strtod_l+0xc2c>)
 800f652:	4276      	negs	r6, r6
 800f654:	9922      	ldr	r1, [sp, #136]	; 0x88
 800f656:	9804      	ldr	r0, [sp, #16]
 800f658:	f001 fc71 	bl	8010f3e <_Bfree>
 800f65c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f65e:	9804      	ldr	r0, [sp, #16]
 800f660:	f001 fc6d 	bl	8010f3e <_Bfree>
 800f664:	9905      	ldr	r1, [sp, #20]
 800f666:	9804      	ldr	r0, [sp, #16]
 800f668:	f001 fc69 	bl	8010f3e <_Bfree>
 800f66c:	0021      	movs	r1, r4
 800f66e:	9804      	ldr	r0, [sp, #16]
 800f670:	f001 fc65 	bl	8010f3e <_Bfree>
 800f674:	e5f4      	b.n	800f260 <_strtod_l+0x66c>
 800f676:	2e00      	cmp	r6, #0
 800f678:	d11e      	bne.n	800f6b8 <_strtod_l+0xac4>
 800f67a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f67c:	031b      	lsls	r3, r3, #12
 800f67e:	d121      	bne.n	800f6c4 <_strtod_l+0xad0>
 800f680:	9808      	ldr	r0, [sp, #32]
 800f682:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f684:	2200      	movs	r2, #0
 800f686:	4b61      	ldr	r3, [pc, #388]	; (800f80c <_strtod_l+0xc18>)
 800f688:	f7f5 fee0 	bl	800544c <__aeabi_dcmplt>
 800f68c:	2800      	cmp	r0, #0
 800f68e:	d11f      	bne.n	800f6d0 <_strtod_l+0xadc>
 800f690:	9808      	ldr	r0, [sp, #32]
 800f692:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f694:	2200      	movs	r2, #0
 800f696:	4b63      	ldr	r3, [pc, #396]	; (800f824 <_strtod_l+0xc30>)
 800f698:	f7f7 fa70 	bl	8006b7c <__aeabi_dmul>
 800f69c:	0005      	movs	r5, r0
 800f69e:	9108      	str	r1, [sp, #32]
 800f6a0:	2280      	movs	r2, #128	; 0x80
 800f6a2:	0612      	lsls	r2, r2, #24
 800f6a4:	4694      	mov	ip, r2
 800f6a6:	9b08      	ldr	r3, [sp, #32]
 800f6a8:	951e      	str	r5, [sp, #120]	; 0x78
 800f6aa:	4463      	add	r3, ip
 800f6ac:	931f      	str	r3, [sp, #124]	; 0x7c
 800f6ae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f6b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f6b2:	9210      	str	r2, [sp, #64]	; 0x40
 800f6b4:	9311      	str	r3, [sp, #68]	; 0x44
 800f6b6:	e798      	b.n	800f5ea <_strtod_l+0x9f6>
 800f6b8:	2e01      	cmp	r6, #1
 800f6ba:	d103      	bne.n	800f6c4 <_strtod_l+0xad0>
 800f6bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d100      	bne.n	800f6c4 <_strtod_l+0xad0>
 800f6c2:	e562      	b.n	800f18a <_strtod_l+0x596>
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	4b58      	ldr	r3, [pc, #352]	; (800f828 <_strtod_l+0xc34>)
 800f6c8:	2500      	movs	r5, #0
 800f6ca:	9210      	str	r2, [sp, #64]	; 0x40
 800f6cc:	9311      	str	r3, [sp, #68]	; 0x44
 800f6ce:	e78a      	b.n	800f5e6 <_strtod_l+0x9f2>
 800f6d0:	4b54      	ldr	r3, [pc, #336]	; (800f824 <_strtod_l+0xc30>)
 800f6d2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800f6d4:	9308      	str	r3, [sp, #32]
 800f6d6:	e7e3      	b.n	800f6a0 <_strtod_l+0xaac>
 800f6d8:	4b52      	ldr	r3, [pc, #328]	; (800f824 <_strtod_l+0xc30>)
 800f6da:	9808      	ldr	r0, [sp, #32]
 800f6dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f6de:	2200      	movs	r2, #0
 800f6e0:	f7f7 fa4c 	bl	8006b7c <__aeabi_dmul>
 800f6e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f6e6:	0005      	movs	r5, r0
 800f6e8:	9108      	str	r1, [sp, #32]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d107      	bne.n	800f6fe <_strtod_l+0xb0a>
 800f6ee:	2380      	movs	r3, #128	; 0x80
 800f6f0:	061b      	lsls	r3, r3, #24
 800f6f2:	18cb      	adds	r3, r1, r3
 800f6f4:	9016      	str	r0, [sp, #88]	; 0x58
 800f6f6:	9317      	str	r3, [sp, #92]	; 0x5c
 800f6f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f6fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f6fc:	e7d9      	b.n	800f6b2 <_strtod_l+0xabe>
 800f6fe:	0002      	movs	r2, r0
 800f700:	9b08      	ldr	r3, [sp, #32]
 800f702:	9216      	str	r2, [sp, #88]	; 0x58
 800f704:	9317      	str	r3, [sp, #92]	; 0x5c
 800f706:	e7f7      	b.n	800f6f8 <_strtod_l+0xb04>
 800f708:	23d4      	movs	r3, #212	; 0xd4
 800f70a:	049b      	lsls	r3, r3, #18
 800f70c:	18cf      	adds	r7, r1, r3
 800f70e:	9b06      	ldr	r3, [sp, #24]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d19f      	bne.n	800f654 <_strtod_l+0xa60>
 800f714:	4b3e      	ldr	r3, [pc, #248]	; (800f810 <_strtod_l+0xc1c>)
 800f716:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f718:	970c      	str	r7, [sp, #48]	; 0x30
 800f71a:	403b      	ands	r3, r7
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d199      	bne.n	800f654 <_strtod_l+0xa60>
 800f720:	9908      	ldr	r1, [sp, #32]
 800f722:	0028      	movs	r0, r5
 800f724:	f7f8 f800 	bl	8007728 <__aeabi_d2iz>
 800f728:	f7f8 f834 	bl	8007794 <__aeabi_i2d>
 800f72c:	000b      	movs	r3, r1
 800f72e:	0002      	movs	r2, r0
 800f730:	9908      	ldr	r1, [sp, #32]
 800f732:	0028      	movs	r0, r5
 800f734:	f7f7 fc94 	bl	8007060 <__aeabi_dsub>
 800f738:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f73a:	9008      	str	r0, [sp, #32]
 800f73c:	9109      	str	r1, [sp, #36]	; 0x24
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d104      	bne.n	800f74c <_strtod_l+0xb58>
 800f742:	2e00      	cmp	r6, #0
 800f744:	d102      	bne.n	800f74c <_strtod_l+0xb58>
 800f746:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f748:	031b      	lsls	r3, r3, #12
 800f74a:	d058      	beq.n	800f7fe <_strtod_l+0xc0a>
 800f74c:	9808      	ldr	r0, [sp, #32]
 800f74e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f750:	4a36      	ldr	r2, [pc, #216]	; (800f82c <_strtod_l+0xc38>)
 800f752:	4b37      	ldr	r3, [pc, #220]	; (800f830 <_strtod_l+0xc3c>)
 800f754:	f7f5 fe7a 	bl	800544c <__aeabi_dcmplt>
 800f758:	2800      	cmp	r0, #0
 800f75a:	d000      	beq.n	800f75e <_strtod_l+0xb6a>
 800f75c:	e489      	b.n	800f072 <_strtod_l+0x47e>
 800f75e:	9808      	ldr	r0, [sp, #32]
 800f760:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f762:	4a34      	ldr	r2, [pc, #208]	; (800f834 <_strtod_l+0xc40>)
 800f764:	4b2f      	ldr	r3, [pc, #188]	; (800f824 <_strtod_l+0xc30>)
 800f766:	f7f5 fe85 	bl	8005474 <__aeabi_dcmpgt>
 800f76a:	2800      	cmp	r0, #0
 800f76c:	d100      	bne.n	800f770 <_strtod_l+0xb7c>
 800f76e:	e771      	b.n	800f654 <_strtod_l+0xa60>
 800f770:	e47f      	b.n	800f072 <_strtod_l+0x47e>
 800f772:	9b06      	ldr	r3, [sp, #24]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d02a      	beq.n	800f7ce <_strtod_l+0xbda>
 800f778:	23d4      	movs	r3, #212	; 0xd4
 800f77a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f77c:	04db      	lsls	r3, r3, #19
 800f77e:	429a      	cmp	r2, r3
 800f780:	d825      	bhi.n	800f7ce <_strtod_l+0xbda>
 800f782:	4a2d      	ldr	r2, [pc, #180]	; (800f838 <_strtod_l+0xc44>)
 800f784:	4b2d      	ldr	r3, [pc, #180]	; (800f83c <_strtod_l+0xc48>)
 800f786:	0028      	movs	r0, r5
 800f788:	9908      	ldr	r1, [sp, #32]
 800f78a:	f7f5 fe69 	bl	8005460 <__aeabi_dcmple>
 800f78e:	2800      	cmp	r0, #0
 800f790:	d016      	beq.n	800f7c0 <_strtod_l+0xbcc>
 800f792:	0028      	movs	r0, r5
 800f794:	9908      	ldr	r1, [sp, #32]
 800f796:	f7f5 fecb 	bl	8005530 <__aeabi_d2uiz>
 800f79a:	2800      	cmp	r0, #0
 800f79c:	d100      	bne.n	800f7a0 <_strtod_l+0xbac>
 800f79e:	3001      	adds	r0, #1
 800f7a0:	f7f8 f832 	bl	8007808 <__aeabi_ui2d>
 800f7a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f7a6:	0005      	movs	r5, r0
 800f7a8:	9108      	str	r1, [sp, #32]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d122      	bne.n	800f7f4 <_strtod_l+0xc00>
 800f7ae:	2380      	movs	r3, #128	; 0x80
 800f7b0:	061b      	lsls	r3, r3, #24
 800f7b2:	18cb      	adds	r3, r1, r3
 800f7b4:	9018      	str	r0, [sp, #96]	; 0x60
 800f7b6:	9319      	str	r3, [sp, #100]	; 0x64
 800f7b8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f7ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f7bc:	9210      	str	r2, [sp, #64]	; 0x40
 800f7be:	9311      	str	r3, [sp, #68]	; 0x44
 800f7c0:	22d6      	movs	r2, #214	; 0xd6
 800f7c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f7c4:	04d2      	lsls	r2, r2, #19
 800f7c6:	189b      	adds	r3, r3, r2
 800f7c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f7ca:	1a9b      	subs	r3, r3, r2
 800f7cc:	9311      	str	r3, [sp, #68]	; 0x44
 800f7ce:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f7d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f7d2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800f7d4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800f7d6:	f001 fe4b 	bl	8011470 <__ulp>
 800f7da:	0002      	movs	r2, r0
 800f7dc:	000b      	movs	r3, r1
 800f7de:	0030      	movs	r0, r6
 800f7e0:	0039      	movs	r1, r7
 800f7e2:	f7f7 f9cb 	bl	8006b7c <__aeabi_dmul>
 800f7e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f7e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f7ea:	f7f6 faa1 	bl	8005d30 <__aeabi_dadd>
 800f7ee:	0006      	movs	r6, r0
 800f7f0:	000f      	movs	r7, r1
 800f7f2:	e78c      	b.n	800f70e <_strtod_l+0xb1a>
 800f7f4:	0002      	movs	r2, r0
 800f7f6:	9b08      	ldr	r3, [sp, #32]
 800f7f8:	9218      	str	r2, [sp, #96]	; 0x60
 800f7fa:	9319      	str	r3, [sp, #100]	; 0x64
 800f7fc:	e7dc      	b.n	800f7b8 <_strtod_l+0xbc4>
 800f7fe:	4a0b      	ldr	r2, [pc, #44]	; (800f82c <_strtod_l+0xc38>)
 800f800:	4b0f      	ldr	r3, [pc, #60]	; (800f840 <_strtod_l+0xc4c>)
 800f802:	9808      	ldr	r0, [sp, #32]
 800f804:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f806:	f7f5 fe21 	bl	800544c <__aeabi_dcmplt>
 800f80a:	e7ae      	b.n	800f76a <_strtod_l+0xb76>
 800f80c:	3ff00000 	.word	0x3ff00000
 800f810:	7ff00000 	.word	0x7ff00000
 800f814:	7fe00000 	.word	0x7fe00000
 800f818:	fcb00000 	.word	0xfcb00000
 800f81c:	7c9fffff 	.word	0x7c9fffff
 800f820:	7fefffff 	.word	0x7fefffff
 800f824:	3fe00000 	.word	0x3fe00000
 800f828:	bff00000 	.word	0xbff00000
 800f82c:	94a03595 	.word	0x94a03595
 800f830:	3fdfffff 	.word	0x3fdfffff
 800f834:	35afe535 	.word	0x35afe535
 800f838:	ffc00000 	.word	0xffc00000
 800f83c:	41dfffff 	.word	0x41dfffff
 800f840:	3fcfffff 	.word	0x3fcfffff

0800f844 <_strtod_r>:
 800f844:	4b04      	ldr	r3, [pc, #16]	; (800f858 <_strtod_r+0x14>)
 800f846:	b510      	push	{r4, lr}
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	6a1b      	ldr	r3, [r3, #32]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d100      	bne.n	800f852 <_strtod_r+0xe>
 800f850:	4b02      	ldr	r3, [pc, #8]	; (800f85c <_strtod_r+0x18>)
 800f852:	f7ff f9cf 	bl	800ebf4 <_strtod_l>
 800f856:	bd10      	pop	{r4, pc}
 800f858:	2000012c 	.word	0x2000012c
 800f85c:	20000190 	.word	0x20000190

0800f860 <_strtol_l.isra.0>:
 800f860:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f862:	001f      	movs	r7, r3
 800f864:	000e      	movs	r6, r1
 800f866:	b087      	sub	sp, #28
 800f868:	9005      	str	r0, [sp, #20]
 800f86a:	9101      	str	r1, [sp, #4]
 800f86c:	9202      	str	r2, [sp, #8]
 800f86e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f870:	7834      	ldrb	r4, [r6, #0]
 800f872:	f001 faf3 	bl	8010e5c <__locale_ctype_ptr_l>
 800f876:	2208      	movs	r2, #8
 800f878:	1900      	adds	r0, r0, r4
 800f87a:	7843      	ldrb	r3, [r0, #1]
 800f87c:	1c75      	adds	r5, r6, #1
 800f87e:	4013      	ands	r3, r2
 800f880:	d136      	bne.n	800f8f0 <_strtol_l.isra.0+0x90>
 800f882:	2c2d      	cmp	r4, #45	; 0x2d
 800f884:	d136      	bne.n	800f8f4 <_strtol_l.isra.0+0x94>
 800f886:	1cb5      	adds	r5, r6, #2
 800f888:	7874      	ldrb	r4, [r6, #1]
 800f88a:	2601      	movs	r6, #1
 800f88c:	2f00      	cmp	r7, #0
 800f88e:	d062      	beq.n	800f956 <_strtol_l.isra.0+0xf6>
 800f890:	2f10      	cmp	r7, #16
 800f892:	d109      	bne.n	800f8a8 <_strtol_l.isra.0+0x48>
 800f894:	2c30      	cmp	r4, #48	; 0x30
 800f896:	d107      	bne.n	800f8a8 <_strtol_l.isra.0+0x48>
 800f898:	2220      	movs	r2, #32
 800f89a:	782b      	ldrb	r3, [r5, #0]
 800f89c:	4393      	bics	r3, r2
 800f89e:	2b58      	cmp	r3, #88	; 0x58
 800f8a0:	d154      	bne.n	800f94c <_strtol_l.isra.0+0xec>
 800f8a2:	2710      	movs	r7, #16
 800f8a4:	786c      	ldrb	r4, [r5, #1]
 800f8a6:	3502      	adds	r5, #2
 800f8a8:	4b2d      	ldr	r3, [pc, #180]	; (800f960 <_strtol_l.isra.0+0x100>)
 800f8aa:	0039      	movs	r1, r7
 800f8ac:	18f3      	adds	r3, r6, r3
 800f8ae:	0018      	movs	r0, r3
 800f8b0:	9303      	str	r3, [sp, #12]
 800f8b2:	f7f5 fcc5 	bl	8005240 <__aeabi_uidivmod>
 800f8b6:	9104      	str	r1, [sp, #16]
 800f8b8:	2101      	movs	r1, #1
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	4249      	negs	r1, r1
 800f8be:	0002      	movs	r2, r0
 800f8c0:	468c      	mov	ip, r1
 800f8c2:	0018      	movs	r0, r3
 800f8c4:	0021      	movs	r1, r4
 800f8c6:	3930      	subs	r1, #48	; 0x30
 800f8c8:	2909      	cmp	r1, #9
 800f8ca:	d81a      	bhi.n	800f902 <_strtol_l.isra.0+0xa2>
 800f8cc:	000c      	movs	r4, r1
 800f8ce:	42a7      	cmp	r7, r4
 800f8d0:	dd23      	ble.n	800f91a <_strtol_l.isra.0+0xba>
 800f8d2:	1c59      	adds	r1, r3, #1
 800f8d4:	d009      	beq.n	800f8ea <_strtol_l.isra.0+0x8a>
 800f8d6:	4663      	mov	r3, ip
 800f8d8:	4282      	cmp	r2, r0
 800f8da:	d306      	bcc.n	800f8ea <_strtol_l.isra.0+0x8a>
 800f8dc:	d102      	bne.n	800f8e4 <_strtol_l.isra.0+0x84>
 800f8de:	9904      	ldr	r1, [sp, #16]
 800f8e0:	42a1      	cmp	r1, r4
 800f8e2:	db02      	blt.n	800f8ea <_strtol_l.isra.0+0x8a>
 800f8e4:	2301      	movs	r3, #1
 800f8e6:	4378      	muls	r0, r7
 800f8e8:	1820      	adds	r0, r4, r0
 800f8ea:	782c      	ldrb	r4, [r5, #0]
 800f8ec:	3501      	adds	r5, #1
 800f8ee:	e7e9      	b.n	800f8c4 <_strtol_l.isra.0+0x64>
 800f8f0:	002e      	movs	r6, r5
 800f8f2:	e7bc      	b.n	800f86e <_strtol_l.isra.0+0xe>
 800f8f4:	2c2b      	cmp	r4, #43	; 0x2b
 800f8f6:	d001      	beq.n	800f8fc <_strtol_l.isra.0+0x9c>
 800f8f8:	001e      	movs	r6, r3
 800f8fa:	e7c7      	b.n	800f88c <_strtol_l.isra.0+0x2c>
 800f8fc:	1cb5      	adds	r5, r6, #2
 800f8fe:	7874      	ldrb	r4, [r6, #1]
 800f900:	e7fa      	b.n	800f8f8 <_strtol_l.isra.0+0x98>
 800f902:	0021      	movs	r1, r4
 800f904:	3941      	subs	r1, #65	; 0x41
 800f906:	2919      	cmp	r1, #25
 800f908:	d801      	bhi.n	800f90e <_strtol_l.isra.0+0xae>
 800f90a:	3c37      	subs	r4, #55	; 0x37
 800f90c:	e7df      	b.n	800f8ce <_strtol_l.isra.0+0x6e>
 800f90e:	0021      	movs	r1, r4
 800f910:	3961      	subs	r1, #97	; 0x61
 800f912:	2919      	cmp	r1, #25
 800f914:	d801      	bhi.n	800f91a <_strtol_l.isra.0+0xba>
 800f916:	3c57      	subs	r4, #87	; 0x57
 800f918:	e7d9      	b.n	800f8ce <_strtol_l.isra.0+0x6e>
 800f91a:	1c5a      	adds	r2, r3, #1
 800f91c:	d108      	bne.n	800f930 <_strtol_l.isra.0+0xd0>
 800f91e:	9a05      	ldr	r2, [sp, #20]
 800f920:	3323      	adds	r3, #35	; 0x23
 800f922:	6013      	str	r3, [r2, #0]
 800f924:	9b02      	ldr	r3, [sp, #8]
 800f926:	9803      	ldr	r0, [sp, #12]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d109      	bne.n	800f940 <_strtol_l.isra.0+0xe0>
 800f92c:	b007      	add	sp, #28
 800f92e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f930:	2e00      	cmp	r6, #0
 800f932:	d000      	beq.n	800f936 <_strtol_l.isra.0+0xd6>
 800f934:	4240      	negs	r0, r0
 800f936:	9a02      	ldr	r2, [sp, #8]
 800f938:	2a00      	cmp	r2, #0
 800f93a:	d0f7      	beq.n	800f92c <_strtol_l.isra.0+0xcc>
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d001      	beq.n	800f944 <_strtol_l.isra.0+0xe4>
 800f940:	1e6b      	subs	r3, r5, #1
 800f942:	9301      	str	r3, [sp, #4]
 800f944:	9b02      	ldr	r3, [sp, #8]
 800f946:	9a01      	ldr	r2, [sp, #4]
 800f948:	601a      	str	r2, [r3, #0]
 800f94a:	e7ef      	b.n	800f92c <_strtol_l.isra.0+0xcc>
 800f94c:	2430      	movs	r4, #48	; 0x30
 800f94e:	2f00      	cmp	r7, #0
 800f950:	d1aa      	bne.n	800f8a8 <_strtol_l.isra.0+0x48>
 800f952:	2708      	movs	r7, #8
 800f954:	e7a8      	b.n	800f8a8 <_strtol_l.isra.0+0x48>
 800f956:	2c30      	cmp	r4, #48	; 0x30
 800f958:	d09e      	beq.n	800f898 <_strtol_l.isra.0+0x38>
 800f95a:	270a      	movs	r7, #10
 800f95c:	e7a4      	b.n	800f8a8 <_strtol_l.isra.0+0x48>
 800f95e:	46c0      	nop			; (mov r8, r8)
 800f960:	7fffffff 	.word	0x7fffffff

0800f964 <_strtol_r>:
 800f964:	b513      	push	{r0, r1, r4, lr}
 800f966:	4c05      	ldr	r4, [pc, #20]	; (800f97c <_strtol_r+0x18>)
 800f968:	6824      	ldr	r4, [r4, #0]
 800f96a:	6a24      	ldr	r4, [r4, #32]
 800f96c:	2c00      	cmp	r4, #0
 800f96e:	d100      	bne.n	800f972 <_strtol_r+0xe>
 800f970:	4c03      	ldr	r4, [pc, #12]	; (800f980 <_strtol_r+0x1c>)
 800f972:	9400      	str	r4, [sp, #0]
 800f974:	f7ff ff74 	bl	800f860 <_strtol_l.isra.0>
 800f978:	bd16      	pop	{r1, r2, r4, pc}
 800f97a:	46c0      	nop			; (mov r8, r8)
 800f97c:	2000012c 	.word	0x2000012c
 800f980:	20000190 	.word	0x20000190

0800f984 <quorem>:
 800f984:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f986:	6903      	ldr	r3, [r0, #16]
 800f988:	690c      	ldr	r4, [r1, #16]
 800f98a:	b089      	sub	sp, #36	; 0x24
 800f98c:	0007      	movs	r7, r0
 800f98e:	9105      	str	r1, [sp, #20]
 800f990:	2600      	movs	r6, #0
 800f992:	42a3      	cmp	r3, r4
 800f994:	db65      	blt.n	800fa62 <quorem+0xde>
 800f996:	000b      	movs	r3, r1
 800f998:	3c01      	subs	r4, #1
 800f99a:	3314      	adds	r3, #20
 800f99c:	00a5      	lsls	r5, r4, #2
 800f99e:	9303      	str	r3, [sp, #12]
 800f9a0:	195b      	adds	r3, r3, r5
 800f9a2:	9304      	str	r3, [sp, #16]
 800f9a4:	0003      	movs	r3, r0
 800f9a6:	3314      	adds	r3, #20
 800f9a8:	9302      	str	r3, [sp, #8]
 800f9aa:	195d      	adds	r5, r3, r5
 800f9ac:	9b04      	ldr	r3, [sp, #16]
 800f9ae:	6828      	ldr	r0, [r5, #0]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	1c59      	adds	r1, r3, #1
 800f9b4:	9301      	str	r3, [sp, #4]
 800f9b6:	f7f5 fbbd 	bl	8005134 <__udivsi3>
 800f9ba:	9001      	str	r0, [sp, #4]
 800f9bc:	42b0      	cmp	r0, r6
 800f9be:	d029      	beq.n	800fa14 <quorem+0x90>
 800f9c0:	9b03      	ldr	r3, [sp, #12]
 800f9c2:	9802      	ldr	r0, [sp, #8]
 800f9c4:	469c      	mov	ip, r3
 800f9c6:	9606      	str	r6, [sp, #24]
 800f9c8:	4662      	mov	r2, ip
 800f9ca:	ca08      	ldmia	r2!, {r3}
 800f9cc:	4694      	mov	ip, r2
 800f9ce:	9a01      	ldr	r2, [sp, #4]
 800f9d0:	b299      	uxth	r1, r3
 800f9d2:	4351      	muls	r1, r2
 800f9d4:	0c1b      	lsrs	r3, r3, #16
 800f9d6:	4353      	muls	r3, r2
 800f9d8:	1989      	adds	r1, r1, r6
 800f9da:	0c0a      	lsrs	r2, r1, #16
 800f9dc:	189b      	adds	r3, r3, r2
 800f9de:	9307      	str	r3, [sp, #28]
 800f9e0:	0c1e      	lsrs	r6, r3, #16
 800f9e2:	6803      	ldr	r3, [r0, #0]
 800f9e4:	b289      	uxth	r1, r1
 800f9e6:	b29a      	uxth	r2, r3
 800f9e8:	9b06      	ldr	r3, [sp, #24]
 800f9ea:	18d2      	adds	r2, r2, r3
 800f9ec:	6803      	ldr	r3, [r0, #0]
 800f9ee:	1a52      	subs	r2, r2, r1
 800f9f0:	0c19      	lsrs	r1, r3, #16
 800f9f2:	466b      	mov	r3, sp
 800f9f4:	8b9b      	ldrh	r3, [r3, #28]
 800f9f6:	1acb      	subs	r3, r1, r3
 800f9f8:	1411      	asrs	r1, r2, #16
 800f9fa:	185b      	adds	r3, r3, r1
 800f9fc:	1419      	asrs	r1, r3, #16
 800f9fe:	b292      	uxth	r2, r2
 800fa00:	041b      	lsls	r3, r3, #16
 800fa02:	431a      	orrs	r2, r3
 800fa04:	9b04      	ldr	r3, [sp, #16]
 800fa06:	9106      	str	r1, [sp, #24]
 800fa08:	c004      	stmia	r0!, {r2}
 800fa0a:	4563      	cmp	r3, ip
 800fa0c:	d2dc      	bcs.n	800f9c8 <quorem+0x44>
 800fa0e:	682b      	ldr	r3, [r5, #0]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d02d      	beq.n	800fa70 <quorem+0xec>
 800fa14:	9905      	ldr	r1, [sp, #20]
 800fa16:	0038      	movs	r0, r7
 800fa18:	f001 fcac 	bl	8011374 <__mcmp>
 800fa1c:	2800      	cmp	r0, #0
 800fa1e:	db1f      	blt.n	800fa60 <quorem+0xdc>
 800fa20:	2500      	movs	r5, #0
 800fa22:	9b01      	ldr	r3, [sp, #4]
 800fa24:	9802      	ldr	r0, [sp, #8]
 800fa26:	3301      	adds	r3, #1
 800fa28:	9903      	ldr	r1, [sp, #12]
 800fa2a:	9301      	str	r3, [sp, #4]
 800fa2c:	6802      	ldr	r2, [r0, #0]
 800fa2e:	c908      	ldmia	r1!, {r3}
 800fa30:	b292      	uxth	r2, r2
 800fa32:	1955      	adds	r5, r2, r5
 800fa34:	b29a      	uxth	r2, r3
 800fa36:	1aaa      	subs	r2, r5, r2
 800fa38:	6805      	ldr	r5, [r0, #0]
 800fa3a:	0c1b      	lsrs	r3, r3, #16
 800fa3c:	0c2d      	lsrs	r5, r5, #16
 800fa3e:	1aeb      	subs	r3, r5, r3
 800fa40:	1415      	asrs	r5, r2, #16
 800fa42:	195b      	adds	r3, r3, r5
 800fa44:	141d      	asrs	r5, r3, #16
 800fa46:	b292      	uxth	r2, r2
 800fa48:	041b      	lsls	r3, r3, #16
 800fa4a:	4313      	orrs	r3, r2
 800fa4c:	c008      	stmia	r0!, {r3}
 800fa4e:	9b04      	ldr	r3, [sp, #16]
 800fa50:	428b      	cmp	r3, r1
 800fa52:	d2eb      	bcs.n	800fa2c <quorem+0xa8>
 800fa54:	9a02      	ldr	r2, [sp, #8]
 800fa56:	00a3      	lsls	r3, r4, #2
 800fa58:	18d3      	adds	r3, r2, r3
 800fa5a:	681a      	ldr	r2, [r3, #0]
 800fa5c:	2a00      	cmp	r2, #0
 800fa5e:	d011      	beq.n	800fa84 <quorem+0x100>
 800fa60:	9e01      	ldr	r6, [sp, #4]
 800fa62:	0030      	movs	r0, r6
 800fa64:	b009      	add	sp, #36	; 0x24
 800fa66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa68:	682b      	ldr	r3, [r5, #0]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d104      	bne.n	800fa78 <quorem+0xf4>
 800fa6e:	3c01      	subs	r4, #1
 800fa70:	9b02      	ldr	r3, [sp, #8]
 800fa72:	3d04      	subs	r5, #4
 800fa74:	42ab      	cmp	r3, r5
 800fa76:	d3f7      	bcc.n	800fa68 <quorem+0xe4>
 800fa78:	613c      	str	r4, [r7, #16]
 800fa7a:	e7cb      	b.n	800fa14 <quorem+0x90>
 800fa7c:	681a      	ldr	r2, [r3, #0]
 800fa7e:	2a00      	cmp	r2, #0
 800fa80:	d104      	bne.n	800fa8c <quorem+0x108>
 800fa82:	3c01      	subs	r4, #1
 800fa84:	9a02      	ldr	r2, [sp, #8]
 800fa86:	3b04      	subs	r3, #4
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	d3f7      	bcc.n	800fa7c <quorem+0xf8>
 800fa8c:	613c      	str	r4, [r7, #16]
 800fa8e:	e7e7      	b.n	800fa60 <quorem+0xdc>

0800fa90 <_dtoa_r>:
 800fa90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa92:	0016      	movs	r6, r2
 800fa94:	001f      	movs	r7, r3
 800fa96:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800fa98:	b09b      	sub	sp, #108	; 0x6c
 800fa9a:	9002      	str	r0, [sp, #8]
 800fa9c:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800fa9e:	9606      	str	r6, [sp, #24]
 800faa0:	9707      	str	r7, [sp, #28]
 800faa2:	2c00      	cmp	r4, #0
 800faa4:	d108      	bne.n	800fab8 <_dtoa_r+0x28>
 800faa6:	2010      	movs	r0, #16
 800faa8:	f001 f9ea 	bl	8010e80 <malloc>
 800faac:	9b02      	ldr	r3, [sp, #8]
 800faae:	6258      	str	r0, [r3, #36]	; 0x24
 800fab0:	6044      	str	r4, [r0, #4]
 800fab2:	6084      	str	r4, [r0, #8]
 800fab4:	6004      	str	r4, [r0, #0]
 800fab6:	60c4      	str	r4, [r0, #12]
 800fab8:	9b02      	ldr	r3, [sp, #8]
 800faba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fabc:	6819      	ldr	r1, [r3, #0]
 800fabe:	2900      	cmp	r1, #0
 800fac0:	d00b      	beq.n	800fada <_dtoa_r+0x4a>
 800fac2:	685a      	ldr	r2, [r3, #4]
 800fac4:	2301      	movs	r3, #1
 800fac6:	4093      	lsls	r3, r2
 800fac8:	604a      	str	r2, [r1, #4]
 800faca:	608b      	str	r3, [r1, #8]
 800facc:	9802      	ldr	r0, [sp, #8]
 800face:	f001 fa36 	bl	8010f3e <_Bfree>
 800fad2:	2200      	movs	r2, #0
 800fad4:	9b02      	ldr	r3, [sp, #8]
 800fad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fad8:	601a      	str	r2, [r3, #0]
 800fada:	2f00      	cmp	r7, #0
 800fadc:	da20      	bge.n	800fb20 <_dtoa_r+0x90>
 800fade:	2301      	movs	r3, #1
 800fae0:	602b      	str	r3, [r5, #0]
 800fae2:	007b      	lsls	r3, r7, #1
 800fae4:	085b      	lsrs	r3, r3, #1
 800fae6:	9307      	str	r3, [sp, #28]
 800fae8:	9c07      	ldr	r4, [sp, #28]
 800faea:	4bb2      	ldr	r3, [pc, #712]	; (800fdb4 <_dtoa_r+0x324>)
 800faec:	0022      	movs	r2, r4
 800faee:	9317      	str	r3, [sp, #92]	; 0x5c
 800faf0:	401a      	ands	r2, r3
 800faf2:	429a      	cmp	r2, r3
 800faf4:	d117      	bne.n	800fb26 <_dtoa_r+0x96>
 800faf6:	4bb0      	ldr	r3, [pc, #704]	; (800fdb8 <_dtoa_r+0x328>)
 800faf8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800fafa:	6013      	str	r3, [r2, #0]
 800fafc:	9b06      	ldr	r3, [sp, #24]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d103      	bne.n	800fb0a <_dtoa_r+0x7a>
 800fb02:	0324      	lsls	r4, r4, #12
 800fb04:	d101      	bne.n	800fb0a <_dtoa_r+0x7a>
 800fb06:	f000 fd87 	bl	8010618 <_dtoa_r+0xb88>
 800fb0a:	4bac      	ldr	r3, [pc, #688]	; (800fdbc <_dtoa_r+0x32c>)
 800fb0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fb0e:	9308      	str	r3, [sp, #32]
 800fb10:	2a00      	cmp	r2, #0
 800fb12:	d002      	beq.n	800fb1a <_dtoa_r+0x8a>
 800fb14:	4baa      	ldr	r3, [pc, #680]	; (800fdc0 <_dtoa_r+0x330>)
 800fb16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fb18:	6013      	str	r3, [r2, #0]
 800fb1a:	9808      	ldr	r0, [sp, #32]
 800fb1c:	b01b      	add	sp, #108	; 0x6c
 800fb1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb20:	2300      	movs	r3, #0
 800fb22:	602b      	str	r3, [r5, #0]
 800fb24:	e7e0      	b.n	800fae8 <_dtoa_r+0x58>
 800fb26:	9e06      	ldr	r6, [sp, #24]
 800fb28:	9f07      	ldr	r7, [sp, #28]
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	0030      	movs	r0, r6
 800fb30:	0039      	movs	r1, r7
 800fb32:	f7f5 fc85 	bl	8005440 <__aeabi_dcmpeq>
 800fb36:	1e05      	subs	r5, r0, #0
 800fb38:	d00b      	beq.n	800fb52 <_dtoa_r+0xc2>
 800fb3a:	2301      	movs	r3, #1
 800fb3c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800fb3e:	6013      	str	r3, [r2, #0]
 800fb40:	4ba0      	ldr	r3, [pc, #640]	; (800fdc4 <_dtoa_r+0x334>)
 800fb42:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fb44:	9308      	str	r3, [sp, #32]
 800fb46:	2a00      	cmp	r2, #0
 800fb48:	d0e7      	beq.n	800fb1a <_dtoa_r+0x8a>
 800fb4a:	4a9f      	ldr	r2, [pc, #636]	; (800fdc8 <_dtoa_r+0x338>)
 800fb4c:	9924      	ldr	r1, [sp, #144]	; 0x90
 800fb4e:	600a      	str	r2, [r1, #0]
 800fb50:	e7e3      	b.n	800fb1a <_dtoa_r+0x8a>
 800fb52:	ab18      	add	r3, sp, #96	; 0x60
 800fb54:	9301      	str	r3, [sp, #4]
 800fb56:	ab19      	add	r3, sp, #100	; 0x64
 800fb58:	9300      	str	r3, [sp, #0]
 800fb5a:	0032      	movs	r2, r6
 800fb5c:	003b      	movs	r3, r7
 800fb5e:	9802      	ldr	r0, [sp, #8]
 800fb60:	f001 fcf8 	bl	8011554 <__d2b>
 800fb64:	0063      	lsls	r3, r4, #1
 800fb66:	9003      	str	r0, [sp, #12]
 800fb68:	0d5b      	lsrs	r3, r3, #21
 800fb6a:	d074      	beq.n	800fc56 <_dtoa_r+0x1c6>
 800fb6c:	033a      	lsls	r2, r7, #12
 800fb6e:	4c97      	ldr	r4, [pc, #604]	; (800fdcc <_dtoa_r+0x33c>)
 800fb70:	0b12      	lsrs	r2, r2, #12
 800fb72:	4314      	orrs	r4, r2
 800fb74:	0021      	movs	r1, r4
 800fb76:	4a96      	ldr	r2, [pc, #600]	; (800fdd0 <_dtoa_r+0x340>)
 800fb78:	0030      	movs	r0, r6
 800fb7a:	9516      	str	r5, [sp, #88]	; 0x58
 800fb7c:	189e      	adds	r6, r3, r2
 800fb7e:	2200      	movs	r2, #0
 800fb80:	4b94      	ldr	r3, [pc, #592]	; (800fdd4 <_dtoa_r+0x344>)
 800fb82:	f7f7 fa6d 	bl	8007060 <__aeabi_dsub>
 800fb86:	4a94      	ldr	r2, [pc, #592]	; (800fdd8 <_dtoa_r+0x348>)
 800fb88:	4b94      	ldr	r3, [pc, #592]	; (800fddc <_dtoa_r+0x34c>)
 800fb8a:	f7f6 fff7 	bl	8006b7c <__aeabi_dmul>
 800fb8e:	4a94      	ldr	r2, [pc, #592]	; (800fde0 <_dtoa_r+0x350>)
 800fb90:	4b94      	ldr	r3, [pc, #592]	; (800fde4 <_dtoa_r+0x354>)
 800fb92:	f7f6 f8cd 	bl	8005d30 <__aeabi_dadd>
 800fb96:	0004      	movs	r4, r0
 800fb98:	0030      	movs	r0, r6
 800fb9a:	000d      	movs	r5, r1
 800fb9c:	f7f7 fdfa 	bl	8007794 <__aeabi_i2d>
 800fba0:	4a91      	ldr	r2, [pc, #580]	; (800fde8 <_dtoa_r+0x358>)
 800fba2:	4b92      	ldr	r3, [pc, #584]	; (800fdec <_dtoa_r+0x35c>)
 800fba4:	f7f6 ffea 	bl	8006b7c <__aeabi_dmul>
 800fba8:	0002      	movs	r2, r0
 800fbaa:	000b      	movs	r3, r1
 800fbac:	0020      	movs	r0, r4
 800fbae:	0029      	movs	r1, r5
 800fbb0:	f7f6 f8be 	bl	8005d30 <__aeabi_dadd>
 800fbb4:	0004      	movs	r4, r0
 800fbb6:	000d      	movs	r5, r1
 800fbb8:	f7f7 fdb6 	bl	8007728 <__aeabi_d2iz>
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	0007      	movs	r7, r0
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	0020      	movs	r0, r4
 800fbc4:	0029      	movs	r1, r5
 800fbc6:	f7f5 fc41 	bl	800544c <__aeabi_dcmplt>
 800fbca:	2800      	cmp	r0, #0
 800fbcc:	d009      	beq.n	800fbe2 <_dtoa_r+0x152>
 800fbce:	0038      	movs	r0, r7
 800fbd0:	f7f7 fde0 	bl	8007794 <__aeabi_i2d>
 800fbd4:	002b      	movs	r3, r5
 800fbd6:	0022      	movs	r2, r4
 800fbd8:	f7f5 fc32 	bl	8005440 <__aeabi_dcmpeq>
 800fbdc:	4243      	negs	r3, r0
 800fbde:	4158      	adcs	r0, r3
 800fbe0:	1a3f      	subs	r7, r7, r0
 800fbe2:	2301      	movs	r3, #1
 800fbe4:	9314      	str	r3, [sp, #80]	; 0x50
 800fbe6:	2f16      	cmp	r7, #22
 800fbe8:	d80d      	bhi.n	800fc06 <_dtoa_r+0x176>
 800fbea:	4981      	ldr	r1, [pc, #516]	; (800fdf0 <_dtoa_r+0x360>)
 800fbec:	00fb      	lsls	r3, r7, #3
 800fbee:	18c9      	adds	r1, r1, r3
 800fbf0:	6808      	ldr	r0, [r1, #0]
 800fbf2:	6849      	ldr	r1, [r1, #4]
 800fbf4:	9a06      	ldr	r2, [sp, #24]
 800fbf6:	9b07      	ldr	r3, [sp, #28]
 800fbf8:	f7f5 fc3c 	bl	8005474 <__aeabi_dcmpgt>
 800fbfc:	2800      	cmp	r0, #0
 800fbfe:	d046      	beq.n	800fc8e <_dtoa_r+0x1fe>
 800fc00:	2300      	movs	r3, #0
 800fc02:	3f01      	subs	r7, #1
 800fc04:	9314      	str	r3, [sp, #80]	; 0x50
 800fc06:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800fc08:	1b9e      	subs	r6, r3, r6
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	930a      	str	r3, [sp, #40]	; 0x28
 800fc0e:	0033      	movs	r3, r6
 800fc10:	3b01      	subs	r3, #1
 800fc12:	930b      	str	r3, [sp, #44]	; 0x2c
 800fc14:	d504      	bpl.n	800fc20 <_dtoa_r+0x190>
 800fc16:	2301      	movs	r3, #1
 800fc18:	1b9b      	subs	r3, r3, r6
 800fc1a:	930a      	str	r3, [sp, #40]	; 0x28
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	930b      	str	r3, [sp, #44]	; 0x2c
 800fc20:	2f00      	cmp	r7, #0
 800fc22:	db36      	blt.n	800fc92 <_dtoa_r+0x202>
 800fc24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc26:	9711      	str	r7, [sp, #68]	; 0x44
 800fc28:	19db      	adds	r3, r3, r7
 800fc2a:	930b      	str	r3, [sp, #44]	; 0x2c
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	9304      	str	r3, [sp, #16]
 800fc30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800fc32:	2401      	movs	r4, #1
 800fc34:	2b09      	cmp	r3, #9
 800fc36:	d900      	bls.n	800fc3a <_dtoa_r+0x1aa>
 800fc38:	e084      	b.n	800fd44 <_dtoa_r+0x2b4>
 800fc3a:	2b05      	cmp	r3, #5
 800fc3c:	dd02      	ble.n	800fc44 <_dtoa_r+0x1b4>
 800fc3e:	2400      	movs	r4, #0
 800fc40:	3b04      	subs	r3, #4
 800fc42:	9320      	str	r3, [sp, #128]	; 0x80
 800fc44:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800fc46:	1e98      	subs	r0, r3, #2
 800fc48:	2803      	cmp	r0, #3
 800fc4a:	d900      	bls.n	800fc4e <_dtoa_r+0x1be>
 800fc4c:	e084      	b.n	800fd58 <_dtoa_r+0x2c8>
 800fc4e:	f7f5 fa67 	bl	8005120 <__gnu_thumb1_case_uqi>
 800fc52:	7775      	.short	0x7775
 800fc54:	6a28      	.short	0x6a28
 800fc56:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800fc58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fc5a:	189e      	adds	r6, r3, r2
 800fc5c:	4b65      	ldr	r3, [pc, #404]	; (800fdf4 <_dtoa_r+0x364>)
 800fc5e:	18f2      	adds	r2, r6, r3
 800fc60:	2a20      	cmp	r2, #32
 800fc62:	dd0f      	ble.n	800fc84 <_dtoa_r+0x1f4>
 800fc64:	2340      	movs	r3, #64	; 0x40
 800fc66:	1a9b      	subs	r3, r3, r2
 800fc68:	409c      	lsls	r4, r3
 800fc6a:	4b63      	ldr	r3, [pc, #396]	; (800fdf8 <_dtoa_r+0x368>)
 800fc6c:	9806      	ldr	r0, [sp, #24]
 800fc6e:	18f3      	adds	r3, r6, r3
 800fc70:	40d8      	lsrs	r0, r3
 800fc72:	4320      	orrs	r0, r4
 800fc74:	f7f7 fdc8 	bl	8007808 <__aeabi_ui2d>
 800fc78:	2301      	movs	r3, #1
 800fc7a:	4c60      	ldr	r4, [pc, #384]	; (800fdfc <_dtoa_r+0x36c>)
 800fc7c:	3e01      	subs	r6, #1
 800fc7e:	1909      	adds	r1, r1, r4
 800fc80:	9316      	str	r3, [sp, #88]	; 0x58
 800fc82:	e77c      	b.n	800fb7e <_dtoa_r+0xee>
 800fc84:	2320      	movs	r3, #32
 800fc86:	9806      	ldr	r0, [sp, #24]
 800fc88:	1a9b      	subs	r3, r3, r2
 800fc8a:	4098      	lsls	r0, r3
 800fc8c:	e7f2      	b.n	800fc74 <_dtoa_r+0x1e4>
 800fc8e:	9014      	str	r0, [sp, #80]	; 0x50
 800fc90:	e7b9      	b.n	800fc06 <_dtoa_r+0x176>
 800fc92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc94:	1bdb      	subs	r3, r3, r7
 800fc96:	930a      	str	r3, [sp, #40]	; 0x28
 800fc98:	427b      	negs	r3, r7
 800fc9a:	9304      	str	r3, [sp, #16]
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	9311      	str	r3, [sp, #68]	; 0x44
 800fca0:	e7c6      	b.n	800fc30 <_dtoa_r+0x1a0>
 800fca2:	2301      	movs	r3, #1
 800fca4:	930d      	str	r3, [sp, #52]	; 0x34
 800fca6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	dd59      	ble.n	800fd60 <_dtoa_r+0x2d0>
 800fcac:	930c      	str	r3, [sp, #48]	; 0x30
 800fcae:	9309      	str	r3, [sp, #36]	; 0x24
 800fcb0:	9a02      	ldr	r2, [sp, #8]
 800fcb2:	6a55      	ldr	r5, [r2, #36]	; 0x24
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	606a      	str	r2, [r5, #4]
 800fcb8:	3204      	adds	r2, #4
 800fcba:	0010      	movs	r0, r2
 800fcbc:	3014      	adds	r0, #20
 800fcbe:	6869      	ldr	r1, [r5, #4]
 800fcc0:	4298      	cmp	r0, r3
 800fcc2:	d952      	bls.n	800fd6a <_dtoa_r+0x2da>
 800fcc4:	9802      	ldr	r0, [sp, #8]
 800fcc6:	f001 f902 	bl	8010ece <_Balloc>
 800fcca:	9b02      	ldr	r3, [sp, #8]
 800fccc:	6028      	str	r0, [r5, #0]
 800fcce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	9308      	str	r3, [sp, #32]
 800fcd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcd6:	2b0e      	cmp	r3, #14
 800fcd8:	d900      	bls.n	800fcdc <_dtoa_r+0x24c>
 800fcda:	e10a      	b.n	800fef2 <_dtoa_r+0x462>
 800fcdc:	2c00      	cmp	r4, #0
 800fcde:	d100      	bne.n	800fce2 <_dtoa_r+0x252>
 800fce0:	e107      	b.n	800fef2 <_dtoa_r+0x462>
 800fce2:	9b06      	ldr	r3, [sp, #24]
 800fce4:	9c07      	ldr	r4, [sp, #28]
 800fce6:	9312      	str	r3, [sp, #72]	; 0x48
 800fce8:	9413      	str	r4, [sp, #76]	; 0x4c
 800fcea:	2f00      	cmp	r7, #0
 800fcec:	dc00      	bgt.n	800fcf0 <_dtoa_r+0x260>
 800fcee:	e089      	b.n	800fe04 <_dtoa_r+0x374>
 800fcf0:	210f      	movs	r1, #15
 800fcf2:	003a      	movs	r2, r7
 800fcf4:	4b3e      	ldr	r3, [pc, #248]	; (800fdf0 <_dtoa_r+0x360>)
 800fcf6:	400a      	ands	r2, r1
 800fcf8:	00d2      	lsls	r2, r2, #3
 800fcfa:	189b      	adds	r3, r3, r2
 800fcfc:	681d      	ldr	r5, [r3, #0]
 800fcfe:	685e      	ldr	r6, [r3, #4]
 800fd00:	2302      	movs	r3, #2
 800fd02:	113c      	asrs	r4, r7, #4
 800fd04:	930e      	str	r3, [sp, #56]	; 0x38
 800fd06:	06e3      	lsls	r3, r4, #27
 800fd08:	d50b      	bpl.n	800fd22 <_dtoa_r+0x292>
 800fd0a:	4b3d      	ldr	r3, [pc, #244]	; (800fe00 <_dtoa_r+0x370>)
 800fd0c:	400c      	ands	r4, r1
 800fd0e:	6a1a      	ldr	r2, [r3, #32]
 800fd10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd12:	9812      	ldr	r0, [sp, #72]	; 0x48
 800fd14:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800fd16:	f7f6 fb27 	bl	8006368 <__aeabi_ddiv>
 800fd1a:	2303      	movs	r3, #3
 800fd1c:	9006      	str	r0, [sp, #24]
 800fd1e:	9107      	str	r1, [sp, #28]
 800fd20:	930e      	str	r3, [sp, #56]	; 0x38
 800fd22:	2300      	movs	r3, #0
 800fd24:	e03a      	b.n	800fd9c <_dtoa_r+0x30c>
 800fd26:	2301      	movs	r3, #1
 800fd28:	930d      	str	r3, [sp, #52]	; 0x34
 800fd2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd2c:	18fb      	adds	r3, r7, r3
 800fd2e:	930c      	str	r3, [sp, #48]	; 0x30
 800fd30:	3301      	adds	r3, #1
 800fd32:	9309      	str	r3, [sp, #36]	; 0x24
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	dcbb      	bgt.n	800fcb0 <_dtoa_r+0x220>
 800fd38:	2301      	movs	r3, #1
 800fd3a:	e7b9      	b.n	800fcb0 <_dtoa_r+0x220>
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	e7b1      	b.n	800fca4 <_dtoa_r+0x214>
 800fd40:	2300      	movs	r3, #0
 800fd42:	e7f1      	b.n	800fd28 <_dtoa_r+0x298>
 800fd44:	2300      	movs	r3, #0
 800fd46:	940d      	str	r4, [sp, #52]	; 0x34
 800fd48:	9320      	str	r3, [sp, #128]	; 0x80
 800fd4a:	3b01      	subs	r3, #1
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	930c      	str	r3, [sp, #48]	; 0x30
 800fd50:	9309      	str	r3, [sp, #36]	; 0x24
 800fd52:	3313      	adds	r3, #19
 800fd54:	9221      	str	r2, [sp, #132]	; 0x84
 800fd56:	e7ab      	b.n	800fcb0 <_dtoa_r+0x220>
 800fd58:	2301      	movs	r3, #1
 800fd5a:	930d      	str	r3, [sp, #52]	; 0x34
 800fd5c:	3b02      	subs	r3, #2
 800fd5e:	e7f5      	b.n	800fd4c <_dtoa_r+0x2bc>
 800fd60:	2301      	movs	r3, #1
 800fd62:	930c      	str	r3, [sp, #48]	; 0x30
 800fd64:	9309      	str	r3, [sp, #36]	; 0x24
 800fd66:	001a      	movs	r2, r3
 800fd68:	e7f4      	b.n	800fd54 <_dtoa_r+0x2c4>
 800fd6a:	3101      	adds	r1, #1
 800fd6c:	6069      	str	r1, [r5, #4]
 800fd6e:	0052      	lsls	r2, r2, #1
 800fd70:	e7a3      	b.n	800fcba <_dtoa_r+0x22a>
 800fd72:	2301      	movs	r3, #1
 800fd74:	421c      	tst	r4, r3
 800fd76:	d00e      	beq.n	800fd96 <_dtoa_r+0x306>
 800fd78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fd7a:	4a21      	ldr	r2, [pc, #132]	; (800fe00 <_dtoa_r+0x370>)
 800fd7c:	3301      	adds	r3, #1
 800fd7e:	930e      	str	r3, [sp, #56]	; 0x38
 800fd80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fd82:	0028      	movs	r0, r5
 800fd84:	00db      	lsls	r3, r3, #3
 800fd86:	189b      	adds	r3, r3, r2
 800fd88:	0031      	movs	r1, r6
 800fd8a:	681a      	ldr	r2, [r3, #0]
 800fd8c:	685b      	ldr	r3, [r3, #4]
 800fd8e:	f7f6 fef5 	bl	8006b7c <__aeabi_dmul>
 800fd92:	0005      	movs	r5, r0
 800fd94:	000e      	movs	r6, r1
 800fd96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fd98:	1064      	asrs	r4, r4, #1
 800fd9a:	3301      	adds	r3, #1
 800fd9c:	9310      	str	r3, [sp, #64]	; 0x40
 800fd9e:	2c00      	cmp	r4, #0
 800fda0:	d1e7      	bne.n	800fd72 <_dtoa_r+0x2e2>
 800fda2:	9806      	ldr	r0, [sp, #24]
 800fda4:	9907      	ldr	r1, [sp, #28]
 800fda6:	002a      	movs	r2, r5
 800fda8:	0033      	movs	r3, r6
 800fdaa:	f7f6 fadd 	bl	8006368 <__aeabi_ddiv>
 800fdae:	9006      	str	r0, [sp, #24]
 800fdb0:	9107      	str	r1, [sp, #28]
 800fdb2:	e042      	b.n	800fe3a <_dtoa_r+0x3aa>
 800fdb4:	7ff00000 	.word	0x7ff00000
 800fdb8:	0000270f 	.word	0x0000270f
 800fdbc:	08012c41 	.word	0x08012c41
 800fdc0:	08012c44 	.word	0x08012c44
 800fdc4:	08012bb8 	.word	0x08012bb8
 800fdc8:	08012bb9 	.word	0x08012bb9
 800fdcc:	3ff00000 	.word	0x3ff00000
 800fdd0:	fffffc01 	.word	0xfffffc01
 800fdd4:	3ff80000 	.word	0x3ff80000
 800fdd8:	636f4361 	.word	0x636f4361
 800fddc:	3fd287a7 	.word	0x3fd287a7
 800fde0:	8b60c8b3 	.word	0x8b60c8b3
 800fde4:	3fc68a28 	.word	0x3fc68a28
 800fde8:	509f79fb 	.word	0x509f79fb
 800fdec:	3fd34413 	.word	0x3fd34413
 800fdf0:	08012ce0 	.word	0x08012ce0
 800fdf4:	00000432 	.word	0x00000432
 800fdf8:	00000412 	.word	0x00000412
 800fdfc:	fe100000 	.word	0xfe100000
 800fe00:	08012cb8 	.word	0x08012cb8
 800fe04:	2302      	movs	r3, #2
 800fe06:	930e      	str	r3, [sp, #56]	; 0x38
 800fe08:	2f00      	cmp	r7, #0
 800fe0a:	d016      	beq.n	800fe3a <_dtoa_r+0x3aa>
 800fe0c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800fe0e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800fe10:	427c      	negs	r4, r7
 800fe12:	330d      	adds	r3, #13
 800fe14:	4023      	ands	r3, r4
 800fe16:	4ace      	ldr	r2, [pc, #824]	; (8010150 <_dtoa_r+0x6c0>)
 800fe18:	00db      	lsls	r3, r3, #3
 800fe1a:	18d3      	adds	r3, r2, r3
 800fe1c:	681a      	ldr	r2, [r3, #0]
 800fe1e:	685b      	ldr	r3, [r3, #4]
 800fe20:	f7f6 feac 	bl	8006b7c <__aeabi_dmul>
 800fe24:	2300      	movs	r3, #0
 800fe26:	2601      	movs	r6, #1
 800fe28:	001d      	movs	r5, r3
 800fe2a:	9006      	str	r0, [sp, #24]
 800fe2c:	9107      	str	r1, [sp, #28]
 800fe2e:	1124      	asrs	r4, r4, #4
 800fe30:	2c00      	cmp	r4, #0
 800fe32:	d000      	beq.n	800fe36 <_dtoa_r+0x3a6>
 800fe34:	e08c      	b.n	800ff50 <_dtoa_r+0x4c0>
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d1b9      	bne.n	800fdae <_dtoa_r+0x31e>
 800fe3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d100      	bne.n	800fe42 <_dtoa_r+0x3b2>
 800fe40:	e096      	b.n	800ff70 <_dtoa_r+0x4e0>
 800fe42:	9c06      	ldr	r4, [sp, #24]
 800fe44:	9d07      	ldr	r5, [sp, #28]
 800fe46:	2200      	movs	r2, #0
 800fe48:	4bc2      	ldr	r3, [pc, #776]	; (8010154 <_dtoa_r+0x6c4>)
 800fe4a:	0020      	movs	r0, r4
 800fe4c:	0029      	movs	r1, r5
 800fe4e:	f7f5 fafd 	bl	800544c <__aeabi_dcmplt>
 800fe52:	2800      	cmp	r0, #0
 800fe54:	d100      	bne.n	800fe58 <_dtoa_r+0x3c8>
 800fe56:	e08b      	b.n	800ff70 <_dtoa_r+0x4e0>
 800fe58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d100      	bne.n	800fe60 <_dtoa_r+0x3d0>
 800fe5e:	e087      	b.n	800ff70 <_dtoa_r+0x4e0>
 800fe60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	dd41      	ble.n	800feea <_dtoa_r+0x45a>
 800fe66:	4bbc      	ldr	r3, [pc, #752]	; (8010158 <_dtoa_r+0x6c8>)
 800fe68:	2200      	movs	r2, #0
 800fe6a:	0020      	movs	r0, r4
 800fe6c:	0029      	movs	r1, r5
 800fe6e:	f7f6 fe85 	bl	8006b7c <__aeabi_dmul>
 800fe72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fe74:	9006      	str	r0, [sp, #24]
 800fe76:	9107      	str	r1, [sp, #28]
 800fe78:	3301      	adds	r3, #1
 800fe7a:	930e      	str	r3, [sp, #56]	; 0x38
 800fe7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe7e:	1e7e      	subs	r6, r7, #1
 800fe80:	980e      	ldr	r0, [sp, #56]	; 0x38
 800fe82:	9310      	str	r3, [sp, #64]	; 0x40
 800fe84:	f7f7 fc86 	bl	8007794 <__aeabi_i2d>
 800fe88:	9a06      	ldr	r2, [sp, #24]
 800fe8a:	9b07      	ldr	r3, [sp, #28]
 800fe8c:	f7f6 fe76 	bl	8006b7c <__aeabi_dmul>
 800fe90:	2200      	movs	r2, #0
 800fe92:	4bb2      	ldr	r3, [pc, #712]	; (801015c <_dtoa_r+0x6cc>)
 800fe94:	f7f5 ff4c 	bl	8005d30 <__aeabi_dadd>
 800fe98:	4ab1      	ldr	r2, [pc, #708]	; (8010160 <_dtoa_r+0x6d0>)
 800fe9a:	900e      	str	r0, [sp, #56]	; 0x38
 800fe9c:	910f      	str	r1, [sp, #60]	; 0x3c
 800fe9e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800fea0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fea2:	4694      	mov	ip, r2
 800fea4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fea6:	4463      	add	r3, ip
 800fea8:	9315      	str	r3, [sp, #84]	; 0x54
 800feaa:	001d      	movs	r5, r3
 800feac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d161      	bne.n	800ff76 <_dtoa_r+0x4e6>
 800feb2:	9806      	ldr	r0, [sp, #24]
 800feb4:	9907      	ldr	r1, [sp, #28]
 800feb6:	2200      	movs	r2, #0
 800feb8:	4baa      	ldr	r3, [pc, #680]	; (8010164 <_dtoa_r+0x6d4>)
 800feba:	f7f7 f8d1 	bl	8007060 <__aeabi_dsub>
 800febe:	0022      	movs	r2, r4
 800fec0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fec2:	9006      	str	r0, [sp, #24]
 800fec4:	9107      	str	r1, [sp, #28]
 800fec6:	f7f5 fad5 	bl	8005474 <__aeabi_dcmpgt>
 800feca:	2800      	cmp	r0, #0
 800fecc:	d000      	beq.n	800fed0 <_dtoa_r+0x440>
 800fece:	e2a8      	b.n	8010422 <_dtoa_r+0x992>
 800fed0:	48a5      	ldr	r0, [pc, #660]	; (8010168 <_dtoa_r+0x6d8>)
 800fed2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fed4:	4684      	mov	ip, r0
 800fed6:	4461      	add	r1, ip
 800fed8:	000b      	movs	r3, r1
 800feda:	9806      	ldr	r0, [sp, #24]
 800fedc:	9907      	ldr	r1, [sp, #28]
 800fede:	0022      	movs	r2, r4
 800fee0:	f7f5 fab4 	bl	800544c <__aeabi_dcmplt>
 800fee4:	2800      	cmp	r0, #0
 800fee6:	d000      	beq.n	800feea <_dtoa_r+0x45a>
 800fee8:	e295      	b.n	8010416 <_dtoa_r+0x986>
 800feea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800feec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800feee:	9306      	str	r3, [sp, #24]
 800fef0:	9407      	str	r4, [sp, #28]
 800fef2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	da00      	bge.n	800fefa <_dtoa_r+0x46a>
 800fef8:	e15c      	b.n	80101b4 <_dtoa_r+0x724>
 800fefa:	2f0e      	cmp	r7, #14
 800fefc:	dd00      	ble.n	800ff00 <_dtoa_r+0x470>
 800fefe:	e159      	b.n	80101b4 <_dtoa_r+0x724>
 800ff00:	4b93      	ldr	r3, [pc, #588]	; (8010150 <_dtoa_r+0x6c0>)
 800ff02:	00fa      	lsls	r2, r7, #3
 800ff04:	189b      	adds	r3, r3, r2
 800ff06:	685c      	ldr	r4, [r3, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	9304      	str	r3, [sp, #16]
 800ff0c:	9405      	str	r4, [sp, #20]
 800ff0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	db00      	blt.n	800ff16 <_dtoa_r+0x486>
 800ff14:	e0d8      	b.n	80100c8 <_dtoa_r+0x638>
 800ff16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	dd00      	ble.n	800ff1e <_dtoa_r+0x48e>
 800ff1c:	e0d4      	b.n	80100c8 <_dtoa_r+0x638>
 800ff1e:	d000      	beq.n	800ff22 <_dtoa_r+0x492>
 800ff20:	e27d      	b.n	801041e <_dtoa_r+0x98e>
 800ff22:	9804      	ldr	r0, [sp, #16]
 800ff24:	9905      	ldr	r1, [sp, #20]
 800ff26:	2200      	movs	r2, #0
 800ff28:	4b8e      	ldr	r3, [pc, #568]	; (8010164 <_dtoa_r+0x6d4>)
 800ff2a:	f7f6 fe27 	bl	8006b7c <__aeabi_dmul>
 800ff2e:	9a06      	ldr	r2, [sp, #24]
 800ff30:	9b07      	ldr	r3, [sp, #28]
 800ff32:	f7f5 faa9 	bl	8005488 <__aeabi_dcmpge>
 800ff36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff38:	9304      	str	r3, [sp, #16]
 800ff3a:	001e      	movs	r6, r3
 800ff3c:	2800      	cmp	r0, #0
 800ff3e:	d000      	beq.n	800ff42 <_dtoa_r+0x4b2>
 800ff40:	e24f      	b.n	80103e2 <_dtoa_r+0x952>
 800ff42:	9b08      	ldr	r3, [sp, #32]
 800ff44:	9a08      	ldr	r2, [sp, #32]
 800ff46:	1c5d      	adds	r5, r3, #1
 800ff48:	2331      	movs	r3, #49	; 0x31
 800ff4a:	3701      	adds	r7, #1
 800ff4c:	7013      	strb	r3, [r2, #0]
 800ff4e:	e24b      	b.n	80103e8 <_dtoa_r+0x958>
 800ff50:	4234      	tst	r4, r6
 800ff52:	d00a      	beq.n	800ff6a <_dtoa_r+0x4da>
 800ff54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ff56:	4a85      	ldr	r2, [pc, #532]	; (801016c <_dtoa_r+0x6dc>)
 800ff58:	3301      	adds	r3, #1
 800ff5a:	930e      	str	r3, [sp, #56]	; 0x38
 800ff5c:	00eb      	lsls	r3, r5, #3
 800ff5e:	189b      	adds	r3, r3, r2
 800ff60:	681a      	ldr	r2, [r3, #0]
 800ff62:	685b      	ldr	r3, [r3, #4]
 800ff64:	f7f6 fe0a 	bl	8006b7c <__aeabi_dmul>
 800ff68:	0033      	movs	r3, r6
 800ff6a:	1064      	asrs	r4, r4, #1
 800ff6c:	3501      	adds	r5, #1
 800ff6e:	e75f      	b.n	800fe30 <_dtoa_r+0x3a0>
 800ff70:	003e      	movs	r6, r7
 800ff72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff74:	e784      	b.n	800fe80 <_dtoa_r+0x3f0>
 800ff76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ff78:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ff7a:	1e5a      	subs	r2, r3, #1
 800ff7c:	4b74      	ldr	r3, [pc, #464]	; (8010150 <_dtoa_r+0x6c0>)
 800ff7e:	00d2      	lsls	r2, r2, #3
 800ff80:	189b      	adds	r3, r3, r2
 800ff82:	681a      	ldr	r2, [r3, #0]
 800ff84:	685b      	ldr	r3, [r3, #4]
 800ff86:	2900      	cmp	r1, #0
 800ff88:	d049      	beq.n	801001e <_dtoa_r+0x58e>
 800ff8a:	2000      	movs	r0, #0
 800ff8c:	4978      	ldr	r1, [pc, #480]	; (8010170 <_dtoa_r+0x6e0>)
 800ff8e:	f7f6 f9eb 	bl	8006368 <__aeabi_ddiv>
 800ff92:	002b      	movs	r3, r5
 800ff94:	0022      	movs	r2, r4
 800ff96:	f7f7 f863 	bl	8007060 <__aeabi_dsub>
 800ff9a:	9b08      	ldr	r3, [sp, #32]
 800ff9c:	900e      	str	r0, [sp, #56]	; 0x38
 800ff9e:	910f      	str	r1, [sp, #60]	; 0x3c
 800ffa0:	9315      	str	r3, [sp, #84]	; 0x54
 800ffa2:	9806      	ldr	r0, [sp, #24]
 800ffa4:	9907      	ldr	r1, [sp, #28]
 800ffa6:	f7f7 fbbf 	bl	8007728 <__aeabi_d2iz>
 800ffaa:	0004      	movs	r4, r0
 800ffac:	f7f7 fbf2 	bl	8007794 <__aeabi_i2d>
 800ffb0:	0002      	movs	r2, r0
 800ffb2:	000b      	movs	r3, r1
 800ffb4:	9806      	ldr	r0, [sp, #24]
 800ffb6:	9907      	ldr	r1, [sp, #28]
 800ffb8:	f7f7 f852 	bl	8007060 <__aeabi_dsub>
 800ffbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ffbe:	3430      	adds	r4, #48	; 0x30
 800ffc0:	1c5d      	adds	r5, r3, #1
 800ffc2:	701c      	strb	r4, [r3, #0]
 800ffc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ffc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ffc8:	9006      	str	r0, [sp, #24]
 800ffca:	9107      	str	r1, [sp, #28]
 800ffcc:	f7f5 fa3e 	bl	800544c <__aeabi_dcmplt>
 800ffd0:	2800      	cmp	r0, #0
 800ffd2:	d16c      	bne.n	80100ae <_dtoa_r+0x61e>
 800ffd4:	9a06      	ldr	r2, [sp, #24]
 800ffd6:	9b07      	ldr	r3, [sp, #28]
 800ffd8:	2000      	movs	r0, #0
 800ffda:	495e      	ldr	r1, [pc, #376]	; (8010154 <_dtoa_r+0x6c4>)
 800ffdc:	f7f7 f840 	bl	8007060 <__aeabi_dsub>
 800ffe0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ffe2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ffe4:	f7f5 fa32 	bl	800544c <__aeabi_dcmplt>
 800ffe8:	2800      	cmp	r0, #0
 800ffea:	d000      	beq.n	800ffee <_dtoa_r+0x55e>
 800ffec:	e0c3      	b.n	8010176 <_dtoa_r+0x6e6>
 800ffee:	9b08      	ldr	r3, [sp, #32]
 800fff0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fff2:	1aeb      	subs	r3, r5, r3
 800fff4:	429a      	cmp	r2, r3
 800fff6:	dc00      	bgt.n	800fffa <_dtoa_r+0x56a>
 800fff8:	e777      	b.n	800feea <_dtoa_r+0x45a>
 800fffa:	980e      	ldr	r0, [sp, #56]	; 0x38
 800fffc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fffe:	2200      	movs	r2, #0
 8010000:	4b55      	ldr	r3, [pc, #340]	; (8010158 <_dtoa_r+0x6c8>)
 8010002:	f7f6 fdbb 	bl	8006b7c <__aeabi_dmul>
 8010006:	2200      	movs	r2, #0
 8010008:	900e      	str	r0, [sp, #56]	; 0x38
 801000a:	910f      	str	r1, [sp, #60]	; 0x3c
 801000c:	9806      	ldr	r0, [sp, #24]
 801000e:	9907      	ldr	r1, [sp, #28]
 8010010:	4b51      	ldr	r3, [pc, #324]	; (8010158 <_dtoa_r+0x6c8>)
 8010012:	f7f6 fdb3 	bl	8006b7c <__aeabi_dmul>
 8010016:	9515      	str	r5, [sp, #84]	; 0x54
 8010018:	9006      	str	r0, [sp, #24]
 801001a:	9107      	str	r1, [sp, #28]
 801001c:	e7c1      	b.n	800ffa2 <_dtoa_r+0x512>
 801001e:	0020      	movs	r0, r4
 8010020:	0029      	movs	r1, r5
 8010022:	f7f6 fdab 	bl	8006b7c <__aeabi_dmul>
 8010026:	9c08      	ldr	r4, [sp, #32]
 8010028:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801002a:	0023      	movs	r3, r4
 801002c:	4694      	mov	ip, r2
 801002e:	900e      	str	r0, [sp, #56]	; 0x38
 8010030:	910f      	str	r1, [sp, #60]	; 0x3c
 8010032:	4463      	add	r3, ip
 8010034:	9315      	str	r3, [sp, #84]	; 0x54
 8010036:	9806      	ldr	r0, [sp, #24]
 8010038:	9907      	ldr	r1, [sp, #28]
 801003a:	f7f7 fb75 	bl	8007728 <__aeabi_d2iz>
 801003e:	0005      	movs	r5, r0
 8010040:	f7f7 fba8 	bl	8007794 <__aeabi_i2d>
 8010044:	000b      	movs	r3, r1
 8010046:	0002      	movs	r2, r0
 8010048:	9806      	ldr	r0, [sp, #24]
 801004a:	9907      	ldr	r1, [sp, #28]
 801004c:	f7f7 f808 	bl	8007060 <__aeabi_dsub>
 8010050:	3530      	adds	r5, #48	; 0x30
 8010052:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010054:	7025      	strb	r5, [r4, #0]
 8010056:	3401      	adds	r4, #1
 8010058:	9006      	str	r0, [sp, #24]
 801005a:	9107      	str	r1, [sp, #28]
 801005c:	42a3      	cmp	r3, r4
 801005e:	d12a      	bne.n	80100b6 <_dtoa_r+0x626>
 8010060:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010062:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010064:	9a08      	ldr	r2, [sp, #32]
 8010066:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010068:	4694      	mov	ip, r2
 801006a:	4463      	add	r3, ip
 801006c:	2200      	movs	r2, #0
 801006e:	001d      	movs	r5, r3
 8010070:	4b3f      	ldr	r3, [pc, #252]	; (8010170 <_dtoa_r+0x6e0>)
 8010072:	f7f5 fe5d 	bl	8005d30 <__aeabi_dadd>
 8010076:	0002      	movs	r2, r0
 8010078:	000b      	movs	r3, r1
 801007a:	9806      	ldr	r0, [sp, #24]
 801007c:	9907      	ldr	r1, [sp, #28]
 801007e:	f7f5 f9f9 	bl	8005474 <__aeabi_dcmpgt>
 8010082:	2800      	cmp	r0, #0
 8010084:	d000      	beq.n	8010088 <_dtoa_r+0x5f8>
 8010086:	e076      	b.n	8010176 <_dtoa_r+0x6e6>
 8010088:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801008a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801008c:	2000      	movs	r0, #0
 801008e:	4938      	ldr	r1, [pc, #224]	; (8010170 <_dtoa_r+0x6e0>)
 8010090:	f7f6 ffe6 	bl	8007060 <__aeabi_dsub>
 8010094:	0002      	movs	r2, r0
 8010096:	000b      	movs	r3, r1
 8010098:	9806      	ldr	r0, [sp, #24]
 801009a:	9907      	ldr	r1, [sp, #28]
 801009c:	f7f5 f9d6 	bl	800544c <__aeabi_dcmplt>
 80100a0:	2800      	cmp	r0, #0
 80100a2:	d100      	bne.n	80100a6 <_dtoa_r+0x616>
 80100a4:	e721      	b.n	800feea <_dtoa_r+0x45a>
 80100a6:	1e6b      	subs	r3, r5, #1
 80100a8:	781a      	ldrb	r2, [r3, #0]
 80100aa:	2a30      	cmp	r2, #48	; 0x30
 80100ac:	d001      	beq.n	80100b2 <_dtoa_r+0x622>
 80100ae:	0037      	movs	r7, r6
 80100b0:	e03f      	b.n	8010132 <_dtoa_r+0x6a2>
 80100b2:	001d      	movs	r5, r3
 80100b4:	e7f7      	b.n	80100a6 <_dtoa_r+0x616>
 80100b6:	9806      	ldr	r0, [sp, #24]
 80100b8:	9907      	ldr	r1, [sp, #28]
 80100ba:	2200      	movs	r2, #0
 80100bc:	4b26      	ldr	r3, [pc, #152]	; (8010158 <_dtoa_r+0x6c8>)
 80100be:	f7f6 fd5d 	bl	8006b7c <__aeabi_dmul>
 80100c2:	9006      	str	r0, [sp, #24]
 80100c4:	9107      	str	r1, [sp, #28]
 80100c6:	e7b6      	b.n	8010036 <_dtoa_r+0x5a6>
 80100c8:	9e08      	ldr	r6, [sp, #32]
 80100ca:	9a04      	ldr	r2, [sp, #16]
 80100cc:	9b05      	ldr	r3, [sp, #20]
 80100ce:	9806      	ldr	r0, [sp, #24]
 80100d0:	9907      	ldr	r1, [sp, #28]
 80100d2:	f7f6 f949 	bl	8006368 <__aeabi_ddiv>
 80100d6:	f7f7 fb27 	bl	8007728 <__aeabi_d2iz>
 80100da:	0004      	movs	r4, r0
 80100dc:	f7f7 fb5a 	bl	8007794 <__aeabi_i2d>
 80100e0:	9a04      	ldr	r2, [sp, #16]
 80100e2:	9b05      	ldr	r3, [sp, #20]
 80100e4:	f7f6 fd4a 	bl	8006b7c <__aeabi_dmul>
 80100e8:	0002      	movs	r2, r0
 80100ea:	000b      	movs	r3, r1
 80100ec:	9806      	ldr	r0, [sp, #24]
 80100ee:	9907      	ldr	r1, [sp, #28]
 80100f0:	f7f6 ffb6 	bl	8007060 <__aeabi_dsub>
 80100f4:	0023      	movs	r3, r4
 80100f6:	3330      	adds	r3, #48	; 0x30
 80100f8:	7033      	strb	r3, [r6, #0]
 80100fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80100fc:	9b08      	ldr	r3, [sp, #32]
 80100fe:	1c75      	adds	r5, r6, #1
 8010100:	1aeb      	subs	r3, r5, r3
 8010102:	429a      	cmp	r2, r3
 8010104:	d148      	bne.n	8010198 <_dtoa_r+0x708>
 8010106:	0002      	movs	r2, r0
 8010108:	000b      	movs	r3, r1
 801010a:	f7f5 fe11 	bl	8005d30 <__aeabi_dadd>
 801010e:	9a04      	ldr	r2, [sp, #16]
 8010110:	9b05      	ldr	r3, [sp, #20]
 8010112:	9006      	str	r0, [sp, #24]
 8010114:	9107      	str	r1, [sp, #28]
 8010116:	f7f5 f9ad 	bl	8005474 <__aeabi_dcmpgt>
 801011a:	2800      	cmp	r0, #0
 801011c:	d12a      	bne.n	8010174 <_dtoa_r+0x6e4>
 801011e:	9a04      	ldr	r2, [sp, #16]
 8010120:	9b05      	ldr	r3, [sp, #20]
 8010122:	9806      	ldr	r0, [sp, #24]
 8010124:	9907      	ldr	r1, [sp, #28]
 8010126:	f7f5 f98b 	bl	8005440 <__aeabi_dcmpeq>
 801012a:	2800      	cmp	r0, #0
 801012c:	d001      	beq.n	8010132 <_dtoa_r+0x6a2>
 801012e:	07e3      	lsls	r3, r4, #31
 8010130:	d420      	bmi.n	8010174 <_dtoa_r+0x6e4>
 8010132:	9903      	ldr	r1, [sp, #12]
 8010134:	9802      	ldr	r0, [sp, #8]
 8010136:	f000 ff02 	bl	8010f3e <_Bfree>
 801013a:	2300      	movs	r3, #0
 801013c:	702b      	strb	r3, [r5, #0]
 801013e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010140:	3701      	adds	r7, #1
 8010142:	601f      	str	r7, [r3, #0]
 8010144:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010146:	2b00      	cmp	r3, #0
 8010148:	d100      	bne.n	801014c <_dtoa_r+0x6bc>
 801014a:	e4e6      	b.n	800fb1a <_dtoa_r+0x8a>
 801014c:	601d      	str	r5, [r3, #0]
 801014e:	e4e4      	b.n	800fb1a <_dtoa_r+0x8a>
 8010150:	08012ce0 	.word	0x08012ce0
 8010154:	3ff00000 	.word	0x3ff00000
 8010158:	40240000 	.word	0x40240000
 801015c:	401c0000 	.word	0x401c0000
 8010160:	fcc00000 	.word	0xfcc00000
 8010164:	40140000 	.word	0x40140000
 8010168:	7cc00000 	.word	0x7cc00000
 801016c:	08012cb8 	.word	0x08012cb8
 8010170:	3fe00000 	.word	0x3fe00000
 8010174:	003e      	movs	r6, r7
 8010176:	1e6b      	subs	r3, r5, #1
 8010178:	781a      	ldrb	r2, [r3, #0]
 801017a:	2a39      	cmp	r2, #57	; 0x39
 801017c:	d106      	bne.n	801018c <_dtoa_r+0x6fc>
 801017e:	9a08      	ldr	r2, [sp, #32]
 8010180:	429a      	cmp	r2, r3
 8010182:	d107      	bne.n	8010194 <_dtoa_r+0x704>
 8010184:	2330      	movs	r3, #48	; 0x30
 8010186:	7013      	strb	r3, [r2, #0]
 8010188:	0013      	movs	r3, r2
 801018a:	3601      	adds	r6, #1
 801018c:	781a      	ldrb	r2, [r3, #0]
 801018e:	3201      	adds	r2, #1
 8010190:	701a      	strb	r2, [r3, #0]
 8010192:	e78c      	b.n	80100ae <_dtoa_r+0x61e>
 8010194:	001d      	movs	r5, r3
 8010196:	e7ee      	b.n	8010176 <_dtoa_r+0x6e6>
 8010198:	2200      	movs	r2, #0
 801019a:	4ba4      	ldr	r3, [pc, #656]	; (801042c <_dtoa_r+0x99c>)
 801019c:	f7f6 fcee 	bl	8006b7c <__aeabi_dmul>
 80101a0:	2200      	movs	r2, #0
 80101a2:	2300      	movs	r3, #0
 80101a4:	9006      	str	r0, [sp, #24]
 80101a6:	9107      	str	r1, [sp, #28]
 80101a8:	002e      	movs	r6, r5
 80101aa:	f7f5 f949 	bl	8005440 <__aeabi_dcmpeq>
 80101ae:	2800      	cmp	r0, #0
 80101b0:	d08b      	beq.n	80100ca <_dtoa_r+0x63a>
 80101b2:	e7be      	b.n	8010132 <_dtoa_r+0x6a2>
 80101b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80101b6:	2a00      	cmp	r2, #0
 80101b8:	d100      	bne.n	80101bc <_dtoa_r+0x72c>
 80101ba:	e0da      	b.n	8010372 <_dtoa_r+0x8e2>
 80101bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80101be:	2a01      	cmp	r2, #1
 80101c0:	dd00      	ble.n	80101c4 <_dtoa_r+0x734>
 80101c2:	e0bd      	b.n	8010340 <_dtoa_r+0x8b0>
 80101c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80101c6:	2a00      	cmp	r2, #0
 80101c8:	d100      	bne.n	80101cc <_dtoa_r+0x73c>
 80101ca:	e0b5      	b.n	8010338 <_dtoa_r+0x8a8>
 80101cc:	4a98      	ldr	r2, [pc, #608]	; (8010430 <_dtoa_r+0x9a0>)
 80101ce:	189b      	adds	r3, r3, r2
 80101d0:	9d04      	ldr	r5, [sp, #16]
 80101d2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80101d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80101d6:	2101      	movs	r1, #1
 80101d8:	18d2      	adds	r2, r2, r3
 80101da:	920a      	str	r2, [sp, #40]	; 0x28
 80101dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80101de:	9802      	ldr	r0, [sp, #8]
 80101e0:	18d3      	adds	r3, r2, r3
 80101e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80101e4:	f000 ff89 	bl	80110fa <__i2b>
 80101e8:	0006      	movs	r6, r0
 80101ea:	2c00      	cmp	r4, #0
 80101ec:	dd0e      	ble.n	801020c <_dtoa_r+0x77c>
 80101ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	dd0b      	ble.n	801020c <_dtoa_r+0x77c>
 80101f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80101f6:	0023      	movs	r3, r4
 80101f8:	4294      	cmp	r4, r2
 80101fa:	dd00      	ble.n	80101fe <_dtoa_r+0x76e>
 80101fc:	0013      	movs	r3, r2
 80101fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010200:	1ae4      	subs	r4, r4, r3
 8010202:	1ad2      	subs	r2, r2, r3
 8010204:	920a      	str	r2, [sp, #40]	; 0x28
 8010206:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010208:	1ad3      	subs	r3, r2, r3
 801020a:	930b      	str	r3, [sp, #44]	; 0x2c
 801020c:	9b04      	ldr	r3, [sp, #16]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d01f      	beq.n	8010252 <_dtoa_r+0x7c2>
 8010212:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010214:	2b00      	cmp	r3, #0
 8010216:	d100      	bne.n	801021a <_dtoa_r+0x78a>
 8010218:	e0af      	b.n	801037a <_dtoa_r+0x8ea>
 801021a:	2d00      	cmp	r5, #0
 801021c:	d011      	beq.n	8010242 <_dtoa_r+0x7b2>
 801021e:	0031      	movs	r1, r6
 8010220:	002a      	movs	r2, r5
 8010222:	9802      	ldr	r0, [sp, #8]
 8010224:	f001 f802 	bl	801122c <__pow5mult>
 8010228:	9a03      	ldr	r2, [sp, #12]
 801022a:	0001      	movs	r1, r0
 801022c:	0006      	movs	r6, r0
 801022e:	9802      	ldr	r0, [sp, #8]
 8010230:	f000 ff6c 	bl	801110c <__multiply>
 8010234:	9903      	ldr	r1, [sp, #12]
 8010236:	9010      	str	r0, [sp, #64]	; 0x40
 8010238:	9802      	ldr	r0, [sp, #8]
 801023a:	f000 fe80 	bl	8010f3e <_Bfree>
 801023e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010240:	9303      	str	r3, [sp, #12]
 8010242:	9b04      	ldr	r3, [sp, #16]
 8010244:	1b5a      	subs	r2, r3, r5
 8010246:	d004      	beq.n	8010252 <_dtoa_r+0x7c2>
 8010248:	9903      	ldr	r1, [sp, #12]
 801024a:	9802      	ldr	r0, [sp, #8]
 801024c:	f000 ffee 	bl	801122c <__pow5mult>
 8010250:	9003      	str	r0, [sp, #12]
 8010252:	2101      	movs	r1, #1
 8010254:	9802      	ldr	r0, [sp, #8]
 8010256:	f000 ff50 	bl	80110fa <__i2b>
 801025a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801025c:	9004      	str	r0, [sp, #16]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d100      	bne.n	8010264 <_dtoa_r+0x7d4>
 8010262:	e1e3      	b.n	801062c <_dtoa_r+0xb9c>
 8010264:	001a      	movs	r2, r3
 8010266:	0001      	movs	r1, r0
 8010268:	9802      	ldr	r0, [sp, #8]
 801026a:	f000 ffdf 	bl	801122c <__pow5mult>
 801026e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010270:	9004      	str	r0, [sp, #16]
 8010272:	2b01      	cmp	r3, #1
 8010274:	dd00      	ble.n	8010278 <_dtoa_r+0x7e8>
 8010276:	e082      	b.n	801037e <_dtoa_r+0x8ee>
 8010278:	2500      	movs	r5, #0
 801027a:	9b06      	ldr	r3, [sp, #24]
 801027c:	42ab      	cmp	r3, r5
 801027e:	d10e      	bne.n	801029e <_dtoa_r+0x80e>
 8010280:	9b07      	ldr	r3, [sp, #28]
 8010282:	031b      	lsls	r3, r3, #12
 8010284:	42ab      	cmp	r3, r5
 8010286:	d10a      	bne.n	801029e <_dtoa_r+0x80e>
 8010288:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801028a:	9a07      	ldr	r2, [sp, #28]
 801028c:	4213      	tst	r3, r2
 801028e:	d006      	beq.n	801029e <_dtoa_r+0x80e>
 8010290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010292:	3501      	adds	r5, #1
 8010294:	3301      	adds	r3, #1
 8010296:	930a      	str	r3, [sp, #40]	; 0x28
 8010298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801029a:	3301      	adds	r3, #1
 801029c:	930b      	str	r3, [sp, #44]	; 0x2c
 801029e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80102a0:	2001      	movs	r0, #1
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d16c      	bne.n	8010380 <_dtoa_r+0x8f0>
 80102a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102a8:	1818      	adds	r0, r3, r0
 80102aa:	231f      	movs	r3, #31
 80102ac:	4018      	ands	r0, r3
 80102ae:	d07e      	beq.n	80103ae <_dtoa_r+0x91e>
 80102b0:	3301      	adds	r3, #1
 80102b2:	1a1b      	subs	r3, r3, r0
 80102b4:	2b04      	cmp	r3, #4
 80102b6:	dd70      	ble.n	801039a <_dtoa_r+0x90a>
 80102b8:	231c      	movs	r3, #28
 80102ba:	1a18      	subs	r0, r3, r0
 80102bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102be:	1824      	adds	r4, r4, r0
 80102c0:	181b      	adds	r3, r3, r0
 80102c2:	930a      	str	r3, [sp, #40]	; 0x28
 80102c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102c6:	181b      	adds	r3, r3, r0
 80102c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80102ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	dd05      	ble.n	80102dc <_dtoa_r+0x84c>
 80102d0:	001a      	movs	r2, r3
 80102d2:	9903      	ldr	r1, [sp, #12]
 80102d4:	9802      	ldr	r0, [sp, #8]
 80102d6:	f000 fffb 	bl	80112d0 <__lshift>
 80102da:	9003      	str	r0, [sp, #12]
 80102dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102de:	2b00      	cmp	r3, #0
 80102e0:	dd05      	ble.n	80102ee <_dtoa_r+0x85e>
 80102e2:	001a      	movs	r2, r3
 80102e4:	9904      	ldr	r1, [sp, #16]
 80102e6:	9802      	ldr	r0, [sp, #8]
 80102e8:	f000 fff2 	bl	80112d0 <__lshift>
 80102ec:	9004      	str	r0, [sp, #16]
 80102ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d05e      	beq.n	80103b2 <_dtoa_r+0x922>
 80102f4:	9904      	ldr	r1, [sp, #16]
 80102f6:	9803      	ldr	r0, [sp, #12]
 80102f8:	f001 f83c 	bl	8011374 <__mcmp>
 80102fc:	2800      	cmp	r0, #0
 80102fe:	da58      	bge.n	80103b2 <_dtoa_r+0x922>
 8010300:	2300      	movs	r3, #0
 8010302:	220a      	movs	r2, #10
 8010304:	9903      	ldr	r1, [sp, #12]
 8010306:	9802      	ldr	r0, [sp, #8]
 8010308:	f000 fe32 	bl	8010f70 <__multadd>
 801030c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801030e:	3f01      	subs	r7, #1
 8010310:	9003      	str	r0, [sp, #12]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d100      	bne.n	8010318 <_dtoa_r+0x888>
 8010316:	e190      	b.n	801063a <_dtoa_r+0xbaa>
 8010318:	2300      	movs	r3, #0
 801031a:	0031      	movs	r1, r6
 801031c:	220a      	movs	r2, #10
 801031e:	9802      	ldr	r0, [sp, #8]
 8010320:	f000 fe26 	bl	8010f70 <__multadd>
 8010324:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010326:	0006      	movs	r6, r0
 8010328:	2b00      	cmp	r3, #0
 801032a:	dd00      	ble.n	801032e <_dtoa_r+0x89e>
 801032c:	e088      	b.n	8010440 <_dtoa_r+0x9b0>
 801032e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010330:	2b02      	cmp	r3, #2
 8010332:	dc00      	bgt.n	8010336 <_dtoa_r+0x8a6>
 8010334:	e084      	b.n	8010440 <_dtoa_r+0x9b0>
 8010336:	e044      	b.n	80103c2 <_dtoa_r+0x932>
 8010338:	2336      	movs	r3, #54	; 0x36
 801033a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801033c:	1a9b      	subs	r3, r3, r2
 801033e:	e747      	b.n	80101d0 <_dtoa_r+0x740>
 8010340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010342:	1e5d      	subs	r5, r3, #1
 8010344:	9b04      	ldr	r3, [sp, #16]
 8010346:	42ab      	cmp	r3, r5
 8010348:	db08      	blt.n	801035c <_dtoa_r+0x8cc>
 801034a:	1b5d      	subs	r5, r3, r5
 801034c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801034e:	2b00      	cmp	r3, #0
 8010350:	da0c      	bge.n	801036c <_dtoa_r+0x8dc>
 8010352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010354:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010356:	1a9c      	subs	r4, r3, r2
 8010358:	2300      	movs	r3, #0
 801035a:	e73b      	b.n	80101d4 <_dtoa_r+0x744>
 801035c:	9b04      	ldr	r3, [sp, #16]
 801035e:	9504      	str	r5, [sp, #16]
 8010360:	1aea      	subs	r2, r5, r3
 8010362:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010364:	2500      	movs	r5, #0
 8010366:	189b      	adds	r3, r3, r2
 8010368:	9311      	str	r3, [sp, #68]	; 0x44
 801036a:	e7ef      	b.n	801034c <_dtoa_r+0x8bc>
 801036c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801036e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010370:	e730      	b.n	80101d4 <_dtoa_r+0x744>
 8010372:	9d04      	ldr	r5, [sp, #16]
 8010374:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010376:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8010378:	e737      	b.n	80101ea <_dtoa_r+0x75a>
 801037a:	9a04      	ldr	r2, [sp, #16]
 801037c:	e764      	b.n	8010248 <_dtoa_r+0x7b8>
 801037e:	2500      	movs	r5, #0
 8010380:	9b04      	ldr	r3, [sp, #16]
 8010382:	9a04      	ldr	r2, [sp, #16]
 8010384:	691b      	ldr	r3, [r3, #16]
 8010386:	9310      	str	r3, [sp, #64]	; 0x40
 8010388:	3303      	adds	r3, #3
 801038a:	009b      	lsls	r3, r3, #2
 801038c:	18d3      	adds	r3, r2, r3
 801038e:	6858      	ldr	r0, [r3, #4]
 8010390:	f000 fe6a 	bl	8011068 <__hi0bits>
 8010394:	2320      	movs	r3, #32
 8010396:	1a18      	subs	r0, r3, r0
 8010398:	e785      	b.n	80102a6 <_dtoa_r+0x816>
 801039a:	2b04      	cmp	r3, #4
 801039c:	d095      	beq.n	80102ca <_dtoa_r+0x83a>
 801039e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80103a0:	331c      	adds	r3, #28
 80103a2:	18d2      	adds	r2, r2, r3
 80103a4:	920a      	str	r2, [sp, #40]	; 0x28
 80103a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80103a8:	18e4      	adds	r4, r4, r3
 80103aa:	18d3      	adds	r3, r2, r3
 80103ac:	e78c      	b.n	80102c8 <_dtoa_r+0x838>
 80103ae:	0003      	movs	r3, r0
 80103b0:	e7f5      	b.n	801039e <_dtoa_r+0x90e>
 80103b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	dc3d      	bgt.n	8010434 <_dtoa_r+0x9a4>
 80103b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80103ba:	2b02      	cmp	r3, #2
 80103bc:	dd3a      	ble.n	8010434 <_dtoa_r+0x9a4>
 80103be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103c0:	930c      	str	r3, [sp, #48]	; 0x30
 80103c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d10c      	bne.n	80103e2 <_dtoa_r+0x952>
 80103c8:	9904      	ldr	r1, [sp, #16]
 80103ca:	2205      	movs	r2, #5
 80103cc:	9802      	ldr	r0, [sp, #8]
 80103ce:	f000 fdcf 	bl	8010f70 <__multadd>
 80103d2:	9004      	str	r0, [sp, #16]
 80103d4:	0001      	movs	r1, r0
 80103d6:	9803      	ldr	r0, [sp, #12]
 80103d8:	f000 ffcc 	bl	8011374 <__mcmp>
 80103dc:	2800      	cmp	r0, #0
 80103de:	dd00      	ble.n	80103e2 <_dtoa_r+0x952>
 80103e0:	e5af      	b.n	800ff42 <_dtoa_r+0x4b2>
 80103e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80103e4:	9d08      	ldr	r5, [sp, #32]
 80103e6:	43df      	mvns	r7, r3
 80103e8:	2300      	movs	r3, #0
 80103ea:	9309      	str	r3, [sp, #36]	; 0x24
 80103ec:	9904      	ldr	r1, [sp, #16]
 80103ee:	9802      	ldr	r0, [sp, #8]
 80103f0:	f000 fda5 	bl	8010f3e <_Bfree>
 80103f4:	2e00      	cmp	r6, #0
 80103f6:	d100      	bne.n	80103fa <_dtoa_r+0x96a>
 80103f8:	e69b      	b.n	8010132 <_dtoa_r+0x6a2>
 80103fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d005      	beq.n	801040c <_dtoa_r+0x97c>
 8010400:	42b3      	cmp	r3, r6
 8010402:	d003      	beq.n	801040c <_dtoa_r+0x97c>
 8010404:	0019      	movs	r1, r3
 8010406:	9802      	ldr	r0, [sp, #8]
 8010408:	f000 fd99 	bl	8010f3e <_Bfree>
 801040c:	0031      	movs	r1, r6
 801040e:	9802      	ldr	r0, [sp, #8]
 8010410:	f000 fd95 	bl	8010f3e <_Bfree>
 8010414:	e68d      	b.n	8010132 <_dtoa_r+0x6a2>
 8010416:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010418:	9304      	str	r3, [sp, #16]
 801041a:	001e      	movs	r6, r3
 801041c:	e7e1      	b.n	80103e2 <_dtoa_r+0x952>
 801041e:	2300      	movs	r3, #0
 8010420:	e7fa      	b.n	8010418 <_dtoa_r+0x988>
 8010422:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010424:	0037      	movs	r7, r6
 8010426:	9304      	str	r3, [sp, #16]
 8010428:	001e      	movs	r6, r3
 801042a:	e58a      	b.n	800ff42 <_dtoa_r+0x4b2>
 801042c:	40240000 	.word	0x40240000
 8010430:	00000433 	.word	0x00000433
 8010434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010436:	2b00      	cmp	r3, #0
 8010438:	d100      	bne.n	801043c <_dtoa_r+0x9ac>
 801043a:	e0b2      	b.n	80105a2 <_dtoa_r+0xb12>
 801043c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801043e:	930c      	str	r3, [sp, #48]	; 0x30
 8010440:	2c00      	cmp	r4, #0
 8010442:	dd05      	ble.n	8010450 <_dtoa_r+0x9c0>
 8010444:	0031      	movs	r1, r6
 8010446:	0022      	movs	r2, r4
 8010448:	9802      	ldr	r0, [sp, #8]
 801044a:	f000 ff41 	bl	80112d0 <__lshift>
 801044e:	0006      	movs	r6, r0
 8010450:	0030      	movs	r0, r6
 8010452:	2d00      	cmp	r5, #0
 8010454:	d011      	beq.n	801047a <_dtoa_r+0x9ea>
 8010456:	6871      	ldr	r1, [r6, #4]
 8010458:	9802      	ldr	r0, [sp, #8]
 801045a:	f000 fd38 	bl	8010ece <_Balloc>
 801045e:	0031      	movs	r1, r6
 8010460:	0004      	movs	r4, r0
 8010462:	6933      	ldr	r3, [r6, #16]
 8010464:	310c      	adds	r1, #12
 8010466:	1c9a      	adds	r2, r3, #2
 8010468:	0092      	lsls	r2, r2, #2
 801046a:	300c      	adds	r0, #12
 801046c:	f7fd fcff 	bl	800de6e <memcpy>
 8010470:	2201      	movs	r2, #1
 8010472:	0021      	movs	r1, r4
 8010474:	9802      	ldr	r0, [sp, #8]
 8010476:	f000 ff2b 	bl	80112d0 <__lshift>
 801047a:	9609      	str	r6, [sp, #36]	; 0x24
 801047c:	0006      	movs	r6, r0
 801047e:	9b08      	ldr	r3, [sp, #32]
 8010480:	930a      	str	r3, [sp, #40]	; 0x28
 8010482:	9904      	ldr	r1, [sp, #16]
 8010484:	9803      	ldr	r0, [sp, #12]
 8010486:	f7ff fa7d 	bl	800f984 <quorem>
 801048a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801048c:	900d      	str	r0, [sp, #52]	; 0x34
 801048e:	0004      	movs	r4, r0
 8010490:	9803      	ldr	r0, [sp, #12]
 8010492:	f000 ff6f 	bl	8011374 <__mcmp>
 8010496:	0032      	movs	r2, r6
 8010498:	9010      	str	r0, [sp, #64]	; 0x40
 801049a:	9904      	ldr	r1, [sp, #16]
 801049c:	9802      	ldr	r0, [sp, #8]
 801049e:	f000 ff83 	bl	80113a8 <__mdiff>
 80104a2:	2301      	movs	r3, #1
 80104a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80104a6:	68c3      	ldr	r3, [r0, #12]
 80104a8:	3430      	adds	r4, #48	; 0x30
 80104aa:	0005      	movs	r5, r0
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d104      	bne.n	80104ba <_dtoa_r+0xa2a>
 80104b0:	0001      	movs	r1, r0
 80104b2:	9803      	ldr	r0, [sp, #12]
 80104b4:	f000 ff5e 	bl	8011374 <__mcmp>
 80104b8:	900b      	str	r0, [sp, #44]	; 0x2c
 80104ba:	0029      	movs	r1, r5
 80104bc:	9802      	ldr	r0, [sp, #8]
 80104be:	f000 fd3e 	bl	8010f3e <_Bfree>
 80104c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80104c6:	4313      	orrs	r3, r2
 80104c8:	d10e      	bne.n	80104e8 <_dtoa_r+0xa58>
 80104ca:	9a06      	ldr	r2, [sp, #24]
 80104cc:	3301      	adds	r3, #1
 80104ce:	4213      	tst	r3, r2
 80104d0:	d10a      	bne.n	80104e8 <_dtoa_r+0xa58>
 80104d2:	2c39      	cmp	r4, #57	; 0x39
 80104d4:	d026      	beq.n	8010524 <_dtoa_r+0xa94>
 80104d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80104d8:	2b00      	cmp	r3, #0
 80104da:	dd01      	ble.n	80104e0 <_dtoa_r+0xa50>
 80104dc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80104de:	3431      	adds	r4, #49	; 0x31
 80104e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104e2:	1c5d      	adds	r5, r3, #1
 80104e4:	701c      	strb	r4, [r3, #0]
 80104e6:	e781      	b.n	80103ec <_dtoa_r+0x95c>
 80104e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	db07      	blt.n	80104fe <_dtoa_r+0xa6e>
 80104ee:	001d      	movs	r5, r3
 80104f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80104f2:	431d      	orrs	r5, r3
 80104f4:	d122      	bne.n	801053c <_dtoa_r+0xaac>
 80104f6:	2301      	movs	r3, #1
 80104f8:	9a06      	ldr	r2, [sp, #24]
 80104fa:	4213      	tst	r3, r2
 80104fc:	d11e      	bne.n	801053c <_dtoa_r+0xaac>
 80104fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010500:	2b00      	cmp	r3, #0
 8010502:	dded      	ble.n	80104e0 <_dtoa_r+0xa50>
 8010504:	9903      	ldr	r1, [sp, #12]
 8010506:	2201      	movs	r2, #1
 8010508:	9802      	ldr	r0, [sp, #8]
 801050a:	f000 fee1 	bl	80112d0 <__lshift>
 801050e:	9904      	ldr	r1, [sp, #16]
 8010510:	9003      	str	r0, [sp, #12]
 8010512:	f000 ff2f 	bl	8011374 <__mcmp>
 8010516:	2800      	cmp	r0, #0
 8010518:	dc02      	bgt.n	8010520 <_dtoa_r+0xa90>
 801051a:	d1e1      	bne.n	80104e0 <_dtoa_r+0xa50>
 801051c:	07e3      	lsls	r3, r4, #31
 801051e:	d5df      	bpl.n	80104e0 <_dtoa_r+0xa50>
 8010520:	2c39      	cmp	r4, #57	; 0x39
 8010522:	d1db      	bne.n	80104dc <_dtoa_r+0xa4c>
 8010524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010526:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010528:	1c5d      	adds	r5, r3, #1
 801052a:	2339      	movs	r3, #57	; 0x39
 801052c:	7013      	strb	r3, [r2, #0]
 801052e:	1e6b      	subs	r3, r5, #1
 8010530:	781a      	ldrb	r2, [r3, #0]
 8010532:	2a39      	cmp	r2, #57	; 0x39
 8010534:	d067      	beq.n	8010606 <_dtoa_r+0xb76>
 8010536:	3201      	adds	r2, #1
 8010538:	701a      	strb	r2, [r3, #0]
 801053a:	e757      	b.n	80103ec <_dtoa_r+0x95c>
 801053c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801053e:	1c5d      	adds	r5, r3, #1
 8010540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010542:	2b00      	cmp	r3, #0
 8010544:	dd04      	ble.n	8010550 <_dtoa_r+0xac0>
 8010546:	2c39      	cmp	r4, #57	; 0x39
 8010548:	d0ec      	beq.n	8010524 <_dtoa_r+0xa94>
 801054a:	3401      	adds	r4, #1
 801054c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801054e:	e7c9      	b.n	80104e4 <_dtoa_r+0xa54>
 8010550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010552:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010554:	701c      	strb	r4, [r3, #0]
 8010556:	9b08      	ldr	r3, [sp, #32]
 8010558:	1aeb      	subs	r3, r5, r3
 801055a:	4293      	cmp	r3, r2
 801055c:	d03e      	beq.n	80105dc <_dtoa_r+0xb4c>
 801055e:	2300      	movs	r3, #0
 8010560:	220a      	movs	r2, #10
 8010562:	9903      	ldr	r1, [sp, #12]
 8010564:	9802      	ldr	r0, [sp, #8]
 8010566:	f000 fd03 	bl	8010f70 <__multadd>
 801056a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801056c:	9003      	str	r0, [sp, #12]
 801056e:	42b3      	cmp	r3, r6
 8010570:	d109      	bne.n	8010586 <_dtoa_r+0xaf6>
 8010572:	2300      	movs	r3, #0
 8010574:	220a      	movs	r2, #10
 8010576:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010578:	9802      	ldr	r0, [sp, #8]
 801057a:	f000 fcf9 	bl	8010f70 <__multadd>
 801057e:	9009      	str	r0, [sp, #36]	; 0x24
 8010580:	0006      	movs	r6, r0
 8010582:	950a      	str	r5, [sp, #40]	; 0x28
 8010584:	e77d      	b.n	8010482 <_dtoa_r+0x9f2>
 8010586:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010588:	2300      	movs	r3, #0
 801058a:	220a      	movs	r2, #10
 801058c:	9802      	ldr	r0, [sp, #8]
 801058e:	f000 fcef 	bl	8010f70 <__multadd>
 8010592:	2300      	movs	r3, #0
 8010594:	9009      	str	r0, [sp, #36]	; 0x24
 8010596:	220a      	movs	r2, #10
 8010598:	0031      	movs	r1, r6
 801059a:	9802      	ldr	r0, [sp, #8]
 801059c:	f000 fce8 	bl	8010f70 <__multadd>
 80105a0:	e7ee      	b.n	8010580 <_dtoa_r+0xaf0>
 80105a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105a4:	930c      	str	r3, [sp, #48]	; 0x30
 80105a6:	9b08      	ldr	r3, [sp, #32]
 80105a8:	9306      	str	r3, [sp, #24]
 80105aa:	9904      	ldr	r1, [sp, #16]
 80105ac:	9803      	ldr	r0, [sp, #12]
 80105ae:	f7ff f9e9 	bl	800f984 <quorem>
 80105b2:	9b06      	ldr	r3, [sp, #24]
 80105b4:	3030      	adds	r0, #48	; 0x30
 80105b6:	1c5d      	adds	r5, r3, #1
 80105b8:	7018      	strb	r0, [r3, #0]
 80105ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80105bc:	9b08      	ldr	r3, [sp, #32]
 80105be:	0004      	movs	r4, r0
 80105c0:	1aeb      	subs	r3, r5, r3
 80105c2:	429a      	cmp	r2, r3
 80105c4:	dd08      	ble.n	80105d8 <_dtoa_r+0xb48>
 80105c6:	2300      	movs	r3, #0
 80105c8:	220a      	movs	r2, #10
 80105ca:	9903      	ldr	r1, [sp, #12]
 80105cc:	9802      	ldr	r0, [sp, #8]
 80105ce:	f000 fccf 	bl	8010f70 <__multadd>
 80105d2:	9506      	str	r5, [sp, #24]
 80105d4:	9003      	str	r0, [sp, #12]
 80105d6:	e7e8      	b.n	80105aa <_dtoa_r+0xb1a>
 80105d8:	2300      	movs	r3, #0
 80105da:	9309      	str	r3, [sp, #36]	; 0x24
 80105dc:	9903      	ldr	r1, [sp, #12]
 80105de:	2201      	movs	r2, #1
 80105e0:	9802      	ldr	r0, [sp, #8]
 80105e2:	f000 fe75 	bl	80112d0 <__lshift>
 80105e6:	9904      	ldr	r1, [sp, #16]
 80105e8:	9003      	str	r0, [sp, #12]
 80105ea:	f000 fec3 	bl	8011374 <__mcmp>
 80105ee:	2800      	cmp	r0, #0
 80105f0:	dc9d      	bgt.n	801052e <_dtoa_r+0xa9e>
 80105f2:	d101      	bne.n	80105f8 <_dtoa_r+0xb68>
 80105f4:	07e3      	lsls	r3, r4, #31
 80105f6:	d49a      	bmi.n	801052e <_dtoa_r+0xa9e>
 80105f8:	1e6b      	subs	r3, r5, #1
 80105fa:	781a      	ldrb	r2, [r3, #0]
 80105fc:	2a30      	cmp	r2, #48	; 0x30
 80105fe:	d000      	beq.n	8010602 <_dtoa_r+0xb72>
 8010600:	e6f4      	b.n	80103ec <_dtoa_r+0x95c>
 8010602:	001d      	movs	r5, r3
 8010604:	e7f8      	b.n	80105f8 <_dtoa_r+0xb68>
 8010606:	9a08      	ldr	r2, [sp, #32]
 8010608:	429a      	cmp	r2, r3
 801060a:	d103      	bne.n	8010614 <_dtoa_r+0xb84>
 801060c:	2331      	movs	r3, #49	; 0x31
 801060e:	3701      	adds	r7, #1
 8010610:	7013      	strb	r3, [r2, #0]
 8010612:	e6eb      	b.n	80103ec <_dtoa_r+0x95c>
 8010614:	001d      	movs	r5, r3
 8010616:	e78a      	b.n	801052e <_dtoa_r+0xa9e>
 8010618:	4b0b      	ldr	r3, [pc, #44]	; (8010648 <_dtoa_r+0xbb8>)
 801061a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801061c:	9308      	str	r3, [sp, #32]
 801061e:	4b0b      	ldr	r3, [pc, #44]	; (801064c <_dtoa_r+0xbbc>)
 8010620:	2a00      	cmp	r2, #0
 8010622:	d001      	beq.n	8010628 <_dtoa_r+0xb98>
 8010624:	f7ff fa77 	bl	800fb16 <_dtoa_r+0x86>
 8010628:	f7ff fa77 	bl	800fb1a <_dtoa_r+0x8a>
 801062c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801062e:	2b01      	cmp	r3, #1
 8010630:	dc00      	bgt.n	8010634 <_dtoa_r+0xba4>
 8010632:	e621      	b.n	8010278 <_dtoa_r+0x7e8>
 8010634:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8010636:	2001      	movs	r0, #1
 8010638:	e635      	b.n	80102a6 <_dtoa_r+0x816>
 801063a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801063c:	2b00      	cmp	r3, #0
 801063e:	dcb2      	bgt.n	80105a6 <_dtoa_r+0xb16>
 8010640:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010642:	2b02      	cmp	r3, #2
 8010644:	ddaf      	ble.n	80105a6 <_dtoa_r+0xb16>
 8010646:	e6bc      	b.n	80103c2 <_dtoa_r+0x932>
 8010648:	08012c38 	.word	0x08012c38
 801064c:	08012c40 	.word	0x08012c40

08010650 <std>:
 8010650:	2300      	movs	r3, #0
 8010652:	b510      	push	{r4, lr}
 8010654:	0004      	movs	r4, r0
 8010656:	6003      	str	r3, [r0, #0]
 8010658:	6043      	str	r3, [r0, #4]
 801065a:	6083      	str	r3, [r0, #8]
 801065c:	8181      	strh	r1, [r0, #12]
 801065e:	6643      	str	r3, [r0, #100]	; 0x64
 8010660:	81c2      	strh	r2, [r0, #14]
 8010662:	6103      	str	r3, [r0, #16]
 8010664:	6143      	str	r3, [r0, #20]
 8010666:	6183      	str	r3, [r0, #24]
 8010668:	0019      	movs	r1, r3
 801066a:	2208      	movs	r2, #8
 801066c:	305c      	adds	r0, #92	; 0x5c
 801066e:	f7fd fc07 	bl	800de80 <memset>
 8010672:	4b05      	ldr	r3, [pc, #20]	; (8010688 <std+0x38>)
 8010674:	6224      	str	r4, [r4, #32]
 8010676:	6263      	str	r3, [r4, #36]	; 0x24
 8010678:	4b04      	ldr	r3, [pc, #16]	; (801068c <std+0x3c>)
 801067a:	62a3      	str	r3, [r4, #40]	; 0x28
 801067c:	4b04      	ldr	r3, [pc, #16]	; (8010690 <std+0x40>)
 801067e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010680:	4b04      	ldr	r3, [pc, #16]	; (8010694 <std+0x44>)
 8010682:	6323      	str	r3, [r4, #48]	; 0x30
 8010684:	bd10      	pop	{r4, pc}
 8010686:	46c0      	nop			; (mov r8, r8)
 8010688:	08011d89 	.word	0x08011d89
 801068c:	08011db1 	.word	0x08011db1
 8010690:	08011de9 	.word	0x08011de9
 8010694:	08011e15 	.word	0x08011e15

08010698 <_cleanup_r>:
 8010698:	b510      	push	{r4, lr}
 801069a:	4902      	ldr	r1, [pc, #8]	; (80106a4 <_cleanup_r+0xc>)
 801069c:	f000 f88c 	bl	80107b8 <_fwalk_reent>
 80106a0:	bd10      	pop	{r4, pc}
 80106a2:	46c0      	nop			; (mov r8, r8)
 80106a4:	08012155 	.word	0x08012155

080106a8 <__sfmoreglue>:
 80106a8:	b570      	push	{r4, r5, r6, lr}
 80106aa:	2568      	movs	r5, #104	; 0x68
 80106ac:	1e4a      	subs	r2, r1, #1
 80106ae:	4355      	muls	r5, r2
 80106b0:	000e      	movs	r6, r1
 80106b2:	0029      	movs	r1, r5
 80106b4:	3174      	adds	r1, #116	; 0x74
 80106b6:	f001 f859 	bl	801176c <_malloc_r>
 80106ba:	1e04      	subs	r4, r0, #0
 80106bc:	d008      	beq.n	80106d0 <__sfmoreglue+0x28>
 80106be:	2100      	movs	r1, #0
 80106c0:	002a      	movs	r2, r5
 80106c2:	6001      	str	r1, [r0, #0]
 80106c4:	6046      	str	r6, [r0, #4]
 80106c6:	300c      	adds	r0, #12
 80106c8:	60a0      	str	r0, [r4, #8]
 80106ca:	3268      	adds	r2, #104	; 0x68
 80106cc:	f7fd fbd8 	bl	800de80 <memset>
 80106d0:	0020      	movs	r0, r4
 80106d2:	bd70      	pop	{r4, r5, r6, pc}

080106d4 <__sinit>:
 80106d4:	6983      	ldr	r3, [r0, #24]
 80106d6:	b513      	push	{r0, r1, r4, lr}
 80106d8:	0004      	movs	r4, r0
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d128      	bne.n	8010730 <__sinit+0x5c>
 80106de:	6483      	str	r3, [r0, #72]	; 0x48
 80106e0:	64c3      	str	r3, [r0, #76]	; 0x4c
 80106e2:	6503      	str	r3, [r0, #80]	; 0x50
 80106e4:	4b13      	ldr	r3, [pc, #76]	; (8010734 <__sinit+0x60>)
 80106e6:	4a14      	ldr	r2, [pc, #80]	; (8010738 <__sinit+0x64>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	6282      	str	r2, [r0, #40]	; 0x28
 80106ec:	9301      	str	r3, [sp, #4]
 80106ee:	4298      	cmp	r0, r3
 80106f0:	d101      	bne.n	80106f6 <__sinit+0x22>
 80106f2:	2301      	movs	r3, #1
 80106f4:	6183      	str	r3, [r0, #24]
 80106f6:	0020      	movs	r0, r4
 80106f8:	f000 f820 	bl	801073c <__sfp>
 80106fc:	6060      	str	r0, [r4, #4]
 80106fe:	0020      	movs	r0, r4
 8010700:	f000 f81c 	bl	801073c <__sfp>
 8010704:	60a0      	str	r0, [r4, #8]
 8010706:	0020      	movs	r0, r4
 8010708:	f000 f818 	bl	801073c <__sfp>
 801070c:	2200      	movs	r2, #0
 801070e:	60e0      	str	r0, [r4, #12]
 8010710:	2104      	movs	r1, #4
 8010712:	6860      	ldr	r0, [r4, #4]
 8010714:	f7ff ff9c 	bl	8010650 <std>
 8010718:	2201      	movs	r2, #1
 801071a:	2109      	movs	r1, #9
 801071c:	68a0      	ldr	r0, [r4, #8]
 801071e:	f7ff ff97 	bl	8010650 <std>
 8010722:	2202      	movs	r2, #2
 8010724:	2112      	movs	r1, #18
 8010726:	68e0      	ldr	r0, [r4, #12]
 8010728:	f7ff ff92 	bl	8010650 <std>
 801072c:	2301      	movs	r3, #1
 801072e:	61a3      	str	r3, [r4, #24]
 8010730:	bd13      	pop	{r0, r1, r4, pc}
 8010732:	46c0      	nop			; (mov r8, r8)
 8010734:	08012ba4 	.word	0x08012ba4
 8010738:	08010699 	.word	0x08010699

0801073c <__sfp>:
 801073c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801073e:	4b1c      	ldr	r3, [pc, #112]	; (80107b0 <__sfp+0x74>)
 8010740:	0007      	movs	r7, r0
 8010742:	681e      	ldr	r6, [r3, #0]
 8010744:	69b3      	ldr	r3, [r6, #24]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d102      	bne.n	8010750 <__sfp+0x14>
 801074a:	0030      	movs	r0, r6
 801074c:	f7ff ffc2 	bl	80106d4 <__sinit>
 8010750:	3648      	adds	r6, #72	; 0x48
 8010752:	68b4      	ldr	r4, [r6, #8]
 8010754:	6873      	ldr	r3, [r6, #4]
 8010756:	3b01      	subs	r3, #1
 8010758:	d504      	bpl.n	8010764 <__sfp+0x28>
 801075a:	6833      	ldr	r3, [r6, #0]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d007      	beq.n	8010770 <__sfp+0x34>
 8010760:	6836      	ldr	r6, [r6, #0]
 8010762:	e7f6      	b.n	8010752 <__sfp+0x16>
 8010764:	220c      	movs	r2, #12
 8010766:	5ea5      	ldrsh	r5, [r4, r2]
 8010768:	2d00      	cmp	r5, #0
 801076a:	d00d      	beq.n	8010788 <__sfp+0x4c>
 801076c:	3468      	adds	r4, #104	; 0x68
 801076e:	e7f2      	b.n	8010756 <__sfp+0x1a>
 8010770:	2104      	movs	r1, #4
 8010772:	0038      	movs	r0, r7
 8010774:	f7ff ff98 	bl	80106a8 <__sfmoreglue>
 8010778:	6030      	str	r0, [r6, #0]
 801077a:	2800      	cmp	r0, #0
 801077c:	d1f0      	bne.n	8010760 <__sfp+0x24>
 801077e:	230c      	movs	r3, #12
 8010780:	0004      	movs	r4, r0
 8010782:	603b      	str	r3, [r7, #0]
 8010784:	0020      	movs	r0, r4
 8010786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010788:	0020      	movs	r0, r4
 801078a:	4b0a      	ldr	r3, [pc, #40]	; (80107b4 <__sfp+0x78>)
 801078c:	6665      	str	r5, [r4, #100]	; 0x64
 801078e:	6025      	str	r5, [r4, #0]
 8010790:	6065      	str	r5, [r4, #4]
 8010792:	60a5      	str	r5, [r4, #8]
 8010794:	60e3      	str	r3, [r4, #12]
 8010796:	6125      	str	r5, [r4, #16]
 8010798:	6165      	str	r5, [r4, #20]
 801079a:	61a5      	str	r5, [r4, #24]
 801079c:	2208      	movs	r2, #8
 801079e:	0029      	movs	r1, r5
 80107a0:	305c      	adds	r0, #92	; 0x5c
 80107a2:	f7fd fb6d 	bl	800de80 <memset>
 80107a6:	6365      	str	r5, [r4, #52]	; 0x34
 80107a8:	63a5      	str	r5, [r4, #56]	; 0x38
 80107aa:	64a5      	str	r5, [r4, #72]	; 0x48
 80107ac:	64e5      	str	r5, [r4, #76]	; 0x4c
 80107ae:	e7e9      	b.n	8010784 <__sfp+0x48>
 80107b0:	08012ba4 	.word	0x08012ba4
 80107b4:	ffff0001 	.word	0xffff0001

080107b8 <_fwalk_reent>:
 80107b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80107ba:	0004      	movs	r4, r0
 80107bc:	0007      	movs	r7, r0
 80107be:	2600      	movs	r6, #0
 80107c0:	9101      	str	r1, [sp, #4]
 80107c2:	3448      	adds	r4, #72	; 0x48
 80107c4:	2c00      	cmp	r4, #0
 80107c6:	d101      	bne.n	80107cc <_fwalk_reent+0x14>
 80107c8:	0030      	movs	r0, r6
 80107ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80107cc:	6863      	ldr	r3, [r4, #4]
 80107ce:	68a5      	ldr	r5, [r4, #8]
 80107d0:	9300      	str	r3, [sp, #0]
 80107d2:	9b00      	ldr	r3, [sp, #0]
 80107d4:	3b01      	subs	r3, #1
 80107d6:	9300      	str	r3, [sp, #0]
 80107d8:	d501      	bpl.n	80107de <_fwalk_reent+0x26>
 80107da:	6824      	ldr	r4, [r4, #0]
 80107dc:	e7f2      	b.n	80107c4 <_fwalk_reent+0xc>
 80107de:	89ab      	ldrh	r3, [r5, #12]
 80107e0:	2b01      	cmp	r3, #1
 80107e2:	d908      	bls.n	80107f6 <_fwalk_reent+0x3e>
 80107e4:	220e      	movs	r2, #14
 80107e6:	5eab      	ldrsh	r3, [r5, r2]
 80107e8:	3301      	adds	r3, #1
 80107ea:	d004      	beq.n	80107f6 <_fwalk_reent+0x3e>
 80107ec:	0029      	movs	r1, r5
 80107ee:	0038      	movs	r0, r7
 80107f0:	9b01      	ldr	r3, [sp, #4]
 80107f2:	4798      	blx	r3
 80107f4:	4306      	orrs	r6, r0
 80107f6:	3568      	adds	r5, #104	; 0x68
 80107f8:	e7eb      	b.n	80107d2 <_fwalk_reent+0x1a>

080107fa <rshift>:
 80107fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107fc:	0004      	movs	r4, r0
 80107fe:	6905      	ldr	r5, [r0, #16]
 8010800:	3414      	adds	r4, #20
 8010802:	114b      	asrs	r3, r1, #5
 8010804:	0026      	movs	r6, r4
 8010806:	429d      	cmp	r5, r3
 8010808:	dd14      	ble.n	8010834 <rshift+0x3a>
 801080a:	221f      	movs	r2, #31
 801080c:	00ad      	lsls	r5, r5, #2
 801080e:	009b      	lsls	r3, r3, #2
 8010810:	4011      	ands	r1, r2
 8010812:	1965      	adds	r5, r4, r5
 8010814:	18e3      	adds	r3, r4, r3
 8010816:	0022      	movs	r2, r4
 8010818:	2900      	cmp	r1, #0
 801081a:	d01e      	beq.n	801085a <rshift+0x60>
 801081c:	cb04      	ldmia	r3!, {r2}
 801081e:	2720      	movs	r7, #32
 8010820:	40ca      	lsrs	r2, r1
 8010822:	46a4      	mov	ip, r4
 8010824:	1a7f      	subs	r7, r7, r1
 8010826:	4666      	mov	r6, ip
 8010828:	429d      	cmp	r5, r3
 801082a:	d80b      	bhi.n	8010844 <rshift+0x4a>
 801082c:	6032      	str	r2, [r6, #0]
 801082e:	2a00      	cmp	r2, #0
 8010830:	d000      	beq.n	8010834 <rshift+0x3a>
 8010832:	3604      	adds	r6, #4
 8010834:	1b33      	subs	r3, r6, r4
 8010836:	109b      	asrs	r3, r3, #2
 8010838:	6103      	str	r3, [r0, #16]
 801083a:	42a6      	cmp	r6, r4
 801083c:	d101      	bne.n	8010842 <rshift+0x48>
 801083e:	2300      	movs	r3, #0
 8010840:	6143      	str	r3, [r0, #20]
 8010842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010844:	681e      	ldr	r6, [r3, #0]
 8010846:	40be      	lsls	r6, r7
 8010848:	4332      	orrs	r2, r6
 801084a:	4666      	mov	r6, ip
 801084c:	c604      	stmia	r6!, {r2}
 801084e:	cb04      	ldmia	r3!, {r2}
 8010850:	46b4      	mov	ip, r6
 8010852:	40ca      	lsrs	r2, r1
 8010854:	e7e7      	b.n	8010826 <rshift+0x2c>
 8010856:	cb02      	ldmia	r3!, {r1}
 8010858:	c202      	stmia	r2!, {r1}
 801085a:	0016      	movs	r6, r2
 801085c:	429d      	cmp	r5, r3
 801085e:	d8fa      	bhi.n	8010856 <rshift+0x5c>
 8010860:	e7e8      	b.n	8010834 <rshift+0x3a>

08010862 <__hexdig_fun>:
 8010862:	0003      	movs	r3, r0
 8010864:	3b30      	subs	r3, #48	; 0x30
 8010866:	2b09      	cmp	r3, #9
 8010868:	d803      	bhi.n	8010872 <__hexdig_fun+0x10>
 801086a:	3820      	subs	r0, #32
 801086c:	b2c3      	uxtb	r3, r0
 801086e:	0018      	movs	r0, r3
 8010870:	4770      	bx	lr
 8010872:	0003      	movs	r3, r0
 8010874:	3b61      	subs	r3, #97	; 0x61
 8010876:	2b05      	cmp	r3, #5
 8010878:	d801      	bhi.n	801087e <__hexdig_fun+0x1c>
 801087a:	3847      	subs	r0, #71	; 0x47
 801087c:	e7f6      	b.n	801086c <__hexdig_fun+0xa>
 801087e:	0002      	movs	r2, r0
 8010880:	3a41      	subs	r2, #65	; 0x41
 8010882:	2300      	movs	r3, #0
 8010884:	2a05      	cmp	r2, #5
 8010886:	d8f2      	bhi.n	801086e <__hexdig_fun+0xc>
 8010888:	3827      	subs	r0, #39	; 0x27
 801088a:	e7ef      	b.n	801086c <__hexdig_fun+0xa>

0801088c <__gethex>:
 801088c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801088e:	b08d      	sub	sp, #52	; 0x34
 8010890:	9005      	str	r0, [sp, #20]
 8010892:	9814      	ldr	r0, [sp, #80]	; 0x50
 8010894:	9109      	str	r1, [sp, #36]	; 0x24
 8010896:	9202      	str	r2, [sp, #8]
 8010898:	930a      	str	r3, [sp, #40]	; 0x28
 801089a:	f000 fae2 	bl	8010e62 <__localeconv_l>
 801089e:	6803      	ldr	r3, [r0, #0]
 80108a0:	0018      	movs	r0, r3
 80108a2:	9307      	str	r3, [sp, #28]
 80108a4:	f7f4 fc34 	bl	8005110 <strlen>
 80108a8:	2202      	movs	r2, #2
 80108aa:	9b07      	ldr	r3, [sp, #28]
 80108ac:	4252      	negs	r2, r2
 80108ae:	181b      	adds	r3, r3, r0
 80108b0:	3b01      	subs	r3, #1
 80108b2:	781b      	ldrb	r3, [r3, #0]
 80108b4:	9004      	str	r0, [sp, #16]
 80108b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80108b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108ba:	6819      	ldr	r1, [r3, #0]
 80108bc:	1c8b      	adds	r3, r1, #2
 80108be:	1a52      	subs	r2, r2, r1
 80108c0:	18d1      	adds	r1, r2, r3
 80108c2:	9301      	str	r3, [sp, #4]
 80108c4:	9108      	str	r1, [sp, #32]
 80108c6:	9901      	ldr	r1, [sp, #4]
 80108c8:	3301      	adds	r3, #1
 80108ca:	7808      	ldrb	r0, [r1, #0]
 80108cc:	2830      	cmp	r0, #48	; 0x30
 80108ce:	d0f7      	beq.n	80108c0 <__gethex+0x34>
 80108d0:	f7ff ffc7 	bl	8010862 <__hexdig_fun>
 80108d4:	1e07      	subs	r7, r0, #0
 80108d6:	d000      	beq.n	80108da <__gethex+0x4e>
 80108d8:	e06f      	b.n	80109ba <__gethex+0x12e>
 80108da:	9a04      	ldr	r2, [sp, #16]
 80108dc:	9907      	ldr	r1, [sp, #28]
 80108de:	9801      	ldr	r0, [sp, #4]
 80108e0:	f001 fa9e 	bl	8011e20 <strncmp>
 80108e4:	2800      	cmp	r0, #0
 80108e6:	d000      	beq.n	80108ea <__gethex+0x5e>
 80108e8:	e06d      	b.n	80109c6 <__gethex+0x13a>
 80108ea:	9b01      	ldr	r3, [sp, #4]
 80108ec:	9a04      	ldr	r2, [sp, #16]
 80108ee:	189c      	adds	r4, r3, r2
 80108f0:	7820      	ldrb	r0, [r4, #0]
 80108f2:	f7ff ffb6 	bl	8010862 <__hexdig_fun>
 80108f6:	2800      	cmp	r0, #0
 80108f8:	d069      	beq.n	80109ce <__gethex+0x142>
 80108fa:	9401      	str	r4, [sp, #4]
 80108fc:	9b01      	ldr	r3, [sp, #4]
 80108fe:	7818      	ldrb	r0, [r3, #0]
 8010900:	2830      	cmp	r0, #48	; 0x30
 8010902:	d009      	beq.n	8010918 <__gethex+0x8c>
 8010904:	f7ff ffad 	bl	8010862 <__hexdig_fun>
 8010908:	4243      	negs	r3, r0
 801090a:	4143      	adcs	r3, r0
 801090c:	9303      	str	r3, [sp, #12]
 801090e:	2301      	movs	r3, #1
 8010910:	0026      	movs	r6, r4
 8010912:	9308      	str	r3, [sp, #32]
 8010914:	9c01      	ldr	r4, [sp, #4]
 8010916:	e004      	b.n	8010922 <__gethex+0x96>
 8010918:	9b01      	ldr	r3, [sp, #4]
 801091a:	3301      	adds	r3, #1
 801091c:	9301      	str	r3, [sp, #4]
 801091e:	e7ed      	b.n	80108fc <__gethex+0x70>
 8010920:	3401      	adds	r4, #1
 8010922:	7820      	ldrb	r0, [r4, #0]
 8010924:	f7ff ff9d 	bl	8010862 <__hexdig_fun>
 8010928:	2800      	cmp	r0, #0
 801092a:	d1f9      	bne.n	8010920 <__gethex+0x94>
 801092c:	9a04      	ldr	r2, [sp, #16]
 801092e:	9907      	ldr	r1, [sp, #28]
 8010930:	0020      	movs	r0, r4
 8010932:	f001 fa75 	bl	8011e20 <strncmp>
 8010936:	2800      	cmp	r0, #0
 8010938:	d109      	bne.n	801094e <__gethex+0xc2>
 801093a:	2e00      	cmp	r6, #0
 801093c:	d10a      	bne.n	8010954 <__gethex+0xc8>
 801093e:	9b04      	ldr	r3, [sp, #16]
 8010940:	18e4      	adds	r4, r4, r3
 8010942:	0026      	movs	r6, r4
 8010944:	7820      	ldrb	r0, [r4, #0]
 8010946:	f7ff ff8c 	bl	8010862 <__hexdig_fun>
 801094a:	2800      	cmp	r0, #0
 801094c:	d139      	bne.n	80109c2 <__gethex+0x136>
 801094e:	2700      	movs	r7, #0
 8010950:	42be      	cmp	r6, r7
 8010952:	d001      	beq.n	8010958 <__gethex+0xcc>
 8010954:	1b37      	subs	r7, r6, r4
 8010956:	00bf      	lsls	r7, r7, #2
 8010958:	7823      	ldrb	r3, [r4, #0]
 801095a:	2b50      	cmp	r3, #80	; 0x50
 801095c:	d001      	beq.n	8010962 <__gethex+0xd6>
 801095e:	2b70      	cmp	r3, #112	; 0x70
 8010960:	d142      	bne.n	80109e8 <__gethex+0x15c>
 8010962:	7863      	ldrb	r3, [r4, #1]
 8010964:	2b2b      	cmp	r3, #43	; 0x2b
 8010966:	d034      	beq.n	80109d2 <__gethex+0x146>
 8010968:	2b2d      	cmp	r3, #45	; 0x2d
 801096a:	d036      	beq.n	80109da <__gethex+0x14e>
 801096c:	2300      	movs	r3, #0
 801096e:	1c66      	adds	r6, r4, #1
 8010970:	9306      	str	r3, [sp, #24]
 8010972:	7830      	ldrb	r0, [r6, #0]
 8010974:	f7ff ff75 	bl	8010862 <__hexdig_fun>
 8010978:	1e43      	subs	r3, r0, #1
 801097a:	b2db      	uxtb	r3, r3
 801097c:	2b18      	cmp	r3, #24
 801097e:	d833      	bhi.n	80109e8 <__gethex+0x15c>
 8010980:	3810      	subs	r0, #16
 8010982:	0005      	movs	r5, r0
 8010984:	3601      	adds	r6, #1
 8010986:	7830      	ldrb	r0, [r6, #0]
 8010988:	f7ff ff6b 	bl	8010862 <__hexdig_fun>
 801098c:	1e43      	subs	r3, r0, #1
 801098e:	b2db      	uxtb	r3, r3
 8010990:	2b18      	cmp	r3, #24
 8010992:	d924      	bls.n	80109de <__gethex+0x152>
 8010994:	9b06      	ldr	r3, [sp, #24]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d000      	beq.n	801099c <__gethex+0x110>
 801099a:	426d      	negs	r5, r5
 801099c:	197f      	adds	r7, r7, r5
 801099e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109a0:	601e      	str	r6, [r3, #0]
 80109a2:	9b03      	ldr	r3, [sp, #12]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d021      	beq.n	80109ec <__gethex+0x160>
 80109a8:	9b08      	ldr	r3, [sp, #32]
 80109aa:	2606      	movs	r6, #6
 80109ac:	425a      	negs	r2, r3
 80109ae:	4153      	adcs	r3, r2
 80109b0:	425b      	negs	r3, r3
 80109b2:	401e      	ands	r6, r3
 80109b4:	0030      	movs	r0, r6
 80109b6:	b00d      	add	sp, #52	; 0x34
 80109b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109ba:	2300      	movs	r3, #0
 80109bc:	9303      	str	r3, [sp, #12]
 80109be:	001e      	movs	r6, r3
 80109c0:	e7a8      	b.n	8010914 <__gethex+0x88>
 80109c2:	3401      	adds	r4, #1
 80109c4:	e7be      	b.n	8010944 <__gethex+0xb8>
 80109c6:	9c01      	ldr	r4, [sp, #4]
 80109c8:	2301      	movs	r3, #1
 80109ca:	9303      	str	r3, [sp, #12]
 80109cc:	e7c4      	b.n	8010958 <__gethex+0xcc>
 80109ce:	0007      	movs	r7, r0
 80109d0:	e7fa      	b.n	80109c8 <__gethex+0x13c>
 80109d2:	2300      	movs	r3, #0
 80109d4:	9306      	str	r3, [sp, #24]
 80109d6:	1ca6      	adds	r6, r4, #2
 80109d8:	e7cb      	b.n	8010972 <__gethex+0xe6>
 80109da:	2301      	movs	r3, #1
 80109dc:	e7fa      	b.n	80109d4 <__gethex+0x148>
 80109de:	230a      	movs	r3, #10
 80109e0:	435d      	muls	r5, r3
 80109e2:	182d      	adds	r5, r5, r0
 80109e4:	3d10      	subs	r5, #16
 80109e6:	e7cd      	b.n	8010984 <__gethex+0xf8>
 80109e8:	0026      	movs	r6, r4
 80109ea:	e7d8      	b.n	801099e <__gethex+0x112>
 80109ec:	9b01      	ldr	r3, [sp, #4]
 80109ee:	9903      	ldr	r1, [sp, #12]
 80109f0:	1ae3      	subs	r3, r4, r3
 80109f2:	3b01      	subs	r3, #1
 80109f4:	2b07      	cmp	r3, #7
 80109f6:	dc47      	bgt.n	8010a88 <__gethex+0x1fc>
 80109f8:	9805      	ldr	r0, [sp, #20]
 80109fa:	f000 fa68 	bl	8010ece <_Balloc>
 80109fe:	0003      	movs	r3, r0
 8010a00:	3314      	adds	r3, #20
 8010a02:	9303      	str	r3, [sp, #12]
 8010a04:	9308      	str	r3, [sp, #32]
 8010a06:	2300      	movs	r3, #0
 8010a08:	0005      	movs	r5, r0
 8010a0a:	001e      	movs	r6, r3
 8010a0c:	9306      	str	r3, [sp, #24]
 8010a0e:	9b01      	ldr	r3, [sp, #4]
 8010a10:	42a3      	cmp	r3, r4
 8010a12:	d33c      	bcc.n	8010a8e <__gethex+0x202>
 8010a14:	9c08      	ldr	r4, [sp, #32]
 8010a16:	9b03      	ldr	r3, [sp, #12]
 8010a18:	c440      	stmia	r4!, {r6}
 8010a1a:	1ae4      	subs	r4, r4, r3
 8010a1c:	10a4      	asrs	r4, r4, #2
 8010a1e:	612c      	str	r4, [r5, #16]
 8010a20:	0030      	movs	r0, r6
 8010a22:	f000 fb21 	bl	8011068 <__hi0bits>
 8010a26:	9b02      	ldr	r3, [sp, #8]
 8010a28:	0164      	lsls	r4, r4, #5
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	1a26      	subs	r6, r4, r0
 8010a2e:	9301      	str	r3, [sp, #4]
 8010a30:	429e      	cmp	r6, r3
 8010a32:	dd5f      	ble.n	8010af4 <__gethex+0x268>
 8010a34:	1af6      	subs	r6, r6, r3
 8010a36:	0031      	movs	r1, r6
 8010a38:	0028      	movs	r0, r5
 8010a3a:	f000 fe1c 	bl	8011676 <__any_on>
 8010a3e:	1e04      	subs	r4, r0, #0
 8010a40:	d00f      	beq.n	8010a62 <__gethex+0x1d6>
 8010a42:	2401      	movs	r4, #1
 8010a44:	211f      	movs	r1, #31
 8010a46:	0020      	movs	r0, r4
 8010a48:	1e73      	subs	r3, r6, #1
 8010a4a:	4019      	ands	r1, r3
 8010a4c:	4088      	lsls	r0, r1
 8010a4e:	0001      	movs	r1, r0
 8010a50:	115a      	asrs	r2, r3, #5
 8010a52:	9803      	ldr	r0, [sp, #12]
 8010a54:	0092      	lsls	r2, r2, #2
 8010a56:	5812      	ldr	r2, [r2, r0]
 8010a58:	420a      	tst	r2, r1
 8010a5a:	d002      	beq.n	8010a62 <__gethex+0x1d6>
 8010a5c:	42a3      	cmp	r3, r4
 8010a5e:	dc41      	bgt.n	8010ae4 <__gethex+0x258>
 8010a60:	2402      	movs	r4, #2
 8010a62:	0031      	movs	r1, r6
 8010a64:	0028      	movs	r0, r5
 8010a66:	f7ff fec8 	bl	80107fa <rshift>
 8010a6a:	19bf      	adds	r7, r7, r6
 8010a6c:	9b02      	ldr	r3, [sp, #8]
 8010a6e:	689b      	ldr	r3, [r3, #8]
 8010a70:	9304      	str	r3, [sp, #16]
 8010a72:	42bb      	cmp	r3, r7
 8010a74:	da4e      	bge.n	8010b14 <__gethex+0x288>
 8010a76:	0029      	movs	r1, r5
 8010a78:	9805      	ldr	r0, [sp, #20]
 8010a7a:	f000 fa60 	bl	8010f3e <_Bfree>
 8010a7e:	2300      	movs	r3, #0
 8010a80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010a82:	26a3      	movs	r6, #163	; 0xa3
 8010a84:	6013      	str	r3, [r2, #0]
 8010a86:	e795      	b.n	80109b4 <__gethex+0x128>
 8010a88:	3101      	adds	r1, #1
 8010a8a:	105b      	asrs	r3, r3, #1
 8010a8c:	e7b2      	b.n	80109f4 <__gethex+0x168>
 8010a8e:	1e63      	subs	r3, r4, #1
 8010a90:	9309      	str	r3, [sp, #36]	; 0x24
 8010a92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010a94:	781b      	ldrb	r3, [r3, #0]
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d015      	beq.n	8010ac6 <__gethex+0x23a>
 8010a9a:	9b06      	ldr	r3, [sp, #24]
 8010a9c:	2b20      	cmp	r3, #32
 8010a9e:	d105      	bne.n	8010aac <__gethex+0x220>
 8010aa0:	9b08      	ldr	r3, [sp, #32]
 8010aa2:	601e      	str	r6, [r3, #0]
 8010aa4:	2600      	movs	r6, #0
 8010aa6:	3304      	adds	r3, #4
 8010aa8:	9308      	str	r3, [sp, #32]
 8010aaa:	9606      	str	r6, [sp, #24]
 8010aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010aae:	7818      	ldrb	r0, [r3, #0]
 8010ab0:	f7ff fed7 	bl	8010862 <__hexdig_fun>
 8010ab4:	230f      	movs	r3, #15
 8010ab6:	4018      	ands	r0, r3
 8010ab8:	9b06      	ldr	r3, [sp, #24]
 8010aba:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010abc:	4098      	lsls	r0, r3
 8010abe:	3304      	adds	r3, #4
 8010ac0:	4306      	orrs	r6, r0
 8010ac2:	9306      	str	r3, [sp, #24]
 8010ac4:	e7a3      	b.n	8010a0e <__gethex+0x182>
 8010ac6:	2301      	movs	r3, #1
 8010ac8:	9a04      	ldr	r2, [sp, #16]
 8010aca:	1a9c      	subs	r4, r3, r2
 8010acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ace:	191c      	adds	r4, r3, r4
 8010ad0:	9b01      	ldr	r3, [sp, #4]
 8010ad2:	429c      	cmp	r4, r3
 8010ad4:	d3e1      	bcc.n	8010a9a <__gethex+0x20e>
 8010ad6:	9907      	ldr	r1, [sp, #28]
 8010ad8:	0020      	movs	r0, r4
 8010ada:	f001 f9a1 	bl	8011e20 <strncmp>
 8010ade:	2800      	cmp	r0, #0
 8010ae0:	d1db      	bne.n	8010a9a <__gethex+0x20e>
 8010ae2:	e794      	b.n	8010a0e <__gethex+0x182>
 8010ae4:	1eb1      	subs	r1, r6, #2
 8010ae6:	0028      	movs	r0, r5
 8010ae8:	f000 fdc5 	bl	8011676 <__any_on>
 8010aec:	2800      	cmp	r0, #0
 8010aee:	d0b7      	beq.n	8010a60 <__gethex+0x1d4>
 8010af0:	2403      	movs	r4, #3
 8010af2:	e7b6      	b.n	8010a62 <__gethex+0x1d6>
 8010af4:	9b01      	ldr	r3, [sp, #4]
 8010af6:	2400      	movs	r4, #0
 8010af8:	429e      	cmp	r6, r3
 8010afa:	dab7      	bge.n	8010a6c <__gethex+0x1e0>
 8010afc:	1b9e      	subs	r6, r3, r6
 8010afe:	0029      	movs	r1, r5
 8010b00:	0032      	movs	r2, r6
 8010b02:	9805      	ldr	r0, [sp, #20]
 8010b04:	f000 fbe4 	bl	80112d0 <__lshift>
 8010b08:	0003      	movs	r3, r0
 8010b0a:	3314      	adds	r3, #20
 8010b0c:	0005      	movs	r5, r0
 8010b0e:	1bbf      	subs	r7, r7, r6
 8010b10:	9303      	str	r3, [sp, #12]
 8010b12:	e7ab      	b.n	8010a6c <__gethex+0x1e0>
 8010b14:	9b02      	ldr	r3, [sp, #8]
 8010b16:	685e      	ldr	r6, [r3, #4]
 8010b18:	42be      	cmp	r6, r7
 8010b1a:	dd6b      	ble.n	8010bf4 <__gethex+0x368>
 8010b1c:	9b01      	ldr	r3, [sp, #4]
 8010b1e:	1bf6      	subs	r6, r6, r7
 8010b20:	42b3      	cmp	r3, r6
 8010b22:	dc32      	bgt.n	8010b8a <__gethex+0x2fe>
 8010b24:	9b02      	ldr	r3, [sp, #8]
 8010b26:	68db      	ldr	r3, [r3, #12]
 8010b28:	2b02      	cmp	r3, #2
 8010b2a:	d026      	beq.n	8010b7a <__gethex+0x2ee>
 8010b2c:	2b03      	cmp	r3, #3
 8010b2e:	d028      	beq.n	8010b82 <__gethex+0x2f6>
 8010b30:	2b01      	cmp	r3, #1
 8010b32:	d119      	bne.n	8010b68 <__gethex+0x2dc>
 8010b34:	9b01      	ldr	r3, [sp, #4]
 8010b36:	42b3      	cmp	r3, r6
 8010b38:	d116      	bne.n	8010b68 <__gethex+0x2dc>
 8010b3a:	2b01      	cmp	r3, #1
 8010b3c:	dc0d      	bgt.n	8010b5a <__gethex+0x2ce>
 8010b3e:	9b02      	ldr	r3, [sp, #8]
 8010b40:	2662      	movs	r6, #98	; 0x62
 8010b42:	685b      	ldr	r3, [r3, #4]
 8010b44:	9301      	str	r3, [sp, #4]
 8010b46:	9a01      	ldr	r2, [sp, #4]
 8010b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b4a:	601a      	str	r2, [r3, #0]
 8010b4c:	2301      	movs	r3, #1
 8010b4e:	9a03      	ldr	r2, [sp, #12]
 8010b50:	612b      	str	r3, [r5, #16]
 8010b52:	6013      	str	r3, [r2, #0]
 8010b54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010b56:	601d      	str	r5, [r3, #0]
 8010b58:	e72c      	b.n	80109b4 <__gethex+0x128>
 8010b5a:	9901      	ldr	r1, [sp, #4]
 8010b5c:	0028      	movs	r0, r5
 8010b5e:	3901      	subs	r1, #1
 8010b60:	f000 fd89 	bl	8011676 <__any_on>
 8010b64:	2800      	cmp	r0, #0
 8010b66:	d1ea      	bne.n	8010b3e <__gethex+0x2b2>
 8010b68:	0029      	movs	r1, r5
 8010b6a:	9805      	ldr	r0, [sp, #20]
 8010b6c:	f000 f9e7 	bl	8010f3e <_Bfree>
 8010b70:	2300      	movs	r3, #0
 8010b72:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010b74:	2650      	movs	r6, #80	; 0x50
 8010b76:	6013      	str	r3, [r2, #0]
 8010b78:	e71c      	b.n	80109b4 <__gethex+0x128>
 8010b7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d0de      	beq.n	8010b3e <__gethex+0x2b2>
 8010b80:	e7f2      	b.n	8010b68 <__gethex+0x2dc>
 8010b82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d1da      	bne.n	8010b3e <__gethex+0x2b2>
 8010b88:	e7ee      	b.n	8010b68 <__gethex+0x2dc>
 8010b8a:	1e77      	subs	r7, r6, #1
 8010b8c:	2c00      	cmp	r4, #0
 8010b8e:	d12f      	bne.n	8010bf0 <__gethex+0x364>
 8010b90:	2f00      	cmp	r7, #0
 8010b92:	d004      	beq.n	8010b9e <__gethex+0x312>
 8010b94:	0039      	movs	r1, r7
 8010b96:	0028      	movs	r0, r5
 8010b98:	f000 fd6d 	bl	8011676 <__any_on>
 8010b9c:	0004      	movs	r4, r0
 8010b9e:	231f      	movs	r3, #31
 8010ba0:	117a      	asrs	r2, r7, #5
 8010ba2:	401f      	ands	r7, r3
 8010ba4:	3b1e      	subs	r3, #30
 8010ba6:	40bb      	lsls	r3, r7
 8010ba8:	9903      	ldr	r1, [sp, #12]
 8010baa:	0092      	lsls	r2, r2, #2
 8010bac:	5852      	ldr	r2, [r2, r1]
 8010bae:	421a      	tst	r2, r3
 8010bb0:	d001      	beq.n	8010bb6 <__gethex+0x32a>
 8010bb2:	2302      	movs	r3, #2
 8010bb4:	431c      	orrs	r4, r3
 8010bb6:	9b01      	ldr	r3, [sp, #4]
 8010bb8:	0031      	movs	r1, r6
 8010bba:	1b9b      	subs	r3, r3, r6
 8010bbc:	2602      	movs	r6, #2
 8010bbe:	0028      	movs	r0, r5
 8010bc0:	9301      	str	r3, [sp, #4]
 8010bc2:	f7ff fe1a 	bl	80107fa <rshift>
 8010bc6:	9b02      	ldr	r3, [sp, #8]
 8010bc8:	685f      	ldr	r7, [r3, #4]
 8010bca:	2c00      	cmp	r4, #0
 8010bcc:	d040      	beq.n	8010c50 <__gethex+0x3c4>
 8010bce:	9b02      	ldr	r3, [sp, #8]
 8010bd0:	68db      	ldr	r3, [r3, #12]
 8010bd2:	2b02      	cmp	r3, #2
 8010bd4:	d010      	beq.n	8010bf8 <__gethex+0x36c>
 8010bd6:	2b03      	cmp	r3, #3
 8010bd8:	d012      	beq.n	8010c00 <__gethex+0x374>
 8010bda:	2b01      	cmp	r3, #1
 8010bdc:	d106      	bne.n	8010bec <__gethex+0x360>
 8010bde:	07a2      	lsls	r2, r4, #30
 8010be0:	d504      	bpl.n	8010bec <__gethex+0x360>
 8010be2:	9a03      	ldr	r2, [sp, #12]
 8010be4:	6812      	ldr	r2, [r2, #0]
 8010be6:	4314      	orrs	r4, r2
 8010be8:	421c      	tst	r4, r3
 8010bea:	d10c      	bne.n	8010c06 <__gethex+0x37a>
 8010bec:	2310      	movs	r3, #16
 8010bee:	e02e      	b.n	8010c4e <__gethex+0x3c2>
 8010bf0:	2401      	movs	r4, #1
 8010bf2:	e7d4      	b.n	8010b9e <__gethex+0x312>
 8010bf4:	2601      	movs	r6, #1
 8010bf6:	e7e8      	b.n	8010bca <__gethex+0x33e>
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010bfc:	1a9b      	subs	r3, r3, r2
 8010bfe:	9313      	str	r3, [sp, #76]	; 0x4c
 8010c00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d0f2      	beq.n	8010bec <__gethex+0x360>
 8010c06:	692c      	ldr	r4, [r5, #16]
 8010c08:	00a3      	lsls	r3, r4, #2
 8010c0a:	9304      	str	r3, [sp, #16]
 8010c0c:	002b      	movs	r3, r5
 8010c0e:	00a2      	lsls	r2, r4, #2
 8010c10:	3314      	adds	r3, #20
 8010c12:	1899      	adds	r1, r3, r2
 8010c14:	2200      	movs	r2, #0
 8010c16:	4694      	mov	ip, r2
 8010c18:	681a      	ldr	r2, [r3, #0]
 8010c1a:	1c50      	adds	r0, r2, #1
 8010c1c:	d01d      	beq.n	8010c5a <__gethex+0x3ce>
 8010c1e:	3201      	adds	r2, #1
 8010c20:	601a      	str	r2, [r3, #0]
 8010c22:	002b      	movs	r3, r5
 8010c24:	3314      	adds	r3, #20
 8010c26:	2e02      	cmp	r6, #2
 8010c28:	d13a      	bne.n	8010ca0 <__gethex+0x414>
 8010c2a:	9a02      	ldr	r2, [sp, #8]
 8010c2c:	9901      	ldr	r1, [sp, #4]
 8010c2e:	6812      	ldr	r2, [r2, #0]
 8010c30:	3a01      	subs	r2, #1
 8010c32:	428a      	cmp	r2, r1
 8010c34:	d10a      	bne.n	8010c4c <__gethex+0x3c0>
 8010c36:	114a      	asrs	r2, r1, #5
 8010c38:	211f      	movs	r1, #31
 8010c3a:	9801      	ldr	r0, [sp, #4]
 8010c3c:	0092      	lsls	r2, r2, #2
 8010c3e:	4001      	ands	r1, r0
 8010c40:	2001      	movs	r0, #1
 8010c42:	0004      	movs	r4, r0
 8010c44:	408c      	lsls	r4, r1
 8010c46:	58d3      	ldr	r3, [r2, r3]
 8010c48:	4223      	tst	r3, r4
 8010c4a:	d148      	bne.n	8010cde <__gethex+0x452>
 8010c4c:	2320      	movs	r3, #32
 8010c4e:	431e      	orrs	r6, r3
 8010c50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010c52:	601d      	str	r5, [r3, #0]
 8010c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c56:	601f      	str	r7, [r3, #0]
 8010c58:	e6ac      	b.n	80109b4 <__gethex+0x128>
 8010c5a:	4662      	mov	r2, ip
 8010c5c:	c304      	stmia	r3!, {r2}
 8010c5e:	4299      	cmp	r1, r3
 8010c60:	d8da      	bhi.n	8010c18 <__gethex+0x38c>
 8010c62:	68ab      	ldr	r3, [r5, #8]
 8010c64:	429c      	cmp	r4, r3
 8010c66:	db12      	blt.n	8010c8e <__gethex+0x402>
 8010c68:	686b      	ldr	r3, [r5, #4]
 8010c6a:	9805      	ldr	r0, [sp, #20]
 8010c6c:	1c59      	adds	r1, r3, #1
 8010c6e:	f000 f92e 	bl	8010ece <_Balloc>
 8010c72:	0029      	movs	r1, r5
 8010c74:	692b      	ldr	r3, [r5, #16]
 8010c76:	9003      	str	r0, [sp, #12]
 8010c78:	1c9a      	adds	r2, r3, #2
 8010c7a:	0092      	lsls	r2, r2, #2
 8010c7c:	310c      	adds	r1, #12
 8010c7e:	300c      	adds	r0, #12
 8010c80:	f7fd f8f5 	bl	800de6e <memcpy>
 8010c84:	0029      	movs	r1, r5
 8010c86:	9805      	ldr	r0, [sp, #20]
 8010c88:	f000 f959 	bl	8010f3e <_Bfree>
 8010c8c:	9d03      	ldr	r5, [sp, #12]
 8010c8e:	692b      	ldr	r3, [r5, #16]
 8010c90:	1c5a      	adds	r2, r3, #1
 8010c92:	612a      	str	r2, [r5, #16]
 8010c94:	2201      	movs	r2, #1
 8010c96:	3304      	adds	r3, #4
 8010c98:	009b      	lsls	r3, r3, #2
 8010c9a:	18eb      	adds	r3, r5, r3
 8010c9c:	605a      	str	r2, [r3, #4]
 8010c9e:	e7c0      	b.n	8010c22 <__gethex+0x396>
 8010ca0:	692a      	ldr	r2, [r5, #16]
 8010ca2:	42a2      	cmp	r2, r4
 8010ca4:	dd0a      	ble.n	8010cbc <__gethex+0x430>
 8010ca6:	2101      	movs	r1, #1
 8010ca8:	0028      	movs	r0, r5
 8010caa:	f7ff fda6 	bl	80107fa <rshift>
 8010cae:	9b02      	ldr	r3, [sp, #8]
 8010cb0:	3701      	adds	r7, #1
 8010cb2:	689b      	ldr	r3, [r3, #8]
 8010cb4:	2601      	movs	r6, #1
 8010cb6:	42bb      	cmp	r3, r7
 8010cb8:	dac8      	bge.n	8010c4c <__gethex+0x3c0>
 8010cba:	e6dc      	b.n	8010a76 <__gethex+0x1ea>
 8010cbc:	241f      	movs	r4, #31
 8010cbe:	9a01      	ldr	r2, [sp, #4]
 8010cc0:	2601      	movs	r6, #1
 8010cc2:	4022      	ands	r2, r4
 8010cc4:	1e14      	subs	r4, r2, #0
 8010cc6:	d0c1      	beq.n	8010c4c <__gethex+0x3c0>
 8010cc8:	9a04      	ldr	r2, [sp, #16]
 8010cca:	189b      	adds	r3, r3, r2
 8010ccc:	3b04      	subs	r3, #4
 8010cce:	6818      	ldr	r0, [r3, #0]
 8010cd0:	f000 f9ca 	bl	8011068 <__hi0bits>
 8010cd4:	2120      	movs	r1, #32
 8010cd6:	1b0c      	subs	r4, r1, r4
 8010cd8:	42a0      	cmp	r0, r4
 8010cda:	dbe4      	blt.n	8010ca6 <__gethex+0x41a>
 8010cdc:	e7b6      	b.n	8010c4c <__gethex+0x3c0>
 8010cde:	0006      	movs	r6, r0
 8010ce0:	e7b4      	b.n	8010c4c <__gethex+0x3c0>

08010ce2 <L_shift>:
 8010ce2:	2308      	movs	r3, #8
 8010ce4:	b570      	push	{r4, r5, r6, lr}
 8010ce6:	2520      	movs	r5, #32
 8010ce8:	1a9a      	subs	r2, r3, r2
 8010cea:	0092      	lsls	r2, r2, #2
 8010cec:	1aad      	subs	r5, r5, r2
 8010cee:	6843      	ldr	r3, [r0, #4]
 8010cf0:	6806      	ldr	r6, [r0, #0]
 8010cf2:	001c      	movs	r4, r3
 8010cf4:	40ac      	lsls	r4, r5
 8010cf6:	40d3      	lsrs	r3, r2
 8010cf8:	4334      	orrs	r4, r6
 8010cfa:	6004      	str	r4, [r0, #0]
 8010cfc:	6043      	str	r3, [r0, #4]
 8010cfe:	3004      	adds	r0, #4
 8010d00:	4288      	cmp	r0, r1
 8010d02:	d3f4      	bcc.n	8010cee <L_shift+0xc>
 8010d04:	bd70      	pop	{r4, r5, r6, pc}

08010d06 <__match>:
 8010d06:	b530      	push	{r4, r5, lr}
 8010d08:	6803      	ldr	r3, [r0, #0]
 8010d0a:	780c      	ldrb	r4, [r1, #0]
 8010d0c:	3301      	adds	r3, #1
 8010d0e:	2c00      	cmp	r4, #0
 8010d10:	d102      	bne.n	8010d18 <__match+0x12>
 8010d12:	6003      	str	r3, [r0, #0]
 8010d14:	2001      	movs	r0, #1
 8010d16:	bd30      	pop	{r4, r5, pc}
 8010d18:	781a      	ldrb	r2, [r3, #0]
 8010d1a:	0015      	movs	r5, r2
 8010d1c:	3d41      	subs	r5, #65	; 0x41
 8010d1e:	2d19      	cmp	r5, #25
 8010d20:	d800      	bhi.n	8010d24 <__match+0x1e>
 8010d22:	3220      	adds	r2, #32
 8010d24:	3101      	adds	r1, #1
 8010d26:	42a2      	cmp	r2, r4
 8010d28:	d0ef      	beq.n	8010d0a <__match+0x4>
 8010d2a:	2000      	movs	r0, #0
 8010d2c:	e7f3      	b.n	8010d16 <__match+0x10>

08010d2e <__hexnan>:
 8010d2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d30:	b08b      	sub	sp, #44	; 0x2c
 8010d32:	9201      	str	r2, [sp, #4]
 8010d34:	680a      	ldr	r2, [r1, #0]
 8010d36:	9901      	ldr	r1, [sp, #4]
 8010d38:	1153      	asrs	r3, r2, #5
 8010d3a:	009b      	lsls	r3, r3, #2
 8010d3c:	18cb      	adds	r3, r1, r3
 8010d3e:	9304      	str	r3, [sp, #16]
 8010d40:	231f      	movs	r3, #31
 8010d42:	401a      	ands	r2, r3
 8010d44:	9008      	str	r0, [sp, #32]
 8010d46:	9206      	str	r2, [sp, #24]
 8010d48:	d002      	beq.n	8010d50 <__hexnan+0x22>
 8010d4a:	9b04      	ldr	r3, [sp, #16]
 8010d4c:	3304      	adds	r3, #4
 8010d4e:	9304      	str	r3, [sp, #16]
 8010d50:	9b04      	ldr	r3, [sp, #16]
 8010d52:	2500      	movs	r5, #0
 8010d54:	1f1e      	subs	r6, r3, #4
 8010d56:	0037      	movs	r7, r6
 8010d58:	0034      	movs	r4, r6
 8010d5a:	9b08      	ldr	r3, [sp, #32]
 8010d5c:	6035      	str	r5, [r6, #0]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	9507      	str	r5, [sp, #28]
 8010d62:	9305      	str	r3, [sp, #20]
 8010d64:	9502      	str	r5, [sp, #8]
 8010d66:	9b05      	ldr	r3, [sp, #20]
 8010d68:	3301      	adds	r3, #1
 8010d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8010d6c:	9b05      	ldr	r3, [sp, #20]
 8010d6e:	785b      	ldrb	r3, [r3, #1]
 8010d70:	9303      	str	r3, [sp, #12]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d028      	beq.n	8010dc8 <__hexnan+0x9a>
 8010d76:	9803      	ldr	r0, [sp, #12]
 8010d78:	f7ff fd73 	bl	8010862 <__hexdig_fun>
 8010d7c:	2800      	cmp	r0, #0
 8010d7e:	d145      	bne.n	8010e0c <__hexnan+0xde>
 8010d80:	9b03      	ldr	r3, [sp, #12]
 8010d82:	2b20      	cmp	r3, #32
 8010d84:	d819      	bhi.n	8010dba <__hexnan+0x8c>
 8010d86:	9b02      	ldr	r3, [sp, #8]
 8010d88:	9a07      	ldr	r2, [sp, #28]
 8010d8a:	4293      	cmp	r3, r2
 8010d8c:	dd12      	ble.n	8010db4 <__hexnan+0x86>
 8010d8e:	42bc      	cmp	r4, r7
 8010d90:	d206      	bcs.n	8010da0 <__hexnan+0x72>
 8010d92:	2d07      	cmp	r5, #7
 8010d94:	dc04      	bgt.n	8010da0 <__hexnan+0x72>
 8010d96:	002a      	movs	r2, r5
 8010d98:	0039      	movs	r1, r7
 8010d9a:	0020      	movs	r0, r4
 8010d9c:	f7ff ffa1 	bl	8010ce2 <L_shift>
 8010da0:	9b01      	ldr	r3, [sp, #4]
 8010da2:	2508      	movs	r5, #8
 8010da4:	429c      	cmp	r4, r3
 8010da6:	d905      	bls.n	8010db4 <__hexnan+0x86>
 8010da8:	1f27      	subs	r7, r4, #4
 8010daa:	2500      	movs	r5, #0
 8010dac:	003c      	movs	r4, r7
 8010dae:	9b02      	ldr	r3, [sp, #8]
 8010db0:	603d      	str	r5, [r7, #0]
 8010db2:	9307      	str	r3, [sp, #28]
 8010db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010db6:	9305      	str	r3, [sp, #20]
 8010db8:	e7d5      	b.n	8010d66 <__hexnan+0x38>
 8010dba:	9b03      	ldr	r3, [sp, #12]
 8010dbc:	2b29      	cmp	r3, #41	; 0x29
 8010dbe:	d14a      	bne.n	8010e56 <__hexnan+0x128>
 8010dc0:	9b05      	ldr	r3, [sp, #20]
 8010dc2:	9a08      	ldr	r2, [sp, #32]
 8010dc4:	3302      	adds	r3, #2
 8010dc6:	6013      	str	r3, [r2, #0]
 8010dc8:	9b02      	ldr	r3, [sp, #8]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d043      	beq.n	8010e56 <__hexnan+0x128>
 8010dce:	42bc      	cmp	r4, r7
 8010dd0:	d206      	bcs.n	8010de0 <__hexnan+0xb2>
 8010dd2:	2d07      	cmp	r5, #7
 8010dd4:	dc04      	bgt.n	8010de0 <__hexnan+0xb2>
 8010dd6:	002a      	movs	r2, r5
 8010dd8:	0039      	movs	r1, r7
 8010dda:	0020      	movs	r0, r4
 8010ddc:	f7ff ff81 	bl	8010ce2 <L_shift>
 8010de0:	9b01      	ldr	r3, [sp, #4]
 8010de2:	429c      	cmp	r4, r3
 8010de4:	d926      	bls.n	8010e34 <__hexnan+0x106>
 8010de6:	cc04      	ldmia	r4!, {r2}
 8010de8:	601a      	str	r2, [r3, #0]
 8010dea:	3304      	adds	r3, #4
 8010dec:	42a6      	cmp	r6, r4
 8010dee:	d2fa      	bcs.n	8010de6 <__hexnan+0xb8>
 8010df0:	2200      	movs	r2, #0
 8010df2:	c304      	stmia	r3!, {r2}
 8010df4:	429e      	cmp	r6, r3
 8010df6:	d2fc      	bcs.n	8010df2 <__hexnan+0xc4>
 8010df8:	6833      	ldr	r3, [r6, #0]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d104      	bne.n	8010e08 <__hexnan+0xda>
 8010dfe:	9b01      	ldr	r3, [sp, #4]
 8010e00:	429e      	cmp	r6, r3
 8010e02:	d126      	bne.n	8010e52 <__hexnan+0x124>
 8010e04:	2301      	movs	r3, #1
 8010e06:	6033      	str	r3, [r6, #0]
 8010e08:	2005      	movs	r0, #5
 8010e0a:	e025      	b.n	8010e58 <__hexnan+0x12a>
 8010e0c:	9b02      	ldr	r3, [sp, #8]
 8010e0e:	3501      	adds	r5, #1
 8010e10:	3301      	adds	r3, #1
 8010e12:	9302      	str	r3, [sp, #8]
 8010e14:	2d08      	cmp	r5, #8
 8010e16:	dd06      	ble.n	8010e26 <__hexnan+0xf8>
 8010e18:	9b01      	ldr	r3, [sp, #4]
 8010e1a:	429c      	cmp	r4, r3
 8010e1c:	d9ca      	bls.n	8010db4 <__hexnan+0x86>
 8010e1e:	2300      	movs	r3, #0
 8010e20:	2501      	movs	r5, #1
 8010e22:	3c04      	subs	r4, #4
 8010e24:	6023      	str	r3, [r4, #0]
 8010e26:	220f      	movs	r2, #15
 8010e28:	6823      	ldr	r3, [r4, #0]
 8010e2a:	4010      	ands	r0, r2
 8010e2c:	011b      	lsls	r3, r3, #4
 8010e2e:	4318      	orrs	r0, r3
 8010e30:	6020      	str	r0, [r4, #0]
 8010e32:	e7bf      	b.n	8010db4 <__hexnan+0x86>
 8010e34:	9b06      	ldr	r3, [sp, #24]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d0de      	beq.n	8010df8 <__hexnan+0xca>
 8010e3a:	2120      	movs	r1, #32
 8010e3c:	9a06      	ldr	r2, [sp, #24]
 8010e3e:	9b04      	ldr	r3, [sp, #16]
 8010e40:	1a89      	subs	r1, r1, r2
 8010e42:	2201      	movs	r2, #1
 8010e44:	4252      	negs	r2, r2
 8010e46:	40ca      	lsrs	r2, r1
 8010e48:	3b04      	subs	r3, #4
 8010e4a:	6819      	ldr	r1, [r3, #0]
 8010e4c:	400a      	ands	r2, r1
 8010e4e:	601a      	str	r2, [r3, #0]
 8010e50:	e7d2      	b.n	8010df8 <__hexnan+0xca>
 8010e52:	3e04      	subs	r6, #4
 8010e54:	e7d0      	b.n	8010df8 <__hexnan+0xca>
 8010e56:	2004      	movs	r0, #4
 8010e58:	b00b      	add	sp, #44	; 0x2c
 8010e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010e5c <__locale_ctype_ptr_l>:
 8010e5c:	30ec      	adds	r0, #236	; 0xec
 8010e5e:	6800      	ldr	r0, [r0, #0]
 8010e60:	4770      	bx	lr

08010e62 <__localeconv_l>:
 8010e62:	30f0      	adds	r0, #240	; 0xf0
 8010e64:	4770      	bx	lr
	...

08010e68 <_localeconv_r>:
 8010e68:	4b03      	ldr	r3, [pc, #12]	; (8010e78 <_localeconv_r+0x10>)
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	6a18      	ldr	r0, [r3, #32]
 8010e6e:	2800      	cmp	r0, #0
 8010e70:	d100      	bne.n	8010e74 <_localeconv_r+0xc>
 8010e72:	4802      	ldr	r0, [pc, #8]	; (8010e7c <_localeconv_r+0x14>)
 8010e74:	30f0      	adds	r0, #240	; 0xf0
 8010e76:	4770      	bx	lr
 8010e78:	2000012c 	.word	0x2000012c
 8010e7c:	20000190 	.word	0x20000190

08010e80 <malloc>:
 8010e80:	b510      	push	{r4, lr}
 8010e82:	4b03      	ldr	r3, [pc, #12]	; (8010e90 <malloc+0x10>)
 8010e84:	0001      	movs	r1, r0
 8010e86:	6818      	ldr	r0, [r3, #0]
 8010e88:	f000 fc70 	bl	801176c <_malloc_r>
 8010e8c:	bd10      	pop	{r4, pc}
 8010e8e:	46c0      	nop			; (mov r8, r8)
 8010e90:	2000012c 	.word	0x2000012c

08010e94 <__ascii_mbtowc>:
 8010e94:	b082      	sub	sp, #8
 8010e96:	2900      	cmp	r1, #0
 8010e98:	d100      	bne.n	8010e9c <__ascii_mbtowc+0x8>
 8010e9a:	a901      	add	r1, sp, #4
 8010e9c:	1e10      	subs	r0, r2, #0
 8010e9e:	d006      	beq.n	8010eae <__ascii_mbtowc+0x1a>
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d006      	beq.n	8010eb2 <__ascii_mbtowc+0x1e>
 8010ea4:	7813      	ldrb	r3, [r2, #0]
 8010ea6:	600b      	str	r3, [r1, #0]
 8010ea8:	7810      	ldrb	r0, [r2, #0]
 8010eaa:	1e43      	subs	r3, r0, #1
 8010eac:	4198      	sbcs	r0, r3
 8010eae:	b002      	add	sp, #8
 8010eb0:	4770      	bx	lr
 8010eb2:	2002      	movs	r0, #2
 8010eb4:	4240      	negs	r0, r0
 8010eb6:	e7fa      	b.n	8010eae <__ascii_mbtowc+0x1a>

08010eb8 <memchr>:
 8010eb8:	b2c9      	uxtb	r1, r1
 8010eba:	1882      	adds	r2, r0, r2
 8010ebc:	4290      	cmp	r0, r2
 8010ebe:	d101      	bne.n	8010ec4 <memchr+0xc>
 8010ec0:	2000      	movs	r0, #0
 8010ec2:	4770      	bx	lr
 8010ec4:	7803      	ldrb	r3, [r0, #0]
 8010ec6:	428b      	cmp	r3, r1
 8010ec8:	d0fb      	beq.n	8010ec2 <memchr+0xa>
 8010eca:	3001      	adds	r0, #1
 8010ecc:	e7f6      	b.n	8010ebc <memchr+0x4>

08010ece <_Balloc>:
 8010ece:	b570      	push	{r4, r5, r6, lr}
 8010ed0:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010ed2:	0004      	movs	r4, r0
 8010ed4:	000d      	movs	r5, r1
 8010ed6:	2e00      	cmp	r6, #0
 8010ed8:	d107      	bne.n	8010eea <_Balloc+0x1c>
 8010eda:	2010      	movs	r0, #16
 8010edc:	f7ff ffd0 	bl	8010e80 <malloc>
 8010ee0:	6260      	str	r0, [r4, #36]	; 0x24
 8010ee2:	6046      	str	r6, [r0, #4]
 8010ee4:	6086      	str	r6, [r0, #8]
 8010ee6:	6006      	str	r6, [r0, #0]
 8010ee8:	60c6      	str	r6, [r0, #12]
 8010eea:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010eec:	68f3      	ldr	r3, [r6, #12]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d013      	beq.n	8010f1a <_Balloc+0x4c>
 8010ef2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ef4:	00aa      	lsls	r2, r5, #2
 8010ef6:	68db      	ldr	r3, [r3, #12]
 8010ef8:	189b      	adds	r3, r3, r2
 8010efa:	6818      	ldr	r0, [r3, #0]
 8010efc:	2800      	cmp	r0, #0
 8010efe:	d118      	bne.n	8010f32 <_Balloc+0x64>
 8010f00:	2101      	movs	r1, #1
 8010f02:	000e      	movs	r6, r1
 8010f04:	40ae      	lsls	r6, r5
 8010f06:	1d72      	adds	r2, r6, #5
 8010f08:	0092      	lsls	r2, r2, #2
 8010f0a:	0020      	movs	r0, r4
 8010f0c:	f000 fbd5 	bl	80116ba <_calloc_r>
 8010f10:	2800      	cmp	r0, #0
 8010f12:	d00c      	beq.n	8010f2e <_Balloc+0x60>
 8010f14:	6045      	str	r5, [r0, #4]
 8010f16:	6086      	str	r6, [r0, #8]
 8010f18:	e00d      	b.n	8010f36 <_Balloc+0x68>
 8010f1a:	2221      	movs	r2, #33	; 0x21
 8010f1c:	2104      	movs	r1, #4
 8010f1e:	0020      	movs	r0, r4
 8010f20:	f000 fbcb 	bl	80116ba <_calloc_r>
 8010f24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f26:	60f0      	str	r0, [r6, #12]
 8010f28:	68db      	ldr	r3, [r3, #12]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d1e1      	bne.n	8010ef2 <_Balloc+0x24>
 8010f2e:	2000      	movs	r0, #0
 8010f30:	bd70      	pop	{r4, r5, r6, pc}
 8010f32:	6802      	ldr	r2, [r0, #0]
 8010f34:	601a      	str	r2, [r3, #0]
 8010f36:	2300      	movs	r3, #0
 8010f38:	6103      	str	r3, [r0, #16]
 8010f3a:	60c3      	str	r3, [r0, #12]
 8010f3c:	e7f8      	b.n	8010f30 <_Balloc+0x62>

08010f3e <_Bfree>:
 8010f3e:	b570      	push	{r4, r5, r6, lr}
 8010f40:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010f42:	0006      	movs	r6, r0
 8010f44:	000d      	movs	r5, r1
 8010f46:	2c00      	cmp	r4, #0
 8010f48:	d107      	bne.n	8010f5a <_Bfree+0x1c>
 8010f4a:	2010      	movs	r0, #16
 8010f4c:	f7ff ff98 	bl	8010e80 <malloc>
 8010f50:	6270      	str	r0, [r6, #36]	; 0x24
 8010f52:	6044      	str	r4, [r0, #4]
 8010f54:	6084      	str	r4, [r0, #8]
 8010f56:	6004      	str	r4, [r0, #0]
 8010f58:	60c4      	str	r4, [r0, #12]
 8010f5a:	2d00      	cmp	r5, #0
 8010f5c:	d007      	beq.n	8010f6e <_Bfree+0x30>
 8010f5e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010f60:	686a      	ldr	r2, [r5, #4]
 8010f62:	68db      	ldr	r3, [r3, #12]
 8010f64:	0092      	lsls	r2, r2, #2
 8010f66:	189b      	adds	r3, r3, r2
 8010f68:	681a      	ldr	r2, [r3, #0]
 8010f6a:	602a      	str	r2, [r5, #0]
 8010f6c:	601d      	str	r5, [r3, #0]
 8010f6e:	bd70      	pop	{r4, r5, r6, pc}

08010f70 <__multadd>:
 8010f70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f72:	001e      	movs	r6, r3
 8010f74:	2314      	movs	r3, #20
 8010f76:	469c      	mov	ip, r3
 8010f78:	0007      	movs	r7, r0
 8010f7a:	000c      	movs	r4, r1
 8010f7c:	2000      	movs	r0, #0
 8010f7e:	690d      	ldr	r5, [r1, #16]
 8010f80:	448c      	add	ip, r1
 8010f82:	4663      	mov	r3, ip
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	3001      	adds	r0, #1
 8010f88:	b299      	uxth	r1, r3
 8010f8a:	4663      	mov	r3, ip
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	4351      	muls	r1, r2
 8010f90:	0c1b      	lsrs	r3, r3, #16
 8010f92:	4353      	muls	r3, r2
 8010f94:	1989      	adds	r1, r1, r6
 8010f96:	0c0e      	lsrs	r6, r1, #16
 8010f98:	199b      	adds	r3, r3, r6
 8010f9a:	b289      	uxth	r1, r1
 8010f9c:	0c1e      	lsrs	r6, r3, #16
 8010f9e:	041b      	lsls	r3, r3, #16
 8010fa0:	185b      	adds	r3, r3, r1
 8010fa2:	4661      	mov	r1, ip
 8010fa4:	c108      	stmia	r1!, {r3}
 8010fa6:	468c      	mov	ip, r1
 8010fa8:	4285      	cmp	r5, r0
 8010faa:	dcea      	bgt.n	8010f82 <__multadd+0x12>
 8010fac:	2e00      	cmp	r6, #0
 8010fae:	d01b      	beq.n	8010fe8 <__multadd+0x78>
 8010fb0:	68a3      	ldr	r3, [r4, #8]
 8010fb2:	42ab      	cmp	r3, r5
 8010fb4:	dc12      	bgt.n	8010fdc <__multadd+0x6c>
 8010fb6:	6863      	ldr	r3, [r4, #4]
 8010fb8:	0038      	movs	r0, r7
 8010fba:	1c59      	adds	r1, r3, #1
 8010fbc:	f7ff ff87 	bl	8010ece <_Balloc>
 8010fc0:	0021      	movs	r1, r4
 8010fc2:	6923      	ldr	r3, [r4, #16]
 8010fc4:	9001      	str	r0, [sp, #4]
 8010fc6:	1c9a      	adds	r2, r3, #2
 8010fc8:	0092      	lsls	r2, r2, #2
 8010fca:	310c      	adds	r1, #12
 8010fcc:	300c      	adds	r0, #12
 8010fce:	f7fc ff4e 	bl	800de6e <memcpy>
 8010fd2:	0021      	movs	r1, r4
 8010fd4:	0038      	movs	r0, r7
 8010fd6:	f7ff ffb2 	bl	8010f3e <_Bfree>
 8010fda:	9c01      	ldr	r4, [sp, #4]
 8010fdc:	1d2b      	adds	r3, r5, #4
 8010fde:	009b      	lsls	r3, r3, #2
 8010fe0:	18e3      	adds	r3, r4, r3
 8010fe2:	3501      	adds	r5, #1
 8010fe4:	605e      	str	r6, [r3, #4]
 8010fe6:	6125      	str	r5, [r4, #16]
 8010fe8:	0020      	movs	r0, r4
 8010fea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08010fec <__s2b>:
 8010fec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010fee:	0006      	movs	r6, r0
 8010ff0:	0018      	movs	r0, r3
 8010ff2:	000c      	movs	r4, r1
 8010ff4:	3008      	adds	r0, #8
 8010ff6:	2109      	movs	r1, #9
 8010ff8:	9301      	str	r3, [sp, #4]
 8010ffa:	0015      	movs	r5, r2
 8010ffc:	f7f4 f924 	bl	8005248 <__divsi3>
 8011000:	2301      	movs	r3, #1
 8011002:	2100      	movs	r1, #0
 8011004:	4283      	cmp	r3, r0
 8011006:	db1f      	blt.n	8011048 <__s2b+0x5c>
 8011008:	0030      	movs	r0, r6
 801100a:	f7ff ff60 	bl	8010ece <_Balloc>
 801100e:	9b08      	ldr	r3, [sp, #32]
 8011010:	6143      	str	r3, [r0, #20]
 8011012:	2301      	movs	r3, #1
 8011014:	6103      	str	r3, [r0, #16]
 8011016:	2d09      	cmp	r5, #9
 8011018:	dd19      	ble.n	801104e <__s2b+0x62>
 801101a:	0023      	movs	r3, r4
 801101c:	3309      	adds	r3, #9
 801101e:	001f      	movs	r7, r3
 8011020:	9300      	str	r3, [sp, #0]
 8011022:	1964      	adds	r4, r4, r5
 8011024:	783b      	ldrb	r3, [r7, #0]
 8011026:	0001      	movs	r1, r0
 8011028:	3b30      	subs	r3, #48	; 0x30
 801102a:	220a      	movs	r2, #10
 801102c:	0030      	movs	r0, r6
 801102e:	3701      	adds	r7, #1
 8011030:	f7ff ff9e 	bl	8010f70 <__multadd>
 8011034:	42a7      	cmp	r7, r4
 8011036:	d1f5      	bne.n	8011024 <__s2b+0x38>
 8011038:	9b00      	ldr	r3, [sp, #0]
 801103a:	195c      	adds	r4, r3, r5
 801103c:	3c08      	subs	r4, #8
 801103e:	002f      	movs	r7, r5
 8011040:	9b01      	ldr	r3, [sp, #4]
 8011042:	429f      	cmp	r7, r3
 8011044:	db06      	blt.n	8011054 <__s2b+0x68>
 8011046:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011048:	005b      	lsls	r3, r3, #1
 801104a:	3101      	adds	r1, #1
 801104c:	e7da      	b.n	8011004 <__s2b+0x18>
 801104e:	340a      	adds	r4, #10
 8011050:	2509      	movs	r5, #9
 8011052:	e7f4      	b.n	801103e <__s2b+0x52>
 8011054:	1b63      	subs	r3, r4, r5
 8011056:	5ddb      	ldrb	r3, [r3, r7]
 8011058:	0001      	movs	r1, r0
 801105a:	3b30      	subs	r3, #48	; 0x30
 801105c:	220a      	movs	r2, #10
 801105e:	0030      	movs	r0, r6
 8011060:	f7ff ff86 	bl	8010f70 <__multadd>
 8011064:	3701      	adds	r7, #1
 8011066:	e7eb      	b.n	8011040 <__s2b+0x54>

08011068 <__hi0bits>:
 8011068:	0003      	movs	r3, r0
 801106a:	0c02      	lsrs	r2, r0, #16
 801106c:	2000      	movs	r0, #0
 801106e:	4282      	cmp	r2, r0
 8011070:	d101      	bne.n	8011076 <__hi0bits+0xe>
 8011072:	041b      	lsls	r3, r3, #16
 8011074:	3010      	adds	r0, #16
 8011076:	0e1a      	lsrs	r2, r3, #24
 8011078:	d101      	bne.n	801107e <__hi0bits+0x16>
 801107a:	3008      	adds	r0, #8
 801107c:	021b      	lsls	r3, r3, #8
 801107e:	0f1a      	lsrs	r2, r3, #28
 8011080:	d101      	bne.n	8011086 <__hi0bits+0x1e>
 8011082:	3004      	adds	r0, #4
 8011084:	011b      	lsls	r3, r3, #4
 8011086:	0f9a      	lsrs	r2, r3, #30
 8011088:	d101      	bne.n	801108e <__hi0bits+0x26>
 801108a:	3002      	adds	r0, #2
 801108c:	009b      	lsls	r3, r3, #2
 801108e:	2b00      	cmp	r3, #0
 8011090:	db03      	blt.n	801109a <__hi0bits+0x32>
 8011092:	3001      	adds	r0, #1
 8011094:	005b      	lsls	r3, r3, #1
 8011096:	d400      	bmi.n	801109a <__hi0bits+0x32>
 8011098:	2020      	movs	r0, #32
 801109a:	4770      	bx	lr

0801109c <__lo0bits>:
 801109c:	2207      	movs	r2, #7
 801109e:	6803      	ldr	r3, [r0, #0]
 80110a0:	b510      	push	{r4, lr}
 80110a2:	0001      	movs	r1, r0
 80110a4:	401a      	ands	r2, r3
 80110a6:	d00d      	beq.n	80110c4 <__lo0bits+0x28>
 80110a8:	2401      	movs	r4, #1
 80110aa:	2000      	movs	r0, #0
 80110ac:	4223      	tst	r3, r4
 80110ae:	d105      	bne.n	80110bc <__lo0bits+0x20>
 80110b0:	3002      	adds	r0, #2
 80110b2:	4203      	tst	r3, r0
 80110b4:	d003      	beq.n	80110be <__lo0bits+0x22>
 80110b6:	40e3      	lsrs	r3, r4
 80110b8:	0020      	movs	r0, r4
 80110ba:	600b      	str	r3, [r1, #0]
 80110bc:	bd10      	pop	{r4, pc}
 80110be:	089b      	lsrs	r3, r3, #2
 80110c0:	600b      	str	r3, [r1, #0]
 80110c2:	e7fb      	b.n	80110bc <__lo0bits+0x20>
 80110c4:	b29c      	uxth	r4, r3
 80110c6:	0010      	movs	r0, r2
 80110c8:	2c00      	cmp	r4, #0
 80110ca:	d101      	bne.n	80110d0 <__lo0bits+0x34>
 80110cc:	2010      	movs	r0, #16
 80110ce:	0c1b      	lsrs	r3, r3, #16
 80110d0:	b2da      	uxtb	r2, r3
 80110d2:	2a00      	cmp	r2, #0
 80110d4:	d101      	bne.n	80110da <__lo0bits+0x3e>
 80110d6:	3008      	adds	r0, #8
 80110d8:	0a1b      	lsrs	r3, r3, #8
 80110da:	071a      	lsls	r2, r3, #28
 80110dc:	d101      	bne.n	80110e2 <__lo0bits+0x46>
 80110de:	3004      	adds	r0, #4
 80110e0:	091b      	lsrs	r3, r3, #4
 80110e2:	079a      	lsls	r2, r3, #30
 80110e4:	d101      	bne.n	80110ea <__lo0bits+0x4e>
 80110e6:	3002      	adds	r0, #2
 80110e8:	089b      	lsrs	r3, r3, #2
 80110ea:	07da      	lsls	r2, r3, #31
 80110ec:	d4e8      	bmi.n	80110c0 <__lo0bits+0x24>
 80110ee:	085b      	lsrs	r3, r3, #1
 80110f0:	d001      	beq.n	80110f6 <__lo0bits+0x5a>
 80110f2:	3001      	adds	r0, #1
 80110f4:	e7e4      	b.n	80110c0 <__lo0bits+0x24>
 80110f6:	2020      	movs	r0, #32
 80110f8:	e7e0      	b.n	80110bc <__lo0bits+0x20>

080110fa <__i2b>:
 80110fa:	b510      	push	{r4, lr}
 80110fc:	000c      	movs	r4, r1
 80110fe:	2101      	movs	r1, #1
 8011100:	f7ff fee5 	bl	8010ece <_Balloc>
 8011104:	2301      	movs	r3, #1
 8011106:	6144      	str	r4, [r0, #20]
 8011108:	6103      	str	r3, [r0, #16]
 801110a:	bd10      	pop	{r4, pc}

0801110c <__multiply>:
 801110c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801110e:	690b      	ldr	r3, [r1, #16]
 8011110:	0014      	movs	r4, r2
 8011112:	6912      	ldr	r2, [r2, #16]
 8011114:	b089      	sub	sp, #36	; 0x24
 8011116:	000d      	movs	r5, r1
 8011118:	4293      	cmp	r3, r2
 801111a:	da01      	bge.n	8011120 <__multiply+0x14>
 801111c:	0025      	movs	r5, r4
 801111e:	000c      	movs	r4, r1
 8011120:	692f      	ldr	r7, [r5, #16]
 8011122:	6926      	ldr	r6, [r4, #16]
 8011124:	6869      	ldr	r1, [r5, #4]
 8011126:	19bb      	adds	r3, r7, r6
 8011128:	9302      	str	r3, [sp, #8]
 801112a:	68ab      	ldr	r3, [r5, #8]
 801112c:	19ba      	adds	r2, r7, r6
 801112e:	4293      	cmp	r3, r2
 8011130:	da00      	bge.n	8011134 <__multiply+0x28>
 8011132:	3101      	adds	r1, #1
 8011134:	f7ff fecb 	bl	8010ece <_Balloc>
 8011138:	0002      	movs	r2, r0
 801113a:	19bb      	adds	r3, r7, r6
 801113c:	3214      	adds	r2, #20
 801113e:	009b      	lsls	r3, r3, #2
 8011140:	18d3      	adds	r3, r2, r3
 8011142:	469c      	mov	ip, r3
 8011144:	2100      	movs	r1, #0
 8011146:	0013      	movs	r3, r2
 8011148:	9004      	str	r0, [sp, #16]
 801114a:	4563      	cmp	r3, ip
 801114c:	d31d      	bcc.n	801118a <__multiply+0x7e>
 801114e:	3514      	adds	r5, #20
 8011150:	00bf      	lsls	r7, r7, #2
 8011152:	19eb      	adds	r3, r5, r7
 8011154:	3414      	adds	r4, #20
 8011156:	00b6      	lsls	r6, r6, #2
 8011158:	9305      	str	r3, [sp, #20]
 801115a:	19a3      	adds	r3, r4, r6
 801115c:	9503      	str	r5, [sp, #12]
 801115e:	9401      	str	r4, [sp, #4]
 8011160:	9307      	str	r3, [sp, #28]
 8011162:	9b07      	ldr	r3, [sp, #28]
 8011164:	9901      	ldr	r1, [sp, #4]
 8011166:	4299      	cmp	r1, r3
 8011168:	d311      	bcc.n	801118e <__multiply+0x82>
 801116a:	9b02      	ldr	r3, [sp, #8]
 801116c:	2b00      	cmp	r3, #0
 801116e:	dd06      	ble.n	801117e <__multiply+0x72>
 8011170:	2304      	movs	r3, #4
 8011172:	425b      	negs	r3, r3
 8011174:	449c      	add	ip, r3
 8011176:	4663      	mov	r3, ip
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d051      	beq.n	8011222 <__multiply+0x116>
 801117e:	9b04      	ldr	r3, [sp, #16]
 8011180:	9a02      	ldr	r2, [sp, #8]
 8011182:	0018      	movs	r0, r3
 8011184:	611a      	str	r2, [r3, #16]
 8011186:	b009      	add	sp, #36	; 0x24
 8011188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801118a:	c302      	stmia	r3!, {r1}
 801118c:	e7dd      	b.n	801114a <__multiply+0x3e>
 801118e:	9b01      	ldr	r3, [sp, #4]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	b298      	uxth	r0, r3
 8011194:	2800      	cmp	r0, #0
 8011196:	d01c      	beq.n	80111d2 <__multiply+0xc6>
 8011198:	0015      	movs	r5, r2
 801119a:	2600      	movs	r6, #0
 801119c:	9f03      	ldr	r7, [sp, #12]
 801119e:	cf02      	ldmia	r7!, {r1}
 80111a0:	682c      	ldr	r4, [r5, #0]
 80111a2:	b28b      	uxth	r3, r1
 80111a4:	4343      	muls	r3, r0
 80111a6:	0c09      	lsrs	r1, r1, #16
 80111a8:	4341      	muls	r1, r0
 80111aa:	b2a4      	uxth	r4, r4
 80111ac:	191b      	adds	r3, r3, r4
 80111ae:	199b      	adds	r3, r3, r6
 80111b0:	000e      	movs	r6, r1
 80111b2:	6829      	ldr	r1, [r5, #0]
 80111b4:	9506      	str	r5, [sp, #24]
 80111b6:	0c09      	lsrs	r1, r1, #16
 80111b8:	1871      	adds	r1, r6, r1
 80111ba:	0c1e      	lsrs	r6, r3, #16
 80111bc:	1989      	adds	r1, r1, r6
 80111be:	0c0e      	lsrs	r6, r1, #16
 80111c0:	b29b      	uxth	r3, r3
 80111c2:	0409      	lsls	r1, r1, #16
 80111c4:	430b      	orrs	r3, r1
 80111c6:	c508      	stmia	r5!, {r3}
 80111c8:	9b05      	ldr	r3, [sp, #20]
 80111ca:	42bb      	cmp	r3, r7
 80111cc:	d8e7      	bhi.n	801119e <__multiply+0x92>
 80111ce:	9b06      	ldr	r3, [sp, #24]
 80111d0:	605e      	str	r6, [r3, #4]
 80111d2:	9b01      	ldr	r3, [sp, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	0c1d      	lsrs	r5, r3, #16
 80111d8:	d01e      	beq.n	8011218 <__multiply+0x10c>
 80111da:	0010      	movs	r0, r2
 80111dc:	2700      	movs	r7, #0
 80111de:	6813      	ldr	r3, [r2, #0]
 80111e0:	9e03      	ldr	r6, [sp, #12]
 80111e2:	6831      	ldr	r1, [r6, #0]
 80111e4:	6804      	ldr	r4, [r0, #0]
 80111e6:	b289      	uxth	r1, r1
 80111e8:	4369      	muls	r1, r5
 80111ea:	0c24      	lsrs	r4, r4, #16
 80111ec:	1909      	adds	r1, r1, r4
 80111ee:	19c9      	adds	r1, r1, r7
 80111f0:	040f      	lsls	r7, r1, #16
 80111f2:	b29b      	uxth	r3, r3
 80111f4:	433b      	orrs	r3, r7
 80111f6:	6003      	str	r3, [r0, #0]
 80111f8:	ce80      	ldmia	r6!, {r7}
 80111fa:	6843      	ldr	r3, [r0, #4]
 80111fc:	0c3f      	lsrs	r7, r7, #16
 80111fe:	436f      	muls	r7, r5
 8011200:	b29b      	uxth	r3, r3
 8011202:	18fb      	adds	r3, r7, r3
 8011204:	0c09      	lsrs	r1, r1, #16
 8011206:	185b      	adds	r3, r3, r1
 8011208:	9905      	ldr	r1, [sp, #20]
 801120a:	9006      	str	r0, [sp, #24]
 801120c:	0c1f      	lsrs	r7, r3, #16
 801120e:	3004      	adds	r0, #4
 8011210:	42b1      	cmp	r1, r6
 8011212:	d8e6      	bhi.n	80111e2 <__multiply+0xd6>
 8011214:	9906      	ldr	r1, [sp, #24]
 8011216:	604b      	str	r3, [r1, #4]
 8011218:	9b01      	ldr	r3, [sp, #4]
 801121a:	3204      	adds	r2, #4
 801121c:	3304      	adds	r3, #4
 801121e:	9301      	str	r3, [sp, #4]
 8011220:	e79f      	b.n	8011162 <__multiply+0x56>
 8011222:	9b02      	ldr	r3, [sp, #8]
 8011224:	3b01      	subs	r3, #1
 8011226:	9302      	str	r3, [sp, #8]
 8011228:	e79f      	b.n	801116a <__multiply+0x5e>
	...

0801122c <__pow5mult>:
 801122c:	2303      	movs	r3, #3
 801122e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011230:	4013      	ands	r3, r2
 8011232:	0005      	movs	r5, r0
 8011234:	000e      	movs	r6, r1
 8011236:	0014      	movs	r4, r2
 8011238:	2b00      	cmp	r3, #0
 801123a:	d008      	beq.n	801124e <__pow5mult+0x22>
 801123c:	4922      	ldr	r1, [pc, #136]	; (80112c8 <__pow5mult+0x9c>)
 801123e:	3b01      	subs	r3, #1
 8011240:	009a      	lsls	r2, r3, #2
 8011242:	5852      	ldr	r2, [r2, r1]
 8011244:	2300      	movs	r3, #0
 8011246:	0031      	movs	r1, r6
 8011248:	f7ff fe92 	bl	8010f70 <__multadd>
 801124c:	0006      	movs	r6, r0
 801124e:	10a3      	asrs	r3, r4, #2
 8011250:	9301      	str	r3, [sp, #4]
 8011252:	d036      	beq.n	80112c2 <__pow5mult+0x96>
 8011254:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8011256:	2c00      	cmp	r4, #0
 8011258:	d107      	bne.n	801126a <__pow5mult+0x3e>
 801125a:	2010      	movs	r0, #16
 801125c:	f7ff fe10 	bl	8010e80 <malloc>
 8011260:	6268      	str	r0, [r5, #36]	; 0x24
 8011262:	6044      	str	r4, [r0, #4]
 8011264:	6084      	str	r4, [r0, #8]
 8011266:	6004      	str	r4, [r0, #0]
 8011268:	60c4      	str	r4, [r0, #12]
 801126a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 801126c:	68bc      	ldr	r4, [r7, #8]
 801126e:	2c00      	cmp	r4, #0
 8011270:	d107      	bne.n	8011282 <__pow5mult+0x56>
 8011272:	4916      	ldr	r1, [pc, #88]	; (80112cc <__pow5mult+0xa0>)
 8011274:	0028      	movs	r0, r5
 8011276:	f7ff ff40 	bl	80110fa <__i2b>
 801127a:	2300      	movs	r3, #0
 801127c:	0004      	movs	r4, r0
 801127e:	60b8      	str	r0, [r7, #8]
 8011280:	6003      	str	r3, [r0, #0]
 8011282:	2201      	movs	r2, #1
 8011284:	9b01      	ldr	r3, [sp, #4]
 8011286:	4213      	tst	r3, r2
 8011288:	d00a      	beq.n	80112a0 <__pow5mult+0x74>
 801128a:	0031      	movs	r1, r6
 801128c:	0022      	movs	r2, r4
 801128e:	0028      	movs	r0, r5
 8011290:	f7ff ff3c 	bl	801110c <__multiply>
 8011294:	0007      	movs	r7, r0
 8011296:	0031      	movs	r1, r6
 8011298:	0028      	movs	r0, r5
 801129a:	f7ff fe50 	bl	8010f3e <_Bfree>
 801129e:	003e      	movs	r6, r7
 80112a0:	9b01      	ldr	r3, [sp, #4]
 80112a2:	105b      	asrs	r3, r3, #1
 80112a4:	9301      	str	r3, [sp, #4]
 80112a6:	d00c      	beq.n	80112c2 <__pow5mult+0x96>
 80112a8:	6820      	ldr	r0, [r4, #0]
 80112aa:	2800      	cmp	r0, #0
 80112ac:	d107      	bne.n	80112be <__pow5mult+0x92>
 80112ae:	0022      	movs	r2, r4
 80112b0:	0021      	movs	r1, r4
 80112b2:	0028      	movs	r0, r5
 80112b4:	f7ff ff2a 	bl	801110c <__multiply>
 80112b8:	2300      	movs	r3, #0
 80112ba:	6020      	str	r0, [r4, #0]
 80112bc:	6003      	str	r3, [r0, #0]
 80112be:	0004      	movs	r4, r0
 80112c0:	e7df      	b.n	8011282 <__pow5mult+0x56>
 80112c2:	0030      	movs	r0, r6
 80112c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80112c6:	46c0      	nop			; (mov r8, r8)
 80112c8:	08012da8 	.word	0x08012da8
 80112cc:	00000271 	.word	0x00000271

080112d0 <__lshift>:
 80112d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112d2:	000d      	movs	r5, r1
 80112d4:	0017      	movs	r7, r2
 80112d6:	692b      	ldr	r3, [r5, #16]
 80112d8:	1154      	asrs	r4, r2, #5
 80112da:	b085      	sub	sp, #20
 80112dc:	18e3      	adds	r3, r4, r3
 80112de:	9301      	str	r3, [sp, #4]
 80112e0:	3301      	adds	r3, #1
 80112e2:	9300      	str	r3, [sp, #0]
 80112e4:	6849      	ldr	r1, [r1, #4]
 80112e6:	68ab      	ldr	r3, [r5, #8]
 80112e8:	9002      	str	r0, [sp, #8]
 80112ea:	9a00      	ldr	r2, [sp, #0]
 80112ec:	4293      	cmp	r3, r2
 80112ee:	db35      	blt.n	801135c <__lshift+0x8c>
 80112f0:	9802      	ldr	r0, [sp, #8]
 80112f2:	f7ff fdec 	bl	8010ece <_Balloc>
 80112f6:	2300      	movs	r3, #0
 80112f8:	0002      	movs	r2, r0
 80112fa:	0006      	movs	r6, r0
 80112fc:	0019      	movs	r1, r3
 80112fe:	3214      	adds	r2, #20
 8011300:	42a3      	cmp	r3, r4
 8011302:	db2e      	blt.n	8011362 <__lshift+0x92>
 8011304:	43e3      	mvns	r3, r4
 8011306:	17db      	asrs	r3, r3, #31
 8011308:	401c      	ands	r4, r3
 801130a:	002b      	movs	r3, r5
 801130c:	00a4      	lsls	r4, r4, #2
 801130e:	1914      	adds	r4, r2, r4
 8011310:	692a      	ldr	r2, [r5, #16]
 8011312:	3314      	adds	r3, #20
 8011314:	0092      	lsls	r2, r2, #2
 8011316:	189a      	adds	r2, r3, r2
 8011318:	4694      	mov	ip, r2
 801131a:	221f      	movs	r2, #31
 801131c:	4017      	ands	r7, r2
 801131e:	d024      	beq.n	801136a <__lshift+0x9a>
 8011320:	3201      	adds	r2, #1
 8011322:	1bd2      	subs	r2, r2, r7
 8011324:	9203      	str	r2, [sp, #12]
 8011326:	2200      	movs	r2, #0
 8011328:	6819      	ldr	r1, [r3, #0]
 801132a:	0020      	movs	r0, r4
 801132c:	40b9      	lsls	r1, r7
 801132e:	430a      	orrs	r2, r1
 8011330:	c404      	stmia	r4!, {r2}
 8011332:	cb04      	ldmia	r3!, {r2}
 8011334:	9903      	ldr	r1, [sp, #12]
 8011336:	40ca      	lsrs	r2, r1
 8011338:	459c      	cmp	ip, r3
 801133a:	d8f5      	bhi.n	8011328 <__lshift+0x58>
 801133c:	6042      	str	r2, [r0, #4]
 801133e:	2a00      	cmp	r2, #0
 8011340:	d002      	beq.n	8011348 <__lshift+0x78>
 8011342:	9b01      	ldr	r3, [sp, #4]
 8011344:	3302      	adds	r3, #2
 8011346:	9300      	str	r3, [sp, #0]
 8011348:	9b00      	ldr	r3, [sp, #0]
 801134a:	9802      	ldr	r0, [sp, #8]
 801134c:	3b01      	subs	r3, #1
 801134e:	6133      	str	r3, [r6, #16]
 8011350:	0029      	movs	r1, r5
 8011352:	f7ff fdf4 	bl	8010f3e <_Bfree>
 8011356:	0030      	movs	r0, r6
 8011358:	b005      	add	sp, #20
 801135a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801135c:	3101      	adds	r1, #1
 801135e:	005b      	lsls	r3, r3, #1
 8011360:	e7c3      	b.n	80112ea <__lshift+0x1a>
 8011362:	0098      	lsls	r0, r3, #2
 8011364:	5011      	str	r1, [r2, r0]
 8011366:	3301      	adds	r3, #1
 8011368:	e7ca      	b.n	8011300 <__lshift+0x30>
 801136a:	cb04      	ldmia	r3!, {r2}
 801136c:	c404      	stmia	r4!, {r2}
 801136e:	459c      	cmp	ip, r3
 8011370:	d8fb      	bhi.n	801136a <__lshift+0x9a>
 8011372:	e7e9      	b.n	8011348 <__lshift+0x78>

08011374 <__mcmp>:
 8011374:	690a      	ldr	r2, [r1, #16]
 8011376:	6903      	ldr	r3, [r0, #16]
 8011378:	b530      	push	{r4, r5, lr}
 801137a:	1a9b      	subs	r3, r3, r2
 801137c:	d10d      	bne.n	801139a <__mcmp+0x26>
 801137e:	0092      	lsls	r2, r2, #2
 8011380:	3014      	adds	r0, #20
 8011382:	3114      	adds	r1, #20
 8011384:	1884      	adds	r4, r0, r2
 8011386:	1889      	adds	r1, r1, r2
 8011388:	3c04      	subs	r4, #4
 801138a:	3904      	subs	r1, #4
 801138c:	6825      	ldr	r5, [r4, #0]
 801138e:	680a      	ldr	r2, [r1, #0]
 8011390:	4295      	cmp	r5, r2
 8011392:	d004      	beq.n	801139e <__mcmp+0x2a>
 8011394:	2301      	movs	r3, #1
 8011396:	4295      	cmp	r5, r2
 8011398:	d304      	bcc.n	80113a4 <__mcmp+0x30>
 801139a:	0018      	movs	r0, r3
 801139c:	bd30      	pop	{r4, r5, pc}
 801139e:	42a0      	cmp	r0, r4
 80113a0:	d3f2      	bcc.n	8011388 <__mcmp+0x14>
 80113a2:	e7fa      	b.n	801139a <__mcmp+0x26>
 80113a4:	425b      	negs	r3, r3
 80113a6:	e7f8      	b.n	801139a <__mcmp+0x26>

080113a8 <__mdiff>:
 80113a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113aa:	000d      	movs	r5, r1
 80113ac:	b085      	sub	sp, #20
 80113ae:	0007      	movs	r7, r0
 80113b0:	0011      	movs	r1, r2
 80113b2:	0028      	movs	r0, r5
 80113b4:	0014      	movs	r4, r2
 80113b6:	f7ff ffdd 	bl	8011374 <__mcmp>
 80113ba:	1e06      	subs	r6, r0, #0
 80113bc:	d108      	bne.n	80113d0 <__mdiff+0x28>
 80113be:	0001      	movs	r1, r0
 80113c0:	0038      	movs	r0, r7
 80113c2:	f7ff fd84 	bl	8010ece <_Balloc>
 80113c6:	2301      	movs	r3, #1
 80113c8:	6146      	str	r6, [r0, #20]
 80113ca:	6103      	str	r3, [r0, #16]
 80113cc:	b005      	add	sp, #20
 80113ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113d0:	2301      	movs	r3, #1
 80113d2:	9301      	str	r3, [sp, #4]
 80113d4:	2800      	cmp	r0, #0
 80113d6:	db04      	blt.n	80113e2 <__mdiff+0x3a>
 80113d8:	0023      	movs	r3, r4
 80113da:	002c      	movs	r4, r5
 80113dc:	001d      	movs	r5, r3
 80113de:	2300      	movs	r3, #0
 80113e0:	9301      	str	r3, [sp, #4]
 80113e2:	6861      	ldr	r1, [r4, #4]
 80113e4:	0038      	movs	r0, r7
 80113e6:	f7ff fd72 	bl	8010ece <_Balloc>
 80113ea:	002f      	movs	r7, r5
 80113ec:	2200      	movs	r2, #0
 80113ee:	9b01      	ldr	r3, [sp, #4]
 80113f0:	6926      	ldr	r6, [r4, #16]
 80113f2:	60c3      	str	r3, [r0, #12]
 80113f4:	3414      	adds	r4, #20
 80113f6:	00b3      	lsls	r3, r6, #2
 80113f8:	18e3      	adds	r3, r4, r3
 80113fa:	9302      	str	r3, [sp, #8]
 80113fc:	692b      	ldr	r3, [r5, #16]
 80113fe:	3714      	adds	r7, #20
 8011400:	009b      	lsls	r3, r3, #2
 8011402:	18fb      	adds	r3, r7, r3
 8011404:	9303      	str	r3, [sp, #12]
 8011406:	0003      	movs	r3, r0
 8011408:	4694      	mov	ip, r2
 801140a:	3314      	adds	r3, #20
 801140c:	cc20      	ldmia	r4!, {r5}
 801140e:	cf04      	ldmia	r7!, {r2}
 8011410:	9201      	str	r2, [sp, #4]
 8011412:	b2aa      	uxth	r2, r5
 8011414:	4494      	add	ip, r2
 8011416:	466a      	mov	r2, sp
 8011418:	4661      	mov	r1, ip
 801141a:	8892      	ldrh	r2, [r2, #4]
 801141c:	0c2d      	lsrs	r5, r5, #16
 801141e:	1a8a      	subs	r2, r1, r2
 8011420:	9901      	ldr	r1, [sp, #4]
 8011422:	0c09      	lsrs	r1, r1, #16
 8011424:	1a69      	subs	r1, r5, r1
 8011426:	1415      	asrs	r5, r2, #16
 8011428:	1949      	adds	r1, r1, r5
 801142a:	140d      	asrs	r5, r1, #16
 801142c:	b292      	uxth	r2, r2
 801142e:	0409      	lsls	r1, r1, #16
 8011430:	430a      	orrs	r2, r1
 8011432:	601a      	str	r2, [r3, #0]
 8011434:	9a03      	ldr	r2, [sp, #12]
 8011436:	46ac      	mov	ip, r5
 8011438:	3304      	adds	r3, #4
 801143a:	42ba      	cmp	r2, r7
 801143c:	d8e6      	bhi.n	801140c <__mdiff+0x64>
 801143e:	9902      	ldr	r1, [sp, #8]
 8011440:	001a      	movs	r2, r3
 8011442:	428c      	cmp	r4, r1
 8011444:	d305      	bcc.n	8011452 <__mdiff+0xaa>
 8011446:	3a04      	subs	r2, #4
 8011448:	6813      	ldr	r3, [r2, #0]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d00e      	beq.n	801146c <__mdiff+0xc4>
 801144e:	6106      	str	r6, [r0, #16]
 8011450:	e7bc      	b.n	80113cc <__mdiff+0x24>
 8011452:	cc04      	ldmia	r4!, {r2}
 8011454:	b291      	uxth	r1, r2
 8011456:	4461      	add	r1, ip
 8011458:	140d      	asrs	r5, r1, #16
 801145a:	0c12      	lsrs	r2, r2, #16
 801145c:	1952      	adds	r2, r2, r5
 801145e:	1415      	asrs	r5, r2, #16
 8011460:	b289      	uxth	r1, r1
 8011462:	0412      	lsls	r2, r2, #16
 8011464:	430a      	orrs	r2, r1
 8011466:	46ac      	mov	ip, r5
 8011468:	c304      	stmia	r3!, {r2}
 801146a:	e7e8      	b.n	801143e <__mdiff+0x96>
 801146c:	3e01      	subs	r6, #1
 801146e:	e7ea      	b.n	8011446 <__mdiff+0x9e>

08011470 <__ulp>:
 8011470:	000b      	movs	r3, r1
 8011472:	4910      	ldr	r1, [pc, #64]	; (80114b4 <__ulp+0x44>)
 8011474:	b510      	push	{r4, lr}
 8011476:	4019      	ands	r1, r3
 8011478:	4b0f      	ldr	r3, [pc, #60]	; (80114b8 <__ulp+0x48>)
 801147a:	18c9      	adds	r1, r1, r3
 801147c:	2900      	cmp	r1, #0
 801147e:	dd04      	ble.n	801148a <__ulp+0x1a>
 8011480:	2200      	movs	r2, #0
 8011482:	000b      	movs	r3, r1
 8011484:	0010      	movs	r0, r2
 8011486:	0019      	movs	r1, r3
 8011488:	bd10      	pop	{r4, pc}
 801148a:	4249      	negs	r1, r1
 801148c:	1509      	asrs	r1, r1, #20
 801148e:	2200      	movs	r2, #0
 8011490:	2300      	movs	r3, #0
 8011492:	2913      	cmp	r1, #19
 8011494:	dc04      	bgt.n	80114a0 <__ulp+0x30>
 8011496:	2080      	movs	r0, #128	; 0x80
 8011498:	0300      	lsls	r0, r0, #12
 801149a:	4108      	asrs	r0, r1
 801149c:	0003      	movs	r3, r0
 801149e:	e7f1      	b.n	8011484 <__ulp+0x14>
 80114a0:	3914      	subs	r1, #20
 80114a2:	2001      	movs	r0, #1
 80114a4:	291e      	cmp	r1, #30
 80114a6:	dc02      	bgt.n	80114ae <__ulp+0x3e>
 80114a8:	241f      	movs	r4, #31
 80114aa:	1a61      	subs	r1, r4, r1
 80114ac:	4088      	lsls	r0, r1
 80114ae:	0002      	movs	r2, r0
 80114b0:	e7e8      	b.n	8011484 <__ulp+0x14>
 80114b2:	46c0      	nop			; (mov r8, r8)
 80114b4:	7ff00000 	.word	0x7ff00000
 80114b8:	fcc00000 	.word	0xfcc00000

080114bc <__b2d>:
 80114bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80114be:	0006      	movs	r6, r0
 80114c0:	6903      	ldr	r3, [r0, #16]
 80114c2:	3614      	adds	r6, #20
 80114c4:	009b      	lsls	r3, r3, #2
 80114c6:	18f3      	adds	r3, r6, r3
 80114c8:	1f1d      	subs	r5, r3, #4
 80114ca:	682c      	ldr	r4, [r5, #0]
 80114cc:	000f      	movs	r7, r1
 80114ce:	0020      	movs	r0, r4
 80114d0:	9301      	str	r3, [sp, #4]
 80114d2:	f7ff fdc9 	bl	8011068 <__hi0bits>
 80114d6:	2320      	movs	r3, #32
 80114d8:	1a1b      	subs	r3, r3, r0
 80114da:	603b      	str	r3, [r7, #0]
 80114dc:	491c      	ldr	r1, [pc, #112]	; (8011550 <__b2d+0x94>)
 80114de:	280a      	cmp	r0, #10
 80114e0:	dc16      	bgt.n	8011510 <__b2d+0x54>
 80114e2:	230b      	movs	r3, #11
 80114e4:	0027      	movs	r7, r4
 80114e6:	1a1b      	subs	r3, r3, r0
 80114e8:	40df      	lsrs	r7, r3
 80114ea:	4339      	orrs	r1, r7
 80114ec:	469c      	mov	ip, r3
 80114ee:	000b      	movs	r3, r1
 80114f0:	2100      	movs	r1, #0
 80114f2:	42ae      	cmp	r6, r5
 80114f4:	d202      	bcs.n	80114fc <__b2d+0x40>
 80114f6:	9901      	ldr	r1, [sp, #4]
 80114f8:	3908      	subs	r1, #8
 80114fa:	6809      	ldr	r1, [r1, #0]
 80114fc:	3015      	adds	r0, #21
 80114fe:	4084      	lsls	r4, r0
 8011500:	4660      	mov	r0, ip
 8011502:	40c1      	lsrs	r1, r0
 8011504:	430c      	orrs	r4, r1
 8011506:	0022      	movs	r2, r4
 8011508:	0010      	movs	r0, r2
 801150a:	0019      	movs	r1, r3
 801150c:	b003      	add	sp, #12
 801150e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011510:	2700      	movs	r7, #0
 8011512:	42ae      	cmp	r6, r5
 8011514:	d202      	bcs.n	801151c <__b2d+0x60>
 8011516:	9d01      	ldr	r5, [sp, #4]
 8011518:	3d08      	subs	r5, #8
 801151a:	682f      	ldr	r7, [r5, #0]
 801151c:	380b      	subs	r0, #11
 801151e:	4684      	mov	ip, r0
 8011520:	1e03      	subs	r3, r0, #0
 8011522:	d012      	beq.n	801154a <__b2d+0x8e>
 8011524:	409c      	lsls	r4, r3
 8011526:	2020      	movs	r0, #32
 8011528:	4321      	orrs	r1, r4
 801152a:	003c      	movs	r4, r7
 801152c:	1ac0      	subs	r0, r0, r3
 801152e:	40c4      	lsrs	r4, r0
 8011530:	4321      	orrs	r1, r4
 8011532:	000b      	movs	r3, r1
 8011534:	2100      	movs	r1, #0
 8011536:	42b5      	cmp	r5, r6
 8011538:	d901      	bls.n	801153e <__b2d+0x82>
 801153a:	3d04      	subs	r5, #4
 801153c:	6829      	ldr	r1, [r5, #0]
 801153e:	4664      	mov	r4, ip
 8011540:	40c1      	lsrs	r1, r0
 8011542:	40a7      	lsls	r7, r4
 8011544:	430f      	orrs	r7, r1
 8011546:	003a      	movs	r2, r7
 8011548:	e7de      	b.n	8011508 <__b2d+0x4c>
 801154a:	4321      	orrs	r1, r4
 801154c:	000b      	movs	r3, r1
 801154e:	e7fa      	b.n	8011546 <__b2d+0x8a>
 8011550:	3ff00000 	.word	0x3ff00000

08011554 <__d2b>:
 8011554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011556:	001d      	movs	r5, r3
 8011558:	2101      	movs	r1, #1
 801155a:	0014      	movs	r4, r2
 801155c:	9f08      	ldr	r7, [sp, #32]
 801155e:	f7ff fcb6 	bl	8010ece <_Balloc>
 8011562:	032b      	lsls	r3, r5, #12
 8011564:	006d      	lsls	r5, r5, #1
 8011566:	0006      	movs	r6, r0
 8011568:	0b1b      	lsrs	r3, r3, #12
 801156a:	0d6d      	lsrs	r5, r5, #21
 801156c:	d124      	bne.n	80115b8 <__d2b+0x64>
 801156e:	9301      	str	r3, [sp, #4]
 8011570:	2c00      	cmp	r4, #0
 8011572:	d027      	beq.n	80115c4 <__d2b+0x70>
 8011574:	4668      	mov	r0, sp
 8011576:	9400      	str	r4, [sp, #0]
 8011578:	f7ff fd90 	bl	801109c <__lo0bits>
 801157c:	9c00      	ldr	r4, [sp, #0]
 801157e:	2800      	cmp	r0, #0
 8011580:	d01e      	beq.n	80115c0 <__d2b+0x6c>
 8011582:	9b01      	ldr	r3, [sp, #4]
 8011584:	2120      	movs	r1, #32
 8011586:	001a      	movs	r2, r3
 8011588:	1a09      	subs	r1, r1, r0
 801158a:	408a      	lsls	r2, r1
 801158c:	40c3      	lsrs	r3, r0
 801158e:	4322      	orrs	r2, r4
 8011590:	6172      	str	r2, [r6, #20]
 8011592:	9301      	str	r3, [sp, #4]
 8011594:	9c01      	ldr	r4, [sp, #4]
 8011596:	61b4      	str	r4, [r6, #24]
 8011598:	1e63      	subs	r3, r4, #1
 801159a:	419c      	sbcs	r4, r3
 801159c:	3401      	adds	r4, #1
 801159e:	6134      	str	r4, [r6, #16]
 80115a0:	2d00      	cmp	r5, #0
 80115a2:	d018      	beq.n	80115d6 <__d2b+0x82>
 80115a4:	4b12      	ldr	r3, [pc, #72]	; (80115f0 <__d2b+0x9c>)
 80115a6:	18ed      	adds	r5, r5, r3
 80115a8:	2335      	movs	r3, #53	; 0x35
 80115aa:	182d      	adds	r5, r5, r0
 80115ac:	603d      	str	r5, [r7, #0]
 80115ae:	1a18      	subs	r0, r3, r0
 80115b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115b2:	6018      	str	r0, [r3, #0]
 80115b4:	0030      	movs	r0, r6
 80115b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80115b8:	2280      	movs	r2, #128	; 0x80
 80115ba:	0352      	lsls	r2, r2, #13
 80115bc:	4313      	orrs	r3, r2
 80115be:	e7d6      	b.n	801156e <__d2b+0x1a>
 80115c0:	6174      	str	r4, [r6, #20]
 80115c2:	e7e7      	b.n	8011594 <__d2b+0x40>
 80115c4:	a801      	add	r0, sp, #4
 80115c6:	f7ff fd69 	bl	801109c <__lo0bits>
 80115ca:	2401      	movs	r4, #1
 80115cc:	9b01      	ldr	r3, [sp, #4]
 80115ce:	6134      	str	r4, [r6, #16]
 80115d0:	6173      	str	r3, [r6, #20]
 80115d2:	3020      	adds	r0, #32
 80115d4:	e7e4      	b.n	80115a0 <__d2b+0x4c>
 80115d6:	4b07      	ldr	r3, [pc, #28]	; (80115f4 <__d2b+0xa0>)
 80115d8:	18c0      	adds	r0, r0, r3
 80115da:	4b07      	ldr	r3, [pc, #28]	; (80115f8 <__d2b+0xa4>)
 80115dc:	6038      	str	r0, [r7, #0]
 80115de:	18e3      	adds	r3, r4, r3
 80115e0:	009b      	lsls	r3, r3, #2
 80115e2:	18f3      	adds	r3, r6, r3
 80115e4:	6958      	ldr	r0, [r3, #20]
 80115e6:	f7ff fd3f 	bl	8011068 <__hi0bits>
 80115ea:	0164      	lsls	r4, r4, #5
 80115ec:	1a20      	subs	r0, r4, r0
 80115ee:	e7df      	b.n	80115b0 <__d2b+0x5c>
 80115f0:	fffffbcd 	.word	0xfffffbcd
 80115f4:	fffffbce 	.word	0xfffffbce
 80115f8:	3fffffff 	.word	0x3fffffff

080115fc <__ratio>:
 80115fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115fe:	b085      	sub	sp, #20
 8011600:	000f      	movs	r7, r1
 8011602:	a902      	add	r1, sp, #8
 8011604:	0006      	movs	r6, r0
 8011606:	f7ff ff59 	bl	80114bc <__b2d>
 801160a:	0004      	movs	r4, r0
 801160c:	000d      	movs	r5, r1
 801160e:	0038      	movs	r0, r7
 8011610:	a903      	add	r1, sp, #12
 8011612:	9400      	str	r4, [sp, #0]
 8011614:	9501      	str	r5, [sp, #4]
 8011616:	f7ff ff51 	bl	80114bc <__b2d>
 801161a:	6936      	ldr	r6, [r6, #16]
 801161c:	693f      	ldr	r7, [r7, #16]
 801161e:	0002      	movs	r2, r0
 8011620:	1bf7      	subs	r7, r6, r7
 8011622:	017e      	lsls	r6, r7, #5
 8011624:	46b4      	mov	ip, r6
 8011626:	9f03      	ldr	r7, [sp, #12]
 8011628:	9e02      	ldr	r6, [sp, #8]
 801162a:	000b      	movs	r3, r1
 801162c:	1bf6      	subs	r6, r6, r7
 801162e:	4466      	add	r6, ip
 8011630:	0537      	lsls	r7, r6, #20
 8011632:	2e00      	cmp	r6, #0
 8011634:	dd07      	ble.n	8011646 <__ratio+0x4a>
 8011636:	1979      	adds	r1, r7, r5
 8011638:	9101      	str	r1, [sp, #4]
 801163a:	9800      	ldr	r0, [sp, #0]
 801163c:	9901      	ldr	r1, [sp, #4]
 801163e:	f7f4 fe93 	bl	8006368 <__aeabi_ddiv>
 8011642:	b005      	add	sp, #20
 8011644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011646:	1bcb      	subs	r3, r1, r7
 8011648:	e7f7      	b.n	801163a <__ratio+0x3e>

0801164a <__copybits>:
 801164a:	0013      	movs	r3, r2
 801164c:	3901      	subs	r1, #1
 801164e:	b510      	push	{r4, lr}
 8011650:	1149      	asrs	r1, r1, #5
 8011652:	6912      	ldr	r2, [r2, #16]
 8011654:	3101      	adds	r1, #1
 8011656:	0089      	lsls	r1, r1, #2
 8011658:	3314      	adds	r3, #20
 801165a:	0092      	lsls	r2, r2, #2
 801165c:	1841      	adds	r1, r0, r1
 801165e:	189a      	adds	r2, r3, r2
 8011660:	429a      	cmp	r2, r3
 8011662:	d803      	bhi.n	801166c <__copybits+0x22>
 8011664:	2300      	movs	r3, #0
 8011666:	4281      	cmp	r1, r0
 8011668:	d803      	bhi.n	8011672 <__copybits+0x28>
 801166a:	bd10      	pop	{r4, pc}
 801166c:	cb10      	ldmia	r3!, {r4}
 801166e:	c010      	stmia	r0!, {r4}
 8011670:	e7f6      	b.n	8011660 <__copybits+0x16>
 8011672:	c008      	stmia	r0!, {r3}
 8011674:	e7f7      	b.n	8011666 <__copybits+0x1c>

08011676 <__any_on>:
 8011676:	0002      	movs	r2, r0
 8011678:	6900      	ldr	r0, [r0, #16]
 801167a:	b510      	push	{r4, lr}
 801167c:	3214      	adds	r2, #20
 801167e:	114b      	asrs	r3, r1, #5
 8011680:	4298      	cmp	r0, r3
 8011682:	db12      	blt.n	80116aa <__any_on+0x34>
 8011684:	dd0b      	ble.n	801169e <__any_on+0x28>
 8011686:	201f      	movs	r0, #31
 8011688:	4001      	ands	r1, r0
 801168a:	d008      	beq.n	801169e <__any_on+0x28>
 801168c:	0098      	lsls	r0, r3, #2
 801168e:	5884      	ldr	r4, [r0, r2]
 8011690:	0020      	movs	r0, r4
 8011692:	40c8      	lsrs	r0, r1
 8011694:	4088      	lsls	r0, r1
 8011696:	0001      	movs	r1, r0
 8011698:	2001      	movs	r0, #1
 801169a:	428c      	cmp	r4, r1
 801169c:	d104      	bne.n	80116a8 <__any_on+0x32>
 801169e:	009b      	lsls	r3, r3, #2
 80116a0:	18d3      	adds	r3, r2, r3
 80116a2:	4293      	cmp	r3, r2
 80116a4:	d803      	bhi.n	80116ae <__any_on+0x38>
 80116a6:	2000      	movs	r0, #0
 80116a8:	bd10      	pop	{r4, pc}
 80116aa:	0003      	movs	r3, r0
 80116ac:	e7f7      	b.n	801169e <__any_on+0x28>
 80116ae:	3b04      	subs	r3, #4
 80116b0:	6819      	ldr	r1, [r3, #0]
 80116b2:	2900      	cmp	r1, #0
 80116b4:	d0f5      	beq.n	80116a2 <__any_on+0x2c>
 80116b6:	2001      	movs	r0, #1
 80116b8:	e7f6      	b.n	80116a8 <__any_on+0x32>

080116ba <_calloc_r>:
 80116ba:	434a      	muls	r2, r1
 80116bc:	b570      	push	{r4, r5, r6, lr}
 80116be:	0011      	movs	r1, r2
 80116c0:	0014      	movs	r4, r2
 80116c2:	f000 f853 	bl	801176c <_malloc_r>
 80116c6:	1e05      	subs	r5, r0, #0
 80116c8:	d003      	beq.n	80116d2 <_calloc_r+0x18>
 80116ca:	0022      	movs	r2, r4
 80116cc:	2100      	movs	r1, #0
 80116ce:	f7fc fbd7 	bl	800de80 <memset>
 80116d2:	0028      	movs	r0, r5
 80116d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080116d8 <_free_r>:
 80116d8:	b570      	push	{r4, r5, r6, lr}
 80116da:	0005      	movs	r5, r0
 80116dc:	2900      	cmp	r1, #0
 80116de:	d010      	beq.n	8011702 <_free_r+0x2a>
 80116e0:	1f0c      	subs	r4, r1, #4
 80116e2:	6823      	ldr	r3, [r4, #0]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	da00      	bge.n	80116ea <_free_r+0x12>
 80116e8:	18e4      	adds	r4, r4, r3
 80116ea:	0028      	movs	r0, r5
 80116ec:	f000 fdf1 	bl	80122d2 <__malloc_lock>
 80116f0:	4a1d      	ldr	r2, [pc, #116]	; (8011768 <_free_r+0x90>)
 80116f2:	6813      	ldr	r3, [r2, #0]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d105      	bne.n	8011704 <_free_r+0x2c>
 80116f8:	6063      	str	r3, [r4, #4]
 80116fa:	6014      	str	r4, [r2, #0]
 80116fc:	0028      	movs	r0, r5
 80116fe:	f000 fde9 	bl	80122d4 <__malloc_unlock>
 8011702:	bd70      	pop	{r4, r5, r6, pc}
 8011704:	42a3      	cmp	r3, r4
 8011706:	d909      	bls.n	801171c <_free_r+0x44>
 8011708:	6821      	ldr	r1, [r4, #0]
 801170a:	1860      	adds	r0, r4, r1
 801170c:	4283      	cmp	r3, r0
 801170e:	d1f3      	bne.n	80116f8 <_free_r+0x20>
 8011710:	6818      	ldr	r0, [r3, #0]
 8011712:	685b      	ldr	r3, [r3, #4]
 8011714:	1841      	adds	r1, r0, r1
 8011716:	6021      	str	r1, [r4, #0]
 8011718:	e7ee      	b.n	80116f8 <_free_r+0x20>
 801171a:	0013      	movs	r3, r2
 801171c:	685a      	ldr	r2, [r3, #4]
 801171e:	2a00      	cmp	r2, #0
 8011720:	d001      	beq.n	8011726 <_free_r+0x4e>
 8011722:	42a2      	cmp	r2, r4
 8011724:	d9f9      	bls.n	801171a <_free_r+0x42>
 8011726:	6819      	ldr	r1, [r3, #0]
 8011728:	1858      	adds	r0, r3, r1
 801172a:	42a0      	cmp	r0, r4
 801172c:	d10b      	bne.n	8011746 <_free_r+0x6e>
 801172e:	6820      	ldr	r0, [r4, #0]
 8011730:	1809      	adds	r1, r1, r0
 8011732:	1858      	adds	r0, r3, r1
 8011734:	6019      	str	r1, [r3, #0]
 8011736:	4282      	cmp	r2, r0
 8011738:	d1e0      	bne.n	80116fc <_free_r+0x24>
 801173a:	6810      	ldr	r0, [r2, #0]
 801173c:	6852      	ldr	r2, [r2, #4]
 801173e:	1841      	adds	r1, r0, r1
 8011740:	6019      	str	r1, [r3, #0]
 8011742:	605a      	str	r2, [r3, #4]
 8011744:	e7da      	b.n	80116fc <_free_r+0x24>
 8011746:	42a0      	cmp	r0, r4
 8011748:	d902      	bls.n	8011750 <_free_r+0x78>
 801174a:	230c      	movs	r3, #12
 801174c:	602b      	str	r3, [r5, #0]
 801174e:	e7d5      	b.n	80116fc <_free_r+0x24>
 8011750:	6821      	ldr	r1, [r4, #0]
 8011752:	1860      	adds	r0, r4, r1
 8011754:	4282      	cmp	r2, r0
 8011756:	d103      	bne.n	8011760 <_free_r+0x88>
 8011758:	6810      	ldr	r0, [r2, #0]
 801175a:	6852      	ldr	r2, [r2, #4]
 801175c:	1841      	adds	r1, r0, r1
 801175e:	6021      	str	r1, [r4, #0]
 8011760:	6062      	str	r2, [r4, #4]
 8011762:	605c      	str	r4, [r3, #4]
 8011764:	e7ca      	b.n	80116fc <_free_r+0x24>
 8011766:	46c0      	nop			; (mov r8, r8)
 8011768:	20000348 	.word	0x20000348

0801176c <_malloc_r>:
 801176c:	2303      	movs	r3, #3
 801176e:	b570      	push	{r4, r5, r6, lr}
 8011770:	1ccd      	adds	r5, r1, #3
 8011772:	439d      	bics	r5, r3
 8011774:	3508      	adds	r5, #8
 8011776:	0006      	movs	r6, r0
 8011778:	2d0c      	cmp	r5, #12
 801177a:	d21e      	bcs.n	80117ba <_malloc_r+0x4e>
 801177c:	250c      	movs	r5, #12
 801177e:	42a9      	cmp	r1, r5
 8011780:	d81d      	bhi.n	80117be <_malloc_r+0x52>
 8011782:	0030      	movs	r0, r6
 8011784:	f000 fda5 	bl	80122d2 <__malloc_lock>
 8011788:	4a25      	ldr	r2, [pc, #148]	; (8011820 <_malloc_r+0xb4>)
 801178a:	6814      	ldr	r4, [r2, #0]
 801178c:	0021      	movs	r1, r4
 801178e:	2900      	cmp	r1, #0
 8011790:	d119      	bne.n	80117c6 <_malloc_r+0x5a>
 8011792:	4c24      	ldr	r4, [pc, #144]	; (8011824 <_malloc_r+0xb8>)
 8011794:	6823      	ldr	r3, [r4, #0]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d103      	bne.n	80117a2 <_malloc_r+0x36>
 801179a:	0030      	movs	r0, r6
 801179c:	f000 fae2 	bl	8011d64 <_sbrk_r>
 80117a0:	6020      	str	r0, [r4, #0]
 80117a2:	0029      	movs	r1, r5
 80117a4:	0030      	movs	r0, r6
 80117a6:	f000 fadd 	bl	8011d64 <_sbrk_r>
 80117aa:	1c43      	adds	r3, r0, #1
 80117ac:	d12b      	bne.n	8011806 <_malloc_r+0x9a>
 80117ae:	230c      	movs	r3, #12
 80117b0:	0030      	movs	r0, r6
 80117b2:	6033      	str	r3, [r6, #0]
 80117b4:	f000 fd8e 	bl	80122d4 <__malloc_unlock>
 80117b8:	e003      	b.n	80117c2 <_malloc_r+0x56>
 80117ba:	2d00      	cmp	r5, #0
 80117bc:	dadf      	bge.n	801177e <_malloc_r+0x12>
 80117be:	230c      	movs	r3, #12
 80117c0:	6033      	str	r3, [r6, #0]
 80117c2:	2000      	movs	r0, #0
 80117c4:	bd70      	pop	{r4, r5, r6, pc}
 80117c6:	680b      	ldr	r3, [r1, #0]
 80117c8:	1b5b      	subs	r3, r3, r5
 80117ca:	d419      	bmi.n	8011800 <_malloc_r+0x94>
 80117cc:	2b0b      	cmp	r3, #11
 80117ce:	d903      	bls.n	80117d8 <_malloc_r+0x6c>
 80117d0:	600b      	str	r3, [r1, #0]
 80117d2:	18cc      	adds	r4, r1, r3
 80117d4:	6025      	str	r5, [r4, #0]
 80117d6:	e003      	b.n	80117e0 <_malloc_r+0x74>
 80117d8:	684b      	ldr	r3, [r1, #4]
 80117da:	428c      	cmp	r4, r1
 80117dc:	d10d      	bne.n	80117fa <_malloc_r+0x8e>
 80117de:	6013      	str	r3, [r2, #0]
 80117e0:	0030      	movs	r0, r6
 80117e2:	f000 fd77 	bl	80122d4 <__malloc_unlock>
 80117e6:	0020      	movs	r0, r4
 80117e8:	2207      	movs	r2, #7
 80117ea:	300b      	adds	r0, #11
 80117ec:	1d23      	adds	r3, r4, #4
 80117ee:	4390      	bics	r0, r2
 80117f0:	1ac3      	subs	r3, r0, r3
 80117f2:	d0e7      	beq.n	80117c4 <_malloc_r+0x58>
 80117f4:	425a      	negs	r2, r3
 80117f6:	50e2      	str	r2, [r4, r3]
 80117f8:	e7e4      	b.n	80117c4 <_malloc_r+0x58>
 80117fa:	6063      	str	r3, [r4, #4]
 80117fc:	000c      	movs	r4, r1
 80117fe:	e7ef      	b.n	80117e0 <_malloc_r+0x74>
 8011800:	000c      	movs	r4, r1
 8011802:	6849      	ldr	r1, [r1, #4]
 8011804:	e7c3      	b.n	801178e <_malloc_r+0x22>
 8011806:	2303      	movs	r3, #3
 8011808:	1cc4      	adds	r4, r0, #3
 801180a:	439c      	bics	r4, r3
 801180c:	42a0      	cmp	r0, r4
 801180e:	d0e1      	beq.n	80117d4 <_malloc_r+0x68>
 8011810:	1a21      	subs	r1, r4, r0
 8011812:	0030      	movs	r0, r6
 8011814:	f000 faa6 	bl	8011d64 <_sbrk_r>
 8011818:	1c43      	adds	r3, r0, #1
 801181a:	d1db      	bne.n	80117d4 <_malloc_r+0x68>
 801181c:	e7c7      	b.n	80117ae <_malloc_r+0x42>
 801181e:	46c0      	nop			; (mov r8, r8)
 8011820:	20000348 	.word	0x20000348
 8011824:	2000034c 	.word	0x2000034c

08011828 <__ssputs_r>:
 8011828:	b5f0      	push	{r4, r5, r6, r7, lr}
 801182a:	688e      	ldr	r6, [r1, #8]
 801182c:	b085      	sub	sp, #20
 801182e:	0007      	movs	r7, r0
 8011830:	000c      	movs	r4, r1
 8011832:	9203      	str	r2, [sp, #12]
 8011834:	9301      	str	r3, [sp, #4]
 8011836:	429e      	cmp	r6, r3
 8011838:	d83c      	bhi.n	80118b4 <__ssputs_r+0x8c>
 801183a:	2390      	movs	r3, #144	; 0x90
 801183c:	898a      	ldrh	r2, [r1, #12]
 801183e:	00db      	lsls	r3, r3, #3
 8011840:	421a      	tst	r2, r3
 8011842:	d034      	beq.n	80118ae <__ssputs_r+0x86>
 8011844:	2503      	movs	r5, #3
 8011846:	6909      	ldr	r1, [r1, #16]
 8011848:	6823      	ldr	r3, [r4, #0]
 801184a:	1a5b      	subs	r3, r3, r1
 801184c:	9302      	str	r3, [sp, #8]
 801184e:	6963      	ldr	r3, [r4, #20]
 8011850:	9802      	ldr	r0, [sp, #8]
 8011852:	435d      	muls	r5, r3
 8011854:	0feb      	lsrs	r3, r5, #31
 8011856:	195d      	adds	r5, r3, r5
 8011858:	9b01      	ldr	r3, [sp, #4]
 801185a:	106d      	asrs	r5, r5, #1
 801185c:	3301      	adds	r3, #1
 801185e:	181b      	adds	r3, r3, r0
 8011860:	42ab      	cmp	r3, r5
 8011862:	d900      	bls.n	8011866 <__ssputs_r+0x3e>
 8011864:	001d      	movs	r5, r3
 8011866:	0553      	lsls	r3, r2, #21
 8011868:	d532      	bpl.n	80118d0 <__ssputs_r+0xa8>
 801186a:	0029      	movs	r1, r5
 801186c:	0038      	movs	r0, r7
 801186e:	f7ff ff7d 	bl	801176c <_malloc_r>
 8011872:	1e06      	subs	r6, r0, #0
 8011874:	d109      	bne.n	801188a <__ssputs_r+0x62>
 8011876:	230c      	movs	r3, #12
 8011878:	603b      	str	r3, [r7, #0]
 801187a:	2340      	movs	r3, #64	; 0x40
 801187c:	2001      	movs	r0, #1
 801187e:	89a2      	ldrh	r2, [r4, #12]
 8011880:	4240      	negs	r0, r0
 8011882:	4313      	orrs	r3, r2
 8011884:	81a3      	strh	r3, [r4, #12]
 8011886:	b005      	add	sp, #20
 8011888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801188a:	9a02      	ldr	r2, [sp, #8]
 801188c:	6921      	ldr	r1, [r4, #16]
 801188e:	f7fc faee 	bl	800de6e <memcpy>
 8011892:	89a3      	ldrh	r3, [r4, #12]
 8011894:	4a14      	ldr	r2, [pc, #80]	; (80118e8 <__ssputs_r+0xc0>)
 8011896:	401a      	ands	r2, r3
 8011898:	2380      	movs	r3, #128	; 0x80
 801189a:	4313      	orrs	r3, r2
 801189c:	81a3      	strh	r3, [r4, #12]
 801189e:	9b02      	ldr	r3, [sp, #8]
 80118a0:	6126      	str	r6, [r4, #16]
 80118a2:	18f6      	adds	r6, r6, r3
 80118a4:	6026      	str	r6, [r4, #0]
 80118a6:	6165      	str	r5, [r4, #20]
 80118a8:	9e01      	ldr	r6, [sp, #4]
 80118aa:	1aed      	subs	r5, r5, r3
 80118ac:	60a5      	str	r5, [r4, #8]
 80118ae:	9b01      	ldr	r3, [sp, #4]
 80118b0:	429e      	cmp	r6, r3
 80118b2:	d900      	bls.n	80118b6 <__ssputs_r+0x8e>
 80118b4:	9e01      	ldr	r6, [sp, #4]
 80118b6:	0032      	movs	r2, r6
 80118b8:	9903      	ldr	r1, [sp, #12]
 80118ba:	6820      	ldr	r0, [r4, #0]
 80118bc:	f000 fcf6 	bl	80122ac <memmove>
 80118c0:	68a3      	ldr	r3, [r4, #8]
 80118c2:	2000      	movs	r0, #0
 80118c4:	1b9b      	subs	r3, r3, r6
 80118c6:	60a3      	str	r3, [r4, #8]
 80118c8:	6823      	ldr	r3, [r4, #0]
 80118ca:	199e      	adds	r6, r3, r6
 80118cc:	6026      	str	r6, [r4, #0]
 80118ce:	e7da      	b.n	8011886 <__ssputs_r+0x5e>
 80118d0:	002a      	movs	r2, r5
 80118d2:	0038      	movs	r0, r7
 80118d4:	f000 fcff 	bl	80122d6 <_realloc_r>
 80118d8:	1e06      	subs	r6, r0, #0
 80118da:	d1e0      	bne.n	801189e <__ssputs_r+0x76>
 80118dc:	6921      	ldr	r1, [r4, #16]
 80118de:	0038      	movs	r0, r7
 80118e0:	f7ff fefa 	bl	80116d8 <_free_r>
 80118e4:	e7c7      	b.n	8011876 <__ssputs_r+0x4e>
 80118e6:	46c0      	nop			; (mov r8, r8)
 80118e8:	fffffb7f 	.word	0xfffffb7f

080118ec <_svfiprintf_r>:
 80118ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118ee:	b0a1      	sub	sp, #132	; 0x84
 80118f0:	9003      	str	r0, [sp, #12]
 80118f2:	001d      	movs	r5, r3
 80118f4:	898b      	ldrh	r3, [r1, #12]
 80118f6:	000f      	movs	r7, r1
 80118f8:	0016      	movs	r6, r2
 80118fa:	061b      	lsls	r3, r3, #24
 80118fc:	d511      	bpl.n	8011922 <_svfiprintf_r+0x36>
 80118fe:	690b      	ldr	r3, [r1, #16]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d10e      	bne.n	8011922 <_svfiprintf_r+0x36>
 8011904:	2140      	movs	r1, #64	; 0x40
 8011906:	f7ff ff31 	bl	801176c <_malloc_r>
 801190a:	6038      	str	r0, [r7, #0]
 801190c:	6138      	str	r0, [r7, #16]
 801190e:	2800      	cmp	r0, #0
 8011910:	d105      	bne.n	801191e <_svfiprintf_r+0x32>
 8011912:	230c      	movs	r3, #12
 8011914:	9a03      	ldr	r2, [sp, #12]
 8011916:	3801      	subs	r0, #1
 8011918:	6013      	str	r3, [r2, #0]
 801191a:	b021      	add	sp, #132	; 0x84
 801191c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801191e:	2340      	movs	r3, #64	; 0x40
 8011920:	617b      	str	r3, [r7, #20]
 8011922:	2300      	movs	r3, #0
 8011924:	ac08      	add	r4, sp, #32
 8011926:	6163      	str	r3, [r4, #20]
 8011928:	3320      	adds	r3, #32
 801192a:	7663      	strb	r3, [r4, #25]
 801192c:	3310      	adds	r3, #16
 801192e:	76a3      	strb	r3, [r4, #26]
 8011930:	9507      	str	r5, [sp, #28]
 8011932:	0035      	movs	r5, r6
 8011934:	782b      	ldrb	r3, [r5, #0]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d001      	beq.n	801193e <_svfiprintf_r+0x52>
 801193a:	2b25      	cmp	r3, #37	; 0x25
 801193c:	d146      	bne.n	80119cc <_svfiprintf_r+0xe0>
 801193e:	1bab      	subs	r3, r5, r6
 8011940:	9305      	str	r3, [sp, #20]
 8011942:	d00c      	beq.n	801195e <_svfiprintf_r+0x72>
 8011944:	0032      	movs	r2, r6
 8011946:	0039      	movs	r1, r7
 8011948:	9803      	ldr	r0, [sp, #12]
 801194a:	f7ff ff6d 	bl	8011828 <__ssputs_r>
 801194e:	1c43      	adds	r3, r0, #1
 8011950:	d100      	bne.n	8011954 <_svfiprintf_r+0x68>
 8011952:	e0ae      	b.n	8011ab2 <_svfiprintf_r+0x1c6>
 8011954:	6962      	ldr	r2, [r4, #20]
 8011956:	9b05      	ldr	r3, [sp, #20]
 8011958:	4694      	mov	ip, r2
 801195a:	4463      	add	r3, ip
 801195c:	6163      	str	r3, [r4, #20]
 801195e:	782b      	ldrb	r3, [r5, #0]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d100      	bne.n	8011966 <_svfiprintf_r+0x7a>
 8011964:	e0a5      	b.n	8011ab2 <_svfiprintf_r+0x1c6>
 8011966:	2201      	movs	r2, #1
 8011968:	2300      	movs	r3, #0
 801196a:	4252      	negs	r2, r2
 801196c:	6062      	str	r2, [r4, #4]
 801196e:	a904      	add	r1, sp, #16
 8011970:	3254      	adds	r2, #84	; 0x54
 8011972:	1852      	adds	r2, r2, r1
 8011974:	1c6e      	adds	r6, r5, #1
 8011976:	6023      	str	r3, [r4, #0]
 8011978:	60e3      	str	r3, [r4, #12]
 801197a:	60a3      	str	r3, [r4, #8]
 801197c:	7013      	strb	r3, [r2, #0]
 801197e:	65a3      	str	r3, [r4, #88]	; 0x58
 8011980:	7831      	ldrb	r1, [r6, #0]
 8011982:	2205      	movs	r2, #5
 8011984:	4853      	ldr	r0, [pc, #332]	; (8011ad4 <_svfiprintf_r+0x1e8>)
 8011986:	f7ff fa97 	bl	8010eb8 <memchr>
 801198a:	1c75      	adds	r5, r6, #1
 801198c:	2800      	cmp	r0, #0
 801198e:	d11f      	bne.n	80119d0 <_svfiprintf_r+0xe4>
 8011990:	6822      	ldr	r2, [r4, #0]
 8011992:	06d3      	lsls	r3, r2, #27
 8011994:	d504      	bpl.n	80119a0 <_svfiprintf_r+0xb4>
 8011996:	2353      	movs	r3, #83	; 0x53
 8011998:	a904      	add	r1, sp, #16
 801199a:	185b      	adds	r3, r3, r1
 801199c:	2120      	movs	r1, #32
 801199e:	7019      	strb	r1, [r3, #0]
 80119a0:	0713      	lsls	r3, r2, #28
 80119a2:	d504      	bpl.n	80119ae <_svfiprintf_r+0xc2>
 80119a4:	2353      	movs	r3, #83	; 0x53
 80119a6:	a904      	add	r1, sp, #16
 80119a8:	185b      	adds	r3, r3, r1
 80119aa:	212b      	movs	r1, #43	; 0x2b
 80119ac:	7019      	strb	r1, [r3, #0]
 80119ae:	7833      	ldrb	r3, [r6, #0]
 80119b0:	2b2a      	cmp	r3, #42	; 0x2a
 80119b2:	d016      	beq.n	80119e2 <_svfiprintf_r+0xf6>
 80119b4:	0035      	movs	r5, r6
 80119b6:	2100      	movs	r1, #0
 80119b8:	200a      	movs	r0, #10
 80119ba:	68e3      	ldr	r3, [r4, #12]
 80119bc:	782a      	ldrb	r2, [r5, #0]
 80119be:	1c6e      	adds	r6, r5, #1
 80119c0:	3a30      	subs	r2, #48	; 0x30
 80119c2:	2a09      	cmp	r2, #9
 80119c4:	d94e      	bls.n	8011a64 <_svfiprintf_r+0x178>
 80119c6:	2900      	cmp	r1, #0
 80119c8:	d018      	beq.n	80119fc <_svfiprintf_r+0x110>
 80119ca:	e010      	b.n	80119ee <_svfiprintf_r+0x102>
 80119cc:	3501      	adds	r5, #1
 80119ce:	e7b1      	b.n	8011934 <_svfiprintf_r+0x48>
 80119d0:	4b40      	ldr	r3, [pc, #256]	; (8011ad4 <_svfiprintf_r+0x1e8>)
 80119d2:	6822      	ldr	r2, [r4, #0]
 80119d4:	1ac0      	subs	r0, r0, r3
 80119d6:	2301      	movs	r3, #1
 80119d8:	4083      	lsls	r3, r0
 80119da:	4313      	orrs	r3, r2
 80119dc:	6023      	str	r3, [r4, #0]
 80119de:	002e      	movs	r6, r5
 80119e0:	e7ce      	b.n	8011980 <_svfiprintf_r+0x94>
 80119e2:	9b07      	ldr	r3, [sp, #28]
 80119e4:	1d19      	adds	r1, r3, #4
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	9107      	str	r1, [sp, #28]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	db01      	blt.n	80119f2 <_svfiprintf_r+0x106>
 80119ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80119f0:	e004      	b.n	80119fc <_svfiprintf_r+0x110>
 80119f2:	425b      	negs	r3, r3
 80119f4:	60e3      	str	r3, [r4, #12]
 80119f6:	2302      	movs	r3, #2
 80119f8:	4313      	orrs	r3, r2
 80119fa:	6023      	str	r3, [r4, #0]
 80119fc:	782b      	ldrb	r3, [r5, #0]
 80119fe:	2b2e      	cmp	r3, #46	; 0x2e
 8011a00:	d10a      	bne.n	8011a18 <_svfiprintf_r+0x12c>
 8011a02:	786b      	ldrb	r3, [r5, #1]
 8011a04:	2b2a      	cmp	r3, #42	; 0x2a
 8011a06:	d135      	bne.n	8011a74 <_svfiprintf_r+0x188>
 8011a08:	9b07      	ldr	r3, [sp, #28]
 8011a0a:	3502      	adds	r5, #2
 8011a0c:	1d1a      	adds	r2, r3, #4
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	9207      	str	r2, [sp, #28]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	db2b      	blt.n	8011a6e <_svfiprintf_r+0x182>
 8011a16:	9309      	str	r3, [sp, #36]	; 0x24
 8011a18:	4e2f      	ldr	r6, [pc, #188]	; (8011ad8 <_svfiprintf_r+0x1ec>)
 8011a1a:	7829      	ldrb	r1, [r5, #0]
 8011a1c:	2203      	movs	r2, #3
 8011a1e:	0030      	movs	r0, r6
 8011a20:	f7ff fa4a 	bl	8010eb8 <memchr>
 8011a24:	2800      	cmp	r0, #0
 8011a26:	d006      	beq.n	8011a36 <_svfiprintf_r+0x14a>
 8011a28:	2340      	movs	r3, #64	; 0x40
 8011a2a:	1b80      	subs	r0, r0, r6
 8011a2c:	4083      	lsls	r3, r0
 8011a2e:	6822      	ldr	r2, [r4, #0]
 8011a30:	3501      	adds	r5, #1
 8011a32:	4313      	orrs	r3, r2
 8011a34:	6023      	str	r3, [r4, #0]
 8011a36:	7829      	ldrb	r1, [r5, #0]
 8011a38:	2206      	movs	r2, #6
 8011a3a:	4828      	ldr	r0, [pc, #160]	; (8011adc <_svfiprintf_r+0x1f0>)
 8011a3c:	1c6e      	adds	r6, r5, #1
 8011a3e:	7621      	strb	r1, [r4, #24]
 8011a40:	f7ff fa3a 	bl	8010eb8 <memchr>
 8011a44:	2800      	cmp	r0, #0
 8011a46:	d03c      	beq.n	8011ac2 <_svfiprintf_r+0x1d6>
 8011a48:	4b25      	ldr	r3, [pc, #148]	; (8011ae0 <_svfiprintf_r+0x1f4>)
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d125      	bne.n	8011a9a <_svfiprintf_r+0x1ae>
 8011a4e:	2207      	movs	r2, #7
 8011a50:	9b07      	ldr	r3, [sp, #28]
 8011a52:	3307      	adds	r3, #7
 8011a54:	4393      	bics	r3, r2
 8011a56:	3308      	adds	r3, #8
 8011a58:	9307      	str	r3, [sp, #28]
 8011a5a:	6963      	ldr	r3, [r4, #20]
 8011a5c:	9a04      	ldr	r2, [sp, #16]
 8011a5e:	189b      	adds	r3, r3, r2
 8011a60:	6163      	str	r3, [r4, #20]
 8011a62:	e766      	b.n	8011932 <_svfiprintf_r+0x46>
 8011a64:	4343      	muls	r3, r0
 8011a66:	2101      	movs	r1, #1
 8011a68:	189b      	adds	r3, r3, r2
 8011a6a:	0035      	movs	r5, r6
 8011a6c:	e7a6      	b.n	80119bc <_svfiprintf_r+0xd0>
 8011a6e:	2301      	movs	r3, #1
 8011a70:	425b      	negs	r3, r3
 8011a72:	e7d0      	b.n	8011a16 <_svfiprintf_r+0x12a>
 8011a74:	2300      	movs	r3, #0
 8011a76:	200a      	movs	r0, #10
 8011a78:	001a      	movs	r2, r3
 8011a7a:	3501      	adds	r5, #1
 8011a7c:	6063      	str	r3, [r4, #4]
 8011a7e:	7829      	ldrb	r1, [r5, #0]
 8011a80:	1c6e      	adds	r6, r5, #1
 8011a82:	3930      	subs	r1, #48	; 0x30
 8011a84:	2909      	cmp	r1, #9
 8011a86:	d903      	bls.n	8011a90 <_svfiprintf_r+0x1a4>
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d0c5      	beq.n	8011a18 <_svfiprintf_r+0x12c>
 8011a8c:	9209      	str	r2, [sp, #36]	; 0x24
 8011a8e:	e7c3      	b.n	8011a18 <_svfiprintf_r+0x12c>
 8011a90:	4342      	muls	r2, r0
 8011a92:	2301      	movs	r3, #1
 8011a94:	1852      	adds	r2, r2, r1
 8011a96:	0035      	movs	r5, r6
 8011a98:	e7f1      	b.n	8011a7e <_svfiprintf_r+0x192>
 8011a9a:	ab07      	add	r3, sp, #28
 8011a9c:	9300      	str	r3, [sp, #0]
 8011a9e:	003a      	movs	r2, r7
 8011aa0:	4b10      	ldr	r3, [pc, #64]	; (8011ae4 <_svfiprintf_r+0x1f8>)
 8011aa2:	0021      	movs	r1, r4
 8011aa4:	9803      	ldr	r0, [sp, #12]
 8011aa6:	f7fc fa8f 	bl	800dfc8 <_printf_float>
 8011aaa:	9004      	str	r0, [sp, #16]
 8011aac:	9b04      	ldr	r3, [sp, #16]
 8011aae:	3301      	adds	r3, #1
 8011ab0:	d1d3      	bne.n	8011a5a <_svfiprintf_r+0x16e>
 8011ab2:	89bb      	ldrh	r3, [r7, #12]
 8011ab4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011ab6:	065b      	lsls	r3, r3, #25
 8011ab8:	d400      	bmi.n	8011abc <_svfiprintf_r+0x1d0>
 8011aba:	e72e      	b.n	801191a <_svfiprintf_r+0x2e>
 8011abc:	2001      	movs	r0, #1
 8011abe:	4240      	negs	r0, r0
 8011ac0:	e72b      	b.n	801191a <_svfiprintf_r+0x2e>
 8011ac2:	ab07      	add	r3, sp, #28
 8011ac4:	9300      	str	r3, [sp, #0]
 8011ac6:	003a      	movs	r2, r7
 8011ac8:	4b06      	ldr	r3, [pc, #24]	; (8011ae4 <_svfiprintf_r+0x1f8>)
 8011aca:	0021      	movs	r1, r4
 8011acc:	9803      	ldr	r0, [sp, #12]
 8011ace:	f7fc fd35 	bl	800e53c <_printf_i>
 8011ad2:	e7ea      	b.n	8011aaa <_svfiprintf_r+0x1be>
 8011ad4:	08012db4 	.word	0x08012db4
 8011ad8:	08012dba 	.word	0x08012dba
 8011adc:	08012dbe 	.word	0x08012dbe
 8011ae0:	0800dfc9 	.word	0x0800dfc9
 8011ae4:	08011829 	.word	0x08011829

08011ae8 <__sfputc_r>:
 8011ae8:	6893      	ldr	r3, [r2, #8]
 8011aea:	b510      	push	{r4, lr}
 8011aec:	3b01      	subs	r3, #1
 8011aee:	6093      	str	r3, [r2, #8]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	da04      	bge.n	8011afe <__sfputc_r+0x16>
 8011af4:	6994      	ldr	r4, [r2, #24]
 8011af6:	42a3      	cmp	r3, r4
 8011af8:	db07      	blt.n	8011b0a <__sfputc_r+0x22>
 8011afa:	290a      	cmp	r1, #10
 8011afc:	d005      	beq.n	8011b0a <__sfputc_r+0x22>
 8011afe:	6813      	ldr	r3, [r2, #0]
 8011b00:	1c58      	adds	r0, r3, #1
 8011b02:	6010      	str	r0, [r2, #0]
 8011b04:	7019      	strb	r1, [r3, #0]
 8011b06:	0008      	movs	r0, r1
 8011b08:	bd10      	pop	{r4, pc}
 8011b0a:	f000 f99b 	bl	8011e44 <__swbuf_r>
 8011b0e:	0001      	movs	r1, r0
 8011b10:	e7f9      	b.n	8011b06 <__sfputc_r+0x1e>

08011b12 <__sfputs_r>:
 8011b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b14:	0006      	movs	r6, r0
 8011b16:	000f      	movs	r7, r1
 8011b18:	0014      	movs	r4, r2
 8011b1a:	18d5      	adds	r5, r2, r3
 8011b1c:	42ac      	cmp	r4, r5
 8011b1e:	d101      	bne.n	8011b24 <__sfputs_r+0x12>
 8011b20:	2000      	movs	r0, #0
 8011b22:	e007      	b.n	8011b34 <__sfputs_r+0x22>
 8011b24:	7821      	ldrb	r1, [r4, #0]
 8011b26:	003a      	movs	r2, r7
 8011b28:	0030      	movs	r0, r6
 8011b2a:	f7ff ffdd 	bl	8011ae8 <__sfputc_r>
 8011b2e:	3401      	adds	r4, #1
 8011b30:	1c43      	adds	r3, r0, #1
 8011b32:	d1f3      	bne.n	8011b1c <__sfputs_r+0xa>
 8011b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011b38 <_vfiprintf_r>:
 8011b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b3a:	b0a1      	sub	sp, #132	; 0x84
 8011b3c:	9003      	str	r0, [sp, #12]
 8011b3e:	000f      	movs	r7, r1
 8011b40:	0016      	movs	r6, r2
 8011b42:	001d      	movs	r5, r3
 8011b44:	2800      	cmp	r0, #0
 8011b46:	d005      	beq.n	8011b54 <_vfiprintf_r+0x1c>
 8011b48:	6983      	ldr	r3, [r0, #24]
 8011b4a:	9305      	str	r3, [sp, #20]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d101      	bne.n	8011b54 <_vfiprintf_r+0x1c>
 8011b50:	f7fe fdc0 	bl	80106d4 <__sinit>
 8011b54:	4b7b      	ldr	r3, [pc, #492]	; (8011d44 <_vfiprintf_r+0x20c>)
 8011b56:	429f      	cmp	r7, r3
 8011b58:	d15c      	bne.n	8011c14 <_vfiprintf_r+0xdc>
 8011b5a:	9b03      	ldr	r3, [sp, #12]
 8011b5c:	685f      	ldr	r7, [r3, #4]
 8011b5e:	89bb      	ldrh	r3, [r7, #12]
 8011b60:	071b      	lsls	r3, r3, #28
 8011b62:	d563      	bpl.n	8011c2c <_vfiprintf_r+0xf4>
 8011b64:	693b      	ldr	r3, [r7, #16]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d060      	beq.n	8011c2c <_vfiprintf_r+0xf4>
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	ac08      	add	r4, sp, #32
 8011b6e:	6163      	str	r3, [r4, #20]
 8011b70:	3320      	adds	r3, #32
 8011b72:	7663      	strb	r3, [r4, #25]
 8011b74:	3310      	adds	r3, #16
 8011b76:	76a3      	strb	r3, [r4, #26]
 8011b78:	9507      	str	r5, [sp, #28]
 8011b7a:	0035      	movs	r5, r6
 8011b7c:	782b      	ldrb	r3, [r5, #0]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d001      	beq.n	8011b86 <_vfiprintf_r+0x4e>
 8011b82:	2b25      	cmp	r3, #37	; 0x25
 8011b84:	d15c      	bne.n	8011c40 <_vfiprintf_r+0x108>
 8011b86:	1bab      	subs	r3, r5, r6
 8011b88:	9305      	str	r3, [sp, #20]
 8011b8a:	d00c      	beq.n	8011ba6 <_vfiprintf_r+0x6e>
 8011b8c:	0032      	movs	r2, r6
 8011b8e:	0039      	movs	r1, r7
 8011b90:	9803      	ldr	r0, [sp, #12]
 8011b92:	f7ff ffbe 	bl	8011b12 <__sfputs_r>
 8011b96:	1c43      	adds	r3, r0, #1
 8011b98:	d100      	bne.n	8011b9c <_vfiprintf_r+0x64>
 8011b9a:	e0c4      	b.n	8011d26 <_vfiprintf_r+0x1ee>
 8011b9c:	6962      	ldr	r2, [r4, #20]
 8011b9e:	9b05      	ldr	r3, [sp, #20]
 8011ba0:	4694      	mov	ip, r2
 8011ba2:	4463      	add	r3, ip
 8011ba4:	6163      	str	r3, [r4, #20]
 8011ba6:	782b      	ldrb	r3, [r5, #0]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d100      	bne.n	8011bae <_vfiprintf_r+0x76>
 8011bac:	e0bb      	b.n	8011d26 <_vfiprintf_r+0x1ee>
 8011bae:	2201      	movs	r2, #1
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	4252      	negs	r2, r2
 8011bb4:	6062      	str	r2, [r4, #4]
 8011bb6:	a904      	add	r1, sp, #16
 8011bb8:	3254      	adds	r2, #84	; 0x54
 8011bba:	1852      	adds	r2, r2, r1
 8011bbc:	1c6e      	adds	r6, r5, #1
 8011bbe:	6023      	str	r3, [r4, #0]
 8011bc0:	60e3      	str	r3, [r4, #12]
 8011bc2:	60a3      	str	r3, [r4, #8]
 8011bc4:	7013      	strb	r3, [r2, #0]
 8011bc6:	65a3      	str	r3, [r4, #88]	; 0x58
 8011bc8:	7831      	ldrb	r1, [r6, #0]
 8011bca:	2205      	movs	r2, #5
 8011bcc:	485e      	ldr	r0, [pc, #376]	; (8011d48 <_vfiprintf_r+0x210>)
 8011bce:	f7ff f973 	bl	8010eb8 <memchr>
 8011bd2:	1c75      	adds	r5, r6, #1
 8011bd4:	2800      	cmp	r0, #0
 8011bd6:	d135      	bne.n	8011c44 <_vfiprintf_r+0x10c>
 8011bd8:	6822      	ldr	r2, [r4, #0]
 8011bda:	06d3      	lsls	r3, r2, #27
 8011bdc:	d504      	bpl.n	8011be8 <_vfiprintf_r+0xb0>
 8011bde:	2353      	movs	r3, #83	; 0x53
 8011be0:	a904      	add	r1, sp, #16
 8011be2:	185b      	adds	r3, r3, r1
 8011be4:	2120      	movs	r1, #32
 8011be6:	7019      	strb	r1, [r3, #0]
 8011be8:	0713      	lsls	r3, r2, #28
 8011bea:	d504      	bpl.n	8011bf6 <_vfiprintf_r+0xbe>
 8011bec:	2353      	movs	r3, #83	; 0x53
 8011bee:	a904      	add	r1, sp, #16
 8011bf0:	185b      	adds	r3, r3, r1
 8011bf2:	212b      	movs	r1, #43	; 0x2b
 8011bf4:	7019      	strb	r1, [r3, #0]
 8011bf6:	7833      	ldrb	r3, [r6, #0]
 8011bf8:	2b2a      	cmp	r3, #42	; 0x2a
 8011bfa:	d02c      	beq.n	8011c56 <_vfiprintf_r+0x11e>
 8011bfc:	0035      	movs	r5, r6
 8011bfe:	2100      	movs	r1, #0
 8011c00:	200a      	movs	r0, #10
 8011c02:	68e3      	ldr	r3, [r4, #12]
 8011c04:	782a      	ldrb	r2, [r5, #0]
 8011c06:	1c6e      	adds	r6, r5, #1
 8011c08:	3a30      	subs	r2, #48	; 0x30
 8011c0a:	2a09      	cmp	r2, #9
 8011c0c:	d964      	bls.n	8011cd8 <_vfiprintf_r+0x1a0>
 8011c0e:	2900      	cmp	r1, #0
 8011c10:	d02e      	beq.n	8011c70 <_vfiprintf_r+0x138>
 8011c12:	e026      	b.n	8011c62 <_vfiprintf_r+0x12a>
 8011c14:	4b4d      	ldr	r3, [pc, #308]	; (8011d4c <_vfiprintf_r+0x214>)
 8011c16:	429f      	cmp	r7, r3
 8011c18:	d102      	bne.n	8011c20 <_vfiprintf_r+0xe8>
 8011c1a:	9b03      	ldr	r3, [sp, #12]
 8011c1c:	689f      	ldr	r7, [r3, #8]
 8011c1e:	e79e      	b.n	8011b5e <_vfiprintf_r+0x26>
 8011c20:	4b4b      	ldr	r3, [pc, #300]	; (8011d50 <_vfiprintf_r+0x218>)
 8011c22:	429f      	cmp	r7, r3
 8011c24:	d19b      	bne.n	8011b5e <_vfiprintf_r+0x26>
 8011c26:	9b03      	ldr	r3, [sp, #12]
 8011c28:	68df      	ldr	r7, [r3, #12]
 8011c2a:	e798      	b.n	8011b5e <_vfiprintf_r+0x26>
 8011c2c:	0039      	movs	r1, r7
 8011c2e:	9803      	ldr	r0, [sp, #12]
 8011c30:	f000 f97e 	bl	8011f30 <__swsetup_r>
 8011c34:	2800      	cmp	r0, #0
 8011c36:	d098      	beq.n	8011b6a <_vfiprintf_r+0x32>
 8011c38:	2001      	movs	r0, #1
 8011c3a:	4240      	negs	r0, r0
 8011c3c:	b021      	add	sp, #132	; 0x84
 8011c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c40:	3501      	adds	r5, #1
 8011c42:	e79b      	b.n	8011b7c <_vfiprintf_r+0x44>
 8011c44:	4b40      	ldr	r3, [pc, #256]	; (8011d48 <_vfiprintf_r+0x210>)
 8011c46:	6822      	ldr	r2, [r4, #0]
 8011c48:	1ac0      	subs	r0, r0, r3
 8011c4a:	2301      	movs	r3, #1
 8011c4c:	4083      	lsls	r3, r0
 8011c4e:	4313      	orrs	r3, r2
 8011c50:	6023      	str	r3, [r4, #0]
 8011c52:	002e      	movs	r6, r5
 8011c54:	e7b8      	b.n	8011bc8 <_vfiprintf_r+0x90>
 8011c56:	9b07      	ldr	r3, [sp, #28]
 8011c58:	1d19      	adds	r1, r3, #4
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	9107      	str	r1, [sp, #28]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	db01      	blt.n	8011c66 <_vfiprintf_r+0x12e>
 8011c62:	930b      	str	r3, [sp, #44]	; 0x2c
 8011c64:	e004      	b.n	8011c70 <_vfiprintf_r+0x138>
 8011c66:	425b      	negs	r3, r3
 8011c68:	60e3      	str	r3, [r4, #12]
 8011c6a:	2302      	movs	r3, #2
 8011c6c:	4313      	orrs	r3, r2
 8011c6e:	6023      	str	r3, [r4, #0]
 8011c70:	782b      	ldrb	r3, [r5, #0]
 8011c72:	2b2e      	cmp	r3, #46	; 0x2e
 8011c74:	d10a      	bne.n	8011c8c <_vfiprintf_r+0x154>
 8011c76:	786b      	ldrb	r3, [r5, #1]
 8011c78:	2b2a      	cmp	r3, #42	; 0x2a
 8011c7a:	d135      	bne.n	8011ce8 <_vfiprintf_r+0x1b0>
 8011c7c:	9b07      	ldr	r3, [sp, #28]
 8011c7e:	3502      	adds	r5, #2
 8011c80:	1d1a      	adds	r2, r3, #4
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	9207      	str	r2, [sp, #28]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	db2b      	blt.n	8011ce2 <_vfiprintf_r+0x1aa>
 8011c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8011c8c:	4e31      	ldr	r6, [pc, #196]	; (8011d54 <_vfiprintf_r+0x21c>)
 8011c8e:	7829      	ldrb	r1, [r5, #0]
 8011c90:	2203      	movs	r2, #3
 8011c92:	0030      	movs	r0, r6
 8011c94:	f7ff f910 	bl	8010eb8 <memchr>
 8011c98:	2800      	cmp	r0, #0
 8011c9a:	d006      	beq.n	8011caa <_vfiprintf_r+0x172>
 8011c9c:	2340      	movs	r3, #64	; 0x40
 8011c9e:	1b80      	subs	r0, r0, r6
 8011ca0:	4083      	lsls	r3, r0
 8011ca2:	6822      	ldr	r2, [r4, #0]
 8011ca4:	3501      	adds	r5, #1
 8011ca6:	4313      	orrs	r3, r2
 8011ca8:	6023      	str	r3, [r4, #0]
 8011caa:	7829      	ldrb	r1, [r5, #0]
 8011cac:	2206      	movs	r2, #6
 8011cae:	482a      	ldr	r0, [pc, #168]	; (8011d58 <_vfiprintf_r+0x220>)
 8011cb0:	1c6e      	adds	r6, r5, #1
 8011cb2:	7621      	strb	r1, [r4, #24]
 8011cb4:	f7ff f900 	bl	8010eb8 <memchr>
 8011cb8:	2800      	cmp	r0, #0
 8011cba:	d03a      	beq.n	8011d32 <_vfiprintf_r+0x1fa>
 8011cbc:	4b27      	ldr	r3, [pc, #156]	; (8011d5c <_vfiprintf_r+0x224>)
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d125      	bne.n	8011d0e <_vfiprintf_r+0x1d6>
 8011cc2:	2207      	movs	r2, #7
 8011cc4:	9b07      	ldr	r3, [sp, #28]
 8011cc6:	3307      	adds	r3, #7
 8011cc8:	4393      	bics	r3, r2
 8011cca:	3308      	adds	r3, #8
 8011ccc:	9307      	str	r3, [sp, #28]
 8011cce:	6963      	ldr	r3, [r4, #20]
 8011cd0:	9a04      	ldr	r2, [sp, #16]
 8011cd2:	189b      	adds	r3, r3, r2
 8011cd4:	6163      	str	r3, [r4, #20]
 8011cd6:	e750      	b.n	8011b7a <_vfiprintf_r+0x42>
 8011cd8:	4343      	muls	r3, r0
 8011cda:	2101      	movs	r1, #1
 8011cdc:	189b      	adds	r3, r3, r2
 8011cde:	0035      	movs	r5, r6
 8011ce0:	e790      	b.n	8011c04 <_vfiprintf_r+0xcc>
 8011ce2:	2301      	movs	r3, #1
 8011ce4:	425b      	negs	r3, r3
 8011ce6:	e7d0      	b.n	8011c8a <_vfiprintf_r+0x152>
 8011ce8:	2300      	movs	r3, #0
 8011cea:	200a      	movs	r0, #10
 8011cec:	001a      	movs	r2, r3
 8011cee:	3501      	adds	r5, #1
 8011cf0:	6063      	str	r3, [r4, #4]
 8011cf2:	7829      	ldrb	r1, [r5, #0]
 8011cf4:	1c6e      	adds	r6, r5, #1
 8011cf6:	3930      	subs	r1, #48	; 0x30
 8011cf8:	2909      	cmp	r1, #9
 8011cfa:	d903      	bls.n	8011d04 <_vfiprintf_r+0x1cc>
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d0c5      	beq.n	8011c8c <_vfiprintf_r+0x154>
 8011d00:	9209      	str	r2, [sp, #36]	; 0x24
 8011d02:	e7c3      	b.n	8011c8c <_vfiprintf_r+0x154>
 8011d04:	4342      	muls	r2, r0
 8011d06:	2301      	movs	r3, #1
 8011d08:	1852      	adds	r2, r2, r1
 8011d0a:	0035      	movs	r5, r6
 8011d0c:	e7f1      	b.n	8011cf2 <_vfiprintf_r+0x1ba>
 8011d0e:	ab07      	add	r3, sp, #28
 8011d10:	9300      	str	r3, [sp, #0]
 8011d12:	003a      	movs	r2, r7
 8011d14:	4b12      	ldr	r3, [pc, #72]	; (8011d60 <_vfiprintf_r+0x228>)
 8011d16:	0021      	movs	r1, r4
 8011d18:	9803      	ldr	r0, [sp, #12]
 8011d1a:	f7fc f955 	bl	800dfc8 <_printf_float>
 8011d1e:	9004      	str	r0, [sp, #16]
 8011d20:	9b04      	ldr	r3, [sp, #16]
 8011d22:	3301      	adds	r3, #1
 8011d24:	d1d3      	bne.n	8011cce <_vfiprintf_r+0x196>
 8011d26:	89bb      	ldrh	r3, [r7, #12]
 8011d28:	065b      	lsls	r3, r3, #25
 8011d2a:	d500      	bpl.n	8011d2e <_vfiprintf_r+0x1f6>
 8011d2c:	e784      	b.n	8011c38 <_vfiprintf_r+0x100>
 8011d2e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011d30:	e784      	b.n	8011c3c <_vfiprintf_r+0x104>
 8011d32:	ab07      	add	r3, sp, #28
 8011d34:	9300      	str	r3, [sp, #0]
 8011d36:	003a      	movs	r2, r7
 8011d38:	4b09      	ldr	r3, [pc, #36]	; (8011d60 <_vfiprintf_r+0x228>)
 8011d3a:	0021      	movs	r1, r4
 8011d3c:	9803      	ldr	r0, [sp, #12]
 8011d3e:	f7fc fbfd 	bl	800e53c <_printf_i>
 8011d42:	e7ec      	b.n	8011d1e <_vfiprintf_r+0x1e6>
 8011d44:	08012c68 	.word	0x08012c68
 8011d48:	08012db4 	.word	0x08012db4
 8011d4c:	08012c88 	.word	0x08012c88
 8011d50:	08012c48 	.word	0x08012c48
 8011d54:	08012dba 	.word	0x08012dba
 8011d58:	08012dbe 	.word	0x08012dbe
 8011d5c:	0800dfc9 	.word	0x0800dfc9
 8011d60:	08011b13 	.word	0x08011b13

08011d64 <_sbrk_r>:
 8011d64:	2300      	movs	r3, #0
 8011d66:	b570      	push	{r4, r5, r6, lr}
 8011d68:	4c06      	ldr	r4, [pc, #24]	; (8011d84 <_sbrk_r+0x20>)
 8011d6a:	0005      	movs	r5, r0
 8011d6c:	0008      	movs	r0, r1
 8011d6e:	6023      	str	r3, [r4, #0]
 8011d70:	f7f8 f892 	bl	8009e98 <_sbrk>
 8011d74:	1c43      	adds	r3, r0, #1
 8011d76:	d103      	bne.n	8011d80 <_sbrk_r+0x1c>
 8011d78:	6823      	ldr	r3, [r4, #0]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d000      	beq.n	8011d80 <_sbrk_r+0x1c>
 8011d7e:	602b      	str	r3, [r5, #0]
 8011d80:	bd70      	pop	{r4, r5, r6, pc}
 8011d82:	46c0      	nop			; (mov r8, r8)
 8011d84:	2000205c 	.word	0x2000205c

08011d88 <__sread>:
 8011d88:	b570      	push	{r4, r5, r6, lr}
 8011d8a:	000c      	movs	r4, r1
 8011d8c:	250e      	movs	r5, #14
 8011d8e:	5f49      	ldrsh	r1, [r1, r5]
 8011d90:	f000 fac8 	bl	8012324 <_read_r>
 8011d94:	2800      	cmp	r0, #0
 8011d96:	db03      	blt.n	8011da0 <__sread+0x18>
 8011d98:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8011d9a:	181b      	adds	r3, r3, r0
 8011d9c:	6563      	str	r3, [r4, #84]	; 0x54
 8011d9e:	bd70      	pop	{r4, r5, r6, pc}
 8011da0:	89a3      	ldrh	r3, [r4, #12]
 8011da2:	4a02      	ldr	r2, [pc, #8]	; (8011dac <__sread+0x24>)
 8011da4:	4013      	ands	r3, r2
 8011da6:	81a3      	strh	r3, [r4, #12]
 8011da8:	e7f9      	b.n	8011d9e <__sread+0x16>
 8011daa:	46c0      	nop			; (mov r8, r8)
 8011dac:	ffffefff 	.word	0xffffefff

08011db0 <__swrite>:
 8011db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011db2:	001f      	movs	r7, r3
 8011db4:	898b      	ldrh	r3, [r1, #12]
 8011db6:	0005      	movs	r5, r0
 8011db8:	000c      	movs	r4, r1
 8011dba:	0016      	movs	r6, r2
 8011dbc:	05db      	lsls	r3, r3, #23
 8011dbe:	d505      	bpl.n	8011dcc <__swrite+0x1c>
 8011dc0:	230e      	movs	r3, #14
 8011dc2:	5ec9      	ldrsh	r1, [r1, r3]
 8011dc4:	2200      	movs	r2, #0
 8011dc6:	2302      	movs	r3, #2
 8011dc8:	f000 f9f0 	bl	80121ac <_lseek_r>
 8011dcc:	89a3      	ldrh	r3, [r4, #12]
 8011dce:	4a05      	ldr	r2, [pc, #20]	; (8011de4 <__swrite+0x34>)
 8011dd0:	0028      	movs	r0, r5
 8011dd2:	4013      	ands	r3, r2
 8011dd4:	81a3      	strh	r3, [r4, #12]
 8011dd6:	0032      	movs	r2, r6
 8011dd8:	230e      	movs	r3, #14
 8011dda:	5ee1      	ldrsh	r1, [r4, r3]
 8011ddc:	003b      	movs	r3, r7
 8011dde:	f000 f893 	bl	8011f08 <_write_r>
 8011de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011de4:	ffffefff 	.word	0xffffefff

08011de8 <__sseek>:
 8011de8:	b570      	push	{r4, r5, r6, lr}
 8011dea:	000c      	movs	r4, r1
 8011dec:	250e      	movs	r5, #14
 8011dee:	5f49      	ldrsh	r1, [r1, r5]
 8011df0:	f000 f9dc 	bl	80121ac <_lseek_r>
 8011df4:	89a3      	ldrh	r3, [r4, #12]
 8011df6:	1c42      	adds	r2, r0, #1
 8011df8:	d103      	bne.n	8011e02 <__sseek+0x1a>
 8011dfa:	4a05      	ldr	r2, [pc, #20]	; (8011e10 <__sseek+0x28>)
 8011dfc:	4013      	ands	r3, r2
 8011dfe:	81a3      	strh	r3, [r4, #12]
 8011e00:	bd70      	pop	{r4, r5, r6, pc}
 8011e02:	2280      	movs	r2, #128	; 0x80
 8011e04:	0152      	lsls	r2, r2, #5
 8011e06:	4313      	orrs	r3, r2
 8011e08:	81a3      	strh	r3, [r4, #12]
 8011e0a:	6560      	str	r0, [r4, #84]	; 0x54
 8011e0c:	e7f8      	b.n	8011e00 <__sseek+0x18>
 8011e0e:	46c0      	nop			; (mov r8, r8)
 8011e10:	ffffefff 	.word	0xffffefff

08011e14 <__sclose>:
 8011e14:	b510      	push	{r4, lr}
 8011e16:	230e      	movs	r3, #14
 8011e18:	5ec9      	ldrsh	r1, [r1, r3]
 8011e1a:	f000 f8ff 	bl	801201c <_close_r>
 8011e1e:	bd10      	pop	{r4, pc}

08011e20 <strncmp>:
 8011e20:	2300      	movs	r3, #0
 8011e22:	b530      	push	{r4, r5, lr}
 8011e24:	429a      	cmp	r2, r3
 8011e26:	d00a      	beq.n	8011e3e <strncmp+0x1e>
 8011e28:	3a01      	subs	r2, #1
 8011e2a:	5cc4      	ldrb	r4, [r0, r3]
 8011e2c:	5ccd      	ldrb	r5, [r1, r3]
 8011e2e:	42ac      	cmp	r4, r5
 8011e30:	d104      	bne.n	8011e3c <strncmp+0x1c>
 8011e32:	4293      	cmp	r3, r2
 8011e34:	d002      	beq.n	8011e3c <strncmp+0x1c>
 8011e36:	3301      	adds	r3, #1
 8011e38:	2c00      	cmp	r4, #0
 8011e3a:	d1f6      	bne.n	8011e2a <strncmp+0xa>
 8011e3c:	1b63      	subs	r3, r4, r5
 8011e3e:	0018      	movs	r0, r3
 8011e40:	bd30      	pop	{r4, r5, pc}
	...

08011e44 <__swbuf_r>:
 8011e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e46:	0005      	movs	r5, r0
 8011e48:	000e      	movs	r6, r1
 8011e4a:	0014      	movs	r4, r2
 8011e4c:	2800      	cmp	r0, #0
 8011e4e:	d004      	beq.n	8011e5a <__swbuf_r+0x16>
 8011e50:	6983      	ldr	r3, [r0, #24]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d101      	bne.n	8011e5a <__swbuf_r+0x16>
 8011e56:	f7fe fc3d 	bl	80106d4 <__sinit>
 8011e5a:	4b22      	ldr	r3, [pc, #136]	; (8011ee4 <__swbuf_r+0xa0>)
 8011e5c:	429c      	cmp	r4, r3
 8011e5e:	d12d      	bne.n	8011ebc <__swbuf_r+0x78>
 8011e60:	686c      	ldr	r4, [r5, #4]
 8011e62:	69a3      	ldr	r3, [r4, #24]
 8011e64:	60a3      	str	r3, [r4, #8]
 8011e66:	89a3      	ldrh	r3, [r4, #12]
 8011e68:	071b      	lsls	r3, r3, #28
 8011e6a:	d531      	bpl.n	8011ed0 <__swbuf_r+0x8c>
 8011e6c:	6923      	ldr	r3, [r4, #16]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d02e      	beq.n	8011ed0 <__swbuf_r+0x8c>
 8011e72:	6823      	ldr	r3, [r4, #0]
 8011e74:	6922      	ldr	r2, [r4, #16]
 8011e76:	b2f7      	uxtb	r7, r6
 8011e78:	1a98      	subs	r0, r3, r2
 8011e7a:	6963      	ldr	r3, [r4, #20]
 8011e7c:	b2f6      	uxtb	r6, r6
 8011e7e:	4283      	cmp	r3, r0
 8011e80:	dc05      	bgt.n	8011e8e <__swbuf_r+0x4a>
 8011e82:	0021      	movs	r1, r4
 8011e84:	0028      	movs	r0, r5
 8011e86:	f000 f965 	bl	8012154 <_fflush_r>
 8011e8a:	2800      	cmp	r0, #0
 8011e8c:	d126      	bne.n	8011edc <__swbuf_r+0x98>
 8011e8e:	68a3      	ldr	r3, [r4, #8]
 8011e90:	3001      	adds	r0, #1
 8011e92:	3b01      	subs	r3, #1
 8011e94:	60a3      	str	r3, [r4, #8]
 8011e96:	6823      	ldr	r3, [r4, #0]
 8011e98:	1c5a      	adds	r2, r3, #1
 8011e9a:	6022      	str	r2, [r4, #0]
 8011e9c:	701f      	strb	r7, [r3, #0]
 8011e9e:	6963      	ldr	r3, [r4, #20]
 8011ea0:	4283      	cmp	r3, r0
 8011ea2:	d004      	beq.n	8011eae <__swbuf_r+0x6a>
 8011ea4:	89a3      	ldrh	r3, [r4, #12]
 8011ea6:	07db      	lsls	r3, r3, #31
 8011ea8:	d51a      	bpl.n	8011ee0 <__swbuf_r+0x9c>
 8011eaa:	2e0a      	cmp	r6, #10
 8011eac:	d118      	bne.n	8011ee0 <__swbuf_r+0x9c>
 8011eae:	0021      	movs	r1, r4
 8011eb0:	0028      	movs	r0, r5
 8011eb2:	f000 f94f 	bl	8012154 <_fflush_r>
 8011eb6:	2800      	cmp	r0, #0
 8011eb8:	d012      	beq.n	8011ee0 <__swbuf_r+0x9c>
 8011eba:	e00f      	b.n	8011edc <__swbuf_r+0x98>
 8011ebc:	4b0a      	ldr	r3, [pc, #40]	; (8011ee8 <__swbuf_r+0xa4>)
 8011ebe:	429c      	cmp	r4, r3
 8011ec0:	d101      	bne.n	8011ec6 <__swbuf_r+0x82>
 8011ec2:	68ac      	ldr	r4, [r5, #8]
 8011ec4:	e7cd      	b.n	8011e62 <__swbuf_r+0x1e>
 8011ec6:	4b09      	ldr	r3, [pc, #36]	; (8011eec <__swbuf_r+0xa8>)
 8011ec8:	429c      	cmp	r4, r3
 8011eca:	d1ca      	bne.n	8011e62 <__swbuf_r+0x1e>
 8011ecc:	68ec      	ldr	r4, [r5, #12]
 8011ece:	e7c8      	b.n	8011e62 <__swbuf_r+0x1e>
 8011ed0:	0021      	movs	r1, r4
 8011ed2:	0028      	movs	r0, r5
 8011ed4:	f000 f82c 	bl	8011f30 <__swsetup_r>
 8011ed8:	2800      	cmp	r0, #0
 8011eda:	d0ca      	beq.n	8011e72 <__swbuf_r+0x2e>
 8011edc:	2601      	movs	r6, #1
 8011ede:	4276      	negs	r6, r6
 8011ee0:	0030      	movs	r0, r6
 8011ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ee4:	08012c68 	.word	0x08012c68
 8011ee8:	08012c88 	.word	0x08012c88
 8011eec:	08012c48 	.word	0x08012c48

08011ef0 <__ascii_wctomb>:
 8011ef0:	1e0b      	subs	r3, r1, #0
 8011ef2:	d004      	beq.n	8011efe <__ascii_wctomb+0xe>
 8011ef4:	2aff      	cmp	r2, #255	; 0xff
 8011ef6:	d904      	bls.n	8011f02 <__ascii_wctomb+0x12>
 8011ef8:	238a      	movs	r3, #138	; 0x8a
 8011efa:	6003      	str	r3, [r0, #0]
 8011efc:	3b8b      	subs	r3, #139	; 0x8b
 8011efe:	0018      	movs	r0, r3
 8011f00:	4770      	bx	lr
 8011f02:	700a      	strb	r2, [r1, #0]
 8011f04:	2301      	movs	r3, #1
 8011f06:	e7fa      	b.n	8011efe <__ascii_wctomb+0xe>

08011f08 <_write_r>:
 8011f08:	b570      	push	{r4, r5, r6, lr}
 8011f0a:	0005      	movs	r5, r0
 8011f0c:	0008      	movs	r0, r1
 8011f0e:	0011      	movs	r1, r2
 8011f10:	2200      	movs	r2, #0
 8011f12:	4c06      	ldr	r4, [pc, #24]	; (8011f2c <_write_r+0x24>)
 8011f14:	6022      	str	r2, [r4, #0]
 8011f16:	001a      	movs	r2, r3
 8011f18:	f7f7 ff75 	bl	8009e06 <_write>
 8011f1c:	1c43      	adds	r3, r0, #1
 8011f1e:	d103      	bne.n	8011f28 <_write_r+0x20>
 8011f20:	6823      	ldr	r3, [r4, #0]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d000      	beq.n	8011f28 <_write_r+0x20>
 8011f26:	602b      	str	r3, [r5, #0]
 8011f28:	bd70      	pop	{r4, r5, r6, pc}
 8011f2a:	46c0      	nop			; (mov r8, r8)
 8011f2c:	2000205c 	.word	0x2000205c

08011f30 <__swsetup_r>:
 8011f30:	4b36      	ldr	r3, [pc, #216]	; (801200c <__swsetup_r+0xdc>)
 8011f32:	b570      	push	{r4, r5, r6, lr}
 8011f34:	681d      	ldr	r5, [r3, #0]
 8011f36:	0006      	movs	r6, r0
 8011f38:	000c      	movs	r4, r1
 8011f3a:	2d00      	cmp	r5, #0
 8011f3c:	d005      	beq.n	8011f4a <__swsetup_r+0x1a>
 8011f3e:	69ab      	ldr	r3, [r5, #24]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d102      	bne.n	8011f4a <__swsetup_r+0x1a>
 8011f44:	0028      	movs	r0, r5
 8011f46:	f7fe fbc5 	bl	80106d4 <__sinit>
 8011f4a:	4b31      	ldr	r3, [pc, #196]	; (8012010 <__swsetup_r+0xe0>)
 8011f4c:	429c      	cmp	r4, r3
 8011f4e:	d10f      	bne.n	8011f70 <__swsetup_r+0x40>
 8011f50:	686c      	ldr	r4, [r5, #4]
 8011f52:	230c      	movs	r3, #12
 8011f54:	5ee2      	ldrsh	r2, [r4, r3]
 8011f56:	b293      	uxth	r3, r2
 8011f58:	0719      	lsls	r1, r3, #28
 8011f5a:	d42d      	bmi.n	8011fb8 <__swsetup_r+0x88>
 8011f5c:	06d9      	lsls	r1, r3, #27
 8011f5e:	d411      	bmi.n	8011f84 <__swsetup_r+0x54>
 8011f60:	2309      	movs	r3, #9
 8011f62:	2001      	movs	r0, #1
 8011f64:	6033      	str	r3, [r6, #0]
 8011f66:	3337      	adds	r3, #55	; 0x37
 8011f68:	4313      	orrs	r3, r2
 8011f6a:	81a3      	strh	r3, [r4, #12]
 8011f6c:	4240      	negs	r0, r0
 8011f6e:	bd70      	pop	{r4, r5, r6, pc}
 8011f70:	4b28      	ldr	r3, [pc, #160]	; (8012014 <__swsetup_r+0xe4>)
 8011f72:	429c      	cmp	r4, r3
 8011f74:	d101      	bne.n	8011f7a <__swsetup_r+0x4a>
 8011f76:	68ac      	ldr	r4, [r5, #8]
 8011f78:	e7eb      	b.n	8011f52 <__swsetup_r+0x22>
 8011f7a:	4b27      	ldr	r3, [pc, #156]	; (8012018 <__swsetup_r+0xe8>)
 8011f7c:	429c      	cmp	r4, r3
 8011f7e:	d1e8      	bne.n	8011f52 <__swsetup_r+0x22>
 8011f80:	68ec      	ldr	r4, [r5, #12]
 8011f82:	e7e6      	b.n	8011f52 <__swsetup_r+0x22>
 8011f84:	075b      	lsls	r3, r3, #29
 8011f86:	d513      	bpl.n	8011fb0 <__swsetup_r+0x80>
 8011f88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011f8a:	2900      	cmp	r1, #0
 8011f8c:	d008      	beq.n	8011fa0 <__swsetup_r+0x70>
 8011f8e:	0023      	movs	r3, r4
 8011f90:	3344      	adds	r3, #68	; 0x44
 8011f92:	4299      	cmp	r1, r3
 8011f94:	d002      	beq.n	8011f9c <__swsetup_r+0x6c>
 8011f96:	0030      	movs	r0, r6
 8011f98:	f7ff fb9e 	bl	80116d8 <_free_r>
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	6363      	str	r3, [r4, #52]	; 0x34
 8011fa0:	2224      	movs	r2, #36	; 0x24
 8011fa2:	89a3      	ldrh	r3, [r4, #12]
 8011fa4:	4393      	bics	r3, r2
 8011fa6:	81a3      	strh	r3, [r4, #12]
 8011fa8:	2300      	movs	r3, #0
 8011faa:	6063      	str	r3, [r4, #4]
 8011fac:	6923      	ldr	r3, [r4, #16]
 8011fae:	6023      	str	r3, [r4, #0]
 8011fb0:	2308      	movs	r3, #8
 8011fb2:	89a2      	ldrh	r2, [r4, #12]
 8011fb4:	4313      	orrs	r3, r2
 8011fb6:	81a3      	strh	r3, [r4, #12]
 8011fb8:	6923      	ldr	r3, [r4, #16]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d10b      	bne.n	8011fd6 <__swsetup_r+0xa6>
 8011fbe:	21a0      	movs	r1, #160	; 0xa0
 8011fc0:	2280      	movs	r2, #128	; 0x80
 8011fc2:	89a3      	ldrh	r3, [r4, #12]
 8011fc4:	0089      	lsls	r1, r1, #2
 8011fc6:	0092      	lsls	r2, r2, #2
 8011fc8:	400b      	ands	r3, r1
 8011fca:	4293      	cmp	r3, r2
 8011fcc:	d003      	beq.n	8011fd6 <__swsetup_r+0xa6>
 8011fce:	0021      	movs	r1, r4
 8011fd0:	0030      	movs	r0, r6
 8011fd2:	f000 f927 	bl	8012224 <__smakebuf_r>
 8011fd6:	2301      	movs	r3, #1
 8011fd8:	89a2      	ldrh	r2, [r4, #12]
 8011fda:	4013      	ands	r3, r2
 8011fdc:	d011      	beq.n	8012002 <__swsetup_r+0xd2>
 8011fde:	2300      	movs	r3, #0
 8011fe0:	60a3      	str	r3, [r4, #8]
 8011fe2:	6963      	ldr	r3, [r4, #20]
 8011fe4:	425b      	negs	r3, r3
 8011fe6:	61a3      	str	r3, [r4, #24]
 8011fe8:	2000      	movs	r0, #0
 8011fea:	6923      	ldr	r3, [r4, #16]
 8011fec:	4283      	cmp	r3, r0
 8011fee:	d1be      	bne.n	8011f6e <__swsetup_r+0x3e>
 8011ff0:	230c      	movs	r3, #12
 8011ff2:	5ee2      	ldrsh	r2, [r4, r3]
 8011ff4:	0613      	lsls	r3, r2, #24
 8011ff6:	d5ba      	bpl.n	8011f6e <__swsetup_r+0x3e>
 8011ff8:	2340      	movs	r3, #64	; 0x40
 8011ffa:	4313      	orrs	r3, r2
 8011ffc:	81a3      	strh	r3, [r4, #12]
 8011ffe:	3801      	subs	r0, #1
 8012000:	e7b5      	b.n	8011f6e <__swsetup_r+0x3e>
 8012002:	0792      	lsls	r2, r2, #30
 8012004:	d400      	bmi.n	8012008 <__swsetup_r+0xd8>
 8012006:	6963      	ldr	r3, [r4, #20]
 8012008:	60a3      	str	r3, [r4, #8]
 801200a:	e7ed      	b.n	8011fe8 <__swsetup_r+0xb8>
 801200c:	2000012c 	.word	0x2000012c
 8012010:	08012c68 	.word	0x08012c68
 8012014:	08012c88 	.word	0x08012c88
 8012018:	08012c48 	.word	0x08012c48

0801201c <_close_r>:
 801201c:	2300      	movs	r3, #0
 801201e:	b570      	push	{r4, r5, r6, lr}
 8012020:	4c06      	ldr	r4, [pc, #24]	; (801203c <_close_r+0x20>)
 8012022:	0005      	movs	r5, r0
 8012024:	0008      	movs	r0, r1
 8012026:	6023      	str	r3, [r4, #0]
 8012028:	f7f7 ff09 	bl	8009e3e <_close>
 801202c:	1c43      	adds	r3, r0, #1
 801202e:	d103      	bne.n	8012038 <_close_r+0x1c>
 8012030:	6823      	ldr	r3, [r4, #0]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d000      	beq.n	8012038 <_close_r+0x1c>
 8012036:	602b      	str	r3, [r5, #0]
 8012038:	bd70      	pop	{r4, r5, r6, pc}
 801203a:	46c0      	nop			; (mov r8, r8)
 801203c:	2000205c 	.word	0x2000205c

08012040 <__sflush_r>:
 8012040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012042:	898a      	ldrh	r2, [r1, #12]
 8012044:	0005      	movs	r5, r0
 8012046:	000c      	movs	r4, r1
 8012048:	0713      	lsls	r3, r2, #28
 801204a:	d460      	bmi.n	801210e <__sflush_r+0xce>
 801204c:	684b      	ldr	r3, [r1, #4]
 801204e:	2b00      	cmp	r3, #0
 8012050:	dc04      	bgt.n	801205c <__sflush_r+0x1c>
 8012052:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012054:	2b00      	cmp	r3, #0
 8012056:	dc01      	bgt.n	801205c <__sflush_r+0x1c>
 8012058:	2000      	movs	r0, #0
 801205a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801205c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801205e:	2f00      	cmp	r7, #0
 8012060:	d0fa      	beq.n	8012058 <__sflush_r+0x18>
 8012062:	2300      	movs	r3, #0
 8012064:	682e      	ldr	r6, [r5, #0]
 8012066:	602b      	str	r3, [r5, #0]
 8012068:	2380      	movs	r3, #128	; 0x80
 801206a:	015b      	lsls	r3, r3, #5
 801206c:	6a21      	ldr	r1, [r4, #32]
 801206e:	401a      	ands	r2, r3
 8012070:	d034      	beq.n	80120dc <__sflush_r+0x9c>
 8012072:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012074:	89a3      	ldrh	r3, [r4, #12]
 8012076:	075b      	lsls	r3, r3, #29
 8012078:	d506      	bpl.n	8012088 <__sflush_r+0x48>
 801207a:	6863      	ldr	r3, [r4, #4]
 801207c:	1ac0      	subs	r0, r0, r3
 801207e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012080:	2b00      	cmp	r3, #0
 8012082:	d001      	beq.n	8012088 <__sflush_r+0x48>
 8012084:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012086:	1ac0      	subs	r0, r0, r3
 8012088:	0002      	movs	r2, r0
 801208a:	6a21      	ldr	r1, [r4, #32]
 801208c:	2300      	movs	r3, #0
 801208e:	0028      	movs	r0, r5
 8012090:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8012092:	47b8      	blx	r7
 8012094:	89a1      	ldrh	r1, [r4, #12]
 8012096:	1c43      	adds	r3, r0, #1
 8012098:	d106      	bne.n	80120a8 <__sflush_r+0x68>
 801209a:	682b      	ldr	r3, [r5, #0]
 801209c:	2b1d      	cmp	r3, #29
 801209e:	d830      	bhi.n	8012102 <__sflush_r+0xc2>
 80120a0:	4a2b      	ldr	r2, [pc, #172]	; (8012150 <__sflush_r+0x110>)
 80120a2:	40da      	lsrs	r2, r3
 80120a4:	07d3      	lsls	r3, r2, #31
 80120a6:	d52c      	bpl.n	8012102 <__sflush_r+0xc2>
 80120a8:	2300      	movs	r3, #0
 80120aa:	6063      	str	r3, [r4, #4]
 80120ac:	6923      	ldr	r3, [r4, #16]
 80120ae:	6023      	str	r3, [r4, #0]
 80120b0:	04cb      	lsls	r3, r1, #19
 80120b2:	d505      	bpl.n	80120c0 <__sflush_r+0x80>
 80120b4:	1c43      	adds	r3, r0, #1
 80120b6:	d102      	bne.n	80120be <__sflush_r+0x7e>
 80120b8:	682b      	ldr	r3, [r5, #0]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d100      	bne.n	80120c0 <__sflush_r+0x80>
 80120be:	6560      	str	r0, [r4, #84]	; 0x54
 80120c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80120c2:	602e      	str	r6, [r5, #0]
 80120c4:	2900      	cmp	r1, #0
 80120c6:	d0c7      	beq.n	8012058 <__sflush_r+0x18>
 80120c8:	0023      	movs	r3, r4
 80120ca:	3344      	adds	r3, #68	; 0x44
 80120cc:	4299      	cmp	r1, r3
 80120ce:	d002      	beq.n	80120d6 <__sflush_r+0x96>
 80120d0:	0028      	movs	r0, r5
 80120d2:	f7ff fb01 	bl	80116d8 <_free_r>
 80120d6:	2000      	movs	r0, #0
 80120d8:	6360      	str	r0, [r4, #52]	; 0x34
 80120da:	e7be      	b.n	801205a <__sflush_r+0x1a>
 80120dc:	2301      	movs	r3, #1
 80120de:	0028      	movs	r0, r5
 80120e0:	47b8      	blx	r7
 80120e2:	1c43      	adds	r3, r0, #1
 80120e4:	d1c6      	bne.n	8012074 <__sflush_r+0x34>
 80120e6:	682b      	ldr	r3, [r5, #0]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d0c3      	beq.n	8012074 <__sflush_r+0x34>
 80120ec:	2b1d      	cmp	r3, #29
 80120ee:	d001      	beq.n	80120f4 <__sflush_r+0xb4>
 80120f0:	2b16      	cmp	r3, #22
 80120f2:	d101      	bne.n	80120f8 <__sflush_r+0xb8>
 80120f4:	602e      	str	r6, [r5, #0]
 80120f6:	e7af      	b.n	8012058 <__sflush_r+0x18>
 80120f8:	2340      	movs	r3, #64	; 0x40
 80120fa:	89a2      	ldrh	r2, [r4, #12]
 80120fc:	4313      	orrs	r3, r2
 80120fe:	81a3      	strh	r3, [r4, #12]
 8012100:	e7ab      	b.n	801205a <__sflush_r+0x1a>
 8012102:	2340      	movs	r3, #64	; 0x40
 8012104:	430b      	orrs	r3, r1
 8012106:	2001      	movs	r0, #1
 8012108:	81a3      	strh	r3, [r4, #12]
 801210a:	4240      	negs	r0, r0
 801210c:	e7a5      	b.n	801205a <__sflush_r+0x1a>
 801210e:	690f      	ldr	r7, [r1, #16]
 8012110:	2f00      	cmp	r7, #0
 8012112:	d0a1      	beq.n	8012058 <__sflush_r+0x18>
 8012114:	680b      	ldr	r3, [r1, #0]
 8012116:	600f      	str	r7, [r1, #0]
 8012118:	1bdb      	subs	r3, r3, r7
 801211a:	9301      	str	r3, [sp, #4]
 801211c:	2300      	movs	r3, #0
 801211e:	0792      	lsls	r2, r2, #30
 8012120:	d100      	bne.n	8012124 <__sflush_r+0xe4>
 8012122:	694b      	ldr	r3, [r1, #20]
 8012124:	60a3      	str	r3, [r4, #8]
 8012126:	9b01      	ldr	r3, [sp, #4]
 8012128:	2b00      	cmp	r3, #0
 801212a:	dc00      	bgt.n	801212e <__sflush_r+0xee>
 801212c:	e794      	b.n	8012058 <__sflush_r+0x18>
 801212e:	9b01      	ldr	r3, [sp, #4]
 8012130:	003a      	movs	r2, r7
 8012132:	6a21      	ldr	r1, [r4, #32]
 8012134:	0028      	movs	r0, r5
 8012136:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012138:	47b0      	blx	r6
 801213a:	2800      	cmp	r0, #0
 801213c:	dc03      	bgt.n	8012146 <__sflush_r+0x106>
 801213e:	2340      	movs	r3, #64	; 0x40
 8012140:	89a2      	ldrh	r2, [r4, #12]
 8012142:	4313      	orrs	r3, r2
 8012144:	e7df      	b.n	8012106 <__sflush_r+0xc6>
 8012146:	9b01      	ldr	r3, [sp, #4]
 8012148:	183f      	adds	r7, r7, r0
 801214a:	1a1b      	subs	r3, r3, r0
 801214c:	9301      	str	r3, [sp, #4]
 801214e:	e7ea      	b.n	8012126 <__sflush_r+0xe6>
 8012150:	20400001 	.word	0x20400001

08012154 <_fflush_r>:
 8012154:	690b      	ldr	r3, [r1, #16]
 8012156:	b570      	push	{r4, r5, r6, lr}
 8012158:	0005      	movs	r5, r0
 801215a:	000c      	movs	r4, r1
 801215c:	2b00      	cmp	r3, #0
 801215e:	d101      	bne.n	8012164 <_fflush_r+0x10>
 8012160:	2000      	movs	r0, #0
 8012162:	bd70      	pop	{r4, r5, r6, pc}
 8012164:	2800      	cmp	r0, #0
 8012166:	d004      	beq.n	8012172 <_fflush_r+0x1e>
 8012168:	6983      	ldr	r3, [r0, #24]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d101      	bne.n	8012172 <_fflush_r+0x1e>
 801216e:	f7fe fab1 	bl	80106d4 <__sinit>
 8012172:	4b0b      	ldr	r3, [pc, #44]	; (80121a0 <_fflush_r+0x4c>)
 8012174:	429c      	cmp	r4, r3
 8012176:	d109      	bne.n	801218c <_fflush_r+0x38>
 8012178:	686c      	ldr	r4, [r5, #4]
 801217a:	220c      	movs	r2, #12
 801217c:	5ea3      	ldrsh	r3, [r4, r2]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d0ee      	beq.n	8012160 <_fflush_r+0xc>
 8012182:	0021      	movs	r1, r4
 8012184:	0028      	movs	r0, r5
 8012186:	f7ff ff5b 	bl	8012040 <__sflush_r>
 801218a:	e7ea      	b.n	8012162 <_fflush_r+0xe>
 801218c:	4b05      	ldr	r3, [pc, #20]	; (80121a4 <_fflush_r+0x50>)
 801218e:	429c      	cmp	r4, r3
 8012190:	d101      	bne.n	8012196 <_fflush_r+0x42>
 8012192:	68ac      	ldr	r4, [r5, #8]
 8012194:	e7f1      	b.n	801217a <_fflush_r+0x26>
 8012196:	4b04      	ldr	r3, [pc, #16]	; (80121a8 <_fflush_r+0x54>)
 8012198:	429c      	cmp	r4, r3
 801219a:	d1ee      	bne.n	801217a <_fflush_r+0x26>
 801219c:	68ec      	ldr	r4, [r5, #12]
 801219e:	e7ec      	b.n	801217a <_fflush_r+0x26>
 80121a0:	08012c68 	.word	0x08012c68
 80121a4:	08012c88 	.word	0x08012c88
 80121a8:	08012c48 	.word	0x08012c48

080121ac <_lseek_r>:
 80121ac:	b570      	push	{r4, r5, r6, lr}
 80121ae:	0005      	movs	r5, r0
 80121b0:	0008      	movs	r0, r1
 80121b2:	0011      	movs	r1, r2
 80121b4:	2200      	movs	r2, #0
 80121b6:	4c06      	ldr	r4, [pc, #24]	; (80121d0 <_lseek_r+0x24>)
 80121b8:	6022      	str	r2, [r4, #0]
 80121ba:	001a      	movs	r2, r3
 80121bc:	f7f7 fe60 	bl	8009e80 <_lseek>
 80121c0:	1c43      	adds	r3, r0, #1
 80121c2:	d103      	bne.n	80121cc <_lseek_r+0x20>
 80121c4:	6823      	ldr	r3, [r4, #0]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d000      	beq.n	80121cc <_lseek_r+0x20>
 80121ca:	602b      	str	r3, [r5, #0]
 80121cc:	bd70      	pop	{r4, r5, r6, pc}
 80121ce:	46c0      	nop			; (mov r8, r8)
 80121d0:	2000205c 	.word	0x2000205c

080121d4 <__swhatbuf_r>:
 80121d4:	b570      	push	{r4, r5, r6, lr}
 80121d6:	000e      	movs	r6, r1
 80121d8:	001d      	movs	r5, r3
 80121da:	230e      	movs	r3, #14
 80121dc:	5ec9      	ldrsh	r1, [r1, r3]
 80121de:	b096      	sub	sp, #88	; 0x58
 80121e0:	0014      	movs	r4, r2
 80121e2:	2900      	cmp	r1, #0
 80121e4:	da07      	bge.n	80121f6 <__swhatbuf_r+0x22>
 80121e6:	2300      	movs	r3, #0
 80121e8:	602b      	str	r3, [r5, #0]
 80121ea:	89b3      	ldrh	r3, [r6, #12]
 80121ec:	061b      	lsls	r3, r3, #24
 80121ee:	d411      	bmi.n	8012214 <__swhatbuf_r+0x40>
 80121f0:	2380      	movs	r3, #128	; 0x80
 80121f2:	00db      	lsls	r3, r3, #3
 80121f4:	e00f      	b.n	8012216 <__swhatbuf_r+0x42>
 80121f6:	466a      	mov	r2, sp
 80121f8:	f000 f8a8 	bl	801234c <_fstat_r>
 80121fc:	2800      	cmp	r0, #0
 80121fe:	dbf2      	blt.n	80121e6 <__swhatbuf_r+0x12>
 8012200:	22f0      	movs	r2, #240	; 0xf0
 8012202:	9b01      	ldr	r3, [sp, #4]
 8012204:	0212      	lsls	r2, r2, #8
 8012206:	4013      	ands	r3, r2
 8012208:	4a05      	ldr	r2, [pc, #20]	; (8012220 <__swhatbuf_r+0x4c>)
 801220a:	189b      	adds	r3, r3, r2
 801220c:	425a      	negs	r2, r3
 801220e:	4153      	adcs	r3, r2
 8012210:	602b      	str	r3, [r5, #0]
 8012212:	e7ed      	b.n	80121f0 <__swhatbuf_r+0x1c>
 8012214:	2340      	movs	r3, #64	; 0x40
 8012216:	2000      	movs	r0, #0
 8012218:	6023      	str	r3, [r4, #0]
 801221a:	b016      	add	sp, #88	; 0x58
 801221c:	bd70      	pop	{r4, r5, r6, pc}
 801221e:	46c0      	nop			; (mov r8, r8)
 8012220:	ffffe000 	.word	0xffffe000

08012224 <__smakebuf_r>:
 8012224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012226:	2602      	movs	r6, #2
 8012228:	898b      	ldrh	r3, [r1, #12]
 801222a:	0005      	movs	r5, r0
 801222c:	000c      	movs	r4, r1
 801222e:	4233      	tst	r3, r6
 8012230:	d006      	beq.n	8012240 <__smakebuf_r+0x1c>
 8012232:	0023      	movs	r3, r4
 8012234:	3347      	adds	r3, #71	; 0x47
 8012236:	6023      	str	r3, [r4, #0]
 8012238:	6123      	str	r3, [r4, #16]
 801223a:	2301      	movs	r3, #1
 801223c:	6163      	str	r3, [r4, #20]
 801223e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8012240:	ab01      	add	r3, sp, #4
 8012242:	466a      	mov	r2, sp
 8012244:	f7ff ffc6 	bl	80121d4 <__swhatbuf_r>
 8012248:	9900      	ldr	r1, [sp, #0]
 801224a:	0007      	movs	r7, r0
 801224c:	0028      	movs	r0, r5
 801224e:	f7ff fa8d 	bl	801176c <_malloc_r>
 8012252:	2800      	cmp	r0, #0
 8012254:	d108      	bne.n	8012268 <__smakebuf_r+0x44>
 8012256:	220c      	movs	r2, #12
 8012258:	5ea3      	ldrsh	r3, [r4, r2]
 801225a:	059a      	lsls	r2, r3, #22
 801225c:	d4ef      	bmi.n	801223e <__smakebuf_r+0x1a>
 801225e:	2203      	movs	r2, #3
 8012260:	4393      	bics	r3, r2
 8012262:	431e      	orrs	r6, r3
 8012264:	81a6      	strh	r6, [r4, #12]
 8012266:	e7e4      	b.n	8012232 <__smakebuf_r+0xe>
 8012268:	4b0f      	ldr	r3, [pc, #60]	; (80122a8 <__smakebuf_r+0x84>)
 801226a:	62ab      	str	r3, [r5, #40]	; 0x28
 801226c:	2380      	movs	r3, #128	; 0x80
 801226e:	89a2      	ldrh	r2, [r4, #12]
 8012270:	6020      	str	r0, [r4, #0]
 8012272:	4313      	orrs	r3, r2
 8012274:	81a3      	strh	r3, [r4, #12]
 8012276:	9b00      	ldr	r3, [sp, #0]
 8012278:	6120      	str	r0, [r4, #16]
 801227a:	6163      	str	r3, [r4, #20]
 801227c:	9b01      	ldr	r3, [sp, #4]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d00d      	beq.n	801229e <__smakebuf_r+0x7a>
 8012282:	230e      	movs	r3, #14
 8012284:	5ee1      	ldrsh	r1, [r4, r3]
 8012286:	0028      	movs	r0, r5
 8012288:	f000 f872 	bl	8012370 <_isatty_r>
 801228c:	2800      	cmp	r0, #0
 801228e:	d006      	beq.n	801229e <__smakebuf_r+0x7a>
 8012290:	2203      	movs	r2, #3
 8012292:	89a3      	ldrh	r3, [r4, #12]
 8012294:	4393      	bics	r3, r2
 8012296:	001a      	movs	r2, r3
 8012298:	2301      	movs	r3, #1
 801229a:	4313      	orrs	r3, r2
 801229c:	81a3      	strh	r3, [r4, #12]
 801229e:	89a0      	ldrh	r0, [r4, #12]
 80122a0:	4338      	orrs	r0, r7
 80122a2:	81a0      	strh	r0, [r4, #12]
 80122a4:	e7cb      	b.n	801223e <__smakebuf_r+0x1a>
 80122a6:	46c0      	nop			; (mov r8, r8)
 80122a8:	08010699 	.word	0x08010699

080122ac <memmove>:
 80122ac:	b510      	push	{r4, lr}
 80122ae:	4288      	cmp	r0, r1
 80122b0:	d902      	bls.n	80122b8 <memmove+0xc>
 80122b2:	188b      	adds	r3, r1, r2
 80122b4:	4298      	cmp	r0, r3
 80122b6:	d303      	bcc.n	80122c0 <memmove+0x14>
 80122b8:	2300      	movs	r3, #0
 80122ba:	e007      	b.n	80122cc <memmove+0x20>
 80122bc:	5c8b      	ldrb	r3, [r1, r2]
 80122be:	5483      	strb	r3, [r0, r2]
 80122c0:	3a01      	subs	r2, #1
 80122c2:	d2fb      	bcs.n	80122bc <memmove+0x10>
 80122c4:	bd10      	pop	{r4, pc}
 80122c6:	5ccc      	ldrb	r4, [r1, r3]
 80122c8:	54c4      	strb	r4, [r0, r3]
 80122ca:	3301      	adds	r3, #1
 80122cc:	429a      	cmp	r2, r3
 80122ce:	d1fa      	bne.n	80122c6 <memmove+0x1a>
 80122d0:	e7f8      	b.n	80122c4 <memmove+0x18>

080122d2 <__malloc_lock>:
 80122d2:	4770      	bx	lr

080122d4 <__malloc_unlock>:
 80122d4:	4770      	bx	lr

080122d6 <_realloc_r>:
 80122d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122d8:	0007      	movs	r7, r0
 80122da:	000d      	movs	r5, r1
 80122dc:	0016      	movs	r6, r2
 80122de:	2900      	cmp	r1, #0
 80122e0:	d105      	bne.n	80122ee <_realloc_r+0x18>
 80122e2:	0011      	movs	r1, r2
 80122e4:	f7ff fa42 	bl	801176c <_malloc_r>
 80122e8:	0004      	movs	r4, r0
 80122ea:	0020      	movs	r0, r4
 80122ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122ee:	2a00      	cmp	r2, #0
 80122f0:	d103      	bne.n	80122fa <_realloc_r+0x24>
 80122f2:	f7ff f9f1 	bl	80116d8 <_free_r>
 80122f6:	0034      	movs	r4, r6
 80122f8:	e7f7      	b.n	80122ea <_realloc_r+0x14>
 80122fa:	f000 f84b 	bl	8012394 <_malloc_usable_size_r>
 80122fe:	002c      	movs	r4, r5
 8012300:	42b0      	cmp	r0, r6
 8012302:	d2f2      	bcs.n	80122ea <_realloc_r+0x14>
 8012304:	0031      	movs	r1, r6
 8012306:	0038      	movs	r0, r7
 8012308:	f7ff fa30 	bl	801176c <_malloc_r>
 801230c:	1e04      	subs	r4, r0, #0
 801230e:	d0ec      	beq.n	80122ea <_realloc_r+0x14>
 8012310:	0029      	movs	r1, r5
 8012312:	0032      	movs	r2, r6
 8012314:	f7fb fdab 	bl	800de6e <memcpy>
 8012318:	0029      	movs	r1, r5
 801231a:	0038      	movs	r0, r7
 801231c:	f7ff f9dc 	bl	80116d8 <_free_r>
 8012320:	e7e3      	b.n	80122ea <_realloc_r+0x14>
	...

08012324 <_read_r>:
 8012324:	b570      	push	{r4, r5, r6, lr}
 8012326:	0005      	movs	r5, r0
 8012328:	0008      	movs	r0, r1
 801232a:	0011      	movs	r1, r2
 801232c:	2200      	movs	r2, #0
 801232e:	4c06      	ldr	r4, [pc, #24]	; (8012348 <_read_r+0x24>)
 8012330:	6022      	str	r2, [r4, #0]
 8012332:	001a      	movs	r2, r3
 8012334:	f7f7 fd4a 	bl	8009dcc <_read>
 8012338:	1c43      	adds	r3, r0, #1
 801233a:	d103      	bne.n	8012344 <_read_r+0x20>
 801233c:	6823      	ldr	r3, [r4, #0]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d000      	beq.n	8012344 <_read_r+0x20>
 8012342:	602b      	str	r3, [r5, #0]
 8012344:	bd70      	pop	{r4, r5, r6, pc}
 8012346:	46c0      	nop			; (mov r8, r8)
 8012348:	2000205c 	.word	0x2000205c

0801234c <_fstat_r>:
 801234c:	2300      	movs	r3, #0
 801234e:	b570      	push	{r4, r5, r6, lr}
 8012350:	4c06      	ldr	r4, [pc, #24]	; (801236c <_fstat_r+0x20>)
 8012352:	0005      	movs	r5, r0
 8012354:	0008      	movs	r0, r1
 8012356:	0011      	movs	r1, r2
 8012358:	6023      	str	r3, [r4, #0]
 801235a:	f7f7 fd7a 	bl	8009e52 <_fstat>
 801235e:	1c43      	adds	r3, r0, #1
 8012360:	d103      	bne.n	801236a <_fstat_r+0x1e>
 8012362:	6823      	ldr	r3, [r4, #0]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d000      	beq.n	801236a <_fstat_r+0x1e>
 8012368:	602b      	str	r3, [r5, #0]
 801236a:	bd70      	pop	{r4, r5, r6, pc}
 801236c:	2000205c 	.word	0x2000205c

08012370 <_isatty_r>:
 8012370:	2300      	movs	r3, #0
 8012372:	b570      	push	{r4, r5, r6, lr}
 8012374:	4c06      	ldr	r4, [pc, #24]	; (8012390 <_isatty_r+0x20>)
 8012376:	0005      	movs	r5, r0
 8012378:	0008      	movs	r0, r1
 801237a:	6023      	str	r3, [r4, #0]
 801237c:	f7f7 fd77 	bl	8009e6e <_isatty>
 8012380:	1c43      	adds	r3, r0, #1
 8012382:	d103      	bne.n	801238c <_isatty_r+0x1c>
 8012384:	6823      	ldr	r3, [r4, #0]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d000      	beq.n	801238c <_isatty_r+0x1c>
 801238a:	602b      	str	r3, [r5, #0]
 801238c:	bd70      	pop	{r4, r5, r6, pc}
 801238e:	46c0      	nop			; (mov r8, r8)
 8012390:	2000205c 	.word	0x2000205c

08012394 <_malloc_usable_size_r>:
 8012394:	1f0b      	subs	r3, r1, #4
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	1f18      	subs	r0, r3, #4
 801239a:	2b00      	cmp	r3, #0
 801239c:	da01      	bge.n	80123a2 <_malloc_usable_size_r+0xe>
 801239e:	580b      	ldr	r3, [r1, r0]
 80123a0:	18c0      	adds	r0, r0, r3
 80123a2:	4770      	bx	lr

080123a4 <_init>:
 80123a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123a6:	46c0      	nop			; (mov r8, r8)
 80123a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123aa:	bc08      	pop	{r3}
 80123ac:	469e      	mov	lr, r3
 80123ae:	4770      	bx	lr

080123b0 <_fini>:
 80123b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123b2:	46c0      	nop			; (mov r8, r8)
 80123b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123b6:	bc08      	pop	{r3}
 80123b8:	469e      	mov	lr, r3
 80123ba:	4770      	bx	lr
