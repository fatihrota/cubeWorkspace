
stm32f107.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011ec  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080013d0  080013d0  000113d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001400  08001400  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001400  08001400  00011400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001408  08001408  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001408  08001408  00011408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800140c  0800140c  0001140c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  0800141c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800141c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000276a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b27  00000000  00000000  0002279f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000370  00000000  00000000  000232c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002f8  00000000  00000000  00023638  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d715  00000000  00000000  00023930  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003450  00000000  00000000  00041045  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ab35d  00000000  00000000  00044495  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef7f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c24  00000000  00000000  000ef870  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080013b8 	.word	0x080013b8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080013b8 	.word	0x080013b8

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b974 	b.w	8000524 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	468c      	mov	ip, r1
 800025a:	4604      	mov	r4, r0
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d14b      	bne.n	80002fa <__udivmoddi4+0xa6>
 8000262:	428a      	cmp	r2, r1
 8000264:	4615      	mov	r5, r2
 8000266:	d967      	bls.n	8000338 <__udivmoddi4+0xe4>
 8000268:	fab2 f282 	clz	r2, r2
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0720 	rsb	r7, r2, #32
 8000272:	fa01 f302 	lsl.w	r3, r1, r2
 8000276:	fa20 f707 	lsr.w	r7, r0, r7
 800027a:	4095      	lsls	r5, r2
 800027c:	ea47 0c03 	orr.w	ip, r7, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000286:	fbbc f7fe 	udiv	r7, ip, lr
 800028a:	fa1f f885 	uxth.w	r8, r5
 800028e:	fb0e c317 	mls	r3, lr, r7, ip
 8000292:	fb07 f908 	mul.w	r9, r7, r8
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800029c:	4599      	cmp	r9, r3
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x60>
 80002a0:	18eb      	adds	r3, r5, r3
 80002a2:	f107 31ff 	add.w	r1, r7, #4294967295
 80002a6:	f080 811c 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002aa:	4599      	cmp	r9, r3
 80002ac:	f240 8119 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002b0:	3f02      	subs	r7, #2
 80002b2:	442b      	add	r3, r5
 80002b4:	eba3 0309 	sub.w	r3, r3, r9
 80002b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c0:	fb00 f108 	mul.w	r1, r0, r8
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ca:	42a1      	cmp	r1, r4
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0x8e>
 80002ce:	192c      	adds	r4, r5, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 8107 	bcs.w	80004e6 <__udivmoddi4+0x292>
 80002d8:	42a1      	cmp	r1, r4
 80002da:	f240 8104 	bls.w	80004e6 <__udivmoddi4+0x292>
 80002de:	3802      	subs	r0, #2
 80002e0:	442c      	add	r4, r5
 80002e2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e6:	2700      	movs	r7, #0
 80002e8:	1a64      	subs	r4, r4, r1
 80002ea:	b11e      	cbz	r6, 80002f4 <__udivmoddi4+0xa0>
 80002ec:	2300      	movs	r3, #0
 80002ee:	40d4      	lsrs	r4, r2
 80002f0:	e9c6 4300 	strd	r4, r3, [r6]
 80002f4:	4639      	mov	r1, r7
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xbe>
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f000 80ec 	beq.w	80004dc <__udivmoddi4+0x288>
 8000304:	2700      	movs	r7, #0
 8000306:	e9c6 0100 	strd	r0, r1, [r6]
 800030a:	4638      	mov	r0, r7
 800030c:	4639      	mov	r1, r7
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f783 	clz	r7, r3
 8000316:	2f00      	cmp	r7, #0
 8000318:	d148      	bne.n	80003ac <__udivmoddi4+0x158>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd0>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80fb 	bhi.w	800051a <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469c      	mov	ip, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa0>
 8000332:	e9c6 4c00 	strd	r4, ip, [r6]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xe8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 808f 	bne.w	8000464 <__udivmoddi4+0x210>
 8000346:	2701      	movs	r7, #1
 8000348:	1b49      	subs	r1, r1, r5
 800034a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800034e:	fa1f f985 	uxth.w	r9, r5
 8000352:	fbb1 fef8 	udiv	lr, r1, r8
 8000356:	fb08 111e 	mls	r1, r8, lr, r1
 800035a:	fb09 f00e 	mul.w	r0, r9, lr
 800035e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000362:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000366:	4298      	cmp	r0, r3
 8000368:	d907      	bls.n	800037a <__udivmoddi4+0x126>
 800036a:	18eb      	adds	r3, r5, r3
 800036c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x124>
 8000372:	4298      	cmp	r0, r3
 8000374:	f200 80cd 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000378:	468e      	mov	lr, r1
 800037a:	1a1b      	subs	r3, r3, r0
 800037c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000380:	fb08 3310 	mls	r3, r8, r0, r3
 8000384:	fb09 f900 	mul.w	r9, r9, r0
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038e:	45a1      	cmp	r9, r4
 8000390:	d907      	bls.n	80003a2 <__udivmoddi4+0x14e>
 8000392:	192c      	adds	r4, r5, r4
 8000394:	f100 33ff 	add.w	r3, r0, #4294967295
 8000398:	d202      	bcs.n	80003a0 <__udivmoddi4+0x14c>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f200 80b6 	bhi.w	800050c <__udivmoddi4+0x2b8>
 80003a0:	4618      	mov	r0, r3
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80003aa:	e79e      	b.n	80002ea <__udivmoddi4+0x96>
 80003ac:	f1c7 0520 	rsb	r5, r7, #32
 80003b0:	40bb      	lsls	r3, r7
 80003b2:	fa22 fc05 	lsr.w	ip, r2, r5
 80003b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ba:	fa21 f405 	lsr.w	r4, r1, r5
 80003be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c2:	fbb4 f9fe 	udiv	r9, r4, lr
 80003c6:	fa1f f88c 	uxth.w	r8, ip
 80003ca:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ce:	fa20 f305 	lsr.w	r3, r0, r5
 80003d2:	40b9      	lsls	r1, r7
 80003d4:	fb09 fa08 	mul.w	sl, r9, r8
 80003d8:	4319      	orrs	r1, r3
 80003da:	0c0b      	lsrs	r3, r1, #16
 80003dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	fa02 f207 	lsl.w	r2, r2, r7
 80003e6:	fa00 f307 	lsl.w	r3, r0, r7
 80003ea:	d90b      	bls.n	8000404 <__udivmoddi4+0x1b0>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f4:	f080 8088 	bcs.w	8000508 <__udivmoddi4+0x2b4>
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	f240 8085 	bls.w	8000508 <__udivmoddi4+0x2b4>
 80003fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000402:	4464      	add	r4, ip
 8000404:	eba4 040a 	sub.w	r4, r4, sl
 8000408:	fbb4 f0fe 	udiv	r0, r4, lr
 800040c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000410:	fb00 fa08 	mul.w	sl, r0, r8
 8000414:	b289      	uxth	r1, r1
 8000416:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800041a:	45a2      	cmp	sl, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1dc>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f100 31ff 	add.w	r1, r0, #4294967295
 8000426:	d26b      	bcs.n	8000500 <__udivmoddi4+0x2ac>
 8000428:	45a2      	cmp	sl, r4
 800042a:	d969      	bls.n	8000500 <__udivmoddi4+0x2ac>
 800042c:	3802      	subs	r0, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000434:	fba0 8902 	umull	r8, r9, r0, r2
 8000438:	eba4 040a 	sub.w	r4, r4, sl
 800043c:	454c      	cmp	r4, r9
 800043e:	4641      	mov	r1, r8
 8000440:	46ce      	mov	lr, r9
 8000442:	d354      	bcc.n	80004ee <__udivmoddi4+0x29a>
 8000444:	d051      	beq.n	80004ea <__udivmoddi4+0x296>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d069      	beq.n	800051e <__udivmoddi4+0x2ca>
 800044a:	1a5a      	subs	r2, r3, r1
 800044c:	eb64 040e 	sbc.w	r4, r4, lr
 8000450:	fa04 f505 	lsl.w	r5, r4, r5
 8000454:	fa22 f307 	lsr.w	r3, r2, r7
 8000458:	40fc      	lsrs	r4, r7
 800045a:	431d      	orrs	r5, r3
 800045c:	e9c6 5400 	strd	r5, r4, [r6]
 8000460:	2700      	movs	r7, #0
 8000462:	e747      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000464:	4095      	lsls	r5, r2
 8000466:	f1c2 0320 	rsb	r3, r2, #32
 800046a:	fa21 f003 	lsr.w	r0, r1, r3
 800046e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000472:	fbb0 f7f8 	udiv	r7, r0, r8
 8000476:	fa1f f985 	uxth.w	r9, r5
 800047a:	fb08 0017 	mls	r0, r8, r7, r0
 800047e:	fa24 f303 	lsr.w	r3, r4, r3
 8000482:	4091      	lsls	r1, r2
 8000484:	fb07 fc09 	mul.w	ip, r7, r9
 8000488:	430b      	orrs	r3, r1
 800048a:	0c19      	lsrs	r1, r3, #16
 800048c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000490:	458c      	cmp	ip, r1
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x254>
 8000498:	1869      	adds	r1, r5, r1
 800049a:	f107 30ff 	add.w	r0, r7, #4294967295
 800049e:	d231      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004a0:	458c      	cmp	ip, r1
 80004a2:	d92f      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004a4:	3f02      	subs	r7, #2
 80004a6:	4429      	add	r1, r5
 80004a8:	eba1 010c 	sub.w	r1, r1, ip
 80004ac:	fbb1 f0f8 	udiv	r0, r1, r8
 80004b0:	fb08 1c10 	mls	ip, r8, r0, r1
 80004b4:	fb00 fe09 	mul.w	lr, r0, r9
 80004b8:	b299      	uxth	r1, r3
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	458e      	cmp	lr, r1
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x27e>
 80004c2:	1869      	adds	r1, r5, r1
 80004c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c8:	d218      	bcs.n	80004fc <__udivmoddi4+0x2a8>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d916      	bls.n	80004fc <__udivmoddi4+0x2a8>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4429      	add	r1, r5
 80004d2:	eba1 010e 	sub.w	r1, r1, lr
 80004d6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004da:	e73a      	b.n	8000352 <__udivmoddi4+0xfe>
 80004dc:	4637      	mov	r7, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e708      	b.n	80002f4 <__udivmoddi4+0xa0>
 80004e2:	460f      	mov	r7, r1
 80004e4:	e6e6      	b.n	80002b4 <__udivmoddi4+0x60>
 80004e6:	4618      	mov	r0, r3
 80004e8:	e6fb      	b.n	80002e2 <__udivmoddi4+0x8e>
 80004ea:	4543      	cmp	r3, r8
 80004ec:	d2ab      	bcs.n	8000446 <__udivmoddi4+0x1f2>
 80004ee:	ebb8 0102 	subs.w	r1, r8, r2
 80004f2:	eb69 020c 	sbc.w	r2, r9, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	4696      	mov	lr, r2
 80004fa:	e7a4      	b.n	8000446 <__udivmoddi4+0x1f2>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e7e8      	b.n	80004d2 <__udivmoddi4+0x27e>
 8000500:	4608      	mov	r0, r1
 8000502:	e795      	b.n	8000430 <__udivmoddi4+0x1dc>
 8000504:	4607      	mov	r7, r0
 8000506:	e7cf      	b.n	80004a8 <__udivmoddi4+0x254>
 8000508:	4681      	mov	r9, r0
 800050a:	e77b      	b.n	8000404 <__udivmoddi4+0x1b0>
 800050c:	3802      	subs	r0, #2
 800050e:	442c      	add	r4, r5
 8000510:	e747      	b.n	80003a2 <__udivmoddi4+0x14e>
 8000512:	f1ae 0e02 	sub.w	lr, lr, #2
 8000516:	442b      	add	r3, r5
 8000518:	e72f      	b.n	800037a <__udivmoddi4+0x126>
 800051a:	4638      	mov	r0, r7
 800051c:	e707      	b.n	800032e <__udivmoddi4+0xda>
 800051e:	4637      	mov	r7, r6
 8000520:	e6e8      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052c:	f000 f8d0 	bl	80006d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000530:	f000 f802 	bl	8000538 <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000534:	e7fe      	b.n	8000534 <main+0xc>
	...

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	; 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0318 	add.w	r3, r7, #24
 8000542:	2238      	movs	r2, #56	; 0x38
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f000 ff2e 	bl	80013a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055a:	2302      	movs	r3, #2
 800055c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055e:	2301      	movs	r3, #1
 8000560:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000562:	2310      	movs	r3, #16
 8000564:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000566:	2300      	movs	r3, #0
 8000568:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 800056a:	2300      	movs	r3, #0
 800056c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056e:	f107 0318 	add.w	r3, r7, #24
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f9f2 	bl	800095c <HAL_RCC_OscConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x4a>
  {
    Error_Handler();
 800057e:	f000 f81d 	bl	80005bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000582:	230f      	movs	r3, #15
 8000584:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f000 fcf4 	bl	8000f88 <HAL_RCC_ClockConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005a6:	f000 f809 	bl	80005bc <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80005aa:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <SystemClock_Config+0x80>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	601a      	str	r2, [r3, #0]
}
 80005b0:	bf00      	nop
 80005b2:	3750      	adds	r7, #80	; 0x50
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	42420070 	.word	0x42420070

080005bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c2:	e7fe      	b.n	80005c2 <Error_Handler+0x6>

080005c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <HAL_MspInit+0x5c>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	4a14      	ldr	r2, [pc, #80]	; (8000620 <HAL_MspInit+0x5c>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6193      	str	r3, [r2, #24]
 80005d6:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_MspInit+0x5c>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <HAL_MspInit+0x5c>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a0e      	ldr	r2, [pc, #56]	; (8000620 <HAL_MspInit+0x5c>)
 80005e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ec:	61d3      	str	r3, [r2, #28]
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <HAL_MspInit+0x5c>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <HAL_MspInit+0x60>)
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	4a04      	ldr	r2, [pc, #16]	; (8000624 <HAL_MspInit+0x60>)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	40021000 	.word	0x40021000
 8000624:	40010000 	.word	0x40010000

08000628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800062c:	e7fe      	b.n	800062c <NMI_Handler+0x4>

0800062e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000632:	e7fe      	b.n	8000632 <HardFault_Handler+0x4>

08000634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000638:	e7fe      	b.n	8000638 <MemManage_Handler+0x4>

0800063a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800063e:	e7fe      	b.n	800063e <BusFault_Handler+0x4>

08000640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000644:	e7fe      	b.n	8000644 <UsageFault_Handler+0x4>

08000646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr

08000652 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr

0800065e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr

0800066a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800066e:	f000 f875 	bl	800075c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}

08000676 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
	...

08000684 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000684:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000686:	e003      	b.n	8000690 <LoopCopyDataInit>

08000688 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000688:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800068a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800068c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800068e:	3104      	adds	r1, #4

08000690 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000690:	480a      	ldr	r0, [pc, #40]	; (80006bc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000694:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000696:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000698:	d3f6      	bcc.n	8000688 <CopyDataInit>
  ldr r2, =_sbss
 800069a:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800069c:	e002      	b.n	80006a4 <LoopFillZerobss>

0800069e <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006a0:	f842 3b04 	str.w	r3, [r2], #4

080006a4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006a6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006a8:	d3f9      	bcc.n	800069e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006aa:	f7ff ffe4 	bl	8000676 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ae:	f000 fe57 	bl	8001360 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006b2:	f7ff ff39 	bl	8000528 <main>
  bx lr
 80006b6:	4770      	bx	lr
  ldr r3, =_sidata
 80006b8:	08001410 	.word	0x08001410
  ldr r0, =_sdata
 80006bc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80006c4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80006c8:	2000002c 	.word	0x2000002c

080006cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006cc:	e7fe      	b.n	80006cc <ADC1_2_IRQHandler>
	...

080006d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <HAL_Init+0x28>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a07      	ldr	r2, [pc, #28]	; (80006f8 <HAL_Init+0x28>)
 80006da:	f043 0310 	orr.w	r3, r3, #16
 80006de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e0:	2003      	movs	r0, #3
 80006e2:	f000 f907 	bl	80008f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006e6:	2000      	movs	r0, #0
 80006e8:	f000 f808 	bl	80006fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006ec:	f7ff ff6a 	bl	80005c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006f0:	2300      	movs	r3, #0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40022000 	.word	0x40022000

080006fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <HAL_InitTick+0x54>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_InitTick+0x58>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	4619      	mov	r1, r3
 800070e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000712:	fbb3 f3f1 	udiv	r3, r3, r1
 8000716:	fbb2 f3f3 	udiv	r3, r2, r3
 800071a:	4618      	mov	r0, r3
 800071c:	f000 f911 	bl	8000942 <HAL_SYSTICK_Config>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
 8000728:	e00e      	b.n	8000748 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2b0f      	cmp	r3, #15
 800072e:	d80a      	bhi.n	8000746 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000730:	2200      	movs	r2, #0
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	f04f 30ff 	mov.w	r0, #4294967295
 8000738:	f000 f8e7 	bl	800090a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800073c:	4a06      	ldr	r2, [pc, #24]	; (8000758 <HAL_InitTick+0x5c>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000742:	2300      	movs	r3, #0
 8000744:	e000      	b.n	8000748 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
}
 8000748:	4618      	mov	r0, r3
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000000 	.word	0x20000000
 8000754:	20000008 	.word	0x20000008
 8000758:	20000004 	.word	0x20000004

0800075c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <HAL_IncTick+0x1c>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	461a      	mov	r2, r3
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <HAL_IncTick+0x20>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4413      	add	r3, r2
 800076c:	4a03      	ldr	r2, [pc, #12]	; (800077c <HAL_IncTick+0x20>)
 800076e:	6013      	str	r3, [r2, #0]
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	20000008 	.word	0x20000008
 800077c:	20000028 	.word	0x20000028

08000780 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  return uwTick;
 8000784:	4b02      	ldr	r3, [pc, #8]	; (8000790 <HAL_GetTick+0x10>)
 8000786:	681b      	ldr	r3, [r3, #0]
}
 8000788:	4618      	mov	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	20000028 	.word	0x20000028

08000794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <__NVIC_SetPriorityGrouping+0x44>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007aa:	68ba      	ldr	r2, [r7, #8]
 80007ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007b0:	4013      	ands	r3, r2
 80007b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007c6:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <__NVIC_SetPriorityGrouping+0x44>)
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	60d3      	str	r3, [r2, #12]
}
 80007cc:	bf00      	nop
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e0:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <__NVIC_GetPriorityGrouping+0x18>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	0a1b      	lsrs	r3, r3, #8
 80007e6:	f003 0307 	and.w	r3, r3, #7
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000808:	2b00      	cmp	r3, #0
 800080a:	db0a      	blt.n	8000822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	b2da      	uxtb	r2, r3
 8000810:	490c      	ldr	r1, [pc, #48]	; (8000844 <__NVIC_SetPriority+0x4c>)
 8000812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000816:	0112      	lsls	r2, r2, #4
 8000818:	b2d2      	uxtb	r2, r2
 800081a:	440b      	add	r3, r1
 800081c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000820:	e00a      	b.n	8000838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4908      	ldr	r1, [pc, #32]	; (8000848 <__NVIC_SetPriority+0x50>)
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	f003 030f 	and.w	r3, r3, #15
 800082e:	3b04      	subs	r3, #4
 8000830:	0112      	lsls	r2, r2, #4
 8000832:	b2d2      	uxtb	r2, r2
 8000834:	440b      	add	r3, r1
 8000836:	761a      	strb	r2, [r3, #24]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000e100 	.word	0xe000e100
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800084c:	b480      	push	{r7}
 800084e:	b089      	sub	sp, #36	; 0x24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	f1c3 0307 	rsb	r3, r3, #7
 8000866:	2b04      	cmp	r3, #4
 8000868:	bf28      	it	cs
 800086a:	2304      	movcs	r3, #4
 800086c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3304      	adds	r3, #4
 8000872:	2b06      	cmp	r3, #6
 8000874:	d902      	bls.n	800087c <NVIC_EncodePriority+0x30>
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	3b03      	subs	r3, #3
 800087a:	e000      	b.n	800087e <NVIC_EncodePriority+0x32>
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000880:	f04f 32ff 	mov.w	r2, #4294967295
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	43da      	mvns	r2, r3
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	401a      	ands	r2, r3
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000894:	f04f 31ff 	mov.w	r1, #4294967295
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	fa01 f303 	lsl.w	r3, r1, r3
 800089e:	43d9      	mvns	r1, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a4:	4313      	orrs	r3, r2
         );
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3724      	adds	r7, #36	; 0x24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008c0:	d301      	bcc.n	80008c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c2:	2301      	movs	r3, #1
 80008c4:	e00f      	b.n	80008e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008c6:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <SysTick_Config+0x40>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ce:	210f      	movs	r1, #15
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295
 80008d4:	f7ff ff90 	bl	80007f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <SysTick_Config+0x40>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008de:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <SysTick_Config+0x40>)
 80008e0:	2207      	movs	r2, #7
 80008e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	e000e010 	.word	0xe000e010

080008f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ff49 	bl	8000794 <__NVIC_SetPriorityGrouping>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800090a:	b580      	push	{r7, lr}
 800090c:	b086      	sub	sp, #24
 800090e:	af00      	add	r7, sp, #0
 8000910:	4603      	mov	r3, r0
 8000912:	60b9      	str	r1, [r7, #8]
 8000914:	607a      	str	r2, [r7, #4]
 8000916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800091c:	f7ff ff5e 	bl	80007dc <__NVIC_GetPriorityGrouping>
 8000920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	68b9      	ldr	r1, [r7, #8]
 8000926:	6978      	ldr	r0, [r7, #20]
 8000928:	f7ff ff90 	bl	800084c <NVIC_EncodePriority>
 800092c:	4602      	mov	r2, r0
 800092e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff5f 	bl	80007f8 <__NVIC_SetPriority>
}
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff ffb0 	bl	80008b0 <SysTick_Config>
 8000950:	4603      	mov	r3, r0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d101      	bne.n	800096e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e304      	b.n	8000f78 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	2b00      	cmp	r3, #0
 8000978:	f000 8087 	beq.w	8000a8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800097c:	4b92      	ldr	r3, [pc, #584]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	f003 030c 	and.w	r3, r3, #12
 8000984:	2b04      	cmp	r3, #4
 8000986:	d00c      	beq.n	80009a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000988:	4b8f      	ldr	r3, [pc, #572]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f003 030c 	and.w	r3, r3, #12
 8000990:	2b08      	cmp	r3, #8
 8000992:	d112      	bne.n	80009ba <HAL_RCC_OscConfig+0x5e>
 8000994:	4b8c      	ldr	r3, [pc, #560]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800099c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009a0:	d10b      	bne.n	80009ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009a2:	4b89      	ldr	r3, [pc, #548]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d06c      	beq.n	8000a88 <HAL_RCC_OscConfig+0x12c>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d168      	bne.n	8000a88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e2de      	b.n	8000f78 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009c2:	d106      	bne.n	80009d2 <HAL_RCC_OscConfig+0x76>
 80009c4:	4b80      	ldr	r3, [pc, #512]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a7f      	ldr	r2, [pc, #508]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 80009ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009ce:	6013      	str	r3, [r2, #0]
 80009d0:	e02e      	b.n	8000a30 <HAL_RCC_OscConfig+0xd4>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d10c      	bne.n	80009f4 <HAL_RCC_OscConfig+0x98>
 80009da:	4b7b      	ldr	r3, [pc, #492]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a7a      	ldr	r2, [pc, #488]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 80009e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009e4:	6013      	str	r3, [r2, #0]
 80009e6:	4b78      	ldr	r3, [pc, #480]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a77      	ldr	r2, [pc, #476]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 80009ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009f0:	6013      	str	r3, [r2, #0]
 80009f2:	e01d      	b.n	8000a30 <HAL_RCC_OscConfig+0xd4>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009fc:	d10c      	bne.n	8000a18 <HAL_RCC_OscConfig+0xbc>
 80009fe:	4b72      	ldr	r3, [pc, #456]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a71      	ldr	r2, [pc, #452]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 8000a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a08:	6013      	str	r3, [r2, #0]
 8000a0a:	4b6f      	ldr	r3, [pc, #444]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a6e      	ldr	r2, [pc, #440]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 8000a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a14:	6013      	str	r3, [r2, #0]
 8000a16:	e00b      	b.n	8000a30 <HAL_RCC_OscConfig+0xd4>
 8000a18:	4b6b      	ldr	r3, [pc, #428]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a6a      	ldr	r2, [pc, #424]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 8000a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a22:	6013      	str	r3, [r2, #0]
 8000a24:	4b68      	ldr	r3, [pc, #416]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a67      	ldr	r2, [pc, #412]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 8000a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d013      	beq.n	8000a60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a38:	f7ff fea2 	bl	8000780 <HAL_GetTick>
 8000a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a3e:	e008      	b.n	8000a52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a40:	f7ff fe9e 	bl	8000780 <HAL_GetTick>
 8000a44:	4602      	mov	r2, r0
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	2b64      	cmp	r3, #100	; 0x64
 8000a4c:	d901      	bls.n	8000a52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	e292      	b.n	8000f78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a52:	4b5d      	ldr	r3, [pc, #372]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d0f0      	beq.n	8000a40 <HAL_RCC_OscConfig+0xe4>
 8000a5e:	e014      	b.n	8000a8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a60:	f7ff fe8e 	bl	8000780 <HAL_GetTick>
 8000a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a66:	e008      	b.n	8000a7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a68:	f7ff fe8a 	bl	8000780 <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	2b64      	cmp	r3, #100	; 0x64
 8000a74:	d901      	bls.n	8000a7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000a76:	2303      	movs	r3, #3
 8000a78:	e27e      	b.n	8000f78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a7a:	4b53      	ldr	r3, [pc, #332]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d1f0      	bne.n	8000a68 <HAL_RCC_OscConfig+0x10c>
 8000a86:	e000      	b.n	8000a8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d063      	beq.n	8000b5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a96:	4b4c      	ldr	r3, [pc, #304]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f003 030c 	and.w	r3, r3, #12
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d00b      	beq.n	8000aba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000aa2:	4b49      	ldr	r3, [pc, #292]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f003 030c 	and.w	r3, r3, #12
 8000aaa:	2b08      	cmp	r3, #8
 8000aac:	d11c      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x18c>
 8000aae:	4b46      	ldr	r3, [pc, #280]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d116      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000aba:	4b43      	ldr	r3, [pc, #268]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d005      	beq.n	8000ad2 <HAL_RCC_OscConfig+0x176>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d001      	beq.n	8000ad2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e252      	b.n	8000f78 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ad2:	4b3d      	ldr	r3, [pc, #244]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	00db      	lsls	r3, r3, #3
 8000ae0:	4939      	ldr	r1, [pc, #228]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ae6:	e03a      	b.n	8000b5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	695b      	ldr	r3, [r3, #20]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d020      	beq.n	8000b32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000af0:	4b36      	ldr	r3, [pc, #216]	; (8000bcc <HAL_RCC_OscConfig+0x270>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000af6:	f7ff fe43 	bl	8000780 <HAL_GetTick>
 8000afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000afc:	e008      	b.n	8000b10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000afe:	f7ff fe3f 	bl	8000780 <HAL_GetTick>
 8000b02:	4602      	mov	r2, r0
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d901      	bls.n	8000b10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	e233      	b.n	8000f78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b10:	4b2d      	ldr	r3, [pc, #180]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f003 0302 	and.w	r3, r3, #2
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d0f0      	beq.n	8000afe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b1c:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	4927      	ldr	r1, [pc, #156]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	600b      	str	r3, [r1, #0]
 8000b30:	e015      	b.n	8000b5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b32:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <HAL_RCC_OscConfig+0x270>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b38:	f7ff fe22 	bl	8000780 <HAL_GetTick>
 8000b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b3e:	e008      	b.n	8000b52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b40:	f7ff fe1e 	bl	8000780 <HAL_GetTick>
 8000b44:	4602      	mov	r2, r0
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d901      	bls.n	8000b52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	e212      	b.n	8000f78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b52:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d1f0      	bne.n	8000b40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f003 0308 	and.w	r3, r3, #8
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d03a      	beq.n	8000be0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d019      	beq.n	8000ba6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <HAL_RCC_OscConfig+0x274>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b78:	f7ff fe02 	bl	8000780 <HAL_GetTick>
 8000b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b7e:	e008      	b.n	8000b92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b80:	f7ff fdfe 	bl	8000780 <HAL_GetTick>
 8000b84:	4602      	mov	r2, r0
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d901      	bls.n	8000b92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	e1f2      	b.n	8000f78 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <HAL_RCC_OscConfig+0x26c>)
 8000b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d0f0      	beq.n	8000b80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	f000 fbc0 	bl	8001324 <RCC_Delay>
 8000ba4:	e01c      	b.n	8000be0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <HAL_RCC_OscConfig+0x274>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bac:	f7ff fde8 	bl	8000780 <HAL_GetTick>
 8000bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bb2:	e00f      	b.n	8000bd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bb4:	f7ff fde4 	bl	8000780 <HAL_GetTick>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	d908      	bls.n	8000bd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	e1d8      	b.n	8000f78 <HAL_RCC_OscConfig+0x61c>
 8000bc6:	bf00      	nop
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	42420000 	.word	0x42420000
 8000bd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bd4:	4b9b      	ldr	r3, [pc, #620]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d1e9      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	f000 80a6 	beq.w	8000d3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bf2:	4b94      	ldr	r3, [pc, #592]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000bf4:	69db      	ldr	r3, [r3, #28]
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d10d      	bne.n	8000c1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	4b91      	ldr	r3, [pc, #580]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	4a90      	ldr	r2, [pc, #576]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c08:	61d3      	str	r3, [r2, #28]
 8000c0a:	4b8e      	ldr	r3, [pc, #568]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000c16:	2301      	movs	r3, #1
 8000c18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c1a:	4b8b      	ldr	r3, [pc, #556]	; (8000e48 <HAL_RCC_OscConfig+0x4ec>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d118      	bne.n	8000c58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c26:	4b88      	ldr	r3, [pc, #544]	; (8000e48 <HAL_RCC_OscConfig+0x4ec>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a87      	ldr	r2, [pc, #540]	; (8000e48 <HAL_RCC_OscConfig+0x4ec>)
 8000c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c32:	f7ff fda5 	bl	8000780 <HAL_GetTick>
 8000c36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c38:	e008      	b.n	8000c4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c3a:	f7ff fda1 	bl	8000780 <HAL_GetTick>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	2b64      	cmp	r3, #100	; 0x64
 8000c46:	d901      	bls.n	8000c4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	e195      	b.n	8000f78 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c4c:	4b7e      	ldr	r3, [pc, #504]	; (8000e48 <HAL_RCC_OscConfig+0x4ec>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d0f0      	beq.n	8000c3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	691b      	ldr	r3, [r3, #16]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d106      	bne.n	8000c6e <HAL_RCC_OscConfig+0x312>
 8000c60:	4b78      	ldr	r3, [pc, #480]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000c62:	6a1b      	ldr	r3, [r3, #32]
 8000c64:	4a77      	ldr	r2, [pc, #476]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6213      	str	r3, [r2, #32]
 8000c6c:	e02d      	b.n	8000cca <HAL_RCC_OscConfig+0x36e>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d10c      	bne.n	8000c90 <HAL_RCC_OscConfig+0x334>
 8000c76:	4b73      	ldr	r3, [pc, #460]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000c78:	6a1b      	ldr	r3, [r3, #32]
 8000c7a:	4a72      	ldr	r2, [pc, #456]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000c7c:	f023 0301 	bic.w	r3, r3, #1
 8000c80:	6213      	str	r3, [r2, #32]
 8000c82:	4b70      	ldr	r3, [pc, #448]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000c84:	6a1b      	ldr	r3, [r3, #32]
 8000c86:	4a6f      	ldr	r2, [pc, #444]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000c88:	f023 0304 	bic.w	r3, r3, #4
 8000c8c:	6213      	str	r3, [r2, #32]
 8000c8e:	e01c      	b.n	8000cca <HAL_RCC_OscConfig+0x36e>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	691b      	ldr	r3, [r3, #16]
 8000c94:	2b05      	cmp	r3, #5
 8000c96:	d10c      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x356>
 8000c98:	4b6a      	ldr	r3, [pc, #424]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000c9a:	6a1b      	ldr	r3, [r3, #32]
 8000c9c:	4a69      	ldr	r2, [pc, #420]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000c9e:	f043 0304 	orr.w	r3, r3, #4
 8000ca2:	6213      	str	r3, [r2, #32]
 8000ca4:	4b67      	ldr	r3, [pc, #412]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000ca6:	6a1b      	ldr	r3, [r3, #32]
 8000ca8:	4a66      	ldr	r2, [pc, #408]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	6213      	str	r3, [r2, #32]
 8000cb0:	e00b      	b.n	8000cca <HAL_RCC_OscConfig+0x36e>
 8000cb2:	4b64      	ldr	r3, [pc, #400]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000cb4:	6a1b      	ldr	r3, [r3, #32]
 8000cb6:	4a63      	ldr	r2, [pc, #396]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000cb8:	f023 0301 	bic.w	r3, r3, #1
 8000cbc:	6213      	str	r3, [r2, #32]
 8000cbe:	4b61      	ldr	r3, [pc, #388]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000cc0:	6a1b      	ldr	r3, [r3, #32]
 8000cc2:	4a60      	ldr	r2, [pc, #384]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000cc4:	f023 0304 	bic.w	r3, r3, #4
 8000cc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	691b      	ldr	r3, [r3, #16]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d015      	beq.n	8000cfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cd2:	f7ff fd55 	bl	8000780 <HAL_GetTick>
 8000cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cd8:	e00a      	b.n	8000cf0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cda:	f7ff fd51 	bl	8000780 <HAL_GetTick>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d901      	bls.n	8000cf0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000cec:	2303      	movs	r3, #3
 8000cee:	e143      	b.n	8000f78 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cf0:	4b54      	ldr	r3, [pc, #336]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000cf2:	6a1b      	ldr	r3, [r3, #32]
 8000cf4:	f003 0302 	and.w	r3, r3, #2
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d0ee      	beq.n	8000cda <HAL_RCC_OscConfig+0x37e>
 8000cfc:	e014      	b.n	8000d28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cfe:	f7ff fd3f 	bl	8000780 <HAL_GetTick>
 8000d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d04:	e00a      	b.n	8000d1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d06:	f7ff fd3b 	bl	8000780 <HAL_GetTick>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d901      	bls.n	8000d1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	e12d      	b.n	8000f78 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d1c:	4b49      	ldr	r3, [pc, #292]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000d1e:	6a1b      	ldr	r3, [r3, #32]
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d1ee      	bne.n	8000d06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000d28:	7dfb      	ldrb	r3, [r7, #23]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d105      	bne.n	8000d3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d2e:	4b45      	ldr	r3, [pc, #276]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	4a44      	ldr	r2, [pc, #272]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000d34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d38:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f000 808c 	beq.w	8000e5c <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8000d44:	4b3f      	ldr	r3, [pc, #252]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d50:	d10e      	bne.n	8000d70 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8000d52:	4b3c      	ldr	r3, [pc, #240]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8000d5a:	2b08      	cmp	r3, #8
 8000d5c:	d108      	bne.n	8000d70 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8000d5e:	4b39      	ldr	r3, [pc, #228]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8000d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d6a:	d101      	bne.n	8000d70 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e103      	b.n	8000f78 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d14e      	bne.n	8000e16 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8000d78:	4b32      	ldr	r3, [pc, #200]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d009      	beq.n	8000d98 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8000d84:	4b2f      	ldr	r3, [pc, #188]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d001      	beq.n	8000d98 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	e0ef      	b.n	8000f78 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8000d98:	4b2c      	ldr	r3, [pc, #176]	; (8000e4c <HAL_RCC_OscConfig+0x4f0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9e:	f7ff fcef 	bl	8000780 <HAL_GetTick>
 8000da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8000da4:	e008      	b.n	8000db8 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8000da6:	f7ff fceb 	bl	8000780 <HAL_GetTick>
 8000daa:	4602      	mov	r2, r0
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	2b64      	cmp	r3, #100	; 0x64
 8000db2:	d901      	bls.n	8000db8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000db4:	2303      	movs	r3, #3
 8000db6:	e0df      	b.n	8000f78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8000db8:	4b22      	ldr	r3, [pc, #136]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d1f0      	bne.n	8000da6 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8000dc4:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd0:	491c      	ldr	r1, [pc, #112]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8000dd6:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dda:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4918      	ldr	r1, [pc, #96]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000de4:	4313      	orrs	r3, r2
 8000de6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8000de8:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <HAL_RCC_OscConfig+0x4f0>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dee:	f7ff fcc7 	bl	8000780 <HAL_GetTick>
 8000df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8000df4:	e008      	b.n	8000e08 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8000df6:	f7ff fcc3 	bl	8000780 <HAL_GetTick>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	2b64      	cmp	r3, #100	; 0x64
 8000e02:	d901      	bls.n	8000e08 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8000e04:	2303      	movs	r3, #3
 8000e06:	e0b7      	b.n	8000f78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0f0      	beq.n	8000df6 <HAL_RCC_OscConfig+0x49a>
 8000e14:	e022      	b.n	8000e5c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <HAL_RCC_OscConfig+0x4e8>)
 8000e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_RCC_OscConfig+0x4f0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e28:	f7ff fcaa 	bl	8000780 <HAL_GetTick>
 8000e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8000e2e:	e00f      	b.n	8000e50 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8000e30:	f7ff fca6 	bl	8000780 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b64      	cmp	r3, #100	; 0x64
 8000e3c:	d908      	bls.n	8000e50 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e09a      	b.n	8000f78 <HAL_RCC_OscConfig+0x61c>
 8000e42:	bf00      	nop
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40007000 	.word	0x40007000
 8000e4c:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8000e50:	4b4b      	ldr	r3, [pc, #300]	; (8000f80 <HAL_RCC_OscConfig+0x624>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d1e9      	bne.n	8000e30 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a1b      	ldr	r3, [r3, #32]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f000 8088 	beq.w	8000f76 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e66:	4b46      	ldr	r3, [pc, #280]	; (8000f80 <HAL_RCC_OscConfig+0x624>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 030c 	and.w	r3, r3, #12
 8000e6e:	2b08      	cmp	r3, #8
 8000e70:	d068      	beq.n	8000f44 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6a1b      	ldr	r3, [r3, #32]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d14d      	bne.n	8000f16 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e7a:	4b42      	ldr	r3, [pc, #264]	; (8000f84 <HAL_RCC_OscConfig+0x628>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e80:	f7ff fc7e 	bl	8000780 <HAL_GetTick>
 8000e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e86:	e008      	b.n	8000e9a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e88:	f7ff fc7a 	bl	8000780 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d901      	bls.n	8000e9a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e06e      	b.n	8000f78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e9a:	4b39      	ldr	r3, [pc, #228]	; (8000f80 <HAL_RCC_OscConfig+0x624>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1f0      	bne.n	8000e88 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eae:	d10f      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8000eb0:	4b33      	ldr	r3, [pc, #204]	; (8000f80 <HAL_RCC_OscConfig+0x624>)
 8000eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	4931      	ldr	r1, [pc, #196]	; (8000f80 <HAL_RCC_OscConfig+0x624>)
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ebe:	4b30      	ldr	r3, [pc, #192]	; (8000f80 <HAL_RCC_OscConfig+0x624>)
 8000ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec2:	f023 020f 	bic.w	r2, r3, #15
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	492d      	ldr	r1, [pc, #180]	; (8000f80 <HAL_RCC_OscConfig+0x624>)
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <HAL_RCC_OscConfig+0x624>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee0:	430b      	orrs	r3, r1
 8000ee2:	4927      	ldr	r1, [pc, #156]	; (8000f80 <HAL_RCC_OscConfig+0x624>)
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ee8:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <HAL_RCC_OscConfig+0x628>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eee:	f7ff fc47 	bl	8000780 <HAL_GetTick>
 8000ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ef4:	e008      	b.n	8000f08 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ef6:	f7ff fc43 	bl	8000780 <HAL_GetTick>
 8000efa:	4602      	mov	r2, r0
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d901      	bls.n	8000f08 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8000f04:	2303      	movs	r3, #3
 8000f06:	e037      	b.n	8000f78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f08:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <HAL_RCC_OscConfig+0x624>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0f0      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x59a>
 8000f14:	e02f      	b.n	8000f76 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f16:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <HAL_RCC_OscConfig+0x628>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f1c:	f7ff fc30 	bl	8000780 <HAL_GetTick>
 8000f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f22:	e008      	b.n	8000f36 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f24:	f7ff fc2c 	bl	8000780 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d901      	bls.n	8000f36 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e020      	b.n	8000f78 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f36:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_RCC_OscConfig+0x624>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1f0      	bne.n	8000f24 <HAL_RCC_OscConfig+0x5c8>
 8000f42:	e018      	b.n	8000f76 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a1b      	ldr	r3, [r3, #32]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d101      	bne.n	8000f50 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e013      	b.n	8000f78 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <HAL_RCC_OscConfig+0x624>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d106      	bne.n	8000f72 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d001      	beq.n	8000f76 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40021000 	.word	0x40021000
 8000f84:	42420060 	.word	0x42420060

08000f88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d101      	bne.n	8000f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e0d0      	b.n	800113e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f9c:	4b6a      	ldr	r3, [pc, #424]	; (8001148 <HAL_RCC_ClockConfig+0x1c0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d910      	bls.n	8000fcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000faa:	4b67      	ldr	r3, [pc, #412]	; (8001148 <HAL_RCC_ClockConfig+0x1c0>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f023 0207 	bic.w	r2, r3, #7
 8000fb2:	4965      	ldr	r1, [pc, #404]	; (8001148 <HAL_RCC_ClockConfig+0x1c0>)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fba:	4b63      	ldr	r3, [pc, #396]	; (8001148 <HAL_RCC_ClockConfig+0x1c0>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	683a      	ldr	r2, [r7, #0]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d001      	beq.n	8000fcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e0b8      	b.n	800113e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d020      	beq.n	800101a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d005      	beq.n	8000ff0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fe4:	4b59      	ldr	r3, [pc, #356]	; (800114c <HAL_RCC_ClockConfig+0x1c4>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	4a58      	ldr	r2, [pc, #352]	; (800114c <HAL_RCC_ClockConfig+0x1c4>)
 8000fea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000fee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0308 	and.w	r3, r3, #8
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d005      	beq.n	8001008 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ffc:	4b53      	ldr	r3, [pc, #332]	; (800114c <HAL_RCC_ClockConfig+0x1c4>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	4a52      	ldr	r2, [pc, #328]	; (800114c <HAL_RCC_ClockConfig+0x1c4>)
 8001002:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001006:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001008:	4b50      	ldr	r3, [pc, #320]	; (800114c <HAL_RCC_ClockConfig+0x1c4>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	494d      	ldr	r1, [pc, #308]	; (800114c <HAL_RCC_ClockConfig+0x1c4>)
 8001016:	4313      	orrs	r3, r2
 8001018:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b00      	cmp	r3, #0
 8001024:	d040      	beq.n	80010a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d107      	bne.n	800103e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800102e:	4b47      	ldr	r3, [pc, #284]	; (800114c <HAL_RCC_ClockConfig+0x1c4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d115      	bne.n	8001066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e07f      	b.n	800113e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2b02      	cmp	r3, #2
 8001044:	d107      	bne.n	8001056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001046:	4b41      	ldr	r3, [pc, #260]	; (800114c <HAL_RCC_ClockConfig+0x1c4>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d109      	bne.n	8001066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e073      	b.n	800113e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001056:	4b3d      	ldr	r3, [pc, #244]	; (800114c <HAL_RCC_ClockConfig+0x1c4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e06b      	b.n	800113e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001066:	4b39      	ldr	r3, [pc, #228]	; (800114c <HAL_RCC_ClockConfig+0x1c4>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f023 0203 	bic.w	r2, r3, #3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	4936      	ldr	r1, [pc, #216]	; (800114c <HAL_RCC_ClockConfig+0x1c4>)
 8001074:	4313      	orrs	r3, r2
 8001076:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001078:	f7ff fb82 	bl	8000780 <HAL_GetTick>
 800107c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800107e:	e00a      	b.n	8001096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001080:	f7ff fb7e 	bl	8000780 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	f241 3288 	movw	r2, #5000	; 0x1388
 800108e:	4293      	cmp	r3, r2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e053      	b.n	800113e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001096:	4b2d      	ldr	r3, [pc, #180]	; (800114c <HAL_RCC_ClockConfig+0x1c4>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 020c 	and.w	r2, r3, #12
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d1eb      	bne.n	8001080 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010a8:	4b27      	ldr	r3, [pc, #156]	; (8001148 <HAL_RCC_ClockConfig+0x1c0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0307 	and.w	r3, r3, #7
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d210      	bcs.n	80010d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010b6:	4b24      	ldr	r3, [pc, #144]	; (8001148 <HAL_RCC_ClockConfig+0x1c0>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f023 0207 	bic.w	r2, r3, #7
 80010be:	4922      	ldr	r1, [pc, #136]	; (8001148 <HAL_RCC_ClockConfig+0x1c0>)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010c6:	4b20      	ldr	r3, [pc, #128]	; (8001148 <HAL_RCC_ClockConfig+0x1c0>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d001      	beq.n	80010d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e032      	b.n	800113e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d008      	beq.n	80010f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010e4:	4b19      	ldr	r3, [pc, #100]	; (800114c <HAL_RCC_ClockConfig+0x1c4>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	4916      	ldr	r1, [pc, #88]	; (800114c <HAL_RCC_ClockConfig+0x1c4>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d009      	beq.n	8001116 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_RCC_ClockConfig+0x1c4>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	490e      	ldr	r1, [pc, #56]	; (800114c <HAL_RCC_ClockConfig+0x1c4>)
 8001112:	4313      	orrs	r3, r2
 8001114:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001116:	f000 f821 	bl	800115c <HAL_RCC_GetSysClockFreq>
 800111a:	4601      	mov	r1, r0
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <HAL_RCC_ClockConfig+0x1c4>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	091b      	lsrs	r3, r3, #4
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <HAL_RCC_ClockConfig+0x1c8>)
 8001128:	5cd3      	ldrb	r3, [r2, r3]
 800112a:	fa21 f303 	lsr.w	r3, r1, r3
 800112e:	4a09      	ldr	r2, [pc, #36]	; (8001154 <HAL_RCC_ClockConfig+0x1cc>)
 8001130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <HAL_RCC_ClockConfig+0x1d0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fae0 	bl	80006fc <HAL_InitTick>

  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40022000 	.word	0x40022000
 800114c:	40021000 	.word	0x40021000
 8001150:	080013f0 	.word	0x080013f0
 8001154:	20000000 	.word	0x20000000
 8001158:	20000004 	.word	0x20000004

0800115c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800115c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001160:	b091      	sub	sp, #68	; 0x44
 8001162:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8001164:	4b6a      	ldr	r3, [pc, #424]	; (8001310 <HAL_RCC_GetSysClockFreq+0x1b4>)
 8001166:	f107 0414 	add.w	r4, r7, #20
 800116a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800116c:	c407      	stmia	r4!, {r0, r1, r2}
 800116e:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8001170:	4b68      	ldr	r3, [pc, #416]	; (8001314 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001172:	1d3c      	adds	r4, r7, #4
 8001174:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001176:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800117a:	2300      	movs	r3, #0
 800117c:	637b      	str	r3, [r7, #52]	; 0x34
 800117e:	2300      	movs	r3, #0
 8001180:	633b      	str	r3, [r7, #48]	; 0x30
 8001182:	2300      	movs	r3, #0
 8001184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001186:	2300      	movs	r3, #0
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 800118a:	2300      	movs	r3, #0
 800118c:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 800118e:	2300      	movs	r3, #0
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
 8001192:	2300      	movs	r3, #0
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001196:	4b60      	ldr	r3, [pc, #384]	; (8001318 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800119c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800119e:	f003 030c 	and.w	r3, r3, #12
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	d002      	beq.n	80011ac <HAL_RCC_GetSysClockFreq+0x50>
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d003      	beq.n	80011b2 <HAL_RCC_GetSysClockFreq+0x56>
 80011aa:	e0a7      	b.n	80012fc <HAL_RCC_GetSysClockFreq+0x1a0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011ac:	4b5b      	ldr	r3, [pc, #364]	; (800131c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80011ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80011b0:	e0a7      	b.n	8001302 <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011b4:	0c9b      	lsrs	r3, r3, #18
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80011be:	4413      	add	r3, r2
 80011c0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80011c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f000 808d 	beq.w	80012ec <HAL_RCC_GetSysClockFreq+0x190>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80011d2:	4b51      	ldr	r3, [pc, #324]	; (8001318 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80011d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80011de:	4413      	add	r3, r2
 80011e0:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80011e4:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80011e6:	4b4c      	ldr	r3, [pc, #304]	; (8001318 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80011e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d06a      	beq.n	80012c8 <HAL_RCC_GetSysClockFreq+0x16c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80011f2:	4b49      	ldr	r3, [pc, #292]	; (8001318 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80011f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f6:	091b      	lsrs	r3, r3, #4
 80011f8:	f003 030f 	and.w	r3, r3, #15
 80011fc:	3301      	adds	r3, #1
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8001200:	4b45      	ldr	r3, [pc, #276]	; (8001318 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	3302      	adds	r3, #2
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001218:	f04f 0400 	mov.w	r4, #0
 800121c:	fb03 f502 	mul.w	r5, r3, r2
 8001220:	fb01 f004 	mul.w	r0, r1, r4
 8001224:	4428      	add	r0, r5
 8001226:	fba1 5603 	umull	r5, r6, r1, r3
 800122a:	1983      	adds	r3, r0, r6
 800122c:	461e      	mov	r6, r3
 800122e:	4629      	mov	r1, r5
 8001230:	4632      	mov	r2, r6
 8001232:	f04f 0300 	mov.w	r3, #0
 8001236:	f04f 0400 	mov.w	r4, #0
 800123a:	0154      	lsls	r4, r2, #5
 800123c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001240:	014b      	lsls	r3, r1, #5
 8001242:	4619      	mov	r1, r3
 8001244:	4622      	mov	r2, r4
 8001246:	1b49      	subs	r1, r1, r5
 8001248:	eb62 0206 	sbc.w	r2, r2, r6
 800124c:	f04f 0300 	mov.w	r3, #0
 8001250:	f04f 0400 	mov.w	r4, #0
 8001254:	0194      	lsls	r4, r2, #6
 8001256:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800125a:	018b      	lsls	r3, r1, #6
 800125c:	1a5b      	subs	r3, r3, r1
 800125e:	eb64 0402 	sbc.w	r4, r4, r2
 8001262:	f04f 0100 	mov.w	r1, #0
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	00e2      	lsls	r2, r4, #3
 800126c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001270:	00d9      	lsls	r1, r3, #3
 8001272:	460b      	mov	r3, r1
 8001274:	4614      	mov	r4, r2
 8001276:	195b      	adds	r3, r3, r5
 8001278:	eb44 0406 	adc.w	r4, r4, r6
 800127c:	f04f 0100 	mov.w	r1, #0
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	0262      	lsls	r2, r4, #9
 8001286:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800128a:	0259      	lsls	r1, r3, #9
 800128c:	460b      	mov	r3, r1
 800128e:	4614      	mov	r4, r2
 8001290:	4698      	mov	r8, r3
 8001292:	46a1      	mov	r9, r4
 8001294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001296:	4619      	mov	r1, r3
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800129e:	f04f 0400 	mov.w	r4, #0
 80012a2:	fb03 f502 	mul.w	r5, r3, r2
 80012a6:	fb01 f004 	mul.w	r0, r1, r4
 80012aa:	4428      	add	r0, r5
 80012ac:	fba1 3403 	umull	r3, r4, r1, r3
 80012b0:	1902      	adds	r2, r0, r4
 80012b2:	4614      	mov	r4, r2
 80012b4:	461a      	mov	r2, r3
 80012b6:	4623      	mov	r3, r4
 80012b8:	4640      	mov	r0, r8
 80012ba:	4649      	mov	r1, r9
 80012bc:	f7fe ffb2 	bl	8000224 <__aeabi_uldivmod>
 80012c0:	4603      	mov	r3, r0
 80012c2:	460c      	mov	r4, r1
 80012c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012c6:	e007      	b.n	80012d8 <HAL_RCC_GetSysClockFreq+0x17c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80012c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ca:	4a14      	ldr	r2, [pc, #80]	; (800131c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80012cc:	fb02 f203 	mul.w	r2, r2, r3
 80012d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80012d8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80012dc:	461a      	mov	r2, r3
 80012de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d108      	bne.n	80012f6 <HAL_RCC_GetSysClockFreq+0x19a>
        {
          pllclk = pllclk / 2;
 80012e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012e6:	085b      	lsrs	r3, r3, #1
 80012e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012ea:	e004      	b.n	80012f6 <HAL_RCC_GetSysClockFreq+0x19a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ee:	4a0c      	ldr	r2, [pc, #48]	; (8001320 <HAL_RCC_GetSysClockFreq+0x1c4>)
 80012f0:	fb02 f303 	mul.w	r3, r2, r3
 80012f4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 80012f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80012fa:	e002      	b.n	8001302 <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80012fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001304:	4618      	mov	r0, r3
 8001306:	3744      	adds	r7, #68	; 0x44
 8001308:	46bd      	mov	sp, r7
 800130a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800130e:	bf00      	nop
 8001310:	080013d0 	.word	0x080013d0
 8001314:	080013e0 	.word	0x080013e0
 8001318:	40021000 	.word	0x40021000
 800131c:	007a1200 	.word	0x007a1200
 8001320:	003d0900 	.word	0x003d0900

08001324 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <RCC_Delay+0x34>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a0a      	ldr	r2, [pc, #40]	; (800135c <RCC_Delay+0x38>)
 8001332:	fba2 2303 	umull	r2, r3, r2, r3
 8001336:	0a5b      	lsrs	r3, r3, #9
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	fb02 f303 	mul.w	r3, r2, r3
 800133e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001340:	bf00      	nop
  }
  while (Delay --);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	1e5a      	subs	r2, r3, #1
 8001346:	60fa      	str	r2, [r7, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1f9      	bne.n	8001340 <RCC_Delay+0x1c>
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	20000000 	.word	0x20000000
 800135c:	10624dd3 	.word	0x10624dd3

08001360 <__libc_init_array>:
 8001360:	b570      	push	{r4, r5, r6, lr}
 8001362:	2500      	movs	r5, #0
 8001364:	4e0c      	ldr	r6, [pc, #48]	; (8001398 <__libc_init_array+0x38>)
 8001366:	4c0d      	ldr	r4, [pc, #52]	; (800139c <__libc_init_array+0x3c>)
 8001368:	1ba4      	subs	r4, r4, r6
 800136a:	10a4      	asrs	r4, r4, #2
 800136c:	42a5      	cmp	r5, r4
 800136e:	d109      	bne.n	8001384 <__libc_init_array+0x24>
 8001370:	f000 f822 	bl	80013b8 <_init>
 8001374:	2500      	movs	r5, #0
 8001376:	4e0a      	ldr	r6, [pc, #40]	; (80013a0 <__libc_init_array+0x40>)
 8001378:	4c0a      	ldr	r4, [pc, #40]	; (80013a4 <__libc_init_array+0x44>)
 800137a:	1ba4      	subs	r4, r4, r6
 800137c:	10a4      	asrs	r4, r4, #2
 800137e:	42a5      	cmp	r5, r4
 8001380:	d105      	bne.n	800138e <__libc_init_array+0x2e>
 8001382:	bd70      	pop	{r4, r5, r6, pc}
 8001384:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001388:	4798      	blx	r3
 800138a:	3501      	adds	r5, #1
 800138c:	e7ee      	b.n	800136c <__libc_init_array+0xc>
 800138e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001392:	4798      	blx	r3
 8001394:	3501      	adds	r5, #1
 8001396:	e7f2      	b.n	800137e <__libc_init_array+0x1e>
 8001398:	08001408 	.word	0x08001408
 800139c:	08001408 	.word	0x08001408
 80013a0:	08001408 	.word	0x08001408
 80013a4:	0800140c 	.word	0x0800140c

080013a8 <memset>:
 80013a8:	4603      	mov	r3, r0
 80013aa:	4402      	add	r2, r0
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d100      	bne.n	80013b2 <memset+0xa>
 80013b0:	4770      	bx	lr
 80013b2:	f803 1b01 	strb.w	r1, [r3], #1
 80013b6:	e7f9      	b.n	80013ac <memset+0x4>

080013b8 <_init>:
 80013b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ba:	bf00      	nop
 80013bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013be:	bc08      	pop	{r3}
 80013c0:	469e      	mov	lr, r3
 80013c2:	4770      	bx	lr

080013c4 <_fini>:
 80013c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c6:	bf00      	nop
 80013c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ca:	bc08      	pop	{r3}
 80013cc:	469e      	mov	lr, r3
 80013ce:	4770      	bx	lr
