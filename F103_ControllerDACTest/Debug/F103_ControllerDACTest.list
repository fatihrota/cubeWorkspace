
F103_ControllerDACTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bc4  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ac  08007db4  08007db4  00017db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008460  08008460  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08008460  08008460  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008460  08008460  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008460  08008460  00018460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008464  08008464  00018464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08008468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001eb4  200001ec  08008654  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020a0  08008654  000220a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000183c1  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003465  00000000  00000000  000385d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011f8  00000000  00000000  0003ba40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010c8  00000000  00000000  0003cc38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bae9  00000000  00000000  0003dd00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010ae0  00000000  00000000  000597e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009d558  00000000  00000000  0006a2c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00107821  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ed4  00000000  00000000  0010789c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200001ec 	.word	0x200001ec
 800020c:	00000000 	.word	0x00000000
 8000210:	08007d9c 	.word	0x08007d9c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200001f0 	.word	0x200001f0
 800022c:	08007d9c 	.word	0x08007d9c

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b086      	sub	sp, #24
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
 8000248:	2300      	movs	r3, #0
 800024a:	617b      	str	r3, [r7, #20]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d109      	bne.n	8000266 <FreeRTOS_CLIRegisterCommand+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000256:	f383 8811 	msr	BASEPRI, r3
 800025a:	f3bf 8f6f 	isb	sy
 800025e:	f3bf 8f4f 	dsb	sy
 8000262:	60fb      	str	r3, [r7, #12]
 8000264:	e7fe      	b.n	8000264 <FreeRTOS_CLIRegisterCommand+0x24>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 8000266:	2008      	movs	r0, #8
 8000268:	f006 fe84 	bl	8006f74 <pvPortMalloc>
 800026c:	6138      	str	r0, [r7, #16]
	configASSERT( pxNewListItem );
 800026e:	693b      	ldr	r3, [r7, #16]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d109      	bne.n	8000288 <FreeRTOS_CLIRegisterCommand+0x48>
 8000274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000278:	f383 8811 	msr	BASEPRI, r3
 800027c:	f3bf 8f6f 	isb	sy
 8000280:	f3bf 8f4f 	dsb	sy
 8000284:	60bb      	str	r3, [r7, #8]
 8000286:	e7fe      	b.n	8000286 <FreeRTOS_CLIRegisterCommand+0x46>

	if( pxNewListItem != NULL )
 8000288:	693b      	ldr	r3, [r7, #16]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d012      	beq.n	80002b4 <FreeRTOS_CLIRegisterCommand+0x74>
	{
		taskENTER_CRITICAL();
 800028e:	f006 fd7b 	bl	8006d88 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 8000292:	693b      	ldr	r3, [r7, #16]
 8000294:	687a      	ldr	r2, [r7, #4]
 8000296:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 8000298:	693b      	ldr	r3, [r7, #16]
 800029a:	2200      	movs	r2, #0
 800029c:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800029e:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <FreeRTOS_CLIRegisterCommand+0x80>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	693a      	ldr	r2, [r7, #16]
 80002a4:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 80002a6:	4a06      	ldr	r2, [pc, #24]	; (80002c0 <FreeRTOS_CLIRegisterCommand+0x80>)
 80002a8:	693b      	ldr	r3, [r7, #16]
 80002aa:	6013      	str	r3, [r2, #0]
		}
		taskEXIT_CRITICAL();
 80002ac:	f006 fd9a 	bl	8006de4 <vPortExitCritical>

		xReturn = pdPASS;
 80002b0:	2301      	movs	r3, #1
 80002b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80002b4:	697b      	ldr	r3, [r7, #20]
}
 80002b6:	4618      	mov	r0, r3
 80002b8:	3718      	adds	r7, #24
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	20000008 	.word	0x20000008

080002c4 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b088      	sub	sp, #32
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
 80002d0:	2301      	movs	r3, #1
 80002d2:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
 80002d4:	4b3a      	ldr	r3, [pc, #232]	; (80003c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d141      	bne.n	8000360 <FreeRTOS_CLIProcessCommand+0x9c>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80002dc:	4b38      	ldr	r3, [pc, #224]	; (80003c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 80002de:	4a39      	ldr	r2, [pc, #228]	; (80003c4 <FreeRTOS_CLIProcessCommand+0x100>)
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	e037      	b.n	8000354 <FreeRTOS_CLIProcessCommand+0x90>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 80002e4:	4b36      	ldr	r3, [pc, #216]	; (80003c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 80002ee:	69b8      	ldr	r0, [r7, #24]
 80002f0:	f7ff ff9e 	bl	8000230 <strlen>
 80002f4:	6178      	str	r0, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 80002f6:	68fa      	ldr	r2, [r7, #12]
 80002f8:	697b      	ldr	r3, [r7, #20]
 80002fa:	4413      	add	r3, r2
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	2b20      	cmp	r3, #32
 8000300:	d005      	beq.n	800030e <FreeRTOS_CLIProcessCommand+0x4a>
 8000302:	68fa      	ldr	r2, [r7, #12]
 8000304:	697b      	ldr	r3, [r7, #20]
 8000306:	4413      	add	r3, r2
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d11d      	bne.n	800034a <FreeRTOS_CLIProcessCommand+0x86>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800030e:	697a      	ldr	r2, [r7, #20]
 8000310:	69b9      	ldr	r1, [r7, #24]
 8000312:	68f8      	ldr	r0, [r7, #12]
 8000314:	f007 f880 	bl	8007418 <strncmp>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d115      	bne.n	800034a <FreeRTOS_CLIProcessCommand+0x86>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800031e:	4b28      	ldr	r3, [pc, #160]	; (80003c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000328:	2b00      	cmp	r3, #0
 800032a:	db18      	blt.n	800035e <FreeRTOS_CLIProcessCommand+0x9a>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800032c:	68f8      	ldr	r0, [r7, #12]
 800032e:	f000 f8df 	bl	80004f0 <prvGetNumberOfParameters>
 8000332:	4603      	mov	r3, r0
 8000334:	461a      	mov	r2, r3
 8000336:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000340:	429a      	cmp	r2, r3
 8000342:	d00c      	beq.n	800035e <FreeRTOS_CLIProcessCommand+0x9a>
						{
							xReturn = pdFALSE;
 8000344:	2300      	movs	r3, #0
 8000346:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
 8000348:	e009      	b.n	800035e <FreeRTOS_CLIProcessCommand+0x9a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800034a:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	685b      	ldr	r3, [r3, #4]
 8000350:	4a1b      	ldr	r2, [pc, #108]	; (80003c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000352:	6013      	str	r3, [r2, #0]
 8000354:	4b1a      	ldr	r3, [pc, #104]	; (80003c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d1c3      	bne.n	80002e4 <FreeRTOS_CLIProcessCommand+0x20>
 800035c:	e000      	b.n	8000360 <FreeRTOS_CLIProcessCommand+0x9c>
					break;
 800035e:	bf00      	nop
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 8000360:	4b17      	ldr	r3, [pc, #92]	; (80003c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d00b      	beq.n	8000380 <FreeRTOS_CLIProcessCommand+0xbc>
 8000368:	69fb      	ldr	r3, [r7, #28]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d108      	bne.n	8000380 <FreeRTOS_CLIProcessCommand+0xbc>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800036e:	687a      	ldr	r2, [r7, #4]
 8000370:	4915      	ldr	r1, [pc, #84]	; (80003c8 <FreeRTOS_CLIProcessCommand+0x104>)
 8000372:	68b8      	ldr	r0, [r7, #8]
 8000374:	f007 f862 	bl	800743c <strncpy>
		pxCommand = NULL;
 8000378:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	e01a      	b.n	80003b6 <FreeRTOS_CLIProcessCommand+0xf2>
	}
	else if( pxCommand != NULL )
 8000380:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d00f      	beq.n	80003a8 <FreeRTOS_CLIProcessCommand+0xe4>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 8000388:	4b0d      	ldr	r3, [pc, #52]	; (80003c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	68fa      	ldr	r2, [r7, #12]
 8000392:	6879      	ldr	r1, [r7, #4]
 8000394:	68b8      	ldr	r0, [r7, #8]
 8000396:	4798      	blx	r3
 8000398:	61f8      	str	r0, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800039a:	69fb      	ldr	r3, [r7, #28]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d10a      	bne.n	80003b6 <FreeRTOS_CLIProcessCommand+0xf2>
		{
			pxCommand = NULL;
 80003a0:	4b07      	ldr	r3, [pc, #28]	; (80003c0 <FreeRTOS_CLIProcessCommand+0xfc>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	e006      	b.n	80003b6 <FreeRTOS_CLIProcessCommand+0xf2>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80003a8:	687a      	ldr	r2, [r7, #4]
 80003aa:	4908      	ldr	r1, [pc, #32]	; (80003cc <FreeRTOS_CLIProcessCommand+0x108>)
 80003ac:	68b8      	ldr	r0, [r7, #8]
 80003ae:	f007 f845 	bl	800743c <strncpy>
		xReturn = pdFALSE;
 80003b2:	2300      	movs	r3, #0
 80003b4:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
 80003b6:	69fb      	ldr	r3, [r7, #28]
}
 80003b8:	4618      	mov	r0, r3
 80003ba:	3720      	adds	r7, #32
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20000608 	.word	0x20000608
 80003c4:	20000000 	.word	0x20000000
 80003c8:	08007dec 	.word	0x08007dec
 80003cc:	08007e44 	.word	0x08007e44

080003d0 <FreeRTOS_CLIGetOutputBuffer>:
/*-----------------------------------------------------------*/

char *FreeRTOS_CLIGetOutputBuffer( void )
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
	return cOutputBuffer;
 80003d4:	4b02      	ldr	r3, [pc, #8]	; (80003e0 <FreeRTOS_CLIGetOutputBuffer+0x10>)
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	20000208 	.word	0x20000208

080003e4 <FreeRTOS_CLIGetParameter>:
/*-----------------------------------------------------------*/

const char *FreeRTOS_CLIGetParameter( const char *pcCommandString, UBaseType_t uxWantedParameter, BaseType_t *pxParameterStringLength )
{
 80003e4:	b480      	push	{r7}
 80003e6:	b087      	sub	sp, #28
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	60f8      	str	r0, [r7, #12]
 80003ec:	60b9      	str	r1, [r7, #8]
 80003ee:	607a      	str	r2, [r7, #4]
UBaseType_t uxParametersFound = 0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]
const char *pcReturn = NULL;
 80003f4:	2300      	movs	r3, #0
 80003f6:	613b      	str	r3, [r7, #16]

	*pxParameterStringLength = 0;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]

	while( uxParametersFound < uxWantedParameter )
 80003fe:	e03b      	b.n	8000478 <FreeRTOS_CLIGetParameter+0x94>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
		{
			pcCommandString++;
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	3301      	adds	r3, #1
 8000404:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d007      	beq.n	800041e <FreeRTOS_CLIGetParameter+0x3a>
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	2b20      	cmp	r3, #32
 8000414:	d1f4      	bne.n	8000400 <FreeRTOS_CLIGetParameter+0x1c>
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8000416:	e002      	b.n	800041e <FreeRTOS_CLIGetParameter+0x3a>
		{
			pcCommandString++;
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	3301      	adds	r3, #1
 800041c:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d003      	beq.n	800042e <FreeRTOS_CLIGetParameter+0x4a>
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b20      	cmp	r3, #32
 800042c:	d0f4      	beq.n	8000418 <FreeRTOS_CLIGetParameter+0x34>
		}

		/* Was a string found? */
		if( *pcCommandString != 0x00 )
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d025      	beq.n	8000482 <FreeRTOS_CLIGetParameter+0x9e>
		{
			/* Is this the start of the required parameter? */
			uxParametersFound++;
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	3301      	adds	r3, #1
 800043a:	617b      	str	r3, [r7, #20]

			if( uxParametersFound == uxWantedParameter )
 800043c:	697a      	ldr	r2, [r7, #20]
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	429a      	cmp	r2, r3
 8000442:	d119      	bne.n	8000478 <FreeRTOS_CLIGetParameter+0x94>
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	613b      	str	r3, [r7, #16]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8000448:	e007      	b.n	800045a <FreeRTOS_CLIGetParameter+0x76>
				{
					( *pxParameterStringLength )++;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	1c5a      	adds	r2, r3, #1
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	601a      	str	r2, [r3, #0]
					pcCommandString++;
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	3301      	adds	r3, #1
 8000458:	60fb      	str	r3, [r7, #12]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d003      	beq.n	800046a <FreeRTOS_CLIGetParameter+0x86>
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b20      	cmp	r3, #32
 8000468:	d1ef      	bne.n	800044a <FreeRTOS_CLIGetParameter+0x66>
				}

				if( *pxParameterStringLength == 0 )
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d109      	bne.n	8000486 <FreeRTOS_CLIGetParameter+0xa2>
				{
					pcReturn = NULL;
 8000472:	2300      	movs	r3, #0
 8000474:	613b      	str	r3, [r7, #16]
				}

				break;
 8000476:	e006      	b.n	8000486 <FreeRTOS_CLIGetParameter+0xa2>
	while( uxParametersFound < uxWantedParameter )
 8000478:	697a      	ldr	r2, [r7, #20]
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	429a      	cmp	r2, r3
 800047e:	d3c2      	bcc.n	8000406 <FreeRTOS_CLIGetParameter+0x22>
 8000480:	e002      	b.n	8000488 <FreeRTOS_CLIGetParameter+0xa4>
			}
		}
		else
		{
			break;
 8000482:	bf00      	nop
 8000484:	e000      	b.n	8000488 <FreeRTOS_CLIGetParameter+0xa4>
				break;
 8000486:	bf00      	nop
		}
	}

	return pcReturn;
 8000488:	693b      	ldr	r3, [r7, #16]
}
 800048a:	4618      	mov	r0, r3
 800048c:	371c      	adds	r7, #28
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr

08000494 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af00      	add	r7, sp, #0
 800049a:	60f8      	str	r0, [r7, #12]
 800049c:	60b9      	str	r1, [r7, #8]
 800049e:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 80004a0:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <prvHelpCommand+0x54>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d102      	bne.n	80004ae <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
 80004a8:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <prvHelpCommand+0x54>)
 80004aa:	4a10      	ldr	r2, [pc, #64]	; (80004ec <prvHelpCommand+0x58>)
 80004ac:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 80004ae:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <prvHelpCommand+0x54>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	68ba      	ldr	r2, [r7, #8]
 80004b8:	4619      	mov	r1, r3
 80004ba:	68f8      	ldr	r0, [r7, #12]
 80004bc:	f006 ffbe 	bl	800743c <strncpy>
	pxCommand = pxCommand->pxNext;
 80004c0:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <prvHelpCommand+0x54>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	4a08      	ldr	r2, [pc, #32]	; (80004e8 <prvHelpCommand+0x54>)
 80004c8:	6013      	str	r3, [r2, #0]

	if( pxCommand == NULL )
 80004ca:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <prvHelpCommand+0x54>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d102      	bne.n	80004d8 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
 80004d2:	2300      	movs	r3, #0
 80004d4:	617b      	str	r3, [r7, #20]
 80004d6:	e001      	b.n	80004dc <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
 80004d8:	2301      	movs	r3, #1
 80004da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80004dc:	697b      	ldr	r3, [r7, #20]
}
 80004de:	4618      	mov	r0, r3
 80004e0:	3718      	adds	r7, #24
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	2000060c 	.word	0x2000060c
 80004ec:	20000000 	.word	0x20000000

080004f0 <prvGetNumberOfParameters>:


/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	73fb      	strb	r3, [r7, #15]
BaseType_t xLastCharacterWasSpace = pdFALSE;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8000500:	e014      	b.n	800052c <prvGetNumberOfParameters+0x3c>
	{
		if( ( *pcCommandString ) == ' ' )
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b20      	cmp	r3, #32
 8000508:	d10b      	bne.n	8000522 <prvGetNumberOfParameters+0x32>
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d00a      	beq.n	8000526 <prvGetNumberOfParameters+0x36>
			{
				cParameters++;
 8000510:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000514:	b2db      	uxtb	r3, r3
 8000516:	3301      	adds	r3, #1
 8000518:	b2db      	uxtb	r3, r3
 800051a:	73fb      	strb	r3, [r7, #15]
				xLastCharacterWasSpace = pdTRUE;
 800051c:	2301      	movs	r3, #1
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	e001      	b.n	8000526 <prvGetNumberOfParameters+0x36>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 8000522:	2300      	movs	r3, #0
 8000524:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	3301      	adds	r3, #1
 800052a:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d1e6      	bne.n	8000502 <prvGetNumberOfParameters+0x12>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d105      	bne.n	8000546 <prvGetNumberOfParameters+0x56>
	{
		cParameters--;
 800053a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800053e:	b2db      	uxtb	r3, r3
 8000540:	3b01      	subs	r3, #1
 8000542:	b2db      	uxtb	r3, r3
 8000544:	73fb      	strb	r3, [r7, #15]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
 8000546:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800054a:	4618      	mov	r0, r3
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr

08000554 <vRegisterSampleCLICommands>:
#endif /* configINCLUDE_TRACE_RELATED_CLI_COMMANDS */

/*-----------------------------------------------------------*/

void vRegisterSampleCLICommands( void )
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	/* Register all the command line commands defined immediately above. */
	FreeRTOS_CLIRegisterCommand( &xTaskStats );	
 8000558:	4808      	ldr	r0, [pc, #32]	; (800057c <vRegisterSampleCLICommands+0x28>)
 800055a:	f7ff fe71 	bl	8000240 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &xThreeParameterEcho );
 800055e:	4808      	ldr	r0, [pc, #32]	; (8000580 <vRegisterSampleCLICommands+0x2c>)
 8000560:	f7ff fe6e 	bl	8000240 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &xParameterEcho );
 8000564:	4807      	ldr	r0, [pc, #28]	; (8000584 <vRegisterSampleCLICommands+0x30>)
 8000566:	f7ff fe6b 	bl	8000240 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &xDacCommand );
 800056a:	4807      	ldr	r0, [pc, #28]	; (8000588 <vRegisterSampleCLICommands+0x34>)
 800056c:	f7ff fe68 	bl	8000240 <FreeRTOS_CLIRegisterCommand>

	#if( configGENERATE_RUN_TIME_STATS == 1 )
	{
		FreeRTOS_CLIRegisterCommand( &xRunTimeStats );
 8000570:	4806      	ldr	r0, [pc, #24]	; (800058c <vRegisterSampleCLICommands+0x38>)
 8000572:	f7ff fe65 	bl	8000240 <FreeRTOS_CLIRegisterCommand>
	#if( configINCLUDE_TRACE_RELATED_CLI_COMMANDS == 1 )
	{
		FreeRTOS_CLIRegisterCommand( &xStartStopTrace );
	}
	#endif
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	08008270 	.word	0x08008270
 8000580:	08008280 	.word	0x08008280
 8000584:	08008290 	.word	0x08008290
 8000588:	080082b0 	.word	0x080082b0
 800058c:	080082a0 	.word	0x080082a0

08000590 <prvTaskStatsCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvTaskStatsCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
const char *const pcHeader = "     State   Priority  Stack    #\r\n************************************************\r\n";
 800059c:	4b1f      	ldr	r3, [pc, #124]	; (800061c <prvTaskStatsCommand+0x8c>)
 800059e:	61bb      	str	r3, [r7, #24]
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) pcCommandString;
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d109      	bne.n	80005ba <prvTaskStatsCommand+0x2a>
 80005a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005aa:	f383 8811 	msr	BASEPRI, r3
 80005ae:	f3bf 8f6f 	isb	sy
 80005b2:	f3bf 8f4f 	dsb	sy
 80005b6:	617b      	str	r3, [r7, #20]
 80005b8:	e7fe      	b.n	80005b8 <prvTaskStatsCommand+0x28>

	/* Generate a table of task stats. */
	strcpy( pcWriteBuffer, "Task" );
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	4a18      	ldr	r2, [pc, #96]	; (8000620 <prvTaskStatsCommand+0x90>)
 80005be:	6810      	ldr	r0, [r2, #0]
 80005c0:	6018      	str	r0, [r3, #0]
 80005c2:	7912      	ldrb	r2, [r2, #4]
 80005c4:	711a      	strb	r2, [r3, #4]
	pcWriteBuffer += strlen( pcWriteBuffer );
 80005c6:	68f8      	ldr	r0, [r7, #12]
 80005c8:	f7ff fe32 	bl	8000230 <strlen>
 80005cc:	4602      	mov	r2, r0
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	4413      	add	r3, r2
 80005d2:	60fb      	str	r3, [r7, #12]

	/* Minus three for the null terminator and half the number of characters in
	"Task" so the column lines up with the centre of the heading. */
	configASSERT( configMAX_TASK_NAME_LEN > 3 );
	for( xSpacePadding = strlen( "Task" ); xSpacePadding < ( configMAX_TASK_NAME_LEN - 3 ); xSpacePadding++ )
 80005d4:	2304      	movs	r3, #4
 80005d6:	61fb      	str	r3, [r7, #28]
 80005d8:	e00b      	b.n	80005f2 <prvTaskStatsCommand+0x62>
	{
		/* Add a space to align columns after the task's name. */
		*pcWriteBuffer = ' ';
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	2220      	movs	r2, #32
 80005de:	701a      	strb	r2, [r3, #0]
		pcWriteBuffer++;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	3301      	adds	r3, #1
 80005e4:	60fb      	str	r3, [r7, #12]

		/* Ensure always terminated. */
		*pcWriteBuffer = 0x00;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]
	for( xSpacePadding = strlen( "Task" ); xSpacePadding < ( configMAX_TASK_NAME_LEN - 3 ); xSpacePadding++ )
 80005ec:	69fb      	ldr	r3, [r7, #28]
 80005ee:	3301      	adds	r3, #1
 80005f0:	61fb      	str	r3, [r7, #28]
 80005f2:	69fb      	ldr	r3, [r7, #28]
 80005f4:	2b0c      	cmp	r3, #12
 80005f6:	ddf0      	ble.n	80005da <prvTaskStatsCommand+0x4a>
	}
	strcpy( pcWriteBuffer, pcHeader );
 80005f8:	69b9      	ldr	r1, [r7, #24]
 80005fa:	68f8      	ldr	r0, [r7, #12]
 80005fc:	f006 fef0 	bl	80073e0 <strcpy>
	vTaskList( pcWriteBuffer + strlen( pcHeader ) );
 8000600:	69b8      	ldr	r0, [r7, #24]
 8000602:	f7ff fe15 	bl	8000230 <strlen>
 8000606:	4602      	mov	r2, r0
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	4618      	mov	r0, r3
 800060e:	f005 fe43 	bl	8006298 <vTaskList>

	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
 8000612:	2300      	movs	r3, #0
}
 8000614:	4618      	mov	r0, r3
 8000616:	3720      	adds	r7, #32
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	0800805c 	.word	0x0800805c
 8000620:	080080b4 	.word	0x080080b4

08000624 <prvRunTimeStatsCommand>:
/*-----------------------------------------------------------*/

#if( configGENERATE_RUN_TIME_STATS == 1 )
	
	static BaseType_t prvRunTimeStatsCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
	{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
	const char * const pcHeader = "  Abs Time      % Time\r\n****************************************\r\n";
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <prvRunTimeStatsCommand+0x8c>)
 8000632:	61bb      	str	r3, [r7, #24]
		/* Remove compile time warnings about unused parameters, and check the
		write buffer is not NULL.  NOTE - for simplicity, this example assumes the
		write buffer length is adequate, so does not check for buffer overflows. */
		( void ) pcCommandString;
		( void ) xWriteBufferLen;
		configASSERT( pcWriteBuffer );
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d109      	bne.n	800064e <prvRunTimeStatsCommand+0x2a>
 800063a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800063e:	f383 8811 	msr	BASEPRI, r3
 8000642:	f3bf 8f6f 	isb	sy
 8000646:	f3bf 8f4f 	dsb	sy
 800064a:	617b      	str	r3, [r7, #20]
 800064c:	e7fe      	b.n	800064c <prvRunTimeStatsCommand+0x28>

		/* Generate a table of task stats. */
		strcpy( pcWriteBuffer, "Task" );
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	4a18      	ldr	r2, [pc, #96]	; (80006b4 <prvRunTimeStatsCommand+0x90>)
 8000652:	6810      	ldr	r0, [r2, #0]
 8000654:	6018      	str	r0, [r3, #0]
 8000656:	7912      	ldrb	r2, [r2, #4]
 8000658:	711a      	strb	r2, [r3, #4]
		pcWriteBuffer += strlen( pcWriteBuffer );
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	f7ff fde8 	bl	8000230 <strlen>
 8000660:	4602      	mov	r2, r0
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	4413      	add	r3, r2
 8000666:	60fb      	str	r3, [r7, #12]

		/* Pad the string "task" with however many bytes necessary to make it the
		length of a task name.  Minus three for the null terminator and half the
		number of characters in	"Task" so the column lines up with the centre of
		the heading. */
		for( xSpacePadding = strlen( "Task" ); xSpacePadding < ( configMAX_TASK_NAME_LEN - 3 ); xSpacePadding++ )
 8000668:	2304      	movs	r3, #4
 800066a:	61fb      	str	r3, [r7, #28]
 800066c:	e00b      	b.n	8000686 <prvRunTimeStatsCommand+0x62>
		{
			/* Add a space to align columns after the task's name. */
			*pcWriteBuffer = ' ';
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	2220      	movs	r2, #32
 8000672:	701a      	strb	r2, [r3, #0]
			pcWriteBuffer++;
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	3301      	adds	r3, #1
 8000678:	60fb      	str	r3, [r7, #12]

			/* Ensure always terminated. */
			*pcWriteBuffer = 0x00;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	2200      	movs	r2, #0
 800067e:	701a      	strb	r2, [r3, #0]
		for( xSpacePadding = strlen( "Task" ); xSpacePadding < ( configMAX_TASK_NAME_LEN - 3 ); xSpacePadding++ )
 8000680:	69fb      	ldr	r3, [r7, #28]
 8000682:	3301      	adds	r3, #1
 8000684:	61fb      	str	r3, [r7, #28]
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	2b0c      	cmp	r3, #12
 800068a:	ddf0      	ble.n	800066e <prvRunTimeStatsCommand+0x4a>
		}

		strcpy( pcWriteBuffer, pcHeader );
 800068c:	69b9      	ldr	r1, [r7, #24]
 800068e:	68f8      	ldr	r0, [r7, #12]
 8000690:	f006 fea6 	bl	80073e0 <strcpy>
		vTaskGetRunTimeStats( pcWriteBuffer + strlen( pcHeader ) );
 8000694:	69b8      	ldr	r0, [r7, #24]
 8000696:	f7ff fdcb 	bl	8000230 <strlen>
 800069a:	4602      	mov	r2, r0
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4413      	add	r3, r2
 80006a0:	4618      	mov	r0, r3
 80006a2:	f005 fe91 	bl	80063c8 <vTaskGetRunTimeStats>

		/* There is no more data to return after this single string, so return
		pdFALSE. */
		return pdFALSE;
 80006a6:	2300      	movs	r3, #0
	}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3720      	adds	r7, #32
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	080080bc 	.word	0x080080bc
 80006b4:	080080b4 	.word	0x080080b4

080006b8 <prvThreeParameterEchoCommand>:
	
#endif /* configGENERATE_RUN_TIME_STATS */
/*-----------------------------------------------------------*/

static BaseType_t prvThreeParameterEchoCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80006b8:	b5b0      	push	{r4, r5, r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) pcCommandString;
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d109      	bne.n	80006de <prvThreeParameterEchoCommand+0x26>
 80006ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006ce:	f383 8811 	msr	BASEPRI, r3
 80006d2:	f3bf 8f6f 	isb	sy
 80006d6:	f3bf 8f4f 	dsb	sy
 80006da:	61fb      	str	r3, [r7, #28]
 80006dc:	e7fe      	b.n	80006dc <prvThreeParameterEchoCommand+0x24>

	if( uxParameterNumber == 0 )
 80006de:	4b31      	ldr	r3, [pc, #196]	; (80007a4 <prvThreeParameterEchoCommand+0xec>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d114      	bne.n	8000710 <prvThreeParameterEchoCommand+0x58>
	{
		/* The first time the function is called after the command has been
		entered just a header string is returned. */
		sprintf( pcWriteBuffer, "The three parameters were:\r\n" );
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	4a2f      	ldr	r2, [pc, #188]	; (80007a8 <prvThreeParameterEchoCommand+0xf0>)
 80006ea:	461d      	mov	r5, r3
 80006ec:	4614      	mov	r4, r2
 80006ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006f0:	6028      	str	r0, [r5, #0]
 80006f2:	6069      	str	r1, [r5, #4]
 80006f4:	60aa      	str	r2, [r5, #8]
 80006f6:	60eb      	str	r3, [r5, #12]
 80006f8:	cc07      	ldmia	r4!, {r0, r1, r2}
 80006fa:	6128      	str	r0, [r5, #16]
 80006fc:	6169      	str	r1, [r5, #20]
 80006fe:	61aa      	str	r2, [r5, #24]
 8000700:	7823      	ldrb	r3, [r4, #0]
 8000702:	772b      	strb	r3, [r5, #28]

		/* Next time the function is called the first parameter will be echoed
		back. */
		uxParameterNumber = 1U;
 8000704:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <prvThreeParameterEchoCommand+0xec>)
 8000706:	2201      	movs	r2, #1
 8000708:	601a      	str	r2, [r3, #0]

		/* There is more data to be returned as no parameters have been echoed
		back yet. */
		xReturn = pdPASS;
 800070a:	2301      	movs	r3, #1
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
 800070e:	e044      	b.n	800079a <prvThreeParameterEchoCommand+0xe2>
	}
	else
	{
		/* Obtain the parameter string. */
		pcParameter = FreeRTOS_CLIGetParameter
 8000710:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <prvThreeParameterEchoCommand+0xec>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f107 0214 	add.w	r2, r7, #20
 8000718:	4619      	mov	r1, r3
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f7ff fe62 	bl	80003e4 <FreeRTOS_CLIGetParameter>
 8000720:	6238      	str	r0, [r7, #32]
							uxParameterNumber,		/* Return the next parameter. */
							&xParameterStringLength	/* Store the parameter string length. */
						);

		/* Sanity check something was returned. */
		configASSERT( pcParameter );
 8000722:	6a3b      	ldr	r3, [r7, #32]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d109      	bne.n	800073c <prvThreeParameterEchoCommand+0x84>
 8000728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800072c:	f383 8811 	msr	BASEPRI, r3
 8000730:	f3bf 8f6f 	isb	sy
 8000734:	f3bf 8f4f 	dsb	sy
 8000738:	61bb      	str	r3, [r7, #24]
 800073a:	e7fe      	b.n	800073a <prvThreeParameterEchoCommand+0x82>

		/* Return the parameter string. */
		memset( pcWriteBuffer, 0x00, xWriteBufferLen );
 800073c:	68ba      	ldr	r2, [r7, #8]
 800073e:	2100      	movs	r1, #0
 8000740:	68f8      	ldr	r0, [r7, #12]
 8000742:	f006 fe24 	bl	800738e <memset>
		sprintf( pcWriteBuffer, "%d: ", ( int ) uxParameterNumber );
 8000746:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <prvThreeParameterEchoCommand+0xec>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	461a      	mov	r2, r3
 800074c:	4917      	ldr	r1, [pc, #92]	; (80007ac <prvThreeParameterEchoCommand+0xf4>)
 800074e:	68f8      	ldr	r0, [r7, #12]
 8000750:	f006 fe26 	bl	80073a0 <siprintf>
		strncat( pcWriteBuffer, pcParameter, ( size_t ) xParameterStringLength );
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	461a      	mov	r2, r3
 8000758:	6a39      	ldr	r1, [r7, #32]
 800075a:	68f8      	ldr	r0, [r7, #12]
 800075c:	f006 fe48 	bl	80073f0 <strncat>
		strncat( pcWriteBuffer, "\r\n", strlen( "\r\n" ) );
 8000760:	68f8      	ldr	r0, [r7, #12]
 8000762:	f7ff fd65 	bl	8000230 <strlen>
 8000766:	4603      	mov	r3, r0
 8000768:	461a      	mov	r2, r3
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	4413      	add	r3, r2
 800076e:	4a10      	ldr	r2, [pc, #64]	; (80007b0 <prvThreeParameterEchoCommand+0xf8>)
 8000770:	8811      	ldrh	r1, [r2, #0]
 8000772:	7892      	ldrb	r2, [r2, #2]
 8000774:	8019      	strh	r1, [r3, #0]
 8000776:	709a      	strb	r2, [r3, #2]

		/* If this is the last of the three parameters then there are no more
		strings to return after this one. */
		if( uxParameterNumber == 3U )
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <prvThreeParameterEchoCommand+0xec>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b03      	cmp	r3, #3
 800077e:	d105      	bne.n	800078c <prvThreeParameterEchoCommand+0xd4>
		{
			/* If this is the last of the three parameters then there are no more
			strings to return after this one. */
			xReturn = pdFALSE;
 8000780:	2300      	movs	r3, #0
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
			uxParameterNumber = 0;
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <prvThreeParameterEchoCommand+0xec>)
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	e006      	b.n	800079a <prvThreeParameterEchoCommand+0xe2>
		}
		else
		{
			/* There are more parameters to return after this one. */
			xReturn = pdTRUE;
 800078c:	2301      	movs	r3, #1
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
			uxParameterNumber++;
 8000790:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <prvThreeParameterEchoCommand+0xec>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	3301      	adds	r3, #1
 8000796:	4a03      	ldr	r2, [pc, #12]	; (80007a4 <prvThreeParameterEchoCommand+0xec>)
 8000798:	6013      	str	r3, [r2, #0]
		}
	}

	return xReturn;
 800079a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800079c:	4618      	mov	r0, r3
 800079e:	3728      	adds	r7, #40	; 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bdb0      	pop	{r4, r5, r7, pc}
 80007a4:	20000614 	.word	0x20000614
 80007a8:	08008100 	.word	0x08008100
 80007ac:	08008120 	.word	0x08008120
 80007b0:	08008128 	.word	0x08008128

080007b4 <prvParameterEchoCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvParameterEchoCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80007b4:	b5b0      	push	{r4, r5, r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) pcCommandString;
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d109      	bne.n	80007da <prvParameterEchoCommand+0x26>
 80007c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007ca:	f383 8811 	msr	BASEPRI, r3
 80007ce:	f3bf 8f6f 	isb	sy
 80007d2:	f3bf 8f4f 	dsb	sy
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	e7fe      	b.n	80007d8 <prvParameterEchoCommand+0x24>

	if( uxParameterNumber == 0 )
 80007da:	4b2c      	ldr	r3, [pc, #176]	; (800088c <prvParameterEchoCommand+0xd8>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d115      	bne.n	800080e <prvParameterEchoCommand+0x5a>
	{
		/* The first time the function is called after the command has been
		entered just a header string is returned. */
		sprintf( pcWriteBuffer, "The parameters were:\r\n" );
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	4a2a      	ldr	r2, [pc, #168]	; (8000890 <prvParameterEchoCommand+0xdc>)
 80007e6:	461c      	mov	r4, r3
 80007e8:	4615      	mov	r5, r2
 80007ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ec:	6020      	str	r0, [r4, #0]
 80007ee:	6061      	str	r1, [r4, #4]
 80007f0:	60a2      	str	r2, [r4, #8]
 80007f2:	60e3      	str	r3, [r4, #12]
 80007f4:	6828      	ldr	r0, [r5, #0]
 80007f6:	6120      	str	r0, [r4, #16]
 80007f8:	88ab      	ldrh	r3, [r5, #4]
 80007fa:	79aa      	ldrb	r2, [r5, #6]
 80007fc:	82a3      	strh	r3, [r4, #20]
 80007fe:	4613      	mov	r3, r2
 8000800:	75a3      	strb	r3, [r4, #22]

		/* Next time the function is called the first parameter will be echoed
		back. */
		uxParameterNumber = 1U;
 8000802:	4b22      	ldr	r3, [pc, #136]	; (800088c <prvParameterEchoCommand+0xd8>)
 8000804:	2201      	movs	r2, #1
 8000806:	601a      	str	r2, [r3, #0]

		/* There is more data to be returned as no parameters have been echoed
		back yet. */
		xReturn = pdPASS;
 8000808:	2301      	movs	r3, #1
 800080a:	61fb      	str	r3, [r7, #28]
 800080c:	e039      	b.n	8000882 <prvParameterEchoCommand+0xce>
	}
	else
	{
		/* Obtain the parameter string. */
		pcParameter = FreeRTOS_CLIGetParameter
 800080e:	4b1f      	ldr	r3, [pc, #124]	; (800088c <prvParameterEchoCommand+0xd8>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f107 0210 	add.w	r2, r7, #16
 8000816:	4619      	mov	r1, r3
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff fde3 	bl	80003e4 <FreeRTOS_CLIGetParameter>
 800081e:	61b8      	str	r0, [r7, #24]
							pcCommandString,		/* The command string itself. */
							uxParameterNumber,		/* Return the next parameter. */
							&xParameterStringLength	/* Store the parameter string length. */
						);

		if( pcParameter != NULL )
 8000820:	69bb      	ldr	r3, [r7, #24]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d025      	beq.n	8000872 <prvParameterEchoCommand+0xbe>
		{
			/* Return the parameter string. */
			memset( pcWriteBuffer, 0x00, xWriteBufferLen );
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	2100      	movs	r1, #0
 800082a:	68f8      	ldr	r0, [r7, #12]
 800082c:	f006 fdaf 	bl	800738e <memset>
			sprintf( pcWriteBuffer, "%d: ", ( int ) uxParameterNumber );
 8000830:	4b16      	ldr	r3, [pc, #88]	; (800088c <prvParameterEchoCommand+0xd8>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4917      	ldr	r1, [pc, #92]	; (8000894 <prvParameterEchoCommand+0xe0>)
 8000838:	68f8      	ldr	r0, [r7, #12]
 800083a:	f006 fdb1 	bl	80073a0 <siprintf>
			strncat( pcWriteBuffer, ( char * ) pcParameter, ( size_t ) xParameterStringLength );
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	461a      	mov	r2, r3
 8000842:	69b9      	ldr	r1, [r7, #24]
 8000844:	68f8      	ldr	r0, [r7, #12]
 8000846:	f006 fdd3 	bl	80073f0 <strncat>
			strncat( pcWriteBuffer, "\r\n", strlen( "\r\n" ) );
 800084a:	68f8      	ldr	r0, [r7, #12]
 800084c:	f7ff fcf0 	bl	8000230 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	461a      	mov	r2, r3
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	4413      	add	r3, r2
 8000858:	4a0f      	ldr	r2, [pc, #60]	; (8000898 <prvParameterEchoCommand+0xe4>)
 800085a:	8811      	ldrh	r1, [r2, #0]
 800085c:	7892      	ldrb	r2, [r2, #2]
 800085e:	8019      	strh	r1, [r3, #0]
 8000860:	709a      	strb	r2, [r3, #2]

			/* There might be more parameters to return after this one. */
			xReturn = pdTRUE;
 8000862:	2301      	movs	r3, #1
 8000864:	61fb      	str	r3, [r7, #28]
			uxParameterNumber++;
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <prvParameterEchoCommand+0xd8>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	3301      	adds	r3, #1
 800086c:	4a07      	ldr	r2, [pc, #28]	; (800088c <prvParameterEchoCommand+0xd8>)
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	e007      	b.n	8000882 <prvParameterEchoCommand+0xce>
		}
		else
		{
			/* No more parameters were found.  Make sure the write buffer does
			not contain a valid string. */
			pcWriteBuffer[ 0 ] = 0x00;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	2200      	movs	r2, #0
 8000876:	701a      	strb	r2, [r3, #0]

			/* No more data to return. */
			xReturn = pdFALSE;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]

			/* Start over the next time this command is executed. */
			uxParameterNumber = 0;
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <prvParameterEchoCommand+0xd8>)
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
		}
	}

	return xReturn;
 8000882:	69fb      	ldr	r3, [r7, #28]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3720      	adds	r7, #32
 8000888:	46bd      	mov	sp, r7
 800088a:	bdb0      	pop	{r4, r5, r7, pc}
 800088c:	20000618 	.word	0x20000618
 8000890:	0800812c 	.word	0x0800812c
 8000894:	08008120 	.word	0x08008120
 8000898:	08008128 	.word	0x08008128

0800089c <prvDacCommand>:

/*-----------------------------------------------------------*/
extern int sendDataToDAC(int regNo, int dacArg);
int regNo = 0;
static BaseType_t prvDacCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 800089c:	b5b0      	push	{r4, r5, r7, lr}
 800089e:	b08c      	sub	sp, #48	; 0x30
 80008a0:	af02      	add	r7, sp, #8
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) pcCommandString;
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d109      	bne.n	80008c2 <prvDacCommand+0x26>
 80008ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008b2:	f383 8811 	msr	BASEPRI, r3
 80008b6:	f3bf 8f6f 	isb	sy
 80008ba:	f3bf 8f4f 	dsb	sy
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	e7fe      	b.n	80008c0 <prvDacCommand+0x24>

	if( uxParameterNumber == 0 )
 80008c2:	4b32      	ldr	r3, [pc, #200]	; (800098c <prvDacCommand+0xf0>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d115      	bne.n	80008f6 <prvDacCommand+0x5a>
	{
		/* The first time the function is called after the command has been
		entered just a header string is returned. */
		sprintf( pcWriteBuffer, "The parameters were:\r\n" );
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	4a30      	ldr	r2, [pc, #192]	; (8000990 <prvDacCommand+0xf4>)
 80008ce:	461c      	mov	r4, r3
 80008d0:	4615      	mov	r5, r2
 80008d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d4:	6020      	str	r0, [r4, #0]
 80008d6:	6061      	str	r1, [r4, #4]
 80008d8:	60a2      	str	r2, [r4, #8]
 80008da:	60e3      	str	r3, [r4, #12]
 80008dc:	6828      	ldr	r0, [r5, #0]
 80008de:	6120      	str	r0, [r4, #16]
 80008e0:	88ab      	ldrh	r3, [r5, #4]
 80008e2:	79aa      	ldrb	r2, [r5, #6]
 80008e4:	82a3      	strh	r3, [r4, #20]
 80008e6:	4613      	mov	r3, r2
 80008e8:	75a3      	strb	r3, [r4, #22]

		/* Next time the function is called the first parameter will be echoed
		back. */
		uxParameterNumber = 1U;
 80008ea:	4b28      	ldr	r3, [pc, #160]	; (800098c <prvDacCommand+0xf0>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	601a      	str	r2, [r3, #0]

		/* There is more data to be returned as no parameters have been echoed
		back yet. */
		xReturn = pdPASS;
 80008f0:	2301      	movs	r3, #1
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
 80008f4:	e045      	b.n	8000982 <prvDacCommand+0xe6>
	}
	else
	{
		/* Obtain the parameter string. */
		pcParameter = FreeRTOS_CLIGetParameter
 80008f6:	4b25      	ldr	r3, [pc, #148]	; (800098c <prvDacCommand+0xf0>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f107 0210 	add.w	r2, r7, #16
 80008fe:	4619      	mov	r1, r3
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff fd6f 	bl	80003e4 <FreeRTOS_CLIGetParameter>
 8000906:	6238      	str	r0, [r7, #32]
							&xParameterStringLength	/* Store the parameter string length. */
						);


		/* Return the parameter string. */
		memset( pcWriteBuffer, 0x00, xWriteBufferLen );
 8000908:	68ba      	ldr	r2, [r7, #8]
 800090a:	2100      	movs	r1, #0
 800090c:	68f8      	ldr	r0, [r7, #12]
 800090e:	f006 fd3e 	bl	800738e <memset>
		//sprintf( pcWriteBuffer, "%d: ", ( int ) uxParameterNumber );
		//strncat( pcWriteBuffer, ( char * ) pcParameter, ( size_t ) xParameterStringLength );
		int dacParam = atoi(pcParameter);
 8000912:	6a38      	ldr	r0, [r7, #32]
 8000914:	f006 fd02 	bl	800731c <atoi>
 8000918:	61f8      	str	r0, [r7, #28]
		if (uxParameterNumber == 1)
 800091a:	4b1c      	ldr	r3, [pc, #112]	; (800098c <prvDacCommand+0xf0>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d102      	bne.n	8000928 <prvDacCommand+0x8c>
		{
			regNo = dacParam;
 8000922:	4a1c      	ldr	r2, [pc, #112]	; (8000994 <prvDacCommand+0xf8>)
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	6013      	str	r3, [r2, #0]
		/*xReturn = pdTRUE;
		uxParameterNumber++;*/

		/* If this is the last of the three parameters then there are no more
				strings to return after this one. */
		if( uxParameterNumber == 2U )
 8000928:	4b18      	ldr	r3, [pc, #96]	; (800098c <prvDacCommand+0xf0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b02      	cmp	r3, #2
 800092e:	d121      	bne.n	8000974 <prvDacCommand+0xd8>
		{
			/* If this is the last of the three parameters then there are no more
					strings to return after this one. */
			int ret = sendDataToDAC(regNo, dacParam);
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <prvDacCommand+0xf8>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	69f9      	ldr	r1, [r7, #28]
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f90e 	bl	8000b58 <sendDataToDAC>
 800093c:	61b8      	str	r0, [r7, #24]
			sprintf( pcWriteBuffer, "reg : %d DAC : %d ret : %d", regNo, dacParam, ( int ) ret );
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <prvDacCommand+0xf8>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	4913      	ldr	r1, [pc, #76]	; (8000998 <prvDacCommand+0xfc>)
 800094a:	68f8      	ldr	r0, [r7, #12]
 800094c:	f006 fd28 	bl	80073a0 <siprintf>
			strncat( pcWriteBuffer, "\r\n", strlen( "\r\n" ) );
 8000950:	68f8      	ldr	r0, [r7, #12]
 8000952:	f7ff fc6d 	bl	8000230 <strlen>
 8000956:	4603      	mov	r3, r0
 8000958:	461a      	mov	r2, r3
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	4413      	add	r3, r2
 800095e:	4a0f      	ldr	r2, [pc, #60]	; (800099c <prvDacCommand+0x100>)
 8000960:	8811      	ldrh	r1, [r2, #0]
 8000962:	7892      	ldrb	r2, [r2, #2]
 8000964:	8019      	strh	r1, [r3, #0]
 8000966:	709a      	strb	r2, [r3, #2]
			xReturn = pdFALSE;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
			uxParameterNumber = 0;
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <prvDacCommand+0xf0>)
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	e006      	b.n	8000982 <prvDacCommand+0xe6>
		}
		else
		{
			/* There are more parameters to return after this one. */
			xReturn = pdTRUE;
 8000974:	2301      	movs	r3, #1
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
			uxParameterNumber++;
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <prvDacCommand+0xf0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	3301      	adds	r3, #1
 800097e:	4a03      	ldr	r2, [pc, #12]	; (800098c <prvDacCommand+0xf0>)
 8000980:	6013      	str	r3, [r2, #0]
		}
	}

	return xReturn;
 8000982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000984:	4618      	mov	r0, r3
 8000986:	3728      	adds	r7, #40	; 0x28
 8000988:	46bd      	mov	sp, r7
 800098a:	bdb0      	pop	{r4, r5, r7, pc}
 800098c:	2000061c 	.word	0x2000061c
 8000990:	0800812c 	.word	0x0800812c
 8000994:	20000610 	.word	0x20000610
 8000998:	08008144 	.word	0x08008144
 800099c:	08008128 	.word	0x08008128

080009a0 <prvUARTCommandConsoleTask>:
					NULL );						/* A handle is not required, so just pass NULL. */
}
/*-----------------------------------------------------------*/

void prvUARTCommandConsoleTask( void *pvParameters )
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	/* Create the semaphore used to access the UART Tx. */
		xTxMutex = xSemaphoreCreateMutex();
 80009a8:	2001      	movs	r0, #1
 80009aa:	f003 fde1 	bl	8004570 <xQueueCreateMutex>
 80009ae:	4602      	mov	r2, r0
 80009b0:	4b58      	ldr	r3, [pc, #352]	; (8000b14 <prvUARTCommandConsoleTask+0x174>)
 80009b2:	601a      	str	r2, [r3, #0]
		configASSERT( xTxMutex );
 80009b4:	4b57      	ldr	r3, [pc, #348]	; (8000b14 <prvUARTCommandConsoleTask+0x174>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d109      	bne.n	80009d0 <prvUARTCommandConsoleTask+0x30>
 80009bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009c0:	f383 8811 	msr	BASEPRI, r3
 80009c4:	f3bf 8f6f 	isb	sy
 80009c8:	f3bf 8f4f 	dsb	sy
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	e7fe      	b.n	80009ce <prvUARTCommandConsoleTask+0x2e>
signed char cRxedChar;
uint8_t ucInputIndex = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	77fb      	strb	r3, [r7, #31]
	( void ) pvParameters;

	/* Obtain the address of the output buffer.  Note there is no mutual
	exclusion on this buffer as it is assumed only one command console interface
	will be used at any one time. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 80009d4:	f7ff fcfc 	bl	80003d0 <FreeRTOS_CLIGetOutputBuffer>
 80009d8:	61b8      	str	r0, [r7, #24]

	/* Initialise the UART. */
	xPort = xSerialPortInitMinimal( configCLI_BAUD_RATE, cmdQUEUE_LENGTH );
 80009da:	2119      	movs	r1, #25
 80009dc:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80009e0:	f000 fa5a 	bl	8000e98 <xSerialPortInitMinimal>
 80009e4:	6178      	str	r0, [r7, #20]

	/* Send the welcome message. */
	vSerialPutString( xPort, ( signed char * ) pcWelcomeMessage, ( unsigned short ) strlen( pcWelcomeMessage ) );
 80009e6:	494c      	ldr	r1, [pc, #304]	; (8000b18 <prvUARTCommandConsoleTask+0x178>)
 80009e8:	234f      	movs	r3, #79	; 0x4f
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	461a      	mov	r2, r3
 80009ee:	6978      	ldr	r0, [r7, #20]
 80009f0:	f000 faa0 	bl	8000f34 <vSerialPutString>
	vRegisterSampleCLICommands();
 80009f4:	f7ff fdae 	bl	8000554 <vRegisterSampleCLICommands>
	for( ;; )
	{
		/* Wait for the next character.  The while loop is used in case
		INCLUDE_vTaskSuspend is not set to 1 - in which case portMAX_DELAY will
		be a genuine block time rather than an infinite block time. */
		while( xSerialGetChar( xPort, &cRxedChar, portMAX_DELAY ) != pdPASS );
 80009f8:	bf00      	nop
 80009fa:	f107 030b 	add.w	r3, r7, #11
 80009fe:	f04f 32ff 	mov.w	r2, #4294967295
 8000a02:	4619      	mov	r1, r3
 8000a04:	6978      	ldr	r0, [r7, #20]
 8000a06:	f000 fa7b 	bl	8000f00 <xSerialGetChar>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d1f4      	bne.n	80009fa <prvUARTCommandConsoleTask+0x5a>

		/* Ensure exclusive access to the UART Tx. */
		if( xSemaphoreTake( xTxMutex, cmdMAX_MUTEX_WAIT ) == pdPASS )
 8000a10:	4b40      	ldr	r3, [pc, #256]	; (8000b14 <prvUARTCommandConsoleTask+0x174>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f004 f82b 	bl	8004a74 <xQueueSemaphoreTake>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d1e9      	bne.n	80009f8 <prvUARTCommandConsoleTask+0x58>
		{
			/* Echo the character back. */
			xSerialPutChar( xPort, cRxedChar, portMAX_DELAY );
 8000a24:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000a28:	f04f 32ff 	mov.w	r2, #4294967295
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	6978      	ldr	r0, [r7, #20]
 8000a30:	f000 fa9e 	bl	8000f70 <xSerialPutChar>

			/* Was it the end of the line? */
			if( cRxedChar == '\n' || cRxedChar == '\r' )
 8000a34:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000a38:	2b0a      	cmp	r3, #10
 8000a3a:	d003      	beq.n	8000a44 <prvUARTCommandConsoleTask+0xa4>
 8000a3c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000a40:	2b0d      	cmp	r3, #13
 8000a42:	d134      	bne.n	8000aae <prvUARTCommandConsoleTask+0x10e>
			{
				/* Just to space the output from the input. */
				vSerialPutString( xPort, ( signed char * ) pcNewLine, ( unsigned short ) strlen( pcNewLine ) );
 8000a44:	4935      	ldr	r1, [pc, #212]	; (8000b1c <prvUARTCommandConsoleTask+0x17c>)
 8000a46:	2302      	movs	r3, #2
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	6978      	ldr	r0, [r7, #20]
 8000a4e:	f000 fa71 	bl	8000f34 <vSerialPutString>

				/* See if the command is empty, indicating that the last command
				is to be executed again. */
				if( ucInputIndex == 0 )
 8000a52:	7ffb      	ldrb	r3, [r7, #31]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d103      	bne.n	8000a60 <prvUARTCommandConsoleTask+0xc0>
				{
					/* Copy the last command back into the input string. */
					strcpy( cInputString, cLastInputString );
 8000a58:	4931      	ldr	r1, [pc, #196]	; (8000b20 <prvUARTCommandConsoleTask+0x180>)
 8000a5a:	4832      	ldr	r0, [pc, #200]	; (8000b24 <prvUARTCommandConsoleTask+0x184>)
 8000a5c:	f006 fcc0 	bl	80073e0 <strcpy>
				pdFALSE	(indicating there is no more output) as it might
				generate more than one string. */
				do
				{
					/* Get the next output string from the command interpreter. */
					xReturned = FreeRTOS_CLIProcessCommand( cInputString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );
 8000a60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a64:	69b9      	ldr	r1, [r7, #24]
 8000a66:	482f      	ldr	r0, [pc, #188]	; (8000b24 <prvUARTCommandConsoleTask+0x184>)
 8000a68:	f7ff fc2c 	bl	80002c4 <FreeRTOS_CLIProcessCommand>
 8000a6c:	6138      	str	r0, [r7, #16]

					/* Write the generated string to the UART. */
					vSerialPutString( xPort, ( signed char * ) pcOutputString, ( unsigned short ) strlen( pcOutputString ) );
 8000a6e:	69b8      	ldr	r0, [r7, #24]
 8000a70:	f7ff fbde 	bl	8000230 <strlen>
 8000a74:	4603      	mov	r3, r0
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	461a      	mov	r2, r3
 8000a7a:	69b9      	ldr	r1, [r7, #24]
 8000a7c:	6978      	ldr	r0, [r7, #20]
 8000a7e:	f000 fa59 	bl	8000f34 <vSerialPutString>

				} while( xReturned != pdFALSE );
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d1eb      	bne.n	8000a60 <prvUARTCommandConsoleTask+0xc0>

				/* All the strings generated by the input command have been
				sent.  Clear the input string ready to receive the next command.
				Remember the command that was just processed first in case it is
				to be processed again. */
				strcpy( cLastInputString, cInputString );
 8000a88:	4926      	ldr	r1, [pc, #152]	; (8000b24 <prvUARTCommandConsoleTask+0x184>)
 8000a8a:	4825      	ldr	r0, [pc, #148]	; (8000b20 <prvUARTCommandConsoleTask+0x180>)
 8000a8c:	f006 fca8 	bl	80073e0 <strcpy>
				ucInputIndex = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	77fb      	strb	r3, [r7, #31]
				memset( cInputString, 0x00, cmdMAX_INPUT_SIZE );
 8000a94:	2232      	movs	r2, #50	; 0x32
 8000a96:	2100      	movs	r1, #0
 8000a98:	4822      	ldr	r0, [pc, #136]	; (8000b24 <prvUARTCommandConsoleTask+0x184>)
 8000a9a:	f006 fc78 	bl	800738e <memset>

				vSerialPutString( xPort, ( signed char * ) pcEndOfOutputMessage, ( unsigned short ) strlen( pcEndOfOutputMessage ) );
 8000a9e:	4922      	ldr	r1, [pc, #136]	; (8000b28 <prvUARTCommandConsoleTask+0x188>)
 8000aa0:	2338      	movs	r3, #56	; 0x38
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	6978      	ldr	r0, [r7, #20]
 8000aa8:	f000 fa44 	bl	8000f34 <vSerialPutString>
 8000aac:	e02a      	b.n	8000b04 <prvUARTCommandConsoleTask+0x164>
			}
			else
			{
				if( cRxedChar == '\r' )
 8000aae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000ab2:	2b0d      	cmp	r3, #13
 8000ab4:	d026      	beq.n	8000b04 <prvUARTCommandConsoleTask+0x164>
				{
					/* Ignore the character. */
				}
				else if( ( cRxedChar == '\b' ) || ( cRxedChar == cmdASCII_DEL ) )
 8000ab6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000aba:	2b08      	cmp	r3, #8
 8000abc:	d003      	beq.n	8000ac6 <prvUARTCommandConsoleTask+0x126>
 8000abe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000ac2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ac4:	d10a      	bne.n	8000adc <prvUARTCommandConsoleTask+0x13c>
				{
					/* Backspace was pressed.  Erase the last character in the
					string - if any. */
					if( ucInputIndex > 0 )
 8000ac6:	7ffb      	ldrb	r3, [r7, #31]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d01b      	beq.n	8000b04 <prvUARTCommandConsoleTask+0x164>
					{
						ucInputIndex--;
 8000acc:	7ffb      	ldrb	r3, [r7, #31]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	77fb      	strb	r3, [r7, #31]
						cInputString[ ucInputIndex ] = '\0';
 8000ad2:	7ffb      	ldrb	r3, [r7, #31]
 8000ad4:	4a13      	ldr	r2, [pc, #76]	; (8000b24 <prvUARTCommandConsoleTask+0x184>)
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	54d1      	strb	r1, [r2, r3]
					if( ucInputIndex > 0 )
 8000ada:	e013      	b.n	8000b04 <prvUARTCommandConsoleTask+0x164>
				else
				{
					/* A character was entered.  Add it to the string entered so
					far.  When a \n is entered the complete	string will be
					passed to the command interpreter. */
					if( ( cRxedChar >= ' ' ) && ( cRxedChar <= '~' ) )
 8000adc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000ae0:	2b1f      	cmp	r3, #31
 8000ae2:	dd0f      	ble.n	8000b04 <prvUARTCommandConsoleTask+0x164>
 8000ae4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000ae8:	2b7f      	cmp	r3, #127	; 0x7f
 8000aea:	d00b      	beq.n	8000b04 <prvUARTCommandConsoleTask+0x164>
					{
						if( ucInputIndex < cmdMAX_INPUT_SIZE )
 8000aec:	7ffb      	ldrb	r3, [r7, #31]
 8000aee:	2b31      	cmp	r3, #49	; 0x31
 8000af0:	d808      	bhi.n	8000b04 <prvUARTCommandConsoleTask+0x164>
						{
							cInputString[ ucInputIndex ] = cRxedChar;
 8000af2:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8000af6:	7ffb      	ldrb	r3, [r7, #31]
 8000af8:	b2d1      	uxtb	r1, r2
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <prvUARTCommandConsoleTask+0x184>)
 8000afc:	54d1      	strb	r1, [r2, r3]
							ucInputIndex++;
 8000afe:	7ffb      	ldrb	r3, [r7, #31]
 8000b00:	3301      	adds	r3, #1
 8000b02:	77fb      	strb	r3, [r7, #31]
					}
				}
			}

			/* Must ensure to give the mutex back. */
			xSemaphoreGive( xTxMutex );
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <prvUARTCommandConsoleTask+0x174>)
 8000b06:	6818      	ldr	r0, [r3, #0]
 8000b08:	2300      	movs	r3, #0
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	f003 fd47 	bl	80045a0 <xQueueGenericSend>
		while( xSerialGetChar( xPort, &cRxedChar, portMAX_DELAY ) != pdPASS );
 8000b12:	e771      	b.n	80009f8 <prvUARTCommandConsoleTask+0x58>
 8000b14:	20000620 	.word	0x20000620
 8000b18:	08008160 	.word	0x08008160
 8000b1c:	080081ec 	.word	0x080081ec
 8000b20:	20000658 	.word	0x20000658
 8000b24:	20000624 	.word	0x20000624
 8000b28:	080081b0 	.word	0x080081b0

08000b2c <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
return 0;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr

08000b46 <cli_task_>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern void prvUARTCommandConsoleTask(void *pvParamteres);

void cli_task_(void *arg)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		prvUARTCommandConsoleTask(NULL);
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f7ff ff26 	bl	80009a0 <prvUARTCommandConsoleTask>
 8000b54:	e7fb      	b.n	8000b4e <cli_task_+0x8>
	...

08000b58 <sendDataToDAC>:
#define REG_OUT_1 	0xF9
#define REG_OUT_2 	0xFA
#define REG_OUT_3 	0xFB

int sendDataToDAC(int regNo, int dacArg)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af02      	add	r7, sp, #8
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
	int writeReg = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
	if (regNo == 0)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d107      	bne.n	8000b7c <sendDataToDAC+0x24>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2101      	movs	r1, #1
 8000b70:	4833      	ldr	r0, [pc, #204]	; (8000c40 <sendDataToDAC+0xe8>)
 8000b72:	f000 ffc9 	bl	8001b08 <HAL_GPIO_WritePin>
		writeReg = REG_OUT_0;
 8000b76:	23f8      	movs	r3, #248	; 0xf8
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	e024      	b.n	8000bc6 <sendDataToDAC+0x6e>
	}
	else if (regNo == 1)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d107      	bne.n	8000b92 <sendDataToDAC+0x3a>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);
 8000b82:	2201      	movs	r2, #1
 8000b84:	2120      	movs	r1, #32
 8000b86:	482f      	ldr	r0, [pc, #188]	; (8000c44 <sendDataToDAC+0xec>)
 8000b88:	f000 ffbe 	bl	8001b08 <HAL_GPIO_WritePin>
		writeReg = REG_OUT_1;
 8000b8c:	23f9      	movs	r3, #249	; 0xf9
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	e019      	b.n	8000bc6 <sendDataToDAC+0x6e>
	}
	else if (regNo == 2)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d107      	bne.n	8000ba8 <sendDataToDAC+0x50>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2110      	movs	r1, #16
 8000b9c:	4829      	ldr	r0, [pc, #164]	; (8000c44 <sendDataToDAC+0xec>)
 8000b9e:	f000 ffb3 	bl	8001b08 <HAL_GPIO_WritePin>
		writeReg = REG_OUT_2;
 8000ba2:	23fa      	movs	r3, #250	; 0xfa
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	e00e      	b.n	8000bc6 <sendDataToDAC+0x6e>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2101      	movs	r1, #1
 8000bac:	4824      	ldr	r0, [pc, #144]	; (8000c40 <sendDataToDAC+0xe8>)
 8000bae:	f000 ffab 	bl	8001b08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2110      	movs	r1, #16
 8000bb6:	4823      	ldr	r0, [pc, #140]	; (8000c44 <sendDataToDAC+0xec>)
 8000bb8:	f000 ffa6 	bl	8001b08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2120      	movs	r1, #32
 8000bc0:	4820      	ldr	r0, [pc, #128]	; (8000c44 <sendDataToDAC+0xec>)
 8000bc2:	f000 ffa1 	bl	8001b08 <HAL_GPIO_WritePin>
	}

	if (HAL_I2C_IsDeviceReady(&hi2c1, 32, 3, 1000) == HAL_OK)
 8000bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bca:	2203      	movs	r2, #3
 8000bcc:	2120      	movs	r1, #32
 8000bce:	481e      	ldr	r0, [pc, #120]	; (8000c48 <sendDataToDAC+0xf0>)
 8000bd0:	f001 fc42 	bl	8002458 <HAL_I2C_IsDeviceReady>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d12d      	bne.n	8000c36 <sendDataToDAC+0xde>
	{
		uint8_t cmd[2] = {writeReg, dacArg};
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	743b      	strb	r3, [r7, #16]
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(&hi2c1, 32, cmd, 2, 1000);
 8000be6:	f107 0210 	add.w	r2, r7, #16
 8000bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bee:	9300      	str	r3, [sp, #0]
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	2120      	movs	r1, #32
 8000bf4:	4814      	ldr	r0, [pc, #80]	; (8000c48 <sendDataToDAC+0xf0>)
 8000bf6:	f001 f8d7 	bl	8001da8 <HAL_I2C_Master_Transmit>

		//HAL_Delay(100);
		uint8_t buf= 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Master_Transmit(&hi2c1, 32, writeReg, 1, 1000);
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	2301      	movs	r3, #1
 8000c08:	2120      	movs	r1, #32
 8000c0a:	480f      	ldr	r0, [pc, #60]	; (8000c48 <sendDataToDAC+0xf0>)
 8000c0c:	f001 f8cc 	bl	8001da8 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, 33, &buf, 1, 1000);
 8000c10:	f107 020f 	add.w	r2, r7, #15
 8000c14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	2121      	movs	r1, #33	; 0x21
 8000c1e:	480a      	ldr	r0, [pc, #40]	; (8000c48 <sendDataToDAC+0xf0>)
 8000c20:	f001 f9c0 	bl	8001fa4 <HAL_I2C_Master_Receive>

		if (buf == dacArg)
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	461a      	mov	r2, r3
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d101      	bne.n	8000c32 <sendDataToDAC+0xda>
			return 2;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	e002      	b.n	8000c38 <sendDataToDAC+0xe0>
		else
			return 1;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e000      	b.n	8000c38 <sendDataToDAC+0xe0>
	}
	else
	{
		return 0;
 8000c36:	2300      	movs	r3, #0
	}

}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40010c00 	.word	0x40010c00
 8000c44:	40011000 	.word	0x40011000
 8000c48:	20001fbc 	.word	0x20001fbc

08000c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c50:	f000 fb3e 	bl	80012d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c54:	f000 f822 	bl	8000c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c58:	f000 f8b4 	bl	8000dc4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c5c:	f000 f85a 	bl	8000d14 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000c60:	f000 f886 	bl	8000d70 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c64:	f003 f910 	bl	8003e88 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c68:	4a07      	ldr	r2, [pc, #28]	; (8000c88 <main+0x3c>)
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4807      	ldr	r0, [pc, #28]	; (8000c8c <main+0x40>)
 8000c6e:	f003 f971 	bl	8003f54 <osThreadNew>
 8000c72:	4602      	mov	r2, r0
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <main+0x44>)
 8000c76:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadNew(cli_task_, NULL, &cli_task_attributes);
 8000c78:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <main+0x48>)
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4806      	ldr	r0, [pc, #24]	; (8000c98 <main+0x4c>)
 8000c7e:	f003 f969 	bl	8003f54 <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c82:	f003 f933 	bl	8003eec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <main+0x3a>
 8000c88:	080082c0 	.word	0x080082c0
 8000c8c:	08000e81 	.word	0x08000e81
 8000c90:	20001fb8 	.word	0x20001fb8
 8000c94:	080082e4 	.word	0x080082e4
 8000c98:	08000b47 	.word	0x08000b47

08000c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b090      	sub	sp, #64	; 0x40
 8000ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca2:	f107 0318 	add.w	r3, r7, #24
 8000ca6:	2228      	movs	r2, #40	; 0x28
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f006 fb6f 	bl	800738e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc6:	2310      	movs	r3, #16
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cce:	f107 0318 	add.w	r3, r7, #24
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f002 f81a 	bl	8002d0c <HAL_RCC_OscConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cde:	f000 f8d7 	bl	8000e90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 fa86 	bl	800320c <HAL_RCC_ClockConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d06:	f000 f8c3 	bl	8000e90 <Error_Handler>
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	3740      	adds	r7, #64	; 0x40
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d1a:	4a13      	ldr	r2, [pc, #76]	; (8000d68 <MX_I2C1_Init+0x54>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d20:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <MX_I2C1_Init+0x58>)
 8000d22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d50:	4804      	ldr	r0, [pc, #16]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d52:	f000 fef1 	bl	8001b38 <HAL_I2C_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d5c:	f000 f898 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20001fbc 	.word	0x20001fbc
 8000d68:	40005400 	.word	0x40005400
 8000d6c:	000186a0 	.word	0x000186a0

08000d70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d76:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <MX_USART1_UART_Init+0x50>)
 8000d78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d96:	220c      	movs	r2, #12
 8000d98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000da8:	f002 fbcc 	bl	8003544 <HAL_UART_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000db2:	f000 f86d 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20002010 	.word	0x20002010
 8000dc0:	40013800 	.word	0x40013800

08000dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dca:	f107 0310 	add.w	r3, r7, #16
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd8:	4b26      	ldr	r3, [pc, #152]	; (8000e74 <MX_GPIO_Init+0xb0>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a25      	ldr	r2, [pc, #148]	; (8000e74 <MX_GPIO_Init+0xb0>)
 8000dde:	f043 0310 	orr.w	r3, r3, #16
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <MX_GPIO_Init+0xb0>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0310 	and.w	r3, r3, #16
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df0:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <MX_GPIO_Init+0xb0>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a1f      	ldr	r2, [pc, #124]	; (8000e74 <MX_GPIO_Init+0xb0>)
 8000df6:	f043 0308 	orr.w	r3, r3, #8
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <MX_GPIO_Init+0xb0>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0308 	and.w	r3, r3, #8
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e08:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <MX_GPIO_Init+0xb0>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a19      	ldr	r2, [pc, #100]	; (8000e74 <MX_GPIO_Init+0xb0>)
 8000e0e:	f043 0304 	orr.w	r3, r3, #4
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <MX_GPIO_Init+0xb0>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f003 0304 	and.w	r3, r3, #4
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 8000e20:	2201      	movs	r2, #1
 8000e22:	2130      	movs	r1, #48	; 0x30
 8000e24:	4814      	ldr	r0, [pc, #80]	; (8000e78 <MX_GPIO_Init+0xb4>)
 8000e26:	f000 fe6f 	bl	8001b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	4813      	ldr	r0, [pc, #76]	; (8000e7c <MX_GPIO_Init+0xb8>)
 8000e30:	f000 fe6a 	bl	8001b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e34:	2330      	movs	r3, #48	; 0x30
 8000e36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2302      	movs	r3, #2
 8000e42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	4619      	mov	r1, r3
 8000e4a:	480b      	ldr	r0, [pc, #44]	; (8000e78 <MX_GPIO_Init+0xb4>)
 8000e4c:	f000 fcf2 	bl	8001834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e50:	2301      	movs	r3, #1
 8000e52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e54:	2301      	movs	r3, #1
 8000e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	4619      	mov	r1, r3
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_GPIO_Init+0xb8>)
 8000e68:	f000 fce4 	bl	8001834 <HAL_GPIO_Init>

}
 8000e6c:	bf00      	nop
 8000e6e:	3720      	adds	r7, #32
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40011000 	.word	0x40011000
 8000e7c:	40010c00 	.word	0x40010c00

08000e80 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f003 f90d 	bl	80040a8 <osDelay>
 8000e8e:	e7fb      	b.n	8000e88 <StartDefaultTask+0x8>

08000e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e94:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <Error_Handler+0x6>

08000e98 <xSerialPortInitMinimal>:

/*
 * See the serial2.h header file.
 */
xComPortHandle xSerialPortInitMinimal( unsigned long ulWantedBaud, unsigned portBASE_TYPE uxQueueLength )
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
xComPortHandle xReturn;

	/* Create the queues used to hold Rx/Tx characters. */
	xRxedChars = xQueueCreate( uxQueueLength, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	6838      	ldr	r0, [r7, #0]
 8000ea8:	f003 fae8 	bl	800447c <xQueueGenericCreate>
 8000eac:	4602      	mov	r2, r0
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <xSerialPortInitMinimal+0x58>)
 8000eb0:	601a      	str	r2, [r3, #0]
	xCharsForTx = xQueueCreate( uxQueueLength + 1, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2101      	movs	r1, #1
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f003 fade 	bl	800447c <xQueueGenericCreate>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <xSerialPortInitMinimal+0x5c>)
 8000ec4:	601a      	str	r2, [r3, #0]
	
	/* If the queue/semaphore was created correctly then setup the serial port
	hardware. */
	if( ( xRxedChars != serINVALID_QUEUE ) && ( xCharsForTx != serINVALID_QUEUE ) )
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <xSerialPortInitMinimal+0x58>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d009      	beq.n	8000ee2 <xSerialPortInitMinimal+0x4a>
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <xSerialPortInitMinimal+0x5c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d005      	beq.n	8000ee2 <xSerialPortInitMinimal+0x4a>
	{
		HAL_UART_Receive_IT(&huart1, &aRxBuffer, 1);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4907      	ldr	r1, [pc, #28]	; (8000ef8 <xSerialPortInitMinimal+0x60>)
 8000eda:	4808      	ldr	r0, [pc, #32]	; (8000efc <xSerialPortInitMinimal+0x64>)
 8000edc:	f002 fbc3 	bl	8003666 <HAL_UART_Receive_IT>
 8000ee0:	e001      	b.n	8000ee6 <xSerialPortInitMinimal+0x4e>
	}
	else
	{
		xReturn = ( xComPortHandle ) 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
	}

	/* This demo file only supports a single port but we have to return
	something to comply with the standard demo header file. */
	return xReturn;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	2000068c 	.word	0x2000068c
 8000ef4:	20000690 	.word	0x20000690
 8000ef8:	20002054 	.word	0x20002054
 8000efc:	20002010 	.word	0x20002010

08000f00 <xSerialGetChar>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xSerialGetChar( xComPortHandle pxPort, signed char *pcRxedChar, TickType_t xBlockTime )
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
	/* The port handle is not required as this driver only supports one port. */
	( void ) pxPort;

	/* Get the next character from the buffer.  Return false if no characters
	are available, or arrive before xBlockTime expires. */
	if( xQueueReceive( xRxedChars, pcRxedChar, xBlockTime ) )
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <xSerialGetChar+0x30>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	68b9      	ldr	r1, [r7, #8]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f003 fcd1 	bl	80048bc <xQueueReceive>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <xSerialGetChar+0x24>
	{
		return pdTRUE;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e000      	b.n	8000f26 <xSerialGetChar+0x26>
	}
	else
	{
		return pdFALSE;
 8000f24:	2300      	movs	r3, #0
	}
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2000068c 	.word	0x2000068c

08000f34 <vSerialPutString>:
/*-----------------------------------------------------------*/

void vSerialPutString( xComPortHandle pxPort, const signed char * const pcString, unsigned short usStringLength )
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	80fb      	strh	r3, [r7, #6]

	/* The port handle is not required as this driver only supports UART1. */
	( void ) pxPort;

	/* Send each character in the string, one at a time. */
	pxNext = ( signed char * ) pcString;
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	617b      	str	r3, [r7, #20]
	while( *pxNext )
 8000f46:	e00a      	b.n	8000f5e <vSerialPutString+0x2a>
	{
		xSerialPutChar( pxPort, *pxNext, serNO_BLOCK );
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f993 3000 	ldrsb.w	r3, [r3]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4619      	mov	r1, r3
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	f000 f80c 	bl	8000f70 <xSerialPutChar>
		pxNext++;
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	617b      	str	r3, [r7, #20]
	while( *pxNext )
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	f993 3000 	ldrsb.w	r3, [r3]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1ef      	bne.n	8000f48 <vSerialPutString+0x14>
	}
}
 8000f68:	bf00      	nop
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <xSerialPutChar>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xSerialPutChar( xComPortHandle pxPort, signed char cOutChar, TickType_t xBlockTime )
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	72fb      	strb	r3, [r7, #11]
signed portBASE_TYPE xReturn;

	if( xQueueSend( xCharsForTx, &cOutChar, xBlockTime ) == pdPASS )
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <xSerialPutChar+0x64>)
 8000f80:	6818      	ldr	r0, [r3, #0]
 8000f82:	f107 010b 	add.w	r1, r7, #11
 8000f86:	2300      	movs	r3, #0
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	f003 fb09 	bl	80045a0 <xQueueGenericSend>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d118      	bne.n	8000fc6 <xSerialPutChar+0x56>
	{
		xReturn = pdPASS;
 8000f94:	2301      	movs	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
		uint8_t cChar;
		if (xQueueReceive(xCharsForTx, &cChar, 9) == pdTRUE)
 8000f98:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <xSerialPutChar+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f107 0113 	add.w	r1, r7, #19
 8000fa0:	2209      	movs	r2, #9
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f003 fc8a 	bl	80048bc <xQueueReceive>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d10d      	bne.n	8000fca <xSerialPutChar+0x5a>
		{
			while(HAL_UART_Transmit_IT(&huart1, &cChar, 1) != HAL_OK);
 8000fae:	bf00      	nop
 8000fb0:	f107 0313 	add.w	r3, r7, #19
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <xSerialPutChar+0x68>)
 8000fba:	f002 fb10 	bl	80035de <HAL_UART_Transmit_IT>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1f5      	bne.n	8000fb0 <xSerialPutChar+0x40>
 8000fc4:	e001      	b.n	8000fca <xSerialPutChar+0x5a>
		}
	}
	else
	{
		xReturn = pdFAIL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8000fca:	697b      	ldr	r3, [r7, #20]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000690 	.word	0x20000690
 8000fd8:	20002010 	.word	0x20002010

08000fdc <HAL_UART_RxCpltCallback>:
	/* Not supported as not required by the demo application. */
}
/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <HAL_UART_RxCpltCallback+0x38>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d10e      	bne.n	800100c <HAL_UART_RxCpltCallback+0x30>
	{
		portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
		xQueueSendFromISR(xRxedChars, &aRxBuffer, &xHigherPriorityTaskWoken);
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <HAL_UART_RxCpltCallback+0x3c>)
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	f107 020c 	add.w	r2, r7, #12
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	4907      	ldr	r1, [pc, #28]	; (800101c <HAL_UART_RxCpltCallback+0x40>)
 8000ffe:	f003 fbc9 	bl	8004794 <xQueueGenericSendFromISR>

		HAL_UART_Receive_IT(huart, &aRxBuffer, 1);
 8001002:	2201      	movs	r2, #1
 8001004:	4905      	ldr	r1, [pc, #20]	; (800101c <HAL_UART_RxCpltCallback+0x40>)
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f002 fb2d 	bl	8003666 <HAL_UART_Receive_IT>
	}
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40013800 	.word	0x40013800
 8001018:	2000068c 	.word	0x2000068c
 800101c:	20002054 	.word	0x20002054

08001020 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <HAL_MspInit+0x68>)
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	4a17      	ldr	r2, [pc, #92]	; (8001088 <HAL_MspInit+0x68>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6193      	str	r3, [r2, #24]
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_MspInit+0x68>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_MspInit+0x68>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	4a11      	ldr	r2, [pc, #68]	; (8001088 <HAL_MspInit+0x68>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001048:	61d3      	str	r3, [r2, #28]
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <HAL_MspInit+0x68>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	210f      	movs	r1, #15
 800105a:	f06f 0001 	mvn.w	r0, #1
 800105e:	f000 fa70 	bl	8001542 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_MspInit+0x6c>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	4a04      	ldr	r2, [pc, #16]	; (800108c <HAL_MspInit+0x6c>)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000
 800108c:	40010000 	.word	0x40010000

08001090 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a15      	ldr	r2, [pc, #84]	; (8001100 <HAL_I2C_MspInit+0x70>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d123      	bne.n	80010f8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <HAL_I2C_MspInit+0x74>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a13      	ldr	r2, [pc, #76]	; (8001104 <HAL_I2C_MspInit+0x74>)
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_I2C_MspInit+0x74>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010c8:	23c0      	movs	r3, #192	; 0xc0
 80010ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010cc:	2312      	movs	r3, #18
 80010ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	4619      	mov	r1, r3
 80010da:	480b      	ldr	r0, [pc, #44]	; (8001108 <HAL_I2C_MspInit+0x78>)
 80010dc:	f000 fbaa 	bl	8001834 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_I2C_MspInit+0x74>)
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	4a07      	ldr	r2, [pc, #28]	; (8001104 <HAL_I2C_MspInit+0x74>)
 80010e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ea:	61d3      	str	r3, [r2, #28]
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <HAL_I2C_MspInit+0x74>)
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010f8:	bf00      	nop
 80010fa:	3720      	adds	r7, #32
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40005400 	.word	0x40005400
 8001104:	40021000 	.word	0x40021000
 8001108:	40010c00 	.word	0x40010c00

0800110c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a20      	ldr	r2, [pc, #128]	; (80011a8 <HAL_UART_MspInit+0x9c>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d139      	bne.n	80011a0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800112c:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <HAL_UART_MspInit+0xa0>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4a1e      	ldr	r2, [pc, #120]	; (80011ac <HAL_UART_MspInit+0xa0>)
 8001132:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <HAL_UART_MspInit+0xa0>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	4b19      	ldr	r3, [pc, #100]	; (80011ac <HAL_UART_MspInit+0xa0>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	4a18      	ldr	r2, [pc, #96]	; (80011ac <HAL_UART_MspInit+0xa0>)
 800114a:	f043 0304 	orr.w	r3, r3, #4
 800114e:	6193      	str	r3, [r2, #24]
 8001150:	4b16      	ldr	r3, [pc, #88]	; (80011ac <HAL_UART_MspInit+0xa0>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800115c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001160:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 0310 	add.w	r3, r7, #16
 800116e:	4619      	mov	r1, r3
 8001170:	480f      	ldr	r0, [pc, #60]	; (80011b0 <HAL_UART_MspInit+0xa4>)
 8001172:	f000 fb5f 	bl	8001834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800117a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	4619      	mov	r1, r3
 800118a:	4809      	ldr	r0, [pc, #36]	; (80011b0 <HAL_UART_MspInit+0xa4>)
 800118c:	f000 fb52 	bl	8001834 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001190:	2200      	movs	r2, #0
 8001192:	2105      	movs	r1, #5
 8001194:	2025      	movs	r0, #37	; 0x25
 8001196:	f000 f9d4 	bl	8001542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800119a:	2025      	movs	r0, #37	; 0x25
 800119c:	f000 f9ed 	bl	800157a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011a0:	bf00      	nop
 80011a2:	3720      	adds	r7, #32
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40013800 	.word	0x40013800
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010800 	.word	0x40010800

080011b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <NMI_Handler+0x4>

080011ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <HardFault_Handler+0x4>

080011c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <MemManage_Handler+0x4>

080011c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <BusFault_Handler+0x4>

080011cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <UsageFault_Handler+0x4>

080011d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr

080011de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e2:	f000 f8bb 	bl	800135c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80011e6:	f004 feb5 	bl	8005f54 <xTaskGetSchedulerState>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d001      	beq.n	80011f4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80011f0:	f005 fe42 	bl	8006e78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <USART1_IRQHandler+0x10>)
 80011fe:	f002 fa63 	bl	80036c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20002010 	.word	0x20002010

0800120c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001214:	4a14      	ldr	r2, [pc, #80]	; (8001268 <_sbrk+0x5c>)
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <_sbrk+0x60>)
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001220:	4b13      	ldr	r3, [pc, #76]	; (8001270 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d102      	bne.n	800122e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <_sbrk+0x64>)
 800122a:	4a12      	ldr	r2, [pc, #72]	; (8001274 <_sbrk+0x68>)
 800122c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	429a      	cmp	r2, r3
 800123a:	d207      	bcs.n	800124c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800123c:	f006 f872 	bl	8007324 <__errno>
 8001240:	4602      	mov	r2, r0
 8001242:	230c      	movs	r3, #12
 8001244:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
 800124a:	e009      	b.n	8001260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001252:	4b07      	ldr	r3, [pc, #28]	; (8001270 <_sbrk+0x64>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	4a05      	ldr	r2, [pc, #20]	; (8001270 <_sbrk+0x64>)
 800125c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800125e:	68fb      	ldr	r3, [r7, #12]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	2000c000 	.word	0x2000c000
 800126c:	00000400 	.word	0x00000400
 8001270:	20000694 	.word	0x20000694
 8001274:	200020a0 	.word	0x200020a0

08001278 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001286:	490d      	ldr	r1, [pc, #52]	; (80012bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001288:	4a0d      	ldr	r2, [pc, #52]	; (80012c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800128c:	e002      	b.n	8001294 <LoopCopyDataInit>

0800128e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001292:	3304      	adds	r3, #4

08001294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001298:	d3f9      	bcc.n	800128e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129a:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800129c:	4c0a      	ldr	r4, [pc, #40]	; (80012c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a0:	e001      	b.n	80012a6 <LoopFillZerobss>

080012a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a4:	3204      	adds	r2, #4

080012a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a8:	d3fb      	bcc.n	80012a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012aa:	f7ff ffe5 	bl	8001278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ae:	f006 f83f 	bl	8007330 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012b2:	f7ff fccb 	bl	8000c4c <main>
  bx lr
 80012b6:	4770      	bx	lr
  ldr r0, =_sdata
 80012b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012bc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80012c0:	08008468 	.word	0x08008468
  ldr r2, =_sbss
 80012c4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80012c8:	200020a0 	.word	0x200020a0

080012cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012cc:	e7fe      	b.n	80012cc <ADC1_2_IRQHandler>
	...

080012d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <HAL_Init+0x28>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <HAL_Init+0x28>)
 80012da:	f043 0310 	orr.w	r3, r3, #16
 80012de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e0:	2003      	movs	r0, #3
 80012e2:	f000 f923 	bl	800152c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e6:	200f      	movs	r0, #15
 80012e8:	f000 f808 	bl	80012fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012ec:	f7ff fe98 	bl	8001020 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40022000 	.word	0x40022000

080012fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_InitTick+0x54>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_InitTick+0x58>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4619      	mov	r1, r3
 800130e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001312:	fbb3 f3f1 	udiv	r3, r3, r1
 8001316:	fbb2 f3f3 	udiv	r3, r2, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f93b 	bl	8001596 <HAL_SYSTICK_Config>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e00e      	b.n	8001348 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b0f      	cmp	r3, #15
 800132e:	d80a      	bhi.n	8001346 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001330:	2200      	movs	r2, #0
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f000 f903 	bl	8001542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800133c:	4a06      	ldr	r2, [pc, #24]	; (8001358 <HAL_InitTick+0x5c>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	e000      	b.n	8001348 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	2000000c 	.word	0x2000000c
 8001354:	20000014 	.word	0x20000014
 8001358:	20000010 	.word	0x20000010

0800135c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_IncTick+0x1c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_IncTick+0x20>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4413      	add	r3, r2
 800136c:	4a03      	ldr	r2, [pc, #12]	; (800137c <HAL_IncTick+0x20>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	20000014 	.word	0x20000014
 800137c:	20002058 	.word	0x20002058

08001380 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b02      	ldr	r3, [pc, #8]	; (8001390 <HAL_GetTick+0x10>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	20002058 	.word	0x20002058

08001394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b0:	4013      	ands	r3, r2
 80013b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c6:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	60d3      	str	r3, [r2, #12]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <__NVIC_GetPriorityGrouping+0x18>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	f003 0307 	and.w	r3, r3, #7
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	2b00      	cmp	r3, #0
 8001408:	db0b      	blt.n	8001422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	f003 021f 	and.w	r2, r3, #31
 8001410:	4906      	ldr	r1, [pc, #24]	; (800142c <__NVIC_EnableIRQ+0x34>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	095b      	lsrs	r3, r3, #5
 8001418:	2001      	movs	r0, #1
 800141a:	fa00 f202 	lsl.w	r2, r0, r2
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	e000e100 	.word	0xe000e100

08001430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001440:	2b00      	cmp	r3, #0
 8001442:	db0a      	blt.n	800145a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	490c      	ldr	r1, [pc, #48]	; (800147c <__NVIC_SetPriority+0x4c>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	0112      	lsls	r2, r2, #4
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	440b      	add	r3, r1
 8001454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001458:	e00a      	b.n	8001470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4908      	ldr	r1, [pc, #32]	; (8001480 <__NVIC_SetPriority+0x50>)
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	3b04      	subs	r3, #4
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	440b      	add	r3, r1
 800146e:	761a      	strb	r2, [r3, #24]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000e100 	.word	0xe000e100
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001484:	b480      	push	{r7}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f1c3 0307 	rsb	r3, r3, #7
 800149e:	2b04      	cmp	r3, #4
 80014a0:	bf28      	it	cs
 80014a2:	2304      	movcs	r3, #4
 80014a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3304      	adds	r3, #4
 80014aa:	2b06      	cmp	r3, #6
 80014ac:	d902      	bls.n	80014b4 <NVIC_EncodePriority+0x30>
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3b03      	subs	r3, #3
 80014b2:	e000      	b.n	80014b6 <NVIC_EncodePriority+0x32>
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	f04f 32ff 	mov.w	r2, #4294967295
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	401a      	ands	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	43d9      	mvns	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	4313      	orrs	r3, r2
         );
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f8:	d301      	bcc.n	80014fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00f      	b.n	800151e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <SysTick_Config+0x40>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001506:	210f      	movs	r1, #15
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f7ff ff90 	bl	8001430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <SysTick_Config+0x40>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001516:	4b04      	ldr	r3, [pc, #16]	; (8001528 <SysTick_Config+0x40>)
 8001518:	2207      	movs	r2, #7
 800151a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	e000e010 	.word	0xe000e010

0800152c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ff2d 	bl	8001394 <__NVIC_SetPriorityGrouping>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001554:	f7ff ff42 	bl	80013dc <__NVIC_GetPriorityGrouping>
 8001558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	6978      	ldr	r0, [r7, #20]
 8001560:	f7ff ff90 	bl	8001484 <NVIC_EncodePriority>
 8001564:	4602      	mov	r2, r0
 8001566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff5f 	bl	8001430 <__NVIC_SetPriority>
}
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff35 	bl	80013f8 <__NVIC_EnableIRQ>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff ffa2 	bl	80014e8 <SysTick_Config>
 80015a4:	4603      	mov	r3, r0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b085      	sub	sp, #20
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d008      	beq.n	80015d6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2204      	movs	r2, #4
 80015c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e020      	b.n	8001618 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 020e 	bic.w	r2, r2, #14
 80015e4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0201 	bic.w	r2, r2, #1
 80015f4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015fe:	2101      	movs	r1, #1
 8001600:	fa01 f202 	lsl.w	r2, r1, r2
 8001604:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001616:	7bfb      	ldrb	r3, [r7, #15]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
	...

08001624 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001636:	2b02      	cmp	r3, #2
 8001638:	d005      	beq.n	8001646 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2204      	movs	r2, #4
 800163e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	73fb      	strb	r3, [r7, #15]
 8001644:	e0d6      	b.n	80017f4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 020e 	bic.w	r2, r2, #14
 8001654:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 0201 	bic.w	r2, r2, #1
 8001664:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	461a      	mov	r2, r3
 800166c:	4b64      	ldr	r3, [pc, #400]	; (8001800 <HAL_DMA_Abort_IT+0x1dc>)
 800166e:	429a      	cmp	r2, r3
 8001670:	d958      	bls.n	8001724 <HAL_DMA_Abort_IT+0x100>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a63      	ldr	r2, [pc, #396]	; (8001804 <HAL_DMA_Abort_IT+0x1e0>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d04f      	beq.n	800171c <HAL_DMA_Abort_IT+0xf8>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a61      	ldr	r2, [pc, #388]	; (8001808 <HAL_DMA_Abort_IT+0x1e4>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d048      	beq.n	8001718 <HAL_DMA_Abort_IT+0xf4>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a60      	ldr	r2, [pc, #384]	; (800180c <HAL_DMA_Abort_IT+0x1e8>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d040      	beq.n	8001712 <HAL_DMA_Abort_IT+0xee>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a5e      	ldr	r2, [pc, #376]	; (8001810 <HAL_DMA_Abort_IT+0x1ec>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d038      	beq.n	800170c <HAL_DMA_Abort_IT+0xe8>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a5d      	ldr	r2, [pc, #372]	; (8001814 <HAL_DMA_Abort_IT+0x1f0>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d030      	beq.n	8001706 <HAL_DMA_Abort_IT+0xe2>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a5b      	ldr	r2, [pc, #364]	; (8001818 <HAL_DMA_Abort_IT+0x1f4>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d028      	beq.n	8001700 <HAL_DMA_Abort_IT+0xdc>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a53      	ldr	r2, [pc, #332]	; (8001800 <HAL_DMA_Abort_IT+0x1dc>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d020      	beq.n	80016fa <HAL_DMA_Abort_IT+0xd6>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a57      	ldr	r2, [pc, #348]	; (800181c <HAL_DMA_Abort_IT+0x1f8>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d019      	beq.n	80016f6 <HAL_DMA_Abort_IT+0xd2>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a56      	ldr	r2, [pc, #344]	; (8001820 <HAL_DMA_Abort_IT+0x1fc>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d012      	beq.n	80016f2 <HAL_DMA_Abort_IT+0xce>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a54      	ldr	r2, [pc, #336]	; (8001824 <HAL_DMA_Abort_IT+0x200>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d00a      	beq.n	80016ec <HAL_DMA_Abort_IT+0xc8>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a53      	ldr	r2, [pc, #332]	; (8001828 <HAL_DMA_Abort_IT+0x204>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d102      	bne.n	80016e6 <HAL_DMA_Abort_IT+0xc2>
 80016e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e4:	e01b      	b.n	800171e <HAL_DMA_Abort_IT+0xfa>
 80016e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ea:	e018      	b.n	800171e <HAL_DMA_Abort_IT+0xfa>
 80016ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016f0:	e015      	b.n	800171e <HAL_DMA_Abort_IT+0xfa>
 80016f2:	2310      	movs	r3, #16
 80016f4:	e013      	b.n	800171e <HAL_DMA_Abort_IT+0xfa>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e011      	b.n	800171e <HAL_DMA_Abort_IT+0xfa>
 80016fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016fe:	e00e      	b.n	800171e <HAL_DMA_Abort_IT+0xfa>
 8001700:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001704:	e00b      	b.n	800171e <HAL_DMA_Abort_IT+0xfa>
 8001706:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800170a:	e008      	b.n	800171e <HAL_DMA_Abort_IT+0xfa>
 800170c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001710:	e005      	b.n	800171e <HAL_DMA_Abort_IT+0xfa>
 8001712:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001716:	e002      	b.n	800171e <HAL_DMA_Abort_IT+0xfa>
 8001718:	2310      	movs	r3, #16
 800171a:	e000      	b.n	800171e <HAL_DMA_Abort_IT+0xfa>
 800171c:	2301      	movs	r3, #1
 800171e:	4a43      	ldr	r2, [pc, #268]	; (800182c <HAL_DMA_Abort_IT+0x208>)
 8001720:	6053      	str	r3, [r2, #4]
 8001722:	e057      	b.n	80017d4 <HAL_DMA_Abort_IT+0x1b0>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a36      	ldr	r2, [pc, #216]	; (8001804 <HAL_DMA_Abort_IT+0x1e0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d04f      	beq.n	80017ce <HAL_DMA_Abort_IT+0x1aa>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a35      	ldr	r2, [pc, #212]	; (8001808 <HAL_DMA_Abort_IT+0x1e4>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d048      	beq.n	80017ca <HAL_DMA_Abort_IT+0x1a6>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a33      	ldr	r2, [pc, #204]	; (800180c <HAL_DMA_Abort_IT+0x1e8>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d040      	beq.n	80017c4 <HAL_DMA_Abort_IT+0x1a0>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a32      	ldr	r2, [pc, #200]	; (8001810 <HAL_DMA_Abort_IT+0x1ec>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d038      	beq.n	80017be <HAL_DMA_Abort_IT+0x19a>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a30      	ldr	r2, [pc, #192]	; (8001814 <HAL_DMA_Abort_IT+0x1f0>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d030      	beq.n	80017b8 <HAL_DMA_Abort_IT+0x194>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a2f      	ldr	r2, [pc, #188]	; (8001818 <HAL_DMA_Abort_IT+0x1f4>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d028      	beq.n	80017b2 <HAL_DMA_Abort_IT+0x18e>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a26      	ldr	r2, [pc, #152]	; (8001800 <HAL_DMA_Abort_IT+0x1dc>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d020      	beq.n	80017ac <HAL_DMA_Abort_IT+0x188>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a2b      	ldr	r2, [pc, #172]	; (800181c <HAL_DMA_Abort_IT+0x1f8>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d019      	beq.n	80017a8 <HAL_DMA_Abort_IT+0x184>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a29      	ldr	r2, [pc, #164]	; (8001820 <HAL_DMA_Abort_IT+0x1fc>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d012      	beq.n	80017a4 <HAL_DMA_Abort_IT+0x180>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a28      	ldr	r2, [pc, #160]	; (8001824 <HAL_DMA_Abort_IT+0x200>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d00a      	beq.n	800179e <HAL_DMA_Abort_IT+0x17a>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a26      	ldr	r2, [pc, #152]	; (8001828 <HAL_DMA_Abort_IT+0x204>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d102      	bne.n	8001798 <HAL_DMA_Abort_IT+0x174>
 8001792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001796:	e01b      	b.n	80017d0 <HAL_DMA_Abort_IT+0x1ac>
 8001798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800179c:	e018      	b.n	80017d0 <HAL_DMA_Abort_IT+0x1ac>
 800179e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017a2:	e015      	b.n	80017d0 <HAL_DMA_Abort_IT+0x1ac>
 80017a4:	2310      	movs	r3, #16
 80017a6:	e013      	b.n	80017d0 <HAL_DMA_Abort_IT+0x1ac>
 80017a8:	2301      	movs	r3, #1
 80017aa:	e011      	b.n	80017d0 <HAL_DMA_Abort_IT+0x1ac>
 80017ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017b0:	e00e      	b.n	80017d0 <HAL_DMA_Abort_IT+0x1ac>
 80017b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80017b6:	e00b      	b.n	80017d0 <HAL_DMA_Abort_IT+0x1ac>
 80017b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017bc:	e008      	b.n	80017d0 <HAL_DMA_Abort_IT+0x1ac>
 80017be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c2:	e005      	b.n	80017d0 <HAL_DMA_Abort_IT+0x1ac>
 80017c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c8:	e002      	b.n	80017d0 <HAL_DMA_Abort_IT+0x1ac>
 80017ca:	2310      	movs	r3, #16
 80017cc:	e000      	b.n	80017d0 <HAL_DMA_Abort_IT+0x1ac>
 80017ce:	2301      	movs	r3, #1
 80017d0:	4a17      	ldr	r2, [pc, #92]	; (8001830 <HAL_DMA_Abort_IT+0x20c>)
 80017d2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	4798      	blx	r3
    } 
  }
  return status;
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40020080 	.word	0x40020080
 8001804:	40020008 	.word	0x40020008
 8001808:	4002001c 	.word	0x4002001c
 800180c:	40020030 	.word	0x40020030
 8001810:	40020044 	.word	0x40020044
 8001814:	40020058 	.word	0x40020058
 8001818:	4002006c 	.word	0x4002006c
 800181c:	40020408 	.word	0x40020408
 8001820:	4002041c 	.word	0x4002041c
 8001824:	40020430 	.word	0x40020430
 8001828:	40020444 	.word	0x40020444
 800182c:	40020400 	.word	0x40020400
 8001830:	40020000 	.word	0x40020000

08001834 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001834:	b480      	push	{r7}
 8001836:	b08b      	sub	sp, #44	; 0x2c
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001846:	e133      	b.n	8001ab0 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001848:	2201      	movs	r2, #1
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	429a      	cmp	r2, r3
 8001862:	f040 8122 	bne.w	8001aaa <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b12      	cmp	r3, #18
 800186c:	d034      	beq.n	80018d8 <HAL_GPIO_Init+0xa4>
 800186e:	2b12      	cmp	r3, #18
 8001870:	d80d      	bhi.n	800188e <HAL_GPIO_Init+0x5a>
 8001872:	2b02      	cmp	r3, #2
 8001874:	d02b      	beq.n	80018ce <HAL_GPIO_Init+0x9a>
 8001876:	2b02      	cmp	r3, #2
 8001878:	d804      	bhi.n	8001884 <HAL_GPIO_Init+0x50>
 800187a:	2b00      	cmp	r3, #0
 800187c:	d031      	beq.n	80018e2 <HAL_GPIO_Init+0xae>
 800187e:	2b01      	cmp	r3, #1
 8001880:	d01c      	beq.n	80018bc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001882:	e048      	b.n	8001916 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001884:	2b03      	cmp	r3, #3
 8001886:	d043      	beq.n	8001910 <HAL_GPIO_Init+0xdc>
 8001888:	2b11      	cmp	r3, #17
 800188a:	d01b      	beq.n	80018c4 <HAL_GPIO_Init+0x90>
          break;
 800188c:	e043      	b.n	8001916 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800188e:	4a8f      	ldr	r2, [pc, #572]	; (8001acc <HAL_GPIO_Init+0x298>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d026      	beq.n	80018e2 <HAL_GPIO_Init+0xae>
 8001894:	4a8d      	ldr	r2, [pc, #564]	; (8001acc <HAL_GPIO_Init+0x298>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d806      	bhi.n	80018a8 <HAL_GPIO_Init+0x74>
 800189a:	4a8d      	ldr	r2, [pc, #564]	; (8001ad0 <HAL_GPIO_Init+0x29c>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d020      	beq.n	80018e2 <HAL_GPIO_Init+0xae>
 80018a0:	4a8c      	ldr	r2, [pc, #560]	; (8001ad4 <HAL_GPIO_Init+0x2a0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d01d      	beq.n	80018e2 <HAL_GPIO_Init+0xae>
          break;
 80018a6:	e036      	b.n	8001916 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018a8:	4a8b      	ldr	r2, [pc, #556]	; (8001ad8 <HAL_GPIO_Init+0x2a4>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d019      	beq.n	80018e2 <HAL_GPIO_Init+0xae>
 80018ae:	4a8b      	ldr	r2, [pc, #556]	; (8001adc <HAL_GPIO_Init+0x2a8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d016      	beq.n	80018e2 <HAL_GPIO_Init+0xae>
 80018b4:	4a8a      	ldr	r2, [pc, #552]	; (8001ae0 <HAL_GPIO_Init+0x2ac>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d013      	beq.n	80018e2 <HAL_GPIO_Init+0xae>
          break;
 80018ba:	e02c      	b.n	8001916 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	623b      	str	r3, [r7, #32]
          break;
 80018c2:	e028      	b.n	8001916 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	3304      	adds	r3, #4
 80018ca:	623b      	str	r3, [r7, #32]
          break;
 80018cc:	e023      	b.n	8001916 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	3308      	adds	r3, #8
 80018d4:	623b      	str	r3, [r7, #32]
          break;
 80018d6:	e01e      	b.n	8001916 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	330c      	adds	r3, #12
 80018de:	623b      	str	r3, [r7, #32]
          break;
 80018e0:	e019      	b.n	8001916 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d102      	bne.n	80018f0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018ea:	2304      	movs	r3, #4
 80018ec:	623b      	str	r3, [r7, #32]
          break;
 80018ee:	e012      	b.n	8001916 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d105      	bne.n	8001904 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018f8:	2308      	movs	r3, #8
 80018fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69fa      	ldr	r2, [r7, #28]
 8001900:	611a      	str	r2, [r3, #16]
          break;
 8001902:	e008      	b.n	8001916 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001904:	2308      	movs	r3, #8
 8001906:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69fa      	ldr	r2, [r7, #28]
 800190c:	615a      	str	r2, [r3, #20]
          break;
 800190e:	e002      	b.n	8001916 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001910:	2300      	movs	r3, #0
 8001912:	623b      	str	r3, [r7, #32]
          break;
 8001914:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	2bff      	cmp	r3, #255	; 0xff
 800191a:	d801      	bhi.n	8001920 <HAL_GPIO_Init+0xec>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	e001      	b.n	8001924 <HAL_GPIO_Init+0xf0>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3304      	adds	r3, #4
 8001924:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	2bff      	cmp	r3, #255	; 0xff
 800192a:	d802      	bhi.n	8001932 <HAL_GPIO_Init+0xfe>
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	e002      	b.n	8001938 <HAL_GPIO_Init+0x104>
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	3b08      	subs	r3, #8
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	210f      	movs	r1, #15
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	fa01 f303 	lsl.w	r3, r1, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	401a      	ands	r2, r3
 800194a:	6a39      	ldr	r1, [r7, #32]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	fa01 f303 	lsl.w	r3, r1, r3
 8001952:	431a      	orrs	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 80a2 	beq.w	8001aaa <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001966:	4b5f      	ldr	r3, [pc, #380]	; (8001ae4 <HAL_GPIO_Init+0x2b0>)
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	4a5e      	ldr	r2, [pc, #376]	; (8001ae4 <HAL_GPIO_Init+0x2b0>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6193      	str	r3, [r2, #24]
 8001972:	4b5c      	ldr	r3, [pc, #368]	; (8001ae4 <HAL_GPIO_Init+0x2b0>)
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800197e:	4a5a      	ldr	r2, [pc, #360]	; (8001ae8 <HAL_GPIO_Init+0x2b4>)
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	089b      	lsrs	r3, r3, #2
 8001984:	3302      	adds	r3, #2
 8001986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	220f      	movs	r2, #15
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	4013      	ands	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a51      	ldr	r2, [pc, #324]	; (8001aec <HAL_GPIO_Init+0x2b8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d01f      	beq.n	80019ea <HAL_GPIO_Init+0x1b6>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a50      	ldr	r2, [pc, #320]	; (8001af0 <HAL_GPIO_Init+0x2bc>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d019      	beq.n	80019e6 <HAL_GPIO_Init+0x1b2>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a4f      	ldr	r2, [pc, #316]	; (8001af4 <HAL_GPIO_Init+0x2c0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d013      	beq.n	80019e2 <HAL_GPIO_Init+0x1ae>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a4e      	ldr	r2, [pc, #312]	; (8001af8 <HAL_GPIO_Init+0x2c4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d00d      	beq.n	80019de <HAL_GPIO_Init+0x1aa>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a4d      	ldr	r2, [pc, #308]	; (8001afc <HAL_GPIO_Init+0x2c8>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d007      	beq.n	80019da <HAL_GPIO_Init+0x1a6>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a4c      	ldr	r2, [pc, #304]	; (8001b00 <HAL_GPIO_Init+0x2cc>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d101      	bne.n	80019d6 <HAL_GPIO_Init+0x1a2>
 80019d2:	2305      	movs	r3, #5
 80019d4:	e00a      	b.n	80019ec <HAL_GPIO_Init+0x1b8>
 80019d6:	2306      	movs	r3, #6
 80019d8:	e008      	b.n	80019ec <HAL_GPIO_Init+0x1b8>
 80019da:	2304      	movs	r3, #4
 80019dc:	e006      	b.n	80019ec <HAL_GPIO_Init+0x1b8>
 80019de:	2303      	movs	r3, #3
 80019e0:	e004      	b.n	80019ec <HAL_GPIO_Init+0x1b8>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e002      	b.n	80019ec <HAL_GPIO_Init+0x1b8>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_GPIO_Init+0x1b8>
 80019ea:	2300      	movs	r3, #0
 80019ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ee:	f002 0203 	and.w	r2, r2, #3
 80019f2:	0092      	lsls	r2, r2, #2
 80019f4:	4093      	lsls	r3, r2
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019fc:	493a      	ldr	r1, [pc, #232]	; (8001ae8 <HAL_GPIO_Init+0x2b4>)
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	089b      	lsrs	r3, r3, #2
 8001a02:	3302      	adds	r3, #2
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d006      	beq.n	8001a24 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a16:	4b3b      	ldr	r3, [pc, #236]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	493a      	ldr	r1, [pc, #232]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]
 8001a22:	e006      	b.n	8001a32 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a24:	4b37      	ldr	r3, [pc, #220]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	4935      	ldr	r1, [pc, #212]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a2e:	4013      	ands	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d006      	beq.n	8001a4c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a3e:	4b31      	ldr	r3, [pc, #196]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	4930      	ldr	r1, [pc, #192]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	604b      	str	r3, [r1, #4]
 8001a4a:	e006      	b.n	8001a5a <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a4c:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	492b      	ldr	r1, [pc, #172]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d006      	beq.n	8001a74 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a66:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	4926      	ldr	r1, [pc, #152]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
 8001a72:	e006      	b.n	8001a82 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a74:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	4921      	ldr	r1, [pc, #132]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d006      	beq.n	8001a9c <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a8e:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	491c      	ldr	r1, [pc, #112]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	60cb      	str	r3, [r1, #12]
 8001a9a:	e006      	b.n	8001aaa <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	4917      	ldr	r1, [pc, #92]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	3301      	adds	r3, #1
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f47f aec4 	bne.w	8001848 <HAL_GPIO_Init+0x14>
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	372c      	adds	r7, #44	; 0x2c
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	10210000 	.word	0x10210000
 8001ad0:	10110000 	.word	0x10110000
 8001ad4:	10120000 	.word	0x10120000
 8001ad8:	10310000 	.word	0x10310000
 8001adc:	10320000 	.word	0x10320000
 8001ae0:	10220000 	.word	0x10220000
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010000 	.word	0x40010000
 8001aec:	40010800 	.word	0x40010800
 8001af0:	40010c00 	.word	0x40010c00
 8001af4:	40011000 	.word	0x40011000
 8001af8:	40011400 	.word	0x40011400
 8001afc:	40011800 	.word	0x40011800
 8001b00:	40011c00 	.word	0x40011c00
 8001b04:	40010400 	.word	0x40010400

08001b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	807b      	strh	r3, [r7, #2]
 8001b14:	4613      	mov	r3, r2
 8001b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b18:	787b      	ldrb	r3, [r7, #1]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b1e:	887a      	ldrh	r2, [r7, #2]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b24:	e003      	b.n	8001b2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b26:	887b      	ldrh	r3, [r7, #2]
 8001b28:	041a      	lsls	r2, r3, #16
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	611a      	str	r2, [r3, #16]
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e11f      	b.n	8001d8a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d106      	bne.n	8001b64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fa96 	bl	8001090 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2224      	movs	r2, #36	; 0x24
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0201 	bic.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b9c:	f001 fc8c 	bl	80034b8 <HAL_RCC_GetPCLK1Freq>
 8001ba0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4a7b      	ldr	r2, [pc, #492]	; (8001d94 <HAL_I2C_Init+0x25c>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d807      	bhi.n	8001bbc <HAL_I2C_Init+0x84>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4a7a      	ldr	r2, [pc, #488]	; (8001d98 <HAL_I2C_Init+0x260>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	bf94      	ite	ls
 8001bb4:	2301      	movls	r3, #1
 8001bb6:	2300      	movhi	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	e006      	b.n	8001bca <HAL_I2C_Init+0x92>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4a77      	ldr	r2, [pc, #476]	; (8001d9c <HAL_I2C_Init+0x264>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	bf94      	ite	ls
 8001bc4:	2301      	movls	r3, #1
 8001bc6:	2300      	movhi	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e0db      	b.n	8001d8a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4a72      	ldr	r2, [pc, #456]	; (8001da0 <HAL_I2C_Init+0x268>)
 8001bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bda:	0c9b      	lsrs	r3, r3, #18
 8001bdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	4a64      	ldr	r2, [pc, #400]	; (8001d94 <HAL_I2C_Init+0x25c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d802      	bhi.n	8001c0c <HAL_I2C_Init+0xd4>
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	e009      	b.n	8001c20 <HAL_I2C_Init+0xe8>
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c12:	fb02 f303 	mul.w	r3, r2, r3
 8001c16:	4a63      	ldr	r2, [pc, #396]	; (8001da4 <HAL_I2C_Init+0x26c>)
 8001c18:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1c:	099b      	lsrs	r3, r3, #6
 8001c1e:	3301      	adds	r3, #1
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	430b      	orrs	r3, r1
 8001c26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	4956      	ldr	r1, [pc, #344]	; (8001d94 <HAL_I2C_Init+0x25c>)
 8001c3c:	428b      	cmp	r3, r1
 8001c3e:	d80d      	bhi.n	8001c5c <HAL_I2C_Init+0x124>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	1e59      	subs	r1, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c4e:	3301      	adds	r3, #1
 8001c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	bf38      	it	cc
 8001c58:	2304      	movcc	r3, #4
 8001c5a:	e04f      	b.n	8001cfc <HAL_I2C_Init+0x1c4>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d111      	bne.n	8001c88 <HAL_I2C_Init+0x150>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1e58      	subs	r0, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6859      	ldr	r1, [r3, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	440b      	add	r3, r1
 8001c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c76:	3301      	adds	r3, #1
 8001c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	bf0c      	ite	eq
 8001c80:	2301      	moveq	r3, #1
 8001c82:	2300      	movne	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	e012      	b.n	8001cae <HAL_I2C_Init+0x176>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	1e58      	subs	r0, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6859      	ldr	r1, [r3, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	0099      	lsls	r1, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	bf0c      	ite	eq
 8001ca8:	2301      	moveq	r3, #1
 8001caa:	2300      	movne	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_I2C_Init+0x17e>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e022      	b.n	8001cfc <HAL_I2C_Init+0x1c4>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10e      	bne.n	8001cdc <HAL_I2C_Init+0x1a4>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1e58      	subs	r0, r3, #1
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6859      	ldr	r1, [r3, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	440b      	add	r3, r1
 8001ccc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cda:	e00f      	b.n	8001cfc <HAL_I2C_Init+0x1c4>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1e58      	subs	r0, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6859      	ldr	r1, [r3, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	0099      	lsls	r1, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	6809      	ldr	r1, [r1, #0]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69da      	ldr	r2, [r3, #28]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6911      	ldr	r1, [r2, #16]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68d2      	ldr	r2, [r2, #12]
 8001d36:	4311      	orrs	r1, r2
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695a      	ldr	r2, [r3, #20]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0201 	orr.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2220      	movs	r2, #32
 8001d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	000186a0 	.word	0x000186a0
 8001d98:	001e847f 	.word	0x001e847f
 8001d9c:	003d08ff 	.word	0x003d08ff
 8001da0:	431bde83 	.word	0x431bde83
 8001da4:	10624dd3 	.word	0x10624dd3

08001da8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	461a      	mov	r2, r3
 8001db4:	460b      	mov	r3, r1
 8001db6:	817b      	strh	r3, [r7, #10]
 8001db8:	4613      	mov	r3, r2
 8001dba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dbc:	f7ff fae0 	bl	8001380 <HAL_GetTick>
 8001dc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	f040 80e0 	bne.w	8001f90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	2319      	movs	r3, #25
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	4970      	ldr	r1, [pc, #448]	; (8001f9c <HAL_I2C_Master_Transmit+0x1f4>)
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 fdba 	bl	8002954 <I2C_WaitOnFlagUntilTimeout>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001de6:	2302      	movs	r3, #2
 8001de8:	e0d3      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <HAL_I2C_Master_Transmit+0x50>
 8001df4:	2302      	movs	r3, #2
 8001df6:	e0cc      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1ea>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d007      	beq.n	8001e1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0201 	orr.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2221      	movs	r2, #33	; 0x21
 8001e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2210      	movs	r2, #16
 8001e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	893a      	ldrh	r2, [r7, #8]
 8001e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4a50      	ldr	r2, [pc, #320]	; (8001fa0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e60:	8979      	ldrh	r1, [r7, #10]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	6a3a      	ldr	r2, [r7, #32]
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 fc24 	bl	80026b4 <I2C_MasterRequestWrite>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e08d      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e8c:	e066      	b.n	8001f5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	6a39      	ldr	r1, [r7, #32]
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 fe34 	bl	8002b00 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00d      	beq.n	8001eba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d107      	bne.n	8001eb6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e06b      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	781a      	ldrb	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d11b      	bne.n	8001f30 <HAL_I2C_Master_Transmit+0x188>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d017      	beq.n	8001f30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	781a      	ldrb	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	1c5a      	adds	r2, r3, #1
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	6a39      	ldr	r1, [r7, #32]
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 fe24 	bl	8002b82 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00d      	beq.n	8001f5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d107      	bne.n	8001f58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e01a      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d194      	bne.n	8001e8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e000      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f90:	2302      	movs	r3, #2
  }
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	00100002 	.word	0x00100002
 8001fa0:	ffff0000 	.word	0xffff0000

08001fa4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	; 0x30
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	607a      	str	r2, [r7, #4]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	817b      	strh	r3, [r7, #10]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fbc:	f7ff f9e0 	bl	8001380 <HAL_GetTick>
 8001fc0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b20      	cmp	r3, #32
 8001fcc:	f040 8238 	bne.w	8002440 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	2319      	movs	r3, #25
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	497e      	ldr	r1, [pc, #504]	; (80021d4 <HAL_I2C_Master_Receive+0x230>)
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 fcba 	bl	8002954 <I2C_WaitOnFlagUntilTimeout>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e22b      	b.n	8002442 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_I2C_Master_Receive+0x54>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e224      	b.n	8002442 <HAL_I2C_Master_Receive+0x49e>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b01      	cmp	r3, #1
 800200c:	d007      	beq.n	800201e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f042 0201 	orr.w	r2, r2, #1
 800201c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800202c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2222      	movs	r2, #34	; 0x22
 8002032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2210      	movs	r2, #16
 800203a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	893a      	ldrh	r2, [r7, #8]
 800204e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002054:	b29a      	uxth	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4a5e      	ldr	r2, [pc, #376]	; (80021d8 <HAL_I2C_Master_Receive+0x234>)
 800205e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002060:	8979      	ldrh	r1, [r7, #10]
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 fba6 	bl	80027b8 <I2C_MasterRequestRead>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e1e5      	b.n	8002442 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207a:	2b00      	cmp	r3, #0
 800207c:	d113      	bne.n	80020a6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	61fb      	str	r3, [r7, #28]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	e1b9      	b.n	800241a <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d11d      	bne.n	80020ea <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	61bb      	str	r3, [r7, #24]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	61bb      	str	r3, [r7, #24]
 80020d4:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80020e6:	b662      	cpsie	i
 80020e8:	e197      	b.n	800241a <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d11d      	bne.n	800212e <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002100:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002102:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002128:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800212a:	b662      	cpsie	i
 800212c:	e175      	b.n	800241a <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800213c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002154:	e161      	b.n	800241a <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215a:	2b03      	cmp	r3, #3
 800215c:	f200 811a 	bhi.w	8002394 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002164:	2b01      	cmp	r3, #1
 8002166:	d123      	bne.n	80021b0 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800216a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 fd49 	bl	8002c04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e162      	b.n	8002442 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002198:	3b01      	subs	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021ae:	e134      	b.n	800241a <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d150      	bne.n	800225a <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021be:	2200      	movs	r2, #0
 80021c0:	4906      	ldr	r1, [pc, #24]	; (80021dc <HAL_I2C_Master_Receive+0x238>)
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 fbc6 	bl	8002954 <I2C_WaitOnFlagUntilTimeout>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d008      	beq.n	80021e0 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e137      	b.n	8002442 <HAL_I2C_Master_Receive+0x49e>
 80021d2:	bf00      	nop
 80021d4:	00100002 	.word	0x00100002
 80021d8:	ffff0000 	.word	0xffff0000
 80021dc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80021e0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220e:	3b01      	subs	r3, #1
 8002210:	b29a      	uxth	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221a:	b29b      	uxth	r3, r3
 800221c:	3b01      	subs	r3, #1
 800221e:	b29a      	uxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002224:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002242:	3b01      	subs	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224e:	b29b      	uxth	r3, r3
 8002250:	3b01      	subs	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002258:	e0df      	b.n	800241a <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002260:	2200      	movs	r2, #0
 8002262:	497a      	ldr	r1, [pc, #488]	; (800244c <HAL_I2C_Master_Receive+0x4a8>)
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 fb75 	bl	8002954 <I2C_WaitOnFlagUntilTimeout>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0e6      	b.n	8002442 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002282:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002284:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a2:	3b01      	subs	r3, #1
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80022b8:	4b65      	ldr	r3, [pc, #404]	; (8002450 <HAL_I2C_Master_Receive+0x4ac>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	08db      	lsrs	r3, r3, #3
 80022be:	4a65      	ldr	r2, [pc, #404]	; (8002454 <HAL_I2C_Master_Receive+0x4b0>)
 80022c0:	fba2 2303 	umull	r2, r3, r2, r3
 80022c4:	0a1a      	lsrs	r2, r3, #8
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	00da      	lsls	r2, r3, #3
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	3b01      	subs	r3, #1
 80022d6:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80022d8:	6a3b      	ldr	r3, [r7, #32]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d117      	bne.n	800230e <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	f043 0220 	orr.w	r2, r3, #32
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002300:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e099      	b.n	8002442 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b04      	cmp	r3, #4
 800231a:	d1da      	bne.n	80022d2 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691a      	ldr	r2, [r3, #16]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002348:	3b01      	subs	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002354:	b29b      	uxth	r3, r3
 8002356:	3b01      	subs	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800235e:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691a      	ldr	r2, [r3, #16]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237c:	3b01      	subs	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002388:	b29b      	uxth	r3, r3
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002392:	e042      	b.n	800241a <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002396:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 fc33 	bl	8002c04 <I2C_WaitOnRXNEFlagUntilTimeout>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e04c      	b.n	8002442 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d118      	bne.n	800241a <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691a      	ldr	r2, [r3, #16]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002404:	3b01      	subs	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002410:	b29b      	uxth	r3, r3
 8002412:	3b01      	subs	r3, #1
 8002414:	b29a      	uxth	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241e:	2b00      	cmp	r3, #0
 8002420:	f47f ae99 	bne.w	8002156 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2220      	movs	r2, #32
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	e000      	b.n	8002442 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8002440:	2302      	movs	r3, #2
  }
}
 8002442:	4618      	mov	r0, r3
 8002444:	3728      	adds	r7, #40	; 0x28
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	00010004 	.word	0x00010004
 8002450:	2000000c 	.word	0x2000000c
 8002454:	14f8b589 	.word	0x14f8b589

08002458 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	; 0x28
 800245c:	af02      	add	r7, sp, #8
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	460b      	mov	r3, r1
 8002466:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002468:	f7fe ff8a 	bl	8001380 <HAL_GetTick>
 800246c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800246e:	2301      	movs	r3, #1
 8002470:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b20      	cmp	r3, #32
 800247c:	f040 8111 	bne.w	80026a2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	2319      	movs	r3, #25
 8002486:	2201      	movs	r2, #1
 8002488:	4988      	ldr	r1, [pc, #544]	; (80026ac <HAL_I2C_IsDeviceReady+0x254>)
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 fa62 	bl	8002954 <I2C_WaitOnFlagUntilTimeout>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002496:	2302      	movs	r3, #2
 8002498:	e104      	b.n	80026a4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_I2C_IsDeviceReady+0x50>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e0fd      	b.n	80026a4 <HAL_I2C_IsDeviceReady+0x24c>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d007      	beq.n	80024ce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f042 0201 	orr.w	r2, r2, #1
 80024cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2224      	movs	r2, #36	; 0x24
 80024e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4a70      	ldr	r2, [pc, #448]	; (80026b0 <HAL_I2C_IsDeviceReady+0x258>)
 80024f0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002500:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2200      	movs	r2, #0
 800250a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 fa20 	bl	8002954 <I2C_WaitOnFlagUntilTimeout>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00d      	beq.n	8002536 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002528:	d103      	bne.n	8002532 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002530:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e0b6      	b.n	80026a4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002536:	897b      	ldrh	r3, [r7, #10]
 8002538:	b2db      	uxtb	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002544:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002546:	f7fe ff1b 	bl	8001380 <HAL_GetTick>
 800254a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b02      	cmp	r3, #2
 8002558:	bf0c      	ite	eq
 800255a:	2301      	moveq	r3, #1
 800255c:	2300      	movne	r3, #0
 800255e:	b2db      	uxtb	r3, r3
 8002560:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002570:	bf0c      	ite	eq
 8002572:	2301      	moveq	r3, #1
 8002574:	2300      	movne	r3, #0
 8002576:	b2db      	uxtb	r3, r3
 8002578:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800257a:	e025      	b.n	80025c8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800257c:	f7fe ff00 	bl	8001380 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d302      	bcc.n	8002592 <HAL_I2C_IsDeviceReady+0x13a>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d103      	bne.n	800259a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	22a0      	movs	r2, #160	; 0xa0
 8002596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	bf0c      	ite	eq
 80025a8:	2301      	moveq	r3, #1
 80025aa:	2300      	movne	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025be:	bf0c      	ite	eq
 80025c0:	2301      	moveq	r3, #1
 80025c2:	2300      	movne	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2ba0      	cmp	r3, #160	; 0xa0
 80025d2:	d005      	beq.n	80025e0 <HAL_I2C_IsDeviceReady+0x188>
 80025d4:	7dfb      	ldrb	r3, [r7, #23]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d102      	bne.n	80025e0 <HAL_I2C_IsDeviceReady+0x188>
 80025da:	7dbb      	ldrb	r3, [r7, #22]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0cd      	beq.n	800257c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d129      	bne.n	800264a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002604:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002606:	2300      	movs	r3, #0
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	2319      	movs	r3, #25
 8002622:	2201      	movs	r2, #1
 8002624:	4921      	ldr	r1, [pc, #132]	; (80026ac <HAL_I2C_IsDeviceReady+0x254>)
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 f994 	bl	8002954 <I2C_WaitOnFlagUntilTimeout>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e036      	b.n	80026a4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2220      	movs	r2, #32
 800263a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002646:	2300      	movs	r3, #0
 8002648:	e02c      	b.n	80026a4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002658:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002662:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	2319      	movs	r3, #25
 800266a:	2201      	movs	r2, #1
 800266c:	490f      	ldr	r1, [pc, #60]	; (80026ac <HAL_I2C_IsDeviceReady+0x254>)
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 f970 	bl	8002954 <I2C_WaitOnFlagUntilTimeout>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e012      	b.n	80026a4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	3301      	adds	r3, #1
 8002682:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	429a      	cmp	r2, r3
 800268a:	f4ff af32 	bcc.w	80024f2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2220      	movs	r2, #32
 8002692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80026a2:	2302      	movs	r3, #2
  }
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3720      	adds	r7, #32
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	00100002 	.word	0x00100002
 80026b0:	ffff0000 	.word	0xffff0000

080026b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af02      	add	r7, sp, #8
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	460b      	mov	r3, r1
 80026c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d006      	beq.n	80026de <I2C_MasterRequestWrite+0x2a>
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d003      	beq.n	80026de <I2C_MasterRequestWrite+0x2a>
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026dc:	d108      	bne.n	80026f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	e00b      	b.n	8002708 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	2b12      	cmp	r3, #18
 80026f6:	d107      	bne.n	8002708 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002706:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 f91d 	bl	8002954 <I2C_WaitOnFlagUntilTimeout>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00d      	beq.n	800273c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800272e:	d103      	bne.n	8002738 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002736:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e035      	b.n	80027a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002744:	d108      	bne.n	8002758 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002746:	897b      	ldrh	r3, [r7, #10]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002754:	611a      	str	r2, [r3, #16]
 8002756:	e01b      	b.n	8002790 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002758:	897b      	ldrh	r3, [r7, #10]
 800275a:	11db      	asrs	r3, r3, #7
 800275c:	b2db      	uxtb	r3, r3
 800275e:	f003 0306 	and.w	r3, r3, #6
 8002762:	b2db      	uxtb	r3, r3
 8002764:	f063 030f 	orn	r3, r3, #15
 8002768:	b2da      	uxtb	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	490e      	ldr	r1, [pc, #56]	; (80027b0 <I2C_MasterRequestWrite+0xfc>)
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 f943 	bl	8002a02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e010      	b.n	80027a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002786:	897b      	ldrh	r3, [r7, #10]
 8002788:	b2da      	uxtb	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	4907      	ldr	r1, [pc, #28]	; (80027b4 <I2C_MasterRequestWrite+0x100>)
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 f933 	bl	8002a02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	00010008 	.word	0x00010008
 80027b4:	00010002 	.word	0x00010002

080027b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af02      	add	r7, sp, #8
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	607a      	str	r2, [r7, #4]
 80027c2:	603b      	str	r3, [r7, #0]
 80027c4:	460b      	mov	r3, r1
 80027c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d006      	beq.n	80027f2 <I2C_MasterRequestRead+0x3a>
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d003      	beq.n	80027f2 <I2C_MasterRequestRead+0x3a>
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027f0:	d108      	bne.n	8002804 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	e00b      	b.n	800281c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	2b11      	cmp	r3, #17
 800280a:	d107      	bne.n	800281c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800281a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 f893 	bl	8002954 <I2C_WaitOnFlagUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00d      	beq.n	8002850 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002842:	d103      	bne.n	800284c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800284a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e079      	b.n	8002944 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002858:	d108      	bne.n	800286c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800285a:	897b      	ldrh	r3, [r7, #10]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	b2da      	uxtb	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	611a      	str	r2, [r3, #16]
 800286a:	e05f      	b.n	800292c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800286c:	897b      	ldrh	r3, [r7, #10]
 800286e:	11db      	asrs	r3, r3, #7
 8002870:	b2db      	uxtb	r3, r3
 8002872:	f003 0306 	and.w	r3, r3, #6
 8002876:	b2db      	uxtb	r3, r3
 8002878:	f063 030f 	orn	r3, r3, #15
 800287c:	b2da      	uxtb	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	4930      	ldr	r1, [pc, #192]	; (800294c <I2C_MasterRequestRead+0x194>)
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 f8b9 	bl	8002a02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e054      	b.n	8002944 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800289a:	897b      	ldrh	r3, [r7, #10]
 800289c:	b2da      	uxtb	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	4929      	ldr	r1, [pc, #164]	; (8002950 <I2C_MasterRequestRead+0x198>)
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f8a9 	bl	8002a02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e044      	b.n	8002944 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 f831 	bl	8002954 <I2C_WaitOnFlagUntilTimeout>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00d      	beq.n	8002914 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002906:	d103      	bne.n	8002910 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800290e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e017      	b.n	8002944 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002914:	897b      	ldrh	r3, [r7, #10]
 8002916:	11db      	asrs	r3, r3, #7
 8002918:	b2db      	uxtb	r3, r3
 800291a:	f003 0306 	and.w	r3, r3, #6
 800291e:	b2db      	uxtb	r3, r3
 8002920:	f063 030e 	orn	r3, r3, #14
 8002924:	b2da      	uxtb	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	4907      	ldr	r1, [pc, #28]	; (8002950 <I2C_MasterRequestRead+0x198>)
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f865 	bl	8002a02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	00010008 	.word	0x00010008
 8002950:	00010002 	.word	0x00010002

08002954 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	603b      	str	r3, [r7, #0]
 8002960:	4613      	mov	r3, r2
 8002962:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002964:	e025      	b.n	80029b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296c:	d021      	beq.n	80029b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800296e:	f7fe fd07 	bl	8001380 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d302      	bcc.n	8002984 <I2C_WaitOnFlagUntilTimeout+0x30>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d116      	bne.n	80029b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f043 0220 	orr.w	r2, r3, #32
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e023      	b.n	80029fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	0c1b      	lsrs	r3, r3, #16
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d10d      	bne.n	80029d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	43da      	mvns	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	4013      	ands	r3, r2
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	bf0c      	ite	eq
 80029ce:	2301      	moveq	r3, #1
 80029d0:	2300      	movne	r3, #0
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	e00c      	b.n	80029f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	43da      	mvns	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4013      	ands	r3, r2
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	bf0c      	ite	eq
 80029ea:	2301      	moveq	r3, #1
 80029ec:	2300      	movne	r3, #0
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d0b6      	beq.n	8002966 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a10:	e051      	b.n	8002ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a20:	d123      	bne.n	8002a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2220      	movs	r2, #32
 8002a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f043 0204 	orr.w	r2, r3, #4
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e046      	b.n	8002af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a70:	d021      	beq.n	8002ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a72:	f7fe fc85 	bl	8001380 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d302      	bcc.n	8002a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d116      	bne.n	8002ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2220      	movs	r2, #32
 8002a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f043 0220 	orr.w	r2, r3, #32
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e020      	b.n	8002af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	0c1b      	lsrs	r3, r3, #16
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d10c      	bne.n	8002ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	43da      	mvns	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	4013      	ands	r3, r2
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	bf14      	ite	ne
 8002ad2:	2301      	movne	r3, #1
 8002ad4:	2300      	moveq	r3, #0
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	e00b      	b.n	8002af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	43da      	mvns	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf14      	ite	ne
 8002aec:	2301      	movne	r3, #1
 8002aee:	2300      	moveq	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d18d      	bne.n	8002a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b0c:	e02d      	b.n	8002b6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f8ce 	bl	8002cb0 <I2C_IsAcknowledgeFailed>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e02d      	b.n	8002b7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b24:	d021      	beq.n	8002b6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b26:	f7fe fc2b 	bl	8001380 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d302      	bcc.n	8002b3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d116      	bne.n	8002b6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2220      	movs	r2, #32
 8002b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	f043 0220 	orr.w	r2, r3, #32
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e007      	b.n	8002b7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b74:	2b80      	cmp	r3, #128	; 0x80
 8002b76:	d1ca      	bne.n	8002b0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b084      	sub	sp, #16
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b8e:	e02d      	b.n	8002bec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 f88d 	bl	8002cb0 <I2C_IsAcknowledgeFailed>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e02d      	b.n	8002bfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba6:	d021      	beq.n	8002bec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba8:	f7fe fbea 	bl	8001380 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d302      	bcc.n	8002bbe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d116      	bne.n	8002bec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	f043 0220 	orr.w	r2, r3, #32
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e007      	b.n	8002bfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f003 0304 	and.w	r3, r3, #4
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d1ca      	bne.n	8002b90 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c10:	e042      	b.n	8002c98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	2b10      	cmp	r3, #16
 8002c1e:	d119      	bne.n	8002c54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0210 	mvn.w	r2, #16
 8002c28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e029      	b.n	8002ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c54:	f7fe fb94 	bl	8001380 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d302      	bcc.n	8002c6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d116      	bne.n	8002c98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	f043 0220 	orr.w	r2, r3, #32
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e007      	b.n	8002ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca2:	2b40      	cmp	r3, #64	; 0x40
 8002ca4:	d1b5      	bne.n	8002c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc6:	d11b      	bne.n	8002d00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	f043 0204 	orr.w	r2, r3, #4
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e000      	b.n	8002d02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e26c      	b.n	80031f8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 8087 	beq.w	8002e3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d2c:	4b92      	ldr	r3, [pc, #584]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 030c 	and.w	r3, r3, #12
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d00c      	beq.n	8002d52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d38:	4b8f      	ldr	r3, [pc, #572]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 030c 	and.w	r3, r3, #12
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d112      	bne.n	8002d6a <HAL_RCC_OscConfig+0x5e>
 8002d44:	4b8c      	ldr	r3, [pc, #560]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d50:	d10b      	bne.n	8002d6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d52:	4b89      	ldr	r3, [pc, #548]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d06c      	beq.n	8002e38 <HAL_RCC_OscConfig+0x12c>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d168      	bne.n	8002e38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e246      	b.n	80031f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d72:	d106      	bne.n	8002d82 <HAL_RCC_OscConfig+0x76>
 8002d74:	4b80      	ldr	r3, [pc, #512]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a7f      	ldr	r2, [pc, #508]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	e02e      	b.n	8002de0 <HAL_RCC_OscConfig+0xd4>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x98>
 8002d8a:	4b7b      	ldr	r3, [pc, #492]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a7a      	ldr	r2, [pc, #488]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	4b78      	ldr	r3, [pc, #480]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a77      	ldr	r2, [pc, #476]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	e01d      	b.n	8002de0 <HAL_RCC_OscConfig+0xd4>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dac:	d10c      	bne.n	8002dc8 <HAL_RCC_OscConfig+0xbc>
 8002dae:	4b72      	ldr	r3, [pc, #456]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a71      	ldr	r2, [pc, #452]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	4b6f      	ldr	r3, [pc, #444]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a6e      	ldr	r2, [pc, #440]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	e00b      	b.n	8002de0 <HAL_RCC_OscConfig+0xd4>
 8002dc8:	4b6b      	ldr	r3, [pc, #428]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a6a      	ldr	r2, [pc, #424]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd2:	6013      	str	r3, [r2, #0]
 8002dd4:	4b68      	ldr	r3, [pc, #416]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a67      	ldr	r2, [pc, #412]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d013      	beq.n	8002e10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7fe faca 	bl	8001380 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df0:	f7fe fac6 	bl	8001380 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	; 0x64
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e1fa      	b.n	80031f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e02:	4b5d      	ldr	r3, [pc, #372]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0f0      	beq.n	8002df0 <HAL_RCC_OscConfig+0xe4>
 8002e0e:	e014      	b.n	8002e3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e10:	f7fe fab6 	bl	8001380 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e18:	f7fe fab2 	bl	8001380 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b64      	cmp	r3, #100	; 0x64
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e1e6      	b.n	80031f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e2a:	4b53      	ldr	r3, [pc, #332]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x10c>
 8002e36:	e000      	b.n	8002e3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d063      	beq.n	8002f0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e46:	4b4c      	ldr	r3, [pc, #304]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00b      	beq.n	8002e6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e52:	4b49      	ldr	r3, [pc, #292]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d11c      	bne.n	8002e98 <HAL_RCC_OscConfig+0x18c>
 8002e5e:	4b46      	ldr	r3, [pc, #280]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d116      	bne.n	8002e98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6a:	4b43      	ldr	r3, [pc, #268]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d005      	beq.n	8002e82 <HAL_RCC_OscConfig+0x176>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d001      	beq.n	8002e82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e1ba      	b.n	80031f8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e82:	4b3d      	ldr	r3, [pc, #244]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4939      	ldr	r1, [pc, #228]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e96:	e03a      	b.n	8002f0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d020      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ea0:	4b36      	ldr	r3, [pc, #216]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea6:	f7fe fa6b 	bl	8001380 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eae:	f7fe fa67 	bl	8001380 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e19b      	b.n	80031f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec0:	4b2d      	ldr	r3, [pc, #180]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ecc:	4b2a      	ldr	r3, [pc, #168]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4927      	ldr	r1, [pc, #156]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	600b      	str	r3, [r1, #0]
 8002ee0:	e015      	b.n	8002f0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ee2:	4b26      	ldr	r3, [pc, #152]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee8:	f7fe fa4a 	bl	8001380 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef0:	f7fe fa46 	bl	8001380 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e17a      	b.n	80031f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f02:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d03a      	beq.n	8002f90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d019      	beq.n	8002f56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f22:	4b17      	ldr	r3, [pc, #92]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002f24:	2201      	movs	r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f28:	f7fe fa2a 	bl	8001380 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f30:	f7fe fa26 	bl	8001380 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e15a      	b.n	80031f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f42:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0f0      	beq.n	8002f30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f4e:	2001      	movs	r0, #1
 8002f50:	f000 fada 	bl	8003508 <RCC_Delay>
 8002f54:	e01c      	b.n	8002f90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f56:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5c:	f7fe fa10 	bl	8001380 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f62:	e00f      	b.n	8002f84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f64:	f7fe fa0c 	bl	8001380 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d908      	bls.n	8002f84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e140      	b.n	80031f8 <HAL_RCC_OscConfig+0x4ec>
 8002f76:	bf00      	nop
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	42420000 	.word	0x42420000
 8002f80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f84:	4b9e      	ldr	r3, [pc, #632]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1e9      	bne.n	8002f64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 80a6 	beq.w	80030ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fa2:	4b97      	ldr	r3, [pc, #604]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10d      	bne.n	8002fca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fae:	4b94      	ldr	r3, [pc, #592]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	4a93      	ldr	r2, [pc, #588]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 8002fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb8:	61d3      	str	r3, [r2, #28]
 8002fba:	4b91      	ldr	r3, [pc, #580]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fca:	4b8e      	ldr	r3, [pc, #568]	; (8003204 <HAL_RCC_OscConfig+0x4f8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d118      	bne.n	8003008 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fd6:	4b8b      	ldr	r3, [pc, #556]	; (8003204 <HAL_RCC_OscConfig+0x4f8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a8a      	ldr	r2, [pc, #552]	; (8003204 <HAL_RCC_OscConfig+0x4f8>)
 8002fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fe2:	f7fe f9cd 	bl	8001380 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fea:	f7fe f9c9 	bl	8001380 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b64      	cmp	r3, #100	; 0x64
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e0fd      	b.n	80031f8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffc:	4b81      	ldr	r3, [pc, #516]	; (8003204 <HAL_RCC_OscConfig+0x4f8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f0      	beq.n	8002fea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d106      	bne.n	800301e <HAL_RCC_OscConfig+0x312>
 8003010:	4b7b      	ldr	r3, [pc, #492]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	4a7a      	ldr	r2, [pc, #488]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	6213      	str	r3, [r2, #32]
 800301c:	e02d      	b.n	800307a <HAL_RCC_OscConfig+0x36e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10c      	bne.n	8003040 <HAL_RCC_OscConfig+0x334>
 8003026:	4b76      	ldr	r3, [pc, #472]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	4a75      	ldr	r2, [pc, #468]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 800302c:	f023 0301 	bic.w	r3, r3, #1
 8003030:	6213      	str	r3, [r2, #32]
 8003032:	4b73      	ldr	r3, [pc, #460]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	4a72      	ldr	r2, [pc, #456]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 8003038:	f023 0304 	bic.w	r3, r3, #4
 800303c:	6213      	str	r3, [r2, #32]
 800303e:	e01c      	b.n	800307a <HAL_RCC_OscConfig+0x36e>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2b05      	cmp	r3, #5
 8003046:	d10c      	bne.n	8003062 <HAL_RCC_OscConfig+0x356>
 8003048:	4b6d      	ldr	r3, [pc, #436]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	4a6c      	ldr	r2, [pc, #432]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 800304e:	f043 0304 	orr.w	r3, r3, #4
 8003052:	6213      	str	r3, [r2, #32]
 8003054:	4b6a      	ldr	r3, [pc, #424]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	4a69      	ldr	r2, [pc, #420]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6213      	str	r3, [r2, #32]
 8003060:	e00b      	b.n	800307a <HAL_RCC_OscConfig+0x36e>
 8003062:	4b67      	ldr	r3, [pc, #412]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	4a66      	ldr	r2, [pc, #408]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 8003068:	f023 0301 	bic.w	r3, r3, #1
 800306c:	6213      	str	r3, [r2, #32]
 800306e:	4b64      	ldr	r3, [pc, #400]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	4a63      	ldr	r2, [pc, #396]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 8003074:	f023 0304 	bic.w	r3, r3, #4
 8003078:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d015      	beq.n	80030ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003082:	f7fe f97d 	bl	8001380 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003088:	e00a      	b.n	80030a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308a:	f7fe f979 	bl	8001380 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	f241 3288 	movw	r2, #5000	; 0x1388
 8003098:	4293      	cmp	r3, r2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e0ab      	b.n	80031f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a0:	4b57      	ldr	r3, [pc, #348]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0ee      	beq.n	800308a <HAL_RCC_OscConfig+0x37e>
 80030ac:	e014      	b.n	80030d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ae:	f7fe f967 	bl	8001380 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b4:	e00a      	b.n	80030cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b6:	f7fe f963 	bl	8001380 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e095      	b.n	80031f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030cc:	4b4c      	ldr	r3, [pc, #304]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1ee      	bne.n	80030b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d105      	bne.n	80030ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030de:	4b48      	ldr	r3, [pc, #288]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	4a47      	ldr	r2, [pc, #284]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 80030e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 8081 	beq.w	80031f6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030f4:	4b42      	ldr	r3, [pc, #264]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 030c 	and.w	r3, r3, #12
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d061      	beq.n	80031c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	2b02      	cmp	r3, #2
 8003106:	d146      	bne.n	8003196 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003108:	4b3f      	ldr	r3, [pc, #252]	; (8003208 <HAL_RCC_OscConfig+0x4fc>)
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310e:	f7fe f937 	bl	8001380 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003116:	f7fe f933 	bl	8001380 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e067      	b.n	80031f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003128:	4b35      	ldr	r3, [pc, #212]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f0      	bne.n	8003116 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313c:	d108      	bne.n	8003150 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800313e:	4b30      	ldr	r3, [pc, #192]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	492d      	ldr	r1, [pc, #180]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 800314c:	4313      	orrs	r3, r2
 800314e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003150:	4b2b      	ldr	r3, [pc, #172]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a19      	ldr	r1, [r3, #32]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	430b      	orrs	r3, r1
 8003162:	4927      	ldr	r1, [pc, #156]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 8003164:	4313      	orrs	r3, r2
 8003166:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003168:	4b27      	ldr	r3, [pc, #156]	; (8003208 <HAL_RCC_OscConfig+0x4fc>)
 800316a:	2201      	movs	r2, #1
 800316c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316e:	f7fe f907 	bl	8001380 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003176:	f7fe f903 	bl	8001380 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e037      	b.n	80031f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003188:	4b1d      	ldr	r3, [pc, #116]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f0      	beq.n	8003176 <HAL_RCC_OscConfig+0x46a>
 8003194:	e02f      	b.n	80031f6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003196:	4b1c      	ldr	r3, [pc, #112]	; (8003208 <HAL_RCC_OscConfig+0x4fc>)
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319c:	f7fe f8f0 	bl	8001380 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a4:	f7fe f8ec 	bl	8001380 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e020      	b.n	80031f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031b6:	4b12      	ldr	r3, [pc, #72]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0x498>
 80031c2:	e018      	b.n	80031f6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e013      	b.n	80031f8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d106      	bne.n	80031f2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d001      	beq.n	80031f6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40021000 	.word	0x40021000
 8003204:	40007000 	.word	0x40007000
 8003208:	42420060 	.word	0x42420060

0800320c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0d0      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003220:	4b6a      	ldr	r3, [pc, #424]	; (80033cc <HAL_RCC_ClockConfig+0x1c0>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d910      	bls.n	8003250 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322e:	4b67      	ldr	r3, [pc, #412]	; (80033cc <HAL_RCC_ClockConfig+0x1c0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f023 0207 	bic.w	r2, r3, #7
 8003236:	4965      	ldr	r1, [pc, #404]	; (80033cc <HAL_RCC_ClockConfig+0x1c0>)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	4313      	orrs	r3, r2
 800323c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800323e:	4b63      	ldr	r3, [pc, #396]	; (80033cc <HAL_RCC_ClockConfig+0x1c0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d001      	beq.n	8003250 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0b8      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d020      	beq.n	800329e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003268:	4b59      	ldr	r3, [pc, #356]	; (80033d0 <HAL_RCC_ClockConfig+0x1c4>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	4a58      	ldr	r2, [pc, #352]	; (80033d0 <HAL_RCC_ClockConfig+0x1c4>)
 800326e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003272:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003280:	4b53      	ldr	r3, [pc, #332]	; (80033d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	4a52      	ldr	r2, [pc, #328]	; (80033d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003286:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800328a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800328c:	4b50      	ldr	r3, [pc, #320]	; (80033d0 <HAL_RCC_ClockConfig+0x1c4>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	494d      	ldr	r1, [pc, #308]	; (80033d0 <HAL_RCC_ClockConfig+0x1c4>)
 800329a:	4313      	orrs	r3, r2
 800329c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d040      	beq.n	800332c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d107      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b2:	4b47      	ldr	r3, [pc, #284]	; (80033d0 <HAL_RCC_ClockConfig+0x1c4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d115      	bne.n	80032ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e07f      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d107      	bne.n	80032da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ca:	4b41      	ldr	r3, [pc, #260]	; (80033d0 <HAL_RCC_ClockConfig+0x1c4>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d109      	bne.n	80032ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e073      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032da:	4b3d      	ldr	r3, [pc, #244]	; (80033d0 <HAL_RCC_ClockConfig+0x1c4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e06b      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ea:	4b39      	ldr	r3, [pc, #228]	; (80033d0 <HAL_RCC_ClockConfig+0x1c4>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f023 0203 	bic.w	r2, r3, #3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	4936      	ldr	r1, [pc, #216]	; (80033d0 <HAL_RCC_ClockConfig+0x1c4>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032fc:	f7fe f840 	bl	8001380 <HAL_GetTick>
 8003300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003302:	e00a      	b.n	800331a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003304:	f7fe f83c 	bl	8001380 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003312:	4293      	cmp	r3, r2
 8003314:	d901      	bls.n	800331a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e053      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331a:	4b2d      	ldr	r3, [pc, #180]	; (80033d0 <HAL_RCC_ClockConfig+0x1c4>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f003 020c 	and.w	r2, r3, #12
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	429a      	cmp	r2, r3
 800332a:	d1eb      	bne.n	8003304 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800332c:	4b27      	ldr	r3, [pc, #156]	; (80033cc <HAL_RCC_ClockConfig+0x1c0>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d210      	bcs.n	800335c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333a:	4b24      	ldr	r3, [pc, #144]	; (80033cc <HAL_RCC_ClockConfig+0x1c0>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f023 0207 	bic.w	r2, r3, #7
 8003342:	4922      	ldr	r1, [pc, #136]	; (80033cc <HAL_RCC_ClockConfig+0x1c0>)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	4313      	orrs	r3, r2
 8003348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800334a:	4b20      	ldr	r3, [pc, #128]	; (80033cc <HAL_RCC_ClockConfig+0x1c0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	429a      	cmp	r2, r3
 8003356:	d001      	beq.n	800335c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e032      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d008      	beq.n	800337a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003368:	4b19      	ldr	r3, [pc, #100]	; (80033d0 <HAL_RCC_ClockConfig+0x1c4>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	4916      	ldr	r1, [pc, #88]	; (80033d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003376:	4313      	orrs	r3, r2
 8003378:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d009      	beq.n	800339a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003386:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	490e      	ldr	r1, [pc, #56]	; (80033d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003396:	4313      	orrs	r3, r2
 8003398:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800339a:	f000 f821 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 800339e:	4601      	mov	r1, r0
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <HAL_RCC_ClockConfig+0x1c4>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	4a0a      	ldr	r2, [pc, #40]	; (80033d4 <HAL_RCC_ClockConfig+0x1c8>)
 80033ac:	5cd3      	ldrb	r3, [r2, r3]
 80033ae:	fa21 f303 	lsr.w	r3, r1, r3
 80033b2:	4a09      	ldr	r2, [pc, #36]	; (80033d8 <HAL_RCC_ClockConfig+0x1cc>)
 80033b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033b6:	4b09      	ldr	r3, [pc, #36]	; (80033dc <HAL_RCC_ClockConfig+0x1d0>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fd ff9e 	bl	80012fc <HAL_InitTick>

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40022000 	.word	0x40022000
 80033d0:	40021000 	.word	0x40021000
 80033d4:	08008308 	.word	0x08008308
 80033d8:	2000000c 	.word	0x2000000c
 80033dc:	20000010 	.word	0x20000010

080033e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e0:	b490      	push	{r4, r7}
 80033e2:	b08a      	sub	sp, #40	; 0x28
 80033e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033e6:	4b2a      	ldr	r3, [pc, #168]	; (8003490 <HAL_RCC_GetSysClockFreq+0xb0>)
 80033e8:	1d3c      	adds	r4, r7, #4
 80033ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033f0:	4b28      	ldr	r3, [pc, #160]	; (8003494 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
 80033fa:	2300      	movs	r3, #0
 80033fc:	61bb      	str	r3, [r7, #24]
 80033fe:	2300      	movs	r3, #0
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800340a:	4b23      	ldr	r3, [pc, #140]	; (8003498 <HAL_RCC_GetSysClockFreq+0xb8>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f003 030c 	and.w	r3, r3, #12
 8003416:	2b04      	cmp	r3, #4
 8003418:	d002      	beq.n	8003420 <HAL_RCC_GetSysClockFreq+0x40>
 800341a:	2b08      	cmp	r3, #8
 800341c:	d003      	beq.n	8003426 <HAL_RCC_GetSysClockFreq+0x46>
 800341e:	e02d      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003420:	4b1e      	ldr	r3, [pc, #120]	; (800349c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003422:	623b      	str	r3, [r7, #32]
      break;
 8003424:	e02d      	b.n	8003482 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	0c9b      	lsrs	r3, r3, #18
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003432:	4413      	add	r3, r2
 8003434:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003438:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d013      	beq.n	800346c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003444:	4b14      	ldr	r3, [pc, #80]	; (8003498 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	0c5b      	lsrs	r3, r3, #17
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003452:	4413      	add	r3, r2
 8003454:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003458:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	4a0f      	ldr	r2, [pc, #60]	; (800349c <HAL_RCC_GetSysClockFreq+0xbc>)
 800345e:	fb02 f203 	mul.w	r2, r2, r3
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	fbb2 f3f3 	udiv	r3, r2, r3
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
 800346a:	e004      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	4a0c      	ldr	r2, [pc, #48]	; (80034a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003470:	fb02 f303 	mul.w	r3, r2, r3
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	623b      	str	r3, [r7, #32]
      break;
 800347a:	e002      	b.n	8003482 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800347c:	4b07      	ldr	r3, [pc, #28]	; (800349c <HAL_RCC_GetSysClockFreq+0xbc>)
 800347e:	623b      	str	r3, [r7, #32]
      break;
 8003480:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003482:	6a3b      	ldr	r3, [r7, #32]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3728      	adds	r7, #40	; 0x28
 8003488:	46bd      	mov	sp, r7
 800348a:	bc90      	pop	{r4, r7}
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	0800820c 	.word	0x0800820c
 8003494:	0800821c 	.word	0x0800821c
 8003498:	40021000 	.word	0x40021000
 800349c:	007a1200 	.word	0x007a1200
 80034a0:	003d0900 	.word	0x003d0900

080034a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034a8:	4b02      	ldr	r3, [pc, #8]	; (80034b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80034aa:	681b      	ldr	r3, [r3, #0]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr
 80034b4:	2000000c 	.word	0x2000000c

080034b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034bc:	f7ff fff2 	bl	80034a4 <HAL_RCC_GetHCLKFreq>
 80034c0:	4601      	mov	r1, r0
 80034c2:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	0a1b      	lsrs	r3, r3, #8
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	4a03      	ldr	r2, [pc, #12]	; (80034dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ce:	5cd3      	ldrb	r3, [r2, r3]
 80034d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40021000 	.word	0x40021000
 80034dc:	08008318 	.word	0x08008318

080034e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034e4:	f7ff ffde 	bl	80034a4 <HAL_RCC_GetHCLKFreq>
 80034e8:	4601      	mov	r1, r0
 80034ea:	4b05      	ldr	r3, [pc, #20]	; (8003500 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	0adb      	lsrs	r3, r3, #11
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	4a03      	ldr	r2, [pc, #12]	; (8003504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034f6:	5cd3      	ldrb	r3, [r2, r3]
 80034f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40021000 	.word	0x40021000
 8003504:	08008318 	.word	0x08008318

08003508 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003510:	4b0a      	ldr	r3, [pc, #40]	; (800353c <RCC_Delay+0x34>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a0a      	ldr	r2, [pc, #40]	; (8003540 <RCC_Delay+0x38>)
 8003516:	fba2 2303 	umull	r2, r3, r2, r3
 800351a:	0a5b      	lsrs	r3, r3, #9
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	fb02 f303 	mul.w	r3, r2, r3
 8003522:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003524:	bf00      	nop
  }
  while (Delay --);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1e5a      	subs	r2, r3, #1
 800352a:	60fa      	str	r2, [r7, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1f9      	bne.n	8003524 <RCC_Delay+0x1c>
}
 8003530:	bf00      	nop
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	2000000c 	.word	0x2000000c
 8003540:	10624dd3 	.word	0x10624dd3

08003544 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e03f      	b.n	80035d6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d106      	bne.n	8003570 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7fd fdce 	bl	800110c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2224      	movs	r2, #36	; 0x24
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003586:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 fbef 	bl	8003d6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	691a      	ldr	r2, [r3, #16]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800359c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695a      	ldr	r2, [r3, #20]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035de:	b480      	push	{r7}
 80035e0:	b085      	sub	sp, #20
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	4613      	mov	r3, r2
 80035ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d130      	bne.n	800365a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <HAL_UART_Transmit_IT+0x26>
 80035fe:	88fb      	ldrh	r3, [r7, #6]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e029      	b.n	800365c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <HAL_UART_Transmit_IT+0x38>
 8003612:	2302      	movs	r3, #2
 8003614:	e022      	b.n	800365c <HAL_UART_Transmit_IT+0x7e>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	88fa      	ldrh	r2, [r7, #6]
 8003628:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	88fa      	ldrh	r2, [r7, #6]
 800362e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2221      	movs	r2, #33	; 0x21
 800363a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003654:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003656:	2300      	movs	r3, #0
 8003658:	e000      	b.n	800365c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800365a:	2302      	movs	r3, #2
  }
}
 800365c:	4618      	mov	r0, r3
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	bc80      	pop	{r7}
 8003664:	4770      	bx	lr

08003666 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	4613      	mov	r3, r2
 8003672:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b20      	cmp	r3, #32
 800367e:	d11d      	bne.n	80036bc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <HAL_UART_Receive_IT+0x26>
 8003686:	88fb      	ldrh	r3, [r7, #6]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e016      	b.n	80036be <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_UART_Receive_IT+0x38>
 800369a:	2302      	movs	r3, #2
 800369c:	e00f      	b.n	80036be <HAL_UART_Receive_IT+0x58>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	461a      	mov	r2, r3
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f9d1 	bl	8003a5a <UART_Start_Receive_IT>
 80036b8:	4603      	mov	r3, r0
 80036ba:	e000      	b.n	80036be <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80036bc:	2302      	movs	r3, #2
  }
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08a      	sub	sp, #40	; 0x28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10d      	bne.n	800371a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_UART_IRQHandler+0x52>
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fa81 	bl	8003c1a <UART_Receive_IT>
      return;
 8003718:	e17c      	b.n	8003a14 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80b1 	beq.w	8003884 <HAL_UART_IRQHandler+0x1bc>
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d105      	bne.n	8003738 <HAL_UART_IRQHandler+0x70>
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 80a6 	beq.w	8003884 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <HAL_UART_IRQHandler+0x90>
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	f043 0201 	orr.w	r2, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <HAL_UART_IRQHandler+0xb0>
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	f043 0202 	orr.w	r2, r3, #2
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <HAL_UART_IRQHandler+0xd0>
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	f043 0204 	orr.w	r2, r3, #4
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00f      	beq.n	80037c2 <HAL_UART_IRQHandler+0xfa>
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	f003 0320 	and.w	r3, r3, #32
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d104      	bne.n	80037b6 <HAL_UART_IRQHandler+0xee>
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d005      	beq.n	80037c2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	f043 0208 	orr.w	r2, r3, #8
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 811f 	beq.w	8003a0a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d007      	beq.n	80037e6 <HAL_UART_IRQHandler+0x11e>
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	f003 0320 	and.w	r3, r3, #32
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fa1a 	bl	8003c1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bf14      	ite	ne
 80037f4:	2301      	movne	r3, #1
 80037f6:	2300      	moveq	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b00      	cmp	r3, #0
 8003806:	d102      	bne.n	800380e <HAL_UART_IRQHandler+0x146>
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d031      	beq.n	8003872 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f95c 	bl	8003acc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381e:	2b00      	cmp	r3, #0
 8003820:	d023      	beq.n	800386a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695a      	ldr	r2, [r3, #20]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003830:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003836:	2b00      	cmp	r3, #0
 8003838:	d013      	beq.n	8003862 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383e:	4a77      	ldr	r2, [pc, #476]	; (8003a1c <HAL_UART_IRQHandler+0x354>)
 8003840:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003846:	4618      	mov	r0, r3
 8003848:	f7fd feec 	bl	8001624 <HAL_DMA_Abort_IT>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d016      	beq.n	8003880 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800385c:	4610      	mov	r0, r2
 800385e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003860:	e00e      	b.n	8003880 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f8e5 	bl	8003a32 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003868:	e00a      	b.n	8003880 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f8e1 	bl	8003a32 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003870:	e006      	b.n	8003880 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f8dd 	bl	8003a32 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800387e:	e0c4      	b.n	8003a0a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003880:	bf00      	nop
    return;
 8003882:	e0c2      	b.n	8003a0a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	2b01      	cmp	r3, #1
 800388a:	f040 80a1 	bne.w	80039d0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 809b 	beq.w	80039d0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 8095 	beq.w	80039d0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038a6:	2300      	movs	r3, #0
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d04e      	beq.n	8003968 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80038d4:	8a3b      	ldrh	r3, [r7, #16]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 8099 	beq.w	8003a0e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038e0:	8a3a      	ldrh	r2, [r7, #16]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	f080 8093 	bcs.w	8003a0e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	8a3a      	ldrh	r2, [r7, #16]
 80038ec:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	d02b      	beq.n	8003950 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003906:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695a      	ldr	r2, [r3, #20]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0201 	bic.w	r2, r2, #1
 8003916:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695a      	ldr	r2, [r3, #20]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003926:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0210 	bic.w	r2, r2, #16
 8003944:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394a:	4618      	mov	r0, r3
 800394c:	f7fd fe2f 	bl	80015ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003958:	b29b      	uxth	r3, r3
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	b29b      	uxth	r3, r3
 800395e:	4619      	mov	r1, r3
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f86f 	bl	8003a44 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003966:	e052      	b.n	8003a0e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003970:	b29b      	uxth	r3, r3
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d048      	beq.n	8003a12 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8003980:	8a7b      	ldrh	r3, [r7, #18]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d045      	beq.n	8003a12 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003994:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695a      	ldr	r2, [r3, #20]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0201 	bic.w	r2, r2, #1
 80039a4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2220      	movs	r2, #32
 80039aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0210 	bic.w	r2, r2, #16
 80039c2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039c4:	8a7b      	ldrh	r3, [r7, #18]
 80039c6:	4619      	mov	r1, r3
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f83b 	bl	8003a44 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80039ce:	e020      	b.n	8003a12 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d008      	beq.n	80039ec <HAL_UART_IRQHandler+0x324>
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f8b1 	bl	8003b4c <UART_Transmit_IT>
    return;
 80039ea:	e013      	b.n	8003a14 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00e      	beq.n	8003a14 <HAL_UART_IRQHandler+0x34c>
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d009      	beq.n	8003a14 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f8f2 	bl	8003bea <UART_EndTransmit_IT>
    return;
 8003a06:	bf00      	nop
 8003a08:	e004      	b.n	8003a14 <HAL_UART_IRQHandler+0x34c>
    return;
 8003a0a:	bf00      	nop
 8003a0c:	e002      	b.n	8003a14 <HAL_UART_IRQHandler+0x34c>
      return;
 8003a0e:	bf00      	nop
 8003a10:	e000      	b.n	8003a14 <HAL_UART_IRQHandler+0x34c>
      return;
 8003a12:	bf00      	nop
  }
}
 8003a14:	3728      	adds	r7, #40	; 0x28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	08003b25 	.word	0x08003b25

08003a20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr

08003a32 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr

08003a5a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b085      	sub	sp, #20
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	4613      	mov	r3, r2
 8003a66:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	88fa      	ldrh	r2, [r7, #6]
 8003a72:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	88fa      	ldrh	r2, [r7, #6]
 8003a78:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2222      	movs	r2, #34	; 0x22
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a9e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695a      	ldr	r2, [r3, #20]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0220 	orr.w	r2, r2, #32
 8003abe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr

08003acc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ae2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695a      	ldr	r2, [r3, #20]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0201 	bic.w	r2, r2, #1
 8003af2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d107      	bne.n	8003b0c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0210 	bic.w	r2, r2, #16
 8003b0a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr

08003b24 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f7ff ff77 	bl	8003a32 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b44:	bf00      	nop
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b21      	cmp	r3, #33	; 0x21
 8003b5e:	d13e      	bne.n	8003bde <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b68:	d114      	bne.n	8003b94 <UART_Transmit_IT+0x48>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d110      	bne.n	8003b94 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b86:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	1c9a      	adds	r2, r3, #2
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	621a      	str	r2, [r3, #32]
 8003b92:	e008      	b.n	8003ba6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	1c59      	adds	r1, r3, #1
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6211      	str	r1, [r2, #32]
 8003b9e:	781a      	ldrb	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10f      	bne.n	8003bda <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bc8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68da      	ldr	r2, [r3, #12]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bd8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	e000      	b.n	8003be0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003bde:	2302      	movs	r3, #2
  }
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc80      	pop	{r7}
 8003be8:	4770      	bx	lr

08003bea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b082      	sub	sp, #8
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff ff08 	bl	8003a20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b086      	sub	sp, #24
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b22      	cmp	r3, #34	; 0x22
 8003c2c:	f040 8099 	bne.w	8003d62 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c38:	d117      	bne.n	8003c6a <UART_Receive_IT+0x50>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d113      	bne.n	8003c6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c62:	1c9a      	adds	r2, r3, #2
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	629a      	str	r2, [r3, #40]	; 0x28
 8003c68:	e026      	b.n	8003cb8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003c70:	2300      	movs	r3, #0
 8003c72:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7c:	d007      	beq.n	8003c8e <UART_Receive_IT+0x74>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10a      	bne.n	8003c9c <UART_Receive_IT+0x82>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	701a      	strb	r2, [r3, #0]
 8003c9a:	e008      	b.n	8003cae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb2:	1c5a      	adds	r2, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d148      	bne.n	8003d5e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0220 	bic.w	r2, r2, #32
 8003cda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695a      	ldr	r2, [r3, #20]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0201 	bic.w	r2, r2, #1
 8003cfa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d123      	bne.n	8003d54 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0210 	bic.w	r2, r2, #16
 8003d20:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0310 	and.w	r3, r3, #16
 8003d2c:	2b10      	cmp	r3, #16
 8003d2e:	d10a      	bne.n	8003d46 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff fe79 	bl	8003a44 <HAL_UARTEx_RxEventCallback>
 8003d52:	e002      	b.n	8003d5a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7fd f941 	bl	8000fdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	e002      	b.n	8003d64 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e000      	b.n	8003d64 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003d62:	2302      	movs	r3, #2
  }
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003da6:	f023 030c 	bic.w	r3, r3, #12
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6812      	ldr	r2, [r2, #0]
 8003dae:	68b9      	ldr	r1, [r7, #8]
 8003db0:	430b      	orrs	r3, r1
 8003db2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699a      	ldr	r2, [r3, #24]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a2c      	ldr	r2, [pc, #176]	; (8003e80 <UART_SetConfig+0x114>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d103      	bne.n	8003ddc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003dd4:	f7ff fb84 	bl	80034e0 <HAL_RCC_GetPCLK2Freq>
 8003dd8:	60f8      	str	r0, [r7, #12]
 8003dda:	e002      	b.n	8003de2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ddc:	f7ff fb6c 	bl	80034b8 <HAL_RCC_GetPCLK1Freq>
 8003de0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	009a      	lsls	r2, r3, #2
 8003dec:	441a      	add	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df8:	4a22      	ldr	r2, [pc, #136]	; (8003e84 <UART_SetConfig+0x118>)
 8003dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfe:	095b      	lsrs	r3, r3, #5
 8003e00:	0119      	lsls	r1, r3, #4
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	4613      	mov	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	009a      	lsls	r2, r3, #2
 8003e0c:	441a      	add	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e18:	4b1a      	ldr	r3, [pc, #104]	; (8003e84 <UART_SetConfig+0x118>)
 8003e1a:	fba3 0302 	umull	r0, r3, r3, r2
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	2064      	movs	r0, #100	; 0x64
 8003e22:	fb00 f303 	mul.w	r3, r0, r3
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	3332      	adds	r3, #50	; 0x32
 8003e2c:	4a15      	ldr	r2, [pc, #84]	; (8003e84 <UART_SetConfig+0x118>)
 8003e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e38:	4419      	add	r1, r3
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	009a      	lsls	r2, r3, #2
 8003e44:	441a      	add	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e50:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <UART_SetConfig+0x118>)
 8003e52:	fba3 0302 	umull	r0, r3, r3, r2
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	2064      	movs	r0, #100	; 0x64
 8003e5a:	fb00 f303 	mul.w	r3, r0, r3
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	3332      	adds	r3, #50	; 0x32
 8003e64:	4a07      	ldr	r2, [pc, #28]	; (8003e84 <UART_SetConfig+0x118>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	f003 020f 	and.w	r2, r3, #15
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	440a      	add	r2, r1
 8003e76:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e78:	bf00      	nop
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40013800 	.word	0x40013800
 8003e84:	51eb851f 	.word	0x51eb851f

08003e88 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e8e:	f3ef 8305 	mrs	r3, IPSR
 8003e92:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10f      	bne.n	8003eba <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e9a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e9e:	607b      	str	r3, [r7, #4]
  return(result);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <osKernelInitialize+0x32>
 8003ea6:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <osKernelInitialize+0x60>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d109      	bne.n	8003ec2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003eae:	f3ef 8311 	mrs	r3, BASEPRI
 8003eb2:	603b      	str	r3, [r7, #0]
  return(result);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003eba:	f06f 0305 	mvn.w	r3, #5
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	e00c      	b.n	8003edc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003ec2:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <osKernelInitialize+0x60>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d105      	bne.n	8003ed6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003eca:	4b07      	ldr	r3, [pc, #28]	; (8003ee8 <osKernelInitialize+0x60>)
 8003ecc:	2201      	movs	r2, #1
 8003ece:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	e002      	b.n	8003edc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eda:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003edc:	68fb      	ldr	r3, [r7, #12]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr
 8003ee8:	20000698 	.word	0x20000698

08003eec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ef2:	f3ef 8305 	mrs	r3, IPSR
 8003ef6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ef8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10f      	bne.n	8003f1e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003efe:	f3ef 8310 	mrs	r3, PRIMASK
 8003f02:	607b      	str	r3, [r7, #4]
  return(result);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d109      	bne.n	8003f1e <osKernelStart+0x32>
 8003f0a:	4b11      	ldr	r3, [pc, #68]	; (8003f50 <osKernelStart+0x64>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d109      	bne.n	8003f26 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f12:	f3ef 8311 	mrs	r3, BASEPRI
 8003f16:	603b      	str	r3, [r7, #0]
  return(result);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003f1e:	f06f 0305 	mvn.w	r3, #5
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	e00e      	b.n	8003f44 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003f26:	4b0a      	ldr	r3, [pc, #40]	; (8003f50 <osKernelStart+0x64>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d107      	bne.n	8003f3e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003f2e:	4b08      	ldr	r3, [pc, #32]	; (8003f50 <osKernelStart+0x64>)
 8003f30:	2202      	movs	r2, #2
 8003f32:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003f34:	f001 fa4e 	bl	80053d4 <vTaskStartScheduler>
      stat = osOK;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	e002      	b.n	8003f44 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f42:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003f44:	68fb      	ldr	r3, [r7, #12]
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20000698 	.word	0x20000698

08003f54 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b092      	sub	sp, #72	; 0x48
 8003f58:	af04      	add	r7, sp, #16
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f64:	f3ef 8305 	mrs	r3, IPSR
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f040 8094 	bne.w	800409a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f72:	f3ef 8310 	mrs	r3, PRIMASK
 8003f76:	623b      	str	r3, [r7, #32]
  return(result);
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f040 808d 	bne.w	800409a <osThreadNew+0x146>
 8003f80:	4b48      	ldr	r3, [pc, #288]	; (80040a4 <osThreadNew+0x150>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d106      	bne.n	8003f96 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f88:	f3ef 8311 	mrs	r3, BASEPRI
 8003f8c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f040 8082 	bne.w	800409a <osThreadNew+0x146>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d07e      	beq.n	800409a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003f9c:	2380      	movs	r3, #128	; 0x80
 8003f9e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003fa0:	2318      	movs	r3, #24
 8003fa2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003fa8:	f107 031b 	add.w	r3, r7, #27
 8003fac:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003fae:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d045      	beq.n	8004046 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <osThreadNew+0x74>
        name = attr->name;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d008      	beq.n	8003fee <osThreadNew+0x9a>
 8003fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fde:	2b38      	cmp	r3, #56	; 0x38
 8003fe0:	d805      	bhi.n	8003fee <osThreadNew+0x9a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <osThreadNew+0x9e>
        return (NULL);
 8003fee:	2300      	movs	r3, #0
 8003ff0:	e054      	b.n	800409c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	089b      	lsrs	r3, r3, #2
 8004000:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00e      	beq.n	8004028 <osThreadNew+0xd4>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	2b5f      	cmp	r3, #95	; 0x5f
 8004010:	d90a      	bls.n	8004028 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004016:	2b00      	cmp	r3, #0
 8004018:	d006      	beq.n	8004028 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <osThreadNew+0xd4>
        mem = 1;
 8004022:	2301      	movs	r3, #1
 8004024:	62bb      	str	r3, [r7, #40]	; 0x28
 8004026:	e010      	b.n	800404a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10c      	bne.n	800404a <osThreadNew+0xf6>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d108      	bne.n	800404a <osThreadNew+0xf6>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d104      	bne.n	800404a <osThreadNew+0xf6>
          mem = 0;
 8004040:	2300      	movs	r3, #0
 8004042:	62bb      	str	r3, [r7, #40]	; 0x28
 8004044:	e001      	b.n	800404a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004046:	2300      	movs	r3, #0
 8004048:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800404a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404c:	2b01      	cmp	r3, #1
 800404e:	d110      	bne.n	8004072 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004058:	9202      	str	r2, [sp, #8]
 800405a:	9301      	str	r3, [sp, #4]
 800405c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004064:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 ff90 	bl	8004f8c <xTaskCreateStatic>
 800406c:	4603      	mov	r3, r0
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	e013      	b.n	800409a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004074:	2b00      	cmp	r3, #0
 8004076:	d110      	bne.n	800409a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407a:	b29a      	uxth	r2, r3
 800407c:	f107 0314 	add.w	r3, r7, #20
 8004080:	9301      	str	r3, [sp, #4]
 8004082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 ffd7 	bl	800503e <xTaskCreate>
 8004090:	4603      	mov	r3, r0
 8004092:	2b01      	cmp	r3, #1
 8004094:	d001      	beq.n	800409a <osThreadNew+0x146>
          hTask = NULL;
 8004096:	2300      	movs	r3, #0
 8004098:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800409a:	697b      	ldr	r3, [r7, #20]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3738      	adds	r7, #56	; 0x38
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	20000698 	.word	0x20000698

080040a8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040b0:	f3ef 8305 	mrs	r3, IPSR
 80040b4:	613b      	str	r3, [r7, #16]
  return(result);
 80040b6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10f      	bne.n	80040dc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040bc:	f3ef 8310 	mrs	r3, PRIMASK
 80040c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d109      	bne.n	80040dc <osDelay+0x34>
 80040c8:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <osDelay+0x58>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d109      	bne.n	80040e4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040d0:	f3ef 8311 	mrs	r3, BASEPRI
 80040d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <osDelay+0x3c>
    stat = osErrorISR;
 80040dc:	f06f 0305 	mvn.w	r3, #5
 80040e0:	617b      	str	r3, [r7, #20]
 80040e2:	e007      	b.n	80040f4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f001 f8e4 	bl	80052bc <vTaskDelay>
    }
  }

  return (stat);
 80040f4:	697b      	ldr	r3, [r7, #20]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3718      	adds	r7, #24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20000698 	.word	0x20000698

08004104 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4a06      	ldr	r2, [pc, #24]	; (800412c <vApplicationGetIdleTaskMemory+0x28>)
 8004114:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	4a05      	ldr	r2, [pc, #20]	; (8004130 <vApplicationGetIdleTaskMemory+0x2c>)
 800411a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2280      	movs	r2, #128	; 0x80
 8004120:	601a      	str	r2, [r3, #0]
}
 8004122:	bf00      	nop
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr
 800412c:	2000069c 	.word	0x2000069c
 8004130:	200006fc 	.word	0x200006fc

08004134 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4a07      	ldr	r2, [pc, #28]	; (8004160 <vApplicationGetTimerTaskMemory+0x2c>)
 8004144:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	4a06      	ldr	r2, [pc, #24]	; (8004164 <vApplicationGetTimerTaskMemory+0x30>)
 800414a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004152:	601a      	str	r2, [r3, #0]
}
 8004154:	bf00      	nop
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	200008fc 	.word	0x200008fc
 8004164:	2000095c 	.word	0x2000095c

08004168 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f103 0208 	add.w	r2, r3, #8
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f04f 32ff 	mov.w	r2, #4294967295
 8004180:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f103 0208 	add.w	r2, r3, #8
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f103 0208 	add.w	r2, r3, #8
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr

080041a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr

080041be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041be:	b480      	push	{r7}
 80041c0:	b085      	sub	sp, #20
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
 80041c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	601a      	str	r2, [r3, #0]
}
 80041fa:	bf00      	nop
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	bc80      	pop	{r7}
 8004202:	4770      	bx	lr

08004204 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421a:	d103      	bne.n	8004224 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	e00c      	b.n	800423e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3308      	adds	r3, #8
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	e002      	b.n	8004232 <vListInsert+0x2e>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	429a      	cmp	r2, r3
 800423c:	d2f6      	bcs.n	800422c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	601a      	str	r2, [r3, #0]
}
 800426a:	bf00      	nop
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr

08004274 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6892      	ldr	r2, [r2, #8]
 800428a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6852      	ldr	r2, [r2, #4]
 8004294:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	429a      	cmp	r2, r3
 800429e:	d103      	bne.n	80042a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	1e5a      	subs	r2, r3, #1
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr
	...

080042c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d109      	bne.n	80042f0 <xQueueGenericReset+0x28>
 80042dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	e7fe      	b.n	80042ee <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80042f0:	f002 fd4a 	bl	8006d88 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fc:	68f9      	ldr	r1, [r7, #12]
 80042fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004300:	fb01 f303 	mul.w	r3, r1, r3
 8004304:	441a      	add	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004320:	3b01      	subs	r3, #1
 8004322:	68f9      	ldr	r1, [r7, #12]
 8004324:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004326:	fb01 f303 	mul.w	r3, r1, r3
 800432a:	441a      	add	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	22ff      	movs	r2, #255	; 0xff
 8004334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	22ff      	movs	r2, #255	; 0xff
 800433c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d114      	bne.n	8004370 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d01a      	beq.n	8004384 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	3310      	adds	r3, #16
 8004352:	4618      	mov	r0, r3
 8004354:	f001 fb70 	bl	8005a38 <xTaskRemoveFromEventList>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d012      	beq.n	8004384 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800435e:	4b0d      	ldr	r3, [pc, #52]	; (8004394 <xQueueGenericReset+0xcc>)
 8004360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	e009      	b.n	8004384 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3310      	adds	r3, #16
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff fef7 	bl	8004168 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	3324      	adds	r3, #36	; 0x24
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff fef2 	bl	8004168 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004384:	f002 fd2e 	bl	8006de4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004388:	2301      	movs	r3, #1
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	e000ed04 	.word	0xe000ed04

08004398 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08e      	sub	sp, #56	; 0x38
 800439c:	af02      	add	r7, sp, #8
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d109      	bne.n	80043c0 <xQueueGenericCreateStatic+0x28>
 80043ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b0:	f383 8811 	msr	BASEPRI, r3
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80043be:	e7fe      	b.n	80043be <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <xQueueGenericCreateStatic+0x42>
 80043c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	627b      	str	r3, [r7, #36]	; 0x24
 80043d8:	e7fe      	b.n	80043d8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <xQueueGenericCreateStatic+0x4e>
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <xQueueGenericCreateStatic+0x52>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <xQueueGenericCreateStatic+0x54>
 80043ea:	2300      	movs	r3, #0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d109      	bne.n	8004404 <xQueueGenericCreateStatic+0x6c>
 80043f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	623b      	str	r3, [r7, #32]
 8004402:	e7fe      	b.n	8004402 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d102      	bne.n	8004410 <xQueueGenericCreateStatic+0x78>
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <xQueueGenericCreateStatic+0x7c>
 8004410:	2301      	movs	r3, #1
 8004412:	e000      	b.n	8004416 <xQueueGenericCreateStatic+0x7e>
 8004414:	2300      	movs	r3, #0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d109      	bne.n	800442e <xQueueGenericCreateStatic+0x96>
 800441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	61fb      	str	r3, [r7, #28]
 800442c:	e7fe      	b.n	800442c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800442e:	2350      	movs	r3, #80	; 0x50
 8004430:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b50      	cmp	r3, #80	; 0x50
 8004436:	d009      	beq.n	800444c <xQueueGenericCreateStatic+0xb4>
 8004438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	61bb      	str	r3, [r7, #24]
 800444a:	e7fe      	b.n	800444a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00d      	beq.n	8004472 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800445e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	4613      	mov	r3, r2
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	68b9      	ldr	r1, [r7, #8]
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 f842 	bl	80044f6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004474:	4618      	mov	r0, r3
 8004476:	3730      	adds	r7, #48	; 0x30
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800447c:	b580      	push	{r7, lr}
 800447e:	b08a      	sub	sp, #40	; 0x28
 8004480:	af02      	add	r7, sp, #8
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	4613      	mov	r3, r2
 8004488:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d109      	bne.n	80044a4 <xQueueGenericCreate+0x28>
 8004490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004494:	f383 8811 	msr	BASEPRI, r3
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	613b      	str	r3, [r7, #16]
 80044a2:	e7fe      	b.n	80044a2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d102      	bne.n	80044b0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80044aa:	2300      	movs	r3, #0
 80044ac:	61fb      	str	r3, [r7, #28]
 80044ae:	e004      	b.n	80044ba <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	fb02 f303 	mul.w	r3, r2, r3
 80044b8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	3350      	adds	r3, #80	; 0x50
 80044be:	4618      	mov	r0, r3
 80044c0:	f002 fd58 	bl	8006f74 <pvPortMalloc>
 80044c4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00f      	beq.n	80044ec <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	3350      	adds	r3, #80	; 0x50
 80044d0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044da:	79fa      	ldrb	r2, [r7, #7]
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	4613      	mov	r3, r2
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 f805 	bl	80044f6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80044ec:	69bb      	ldr	r3, [r7, #24]
	}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3720      	adds	r7, #32
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b084      	sub	sp, #16
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	607a      	str	r2, [r7, #4]
 8004502:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d103      	bne.n	8004512 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	e002      	b.n	8004518 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004524:	2101      	movs	r1, #1
 8004526:	69b8      	ldr	r0, [r7, #24]
 8004528:	f7ff fece 	bl	80042c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	78fa      	ldrb	r2, [r7, #3]
 8004530:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004534:	bf00      	nop
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00e      	beq.n	8004568 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800455c:	2300      	movs	r3, #0
 800455e:	2200      	movs	r2, #0
 8004560:	2100      	movs	r1, #0
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f81c 	bl	80045a0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004568:	bf00      	nop
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	4603      	mov	r3, r0
 8004578:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800457a:	2301      	movs	r3, #1
 800457c:	617b      	str	r3, [r7, #20]
 800457e:	2300      	movs	r3, #0
 8004580:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004582:	79fb      	ldrb	r3, [r7, #7]
 8004584:	461a      	mov	r2, r3
 8004586:	6939      	ldr	r1, [r7, #16]
 8004588:	6978      	ldr	r0, [r7, #20]
 800458a:	f7ff ff77 	bl	800447c <xQueueGenericCreate>
 800458e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f7ff ffd3 	bl	800453c <prvInitialiseMutex>

		return pxNewQueue;
 8004596:	68fb      	ldr	r3, [r7, #12]
	}
 8004598:	4618      	mov	r0, r3
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08e      	sub	sp, #56	; 0x38
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80045ae:	2300      	movs	r3, #0
 80045b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80045b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d109      	bne.n	80045d0 <xQueueGenericSend+0x30>
 80045bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80045ce:	e7fe      	b.n	80045ce <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d103      	bne.n	80045de <xQueueGenericSend+0x3e>
 80045d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <xQueueGenericSend+0x42>
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <xQueueGenericSend+0x44>
 80045e2:	2300      	movs	r3, #0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d109      	bne.n	80045fc <xQueueGenericSend+0x5c>
 80045e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
 80045fa:	e7fe      	b.n	80045fa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d103      	bne.n	800460a <xQueueGenericSend+0x6a>
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <xQueueGenericSend+0x6e>
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <xQueueGenericSend+0x70>
 800460e:	2300      	movs	r3, #0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d109      	bne.n	8004628 <xQueueGenericSend+0x88>
 8004614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	623b      	str	r3, [r7, #32]
 8004626:	e7fe      	b.n	8004626 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004628:	f001 fc94 	bl	8005f54 <xTaskGetSchedulerState>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d102      	bne.n	8004638 <xQueueGenericSend+0x98>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <xQueueGenericSend+0x9c>
 8004638:	2301      	movs	r3, #1
 800463a:	e000      	b.n	800463e <xQueueGenericSend+0x9e>
 800463c:	2300      	movs	r3, #0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d109      	bne.n	8004656 <xQueueGenericSend+0xb6>
 8004642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004646:	f383 8811 	msr	BASEPRI, r3
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	61fb      	str	r3, [r7, #28]
 8004654:	e7fe      	b.n	8004654 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004656:	f002 fb97 	bl	8006d88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800465e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004662:	429a      	cmp	r2, r3
 8004664:	d302      	bcc.n	800466c <xQueueGenericSend+0xcc>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b02      	cmp	r3, #2
 800466a:	d129      	bne.n	80046c0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	68b9      	ldr	r1, [r7, #8]
 8004670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004672:	f000 fb1e 	bl	8004cb2 <prvCopyDataToQueue>
 8004676:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	2b00      	cmp	r3, #0
 800467e:	d010      	beq.n	80046a2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004682:	3324      	adds	r3, #36	; 0x24
 8004684:	4618      	mov	r0, r3
 8004686:	f001 f9d7 	bl	8005a38 <xTaskRemoveFromEventList>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d013      	beq.n	80046b8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004690:	4b3f      	ldr	r3, [pc, #252]	; (8004790 <xQueueGenericSend+0x1f0>)
 8004692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	e00a      	b.n	80046b8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80046a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d007      	beq.n	80046b8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80046a8:	4b39      	ldr	r3, [pc, #228]	; (8004790 <xQueueGenericSend+0x1f0>)
 80046aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80046b8:	f002 fb94 	bl	8006de4 <vPortExitCritical>
				return pdPASS;
 80046bc:	2301      	movs	r3, #1
 80046be:	e063      	b.n	8004788 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d103      	bne.n	80046ce <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046c6:	f002 fb8d 	bl	8006de4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80046ca:	2300      	movs	r3, #0
 80046cc:	e05c      	b.n	8004788 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d106      	bne.n	80046e2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046d4:	f107 0314 	add.w	r3, r7, #20
 80046d8:	4618      	mov	r0, r3
 80046da:	f001 fa0f 	bl	8005afc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046de:	2301      	movs	r3, #1
 80046e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046e2:	f002 fb7f 	bl	8006de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046e6:	f000 fedb 	bl	80054a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046ea:	f002 fb4d 	bl	8006d88 <vPortEnterCritical>
 80046ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046f4:	b25b      	sxtb	r3, r3
 80046f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fa:	d103      	bne.n	8004704 <xQueueGenericSend+0x164>
 80046fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004706:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800470a:	b25b      	sxtb	r3, r3
 800470c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004710:	d103      	bne.n	800471a <xQueueGenericSend+0x17a>
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800471a:	f002 fb63 	bl	8006de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800471e:	1d3a      	adds	r2, r7, #4
 8004720:	f107 0314 	add.w	r3, r7, #20
 8004724:	4611      	mov	r1, r2
 8004726:	4618      	mov	r0, r3
 8004728:	f001 f9fe 	bl	8005b28 <xTaskCheckForTimeOut>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d124      	bne.n	800477c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004732:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004734:	f000 fbb5 	bl	8004ea2 <prvIsQueueFull>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d018      	beq.n	8004770 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800473e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004740:	3310      	adds	r3, #16
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	4611      	mov	r1, r2
 8004746:	4618      	mov	r0, r3
 8004748:	f001 f928 	bl	800599c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800474c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800474e:	f000 fb40 	bl	8004dd2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004752:	f000 feb3 	bl	80054bc <xTaskResumeAll>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	f47f af7c 	bne.w	8004656 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800475e:	4b0c      	ldr	r3, [pc, #48]	; (8004790 <xQueueGenericSend+0x1f0>)
 8004760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	e772      	b.n	8004656 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004772:	f000 fb2e 	bl	8004dd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004776:	f000 fea1 	bl	80054bc <xTaskResumeAll>
 800477a:	e76c      	b.n	8004656 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800477c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800477e:	f000 fb28 	bl	8004dd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004782:	f000 fe9b 	bl	80054bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004786:	2300      	movs	r3, #0
		}
	}
}
 8004788:	4618      	mov	r0, r3
 800478a:	3738      	adds	r7, #56	; 0x38
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	e000ed04 	.word	0xe000ed04

08004794 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b08e      	sub	sp, #56	; 0x38
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
 80047a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80047a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d109      	bne.n	80047c0 <xQueueGenericSendFromISR+0x2c>
 80047ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	627b      	str	r3, [r7, #36]	; 0x24
 80047be:	e7fe      	b.n	80047be <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d103      	bne.n	80047ce <xQueueGenericSendFromISR+0x3a>
 80047c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <xQueueGenericSendFromISR+0x3e>
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <xQueueGenericSendFromISR+0x40>
 80047d2:	2300      	movs	r3, #0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d109      	bne.n	80047ec <xQueueGenericSendFromISR+0x58>
 80047d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	623b      	str	r3, [r7, #32]
 80047ea:	e7fe      	b.n	80047ea <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d103      	bne.n	80047fa <xQueueGenericSendFromISR+0x66>
 80047f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <xQueueGenericSendFromISR+0x6a>
 80047fa:	2301      	movs	r3, #1
 80047fc:	e000      	b.n	8004800 <xQueueGenericSendFromISR+0x6c>
 80047fe:	2300      	movs	r3, #0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d109      	bne.n	8004818 <xQueueGenericSendFromISR+0x84>
 8004804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	61fb      	str	r3, [r7, #28]
 8004816:	e7fe      	b.n	8004816 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004818:	f002 fb70 	bl	8006efc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800481c:	f3ef 8211 	mrs	r2, BASEPRI
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	61ba      	str	r2, [r7, #24]
 8004832:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004834:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004836:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800483c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004840:	429a      	cmp	r2, r3
 8004842:	d302      	bcc.n	800484a <xQueueGenericSendFromISR+0xb6>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	2b02      	cmp	r3, #2
 8004848:	d12c      	bne.n	80048a4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800484a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	68b9      	ldr	r1, [r7, #8]
 8004858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800485a:	f000 fa2a 	bl	8004cb2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800485e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004866:	d112      	bne.n	800488e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	2b00      	cmp	r3, #0
 800486e:	d016      	beq.n	800489e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004872:	3324      	adds	r3, #36	; 0x24
 8004874:	4618      	mov	r0, r3
 8004876:	f001 f8df 	bl	8005a38 <xTaskRemoveFromEventList>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00e      	beq.n	800489e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00b      	beq.n	800489e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	e007      	b.n	800489e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800488e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004892:	3301      	adds	r3, #1
 8004894:	b2db      	uxtb	r3, r3
 8004896:	b25a      	sxtb	r2, r3
 8004898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800489e:	2301      	movs	r3, #1
 80048a0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80048a2:	e001      	b.n	80048a8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80048a4:	2300      	movs	r3, #0
 80048a6:	637b      	str	r3, [r7, #52]	; 0x34
 80048a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048aa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80048b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3738      	adds	r7, #56	; 0x38
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08c      	sub	sp, #48	; 0x30
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80048c8:	2300      	movs	r3, #0
 80048ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d109      	bne.n	80048ea <xQueueReceive+0x2e>
	__asm volatile
 80048d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048da:	f383 8811 	msr	BASEPRI, r3
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	623b      	str	r3, [r7, #32]
 80048e8:	e7fe      	b.n	80048e8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d103      	bne.n	80048f8 <xQueueReceive+0x3c>
 80048f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <xQueueReceive+0x40>
 80048f8:	2301      	movs	r3, #1
 80048fa:	e000      	b.n	80048fe <xQueueReceive+0x42>
 80048fc:	2300      	movs	r3, #0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d109      	bne.n	8004916 <xQueueReceive+0x5a>
 8004902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004906:	f383 8811 	msr	BASEPRI, r3
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	61fb      	str	r3, [r7, #28]
 8004914:	e7fe      	b.n	8004914 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004916:	f001 fb1d 	bl	8005f54 <xTaskGetSchedulerState>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d102      	bne.n	8004926 <xQueueReceive+0x6a>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <xQueueReceive+0x6e>
 8004926:	2301      	movs	r3, #1
 8004928:	e000      	b.n	800492c <xQueueReceive+0x70>
 800492a:	2300      	movs	r3, #0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d109      	bne.n	8004944 <xQueueReceive+0x88>
 8004930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	61bb      	str	r3, [r7, #24]
 8004942:	e7fe      	b.n	8004942 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004944:	f002 fa20 	bl	8006d88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	2b00      	cmp	r3, #0
 8004952:	d01f      	beq.n	8004994 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004954:	68b9      	ldr	r1, [r7, #8]
 8004956:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004958:	f000 fa15 	bl	8004d86 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	1e5a      	subs	r2, r3, #1
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00f      	beq.n	800498c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800496c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496e:	3310      	adds	r3, #16
 8004970:	4618      	mov	r0, r3
 8004972:	f001 f861 	bl	8005a38 <xTaskRemoveFromEventList>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d007      	beq.n	800498c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800497c:	4b3c      	ldr	r3, [pc, #240]	; (8004a70 <xQueueReceive+0x1b4>)
 800497e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800498c:	f002 fa2a 	bl	8006de4 <vPortExitCritical>
				return pdPASS;
 8004990:	2301      	movs	r3, #1
 8004992:	e069      	b.n	8004a68 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d103      	bne.n	80049a2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800499a:	f002 fa23 	bl	8006de4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800499e:	2300      	movs	r3, #0
 80049a0:	e062      	b.n	8004a68 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d106      	bne.n	80049b6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049a8:	f107 0310 	add.w	r3, r7, #16
 80049ac:	4618      	mov	r0, r3
 80049ae:	f001 f8a5 	bl	8005afc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049b2:	2301      	movs	r3, #1
 80049b4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049b6:	f002 fa15 	bl	8006de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049ba:	f000 fd71 	bl	80054a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049be:	f002 f9e3 	bl	8006d88 <vPortEnterCritical>
 80049c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049c8:	b25b      	sxtb	r3, r3
 80049ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ce:	d103      	bne.n	80049d8 <xQueueReceive+0x11c>
 80049d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049de:	b25b      	sxtb	r3, r3
 80049e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e4:	d103      	bne.n	80049ee <xQueueReceive+0x132>
 80049e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049ee:	f002 f9f9 	bl	8006de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049f2:	1d3a      	adds	r2, r7, #4
 80049f4:	f107 0310 	add.w	r3, r7, #16
 80049f8:	4611      	mov	r1, r2
 80049fa:	4618      	mov	r0, r3
 80049fc:	f001 f894 	bl	8005b28 <xTaskCheckForTimeOut>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d123      	bne.n	8004a4e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a08:	f000 fa35 	bl	8004e76 <prvIsQueueEmpty>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d017      	beq.n	8004a42 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a14:	3324      	adds	r3, #36	; 0x24
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	4611      	mov	r1, r2
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 ffbe 	bl	800599c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a22:	f000 f9d6 	bl	8004dd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a26:	f000 fd49 	bl	80054bc <xTaskResumeAll>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d189      	bne.n	8004944 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004a30:	4b0f      	ldr	r3, [pc, #60]	; (8004a70 <xQueueReceive+0x1b4>)
 8004a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	e780      	b.n	8004944 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a44:	f000 f9c5 	bl	8004dd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a48:	f000 fd38 	bl	80054bc <xTaskResumeAll>
 8004a4c:	e77a      	b.n	8004944 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a50:	f000 f9bf 	bl	8004dd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a54:	f000 fd32 	bl	80054bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a5a:	f000 fa0c 	bl	8004e76 <prvIsQueueEmpty>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f43f af6f 	beq.w	8004944 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a66:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3730      	adds	r7, #48	; 0x30
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	e000ed04 	.word	0xe000ed04

08004a74 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b08e      	sub	sp, #56	; 0x38
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004a86:	2300      	movs	r3, #0
 8004a88:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d109      	bne.n	8004aa4 <xQueueSemaphoreTake+0x30>
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	623b      	str	r3, [r7, #32]
 8004aa2:	e7fe      	b.n	8004aa2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d009      	beq.n	8004ac0 <xQueueSemaphoreTake+0x4c>
 8004aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	61fb      	str	r3, [r7, #28]
 8004abe:	e7fe      	b.n	8004abe <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ac0:	f001 fa48 	bl	8005f54 <xTaskGetSchedulerState>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d102      	bne.n	8004ad0 <xQueueSemaphoreTake+0x5c>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <xQueueSemaphoreTake+0x60>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e000      	b.n	8004ad6 <xQueueSemaphoreTake+0x62>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d109      	bne.n	8004aee <xQueueSemaphoreTake+0x7a>
 8004ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ade:	f383 8811 	msr	BASEPRI, r3
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	61bb      	str	r3, [r7, #24]
 8004aec:	e7fe      	b.n	8004aec <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004aee:	f002 f94b 	bl	8006d88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d024      	beq.n	8004b48 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b00:	1e5a      	subs	r2, r3, #1
 8004b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b04:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d104      	bne.n	8004b18 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004b0e:	f001 fcdf 	bl	80064d0 <pvTaskIncrementMutexHeldCount>
 8004b12:	4602      	mov	r2, r0
 8004b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b16:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00f      	beq.n	8004b40 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b22:	3310      	adds	r3, #16
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 ff87 	bl	8005a38 <xTaskRemoveFromEventList>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d007      	beq.n	8004b40 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b30:	4b53      	ldr	r3, [pc, #332]	; (8004c80 <xQueueSemaphoreTake+0x20c>)
 8004b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b40:	f002 f950 	bl	8006de4 <vPortExitCritical>
				return pdPASS;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e096      	b.n	8004c76 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d110      	bne.n	8004b70 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d009      	beq.n	8004b68 <xQueueSemaphoreTake+0xf4>
 8004b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	617b      	str	r3, [r7, #20]
 8004b66:	e7fe      	b.n	8004b66 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004b68:	f002 f93c 	bl	8006de4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	e082      	b.n	8004c76 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d106      	bne.n	8004b84 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b76:	f107 030c 	add.w	r3, r7, #12
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 ffbe 	bl	8005afc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b80:	2301      	movs	r3, #1
 8004b82:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b84:	f002 f92e 	bl	8006de4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b88:	f000 fc8a 	bl	80054a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b8c:	f002 f8fc 	bl	8006d88 <vPortEnterCritical>
 8004b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b96:	b25b      	sxtb	r3, r3
 8004b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9c:	d103      	bne.n	8004ba6 <xQueueSemaphoreTake+0x132>
 8004b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bac:	b25b      	sxtb	r3, r3
 8004bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb2:	d103      	bne.n	8004bbc <xQueueSemaphoreTake+0x148>
 8004bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bbc:	f002 f912 	bl	8006de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bc0:	463a      	mov	r2, r7
 8004bc2:	f107 030c 	add.w	r3, r7, #12
 8004bc6:	4611      	mov	r1, r2
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 ffad 	bl	8005b28 <xTaskCheckForTimeOut>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d132      	bne.n	8004c3a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bd6:	f000 f94e 	bl	8004e76 <prvIsQueueEmpty>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d026      	beq.n	8004c2e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d109      	bne.n	8004bfc <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8004be8:	f002 f8ce 	bl	8006d88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f001 f9cd 	bl	8005f90 <xTaskPriorityInherit>
 8004bf6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004bf8:	f002 f8f4 	bl	8006de4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfe:	3324      	adds	r3, #36	; 0x24
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	4611      	mov	r1, r2
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 fec9 	bl	800599c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c0c:	f000 f8e1 	bl	8004dd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c10:	f000 fc54 	bl	80054bc <xTaskResumeAll>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f47f af69 	bne.w	8004aee <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004c1c:	4b18      	ldr	r3, [pc, #96]	; (8004c80 <xQueueSemaphoreTake+0x20c>)
 8004c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	e75f      	b.n	8004aee <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004c2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c30:	f000 f8cf 	bl	8004dd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c34:	f000 fc42 	bl	80054bc <xTaskResumeAll>
 8004c38:	e759      	b.n	8004aee <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004c3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c3c:	f000 f8c9 	bl	8004dd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c40:	f000 fc3c 	bl	80054bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c46:	f000 f916 	bl	8004e76 <prvIsQueueEmpty>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f43f af4e 	beq.w	8004aee <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00d      	beq.n	8004c74 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004c58:	f002 f896 	bl	8006d88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004c5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c5e:	f000 f811 	bl	8004c84 <prvGetDisinheritPriorityAfterTimeout>
 8004c62:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f001 fa6a 	bl	8006144 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004c70:	f002 f8b8 	bl	8006de4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3738      	adds	r7, #56	; 0x38
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	e000ed04 	.word	0xe000ed04

08004c84 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d006      	beq.n	8004ca2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	e001      	b.n	8004ca6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
	}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bc80      	pop	{r7}
 8004cb0:	4770      	bx	lr

08004cb2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b086      	sub	sp, #24
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	60f8      	str	r0, [r7, #12]
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10d      	bne.n	8004cec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d14d      	bne.n	8004d74 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f001 f9c5 	bl	800606c <xTaskPriorityDisinherit>
 8004ce2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	605a      	str	r2, [r3, #4]
 8004cea:	e043      	b.n	8004d74 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d119      	bne.n	8004d26 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6898      	ldr	r0, [r3, #8]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	68b9      	ldr	r1, [r7, #8]
 8004cfe:	f002 fb3b 	bl	8007378 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	441a      	add	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d32b      	bcc.n	8004d74 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	609a      	str	r2, [r3, #8]
 8004d24:	e026      	b.n	8004d74 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	68d8      	ldr	r0, [r3, #12]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	461a      	mov	r2, r3
 8004d30:	68b9      	ldr	r1, [r7, #8]
 8004d32:	f002 fb21 	bl	8007378 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	425b      	negs	r3, r3
 8004d40:	441a      	add	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d207      	bcs.n	8004d62 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	425b      	negs	r3, r3
 8004d5c:	441a      	add	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d105      	bne.n	8004d74 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004d7c:	697b      	ldr	r3, [r7, #20]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d018      	beq.n	8004dca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	441a      	add	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d303      	bcc.n	8004dba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68d9      	ldr	r1, [r3, #12]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	6838      	ldr	r0, [r7, #0]
 8004dc6:	f002 fad7 	bl	8007378 <memcpy>
	}
}
 8004dca:	bf00      	nop
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b084      	sub	sp, #16
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004dda:	f001 ffd5 	bl	8006d88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004de4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004de6:	e011      	b.n	8004e0c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d012      	beq.n	8004e16 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3324      	adds	r3, #36	; 0x24
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 fe1f 	bl	8005a38 <xTaskRemoveFromEventList>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e00:	f000 fef2 	bl	8005be8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	dce9      	bgt.n	8004de8 <prvUnlockQueue+0x16>
 8004e14:	e000      	b.n	8004e18 <prvUnlockQueue+0x46>
					break;
 8004e16:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	22ff      	movs	r2, #255	; 0xff
 8004e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004e20:	f001 ffe0 	bl	8006de4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e24:	f001 ffb0 	bl	8006d88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e2e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e30:	e011      	b.n	8004e56 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d012      	beq.n	8004e60 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	3310      	adds	r3, #16
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fdfa 	bl	8005a38 <xTaskRemoveFromEventList>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e4a:	f000 fecd 	bl	8005be8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e4e:	7bbb      	ldrb	r3, [r7, #14]
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	dce9      	bgt.n	8004e32 <prvUnlockQueue+0x60>
 8004e5e:	e000      	b.n	8004e62 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e60:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	22ff      	movs	r2, #255	; 0xff
 8004e66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004e6a:	f001 ffbb 	bl	8006de4 <vPortExitCritical>
}
 8004e6e:	bf00      	nop
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b084      	sub	sp, #16
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e7e:	f001 ff83 	bl	8006d88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d102      	bne.n	8004e90 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	e001      	b.n	8004e94 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e90:	2300      	movs	r3, #0
 8004e92:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e94:	f001 ffa6 	bl	8006de4 <vPortExitCritical>

	return xReturn;
 8004e98:	68fb      	ldr	r3, [r7, #12]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b084      	sub	sp, #16
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004eaa:	f001 ff6d 	bl	8006d88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d102      	bne.n	8004ec0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	e001      	b.n	8004ec4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ec4:	f001 ff8e 	bl	8006de4 <vPortExitCritical>

	return xReturn;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	e014      	b.n	8004f0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ee4:	4a0e      	ldr	r2, [pc, #56]	; (8004f20 <vQueueAddToRegistry+0x4c>)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10b      	bne.n	8004f08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ef0:	490b      	ldr	r1, [pc, #44]	; (8004f20 <vQueueAddToRegistry+0x4c>)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004efa:	4a09      	ldr	r2, [pc, #36]	; (8004f20 <vQueueAddToRegistry+0x4c>)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	4413      	add	r3, r2
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004f06:	e005      	b.n	8004f14 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2b07      	cmp	r3, #7
 8004f12:	d9e7      	bls.n	8004ee4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f14:	bf00      	nop
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bc80      	pop	{r7}
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	2000205c 	.word	0x2000205c

08004f24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004f34:	f001 ff28 	bl	8006d88 <vPortEnterCritical>
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f3e:	b25b      	sxtb	r3, r3
 8004f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f44:	d103      	bne.n	8004f4e <vQueueWaitForMessageRestricted+0x2a>
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f54:	b25b      	sxtb	r3, r3
 8004f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5a:	d103      	bne.n	8004f64 <vQueueWaitForMessageRestricted+0x40>
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f64:	f001 ff3e 	bl	8006de4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d106      	bne.n	8004f7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	3324      	adds	r3, #36	; 0x24
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	68b9      	ldr	r1, [r7, #8]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fd33 	bl	80059e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004f7e:	6978      	ldr	r0, [r7, #20]
 8004f80:	f7ff ff27 	bl	8004dd2 <prvUnlockQueue>
	}
 8004f84:	bf00      	nop
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b08e      	sub	sp, #56	; 0x38
 8004f90:	af04      	add	r7, sp, #16
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
 8004f98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d109      	bne.n	8004fb4 <xTaskCreateStatic+0x28>
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	623b      	str	r3, [r7, #32]
 8004fb2:	e7fe      	b.n	8004fb2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <xTaskCreateStatic+0x42>
 8004fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	e7fe      	b.n	8004fcc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004fce:	2360      	movs	r3, #96	; 0x60
 8004fd0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	2b60      	cmp	r3, #96	; 0x60
 8004fd6:	d009      	beq.n	8004fec <xTaskCreateStatic+0x60>
 8004fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	61bb      	str	r3, [r7, #24]
 8004fea:	e7fe      	b.n	8004fea <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d01e      	beq.n	8005030 <xTaskCreateStatic+0xa4>
 8004ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01b      	beq.n	8005030 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005000:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	2202      	movs	r2, #2
 8005006:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800500a:	2300      	movs	r3, #0
 800500c:	9303      	str	r3, [sp, #12]
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	9302      	str	r3, [sp, #8]
 8005012:	f107 0314 	add.w	r3, r7, #20
 8005016:	9301      	str	r3, [sp, #4]
 8005018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	68b9      	ldr	r1, [r7, #8]
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 f850 	bl	80050c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005028:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800502a:	f000 f8d7 	bl	80051dc <prvAddNewTaskToReadyList>
 800502e:	e001      	b.n	8005034 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005030:	2300      	movs	r3, #0
 8005032:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005034:	697b      	ldr	r3, [r7, #20]
	}
 8005036:	4618      	mov	r0, r3
 8005038:	3728      	adds	r7, #40	; 0x28
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800503e:	b580      	push	{r7, lr}
 8005040:	b08c      	sub	sp, #48	; 0x30
 8005042:	af04      	add	r7, sp, #16
 8005044:	60f8      	str	r0, [r7, #12]
 8005046:	60b9      	str	r1, [r7, #8]
 8005048:	603b      	str	r3, [r7, #0]
 800504a:	4613      	mov	r3, r2
 800504c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4618      	mov	r0, r3
 8005054:	f001 ff8e 	bl	8006f74 <pvPortMalloc>
 8005058:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00e      	beq.n	800507e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005060:	2060      	movs	r0, #96	; 0x60
 8005062:	f001 ff87 	bl	8006f74 <pvPortMalloc>
 8005066:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	631a      	str	r2, [r3, #48]	; 0x30
 8005074:	e005      	b.n	8005082 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005076:	6978      	ldr	r0, [r7, #20]
 8005078:	f002 f83e 	bl	80070f8 <vPortFree>
 800507c:	e001      	b.n	8005082 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800507e:	2300      	movs	r3, #0
 8005080:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d017      	beq.n	80050b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005090:	88fa      	ldrh	r2, [r7, #6]
 8005092:	2300      	movs	r3, #0
 8005094:	9303      	str	r3, [sp, #12]
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	9302      	str	r3, [sp, #8]
 800509a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509c:	9301      	str	r3, [sp, #4]
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 f80e 	bl	80050c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050ac:	69f8      	ldr	r0, [r7, #28]
 80050ae:	f000 f895 	bl	80051dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80050b2:	2301      	movs	r3, #1
 80050b4:	61bb      	str	r3, [r7, #24]
 80050b6:	e002      	b.n	80050be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80050b8:	f04f 33ff 	mov.w	r3, #4294967295
 80050bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80050be:	69bb      	ldr	r3, [r7, #24]
	}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3720      	adds	r7, #32
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b088      	sub	sp, #32
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
 80050d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80050d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	461a      	mov	r2, r3
 80050e0:	21a5      	movs	r1, #165	; 0xa5
 80050e2:	f002 f954 	bl	800738e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80050f0:	3b01      	subs	r3, #1
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	f023 0307 	bic.w	r3, r3, #7
 80050fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	2b00      	cmp	r3, #0
 8005108:	d009      	beq.n	800511e <prvInitialiseNewTask+0x56>
 800510a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	617b      	str	r3, [r7, #20]
 800511c:	e7fe      	b.n	800511c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800511e:	2300      	movs	r3, #0
 8005120:	61fb      	str	r3, [r7, #28]
 8005122:	e012      	b.n	800514a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	4413      	add	r3, r2
 800512a:	7819      	ldrb	r1, [r3, #0]
 800512c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	4413      	add	r3, r2
 8005132:	3334      	adds	r3, #52	; 0x34
 8005134:	460a      	mov	r2, r1
 8005136:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	4413      	add	r3, r2
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d006      	beq.n	8005152 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	3301      	adds	r3, #1
 8005148:	61fb      	str	r3, [r7, #28]
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	2b0f      	cmp	r3, #15
 800514e:	d9e9      	bls.n	8005124 <prvInitialiseNewTask+0x5c>
 8005150:	e000      	b.n	8005154 <prvInitialiseNewTask+0x8c>
		{
			break;
 8005152:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005156:	2200      	movs	r2, #0
 8005158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800515c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515e:	2b37      	cmp	r3, #55	; 0x37
 8005160:	d901      	bls.n	8005166 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005162:	2337      	movs	r3, #55	; 0x37
 8005164:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800516a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800516c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005170:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	2200      	movs	r2, #0
 8005176:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517a:	3304      	adds	r3, #4
 800517c:	4618      	mov	r0, r3
 800517e:	f7ff f812 	bl	80041a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005184:	3318      	adds	r3, #24
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff f80d 	bl	80041a6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800518c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005190:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800519c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051a0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a4:	2200      	movs	r2, #0
 80051a6:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80051a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051aa:	2200      	movs	r2, #0
 80051ac:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	68f9      	ldr	r1, [r7, #12]
 80051ba:	69b8      	ldr	r0, [r7, #24]
 80051bc:	f001 fcfa 	bl	8006bb4 <pxPortInitialiseStack>
 80051c0:	4602      	mov	r2, r0
 80051c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80051c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80051cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051d2:	bf00      	nop
 80051d4:	3720      	adds	r7, #32
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
	...

080051dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80051e4:	f001 fdd0 	bl	8006d88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80051e8:	4b2d      	ldr	r3, [pc, #180]	; (80052a0 <prvAddNewTaskToReadyList+0xc4>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3301      	adds	r3, #1
 80051ee:	4a2c      	ldr	r2, [pc, #176]	; (80052a0 <prvAddNewTaskToReadyList+0xc4>)
 80051f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80051f2:	4b2c      	ldr	r3, [pc, #176]	; (80052a4 <prvAddNewTaskToReadyList+0xc8>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d109      	bne.n	800520e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80051fa:	4a2a      	ldr	r2, [pc, #168]	; (80052a4 <prvAddNewTaskToReadyList+0xc8>)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005200:	4b27      	ldr	r3, [pc, #156]	; (80052a0 <prvAddNewTaskToReadyList+0xc4>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d110      	bne.n	800522a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005208:	f000 fd12 	bl	8005c30 <prvInitialiseTaskLists>
 800520c:	e00d      	b.n	800522a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800520e:	4b26      	ldr	r3, [pc, #152]	; (80052a8 <prvAddNewTaskToReadyList+0xcc>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d109      	bne.n	800522a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005216:	4b23      	ldr	r3, [pc, #140]	; (80052a4 <prvAddNewTaskToReadyList+0xc8>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005220:	429a      	cmp	r2, r3
 8005222:	d802      	bhi.n	800522a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005224:	4a1f      	ldr	r2, [pc, #124]	; (80052a4 <prvAddNewTaskToReadyList+0xc8>)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800522a:	4b20      	ldr	r3, [pc, #128]	; (80052ac <prvAddNewTaskToReadyList+0xd0>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3301      	adds	r3, #1
 8005230:	4a1e      	ldr	r2, [pc, #120]	; (80052ac <prvAddNewTaskToReadyList+0xd0>)
 8005232:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005234:	4b1d      	ldr	r3, [pc, #116]	; (80052ac <prvAddNewTaskToReadyList+0xd0>)
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005240:	4b1b      	ldr	r3, [pc, #108]	; (80052b0 <prvAddNewTaskToReadyList+0xd4>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	429a      	cmp	r2, r3
 8005246:	d903      	bls.n	8005250 <prvAddNewTaskToReadyList+0x74>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	4a18      	ldr	r2, [pc, #96]	; (80052b0 <prvAddNewTaskToReadyList+0xd4>)
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005254:	4613      	mov	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4a15      	ldr	r2, [pc, #84]	; (80052b4 <prvAddNewTaskToReadyList+0xd8>)
 800525e:	441a      	add	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	3304      	adds	r3, #4
 8005264:	4619      	mov	r1, r3
 8005266:	4610      	mov	r0, r2
 8005268:	f7fe ffa9 	bl	80041be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800526c:	f001 fdba 	bl	8006de4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005270:	4b0d      	ldr	r3, [pc, #52]	; (80052a8 <prvAddNewTaskToReadyList+0xcc>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00e      	beq.n	8005296 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005278:	4b0a      	ldr	r3, [pc, #40]	; (80052a4 <prvAddNewTaskToReadyList+0xc8>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005282:	429a      	cmp	r2, r3
 8005284:	d207      	bcs.n	8005296 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005286:	4b0c      	ldr	r3, [pc, #48]	; (80052b8 <prvAddNewTaskToReadyList+0xdc>)
 8005288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005296:	bf00      	nop
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	20001230 	.word	0x20001230
 80052a4:	20000d5c 	.word	0x20000d5c
 80052a8:	2000123c 	.word	0x2000123c
 80052ac:	2000124c 	.word	0x2000124c
 80052b0:	20001238 	.word	0x20001238
 80052b4:	20000d60 	.word	0x20000d60
 80052b8:	e000ed04 	.word	0xe000ed04

080052bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80052c4:	2300      	movs	r3, #0
 80052c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d016      	beq.n	80052fc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80052ce:	4b13      	ldr	r3, [pc, #76]	; (800531c <vTaskDelay+0x60>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d009      	beq.n	80052ea <vTaskDelay+0x2e>
 80052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	60bb      	str	r3, [r7, #8]
 80052e8:	e7fe      	b.n	80052e8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80052ea:	f000 f8d9 	bl	80054a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80052ee:	2100      	movs	r1, #0
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f001 f901 	bl	80064f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80052f6:	f000 f8e1 	bl	80054bc <xTaskResumeAll>
 80052fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d107      	bne.n	8005312 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005302:	4b07      	ldr	r3, [pc, #28]	; (8005320 <vTaskDelay+0x64>)
 8005304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005312:	bf00      	nop
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	20001258 	.word	0x20001258
 8005320:	e000ed04 	.word	0xe000ed04

08005324 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	613b      	str	r3, [r7, #16]

		configASSERT( pxTCB );
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d109      	bne.n	800534a <eTaskGetState+0x26>
 8005336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533a:	f383 8811 	msr	BASEPRI, r3
 800533e:	f3bf 8f6f 	isb	sy
 8005342:	f3bf 8f4f 	dsb	sy
 8005346:	60bb      	str	r3, [r7, #8]
 8005348:	e7fe      	b.n	8005348 <eTaskGetState+0x24>

		if( pxTCB == pxCurrentTCB )
 800534a:	4b1d      	ldr	r3, [pc, #116]	; (80053c0 <eTaskGetState+0x9c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	429a      	cmp	r2, r3
 8005352:	d102      	bne.n	800535a <eTaskGetState+0x36>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8005354:	2300      	movs	r3, #0
 8005356:	75fb      	strb	r3, [r7, #23]
 8005358:	e02d      	b.n	80053b6 <eTaskGetState+0x92>
		}
		else
		{
			taskENTER_CRITICAL();
 800535a:	f001 fd15 	bl	8006d88 <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8005364:	f001 fd3e 	bl	8006de4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 8005368:	4b16      	ldr	r3, [pc, #88]	; (80053c4 <eTaskGetState+0xa0>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	429a      	cmp	r2, r3
 8005370:	d004      	beq.n	800537c <eTaskGetState+0x58>
 8005372:	4b15      	ldr	r3, [pc, #84]	; (80053c8 <eTaskGetState+0xa4>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	429a      	cmp	r2, r3
 800537a:	d102      	bne.n	8005382 <eTaskGetState+0x5e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800537c:	2302      	movs	r3, #2
 800537e:	75fb      	strb	r3, [r7, #23]
 8005380:	e019      	b.n	80053b6 <eTaskGetState+0x92>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	4a11      	ldr	r2, [pc, #68]	; (80053cc <eTaskGetState+0xa8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d109      	bne.n	800539e <eTaskGetState+0x7a>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538e:	2b00      	cmp	r3, #0
 8005390:	d102      	bne.n	8005398 <eTaskGetState+0x74>
					{
						eReturn = eSuspended;
 8005392:	2303      	movs	r3, #3
 8005394:	75fb      	strb	r3, [r7, #23]
 8005396:	e00e      	b.n	80053b6 <eTaskGetState+0x92>
					}
					else
					{
						eReturn = eBlocked;
 8005398:	2302      	movs	r3, #2
 800539a:	75fb      	strb	r3, [r7, #23]
 800539c:	e00b      	b.n	80053b6 <eTaskGetState+0x92>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4a0b      	ldr	r2, [pc, #44]	; (80053d0 <eTaskGetState+0xac>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d002      	beq.n	80053ac <eTaskGetState+0x88>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d102      	bne.n	80053b2 <eTaskGetState+0x8e>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80053ac:	2304      	movs	r3, #4
 80053ae:	75fb      	strb	r3, [r7, #23]
 80053b0:	e001      	b.n	80053b6 <eTaskGetState+0x92>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80053b2:	2301      	movs	r3, #1
 80053b4:	75fb      	strb	r3, [r7, #23]
			}
		}

		return eReturn;
 80053b6:	7dfb      	ldrb	r3, [r7, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80053b8:	4618      	mov	r0, r3
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	20000d5c 	.word	0x20000d5c
 80053c4:	200011e8 	.word	0x200011e8
 80053c8:	200011ec 	.word	0x200011ec
 80053cc:	2000121c 	.word	0x2000121c
 80053d0:	20001204 	.word	0x20001204

080053d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08a      	sub	sp, #40	; 0x28
 80053d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053da:	2300      	movs	r3, #0
 80053dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053e2:	463a      	mov	r2, r7
 80053e4:	1d39      	adds	r1, r7, #4
 80053e6:	f107 0308 	add.w	r3, r7, #8
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fe fe8a 	bl	8004104 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053f0:	6839      	ldr	r1, [r7, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	9202      	str	r2, [sp, #8]
 80053f8:	9301      	str	r3, [sp, #4]
 80053fa:	2300      	movs	r3, #0
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	2300      	movs	r3, #0
 8005400:	460a      	mov	r2, r1
 8005402:	4921      	ldr	r1, [pc, #132]	; (8005488 <vTaskStartScheduler+0xb4>)
 8005404:	4821      	ldr	r0, [pc, #132]	; (800548c <vTaskStartScheduler+0xb8>)
 8005406:	f7ff fdc1 	bl	8004f8c <xTaskCreateStatic>
 800540a:	4602      	mov	r2, r0
 800540c:	4b20      	ldr	r3, [pc, #128]	; (8005490 <vTaskStartScheduler+0xbc>)
 800540e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005410:	4b1f      	ldr	r3, [pc, #124]	; (8005490 <vTaskStartScheduler+0xbc>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005418:	2301      	movs	r3, #1
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	e001      	b.n	8005422 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800541e:	2300      	movs	r3, #0
 8005420:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d102      	bne.n	800542e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005428:	f001 f8ba 	bl	80065a0 <xTimerCreateTimerTask>
 800542c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d117      	bne.n	8005464 <vTaskStartScheduler+0x90>
 8005434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005446:	4b13      	ldr	r3, [pc, #76]	; (8005494 <vTaskStartScheduler+0xc0>)
 8005448:	f04f 32ff 	mov.w	r2, #4294967295
 800544c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800544e:	4b12      	ldr	r3, [pc, #72]	; (8005498 <vTaskStartScheduler+0xc4>)
 8005450:	2201      	movs	r2, #1
 8005452:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005454:	4b11      	ldr	r3, [pc, #68]	; (800549c <vTaskStartScheduler+0xc8>)
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800545a:	f7fb fb67 	bl	8000b2c <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800545e:	f001 fc23 	bl	8006ca8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005462:	e00d      	b.n	8005480 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546a:	d109      	bne.n	8005480 <vTaskStartScheduler+0xac>
 800546c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005470:	f383 8811 	msr	BASEPRI, r3
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	e7fe      	b.n	800547e <vTaskStartScheduler+0xaa>
}
 8005480:	bf00      	nop
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	08008220 	.word	0x08008220
 800548c:	08005c01 	.word	0x08005c01
 8005490:	20001254 	.word	0x20001254
 8005494:	20001250 	.word	0x20001250
 8005498:	2000123c 	.word	0x2000123c
 800549c:	20001234 	.word	0x20001234

080054a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80054a4:	4b04      	ldr	r3, [pc, #16]	; (80054b8 <vTaskSuspendAll+0x18>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3301      	adds	r3, #1
 80054aa:	4a03      	ldr	r2, [pc, #12]	; (80054b8 <vTaskSuspendAll+0x18>)
 80054ac:	6013      	str	r3, [r2, #0]
}
 80054ae:	bf00      	nop
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bc80      	pop	{r7}
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	20001258 	.word	0x20001258

080054bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054c2:	2300      	movs	r3, #0
 80054c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054c6:	2300      	movs	r3, #0
 80054c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054ca:	4b41      	ldr	r3, [pc, #260]	; (80055d0 <xTaskResumeAll+0x114>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d109      	bne.n	80054e6 <xTaskResumeAll+0x2a>
 80054d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	603b      	str	r3, [r7, #0]
 80054e4:	e7fe      	b.n	80054e4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054e6:	f001 fc4f 	bl	8006d88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054ea:	4b39      	ldr	r3, [pc, #228]	; (80055d0 <xTaskResumeAll+0x114>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	4a37      	ldr	r2, [pc, #220]	; (80055d0 <xTaskResumeAll+0x114>)
 80054f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054f4:	4b36      	ldr	r3, [pc, #216]	; (80055d0 <xTaskResumeAll+0x114>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d162      	bne.n	80055c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054fc:	4b35      	ldr	r3, [pc, #212]	; (80055d4 <xTaskResumeAll+0x118>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d05e      	beq.n	80055c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005504:	e02f      	b.n	8005566 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005506:	4b34      	ldr	r3, [pc, #208]	; (80055d8 <xTaskResumeAll+0x11c>)
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	3318      	adds	r3, #24
 8005512:	4618      	mov	r0, r3
 8005514:	f7fe feae 	bl	8004274 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	3304      	adds	r3, #4
 800551c:	4618      	mov	r0, r3
 800551e:	f7fe fea9 	bl	8004274 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005526:	4b2d      	ldr	r3, [pc, #180]	; (80055dc <xTaskResumeAll+0x120>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d903      	bls.n	8005536 <xTaskResumeAll+0x7a>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005532:	4a2a      	ldr	r2, [pc, #168]	; (80055dc <xTaskResumeAll+0x120>)
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553a:	4613      	mov	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4a27      	ldr	r2, [pc, #156]	; (80055e0 <xTaskResumeAll+0x124>)
 8005544:	441a      	add	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3304      	adds	r3, #4
 800554a:	4619      	mov	r1, r3
 800554c:	4610      	mov	r0, r2
 800554e:	f7fe fe36 	bl	80041be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005556:	4b23      	ldr	r3, [pc, #140]	; (80055e4 <xTaskResumeAll+0x128>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555c:	429a      	cmp	r2, r3
 800555e:	d302      	bcc.n	8005566 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005560:	4b21      	ldr	r3, [pc, #132]	; (80055e8 <xTaskResumeAll+0x12c>)
 8005562:	2201      	movs	r2, #1
 8005564:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005566:	4b1c      	ldr	r3, [pc, #112]	; (80055d8 <xTaskResumeAll+0x11c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1cb      	bne.n	8005506 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005574:	f000 fcca 	bl	8005f0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005578:	4b1c      	ldr	r3, [pc, #112]	; (80055ec <xTaskResumeAll+0x130>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d010      	beq.n	80055a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005584:	f000 f8d4 	bl	8005730 <xTaskIncrementTick>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800558e:	4b16      	ldr	r3, [pc, #88]	; (80055e8 <xTaskResumeAll+0x12c>)
 8005590:	2201      	movs	r2, #1
 8005592:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3b01      	subs	r3, #1
 8005598:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1f1      	bne.n	8005584 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80055a0:	4b12      	ldr	r3, [pc, #72]	; (80055ec <xTaskResumeAll+0x130>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055a6:	4b10      	ldr	r3, [pc, #64]	; (80055e8 <xTaskResumeAll+0x12c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d009      	beq.n	80055c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055ae:	2301      	movs	r3, #1
 80055b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055b2:	4b0f      	ldr	r3, [pc, #60]	; (80055f0 <xTaskResumeAll+0x134>)
 80055b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055b8:	601a      	str	r2, [r3, #0]
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055c2:	f001 fc0f 	bl	8006de4 <vPortExitCritical>

	return xAlreadyYielded;
 80055c6:	68bb      	ldr	r3, [r7, #8]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	20001258 	.word	0x20001258
 80055d4:	20001230 	.word	0x20001230
 80055d8:	200011f0 	.word	0x200011f0
 80055dc:	20001238 	.word	0x20001238
 80055e0:	20000d60 	.word	0x20000d60
 80055e4:	20000d5c 	.word	0x20000d5c
 80055e8:	20001244 	.word	0x20001244
 80055ec:	20001240 	.word	0x20001240
 80055f0:	e000ed04 	.word	0xe000ed04

080055f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80055fa:	4b04      	ldr	r3, [pc, #16]	; (800560c <xTaskGetTickCount+0x18>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005600:	687b      	ldr	r3, [r7, #4]
}
 8005602:	4618      	mov	r0, r3
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	bc80      	pop	{r7}
 800560a:	4770      	bx	lr
 800560c:	20001234 	.word	0x20001234

08005610 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800561c:	2300      	movs	r3, #0
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	2338      	movs	r3, #56	; 0x38
 8005622:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8005624:	f7ff ff3c 	bl	80054a0 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8005628:	4b3b      	ldr	r3, [pc, #236]	; (8005718 <uxTaskGetSystemState+0x108>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	429a      	cmp	r2, r3
 8005630:	d36a      	bcc.n	8005708 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	3b01      	subs	r3, #1
 8005636:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	4613      	mov	r3, r2
 800563c:	00db      	lsls	r3, r3, #3
 800563e:	4413      	add	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	461a      	mov	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	1898      	adds	r0, r3, r2
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	4613      	mov	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4a32      	ldr	r2, [pc, #200]	; (800571c <uxTaskGetSystemState+0x10c>)
 8005654:	4413      	add	r3, r2
 8005656:	2201      	movs	r2, #1
 8005658:	4619      	mov	r1, r3
 800565a:	f000 fbbb 	bl	8005dd4 <prvListTasksWithinSingleList>
 800565e:	4602      	mov	r2, r0
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	4413      	add	r3, r2
 8005664:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1e2      	bne.n	8005632 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	4613      	mov	r3, r2
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	4413      	add	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	461a      	mov	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	1898      	adds	r0, r3, r2
 800567c:	4b28      	ldr	r3, [pc, #160]	; (8005720 <uxTaskGetSystemState+0x110>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2202      	movs	r2, #2
 8005682:	4619      	mov	r1, r3
 8005684:	f000 fba6 	bl	8005dd4 <prvListTasksWithinSingleList>
 8005688:	4602      	mov	r2, r0
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	4413      	add	r3, r2
 800568e:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	4613      	mov	r3, r2
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	4413      	add	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	461a      	mov	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	1898      	adds	r0, r3, r2
 80056a0:	4b20      	ldr	r3, [pc, #128]	; (8005724 <uxTaskGetSystemState+0x114>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2202      	movs	r2, #2
 80056a6:	4619      	mov	r1, r3
 80056a8:	f000 fb94 	bl	8005dd4 <prvListTasksWithinSingleList>
 80056ac:	4602      	mov	r2, r0
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	4413      	add	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	4613      	mov	r3, r2
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	4413      	add	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	461a      	mov	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4413      	add	r3, r2
 80056c4:	2204      	movs	r2, #4
 80056c6:	4918      	ldr	r1, [pc, #96]	; (8005728 <uxTaskGetSystemState+0x118>)
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 fb83 	bl	8005dd4 <prvListTasksWithinSingleList>
 80056ce:	4602      	mov	r2, r0
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	4413      	add	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4613      	mov	r3, r2
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	4413      	add	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	461a      	mov	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	4413      	add	r3, r2
 80056e6:	2203      	movs	r2, #3
 80056e8:	4910      	ldr	r1, [pc, #64]	; (800572c <uxTaskGetSystemState+0x11c>)
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fb72 	bl	8005dd4 <prvListTasksWithinSingleList>
 80056f0:	4602      	mov	r2, r0
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	4413      	add	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d004      	beq.n	8005708 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80056fe:	f7fb fa1b 	bl	8000b38 <getRunTimeCounterValue>
 8005702:	4602      	mov	r2, r0
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8005708:	f7ff fed8 	bl	80054bc <xTaskResumeAll>

		return uxTask;
 800570c:	697b      	ldr	r3, [r7, #20]
	}
 800570e:	4618      	mov	r0, r3
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20001230 	.word	0x20001230
 800571c:	20000d60 	.word	0x20000d60
 8005720:	200011e8 	.word	0x200011e8
 8005724:	200011ec 	.word	0x200011ec
 8005728:	20001204 	.word	0x20001204
 800572c:	2000121c 	.word	0x2000121c

08005730 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005736:	2300      	movs	r3, #0
 8005738:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800573a:	4b51      	ldr	r3, [pc, #324]	; (8005880 <xTaskIncrementTick+0x150>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	f040 808d 	bne.w	800585e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005744:	4b4f      	ldr	r3, [pc, #316]	; (8005884 <xTaskIncrementTick+0x154>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	3301      	adds	r3, #1
 800574a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800574c:	4a4d      	ldr	r2, [pc, #308]	; (8005884 <xTaskIncrementTick+0x154>)
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d11f      	bne.n	8005798 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005758:	4b4b      	ldr	r3, [pc, #300]	; (8005888 <xTaskIncrementTick+0x158>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d009      	beq.n	8005776 <xTaskIncrementTick+0x46>
 8005762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	603b      	str	r3, [r7, #0]
 8005774:	e7fe      	b.n	8005774 <xTaskIncrementTick+0x44>
 8005776:	4b44      	ldr	r3, [pc, #272]	; (8005888 <xTaskIncrementTick+0x158>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	4b43      	ldr	r3, [pc, #268]	; (800588c <xTaskIncrementTick+0x15c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a41      	ldr	r2, [pc, #260]	; (8005888 <xTaskIncrementTick+0x158>)
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	4a41      	ldr	r2, [pc, #260]	; (800588c <xTaskIncrementTick+0x15c>)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	4b41      	ldr	r3, [pc, #260]	; (8005890 <xTaskIncrementTick+0x160>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3301      	adds	r3, #1
 8005790:	4a3f      	ldr	r2, [pc, #252]	; (8005890 <xTaskIncrementTick+0x160>)
 8005792:	6013      	str	r3, [r2, #0]
 8005794:	f000 fbba 	bl	8005f0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005798:	4b3e      	ldr	r3, [pc, #248]	; (8005894 <xTaskIncrementTick+0x164>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d34e      	bcc.n	8005840 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057a2:	4b39      	ldr	r3, [pc, #228]	; (8005888 <xTaskIncrementTick+0x158>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <xTaskIncrementTick+0x80>
 80057ac:	2301      	movs	r3, #1
 80057ae:	e000      	b.n	80057b2 <xTaskIncrementTick+0x82>
 80057b0:	2300      	movs	r3, #0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d004      	beq.n	80057c0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057b6:	4b37      	ldr	r3, [pc, #220]	; (8005894 <xTaskIncrementTick+0x164>)
 80057b8:	f04f 32ff 	mov.w	r2, #4294967295
 80057bc:	601a      	str	r2, [r3, #0]
					break;
 80057be:	e03f      	b.n	8005840 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80057c0:	4b31      	ldr	r3, [pc, #196]	; (8005888 <xTaskIncrementTick+0x158>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d203      	bcs.n	80057e0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057d8:	4a2e      	ldr	r2, [pc, #184]	; (8005894 <xTaskIncrementTick+0x164>)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6013      	str	r3, [r2, #0]
						break;
 80057de:	e02f      	b.n	8005840 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	3304      	adds	r3, #4
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fe fd45 	bl	8004274 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d004      	beq.n	80057fc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	3318      	adds	r3, #24
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fe fd3c 	bl	8004274 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005800:	4b25      	ldr	r3, [pc, #148]	; (8005898 <xTaskIncrementTick+0x168>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d903      	bls.n	8005810 <xTaskIncrementTick+0xe0>
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580c:	4a22      	ldr	r2, [pc, #136]	; (8005898 <xTaskIncrementTick+0x168>)
 800580e:	6013      	str	r3, [r2, #0]
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005814:	4613      	mov	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4a1f      	ldr	r2, [pc, #124]	; (800589c <xTaskIncrementTick+0x16c>)
 800581e:	441a      	add	r2, r3
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	3304      	adds	r3, #4
 8005824:	4619      	mov	r1, r3
 8005826:	4610      	mov	r0, r2
 8005828:	f7fe fcc9 	bl	80041be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005830:	4b1b      	ldr	r3, [pc, #108]	; (80058a0 <xTaskIncrementTick+0x170>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005836:	429a      	cmp	r2, r3
 8005838:	d3b3      	bcc.n	80057a2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800583a:	2301      	movs	r3, #1
 800583c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800583e:	e7b0      	b.n	80057a2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005840:	4b17      	ldr	r3, [pc, #92]	; (80058a0 <xTaskIncrementTick+0x170>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005846:	4915      	ldr	r1, [pc, #84]	; (800589c <xTaskIncrementTick+0x16c>)
 8005848:	4613      	mov	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	440b      	add	r3, r1
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d907      	bls.n	8005868 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005858:	2301      	movs	r3, #1
 800585a:	617b      	str	r3, [r7, #20]
 800585c:	e004      	b.n	8005868 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800585e:	4b11      	ldr	r3, [pc, #68]	; (80058a4 <xTaskIncrementTick+0x174>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3301      	adds	r3, #1
 8005864:	4a0f      	ldr	r2, [pc, #60]	; (80058a4 <xTaskIncrementTick+0x174>)
 8005866:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005868:	4b0f      	ldr	r3, [pc, #60]	; (80058a8 <xTaskIncrementTick+0x178>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005870:	2301      	movs	r3, #1
 8005872:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005874:	697b      	ldr	r3, [r7, #20]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20001258 	.word	0x20001258
 8005884:	20001234 	.word	0x20001234
 8005888:	200011e8 	.word	0x200011e8
 800588c:	200011ec 	.word	0x200011ec
 8005890:	20001248 	.word	0x20001248
 8005894:	20001250 	.word	0x20001250
 8005898:	20001238 	.word	0x20001238
 800589c:	20000d60 	.word	0x20000d60
 80058a0:	20000d5c 	.word	0x20000d5c
 80058a4:	20001240 	.word	0x20001240
 80058a8:	20001244 	.word	0x20001244

080058ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058b2:	4b33      	ldr	r3, [pc, #204]	; (8005980 <vTaskSwitchContext+0xd4>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058ba:	4b32      	ldr	r3, [pc, #200]	; (8005984 <vTaskSwitchContext+0xd8>)
 80058bc:	2201      	movs	r2, #1
 80058be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058c0:	e059      	b.n	8005976 <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 80058c2:	4b30      	ldr	r3, [pc, #192]	; (8005984 <vTaskSwitchContext+0xd8>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80058c8:	f7fb f936 	bl	8000b38 <getRunTimeCounterValue>
 80058cc:	4602      	mov	r2, r0
 80058ce:	4b2e      	ldr	r3, [pc, #184]	; (8005988 <vTaskSwitchContext+0xdc>)
 80058d0:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 80058d2:	4b2d      	ldr	r3, [pc, #180]	; (8005988 <vTaskSwitchContext+0xdc>)
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	4b2d      	ldr	r3, [pc, #180]	; (800598c <vTaskSwitchContext+0xe0>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d909      	bls.n	80058f2 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80058de:	4b2c      	ldr	r3, [pc, #176]	; (8005990 <vTaskSwitchContext+0xe4>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058e4:	4a28      	ldr	r2, [pc, #160]	; (8005988 <vTaskSwitchContext+0xdc>)
 80058e6:	6810      	ldr	r0, [r2, #0]
 80058e8:	4a28      	ldr	r2, [pc, #160]	; (800598c <vTaskSwitchContext+0xe0>)
 80058ea:	6812      	ldr	r2, [r2, #0]
 80058ec:	1a82      	subs	r2, r0, r2
 80058ee:	440a      	add	r2, r1
 80058f0:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 80058f2:	4b25      	ldr	r3, [pc, #148]	; (8005988 <vTaskSwitchContext+0xdc>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a25      	ldr	r2, [pc, #148]	; (800598c <vTaskSwitchContext+0xe0>)
 80058f8:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80058fa:	4b26      	ldr	r3, [pc, #152]	; (8005994 <vTaskSwitchContext+0xe8>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	60fb      	str	r3, [r7, #12]
 8005900:	e00f      	b.n	8005922 <vTaskSwitchContext+0x76>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d109      	bne.n	800591c <vTaskSwitchContext+0x70>
 8005908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590c:	f383 8811 	msr	BASEPRI, r3
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	607b      	str	r3, [r7, #4]
 800591a:	e7fe      	b.n	800591a <vTaskSwitchContext+0x6e>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	3b01      	subs	r3, #1
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	491d      	ldr	r1, [pc, #116]	; (8005998 <vTaskSwitchContext+0xec>)
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	440b      	add	r3, r1
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0e5      	beq.n	8005902 <vTaskSwitchContext+0x56>
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	4613      	mov	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4a15      	ldr	r2, [pc, #84]	; (8005998 <vTaskSwitchContext+0xec>)
 8005942:	4413      	add	r3, r2
 8005944:	60bb      	str	r3, [r7, #8]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	605a      	str	r2, [r3, #4]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	3308      	adds	r3, #8
 8005958:	429a      	cmp	r2, r3
 800595a:	d104      	bne.n	8005966 <vTaskSwitchContext+0xba>
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	605a      	str	r2, [r3, #4]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	4a08      	ldr	r2, [pc, #32]	; (8005990 <vTaskSwitchContext+0xe4>)
 800596e:	6013      	str	r3, [r2, #0]
 8005970:	4a08      	ldr	r2, [pc, #32]	; (8005994 <vTaskSwitchContext+0xe8>)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6013      	str	r3, [r2, #0]
}
 8005976:	bf00      	nop
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	20001258 	.word	0x20001258
 8005984:	20001244 	.word	0x20001244
 8005988:	20001260 	.word	0x20001260
 800598c:	2000125c 	.word	0x2000125c
 8005990:	20000d5c 	.word	0x20000d5c
 8005994:	20001238 	.word	0x20001238
 8005998:	20000d60 	.word	0x20000d60

0800599c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d109      	bne.n	80059c0 <vTaskPlaceOnEventList+0x24>
 80059ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	60fb      	str	r3, [r7, #12]
 80059be:	e7fe      	b.n	80059be <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059c0:	4b07      	ldr	r3, [pc, #28]	; (80059e0 <vTaskPlaceOnEventList+0x44>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3318      	adds	r3, #24
 80059c6:	4619      	mov	r1, r3
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f7fe fc1b 	bl	8004204 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059ce:	2101      	movs	r1, #1
 80059d0:	6838      	ldr	r0, [r7, #0]
 80059d2:	f000 fd91 	bl	80064f8 <prvAddCurrentTaskToDelayedList>
}
 80059d6:	bf00      	nop
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	20000d5c 	.word	0x20000d5c

080059e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d109      	bne.n	8005a0a <vTaskPlaceOnEventListRestricted+0x26>
 80059f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fa:	f383 8811 	msr	BASEPRI, r3
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	617b      	str	r3, [r7, #20]
 8005a08:	e7fe      	b.n	8005a08 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a0a:	4b0a      	ldr	r3, [pc, #40]	; (8005a34 <vTaskPlaceOnEventListRestricted+0x50>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3318      	adds	r3, #24
 8005a10:	4619      	mov	r1, r3
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f7fe fbd3 	bl	80041be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d002      	beq.n	8005a24 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a24:	6879      	ldr	r1, [r7, #4]
 8005a26:	68b8      	ldr	r0, [r7, #8]
 8005a28:	f000 fd66 	bl	80064f8 <prvAddCurrentTaskToDelayedList>
	}
 8005a2c:	bf00      	nop
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	20000d5c 	.word	0x20000d5c

08005a38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d109      	bne.n	8005a62 <xTaskRemoveFromEventList+0x2a>
 8005a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	60fb      	str	r3, [r7, #12]
 8005a60:	e7fe      	b.n	8005a60 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	3318      	adds	r3, #24
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fe fc04 	bl	8004274 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a6c:	4b1d      	ldr	r3, [pc, #116]	; (8005ae4 <xTaskRemoveFromEventList+0xac>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d11d      	bne.n	8005ab0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	3304      	adds	r3, #4
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7fe fbfb 	bl	8004274 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a82:	4b19      	ldr	r3, [pc, #100]	; (8005ae8 <xTaskRemoveFromEventList+0xb0>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d903      	bls.n	8005a92 <xTaskRemoveFromEventList+0x5a>
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8e:	4a16      	ldr	r2, [pc, #88]	; (8005ae8 <xTaskRemoveFromEventList+0xb0>)
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a96:	4613      	mov	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4a13      	ldr	r2, [pc, #76]	; (8005aec <xTaskRemoveFromEventList+0xb4>)
 8005aa0:	441a      	add	r2, r3
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	f7fe fb88 	bl	80041be <vListInsertEnd>
 8005aae:	e005      	b.n	8005abc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	3318      	adds	r3, #24
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	480e      	ldr	r0, [pc, #56]	; (8005af0 <xTaskRemoveFromEventList+0xb8>)
 8005ab8:	f7fe fb81 	bl	80041be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac0:	4b0c      	ldr	r3, [pc, #48]	; (8005af4 <xTaskRemoveFromEventList+0xbc>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d905      	bls.n	8005ad6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005aca:	2301      	movs	r3, #1
 8005acc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ace:	4b0a      	ldr	r3, [pc, #40]	; (8005af8 <xTaskRemoveFromEventList+0xc0>)
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	e001      	b.n	8005ada <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005ada:	697b      	ldr	r3, [r7, #20]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3718      	adds	r7, #24
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	20001258 	.word	0x20001258
 8005ae8:	20001238 	.word	0x20001238
 8005aec:	20000d60 	.word	0x20000d60
 8005af0:	200011f0 	.word	0x200011f0
 8005af4:	20000d5c 	.word	0x20000d5c
 8005af8:	20001244 	.word	0x20001244

08005afc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b04:	4b06      	ldr	r3, [pc, #24]	; (8005b20 <vTaskInternalSetTimeOutState+0x24>)
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b0c:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <vTaskInternalSetTimeOutState+0x28>)
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	605a      	str	r2, [r3, #4]
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bc80      	pop	{r7}
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	20001248 	.word	0x20001248
 8005b24:	20001234 	.word	0x20001234

08005b28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b088      	sub	sp, #32
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d109      	bne.n	8005b4c <xTaskCheckForTimeOut+0x24>
 8005b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3c:	f383 8811 	msr	BASEPRI, r3
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	613b      	str	r3, [r7, #16]
 8005b4a:	e7fe      	b.n	8005b4a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d109      	bne.n	8005b66 <xTaskCheckForTimeOut+0x3e>
 8005b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	e7fe      	b.n	8005b64 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005b66:	f001 f90f 	bl	8006d88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b6a:	4b1d      	ldr	r3, [pc, #116]	; (8005be0 <xTaskCheckForTimeOut+0xb8>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b82:	d102      	bne.n	8005b8a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b84:	2300      	movs	r3, #0
 8005b86:	61fb      	str	r3, [r7, #28]
 8005b88:	e023      	b.n	8005bd2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	4b15      	ldr	r3, [pc, #84]	; (8005be4 <xTaskCheckForTimeOut+0xbc>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d007      	beq.n	8005ba6 <xTaskCheckForTimeOut+0x7e>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d302      	bcc.n	8005ba6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	61fb      	str	r3, [r7, #28]
 8005ba4:	e015      	b.n	8005bd2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d20b      	bcs.n	8005bc8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	1ad2      	subs	r2, r2, r3
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7ff ff9d 	bl	8005afc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61fb      	str	r3, [r7, #28]
 8005bc6:	e004      	b.n	8005bd2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005bd2:	f001 f907 	bl	8006de4 <vPortExitCritical>

	return xReturn;
 8005bd6:	69fb      	ldr	r3, [r7, #28]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3720      	adds	r7, #32
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	20001234 	.word	0x20001234
 8005be4:	20001248 	.word	0x20001248

08005be8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005be8:	b480      	push	{r7}
 8005bea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005bec:	4b03      	ldr	r3, [pc, #12]	; (8005bfc <vTaskMissedYield+0x14>)
 8005bee:	2201      	movs	r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]
}
 8005bf2:	bf00      	nop
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bc80      	pop	{r7}
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	20001244 	.word	0x20001244

08005c00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c08:	f000 f852 	bl	8005cb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c0c:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <prvIdleTask+0x28>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d9f9      	bls.n	8005c08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c14:	4b05      	ldr	r3, [pc, #20]	; (8005c2c <prvIdleTask+0x2c>)
 8005c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c24:	e7f0      	b.n	8005c08 <prvIdleTask+0x8>
 8005c26:	bf00      	nop
 8005c28:	20000d60 	.word	0x20000d60
 8005c2c:	e000ed04 	.word	0xe000ed04

08005c30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c36:	2300      	movs	r3, #0
 8005c38:	607b      	str	r3, [r7, #4]
 8005c3a:	e00c      	b.n	8005c56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4413      	add	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4a12      	ldr	r2, [pc, #72]	; (8005c90 <prvInitialiseTaskLists+0x60>)
 8005c48:	4413      	add	r3, r2
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fe fa8c 	bl	8004168 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3301      	adds	r3, #1
 8005c54:	607b      	str	r3, [r7, #4]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2b37      	cmp	r3, #55	; 0x37
 8005c5a:	d9ef      	bls.n	8005c3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c5c:	480d      	ldr	r0, [pc, #52]	; (8005c94 <prvInitialiseTaskLists+0x64>)
 8005c5e:	f7fe fa83 	bl	8004168 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c62:	480d      	ldr	r0, [pc, #52]	; (8005c98 <prvInitialiseTaskLists+0x68>)
 8005c64:	f7fe fa80 	bl	8004168 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c68:	480c      	ldr	r0, [pc, #48]	; (8005c9c <prvInitialiseTaskLists+0x6c>)
 8005c6a:	f7fe fa7d 	bl	8004168 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c6e:	480c      	ldr	r0, [pc, #48]	; (8005ca0 <prvInitialiseTaskLists+0x70>)
 8005c70:	f7fe fa7a 	bl	8004168 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c74:	480b      	ldr	r0, [pc, #44]	; (8005ca4 <prvInitialiseTaskLists+0x74>)
 8005c76:	f7fe fa77 	bl	8004168 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ca8 <prvInitialiseTaskLists+0x78>)
 8005c7c:	4a05      	ldr	r2, [pc, #20]	; (8005c94 <prvInitialiseTaskLists+0x64>)
 8005c7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c80:	4b0a      	ldr	r3, [pc, #40]	; (8005cac <prvInitialiseTaskLists+0x7c>)
 8005c82:	4a05      	ldr	r2, [pc, #20]	; (8005c98 <prvInitialiseTaskLists+0x68>)
 8005c84:	601a      	str	r2, [r3, #0]
}
 8005c86:	bf00      	nop
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	20000d60 	.word	0x20000d60
 8005c94:	200011c0 	.word	0x200011c0
 8005c98:	200011d4 	.word	0x200011d4
 8005c9c:	200011f0 	.word	0x200011f0
 8005ca0:	20001204 	.word	0x20001204
 8005ca4:	2000121c 	.word	0x2000121c
 8005ca8:	200011e8 	.word	0x200011e8
 8005cac:	200011ec 	.word	0x200011ec

08005cb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cb6:	e019      	b.n	8005cec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005cb8:	f001 f866 	bl	8006d88 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005cbc:	4b0f      	ldr	r3, [pc, #60]	; (8005cfc <prvCheckTasksWaitingTermination+0x4c>)
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7fe fad3 	bl	8004274 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005cce:	4b0c      	ldr	r3, [pc, #48]	; (8005d00 <prvCheckTasksWaitingTermination+0x50>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	4a0a      	ldr	r2, [pc, #40]	; (8005d00 <prvCheckTasksWaitingTermination+0x50>)
 8005cd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005cd8:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <prvCheckTasksWaitingTermination+0x54>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	4a09      	ldr	r2, [pc, #36]	; (8005d04 <prvCheckTasksWaitingTermination+0x54>)
 8005ce0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ce2:	f001 f87f 	bl	8006de4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f8e1 	bl	8005eae <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cec:	4b05      	ldr	r3, [pc, #20]	; (8005d04 <prvCheckTasksWaitingTermination+0x54>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1e1      	bne.n	8005cb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005cf4:	bf00      	nop
 8005cf6:	3708      	adds	r7, #8
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	20001204 	.word	0x20001204
 8005d00:	20001230 	.word	0x20001230
 8005d04:	20001218 	.word	0x20001218

08005d08 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d102      	bne.n	8005d22 <vTaskGetInfo+0x1a>
 8005d1c:	4b2c      	ldr	r3, [pc, #176]	; (8005dd0 <vTaskGetInfo+0xc8>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	e000      	b.n	8005d24 <vTaskGetInfo+0x1c>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8005d5e:	78fb      	ldrb	r3, [r7, #3]
 8005d60:	2b05      	cmp	r3, #5
 8005d62:	d01a      	beq.n	8005d9a <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8005d64:	4b1a      	ldr	r3, [pc, #104]	; (8005dd0 <vTaskGetInfo+0xc8>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d103      	bne.n	8005d76 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	2200      	movs	r2, #0
 8005d72:	731a      	strb	r2, [r3, #12]
 8005d74:	e018      	b.n	8005da8 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	78fa      	ldrb	r2, [r7, #3]
 8005d7a:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8005d7c:	78fb      	ldrb	r3, [r7, #3]
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d112      	bne.n	8005da8 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8005d82:	f7ff fb8d 	bl	80054a0 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d002      	beq.n	8005d94 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2202      	movs	r2, #2
 8005d92:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8005d94:	f7ff fb92 	bl	80054bc <xTaskResumeAll>
 8005d98:	e006      	b.n	8005da8 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8005d9a:	6978      	ldr	r0, [r7, #20]
 8005d9c:	f7ff fac2 	bl	8005324 <eTaskGetState>
 8005da0:	4603      	mov	r3, r0
 8005da2:	461a      	mov	r2, r3
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d009      	beq.n	8005dc2 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 f860 	bl	8005e78 <prvTaskCheckFreeStackSpace>
 8005db8:	4603      	mov	r3, r0
 8005dba:	461a      	mov	r2, r3
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8005dc0:	e002      	b.n	8005dc8 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	841a      	strh	r2, [r3, #32]
	}
 8005dc8:	bf00      	nop
 8005dca:	3718      	adds	r7, #24
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	20000d5c 	.word	0x20000d5c

08005dd4 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b08a      	sub	sp, #40	; 0x28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	4613      	mov	r3, r2
 8005de0:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8005de2:	2300      	movs	r3, #0
 8005de4:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d03f      	beq.n	8005e6e <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	623b      	str	r3, [r7, #32]
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	6a3b      	ldr	r3, [r7, #32]
 8005dfa:	605a      	str	r2, [r3, #4]
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	3308      	adds	r3, #8
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d104      	bne.n	8005e12 <prvListTasksWithinSingleList+0x3e>
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	605a      	str	r2, [r3, #4]
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	61bb      	str	r3, [r7, #24]
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	605a      	str	r2, [r3, #4]
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	3308      	adds	r3, #8
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d104      	bne.n	8005e3e <prvListTasksWithinSingleList+0x6a>
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	605a      	str	r2, [r3, #4]
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8005e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e48:	4613      	mov	r3, r2
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	4413      	add	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	461a      	mov	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	1899      	adds	r1, r3, r2
 8005e56:	79fb      	ldrb	r3, [r7, #7]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	6978      	ldr	r0, [r7, #20]
 8005e5c:	f7ff ff54 	bl	8005d08 <vTaskGetInfo>
				uxTask++;
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	3301      	adds	r3, #1
 8005e64:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d1d5      	bne.n	8005e1a <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3728      	adds	r7, #40	; 0x28
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005e84:	e005      	b.n	8005e92 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	607b      	str	r3, [r7, #4]
			ulCount++;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	2ba5      	cmp	r3, #165	; 0xa5
 8005e98:	d0f5      	beq.n	8005e86 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	089b      	lsrs	r3, r3, #2
 8005e9e:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	b29b      	uxth	r3, r3
	}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bc80      	pop	{r7}
 8005eac:	4770      	bx	lr

08005eae <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d108      	bne.n	8005ed2 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f001 f917 	bl	80070f8 <vPortFree>
				vPortFree( pxTCB );
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f001 f914 	bl	80070f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ed0:	e017      	b.n	8005f02 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d103      	bne.n	8005ee4 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f001 f90b 	bl	80070f8 <vPortFree>
	}
 8005ee2:	e00e      	b.n	8005f02 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d009      	beq.n	8005f02 <prvDeleteTCB+0x54>
 8005eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	e7fe      	b.n	8005f00 <prvDeleteTCB+0x52>
	}
 8005f02:	bf00      	nop
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
	...

08005f0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f12:	4b0e      	ldr	r3, [pc, #56]	; (8005f4c <prvResetNextTaskUnblockTime+0x40>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <prvResetNextTaskUnblockTime+0x14>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e000      	b.n	8005f22 <prvResetNextTaskUnblockTime+0x16>
 8005f20:	2300      	movs	r3, #0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d004      	beq.n	8005f30 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f26:	4b0a      	ldr	r3, [pc, #40]	; (8005f50 <prvResetNextTaskUnblockTime+0x44>)
 8005f28:	f04f 32ff 	mov.w	r2, #4294967295
 8005f2c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f2e:	e008      	b.n	8005f42 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f30:	4b06      	ldr	r3, [pc, #24]	; (8005f4c <prvResetNextTaskUnblockTime+0x40>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	4a04      	ldr	r2, [pc, #16]	; (8005f50 <prvResetNextTaskUnblockTime+0x44>)
 8005f40:	6013      	str	r3, [r2, #0]
}
 8005f42:	bf00      	nop
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bc80      	pop	{r7}
 8005f4a:	4770      	bx	lr
 8005f4c:	200011e8 	.word	0x200011e8
 8005f50:	20001250 	.word	0x20001250

08005f54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f5a:	4b0b      	ldr	r3, [pc, #44]	; (8005f88 <xTaskGetSchedulerState+0x34>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d102      	bne.n	8005f68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f62:	2301      	movs	r3, #1
 8005f64:	607b      	str	r3, [r7, #4]
 8005f66:	e008      	b.n	8005f7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f68:	4b08      	ldr	r3, [pc, #32]	; (8005f8c <xTaskGetSchedulerState+0x38>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d102      	bne.n	8005f76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f70:	2302      	movs	r3, #2
 8005f72:	607b      	str	r3, [r7, #4]
 8005f74:	e001      	b.n	8005f7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f76:	2300      	movs	r3, #0
 8005f78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f7a:	687b      	ldr	r3, [r7, #4]
	}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bc80      	pop	{r7}
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	2000123c 	.word	0x2000123c
 8005f8c:	20001258 	.word	0x20001258

08005f90 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d056      	beq.n	8006054 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005faa:	4b2d      	ldr	r3, [pc, #180]	; (8006060 <xTaskPriorityInherit+0xd0>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d246      	bcs.n	8006042 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	db06      	blt.n	8005fca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fbc:	4b28      	ldr	r3, [pc, #160]	; (8006060 <xTaskPriorityInherit+0xd0>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	6959      	ldr	r1, [r3, #20]
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4a22      	ldr	r2, [pc, #136]	; (8006064 <xTaskPriorityInherit+0xd4>)
 8005fdc:	4413      	add	r3, r2
 8005fde:	4299      	cmp	r1, r3
 8005fe0:	d101      	bne.n	8005fe6 <xTaskPriorityInherit+0x56>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e000      	b.n	8005fe8 <xTaskPriorityInherit+0x58>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d022      	beq.n	8006032 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	3304      	adds	r3, #4
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7fe f93f 	bl	8004274 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ff6:	4b1a      	ldr	r3, [pc, #104]	; (8006060 <xTaskPriorityInherit+0xd0>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006004:	4b18      	ldr	r3, [pc, #96]	; (8006068 <xTaskPriorityInherit+0xd8>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	429a      	cmp	r2, r3
 800600a:	d903      	bls.n	8006014 <xTaskPriorityInherit+0x84>
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006010:	4a15      	ldr	r2, [pc, #84]	; (8006068 <xTaskPriorityInherit+0xd8>)
 8006012:	6013      	str	r3, [r2, #0]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006018:	4613      	mov	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4a10      	ldr	r2, [pc, #64]	; (8006064 <xTaskPriorityInherit+0xd4>)
 8006022:	441a      	add	r2, r3
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	3304      	adds	r3, #4
 8006028:	4619      	mov	r1, r3
 800602a:	4610      	mov	r0, r2
 800602c:	f7fe f8c7 	bl	80041be <vListInsertEnd>
 8006030:	e004      	b.n	800603c <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006032:	4b0b      	ldr	r3, [pc, #44]	; (8006060 <xTaskPriorityInherit+0xd0>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800603c:	2301      	movs	r3, #1
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	e008      	b.n	8006054 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006046:	4b06      	ldr	r3, [pc, #24]	; (8006060 <xTaskPriorityInherit+0xd0>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604c:	429a      	cmp	r2, r3
 800604e:	d201      	bcs.n	8006054 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006050:	2301      	movs	r3, #1
 8006052:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006054:	68fb      	ldr	r3, [r7, #12]
	}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	20000d5c 	.word	0x20000d5c
 8006064:	20000d60 	.word	0x20000d60
 8006068:	20001238 	.word	0x20001238

0800606c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006078:	2300      	movs	r3, #0
 800607a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d054      	beq.n	800612c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006082:	4b2d      	ldr	r3, [pc, #180]	; (8006138 <xTaskPriorityDisinherit+0xcc>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	429a      	cmp	r2, r3
 800608a:	d009      	beq.n	80060a0 <xTaskPriorityDisinherit+0x34>
 800608c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006090:	f383 8811 	msr	BASEPRI, r3
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	e7fe      	b.n	800609e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d109      	bne.n	80060bc <xTaskPriorityDisinherit+0x50>
 80060a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ac:	f383 8811 	msr	BASEPRI, r3
 80060b0:	f3bf 8f6f 	isb	sy
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	60bb      	str	r3, [r7, #8]
 80060ba:	e7fe      	b.n	80060ba <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c0:	1e5a      	subs	r2, r3, #1
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d02c      	beq.n	800612c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d128      	bne.n	800612c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	3304      	adds	r3, #4
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fe f8c8 	bl	8004274 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060fc:	4b0f      	ldr	r3, [pc, #60]	; (800613c <xTaskPriorityDisinherit+0xd0>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	429a      	cmp	r2, r3
 8006102:	d903      	bls.n	800610c <xTaskPriorityDisinherit+0xa0>
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006108:	4a0c      	ldr	r2, [pc, #48]	; (800613c <xTaskPriorityDisinherit+0xd0>)
 800610a:	6013      	str	r3, [r2, #0]
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006110:	4613      	mov	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4a09      	ldr	r2, [pc, #36]	; (8006140 <xTaskPriorityDisinherit+0xd4>)
 800611a:	441a      	add	r2, r3
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	3304      	adds	r3, #4
 8006120:	4619      	mov	r1, r3
 8006122:	4610      	mov	r0, r2
 8006124:	f7fe f84b 	bl	80041be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006128:	2301      	movs	r3, #1
 800612a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800612c:	697b      	ldr	r3, [r7, #20]
	}
 800612e:	4618      	mov	r0, r3
 8006130:	3718      	adds	r7, #24
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	20000d5c 	.word	0x20000d5c
 800613c:	20001238 	.word	0x20001238
 8006140:	20000d60 	.word	0x20000d60

08006144 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006144:	b580      	push	{r7, lr}
 8006146:	b088      	sub	sp, #32
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006152:	2301      	movs	r3, #1
 8006154:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d06d      	beq.n	8006238 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006160:	2b00      	cmp	r3, #0
 8006162:	d109      	bne.n	8006178 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8006164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	60fb      	str	r3, [r7, #12]
 8006176:	e7fe      	b.n	8006176 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	429a      	cmp	r2, r3
 8006180:	d902      	bls.n	8006188 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	61fb      	str	r3, [r7, #28]
 8006186:	e002      	b.n	800618e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800618c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006192:	69fa      	ldr	r2, [r7, #28]
 8006194:	429a      	cmp	r2, r3
 8006196:	d04f      	beq.n	8006238 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d14a      	bne.n	8006238 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80061a2:	4b27      	ldr	r3, [pc, #156]	; (8006240 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d109      	bne.n	80061c0 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80061ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b0:	f383 8811 	msr	BASEPRI, r3
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	60bb      	str	r3, [r7, #8]
 80061be:	e7fe      	b.n	80061be <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	69fa      	ldr	r2, [r7, #28]
 80061ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	db04      	blt.n	80061de <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	6959      	ldr	r1, [r3, #20]
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	4613      	mov	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4a15      	ldr	r2, [pc, #84]	; (8006244 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80061ee:	4413      	add	r3, r2
 80061f0:	4299      	cmp	r1, r3
 80061f2:	d101      	bne.n	80061f8 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 80061f4:	2301      	movs	r3, #1
 80061f6:	e000      	b.n	80061fa <vTaskPriorityDisinheritAfterTimeout+0xb6>
 80061f8:	2300      	movs	r3, #0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d01c      	beq.n	8006238 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	3304      	adds	r3, #4
 8006202:	4618      	mov	r0, r3
 8006204:	f7fe f836 	bl	8004274 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800620c:	4b0e      	ldr	r3, [pc, #56]	; (8006248 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	429a      	cmp	r2, r3
 8006212:	d903      	bls.n	800621c <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006218:	4a0b      	ldr	r2, [pc, #44]	; (8006248 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800621a:	6013      	str	r3, [r2, #0]
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006220:	4613      	mov	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4a06      	ldr	r2, [pc, #24]	; (8006244 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800622a:	441a      	add	r2, r3
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	3304      	adds	r3, #4
 8006230:	4619      	mov	r1, r3
 8006232:	4610      	mov	r0, r2
 8006234:	f7fd ffc3 	bl	80041be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006238:	bf00      	nop
 800623a:	3720      	adds	r7, #32
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	20000d5c 	.word	0x20000d5c
 8006244:	20000d60 	.word	0x20000d60
 8006248:	20001238 	.word	0x20001238

0800624c <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8006256:	6839      	ldr	r1, [r7, #0]
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f001 f8c1 	bl	80073e0 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7f9 ffe6 	bl	8000230 <strlen>
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	e007      	b.n	8006278 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4413      	add	r3, r2
 800626e:	2220      	movs	r2, #32
 8006270:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3301      	adds	r3, #1
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2b0e      	cmp	r3, #14
 800627c:	d9f4      	bls.n	8006268 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4413      	add	r3, r2
 8006284:	2200      	movs	r2, #0
 8006286:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4413      	add	r3, r2
	}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
	...

08006298 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8006298:	b590      	push	{r4, r7, lr}
 800629a:	b089      	sub	sp, #36	; 0x24
 800629c:	af02      	add	r7, sp, #8
 800629e:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 80062a6:	4b46      	ldr	r3, [pc, #280]	; (80063c0 <vTaskList+0x128>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 80062ac:	4b44      	ldr	r3, [pc, #272]	; (80063c0 <vTaskList+0x128>)
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	4613      	mov	r3, r2
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	4413      	add	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 fe5b 	bl	8006f74 <pvPortMalloc>
 80062be:	6138      	str	r0, [r7, #16]

		if( pxTaskStatusArray != NULL )
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d078      	beq.n	80063b8 <vTaskList+0x120>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	4619      	mov	r1, r3
 80062cc:	6938      	ldr	r0, [r7, #16]
 80062ce:	f7ff f99f 	bl	8005610 <uxTaskGetSystemState>
 80062d2:	4603      	mov	r3, r0
 80062d4:	60fb      	str	r3, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 80062d6:	2300      	movs	r3, #0
 80062d8:	60bb      	str	r3, [r7, #8]
 80062da:	e066      	b.n	80063aa <vTaskList+0x112>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	4613      	mov	r3, r2
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	461a      	mov	r2, r3
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	4413      	add	r3, r2
 80062ec:	7b1b      	ldrb	r3, [r3, #12]
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d81b      	bhi.n	800632a <vTaskList+0x92>
 80062f2:	a201      	add	r2, pc, #4	; (adr r2, 80062f8 <vTaskList+0x60>)
 80062f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f8:	0800630d 	.word	0x0800630d
 80062fc:	08006313 	.word	0x08006313
 8006300:	08006319 	.word	0x08006319
 8006304:	0800631f 	.word	0x0800631f
 8006308:	08006325 	.word	0x08006325
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800630c:	2358      	movs	r3, #88	; 0x58
 800630e:	75fb      	strb	r3, [r7, #23]
										break;
 8006310:	e00e      	b.n	8006330 <vTaskList+0x98>

					case eReady:		cStatus = tskREADY_CHAR;
 8006312:	2352      	movs	r3, #82	; 0x52
 8006314:	75fb      	strb	r3, [r7, #23]
										break;
 8006316:	e00b      	b.n	8006330 <vTaskList+0x98>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8006318:	2342      	movs	r3, #66	; 0x42
 800631a:	75fb      	strb	r3, [r7, #23]
										break;
 800631c:	e008      	b.n	8006330 <vTaskList+0x98>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800631e:	2353      	movs	r3, #83	; 0x53
 8006320:	75fb      	strb	r3, [r7, #23]
										break;
 8006322:	e005      	b.n	8006330 <vTaskList+0x98>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8006324:	2344      	movs	r3, #68	; 0x44
 8006326:	75fb      	strb	r3, [r7, #23]
										break;
 8006328:	e002      	b.n	8006330 <vTaskList+0x98>

					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = 0x00;
 800632a:	2300      	movs	r3, #0
 800632c:	75fb      	strb	r3, [r7, #23]
										break;
 800632e:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	4613      	mov	r3, r2
 8006334:	00db      	lsls	r3, r3, #3
 8006336:	4413      	add	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	461a      	mov	r2, r3
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	4413      	add	r3, r2
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	4619      	mov	r1, r3
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f7ff ff81 	bl	800624c <prvWriteNameToBuffer>
 800634a:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800634c:	7df9      	ldrb	r1, [r7, #23]
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	4613      	mov	r3, r2
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	4413      	add	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	461a      	mov	r2, r3
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	4413      	add	r3, r2
 800635e:	6918      	ldr	r0, [r3, #16]
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	4613      	mov	r3, r2
 8006364:	00db      	lsls	r3, r3, #3
 8006366:	4413      	add	r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	461a      	mov	r2, r3
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	4413      	add	r3, r2
 8006370:	8c1b      	ldrh	r3, [r3, #32]
 8006372:	461c      	mov	r4, r3
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	4613      	mov	r3, r2
 8006378:	00db      	lsls	r3, r3, #3
 800637a:	4413      	add	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	461a      	mov	r2, r3
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	4413      	add	r3, r2
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	9301      	str	r3, [sp, #4]
 8006388:	9400      	str	r4, [sp, #0]
 800638a:	4603      	mov	r3, r0
 800638c:	460a      	mov	r2, r1
 800638e:	490d      	ldr	r1, [pc, #52]	; (80063c4 <vTaskList+0x12c>)
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f001 f805 	bl	80073a0 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7f9 ff4a 	bl	8000230 <strlen>
 800639c:	4602      	mov	r2, r0
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4413      	add	r3, r2
 80063a2:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	3301      	adds	r3, #1
 80063a8:	60bb      	str	r3, [r7, #8]
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d394      	bcc.n	80062dc <vTaskList+0x44>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 80063b2:	6938      	ldr	r0, [r7, #16]
 80063b4:	f000 fea0 	bl	80070f8 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80063b8:	bf00      	nop
 80063ba:	371c      	adds	r7, #28
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd90      	pop	{r4, r7, pc}
 80063c0:	20001230 	.word	0x20001230
 80063c4:	08008228 	.word	0x08008228

080063c8 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b088      	sub	sp, #32
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 80063d6:	4b3a      	ldr	r3, [pc, #232]	; (80064c0 <vTaskGetRunTimeStats+0xf8>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	617b      	str	r3, [r7, #20]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 80063dc:	4b38      	ldr	r3, [pc, #224]	; (80064c0 <vTaskGetRunTimeStats+0xf8>)
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	4613      	mov	r3, r2
 80063e2:	00db      	lsls	r3, r3, #3
 80063e4:	4413      	add	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4618      	mov	r0, r3
 80063ea:	f000 fdc3 	bl	8006f74 <pvPortMalloc>
 80063ee:	61f8      	str	r0, [r7, #28]

		if( pxTaskStatusArray != NULL )
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d060      	beq.n	80064b8 <vTaskGetRunTimeStats+0xf0>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f107 020c 	add.w	r2, r7, #12
 80063fc:	4619      	mov	r1, r3
 80063fe:	69f8      	ldr	r0, [r7, #28]
 8006400:	f7ff f906 	bl	8005610 <uxTaskGetSystemState>
 8006404:	4603      	mov	r3, r0
 8006406:	617b      	str	r3, [r7, #20]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4a2e      	ldr	r2, [pc, #184]	; (80064c4 <vTaskGetRunTimeStats+0xfc>)
 800640c:	fba2 2303 	umull	r2, r3, r2, r3
 8006410:	095b      	lsrs	r3, r3, #5
 8006412:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d04b      	beq.n	80064b2 <vTaskGetRunTimeStats+0xea>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800641a:	2300      	movs	r3, #0
 800641c:	613b      	str	r3, [r7, #16]
 800641e:	e044      	b.n	80064aa <vTaskGetRunTimeStats+0xe2>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	4613      	mov	r3, r2
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	4413      	add	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	461a      	mov	r2, r3
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	4413      	add	r3, r2
 8006430:	699a      	ldr	r2, [r3, #24]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	fbb2 f3f3 	udiv	r3, r2, r3
 8006438:	61bb      	str	r3, [r7, #24]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	4613      	mov	r3, r2
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	4413      	add	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	461a      	mov	r2, r3
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	4413      	add	r3, r2
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	4619      	mov	r1, r3
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7ff fefc 	bl	800624c <prvWriteNameToBuffer>
 8006454:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00e      	beq.n	800647a <vTaskGetRunTimeStats+0xb2>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	4613      	mov	r3, r2
 8006460:	00db      	lsls	r3, r3, #3
 8006462:	4413      	add	r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	461a      	mov	r2, r3
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	4413      	add	r3, r2
 800646c:	699a      	ldr	r2, [r3, #24]
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	4915      	ldr	r1, [pc, #84]	; (80064c8 <vTaskGetRunTimeStats+0x100>)
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 ff94 	bl	80073a0 <siprintf>
 8006478:	e00d      	b.n	8006496 <vTaskGetRunTimeStats+0xce>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	4613      	mov	r3, r2
 800647e:	00db      	lsls	r3, r3, #3
 8006480:	4413      	add	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	461a      	mov	r2, r3
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	4413      	add	r3, r2
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	461a      	mov	r2, r3
 800648e:	490f      	ldr	r1, [pc, #60]	; (80064cc <vTaskGetRunTimeStats+0x104>)
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 ff85 	bl	80073a0 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7f9 feca 	bl	8000230 <strlen>
 800649c:	4602      	mov	r2, r0
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4413      	add	r3, r2
 80064a2:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	3301      	adds	r3, #1
 80064a8:	613b      	str	r3, [r7, #16]
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d3b6      	bcc.n	8006420 <vTaskGetRunTimeStats+0x58>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 80064b2:	69f8      	ldr	r0, [r7, #28]
 80064b4:	f000 fe20 	bl	80070f8 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064b8:	bf00      	nop
 80064ba:	3720      	adds	r7, #32
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	20001230 	.word	0x20001230
 80064c4:	51eb851f 	.word	0x51eb851f
 80064c8:	08008238 	.word	0x08008238
 80064cc:	08008244 	.word	0x08008244

080064d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80064d0:	b480      	push	{r7}
 80064d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80064d4:	4b07      	ldr	r3, [pc, #28]	; (80064f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d004      	beq.n	80064e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80064dc:	4b05      	ldr	r3, [pc, #20]	; (80064f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064e2:	3201      	adds	r2, #1
 80064e4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80064e6:	4b03      	ldr	r3, [pc, #12]	; (80064f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80064e8:	681b      	ldr	r3, [r3, #0]
	}
 80064ea:	4618      	mov	r0, r3
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bc80      	pop	{r7}
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	20000d5c 	.word	0x20000d5c

080064f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006502:	4b21      	ldr	r3, [pc, #132]	; (8006588 <prvAddCurrentTaskToDelayedList+0x90>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006508:	4b20      	ldr	r3, [pc, #128]	; (800658c <prvAddCurrentTaskToDelayedList+0x94>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3304      	adds	r3, #4
 800650e:	4618      	mov	r0, r3
 8006510:	f7fd feb0 	bl	8004274 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651a:	d10a      	bne.n	8006532 <prvAddCurrentTaskToDelayedList+0x3a>
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d007      	beq.n	8006532 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006522:	4b1a      	ldr	r3, [pc, #104]	; (800658c <prvAddCurrentTaskToDelayedList+0x94>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	3304      	adds	r3, #4
 8006528:	4619      	mov	r1, r3
 800652a:	4819      	ldr	r0, [pc, #100]	; (8006590 <prvAddCurrentTaskToDelayedList+0x98>)
 800652c:	f7fd fe47 	bl	80041be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006530:	e026      	b.n	8006580 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4413      	add	r3, r2
 8006538:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800653a:	4b14      	ldr	r3, [pc, #80]	; (800658c <prvAddCurrentTaskToDelayedList+0x94>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	429a      	cmp	r2, r3
 8006548:	d209      	bcs.n	800655e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800654a:	4b12      	ldr	r3, [pc, #72]	; (8006594 <prvAddCurrentTaskToDelayedList+0x9c>)
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	4b0f      	ldr	r3, [pc, #60]	; (800658c <prvAddCurrentTaskToDelayedList+0x94>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3304      	adds	r3, #4
 8006554:	4619      	mov	r1, r3
 8006556:	4610      	mov	r0, r2
 8006558:	f7fd fe54 	bl	8004204 <vListInsert>
}
 800655c:	e010      	b.n	8006580 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800655e:	4b0e      	ldr	r3, [pc, #56]	; (8006598 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	4b0a      	ldr	r3, [pc, #40]	; (800658c <prvAddCurrentTaskToDelayedList+0x94>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3304      	adds	r3, #4
 8006568:	4619      	mov	r1, r3
 800656a:	4610      	mov	r0, r2
 800656c:	f7fd fe4a 	bl	8004204 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006570:	4b0a      	ldr	r3, [pc, #40]	; (800659c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	429a      	cmp	r2, r3
 8006578:	d202      	bcs.n	8006580 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800657a:	4a08      	ldr	r2, [pc, #32]	; (800659c <prvAddCurrentTaskToDelayedList+0xa4>)
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	6013      	str	r3, [r2, #0]
}
 8006580:	bf00      	nop
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	20001234 	.word	0x20001234
 800658c:	20000d5c 	.word	0x20000d5c
 8006590:	2000121c 	.word	0x2000121c
 8006594:	200011ec 	.word	0x200011ec
 8006598:	200011e8 	.word	0x200011e8
 800659c:	20001250 	.word	0x20001250

080065a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08a      	sub	sp, #40	; 0x28
 80065a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80065a6:	2300      	movs	r3, #0
 80065a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80065aa:	f000 fac3 	bl	8006b34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80065ae:	4b1c      	ldr	r3, [pc, #112]	; (8006620 <xTimerCreateTimerTask+0x80>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d021      	beq.n	80065fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80065b6:	2300      	movs	r3, #0
 80065b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80065ba:	2300      	movs	r3, #0
 80065bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80065be:	1d3a      	adds	r2, r7, #4
 80065c0:	f107 0108 	add.w	r1, r7, #8
 80065c4:	f107 030c 	add.w	r3, r7, #12
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7fd fdb3 	bl	8004134 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80065ce:	6879      	ldr	r1, [r7, #4]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	9202      	str	r2, [sp, #8]
 80065d6:	9301      	str	r3, [sp, #4]
 80065d8:	2302      	movs	r3, #2
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	2300      	movs	r3, #0
 80065de:	460a      	mov	r2, r1
 80065e0:	4910      	ldr	r1, [pc, #64]	; (8006624 <xTimerCreateTimerTask+0x84>)
 80065e2:	4811      	ldr	r0, [pc, #68]	; (8006628 <xTimerCreateTimerTask+0x88>)
 80065e4:	f7fe fcd2 	bl	8004f8c <xTaskCreateStatic>
 80065e8:	4602      	mov	r2, r0
 80065ea:	4b10      	ldr	r3, [pc, #64]	; (800662c <xTimerCreateTimerTask+0x8c>)
 80065ec:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80065ee:	4b0f      	ldr	r3, [pc, #60]	; (800662c <xTimerCreateTimerTask+0x8c>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80065f6:	2301      	movs	r3, #1
 80065f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d109      	bne.n	8006614 <xTimerCreateTimerTask+0x74>
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	613b      	str	r3, [r7, #16]
 8006612:	e7fe      	b.n	8006612 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006614:	697b      	ldr	r3, [r7, #20]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3718      	adds	r7, #24
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20001294 	.word	0x20001294
 8006624:	08008250 	.word	0x08008250
 8006628:	08006749 	.word	0x08006749
 800662c:	20001298 	.word	0x20001298

08006630 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b08a      	sub	sp, #40	; 0x28
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
 800663c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800663e:	2300      	movs	r3, #0
 8006640:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d109      	bne.n	800665c <xTimerGenericCommand+0x2c>
 8006648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664c:	f383 8811 	msr	BASEPRI, r3
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	623b      	str	r3, [r7, #32]
 800665a:	e7fe      	b.n	800665a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800665c:	4b19      	ldr	r3, [pc, #100]	; (80066c4 <xTimerGenericCommand+0x94>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d02a      	beq.n	80066ba <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b05      	cmp	r3, #5
 8006674:	dc18      	bgt.n	80066a8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006676:	f7ff fc6d 	bl	8005f54 <xTaskGetSchedulerState>
 800667a:	4603      	mov	r3, r0
 800667c:	2b02      	cmp	r3, #2
 800667e:	d109      	bne.n	8006694 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006680:	4b10      	ldr	r3, [pc, #64]	; (80066c4 <xTimerGenericCommand+0x94>)
 8006682:	6818      	ldr	r0, [r3, #0]
 8006684:	f107 0110 	add.w	r1, r7, #16
 8006688:	2300      	movs	r3, #0
 800668a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800668c:	f7fd ff88 	bl	80045a0 <xQueueGenericSend>
 8006690:	6278      	str	r0, [r7, #36]	; 0x24
 8006692:	e012      	b.n	80066ba <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006694:	4b0b      	ldr	r3, [pc, #44]	; (80066c4 <xTimerGenericCommand+0x94>)
 8006696:	6818      	ldr	r0, [r3, #0]
 8006698:	f107 0110 	add.w	r1, r7, #16
 800669c:	2300      	movs	r3, #0
 800669e:	2200      	movs	r2, #0
 80066a0:	f7fd ff7e 	bl	80045a0 <xQueueGenericSend>
 80066a4:	6278      	str	r0, [r7, #36]	; 0x24
 80066a6:	e008      	b.n	80066ba <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80066a8:	4b06      	ldr	r3, [pc, #24]	; (80066c4 <xTimerGenericCommand+0x94>)
 80066aa:	6818      	ldr	r0, [r3, #0]
 80066ac:	f107 0110 	add.w	r1, r7, #16
 80066b0:	2300      	movs	r3, #0
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	f7fe f86e 	bl	8004794 <xQueueGenericSendFromISR>
 80066b8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3728      	adds	r7, #40	; 0x28
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	20001294 	.word	0x20001294

080066c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b088      	sub	sp, #32
 80066cc:	af02      	add	r7, sp, #8
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066d2:	4b1c      	ldr	r3, [pc, #112]	; (8006744 <prvProcessExpiredTimer+0x7c>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	3304      	adds	r3, #4
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7fd fdc7 	bl	8004274 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d121      	bne.n	8006732 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	699a      	ldr	r2, [r3, #24]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	18d1      	adds	r1, r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	6978      	ldr	r0, [r7, #20]
 80066fc:	f000 f8c8 	bl	8006890 <prvInsertTimerInActiveList>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d015      	beq.n	8006732 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006706:	2300      	movs	r3, #0
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	2300      	movs	r3, #0
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	2100      	movs	r1, #0
 8006710:	6978      	ldr	r0, [r7, #20]
 8006712:	f7ff ff8d 	bl	8006630 <xTimerGenericCommand>
 8006716:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d109      	bne.n	8006732 <prvProcessExpiredTimer+0x6a>
 800671e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	60fb      	str	r3, [r7, #12]
 8006730:	e7fe      	b.n	8006730 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006736:	6978      	ldr	r0, [r7, #20]
 8006738:	4798      	blx	r3
}
 800673a:	bf00      	nop
 800673c:	3718      	adds	r7, #24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	2000128c 	.word	0x2000128c

08006748 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006750:	f107 0308 	add.w	r3, r7, #8
 8006754:	4618      	mov	r0, r3
 8006756:	f000 f857 	bl	8006808 <prvGetNextExpireTime>
 800675a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	4619      	mov	r1, r3
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f000 f803 	bl	800676c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006766:	f000 f8d5 	bl	8006914 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800676a:	e7f1      	b.n	8006750 <prvTimerTask+0x8>

0800676c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006776:	f7fe fe93 	bl	80054a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800677a:	f107 0308 	add.w	r3, r7, #8
 800677e:	4618      	mov	r0, r3
 8006780:	f000 f866 	bl	8006850 <prvSampleTimeNow>
 8006784:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d130      	bne.n	80067ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10a      	bne.n	80067a8 <prvProcessTimerOrBlockTask+0x3c>
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	429a      	cmp	r2, r3
 8006798:	d806      	bhi.n	80067a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800679a:	f7fe fe8f 	bl	80054bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800679e:	68f9      	ldr	r1, [r7, #12]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f7ff ff91 	bl	80066c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80067a6:	e024      	b.n	80067f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d008      	beq.n	80067c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80067ae:	4b13      	ldr	r3, [pc, #76]	; (80067fc <prvProcessTimerOrBlockTask+0x90>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	bf0c      	ite	eq
 80067b8:	2301      	moveq	r3, #1
 80067ba:	2300      	movne	r3, #0
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80067c0:	4b0f      	ldr	r3, [pc, #60]	; (8006800 <prvProcessTimerOrBlockTask+0x94>)
 80067c2:	6818      	ldr	r0, [r3, #0]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	4619      	mov	r1, r3
 80067ce:	f7fe fba9 	bl	8004f24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80067d2:	f7fe fe73 	bl	80054bc <xTaskResumeAll>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10a      	bne.n	80067f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80067dc:	4b09      	ldr	r3, [pc, #36]	; (8006804 <prvProcessTimerOrBlockTask+0x98>)
 80067de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	f3bf 8f6f 	isb	sy
}
 80067ec:	e001      	b.n	80067f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80067ee:	f7fe fe65 	bl	80054bc <xTaskResumeAll>
}
 80067f2:	bf00      	nop
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	20001290 	.word	0x20001290
 8006800:	20001294 	.word	0x20001294
 8006804:	e000ed04 	.word	0xe000ed04

08006808 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006810:	4b0e      	ldr	r3, [pc, #56]	; (800684c <prvGetNextExpireTime+0x44>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	bf0c      	ite	eq
 800681a:	2301      	moveq	r3, #1
 800681c:	2300      	movne	r3, #0
 800681e:	b2db      	uxtb	r3, r3
 8006820:	461a      	mov	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d105      	bne.n	800683a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800682e:	4b07      	ldr	r3, [pc, #28]	; (800684c <prvGetNextExpireTime+0x44>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	60fb      	str	r3, [r7, #12]
 8006838:	e001      	b.n	800683e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800683e:	68fb      	ldr	r3, [r7, #12]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	bc80      	pop	{r7}
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	2000128c 	.word	0x2000128c

08006850 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006858:	f7fe fecc 	bl	80055f4 <xTaskGetTickCount>
 800685c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800685e:	4b0b      	ldr	r3, [pc, #44]	; (800688c <prvSampleTimeNow+0x3c>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	429a      	cmp	r2, r3
 8006866:	d205      	bcs.n	8006874 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006868:	f000 f904 	bl	8006a74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	e002      	b.n	800687a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800687a:	4a04      	ldr	r2, [pc, #16]	; (800688c <prvSampleTimeNow+0x3c>)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006880:	68fb      	ldr	r3, [r7, #12]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	2000129c 	.word	0x2000129c

08006890 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
 800689c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800689e:	2300      	movs	r3, #0
 80068a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d812      	bhi.n	80068dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	1ad2      	subs	r2, r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d302      	bcc.n	80068ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80068c4:	2301      	movs	r3, #1
 80068c6:	617b      	str	r3, [r7, #20]
 80068c8:	e01b      	b.n	8006902 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80068ca:	4b10      	ldr	r3, [pc, #64]	; (800690c <prvInsertTimerInActiveList+0x7c>)
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3304      	adds	r3, #4
 80068d2:	4619      	mov	r1, r3
 80068d4:	4610      	mov	r0, r2
 80068d6:	f7fd fc95 	bl	8004204 <vListInsert>
 80068da:	e012      	b.n	8006902 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d206      	bcs.n	80068f2 <prvInsertTimerInActiveList+0x62>
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d302      	bcc.n	80068f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80068ec:	2301      	movs	r3, #1
 80068ee:	617b      	str	r3, [r7, #20]
 80068f0:	e007      	b.n	8006902 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068f2:	4b07      	ldr	r3, [pc, #28]	; (8006910 <prvInsertTimerInActiveList+0x80>)
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	3304      	adds	r3, #4
 80068fa:	4619      	mov	r1, r3
 80068fc:	4610      	mov	r0, r2
 80068fe:	f7fd fc81 	bl	8004204 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006902:	697b      	ldr	r3, [r7, #20]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3718      	adds	r7, #24
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	20001290 	.word	0x20001290
 8006910:	2000128c 	.word	0x2000128c

08006914 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b08e      	sub	sp, #56	; 0x38
 8006918:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800691a:	e099      	b.n	8006a50 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	da17      	bge.n	8006952 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006922:	1d3b      	adds	r3, r7, #4
 8006924:	3304      	adds	r3, #4
 8006926:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692a:	2b00      	cmp	r3, #0
 800692c:	d109      	bne.n	8006942 <prvProcessReceivedCommands+0x2e>
 800692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	61fb      	str	r3, [r7, #28]
 8006940:	e7fe      	b.n	8006940 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006948:	6850      	ldr	r0, [r2, #4]
 800694a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800694c:	6892      	ldr	r2, [r2, #8]
 800694e:	4611      	mov	r1, r2
 8006950:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	db7a      	blt.n	8006a4e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800695c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d004      	beq.n	800696e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006966:	3304      	adds	r3, #4
 8006968:	4618      	mov	r0, r3
 800696a:	f7fd fc83 	bl	8004274 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800696e:	463b      	mov	r3, r7
 8006970:	4618      	mov	r0, r3
 8006972:	f7ff ff6d 	bl	8006850 <prvSampleTimeNow>
 8006976:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b09      	cmp	r3, #9
 800697c:	d868      	bhi.n	8006a50 <prvProcessReceivedCommands+0x13c>
 800697e:	a201      	add	r2, pc, #4	; (adr r2, 8006984 <prvProcessReceivedCommands+0x70>)
 8006980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006984:	080069ad 	.word	0x080069ad
 8006988:	080069ad 	.word	0x080069ad
 800698c:	080069ad 	.word	0x080069ad
 8006990:	08006a51 	.word	0x08006a51
 8006994:	08006a07 	.word	0x08006a07
 8006998:	08006a3d 	.word	0x08006a3d
 800699c:	080069ad 	.word	0x080069ad
 80069a0:	080069ad 	.word	0x080069ad
 80069a4:	08006a51 	.word	0x08006a51
 80069a8:	08006a07 	.word	0x08006a07
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	18d1      	adds	r1, r2, r3
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069ba:	f7ff ff69 	bl	8006890 <prvInsertTimerInActiveList>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d045      	beq.n	8006a50 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069ca:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80069cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ce:	69db      	ldr	r3, [r3, #28]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d13d      	bne.n	8006a50 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	441a      	add	r2, r3
 80069dc:	2300      	movs	r3, #0
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	2300      	movs	r3, #0
 80069e2:	2100      	movs	r1, #0
 80069e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069e6:	f7ff fe23 	bl	8006630 <xTimerGenericCommand>
 80069ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d12e      	bne.n	8006a50 <prvProcessReceivedCommands+0x13c>
 80069f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f6:	f383 8811 	msr	BASEPRI, r3
 80069fa:	f3bf 8f6f 	isb	sy
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	61bb      	str	r3, [r7, #24]
 8006a04:	e7fe      	b.n	8006a04 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d109      	bne.n	8006a28 <prvProcessReceivedCommands+0x114>
 8006a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	617b      	str	r3, [r7, #20]
 8006a26:	e7fe      	b.n	8006a26 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2a:	699a      	ldr	r2, [r3, #24]
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2e:	18d1      	adds	r1, r2, r3
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a36:	f7ff ff2b 	bl	8006890 <prvInsertTimerInActiveList>
					break;
 8006a3a:	e009      	b.n	8006a50 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d104      	bne.n	8006a50 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8006a46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a48:	f000 fb56 	bl	80070f8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006a4c:	e000      	b.n	8006a50 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006a4e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a50:	4b07      	ldr	r3, [pc, #28]	; (8006a70 <prvProcessReceivedCommands+0x15c>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	1d39      	adds	r1, r7, #4
 8006a56:	2200      	movs	r2, #0
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7fd ff2f 	bl	80048bc <xQueueReceive>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f47f af5b 	bne.w	800691c <prvProcessReceivedCommands+0x8>
	}
}
 8006a66:	bf00      	nop
 8006a68:	3730      	adds	r7, #48	; 0x30
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	20001294 	.word	0x20001294

08006a74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b088      	sub	sp, #32
 8006a78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a7a:	e044      	b.n	8006b06 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a7c:	4b2b      	ldr	r3, [pc, #172]	; (8006b2c <prvSwitchTimerLists+0xb8>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a86:	4b29      	ldr	r3, [pc, #164]	; (8006b2c <prvSwitchTimerLists+0xb8>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	3304      	adds	r3, #4
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7fd fbed 	bl	8004274 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d12d      	bne.n	8006b06 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d90e      	bls.n	8006ada <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ac8:	4b18      	ldr	r3, [pc, #96]	; (8006b2c <prvSwitchTimerLists+0xb8>)
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	3304      	adds	r3, #4
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	4610      	mov	r0, r2
 8006ad4:	f7fd fb96 	bl	8004204 <vListInsert>
 8006ad8:	e015      	b.n	8006b06 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ada:	2300      	movs	r3, #0
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f7ff fda3 	bl	8006630 <xTimerGenericCommand>
 8006aea:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d109      	bne.n	8006b06 <prvSwitchTimerLists+0x92>
 8006af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af6:	f383 8811 	msr	BASEPRI, r3
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	603b      	str	r3, [r7, #0]
 8006b04:	e7fe      	b.n	8006b04 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b06:	4b09      	ldr	r3, [pc, #36]	; (8006b2c <prvSwitchTimerLists+0xb8>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1b5      	bne.n	8006a7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006b10:	4b06      	ldr	r3, [pc, #24]	; (8006b2c <prvSwitchTimerLists+0xb8>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006b16:	4b06      	ldr	r3, [pc, #24]	; (8006b30 <prvSwitchTimerLists+0xbc>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a04      	ldr	r2, [pc, #16]	; (8006b2c <prvSwitchTimerLists+0xb8>)
 8006b1c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006b1e:	4a04      	ldr	r2, [pc, #16]	; (8006b30 <prvSwitchTimerLists+0xbc>)
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	6013      	str	r3, [r2, #0]
}
 8006b24:	bf00      	nop
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	2000128c 	.word	0x2000128c
 8006b30:	20001290 	.word	0x20001290

08006b34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b3a:	f000 f925 	bl	8006d88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b3e:	4b15      	ldr	r3, [pc, #84]	; (8006b94 <prvCheckForValidListAndQueue+0x60>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d120      	bne.n	8006b88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006b46:	4814      	ldr	r0, [pc, #80]	; (8006b98 <prvCheckForValidListAndQueue+0x64>)
 8006b48:	f7fd fb0e 	bl	8004168 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006b4c:	4813      	ldr	r0, [pc, #76]	; (8006b9c <prvCheckForValidListAndQueue+0x68>)
 8006b4e:	f7fd fb0b 	bl	8004168 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b52:	4b13      	ldr	r3, [pc, #76]	; (8006ba0 <prvCheckForValidListAndQueue+0x6c>)
 8006b54:	4a10      	ldr	r2, [pc, #64]	; (8006b98 <prvCheckForValidListAndQueue+0x64>)
 8006b56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b58:	4b12      	ldr	r3, [pc, #72]	; (8006ba4 <prvCheckForValidListAndQueue+0x70>)
 8006b5a:	4a10      	ldr	r2, [pc, #64]	; (8006b9c <prvCheckForValidListAndQueue+0x68>)
 8006b5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b5e:	2300      	movs	r3, #0
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	4b11      	ldr	r3, [pc, #68]	; (8006ba8 <prvCheckForValidListAndQueue+0x74>)
 8006b64:	4a11      	ldr	r2, [pc, #68]	; (8006bac <prvCheckForValidListAndQueue+0x78>)
 8006b66:	2110      	movs	r1, #16
 8006b68:	200a      	movs	r0, #10
 8006b6a:	f7fd fc15 	bl	8004398 <xQueueGenericCreateStatic>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	4b08      	ldr	r3, [pc, #32]	; (8006b94 <prvCheckForValidListAndQueue+0x60>)
 8006b72:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006b74:	4b07      	ldr	r3, [pc, #28]	; (8006b94 <prvCheckForValidListAndQueue+0x60>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d005      	beq.n	8006b88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b7c:	4b05      	ldr	r3, [pc, #20]	; (8006b94 <prvCheckForValidListAndQueue+0x60>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	490b      	ldr	r1, [pc, #44]	; (8006bb0 <prvCheckForValidListAndQueue+0x7c>)
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fe f9a6 	bl	8004ed4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b88:	f000 f92c 	bl	8006de4 <vPortExitCritical>
}
 8006b8c:	bf00      	nop
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20001294 	.word	0x20001294
 8006b98:	20001264 	.word	0x20001264
 8006b9c:	20001278 	.word	0x20001278
 8006ba0:	2000128c 	.word	0x2000128c
 8006ba4:	20001290 	.word	0x20001290
 8006ba8:	20001340 	.word	0x20001340
 8006bac:	200012a0 	.word	0x200012a0
 8006bb0:	08008258 	.word	0x08008258

08006bb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	3b04      	subs	r3, #4
 8006bc4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	3b04      	subs	r3, #4
 8006bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	f023 0201 	bic.w	r2, r3, #1
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3b04      	subs	r3, #4
 8006be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006be4:	4a08      	ldr	r2, [pc, #32]	; (8006c08 <pxPortInitialiseStack+0x54>)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	3b14      	subs	r3, #20
 8006bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	3b20      	subs	r3, #32
 8006bfa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3714      	adds	r7, #20
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bc80      	pop	{r7}
 8006c06:	4770      	bx	lr
 8006c08:	08006c0d 	.word	0x08006c0d

08006c0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006c12:	2300      	movs	r3, #0
 8006c14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c16:	4b10      	ldr	r3, [pc, #64]	; (8006c58 <prvTaskExitError+0x4c>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c1e:	d009      	beq.n	8006c34 <prvTaskExitError+0x28>
 8006c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c24:	f383 8811 	msr	BASEPRI, r3
 8006c28:	f3bf 8f6f 	isb	sy
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	60fb      	str	r3, [r7, #12]
 8006c32:	e7fe      	b.n	8006c32 <prvTaskExitError+0x26>
 8006c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c38:	f383 8811 	msr	BASEPRI, r3
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c46:	bf00      	nop
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d0fc      	beq.n	8006c48 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c4e:	bf00      	nop
 8006c50:	3714      	adds	r7, #20
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bc80      	pop	{r7}
 8006c56:	4770      	bx	lr
 8006c58:	20000018 	.word	0x20000018
 8006c5c:	00000000 	.word	0x00000000

08006c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c60:	4b07      	ldr	r3, [pc, #28]	; (8006c80 <pxCurrentTCBConst2>)
 8006c62:	6819      	ldr	r1, [r3, #0]
 8006c64:	6808      	ldr	r0, [r1, #0]
 8006c66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c6a:	f380 8809 	msr	PSP, r0
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f04f 0000 	mov.w	r0, #0
 8006c76:	f380 8811 	msr	BASEPRI, r0
 8006c7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006c7e:	4770      	bx	lr

08006c80 <pxCurrentTCBConst2>:
 8006c80:	20000d5c 	.word	0x20000d5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c84:	bf00      	nop
 8006c86:	bf00      	nop

08006c88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006c88:	4806      	ldr	r0, [pc, #24]	; (8006ca4 <prvPortStartFirstTask+0x1c>)
 8006c8a:	6800      	ldr	r0, [r0, #0]
 8006c8c:	6800      	ldr	r0, [r0, #0]
 8006c8e:	f380 8808 	msr	MSP, r0
 8006c92:	b662      	cpsie	i
 8006c94:	b661      	cpsie	f
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	df00      	svc	0
 8006ca0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006ca2:	bf00      	nop
 8006ca4:	e000ed08 	.word	0xe000ed08

08006ca8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006cae:	4b31      	ldr	r3, [pc, #196]	; (8006d74 <xPortStartScheduler+0xcc>)
 8006cb0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	22ff      	movs	r2, #255	; 0xff
 8006cbe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006cc8:	78fb      	ldrb	r3, [r7, #3]
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	4b29      	ldr	r3, [pc, #164]	; (8006d78 <xPortStartScheduler+0xd0>)
 8006cd4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006cd6:	4b29      	ldr	r3, [pc, #164]	; (8006d7c <xPortStartScheduler+0xd4>)
 8006cd8:	2207      	movs	r2, #7
 8006cda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cdc:	e009      	b.n	8006cf2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006cde:	4b27      	ldr	r3, [pc, #156]	; (8006d7c <xPortStartScheduler+0xd4>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	4a25      	ldr	r2, [pc, #148]	; (8006d7c <xPortStartScheduler+0xd4>)
 8006ce6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ce8:	78fb      	ldrb	r3, [r7, #3]
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	005b      	lsls	r3, r3, #1
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cf2:	78fb      	ldrb	r3, [r7, #3]
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfa:	2b80      	cmp	r3, #128	; 0x80
 8006cfc:	d0ef      	beq.n	8006cde <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006cfe:	4b1f      	ldr	r3, [pc, #124]	; (8006d7c <xPortStartScheduler+0xd4>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f1c3 0307 	rsb	r3, r3, #7
 8006d06:	2b04      	cmp	r3, #4
 8006d08:	d009      	beq.n	8006d1e <xPortStartScheduler+0x76>
 8006d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0e:	f383 8811 	msr	BASEPRI, r3
 8006d12:	f3bf 8f6f 	isb	sy
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	60bb      	str	r3, [r7, #8]
 8006d1c:	e7fe      	b.n	8006d1c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d1e:	4b17      	ldr	r3, [pc, #92]	; (8006d7c <xPortStartScheduler+0xd4>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	021b      	lsls	r3, r3, #8
 8006d24:	4a15      	ldr	r2, [pc, #84]	; (8006d7c <xPortStartScheduler+0xd4>)
 8006d26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d28:	4b14      	ldr	r3, [pc, #80]	; (8006d7c <xPortStartScheduler+0xd4>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d30:	4a12      	ldr	r2, [pc, #72]	; (8006d7c <xPortStartScheduler+0xd4>)
 8006d32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d3c:	4b10      	ldr	r3, [pc, #64]	; (8006d80 <xPortStartScheduler+0xd8>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a0f      	ldr	r2, [pc, #60]	; (8006d80 <xPortStartScheduler+0xd8>)
 8006d42:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d48:	4b0d      	ldr	r3, [pc, #52]	; (8006d80 <xPortStartScheduler+0xd8>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a0c      	ldr	r2, [pc, #48]	; (8006d80 <xPortStartScheduler+0xd8>)
 8006d4e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d54:	f000 f8b0 	bl	8006eb8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d58:	4b0a      	ldr	r3, [pc, #40]	; (8006d84 <xPortStartScheduler+0xdc>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d5e:	f7ff ff93 	bl	8006c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d62:	f7fe fda3 	bl	80058ac <vTaskSwitchContext>
	prvTaskExitError();
 8006d66:	f7ff ff51 	bl	8006c0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	e000e400 	.word	0xe000e400
 8006d78:	20001390 	.word	0x20001390
 8006d7c:	20001394 	.word	0x20001394
 8006d80:	e000ed20 	.word	0xe000ed20
 8006d84:	20000018 	.word	0x20000018

08006d88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006da0:	4b0e      	ldr	r3, [pc, #56]	; (8006ddc <vPortEnterCritical+0x54>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3301      	adds	r3, #1
 8006da6:	4a0d      	ldr	r2, [pc, #52]	; (8006ddc <vPortEnterCritical+0x54>)
 8006da8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006daa:	4b0c      	ldr	r3, [pc, #48]	; (8006ddc <vPortEnterCritical+0x54>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d10e      	bne.n	8006dd0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006db2:	4b0b      	ldr	r3, [pc, #44]	; (8006de0 <vPortEnterCritical+0x58>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d009      	beq.n	8006dd0 <vPortEnterCritical+0x48>
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	603b      	str	r3, [r7, #0]
 8006dce:	e7fe      	b.n	8006dce <vPortEnterCritical+0x46>
	}
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bc80      	pop	{r7}
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	20000018 	.word	0x20000018
 8006de0:	e000ed04 	.word	0xe000ed04

08006de4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006dea:	4b10      	ldr	r3, [pc, #64]	; (8006e2c <vPortExitCritical+0x48>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d109      	bne.n	8006e06 <vPortExitCritical+0x22>
 8006df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	607b      	str	r3, [r7, #4]
 8006e04:	e7fe      	b.n	8006e04 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006e06:	4b09      	ldr	r3, [pc, #36]	; (8006e2c <vPortExitCritical+0x48>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	4a07      	ldr	r2, [pc, #28]	; (8006e2c <vPortExitCritical+0x48>)
 8006e0e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e10:	4b06      	ldr	r3, [pc, #24]	; (8006e2c <vPortExitCritical+0x48>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d104      	bne.n	8006e22 <vPortExitCritical+0x3e>
 8006e18:	2300      	movs	r3, #0
 8006e1a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e22:	bf00      	nop
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bc80      	pop	{r7}
 8006e2a:	4770      	bx	lr
 8006e2c:	20000018 	.word	0x20000018

08006e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e30:	f3ef 8009 	mrs	r0, PSP
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	4b0d      	ldr	r3, [pc, #52]	; (8006e70 <pxCurrentTCBConst>)
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e40:	6010      	str	r0, [r2, #0]
 8006e42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006e46:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e4a:	f380 8811 	msr	BASEPRI, r0
 8006e4e:	f7fe fd2d 	bl	80058ac <vTaskSwitchContext>
 8006e52:	f04f 0000 	mov.w	r0, #0
 8006e56:	f380 8811 	msr	BASEPRI, r0
 8006e5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006e5e:	6819      	ldr	r1, [r3, #0]
 8006e60:	6808      	ldr	r0, [r1, #0]
 8006e62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e66:	f380 8809 	msr	PSP, r0
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	4770      	bx	lr

08006e70 <pxCurrentTCBConst>:
 8006e70:	20000d5c 	.word	0x20000d5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e74:	bf00      	nop
 8006e76:	bf00      	nop

08006e78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e90:	f7fe fc4e 	bl	8005730 <xTaskIncrementTick>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e9a:	4b06      	ldr	r3, [pc, #24]	; (8006eb4 <xPortSysTickHandler+0x3c>)
 8006e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006eac:	bf00      	nop
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	e000ed04 	.word	0xe000ed04

08006eb8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006eb8:	b480      	push	{r7}
 8006eba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ebc:	4b0a      	ldr	r3, [pc, #40]	; (8006ee8 <vPortSetupTimerInterrupt+0x30>)
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ec2:	4b0a      	ldr	r3, [pc, #40]	; (8006eec <vPortSetupTimerInterrupt+0x34>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ec8:	4b09      	ldr	r3, [pc, #36]	; (8006ef0 <vPortSetupTimerInterrupt+0x38>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a09      	ldr	r2, [pc, #36]	; (8006ef4 <vPortSetupTimerInterrupt+0x3c>)
 8006ece:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed2:	099b      	lsrs	r3, r3, #6
 8006ed4:	4a08      	ldr	r2, [pc, #32]	; (8006ef8 <vPortSetupTimerInterrupt+0x40>)
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006eda:	4b03      	ldr	r3, [pc, #12]	; (8006ee8 <vPortSetupTimerInterrupt+0x30>)
 8006edc:	2207      	movs	r2, #7
 8006ede:	601a      	str	r2, [r3, #0]
}
 8006ee0:	bf00      	nop
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bc80      	pop	{r7}
 8006ee6:	4770      	bx	lr
 8006ee8:	e000e010 	.word	0xe000e010
 8006eec:	e000e018 	.word	0xe000e018
 8006ef0:	2000000c 	.word	0x2000000c
 8006ef4:	10624dd3 	.word	0x10624dd3
 8006ef8:	e000e014 	.word	0xe000e014

08006efc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f02:	f3ef 8305 	mrs	r3, IPSR
 8006f06:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2b0f      	cmp	r3, #15
 8006f0c:	d913      	bls.n	8006f36 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f0e:	4a15      	ldr	r2, [pc, #84]	; (8006f64 <vPortValidateInterruptPriority+0x68>)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4413      	add	r3, r2
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f18:	4b13      	ldr	r3, [pc, #76]	; (8006f68 <vPortValidateInterruptPriority+0x6c>)
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	7afa      	ldrb	r2, [r7, #11]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d209      	bcs.n	8006f36 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	607b      	str	r3, [r7, #4]
 8006f34:	e7fe      	b.n	8006f34 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f36:	4b0d      	ldr	r3, [pc, #52]	; (8006f6c <vPortValidateInterruptPriority+0x70>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f3e:	4b0c      	ldr	r3, [pc, #48]	; (8006f70 <vPortValidateInterruptPriority+0x74>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d909      	bls.n	8006f5a <vPortValidateInterruptPriority+0x5e>
 8006f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	603b      	str	r3, [r7, #0]
 8006f58:	e7fe      	b.n	8006f58 <vPortValidateInterruptPriority+0x5c>
	}
 8006f5a:	bf00      	nop
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bc80      	pop	{r7}
 8006f62:	4770      	bx	lr
 8006f64:	e000e3f0 	.word	0xe000e3f0
 8006f68:	20001390 	.word	0x20001390
 8006f6c:	e000ed0c 	.word	0xe000ed0c
 8006f70:	20001394 	.word	0x20001394

08006f74 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b08a      	sub	sp, #40	; 0x28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f80:	f7fe fa8e 	bl	80054a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f84:	4b57      	ldr	r3, [pc, #348]	; (80070e4 <pvPortMalloc+0x170>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d101      	bne.n	8006f90 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f8c:	f000 f90c 	bl	80071a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f90:	4b55      	ldr	r3, [pc, #340]	; (80070e8 <pvPortMalloc+0x174>)
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4013      	ands	r3, r2
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f040 808c 	bne.w	80070b6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d01c      	beq.n	8006fde <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006fa4:	2208      	movs	r2, #8
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4413      	add	r3, r2
 8006faa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f003 0307 	and.w	r3, r3, #7
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d013      	beq.n	8006fde <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f023 0307 	bic.w	r3, r3, #7
 8006fbc:	3308      	adds	r3, #8
 8006fbe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f003 0307 	and.w	r3, r3, #7
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d009      	beq.n	8006fde <pvPortMalloc+0x6a>
 8006fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	617b      	str	r3, [r7, #20]
 8006fdc:	e7fe      	b.n	8006fdc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d068      	beq.n	80070b6 <pvPortMalloc+0x142>
 8006fe4:	4b41      	ldr	r3, [pc, #260]	; (80070ec <pvPortMalloc+0x178>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d863      	bhi.n	80070b6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006fee:	4b40      	ldr	r3, [pc, #256]	; (80070f0 <pvPortMalloc+0x17c>)
 8006ff0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ff2:	4b3f      	ldr	r3, [pc, #252]	; (80070f0 <pvPortMalloc+0x17c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ff8:	e004      	b.n	8007004 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	429a      	cmp	r2, r3
 800700c:	d903      	bls.n	8007016 <pvPortMalloc+0xa2>
 800700e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1f1      	bne.n	8006ffa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007016:	4b33      	ldr	r3, [pc, #204]	; (80070e4 <pvPortMalloc+0x170>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800701c:	429a      	cmp	r2, r3
 800701e:	d04a      	beq.n	80070b6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2208      	movs	r2, #8
 8007026:	4413      	add	r3, r2
 8007028:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	1ad2      	subs	r2, r2, r3
 800703a:	2308      	movs	r3, #8
 800703c:	005b      	lsls	r3, r3, #1
 800703e:	429a      	cmp	r2, r3
 8007040:	d91e      	bls.n	8007080 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4413      	add	r3, r2
 8007048:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	f003 0307 	and.w	r3, r3, #7
 8007050:	2b00      	cmp	r3, #0
 8007052:	d009      	beq.n	8007068 <pvPortMalloc+0xf4>
 8007054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007058:	f383 8811 	msr	BASEPRI, r3
 800705c:	f3bf 8f6f 	isb	sy
 8007060:	f3bf 8f4f 	dsb	sy
 8007064:	613b      	str	r3, [r7, #16]
 8007066:	e7fe      	b.n	8007066 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	1ad2      	subs	r2, r2, r3
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800707a:	69b8      	ldr	r0, [r7, #24]
 800707c:	f000 f8f6 	bl	800726c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007080:	4b1a      	ldr	r3, [pc, #104]	; (80070ec <pvPortMalloc+0x178>)
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	4a18      	ldr	r2, [pc, #96]	; (80070ec <pvPortMalloc+0x178>)
 800708c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800708e:	4b17      	ldr	r3, [pc, #92]	; (80070ec <pvPortMalloc+0x178>)
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	4b18      	ldr	r3, [pc, #96]	; (80070f4 <pvPortMalloc+0x180>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	429a      	cmp	r2, r3
 8007098:	d203      	bcs.n	80070a2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800709a:	4b14      	ldr	r3, [pc, #80]	; (80070ec <pvPortMalloc+0x178>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a15      	ldr	r2, [pc, #84]	; (80070f4 <pvPortMalloc+0x180>)
 80070a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	685a      	ldr	r2, [r3, #4]
 80070a6:	4b10      	ldr	r3, [pc, #64]	; (80070e8 <pvPortMalloc+0x174>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	431a      	orrs	r2, r3
 80070ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	2200      	movs	r2, #0
 80070b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80070b6:	f7fe fa01 	bl	80054bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	f003 0307 	and.w	r3, r3, #7
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d009      	beq.n	80070d8 <pvPortMalloc+0x164>
 80070c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c8:	f383 8811 	msr	BASEPRI, r3
 80070cc:	f3bf 8f6f 	isb	sy
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	60fb      	str	r3, [r7, #12]
 80070d6:	e7fe      	b.n	80070d6 <pvPortMalloc+0x162>
	return pvReturn;
 80070d8:	69fb      	ldr	r3, [r7, #28]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3728      	adds	r7, #40	; 0x28
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	20001fa0 	.word	0x20001fa0
 80070e8:	20001fac 	.word	0x20001fac
 80070ec:	20001fa4 	.word	0x20001fa4
 80070f0:	20001f98 	.word	0x20001f98
 80070f4:	20001fa8 	.word	0x20001fa8

080070f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d046      	beq.n	8007198 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800710a:	2308      	movs	r3, #8
 800710c:	425b      	negs	r3, r3
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	4413      	add	r3, r2
 8007112:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	4b20      	ldr	r3, [pc, #128]	; (80071a0 <vPortFree+0xa8>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4013      	ands	r3, r2
 8007122:	2b00      	cmp	r3, #0
 8007124:	d109      	bne.n	800713a <vPortFree+0x42>
 8007126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712a:	f383 8811 	msr	BASEPRI, r3
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f3bf 8f4f 	dsb	sy
 8007136:	60fb      	str	r3, [r7, #12]
 8007138:	e7fe      	b.n	8007138 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d009      	beq.n	8007156 <vPortFree+0x5e>
 8007142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	60bb      	str	r3, [r7, #8]
 8007154:	e7fe      	b.n	8007154 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	4b11      	ldr	r3, [pc, #68]	; (80071a0 <vPortFree+0xa8>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4013      	ands	r3, r2
 8007160:	2b00      	cmp	r3, #0
 8007162:	d019      	beq.n	8007198 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d115      	bne.n	8007198 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	4b0b      	ldr	r3, [pc, #44]	; (80071a0 <vPortFree+0xa8>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	43db      	mvns	r3, r3
 8007176:	401a      	ands	r2, r3
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800717c:	f7fe f990 	bl	80054a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	4b07      	ldr	r3, [pc, #28]	; (80071a4 <vPortFree+0xac>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4413      	add	r3, r2
 800718a:	4a06      	ldr	r2, [pc, #24]	; (80071a4 <vPortFree+0xac>)
 800718c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800718e:	6938      	ldr	r0, [r7, #16]
 8007190:	f000 f86c 	bl	800726c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007194:	f7fe f992 	bl	80054bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007198:	bf00      	nop
 800719a:	3718      	adds	r7, #24
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	20001fac 	.word	0x20001fac
 80071a4:	20001fa4 	.word	0x20001fa4

080071a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80071ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80071b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80071b4:	4b27      	ldr	r3, [pc, #156]	; (8007254 <prvHeapInit+0xac>)
 80071b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f003 0307 	and.w	r3, r3, #7
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00c      	beq.n	80071dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	3307      	adds	r3, #7
 80071c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f023 0307 	bic.w	r3, r3, #7
 80071ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	4a1f      	ldr	r2, [pc, #124]	; (8007254 <prvHeapInit+0xac>)
 80071d8:	4413      	add	r3, r2
 80071da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80071e0:	4a1d      	ldr	r2, [pc, #116]	; (8007258 <prvHeapInit+0xb0>)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80071e6:	4b1c      	ldr	r3, [pc, #112]	; (8007258 <prvHeapInit+0xb0>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	4413      	add	r3, r2
 80071f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80071f4:	2208      	movs	r2, #8
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	1a9b      	subs	r3, r3, r2
 80071fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f023 0307 	bic.w	r3, r3, #7
 8007202:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	4a15      	ldr	r2, [pc, #84]	; (800725c <prvHeapInit+0xb4>)
 8007208:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800720a:	4b14      	ldr	r3, [pc, #80]	; (800725c <prvHeapInit+0xb4>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2200      	movs	r2, #0
 8007210:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007212:	4b12      	ldr	r3, [pc, #72]	; (800725c <prvHeapInit+0xb4>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2200      	movs	r2, #0
 8007218:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	1ad2      	subs	r2, r2, r3
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007228:	4b0c      	ldr	r3, [pc, #48]	; (800725c <prvHeapInit+0xb4>)
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	4a0a      	ldr	r2, [pc, #40]	; (8007260 <prvHeapInit+0xb8>)
 8007236:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	4a09      	ldr	r2, [pc, #36]	; (8007264 <prvHeapInit+0xbc>)
 800723e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007240:	4b09      	ldr	r3, [pc, #36]	; (8007268 <prvHeapInit+0xc0>)
 8007242:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007246:	601a      	str	r2, [r3, #0]
}
 8007248:	bf00      	nop
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	bc80      	pop	{r7}
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	20001398 	.word	0x20001398
 8007258:	20001f98 	.word	0x20001f98
 800725c:	20001fa0 	.word	0x20001fa0
 8007260:	20001fa8 	.word	0x20001fa8
 8007264:	20001fa4 	.word	0x20001fa4
 8007268:	20001fac 	.word	0x20001fac

0800726c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007274:	4b27      	ldr	r3, [pc, #156]	; (8007314 <prvInsertBlockIntoFreeList+0xa8>)
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	e002      	b.n	8007280 <prvInsertBlockIntoFreeList+0x14>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	60fb      	str	r3, [r7, #12]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	429a      	cmp	r2, r3
 8007288:	d8f7      	bhi.n	800727a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	4413      	add	r3, r2
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	429a      	cmp	r2, r3
 800729a:	d108      	bne.n	80072ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	685a      	ldr	r2, [r3, #4]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	441a      	add	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	441a      	add	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d118      	bne.n	80072f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	4b14      	ldr	r3, [pc, #80]	; (8007318 <prvInsertBlockIntoFreeList+0xac>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d00d      	beq.n	80072ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685a      	ldr	r2, [r3, #4]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	441a      	add	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	601a      	str	r2, [r3, #0]
 80072e8:	e008      	b.n	80072fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80072ea:	4b0b      	ldr	r3, [pc, #44]	; (8007318 <prvInsertBlockIntoFreeList+0xac>)
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	601a      	str	r2, [r3, #0]
 80072f2:	e003      	b.n	80072fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	429a      	cmp	r2, r3
 8007302:	d002      	beq.n	800730a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800730a:	bf00      	nop
 800730c:	3714      	adds	r7, #20
 800730e:	46bd      	mov	sp, r7
 8007310:	bc80      	pop	{r7}
 8007312:	4770      	bx	lr
 8007314:	20001f98 	.word	0x20001f98
 8007318:	20001fa0 	.word	0x20001fa0

0800731c <atoi>:
 800731c:	220a      	movs	r2, #10
 800731e:	2100      	movs	r1, #0
 8007320:	f000 b91c 	b.w	800755c <strtol>

08007324 <__errno>:
 8007324:	4b01      	ldr	r3, [pc, #4]	; (800732c <__errno+0x8>)
 8007326:	6818      	ldr	r0, [r3, #0]
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	2000001c 	.word	0x2000001c

08007330 <__libc_init_array>:
 8007330:	b570      	push	{r4, r5, r6, lr}
 8007332:	2500      	movs	r5, #0
 8007334:	4e0c      	ldr	r6, [pc, #48]	; (8007368 <__libc_init_array+0x38>)
 8007336:	4c0d      	ldr	r4, [pc, #52]	; (800736c <__libc_init_array+0x3c>)
 8007338:	1ba4      	subs	r4, r4, r6
 800733a:	10a4      	asrs	r4, r4, #2
 800733c:	42a5      	cmp	r5, r4
 800733e:	d109      	bne.n	8007354 <__libc_init_array+0x24>
 8007340:	f000 fd2c 	bl	8007d9c <_init>
 8007344:	2500      	movs	r5, #0
 8007346:	4e0a      	ldr	r6, [pc, #40]	; (8007370 <__libc_init_array+0x40>)
 8007348:	4c0a      	ldr	r4, [pc, #40]	; (8007374 <__libc_init_array+0x44>)
 800734a:	1ba4      	subs	r4, r4, r6
 800734c:	10a4      	asrs	r4, r4, #2
 800734e:	42a5      	cmp	r5, r4
 8007350:	d105      	bne.n	800735e <__libc_init_array+0x2e>
 8007352:	bd70      	pop	{r4, r5, r6, pc}
 8007354:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007358:	4798      	blx	r3
 800735a:	3501      	adds	r5, #1
 800735c:	e7ee      	b.n	800733c <__libc_init_array+0xc>
 800735e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007362:	4798      	blx	r3
 8007364:	3501      	adds	r5, #1
 8007366:	e7f2      	b.n	800734e <__libc_init_array+0x1e>
 8007368:	08008460 	.word	0x08008460
 800736c:	08008460 	.word	0x08008460
 8007370:	08008460 	.word	0x08008460
 8007374:	08008464 	.word	0x08008464

08007378 <memcpy>:
 8007378:	b510      	push	{r4, lr}
 800737a:	1e43      	subs	r3, r0, #1
 800737c:	440a      	add	r2, r1
 800737e:	4291      	cmp	r1, r2
 8007380:	d100      	bne.n	8007384 <memcpy+0xc>
 8007382:	bd10      	pop	{r4, pc}
 8007384:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007388:	f803 4f01 	strb.w	r4, [r3, #1]!
 800738c:	e7f7      	b.n	800737e <memcpy+0x6>

0800738e <memset>:
 800738e:	4603      	mov	r3, r0
 8007390:	4402      	add	r2, r0
 8007392:	4293      	cmp	r3, r2
 8007394:	d100      	bne.n	8007398 <memset+0xa>
 8007396:	4770      	bx	lr
 8007398:	f803 1b01 	strb.w	r1, [r3], #1
 800739c:	e7f9      	b.n	8007392 <memset+0x4>
	...

080073a0 <siprintf>:
 80073a0:	b40e      	push	{r1, r2, r3}
 80073a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80073a6:	b500      	push	{lr}
 80073a8:	b09c      	sub	sp, #112	; 0x70
 80073aa:	ab1d      	add	r3, sp, #116	; 0x74
 80073ac:	9002      	str	r0, [sp, #8]
 80073ae:	9006      	str	r0, [sp, #24]
 80073b0:	9107      	str	r1, [sp, #28]
 80073b2:	9104      	str	r1, [sp, #16]
 80073b4:	4808      	ldr	r0, [pc, #32]	; (80073d8 <siprintf+0x38>)
 80073b6:	4909      	ldr	r1, [pc, #36]	; (80073dc <siprintf+0x3c>)
 80073b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80073bc:	9105      	str	r1, [sp, #20]
 80073be:	6800      	ldr	r0, [r0, #0]
 80073c0:	a902      	add	r1, sp, #8
 80073c2:	9301      	str	r3, [sp, #4]
 80073c4:	f000 f950 	bl	8007668 <_svfiprintf_r>
 80073c8:	2200      	movs	r2, #0
 80073ca:	9b02      	ldr	r3, [sp, #8]
 80073cc:	701a      	strb	r2, [r3, #0]
 80073ce:	b01c      	add	sp, #112	; 0x70
 80073d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80073d4:	b003      	add	sp, #12
 80073d6:	4770      	bx	lr
 80073d8:	2000001c 	.word	0x2000001c
 80073dc:	ffff0208 	.word	0xffff0208

080073e0 <strcpy>:
 80073e0:	4603      	mov	r3, r0
 80073e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073e6:	f803 2b01 	strb.w	r2, [r3], #1
 80073ea:	2a00      	cmp	r2, #0
 80073ec:	d1f9      	bne.n	80073e2 <strcpy+0x2>
 80073ee:	4770      	bx	lr

080073f0 <strncat>:
 80073f0:	4603      	mov	r3, r0
 80073f2:	b530      	push	{r4, r5, lr}
 80073f4:	781c      	ldrb	r4, [r3, #0]
 80073f6:	1c5d      	adds	r5, r3, #1
 80073f8:	b944      	cbnz	r4, 800740c <strncat+0x1c>
 80073fa:	f112 32ff 	adds.w	r2, r2, #4294967295
 80073fe:	d304      	bcc.n	800740a <strncat+0x1a>
 8007400:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007404:	f803 4b01 	strb.w	r4, [r3], #1
 8007408:	b914      	cbnz	r4, 8007410 <strncat+0x20>
 800740a:	bd30      	pop	{r4, r5, pc}
 800740c:	462b      	mov	r3, r5
 800740e:	e7f1      	b.n	80073f4 <strncat+0x4>
 8007410:	2a00      	cmp	r2, #0
 8007412:	d1f2      	bne.n	80073fa <strncat+0xa>
 8007414:	701a      	strb	r2, [r3, #0]
 8007416:	e7f0      	b.n	80073fa <strncat+0xa>

08007418 <strncmp>:
 8007418:	b510      	push	{r4, lr}
 800741a:	b16a      	cbz	r2, 8007438 <strncmp+0x20>
 800741c:	3901      	subs	r1, #1
 800741e:	1884      	adds	r4, r0, r2
 8007420:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007424:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007428:	4293      	cmp	r3, r2
 800742a:	d103      	bne.n	8007434 <strncmp+0x1c>
 800742c:	42a0      	cmp	r0, r4
 800742e:	d001      	beq.n	8007434 <strncmp+0x1c>
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1f5      	bne.n	8007420 <strncmp+0x8>
 8007434:	1a98      	subs	r0, r3, r2
 8007436:	bd10      	pop	{r4, pc}
 8007438:	4610      	mov	r0, r2
 800743a:	e7fc      	b.n	8007436 <strncmp+0x1e>

0800743c <strncpy>:
 800743c:	b570      	push	{r4, r5, r6, lr}
 800743e:	4604      	mov	r4, r0
 8007440:	3901      	subs	r1, #1
 8007442:	b902      	cbnz	r2, 8007446 <strncpy+0xa>
 8007444:	bd70      	pop	{r4, r5, r6, pc}
 8007446:	4623      	mov	r3, r4
 8007448:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800744c:	1e56      	subs	r6, r2, #1
 800744e:	f803 5b01 	strb.w	r5, [r3], #1
 8007452:	b92d      	cbnz	r5, 8007460 <strncpy+0x24>
 8007454:	4414      	add	r4, r2
 8007456:	42a3      	cmp	r3, r4
 8007458:	d0f4      	beq.n	8007444 <strncpy+0x8>
 800745a:	f803 5b01 	strb.w	r5, [r3], #1
 800745e:	e7fa      	b.n	8007456 <strncpy+0x1a>
 8007460:	461c      	mov	r4, r3
 8007462:	4632      	mov	r2, r6
 8007464:	e7ed      	b.n	8007442 <strncpy+0x6>

08007466 <_strtol_l.isra.0>:
 8007466:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800746a:	4680      	mov	r8, r0
 800746c:	4689      	mov	r9, r1
 800746e:	4692      	mov	sl, r2
 8007470:	461e      	mov	r6, r3
 8007472:	460f      	mov	r7, r1
 8007474:	463d      	mov	r5, r7
 8007476:	9808      	ldr	r0, [sp, #32]
 8007478:	f815 4b01 	ldrb.w	r4, [r5], #1
 800747c:	f000 f884 	bl	8007588 <__locale_ctype_ptr_l>
 8007480:	4420      	add	r0, r4
 8007482:	7843      	ldrb	r3, [r0, #1]
 8007484:	f013 0308 	ands.w	r3, r3, #8
 8007488:	d132      	bne.n	80074f0 <_strtol_l.isra.0+0x8a>
 800748a:	2c2d      	cmp	r4, #45	; 0x2d
 800748c:	d132      	bne.n	80074f4 <_strtol_l.isra.0+0x8e>
 800748e:	2201      	movs	r2, #1
 8007490:	787c      	ldrb	r4, [r7, #1]
 8007492:	1cbd      	adds	r5, r7, #2
 8007494:	2e00      	cmp	r6, #0
 8007496:	d05d      	beq.n	8007554 <_strtol_l.isra.0+0xee>
 8007498:	2e10      	cmp	r6, #16
 800749a:	d109      	bne.n	80074b0 <_strtol_l.isra.0+0x4a>
 800749c:	2c30      	cmp	r4, #48	; 0x30
 800749e:	d107      	bne.n	80074b0 <_strtol_l.isra.0+0x4a>
 80074a0:	782b      	ldrb	r3, [r5, #0]
 80074a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80074a6:	2b58      	cmp	r3, #88	; 0x58
 80074a8:	d14f      	bne.n	800754a <_strtol_l.isra.0+0xe4>
 80074aa:	2610      	movs	r6, #16
 80074ac:	786c      	ldrb	r4, [r5, #1]
 80074ae:	3502      	adds	r5, #2
 80074b0:	2a00      	cmp	r2, #0
 80074b2:	bf14      	ite	ne
 80074b4:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80074b8:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80074bc:	2700      	movs	r7, #0
 80074be:	fbb1 fcf6 	udiv	ip, r1, r6
 80074c2:	4638      	mov	r0, r7
 80074c4:	fb06 1e1c 	mls	lr, r6, ip, r1
 80074c8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80074cc:	2b09      	cmp	r3, #9
 80074ce:	d817      	bhi.n	8007500 <_strtol_l.isra.0+0x9a>
 80074d0:	461c      	mov	r4, r3
 80074d2:	42a6      	cmp	r6, r4
 80074d4:	dd23      	ble.n	800751e <_strtol_l.isra.0+0xb8>
 80074d6:	1c7b      	adds	r3, r7, #1
 80074d8:	d007      	beq.n	80074ea <_strtol_l.isra.0+0x84>
 80074da:	4584      	cmp	ip, r0
 80074dc:	d31c      	bcc.n	8007518 <_strtol_l.isra.0+0xb2>
 80074de:	d101      	bne.n	80074e4 <_strtol_l.isra.0+0x7e>
 80074e0:	45a6      	cmp	lr, r4
 80074e2:	db19      	blt.n	8007518 <_strtol_l.isra.0+0xb2>
 80074e4:	2701      	movs	r7, #1
 80074e6:	fb00 4006 	mla	r0, r0, r6, r4
 80074ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074ee:	e7eb      	b.n	80074c8 <_strtol_l.isra.0+0x62>
 80074f0:	462f      	mov	r7, r5
 80074f2:	e7bf      	b.n	8007474 <_strtol_l.isra.0+0xe>
 80074f4:	2c2b      	cmp	r4, #43	; 0x2b
 80074f6:	bf04      	itt	eq
 80074f8:	1cbd      	addeq	r5, r7, #2
 80074fa:	787c      	ldrbeq	r4, [r7, #1]
 80074fc:	461a      	mov	r2, r3
 80074fe:	e7c9      	b.n	8007494 <_strtol_l.isra.0+0x2e>
 8007500:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007504:	2b19      	cmp	r3, #25
 8007506:	d801      	bhi.n	800750c <_strtol_l.isra.0+0xa6>
 8007508:	3c37      	subs	r4, #55	; 0x37
 800750a:	e7e2      	b.n	80074d2 <_strtol_l.isra.0+0x6c>
 800750c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007510:	2b19      	cmp	r3, #25
 8007512:	d804      	bhi.n	800751e <_strtol_l.isra.0+0xb8>
 8007514:	3c57      	subs	r4, #87	; 0x57
 8007516:	e7dc      	b.n	80074d2 <_strtol_l.isra.0+0x6c>
 8007518:	f04f 37ff 	mov.w	r7, #4294967295
 800751c:	e7e5      	b.n	80074ea <_strtol_l.isra.0+0x84>
 800751e:	1c7b      	adds	r3, r7, #1
 8007520:	d108      	bne.n	8007534 <_strtol_l.isra.0+0xce>
 8007522:	2322      	movs	r3, #34	; 0x22
 8007524:	4608      	mov	r0, r1
 8007526:	f8c8 3000 	str.w	r3, [r8]
 800752a:	f1ba 0f00 	cmp.w	sl, #0
 800752e:	d107      	bne.n	8007540 <_strtol_l.isra.0+0xda>
 8007530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007534:	b102      	cbz	r2, 8007538 <_strtol_l.isra.0+0xd2>
 8007536:	4240      	negs	r0, r0
 8007538:	f1ba 0f00 	cmp.w	sl, #0
 800753c:	d0f8      	beq.n	8007530 <_strtol_l.isra.0+0xca>
 800753e:	b10f      	cbz	r7, 8007544 <_strtol_l.isra.0+0xde>
 8007540:	f105 39ff 	add.w	r9, r5, #4294967295
 8007544:	f8ca 9000 	str.w	r9, [sl]
 8007548:	e7f2      	b.n	8007530 <_strtol_l.isra.0+0xca>
 800754a:	2430      	movs	r4, #48	; 0x30
 800754c:	2e00      	cmp	r6, #0
 800754e:	d1af      	bne.n	80074b0 <_strtol_l.isra.0+0x4a>
 8007550:	2608      	movs	r6, #8
 8007552:	e7ad      	b.n	80074b0 <_strtol_l.isra.0+0x4a>
 8007554:	2c30      	cmp	r4, #48	; 0x30
 8007556:	d0a3      	beq.n	80074a0 <_strtol_l.isra.0+0x3a>
 8007558:	260a      	movs	r6, #10
 800755a:	e7a9      	b.n	80074b0 <_strtol_l.isra.0+0x4a>

0800755c <strtol>:
 800755c:	4b08      	ldr	r3, [pc, #32]	; (8007580 <strtol+0x24>)
 800755e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007560:	681c      	ldr	r4, [r3, #0]
 8007562:	4d08      	ldr	r5, [pc, #32]	; (8007584 <strtol+0x28>)
 8007564:	6a23      	ldr	r3, [r4, #32]
 8007566:	2b00      	cmp	r3, #0
 8007568:	bf08      	it	eq
 800756a:	462b      	moveq	r3, r5
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	4613      	mov	r3, r2
 8007570:	460a      	mov	r2, r1
 8007572:	4601      	mov	r1, r0
 8007574:	4620      	mov	r0, r4
 8007576:	f7ff ff76 	bl	8007466 <_strtol_l.isra.0>
 800757a:	b003      	add	sp, #12
 800757c:	bd30      	pop	{r4, r5, pc}
 800757e:	bf00      	nop
 8007580:	2000001c 	.word	0x2000001c
 8007584:	20000080 	.word	0x20000080

08007588 <__locale_ctype_ptr_l>:
 8007588:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800758c:	4770      	bx	lr

0800758e <__ascii_mbtowc>:
 800758e:	b082      	sub	sp, #8
 8007590:	b901      	cbnz	r1, 8007594 <__ascii_mbtowc+0x6>
 8007592:	a901      	add	r1, sp, #4
 8007594:	b142      	cbz	r2, 80075a8 <__ascii_mbtowc+0x1a>
 8007596:	b14b      	cbz	r3, 80075ac <__ascii_mbtowc+0x1e>
 8007598:	7813      	ldrb	r3, [r2, #0]
 800759a:	600b      	str	r3, [r1, #0]
 800759c:	7812      	ldrb	r2, [r2, #0]
 800759e:	1c10      	adds	r0, r2, #0
 80075a0:	bf18      	it	ne
 80075a2:	2001      	movne	r0, #1
 80075a4:	b002      	add	sp, #8
 80075a6:	4770      	bx	lr
 80075a8:	4610      	mov	r0, r2
 80075aa:	e7fb      	b.n	80075a4 <__ascii_mbtowc+0x16>
 80075ac:	f06f 0001 	mvn.w	r0, #1
 80075b0:	e7f8      	b.n	80075a4 <__ascii_mbtowc+0x16>

080075b2 <__ssputs_r>:
 80075b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075b6:	688e      	ldr	r6, [r1, #8]
 80075b8:	4682      	mov	sl, r0
 80075ba:	429e      	cmp	r6, r3
 80075bc:	460c      	mov	r4, r1
 80075be:	4690      	mov	r8, r2
 80075c0:	4699      	mov	r9, r3
 80075c2:	d837      	bhi.n	8007634 <__ssputs_r+0x82>
 80075c4:	898a      	ldrh	r2, [r1, #12]
 80075c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80075ca:	d031      	beq.n	8007630 <__ssputs_r+0x7e>
 80075cc:	2302      	movs	r3, #2
 80075ce:	6825      	ldr	r5, [r4, #0]
 80075d0:	6909      	ldr	r1, [r1, #16]
 80075d2:	1a6f      	subs	r7, r5, r1
 80075d4:	6965      	ldr	r5, [r4, #20]
 80075d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075da:	fb95 f5f3 	sdiv	r5, r5, r3
 80075de:	f109 0301 	add.w	r3, r9, #1
 80075e2:	443b      	add	r3, r7
 80075e4:	429d      	cmp	r5, r3
 80075e6:	bf38      	it	cc
 80075e8:	461d      	movcc	r5, r3
 80075ea:	0553      	lsls	r3, r2, #21
 80075ec:	d530      	bpl.n	8007650 <__ssputs_r+0x9e>
 80075ee:	4629      	mov	r1, r5
 80075f0:	f000 fb3a 	bl	8007c68 <_malloc_r>
 80075f4:	4606      	mov	r6, r0
 80075f6:	b950      	cbnz	r0, 800760e <__ssputs_r+0x5c>
 80075f8:	230c      	movs	r3, #12
 80075fa:	f04f 30ff 	mov.w	r0, #4294967295
 80075fe:	f8ca 3000 	str.w	r3, [sl]
 8007602:	89a3      	ldrh	r3, [r4, #12]
 8007604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007608:	81a3      	strh	r3, [r4, #12]
 800760a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800760e:	463a      	mov	r2, r7
 8007610:	6921      	ldr	r1, [r4, #16]
 8007612:	f7ff feb1 	bl	8007378 <memcpy>
 8007616:	89a3      	ldrh	r3, [r4, #12]
 8007618:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800761c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007620:	81a3      	strh	r3, [r4, #12]
 8007622:	6126      	str	r6, [r4, #16]
 8007624:	443e      	add	r6, r7
 8007626:	6026      	str	r6, [r4, #0]
 8007628:	464e      	mov	r6, r9
 800762a:	6165      	str	r5, [r4, #20]
 800762c:	1bed      	subs	r5, r5, r7
 800762e:	60a5      	str	r5, [r4, #8]
 8007630:	454e      	cmp	r6, r9
 8007632:	d900      	bls.n	8007636 <__ssputs_r+0x84>
 8007634:	464e      	mov	r6, r9
 8007636:	4632      	mov	r2, r6
 8007638:	4641      	mov	r1, r8
 800763a:	6820      	ldr	r0, [r4, #0]
 800763c:	f000 faaf 	bl	8007b9e <memmove>
 8007640:	68a3      	ldr	r3, [r4, #8]
 8007642:	2000      	movs	r0, #0
 8007644:	1b9b      	subs	r3, r3, r6
 8007646:	60a3      	str	r3, [r4, #8]
 8007648:	6823      	ldr	r3, [r4, #0]
 800764a:	441e      	add	r6, r3
 800764c:	6026      	str	r6, [r4, #0]
 800764e:	e7dc      	b.n	800760a <__ssputs_r+0x58>
 8007650:	462a      	mov	r2, r5
 8007652:	f000 fb63 	bl	8007d1c <_realloc_r>
 8007656:	4606      	mov	r6, r0
 8007658:	2800      	cmp	r0, #0
 800765a:	d1e2      	bne.n	8007622 <__ssputs_r+0x70>
 800765c:	6921      	ldr	r1, [r4, #16]
 800765e:	4650      	mov	r0, sl
 8007660:	f000 fab6 	bl	8007bd0 <_free_r>
 8007664:	e7c8      	b.n	80075f8 <__ssputs_r+0x46>
	...

08007668 <_svfiprintf_r>:
 8007668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766c:	461d      	mov	r5, r3
 800766e:	898b      	ldrh	r3, [r1, #12]
 8007670:	b09d      	sub	sp, #116	; 0x74
 8007672:	061f      	lsls	r7, r3, #24
 8007674:	4680      	mov	r8, r0
 8007676:	460c      	mov	r4, r1
 8007678:	4616      	mov	r6, r2
 800767a:	d50f      	bpl.n	800769c <_svfiprintf_r+0x34>
 800767c:	690b      	ldr	r3, [r1, #16]
 800767e:	b96b      	cbnz	r3, 800769c <_svfiprintf_r+0x34>
 8007680:	2140      	movs	r1, #64	; 0x40
 8007682:	f000 faf1 	bl	8007c68 <_malloc_r>
 8007686:	6020      	str	r0, [r4, #0]
 8007688:	6120      	str	r0, [r4, #16]
 800768a:	b928      	cbnz	r0, 8007698 <_svfiprintf_r+0x30>
 800768c:	230c      	movs	r3, #12
 800768e:	f8c8 3000 	str.w	r3, [r8]
 8007692:	f04f 30ff 	mov.w	r0, #4294967295
 8007696:	e0c8      	b.n	800782a <_svfiprintf_r+0x1c2>
 8007698:	2340      	movs	r3, #64	; 0x40
 800769a:	6163      	str	r3, [r4, #20]
 800769c:	2300      	movs	r3, #0
 800769e:	9309      	str	r3, [sp, #36]	; 0x24
 80076a0:	2320      	movs	r3, #32
 80076a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076a6:	2330      	movs	r3, #48	; 0x30
 80076a8:	f04f 0b01 	mov.w	fp, #1
 80076ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076b0:	9503      	str	r5, [sp, #12]
 80076b2:	4637      	mov	r7, r6
 80076b4:	463d      	mov	r5, r7
 80076b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80076ba:	b10b      	cbz	r3, 80076c0 <_svfiprintf_r+0x58>
 80076bc:	2b25      	cmp	r3, #37	; 0x25
 80076be:	d13e      	bne.n	800773e <_svfiprintf_r+0xd6>
 80076c0:	ebb7 0a06 	subs.w	sl, r7, r6
 80076c4:	d00b      	beq.n	80076de <_svfiprintf_r+0x76>
 80076c6:	4653      	mov	r3, sl
 80076c8:	4632      	mov	r2, r6
 80076ca:	4621      	mov	r1, r4
 80076cc:	4640      	mov	r0, r8
 80076ce:	f7ff ff70 	bl	80075b2 <__ssputs_r>
 80076d2:	3001      	adds	r0, #1
 80076d4:	f000 80a4 	beq.w	8007820 <_svfiprintf_r+0x1b8>
 80076d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076da:	4453      	add	r3, sl
 80076dc:	9309      	str	r3, [sp, #36]	; 0x24
 80076de:	783b      	ldrb	r3, [r7, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 809d 	beq.w	8007820 <_svfiprintf_r+0x1b8>
 80076e6:	2300      	movs	r3, #0
 80076e8:	f04f 32ff 	mov.w	r2, #4294967295
 80076ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076f0:	9304      	str	r3, [sp, #16]
 80076f2:	9307      	str	r3, [sp, #28]
 80076f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076f8:	931a      	str	r3, [sp, #104]	; 0x68
 80076fa:	462f      	mov	r7, r5
 80076fc:	2205      	movs	r2, #5
 80076fe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007702:	4850      	ldr	r0, [pc, #320]	; (8007844 <_svfiprintf_r+0x1dc>)
 8007704:	f000 fa3d 	bl	8007b82 <memchr>
 8007708:	9b04      	ldr	r3, [sp, #16]
 800770a:	b9d0      	cbnz	r0, 8007742 <_svfiprintf_r+0xda>
 800770c:	06d9      	lsls	r1, r3, #27
 800770e:	bf44      	itt	mi
 8007710:	2220      	movmi	r2, #32
 8007712:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007716:	071a      	lsls	r2, r3, #28
 8007718:	bf44      	itt	mi
 800771a:	222b      	movmi	r2, #43	; 0x2b
 800771c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007720:	782a      	ldrb	r2, [r5, #0]
 8007722:	2a2a      	cmp	r2, #42	; 0x2a
 8007724:	d015      	beq.n	8007752 <_svfiprintf_r+0xea>
 8007726:	462f      	mov	r7, r5
 8007728:	2000      	movs	r0, #0
 800772a:	250a      	movs	r5, #10
 800772c:	9a07      	ldr	r2, [sp, #28]
 800772e:	4639      	mov	r1, r7
 8007730:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007734:	3b30      	subs	r3, #48	; 0x30
 8007736:	2b09      	cmp	r3, #9
 8007738:	d94d      	bls.n	80077d6 <_svfiprintf_r+0x16e>
 800773a:	b1b8      	cbz	r0, 800776c <_svfiprintf_r+0x104>
 800773c:	e00f      	b.n	800775e <_svfiprintf_r+0xf6>
 800773e:	462f      	mov	r7, r5
 8007740:	e7b8      	b.n	80076b4 <_svfiprintf_r+0x4c>
 8007742:	4a40      	ldr	r2, [pc, #256]	; (8007844 <_svfiprintf_r+0x1dc>)
 8007744:	463d      	mov	r5, r7
 8007746:	1a80      	subs	r0, r0, r2
 8007748:	fa0b f000 	lsl.w	r0, fp, r0
 800774c:	4318      	orrs	r0, r3
 800774e:	9004      	str	r0, [sp, #16]
 8007750:	e7d3      	b.n	80076fa <_svfiprintf_r+0x92>
 8007752:	9a03      	ldr	r2, [sp, #12]
 8007754:	1d11      	adds	r1, r2, #4
 8007756:	6812      	ldr	r2, [r2, #0]
 8007758:	9103      	str	r1, [sp, #12]
 800775a:	2a00      	cmp	r2, #0
 800775c:	db01      	blt.n	8007762 <_svfiprintf_r+0xfa>
 800775e:	9207      	str	r2, [sp, #28]
 8007760:	e004      	b.n	800776c <_svfiprintf_r+0x104>
 8007762:	4252      	negs	r2, r2
 8007764:	f043 0302 	orr.w	r3, r3, #2
 8007768:	9207      	str	r2, [sp, #28]
 800776a:	9304      	str	r3, [sp, #16]
 800776c:	783b      	ldrb	r3, [r7, #0]
 800776e:	2b2e      	cmp	r3, #46	; 0x2e
 8007770:	d10c      	bne.n	800778c <_svfiprintf_r+0x124>
 8007772:	787b      	ldrb	r3, [r7, #1]
 8007774:	2b2a      	cmp	r3, #42	; 0x2a
 8007776:	d133      	bne.n	80077e0 <_svfiprintf_r+0x178>
 8007778:	9b03      	ldr	r3, [sp, #12]
 800777a:	3702      	adds	r7, #2
 800777c:	1d1a      	adds	r2, r3, #4
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	9203      	str	r2, [sp, #12]
 8007782:	2b00      	cmp	r3, #0
 8007784:	bfb8      	it	lt
 8007786:	f04f 33ff 	movlt.w	r3, #4294967295
 800778a:	9305      	str	r3, [sp, #20]
 800778c:	4d2e      	ldr	r5, [pc, #184]	; (8007848 <_svfiprintf_r+0x1e0>)
 800778e:	2203      	movs	r2, #3
 8007790:	7839      	ldrb	r1, [r7, #0]
 8007792:	4628      	mov	r0, r5
 8007794:	f000 f9f5 	bl	8007b82 <memchr>
 8007798:	b138      	cbz	r0, 80077aa <_svfiprintf_r+0x142>
 800779a:	2340      	movs	r3, #64	; 0x40
 800779c:	1b40      	subs	r0, r0, r5
 800779e:	fa03 f000 	lsl.w	r0, r3, r0
 80077a2:	9b04      	ldr	r3, [sp, #16]
 80077a4:	3701      	adds	r7, #1
 80077a6:	4303      	orrs	r3, r0
 80077a8:	9304      	str	r3, [sp, #16]
 80077aa:	7839      	ldrb	r1, [r7, #0]
 80077ac:	2206      	movs	r2, #6
 80077ae:	4827      	ldr	r0, [pc, #156]	; (800784c <_svfiprintf_r+0x1e4>)
 80077b0:	1c7e      	adds	r6, r7, #1
 80077b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077b6:	f000 f9e4 	bl	8007b82 <memchr>
 80077ba:	2800      	cmp	r0, #0
 80077bc:	d038      	beq.n	8007830 <_svfiprintf_r+0x1c8>
 80077be:	4b24      	ldr	r3, [pc, #144]	; (8007850 <_svfiprintf_r+0x1e8>)
 80077c0:	bb13      	cbnz	r3, 8007808 <_svfiprintf_r+0x1a0>
 80077c2:	9b03      	ldr	r3, [sp, #12]
 80077c4:	3307      	adds	r3, #7
 80077c6:	f023 0307 	bic.w	r3, r3, #7
 80077ca:	3308      	adds	r3, #8
 80077cc:	9303      	str	r3, [sp, #12]
 80077ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d0:	444b      	add	r3, r9
 80077d2:	9309      	str	r3, [sp, #36]	; 0x24
 80077d4:	e76d      	b.n	80076b2 <_svfiprintf_r+0x4a>
 80077d6:	fb05 3202 	mla	r2, r5, r2, r3
 80077da:	2001      	movs	r0, #1
 80077dc:	460f      	mov	r7, r1
 80077de:	e7a6      	b.n	800772e <_svfiprintf_r+0xc6>
 80077e0:	2300      	movs	r3, #0
 80077e2:	250a      	movs	r5, #10
 80077e4:	4619      	mov	r1, r3
 80077e6:	3701      	adds	r7, #1
 80077e8:	9305      	str	r3, [sp, #20]
 80077ea:	4638      	mov	r0, r7
 80077ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077f0:	3a30      	subs	r2, #48	; 0x30
 80077f2:	2a09      	cmp	r2, #9
 80077f4:	d903      	bls.n	80077fe <_svfiprintf_r+0x196>
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d0c8      	beq.n	800778c <_svfiprintf_r+0x124>
 80077fa:	9105      	str	r1, [sp, #20]
 80077fc:	e7c6      	b.n	800778c <_svfiprintf_r+0x124>
 80077fe:	fb05 2101 	mla	r1, r5, r1, r2
 8007802:	2301      	movs	r3, #1
 8007804:	4607      	mov	r7, r0
 8007806:	e7f0      	b.n	80077ea <_svfiprintf_r+0x182>
 8007808:	ab03      	add	r3, sp, #12
 800780a:	9300      	str	r3, [sp, #0]
 800780c:	4622      	mov	r2, r4
 800780e:	4b11      	ldr	r3, [pc, #68]	; (8007854 <_svfiprintf_r+0x1ec>)
 8007810:	a904      	add	r1, sp, #16
 8007812:	4640      	mov	r0, r8
 8007814:	f3af 8000 	nop.w
 8007818:	f1b0 3fff 	cmp.w	r0, #4294967295
 800781c:	4681      	mov	r9, r0
 800781e:	d1d6      	bne.n	80077ce <_svfiprintf_r+0x166>
 8007820:	89a3      	ldrh	r3, [r4, #12]
 8007822:	065b      	lsls	r3, r3, #25
 8007824:	f53f af35 	bmi.w	8007692 <_svfiprintf_r+0x2a>
 8007828:	9809      	ldr	r0, [sp, #36]	; 0x24
 800782a:	b01d      	add	sp, #116	; 0x74
 800782c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007830:	ab03      	add	r3, sp, #12
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	4622      	mov	r2, r4
 8007836:	4b07      	ldr	r3, [pc, #28]	; (8007854 <_svfiprintf_r+0x1ec>)
 8007838:	a904      	add	r1, sp, #16
 800783a:	4640      	mov	r0, r8
 800783c:	f000 f882 	bl	8007944 <_printf_i>
 8007840:	e7ea      	b.n	8007818 <_svfiprintf_r+0x1b0>
 8007842:	bf00      	nop
 8007844:	0800832a 	.word	0x0800832a
 8007848:	08008330 	.word	0x08008330
 800784c:	08008334 	.word	0x08008334
 8007850:	00000000 	.word	0x00000000
 8007854:	080075b3 	.word	0x080075b3

08007858 <_printf_common>:
 8007858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800785c:	4691      	mov	r9, r2
 800785e:	461f      	mov	r7, r3
 8007860:	688a      	ldr	r2, [r1, #8]
 8007862:	690b      	ldr	r3, [r1, #16]
 8007864:	4606      	mov	r6, r0
 8007866:	4293      	cmp	r3, r2
 8007868:	bfb8      	it	lt
 800786a:	4613      	movlt	r3, r2
 800786c:	f8c9 3000 	str.w	r3, [r9]
 8007870:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007874:	460c      	mov	r4, r1
 8007876:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800787a:	b112      	cbz	r2, 8007882 <_printf_common+0x2a>
 800787c:	3301      	adds	r3, #1
 800787e:	f8c9 3000 	str.w	r3, [r9]
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	0699      	lsls	r1, r3, #26
 8007886:	bf42      	ittt	mi
 8007888:	f8d9 3000 	ldrmi.w	r3, [r9]
 800788c:	3302      	addmi	r3, #2
 800788e:	f8c9 3000 	strmi.w	r3, [r9]
 8007892:	6825      	ldr	r5, [r4, #0]
 8007894:	f015 0506 	ands.w	r5, r5, #6
 8007898:	d107      	bne.n	80078aa <_printf_common+0x52>
 800789a:	f104 0a19 	add.w	sl, r4, #25
 800789e:	68e3      	ldr	r3, [r4, #12]
 80078a0:	f8d9 2000 	ldr.w	r2, [r9]
 80078a4:	1a9b      	subs	r3, r3, r2
 80078a6:	42ab      	cmp	r3, r5
 80078a8:	dc29      	bgt.n	80078fe <_printf_common+0xa6>
 80078aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80078ae:	6822      	ldr	r2, [r4, #0]
 80078b0:	3300      	adds	r3, #0
 80078b2:	bf18      	it	ne
 80078b4:	2301      	movne	r3, #1
 80078b6:	0692      	lsls	r2, r2, #26
 80078b8:	d42e      	bmi.n	8007918 <_printf_common+0xc0>
 80078ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078be:	4639      	mov	r1, r7
 80078c0:	4630      	mov	r0, r6
 80078c2:	47c0      	blx	r8
 80078c4:	3001      	adds	r0, #1
 80078c6:	d021      	beq.n	800790c <_printf_common+0xb4>
 80078c8:	6823      	ldr	r3, [r4, #0]
 80078ca:	68e5      	ldr	r5, [r4, #12]
 80078cc:	f003 0306 	and.w	r3, r3, #6
 80078d0:	2b04      	cmp	r3, #4
 80078d2:	bf18      	it	ne
 80078d4:	2500      	movne	r5, #0
 80078d6:	f8d9 2000 	ldr.w	r2, [r9]
 80078da:	f04f 0900 	mov.w	r9, #0
 80078de:	bf08      	it	eq
 80078e0:	1aad      	subeq	r5, r5, r2
 80078e2:	68a3      	ldr	r3, [r4, #8]
 80078e4:	6922      	ldr	r2, [r4, #16]
 80078e6:	bf08      	it	eq
 80078e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078ec:	4293      	cmp	r3, r2
 80078ee:	bfc4      	itt	gt
 80078f0:	1a9b      	subgt	r3, r3, r2
 80078f2:	18ed      	addgt	r5, r5, r3
 80078f4:	341a      	adds	r4, #26
 80078f6:	454d      	cmp	r5, r9
 80078f8:	d11a      	bne.n	8007930 <_printf_common+0xd8>
 80078fa:	2000      	movs	r0, #0
 80078fc:	e008      	b.n	8007910 <_printf_common+0xb8>
 80078fe:	2301      	movs	r3, #1
 8007900:	4652      	mov	r2, sl
 8007902:	4639      	mov	r1, r7
 8007904:	4630      	mov	r0, r6
 8007906:	47c0      	blx	r8
 8007908:	3001      	adds	r0, #1
 800790a:	d103      	bne.n	8007914 <_printf_common+0xbc>
 800790c:	f04f 30ff 	mov.w	r0, #4294967295
 8007910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007914:	3501      	adds	r5, #1
 8007916:	e7c2      	b.n	800789e <_printf_common+0x46>
 8007918:	2030      	movs	r0, #48	; 0x30
 800791a:	18e1      	adds	r1, r4, r3
 800791c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007920:	1c5a      	adds	r2, r3, #1
 8007922:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007926:	4422      	add	r2, r4
 8007928:	3302      	adds	r3, #2
 800792a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800792e:	e7c4      	b.n	80078ba <_printf_common+0x62>
 8007930:	2301      	movs	r3, #1
 8007932:	4622      	mov	r2, r4
 8007934:	4639      	mov	r1, r7
 8007936:	4630      	mov	r0, r6
 8007938:	47c0      	blx	r8
 800793a:	3001      	adds	r0, #1
 800793c:	d0e6      	beq.n	800790c <_printf_common+0xb4>
 800793e:	f109 0901 	add.w	r9, r9, #1
 8007942:	e7d8      	b.n	80078f6 <_printf_common+0x9e>

08007944 <_printf_i>:
 8007944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007948:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800794c:	460c      	mov	r4, r1
 800794e:	7e09      	ldrb	r1, [r1, #24]
 8007950:	b085      	sub	sp, #20
 8007952:	296e      	cmp	r1, #110	; 0x6e
 8007954:	4617      	mov	r7, r2
 8007956:	4606      	mov	r6, r0
 8007958:	4698      	mov	r8, r3
 800795a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800795c:	f000 80b3 	beq.w	8007ac6 <_printf_i+0x182>
 8007960:	d822      	bhi.n	80079a8 <_printf_i+0x64>
 8007962:	2963      	cmp	r1, #99	; 0x63
 8007964:	d036      	beq.n	80079d4 <_printf_i+0x90>
 8007966:	d80a      	bhi.n	800797e <_printf_i+0x3a>
 8007968:	2900      	cmp	r1, #0
 800796a:	f000 80b9 	beq.w	8007ae0 <_printf_i+0x19c>
 800796e:	2958      	cmp	r1, #88	; 0x58
 8007970:	f000 8083 	beq.w	8007a7a <_printf_i+0x136>
 8007974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007978:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800797c:	e032      	b.n	80079e4 <_printf_i+0xa0>
 800797e:	2964      	cmp	r1, #100	; 0x64
 8007980:	d001      	beq.n	8007986 <_printf_i+0x42>
 8007982:	2969      	cmp	r1, #105	; 0x69
 8007984:	d1f6      	bne.n	8007974 <_printf_i+0x30>
 8007986:	6820      	ldr	r0, [r4, #0]
 8007988:	6813      	ldr	r3, [r2, #0]
 800798a:	0605      	lsls	r5, r0, #24
 800798c:	f103 0104 	add.w	r1, r3, #4
 8007990:	d52a      	bpl.n	80079e8 <_printf_i+0xa4>
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6011      	str	r1, [r2, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	da03      	bge.n	80079a2 <_printf_i+0x5e>
 800799a:	222d      	movs	r2, #45	; 0x2d
 800799c:	425b      	negs	r3, r3
 800799e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80079a2:	486f      	ldr	r0, [pc, #444]	; (8007b60 <_printf_i+0x21c>)
 80079a4:	220a      	movs	r2, #10
 80079a6:	e039      	b.n	8007a1c <_printf_i+0xd8>
 80079a8:	2973      	cmp	r1, #115	; 0x73
 80079aa:	f000 809d 	beq.w	8007ae8 <_printf_i+0x1a4>
 80079ae:	d808      	bhi.n	80079c2 <_printf_i+0x7e>
 80079b0:	296f      	cmp	r1, #111	; 0x6f
 80079b2:	d020      	beq.n	80079f6 <_printf_i+0xb2>
 80079b4:	2970      	cmp	r1, #112	; 0x70
 80079b6:	d1dd      	bne.n	8007974 <_printf_i+0x30>
 80079b8:	6823      	ldr	r3, [r4, #0]
 80079ba:	f043 0320 	orr.w	r3, r3, #32
 80079be:	6023      	str	r3, [r4, #0]
 80079c0:	e003      	b.n	80079ca <_printf_i+0x86>
 80079c2:	2975      	cmp	r1, #117	; 0x75
 80079c4:	d017      	beq.n	80079f6 <_printf_i+0xb2>
 80079c6:	2978      	cmp	r1, #120	; 0x78
 80079c8:	d1d4      	bne.n	8007974 <_printf_i+0x30>
 80079ca:	2378      	movs	r3, #120	; 0x78
 80079cc:	4865      	ldr	r0, [pc, #404]	; (8007b64 <_printf_i+0x220>)
 80079ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079d2:	e055      	b.n	8007a80 <_printf_i+0x13c>
 80079d4:	6813      	ldr	r3, [r2, #0]
 80079d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079da:	1d19      	adds	r1, r3, #4
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	6011      	str	r1, [r2, #0]
 80079e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079e4:	2301      	movs	r3, #1
 80079e6:	e08c      	b.n	8007b02 <_printf_i+0x1be>
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80079ee:	6011      	str	r1, [r2, #0]
 80079f0:	bf18      	it	ne
 80079f2:	b21b      	sxthne	r3, r3
 80079f4:	e7cf      	b.n	8007996 <_printf_i+0x52>
 80079f6:	6813      	ldr	r3, [r2, #0]
 80079f8:	6825      	ldr	r5, [r4, #0]
 80079fa:	1d18      	adds	r0, r3, #4
 80079fc:	6010      	str	r0, [r2, #0]
 80079fe:	0628      	lsls	r0, r5, #24
 8007a00:	d501      	bpl.n	8007a06 <_printf_i+0xc2>
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	e002      	b.n	8007a0c <_printf_i+0xc8>
 8007a06:	0668      	lsls	r0, r5, #25
 8007a08:	d5fb      	bpl.n	8007a02 <_printf_i+0xbe>
 8007a0a:	881b      	ldrh	r3, [r3, #0]
 8007a0c:	296f      	cmp	r1, #111	; 0x6f
 8007a0e:	bf14      	ite	ne
 8007a10:	220a      	movne	r2, #10
 8007a12:	2208      	moveq	r2, #8
 8007a14:	4852      	ldr	r0, [pc, #328]	; (8007b60 <_printf_i+0x21c>)
 8007a16:	2100      	movs	r1, #0
 8007a18:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a1c:	6865      	ldr	r5, [r4, #4]
 8007a1e:	2d00      	cmp	r5, #0
 8007a20:	60a5      	str	r5, [r4, #8]
 8007a22:	f2c0 8095 	blt.w	8007b50 <_printf_i+0x20c>
 8007a26:	6821      	ldr	r1, [r4, #0]
 8007a28:	f021 0104 	bic.w	r1, r1, #4
 8007a2c:	6021      	str	r1, [r4, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d13d      	bne.n	8007aae <_printf_i+0x16a>
 8007a32:	2d00      	cmp	r5, #0
 8007a34:	f040 808e 	bne.w	8007b54 <_printf_i+0x210>
 8007a38:	4665      	mov	r5, ip
 8007a3a:	2a08      	cmp	r2, #8
 8007a3c:	d10b      	bne.n	8007a56 <_printf_i+0x112>
 8007a3e:	6823      	ldr	r3, [r4, #0]
 8007a40:	07db      	lsls	r3, r3, #31
 8007a42:	d508      	bpl.n	8007a56 <_printf_i+0x112>
 8007a44:	6923      	ldr	r3, [r4, #16]
 8007a46:	6862      	ldr	r2, [r4, #4]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	bfde      	ittt	le
 8007a4c:	2330      	movle	r3, #48	; 0x30
 8007a4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a56:	ebac 0305 	sub.w	r3, ip, r5
 8007a5a:	6123      	str	r3, [r4, #16]
 8007a5c:	f8cd 8000 	str.w	r8, [sp]
 8007a60:	463b      	mov	r3, r7
 8007a62:	aa03      	add	r2, sp, #12
 8007a64:	4621      	mov	r1, r4
 8007a66:	4630      	mov	r0, r6
 8007a68:	f7ff fef6 	bl	8007858 <_printf_common>
 8007a6c:	3001      	adds	r0, #1
 8007a6e:	d14d      	bne.n	8007b0c <_printf_i+0x1c8>
 8007a70:	f04f 30ff 	mov.w	r0, #4294967295
 8007a74:	b005      	add	sp, #20
 8007a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a7a:	4839      	ldr	r0, [pc, #228]	; (8007b60 <_printf_i+0x21c>)
 8007a7c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007a80:	6813      	ldr	r3, [r2, #0]
 8007a82:	6821      	ldr	r1, [r4, #0]
 8007a84:	1d1d      	adds	r5, r3, #4
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6015      	str	r5, [r2, #0]
 8007a8a:	060a      	lsls	r2, r1, #24
 8007a8c:	d50b      	bpl.n	8007aa6 <_printf_i+0x162>
 8007a8e:	07ca      	lsls	r2, r1, #31
 8007a90:	bf44      	itt	mi
 8007a92:	f041 0120 	orrmi.w	r1, r1, #32
 8007a96:	6021      	strmi	r1, [r4, #0]
 8007a98:	b91b      	cbnz	r3, 8007aa2 <_printf_i+0x15e>
 8007a9a:	6822      	ldr	r2, [r4, #0]
 8007a9c:	f022 0220 	bic.w	r2, r2, #32
 8007aa0:	6022      	str	r2, [r4, #0]
 8007aa2:	2210      	movs	r2, #16
 8007aa4:	e7b7      	b.n	8007a16 <_printf_i+0xd2>
 8007aa6:	064d      	lsls	r5, r1, #25
 8007aa8:	bf48      	it	mi
 8007aaa:	b29b      	uxthmi	r3, r3
 8007aac:	e7ef      	b.n	8007a8e <_printf_i+0x14a>
 8007aae:	4665      	mov	r5, ip
 8007ab0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ab4:	fb02 3311 	mls	r3, r2, r1, r3
 8007ab8:	5cc3      	ldrb	r3, [r0, r3]
 8007aba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007abe:	460b      	mov	r3, r1
 8007ac0:	2900      	cmp	r1, #0
 8007ac2:	d1f5      	bne.n	8007ab0 <_printf_i+0x16c>
 8007ac4:	e7b9      	b.n	8007a3a <_printf_i+0xf6>
 8007ac6:	6813      	ldr	r3, [r2, #0]
 8007ac8:	6825      	ldr	r5, [r4, #0]
 8007aca:	1d18      	adds	r0, r3, #4
 8007acc:	6961      	ldr	r1, [r4, #20]
 8007ace:	6010      	str	r0, [r2, #0]
 8007ad0:	0628      	lsls	r0, r5, #24
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	d501      	bpl.n	8007ada <_printf_i+0x196>
 8007ad6:	6019      	str	r1, [r3, #0]
 8007ad8:	e002      	b.n	8007ae0 <_printf_i+0x19c>
 8007ada:	066a      	lsls	r2, r5, #25
 8007adc:	d5fb      	bpl.n	8007ad6 <_printf_i+0x192>
 8007ade:	8019      	strh	r1, [r3, #0]
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	4665      	mov	r5, ip
 8007ae4:	6123      	str	r3, [r4, #16]
 8007ae6:	e7b9      	b.n	8007a5c <_printf_i+0x118>
 8007ae8:	6813      	ldr	r3, [r2, #0]
 8007aea:	1d19      	adds	r1, r3, #4
 8007aec:	6011      	str	r1, [r2, #0]
 8007aee:	681d      	ldr	r5, [r3, #0]
 8007af0:	6862      	ldr	r2, [r4, #4]
 8007af2:	2100      	movs	r1, #0
 8007af4:	4628      	mov	r0, r5
 8007af6:	f000 f844 	bl	8007b82 <memchr>
 8007afa:	b108      	cbz	r0, 8007b00 <_printf_i+0x1bc>
 8007afc:	1b40      	subs	r0, r0, r5
 8007afe:	6060      	str	r0, [r4, #4]
 8007b00:	6863      	ldr	r3, [r4, #4]
 8007b02:	6123      	str	r3, [r4, #16]
 8007b04:	2300      	movs	r3, #0
 8007b06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b0a:	e7a7      	b.n	8007a5c <_printf_i+0x118>
 8007b0c:	6923      	ldr	r3, [r4, #16]
 8007b0e:	462a      	mov	r2, r5
 8007b10:	4639      	mov	r1, r7
 8007b12:	4630      	mov	r0, r6
 8007b14:	47c0      	blx	r8
 8007b16:	3001      	adds	r0, #1
 8007b18:	d0aa      	beq.n	8007a70 <_printf_i+0x12c>
 8007b1a:	6823      	ldr	r3, [r4, #0]
 8007b1c:	079b      	lsls	r3, r3, #30
 8007b1e:	d413      	bmi.n	8007b48 <_printf_i+0x204>
 8007b20:	68e0      	ldr	r0, [r4, #12]
 8007b22:	9b03      	ldr	r3, [sp, #12]
 8007b24:	4298      	cmp	r0, r3
 8007b26:	bfb8      	it	lt
 8007b28:	4618      	movlt	r0, r3
 8007b2a:	e7a3      	b.n	8007a74 <_printf_i+0x130>
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	464a      	mov	r2, r9
 8007b30:	4639      	mov	r1, r7
 8007b32:	4630      	mov	r0, r6
 8007b34:	47c0      	blx	r8
 8007b36:	3001      	adds	r0, #1
 8007b38:	d09a      	beq.n	8007a70 <_printf_i+0x12c>
 8007b3a:	3501      	adds	r5, #1
 8007b3c:	68e3      	ldr	r3, [r4, #12]
 8007b3e:	9a03      	ldr	r2, [sp, #12]
 8007b40:	1a9b      	subs	r3, r3, r2
 8007b42:	42ab      	cmp	r3, r5
 8007b44:	dcf2      	bgt.n	8007b2c <_printf_i+0x1e8>
 8007b46:	e7eb      	b.n	8007b20 <_printf_i+0x1dc>
 8007b48:	2500      	movs	r5, #0
 8007b4a:	f104 0919 	add.w	r9, r4, #25
 8007b4e:	e7f5      	b.n	8007b3c <_printf_i+0x1f8>
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1ac      	bne.n	8007aae <_printf_i+0x16a>
 8007b54:	7803      	ldrb	r3, [r0, #0]
 8007b56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b5e:	e76c      	b.n	8007a3a <_printf_i+0xf6>
 8007b60:	0800833b 	.word	0x0800833b
 8007b64:	0800834c 	.word	0x0800834c

08007b68 <__ascii_wctomb>:
 8007b68:	b149      	cbz	r1, 8007b7e <__ascii_wctomb+0x16>
 8007b6a:	2aff      	cmp	r2, #255	; 0xff
 8007b6c:	bf8b      	itete	hi
 8007b6e:	238a      	movhi	r3, #138	; 0x8a
 8007b70:	700a      	strbls	r2, [r1, #0]
 8007b72:	6003      	strhi	r3, [r0, #0]
 8007b74:	2001      	movls	r0, #1
 8007b76:	bf88      	it	hi
 8007b78:	f04f 30ff 	movhi.w	r0, #4294967295
 8007b7c:	4770      	bx	lr
 8007b7e:	4608      	mov	r0, r1
 8007b80:	4770      	bx	lr

08007b82 <memchr>:
 8007b82:	b510      	push	{r4, lr}
 8007b84:	b2c9      	uxtb	r1, r1
 8007b86:	4402      	add	r2, r0
 8007b88:	4290      	cmp	r0, r2
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	d101      	bne.n	8007b92 <memchr+0x10>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	e003      	b.n	8007b9a <memchr+0x18>
 8007b92:	781c      	ldrb	r4, [r3, #0]
 8007b94:	3001      	adds	r0, #1
 8007b96:	428c      	cmp	r4, r1
 8007b98:	d1f6      	bne.n	8007b88 <memchr+0x6>
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	bd10      	pop	{r4, pc}

08007b9e <memmove>:
 8007b9e:	4288      	cmp	r0, r1
 8007ba0:	b510      	push	{r4, lr}
 8007ba2:	eb01 0302 	add.w	r3, r1, r2
 8007ba6:	d807      	bhi.n	8007bb8 <memmove+0x1a>
 8007ba8:	1e42      	subs	r2, r0, #1
 8007baa:	4299      	cmp	r1, r3
 8007bac:	d00a      	beq.n	8007bc4 <memmove+0x26>
 8007bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bb2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007bb6:	e7f8      	b.n	8007baa <memmove+0xc>
 8007bb8:	4283      	cmp	r3, r0
 8007bba:	d9f5      	bls.n	8007ba8 <memmove+0xa>
 8007bbc:	1881      	adds	r1, r0, r2
 8007bbe:	1ad2      	subs	r2, r2, r3
 8007bc0:	42d3      	cmn	r3, r2
 8007bc2:	d100      	bne.n	8007bc6 <memmove+0x28>
 8007bc4:	bd10      	pop	{r4, pc}
 8007bc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007bce:	e7f7      	b.n	8007bc0 <memmove+0x22>

08007bd0 <_free_r>:
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	4605      	mov	r5, r0
 8007bd4:	2900      	cmp	r1, #0
 8007bd6:	d043      	beq.n	8007c60 <_free_r+0x90>
 8007bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bdc:	1f0c      	subs	r4, r1, #4
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	bfb8      	it	lt
 8007be2:	18e4      	addlt	r4, r4, r3
 8007be4:	f000 f8d0 	bl	8007d88 <__malloc_lock>
 8007be8:	4a1e      	ldr	r2, [pc, #120]	; (8007c64 <_free_r+0x94>)
 8007bea:	6813      	ldr	r3, [r2, #0]
 8007bec:	4610      	mov	r0, r2
 8007bee:	b933      	cbnz	r3, 8007bfe <_free_r+0x2e>
 8007bf0:	6063      	str	r3, [r4, #4]
 8007bf2:	6014      	str	r4, [r2, #0]
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bfa:	f000 b8c6 	b.w	8007d8a <__malloc_unlock>
 8007bfe:	42a3      	cmp	r3, r4
 8007c00:	d90b      	bls.n	8007c1a <_free_r+0x4a>
 8007c02:	6821      	ldr	r1, [r4, #0]
 8007c04:	1862      	adds	r2, r4, r1
 8007c06:	4293      	cmp	r3, r2
 8007c08:	bf01      	itttt	eq
 8007c0a:	681a      	ldreq	r2, [r3, #0]
 8007c0c:	685b      	ldreq	r3, [r3, #4]
 8007c0e:	1852      	addeq	r2, r2, r1
 8007c10:	6022      	streq	r2, [r4, #0]
 8007c12:	6063      	str	r3, [r4, #4]
 8007c14:	6004      	str	r4, [r0, #0]
 8007c16:	e7ed      	b.n	8007bf4 <_free_r+0x24>
 8007c18:	4613      	mov	r3, r2
 8007c1a:	685a      	ldr	r2, [r3, #4]
 8007c1c:	b10a      	cbz	r2, 8007c22 <_free_r+0x52>
 8007c1e:	42a2      	cmp	r2, r4
 8007c20:	d9fa      	bls.n	8007c18 <_free_r+0x48>
 8007c22:	6819      	ldr	r1, [r3, #0]
 8007c24:	1858      	adds	r0, r3, r1
 8007c26:	42a0      	cmp	r0, r4
 8007c28:	d10b      	bne.n	8007c42 <_free_r+0x72>
 8007c2a:	6820      	ldr	r0, [r4, #0]
 8007c2c:	4401      	add	r1, r0
 8007c2e:	1858      	adds	r0, r3, r1
 8007c30:	4282      	cmp	r2, r0
 8007c32:	6019      	str	r1, [r3, #0]
 8007c34:	d1de      	bne.n	8007bf4 <_free_r+0x24>
 8007c36:	6810      	ldr	r0, [r2, #0]
 8007c38:	6852      	ldr	r2, [r2, #4]
 8007c3a:	4401      	add	r1, r0
 8007c3c:	6019      	str	r1, [r3, #0]
 8007c3e:	605a      	str	r2, [r3, #4]
 8007c40:	e7d8      	b.n	8007bf4 <_free_r+0x24>
 8007c42:	d902      	bls.n	8007c4a <_free_r+0x7a>
 8007c44:	230c      	movs	r3, #12
 8007c46:	602b      	str	r3, [r5, #0]
 8007c48:	e7d4      	b.n	8007bf4 <_free_r+0x24>
 8007c4a:	6820      	ldr	r0, [r4, #0]
 8007c4c:	1821      	adds	r1, r4, r0
 8007c4e:	428a      	cmp	r2, r1
 8007c50:	bf01      	itttt	eq
 8007c52:	6811      	ldreq	r1, [r2, #0]
 8007c54:	6852      	ldreq	r2, [r2, #4]
 8007c56:	1809      	addeq	r1, r1, r0
 8007c58:	6021      	streq	r1, [r4, #0]
 8007c5a:	6062      	str	r2, [r4, #4]
 8007c5c:	605c      	str	r4, [r3, #4]
 8007c5e:	e7c9      	b.n	8007bf4 <_free_r+0x24>
 8007c60:	bd38      	pop	{r3, r4, r5, pc}
 8007c62:	bf00      	nop
 8007c64:	20001fb0 	.word	0x20001fb0

08007c68 <_malloc_r>:
 8007c68:	b570      	push	{r4, r5, r6, lr}
 8007c6a:	1ccd      	adds	r5, r1, #3
 8007c6c:	f025 0503 	bic.w	r5, r5, #3
 8007c70:	3508      	adds	r5, #8
 8007c72:	2d0c      	cmp	r5, #12
 8007c74:	bf38      	it	cc
 8007c76:	250c      	movcc	r5, #12
 8007c78:	2d00      	cmp	r5, #0
 8007c7a:	4606      	mov	r6, r0
 8007c7c:	db01      	blt.n	8007c82 <_malloc_r+0x1a>
 8007c7e:	42a9      	cmp	r1, r5
 8007c80:	d903      	bls.n	8007c8a <_malloc_r+0x22>
 8007c82:	230c      	movs	r3, #12
 8007c84:	6033      	str	r3, [r6, #0]
 8007c86:	2000      	movs	r0, #0
 8007c88:	bd70      	pop	{r4, r5, r6, pc}
 8007c8a:	f000 f87d 	bl	8007d88 <__malloc_lock>
 8007c8e:	4a21      	ldr	r2, [pc, #132]	; (8007d14 <_malloc_r+0xac>)
 8007c90:	6814      	ldr	r4, [r2, #0]
 8007c92:	4621      	mov	r1, r4
 8007c94:	b991      	cbnz	r1, 8007cbc <_malloc_r+0x54>
 8007c96:	4c20      	ldr	r4, [pc, #128]	; (8007d18 <_malloc_r+0xb0>)
 8007c98:	6823      	ldr	r3, [r4, #0]
 8007c9a:	b91b      	cbnz	r3, 8007ca4 <_malloc_r+0x3c>
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f000 f863 	bl	8007d68 <_sbrk_r>
 8007ca2:	6020      	str	r0, [r4, #0]
 8007ca4:	4629      	mov	r1, r5
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	f000 f85e 	bl	8007d68 <_sbrk_r>
 8007cac:	1c43      	adds	r3, r0, #1
 8007cae:	d124      	bne.n	8007cfa <_malloc_r+0x92>
 8007cb0:	230c      	movs	r3, #12
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	6033      	str	r3, [r6, #0]
 8007cb6:	f000 f868 	bl	8007d8a <__malloc_unlock>
 8007cba:	e7e4      	b.n	8007c86 <_malloc_r+0x1e>
 8007cbc:	680b      	ldr	r3, [r1, #0]
 8007cbe:	1b5b      	subs	r3, r3, r5
 8007cc0:	d418      	bmi.n	8007cf4 <_malloc_r+0x8c>
 8007cc2:	2b0b      	cmp	r3, #11
 8007cc4:	d90f      	bls.n	8007ce6 <_malloc_r+0x7e>
 8007cc6:	600b      	str	r3, [r1, #0]
 8007cc8:	18cc      	adds	r4, r1, r3
 8007cca:	50cd      	str	r5, [r1, r3]
 8007ccc:	4630      	mov	r0, r6
 8007cce:	f000 f85c 	bl	8007d8a <__malloc_unlock>
 8007cd2:	f104 000b 	add.w	r0, r4, #11
 8007cd6:	1d23      	adds	r3, r4, #4
 8007cd8:	f020 0007 	bic.w	r0, r0, #7
 8007cdc:	1ac3      	subs	r3, r0, r3
 8007cde:	d0d3      	beq.n	8007c88 <_malloc_r+0x20>
 8007ce0:	425a      	negs	r2, r3
 8007ce2:	50e2      	str	r2, [r4, r3]
 8007ce4:	e7d0      	b.n	8007c88 <_malloc_r+0x20>
 8007ce6:	684b      	ldr	r3, [r1, #4]
 8007ce8:	428c      	cmp	r4, r1
 8007cea:	bf16      	itet	ne
 8007cec:	6063      	strne	r3, [r4, #4]
 8007cee:	6013      	streq	r3, [r2, #0]
 8007cf0:	460c      	movne	r4, r1
 8007cf2:	e7eb      	b.n	8007ccc <_malloc_r+0x64>
 8007cf4:	460c      	mov	r4, r1
 8007cf6:	6849      	ldr	r1, [r1, #4]
 8007cf8:	e7cc      	b.n	8007c94 <_malloc_r+0x2c>
 8007cfa:	1cc4      	adds	r4, r0, #3
 8007cfc:	f024 0403 	bic.w	r4, r4, #3
 8007d00:	42a0      	cmp	r0, r4
 8007d02:	d005      	beq.n	8007d10 <_malloc_r+0xa8>
 8007d04:	1a21      	subs	r1, r4, r0
 8007d06:	4630      	mov	r0, r6
 8007d08:	f000 f82e 	bl	8007d68 <_sbrk_r>
 8007d0c:	3001      	adds	r0, #1
 8007d0e:	d0cf      	beq.n	8007cb0 <_malloc_r+0x48>
 8007d10:	6025      	str	r5, [r4, #0]
 8007d12:	e7db      	b.n	8007ccc <_malloc_r+0x64>
 8007d14:	20001fb0 	.word	0x20001fb0
 8007d18:	20001fb4 	.word	0x20001fb4

08007d1c <_realloc_r>:
 8007d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1e:	4607      	mov	r7, r0
 8007d20:	4614      	mov	r4, r2
 8007d22:	460e      	mov	r6, r1
 8007d24:	b921      	cbnz	r1, 8007d30 <_realloc_r+0x14>
 8007d26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d2a:	4611      	mov	r1, r2
 8007d2c:	f7ff bf9c 	b.w	8007c68 <_malloc_r>
 8007d30:	b922      	cbnz	r2, 8007d3c <_realloc_r+0x20>
 8007d32:	f7ff ff4d 	bl	8007bd0 <_free_r>
 8007d36:	4625      	mov	r5, r4
 8007d38:	4628      	mov	r0, r5
 8007d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d3c:	f000 f826 	bl	8007d8c <_malloc_usable_size_r>
 8007d40:	42a0      	cmp	r0, r4
 8007d42:	d20f      	bcs.n	8007d64 <_realloc_r+0x48>
 8007d44:	4621      	mov	r1, r4
 8007d46:	4638      	mov	r0, r7
 8007d48:	f7ff ff8e 	bl	8007c68 <_malloc_r>
 8007d4c:	4605      	mov	r5, r0
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	d0f2      	beq.n	8007d38 <_realloc_r+0x1c>
 8007d52:	4631      	mov	r1, r6
 8007d54:	4622      	mov	r2, r4
 8007d56:	f7ff fb0f 	bl	8007378 <memcpy>
 8007d5a:	4631      	mov	r1, r6
 8007d5c:	4638      	mov	r0, r7
 8007d5e:	f7ff ff37 	bl	8007bd0 <_free_r>
 8007d62:	e7e9      	b.n	8007d38 <_realloc_r+0x1c>
 8007d64:	4635      	mov	r5, r6
 8007d66:	e7e7      	b.n	8007d38 <_realloc_r+0x1c>

08007d68 <_sbrk_r>:
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	4c05      	ldr	r4, [pc, #20]	; (8007d84 <_sbrk_r+0x1c>)
 8007d6e:	4605      	mov	r5, r0
 8007d70:	4608      	mov	r0, r1
 8007d72:	6023      	str	r3, [r4, #0]
 8007d74:	f7f9 fa4a 	bl	800120c <_sbrk>
 8007d78:	1c43      	adds	r3, r0, #1
 8007d7a:	d102      	bne.n	8007d82 <_sbrk_r+0x1a>
 8007d7c:	6823      	ldr	r3, [r4, #0]
 8007d7e:	b103      	cbz	r3, 8007d82 <_sbrk_r+0x1a>
 8007d80:	602b      	str	r3, [r5, #0]
 8007d82:	bd38      	pop	{r3, r4, r5, pc}
 8007d84:	2000209c 	.word	0x2000209c

08007d88 <__malloc_lock>:
 8007d88:	4770      	bx	lr

08007d8a <__malloc_unlock>:
 8007d8a:	4770      	bx	lr

08007d8c <_malloc_usable_size_r>:
 8007d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d90:	1f18      	subs	r0, r3, #4
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	bfbc      	itt	lt
 8007d96:	580b      	ldrlt	r3, [r1, r0]
 8007d98:	18c0      	addlt	r0, r0, r3
 8007d9a:	4770      	bx	lr

08007d9c <_init>:
 8007d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9e:	bf00      	nop
 8007da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007da2:	bc08      	pop	{r3}
 8007da4:	469e      	mov	lr, r3
 8007da6:	4770      	bx	lr

08007da8 <_fini>:
 8007da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007daa:	bf00      	nop
 8007dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dae:	bc08      	pop	{r3}
 8007db0:	469e      	mov	lr, r3
 8007db2:	4770      	bx	lr
