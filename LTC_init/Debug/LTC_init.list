
LTC_init.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a538  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800a5f8  0800a5f8  0001a5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aaa8  0800aaa8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800aaa8  0800aaa8  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aaa8  0800aaa8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aaa8  0800aaa8  0001aaa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aaac  0800aaac  0001aaac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800aab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000960  200001dc  0800ac8c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b3c  0800ac8c  00020b3c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8a6  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b7d  00000000  00000000  0002aaaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000918  00000000  00000000  0002c628  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000860  00000000  00000000  0002cf40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00011ad8  00000000  00000000  0002d7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008408  00000000  00000000  0003f278  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00067085  00000000  00000000  00047680  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ae705  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031ec  00000000  00000000  000ae780  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001dc 	.word	0x200001dc
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800a5dc 	.word	0x0800a5dc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e0 	.word	0x200001e0
 8000100:	0800a5dc 	.word	0x0800a5dc

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdrcmple>:
 8000414:	4684      	mov	ip, r0
 8000416:	1c10      	adds	r0, r2, #0
 8000418:	4662      	mov	r2, ip
 800041a:	468c      	mov	ip, r1
 800041c:	1c19      	adds	r1, r3, #0
 800041e:	4663      	mov	r3, ip
 8000420:	e000      	b.n	8000424 <__aeabi_cdcmpeq>
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdcmpeq>:
 8000424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000426:	f001 f86b 	bl	8001500 <__ledf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	d401      	bmi.n	8000432 <__aeabi_cdcmpeq+0xe>
 800042e:	2100      	movs	r1, #0
 8000430:	42c8      	cmn	r0, r1
 8000432:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000434 <__aeabi_dcmpeq>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 ffc3 	bl	80013c0 <__eqdf2>
 800043a:	4240      	negs	r0, r0
 800043c:	3001      	adds	r0, #1
 800043e:	bd10      	pop	{r4, pc}

08000440 <__aeabi_dcmplt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f001 f85d 	bl	8001500 <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	db01      	blt.n	800044e <__aeabi_dcmplt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmple>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f853 	bl	8001500 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dd01      	ble.n	8000462 <__aeabi_dcmple+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmpgt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 ffe5 	bl	8001438 <__gedf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dc01      	bgt.n	8000476 <__aeabi_dcmpgt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpge>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ffdb 	bl	8001438 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	da01      	bge.n	800048a <__aeabi_dcmpge+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_d2uiz>:
 8000490:	b570      	push	{r4, r5, r6, lr}
 8000492:	2200      	movs	r2, #0
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <__aeabi_d2uiz+0x38>)
 8000496:	0004      	movs	r4, r0
 8000498:	000d      	movs	r5, r1
 800049a:	f7ff ffef 	bl	800047c <__aeabi_dcmpge>
 800049e:	2800      	cmp	r0, #0
 80004a0:	d104      	bne.n	80004ac <__aeabi_d2uiz+0x1c>
 80004a2:	0020      	movs	r0, r4
 80004a4:	0029      	movs	r1, r5
 80004a6:	f001 fe69 	bl	800217c <__aeabi_d2iz>
 80004aa:	bd70      	pop	{r4, r5, r6, pc}
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <__aeabi_d2uiz+0x38>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	0020      	movs	r0, r4
 80004b2:	0029      	movs	r1, r5
 80004b4:	f001 fafe 	bl	8001ab4 <__aeabi_dsub>
 80004b8:	f001 fe60 	bl	800217c <__aeabi_d2iz>
 80004bc:	2380      	movs	r3, #128	; 0x80
 80004be:	061b      	lsls	r3, r3, #24
 80004c0:	469c      	mov	ip, r3
 80004c2:	4460      	add	r0, ip
 80004c4:	e7f1      	b.n	80004aa <__aeabi_d2uiz+0x1a>
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	41e00000 	.word	0x41e00000

080004cc <__aeabi_fdiv>:
 80004cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ce:	4657      	mov	r7, sl
 80004d0:	464e      	mov	r6, r9
 80004d2:	4645      	mov	r5, r8
 80004d4:	46de      	mov	lr, fp
 80004d6:	0244      	lsls	r4, r0, #9
 80004d8:	b5e0      	push	{r5, r6, r7, lr}
 80004da:	0046      	lsls	r6, r0, #1
 80004dc:	4688      	mov	r8, r1
 80004de:	0a64      	lsrs	r4, r4, #9
 80004e0:	0e36      	lsrs	r6, r6, #24
 80004e2:	0fc7      	lsrs	r7, r0, #31
 80004e4:	2e00      	cmp	r6, #0
 80004e6:	d063      	beq.n	80005b0 <__aeabi_fdiv+0xe4>
 80004e8:	2eff      	cmp	r6, #255	; 0xff
 80004ea:	d024      	beq.n	8000536 <__aeabi_fdiv+0x6a>
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	00e4      	lsls	r4, r4, #3
 80004f0:	04db      	lsls	r3, r3, #19
 80004f2:	431c      	orrs	r4, r3
 80004f4:	2300      	movs	r3, #0
 80004f6:	4699      	mov	r9, r3
 80004f8:	469b      	mov	fp, r3
 80004fa:	3e7f      	subs	r6, #127	; 0x7f
 80004fc:	4643      	mov	r3, r8
 80004fe:	4642      	mov	r2, r8
 8000500:	025d      	lsls	r5, r3, #9
 8000502:	0fd2      	lsrs	r2, r2, #31
 8000504:	005b      	lsls	r3, r3, #1
 8000506:	0a6d      	lsrs	r5, r5, #9
 8000508:	0e1b      	lsrs	r3, r3, #24
 800050a:	4690      	mov	r8, r2
 800050c:	4692      	mov	sl, r2
 800050e:	d065      	beq.n	80005dc <__aeabi_fdiv+0x110>
 8000510:	2bff      	cmp	r3, #255	; 0xff
 8000512:	d055      	beq.n	80005c0 <__aeabi_fdiv+0xf4>
 8000514:	2280      	movs	r2, #128	; 0x80
 8000516:	2100      	movs	r1, #0
 8000518:	00ed      	lsls	r5, r5, #3
 800051a:	04d2      	lsls	r2, r2, #19
 800051c:	3b7f      	subs	r3, #127	; 0x7f
 800051e:	4315      	orrs	r5, r2
 8000520:	1af6      	subs	r6, r6, r3
 8000522:	4643      	mov	r3, r8
 8000524:	464a      	mov	r2, r9
 8000526:	407b      	eors	r3, r7
 8000528:	2a0f      	cmp	r2, #15
 800052a:	d900      	bls.n	800052e <__aeabi_fdiv+0x62>
 800052c:	e08d      	b.n	800064a <__aeabi_fdiv+0x17e>
 800052e:	486d      	ldr	r0, [pc, #436]	; (80006e4 <__aeabi_fdiv+0x218>)
 8000530:	0092      	lsls	r2, r2, #2
 8000532:	5882      	ldr	r2, [r0, r2]
 8000534:	4697      	mov	pc, r2
 8000536:	2c00      	cmp	r4, #0
 8000538:	d154      	bne.n	80005e4 <__aeabi_fdiv+0x118>
 800053a:	2308      	movs	r3, #8
 800053c:	4699      	mov	r9, r3
 800053e:	3b06      	subs	r3, #6
 8000540:	26ff      	movs	r6, #255	; 0xff
 8000542:	469b      	mov	fp, r3
 8000544:	e7da      	b.n	80004fc <__aeabi_fdiv+0x30>
 8000546:	2500      	movs	r5, #0
 8000548:	4653      	mov	r3, sl
 800054a:	2902      	cmp	r1, #2
 800054c:	d01b      	beq.n	8000586 <__aeabi_fdiv+0xba>
 800054e:	2903      	cmp	r1, #3
 8000550:	d100      	bne.n	8000554 <__aeabi_fdiv+0x88>
 8000552:	e0bf      	b.n	80006d4 <__aeabi_fdiv+0x208>
 8000554:	2901      	cmp	r1, #1
 8000556:	d028      	beq.n	80005aa <__aeabi_fdiv+0xde>
 8000558:	0030      	movs	r0, r6
 800055a:	307f      	adds	r0, #127	; 0x7f
 800055c:	2800      	cmp	r0, #0
 800055e:	dd20      	ble.n	80005a2 <__aeabi_fdiv+0xd6>
 8000560:	076a      	lsls	r2, r5, #29
 8000562:	d004      	beq.n	800056e <__aeabi_fdiv+0xa2>
 8000564:	220f      	movs	r2, #15
 8000566:	402a      	ands	r2, r5
 8000568:	2a04      	cmp	r2, #4
 800056a:	d000      	beq.n	800056e <__aeabi_fdiv+0xa2>
 800056c:	3504      	adds	r5, #4
 800056e:	012a      	lsls	r2, r5, #4
 8000570:	d503      	bpl.n	800057a <__aeabi_fdiv+0xae>
 8000572:	0030      	movs	r0, r6
 8000574:	4a5c      	ldr	r2, [pc, #368]	; (80006e8 <__aeabi_fdiv+0x21c>)
 8000576:	3080      	adds	r0, #128	; 0x80
 8000578:	4015      	ands	r5, r2
 800057a:	28fe      	cmp	r0, #254	; 0xfe
 800057c:	dc03      	bgt.n	8000586 <__aeabi_fdiv+0xba>
 800057e:	01ac      	lsls	r4, r5, #6
 8000580:	0a64      	lsrs	r4, r4, #9
 8000582:	b2c2      	uxtb	r2, r0
 8000584:	e001      	b.n	800058a <__aeabi_fdiv+0xbe>
 8000586:	22ff      	movs	r2, #255	; 0xff
 8000588:	2400      	movs	r4, #0
 800058a:	0264      	lsls	r4, r4, #9
 800058c:	05d2      	lsls	r2, r2, #23
 800058e:	0a60      	lsrs	r0, r4, #9
 8000590:	07db      	lsls	r3, r3, #31
 8000592:	4310      	orrs	r0, r2
 8000594:	4318      	orrs	r0, r3
 8000596:	bc3c      	pop	{r2, r3, r4, r5}
 8000598:	4690      	mov	r8, r2
 800059a:	4699      	mov	r9, r3
 800059c:	46a2      	mov	sl, r4
 800059e:	46ab      	mov	fp, r5
 80005a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005a2:	2201      	movs	r2, #1
 80005a4:	1a10      	subs	r0, r2, r0
 80005a6:	281b      	cmp	r0, #27
 80005a8:	dd7c      	ble.n	80006a4 <__aeabi_fdiv+0x1d8>
 80005aa:	2200      	movs	r2, #0
 80005ac:	2400      	movs	r4, #0
 80005ae:	e7ec      	b.n	800058a <__aeabi_fdiv+0xbe>
 80005b0:	2c00      	cmp	r4, #0
 80005b2:	d11d      	bne.n	80005f0 <__aeabi_fdiv+0x124>
 80005b4:	2304      	movs	r3, #4
 80005b6:	4699      	mov	r9, r3
 80005b8:	3b03      	subs	r3, #3
 80005ba:	2600      	movs	r6, #0
 80005bc:	469b      	mov	fp, r3
 80005be:	e79d      	b.n	80004fc <__aeabi_fdiv+0x30>
 80005c0:	3eff      	subs	r6, #255	; 0xff
 80005c2:	2d00      	cmp	r5, #0
 80005c4:	d120      	bne.n	8000608 <__aeabi_fdiv+0x13c>
 80005c6:	2102      	movs	r1, #2
 80005c8:	4643      	mov	r3, r8
 80005ca:	464a      	mov	r2, r9
 80005cc:	407b      	eors	r3, r7
 80005ce:	430a      	orrs	r2, r1
 80005d0:	2a0f      	cmp	r2, #15
 80005d2:	d8d8      	bhi.n	8000586 <__aeabi_fdiv+0xba>
 80005d4:	4845      	ldr	r0, [pc, #276]	; (80006ec <__aeabi_fdiv+0x220>)
 80005d6:	0092      	lsls	r2, r2, #2
 80005d8:	5882      	ldr	r2, [r0, r2]
 80005da:	4697      	mov	pc, r2
 80005dc:	2d00      	cmp	r5, #0
 80005de:	d119      	bne.n	8000614 <__aeabi_fdiv+0x148>
 80005e0:	2101      	movs	r1, #1
 80005e2:	e7f1      	b.n	80005c8 <__aeabi_fdiv+0xfc>
 80005e4:	230c      	movs	r3, #12
 80005e6:	4699      	mov	r9, r3
 80005e8:	3b09      	subs	r3, #9
 80005ea:	26ff      	movs	r6, #255	; 0xff
 80005ec:	469b      	mov	fp, r3
 80005ee:	e785      	b.n	80004fc <__aeabi_fdiv+0x30>
 80005f0:	0020      	movs	r0, r4
 80005f2:	f001 ff3b 	bl	800246c <__clzsi2>
 80005f6:	2676      	movs	r6, #118	; 0x76
 80005f8:	1f43      	subs	r3, r0, #5
 80005fa:	409c      	lsls	r4, r3
 80005fc:	2300      	movs	r3, #0
 80005fe:	4276      	negs	r6, r6
 8000600:	1a36      	subs	r6, r6, r0
 8000602:	4699      	mov	r9, r3
 8000604:	469b      	mov	fp, r3
 8000606:	e779      	b.n	80004fc <__aeabi_fdiv+0x30>
 8000608:	464a      	mov	r2, r9
 800060a:	2303      	movs	r3, #3
 800060c:	431a      	orrs	r2, r3
 800060e:	4691      	mov	r9, r2
 8000610:	2103      	movs	r1, #3
 8000612:	e786      	b.n	8000522 <__aeabi_fdiv+0x56>
 8000614:	0028      	movs	r0, r5
 8000616:	f001 ff29 	bl	800246c <__clzsi2>
 800061a:	1f43      	subs	r3, r0, #5
 800061c:	1836      	adds	r6, r6, r0
 800061e:	409d      	lsls	r5, r3
 8000620:	3676      	adds	r6, #118	; 0x76
 8000622:	2100      	movs	r1, #0
 8000624:	e77d      	b.n	8000522 <__aeabi_fdiv+0x56>
 8000626:	2480      	movs	r4, #128	; 0x80
 8000628:	2300      	movs	r3, #0
 800062a:	03e4      	lsls	r4, r4, #15
 800062c:	22ff      	movs	r2, #255	; 0xff
 800062e:	e7ac      	b.n	800058a <__aeabi_fdiv+0xbe>
 8000630:	2500      	movs	r5, #0
 8000632:	2380      	movs	r3, #128	; 0x80
 8000634:	03db      	lsls	r3, r3, #15
 8000636:	421c      	tst	r4, r3
 8000638:	d028      	beq.n	800068c <__aeabi_fdiv+0x1c0>
 800063a:	421d      	tst	r5, r3
 800063c:	d126      	bne.n	800068c <__aeabi_fdiv+0x1c0>
 800063e:	432b      	orrs	r3, r5
 8000640:	025c      	lsls	r4, r3, #9
 8000642:	0a64      	lsrs	r4, r4, #9
 8000644:	4643      	mov	r3, r8
 8000646:	22ff      	movs	r2, #255	; 0xff
 8000648:	e79f      	b.n	800058a <__aeabi_fdiv+0xbe>
 800064a:	0162      	lsls	r2, r4, #5
 800064c:	016c      	lsls	r4, r5, #5
 800064e:	42a2      	cmp	r2, r4
 8000650:	d224      	bcs.n	800069c <__aeabi_fdiv+0x1d0>
 8000652:	211b      	movs	r1, #27
 8000654:	2500      	movs	r5, #0
 8000656:	3e01      	subs	r6, #1
 8000658:	2701      	movs	r7, #1
 800065a:	0010      	movs	r0, r2
 800065c:	006d      	lsls	r5, r5, #1
 800065e:	0052      	lsls	r2, r2, #1
 8000660:	2800      	cmp	r0, #0
 8000662:	db01      	blt.n	8000668 <__aeabi_fdiv+0x19c>
 8000664:	4294      	cmp	r4, r2
 8000666:	d801      	bhi.n	800066c <__aeabi_fdiv+0x1a0>
 8000668:	1b12      	subs	r2, r2, r4
 800066a:	433d      	orrs	r5, r7
 800066c:	3901      	subs	r1, #1
 800066e:	2900      	cmp	r1, #0
 8000670:	d1f3      	bne.n	800065a <__aeabi_fdiv+0x18e>
 8000672:	0014      	movs	r4, r2
 8000674:	1e62      	subs	r2, r4, #1
 8000676:	4194      	sbcs	r4, r2
 8000678:	4325      	orrs	r5, r4
 800067a:	e76d      	b.n	8000558 <__aeabi_fdiv+0x8c>
 800067c:	46ba      	mov	sl, r7
 800067e:	4659      	mov	r1, fp
 8000680:	0025      	movs	r5, r4
 8000682:	4653      	mov	r3, sl
 8000684:	2902      	cmp	r1, #2
 8000686:	d000      	beq.n	800068a <__aeabi_fdiv+0x1be>
 8000688:	e761      	b.n	800054e <__aeabi_fdiv+0x82>
 800068a:	e77c      	b.n	8000586 <__aeabi_fdiv+0xba>
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	03db      	lsls	r3, r3, #15
 8000690:	431c      	orrs	r4, r3
 8000692:	0264      	lsls	r4, r4, #9
 8000694:	0a64      	lsrs	r4, r4, #9
 8000696:	003b      	movs	r3, r7
 8000698:	22ff      	movs	r2, #255	; 0xff
 800069a:	e776      	b.n	800058a <__aeabi_fdiv+0xbe>
 800069c:	1b12      	subs	r2, r2, r4
 800069e:	211a      	movs	r1, #26
 80006a0:	2501      	movs	r5, #1
 80006a2:	e7d9      	b.n	8000658 <__aeabi_fdiv+0x18c>
 80006a4:	369e      	adds	r6, #158	; 0x9e
 80006a6:	002a      	movs	r2, r5
 80006a8:	40b5      	lsls	r5, r6
 80006aa:	002c      	movs	r4, r5
 80006ac:	40c2      	lsrs	r2, r0
 80006ae:	1e65      	subs	r5, r4, #1
 80006b0:	41ac      	sbcs	r4, r5
 80006b2:	4314      	orrs	r4, r2
 80006b4:	0762      	lsls	r2, r4, #29
 80006b6:	d004      	beq.n	80006c2 <__aeabi_fdiv+0x1f6>
 80006b8:	220f      	movs	r2, #15
 80006ba:	4022      	ands	r2, r4
 80006bc:	2a04      	cmp	r2, #4
 80006be:	d000      	beq.n	80006c2 <__aeabi_fdiv+0x1f6>
 80006c0:	3404      	adds	r4, #4
 80006c2:	0162      	lsls	r2, r4, #5
 80006c4:	d403      	bmi.n	80006ce <__aeabi_fdiv+0x202>
 80006c6:	01a4      	lsls	r4, r4, #6
 80006c8:	0a64      	lsrs	r4, r4, #9
 80006ca:	2200      	movs	r2, #0
 80006cc:	e75d      	b.n	800058a <__aeabi_fdiv+0xbe>
 80006ce:	2201      	movs	r2, #1
 80006d0:	2400      	movs	r4, #0
 80006d2:	e75a      	b.n	800058a <__aeabi_fdiv+0xbe>
 80006d4:	2480      	movs	r4, #128	; 0x80
 80006d6:	03e4      	lsls	r4, r4, #15
 80006d8:	432c      	orrs	r4, r5
 80006da:	0264      	lsls	r4, r4, #9
 80006dc:	0a64      	lsrs	r4, r4, #9
 80006de:	22ff      	movs	r2, #255	; 0xff
 80006e0:	e753      	b.n	800058a <__aeabi_fdiv+0xbe>
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	0800a66c 	.word	0x0800a66c
 80006e8:	f7ffffff 	.word	0xf7ffffff
 80006ec:	0800a6ac 	.word	0x0800a6ac

080006f0 <__aeabi_i2f>:
 80006f0:	b570      	push	{r4, r5, r6, lr}
 80006f2:	2800      	cmp	r0, #0
 80006f4:	d03d      	beq.n	8000772 <__aeabi_i2f+0x82>
 80006f6:	17c3      	asrs	r3, r0, #31
 80006f8:	18c5      	adds	r5, r0, r3
 80006fa:	405d      	eors	r5, r3
 80006fc:	0fc4      	lsrs	r4, r0, #31
 80006fe:	0028      	movs	r0, r5
 8000700:	f001 feb4 	bl	800246c <__clzsi2>
 8000704:	229e      	movs	r2, #158	; 0x9e
 8000706:	1a12      	subs	r2, r2, r0
 8000708:	2a96      	cmp	r2, #150	; 0x96
 800070a:	dc07      	bgt.n	800071c <__aeabi_i2f+0x2c>
 800070c:	b2d2      	uxtb	r2, r2
 800070e:	2808      	cmp	r0, #8
 8000710:	dd33      	ble.n	800077a <__aeabi_i2f+0x8a>
 8000712:	3808      	subs	r0, #8
 8000714:	4085      	lsls	r5, r0
 8000716:	0268      	lsls	r0, r5, #9
 8000718:	0a40      	lsrs	r0, r0, #9
 800071a:	e023      	b.n	8000764 <__aeabi_i2f+0x74>
 800071c:	2a99      	cmp	r2, #153	; 0x99
 800071e:	dd0b      	ble.n	8000738 <__aeabi_i2f+0x48>
 8000720:	2305      	movs	r3, #5
 8000722:	0029      	movs	r1, r5
 8000724:	1a1b      	subs	r3, r3, r0
 8000726:	40d9      	lsrs	r1, r3
 8000728:	0003      	movs	r3, r0
 800072a:	331b      	adds	r3, #27
 800072c:	409d      	lsls	r5, r3
 800072e:	002b      	movs	r3, r5
 8000730:	1e5d      	subs	r5, r3, #1
 8000732:	41ab      	sbcs	r3, r5
 8000734:	4319      	orrs	r1, r3
 8000736:	000d      	movs	r5, r1
 8000738:	2805      	cmp	r0, #5
 800073a:	dd01      	ble.n	8000740 <__aeabi_i2f+0x50>
 800073c:	1f43      	subs	r3, r0, #5
 800073e:	409d      	lsls	r5, r3
 8000740:	002b      	movs	r3, r5
 8000742:	490f      	ldr	r1, [pc, #60]	; (8000780 <__aeabi_i2f+0x90>)
 8000744:	400b      	ands	r3, r1
 8000746:	076e      	lsls	r6, r5, #29
 8000748:	d009      	beq.n	800075e <__aeabi_i2f+0x6e>
 800074a:	260f      	movs	r6, #15
 800074c:	4035      	ands	r5, r6
 800074e:	2d04      	cmp	r5, #4
 8000750:	d005      	beq.n	800075e <__aeabi_i2f+0x6e>
 8000752:	3304      	adds	r3, #4
 8000754:	015d      	lsls	r5, r3, #5
 8000756:	d502      	bpl.n	800075e <__aeabi_i2f+0x6e>
 8000758:	229f      	movs	r2, #159	; 0x9f
 800075a:	400b      	ands	r3, r1
 800075c:	1a12      	subs	r2, r2, r0
 800075e:	019b      	lsls	r3, r3, #6
 8000760:	0a58      	lsrs	r0, r3, #9
 8000762:	b2d2      	uxtb	r2, r2
 8000764:	0240      	lsls	r0, r0, #9
 8000766:	05d2      	lsls	r2, r2, #23
 8000768:	0a40      	lsrs	r0, r0, #9
 800076a:	07e4      	lsls	r4, r4, #31
 800076c:	4310      	orrs	r0, r2
 800076e:	4320      	orrs	r0, r4
 8000770:	bd70      	pop	{r4, r5, r6, pc}
 8000772:	2400      	movs	r4, #0
 8000774:	2200      	movs	r2, #0
 8000776:	2000      	movs	r0, #0
 8000778:	e7f4      	b.n	8000764 <__aeabi_i2f+0x74>
 800077a:	0268      	lsls	r0, r5, #9
 800077c:	0a40      	lsrs	r0, r0, #9
 800077e:	e7f1      	b.n	8000764 <__aeabi_i2f+0x74>
 8000780:	fbffffff 	.word	0xfbffffff

08000784 <__aeabi_dadd>:
 8000784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000786:	464f      	mov	r7, r9
 8000788:	4646      	mov	r6, r8
 800078a:	46d6      	mov	lr, sl
 800078c:	000c      	movs	r4, r1
 800078e:	0309      	lsls	r1, r1, #12
 8000790:	b5c0      	push	{r6, r7, lr}
 8000792:	0a49      	lsrs	r1, r1, #9
 8000794:	0f47      	lsrs	r7, r0, #29
 8000796:	005e      	lsls	r6, r3, #1
 8000798:	4339      	orrs	r1, r7
 800079a:	031f      	lsls	r7, r3, #12
 800079c:	0fdb      	lsrs	r3, r3, #31
 800079e:	469c      	mov	ip, r3
 80007a0:	0065      	lsls	r5, r4, #1
 80007a2:	0a7b      	lsrs	r3, r7, #9
 80007a4:	0f57      	lsrs	r7, r2, #29
 80007a6:	431f      	orrs	r7, r3
 80007a8:	0d6d      	lsrs	r5, r5, #21
 80007aa:	0fe4      	lsrs	r4, r4, #31
 80007ac:	0d76      	lsrs	r6, r6, #21
 80007ae:	46a1      	mov	r9, r4
 80007b0:	00c0      	lsls	r0, r0, #3
 80007b2:	46b8      	mov	r8, r7
 80007b4:	00d2      	lsls	r2, r2, #3
 80007b6:	1bab      	subs	r3, r5, r6
 80007b8:	4564      	cmp	r4, ip
 80007ba:	d07b      	beq.n	80008b4 <__aeabi_dadd+0x130>
 80007bc:	2b00      	cmp	r3, #0
 80007be:	dd5f      	ble.n	8000880 <__aeabi_dadd+0xfc>
 80007c0:	2e00      	cmp	r6, #0
 80007c2:	d000      	beq.n	80007c6 <__aeabi_dadd+0x42>
 80007c4:	e0a4      	b.n	8000910 <__aeabi_dadd+0x18c>
 80007c6:	003e      	movs	r6, r7
 80007c8:	4316      	orrs	r6, r2
 80007ca:	d100      	bne.n	80007ce <__aeabi_dadd+0x4a>
 80007cc:	e112      	b.n	80009f4 <__aeabi_dadd+0x270>
 80007ce:	1e5e      	subs	r6, r3, #1
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d000      	beq.n	80007d6 <__aeabi_dadd+0x52>
 80007d4:	e19e      	b.n	8000b14 <__aeabi_dadd+0x390>
 80007d6:	1a87      	subs	r7, r0, r2
 80007d8:	4643      	mov	r3, r8
 80007da:	42b8      	cmp	r0, r7
 80007dc:	4180      	sbcs	r0, r0
 80007de:	2501      	movs	r5, #1
 80007e0:	1ac9      	subs	r1, r1, r3
 80007e2:	4240      	negs	r0, r0
 80007e4:	1a09      	subs	r1, r1, r0
 80007e6:	020b      	lsls	r3, r1, #8
 80007e8:	d400      	bmi.n	80007ec <__aeabi_dadd+0x68>
 80007ea:	e131      	b.n	8000a50 <__aeabi_dadd+0x2cc>
 80007ec:	0249      	lsls	r1, r1, #9
 80007ee:	0a4e      	lsrs	r6, r1, #9
 80007f0:	2e00      	cmp	r6, #0
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x72>
 80007f4:	e16e      	b.n	8000ad4 <__aeabi_dadd+0x350>
 80007f6:	0030      	movs	r0, r6
 80007f8:	f001 fe38 	bl	800246c <__clzsi2>
 80007fc:	0003      	movs	r3, r0
 80007fe:	3b08      	subs	r3, #8
 8000800:	2b1f      	cmp	r3, #31
 8000802:	dd00      	ble.n	8000806 <__aeabi_dadd+0x82>
 8000804:	e161      	b.n	8000aca <__aeabi_dadd+0x346>
 8000806:	2220      	movs	r2, #32
 8000808:	0039      	movs	r1, r7
 800080a:	1ad2      	subs	r2, r2, r3
 800080c:	409e      	lsls	r6, r3
 800080e:	40d1      	lsrs	r1, r2
 8000810:	409f      	lsls	r7, r3
 8000812:	430e      	orrs	r6, r1
 8000814:	429d      	cmp	r5, r3
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x96>
 8000818:	e151      	b.n	8000abe <__aeabi_dadd+0x33a>
 800081a:	1b5d      	subs	r5, r3, r5
 800081c:	1c6b      	adds	r3, r5, #1
 800081e:	2b1f      	cmp	r3, #31
 8000820:	dd00      	ble.n	8000824 <__aeabi_dadd+0xa0>
 8000822:	e17c      	b.n	8000b1e <__aeabi_dadd+0x39a>
 8000824:	2120      	movs	r1, #32
 8000826:	1ac9      	subs	r1, r1, r3
 8000828:	003d      	movs	r5, r7
 800082a:	0030      	movs	r0, r6
 800082c:	408f      	lsls	r7, r1
 800082e:	4088      	lsls	r0, r1
 8000830:	40dd      	lsrs	r5, r3
 8000832:	1e79      	subs	r1, r7, #1
 8000834:	418f      	sbcs	r7, r1
 8000836:	0031      	movs	r1, r6
 8000838:	2207      	movs	r2, #7
 800083a:	4328      	orrs	r0, r5
 800083c:	40d9      	lsrs	r1, r3
 800083e:	2500      	movs	r5, #0
 8000840:	4307      	orrs	r7, r0
 8000842:	403a      	ands	r2, r7
 8000844:	2a00      	cmp	r2, #0
 8000846:	d009      	beq.n	800085c <__aeabi_dadd+0xd8>
 8000848:	230f      	movs	r3, #15
 800084a:	403b      	ands	r3, r7
 800084c:	2b04      	cmp	r3, #4
 800084e:	d005      	beq.n	800085c <__aeabi_dadd+0xd8>
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	42bb      	cmp	r3, r7
 8000854:	41bf      	sbcs	r7, r7
 8000856:	427f      	negs	r7, r7
 8000858:	19c9      	adds	r1, r1, r7
 800085a:	001f      	movs	r7, r3
 800085c:	020b      	lsls	r3, r1, #8
 800085e:	d400      	bmi.n	8000862 <__aeabi_dadd+0xde>
 8000860:	e226      	b.n	8000cb0 <__aeabi_dadd+0x52c>
 8000862:	1c6a      	adds	r2, r5, #1
 8000864:	4bc6      	ldr	r3, [pc, #792]	; (8000b80 <__aeabi_dadd+0x3fc>)
 8000866:	0555      	lsls	r5, r2, #21
 8000868:	0d6d      	lsrs	r5, r5, #21
 800086a:	429a      	cmp	r2, r3
 800086c:	d100      	bne.n	8000870 <__aeabi_dadd+0xec>
 800086e:	e106      	b.n	8000a7e <__aeabi_dadd+0x2fa>
 8000870:	4ac4      	ldr	r2, [pc, #784]	; (8000b84 <__aeabi_dadd+0x400>)
 8000872:	08ff      	lsrs	r7, r7, #3
 8000874:	400a      	ands	r2, r1
 8000876:	0753      	lsls	r3, r2, #29
 8000878:	0252      	lsls	r2, r2, #9
 800087a:	433b      	orrs	r3, r7
 800087c:	0b12      	lsrs	r2, r2, #12
 800087e:	e08e      	b.n	800099e <__aeabi_dadd+0x21a>
 8000880:	2b00      	cmp	r3, #0
 8000882:	d000      	beq.n	8000886 <__aeabi_dadd+0x102>
 8000884:	e0b8      	b.n	80009f8 <__aeabi_dadd+0x274>
 8000886:	1c6b      	adds	r3, r5, #1
 8000888:	055b      	lsls	r3, r3, #21
 800088a:	0d5b      	lsrs	r3, r3, #21
 800088c:	2b01      	cmp	r3, #1
 800088e:	dc00      	bgt.n	8000892 <__aeabi_dadd+0x10e>
 8000890:	e130      	b.n	8000af4 <__aeabi_dadd+0x370>
 8000892:	1a87      	subs	r7, r0, r2
 8000894:	4643      	mov	r3, r8
 8000896:	42b8      	cmp	r0, r7
 8000898:	41b6      	sbcs	r6, r6
 800089a:	1acb      	subs	r3, r1, r3
 800089c:	4276      	negs	r6, r6
 800089e:	1b9e      	subs	r6, r3, r6
 80008a0:	0233      	lsls	r3, r6, #8
 80008a2:	d500      	bpl.n	80008a6 <__aeabi_dadd+0x122>
 80008a4:	e14c      	b.n	8000b40 <__aeabi_dadd+0x3bc>
 80008a6:	003b      	movs	r3, r7
 80008a8:	4333      	orrs	r3, r6
 80008aa:	d1a1      	bne.n	80007f0 <__aeabi_dadd+0x6c>
 80008ac:	2200      	movs	r2, #0
 80008ae:	2400      	movs	r4, #0
 80008b0:	2500      	movs	r5, #0
 80008b2:	e070      	b.n	8000996 <__aeabi_dadd+0x212>
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	dc00      	bgt.n	80008ba <__aeabi_dadd+0x136>
 80008b8:	e0e5      	b.n	8000a86 <__aeabi_dadd+0x302>
 80008ba:	2e00      	cmp	r6, #0
 80008bc:	d100      	bne.n	80008c0 <__aeabi_dadd+0x13c>
 80008be:	e083      	b.n	80009c8 <__aeabi_dadd+0x244>
 80008c0:	4eaf      	ldr	r6, [pc, #700]	; (8000b80 <__aeabi_dadd+0x3fc>)
 80008c2:	42b5      	cmp	r5, r6
 80008c4:	d060      	beq.n	8000988 <__aeabi_dadd+0x204>
 80008c6:	2680      	movs	r6, #128	; 0x80
 80008c8:	0436      	lsls	r6, r6, #16
 80008ca:	4337      	orrs	r7, r6
 80008cc:	46b8      	mov	r8, r7
 80008ce:	2b38      	cmp	r3, #56	; 0x38
 80008d0:	dc00      	bgt.n	80008d4 <__aeabi_dadd+0x150>
 80008d2:	e13e      	b.n	8000b52 <__aeabi_dadd+0x3ce>
 80008d4:	4643      	mov	r3, r8
 80008d6:	4313      	orrs	r3, r2
 80008d8:	001f      	movs	r7, r3
 80008da:	1e7a      	subs	r2, r7, #1
 80008dc:	4197      	sbcs	r7, r2
 80008de:	183f      	adds	r7, r7, r0
 80008e0:	4287      	cmp	r7, r0
 80008e2:	4180      	sbcs	r0, r0
 80008e4:	4240      	negs	r0, r0
 80008e6:	1809      	adds	r1, r1, r0
 80008e8:	020b      	lsls	r3, r1, #8
 80008ea:	d400      	bmi.n	80008ee <__aeabi_dadd+0x16a>
 80008ec:	e0b0      	b.n	8000a50 <__aeabi_dadd+0x2cc>
 80008ee:	4ba4      	ldr	r3, [pc, #656]	; (8000b80 <__aeabi_dadd+0x3fc>)
 80008f0:	3501      	adds	r5, #1
 80008f2:	429d      	cmp	r5, r3
 80008f4:	d100      	bne.n	80008f8 <__aeabi_dadd+0x174>
 80008f6:	e0c3      	b.n	8000a80 <__aeabi_dadd+0x2fc>
 80008f8:	4aa2      	ldr	r2, [pc, #648]	; (8000b84 <__aeabi_dadd+0x400>)
 80008fa:	087b      	lsrs	r3, r7, #1
 80008fc:	400a      	ands	r2, r1
 80008fe:	2101      	movs	r1, #1
 8000900:	400f      	ands	r7, r1
 8000902:	431f      	orrs	r7, r3
 8000904:	0851      	lsrs	r1, r2, #1
 8000906:	07d3      	lsls	r3, r2, #31
 8000908:	2207      	movs	r2, #7
 800090a:	431f      	orrs	r7, r3
 800090c:	403a      	ands	r2, r7
 800090e:	e799      	b.n	8000844 <__aeabi_dadd+0xc0>
 8000910:	4e9b      	ldr	r6, [pc, #620]	; (8000b80 <__aeabi_dadd+0x3fc>)
 8000912:	42b5      	cmp	r5, r6
 8000914:	d038      	beq.n	8000988 <__aeabi_dadd+0x204>
 8000916:	2680      	movs	r6, #128	; 0x80
 8000918:	0436      	lsls	r6, r6, #16
 800091a:	4337      	orrs	r7, r6
 800091c:	46b8      	mov	r8, r7
 800091e:	2b38      	cmp	r3, #56	; 0x38
 8000920:	dd00      	ble.n	8000924 <__aeabi_dadd+0x1a0>
 8000922:	e0dc      	b.n	8000ade <__aeabi_dadd+0x35a>
 8000924:	2b1f      	cmp	r3, #31
 8000926:	dc00      	bgt.n	800092a <__aeabi_dadd+0x1a6>
 8000928:	e130      	b.n	8000b8c <__aeabi_dadd+0x408>
 800092a:	001e      	movs	r6, r3
 800092c:	4647      	mov	r7, r8
 800092e:	3e20      	subs	r6, #32
 8000930:	40f7      	lsrs	r7, r6
 8000932:	46bc      	mov	ip, r7
 8000934:	2b20      	cmp	r3, #32
 8000936:	d004      	beq.n	8000942 <__aeabi_dadd+0x1be>
 8000938:	2640      	movs	r6, #64	; 0x40
 800093a:	1af3      	subs	r3, r6, r3
 800093c:	4646      	mov	r6, r8
 800093e:	409e      	lsls	r6, r3
 8000940:	4332      	orrs	r2, r6
 8000942:	0017      	movs	r7, r2
 8000944:	4663      	mov	r3, ip
 8000946:	1e7a      	subs	r2, r7, #1
 8000948:	4197      	sbcs	r7, r2
 800094a:	431f      	orrs	r7, r3
 800094c:	e0cc      	b.n	8000ae8 <__aeabi_dadd+0x364>
 800094e:	2b00      	cmp	r3, #0
 8000950:	d100      	bne.n	8000954 <__aeabi_dadd+0x1d0>
 8000952:	e204      	b.n	8000d5e <__aeabi_dadd+0x5da>
 8000954:	4643      	mov	r3, r8
 8000956:	4313      	orrs	r3, r2
 8000958:	d100      	bne.n	800095c <__aeabi_dadd+0x1d8>
 800095a:	e159      	b.n	8000c10 <__aeabi_dadd+0x48c>
 800095c:	074b      	lsls	r3, r1, #29
 800095e:	08c0      	lsrs	r0, r0, #3
 8000960:	4318      	orrs	r0, r3
 8000962:	2380      	movs	r3, #128	; 0x80
 8000964:	08c9      	lsrs	r1, r1, #3
 8000966:	031b      	lsls	r3, r3, #12
 8000968:	4219      	tst	r1, r3
 800096a:	d008      	beq.n	800097e <__aeabi_dadd+0x1fa>
 800096c:	4645      	mov	r5, r8
 800096e:	08ed      	lsrs	r5, r5, #3
 8000970:	421d      	tst	r5, r3
 8000972:	d104      	bne.n	800097e <__aeabi_dadd+0x1fa>
 8000974:	4643      	mov	r3, r8
 8000976:	08d0      	lsrs	r0, r2, #3
 8000978:	0759      	lsls	r1, r3, #29
 800097a:	4308      	orrs	r0, r1
 800097c:	0029      	movs	r1, r5
 800097e:	0f42      	lsrs	r2, r0, #29
 8000980:	00c9      	lsls	r1, r1, #3
 8000982:	4d7f      	ldr	r5, [pc, #508]	; (8000b80 <__aeabi_dadd+0x3fc>)
 8000984:	4311      	orrs	r1, r2
 8000986:	00c0      	lsls	r0, r0, #3
 8000988:	074b      	lsls	r3, r1, #29
 800098a:	08ca      	lsrs	r2, r1, #3
 800098c:	497c      	ldr	r1, [pc, #496]	; (8000b80 <__aeabi_dadd+0x3fc>)
 800098e:	08c0      	lsrs	r0, r0, #3
 8000990:	4303      	orrs	r3, r0
 8000992:	428d      	cmp	r5, r1
 8000994:	d068      	beq.n	8000a68 <__aeabi_dadd+0x2e4>
 8000996:	0312      	lsls	r2, r2, #12
 8000998:	056d      	lsls	r5, r5, #21
 800099a:	0b12      	lsrs	r2, r2, #12
 800099c:	0d6d      	lsrs	r5, r5, #21
 800099e:	2100      	movs	r1, #0
 80009a0:	0312      	lsls	r2, r2, #12
 80009a2:	0018      	movs	r0, r3
 80009a4:	0b13      	lsrs	r3, r2, #12
 80009a6:	0d0a      	lsrs	r2, r1, #20
 80009a8:	0512      	lsls	r2, r2, #20
 80009aa:	431a      	orrs	r2, r3
 80009ac:	4b76      	ldr	r3, [pc, #472]	; (8000b88 <__aeabi_dadd+0x404>)
 80009ae:	052d      	lsls	r5, r5, #20
 80009b0:	4013      	ands	r3, r2
 80009b2:	432b      	orrs	r3, r5
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	07e4      	lsls	r4, r4, #31
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	4323      	orrs	r3, r4
 80009bc:	0019      	movs	r1, r3
 80009be:	bc1c      	pop	{r2, r3, r4}
 80009c0:	4690      	mov	r8, r2
 80009c2:	4699      	mov	r9, r3
 80009c4:	46a2      	mov	sl, r4
 80009c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009c8:	003e      	movs	r6, r7
 80009ca:	4316      	orrs	r6, r2
 80009cc:	d012      	beq.n	80009f4 <__aeabi_dadd+0x270>
 80009ce:	1e5e      	subs	r6, r3, #1
 80009d0:	2e00      	cmp	r6, #0
 80009d2:	d000      	beq.n	80009d6 <__aeabi_dadd+0x252>
 80009d4:	e100      	b.n	8000bd8 <__aeabi_dadd+0x454>
 80009d6:	1887      	adds	r7, r0, r2
 80009d8:	4287      	cmp	r7, r0
 80009da:	4180      	sbcs	r0, r0
 80009dc:	4441      	add	r1, r8
 80009de:	4240      	negs	r0, r0
 80009e0:	1809      	adds	r1, r1, r0
 80009e2:	2501      	movs	r5, #1
 80009e4:	020b      	lsls	r3, r1, #8
 80009e6:	d533      	bpl.n	8000a50 <__aeabi_dadd+0x2cc>
 80009e8:	2502      	movs	r5, #2
 80009ea:	e785      	b.n	80008f8 <__aeabi_dadd+0x174>
 80009ec:	4664      	mov	r4, ip
 80009ee:	0033      	movs	r3, r6
 80009f0:	4641      	mov	r1, r8
 80009f2:	0010      	movs	r0, r2
 80009f4:	001d      	movs	r5, r3
 80009f6:	e7c7      	b.n	8000988 <__aeabi_dadd+0x204>
 80009f8:	2d00      	cmp	r5, #0
 80009fa:	d000      	beq.n	80009fe <__aeabi_dadd+0x27a>
 80009fc:	e0da      	b.n	8000bb4 <__aeabi_dadd+0x430>
 80009fe:	000c      	movs	r4, r1
 8000a00:	4304      	orrs	r4, r0
 8000a02:	d0f3      	beq.n	80009ec <__aeabi_dadd+0x268>
 8000a04:	1c5c      	adds	r4, r3, #1
 8000a06:	d100      	bne.n	8000a0a <__aeabi_dadd+0x286>
 8000a08:	e19f      	b.n	8000d4a <__aeabi_dadd+0x5c6>
 8000a0a:	4c5d      	ldr	r4, [pc, #372]	; (8000b80 <__aeabi_dadd+0x3fc>)
 8000a0c:	42a6      	cmp	r6, r4
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_dadd+0x28e>
 8000a10:	e12f      	b.n	8000c72 <__aeabi_dadd+0x4ee>
 8000a12:	43db      	mvns	r3, r3
 8000a14:	2b38      	cmp	r3, #56	; 0x38
 8000a16:	dd00      	ble.n	8000a1a <__aeabi_dadd+0x296>
 8000a18:	e166      	b.n	8000ce8 <__aeabi_dadd+0x564>
 8000a1a:	2b1f      	cmp	r3, #31
 8000a1c:	dd00      	ble.n	8000a20 <__aeabi_dadd+0x29c>
 8000a1e:	e183      	b.n	8000d28 <__aeabi_dadd+0x5a4>
 8000a20:	2420      	movs	r4, #32
 8000a22:	0005      	movs	r5, r0
 8000a24:	1ae4      	subs	r4, r4, r3
 8000a26:	000f      	movs	r7, r1
 8000a28:	40dd      	lsrs	r5, r3
 8000a2a:	40d9      	lsrs	r1, r3
 8000a2c:	40a0      	lsls	r0, r4
 8000a2e:	4643      	mov	r3, r8
 8000a30:	40a7      	lsls	r7, r4
 8000a32:	1a5b      	subs	r3, r3, r1
 8000a34:	1e44      	subs	r4, r0, #1
 8000a36:	41a0      	sbcs	r0, r4
 8000a38:	4698      	mov	r8, r3
 8000a3a:	432f      	orrs	r7, r5
 8000a3c:	4338      	orrs	r0, r7
 8000a3e:	1a17      	subs	r7, r2, r0
 8000a40:	42ba      	cmp	r2, r7
 8000a42:	4192      	sbcs	r2, r2
 8000a44:	4643      	mov	r3, r8
 8000a46:	4252      	negs	r2, r2
 8000a48:	1a99      	subs	r1, r3, r2
 8000a4a:	4664      	mov	r4, ip
 8000a4c:	0035      	movs	r5, r6
 8000a4e:	e6ca      	b.n	80007e6 <__aeabi_dadd+0x62>
 8000a50:	2207      	movs	r2, #7
 8000a52:	403a      	ands	r2, r7
 8000a54:	2a00      	cmp	r2, #0
 8000a56:	d000      	beq.n	8000a5a <__aeabi_dadd+0x2d6>
 8000a58:	e6f6      	b.n	8000848 <__aeabi_dadd+0xc4>
 8000a5a:	074b      	lsls	r3, r1, #29
 8000a5c:	08ca      	lsrs	r2, r1, #3
 8000a5e:	4948      	ldr	r1, [pc, #288]	; (8000b80 <__aeabi_dadd+0x3fc>)
 8000a60:	08ff      	lsrs	r7, r7, #3
 8000a62:	433b      	orrs	r3, r7
 8000a64:	428d      	cmp	r5, r1
 8000a66:	d196      	bne.n	8000996 <__aeabi_dadd+0x212>
 8000a68:	0019      	movs	r1, r3
 8000a6a:	4311      	orrs	r1, r2
 8000a6c:	d100      	bne.n	8000a70 <__aeabi_dadd+0x2ec>
 8000a6e:	e19e      	b.n	8000dae <__aeabi_dadd+0x62a>
 8000a70:	2180      	movs	r1, #128	; 0x80
 8000a72:	0309      	lsls	r1, r1, #12
 8000a74:	430a      	orrs	r2, r1
 8000a76:	0312      	lsls	r2, r2, #12
 8000a78:	0b12      	lsrs	r2, r2, #12
 8000a7a:	4d41      	ldr	r5, [pc, #260]	; (8000b80 <__aeabi_dadd+0x3fc>)
 8000a7c:	e78f      	b.n	800099e <__aeabi_dadd+0x21a>
 8000a7e:	0015      	movs	r5, r2
 8000a80:	2200      	movs	r2, #0
 8000a82:	2300      	movs	r3, #0
 8000a84:	e78b      	b.n	800099e <__aeabi_dadd+0x21a>
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d000      	beq.n	8000a8c <__aeabi_dadd+0x308>
 8000a8a:	e0c7      	b.n	8000c1c <__aeabi_dadd+0x498>
 8000a8c:	1c6b      	adds	r3, r5, #1
 8000a8e:	055f      	lsls	r7, r3, #21
 8000a90:	0d7f      	lsrs	r7, r7, #21
 8000a92:	2f01      	cmp	r7, #1
 8000a94:	dc00      	bgt.n	8000a98 <__aeabi_dadd+0x314>
 8000a96:	e0f1      	b.n	8000c7c <__aeabi_dadd+0x4f8>
 8000a98:	4d39      	ldr	r5, [pc, #228]	; (8000b80 <__aeabi_dadd+0x3fc>)
 8000a9a:	42ab      	cmp	r3, r5
 8000a9c:	d100      	bne.n	8000aa0 <__aeabi_dadd+0x31c>
 8000a9e:	e0b9      	b.n	8000c14 <__aeabi_dadd+0x490>
 8000aa0:	1885      	adds	r5, r0, r2
 8000aa2:	000a      	movs	r2, r1
 8000aa4:	4285      	cmp	r5, r0
 8000aa6:	4189      	sbcs	r1, r1
 8000aa8:	4442      	add	r2, r8
 8000aaa:	4249      	negs	r1, r1
 8000aac:	1851      	adds	r1, r2, r1
 8000aae:	2207      	movs	r2, #7
 8000ab0:	07cf      	lsls	r7, r1, #31
 8000ab2:	086d      	lsrs	r5, r5, #1
 8000ab4:	432f      	orrs	r7, r5
 8000ab6:	0849      	lsrs	r1, r1, #1
 8000ab8:	403a      	ands	r2, r7
 8000aba:	001d      	movs	r5, r3
 8000abc:	e6c2      	b.n	8000844 <__aeabi_dadd+0xc0>
 8000abe:	2207      	movs	r2, #7
 8000ac0:	4930      	ldr	r1, [pc, #192]	; (8000b84 <__aeabi_dadd+0x400>)
 8000ac2:	1aed      	subs	r5, r5, r3
 8000ac4:	4031      	ands	r1, r6
 8000ac6:	403a      	ands	r2, r7
 8000ac8:	e6bc      	b.n	8000844 <__aeabi_dadd+0xc0>
 8000aca:	003e      	movs	r6, r7
 8000acc:	3828      	subs	r0, #40	; 0x28
 8000ace:	4086      	lsls	r6, r0
 8000ad0:	2700      	movs	r7, #0
 8000ad2:	e69f      	b.n	8000814 <__aeabi_dadd+0x90>
 8000ad4:	0038      	movs	r0, r7
 8000ad6:	f001 fcc9 	bl	800246c <__clzsi2>
 8000ada:	3020      	adds	r0, #32
 8000adc:	e68e      	b.n	80007fc <__aeabi_dadd+0x78>
 8000ade:	4643      	mov	r3, r8
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	001f      	movs	r7, r3
 8000ae4:	1e7a      	subs	r2, r7, #1
 8000ae6:	4197      	sbcs	r7, r2
 8000ae8:	1bc7      	subs	r7, r0, r7
 8000aea:	42b8      	cmp	r0, r7
 8000aec:	4180      	sbcs	r0, r0
 8000aee:	4240      	negs	r0, r0
 8000af0:	1a09      	subs	r1, r1, r0
 8000af2:	e678      	b.n	80007e6 <__aeabi_dadd+0x62>
 8000af4:	000e      	movs	r6, r1
 8000af6:	003b      	movs	r3, r7
 8000af8:	4306      	orrs	r6, r0
 8000afa:	4313      	orrs	r3, r2
 8000afc:	2d00      	cmp	r5, #0
 8000afe:	d161      	bne.n	8000bc4 <__aeabi_dadd+0x440>
 8000b00:	2e00      	cmp	r6, #0
 8000b02:	d000      	beq.n	8000b06 <__aeabi_dadd+0x382>
 8000b04:	e0f4      	b.n	8000cf0 <__aeabi_dadd+0x56c>
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d100      	bne.n	8000b0c <__aeabi_dadd+0x388>
 8000b0a:	e11b      	b.n	8000d44 <__aeabi_dadd+0x5c0>
 8000b0c:	4664      	mov	r4, ip
 8000b0e:	0039      	movs	r1, r7
 8000b10:	0010      	movs	r0, r2
 8000b12:	e739      	b.n	8000988 <__aeabi_dadd+0x204>
 8000b14:	4f1a      	ldr	r7, [pc, #104]	; (8000b80 <__aeabi_dadd+0x3fc>)
 8000b16:	42bb      	cmp	r3, r7
 8000b18:	d07a      	beq.n	8000c10 <__aeabi_dadd+0x48c>
 8000b1a:	0033      	movs	r3, r6
 8000b1c:	e6ff      	b.n	800091e <__aeabi_dadd+0x19a>
 8000b1e:	0030      	movs	r0, r6
 8000b20:	3d1f      	subs	r5, #31
 8000b22:	40e8      	lsrs	r0, r5
 8000b24:	2b20      	cmp	r3, #32
 8000b26:	d003      	beq.n	8000b30 <__aeabi_dadd+0x3ac>
 8000b28:	2140      	movs	r1, #64	; 0x40
 8000b2a:	1acb      	subs	r3, r1, r3
 8000b2c:	409e      	lsls	r6, r3
 8000b2e:	4337      	orrs	r7, r6
 8000b30:	1e7b      	subs	r3, r7, #1
 8000b32:	419f      	sbcs	r7, r3
 8000b34:	2207      	movs	r2, #7
 8000b36:	4307      	orrs	r7, r0
 8000b38:	403a      	ands	r2, r7
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2500      	movs	r5, #0
 8000b3e:	e789      	b.n	8000a54 <__aeabi_dadd+0x2d0>
 8000b40:	1a17      	subs	r7, r2, r0
 8000b42:	4643      	mov	r3, r8
 8000b44:	42ba      	cmp	r2, r7
 8000b46:	41b6      	sbcs	r6, r6
 8000b48:	1a59      	subs	r1, r3, r1
 8000b4a:	4276      	negs	r6, r6
 8000b4c:	1b8e      	subs	r6, r1, r6
 8000b4e:	4664      	mov	r4, ip
 8000b50:	e64e      	b.n	80007f0 <__aeabi_dadd+0x6c>
 8000b52:	2b1f      	cmp	r3, #31
 8000b54:	dd00      	ble.n	8000b58 <__aeabi_dadd+0x3d4>
 8000b56:	e0ad      	b.n	8000cb4 <__aeabi_dadd+0x530>
 8000b58:	2620      	movs	r6, #32
 8000b5a:	4647      	mov	r7, r8
 8000b5c:	1af6      	subs	r6, r6, r3
 8000b5e:	40b7      	lsls	r7, r6
 8000b60:	46b9      	mov	r9, r7
 8000b62:	0017      	movs	r7, r2
 8000b64:	46b2      	mov	sl, r6
 8000b66:	40df      	lsrs	r7, r3
 8000b68:	464e      	mov	r6, r9
 8000b6a:	433e      	orrs	r6, r7
 8000b6c:	0037      	movs	r7, r6
 8000b6e:	4656      	mov	r6, sl
 8000b70:	40b2      	lsls	r2, r6
 8000b72:	1e56      	subs	r6, r2, #1
 8000b74:	41b2      	sbcs	r2, r6
 8000b76:	4317      	orrs	r7, r2
 8000b78:	4642      	mov	r2, r8
 8000b7a:	40da      	lsrs	r2, r3
 8000b7c:	1889      	adds	r1, r1, r2
 8000b7e:	e6ae      	b.n	80008de <__aeabi_dadd+0x15a>
 8000b80:	000007ff 	.word	0x000007ff
 8000b84:	ff7fffff 	.word	0xff7fffff
 8000b88:	800fffff 	.word	0x800fffff
 8000b8c:	2620      	movs	r6, #32
 8000b8e:	4647      	mov	r7, r8
 8000b90:	1af6      	subs	r6, r6, r3
 8000b92:	40b7      	lsls	r7, r6
 8000b94:	46b9      	mov	r9, r7
 8000b96:	0017      	movs	r7, r2
 8000b98:	46b2      	mov	sl, r6
 8000b9a:	40df      	lsrs	r7, r3
 8000b9c:	464e      	mov	r6, r9
 8000b9e:	433e      	orrs	r6, r7
 8000ba0:	0037      	movs	r7, r6
 8000ba2:	4656      	mov	r6, sl
 8000ba4:	40b2      	lsls	r2, r6
 8000ba6:	1e56      	subs	r6, r2, #1
 8000ba8:	41b2      	sbcs	r2, r6
 8000baa:	4317      	orrs	r7, r2
 8000bac:	4642      	mov	r2, r8
 8000bae:	40da      	lsrs	r2, r3
 8000bb0:	1a89      	subs	r1, r1, r2
 8000bb2:	e799      	b.n	8000ae8 <__aeabi_dadd+0x364>
 8000bb4:	4c7f      	ldr	r4, [pc, #508]	; (8000db4 <__aeabi_dadd+0x630>)
 8000bb6:	42a6      	cmp	r6, r4
 8000bb8:	d05b      	beq.n	8000c72 <__aeabi_dadd+0x4ee>
 8000bba:	2480      	movs	r4, #128	; 0x80
 8000bbc:	0424      	lsls	r4, r4, #16
 8000bbe:	425b      	negs	r3, r3
 8000bc0:	4321      	orrs	r1, r4
 8000bc2:	e727      	b.n	8000a14 <__aeabi_dadd+0x290>
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d10c      	bne.n	8000be2 <__aeabi_dadd+0x45e>
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d100      	bne.n	8000bce <__aeabi_dadd+0x44a>
 8000bcc:	e0cb      	b.n	8000d66 <__aeabi_dadd+0x5e2>
 8000bce:	4664      	mov	r4, ip
 8000bd0:	0039      	movs	r1, r7
 8000bd2:	0010      	movs	r0, r2
 8000bd4:	4d77      	ldr	r5, [pc, #476]	; (8000db4 <__aeabi_dadd+0x630>)
 8000bd6:	e6d7      	b.n	8000988 <__aeabi_dadd+0x204>
 8000bd8:	4f76      	ldr	r7, [pc, #472]	; (8000db4 <__aeabi_dadd+0x630>)
 8000bda:	42bb      	cmp	r3, r7
 8000bdc:	d018      	beq.n	8000c10 <__aeabi_dadd+0x48c>
 8000bde:	0033      	movs	r3, r6
 8000be0:	e675      	b.n	80008ce <__aeabi_dadd+0x14a>
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d014      	beq.n	8000c10 <__aeabi_dadd+0x48c>
 8000be6:	074b      	lsls	r3, r1, #29
 8000be8:	08c0      	lsrs	r0, r0, #3
 8000bea:	4318      	orrs	r0, r3
 8000bec:	2380      	movs	r3, #128	; 0x80
 8000bee:	08c9      	lsrs	r1, r1, #3
 8000bf0:	031b      	lsls	r3, r3, #12
 8000bf2:	4219      	tst	r1, r3
 8000bf4:	d007      	beq.n	8000c06 <__aeabi_dadd+0x482>
 8000bf6:	08fc      	lsrs	r4, r7, #3
 8000bf8:	421c      	tst	r4, r3
 8000bfa:	d104      	bne.n	8000c06 <__aeabi_dadd+0x482>
 8000bfc:	0779      	lsls	r1, r7, #29
 8000bfe:	08d0      	lsrs	r0, r2, #3
 8000c00:	4308      	orrs	r0, r1
 8000c02:	46e1      	mov	r9, ip
 8000c04:	0021      	movs	r1, r4
 8000c06:	464c      	mov	r4, r9
 8000c08:	0f42      	lsrs	r2, r0, #29
 8000c0a:	00c9      	lsls	r1, r1, #3
 8000c0c:	4311      	orrs	r1, r2
 8000c0e:	00c0      	lsls	r0, r0, #3
 8000c10:	4d68      	ldr	r5, [pc, #416]	; (8000db4 <__aeabi_dadd+0x630>)
 8000c12:	e6b9      	b.n	8000988 <__aeabi_dadd+0x204>
 8000c14:	001d      	movs	r5, r3
 8000c16:	2200      	movs	r2, #0
 8000c18:	2300      	movs	r3, #0
 8000c1a:	e6c0      	b.n	800099e <__aeabi_dadd+0x21a>
 8000c1c:	2d00      	cmp	r5, #0
 8000c1e:	d15b      	bne.n	8000cd8 <__aeabi_dadd+0x554>
 8000c20:	000d      	movs	r5, r1
 8000c22:	4305      	orrs	r5, r0
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x4a4>
 8000c26:	e6e2      	b.n	80009ee <__aeabi_dadd+0x26a>
 8000c28:	1c5d      	adds	r5, r3, #1
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_dadd+0x4aa>
 8000c2c:	e0b0      	b.n	8000d90 <__aeabi_dadd+0x60c>
 8000c2e:	4d61      	ldr	r5, [pc, #388]	; (8000db4 <__aeabi_dadd+0x630>)
 8000c30:	42ae      	cmp	r6, r5
 8000c32:	d01f      	beq.n	8000c74 <__aeabi_dadd+0x4f0>
 8000c34:	43db      	mvns	r3, r3
 8000c36:	2b38      	cmp	r3, #56	; 0x38
 8000c38:	dc71      	bgt.n	8000d1e <__aeabi_dadd+0x59a>
 8000c3a:	2b1f      	cmp	r3, #31
 8000c3c:	dd00      	ble.n	8000c40 <__aeabi_dadd+0x4bc>
 8000c3e:	e096      	b.n	8000d6e <__aeabi_dadd+0x5ea>
 8000c40:	2520      	movs	r5, #32
 8000c42:	000f      	movs	r7, r1
 8000c44:	1aed      	subs	r5, r5, r3
 8000c46:	40af      	lsls	r7, r5
 8000c48:	46b9      	mov	r9, r7
 8000c4a:	0007      	movs	r7, r0
 8000c4c:	46aa      	mov	sl, r5
 8000c4e:	40df      	lsrs	r7, r3
 8000c50:	464d      	mov	r5, r9
 8000c52:	433d      	orrs	r5, r7
 8000c54:	002f      	movs	r7, r5
 8000c56:	4655      	mov	r5, sl
 8000c58:	40a8      	lsls	r0, r5
 8000c5a:	40d9      	lsrs	r1, r3
 8000c5c:	1e45      	subs	r5, r0, #1
 8000c5e:	41a8      	sbcs	r0, r5
 8000c60:	4488      	add	r8, r1
 8000c62:	4307      	orrs	r7, r0
 8000c64:	18bf      	adds	r7, r7, r2
 8000c66:	4297      	cmp	r7, r2
 8000c68:	4192      	sbcs	r2, r2
 8000c6a:	4251      	negs	r1, r2
 8000c6c:	4441      	add	r1, r8
 8000c6e:	0035      	movs	r5, r6
 8000c70:	e63a      	b.n	80008e8 <__aeabi_dadd+0x164>
 8000c72:	4664      	mov	r4, ip
 8000c74:	0035      	movs	r5, r6
 8000c76:	4641      	mov	r1, r8
 8000c78:	0010      	movs	r0, r2
 8000c7a:	e685      	b.n	8000988 <__aeabi_dadd+0x204>
 8000c7c:	000b      	movs	r3, r1
 8000c7e:	4303      	orrs	r3, r0
 8000c80:	2d00      	cmp	r5, #0
 8000c82:	d000      	beq.n	8000c86 <__aeabi_dadd+0x502>
 8000c84:	e663      	b.n	800094e <__aeabi_dadd+0x1ca>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d0f5      	beq.n	8000c76 <__aeabi_dadd+0x4f2>
 8000c8a:	4643      	mov	r3, r8
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	d100      	bne.n	8000c92 <__aeabi_dadd+0x50e>
 8000c90:	e67a      	b.n	8000988 <__aeabi_dadd+0x204>
 8000c92:	1887      	adds	r7, r0, r2
 8000c94:	4287      	cmp	r7, r0
 8000c96:	4180      	sbcs	r0, r0
 8000c98:	2207      	movs	r2, #7
 8000c9a:	4441      	add	r1, r8
 8000c9c:	4240      	negs	r0, r0
 8000c9e:	1809      	adds	r1, r1, r0
 8000ca0:	403a      	ands	r2, r7
 8000ca2:	020b      	lsls	r3, r1, #8
 8000ca4:	d400      	bmi.n	8000ca8 <__aeabi_dadd+0x524>
 8000ca6:	e6d5      	b.n	8000a54 <__aeabi_dadd+0x2d0>
 8000ca8:	4b43      	ldr	r3, [pc, #268]	; (8000db8 <__aeabi_dadd+0x634>)
 8000caa:	3501      	adds	r5, #1
 8000cac:	4019      	ands	r1, r3
 8000cae:	e5c9      	b.n	8000844 <__aeabi_dadd+0xc0>
 8000cb0:	0038      	movs	r0, r7
 8000cb2:	e669      	b.n	8000988 <__aeabi_dadd+0x204>
 8000cb4:	001e      	movs	r6, r3
 8000cb6:	4647      	mov	r7, r8
 8000cb8:	3e20      	subs	r6, #32
 8000cba:	40f7      	lsrs	r7, r6
 8000cbc:	46bc      	mov	ip, r7
 8000cbe:	2b20      	cmp	r3, #32
 8000cc0:	d004      	beq.n	8000ccc <__aeabi_dadd+0x548>
 8000cc2:	2640      	movs	r6, #64	; 0x40
 8000cc4:	1af3      	subs	r3, r6, r3
 8000cc6:	4646      	mov	r6, r8
 8000cc8:	409e      	lsls	r6, r3
 8000cca:	4332      	orrs	r2, r6
 8000ccc:	0017      	movs	r7, r2
 8000cce:	4663      	mov	r3, ip
 8000cd0:	1e7a      	subs	r2, r7, #1
 8000cd2:	4197      	sbcs	r7, r2
 8000cd4:	431f      	orrs	r7, r3
 8000cd6:	e602      	b.n	80008de <__aeabi_dadd+0x15a>
 8000cd8:	4d36      	ldr	r5, [pc, #216]	; (8000db4 <__aeabi_dadd+0x630>)
 8000cda:	42ae      	cmp	r6, r5
 8000cdc:	d0ca      	beq.n	8000c74 <__aeabi_dadd+0x4f0>
 8000cde:	2580      	movs	r5, #128	; 0x80
 8000ce0:	042d      	lsls	r5, r5, #16
 8000ce2:	425b      	negs	r3, r3
 8000ce4:	4329      	orrs	r1, r5
 8000ce6:	e7a6      	b.n	8000c36 <__aeabi_dadd+0x4b2>
 8000ce8:	4308      	orrs	r0, r1
 8000cea:	1e41      	subs	r1, r0, #1
 8000cec:	4188      	sbcs	r0, r1
 8000cee:	e6a6      	b.n	8000a3e <__aeabi_dadd+0x2ba>
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_dadd+0x572>
 8000cf4:	e648      	b.n	8000988 <__aeabi_dadd+0x204>
 8000cf6:	1a87      	subs	r7, r0, r2
 8000cf8:	4643      	mov	r3, r8
 8000cfa:	42b8      	cmp	r0, r7
 8000cfc:	41b6      	sbcs	r6, r6
 8000cfe:	1acb      	subs	r3, r1, r3
 8000d00:	4276      	negs	r6, r6
 8000d02:	1b9e      	subs	r6, r3, r6
 8000d04:	0233      	lsls	r3, r6, #8
 8000d06:	d54b      	bpl.n	8000da0 <__aeabi_dadd+0x61c>
 8000d08:	1a17      	subs	r7, r2, r0
 8000d0a:	4643      	mov	r3, r8
 8000d0c:	42ba      	cmp	r2, r7
 8000d0e:	4192      	sbcs	r2, r2
 8000d10:	1a59      	subs	r1, r3, r1
 8000d12:	4252      	negs	r2, r2
 8000d14:	1a89      	subs	r1, r1, r2
 8000d16:	2207      	movs	r2, #7
 8000d18:	4664      	mov	r4, ip
 8000d1a:	403a      	ands	r2, r7
 8000d1c:	e592      	b.n	8000844 <__aeabi_dadd+0xc0>
 8000d1e:	4301      	orrs	r1, r0
 8000d20:	000f      	movs	r7, r1
 8000d22:	1e79      	subs	r1, r7, #1
 8000d24:	418f      	sbcs	r7, r1
 8000d26:	e79d      	b.n	8000c64 <__aeabi_dadd+0x4e0>
 8000d28:	001c      	movs	r4, r3
 8000d2a:	000f      	movs	r7, r1
 8000d2c:	3c20      	subs	r4, #32
 8000d2e:	40e7      	lsrs	r7, r4
 8000d30:	2b20      	cmp	r3, #32
 8000d32:	d003      	beq.n	8000d3c <__aeabi_dadd+0x5b8>
 8000d34:	2440      	movs	r4, #64	; 0x40
 8000d36:	1ae3      	subs	r3, r4, r3
 8000d38:	4099      	lsls	r1, r3
 8000d3a:	4308      	orrs	r0, r1
 8000d3c:	1e41      	subs	r1, r0, #1
 8000d3e:	4188      	sbcs	r0, r1
 8000d40:	4338      	orrs	r0, r7
 8000d42:	e67c      	b.n	8000a3e <__aeabi_dadd+0x2ba>
 8000d44:	2200      	movs	r2, #0
 8000d46:	2400      	movs	r4, #0
 8000d48:	e625      	b.n	8000996 <__aeabi_dadd+0x212>
 8000d4a:	1a17      	subs	r7, r2, r0
 8000d4c:	4643      	mov	r3, r8
 8000d4e:	42ba      	cmp	r2, r7
 8000d50:	4192      	sbcs	r2, r2
 8000d52:	1a59      	subs	r1, r3, r1
 8000d54:	4252      	negs	r2, r2
 8000d56:	1a89      	subs	r1, r1, r2
 8000d58:	4664      	mov	r4, ip
 8000d5a:	0035      	movs	r5, r6
 8000d5c:	e543      	b.n	80007e6 <__aeabi_dadd+0x62>
 8000d5e:	4641      	mov	r1, r8
 8000d60:	0010      	movs	r0, r2
 8000d62:	4d14      	ldr	r5, [pc, #80]	; (8000db4 <__aeabi_dadd+0x630>)
 8000d64:	e610      	b.n	8000988 <__aeabi_dadd+0x204>
 8000d66:	2280      	movs	r2, #128	; 0x80
 8000d68:	2400      	movs	r4, #0
 8000d6a:	0312      	lsls	r2, r2, #12
 8000d6c:	e680      	b.n	8000a70 <__aeabi_dadd+0x2ec>
 8000d6e:	001d      	movs	r5, r3
 8000d70:	000f      	movs	r7, r1
 8000d72:	3d20      	subs	r5, #32
 8000d74:	40ef      	lsrs	r7, r5
 8000d76:	46bc      	mov	ip, r7
 8000d78:	2b20      	cmp	r3, #32
 8000d7a:	d003      	beq.n	8000d84 <__aeabi_dadd+0x600>
 8000d7c:	2540      	movs	r5, #64	; 0x40
 8000d7e:	1aeb      	subs	r3, r5, r3
 8000d80:	4099      	lsls	r1, r3
 8000d82:	4308      	orrs	r0, r1
 8000d84:	0007      	movs	r7, r0
 8000d86:	4663      	mov	r3, ip
 8000d88:	1e78      	subs	r0, r7, #1
 8000d8a:	4187      	sbcs	r7, r0
 8000d8c:	431f      	orrs	r7, r3
 8000d8e:	e769      	b.n	8000c64 <__aeabi_dadd+0x4e0>
 8000d90:	1887      	adds	r7, r0, r2
 8000d92:	4297      	cmp	r7, r2
 8000d94:	419b      	sbcs	r3, r3
 8000d96:	4441      	add	r1, r8
 8000d98:	425b      	negs	r3, r3
 8000d9a:	18c9      	adds	r1, r1, r3
 8000d9c:	0035      	movs	r5, r6
 8000d9e:	e5a3      	b.n	80008e8 <__aeabi_dadd+0x164>
 8000da0:	003b      	movs	r3, r7
 8000da2:	4333      	orrs	r3, r6
 8000da4:	d0ce      	beq.n	8000d44 <__aeabi_dadd+0x5c0>
 8000da6:	2207      	movs	r2, #7
 8000da8:	0031      	movs	r1, r6
 8000daa:	403a      	ands	r2, r7
 8000dac:	e652      	b.n	8000a54 <__aeabi_dadd+0x2d0>
 8000dae:	2300      	movs	r3, #0
 8000db0:	001a      	movs	r2, r3
 8000db2:	e5f4      	b.n	800099e <__aeabi_dadd+0x21a>
 8000db4:	000007ff 	.word	0x000007ff
 8000db8:	ff7fffff 	.word	0xff7fffff

08000dbc <__aeabi_ddiv>:
 8000dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dbe:	4657      	mov	r7, sl
 8000dc0:	46de      	mov	lr, fp
 8000dc2:	464e      	mov	r6, r9
 8000dc4:	4645      	mov	r5, r8
 8000dc6:	b5e0      	push	{r5, r6, r7, lr}
 8000dc8:	4683      	mov	fp, r0
 8000dca:	0007      	movs	r7, r0
 8000dcc:	030e      	lsls	r6, r1, #12
 8000dce:	0048      	lsls	r0, r1, #1
 8000dd0:	b085      	sub	sp, #20
 8000dd2:	4692      	mov	sl, r2
 8000dd4:	001c      	movs	r4, r3
 8000dd6:	0b36      	lsrs	r6, r6, #12
 8000dd8:	0d40      	lsrs	r0, r0, #21
 8000dda:	0fcd      	lsrs	r5, r1, #31
 8000ddc:	2800      	cmp	r0, #0
 8000dde:	d100      	bne.n	8000de2 <__aeabi_ddiv+0x26>
 8000de0:	e09d      	b.n	8000f1e <__aeabi_ddiv+0x162>
 8000de2:	4b95      	ldr	r3, [pc, #596]	; (8001038 <__aeabi_ddiv+0x27c>)
 8000de4:	4298      	cmp	r0, r3
 8000de6:	d039      	beq.n	8000e5c <__aeabi_ddiv+0xa0>
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	00f6      	lsls	r6, r6, #3
 8000dec:	041b      	lsls	r3, r3, #16
 8000dee:	431e      	orrs	r6, r3
 8000df0:	4a92      	ldr	r2, [pc, #584]	; (800103c <__aeabi_ddiv+0x280>)
 8000df2:	0f7b      	lsrs	r3, r7, #29
 8000df4:	4333      	orrs	r3, r6
 8000df6:	4699      	mov	r9, r3
 8000df8:	4694      	mov	ip, r2
 8000dfa:	0003      	movs	r3, r0
 8000dfc:	4463      	add	r3, ip
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2300      	movs	r3, #0
 8000e02:	2600      	movs	r6, #0
 8000e04:	00ff      	lsls	r7, r7, #3
 8000e06:	9302      	str	r3, [sp, #8]
 8000e08:	0323      	lsls	r3, r4, #12
 8000e0a:	0b1b      	lsrs	r3, r3, #12
 8000e0c:	4698      	mov	r8, r3
 8000e0e:	0063      	lsls	r3, r4, #1
 8000e10:	0fe4      	lsrs	r4, r4, #31
 8000e12:	4652      	mov	r2, sl
 8000e14:	0d5b      	lsrs	r3, r3, #21
 8000e16:	9401      	str	r4, [sp, #4]
 8000e18:	d100      	bne.n	8000e1c <__aeabi_ddiv+0x60>
 8000e1a:	e0b3      	b.n	8000f84 <__aeabi_ddiv+0x1c8>
 8000e1c:	4986      	ldr	r1, [pc, #536]	; (8001038 <__aeabi_ddiv+0x27c>)
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d100      	bne.n	8000e24 <__aeabi_ddiv+0x68>
 8000e22:	e09e      	b.n	8000f62 <__aeabi_ddiv+0x1a6>
 8000e24:	4642      	mov	r2, r8
 8000e26:	00d1      	lsls	r1, r2, #3
 8000e28:	2280      	movs	r2, #128	; 0x80
 8000e2a:	0412      	lsls	r2, r2, #16
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	4651      	mov	r1, sl
 8000e30:	0f49      	lsrs	r1, r1, #29
 8000e32:	4311      	orrs	r1, r2
 8000e34:	468b      	mov	fp, r1
 8000e36:	4981      	ldr	r1, [pc, #516]	; (800103c <__aeabi_ddiv+0x280>)
 8000e38:	4652      	mov	r2, sl
 8000e3a:	468c      	mov	ip, r1
 8000e3c:	9900      	ldr	r1, [sp, #0]
 8000e3e:	4463      	add	r3, ip
 8000e40:	1acb      	subs	r3, r1, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	00d2      	lsls	r2, r2, #3
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	002b      	movs	r3, r5
 8000e4a:	4063      	eors	r3, r4
 8000e4c:	469a      	mov	sl, r3
 8000e4e:	2e0f      	cmp	r6, #15
 8000e50:	d900      	bls.n	8000e54 <__aeabi_ddiv+0x98>
 8000e52:	e105      	b.n	8001060 <__aeabi_ddiv+0x2a4>
 8000e54:	4b7a      	ldr	r3, [pc, #488]	; (8001040 <__aeabi_ddiv+0x284>)
 8000e56:	00b6      	lsls	r6, r6, #2
 8000e58:	599b      	ldr	r3, [r3, r6]
 8000e5a:	469f      	mov	pc, r3
 8000e5c:	465b      	mov	r3, fp
 8000e5e:	4333      	orrs	r3, r6
 8000e60:	4699      	mov	r9, r3
 8000e62:	d000      	beq.n	8000e66 <__aeabi_ddiv+0xaa>
 8000e64:	e0b8      	b.n	8000fd8 <__aeabi_ddiv+0x21c>
 8000e66:	2302      	movs	r3, #2
 8000e68:	2608      	movs	r6, #8
 8000e6a:	2700      	movs	r7, #0
 8000e6c:	9000      	str	r0, [sp, #0]
 8000e6e:	9302      	str	r3, [sp, #8]
 8000e70:	e7ca      	b.n	8000e08 <__aeabi_ddiv+0x4c>
 8000e72:	46cb      	mov	fp, r9
 8000e74:	003a      	movs	r2, r7
 8000e76:	9902      	ldr	r1, [sp, #8]
 8000e78:	9501      	str	r5, [sp, #4]
 8000e7a:	9b01      	ldr	r3, [sp, #4]
 8000e7c:	469a      	mov	sl, r3
 8000e7e:	2902      	cmp	r1, #2
 8000e80:	d027      	beq.n	8000ed2 <__aeabi_ddiv+0x116>
 8000e82:	2903      	cmp	r1, #3
 8000e84:	d100      	bne.n	8000e88 <__aeabi_ddiv+0xcc>
 8000e86:	e280      	b.n	800138a <__aeabi_ddiv+0x5ce>
 8000e88:	2901      	cmp	r1, #1
 8000e8a:	d044      	beq.n	8000f16 <__aeabi_ddiv+0x15a>
 8000e8c:	496d      	ldr	r1, [pc, #436]	; (8001044 <__aeabi_ddiv+0x288>)
 8000e8e:	9b00      	ldr	r3, [sp, #0]
 8000e90:	468c      	mov	ip, r1
 8000e92:	4463      	add	r3, ip
 8000e94:	001c      	movs	r4, r3
 8000e96:	2c00      	cmp	r4, #0
 8000e98:	dd38      	ble.n	8000f0c <__aeabi_ddiv+0x150>
 8000e9a:	0753      	lsls	r3, r2, #29
 8000e9c:	d000      	beq.n	8000ea0 <__aeabi_ddiv+0xe4>
 8000e9e:	e213      	b.n	80012c8 <__aeabi_ddiv+0x50c>
 8000ea0:	08d2      	lsrs	r2, r2, #3
 8000ea2:	465b      	mov	r3, fp
 8000ea4:	01db      	lsls	r3, r3, #7
 8000ea6:	d509      	bpl.n	8000ebc <__aeabi_ddiv+0x100>
 8000ea8:	4659      	mov	r1, fp
 8000eaa:	4b67      	ldr	r3, [pc, #412]	; (8001048 <__aeabi_ddiv+0x28c>)
 8000eac:	4019      	ands	r1, r3
 8000eae:	468b      	mov	fp, r1
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	00c9      	lsls	r1, r1, #3
 8000eb4:	468c      	mov	ip, r1
 8000eb6:	9b00      	ldr	r3, [sp, #0]
 8000eb8:	4463      	add	r3, ip
 8000eba:	001c      	movs	r4, r3
 8000ebc:	4b63      	ldr	r3, [pc, #396]	; (800104c <__aeabi_ddiv+0x290>)
 8000ebe:	429c      	cmp	r4, r3
 8000ec0:	dc07      	bgt.n	8000ed2 <__aeabi_ddiv+0x116>
 8000ec2:	465b      	mov	r3, fp
 8000ec4:	0564      	lsls	r4, r4, #21
 8000ec6:	075f      	lsls	r7, r3, #29
 8000ec8:	025b      	lsls	r3, r3, #9
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	0b1b      	lsrs	r3, r3, #12
 8000ece:	0d62      	lsrs	r2, r4, #21
 8000ed0:	e002      	b.n	8000ed8 <__aeabi_ddiv+0x11c>
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	4a58      	ldr	r2, [pc, #352]	; (8001038 <__aeabi_ddiv+0x27c>)
 8000ed8:	2100      	movs	r1, #0
 8000eda:	031b      	lsls	r3, r3, #12
 8000edc:	0b1c      	lsrs	r4, r3, #12
 8000ede:	0d0b      	lsrs	r3, r1, #20
 8000ee0:	051b      	lsls	r3, r3, #20
 8000ee2:	4323      	orrs	r3, r4
 8000ee4:	0514      	lsls	r4, r2, #20
 8000ee6:	4a5a      	ldr	r2, [pc, #360]	; (8001050 <__aeabi_ddiv+0x294>)
 8000ee8:	0038      	movs	r0, r7
 8000eea:	4013      	ands	r3, r2
 8000eec:	431c      	orrs	r4, r3
 8000eee:	4653      	mov	r3, sl
 8000ef0:	0064      	lsls	r4, r4, #1
 8000ef2:	07db      	lsls	r3, r3, #31
 8000ef4:	0864      	lsrs	r4, r4, #1
 8000ef6:	431c      	orrs	r4, r3
 8000ef8:	0021      	movs	r1, r4
 8000efa:	b005      	add	sp, #20
 8000efc:	bc3c      	pop	{r2, r3, r4, r5}
 8000efe:	4690      	mov	r8, r2
 8000f00:	4699      	mov	r9, r3
 8000f02:	46a2      	mov	sl, r4
 8000f04:	46ab      	mov	fp, r5
 8000f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4252      	negs	r2, r2
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	1b1b      	subs	r3, r3, r4
 8000f10:	2b38      	cmp	r3, #56	; 0x38
 8000f12:	dc00      	bgt.n	8000f16 <__aeabi_ddiv+0x15a>
 8000f14:	e1ad      	b.n	8001272 <__aeabi_ddiv+0x4b6>
 8000f16:	2200      	movs	r2, #0
 8000f18:	2300      	movs	r3, #0
 8000f1a:	2700      	movs	r7, #0
 8000f1c:	e7dc      	b.n	8000ed8 <__aeabi_ddiv+0x11c>
 8000f1e:	465b      	mov	r3, fp
 8000f20:	4333      	orrs	r3, r6
 8000f22:	4699      	mov	r9, r3
 8000f24:	d05e      	beq.n	8000fe4 <__aeabi_ddiv+0x228>
 8000f26:	2e00      	cmp	r6, #0
 8000f28:	d100      	bne.n	8000f2c <__aeabi_ddiv+0x170>
 8000f2a:	e18a      	b.n	8001242 <__aeabi_ddiv+0x486>
 8000f2c:	0030      	movs	r0, r6
 8000f2e:	f001 fa9d 	bl	800246c <__clzsi2>
 8000f32:	0003      	movs	r3, r0
 8000f34:	3b0b      	subs	r3, #11
 8000f36:	2b1c      	cmp	r3, #28
 8000f38:	dd00      	ble.n	8000f3c <__aeabi_ddiv+0x180>
 8000f3a:	e17b      	b.n	8001234 <__aeabi_ddiv+0x478>
 8000f3c:	221d      	movs	r2, #29
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	465a      	mov	r2, fp
 8000f42:	0001      	movs	r1, r0
 8000f44:	40da      	lsrs	r2, r3
 8000f46:	3908      	subs	r1, #8
 8000f48:	408e      	lsls	r6, r1
 8000f4a:	0013      	movs	r3, r2
 8000f4c:	465f      	mov	r7, fp
 8000f4e:	4333      	orrs	r3, r6
 8000f50:	4699      	mov	r9, r3
 8000f52:	408f      	lsls	r7, r1
 8000f54:	4b3f      	ldr	r3, [pc, #252]	; (8001054 <__aeabi_ddiv+0x298>)
 8000f56:	2600      	movs	r6, #0
 8000f58:	1a1b      	subs	r3, r3, r0
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	9302      	str	r3, [sp, #8]
 8000f60:	e752      	b.n	8000e08 <__aeabi_ddiv+0x4c>
 8000f62:	4641      	mov	r1, r8
 8000f64:	4653      	mov	r3, sl
 8000f66:	430b      	orrs	r3, r1
 8000f68:	493b      	ldr	r1, [pc, #236]	; (8001058 <__aeabi_ddiv+0x29c>)
 8000f6a:	469b      	mov	fp, r3
 8000f6c:	468c      	mov	ip, r1
 8000f6e:	9b00      	ldr	r3, [sp, #0]
 8000f70:	4463      	add	r3, ip
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	465b      	mov	r3, fp
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d13b      	bne.n	8000ff2 <__aeabi_ddiv+0x236>
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	431e      	orrs	r6, r3
 8000f80:	2102      	movs	r1, #2
 8000f82:	e761      	b.n	8000e48 <__aeabi_ddiv+0x8c>
 8000f84:	4643      	mov	r3, r8
 8000f86:	4313      	orrs	r3, r2
 8000f88:	469b      	mov	fp, r3
 8000f8a:	d037      	beq.n	8000ffc <__aeabi_ddiv+0x240>
 8000f8c:	4643      	mov	r3, r8
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d100      	bne.n	8000f94 <__aeabi_ddiv+0x1d8>
 8000f92:	e162      	b.n	800125a <__aeabi_ddiv+0x49e>
 8000f94:	4640      	mov	r0, r8
 8000f96:	f001 fa69 	bl	800246c <__clzsi2>
 8000f9a:	0003      	movs	r3, r0
 8000f9c:	3b0b      	subs	r3, #11
 8000f9e:	2b1c      	cmp	r3, #28
 8000fa0:	dd00      	ble.n	8000fa4 <__aeabi_ddiv+0x1e8>
 8000fa2:	e153      	b.n	800124c <__aeabi_ddiv+0x490>
 8000fa4:	0002      	movs	r2, r0
 8000fa6:	4641      	mov	r1, r8
 8000fa8:	3a08      	subs	r2, #8
 8000faa:	4091      	lsls	r1, r2
 8000fac:	4688      	mov	r8, r1
 8000fae:	211d      	movs	r1, #29
 8000fb0:	1acb      	subs	r3, r1, r3
 8000fb2:	4651      	mov	r1, sl
 8000fb4:	40d9      	lsrs	r1, r3
 8000fb6:	000b      	movs	r3, r1
 8000fb8:	4641      	mov	r1, r8
 8000fba:	430b      	orrs	r3, r1
 8000fbc:	469b      	mov	fp, r3
 8000fbe:	4653      	mov	r3, sl
 8000fc0:	4093      	lsls	r3, r2
 8000fc2:	001a      	movs	r2, r3
 8000fc4:	9b00      	ldr	r3, [sp, #0]
 8000fc6:	4925      	ldr	r1, [pc, #148]	; (800105c <__aeabi_ddiv+0x2a0>)
 8000fc8:	469c      	mov	ip, r3
 8000fca:	4460      	add	r0, ip
 8000fcc:	0003      	movs	r3, r0
 8000fce:	468c      	mov	ip, r1
 8000fd0:	4463      	add	r3, ip
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	e737      	b.n	8000e48 <__aeabi_ddiv+0x8c>
 8000fd8:	2303      	movs	r3, #3
 8000fda:	46b1      	mov	r9, r6
 8000fdc:	9000      	str	r0, [sp, #0]
 8000fde:	260c      	movs	r6, #12
 8000fe0:	9302      	str	r3, [sp, #8]
 8000fe2:	e711      	b.n	8000e08 <__aeabi_ddiv+0x4c>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	2604      	movs	r6, #4
 8000fec:	2700      	movs	r7, #0
 8000fee:	9302      	str	r3, [sp, #8]
 8000ff0:	e70a      	b.n	8000e08 <__aeabi_ddiv+0x4c>
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	46c3      	mov	fp, r8
 8000ff6:	431e      	orrs	r6, r3
 8000ff8:	2103      	movs	r1, #3
 8000ffa:	e725      	b.n	8000e48 <__aeabi_ddiv+0x8c>
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	431e      	orrs	r6, r3
 8001000:	2200      	movs	r2, #0
 8001002:	2101      	movs	r1, #1
 8001004:	e720      	b.n	8000e48 <__aeabi_ddiv+0x8c>
 8001006:	2300      	movs	r3, #0
 8001008:	469a      	mov	sl, r3
 800100a:	2380      	movs	r3, #128	; 0x80
 800100c:	2700      	movs	r7, #0
 800100e:	031b      	lsls	r3, r3, #12
 8001010:	4a09      	ldr	r2, [pc, #36]	; (8001038 <__aeabi_ddiv+0x27c>)
 8001012:	e761      	b.n	8000ed8 <__aeabi_ddiv+0x11c>
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	4649      	mov	r1, r9
 8001018:	031b      	lsls	r3, r3, #12
 800101a:	4219      	tst	r1, r3
 800101c:	d100      	bne.n	8001020 <__aeabi_ddiv+0x264>
 800101e:	e0e2      	b.n	80011e6 <__aeabi_ddiv+0x42a>
 8001020:	4659      	mov	r1, fp
 8001022:	4219      	tst	r1, r3
 8001024:	d000      	beq.n	8001028 <__aeabi_ddiv+0x26c>
 8001026:	e0de      	b.n	80011e6 <__aeabi_ddiv+0x42a>
 8001028:	430b      	orrs	r3, r1
 800102a:	031b      	lsls	r3, r3, #12
 800102c:	0017      	movs	r7, r2
 800102e:	0b1b      	lsrs	r3, r3, #12
 8001030:	46a2      	mov	sl, r4
 8001032:	4a01      	ldr	r2, [pc, #4]	; (8001038 <__aeabi_ddiv+0x27c>)
 8001034:	e750      	b.n	8000ed8 <__aeabi_ddiv+0x11c>
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	000007ff 	.word	0x000007ff
 800103c:	fffffc01 	.word	0xfffffc01
 8001040:	0800a6ec 	.word	0x0800a6ec
 8001044:	000003ff 	.word	0x000003ff
 8001048:	feffffff 	.word	0xfeffffff
 800104c:	000007fe 	.word	0x000007fe
 8001050:	800fffff 	.word	0x800fffff
 8001054:	fffffc0d 	.word	0xfffffc0d
 8001058:	fffff801 	.word	0xfffff801
 800105c:	000003f3 	.word	0x000003f3
 8001060:	45d9      	cmp	r9, fp
 8001062:	d900      	bls.n	8001066 <__aeabi_ddiv+0x2aa>
 8001064:	e0cb      	b.n	80011fe <__aeabi_ddiv+0x442>
 8001066:	d100      	bne.n	800106a <__aeabi_ddiv+0x2ae>
 8001068:	e0c6      	b.n	80011f8 <__aeabi_ddiv+0x43c>
 800106a:	003c      	movs	r4, r7
 800106c:	4648      	mov	r0, r9
 800106e:	2700      	movs	r7, #0
 8001070:	9b00      	ldr	r3, [sp, #0]
 8001072:	3b01      	subs	r3, #1
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	465b      	mov	r3, fp
 8001078:	0e16      	lsrs	r6, r2, #24
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	431e      	orrs	r6, r3
 800107e:	0213      	lsls	r3, r2, #8
 8001080:	4698      	mov	r8, r3
 8001082:	0433      	lsls	r3, r6, #16
 8001084:	0c1b      	lsrs	r3, r3, #16
 8001086:	4699      	mov	r9, r3
 8001088:	0c31      	lsrs	r1, r6, #16
 800108a:	9101      	str	r1, [sp, #4]
 800108c:	f7ff f8d2 	bl	8000234 <__aeabi_uidivmod>
 8001090:	464a      	mov	r2, r9
 8001092:	4342      	muls	r2, r0
 8001094:	040b      	lsls	r3, r1, #16
 8001096:	0c21      	lsrs	r1, r4, #16
 8001098:	0005      	movs	r5, r0
 800109a:	4319      	orrs	r1, r3
 800109c:	428a      	cmp	r2, r1
 800109e:	d907      	bls.n	80010b0 <__aeabi_ddiv+0x2f4>
 80010a0:	1989      	adds	r1, r1, r6
 80010a2:	3d01      	subs	r5, #1
 80010a4:	428e      	cmp	r6, r1
 80010a6:	d803      	bhi.n	80010b0 <__aeabi_ddiv+0x2f4>
 80010a8:	428a      	cmp	r2, r1
 80010aa:	d901      	bls.n	80010b0 <__aeabi_ddiv+0x2f4>
 80010ac:	1e85      	subs	r5, r0, #2
 80010ae:	1989      	adds	r1, r1, r6
 80010b0:	1a88      	subs	r0, r1, r2
 80010b2:	9901      	ldr	r1, [sp, #4]
 80010b4:	f7ff f8be 	bl	8000234 <__aeabi_uidivmod>
 80010b8:	0409      	lsls	r1, r1, #16
 80010ba:	468c      	mov	ip, r1
 80010bc:	464a      	mov	r2, r9
 80010be:	0421      	lsls	r1, r4, #16
 80010c0:	4664      	mov	r4, ip
 80010c2:	4342      	muls	r2, r0
 80010c4:	0c09      	lsrs	r1, r1, #16
 80010c6:	0003      	movs	r3, r0
 80010c8:	4321      	orrs	r1, r4
 80010ca:	428a      	cmp	r2, r1
 80010cc:	d904      	bls.n	80010d8 <__aeabi_ddiv+0x31c>
 80010ce:	1989      	adds	r1, r1, r6
 80010d0:	3b01      	subs	r3, #1
 80010d2:	428e      	cmp	r6, r1
 80010d4:	d800      	bhi.n	80010d8 <__aeabi_ddiv+0x31c>
 80010d6:	e0f1      	b.n	80012bc <__aeabi_ddiv+0x500>
 80010d8:	042d      	lsls	r5, r5, #16
 80010da:	431d      	orrs	r5, r3
 80010dc:	46ab      	mov	fp, r5
 80010de:	4643      	mov	r3, r8
 80010e0:	1a89      	subs	r1, r1, r2
 80010e2:	4642      	mov	r2, r8
 80010e4:	0c28      	lsrs	r0, r5, #16
 80010e6:	0412      	lsls	r2, r2, #16
 80010e8:	0c1d      	lsrs	r5, r3, #16
 80010ea:	465b      	mov	r3, fp
 80010ec:	0c14      	lsrs	r4, r2, #16
 80010ee:	0022      	movs	r2, r4
 80010f0:	041b      	lsls	r3, r3, #16
 80010f2:	0c1b      	lsrs	r3, r3, #16
 80010f4:	435a      	muls	r2, r3
 80010f6:	9403      	str	r4, [sp, #12]
 80010f8:	436b      	muls	r3, r5
 80010fa:	4344      	muls	r4, r0
 80010fc:	9502      	str	r5, [sp, #8]
 80010fe:	4368      	muls	r0, r5
 8001100:	191b      	adds	r3, r3, r4
 8001102:	0c15      	lsrs	r5, r2, #16
 8001104:	18eb      	adds	r3, r5, r3
 8001106:	429c      	cmp	r4, r3
 8001108:	d903      	bls.n	8001112 <__aeabi_ddiv+0x356>
 800110a:	2480      	movs	r4, #128	; 0x80
 800110c:	0264      	lsls	r4, r4, #9
 800110e:	46a4      	mov	ip, r4
 8001110:	4460      	add	r0, ip
 8001112:	0c1c      	lsrs	r4, r3, #16
 8001114:	0415      	lsls	r5, r2, #16
 8001116:	041b      	lsls	r3, r3, #16
 8001118:	0c2d      	lsrs	r5, r5, #16
 800111a:	1820      	adds	r0, r4, r0
 800111c:	195d      	adds	r5, r3, r5
 800111e:	4281      	cmp	r1, r0
 8001120:	d377      	bcc.n	8001212 <__aeabi_ddiv+0x456>
 8001122:	d073      	beq.n	800120c <__aeabi_ddiv+0x450>
 8001124:	1a0c      	subs	r4, r1, r0
 8001126:	4aa2      	ldr	r2, [pc, #648]	; (80013b0 <__aeabi_ddiv+0x5f4>)
 8001128:	1b7d      	subs	r5, r7, r5
 800112a:	42af      	cmp	r7, r5
 800112c:	41bf      	sbcs	r7, r7
 800112e:	4694      	mov	ip, r2
 8001130:	9b00      	ldr	r3, [sp, #0]
 8001132:	427f      	negs	r7, r7
 8001134:	4463      	add	r3, ip
 8001136:	1be0      	subs	r0, r4, r7
 8001138:	001c      	movs	r4, r3
 800113a:	4286      	cmp	r6, r0
 800113c:	d100      	bne.n	8001140 <__aeabi_ddiv+0x384>
 800113e:	e0db      	b.n	80012f8 <__aeabi_ddiv+0x53c>
 8001140:	9901      	ldr	r1, [sp, #4]
 8001142:	f7ff f877 	bl	8000234 <__aeabi_uidivmod>
 8001146:	464a      	mov	r2, r9
 8001148:	4342      	muls	r2, r0
 800114a:	040b      	lsls	r3, r1, #16
 800114c:	0c29      	lsrs	r1, r5, #16
 800114e:	0007      	movs	r7, r0
 8001150:	4319      	orrs	r1, r3
 8001152:	428a      	cmp	r2, r1
 8001154:	d907      	bls.n	8001166 <__aeabi_ddiv+0x3aa>
 8001156:	1989      	adds	r1, r1, r6
 8001158:	3f01      	subs	r7, #1
 800115a:	428e      	cmp	r6, r1
 800115c:	d803      	bhi.n	8001166 <__aeabi_ddiv+0x3aa>
 800115e:	428a      	cmp	r2, r1
 8001160:	d901      	bls.n	8001166 <__aeabi_ddiv+0x3aa>
 8001162:	1e87      	subs	r7, r0, #2
 8001164:	1989      	adds	r1, r1, r6
 8001166:	1a88      	subs	r0, r1, r2
 8001168:	9901      	ldr	r1, [sp, #4]
 800116a:	f7ff f863 	bl	8000234 <__aeabi_uidivmod>
 800116e:	0409      	lsls	r1, r1, #16
 8001170:	464a      	mov	r2, r9
 8001172:	4689      	mov	r9, r1
 8001174:	0429      	lsls	r1, r5, #16
 8001176:	464d      	mov	r5, r9
 8001178:	4342      	muls	r2, r0
 800117a:	0c09      	lsrs	r1, r1, #16
 800117c:	0003      	movs	r3, r0
 800117e:	4329      	orrs	r1, r5
 8001180:	428a      	cmp	r2, r1
 8001182:	d907      	bls.n	8001194 <__aeabi_ddiv+0x3d8>
 8001184:	1989      	adds	r1, r1, r6
 8001186:	3b01      	subs	r3, #1
 8001188:	428e      	cmp	r6, r1
 800118a:	d803      	bhi.n	8001194 <__aeabi_ddiv+0x3d8>
 800118c:	428a      	cmp	r2, r1
 800118e:	d901      	bls.n	8001194 <__aeabi_ddiv+0x3d8>
 8001190:	1e83      	subs	r3, r0, #2
 8001192:	1989      	adds	r1, r1, r6
 8001194:	043f      	lsls	r7, r7, #16
 8001196:	1a89      	subs	r1, r1, r2
 8001198:	003a      	movs	r2, r7
 800119a:	9f03      	ldr	r7, [sp, #12]
 800119c:	431a      	orrs	r2, r3
 800119e:	0038      	movs	r0, r7
 80011a0:	0413      	lsls	r3, r2, #16
 80011a2:	0c1b      	lsrs	r3, r3, #16
 80011a4:	4358      	muls	r0, r3
 80011a6:	4681      	mov	r9, r0
 80011a8:	9802      	ldr	r0, [sp, #8]
 80011aa:	0c15      	lsrs	r5, r2, #16
 80011ac:	436f      	muls	r7, r5
 80011ae:	4343      	muls	r3, r0
 80011b0:	4345      	muls	r5, r0
 80011b2:	4648      	mov	r0, r9
 80011b4:	0c00      	lsrs	r0, r0, #16
 80011b6:	4684      	mov	ip, r0
 80011b8:	19db      	adds	r3, r3, r7
 80011ba:	4463      	add	r3, ip
 80011bc:	429f      	cmp	r7, r3
 80011be:	d903      	bls.n	80011c8 <__aeabi_ddiv+0x40c>
 80011c0:	2080      	movs	r0, #128	; 0x80
 80011c2:	0240      	lsls	r0, r0, #9
 80011c4:	4684      	mov	ip, r0
 80011c6:	4465      	add	r5, ip
 80011c8:	4648      	mov	r0, r9
 80011ca:	0c1f      	lsrs	r7, r3, #16
 80011cc:	0400      	lsls	r0, r0, #16
 80011ce:	041b      	lsls	r3, r3, #16
 80011d0:	0c00      	lsrs	r0, r0, #16
 80011d2:	197d      	adds	r5, r7, r5
 80011d4:	1818      	adds	r0, r3, r0
 80011d6:	42a9      	cmp	r1, r5
 80011d8:	d200      	bcs.n	80011dc <__aeabi_ddiv+0x420>
 80011da:	e084      	b.n	80012e6 <__aeabi_ddiv+0x52a>
 80011dc:	d100      	bne.n	80011e0 <__aeabi_ddiv+0x424>
 80011de:	e07f      	b.n	80012e0 <__aeabi_ddiv+0x524>
 80011e0:	2301      	movs	r3, #1
 80011e2:	431a      	orrs	r2, r3
 80011e4:	e657      	b.n	8000e96 <__aeabi_ddiv+0xda>
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	464a      	mov	r2, r9
 80011ea:	031b      	lsls	r3, r3, #12
 80011ec:	4313      	orrs	r3, r2
 80011ee:	031b      	lsls	r3, r3, #12
 80011f0:	0b1b      	lsrs	r3, r3, #12
 80011f2:	46aa      	mov	sl, r5
 80011f4:	4a6f      	ldr	r2, [pc, #444]	; (80013b4 <__aeabi_ddiv+0x5f8>)
 80011f6:	e66f      	b.n	8000ed8 <__aeabi_ddiv+0x11c>
 80011f8:	42ba      	cmp	r2, r7
 80011fa:	d900      	bls.n	80011fe <__aeabi_ddiv+0x442>
 80011fc:	e735      	b.n	800106a <__aeabi_ddiv+0x2ae>
 80011fe:	464b      	mov	r3, r9
 8001200:	07dc      	lsls	r4, r3, #31
 8001202:	0858      	lsrs	r0, r3, #1
 8001204:	087b      	lsrs	r3, r7, #1
 8001206:	431c      	orrs	r4, r3
 8001208:	07ff      	lsls	r7, r7, #31
 800120a:	e734      	b.n	8001076 <__aeabi_ddiv+0x2ba>
 800120c:	2400      	movs	r4, #0
 800120e:	42af      	cmp	r7, r5
 8001210:	d289      	bcs.n	8001126 <__aeabi_ddiv+0x36a>
 8001212:	4447      	add	r7, r8
 8001214:	4547      	cmp	r7, r8
 8001216:	41a4      	sbcs	r4, r4
 8001218:	465b      	mov	r3, fp
 800121a:	4264      	negs	r4, r4
 800121c:	19a4      	adds	r4, r4, r6
 800121e:	1864      	adds	r4, r4, r1
 8001220:	3b01      	subs	r3, #1
 8001222:	42a6      	cmp	r6, r4
 8001224:	d21e      	bcs.n	8001264 <__aeabi_ddiv+0x4a8>
 8001226:	42a0      	cmp	r0, r4
 8001228:	d86d      	bhi.n	8001306 <__aeabi_ddiv+0x54a>
 800122a:	d100      	bne.n	800122e <__aeabi_ddiv+0x472>
 800122c:	e0b6      	b.n	800139c <__aeabi_ddiv+0x5e0>
 800122e:	1a24      	subs	r4, r4, r0
 8001230:	469b      	mov	fp, r3
 8001232:	e778      	b.n	8001126 <__aeabi_ddiv+0x36a>
 8001234:	0003      	movs	r3, r0
 8001236:	465a      	mov	r2, fp
 8001238:	3b28      	subs	r3, #40	; 0x28
 800123a:	409a      	lsls	r2, r3
 800123c:	2700      	movs	r7, #0
 800123e:	4691      	mov	r9, r2
 8001240:	e688      	b.n	8000f54 <__aeabi_ddiv+0x198>
 8001242:	4658      	mov	r0, fp
 8001244:	f001 f912 	bl	800246c <__clzsi2>
 8001248:	3020      	adds	r0, #32
 800124a:	e672      	b.n	8000f32 <__aeabi_ddiv+0x176>
 800124c:	0003      	movs	r3, r0
 800124e:	4652      	mov	r2, sl
 8001250:	3b28      	subs	r3, #40	; 0x28
 8001252:	409a      	lsls	r2, r3
 8001254:	4693      	mov	fp, r2
 8001256:	2200      	movs	r2, #0
 8001258:	e6b4      	b.n	8000fc4 <__aeabi_ddiv+0x208>
 800125a:	4650      	mov	r0, sl
 800125c:	f001 f906 	bl	800246c <__clzsi2>
 8001260:	3020      	adds	r0, #32
 8001262:	e69a      	b.n	8000f9a <__aeabi_ddiv+0x1de>
 8001264:	42a6      	cmp	r6, r4
 8001266:	d1e2      	bne.n	800122e <__aeabi_ddiv+0x472>
 8001268:	45b8      	cmp	r8, r7
 800126a:	d9dc      	bls.n	8001226 <__aeabi_ddiv+0x46a>
 800126c:	1a34      	subs	r4, r6, r0
 800126e:	469b      	mov	fp, r3
 8001270:	e759      	b.n	8001126 <__aeabi_ddiv+0x36a>
 8001272:	2b1f      	cmp	r3, #31
 8001274:	dc65      	bgt.n	8001342 <__aeabi_ddiv+0x586>
 8001276:	4c50      	ldr	r4, [pc, #320]	; (80013b8 <__aeabi_ddiv+0x5fc>)
 8001278:	9900      	ldr	r1, [sp, #0]
 800127a:	46a4      	mov	ip, r4
 800127c:	465c      	mov	r4, fp
 800127e:	4461      	add	r1, ip
 8001280:	0008      	movs	r0, r1
 8001282:	408c      	lsls	r4, r1
 8001284:	0011      	movs	r1, r2
 8001286:	4082      	lsls	r2, r0
 8001288:	40d9      	lsrs	r1, r3
 800128a:	1e50      	subs	r0, r2, #1
 800128c:	4182      	sbcs	r2, r0
 800128e:	430c      	orrs	r4, r1
 8001290:	4314      	orrs	r4, r2
 8001292:	465a      	mov	r2, fp
 8001294:	40da      	lsrs	r2, r3
 8001296:	0013      	movs	r3, r2
 8001298:	0762      	lsls	r2, r4, #29
 800129a:	d009      	beq.n	80012b0 <__aeabi_ddiv+0x4f4>
 800129c:	220f      	movs	r2, #15
 800129e:	4022      	ands	r2, r4
 80012a0:	2a04      	cmp	r2, #4
 80012a2:	d005      	beq.n	80012b0 <__aeabi_ddiv+0x4f4>
 80012a4:	0022      	movs	r2, r4
 80012a6:	1d14      	adds	r4, r2, #4
 80012a8:	4294      	cmp	r4, r2
 80012aa:	4189      	sbcs	r1, r1
 80012ac:	4249      	negs	r1, r1
 80012ae:	185b      	adds	r3, r3, r1
 80012b0:	021a      	lsls	r2, r3, #8
 80012b2:	d562      	bpl.n	800137a <__aeabi_ddiv+0x5be>
 80012b4:	2201      	movs	r2, #1
 80012b6:	2300      	movs	r3, #0
 80012b8:	2700      	movs	r7, #0
 80012ba:	e60d      	b.n	8000ed8 <__aeabi_ddiv+0x11c>
 80012bc:	428a      	cmp	r2, r1
 80012be:	d800      	bhi.n	80012c2 <__aeabi_ddiv+0x506>
 80012c0:	e70a      	b.n	80010d8 <__aeabi_ddiv+0x31c>
 80012c2:	1e83      	subs	r3, r0, #2
 80012c4:	1989      	adds	r1, r1, r6
 80012c6:	e707      	b.n	80010d8 <__aeabi_ddiv+0x31c>
 80012c8:	230f      	movs	r3, #15
 80012ca:	4013      	ands	r3, r2
 80012cc:	2b04      	cmp	r3, #4
 80012ce:	d100      	bne.n	80012d2 <__aeabi_ddiv+0x516>
 80012d0:	e5e6      	b.n	8000ea0 <__aeabi_ddiv+0xe4>
 80012d2:	1d17      	adds	r7, r2, #4
 80012d4:	4297      	cmp	r7, r2
 80012d6:	4192      	sbcs	r2, r2
 80012d8:	4253      	negs	r3, r2
 80012da:	449b      	add	fp, r3
 80012dc:	08fa      	lsrs	r2, r7, #3
 80012de:	e5e0      	b.n	8000ea2 <__aeabi_ddiv+0xe6>
 80012e0:	2800      	cmp	r0, #0
 80012e2:	d100      	bne.n	80012e6 <__aeabi_ddiv+0x52a>
 80012e4:	e5d7      	b.n	8000e96 <__aeabi_ddiv+0xda>
 80012e6:	1871      	adds	r1, r6, r1
 80012e8:	1e53      	subs	r3, r2, #1
 80012ea:	42b1      	cmp	r1, r6
 80012ec:	d327      	bcc.n	800133e <__aeabi_ddiv+0x582>
 80012ee:	42a9      	cmp	r1, r5
 80012f0:	d315      	bcc.n	800131e <__aeabi_ddiv+0x562>
 80012f2:	d058      	beq.n	80013a6 <__aeabi_ddiv+0x5ea>
 80012f4:	001a      	movs	r2, r3
 80012f6:	e773      	b.n	80011e0 <__aeabi_ddiv+0x424>
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	dc00      	bgt.n	80012fe <__aeabi_ddiv+0x542>
 80012fc:	e604      	b.n	8000f08 <__aeabi_ddiv+0x14c>
 80012fe:	2301      	movs	r3, #1
 8001300:	2200      	movs	r2, #0
 8001302:	449b      	add	fp, r3
 8001304:	e5cd      	b.n	8000ea2 <__aeabi_ddiv+0xe6>
 8001306:	2302      	movs	r3, #2
 8001308:	4447      	add	r7, r8
 800130a:	4547      	cmp	r7, r8
 800130c:	4189      	sbcs	r1, r1
 800130e:	425b      	negs	r3, r3
 8001310:	469c      	mov	ip, r3
 8001312:	4249      	negs	r1, r1
 8001314:	1989      	adds	r1, r1, r6
 8001316:	190c      	adds	r4, r1, r4
 8001318:	44e3      	add	fp, ip
 800131a:	1a24      	subs	r4, r4, r0
 800131c:	e703      	b.n	8001126 <__aeabi_ddiv+0x36a>
 800131e:	4643      	mov	r3, r8
 8001320:	005f      	lsls	r7, r3, #1
 8001322:	4547      	cmp	r7, r8
 8001324:	419b      	sbcs	r3, r3
 8001326:	46b8      	mov	r8, r7
 8001328:	425b      	negs	r3, r3
 800132a:	199e      	adds	r6, r3, r6
 800132c:	3a02      	subs	r2, #2
 800132e:	1989      	adds	r1, r1, r6
 8001330:	42a9      	cmp	r1, r5
 8001332:	d000      	beq.n	8001336 <__aeabi_ddiv+0x57a>
 8001334:	e754      	b.n	80011e0 <__aeabi_ddiv+0x424>
 8001336:	4540      	cmp	r0, r8
 8001338:	d000      	beq.n	800133c <__aeabi_ddiv+0x580>
 800133a:	e751      	b.n	80011e0 <__aeabi_ddiv+0x424>
 800133c:	e5ab      	b.n	8000e96 <__aeabi_ddiv+0xda>
 800133e:	001a      	movs	r2, r3
 8001340:	e7f6      	b.n	8001330 <__aeabi_ddiv+0x574>
 8001342:	211f      	movs	r1, #31
 8001344:	465f      	mov	r7, fp
 8001346:	4249      	negs	r1, r1
 8001348:	1b0c      	subs	r4, r1, r4
 800134a:	40e7      	lsrs	r7, r4
 800134c:	2b20      	cmp	r3, #32
 800134e:	d007      	beq.n	8001360 <__aeabi_ddiv+0x5a4>
 8001350:	491a      	ldr	r1, [pc, #104]	; (80013bc <__aeabi_ddiv+0x600>)
 8001352:	9b00      	ldr	r3, [sp, #0]
 8001354:	468c      	mov	ip, r1
 8001356:	4463      	add	r3, ip
 8001358:	0018      	movs	r0, r3
 800135a:	465b      	mov	r3, fp
 800135c:	4083      	lsls	r3, r0
 800135e:	431a      	orrs	r2, r3
 8001360:	1e50      	subs	r0, r2, #1
 8001362:	4182      	sbcs	r2, r0
 8001364:	433a      	orrs	r2, r7
 8001366:	2707      	movs	r7, #7
 8001368:	2300      	movs	r3, #0
 800136a:	4017      	ands	r7, r2
 800136c:	d009      	beq.n	8001382 <__aeabi_ddiv+0x5c6>
 800136e:	210f      	movs	r1, #15
 8001370:	2300      	movs	r3, #0
 8001372:	4011      	ands	r1, r2
 8001374:	0014      	movs	r4, r2
 8001376:	2904      	cmp	r1, #4
 8001378:	d195      	bne.n	80012a6 <__aeabi_ddiv+0x4ea>
 800137a:	0022      	movs	r2, r4
 800137c:	075f      	lsls	r7, r3, #29
 800137e:	025b      	lsls	r3, r3, #9
 8001380:	0b1b      	lsrs	r3, r3, #12
 8001382:	08d2      	lsrs	r2, r2, #3
 8001384:	4317      	orrs	r7, r2
 8001386:	2200      	movs	r2, #0
 8001388:	e5a6      	b.n	8000ed8 <__aeabi_ddiv+0x11c>
 800138a:	2380      	movs	r3, #128	; 0x80
 800138c:	4659      	mov	r1, fp
 800138e:	031b      	lsls	r3, r3, #12
 8001390:	430b      	orrs	r3, r1
 8001392:	031b      	lsls	r3, r3, #12
 8001394:	0017      	movs	r7, r2
 8001396:	0b1b      	lsrs	r3, r3, #12
 8001398:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <__aeabi_ddiv+0x5f8>)
 800139a:	e59d      	b.n	8000ed8 <__aeabi_ddiv+0x11c>
 800139c:	42bd      	cmp	r5, r7
 800139e:	d8b2      	bhi.n	8001306 <__aeabi_ddiv+0x54a>
 80013a0:	469b      	mov	fp, r3
 80013a2:	2400      	movs	r4, #0
 80013a4:	e6bf      	b.n	8001126 <__aeabi_ddiv+0x36a>
 80013a6:	4580      	cmp	r8, r0
 80013a8:	d3b9      	bcc.n	800131e <__aeabi_ddiv+0x562>
 80013aa:	001a      	movs	r2, r3
 80013ac:	e7c3      	b.n	8001336 <__aeabi_ddiv+0x57a>
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	000003ff 	.word	0x000003ff
 80013b4:	000007ff 	.word	0x000007ff
 80013b8:	0000041e 	.word	0x0000041e
 80013bc:	0000043e 	.word	0x0000043e

080013c0 <__eqdf2>:
 80013c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c2:	464f      	mov	r7, r9
 80013c4:	4646      	mov	r6, r8
 80013c6:	46d6      	mov	lr, sl
 80013c8:	4684      	mov	ip, r0
 80013ca:	b5c0      	push	{r6, r7, lr}
 80013cc:	4680      	mov	r8, r0
 80013ce:	4e19      	ldr	r6, [pc, #100]	; (8001434 <__eqdf2+0x74>)
 80013d0:	0318      	lsls	r0, r3, #12
 80013d2:	030f      	lsls	r7, r1, #12
 80013d4:	004d      	lsls	r5, r1, #1
 80013d6:	0b00      	lsrs	r0, r0, #12
 80013d8:	005c      	lsls	r4, r3, #1
 80013da:	4682      	mov	sl, r0
 80013dc:	0b3f      	lsrs	r7, r7, #12
 80013de:	0d6d      	lsrs	r5, r5, #21
 80013e0:	0fc9      	lsrs	r1, r1, #31
 80013e2:	4691      	mov	r9, r2
 80013e4:	0d64      	lsrs	r4, r4, #21
 80013e6:	0fdb      	lsrs	r3, r3, #31
 80013e8:	2001      	movs	r0, #1
 80013ea:	42b5      	cmp	r5, r6
 80013ec:	d00a      	beq.n	8001404 <__eqdf2+0x44>
 80013ee:	42b4      	cmp	r4, r6
 80013f0:	d003      	beq.n	80013fa <__eqdf2+0x3a>
 80013f2:	42a5      	cmp	r5, r4
 80013f4:	d101      	bne.n	80013fa <__eqdf2+0x3a>
 80013f6:	4557      	cmp	r7, sl
 80013f8:	d00c      	beq.n	8001414 <__eqdf2+0x54>
 80013fa:	bc1c      	pop	{r2, r3, r4}
 80013fc:	4690      	mov	r8, r2
 80013fe:	4699      	mov	r9, r3
 8001400:	46a2      	mov	sl, r4
 8001402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001404:	4666      	mov	r6, ip
 8001406:	433e      	orrs	r6, r7
 8001408:	d1f7      	bne.n	80013fa <__eqdf2+0x3a>
 800140a:	42ac      	cmp	r4, r5
 800140c:	d1f5      	bne.n	80013fa <__eqdf2+0x3a>
 800140e:	4654      	mov	r4, sl
 8001410:	4314      	orrs	r4, r2
 8001412:	d1f2      	bne.n	80013fa <__eqdf2+0x3a>
 8001414:	2001      	movs	r0, #1
 8001416:	45c8      	cmp	r8, r9
 8001418:	d1ef      	bne.n	80013fa <__eqdf2+0x3a>
 800141a:	4299      	cmp	r1, r3
 800141c:	d007      	beq.n	800142e <__eqdf2+0x6e>
 800141e:	2d00      	cmp	r5, #0
 8001420:	d1eb      	bne.n	80013fa <__eqdf2+0x3a>
 8001422:	4663      	mov	r3, ip
 8001424:	431f      	orrs	r7, r3
 8001426:	0038      	movs	r0, r7
 8001428:	1e47      	subs	r7, r0, #1
 800142a:	41b8      	sbcs	r0, r7
 800142c:	e7e5      	b.n	80013fa <__eqdf2+0x3a>
 800142e:	2000      	movs	r0, #0
 8001430:	e7e3      	b.n	80013fa <__eqdf2+0x3a>
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	000007ff 	.word	0x000007ff

08001438 <__gedf2>:
 8001438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143a:	464f      	mov	r7, r9
 800143c:	4646      	mov	r6, r8
 800143e:	46d6      	mov	lr, sl
 8001440:	004d      	lsls	r5, r1, #1
 8001442:	b5c0      	push	{r6, r7, lr}
 8001444:	030e      	lsls	r6, r1, #12
 8001446:	0fc9      	lsrs	r1, r1, #31
 8001448:	468a      	mov	sl, r1
 800144a:	492c      	ldr	r1, [pc, #176]	; (80014fc <__gedf2+0xc4>)
 800144c:	031f      	lsls	r7, r3, #12
 800144e:	005c      	lsls	r4, r3, #1
 8001450:	4680      	mov	r8, r0
 8001452:	0b36      	lsrs	r6, r6, #12
 8001454:	0d6d      	lsrs	r5, r5, #21
 8001456:	4691      	mov	r9, r2
 8001458:	0b3f      	lsrs	r7, r7, #12
 800145a:	0d64      	lsrs	r4, r4, #21
 800145c:	0fdb      	lsrs	r3, r3, #31
 800145e:	428d      	cmp	r5, r1
 8001460:	d01e      	beq.n	80014a0 <__gedf2+0x68>
 8001462:	428c      	cmp	r4, r1
 8001464:	d016      	beq.n	8001494 <__gedf2+0x5c>
 8001466:	2d00      	cmp	r5, #0
 8001468:	d11e      	bne.n	80014a8 <__gedf2+0x70>
 800146a:	4330      	orrs	r0, r6
 800146c:	4684      	mov	ip, r0
 800146e:	2c00      	cmp	r4, #0
 8001470:	d101      	bne.n	8001476 <__gedf2+0x3e>
 8001472:	433a      	orrs	r2, r7
 8001474:	d023      	beq.n	80014be <__gedf2+0x86>
 8001476:	4662      	mov	r2, ip
 8001478:	2a00      	cmp	r2, #0
 800147a:	d01a      	beq.n	80014b2 <__gedf2+0x7a>
 800147c:	459a      	cmp	sl, r3
 800147e:	d029      	beq.n	80014d4 <__gedf2+0x9c>
 8001480:	4651      	mov	r1, sl
 8001482:	2002      	movs	r0, #2
 8001484:	3901      	subs	r1, #1
 8001486:	4008      	ands	r0, r1
 8001488:	3801      	subs	r0, #1
 800148a:	bc1c      	pop	{r2, r3, r4}
 800148c:	4690      	mov	r8, r2
 800148e:	4699      	mov	r9, r3
 8001490:	46a2      	mov	sl, r4
 8001492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001494:	0039      	movs	r1, r7
 8001496:	4311      	orrs	r1, r2
 8001498:	d0e5      	beq.n	8001466 <__gedf2+0x2e>
 800149a:	2002      	movs	r0, #2
 800149c:	4240      	negs	r0, r0
 800149e:	e7f4      	b.n	800148a <__gedf2+0x52>
 80014a0:	4330      	orrs	r0, r6
 80014a2:	d1fa      	bne.n	800149a <__gedf2+0x62>
 80014a4:	42ac      	cmp	r4, r5
 80014a6:	d00f      	beq.n	80014c8 <__gedf2+0x90>
 80014a8:	2c00      	cmp	r4, #0
 80014aa:	d10f      	bne.n	80014cc <__gedf2+0x94>
 80014ac:	433a      	orrs	r2, r7
 80014ae:	d0e7      	beq.n	8001480 <__gedf2+0x48>
 80014b0:	e00c      	b.n	80014cc <__gedf2+0x94>
 80014b2:	2201      	movs	r2, #1
 80014b4:	3b01      	subs	r3, #1
 80014b6:	4393      	bics	r3, r2
 80014b8:	0018      	movs	r0, r3
 80014ba:	3001      	adds	r0, #1
 80014bc:	e7e5      	b.n	800148a <__gedf2+0x52>
 80014be:	4663      	mov	r3, ip
 80014c0:	2000      	movs	r0, #0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0e1      	beq.n	800148a <__gedf2+0x52>
 80014c6:	e7db      	b.n	8001480 <__gedf2+0x48>
 80014c8:	433a      	orrs	r2, r7
 80014ca:	d1e6      	bne.n	800149a <__gedf2+0x62>
 80014cc:	459a      	cmp	sl, r3
 80014ce:	d1d7      	bne.n	8001480 <__gedf2+0x48>
 80014d0:	42a5      	cmp	r5, r4
 80014d2:	dcd5      	bgt.n	8001480 <__gedf2+0x48>
 80014d4:	42a5      	cmp	r5, r4
 80014d6:	db05      	blt.n	80014e4 <__gedf2+0xac>
 80014d8:	42be      	cmp	r6, r7
 80014da:	d8d1      	bhi.n	8001480 <__gedf2+0x48>
 80014dc:	d008      	beq.n	80014f0 <__gedf2+0xb8>
 80014de:	2000      	movs	r0, #0
 80014e0:	42be      	cmp	r6, r7
 80014e2:	d2d2      	bcs.n	800148a <__gedf2+0x52>
 80014e4:	4650      	mov	r0, sl
 80014e6:	2301      	movs	r3, #1
 80014e8:	3801      	subs	r0, #1
 80014ea:	4398      	bics	r0, r3
 80014ec:	3001      	adds	r0, #1
 80014ee:	e7cc      	b.n	800148a <__gedf2+0x52>
 80014f0:	45c8      	cmp	r8, r9
 80014f2:	d8c5      	bhi.n	8001480 <__gedf2+0x48>
 80014f4:	2000      	movs	r0, #0
 80014f6:	45c8      	cmp	r8, r9
 80014f8:	d3f4      	bcc.n	80014e4 <__gedf2+0xac>
 80014fa:	e7c6      	b.n	800148a <__gedf2+0x52>
 80014fc:	000007ff 	.word	0x000007ff

08001500 <__ledf2>:
 8001500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001502:	464f      	mov	r7, r9
 8001504:	4646      	mov	r6, r8
 8001506:	46d6      	mov	lr, sl
 8001508:	004d      	lsls	r5, r1, #1
 800150a:	b5c0      	push	{r6, r7, lr}
 800150c:	030e      	lsls	r6, r1, #12
 800150e:	0fc9      	lsrs	r1, r1, #31
 8001510:	468a      	mov	sl, r1
 8001512:	492e      	ldr	r1, [pc, #184]	; (80015cc <__ledf2+0xcc>)
 8001514:	031f      	lsls	r7, r3, #12
 8001516:	005c      	lsls	r4, r3, #1
 8001518:	4680      	mov	r8, r0
 800151a:	0b36      	lsrs	r6, r6, #12
 800151c:	0d6d      	lsrs	r5, r5, #21
 800151e:	4691      	mov	r9, r2
 8001520:	0b3f      	lsrs	r7, r7, #12
 8001522:	0d64      	lsrs	r4, r4, #21
 8001524:	0fdb      	lsrs	r3, r3, #31
 8001526:	428d      	cmp	r5, r1
 8001528:	d018      	beq.n	800155c <__ledf2+0x5c>
 800152a:	428c      	cmp	r4, r1
 800152c:	d011      	beq.n	8001552 <__ledf2+0x52>
 800152e:	2d00      	cmp	r5, #0
 8001530:	d118      	bne.n	8001564 <__ledf2+0x64>
 8001532:	4330      	orrs	r0, r6
 8001534:	4684      	mov	ip, r0
 8001536:	2c00      	cmp	r4, #0
 8001538:	d11e      	bne.n	8001578 <__ledf2+0x78>
 800153a:	433a      	orrs	r2, r7
 800153c:	d11c      	bne.n	8001578 <__ledf2+0x78>
 800153e:	4663      	mov	r3, ip
 8001540:	2000      	movs	r0, #0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d030      	beq.n	80015a8 <__ledf2+0xa8>
 8001546:	4651      	mov	r1, sl
 8001548:	2002      	movs	r0, #2
 800154a:	3901      	subs	r1, #1
 800154c:	4008      	ands	r0, r1
 800154e:	3801      	subs	r0, #1
 8001550:	e02a      	b.n	80015a8 <__ledf2+0xa8>
 8001552:	0039      	movs	r1, r7
 8001554:	4311      	orrs	r1, r2
 8001556:	d0ea      	beq.n	800152e <__ledf2+0x2e>
 8001558:	2002      	movs	r0, #2
 800155a:	e025      	b.n	80015a8 <__ledf2+0xa8>
 800155c:	4330      	orrs	r0, r6
 800155e:	d1fb      	bne.n	8001558 <__ledf2+0x58>
 8001560:	42ac      	cmp	r4, r5
 8001562:	d026      	beq.n	80015b2 <__ledf2+0xb2>
 8001564:	2c00      	cmp	r4, #0
 8001566:	d126      	bne.n	80015b6 <__ledf2+0xb6>
 8001568:	433a      	orrs	r2, r7
 800156a:	d124      	bne.n	80015b6 <__ledf2+0xb6>
 800156c:	4651      	mov	r1, sl
 800156e:	2002      	movs	r0, #2
 8001570:	3901      	subs	r1, #1
 8001572:	4008      	ands	r0, r1
 8001574:	3801      	subs	r0, #1
 8001576:	e017      	b.n	80015a8 <__ledf2+0xa8>
 8001578:	4662      	mov	r2, ip
 800157a:	2a00      	cmp	r2, #0
 800157c:	d00f      	beq.n	800159e <__ledf2+0x9e>
 800157e:	459a      	cmp	sl, r3
 8001580:	d1e1      	bne.n	8001546 <__ledf2+0x46>
 8001582:	42a5      	cmp	r5, r4
 8001584:	db05      	blt.n	8001592 <__ledf2+0x92>
 8001586:	42be      	cmp	r6, r7
 8001588:	d8dd      	bhi.n	8001546 <__ledf2+0x46>
 800158a:	d019      	beq.n	80015c0 <__ledf2+0xc0>
 800158c:	2000      	movs	r0, #0
 800158e:	42be      	cmp	r6, r7
 8001590:	d20a      	bcs.n	80015a8 <__ledf2+0xa8>
 8001592:	4650      	mov	r0, sl
 8001594:	2301      	movs	r3, #1
 8001596:	3801      	subs	r0, #1
 8001598:	4398      	bics	r0, r3
 800159a:	3001      	adds	r0, #1
 800159c:	e004      	b.n	80015a8 <__ledf2+0xa8>
 800159e:	2201      	movs	r2, #1
 80015a0:	3b01      	subs	r3, #1
 80015a2:	4393      	bics	r3, r2
 80015a4:	0018      	movs	r0, r3
 80015a6:	3001      	adds	r0, #1
 80015a8:	bc1c      	pop	{r2, r3, r4}
 80015aa:	4690      	mov	r8, r2
 80015ac:	4699      	mov	r9, r3
 80015ae:	46a2      	mov	sl, r4
 80015b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015b2:	433a      	orrs	r2, r7
 80015b4:	d1d0      	bne.n	8001558 <__ledf2+0x58>
 80015b6:	459a      	cmp	sl, r3
 80015b8:	d1c5      	bne.n	8001546 <__ledf2+0x46>
 80015ba:	42a5      	cmp	r5, r4
 80015bc:	dcc3      	bgt.n	8001546 <__ledf2+0x46>
 80015be:	e7e0      	b.n	8001582 <__ledf2+0x82>
 80015c0:	45c8      	cmp	r8, r9
 80015c2:	d8c0      	bhi.n	8001546 <__ledf2+0x46>
 80015c4:	2000      	movs	r0, #0
 80015c6:	45c8      	cmp	r8, r9
 80015c8:	d3e3      	bcc.n	8001592 <__ledf2+0x92>
 80015ca:	e7ed      	b.n	80015a8 <__ledf2+0xa8>
 80015cc:	000007ff 	.word	0x000007ff

080015d0 <__aeabi_dmul>:
 80015d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015d2:	4657      	mov	r7, sl
 80015d4:	46de      	mov	lr, fp
 80015d6:	464e      	mov	r6, r9
 80015d8:	4645      	mov	r5, r8
 80015da:	b5e0      	push	{r5, r6, r7, lr}
 80015dc:	4683      	mov	fp, r0
 80015de:	0006      	movs	r6, r0
 80015e0:	030f      	lsls	r7, r1, #12
 80015e2:	0048      	lsls	r0, r1, #1
 80015e4:	b087      	sub	sp, #28
 80015e6:	4692      	mov	sl, r2
 80015e8:	001d      	movs	r5, r3
 80015ea:	0b3f      	lsrs	r7, r7, #12
 80015ec:	0d40      	lsrs	r0, r0, #21
 80015ee:	0fcc      	lsrs	r4, r1, #31
 80015f0:	2800      	cmp	r0, #0
 80015f2:	d100      	bne.n	80015f6 <__aeabi_dmul+0x26>
 80015f4:	e06f      	b.n	80016d6 <__aeabi_dmul+0x106>
 80015f6:	4bde      	ldr	r3, [pc, #888]	; (8001970 <__aeabi_dmul+0x3a0>)
 80015f8:	4298      	cmp	r0, r3
 80015fa:	d038      	beq.n	800166e <__aeabi_dmul+0x9e>
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	00ff      	lsls	r7, r7, #3
 8001600:	041b      	lsls	r3, r3, #16
 8001602:	431f      	orrs	r7, r3
 8001604:	0f73      	lsrs	r3, r6, #29
 8001606:	433b      	orrs	r3, r7
 8001608:	9301      	str	r3, [sp, #4]
 800160a:	4bda      	ldr	r3, [pc, #872]	; (8001974 <__aeabi_dmul+0x3a4>)
 800160c:	2700      	movs	r7, #0
 800160e:	4699      	mov	r9, r3
 8001610:	2300      	movs	r3, #0
 8001612:	469b      	mov	fp, r3
 8001614:	00f6      	lsls	r6, r6, #3
 8001616:	4481      	add	r9, r0
 8001618:	032b      	lsls	r3, r5, #12
 800161a:	0069      	lsls	r1, r5, #1
 800161c:	0b1b      	lsrs	r3, r3, #12
 800161e:	4652      	mov	r2, sl
 8001620:	4698      	mov	r8, r3
 8001622:	0d49      	lsrs	r1, r1, #21
 8001624:	0fed      	lsrs	r5, r5, #31
 8001626:	2900      	cmp	r1, #0
 8001628:	d100      	bne.n	800162c <__aeabi_dmul+0x5c>
 800162a:	e085      	b.n	8001738 <__aeabi_dmul+0x168>
 800162c:	4bd0      	ldr	r3, [pc, #832]	; (8001970 <__aeabi_dmul+0x3a0>)
 800162e:	4299      	cmp	r1, r3
 8001630:	d100      	bne.n	8001634 <__aeabi_dmul+0x64>
 8001632:	e073      	b.n	800171c <__aeabi_dmul+0x14c>
 8001634:	4643      	mov	r3, r8
 8001636:	00da      	lsls	r2, r3, #3
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	041b      	lsls	r3, r3, #16
 800163c:	4313      	orrs	r3, r2
 800163e:	4652      	mov	r2, sl
 8001640:	48cc      	ldr	r0, [pc, #816]	; (8001974 <__aeabi_dmul+0x3a4>)
 8001642:	0f52      	lsrs	r2, r2, #29
 8001644:	4684      	mov	ip, r0
 8001646:	4313      	orrs	r3, r2
 8001648:	4652      	mov	r2, sl
 800164a:	2000      	movs	r0, #0
 800164c:	4461      	add	r1, ip
 800164e:	00d2      	lsls	r2, r2, #3
 8001650:	4489      	add	r9, r1
 8001652:	0021      	movs	r1, r4
 8001654:	4069      	eors	r1, r5
 8001656:	9100      	str	r1, [sp, #0]
 8001658:	468c      	mov	ip, r1
 800165a:	2101      	movs	r1, #1
 800165c:	4449      	add	r1, r9
 800165e:	468a      	mov	sl, r1
 8001660:	2f0f      	cmp	r7, #15
 8001662:	d900      	bls.n	8001666 <__aeabi_dmul+0x96>
 8001664:	e090      	b.n	8001788 <__aeabi_dmul+0x1b8>
 8001666:	49c4      	ldr	r1, [pc, #784]	; (8001978 <__aeabi_dmul+0x3a8>)
 8001668:	00bf      	lsls	r7, r7, #2
 800166a:	59cf      	ldr	r7, [r1, r7]
 800166c:	46bf      	mov	pc, r7
 800166e:	465b      	mov	r3, fp
 8001670:	433b      	orrs	r3, r7
 8001672:	9301      	str	r3, [sp, #4]
 8001674:	d000      	beq.n	8001678 <__aeabi_dmul+0xa8>
 8001676:	e16a      	b.n	800194e <__aeabi_dmul+0x37e>
 8001678:	2302      	movs	r3, #2
 800167a:	2708      	movs	r7, #8
 800167c:	2600      	movs	r6, #0
 800167e:	4681      	mov	r9, r0
 8001680:	469b      	mov	fp, r3
 8001682:	e7c9      	b.n	8001618 <__aeabi_dmul+0x48>
 8001684:	0032      	movs	r2, r6
 8001686:	4658      	mov	r0, fp
 8001688:	9b01      	ldr	r3, [sp, #4]
 800168a:	4661      	mov	r1, ip
 800168c:	9100      	str	r1, [sp, #0]
 800168e:	2802      	cmp	r0, #2
 8001690:	d100      	bne.n	8001694 <__aeabi_dmul+0xc4>
 8001692:	e075      	b.n	8001780 <__aeabi_dmul+0x1b0>
 8001694:	2803      	cmp	r0, #3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0xca>
 8001698:	e1fe      	b.n	8001a98 <__aeabi_dmul+0x4c8>
 800169a:	2801      	cmp	r0, #1
 800169c:	d000      	beq.n	80016a0 <__aeabi_dmul+0xd0>
 800169e:	e12c      	b.n	80018fa <__aeabi_dmul+0x32a>
 80016a0:	2300      	movs	r3, #0
 80016a2:	2700      	movs	r7, #0
 80016a4:	2600      	movs	r6, #0
 80016a6:	2500      	movs	r5, #0
 80016a8:	033f      	lsls	r7, r7, #12
 80016aa:	0d2a      	lsrs	r2, r5, #20
 80016ac:	0b3f      	lsrs	r7, r7, #12
 80016ae:	48b3      	ldr	r0, [pc, #716]	; (800197c <__aeabi_dmul+0x3ac>)
 80016b0:	0512      	lsls	r2, r2, #20
 80016b2:	433a      	orrs	r2, r7
 80016b4:	4002      	ands	r2, r0
 80016b6:	051b      	lsls	r3, r3, #20
 80016b8:	4313      	orrs	r3, r2
 80016ba:	9a00      	ldr	r2, [sp, #0]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	07d1      	lsls	r1, r2, #31
 80016c0:	085b      	lsrs	r3, r3, #1
 80016c2:	430b      	orrs	r3, r1
 80016c4:	0030      	movs	r0, r6
 80016c6:	0019      	movs	r1, r3
 80016c8:	b007      	add	sp, #28
 80016ca:	bc3c      	pop	{r2, r3, r4, r5}
 80016cc:	4690      	mov	r8, r2
 80016ce:	4699      	mov	r9, r3
 80016d0:	46a2      	mov	sl, r4
 80016d2:	46ab      	mov	fp, r5
 80016d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d6:	465b      	mov	r3, fp
 80016d8:	433b      	orrs	r3, r7
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	d100      	bne.n	80016e0 <__aeabi_dmul+0x110>
 80016de:	e12f      	b.n	8001940 <__aeabi_dmul+0x370>
 80016e0:	2f00      	cmp	r7, #0
 80016e2:	d100      	bne.n	80016e6 <__aeabi_dmul+0x116>
 80016e4:	e1a5      	b.n	8001a32 <__aeabi_dmul+0x462>
 80016e6:	0038      	movs	r0, r7
 80016e8:	f000 fec0 	bl	800246c <__clzsi2>
 80016ec:	0003      	movs	r3, r0
 80016ee:	3b0b      	subs	r3, #11
 80016f0:	2b1c      	cmp	r3, #28
 80016f2:	dd00      	ble.n	80016f6 <__aeabi_dmul+0x126>
 80016f4:	e196      	b.n	8001a24 <__aeabi_dmul+0x454>
 80016f6:	221d      	movs	r2, #29
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	465a      	mov	r2, fp
 80016fc:	0001      	movs	r1, r0
 80016fe:	40da      	lsrs	r2, r3
 8001700:	465e      	mov	r6, fp
 8001702:	3908      	subs	r1, #8
 8001704:	408f      	lsls	r7, r1
 8001706:	0013      	movs	r3, r2
 8001708:	408e      	lsls	r6, r1
 800170a:	433b      	orrs	r3, r7
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	4b9c      	ldr	r3, [pc, #624]	; (8001980 <__aeabi_dmul+0x3b0>)
 8001710:	2700      	movs	r7, #0
 8001712:	1a1b      	subs	r3, r3, r0
 8001714:	4699      	mov	r9, r3
 8001716:	2300      	movs	r3, #0
 8001718:	469b      	mov	fp, r3
 800171a:	e77d      	b.n	8001618 <__aeabi_dmul+0x48>
 800171c:	4641      	mov	r1, r8
 800171e:	4653      	mov	r3, sl
 8001720:	430b      	orrs	r3, r1
 8001722:	4993      	ldr	r1, [pc, #588]	; (8001970 <__aeabi_dmul+0x3a0>)
 8001724:	468c      	mov	ip, r1
 8001726:	44e1      	add	r9, ip
 8001728:	2b00      	cmp	r3, #0
 800172a:	d000      	beq.n	800172e <__aeabi_dmul+0x15e>
 800172c:	e11a      	b.n	8001964 <__aeabi_dmul+0x394>
 800172e:	2202      	movs	r2, #2
 8001730:	2002      	movs	r0, #2
 8001732:	4317      	orrs	r7, r2
 8001734:	2200      	movs	r2, #0
 8001736:	e78c      	b.n	8001652 <__aeabi_dmul+0x82>
 8001738:	4313      	orrs	r3, r2
 800173a:	d100      	bne.n	800173e <__aeabi_dmul+0x16e>
 800173c:	e10d      	b.n	800195a <__aeabi_dmul+0x38a>
 800173e:	4643      	mov	r3, r8
 8001740:	2b00      	cmp	r3, #0
 8001742:	d100      	bne.n	8001746 <__aeabi_dmul+0x176>
 8001744:	e181      	b.n	8001a4a <__aeabi_dmul+0x47a>
 8001746:	4640      	mov	r0, r8
 8001748:	f000 fe90 	bl	800246c <__clzsi2>
 800174c:	0002      	movs	r2, r0
 800174e:	3a0b      	subs	r2, #11
 8001750:	2a1c      	cmp	r2, #28
 8001752:	dd00      	ble.n	8001756 <__aeabi_dmul+0x186>
 8001754:	e172      	b.n	8001a3c <__aeabi_dmul+0x46c>
 8001756:	0001      	movs	r1, r0
 8001758:	4643      	mov	r3, r8
 800175a:	3908      	subs	r1, #8
 800175c:	408b      	lsls	r3, r1
 800175e:	4698      	mov	r8, r3
 8001760:	231d      	movs	r3, #29
 8001762:	1a9a      	subs	r2, r3, r2
 8001764:	4653      	mov	r3, sl
 8001766:	40d3      	lsrs	r3, r2
 8001768:	001a      	movs	r2, r3
 800176a:	4643      	mov	r3, r8
 800176c:	4313      	orrs	r3, r2
 800176e:	4652      	mov	r2, sl
 8001770:	408a      	lsls	r2, r1
 8001772:	4649      	mov	r1, r9
 8001774:	1a08      	subs	r0, r1, r0
 8001776:	4982      	ldr	r1, [pc, #520]	; (8001980 <__aeabi_dmul+0x3b0>)
 8001778:	4689      	mov	r9, r1
 800177a:	4481      	add	r9, r0
 800177c:	2000      	movs	r0, #0
 800177e:	e768      	b.n	8001652 <__aeabi_dmul+0x82>
 8001780:	4b7b      	ldr	r3, [pc, #492]	; (8001970 <__aeabi_dmul+0x3a0>)
 8001782:	2700      	movs	r7, #0
 8001784:	2600      	movs	r6, #0
 8001786:	e78e      	b.n	80016a6 <__aeabi_dmul+0xd6>
 8001788:	0c14      	lsrs	r4, r2, #16
 800178a:	0412      	lsls	r2, r2, #16
 800178c:	0c12      	lsrs	r2, r2, #16
 800178e:	0011      	movs	r1, r2
 8001790:	0c37      	lsrs	r7, r6, #16
 8001792:	0436      	lsls	r6, r6, #16
 8001794:	0c35      	lsrs	r5, r6, #16
 8001796:	4379      	muls	r1, r7
 8001798:	0028      	movs	r0, r5
 800179a:	468c      	mov	ip, r1
 800179c:	002e      	movs	r6, r5
 800179e:	4360      	muls	r0, r4
 80017a0:	4460      	add	r0, ip
 80017a2:	4683      	mov	fp, r0
 80017a4:	4356      	muls	r6, r2
 80017a6:	0021      	movs	r1, r4
 80017a8:	0c30      	lsrs	r0, r6, #16
 80017aa:	4680      	mov	r8, r0
 80017ac:	4658      	mov	r0, fp
 80017ae:	4379      	muls	r1, r7
 80017b0:	4440      	add	r0, r8
 80017b2:	9102      	str	r1, [sp, #8]
 80017b4:	4584      	cmp	ip, r0
 80017b6:	d906      	bls.n	80017c6 <__aeabi_dmul+0x1f6>
 80017b8:	4688      	mov	r8, r1
 80017ba:	2180      	movs	r1, #128	; 0x80
 80017bc:	0249      	lsls	r1, r1, #9
 80017be:	468c      	mov	ip, r1
 80017c0:	44e0      	add	r8, ip
 80017c2:	4641      	mov	r1, r8
 80017c4:	9102      	str	r1, [sp, #8]
 80017c6:	0436      	lsls	r6, r6, #16
 80017c8:	0c01      	lsrs	r1, r0, #16
 80017ca:	0c36      	lsrs	r6, r6, #16
 80017cc:	0400      	lsls	r0, r0, #16
 80017ce:	468b      	mov	fp, r1
 80017d0:	1981      	adds	r1, r0, r6
 80017d2:	0c1e      	lsrs	r6, r3, #16
 80017d4:	041b      	lsls	r3, r3, #16
 80017d6:	0c1b      	lsrs	r3, r3, #16
 80017d8:	9103      	str	r1, [sp, #12]
 80017da:	0019      	movs	r1, r3
 80017dc:	4379      	muls	r1, r7
 80017de:	468c      	mov	ip, r1
 80017e0:	0028      	movs	r0, r5
 80017e2:	4375      	muls	r5, r6
 80017e4:	4465      	add	r5, ip
 80017e6:	46a8      	mov	r8, r5
 80017e8:	4358      	muls	r0, r3
 80017ea:	0c05      	lsrs	r5, r0, #16
 80017ec:	4445      	add	r5, r8
 80017ee:	4377      	muls	r7, r6
 80017f0:	42a9      	cmp	r1, r5
 80017f2:	d903      	bls.n	80017fc <__aeabi_dmul+0x22c>
 80017f4:	2180      	movs	r1, #128	; 0x80
 80017f6:	0249      	lsls	r1, r1, #9
 80017f8:	468c      	mov	ip, r1
 80017fa:	4467      	add	r7, ip
 80017fc:	0c29      	lsrs	r1, r5, #16
 80017fe:	468c      	mov	ip, r1
 8001800:	0039      	movs	r1, r7
 8001802:	0400      	lsls	r0, r0, #16
 8001804:	0c00      	lsrs	r0, r0, #16
 8001806:	042d      	lsls	r5, r5, #16
 8001808:	182d      	adds	r5, r5, r0
 800180a:	4461      	add	r1, ip
 800180c:	44ab      	add	fp, r5
 800180e:	9105      	str	r1, [sp, #20]
 8001810:	4659      	mov	r1, fp
 8001812:	9104      	str	r1, [sp, #16]
 8001814:	9901      	ldr	r1, [sp, #4]
 8001816:	040f      	lsls	r7, r1, #16
 8001818:	0c3f      	lsrs	r7, r7, #16
 800181a:	0c08      	lsrs	r0, r1, #16
 800181c:	0039      	movs	r1, r7
 800181e:	4351      	muls	r1, r2
 8001820:	4342      	muls	r2, r0
 8001822:	4690      	mov	r8, r2
 8001824:	0002      	movs	r2, r0
 8001826:	468c      	mov	ip, r1
 8001828:	0c09      	lsrs	r1, r1, #16
 800182a:	468b      	mov	fp, r1
 800182c:	4362      	muls	r2, r4
 800182e:	437c      	muls	r4, r7
 8001830:	4444      	add	r4, r8
 8001832:	445c      	add	r4, fp
 8001834:	45a0      	cmp	r8, r4
 8001836:	d903      	bls.n	8001840 <__aeabi_dmul+0x270>
 8001838:	2180      	movs	r1, #128	; 0x80
 800183a:	0249      	lsls	r1, r1, #9
 800183c:	4688      	mov	r8, r1
 800183e:	4442      	add	r2, r8
 8001840:	0c21      	lsrs	r1, r4, #16
 8001842:	4688      	mov	r8, r1
 8001844:	4661      	mov	r1, ip
 8001846:	0409      	lsls	r1, r1, #16
 8001848:	0c09      	lsrs	r1, r1, #16
 800184a:	468c      	mov	ip, r1
 800184c:	0039      	movs	r1, r7
 800184e:	4359      	muls	r1, r3
 8001850:	4343      	muls	r3, r0
 8001852:	4370      	muls	r0, r6
 8001854:	437e      	muls	r6, r7
 8001856:	0c0f      	lsrs	r7, r1, #16
 8001858:	18f6      	adds	r6, r6, r3
 800185a:	0424      	lsls	r4, r4, #16
 800185c:	19be      	adds	r6, r7, r6
 800185e:	4464      	add	r4, ip
 8001860:	4442      	add	r2, r8
 8001862:	468c      	mov	ip, r1
 8001864:	42b3      	cmp	r3, r6
 8001866:	d903      	bls.n	8001870 <__aeabi_dmul+0x2a0>
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	025b      	lsls	r3, r3, #9
 800186c:	4698      	mov	r8, r3
 800186e:	4440      	add	r0, r8
 8001870:	9b02      	ldr	r3, [sp, #8]
 8001872:	4661      	mov	r1, ip
 8001874:	4698      	mov	r8, r3
 8001876:	9b04      	ldr	r3, [sp, #16]
 8001878:	0437      	lsls	r7, r6, #16
 800187a:	4443      	add	r3, r8
 800187c:	469b      	mov	fp, r3
 800187e:	45ab      	cmp	fp, r5
 8001880:	41ad      	sbcs	r5, r5
 8001882:	426b      	negs	r3, r5
 8001884:	040d      	lsls	r5, r1, #16
 8001886:	9905      	ldr	r1, [sp, #20]
 8001888:	0c2d      	lsrs	r5, r5, #16
 800188a:	468c      	mov	ip, r1
 800188c:	197f      	adds	r7, r7, r5
 800188e:	4467      	add	r7, ip
 8001890:	18fd      	adds	r5, r7, r3
 8001892:	46a8      	mov	r8, r5
 8001894:	465d      	mov	r5, fp
 8001896:	192d      	adds	r5, r5, r4
 8001898:	42a5      	cmp	r5, r4
 800189a:	41a4      	sbcs	r4, r4
 800189c:	4693      	mov	fp, r2
 800189e:	4264      	negs	r4, r4
 80018a0:	46a4      	mov	ip, r4
 80018a2:	44c3      	add	fp, r8
 80018a4:	44dc      	add	ip, fp
 80018a6:	428f      	cmp	r7, r1
 80018a8:	41bf      	sbcs	r7, r7
 80018aa:	4598      	cmp	r8, r3
 80018ac:	419b      	sbcs	r3, r3
 80018ae:	4593      	cmp	fp, r2
 80018b0:	4192      	sbcs	r2, r2
 80018b2:	45a4      	cmp	ip, r4
 80018b4:	41a4      	sbcs	r4, r4
 80018b6:	425b      	negs	r3, r3
 80018b8:	427f      	negs	r7, r7
 80018ba:	431f      	orrs	r7, r3
 80018bc:	0c36      	lsrs	r6, r6, #16
 80018be:	4252      	negs	r2, r2
 80018c0:	4264      	negs	r4, r4
 80018c2:	19bf      	adds	r7, r7, r6
 80018c4:	4322      	orrs	r2, r4
 80018c6:	18bf      	adds	r7, r7, r2
 80018c8:	4662      	mov	r2, ip
 80018ca:	1838      	adds	r0, r7, r0
 80018cc:	0243      	lsls	r3, r0, #9
 80018ce:	0dd2      	lsrs	r2, r2, #23
 80018d0:	9903      	ldr	r1, [sp, #12]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	026a      	lsls	r2, r5, #9
 80018d6:	430a      	orrs	r2, r1
 80018d8:	1e50      	subs	r0, r2, #1
 80018da:	4182      	sbcs	r2, r0
 80018dc:	4661      	mov	r1, ip
 80018de:	0ded      	lsrs	r5, r5, #23
 80018e0:	432a      	orrs	r2, r5
 80018e2:	024e      	lsls	r6, r1, #9
 80018e4:	4332      	orrs	r2, r6
 80018e6:	01d9      	lsls	r1, r3, #7
 80018e8:	d400      	bmi.n	80018ec <__aeabi_dmul+0x31c>
 80018ea:	e0b3      	b.n	8001a54 <__aeabi_dmul+0x484>
 80018ec:	2601      	movs	r6, #1
 80018ee:	0850      	lsrs	r0, r2, #1
 80018f0:	4032      	ands	r2, r6
 80018f2:	4302      	orrs	r2, r0
 80018f4:	07de      	lsls	r6, r3, #31
 80018f6:	4332      	orrs	r2, r6
 80018f8:	085b      	lsrs	r3, r3, #1
 80018fa:	4c22      	ldr	r4, [pc, #136]	; (8001984 <__aeabi_dmul+0x3b4>)
 80018fc:	4454      	add	r4, sl
 80018fe:	2c00      	cmp	r4, #0
 8001900:	dd62      	ble.n	80019c8 <__aeabi_dmul+0x3f8>
 8001902:	0751      	lsls	r1, r2, #29
 8001904:	d009      	beq.n	800191a <__aeabi_dmul+0x34a>
 8001906:	200f      	movs	r0, #15
 8001908:	4010      	ands	r0, r2
 800190a:	2804      	cmp	r0, #4
 800190c:	d005      	beq.n	800191a <__aeabi_dmul+0x34a>
 800190e:	1d10      	adds	r0, r2, #4
 8001910:	4290      	cmp	r0, r2
 8001912:	4192      	sbcs	r2, r2
 8001914:	4252      	negs	r2, r2
 8001916:	189b      	adds	r3, r3, r2
 8001918:	0002      	movs	r2, r0
 800191a:	01d9      	lsls	r1, r3, #7
 800191c:	d504      	bpl.n	8001928 <__aeabi_dmul+0x358>
 800191e:	2480      	movs	r4, #128	; 0x80
 8001920:	4819      	ldr	r0, [pc, #100]	; (8001988 <__aeabi_dmul+0x3b8>)
 8001922:	00e4      	lsls	r4, r4, #3
 8001924:	4003      	ands	r3, r0
 8001926:	4454      	add	r4, sl
 8001928:	4818      	ldr	r0, [pc, #96]	; (800198c <__aeabi_dmul+0x3bc>)
 800192a:	4284      	cmp	r4, r0
 800192c:	dd00      	ble.n	8001930 <__aeabi_dmul+0x360>
 800192e:	e727      	b.n	8001780 <__aeabi_dmul+0x1b0>
 8001930:	075e      	lsls	r6, r3, #29
 8001932:	025b      	lsls	r3, r3, #9
 8001934:	08d2      	lsrs	r2, r2, #3
 8001936:	0b1f      	lsrs	r7, r3, #12
 8001938:	0563      	lsls	r3, r4, #21
 800193a:	4316      	orrs	r6, r2
 800193c:	0d5b      	lsrs	r3, r3, #21
 800193e:	e6b2      	b.n	80016a6 <__aeabi_dmul+0xd6>
 8001940:	2300      	movs	r3, #0
 8001942:	4699      	mov	r9, r3
 8001944:	3301      	adds	r3, #1
 8001946:	2704      	movs	r7, #4
 8001948:	2600      	movs	r6, #0
 800194a:	469b      	mov	fp, r3
 800194c:	e664      	b.n	8001618 <__aeabi_dmul+0x48>
 800194e:	2303      	movs	r3, #3
 8001950:	9701      	str	r7, [sp, #4]
 8001952:	4681      	mov	r9, r0
 8001954:	270c      	movs	r7, #12
 8001956:	469b      	mov	fp, r3
 8001958:	e65e      	b.n	8001618 <__aeabi_dmul+0x48>
 800195a:	2201      	movs	r2, #1
 800195c:	2001      	movs	r0, #1
 800195e:	4317      	orrs	r7, r2
 8001960:	2200      	movs	r2, #0
 8001962:	e676      	b.n	8001652 <__aeabi_dmul+0x82>
 8001964:	2303      	movs	r3, #3
 8001966:	2003      	movs	r0, #3
 8001968:	431f      	orrs	r7, r3
 800196a:	4643      	mov	r3, r8
 800196c:	e671      	b.n	8001652 <__aeabi_dmul+0x82>
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	000007ff 	.word	0x000007ff
 8001974:	fffffc01 	.word	0xfffffc01
 8001978:	0800a72c 	.word	0x0800a72c
 800197c:	800fffff 	.word	0x800fffff
 8001980:	fffffc0d 	.word	0xfffffc0d
 8001984:	000003ff 	.word	0x000003ff
 8001988:	feffffff 	.word	0xfeffffff
 800198c:	000007fe 	.word	0x000007fe
 8001990:	2300      	movs	r3, #0
 8001992:	2780      	movs	r7, #128	; 0x80
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	033f      	lsls	r7, r7, #12
 8001998:	2600      	movs	r6, #0
 800199a:	4b43      	ldr	r3, [pc, #268]	; (8001aa8 <__aeabi_dmul+0x4d8>)
 800199c:	e683      	b.n	80016a6 <__aeabi_dmul+0xd6>
 800199e:	9b01      	ldr	r3, [sp, #4]
 80019a0:	0032      	movs	r2, r6
 80019a2:	46a4      	mov	ip, r4
 80019a4:	4658      	mov	r0, fp
 80019a6:	e670      	b.n	800168a <__aeabi_dmul+0xba>
 80019a8:	46ac      	mov	ip, r5
 80019aa:	e66e      	b.n	800168a <__aeabi_dmul+0xba>
 80019ac:	2780      	movs	r7, #128	; 0x80
 80019ae:	9901      	ldr	r1, [sp, #4]
 80019b0:	033f      	lsls	r7, r7, #12
 80019b2:	4239      	tst	r1, r7
 80019b4:	d02d      	beq.n	8001a12 <__aeabi_dmul+0x442>
 80019b6:	423b      	tst	r3, r7
 80019b8:	d12b      	bne.n	8001a12 <__aeabi_dmul+0x442>
 80019ba:	431f      	orrs	r7, r3
 80019bc:	033f      	lsls	r7, r7, #12
 80019be:	0b3f      	lsrs	r7, r7, #12
 80019c0:	9500      	str	r5, [sp, #0]
 80019c2:	0016      	movs	r6, r2
 80019c4:	4b38      	ldr	r3, [pc, #224]	; (8001aa8 <__aeabi_dmul+0x4d8>)
 80019c6:	e66e      	b.n	80016a6 <__aeabi_dmul+0xd6>
 80019c8:	2501      	movs	r5, #1
 80019ca:	1b2d      	subs	r5, r5, r4
 80019cc:	2d38      	cmp	r5, #56	; 0x38
 80019ce:	dd00      	ble.n	80019d2 <__aeabi_dmul+0x402>
 80019d0:	e666      	b.n	80016a0 <__aeabi_dmul+0xd0>
 80019d2:	2d1f      	cmp	r5, #31
 80019d4:	dc40      	bgt.n	8001a58 <__aeabi_dmul+0x488>
 80019d6:	4835      	ldr	r0, [pc, #212]	; (8001aac <__aeabi_dmul+0x4dc>)
 80019d8:	001c      	movs	r4, r3
 80019da:	4450      	add	r0, sl
 80019dc:	0016      	movs	r6, r2
 80019de:	4082      	lsls	r2, r0
 80019e0:	4084      	lsls	r4, r0
 80019e2:	40ee      	lsrs	r6, r5
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	4182      	sbcs	r2, r0
 80019e8:	4334      	orrs	r4, r6
 80019ea:	4314      	orrs	r4, r2
 80019ec:	40eb      	lsrs	r3, r5
 80019ee:	0762      	lsls	r2, r4, #29
 80019f0:	d009      	beq.n	8001a06 <__aeabi_dmul+0x436>
 80019f2:	220f      	movs	r2, #15
 80019f4:	4022      	ands	r2, r4
 80019f6:	2a04      	cmp	r2, #4
 80019f8:	d005      	beq.n	8001a06 <__aeabi_dmul+0x436>
 80019fa:	0022      	movs	r2, r4
 80019fc:	1d14      	adds	r4, r2, #4
 80019fe:	4294      	cmp	r4, r2
 8001a00:	4180      	sbcs	r0, r0
 8001a02:	4240      	negs	r0, r0
 8001a04:	181b      	adds	r3, r3, r0
 8001a06:	021a      	lsls	r2, r3, #8
 8001a08:	d53e      	bpl.n	8001a88 <__aeabi_dmul+0x4b8>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	2700      	movs	r7, #0
 8001a0e:	2600      	movs	r6, #0
 8001a10:	e649      	b.n	80016a6 <__aeabi_dmul+0xd6>
 8001a12:	2780      	movs	r7, #128	; 0x80
 8001a14:	9b01      	ldr	r3, [sp, #4]
 8001a16:	033f      	lsls	r7, r7, #12
 8001a18:	431f      	orrs	r7, r3
 8001a1a:	033f      	lsls	r7, r7, #12
 8001a1c:	0b3f      	lsrs	r7, r7, #12
 8001a1e:	9400      	str	r4, [sp, #0]
 8001a20:	4b21      	ldr	r3, [pc, #132]	; (8001aa8 <__aeabi_dmul+0x4d8>)
 8001a22:	e640      	b.n	80016a6 <__aeabi_dmul+0xd6>
 8001a24:	0003      	movs	r3, r0
 8001a26:	465a      	mov	r2, fp
 8001a28:	3b28      	subs	r3, #40	; 0x28
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	2600      	movs	r6, #0
 8001a2e:	9201      	str	r2, [sp, #4]
 8001a30:	e66d      	b.n	800170e <__aeabi_dmul+0x13e>
 8001a32:	4658      	mov	r0, fp
 8001a34:	f000 fd1a 	bl	800246c <__clzsi2>
 8001a38:	3020      	adds	r0, #32
 8001a3a:	e657      	b.n	80016ec <__aeabi_dmul+0x11c>
 8001a3c:	0003      	movs	r3, r0
 8001a3e:	4652      	mov	r2, sl
 8001a40:	3b28      	subs	r3, #40	; 0x28
 8001a42:	409a      	lsls	r2, r3
 8001a44:	0013      	movs	r3, r2
 8001a46:	2200      	movs	r2, #0
 8001a48:	e693      	b.n	8001772 <__aeabi_dmul+0x1a2>
 8001a4a:	4650      	mov	r0, sl
 8001a4c:	f000 fd0e 	bl	800246c <__clzsi2>
 8001a50:	3020      	adds	r0, #32
 8001a52:	e67b      	b.n	800174c <__aeabi_dmul+0x17c>
 8001a54:	46ca      	mov	sl, r9
 8001a56:	e750      	b.n	80018fa <__aeabi_dmul+0x32a>
 8001a58:	201f      	movs	r0, #31
 8001a5a:	001e      	movs	r6, r3
 8001a5c:	4240      	negs	r0, r0
 8001a5e:	1b04      	subs	r4, r0, r4
 8001a60:	40e6      	lsrs	r6, r4
 8001a62:	2d20      	cmp	r5, #32
 8001a64:	d003      	beq.n	8001a6e <__aeabi_dmul+0x49e>
 8001a66:	4c12      	ldr	r4, [pc, #72]	; (8001ab0 <__aeabi_dmul+0x4e0>)
 8001a68:	4454      	add	r4, sl
 8001a6a:	40a3      	lsls	r3, r4
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	1e50      	subs	r0, r2, #1
 8001a70:	4182      	sbcs	r2, r0
 8001a72:	4332      	orrs	r2, r6
 8001a74:	2607      	movs	r6, #7
 8001a76:	2700      	movs	r7, #0
 8001a78:	4016      	ands	r6, r2
 8001a7a:	d009      	beq.n	8001a90 <__aeabi_dmul+0x4c0>
 8001a7c:	200f      	movs	r0, #15
 8001a7e:	2300      	movs	r3, #0
 8001a80:	4010      	ands	r0, r2
 8001a82:	0014      	movs	r4, r2
 8001a84:	2804      	cmp	r0, #4
 8001a86:	d1b9      	bne.n	80019fc <__aeabi_dmul+0x42c>
 8001a88:	0022      	movs	r2, r4
 8001a8a:	075e      	lsls	r6, r3, #29
 8001a8c:	025b      	lsls	r3, r3, #9
 8001a8e:	0b1f      	lsrs	r7, r3, #12
 8001a90:	08d2      	lsrs	r2, r2, #3
 8001a92:	4316      	orrs	r6, r2
 8001a94:	2300      	movs	r3, #0
 8001a96:	e606      	b.n	80016a6 <__aeabi_dmul+0xd6>
 8001a98:	2780      	movs	r7, #128	; 0x80
 8001a9a:	033f      	lsls	r7, r7, #12
 8001a9c:	431f      	orrs	r7, r3
 8001a9e:	033f      	lsls	r7, r7, #12
 8001aa0:	0b3f      	lsrs	r7, r7, #12
 8001aa2:	0016      	movs	r6, r2
 8001aa4:	4b00      	ldr	r3, [pc, #0]	; (8001aa8 <__aeabi_dmul+0x4d8>)
 8001aa6:	e5fe      	b.n	80016a6 <__aeabi_dmul+0xd6>
 8001aa8:	000007ff 	.word	0x000007ff
 8001aac:	0000041e 	.word	0x0000041e
 8001ab0:	0000043e 	.word	0x0000043e

08001ab4 <__aeabi_dsub>:
 8001ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ab6:	4657      	mov	r7, sl
 8001ab8:	464e      	mov	r6, r9
 8001aba:	4645      	mov	r5, r8
 8001abc:	46de      	mov	lr, fp
 8001abe:	000c      	movs	r4, r1
 8001ac0:	0309      	lsls	r1, r1, #12
 8001ac2:	b5e0      	push	{r5, r6, r7, lr}
 8001ac4:	0a49      	lsrs	r1, r1, #9
 8001ac6:	0f46      	lsrs	r6, r0, #29
 8001ac8:	005f      	lsls	r7, r3, #1
 8001aca:	4331      	orrs	r1, r6
 8001acc:	031e      	lsls	r6, r3, #12
 8001ace:	0fdb      	lsrs	r3, r3, #31
 8001ad0:	0a76      	lsrs	r6, r6, #9
 8001ad2:	469b      	mov	fp, r3
 8001ad4:	0f53      	lsrs	r3, r2, #29
 8001ad6:	4333      	orrs	r3, r6
 8001ad8:	4ec8      	ldr	r6, [pc, #800]	; (8001dfc <__aeabi_dsub+0x348>)
 8001ada:	0065      	lsls	r5, r4, #1
 8001adc:	00c0      	lsls	r0, r0, #3
 8001ade:	0fe4      	lsrs	r4, r4, #31
 8001ae0:	00d2      	lsls	r2, r2, #3
 8001ae2:	0d6d      	lsrs	r5, r5, #21
 8001ae4:	46a2      	mov	sl, r4
 8001ae6:	4681      	mov	r9, r0
 8001ae8:	0d7f      	lsrs	r7, r7, #21
 8001aea:	469c      	mov	ip, r3
 8001aec:	4690      	mov	r8, r2
 8001aee:	42b7      	cmp	r7, r6
 8001af0:	d100      	bne.n	8001af4 <__aeabi_dsub+0x40>
 8001af2:	e0b9      	b.n	8001c68 <__aeabi_dsub+0x1b4>
 8001af4:	465b      	mov	r3, fp
 8001af6:	2601      	movs	r6, #1
 8001af8:	4073      	eors	r3, r6
 8001afa:	469b      	mov	fp, r3
 8001afc:	1bee      	subs	r6, r5, r7
 8001afe:	45a3      	cmp	fp, r4
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dsub+0x50>
 8001b02:	e083      	b.n	8001c0c <__aeabi_dsub+0x158>
 8001b04:	2e00      	cmp	r6, #0
 8001b06:	dd63      	ble.n	8001bd0 <__aeabi_dsub+0x11c>
 8001b08:	2f00      	cmp	r7, #0
 8001b0a:	d000      	beq.n	8001b0e <__aeabi_dsub+0x5a>
 8001b0c:	e0b1      	b.n	8001c72 <__aeabi_dsub+0x1be>
 8001b0e:	4663      	mov	r3, ip
 8001b10:	4313      	orrs	r3, r2
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dsub+0x62>
 8001b14:	e123      	b.n	8001d5e <__aeabi_dsub+0x2aa>
 8001b16:	1e73      	subs	r3, r6, #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d000      	beq.n	8001b1e <__aeabi_dsub+0x6a>
 8001b1c:	e1ba      	b.n	8001e94 <__aeabi_dsub+0x3e0>
 8001b1e:	1a86      	subs	r6, r0, r2
 8001b20:	4663      	mov	r3, ip
 8001b22:	42b0      	cmp	r0, r6
 8001b24:	4180      	sbcs	r0, r0
 8001b26:	2501      	movs	r5, #1
 8001b28:	1ac9      	subs	r1, r1, r3
 8001b2a:	4240      	negs	r0, r0
 8001b2c:	1a09      	subs	r1, r1, r0
 8001b2e:	020b      	lsls	r3, r1, #8
 8001b30:	d400      	bmi.n	8001b34 <__aeabi_dsub+0x80>
 8001b32:	e147      	b.n	8001dc4 <__aeabi_dsub+0x310>
 8001b34:	0249      	lsls	r1, r1, #9
 8001b36:	0a4b      	lsrs	r3, r1, #9
 8001b38:	4698      	mov	r8, r3
 8001b3a:	4643      	mov	r3, r8
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dsub+0x8e>
 8001b40:	e189      	b.n	8001e56 <__aeabi_dsub+0x3a2>
 8001b42:	4640      	mov	r0, r8
 8001b44:	f000 fc92 	bl	800246c <__clzsi2>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	3b08      	subs	r3, #8
 8001b4c:	2b1f      	cmp	r3, #31
 8001b4e:	dd00      	ble.n	8001b52 <__aeabi_dsub+0x9e>
 8001b50:	e17c      	b.n	8001e4c <__aeabi_dsub+0x398>
 8001b52:	2220      	movs	r2, #32
 8001b54:	0030      	movs	r0, r6
 8001b56:	1ad2      	subs	r2, r2, r3
 8001b58:	4641      	mov	r1, r8
 8001b5a:	40d0      	lsrs	r0, r2
 8001b5c:	4099      	lsls	r1, r3
 8001b5e:	0002      	movs	r2, r0
 8001b60:	409e      	lsls	r6, r3
 8001b62:	430a      	orrs	r2, r1
 8001b64:	429d      	cmp	r5, r3
 8001b66:	dd00      	ble.n	8001b6a <__aeabi_dsub+0xb6>
 8001b68:	e16a      	b.n	8001e40 <__aeabi_dsub+0x38c>
 8001b6a:	1b5d      	subs	r5, r3, r5
 8001b6c:	1c6b      	adds	r3, r5, #1
 8001b6e:	2b1f      	cmp	r3, #31
 8001b70:	dd00      	ble.n	8001b74 <__aeabi_dsub+0xc0>
 8001b72:	e194      	b.n	8001e9e <__aeabi_dsub+0x3ea>
 8001b74:	2120      	movs	r1, #32
 8001b76:	0010      	movs	r0, r2
 8001b78:	0035      	movs	r5, r6
 8001b7a:	1ac9      	subs	r1, r1, r3
 8001b7c:	408e      	lsls	r6, r1
 8001b7e:	40da      	lsrs	r2, r3
 8001b80:	4088      	lsls	r0, r1
 8001b82:	40dd      	lsrs	r5, r3
 8001b84:	1e71      	subs	r1, r6, #1
 8001b86:	418e      	sbcs	r6, r1
 8001b88:	0011      	movs	r1, r2
 8001b8a:	2207      	movs	r2, #7
 8001b8c:	4328      	orrs	r0, r5
 8001b8e:	2500      	movs	r5, #0
 8001b90:	4306      	orrs	r6, r0
 8001b92:	4032      	ands	r2, r6
 8001b94:	2a00      	cmp	r2, #0
 8001b96:	d009      	beq.n	8001bac <__aeabi_dsub+0xf8>
 8001b98:	230f      	movs	r3, #15
 8001b9a:	4033      	ands	r3, r6
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d005      	beq.n	8001bac <__aeabi_dsub+0xf8>
 8001ba0:	1d33      	adds	r3, r6, #4
 8001ba2:	42b3      	cmp	r3, r6
 8001ba4:	41b6      	sbcs	r6, r6
 8001ba6:	4276      	negs	r6, r6
 8001ba8:	1989      	adds	r1, r1, r6
 8001baa:	001e      	movs	r6, r3
 8001bac:	020b      	lsls	r3, r1, #8
 8001bae:	d400      	bmi.n	8001bb2 <__aeabi_dsub+0xfe>
 8001bb0:	e23d      	b.n	800202e <__aeabi_dsub+0x57a>
 8001bb2:	1c6a      	adds	r2, r5, #1
 8001bb4:	4b91      	ldr	r3, [pc, #580]	; (8001dfc <__aeabi_dsub+0x348>)
 8001bb6:	0555      	lsls	r5, r2, #21
 8001bb8:	0d6d      	lsrs	r5, r5, #21
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_dsub+0x10c>
 8001bbe:	e119      	b.n	8001df4 <__aeabi_dsub+0x340>
 8001bc0:	4a8f      	ldr	r2, [pc, #572]	; (8001e00 <__aeabi_dsub+0x34c>)
 8001bc2:	08f6      	lsrs	r6, r6, #3
 8001bc4:	400a      	ands	r2, r1
 8001bc6:	0757      	lsls	r7, r2, #29
 8001bc8:	0252      	lsls	r2, r2, #9
 8001bca:	4337      	orrs	r7, r6
 8001bcc:	0b12      	lsrs	r2, r2, #12
 8001bce:	e09b      	b.n	8001d08 <__aeabi_dsub+0x254>
 8001bd0:	2e00      	cmp	r6, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dsub+0x122>
 8001bd4:	e0c5      	b.n	8001d62 <__aeabi_dsub+0x2ae>
 8001bd6:	1c6e      	adds	r6, r5, #1
 8001bd8:	0576      	lsls	r6, r6, #21
 8001bda:	0d76      	lsrs	r6, r6, #21
 8001bdc:	2e01      	cmp	r6, #1
 8001bde:	dc00      	bgt.n	8001be2 <__aeabi_dsub+0x12e>
 8001be0:	e148      	b.n	8001e74 <__aeabi_dsub+0x3c0>
 8001be2:	4667      	mov	r7, ip
 8001be4:	1a86      	subs	r6, r0, r2
 8001be6:	1bcb      	subs	r3, r1, r7
 8001be8:	42b0      	cmp	r0, r6
 8001bea:	41bf      	sbcs	r7, r7
 8001bec:	427f      	negs	r7, r7
 8001bee:	46b8      	mov	r8, r7
 8001bf0:	001f      	movs	r7, r3
 8001bf2:	4643      	mov	r3, r8
 8001bf4:	1aff      	subs	r7, r7, r3
 8001bf6:	003b      	movs	r3, r7
 8001bf8:	46b8      	mov	r8, r7
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	d500      	bpl.n	8001c00 <__aeabi_dsub+0x14c>
 8001bfe:	e15f      	b.n	8001ec0 <__aeabi_dsub+0x40c>
 8001c00:	4337      	orrs	r7, r6
 8001c02:	d19a      	bne.n	8001b3a <__aeabi_dsub+0x86>
 8001c04:	2200      	movs	r2, #0
 8001c06:	2400      	movs	r4, #0
 8001c08:	2500      	movs	r5, #0
 8001c0a:	e079      	b.n	8001d00 <__aeabi_dsub+0x24c>
 8001c0c:	2e00      	cmp	r6, #0
 8001c0e:	dc00      	bgt.n	8001c12 <__aeabi_dsub+0x15e>
 8001c10:	e0fa      	b.n	8001e08 <__aeabi_dsub+0x354>
 8001c12:	2f00      	cmp	r7, #0
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x164>
 8001c16:	e08d      	b.n	8001d34 <__aeabi_dsub+0x280>
 8001c18:	4b78      	ldr	r3, [pc, #480]	; (8001dfc <__aeabi_dsub+0x348>)
 8001c1a:	429d      	cmp	r5, r3
 8001c1c:	d067      	beq.n	8001cee <__aeabi_dsub+0x23a>
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	4667      	mov	r7, ip
 8001c22:	041b      	lsls	r3, r3, #16
 8001c24:	431f      	orrs	r7, r3
 8001c26:	46bc      	mov	ip, r7
 8001c28:	2e38      	cmp	r6, #56	; 0x38
 8001c2a:	dc00      	bgt.n	8001c2e <__aeabi_dsub+0x17a>
 8001c2c:	e152      	b.n	8001ed4 <__aeabi_dsub+0x420>
 8001c2e:	4663      	mov	r3, ip
 8001c30:	4313      	orrs	r3, r2
 8001c32:	1e5a      	subs	r2, r3, #1
 8001c34:	4193      	sbcs	r3, r2
 8001c36:	181e      	adds	r6, r3, r0
 8001c38:	4286      	cmp	r6, r0
 8001c3a:	4180      	sbcs	r0, r0
 8001c3c:	4240      	negs	r0, r0
 8001c3e:	1809      	adds	r1, r1, r0
 8001c40:	020b      	lsls	r3, r1, #8
 8001c42:	d400      	bmi.n	8001c46 <__aeabi_dsub+0x192>
 8001c44:	e0be      	b.n	8001dc4 <__aeabi_dsub+0x310>
 8001c46:	4b6d      	ldr	r3, [pc, #436]	; (8001dfc <__aeabi_dsub+0x348>)
 8001c48:	3501      	adds	r5, #1
 8001c4a:	429d      	cmp	r5, r3
 8001c4c:	d100      	bne.n	8001c50 <__aeabi_dsub+0x19c>
 8001c4e:	e0d2      	b.n	8001df6 <__aeabi_dsub+0x342>
 8001c50:	4a6b      	ldr	r2, [pc, #428]	; (8001e00 <__aeabi_dsub+0x34c>)
 8001c52:	0873      	lsrs	r3, r6, #1
 8001c54:	400a      	ands	r2, r1
 8001c56:	2101      	movs	r1, #1
 8001c58:	400e      	ands	r6, r1
 8001c5a:	431e      	orrs	r6, r3
 8001c5c:	0851      	lsrs	r1, r2, #1
 8001c5e:	07d3      	lsls	r3, r2, #31
 8001c60:	2207      	movs	r2, #7
 8001c62:	431e      	orrs	r6, r3
 8001c64:	4032      	ands	r2, r6
 8001c66:	e795      	b.n	8001b94 <__aeabi_dsub+0xe0>
 8001c68:	001e      	movs	r6, r3
 8001c6a:	4316      	orrs	r6, r2
 8001c6c:	d000      	beq.n	8001c70 <__aeabi_dsub+0x1bc>
 8001c6e:	e745      	b.n	8001afc <__aeabi_dsub+0x48>
 8001c70:	e740      	b.n	8001af4 <__aeabi_dsub+0x40>
 8001c72:	4b62      	ldr	r3, [pc, #392]	; (8001dfc <__aeabi_dsub+0x348>)
 8001c74:	429d      	cmp	r5, r3
 8001c76:	d03a      	beq.n	8001cee <__aeabi_dsub+0x23a>
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	4667      	mov	r7, ip
 8001c7c:	041b      	lsls	r3, r3, #16
 8001c7e:	431f      	orrs	r7, r3
 8001c80:	46bc      	mov	ip, r7
 8001c82:	2e38      	cmp	r6, #56	; 0x38
 8001c84:	dd00      	ble.n	8001c88 <__aeabi_dsub+0x1d4>
 8001c86:	e0eb      	b.n	8001e60 <__aeabi_dsub+0x3ac>
 8001c88:	2e1f      	cmp	r6, #31
 8001c8a:	dc00      	bgt.n	8001c8e <__aeabi_dsub+0x1da>
 8001c8c:	e13a      	b.n	8001f04 <__aeabi_dsub+0x450>
 8001c8e:	0033      	movs	r3, r6
 8001c90:	4667      	mov	r7, ip
 8001c92:	3b20      	subs	r3, #32
 8001c94:	40df      	lsrs	r7, r3
 8001c96:	003b      	movs	r3, r7
 8001c98:	2e20      	cmp	r6, #32
 8001c9a:	d005      	beq.n	8001ca8 <__aeabi_dsub+0x1f4>
 8001c9c:	2740      	movs	r7, #64	; 0x40
 8001c9e:	1bbf      	subs	r7, r7, r6
 8001ca0:	4666      	mov	r6, ip
 8001ca2:	40be      	lsls	r6, r7
 8001ca4:	4332      	orrs	r2, r6
 8001ca6:	4690      	mov	r8, r2
 8001ca8:	4646      	mov	r6, r8
 8001caa:	1e72      	subs	r2, r6, #1
 8001cac:	4196      	sbcs	r6, r2
 8001cae:	4333      	orrs	r3, r6
 8001cb0:	e0da      	b.n	8001e68 <__aeabi_dsub+0x3b4>
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_dsub+0x204>
 8001cb6:	e214      	b.n	80020e2 <__aeabi_dsub+0x62e>
 8001cb8:	4663      	mov	r3, ip
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x20c>
 8001cbe:	e168      	b.n	8001f92 <__aeabi_dsub+0x4de>
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	074e      	lsls	r6, r1, #29
 8001cc4:	08c0      	lsrs	r0, r0, #3
 8001cc6:	08c9      	lsrs	r1, r1, #3
 8001cc8:	031b      	lsls	r3, r3, #12
 8001cca:	4306      	orrs	r6, r0
 8001ccc:	4219      	tst	r1, r3
 8001cce:	d008      	beq.n	8001ce2 <__aeabi_dsub+0x22e>
 8001cd0:	4660      	mov	r0, ip
 8001cd2:	08c0      	lsrs	r0, r0, #3
 8001cd4:	4218      	tst	r0, r3
 8001cd6:	d104      	bne.n	8001ce2 <__aeabi_dsub+0x22e>
 8001cd8:	4663      	mov	r3, ip
 8001cda:	0001      	movs	r1, r0
 8001cdc:	08d2      	lsrs	r2, r2, #3
 8001cde:	075e      	lsls	r6, r3, #29
 8001ce0:	4316      	orrs	r6, r2
 8001ce2:	00f3      	lsls	r3, r6, #3
 8001ce4:	4699      	mov	r9, r3
 8001ce6:	00c9      	lsls	r1, r1, #3
 8001ce8:	0f72      	lsrs	r2, r6, #29
 8001cea:	4d44      	ldr	r5, [pc, #272]	; (8001dfc <__aeabi_dsub+0x348>)
 8001cec:	4311      	orrs	r1, r2
 8001cee:	464b      	mov	r3, r9
 8001cf0:	08de      	lsrs	r6, r3, #3
 8001cf2:	4b42      	ldr	r3, [pc, #264]	; (8001dfc <__aeabi_dsub+0x348>)
 8001cf4:	074f      	lsls	r7, r1, #29
 8001cf6:	4337      	orrs	r7, r6
 8001cf8:	08ca      	lsrs	r2, r1, #3
 8001cfa:	429d      	cmp	r5, r3
 8001cfc:	d100      	bne.n	8001d00 <__aeabi_dsub+0x24c>
 8001cfe:	e06e      	b.n	8001dde <__aeabi_dsub+0x32a>
 8001d00:	0312      	lsls	r2, r2, #12
 8001d02:	056d      	lsls	r5, r5, #21
 8001d04:	0b12      	lsrs	r2, r2, #12
 8001d06:	0d6d      	lsrs	r5, r5, #21
 8001d08:	2100      	movs	r1, #0
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	0b13      	lsrs	r3, r2, #12
 8001d0e:	0d0a      	lsrs	r2, r1, #20
 8001d10:	0512      	lsls	r2, r2, #20
 8001d12:	431a      	orrs	r2, r3
 8001d14:	4b3b      	ldr	r3, [pc, #236]	; (8001e04 <__aeabi_dsub+0x350>)
 8001d16:	052d      	lsls	r5, r5, #20
 8001d18:	4013      	ands	r3, r2
 8001d1a:	432b      	orrs	r3, r5
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	07e4      	lsls	r4, r4, #31
 8001d20:	085b      	lsrs	r3, r3, #1
 8001d22:	4323      	orrs	r3, r4
 8001d24:	0038      	movs	r0, r7
 8001d26:	0019      	movs	r1, r3
 8001d28:	bc3c      	pop	{r2, r3, r4, r5}
 8001d2a:	4690      	mov	r8, r2
 8001d2c:	4699      	mov	r9, r3
 8001d2e:	46a2      	mov	sl, r4
 8001d30:	46ab      	mov	fp, r5
 8001d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d34:	4663      	mov	r3, ip
 8001d36:	4313      	orrs	r3, r2
 8001d38:	d011      	beq.n	8001d5e <__aeabi_dsub+0x2aa>
 8001d3a:	1e73      	subs	r3, r6, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d000      	beq.n	8001d42 <__aeabi_dsub+0x28e>
 8001d40:	e107      	b.n	8001f52 <__aeabi_dsub+0x49e>
 8001d42:	1886      	adds	r6, r0, r2
 8001d44:	4286      	cmp	r6, r0
 8001d46:	4180      	sbcs	r0, r0
 8001d48:	4461      	add	r1, ip
 8001d4a:	4240      	negs	r0, r0
 8001d4c:	1809      	adds	r1, r1, r0
 8001d4e:	2501      	movs	r5, #1
 8001d50:	020b      	lsls	r3, r1, #8
 8001d52:	d537      	bpl.n	8001dc4 <__aeabi_dsub+0x310>
 8001d54:	2502      	movs	r5, #2
 8001d56:	e77b      	b.n	8001c50 <__aeabi_dsub+0x19c>
 8001d58:	003e      	movs	r6, r7
 8001d5a:	4661      	mov	r1, ip
 8001d5c:	4691      	mov	r9, r2
 8001d5e:	0035      	movs	r5, r6
 8001d60:	e7c5      	b.n	8001cee <__aeabi_dsub+0x23a>
 8001d62:	465c      	mov	r4, fp
 8001d64:	2d00      	cmp	r5, #0
 8001d66:	d000      	beq.n	8001d6a <__aeabi_dsub+0x2b6>
 8001d68:	e0e1      	b.n	8001f2e <__aeabi_dsub+0x47a>
 8001d6a:	000b      	movs	r3, r1
 8001d6c:	4303      	orrs	r3, r0
 8001d6e:	d0f3      	beq.n	8001d58 <__aeabi_dsub+0x2a4>
 8001d70:	1c73      	adds	r3, r6, #1
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x2c2>
 8001d74:	e1ac      	b.n	80020d0 <__aeabi_dsub+0x61c>
 8001d76:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <__aeabi_dsub+0x348>)
 8001d78:	429f      	cmp	r7, r3
 8001d7a:	d100      	bne.n	8001d7e <__aeabi_dsub+0x2ca>
 8001d7c:	e13a      	b.n	8001ff4 <__aeabi_dsub+0x540>
 8001d7e:	43f3      	mvns	r3, r6
 8001d80:	2b38      	cmp	r3, #56	; 0x38
 8001d82:	dd00      	ble.n	8001d86 <__aeabi_dsub+0x2d2>
 8001d84:	e16f      	b.n	8002066 <__aeabi_dsub+0x5b2>
 8001d86:	2b1f      	cmp	r3, #31
 8001d88:	dd00      	ble.n	8001d8c <__aeabi_dsub+0x2d8>
 8001d8a:	e18c      	b.n	80020a6 <__aeabi_dsub+0x5f2>
 8001d8c:	2520      	movs	r5, #32
 8001d8e:	000e      	movs	r6, r1
 8001d90:	1aed      	subs	r5, r5, r3
 8001d92:	40ae      	lsls	r6, r5
 8001d94:	46b0      	mov	r8, r6
 8001d96:	0006      	movs	r6, r0
 8001d98:	46aa      	mov	sl, r5
 8001d9a:	40de      	lsrs	r6, r3
 8001d9c:	4645      	mov	r5, r8
 8001d9e:	4335      	orrs	r5, r6
 8001da0:	002e      	movs	r6, r5
 8001da2:	4655      	mov	r5, sl
 8001da4:	40d9      	lsrs	r1, r3
 8001da6:	40a8      	lsls	r0, r5
 8001da8:	4663      	mov	r3, ip
 8001daa:	1e45      	subs	r5, r0, #1
 8001dac:	41a8      	sbcs	r0, r5
 8001dae:	1a5b      	subs	r3, r3, r1
 8001db0:	469c      	mov	ip, r3
 8001db2:	4330      	orrs	r0, r6
 8001db4:	1a16      	subs	r6, r2, r0
 8001db6:	42b2      	cmp	r2, r6
 8001db8:	4192      	sbcs	r2, r2
 8001dba:	4663      	mov	r3, ip
 8001dbc:	4252      	negs	r2, r2
 8001dbe:	1a99      	subs	r1, r3, r2
 8001dc0:	003d      	movs	r5, r7
 8001dc2:	e6b4      	b.n	8001b2e <__aeabi_dsub+0x7a>
 8001dc4:	2207      	movs	r2, #7
 8001dc6:	4032      	ands	r2, r6
 8001dc8:	2a00      	cmp	r2, #0
 8001dca:	d000      	beq.n	8001dce <__aeabi_dsub+0x31a>
 8001dcc:	e6e4      	b.n	8001b98 <__aeabi_dsub+0xe4>
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <__aeabi_dsub+0x348>)
 8001dd0:	08f6      	lsrs	r6, r6, #3
 8001dd2:	074f      	lsls	r7, r1, #29
 8001dd4:	4337      	orrs	r7, r6
 8001dd6:	08ca      	lsrs	r2, r1, #3
 8001dd8:	429d      	cmp	r5, r3
 8001dda:	d000      	beq.n	8001dde <__aeabi_dsub+0x32a>
 8001ddc:	e790      	b.n	8001d00 <__aeabi_dsub+0x24c>
 8001dde:	003b      	movs	r3, r7
 8001de0:	4313      	orrs	r3, r2
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x332>
 8001de4:	e1a6      	b.n	8002134 <__aeabi_dsub+0x680>
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	031b      	lsls	r3, r3, #12
 8001dea:	431a      	orrs	r2, r3
 8001dec:	0312      	lsls	r2, r2, #12
 8001dee:	0b12      	lsrs	r2, r2, #12
 8001df0:	4d02      	ldr	r5, [pc, #8]	; (8001dfc <__aeabi_dsub+0x348>)
 8001df2:	e789      	b.n	8001d08 <__aeabi_dsub+0x254>
 8001df4:	0015      	movs	r5, r2
 8001df6:	2200      	movs	r2, #0
 8001df8:	2700      	movs	r7, #0
 8001dfa:	e785      	b.n	8001d08 <__aeabi_dsub+0x254>
 8001dfc:	000007ff 	.word	0x000007ff
 8001e00:	ff7fffff 	.word	0xff7fffff
 8001e04:	800fffff 	.word	0x800fffff
 8001e08:	2e00      	cmp	r6, #0
 8001e0a:	d000      	beq.n	8001e0e <__aeabi_dsub+0x35a>
 8001e0c:	e0c7      	b.n	8001f9e <__aeabi_dsub+0x4ea>
 8001e0e:	1c6b      	adds	r3, r5, #1
 8001e10:	055e      	lsls	r6, r3, #21
 8001e12:	0d76      	lsrs	r6, r6, #21
 8001e14:	2e01      	cmp	r6, #1
 8001e16:	dc00      	bgt.n	8001e1a <__aeabi_dsub+0x366>
 8001e18:	e0f0      	b.n	8001ffc <__aeabi_dsub+0x548>
 8001e1a:	4dc8      	ldr	r5, [pc, #800]	; (800213c <__aeabi_dsub+0x688>)
 8001e1c:	42ab      	cmp	r3, r5
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x36e>
 8001e20:	e0b9      	b.n	8001f96 <__aeabi_dsub+0x4e2>
 8001e22:	1885      	adds	r5, r0, r2
 8001e24:	000a      	movs	r2, r1
 8001e26:	4285      	cmp	r5, r0
 8001e28:	4189      	sbcs	r1, r1
 8001e2a:	4462      	add	r2, ip
 8001e2c:	4249      	negs	r1, r1
 8001e2e:	1851      	adds	r1, r2, r1
 8001e30:	2207      	movs	r2, #7
 8001e32:	07ce      	lsls	r6, r1, #31
 8001e34:	086d      	lsrs	r5, r5, #1
 8001e36:	432e      	orrs	r6, r5
 8001e38:	0849      	lsrs	r1, r1, #1
 8001e3a:	4032      	ands	r2, r6
 8001e3c:	001d      	movs	r5, r3
 8001e3e:	e6a9      	b.n	8001b94 <__aeabi_dsub+0xe0>
 8001e40:	49bf      	ldr	r1, [pc, #764]	; (8002140 <__aeabi_dsub+0x68c>)
 8001e42:	1aed      	subs	r5, r5, r3
 8001e44:	4011      	ands	r1, r2
 8001e46:	2207      	movs	r2, #7
 8001e48:	4032      	ands	r2, r6
 8001e4a:	e6a3      	b.n	8001b94 <__aeabi_dsub+0xe0>
 8001e4c:	0032      	movs	r2, r6
 8001e4e:	3828      	subs	r0, #40	; 0x28
 8001e50:	4082      	lsls	r2, r0
 8001e52:	2600      	movs	r6, #0
 8001e54:	e686      	b.n	8001b64 <__aeabi_dsub+0xb0>
 8001e56:	0030      	movs	r0, r6
 8001e58:	f000 fb08 	bl	800246c <__clzsi2>
 8001e5c:	3020      	adds	r0, #32
 8001e5e:	e673      	b.n	8001b48 <__aeabi_dsub+0x94>
 8001e60:	4663      	mov	r3, ip
 8001e62:	4313      	orrs	r3, r2
 8001e64:	1e5a      	subs	r2, r3, #1
 8001e66:	4193      	sbcs	r3, r2
 8001e68:	1ac6      	subs	r6, r0, r3
 8001e6a:	42b0      	cmp	r0, r6
 8001e6c:	4180      	sbcs	r0, r0
 8001e6e:	4240      	negs	r0, r0
 8001e70:	1a09      	subs	r1, r1, r0
 8001e72:	e65c      	b.n	8001b2e <__aeabi_dsub+0x7a>
 8001e74:	000e      	movs	r6, r1
 8001e76:	4667      	mov	r7, ip
 8001e78:	4306      	orrs	r6, r0
 8001e7a:	4317      	orrs	r7, r2
 8001e7c:	2d00      	cmp	r5, #0
 8001e7e:	d15e      	bne.n	8001f3e <__aeabi_dsub+0x48a>
 8001e80:	2e00      	cmp	r6, #0
 8001e82:	d000      	beq.n	8001e86 <__aeabi_dsub+0x3d2>
 8001e84:	e0f3      	b.n	800206e <__aeabi_dsub+0x5ba>
 8001e86:	2f00      	cmp	r7, #0
 8001e88:	d100      	bne.n	8001e8c <__aeabi_dsub+0x3d8>
 8001e8a:	e11e      	b.n	80020ca <__aeabi_dsub+0x616>
 8001e8c:	465c      	mov	r4, fp
 8001e8e:	4661      	mov	r1, ip
 8001e90:	4691      	mov	r9, r2
 8001e92:	e72c      	b.n	8001cee <__aeabi_dsub+0x23a>
 8001e94:	4fa9      	ldr	r7, [pc, #676]	; (800213c <__aeabi_dsub+0x688>)
 8001e96:	42be      	cmp	r6, r7
 8001e98:	d07b      	beq.n	8001f92 <__aeabi_dsub+0x4de>
 8001e9a:	001e      	movs	r6, r3
 8001e9c:	e6f1      	b.n	8001c82 <__aeabi_dsub+0x1ce>
 8001e9e:	0010      	movs	r0, r2
 8001ea0:	3d1f      	subs	r5, #31
 8001ea2:	40e8      	lsrs	r0, r5
 8001ea4:	2b20      	cmp	r3, #32
 8001ea6:	d003      	beq.n	8001eb0 <__aeabi_dsub+0x3fc>
 8001ea8:	2140      	movs	r1, #64	; 0x40
 8001eaa:	1acb      	subs	r3, r1, r3
 8001eac:	409a      	lsls	r2, r3
 8001eae:	4316      	orrs	r6, r2
 8001eb0:	1e73      	subs	r3, r6, #1
 8001eb2:	419e      	sbcs	r6, r3
 8001eb4:	2207      	movs	r2, #7
 8001eb6:	4306      	orrs	r6, r0
 8001eb8:	4032      	ands	r2, r6
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2500      	movs	r5, #0
 8001ebe:	e783      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001ec0:	1a16      	subs	r6, r2, r0
 8001ec2:	4663      	mov	r3, ip
 8001ec4:	42b2      	cmp	r2, r6
 8001ec6:	4180      	sbcs	r0, r0
 8001ec8:	1a59      	subs	r1, r3, r1
 8001eca:	4240      	negs	r0, r0
 8001ecc:	1a0b      	subs	r3, r1, r0
 8001ece:	4698      	mov	r8, r3
 8001ed0:	465c      	mov	r4, fp
 8001ed2:	e632      	b.n	8001b3a <__aeabi_dsub+0x86>
 8001ed4:	2e1f      	cmp	r6, #31
 8001ed6:	dd00      	ble.n	8001eda <__aeabi_dsub+0x426>
 8001ed8:	e0ab      	b.n	8002032 <__aeabi_dsub+0x57e>
 8001eda:	2720      	movs	r7, #32
 8001edc:	1bbb      	subs	r3, r7, r6
 8001ede:	469a      	mov	sl, r3
 8001ee0:	4663      	mov	r3, ip
 8001ee2:	4657      	mov	r7, sl
 8001ee4:	40bb      	lsls	r3, r7
 8001ee6:	4699      	mov	r9, r3
 8001ee8:	0013      	movs	r3, r2
 8001eea:	464f      	mov	r7, r9
 8001eec:	40f3      	lsrs	r3, r6
 8001eee:	431f      	orrs	r7, r3
 8001ef0:	003b      	movs	r3, r7
 8001ef2:	4657      	mov	r7, sl
 8001ef4:	40ba      	lsls	r2, r7
 8001ef6:	1e57      	subs	r7, r2, #1
 8001ef8:	41ba      	sbcs	r2, r7
 8001efa:	4313      	orrs	r3, r2
 8001efc:	4662      	mov	r2, ip
 8001efe:	40f2      	lsrs	r2, r6
 8001f00:	1889      	adds	r1, r1, r2
 8001f02:	e698      	b.n	8001c36 <__aeabi_dsub+0x182>
 8001f04:	2720      	movs	r7, #32
 8001f06:	1bbb      	subs	r3, r7, r6
 8001f08:	469a      	mov	sl, r3
 8001f0a:	4663      	mov	r3, ip
 8001f0c:	4657      	mov	r7, sl
 8001f0e:	40bb      	lsls	r3, r7
 8001f10:	4699      	mov	r9, r3
 8001f12:	0013      	movs	r3, r2
 8001f14:	464f      	mov	r7, r9
 8001f16:	40f3      	lsrs	r3, r6
 8001f18:	431f      	orrs	r7, r3
 8001f1a:	003b      	movs	r3, r7
 8001f1c:	4657      	mov	r7, sl
 8001f1e:	40ba      	lsls	r2, r7
 8001f20:	1e57      	subs	r7, r2, #1
 8001f22:	41ba      	sbcs	r2, r7
 8001f24:	4313      	orrs	r3, r2
 8001f26:	4662      	mov	r2, ip
 8001f28:	40f2      	lsrs	r2, r6
 8001f2a:	1a89      	subs	r1, r1, r2
 8001f2c:	e79c      	b.n	8001e68 <__aeabi_dsub+0x3b4>
 8001f2e:	4b83      	ldr	r3, [pc, #524]	; (800213c <__aeabi_dsub+0x688>)
 8001f30:	429f      	cmp	r7, r3
 8001f32:	d05f      	beq.n	8001ff4 <__aeabi_dsub+0x540>
 8001f34:	2580      	movs	r5, #128	; 0x80
 8001f36:	042d      	lsls	r5, r5, #16
 8001f38:	4273      	negs	r3, r6
 8001f3a:	4329      	orrs	r1, r5
 8001f3c:	e720      	b.n	8001d80 <__aeabi_dsub+0x2cc>
 8001f3e:	2e00      	cmp	r6, #0
 8001f40:	d10c      	bne.n	8001f5c <__aeabi_dsub+0x4a8>
 8001f42:	2f00      	cmp	r7, #0
 8001f44:	d100      	bne.n	8001f48 <__aeabi_dsub+0x494>
 8001f46:	e0d0      	b.n	80020ea <__aeabi_dsub+0x636>
 8001f48:	465c      	mov	r4, fp
 8001f4a:	4661      	mov	r1, ip
 8001f4c:	4691      	mov	r9, r2
 8001f4e:	4d7b      	ldr	r5, [pc, #492]	; (800213c <__aeabi_dsub+0x688>)
 8001f50:	e6cd      	b.n	8001cee <__aeabi_dsub+0x23a>
 8001f52:	4f7a      	ldr	r7, [pc, #488]	; (800213c <__aeabi_dsub+0x688>)
 8001f54:	42be      	cmp	r6, r7
 8001f56:	d01c      	beq.n	8001f92 <__aeabi_dsub+0x4de>
 8001f58:	001e      	movs	r6, r3
 8001f5a:	e665      	b.n	8001c28 <__aeabi_dsub+0x174>
 8001f5c:	2f00      	cmp	r7, #0
 8001f5e:	d018      	beq.n	8001f92 <__aeabi_dsub+0x4de>
 8001f60:	08c0      	lsrs	r0, r0, #3
 8001f62:	074e      	lsls	r6, r1, #29
 8001f64:	4306      	orrs	r6, r0
 8001f66:	2080      	movs	r0, #128	; 0x80
 8001f68:	08c9      	lsrs	r1, r1, #3
 8001f6a:	0300      	lsls	r0, r0, #12
 8001f6c:	4201      	tst	r1, r0
 8001f6e:	d008      	beq.n	8001f82 <__aeabi_dsub+0x4ce>
 8001f70:	4663      	mov	r3, ip
 8001f72:	08dc      	lsrs	r4, r3, #3
 8001f74:	4204      	tst	r4, r0
 8001f76:	d104      	bne.n	8001f82 <__aeabi_dsub+0x4ce>
 8001f78:	0021      	movs	r1, r4
 8001f7a:	46da      	mov	sl, fp
 8001f7c:	08d2      	lsrs	r2, r2, #3
 8001f7e:	075e      	lsls	r6, r3, #29
 8001f80:	4316      	orrs	r6, r2
 8001f82:	00f3      	lsls	r3, r6, #3
 8001f84:	4699      	mov	r9, r3
 8001f86:	2401      	movs	r4, #1
 8001f88:	4653      	mov	r3, sl
 8001f8a:	00c9      	lsls	r1, r1, #3
 8001f8c:	0f72      	lsrs	r2, r6, #29
 8001f8e:	4311      	orrs	r1, r2
 8001f90:	401c      	ands	r4, r3
 8001f92:	4d6a      	ldr	r5, [pc, #424]	; (800213c <__aeabi_dsub+0x688>)
 8001f94:	e6ab      	b.n	8001cee <__aeabi_dsub+0x23a>
 8001f96:	001d      	movs	r5, r3
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2700      	movs	r7, #0
 8001f9c:	e6b4      	b.n	8001d08 <__aeabi_dsub+0x254>
 8001f9e:	2d00      	cmp	r5, #0
 8001fa0:	d159      	bne.n	8002056 <__aeabi_dsub+0x5a2>
 8001fa2:	000b      	movs	r3, r1
 8001fa4:	4303      	orrs	r3, r0
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dsub+0x4f6>
 8001fa8:	e6d6      	b.n	8001d58 <__aeabi_dsub+0x2a4>
 8001faa:	1c73      	adds	r3, r6, #1
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_dsub+0x4fc>
 8001fae:	e0b2      	b.n	8002116 <__aeabi_dsub+0x662>
 8001fb0:	4b62      	ldr	r3, [pc, #392]	; (800213c <__aeabi_dsub+0x688>)
 8001fb2:	429f      	cmp	r7, r3
 8001fb4:	d01e      	beq.n	8001ff4 <__aeabi_dsub+0x540>
 8001fb6:	43f3      	mvns	r3, r6
 8001fb8:	2b38      	cmp	r3, #56	; 0x38
 8001fba:	dc6f      	bgt.n	800209c <__aeabi_dsub+0x5e8>
 8001fbc:	2b1f      	cmp	r3, #31
 8001fbe:	dd00      	ble.n	8001fc2 <__aeabi_dsub+0x50e>
 8001fc0:	e097      	b.n	80020f2 <__aeabi_dsub+0x63e>
 8001fc2:	2520      	movs	r5, #32
 8001fc4:	000e      	movs	r6, r1
 8001fc6:	1aed      	subs	r5, r5, r3
 8001fc8:	40ae      	lsls	r6, r5
 8001fca:	46b0      	mov	r8, r6
 8001fcc:	0006      	movs	r6, r0
 8001fce:	46aa      	mov	sl, r5
 8001fd0:	40de      	lsrs	r6, r3
 8001fd2:	4645      	mov	r5, r8
 8001fd4:	4335      	orrs	r5, r6
 8001fd6:	002e      	movs	r6, r5
 8001fd8:	4655      	mov	r5, sl
 8001fda:	40a8      	lsls	r0, r5
 8001fdc:	40d9      	lsrs	r1, r3
 8001fde:	1e45      	subs	r5, r0, #1
 8001fe0:	41a8      	sbcs	r0, r5
 8001fe2:	448c      	add	ip, r1
 8001fe4:	4306      	orrs	r6, r0
 8001fe6:	18b6      	adds	r6, r6, r2
 8001fe8:	4296      	cmp	r6, r2
 8001fea:	4192      	sbcs	r2, r2
 8001fec:	4251      	negs	r1, r2
 8001fee:	4461      	add	r1, ip
 8001ff0:	003d      	movs	r5, r7
 8001ff2:	e625      	b.n	8001c40 <__aeabi_dsub+0x18c>
 8001ff4:	003d      	movs	r5, r7
 8001ff6:	4661      	mov	r1, ip
 8001ff8:	4691      	mov	r9, r2
 8001ffa:	e678      	b.n	8001cee <__aeabi_dsub+0x23a>
 8001ffc:	000b      	movs	r3, r1
 8001ffe:	4303      	orrs	r3, r0
 8002000:	2d00      	cmp	r5, #0
 8002002:	d000      	beq.n	8002006 <__aeabi_dsub+0x552>
 8002004:	e655      	b.n	8001cb2 <__aeabi_dsub+0x1fe>
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f5      	beq.n	8001ff6 <__aeabi_dsub+0x542>
 800200a:	4663      	mov	r3, ip
 800200c:	4313      	orrs	r3, r2
 800200e:	d100      	bne.n	8002012 <__aeabi_dsub+0x55e>
 8002010:	e66d      	b.n	8001cee <__aeabi_dsub+0x23a>
 8002012:	1886      	adds	r6, r0, r2
 8002014:	4286      	cmp	r6, r0
 8002016:	4180      	sbcs	r0, r0
 8002018:	4461      	add	r1, ip
 800201a:	4240      	negs	r0, r0
 800201c:	1809      	adds	r1, r1, r0
 800201e:	2200      	movs	r2, #0
 8002020:	020b      	lsls	r3, r1, #8
 8002022:	d400      	bmi.n	8002026 <__aeabi_dsub+0x572>
 8002024:	e6d0      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8002026:	4b46      	ldr	r3, [pc, #280]	; (8002140 <__aeabi_dsub+0x68c>)
 8002028:	3501      	adds	r5, #1
 800202a:	4019      	ands	r1, r3
 800202c:	e5b2      	b.n	8001b94 <__aeabi_dsub+0xe0>
 800202e:	46b1      	mov	r9, r6
 8002030:	e65d      	b.n	8001cee <__aeabi_dsub+0x23a>
 8002032:	0033      	movs	r3, r6
 8002034:	4667      	mov	r7, ip
 8002036:	3b20      	subs	r3, #32
 8002038:	40df      	lsrs	r7, r3
 800203a:	003b      	movs	r3, r7
 800203c:	2e20      	cmp	r6, #32
 800203e:	d005      	beq.n	800204c <__aeabi_dsub+0x598>
 8002040:	2740      	movs	r7, #64	; 0x40
 8002042:	1bbf      	subs	r7, r7, r6
 8002044:	4666      	mov	r6, ip
 8002046:	40be      	lsls	r6, r7
 8002048:	4332      	orrs	r2, r6
 800204a:	4690      	mov	r8, r2
 800204c:	4646      	mov	r6, r8
 800204e:	1e72      	subs	r2, r6, #1
 8002050:	4196      	sbcs	r6, r2
 8002052:	4333      	orrs	r3, r6
 8002054:	e5ef      	b.n	8001c36 <__aeabi_dsub+0x182>
 8002056:	4b39      	ldr	r3, [pc, #228]	; (800213c <__aeabi_dsub+0x688>)
 8002058:	429f      	cmp	r7, r3
 800205a:	d0cb      	beq.n	8001ff4 <__aeabi_dsub+0x540>
 800205c:	2580      	movs	r5, #128	; 0x80
 800205e:	042d      	lsls	r5, r5, #16
 8002060:	4273      	negs	r3, r6
 8002062:	4329      	orrs	r1, r5
 8002064:	e7a8      	b.n	8001fb8 <__aeabi_dsub+0x504>
 8002066:	4308      	orrs	r0, r1
 8002068:	1e41      	subs	r1, r0, #1
 800206a:	4188      	sbcs	r0, r1
 800206c:	e6a2      	b.n	8001db4 <__aeabi_dsub+0x300>
 800206e:	2f00      	cmp	r7, #0
 8002070:	d100      	bne.n	8002074 <__aeabi_dsub+0x5c0>
 8002072:	e63c      	b.n	8001cee <__aeabi_dsub+0x23a>
 8002074:	4663      	mov	r3, ip
 8002076:	1a86      	subs	r6, r0, r2
 8002078:	1acf      	subs	r7, r1, r3
 800207a:	42b0      	cmp	r0, r6
 800207c:	419b      	sbcs	r3, r3
 800207e:	425b      	negs	r3, r3
 8002080:	1afb      	subs	r3, r7, r3
 8002082:	4698      	mov	r8, r3
 8002084:	021b      	lsls	r3, r3, #8
 8002086:	d54e      	bpl.n	8002126 <__aeabi_dsub+0x672>
 8002088:	1a16      	subs	r6, r2, r0
 800208a:	4663      	mov	r3, ip
 800208c:	42b2      	cmp	r2, r6
 800208e:	4192      	sbcs	r2, r2
 8002090:	1a59      	subs	r1, r3, r1
 8002092:	4252      	negs	r2, r2
 8002094:	1a89      	subs	r1, r1, r2
 8002096:	465c      	mov	r4, fp
 8002098:	2200      	movs	r2, #0
 800209a:	e57b      	b.n	8001b94 <__aeabi_dsub+0xe0>
 800209c:	4301      	orrs	r1, r0
 800209e:	000e      	movs	r6, r1
 80020a0:	1e71      	subs	r1, r6, #1
 80020a2:	418e      	sbcs	r6, r1
 80020a4:	e79f      	b.n	8001fe6 <__aeabi_dsub+0x532>
 80020a6:	001d      	movs	r5, r3
 80020a8:	000e      	movs	r6, r1
 80020aa:	3d20      	subs	r5, #32
 80020ac:	40ee      	lsrs	r6, r5
 80020ae:	46b0      	mov	r8, r6
 80020b0:	2b20      	cmp	r3, #32
 80020b2:	d004      	beq.n	80020be <__aeabi_dsub+0x60a>
 80020b4:	2540      	movs	r5, #64	; 0x40
 80020b6:	1aeb      	subs	r3, r5, r3
 80020b8:	4099      	lsls	r1, r3
 80020ba:	4308      	orrs	r0, r1
 80020bc:	4681      	mov	r9, r0
 80020be:	4648      	mov	r0, r9
 80020c0:	4643      	mov	r3, r8
 80020c2:	1e41      	subs	r1, r0, #1
 80020c4:	4188      	sbcs	r0, r1
 80020c6:	4318      	orrs	r0, r3
 80020c8:	e674      	b.n	8001db4 <__aeabi_dsub+0x300>
 80020ca:	2200      	movs	r2, #0
 80020cc:	2400      	movs	r4, #0
 80020ce:	e617      	b.n	8001d00 <__aeabi_dsub+0x24c>
 80020d0:	1a16      	subs	r6, r2, r0
 80020d2:	4663      	mov	r3, ip
 80020d4:	42b2      	cmp	r2, r6
 80020d6:	4192      	sbcs	r2, r2
 80020d8:	1a59      	subs	r1, r3, r1
 80020da:	4252      	negs	r2, r2
 80020dc:	1a89      	subs	r1, r1, r2
 80020de:	003d      	movs	r5, r7
 80020e0:	e525      	b.n	8001b2e <__aeabi_dsub+0x7a>
 80020e2:	4661      	mov	r1, ip
 80020e4:	4691      	mov	r9, r2
 80020e6:	4d15      	ldr	r5, [pc, #84]	; (800213c <__aeabi_dsub+0x688>)
 80020e8:	e601      	b.n	8001cee <__aeabi_dsub+0x23a>
 80020ea:	2280      	movs	r2, #128	; 0x80
 80020ec:	2400      	movs	r4, #0
 80020ee:	0312      	lsls	r2, r2, #12
 80020f0:	e679      	b.n	8001de6 <__aeabi_dsub+0x332>
 80020f2:	001d      	movs	r5, r3
 80020f4:	000e      	movs	r6, r1
 80020f6:	3d20      	subs	r5, #32
 80020f8:	40ee      	lsrs	r6, r5
 80020fa:	46b0      	mov	r8, r6
 80020fc:	2b20      	cmp	r3, #32
 80020fe:	d004      	beq.n	800210a <__aeabi_dsub+0x656>
 8002100:	2540      	movs	r5, #64	; 0x40
 8002102:	1aeb      	subs	r3, r5, r3
 8002104:	4099      	lsls	r1, r3
 8002106:	4308      	orrs	r0, r1
 8002108:	4681      	mov	r9, r0
 800210a:	464e      	mov	r6, r9
 800210c:	4643      	mov	r3, r8
 800210e:	1e71      	subs	r1, r6, #1
 8002110:	418e      	sbcs	r6, r1
 8002112:	431e      	orrs	r6, r3
 8002114:	e767      	b.n	8001fe6 <__aeabi_dsub+0x532>
 8002116:	1886      	adds	r6, r0, r2
 8002118:	4296      	cmp	r6, r2
 800211a:	419b      	sbcs	r3, r3
 800211c:	4461      	add	r1, ip
 800211e:	425b      	negs	r3, r3
 8002120:	18c9      	adds	r1, r1, r3
 8002122:	003d      	movs	r5, r7
 8002124:	e58c      	b.n	8001c40 <__aeabi_dsub+0x18c>
 8002126:	4647      	mov	r7, r8
 8002128:	4337      	orrs	r7, r6
 800212a:	d0ce      	beq.n	80020ca <__aeabi_dsub+0x616>
 800212c:	2207      	movs	r2, #7
 800212e:	4641      	mov	r1, r8
 8002130:	4032      	ands	r2, r6
 8002132:	e649      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8002134:	2700      	movs	r7, #0
 8002136:	003a      	movs	r2, r7
 8002138:	e5e6      	b.n	8001d08 <__aeabi_dsub+0x254>
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	000007ff 	.word	0x000007ff
 8002140:	ff7fffff 	.word	0xff7fffff

08002144 <__aeabi_dcmpun>:
 8002144:	b570      	push	{r4, r5, r6, lr}
 8002146:	4e0c      	ldr	r6, [pc, #48]	; (8002178 <__aeabi_dcmpun+0x34>)
 8002148:	030d      	lsls	r5, r1, #12
 800214a:	031c      	lsls	r4, r3, #12
 800214c:	0049      	lsls	r1, r1, #1
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	0b2d      	lsrs	r5, r5, #12
 8002152:	0d49      	lsrs	r1, r1, #21
 8002154:	0b24      	lsrs	r4, r4, #12
 8002156:	0d5b      	lsrs	r3, r3, #21
 8002158:	42b1      	cmp	r1, r6
 800215a:	d008      	beq.n	800216e <__aeabi_dcmpun+0x2a>
 800215c:	4906      	ldr	r1, [pc, #24]	; (8002178 <__aeabi_dcmpun+0x34>)
 800215e:	2000      	movs	r0, #0
 8002160:	428b      	cmp	r3, r1
 8002162:	d103      	bne.n	800216c <__aeabi_dcmpun+0x28>
 8002164:	4314      	orrs	r4, r2
 8002166:	0020      	movs	r0, r4
 8002168:	1e44      	subs	r4, r0, #1
 800216a:	41a0      	sbcs	r0, r4
 800216c:	bd70      	pop	{r4, r5, r6, pc}
 800216e:	4305      	orrs	r5, r0
 8002170:	2001      	movs	r0, #1
 8002172:	2d00      	cmp	r5, #0
 8002174:	d1fa      	bne.n	800216c <__aeabi_dcmpun+0x28>
 8002176:	e7f1      	b.n	800215c <__aeabi_dcmpun+0x18>
 8002178:	000007ff 	.word	0x000007ff

0800217c <__aeabi_d2iz>:
 800217c:	b530      	push	{r4, r5, lr}
 800217e:	4d14      	ldr	r5, [pc, #80]	; (80021d0 <__aeabi_d2iz+0x54>)
 8002180:	030a      	lsls	r2, r1, #12
 8002182:	004b      	lsls	r3, r1, #1
 8002184:	0b12      	lsrs	r2, r2, #12
 8002186:	0d5b      	lsrs	r3, r3, #21
 8002188:	0fc9      	lsrs	r1, r1, #31
 800218a:	2400      	movs	r4, #0
 800218c:	42ab      	cmp	r3, r5
 800218e:	dd11      	ble.n	80021b4 <__aeabi_d2iz+0x38>
 8002190:	4c10      	ldr	r4, [pc, #64]	; (80021d4 <__aeabi_d2iz+0x58>)
 8002192:	42a3      	cmp	r3, r4
 8002194:	dc10      	bgt.n	80021b8 <__aeabi_d2iz+0x3c>
 8002196:	2480      	movs	r4, #128	; 0x80
 8002198:	0364      	lsls	r4, r4, #13
 800219a:	4322      	orrs	r2, r4
 800219c:	4c0e      	ldr	r4, [pc, #56]	; (80021d8 <__aeabi_d2iz+0x5c>)
 800219e:	1ae4      	subs	r4, r4, r3
 80021a0:	2c1f      	cmp	r4, #31
 80021a2:	dd0c      	ble.n	80021be <__aeabi_d2iz+0x42>
 80021a4:	480d      	ldr	r0, [pc, #52]	; (80021dc <__aeabi_d2iz+0x60>)
 80021a6:	1ac3      	subs	r3, r0, r3
 80021a8:	40da      	lsrs	r2, r3
 80021aa:	0013      	movs	r3, r2
 80021ac:	425c      	negs	r4, r3
 80021ae:	2900      	cmp	r1, #0
 80021b0:	d100      	bne.n	80021b4 <__aeabi_d2iz+0x38>
 80021b2:	001c      	movs	r4, r3
 80021b4:	0020      	movs	r0, r4
 80021b6:	bd30      	pop	{r4, r5, pc}
 80021b8:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <__aeabi_d2iz+0x64>)
 80021ba:	18cc      	adds	r4, r1, r3
 80021bc:	e7fa      	b.n	80021b4 <__aeabi_d2iz+0x38>
 80021be:	4d09      	ldr	r5, [pc, #36]	; (80021e4 <__aeabi_d2iz+0x68>)
 80021c0:	40e0      	lsrs	r0, r4
 80021c2:	46ac      	mov	ip, r5
 80021c4:	4463      	add	r3, ip
 80021c6:	409a      	lsls	r2, r3
 80021c8:	0013      	movs	r3, r2
 80021ca:	4303      	orrs	r3, r0
 80021cc:	e7ee      	b.n	80021ac <__aeabi_d2iz+0x30>
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	000003fe 	.word	0x000003fe
 80021d4:	0000041d 	.word	0x0000041d
 80021d8:	00000433 	.word	0x00000433
 80021dc:	00000413 	.word	0x00000413
 80021e0:	7fffffff 	.word	0x7fffffff
 80021e4:	fffffbed 	.word	0xfffffbed

080021e8 <__aeabi_i2d>:
 80021e8:	b570      	push	{r4, r5, r6, lr}
 80021ea:	2800      	cmp	r0, #0
 80021ec:	d02d      	beq.n	800224a <__aeabi_i2d+0x62>
 80021ee:	17c3      	asrs	r3, r0, #31
 80021f0:	18c5      	adds	r5, r0, r3
 80021f2:	405d      	eors	r5, r3
 80021f4:	0fc4      	lsrs	r4, r0, #31
 80021f6:	0028      	movs	r0, r5
 80021f8:	f000 f938 	bl	800246c <__clzsi2>
 80021fc:	4b15      	ldr	r3, [pc, #84]	; (8002254 <__aeabi_i2d+0x6c>)
 80021fe:	1a1b      	subs	r3, r3, r0
 8002200:	055b      	lsls	r3, r3, #21
 8002202:	0d5b      	lsrs	r3, r3, #21
 8002204:	280a      	cmp	r0, #10
 8002206:	dd15      	ble.n	8002234 <__aeabi_i2d+0x4c>
 8002208:	380b      	subs	r0, #11
 800220a:	4085      	lsls	r5, r0
 800220c:	2200      	movs	r2, #0
 800220e:	032d      	lsls	r5, r5, #12
 8002210:	0b2d      	lsrs	r5, r5, #12
 8002212:	2100      	movs	r1, #0
 8002214:	0010      	movs	r0, r2
 8002216:	032d      	lsls	r5, r5, #12
 8002218:	0d0a      	lsrs	r2, r1, #20
 800221a:	0b2d      	lsrs	r5, r5, #12
 800221c:	0512      	lsls	r2, r2, #20
 800221e:	432a      	orrs	r2, r5
 8002220:	4d0d      	ldr	r5, [pc, #52]	; (8002258 <__aeabi_i2d+0x70>)
 8002222:	051b      	lsls	r3, r3, #20
 8002224:	402a      	ands	r2, r5
 8002226:	4313      	orrs	r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	07e4      	lsls	r4, r4, #31
 800222c:	085b      	lsrs	r3, r3, #1
 800222e:	4323      	orrs	r3, r4
 8002230:	0019      	movs	r1, r3
 8002232:	bd70      	pop	{r4, r5, r6, pc}
 8002234:	0002      	movs	r2, r0
 8002236:	0029      	movs	r1, r5
 8002238:	3215      	adds	r2, #21
 800223a:	4091      	lsls	r1, r2
 800223c:	000a      	movs	r2, r1
 800223e:	210b      	movs	r1, #11
 8002240:	1a08      	subs	r0, r1, r0
 8002242:	40c5      	lsrs	r5, r0
 8002244:	032d      	lsls	r5, r5, #12
 8002246:	0b2d      	lsrs	r5, r5, #12
 8002248:	e7e3      	b.n	8002212 <__aeabi_i2d+0x2a>
 800224a:	2400      	movs	r4, #0
 800224c:	2300      	movs	r3, #0
 800224e:	2500      	movs	r5, #0
 8002250:	2200      	movs	r2, #0
 8002252:	e7de      	b.n	8002212 <__aeabi_i2d+0x2a>
 8002254:	0000041e 	.word	0x0000041e
 8002258:	800fffff 	.word	0x800fffff

0800225c <__aeabi_ui2d>:
 800225c:	b510      	push	{r4, lr}
 800225e:	1e04      	subs	r4, r0, #0
 8002260:	d025      	beq.n	80022ae <__aeabi_ui2d+0x52>
 8002262:	f000 f903 	bl	800246c <__clzsi2>
 8002266:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <__aeabi_ui2d+0x5c>)
 8002268:	1a1b      	subs	r3, r3, r0
 800226a:	055b      	lsls	r3, r3, #21
 800226c:	0d5b      	lsrs	r3, r3, #21
 800226e:	280a      	cmp	r0, #10
 8002270:	dd12      	ble.n	8002298 <__aeabi_ui2d+0x3c>
 8002272:	380b      	subs	r0, #11
 8002274:	4084      	lsls	r4, r0
 8002276:	2200      	movs	r2, #0
 8002278:	0324      	lsls	r4, r4, #12
 800227a:	0b24      	lsrs	r4, r4, #12
 800227c:	2100      	movs	r1, #0
 800227e:	0010      	movs	r0, r2
 8002280:	0324      	lsls	r4, r4, #12
 8002282:	0d0a      	lsrs	r2, r1, #20
 8002284:	0b24      	lsrs	r4, r4, #12
 8002286:	0512      	lsls	r2, r2, #20
 8002288:	4322      	orrs	r2, r4
 800228a:	4c0c      	ldr	r4, [pc, #48]	; (80022bc <__aeabi_ui2d+0x60>)
 800228c:	051b      	lsls	r3, r3, #20
 800228e:	4022      	ands	r2, r4
 8002290:	4313      	orrs	r3, r2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	0859      	lsrs	r1, r3, #1
 8002296:	bd10      	pop	{r4, pc}
 8002298:	0002      	movs	r2, r0
 800229a:	0021      	movs	r1, r4
 800229c:	3215      	adds	r2, #21
 800229e:	4091      	lsls	r1, r2
 80022a0:	000a      	movs	r2, r1
 80022a2:	210b      	movs	r1, #11
 80022a4:	1a08      	subs	r0, r1, r0
 80022a6:	40c4      	lsrs	r4, r0
 80022a8:	0324      	lsls	r4, r4, #12
 80022aa:	0b24      	lsrs	r4, r4, #12
 80022ac:	e7e6      	b.n	800227c <__aeabi_ui2d+0x20>
 80022ae:	2300      	movs	r3, #0
 80022b0:	2400      	movs	r4, #0
 80022b2:	2200      	movs	r2, #0
 80022b4:	e7e2      	b.n	800227c <__aeabi_ui2d+0x20>
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	0000041e 	.word	0x0000041e
 80022bc:	800fffff 	.word	0x800fffff

080022c0 <__aeabi_f2d>:
 80022c0:	0041      	lsls	r1, r0, #1
 80022c2:	0e09      	lsrs	r1, r1, #24
 80022c4:	1c4b      	adds	r3, r1, #1
 80022c6:	b570      	push	{r4, r5, r6, lr}
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	0246      	lsls	r6, r0, #9
 80022cc:	0a75      	lsrs	r5, r6, #9
 80022ce:	0fc4      	lsrs	r4, r0, #31
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	dd14      	ble.n	80022fe <__aeabi_f2d+0x3e>
 80022d4:	23e0      	movs	r3, #224	; 0xe0
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	076d      	lsls	r5, r5, #29
 80022da:	0b36      	lsrs	r6, r6, #12
 80022dc:	18cb      	adds	r3, r1, r3
 80022de:	2100      	movs	r1, #0
 80022e0:	0d0a      	lsrs	r2, r1, #20
 80022e2:	0028      	movs	r0, r5
 80022e4:	0512      	lsls	r2, r2, #20
 80022e6:	4d1c      	ldr	r5, [pc, #112]	; (8002358 <__aeabi_f2d+0x98>)
 80022e8:	4332      	orrs	r2, r6
 80022ea:	055b      	lsls	r3, r3, #21
 80022ec:	402a      	ands	r2, r5
 80022ee:	085b      	lsrs	r3, r3, #1
 80022f0:	4313      	orrs	r3, r2
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	07e4      	lsls	r4, r4, #31
 80022f6:	085b      	lsrs	r3, r3, #1
 80022f8:	4323      	orrs	r3, r4
 80022fa:	0019      	movs	r1, r3
 80022fc:	bd70      	pop	{r4, r5, r6, pc}
 80022fe:	2900      	cmp	r1, #0
 8002300:	d114      	bne.n	800232c <__aeabi_f2d+0x6c>
 8002302:	2d00      	cmp	r5, #0
 8002304:	d01e      	beq.n	8002344 <__aeabi_f2d+0x84>
 8002306:	0028      	movs	r0, r5
 8002308:	f000 f8b0 	bl	800246c <__clzsi2>
 800230c:	280a      	cmp	r0, #10
 800230e:	dc1c      	bgt.n	800234a <__aeabi_f2d+0x8a>
 8002310:	230b      	movs	r3, #11
 8002312:	002a      	movs	r2, r5
 8002314:	1a1b      	subs	r3, r3, r0
 8002316:	40da      	lsrs	r2, r3
 8002318:	0003      	movs	r3, r0
 800231a:	3315      	adds	r3, #21
 800231c:	409d      	lsls	r5, r3
 800231e:	4b0f      	ldr	r3, [pc, #60]	; (800235c <__aeabi_f2d+0x9c>)
 8002320:	0312      	lsls	r2, r2, #12
 8002322:	1a1b      	subs	r3, r3, r0
 8002324:	055b      	lsls	r3, r3, #21
 8002326:	0b16      	lsrs	r6, r2, #12
 8002328:	0d5b      	lsrs	r3, r3, #21
 800232a:	e7d8      	b.n	80022de <__aeabi_f2d+0x1e>
 800232c:	2d00      	cmp	r5, #0
 800232e:	d006      	beq.n	800233e <__aeabi_f2d+0x7e>
 8002330:	0b32      	lsrs	r2, r6, #12
 8002332:	2680      	movs	r6, #128	; 0x80
 8002334:	0336      	lsls	r6, r6, #12
 8002336:	076d      	lsls	r5, r5, #29
 8002338:	4316      	orrs	r6, r2
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <__aeabi_f2d+0xa0>)
 800233c:	e7cf      	b.n	80022de <__aeabi_f2d+0x1e>
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <__aeabi_f2d+0xa0>)
 8002340:	2600      	movs	r6, #0
 8002342:	e7cc      	b.n	80022de <__aeabi_f2d+0x1e>
 8002344:	2300      	movs	r3, #0
 8002346:	2600      	movs	r6, #0
 8002348:	e7c9      	b.n	80022de <__aeabi_f2d+0x1e>
 800234a:	0003      	movs	r3, r0
 800234c:	002a      	movs	r2, r5
 800234e:	3b0b      	subs	r3, #11
 8002350:	409a      	lsls	r2, r3
 8002352:	2500      	movs	r5, #0
 8002354:	e7e3      	b.n	800231e <__aeabi_f2d+0x5e>
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	800fffff 	.word	0x800fffff
 800235c:	00000389 	.word	0x00000389
 8002360:	000007ff 	.word	0x000007ff

08002364 <__aeabi_d2f>:
 8002364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002366:	004c      	lsls	r4, r1, #1
 8002368:	0d64      	lsrs	r4, r4, #21
 800236a:	030b      	lsls	r3, r1, #12
 800236c:	1c62      	adds	r2, r4, #1
 800236e:	0a5b      	lsrs	r3, r3, #9
 8002370:	0f46      	lsrs	r6, r0, #29
 8002372:	0552      	lsls	r2, r2, #21
 8002374:	0fc9      	lsrs	r1, r1, #31
 8002376:	431e      	orrs	r6, r3
 8002378:	00c5      	lsls	r5, r0, #3
 800237a:	0d52      	lsrs	r2, r2, #21
 800237c:	2a01      	cmp	r2, #1
 800237e:	dd29      	ble.n	80023d4 <__aeabi_d2f+0x70>
 8002380:	4b37      	ldr	r3, [pc, #220]	; (8002460 <__aeabi_d2f+0xfc>)
 8002382:	18e7      	adds	r7, r4, r3
 8002384:	2ffe      	cmp	r7, #254	; 0xfe
 8002386:	dc1c      	bgt.n	80023c2 <__aeabi_d2f+0x5e>
 8002388:	2f00      	cmp	r7, #0
 800238a:	dd3b      	ble.n	8002404 <__aeabi_d2f+0xa0>
 800238c:	0180      	lsls	r0, r0, #6
 800238e:	1e43      	subs	r3, r0, #1
 8002390:	4198      	sbcs	r0, r3
 8002392:	2207      	movs	r2, #7
 8002394:	00f3      	lsls	r3, r6, #3
 8002396:	0f6d      	lsrs	r5, r5, #29
 8002398:	4303      	orrs	r3, r0
 800239a:	432b      	orrs	r3, r5
 800239c:	401a      	ands	r2, r3
 800239e:	2a00      	cmp	r2, #0
 80023a0:	d004      	beq.n	80023ac <__aeabi_d2f+0x48>
 80023a2:	220f      	movs	r2, #15
 80023a4:	401a      	ands	r2, r3
 80023a6:	2a04      	cmp	r2, #4
 80023a8:	d000      	beq.n	80023ac <__aeabi_d2f+0x48>
 80023aa:	3304      	adds	r3, #4
 80023ac:	2280      	movs	r2, #128	; 0x80
 80023ae:	04d2      	lsls	r2, r2, #19
 80023b0:	401a      	ands	r2, r3
 80023b2:	d024      	beq.n	80023fe <__aeabi_d2f+0x9a>
 80023b4:	3701      	adds	r7, #1
 80023b6:	b2fa      	uxtb	r2, r7
 80023b8:	2fff      	cmp	r7, #255	; 0xff
 80023ba:	d002      	beq.n	80023c2 <__aeabi_d2f+0x5e>
 80023bc:	019b      	lsls	r3, r3, #6
 80023be:	0a58      	lsrs	r0, r3, #9
 80023c0:	e001      	b.n	80023c6 <__aeabi_d2f+0x62>
 80023c2:	22ff      	movs	r2, #255	; 0xff
 80023c4:	2000      	movs	r0, #0
 80023c6:	0240      	lsls	r0, r0, #9
 80023c8:	05d2      	lsls	r2, r2, #23
 80023ca:	0a40      	lsrs	r0, r0, #9
 80023cc:	07c9      	lsls	r1, r1, #31
 80023ce:	4310      	orrs	r0, r2
 80023d0:	4308      	orrs	r0, r1
 80023d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d4:	4335      	orrs	r5, r6
 80023d6:	2c00      	cmp	r4, #0
 80023d8:	d104      	bne.n	80023e4 <__aeabi_d2f+0x80>
 80023da:	2d00      	cmp	r5, #0
 80023dc:	d10a      	bne.n	80023f4 <__aeabi_d2f+0x90>
 80023de:	2200      	movs	r2, #0
 80023e0:	2000      	movs	r0, #0
 80023e2:	e7f0      	b.n	80023c6 <__aeabi_d2f+0x62>
 80023e4:	2d00      	cmp	r5, #0
 80023e6:	d0ec      	beq.n	80023c2 <__aeabi_d2f+0x5e>
 80023e8:	2080      	movs	r0, #128	; 0x80
 80023ea:	03c0      	lsls	r0, r0, #15
 80023ec:	4330      	orrs	r0, r6
 80023ee:	22ff      	movs	r2, #255	; 0xff
 80023f0:	e7e9      	b.n	80023c6 <__aeabi_d2f+0x62>
 80023f2:	2400      	movs	r4, #0
 80023f4:	2300      	movs	r3, #0
 80023f6:	025b      	lsls	r3, r3, #9
 80023f8:	0a58      	lsrs	r0, r3, #9
 80023fa:	b2e2      	uxtb	r2, r4
 80023fc:	e7e3      	b.n	80023c6 <__aeabi_d2f+0x62>
 80023fe:	08db      	lsrs	r3, r3, #3
 8002400:	003c      	movs	r4, r7
 8002402:	e7f8      	b.n	80023f6 <__aeabi_d2f+0x92>
 8002404:	003b      	movs	r3, r7
 8002406:	3317      	adds	r3, #23
 8002408:	dbf3      	blt.n	80023f2 <__aeabi_d2f+0x8e>
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	041b      	lsls	r3, r3, #16
 800240e:	4333      	orrs	r3, r6
 8002410:	261e      	movs	r6, #30
 8002412:	1bf6      	subs	r6, r6, r7
 8002414:	2e1f      	cmp	r6, #31
 8002416:	dd14      	ble.n	8002442 <__aeabi_d2f+0xde>
 8002418:	2202      	movs	r2, #2
 800241a:	4252      	negs	r2, r2
 800241c:	1bd7      	subs	r7, r2, r7
 800241e:	001a      	movs	r2, r3
 8002420:	40fa      	lsrs	r2, r7
 8002422:	0017      	movs	r7, r2
 8002424:	2e20      	cmp	r6, #32
 8002426:	d004      	beq.n	8002432 <__aeabi_d2f+0xce>
 8002428:	4a0e      	ldr	r2, [pc, #56]	; (8002464 <__aeabi_d2f+0x100>)
 800242a:	4694      	mov	ip, r2
 800242c:	4464      	add	r4, ip
 800242e:	40a3      	lsls	r3, r4
 8002430:	431d      	orrs	r5, r3
 8002432:	002b      	movs	r3, r5
 8002434:	1e5d      	subs	r5, r3, #1
 8002436:	41ab      	sbcs	r3, r5
 8002438:	2207      	movs	r2, #7
 800243a:	433b      	orrs	r3, r7
 800243c:	401a      	ands	r2, r3
 800243e:	2700      	movs	r7, #0
 8002440:	e7ad      	b.n	800239e <__aeabi_d2f+0x3a>
 8002442:	4a09      	ldr	r2, [pc, #36]	; (8002468 <__aeabi_d2f+0x104>)
 8002444:	0028      	movs	r0, r5
 8002446:	18a2      	adds	r2, r4, r2
 8002448:	4095      	lsls	r5, r2
 800244a:	4093      	lsls	r3, r2
 800244c:	1e6c      	subs	r4, r5, #1
 800244e:	41a5      	sbcs	r5, r4
 8002450:	40f0      	lsrs	r0, r6
 8002452:	2207      	movs	r2, #7
 8002454:	432b      	orrs	r3, r5
 8002456:	4303      	orrs	r3, r0
 8002458:	401a      	ands	r2, r3
 800245a:	2700      	movs	r7, #0
 800245c:	e79f      	b.n	800239e <__aeabi_d2f+0x3a>
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	fffffc80 	.word	0xfffffc80
 8002464:	fffffca2 	.word	0xfffffca2
 8002468:	fffffc82 	.word	0xfffffc82

0800246c <__clzsi2>:
 800246c:	211c      	movs	r1, #28
 800246e:	2301      	movs	r3, #1
 8002470:	041b      	lsls	r3, r3, #16
 8002472:	4298      	cmp	r0, r3
 8002474:	d301      	bcc.n	800247a <__clzsi2+0xe>
 8002476:	0c00      	lsrs	r0, r0, #16
 8002478:	3910      	subs	r1, #16
 800247a:	0a1b      	lsrs	r3, r3, #8
 800247c:	4298      	cmp	r0, r3
 800247e:	d301      	bcc.n	8002484 <__clzsi2+0x18>
 8002480:	0a00      	lsrs	r0, r0, #8
 8002482:	3908      	subs	r1, #8
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	4298      	cmp	r0, r3
 8002488:	d301      	bcc.n	800248e <__clzsi2+0x22>
 800248a:	0900      	lsrs	r0, r0, #4
 800248c:	3904      	subs	r1, #4
 800248e:	a202      	add	r2, pc, #8	; (adr r2, 8002498 <__clzsi2+0x2c>)
 8002490:	5c10      	ldrb	r0, [r2, r0]
 8002492:	1840      	adds	r0, r0, r1
 8002494:	4770      	bx	lr
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	02020304 	.word	0x02020304
 800249c:	01010101 	.word	0x01010101
	...

080024a8 <debug_init>:

unsigned int dbg_tx_count = 0;


void debug_init()
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
	memset(dbg_tx_buffer,0,DEBUG_TX_BUFFER_SIZE);
 80024ac:	2380      	movs	r3, #128	; 0x80
 80024ae:	00da      	lsls	r2, r3, #3
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <debug_init+0x20>)
 80024b2:	2100      	movs	r1, #0
 80024b4:	0018      	movs	r0, r3
 80024b6:	f003 fdfe 	bl	80060b6 <memset>
	dbg_tx_count = 0;
 80024ba:	4b04      	ldr	r3, [pc, #16]	; (80024cc <debug_init+0x24>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
}
 80024c0:	46c0      	nop			; (mov r8, r8)
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	20000608 	.word	0x20000608
 80024cc:	200001f8 	.word	0x200001f8

080024d0 <debug_transmit_buffer>:

void debug_transmit_buffer()
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
	uint32_t count = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	607b      	str	r3, [r7, #4]

	memcpy(dbg_tx_dma_buffer,dbg_tx_buffer,dbg_tx_count);
 80024da:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <debug_transmit_buffer+0x38>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	490b      	ldr	r1, [pc, #44]	; (800250c <debug_transmit_buffer+0x3c>)
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <debug_transmit_buffer+0x40>)
 80024e2:	0018      	movs	r0, r3
 80024e4:	f003 fdde 	bl	80060a4 <memcpy>
	dbg_tx(dbg_tx_dma_buffer,dbg_tx_count);
 80024e8:	4b07      	ldr	r3, [pc, #28]	; (8002508 <debug_transmit_buffer+0x38>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	4908      	ldr	r1, [pc, #32]	; (8002510 <debug_transmit_buffer+0x40>)
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <debug_transmit_buffer+0x44>)
 80024f2:	0018      	movs	r0, r3
 80024f4:	f002 ff2c 	bl	8005350 <HAL_UART_Transmit_DMA>
	dbg_tx_count = 0;
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <debug_transmit_buffer+0x38>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	46bd      	mov	sp, r7
 8002502:	b002      	add	sp, #8
 8002504:	bd80      	pop	{r7, pc}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	200001f8 	.word	0x200001f8
 800250c:	20000608 	.word	0x20000608
 8002510:	20000208 	.word	0x20000208
 8002514:	20000ab0 	.word	0x20000ab0

08002518 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
	if (ch != '\r')
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b0d      	cmp	r3, #13
 8002524:	d01a      	beq.n	800255c <__io_putchar+0x44>
	{
		dbg_tx_buffer[dbg_tx_count++] = ch;
 8002526:	4b10      	ldr	r3, [pc, #64]	; (8002568 <__io_putchar+0x50>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	1c59      	adds	r1, r3, #1
 800252c:	4a0e      	ldr	r2, [pc, #56]	; (8002568 <__io_putchar+0x50>)
 800252e:	6011      	str	r1, [r2, #0]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	b2d1      	uxtb	r1, r2
 8002534:	4a0d      	ldr	r2, [pc, #52]	; (800256c <__io_putchar+0x54>)
 8002536:	54d1      	strb	r1, [r2, r3]

		if ((ch == '\n') || (dbg_tx_count >= DEBUG_TX_BUFFER_SIZE))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b0a      	cmp	r3, #10
 800253c:	d004      	beq.n	8002548 <__io_putchar+0x30>
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <__io_putchar+0x50>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a0b      	ldr	r2, [pc, #44]	; (8002570 <__io_putchar+0x58>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d909      	bls.n	800255c <__io_putchar+0x44>
		{
			dbg_tx_buffer[dbg_tx_count++] = '\r';
 8002548:	4b07      	ldr	r3, [pc, #28]	; (8002568 <__io_putchar+0x50>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	1c59      	adds	r1, r3, #1
 800254e:	4a06      	ldr	r2, [pc, #24]	; (8002568 <__io_putchar+0x50>)
 8002550:	6011      	str	r1, [r2, #0]
 8002552:	4a06      	ldr	r2, [pc, #24]	; (800256c <__io_putchar+0x54>)
 8002554:	210d      	movs	r1, #13
 8002556:	54d1      	strb	r1, [r2, r3]
			debug_transmit_buffer();
 8002558:	f7ff ffba 	bl	80024d0 <debug_transmit_buffer>
		}
	}

	return ch;
 800255c:	687b      	ldr	r3, [r7, #4]
}
 800255e:	0018      	movs	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	b002      	add	sp, #8
 8002564:	bd80      	pop	{r7, pc}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	200001f8 	.word	0x200001f8
 800256c:	20000608 	.word	0x20000608
 8002570:	000003ff 	.word	0x000003ff

08002574 <HAL_GPIO_EXTI_Callback>:
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART2_UART_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	0002      	movs	r2, r0
 800257c:	1dbb      	adds	r3, r7, #6
 800257e:	801a      	strh	r2, [r3, #0]

  LTC_init();

  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8002580:	46c0      	nop			; (mov r8, r8)
 8002582:	46bd      	mov	sp, r7
 8002584:	b002      	add	sp, #8
 8002586:	bd80      	pop	{r7, pc}

08002588 <main>:
	  HAL_Delay(500);

	  LTC_beginConv(0);
	  LTC_readTemperature();
  }

 8002588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800258a:	b09d      	sub	sp, #116	; 0x74
 800258c:	af02      	add	r7, sp, #8
  /* USER CODE END 3 */
}
 800258e:	232f      	movs	r3, #47	; 0x2f
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	2202      	movs	r2, #2
 8002594:	701a      	strb	r2, [r3, #0]

 8002596:	232e      	movs	r3, #46	; 0x2e
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	2203      	movs	r2, #3
 800259c:	701a      	strb	r2, [r3, #0]
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800259e:	f000 fdff 	bl	80031a0 <HAL_Init>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025a2:	f000 faa5 	bl	8002af0 <SystemClock_Config>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
 80025a6:	f000 fb6f 	bl	8002c88 <MX_GPIO_Init>
  */
 80025aa:	f000 fb4f 	bl	8002c4c <MX_DMA_Init>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025ae:	f000 fb1d 	bl	8002bec <MX_USART2_UART_Init>
                              |RCC_CLOCKTYPE_PCLK1;
 80025b2:	f000 fadd 	bl	8002b70 <MX_SPI1_Init>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025b6:	f7ff ff77 	bl	80024a8 <debug_init>

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80025ba:	232d      	movs	r3, #45	; 0x2d
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
  {
    Error_Handler();
 80025c2:	2128      	movs	r1, #40	; 0x28
 80025c4:	187b      	adds	r3, r7, r1
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
  }
 80025ca:	187b      	adds	r3, r7, r1
 80025cc:	2200      	movs	r2, #0
 80025ce:	705a      	strb	r2, [r3, #1]
}

/**
 80025d0:	2300      	movs	r3, #0
 80025d2:	667b      	str	r3, [r7, #100]	; 0x64
 80025d4:	e036      	b.n	8002644 <main+0xbc>
  * @brief SPI1 Initialization Function
  * @param None
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	015b      	lsls	r3, r3, #5
 80025da:	48e7      	ldr	r0, [pc, #924]	; (8002978 <main+0x3f0>)
 80025dc:	2200      	movs	r2, #0
 80025de:	0019      	movs	r1, r3
 80025e0:	f001 fac8 	bl	8003b74 <HAL_GPIO_WritePin>
  * @retval None
 80025e4:	23fa      	movs	r3, #250	; 0xfa
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	222e      	movs	r2, #46	; 0x2e
 80025ea:	18b9      	adds	r1, r7, r2
 80025ec:	48e3      	ldr	r0, [pc, #908]	; (800297c <main+0x3f4>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	f002 f81a 	bl	8004628 <HAL_SPI_Transmit>
  */
 80025f4:	23fa      	movs	r3, #250	; 0xfa
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	2228      	movs	r2, #40	; 0x28
 80025fa:	18b9      	adds	r1, r7, r2
 80025fc:	48df      	ldr	r0, [pc, #892]	; (800297c <main+0x3f4>)
 80025fe:	2202      	movs	r2, #2
 8002600:	f002 f812 	bl	8004628 <HAL_SPI_Transmit>
static void MX_SPI1_Init(void)
 8002604:	23fa      	movs	r3, #250	; 0xfa
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	242d      	movs	r4, #45	; 0x2d
 800260a:	1939      	adds	r1, r7, r4
 800260c:	48db      	ldr	r0, [pc, #876]	; (800297c <main+0x3f4>)
 800260e:	2201      	movs	r2, #1
 8002610:	f002 f962 	bl	80048d8 <HAL_SPI_Receive>
{
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	015b      	lsls	r3, r3, #5
 8002618:	48d7      	ldr	r0, [pc, #860]	; (8002978 <main+0x3f0>)
 800261a:	2201      	movs	r2, #1
 800261c:	0019      	movs	r1, r3
 800261e:	f001 faa9 	bl	8003b74 <HAL_GPIO_WritePin>

  /* USER CODE BEGIN SPI1_Init 0 */
 8002622:	2064      	movs	r0, #100	; 0x64
 8002624:	f000 fe20 	bl	8003268 <HAL_Delay>

  /* USER CODE END SPI1_Init 0 */
 8002628:	193b      	adds	r3, r7, r4
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	001a      	movs	r2, r3
 800262e:	4bd4      	ldr	r3, [pc, #848]	; (8002980 <main+0x3f8>)
 8002630:	0011      	movs	r1, r2
 8002632:	0018      	movs	r0, r3
 8002634:	f004 fba4 	bl	8006d80 <iprintf>

  /* USER CODE BEGIN SPI1_Init 1 */
 8002638:	2064      	movs	r0, #100	; 0x64
 800263a:	f000 fe15 	bl	8003268 <HAL_Delay>
/**
 800263e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002640:	3301      	adds	r3, #1
 8002642:	667b      	str	r3, [r7, #100]	; 0x64
 8002644:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002646:	2b09      	cmp	r3, #9
 8002648:	ddc5      	ble.n	80025d6 <main+0x4e>

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800264a:	4bce      	ldr	r3, [pc, #824]	; (8002984 <main+0x3fc>)
 800264c:	653b      	str	r3, [r7, #80]	; 0x50
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800264e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002650:	b2da      	uxtb	r2, r3
 8002652:	2124      	movs	r1, #36	; 0x24
 8002654:	187b      	adds	r3, r7, r1
 8002656:	70da      	strb	r2, [r3, #3]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800265a:	0a1b      	lsrs	r3, r3, #8
 800265c:	653b      	str	r3, [r7, #80]	; 0x50
 800265e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002660:	b2da      	uxtb	r2, r3
 8002662:	187b      	adds	r3, r7, r1
 8002664:	709a      	strb	r2, [r3, #2]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002668:	0a1b      	lsrs	r3, r3, #8
 800266a:	653b      	str	r3, [r7, #80]	; 0x50
 800266c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800266e:	b2da      	uxtb	r2, r3
 8002670:	187b      	adds	r3, r7, r1
 8002672:	705a      	strb	r2, [r3, #1]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002676:	0a1b      	lsrs	r3, r3, #8
 8002678:	653b      	str	r3, [r7, #80]	; 0x50
 800267a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800267c:	b2da      	uxtb	r2, r3
 800267e:	187b      	adds	r3, r7, r1
 8002680:	701a      	strb	r2, [r3, #0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002682:	2300      	movs	r3, #0
 8002684:	663b      	str	r3, [r7, #96]	; 0x60
 8002686:	e034      	b.n	80026f2 <main+0x16a>
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8002688:	2408      	movs	r4, #8
 800268a:	193b      	adds	r3, r7, r4
 800268c:	2202      	movs	r2, #2
 800268e:	701a      	strb	r2, [r3, #0]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002690:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002692:	b2db      	uxtb	r3, r3
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	b2da      	uxtb	r2, r3
 8002698:	193b      	adds	r3, r7, r4
 800269a:	705a      	strb	r2, [r3, #1]
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	015b      	lsls	r3, r3, #5
 80026a0:	48b5      	ldr	r0, [pc, #724]	; (8002978 <main+0x3f0>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	0019      	movs	r1, r3
 80026a6:	f001 fa65 	bl	8003b74 <HAL_GPIO_WritePin>
  {
 80026aa:	23fa      	movs	r3, #250	; 0xfa
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	222f      	movs	r2, #47	; 0x2f
 80026b0:	18b9      	adds	r1, r7, r2
 80026b2:	48b2      	ldr	r0, [pc, #712]	; (800297c <main+0x3f4>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	f001 ffb7 	bl	8004628 <HAL_SPI_Transmit>
    Error_Handler();
 80026ba:	23fa      	movs	r3, #250	; 0xfa
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	1939      	adds	r1, r7, r4
 80026c0:	48ae      	ldr	r0, [pc, #696]	; (800297c <main+0x3f4>)
 80026c2:	2202      	movs	r2, #2
 80026c4:	f001 ffb0 	bl	8004628 <HAL_SPI_Transmit>
  }
 80026c8:	23fa      	movs	r3, #250	; 0xfa
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	2224      	movs	r2, #36	; 0x24
 80026ce:	18b9      	adds	r1, r7, r2
 80026d0:	48aa      	ldr	r0, [pc, #680]	; (800297c <main+0x3f4>)
 80026d2:	2204      	movs	r2, #4
 80026d4:	f001 ffa8 	bl	8004628 <HAL_SPI_Transmit>
  /* USER CODE BEGIN SPI1_Init 2 */
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	015b      	lsls	r3, r3, #5
 80026dc:	48a6      	ldr	r0, [pc, #664]	; (8002978 <main+0x3f0>)
 80026de:	2201      	movs	r2, #1
 80026e0:	0019      	movs	r1, r3
 80026e2:	f001 fa47 	bl	8003b74 <HAL_GPIO_WritePin>

  /* USER CODE END SPI1_Init 2 */
 80026e6:	2064      	movs	r0, #100	; 0x64
 80026e8:	f000 fdbe 	bl	8003268 <HAL_Delay>
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026ee:	3301      	adds	r3, #1
 80026f0:	663b      	str	r3, [r7, #96]	; 0x60
 80026f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026f4:	2b07      	cmp	r3, #7
 80026f6:	ddc7      	ble.n	8002688 <main+0x100>

}

 80026f8:	4ba3      	ldr	r3, [pc, #652]	; (8002988 <main+0x400>)
 80026fa:	64fb      	str	r3, [r7, #76]	; 0x4c
/**
  * @brief USART2 Initialization Function
 80026fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	2420      	movs	r4, #32
 8002702:	193b      	adds	r3, r7, r4
 8002704:	70da      	strb	r2, [r3, #3]
  * @param None
 8002706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002708:	0a1b      	lsrs	r3, r3, #8
 800270a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800270c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800270e:	b2da      	uxtb	r2, r3
 8002710:	193b      	adds	r3, r7, r4
 8002712:	709a      	strb	r2, [r3, #2]
  * @retval None
 8002714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002716:	0a1b      	lsrs	r3, r3, #8
 8002718:	64fb      	str	r3, [r7, #76]	; 0x4c
 800271a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800271c:	b2da      	uxtb	r2, r3
 800271e:	193b      	adds	r3, r7, r4
 8002720:	705a      	strb	r2, [r3, #1]
  */
 8002722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002724:	0a1b      	lsrs	r3, r3, #8
 8002726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800272a:	b2da      	uxtb	r2, r3
 800272c:	193b      	adds	r3, r7, r4
 800272e:	701a      	strb	r2, [r3, #0]
static void MX_USART2_UART_Init(void)
{

 8002730:	251c      	movs	r5, #28
 8002732:	197b      	adds	r3, r7, r5
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN USART2_Init 0 */
 8002738:	197b      	adds	r3, r7, r5
 800273a:	22f4      	movs	r2, #244	; 0xf4
 800273c:	705a      	strb	r2, [r3, #1]

  /* USER CODE END USART2_Init 0 */
 800273e:	2380      	movs	r3, #128	; 0x80
 8002740:	015b      	lsls	r3, r3, #5
 8002742:	488d      	ldr	r0, [pc, #564]	; (8002978 <main+0x3f0>)
 8002744:	2200      	movs	r2, #0
 8002746:	0019      	movs	r1, r3
 8002748:	f001 fa14 	bl	8003b74 <HAL_GPIO_WritePin>

 800274c:	23fa      	movs	r3, #250	; 0xfa
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	262f      	movs	r6, #47	; 0x2f
 8002752:	19b9      	adds	r1, r7, r6
 8002754:	4889      	ldr	r0, [pc, #548]	; (800297c <main+0x3f4>)
 8002756:	2201      	movs	r2, #1
 8002758:	f001 ff66 	bl	8004628 <HAL_SPI_Transmit>
  /* USER CODE BEGIN USART2_Init 1 */
 800275c:	23fa      	movs	r3, #250	; 0xfa
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	1979      	adds	r1, r7, r5
 8002762:	4886      	ldr	r0, [pc, #536]	; (800297c <main+0x3f4>)
 8002764:	2202      	movs	r2, #2
 8002766:	f001 ff5f 	bl	8004628 <HAL_SPI_Transmit>

 800276a:	23fa      	movs	r3, #250	; 0xfa
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	1939      	adds	r1, r7, r4
 8002770:	4882      	ldr	r0, [pc, #520]	; (800297c <main+0x3f4>)
 8002772:	2204      	movs	r2, #4
 8002774:	f001 ff58 	bl	8004628 <HAL_SPI_Transmit>
  /* USER CODE END USART2_Init 1 */
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	015b      	lsls	r3, r3, #5
 800277c:	487e      	ldr	r0, [pc, #504]	; (8002978 <main+0x3f0>)
 800277e:	2201      	movs	r2, #1
 8002780:	0019      	movs	r1, r3
 8002782:	f001 f9f7 	bl	8003b74 <HAL_GPIO_WritePin>
}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
 8002786:	4b81      	ldr	r3, [pc, #516]	; (800298c <main+0x404>)
 8002788:	64bb      	str	r3, [r7, #72]	; 0x48
{

 800278a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800278c:	b2da      	uxtb	r2, r3
 800278e:	2418      	movs	r4, #24
 8002790:	193b      	adds	r3, r7, r4
 8002792:	70da      	strb	r2, [r3, #3]
  /* DMA controller clock enable */
 8002794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002796:	0a1b      	lsrs	r3, r3, #8
 8002798:	64bb      	str	r3, [r7, #72]	; 0x48
 800279a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800279c:	b2da      	uxtb	r2, r3
 800279e:	193b      	adds	r3, r7, r4
 80027a0:	709a      	strb	r2, [r3, #2]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027a4:	0a1b      	lsrs	r3, r3, #8
 80027a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80027a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	193b      	adds	r3, r7, r4
 80027ae:	705a      	strb	r2, [r3, #1]

 80027b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027b2:	0a1b      	lsrs	r3, r3, #8
 80027b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80027b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	193b      	adds	r3, r7, r4
 80027bc:	701a      	strb	r2, [r3, #0]
  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80027be:	2114      	movs	r1, #20
 80027c0:	187b      	adds	r3, r7, r1
 80027c2:	2202      	movs	r2, #2
 80027c4:	701a      	strb	r2, [r3, #0]
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80027c6:	187b      	adds	r3, r7, r1
 80027c8:	222c      	movs	r2, #44	; 0x2c
 80027ca:	705a      	strb	r2, [r3, #1]

}
 80027cc:	2380      	movs	r3, #128	; 0x80
 80027ce:	015b      	lsls	r3, r3, #5
 80027d0:	4869      	ldr	r0, [pc, #420]	; (8002978 <main+0x3f0>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	0019      	movs	r1, r3
 80027d6:	f001 f9cd 	bl	8003b74 <HAL_GPIO_WritePin>

 80027da:	23fa      	movs	r3, #250	; 0xfa
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	0035      	movs	r5, r6
 80027e0:	1979      	adds	r1, r7, r5
 80027e2:	4866      	ldr	r0, [pc, #408]	; (800297c <main+0x3f4>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	f001 ff1f 	bl	8004628 <HAL_SPI_Transmit>
/**
 80027ea:	23fa      	movs	r3, #250	; 0xfa
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	2114      	movs	r1, #20
 80027f0:	1879      	adds	r1, r7, r1
 80027f2:	4862      	ldr	r0, [pc, #392]	; (800297c <main+0x3f4>)
 80027f4:	2202      	movs	r2, #2
 80027f6:	f001 ff17 	bl	8004628 <HAL_SPI_Transmit>
  * @brief GPIO Initialization Function
 80027fa:	23fa      	movs	r3, #250	; 0xfa
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	1939      	adds	r1, r7, r4
 8002800:	485e      	ldr	r0, [pc, #376]	; (800297c <main+0x3f4>)
 8002802:	2204      	movs	r2, #4
 8002804:	f001 ff10 	bl	8004628 <HAL_SPI_Transmit>
  * @param None
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	015b      	lsls	r3, r3, #5
 800280c:	485a      	ldr	r0, [pc, #360]	; (8002978 <main+0x3f0>)
 800280e:	2201      	movs	r2, #1
 8002810:	0019      	movs	r1, r3
 8002812:	f001 f9af 	bl	8003b74 <HAL_GPIO_WritePin>
  * @retval None
  */
 8002816:	4b5e      	ldr	r3, [pc, #376]	; (8002990 <main+0x408>)
 8002818:	647b      	str	r3, [r7, #68]	; 0x44
static void MX_GPIO_Init(void)
{
 800281a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800281c:	b2da      	uxtb	r2, r3
 800281e:	2410      	movs	r4, #16
 8002820:	193b      	adds	r3, r7, r4
 8002822:	70da      	strb	r2, [r3, #3]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	647b      	str	r3, [r7, #68]	; 0x44
 800282a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800282c:	b2da      	uxtb	r2, r3
 800282e:	193b      	adds	r3, r7, r4
 8002830:	709a      	strb	r2, [r3, #2]

 8002832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002834:	0a1b      	lsrs	r3, r3, #8
 8002836:	647b      	str	r3, [r7, #68]	; 0x44
 8002838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800283a:	b2da      	uxtb	r2, r3
 800283c:	193b      	adds	r3, r7, r4
 800283e:	705a      	strb	r2, [r3, #1]
  /* GPIO Ports Clock Enable */
 8002840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	647b      	str	r3, [r7, #68]	; 0x44
 8002846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002848:	b2da      	uxtb	r2, r3
 800284a:	193b      	adds	r3, r7, r4
 800284c:	701a      	strb	r2, [r3, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

 800284e:	260c      	movs	r6, #12
 8002850:	19bb      	adds	r3, r7, r6
 8002852:	2202      	movs	r2, #2
 8002854:	701a      	strb	r2, [r3, #0]
  /*Configure GPIO pin Output Level */
 8002856:	19bb      	adds	r3, r7, r6
 8002858:	2224      	movs	r2, #36	; 0x24
 800285a:	705a      	strb	r2, [r3, #1]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	015b      	lsls	r3, r3, #5
 8002860:	4845      	ldr	r0, [pc, #276]	; (8002978 <main+0x3f0>)
 8002862:	2200      	movs	r2, #0
 8002864:	0019      	movs	r1, r3
 8002866:	f001 f985 	bl	8003b74 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
 800286a:	23fa      	movs	r3, #250	; 0xfa
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	1979      	adds	r1, r7, r5
 8002870:	4842      	ldr	r0, [pc, #264]	; (800297c <main+0x3f4>)
 8002872:	2201      	movs	r2, #1
 8002874:	f001 fed8 	bl	8004628 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002878:	23fa      	movs	r3, #250	; 0xfa
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	19b9      	adds	r1, r7, r6
 800287e:	483f      	ldr	r0, [pc, #252]	; (800297c <main+0x3f4>)
 8002880:	2202      	movs	r2, #2
 8002882:	f001 fed1 	bl	8004628 <HAL_SPI_Transmit>

 8002886:	23fa      	movs	r3, #250	; 0xfa
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	1939      	adds	r1, r7, r4
 800288c:	483b      	ldr	r0, [pc, #236]	; (800297c <main+0x3f4>)
 800288e:	2204      	movs	r2, #4
 8002890:	f001 feca 	bl	8004628 <HAL_SPI_Transmit>
  /*Configure GPIO pins : PA0 PA1 */
 8002894:	2380      	movs	r3, #128	; 0x80
 8002896:	015b      	lsls	r3, r3, #5
 8002898:	4837      	ldr	r0, [pc, #220]	; (8002978 <main+0x3f0>)
 800289a:	2201      	movs	r2, #1
 800289c:	0019      	movs	r1, r3
 800289e:	f001 f969 	bl	8003b74 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80028a2:	f000 fcd7 	bl	8003254 <HAL_GetTick>
 80028a6:	0003      	movs	r3, r0
 80028a8:	643b      	str	r3, [r7, #64]	; 0x40
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80028aa:	235f      	movs	r3, #95	; 0x5f
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]

}

 80028b2:	1dfb      	adds	r3, r7, #7
 80028b4:	2280      	movs	r2, #128	; 0x80
 80028b6:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN 4 */
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	015b      	lsls	r3, r3, #5
 80028bc:	482e      	ldr	r0, [pc, #184]	; (8002978 <main+0x3f0>)
 80028be:	2200      	movs	r2, #0
 80028c0:	0019      	movs	r1, r3
 80028c2:	f001 f957 	bl	8003b74 <HAL_GPIO_WritePin>

 80028c6:	23fa      	movs	r3, #250	; 0xfa
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	222f      	movs	r2, #47	; 0x2f
 80028cc:	18b9      	adds	r1, r7, r2
 80028ce:	482b      	ldr	r0, [pc, #172]	; (800297c <main+0x3f4>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	f001 fea9 	bl	8004628 <HAL_SPI_Transmit>
/* USER CODE END 4 */
 80028d6:	23fa      	movs	r3, #250	; 0xfa
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	2228      	movs	r2, #40	; 0x28
 80028dc:	18b9      	adds	r1, r7, r2
 80028de:	4827      	ldr	r0, [pc, #156]	; (800297c <main+0x3f4>)
 80028e0:	2202      	movs	r2, #2
 80028e2:	f001 fea1 	bl	8004628 <HAL_SPI_Transmit>

 80028e6:	23fa      	movs	r3, #250	; 0xfa
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	1df9      	adds	r1, r7, #7
 80028ec:	4823      	ldr	r0, [pc, #140]	; (800297c <main+0x3f4>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	f001 fe9a 	bl	8004628 <HAL_SPI_Transmit>
/**
 80028f4:	2380      	movs	r3, #128	; 0x80
 80028f6:	015b      	lsls	r3, r3, #5
 80028f8:	481f      	ldr	r0, [pc, #124]	; (8002978 <main+0x3f0>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	0019      	movs	r1, r3
 80028fe:	f001 f939 	bl	8003b74 <HAL_GPIO_WritePin>
  * @brief  This function is executed in case of error occurrence.
  * @retval None
 8002902:	235e      	movs	r3, #94	; 0x5e
 8002904:	18fb      	adds	r3, r7, r3
 8002906:	2200      	movs	r2, #0
 8002908:	701a      	strb	r2, [r3, #0]
  */
void Error_Handler(void)
 800290a:	e02c      	b.n	8002966 <main+0x3de>
{
  /* USER CODE BEGIN Error_Handler_Debug */
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	015b      	lsls	r3, r3, #5
 8002910:	4819      	ldr	r0, [pc, #100]	; (8002978 <main+0x3f0>)
 8002912:	2200      	movs	r2, #0
 8002914:	0019      	movs	r1, r3
 8002916:	f001 f92d 	bl	8003b74 <HAL_GPIO_WritePin>
  /* User can add his own implementation to report the HAL error return state */
 800291a:	23fa      	movs	r3, #250	; 0xfa
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	222e      	movs	r2, #46	; 0x2e
 8002920:	18b9      	adds	r1, r7, r2
 8002922:	4816      	ldr	r0, [pc, #88]	; (800297c <main+0x3f4>)
 8002924:	2201      	movs	r2, #1
 8002926:	f001 fe7f 	bl	8004628 <HAL_SPI_Transmit>
  __disable_irq();
 800292a:	23fa      	movs	r3, #250	; 0xfa
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	2228      	movs	r2, #40	; 0x28
 8002930:	18b9      	adds	r1, r7, r2
 8002932:	4812      	ldr	r0, [pc, #72]	; (800297c <main+0x3f4>)
 8002934:	2202      	movs	r2, #2
 8002936:	f001 fe77 	bl	8004628 <HAL_SPI_Transmit>
  while (1)
 800293a:	23fa      	movs	r3, #250	; 0xfa
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	242d      	movs	r4, #45	; 0x2d
 8002940:	1939      	adds	r1, r7, r4
 8002942:	480e      	ldr	r0, [pc, #56]	; (800297c <main+0x3f4>)
 8002944:	2201      	movs	r2, #1
 8002946:	f001 ffc7 	bl	80048d8 <HAL_SPI_Receive>
  {
 800294a:	2380      	movs	r3, #128	; 0x80
 800294c:	015b      	lsls	r3, r3, #5
 800294e:	480a      	ldr	r0, [pc, #40]	; (8002978 <main+0x3f0>)
 8002950:	2201      	movs	r2, #1
 8002952:	0019      	movs	r1, r3
 8002954:	f001 f90e 	bl	8003b74 <HAL_GPIO_WritePin>
  }
  /* USER CODE END Error_Handler_Debug */
 8002958:	193b      	adds	r3, r7, r4
 800295a:	781a      	ldrb	r2, [r3, #0]
 800295c:	235e      	movs	r3, #94	; 0x5e
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	2140      	movs	r1, #64	; 0x40
 8002962:	400a      	ands	r2, r1
 8002964:	701a      	strb	r2, [r3, #0]
void Error_Handler(void)
 8002966:	235e      	movs	r3, #94	; 0x5e
 8002968:	18fb      	adds	r3, r7, r3
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0cd      	beq.n	800290c <main+0x384>
#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
 8002970:	2300      	movs	r3, #0
 8002972:	65bb      	str	r3, [r7, #88]	; 0x58
 8002974:	e098      	b.n	8002aa8 <main+0x520>
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	48000400 	.word	0x48000400
 800297c:	20000a4c 	.word	0x20000a4c
 8002980:	0800a5f8 	.word	0x0800a5f8
 8002984:	3b300000 	.word	0x3b300000
 8002988:	001fe1ff 	.word	0x001fe1ff
 800298c:	62a0c000 	.word	0x62a0c000
 8002990:	e81f401e 	.word	0xe81f401e
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
 8002994:	1d3b      	adds	r3, r7, #4
 8002996:	2200      	movs	r2, #0
 8002998:	701a      	strb	r2, [r3, #0]
{
 800299a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800299c:	3304      	adds	r3, #4
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	1d3b      	adds	r3, r7, #4
 80029a6:	705a      	strb	r2, [r3, #1]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80029a8:	2380      	movs	r3, #128	; 0x80
 80029aa:	015b      	lsls	r3, r3, #5
 80029ac:	484c      	ldr	r0, [pc, #304]	; (8002ae0 <main+0x558>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	0019      	movs	r1, r3
 80029b2:	f001 f8df 	bl	8003b74 <HAL_GPIO_WritePin>
#endif /* USE_FULL_ASSERT */
 80029b6:	23fa      	movs	r3, #250	; 0xfa
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	222e      	movs	r2, #46	; 0x2e
 80029bc:	18b9      	adds	r1, r7, r2
 80029be:	4849      	ldr	r0, [pc, #292]	; (8002ae4 <main+0x55c>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	f001 fe31 	bl	8004628 <HAL_SPI_Transmit>

 80029c6:	23fa      	movs	r3, #250	; 0xfa
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	1d39      	adds	r1, r7, #4
 80029cc:	4845      	ldr	r0, [pc, #276]	; (8002ae4 <main+0x55c>)
 80029ce:	2202      	movs	r2, #2
 80029d0:	f001 fe2a 	bl	8004628 <HAL_SPI_Transmit>
/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
 80029d4:	23fa      	movs	r3, #250	; 0xfa
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	0039      	movs	r1, r7
 80029da:	4842      	ldr	r0, [pc, #264]	; (8002ae4 <main+0x55c>)
 80029dc:	2204      	movs	r2, #4
 80029de:	f001 ff7b 	bl	80048d8 <HAL_SPI_Receive>
 80029e2:	2380      	movs	r3, #128	; 0x80
 80029e4:	015b      	lsls	r3, r3, #5
 80029e6:	483e      	ldr	r0, [pc, #248]	; (8002ae0 <main+0x558>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	0019      	movs	r1, r3
 80029ec:	f001 f8c2 	bl	8003b74 <HAL_GPIO_WritePin>
 80029f0:	003b      	movs	r3, r7
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	061a      	lsls	r2, r3, #24
 80029f6:	003b      	movs	r3, r7
 80029f8:	785b      	ldrb	r3, [r3, #1]
 80029fa:	041b      	lsls	r3, r3, #16
 80029fc:	431a      	orrs	r2, r3
 80029fe:	003b      	movs	r3, r7
 8002a00:	789b      	ldrb	r3, [r3, #2]
 8002a02:	021b      	lsls	r3, r3, #8
 8002a04:	4313      	orrs	r3, r2
 8002a06:	003a      	movs	r2, r7
 8002a08:	78d2      	ldrb	r2, [r2, #3]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a10:	0e1b      	lsrs	r3, r3, #24
 8002a12:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a16:	021b      	lsls	r3, r3, #8
 8002a18:	0a1b      	lsrs	r3, r3, #8
 8002a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1e:	657b      	str	r3, [r7, #84]	; 0x54
 8002a20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	041b      	lsls	r3, r3, #16
 8002a26:	4013      	ands	r3, r2
 8002a28:	d004      	beq.n	8002a34 <main+0x4ac>
 8002a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a2c:	22ff      	movs	r2, #255	; 0xff
 8002a2e:	0612      	lsls	r2, r2, #24
 8002a30:	4313      	orrs	r3, r2
 8002a32:	657b      	str	r3, [r7, #84]	; 0x54
 8002a34:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002a36:	f7fd fe5b 	bl	80006f0 <__aeabi_i2f>
 8002a3a:	1c03      	adds	r3, r0, #0
 8002a3c:	2189      	movs	r1, #137	; 0x89
 8002a3e:	05c9      	lsls	r1, r1, #23
 8002a40:	1c18      	adds	r0, r3, #0
 8002a42:	f7fd fd43 	bl	80004cc <__aeabi_fdiv>
 8002a46:	1c03      	adds	r3, r0, #0
 8002a48:	633b      	str	r3, [r7, #48]	; 0x30
 8002a4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d002      	beq.n	8002a56 <main+0x4ce>
 8002a50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a52:	2b0b      	cmp	r3, #11
 8002a54:	d125      	bne.n	8002aa2 <main+0x51a>
 8002a56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a58:	1c5c      	adds	r4, r3, #1
 8002a5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a5c:	f7ff fc30 	bl	80022c0 <__aeabi_f2d>
 8002a60:	0005      	movs	r5, r0
 8002a62:	000e      	movs	r6, r1
 8002a64:	f000 fbf6 	bl	8003254 <HAL_GetTick>
 8002a68:	0003      	movs	r3, r0
 8002a6a:	481f      	ldr	r0, [pc, #124]	; (8002ae8 <main+0x560>)
 8002a6c:	9301      	str	r3, [sp, #4]
 8002a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	002a      	movs	r2, r5
 8002a74:	0033      	movs	r3, r6
 8002a76:	0021      	movs	r1, r4
 8002a78:	f004 f982 	bl	8006d80 <iprintf>
 8002a7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a7e:	1c5c      	adds	r4, r3, #1
 8002a80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a82:	f7ff fc1d 	bl	80022c0 <__aeabi_f2d>
 8002a86:	0005      	movs	r5, r0
 8002a88:	000e      	movs	r6, r1
 8002a8a:	f000 fbe3 	bl	8003254 <HAL_GetTick>
 8002a8e:	0003      	movs	r3, r0
 8002a90:	4815      	ldr	r0, [pc, #84]	; (8002ae8 <main+0x560>)
 8002a92:	9301      	str	r3, [sp, #4]
 8002a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	002a      	movs	r2, r5
 8002a9a:	0033      	movs	r3, r6
 8002a9c:	0021      	movs	r1, r4
 8002a9e:	f004 f96f 	bl	8006d80 <iprintf>
  * @param  line: assert_param error line source number
 8002aa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002aa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aaa:	2b13      	cmp	r3, #19
 8002aac:	dc00      	bgt.n	8002ab0 <main+0x528>
 8002aae:	e771      	b.n	8002994 <main+0x40c>
 8002ab0:	215f      	movs	r1, #95	; 0x5f
 8002ab2:	187b      	adds	r3, r7, r1
 8002ab4:	781a      	ldrb	r2, [r3, #0]
 8002ab6:	187b      	adds	r3, r7, r1
 8002ab8:	3201      	adds	r2, #1
 8002aba:	701a      	strb	r2, [r3, #0]
 8002abc:	187b      	adds	r3, r7, r1
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b09      	cmp	r3, #9
 8002ac2:	d800      	bhi.n	8002ac6 <main+0x53e>
 8002ac4:	e6f5      	b.n	80028b2 <main+0x32a>
 8002ac6:	f000 fbc5 	bl	8003254 <HAL_GetTick>
 8002aca:	0001      	movs	r1, r0
 8002acc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ace:	4b07      	ldr	r3, [pc, #28]	; (8002aec <main+0x564>)
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f004 f955 	bl	8006d80 <iprintf>
 8002ad6:	235f      	movs	r3, #95	; 0x5f
 8002ad8:	18fb      	adds	r3, r7, r3
 8002ada:	2200      	movs	r2, #0
 8002adc:	701a      	strb	r2, [r3, #0]
}
 8002ade:	e6e8      	b.n	80028b2 <main+0x32a>
 8002ae0:	48000400 	.word	0x48000400
 8002ae4:	20000a4c 	.word	0x20000a4c
 8002ae8:	0800a610 	.word	0x0800a610
 8002aec:	0800a640 	.word	0x0800a640

08002af0 <SystemClock_Config>:
 8002af0:	b590      	push	{r4, r7, lr}
 8002af2:	b091      	sub	sp, #68	; 0x44
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	2410      	movs	r4, #16
 8002af8:	193b      	adds	r3, r7, r4
 8002afa:	0018      	movs	r0, r3
 8002afc:	2330      	movs	r3, #48	; 0x30
 8002afe:	001a      	movs	r2, r3
 8002b00:	2100      	movs	r1, #0
 8002b02:	f003 fad8 	bl	80060b6 <memset>
 8002b06:	003b      	movs	r3, r7
 8002b08:	0018      	movs	r0, r3
 8002b0a:	2310      	movs	r3, #16
 8002b0c:	001a      	movs	r2, r3
 8002b0e:	2100      	movs	r1, #0
 8002b10:	f003 fad1 	bl	80060b6 <memset>
 8002b14:	0021      	movs	r1, r4
 8002b16:	187b      	adds	r3, r7, r1
 8002b18:	2202      	movs	r2, #2
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	187b      	adds	r3, r7, r1
 8002b1e:	2201      	movs	r2, #1
 8002b20:	60da      	str	r2, [r3, #12]
 8002b22:	187b      	adds	r3, r7, r1
 8002b24:	2210      	movs	r2, #16
 8002b26:	611a      	str	r2, [r3, #16]
 8002b28:	187b      	adds	r3, r7, r1
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	621a      	str	r2, [r3, #32]
 8002b2e:	187b      	adds	r3, r7, r1
 8002b30:	0018      	movs	r0, r3
 8002b32:	f001 f859 	bl	8003be8 <HAL_RCC_OscConfig>
 8002b36:	1e03      	subs	r3, r0, #0
 8002b38:	d001      	beq.n	8002b3e <SystemClock_Config+0x4e>
 8002b3a:	f000 f927 	bl	8002d8c <Error_Handler>
 8002b3e:	003b      	movs	r3, r7
 8002b40:	2207      	movs	r2, #7
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	003b      	movs	r3, r7
 8002b46:	2200      	movs	r2, #0
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	003b      	movs	r3, r7
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	003b      	movs	r3, r7
 8002b52:	2200      	movs	r2, #0
 8002b54:	60da      	str	r2, [r3, #12]
 8002b56:	003b      	movs	r3, r7
 8002b58:	2100      	movs	r1, #0
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f001 fb5c 	bl	8004218 <HAL_RCC_ClockConfig>
 8002b60:	1e03      	subs	r3, r0, #0
 8002b62:	d001      	beq.n	8002b68 <SystemClock_Config+0x78>
 8002b64:	f000 f912 	bl	8002d8c <Error_Handler>
 8002b68:	46c0      	nop			; (mov r8, r8)
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	b011      	add	sp, #68	; 0x44
 8002b6e:	bd90      	pop	{r4, r7, pc}

08002b70 <MX_SPI1_Init>:
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <MX_SPI1_Init+0x74>)
 8002b76:	4a1c      	ldr	r2, [pc, #112]	; (8002be8 <MX_SPI1_Init+0x78>)
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	4b1a      	ldr	r3, [pc, #104]	; (8002be4 <MX_SPI1_Init+0x74>)
 8002b7c:	2282      	movs	r2, #130	; 0x82
 8002b7e:	0052      	lsls	r2, r2, #1
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	4b18      	ldr	r3, [pc, #96]	; (8002be4 <MX_SPI1_Init+0x74>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	4b16      	ldr	r3, [pc, #88]	; (8002be4 <MX_SPI1_Init+0x74>)
 8002b8a:	22e0      	movs	r2, #224	; 0xe0
 8002b8c:	00d2      	lsls	r2, r2, #3
 8002b8e:	60da      	str	r2, [r3, #12]
 8002b90:	4b14      	ldr	r3, [pc, #80]	; (8002be4 <MX_SPI1_Init+0x74>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	611a      	str	r2, [r3, #16]
 8002b96:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <MX_SPI1_Init+0x74>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	615a      	str	r2, [r3, #20]
 8002b9c:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <MX_SPI1_Init+0x74>)
 8002b9e:	2280      	movs	r2, #128	; 0x80
 8002ba0:	0092      	lsls	r2, r2, #2
 8002ba2:	619a      	str	r2, [r3, #24]
 8002ba4:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <MX_SPI1_Init+0x74>)
 8002ba6:	2208      	movs	r2, #8
 8002ba8:	61da      	str	r2, [r3, #28]
 8002baa:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <MX_SPI1_Init+0x74>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	621a      	str	r2, [r3, #32]
 8002bb0:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <MX_SPI1_Init+0x74>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	625a      	str	r2, [r3, #36]	; 0x24
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <MX_SPI1_Init+0x74>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	629a      	str	r2, [r3, #40]	; 0x28
 8002bbc:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <MX_SPI1_Init+0x74>)
 8002bbe:	2207      	movs	r2, #7
 8002bc0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bc2:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <MX_SPI1_Init+0x74>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	631a      	str	r2, [r3, #48]	; 0x30
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <MX_SPI1_Init+0x74>)
 8002bca:	2208      	movs	r2, #8
 8002bcc:	635a      	str	r2, [r3, #52]	; 0x34
 8002bce:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <MX_SPI1_Init+0x74>)
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f001 fc71 	bl	80044b8 <HAL_SPI_Init>
 8002bd6:	1e03      	subs	r3, r0, #0
 8002bd8:	d001      	beq.n	8002bde <MX_SPI1_Init+0x6e>
 8002bda:	f000 f8d7 	bl	8002d8c <Error_Handler>
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	20000a4c 	.word	0x20000a4c
 8002be8:	40013000 	.word	0x40013000

08002bec <MX_USART2_UART_Init>:
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002bf2:	4a15      	ldr	r2, [pc, #84]	; (8002c48 <MX_USART2_UART_Init+0x5c>)
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002bf8:	22e1      	movs	r2, #225	; 0xe1
 8002bfa:	0252      	lsls	r2, r2, #9
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	4b11      	ldr	r3, [pc, #68]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	609a      	str	r2, [r3, #8]
 8002c04:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	611a      	str	r2, [r3, #16]
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002c12:	2208      	movs	r2, #8
 8002c14:	615a      	str	r2, [r3, #20]
 8002c16:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	619a      	str	r2, [r3, #24]
 8002c1c:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	61da      	str	r2, [r3, #28]
 8002c22:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	621a      	str	r2, [r3, #32]
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24
 8002c2e:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <MX_USART2_UART_Init+0x58>)
 8002c30:	0018      	movs	r0, r3
 8002c32:	f002 fb39 	bl	80052a8 <HAL_UART_Init>
 8002c36:	1e03      	subs	r3, r0, #0
 8002c38:	d001      	beq.n	8002c3e <MX_USART2_UART_Init+0x52>
 8002c3a:	f000 f8a7 	bl	8002d8c <Error_Handler>
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20000ab0 	.word	0x20000ab0
 8002c48:	40004400 	.word	0x40004400

08002c4c <MX_DMA_Init>:
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <MX_DMA_Init+0x38>)
 8002c54:	695a      	ldr	r2, [r3, #20]
 8002c56:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <MX_DMA_Init+0x38>)
 8002c58:	2101      	movs	r1, #1
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	615a      	str	r2, [r3, #20]
 8002c5e:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <MX_DMA_Init+0x38>)
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	2201      	movs	r2, #1
 8002c64:	4013      	ands	r3, r2
 8002c66:	607b      	str	r3, [r7, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	200a      	movs	r0, #10
 8002c70:	f000 fbc8 	bl	8003404 <HAL_NVIC_SetPriority>
 8002c74:	200a      	movs	r0, #10
 8002c76:	f000 fbda 	bl	800342e <HAL_NVIC_EnableIRQ>
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b002      	add	sp, #8
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	40021000 	.word	0x40021000

08002c88 <MX_GPIO_Init>:
 8002c88:	b590      	push	{r4, r7, lr}
 8002c8a:	b089      	sub	sp, #36	; 0x24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	240c      	movs	r4, #12
 8002c90:	193b      	adds	r3, r7, r4
 8002c92:	0018      	movs	r0, r3
 8002c94:	2314      	movs	r3, #20
 8002c96:	001a      	movs	r2, r3
 8002c98:	2100      	movs	r1, #0
 8002c9a:	f003 fa0c 	bl	80060b6 <memset>
 8002c9e:	4b38      	ldr	r3, [pc, #224]	; (8002d80 <MX_GPIO_Init+0xf8>)
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	4b37      	ldr	r3, [pc, #220]	; (8002d80 <MX_GPIO_Init+0xf8>)
 8002ca4:	2180      	movs	r1, #128	; 0x80
 8002ca6:	0289      	lsls	r1, r1, #10
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	615a      	str	r2, [r3, #20]
 8002cac:	4b34      	ldr	r3, [pc, #208]	; (8002d80 <MX_GPIO_Init+0xf8>)
 8002cae:	695a      	ldr	r2, [r3, #20]
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	029b      	lsls	r3, r3, #10
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4b31      	ldr	r3, [pc, #196]	; (8002d80 <MX_GPIO_Init+0xf8>)
 8002cbc:	695a      	ldr	r2, [r3, #20]
 8002cbe:	4b30      	ldr	r3, [pc, #192]	; (8002d80 <MX_GPIO_Init+0xf8>)
 8002cc0:	2180      	movs	r1, #128	; 0x80
 8002cc2:	02c9      	lsls	r1, r1, #11
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	615a      	str	r2, [r3, #20]
 8002cc8:	4b2d      	ldr	r3, [pc, #180]	; (8002d80 <MX_GPIO_Init+0xf8>)
 8002cca:	695a      	ldr	r2, [r3, #20]
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	02db      	lsls	r3, r3, #11
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	607b      	str	r3, [r7, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2390      	movs	r3, #144	; 0x90
 8002cd8:	05db      	lsls	r3, r3, #23
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2103      	movs	r1, #3
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f000 ff48 	bl	8003b74 <HAL_GPIO_WritePin>
 8002ce4:	2380      	movs	r3, #128	; 0x80
 8002ce6:	015b      	lsls	r3, r3, #5
 8002ce8:	4826      	ldr	r0, [pc, #152]	; (8002d84 <MX_GPIO_Init+0xfc>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	0019      	movs	r1, r3
 8002cee:	f000 ff41 	bl	8003b74 <HAL_GPIO_WritePin>
 8002cf2:	0021      	movs	r1, r4
 8002cf4:	187b      	adds	r3, r7, r1
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	187b      	adds	r3, r7, r1
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	605a      	str	r2, [r3, #4]
 8002d00:	187b      	adds	r3, r7, r1
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]
 8002d06:	187b      	adds	r3, r7, r1
 8002d08:	2200      	movs	r2, #0
 8002d0a:	60da      	str	r2, [r3, #12]
 8002d0c:	000c      	movs	r4, r1
 8002d0e:	187a      	adds	r2, r7, r1
 8002d10:	2390      	movs	r3, #144	; 0x90
 8002d12:	05db      	lsls	r3, r3, #23
 8002d14:	0011      	movs	r1, r2
 8002d16:	0018      	movs	r0, r3
 8002d18:	f000 fdbc 	bl	8003894 <HAL_GPIO_Init>
 8002d1c:	0021      	movs	r1, r4
 8002d1e:	187b      	adds	r3, r7, r1
 8002d20:	2280      	movs	r2, #128	; 0x80
 8002d22:	0112      	lsls	r2, r2, #4
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	187b      	adds	r3, r7, r1
 8002d28:	4a17      	ldr	r2, [pc, #92]	; (8002d88 <MX_GPIO_Init+0x100>)
 8002d2a:	605a      	str	r2, [r3, #4]
 8002d2c:	187b      	adds	r3, r7, r1
 8002d2e:	2200      	movs	r2, #0
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	000c      	movs	r4, r1
 8002d34:	187b      	adds	r3, r7, r1
 8002d36:	4a13      	ldr	r2, [pc, #76]	; (8002d84 <MX_GPIO_Init+0xfc>)
 8002d38:	0019      	movs	r1, r3
 8002d3a:	0010      	movs	r0, r2
 8002d3c:	f000 fdaa 	bl	8003894 <HAL_GPIO_Init>
 8002d40:	0021      	movs	r1, r4
 8002d42:	187b      	adds	r3, r7, r1
 8002d44:	2280      	movs	r2, #128	; 0x80
 8002d46:	0152      	lsls	r2, r2, #5
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	187b      	adds	r3, r7, r1
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	605a      	str	r2, [r3, #4]
 8002d50:	187b      	adds	r3, r7, r1
 8002d52:	2200      	movs	r2, #0
 8002d54:	609a      	str	r2, [r3, #8]
 8002d56:	187b      	adds	r3, r7, r1
 8002d58:	2200      	movs	r2, #0
 8002d5a:	60da      	str	r2, [r3, #12]
 8002d5c:	187b      	adds	r3, r7, r1
 8002d5e:	4a09      	ldr	r2, [pc, #36]	; (8002d84 <MX_GPIO_Init+0xfc>)
 8002d60:	0019      	movs	r1, r3
 8002d62:	0010      	movs	r0, r2
 8002d64:	f000 fd96 	bl	8003894 <HAL_GPIO_Init>
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	2007      	movs	r0, #7
 8002d6e:	f000 fb49 	bl	8003404 <HAL_NVIC_SetPriority>
 8002d72:	2007      	movs	r0, #7
 8002d74:	f000 fb5b 	bl	800342e <HAL_NVIC_EnableIRQ>
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b009      	add	sp, #36	; 0x24
 8002d7e:	bd90      	pop	{r4, r7, pc}
 8002d80:	40021000 	.word	0x40021000
 8002d84:	48000400 	.word	0x48000400
 8002d88:	10110000 	.word	0x10110000

08002d8c <Error_Handler>:
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d90:	b672      	cpsid	i
 8002d92:	e7fe      	b.n	8002d92 <Error_Handler+0x6>

08002d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9a:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <HAL_MspInit+0x44>)
 8002d9c:	699a      	ldr	r2, [r3, #24]
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <HAL_MspInit+0x44>)
 8002da0:	2101      	movs	r1, #1
 8002da2:	430a      	orrs	r2, r1
 8002da4:	619a      	str	r2, [r3, #24]
 8002da6:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <HAL_MspInit+0x44>)
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	2201      	movs	r2, #1
 8002dac:	4013      	ands	r3, r2
 8002dae:	607b      	str	r3, [r7, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <HAL_MspInit+0x44>)
 8002db4:	69da      	ldr	r2, [r3, #28]
 8002db6:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <HAL_MspInit+0x44>)
 8002db8:	2180      	movs	r1, #128	; 0x80
 8002dba:	0549      	lsls	r1, r1, #21
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	61da      	str	r2, [r3, #28]
 8002dc0:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <HAL_MspInit+0x44>)
 8002dc2:	69da      	ldr	r2, [r3, #28]
 8002dc4:	2380      	movs	r3, #128	; 0x80
 8002dc6:	055b      	lsls	r3, r3, #21
 8002dc8:	4013      	ands	r3, r2
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	b002      	add	sp, #8
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	40021000 	.word	0x40021000

08002ddc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	; 0x28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de4:	2314      	movs	r3, #20
 8002de6:	18fb      	adds	r3, r7, r3
 8002de8:	0018      	movs	r0, r3
 8002dea:	2314      	movs	r3, #20
 8002dec:	001a      	movs	r2, r3
 8002dee:	2100      	movs	r1, #0
 8002df0:	f003 f961 	bl	80060b6 <memset>
  if(hspi->Instance==SPI1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a1c      	ldr	r2, [pc, #112]	; (8002e6c <HAL_SPI_MspInit+0x90>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d132      	bne.n	8002e64 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002dfe:	4b1c      	ldr	r3, [pc, #112]	; (8002e70 <HAL_SPI_MspInit+0x94>)
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <HAL_SPI_MspInit+0x94>)
 8002e04:	2180      	movs	r1, #128	; 0x80
 8002e06:	0149      	lsls	r1, r1, #5
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	619a      	str	r2, [r3, #24]
 8002e0c:	4b18      	ldr	r3, [pc, #96]	; (8002e70 <HAL_SPI_MspInit+0x94>)
 8002e0e:	699a      	ldr	r2, [r3, #24]
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	015b      	lsls	r3, r3, #5
 8002e14:	4013      	ands	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1a:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <HAL_SPI_MspInit+0x94>)
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <HAL_SPI_MspInit+0x94>)
 8002e20:	2180      	movs	r1, #128	; 0x80
 8002e22:	0289      	lsls	r1, r1, #10
 8002e24:	430a      	orrs	r2, r1
 8002e26:	615a      	str	r2, [r3, #20]
 8002e28:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <HAL_SPI_MspInit+0x94>)
 8002e2a:	695a      	ldr	r2, [r3, #20]
 8002e2c:	2380      	movs	r3, #128	; 0x80
 8002e2e:	029b      	lsls	r3, r3, #10
 8002e30:	4013      	ands	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002e36:	2114      	movs	r1, #20
 8002e38:	187b      	adds	r3, r7, r1
 8002e3a:	22e0      	movs	r2, #224	; 0xe0
 8002e3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3e:	187b      	adds	r3, r7, r1
 8002e40:	2202      	movs	r2, #2
 8002e42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	187b      	adds	r3, r7, r1
 8002e46:	2200      	movs	r2, #0
 8002e48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e4a:	187b      	adds	r3, r7, r1
 8002e4c:	2203      	movs	r2, #3
 8002e4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002e50:	187b      	adds	r3, r7, r1
 8002e52:	2200      	movs	r2, #0
 8002e54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e56:	187a      	adds	r2, r7, r1
 8002e58:	2390      	movs	r3, #144	; 0x90
 8002e5a:	05db      	lsls	r3, r3, #23
 8002e5c:	0011      	movs	r1, r2
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f000 fd18 	bl	8003894 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002e64:	46c0      	nop			; (mov r8, r8)
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b00a      	add	sp, #40	; 0x28
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40013000 	.word	0x40013000
 8002e70:	40021000 	.word	0x40021000

08002e74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08a      	sub	sp, #40	; 0x28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e7c:	2314      	movs	r3, #20
 8002e7e:	18fb      	adds	r3, r7, r3
 8002e80:	0018      	movs	r0, r3
 8002e82:	2314      	movs	r3, #20
 8002e84:	001a      	movs	r2, r3
 8002e86:	2100      	movs	r1, #0
 8002e88:	f003 f915 	bl	80060b6 <memset>
  if(huart->Instance==USART2)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a3b      	ldr	r2, [pc, #236]	; (8002f80 <HAL_UART_MspInit+0x10c>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d170      	bne.n	8002f78 <HAL_UART_MspInit+0x104>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e96:	4b3b      	ldr	r3, [pc, #236]	; (8002f84 <HAL_UART_MspInit+0x110>)
 8002e98:	69da      	ldr	r2, [r3, #28]
 8002e9a:	4b3a      	ldr	r3, [pc, #232]	; (8002f84 <HAL_UART_MspInit+0x110>)
 8002e9c:	2180      	movs	r1, #128	; 0x80
 8002e9e:	0289      	lsls	r1, r1, #10
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	61da      	str	r2, [r3, #28]
 8002ea4:	4b37      	ldr	r3, [pc, #220]	; (8002f84 <HAL_UART_MspInit+0x110>)
 8002ea6:	69da      	ldr	r2, [r3, #28]
 8002ea8:	2380      	movs	r3, #128	; 0x80
 8002eaa:	029b      	lsls	r3, r3, #10
 8002eac:	4013      	ands	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
 8002eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb2:	4b34      	ldr	r3, [pc, #208]	; (8002f84 <HAL_UART_MspInit+0x110>)
 8002eb4:	695a      	ldr	r2, [r3, #20]
 8002eb6:	4b33      	ldr	r3, [pc, #204]	; (8002f84 <HAL_UART_MspInit+0x110>)
 8002eb8:	2180      	movs	r1, #128	; 0x80
 8002eba:	0289      	lsls	r1, r1, #10
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	615a      	str	r2, [r3, #20]
 8002ec0:	4b30      	ldr	r3, [pc, #192]	; (8002f84 <HAL_UART_MspInit+0x110>)
 8002ec2:	695a      	ldr	r2, [r3, #20]
 8002ec4:	2380      	movs	r3, #128	; 0x80
 8002ec6:	029b      	lsls	r3, r3, #10
 8002ec8:	4013      	ands	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ece:	2114      	movs	r1, #20
 8002ed0:	187b      	adds	r3, r7, r1
 8002ed2:	220c      	movs	r2, #12
 8002ed4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed6:	187b      	adds	r3, r7, r1
 8002ed8:	2202      	movs	r2, #2
 8002eda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002edc:	187b      	adds	r3, r7, r1
 8002ede:	2200      	movs	r2, #0
 8002ee0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ee2:	187b      	adds	r3, r7, r1
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002ee8:	187b      	adds	r3, r7, r1
 8002eea:	2201      	movs	r2, #1
 8002eec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eee:	187a      	adds	r2, r7, r1
 8002ef0:	2390      	movs	r3, #144	; 0x90
 8002ef2:	05db      	lsls	r3, r3, #23
 8002ef4:	0011      	movs	r1, r2
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f000 fccc 	bl	8003894 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8002efc:	4b22      	ldr	r3, [pc, #136]	; (8002f88 <HAL_UART_MspInit+0x114>)
 8002efe:	4a23      	ldr	r2, [pc, #140]	; (8002f8c <HAL_UART_MspInit+0x118>)
 8002f00:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f02:	4b21      	ldr	r3, [pc, #132]	; (8002f88 <HAL_UART_MspInit+0x114>)
 8002f04:	2210      	movs	r2, #16
 8002f06:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f08:	4b1f      	ldr	r3, [pc, #124]	; (8002f88 <HAL_UART_MspInit+0x114>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	; (8002f88 <HAL_UART_MspInit+0x114>)
 8002f10:	2280      	movs	r2, #128	; 0x80
 8002f12:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f14:	4b1c      	ldr	r3, [pc, #112]	; (8002f88 <HAL_UART_MspInit+0x114>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f1a:	4b1b      	ldr	r3, [pc, #108]	; (8002f88 <HAL_UART_MspInit+0x114>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002f20:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <HAL_UART_MspInit+0x114>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f26:	4b18      	ldr	r3, [pc, #96]	; (8002f88 <HAL_UART_MspInit+0x114>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002f2c:	4b16      	ldr	r3, [pc, #88]	; (8002f88 <HAL_UART_MspInit+0x114>)
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f000 fa9a 	bl	8003468 <HAL_DMA_Init>
 8002f34:	1e03      	subs	r3, r0, #0
 8002f36:	d001      	beq.n	8002f3c <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8002f38:	f7ff ff28 	bl	8002d8c <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 8002f3c:	4a14      	ldr	r2, [pc, #80]	; (8002f90 <HAL_UART_MspInit+0x11c>)
 8002f3e:	23a8      	movs	r3, #168	; 0xa8
 8002f40:	58d3      	ldr	r3, [r2, r3]
 8002f42:	4913      	ldr	r1, [pc, #76]	; (8002f90 <HAL_UART_MspInit+0x11c>)
 8002f44:	22f0      	movs	r2, #240	; 0xf0
 8002f46:	4393      	bics	r3, r2
 8002f48:	22a8      	movs	r2, #168	; 0xa8
 8002f4a:	508b      	str	r3, [r1, r2]
 8002f4c:	4a10      	ldr	r2, [pc, #64]	; (8002f90 <HAL_UART_MspInit+0x11c>)
 8002f4e:	23a8      	movs	r3, #168	; 0xa8
 8002f50:	58d3      	ldr	r3, [r2, r3]
 8002f52:	490f      	ldr	r1, [pc, #60]	; (8002f90 <HAL_UART_MspInit+0x11c>)
 8002f54:	2290      	movs	r2, #144	; 0x90
 8002f56:	4313      	orrs	r3, r2
 8002f58:	22a8      	movs	r2, #168	; 0xa8
 8002f5a:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a0a      	ldr	r2, [pc, #40]	; (8002f88 <HAL_UART_MspInit+0x114>)
 8002f60:	66da      	str	r2, [r3, #108]	; 0x6c
 8002f62:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <HAL_UART_MspInit+0x114>)
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	201c      	movs	r0, #28
 8002f6e:	f000 fa49 	bl	8003404 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f72:	201c      	movs	r0, #28
 8002f74:	f000 fa5b 	bl	800342e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f78:	46c0      	nop			; (mov r8, r8)
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b00a      	add	sp, #40	; 0x28
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40004400 	.word	0x40004400
 8002f84:	40021000 	.word	0x40021000
 8002f88:	20000a08 	.word	0x20000a08
 8002f8c:	4002001c 	.word	0x4002001c
 8002f90:	40020000 	.word	0x40020000

08002f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f98:	e7fe      	b.n	8002f98 <NMI_Handler+0x4>

08002f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f9e:	e7fe      	b.n	8002f9e <HardFault_Handler+0x4>

08002fa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002fa4:	46c0      	nop			; (mov r8, r8)
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb8:	f000 f93a 	bl	8003230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002fc6:	2380      	movs	r3, #128	; 0x80
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f000 fdf0 	bl	8003bb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002fd0:	46c0      	nop			; (mov r8, r8)
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002fdc:	4b03      	ldr	r3, [pc, #12]	; (8002fec <DMA1_Channel2_3_IRQHandler+0x14>)
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f000 fb6e 	bl	80036c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002fe4:	46c0      	nop			; (mov r8, r8)
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	20000a08 	.word	0x20000a08

08002ff0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ff4:	4b03      	ldr	r3, [pc, #12]	; (8003004 <USART2_IRQHandler+0x14>)
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f002 fa3c 	bl	8005474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ffc:	46c0      	nop			; (mov r8, r8)
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	20000ab0 	.word	0x20000ab0

08003008 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	e00a      	b.n	8003030 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800301a:	e000      	b.n	800301e <_read+0x16>
 800301c:	bf00      	nop
 800301e:	0001      	movs	r1, r0
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	60ba      	str	r2, [r7, #8]
 8003026:	b2ca      	uxtb	r2, r1
 8003028:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	3301      	adds	r3, #1
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	429a      	cmp	r2, r3
 8003036:	dbf0      	blt.n	800301a <_read+0x12>
	}

return len;
 8003038:	687b      	ldr	r3, [r7, #4]
}
 800303a:	0018      	movs	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	b006      	add	sp, #24
 8003040:	bd80      	pop	{r7, pc}

08003042 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b086      	sub	sp, #24
 8003046:	af00      	add	r7, sp, #0
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	e009      	b.n	8003068 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	60ba      	str	r2, [r7, #8]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	0018      	movs	r0, r3
 800305e:	f7ff fa5b 	bl	8002518 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	3301      	adds	r3, #1
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	429a      	cmp	r2, r3
 800306e:	dbf1      	blt.n	8003054 <_write+0x12>
	}
	return len;
 8003070:	687b      	ldr	r3, [r7, #4]
}
 8003072:	0018      	movs	r0, r3
 8003074:	46bd      	mov	sp, r7
 8003076:	b006      	add	sp, #24
 8003078:	bd80      	pop	{r7, pc}

0800307a <_close>:

int _close(int file)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
	return -1;
 8003082:	2301      	movs	r3, #1
 8003084:	425b      	negs	r3, r3
}
 8003086:	0018      	movs	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	b002      	add	sp, #8
 800308c:	bd80      	pop	{r7, pc}

0800308e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2280      	movs	r2, #128	; 0x80
 800309c:	0192      	lsls	r2, r2, #6
 800309e:	605a      	str	r2, [r3, #4]
	return 0;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	0018      	movs	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b002      	add	sp, #8
 80030a8:	bd80      	pop	{r7, pc}

080030aa <_isatty>:

int _isatty(int file)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b082      	sub	sp, #8
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
	return 1;
 80030b2:	2301      	movs	r3, #1
}
 80030b4:	0018      	movs	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b002      	add	sp, #8
 80030ba:	bd80      	pop	{r7, pc}

080030bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
	return 0;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	0018      	movs	r0, r3
 80030cc:	46bd      	mov	sp, r7
 80030ce:	b004      	add	sp, #16
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030dc:	4a14      	ldr	r2, [pc, #80]	; (8003130 <_sbrk+0x5c>)
 80030de:	4b15      	ldr	r3, [pc, #84]	; (8003134 <_sbrk+0x60>)
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030e8:	4b13      	ldr	r3, [pc, #76]	; (8003138 <_sbrk+0x64>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d102      	bne.n	80030f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030f0:	4b11      	ldr	r3, [pc, #68]	; (8003138 <_sbrk+0x64>)
 80030f2:	4a12      	ldr	r2, [pc, #72]	; (800313c <_sbrk+0x68>)
 80030f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030f6:	4b10      	ldr	r3, [pc, #64]	; (8003138 <_sbrk+0x64>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	18d3      	adds	r3, r2, r3
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	429a      	cmp	r2, r3
 8003102:	d207      	bcs.n	8003114 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003104:	f002 ffa4 	bl	8006050 <__errno>
 8003108:	0003      	movs	r3, r0
 800310a:	220c      	movs	r2, #12
 800310c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800310e:	2301      	movs	r3, #1
 8003110:	425b      	negs	r3, r3
 8003112:	e009      	b.n	8003128 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003114:	4b08      	ldr	r3, [pc, #32]	; (8003138 <_sbrk+0x64>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800311a:	4b07      	ldr	r3, [pc, #28]	; (8003138 <_sbrk+0x64>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	18d2      	adds	r2, r2, r3
 8003122:	4b05      	ldr	r3, [pc, #20]	; (8003138 <_sbrk+0x64>)
 8003124:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003126:	68fb      	ldr	r3, [r7, #12]
}
 8003128:	0018      	movs	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	b006      	add	sp, #24
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20008000 	.word	0x20008000
 8003134:	00000400 	.word	0x00000400
 8003138:	200001fc 	.word	0x200001fc
 800313c:	20000b40 	.word	0x20000b40

08003140 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003144:	46c0      	nop			; (mov r8, r8)
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800314c:	480d      	ldr	r0, [pc, #52]	; (8003184 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800314e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003150:	480d      	ldr	r0, [pc, #52]	; (8003188 <LoopForever+0x6>)
  ldr r1, =_edata
 8003152:	490e      	ldr	r1, [pc, #56]	; (800318c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003154:	4a0e      	ldr	r2, [pc, #56]	; (8003190 <LoopForever+0xe>)
  movs r3, #0
 8003156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003158:	e002      	b.n	8003160 <LoopCopyDataInit>

0800315a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800315a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800315c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800315e:	3304      	adds	r3, #4

08003160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003164:	d3f9      	bcc.n	800315a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003166:	4a0b      	ldr	r2, [pc, #44]	; (8003194 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003168:	4c0b      	ldr	r4, [pc, #44]	; (8003198 <LoopForever+0x16>)
  movs r3, #0
 800316a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800316c:	e001      	b.n	8003172 <LoopFillZerobss>

0800316e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800316e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003170:	3204      	adds	r2, #4

08003172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003174:	d3fb      	bcc.n	800316e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003176:	f7ff ffe3 	bl	8003140 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800317a:	f002 ff6f 	bl	800605c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800317e:	f7ff fa03 	bl	8002588 <main>

08003182 <LoopForever>:

LoopForever:
    b LoopForever
 8003182:	e7fe      	b.n	8003182 <LoopForever>
  ldr   r0, =_estack
 8003184:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800318c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003190:	0800aab0 	.word	0x0800aab0
  ldr r2, =_sbss
 8003194:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003198:	20000b3c 	.word	0x20000b3c

0800319c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800319c:	e7fe      	b.n	800319c <ADC1_IRQHandler>
	...

080031a0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031a4:	4b07      	ldr	r3, [pc, #28]	; (80031c4 <HAL_Init+0x24>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HAL_Init+0x24>)
 80031aa:	2110      	movs	r1, #16
 80031ac:	430a      	orrs	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80031b0:	2003      	movs	r0, #3
 80031b2:	f000 f809 	bl	80031c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031b6:	f7ff fded 	bl	8002d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	0018      	movs	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	40022000 	.word	0x40022000

080031c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031c8:	b590      	push	{r4, r7, lr}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031d0:	4b14      	ldr	r3, [pc, #80]	; (8003224 <HAL_InitTick+0x5c>)
 80031d2:	681c      	ldr	r4, [r3, #0]
 80031d4:	4b14      	ldr	r3, [pc, #80]	; (8003228 <HAL_InitTick+0x60>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	0019      	movs	r1, r3
 80031da:	23fa      	movs	r3, #250	; 0xfa
 80031dc:	0098      	lsls	r0, r3, #2
 80031de:	f7fc ffa3 	bl	8000128 <__udivsi3>
 80031e2:	0003      	movs	r3, r0
 80031e4:	0019      	movs	r1, r3
 80031e6:	0020      	movs	r0, r4
 80031e8:	f7fc ff9e 	bl	8000128 <__udivsi3>
 80031ec:	0003      	movs	r3, r0
 80031ee:	0018      	movs	r0, r3
 80031f0:	f000 f92d 	bl	800344e <HAL_SYSTICK_Config>
 80031f4:	1e03      	subs	r3, r0, #0
 80031f6:	d001      	beq.n	80031fc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e00f      	b.n	800321c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d80b      	bhi.n	800321a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	2301      	movs	r3, #1
 8003206:	425b      	negs	r3, r3
 8003208:	2200      	movs	r2, #0
 800320a:	0018      	movs	r0, r3
 800320c:	f000 f8fa 	bl	8003404 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003210:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_InitTick+0x64>)
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	e000      	b.n	800321c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
}
 800321c:	0018      	movs	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	b003      	add	sp, #12
 8003222:	bd90      	pop	{r4, r7, pc}
 8003224:	20000000 	.word	0x20000000
 8003228:	20000008 	.word	0x20000008
 800322c:	20000004 	.word	0x20000004

08003230 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003234:	4b05      	ldr	r3, [pc, #20]	; (800324c <HAL_IncTick+0x1c>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	001a      	movs	r2, r3
 800323a:	4b05      	ldr	r3, [pc, #20]	; (8003250 <HAL_IncTick+0x20>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	18d2      	adds	r2, r2, r3
 8003240:	4b03      	ldr	r3, [pc, #12]	; (8003250 <HAL_IncTick+0x20>)
 8003242:	601a      	str	r2, [r3, #0]
}
 8003244:	46c0      	nop			; (mov r8, r8)
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	20000008 	.word	0x20000008
 8003250:	20000b34 	.word	0x20000b34

08003254 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  return uwTick;
 8003258:	4b02      	ldr	r3, [pc, #8]	; (8003264 <HAL_GetTick+0x10>)
 800325a:	681b      	ldr	r3, [r3, #0]
}
 800325c:	0018      	movs	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	20000b34 	.word	0x20000b34

08003268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003270:	f7ff fff0 	bl	8003254 <HAL_GetTick>
 8003274:	0003      	movs	r3, r0
 8003276:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	3301      	adds	r3, #1
 8003280:	d005      	beq.n	800328e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003282:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <HAL_Delay+0x40>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	001a      	movs	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	189b      	adds	r3, r3, r2
 800328c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	f7ff ffe0 	bl	8003254 <HAL_GetTick>
 8003294:	0002      	movs	r2, r0
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	429a      	cmp	r2, r3
 800329e:	d8f7      	bhi.n	8003290 <HAL_Delay+0x28>
  {
  }
}
 80032a0:	46c0      	nop			; (mov r8, r8)
 80032a2:	46bd      	mov	sp, r7
 80032a4:	b004      	add	sp, #16
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20000008 	.word	0x20000008

080032ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	0002      	movs	r2, r0
 80032b4:	1dfb      	adds	r3, r7, #7
 80032b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032b8:	1dfb      	adds	r3, r7, #7
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b7f      	cmp	r3, #127	; 0x7f
 80032be:	d809      	bhi.n	80032d4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c0:	1dfb      	adds	r3, r7, #7
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	001a      	movs	r2, r3
 80032c6:	231f      	movs	r3, #31
 80032c8:	401a      	ands	r2, r3
 80032ca:	4b04      	ldr	r3, [pc, #16]	; (80032dc <__NVIC_EnableIRQ+0x30>)
 80032cc:	2101      	movs	r1, #1
 80032ce:	4091      	lsls	r1, r2
 80032d0:	000a      	movs	r2, r1
 80032d2:	601a      	str	r2, [r3, #0]
  }
}
 80032d4:	46c0      	nop			; (mov r8, r8)
 80032d6:	46bd      	mov	sp, r7
 80032d8:	b002      	add	sp, #8
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	e000e100 	.word	0xe000e100

080032e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032e0:	b590      	push	{r4, r7, lr}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	0002      	movs	r2, r0
 80032e8:	6039      	str	r1, [r7, #0]
 80032ea:	1dfb      	adds	r3, r7, #7
 80032ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032ee:	1dfb      	adds	r3, r7, #7
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b7f      	cmp	r3, #127	; 0x7f
 80032f4:	d828      	bhi.n	8003348 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032f6:	4a2f      	ldr	r2, [pc, #188]	; (80033b4 <__NVIC_SetPriority+0xd4>)
 80032f8:	1dfb      	adds	r3, r7, #7
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	b25b      	sxtb	r3, r3
 80032fe:	089b      	lsrs	r3, r3, #2
 8003300:	33c0      	adds	r3, #192	; 0xc0
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	589b      	ldr	r3, [r3, r2]
 8003306:	1dfa      	adds	r2, r7, #7
 8003308:	7812      	ldrb	r2, [r2, #0]
 800330a:	0011      	movs	r1, r2
 800330c:	2203      	movs	r2, #3
 800330e:	400a      	ands	r2, r1
 8003310:	00d2      	lsls	r2, r2, #3
 8003312:	21ff      	movs	r1, #255	; 0xff
 8003314:	4091      	lsls	r1, r2
 8003316:	000a      	movs	r2, r1
 8003318:	43d2      	mvns	r2, r2
 800331a:	401a      	ands	r2, r3
 800331c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	019b      	lsls	r3, r3, #6
 8003322:	22ff      	movs	r2, #255	; 0xff
 8003324:	401a      	ands	r2, r3
 8003326:	1dfb      	adds	r3, r7, #7
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	0018      	movs	r0, r3
 800332c:	2303      	movs	r3, #3
 800332e:	4003      	ands	r3, r0
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003334:	481f      	ldr	r0, [pc, #124]	; (80033b4 <__NVIC_SetPriority+0xd4>)
 8003336:	1dfb      	adds	r3, r7, #7
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	b25b      	sxtb	r3, r3
 800333c:	089b      	lsrs	r3, r3, #2
 800333e:	430a      	orrs	r2, r1
 8003340:	33c0      	adds	r3, #192	; 0xc0
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003346:	e031      	b.n	80033ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003348:	4a1b      	ldr	r2, [pc, #108]	; (80033b8 <__NVIC_SetPriority+0xd8>)
 800334a:	1dfb      	adds	r3, r7, #7
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	0019      	movs	r1, r3
 8003350:	230f      	movs	r3, #15
 8003352:	400b      	ands	r3, r1
 8003354:	3b08      	subs	r3, #8
 8003356:	089b      	lsrs	r3, r3, #2
 8003358:	3306      	adds	r3, #6
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	18d3      	adds	r3, r2, r3
 800335e:	3304      	adds	r3, #4
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	1dfa      	adds	r2, r7, #7
 8003364:	7812      	ldrb	r2, [r2, #0]
 8003366:	0011      	movs	r1, r2
 8003368:	2203      	movs	r2, #3
 800336a:	400a      	ands	r2, r1
 800336c:	00d2      	lsls	r2, r2, #3
 800336e:	21ff      	movs	r1, #255	; 0xff
 8003370:	4091      	lsls	r1, r2
 8003372:	000a      	movs	r2, r1
 8003374:	43d2      	mvns	r2, r2
 8003376:	401a      	ands	r2, r3
 8003378:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	019b      	lsls	r3, r3, #6
 800337e:	22ff      	movs	r2, #255	; 0xff
 8003380:	401a      	ands	r2, r3
 8003382:	1dfb      	adds	r3, r7, #7
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	0018      	movs	r0, r3
 8003388:	2303      	movs	r3, #3
 800338a:	4003      	ands	r3, r0
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003390:	4809      	ldr	r0, [pc, #36]	; (80033b8 <__NVIC_SetPriority+0xd8>)
 8003392:	1dfb      	adds	r3, r7, #7
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	001c      	movs	r4, r3
 8003398:	230f      	movs	r3, #15
 800339a:	4023      	ands	r3, r4
 800339c:	3b08      	subs	r3, #8
 800339e:	089b      	lsrs	r3, r3, #2
 80033a0:	430a      	orrs	r2, r1
 80033a2:	3306      	adds	r3, #6
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	18c3      	adds	r3, r0, r3
 80033a8:	3304      	adds	r3, #4
 80033aa:	601a      	str	r2, [r3, #0]
}
 80033ac:	46c0      	nop			; (mov r8, r8)
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b003      	add	sp, #12
 80033b2:	bd90      	pop	{r4, r7, pc}
 80033b4:	e000e100 	.word	0xe000e100
 80033b8:	e000ed00 	.word	0xe000ed00

080033bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	4a0c      	ldr	r2, [pc, #48]	; (80033fc <SysTick_Config+0x40>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ce:	2301      	movs	r3, #1
 80033d0:	e010      	b.n	80033f4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033d2:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <SysTick_Config+0x44>)
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	3a01      	subs	r2, #1
 80033d8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033da:	2301      	movs	r3, #1
 80033dc:	425b      	negs	r3, r3
 80033de:	2103      	movs	r1, #3
 80033e0:	0018      	movs	r0, r3
 80033e2:	f7ff ff7d 	bl	80032e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033e6:	4b06      	ldr	r3, [pc, #24]	; (8003400 <SysTick_Config+0x44>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ec:	4b04      	ldr	r3, [pc, #16]	; (8003400 <SysTick_Config+0x44>)
 80033ee:	2207      	movs	r2, #7
 80033f0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	0018      	movs	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b002      	add	sp, #8
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	00ffffff 	.word	0x00ffffff
 8003400:	e000e010 	.word	0xe000e010

08003404 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	210f      	movs	r1, #15
 8003410:	187b      	adds	r3, r7, r1
 8003412:	1c02      	adds	r2, r0, #0
 8003414:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	187b      	adds	r3, r7, r1
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	b25b      	sxtb	r3, r3
 800341e:	0011      	movs	r1, r2
 8003420:	0018      	movs	r0, r3
 8003422:	f7ff ff5d 	bl	80032e0 <__NVIC_SetPriority>
}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	46bd      	mov	sp, r7
 800342a:	b004      	add	sp, #16
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	0002      	movs	r2, r0
 8003436:	1dfb      	adds	r3, r7, #7
 8003438:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800343a:	1dfb      	adds	r3, r7, #7
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	b25b      	sxtb	r3, r3
 8003440:	0018      	movs	r0, r3
 8003442:	f7ff ff33 	bl	80032ac <__NVIC_EnableIRQ>
}
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	46bd      	mov	sp, r7
 800344a:	b002      	add	sp, #8
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	0018      	movs	r0, r3
 800345a:	f7ff ffaf 	bl	80033bc <SysTick_Config>
 800345e:	0003      	movs	r3, r0
}
 8003460:	0018      	movs	r0, r3
 8003462:	46bd      	mov	sp, r7
 8003464:	b002      	add	sp, #8
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e036      	b.n	80034ec <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2221      	movs	r2, #33	; 0x21
 8003482:	2102      	movs	r1, #2
 8003484:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	4a18      	ldr	r2, [pc, #96]	; (80034f4 <HAL_DMA_Init+0x8c>)
 8003492:	4013      	ands	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800349e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	0018      	movs	r0, r3
 80034d0:	f000 f9c4 	bl	800385c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2221      	movs	r2, #33	; 0x21
 80034de:	2101      	movs	r1, #1
 80034e0:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	2100      	movs	r1, #0
 80034e8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}  
 80034ec:	0018      	movs	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	b004      	add	sp, #16
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	ffffc00f 	.word	0xffffc00f

080034f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
 8003504:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003506:	2317      	movs	r3, #23
 8003508:	18fb      	adds	r3, r7, r3
 800350a:	2200      	movs	r2, #0
 800350c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2220      	movs	r2, #32
 8003512:	5c9b      	ldrb	r3, [r3, r2]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_DMA_Start_IT+0x24>
 8003518:	2302      	movs	r3, #2
 800351a:	e04f      	b.n	80035bc <HAL_DMA_Start_IT+0xc4>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2220      	movs	r2, #32
 8003520:	2101      	movs	r1, #1
 8003522:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2221      	movs	r2, #33	; 0x21
 8003528:	5c9b      	ldrb	r3, [r3, r2]
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b01      	cmp	r3, #1
 800352e:	d13a      	bne.n	80035a6 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2221      	movs	r2, #33	; 0x21
 8003534:	2102      	movs	r1, #2
 8003536:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2101      	movs	r1, #1
 800354a:	438a      	bics	r2, r1
 800354c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	68b9      	ldr	r1, [r7, #8]
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 f955 	bl	8003804 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	2b00      	cmp	r3, #0
 8003560:	d008      	beq.n	8003574 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	210e      	movs	r1, #14
 800356e:	430a      	orrs	r2, r1
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	e00f      	b.n	8003594 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	210a      	movs	r1, #10
 8003580:	430a      	orrs	r2, r1
 8003582:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2104      	movs	r1, #4
 8003590:	438a      	bics	r2, r1
 8003592:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2101      	movs	r1, #1
 80035a0:	430a      	orrs	r2, r1
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	e007      	b.n	80035b6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2220      	movs	r2, #32
 80035aa:	2100      	movs	r1, #0
 80035ac:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80035ae:	2317      	movs	r3, #23
 80035b0:	18fb      	adds	r3, r7, r3
 80035b2:	2202      	movs	r2, #2
 80035b4:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80035b6:	2317      	movs	r3, #23
 80035b8:	18fb      	adds	r3, r7, r3
 80035ba:	781b      	ldrb	r3, [r3, #0]
} 
 80035bc:	0018      	movs	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	b006      	add	sp, #24
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2221      	movs	r2, #33	; 0x21
 80035d0:	5c9b      	ldrb	r3, [r3, r2]
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d008      	beq.n	80035ea <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2204      	movs	r2, #4
 80035dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2220      	movs	r2, #32
 80035e2:	2100      	movs	r1, #0
 80035e4:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e020      	b.n	800362c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	210e      	movs	r1, #14
 80035f6:	438a      	bics	r2, r1
 80035f8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2101      	movs	r1, #1
 8003606:	438a      	bics	r2, r1
 8003608:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003612:	2101      	movs	r1, #1
 8003614:	4091      	lsls	r1, r2
 8003616:	000a      	movs	r2, r1
 8003618:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2221      	movs	r2, #33	; 0x21
 800361e:	2101      	movs	r1, #1
 8003620:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2220      	movs	r2, #32
 8003626:	2100      	movs	r1, #0
 8003628:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	0018      	movs	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	b002      	add	sp, #8
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800363c:	230f      	movs	r3, #15
 800363e:	18fb      	adds	r3, r7, r3
 8003640:	2200      	movs	r2, #0
 8003642:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2221      	movs	r2, #33	; 0x21
 8003648:	5c9b      	ldrb	r3, [r3, r2]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d007      	beq.n	8003660 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2204      	movs	r2, #4
 8003654:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003656:	230f      	movs	r3, #15
 8003658:	18fb      	adds	r3, r7, r3
 800365a:	2201      	movs	r2, #1
 800365c:	701a      	strb	r2, [r3, #0]
 800365e:	e028      	b.n	80036b2 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	210e      	movs	r1, #14
 800366c:	438a      	bics	r2, r1
 800366e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2101      	movs	r1, #1
 800367c:	438a      	bics	r2, r1
 800367e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003688:	2101      	movs	r1, #1
 800368a:	4091      	lsls	r1, r2
 800368c:	000a      	movs	r2, r1
 800368e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2221      	movs	r2, #33	; 0x21
 8003694:	2101      	movs	r1, #1
 8003696:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2220      	movs	r2, #32
 800369c:	2100      	movs	r1, #0
 800369e:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d004      	beq.n	80036b2 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	0010      	movs	r0, r2
 80036b0:	4798      	blx	r3
    } 
  }
  return status;
 80036b2:	230f      	movs	r3, #15
 80036b4:	18fb      	adds	r3, r7, r3
 80036b6:	781b      	ldrb	r3, [r3, #0]
}
 80036b8:	0018      	movs	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b004      	add	sp, #16
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	2204      	movs	r2, #4
 80036de:	409a      	lsls	r2, r3
 80036e0:	0013      	movs	r3, r2
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	4013      	ands	r3, r2
 80036e6:	d024      	beq.n	8003732 <HAL_DMA_IRQHandler+0x72>
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2204      	movs	r2, #4
 80036ec:	4013      	ands	r3, r2
 80036ee:	d020      	beq.n	8003732 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2220      	movs	r2, #32
 80036f8:	4013      	ands	r3, r2
 80036fa:	d107      	bne.n	800370c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2104      	movs	r1, #4
 8003708:	438a      	bics	r2, r1
 800370a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003714:	2104      	movs	r1, #4
 8003716:	4091      	lsls	r1, r2
 8003718:	000a      	movs	r2, r1
 800371a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	2b00      	cmp	r3, #0
 8003722:	d100      	bne.n	8003726 <HAL_DMA_IRQHandler+0x66>
 8003724:	e06a      	b.n	80037fc <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	0010      	movs	r0, r2
 800372e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003730:	e064      	b.n	80037fc <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	2202      	movs	r2, #2
 8003738:	409a      	lsls	r2, r3
 800373a:	0013      	movs	r3, r2
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4013      	ands	r3, r2
 8003740:	d02b      	beq.n	800379a <HAL_DMA_IRQHandler+0xda>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2202      	movs	r2, #2
 8003746:	4013      	ands	r3, r2
 8003748:	d027      	beq.n	800379a <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2220      	movs	r2, #32
 8003752:	4013      	ands	r3, r2
 8003754:	d10b      	bne.n	800376e <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	210a      	movs	r1, #10
 8003762:	438a      	bics	r2, r1
 8003764:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2221      	movs	r2, #33	; 0x21
 800376a:	2101      	movs	r1, #1
 800376c:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003776:	2102      	movs	r1, #2
 8003778:	4091      	lsls	r1, r2
 800377a:	000a      	movs	r2, r1
 800377c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2220      	movs	r2, #32
 8003782:	2100      	movs	r1, #0
 8003784:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378a:	2b00      	cmp	r3, #0
 800378c:	d036      	beq.n	80037fc <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	0010      	movs	r0, r2
 8003796:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003798:	e030      	b.n	80037fc <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	2208      	movs	r2, #8
 80037a0:	409a      	lsls	r2, r3
 80037a2:	0013      	movs	r3, r2
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4013      	ands	r3, r2
 80037a8:	d028      	beq.n	80037fc <HAL_DMA_IRQHandler+0x13c>
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2208      	movs	r2, #8
 80037ae:	4013      	ands	r3, r2
 80037b0:	d024      	beq.n	80037fc <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	210e      	movs	r1, #14
 80037be:	438a      	bics	r2, r1
 80037c0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ca:	2101      	movs	r1, #1
 80037cc:	4091      	lsls	r1, r2
 80037ce:	000a      	movs	r2, r1
 80037d0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2221      	movs	r2, #33	; 0x21
 80037dc:	2101      	movs	r1, #1
 80037de:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	2100      	movs	r1, #0
 80037e6:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	0010      	movs	r0, r2
 80037f8:	4798      	blx	r3
    }
   }
}  
 80037fa:	e7ff      	b.n	80037fc <HAL_DMA_IRQHandler+0x13c>
 80037fc:	46c0      	nop			; (mov r8, r8)
 80037fe:	46bd      	mov	sp, r7
 8003800:	b004      	add	sp, #16
 8003802:	bd80      	pop	{r7, pc}

08003804 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381a:	2101      	movs	r1, #1
 800381c:	4091      	lsls	r1, r2
 800381e:	000a      	movs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b10      	cmp	r3, #16
 8003830:	d108      	bne.n	8003844 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003842:	e007      	b.n	8003854 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	60da      	str	r2, [r3, #12]
}
 8003854:	46c0      	nop			; (mov r8, r8)
 8003856:	46bd      	mov	sp, r7
 8003858:	b004      	add	sp, #16
 800385a:	bd80      	pop	{r7, pc}

0800385c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a08      	ldr	r2, [pc, #32]	; (800388c <DMA_CalcBaseAndBitshift+0x30>)
 800386a:	4694      	mov	ip, r2
 800386c:	4463      	add	r3, ip
 800386e:	2114      	movs	r1, #20
 8003870:	0018      	movs	r0, r3
 8003872:	f7fc fc59 	bl	8000128 <__udivsi3>
 8003876:	0003      	movs	r3, r0
 8003878:	009a      	lsls	r2, r3, #2
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a03      	ldr	r2, [pc, #12]	; (8003890 <DMA_CalcBaseAndBitshift+0x34>)
 8003882:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003884:	46c0      	nop			; (mov r8, r8)
 8003886:	46bd      	mov	sp, r7
 8003888:	b002      	add	sp, #8
 800388a:	bd80      	pop	{r7, pc}
 800388c:	bffdfff8 	.word	0xbffdfff8
 8003890:	40020000 	.word	0x40020000

08003894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800389e:	2300      	movs	r3, #0
 80038a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038a2:	e14f      	b.n	8003b44 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2101      	movs	r1, #1
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	4091      	lsls	r1, r2
 80038ae:	000a      	movs	r2, r1
 80038b0:	4013      	ands	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d100      	bne.n	80038bc <HAL_GPIO_Init+0x28>
 80038ba:	e140      	b.n	8003b3e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d00b      	beq.n	80038dc <HAL_GPIO_Init+0x48>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d007      	beq.n	80038dc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038d0:	2b11      	cmp	r3, #17
 80038d2:	d003      	beq.n	80038dc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b12      	cmp	r3, #18
 80038da:	d130      	bne.n	800393e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	2203      	movs	r2, #3
 80038e8:	409a      	lsls	r2, r3
 80038ea:	0013      	movs	r3, r2
 80038ec:	43da      	mvns	r2, r3
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4013      	ands	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	409a      	lsls	r2, r3
 80038fe:	0013      	movs	r3, r2
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	4313      	orrs	r3, r2
 8003904:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003912:	2201      	movs	r2, #1
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	409a      	lsls	r2, r3
 8003918:	0013      	movs	r3, r2
 800391a:	43da      	mvns	r2, r3
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	091b      	lsrs	r3, r3, #4
 8003928:	2201      	movs	r2, #1
 800392a:	401a      	ands	r2, r3
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	409a      	lsls	r2, r3
 8003930:	0013      	movs	r3, r2
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	2203      	movs	r2, #3
 800394a:	409a      	lsls	r2, r3
 800394c:	0013      	movs	r3, r2
 800394e:	43da      	mvns	r2, r3
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	4013      	ands	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	409a      	lsls	r2, r3
 8003960:	0013      	movs	r3, r2
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b02      	cmp	r3, #2
 8003974:	d003      	beq.n	800397e <HAL_GPIO_Init+0xea>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b12      	cmp	r3, #18
 800397c:	d123      	bne.n	80039c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	08da      	lsrs	r2, r3, #3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3208      	adds	r2, #8
 8003986:	0092      	lsls	r2, r2, #2
 8003988:	58d3      	ldr	r3, [r2, r3]
 800398a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2207      	movs	r2, #7
 8003990:	4013      	ands	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	220f      	movs	r2, #15
 8003996:	409a      	lsls	r2, r3
 8003998:	0013      	movs	r3, r2
 800399a:	43da      	mvns	r2, r3
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	4013      	ands	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	691a      	ldr	r2, [r3, #16]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2107      	movs	r1, #7
 80039aa:	400b      	ands	r3, r1
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	409a      	lsls	r2, r3
 80039b0:	0013      	movs	r3, r2
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	08da      	lsrs	r2, r3, #3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3208      	adds	r2, #8
 80039c0:	0092      	lsls	r2, r2, #2
 80039c2:	6939      	ldr	r1, [r7, #16]
 80039c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	2203      	movs	r2, #3
 80039d2:	409a      	lsls	r2, r3
 80039d4:	0013      	movs	r3, r2
 80039d6:	43da      	mvns	r2, r3
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	4013      	ands	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2203      	movs	r2, #3
 80039e4:	401a      	ands	r2, r3
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	409a      	lsls	r2, r3
 80039ec:	0013      	movs	r3, r2
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	2380      	movs	r3, #128	; 0x80
 8003a00:	055b      	lsls	r3, r3, #21
 8003a02:	4013      	ands	r3, r2
 8003a04:	d100      	bne.n	8003a08 <HAL_GPIO_Init+0x174>
 8003a06:	e09a      	b.n	8003b3e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a08:	4b54      	ldr	r3, [pc, #336]	; (8003b5c <HAL_GPIO_Init+0x2c8>)
 8003a0a:	699a      	ldr	r2, [r3, #24]
 8003a0c:	4b53      	ldr	r3, [pc, #332]	; (8003b5c <HAL_GPIO_Init+0x2c8>)
 8003a0e:	2101      	movs	r1, #1
 8003a10:	430a      	orrs	r2, r1
 8003a12:	619a      	str	r2, [r3, #24]
 8003a14:	4b51      	ldr	r3, [pc, #324]	; (8003b5c <HAL_GPIO_Init+0x2c8>)
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	60bb      	str	r3, [r7, #8]
 8003a1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a20:	4a4f      	ldr	r2, [pc, #316]	; (8003b60 <HAL_GPIO_Init+0x2cc>)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	089b      	lsrs	r3, r3, #2
 8003a26:	3302      	adds	r3, #2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	589b      	ldr	r3, [r3, r2]
 8003a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2203      	movs	r2, #3
 8003a32:	4013      	ands	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	220f      	movs	r2, #15
 8003a38:	409a      	lsls	r2, r3
 8003a3a:	0013      	movs	r3, r2
 8003a3c:	43da      	mvns	r2, r3
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	4013      	ands	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	2390      	movs	r3, #144	; 0x90
 8003a48:	05db      	lsls	r3, r3, #23
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d013      	beq.n	8003a76 <HAL_GPIO_Init+0x1e2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a44      	ldr	r2, [pc, #272]	; (8003b64 <HAL_GPIO_Init+0x2d0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00d      	beq.n	8003a72 <HAL_GPIO_Init+0x1de>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a43      	ldr	r2, [pc, #268]	; (8003b68 <HAL_GPIO_Init+0x2d4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d007      	beq.n	8003a6e <HAL_GPIO_Init+0x1da>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a42      	ldr	r2, [pc, #264]	; (8003b6c <HAL_GPIO_Init+0x2d8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d101      	bne.n	8003a6a <HAL_GPIO_Init+0x1d6>
 8003a66:	2303      	movs	r3, #3
 8003a68:	e006      	b.n	8003a78 <HAL_GPIO_Init+0x1e4>
 8003a6a:	2305      	movs	r3, #5
 8003a6c:	e004      	b.n	8003a78 <HAL_GPIO_Init+0x1e4>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e002      	b.n	8003a78 <HAL_GPIO_Init+0x1e4>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <HAL_GPIO_Init+0x1e4>
 8003a76:	2300      	movs	r3, #0
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	2103      	movs	r1, #3
 8003a7c:	400a      	ands	r2, r1
 8003a7e:	0092      	lsls	r2, r2, #2
 8003a80:	4093      	lsls	r3, r2
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a88:	4935      	ldr	r1, [pc, #212]	; (8003b60 <HAL_GPIO_Init+0x2cc>)
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	089b      	lsrs	r3, r3, #2
 8003a8e:	3302      	adds	r3, #2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a96:	4b36      	ldr	r3, [pc, #216]	; (8003b70 <HAL_GPIO_Init+0x2dc>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	43da      	mvns	r2, r3
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	2380      	movs	r3, #128	; 0x80
 8003aac:	025b      	lsls	r3, r3, #9
 8003aae:	4013      	ands	r3, r2
 8003ab0:	d003      	beq.n	8003aba <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003aba:	4b2d      	ldr	r3, [pc, #180]	; (8003b70 <HAL_GPIO_Init+0x2dc>)
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003ac0:	4b2b      	ldr	r3, [pc, #172]	; (8003b70 <HAL_GPIO_Init+0x2dc>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	43da      	mvns	r2, r3
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	4013      	ands	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	2380      	movs	r3, #128	; 0x80
 8003ad6:	029b      	lsls	r3, r3, #10
 8003ad8:	4013      	ands	r3, r2
 8003ada:	d003      	beq.n	8003ae4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003ae4:	4b22      	ldr	r3, [pc, #136]	; (8003b70 <HAL_GPIO_Init+0x2dc>)
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aea:	4b21      	ldr	r3, [pc, #132]	; (8003b70 <HAL_GPIO_Init+0x2dc>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	43da      	mvns	r2, r3
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	4013      	ands	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	2380      	movs	r3, #128	; 0x80
 8003b00:	035b      	lsls	r3, r3, #13
 8003b02:	4013      	ands	r3, r2
 8003b04:	d003      	beq.n	8003b0e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003b0e:	4b18      	ldr	r3, [pc, #96]	; (8003b70 <HAL_GPIO_Init+0x2dc>)
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003b14:	4b16      	ldr	r3, [pc, #88]	; (8003b70 <HAL_GPIO_Init+0x2dc>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	43da      	mvns	r2, r3
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	4013      	ands	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	2380      	movs	r3, #128	; 0x80
 8003b2a:	039b      	lsls	r3, r3, #14
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d003      	beq.n	8003b38 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003b38:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <HAL_GPIO_Init+0x2dc>)
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	3301      	adds	r3, #1
 8003b42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	40da      	lsrs	r2, r3
 8003b4c:	1e13      	subs	r3, r2, #0
 8003b4e:	d000      	beq.n	8003b52 <HAL_GPIO_Init+0x2be>
 8003b50:	e6a8      	b.n	80038a4 <HAL_GPIO_Init+0x10>
  } 
}
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	46bd      	mov	sp, r7
 8003b56:	b006      	add	sp, #24
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	46c0      	nop			; (mov r8, r8)
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	40010000 	.word	0x40010000
 8003b64:	48000400 	.word	0x48000400
 8003b68:	48000800 	.word	0x48000800
 8003b6c:	48000c00 	.word	0x48000c00
 8003b70:	40010400 	.word	0x40010400

08003b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	0008      	movs	r0, r1
 8003b7e:	0011      	movs	r1, r2
 8003b80:	1cbb      	adds	r3, r7, #2
 8003b82:	1c02      	adds	r2, r0, #0
 8003b84:	801a      	strh	r2, [r3, #0]
 8003b86:	1c7b      	adds	r3, r7, #1
 8003b88:	1c0a      	adds	r2, r1, #0
 8003b8a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b8c:	1c7b      	adds	r3, r7, #1
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d004      	beq.n	8003b9e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b94:	1cbb      	adds	r3, r7, #2
 8003b96:	881a      	ldrh	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b9c:	e003      	b.n	8003ba6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b9e:	1cbb      	adds	r3, r7, #2
 8003ba0:	881a      	ldrh	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	b002      	add	sp, #8
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	0002      	movs	r2, r0
 8003bb8:	1dbb      	adds	r3, r7, #6
 8003bba:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003bbc:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	1dba      	adds	r2, r7, #6
 8003bc2:	8812      	ldrh	r2, [r2, #0]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	d008      	beq.n	8003bda <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bc8:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003bca:	1dba      	adds	r2, r7, #6
 8003bcc:	8812      	ldrh	r2, [r2, #0]
 8003bce:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bd0:	1dbb      	adds	r3, r7, #6
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f7fe fccd 	bl	8002574 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	b002      	add	sp, #8
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	40010400 	.word	0x40010400

08003be8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e2ff      	b.n	80041fa <HAL_RCC_OscConfig+0x612>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	4013      	ands	r3, r2
 8003c02:	d100      	bne.n	8003c06 <HAL_RCC_OscConfig+0x1e>
 8003c04:	e08d      	b.n	8003d22 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003c06:	4bc2      	ldr	r3, [pc, #776]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	220c      	movs	r2, #12
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d00e      	beq.n	8003c30 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c12:	4bbf      	ldr	r3, [pc, #764]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	220c      	movs	r2, #12
 8003c18:	4013      	ands	r3, r2
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d116      	bne.n	8003c4c <HAL_RCC_OscConfig+0x64>
 8003c1e:	4bbc      	ldr	r3, [pc, #752]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	2380      	movs	r3, #128	; 0x80
 8003c24:	025b      	lsls	r3, r3, #9
 8003c26:	401a      	ands	r2, r3
 8003c28:	2380      	movs	r3, #128	; 0x80
 8003c2a:	025b      	lsls	r3, r3, #9
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d10d      	bne.n	8003c4c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c30:	4bb7      	ldr	r3, [pc, #732]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	2380      	movs	r3, #128	; 0x80
 8003c36:	029b      	lsls	r3, r3, #10
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d100      	bne.n	8003c3e <HAL_RCC_OscConfig+0x56>
 8003c3c:	e070      	b.n	8003d20 <HAL_RCC_OscConfig+0x138>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d000      	beq.n	8003c48 <HAL_RCC_OscConfig+0x60>
 8003c46:	e06b      	b.n	8003d20 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e2d6      	b.n	80041fa <HAL_RCC_OscConfig+0x612>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d107      	bne.n	8003c64 <HAL_RCC_OscConfig+0x7c>
 8003c54:	4bae      	ldr	r3, [pc, #696]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	4bad      	ldr	r3, [pc, #692]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003c5a:	2180      	movs	r1, #128	; 0x80
 8003c5c:	0249      	lsls	r1, r1, #9
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	e02f      	b.n	8003cc4 <HAL_RCC_OscConfig+0xdc>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10c      	bne.n	8003c86 <HAL_RCC_OscConfig+0x9e>
 8003c6c:	4ba8      	ldr	r3, [pc, #672]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	4ba7      	ldr	r3, [pc, #668]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003c72:	49a8      	ldr	r1, [pc, #672]	; (8003f14 <HAL_RCC_OscConfig+0x32c>)
 8003c74:	400a      	ands	r2, r1
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	4ba5      	ldr	r3, [pc, #660]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	4ba4      	ldr	r3, [pc, #656]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003c7e:	49a6      	ldr	r1, [pc, #664]	; (8003f18 <HAL_RCC_OscConfig+0x330>)
 8003c80:	400a      	ands	r2, r1
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	e01e      	b.n	8003cc4 <HAL_RCC_OscConfig+0xdc>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b05      	cmp	r3, #5
 8003c8c:	d10e      	bne.n	8003cac <HAL_RCC_OscConfig+0xc4>
 8003c8e:	4ba0      	ldr	r3, [pc, #640]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	4b9f      	ldr	r3, [pc, #636]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003c94:	2180      	movs	r1, #128	; 0x80
 8003c96:	02c9      	lsls	r1, r1, #11
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	4b9c      	ldr	r3, [pc, #624]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	4b9b      	ldr	r3, [pc, #620]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003ca2:	2180      	movs	r1, #128	; 0x80
 8003ca4:	0249      	lsls	r1, r1, #9
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	e00b      	b.n	8003cc4 <HAL_RCC_OscConfig+0xdc>
 8003cac:	4b98      	ldr	r3, [pc, #608]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	4b97      	ldr	r3, [pc, #604]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003cb2:	4998      	ldr	r1, [pc, #608]	; (8003f14 <HAL_RCC_OscConfig+0x32c>)
 8003cb4:	400a      	ands	r2, r1
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	4b95      	ldr	r3, [pc, #596]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	4b94      	ldr	r3, [pc, #592]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003cbe:	4996      	ldr	r1, [pc, #600]	; (8003f18 <HAL_RCC_OscConfig+0x330>)
 8003cc0:	400a      	ands	r2, r1
 8003cc2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d014      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ccc:	f7ff fac2 	bl	8003254 <HAL_GetTick>
 8003cd0:	0003      	movs	r3, r0
 8003cd2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cd6:	f7ff fabd 	bl	8003254 <HAL_GetTick>
 8003cda:	0002      	movs	r2, r0
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b64      	cmp	r3, #100	; 0x64
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e288      	b.n	80041fa <HAL_RCC_OscConfig+0x612>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce8:	4b89      	ldr	r3, [pc, #548]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	2380      	movs	r3, #128	; 0x80
 8003cee:	029b      	lsls	r3, r3, #10
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	d0f0      	beq.n	8003cd6 <HAL_RCC_OscConfig+0xee>
 8003cf4:	e015      	b.n	8003d22 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf6:	f7ff faad 	bl	8003254 <HAL_GetTick>
 8003cfa:	0003      	movs	r3, r0
 8003cfc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d00:	f7ff faa8 	bl	8003254 <HAL_GetTick>
 8003d04:	0002      	movs	r2, r0
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b64      	cmp	r3, #100	; 0x64
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e273      	b.n	80041fa <HAL_RCC_OscConfig+0x612>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d12:	4b7f      	ldr	r3, [pc, #508]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	2380      	movs	r3, #128	; 0x80
 8003d18:	029b      	lsls	r3, r3, #10
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x118>
 8003d1e:	e000      	b.n	8003d22 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d20:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2202      	movs	r2, #2
 8003d28:	4013      	ands	r3, r2
 8003d2a:	d100      	bne.n	8003d2e <HAL_RCC_OscConfig+0x146>
 8003d2c:	e066      	b.n	8003dfc <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d2e:	4b78      	ldr	r3, [pc, #480]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	220c      	movs	r2, #12
 8003d34:	4013      	ands	r3, r2
 8003d36:	d008      	beq.n	8003d4a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003d38:	4b75      	ldr	r3, [pc, #468]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	220c      	movs	r2, #12
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d119      	bne.n	8003d78 <HAL_RCC_OscConfig+0x190>
 8003d44:	4b72      	ldr	r3, [pc, #456]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	e016      	b.n	8003d78 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d4a:	4b71      	ldr	r3, [pc, #452]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	4013      	ands	r3, r2
 8003d52:	d005      	beq.n	8003d60 <HAL_RCC_OscConfig+0x178>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d001      	beq.n	8003d60 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e24c      	b.n	80041fa <HAL_RCC_OscConfig+0x612>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d60:	4b6b      	ldr	r3, [pc, #428]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	22f8      	movs	r2, #248	; 0xf8
 8003d66:	4393      	bics	r3, r2
 8003d68:	0019      	movs	r1, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	00da      	lsls	r2, r3, #3
 8003d70:	4b67      	ldr	r3, [pc, #412]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003d72:	430a      	orrs	r2, r1
 8003d74:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d76:	e041      	b.n	8003dfc <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d024      	beq.n	8003dca <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d80:	4b63      	ldr	r3, [pc, #396]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	4b62      	ldr	r3, [pc, #392]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003d86:	2101      	movs	r1, #1
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8c:	f7ff fa62 	bl	8003254 <HAL_GetTick>
 8003d90:	0003      	movs	r3, r0
 8003d92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d96:	f7ff fa5d 	bl	8003254 <HAL_GetTick>
 8003d9a:	0002      	movs	r2, r0
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e228      	b.n	80041fa <HAL_RCC_OscConfig+0x612>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da8:	4b59      	ldr	r3, [pc, #356]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2202      	movs	r2, #2
 8003dae:	4013      	ands	r3, r2
 8003db0:	d0f1      	beq.n	8003d96 <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db2:	4b57      	ldr	r3, [pc, #348]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	22f8      	movs	r2, #248	; 0xf8
 8003db8:	4393      	bics	r3, r2
 8003dba:	0019      	movs	r1, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	00da      	lsls	r2, r3, #3
 8003dc2:	4b53      	ldr	r3, [pc, #332]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	e018      	b.n	8003dfc <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dca:	4b51      	ldr	r3, [pc, #324]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	4b50      	ldr	r3, [pc, #320]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	438a      	bics	r2, r1
 8003dd4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd6:	f7ff fa3d 	bl	8003254 <HAL_GetTick>
 8003dda:	0003      	movs	r3, r0
 8003ddc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003de0:	f7ff fa38 	bl	8003254 <HAL_GetTick>
 8003de4:	0002      	movs	r2, r0
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e203      	b.n	80041fa <HAL_RCC_OscConfig+0x612>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003df2:	4b47      	ldr	r3, [pc, #284]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2202      	movs	r2, #2
 8003df8:	4013      	ands	r3, r2
 8003dfa:	d1f1      	bne.n	8003de0 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2208      	movs	r2, #8
 8003e02:	4013      	ands	r3, r2
 8003e04:	d036      	beq.n	8003e74 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d019      	beq.n	8003e42 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e0e:	4b40      	ldr	r3, [pc, #256]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003e10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e12:	4b3f      	ldr	r3, [pc, #252]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003e14:	2101      	movs	r1, #1
 8003e16:	430a      	orrs	r2, r1
 8003e18:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1a:	f7ff fa1b 	bl	8003254 <HAL_GetTick>
 8003e1e:	0003      	movs	r3, r0
 8003e20:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e24:	f7ff fa16 	bl	8003254 <HAL_GetTick>
 8003e28:	0002      	movs	r2, r0
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e1e1      	b.n	80041fa <HAL_RCC_OscConfig+0x612>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e36:	4b36      	ldr	r3, [pc, #216]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	d0f1      	beq.n	8003e24 <HAL_RCC_OscConfig+0x23c>
 8003e40:	e018      	b.n	8003e74 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e42:	4b33      	ldr	r3, [pc, #204]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e46:	4b32      	ldr	r3, [pc, #200]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003e48:	2101      	movs	r1, #1
 8003e4a:	438a      	bics	r2, r1
 8003e4c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e4e:	f7ff fa01 	bl	8003254 <HAL_GetTick>
 8003e52:	0003      	movs	r3, r0
 8003e54:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e58:	f7ff f9fc 	bl	8003254 <HAL_GetTick>
 8003e5c:	0002      	movs	r2, r0
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e1c7      	b.n	80041fa <HAL_RCC_OscConfig+0x612>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e6a:	4b29      	ldr	r3, [pc, #164]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	2202      	movs	r2, #2
 8003e70:	4013      	ands	r3, r2
 8003e72:	d1f1      	bne.n	8003e58 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2204      	movs	r2, #4
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	d100      	bne.n	8003e80 <HAL_RCC_OscConfig+0x298>
 8003e7e:	e0b5      	b.n	8003fec <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e80:	231f      	movs	r3, #31
 8003e82:	18fb      	adds	r3, r7, r3
 8003e84:	2200      	movs	r2, #0
 8003e86:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e88:	4b21      	ldr	r3, [pc, #132]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003e8a:	69da      	ldr	r2, [r3, #28]
 8003e8c:	2380      	movs	r3, #128	; 0x80
 8003e8e:	055b      	lsls	r3, r3, #21
 8003e90:	4013      	ands	r3, r2
 8003e92:	d111      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e94:	4b1e      	ldr	r3, [pc, #120]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003e96:	69da      	ldr	r2, [r3, #28]
 8003e98:	4b1d      	ldr	r3, [pc, #116]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003e9a:	2180      	movs	r1, #128	; 0x80
 8003e9c:	0549      	lsls	r1, r1, #21
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	61da      	str	r2, [r3, #28]
 8003ea2:	4b1b      	ldr	r3, [pc, #108]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003ea4:	69da      	ldr	r2, [r3, #28]
 8003ea6:	2380      	movs	r3, #128	; 0x80
 8003ea8:	055b      	lsls	r3, r3, #21
 8003eaa:	4013      	ands	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003eb0:	231f      	movs	r3, #31
 8003eb2:	18fb      	adds	r3, r7, r3
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb8:	4b18      	ldr	r3, [pc, #96]	; (8003f1c <HAL_RCC_OscConfig+0x334>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	2380      	movs	r3, #128	; 0x80
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	d11a      	bne.n	8003efa <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ec4:	4b15      	ldr	r3, [pc, #84]	; (8003f1c <HAL_RCC_OscConfig+0x334>)
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	4b14      	ldr	r3, [pc, #80]	; (8003f1c <HAL_RCC_OscConfig+0x334>)
 8003eca:	2180      	movs	r1, #128	; 0x80
 8003ecc:	0049      	lsls	r1, r1, #1
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ed2:	f7ff f9bf 	bl	8003254 <HAL_GetTick>
 8003ed6:	0003      	movs	r3, r0
 8003ed8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003edc:	f7ff f9ba 	bl	8003254 <HAL_GetTick>
 8003ee0:	0002      	movs	r2, r0
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b64      	cmp	r3, #100	; 0x64
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e185      	b.n	80041fa <HAL_RCC_OscConfig+0x612>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eee:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <HAL_RCC_OscConfig+0x334>)
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	2380      	movs	r3, #128	; 0x80
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d10e      	bne.n	8003f20 <HAL_RCC_OscConfig+0x338>
 8003f02:	4b03      	ldr	r3, [pc, #12]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003f04:	6a1a      	ldr	r2, [r3, #32]
 8003f06:	4b02      	ldr	r3, [pc, #8]	; (8003f10 <HAL_RCC_OscConfig+0x328>)
 8003f08:	2101      	movs	r1, #1
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	621a      	str	r2, [r3, #32]
 8003f0e:	e035      	b.n	8003f7c <HAL_RCC_OscConfig+0x394>
 8003f10:	40021000 	.word	0x40021000
 8003f14:	fffeffff 	.word	0xfffeffff
 8003f18:	fffbffff 	.word	0xfffbffff
 8003f1c:	40007000 	.word	0x40007000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10c      	bne.n	8003f42 <HAL_RCC_OscConfig+0x35a>
 8003f28:	4bb6      	ldr	r3, [pc, #728]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8003f2a:	6a1a      	ldr	r2, [r3, #32]
 8003f2c:	4bb5      	ldr	r3, [pc, #724]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8003f2e:	2101      	movs	r1, #1
 8003f30:	438a      	bics	r2, r1
 8003f32:	621a      	str	r2, [r3, #32]
 8003f34:	4bb3      	ldr	r3, [pc, #716]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8003f36:	6a1a      	ldr	r2, [r3, #32]
 8003f38:	4bb2      	ldr	r3, [pc, #712]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8003f3a:	2104      	movs	r1, #4
 8003f3c:	438a      	bics	r2, r1
 8003f3e:	621a      	str	r2, [r3, #32]
 8003f40:	e01c      	b.n	8003f7c <HAL_RCC_OscConfig+0x394>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2b05      	cmp	r3, #5
 8003f48:	d10c      	bne.n	8003f64 <HAL_RCC_OscConfig+0x37c>
 8003f4a:	4bae      	ldr	r3, [pc, #696]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8003f4c:	6a1a      	ldr	r2, [r3, #32]
 8003f4e:	4bad      	ldr	r3, [pc, #692]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8003f50:	2104      	movs	r1, #4
 8003f52:	430a      	orrs	r2, r1
 8003f54:	621a      	str	r2, [r3, #32]
 8003f56:	4bab      	ldr	r3, [pc, #684]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8003f58:	6a1a      	ldr	r2, [r3, #32]
 8003f5a:	4baa      	ldr	r3, [pc, #680]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	621a      	str	r2, [r3, #32]
 8003f62:	e00b      	b.n	8003f7c <HAL_RCC_OscConfig+0x394>
 8003f64:	4ba7      	ldr	r3, [pc, #668]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8003f66:	6a1a      	ldr	r2, [r3, #32]
 8003f68:	4ba6      	ldr	r3, [pc, #664]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	438a      	bics	r2, r1
 8003f6e:	621a      	str	r2, [r3, #32]
 8003f70:	4ba4      	ldr	r3, [pc, #656]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8003f72:	6a1a      	ldr	r2, [r3, #32]
 8003f74:	4ba3      	ldr	r3, [pc, #652]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8003f76:	2104      	movs	r1, #4
 8003f78:	438a      	bics	r2, r1
 8003f7a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d014      	beq.n	8003fae <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f84:	f7ff f966 	bl	8003254 <HAL_GetTick>
 8003f88:	0003      	movs	r3, r0
 8003f8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f8c:	e009      	b.n	8003fa2 <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f8e:	f7ff f961 	bl	8003254 <HAL_GetTick>
 8003f92:	0002      	movs	r2, r0
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	4a9b      	ldr	r2, [pc, #620]	; (8004208 <HAL_RCC_OscConfig+0x620>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e12b      	b.n	80041fa <HAL_RCC_OscConfig+0x612>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa2:	4b98      	ldr	r3, [pc, #608]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	4013      	ands	r3, r2
 8003faa:	d0f0      	beq.n	8003f8e <HAL_RCC_OscConfig+0x3a6>
 8003fac:	e013      	b.n	8003fd6 <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fae:	f7ff f951 	bl	8003254 <HAL_GetTick>
 8003fb2:	0003      	movs	r3, r0
 8003fb4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fb6:	e009      	b.n	8003fcc <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb8:	f7ff f94c 	bl	8003254 <HAL_GetTick>
 8003fbc:	0002      	movs	r2, r0
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	4a91      	ldr	r2, [pc, #580]	; (8004208 <HAL_RCC_OscConfig+0x620>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e116      	b.n	80041fa <HAL_RCC_OscConfig+0x612>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fcc:	4b8d      	ldr	r3, [pc, #564]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d1f0      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fd6:	231f      	movs	r3, #31
 8003fd8:	18fb      	adds	r3, r7, r3
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d105      	bne.n	8003fec <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe0:	4b88      	ldr	r3, [pc, #544]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8003fe2:	69da      	ldr	r2, [r3, #28]
 8003fe4:	4b87      	ldr	r3, [pc, #540]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8003fe6:	4989      	ldr	r1, [pc, #548]	; (800420c <HAL_RCC_OscConfig+0x624>)
 8003fe8:	400a      	ands	r2, r1
 8003fea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2210      	movs	r2, #16
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	d063      	beq.n	80040be <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d12a      	bne.n	8004054 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003ffe:	4b81      	ldr	r3, [pc, #516]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8004000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004002:	4b80      	ldr	r3, [pc, #512]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8004004:	2104      	movs	r1, #4
 8004006:	430a      	orrs	r2, r1
 8004008:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800400a:	4b7e      	ldr	r3, [pc, #504]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 800400c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800400e:	4b7d      	ldr	r3, [pc, #500]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8004010:	2101      	movs	r1, #1
 8004012:	430a      	orrs	r2, r1
 8004014:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004016:	f7ff f91d 	bl	8003254 <HAL_GetTick>
 800401a:	0003      	movs	r3, r0
 800401c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004020:	f7ff f918 	bl	8003254 <HAL_GetTick>
 8004024:	0002      	movs	r2, r0
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e0e3      	b.n	80041fa <HAL_RCC_OscConfig+0x612>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004032:	4b74      	ldr	r3, [pc, #464]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8004034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004036:	2202      	movs	r2, #2
 8004038:	4013      	ands	r3, r2
 800403a:	d0f1      	beq.n	8004020 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800403c:	4b71      	ldr	r3, [pc, #452]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 800403e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004040:	22f8      	movs	r2, #248	; 0xf8
 8004042:	4393      	bics	r3, r2
 8004044:	0019      	movs	r1, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	00da      	lsls	r2, r3, #3
 800404c:	4b6d      	ldr	r3, [pc, #436]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 800404e:	430a      	orrs	r2, r1
 8004050:	635a      	str	r2, [r3, #52]	; 0x34
 8004052:	e034      	b.n	80040be <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	3305      	adds	r3, #5
 800405a:	d111      	bne.n	8004080 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800405c:	4b69      	ldr	r3, [pc, #420]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 800405e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004060:	4b68      	ldr	r3, [pc, #416]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8004062:	2104      	movs	r1, #4
 8004064:	438a      	bics	r2, r1
 8004066:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004068:	4b66      	ldr	r3, [pc, #408]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 800406a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406c:	22f8      	movs	r2, #248	; 0xf8
 800406e:	4393      	bics	r3, r2
 8004070:	0019      	movs	r1, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	00da      	lsls	r2, r3, #3
 8004078:	4b62      	ldr	r3, [pc, #392]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 800407a:	430a      	orrs	r2, r1
 800407c:	635a      	str	r2, [r3, #52]	; 0x34
 800407e:	e01e      	b.n	80040be <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004080:	4b60      	ldr	r3, [pc, #384]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8004082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004084:	4b5f      	ldr	r3, [pc, #380]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8004086:	2104      	movs	r1, #4
 8004088:	430a      	orrs	r2, r1
 800408a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800408c:	4b5d      	ldr	r3, [pc, #372]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 800408e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004090:	4b5c      	ldr	r3, [pc, #368]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8004092:	2101      	movs	r1, #1
 8004094:	438a      	bics	r2, r1
 8004096:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004098:	f7ff f8dc 	bl	8003254 <HAL_GetTick>
 800409c:	0003      	movs	r3, r0
 800409e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80040a0:	e008      	b.n	80040b4 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80040a2:	f7ff f8d7 	bl	8003254 <HAL_GetTick>
 80040a6:	0002      	movs	r2, r0
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e0a2      	b.n	80041fa <HAL_RCC_OscConfig+0x612>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80040b4:	4b53      	ldr	r3, [pc, #332]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 80040b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b8:	2202      	movs	r2, #2
 80040ba:	4013      	ands	r3, r2
 80040bc:	d1f1      	bne.n	80040a2 <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d100      	bne.n	80040c8 <HAL_RCC_OscConfig+0x4e0>
 80040c6:	e097      	b.n	80041f8 <HAL_RCC_OscConfig+0x610>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040c8:	4b4e      	ldr	r3, [pc, #312]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	220c      	movs	r2, #12
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b08      	cmp	r3, #8
 80040d2:	d100      	bne.n	80040d6 <HAL_RCC_OscConfig+0x4ee>
 80040d4:	e06b      	b.n	80041ae <HAL_RCC_OscConfig+0x5c6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d14c      	bne.n	8004178 <HAL_RCC_OscConfig+0x590>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040de:	4b49      	ldr	r3, [pc, #292]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	4b48      	ldr	r3, [pc, #288]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 80040e4:	494a      	ldr	r1, [pc, #296]	; (8004210 <HAL_RCC_OscConfig+0x628>)
 80040e6:	400a      	ands	r2, r1
 80040e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ea:	f7ff f8b3 	bl	8003254 <HAL_GetTick>
 80040ee:	0003      	movs	r3, r0
 80040f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f4:	f7ff f8ae 	bl	8003254 <HAL_GetTick>
 80040f8:	0002      	movs	r2, r0
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e079      	b.n	80041fa <HAL_RCC_OscConfig+0x612>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004106:	4b3f      	ldr	r3, [pc, #252]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	2380      	movs	r3, #128	; 0x80
 800410c:	049b      	lsls	r3, r3, #18
 800410e:	4013      	ands	r3, r2
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004112:	4b3c      	ldr	r3, [pc, #240]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	220f      	movs	r2, #15
 8004118:	4393      	bics	r3, r2
 800411a:	0019      	movs	r1, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004120:	4b38      	ldr	r3, [pc, #224]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8004122:	430a      	orrs	r2, r1
 8004124:	62da      	str	r2, [r3, #44]	; 0x2c
 8004126:	4b37      	ldr	r3, [pc, #220]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	4a3a      	ldr	r2, [pc, #232]	; (8004214 <HAL_RCC_OscConfig+0x62c>)
 800412c:	4013      	ands	r3, r2
 800412e:	0019      	movs	r1, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	431a      	orrs	r2, r3
 800413a:	4b32      	ldr	r3, [pc, #200]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 800413c:	430a      	orrs	r2, r1
 800413e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004140:	4b30      	ldr	r3, [pc, #192]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	4b2f      	ldr	r3, [pc, #188]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 8004146:	2180      	movs	r1, #128	; 0x80
 8004148:	0449      	lsls	r1, r1, #17
 800414a:	430a      	orrs	r2, r1
 800414c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414e:	f7ff f881 	bl	8003254 <HAL_GetTick>
 8004152:	0003      	movs	r3, r0
 8004154:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x582>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004158:	f7ff f87c 	bl	8003254 <HAL_GetTick>
 800415c:	0002      	movs	r2, r0
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e047      	b.n	80041fa <HAL_RCC_OscConfig+0x612>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800416a:	4b26      	ldr	r3, [pc, #152]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	2380      	movs	r3, #128	; 0x80
 8004170:	049b      	lsls	r3, r3, #18
 8004172:	4013      	ands	r3, r2
 8004174:	d0f0      	beq.n	8004158 <HAL_RCC_OscConfig+0x570>
 8004176:	e03f      	b.n	80041f8 <HAL_RCC_OscConfig+0x610>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004178:	4b22      	ldr	r3, [pc, #136]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	4b21      	ldr	r3, [pc, #132]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 800417e:	4924      	ldr	r1, [pc, #144]	; (8004210 <HAL_RCC_OscConfig+0x628>)
 8004180:	400a      	ands	r2, r1
 8004182:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004184:	f7ff f866 	bl	8003254 <HAL_GetTick>
 8004188:	0003      	movs	r3, r0
 800418a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800418e:	f7ff f861 	bl	8003254 <HAL_GetTick>
 8004192:	0002      	movs	r2, r0
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e02c      	b.n	80041fa <HAL_RCC_OscConfig+0x612>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041a0:	4b18      	ldr	r3, [pc, #96]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	2380      	movs	r3, #128	; 0x80
 80041a6:	049b      	lsls	r3, r3, #18
 80041a8:	4013      	ands	r3, r2
 80041aa:	d1f0      	bne.n	800418e <HAL_RCC_OscConfig+0x5a6>
 80041ac:	e024      	b.n	80041f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d101      	bne.n	80041ba <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e01f      	b.n	80041fa <HAL_RCC_OscConfig+0x612>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80041ba:	4b12      	ldr	r3, [pc, #72]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80041c0:	4b10      	ldr	r3, [pc, #64]	; (8004204 <HAL_RCC_OscConfig+0x61c>)
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	025b      	lsls	r3, r3, #9
 80041cc:	401a      	ands	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d10e      	bne.n	80041f4 <HAL_RCC_OscConfig+0x60c>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	220f      	movs	r2, #15
 80041da:	401a      	ands	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d107      	bne.n	80041f4 <HAL_RCC_OscConfig+0x60c>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	23f0      	movs	r3, #240	; 0xf0
 80041e8:	039b      	lsls	r3, r3, #14
 80041ea:	401a      	ands	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d001      	beq.n	80041f8 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <HAL_RCC_OscConfig+0x612>
        }
      }
    }
  }

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	0018      	movs	r0, r3
 80041fc:	46bd      	mov	sp, r7
 80041fe:	b008      	add	sp, #32
 8004200:	bd80      	pop	{r7, pc}
 8004202:	46c0      	nop			; (mov r8, r8)
 8004204:	40021000 	.word	0x40021000
 8004208:	00001388 	.word	0x00001388
 800420c:	efffffff 	.word	0xefffffff
 8004210:	feffffff 	.word	0xfeffffff
 8004214:	ffc2ffff 	.word	0xffc2ffff

08004218 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e0b3      	b.n	8004394 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800422c:	4b5b      	ldr	r3, [pc, #364]	; (800439c <HAL_RCC_ClockConfig+0x184>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2201      	movs	r2, #1
 8004232:	4013      	ands	r3, r2
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d911      	bls.n	800425e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423a:	4b58      	ldr	r3, [pc, #352]	; (800439c <HAL_RCC_ClockConfig+0x184>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2201      	movs	r2, #1
 8004240:	4393      	bics	r3, r2
 8004242:	0019      	movs	r1, r3
 8004244:	4b55      	ldr	r3, [pc, #340]	; (800439c <HAL_RCC_ClockConfig+0x184>)
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800424c:	4b53      	ldr	r3, [pc, #332]	; (800439c <HAL_RCC_ClockConfig+0x184>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2201      	movs	r2, #1
 8004252:	4013      	ands	r3, r2
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d001      	beq.n	800425e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e09a      	b.n	8004394 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2202      	movs	r2, #2
 8004264:	4013      	ands	r3, r2
 8004266:	d015      	beq.n	8004294 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2204      	movs	r2, #4
 800426e:	4013      	ands	r3, r2
 8004270:	d006      	beq.n	8004280 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004272:	4b4b      	ldr	r3, [pc, #300]	; (80043a0 <HAL_RCC_ClockConfig+0x188>)
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	4b4a      	ldr	r3, [pc, #296]	; (80043a0 <HAL_RCC_ClockConfig+0x188>)
 8004278:	21e0      	movs	r1, #224	; 0xe0
 800427a:	00c9      	lsls	r1, r1, #3
 800427c:	430a      	orrs	r2, r1
 800427e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004280:	4b47      	ldr	r3, [pc, #284]	; (80043a0 <HAL_RCC_ClockConfig+0x188>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	22f0      	movs	r2, #240	; 0xf0
 8004286:	4393      	bics	r3, r2
 8004288:	0019      	movs	r1, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	4b44      	ldr	r3, [pc, #272]	; (80043a0 <HAL_RCC_ClockConfig+0x188>)
 8004290:	430a      	orrs	r2, r1
 8004292:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2201      	movs	r2, #1
 800429a:	4013      	ands	r3, r2
 800429c:	d040      	beq.n	8004320 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d107      	bne.n	80042b6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a6:	4b3e      	ldr	r3, [pc, #248]	; (80043a0 <HAL_RCC_ClockConfig+0x188>)
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	2380      	movs	r3, #128	; 0x80
 80042ac:	029b      	lsls	r3, r3, #10
 80042ae:	4013      	ands	r3, r2
 80042b0:	d114      	bne.n	80042dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e06e      	b.n	8004394 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d107      	bne.n	80042ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042be:	4b38      	ldr	r3, [pc, #224]	; (80043a0 <HAL_RCC_ClockConfig+0x188>)
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	2380      	movs	r3, #128	; 0x80
 80042c4:	049b      	lsls	r3, r3, #18
 80042c6:	4013      	ands	r3, r2
 80042c8:	d108      	bne.n	80042dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e062      	b.n	8004394 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ce:	4b34      	ldr	r3, [pc, #208]	; (80043a0 <HAL_RCC_ClockConfig+0x188>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2202      	movs	r2, #2
 80042d4:	4013      	ands	r3, r2
 80042d6:	d101      	bne.n	80042dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e05b      	b.n	8004394 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042dc:	4b30      	ldr	r3, [pc, #192]	; (80043a0 <HAL_RCC_ClockConfig+0x188>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2203      	movs	r2, #3
 80042e2:	4393      	bics	r3, r2
 80042e4:	0019      	movs	r1, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	4b2d      	ldr	r3, [pc, #180]	; (80043a0 <HAL_RCC_ClockConfig+0x188>)
 80042ec:	430a      	orrs	r2, r1
 80042ee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042f0:	f7fe ffb0 	bl	8003254 <HAL_GetTick>
 80042f4:	0003      	movs	r3, r0
 80042f6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f8:	e009      	b.n	800430e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042fa:	f7fe ffab 	bl	8003254 <HAL_GetTick>
 80042fe:	0002      	movs	r2, r0
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	4a27      	ldr	r2, [pc, #156]	; (80043a4 <HAL_RCC_ClockConfig+0x18c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d901      	bls.n	800430e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e042      	b.n	8004394 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430e:	4b24      	ldr	r3, [pc, #144]	; (80043a0 <HAL_RCC_ClockConfig+0x188>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	220c      	movs	r2, #12
 8004314:	401a      	ands	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	429a      	cmp	r2, r3
 800431e:	d1ec      	bne.n	80042fa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004320:	4b1e      	ldr	r3, [pc, #120]	; (800439c <HAL_RCC_ClockConfig+0x184>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2201      	movs	r2, #1
 8004326:	4013      	ands	r3, r2
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d211      	bcs.n	8004352 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800432e:	4b1b      	ldr	r3, [pc, #108]	; (800439c <HAL_RCC_ClockConfig+0x184>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2201      	movs	r2, #1
 8004334:	4393      	bics	r3, r2
 8004336:	0019      	movs	r1, r3
 8004338:	4b18      	ldr	r3, [pc, #96]	; (800439c <HAL_RCC_ClockConfig+0x184>)
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004340:	4b16      	ldr	r3, [pc, #88]	; (800439c <HAL_RCC_ClockConfig+0x184>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2201      	movs	r2, #1
 8004346:	4013      	ands	r3, r2
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d001      	beq.n	8004352 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e020      	b.n	8004394 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2204      	movs	r2, #4
 8004358:	4013      	ands	r3, r2
 800435a:	d009      	beq.n	8004370 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800435c:	4b10      	ldr	r3, [pc, #64]	; (80043a0 <HAL_RCC_ClockConfig+0x188>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	4a11      	ldr	r2, [pc, #68]	; (80043a8 <HAL_RCC_ClockConfig+0x190>)
 8004362:	4013      	ands	r3, r2
 8004364:	0019      	movs	r1, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	4b0d      	ldr	r3, [pc, #52]	; (80043a0 <HAL_RCC_ClockConfig+0x188>)
 800436c:	430a      	orrs	r2, r1
 800436e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004370:	f000 f820 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 8004374:	0001      	movs	r1, r0
 8004376:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <HAL_RCC_ClockConfig+0x188>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	091b      	lsrs	r3, r3, #4
 800437c:	220f      	movs	r2, #15
 800437e:	4013      	ands	r3, r2
 8004380:	4a0a      	ldr	r2, [pc, #40]	; (80043ac <HAL_RCC_ClockConfig+0x194>)
 8004382:	5cd3      	ldrb	r3, [r2, r3]
 8004384:	000a      	movs	r2, r1
 8004386:	40da      	lsrs	r2, r3
 8004388:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <HAL_RCC_ClockConfig+0x198>)
 800438a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800438c:	2003      	movs	r0, #3
 800438e:	f7fe ff1b 	bl	80031c8 <HAL_InitTick>
  
  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	0018      	movs	r0, r3
 8004396:	46bd      	mov	sp, r7
 8004398:	b004      	add	sp, #16
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40022000 	.word	0x40022000
 80043a0:	40021000 	.word	0x40021000
 80043a4:	00001388 	.word	0x00001388
 80043a8:	fffff8ff 	.word	0xfffff8ff
 80043ac:	0800a76c 	.word	0x0800a76c
 80043b0:	20000000 	.word	0x20000000

080043b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b4:	b590      	push	{r4, r7, lr}
 80043b6:	b08f      	sub	sp, #60	; 0x3c
 80043b8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80043ba:	2314      	movs	r3, #20
 80043bc:	18fb      	adds	r3, r7, r3
 80043be:	4a2a      	ldr	r2, [pc, #168]	; (8004468 <HAL_RCC_GetSysClockFreq+0xb4>)
 80043c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043c2:	c313      	stmia	r3!, {r0, r1, r4}
 80043c4:	6812      	ldr	r2, [r2, #0]
 80043c6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80043c8:	1d3b      	adds	r3, r7, #4
 80043ca:	4a28      	ldr	r2, [pc, #160]	; (800446c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043ce:	c313      	stmia	r3!, {r0, r1, r4}
 80043d0:	6812      	ldr	r2, [r2, #0]
 80043d2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043d8:	2300      	movs	r3, #0
 80043da:	62bb      	str	r3, [r7, #40]	; 0x28
 80043dc:	2300      	movs	r3, #0
 80043de:	637b      	str	r3, [r7, #52]	; 0x34
 80043e0:	2300      	movs	r3, #0
 80043e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80043e8:	4b21      	ldr	r3, [pc, #132]	; (8004470 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f0:	220c      	movs	r2, #12
 80043f2:	4013      	ands	r3, r2
 80043f4:	2b04      	cmp	r3, #4
 80043f6:	d002      	beq.n	80043fe <HAL_RCC_GetSysClockFreq+0x4a>
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d003      	beq.n	8004404 <HAL_RCC_GetSysClockFreq+0x50>
 80043fc:	e02c      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0xa4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043fe:	4b1d      	ldr	r3, [pc, #116]	; (8004474 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004400:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004402:	e02c      	b.n	800445e <HAL_RCC_GetSysClockFreq+0xaa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004406:	0c9b      	lsrs	r3, r3, #18
 8004408:	220f      	movs	r2, #15
 800440a:	4013      	ands	r3, r2
 800440c:	2214      	movs	r2, #20
 800440e:	18ba      	adds	r2, r7, r2
 8004410:	5cd3      	ldrb	r3, [r2, r3]
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004414:	4b16      	ldr	r3, [pc, #88]	; (8004470 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	220f      	movs	r2, #15
 800441a:	4013      	ands	r3, r2
 800441c:	1d3a      	adds	r2, r7, #4
 800441e:	5cd3      	ldrb	r3, [r2, r3]
 8004420:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004422:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004424:	2380      	movs	r3, #128	; 0x80
 8004426:	025b      	lsls	r3, r3, #9
 8004428:	4013      	ands	r3, r2
 800442a:	d009      	beq.n	8004440 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800442c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800442e:	4811      	ldr	r0, [pc, #68]	; (8004474 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004430:	f7fb fe7a 	bl	8000128 <__udivsi3>
 8004434:	0003      	movs	r3, r0
 8004436:	001a      	movs	r2, r3
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	4353      	muls	r3, r2
 800443c:	637b      	str	r3, [r7, #52]	; 0x34
 800443e:	e008      	b.n	8004452 <HAL_RCC_GetSysClockFreq+0x9e>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004440:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004442:	480c      	ldr	r0, [pc, #48]	; (8004474 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004444:	f7fb fe70 	bl	8000128 <__udivsi3>
 8004448:	0003      	movs	r3, r0
 800444a:	001a      	movs	r2, r3
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	4353      	muls	r3, r2
 8004450:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004454:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004456:	e002      	b.n	800445e <HAL_RCC_GetSysClockFreq+0xaa>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004458:	4b06      	ldr	r3, [pc, #24]	; (8004474 <HAL_RCC_GetSysClockFreq+0xc0>)
 800445a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800445c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004460:	0018      	movs	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	b00f      	add	sp, #60	; 0x3c
 8004466:	bd90      	pop	{r4, r7, pc}
 8004468:	0800a64c 	.word	0x0800a64c
 800446c:	0800a65c 	.word	0x0800a65c
 8004470:	40021000 	.word	0x40021000
 8004474:	007a1200 	.word	0x007a1200

08004478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800447c:	4b02      	ldr	r3, [pc, #8]	; (8004488 <HAL_RCC_GetHCLKFreq+0x10>)
 800447e:	681b      	ldr	r3, [r3, #0]
}
 8004480:	0018      	movs	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	20000000 	.word	0x20000000

0800448c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004490:	f7ff fff2 	bl	8004478 <HAL_RCC_GetHCLKFreq>
 8004494:	0001      	movs	r1, r0
 8004496:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	0a1b      	lsrs	r3, r3, #8
 800449c:	2207      	movs	r2, #7
 800449e:	4013      	ands	r3, r2
 80044a0:	4a04      	ldr	r2, [pc, #16]	; (80044b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044a2:	5cd3      	ldrb	r3, [r2, r3]
 80044a4:	40d9      	lsrs	r1, r3
 80044a6:	000b      	movs	r3, r1
}    
 80044a8:	0018      	movs	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	46c0      	nop			; (mov r8, r8)
 80044b0:	40021000 	.word	0x40021000
 80044b4:	0800a77c 	.word	0x0800a77c

080044b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e0a8      	b.n	800461c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d109      	bne.n	80044e6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	2382      	movs	r3, #130	; 0x82
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	429a      	cmp	r2, r3
 80044dc:	d009      	beq.n	80044f2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	61da      	str	r2, [r3, #28]
 80044e4:	e005      	b.n	80044f2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	225d      	movs	r2, #93	; 0x5d
 80044fc:	5c9b      	ldrb	r3, [r3, r2]
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d107      	bne.n	8004514 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	225c      	movs	r2, #92	; 0x5c
 8004508:	2100      	movs	r1, #0
 800450a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	0018      	movs	r0, r3
 8004510:	f7fe fc64 	bl	8002ddc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	225d      	movs	r2, #93	; 0x5d
 8004518:	2102      	movs	r1, #2
 800451a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2140      	movs	r1, #64	; 0x40
 8004528:	438a      	bics	r2, r1
 800452a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	23e0      	movs	r3, #224	; 0xe0
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	429a      	cmp	r2, r3
 8004536:	d902      	bls.n	800453e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004538:	2300      	movs	r3, #0
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	e002      	b.n	8004544 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800453e:	2380      	movs	r3, #128	; 0x80
 8004540:	015b      	lsls	r3, r3, #5
 8004542:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	23f0      	movs	r3, #240	; 0xf0
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	429a      	cmp	r2, r3
 800454e:	d008      	beq.n	8004562 <HAL_SPI_Init+0xaa>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	23e0      	movs	r3, #224	; 0xe0
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	429a      	cmp	r2, r3
 800455a:	d002      	beq.n	8004562 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	2382      	movs	r3, #130	; 0x82
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	401a      	ands	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6899      	ldr	r1, [r3, #8]
 8004570:	2384      	movs	r3, #132	; 0x84
 8004572:	021b      	lsls	r3, r3, #8
 8004574:	400b      	ands	r3, r1
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	2102      	movs	r1, #2
 800457e:	400b      	ands	r3, r1
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	2101      	movs	r1, #1
 8004588:	400b      	ands	r3, r1
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6999      	ldr	r1, [r3, #24]
 8004590:	2380      	movs	r3, #128	; 0x80
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	400b      	ands	r3, r1
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	2138      	movs	r1, #56	; 0x38
 800459e:	400b      	ands	r3, r1
 80045a0:	431a      	orrs	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	2180      	movs	r1, #128	; 0x80
 80045a8:	400b      	ands	r3, r1
 80045aa:	431a      	orrs	r2, r3
 80045ac:	0011      	movs	r1, r2
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045b2:	2380      	movs	r3, #128	; 0x80
 80045b4:	019b      	lsls	r3, r3, #6
 80045b6:	401a      	ands	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	0c1b      	lsrs	r3, r3, #16
 80045c6:	2204      	movs	r2, #4
 80045c8:	401a      	ands	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	2110      	movs	r1, #16
 80045d0:	400b      	ands	r3, r1
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d8:	2108      	movs	r1, #8
 80045da:	400b      	ands	r3, r1
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68d9      	ldr	r1, [r3, #12]
 80045e2:	23f0      	movs	r3, #240	; 0xf0
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	400b      	ands	r3, r1
 80045e8:	431a      	orrs	r2, r3
 80045ea:	0011      	movs	r1, r2
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	2380      	movs	r3, #128	; 0x80
 80045f0:	015b      	lsls	r3, r3, #5
 80045f2:	401a      	ands	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	69da      	ldr	r2, [r3, #28]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4907      	ldr	r1, [pc, #28]	; (8004624 <HAL_SPI_Init+0x16c>)
 8004608:	400a      	ands	r2, r1
 800460a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	225d      	movs	r2, #93	; 0x5d
 8004616:	2101      	movs	r1, #1
 8004618:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	0018      	movs	r0, r3
 800461e:	46bd      	mov	sp, r7
 8004620:	b004      	add	sp, #16
 8004622:	bd80      	pop	{r7, pc}
 8004624:	fffff7ff 	.word	0xfffff7ff

08004628 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	603b      	str	r3, [r7, #0]
 8004634:	1dbb      	adds	r3, r7, #6
 8004636:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004638:	231f      	movs	r3, #31
 800463a:	18fb      	adds	r3, r7, r3
 800463c:	2200      	movs	r2, #0
 800463e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	225c      	movs	r2, #92	; 0x5c
 8004644:	5c9b      	ldrb	r3, [r3, r2]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_SPI_Transmit+0x26>
 800464a:	2302      	movs	r3, #2
 800464c:	e140      	b.n	80048d0 <HAL_SPI_Transmit+0x2a8>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	225c      	movs	r2, #92	; 0x5c
 8004652:	2101      	movs	r1, #1
 8004654:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004656:	f7fe fdfd 	bl	8003254 <HAL_GetTick>
 800465a:	0003      	movs	r3, r0
 800465c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800465e:	2316      	movs	r3, #22
 8004660:	18fb      	adds	r3, r7, r3
 8004662:	1dba      	adds	r2, r7, #6
 8004664:	8812      	ldrh	r2, [r2, #0]
 8004666:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	225d      	movs	r2, #93	; 0x5d
 800466c:	5c9b      	ldrb	r3, [r3, r2]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b01      	cmp	r3, #1
 8004672:	d004      	beq.n	800467e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004674:	231f      	movs	r3, #31
 8004676:	18fb      	adds	r3, r7, r3
 8004678:	2202      	movs	r2, #2
 800467a:	701a      	strb	r2, [r3, #0]
    goto error;
 800467c:	e11d      	b.n	80048ba <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <HAL_SPI_Transmit+0x64>
 8004684:	1dbb      	adds	r3, r7, #6
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d104      	bne.n	8004696 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800468c:	231f      	movs	r3, #31
 800468e:	18fb      	adds	r3, r7, r3
 8004690:	2201      	movs	r2, #1
 8004692:	701a      	strb	r2, [r3, #0]
    goto error;
 8004694:	e111      	b.n	80048ba <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	225d      	movs	r2, #93	; 0x5d
 800469a:	2103      	movs	r1, #3
 800469c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	1dba      	adds	r2, r7, #6
 80046ae:	8812      	ldrh	r2, [r2, #0]
 80046b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	1dba      	adds	r2, r7, #6
 80046b6:	8812      	ldrh	r2, [r2, #0]
 80046b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2244      	movs	r2, #68	; 0x44
 80046c4:	2100      	movs	r1, #0
 80046c6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2246      	movs	r2, #70	; 0x46
 80046cc:	2100      	movs	r1, #0
 80046ce:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	2380      	movs	r3, #128	; 0x80
 80046e2:	021b      	lsls	r3, r3, #8
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d110      	bne.n	800470a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2140      	movs	r1, #64	; 0x40
 80046f4:	438a      	bics	r2, r1
 80046f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2180      	movs	r1, #128	; 0x80
 8004704:	01c9      	lsls	r1, r1, #7
 8004706:	430a      	orrs	r2, r1
 8004708:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2240      	movs	r2, #64	; 0x40
 8004712:	4013      	ands	r3, r2
 8004714:	2b40      	cmp	r3, #64	; 0x40
 8004716:	d007      	beq.n	8004728 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2140      	movs	r1, #64	; 0x40
 8004724:	430a      	orrs	r2, r1
 8004726:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	23e0      	movs	r3, #224	; 0xe0
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	429a      	cmp	r2, r3
 8004732:	d94e      	bls.n	80047d2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d004      	beq.n	8004746 <HAL_SPI_Transmit+0x11e>
 800473c:	2316      	movs	r3, #22
 800473e:	18fb      	adds	r3, r7, r3
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d13f      	bne.n	80047c6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474a:	881a      	ldrh	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004756:	1c9a      	adds	r2, r3, #2
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004760:	b29b      	uxth	r3, r3
 8004762:	3b01      	subs	r3, #1
 8004764:	b29a      	uxth	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800476a:	e02c      	b.n	80047c6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	2202      	movs	r2, #2
 8004774:	4013      	ands	r3, r2
 8004776:	2b02      	cmp	r3, #2
 8004778:	d112      	bne.n	80047a0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477e:	881a      	ldrh	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	1c9a      	adds	r2, r3, #2
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004794:	b29b      	uxth	r3, r3
 8004796:	3b01      	subs	r3, #1
 8004798:	b29a      	uxth	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800479e:	e012      	b.n	80047c6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047a0:	f7fe fd58 	bl	8003254 <HAL_GetTick>
 80047a4:	0002      	movs	r2, r0
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d802      	bhi.n	80047b6 <HAL_SPI_Transmit+0x18e>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	3301      	adds	r3, #1
 80047b4:	d102      	bne.n	80047bc <HAL_SPI_Transmit+0x194>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d104      	bne.n	80047c6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80047bc:	231f      	movs	r3, #31
 80047be:	18fb      	adds	r3, r7, r3
 80047c0:	2203      	movs	r2, #3
 80047c2:	701a      	strb	r2, [r3, #0]
          goto error;
 80047c4:	e079      	b.n	80048ba <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1cd      	bne.n	800476c <HAL_SPI_Transmit+0x144>
 80047d0:	e04f      	b.n	8004872 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d004      	beq.n	80047e4 <HAL_SPI_Transmit+0x1bc>
 80047da:	2316      	movs	r3, #22
 80047dc:	18fb      	adds	r3, r7, r3
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d141      	bne.n	8004868 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	330c      	adds	r3, #12
 80047ee:	7812      	ldrb	r2, [r2, #0]
 80047f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004800:	b29b      	uxth	r3, r3
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800480a:	e02d      	b.n	8004868 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	2202      	movs	r2, #2
 8004814:	4013      	ands	r3, r2
 8004816:	2b02      	cmp	r3, #2
 8004818:	d113      	bne.n	8004842 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	330c      	adds	r3, #12
 8004824:	7812      	ldrb	r2, [r2, #0]
 8004826:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004836:	b29b      	uxth	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	b29a      	uxth	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004840:	e012      	b.n	8004868 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004842:	f7fe fd07 	bl	8003254 <HAL_GetTick>
 8004846:	0002      	movs	r2, r0
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	429a      	cmp	r2, r3
 8004850:	d802      	bhi.n	8004858 <HAL_SPI_Transmit+0x230>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	3301      	adds	r3, #1
 8004856:	d102      	bne.n	800485e <HAL_SPI_Transmit+0x236>
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d104      	bne.n	8004868 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800485e:	231f      	movs	r3, #31
 8004860:	18fb      	adds	r3, r7, r3
 8004862:	2203      	movs	r2, #3
 8004864:	701a      	strb	r2, [r3, #0]
          goto error;
 8004866:	e028      	b.n	80048ba <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1cc      	bne.n	800480c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	6839      	ldr	r1, [r7, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	0018      	movs	r0, r3
 800487a:	f000 fccf 	bl	800521c <SPI_EndRxTxTransaction>
 800487e:	1e03      	subs	r3, r0, #0
 8004880:	d002      	beq.n	8004888 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2220      	movs	r2, #32
 8004886:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10a      	bne.n	80048a6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004890:	2300      	movs	r3, #0
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	613b      	str	r3, [r7, #16]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	613b      	str	r3, [r7, #16]
 80048a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d004      	beq.n	80048b8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80048ae:	231f      	movs	r3, #31
 80048b0:	18fb      	adds	r3, r7, r3
 80048b2:	2201      	movs	r2, #1
 80048b4:	701a      	strb	r2, [r3, #0]
 80048b6:	e000      	b.n	80048ba <HAL_SPI_Transmit+0x292>
  }

error:
 80048b8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	225d      	movs	r2, #93	; 0x5d
 80048be:	2101      	movs	r1, #1
 80048c0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	225c      	movs	r2, #92	; 0x5c
 80048c6:	2100      	movs	r1, #0
 80048c8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80048ca:	231f      	movs	r3, #31
 80048cc:	18fb      	adds	r3, r7, r3
 80048ce:	781b      	ldrb	r3, [r3, #0]
}
 80048d0:	0018      	movs	r0, r3
 80048d2:	46bd      	mov	sp, r7
 80048d4:	b008      	add	sp, #32
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d8:	b590      	push	{r4, r7, lr}
 80048da:	b089      	sub	sp, #36	; 0x24
 80048dc:	af02      	add	r7, sp, #8
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	1dbb      	adds	r3, r7, #6
 80048e6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048e8:	2317      	movs	r3, #23
 80048ea:	18fb      	adds	r3, r7, r3
 80048ec:	2200      	movs	r2, #0
 80048ee:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	2382      	movs	r3, #130	; 0x82
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d113      	bne.n	8004924 <HAL_SPI_Receive+0x4c>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10f      	bne.n	8004924 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	225d      	movs	r2, #93	; 0x5d
 8004908:	2104      	movs	r1, #4
 800490a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800490c:	1dbb      	adds	r3, r7, #6
 800490e:	881c      	ldrh	r4, [r3, #0]
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	68b9      	ldr	r1, [r7, #8]
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	0023      	movs	r3, r4
 800491c:	f000 f928 	bl	8004b70 <HAL_SPI_TransmitReceive>
 8004920:	0003      	movs	r3, r0
 8004922:	e11c      	b.n	8004b5e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	225c      	movs	r2, #92	; 0x5c
 8004928:	5c9b      	ldrb	r3, [r3, r2]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d101      	bne.n	8004932 <HAL_SPI_Receive+0x5a>
 800492e:	2302      	movs	r3, #2
 8004930:	e115      	b.n	8004b5e <HAL_SPI_Receive+0x286>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	225c      	movs	r2, #92	; 0x5c
 8004936:	2101      	movs	r1, #1
 8004938:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800493a:	f7fe fc8b 	bl	8003254 <HAL_GetTick>
 800493e:	0003      	movs	r3, r0
 8004940:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	225d      	movs	r2, #93	; 0x5d
 8004946:	5c9b      	ldrb	r3, [r3, r2]
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b01      	cmp	r3, #1
 800494c:	d004      	beq.n	8004958 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800494e:	2317      	movs	r3, #23
 8004950:	18fb      	adds	r3, r7, r3
 8004952:	2202      	movs	r2, #2
 8004954:	701a      	strb	r2, [r3, #0]
    goto error;
 8004956:	e0f7      	b.n	8004b48 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_SPI_Receive+0x8e>
 800495e:	1dbb      	adds	r3, r7, #6
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d104      	bne.n	8004970 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8004966:	2317      	movs	r3, #23
 8004968:	18fb      	adds	r3, r7, r3
 800496a:	2201      	movs	r2, #1
 800496c:	701a      	strb	r2, [r3, #0]
    goto error;
 800496e:	e0eb      	b.n	8004b48 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	225d      	movs	r2, #93	; 0x5d
 8004974:	2104      	movs	r1, #4
 8004976:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	1dba      	adds	r2, r7, #6
 8004988:	2144      	movs	r1, #68	; 0x44
 800498a:	8812      	ldrh	r2, [r2, #0]
 800498c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	1dba      	adds	r2, r7, #6
 8004992:	2146      	movs	r1, #70	; 0x46
 8004994:	8812      	ldrh	r2, [r2, #0]
 8004996:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	23e0      	movs	r3, #224	; 0xe0
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	429a      	cmp	r2, r3
 80049c0:	d908      	bls.n	80049d4 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4966      	ldr	r1, [pc, #408]	; (8004b68 <HAL_SPI_Receive+0x290>)
 80049ce:	400a      	ands	r2, r1
 80049d0:	605a      	str	r2, [r3, #4]
 80049d2:	e008      	b.n	80049e6 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2180      	movs	r1, #128	; 0x80
 80049e0:	0149      	lsls	r1, r1, #5
 80049e2:	430a      	orrs	r2, r1
 80049e4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	2380      	movs	r3, #128	; 0x80
 80049ec:	021b      	lsls	r3, r3, #8
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d10f      	bne.n	8004a12 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2140      	movs	r1, #64	; 0x40
 80049fe:	438a      	bics	r2, r1
 8004a00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4957      	ldr	r1, [pc, #348]	; (8004b6c <HAL_SPI_Receive+0x294>)
 8004a0e:	400a      	ands	r2, r1
 8004a10:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2240      	movs	r2, #64	; 0x40
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	2b40      	cmp	r3, #64	; 0x40
 8004a1e:	d007      	beq.n	8004a30 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2140      	movs	r1, #64	; 0x40
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	23e0      	movs	r3, #224	; 0xe0
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d900      	bls.n	8004a3e <HAL_SPI_Receive+0x166>
 8004a3c:	e069      	b.n	8004b12 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004a3e:	e031      	b.n	8004aa4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2201      	movs	r2, #1
 8004a48:	4013      	ands	r3, r2
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d117      	bne.n	8004a7e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	330c      	adds	r3, #12
 8004a54:	001a      	movs	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	7812      	ldrb	r2, [r2, #0]
 8004a5c:	b2d2      	uxtb	r2, r2
 8004a5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2246      	movs	r2, #70	; 0x46
 8004a6e:	5a9b      	ldrh	r3, [r3, r2]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b299      	uxth	r1, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2246      	movs	r2, #70	; 0x46
 8004a7a:	5299      	strh	r1, [r3, r2]
 8004a7c:	e012      	b.n	8004aa4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a7e:	f7fe fbe9 	bl	8003254 <HAL_GetTick>
 8004a82:	0002      	movs	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d802      	bhi.n	8004a94 <HAL_SPI_Receive+0x1bc>
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	3301      	adds	r3, #1
 8004a92:	d102      	bne.n	8004a9a <HAL_SPI_Receive+0x1c2>
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d104      	bne.n	8004aa4 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8004a9a:	2317      	movs	r3, #23
 8004a9c:	18fb      	adds	r3, r7, r3
 8004a9e:	2203      	movs	r2, #3
 8004aa0:	701a      	strb	r2, [r3, #0]
          goto error;
 8004aa2:	e051      	b.n	8004b48 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2246      	movs	r2, #70	; 0x46
 8004aa8:	5a9b      	ldrh	r3, [r3, r2]
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1c7      	bne.n	8004a40 <HAL_SPI_Receive+0x168>
 8004ab0:	e035      	b.n	8004b1e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	4013      	ands	r3, r2
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d115      	bne.n	8004aec <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68da      	ldr	r2, [r3, #12]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	b292      	uxth	r2, r2
 8004acc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	1c9a      	adds	r2, r3, #2
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2246      	movs	r2, #70	; 0x46
 8004adc:	5a9b      	ldrh	r3, [r3, r2]
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b299      	uxth	r1, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2246      	movs	r2, #70	; 0x46
 8004ae8:	5299      	strh	r1, [r3, r2]
 8004aea:	e012      	b.n	8004b12 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aec:	f7fe fbb2 	bl	8003254 <HAL_GetTick>
 8004af0:	0002      	movs	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d802      	bhi.n	8004b02 <HAL_SPI_Receive+0x22a>
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	3301      	adds	r3, #1
 8004b00:	d102      	bne.n	8004b08 <HAL_SPI_Receive+0x230>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d104      	bne.n	8004b12 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8004b08:	2317      	movs	r3, #23
 8004b0a:	18fb      	adds	r3, r7, r3
 8004b0c:	2203      	movs	r2, #3
 8004b0e:	701a      	strb	r2, [r3, #0]
          goto error;
 8004b10:	e01a      	b.n	8004b48 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2246      	movs	r2, #70	; 0x46
 8004b16:	5a9b      	ldrh	r3, [r3, r2]
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1c9      	bne.n	8004ab2 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	6839      	ldr	r1, [r7, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	0018      	movs	r0, r3
 8004b26:	f000 fb1b 	bl	8005160 <SPI_EndRxTransaction>
 8004b2a:	1e03      	subs	r3, r0, #0
 8004b2c:	d002      	beq.n	8004b34 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2220      	movs	r2, #32
 8004b32:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d004      	beq.n	8004b46 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8004b3c:	2317      	movs	r3, #23
 8004b3e:	18fb      	adds	r3, r7, r3
 8004b40:	2201      	movs	r2, #1
 8004b42:	701a      	strb	r2, [r3, #0]
 8004b44:	e000      	b.n	8004b48 <HAL_SPI_Receive+0x270>
  }

error :
 8004b46:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	225d      	movs	r2, #93	; 0x5d
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	225c      	movs	r2, #92	; 0x5c
 8004b54:	2100      	movs	r1, #0
 8004b56:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004b58:	2317      	movs	r3, #23
 8004b5a:	18fb      	adds	r3, r7, r3
 8004b5c:	781b      	ldrb	r3, [r3, #0]
}
 8004b5e:	0018      	movs	r0, r3
 8004b60:	46bd      	mov	sp, r7
 8004b62:	b007      	add	sp, #28
 8004b64:	bd90      	pop	{r4, r7, pc}
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	ffffefff 	.word	0xffffefff
 8004b6c:	ffffbfff 	.word	0xffffbfff

08004b70 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08a      	sub	sp, #40	; 0x28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	001a      	movs	r2, r3
 8004b7e:	1cbb      	adds	r3, r7, #2
 8004b80:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b82:	2301      	movs	r3, #1
 8004b84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b86:	2323      	movs	r3, #35	; 0x23
 8004b88:	18fb      	adds	r3, r7, r3
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	225c      	movs	r2, #92	; 0x5c
 8004b92:	5c9b      	ldrb	r3, [r3, r2]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d101      	bne.n	8004b9c <HAL_SPI_TransmitReceive+0x2c>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e1b6      	b.n	8004f0a <HAL_SPI_TransmitReceive+0x39a>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	225c      	movs	r2, #92	; 0x5c
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ba4:	f7fe fb56 	bl	8003254 <HAL_GetTick>
 8004ba8:	0003      	movs	r3, r0
 8004baa:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bac:	201b      	movs	r0, #27
 8004bae:	183b      	adds	r3, r7, r0
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	215d      	movs	r1, #93	; 0x5d
 8004bb4:	5c52      	ldrb	r2, [r2, r1]
 8004bb6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004bbe:	2312      	movs	r3, #18
 8004bc0:	18fb      	adds	r3, r7, r3
 8004bc2:	1cba      	adds	r2, r7, #2
 8004bc4:	8812      	ldrh	r2, [r2, #0]
 8004bc6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bc8:	183b      	adds	r3, r7, r0
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d012      	beq.n	8004bf6 <HAL_SPI_TransmitReceive+0x86>
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	2382      	movs	r3, #130	; 0x82
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d108      	bne.n	8004bec <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d104      	bne.n	8004bec <HAL_SPI_TransmitReceive+0x7c>
 8004be2:	231b      	movs	r3, #27
 8004be4:	18fb      	adds	r3, r7, r3
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d004      	beq.n	8004bf6 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8004bec:	2323      	movs	r3, #35	; 0x23
 8004bee:	18fb      	adds	r3, r7, r3
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	701a      	strb	r2, [r3, #0]
    goto error;
 8004bf4:	e17e      	b.n	8004ef4 <HAL_SPI_TransmitReceive+0x384>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d006      	beq.n	8004c0a <HAL_SPI_TransmitReceive+0x9a>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_SPI_TransmitReceive+0x9a>
 8004c02:	1cbb      	adds	r3, r7, #2
 8004c04:	881b      	ldrh	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d104      	bne.n	8004c14 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 8004c0a:	2323      	movs	r3, #35	; 0x23
 8004c0c:	18fb      	adds	r3, r7, r3
 8004c0e:	2201      	movs	r2, #1
 8004c10:	701a      	strb	r2, [r3, #0]
    goto error;
 8004c12:	e16f      	b.n	8004ef4 <HAL_SPI_TransmitReceive+0x384>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	225d      	movs	r2, #93	; 0x5d
 8004c18:	5c9b      	ldrb	r3, [r3, r2]
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d003      	beq.n	8004c28 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	225d      	movs	r2, #93	; 0x5d
 8004c24:	2105      	movs	r1, #5
 8004c26:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	1cba      	adds	r2, r7, #2
 8004c38:	2146      	movs	r1, #70	; 0x46
 8004c3a:	8812      	ldrh	r2, [r2, #0]
 8004c3c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	1cba      	adds	r2, r7, #2
 8004c42:	2144      	movs	r1, #68	; 0x44
 8004c44:	8812      	ldrh	r2, [r2, #0]
 8004c46:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	1cba      	adds	r2, r7, #2
 8004c52:	8812      	ldrh	r2, [r2, #0]
 8004c54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	1cba      	adds	r2, r7, #2
 8004c5a:	8812      	ldrh	r2, [r2, #0]
 8004c5c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	23e0      	movs	r3, #224	; 0xe0
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d908      	bls.n	8004c88 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	49a4      	ldr	r1, [pc, #656]	; (8004f14 <HAL_SPI_TransmitReceive+0x3a4>)
 8004c82:	400a      	ands	r2, r1
 8004c84:	605a      	str	r2, [r3, #4]
 8004c86:	e008      	b.n	8004c9a <HAL_SPI_TransmitReceive+0x12a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2180      	movs	r1, #128	; 0x80
 8004c94:	0149      	lsls	r1, r1, #5
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2240      	movs	r2, #64	; 0x40
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	2b40      	cmp	r3, #64	; 0x40
 8004ca6:	d007      	beq.n	8004cb8 <HAL_SPI_TransmitReceive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2140      	movs	r1, #64	; 0x40
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	23e0      	movs	r3, #224	; 0xe0
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d800      	bhi.n	8004cc6 <HAL_SPI_TransmitReceive+0x156>
 8004cc4:	e07f      	b.n	8004dc6 <HAL_SPI_TransmitReceive+0x256>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d005      	beq.n	8004cda <HAL_SPI_TransmitReceive+0x16a>
 8004cce:	2312      	movs	r3, #18
 8004cd0:	18fb      	adds	r3, r7, r3
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d000      	beq.n	8004cda <HAL_SPI_TransmitReceive+0x16a>
 8004cd8:	e069      	b.n	8004dae <HAL_SPI_TransmitReceive+0x23e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cde:	881a      	ldrh	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cea:	1c9a      	adds	r2, r3, #2
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cfe:	e056      	b.n	8004dae <HAL_SPI_TransmitReceive+0x23e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	2202      	movs	r2, #2
 8004d08:	4013      	ands	r3, r2
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d11b      	bne.n	8004d46 <HAL_SPI_TransmitReceive+0x1d6>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d016      	beq.n	8004d46 <HAL_SPI_TransmitReceive+0x1d6>
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d113      	bne.n	8004d46 <HAL_SPI_TransmitReceive+0x1d6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d22:	881a      	ldrh	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2e:	1c9a      	adds	r2, r3, #2
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	4013      	ands	r3, r2
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d11c      	bne.n	8004d8e <HAL_SPI_TransmitReceive+0x21e>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2246      	movs	r2, #70	; 0x46
 8004d58:	5a9b      	ldrh	r3, [r3, r2]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d016      	beq.n	8004d8e <HAL_SPI_TransmitReceive+0x21e>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	b292      	uxth	r2, r2
 8004d6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	1c9a      	adds	r2, r3, #2
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2246      	movs	r2, #70	; 0x46
 8004d7c:	5a9b      	ldrh	r3, [r3, r2]
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b299      	uxth	r1, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2246      	movs	r2, #70	; 0x46
 8004d88:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d8e:	f7fe fa61 	bl	8003254 <HAL_GetTick>
 8004d92:	0002      	movs	r2, r0
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d807      	bhi.n	8004dae <HAL_SPI_TransmitReceive+0x23e>
 8004d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da0:	3301      	adds	r3, #1
 8004da2:	d004      	beq.n	8004dae <HAL_SPI_TransmitReceive+0x23e>
      {
        errorcode = HAL_TIMEOUT;
 8004da4:	2323      	movs	r3, #35	; 0x23
 8004da6:	18fb      	adds	r3, r7, r3
 8004da8:	2203      	movs	r2, #3
 8004daa:	701a      	strb	r2, [r3, #0]
        goto error;
 8004dac:	e0a2      	b.n	8004ef4 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1a3      	bne.n	8004d00 <HAL_SPI_TransmitReceive+0x190>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2246      	movs	r2, #70	; 0x46
 8004dbc:	5a9b      	ldrh	r3, [r3, r2]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d19d      	bne.n	8004d00 <HAL_SPI_TransmitReceive+0x190>
 8004dc4:	e085      	b.n	8004ed2 <HAL_SPI_TransmitReceive+0x362>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d005      	beq.n	8004dda <HAL_SPI_TransmitReceive+0x26a>
 8004dce:	2312      	movs	r3, #18
 8004dd0:	18fb      	adds	r3, r7, r3
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d000      	beq.n	8004dda <HAL_SPI_TransmitReceive+0x26a>
 8004dd8:	e070      	b.n	8004ebc <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	330c      	adds	r3, #12
 8004de4:	7812      	ldrb	r2, [r2, #0]
 8004de6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e00:	e05c      	b.n	8004ebc <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	2202      	movs	r2, #2
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d11c      	bne.n	8004e4a <HAL_SPI_TransmitReceive+0x2da>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d017      	beq.n	8004e4a <HAL_SPI_TransmitReceive+0x2da>
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d114      	bne.n	8004e4a <HAL_SPI_TransmitReceive+0x2da>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	330c      	adds	r3, #12
 8004e2a:	7812      	ldrb	r2, [r2, #0]
 8004e2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	2201      	movs	r2, #1
 8004e52:	4013      	ands	r3, r2
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d11e      	bne.n	8004e96 <HAL_SPI_TransmitReceive+0x326>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2246      	movs	r2, #70	; 0x46
 8004e5c:	5a9b      	ldrh	r3, [r3, r2]
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d018      	beq.n	8004e96 <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	330c      	adds	r3, #12
 8004e6a:	001a      	movs	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e70:	7812      	ldrb	r2, [r2, #0]
 8004e72:	b2d2      	uxtb	r2, r2
 8004e74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2246      	movs	r2, #70	; 0x46
 8004e84:	5a9b      	ldrh	r3, [r3, r2]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	b299      	uxth	r1, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2246      	movs	r2, #70	; 0x46
 8004e90:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e92:	2301      	movs	r3, #1
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e96:	f7fe f9dd 	bl	8003254 <HAL_GetTick>
 8004e9a:	0002      	movs	r2, r0
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d802      	bhi.n	8004eac <HAL_SPI_TransmitReceive+0x33c>
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	d102      	bne.n	8004eb2 <HAL_SPI_TransmitReceive+0x342>
 8004eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d104      	bne.n	8004ebc <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 8004eb2:	2323      	movs	r3, #35	; 0x23
 8004eb4:	18fb      	adds	r3, r7, r3
 8004eb6:	2203      	movs	r2, #3
 8004eb8:	701a      	strb	r2, [r3, #0]
        goto error;
 8004eba:	e01b      	b.n	8004ef4 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d19d      	bne.n	8004e02 <HAL_SPI_TransmitReceive+0x292>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2246      	movs	r2, #70	; 0x46
 8004eca:	5a9b      	ldrh	r3, [r3, r2]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d197      	bne.n	8004e02 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	0018      	movs	r0, r3
 8004eda:	f000 f99f 	bl	800521c <SPI_EndRxTxTransaction>
 8004ede:	1e03      	subs	r3, r0, #0
 8004ee0:	d007      	beq.n	8004ef2 <HAL_SPI_TransmitReceive+0x382>
  {
    errorcode = HAL_ERROR;
 8004ee2:	2323      	movs	r3, #35	; 0x23
 8004ee4:	18fb      	adds	r3, r7, r3
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2220      	movs	r2, #32
 8004eee:	661a      	str	r2, [r3, #96]	; 0x60
 8004ef0:	e000      	b.n	8004ef4 <HAL_SPI_TransmitReceive+0x384>
  }

error :
 8004ef2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	225d      	movs	r2, #93	; 0x5d
 8004ef8:	2101      	movs	r1, #1
 8004efa:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	225c      	movs	r2, #92	; 0x5c
 8004f00:	2100      	movs	r1, #0
 8004f02:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004f04:	2323      	movs	r3, #35	; 0x23
 8004f06:	18fb      	adds	r3, r7, r3
 8004f08:	781b      	ldrb	r3, [r3, #0]
}
 8004f0a:	0018      	movs	r0, r3
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	b00a      	add	sp, #40	; 0x28
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	ffffefff 	.word	0xffffefff

08004f18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	603b      	str	r3, [r7, #0]
 8004f24:	1dfb      	adds	r3, r7, #7
 8004f26:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f28:	f7fe f994 	bl	8003254 <HAL_GetTick>
 8004f2c:	0002      	movs	r2, r0
 8004f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f30:	1a9b      	subs	r3, r3, r2
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	18d3      	adds	r3, r2, r3
 8004f36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f38:	f7fe f98c 	bl	8003254 <HAL_GetTick>
 8004f3c:	0003      	movs	r3, r0
 8004f3e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f40:	4b3a      	ldr	r3, [pc, #232]	; (800502c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	015b      	lsls	r3, r3, #5
 8004f46:	0d1b      	lsrs	r3, r3, #20
 8004f48:	69fa      	ldr	r2, [r7, #28]
 8004f4a:	4353      	muls	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f4e:	e058      	b.n	8005002 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	3301      	adds	r3, #1
 8004f54:	d055      	beq.n	8005002 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f56:	f7fe f97d 	bl	8003254 <HAL_GetTick>
 8004f5a:	0002      	movs	r2, r0
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	69fa      	ldr	r2, [r7, #28]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d902      	bls.n	8004f6c <SPI_WaitFlagStateUntilTimeout+0x54>
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d142      	bne.n	8004ff2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	21e0      	movs	r1, #224	; 0xe0
 8004f78:	438a      	bics	r2, r1
 8004f7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	2382      	movs	r3, #130	; 0x82
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d113      	bne.n	8004fb0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	2380      	movs	r3, #128	; 0x80
 8004f8e:	021b      	lsls	r3, r3, #8
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d005      	beq.n	8004fa0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	2380      	movs	r3, #128	; 0x80
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d107      	bne.n	8004fb0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2140      	movs	r1, #64	; 0x40
 8004fac:	438a      	bics	r2, r1
 8004fae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fb4:	2380      	movs	r3, #128	; 0x80
 8004fb6:	019b      	lsls	r3, r3, #6
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d110      	bne.n	8004fde <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	491a      	ldr	r1, [pc, #104]	; (8005030 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004fc8:	400a      	ands	r2, r1
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2180      	movs	r1, #128	; 0x80
 8004fd8:	0189      	lsls	r1, r1, #6
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	225d      	movs	r2, #93	; 0x5d
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	225c      	movs	r2, #92	; 0x5c
 8004fea:	2100      	movs	r1, #0
 8004fec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e017      	b.n	8005022 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	4013      	ands	r3, r2
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	425a      	negs	r2, r3
 8005012:	4153      	adcs	r3, r2
 8005014:	b2db      	uxtb	r3, r3
 8005016:	001a      	movs	r2, r3
 8005018:	1dfb      	adds	r3, r7, #7
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	429a      	cmp	r2, r3
 800501e:	d197      	bne.n	8004f50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	0018      	movs	r0, r3
 8005024:	46bd      	mov	sp, r7
 8005026:	b008      	add	sp, #32
 8005028:	bd80      	pop	{r7, pc}
 800502a:	46c0      	nop			; (mov r8, r8)
 800502c:	20000000 	.word	0x20000000
 8005030:	ffffdfff 	.word	0xffffdfff

08005034 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b088      	sub	sp, #32
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
 8005040:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005042:	f7fe f907 	bl	8003254 <HAL_GetTick>
 8005046:	0002      	movs	r2, r0
 8005048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504a:	1a9b      	subs	r3, r3, r2
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	18d3      	adds	r3, r2, r3
 8005050:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005052:	f7fe f8ff 	bl	8003254 <HAL_GetTick>
 8005056:	0003      	movs	r3, r0
 8005058:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800505a:	4b3f      	ldr	r3, [pc, #252]	; (8005158 <SPI_WaitFifoStateUntilTimeout+0x124>)
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	0013      	movs	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	189b      	adds	r3, r3, r2
 8005064:	00da      	lsls	r2, r3, #3
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	0d1b      	lsrs	r3, r3, #20
 800506a:	69fa      	ldr	r2, [r7, #28]
 800506c:	4353      	muls	r3, r2
 800506e:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8005070:	e064      	b.n	800513c <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	23c0      	movs	r3, #192	; 0xc0
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	429a      	cmp	r2, r3
 800507a:	d106      	bne.n	800508a <SPI_WaitFifoStateUntilTimeout+0x56>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d103      	bne.n	800508a <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	330c      	adds	r3, #12
 8005088:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	3301      	adds	r3, #1
 800508e:	d055      	beq.n	800513c <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005090:	f7fe f8e0 	bl	8003254 <HAL_GetTick>
 8005094:	0002      	movs	r2, r0
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	69fa      	ldr	r2, [r7, #28]
 800509c:	429a      	cmp	r2, r3
 800509e:	d902      	bls.n	80050a6 <SPI_WaitFifoStateUntilTimeout+0x72>
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d142      	bne.n	800512c <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	21e0      	movs	r1, #224	; 0xe0
 80050b2:	438a      	bics	r2, r1
 80050b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	2382      	movs	r3, #130	; 0x82
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	429a      	cmp	r2, r3
 80050c0:	d113      	bne.n	80050ea <SPI_WaitFifoStateUntilTimeout+0xb6>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	2380      	movs	r3, #128	; 0x80
 80050c8:	021b      	lsls	r3, r3, #8
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d005      	beq.n	80050da <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	2380      	movs	r3, #128	; 0x80
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d107      	bne.n	80050ea <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2140      	movs	r1, #64	; 0x40
 80050e6:	438a      	bics	r2, r1
 80050e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ee:	2380      	movs	r3, #128	; 0x80
 80050f0:	019b      	lsls	r3, r3, #6
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d110      	bne.n	8005118 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4916      	ldr	r1, [pc, #88]	; (800515c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005102:	400a      	ands	r2, r1
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2180      	movs	r1, #128	; 0x80
 8005112:	0189      	lsls	r1, r1, #6
 8005114:	430a      	orrs	r2, r1
 8005116:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	225d      	movs	r2, #93	; 0x5d
 800511c:	2101      	movs	r1, #1
 800511e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	225c      	movs	r2, #92	; 0x5c
 8005124:	2100      	movs	r1, #0
 8005126:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e010      	b.n	800514e <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	3b01      	subs	r3, #1
 800513a:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	4013      	ands	r3, r2
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	429a      	cmp	r2, r3
 800514a:	d192      	bne.n	8005072 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	0018      	movs	r0, r3
 8005150:	46bd      	mov	sp, r7
 8005152:	b008      	add	sp, #32
 8005154:	bd80      	pop	{r7, pc}
 8005156:	46c0      	nop			; (mov r8, r8)
 8005158:	20000000 	.word	0x20000000
 800515c:	ffffdfff 	.word	0xffffdfff

08005160 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af02      	add	r7, sp, #8
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	2382      	movs	r3, #130	; 0x82
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	429a      	cmp	r2, r3
 8005176:	d113      	bne.n	80051a0 <SPI_EndRxTransaction+0x40>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	2380      	movs	r3, #128	; 0x80
 800517e:	021b      	lsls	r3, r3, #8
 8005180:	429a      	cmp	r2, r3
 8005182:	d005      	beq.n	8005190 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	2380      	movs	r3, #128	; 0x80
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	429a      	cmp	r2, r3
 800518e:	d107      	bne.n	80051a0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2140      	movs	r1, #64	; 0x40
 800519c:	438a      	bics	r2, r1
 800519e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	0013      	movs	r3, r2
 80051aa:	2200      	movs	r2, #0
 80051ac:	2180      	movs	r1, #128	; 0x80
 80051ae:	f7ff feb3 	bl	8004f18 <SPI_WaitFlagStateUntilTimeout>
 80051b2:	1e03      	subs	r3, r0, #0
 80051b4:	d007      	beq.n	80051c6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ba:	2220      	movs	r2, #32
 80051bc:	431a      	orrs	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e026      	b.n	8005214 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	2382      	movs	r3, #130	; 0x82
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d11f      	bne.n	8005212 <SPI_EndRxTransaction+0xb2>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	689a      	ldr	r2, [r3, #8]
 80051d6:	2380      	movs	r3, #128	; 0x80
 80051d8:	021b      	lsls	r3, r3, #8
 80051da:	429a      	cmp	r2, r3
 80051dc:	d005      	beq.n	80051ea <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	2380      	movs	r3, #128	; 0x80
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d113      	bne.n	8005212 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	23c0      	movs	r3, #192	; 0xc0
 80051ee:	00d9      	lsls	r1, r3, #3
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	0013      	movs	r3, r2
 80051f8:	2200      	movs	r2, #0
 80051fa:	f7ff ff1b 	bl	8005034 <SPI_WaitFifoStateUntilTimeout>
 80051fe:	1e03      	subs	r3, r0, #0
 8005200:	d007      	beq.n	8005212 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005206:	2220      	movs	r2, #32
 8005208:	431a      	orrs	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e000      	b.n	8005214 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	0018      	movs	r0, r3
 8005216:	46bd      	mov	sp, r7
 8005218:	b004      	add	sp, #16
 800521a:	bd80      	pop	{r7, pc}

0800521c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af02      	add	r7, sp, #8
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	23c0      	movs	r3, #192	; 0xc0
 800522c:	0159      	lsls	r1, r3, #5
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	0013      	movs	r3, r2
 8005236:	2200      	movs	r2, #0
 8005238:	f7ff fefc 	bl	8005034 <SPI_WaitFifoStateUntilTimeout>
 800523c:	1e03      	subs	r3, r0, #0
 800523e:	d007      	beq.n	8005250 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005244:	2220      	movs	r2, #32
 8005246:	431a      	orrs	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e027      	b.n	80052a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	0013      	movs	r3, r2
 800525a:	2200      	movs	r2, #0
 800525c:	2180      	movs	r1, #128	; 0x80
 800525e:	f7ff fe5b 	bl	8004f18 <SPI_WaitFlagStateUntilTimeout>
 8005262:	1e03      	subs	r3, r0, #0
 8005264:	d007      	beq.n	8005276 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800526a:	2220      	movs	r2, #32
 800526c:	431a      	orrs	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e014      	b.n	80052a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	23c0      	movs	r3, #192	; 0xc0
 800527a:	00d9      	lsls	r1, r3, #3
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	0013      	movs	r3, r2
 8005284:	2200      	movs	r2, #0
 8005286:	f7ff fed5 	bl	8005034 <SPI_WaitFifoStateUntilTimeout>
 800528a:	1e03      	subs	r3, r0, #0
 800528c:	d007      	beq.n	800529e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005292:	2220      	movs	r2, #32
 8005294:	431a      	orrs	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e000      	b.n	80052a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	0018      	movs	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	b004      	add	sp, #16
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e044      	b.n	8005344 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d107      	bne.n	80052d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2274      	movs	r2, #116	; 0x74
 80052c6:	2100      	movs	r1, #0
 80052c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	0018      	movs	r0, r3
 80052ce:	f7fd fdd1 	bl	8002e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2224      	movs	r2, #36	; 0x24
 80052d6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2101      	movs	r1, #1
 80052e4:	438a      	bics	r2, r1
 80052e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	0018      	movs	r0, r3
 80052ec:	f000 fad8 	bl	80058a0 <UART_SetConfig>
 80052f0:	0003      	movs	r3, r0
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d101      	bne.n	80052fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e024      	b.n	8005344 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	0018      	movs	r0, r3
 8005306:	f000 fc39 	bl	8005b7c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	490d      	ldr	r1, [pc, #52]	; (800534c <HAL_UART_Init+0xa4>)
 8005316:	400a      	ands	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2108      	movs	r1, #8
 8005326:	438a      	bics	r2, r1
 8005328:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2101      	movs	r1, #1
 8005336:	430a      	orrs	r2, r1
 8005338:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	0018      	movs	r0, r3
 800533e:	f000 fcd1 	bl	8005ce4 <UART_CheckIdleState>
 8005342:	0003      	movs	r3, r0
}
 8005344:	0018      	movs	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	b002      	add	sp, #8
 800534a:	bd80      	pop	{r7, pc}
 800534c:	fffff7ff 	.word	0xfffff7ff

08005350 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	1dbb      	adds	r3, r7, #6
 800535c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005362:	2b20      	cmp	r3, #32
 8005364:	d000      	beq.n	8005368 <HAL_UART_Transmit_DMA+0x18>
 8005366:	e079      	b.n	800545c <HAL_UART_Transmit_DMA+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d003      	beq.n	8005376 <HAL_UART_Transmit_DMA+0x26>
 800536e:	1dbb      	adds	r3, r7, #6
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e071      	b.n	800545e <HAL_UART_Transmit_DMA+0x10e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	2380      	movs	r3, #128	; 0x80
 8005380:	015b      	lsls	r3, r3, #5
 8005382:	429a      	cmp	r2, r3
 8005384:	d109      	bne.n	800539a <HAL_UART_Transmit_DMA+0x4a>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d105      	bne.n	800539a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2201      	movs	r2, #1
 8005392:	4013      	ands	r3, r2
 8005394:	d001      	beq.n	800539a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e061      	b.n	800545e <HAL_UART_Transmit_DMA+0x10e>
      }
    }

    __HAL_LOCK(huart);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2274      	movs	r2, #116	; 0x74
 800539e:	5c9b      	ldrb	r3, [r3, r2]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d101      	bne.n	80053a8 <HAL_UART_Transmit_DMA+0x58>
 80053a4:	2302      	movs	r3, #2
 80053a6:	e05a      	b.n	800545e <HAL_UART_Transmit_DMA+0x10e>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2274      	movs	r2, #116	; 0x74
 80053ac:	2101      	movs	r1, #1
 80053ae:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	1dba      	adds	r2, r7, #6
 80053ba:	2150      	movs	r1, #80	; 0x50
 80053bc:	8812      	ldrh	r2, [r2, #0]
 80053be:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	1dba      	adds	r2, r7, #6
 80053c4:	2152      	movs	r1, #82	; 0x52
 80053c6:	8812      	ldrh	r2, [r2, #0]
 80053c8:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2280      	movs	r2, #128	; 0x80
 80053ce:	2100      	movs	r1, #0
 80053d0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2221      	movs	r2, #33	; 0x21
 80053d6:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d02b      	beq.n	8005438 <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053e4:	4a20      	ldr	r2, [pc, #128]	; (8005468 <HAL_UART_Transmit_DMA+0x118>)
 80053e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ec:	4a1f      	ldr	r2, [pc, #124]	; (800546c <HAL_UART_Transmit_DMA+0x11c>)
 80053ee:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053f4:	4a1e      	ldr	r2, [pc, #120]	; (8005470 <HAL_UART_Transmit_DMA+0x120>)
 80053f6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053fc:	2200      	movs	r2, #0
 80053fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005408:	0019      	movs	r1, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3328      	adds	r3, #40	; 0x28
 8005410:	001a      	movs	r2, r3
 8005412:	1dbb      	adds	r3, r7, #6
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	f7fe f86f 	bl	80034f8 <HAL_DMA_Start_IT>
 800541a:	1e03      	subs	r3, r0, #0
 800541c:	d00c      	beq.n	8005438 <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2280      	movs	r2, #128	; 0x80
 8005422:	2110      	movs	r1, #16
 8005424:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2274      	movs	r2, #116	; 0x74
 800542a:	2100      	movs	r1, #0
 800542c:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2220      	movs	r2, #32
 8005432:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e012      	b.n	800545e <HAL_UART_Transmit_DMA+0x10e>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2240      	movs	r2, #64	; 0x40
 800543e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2274      	movs	r2, #116	; 0x74
 8005444:	2100      	movs	r1, #0
 8005446:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689a      	ldr	r2, [r3, #8]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2180      	movs	r1, #128	; 0x80
 8005454:	430a      	orrs	r2, r1
 8005456:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005458:	2300      	movs	r3, #0
 800545a:	e000      	b.n	800545e <HAL_UART_Transmit_DMA+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800545c:	2302      	movs	r3, #2
  }
}
 800545e:	0018      	movs	r0, r3
 8005460:	46bd      	mov	sp, r7
 8005462:	b004      	add	sp, #16
 8005464:	bd80      	pop	{r7, pc}
 8005466:	46c0      	nop			; (mov r8, r8)
 8005468:	08005efd 	.word	0x08005efd
 800546c:	08005f4d 	.word	0x08005f4d
 8005470:	08005f6b 	.word	0x08005f6b

08005474 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b088      	sub	sp, #32
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	4ab5      	ldr	r2, [pc, #724]	; (800576c <HAL_UART_IRQHandler+0x2f8>)
 8005498:	4013      	ands	r3, r2
 800549a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d112      	bne.n	80054c8 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	2220      	movs	r2, #32
 80054a6:	4013      	ands	r3, r2
 80054a8:	d00e      	beq.n	80054c8 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	2220      	movs	r2, #32
 80054ae:	4013      	ands	r3, r2
 80054b0:	d00a      	beq.n	80054c8 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d100      	bne.n	80054bc <HAL_UART_IRQHandler+0x48>
 80054ba:	e1bf      	b.n	800583c <HAL_UART_IRQHandler+0x3c8>
      {
        huart->RxISR(huart);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	0010      	movs	r0, r2
 80054c4:	4798      	blx	r3
      }
      return;
 80054c6:	e1b9      	b.n	800583c <HAL_UART_IRQHandler+0x3c8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d100      	bne.n	80054d0 <HAL_UART_IRQHandler+0x5c>
 80054ce:	e0d9      	b.n	8005684 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	2201      	movs	r2, #1
 80054d4:	4013      	ands	r3, r2
 80054d6:	d104      	bne.n	80054e2 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	4aa5      	ldr	r2, [pc, #660]	; (8005770 <HAL_UART_IRQHandler+0x2fc>)
 80054dc:	4013      	ands	r3, r2
 80054de:	d100      	bne.n	80054e2 <HAL_UART_IRQHandler+0x6e>
 80054e0:	e0d0      	b.n	8005684 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	2201      	movs	r2, #1
 80054e6:	4013      	ands	r3, r2
 80054e8:	d010      	beq.n	800550c <HAL_UART_IRQHandler+0x98>
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	2380      	movs	r3, #128	; 0x80
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	4013      	ands	r3, r2
 80054f2:	d00b      	beq.n	800550c <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2201      	movs	r2, #1
 80054fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2280      	movs	r2, #128	; 0x80
 8005500:	589b      	ldr	r3, [r3, r2]
 8005502:	2201      	movs	r2, #1
 8005504:	431a      	orrs	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2180      	movs	r1, #128	; 0x80
 800550a:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	2202      	movs	r2, #2
 8005510:	4013      	ands	r3, r2
 8005512:	d00f      	beq.n	8005534 <HAL_UART_IRQHandler+0xc0>
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	2201      	movs	r2, #1
 8005518:	4013      	ands	r3, r2
 800551a:	d00b      	beq.n	8005534 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2202      	movs	r2, #2
 8005522:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2280      	movs	r2, #128	; 0x80
 8005528:	589b      	ldr	r3, [r3, r2]
 800552a:	2204      	movs	r2, #4
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2180      	movs	r1, #128	; 0x80
 8005532:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	2204      	movs	r2, #4
 8005538:	4013      	ands	r3, r2
 800553a:	d00f      	beq.n	800555c <HAL_UART_IRQHandler+0xe8>
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	2201      	movs	r2, #1
 8005540:	4013      	ands	r3, r2
 8005542:	d00b      	beq.n	800555c <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2204      	movs	r2, #4
 800554a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2280      	movs	r2, #128	; 0x80
 8005550:	589b      	ldr	r3, [r3, r2]
 8005552:	2202      	movs	r2, #2
 8005554:	431a      	orrs	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2180      	movs	r1, #128	; 0x80
 800555a:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	2208      	movs	r2, #8
 8005560:	4013      	ands	r3, r2
 8005562:	d013      	beq.n	800558c <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	2220      	movs	r2, #32
 8005568:	4013      	ands	r3, r2
 800556a:	d103      	bne.n	8005574 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	2201      	movs	r2, #1
 8005570:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005572:	d00b      	beq.n	800558c <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2208      	movs	r2, #8
 800557a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2280      	movs	r2, #128	; 0x80
 8005580:	589b      	ldr	r3, [r3, r2]
 8005582:	2208      	movs	r2, #8
 8005584:	431a      	orrs	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2180      	movs	r1, #128	; 0x80
 800558a:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800558c:	69fa      	ldr	r2, [r7, #28]
 800558e:	2380      	movs	r3, #128	; 0x80
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	4013      	ands	r3, r2
 8005594:	d011      	beq.n	80055ba <HAL_UART_IRQHandler+0x146>
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	2380      	movs	r3, #128	; 0x80
 800559a:	04db      	lsls	r3, r3, #19
 800559c:	4013      	ands	r3, r2
 800559e:	d00c      	beq.n	80055ba <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2280      	movs	r2, #128	; 0x80
 80055a6:	0112      	lsls	r2, r2, #4
 80055a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2280      	movs	r2, #128	; 0x80
 80055ae:	589b      	ldr	r3, [r3, r2]
 80055b0:	2220      	movs	r2, #32
 80055b2:	431a      	orrs	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2180      	movs	r1, #128	; 0x80
 80055b8:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2280      	movs	r2, #128	; 0x80
 80055be:	589b      	ldr	r3, [r3, r2]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d100      	bne.n	80055c6 <HAL_UART_IRQHandler+0x152>
 80055c4:	e13c      	b.n	8005840 <HAL_UART_IRQHandler+0x3cc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	2220      	movs	r2, #32
 80055ca:	4013      	ands	r3, r2
 80055cc:	d00c      	beq.n	80055e8 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	2220      	movs	r2, #32
 80055d2:	4013      	ands	r3, r2
 80055d4:	d008      	beq.n	80055e8 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d004      	beq.n	80055e8 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	0010      	movs	r0, r2
 80055e6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2280      	movs	r2, #128	; 0x80
 80055ec:	589b      	ldr	r3, [r3, r2]
 80055ee:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	2240      	movs	r2, #64	; 0x40
 80055f8:	4013      	ands	r3, r2
 80055fa:	2b40      	cmp	r3, #64	; 0x40
 80055fc:	d003      	beq.n	8005606 <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2228      	movs	r2, #40	; 0x28
 8005602:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005604:	d033      	beq.n	800566e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	0018      	movs	r0, r3
 800560a:	f000 fc47 	bl	8005e9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	2240      	movs	r2, #64	; 0x40
 8005616:	4013      	ands	r3, r2
 8005618:	2b40      	cmp	r3, #64	; 0x40
 800561a:	d123      	bne.n	8005664 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689a      	ldr	r2, [r3, #8]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2140      	movs	r1, #64	; 0x40
 8005628:	438a      	bics	r2, r1
 800562a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005630:	2b00      	cmp	r3, #0
 8005632:	d012      	beq.n	800565a <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005638:	4a4e      	ldr	r2, [pc, #312]	; (8005774 <HAL_UART_IRQHandler+0x300>)
 800563a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005640:	0018      	movs	r0, r3
 8005642:	f7fd fff7 	bl	8003634 <HAL_DMA_Abort_IT>
 8005646:	1e03      	subs	r3, r0, #0
 8005648:	d01a      	beq.n	8005680 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005654:	0018      	movs	r0, r3
 8005656:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005658:	e012      	b.n	8005680 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	0018      	movs	r0, r3
 800565e:	f000 f90b 	bl	8005878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005662:	e00d      	b.n	8005680 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	0018      	movs	r0, r3
 8005668:	f000 f906 	bl	8005878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800566c:	e008      	b.n	8005680 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	0018      	movs	r0, r3
 8005672:	f000 f901 	bl	8005878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2280      	movs	r2, #128	; 0x80
 800567a:	2100      	movs	r1, #0
 800567c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800567e:	e0df      	b.n	8005840 <HAL_UART_IRQHandler+0x3cc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005680:	46c0      	nop			; (mov r8, r8)
    return;
 8005682:	e0dd      	b.n	8005840 <HAL_UART_IRQHandler+0x3cc>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005688:	2b01      	cmp	r3, #1
 800568a:	d000      	beq.n	800568e <HAL_UART_IRQHandler+0x21a>
 800568c:	e0b6      	b.n	80057fc <HAL_UART_IRQHandler+0x388>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	2210      	movs	r2, #16
 8005692:	4013      	ands	r3, r2
 8005694:	d100      	bne.n	8005698 <HAL_UART_IRQHandler+0x224>
 8005696:	e0b1      	b.n	80057fc <HAL_UART_IRQHandler+0x388>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	2210      	movs	r2, #16
 800569c:	4013      	ands	r3, r2
 800569e:	d100      	bne.n	80056a2 <HAL_UART_IRQHandler+0x22e>
 80056a0:	e0ac      	b.n	80057fc <HAL_UART_IRQHandler+0x388>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2210      	movs	r2, #16
 80056a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	2240      	movs	r2, #64	; 0x40
 80056b2:	4013      	ands	r3, r2
 80056b4:	2b40      	cmp	r3, #64	; 0x40
 80056b6:	d161      	bne.n	800577c <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	2108      	movs	r1, #8
 80056c2:	187b      	adds	r3, r7, r1
 80056c4:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 80056c6:	187b      	adds	r3, r7, r1
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d100      	bne.n	80056d0 <HAL_UART_IRQHandler+0x25c>
 80056ce:	e0b9      	b.n	8005844 <HAL_UART_IRQHandler+0x3d0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2258      	movs	r2, #88	; 0x58
 80056d4:	5a9b      	ldrh	r3, [r3, r2]
 80056d6:	2208      	movs	r2, #8
 80056d8:	18ba      	adds	r2, r7, r2
 80056da:	8812      	ldrh	r2, [r2, #0]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d300      	bcc.n	80056e2 <HAL_UART_IRQHandler+0x26e>
 80056e0:	e0b0      	b.n	8005844 <HAL_UART_IRQHandler+0x3d0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2208      	movs	r2, #8
 80056e6:	18ba      	adds	r2, r7, r2
 80056e8:	215a      	movs	r1, #90	; 0x5a
 80056ea:	8812      	ldrh	r2, [r2, #0]
 80056ec:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	2b20      	cmp	r3, #32
 80056f6:	d02a      	beq.n	800574e <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	491d      	ldr	r1, [pc, #116]	; (8005778 <HAL_UART_IRQHandler+0x304>)
 8005704:	400a      	ands	r2, r1
 8005706:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689a      	ldr	r2, [r3, #8]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2101      	movs	r1, #1
 8005714:	438a      	bics	r2, r1
 8005716:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2140      	movs	r1, #64	; 0x40
 8005724:	438a      	bics	r2, r1
 8005726:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2220      	movs	r2, #32
 800572c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2110      	movs	r1, #16
 8005740:	438a      	bics	r2, r1
 8005742:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005748:	0018      	movs	r0, r3
 800574a:	f7fd ff3b 	bl	80035c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2258      	movs	r2, #88	; 0x58
 8005752:	5a9a      	ldrh	r2, [r3, r2]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	215a      	movs	r1, #90	; 0x5a
 8005758:	5a5b      	ldrh	r3, [r3, r1]
 800575a:	b29b      	uxth	r3, r3
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	b29a      	uxth	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	0011      	movs	r1, r2
 8005764:	0018      	movs	r0, r3
 8005766:	f000 f88f 	bl	8005888 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800576a:	e06b      	b.n	8005844 <HAL_UART_IRQHandler+0x3d0>
 800576c:	0000080f 	.word	0x0000080f
 8005770:	04000120 	.word	0x04000120
 8005774:	08005fed 	.word	0x08005fed
 8005778:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2258      	movs	r2, #88	; 0x58
 8005780:	5a99      	ldrh	r1, [r3, r2]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	225a      	movs	r2, #90	; 0x5a
 8005786:	5a9b      	ldrh	r3, [r3, r2]
 8005788:	b29a      	uxth	r2, r3
 800578a:	230a      	movs	r3, #10
 800578c:	18fb      	adds	r3, r7, r3
 800578e:	1a8a      	subs	r2, r1, r2
 8005790:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	225a      	movs	r2, #90	; 0x5a
 8005796:	5a9b      	ldrh	r3, [r3, r2]
 8005798:	b29b      	uxth	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d054      	beq.n	8005848 <HAL_UART_IRQHandler+0x3d4>
          &&(nb_rx_data > 0U) )
 800579e:	230a      	movs	r3, #10
 80057a0:	18fb      	adds	r3, r7, r3
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d04f      	beq.n	8005848 <HAL_UART_IRQHandler+0x3d4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4928      	ldr	r1, [pc, #160]	; (8005854 <HAL_UART_IRQHandler+0x3e0>)
 80057b4:	400a      	ands	r2, r1
 80057b6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689a      	ldr	r2, [r3, #8]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2101      	movs	r1, #1
 80057c4:	438a      	bics	r2, r1
 80057c6:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2220      	movs	r2, #32
 80057cc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2110      	movs	r1, #16
 80057e6:	438a      	bics	r2, r1
 80057e8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057ea:	230a      	movs	r3, #10
 80057ec:	18fb      	adds	r3, r7, r3
 80057ee:	881a      	ldrh	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	0011      	movs	r1, r2
 80057f4:	0018      	movs	r0, r3
 80057f6:	f000 f847 	bl	8005888 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80057fa:	e025      	b.n	8005848 <HAL_UART_IRQHandler+0x3d4>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	2280      	movs	r2, #128	; 0x80
 8005800:	4013      	ands	r3, r2
 8005802:	d00d      	beq.n	8005820 <HAL_UART_IRQHandler+0x3ac>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	2280      	movs	r2, #128	; 0x80
 8005808:	4013      	ands	r3, r2
 800580a:	d009      	beq.n	8005820 <HAL_UART_IRQHandler+0x3ac>
  {
    if (huart->TxISR != NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005810:	2b00      	cmp	r3, #0
 8005812:	d01b      	beq.n	800584c <HAL_UART_IRQHandler+0x3d8>
    {
      huart->TxISR(huart);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	0010      	movs	r0, r2
 800581c:	4798      	blx	r3
    }
    return;
 800581e:	e015      	b.n	800584c <HAL_UART_IRQHandler+0x3d8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	2240      	movs	r2, #64	; 0x40
 8005824:	4013      	ands	r3, r2
 8005826:	d012      	beq.n	800584e <HAL_UART_IRQHandler+0x3da>
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	2240      	movs	r2, #64	; 0x40
 800582c:	4013      	ands	r3, r2
 800582e:	d00e      	beq.n	800584e <HAL_UART_IRQHandler+0x3da>
  {
    UART_EndTransmit_IT(huart);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	0018      	movs	r0, r3
 8005834:	f000 fbf1 	bl	800601a <UART_EndTransmit_IT>
    return;
 8005838:	46c0      	nop			; (mov r8, r8)
 800583a:	e008      	b.n	800584e <HAL_UART_IRQHandler+0x3da>
      return;
 800583c:	46c0      	nop			; (mov r8, r8)
 800583e:	e006      	b.n	800584e <HAL_UART_IRQHandler+0x3da>
    return;
 8005840:	46c0      	nop			; (mov r8, r8)
 8005842:	e004      	b.n	800584e <HAL_UART_IRQHandler+0x3da>
      return;
 8005844:	46c0      	nop			; (mov r8, r8)
 8005846:	e002      	b.n	800584e <HAL_UART_IRQHandler+0x3da>
      return;
 8005848:	46c0      	nop			; (mov r8, r8)
 800584a:	e000      	b.n	800584e <HAL_UART_IRQHandler+0x3da>
    return;
 800584c:	46c0      	nop			; (mov r8, r8)
  }

}
 800584e:	46bd      	mov	sp, r7
 8005850:	b008      	add	sp, #32
 8005852:	bd80      	pop	{r7, pc}
 8005854:	fffffedf 	.word	0xfffffedf

08005858 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005860:	46c0      	nop			; (mov r8, r8)
 8005862:	46bd      	mov	sp, r7
 8005864:	b002      	add	sp, #8
 8005866:	bd80      	pop	{r7, pc}

08005868 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005870:	46c0      	nop			; (mov r8, r8)
 8005872:	46bd      	mov	sp, r7
 8005874:	b002      	add	sp, #8
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005880:	46c0      	nop			; (mov r8, r8)
 8005882:	46bd      	mov	sp, r7
 8005884:	b002      	add	sp, #8
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	000a      	movs	r2, r1
 8005892:	1cbb      	adds	r3, r7, #2
 8005894:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005896:	46c0      	nop			; (mov r8, r8)
 8005898:	46bd      	mov	sp, r7
 800589a:	b002      	add	sp, #8
 800589c:	bd80      	pop	{r7, pc}
	...

080058a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b088      	sub	sp, #32
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058a8:	231e      	movs	r3, #30
 80058aa:	18fb      	adds	r3, r7, r3
 80058ac:	2200      	movs	r2, #0
 80058ae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	431a      	orrs	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a9f      	ldr	r2, [pc, #636]	; (8005b4c <UART_SetConfig+0x2ac>)
 80058d0:	4013      	ands	r3, r2
 80058d2:	0019      	movs	r1, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	430a      	orrs	r2, r1
 80058dc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	4a9a      	ldr	r2, [pc, #616]	; (8005b50 <UART_SetConfig+0x2b0>)
 80058e6:	4013      	ands	r3, r2
 80058e8:	0019      	movs	r1, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68da      	ldr	r2, [r3, #12]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	4313      	orrs	r3, r2
 8005904:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	4a91      	ldr	r2, [pc, #580]	; (8005b54 <UART_SetConfig+0x2b4>)
 800590e:	4013      	ands	r3, r2
 8005910:	0019      	movs	r1, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	430a      	orrs	r2, r1
 800591a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a8d      	ldr	r2, [pc, #564]	; (8005b58 <UART_SetConfig+0x2b8>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d125      	bne.n	8005972 <UART_SetConfig+0xd2>
 8005926:	4b8d      	ldr	r3, [pc, #564]	; (8005b5c <UART_SetConfig+0x2bc>)
 8005928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592a:	2203      	movs	r2, #3
 800592c:	4013      	ands	r3, r2
 800592e:	2b01      	cmp	r3, #1
 8005930:	d00f      	beq.n	8005952 <UART_SetConfig+0xb2>
 8005932:	d304      	bcc.n	800593e <UART_SetConfig+0x9e>
 8005934:	2b02      	cmp	r3, #2
 8005936:	d011      	beq.n	800595c <UART_SetConfig+0xbc>
 8005938:	2b03      	cmp	r3, #3
 800593a:	d005      	beq.n	8005948 <UART_SetConfig+0xa8>
 800593c:	e013      	b.n	8005966 <UART_SetConfig+0xc6>
 800593e:	231f      	movs	r3, #31
 8005940:	18fb      	adds	r3, r7, r3
 8005942:	2200      	movs	r2, #0
 8005944:	701a      	strb	r2, [r3, #0]
 8005946:	e04a      	b.n	80059de <UART_SetConfig+0x13e>
 8005948:	231f      	movs	r3, #31
 800594a:	18fb      	adds	r3, r7, r3
 800594c:	2202      	movs	r2, #2
 800594e:	701a      	strb	r2, [r3, #0]
 8005950:	e045      	b.n	80059de <UART_SetConfig+0x13e>
 8005952:	231f      	movs	r3, #31
 8005954:	18fb      	adds	r3, r7, r3
 8005956:	2204      	movs	r2, #4
 8005958:	701a      	strb	r2, [r3, #0]
 800595a:	e040      	b.n	80059de <UART_SetConfig+0x13e>
 800595c:	231f      	movs	r3, #31
 800595e:	18fb      	adds	r3, r7, r3
 8005960:	2208      	movs	r2, #8
 8005962:	701a      	strb	r2, [r3, #0]
 8005964:	e03b      	b.n	80059de <UART_SetConfig+0x13e>
 8005966:	231f      	movs	r3, #31
 8005968:	18fb      	adds	r3, r7, r3
 800596a:	2210      	movs	r2, #16
 800596c:	701a      	strb	r2, [r3, #0]
 800596e:	46c0      	nop			; (mov r8, r8)
 8005970:	e035      	b.n	80059de <UART_SetConfig+0x13e>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a7a      	ldr	r2, [pc, #488]	; (8005b60 <UART_SetConfig+0x2c0>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d104      	bne.n	8005986 <UART_SetConfig+0xe6>
 800597c:	231f      	movs	r3, #31
 800597e:	18fb      	adds	r3, r7, r3
 8005980:	2200      	movs	r2, #0
 8005982:	701a      	strb	r2, [r3, #0]
 8005984:	e02b      	b.n	80059de <UART_SetConfig+0x13e>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a76      	ldr	r2, [pc, #472]	; (8005b64 <UART_SetConfig+0x2c4>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d104      	bne.n	800599a <UART_SetConfig+0xfa>
 8005990:	231f      	movs	r3, #31
 8005992:	18fb      	adds	r3, r7, r3
 8005994:	2200      	movs	r2, #0
 8005996:	701a      	strb	r2, [r3, #0]
 8005998:	e021      	b.n	80059de <UART_SetConfig+0x13e>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a72      	ldr	r2, [pc, #456]	; (8005b68 <UART_SetConfig+0x2c8>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d104      	bne.n	80059ae <UART_SetConfig+0x10e>
 80059a4:	231f      	movs	r3, #31
 80059a6:	18fb      	adds	r3, r7, r3
 80059a8:	2200      	movs	r2, #0
 80059aa:	701a      	strb	r2, [r3, #0]
 80059ac:	e017      	b.n	80059de <UART_SetConfig+0x13e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a6e      	ldr	r2, [pc, #440]	; (8005b6c <UART_SetConfig+0x2cc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d104      	bne.n	80059c2 <UART_SetConfig+0x122>
 80059b8:	231f      	movs	r3, #31
 80059ba:	18fb      	adds	r3, r7, r3
 80059bc:	2200      	movs	r2, #0
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	e00d      	b.n	80059de <UART_SetConfig+0x13e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a6a      	ldr	r2, [pc, #424]	; (8005b70 <UART_SetConfig+0x2d0>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d104      	bne.n	80059d6 <UART_SetConfig+0x136>
 80059cc:	231f      	movs	r3, #31
 80059ce:	18fb      	adds	r3, r7, r3
 80059d0:	2200      	movs	r2, #0
 80059d2:	701a      	strb	r2, [r3, #0]
 80059d4:	e003      	b.n	80059de <UART_SetConfig+0x13e>
 80059d6:	231f      	movs	r3, #31
 80059d8:	18fb      	adds	r3, r7, r3
 80059da:	2210      	movs	r2, #16
 80059dc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	69da      	ldr	r2, [r3, #28]
 80059e2:	2380      	movs	r3, #128	; 0x80
 80059e4:	021b      	lsls	r3, r3, #8
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d15c      	bne.n	8005aa4 <UART_SetConfig+0x204>
  {
    switch (clocksource)
 80059ea:	231f      	movs	r3, #31
 80059ec:	18fb      	adds	r3, r7, r3
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d00d      	beq.n	8005a10 <UART_SetConfig+0x170>
 80059f4:	dc02      	bgt.n	80059fc <UART_SetConfig+0x15c>
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d005      	beq.n	8005a06 <UART_SetConfig+0x166>
 80059fa:	e015      	b.n	8005a28 <UART_SetConfig+0x188>
 80059fc:	2b04      	cmp	r3, #4
 80059fe:	d00a      	beq.n	8005a16 <UART_SetConfig+0x176>
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d00d      	beq.n	8005a20 <UART_SetConfig+0x180>
 8005a04:	e010      	b.n	8005a28 <UART_SetConfig+0x188>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a06:	f7fe fd41 	bl	800448c <HAL_RCC_GetPCLK1Freq>
 8005a0a:	0003      	movs	r3, r0
 8005a0c:	61bb      	str	r3, [r7, #24]
        break;
 8005a0e:	e012      	b.n	8005a36 <UART_SetConfig+0x196>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a10:	4b58      	ldr	r3, [pc, #352]	; (8005b74 <UART_SetConfig+0x2d4>)
 8005a12:	61bb      	str	r3, [r7, #24]
        break;
 8005a14:	e00f      	b.n	8005a36 <UART_SetConfig+0x196>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a16:	f7fe fccd 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 8005a1a:	0003      	movs	r3, r0
 8005a1c:	61bb      	str	r3, [r7, #24]
        break;
 8005a1e:	e00a      	b.n	8005a36 <UART_SetConfig+0x196>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a20:	2380      	movs	r3, #128	; 0x80
 8005a22:	021b      	lsls	r3, r3, #8
 8005a24:	61bb      	str	r3, [r7, #24]
        break;
 8005a26:	e006      	b.n	8005a36 <UART_SetConfig+0x196>
      default:
        pclk = 0U;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a2c:	231e      	movs	r3, #30
 8005a2e:	18fb      	adds	r3, r7, r3
 8005a30:	2201      	movs	r2, #1
 8005a32:	701a      	strb	r2, [r3, #0]
        break;
 8005a34:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d100      	bne.n	8005a3e <UART_SetConfig+0x19e>
 8005a3c:	e079      	b.n	8005b32 <UART_SetConfig+0x292>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	005a      	lsls	r2, r3, #1
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	085b      	lsrs	r3, r3, #1
 8005a48:	18d2      	adds	r2, r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	0019      	movs	r1, r3
 8005a50:	0010      	movs	r0, r2
 8005a52:	f7fa fb69 	bl	8000128 <__udivsi3>
 8005a56:	0003      	movs	r3, r0
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	2b0f      	cmp	r3, #15
 8005a60:	d91b      	bls.n	8005a9a <UART_SetConfig+0x1fa>
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	4a44      	ldr	r2, [pc, #272]	; (8005b78 <UART_SetConfig+0x2d8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d817      	bhi.n	8005a9a <UART_SetConfig+0x1fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	200e      	movs	r0, #14
 8005a70:	183b      	adds	r3, r7, r0
 8005a72:	210f      	movs	r1, #15
 8005a74:	438a      	bics	r2, r1
 8005a76:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	085b      	lsrs	r3, r3, #1
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2207      	movs	r2, #7
 8005a80:	4013      	ands	r3, r2
 8005a82:	b299      	uxth	r1, r3
 8005a84:	183b      	adds	r3, r7, r0
 8005a86:	183a      	adds	r2, r7, r0
 8005a88:	8812      	ldrh	r2, [r2, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	183a      	adds	r2, r7, r0
 8005a94:	8812      	ldrh	r2, [r2, #0]
 8005a96:	60da      	str	r2, [r3, #12]
 8005a98:	e04b      	b.n	8005b32 <UART_SetConfig+0x292>
      }
      else
      {
        ret = HAL_ERROR;
 8005a9a:	231e      	movs	r3, #30
 8005a9c:	18fb      	adds	r3, r7, r3
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	701a      	strb	r2, [r3, #0]
 8005aa2:	e046      	b.n	8005b32 <UART_SetConfig+0x292>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005aa4:	231f      	movs	r3, #31
 8005aa6:	18fb      	adds	r3, r7, r3
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d00d      	beq.n	8005aca <UART_SetConfig+0x22a>
 8005aae:	dc02      	bgt.n	8005ab6 <UART_SetConfig+0x216>
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d005      	beq.n	8005ac0 <UART_SetConfig+0x220>
 8005ab4:	e015      	b.n	8005ae2 <UART_SetConfig+0x242>
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d00a      	beq.n	8005ad0 <UART_SetConfig+0x230>
 8005aba:	2b08      	cmp	r3, #8
 8005abc:	d00d      	beq.n	8005ada <UART_SetConfig+0x23a>
 8005abe:	e010      	b.n	8005ae2 <UART_SetConfig+0x242>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ac0:	f7fe fce4 	bl	800448c <HAL_RCC_GetPCLK1Freq>
 8005ac4:	0003      	movs	r3, r0
 8005ac6:	61bb      	str	r3, [r7, #24]
        break;
 8005ac8:	e012      	b.n	8005af0 <UART_SetConfig+0x250>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005aca:	4b2a      	ldr	r3, [pc, #168]	; (8005b74 <UART_SetConfig+0x2d4>)
 8005acc:	61bb      	str	r3, [r7, #24]
        break;
 8005ace:	e00f      	b.n	8005af0 <UART_SetConfig+0x250>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ad0:	f7fe fc70 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 8005ad4:	0003      	movs	r3, r0
 8005ad6:	61bb      	str	r3, [r7, #24]
        break;
 8005ad8:	e00a      	b.n	8005af0 <UART_SetConfig+0x250>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ada:	2380      	movs	r3, #128	; 0x80
 8005adc:	021b      	lsls	r3, r3, #8
 8005ade:	61bb      	str	r3, [r7, #24]
        break;
 8005ae0:	e006      	b.n	8005af0 <UART_SetConfig+0x250>
      default:
        pclk = 0U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ae6:	231e      	movs	r3, #30
 8005ae8:	18fb      	adds	r3, r7, r3
 8005aea:	2201      	movs	r2, #1
 8005aec:	701a      	strb	r2, [r3, #0]
        break;
 8005aee:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d01d      	beq.n	8005b32 <UART_SetConfig+0x292>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	085a      	lsrs	r2, r3, #1
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	18d2      	adds	r2, r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	0019      	movs	r1, r3
 8005b06:	0010      	movs	r0, r2
 8005b08:	f7fa fb0e 	bl	8000128 <__udivsi3>
 8005b0c:	0003      	movs	r3, r0
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	2b0f      	cmp	r3, #15
 8005b16:	d908      	bls.n	8005b2a <UART_SetConfig+0x28a>
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	4a17      	ldr	r2, [pc, #92]	; (8005b78 <UART_SetConfig+0x2d8>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d804      	bhi.n	8005b2a <UART_SetConfig+0x28a>
      {
        huart->Instance->BRR = usartdiv;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	60da      	str	r2, [r3, #12]
 8005b28:	e003      	b.n	8005b32 <UART_SetConfig+0x292>
      }
      else
      {
        ret = HAL_ERROR;
 8005b2a:	231e      	movs	r3, #30
 8005b2c:	18fb      	adds	r3, r7, r3
 8005b2e:	2201      	movs	r2, #1
 8005b30:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005b3e:	231e      	movs	r3, #30
 8005b40:	18fb      	adds	r3, r7, r3
 8005b42:	781b      	ldrb	r3, [r3, #0]
}
 8005b44:	0018      	movs	r0, r3
 8005b46:	46bd      	mov	sp, r7
 8005b48:	b008      	add	sp, #32
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	efff69f3 	.word	0xefff69f3
 8005b50:	ffffcfff 	.word	0xffffcfff
 8005b54:	fffff4ff 	.word	0xfffff4ff
 8005b58:	40013800 	.word	0x40013800
 8005b5c:	40021000 	.word	0x40021000
 8005b60:	40004400 	.word	0x40004400
 8005b64:	40004800 	.word	0x40004800
 8005b68:	40004c00 	.word	0x40004c00
 8005b6c:	40005000 	.word	0x40005000
 8005b70:	40011400 	.word	0x40011400
 8005b74:	007a1200 	.word	0x007a1200
 8005b78:	0000ffff 	.word	0x0000ffff

08005b7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	2201      	movs	r2, #1
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	d00b      	beq.n	8005ba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	4a4a      	ldr	r2, [pc, #296]	; (8005cc0 <UART_AdvFeatureConfig+0x144>)
 8005b96:	4013      	ands	r3, r2
 8005b98:	0019      	movs	r1, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	2202      	movs	r2, #2
 8005bac:	4013      	ands	r3, r2
 8005bae:	d00b      	beq.n	8005bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	4a43      	ldr	r2, [pc, #268]	; (8005cc4 <UART_AdvFeatureConfig+0x148>)
 8005bb8:	4013      	ands	r3, r2
 8005bba:	0019      	movs	r1, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bcc:	2204      	movs	r2, #4
 8005bce:	4013      	ands	r3, r2
 8005bd0:	d00b      	beq.n	8005bea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	4a3b      	ldr	r2, [pc, #236]	; (8005cc8 <UART_AdvFeatureConfig+0x14c>)
 8005bda:	4013      	ands	r3, r2
 8005bdc:	0019      	movs	r1, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	2208      	movs	r2, #8
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	d00b      	beq.n	8005c0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	4a34      	ldr	r2, [pc, #208]	; (8005ccc <UART_AdvFeatureConfig+0x150>)
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	0019      	movs	r1, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	2210      	movs	r2, #16
 8005c12:	4013      	ands	r3, r2
 8005c14:	d00b      	beq.n	8005c2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	4a2c      	ldr	r2, [pc, #176]	; (8005cd0 <UART_AdvFeatureConfig+0x154>)
 8005c1e:	4013      	ands	r3, r2
 8005c20:	0019      	movs	r1, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c32:	2220      	movs	r2, #32
 8005c34:	4013      	ands	r3, r2
 8005c36:	d00b      	beq.n	8005c50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	4a25      	ldr	r2, [pc, #148]	; (8005cd4 <UART_AdvFeatureConfig+0x158>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	0019      	movs	r1, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	2240      	movs	r2, #64	; 0x40
 8005c56:	4013      	ands	r3, r2
 8005c58:	d01d      	beq.n	8005c96 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	4a1d      	ldr	r2, [pc, #116]	; (8005cd8 <UART_AdvFeatureConfig+0x15c>)
 8005c62:	4013      	ands	r3, r2
 8005c64:	0019      	movs	r1, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c76:	2380      	movs	r3, #128	; 0x80
 8005c78:	035b      	lsls	r3, r3, #13
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d10b      	bne.n	8005c96 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	4a15      	ldr	r2, [pc, #84]	; (8005cdc <UART_AdvFeatureConfig+0x160>)
 8005c86:	4013      	ands	r3, r2
 8005c88:	0019      	movs	r1, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	2280      	movs	r2, #128	; 0x80
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	d00b      	beq.n	8005cb8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	4a0e      	ldr	r2, [pc, #56]	; (8005ce0 <UART_AdvFeatureConfig+0x164>)
 8005ca8:	4013      	ands	r3, r2
 8005caa:	0019      	movs	r1, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	605a      	str	r2, [r3, #4]
  }
}
 8005cb8:	46c0      	nop			; (mov r8, r8)
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	b002      	add	sp, #8
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	fffdffff 	.word	0xfffdffff
 8005cc4:	fffeffff 	.word	0xfffeffff
 8005cc8:	fffbffff 	.word	0xfffbffff
 8005ccc:	ffff7fff 	.word	0xffff7fff
 8005cd0:	ffffefff 	.word	0xffffefff
 8005cd4:	ffffdfff 	.word	0xffffdfff
 8005cd8:	ffefffff 	.word	0xffefffff
 8005cdc:	ff9fffff 	.word	0xff9fffff
 8005ce0:	fff7ffff 	.word	0xfff7ffff

08005ce4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af02      	add	r7, sp, #8
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2280      	movs	r2, #128	; 0x80
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cf4:	f7fd faae 	bl	8003254 <HAL_GetTick>
 8005cf8:	0003      	movs	r3, r0
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2208      	movs	r2, #8
 8005d04:	4013      	ands	r3, r2
 8005d06:	2b08      	cmp	r3, #8
 8005d08:	d10d      	bne.n	8005d26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	2380      	movs	r3, #128	; 0x80
 8005d0e:	0399      	lsls	r1, r3, #14
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	4b18      	ldr	r3, [pc, #96]	; (8005d74 <UART_CheckIdleState+0x90>)
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	0013      	movs	r3, r2
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f000 f82d 	bl	8005d78 <UART_WaitOnFlagUntilTimeout>
 8005d1e:	1e03      	subs	r3, r0, #0
 8005d20:	d001      	beq.n	8005d26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e022      	b.n	8005d6c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2204      	movs	r2, #4
 8005d2e:	4013      	ands	r3, r2
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	d10d      	bne.n	8005d50 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	2380      	movs	r3, #128	; 0x80
 8005d38:	03d9      	lsls	r1, r3, #15
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	4b0d      	ldr	r3, [pc, #52]	; (8005d74 <UART_CheckIdleState+0x90>)
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	0013      	movs	r3, r2
 8005d42:	2200      	movs	r2, #0
 8005d44:	f000 f818 	bl	8005d78 <UART_WaitOnFlagUntilTimeout>
 8005d48:	1e03      	subs	r3, r0, #0
 8005d4a:	d001      	beq.n	8005d50 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e00d      	b.n	8005d6c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2220      	movs	r2, #32
 8005d54:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2274      	movs	r2, #116	; 0x74
 8005d66:	2100      	movs	r1, #0
 8005d68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	0018      	movs	r0, r3
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	b004      	add	sp, #16
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	01ffffff 	.word	0x01ffffff

08005d78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	603b      	str	r3, [r7, #0]
 8005d84:	1dfb      	adds	r3, r7, #7
 8005d86:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d88:	e05e      	b.n	8005e48 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	d05b      	beq.n	8005e48 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d90:	f7fd fa60 	bl	8003254 <HAL_GetTick>
 8005d94:	0002      	movs	r2, r0
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d302      	bcc.n	8005da6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d11b      	bne.n	8005dde <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	492f      	ldr	r1, [pc, #188]	; (8005e70 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005db2:	400a      	ands	r2, r1
 8005db4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2101      	movs	r1, #1
 8005dc2:	438a      	bics	r2, r1
 8005dc4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2274      	movs	r2, #116	; 0x74
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e044      	b.n	8005e68 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2204      	movs	r2, #4
 8005de6:	4013      	ands	r3, r2
 8005de8:	d02e      	beq.n	8005e48 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69da      	ldr	r2, [r3, #28]
 8005df0:	2380      	movs	r3, #128	; 0x80
 8005df2:	011b      	lsls	r3, r3, #4
 8005df4:	401a      	ands	r2, r3
 8005df6:	2380      	movs	r3, #128	; 0x80
 8005df8:	011b      	lsls	r3, r3, #4
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d124      	bne.n	8005e48 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2280      	movs	r2, #128	; 0x80
 8005e04:	0112      	lsls	r2, r2, #4
 8005e06:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4917      	ldr	r1, [pc, #92]	; (8005e70 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005e14:	400a      	ands	r2, r1
 8005e16:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689a      	ldr	r2, [r3, #8]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2101      	movs	r1, #1
 8005e24:	438a      	bics	r2, r1
 8005e26:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2220      	movs	r2, #32
 8005e32:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2280      	movs	r2, #128	; 0x80
 8005e38:	2120      	movs	r1, #32
 8005e3a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2274      	movs	r2, #116	; 0x74
 8005e40:	2100      	movs	r1, #0
 8005e42:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e00f      	b.n	8005e68 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	4013      	ands	r3, r2
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	425a      	negs	r2, r3
 8005e58:	4153      	adcs	r3, r2
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	001a      	movs	r2, r3
 8005e5e:	1dfb      	adds	r3, r7, #7
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d091      	beq.n	8005d8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	0018      	movs	r0, r3
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	b004      	add	sp, #16
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	fffffe5f 	.word	0xfffffe5f

08005e74 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	21c0      	movs	r1, #192	; 0xc0
 8005e88:	438a      	bics	r2, r1
 8005e8a:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005e92:	46c0      	nop			; (mov r8, r8)
 8005e94:	46bd      	mov	sp, r7
 8005e96:	b002      	add	sp, #8
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4912      	ldr	r1, [pc, #72]	; (8005ef8 <UART_EndRxTransfer+0x5c>)
 8005eb0:	400a      	ands	r2, r1
 8005eb2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	438a      	bics	r2, r1
 8005ec2:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d107      	bne.n	8005edc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2110      	movs	r1, #16
 8005ed8:	438a      	bics	r2, r1
 8005eda:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005eee:	46c0      	nop			; (mov r8, r8)
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	b002      	add	sp, #8
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	46c0      	nop			; (mov r8, r8)
 8005ef8:	fffffedf 	.word	0xfffffedf

08005efc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	2b20      	cmp	r3, #32
 8005f10:	d014      	beq.n	8005f3c <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2252      	movs	r2, #82	; 0x52
 8005f16:	2100      	movs	r1, #0
 8005f18:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689a      	ldr	r2, [r3, #8]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2180      	movs	r1, #128	; 0x80
 8005f26:	438a      	bics	r2, r1
 8005f28:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2140      	movs	r1, #64	; 0x40
 8005f36:	430a      	orrs	r2, r1
 8005f38:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f3a:	e003      	b.n	8005f44 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	0018      	movs	r0, r3
 8005f40:	f7ff fc8a 	bl	8005858 <HAL_UART_TxCpltCallback>
}
 8005f44:	46c0      	nop			; (mov r8, r8)
 8005f46:	46bd      	mov	sp, r7
 8005f48:	b004      	add	sp, #16
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	f7ff fc83 	bl	8005868 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f62:	46c0      	nop			; (mov r8, r8)
 8005f64:	46bd      	mov	sp, r7
 8005f66:	b004      	add	sp, #16
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b086      	sub	sp, #24
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f76:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f7c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	2280      	movs	r2, #128	; 0x80
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	2b80      	cmp	r3, #128	; 0x80
 8005f90:	d10a      	bne.n	8005fa8 <UART_DMAError+0x3e>
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	2b21      	cmp	r3, #33	; 0x21
 8005f96:	d107      	bne.n	8005fa8 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	2252      	movs	r2, #82	; 0x52
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	0018      	movs	r0, r3
 8005fa4:	f7ff ff66 	bl	8005e74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	2240      	movs	r2, #64	; 0x40
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	2b40      	cmp	r3, #64	; 0x40
 8005fb4:	d10a      	bne.n	8005fcc <UART_DMAError+0x62>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2b22      	cmp	r3, #34	; 0x22
 8005fba:	d107      	bne.n	8005fcc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	225a      	movs	r2, #90	; 0x5a
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	f7ff ff68 	bl	8005e9c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	2280      	movs	r2, #128	; 0x80
 8005fd0:	589b      	ldr	r3, [r3, r2]
 8005fd2:	2210      	movs	r2, #16
 8005fd4:	431a      	orrs	r2, r3
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	2180      	movs	r1, #128	; 0x80
 8005fda:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	0018      	movs	r0, r3
 8005fe0:	f7ff fc4a 	bl	8005878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fe4:	46c0      	nop			; (mov r8, r8)
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	b006      	add	sp, #24
 8005fea:	bd80      	pop	{r7, pc}

08005fec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	225a      	movs	r2, #90	; 0x5a
 8005ffe:	2100      	movs	r1, #0
 8006000:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2252      	movs	r2, #82	; 0x52
 8006006:	2100      	movs	r1, #0
 8006008:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	0018      	movs	r0, r3
 800600e:	f7ff fc33 	bl	8005878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006012:	46c0      	nop			; (mov r8, r8)
 8006014:	46bd      	mov	sp, r7
 8006016:	b004      	add	sp, #16
 8006018:	bd80      	pop	{r7, pc}

0800601a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b082      	sub	sp, #8
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2140      	movs	r1, #64	; 0x40
 800602e:	438a      	bics	r2, r1
 8006030:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2220      	movs	r2, #32
 8006036:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	0018      	movs	r0, r3
 8006042:	f7ff fc09 	bl	8005858 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006046:	46c0      	nop			; (mov r8, r8)
 8006048:	46bd      	mov	sp, r7
 800604a:	b002      	add	sp, #8
 800604c:	bd80      	pop	{r7, pc}
	...

08006050 <__errno>:
 8006050:	4b01      	ldr	r3, [pc, #4]	; (8006058 <__errno+0x8>)
 8006052:	6818      	ldr	r0, [r3, #0]
 8006054:	4770      	bx	lr
 8006056:	46c0      	nop			; (mov r8, r8)
 8006058:	2000000c 	.word	0x2000000c

0800605c <__libc_init_array>:
 800605c:	b570      	push	{r4, r5, r6, lr}
 800605e:	2600      	movs	r6, #0
 8006060:	4d0c      	ldr	r5, [pc, #48]	; (8006094 <__libc_init_array+0x38>)
 8006062:	4c0d      	ldr	r4, [pc, #52]	; (8006098 <__libc_init_array+0x3c>)
 8006064:	1b64      	subs	r4, r4, r5
 8006066:	10a4      	asrs	r4, r4, #2
 8006068:	42a6      	cmp	r6, r4
 800606a:	d109      	bne.n	8006080 <__libc_init_array+0x24>
 800606c:	2600      	movs	r6, #0
 800606e:	f004 fab5 	bl	800a5dc <_init>
 8006072:	4d0a      	ldr	r5, [pc, #40]	; (800609c <__libc_init_array+0x40>)
 8006074:	4c0a      	ldr	r4, [pc, #40]	; (80060a0 <__libc_init_array+0x44>)
 8006076:	1b64      	subs	r4, r4, r5
 8006078:	10a4      	asrs	r4, r4, #2
 800607a:	42a6      	cmp	r6, r4
 800607c:	d105      	bne.n	800608a <__libc_init_array+0x2e>
 800607e:	bd70      	pop	{r4, r5, r6, pc}
 8006080:	00b3      	lsls	r3, r6, #2
 8006082:	58eb      	ldr	r3, [r5, r3]
 8006084:	4798      	blx	r3
 8006086:	3601      	adds	r6, #1
 8006088:	e7ee      	b.n	8006068 <__libc_init_array+0xc>
 800608a:	00b3      	lsls	r3, r6, #2
 800608c:	58eb      	ldr	r3, [r5, r3]
 800608e:	4798      	blx	r3
 8006090:	3601      	adds	r6, #1
 8006092:	e7f2      	b.n	800607a <__libc_init_array+0x1e>
 8006094:	0800aaa8 	.word	0x0800aaa8
 8006098:	0800aaa8 	.word	0x0800aaa8
 800609c:	0800aaa8 	.word	0x0800aaa8
 80060a0:	0800aaac 	.word	0x0800aaac

080060a4 <memcpy>:
 80060a4:	2300      	movs	r3, #0
 80060a6:	b510      	push	{r4, lr}
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d100      	bne.n	80060ae <memcpy+0xa>
 80060ac:	bd10      	pop	{r4, pc}
 80060ae:	5ccc      	ldrb	r4, [r1, r3]
 80060b0:	54c4      	strb	r4, [r0, r3]
 80060b2:	3301      	adds	r3, #1
 80060b4:	e7f8      	b.n	80060a8 <memcpy+0x4>

080060b6 <memset>:
 80060b6:	0003      	movs	r3, r0
 80060b8:	1812      	adds	r2, r2, r0
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d100      	bne.n	80060c0 <memset+0xa>
 80060be:	4770      	bx	lr
 80060c0:	7019      	strb	r1, [r3, #0]
 80060c2:	3301      	adds	r3, #1
 80060c4:	e7f9      	b.n	80060ba <memset+0x4>

080060c6 <__cvt>:
 80060c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060c8:	b08b      	sub	sp, #44	; 0x2c
 80060ca:	0014      	movs	r4, r2
 80060cc:	1e1d      	subs	r5, r3, #0
 80060ce:	9912      	ldr	r1, [sp, #72]	; 0x48
 80060d0:	da53      	bge.n	800617a <__cvt+0xb4>
 80060d2:	2480      	movs	r4, #128	; 0x80
 80060d4:	0624      	lsls	r4, r4, #24
 80060d6:	191b      	adds	r3, r3, r4
 80060d8:	001d      	movs	r5, r3
 80060da:	0014      	movs	r4, r2
 80060dc:	232d      	movs	r3, #45	; 0x2d
 80060de:	700b      	strb	r3, [r1, #0]
 80060e0:	2320      	movs	r3, #32
 80060e2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80060e4:	2203      	movs	r2, #3
 80060e6:	439e      	bics	r6, r3
 80060e8:	2e46      	cmp	r6, #70	; 0x46
 80060ea:	d007      	beq.n	80060fc <__cvt+0x36>
 80060ec:	0033      	movs	r3, r6
 80060ee:	3b45      	subs	r3, #69	; 0x45
 80060f0:	4259      	negs	r1, r3
 80060f2:	414b      	adcs	r3, r1
 80060f4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80060f6:	3a01      	subs	r2, #1
 80060f8:	18cb      	adds	r3, r1, r3
 80060fa:	9310      	str	r3, [sp, #64]	; 0x40
 80060fc:	ab09      	add	r3, sp, #36	; 0x24
 80060fe:	9304      	str	r3, [sp, #16]
 8006100:	ab08      	add	r3, sp, #32
 8006102:	9303      	str	r3, [sp, #12]
 8006104:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006106:	9200      	str	r2, [sp, #0]
 8006108:	9302      	str	r3, [sp, #8]
 800610a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800610c:	0022      	movs	r2, r4
 800610e:	9301      	str	r3, [sp, #4]
 8006110:	002b      	movs	r3, r5
 8006112:	f001 fdd9 	bl	8007cc8 <_dtoa_r>
 8006116:	0007      	movs	r7, r0
 8006118:	2e47      	cmp	r6, #71	; 0x47
 800611a:	d102      	bne.n	8006122 <__cvt+0x5c>
 800611c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800611e:	07db      	lsls	r3, r3, #31
 8006120:	d524      	bpl.n	800616c <__cvt+0xa6>
 8006122:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006124:	18fb      	adds	r3, r7, r3
 8006126:	9307      	str	r3, [sp, #28]
 8006128:	2e46      	cmp	r6, #70	; 0x46
 800612a:	d114      	bne.n	8006156 <__cvt+0x90>
 800612c:	783b      	ldrb	r3, [r7, #0]
 800612e:	2b30      	cmp	r3, #48	; 0x30
 8006130:	d10c      	bne.n	800614c <__cvt+0x86>
 8006132:	2200      	movs	r2, #0
 8006134:	2300      	movs	r3, #0
 8006136:	0020      	movs	r0, r4
 8006138:	0029      	movs	r1, r5
 800613a:	f7fa f97b 	bl	8000434 <__aeabi_dcmpeq>
 800613e:	2800      	cmp	r0, #0
 8006140:	d104      	bne.n	800614c <__cvt+0x86>
 8006142:	2301      	movs	r3, #1
 8006144:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006146:	1a9b      	subs	r3, r3, r2
 8006148:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800614a:	6013      	str	r3, [r2, #0]
 800614c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800614e:	9a07      	ldr	r2, [sp, #28]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	18d3      	adds	r3, r2, r3
 8006154:	9307      	str	r3, [sp, #28]
 8006156:	2200      	movs	r2, #0
 8006158:	2300      	movs	r3, #0
 800615a:	0020      	movs	r0, r4
 800615c:	0029      	movs	r1, r5
 800615e:	f7fa f969 	bl	8000434 <__aeabi_dcmpeq>
 8006162:	2230      	movs	r2, #48	; 0x30
 8006164:	2800      	cmp	r0, #0
 8006166:	d00d      	beq.n	8006184 <__cvt+0xbe>
 8006168:	9b07      	ldr	r3, [sp, #28]
 800616a:	9309      	str	r3, [sp, #36]	; 0x24
 800616c:	0038      	movs	r0, r7
 800616e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006170:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006172:	1bdb      	subs	r3, r3, r7
 8006174:	6013      	str	r3, [r2, #0]
 8006176:	b00b      	add	sp, #44	; 0x2c
 8006178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800617a:	2300      	movs	r3, #0
 800617c:	e7af      	b.n	80060de <__cvt+0x18>
 800617e:	1c59      	adds	r1, r3, #1
 8006180:	9109      	str	r1, [sp, #36]	; 0x24
 8006182:	701a      	strb	r2, [r3, #0]
 8006184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006186:	9907      	ldr	r1, [sp, #28]
 8006188:	428b      	cmp	r3, r1
 800618a:	d3f8      	bcc.n	800617e <__cvt+0xb8>
 800618c:	e7ee      	b.n	800616c <__cvt+0xa6>

0800618e <__exponent>:
 800618e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006190:	1c83      	adds	r3, r0, #2
 8006192:	b085      	sub	sp, #20
 8006194:	9301      	str	r3, [sp, #4]
 8006196:	0006      	movs	r6, r0
 8006198:	000c      	movs	r4, r1
 800619a:	7002      	strb	r2, [r0, #0]
 800619c:	232b      	movs	r3, #43	; 0x2b
 800619e:	2900      	cmp	r1, #0
 80061a0:	da01      	bge.n	80061a6 <__exponent+0x18>
 80061a2:	232d      	movs	r3, #45	; 0x2d
 80061a4:	424c      	negs	r4, r1
 80061a6:	7073      	strb	r3, [r6, #1]
 80061a8:	2c09      	cmp	r4, #9
 80061aa:	dd22      	ble.n	80061f2 <__exponent+0x64>
 80061ac:	ab02      	add	r3, sp, #8
 80061ae:	1ddd      	adds	r5, r3, #7
 80061b0:	0020      	movs	r0, r4
 80061b2:	210a      	movs	r1, #10
 80061b4:	f7fa f928 	bl	8000408 <__aeabi_idivmod>
 80061b8:	1e6f      	subs	r7, r5, #1
 80061ba:	3130      	adds	r1, #48	; 0x30
 80061bc:	7039      	strb	r1, [r7, #0]
 80061be:	0020      	movs	r0, r4
 80061c0:	210a      	movs	r1, #10
 80061c2:	f7fa f83b 	bl	800023c <__divsi3>
 80061c6:	0004      	movs	r4, r0
 80061c8:	2809      	cmp	r0, #9
 80061ca:	dc0b      	bgt.n	80061e4 <__exponent+0x56>
 80061cc:	3d02      	subs	r5, #2
 80061ce:	3430      	adds	r4, #48	; 0x30
 80061d0:	9b01      	ldr	r3, [sp, #4]
 80061d2:	702c      	strb	r4, [r5, #0]
 80061d4:	aa02      	add	r2, sp, #8
 80061d6:	3207      	adds	r2, #7
 80061d8:	0018      	movs	r0, r3
 80061da:	42aa      	cmp	r2, r5
 80061dc:	d804      	bhi.n	80061e8 <__exponent+0x5a>
 80061de:	1b80      	subs	r0, r0, r6
 80061e0:	b005      	add	sp, #20
 80061e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061e4:	003d      	movs	r5, r7
 80061e6:	e7e3      	b.n	80061b0 <__exponent+0x22>
 80061e8:	782a      	ldrb	r2, [r5, #0]
 80061ea:	3501      	adds	r5, #1
 80061ec:	701a      	strb	r2, [r3, #0]
 80061ee:	3301      	adds	r3, #1
 80061f0:	e7f0      	b.n	80061d4 <__exponent+0x46>
 80061f2:	2330      	movs	r3, #48	; 0x30
 80061f4:	18e4      	adds	r4, r4, r3
 80061f6:	70b3      	strb	r3, [r6, #2]
 80061f8:	1d30      	adds	r0, r6, #4
 80061fa:	70f4      	strb	r4, [r6, #3]
 80061fc:	e7ef      	b.n	80061de <__exponent+0x50>
	...

08006200 <_printf_float>:
 8006200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006202:	b095      	sub	sp, #84	; 0x54
 8006204:	000c      	movs	r4, r1
 8006206:	920a      	str	r2, [sp, #40]	; 0x28
 8006208:	930b      	str	r3, [sp, #44]	; 0x2c
 800620a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800620c:	9009      	str	r0, [sp, #36]	; 0x24
 800620e:	f002 ff47 	bl	80090a0 <_localeconv_r>
 8006212:	6803      	ldr	r3, [r0, #0]
 8006214:	0018      	movs	r0, r3
 8006216:	930c      	str	r3, [sp, #48]	; 0x30
 8006218:	f7f9 ff74 	bl	8000104 <strlen>
 800621c:	2300      	movs	r3, #0
 800621e:	9312      	str	r3, [sp, #72]	; 0x48
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	900e      	str	r0, [sp, #56]	; 0x38
 8006224:	930d      	str	r3, [sp, #52]	; 0x34
 8006226:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006228:	7e27      	ldrb	r7, [r4, #24]
 800622a:	682b      	ldr	r3, [r5, #0]
 800622c:	2207      	movs	r2, #7
 800622e:	05c9      	lsls	r1, r1, #23
 8006230:	d545      	bpl.n	80062be <_printf_float+0xbe>
 8006232:	189b      	adds	r3, r3, r2
 8006234:	4393      	bics	r3, r2
 8006236:	001a      	movs	r2, r3
 8006238:	3208      	adds	r2, #8
 800623a:	602a      	str	r2, [r5, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	64a2      	str	r2, [r4, #72]	; 0x48
 8006242:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006244:	2201      	movs	r2, #1
 8006246:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006248:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 800624a:	006b      	lsls	r3, r5, #1
 800624c:	085b      	lsrs	r3, r3, #1
 800624e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006250:	4252      	negs	r2, r2
 8006252:	4bac      	ldr	r3, [pc, #688]	; (8006504 <_printf_float+0x304>)
 8006254:	0030      	movs	r0, r6
 8006256:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006258:	f7fb ff74 	bl	8002144 <__aeabi_dcmpun>
 800625c:	2800      	cmp	r0, #0
 800625e:	d130      	bne.n	80062c2 <_printf_float+0xc2>
 8006260:	2201      	movs	r2, #1
 8006262:	4ba8      	ldr	r3, [pc, #672]	; (8006504 <_printf_float+0x304>)
 8006264:	4252      	negs	r2, r2
 8006266:	0030      	movs	r0, r6
 8006268:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800626a:	f7fa f8f3 	bl	8000454 <__aeabi_dcmple>
 800626e:	2800      	cmp	r0, #0
 8006270:	d127      	bne.n	80062c2 <_printf_float+0xc2>
 8006272:	2200      	movs	r2, #0
 8006274:	2300      	movs	r3, #0
 8006276:	0030      	movs	r0, r6
 8006278:	0029      	movs	r1, r5
 800627a:	f7fa f8e1 	bl	8000440 <__aeabi_dcmplt>
 800627e:	2800      	cmp	r0, #0
 8006280:	d003      	beq.n	800628a <_printf_float+0x8a>
 8006282:	0023      	movs	r3, r4
 8006284:	222d      	movs	r2, #45	; 0x2d
 8006286:	3343      	adds	r3, #67	; 0x43
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	4d9f      	ldr	r5, [pc, #636]	; (8006508 <_printf_float+0x308>)
 800628c:	2f47      	cmp	r7, #71	; 0x47
 800628e:	d800      	bhi.n	8006292 <_printf_float+0x92>
 8006290:	4d9e      	ldr	r5, [pc, #632]	; (800650c <_printf_float+0x30c>)
 8006292:	2303      	movs	r3, #3
 8006294:	2600      	movs	r6, #0
 8006296:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006298:	6123      	str	r3, [r4, #16]
 800629a:	3301      	adds	r3, #1
 800629c:	439a      	bics	r2, r3
 800629e:	6022      	str	r2, [r4, #0]
 80062a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062a2:	aa13      	add	r2, sp, #76	; 0x4c
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	0021      	movs	r1, r4
 80062a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062ac:	f000 f9f4 	bl	8006698 <_printf_common>
 80062b0:	1c43      	adds	r3, r0, #1
 80062b2:	d000      	beq.n	80062b6 <_printf_float+0xb6>
 80062b4:	e093      	b.n	80063de <_printf_float+0x1de>
 80062b6:	2001      	movs	r0, #1
 80062b8:	4240      	negs	r0, r0
 80062ba:	b015      	add	sp, #84	; 0x54
 80062bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062be:	3307      	adds	r3, #7
 80062c0:	e7b8      	b.n	8006234 <_printf_float+0x34>
 80062c2:	0032      	movs	r2, r6
 80062c4:	002b      	movs	r3, r5
 80062c6:	0030      	movs	r0, r6
 80062c8:	0029      	movs	r1, r5
 80062ca:	f7fb ff3b 	bl	8002144 <__aeabi_dcmpun>
 80062ce:	2800      	cmp	r0, #0
 80062d0:	d004      	beq.n	80062dc <_printf_float+0xdc>
 80062d2:	4d8f      	ldr	r5, [pc, #572]	; (8006510 <_printf_float+0x310>)
 80062d4:	2f47      	cmp	r7, #71	; 0x47
 80062d6:	d8dc      	bhi.n	8006292 <_printf_float+0x92>
 80062d8:	4d8e      	ldr	r5, [pc, #568]	; (8006514 <_printf_float+0x314>)
 80062da:	e7da      	b.n	8006292 <_printf_float+0x92>
 80062dc:	2380      	movs	r3, #128	; 0x80
 80062de:	990d      	ldr	r1, [sp, #52]	; 0x34
 80062e0:	6862      	ldr	r2, [r4, #4]
 80062e2:	00db      	lsls	r3, r3, #3
 80062e4:	430b      	orrs	r3, r1
 80062e6:	1c51      	adds	r1, r2, #1
 80062e8:	d143      	bne.n	8006372 <_printf_float+0x172>
 80062ea:	3207      	adds	r2, #7
 80062ec:	6062      	str	r2, [r4, #4]
 80062ee:	aa12      	add	r2, sp, #72	; 0x48
 80062f0:	2100      	movs	r1, #0
 80062f2:	9205      	str	r2, [sp, #20]
 80062f4:	aa11      	add	r2, sp, #68	; 0x44
 80062f6:	9203      	str	r2, [sp, #12]
 80062f8:	2223      	movs	r2, #35	; 0x23
 80062fa:	6023      	str	r3, [r4, #0]
 80062fc:	9106      	str	r1, [sp, #24]
 80062fe:	9301      	str	r3, [sp, #4]
 8006300:	a908      	add	r1, sp, #32
 8006302:	6863      	ldr	r3, [r4, #4]
 8006304:	1852      	adds	r2, r2, r1
 8006306:	9202      	str	r2, [sp, #8]
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	0032      	movs	r2, r6
 800630c:	002b      	movs	r3, r5
 800630e:	9704      	str	r7, [sp, #16]
 8006310:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006312:	f7ff fed8 	bl	80060c6 <__cvt>
 8006316:	2320      	movs	r3, #32
 8006318:	003a      	movs	r2, r7
 800631a:	0005      	movs	r5, r0
 800631c:	439a      	bics	r2, r3
 800631e:	2a47      	cmp	r2, #71	; 0x47
 8006320:	d107      	bne.n	8006332 <_printf_float+0x132>
 8006322:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006324:	1cda      	adds	r2, r3, #3
 8006326:	db02      	blt.n	800632e <_printf_float+0x12e>
 8006328:	6862      	ldr	r2, [r4, #4]
 800632a:	4293      	cmp	r3, r2
 800632c:	dd45      	ble.n	80063ba <_printf_float+0x1ba>
 800632e:	3f02      	subs	r7, #2
 8006330:	b2ff      	uxtb	r7, r7
 8006332:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006334:	2f65      	cmp	r7, #101	; 0x65
 8006336:	d825      	bhi.n	8006384 <_printf_float+0x184>
 8006338:	0020      	movs	r0, r4
 800633a:	3901      	subs	r1, #1
 800633c:	003a      	movs	r2, r7
 800633e:	3050      	adds	r0, #80	; 0x50
 8006340:	9111      	str	r1, [sp, #68]	; 0x44
 8006342:	f7ff ff24 	bl	800618e <__exponent>
 8006346:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006348:	0006      	movs	r6, r0
 800634a:	1813      	adds	r3, r2, r0
 800634c:	6123      	str	r3, [r4, #16]
 800634e:	2a01      	cmp	r2, #1
 8006350:	dc02      	bgt.n	8006358 <_printf_float+0x158>
 8006352:	6822      	ldr	r2, [r4, #0]
 8006354:	07d2      	lsls	r2, r2, #31
 8006356:	d501      	bpl.n	800635c <_printf_float+0x15c>
 8006358:	3301      	adds	r3, #1
 800635a:	6123      	str	r3, [r4, #16]
 800635c:	2323      	movs	r3, #35	; 0x23
 800635e:	aa08      	add	r2, sp, #32
 8006360:	189b      	adds	r3, r3, r2
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d09b      	beq.n	80062a0 <_printf_float+0xa0>
 8006368:	0023      	movs	r3, r4
 800636a:	222d      	movs	r2, #45	; 0x2d
 800636c:	3343      	adds	r3, #67	; 0x43
 800636e:	701a      	strb	r2, [r3, #0]
 8006370:	e796      	b.n	80062a0 <_printf_float+0xa0>
 8006372:	2f67      	cmp	r7, #103	; 0x67
 8006374:	d100      	bne.n	8006378 <_printf_float+0x178>
 8006376:	e176      	b.n	8006666 <_printf_float+0x466>
 8006378:	2f47      	cmp	r7, #71	; 0x47
 800637a:	d1b8      	bne.n	80062ee <_printf_float+0xee>
 800637c:	2a00      	cmp	r2, #0
 800637e:	d1b6      	bne.n	80062ee <_printf_float+0xee>
 8006380:	2201      	movs	r2, #1
 8006382:	e7b3      	b.n	80062ec <_printf_float+0xec>
 8006384:	2f66      	cmp	r7, #102	; 0x66
 8006386:	d119      	bne.n	80063bc <_printf_float+0x1bc>
 8006388:	6863      	ldr	r3, [r4, #4]
 800638a:	2900      	cmp	r1, #0
 800638c:	dd0c      	ble.n	80063a8 <_printf_float+0x1a8>
 800638e:	6121      	str	r1, [r4, #16]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d102      	bne.n	800639a <_printf_float+0x19a>
 8006394:	6822      	ldr	r2, [r4, #0]
 8006396:	07d2      	lsls	r2, r2, #31
 8006398:	d502      	bpl.n	80063a0 <_printf_float+0x1a0>
 800639a:	3301      	adds	r3, #1
 800639c:	185b      	adds	r3, r3, r1
 800639e:	6123      	str	r3, [r4, #16]
 80063a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063a2:	2600      	movs	r6, #0
 80063a4:	65a3      	str	r3, [r4, #88]	; 0x58
 80063a6:	e7d9      	b.n	800635c <_printf_float+0x15c>
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d103      	bne.n	80063b4 <_printf_float+0x1b4>
 80063ac:	2201      	movs	r2, #1
 80063ae:	6821      	ldr	r1, [r4, #0]
 80063b0:	4211      	tst	r1, r2
 80063b2:	d000      	beq.n	80063b6 <_printf_float+0x1b6>
 80063b4:	1c9a      	adds	r2, r3, #2
 80063b6:	6122      	str	r2, [r4, #16]
 80063b8:	e7f2      	b.n	80063a0 <_printf_float+0x1a0>
 80063ba:	2767      	movs	r7, #103	; 0x67
 80063bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80063c0:	4293      	cmp	r3, r2
 80063c2:	db05      	blt.n	80063d0 <_printf_float+0x1d0>
 80063c4:	6822      	ldr	r2, [r4, #0]
 80063c6:	6123      	str	r3, [r4, #16]
 80063c8:	07d2      	lsls	r2, r2, #31
 80063ca:	d5e9      	bpl.n	80063a0 <_printf_float+0x1a0>
 80063cc:	3301      	adds	r3, #1
 80063ce:	e7e6      	b.n	800639e <_printf_float+0x19e>
 80063d0:	2101      	movs	r1, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	dc01      	bgt.n	80063da <_printf_float+0x1da>
 80063d6:	1849      	adds	r1, r1, r1
 80063d8:	1ac9      	subs	r1, r1, r3
 80063da:	1852      	adds	r2, r2, r1
 80063dc:	e7eb      	b.n	80063b6 <_printf_float+0x1b6>
 80063de:	6822      	ldr	r2, [r4, #0]
 80063e0:	0553      	lsls	r3, r2, #21
 80063e2:	d408      	bmi.n	80063f6 <_printf_float+0x1f6>
 80063e4:	6923      	ldr	r3, [r4, #16]
 80063e6:	002a      	movs	r2, r5
 80063e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80063ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063ec:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80063ee:	47a8      	blx	r5
 80063f0:	1c43      	adds	r3, r0, #1
 80063f2:	d129      	bne.n	8006448 <_printf_float+0x248>
 80063f4:	e75f      	b.n	80062b6 <_printf_float+0xb6>
 80063f6:	2f65      	cmp	r7, #101	; 0x65
 80063f8:	d800      	bhi.n	80063fc <_printf_float+0x1fc>
 80063fa:	e0e0      	b.n	80065be <_printf_float+0x3be>
 80063fc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80063fe:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006400:	2200      	movs	r2, #0
 8006402:	2300      	movs	r3, #0
 8006404:	f7fa f816 	bl	8000434 <__aeabi_dcmpeq>
 8006408:	2800      	cmp	r0, #0
 800640a:	d034      	beq.n	8006476 <_printf_float+0x276>
 800640c:	2301      	movs	r3, #1
 800640e:	4a42      	ldr	r2, [pc, #264]	; (8006518 <_printf_float+0x318>)
 8006410:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006412:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006414:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006416:	47a8      	blx	r5
 8006418:	1c43      	adds	r3, r0, #1
 800641a:	d100      	bne.n	800641e <_printf_float+0x21e>
 800641c:	e74b      	b.n	80062b6 <_printf_float+0xb6>
 800641e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006420:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006422:	4293      	cmp	r3, r2
 8006424:	db02      	blt.n	800642c <_printf_float+0x22c>
 8006426:	6823      	ldr	r3, [r4, #0]
 8006428:	07db      	lsls	r3, r3, #31
 800642a:	d50d      	bpl.n	8006448 <_printf_float+0x248>
 800642c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800642e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006430:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006432:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006434:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006436:	47a8      	blx	r5
 8006438:	2500      	movs	r5, #0
 800643a:	1c43      	adds	r3, r0, #1
 800643c:	d100      	bne.n	8006440 <_printf_float+0x240>
 800643e:	e73a      	b.n	80062b6 <_printf_float+0xb6>
 8006440:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006442:	3b01      	subs	r3, #1
 8006444:	42ab      	cmp	r3, r5
 8006446:	dc0a      	bgt.n	800645e <_printf_float+0x25e>
 8006448:	6823      	ldr	r3, [r4, #0]
 800644a:	079b      	lsls	r3, r3, #30
 800644c:	d500      	bpl.n	8006450 <_printf_float+0x250>
 800644e:	e108      	b.n	8006662 <_printf_float+0x462>
 8006450:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006452:	68e0      	ldr	r0, [r4, #12]
 8006454:	4298      	cmp	r0, r3
 8006456:	db00      	blt.n	800645a <_printf_float+0x25a>
 8006458:	e72f      	b.n	80062ba <_printf_float+0xba>
 800645a:	0018      	movs	r0, r3
 800645c:	e72d      	b.n	80062ba <_printf_float+0xba>
 800645e:	0022      	movs	r2, r4
 8006460:	2301      	movs	r3, #1
 8006462:	321a      	adds	r2, #26
 8006464:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006466:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006468:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800646a:	47b0      	blx	r6
 800646c:	1c43      	adds	r3, r0, #1
 800646e:	d100      	bne.n	8006472 <_printf_float+0x272>
 8006470:	e721      	b.n	80062b6 <_printf_float+0xb6>
 8006472:	3501      	adds	r5, #1
 8006474:	e7e4      	b.n	8006440 <_printf_float+0x240>
 8006476:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006478:	2b00      	cmp	r3, #0
 800647a:	dc2d      	bgt.n	80064d8 <_printf_float+0x2d8>
 800647c:	2301      	movs	r3, #1
 800647e:	4a26      	ldr	r2, [pc, #152]	; (8006518 <_printf_float+0x318>)
 8006480:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006482:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006484:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006486:	47b0      	blx	r6
 8006488:	1c43      	adds	r3, r0, #1
 800648a:	d100      	bne.n	800648e <_printf_float+0x28e>
 800648c:	e713      	b.n	80062b6 <_printf_float+0xb6>
 800648e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006490:	2b00      	cmp	r3, #0
 8006492:	d105      	bne.n	80064a0 <_printf_float+0x2a0>
 8006494:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006496:	2b00      	cmp	r3, #0
 8006498:	d102      	bne.n	80064a0 <_printf_float+0x2a0>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	07db      	lsls	r3, r3, #31
 800649e:	d5d3      	bpl.n	8006448 <_printf_float+0x248>
 80064a0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80064a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80064a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064aa:	47b0      	blx	r6
 80064ac:	2600      	movs	r6, #0
 80064ae:	1c43      	adds	r3, r0, #1
 80064b0:	d100      	bne.n	80064b4 <_printf_float+0x2b4>
 80064b2:	e700      	b.n	80062b6 <_printf_float+0xb6>
 80064b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064b6:	425b      	negs	r3, r3
 80064b8:	42b3      	cmp	r3, r6
 80064ba:	dc01      	bgt.n	80064c0 <_printf_float+0x2c0>
 80064bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064be:	e792      	b.n	80063e6 <_printf_float+0x1e6>
 80064c0:	0022      	movs	r2, r4
 80064c2:	2301      	movs	r3, #1
 80064c4:	321a      	adds	r2, #26
 80064c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80064c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064ca:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80064cc:	47b8      	blx	r7
 80064ce:	1c43      	adds	r3, r0, #1
 80064d0:	d100      	bne.n	80064d4 <_printf_float+0x2d4>
 80064d2:	e6f0      	b.n	80062b6 <_printf_float+0xb6>
 80064d4:	3601      	adds	r6, #1
 80064d6:	e7ed      	b.n	80064b4 <_printf_float+0x2b4>
 80064d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064da:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80064dc:	429f      	cmp	r7, r3
 80064de:	dd00      	ble.n	80064e2 <_printf_float+0x2e2>
 80064e0:	001f      	movs	r7, r3
 80064e2:	2f00      	cmp	r7, #0
 80064e4:	dd08      	ble.n	80064f8 <_printf_float+0x2f8>
 80064e6:	003b      	movs	r3, r7
 80064e8:	002a      	movs	r2, r5
 80064ea:	990a      	ldr	r1, [sp, #40]	; 0x28
 80064ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064ee:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80064f0:	47b0      	blx	r6
 80064f2:	1c43      	adds	r3, r0, #1
 80064f4:	d100      	bne.n	80064f8 <_printf_float+0x2f8>
 80064f6:	e6de      	b.n	80062b6 <_printf_float+0xb6>
 80064f8:	2300      	movs	r3, #0
 80064fa:	930d      	str	r3, [sp, #52]	; 0x34
 80064fc:	43fb      	mvns	r3, r7
 80064fe:	17db      	asrs	r3, r3, #31
 8006500:	930f      	str	r3, [sp, #60]	; 0x3c
 8006502:	e018      	b.n	8006536 <_printf_float+0x336>
 8006504:	7fefffff 	.word	0x7fefffff
 8006508:	0800a78c 	.word	0x0800a78c
 800650c:	0800a788 	.word	0x0800a788
 8006510:	0800a794 	.word	0x0800a794
 8006514:	0800a790 	.word	0x0800a790
 8006518:	0800a798 	.word	0x0800a798
 800651c:	0022      	movs	r2, r4
 800651e:	2301      	movs	r3, #1
 8006520:	321a      	adds	r2, #26
 8006522:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006524:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006526:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006528:	47b0      	blx	r6
 800652a:	1c43      	adds	r3, r0, #1
 800652c:	d100      	bne.n	8006530 <_printf_float+0x330>
 800652e:	e6c2      	b.n	80062b6 <_printf_float+0xb6>
 8006530:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006532:	3301      	adds	r3, #1
 8006534:	930d      	str	r3, [sp, #52]	; 0x34
 8006536:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006538:	6da6      	ldr	r6, [r4, #88]	; 0x58
 800653a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800653c:	403b      	ands	r3, r7
 800653e:	1af3      	subs	r3, r6, r3
 8006540:	4293      	cmp	r3, r2
 8006542:	dceb      	bgt.n	800651c <_printf_float+0x31c>
 8006544:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006546:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006548:	19ad      	adds	r5, r5, r6
 800654a:	4293      	cmp	r3, r2
 800654c:	db10      	blt.n	8006570 <_printf_float+0x370>
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	07db      	lsls	r3, r3, #31
 8006552:	d40d      	bmi.n	8006570 <_printf_float+0x370>
 8006554:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8006556:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006558:	1bbe      	subs	r6, r7, r6
 800655a:	1aff      	subs	r7, r7, r3
 800655c:	42b7      	cmp	r7, r6
 800655e:	dd00      	ble.n	8006562 <_printf_float+0x362>
 8006560:	0037      	movs	r7, r6
 8006562:	2f00      	cmp	r7, #0
 8006564:	dc0d      	bgt.n	8006582 <_printf_float+0x382>
 8006566:	43fe      	mvns	r6, r7
 8006568:	17f3      	asrs	r3, r6, #31
 800656a:	2500      	movs	r5, #0
 800656c:	930c      	str	r3, [sp, #48]	; 0x30
 800656e:	e01c      	b.n	80065aa <_printf_float+0x3aa>
 8006570:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006572:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006574:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006576:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006578:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800657a:	47b8      	blx	r7
 800657c:	1c43      	adds	r3, r0, #1
 800657e:	d1e9      	bne.n	8006554 <_printf_float+0x354>
 8006580:	e699      	b.n	80062b6 <_printf_float+0xb6>
 8006582:	003b      	movs	r3, r7
 8006584:	002a      	movs	r2, r5
 8006586:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006588:	9809      	ldr	r0, [sp, #36]	; 0x24
 800658a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800658c:	47a8      	blx	r5
 800658e:	1c43      	adds	r3, r0, #1
 8006590:	d1e9      	bne.n	8006566 <_printf_float+0x366>
 8006592:	e690      	b.n	80062b6 <_printf_float+0xb6>
 8006594:	0022      	movs	r2, r4
 8006596:	2301      	movs	r3, #1
 8006598:	321a      	adds	r2, #26
 800659a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800659c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800659e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80065a0:	47b0      	blx	r6
 80065a2:	1c43      	adds	r3, r0, #1
 80065a4:	d100      	bne.n	80065a8 <_printf_float+0x3a8>
 80065a6:	e686      	b.n	80062b6 <_printf_float+0xb6>
 80065a8:	3501      	adds	r5, #1
 80065aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80065ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80065b0:	1a9b      	subs	r3, r3, r2
 80065b2:	003a      	movs	r2, r7
 80065b4:	400a      	ands	r2, r1
 80065b6:	1a9b      	subs	r3, r3, r2
 80065b8:	42ab      	cmp	r3, r5
 80065ba:	dceb      	bgt.n	8006594 <_printf_float+0x394>
 80065bc:	e744      	b.n	8006448 <_printf_float+0x248>
 80065be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	dc02      	bgt.n	80065ca <_printf_float+0x3ca>
 80065c4:	2301      	movs	r3, #1
 80065c6:	421a      	tst	r2, r3
 80065c8:	d032      	beq.n	8006630 <_printf_float+0x430>
 80065ca:	2301      	movs	r3, #1
 80065cc:	002a      	movs	r2, r5
 80065ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80065d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065d2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80065d4:	47b8      	blx	r7
 80065d6:	1c43      	adds	r3, r0, #1
 80065d8:	d100      	bne.n	80065dc <_printf_float+0x3dc>
 80065da:	e66c      	b.n	80062b6 <_printf_float+0xb6>
 80065dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80065e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065e4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80065e6:	3501      	adds	r5, #1
 80065e8:	47b8      	blx	r7
 80065ea:	1c43      	adds	r3, r0, #1
 80065ec:	d100      	bne.n	80065f0 <_printf_float+0x3f0>
 80065ee:	e662      	b.n	80062b6 <_printf_float+0xb6>
 80065f0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80065f2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80065f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065f6:	2200      	movs	r2, #0
 80065f8:	1e5f      	subs	r7, r3, #1
 80065fa:	2300      	movs	r3, #0
 80065fc:	f7f9 ff1a 	bl	8000434 <__aeabi_dcmpeq>
 8006600:	003b      	movs	r3, r7
 8006602:	2800      	cmp	r0, #0
 8006604:	d014      	beq.n	8006630 <_printf_float+0x430>
 8006606:	2500      	movs	r5, #0
 8006608:	e00a      	b.n	8006620 <_printf_float+0x420>
 800660a:	0022      	movs	r2, r4
 800660c:	2301      	movs	r3, #1
 800660e:	321a      	adds	r2, #26
 8006610:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006612:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006614:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006616:	47b8      	blx	r7
 8006618:	1c43      	adds	r3, r0, #1
 800661a:	d100      	bne.n	800661e <_printf_float+0x41e>
 800661c:	e64b      	b.n	80062b6 <_printf_float+0xb6>
 800661e:	3501      	adds	r5, #1
 8006620:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006622:	3b01      	subs	r3, #1
 8006624:	42ab      	cmp	r3, r5
 8006626:	dcf0      	bgt.n	800660a <_printf_float+0x40a>
 8006628:	0022      	movs	r2, r4
 800662a:	0033      	movs	r3, r6
 800662c:	3250      	adds	r2, #80	; 0x50
 800662e:	e6db      	b.n	80063e8 <_printf_float+0x1e8>
 8006630:	002a      	movs	r2, r5
 8006632:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006634:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006636:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006638:	47a8      	blx	r5
 800663a:	1c43      	adds	r3, r0, #1
 800663c:	d1f4      	bne.n	8006628 <_printf_float+0x428>
 800663e:	e63a      	b.n	80062b6 <_printf_float+0xb6>
 8006640:	0022      	movs	r2, r4
 8006642:	2301      	movs	r3, #1
 8006644:	3219      	adds	r2, #25
 8006646:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006648:	9809      	ldr	r0, [sp, #36]	; 0x24
 800664a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800664c:	47b0      	blx	r6
 800664e:	1c43      	adds	r3, r0, #1
 8006650:	d100      	bne.n	8006654 <_printf_float+0x454>
 8006652:	e630      	b.n	80062b6 <_printf_float+0xb6>
 8006654:	3501      	adds	r5, #1
 8006656:	68e3      	ldr	r3, [r4, #12]
 8006658:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800665a:	1a9b      	subs	r3, r3, r2
 800665c:	42ab      	cmp	r3, r5
 800665e:	dcef      	bgt.n	8006640 <_printf_float+0x440>
 8006660:	e6f6      	b.n	8006450 <_printf_float+0x250>
 8006662:	2500      	movs	r5, #0
 8006664:	e7f7      	b.n	8006656 <_printf_float+0x456>
 8006666:	2a00      	cmp	r2, #0
 8006668:	d100      	bne.n	800666c <_printf_float+0x46c>
 800666a:	e689      	b.n	8006380 <_printf_float+0x180>
 800666c:	2100      	movs	r1, #0
 800666e:	9106      	str	r1, [sp, #24]
 8006670:	a912      	add	r1, sp, #72	; 0x48
 8006672:	9105      	str	r1, [sp, #20]
 8006674:	a911      	add	r1, sp, #68	; 0x44
 8006676:	9103      	str	r1, [sp, #12]
 8006678:	2123      	movs	r1, #35	; 0x23
 800667a:	a808      	add	r0, sp, #32
 800667c:	1809      	adds	r1, r1, r0
 800667e:	6023      	str	r3, [r4, #0]
 8006680:	9301      	str	r3, [sp, #4]
 8006682:	9200      	str	r2, [sp, #0]
 8006684:	002b      	movs	r3, r5
 8006686:	9704      	str	r7, [sp, #16]
 8006688:	9102      	str	r1, [sp, #8]
 800668a:	0032      	movs	r2, r6
 800668c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800668e:	f7ff fd1a 	bl	80060c6 <__cvt>
 8006692:	0005      	movs	r5, r0
 8006694:	e645      	b.n	8006322 <_printf_float+0x122>
 8006696:	46c0      	nop			; (mov r8, r8)

08006698 <_printf_common>:
 8006698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800669a:	0015      	movs	r5, r2
 800669c:	9301      	str	r3, [sp, #4]
 800669e:	688a      	ldr	r2, [r1, #8]
 80066a0:	690b      	ldr	r3, [r1, #16]
 80066a2:	9000      	str	r0, [sp, #0]
 80066a4:	000c      	movs	r4, r1
 80066a6:	4293      	cmp	r3, r2
 80066a8:	da00      	bge.n	80066ac <_printf_common+0x14>
 80066aa:	0013      	movs	r3, r2
 80066ac:	0022      	movs	r2, r4
 80066ae:	602b      	str	r3, [r5, #0]
 80066b0:	3243      	adds	r2, #67	; 0x43
 80066b2:	7812      	ldrb	r2, [r2, #0]
 80066b4:	2a00      	cmp	r2, #0
 80066b6:	d001      	beq.n	80066bc <_printf_common+0x24>
 80066b8:	3301      	adds	r3, #1
 80066ba:	602b      	str	r3, [r5, #0]
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	069b      	lsls	r3, r3, #26
 80066c0:	d502      	bpl.n	80066c8 <_printf_common+0x30>
 80066c2:	682b      	ldr	r3, [r5, #0]
 80066c4:	3302      	adds	r3, #2
 80066c6:	602b      	str	r3, [r5, #0]
 80066c8:	2706      	movs	r7, #6
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	401f      	ands	r7, r3
 80066ce:	d027      	beq.n	8006720 <_printf_common+0x88>
 80066d0:	0023      	movs	r3, r4
 80066d2:	3343      	adds	r3, #67	; 0x43
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	1e5a      	subs	r2, r3, #1
 80066d8:	4193      	sbcs	r3, r2
 80066da:	6822      	ldr	r2, [r4, #0]
 80066dc:	0692      	lsls	r2, r2, #26
 80066de:	d430      	bmi.n	8006742 <_printf_common+0xaa>
 80066e0:	0022      	movs	r2, r4
 80066e2:	9901      	ldr	r1, [sp, #4]
 80066e4:	3243      	adds	r2, #67	; 0x43
 80066e6:	9800      	ldr	r0, [sp, #0]
 80066e8:	9e08      	ldr	r6, [sp, #32]
 80066ea:	47b0      	blx	r6
 80066ec:	1c43      	adds	r3, r0, #1
 80066ee:	d025      	beq.n	800673c <_printf_common+0xa4>
 80066f0:	2306      	movs	r3, #6
 80066f2:	6820      	ldr	r0, [r4, #0]
 80066f4:	682a      	ldr	r2, [r5, #0]
 80066f6:	68e1      	ldr	r1, [r4, #12]
 80066f8:	4003      	ands	r3, r0
 80066fa:	2500      	movs	r5, #0
 80066fc:	2b04      	cmp	r3, #4
 80066fe:	d103      	bne.n	8006708 <_printf_common+0x70>
 8006700:	1a8d      	subs	r5, r1, r2
 8006702:	43eb      	mvns	r3, r5
 8006704:	17db      	asrs	r3, r3, #31
 8006706:	401d      	ands	r5, r3
 8006708:	68a3      	ldr	r3, [r4, #8]
 800670a:	6922      	ldr	r2, [r4, #16]
 800670c:	4293      	cmp	r3, r2
 800670e:	dd01      	ble.n	8006714 <_printf_common+0x7c>
 8006710:	1a9b      	subs	r3, r3, r2
 8006712:	18ed      	adds	r5, r5, r3
 8006714:	2700      	movs	r7, #0
 8006716:	42bd      	cmp	r5, r7
 8006718:	d120      	bne.n	800675c <_printf_common+0xc4>
 800671a:	2000      	movs	r0, #0
 800671c:	e010      	b.n	8006740 <_printf_common+0xa8>
 800671e:	3701      	adds	r7, #1
 8006720:	68e3      	ldr	r3, [r4, #12]
 8006722:	682a      	ldr	r2, [r5, #0]
 8006724:	1a9b      	subs	r3, r3, r2
 8006726:	42bb      	cmp	r3, r7
 8006728:	ddd2      	ble.n	80066d0 <_printf_common+0x38>
 800672a:	0022      	movs	r2, r4
 800672c:	2301      	movs	r3, #1
 800672e:	3219      	adds	r2, #25
 8006730:	9901      	ldr	r1, [sp, #4]
 8006732:	9800      	ldr	r0, [sp, #0]
 8006734:	9e08      	ldr	r6, [sp, #32]
 8006736:	47b0      	blx	r6
 8006738:	1c43      	adds	r3, r0, #1
 800673a:	d1f0      	bne.n	800671e <_printf_common+0x86>
 800673c:	2001      	movs	r0, #1
 800673e:	4240      	negs	r0, r0
 8006740:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006742:	2030      	movs	r0, #48	; 0x30
 8006744:	18e1      	adds	r1, r4, r3
 8006746:	3143      	adds	r1, #67	; 0x43
 8006748:	7008      	strb	r0, [r1, #0]
 800674a:	0021      	movs	r1, r4
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	3145      	adds	r1, #69	; 0x45
 8006750:	7809      	ldrb	r1, [r1, #0]
 8006752:	18a2      	adds	r2, r4, r2
 8006754:	3243      	adds	r2, #67	; 0x43
 8006756:	3302      	adds	r3, #2
 8006758:	7011      	strb	r1, [r2, #0]
 800675a:	e7c1      	b.n	80066e0 <_printf_common+0x48>
 800675c:	0022      	movs	r2, r4
 800675e:	2301      	movs	r3, #1
 8006760:	321a      	adds	r2, #26
 8006762:	9901      	ldr	r1, [sp, #4]
 8006764:	9800      	ldr	r0, [sp, #0]
 8006766:	9e08      	ldr	r6, [sp, #32]
 8006768:	47b0      	blx	r6
 800676a:	1c43      	adds	r3, r0, #1
 800676c:	d0e6      	beq.n	800673c <_printf_common+0xa4>
 800676e:	3701      	adds	r7, #1
 8006770:	e7d1      	b.n	8006716 <_printf_common+0x7e>
	...

08006774 <_printf_i>:
 8006774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006776:	b089      	sub	sp, #36	; 0x24
 8006778:	9204      	str	r2, [sp, #16]
 800677a:	000a      	movs	r2, r1
 800677c:	3243      	adds	r2, #67	; 0x43
 800677e:	9305      	str	r3, [sp, #20]
 8006780:	9003      	str	r0, [sp, #12]
 8006782:	9202      	str	r2, [sp, #8]
 8006784:	7e0a      	ldrb	r2, [r1, #24]
 8006786:	000c      	movs	r4, r1
 8006788:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800678a:	2a6e      	cmp	r2, #110	; 0x6e
 800678c:	d100      	bne.n	8006790 <_printf_i+0x1c>
 800678e:	e086      	b.n	800689e <_printf_i+0x12a>
 8006790:	d81f      	bhi.n	80067d2 <_printf_i+0x5e>
 8006792:	2a63      	cmp	r2, #99	; 0x63
 8006794:	d033      	beq.n	80067fe <_printf_i+0x8a>
 8006796:	d808      	bhi.n	80067aa <_printf_i+0x36>
 8006798:	2a00      	cmp	r2, #0
 800679a:	d100      	bne.n	800679e <_printf_i+0x2a>
 800679c:	e08c      	b.n	80068b8 <_printf_i+0x144>
 800679e:	2a58      	cmp	r2, #88	; 0x58
 80067a0:	d04d      	beq.n	800683e <_printf_i+0xca>
 80067a2:	0025      	movs	r5, r4
 80067a4:	3542      	adds	r5, #66	; 0x42
 80067a6:	702a      	strb	r2, [r5, #0]
 80067a8:	e030      	b.n	800680c <_printf_i+0x98>
 80067aa:	2a64      	cmp	r2, #100	; 0x64
 80067ac:	d001      	beq.n	80067b2 <_printf_i+0x3e>
 80067ae:	2a69      	cmp	r2, #105	; 0x69
 80067b0:	d1f7      	bne.n	80067a2 <_printf_i+0x2e>
 80067b2:	6819      	ldr	r1, [r3, #0]
 80067b4:	6825      	ldr	r5, [r4, #0]
 80067b6:	1d0a      	adds	r2, r1, #4
 80067b8:	0628      	lsls	r0, r5, #24
 80067ba:	d529      	bpl.n	8006810 <_printf_i+0x9c>
 80067bc:	6808      	ldr	r0, [r1, #0]
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	2800      	cmp	r0, #0
 80067c2:	da03      	bge.n	80067cc <_printf_i+0x58>
 80067c4:	232d      	movs	r3, #45	; 0x2d
 80067c6:	9a02      	ldr	r2, [sp, #8]
 80067c8:	4240      	negs	r0, r0
 80067ca:	7013      	strb	r3, [r2, #0]
 80067cc:	4e6b      	ldr	r6, [pc, #428]	; (800697c <_printf_i+0x208>)
 80067ce:	270a      	movs	r7, #10
 80067d0:	e04f      	b.n	8006872 <_printf_i+0xfe>
 80067d2:	2a73      	cmp	r2, #115	; 0x73
 80067d4:	d074      	beq.n	80068c0 <_printf_i+0x14c>
 80067d6:	d808      	bhi.n	80067ea <_printf_i+0x76>
 80067d8:	2a6f      	cmp	r2, #111	; 0x6f
 80067da:	d01f      	beq.n	800681c <_printf_i+0xa8>
 80067dc:	2a70      	cmp	r2, #112	; 0x70
 80067de:	d1e0      	bne.n	80067a2 <_printf_i+0x2e>
 80067e0:	2220      	movs	r2, #32
 80067e2:	6809      	ldr	r1, [r1, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	6022      	str	r2, [r4, #0]
 80067e8:	e003      	b.n	80067f2 <_printf_i+0x7e>
 80067ea:	2a75      	cmp	r2, #117	; 0x75
 80067ec:	d016      	beq.n	800681c <_printf_i+0xa8>
 80067ee:	2a78      	cmp	r2, #120	; 0x78
 80067f0:	d1d7      	bne.n	80067a2 <_printf_i+0x2e>
 80067f2:	0022      	movs	r2, r4
 80067f4:	2178      	movs	r1, #120	; 0x78
 80067f6:	3245      	adds	r2, #69	; 0x45
 80067f8:	7011      	strb	r1, [r2, #0]
 80067fa:	4e61      	ldr	r6, [pc, #388]	; (8006980 <_printf_i+0x20c>)
 80067fc:	e022      	b.n	8006844 <_printf_i+0xd0>
 80067fe:	0025      	movs	r5, r4
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	3542      	adds	r5, #66	; 0x42
 8006804:	1d11      	adds	r1, r2, #4
 8006806:	6019      	str	r1, [r3, #0]
 8006808:	6813      	ldr	r3, [r2, #0]
 800680a:	702b      	strb	r3, [r5, #0]
 800680c:	2301      	movs	r3, #1
 800680e:	e065      	b.n	80068dc <_printf_i+0x168>
 8006810:	6808      	ldr	r0, [r1, #0]
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	0669      	lsls	r1, r5, #25
 8006816:	d5d3      	bpl.n	80067c0 <_printf_i+0x4c>
 8006818:	b200      	sxth	r0, r0
 800681a:	e7d1      	b.n	80067c0 <_printf_i+0x4c>
 800681c:	6819      	ldr	r1, [r3, #0]
 800681e:	6825      	ldr	r5, [r4, #0]
 8006820:	1d08      	adds	r0, r1, #4
 8006822:	6018      	str	r0, [r3, #0]
 8006824:	6808      	ldr	r0, [r1, #0]
 8006826:	062e      	lsls	r6, r5, #24
 8006828:	d505      	bpl.n	8006836 <_printf_i+0xc2>
 800682a:	4e54      	ldr	r6, [pc, #336]	; (800697c <_printf_i+0x208>)
 800682c:	2708      	movs	r7, #8
 800682e:	2a6f      	cmp	r2, #111	; 0x6f
 8006830:	d01b      	beq.n	800686a <_printf_i+0xf6>
 8006832:	270a      	movs	r7, #10
 8006834:	e019      	b.n	800686a <_printf_i+0xf6>
 8006836:	066d      	lsls	r5, r5, #25
 8006838:	d5f7      	bpl.n	800682a <_printf_i+0xb6>
 800683a:	b280      	uxth	r0, r0
 800683c:	e7f5      	b.n	800682a <_printf_i+0xb6>
 800683e:	3145      	adds	r1, #69	; 0x45
 8006840:	4e4e      	ldr	r6, [pc, #312]	; (800697c <_printf_i+0x208>)
 8006842:	700a      	strb	r2, [r1, #0]
 8006844:	6818      	ldr	r0, [r3, #0]
 8006846:	6822      	ldr	r2, [r4, #0]
 8006848:	1d01      	adds	r1, r0, #4
 800684a:	6800      	ldr	r0, [r0, #0]
 800684c:	6019      	str	r1, [r3, #0]
 800684e:	0615      	lsls	r5, r2, #24
 8006850:	d521      	bpl.n	8006896 <_printf_i+0x122>
 8006852:	07d3      	lsls	r3, r2, #31
 8006854:	d502      	bpl.n	800685c <_printf_i+0xe8>
 8006856:	2320      	movs	r3, #32
 8006858:	431a      	orrs	r2, r3
 800685a:	6022      	str	r2, [r4, #0]
 800685c:	2710      	movs	r7, #16
 800685e:	2800      	cmp	r0, #0
 8006860:	d103      	bne.n	800686a <_printf_i+0xf6>
 8006862:	2320      	movs	r3, #32
 8006864:	6822      	ldr	r2, [r4, #0]
 8006866:	439a      	bics	r2, r3
 8006868:	6022      	str	r2, [r4, #0]
 800686a:	0023      	movs	r3, r4
 800686c:	2200      	movs	r2, #0
 800686e:	3343      	adds	r3, #67	; 0x43
 8006870:	701a      	strb	r2, [r3, #0]
 8006872:	6863      	ldr	r3, [r4, #4]
 8006874:	60a3      	str	r3, [r4, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	db58      	blt.n	800692c <_printf_i+0x1b8>
 800687a:	2204      	movs	r2, #4
 800687c:	6821      	ldr	r1, [r4, #0]
 800687e:	4391      	bics	r1, r2
 8006880:	6021      	str	r1, [r4, #0]
 8006882:	2800      	cmp	r0, #0
 8006884:	d154      	bne.n	8006930 <_printf_i+0x1bc>
 8006886:	9d02      	ldr	r5, [sp, #8]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d05a      	beq.n	8006942 <_printf_i+0x1ce>
 800688c:	0025      	movs	r5, r4
 800688e:	7833      	ldrb	r3, [r6, #0]
 8006890:	3542      	adds	r5, #66	; 0x42
 8006892:	702b      	strb	r3, [r5, #0]
 8006894:	e055      	b.n	8006942 <_printf_i+0x1ce>
 8006896:	0655      	lsls	r5, r2, #25
 8006898:	d5db      	bpl.n	8006852 <_printf_i+0xde>
 800689a:	b280      	uxth	r0, r0
 800689c:	e7d9      	b.n	8006852 <_printf_i+0xde>
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	680d      	ldr	r5, [r1, #0]
 80068a2:	1d10      	adds	r0, r2, #4
 80068a4:	6949      	ldr	r1, [r1, #20]
 80068a6:	6018      	str	r0, [r3, #0]
 80068a8:	6813      	ldr	r3, [r2, #0]
 80068aa:	062e      	lsls	r6, r5, #24
 80068ac:	d501      	bpl.n	80068b2 <_printf_i+0x13e>
 80068ae:	6019      	str	r1, [r3, #0]
 80068b0:	e002      	b.n	80068b8 <_printf_i+0x144>
 80068b2:	066d      	lsls	r5, r5, #25
 80068b4:	d5fb      	bpl.n	80068ae <_printf_i+0x13a>
 80068b6:	8019      	strh	r1, [r3, #0]
 80068b8:	2300      	movs	r3, #0
 80068ba:	9d02      	ldr	r5, [sp, #8]
 80068bc:	6123      	str	r3, [r4, #16]
 80068be:	e04f      	b.n	8006960 <_printf_i+0x1ec>
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	1d11      	adds	r1, r2, #4
 80068c4:	6019      	str	r1, [r3, #0]
 80068c6:	6815      	ldr	r5, [r2, #0]
 80068c8:	2100      	movs	r1, #0
 80068ca:	6862      	ldr	r2, [r4, #4]
 80068cc:	0028      	movs	r0, r5
 80068ce:	f002 fc0f 	bl	80090f0 <memchr>
 80068d2:	2800      	cmp	r0, #0
 80068d4:	d001      	beq.n	80068da <_printf_i+0x166>
 80068d6:	1b40      	subs	r0, r0, r5
 80068d8:	6060      	str	r0, [r4, #4]
 80068da:	6863      	ldr	r3, [r4, #4]
 80068dc:	6123      	str	r3, [r4, #16]
 80068de:	2300      	movs	r3, #0
 80068e0:	9a02      	ldr	r2, [sp, #8]
 80068e2:	7013      	strb	r3, [r2, #0]
 80068e4:	e03c      	b.n	8006960 <_printf_i+0x1ec>
 80068e6:	6923      	ldr	r3, [r4, #16]
 80068e8:	002a      	movs	r2, r5
 80068ea:	9904      	ldr	r1, [sp, #16]
 80068ec:	9803      	ldr	r0, [sp, #12]
 80068ee:	9d05      	ldr	r5, [sp, #20]
 80068f0:	47a8      	blx	r5
 80068f2:	1c43      	adds	r3, r0, #1
 80068f4:	d03e      	beq.n	8006974 <_printf_i+0x200>
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	079b      	lsls	r3, r3, #30
 80068fa:	d415      	bmi.n	8006928 <_printf_i+0x1b4>
 80068fc:	9b07      	ldr	r3, [sp, #28]
 80068fe:	68e0      	ldr	r0, [r4, #12]
 8006900:	4298      	cmp	r0, r3
 8006902:	da39      	bge.n	8006978 <_printf_i+0x204>
 8006904:	0018      	movs	r0, r3
 8006906:	e037      	b.n	8006978 <_printf_i+0x204>
 8006908:	0022      	movs	r2, r4
 800690a:	2301      	movs	r3, #1
 800690c:	3219      	adds	r2, #25
 800690e:	9904      	ldr	r1, [sp, #16]
 8006910:	9803      	ldr	r0, [sp, #12]
 8006912:	9e05      	ldr	r6, [sp, #20]
 8006914:	47b0      	blx	r6
 8006916:	1c43      	adds	r3, r0, #1
 8006918:	d02c      	beq.n	8006974 <_printf_i+0x200>
 800691a:	3501      	adds	r5, #1
 800691c:	68e3      	ldr	r3, [r4, #12]
 800691e:	9a07      	ldr	r2, [sp, #28]
 8006920:	1a9b      	subs	r3, r3, r2
 8006922:	42ab      	cmp	r3, r5
 8006924:	dcf0      	bgt.n	8006908 <_printf_i+0x194>
 8006926:	e7e9      	b.n	80068fc <_printf_i+0x188>
 8006928:	2500      	movs	r5, #0
 800692a:	e7f7      	b.n	800691c <_printf_i+0x1a8>
 800692c:	2800      	cmp	r0, #0
 800692e:	d0ad      	beq.n	800688c <_printf_i+0x118>
 8006930:	9d02      	ldr	r5, [sp, #8]
 8006932:	0039      	movs	r1, r7
 8006934:	f7f9 fc7e 	bl	8000234 <__aeabi_uidivmod>
 8006938:	5c73      	ldrb	r3, [r6, r1]
 800693a:	3d01      	subs	r5, #1
 800693c:	702b      	strb	r3, [r5, #0]
 800693e:	2800      	cmp	r0, #0
 8006940:	d1f7      	bne.n	8006932 <_printf_i+0x1be>
 8006942:	2f08      	cmp	r7, #8
 8006944:	d109      	bne.n	800695a <_printf_i+0x1e6>
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	07db      	lsls	r3, r3, #31
 800694a:	d506      	bpl.n	800695a <_printf_i+0x1e6>
 800694c:	6863      	ldr	r3, [r4, #4]
 800694e:	6922      	ldr	r2, [r4, #16]
 8006950:	4293      	cmp	r3, r2
 8006952:	dc02      	bgt.n	800695a <_printf_i+0x1e6>
 8006954:	2330      	movs	r3, #48	; 0x30
 8006956:	3d01      	subs	r5, #1
 8006958:	702b      	strb	r3, [r5, #0]
 800695a:	9b02      	ldr	r3, [sp, #8]
 800695c:	1b5b      	subs	r3, r3, r5
 800695e:	6123      	str	r3, [r4, #16]
 8006960:	9b05      	ldr	r3, [sp, #20]
 8006962:	aa07      	add	r2, sp, #28
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	0021      	movs	r1, r4
 8006968:	9b04      	ldr	r3, [sp, #16]
 800696a:	9803      	ldr	r0, [sp, #12]
 800696c:	f7ff fe94 	bl	8006698 <_printf_common>
 8006970:	1c43      	adds	r3, r0, #1
 8006972:	d1b8      	bne.n	80068e6 <_printf_i+0x172>
 8006974:	2001      	movs	r0, #1
 8006976:	4240      	negs	r0, r0
 8006978:	b009      	add	sp, #36	; 0x24
 800697a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800697c:	0800a79a 	.word	0x0800a79a
 8006980:	0800a7ab 	.word	0x0800a7ab

08006984 <_scanf_float>:
 8006984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006986:	b08b      	sub	sp, #44	; 0x2c
 8006988:	9002      	str	r0, [sp, #8]
 800698a:	9200      	str	r2, [sp, #0]
 800698c:	2000      	movs	r0, #0
 800698e:	22ae      	movs	r2, #174	; 0xae
 8006990:	9305      	str	r3, [sp, #20]
 8006992:	688b      	ldr	r3, [r1, #8]
 8006994:	000e      	movs	r6, r1
 8006996:	1e59      	subs	r1, r3, #1
 8006998:	0052      	lsls	r2, r2, #1
 800699a:	9004      	str	r0, [sp, #16]
 800699c:	4291      	cmp	r1, r2
 800699e:	d905      	bls.n	80069ac <_scanf_float+0x28>
 80069a0:	3b5e      	subs	r3, #94	; 0x5e
 80069a2:	3bff      	subs	r3, #255	; 0xff
 80069a4:	9304      	str	r3, [sp, #16]
 80069a6:	235e      	movs	r3, #94	; 0x5e
 80069a8:	33ff      	adds	r3, #255	; 0xff
 80069aa:	60b3      	str	r3, [r6, #8]
 80069ac:	23f0      	movs	r3, #240	; 0xf0
 80069ae:	6832      	ldr	r2, [r6, #0]
 80069b0:	00db      	lsls	r3, r3, #3
 80069b2:	4313      	orrs	r3, r2
 80069b4:	6033      	str	r3, [r6, #0]
 80069b6:	0033      	movs	r3, r6
 80069b8:	2700      	movs	r7, #0
 80069ba:	331c      	adds	r3, #28
 80069bc:	001d      	movs	r5, r3
 80069be:	003c      	movs	r4, r7
 80069c0:	9303      	str	r3, [sp, #12]
 80069c2:	9708      	str	r7, [sp, #32]
 80069c4:	9707      	str	r7, [sp, #28]
 80069c6:	9701      	str	r7, [sp, #4]
 80069c8:	9706      	str	r7, [sp, #24]
 80069ca:	68b2      	ldr	r2, [r6, #8]
 80069cc:	2a00      	cmp	r2, #0
 80069ce:	d013      	beq.n	80069f8 <_scanf_float+0x74>
 80069d0:	9b00      	ldr	r3, [sp, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	9309      	str	r3, [sp, #36]	; 0x24
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	2b49      	cmp	r3, #73	; 0x49
 80069da:	d100      	bne.n	80069de <_scanf_float+0x5a>
 80069dc:	e07c      	b.n	8006ad8 <_scanf_float+0x154>
 80069de:	d854      	bhi.n	8006a8a <_scanf_float+0x106>
 80069e0:	2b39      	cmp	r3, #57	; 0x39
 80069e2:	d847      	bhi.n	8006a74 <_scanf_float+0xf0>
 80069e4:	2b31      	cmp	r3, #49	; 0x31
 80069e6:	d300      	bcc.n	80069ea <_scanf_float+0x66>
 80069e8:	e094      	b.n	8006b14 <_scanf_float+0x190>
 80069ea:	2b2d      	cmp	r3, #45	; 0x2d
 80069ec:	d100      	bne.n	80069f0 <_scanf_float+0x6c>
 80069ee:	e09c      	b.n	8006b2a <_scanf_float+0x1a6>
 80069f0:	d817      	bhi.n	8006a22 <_scanf_float+0x9e>
 80069f2:	2b2b      	cmp	r3, #43	; 0x2b
 80069f4:	d100      	bne.n	80069f8 <_scanf_float+0x74>
 80069f6:	e098      	b.n	8006b2a <_scanf_float+0x1a6>
 80069f8:	9b01      	ldr	r3, [sp, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <_scanf_float+0x82>
 80069fe:	6832      	ldr	r2, [r6, #0]
 8006a00:	4b9b      	ldr	r3, [pc, #620]	; (8006c70 <_scanf_float+0x2ec>)
 8006a02:	4013      	ands	r3, r2
 8006a04:	6033      	str	r3, [r6, #0]
 8006a06:	3c01      	subs	r4, #1
 8006a08:	2c01      	cmp	r4, #1
 8006a0a:	d900      	bls.n	8006a0e <_scanf_float+0x8a>
 8006a0c:	e0ee      	b.n	8006bec <_scanf_float+0x268>
 8006a0e:	24be      	movs	r4, #190	; 0xbe
 8006a10:	0064      	lsls	r4, r4, #1
 8006a12:	9b03      	ldr	r3, [sp, #12]
 8006a14:	429d      	cmp	r5, r3
 8006a16:	d900      	bls.n	8006a1a <_scanf_float+0x96>
 8006a18:	e0de      	b.n	8006bd8 <_scanf_float+0x254>
 8006a1a:	2701      	movs	r7, #1
 8006a1c:	0038      	movs	r0, r7
 8006a1e:	b00b      	add	sp, #44	; 0x2c
 8006a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a22:	2b2e      	cmp	r3, #46	; 0x2e
 8006a24:	d100      	bne.n	8006a28 <_scanf_float+0xa4>
 8006a26:	e0a2      	b.n	8006b6e <_scanf_float+0x1ea>
 8006a28:	2b30      	cmp	r3, #48	; 0x30
 8006a2a:	d1e5      	bne.n	80069f8 <_scanf_float+0x74>
 8006a2c:	6831      	ldr	r1, [r6, #0]
 8006a2e:	05c8      	lsls	r0, r1, #23
 8006a30:	d570      	bpl.n	8006b14 <_scanf_float+0x190>
 8006a32:	2380      	movs	r3, #128	; 0x80
 8006a34:	4399      	bics	r1, r3
 8006a36:	9b01      	ldr	r3, [sp, #4]
 8006a38:	6031      	str	r1, [r6, #0]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	9301      	str	r3, [sp, #4]
 8006a3e:	9b04      	ldr	r3, [sp, #16]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <_scanf_float+0xc8>
 8006a44:	3b01      	subs	r3, #1
 8006a46:	3201      	adds	r2, #1
 8006a48:	9304      	str	r3, [sp, #16]
 8006a4a:	60b2      	str	r2, [r6, #8]
 8006a4c:	68b3      	ldr	r3, [r6, #8]
 8006a4e:	9a00      	ldr	r2, [sp, #0]
 8006a50:	3b01      	subs	r3, #1
 8006a52:	60b3      	str	r3, [r6, #8]
 8006a54:	6933      	ldr	r3, [r6, #16]
 8006a56:	3301      	adds	r3, #1
 8006a58:	6133      	str	r3, [r6, #16]
 8006a5a:	9b00      	ldr	r3, [sp, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a60:	3b01      	subs	r3, #1
 8006a62:	6053      	str	r3, [r2, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	dc00      	bgt.n	8006a6a <_scanf_float+0xe6>
 8006a68:	e0ac      	b.n	8006bc4 <_scanf_float+0x240>
 8006a6a:	6813      	ldr	r3, [r2, #0]
 8006a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a6e:	3301      	adds	r3, #1
 8006a70:	6013      	str	r3, [r2, #0]
 8006a72:	e7aa      	b.n	80069ca <_scanf_float+0x46>
 8006a74:	2b45      	cmp	r3, #69	; 0x45
 8006a76:	d100      	bne.n	8006a7a <_scanf_float+0xf6>
 8006a78:	e083      	b.n	8006b82 <_scanf_float+0x1fe>
 8006a7a:	2b46      	cmp	r3, #70	; 0x46
 8006a7c:	d06d      	beq.n	8006b5a <_scanf_float+0x1d6>
 8006a7e:	2b41      	cmp	r3, #65	; 0x41
 8006a80:	d1ba      	bne.n	80069f8 <_scanf_float+0x74>
 8006a82:	2c01      	cmp	r4, #1
 8006a84:	d1b8      	bne.n	80069f8 <_scanf_float+0x74>
 8006a86:	2402      	movs	r4, #2
 8006a88:	e04c      	b.n	8006b24 <_scanf_float+0x1a0>
 8006a8a:	2b65      	cmp	r3, #101	; 0x65
 8006a8c:	d079      	beq.n	8006b82 <_scanf_float+0x1fe>
 8006a8e:	d81b      	bhi.n	8006ac8 <_scanf_float+0x144>
 8006a90:	2b54      	cmp	r3, #84	; 0x54
 8006a92:	d067      	beq.n	8006b64 <_scanf_float+0x1e0>
 8006a94:	d813      	bhi.n	8006abe <_scanf_float+0x13a>
 8006a96:	2b4e      	cmp	r3, #78	; 0x4e
 8006a98:	d1ae      	bne.n	80069f8 <_scanf_float+0x74>
 8006a9a:	2c00      	cmp	r4, #0
 8006a9c:	d14c      	bne.n	8006b38 <_scanf_float+0x1b4>
 8006a9e:	9a01      	ldr	r2, [sp, #4]
 8006aa0:	2a00      	cmp	r2, #0
 8006aa2:	d14b      	bne.n	8006b3c <_scanf_float+0x1b8>
 8006aa4:	21e0      	movs	r1, #224	; 0xe0
 8006aa6:	20e0      	movs	r0, #224	; 0xe0
 8006aa8:	6832      	ldr	r2, [r6, #0]
 8006aaa:	00c9      	lsls	r1, r1, #3
 8006aac:	4011      	ands	r1, r2
 8006aae:	00c0      	lsls	r0, r0, #3
 8006ab0:	4281      	cmp	r1, r0
 8006ab2:	d143      	bne.n	8006b3c <_scanf_float+0x1b8>
 8006ab4:	496f      	ldr	r1, [pc, #444]	; (8006c74 <_scanf_float+0x2f0>)
 8006ab6:	3401      	adds	r4, #1
 8006ab8:	400a      	ands	r2, r1
 8006aba:	6032      	str	r2, [r6, #0]
 8006abc:	e032      	b.n	8006b24 <_scanf_float+0x1a0>
 8006abe:	2b59      	cmp	r3, #89	; 0x59
 8006ac0:	d023      	beq.n	8006b0a <_scanf_float+0x186>
 8006ac2:	2b61      	cmp	r3, #97	; 0x61
 8006ac4:	d0dd      	beq.n	8006a82 <_scanf_float+0xfe>
 8006ac6:	e797      	b.n	80069f8 <_scanf_float+0x74>
 8006ac8:	2b6e      	cmp	r3, #110	; 0x6e
 8006aca:	d0e6      	beq.n	8006a9a <_scanf_float+0x116>
 8006acc:	d818      	bhi.n	8006b00 <_scanf_float+0x17c>
 8006ace:	2b66      	cmp	r3, #102	; 0x66
 8006ad0:	d043      	beq.n	8006b5a <_scanf_float+0x1d6>
 8006ad2:	2b69      	cmp	r3, #105	; 0x69
 8006ad4:	d000      	beq.n	8006ad8 <_scanf_float+0x154>
 8006ad6:	e78f      	b.n	80069f8 <_scanf_float+0x74>
 8006ad8:	2f00      	cmp	r7, #0
 8006ada:	d137      	bne.n	8006b4c <_scanf_float+0x1c8>
 8006adc:	9a01      	ldr	r2, [sp, #4]
 8006ade:	2a00      	cmp	r2, #0
 8006ae0:	d000      	beq.n	8006ae4 <_scanf_float+0x160>
 8006ae2:	e78c      	b.n	80069fe <_scanf_float+0x7a>
 8006ae4:	21e0      	movs	r1, #224	; 0xe0
 8006ae6:	20e0      	movs	r0, #224	; 0xe0
 8006ae8:	6832      	ldr	r2, [r6, #0]
 8006aea:	00c9      	lsls	r1, r1, #3
 8006aec:	4011      	ands	r1, r2
 8006aee:	00c0      	lsls	r0, r0, #3
 8006af0:	4281      	cmp	r1, r0
 8006af2:	d000      	beq.n	8006af6 <_scanf_float+0x172>
 8006af4:	e787      	b.n	8006a06 <_scanf_float+0x82>
 8006af6:	495f      	ldr	r1, [pc, #380]	; (8006c74 <_scanf_float+0x2f0>)
 8006af8:	3701      	adds	r7, #1
 8006afa:	400a      	ands	r2, r1
 8006afc:	6032      	str	r2, [r6, #0]
 8006afe:	e011      	b.n	8006b24 <_scanf_float+0x1a0>
 8006b00:	2b74      	cmp	r3, #116	; 0x74
 8006b02:	d02f      	beq.n	8006b64 <_scanf_float+0x1e0>
 8006b04:	2b79      	cmp	r3, #121	; 0x79
 8006b06:	d000      	beq.n	8006b0a <_scanf_float+0x186>
 8006b08:	e776      	b.n	80069f8 <_scanf_float+0x74>
 8006b0a:	2f07      	cmp	r7, #7
 8006b0c:	d000      	beq.n	8006b10 <_scanf_float+0x18c>
 8006b0e:	e773      	b.n	80069f8 <_scanf_float+0x74>
 8006b10:	2708      	movs	r7, #8
 8006b12:	e007      	b.n	8006b24 <_scanf_float+0x1a0>
 8006b14:	19e2      	adds	r2, r4, r7
 8006b16:	2a00      	cmp	r2, #0
 8006b18:	d000      	beq.n	8006b1c <_scanf_float+0x198>
 8006b1a:	e76d      	b.n	80069f8 <_scanf_float+0x74>
 8006b1c:	4a56      	ldr	r2, [pc, #344]	; (8006c78 <_scanf_float+0x2f4>)
 8006b1e:	6831      	ldr	r1, [r6, #0]
 8006b20:	400a      	ands	r2, r1
 8006b22:	6032      	str	r2, [r6, #0]
 8006b24:	702b      	strb	r3, [r5, #0]
 8006b26:	3501      	adds	r5, #1
 8006b28:	e790      	b.n	8006a4c <_scanf_float+0xc8>
 8006b2a:	2180      	movs	r1, #128	; 0x80
 8006b2c:	6832      	ldr	r2, [r6, #0]
 8006b2e:	420a      	tst	r2, r1
 8006b30:	d100      	bne.n	8006b34 <_scanf_float+0x1b0>
 8006b32:	e761      	b.n	80069f8 <_scanf_float+0x74>
 8006b34:	438a      	bics	r2, r1
 8006b36:	e7f4      	b.n	8006b22 <_scanf_float+0x19e>
 8006b38:	2c02      	cmp	r4, #2
 8006b3a:	d041      	beq.n	8006bc0 <_scanf_float+0x23c>
 8006b3c:	2f01      	cmp	r7, #1
 8006b3e:	d002      	beq.n	8006b46 <_scanf_float+0x1c2>
 8006b40:	2f04      	cmp	r7, #4
 8006b42:	d000      	beq.n	8006b46 <_scanf_float+0x1c2>
 8006b44:	e758      	b.n	80069f8 <_scanf_float+0x74>
 8006b46:	3701      	adds	r7, #1
 8006b48:	b2ff      	uxtb	r7, r7
 8006b4a:	e7eb      	b.n	8006b24 <_scanf_float+0x1a0>
 8006b4c:	2102      	movs	r1, #2
 8006b4e:	1efa      	subs	r2, r7, #3
 8006b50:	438a      	bics	r2, r1
 8006b52:	b2d2      	uxtb	r2, r2
 8006b54:	2a00      	cmp	r2, #0
 8006b56:	d0f6      	beq.n	8006b46 <_scanf_float+0x1c2>
 8006b58:	e74e      	b.n	80069f8 <_scanf_float+0x74>
 8006b5a:	2f02      	cmp	r7, #2
 8006b5c:	d000      	beq.n	8006b60 <_scanf_float+0x1dc>
 8006b5e:	e74b      	b.n	80069f8 <_scanf_float+0x74>
 8006b60:	2703      	movs	r7, #3
 8006b62:	e7df      	b.n	8006b24 <_scanf_float+0x1a0>
 8006b64:	2f06      	cmp	r7, #6
 8006b66:	d000      	beq.n	8006b6a <_scanf_float+0x1e6>
 8006b68:	e746      	b.n	80069f8 <_scanf_float+0x74>
 8006b6a:	2707      	movs	r7, #7
 8006b6c:	e7da      	b.n	8006b24 <_scanf_float+0x1a0>
 8006b6e:	6832      	ldr	r2, [r6, #0]
 8006b70:	0591      	lsls	r1, r2, #22
 8006b72:	d400      	bmi.n	8006b76 <_scanf_float+0x1f2>
 8006b74:	e740      	b.n	80069f8 <_scanf_float+0x74>
 8006b76:	4941      	ldr	r1, [pc, #260]	; (8006c7c <_scanf_float+0x2f8>)
 8006b78:	400a      	ands	r2, r1
 8006b7a:	6032      	str	r2, [r6, #0]
 8006b7c:	9a01      	ldr	r2, [sp, #4]
 8006b7e:	9206      	str	r2, [sp, #24]
 8006b80:	e7d0      	b.n	8006b24 <_scanf_float+0x1a0>
 8006b82:	21a0      	movs	r1, #160	; 0xa0
 8006b84:	2080      	movs	r0, #128	; 0x80
 8006b86:	6832      	ldr	r2, [r6, #0]
 8006b88:	00c9      	lsls	r1, r1, #3
 8006b8a:	4011      	ands	r1, r2
 8006b8c:	00c0      	lsls	r0, r0, #3
 8006b8e:	4281      	cmp	r1, r0
 8006b90:	d006      	beq.n	8006ba0 <_scanf_float+0x21c>
 8006b92:	4202      	tst	r2, r0
 8006b94:	d100      	bne.n	8006b98 <_scanf_float+0x214>
 8006b96:	e72f      	b.n	80069f8 <_scanf_float+0x74>
 8006b98:	9901      	ldr	r1, [sp, #4]
 8006b9a:	2900      	cmp	r1, #0
 8006b9c:	d100      	bne.n	8006ba0 <_scanf_float+0x21c>
 8006b9e:	e732      	b.n	8006a06 <_scanf_float+0x82>
 8006ba0:	0591      	lsls	r1, r2, #22
 8006ba2:	d404      	bmi.n	8006bae <_scanf_float+0x22a>
 8006ba4:	9901      	ldr	r1, [sp, #4]
 8006ba6:	9806      	ldr	r0, [sp, #24]
 8006ba8:	9508      	str	r5, [sp, #32]
 8006baa:	1a09      	subs	r1, r1, r0
 8006bac:	9107      	str	r1, [sp, #28]
 8006bae:	4931      	ldr	r1, [pc, #196]	; (8006c74 <_scanf_float+0x2f0>)
 8006bb0:	400a      	ands	r2, r1
 8006bb2:	21c0      	movs	r1, #192	; 0xc0
 8006bb4:	0049      	lsls	r1, r1, #1
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	6032      	str	r2, [r6, #0]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	9201      	str	r2, [sp, #4]
 8006bbe:	e7b1      	b.n	8006b24 <_scanf_float+0x1a0>
 8006bc0:	2403      	movs	r4, #3
 8006bc2:	e7af      	b.n	8006b24 <_scanf_float+0x1a0>
 8006bc4:	23c0      	movs	r3, #192	; 0xc0
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	58f3      	ldr	r3, [r6, r3]
 8006bca:	9900      	ldr	r1, [sp, #0]
 8006bcc:	9802      	ldr	r0, [sp, #8]
 8006bce:	4798      	blx	r3
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	d100      	bne.n	8006bd6 <_scanf_float+0x252>
 8006bd4:	e6f9      	b.n	80069ca <_scanf_float+0x46>
 8006bd6:	e70f      	b.n	80069f8 <_scanf_float+0x74>
 8006bd8:	3d01      	subs	r5, #1
 8006bda:	5933      	ldr	r3, [r6, r4]
 8006bdc:	7829      	ldrb	r1, [r5, #0]
 8006bde:	9a00      	ldr	r2, [sp, #0]
 8006be0:	9802      	ldr	r0, [sp, #8]
 8006be2:	4798      	blx	r3
 8006be4:	6933      	ldr	r3, [r6, #16]
 8006be6:	3b01      	subs	r3, #1
 8006be8:	6133      	str	r3, [r6, #16]
 8006bea:	e712      	b.n	8006a12 <_scanf_float+0x8e>
 8006bec:	1e7b      	subs	r3, r7, #1
 8006bee:	2b06      	cmp	r3, #6
 8006bf0:	d826      	bhi.n	8006c40 <_scanf_float+0x2bc>
 8006bf2:	2f02      	cmp	r7, #2
 8006bf4:	d839      	bhi.n	8006c6a <_scanf_float+0x2e6>
 8006bf6:	24be      	movs	r4, #190	; 0xbe
 8006bf8:	0064      	lsls	r4, r4, #1
 8006bfa:	9b03      	ldr	r3, [sp, #12]
 8006bfc:	429d      	cmp	r5, r3
 8006bfe:	d800      	bhi.n	8006c02 <_scanf_float+0x27e>
 8006c00:	e70b      	b.n	8006a1a <_scanf_float+0x96>
 8006c02:	3d01      	subs	r5, #1
 8006c04:	5933      	ldr	r3, [r6, r4]
 8006c06:	7829      	ldrb	r1, [r5, #0]
 8006c08:	9a00      	ldr	r2, [sp, #0]
 8006c0a:	9802      	ldr	r0, [sp, #8]
 8006c0c:	4798      	blx	r3
 8006c0e:	6933      	ldr	r3, [r6, #16]
 8006c10:	3b01      	subs	r3, #1
 8006c12:	6133      	str	r3, [r6, #16]
 8006c14:	e7f1      	b.n	8006bfa <_scanf_float+0x276>
 8006c16:	9b04      	ldr	r3, [sp, #16]
 8006c18:	9a00      	ldr	r2, [sp, #0]
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	9304      	str	r3, [sp, #16]
 8006c1e:	7819      	ldrb	r1, [r3, #0]
 8006c20:	23be      	movs	r3, #190	; 0xbe
 8006c22:	005b      	lsls	r3, r3, #1
 8006c24:	58f3      	ldr	r3, [r6, r3]
 8006c26:	9802      	ldr	r0, [sp, #8]
 8006c28:	9309      	str	r3, [sp, #36]	; 0x24
 8006c2a:	4798      	blx	r3
 8006c2c:	6933      	ldr	r3, [r6, #16]
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	6133      	str	r3, [r6, #16]
 8006c32:	3c01      	subs	r4, #1
 8006c34:	b2e4      	uxtb	r4, r4
 8006c36:	2c02      	cmp	r4, #2
 8006c38:	d1ed      	bne.n	8006c16 <_scanf_float+0x292>
 8006c3a:	3f03      	subs	r7, #3
 8006c3c:	b2ff      	uxtb	r7, r7
 8006c3e:	1bed      	subs	r5, r5, r7
 8006c40:	6833      	ldr	r3, [r6, #0]
 8006c42:	05da      	lsls	r2, r3, #23
 8006c44:	d537      	bpl.n	8006cb6 <_scanf_float+0x332>
 8006c46:	055b      	lsls	r3, r3, #21
 8006c48:	d51a      	bpl.n	8006c80 <_scanf_float+0x2fc>
 8006c4a:	24be      	movs	r4, #190	; 0xbe
 8006c4c:	0064      	lsls	r4, r4, #1
 8006c4e:	9b03      	ldr	r3, [sp, #12]
 8006c50:	429d      	cmp	r5, r3
 8006c52:	d800      	bhi.n	8006c56 <_scanf_float+0x2d2>
 8006c54:	e6e1      	b.n	8006a1a <_scanf_float+0x96>
 8006c56:	3d01      	subs	r5, #1
 8006c58:	5933      	ldr	r3, [r6, r4]
 8006c5a:	7829      	ldrb	r1, [r5, #0]
 8006c5c:	9a00      	ldr	r2, [sp, #0]
 8006c5e:	9802      	ldr	r0, [sp, #8]
 8006c60:	4798      	blx	r3
 8006c62:	6933      	ldr	r3, [r6, #16]
 8006c64:	3b01      	subs	r3, #1
 8006c66:	6133      	str	r3, [r6, #16]
 8006c68:	e7f1      	b.n	8006c4e <_scanf_float+0x2ca>
 8006c6a:	003c      	movs	r4, r7
 8006c6c:	9504      	str	r5, [sp, #16]
 8006c6e:	e7e0      	b.n	8006c32 <_scanf_float+0x2ae>
 8006c70:	fffffeff 	.word	0xfffffeff
 8006c74:	fffff87f 	.word	0xfffff87f
 8006c78:	fffffe7f 	.word	0xfffffe7f
 8006c7c:	fffffd7f 	.word	0xfffffd7f
 8006c80:	6933      	ldr	r3, [r6, #16]
 8006c82:	1e6c      	subs	r4, r5, #1
 8006c84:	7821      	ldrb	r1, [r4, #0]
 8006c86:	3b01      	subs	r3, #1
 8006c88:	6133      	str	r3, [r6, #16]
 8006c8a:	2965      	cmp	r1, #101	; 0x65
 8006c8c:	d00c      	beq.n	8006ca8 <_scanf_float+0x324>
 8006c8e:	2945      	cmp	r1, #69	; 0x45
 8006c90:	d00a      	beq.n	8006ca8 <_scanf_float+0x324>
 8006c92:	23be      	movs	r3, #190	; 0xbe
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	58f3      	ldr	r3, [r6, r3]
 8006c98:	9a00      	ldr	r2, [sp, #0]
 8006c9a:	9802      	ldr	r0, [sp, #8]
 8006c9c:	4798      	blx	r3
 8006c9e:	6933      	ldr	r3, [r6, #16]
 8006ca0:	1eac      	subs	r4, r5, #2
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	7821      	ldrb	r1, [r4, #0]
 8006ca6:	6133      	str	r3, [r6, #16]
 8006ca8:	23be      	movs	r3, #190	; 0xbe
 8006caa:	005b      	lsls	r3, r3, #1
 8006cac:	58f3      	ldr	r3, [r6, r3]
 8006cae:	9a00      	ldr	r2, [sp, #0]
 8006cb0:	9802      	ldr	r0, [sp, #8]
 8006cb2:	4798      	blx	r3
 8006cb4:	0025      	movs	r5, r4
 8006cb6:	2710      	movs	r7, #16
 8006cb8:	6833      	ldr	r3, [r6, #0]
 8006cba:	401f      	ands	r7, r3
 8006cbc:	d15b      	bne.n	8006d76 <_scanf_float+0x3f2>
 8006cbe:	23c0      	movs	r3, #192	; 0xc0
 8006cc0:	702f      	strb	r7, [r5, #0]
 8006cc2:	6832      	ldr	r2, [r6, #0]
 8006cc4:	00db      	lsls	r3, r3, #3
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	2280      	movs	r2, #128	; 0x80
 8006cca:	00d2      	lsls	r2, r2, #3
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d11b      	bne.n	8006d08 <_scanf_float+0x384>
 8006cd0:	9a06      	ldr	r2, [sp, #24]
 8006cd2:	9b01      	ldr	r3, [sp, #4]
 8006cd4:	1a9b      	subs	r3, r3, r2
 8006cd6:	425a      	negs	r2, r3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d122      	bne.n	8006d22 <_scanf_float+0x39e>
 8006cdc:	2200      	movs	r2, #0
 8006cde:	9903      	ldr	r1, [sp, #12]
 8006ce0:	9802      	ldr	r0, [sp, #8]
 8006ce2:	f000 fecb 	bl	8007a7c <_strtod_r>
 8006ce6:	9b05      	ldr	r3, [sp, #20]
 8006ce8:	0004      	movs	r4, r0
 8006cea:	6830      	ldr	r0, [r6, #0]
 8006cec:	000d      	movs	r5, r1
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	0782      	lsls	r2, r0, #30
 8006cf2:	d523      	bpl.n	8006d3c <_scanf_float+0x3b8>
 8006cf4:	1d1a      	adds	r2, r3, #4
 8006cf6:	9905      	ldr	r1, [sp, #20]
 8006cf8:	600a      	str	r2, [r1, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	601c      	str	r4, [r3, #0]
 8006cfe:	605d      	str	r5, [r3, #4]
 8006d00:	68f3      	ldr	r3, [r6, #12]
 8006d02:	3301      	adds	r3, #1
 8006d04:	60f3      	str	r3, [r6, #12]
 8006d06:	e689      	b.n	8006a1c <_scanf_float+0x98>
 8006d08:	9b07      	ldr	r3, [sp, #28]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d0e6      	beq.n	8006cdc <_scanf_float+0x358>
 8006d0e:	9b08      	ldr	r3, [sp, #32]
 8006d10:	003a      	movs	r2, r7
 8006d12:	1c59      	adds	r1, r3, #1
 8006d14:	9802      	ldr	r0, [sp, #8]
 8006d16:	230a      	movs	r3, #10
 8006d18:	f000 ff40 	bl	8007b9c <_strtol_r>
 8006d1c:	9b07      	ldr	r3, [sp, #28]
 8006d1e:	9d08      	ldr	r5, [sp, #32]
 8006d20:	1ac2      	subs	r2, r0, r3
 8006d22:	0033      	movs	r3, r6
 8006d24:	3370      	adds	r3, #112	; 0x70
 8006d26:	33ff      	adds	r3, #255	; 0xff
 8006d28:	429d      	cmp	r5, r3
 8006d2a:	d302      	bcc.n	8006d32 <_scanf_float+0x3ae>
 8006d2c:	0035      	movs	r5, r6
 8006d2e:	356f      	adds	r5, #111	; 0x6f
 8006d30:	35ff      	adds	r5, #255	; 0xff
 8006d32:	4912      	ldr	r1, [pc, #72]	; (8006d7c <_scanf_float+0x3f8>)
 8006d34:	0028      	movs	r0, r5
 8006d36:	f000 f841 	bl	8006dbc <siprintf>
 8006d3a:	e7cf      	b.n	8006cdc <_scanf_float+0x358>
 8006d3c:	2104      	movs	r1, #4
 8006d3e:	4008      	ands	r0, r1
 8006d40:	1d1a      	adds	r2, r3, #4
 8006d42:	9001      	str	r0, [sp, #4]
 8006d44:	2800      	cmp	r0, #0
 8006d46:	d1d6      	bne.n	8006cf6 <_scanf_float+0x372>
 8006d48:	9905      	ldr	r1, [sp, #20]
 8006d4a:	0020      	movs	r0, r4
 8006d4c:	600a      	str	r2, [r1, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	0022      	movs	r2, r4
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	0029      	movs	r1, r5
 8006d56:	002b      	movs	r3, r5
 8006d58:	f7fb f9f4 	bl	8002144 <__aeabi_dcmpun>
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	d005      	beq.n	8006d6c <_scanf_float+0x3e8>
 8006d60:	9801      	ldr	r0, [sp, #4]
 8006d62:	f000 f827 	bl	8006db4 <nanf>
 8006d66:	9b00      	ldr	r3, [sp, #0]
 8006d68:	6018      	str	r0, [r3, #0]
 8006d6a:	e7c9      	b.n	8006d00 <_scanf_float+0x37c>
 8006d6c:	0020      	movs	r0, r4
 8006d6e:	0029      	movs	r1, r5
 8006d70:	f7fb faf8 	bl	8002364 <__aeabi_d2f>
 8006d74:	e7f7      	b.n	8006d66 <_scanf_float+0x3e2>
 8006d76:	2700      	movs	r7, #0
 8006d78:	e650      	b.n	8006a1c <_scanf_float+0x98>
 8006d7a:	46c0      	nop			; (mov r8, r8)
 8006d7c:	0800a7bc 	.word	0x0800a7bc

08006d80 <iprintf>:
 8006d80:	b40f      	push	{r0, r1, r2, r3}
 8006d82:	4b0b      	ldr	r3, [pc, #44]	; (8006db0 <iprintf+0x30>)
 8006d84:	b513      	push	{r0, r1, r4, lr}
 8006d86:	681c      	ldr	r4, [r3, #0]
 8006d88:	2c00      	cmp	r4, #0
 8006d8a:	d005      	beq.n	8006d98 <iprintf+0x18>
 8006d8c:	69a3      	ldr	r3, [r4, #24]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d102      	bne.n	8006d98 <iprintf+0x18>
 8006d92:	0020      	movs	r0, r4
 8006d94:	f001 fdba 	bl	800890c <__sinit>
 8006d98:	ab05      	add	r3, sp, #20
 8006d9a:	9a04      	ldr	r2, [sp, #16]
 8006d9c:	68a1      	ldr	r1, [r4, #8]
 8006d9e:	0020      	movs	r0, r4
 8006da0:	9301      	str	r3, [sp, #4]
 8006da2:	f002 ffe5 	bl	8009d70 <_vfiprintf_r>
 8006da6:	bc16      	pop	{r1, r2, r4}
 8006da8:	bc08      	pop	{r3}
 8006daa:	b004      	add	sp, #16
 8006dac:	4718      	bx	r3
 8006dae:	46c0      	nop			; (mov r8, r8)
 8006db0:	2000000c 	.word	0x2000000c

08006db4 <nanf>:
 8006db4:	4800      	ldr	r0, [pc, #0]	; (8006db8 <nanf+0x4>)
 8006db6:	4770      	bx	lr
 8006db8:	7fc00000 	.word	0x7fc00000

08006dbc <siprintf>:
 8006dbc:	b40e      	push	{r1, r2, r3}
 8006dbe:	b500      	push	{lr}
 8006dc0:	490b      	ldr	r1, [pc, #44]	; (8006df0 <siprintf+0x34>)
 8006dc2:	b09c      	sub	sp, #112	; 0x70
 8006dc4:	ab1d      	add	r3, sp, #116	; 0x74
 8006dc6:	9002      	str	r0, [sp, #8]
 8006dc8:	9006      	str	r0, [sp, #24]
 8006dca:	9107      	str	r1, [sp, #28]
 8006dcc:	9104      	str	r1, [sp, #16]
 8006dce:	4809      	ldr	r0, [pc, #36]	; (8006df4 <siprintf+0x38>)
 8006dd0:	4909      	ldr	r1, [pc, #36]	; (8006df8 <siprintf+0x3c>)
 8006dd2:	cb04      	ldmia	r3!, {r2}
 8006dd4:	9105      	str	r1, [sp, #20]
 8006dd6:	6800      	ldr	r0, [r0, #0]
 8006dd8:	a902      	add	r1, sp, #8
 8006dda:	9301      	str	r3, [sp, #4]
 8006ddc:	f002 fea2 	bl	8009b24 <_svfiprintf_r>
 8006de0:	2300      	movs	r3, #0
 8006de2:	9a02      	ldr	r2, [sp, #8]
 8006de4:	7013      	strb	r3, [r2, #0]
 8006de6:	b01c      	add	sp, #112	; 0x70
 8006de8:	bc08      	pop	{r3}
 8006dea:	b003      	add	sp, #12
 8006dec:	4718      	bx	r3
 8006dee:	46c0      	nop			; (mov r8, r8)
 8006df0:	7fffffff 	.word	0x7fffffff
 8006df4:	2000000c 	.word	0x2000000c
 8006df8:	ffff0208 	.word	0xffff0208

08006dfc <sulp>:
 8006dfc:	b570      	push	{r4, r5, r6, lr}
 8006dfe:	0016      	movs	r6, r2
 8006e00:	000d      	movs	r5, r1
 8006e02:	f002 fc51 	bl	80096a8 <__ulp>
 8006e06:	2e00      	cmp	r6, #0
 8006e08:	d00d      	beq.n	8006e26 <sulp+0x2a>
 8006e0a:	236b      	movs	r3, #107	; 0x6b
 8006e0c:	006a      	lsls	r2, r5, #1
 8006e0e:	0d52      	lsrs	r2, r2, #21
 8006e10:	1a9b      	subs	r3, r3, r2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	dd07      	ble.n	8006e26 <sulp+0x2a>
 8006e16:	2400      	movs	r4, #0
 8006e18:	4a03      	ldr	r2, [pc, #12]	; (8006e28 <sulp+0x2c>)
 8006e1a:	051b      	lsls	r3, r3, #20
 8006e1c:	189d      	adds	r5, r3, r2
 8006e1e:	002b      	movs	r3, r5
 8006e20:	0022      	movs	r2, r4
 8006e22:	f7fa fbd5 	bl	80015d0 <__aeabi_dmul>
 8006e26:	bd70      	pop	{r4, r5, r6, pc}
 8006e28:	3ff00000 	.word	0x3ff00000

08006e2c <_strtod_l>:
 8006e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e2e:	b0a7      	sub	sp, #156	; 0x9c
 8006e30:	9307      	str	r3, [sp, #28]
 8006e32:	2300      	movs	r3, #0
 8006e34:	9004      	str	r0, [sp, #16]
 8006e36:	9807      	ldr	r0, [sp, #28]
 8006e38:	9322      	str	r3, [sp, #136]	; 0x88
 8006e3a:	9106      	str	r1, [sp, #24]
 8006e3c:	921d      	str	r2, [sp, #116]	; 0x74
 8006e3e:	f002 f92c 	bl	800909a <__localeconv_l>
 8006e42:	0005      	movs	r5, r0
 8006e44:	6800      	ldr	r0, [r0, #0]
 8006e46:	f7f9 f95d 	bl	8000104 <strlen>
 8006e4a:	2600      	movs	r6, #0
 8006e4c:	2700      	movs	r7, #0
 8006e4e:	9b06      	ldr	r3, [sp, #24]
 8006e50:	9005      	str	r0, [sp, #20]
 8006e52:	9321      	str	r3, [sp, #132]	; 0x84
 8006e54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e56:	781a      	ldrb	r2, [r3, #0]
 8006e58:	2a0d      	cmp	r2, #13
 8006e5a:	d839      	bhi.n	8006ed0 <_strtod_l+0xa4>
 8006e5c:	2a09      	cmp	r2, #9
 8006e5e:	d23d      	bcs.n	8006edc <_strtod_l+0xb0>
 8006e60:	2a00      	cmp	r2, #0
 8006e62:	d044      	beq.n	8006eee <_strtod_l+0xc2>
 8006e64:	2300      	movs	r3, #0
 8006e66:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e68:	2200      	movs	r2, #0
 8006e6a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006e6c:	920c      	str	r2, [sp, #48]	; 0x30
 8006e6e:	7823      	ldrb	r3, [r4, #0]
 8006e70:	2b30      	cmp	r3, #48	; 0x30
 8006e72:	d000      	beq.n	8006e76 <_strtod_l+0x4a>
 8006e74:	e07e      	b.n	8006f74 <_strtod_l+0x148>
 8006e76:	7863      	ldrb	r3, [r4, #1]
 8006e78:	2b58      	cmp	r3, #88	; 0x58
 8006e7a:	d002      	beq.n	8006e82 <_strtod_l+0x56>
 8006e7c:	2b78      	cmp	r3, #120	; 0x78
 8006e7e:	d000      	beq.n	8006e82 <_strtod_l+0x56>
 8006e80:	e06e      	b.n	8006f60 <_strtod_l+0x134>
 8006e82:	9b07      	ldr	r3, [sp, #28]
 8006e84:	4a96      	ldr	r2, [pc, #600]	; (80070e0 <_strtod_l+0x2b4>)
 8006e86:	9302      	str	r3, [sp, #8]
 8006e88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e8a:	a921      	add	r1, sp, #132	; 0x84
 8006e8c:	9301      	str	r3, [sp, #4]
 8006e8e:	ab22      	add	r3, sp, #136	; 0x88
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	9804      	ldr	r0, [sp, #16]
 8006e94:	ab23      	add	r3, sp, #140	; 0x8c
 8006e96:	f001 fe15 	bl	8008ac4 <__gethex>
 8006e9a:	2507      	movs	r5, #7
 8006e9c:	9005      	str	r0, [sp, #20]
 8006e9e:	4005      	ands	r5, r0
 8006ea0:	d005      	beq.n	8006eae <_strtod_l+0x82>
 8006ea2:	2d06      	cmp	r5, #6
 8006ea4:	d12f      	bne.n	8006f06 <_strtod_l+0xda>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	3401      	adds	r4, #1
 8006eaa:	9421      	str	r4, [sp, #132]	; 0x84
 8006eac:	9313      	str	r3, [sp, #76]	; 0x4c
 8006eae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d002      	beq.n	8006eba <_strtod_l+0x8e>
 8006eb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006eb6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d01d      	beq.n	8006efc <_strtod_l+0xd0>
 8006ec0:	2380      	movs	r3, #128	; 0x80
 8006ec2:	0032      	movs	r2, r6
 8006ec4:	061b      	lsls	r3, r3, #24
 8006ec6:	18fb      	adds	r3, r7, r3
 8006ec8:	0010      	movs	r0, r2
 8006eca:	0019      	movs	r1, r3
 8006ecc:	b027      	add	sp, #156	; 0x9c
 8006ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ed0:	2a2b      	cmp	r2, #43	; 0x2b
 8006ed2:	d016      	beq.n	8006f02 <_strtod_l+0xd6>
 8006ed4:	2a2d      	cmp	r2, #45	; 0x2d
 8006ed6:	d003      	beq.n	8006ee0 <_strtod_l+0xb4>
 8006ed8:	2a20      	cmp	r2, #32
 8006eda:	d1c3      	bne.n	8006e64 <_strtod_l+0x38>
 8006edc:	3301      	adds	r3, #1
 8006ede:	e7b8      	b.n	8006e52 <_strtod_l+0x26>
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	9213      	str	r2, [sp, #76]	; 0x4c
 8006ee4:	1c5a      	adds	r2, r3, #1
 8006ee6:	9221      	str	r2, [sp, #132]	; 0x84
 8006ee8:	785b      	ldrb	r3, [r3, #1]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1bc      	bne.n	8006e68 <_strtod_l+0x3c>
 8006eee:	9b06      	ldr	r3, [sp, #24]
 8006ef0:	9321      	str	r3, [sp, #132]	; 0x84
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	9313      	str	r3, [sp, #76]	; 0x4c
 8006ef6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1db      	bne.n	8006eb4 <_strtod_l+0x88>
 8006efc:	0032      	movs	r2, r6
 8006efe:	003b      	movs	r3, r7
 8006f00:	e7e2      	b.n	8006ec8 <_strtod_l+0x9c>
 8006f02:	2200      	movs	r2, #0
 8006f04:	e7ed      	b.n	8006ee2 <_strtod_l+0xb6>
 8006f06:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006f08:	2a00      	cmp	r2, #0
 8006f0a:	d007      	beq.n	8006f1c <_strtod_l+0xf0>
 8006f0c:	2135      	movs	r1, #53	; 0x35
 8006f0e:	a824      	add	r0, sp, #144	; 0x90
 8006f10:	f002 fcb7 	bl	8009882 <__copybits>
 8006f14:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006f16:	9804      	ldr	r0, [sp, #16]
 8006f18:	f002 f92d 	bl	8009176 <_Bfree>
 8006f1c:	1e68      	subs	r0, r5, #1
 8006f1e:	2804      	cmp	r0, #4
 8006f20:	d806      	bhi.n	8006f30 <_strtod_l+0x104>
 8006f22:	f7f9 f8f7 	bl	8000114 <__gnu_thumb1_case_uqi>
 8006f26:	030c      	.short	0x030c
 8006f28:	1917      	.short	0x1917
 8006f2a:	0c          	.byte	0x0c
 8006f2b:	00          	.byte	0x00
 8006f2c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8006f2e:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8006f30:	9b05      	ldr	r3, [sp, #20]
 8006f32:	071b      	lsls	r3, r3, #28
 8006f34:	d5bb      	bpl.n	8006eae <_strtod_l+0x82>
 8006f36:	2380      	movs	r3, #128	; 0x80
 8006f38:	061b      	lsls	r3, r3, #24
 8006f3a:	431f      	orrs	r7, r3
 8006f3c:	e7b7      	b.n	8006eae <_strtod_l+0x82>
 8006f3e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006f40:	4a68      	ldr	r2, [pc, #416]	; (80070e4 <_strtod_l+0x2b8>)
 8006f42:	4969      	ldr	r1, [pc, #420]	; (80070e8 <_strtod_l+0x2bc>)
 8006f44:	401a      	ands	r2, r3
 8006f46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f48:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8006f4a:	185b      	adds	r3, r3, r1
 8006f4c:	051b      	lsls	r3, r3, #20
 8006f4e:	431a      	orrs	r2, r3
 8006f50:	0017      	movs	r7, r2
 8006f52:	e7ed      	b.n	8006f30 <_strtod_l+0x104>
 8006f54:	4f65      	ldr	r7, [pc, #404]	; (80070ec <_strtod_l+0x2c0>)
 8006f56:	e7eb      	b.n	8006f30 <_strtod_l+0x104>
 8006f58:	2601      	movs	r6, #1
 8006f5a:	4f65      	ldr	r7, [pc, #404]	; (80070f0 <_strtod_l+0x2c4>)
 8006f5c:	4276      	negs	r6, r6
 8006f5e:	e7e7      	b.n	8006f30 <_strtod_l+0x104>
 8006f60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	9221      	str	r2, [sp, #132]	; 0x84
 8006f66:	785b      	ldrb	r3, [r3, #1]
 8006f68:	2b30      	cmp	r3, #48	; 0x30
 8006f6a:	d0f9      	beq.n	8006f60 <_strtod_l+0x134>
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d09e      	beq.n	8006eae <_strtod_l+0x82>
 8006f70:	2301      	movs	r3, #1
 8006f72:	930c      	str	r3, [sp, #48]	; 0x30
 8006f74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f76:	220a      	movs	r2, #10
 8006f78:	9312      	str	r3, [sp, #72]	; 0x48
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f7e:	9308      	str	r3, [sp, #32]
 8006f80:	930a      	str	r3, [sp, #40]	; 0x28
 8006f82:	9821      	ldr	r0, [sp, #132]	; 0x84
 8006f84:	7804      	ldrb	r4, [r0, #0]
 8006f86:	0023      	movs	r3, r4
 8006f88:	3b30      	subs	r3, #48	; 0x30
 8006f8a:	b2d9      	uxtb	r1, r3
 8006f8c:	2909      	cmp	r1, #9
 8006f8e:	d934      	bls.n	8006ffa <_strtod_l+0x1ce>
 8006f90:	9a05      	ldr	r2, [sp, #20]
 8006f92:	6829      	ldr	r1, [r5, #0]
 8006f94:	f003 f860 	bl	800a058 <strncmp>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	d040      	beq.n	800701e <_strtod_l+0x1f2>
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	0023      	movs	r3, r4
 8006fa0:	4684      	mov	ip, r0
 8006fa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fa4:	9007      	str	r0, [sp, #28]
 8006fa6:	9205      	str	r2, [sp, #20]
 8006fa8:	2220      	movs	r2, #32
 8006faa:	0019      	movs	r1, r3
 8006fac:	4391      	bics	r1, r2
 8006fae:	000a      	movs	r2, r1
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	2a45      	cmp	r2, #69	; 0x45
 8006fb4:	d000      	beq.n	8006fb8 <_strtod_l+0x18c>
 8006fb6:	e0bf      	b.n	8007138 <_strtod_l+0x30c>
 8006fb8:	9b05      	ldr	r3, [sp, #20]
 8006fba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fbc:	4303      	orrs	r3, r0
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	428b      	cmp	r3, r1
 8006fc2:	d094      	beq.n	8006eee <_strtod_l+0xc2>
 8006fc4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fc6:	9306      	str	r3, [sp, #24]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	9321      	str	r3, [sp, #132]	; 0x84
 8006fcc:	9b06      	ldr	r3, [sp, #24]
 8006fce:	785b      	ldrb	r3, [r3, #1]
 8006fd0:	2b2b      	cmp	r3, #43	; 0x2b
 8006fd2:	d100      	bne.n	8006fd6 <_strtod_l+0x1aa>
 8006fd4:	e082      	b.n	80070dc <_strtod_l+0x2b0>
 8006fd6:	000c      	movs	r4, r1
 8006fd8:	2b2d      	cmp	r3, #45	; 0x2d
 8006fda:	d105      	bne.n	8006fe8 <_strtod_l+0x1bc>
 8006fdc:	2401      	movs	r4, #1
 8006fde:	9b06      	ldr	r3, [sp, #24]
 8006fe0:	3302      	adds	r3, #2
 8006fe2:	9321      	str	r3, [sp, #132]	; 0x84
 8006fe4:	9b06      	ldr	r3, [sp, #24]
 8006fe6:	789b      	ldrb	r3, [r3, #2]
 8006fe8:	001a      	movs	r2, r3
 8006fea:	3a30      	subs	r2, #48	; 0x30
 8006fec:	2a09      	cmp	r2, #9
 8006fee:	d800      	bhi.n	8006ff2 <_strtod_l+0x1c6>
 8006ff0:	e084      	b.n	80070fc <_strtod_l+0x2d0>
 8006ff2:	9a06      	ldr	r2, [sp, #24]
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	9221      	str	r2, [sp, #132]	; 0x84
 8006ff8:	e09e      	b.n	8007138 <_strtod_l+0x30c>
 8006ffa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ffc:	2908      	cmp	r1, #8
 8006ffe:	dc09      	bgt.n	8007014 <_strtod_l+0x1e8>
 8007000:	9908      	ldr	r1, [sp, #32]
 8007002:	4351      	muls	r1, r2
 8007004:	18cb      	adds	r3, r1, r3
 8007006:	9308      	str	r3, [sp, #32]
 8007008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800700a:	3001      	adds	r0, #1
 800700c:	3301      	adds	r3, #1
 800700e:	930a      	str	r3, [sp, #40]	; 0x28
 8007010:	9021      	str	r0, [sp, #132]	; 0x84
 8007012:	e7b6      	b.n	8006f82 <_strtod_l+0x156>
 8007014:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007016:	4351      	muls	r1, r2
 8007018:	18cb      	adds	r3, r1, r3
 800701a:	930b      	str	r3, [sp, #44]	; 0x2c
 800701c:	e7f4      	b.n	8007008 <_strtod_l+0x1dc>
 800701e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007020:	9b05      	ldr	r3, [sp, #20]
 8007022:	4694      	mov	ip, r2
 8007024:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007026:	4463      	add	r3, ip
 8007028:	9321      	str	r3, [sp, #132]	; 0x84
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	2a00      	cmp	r2, #0
 800702e:	d036      	beq.n	800709e <_strtod_l+0x272>
 8007030:	4684      	mov	ip, r0
 8007032:	9205      	str	r2, [sp, #20]
 8007034:	001a      	movs	r2, r3
 8007036:	3a30      	subs	r2, #48	; 0x30
 8007038:	2a09      	cmp	r2, #9
 800703a:	d912      	bls.n	8007062 <_strtod_l+0x236>
 800703c:	2201      	movs	r2, #1
 800703e:	9207      	str	r2, [sp, #28]
 8007040:	e7b2      	b.n	8006fa8 <_strtod_l+0x17c>
 8007042:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007044:	3001      	adds	r0, #1
 8007046:	1c5a      	adds	r2, r3, #1
 8007048:	9221      	str	r2, [sp, #132]	; 0x84
 800704a:	785b      	ldrb	r3, [r3, #1]
 800704c:	2b30      	cmp	r3, #48	; 0x30
 800704e:	d0f8      	beq.n	8007042 <_strtod_l+0x216>
 8007050:	001a      	movs	r2, r3
 8007052:	3a31      	subs	r2, #49	; 0x31
 8007054:	2a08      	cmp	r2, #8
 8007056:	d83c      	bhi.n	80070d2 <_strtod_l+0x2a6>
 8007058:	4684      	mov	ip, r0
 800705a:	2000      	movs	r0, #0
 800705c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800705e:	9005      	str	r0, [sp, #20]
 8007060:	9212      	str	r2, [sp, #72]	; 0x48
 8007062:	3b30      	subs	r3, #48	; 0x30
 8007064:	1c42      	adds	r2, r0, #1
 8007066:	2b00      	cmp	r3, #0
 8007068:	d013      	beq.n	8007092 <_strtod_l+0x266>
 800706a:	210a      	movs	r1, #10
 800706c:	4494      	add	ip, r2
 800706e:	9a05      	ldr	r2, [sp, #20]
 8007070:	1885      	adds	r5, r0, r2
 8007072:	42aa      	cmp	r2, r5
 8007074:	d115      	bne.n	80070a2 <_strtod_l+0x276>
 8007076:	9905      	ldr	r1, [sp, #20]
 8007078:	9a05      	ldr	r2, [sp, #20]
 800707a:	3101      	adds	r1, #1
 800707c:	1809      	adds	r1, r1, r0
 800707e:	1812      	adds	r2, r2, r0
 8007080:	9105      	str	r1, [sp, #20]
 8007082:	2a08      	cmp	r2, #8
 8007084:	dc1b      	bgt.n	80070be <_strtod_l+0x292>
 8007086:	220a      	movs	r2, #10
 8007088:	9908      	ldr	r1, [sp, #32]
 800708a:	434a      	muls	r2, r1
 800708c:	189b      	adds	r3, r3, r2
 800708e:	2200      	movs	r2, #0
 8007090:	9308      	str	r3, [sp, #32]
 8007092:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007094:	0010      	movs	r0, r2
 8007096:	1c59      	adds	r1, r3, #1
 8007098:	9121      	str	r1, [sp, #132]	; 0x84
 800709a:	785b      	ldrb	r3, [r3, #1]
 800709c:	e7ca      	b.n	8007034 <_strtod_l+0x208>
 800709e:	980a      	ldr	r0, [sp, #40]	; 0x28
 80070a0:	e7d4      	b.n	800704c <_strtod_l+0x220>
 80070a2:	1c54      	adds	r4, r2, #1
 80070a4:	2a08      	cmp	r2, #8
 80070a6:	dc04      	bgt.n	80070b2 <_strtod_l+0x286>
 80070a8:	9a08      	ldr	r2, [sp, #32]
 80070aa:	434a      	muls	r2, r1
 80070ac:	9208      	str	r2, [sp, #32]
 80070ae:	0022      	movs	r2, r4
 80070b0:	e7df      	b.n	8007072 <_strtod_l+0x246>
 80070b2:	2c10      	cmp	r4, #16
 80070b4:	dcfb      	bgt.n	80070ae <_strtod_l+0x282>
 80070b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80070b8:	434a      	muls	r2, r1
 80070ba:	920b      	str	r2, [sp, #44]	; 0x2c
 80070bc:	e7f7      	b.n	80070ae <_strtod_l+0x282>
 80070be:	9905      	ldr	r1, [sp, #20]
 80070c0:	2200      	movs	r2, #0
 80070c2:	2910      	cmp	r1, #16
 80070c4:	dce5      	bgt.n	8007092 <_strtod_l+0x266>
 80070c6:	210a      	movs	r1, #10
 80070c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80070ca:	4341      	muls	r1, r0
 80070cc:	185b      	adds	r3, r3, r1
 80070ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80070d0:	e7df      	b.n	8007092 <_strtod_l+0x266>
 80070d2:	2200      	movs	r2, #0
 80070d4:	4694      	mov	ip, r2
 80070d6:	9205      	str	r2, [sp, #20]
 80070d8:	3201      	adds	r2, #1
 80070da:	e7b0      	b.n	800703e <_strtod_l+0x212>
 80070dc:	000c      	movs	r4, r1
 80070de:	e77e      	b.n	8006fde <_strtod_l+0x1b2>
 80070e0:	0800a7c4 	.word	0x0800a7c4
 80070e4:	ffefffff 	.word	0xffefffff
 80070e8:	00000433 	.word	0x00000433
 80070ec:	7ff00000 	.word	0x7ff00000
 80070f0:	7fffffff 	.word	0x7fffffff
 80070f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070f6:	1c5a      	adds	r2, r3, #1
 80070f8:	9221      	str	r2, [sp, #132]	; 0x84
 80070fa:	785b      	ldrb	r3, [r3, #1]
 80070fc:	2b30      	cmp	r3, #48	; 0x30
 80070fe:	d0f9      	beq.n	80070f4 <_strtod_l+0x2c8>
 8007100:	001a      	movs	r2, r3
 8007102:	3a31      	subs	r2, #49	; 0x31
 8007104:	2100      	movs	r1, #0
 8007106:	2a08      	cmp	r2, #8
 8007108:	d816      	bhi.n	8007138 <_strtod_l+0x30c>
 800710a:	3b30      	subs	r3, #48	; 0x30
 800710c:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800710e:	930e      	str	r3, [sp, #56]	; 0x38
 8007110:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007112:	1c59      	adds	r1, r3, #1
 8007114:	9121      	str	r1, [sp, #132]	; 0x84
 8007116:	785b      	ldrb	r3, [r3, #1]
 8007118:	001a      	movs	r2, r3
 800711a:	3a30      	subs	r2, #48	; 0x30
 800711c:	2a09      	cmp	r2, #9
 800711e:	d932      	bls.n	8007186 <_strtod_l+0x35a>
 8007120:	1b4a      	subs	r2, r1, r5
 8007122:	4dad      	ldr	r5, [pc, #692]	; (80073d8 <_strtod_l+0x5ac>)
 8007124:	0029      	movs	r1, r5
 8007126:	2a08      	cmp	r2, #8
 8007128:	dc03      	bgt.n	8007132 <_strtod_l+0x306>
 800712a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800712c:	42a9      	cmp	r1, r5
 800712e:	dd00      	ble.n	8007132 <_strtod_l+0x306>
 8007130:	0029      	movs	r1, r5
 8007132:	2c00      	cmp	r4, #0
 8007134:	d000      	beq.n	8007138 <_strtod_l+0x30c>
 8007136:	4249      	negs	r1, r1
 8007138:	9a05      	ldr	r2, [sp, #20]
 800713a:	2a00      	cmp	r2, #0
 800713c:	d149      	bne.n	80071d2 <_strtod_l+0x3a6>
 800713e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007140:	4310      	orrs	r0, r2
 8007142:	d000      	beq.n	8007146 <_strtod_l+0x31a>
 8007144:	e6b3      	b.n	8006eae <_strtod_l+0x82>
 8007146:	9a07      	ldr	r2, [sp, #28]
 8007148:	2a00      	cmp	r2, #0
 800714a:	d000      	beq.n	800714e <_strtod_l+0x322>
 800714c:	e6cf      	b.n	8006eee <_strtod_l+0xc2>
 800714e:	2b4e      	cmp	r3, #78	; 0x4e
 8007150:	d025      	beq.n	800719e <_strtod_l+0x372>
 8007152:	dc1f      	bgt.n	8007194 <_strtod_l+0x368>
 8007154:	2b49      	cmp	r3, #73	; 0x49
 8007156:	d000      	beq.n	800715a <_strtod_l+0x32e>
 8007158:	e6c9      	b.n	8006eee <_strtod_l+0xc2>
 800715a:	49a0      	ldr	r1, [pc, #640]	; (80073dc <_strtod_l+0x5b0>)
 800715c:	a821      	add	r0, sp, #132	; 0x84
 800715e:	f001 feee 	bl	8008f3e <__match>
 8007162:	2800      	cmp	r0, #0
 8007164:	d100      	bne.n	8007168 <_strtod_l+0x33c>
 8007166:	e6c2      	b.n	8006eee <_strtod_l+0xc2>
 8007168:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800716a:	499d      	ldr	r1, [pc, #628]	; (80073e0 <_strtod_l+0x5b4>)
 800716c:	3b01      	subs	r3, #1
 800716e:	a821      	add	r0, sp, #132	; 0x84
 8007170:	9321      	str	r3, [sp, #132]	; 0x84
 8007172:	f001 fee4 	bl	8008f3e <__match>
 8007176:	2800      	cmp	r0, #0
 8007178:	d102      	bne.n	8007180 <_strtod_l+0x354>
 800717a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800717c:	3301      	adds	r3, #1
 800717e:	9321      	str	r3, [sp, #132]	; 0x84
 8007180:	4f98      	ldr	r7, [pc, #608]	; (80073e4 <_strtod_l+0x5b8>)
 8007182:	2600      	movs	r6, #0
 8007184:	e693      	b.n	8006eae <_strtod_l+0x82>
 8007186:	220a      	movs	r2, #10
 8007188:	990e      	ldr	r1, [sp, #56]	; 0x38
 800718a:	434a      	muls	r2, r1
 800718c:	18d2      	adds	r2, r2, r3
 800718e:	3a30      	subs	r2, #48	; 0x30
 8007190:	920e      	str	r2, [sp, #56]	; 0x38
 8007192:	e7bd      	b.n	8007110 <_strtod_l+0x2e4>
 8007194:	2b69      	cmp	r3, #105	; 0x69
 8007196:	d0e0      	beq.n	800715a <_strtod_l+0x32e>
 8007198:	2b6e      	cmp	r3, #110	; 0x6e
 800719a:	d000      	beq.n	800719e <_strtod_l+0x372>
 800719c:	e6a7      	b.n	8006eee <_strtod_l+0xc2>
 800719e:	4992      	ldr	r1, [pc, #584]	; (80073e8 <_strtod_l+0x5bc>)
 80071a0:	a821      	add	r0, sp, #132	; 0x84
 80071a2:	f001 fecc 	bl	8008f3e <__match>
 80071a6:	2800      	cmp	r0, #0
 80071a8:	d100      	bne.n	80071ac <_strtod_l+0x380>
 80071aa:	e6a0      	b.n	8006eee <_strtod_l+0xc2>
 80071ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	2b28      	cmp	r3, #40	; 0x28
 80071b2:	d10c      	bne.n	80071ce <_strtod_l+0x3a2>
 80071b4:	aa24      	add	r2, sp, #144	; 0x90
 80071b6:	498d      	ldr	r1, [pc, #564]	; (80073ec <_strtod_l+0x5c0>)
 80071b8:	a821      	add	r0, sp, #132	; 0x84
 80071ba:	f001 fed4 	bl	8008f66 <__hexnan>
 80071be:	2805      	cmp	r0, #5
 80071c0:	d105      	bne.n	80071ce <_strtod_l+0x3a2>
 80071c2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80071c4:	4a87      	ldr	r2, [pc, #540]	; (80073e4 <_strtod_l+0x5b8>)
 80071c6:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80071c8:	431a      	orrs	r2, r3
 80071ca:	0017      	movs	r7, r2
 80071cc:	e66f      	b.n	8006eae <_strtod_l+0x82>
 80071ce:	4f88      	ldr	r7, [pc, #544]	; (80073f0 <_strtod_l+0x5c4>)
 80071d0:	e7d7      	b.n	8007182 <_strtod_l+0x356>
 80071d2:	4663      	mov	r3, ip
 80071d4:	1acb      	subs	r3, r1, r3
 80071d6:	9307      	str	r3, [sp, #28]
 80071d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d101      	bne.n	80071e2 <_strtod_l+0x3b6>
 80071de:	9b05      	ldr	r3, [sp, #20]
 80071e0:	930a      	str	r3, [sp, #40]	; 0x28
 80071e2:	9c05      	ldr	r4, [sp, #20]
 80071e4:	2c10      	cmp	r4, #16
 80071e6:	dd00      	ble.n	80071ea <_strtod_l+0x3be>
 80071e8:	2410      	movs	r4, #16
 80071ea:	9808      	ldr	r0, [sp, #32]
 80071ec:	f7fb f836 	bl	800225c <__aeabi_ui2d>
 80071f0:	9b05      	ldr	r3, [sp, #20]
 80071f2:	0006      	movs	r6, r0
 80071f4:	000f      	movs	r7, r1
 80071f6:	2b09      	cmp	r3, #9
 80071f8:	dc15      	bgt.n	8007226 <_strtod_l+0x3fa>
 80071fa:	9b07      	ldr	r3, [sp, #28]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d100      	bne.n	8007202 <_strtod_l+0x3d6>
 8007200:	e655      	b.n	8006eae <_strtod_l+0x82>
 8007202:	9b07      	ldr	r3, [sp, #28]
 8007204:	2b00      	cmp	r3, #0
 8007206:	dc00      	bgt.n	800720a <_strtod_l+0x3de>
 8007208:	e07d      	b.n	8007306 <_strtod_l+0x4da>
 800720a:	2b16      	cmp	r3, #22
 800720c:	dc62      	bgt.n	80072d4 <_strtod_l+0x4a8>
 800720e:	00dc      	lsls	r4, r3, #3
 8007210:	4b78      	ldr	r3, [pc, #480]	; (80073f4 <_strtod_l+0x5c8>)
 8007212:	0032      	movs	r2, r6
 8007214:	1919      	adds	r1, r3, r4
 8007216:	003b      	movs	r3, r7
 8007218:	6808      	ldr	r0, [r1, #0]
 800721a:	6849      	ldr	r1, [r1, #4]
 800721c:	f7fa f9d8 	bl	80015d0 <__aeabi_dmul>
 8007220:	0006      	movs	r6, r0
 8007222:	000f      	movs	r7, r1
 8007224:	e643      	b.n	8006eae <_strtod_l+0x82>
 8007226:	0022      	movs	r2, r4
 8007228:	4b72      	ldr	r3, [pc, #456]	; (80073f4 <_strtod_l+0x5c8>)
 800722a:	3a09      	subs	r2, #9
 800722c:	00d2      	lsls	r2, r2, #3
 800722e:	189b      	adds	r3, r3, r2
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f7fa f9cc 	bl	80015d0 <__aeabi_dmul>
 8007238:	0006      	movs	r6, r0
 800723a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800723c:	000f      	movs	r7, r1
 800723e:	f7fb f80d 	bl	800225c <__aeabi_ui2d>
 8007242:	000b      	movs	r3, r1
 8007244:	0002      	movs	r2, r0
 8007246:	0039      	movs	r1, r7
 8007248:	0030      	movs	r0, r6
 800724a:	f7f9 fa9b 	bl	8000784 <__aeabi_dadd>
 800724e:	9b05      	ldr	r3, [sp, #20]
 8007250:	0006      	movs	r6, r0
 8007252:	000f      	movs	r7, r1
 8007254:	2b0f      	cmp	r3, #15
 8007256:	ddd0      	ble.n	80071fa <_strtod_l+0x3ce>
 8007258:	9b05      	ldr	r3, [sp, #20]
 800725a:	1b1c      	subs	r4, r3, r4
 800725c:	9b07      	ldr	r3, [sp, #28]
 800725e:	18e4      	adds	r4, r4, r3
 8007260:	2c00      	cmp	r4, #0
 8007262:	dc00      	bgt.n	8007266 <_strtod_l+0x43a>
 8007264:	e094      	b.n	8007390 <_strtod_l+0x564>
 8007266:	230f      	movs	r3, #15
 8007268:	4023      	ands	r3, r4
 800726a:	d00a      	beq.n	8007282 <_strtod_l+0x456>
 800726c:	4961      	ldr	r1, [pc, #388]	; (80073f4 <_strtod_l+0x5c8>)
 800726e:	00db      	lsls	r3, r3, #3
 8007270:	18c9      	adds	r1, r1, r3
 8007272:	0032      	movs	r2, r6
 8007274:	6808      	ldr	r0, [r1, #0]
 8007276:	6849      	ldr	r1, [r1, #4]
 8007278:	003b      	movs	r3, r7
 800727a:	f7fa f9a9 	bl	80015d0 <__aeabi_dmul>
 800727e:	0006      	movs	r6, r0
 8007280:	000f      	movs	r7, r1
 8007282:	230f      	movs	r3, #15
 8007284:	439c      	bics	r4, r3
 8007286:	d06e      	beq.n	8007366 <_strtod_l+0x53a>
 8007288:	3326      	adds	r3, #38	; 0x26
 800728a:	33ff      	adds	r3, #255	; 0xff
 800728c:	429c      	cmp	r4, r3
 800728e:	dd48      	ble.n	8007322 <_strtod_l+0x4f6>
 8007290:	2400      	movs	r4, #0
 8007292:	9405      	str	r4, [sp, #20]
 8007294:	940b      	str	r4, [sp, #44]	; 0x2c
 8007296:	940a      	str	r4, [sp, #40]	; 0x28
 8007298:	2322      	movs	r3, #34	; 0x22
 800729a:	2600      	movs	r6, #0
 800729c:	9a04      	ldr	r2, [sp, #16]
 800729e:	4f51      	ldr	r7, [pc, #324]	; (80073e4 <_strtod_l+0x5b8>)
 80072a0:	6013      	str	r3, [r2, #0]
 80072a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072a4:	42b3      	cmp	r3, r6
 80072a6:	d100      	bne.n	80072aa <_strtod_l+0x47e>
 80072a8:	e601      	b.n	8006eae <_strtod_l+0x82>
 80072aa:	9922      	ldr	r1, [sp, #136]	; 0x88
 80072ac:	9804      	ldr	r0, [sp, #16]
 80072ae:	f001 ff62 	bl	8009176 <_Bfree>
 80072b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80072b4:	9804      	ldr	r0, [sp, #16]
 80072b6:	f001 ff5e 	bl	8009176 <_Bfree>
 80072ba:	9905      	ldr	r1, [sp, #20]
 80072bc:	9804      	ldr	r0, [sp, #16]
 80072be:	f001 ff5a 	bl	8009176 <_Bfree>
 80072c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072c4:	9804      	ldr	r0, [sp, #16]
 80072c6:	f001 ff56 	bl	8009176 <_Bfree>
 80072ca:	0021      	movs	r1, r4
 80072cc:	9804      	ldr	r0, [sp, #16]
 80072ce:	f001 ff52 	bl	8009176 <_Bfree>
 80072d2:	e5ec      	b.n	8006eae <_strtod_l+0x82>
 80072d4:	2325      	movs	r3, #37	; 0x25
 80072d6:	9a05      	ldr	r2, [sp, #20]
 80072d8:	1a9b      	subs	r3, r3, r2
 80072da:	9a07      	ldr	r2, [sp, #28]
 80072dc:	4293      	cmp	r3, r2
 80072de:	dbbb      	blt.n	8007258 <_strtod_l+0x42c>
 80072e0:	230f      	movs	r3, #15
 80072e2:	9a05      	ldr	r2, [sp, #20]
 80072e4:	4c43      	ldr	r4, [pc, #268]	; (80073f4 <_strtod_l+0x5c8>)
 80072e6:	1a9d      	subs	r5, r3, r2
 80072e8:	00e9      	lsls	r1, r5, #3
 80072ea:	1861      	adds	r1, r4, r1
 80072ec:	0032      	movs	r2, r6
 80072ee:	6808      	ldr	r0, [r1, #0]
 80072f0:	6849      	ldr	r1, [r1, #4]
 80072f2:	003b      	movs	r3, r7
 80072f4:	f7fa f96c 	bl	80015d0 <__aeabi_dmul>
 80072f8:	9b07      	ldr	r3, [sp, #28]
 80072fa:	1b5e      	subs	r6, r3, r5
 80072fc:	00f6      	lsls	r6, r6, #3
 80072fe:	19a6      	adds	r6, r4, r6
 8007300:	6832      	ldr	r2, [r6, #0]
 8007302:	6873      	ldr	r3, [r6, #4]
 8007304:	e78a      	b.n	800721c <_strtod_l+0x3f0>
 8007306:	9b07      	ldr	r3, [sp, #28]
 8007308:	3316      	adds	r3, #22
 800730a:	dba5      	blt.n	8007258 <_strtod_l+0x42c>
 800730c:	9b07      	ldr	r3, [sp, #28]
 800730e:	0030      	movs	r0, r6
 8007310:	00da      	lsls	r2, r3, #3
 8007312:	4b38      	ldr	r3, [pc, #224]	; (80073f4 <_strtod_l+0x5c8>)
 8007314:	0039      	movs	r1, r7
 8007316:	1a9b      	subs	r3, r3, r2
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f7f9 fd4e 	bl	8000dbc <__aeabi_ddiv>
 8007320:	e77e      	b.n	8007220 <_strtod_l+0x3f4>
 8007322:	2300      	movs	r3, #0
 8007324:	0030      	movs	r0, r6
 8007326:	0039      	movs	r1, r7
 8007328:	001d      	movs	r5, r3
 800732a:	1124      	asrs	r4, r4, #4
 800732c:	2c01      	cmp	r4, #1
 800732e:	dc1d      	bgt.n	800736c <_strtod_l+0x540>
 8007330:	2b00      	cmp	r3, #0
 8007332:	d001      	beq.n	8007338 <_strtod_l+0x50c>
 8007334:	0006      	movs	r6, r0
 8007336:	000f      	movs	r7, r1
 8007338:	4b2f      	ldr	r3, [pc, #188]	; (80073f8 <_strtod_l+0x5cc>)
 800733a:	00ed      	lsls	r5, r5, #3
 800733c:	18ff      	adds	r7, r7, r3
 800733e:	4b2f      	ldr	r3, [pc, #188]	; (80073fc <_strtod_l+0x5d0>)
 8007340:	0032      	movs	r2, r6
 8007342:	195d      	adds	r5, r3, r5
 8007344:	6828      	ldr	r0, [r5, #0]
 8007346:	6869      	ldr	r1, [r5, #4]
 8007348:	003b      	movs	r3, r7
 800734a:	f7fa f941 	bl	80015d0 <__aeabi_dmul>
 800734e:	4b25      	ldr	r3, [pc, #148]	; (80073e4 <_strtod_l+0x5b8>)
 8007350:	4a2b      	ldr	r2, [pc, #172]	; (8007400 <_strtod_l+0x5d4>)
 8007352:	0006      	movs	r6, r0
 8007354:	400b      	ands	r3, r1
 8007356:	4293      	cmp	r3, r2
 8007358:	d89a      	bhi.n	8007290 <_strtod_l+0x464>
 800735a:	4a2a      	ldr	r2, [pc, #168]	; (8007404 <_strtod_l+0x5d8>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d913      	bls.n	8007388 <_strtod_l+0x55c>
 8007360:	2601      	movs	r6, #1
 8007362:	4f29      	ldr	r7, [pc, #164]	; (8007408 <_strtod_l+0x5dc>)
 8007364:	4276      	negs	r6, r6
 8007366:	2300      	movs	r3, #0
 8007368:	9306      	str	r3, [sp, #24]
 800736a:	e07b      	b.n	8007464 <_strtod_l+0x638>
 800736c:	2201      	movs	r2, #1
 800736e:	4214      	tst	r4, r2
 8007370:	d007      	beq.n	8007382 <_strtod_l+0x556>
 8007372:	4a22      	ldr	r2, [pc, #136]	; (80073fc <_strtod_l+0x5d0>)
 8007374:	00eb      	lsls	r3, r5, #3
 8007376:	189b      	adds	r3, r3, r2
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	f7fa f928 	bl	80015d0 <__aeabi_dmul>
 8007380:	2301      	movs	r3, #1
 8007382:	3501      	adds	r5, #1
 8007384:	1064      	asrs	r4, r4, #1
 8007386:	e7d1      	b.n	800732c <_strtod_l+0x500>
 8007388:	23d4      	movs	r3, #212	; 0xd4
 800738a:	049b      	lsls	r3, r3, #18
 800738c:	18cf      	adds	r7, r1, r3
 800738e:	e7ea      	b.n	8007366 <_strtod_l+0x53a>
 8007390:	2c00      	cmp	r4, #0
 8007392:	d0e8      	beq.n	8007366 <_strtod_l+0x53a>
 8007394:	230f      	movs	r3, #15
 8007396:	4264      	negs	r4, r4
 8007398:	4023      	ands	r3, r4
 800739a:	d00a      	beq.n	80073b2 <_strtod_l+0x586>
 800739c:	4a15      	ldr	r2, [pc, #84]	; (80073f4 <_strtod_l+0x5c8>)
 800739e:	00db      	lsls	r3, r3, #3
 80073a0:	18d3      	adds	r3, r2, r3
 80073a2:	0030      	movs	r0, r6
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	0039      	movs	r1, r7
 80073aa:	f7f9 fd07 	bl	8000dbc <__aeabi_ddiv>
 80073ae:	0006      	movs	r6, r0
 80073b0:	000f      	movs	r7, r1
 80073b2:	1124      	asrs	r4, r4, #4
 80073b4:	d0d7      	beq.n	8007366 <_strtod_l+0x53a>
 80073b6:	2c1f      	cmp	r4, #31
 80073b8:	dd28      	ble.n	800740c <_strtod_l+0x5e0>
 80073ba:	2400      	movs	r4, #0
 80073bc:	9405      	str	r4, [sp, #20]
 80073be:	940b      	str	r4, [sp, #44]	; 0x2c
 80073c0:	940a      	str	r4, [sp, #40]	; 0x28
 80073c2:	2322      	movs	r3, #34	; 0x22
 80073c4:	9a04      	ldr	r2, [sp, #16]
 80073c6:	2600      	movs	r6, #0
 80073c8:	6013      	str	r3, [r2, #0]
 80073ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073cc:	2700      	movs	r7, #0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d000      	beq.n	80073d4 <_strtod_l+0x5a8>
 80073d2:	e76a      	b.n	80072aa <_strtod_l+0x47e>
 80073d4:	e56b      	b.n	8006eae <_strtod_l+0x82>
 80073d6:	46c0      	nop			; (mov r8, r8)
 80073d8:	00004e1f 	.word	0x00004e1f
 80073dc:	0800a78d 	.word	0x0800a78d
 80073e0:	0800a81b 	.word	0x0800a81b
 80073e4:	7ff00000 	.word	0x7ff00000
 80073e8:	0800a795 	.word	0x0800a795
 80073ec:	0800a7d8 	.word	0x0800a7d8
 80073f0:	fff80000 	.word	0xfff80000
 80073f4:	0800a8c0 	.word	0x0800a8c0
 80073f8:	fcb00000 	.word	0xfcb00000
 80073fc:	0800a898 	.word	0x0800a898
 8007400:	7ca00000 	.word	0x7ca00000
 8007404:	7c900000 	.word	0x7c900000
 8007408:	7fefffff 	.word	0x7fefffff
 800740c:	2310      	movs	r3, #16
 800740e:	4023      	ands	r3, r4
 8007410:	9306      	str	r3, [sp, #24]
 8007412:	d001      	beq.n	8007418 <_strtod_l+0x5ec>
 8007414:	236a      	movs	r3, #106	; 0x6a
 8007416:	9306      	str	r3, [sp, #24]
 8007418:	2300      	movs	r3, #0
 800741a:	0030      	movs	r0, r6
 800741c:	0039      	movs	r1, r7
 800741e:	001d      	movs	r5, r3
 8007420:	2c00      	cmp	r4, #0
 8007422:	dd00      	ble.n	8007426 <_strtod_l+0x5fa>
 8007424:	e10e      	b.n	8007644 <_strtod_l+0x818>
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <_strtod_l+0x602>
 800742a:	0006      	movs	r6, r0
 800742c:	000f      	movs	r7, r1
 800742e:	9b06      	ldr	r3, [sp, #24]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00f      	beq.n	8007454 <_strtod_l+0x628>
 8007434:	236b      	movs	r3, #107	; 0x6b
 8007436:	0079      	lsls	r1, r7, #1
 8007438:	0d49      	lsrs	r1, r1, #21
 800743a:	003a      	movs	r2, r7
 800743c:	1a5b      	subs	r3, r3, r1
 800743e:	2b00      	cmp	r3, #0
 8007440:	dd08      	ble.n	8007454 <_strtod_l+0x628>
 8007442:	2b1f      	cmp	r3, #31
 8007444:	dc00      	bgt.n	8007448 <_strtod_l+0x61c>
 8007446:	e112      	b.n	800766e <_strtod_l+0x842>
 8007448:	2600      	movs	r6, #0
 800744a:	2b34      	cmp	r3, #52	; 0x34
 800744c:	dc00      	bgt.n	8007450 <_strtod_l+0x624>
 800744e:	e107      	b.n	8007660 <_strtod_l+0x834>
 8007450:	27dc      	movs	r7, #220	; 0xdc
 8007452:	04bf      	lsls	r7, r7, #18
 8007454:	2200      	movs	r2, #0
 8007456:	2300      	movs	r3, #0
 8007458:	0030      	movs	r0, r6
 800745a:	0039      	movs	r1, r7
 800745c:	f7f8 ffea 	bl	8000434 <__aeabi_dcmpeq>
 8007460:	2800      	cmp	r0, #0
 8007462:	d1aa      	bne.n	80073ba <_strtod_l+0x58e>
 8007464:	9b08      	ldr	r3, [sp, #32]
 8007466:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800746c:	9b05      	ldr	r3, [sp, #20]
 800746e:	9804      	ldr	r0, [sp, #16]
 8007470:	f001 fed8 	bl	8009224 <__s2b>
 8007474:	900b      	str	r0, [sp, #44]	; 0x2c
 8007476:	2800      	cmp	r0, #0
 8007478:	d100      	bne.n	800747c <_strtod_l+0x650>
 800747a:	e709      	b.n	8007290 <_strtod_l+0x464>
 800747c:	9b07      	ldr	r3, [sp, #28]
 800747e:	9a07      	ldr	r2, [sp, #28]
 8007480:	17db      	asrs	r3, r3, #31
 8007482:	4252      	negs	r2, r2
 8007484:	4013      	ands	r3, r2
 8007486:	9315      	str	r3, [sp, #84]	; 0x54
 8007488:	9b07      	ldr	r3, [sp, #28]
 800748a:	2400      	movs	r4, #0
 800748c:	43db      	mvns	r3, r3
 800748e:	9a07      	ldr	r2, [sp, #28]
 8007490:	17db      	asrs	r3, r3, #31
 8007492:	401a      	ands	r2, r3
 8007494:	921c      	str	r2, [sp, #112]	; 0x70
 8007496:	9405      	str	r4, [sp, #20]
 8007498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800749a:	9804      	ldr	r0, [sp, #16]
 800749c:	6859      	ldr	r1, [r3, #4]
 800749e:	f001 fe32 	bl	8009106 <_Balloc>
 80074a2:	900a      	str	r0, [sp, #40]	; 0x28
 80074a4:	2800      	cmp	r0, #0
 80074a6:	d100      	bne.n	80074aa <_strtod_l+0x67e>
 80074a8:	e6f6      	b.n	8007298 <_strtod_l+0x46c>
 80074aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	310c      	adds	r1, #12
 80074b2:	1c9a      	adds	r2, r3, #2
 80074b4:	0092      	lsls	r2, r2, #2
 80074b6:	300c      	adds	r0, #12
 80074b8:	9308      	str	r3, [sp, #32]
 80074ba:	f7fe fdf3 	bl	80060a4 <memcpy>
 80074be:	ab24      	add	r3, sp, #144	; 0x90
 80074c0:	9301      	str	r3, [sp, #4]
 80074c2:	ab23      	add	r3, sp, #140	; 0x8c
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	0032      	movs	r2, r6
 80074c8:	003b      	movs	r3, r7
 80074ca:	9804      	ldr	r0, [sp, #16]
 80074cc:	960e      	str	r6, [sp, #56]	; 0x38
 80074ce:	970f      	str	r7, [sp, #60]	; 0x3c
 80074d0:	f002 f95c 	bl	800978c <__d2b>
 80074d4:	9022      	str	r0, [sp, #136]	; 0x88
 80074d6:	2800      	cmp	r0, #0
 80074d8:	d100      	bne.n	80074dc <_strtod_l+0x6b0>
 80074da:	e6dd      	b.n	8007298 <_strtod_l+0x46c>
 80074dc:	2101      	movs	r1, #1
 80074de:	9804      	ldr	r0, [sp, #16]
 80074e0:	f001 ff27 	bl	8009332 <__i2b>
 80074e4:	9005      	str	r0, [sp, #20]
 80074e6:	2800      	cmp	r0, #0
 80074e8:	d100      	bne.n	80074ec <_strtod_l+0x6c0>
 80074ea:	e6d5      	b.n	8007298 <_strtod_l+0x46c>
 80074ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	da00      	bge.n	80074f4 <_strtod_l+0x6c8>
 80074f2:	e0c1      	b.n	8007678 <_strtod_l+0x84c>
 80074f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80074f6:	189d      	adds	r5, r3, r2
 80074f8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80074fa:	4694      	mov	ip, r2
 80074fc:	9906      	ldr	r1, [sp, #24]
 80074fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007500:	1a5b      	subs	r3, r3, r1
 8007502:	2136      	movs	r1, #54	; 0x36
 8007504:	189b      	adds	r3, r3, r2
 8007506:	1a8a      	subs	r2, r1, r2
 8007508:	49b2      	ldr	r1, [pc, #712]	; (80077d4 <_strtod_l+0x9a8>)
 800750a:	3b01      	subs	r3, #1
 800750c:	2001      	movs	r0, #1
 800750e:	428b      	cmp	r3, r1
 8007510:	db00      	blt.n	8007514 <_strtod_l+0x6e8>
 8007512:	e0bd      	b.n	8007690 <_strtod_l+0x864>
 8007514:	1ac9      	subs	r1, r1, r3
 8007516:	1a52      	subs	r2, r2, r1
 8007518:	291f      	cmp	r1, #31
 800751a:	dd00      	ble.n	800751e <_strtod_l+0x6f2>
 800751c:	e0b1      	b.n	8007682 <_strtod_l+0x856>
 800751e:	4088      	lsls	r0, r1
 8007520:	2300      	movs	r3, #0
 8007522:	9014      	str	r0, [sp, #80]	; 0x50
 8007524:	9310      	str	r3, [sp, #64]	; 0x40
 8007526:	18ab      	adds	r3, r5, r2
 8007528:	9308      	str	r3, [sp, #32]
 800752a:	0013      	movs	r3, r2
 800752c:	9a06      	ldr	r2, [sp, #24]
 800752e:	4463      	add	r3, ip
 8007530:	18d3      	adds	r3, r2, r3
 8007532:	9a08      	ldr	r2, [sp, #32]
 8007534:	930c      	str	r3, [sp, #48]	; 0x30
 8007536:	002b      	movs	r3, r5
 8007538:	4295      	cmp	r5, r2
 800753a:	dd00      	ble.n	800753e <_strtod_l+0x712>
 800753c:	0013      	movs	r3, r2
 800753e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007540:	4293      	cmp	r3, r2
 8007542:	dd00      	ble.n	8007546 <_strtod_l+0x71a>
 8007544:	0013      	movs	r3, r2
 8007546:	2b00      	cmp	r3, #0
 8007548:	dd06      	ble.n	8007558 <_strtod_l+0x72c>
 800754a:	9a08      	ldr	r2, [sp, #32]
 800754c:	1aed      	subs	r5, r5, r3
 800754e:	1ad2      	subs	r2, r2, r3
 8007550:	9208      	str	r2, [sp, #32]
 8007552:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007554:	1ad2      	subs	r2, r2, r3
 8007556:	920c      	str	r2, [sp, #48]	; 0x30
 8007558:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800755a:	2b00      	cmp	r3, #0
 800755c:	d017      	beq.n	800758e <_strtod_l+0x762>
 800755e:	001a      	movs	r2, r3
 8007560:	9905      	ldr	r1, [sp, #20]
 8007562:	9804      	ldr	r0, [sp, #16]
 8007564:	f001 ff7e 	bl	8009464 <__pow5mult>
 8007568:	9005      	str	r0, [sp, #20]
 800756a:	2800      	cmp	r0, #0
 800756c:	d100      	bne.n	8007570 <_strtod_l+0x744>
 800756e:	e693      	b.n	8007298 <_strtod_l+0x46c>
 8007570:	0001      	movs	r1, r0
 8007572:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007574:	9804      	ldr	r0, [sp, #16]
 8007576:	f001 fee5 	bl	8009344 <__multiply>
 800757a:	9012      	str	r0, [sp, #72]	; 0x48
 800757c:	2800      	cmp	r0, #0
 800757e:	d100      	bne.n	8007582 <_strtod_l+0x756>
 8007580:	e68a      	b.n	8007298 <_strtod_l+0x46c>
 8007582:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007584:	9804      	ldr	r0, [sp, #16]
 8007586:	f001 fdf6 	bl	8009176 <_Bfree>
 800758a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800758c:	9322      	str	r3, [sp, #136]	; 0x88
 800758e:	9b08      	ldr	r3, [sp, #32]
 8007590:	2b00      	cmp	r3, #0
 8007592:	dd00      	ble.n	8007596 <_strtod_l+0x76a>
 8007594:	e07f      	b.n	8007696 <_strtod_l+0x86a>
 8007596:	9b07      	ldr	r3, [sp, #28]
 8007598:	2b00      	cmp	r3, #0
 800759a:	dd08      	ble.n	80075ae <_strtod_l+0x782>
 800759c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800759e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80075a0:	9804      	ldr	r0, [sp, #16]
 80075a2:	f001 ff5f 	bl	8009464 <__pow5mult>
 80075a6:	900a      	str	r0, [sp, #40]	; 0x28
 80075a8:	2800      	cmp	r0, #0
 80075aa:	d100      	bne.n	80075ae <_strtod_l+0x782>
 80075ac:	e674      	b.n	8007298 <_strtod_l+0x46c>
 80075ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	dd08      	ble.n	80075c6 <_strtod_l+0x79a>
 80075b4:	001a      	movs	r2, r3
 80075b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80075b8:	9804      	ldr	r0, [sp, #16]
 80075ba:	f001 ffa5 	bl	8009508 <__lshift>
 80075be:	900a      	str	r0, [sp, #40]	; 0x28
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d100      	bne.n	80075c6 <_strtod_l+0x79a>
 80075c4:	e668      	b.n	8007298 <_strtod_l+0x46c>
 80075c6:	2d00      	cmp	r5, #0
 80075c8:	dd08      	ble.n	80075dc <_strtod_l+0x7b0>
 80075ca:	002a      	movs	r2, r5
 80075cc:	9905      	ldr	r1, [sp, #20]
 80075ce:	9804      	ldr	r0, [sp, #16]
 80075d0:	f001 ff9a 	bl	8009508 <__lshift>
 80075d4:	9005      	str	r0, [sp, #20]
 80075d6:	2800      	cmp	r0, #0
 80075d8:	d100      	bne.n	80075dc <_strtod_l+0x7b0>
 80075da:	e65d      	b.n	8007298 <_strtod_l+0x46c>
 80075dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075de:	9922      	ldr	r1, [sp, #136]	; 0x88
 80075e0:	9804      	ldr	r0, [sp, #16]
 80075e2:	f001 fffd 	bl	80095e0 <__mdiff>
 80075e6:	1e04      	subs	r4, r0, #0
 80075e8:	d100      	bne.n	80075ec <_strtod_l+0x7c0>
 80075ea:	e655      	b.n	8007298 <_strtod_l+0x46c>
 80075ec:	2500      	movs	r5, #0
 80075ee:	68c3      	ldr	r3, [r0, #12]
 80075f0:	9905      	ldr	r1, [sp, #20]
 80075f2:	60c5      	str	r5, [r0, #12]
 80075f4:	9312      	str	r3, [sp, #72]	; 0x48
 80075f6:	f001 ffd9 	bl	80095ac <__mcmp>
 80075fa:	42a8      	cmp	r0, r5
 80075fc:	da55      	bge.n	80076aa <_strtod_l+0x87e>
 80075fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007600:	42ab      	cmp	r3, r5
 8007602:	d11b      	bne.n	800763c <_strtod_l+0x810>
 8007604:	42ae      	cmp	r6, r5
 8007606:	d119      	bne.n	800763c <_strtod_l+0x810>
 8007608:	033b      	lsls	r3, r7, #12
 800760a:	42ab      	cmp	r3, r5
 800760c:	d116      	bne.n	800763c <_strtod_l+0x810>
 800760e:	22d6      	movs	r2, #214	; 0xd6
 8007610:	4b71      	ldr	r3, [pc, #452]	; (80077d8 <_strtod_l+0x9ac>)
 8007612:	04d2      	lsls	r2, r2, #19
 8007614:	403b      	ands	r3, r7
 8007616:	4293      	cmp	r3, r2
 8007618:	d910      	bls.n	800763c <_strtod_l+0x810>
 800761a:	6963      	ldr	r3, [r4, #20]
 800761c:	42ab      	cmp	r3, r5
 800761e:	d102      	bne.n	8007626 <_strtod_l+0x7fa>
 8007620:	6923      	ldr	r3, [r4, #16]
 8007622:	2b01      	cmp	r3, #1
 8007624:	dd0a      	ble.n	800763c <_strtod_l+0x810>
 8007626:	0021      	movs	r1, r4
 8007628:	2201      	movs	r2, #1
 800762a:	9804      	ldr	r0, [sp, #16]
 800762c:	f001 ff6c 	bl	8009508 <__lshift>
 8007630:	9905      	ldr	r1, [sp, #20]
 8007632:	0004      	movs	r4, r0
 8007634:	f001 ffba 	bl	80095ac <__mcmp>
 8007638:	2800      	cmp	r0, #0
 800763a:	dc6b      	bgt.n	8007714 <_strtod_l+0x8e8>
 800763c:	9b06      	ldr	r3, [sp, #24]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d178      	bne.n	8007734 <_strtod_l+0x908>
 8007642:	e632      	b.n	80072aa <_strtod_l+0x47e>
 8007644:	2201      	movs	r2, #1
 8007646:	4214      	tst	r4, r2
 8007648:	d007      	beq.n	800765a <_strtod_l+0x82e>
 800764a:	4a64      	ldr	r2, [pc, #400]	; (80077dc <_strtod_l+0x9b0>)
 800764c:	00eb      	lsls	r3, r5, #3
 800764e:	18d3      	adds	r3, r2, r3
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f7f9 ffbc 	bl	80015d0 <__aeabi_dmul>
 8007658:	2301      	movs	r3, #1
 800765a:	3501      	adds	r5, #1
 800765c:	1064      	asrs	r4, r4, #1
 800765e:	e6df      	b.n	8007420 <_strtod_l+0x5f4>
 8007660:	2101      	movs	r1, #1
 8007662:	3b20      	subs	r3, #32
 8007664:	4249      	negs	r1, r1
 8007666:	4099      	lsls	r1, r3
 8007668:	400a      	ands	r2, r1
 800766a:	0017      	movs	r7, r2
 800766c:	e6f2      	b.n	8007454 <_strtod_l+0x628>
 800766e:	2201      	movs	r2, #1
 8007670:	4252      	negs	r2, r2
 8007672:	409a      	lsls	r2, r3
 8007674:	4016      	ands	r6, r2
 8007676:	e6ed      	b.n	8007454 <_strtod_l+0x628>
 8007678:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800767a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800767c:	1ad2      	subs	r2, r2, r3
 800767e:	4694      	mov	ip, r2
 8007680:	e73c      	b.n	80074fc <_strtod_l+0x6d0>
 8007682:	4957      	ldr	r1, [pc, #348]	; (80077e0 <_strtod_l+0x9b4>)
 8007684:	1acb      	subs	r3, r1, r3
 8007686:	0001      	movs	r1, r0
 8007688:	4099      	lsls	r1, r3
 800768a:	9110      	str	r1, [sp, #64]	; 0x40
 800768c:	9014      	str	r0, [sp, #80]	; 0x50
 800768e:	e74a      	b.n	8007526 <_strtod_l+0x6fa>
 8007690:	2300      	movs	r3, #0
 8007692:	9310      	str	r3, [sp, #64]	; 0x40
 8007694:	e7fa      	b.n	800768c <_strtod_l+0x860>
 8007696:	9a08      	ldr	r2, [sp, #32]
 8007698:	9922      	ldr	r1, [sp, #136]	; 0x88
 800769a:	9804      	ldr	r0, [sp, #16]
 800769c:	f001 ff34 	bl	8009508 <__lshift>
 80076a0:	9022      	str	r0, [sp, #136]	; 0x88
 80076a2:	2800      	cmp	r0, #0
 80076a4:	d000      	beq.n	80076a8 <_strtod_l+0x87c>
 80076a6:	e776      	b.n	8007596 <_strtod_l+0x76a>
 80076a8:	e5f6      	b.n	8007298 <_strtod_l+0x46c>
 80076aa:	970c      	str	r7, [sp, #48]	; 0x30
 80076ac:	2800      	cmp	r0, #0
 80076ae:	d000      	beq.n	80076b2 <_strtod_l+0x886>
 80076b0:	e0a0      	b.n	80077f4 <_strtod_l+0x9c8>
 80076b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076b4:	033b      	lsls	r3, r7, #12
 80076b6:	0b1b      	lsrs	r3, r3, #12
 80076b8:	2a00      	cmp	r2, #0
 80076ba:	d027      	beq.n	800770c <_strtod_l+0x8e0>
 80076bc:	4a49      	ldr	r2, [pc, #292]	; (80077e4 <_strtod_l+0x9b8>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d157      	bne.n	8007772 <_strtod_l+0x946>
 80076c2:	2201      	movs	r2, #1
 80076c4:	9b06      	ldr	r3, [sp, #24]
 80076c6:	4252      	negs	r2, r2
 80076c8:	0031      	movs	r1, r6
 80076ca:	0010      	movs	r0, r2
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00b      	beq.n	80076e8 <_strtod_l+0x8bc>
 80076d0:	25d4      	movs	r5, #212	; 0xd4
 80076d2:	4b41      	ldr	r3, [pc, #260]	; (80077d8 <_strtod_l+0x9ac>)
 80076d4:	04ed      	lsls	r5, r5, #19
 80076d6:	403b      	ands	r3, r7
 80076d8:	0010      	movs	r0, r2
 80076da:	42ab      	cmp	r3, r5
 80076dc:	d804      	bhi.n	80076e8 <_strtod_l+0x8bc>
 80076de:	306c      	adds	r0, #108	; 0x6c
 80076e0:	0d1b      	lsrs	r3, r3, #20
 80076e2:	1ac3      	subs	r3, r0, r3
 80076e4:	409a      	lsls	r2, r3
 80076e6:	0010      	movs	r0, r2
 80076e8:	4281      	cmp	r1, r0
 80076ea:	d142      	bne.n	8007772 <_strtod_l+0x946>
 80076ec:	4b3e      	ldr	r3, [pc, #248]	; (80077e8 <_strtod_l+0x9bc>)
 80076ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d102      	bne.n	80076fa <_strtod_l+0x8ce>
 80076f4:	1c4b      	adds	r3, r1, #1
 80076f6:	d100      	bne.n	80076fa <_strtod_l+0x8ce>
 80076f8:	e5ce      	b.n	8007298 <_strtod_l+0x46c>
 80076fa:	4b37      	ldr	r3, [pc, #220]	; (80077d8 <_strtod_l+0x9ac>)
 80076fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076fe:	2600      	movs	r6, #0
 8007700:	401a      	ands	r2, r3
 8007702:	0013      	movs	r3, r2
 8007704:	2280      	movs	r2, #128	; 0x80
 8007706:	0352      	lsls	r2, r2, #13
 8007708:	189f      	adds	r7, r3, r2
 800770a:	e797      	b.n	800763c <_strtod_l+0x810>
 800770c:	2b00      	cmp	r3, #0
 800770e:	d130      	bne.n	8007772 <_strtod_l+0x946>
 8007710:	2e00      	cmp	r6, #0
 8007712:	d12e      	bne.n	8007772 <_strtod_l+0x946>
 8007714:	9906      	ldr	r1, [sp, #24]
 8007716:	003b      	movs	r3, r7
 8007718:	4a2f      	ldr	r2, [pc, #188]	; (80077d8 <_strtod_l+0x9ac>)
 800771a:	2900      	cmp	r1, #0
 800771c:	d020      	beq.n	8007760 <_strtod_l+0x934>
 800771e:	0011      	movs	r1, r2
 8007720:	20d6      	movs	r0, #214	; 0xd6
 8007722:	4039      	ands	r1, r7
 8007724:	04c0      	lsls	r0, r0, #19
 8007726:	4281      	cmp	r1, r0
 8007728:	dc1a      	bgt.n	8007760 <_strtod_l+0x934>
 800772a:	23dc      	movs	r3, #220	; 0xdc
 800772c:	049b      	lsls	r3, r3, #18
 800772e:	4299      	cmp	r1, r3
 8007730:	dc00      	bgt.n	8007734 <_strtod_l+0x908>
 8007732:	e646      	b.n	80073c2 <_strtod_l+0x596>
 8007734:	4b2d      	ldr	r3, [pc, #180]	; (80077ec <_strtod_l+0x9c0>)
 8007736:	0030      	movs	r0, r6
 8007738:	931b      	str	r3, [sp, #108]	; 0x6c
 800773a:	2300      	movs	r3, #0
 800773c:	931a      	str	r3, [sp, #104]	; 0x68
 800773e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007740:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007742:	0039      	movs	r1, r7
 8007744:	f7f9 ff44 	bl	80015d0 <__aeabi_dmul>
 8007748:	0006      	movs	r6, r0
 800774a:	000f      	movs	r7, r1
 800774c:	1e0b      	subs	r3, r1, #0
 800774e:	d000      	beq.n	8007752 <_strtod_l+0x926>
 8007750:	e5ab      	b.n	80072aa <_strtod_l+0x47e>
 8007752:	2800      	cmp	r0, #0
 8007754:	d000      	beq.n	8007758 <_strtod_l+0x92c>
 8007756:	e5a8      	b.n	80072aa <_strtod_l+0x47e>
 8007758:	9a04      	ldr	r2, [sp, #16]
 800775a:	3322      	adds	r3, #34	; 0x22
 800775c:	6013      	str	r3, [r2, #0]
 800775e:	e5a4      	b.n	80072aa <_strtod_l+0x47e>
 8007760:	2601      	movs	r6, #1
 8007762:	4013      	ands	r3, r2
 8007764:	4a22      	ldr	r2, [pc, #136]	; (80077f0 <_strtod_l+0x9c4>)
 8007766:	4276      	negs	r6, r6
 8007768:	189b      	adds	r3, r3, r2
 800776a:	4a1e      	ldr	r2, [pc, #120]	; (80077e4 <_strtod_l+0x9b8>)
 800776c:	431a      	orrs	r2, r3
 800776e:	0017      	movs	r7, r2
 8007770:	e764      	b.n	800763c <_strtod_l+0x810>
 8007772:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007774:	2b00      	cmp	r3, #0
 8007776:	d015      	beq.n	80077a4 <_strtod_l+0x978>
 8007778:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800777a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800777c:	4213      	tst	r3, r2
 800777e:	d100      	bne.n	8007782 <_strtod_l+0x956>
 8007780:	e75c      	b.n	800763c <_strtod_l+0x810>
 8007782:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007784:	9a06      	ldr	r2, [sp, #24]
 8007786:	0030      	movs	r0, r6
 8007788:	0039      	movs	r1, r7
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00f      	beq.n	80077ae <_strtod_l+0x982>
 800778e:	f7ff fb35 	bl	8006dfc <sulp>
 8007792:	0002      	movs	r2, r0
 8007794:	000b      	movs	r3, r1
 8007796:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007798:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800779a:	f7f8 fff3 	bl	8000784 <__aeabi_dadd>
 800779e:	0006      	movs	r6, r0
 80077a0:	000f      	movs	r7, r1
 80077a2:	e74b      	b.n	800763c <_strtod_l+0x810>
 80077a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077a6:	4233      	tst	r3, r6
 80077a8:	d100      	bne.n	80077ac <_strtod_l+0x980>
 80077aa:	e747      	b.n	800763c <_strtod_l+0x810>
 80077ac:	e7e9      	b.n	8007782 <_strtod_l+0x956>
 80077ae:	f7ff fb25 	bl	8006dfc <sulp>
 80077b2:	0002      	movs	r2, r0
 80077b4:	000b      	movs	r3, r1
 80077b6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80077b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80077ba:	f7fa f97b 	bl	8001ab4 <__aeabi_dsub>
 80077be:	2200      	movs	r2, #0
 80077c0:	2300      	movs	r3, #0
 80077c2:	0006      	movs	r6, r0
 80077c4:	000f      	movs	r7, r1
 80077c6:	f7f8 fe35 	bl	8000434 <__aeabi_dcmpeq>
 80077ca:	2800      	cmp	r0, #0
 80077cc:	d000      	beq.n	80077d0 <_strtod_l+0x9a4>
 80077ce:	e5f8      	b.n	80073c2 <_strtod_l+0x596>
 80077d0:	e734      	b.n	800763c <_strtod_l+0x810>
 80077d2:	46c0      	nop			; (mov r8, r8)
 80077d4:	fffffc02 	.word	0xfffffc02
 80077d8:	7ff00000 	.word	0x7ff00000
 80077dc:	0800a7f0 	.word	0x0800a7f0
 80077e0:	fffffbe2 	.word	0xfffffbe2
 80077e4:	000fffff 	.word	0x000fffff
 80077e8:	7fefffff 	.word	0x7fefffff
 80077ec:	39500000 	.word	0x39500000
 80077f0:	fff00000 	.word	0xfff00000
 80077f4:	9905      	ldr	r1, [sp, #20]
 80077f6:	0020      	movs	r0, r4
 80077f8:	f002 f81c 	bl	8009834 <__ratio>
 80077fc:	2380      	movs	r3, #128	; 0x80
 80077fe:	2200      	movs	r2, #0
 8007800:	05db      	lsls	r3, r3, #23
 8007802:	9008      	str	r0, [sp, #32]
 8007804:	9109      	str	r1, [sp, #36]	; 0x24
 8007806:	f7f8 fe25 	bl	8000454 <__aeabi_dcmple>
 800780a:	2800      	cmp	r0, #0
 800780c:	d100      	bne.n	8007810 <_strtod_l+0x9e4>
 800780e:	e07f      	b.n	8007910 <_strtod_l+0xae4>
 8007810:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007812:	2b00      	cmp	r3, #0
 8007814:	d04b      	beq.n	80078ae <_strtod_l+0xa82>
 8007816:	2200      	movs	r2, #0
 8007818:	4b8a      	ldr	r3, [pc, #552]	; (8007a44 <_strtod_l+0xc18>)
 800781a:	9210      	str	r2, [sp, #64]	; 0x40
 800781c:	9311      	str	r3, [sp, #68]	; 0x44
 800781e:	4b89      	ldr	r3, [pc, #548]	; (8007a44 <_strtod_l+0xc18>)
 8007820:	9308      	str	r3, [sp, #32]
 8007822:	4a89      	ldr	r2, [pc, #548]	; (8007a48 <_strtod_l+0xc1c>)
 8007824:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007826:	4013      	ands	r3, r2
 8007828:	9314      	str	r3, [sp, #80]	; 0x50
 800782a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800782c:	4b87      	ldr	r3, [pc, #540]	; (8007a4c <_strtod_l+0xc20>)
 800782e:	429a      	cmp	r2, r3
 8007830:	d000      	beq.n	8007834 <_strtod_l+0xa08>
 8007832:	e0ba      	b.n	80079aa <_strtod_l+0xb7e>
 8007834:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007836:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007838:	921a      	str	r2, [sp, #104]	; 0x68
 800783a:	931b      	str	r3, [sp, #108]	; 0x6c
 800783c:	4a84      	ldr	r2, [pc, #528]	; (8007a50 <_strtod_l+0xc24>)
 800783e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007840:	4694      	mov	ip, r2
 8007842:	4463      	add	r3, ip
 8007844:	001f      	movs	r7, r3
 8007846:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007848:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800784a:	0030      	movs	r0, r6
 800784c:	0039      	movs	r1, r7
 800784e:	920c      	str	r2, [sp, #48]	; 0x30
 8007850:	930d      	str	r3, [sp, #52]	; 0x34
 8007852:	f001 ff29 	bl	80096a8 <__ulp>
 8007856:	0002      	movs	r2, r0
 8007858:	000b      	movs	r3, r1
 800785a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800785c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800785e:	f7f9 feb7 	bl	80015d0 <__aeabi_dmul>
 8007862:	0032      	movs	r2, r6
 8007864:	003b      	movs	r3, r7
 8007866:	f7f8 ff8d 	bl	8000784 <__aeabi_dadd>
 800786a:	4a77      	ldr	r2, [pc, #476]	; (8007a48 <_strtod_l+0xc1c>)
 800786c:	4b79      	ldr	r3, [pc, #484]	; (8007a54 <_strtod_l+0xc28>)
 800786e:	0006      	movs	r6, r0
 8007870:	400a      	ands	r2, r1
 8007872:	429a      	cmp	r2, r3
 8007874:	d964      	bls.n	8007940 <_strtod_l+0xb14>
 8007876:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007878:	4a77      	ldr	r2, [pc, #476]	; (8007a58 <_strtod_l+0xc2c>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d103      	bne.n	8007886 <_strtod_l+0xa5a>
 800787e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007880:	3301      	adds	r3, #1
 8007882:	d100      	bne.n	8007886 <_strtod_l+0xa5a>
 8007884:	e508      	b.n	8007298 <_strtod_l+0x46c>
 8007886:	2601      	movs	r6, #1
 8007888:	4f73      	ldr	r7, [pc, #460]	; (8007a58 <_strtod_l+0xc2c>)
 800788a:	4276      	negs	r6, r6
 800788c:	9922      	ldr	r1, [sp, #136]	; 0x88
 800788e:	9804      	ldr	r0, [sp, #16]
 8007890:	f001 fc71 	bl	8009176 <_Bfree>
 8007894:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007896:	9804      	ldr	r0, [sp, #16]
 8007898:	f001 fc6d 	bl	8009176 <_Bfree>
 800789c:	9905      	ldr	r1, [sp, #20]
 800789e:	9804      	ldr	r0, [sp, #16]
 80078a0:	f001 fc69 	bl	8009176 <_Bfree>
 80078a4:	0021      	movs	r1, r4
 80078a6:	9804      	ldr	r0, [sp, #16]
 80078a8:	f001 fc65 	bl	8009176 <_Bfree>
 80078ac:	e5f4      	b.n	8007498 <_strtod_l+0x66c>
 80078ae:	2e00      	cmp	r6, #0
 80078b0:	d11e      	bne.n	80078f0 <_strtod_l+0xac4>
 80078b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078b4:	031b      	lsls	r3, r3, #12
 80078b6:	d121      	bne.n	80078fc <_strtod_l+0xad0>
 80078b8:	9808      	ldr	r0, [sp, #32]
 80078ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078bc:	2200      	movs	r2, #0
 80078be:	4b61      	ldr	r3, [pc, #388]	; (8007a44 <_strtod_l+0xc18>)
 80078c0:	f7f8 fdbe 	bl	8000440 <__aeabi_dcmplt>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d11f      	bne.n	8007908 <_strtod_l+0xadc>
 80078c8:	9808      	ldr	r0, [sp, #32]
 80078ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078cc:	2200      	movs	r2, #0
 80078ce:	4b63      	ldr	r3, [pc, #396]	; (8007a5c <_strtod_l+0xc30>)
 80078d0:	f7f9 fe7e 	bl	80015d0 <__aeabi_dmul>
 80078d4:	0005      	movs	r5, r0
 80078d6:	9108      	str	r1, [sp, #32]
 80078d8:	2280      	movs	r2, #128	; 0x80
 80078da:	0612      	lsls	r2, r2, #24
 80078dc:	4694      	mov	ip, r2
 80078de:	9b08      	ldr	r3, [sp, #32]
 80078e0:	951e      	str	r5, [sp, #120]	; 0x78
 80078e2:	4463      	add	r3, ip
 80078e4:	931f      	str	r3, [sp, #124]	; 0x7c
 80078e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80078e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80078ea:	9210      	str	r2, [sp, #64]	; 0x40
 80078ec:	9311      	str	r3, [sp, #68]	; 0x44
 80078ee:	e798      	b.n	8007822 <_strtod_l+0x9f6>
 80078f0:	2e01      	cmp	r6, #1
 80078f2:	d103      	bne.n	80078fc <_strtod_l+0xad0>
 80078f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d100      	bne.n	80078fc <_strtod_l+0xad0>
 80078fa:	e562      	b.n	80073c2 <_strtod_l+0x596>
 80078fc:	2200      	movs	r2, #0
 80078fe:	4b58      	ldr	r3, [pc, #352]	; (8007a60 <_strtod_l+0xc34>)
 8007900:	2500      	movs	r5, #0
 8007902:	9210      	str	r2, [sp, #64]	; 0x40
 8007904:	9311      	str	r3, [sp, #68]	; 0x44
 8007906:	e78a      	b.n	800781e <_strtod_l+0x9f2>
 8007908:	4b54      	ldr	r3, [pc, #336]	; (8007a5c <_strtod_l+0xc30>)
 800790a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800790c:	9308      	str	r3, [sp, #32]
 800790e:	e7e3      	b.n	80078d8 <_strtod_l+0xaac>
 8007910:	4b52      	ldr	r3, [pc, #328]	; (8007a5c <_strtod_l+0xc30>)
 8007912:	9808      	ldr	r0, [sp, #32]
 8007914:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007916:	2200      	movs	r2, #0
 8007918:	f7f9 fe5a 	bl	80015d0 <__aeabi_dmul>
 800791c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800791e:	0005      	movs	r5, r0
 8007920:	9108      	str	r1, [sp, #32]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d107      	bne.n	8007936 <_strtod_l+0xb0a>
 8007926:	2380      	movs	r3, #128	; 0x80
 8007928:	061b      	lsls	r3, r3, #24
 800792a:	18cb      	adds	r3, r1, r3
 800792c:	9016      	str	r0, [sp, #88]	; 0x58
 800792e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007930:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007932:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007934:	e7d9      	b.n	80078ea <_strtod_l+0xabe>
 8007936:	0002      	movs	r2, r0
 8007938:	9b08      	ldr	r3, [sp, #32]
 800793a:	9216      	str	r2, [sp, #88]	; 0x58
 800793c:	9317      	str	r3, [sp, #92]	; 0x5c
 800793e:	e7f7      	b.n	8007930 <_strtod_l+0xb04>
 8007940:	23d4      	movs	r3, #212	; 0xd4
 8007942:	049b      	lsls	r3, r3, #18
 8007944:	18cf      	adds	r7, r1, r3
 8007946:	9b06      	ldr	r3, [sp, #24]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d19f      	bne.n	800788c <_strtod_l+0xa60>
 800794c:	4b3e      	ldr	r3, [pc, #248]	; (8007a48 <_strtod_l+0xc1c>)
 800794e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007950:	970c      	str	r7, [sp, #48]	; 0x30
 8007952:	403b      	ands	r3, r7
 8007954:	429a      	cmp	r2, r3
 8007956:	d199      	bne.n	800788c <_strtod_l+0xa60>
 8007958:	9908      	ldr	r1, [sp, #32]
 800795a:	0028      	movs	r0, r5
 800795c:	f7fa fc0e 	bl	800217c <__aeabi_d2iz>
 8007960:	f7fa fc42 	bl	80021e8 <__aeabi_i2d>
 8007964:	000b      	movs	r3, r1
 8007966:	0002      	movs	r2, r0
 8007968:	9908      	ldr	r1, [sp, #32]
 800796a:	0028      	movs	r0, r5
 800796c:	f7fa f8a2 	bl	8001ab4 <__aeabi_dsub>
 8007970:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007972:	9008      	str	r0, [sp, #32]
 8007974:	9109      	str	r1, [sp, #36]	; 0x24
 8007976:	2b00      	cmp	r3, #0
 8007978:	d104      	bne.n	8007984 <_strtod_l+0xb58>
 800797a:	2e00      	cmp	r6, #0
 800797c:	d102      	bne.n	8007984 <_strtod_l+0xb58>
 800797e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007980:	031b      	lsls	r3, r3, #12
 8007982:	d058      	beq.n	8007a36 <_strtod_l+0xc0a>
 8007984:	9808      	ldr	r0, [sp, #32]
 8007986:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007988:	4a36      	ldr	r2, [pc, #216]	; (8007a64 <_strtod_l+0xc38>)
 800798a:	4b37      	ldr	r3, [pc, #220]	; (8007a68 <_strtod_l+0xc3c>)
 800798c:	f7f8 fd58 	bl	8000440 <__aeabi_dcmplt>
 8007990:	2800      	cmp	r0, #0
 8007992:	d000      	beq.n	8007996 <_strtod_l+0xb6a>
 8007994:	e489      	b.n	80072aa <_strtod_l+0x47e>
 8007996:	9808      	ldr	r0, [sp, #32]
 8007998:	9909      	ldr	r1, [sp, #36]	; 0x24
 800799a:	4a34      	ldr	r2, [pc, #208]	; (8007a6c <_strtod_l+0xc40>)
 800799c:	4b2f      	ldr	r3, [pc, #188]	; (8007a5c <_strtod_l+0xc30>)
 800799e:	f7f8 fd63 	bl	8000468 <__aeabi_dcmpgt>
 80079a2:	2800      	cmp	r0, #0
 80079a4:	d100      	bne.n	80079a8 <_strtod_l+0xb7c>
 80079a6:	e771      	b.n	800788c <_strtod_l+0xa60>
 80079a8:	e47f      	b.n	80072aa <_strtod_l+0x47e>
 80079aa:	9b06      	ldr	r3, [sp, #24]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d02a      	beq.n	8007a06 <_strtod_l+0xbda>
 80079b0:	23d4      	movs	r3, #212	; 0xd4
 80079b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80079b4:	04db      	lsls	r3, r3, #19
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d825      	bhi.n	8007a06 <_strtod_l+0xbda>
 80079ba:	4a2d      	ldr	r2, [pc, #180]	; (8007a70 <_strtod_l+0xc44>)
 80079bc:	4b2d      	ldr	r3, [pc, #180]	; (8007a74 <_strtod_l+0xc48>)
 80079be:	0028      	movs	r0, r5
 80079c0:	9908      	ldr	r1, [sp, #32]
 80079c2:	f7f8 fd47 	bl	8000454 <__aeabi_dcmple>
 80079c6:	2800      	cmp	r0, #0
 80079c8:	d016      	beq.n	80079f8 <_strtod_l+0xbcc>
 80079ca:	0028      	movs	r0, r5
 80079cc:	9908      	ldr	r1, [sp, #32]
 80079ce:	f7f8 fd5f 	bl	8000490 <__aeabi_d2uiz>
 80079d2:	2800      	cmp	r0, #0
 80079d4:	d100      	bne.n	80079d8 <_strtod_l+0xbac>
 80079d6:	3001      	adds	r0, #1
 80079d8:	f7fa fc40 	bl	800225c <__aeabi_ui2d>
 80079dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079de:	0005      	movs	r5, r0
 80079e0:	9108      	str	r1, [sp, #32]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d122      	bne.n	8007a2c <_strtod_l+0xc00>
 80079e6:	2380      	movs	r3, #128	; 0x80
 80079e8:	061b      	lsls	r3, r3, #24
 80079ea:	18cb      	adds	r3, r1, r3
 80079ec:	9018      	str	r0, [sp, #96]	; 0x60
 80079ee:	9319      	str	r3, [sp, #100]	; 0x64
 80079f0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80079f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80079f4:	9210      	str	r2, [sp, #64]	; 0x40
 80079f6:	9311      	str	r3, [sp, #68]	; 0x44
 80079f8:	22d6      	movs	r2, #214	; 0xd6
 80079fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079fc:	04d2      	lsls	r2, r2, #19
 80079fe:	189b      	adds	r3, r3, r2
 8007a00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007a02:	1a9b      	subs	r3, r3, r2
 8007a04:	9311      	str	r3, [sp, #68]	; 0x44
 8007a06:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007a08:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a0a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007a0c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8007a0e:	f001 fe4b 	bl	80096a8 <__ulp>
 8007a12:	0002      	movs	r2, r0
 8007a14:	000b      	movs	r3, r1
 8007a16:	0030      	movs	r0, r6
 8007a18:	0039      	movs	r1, r7
 8007a1a:	f7f9 fdd9 	bl	80015d0 <__aeabi_dmul>
 8007a1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a22:	f7f8 feaf 	bl	8000784 <__aeabi_dadd>
 8007a26:	0006      	movs	r6, r0
 8007a28:	000f      	movs	r7, r1
 8007a2a:	e78c      	b.n	8007946 <_strtod_l+0xb1a>
 8007a2c:	0002      	movs	r2, r0
 8007a2e:	9b08      	ldr	r3, [sp, #32]
 8007a30:	9218      	str	r2, [sp, #96]	; 0x60
 8007a32:	9319      	str	r3, [sp, #100]	; 0x64
 8007a34:	e7dc      	b.n	80079f0 <_strtod_l+0xbc4>
 8007a36:	4a0b      	ldr	r2, [pc, #44]	; (8007a64 <_strtod_l+0xc38>)
 8007a38:	4b0f      	ldr	r3, [pc, #60]	; (8007a78 <_strtod_l+0xc4c>)
 8007a3a:	9808      	ldr	r0, [sp, #32]
 8007a3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a3e:	f7f8 fcff 	bl	8000440 <__aeabi_dcmplt>
 8007a42:	e7ae      	b.n	80079a2 <_strtod_l+0xb76>
 8007a44:	3ff00000 	.word	0x3ff00000
 8007a48:	7ff00000 	.word	0x7ff00000
 8007a4c:	7fe00000 	.word	0x7fe00000
 8007a50:	fcb00000 	.word	0xfcb00000
 8007a54:	7c9fffff 	.word	0x7c9fffff
 8007a58:	7fefffff 	.word	0x7fefffff
 8007a5c:	3fe00000 	.word	0x3fe00000
 8007a60:	bff00000 	.word	0xbff00000
 8007a64:	94a03595 	.word	0x94a03595
 8007a68:	3fdfffff 	.word	0x3fdfffff
 8007a6c:	35afe535 	.word	0x35afe535
 8007a70:	ffc00000 	.word	0xffc00000
 8007a74:	41dfffff 	.word	0x41dfffff
 8007a78:	3fcfffff 	.word	0x3fcfffff

08007a7c <_strtod_r>:
 8007a7c:	4b04      	ldr	r3, [pc, #16]	; (8007a90 <_strtod_r+0x14>)
 8007a7e:	b510      	push	{r4, lr}
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	6a1b      	ldr	r3, [r3, #32]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d100      	bne.n	8007a8a <_strtod_r+0xe>
 8007a88:	4b02      	ldr	r3, [pc, #8]	; (8007a94 <_strtod_r+0x18>)
 8007a8a:	f7ff f9cf 	bl	8006e2c <_strtod_l>
 8007a8e:	bd10      	pop	{r4, pc}
 8007a90:	2000000c 	.word	0x2000000c
 8007a94:	20000070 	.word	0x20000070

08007a98 <_strtol_l.isra.0>:
 8007a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a9a:	001f      	movs	r7, r3
 8007a9c:	000e      	movs	r6, r1
 8007a9e:	b087      	sub	sp, #28
 8007aa0:	9005      	str	r0, [sp, #20]
 8007aa2:	9101      	str	r1, [sp, #4]
 8007aa4:	9202      	str	r2, [sp, #8]
 8007aa6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007aa8:	7834      	ldrb	r4, [r6, #0]
 8007aaa:	f001 faf3 	bl	8009094 <__locale_ctype_ptr_l>
 8007aae:	2208      	movs	r2, #8
 8007ab0:	1900      	adds	r0, r0, r4
 8007ab2:	7843      	ldrb	r3, [r0, #1]
 8007ab4:	1c75      	adds	r5, r6, #1
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	d136      	bne.n	8007b28 <_strtol_l.isra.0+0x90>
 8007aba:	2c2d      	cmp	r4, #45	; 0x2d
 8007abc:	d136      	bne.n	8007b2c <_strtol_l.isra.0+0x94>
 8007abe:	1cb5      	adds	r5, r6, #2
 8007ac0:	7874      	ldrb	r4, [r6, #1]
 8007ac2:	2601      	movs	r6, #1
 8007ac4:	2f00      	cmp	r7, #0
 8007ac6:	d062      	beq.n	8007b8e <_strtol_l.isra.0+0xf6>
 8007ac8:	2f10      	cmp	r7, #16
 8007aca:	d109      	bne.n	8007ae0 <_strtol_l.isra.0+0x48>
 8007acc:	2c30      	cmp	r4, #48	; 0x30
 8007ace:	d107      	bne.n	8007ae0 <_strtol_l.isra.0+0x48>
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	782b      	ldrb	r3, [r5, #0]
 8007ad4:	4393      	bics	r3, r2
 8007ad6:	2b58      	cmp	r3, #88	; 0x58
 8007ad8:	d154      	bne.n	8007b84 <_strtol_l.isra.0+0xec>
 8007ada:	2710      	movs	r7, #16
 8007adc:	786c      	ldrb	r4, [r5, #1]
 8007ade:	3502      	adds	r5, #2
 8007ae0:	4b2d      	ldr	r3, [pc, #180]	; (8007b98 <_strtol_l.isra.0+0x100>)
 8007ae2:	0039      	movs	r1, r7
 8007ae4:	18f3      	adds	r3, r6, r3
 8007ae6:	0018      	movs	r0, r3
 8007ae8:	9303      	str	r3, [sp, #12]
 8007aea:	f7f8 fba3 	bl	8000234 <__aeabi_uidivmod>
 8007aee:	9104      	str	r1, [sp, #16]
 8007af0:	2101      	movs	r1, #1
 8007af2:	2300      	movs	r3, #0
 8007af4:	4249      	negs	r1, r1
 8007af6:	0002      	movs	r2, r0
 8007af8:	468c      	mov	ip, r1
 8007afa:	0018      	movs	r0, r3
 8007afc:	0021      	movs	r1, r4
 8007afe:	3930      	subs	r1, #48	; 0x30
 8007b00:	2909      	cmp	r1, #9
 8007b02:	d81a      	bhi.n	8007b3a <_strtol_l.isra.0+0xa2>
 8007b04:	000c      	movs	r4, r1
 8007b06:	42a7      	cmp	r7, r4
 8007b08:	dd23      	ble.n	8007b52 <_strtol_l.isra.0+0xba>
 8007b0a:	1c59      	adds	r1, r3, #1
 8007b0c:	d009      	beq.n	8007b22 <_strtol_l.isra.0+0x8a>
 8007b0e:	4663      	mov	r3, ip
 8007b10:	4282      	cmp	r2, r0
 8007b12:	d306      	bcc.n	8007b22 <_strtol_l.isra.0+0x8a>
 8007b14:	d102      	bne.n	8007b1c <_strtol_l.isra.0+0x84>
 8007b16:	9904      	ldr	r1, [sp, #16]
 8007b18:	42a1      	cmp	r1, r4
 8007b1a:	db02      	blt.n	8007b22 <_strtol_l.isra.0+0x8a>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	4378      	muls	r0, r7
 8007b20:	1820      	adds	r0, r4, r0
 8007b22:	782c      	ldrb	r4, [r5, #0]
 8007b24:	3501      	adds	r5, #1
 8007b26:	e7e9      	b.n	8007afc <_strtol_l.isra.0+0x64>
 8007b28:	002e      	movs	r6, r5
 8007b2a:	e7bc      	b.n	8007aa6 <_strtol_l.isra.0+0xe>
 8007b2c:	2c2b      	cmp	r4, #43	; 0x2b
 8007b2e:	d001      	beq.n	8007b34 <_strtol_l.isra.0+0x9c>
 8007b30:	001e      	movs	r6, r3
 8007b32:	e7c7      	b.n	8007ac4 <_strtol_l.isra.0+0x2c>
 8007b34:	1cb5      	adds	r5, r6, #2
 8007b36:	7874      	ldrb	r4, [r6, #1]
 8007b38:	e7fa      	b.n	8007b30 <_strtol_l.isra.0+0x98>
 8007b3a:	0021      	movs	r1, r4
 8007b3c:	3941      	subs	r1, #65	; 0x41
 8007b3e:	2919      	cmp	r1, #25
 8007b40:	d801      	bhi.n	8007b46 <_strtol_l.isra.0+0xae>
 8007b42:	3c37      	subs	r4, #55	; 0x37
 8007b44:	e7df      	b.n	8007b06 <_strtol_l.isra.0+0x6e>
 8007b46:	0021      	movs	r1, r4
 8007b48:	3961      	subs	r1, #97	; 0x61
 8007b4a:	2919      	cmp	r1, #25
 8007b4c:	d801      	bhi.n	8007b52 <_strtol_l.isra.0+0xba>
 8007b4e:	3c57      	subs	r4, #87	; 0x57
 8007b50:	e7d9      	b.n	8007b06 <_strtol_l.isra.0+0x6e>
 8007b52:	1c5a      	adds	r2, r3, #1
 8007b54:	d108      	bne.n	8007b68 <_strtol_l.isra.0+0xd0>
 8007b56:	9a05      	ldr	r2, [sp, #20]
 8007b58:	3323      	adds	r3, #35	; 0x23
 8007b5a:	6013      	str	r3, [r2, #0]
 8007b5c:	9b02      	ldr	r3, [sp, #8]
 8007b5e:	9803      	ldr	r0, [sp, #12]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d109      	bne.n	8007b78 <_strtol_l.isra.0+0xe0>
 8007b64:	b007      	add	sp, #28
 8007b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b68:	2e00      	cmp	r6, #0
 8007b6a:	d000      	beq.n	8007b6e <_strtol_l.isra.0+0xd6>
 8007b6c:	4240      	negs	r0, r0
 8007b6e:	9a02      	ldr	r2, [sp, #8]
 8007b70:	2a00      	cmp	r2, #0
 8007b72:	d0f7      	beq.n	8007b64 <_strtol_l.isra.0+0xcc>
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <_strtol_l.isra.0+0xe4>
 8007b78:	1e6b      	subs	r3, r5, #1
 8007b7a:	9301      	str	r3, [sp, #4]
 8007b7c:	9b02      	ldr	r3, [sp, #8]
 8007b7e:	9a01      	ldr	r2, [sp, #4]
 8007b80:	601a      	str	r2, [r3, #0]
 8007b82:	e7ef      	b.n	8007b64 <_strtol_l.isra.0+0xcc>
 8007b84:	2430      	movs	r4, #48	; 0x30
 8007b86:	2f00      	cmp	r7, #0
 8007b88:	d1aa      	bne.n	8007ae0 <_strtol_l.isra.0+0x48>
 8007b8a:	2708      	movs	r7, #8
 8007b8c:	e7a8      	b.n	8007ae0 <_strtol_l.isra.0+0x48>
 8007b8e:	2c30      	cmp	r4, #48	; 0x30
 8007b90:	d09e      	beq.n	8007ad0 <_strtol_l.isra.0+0x38>
 8007b92:	270a      	movs	r7, #10
 8007b94:	e7a4      	b.n	8007ae0 <_strtol_l.isra.0+0x48>
 8007b96:	46c0      	nop			; (mov r8, r8)
 8007b98:	7fffffff 	.word	0x7fffffff

08007b9c <_strtol_r>:
 8007b9c:	b513      	push	{r0, r1, r4, lr}
 8007b9e:	4c05      	ldr	r4, [pc, #20]	; (8007bb4 <_strtol_r+0x18>)
 8007ba0:	6824      	ldr	r4, [r4, #0]
 8007ba2:	6a24      	ldr	r4, [r4, #32]
 8007ba4:	2c00      	cmp	r4, #0
 8007ba6:	d100      	bne.n	8007baa <_strtol_r+0xe>
 8007ba8:	4c03      	ldr	r4, [pc, #12]	; (8007bb8 <_strtol_r+0x1c>)
 8007baa:	9400      	str	r4, [sp, #0]
 8007bac:	f7ff ff74 	bl	8007a98 <_strtol_l.isra.0>
 8007bb0:	bd16      	pop	{r1, r2, r4, pc}
 8007bb2:	46c0      	nop			; (mov r8, r8)
 8007bb4:	2000000c 	.word	0x2000000c
 8007bb8:	20000070 	.word	0x20000070

08007bbc <quorem>:
 8007bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bbe:	6903      	ldr	r3, [r0, #16]
 8007bc0:	690c      	ldr	r4, [r1, #16]
 8007bc2:	b089      	sub	sp, #36	; 0x24
 8007bc4:	0007      	movs	r7, r0
 8007bc6:	9105      	str	r1, [sp, #20]
 8007bc8:	2600      	movs	r6, #0
 8007bca:	42a3      	cmp	r3, r4
 8007bcc:	db65      	blt.n	8007c9a <quorem+0xde>
 8007bce:	000b      	movs	r3, r1
 8007bd0:	3c01      	subs	r4, #1
 8007bd2:	3314      	adds	r3, #20
 8007bd4:	00a5      	lsls	r5, r4, #2
 8007bd6:	9303      	str	r3, [sp, #12]
 8007bd8:	195b      	adds	r3, r3, r5
 8007bda:	9304      	str	r3, [sp, #16]
 8007bdc:	0003      	movs	r3, r0
 8007bde:	3314      	adds	r3, #20
 8007be0:	9302      	str	r3, [sp, #8]
 8007be2:	195d      	adds	r5, r3, r5
 8007be4:	9b04      	ldr	r3, [sp, #16]
 8007be6:	6828      	ldr	r0, [r5, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	1c59      	adds	r1, r3, #1
 8007bec:	9301      	str	r3, [sp, #4]
 8007bee:	f7f8 fa9b 	bl	8000128 <__udivsi3>
 8007bf2:	9001      	str	r0, [sp, #4]
 8007bf4:	42b0      	cmp	r0, r6
 8007bf6:	d029      	beq.n	8007c4c <quorem+0x90>
 8007bf8:	9b03      	ldr	r3, [sp, #12]
 8007bfa:	9802      	ldr	r0, [sp, #8]
 8007bfc:	469c      	mov	ip, r3
 8007bfe:	9606      	str	r6, [sp, #24]
 8007c00:	4662      	mov	r2, ip
 8007c02:	ca08      	ldmia	r2!, {r3}
 8007c04:	4694      	mov	ip, r2
 8007c06:	9a01      	ldr	r2, [sp, #4]
 8007c08:	b299      	uxth	r1, r3
 8007c0a:	4351      	muls	r1, r2
 8007c0c:	0c1b      	lsrs	r3, r3, #16
 8007c0e:	4353      	muls	r3, r2
 8007c10:	1989      	adds	r1, r1, r6
 8007c12:	0c0a      	lsrs	r2, r1, #16
 8007c14:	189b      	adds	r3, r3, r2
 8007c16:	9307      	str	r3, [sp, #28]
 8007c18:	0c1e      	lsrs	r6, r3, #16
 8007c1a:	6803      	ldr	r3, [r0, #0]
 8007c1c:	b289      	uxth	r1, r1
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	9b06      	ldr	r3, [sp, #24]
 8007c22:	18d2      	adds	r2, r2, r3
 8007c24:	6803      	ldr	r3, [r0, #0]
 8007c26:	1a52      	subs	r2, r2, r1
 8007c28:	0c19      	lsrs	r1, r3, #16
 8007c2a:	466b      	mov	r3, sp
 8007c2c:	8b9b      	ldrh	r3, [r3, #28]
 8007c2e:	1acb      	subs	r3, r1, r3
 8007c30:	1411      	asrs	r1, r2, #16
 8007c32:	185b      	adds	r3, r3, r1
 8007c34:	1419      	asrs	r1, r3, #16
 8007c36:	b292      	uxth	r2, r2
 8007c38:	041b      	lsls	r3, r3, #16
 8007c3a:	431a      	orrs	r2, r3
 8007c3c:	9b04      	ldr	r3, [sp, #16]
 8007c3e:	9106      	str	r1, [sp, #24]
 8007c40:	c004      	stmia	r0!, {r2}
 8007c42:	4563      	cmp	r3, ip
 8007c44:	d2dc      	bcs.n	8007c00 <quorem+0x44>
 8007c46:	682b      	ldr	r3, [r5, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d02d      	beq.n	8007ca8 <quorem+0xec>
 8007c4c:	9905      	ldr	r1, [sp, #20]
 8007c4e:	0038      	movs	r0, r7
 8007c50:	f001 fcac 	bl	80095ac <__mcmp>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	db1f      	blt.n	8007c98 <quorem+0xdc>
 8007c58:	2500      	movs	r5, #0
 8007c5a:	9b01      	ldr	r3, [sp, #4]
 8007c5c:	9802      	ldr	r0, [sp, #8]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	9903      	ldr	r1, [sp, #12]
 8007c62:	9301      	str	r3, [sp, #4]
 8007c64:	6802      	ldr	r2, [r0, #0]
 8007c66:	c908      	ldmia	r1!, {r3}
 8007c68:	b292      	uxth	r2, r2
 8007c6a:	1955      	adds	r5, r2, r5
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	1aaa      	subs	r2, r5, r2
 8007c70:	6805      	ldr	r5, [r0, #0]
 8007c72:	0c1b      	lsrs	r3, r3, #16
 8007c74:	0c2d      	lsrs	r5, r5, #16
 8007c76:	1aeb      	subs	r3, r5, r3
 8007c78:	1415      	asrs	r5, r2, #16
 8007c7a:	195b      	adds	r3, r3, r5
 8007c7c:	141d      	asrs	r5, r3, #16
 8007c7e:	b292      	uxth	r2, r2
 8007c80:	041b      	lsls	r3, r3, #16
 8007c82:	4313      	orrs	r3, r2
 8007c84:	c008      	stmia	r0!, {r3}
 8007c86:	9b04      	ldr	r3, [sp, #16]
 8007c88:	428b      	cmp	r3, r1
 8007c8a:	d2eb      	bcs.n	8007c64 <quorem+0xa8>
 8007c8c:	9a02      	ldr	r2, [sp, #8]
 8007c8e:	00a3      	lsls	r3, r4, #2
 8007c90:	18d3      	adds	r3, r2, r3
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	2a00      	cmp	r2, #0
 8007c96:	d011      	beq.n	8007cbc <quorem+0x100>
 8007c98:	9e01      	ldr	r6, [sp, #4]
 8007c9a:	0030      	movs	r0, r6
 8007c9c:	b009      	add	sp, #36	; 0x24
 8007c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ca0:	682b      	ldr	r3, [r5, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d104      	bne.n	8007cb0 <quorem+0xf4>
 8007ca6:	3c01      	subs	r4, #1
 8007ca8:	9b02      	ldr	r3, [sp, #8]
 8007caa:	3d04      	subs	r5, #4
 8007cac:	42ab      	cmp	r3, r5
 8007cae:	d3f7      	bcc.n	8007ca0 <quorem+0xe4>
 8007cb0:	613c      	str	r4, [r7, #16]
 8007cb2:	e7cb      	b.n	8007c4c <quorem+0x90>
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	2a00      	cmp	r2, #0
 8007cb8:	d104      	bne.n	8007cc4 <quorem+0x108>
 8007cba:	3c01      	subs	r4, #1
 8007cbc:	9a02      	ldr	r2, [sp, #8]
 8007cbe:	3b04      	subs	r3, #4
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d3f7      	bcc.n	8007cb4 <quorem+0xf8>
 8007cc4:	613c      	str	r4, [r7, #16]
 8007cc6:	e7e7      	b.n	8007c98 <quorem+0xdc>

08007cc8 <_dtoa_r>:
 8007cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cca:	0016      	movs	r6, r2
 8007ccc:	001f      	movs	r7, r3
 8007cce:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007cd0:	b09b      	sub	sp, #108	; 0x6c
 8007cd2:	9002      	str	r0, [sp, #8]
 8007cd4:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8007cd6:	9606      	str	r6, [sp, #24]
 8007cd8:	9707      	str	r7, [sp, #28]
 8007cda:	2c00      	cmp	r4, #0
 8007cdc:	d108      	bne.n	8007cf0 <_dtoa_r+0x28>
 8007cde:	2010      	movs	r0, #16
 8007ce0:	f001 f9ea 	bl	80090b8 <malloc>
 8007ce4:	9b02      	ldr	r3, [sp, #8]
 8007ce6:	6258      	str	r0, [r3, #36]	; 0x24
 8007ce8:	6044      	str	r4, [r0, #4]
 8007cea:	6084      	str	r4, [r0, #8]
 8007cec:	6004      	str	r4, [r0, #0]
 8007cee:	60c4      	str	r4, [r0, #12]
 8007cf0:	9b02      	ldr	r3, [sp, #8]
 8007cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf4:	6819      	ldr	r1, [r3, #0]
 8007cf6:	2900      	cmp	r1, #0
 8007cf8:	d00b      	beq.n	8007d12 <_dtoa_r+0x4a>
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	4093      	lsls	r3, r2
 8007d00:	604a      	str	r2, [r1, #4]
 8007d02:	608b      	str	r3, [r1, #8]
 8007d04:	9802      	ldr	r0, [sp, #8]
 8007d06:	f001 fa36 	bl	8009176 <_Bfree>
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	9b02      	ldr	r3, [sp, #8]
 8007d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d10:	601a      	str	r2, [r3, #0]
 8007d12:	2f00      	cmp	r7, #0
 8007d14:	da20      	bge.n	8007d58 <_dtoa_r+0x90>
 8007d16:	2301      	movs	r3, #1
 8007d18:	602b      	str	r3, [r5, #0]
 8007d1a:	007b      	lsls	r3, r7, #1
 8007d1c:	085b      	lsrs	r3, r3, #1
 8007d1e:	9307      	str	r3, [sp, #28]
 8007d20:	9c07      	ldr	r4, [sp, #28]
 8007d22:	4bb2      	ldr	r3, [pc, #712]	; (8007fec <_dtoa_r+0x324>)
 8007d24:	0022      	movs	r2, r4
 8007d26:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d28:	401a      	ands	r2, r3
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d117      	bne.n	8007d5e <_dtoa_r+0x96>
 8007d2e:	4bb0      	ldr	r3, [pc, #704]	; (8007ff0 <_dtoa_r+0x328>)
 8007d30:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007d32:	6013      	str	r3, [r2, #0]
 8007d34:	9b06      	ldr	r3, [sp, #24]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d103      	bne.n	8007d42 <_dtoa_r+0x7a>
 8007d3a:	0324      	lsls	r4, r4, #12
 8007d3c:	d101      	bne.n	8007d42 <_dtoa_r+0x7a>
 8007d3e:	f000 fd87 	bl	8008850 <_dtoa_r+0xb88>
 8007d42:	4bac      	ldr	r3, [pc, #688]	; (8007ff4 <_dtoa_r+0x32c>)
 8007d44:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007d46:	9308      	str	r3, [sp, #32]
 8007d48:	2a00      	cmp	r2, #0
 8007d4a:	d002      	beq.n	8007d52 <_dtoa_r+0x8a>
 8007d4c:	4baa      	ldr	r3, [pc, #680]	; (8007ff8 <_dtoa_r+0x330>)
 8007d4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007d50:	6013      	str	r3, [r2, #0]
 8007d52:	9808      	ldr	r0, [sp, #32]
 8007d54:	b01b      	add	sp, #108	; 0x6c
 8007d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d58:	2300      	movs	r3, #0
 8007d5a:	602b      	str	r3, [r5, #0]
 8007d5c:	e7e0      	b.n	8007d20 <_dtoa_r+0x58>
 8007d5e:	9e06      	ldr	r6, [sp, #24]
 8007d60:	9f07      	ldr	r7, [sp, #28]
 8007d62:	2200      	movs	r2, #0
 8007d64:	2300      	movs	r3, #0
 8007d66:	0030      	movs	r0, r6
 8007d68:	0039      	movs	r1, r7
 8007d6a:	f7f8 fb63 	bl	8000434 <__aeabi_dcmpeq>
 8007d6e:	1e05      	subs	r5, r0, #0
 8007d70:	d00b      	beq.n	8007d8a <_dtoa_r+0xc2>
 8007d72:	2301      	movs	r3, #1
 8007d74:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007d76:	6013      	str	r3, [r2, #0]
 8007d78:	4ba0      	ldr	r3, [pc, #640]	; (8007ffc <_dtoa_r+0x334>)
 8007d7a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007d7c:	9308      	str	r3, [sp, #32]
 8007d7e:	2a00      	cmp	r2, #0
 8007d80:	d0e7      	beq.n	8007d52 <_dtoa_r+0x8a>
 8007d82:	4a9f      	ldr	r2, [pc, #636]	; (8008000 <_dtoa_r+0x338>)
 8007d84:	9924      	ldr	r1, [sp, #144]	; 0x90
 8007d86:	600a      	str	r2, [r1, #0]
 8007d88:	e7e3      	b.n	8007d52 <_dtoa_r+0x8a>
 8007d8a:	ab18      	add	r3, sp, #96	; 0x60
 8007d8c:	9301      	str	r3, [sp, #4]
 8007d8e:	ab19      	add	r3, sp, #100	; 0x64
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	0032      	movs	r2, r6
 8007d94:	003b      	movs	r3, r7
 8007d96:	9802      	ldr	r0, [sp, #8]
 8007d98:	f001 fcf8 	bl	800978c <__d2b>
 8007d9c:	0063      	lsls	r3, r4, #1
 8007d9e:	9003      	str	r0, [sp, #12]
 8007da0:	0d5b      	lsrs	r3, r3, #21
 8007da2:	d074      	beq.n	8007e8e <_dtoa_r+0x1c6>
 8007da4:	033a      	lsls	r2, r7, #12
 8007da6:	4c97      	ldr	r4, [pc, #604]	; (8008004 <_dtoa_r+0x33c>)
 8007da8:	0b12      	lsrs	r2, r2, #12
 8007daa:	4314      	orrs	r4, r2
 8007dac:	0021      	movs	r1, r4
 8007dae:	4a96      	ldr	r2, [pc, #600]	; (8008008 <_dtoa_r+0x340>)
 8007db0:	0030      	movs	r0, r6
 8007db2:	9516      	str	r5, [sp, #88]	; 0x58
 8007db4:	189e      	adds	r6, r3, r2
 8007db6:	2200      	movs	r2, #0
 8007db8:	4b94      	ldr	r3, [pc, #592]	; (800800c <_dtoa_r+0x344>)
 8007dba:	f7f9 fe7b 	bl	8001ab4 <__aeabi_dsub>
 8007dbe:	4a94      	ldr	r2, [pc, #592]	; (8008010 <_dtoa_r+0x348>)
 8007dc0:	4b94      	ldr	r3, [pc, #592]	; (8008014 <_dtoa_r+0x34c>)
 8007dc2:	f7f9 fc05 	bl	80015d0 <__aeabi_dmul>
 8007dc6:	4a94      	ldr	r2, [pc, #592]	; (8008018 <_dtoa_r+0x350>)
 8007dc8:	4b94      	ldr	r3, [pc, #592]	; (800801c <_dtoa_r+0x354>)
 8007dca:	f7f8 fcdb 	bl	8000784 <__aeabi_dadd>
 8007dce:	0004      	movs	r4, r0
 8007dd0:	0030      	movs	r0, r6
 8007dd2:	000d      	movs	r5, r1
 8007dd4:	f7fa fa08 	bl	80021e8 <__aeabi_i2d>
 8007dd8:	4a91      	ldr	r2, [pc, #580]	; (8008020 <_dtoa_r+0x358>)
 8007dda:	4b92      	ldr	r3, [pc, #584]	; (8008024 <_dtoa_r+0x35c>)
 8007ddc:	f7f9 fbf8 	bl	80015d0 <__aeabi_dmul>
 8007de0:	0002      	movs	r2, r0
 8007de2:	000b      	movs	r3, r1
 8007de4:	0020      	movs	r0, r4
 8007de6:	0029      	movs	r1, r5
 8007de8:	f7f8 fccc 	bl	8000784 <__aeabi_dadd>
 8007dec:	0004      	movs	r4, r0
 8007dee:	000d      	movs	r5, r1
 8007df0:	f7fa f9c4 	bl	800217c <__aeabi_d2iz>
 8007df4:	2200      	movs	r2, #0
 8007df6:	0007      	movs	r7, r0
 8007df8:	2300      	movs	r3, #0
 8007dfa:	0020      	movs	r0, r4
 8007dfc:	0029      	movs	r1, r5
 8007dfe:	f7f8 fb1f 	bl	8000440 <__aeabi_dcmplt>
 8007e02:	2800      	cmp	r0, #0
 8007e04:	d009      	beq.n	8007e1a <_dtoa_r+0x152>
 8007e06:	0038      	movs	r0, r7
 8007e08:	f7fa f9ee 	bl	80021e8 <__aeabi_i2d>
 8007e0c:	002b      	movs	r3, r5
 8007e0e:	0022      	movs	r2, r4
 8007e10:	f7f8 fb10 	bl	8000434 <__aeabi_dcmpeq>
 8007e14:	4243      	negs	r3, r0
 8007e16:	4158      	adcs	r0, r3
 8007e18:	1a3f      	subs	r7, r7, r0
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	9314      	str	r3, [sp, #80]	; 0x50
 8007e1e:	2f16      	cmp	r7, #22
 8007e20:	d80d      	bhi.n	8007e3e <_dtoa_r+0x176>
 8007e22:	4981      	ldr	r1, [pc, #516]	; (8008028 <_dtoa_r+0x360>)
 8007e24:	00fb      	lsls	r3, r7, #3
 8007e26:	18c9      	adds	r1, r1, r3
 8007e28:	6808      	ldr	r0, [r1, #0]
 8007e2a:	6849      	ldr	r1, [r1, #4]
 8007e2c:	9a06      	ldr	r2, [sp, #24]
 8007e2e:	9b07      	ldr	r3, [sp, #28]
 8007e30:	f7f8 fb1a 	bl	8000468 <__aeabi_dcmpgt>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	d046      	beq.n	8007ec6 <_dtoa_r+0x1fe>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	3f01      	subs	r7, #1
 8007e3c:	9314      	str	r3, [sp, #80]	; 0x50
 8007e3e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007e40:	1b9e      	subs	r6, r3, r6
 8007e42:	2300      	movs	r3, #0
 8007e44:	930a      	str	r3, [sp, #40]	; 0x28
 8007e46:	0033      	movs	r3, r6
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e4c:	d504      	bpl.n	8007e58 <_dtoa_r+0x190>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	1b9b      	subs	r3, r3, r6
 8007e52:	930a      	str	r3, [sp, #40]	; 0x28
 8007e54:	2300      	movs	r3, #0
 8007e56:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e58:	2f00      	cmp	r7, #0
 8007e5a:	db36      	blt.n	8007eca <_dtoa_r+0x202>
 8007e5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e5e:	9711      	str	r7, [sp, #68]	; 0x44
 8007e60:	19db      	adds	r3, r3, r7
 8007e62:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e64:	2300      	movs	r3, #0
 8007e66:	9304      	str	r3, [sp, #16]
 8007e68:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007e6a:	2401      	movs	r4, #1
 8007e6c:	2b09      	cmp	r3, #9
 8007e6e:	d900      	bls.n	8007e72 <_dtoa_r+0x1aa>
 8007e70:	e084      	b.n	8007f7c <_dtoa_r+0x2b4>
 8007e72:	2b05      	cmp	r3, #5
 8007e74:	dd02      	ble.n	8007e7c <_dtoa_r+0x1b4>
 8007e76:	2400      	movs	r4, #0
 8007e78:	3b04      	subs	r3, #4
 8007e7a:	9320      	str	r3, [sp, #128]	; 0x80
 8007e7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007e7e:	1e98      	subs	r0, r3, #2
 8007e80:	2803      	cmp	r0, #3
 8007e82:	d900      	bls.n	8007e86 <_dtoa_r+0x1be>
 8007e84:	e084      	b.n	8007f90 <_dtoa_r+0x2c8>
 8007e86:	f7f8 f945 	bl	8000114 <__gnu_thumb1_case_uqi>
 8007e8a:	7775      	.short	0x7775
 8007e8c:	6a28      	.short	0x6a28
 8007e8e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007e90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007e92:	189e      	adds	r6, r3, r2
 8007e94:	4b65      	ldr	r3, [pc, #404]	; (800802c <_dtoa_r+0x364>)
 8007e96:	18f2      	adds	r2, r6, r3
 8007e98:	2a20      	cmp	r2, #32
 8007e9a:	dd0f      	ble.n	8007ebc <_dtoa_r+0x1f4>
 8007e9c:	2340      	movs	r3, #64	; 0x40
 8007e9e:	1a9b      	subs	r3, r3, r2
 8007ea0:	409c      	lsls	r4, r3
 8007ea2:	4b63      	ldr	r3, [pc, #396]	; (8008030 <_dtoa_r+0x368>)
 8007ea4:	9806      	ldr	r0, [sp, #24]
 8007ea6:	18f3      	adds	r3, r6, r3
 8007ea8:	40d8      	lsrs	r0, r3
 8007eaa:	4320      	orrs	r0, r4
 8007eac:	f7fa f9d6 	bl	800225c <__aeabi_ui2d>
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	4c60      	ldr	r4, [pc, #384]	; (8008034 <_dtoa_r+0x36c>)
 8007eb4:	3e01      	subs	r6, #1
 8007eb6:	1909      	adds	r1, r1, r4
 8007eb8:	9316      	str	r3, [sp, #88]	; 0x58
 8007eba:	e77c      	b.n	8007db6 <_dtoa_r+0xee>
 8007ebc:	2320      	movs	r3, #32
 8007ebe:	9806      	ldr	r0, [sp, #24]
 8007ec0:	1a9b      	subs	r3, r3, r2
 8007ec2:	4098      	lsls	r0, r3
 8007ec4:	e7f2      	b.n	8007eac <_dtoa_r+0x1e4>
 8007ec6:	9014      	str	r0, [sp, #80]	; 0x50
 8007ec8:	e7b9      	b.n	8007e3e <_dtoa_r+0x176>
 8007eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ecc:	1bdb      	subs	r3, r3, r7
 8007ece:	930a      	str	r3, [sp, #40]	; 0x28
 8007ed0:	427b      	negs	r3, r7
 8007ed2:	9304      	str	r3, [sp, #16]
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	9311      	str	r3, [sp, #68]	; 0x44
 8007ed8:	e7c6      	b.n	8007e68 <_dtoa_r+0x1a0>
 8007eda:	2301      	movs	r3, #1
 8007edc:	930d      	str	r3, [sp, #52]	; 0x34
 8007ede:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	dd59      	ble.n	8007f98 <_dtoa_r+0x2d0>
 8007ee4:	930c      	str	r3, [sp, #48]	; 0x30
 8007ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ee8:	9a02      	ldr	r2, [sp, #8]
 8007eea:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8007eec:	2200      	movs	r2, #0
 8007eee:	606a      	str	r2, [r5, #4]
 8007ef0:	3204      	adds	r2, #4
 8007ef2:	0010      	movs	r0, r2
 8007ef4:	3014      	adds	r0, #20
 8007ef6:	6869      	ldr	r1, [r5, #4]
 8007ef8:	4298      	cmp	r0, r3
 8007efa:	d952      	bls.n	8007fa2 <_dtoa_r+0x2da>
 8007efc:	9802      	ldr	r0, [sp, #8]
 8007efe:	f001 f902 	bl	8009106 <_Balloc>
 8007f02:	9b02      	ldr	r3, [sp, #8]
 8007f04:	6028      	str	r0, [r5, #0]
 8007f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	9308      	str	r3, [sp, #32]
 8007f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f0e:	2b0e      	cmp	r3, #14
 8007f10:	d900      	bls.n	8007f14 <_dtoa_r+0x24c>
 8007f12:	e10a      	b.n	800812a <_dtoa_r+0x462>
 8007f14:	2c00      	cmp	r4, #0
 8007f16:	d100      	bne.n	8007f1a <_dtoa_r+0x252>
 8007f18:	e107      	b.n	800812a <_dtoa_r+0x462>
 8007f1a:	9b06      	ldr	r3, [sp, #24]
 8007f1c:	9c07      	ldr	r4, [sp, #28]
 8007f1e:	9312      	str	r3, [sp, #72]	; 0x48
 8007f20:	9413      	str	r4, [sp, #76]	; 0x4c
 8007f22:	2f00      	cmp	r7, #0
 8007f24:	dc00      	bgt.n	8007f28 <_dtoa_r+0x260>
 8007f26:	e089      	b.n	800803c <_dtoa_r+0x374>
 8007f28:	210f      	movs	r1, #15
 8007f2a:	003a      	movs	r2, r7
 8007f2c:	4b3e      	ldr	r3, [pc, #248]	; (8008028 <_dtoa_r+0x360>)
 8007f2e:	400a      	ands	r2, r1
 8007f30:	00d2      	lsls	r2, r2, #3
 8007f32:	189b      	adds	r3, r3, r2
 8007f34:	681d      	ldr	r5, [r3, #0]
 8007f36:	685e      	ldr	r6, [r3, #4]
 8007f38:	2302      	movs	r3, #2
 8007f3a:	113c      	asrs	r4, r7, #4
 8007f3c:	930e      	str	r3, [sp, #56]	; 0x38
 8007f3e:	06e3      	lsls	r3, r4, #27
 8007f40:	d50b      	bpl.n	8007f5a <_dtoa_r+0x292>
 8007f42:	4b3d      	ldr	r3, [pc, #244]	; (8008038 <_dtoa_r+0x370>)
 8007f44:	400c      	ands	r4, r1
 8007f46:	6a1a      	ldr	r2, [r3, #32]
 8007f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007f4c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007f4e:	f7f8 ff35 	bl	8000dbc <__aeabi_ddiv>
 8007f52:	2303      	movs	r3, #3
 8007f54:	9006      	str	r0, [sp, #24]
 8007f56:	9107      	str	r1, [sp, #28]
 8007f58:	930e      	str	r3, [sp, #56]	; 0x38
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	e03a      	b.n	8007fd4 <_dtoa_r+0x30c>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	930d      	str	r3, [sp, #52]	; 0x34
 8007f62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f64:	18fb      	adds	r3, r7, r3
 8007f66:	930c      	str	r3, [sp, #48]	; 0x30
 8007f68:	3301      	adds	r3, #1
 8007f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	dcbb      	bgt.n	8007ee8 <_dtoa_r+0x220>
 8007f70:	2301      	movs	r3, #1
 8007f72:	e7b9      	b.n	8007ee8 <_dtoa_r+0x220>
 8007f74:	2300      	movs	r3, #0
 8007f76:	e7b1      	b.n	8007edc <_dtoa_r+0x214>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	e7f1      	b.n	8007f60 <_dtoa_r+0x298>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	940d      	str	r4, [sp, #52]	; 0x34
 8007f80:	9320      	str	r3, [sp, #128]	; 0x80
 8007f82:	3b01      	subs	r3, #1
 8007f84:	2200      	movs	r2, #0
 8007f86:	930c      	str	r3, [sp, #48]	; 0x30
 8007f88:	9309      	str	r3, [sp, #36]	; 0x24
 8007f8a:	3313      	adds	r3, #19
 8007f8c:	9221      	str	r2, [sp, #132]	; 0x84
 8007f8e:	e7ab      	b.n	8007ee8 <_dtoa_r+0x220>
 8007f90:	2301      	movs	r3, #1
 8007f92:	930d      	str	r3, [sp, #52]	; 0x34
 8007f94:	3b02      	subs	r3, #2
 8007f96:	e7f5      	b.n	8007f84 <_dtoa_r+0x2bc>
 8007f98:	2301      	movs	r3, #1
 8007f9a:	930c      	str	r3, [sp, #48]	; 0x30
 8007f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f9e:	001a      	movs	r2, r3
 8007fa0:	e7f4      	b.n	8007f8c <_dtoa_r+0x2c4>
 8007fa2:	3101      	adds	r1, #1
 8007fa4:	6069      	str	r1, [r5, #4]
 8007fa6:	0052      	lsls	r2, r2, #1
 8007fa8:	e7a3      	b.n	8007ef2 <_dtoa_r+0x22a>
 8007faa:	2301      	movs	r3, #1
 8007fac:	421c      	tst	r4, r3
 8007fae:	d00e      	beq.n	8007fce <_dtoa_r+0x306>
 8007fb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fb2:	4a21      	ldr	r2, [pc, #132]	; (8008038 <_dtoa_r+0x370>)
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	930e      	str	r3, [sp, #56]	; 0x38
 8007fb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fba:	0028      	movs	r0, r5
 8007fbc:	00db      	lsls	r3, r3, #3
 8007fbe:	189b      	adds	r3, r3, r2
 8007fc0:	0031      	movs	r1, r6
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	f7f9 fb03 	bl	80015d0 <__aeabi_dmul>
 8007fca:	0005      	movs	r5, r0
 8007fcc:	000e      	movs	r6, r1
 8007fce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fd0:	1064      	asrs	r4, r4, #1
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	9310      	str	r3, [sp, #64]	; 0x40
 8007fd6:	2c00      	cmp	r4, #0
 8007fd8:	d1e7      	bne.n	8007faa <_dtoa_r+0x2e2>
 8007fda:	9806      	ldr	r0, [sp, #24]
 8007fdc:	9907      	ldr	r1, [sp, #28]
 8007fde:	002a      	movs	r2, r5
 8007fe0:	0033      	movs	r3, r6
 8007fe2:	f7f8 feeb 	bl	8000dbc <__aeabi_ddiv>
 8007fe6:	9006      	str	r0, [sp, #24]
 8007fe8:	9107      	str	r1, [sp, #28]
 8007fea:	e042      	b.n	8008072 <_dtoa_r+0x3aa>
 8007fec:	7ff00000 	.word	0x7ff00000
 8007ff0:	0000270f 	.word	0x0000270f
 8007ff4:	0800a821 	.word	0x0800a821
 8007ff8:	0800a824 	.word	0x0800a824
 8007ffc:	0800a798 	.word	0x0800a798
 8008000:	0800a799 	.word	0x0800a799
 8008004:	3ff00000 	.word	0x3ff00000
 8008008:	fffffc01 	.word	0xfffffc01
 800800c:	3ff80000 	.word	0x3ff80000
 8008010:	636f4361 	.word	0x636f4361
 8008014:	3fd287a7 	.word	0x3fd287a7
 8008018:	8b60c8b3 	.word	0x8b60c8b3
 800801c:	3fc68a28 	.word	0x3fc68a28
 8008020:	509f79fb 	.word	0x509f79fb
 8008024:	3fd34413 	.word	0x3fd34413
 8008028:	0800a8c0 	.word	0x0800a8c0
 800802c:	00000432 	.word	0x00000432
 8008030:	00000412 	.word	0x00000412
 8008034:	fe100000 	.word	0xfe100000
 8008038:	0800a898 	.word	0x0800a898
 800803c:	2302      	movs	r3, #2
 800803e:	930e      	str	r3, [sp, #56]	; 0x38
 8008040:	2f00      	cmp	r7, #0
 8008042:	d016      	beq.n	8008072 <_dtoa_r+0x3aa>
 8008044:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008046:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008048:	427c      	negs	r4, r7
 800804a:	330d      	adds	r3, #13
 800804c:	4023      	ands	r3, r4
 800804e:	4ace      	ldr	r2, [pc, #824]	; (8008388 <_dtoa_r+0x6c0>)
 8008050:	00db      	lsls	r3, r3, #3
 8008052:	18d3      	adds	r3, r2, r3
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	f7f9 faba 	bl	80015d0 <__aeabi_dmul>
 800805c:	2300      	movs	r3, #0
 800805e:	2601      	movs	r6, #1
 8008060:	001d      	movs	r5, r3
 8008062:	9006      	str	r0, [sp, #24]
 8008064:	9107      	str	r1, [sp, #28]
 8008066:	1124      	asrs	r4, r4, #4
 8008068:	2c00      	cmp	r4, #0
 800806a:	d000      	beq.n	800806e <_dtoa_r+0x3a6>
 800806c:	e08c      	b.n	8008188 <_dtoa_r+0x4c0>
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1b9      	bne.n	8007fe6 <_dtoa_r+0x31e>
 8008072:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008074:	2b00      	cmp	r3, #0
 8008076:	d100      	bne.n	800807a <_dtoa_r+0x3b2>
 8008078:	e096      	b.n	80081a8 <_dtoa_r+0x4e0>
 800807a:	9c06      	ldr	r4, [sp, #24]
 800807c:	9d07      	ldr	r5, [sp, #28]
 800807e:	2200      	movs	r2, #0
 8008080:	4bc2      	ldr	r3, [pc, #776]	; (800838c <_dtoa_r+0x6c4>)
 8008082:	0020      	movs	r0, r4
 8008084:	0029      	movs	r1, r5
 8008086:	f7f8 f9db 	bl	8000440 <__aeabi_dcmplt>
 800808a:	2800      	cmp	r0, #0
 800808c:	d100      	bne.n	8008090 <_dtoa_r+0x3c8>
 800808e:	e08b      	b.n	80081a8 <_dtoa_r+0x4e0>
 8008090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008092:	2b00      	cmp	r3, #0
 8008094:	d100      	bne.n	8008098 <_dtoa_r+0x3d0>
 8008096:	e087      	b.n	80081a8 <_dtoa_r+0x4e0>
 8008098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800809a:	2b00      	cmp	r3, #0
 800809c:	dd41      	ble.n	8008122 <_dtoa_r+0x45a>
 800809e:	4bbc      	ldr	r3, [pc, #752]	; (8008390 <_dtoa_r+0x6c8>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	0020      	movs	r0, r4
 80080a4:	0029      	movs	r1, r5
 80080a6:	f7f9 fa93 	bl	80015d0 <__aeabi_dmul>
 80080aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080ac:	9006      	str	r0, [sp, #24]
 80080ae:	9107      	str	r1, [sp, #28]
 80080b0:	3301      	adds	r3, #1
 80080b2:	930e      	str	r3, [sp, #56]	; 0x38
 80080b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080b6:	1e7e      	subs	r6, r7, #1
 80080b8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80080ba:	9310      	str	r3, [sp, #64]	; 0x40
 80080bc:	f7fa f894 	bl	80021e8 <__aeabi_i2d>
 80080c0:	9a06      	ldr	r2, [sp, #24]
 80080c2:	9b07      	ldr	r3, [sp, #28]
 80080c4:	f7f9 fa84 	bl	80015d0 <__aeabi_dmul>
 80080c8:	2200      	movs	r2, #0
 80080ca:	4bb2      	ldr	r3, [pc, #712]	; (8008394 <_dtoa_r+0x6cc>)
 80080cc:	f7f8 fb5a 	bl	8000784 <__aeabi_dadd>
 80080d0:	4ab1      	ldr	r2, [pc, #708]	; (8008398 <_dtoa_r+0x6d0>)
 80080d2:	900e      	str	r0, [sp, #56]	; 0x38
 80080d4:	910f      	str	r1, [sp, #60]	; 0x3c
 80080d6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80080d8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80080da:	4694      	mov	ip, r2
 80080dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080de:	4463      	add	r3, ip
 80080e0:	9315      	str	r3, [sp, #84]	; 0x54
 80080e2:	001d      	movs	r5, r3
 80080e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d161      	bne.n	80081ae <_dtoa_r+0x4e6>
 80080ea:	9806      	ldr	r0, [sp, #24]
 80080ec:	9907      	ldr	r1, [sp, #28]
 80080ee:	2200      	movs	r2, #0
 80080f0:	4baa      	ldr	r3, [pc, #680]	; (800839c <_dtoa_r+0x6d4>)
 80080f2:	f7f9 fcdf 	bl	8001ab4 <__aeabi_dsub>
 80080f6:	0022      	movs	r2, r4
 80080f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080fa:	9006      	str	r0, [sp, #24]
 80080fc:	9107      	str	r1, [sp, #28]
 80080fe:	f7f8 f9b3 	bl	8000468 <__aeabi_dcmpgt>
 8008102:	2800      	cmp	r0, #0
 8008104:	d000      	beq.n	8008108 <_dtoa_r+0x440>
 8008106:	e2a8      	b.n	800865a <_dtoa_r+0x992>
 8008108:	48a5      	ldr	r0, [pc, #660]	; (80083a0 <_dtoa_r+0x6d8>)
 800810a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800810c:	4684      	mov	ip, r0
 800810e:	4461      	add	r1, ip
 8008110:	000b      	movs	r3, r1
 8008112:	9806      	ldr	r0, [sp, #24]
 8008114:	9907      	ldr	r1, [sp, #28]
 8008116:	0022      	movs	r2, r4
 8008118:	f7f8 f992 	bl	8000440 <__aeabi_dcmplt>
 800811c:	2800      	cmp	r0, #0
 800811e:	d000      	beq.n	8008122 <_dtoa_r+0x45a>
 8008120:	e295      	b.n	800864e <_dtoa_r+0x986>
 8008122:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008124:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008126:	9306      	str	r3, [sp, #24]
 8008128:	9407      	str	r4, [sp, #28]
 800812a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800812c:	2b00      	cmp	r3, #0
 800812e:	da00      	bge.n	8008132 <_dtoa_r+0x46a>
 8008130:	e15c      	b.n	80083ec <_dtoa_r+0x724>
 8008132:	2f0e      	cmp	r7, #14
 8008134:	dd00      	ble.n	8008138 <_dtoa_r+0x470>
 8008136:	e159      	b.n	80083ec <_dtoa_r+0x724>
 8008138:	4b93      	ldr	r3, [pc, #588]	; (8008388 <_dtoa_r+0x6c0>)
 800813a:	00fa      	lsls	r2, r7, #3
 800813c:	189b      	adds	r3, r3, r2
 800813e:	685c      	ldr	r4, [r3, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	9304      	str	r3, [sp, #16]
 8008144:	9405      	str	r4, [sp, #20]
 8008146:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008148:	2b00      	cmp	r3, #0
 800814a:	db00      	blt.n	800814e <_dtoa_r+0x486>
 800814c:	e0d8      	b.n	8008300 <_dtoa_r+0x638>
 800814e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008150:	2b00      	cmp	r3, #0
 8008152:	dd00      	ble.n	8008156 <_dtoa_r+0x48e>
 8008154:	e0d4      	b.n	8008300 <_dtoa_r+0x638>
 8008156:	d000      	beq.n	800815a <_dtoa_r+0x492>
 8008158:	e27d      	b.n	8008656 <_dtoa_r+0x98e>
 800815a:	9804      	ldr	r0, [sp, #16]
 800815c:	9905      	ldr	r1, [sp, #20]
 800815e:	2200      	movs	r2, #0
 8008160:	4b8e      	ldr	r3, [pc, #568]	; (800839c <_dtoa_r+0x6d4>)
 8008162:	f7f9 fa35 	bl	80015d0 <__aeabi_dmul>
 8008166:	9a06      	ldr	r2, [sp, #24]
 8008168:	9b07      	ldr	r3, [sp, #28]
 800816a:	f7f8 f987 	bl	800047c <__aeabi_dcmpge>
 800816e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008170:	9304      	str	r3, [sp, #16]
 8008172:	001e      	movs	r6, r3
 8008174:	2800      	cmp	r0, #0
 8008176:	d000      	beq.n	800817a <_dtoa_r+0x4b2>
 8008178:	e24f      	b.n	800861a <_dtoa_r+0x952>
 800817a:	9b08      	ldr	r3, [sp, #32]
 800817c:	9a08      	ldr	r2, [sp, #32]
 800817e:	1c5d      	adds	r5, r3, #1
 8008180:	2331      	movs	r3, #49	; 0x31
 8008182:	3701      	adds	r7, #1
 8008184:	7013      	strb	r3, [r2, #0]
 8008186:	e24b      	b.n	8008620 <_dtoa_r+0x958>
 8008188:	4234      	tst	r4, r6
 800818a:	d00a      	beq.n	80081a2 <_dtoa_r+0x4da>
 800818c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800818e:	4a85      	ldr	r2, [pc, #532]	; (80083a4 <_dtoa_r+0x6dc>)
 8008190:	3301      	adds	r3, #1
 8008192:	930e      	str	r3, [sp, #56]	; 0x38
 8008194:	00eb      	lsls	r3, r5, #3
 8008196:	189b      	adds	r3, r3, r2
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	f7f9 fa18 	bl	80015d0 <__aeabi_dmul>
 80081a0:	0033      	movs	r3, r6
 80081a2:	1064      	asrs	r4, r4, #1
 80081a4:	3501      	adds	r5, #1
 80081a6:	e75f      	b.n	8008068 <_dtoa_r+0x3a0>
 80081a8:	003e      	movs	r6, r7
 80081aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ac:	e784      	b.n	80080b8 <_dtoa_r+0x3f0>
 80081ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80081b2:	1e5a      	subs	r2, r3, #1
 80081b4:	4b74      	ldr	r3, [pc, #464]	; (8008388 <_dtoa_r+0x6c0>)
 80081b6:	00d2      	lsls	r2, r2, #3
 80081b8:	189b      	adds	r3, r3, r2
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	2900      	cmp	r1, #0
 80081c0:	d049      	beq.n	8008256 <_dtoa_r+0x58e>
 80081c2:	2000      	movs	r0, #0
 80081c4:	4978      	ldr	r1, [pc, #480]	; (80083a8 <_dtoa_r+0x6e0>)
 80081c6:	f7f8 fdf9 	bl	8000dbc <__aeabi_ddiv>
 80081ca:	002b      	movs	r3, r5
 80081cc:	0022      	movs	r2, r4
 80081ce:	f7f9 fc71 	bl	8001ab4 <__aeabi_dsub>
 80081d2:	9b08      	ldr	r3, [sp, #32]
 80081d4:	900e      	str	r0, [sp, #56]	; 0x38
 80081d6:	910f      	str	r1, [sp, #60]	; 0x3c
 80081d8:	9315      	str	r3, [sp, #84]	; 0x54
 80081da:	9806      	ldr	r0, [sp, #24]
 80081dc:	9907      	ldr	r1, [sp, #28]
 80081de:	f7f9 ffcd 	bl	800217c <__aeabi_d2iz>
 80081e2:	0004      	movs	r4, r0
 80081e4:	f7fa f800 	bl	80021e8 <__aeabi_i2d>
 80081e8:	0002      	movs	r2, r0
 80081ea:	000b      	movs	r3, r1
 80081ec:	9806      	ldr	r0, [sp, #24]
 80081ee:	9907      	ldr	r1, [sp, #28]
 80081f0:	f7f9 fc60 	bl	8001ab4 <__aeabi_dsub>
 80081f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081f6:	3430      	adds	r4, #48	; 0x30
 80081f8:	1c5d      	adds	r5, r3, #1
 80081fa:	701c      	strb	r4, [r3, #0]
 80081fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008200:	9006      	str	r0, [sp, #24]
 8008202:	9107      	str	r1, [sp, #28]
 8008204:	f7f8 f91c 	bl	8000440 <__aeabi_dcmplt>
 8008208:	2800      	cmp	r0, #0
 800820a:	d16c      	bne.n	80082e6 <_dtoa_r+0x61e>
 800820c:	9a06      	ldr	r2, [sp, #24]
 800820e:	9b07      	ldr	r3, [sp, #28]
 8008210:	2000      	movs	r0, #0
 8008212:	495e      	ldr	r1, [pc, #376]	; (800838c <_dtoa_r+0x6c4>)
 8008214:	f7f9 fc4e 	bl	8001ab4 <__aeabi_dsub>
 8008218:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800821a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800821c:	f7f8 f910 	bl	8000440 <__aeabi_dcmplt>
 8008220:	2800      	cmp	r0, #0
 8008222:	d000      	beq.n	8008226 <_dtoa_r+0x55e>
 8008224:	e0c3      	b.n	80083ae <_dtoa_r+0x6e6>
 8008226:	9b08      	ldr	r3, [sp, #32]
 8008228:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800822a:	1aeb      	subs	r3, r5, r3
 800822c:	429a      	cmp	r2, r3
 800822e:	dc00      	bgt.n	8008232 <_dtoa_r+0x56a>
 8008230:	e777      	b.n	8008122 <_dtoa_r+0x45a>
 8008232:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008234:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008236:	2200      	movs	r2, #0
 8008238:	4b55      	ldr	r3, [pc, #340]	; (8008390 <_dtoa_r+0x6c8>)
 800823a:	f7f9 f9c9 	bl	80015d0 <__aeabi_dmul>
 800823e:	2200      	movs	r2, #0
 8008240:	900e      	str	r0, [sp, #56]	; 0x38
 8008242:	910f      	str	r1, [sp, #60]	; 0x3c
 8008244:	9806      	ldr	r0, [sp, #24]
 8008246:	9907      	ldr	r1, [sp, #28]
 8008248:	4b51      	ldr	r3, [pc, #324]	; (8008390 <_dtoa_r+0x6c8>)
 800824a:	f7f9 f9c1 	bl	80015d0 <__aeabi_dmul>
 800824e:	9515      	str	r5, [sp, #84]	; 0x54
 8008250:	9006      	str	r0, [sp, #24]
 8008252:	9107      	str	r1, [sp, #28]
 8008254:	e7c1      	b.n	80081da <_dtoa_r+0x512>
 8008256:	0020      	movs	r0, r4
 8008258:	0029      	movs	r1, r5
 800825a:	f7f9 f9b9 	bl	80015d0 <__aeabi_dmul>
 800825e:	9c08      	ldr	r4, [sp, #32]
 8008260:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008262:	0023      	movs	r3, r4
 8008264:	4694      	mov	ip, r2
 8008266:	900e      	str	r0, [sp, #56]	; 0x38
 8008268:	910f      	str	r1, [sp, #60]	; 0x3c
 800826a:	4463      	add	r3, ip
 800826c:	9315      	str	r3, [sp, #84]	; 0x54
 800826e:	9806      	ldr	r0, [sp, #24]
 8008270:	9907      	ldr	r1, [sp, #28]
 8008272:	f7f9 ff83 	bl	800217c <__aeabi_d2iz>
 8008276:	0005      	movs	r5, r0
 8008278:	f7f9 ffb6 	bl	80021e8 <__aeabi_i2d>
 800827c:	000b      	movs	r3, r1
 800827e:	0002      	movs	r2, r0
 8008280:	9806      	ldr	r0, [sp, #24]
 8008282:	9907      	ldr	r1, [sp, #28]
 8008284:	f7f9 fc16 	bl	8001ab4 <__aeabi_dsub>
 8008288:	3530      	adds	r5, #48	; 0x30
 800828a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800828c:	7025      	strb	r5, [r4, #0]
 800828e:	3401      	adds	r4, #1
 8008290:	9006      	str	r0, [sp, #24]
 8008292:	9107      	str	r1, [sp, #28]
 8008294:	42a3      	cmp	r3, r4
 8008296:	d12a      	bne.n	80082ee <_dtoa_r+0x626>
 8008298:	980e      	ldr	r0, [sp, #56]	; 0x38
 800829a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800829c:	9a08      	ldr	r2, [sp, #32]
 800829e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082a0:	4694      	mov	ip, r2
 80082a2:	4463      	add	r3, ip
 80082a4:	2200      	movs	r2, #0
 80082a6:	001d      	movs	r5, r3
 80082a8:	4b3f      	ldr	r3, [pc, #252]	; (80083a8 <_dtoa_r+0x6e0>)
 80082aa:	f7f8 fa6b 	bl	8000784 <__aeabi_dadd>
 80082ae:	0002      	movs	r2, r0
 80082b0:	000b      	movs	r3, r1
 80082b2:	9806      	ldr	r0, [sp, #24]
 80082b4:	9907      	ldr	r1, [sp, #28]
 80082b6:	f7f8 f8d7 	bl	8000468 <__aeabi_dcmpgt>
 80082ba:	2800      	cmp	r0, #0
 80082bc:	d000      	beq.n	80082c0 <_dtoa_r+0x5f8>
 80082be:	e076      	b.n	80083ae <_dtoa_r+0x6e6>
 80082c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082c4:	2000      	movs	r0, #0
 80082c6:	4938      	ldr	r1, [pc, #224]	; (80083a8 <_dtoa_r+0x6e0>)
 80082c8:	f7f9 fbf4 	bl	8001ab4 <__aeabi_dsub>
 80082cc:	0002      	movs	r2, r0
 80082ce:	000b      	movs	r3, r1
 80082d0:	9806      	ldr	r0, [sp, #24]
 80082d2:	9907      	ldr	r1, [sp, #28]
 80082d4:	f7f8 f8b4 	bl	8000440 <__aeabi_dcmplt>
 80082d8:	2800      	cmp	r0, #0
 80082da:	d100      	bne.n	80082de <_dtoa_r+0x616>
 80082dc:	e721      	b.n	8008122 <_dtoa_r+0x45a>
 80082de:	1e6b      	subs	r3, r5, #1
 80082e0:	781a      	ldrb	r2, [r3, #0]
 80082e2:	2a30      	cmp	r2, #48	; 0x30
 80082e4:	d001      	beq.n	80082ea <_dtoa_r+0x622>
 80082e6:	0037      	movs	r7, r6
 80082e8:	e03f      	b.n	800836a <_dtoa_r+0x6a2>
 80082ea:	001d      	movs	r5, r3
 80082ec:	e7f7      	b.n	80082de <_dtoa_r+0x616>
 80082ee:	9806      	ldr	r0, [sp, #24]
 80082f0:	9907      	ldr	r1, [sp, #28]
 80082f2:	2200      	movs	r2, #0
 80082f4:	4b26      	ldr	r3, [pc, #152]	; (8008390 <_dtoa_r+0x6c8>)
 80082f6:	f7f9 f96b 	bl	80015d0 <__aeabi_dmul>
 80082fa:	9006      	str	r0, [sp, #24]
 80082fc:	9107      	str	r1, [sp, #28]
 80082fe:	e7b6      	b.n	800826e <_dtoa_r+0x5a6>
 8008300:	9e08      	ldr	r6, [sp, #32]
 8008302:	9a04      	ldr	r2, [sp, #16]
 8008304:	9b05      	ldr	r3, [sp, #20]
 8008306:	9806      	ldr	r0, [sp, #24]
 8008308:	9907      	ldr	r1, [sp, #28]
 800830a:	f7f8 fd57 	bl	8000dbc <__aeabi_ddiv>
 800830e:	f7f9 ff35 	bl	800217c <__aeabi_d2iz>
 8008312:	0004      	movs	r4, r0
 8008314:	f7f9 ff68 	bl	80021e8 <__aeabi_i2d>
 8008318:	9a04      	ldr	r2, [sp, #16]
 800831a:	9b05      	ldr	r3, [sp, #20]
 800831c:	f7f9 f958 	bl	80015d0 <__aeabi_dmul>
 8008320:	0002      	movs	r2, r0
 8008322:	000b      	movs	r3, r1
 8008324:	9806      	ldr	r0, [sp, #24]
 8008326:	9907      	ldr	r1, [sp, #28]
 8008328:	f7f9 fbc4 	bl	8001ab4 <__aeabi_dsub>
 800832c:	0023      	movs	r3, r4
 800832e:	3330      	adds	r3, #48	; 0x30
 8008330:	7033      	strb	r3, [r6, #0]
 8008332:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008334:	9b08      	ldr	r3, [sp, #32]
 8008336:	1c75      	adds	r5, r6, #1
 8008338:	1aeb      	subs	r3, r5, r3
 800833a:	429a      	cmp	r2, r3
 800833c:	d148      	bne.n	80083d0 <_dtoa_r+0x708>
 800833e:	0002      	movs	r2, r0
 8008340:	000b      	movs	r3, r1
 8008342:	f7f8 fa1f 	bl	8000784 <__aeabi_dadd>
 8008346:	9a04      	ldr	r2, [sp, #16]
 8008348:	9b05      	ldr	r3, [sp, #20]
 800834a:	9006      	str	r0, [sp, #24]
 800834c:	9107      	str	r1, [sp, #28]
 800834e:	f7f8 f88b 	bl	8000468 <__aeabi_dcmpgt>
 8008352:	2800      	cmp	r0, #0
 8008354:	d12a      	bne.n	80083ac <_dtoa_r+0x6e4>
 8008356:	9a04      	ldr	r2, [sp, #16]
 8008358:	9b05      	ldr	r3, [sp, #20]
 800835a:	9806      	ldr	r0, [sp, #24]
 800835c:	9907      	ldr	r1, [sp, #28]
 800835e:	f7f8 f869 	bl	8000434 <__aeabi_dcmpeq>
 8008362:	2800      	cmp	r0, #0
 8008364:	d001      	beq.n	800836a <_dtoa_r+0x6a2>
 8008366:	07e3      	lsls	r3, r4, #31
 8008368:	d420      	bmi.n	80083ac <_dtoa_r+0x6e4>
 800836a:	9903      	ldr	r1, [sp, #12]
 800836c:	9802      	ldr	r0, [sp, #8]
 800836e:	f000 ff02 	bl	8009176 <_Bfree>
 8008372:	2300      	movs	r3, #0
 8008374:	702b      	strb	r3, [r5, #0]
 8008376:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008378:	3701      	adds	r7, #1
 800837a:	601f      	str	r7, [r3, #0]
 800837c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800837e:	2b00      	cmp	r3, #0
 8008380:	d100      	bne.n	8008384 <_dtoa_r+0x6bc>
 8008382:	e4e6      	b.n	8007d52 <_dtoa_r+0x8a>
 8008384:	601d      	str	r5, [r3, #0]
 8008386:	e4e4      	b.n	8007d52 <_dtoa_r+0x8a>
 8008388:	0800a8c0 	.word	0x0800a8c0
 800838c:	3ff00000 	.word	0x3ff00000
 8008390:	40240000 	.word	0x40240000
 8008394:	401c0000 	.word	0x401c0000
 8008398:	fcc00000 	.word	0xfcc00000
 800839c:	40140000 	.word	0x40140000
 80083a0:	7cc00000 	.word	0x7cc00000
 80083a4:	0800a898 	.word	0x0800a898
 80083a8:	3fe00000 	.word	0x3fe00000
 80083ac:	003e      	movs	r6, r7
 80083ae:	1e6b      	subs	r3, r5, #1
 80083b0:	781a      	ldrb	r2, [r3, #0]
 80083b2:	2a39      	cmp	r2, #57	; 0x39
 80083b4:	d106      	bne.n	80083c4 <_dtoa_r+0x6fc>
 80083b6:	9a08      	ldr	r2, [sp, #32]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d107      	bne.n	80083cc <_dtoa_r+0x704>
 80083bc:	2330      	movs	r3, #48	; 0x30
 80083be:	7013      	strb	r3, [r2, #0]
 80083c0:	0013      	movs	r3, r2
 80083c2:	3601      	adds	r6, #1
 80083c4:	781a      	ldrb	r2, [r3, #0]
 80083c6:	3201      	adds	r2, #1
 80083c8:	701a      	strb	r2, [r3, #0]
 80083ca:	e78c      	b.n	80082e6 <_dtoa_r+0x61e>
 80083cc:	001d      	movs	r5, r3
 80083ce:	e7ee      	b.n	80083ae <_dtoa_r+0x6e6>
 80083d0:	2200      	movs	r2, #0
 80083d2:	4ba4      	ldr	r3, [pc, #656]	; (8008664 <_dtoa_r+0x99c>)
 80083d4:	f7f9 f8fc 	bl	80015d0 <__aeabi_dmul>
 80083d8:	2200      	movs	r2, #0
 80083da:	2300      	movs	r3, #0
 80083dc:	9006      	str	r0, [sp, #24]
 80083de:	9107      	str	r1, [sp, #28]
 80083e0:	002e      	movs	r6, r5
 80083e2:	f7f8 f827 	bl	8000434 <__aeabi_dcmpeq>
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d08b      	beq.n	8008302 <_dtoa_r+0x63a>
 80083ea:	e7be      	b.n	800836a <_dtoa_r+0x6a2>
 80083ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083ee:	2a00      	cmp	r2, #0
 80083f0:	d100      	bne.n	80083f4 <_dtoa_r+0x72c>
 80083f2:	e0da      	b.n	80085aa <_dtoa_r+0x8e2>
 80083f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80083f6:	2a01      	cmp	r2, #1
 80083f8:	dd00      	ble.n	80083fc <_dtoa_r+0x734>
 80083fa:	e0bd      	b.n	8008578 <_dtoa_r+0x8b0>
 80083fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80083fe:	2a00      	cmp	r2, #0
 8008400:	d100      	bne.n	8008404 <_dtoa_r+0x73c>
 8008402:	e0b5      	b.n	8008570 <_dtoa_r+0x8a8>
 8008404:	4a98      	ldr	r2, [pc, #608]	; (8008668 <_dtoa_r+0x9a0>)
 8008406:	189b      	adds	r3, r3, r2
 8008408:	9d04      	ldr	r5, [sp, #16]
 800840a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800840c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800840e:	2101      	movs	r1, #1
 8008410:	18d2      	adds	r2, r2, r3
 8008412:	920a      	str	r2, [sp, #40]	; 0x28
 8008414:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008416:	9802      	ldr	r0, [sp, #8]
 8008418:	18d3      	adds	r3, r2, r3
 800841a:	930b      	str	r3, [sp, #44]	; 0x2c
 800841c:	f000 ff89 	bl	8009332 <__i2b>
 8008420:	0006      	movs	r6, r0
 8008422:	2c00      	cmp	r4, #0
 8008424:	dd0e      	ble.n	8008444 <_dtoa_r+0x77c>
 8008426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008428:	2b00      	cmp	r3, #0
 800842a:	dd0b      	ble.n	8008444 <_dtoa_r+0x77c>
 800842c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800842e:	0023      	movs	r3, r4
 8008430:	4294      	cmp	r4, r2
 8008432:	dd00      	ble.n	8008436 <_dtoa_r+0x76e>
 8008434:	0013      	movs	r3, r2
 8008436:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008438:	1ae4      	subs	r4, r4, r3
 800843a:	1ad2      	subs	r2, r2, r3
 800843c:	920a      	str	r2, [sp, #40]	; 0x28
 800843e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	930b      	str	r3, [sp, #44]	; 0x2c
 8008444:	9b04      	ldr	r3, [sp, #16]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d01f      	beq.n	800848a <_dtoa_r+0x7c2>
 800844a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800844c:	2b00      	cmp	r3, #0
 800844e:	d100      	bne.n	8008452 <_dtoa_r+0x78a>
 8008450:	e0af      	b.n	80085b2 <_dtoa_r+0x8ea>
 8008452:	2d00      	cmp	r5, #0
 8008454:	d011      	beq.n	800847a <_dtoa_r+0x7b2>
 8008456:	0031      	movs	r1, r6
 8008458:	002a      	movs	r2, r5
 800845a:	9802      	ldr	r0, [sp, #8]
 800845c:	f001 f802 	bl	8009464 <__pow5mult>
 8008460:	9a03      	ldr	r2, [sp, #12]
 8008462:	0001      	movs	r1, r0
 8008464:	0006      	movs	r6, r0
 8008466:	9802      	ldr	r0, [sp, #8]
 8008468:	f000 ff6c 	bl	8009344 <__multiply>
 800846c:	9903      	ldr	r1, [sp, #12]
 800846e:	9010      	str	r0, [sp, #64]	; 0x40
 8008470:	9802      	ldr	r0, [sp, #8]
 8008472:	f000 fe80 	bl	8009176 <_Bfree>
 8008476:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008478:	9303      	str	r3, [sp, #12]
 800847a:	9b04      	ldr	r3, [sp, #16]
 800847c:	1b5a      	subs	r2, r3, r5
 800847e:	d004      	beq.n	800848a <_dtoa_r+0x7c2>
 8008480:	9903      	ldr	r1, [sp, #12]
 8008482:	9802      	ldr	r0, [sp, #8]
 8008484:	f000 ffee 	bl	8009464 <__pow5mult>
 8008488:	9003      	str	r0, [sp, #12]
 800848a:	2101      	movs	r1, #1
 800848c:	9802      	ldr	r0, [sp, #8]
 800848e:	f000 ff50 	bl	8009332 <__i2b>
 8008492:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008494:	9004      	str	r0, [sp, #16]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d100      	bne.n	800849c <_dtoa_r+0x7d4>
 800849a:	e1e3      	b.n	8008864 <_dtoa_r+0xb9c>
 800849c:	001a      	movs	r2, r3
 800849e:	0001      	movs	r1, r0
 80084a0:	9802      	ldr	r0, [sp, #8]
 80084a2:	f000 ffdf 	bl	8009464 <__pow5mult>
 80084a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80084a8:	9004      	str	r0, [sp, #16]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	dd00      	ble.n	80084b0 <_dtoa_r+0x7e8>
 80084ae:	e082      	b.n	80085b6 <_dtoa_r+0x8ee>
 80084b0:	2500      	movs	r5, #0
 80084b2:	9b06      	ldr	r3, [sp, #24]
 80084b4:	42ab      	cmp	r3, r5
 80084b6:	d10e      	bne.n	80084d6 <_dtoa_r+0x80e>
 80084b8:	9b07      	ldr	r3, [sp, #28]
 80084ba:	031b      	lsls	r3, r3, #12
 80084bc:	42ab      	cmp	r3, r5
 80084be:	d10a      	bne.n	80084d6 <_dtoa_r+0x80e>
 80084c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084c2:	9a07      	ldr	r2, [sp, #28]
 80084c4:	4213      	tst	r3, r2
 80084c6:	d006      	beq.n	80084d6 <_dtoa_r+0x80e>
 80084c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ca:	3501      	adds	r5, #1
 80084cc:	3301      	adds	r3, #1
 80084ce:	930a      	str	r3, [sp, #40]	; 0x28
 80084d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084d2:	3301      	adds	r3, #1
 80084d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80084d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084d8:	2001      	movs	r0, #1
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d16c      	bne.n	80085b8 <_dtoa_r+0x8f0>
 80084de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084e0:	1818      	adds	r0, r3, r0
 80084e2:	231f      	movs	r3, #31
 80084e4:	4018      	ands	r0, r3
 80084e6:	d07e      	beq.n	80085e6 <_dtoa_r+0x91e>
 80084e8:	3301      	adds	r3, #1
 80084ea:	1a1b      	subs	r3, r3, r0
 80084ec:	2b04      	cmp	r3, #4
 80084ee:	dd70      	ble.n	80085d2 <_dtoa_r+0x90a>
 80084f0:	231c      	movs	r3, #28
 80084f2:	1a18      	subs	r0, r3, r0
 80084f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084f6:	1824      	adds	r4, r4, r0
 80084f8:	181b      	adds	r3, r3, r0
 80084fa:	930a      	str	r3, [sp, #40]	; 0x28
 80084fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084fe:	181b      	adds	r3, r3, r0
 8008500:	930b      	str	r3, [sp, #44]	; 0x2c
 8008502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008504:	2b00      	cmp	r3, #0
 8008506:	dd05      	ble.n	8008514 <_dtoa_r+0x84c>
 8008508:	001a      	movs	r2, r3
 800850a:	9903      	ldr	r1, [sp, #12]
 800850c:	9802      	ldr	r0, [sp, #8]
 800850e:	f000 fffb 	bl	8009508 <__lshift>
 8008512:	9003      	str	r0, [sp, #12]
 8008514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008516:	2b00      	cmp	r3, #0
 8008518:	dd05      	ble.n	8008526 <_dtoa_r+0x85e>
 800851a:	001a      	movs	r2, r3
 800851c:	9904      	ldr	r1, [sp, #16]
 800851e:	9802      	ldr	r0, [sp, #8]
 8008520:	f000 fff2 	bl	8009508 <__lshift>
 8008524:	9004      	str	r0, [sp, #16]
 8008526:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008528:	2b00      	cmp	r3, #0
 800852a:	d05e      	beq.n	80085ea <_dtoa_r+0x922>
 800852c:	9904      	ldr	r1, [sp, #16]
 800852e:	9803      	ldr	r0, [sp, #12]
 8008530:	f001 f83c 	bl	80095ac <__mcmp>
 8008534:	2800      	cmp	r0, #0
 8008536:	da58      	bge.n	80085ea <_dtoa_r+0x922>
 8008538:	2300      	movs	r3, #0
 800853a:	220a      	movs	r2, #10
 800853c:	9903      	ldr	r1, [sp, #12]
 800853e:	9802      	ldr	r0, [sp, #8]
 8008540:	f000 fe32 	bl	80091a8 <__multadd>
 8008544:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008546:	3f01      	subs	r7, #1
 8008548:	9003      	str	r0, [sp, #12]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d100      	bne.n	8008550 <_dtoa_r+0x888>
 800854e:	e190      	b.n	8008872 <_dtoa_r+0xbaa>
 8008550:	2300      	movs	r3, #0
 8008552:	0031      	movs	r1, r6
 8008554:	220a      	movs	r2, #10
 8008556:	9802      	ldr	r0, [sp, #8]
 8008558:	f000 fe26 	bl	80091a8 <__multadd>
 800855c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800855e:	0006      	movs	r6, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	dd00      	ble.n	8008566 <_dtoa_r+0x89e>
 8008564:	e088      	b.n	8008678 <_dtoa_r+0x9b0>
 8008566:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008568:	2b02      	cmp	r3, #2
 800856a:	dc00      	bgt.n	800856e <_dtoa_r+0x8a6>
 800856c:	e084      	b.n	8008678 <_dtoa_r+0x9b0>
 800856e:	e044      	b.n	80085fa <_dtoa_r+0x932>
 8008570:	2336      	movs	r3, #54	; 0x36
 8008572:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008574:	1a9b      	subs	r3, r3, r2
 8008576:	e747      	b.n	8008408 <_dtoa_r+0x740>
 8008578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800857a:	1e5d      	subs	r5, r3, #1
 800857c:	9b04      	ldr	r3, [sp, #16]
 800857e:	42ab      	cmp	r3, r5
 8008580:	db08      	blt.n	8008594 <_dtoa_r+0x8cc>
 8008582:	1b5d      	subs	r5, r3, r5
 8008584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008586:	2b00      	cmp	r3, #0
 8008588:	da0c      	bge.n	80085a4 <_dtoa_r+0x8dc>
 800858a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800858c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800858e:	1a9c      	subs	r4, r3, r2
 8008590:	2300      	movs	r3, #0
 8008592:	e73b      	b.n	800840c <_dtoa_r+0x744>
 8008594:	9b04      	ldr	r3, [sp, #16]
 8008596:	9504      	str	r5, [sp, #16]
 8008598:	1aea      	subs	r2, r5, r3
 800859a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800859c:	2500      	movs	r5, #0
 800859e:	189b      	adds	r3, r3, r2
 80085a0:	9311      	str	r3, [sp, #68]	; 0x44
 80085a2:	e7ef      	b.n	8008584 <_dtoa_r+0x8bc>
 80085a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80085a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085a8:	e730      	b.n	800840c <_dtoa_r+0x744>
 80085aa:	9d04      	ldr	r5, [sp, #16]
 80085ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80085ae:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80085b0:	e737      	b.n	8008422 <_dtoa_r+0x75a>
 80085b2:	9a04      	ldr	r2, [sp, #16]
 80085b4:	e764      	b.n	8008480 <_dtoa_r+0x7b8>
 80085b6:	2500      	movs	r5, #0
 80085b8:	9b04      	ldr	r3, [sp, #16]
 80085ba:	9a04      	ldr	r2, [sp, #16]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	9310      	str	r3, [sp, #64]	; 0x40
 80085c0:	3303      	adds	r3, #3
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	18d3      	adds	r3, r2, r3
 80085c6:	6858      	ldr	r0, [r3, #4]
 80085c8:	f000 fe6a 	bl	80092a0 <__hi0bits>
 80085cc:	2320      	movs	r3, #32
 80085ce:	1a18      	subs	r0, r3, r0
 80085d0:	e785      	b.n	80084de <_dtoa_r+0x816>
 80085d2:	2b04      	cmp	r3, #4
 80085d4:	d095      	beq.n	8008502 <_dtoa_r+0x83a>
 80085d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085d8:	331c      	adds	r3, #28
 80085da:	18d2      	adds	r2, r2, r3
 80085dc:	920a      	str	r2, [sp, #40]	; 0x28
 80085de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085e0:	18e4      	adds	r4, r4, r3
 80085e2:	18d3      	adds	r3, r2, r3
 80085e4:	e78c      	b.n	8008500 <_dtoa_r+0x838>
 80085e6:	0003      	movs	r3, r0
 80085e8:	e7f5      	b.n	80085d6 <_dtoa_r+0x90e>
 80085ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	dc3d      	bgt.n	800866c <_dtoa_r+0x9a4>
 80085f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	dd3a      	ble.n	800866c <_dtoa_r+0x9a4>
 80085f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f8:	930c      	str	r3, [sp, #48]	; 0x30
 80085fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10c      	bne.n	800861a <_dtoa_r+0x952>
 8008600:	9904      	ldr	r1, [sp, #16]
 8008602:	2205      	movs	r2, #5
 8008604:	9802      	ldr	r0, [sp, #8]
 8008606:	f000 fdcf 	bl	80091a8 <__multadd>
 800860a:	9004      	str	r0, [sp, #16]
 800860c:	0001      	movs	r1, r0
 800860e:	9803      	ldr	r0, [sp, #12]
 8008610:	f000 ffcc 	bl	80095ac <__mcmp>
 8008614:	2800      	cmp	r0, #0
 8008616:	dd00      	ble.n	800861a <_dtoa_r+0x952>
 8008618:	e5af      	b.n	800817a <_dtoa_r+0x4b2>
 800861a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800861c:	9d08      	ldr	r5, [sp, #32]
 800861e:	43df      	mvns	r7, r3
 8008620:	2300      	movs	r3, #0
 8008622:	9309      	str	r3, [sp, #36]	; 0x24
 8008624:	9904      	ldr	r1, [sp, #16]
 8008626:	9802      	ldr	r0, [sp, #8]
 8008628:	f000 fda5 	bl	8009176 <_Bfree>
 800862c:	2e00      	cmp	r6, #0
 800862e:	d100      	bne.n	8008632 <_dtoa_r+0x96a>
 8008630:	e69b      	b.n	800836a <_dtoa_r+0x6a2>
 8008632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008634:	2b00      	cmp	r3, #0
 8008636:	d005      	beq.n	8008644 <_dtoa_r+0x97c>
 8008638:	42b3      	cmp	r3, r6
 800863a:	d003      	beq.n	8008644 <_dtoa_r+0x97c>
 800863c:	0019      	movs	r1, r3
 800863e:	9802      	ldr	r0, [sp, #8]
 8008640:	f000 fd99 	bl	8009176 <_Bfree>
 8008644:	0031      	movs	r1, r6
 8008646:	9802      	ldr	r0, [sp, #8]
 8008648:	f000 fd95 	bl	8009176 <_Bfree>
 800864c:	e68d      	b.n	800836a <_dtoa_r+0x6a2>
 800864e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008650:	9304      	str	r3, [sp, #16]
 8008652:	001e      	movs	r6, r3
 8008654:	e7e1      	b.n	800861a <_dtoa_r+0x952>
 8008656:	2300      	movs	r3, #0
 8008658:	e7fa      	b.n	8008650 <_dtoa_r+0x988>
 800865a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800865c:	0037      	movs	r7, r6
 800865e:	9304      	str	r3, [sp, #16]
 8008660:	001e      	movs	r6, r3
 8008662:	e58a      	b.n	800817a <_dtoa_r+0x4b2>
 8008664:	40240000 	.word	0x40240000
 8008668:	00000433 	.word	0x00000433
 800866c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800866e:	2b00      	cmp	r3, #0
 8008670:	d100      	bne.n	8008674 <_dtoa_r+0x9ac>
 8008672:	e0b2      	b.n	80087da <_dtoa_r+0xb12>
 8008674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008676:	930c      	str	r3, [sp, #48]	; 0x30
 8008678:	2c00      	cmp	r4, #0
 800867a:	dd05      	ble.n	8008688 <_dtoa_r+0x9c0>
 800867c:	0031      	movs	r1, r6
 800867e:	0022      	movs	r2, r4
 8008680:	9802      	ldr	r0, [sp, #8]
 8008682:	f000 ff41 	bl	8009508 <__lshift>
 8008686:	0006      	movs	r6, r0
 8008688:	0030      	movs	r0, r6
 800868a:	2d00      	cmp	r5, #0
 800868c:	d011      	beq.n	80086b2 <_dtoa_r+0x9ea>
 800868e:	6871      	ldr	r1, [r6, #4]
 8008690:	9802      	ldr	r0, [sp, #8]
 8008692:	f000 fd38 	bl	8009106 <_Balloc>
 8008696:	0031      	movs	r1, r6
 8008698:	0004      	movs	r4, r0
 800869a:	6933      	ldr	r3, [r6, #16]
 800869c:	310c      	adds	r1, #12
 800869e:	1c9a      	adds	r2, r3, #2
 80086a0:	0092      	lsls	r2, r2, #2
 80086a2:	300c      	adds	r0, #12
 80086a4:	f7fd fcfe 	bl	80060a4 <memcpy>
 80086a8:	2201      	movs	r2, #1
 80086aa:	0021      	movs	r1, r4
 80086ac:	9802      	ldr	r0, [sp, #8]
 80086ae:	f000 ff2b 	bl	8009508 <__lshift>
 80086b2:	9609      	str	r6, [sp, #36]	; 0x24
 80086b4:	0006      	movs	r6, r0
 80086b6:	9b08      	ldr	r3, [sp, #32]
 80086b8:	930a      	str	r3, [sp, #40]	; 0x28
 80086ba:	9904      	ldr	r1, [sp, #16]
 80086bc:	9803      	ldr	r0, [sp, #12]
 80086be:	f7ff fa7d 	bl	8007bbc <quorem>
 80086c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086c4:	900d      	str	r0, [sp, #52]	; 0x34
 80086c6:	0004      	movs	r4, r0
 80086c8:	9803      	ldr	r0, [sp, #12]
 80086ca:	f000 ff6f 	bl	80095ac <__mcmp>
 80086ce:	0032      	movs	r2, r6
 80086d0:	9010      	str	r0, [sp, #64]	; 0x40
 80086d2:	9904      	ldr	r1, [sp, #16]
 80086d4:	9802      	ldr	r0, [sp, #8]
 80086d6:	f000 ff83 	bl	80095e0 <__mdiff>
 80086da:	2301      	movs	r3, #1
 80086dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80086de:	68c3      	ldr	r3, [r0, #12]
 80086e0:	3430      	adds	r4, #48	; 0x30
 80086e2:	0005      	movs	r5, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d104      	bne.n	80086f2 <_dtoa_r+0xa2a>
 80086e8:	0001      	movs	r1, r0
 80086ea:	9803      	ldr	r0, [sp, #12]
 80086ec:	f000 ff5e 	bl	80095ac <__mcmp>
 80086f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80086f2:	0029      	movs	r1, r5
 80086f4:	9802      	ldr	r0, [sp, #8]
 80086f6:	f000 fd3e 	bl	8009176 <_Bfree>
 80086fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80086fe:	4313      	orrs	r3, r2
 8008700:	d10e      	bne.n	8008720 <_dtoa_r+0xa58>
 8008702:	9a06      	ldr	r2, [sp, #24]
 8008704:	3301      	adds	r3, #1
 8008706:	4213      	tst	r3, r2
 8008708:	d10a      	bne.n	8008720 <_dtoa_r+0xa58>
 800870a:	2c39      	cmp	r4, #57	; 0x39
 800870c:	d026      	beq.n	800875c <_dtoa_r+0xa94>
 800870e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008710:	2b00      	cmp	r3, #0
 8008712:	dd01      	ble.n	8008718 <_dtoa_r+0xa50>
 8008714:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008716:	3431      	adds	r4, #49	; 0x31
 8008718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800871a:	1c5d      	adds	r5, r3, #1
 800871c:	701c      	strb	r4, [r3, #0]
 800871e:	e781      	b.n	8008624 <_dtoa_r+0x95c>
 8008720:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008722:	2b00      	cmp	r3, #0
 8008724:	db07      	blt.n	8008736 <_dtoa_r+0xa6e>
 8008726:	001d      	movs	r5, r3
 8008728:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800872a:	431d      	orrs	r5, r3
 800872c:	d122      	bne.n	8008774 <_dtoa_r+0xaac>
 800872e:	2301      	movs	r3, #1
 8008730:	9a06      	ldr	r2, [sp, #24]
 8008732:	4213      	tst	r3, r2
 8008734:	d11e      	bne.n	8008774 <_dtoa_r+0xaac>
 8008736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008738:	2b00      	cmp	r3, #0
 800873a:	dded      	ble.n	8008718 <_dtoa_r+0xa50>
 800873c:	9903      	ldr	r1, [sp, #12]
 800873e:	2201      	movs	r2, #1
 8008740:	9802      	ldr	r0, [sp, #8]
 8008742:	f000 fee1 	bl	8009508 <__lshift>
 8008746:	9904      	ldr	r1, [sp, #16]
 8008748:	9003      	str	r0, [sp, #12]
 800874a:	f000 ff2f 	bl	80095ac <__mcmp>
 800874e:	2800      	cmp	r0, #0
 8008750:	dc02      	bgt.n	8008758 <_dtoa_r+0xa90>
 8008752:	d1e1      	bne.n	8008718 <_dtoa_r+0xa50>
 8008754:	07e3      	lsls	r3, r4, #31
 8008756:	d5df      	bpl.n	8008718 <_dtoa_r+0xa50>
 8008758:	2c39      	cmp	r4, #57	; 0x39
 800875a:	d1db      	bne.n	8008714 <_dtoa_r+0xa4c>
 800875c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800875e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008760:	1c5d      	adds	r5, r3, #1
 8008762:	2339      	movs	r3, #57	; 0x39
 8008764:	7013      	strb	r3, [r2, #0]
 8008766:	1e6b      	subs	r3, r5, #1
 8008768:	781a      	ldrb	r2, [r3, #0]
 800876a:	2a39      	cmp	r2, #57	; 0x39
 800876c:	d067      	beq.n	800883e <_dtoa_r+0xb76>
 800876e:	3201      	adds	r2, #1
 8008770:	701a      	strb	r2, [r3, #0]
 8008772:	e757      	b.n	8008624 <_dtoa_r+0x95c>
 8008774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008776:	1c5d      	adds	r5, r3, #1
 8008778:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800877a:	2b00      	cmp	r3, #0
 800877c:	dd04      	ble.n	8008788 <_dtoa_r+0xac0>
 800877e:	2c39      	cmp	r4, #57	; 0x39
 8008780:	d0ec      	beq.n	800875c <_dtoa_r+0xa94>
 8008782:	3401      	adds	r4, #1
 8008784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008786:	e7c9      	b.n	800871c <_dtoa_r+0xa54>
 8008788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800878a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800878c:	701c      	strb	r4, [r3, #0]
 800878e:	9b08      	ldr	r3, [sp, #32]
 8008790:	1aeb      	subs	r3, r5, r3
 8008792:	4293      	cmp	r3, r2
 8008794:	d03e      	beq.n	8008814 <_dtoa_r+0xb4c>
 8008796:	2300      	movs	r3, #0
 8008798:	220a      	movs	r2, #10
 800879a:	9903      	ldr	r1, [sp, #12]
 800879c:	9802      	ldr	r0, [sp, #8]
 800879e:	f000 fd03 	bl	80091a8 <__multadd>
 80087a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a4:	9003      	str	r0, [sp, #12]
 80087a6:	42b3      	cmp	r3, r6
 80087a8:	d109      	bne.n	80087be <_dtoa_r+0xaf6>
 80087aa:	2300      	movs	r3, #0
 80087ac:	220a      	movs	r2, #10
 80087ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087b0:	9802      	ldr	r0, [sp, #8]
 80087b2:	f000 fcf9 	bl	80091a8 <__multadd>
 80087b6:	9009      	str	r0, [sp, #36]	; 0x24
 80087b8:	0006      	movs	r6, r0
 80087ba:	950a      	str	r5, [sp, #40]	; 0x28
 80087bc:	e77d      	b.n	80086ba <_dtoa_r+0x9f2>
 80087be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087c0:	2300      	movs	r3, #0
 80087c2:	220a      	movs	r2, #10
 80087c4:	9802      	ldr	r0, [sp, #8]
 80087c6:	f000 fcef 	bl	80091a8 <__multadd>
 80087ca:	2300      	movs	r3, #0
 80087cc:	9009      	str	r0, [sp, #36]	; 0x24
 80087ce:	220a      	movs	r2, #10
 80087d0:	0031      	movs	r1, r6
 80087d2:	9802      	ldr	r0, [sp, #8]
 80087d4:	f000 fce8 	bl	80091a8 <__multadd>
 80087d8:	e7ee      	b.n	80087b8 <_dtoa_r+0xaf0>
 80087da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087dc:	930c      	str	r3, [sp, #48]	; 0x30
 80087de:	9b08      	ldr	r3, [sp, #32]
 80087e0:	9306      	str	r3, [sp, #24]
 80087e2:	9904      	ldr	r1, [sp, #16]
 80087e4:	9803      	ldr	r0, [sp, #12]
 80087e6:	f7ff f9e9 	bl	8007bbc <quorem>
 80087ea:	9b06      	ldr	r3, [sp, #24]
 80087ec:	3030      	adds	r0, #48	; 0x30
 80087ee:	1c5d      	adds	r5, r3, #1
 80087f0:	7018      	strb	r0, [r3, #0]
 80087f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087f4:	9b08      	ldr	r3, [sp, #32]
 80087f6:	0004      	movs	r4, r0
 80087f8:	1aeb      	subs	r3, r5, r3
 80087fa:	429a      	cmp	r2, r3
 80087fc:	dd08      	ble.n	8008810 <_dtoa_r+0xb48>
 80087fe:	2300      	movs	r3, #0
 8008800:	220a      	movs	r2, #10
 8008802:	9903      	ldr	r1, [sp, #12]
 8008804:	9802      	ldr	r0, [sp, #8]
 8008806:	f000 fccf 	bl	80091a8 <__multadd>
 800880a:	9506      	str	r5, [sp, #24]
 800880c:	9003      	str	r0, [sp, #12]
 800880e:	e7e8      	b.n	80087e2 <_dtoa_r+0xb1a>
 8008810:	2300      	movs	r3, #0
 8008812:	9309      	str	r3, [sp, #36]	; 0x24
 8008814:	9903      	ldr	r1, [sp, #12]
 8008816:	2201      	movs	r2, #1
 8008818:	9802      	ldr	r0, [sp, #8]
 800881a:	f000 fe75 	bl	8009508 <__lshift>
 800881e:	9904      	ldr	r1, [sp, #16]
 8008820:	9003      	str	r0, [sp, #12]
 8008822:	f000 fec3 	bl	80095ac <__mcmp>
 8008826:	2800      	cmp	r0, #0
 8008828:	dc9d      	bgt.n	8008766 <_dtoa_r+0xa9e>
 800882a:	d101      	bne.n	8008830 <_dtoa_r+0xb68>
 800882c:	07e3      	lsls	r3, r4, #31
 800882e:	d49a      	bmi.n	8008766 <_dtoa_r+0xa9e>
 8008830:	1e6b      	subs	r3, r5, #1
 8008832:	781a      	ldrb	r2, [r3, #0]
 8008834:	2a30      	cmp	r2, #48	; 0x30
 8008836:	d000      	beq.n	800883a <_dtoa_r+0xb72>
 8008838:	e6f4      	b.n	8008624 <_dtoa_r+0x95c>
 800883a:	001d      	movs	r5, r3
 800883c:	e7f8      	b.n	8008830 <_dtoa_r+0xb68>
 800883e:	9a08      	ldr	r2, [sp, #32]
 8008840:	429a      	cmp	r2, r3
 8008842:	d103      	bne.n	800884c <_dtoa_r+0xb84>
 8008844:	2331      	movs	r3, #49	; 0x31
 8008846:	3701      	adds	r7, #1
 8008848:	7013      	strb	r3, [r2, #0]
 800884a:	e6eb      	b.n	8008624 <_dtoa_r+0x95c>
 800884c:	001d      	movs	r5, r3
 800884e:	e78a      	b.n	8008766 <_dtoa_r+0xa9e>
 8008850:	4b0b      	ldr	r3, [pc, #44]	; (8008880 <_dtoa_r+0xbb8>)
 8008852:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008854:	9308      	str	r3, [sp, #32]
 8008856:	4b0b      	ldr	r3, [pc, #44]	; (8008884 <_dtoa_r+0xbbc>)
 8008858:	2a00      	cmp	r2, #0
 800885a:	d001      	beq.n	8008860 <_dtoa_r+0xb98>
 800885c:	f7ff fa77 	bl	8007d4e <_dtoa_r+0x86>
 8008860:	f7ff fa77 	bl	8007d52 <_dtoa_r+0x8a>
 8008864:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008866:	2b01      	cmp	r3, #1
 8008868:	dc00      	bgt.n	800886c <_dtoa_r+0xba4>
 800886a:	e621      	b.n	80084b0 <_dtoa_r+0x7e8>
 800886c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800886e:	2001      	movs	r0, #1
 8008870:	e635      	b.n	80084de <_dtoa_r+0x816>
 8008872:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008874:	2b00      	cmp	r3, #0
 8008876:	dcb2      	bgt.n	80087de <_dtoa_r+0xb16>
 8008878:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800887a:	2b02      	cmp	r3, #2
 800887c:	ddaf      	ble.n	80087de <_dtoa_r+0xb16>
 800887e:	e6bc      	b.n	80085fa <_dtoa_r+0x932>
 8008880:	0800a818 	.word	0x0800a818
 8008884:	0800a820 	.word	0x0800a820

08008888 <std>:
 8008888:	2300      	movs	r3, #0
 800888a:	b510      	push	{r4, lr}
 800888c:	0004      	movs	r4, r0
 800888e:	6003      	str	r3, [r0, #0]
 8008890:	6043      	str	r3, [r0, #4]
 8008892:	6083      	str	r3, [r0, #8]
 8008894:	8181      	strh	r1, [r0, #12]
 8008896:	6643      	str	r3, [r0, #100]	; 0x64
 8008898:	81c2      	strh	r2, [r0, #14]
 800889a:	6103      	str	r3, [r0, #16]
 800889c:	6143      	str	r3, [r0, #20]
 800889e:	6183      	str	r3, [r0, #24]
 80088a0:	0019      	movs	r1, r3
 80088a2:	2208      	movs	r2, #8
 80088a4:	305c      	adds	r0, #92	; 0x5c
 80088a6:	f7fd fc06 	bl	80060b6 <memset>
 80088aa:	4b05      	ldr	r3, [pc, #20]	; (80088c0 <std+0x38>)
 80088ac:	6224      	str	r4, [r4, #32]
 80088ae:	6263      	str	r3, [r4, #36]	; 0x24
 80088b0:	4b04      	ldr	r3, [pc, #16]	; (80088c4 <std+0x3c>)
 80088b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80088b4:	4b04      	ldr	r3, [pc, #16]	; (80088c8 <std+0x40>)
 80088b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80088b8:	4b04      	ldr	r3, [pc, #16]	; (80088cc <std+0x44>)
 80088ba:	6323      	str	r3, [r4, #48]	; 0x30
 80088bc:	bd10      	pop	{r4, pc}
 80088be:	46c0      	nop			; (mov r8, r8)
 80088c0:	08009fc1 	.word	0x08009fc1
 80088c4:	08009fe9 	.word	0x08009fe9
 80088c8:	0800a021 	.word	0x0800a021
 80088cc:	0800a04d 	.word	0x0800a04d

080088d0 <_cleanup_r>:
 80088d0:	b510      	push	{r4, lr}
 80088d2:	4902      	ldr	r1, [pc, #8]	; (80088dc <_cleanup_r+0xc>)
 80088d4:	f000 f88c 	bl	80089f0 <_fwalk_reent>
 80088d8:	bd10      	pop	{r4, pc}
 80088da:	46c0      	nop			; (mov r8, r8)
 80088dc:	0800a38d 	.word	0x0800a38d

080088e0 <__sfmoreglue>:
 80088e0:	b570      	push	{r4, r5, r6, lr}
 80088e2:	2568      	movs	r5, #104	; 0x68
 80088e4:	1e4a      	subs	r2, r1, #1
 80088e6:	4355      	muls	r5, r2
 80088e8:	000e      	movs	r6, r1
 80088ea:	0029      	movs	r1, r5
 80088ec:	3174      	adds	r1, #116	; 0x74
 80088ee:	f001 f859 	bl	80099a4 <_malloc_r>
 80088f2:	1e04      	subs	r4, r0, #0
 80088f4:	d008      	beq.n	8008908 <__sfmoreglue+0x28>
 80088f6:	2100      	movs	r1, #0
 80088f8:	002a      	movs	r2, r5
 80088fa:	6001      	str	r1, [r0, #0]
 80088fc:	6046      	str	r6, [r0, #4]
 80088fe:	300c      	adds	r0, #12
 8008900:	60a0      	str	r0, [r4, #8]
 8008902:	3268      	adds	r2, #104	; 0x68
 8008904:	f7fd fbd7 	bl	80060b6 <memset>
 8008908:	0020      	movs	r0, r4
 800890a:	bd70      	pop	{r4, r5, r6, pc}

0800890c <__sinit>:
 800890c:	6983      	ldr	r3, [r0, #24]
 800890e:	b513      	push	{r0, r1, r4, lr}
 8008910:	0004      	movs	r4, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d128      	bne.n	8008968 <__sinit+0x5c>
 8008916:	6483      	str	r3, [r0, #72]	; 0x48
 8008918:	64c3      	str	r3, [r0, #76]	; 0x4c
 800891a:	6503      	str	r3, [r0, #80]	; 0x50
 800891c:	4b13      	ldr	r3, [pc, #76]	; (800896c <__sinit+0x60>)
 800891e:	4a14      	ldr	r2, [pc, #80]	; (8008970 <__sinit+0x64>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	6282      	str	r2, [r0, #40]	; 0x28
 8008924:	9301      	str	r3, [sp, #4]
 8008926:	4298      	cmp	r0, r3
 8008928:	d101      	bne.n	800892e <__sinit+0x22>
 800892a:	2301      	movs	r3, #1
 800892c:	6183      	str	r3, [r0, #24]
 800892e:	0020      	movs	r0, r4
 8008930:	f000 f820 	bl	8008974 <__sfp>
 8008934:	6060      	str	r0, [r4, #4]
 8008936:	0020      	movs	r0, r4
 8008938:	f000 f81c 	bl	8008974 <__sfp>
 800893c:	60a0      	str	r0, [r4, #8]
 800893e:	0020      	movs	r0, r4
 8008940:	f000 f818 	bl	8008974 <__sfp>
 8008944:	2200      	movs	r2, #0
 8008946:	60e0      	str	r0, [r4, #12]
 8008948:	2104      	movs	r1, #4
 800894a:	6860      	ldr	r0, [r4, #4]
 800894c:	f7ff ff9c 	bl	8008888 <std>
 8008950:	2201      	movs	r2, #1
 8008952:	2109      	movs	r1, #9
 8008954:	68a0      	ldr	r0, [r4, #8]
 8008956:	f7ff ff97 	bl	8008888 <std>
 800895a:	2202      	movs	r2, #2
 800895c:	2112      	movs	r1, #18
 800895e:	68e0      	ldr	r0, [r4, #12]
 8008960:	f7ff ff92 	bl	8008888 <std>
 8008964:	2301      	movs	r3, #1
 8008966:	61a3      	str	r3, [r4, #24]
 8008968:	bd13      	pop	{r0, r1, r4, pc}
 800896a:	46c0      	nop			; (mov r8, r8)
 800896c:	0800a784 	.word	0x0800a784
 8008970:	080088d1 	.word	0x080088d1

08008974 <__sfp>:
 8008974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008976:	4b1c      	ldr	r3, [pc, #112]	; (80089e8 <__sfp+0x74>)
 8008978:	0007      	movs	r7, r0
 800897a:	681e      	ldr	r6, [r3, #0]
 800897c:	69b3      	ldr	r3, [r6, #24]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d102      	bne.n	8008988 <__sfp+0x14>
 8008982:	0030      	movs	r0, r6
 8008984:	f7ff ffc2 	bl	800890c <__sinit>
 8008988:	3648      	adds	r6, #72	; 0x48
 800898a:	68b4      	ldr	r4, [r6, #8]
 800898c:	6873      	ldr	r3, [r6, #4]
 800898e:	3b01      	subs	r3, #1
 8008990:	d504      	bpl.n	800899c <__sfp+0x28>
 8008992:	6833      	ldr	r3, [r6, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d007      	beq.n	80089a8 <__sfp+0x34>
 8008998:	6836      	ldr	r6, [r6, #0]
 800899a:	e7f6      	b.n	800898a <__sfp+0x16>
 800899c:	220c      	movs	r2, #12
 800899e:	5ea5      	ldrsh	r5, [r4, r2]
 80089a0:	2d00      	cmp	r5, #0
 80089a2:	d00d      	beq.n	80089c0 <__sfp+0x4c>
 80089a4:	3468      	adds	r4, #104	; 0x68
 80089a6:	e7f2      	b.n	800898e <__sfp+0x1a>
 80089a8:	2104      	movs	r1, #4
 80089aa:	0038      	movs	r0, r7
 80089ac:	f7ff ff98 	bl	80088e0 <__sfmoreglue>
 80089b0:	6030      	str	r0, [r6, #0]
 80089b2:	2800      	cmp	r0, #0
 80089b4:	d1f0      	bne.n	8008998 <__sfp+0x24>
 80089b6:	230c      	movs	r3, #12
 80089b8:	0004      	movs	r4, r0
 80089ba:	603b      	str	r3, [r7, #0]
 80089bc:	0020      	movs	r0, r4
 80089be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089c0:	0020      	movs	r0, r4
 80089c2:	4b0a      	ldr	r3, [pc, #40]	; (80089ec <__sfp+0x78>)
 80089c4:	6665      	str	r5, [r4, #100]	; 0x64
 80089c6:	6025      	str	r5, [r4, #0]
 80089c8:	6065      	str	r5, [r4, #4]
 80089ca:	60a5      	str	r5, [r4, #8]
 80089cc:	60e3      	str	r3, [r4, #12]
 80089ce:	6125      	str	r5, [r4, #16]
 80089d0:	6165      	str	r5, [r4, #20]
 80089d2:	61a5      	str	r5, [r4, #24]
 80089d4:	2208      	movs	r2, #8
 80089d6:	0029      	movs	r1, r5
 80089d8:	305c      	adds	r0, #92	; 0x5c
 80089da:	f7fd fb6c 	bl	80060b6 <memset>
 80089de:	6365      	str	r5, [r4, #52]	; 0x34
 80089e0:	63a5      	str	r5, [r4, #56]	; 0x38
 80089e2:	64a5      	str	r5, [r4, #72]	; 0x48
 80089e4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80089e6:	e7e9      	b.n	80089bc <__sfp+0x48>
 80089e8:	0800a784 	.word	0x0800a784
 80089ec:	ffff0001 	.word	0xffff0001

080089f0 <_fwalk_reent>:
 80089f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089f2:	0004      	movs	r4, r0
 80089f4:	0007      	movs	r7, r0
 80089f6:	2600      	movs	r6, #0
 80089f8:	9101      	str	r1, [sp, #4]
 80089fa:	3448      	adds	r4, #72	; 0x48
 80089fc:	2c00      	cmp	r4, #0
 80089fe:	d101      	bne.n	8008a04 <_fwalk_reent+0x14>
 8008a00:	0030      	movs	r0, r6
 8008a02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008a04:	6863      	ldr	r3, [r4, #4]
 8008a06:	68a5      	ldr	r5, [r4, #8]
 8008a08:	9300      	str	r3, [sp, #0]
 8008a0a:	9b00      	ldr	r3, [sp, #0]
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	d501      	bpl.n	8008a16 <_fwalk_reent+0x26>
 8008a12:	6824      	ldr	r4, [r4, #0]
 8008a14:	e7f2      	b.n	80089fc <_fwalk_reent+0xc>
 8008a16:	89ab      	ldrh	r3, [r5, #12]
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d908      	bls.n	8008a2e <_fwalk_reent+0x3e>
 8008a1c:	220e      	movs	r2, #14
 8008a1e:	5eab      	ldrsh	r3, [r5, r2]
 8008a20:	3301      	adds	r3, #1
 8008a22:	d004      	beq.n	8008a2e <_fwalk_reent+0x3e>
 8008a24:	0029      	movs	r1, r5
 8008a26:	0038      	movs	r0, r7
 8008a28:	9b01      	ldr	r3, [sp, #4]
 8008a2a:	4798      	blx	r3
 8008a2c:	4306      	orrs	r6, r0
 8008a2e:	3568      	adds	r5, #104	; 0x68
 8008a30:	e7eb      	b.n	8008a0a <_fwalk_reent+0x1a>

08008a32 <rshift>:
 8008a32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a34:	0004      	movs	r4, r0
 8008a36:	6905      	ldr	r5, [r0, #16]
 8008a38:	3414      	adds	r4, #20
 8008a3a:	114b      	asrs	r3, r1, #5
 8008a3c:	0026      	movs	r6, r4
 8008a3e:	429d      	cmp	r5, r3
 8008a40:	dd14      	ble.n	8008a6c <rshift+0x3a>
 8008a42:	221f      	movs	r2, #31
 8008a44:	00ad      	lsls	r5, r5, #2
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4011      	ands	r1, r2
 8008a4a:	1965      	adds	r5, r4, r5
 8008a4c:	18e3      	adds	r3, r4, r3
 8008a4e:	0022      	movs	r2, r4
 8008a50:	2900      	cmp	r1, #0
 8008a52:	d01e      	beq.n	8008a92 <rshift+0x60>
 8008a54:	cb04      	ldmia	r3!, {r2}
 8008a56:	2720      	movs	r7, #32
 8008a58:	40ca      	lsrs	r2, r1
 8008a5a:	46a4      	mov	ip, r4
 8008a5c:	1a7f      	subs	r7, r7, r1
 8008a5e:	4666      	mov	r6, ip
 8008a60:	429d      	cmp	r5, r3
 8008a62:	d80b      	bhi.n	8008a7c <rshift+0x4a>
 8008a64:	6032      	str	r2, [r6, #0]
 8008a66:	2a00      	cmp	r2, #0
 8008a68:	d000      	beq.n	8008a6c <rshift+0x3a>
 8008a6a:	3604      	adds	r6, #4
 8008a6c:	1b33      	subs	r3, r6, r4
 8008a6e:	109b      	asrs	r3, r3, #2
 8008a70:	6103      	str	r3, [r0, #16]
 8008a72:	42a6      	cmp	r6, r4
 8008a74:	d101      	bne.n	8008a7a <rshift+0x48>
 8008a76:	2300      	movs	r3, #0
 8008a78:	6143      	str	r3, [r0, #20]
 8008a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a7c:	681e      	ldr	r6, [r3, #0]
 8008a7e:	40be      	lsls	r6, r7
 8008a80:	4332      	orrs	r2, r6
 8008a82:	4666      	mov	r6, ip
 8008a84:	c604      	stmia	r6!, {r2}
 8008a86:	cb04      	ldmia	r3!, {r2}
 8008a88:	46b4      	mov	ip, r6
 8008a8a:	40ca      	lsrs	r2, r1
 8008a8c:	e7e7      	b.n	8008a5e <rshift+0x2c>
 8008a8e:	cb02      	ldmia	r3!, {r1}
 8008a90:	c202      	stmia	r2!, {r1}
 8008a92:	0016      	movs	r6, r2
 8008a94:	429d      	cmp	r5, r3
 8008a96:	d8fa      	bhi.n	8008a8e <rshift+0x5c>
 8008a98:	e7e8      	b.n	8008a6c <rshift+0x3a>

08008a9a <__hexdig_fun>:
 8008a9a:	0003      	movs	r3, r0
 8008a9c:	3b30      	subs	r3, #48	; 0x30
 8008a9e:	2b09      	cmp	r3, #9
 8008aa0:	d803      	bhi.n	8008aaa <__hexdig_fun+0x10>
 8008aa2:	3820      	subs	r0, #32
 8008aa4:	b2c3      	uxtb	r3, r0
 8008aa6:	0018      	movs	r0, r3
 8008aa8:	4770      	bx	lr
 8008aaa:	0003      	movs	r3, r0
 8008aac:	3b61      	subs	r3, #97	; 0x61
 8008aae:	2b05      	cmp	r3, #5
 8008ab0:	d801      	bhi.n	8008ab6 <__hexdig_fun+0x1c>
 8008ab2:	3847      	subs	r0, #71	; 0x47
 8008ab4:	e7f6      	b.n	8008aa4 <__hexdig_fun+0xa>
 8008ab6:	0002      	movs	r2, r0
 8008ab8:	3a41      	subs	r2, #65	; 0x41
 8008aba:	2300      	movs	r3, #0
 8008abc:	2a05      	cmp	r2, #5
 8008abe:	d8f2      	bhi.n	8008aa6 <__hexdig_fun+0xc>
 8008ac0:	3827      	subs	r0, #39	; 0x27
 8008ac2:	e7ef      	b.n	8008aa4 <__hexdig_fun+0xa>

08008ac4 <__gethex>:
 8008ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ac6:	b08d      	sub	sp, #52	; 0x34
 8008ac8:	9005      	str	r0, [sp, #20]
 8008aca:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008acc:	9109      	str	r1, [sp, #36]	; 0x24
 8008ace:	9202      	str	r2, [sp, #8]
 8008ad0:	930a      	str	r3, [sp, #40]	; 0x28
 8008ad2:	f000 fae2 	bl	800909a <__localeconv_l>
 8008ad6:	6803      	ldr	r3, [r0, #0]
 8008ad8:	0018      	movs	r0, r3
 8008ada:	9307      	str	r3, [sp, #28]
 8008adc:	f7f7 fb12 	bl	8000104 <strlen>
 8008ae0:	2202      	movs	r2, #2
 8008ae2:	9b07      	ldr	r3, [sp, #28]
 8008ae4:	4252      	negs	r2, r2
 8008ae6:	181b      	adds	r3, r3, r0
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	9004      	str	r0, [sp, #16]
 8008aee:	930b      	str	r3, [sp, #44]	; 0x2c
 8008af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008af2:	6819      	ldr	r1, [r3, #0]
 8008af4:	1c8b      	adds	r3, r1, #2
 8008af6:	1a52      	subs	r2, r2, r1
 8008af8:	18d1      	adds	r1, r2, r3
 8008afa:	9301      	str	r3, [sp, #4]
 8008afc:	9108      	str	r1, [sp, #32]
 8008afe:	9901      	ldr	r1, [sp, #4]
 8008b00:	3301      	adds	r3, #1
 8008b02:	7808      	ldrb	r0, [r1, #0]
 8008b04:	2830      	cmp	r0, #48	; 0x30
 8008b06:	d0f7      	beq.n	8008af8 <__gethex+0x34>
 8008b08:	f7ff ffc7 	bl	8008a9a <__hexdig_fun>
 8008b0c:	1e07      	subs	r7, r0, #0
 8008b0e:	d000      	beq.n	8008b12 <__gethex+0x4e>
 8008b10:	e06f      	b.n	8008bf2 <__gethex+0x12e>
 8008b12:	9a04      	ldr	r2, [sp, #16]
 8008b14:	9907      	ldr	r1, [sp, #28]
 8008b16:	9801      	ldr	r0, [sp, #4]
 8008b18:	f001 fa9e 	bl	800a058 <strncmp>
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	d000      	beq.n	8008b22 <__gethex+0x5e>
 8008b20:	e06d      	b.n	8008bfe <__gethex+0x13a>
 8008b22:	9b01      	ldr	r3, [sp, #4]
 8008b24:	9a04      	ldr	r2, [sp, #16]
 8008b26:	189c      	adds	r4, r3, r2
 8008b28:	7820      	ldrb	r0, [r4, #0]
 8008b2a:	f7ff ffb6 	bl	8008a9a <__hexdig_fun>
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	d069      	beq.n	8008c06 <__gethex+0x142>
 8008b32:	9401      	str	r4, [sp, #4]
 8008b34:	9b01      	ldr	r3, [sp, #4]
 8008b36:	7818      	ldrb	r0, [r3, #0]
 8008b38:	2830      	cmp	r0, #48	; 0x30
 8008b3a:	d009      	beq.n	8008b50 <__gethex+0x8c>
 8008b3c:	f7ff ffad 	bl	8008a9a <__hexdig_fun>
 8008b40:	4243      	negs	r3, r0
 8008b42:	4143      	adcs	r3, r0
 8008b44:	9303      	str	r3, [sp, #12]
 8008b46:	2301      	movs	r3, #1
 8008b48:	0026      	movs	r6, r4
 8008b4a:	9308      	str	r3, [sp, #32]
 8008b4c:	9c01      	ldr	r4, [sp, #4]
 8008b4e:	e004      	b.n	8008b5a <__gethex+0x96>
 8008b50:	9b01      	ldr	r3, [sp, #4]
 8008b52:	3301      	adds	r3, #1
 8008b54:	9301      	str	r3, [sp, #4]
 8008b56:	e7ed      	b.n	8008b34 <__gethex+0x70>
 8008b58:	3401      	adds	r4, #1
 8008b5a:	7820      	ldrb	r0, [r4, #0]
 8008b5c:	f7ff ff9d 	bl	8008a9a <__hexdig_fun>
 8008b60:	2800      	cmp	r0, #0
 8008b62:	d1f9      	bne.n	8008b58 <__gethex+0x94>
 8008b64:	9a04      	ldr	r2, [sp, #16]
 8008b66:	9907      	ldr	r1, [sp, #28]
 8008b68:	0020      	movs	r0, r4
 8008b6a:	f001 fa75 	bl	800a058 <strncmp>
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	d109      	bne.n	8008b86 <__gethex+0xc2>
 8008b72:	2e00      	cmp	r6, #0
 8008b74:	d10a      	bne.n	8008b8c <__gethex+0xc8>
 8008b76:	9b04      	ldr	r3, [sp, #16]
 8008b78:	18e4      	adds	r4, r4, r3
 8008b7a:	0026      	movs	r6, r4
 8008b7c:	7820      	ldrb	r0, [r4, #0]
 8008b7e:	f7ff ff8c 	bl	8008a9a <__hexdig_fun>
 8008b82:	2800      	cmp	r0, #0
 8008b84:	d139      	bne.n	8008bfa <__gethex+0x136>
 8008b86:	2700      	movs	r7, #0
 8008b88:	42be      	cmp	r6, r7
 8008b8a:	d001      	beq.n	8008b90 <__gethex+0xcc>
 8008b8c:	1b37      	subs	r7, r6, r4
 8008b8e:	00bf      	lsls	r7, r7, #2
 8008b90:	7823      	ldrb	r3, [r4, #0]
 8008b92:	2b50      	cmp	r3, #80	; 0x50
 8008b94:	d001      	beq.n	8008b9a <__gethex+0xd6>
 8008b96:	2b70      	cmp	r3, #112	; 0x70
 8008b98:	d142      	bne.n	8008c20 <__gethex+0x15c>
 8008b9a:	7863      	ldrb	r3, [r4, #1]
 8008b9c:	2b2b      	cmp	r3, #43	; 0x2b
 8008b9e:	d034      	beq.n	8008c0a <__gethex+0x146>
 8008ba0:	2b2d      	cmp	r3, #45	; 0x2d
 8008ba2:	d036      	beq.n	8008c12 <__gethex+0x14e>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	1c66      	adds	r6, r4, #1
 8008ba8:	9306      	str	r3, [sp, #24]
 8008baa:	7830      	ldrb	r0, [r6, #0]
 8008bac:	f7ff ff75 	bl	8008a9a <__hexdig_fun>
 8008bb0:	1e43      	subs	r3, r0, #1
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	2b18      	cmp	r3, #24
 8008bb6:	d833      	bhi.n	8008c20 <__gethex+0x15c>
 8008bb8:	3810      	subs	r0, #16
 8008bba:	0005      	movs	r5, r0
 8008bbc:	3601      	adds	r6, #1
 8008bbe:	7830      	ldrb	r0, [r6, #0]
 8008bc0:	f7ff ff6b 	bl	8008a9a <__hexdig_fun>
 8008bc4:	1e43      	subs	r3, r0, #1
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	2b18      	cmp	r3, #24
 8008bca:	d924      	bls.n	8008c16 <__gethex+0x152>
 8008bcc:	9b06      	ldr	r3, [sp, #24]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d000      	beq.n	8008bd4 <__gethex+0x110>
 8008bd2:	426d      	negs	r5, r5
 8008bd4:	197f      	adds	r7, r7, r5
 8008bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bd8:	601e      	str	r6, [r3, #0]
 8008bda:	9b03      	ldr	r3, [sp, #12]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d021      	beq.n	8008c24 <__gethex+0x160>
 8008be0:	9b08      	ldr	r3, [sp, #32]
 8008be2:	2606      	movs	r6, #6
 8008be4:	425a      	negs	r2, r3
 8008be6:	4153      	adcs	r3, r2
 8008be8:	425b      	negs	r3, r3
 8008bea:	401e      	ands	r6, r3
 8008bec:	0030      	movs	r0, r6
 8008bee:	b00d      	add	sp, #52	; 0x34
 8008bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	9303      	str	r3, [sp, #12]
 8008bf6:	001e      	movs	r6, r3
 8008bf8:	e7a8      	b.n	8008b4c <__gethex+0x88>
 8008bfa:	3401      	adds	r4, #1
 8008bfc:	e7be      	b.n	8008b7c <__gethex+0xb8>
 8008bfe:	9c01      	ldr	r4, [sp, #4]
 8008c00:	2301      	movs	r3, #1
 8008c02:	9303      	str	r3, [sp, #12]
 8008c04:	e7c4      	b.n	8008b90 <__gethex+0xcc>
 8008c06:	0007      	movs	r7, r0
 8008c08:	e7fa      	b.n	8008c00 <__gethex+0x13c>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	9306      	str	r3, [sp, #24]
 8008c0e:	1ca6      	adds	r6, r4, #2
 8008c10:	e7cb      	b.n	8008baa <__gethex+0xe6>
 8008c12:	2301      	movs	r3, #1
 8008c14:	e7fa      	b.n	8008c0c <__gethex+0x148>
 8008c16:	230a      	movs	r3, #10
 8008c18:	435d      	muls	r5, r3
 8008c1a:	182d      	adds	r5, r5, r0
 8008c1c:	3d10      	subs	r5, #16
 8008c1e:	e7cd      	b.n	8008bbc <__gethex+0xf8>
 8008c20:	0026      	movs	r6, r4
 8008c22:	e7d8      	b.n	8008bd6 <__gethex+0x112>
 8008c24:	9b01      	ldr	r3, [sp, #4]
 8008c26:	9903      	ldr	r1, [sp, #12]
 8008c28:	1ae3      	subs	r3, r4, r3
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	2b07      	cmp	r3, #7
 8008c2e:	dc47      	bgt.n	8008cc0 <__gethex+0x1fc>
 8008c30:	9805      	ldr	r0, [sp, #20]
 8008c32:	f000 fa68 	bl	8009106 <_Balloc>
 8008c36:	0003      	movs	r3, r0
 8008c38:	3314      	adds	r3, #20
 8008c3a:	9303      	str	r3, [sp, #12]
 8008c3c:	9308      	str	r3, [sp, #32]
 8008c3e:	2300      	movs	r3, #0
 8008c40:	0005      	movs	r5, r0
 8008c42:	001e      	movs	r6, r3
 8008c44:	9306      	str	r3, [sp, #24]
 8008c46:	9b01      	ldr	r3, [sp, #4]
 8008c48:	42a3      	cmp	r3, r4
 8008c4a:	d33c      	bcc.n	8008cc6 <__gethex+0x202>
 8008c4c:	9c08      	ldr	r4, [sp, #32]
 8008c4e:	9b03      	ldr	r3, [sp, #12]
 8008c50:	c440      	stmia	r4!, {r6}
 8008c52:	1ae4      	subs	r4, r4, r3
 8008c54:	10a4      	asrs	r4, r4, #2
 8008c56:	612c      	str	r4, [r5, #16]
 8008c58:	0030      	movs	r0, r6
 8008c5a:	f000 fb21 	bl	80092a0 <__hi0bits>
 8008c5e:	9b02      	ldr	r3, [sp, #8]
 8008c60:	0164      	lsls	r4, r4, #5
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	1a26      	subs	r6, r4, r0
 8008c66:	9301      	str	r3, [sp, #4]
 8008c68:	429e      	cmp	r6, r3
 8008c6a:	dd5f      	ble.n	8008d2c <__gethex+0x268>
 8008c6c:	1af6      	subs	r6, r6, r3
 8008c6e:	0031      	movs	r1, r6
 8008c70:	0028      	movs	r0, r5
 8008c72:	f000 fe1c 	bl	80098ae <__any_on>
 8008c76:	1e04      	subs	r4, r0, #0
 8008c78:	d00f      	beq.n	8008c9a <__gethex+0x1d6>
 8008c7a:	2401      	movs	r4, #1
 8008c7c:	211f      	movs	r1, #31
 8008c7e:	0020      	movs	r0, r4
 8008c80:	1e73      	subs	r3, r6, #1
 8008c82:	4019      	ands	r1, r3
 8008c84:	4088      	lsls	r0, r1
 8008c86:	0001      	movs	r1, r0
 8008c88:	115a      	asrs	r2, r3, #5
 8008c8a:	9803      	ldr	r0, [sp, #12]
 8008c8c:	0092      	lsls	r2, r2, #2
 8008c8e:	5812      	ldr	r2, [r2, r0]
 8008c90:	420a      	tst	r2, r1
 8008c92:	d002      	beq.n	8008c9a <__gethex+0x1d6>
 8008c94:	42a3      	cmp	r3, r4
 8008c96:	dc41      	bgt.n	8008d1c <__gethex+0x258>
 8008c98:	2402      	movs	r4, #2
 8008c9a:	0031      	movs	r1, r6
 8008c9c:	0028      	movs	r0, r5
 8008c9e:	f7ff fec8 	bl	8008a32 <rshift>
 8008ca2:	19bf      	adds	r7, r7, r6
 8008ca4:	9b02      	ldr	r3, [sp, #8]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	9304      	str	r3, [sp, #16]
 8008caa:	42bb      	cmp	r3, r7
 8008cac:	da4e      	bge.n	8008d4c <__gethex+0x288>
 8008cae:	0029      	movs	r1, r5
 8008cb0:	9805      	ldr	r0, [sp, #20]
 8008cb2:	f000 fa60 	bl	8009176 <_Bfree>
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008cba:	26a3      	movs	r6, #163	; 0xa3
 8008cbc:	6013      	str	r3, [r2, #0]
 8008cbe:	e795      	b.n	8008bec <__gethex+0x128>
 8008cc0:	3101      	adds	r1, #1
 8008cc2:	105b      	asrs	r3, r3, #1
 8008cc4:	e7b2      	b.n	8008c2c <__gethex+0x168>
 8008cc6:	1e63      	subs	r3, r4, #1
 8008cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8008cca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d015      	beq.n	8008cfe <__gethex+0x23a>
 8008cd2:	9b06      	ldr	r3, [sp, #24]
 8008cd4:	2b20      	cmp	r3, #32
 8008cd6:	d105      	bne.n	8008ce4 <__gethex+0x220>
 8008cd8:	9b08      	ldr	r3, [sp, #32]
 8008cda:	601e      	str	r6, [r3, #0]
 8008cdc:	2600      	movs	r6, #0
 8008cde:	3304      	adds	r3, #4
 8008ce0:	9308      	str	r3, [sp, #32]
 8008ce2:	9606      	str	r6, [sp, #24]
 8008ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ce6:	7818      	ldrb	r0, [r3, #0]
 8008ce8:	f7ff fed7 	bl	8008a9a <__hexdig_fun>
 8008cec:	230f      	movs	r3, #15
 8008cee:	4018      	ands	r0, r3
 8008cf0:	9b06      	ldr	r3, [sp, #24]
 8008cf2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008cf4:	4098      	lsls	r0, r3
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	4306      	orrs	r6, r0
 8008cfa:	9306      	str	r3, [sp, #24]
 8008cfc:	e7a3      	b.n	8008c46 <__gethex+0x182>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	9a04      	ldr	r2, [sp, #16]
 8008d02:	1a9c      	subs	r4, r3, r2
 8008d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d06:	191c      	adds	r4, r3, r4
 8008d08:	9b01      	ldr	r3, [sp, #4]
 8008d0a:	429c      	cmp	r4, r3
 8008d0c:	d3e1      	bcc.n	8008cd2 <__gethex+0x20e>
 8008d0e:	9907      	ldr	r1, [sp, #28]
 8008d10:	0020      	movs	r0, r4
 8008d12:	f001 f9a1 	bl	800a058 <strncmp>
 8008d16:	2800      	cmp	r0, #0
 8008d18:	d1db      	bne.n	8008cd2 <__gethex+0x20e>
 8008d1a:	e794      	b.n	8008c46 <__gethex+0x182>
 8008d1c:	1eb1      	subs	r1, r6, #2
 8008d1e:	0028      	movs	r0, r5
 8008d20:	f000 fdc5 	bl	80098ae <__any_on>
 8008d24:	2800      	cmp	r0, #0
 8008d26:	d0b7      	beq.n	8008c98 <__gethex+0x1d4>
 8008d28:	2403      	movs	r4, #3
 8008d2a:	e7b6      	b.n	8008c9a <__gethex+0x1d6>
 8008d2c:	9b01      	ldr	r3, [sp, #4]
 8008d2e:	2400      	movs	r4, #0
 8008d30:	429e      	cmp	r6, r3
 8008d32:	dab7      	bge.n	8008ca4 <__gethex+0x1e0>
 8008d34:	1b9e      	subs	r6, r3, r6
 8008d36:	0029      	movs	r1, r5
 8008d38:	0032      	movs	r2, r6
 8008d3a:	9805      	ldr	r0, [sp, #20]
 8008d3c:	f000 fbe4 	bl	8009508 <__lshift>
 8008d40:	0003      	movs	r3, r0
 8008d42:	3314      	adds	r3, #20
 8008d44:	0005      	movs	r5, r0
 8008d46:	1bbf      	subs	r7, r7, r6
 8008d48:	9303      	str	r3, [sp, #12]
 8008d4a:	e7ab      	b.n	8008ca4 <__gethex+0x1e0>
 8008d4c:	9b02      	ldr	r3, [sp, #8]
 8008d4e:	685e      	ldr	r6, [r3, #4]
 8008d50:	42be      	cmp	r6, r7
 8008d52:	dd6b      	ble.n	8008e2c <__gethex+0x368>
 8008d54:	9b01      	ldr	r3, [sp, #4]
 8008d56:	1bf6      	subs	r6, r6, r7
 8008d58:	42b3      	cmp	r3, r6
 8008d5a:	dc32      	bgt.n	8008dc2 <__gethex+0x2fe>
 8008d5c:	9b02      	ldr	r3, [sp, #8]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d026      	beq.n	8008db2 <__gethex+0x2ee>
 8008d64:	2b03      	cmp	r3, #3
 8008d66:	d028      	beq.n	8008dba <__gethex+0x2f6>
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d119      	bne.n	8008da0 <__gethex+0x2dc>
 8008d6c:	9b01      	ldr	r3, [sp, #4]
 8008d6e:	42b3      	cmp	r3, r6
 8008d70:	d116      	bne.n	8008da0 <__gethex+0x2dc>
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	dc0d      	bgt.n	8008d92 <__gethex+0x2ce>
 8008d76:	9b02      	ldr	r3, [sp, #8]
 8008d78:	2662      	movs	r6, #98	; 0x62
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	9301      	str	r3, [sp, #4]
 8008d7e:	9a01      	ldr	r2, [sp, #4]
 8008d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d82:	601a      	str	r2, [r3, #0]
 8008d84:	2301      	movs	r3, #1
 8008d86:	9a03      	ldr	r2, [sp, #12]
 8008d88:	612b      	str	r3, [r5, #16]
 8008d8a:	6013      	str	r3, [r2, #0]
 8008d8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d8e:	601d      	str	r5, [r3, #0]
 8008d90:	e72c      	b.n	8008bec <__gethex+0x128>
 8008d92:	9901      	ldr	r1, [sp, #4]
 8008d94:	0028      	movs	r0, r5
 8008d96:	3901      	subs	r1, #1
 8008d98:	f000 fd89 	bl	80098ae <__any_on>
 8008d9c:	2800      	cmp	r0, #0
 8008d9e:	d1ea      	bne.n	8008d76 <__gethex+0x2b2>
 8008da0:	0029      	movs	r1, r5
 8008da2:	9805      	ldr	r0, [sp, #20]
 8008da4:	f000 f9e7 	bl	8009176 <_Bfree>
 8008da8:	2300      	movs	r3, #0
 8008daa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008dac:	2650      	movs	r6, #80	; 0x50
 8008dae:	6013      	str	r3, [r2, #0]
 8008db0:	e71c      	b.n	8008bec <__gethex+0x128>
 8008db2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d0de      	beq.n	8008d76 <__gethex+0x2b2>
 8008db8:	e7f2      	b.n	8008da0 <__gethex+0x2dc>
 8008dba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1da      	bne.n	8008d76 <__gethex+0x2b2>
 8008dc0:	e7ee      	b.n	8008da0 <__gethex+0x2dc>
 8008dc2:	1e77      	subs	r7, r6, #1
 8008dc4:	2c00      	cmp	r4, #0
 8008dc6:	d12f      	bne.n	8008e28 <__gethex+0x364>
 8008dc8:	2f00      	cmp	r7, #0
 8008dca:	d004      	beq.n	8008dd6 <__gethex+0x312>
 8008dcc:	0039      	movs	r1, r7
 8008dce:	0028      	movs	r0, r5
 8008dd0:	f000 fd6d 	bl	80098ae <__any_on>
 8008dd4:	0004      	movs	r4, r0
 8008dd6:	231f      	movs	r3, #31
 8008dd8:	117a      	asrs	r2, r7, #5
 8008dda:	401f      	ands	r7, r3
 8008ddc:	3b1e      	subs	r3, #30
 8008dde:	40bb      	lsls	r3, r7
 8008de0:	9903      	ldr	r1, [sp, #12]
 8008de2:	0092      	lsls	r2, r2, #2
 8008de4:	5852      	ldr	r2, [r2, r1]
 8008de6:	421a      	tst	r2, r3
 8008de8:	d001      	beq.n	8008dee <__gethex+0x32a>
 8008dea:	2302      	movs	r3, #2
 8008dec:	431c      	orrs	r4, r3
 8008dee:	9b01      	ldr	r3, [sp, #4]
 8008df0:	0031      	movs	r1, r6
 8008df2:	1b9b      	subs	r3, r3, r6
 8008df4:	2602      	movs	r6, #2
 8008df6:	0028      	movs	r0, r5
 8008df8:	9301      	str	r3, [sp, #4]
 8008dfa:	f7ff fe1a 	bl	8008a32 <rshift>
 8008dfe:	9b02      	ldr	r3, [sp, #8]
 8008e00:	685f      	ldr	r7, [r3, #4]
 8008e02:	2c00      	cmp	r4, #0
 8008e04:	d040      	beq.n	8008e88 <__gethex+0x3c4>
 8008e06:	9b02      	ldr	r3, [sp, #8]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d010      	beq.n	8008e30 <__gethex+0x36c>
 8008e0e:	2b03      	cmp	r3, #3
 8008e10:	d012      	beq.n	8008e38 <__gethex+0x374>
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d106      	bne.n	8008e24 <__gethex+0x360>
 8008e16:	07a2      	lsls	r2, r4, #30
 8008e18:	d504      	bpl.n	8008e24 <__gethex+0x360>
 8008e1a:	9a03      	ldr	r2, [sp, #12]
 8008e1c:	6812      	ldr	r2, [r2, #0]
 8008e1e:	4314      	orrs	r4, r2
 8008e20:	421c      	tst	r4, r3
 8008e22:	d10c      	bne.n	8008e3e <__gethex+0x37a>
 8008e24:	2310      	movs	r3, #16
 8008e26:	e02e      	b.n	8008e86 <__gethex+0x3c2>
 8008e28:	2401      	movs	r4, #1
 8008e2a:	e7d4      	b.n	8008dd6 <__gethex+0x312>
 8008e2c:	2601      	movs	r6, #1
 8008e2e:	e7e8      	b.n	8008e02 <__gethex+0x33e>
 8008e30:	2301      	movs	r3, #1
 8008e32:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008e34:	1a9b      	subs	r3, r3, r2
 8008e36:	9313      	str	r3, [sp, #76]	; 0x4c
 8008e38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d0f2      	beq.n	8008e24 <__gethex+0x360>
 8008e3e:	692c      	ldr	r4, [r5, #16]
 8008e40:	00a3      	lsls	r3, r4, #2
 8008e42:	9304      	str	r3, [sp, #16]
 8008e44:	002b      	movs	r3, r5
 8008e46:	00a2      	lsls	r2, r4, #2
 8008e48:	3314      	adds	r3, #20
 8008e4a:	1899      	adds	r1, r3, r2
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	4694      	mov	ip, r2
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	1c50      	adds	r0, r2, #1
 8008e54:	d01d      	beq.n	8008e92 <__gethex+0x3ce>
 8008e56:	3201      	adds	r2, #1
 8008e58:	601a      	str	r2, [r3, #0]
 8008e5a:	002b      	movs	r3, r5
 8008e5c:	3314      	adds	r3, #20
 8008e5e:	2e02      	cmp	r6, #2
 8008e60:	d13a      	bne.n	8008ed8 <__gethex+0x414>
 8008e62:	9a02      	ldr	r2, [sp, #8]
 8008e64:	9901      	ldr	r1, [sp, #4]
 8008e66:	6812      	ldr	r2, [r2, #0]
 8008e68:	3a01      	subs	r2, #1
 8008e6a:	428a      	cmp	r2, r1
 8008e6c:	d10a      	bne.n	8008e84 <__gethex+0x3c0>
 8008e6e:	114a      	asrs	r2, r1, #5
 8008e70:	211f      	movs	r1, #31
 8008e72:	9801      	ldr	r0, [sp, #4]
 8008e74:	0092      	lsls	r2, r2, #2
 8008e76:	4001      	ands	r1, r0
 8008e78:	2001      	movs	r0, #1
 8008e7a:	0004      	movs	r4, r0
 8008e7c:	408c      	lsls	r4, r1
 8008e7e:	58d3      	ldr	r3, [r2, r3]
 8008e80:	4223      	tst	r3, r4
 8008e82:	d148      	bne.n	8008f16 <__gethex+0x452>
 8008e84:	2320      	movs	r3, #32
 8008e86:	431e      	orrs	r6, r3
 8008e88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e8a:	601d      	str	r5, [r3, #0]
 8008e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e8e:	601f      	str	r7, [r3, #0]
 8008e90:	e6ac      	b.n	8008bec <__gethex+0x128>
 8008e92:	4662      	mov	r2, ip
 8008e94:	c304      	stmia	r3!, {r2}
 8008e96:	4299      	cmp	r1, r3
 8008e98:	d8da      	bhi.n	8008e50 <__gethex+0x38c>
 8008e9a:	68ab      	ldr	r3, [r5, #8]
 8008e9c:	429c      	cmp	r4, r3
 8008e9e:	db12      	blt.n	8008ec6 <__gethex+0x402>
 8008ea0:	686b      	ldr	r3, [r5, #4]
 8008ea2:	9805      	ldr	r0, [sp, #20]
 8008ea4:	1c59      	adds	r1, r3, #1
 8008ea6:	f000 f92e 	bl	8009106 <_Balloc>
 8008eaa:	0029      	movs	r1, r5
 8008eac:	692b      	ldr	r3, [r5, #16]
 8008eae:	9003      	str	r0, [sp, #12]
 8008eb0:	1c9a      	adds	r2, r3, #2
 8008eb2:	0092      	lsls	r2, r2, #2
 8008eb4:	310c      	adds	r1, #12
 8008eb6:	300c      	adds	r0, #12
 8008eb8:	f7fd f8f4 	bl	80060a4 <memcpy>
 8008ebc:	0029      	movs	r1, r5
 8008ebe:	9805      	ldr	r0, [sp, #20]
 8008ec0:	f000 f959 	bl	8009176 <_Bfree>
 8008ec4:	9d03      	ldr	r5, [sp, #12]
 8008ec6:	692b      	ldr	r3, [r5, #16]
 8008ec8:	1c5a      	adds	r2, r3, #1
 8008eca:	612a      	str	r2, [r5, #16]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	3304      	adds	r3, #4
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	18eb      	adds	r3, r5, r3
 8008ed4:	605a      	str	r2, [r3, #4]
 8008ed6:	e7c0      	b.n	8008e5a <__gethex+0x396>
 8008ed8:	692a      	ldr	r2, [r5, #16]
 8008eda:	42a2      	cmp	r2, r4
 8008edc:	dd0a      	ble.n	8008ef4 <__gethex+0x430>
 8008ede:	2101      	movs	r1, #1
 8008ee0:	0028      	movs	r0, r5
 8008ee2:	f7ff fda6 	bl	8008a32 <rshift>
 8008ee6:	9b02      	ldr	r3, [sp, #8]
 8008ee8:	3701      	adds	r7, #1
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	2601      	movs	r6, #1
 8008eee:	42bb      	cmp	r3, r7
 8008ef0:	dac8      	bge.n	8008e84 <__gethex+0x3c0>
 8008ef2:	e6dc      	b.n	8008cae <__gethex+0x1ea>
 8008ef4:	241f      	movs	r4, #31
 8008ef6:	9a01      	ldr	r2, [sp, #4]
 8008ef8:	2601      	movs	r6, #1
 8008efa:	4022      	ands	r2, r4
 8008efc:	1e14      	subs	r4, r2, #0
 8008efe:	d0c1      	beq.n	8008e84 <__gethex+0x3c0>
 8008f00:	9a04      	ldr	r2, [sp, #16]
 8008f02:	189b      	adds	r3, r3, r2
 8008f04:	3b04      	subs	r3, #4
 8008f06:	6818      	ldr	r0, [r3, #0]
 8008f08:	f000 f9ca 	bl	80092a0 <__hi0bits>
 8008f0c:	2120      	movs	r1, #32
 8008f0e:	1b0c      	subs	r4, r1, r4
 8008f10:	42a0      	cmp	r0, r4
 8008f12:	dbe4      	blt.n	8008ede <__gethex+0x41a>
 8008f14:	e7b6      	b.n	8008e84 <__gethex+0x3c0>
 8008f16:	0006      	movs	r6, r0
 8008f18:	e7b4      	b.n	8008e84 <__gethex+0x3c0>

08008f1a <L_shift>:
 8008f1a:	2308      	movs	r3, #8
 8008f1c:	b570      	push	{r4, r5, r6, lr}
 8008f1e:	2520      	movs	r5, #32
 8008f20:	1a9a      	subs	r2, r3, r2
 8008f22:	0092      	lsls	r2, r2, #2
 8008f24:	1aad      	subs	r5, r5, r2
 8008f26:	6843      	ldr	r3, [r0, #4]
 8008f28:	6806      	ldr	r6, [r0, #0]
 8008f2a:	001c      	movs	r4, r3
 8008f2c:	40ac      	lsls	r4, r5
 8008f2e:	40d3      	lsrs	r3, r2
 8008f30:	4334      	orrs	r4, r6
 8008f32:	6004      	str	r4, [r0, #0]
 8008f34:	6043      	str	r3, [r0, #4]
 8008f36:	3004      	adds	r0, #4
 8008f38:	4288      	cmp	r0, r1
 8008f3a:	d3f4      	bcc.n	8008f26 <L_shift+0xc>
 8008f3c:	bd70      	pop	{r4, r5, r6, pc}

08008f3e <__match>:
 8008f3e:	b530      	push	{r4, r5, lr}
 8008f40:	6803      	ldr	r3, [r0, #0]
 8008f42:	780c      	ldrb	r4, [r1, #0]
 8008f44:	3301      	adds	r3, #1
 8008f46:	2c00      	cmp	r4, #0
 8008f48:	d102      	bne.n	8008f50 <__match+0x12>
 8008f4a:	6003      	str	r3, [r0, #0]
 8008f4c:	2001      	movs	r0, #1
 8008f4e:	bd30      	pop	{r4, r5, pc}
 8008f50:	781a      	ldrb	r2, [r3, #0]
 8008f52:	0015      	movs	r5, r2
 8008f54:	3d41      	subs	r5, #65	; 0x41
 8008f56:	2d19      	cmp	r5, #25
 8008f58:	d800      	bhi.n	8008f5c <__match+0x1e>
 8008f5a:	3220      	adds	r2, #32
 8008f5c:	3101      	adds	r1, #1
 8008f5e:	42a2      	cmp	r2, r4
 8008f60:	d0ef      	beq.n	8008f42 <__match+0x4>
 8008f62:	2000      	movs	r0, #0
 8008f64:	e7f3      	b.n	8008f4e <__match+0x10>

08008f66 <__hexnan>:
 8008f66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f68:	b08b      	sub	sp, #44	; 0x2c
 8008f6a:	9201      	str	r2, [sp, #4]
 8008f6c:	680a      	ldr	r2, [r1, #0]
 8008f6e:	9901      	ldr	r1, [sp, #4]
 8008f70:	1153      	asrs	r3, r2, #5
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	18cb      	adds	r3, r1, r3
 8008f76:	9304      	str	r3, [sp, #16]
 8008f78:	231f      	movs	r3, #31
 8008f7a:	401a      	ands	r2, r3
 8008f7c:	9008      	str	r0, [sp, #32]
 8008f7e:	9206      	str	r2, [sp, #24]
 8008f80:	d002      	beq.n	8008f88 <__hexnan+0x22>
 8008f82:	9b04      	ldr	r3, [sp, #16]
 8008f84:	3304      	adds	r3, #4
 8008f86:	9304      	str	r3, [sp, #16]
 8008f88:	9b04      	ldr	r3, [sp, #16]
 8008f8a:	2500      	movs	r5, #0
 8008f8c:	1f1e      	subs	r6, r3, #4
 8008f8e:	0037      	movs	r7, r6
 8008f90:	0034      	movs	r4, r6
 8008f92:	9b08      	ldr	r3, [sp, #32]
 8008f94:	6035      	str	r5, [r6, #0]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	9507      	str	r5, [sp, #28]
 8008f9a:	9305      	str	r3, [sp, #20]
 8008f9c:	9502      	str	r5, [sp, #8]
 8008f9e:	9b05      	ldr	r3, [sp, #20]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8008fa4:	9b05      	ldr	r3, [sp, #20]
 8008fa6:	785b      	ldrb	r3, [r3, #1]
 8008fa8:	9303      	str	r3, [sp, #12]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d028      	beq.n	8009000 <__hexnan+0x9a>
 8008fae:	9803      	ldr	r0, [sp, #12]
 8008fb0:	f7ff fd73 	bl	8008a9a <__hexdig_fun>
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	d145      	bne.n	8009044 <__hexnan+0xde>
 8008fb8:	9b03      	ldr	r3, [sp, #12]
 8008fba:	2b20      	cmp	r3, #32
 8008fbc:	d819      	bhi.n	8008ff2 <__hexnan+0x8c>
 8008fbe:	9b02      	ldr	r3, [sp, #8]
 8008fc0:	9a07      	ldr	r2, [sp, #28]
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	dd12      	ble.n	8008fec <__hexnan+0x86>
 8008fc6:	42bc      	cmp	r4, r7
 8008fc8:	d206      	bcs.n	8008fd8 <__hexnan+0x72>
 8008fca:	2d07      	cmp	r5, #7
 8008fcc:	dc04      	bgt.n	8008fd8 <__hexnan+0x72>
 8008fce:	002a      	movs	r2, r5
 8008fd0:	0039      	movs	r1, r7
 8008fd2:	0020      	movs	r0, r4
 8008fd4:	f7ff ffa1 	bl	8008f1a <L_shift>
 8008fd8:	9b01      	ldr	r3, [sp, #4]
 8008fda:	2508      	movs	r5, #8
 8008fdc:	429c      	cmp	r4, r3
 8008fde:	d905      	bls.n	8008fec <__hexnan+0x86>
 8008fe0:	1f27      	subs	r7, r4, #4
 8008fe2:	2500      	movs	r5, #0
 8008fe4:	003c      	movs	r4, r7
 8008fe6:	9b02      	ldr	r3, [sp, #8]
 8008fe8:	603d      	str	r5, [r7, #0]
 8008fea:	9307      	str	r3, [sp, #28]
 8008fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fee:	9305      	str	r3, [sp, #20]
 8008ff0:	e7d5      	b.n	8008f9e <__hexnan+0x38>
 8008ff2:	9b03      	ldr	r3, [sp, #12]
 8008ff4:	2b29      	cmp	r3, #41	; 0x29
 8008ff6:	d14a      	bne.n	800908e <__hexnan+0x128>
 8008ff8:	9b05      	ldr	r3, [sp, #20]
 8008ffa:	9a08      	ldr	r2, [sp, #32]
 8008ffc:	3302      	adds	r3, #2
 8008ffe:	6013      	str	r3, [r2, #0]
 8009000:	9b02      	ldr	r3, [sp, #8]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d043      	beq.n	800908e <__hexnan+0x128>
 8009006:	42bc      	cmp	r4, r7
 8009008:	d206      	bcs.n	8009018 <__hexnan+0xb2>
 800900a:	2d07      	cmp	r5, #7
 800900c:	dc04      	bgt.n	8009018 <__hexnan+0xb2>
 800900e:	002a      	movs	r2, r5
 8009010:	0039      	movs	r1, r7
 8009012:	0020      	movs	r0, r4
 8009014:	f7ff ff81 	bl	8008f1a <L_shift>
 8009018:	9b01      	ldr	r3, [sp, #4]
 800901a:	429c      	cmp	r4, r3
 800901c:	d926      	bls.n	800906c <__hexnan+0x106>
 800901e:	cc04      	ldmia	r4!, {r2}
 8009020:	601a      	str	r2, [r3, #0]
 8009022:	3304      	adds	r3, #4
 8009024:	42a6      	cmp	r6, r4
 8009026:	d2fa      	bcs.n	800901e <__hexnan+0xb8>
 8009028:	2200      	movs	r2, #0
 800902a:	c304      	stmia	r3!, {r2}
 800902c:	429e      	cmp	r6, r3
 800902e:	d2fc      	bcs.n	800902a <__hexnan+0xc4>
 8009030:	6833      	ldr	r3, [r6, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d104      	bne.n	8009040 <__hexnan+0xda>
 8009036:	9b01      	ldr	r3, [sp, #4]
 8009038:	429e      	cmp	r6, r3
 800903a:	d126      	bne.n	800908a <__hexnan+0x124>
 800903c:	2301      	movs	r3, #1
 800903e:	6033      	str	r3, [r6, #0]
 8009040:	2005      	movs	r0, #5
 8009042:	e025      	b.n	8009090 <__hexnan+0x12a>
 8009044:	9b02      	ldr	r3, [sp, #8]
 8009046:	3501      	adds	r5, #1
 8009048:	3301      	adds	r3, #1
 800904a:	9302      	str	r3, [sp, #8]
 800904c:	2d08      	cmp	r5, #8
 800904e:	dd06      	ble.n	800905e <__hexnan+0xf8>
 8009050:	9b01      	ldr	r3, [sp, #4]
 8009052:	429c      	cmp	r4, r3
 8009054:	d9ca      	bls.n	8008fec <__hexnan+0x86>
 8009056:	2300      	movs	r3, #0
 8009058:	2501      	movs	r5, #1
 800905a:	3c04      	subs	r4, #4
 800905c:	6023      	str	r3, [r4, #0]
 800905e:	220f      	movs	r2, #15
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	4010      	ands	r0, r2
 8009064:	011b      	lsls	r3, r3, #4
 8009066:	4318      	orrs	r0, r3
 8009068:	6020      	str	r0, [r4, #0]
 800906a:	e7bf      	b.n	8008fec <__hexnan+0x86>
 800906c:	9b06      	ldr	r3, [sp, #24]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d0de      	beq.n	8009030 <__hexnan+0xca>
 8009072:	2120      	movs	r1, #32
 8009074:	9a06      	ldr	r2, [sp, #24]
 8009076:	9b04      	ldr	r3, [sp, #16]
 8009078:	1a89      	subs	r1, r1, r2
 800907a:	2201      	movs	r2, #1
 800907c:	4252      	negs	r2, r2
 800907e:	40ca      	lsrs	r2, r1
 8009080:	3b04      	subs	r3, #4
 8009082:	6819      	ldr	r1, [r3, #0]
 8009084:	400a      	ands	r2, r1
 8009086:	601a      	str	r2, [r3, #0]
 8009088:	e7d2      	b.n	8009030 <__hexnan+0xca>
 800908a:	3e04      	subs	r6, #4
 800908c:	e7d0      	b.n	8009030 <__hexnan+0xca>
 800908e:	2004      	movs	r0, #4
 8009090:	b00b      	add	sp, #44	; 0x2c
 8009092:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009094 <__locale_ctype_ptr_l>:
 8009094:	30ec      	adds	r0, #236	; 0xec
 8009096:	6800      	ldr	r0, [r0, #0]
 8009098:	4770      	bx	lr

0800909a <__localeconv_l>:
 800909a:	30f0      	adds	r0, #240	; 0xf0
 800909c:	4770      	bx	lr
	...

080090a0 <_localeconv_r>:
 80090a0:	4b03      	ldr	r3, [pc, #12]	; (80090b0 <_localeconv_r+0x10>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	6a18      	ldr	r0, [r3, #32]
 80090a6:	2800      	cmp	r0, #0
 80090a8:	d100      	bne.n	80090ac <_localeconv_r+0xc>
 80090aa:	4802      	ldr	r0, [pc, #8]	; (80090b4 <_localeconv_r+0x14>)
 80090ac:	30f0      	adds	r0, #240	; 0xf0
 80090ae:	4770      	bx	lr
 80090b0:	2000000c 	.word	0x2000000c
 80090b4:	20000070 	.word	0x20000070

080090b8 <malloc>:
 80090b8:	b510      	push	{r4, lr}
 80090ba:	4b03      	ldr	r3, [pc, #12]	; (80090c8 <malloc+0x10>)
 80090bc:	0001      	movs	r1, r0
 80090be:	6818      	ldr	r0, [r3, #0]
 80090c0:	f000 fc70 	bl	80099a4 <_malloc_r>
 80090c4:	bd10      	pop	{r4, pc}
 80090c6:	46c0      	nop			; (mov r8, r8)
 80090c8:	2000000c 	.word	0x2000000c

080090cc <__ascii_mbtowc>:
 80090cc:	b082      	sub	sp, #8
 80090ce:	2900      	cmp	r1, #0
 80090d0:	d100      	bne.n	80090d4 <__ascii_mbtowc+0x8>
 80090d2:	a901      	add	r1, sp, #4
 80090d4:	1e10      	subs	r0, r2, #0
 80090d6:	d006      	beq.n	80090e6 <__ascii_mbtowc+0x1a>
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d006      	beq.n	80090ea <__ascii_mbtowc+0x1e>
 80090dc:	7813      	ldrb	r3, [r2, #0]
 80090de:	600b      	str	r3, [r1, #0]
 80090e0:	7810      	ldrb	r0, [r2, #0]
 80090e2:	1e43      	subs	r3, r0, #1
 80090e4:	4198      	sbcs	r0, r3
 80090e6:	b002      	add	sp, #8
 80090e8:	4770      	bx	lr
 80090ea:	2002      	movs	r0, #2
 80090ec:	4240      	negs	r0, r0
 80090ee:	e7fa      	b.n	80090e6 <__ascii_mbtowc+0x1a>

080090f0 <memchr>:
 80090f0:	b2c9      	uxtb	r1, r1
 80090f2:	1882      	adds	r2, r0, r2
 80090f4:	4290      	cmp	r0, r2
 80090f6:	d101      	bne.n	80090fc <memchr+0xc>
 80090f8:	2000      	movs	r0, #0
 80090fa:	4770      	bx	lr
 80090fc:	7803      	ldrb	r3, [r0, #0]
 80090fe:	428b      	cmp	r3, r1
 8009100:	d0fb      	beq.n	80090fa <memchr+0xa>
 8009102:	3001      	adds	r0, #1
 8009104:	e7f6      	b.n	80090f4 <memchr+0x4>

08009106 <_Balloc>:
 8009106:	b570      	push	{r4, r5, r6, lr}
 8009108:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800910a:	0004      	movs	r4, r0
 800910c:	000d      	movs	r5, r1
 800910e:	2e00      	cmp	r6, #0
 8009110:	d107      	bne.n	8009122 <_Balloc+0x1c>
 8009112:	2010      	movs	r0, #16
 8009114:	f7ff ffd0 	bl	80090b8 <malloc>
 8009118:	6260      	str	r0, [r4, #36]	; 0x24
 800911a:	6046      	str	r6, [r0, #4]
 800911c:	6086      	str	r6, [r0, #8]
 800911e:	6006      	str	r6, [r0, #0]
 8009120:	60c6      	str	r6, [r0, #12]
 8009122:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009124:	68f3      	ldr	r3, [r6, #12]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d013      	beq.n	8009152 <_Balloc+0x4c>
 800912a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800912c:	00aa      	lsls	r2, r5, #2
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	189b      	adds	r3, r3, r2
 8009132:	6818      	ldr	r0, [r3, #0]
 8009134:	2800      	cmp	r0, #0
 8009136:	d118      	bne.n	800916a <_Balloc+0x64>
 8009138:	2101      	movs	r1, #1
 800913a:	000e      	movs	r6, r1
 800913c:	40ae      	lsls	r6, r5
 800913e:	1d72      	adds	r2, r6, #5
 8009140:	0092      	lsls	r2, r2, #2
 8009142:	0020      	movs	r0, r4
 8009144:	f000 fbd5 	bl	80098f2 <_calloc_r>
 8009148:	2800      	cmp	r0, #0
 800914a:	d00c      	beq.n	8009166 <_Balloc+0x60>
 800914c:	6045      	str	r5, [r0, #4]
 800914e:	6086      	str	r6, [r0, #8]
 8009150:	e00d      	b.n	800916e <_Balloc+0x68>
 8009152:	2221      	movs	r2, #33	; 0x21
 8009154:	2104      	movs	r1, #4
 8009156:	0020      	movs	r0, r4
 8009158:	f000 fbcb 	bl	80098f2 <_calloc_r>
 800915c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800915e:	60f0      	str	r0, [r6, #12]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1e1      	bne.n	800912a <_Balloc+0x24>
 8009166:	2000      	movs	r0, #0
 8009168:	bd70      	pop	{r4, r5, r6, pc}
 800916a:	6802      	ldr	r2, [r0, #0]
 800916c:	601a      	str	r2, [r3, #0]
 800916e:	2300      	movs	r3, #0
 8009170:	6103      	str	r3, [r0, #16]
 8009172:	60c3      	str	r3, [r0, #12]
 8009174:	e7f8      	b.n	8009168 <_Balloc+0x62>

08009176 <_Bfree>:
 8009176:	b570      	push	{r4, r5, r6, lr}
 8009178:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800917a:	0006      	movs	r6, r0
 800917c:	000d      	movs	r5, r1
 800917e:	2c00      	cmp	r4, #0
 8009180:	d107      	bne.n	8009192 <_Bfree+0x1c>
 8009182:	2010      	movs	r0, #16
 8009184:	f7ff ff98 	bl	80090b8 <malloc>
 8009188:	6270      	str	r0, [r6, #36]	; 0x24
 800918a:	6044      	str	r4, [r0, #4]
 800918c:	6084      	str	r4, [r0, #8]
 800918e:	6004      	str	r4, [r0, #0]
 8009190:	60c4      	str	r4, [r0, #12]
 8009192:	2d00      	cmp	r5, #0
 8009194:	d007      	beq.n	80091a6 <_Bfree+0x30>
 8009196:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009198:	686a      	ldr	r2, [r5, #4]
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	0092      	lsls	r2, r2, #2
 800919e:	189b      	adds	r3, r3, r2
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	602a      	str	r2, [r5, #0]
 80091a4:	601d      	str	r5, [r3, #0]
 80091a6:	bd70      	pop	{r4, r5, r6, pc}

080091a8 <__multadd>:
 80091a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091aa:	001e      	movs	r6, r3
 80091ac:	2314      	movs	r3, #20
 80091ae:	469c      	mov	ip, r3
 80091b0:	0007      	movs	r7, r0
 80091b2:	000c      	movs	r4, r1
 80091b4:	2000      	movs	r0, #0
 80091b6:	690d      	ldr	r5, [r1, #16]
 80091b8:	448c      	add	ip, r1
 80091ba:	4663      	mov	r3, ip
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	3001      	adds	r0, #1
 80091c0:	b299      	uxth	r1, r3
 80091c2:	4663      	mov	r3, ip
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4351      	muls	r1, r2
 80091c8:	0c1b      	lsrs	r3, r3, #16
 80091ca:	4353      	muls	r3, r2
 80091cc:	1989      	adds	r1, r1, r6
 80091ce:	0c0e      	lsrs	r6, r1, #16
 80091d0:	199b      	adds	r3, r3, r6
 80091d2:	b289      	uxth	r1, r1
 80091d4:	0c1e      	lsrs	r6, r3, #16
 80091d6:	041b      	lsls	r3, r3, #16
 80091d8:	185b      	adds	r3, r3, r1
 80091da:	4661      	mov	r1, ip
 80091dc:	c108      	stmia	r1!, {r3}
 80091de:	468c      	mov	ip, r1
 80091e0:	4285      	cmp	r5, r0
 80091e2:	dcea      	bgt.n	80091ba <__multadd+0x12>
 80091e4:	2e00      	cmp	r6, #0
 80091e6:	d01b      	beq.n	8009220 <__multadd+0x78>
 80091e8:	68a3      	ldr	r3, [r4, #8]
 80091ea:	42ab      	cmp	r3, r5
 80091ec:	dc12      	bgt.n	8009214 <__multadd+0x6c>
 80091ee:	6863      	ldr	r3, [r4, #4]
 80091f0:	0038      	movs	r0, r7
 80091f2:	1c59      	adds	r1, r3, #1
 80091f4:	f7ff ff87 	bl	8009106 <_Balloc>
 80091f8:	0021      	movs	r1, r4
 80091fa:	6923      	ldr	r3, [r4, #16]
 80091fc:	9001      	str	r0, [sp, #4]
 80091fe:	1c9a      	adds	r2, r3, #2
 8009200:	0092      	lsls	r2, r2, #2
 8009202:	310c      	adds	r1, #12
 8009204:	300c      	adds	r0, #12
 8009206:	f7fc ff4d 	bl	80060a4 <memcpy>
 800920a:	0021      	movs	r1, r4
 800920c:	0038      	movs	r0, r7
 800920e:	f7ff ffb2 	bl	8009176 <_Bfree>
 8009212:	9c01      	ldr	r4, [sp, #4]
 8009214:	1d2b      	adds	r3, r5, #4
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	18e3      	adds	r3, r4, r3
 800921a:	3501      	adds	r5, #1
 800921c:	605e      	str	r6, [r3, #4]
 800921e:	6125      	str	r5, [r4, #16]
 8009220:	0020      	movs	r0, r4
 8009222:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08009224 <__s2b>:
 8009224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009226:	0006      	movs	r6, r0
 8009228:	0018      	movs	r0, r3
 800922a:	000c      	movs	r4, r1
 800922c:	3008      	adds	r0, #8
 800922e:	2109      	movs	r1, #9
 8009230:	9301      	str	r3, [sp, #4]
 8009232:	0015      	movs	r5, r2
 8009234:	f7f7 f802 	bl	800023c <__divsi3>
 8009238:	2301      	movs	r3, #1
 800923a:	2100      	movs	r1, #0
 800923c:	4283      	cmp	r3, r0
 800923e:	db1f      	blt.n	8009280 <__s2b+0x5c>
 8009240:	0030      	movs	r0, r6
 8009242:	f7ff ff60 	bl	8009106 <_Balloc>
 8009246:	9b08      	ldr	r3, [sp, #32]
 8009248:	6143      	str	r3, [r0, #20]
 800924a:	2301      	movs	r3, #1
 800924c:	6103      	str	r3, [r0, #16]
 800924e:	2d09      	cmp	r5, #9
 8009250:	dd19      	ble.n	8009286 <__s2b+0x62>
 8009252:	0023      	movs	r3, r4
 8009254:	3309      	adds	r3, #9
 8009256:	001f      	movs	r7, r3
 8009258:	9300      	str	r3, [sp, #0]
 800925a:	1964      	adds	r4, r4, r5
 800925c:	783b      	ldrb	r3, [r7, #0]
 800925e:	0001      	movs	r1, r0
 8009260:	3b30      	subs	r3, #48	; 0x30
 8009262:	220a      	movs	r2, #10
 8009264:	0030      	movs	r0, r6
 8009266:	3701      	adds	r7, #1
 8009268:	f7ff ff9e 	bl	80091a8 <__multadd>
 800926c:	42a7      	cmp	r7, r4
 800926e:	d1f5      	bne.n	800925c <__s2b+0x38>
 8009270:	9b00      	ldr	r3, [sp, #0]
 8009272:	195c      	adds	r4, r3, r5
 8009274:	3c08      	subs	r4, #8
 8009276:	002f      	movs	r7, r5
 8009278:	9b01      	ldr	r3, [sp, #4]
 800927a:	429f      	cmp	r7, r3
 800927c:	db06      	blt.n	800928c <__s2b+0x68>
 800927e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009280:	005b      	lsls	r3, r3, #1
 8009282:	3101      	adds	r1, #1
 8009284:	e7da      	b.n	800923c <__s2b+0x18>
 8009286:	340a      	adds	r4, #10
 8009288:	2509      	movs	r5, #9
 800928a:	e7f4      	b.n	8009276 <__s2b+0x52>
 800928c:	1b63      	subs	r3, r4, r5
 800928e:	5ddb      	ldrb	r3, [r3, r7]
 8009290:	0001      	movs	r1, r0
 8009292:	3b30      	subs	r3, #48	; 0x30
 8009294:	220a      	movs	r2, #10
 8009296:	0030      	movs	r0, r6
 8009298:	f7ff ff86 	bl	80091a8 <__multadd>
 800929c:	3701      	adds	r7, #1
 800929e:	e7eb      	b.n	8009278 <__s2b+0x54>

080092a0 <__hi0bits>:
 80092a0:	0003      	movs	r3, r0
 80092a2:	0c02      	lsrs	r2, r0, #16
 80092a4:	2000      	movs	r0, #0
 80092a6:	4282      	cmp	r2, r0
 80092a8:	d101      	bne.n	80092ae <__hi0bits+0xe>
 80092aa:	041b      	lsls	r3, r3, #16
 80092ac:	3010      	adds	r0, #16
 80092ae:	0e1a      	lsrs	r2, r3, #24
 80092b0:	d101      	bne.n	80092b6 <__hi0bits+0x16>
 80092b2:	3008      	adds	r0, #8
 80092b4:	021b      	lsls	r3, r3, #8
 80092b6:	0f1a      	lsrs	r2, r3, #28
 80092b8:	d101      	bne.n	80092be <__hi0bits+0x1e>
 80092ba:	3004      	adds	r0, #4
 80092bc:	011b      	lsls	r3, r3, #4
 80092be:	0f9a      	lsrs	r2, r3, #30
 80092c0:	d101      	bne.n	80092c6 <__hi0bits+0x26>
 80092c2:	3002      	adds	r0, #2
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	db03      	blt.n	80092d2 <__hi0bits+0x32>
 80092ca:	3001      	adds	r0, #1
 80092cc:	005b      	lsls	r3, r3, #1
 80092ce:	d400      	bmi.n	80092d2 <__hi0bits+0x32>
 80092d0:	2020      	movs	r0, #32
 80092d2:	4770      	bx	lr

080092d4 <__lo0bits>:
 80092d4:	2207      	movs	r2, #7
 80092d6:	6803      	ldr	r3, [r0, #0]
 80092d8:	b510      	push	{r4, lr}
 80092da:	0001      	movs	r1, r0
 80092dc:	401a      	ands	r2, r3
 80092de:	d00d      	beq.n	80092fc <__lo0bits+0x28>
 80092e0:	2401      	movs	r4, #1
 80092e2:	2000      	movs	r0, #0
 80092e4:	4223      	tst	r3, r4
 80092e6:	d105      	bne.n	80092f4 <__lo0bits+0x20>
 80092e8:	3002      	adds	r0, #2
 80092ea:	4203      	tst	r3, r0
 80092ec:	d003      	beq.n	80092f6 <__lo0bits+0x22>
 80092ee:	40e3      	lsrs	r3, r4
 80092f0:	0020      	movs	r0, r4
 80092f2:	600b      	str	r3, [r1, #0]
 80092f4:	bd10      	pop	{r4, pc}
 80092f6:	089b      	lsrs	r3, r3, #2
 80092f8:	600b      	str	r3, [r1, #0]
 80092fa:	e7fb      	b.n	80092f4 <__lo0bits+0x20>
 80092fc:	b29c      	uxth	r4, r3
 80092fe:	0010      	movs	r0, r2
 8009300:	2c00      	cmp	r4, #0
 8009302:	d101      	bne.n	8009308 <__lo0bits+0x34>
 8009304:	2010      	movs	r0, #16
 8009306:	0c1b      	lsrs	r3, r3, #16
 8009308:	b2da      	uxtb	r2, r3
 800930a:	2a00      	cmp	r2, #0
 800930c:	d101      	bne.n	8009312 <__lo0bits+0x3e>
 800930e:	3008      	adds	r0, #8
 8009310:	0a1b      	lsrs	r3, r3, #8
 8009312:	071a      	lsls	r2, r3, #28
 8009314:	d101      	bne.n	800931a <__lo0bits+0x46>
 8009316:	3004      	adds	r0, #4
 8009318:	091b      	lsrs	r3, r3, #4
 800931a:	079a      	lsls	r2, r3, #30
 800931c:	d101      	bne.n	8009322 <__lo0bits+0x4e>
 800931e:	3002      	adds	r0, #2
 8009320:	089b      	lsrs	r3, r3, #2
 8009322:	07da      	lsls	r2, r3, #31
 8009324:	d4e8      	bmi.n	80092f8 <__lo0bits+0x24>
 8009326:	085b      	lsrs	r3, r3, #1
 8009328:	d001      	beq.n	800932e <__lo0bits+0x5a>
 800932a:	3001      	adds	r0, #1
 800932c:	e7e4      	b.n	80092f8 <__lo0bits+0x24>
 800932e:	2020      	movs	r0, #32
 8009330:	e7e0      	b.n	80092f4 <__lo0bits+0x20>

08009332 <__i2b>:
 8009332:	b510      	push	{r4, lr}
 8009334:	000c      	movs	r4, r1
 8009336:	2101      	movs	r1, #1
 8009338:	f7ff fee5 	bl	8009106 <_Balloc>
 800933c:	2301      	movs	r3, #1
 800933e:	6144      	str	r4, [r0, #20]
 8009340:	6103      	str	r3, [r0, #16]
 8009342:	bd10      	pop	{r4, pc}

08009344 <__multiply>:
 8009344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009346:	690b      	ldr	r3, [r1, #16]
 8009348:	0014      	movs	r4, r2
 800934a:	6912      	ldr	r2, [r2, #16]
 800934c:	b089      	sub	sp, #36	; 0x24
 800934e:	000d      	movs	r5, r1
 8009350:	4293      	cmp	r3, r2
 8009352:	da01      	bge.n	8009358 <__multiply+0x14>
 8009354:	0025      	movs	r5, r4
 8009356:	000c      	movs	r4, r1
 8009358:	692f      	ldr	r7, [r5, #16]
 800935a:	6926      	ldr	r6, [r4, #16]
 800935c:	6869      	ldr	r1, [r5, #4]
 800935e:	19bb      	adds	r3, r7, r6
 8009360:	9302      	str	r3, [sp, #8]
 8009362:	68ab      	ldr	r3, [r5, #8]
 8009364:	19ba      	adds	r2, r7, r6
 8009366:	4293      	cmp	r3, r2
 8009368:	da00      	bge.n	800936c <__multiply+0x28>
 800936a:	3101      	adds	r1, #1
 800936c:	f7ff fecb 	bl	8009106 <_Balloc>
 8009370:	0002      	movs	r2, r0
 8009372:	19bb      	adds	r3, r7, r6
 8009374:	3214      	adds	r2, #20
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	18d3      	adds	r3, r2, r3
 800937a:	469c      	mov	ip, r3
 800937c:	2100      	movs	r1, #0
 800937e:	0013      	movs	r3, r2
 8009380:	9004      	str	r0, [sp, #16]
 8009382:	4563      	cmp	r3, ip
 8009384:	d31d      	bcc.n	80093c2 <__multiply+0x7e>
 8009386:	3514      	adds	r5, #20
 8009388:	00bf      	lsls	r7, r7, #2
 800938a:	19eb      	adds	r3, r5, r7
 800938c:	3414      	adds	r4, #20
 800938e:	00b6      	lsls	r6, r6, #2
 8009390:	9305      	str	r3, [sp, #20]
 8009392:	19a3      	adds	r3, r4, r6
 8009394:	9503      	str	r5, [sp, #12]
 8009396:	9401      	str	r4, [sp, #4]
 8009398:	9307      	str	r3, [sp, #28]
 800939a:	9b07      	ldr	r3, [sp, #28]
 800939c:	9901      	ldr	r1, [sp, #4]
 800939e:	4299      	cmp	r1, r3
 80093a0:	d311      	bcc.n	80093c6 <__multiply+0x82>
 80093a2:	9b02      	ldr	r3, [sp, #8]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	dd06      	ble.n	80093b6 <__multiply+0x72>
 80093a8:	2304      	movs	r3, #4
 80093aa:	425b      	negs	r3, r3
 80093ac:	449c      	add	ip, r3
 80093ae:	4663      	mov	r3, ip
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d051      	beq.n	800945a <__multiply+0x116>
 80093b6:	9b04      	ldr	r3, [sp, #16]
 80093b8:	9a02      	ldr	r2, [sp, #8]
 80093ba:	0018      	movs	r0, r3
 80093bc:	611a      	str	r2, [r3, #16]
 80093be:	b009      	add	sp, #36	; 0x24
 80093c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093c2:	c302      	stmia	r3!, {r1}
 80093c4:	e7dd      	b.n	8009382 <__multiply+0x3e>
 80093c6:	9b01      	ldr	r3, [sp, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	b298      	uxth	r0, r3
 80093cc:	2800      	cmp	r0, #0
 80093ce:	d01c      	beq.n	800940a <__multiply+0xc6>
 80093d0:	0015      	movs	r5, r2
 80093d2:	2600      	movs	r6, #0
 80093d4:	9f03      	ldr	r7, [sp, #12]
 80093d6:	cf02      	ldmia	r7!, {r1}
 80093d8:	682c      	ldr	r4, [r5, #0]
 80093da:	b28b      	uxth	r3, r1
 80093dc:	4343      	muls	r3, r0
 80093de:	0c09      	lsrs	r1, r1, #16
 80093e0:	4341      	muls	r1, r0
 80093e2:	b2a4      	uxth	r4, r4
 80093e4:	191b      	adds	r3, r3, r4
 80093e6:	199b      	adds	r3, r3, r6
 80093e8:	000e      	movs	r6, r1
 80093ea:	6829      	ldr	r1, [r5, #0]
 80093ec:	9506      	str	r5, [sp, #24]
 80093ee:	0c09      	lsrs	r1, r1, #16
 80093f0:	1871      	adds	r1, r6, r1
 80093f2:	0c1e      	lsrs	r6, r3, #16
 80093f4:	1989      	adds	r1, r1, r6
 80093f6:	0c0e      	lsrs	r6, r1, #16
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	0409      	lsls	r1, r1, #16
 80093fc:	430b      	orrs	r3, r1
 80093fe:	c508      	stmia	r5!, {r3}
 8009400:	9b05      	ldr	r3, [sp, #20]
 8009402:	42bb      	cmp	r3, r7
 8009404:	d8e7      	bhi.n	80093d6 <__multiply+0x92>
 8009406:	9b06      	ldr	r3, [sp, #24]
 8009408:	605e      	str	r6, [r3, #4]
 800940a:	9b01      	ldr	r3, [sp, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	0c1d      	lsrs	r5, r3, #16
 8009410:	d01e      	beq.n	8009450 <__multiply+0x10c>
 8009412:	0010      	movs	r0, r2
 8009414:	2700      	movs	r7, #0
 8009416:	6813      	ldr	r3, [r2, #0]
 8009418:	9e03      	ldr	r6, [sp, #12]
 800941a:	6831      	ldr	r1, [r6, #0]
 800941c:	6804      	ldr	r4, [r0, #0]
 800941e:	b289      	uxth	r1, r1
 8009420:	4369      	muls	r1, r5
 8009422:	0c24      	lsrs	r4, r4, #16
 8009424:	1909      	adds	r1, r1, r4
 8009426:	19c9      	adds	r1, r1, r7
 8009428:	040f      	lsls	r7, r1, #16
 800942a:	b29b      	uxth	r3, r3
 800942c:	433b      	orrs	r3, r7
 800942e:	6003      	str	r3, [r0, #0]
 8009430:	ce80      	ldmia	r6!, {r7}
 8009432:	6843      	ldr	r3, [r0, #4]
 8009434:	0c3f      	lsrs	r7, r7, #16
 8009436:	436f      	muls	r7, r5
 8009438:	b29b      	uxth	r3, r3
 800943a:	18fb      	adds	r3, r7, r3
 800943c:	0c09      	lsrs	r1, r1, #16
 800943e:	185b      	adds	r3, r3, r1
 8009440:	9905      	ldr	r1, [sp, #20]
 8009442:	9006      	str	r0, [sp, #24]
 8009444:	0c1f      	lsrs	r7, r3, #16
 8009446:	3004      	adds	r0, #4
 8009448:	42b1      	cmp	r1, r6
 800944a:	d8e6      	bhi.n	800941a <__multiply+0xd6>
 800944c:	9906      	ldr	r1, [sp, #24]
 800944e:	604b      	str	r3, [r1, #4]
 8009450:	9b01      	ldr	r3, [sp, #4]
 8009452:	3204      	adds	r2, #4
 8009454:	3304      	adds	r3, #4
 8009456:	9301      	str	r3, [sp, #4]
 8009458:	e79f      	b.n	800939a <__multiply+0x56>
 800945a:	9b02      	ldr	r3, [sp, #8]
 800945c:	3b01      	subs	r3, #1
 800945e:	9302      	str	r3, [sp, #8]
 8009460:	e79f      	b.n	80093a2 <__multiply+0x5e>
	...

08009464 <__pow5mult>:
 8009464:	2303      	movs	r3, #3
 8009466:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009468:	4013      	ands	r3, r2
 800946a:	0005      	movs	r5, r0
 800946c:	000e      	movs	r6, r1
 800946e:	0014      	movs	r4, r2
 8009470:	2b00      	cmp	r3, #0
 8009472:	d008      	beq.n	8009486 <__pow5mult+0x22>
 8009474:	4922      	ldr	r1, [pc, #136]	; (8009500 <__pow5mult+0x9c>)
 8009476:	3b01      	subs	r3, #1
 8009478:	009a      	lsls	r2, r3, #2
 800947a:	5852      	ldr	r2, [r2, r1]
 800947c:	2300      	movs	r3, #0
 800947e:	0031      	movs	r1, r6
 8009480:	f7ff fe92 	bl	80091a8 <__multadd>
 8009484:	0006      	movs	r6, r0
 8009486:	10a3      	asrs	r3, r4, #2
 8009488:	9301      	str	r3, [sp, #4]
 800948a:	d036      	beq.n	80094fa <__pow5mult+0x96>
 800948c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800948e:	2c00      	cmp	r4, #0
 8009490:	d107      	bne.n	80094a2 <__pow5mult+0x3e>
 8009492:	2010      	movs	r0, #16
 8009494:	f7ff fe10 	bl	80090b8 <malloc>
 8009498:	6268      	str	r0, [r5, #36]	; 0x24
 800949a:	6044      	str	r4, [r0, #4]
 800949c:	6084      	str	r4, [r0, #8]
 800949e:	6004      	str	r4, [r0, #0]
 80094a0:	60c4      	str	r4, [r0, #12]
 80094a2:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 80094a4:	68bc      	ldr	r4, [r7, #8]
 80094a6:	2c00      	cmp	r4, #0
 80094a8:	d107      	bne.n	80094ba <__pow5mult+0x56>
 80094aa:	4916      	ldr	r1, [pc, #88]	; (8009504 <__pow5mult+0xa0>)
 80094ac:	0028      	movs	r0, r5
 80094ae:	f7ff ff40 	bl	8009332 <__i2b>
 80094b2:	2300      	movs	r3, #0
 80094b4:	0004      	movs	r4, r0
 80094b6:	60b8      	str	r0, [r7, #8]
 80094b8:	6003      	str	r3, [r0, #0]
 80094ba:	2201      	movs	r2, #1
 80094bc:	9b01      	ldr	r3, [sp, #4]
 80094be:	4213      	tst	r3, r2
 80094c0:	d00a      	beq.n	80094d8 <__pow5mult+0x74>
 80094c2:	0031      	movs	r1, r6
 80094c4:	0022      	movs	r2, r4
 80094c6:	0028      	movs	r0, r5
 80094c8:	f7ff ff3c 	bl	8009344 <__multiply>
 80094cc:	0007      	movs	r7, r0
 80094ce:	0031      	movs	r1, r6
 80094d0:	0028      	movs	r0, r5
 80094d2:	f7ff fe50 	bl	8009176 <_Bfree>
 80094d6:	003e      	movs	r6, r7
 80094d8:	9b01      	ldr	r3, [sp, #4]
 80094da:	105b      	asrs	r3, r3, #1
 80094dc:	9301      	str	r3, [sp, #4]
 80094de:	d00c      	beq.n	80094fa <__pow5mult+0x96>
 80094e0:	6820      	ldr	r0, [r4, #0]
 80094e2:	2800      	cmp	r0, #0
 80094e4:	d107      	bne.n	80094f6 <__pow5mult+0x92>
 80094e6:	0022      	movs	r2, r4
 80094e8:	0021      	movs	r1, r4
 80094ea:	0028      	movs	r0, r5
 80094ec:	f7ff ff2a 	bl	8009344 <__multiply>
 80094f0:	2300      	movs	r3, #0
 80094f2:	6020      	str	r0, [r4, #0]
 80094f4:	6003      	str	r3, [r0, #0]
 80094f6:	0004      	movs	r4, r0
 80094f8:	e7df      	b.n	80094ba <__pow5mult+0x56>
 80094fa:	0030      	movs	r0, r6
 80094fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80094fe:	46c0      	nop			; (mov r8, r8)
 8009500:	0800a988 	.word	0x0800a988
 8009504:	00000271 	.word	0x00000271

08009508 <__lshift>:
 8009508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800950a:	000d      	movs	r5, r1
 800950c:	0017      	movs	r7, r2
 800950e:	692b      	ldr	r3, [r5, #16]
 8009510:	1154      	asrs	r4, r2, #5
 8009512:	b085      	sub	sp, #20
 8009514:	18e3      	adds	r3, r4, r3
 8009516:	9301      	str	r3, [sp, #4]
 8009518:	3301      	adds	r3, #1
 800951a:	9300      	str	r3, [sp, #0]
 800951c:	6849      	ldr	r1, [r1, #4]
 800951e:	68ab      	ldr	r3, [r5, #8]
 8009520:	9002      	str	r0, [sp, #8]
 8009522:	9a00      	ldr	r2, [sp, #0]
 8009524:	4293      	cmp	r3, r2
 8009526:	db35      	blt.n	8009594 <__lshift+0x8c>
 8009528:	9802      	ldr	r0, [sp, #8]
 800952a:	f7ff fdec 	bl	8009106 <_Balloc>
 800952e:	2300      	movs	r3, #0
 8009530:	0002      	movs	r2, r0
 8009532:	0006      	movs	r6, r0
 8009534:	0019      	movs	r1, r3
 8009536:	3214      	adds	r2, #20
 8009538:	42a3      	cmp	r3, r4
 800953a:	db2e      	blt.n	800959a <__lshift+0x92>
 800953c:	43e3      	mvns	r3, r4
 800953e:	17db      	asrs	r3, r3, #31
 8009540:	401c      	ands	r4, r3
 8009542:	002b      	movs	r3, r5
 8009544:	00a4      	lsls	r4, r4, #2
 8009546:	1914      	adds	r4, r2, r4
 8009548:	692a      	ldr	r2, [r5, #16]
 800954a:	3314      	adds	r3, #20
 800954c:	0092      	lsls	r2, r2, #2
 800954e:	189a      	adds	r2, r3, r2
 8009550:	4694      	mov	ip, r2
 8009552:	221f      	movs	r2, #31
 8009554:	4017      	ands	r7, r2
 8009556:	d024      	beq.n	80095a2 <__lshift+0x9a>
 8009558:	3201      	adds	r2, #1
 800955a:	1bd2      	subs	r2, r2, r7
 800955c:	9203      	str	r2, [sp, #12]
 800955e:	2200      	movs	r2, #0
 8009560:	6819      	ldr	r1, [r3, #0]
 8009562:	0020      	movs	r0, r4
 8009564:	40b9      	lsls	r1, r7
 8009566:	430a      	orrs	r2, r1
 8009568:	c404      	stmia	r4!, {r2}
 800956a:	cb04      	ldmia	r3!, {r2}
 800956c:	9903      	ldr	r1, [sp, #12]
 800956e:	40ca      	lsrs	r2, r1
 8009570:	459c      	cmp	ip, r3
 8009572:	d8f5      	bhi.n	8009560 <__lshift+0x58>
 8009574:	6042      	str	r2, [r0, #4]
 8009576:	2a00      	cmp	r2, #0
 8009578:	d002      	beq.n	8009580 <__lshift+0x78>
 800957a:	9b01      	ldr	r3, [sp, #4]
 800957c:	3302      	adds	r3, #2
 800957e:	9300      	str	r3, [sp, #0]
 8009580:	9b00      	ldr	r3, [sp, #0]
 8009582:	9802      	ldr	r0, [sp, #8]
 8009584:	3b01      	subs	r3, #1
 8009586:	6133      	str	r3, [r6, #16]
 8009588:	0029      	movs	r1, r5
 800958a:	f7ff fdf4 	bl	8009176 <_Bfree>
 800958e:	0030      	movs	r0, r6
 8009590:	b005      	add	sp, #20
 8009592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009594:	3101      	adds	r1, #1
 8009596:	005b      	lsls	r3, r3, #1
 8009598:	e7c3      	b.n	8009522 <__lshift+0x1a>
 800959a:	0098      	lsls	r0, r3, #2
 800959c:	5011      	str	r1, [r2, r0]
 800959e:	3301      	adds	r3, #1
 80095a0:	e7ca      	b.n	8009538 <__lshift+0x30>
 80095a2:	cb04      	ldmia	r3!, {r2}
 80095a4:	c404      	stmia	r4!, {r2}
 80095a6:	459c      	cmp	ip, r3
 80095a8:	d8fb      	bhi.n	80095a2 <__lshift+0x9a>
 80095aa:	e7e9      	b.n	8009580 <__lshift+0x78>

080095ac <__mcmp>:
 80095ac:	690a      	ldr	r2, [r1, #16]
 80095ae:	6903      	ldr	r3, [r0, #16]
 80095b0:	b530      	push	{r4, r5, lr}
 80095b2:	1a9b      	subs	r3, r3, r2
 80095b4:	d10d      	bne.n	80095d2 <__mcmp+0x26>
 80095b6:	0092      	lsls	r2, r2, #2
 80095b8:	3014      	adds	r0, #20
 80095ba:	3114      	adds	r1, #20
 80095bc:	1884      	adds	r4, r0, r2
 80095be:	1889      	adds	r1, r1, r2
 80095c0:	3c04      	subs	r4, #4
 80095c2:	3904      	subs	r1, #4
 80095c4:	6825      	ldr	r5, [r4, #0]
 80095c6:	680a      	ldr	r2, [r1, #0]
 80095c8:	4295      	cmp	r5, r2
 80095ca:	d004      	beq.n	80095d6 <__mcmp+0x2a>
 80095cc:	2301      	movs	r3, #1
 80095ce:	4295      	cmp	r5, r2
 80095d0:	d304      	bcc.n	80095dc <__mcmp+0x30>
 80095d2:	0018      	movs	r0, r3
 80095d4:	bd30      	pop	{r4, r5, pc}
 80095d6:	42a0      	cmp	r0, r4
 80095d8:	d3f2      	bcc.n	80095c0 <__mcmp+0x14>
 80095da:	e7fa      	b.n	80095d2 <__mcmp+0x26>
 80095dc:	425b      	negs	r3, r3
 80095de:	e7f8      	b.n	80095d2 <__mcmp+0x26>

080095e0 <__mdiff>:
 80095e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095e2:	000d      	movs	r5, r1
 80095e4:	b085      	sub	sp, #20
 80095e6:	0007      	movs	r7, r0
 80095e8:	0011      	movs	r1, r2
 80095ea:	0028      	movs	r0, r5
 80095ec:	0014      	movs	r4, r2
 80095ee:	f7ff ffdd 	bl	80095ac <__mcmp>
 80095f2:	1e06      	subs	r6, r0, #0
 80095f4:	d108      	bne.n	8009608 <__mdiff+0x28>
 80095f6:	0001      	movs	r1, r0
 80095f8:	0038      	movs	r0, r7
 80095fa:	f7ff fd84 	bl	8009106 <_Balloc>
 80095fe:	2301      	movs	r3, #1
 8009600:	6146      	str	r6, [r0, #20]
 8009602:	6103      	str	r3, [r0, #16]
 8009604:	b005      	add	sp, #20
 8009606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009608:	2301      	movs	r3, #1
 800960a:	9301      	str	r3, [sp, #4]
 800960c:	2800      	cmp	r0, #0
 800960e:	db04      	blt.n	800961a <__mdiff+0x3a>
 8009610:	0023      	movs	r3, r4
 8009612:	002c      	movs	r4, r5
 8009614:	001d      	movs	r5, r3
 8009616:	2300      	movs	r3, #0
 8009618:	9301      	str	r3, [sp, #4]
 800961a:	6861      	ldr	r1, [r4, #4]
 800961c:	0038      	movs	r0, r7
 800961e:	f7ff fd72 	bl	8009106 <_Balloc>
 8009622:	002f      	movs	r7, r5
 8009624:	2200      	movs	r2, #0
 8009626:	9b01      	ldr	r3, [sp, #4]
 8009628:	6926      	ldr	r6, [r4, #16]
 800962a:	60c3      	str	r3, [r0, #12]
 800962c:	3414      	adds	r4, #20
 800962e:	00b3      	lsls	r3, r6, #2
 8009630:	18e3      	adds	r3, r4, r3
 8009632:	9302      	str	r3, [sp, #8]
 8009634:	692b      	ldr	r3, [r5, #16]
 8009636:	3714      	adds	r7, #20
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	18fb      	adds	r3, r7, r3
 800963c:	9303      	str	r3, [sp, #12]
 800963e:	0003      	movs	r3, r0
 8009640:	4694      	mov	ip, r2
 8009642:	3314      	adds	r3, #20
 8009644:	cc20      	ldmia	r4!, {r5}
 8009646:	cf04      	ldmia	r7!, {r2}
 8009648:	9201      	str	r2, [sp, #4]
 800964a:	b2aa      	uxth	r2, r5
 800964c:	4494      	add	ip, r2
 800964e:	466a      	mov	r2, sp
 8009650:	4661      	mov	r1, ip
 8009652:	8892      	ldrh	r2, [r2, #4]
 8009654:	0c2d      	lsrs	r5, r5, #16
 8009656:	1a8a      	subs	r2, r1, r2
 8009658:	9901      	ldr	r1, [sp, #4]
 800965a:	0c09      	lsrs	r1, r1, #16
 800965c:	1a69      	subs	r1, r5, r1
 800965e:	1415      	asrs	r5, r2, #16
 8009660:	1949      	adds	r1, r1, r5
 8009662:	140d      	asrs	r5, r1, #16
 8009664:	b292      	uxth	r2, r2
 8009666:	0409      	lsls	r1, r1, #16
 8009668:	430a      	orrs	r2, r1
 800966a:	601a      	str	r2, [r3, #0]
 800966c:	9a03      	ldr	r2, [sp, #12]
 800966e:	46ac      	mov	ip, r5
 8009670:	3304      	adds	r3, #4
 8009672:	42ba      	cmp	r2, r7
 8009674:	d8e6      	bhi.n	8009644 <__mdiff+0x64>
 8009676:	9902      	ldr	r1, [sp, #8]
 8009678:	001a      	movs	r2, r3
 800967a:	428c      	cmp	r4, r1
 800967c:	d305      	bcc.n	800968a <__mdiff+0xaa>
 800967e:	3a04      	subs	r2, #4
 8009680:	6813      	ldr	r3, [r2, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00e      	beq.n	80096a4 <__mdiff+0xc4>
 8009686:	6106      	str	r6, [r0, #16]
 8009688:	e7bc      	b.n	8009604 <__mdiff+0x24>
 800968a:	cc04      	ldmia	r4!, {r2}
 800968c:	b291      	uxth	r1, r2
 800968e:	4461      	add	r1, ip
 8009690:	140d      	asrs	r5, r1, #16
 8009692:	0c12      	lsrs	r2, r2, #16
 8009694:	1952      	adds	r2, r2, r5
 8009696:	1415      	asrs	r5, r2, #16
 8009698:	b289      	uxth	r1, r1
 800969a:	0412      	lsls	r2, r2, #16
 800969c:	430a      	orrs	r2, r1
 800969e:	46ac      	mov	ip, r5
 80096a0:	c304      	stmia	r3!, {r2}
 80096a2:	e7e8      	b.n	8009676 <__mdiff+0x96>
 80096a4:	3e01      	subs	r6, #1
 80096a6:	e7ea      	b.n	800967e <__mdiff+0x9e>

080096a8 <__ulp>:
 80096a8:	000b      	movs	r3, r1
 80096aa:	4910      	ldr	r1, [pc, #64]	; (80096ec <__ulp+0x44>)
 80096ac:	b510      	push	{r4, lr}
 80096ae:	4019      	ands	r1, r3
 80096b0:	4b0f      	ldr	r3, [pc, #60]	; (80096f0 <__ulp+0x48>)
 80096b2:	18c9      	adds	r1, r1, r3
 80096b4:	2900      	cmp	r1, #0
 80096b6:	dd04      	ble.n	80096c2 <__ulp+0x1a>
 80096b8:	2200      	movs	r2, #0
 80096ba:	000b      	movs	r3, r1
 80096bc:	0010      	movs	r0, r2
 80096be:	0019      	movs	r1, r3
 80096c0:	bd10      	pop	{r4, pc}
 80096c2:	4249      	negs	r1, r1
 80096c4:	1509      	asrs	r1, r1, #20
 80096c6:	2200      	movs	r2, #0
 80096c8:	2300      	movs	r3, #0
 80096ca:	2913      	cmp	r1, #19
 80096cc:	dc04      	bgt.n	80096d8 <__ulp+0x30>
 80096ce:	2080      	movs	r0, #128	; 0x80
 80096d0:	0300      	lsls	r0, r0, #12
 80096d2:	4108      	asrs	r0, r1
 80096d4:	0003      	movs	r3, r0
 80096d6:	e7f1      	b.n	80096bc <__ulp+0x14>
 80096d8:	3914      	subs	r1, #20
 80096da:	2001      	movs	r0, #1
 80096dc:	291e      	cmp	r1, #30
 80096de:	dc02      	bgt.n	80096e6 <__ulp+0x3e>
 80096e0:	241f      	movs	r4, #31
 80096e2:	1a61      	subs	r1, r4, r1
 80096e4:	4088      	lsls	r0, r1
 80096e6:	0002      	movs	r2, r0
 80096e8:	e7e8      	b.n	80096bc <__ulp+0x14>
 80096ea:	46c0      	nop			; (mov r8, r8)
 80096ec:	7ff00000 	.word	0x7ff00000
 80096f0:	fcc00000 	.word	0xfcc00000

080096f4 <__b2d>:
 80096f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096f6:	0006      	movs	r6, r0
 80096f8:	6903      	ldr	r3, [r0, #16]
 80096fa:	3614      	adds	r6, #20
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	18f3      	adds	r3, r6, r3
 8009700:	1f1d      	subs	r5, r3, #4
 8009702:	682c      	ldr	r4, [r5, #0]
 8009704:	000f      	movs	r7, r1
 8009706:	0020      	movs	r0, r4
 8009708:	9301      	str	r3, [sp, #4]
 800970a:	f7ff fdc9 	bl	80092a0 <__hi0bits>
 800970e:	2320      	movs	r3, #32
 8009710:	1a1b      	subs	r3, r3, r0
 8009712:	603b      	str	r3, [r7, #0]
 8009714:	491c      	ldr	r1, [pc, #112]	; (8009788 <__b2d+0x94>)
 8009716:	280a      	cmp	r0, #10
 8009718:	dc16      	bgt.n	8009748 <__b2d+0x54>
 800971a:	230b      	movs	r3, #11
 800971c:	0027      	movs	r7, r4
 800971e:	1a1b      	subs	r3, r3, r0
 8009720:	40df      	lsrs	r7, r3
 8009722:	4339      	orrs	r1, r7
 8009724:	469c      	mov	ip, r3
 8009726:	000b      	movs	r3, r1
 8009728:	2100      	movs	r1, #0
 800972a:	42ae      	cmp	r6, r5
 800972c:	d202      	bcs.n	8009734 <__b2d+0x40>
 800972e:	9901      	ldr	r1, [sp, #4]
 8009730:	3908      	subs	r1, #8
 8009732:	6809      	ldr	r1, [r1, #0]
 8009734:	3015      	adds	r0, #21
 8009736:	4084      	lsls	r4, r0
 8009738:	4660      	mov	r0, ip
 800973a:	40c1      	lsrs	r1, r0
 800973c:	430c      	orrs	r4, r1
 800973e:	0022      	movs	r2, r4
 8009740:	0010      	movs	r0, r2
 8009742:	0019      	movs	r1, r3
 8009744:	b003      	add	sp, #12
 8009746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009748:	2700      	movs	r7, #0
 800974a:	42ae      	cmp	r6, r5
 800974c:	d202      	bcs.n	8009754 <__b2d+0x60>
 800974e:	9d01      	ldr	r5, [sp, #4]
 8009750:	3d08      	subs	r5, #8
 8009752:	682f      	ldr	r7, [r5, #0]
 8009754:	380b      	subs	r0, #11
 8009756:	4684      	mov	ip, r0
 8009758:	1e03      	subs	r3, r0, #0
 800975a:	d012      	beq.n	8009782 <__b2d+0x8e>
 800975c:	409c      	lsls	r4, r3
 800975e:	2020      	movs	r0, #32
 8009760:	4321      	orrs	r1, r4
 8009762:	003c      	movs	r4, r7
 8009764:	1ac0      	subs	r0, r0, r3
 8009766:	40c4      	lsrs	r4, r0
 8009768:	4321      	orrs	r1, r4
 800976a:	000b      	movs	r3, r1
 800976c:	2100      	movs	r1, #0
 800976e:	42b5      	cmp	r5, r6
 8009770:	d901      	bls.n	8009776 <__b2d+0x82>
 8009772:	3d04      	subs	r5, #4
 8009774:	6829      	ldr	r1, [r5, #0]
 8009776:	4664      	mov	r4, ip
 8009778:	40c1      	lsrs	r1, r0
 800977a:	40a7      	lsls	r7, r4
 800977c:	430f      	orrs	r7, r1
 800977e:	003a      	movs	r2, r7
 8009780:	e7de      	b.n	8009740 <__b2d+0x4c>
 8009782:	4321      	orrs	r1, r4
 8009784:	000b      	movs	r3, r1
 8009786:	e7fa      	b.n	800977e <__b2d+0x8a>
 8009788:	3ff00000 	.word	0x3ff00000

0800978c <__d2b>:
 800978c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800978e:	001d      	movs	r5, r3
 8009790:	2101      	movs	r1, #1
 8009792:	0014      	movs	r4, r2
 8009794:	9f08      	ldr	r7, [sp, #32]
 8009796:	f7ff fcb6 	bl	8009106 <_Balloc>
 800979a:	032b      	lsls	r3, r5, #12
 800979c:	006d      	lsls	r5, r5, #1
 800979e:	0006      	movs	r6, r0
 80097a0:	0b1b      	lsrs	r3, r3, #12
 80097a2:	0d6d      	lsrs	r5, r5, #21
 80097a4:	d124      	bne.n	80097f0 <__d2b+0x64>
 80097a6:	9301      	str	r3, [sp, #4]
 80097a8:	2c00      	cmp	r4, #0
 80097aa:	d027      	beq.n	80097fc <__d2b+0x70>
 80097ac:	4668      	mov	r0, sp
 80097ae:	9400      	str	r4, [sp, #0]
 80097b0:	f7ff fd90 	bl	80092d4 <__lo0bits>
 80097b4:	9c00      	ldr	r4, [sp, #0]
 80097b6:	2800      	cmp	r0, #0
 80097b8:	d01e      	beq.n	80097f8 <__d2b+0x6c>
 80097ba:	9b01      	ldr	r3, [sp, #4]
 80097bc:	2120      	movs	r1, #32
 80097be:	001a      	movs	r2, r3
 80097c0:	1a09      	subs	r1, r1, r0
 80097c2:	408a      	lsls	r2, r1
 80097c4:	40c3      	lsrs	r3, r0
 80097c6:	4322      	orrs	r2, r4
 80097c8:	6172      	str	r2, [r6, #20]
 80097ca:	9301      	str	r3, [sp, #4]
 80097cc:	9c01      	ldr	r4, [sp, #4]
 80097ce:	61b4      	str	r4, [r6, #24]
 80097d0:	1e63      	subs	r3, r4, #1
 80097d2:	419c      	sbcs	r4, r3
 80097d4:	3401      	adds	r4, #1
 80097d6:	6134      	str	r4, [r6, #16]
 80097d8:	2d00      	cmp	r5, #0
 80097da:	d018      	beq.n	800980e <__d2b+0x82>
 80097dc:	4b12      	ldr	r3, [pc, #72]	; (8009828 <__d2b+0x9c>)
 80097de:	18ed      	adds	r5, r5, r3
 80097e0:	2335      	movs	r3, #53	; 0x35
 80097e2:	182d      	adds	r5, r5, r0
 80097e4:	603d      	str	r5, [r7, #0]
 80097e6:	1a18      	subs	r0, r3, r0
 80097e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097ea:	6018      	str	r0, [r3, #0]
 80097ec:	0030      	movs	r0, r6
 80097ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80097f0:	2280      	movs	r2, #128	; 0x80
 80097f2:	0352      	lsls	r2, r2, #13
 80097f4:	4313      	orrs	r3, r2
 80097f6:	e7d6      	b.n	80097a6 <__d2b+0x1a>
 80097f8:	6174      	str	r4, [r6, #20]
 80097fa:	e7e7      	b.n	80097cc <__d2b+0x40>
 80097fc:	a801      	add	r0, sp, #4
 80097fe:	f7ff fd69 	bl	80092d4 <__lo0bits>
 8009802:	2401      	movs	r4, #1
 8009804:	9b01      	ldr	r3, [sp, #4]
 8009806:	6134      	str	r4, [r6, #16]
 8009808:	6173      	str	r3, [r6, #20]
 800980a:	3020      	adds	r0, #32
 800980c:	e7e4      	b.n	80097d8 <__d2b+0x4c>
 800980e:	4b07      	ldr	r3, [pc, #28]	; (800982c <__d2b+0xa0>)
 8009810:	18c0      	adds	r0, r0, r3
 8009812:	4b07      	ldr	r3, [pc, #28]	; (8009830 <__d2b+0xa4>)
 8009814:	6038      	str	r0, [r7, #0]
 8009816:	18e3      	adds	r3, r4, r3
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	18f3      	adds	r3, r6, r3
 800981c:	6958      	ldr	r0, [r3, #20]
 800981e:	f7ff fd3f 	bl	80092a0 <__hi0bits>
 8009822:	0164      	lsls	r4, r4, #5
 8009824:	1a20      	subs	r0, r4, r0
 8009826:	e7df      	b.n	80097e8 <__d2b+0x5c>
 8009828:	fffffbcd 	.word	0xfffffbcd
 800982c:	fffffbce 	.word	0xfffffbce
 8009830:	3fffffff 	.word	0x3fffffff

08009834 <__ratio>:
 8009834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009836:	b085      	sub	sp, #20
 8009838:	000f      	movs	r7, r1
 800983a:	a902      	add	r1, sp, #8
 800983c:	0006      	movs	r6, r0
 800983e:	f7ff ff59 	bl	80096f4 <__b2d>
 8009842:	0004      	movs	r4, r0
 8009844:	000d      	movs	r5, r1
 8009846:	0038      	movs	r0, r7
 8009848:	a903      	add	r1, sp, #12
 800984a:	9400      	str	r4, [sp, #0]
 800984c:	9501      	str	r5, [sp, #4]
 800984e:	f7ff ff51 	bl	80096f4 <__b2d>
 8009852:	6936      	ldr	r6, [r6, #16]
 8009854:	693f      	ldr	r7, [r7, #16]
 8009856:	0002      	movs	r2, r0
 8009858:	1bf7      	subs	r7, r6, r7
 800985a:	017e      	lsls	r6, r7, #5
 800985c:	46b4      	mov	ip, r6
 800985e:	9f03      	ldr	r7, [sp, #12]
 8009860:	9e02      	ldr	r6, [sp, #8]
 8009862:	000b      	movs	r3, r1
 8009864:	1bf6      	subs	r6, r6, r7
 8009866:	4466      	add	r6, ip
 8009868:	0537      	lsls	r7, r6, #20
 800986a:	2e00      	cmp	r6, #0
 800986c:	dd07      	ble.n	800987e <__ratio+0x4a>
 800986e:	1979      	adds	r1, r7, r5
 8009870:	9101      	str	r1, [sp, #4]
 8009872:	9800      	ldr	r0, [sp, #0]
 8009874:	9901      	ldr	r1, [sp, #4]
 8009876:	f7f7 faa1 	bl	8000dbc <__aeabi_ddiv>
 800987a:	b005      	add	sp, #20
 800987c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800987e:	1bcb      	subs	r3, r1, r7
 8009880:	e7f7      	b.n	8009872 <__ratio+0x3e>

08009882 <__copybits>:
 8009882:	0013      	movs	r3, r2
 8009884:	3901      	subs	r1, #1
 8009886:	b510      	push	{r4, lr}
 8009888:	1149      	asrs	r1, r1, #5
 800988a:	6912      	ldr	r2, [r2, #16]
 800988c:	3101      	adds	r1, #1
 800988e:	0089      	lsls	r1, r1, #2
 8009890:	3314      	adds	r3, #20
 8009892:	0092      	lsls	r2, r2, #2
 8009894:	1841      	adds	r1, r0, r1
 8009896:	189a      	adds	r2, r3, r2
 8009898:	429a      	cmp	r2, r3
 800989a:	d803      	bhi.n	80098a4 <__copybits+0x22>
 800989c:	2300      	movs	r3, #0
 800989e:	4281      	cmp	r1, r0
 80098a0:	d803      	bhi.n	80098aa <__copybits+0x28>
 80098a2:	bd10      	pop	{r4, pc}
 80098a4:	cb10      	ldmia	r3!, {r4}
 80098a6:	c010      	stmia	r0!, {r4}
 80098a8:	e7f6      	b.n	8009898 <__copybits+0x16>
 80098aa:	c008      	stmia	r0!, {r3}
 80098ac:	e7f7      	b.n	800989e <__copybits+0x1c>

080098ae <__any_on>:
 80098ae:	0002      	movs	r2, r0
 80098b0:	6900      	ldr	r0, [r0, #16]
 80098b2:	b510      	push	{r4, lr}
 80098b4:	3214      	adds	r2, #20
 80098b6:	114b      	asrs	r3, r1, #5
 80098b8:	4298      	cmp	r0, r3
 80098ba:	db12      	blt.n	80098e2 <__any_on+0x34>
 80098bc:	dd0b      	ble.n	80098d6 <__any_on+0x28>
 80098be:	201f      	movs	r0, #31
 80098c0:	4001      	ands	r1, r0
 80098c2:	d008      	beq.n	80098d6 <__any_on+0x28>
 80098c4:	0098      	lsls	r0, r3, #2
 80098c6:	5884      	ldr	r4, [r0, r2]
 80098c8:	0020      	movs	r0, r4
 80098ca:	40c8      	lsrs	r0, r1
 80098cc:	4088      	lsls	r0, r1
 80098ce:	0001      	movs	r1, r0
 80098d0:	2001      	movs	r0, #1
 80098d2:	428c      	cmp	r4, r1
 80098d4:	d104      	bne.n	80098e0 <__any_on+0x32>
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	18d3      	adds	r3, r2, r3
 80098da:	4293      	cmp	r3, r2
 80098dc:	d803      	bhi.n	80098e6 <__any_on+0x38>
 80098de:	2000      	movs	r0, #0
 80098e0:	bd10      	pop	{r4, pc}
 80098e2:	0003      	movs	r3, r0
 80098e4:	e7f7      	b.n	80098d6 <__any_on+0x28>
 80098e6:	3b04      	subs	r3, #4
 80098e8:	6819      	ldr	r1, [r3, #0]
 80098ea:	2900      	cmp	r1, #0
 80098ec:	d0f5      	beq.n	80098da <__any_on+0x2c>
 80098ee:	2001      	movs	r0, #1
 80098f0:	e7f6      	b.n	80098e0 <__any_on+0x32>

080098f2 <_calloc_r>:
 80098f2:	434a      	muls	r2, r1
 80098f4:	b570      	push	{r4, r5, r6, lr}
 80098f6:	0011      	movs	r1, r2
 80098f8:	0014      	movs	r4, r2
 80098fa:	f000 f853 	bl	80099a4 <_malloc_r>
 80098fe:	1e05      	subs	r5, r0, #0
 8009900:	d003      	beq.n	800990a <_calloc_r+0x18>
 8009902:	0022      	movs	r2, r4
 8009904:	2100      	movs	r1, #0
 8009906:	f7fc fbd6 	bl	80060b6 <memset>
 800990a:	0028      	movs	r0, r5
 800990c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009910 <_free_r>:
 8009910:	b570      	push	{r4, r5, r6, lr}
 8009912:	0005      	movs	r5, r0
 8009914:	2900      	cmp	r1, #0
 8009916:	d010      	beq.n	800993a <_free_r+0x2a>
 8009918:	1f0c      	subs	r4, r1, #4
 800991a:	6823      	ldr	r3, [r4, #0]
 800991c:	2b00      	cmp	r3, #0
 800991e:	da00      	bge.n	8009922 <_free_r+0x12>
 8009920:	18e4      	adds	r4, r4, r3
 8009922:	0028      	movs	r0, r5
 8009924:	f000 fdf1 	bl	800a50a <__malloc_lock>
 8009928:	4a1d      	ldr	r2, [pc, #116]	; (80099a0 <_free_r+0x90>)
 800992a:	6813      	ldr	r3, [r2, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d105      	bne.n	800993c <_free_r+0x2c>
 8009930:	6063      	str	r3, [r4, #4]
 8009932:	6014      	str	r4, [r2, #0]
 8009934:	0028      	movs	r0, r5
 8009936:	f000 fde9 	bl	800a50c <__malloc_unlock>
 800993a:	bd70      	pop	{r4, r5, r6, pc}
 800993c:	42a3      	cmp	r3, r4
 800993e:	d909      	bls.n	8009954 <_free_r+0x44>
 8009940:	6821      	ldr	r1, [r4, #0]
 8009942:	1860      	adds	r0, r4, r1
 8009944:	4283      	cmp	r3, r0
 8009946:	d1f3      	bne.n	8009930 <_free_r+0x20>
 8009948:	6818      	ldr	r0, [r3, #0]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	1841      	adds	r1, r0, r1
 800994e:	6021      	str	r1, [r4, #0]
 8009950:	e7ee      	b.n	8009930 <_free_r+0x20>
 8009952:	0013      	movs	r3, r2
 8009954:	685a      	ldr	r2, [r3, #4]
 8009956:	2a00      	cmp	r2, #0
 8009958:	d001      	beq.n	800995e <_free_r+0x4e>
 800995a:	42a2      	cmp	r2, r4
 800995c:	d9f9      	bls.n	8009952 <_free_r+0x42>
 800995e:	6819      	ldr	r1, [r3, #0]
 8009960:	1858      	adds	r0, r3, r1
 8009962:	42a0      	cmp	r0, r4
 8009964:	d10b      	bne.n	800997e <_free_r+0x6e>
 8009966:	6820      	ldr	r0, [r4, #0]
 8009968:	1809      	adds	r1, r1, r0
 800996a:	1858      	adds	r0, r3, r1
 800996c:	6019      	str	r1, [r3, #0]
 800996e:	4282      	cmp	r2, r0
 8009970:	d1e0      	bne.n	8009934 <_free_r+0x24>
 8009972:	6810      	ldr	r0, [r2, #0]
 8009974:	6852      	ldr	r2, [r2, #4]
 8009976:	1841      	adds	r1, r0, r1
 8009978:	6019      	str	r1, [r3, #0]
 800997a:	605a      	str	r2, [r3, #4]
 800997c:	e7da      	b.n	8009934 <_free_r+0x24>
 800997e:	42a0      	cmp	r0, r4
 8009980:	d902      	bls.n	8009988 <_free_r+0x78>
 8009982:	230c      	movs	r3, #12
 8009984:	602b      	str	r3, [r5, #0]
 8009986:	e7d5      	b.n	8009934 <_free_r+0x24>
 8009988:	6821      	ldr	r1, [r4, #0]
 800998a:	1860      	adds	r0, r4, r1
 800998c:	4282      	cmp	r2, r0
 800998e:	d103      	bne.n	8009998 <_free_r+0x88>
 8009990:	6810      	ldr	r0, [r2, #0]
 8009992:	6852      	ldr	r2, [r2, #4]
 8009994:	1841      	adds	r1, r0, r1
 8009996:	6021      	str	r1, [r4, #0]
 8009998:	6062      	str	r2, [r4, #4]
 800999a:	605c      	str	r4, [r3, #4]
 800999c:	e7ca      	b.n	8009934 <_free_r+0x24>
 800999e:	46c0      	nop			; (mov r8, r8)
 80099a0:	20000200 	.word	0x20000200

080099a4 <_malloc_r>:
 80099a4:	2303      	movs	r3, #3
 80099a6:	b570      	push	{r4, r5, r6, lr}
 80099a8:	1ccd      	adds	r5, r1, #3
 80099aa:	439d      	bics	r5, r3
 80099ac:	3508      	adds	r5, #8
 80099ae:	0006      	movs	r6, r0
 80099b0:	2d0c      	cmp	r5, #12
 80099b2:	d21e      	bcs.n	80099f2 <_malloc_r+0x4e>
 80099b4:	250c      	movs	r5, #12
 80099b6:	42a9      	cmp	r1, r5
 80099b8:	d81d      	bhi.n	80099f6 <_malloc_r+0x52>
 80099ba:	0030      	movs	r0, r6
 80099bc:	f000 fda5 	bl	800a50a <__malloc_lock>
 80099c0:	4a25      	ldr	r2, [pc, #148]	; (8009a58 <_malloc_r+0xb4>)
 80099c2:	6814      	ldr	r4, [r2, #0]
 80099c4:	0021      	movs	r1, r4
 80099c6:	2900      	cmp	r1, #0
 80099c8:	d119      	bne.n	80099fe <_malloc_r+0x5a>
 80099ca:	4c24      	ldr	r4, [pc, #144]	; (8009a5c <_malloc_r+0xb8>)
 80099cc:	6823      	ldr	r3, [r4, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d103      	bne.n	80099da <_malloc_r+0x36>
 80099d2:	0030      	movs	r0, r6
 80099d4:	f000 fae2 	bl	8009f9c <_sbrk_r>
 80099d8:	6020      	str	r0, [r4, #0]
 80099da:	0029      	movs	r1, r5
 80099dc:	0030      	movs	r0, r6
 80099de:	f000 fadd 	bl	8009f9c <_sbrk_r>
 80099e2:	1c43      	adds	r3, r0, #1
 80099e4:	d12b      	bne.n	8009a3e <_malloc_r+0x9a>
 80099e6:	230c      	movs	r3, #12
 80099e8:	0030      	movs	r0, r6
 80099ea:	6033      	str	r3, [r6, #0]
 80099ec:	f000 fd8e 	bl	800a50c <__malloc_unlock>
 80099f0:	e003      	b.n	80099fa <_malloc_r+0x56>
 80099f2:	2d00      	cmp	r5, #0
 80099f4:	dadf      	bge.n	80099b6 <_malloc_r+0x12>
 80099f6:	230c      	movs	r3, #12
 80099f8:	6033      	str	r3, [r6, #0]
 80099fa:	2000      	movs	r0, #0
 80099fc:	bd70      	pop	{r4, r5, r6, pc}
 80099fe:	680b      	ldr	r3, [r1, #0]
 8009a00:	1b5b      	subs	r3, r3, r5
 8009a02:	d419      	bmi.n	8009a38 <_malloc_r+0x94>
 8009a04:	2b0b      	cmp	r3, #11
 8009a06:	d903      	bls.n	8009a10 <_malloc_r+0x6c>
 8009a08:	600b      	str	r3, [r1, #0]
 8009a0a:	18cc      	adds	r4, r1, r3
 8009a0c:	6025      	str	r5, [r4, #0]
 8009a0e:	e003      	b.n	8009a18 <_malloc_r+0x74>
 8009a10:	684b      	ldr	r3, [r1, #4]
 8009a12:	428c      	cmp	r4, r1
 8009a14:	d10d      	bne.n	8009a32 <_malloc_r+0x8e>
 8009a16:	6013      	str	r3, [r2, #0]
 8009a18:	0030      	movs	r0, r6
 8009a1a:	f000 fd77 	bl	800a50c <__malloc_unlock>
 8009a1e:	0020      	movs	r0, r4
 8009a20:	2207      	movs	r2, #7
 8009a22:	300b      	adds	r0, #11
 8009a24:	1d23      	adds	r3, r4, #4
 8009a26:	4390      	bics	r0, r2
 8009a28:	1ac3      	subs	r3, r0, r3
 8009a2a:	d0e7      	beq.n	80099fc <_malloc_r+0x58>
 8009a2c:	425a      	negs	r2, r3
 8009a2e:	50e2      	str	r2, [r4, r3]
 8009a30:	e7e4      	b.n	80099fc <_malloc_r+0x58>
 8009a32:	6063      	str	r3, [r4, #4]
 8009a34:	000c      	movs	r4, r1
 8009a36:	e7ef      	b.n	8009a18 <_malloc_r+0x74>
 8009a38:	000c      	movs	r4, r1
 8009a3a:	6849      	ldr	r1, [r1, #4]
 8009a3c:	e7c3      	b.n	80099c6 <_malloc_r+0x22>
 8009a3e:	2303      	movs	r3, #3
 8009a40:	1cc4      	adds	r4, r0, #3
 8009a42:	439c      	bics	r4, r3
 8009a44:	42a0      	cmp	r0, r4
 8009a46:	d0e1      	beq.n	8009a0c <_malloc_r+0x68>
 8009a48:	1a21      	subs	r1, r4, r0
 8009a4a:	0030      	movs	r0, r6
 8009a4c:	f000 faa6 	bl	8009f9c <_sbrk_r>
 8009a50:	1c43      	adds	r3, r0, #1
 8009a52:	d1db      	bne.n	8009a0c <_malloc_r+0x68>
 8009a54:	e7c7      	b.n	80099e6 <_malloc_r+0x42>
 8009a56:	46c0      	nop			; (mov r8, r8)
 8009a58:	20000200 	.word	0x20000200
 8009a5c:	20000204 	.word	0x20000204

08009a60 <__ssputs_r>:
 8009a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a62:	688e      	ldr	r6, [r1, #8]
 8009a64:	b085      	sub	sp, #20
 8009a66:	0007      	movs	r7, r0
 8009a68:	000c      	movs	r4, r1
 8009a6a:	9203      	str	r2, [sp, #12]
 8009a6c:	9301      	str	r3, [sp, #4]
 8009a6e:	429e      	cmp	r6, r3
 8009a70:	d83c      	bhi.n	8009aec <__ssputs_r+0x8c>
 8009a72:	2390      	movs	r3, #144	; 0x90
 8009a74:	898a      	ldrh	r2, [r1, #12]
 8009a76:	00db      	lsls	r3, r3, #3
 8009a78:	421a      	tst	r2, r3
 8009a7a:	d034      	beq.n	8009ae6 <__ssputs_r+0x86>
 8009a7c:	2503      	movs	r5, #3
 8009a7e:	6909      	ldr	r1, [r1, #16]
 8009a80:	6823      	ldr	r3, [r4, #0]
 8009a82:	1a5b      	subs	r3, r3, r1
 8009a84:	9302      	str	r3, [sp, #8]
 8009a86:	6963      	ldr	r3, [r4, #20]
 8009a88:	9802      	ldr	r0, [sp, #8]
 8009a8a:	435d      	muls	r5, r3
 8009a8c:	0feb      	lsrs	r3, r5, #31
 8009a8e:	195d      	adds	r5, r3, r5
 8009a90:	9b01      	ldr	r3, [sp, #4]
 8009a92:	106d      	asrs	r5, r5, #1
 8009a94:	3301      	adds	r3, #1
 8009a96:	181b      	adds	r3, r3, r0
 8009a98:	42ab      	cmp	r3, r5
 8009a9a:	d900      	bls.n	8009a9e <__ssputs_r+0x3e>
 8009a9c:	001d      	movs	r5, r3
 8009a9e:	0553      	lsls	r3, r2, #21
 8009aa0:	d532      	bpl.n	8009b08 <__ssputs_r+0xa8>
 8009aa2:	0029      	movs	r1, r5
 8009aa4:	0038      	movs	r0, r7
 8009aa6:	f7ff ff7d 	bl	80099a4 <_malloc_r>
 8009aaa:	1e06      	subs	r6, r0, #0
 8009aac:	d109      	bne.n	8009ac2 <__ssputs_r+0x62>
 8009aae:	230c      	movs	r3, #12
 8009ab0:	603b      	str	r3, [r7, #0]
 8009ab2:	2340      	movs	r3, #64	; 0x40
 8009ab4:	2001      	movs	r0, #1
 8009ab6:	89a2      	ldrh	r2, [r4, #12]
 8009ab8:	4240      	negs	r0, r0
 8009aba:	4313      	orrs	r3, r2
 8009abc:	81a3      	strh	r3, [r4, #12]
 8009abe:	b005      	add	sp, #20
 8009ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ac2:	9a02      	ldr	r2, [sp, #8]
 8009ac4:	6921      	ldr	r1, [r4, #16]
 8009ac6:	f7fc faed 	bl	80060a4 <memcpy>
 8009aca:	89a3      	ldrh	r3, [r4, #12]
 8009acc:	4a14      	ldr	r2, [pc, #80]	; (8009b20 <__ssputs_r+0xc0>)
 8009ace:	401a      	ands	r2, r3
 8009ad0:	2380      	movs	r3, #128	; 0x80
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	81a3      	strh	r3, [r4, #12]
 8009ad6:	9b02      	ldr	r3, [sp, #8]
 8009ad8:	6126      	str	r6, [r4, #16]
 8009ada:	18f6      	adds	r6, r6, r3
 8009adc:	6026      	str	r6, [r4, #0]
 8009ade:	6165      	str	r5, [r4, #20]
 8009ae0:	9e01      	ldr	r6, [sp, #4]
 8009ae2:	1aed      	subs	r5, r5, r3
 8009ae4:	60a5      	str	r5, [r4, #8]
 8009ae6:	9b01      	ldr	r3, [sp, #4]
 8009ae8:	429e      	cmp	r6, r3
 8009aea:	d900      	bls.n	8009aee <__ssputs_r+0x8e>
 8009aec:	9e01      	ldr	r6, [sp, #4]
 8009aee:	0032      	movs	r2, r6
 8009af0:	9903      	ldr	r1, [sp, #12]
 8009af2:	6820      	ldr	r0, [r4, #0]
 8009af4:	f000 fcf6 	bl	800a4e4 <memmove>
 8009af8:	68a3      	ldr	r3, [r4, #8]
 8009afa:	2000      	movs	r0, #0
 8009afc:	1b9b      	subs	r3, r3, r6
 8009afe:	60a3      	str	r3, [r4, #8]
 8009b00:	6823      	ldr	r3, [r4, #0]
 8009b02:	199e      	adds	r6, r3, r6
 8009b04:	6026      	str	r6, [r4, #0]
 8009b06:	e7da      	b.n	8009abe <__ssputs_r+0x5e>
 8009b08:	002a      	movs	r2, r5
 8009b0a:	0038      	movs	r0, r7
 8009b0c:	f000 fcff 	bl	800a50e <_realloc_r>
 8009b10:	1e06      	subs	r6, r0, #0
 8009b12:	d1e0      	bne.n	8009ad6 <__ssputs_r+0x76>
 8009b14:	6921      	ldr	r1, [r4, #16]
 8009b16:	0038      	movs	r0, r7
 8009b18:	f7ff fefa 	bl	8009910 <_free_r>
 8009b1c:	e7c7      	b.n	8009aae <__ssputs_r+0x4e>
 8009b1e:	46c0      	nop			; (mov r8, r8)
 8009b20:	fffffb7f 	.word	0xfffffb7f

08009b24 <_svfiprintf_r>:
 8009b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b26:	b0a1      	sub	sp, #132	; 0x84
 8009b28:	9003      	str	r0, [sp, #12]
 8009b2a:	001d      	movs	r5, r3
 8009b2c:	898b      	ldrh	r3, [r1, #12]
 8009b2e:	000f      	movs	r7, r1
 8009b30:	0016      	movs	r6, r2
 8009b32:	061b      	lsls	r3, r3, #24
 8009b34:	d511      	bpl.n	8009b5a <_svfiprintf_r+0x36>
 8009b36:	690b      	ldr	r3, [r1, #16]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d10e      	bne.n	8009b5a <_svfiprintf_r+0x36>
 8009b3c:	2140      	movs	r1, #64	; 0x40
 8009b3e:	f7ff ff31 	bl	80099a4 <_malloc_r>
 8009b42:	6038      	str	r0, [r7, #0]
 8009b44:	6138      	str	r0, [r7, #16]
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d105      	bne.n	8009b56 <_svfiprintf_r+0x32>
 8009b4a:	230c      	movs	r3, #12
 8009b4c:	9a03      	ldr	r2, [sp, #12]
 8009b4e:	3801      	subs	r0, #1
 8009b50:	6013      	str	r3, [r2, #0]
 8009b52:	b021      	add	sp, #132	; 0x84
 8009b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b56:	2340      	movs	r3, #64	; 0x40
 8009b58:	617b      	str	r3, [r7, #20]
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	ac08      	add	r4, sp, #32
 8009b5e:	6163      	str	r3, [r4, #20]
 8009b60:	3320      	adds	r3, #32
 8009b62:	7663      	strb	r3, [r4, #25]
 8009b64:	3310      	adds	r3, #16
 8009b66:	76a3      	strb	r3, [r4, #26]
 8009b68:	9507      	str	r5, [sp, #28]
 8009b6a:	0035      	movs	r5, r6
 8009b6c:	782b      	ldrb	r3, [r5, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d001      	beq.n	8009b76 <_svfiprintf_r+0x52>
 8009b72:	2b25      	cmp	r3, #37	; 0x25
 8009b74:	d146      	bne.n	8009c04 <_svfiprintf_r+0xe0>
 8009b76:	1bab      	subs	r3, r5, r6
 8009b78:	9305      	str	r3, [sp, #20]
 8009b7a:	d00c      	beq.n	8009b96 <_svfiprintf_r+0x72>
 8009b7c:	0032      	movs	r2, r6
 8009b7e:	0039      	movs	r1, r7
 8009b80:	9803      	ldr	r0, [sp, #12]
 8009b82:	f7ff ff6d 	bl	8009a60 <__ssputs_r>
 8009b86:	1c43      	adds	r3, r0, #1
 8009b88:	d100      	bne.n	8009b8c <_svfiprintf_r+0x68>
 8009b8a:	e0ae      	b.n	8009cea <_svfiprintf_r+0x1c6>
 8009b8c:	6962      	ldr	r2, [r4, #20]
 8009b8e:	9b05      	ldr	r3, [sp, #20]
 8009b90:	4694      	mov	ip, r2
 8009b92:	4463      	add	r3, ip
 8009b94:	6163      	str	r3, [r4, #20]
 8009b96:	782b      	ldrb	r3, [r5, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d100      	bne.n	8009b9e <_svfiprintf_r+0x7a>
 8009b9c:	e0a5      	b.n	8009cea <_svfiprintf_r+0x1c6>
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	4252      	negs	r2, r2
 8009ba4:	6062      	str	r2, [r4, #4]
 8009ba6:	a904      	add	r1, sp, #16
 8009ba8:	3254      	adds	r2, #84	; 0x54
 8009baa:	1852      	adds	r2, r2, r1
 8009bac:	1c6e      	adds	r6, r5, #1
 8009bae:	6023      	str	r3, [r4, #0]
 8009bb0:	60e3      	str	r3, [r4, #12]
 8009bb2:	60a3      	str	r3, [r4, #8]
 8009bb4:	7013      	strb	r3, [r2, #0]
 8009bb6:	65a3      	str	r3, [r4, #88]	; 0x58
 8009bb8:	7831      	ldrb	r1, [r6, #0]
 8009bba:	2205      	movs	r2, #5
 8009bbc:	4853      	ldr	r0, [pc, #332]	; (8009d0c <_svfiprintf_r+0x1e8>)
 8009bbe:	f7ff fa97 	bl	80090f0 <memchr>
 8009bc2:	1c75      	adds	r5, r6, #1
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	d11f      	bne.n	8009c08 <_svfiprintf_r+0xe4>
 8009bc8:	6822      	ldr	r2, [r4, #0]
 8009bca:	06d3      	lsls	r3, r2, #27
 8009bcc:	d504      	bpl.n	8009bd8 <_svfiprintf_r+0xb4>
 8009bce:	2353      	movs	r3, #83	; 0x53
 8009bd0:	a904      	add	r1, sp, #16
 8009bd2:	185b      	adds	r3, r3, r1
 8009bd4:	2120      	movs	r1, #32
 8009bd6:	7019      	strb	r1, [r3, #0]
 8009bd8:	0713      	lsls	r3, r2, #28
 8009bda:	d504      	bpl.n	8009be6 <_svfiprintf_r+0xc2>
 8009bdc:	2353      	movs	r3, #83	; 0x53
 8009bde:	a904      	add	r1, sp, #16
 8009be0:	185b      	adds	r3, r3, r1
 8009be2:	212b      	movs	r1, #43	; 0x2b
 8009be4:	7019      	strb	r1, [r3, #0]
 8009be6:	7833      	ldrb	r3, [r6, #0]
 8009be8:	2b2a      	cmp	r3, #42	; 0x2a
 8009bea:	d016      	beq.n	8009c1a <_svfiprintf_r+0xf6>
 8009bec:	0035      	movs	r5, r6
 8009bee:	2100      	movs	r1, #0
 8009bf0:	200a      	movs	r0, #10
 8009bf2:	68e3      	ldr	r3, [r4, #12]
 8009bf4:	782a      	ldrb	r2, [r5, #0]
 8009bf6:	1c6e      	adds	r6, r5, #1
 8009bf8:	3a30      	subs	r2, #48	; 0x30
 8009bfa:	2a09      	cmp	r2, #9
 8009bfc:	d94e      	bls.n	8009c9c <_svfiprintf_r+0x178>
 8009bfe:	2900      	cmp	r1, #0
 8009c00:	d018      	beq.n	8009c34 <_svfiprintf_r+0x110>
 8009c02:	e010      	b.n	8009c26 <_svfiprintf_r+0x102>
 8009c04:	3501      	adds	r5, #1
 8009c06:	e7b1      	b.n	8009b6c <_svfiprintf_r+0x48>
 8009c08:	4b40      	ldr	r3, [pc, #256]	; (8009d0c <_svfiprintf_r+0x1e8>)
 8009c0a:	6822      	ldr	r2, [r4, #0]
 8009c0c:	1ac0      	subs	r0, r0, r3
 8009c0e:	2301      	movs	r3, #1
 8009c10:	4083      	lsls	r3, r0
 8009c12:	4313      	orrs	r3, r2
 8009c14:	6023      	str	r3, [r4, #0]
 8009c16:	002e      	movs	r6, r5
 8009c18:	e7ce      	b.n	8009bb8 <_svfiprintf_r+0x94>
 8009c1a:	9b07      	ldr	r3, [sp, #28]
 8009c1c:	1d19      	adds	r1, r3, #4
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	9107      	str	r1, [sp, #28]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	db01      	blt.n	8009c2a <_svfiprintf_r+0x106>
 8009c26:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c28:	e004      	b.n	8009c34 <_svfiprintf_r+0x110>
 8009c2a:	425b      	negs	r3, r3
 8009c2c:	60e3      	str	r3, [r4, #12]
 8009c2e:	2302      	movs	r3, #2
 8009c30:	4313      	orrs	r3, r2
 8009c32:	6023      	str	r3, [r4, #0]
 8009c34:	782b      	ldrb	r3, [r5, #0]
 8009c36:	2b2e      	cmp	r3, #46	; 0x2e
 8009c38:	d10a      	bne.n	8009c50 <_svfiprintf_r+0x12c>
 8009c3a:	786b      	ldrb	r3, [r5, #1]
 8009c3c:	2b2a      	cmp	r3, #42	; 0x2a
 8009c3e:	d135      	bne.n	8009cac <_svfiprintf_r+0x188>
 8009c40:	9b07      	ldr	r3, [sp, #28]
 8009c42:	3502      	adds	r5, #2
 8009c44:	1d1a      	adds	r2, r3, #4
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	9207      	str	r2, [sp, #28]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	db2b      	blt.n	8009ca6 <_svfiprintf_r+0x182>
 8009c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c50:	4e2f      	ldr	r6, [pc, #188]	; (8009d10 <_svfiprintf_r+0x1ec>)
 8009c52:	7829      	ldrb	r1, [r5, #0]
 8009c54:	2203      	movs	r2, #3
 8009c56:	0030      	movs	r0, r6
 8009c58:	f7ff fa4a 	bl	80090f0 <memchr>
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d006      	beq.n	8009c6e <_svfiprintf_r+0x14a>
 8009c60:	2340      	movs	r3, #64	; 0x40
 8009c62:	1b80      	subs	r0, r0, r6
 8009c64:	4083      	lsls	r3, r0
 8009c66:	6822      	ldr	r2, [r4, #0]
 8009c68:	3501      	adds	r5, #1
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	6023      	str	r3, [r4, #0]
 8009c6e:	7829      	ldrb	r1, [r5, #0]
 8009c70:	2206      	movs	r2, #6
 8009c72:	4828      	ldr	r0, [pc, #160]	; (8009d14 <_svfiprintf_r+0x1f0>)
 8009c74:	1c6e      	adds	r6, r5, #1
 8009c76:	7621      	strb	r1, [r4, #24]
 8009c78:	f7ff fa3a 	bl	80090f0 <memchr>
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	d03c      	beq.n	8009cfa <_svfiprintf_r+0x1d6>
 8009c80:	4b25      	ldr	r3, [pc, #148]	; (8009d18 <_svfiprintf_r+0x1f4>)
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d125      	bne.n	8009cd2 <_svfiprintf_r+0x1ae>
 8009c86:	2207      	movs	r2, #7
 8009c88:	9b07      	ldr	r3, [sp, #28]
 8009c8a:	3307      	adds	r3, #7
 8009c8c:	4393      	bics	r3, r2
 8009c8e:	3308      	adds	r3, #8
 8009c90:	9307      	str	r3, [sp, #28]
 8009c92:	6963      	ldr	r3, [r4, #20]
 8009c94:	9a04      	ldr	r2, [sp, #16]
 8009c96:	189b      	adds	r3, r3, r2
 8009c98:	6163      	str	r3, [r4, #20]
 8009c9a:	e766      	b.n	8009b6a <_svfiprintf_r+0x46>
 8009c9c:	4343      	muls	r3, r0
 8009c9e:	2101      	movs	r1, #1
 8009ca0:	189b      	adds	r3, r3, r2
 8009ca2:	0035      	movs	r5, r6
 8009ca4:	e7a6      	b.n	8009bf4 <_svfiprintf_r+0xd0>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	425b      	negs	r3, r3
 8009caa:	e7d0      	b.n	8009c4e <_svfiprintf_r+0x12a>
 8009cac:	2300      	movs	r3, #0
 8009cae:	200a      	movs	r0, #10
 8009cb0:	001a      	movs	r2, r3
 8009cb2:	3501      	adds	r5, #1
 8009cb4:	6063      	str	r3, [r4, #4]
 8009cb6:	7829      	ldrb	r1, [r5, #0]
 8009cb8:	1c6e      	adds	r6, r5, #1
 8009cba:	3930      	subs	r1, #48	; 0x30
 8009cbc:	2909      	cmp	r1, #9
 8009cbe:	d903      	bls.n	8009cc8 <_svfiprintf_r+0x1a4>
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d0c5      	beq.n	8009c50 <_svfiprintf_r+0x12c>
 8009cc4:	9209      	str	r2, [sp, #36]	; 0x24
 8009cc6:	e7c3      	b.n	8009c50 <_svfiprintf_r+0x12c>
 8009cc8:	4342      	muls	r2, r0
 8009cca:	2301      	movs	r3, #1
 8009ccc:	1852      	adds	r2, r2, r1
 8009cce:	0035      	movs	r5, r6
 8009cd0:	e7f1      	b.n	8009cb6 <_svfiprintf_r+0x192>
 8009cd2:	ab07      	add	r3, sp, #28
 8009cd4:	9300      	str	r3, [sp, #0]
 8009cd6:	003a      	movs	r2, r7
 8009cd8:	4b10      	ldr	r3, [pc, #64]	; (8009d1c <_svfiprintf_r+0x1f8>)
 8009cda:	0021      	movs	r1, r4
 8009cdc:	9803      	ldr	r0, [sp, #12]
 8009cde:	f7fc fa8f 	bl	8006200 <_printf_float>
 8009ce2:	9004      	str	r0, [sp, #16]
 8009ce4:	9b04      	ldr	r3, [sp, #16]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	d1d3      	bne.n	8009c92 <_svfiprintf_r+0x16e>
 8009cea:	89bb      	ldrh	r3, [r7, #12]
 8009cec:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009cee:	065b      	lsls	r3, r3, #25
 8009cf0:	d400      	bmi.n	8009cf4 <_svfiprintf_r+0x1d0>
 8009cf2:	e72e      	b.n	8009b52 <_svfiprintf_r+0x2e>
 8009cf4:	2001      	movs	r0, #1
 8009cf6:	4240      	negs	r0, r0
 8009cf8:	e72b      	b.n	8009b52 <_svfiprintf_r+0x2e>
 8009cfa:	ab07      	add	r3, sp, #28
 8009cfc:	9300      	str	r3, [sp, #0]
 8009cfe:	003a      	movs	r2, r7
 8009d00:	4b06      	ldr	r3, [pc, #24]	; (8009d1c <_svfiprintf_r+0x1f8>)
 8009d02:	0021      	movs	r1, r4
 8009d04:	9803      	ldr	r0, [sp, #12]
 8009d06:	f7fc fd35 	bl	8006774 <_printf_i>
 8009d0a:	e7ea      	b.n	8009ce2 <_svfiprintf_r+0x1be>
 8009d0c:	0800a994 	.word	0x0800a994
 8009d10:	0800a99a 	.word	0x0800a99a
 8009d14:	0800a99e 	.word	0x0800a99e
 8009d18:	08006201 	.word	0x08006201
 8009d1c:	08009a61 	.word	0x08009a61

08009d20 <__sfputc_r>:
 8009d20:	6893      	ldr	r3, [r2, #8]
 8009d22:	b510      	push	{r4, lr}
 8009d24:	3b01      	subs	r3, #1
 8009d26:	6093      	str	r3, [r2, #8]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	da04      	bge.n	8009d36 <__sfputc_r+0x16>
 8009d2c:	6994      	ldr	r4, [r2, #24]
 8009d2e:	42a3      	cmp	r3, r4
 8009d30:	db07      	blt.n	8009d42 <__sfputc_r+0x22>
 8009d32:	290a      	cmp	r1, #10
 8009d34:	d005      	beq.n	8009d42 <__sfputc_r+0x22>
 8009d36:	6813      	ldr	r3, [r2, #0]
 8009d38:	1c58      	adds	r0, r3, #1
 8009d3a:	6010      	str	r0, [r2, #0]
 8009d3c:	7019      	strb	r1, [r3, #0]
 8009d3e:	0008      	movs	r0, r1
 8009d40:	bd10      	pop	{r4, pc}
 8009d42:	f000 f99b 	bl	800a07c <__swbuf_r>
 8009d46:	0001      	movs	r1, r0
 8009d48:	e7f9      	b.n	8009d3e <__sfputc_r+0x1e>

08009d4a <__sfputs_r>:
 8009d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4c:	0006      	movs	r6, r0
 8009d4e:	000f      	movs	r7, r1
 8009d50:	0014      	movs	r4, r2
 8009d52:	18d5      	adds	r5, r2, r3
 8009d54:	42ac      	cmp	r4, r5
 8009d56:	d101      	bne.n	8009d5c <__sfputs_r+0x12>
 8009d58:	2000      	movs	r0, #0
 8009d5a:	e007      	b.n	8009d6c <__sfputs_r+0x22>
 8009d5c:	7821      	ldrb	r1, [r4, #0]
 8009d5e:	003a      	movs	r2, r7
 8009d60:	0030      	movs	r0, r6
 8009d62:	f7ff ffdd 	bl	8009d20 <__sfputc_r>
 8009d66:	3401      	adds	r4, #1
 8009d68:	1c43      	adds	r3, r0, #1
 8009d6a:	d1f3      	bne.n	8009d54 <__sfputs_r+0xa>
 8009d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d70 <_vfiprintf_r>:
 8009d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d72:	b0a1      	sub	sp, #132	; 0x84
 8009d74:	9003      	str	r0, [sp, #12]
 8009d76:	000f      	movs	r7, r1
 8009d78:	0016      	movs	r6, r2
 8009d7a:	001d      	movs	r5, r3
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	d005      	beq.n	8009d8c <_vfiprintf_r+0x1c>
 8009d80:	6983      	ldr	r3, [r0, #24]
 8009d82:	9305      	str	r3, [sp, #20]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d101      	bne.n	8009d8c <_vfiprintf_r+0x1c>
 8009d88:	f7fe fdc0 	bl	800890c <__sinit>
 8009d8c:	4b7b      	ldr	r3, [pc, #492]	; (8009f7c <_vfiprintf_r+0x20c>)
 8009d8e:	429f      	cmp	r7, r3
 8009d90:	d15c      	bne.n	8009e4c <_vfiprintf_r+0xdc>
 8009d92:	9b03      	ldr	r3, [sp, #12]
 8009d94:	685f      	ldr	r7, [r3, #4]
 8009d96:	89bb      	ldrh	r3, [r7, #12]
 8009d98:	071b      	lsls	r3, r3, #28
 8009d9a:	d563      	bpl.n	8009e64 <_vfiprintf_r+0xf4>
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d060      	beq.n	8009e64 <_vfiprintf_r+0xf4>
 8009da2:	2300      	movs	r3, #0
 8009da4:	ac08      	add	r4, sp, #32
 8009da6:	6163      	str	r3, [r4, #20]
 8009da8:	3320      	adds	r3, #32
 8009daa:	7663      	strb	r3, [r4, #25]
 8009dac:	3310      	adds	r3, #16
 8009dae:	76a3      	strb	r3, [r4, #26]
 8009db0:	9507      	str	r5, [sp, #28]
 8009db2:	0035      	movs	r5, r6
 8009db4:	782b      	ldrb	r3, [r5, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d001      	beq.n	8009dbe <_vfiprintf_r+0x4e>
 8009dba:	2b25      	cmp	r3, #37	; 0x25
 8009dbc:	d15c      	bne.n	8009e78 <_vfiprintf_r+0x108>
 8009dbe:	1bab      	subs	r3, r5, r6
 8009dc0:	9305      	str	r3, [sp, #20]
 8009dc2:	d00c      	beq.n	8009dde <_vfiprintf_r+0x6e>
 8009dc4:	0032      	movs	r2, r6
 8009dc6:	0039      	movs	r1, r7
 8009dc8:	9803      	ldr	r0, [sp, #12]
 8009dca:	f7ff ffbe 	bl	8009d4a <__sfputs_r>
 8009dce:	1c43      	adds	r3, r0, #1
 8009dd0:	d100      	bne.n	8009dd4 <_vfiprintf_r+0x64>
 8009dd2:	e0c4      	b.n	8009f5e <_vfiprintf_r+0x1ee>
 8009dd4:	6962      	ldr	r2, [r4, #20]
 8009dd6:	9b05      	ldr	r3, [sp, #20]
 8009dd8:	4694      	mov	ip, r2
 8009dda:	4463      	add	r3, ip
 8009ddc:	6163      	str	r3, [r4, #20]
 8009dde:	782b      	ldrb	r3, [r5, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d100      	bne.n	8009de6 <_vfiprintf_r+0x76>
 8009de4:	e0bb      	b.n	8009f5e <_vfiprintf_r+0x1ee>
 8009de6:	2201      	movs	r2, #1
 8009de8:	2300      	movs	r3, #0
 8009dea:	4252      	negs	r2, r2
 8009dec:	6062      	str	r2, [r4, #4]
 8009dee:	a904      	add	r1, sp, #16
 8009df0:	3254      	adds	r2, #84	; 0x54
 8009df2:	1852      	adds	r2, r2, r1
 8009df4:	1c6e      	adds	r6, r5, #1
 8009df6:	6023      	str	r3, [r4, #0]
 8009df8:	60e3      	str	r3, [r4, #12]
 8009dfa:	60a3      	str	r3, [r4, #8]
 8009dfc:	7013      	strb	r3, [r2, #0]
 8009dfe:	65a3      	str	r3, [r4, #88]	; 0x58
 8009e00:	7831      	ldrb	r1, [r6, #0]
 8009e02:	2205      	movs	r2, #5
 8009e04:	485e      	ldr	r0, [pc, #376]	; (8009f80 <_vfiprintf_r+0x210>)
 8009e06:	f7ff f973 	bl	80090f0 <memchr>
 8009e0a:	1c75      	adds	r5, r6, #1
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	d135      	bne.n	8009e7c <_vfiprintf_r+0x10c>
 8009e10:	6822      	ldr	r2, [r4, #0]
 8009e12:	06d3      	lsls	r3, r2, #27
 8009e14:	d504      	bpl.n	8009e20 <_vfiprintf_r+0xb0>
 8009e16:	2353      	movs	r3, #83	; 0x53
 8009e18:	a904      	add	r1, sp, #16
 8009e1a:	185b      	adds	r3, r3, r1
 8009e1c:	2120      	movs	r1, #32
 8009e1e:	7019      	strb	r1, [r3, #0]
 8009e20:	0713      	lsls	r3, r2, #28
 8009e22:	d504      	bpl.n	8009e2e <_vfiprintf_r+0xbe>
 8009e24:	2353      	movs	r3, #83	; 0x53
 8009e26:	a904      	add	r1, sp, #16
 8009e28:	185b      	adds	r3, r3, r1
 8009e2a:	212b      	movs	r1, #43	; 0x2b
 8009e2c:	7019      	strb	r1, [r3, #0]
 8009e2e:	7833      	ldrb	r3, [r6, #0]
 8009e30:	2b2a      	cmp	r3, #42	; 0x2a
 8009e32:	d02c      	beq.n	8009e8e <_vfiprintf_r+0x11e>
 8009e34:	0035      	movs	r5, r6
 8009e36:	2100      	movs	r1, #0
 8009e38:	200a      	movs	r0, #10
 8009e3a:	68e3      	ldr	r3, [r4, #12]
 8009e3c:	782a      	ldrb	r2, [r5, #0]
 8009e3e:	1c6e      	adds	r6, r5, #1
 8009e40:	3a30      	subs	r2, #48	; 0x30
 8009e42:	2a09      	cmp	r2, #9
 8009e44:	d964      	bls.n	8009f10 <_vfiprintf_r+0x1a0>
 8009e46:	2900      	cmp	r1, #0
 8009e48:	d02e      	beq.n	8009ea8 <_vfiprintf_r+0x138>
 8009e4a:	e026      	b.n	8009e9a <_vfiprintf_r+0x12a>
 8009e4c:	4b4d      	ldr	r3, [pc, #308]	; (8009f84 <_vfiprintf_r+0x214>)
 8009e4e:	429f      	cmp	r7, r3
 8009e50:	d102      	bne.n	8009e58 <_vfiprintf_r+0xe8>
 8009e52:	9b03      	ldr	r3, [sp, #12]
 8009e54:	689f      	ldr	r7, [r3, #8]
 8009e56:	e79e      	b.n	8009d96 <_vfiprintf_r+0x26>
 8009e58:	4b4b      	ldr	r3, [pc, #300]	; (8009f88 <_vfiprintf_r+0x218>)
 8009e5a:	429f      	cmp	r7, r3
 8009e5c:	d19b      	bne.n	8009d96 <_vfiprintf_r+0x26>
 8009e5e:	9b03      	ldr	r3, [sp, #12]
 8009e60:	68df      	ldr	r7, [r3, #12]
 8009e62:	e798      	b.n	8009d96 <_vfiprintf_r+0x26>
 8009e64:	0039      	movs	r1, r7
 8009e66:	9803      	ldr	r0, [sp, #12]
 8009e68:	f000 f97e 	bl	800a168 <__swsetup_r>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	d098      	beq.n	8009da2 <_vfiprintf_r+0x32>
 8009e70:	2001      	movs	r0, #1
 8009e72:	4240      	negs	r0, r0
 8009e74:	b021      	add	sp, #132	; 0x84
 8009e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e78:	3501      	adds	r5, #1
 8009e7a:	e79b      	b.n	8009db4 <_vfiprintf_r+0x44>
 8009e7c:	4b40      	ldr	r3, [pc, #256]	; (8009f80 <_vfiprintf_r+0x210>)
 8009e7e:	6822      	ldr	r2, [r4, #0]
 8009e80:	1ac0      	subs	r0, r0, r3
 8009e82:	2301      	movs	r3, #1
 8009e84:	4083      	lsls	r3, r0
 8009e86:	4313      	orrs	r3, r2
 8009e88:	6023      	str	r3, [r4, #0]
 8009e8a:	002e      	movs	r6, r5
 8009e8c:	e7b8      	b.n	8009e00 <_vfiprintf_r+0x90>
 8009e8e:	9b07      	ldr	r3, [sp, #28]
 8009e90:	1d19      	adds	r1, r3, #4
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	9107      	str	r1, [sp, #28]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	db01      	blt.n	8009e9e <_vfiprintf_r+0x12e>
 8009e9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e9c:	e004      	b.n	8009ea8 <_vfiprintf_r+0x138>
 8009e9e:	425b      	negs	r3, r3
 8009ea0:	60e3      	str	r3, [r4, #12]
 8009ea2:	2302      	movs	r3, #2
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	6023      	str	r3, [r4, #0]
 8009ea8:	782b      	ldrb	r3, [r5, #0]
 8009eaa:	2b2e      	cmp	r3, #46	; 0x2e
 8009eac:	d10a      	bne.n	8009ec4 <_vfiprintf_r+0x154>
 8009eae:	786b      	ldrb	r3, [r5, #1]
 8009eb0:	2b2a      	cmp	r3, #42	; 0x2a
 8009eb2:	d135      	bne.n	8009f20 <_vfiprintf_r+0x1b0>
 8009eb4:	9b07      	ldr	r3, [sp, #28]
 8009eb6:	3502      	adds	r5, #2
 8009eb8:	1d1a      	adds	r2, r3, #4
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	9207      	str	r2, [sp, #28]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	db2b      	blt.n	8009f1a <_vfiprintf_r+0x1aa>
 8009ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ec4:	4e31      	ldr	r6, [pc, #196]	; (8009f8c <_vfiprintf_r+0x21c>)
 8009ec6:	7829      	ldrb	r1, [r5, #0]
 8009ec8:	2203      	movs	r2, #3
 8009eca:	0030      	movs	r0, r6
 8009ecc:	f7ff f910 	bl	80090f0 <memchr>
 8009ed0:	2800      	cmp	r0, #0
 8009ed2:	d006      	beq.n	8009ee2 <_vfiprintf_r+0x172>
 8009ed4:	2340      	movs	r3, #64	; 0x40
 8009ed6:	1b80      	subs	r0, r0, r6
 8009ed8:	4083      	lsls	r3, r0
 8009eda:	6822      	ldr	r2, [r4, #0]
 8009edc:	3501      	adds	r5, #1
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	6023      	str	r3, [r4, #0]
 8009ee2:	7829      	ldrb	r1, [r5, #0]
 8009ee4:	2206      	movs	r2, #6
 8009ee6:	482a      	ldr	r0, [pc, #168]	; (8009f90 <_vfiprintf_r+0x220>)
 8009ee8:	1c6e      	adds	r6, r5, #1
 8009eea:	7621      	strb	r1, [r4, #24]
 8009eec:	f7ff f900 	bl	80090f0 <memchr>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	d03a      	beq.n	8009f6a <_vfiprintf_r+0x1fa>
 8009ef4:	4b27      	ldr	r3, [pc, #156]	; (8009f94 <_vfiprintf_r+0x224>)
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d125      	bne.n	8009f46 <_vfiprintf_r+0x1d6>
 8009efa:	2207      	movs	r2, #7
 8009efc:	9b07      	ldr	r3, [sp, #28]
 8009efe:	3307      	adds	r3, #7
 8009f00:	4393      	bics	r3, r2
 8009f02:	3308      	adds	r3, #8
 8009f04:	9307      	str	r3, [sp, #28]
 8009f06:	6963      	ldr	r3, [r4, #20]
 8009f08:	9a04      	ldr	r2, [sp, #16]
 8009f0a:	189b      	adds	r3, r3, r2
 8009f0c:	6163      	str	r3, [r4, #20]
 8009f0e:	e750      	b.n	8009db2 <_vfiprintf_r+0x42>
 8009f10:	4343      	muls	r3, r0
 8009f12:	2101      	movs	r1, #1
 8009f14:	189b      	adds	r3, r3, r2
 8009f16:	0035      	movs	r5, r6
 8009f18:	e790      	b.n	8009e3c <_vfiprintf_r+0xcc>
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	425b      	negs	r3, r3
 8009f1e:	e7d0      	b.n	8009ec2 <_vfiprintf_r+0x152>
 8009f20:	2300      	movs	r3, #0
 8009f22:	200a      	movs	r0, #10
 8009f24:	001a      	movs	r2, r3
 8009f26:	3501      	adds	r5, #1
 8009f28:	6063      	str	r3, [r4, #4]
 8009f2a:	7829      	ldrb	r1, [r5, #0]
 8009f2c:	1c6e      	adds	r6, r5, #1
 8009f2e:	3930      	subs	r1, #48	; 0x30
 8009f30:	2909      	cmp	r1, #9
 8009f32:	d903      	bls.n	8009f3c <_vfiprintf_r+0x1cc>
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d0c5      	beq.n	8009ec4 <_vfiprintf_r+0x154>
 8009f38:	9209      	str	r2, [sp, #36]	; 0x24
 8009f3a:	e7c3      	b.n	8009ec4 <_vfiprintf_r+0x154>
 8009f3c:	4342      	muls	r2, r0
 8009f3e:	2301      	movs	r3, #1
 8009f40:	1852      	adds	r2, r2, r1
 8009f42:	0035      	movs	r5, r6
 8009f44:	e7f1      	b.n	8009f2a <_vfiprintf_r+0x1ba>
 8009f46:	ab07      	add	r3, sp, #28
 8009f48:	9300      	str	r3, [sp, #0]
 8009f4a:	003a      	movs	r2, r7
 8009f4c:	4b12      	ldr	r3, [pc, #72]	; (8009f98 <_vfiprintf_r+0x228>)
 8009f4e:	0021      	movs	r1, r4
 8009f50:	9803      	ldr	r0, [sp, #12]
 8009f52:	f7fc f955 	bl	8006200 <_printf_float>
 8009f56:	9004      	str	r0, [sp, #16]
 8009f58:	9b04      	ldr	r3, [sp, #16]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	d1d3      	bne.n	8009f06 <_vfiprintf_r+0x196>
 8009f5e:	89bb      	ldrh	r3, [r7, #12]
 8009f60:	065b      	lsls	r3, r3, #25
 8009f62:	d500      	bpl.n	8009f66 <_vfiprintf_r+0x1f6>
 8009f64:	e784      	b.n	8009e70 <_vfiprintf_r+0x100>
 8009f66:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009f68:	e784      	b.n	8009e74 <_vfiprintf_r+0x104>
 8009f6a:	ab07      	add	r3, sp, #28
 8009f6c:	9300      	str	r3, [sp, #0]
 8009f6e:	003a      	movs	r2, r7
 8009f70:	4b09      	ldr	r3, [pc, #36]	; (8009f98 <_vfiprintf_r+0x228>)
 8009f72:	0021      	movs	r1, r4
 8009f74:	9803      	ldr	r0, [sp, #12]
 8009f76:	f7fc fbfd 	bl	8006774 <_printf_i>
 8009f7a:	e7ec      	b.n	8009f56 <_vfiprintf_r+0x1e6>
 8009f7c:	0800a848 	.word	0x0800a848
 8009f80:	0800a994 	.word	0x0800a994
 8009f84:	0800a868 	.word	0x0800a868
 8009f88:	0800a828 	.word	0x0800a828
 8009f8c:	0800a99a 	.word	0x0800a99a
 8009f90:	0800a99e 	.word	0x0800a99e
 8009f94:	08006201 	.word	0x08006201
 8009f98:	08009d4b 	.word	0x08009d4b

08009f9c <_sbrk_r>:
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	b570      	push	{r4, r5, r6, lr}
 8009fa0:	4c06      	ldr	r4, [pc, #24]	; (8009fbc <_sbrk_r+0x20>)
 8009fa2:	0005      	movs	r5, r0
 8009fa4:	0008      	movs	r0, r1
 8009fa6:	6023      	str	r3, [r4, #0]
 8009fa8:	f7f9 f894 	bl	80030d4 <_sbrk>
 8009fac:	1c43      	adds	r3, r0, #1
 8009fae:	d103      	bne.n	8009fb8 <_sbrk_r+0x1c>
 8009fb0:	6823      	ldr	r3, [r4, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d000      	beq.n	8009fb8 <_sbrk_r+0x1c>
 8009fb6:	602b      	str	r3, [r5, #0]
 8009fb8:	bd70      	pop	{r4, r5, r6, pc}
 8009fba:	46c0      	nop			; (mov r8, r8)
 8009fbc:	20000b38 	.word	0x20000b38

08009fc0 <__sread>:
 8009fc0:	b570      	push	{r4, r5, r6, lr}
 8009fc2:	000c      	movs	r4, r1
 8009fc4:	250e      	movs	r5, #14
 8009fc6:	5f49      	ldrsh	r1, [r1, r5]
 8009fc8:	f000 fac8 	bl	800a55c <_read_r>
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	db03      	blt.n	8009fd8 <__sread+0x18>
 8009fd0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009fd2:	181b      	adds	r3, r3, r0
 8009fd4:	6563      	str	r3, [r4, #84]	; 0x54
 8009fd6:	bd70      	pop	{r4, r5, r6, pc}
 8009fd8:	89a3      	ldrh	r3, [r4, #12]
 8009fda:	4a02      	ldr	r2, [pc, #8]	; (8009fe4 <__sread+0x24>)
 8009fdc:	4013      	ands	r3, r2
 8009fde:	81a3      	strh	r3, [r4, #12]
 8009fe0:	e7f9      	b.n	8009fd6 <__sread+0x16>
 8009fe2:	46c0      	nop			; (mov r8, r8)
 8009fe4:	ffffefff 	.word	0xffffefff

08009fe8 <__swrite>:
 8009fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fea:	001f      	movs	r7, r3
 8009fec:	898b      	ldrh	r3, [r1, #12]
 8009fee:	0005      	movs	r5, r0
 8009ff0:	000c      	movs	r4, r1
 8009ff2:	0016      	movs	r6, r2
 8009ff4:	05db      	lsls	r3, r3, #23
 8009ff6:	d505      	bpl.n	800a004 <__swrite+0x1c>
 8009ff8:	230e      	movs	r3, #14
 8009ffa:	5ec9      	ldrsh	r1, [r1, r3]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	2302      	movs	r3, #2
 800a000:	f000 f9f0 	bl	800a3e4 <_lseek_r>
 800a004:	89a3      	ldrh	r3, [r4, #12]
 800a006:	4a05      	ldr	r2, [pc, #20]	; (800a01c <__swrite+0x34>)
 800a008:	0028      	movs	r0, r5
 800a00a:	4013      	ands	r3, r2
 800a00c:	81a3      	strh	r3, [r4, #12]
 800a00e:	0032      	movs	r2, r6
 800a010:	230e      	movs	r3, #14
 800a012:	5ee1      	ldrsh	r1, [r4, r3]
 800a014:	003b      	movs	r3, r7
 800a016:	f000 f893 	bl	800a140 <_write_r>
 800a01a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a01c:	ffffefff 	.word	0xffffefff

0800a020 <__sseek>:
 800a020:	b570      	push	{r4, r5, r6, lr}
 800a022:	000c      	movs	r4, r1
 800a024:	250e      	movs	r5, #14
 800a026:	5f49      	ldrsh	r1, [r1, r5]
 800a028:	f000 f9dc 	bl	800a3e4 <_lseek_r>
 800a02c:	89a3      	ldrh	r3, [r4, #12]
 800a02e:	1c42      	adds	r2, r0, #1
 800a030:	d103      	bne.n	800a03a <__sseek+0x1a>
 800a032:	4a05      	ldr	r2, [pc, #20]	; (800a048 <__sseek+0x28>)
 800a034:	4013      	ands	r3, r2
 800a036:	81a3      	strh	r3, [r4, #12]
 800a038:	bd70      	pop	{r4, r5, r6, pc}
 800a03a:	2280      	movs	r2, #128	; 0x80
 800a03c:	0152      	lsls	r2, r2, #5
 800a03e:	4313      	orrs	r3, r2
 800a040:	81a3      	strh	r3, [r4, #12]
 800a042:	6560      	str	r0, [r4, #84]	; 0x54
 800a044:	e7f8      	b.n	800a038 <__sseek+0x18>
 800a046:	46c0      	nop			; (mov r8, r8)
 800a048:	ffffefff 	.word	0xffffefff

0800a04c <__sclose>:
 800a04c:	b510      	push	{r4, lr}
 800a04e:	230e      	movs	r3, #14
 800a050:	5ec9      	ldrsh	r1, [r1, r3]
 800a052:	f000 f8ff 	bl	800a254 <_close_r>
 800a056:	bd10      	pop	{r4, pc}

0800a058 <strncmp>:
 800a058:	2300      	movs	r3, #0
 800a05a:	b530      	push	{r4, r5, lr}
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d00a      	beq.n	800a076 <strncmp+0x1e>
 800a060:	3a01      	subs	r2, #1
 800a062:	5cc4      	ldrb	r4, [r0, r3]
 800a064:	5ccd      	ldrb	r5, [r1, r3]
 800a066:	42ac      	cmp	r4, r5
 800a068:	d104      	bne.n	800a074 <strncmp+0x1c>
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d002      	beq.n	800a074 <strncmp+0x1c>
 800a06e:	3301      	adds	r3, #1
 800a070:	2c00      	cmp	r4, #0
 800a072:	d1f6      	bne.n	800a062 <strncmp+0xa>
 800a074:	1b63      	subs	r3, r4, r5
 800a076:	0018      	movs	r0, r3
 800a078:	bd30      	pop	{r4, r5, pc}
	...

0800a07c <__swbuf_r>:
 800a07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a07e:	0005      	movs	r5, r0
 800a080:	000e      	movs	r6, r1
 800a082:	0014      	movs	r4, r2
 800a084:	2800      	cmp	r0, #0
 800a086:	d004      	beq.n	800a092 <__swbuf_r+0x16>
 800a088:	6983      	ldr	r3, [r0, #24]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d101      	bne.n	800a092 <__swbuf_r+0x16>
 800a08e:	f7fe fc3d 	bl	800890c <__sinit>
 800a092:	4b22      	ldr	r3, [pc, #136]	; (800a11c <__swbuf_r+0xa0>)
 800a094:	429c      	cmp	r4, r3
 800a096:	d12d      	bne.n	800a0f4 <__swbuf_r+0x78>
 800a098:	686c      	ldr	r4, [r5, #4]
 800a09a:	69a3      	ldr	r3, [r4, #24]
 800a09c:	60a3      	str	r3, [r4, #8]
 800a09e:	89a3      	ldrh	r3, [r4, #12]
 800a0a0:	071b      	lsls	r3, r3, #28
 800a0a2:	d531      	bpl.n	800a108 <__swbuf_r+0x8c>
 800a0a4:	6923      	ldr	r3, [r4, #16]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d02e      	beq.n	800a108 <__swbuf_r+0x8c>
 800a0aa:	6823      	ldr	r3, [r4, #0]
 800a0ac:	6922      	ldr	r2, [r4, #16]
 800a0ae:	b2f7      	uxtb	r7, r6
 800a0b0:	1a98      	subs	r0, r3, r2
 800a0b2:	6963      	ldr	r3, [r4, #20]
 800a0b4:	b2f6      	uxtb	r6, r6
 800a0b6:	4283      	cmp	r3, r0
 800a0b8:	dc05      	bgt.n	800a0c6 <__swbuf_r+0x4a>
 800a0ba:	0021      	movs	r1, r4
 800a0bc:	0028      	movs	r0, r5
 800a0be:	f000 f965 	bl	800a38c <_fflush_r>
 800a0c2:	2800      	cmp	r0, #0
 800a0c4:	d126      	bne.n	800a114 <__swbuf_r+0x98>
 800a0c6:	68a3      	ldr	r3, [r4, #8]
 800a0c8:	3001      	adds	r0, #1
 800a0ca:	3b01      	subs	r3, #1
 800a0cc:	60a3      	str	r3, [r4, #8]
 800a0ce:	6823      	ldr	r3, [r4, #0]
 800a0d0:	1c5a      	adds	r2, r3, #1
 800a0d2:	6022      	str	r2, [r4, #0]
 800a0d4:	701f      	strb	r7, [r3, #0]
 800a0d6:	6963      	ldr	r3, [r4, #20]
 800a0d8:	4283      	cmp	r3, r0
 800a0da:	d004      	beq.n	800a0e6 <__swbuf_r+0x6a>
 800a0dc:	89a3      	ldrh	r3, [r4, #12]
 800a0de:	07db      	lsls	r3, r3, #31
 800a0e0:	d51a      	bpl.n	800a118 <__swbuf_r+0x9c>
 800a0e2:	2e0a      	cmp	r6, #10
 800a0e4:	d118      	bne.n	800a118 <__swbuf_r+0x9c>
 800a0e6:	0021      	movs	r1, r4
 800a0e8:	0028      	movs	r0, r5
 800a0ea:	f000 f94f 	bl	800a38c <_fflush_r>
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	d012      	beq.n	800a118 <__swbuf_r+0x9c>
 800a0f2:	e00f      	b.n	800a114 <__swbuf_r+0x98>
 800a0f4:	4b0a      	ldr	r3, [pc, #40]	; (800a120 <__swbuf_r+0xa4>)
 800a0f6:	429c      	cmp	r4, r3
 800a0f8:	d101      	bne.n	800a0fe <__swbuf_r+0x82>
 800a0fa:	68ac      	ldr	r4, [r5, #8]
 800a0fc:	e7cd      	b.n	800a09a <__swbuf_r+0x1e>
 800a0fe:	4b09      	ldr	r3, [pc, #36]	; (800a124 <__swbuf_r+0xa8>)
 800a100:	429c      	cmp	r4, r3
 800a102:	d1ca      	bne.n	800a09a <__swbuf_r+0x1e>
 800a104:	68ec      	ldr	r4, [r5, #12]
 800a106:	e7c8      	b.n	800a09a <__swbuf_r+0x1e>
 800a108:	0021      	movs	r1, r4
 800a10a:	0028      	movs	r0, r5
 800a10c:	f000 f82c 	bl	800a168 <__swsetup_r>
 800a110:	2800      	cmp	r0, #0
 800a112:	d0ca      	beq.n	800a0aa <__swbuf_r+0x2e>
 800a114:	2601      	movs	r6, #1
 800a116:	4276      	negs	r6, r6
 800a118:	0030      	movs	r0, r6
 800a11a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a11c:	0800a848 	.word	0x0800a848
 800a120:	0800a868 	.word	0x0800a868
 800a124:	0800a828 	.word	0x0800a828

0800a128 <__ascii_wctomb>:
 800a128:	1e0b      	subs	r3, r1, #0
 800a12a:	d004      	beq.n	800a136 <__ascii_wctomb+0xe>
 800a12c:	2aff      	cmp	r2, #255	; 0xff
 800a12e:	d904      	bls.n	800a13a <__ascii_wctomb+0x12>
 800a130:	238a      	movs	r3, #138	; 0x8a
 800a132:	6003      	str	r3, [r0, #0]
 800a134:	3b8b      	subs	r3, #139	; 0x8b
 800a136:	0018      	movs	r0, r3
 800a138:	4770      	bx	lr
 800a13a:	700a      	strb	r2, [r1, #0]
 800a13c:	2301      	movs	r3, #1
 800a13e:	e7fa      	b.n	800a136 <__ascii_wctomb+0xe>

0800a140 <_write_r>:
 800a140:	b570      	push	{r4, r5, r6, lr}
 800a142:	0005      	movs	r5, r0
 800a144:	0008      	movs	r0, r1
 800a146:	0011      	movs	r1, r2
 800a148:	2200      	movs	r2, #0
 800a14a:	4c06      	ldr	r4, [pc, #24]	; (800a164 <_write_r+0x24>)
 800a14c:	6022      	str	r2, [r4, #0]
 800a14e:	001a      	movs	r2, r3
 800a150:	f7f8 ff77 	bl	8003042 <_write>
 800a154:	1c43      	adds	r3, r0, #1
 800a156:	d103      	bne.n	800a160 <_write_r+0x20>
 800a158:	6823      	ldr	r3, [r4, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d000      	beq.n	800a160 <_write_r+0x20>
 800a15e:	602b      	str	r3, [r5, #0]
 800a160:	bd70      	pop	{r4, r5, r6, pc}
 800a162:	46c0      	nop			; (mov r8, r8)
 800a164:	20000b38 	.word	0x20000b38

0800a168 <__swsetup_r>:
 800a168:	4b36      	ldr	r3, [pc, #216]	; (800a244 <__swsetup_r+0xdc>)
 800a16a:	b570      	push	{r4, r5, r6, lr}
 800a16c:	681d      	ldr	r5, [r3, #0]
 800a16e:	0006      	movs	r6, r0
 800a170:	000c      	movs	r4, r1
 800a172:	2d00      	cmp	r5, #0
 800a174:	d005      	beq.n	800a182 <__swsetup_r+0x1a>
 800a176:	69ab      	ldr	r3, [r5, #24]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d102      	bne.n	800a182 <__swsetup_r+0x1a>
 800a17c:	0028      	movs	r0, r5
 800a17e:	f7fe fbc5 	bl	800890c <__sinit>
 800a182:	4b31      	ldr	r3, [pc, #196]	; (800a248 <__swsetup_r+0xe0>)
 800a184:	429c      	cmp	r4, r3
 800a186:	d10f      	bne.n	800a1a8 <__swsetup_r+0x40>
 800a188:	686c      	ldr	r4, [r5, #4]
 800a18a:	230c      	movs	r3, #12
 800a18c:	5ee2      	ldrsh	r2, [r4, r3]
 800a18e:	b293      	uxth	r3, r2
 800a190:	0719      	lsls	r1, r3, #28
 800a192:	d42d      	bmi.n	800a1f0 <__swsetup_r+0x88>
 800a194:	06d9      	lsls	r1, r3, #27
 800a196:	d411      	bmi.n	800a1bc <__swsetup_r+0x54>
 800a198:	2309      	movs	r3, #9
 800a19a:	2001      	movs	r0, #1
 800a19c:	6033      	str	r3, [r6, #0]
 800a19e:	3337      	adds	r3, #55	; 0x37
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	81a3      	strh	r3, [r4, #12]
 800a1a4:	4240      	negs	r0, r0
 800a1a6:	bd70      	pop	{r4, r5, r6, pc}
 800a1a8:	4b28      	ldr	r3, [pc, #160]	; (800a24c <__swsetup_r+0xe4>)
 800a1aa:	429c      	cmp	r4, r3
 800a1ac:	d101      	bne.n	800a1b2 <__swsetup_r+0x4a>
 800a1ae:	68ac      	ldr	r4, [r5, #8]
 800a1b0:	e7eb      	b.n	800a18a <__swsetup_r+0x22>
 800a1b2:	4b27      	ldr	r3, [pc, #156]	; (800a250 <__swsetup_r+0xe8>)
 800a1b4:	429c      	cmp	r4, r3
 800a1b6:	d1e8      	bne.n	800a18a <__swsetup_r+0x22>
 800a1b8:	68ec      	ldr	r4, [r5, #12]
 800a1ba:	e7e6      	b.n	800a18a <__swsetup_r+0x22>
 800a1bc:	075b      	lsls	r3, r3, #29
 800a1be:	d513      	bpl.n	800a1e8 <__swsetup_r+0x80>
 800a1c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1c2:	2900      	cmp	r1, #0
 800a1c4:	d008      	beq.n	800a1d8 <__swsetup_r+0x70>
 800a1c6:	0023      	movs	r3, r4
 800a1c8:	3344      	adds	r3, #68	; 0x44
 800a1ca:	4299      	cmp	r1, r3
 800a1cc:	d002      	beq.n	800a1d4 <__swsetup_r+0x6c>
 800a1ce:	0030      	movs	r0, r6
 800a1d0:	f7ff fb9e 	bl	8009910 <_free_r>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	6363      	str	r3, [r4, #52]	; 0x34
 800a1d8:	2224      	movs	r2, #36	; 0x24
 800a1da:	89a3      	ldrh	r3, [r4, #12]
 800a1dc:	4393      	bics	r3, r2
 800a1de:	81a3      	strh	r3, [r4, #12]
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	6063      	str	r3, [r4, #4]
 800a1e4:	6923      	ldr	r3, [r4, #16]
 800a1e6:	6023      	str	r3, [r4, #0]
 800a1e8:	2308      	movs	r3, #8
 800a1ea:	89a2      	ldrh	r2, [r4, #12]
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	81a3      	strh	r3, [r4, #12]
 800a1f0:	6923      	ldr	r3, [r4, #16]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d10b      	bne.n	800a20e <__swsetup_r+0xa6>
 800a1f6:	21a0      	movs	r1, #160	; 0xa0
 800a1f8:	2280      	movs	r2, #128	; 0x80
 800a1fa:	89a3      	ldrh	r3, [r4, #12]
 800a1fc:	0089      	lsls	r1, r1, #2
 800a1fe:	0092      	lsls	r2, r2, #2
 800a200:	400b      	ands	r3, r1
 800a202:	4293      	cmp	r3, r2
 800a204:	d003      	beq.n	800a20e <__swsetup_r+0xa6>
 800a206:	0021      	movs	r1, r4
 800a208:	0030      	movs	r0, r6
 800a20a:	f000 f927 	bl	800a45c <__smakebuf_r>
 800a20e:	2301      	movs	r3, #1
 800a210:	89a2      	ldrh	r2, [r4, #12]
 800a212:	4013      	ands	r3, r2
 800a214:	d011      	beq.n	800a23a <__swsetup_r+0xd2>
 800a216:	2300      	movs	r3, #0
 800a218:	60a3      	str	r3, [r4, #8]
 800a21a:	6963      	ldr	r3, [r4, #20]
 800a21c:	425b      	negs	r3, r3
 800a21e:	61a3      	str	r3, [r4, #24]
 800a220:	2000      	movs	r0, #0
 800a222:	6923      	ldr	r3, [r4, #16]
 800a224:	4283      	cmp	r3, r0
 800a226:	d1be      	bne.n	800a1a6 <__swsetup_r+0x3e>
 800a228:	230c      	movs	r3, #12
 800a22a:	5ee2      	ldrsh	r2, [r4, r3]
 800a22c:	0613      	lsls	r3, r2, #24
 800a22e:	d5ba      	bpl.n	800a1a6 <__swsetup_r+0x3e>
 800a230:	2340      	movs	r3, #64	; 0x40
 800a232:	4313      	orrs	r3, r2
 800a234:	81a3      	strh	r3, [r4, #12]
 800a236:	3801      	subs	r0, #1
 800a238:	e7b5      	b.n	800a1a6 <__swsetup_r+0x3e>
 800a23a:	0792      	lsls	r2, r2, #30
 800a23c:	d400      	bmi.n	800a240 <__swsetup_r+0xd8>
 800a23e:	6963      	ldr	r3, [r4, #20]
 800a240:	60a3      	str	r3, [r4, #8]
 800a242:	e7ed      	b.n	800a220 <__swsetup_r+0xb8>
 800a244:	2000000c 	.word	0x2000000c
 800a248:	0800a848 	.word	0x0800a848
 800a24c:	0800a868 	.word	0x0800a868
 800a250:	0800a828 	.word	0x0800a828

0800a254 <_close_r>:
 800a254:	2300      	movs	r3, #0
 800a256:	b570      	push	{r4, r5, r6, lr}
 800a258:	4c06      	ldr	r4, [pc, #24]	; (800a274 <_close_r+0x20>)
 800a25a:	0005      	movs	r5, r0
 800a25c:	0008      	movs	r0, r1
 800a25e:	6023      	str	r3, [r4, #0]
 800a260:	f7f8 ff0b 	bl	800307a <_close>
 800a264:	1c43      	adds	r3, r0, #1
 800a266:	d103      	bne.n	800a270 <_close_r+0x1c>
 800a268:	6823      	ldr	r3, [r4, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d000      	beq.n	800a270 <_close_r+0x1c>
 800a26e:	602b      	str	r3, [r5, #0]
 800a270:	bd70      	pop	{r4, r5, r6, pc}
 800a272:	46c0      	nop			; (mov r8, r8)
 800a274:	20000b38 	.word	0x20000b38

0800a278 <__sflush_r>:
 800a278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a27a:	898a      	ldrh	r2, [r1, #12]
 800a27c:	0005      	movs	r5, r0
 800a27e:	000c      	movs	r4, r1
 800a280:	0713      	lsls	r3, r2, #28
 800a282:	d460      	bmi.n	800a346 <__sflush_r+0xce>
 800a284:	684b      	ldr	r3, [r1, #4]
 800a286:	2b00      	cmp	r3, #0
 800a288:	dc04      	bgt.n	800a294 <__sflush_r+0x1c>
 800a28a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	dc01      	bgt.n	800a294 <__sflush_r+0x1c>
 800a290:	2000      	movs	r0, #0
 800a292:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a294:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a296:	2f00      	cmp	r7, #0
 800a298:	d0fa      	beq.n	800a290 <__sflush_r+0x18>
 800a29a:	2300      	movs	r3, #0
 800a29c:	682e      	ldr	r6, [r5, #0]
 800a29e:	602b      	str	r3, [r5, #0]
 800a2a0:	2380      	movs	r3, #128	; 0x80
 800a2a2:	015b      	lsls	r3, r3, #5
 800a2a4:	6a21      	ldr	r1, [r4, #32]
 800a2a6:	401a      	ands	r2, r3
 800a2a8:	d034      	beq.n	800a314 <__sflush_r+0x9c>
 800a2aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2ac:	89a3      	ldrh	r3, [r4, #12]
 800a2ae:	075b      	lsls	r3, r3, #29
 800a2b0:	d506      	bpl.n	800a2c0 <__sflush_r+0x48>
 800a2b2:	6863      	ldr	r3, [r4, #4]
 800a2b4:	1ac0      	subs	r0, r0, r3
 800a2b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d001      	beq.n	800a2c0 <__sflush_r+0x48>
 800a2bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2be:	1ac0      	subs	r0, r0, r3
 800a2c0:	0002      	movs	r2, r0
 800a2c2:	6a21      	ldr	r1, [r4, #32]
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	0028      	movs	r0, r5
 800a2c8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a2ca:	47b8      	blx	r7
 800a2cc:	89a1      	ldrh	r1, [r4, #12]
 800a2ce:	1c43      	adds	r3, r0, #1
 800a2d0:	d106      	bne.n	800a2e0 <__sflush_r+0x68>
 800a2d2:	682b      	ldr	r3, [r5, #0]
 800a2d4:	2b1d      	cmp	r3, #29
 800a2d6:	d830      	bhi.n	800a33a <__sflush_r+0xc2>
 800a2d8:	4a2b      	ldr	r2, [pc, #172]	; (800a388 <__sflush_r+0x110>)
 800a2da:	40da      	lsrs	r2, r3
 800a2dc:	07d3      	lsls	r3, r2, #31
 800a2de:	d52c      	bpl.n	800a33a <__sflush_r+0xc2>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	6063      	str	r3, [r4, #4]
 800a2e4:	6923      	ldr	r3, [r4, #16]
 800a2e6:	6023      	str	r3, [r4, #0]
 800a2e8:	04cb      	lsls	r3, r1, #19
 800a2ea:	d505      	bpl.n	800a2f8 <__sflush_r+0x80>
 800a2ec:	1c43      	adds	r3, r0, #1
 800a2ee:	d102      	bne.n	800a2f6 <__sflush_r+0x7e>
 800a2f0:	682b      	ldr	r3, [r5, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d100      	bne.n	800a2f8 <__sflush_r+0x80>
 800a2f6:	6560      	str	r0, [r4, #84]	; 0x54
 800a2f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2fa:	602e      	str	r6, [r5, #0]
 800a2fc:	2900      	cmp	r1, #0
 800a2fe:	d0c7      	beq.n	800a290 <__sflush_r+0x18>
 800a300:	0023      	movs	r3, r4
 800a302:	3344      	adds	r3, #68	; 0x44
 800a304:	4299      	cmp	r1, r3
 800a306:	d002      	beq.n	800a30e <__sflush_r+0x96>
 800a308:	0028      	movs	r0, r5
 800a30a:	f7ff fb01 	bl	8009910 <_free_r>
 800a30e:	2000      	movs	r0, #0
 800a310:	6360      	str	r0, [r4, #52]	; 0x34
 800a312:	e7be      	b.n	800a292 <__sflush_r+0x1a>
 800a314:	2301      	movs	r3, #1
 800a316:	0028      	movs	r0, r5
 800a318:	47b8      	blx	r7
 800a31a:	1c43      	adds	r3, r0, #1
 800a31c:	d1c6      	bne.n	800a2ac <__sflush_r+0x34>
 800a31e:	682b      	ldr	r3, [r5, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d0c3      	beq.n	800a2ac <__sflush_r+0x34>
 800a324:	2b1d      	cmp	r3, #29
 800a326:	d001      	beq.n	800a32c <__sflush_r+0xb4>
 800a328:	2b16      	cmp	r3, #22
 800a32a:	d101      	bne.n	800a330 <__sflush_r+0xb8>
 800a32c:	602e      	str	r6, [r5, #0]
 800a32e:	e7af      	b.n	800a290 <__sflush_r+0x18>
 800a330:	2340      	movs	r3, #64	; 0x40
 800a332:	89a2      	ldrh	r2, [r4, #12]
 800a334:	4313      	orrs	r3, r2
 800a336:	81a3      	strh	r3, [r4, #12]
 800a338:	e7ab      	b.n	800a292 <__sflush_r+0x1a>
 800a33a:	2340      	movs	r3, #64	; 0x40
 800a33c:	430b      	orrs	r3, r1
 800a33e:	2001      	movs	r0, #1
 800a340:	81a3      	strh	r3, [r4, #12]
 800a342:	4240      	negs	r0, r0
 800a344:	e7a5      	b.n	800a292 <__sflush_r+0x1a>
 800a346:	690f      	ldr	r7, [r1, #16]
 800a348:	2f00      	cmp	r7, #0
 800a34a:	d0a1      	beq.n	800a290 <__sflush_r+0x18>
 800a34c:	680b      	ldr	r3, [r1, #0]
 800a34e:	600f      	str	r7, [r1, #0]
 800a350:	1bdb      	subs	r3, r3, r7
 800a352:	9301      	str	r3, [sp, #4]
 800a354:	2300      	movs	r3, #0
 800a356:	0792      	lsls	r2, r2, #30
 800a358:	d100      	bne.n	800a35c <__sflush_r+0xe4>
 800a35a:	694b      	ldr	r3, [r1, #20]
 800a35c:	60a3      	str	r3, [r4, #8]
 800a35e:	9b01      	ldr	r3, [sp, #4]
 800a360:	2b00      	cmp	r3, #0
 800a362:	dc00      	bgt.n	800a366 <__sflush_r+0xee>
 800a364:	e794      	b.n	800a290 <__sflush_r+0x18>
 800a366:	9b01      	ldr	r3, [sp, #4]
 800a368:	003a      	movs	r2, r7
 800a36a:	6a21      	ldr	r1, [r4, #32]
 800a36c:	0028      	movs	r0, r5
 800a36e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a370:	47b0      	blx	r6
 800a372:	2800      	cmp	r0, #0
 800a374:	dc03      	bgt.n	800a37e <__sflush_r+0x106>
 800a376:	2340      	movs	r3, #64	; 0x40
 800a378:	89a2      	ldrh	r2, [r4, #12]
 800a37a:	4313      	orrs	r3, r2
 800a37c:	e7df      	b.n	800a33e <__sflush_r+0xc6>
 800a37e:	9b01      	ldr	r3, [sp, #4]
 800a380:	183f      	adds	r7, r7, r0
 800a382:	1a1b      	subs	r3, r3, r0
 800a384:	9301      	str	r3, [sp, #4]
 800a386:	e7ea      	b.n	800a35e <__sflush_r+0xe6>
 800a388:	20400001 	.word	0x20400001

0800a38c <_fflush_r>:
 800a38c:	690b      	ldr	r3, [r1, #16]
 800a38e:	b570      	push	{r4, r5, r6, lr}
 800a390:	0005      	movs	r5, r0
 800a392:	000c      	movs	r4, r1
 800a394:	2b00      	cmp	r3, #0
 800a396:	d101      	bne.n	800a39c <_fflush_r+0x10>
 800a398:	2000      	movs	r0, #0
 800a39a:	bd70      	pop	{r4, r5, r6, pc}
 800a39c:	2800      	cmp	r0, #0
 800a39e:	d004      	beq.n	800a3aa <_fflush_r+0x1e>
 800a3a0:	6983      	ldr	r3, [r0, #24]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d101      	bne.n	800a3aa <_fflush_r+0x1e>
 800a3a6:	f7fe fab1 	bl	800890c <__sinit>
 800a3aa:	4b0b      	ldr	r3, [pc, #44]	; (800a3d8 <_fflush_r+0x4c>)
 800a3ac:	429c      	cmp	r4, r3
 800a3ae:	d109      	bne.n	800a3c4 <_fflush_r+0x38>
 800a3b0:	686c      	ldr	r4, [r5, #4]
 800a3b2:	220c      	movs	r2, #12
 800a3b4:	5ea3      	ldrsh	r3, [r4, r2]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d0ee      	beq.n	800a398 <_fflush_r+0xc>
 800a3ba:	0021      	movs	r1, r4
 800a3bc:	0028      	movs	r0, r5
 800a3be:	f7ff ff5b 	bl	800a278 <__sflush_r>
 800a3c2:	e7ea      	b.n	800a39a <_fflush_r+0xe>
 800a3c4:	4b05      	ldr	r3, [pc, #20]	; (800a3dc <_fflush_r+0x50>)
 800a3c6:	429c      	cmp	r4, r3
 800a3c8:	d101      	bne.n	800a3ce <_fflush_r+0x42>
 800a3ca:	68ac      	ldr	r4, [r5, #8]
 800a3cc:	e7f1      	b.n	800a3b2 <_fflush_r+0x26>
 800a3ce:	4b04      	ldr	r3, [pc, #16]	; (800a3e0 <_fflush_r+0x54>)
 800a3d0:	429c      	cmp	r4, r3
 800a3d2:	d1ee      	bne.n	800a3b2 <_fflush_r+0x26>
 800a3d4:	68ec      	ldr	r4, [r5, #12]
 800a3d6:	e7ec      	b.n	800a3b2 <_fflush_r+0x26>
 800a3d8:	0800a848 	.word	0x0800a848
 800a3dc:	0800a868 	.word	0x0800a868
 800a3e0:	0800a828 	.word	0x0800a828

0800a3e4 <_lseek_r>:
 800a3e4:	b570      	push	{r4, r5, r6, lr}
 800a3e6:	0005      	movs	r5, r0
 800a3e8:	0008      	movs	r0, r1
 800a3ea:	0011      	movs	r1, r2
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	4c06      	ldr	r4, [pc, #24]	; (800a408 <_lseek_r+0x24>)
 800a3f0:	6022      	str	r2, [r4, #0]
 800a3f2:	001a      	movs	r2, r3
 800a3f4:	f7f8 fe62 	bl	80030bc <_lseek>
 800a3f8:	1c43      	adds	r3, r0, #1
 800a3fa:	d103      	bne.n	800a404 <_lseek_r+0x20>
 800a3fc:	6823      	ldr	r3, [r4, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d000      	beq.n	800a404 <_lseek_r+0x20>
 800a402:	602b      	str	r3, [r5, #0]
 800a404:	bd70      	pop	{r4, r5, r6, pc}
 800a406:	46c0      	nop			; (mov r8, r8)
 800a408:	20000b38 	.word	0x20000b38

0800a40c <__swhatbuf_r>:
 800a40c:	b570      	push	{r4, r5, r6, lr}
 800a40e:	000e      	movs	r6, r1
 800a410:	001d      	movs	r5, r3
 800a412:	230e      	movs	r3, #14
 800a414:	5ec9      	ldrsh	r1, [r1, r3]
 800a416:	b096      	sub	sp, #88	; 0x58
 800a418:	0014      	movs	r4, r2
 800a41a:	2900      	cmp	r1, #0
 800a41c:	da07      	bge.n	800a42e <__swhatbuf_r+0x22>
 800a41e:	2300      	movs	r3, #0
 800a420:	602b      	str	r3, [r5, #0]
 800a422:	89b3      	ldrh	r3, [r6, #12]
 800a424:	061b      	lsls	r3, r3, #24
 800a426:	d411      	bmi.n	800a44c <__swhatbuf_r+0x40>
 800a428:	2380      	movs	r3, #128	; 0x80
 800a42a:	00db      	lsls	r3, r3, #3
 800a42c:	e00f      	b.n	800a44e <__swhatbuf_r+0x42>
 800a42e:	466a      	mov	r2, sp
 800a430:	f000 f8a8 	bl	800a584 <_fstat_r>
 800a434:	2800      	cmp	r0, #0
 800a436:	dbf2      	blt.n	800a41e <__swhatbuf_r+0x12>
 800a438:	22f0      	movs	r2, #240	; 0xf0
 800a43a:	9b01      	ldr	r3, [sp, #4]
 800a43c:	0212      	lsls	r2, r2, #8
 800a43e:	4013      	ands	r3, r2
 800a440:	4a05      	ldr	r2, [pc, #20]	; (800a458 <__swhatbuf_r+0x4c>)
 800a442:	189b      	adds	r3, r3, r2
 800a444:	425a      	negs	r2, r3
 800a446:	4153      	adcs	r3, r2
 800a448:	602b      	str	r3, [r5, #0]
 800a44a:	e7ed      	b.n	800a428 <__swhatbuf_r+0x1c>
 800a44c:	2340      	movs	r3, #64	; 0x40
 800a44e:	2000      	movs	r0, #0
 800a450:	6023      	str	r3, [r4, #0]
 800a452:	b016      	add	sp, #88	; 0x58
 800a454:	bd70      	pop	{r4, r5, r6, pc}
 800a456:	46c0      	nop			; (mov r8, r8)
 800a458:	ffffe000 	.word	0xffffe000

0800a45c <__smakebuf_r>:
 800a45c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a45e:	2602      	movs	r6, #2
 800a460:	898b      	ldrh	r3, [r1, #12]
 800a462:	0005      	movs	r5, r0
 800a464:	000c      	movs	r4, r1
 800a466:	4233      	tst	r3, r6
 800a468:	d006      	beq.n	800a478 <__smakebuf_r+0x1c>
 800a46a:	0023      	movs	r3, r4
 800a46c:	3347      	adds	r3, #71	; 0x47
 800a46e:	6023      	str	r3, [r4, #0]
 800a470:	6123      	str	r3, [r4, #16]
 800a472:	2301      	movs	r3, #1
 800a474:	6163      	str	r3, [r4, #20]
 800a476:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a478:	ab01      	add	r3, sp, #4
 800a47a:	466a      	mov	r2, sp
 800a47c:	f7ff ffc6 	bl	800a40c <__swhatbuf_r>
 800a480:	9900      	ldr	r1, [sp, #0]
 800a482:	0007      	movs	r7, r0
 800a484:	0028      	movs	r0, r5
 800a486:	f7ff fa8d 	bl	80099a4 <_malloc_r>
 800a48a:	2800      	cmp	r0, #0
 800a48c:	d108      	bne.n	800a4a0 <__smakebuf_r+0x44>
 800a48e:	220c      	movs	r2, #12
 800a490:	5ea3      	ldrsh	r3, [r4, r2]
 800a492:	059a      	lsls	r2, r3, #22
 800a494:	d4ef      	bmi.n	800a476 <__smakebuf_r+0x1a>
 800a496:	2203      	movs	r2, #3
 800a498:	4393      	bics	r3, r2
 800a49a:	431e      	orrs	r6, r3
 800a49c:	81a6      	strh	r6, [r4, #12]
 800a49e:	e7e4      	b.n	800a46a <__smakebuf_r+0xe>
 800a4a0:	4b0f      	ldr	r3, [pc, #60]	; (800a4e0 <__smakebuf_r+0x84>)
 800a4a2:	62ab      	str	r3, [r5, #40]	; 0x28
 800a4a4:	2380      	movs	r3, #128	; 0x80
 800a4a6:	89a2      	ldrh	r2, [r4, #12]
 800a4a8:	6020      	str	r0, [r4, #0]
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	81a3      	strh	r3, [r4, #12]
 800a4ae:	9b00      	ldr	r3, [sp, #0]
 800a4b0:	6120      	str	r0, [r4, #16]
 800a4b2:	6163      	str	r3, [r4, #20]
 800a4b4:	9b01      	ldr	r3, [sp, #4]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00d      	beq.n	800a4d6 <__smakebuf_r+0x7a>
 800a4ba:	230e      	movs	r3, #14
 800a4bc:	5ee1      	ldrsh	r1, [r4, r3]
 800a4be:	0028      	movs	r0, r5
 800a4c0:	f000 f872 	bl	800a5a8 <_isatty_r>
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	d006      	beq.n	800a4d6 <__smakebuf_r+0x7a>
 800a4c8:	2203      	movs	r2, #3
 800a4ca:	89a3      	ldrh	r3, [r4, #12]
 800a4cc:	4393      	bics	r3, r2
 800a4ce:	001a      	movs	r2, r3
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	81a3      	strh	r3, [r4, #12]
 800a4d6:	89a0      	ldrh	r0, [r4, #12]
 800a4d8:	4338      	orrs	r0, r7
 800a4da:	81a0      	strh	r0, [r4, #12]
 800a4dc:	e7cb      	b.n	800a476 <__smakebuf_r+0x1a>
 800a4de:	46c0      	nop			; (mov r8, r8)
 800a4e0:	080088d1 	.word	0x080088d1

0800a4e4 <memmove>:
 800a4e4:	b510      	push	{r4, lr}
 800a4e6:	4288      	cmp	r0, r1
 800a4e8:	d902      	bls.n	800a4f0 <memmove+0xc>
 800a4ea:	188b      	adds	r3, r1, r2
 800a4ec:	4298      	cmp	r0, r3
 800a4ee:	d303      	bcc.n	800a4f8 <memmove+0x14>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	e007      	b.n	800a504 <memmove+0x20>
 800a4f4:	5c8b      	ldrb	r3, [r1, r2]
 800a4f6:	5483      	strb	r3, [r0, r2]
 800a4f8:	3a01      	subs	r2, #1
 800a4fa:	d2fb      	bcs.n	800a4f4 <memmove+0x10>
 800a4fc:	bd10      	pop	{r4, pc}
 800a4fe:	5ccc      	ldrb	r4, [r1, r3]
 800a500:	54c4      	strb	r4, [r0, r3]
 800a502:	3301      	adds	r3, #1
 800a504:	429a      	cmp	r2, r3
 800a506:	d1fa      	bne.n	800a4fe <memmove+0x1a>
 800a508:	e7f8      	b.n	800a4fc <memmove+0x18>

0800a50a <__malloc_lock>:
 800a50a:	4770      	bx	lr

0800a50c <__malloc_unlock>:
 800a50c:	4770      	bx	lr

0800a50e <_realloc_r>:
 800a50e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a510:	0007      	movs	r7, r0
 800a512:	000d      	movs	r5, r1
 800a514:	0016      	movs	r6, r2
 800a516:	2900      	cmp	r1, #0
 800a518:	d105      	bne.n	800a526 <_realloc_r+0x18>
 800a51a:	0011      	movs	r1, r2
 800a51c:	f7ff fa42 	bl	80099a4 <_malloc_r>
 800a520:	0004      	movs	r4, r0
 800a522:	0020      	movs	r0, r4
 800a524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a526:	2a00      	cmp	r2, #0
 800a528:	d103      	bne.n	800a532 <_realloc_r+0x24>
 800a52a:	f7ff f9f1 	bl	8009910 <_free_r>
 800a52e:	0034      	movs	r4, r6
 800a530:	e7f7      	b.n	800a522 <_realloc_r+0x14>
 800a532:	f000 f84b 	bl	800a5cc <_malloc_usable_size_r>
 800a536:	002c      	movs	r4, r5
 800a538:	42b0      	cmp	r0, r6
 800a53a:	d2f2      	bcs.n	800a522 <_realloc_r+0x14>
 800a53c:	0031      	movs	r1, r6
 800a53e:	0038      	movs	r0, r7
 800a540:	f7ff fa30 	bl	80099a4 <_malloc_r>
 800a544:	1e04      	subs	r4, r0, #0
 800a546:	d0ec      	beq.n	800a522 <_realloc_r+0x14>
 800a548:	0029      	movs	r1, r5
 800a54a:	0032      	movs	r2, r6
 800a54c:	f7fb fdaa 	bl	80060a4 <memcpy>
 800a550:	0029      	movs	r1, r5
 800a552:	0038      	movs	r0, r7
 800a554:	f7ff f9dc 	bl	8009910 <_free_r>
 800a558:	e7e3      	b.n	800a522 <_realloc_r+0x14>
	...

0800a55c <_read_r>:
 800a55c:	b570      	push	{r4, r5, r6, lr}
 800a55e:	0005      	movs	r5, r0
 800a560:	0008      	movs	r0, r1
 800a562:	0011      	movs	r1, r2
 800a564:	2200      	movs	r2, #0
 800a566:	4c06      	ldr	r4, [pc, #24]	; (800a580 <_read_r+0x24>)
 800a568:	6022      	str	r2, [r4, #0]
 800a56a:	001a      	movs	r2, r3
 800a56c:	f7f8 fd4c 	bl	8003008 <_read>
 800a570:	1c43      	adds	r3, r0, #1
 800a572:	d103      	bne.n	800a57c <_read_r+0x20>
 800a574:	6823      	ldr	r3, [r4, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d000      	beq.n	800a57c <_read_r+0x20>
 800a57a:	602b      	str	r3, [r5, #0]
 800a57c:	bd70      	pop	{r4, r5, r6, pc}
 800a57e:	46c0      	nop			; (mov r8, r8)
 800a580:	20000b38 	.word	0x20000b38

0800a584 <_fstat_r>:
 800a584:	2300      	movs	r3, #0
 800a586:	b570      	push	{r4, r5, r6, lr}
 800a588:	4c06      	ldr	r4, [pc, #24]	; (800a5a4 <_fstat_r+0x20>)
 800a58a:	0005      	movs	r5, r0
 800a58c:	0008      	movs	r0, r1
 800a58e:	0011      	movs	r1, r2
 800a590:	6023      	str	r3, [r4, #0]
 800a592:	f7f8 fd7c 	bl	800308e <_fstat>
 800a596:	1c43      	adds	r3, r0, #1
 800a598:	d103      	bne.n	800a5a2 <_fstat_r+0x1e>
 800a59a:	6823      	ldr	r3, [r4, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d000      	beq.n	800a5a2 <_fstat_r+0x1e>
 800a5a0:	602b      	str	r3, [r5, #0]
 800a5a2:	bd70      	pop	{r4, r5, r6, pc}
 800a5a4:	20000b38 	.word	0x20000b38

0800a5a8 <_isatty_r>:
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	b570      	push	{r4, r5, r6, lr}
 800a5ac:	4c06      	ldr	r4, [pc, #24]	; (800a5c8 <_isatty_r+0x20>)
 800a5ae:	0005      	movs	r5, r0
 800a5b0:	0008      	movs	r0, r1
 800a5b2:	6023      	str	r3, [r4, #0]
 800a5b4:	f7f8 fd79 	bl	80030aa <_isatty>
 800a5b8:	1c43      	adds	r3, r0, #1
 800a5ba:	d103      	bne.n	800a5c4 <_isatty_r+0x1c>
 800a5bc:	6823      	ldr	r3, [r4, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d000      	beq.n	800a5c4 <_isatty_r+0x1c>
 800a5c2:	602b      	str	r3, [r5, #0]
 800a5c4:	bd70      	pop	{r4, r5, r6, pc}
 800a5c6:	46c0      	nop			; (mov r8, r8)
 800a5c8:	20000b38 	.word	0x20000b38

0800a5cc <_malloc_usable_size_r>:
 800a5cc:	1f0b      	subs	r3, r1, #4
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	1f18      	subs	r0, r3, #4
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	da01      	bge.n	800a5da <_malloc_usable_size_r+0xe>
 800a5d6:	580b      	ldr	r3, [r1, r0]
 800a5d8:	18c0      	adds	r0, r0, r3
 800a5da:	4770      	bx	lr

0800a5dc <_init>:
 800a5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5de:	46c0      	nop			; (mov r8, r8)
 800a5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5e2:	bc08      	pop	{r3}
 800a5e4:	469e      	mov	lr, r3
 800a5e6:	4770      	bx	lr

0800a5e8 <_fini>:
 800a5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ea:	46c0      	nop			; (mov r8, r8)
 800a5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ee:	bc08      	pop	{r3}
 800a5f0:	469e      	mov	lr, r3
 800a5f2:	4770      	bx	lr
