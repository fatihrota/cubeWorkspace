
STM32L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fe8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080030a8  080030a8  000130a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003114  08003114  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003114  08003114  00013114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800311c  0800311c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800311c  0800311c  0001311c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003120  08003120  00013120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  2000000c  08003130  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08003130  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000075a8  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000169d  00000000  00000000  000275dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007c0  00000000  00000000  00028c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000728  00000000  00000000  00029440  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000137dd  00000000  00000000  00029b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007086  00000000  00000000  0003d345  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078f76  00000000  00000000  000443cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bd341  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001aa8  00000000  00000000  000bd3bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003090 	.word	0x08003090

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003090 	.word	0x08003090

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4343      	muls	r3, r0
 8000298:	4351      	muls	r1, r2
 800029a:	0c25      	lsrs	r5, r4, #16
 800029c:	0436      	lsls	r6, r6, #16
 800029e:	4465      	add	r5, ip
 80002a0:	0c36      	lsrs	r6, r6, #16
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	195b      	adds	r3, r3, r5
 80002a8:	1859      	adds	r1, r3, r1
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	464f      	mov	r7, r9
 80002b8:	4646      	mov	r6, r8
 80002ba:	46d6      	mov	lr, sl
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	0004      	movs	r4, r0
 80002c0:	b082      	sub	sp, #8
 80002c2:	000d      	movs	r5, r1
 80002c4:	4691      	mov	r9, r2
 80002c6:	4698      	mov	r8, r3
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d82f      	bhi.n	800032c <__udivmoddi4+0x78>
 80002cc:	d02c      	beq.n	8000328 <__udivmoddi4+0x74>
 80002ce:	4641      	mov	r1, r8
 80002d0:	4648      	mov	r0, r9
 80002d2:	f000 f8b1 	bl	8000438 <__clzdi2>
 80002d6:	0029      	movs	r1, r5
 80002d8:	0006      	movs	r6, r0
 80002da:	0020      	movs	r0, r4
 80002dc:	f000 f8ac 	bl	8000438 <__clzdi2>
 80002e0:	1a33      	subs	r3, r6, r0
 80002e2:	469c      	mov	ip, r3
 80002e4:	3b20      	subs	r3, #32
 80002e6:	469a      	mov	sl, r3
 80002e8:	d500      	bpl.n	80002ec <__udivmoddi4+0x38>
 80002ea:	e076      	b.n	80003da <__udivmoddi4+0x126>
 80002ec:	464b      	mov	r3, r9
 80002ee:	4652      	mov	r2, sl
 80002f0:	4093      	lsls	r3, r2
 80002f2:	001f      	movs	r7, r3
 80002f4:	464b      	mov	r3, r9
 80002f6:	4662      	mov	r2, ip
 80002f8:	4093      	lsls	r3, r2
 80002fa:	001e      	movs	r6, r3
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d828      	bhi.n	8000352 <__udivmoddi4+0x9e>
 8000300:	d025      	beq.n	800034e <__udivmoddi4+0x9a>
 8000302:	4653      	mov	r3, sl
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5a>
 800030c:	e07b      	b.n	8000406 <__udivmoddi4+0x152>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	4652      	mov	r2, sl
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4662      	mov	r2, ip
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e018      	b.n	800035a <__udivmoddi4+0xa6>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9d0      	bls.n	80002ce <__udivmoddi4+0x1a>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8a>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b002      	add	sp, #8
 8000344:	bc1c      	pop	{r2, r3, r4}
 8000346:	4690      	mov	r8, r2
 8000348:	4699      	mov	r9, r3
 800034a:	46a2      	mov	sl, r4
 800034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034e:	42a3      	cmp	r3, r4
 8000350:	d9d7      	bls.n	8000302 <__udivmoddi4+0x4e>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	4663      	mov	r3, ip
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0e9      	beq.n	8000334 <__udivmoddi4+0x80>
 8000360:	07fb      	lsls	r3, r7, #31
 8000362:	4698      	mov	r8, r3
 8000364:	4641      	mov	r1, r8
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	430a      	orrs	r2, r1
 800036a:	087b      	lsrs	r3, r7, #1
 800036c:	4666      	mov	r6, ip
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	9800      	ldr	r0, [sp, #0]
 800039e:	9901      	ldr	r1, [sp, #4]
 80003a0:	4653      	mov	r3, sl
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db23      	blt.n	80003f2 <__udivmoddi4+0x13e>
 80003aa:	002b      	movs	r3, r5
 80003ac:	4652      	mov	r2, sl
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4664      	mov	r4, ip
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2d      	blt.n	800041c <__udivmoddi4+0x168>
 80003c0:	0026      	movs	r6, r4
 80003c2:	4657      	mov	r7, sl
 80003c4:	40be      	lsls	r6, r7
 80003c6:	0033      	movs	r3, r6
 80003c8:	0026      	movs	r6, r4
 80003ca:	4667      	mov	r7, ip
 80003cc:	40be      	lsls	r6, r7
 80003ce:	0032      	movs	r2, r6
 80003d0:	1a80      	subs	r0, r0, r2
 80003d2:	4199      	sbcs	r1, r3
 80003d4:	9000      	str	r0, [sp, #0]
 80003d6:	9101      	str	r1, [sp, #4]
 80003d8:	e7ac      	b.n	8000334 <__udivmoddi4+0x80>
 80003da:	4662      	mov	r2, ip
 80003dc:	2320      	movs	r3, #32
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	40da      	lsrs	r2, r3
 80003e4:	4661      	mov	r1, ip
 80003e6:	0013      	movs	r3, r2
 80003e8:	4642      	mov	r2, r8
 80003ea:	408a      	lsls	r2, r1
 80003ec:	0017      	movs	r7, r2
 80003ee:	431f      	orrs	r7, r3
 80003f0:	e780      	b.n	80002f4 <__udivmoddi4+0x40>
 80003f2:	4662      	mov	r2, ip
 80003f4:	2320      	movs	r3, #32
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	002a      	movs	r2, r5
 80003fa:	4666      	mov	r6, ip
 80003fc:	409a      	lsls	r2, r3
 80003fe:	0023      	movs	r3, r4
 8000400:	40f3      	lsrs	r3, r6
 8000402:	4313      	orrs	r3, r2
 8000404:	e7d4      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000406:	4662      	mov	r2, ip
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e780      	b.n	800031e <__udivmoddi4+0x6a>
 800041c:	2320      	movs	r3, #32
 800041e:	4662      	mov	r2, ip
 8000420:	0026      	movs	r6, r4
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	40de      	lsrs	r6, r3
 8000426:	002f      	movs	r7, r5
 8000428:	46b0      	mov	r8, r6
 800042a:	4666      	mov	r6, ip
 800042c:	40b7      	lsls	r7, r6
 800042e:	4646      	mov	r6, r8
 8000430:	003b      	movs	r3, r7
 8000432:	4333      	orrs	r3, r6
 8000434:	e7c8      	b.n	80003c8 <__udivmoddi4+0x114>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__clzdi2>:
 8000438:	b510      	push	{r4, lr}
 800043a:	2900      	cmp	r1, #0
 800043c:	d103      	bne.n	8000446 <__clzdi2+0xe>
 800043e:	f000 f807 	bl	8000450 <__clzsi2>
 8000442:	3020      	adds	r0, #32
 8000444:	e002      	b.n	800044c <__clzdi2+0x14>
 8000446:	1c08      	adds	r0, r1, #0
 8000448:	f000 f802 	bl	8000450 <__clzsi2>
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__clzsi2>:
 8000450:	211c      	movs	r1, #28
 8000452:	2301      	movs	r3, #1
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	4298      	cmp	r0, r3
 8000458:	d301      	bcc.n	800045e <__clzsi2+0xe>
 800045a:	0c00      	lsrs	r0, r0, #16
 800045c:	3910      	subs	r1, #16
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	4298      	cmp	r0, r3
 8000462:	d301      	bcc.n	8000468 <__clzsi2+0x18>
 8000464:	0a00      	lsrs	r0, r0, #8
 8000466:	3908      	subs	r1, #8
 8000468:	091b      	lsrs	r3, r3, #4
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0x22>
 800046e:	0900      	lsrs	r0, r0, #4
 8000470:	3904      	subs	r1, #4
 8000472:	a202      	add	r2, pc, #8	; (adr r2, 800047c <__clzsi2+0x2c>)
 8000474:	5c10      	ldrb	r0, [r2, r0]
 8000476:	1840      	adds	r0, r0, r1
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	02020304 	.word	0x02020304
 8000480:	01010101 	.word	0x01010101
	...

0800048c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000490:	f000 fad2 	bl	8000a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000494:	f000 f80a 	bl	80004ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000498:	f000 f904 	bl	80006a4 <MX_GPIO_Init>
  MX_DMA_Init();
 800049c:	f000 f8dc 	bl	8000658 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004a0:	f000 f876 	bl	8000590 <MX_USART1_UART_Init>
  MX_USART5_UART_Init();
 80004a4:	f000 f8a8 	bl	80005f8 <MX_USART5_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <main+0x1c>
	...

080004ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b09f      	sub	sp, #124	; 0x7c
 80004b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b2:	2440      	movs	r4, #64	; 0x40
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	0018      	movs	r0, r3
 80004b8:	2338      	movs	r3, #56	; 0x38
 80004ba:	001a      	movs	r2, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	f002 fddf 	bl	8003080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c2:	232c      	movs	r3, #44	; 0x2c
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	0018      	movs	r0, r3
 80004c8:	2314      	movs	r3, #20
 80004ca:	001a      	movs	r2, r3
 80004cc:	2100      	movs	r1, #0
 80004ce:	f002 fdd7 	bl	8003080 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	0018      	movs	r0, r3
 80004d6:	2328      	movs	r3, #40	; 0x28
 80004d8:	001a      	movs	r2, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	f002 fdd0 	bl	8003080 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004e0:	4b29      	ldr	r3, [pc, #164]	; (8000588 <SystemClock_Config+0xdc>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a29      	ldr	r2, [pc, #164]	; (800058c <SystemClock_Config+0xe0>)
 80004e6:	401a      	ands	r2, r3
 80004e8:	4b27      	ldr	r3, [pc, #156]	; (8000588 <SystemClock_Config+0xdc>)
 80004ea:	2180      	movs	r1, #128	; 0x80
 80004ec:	0109      	lsls	r1, r1, #4
 80004ee:	430a      	orrs	r2, r1
 80004f0:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f2:	0021      	movs	r1, r4
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2202      	movs	r2, #2
 80004f8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2201      	movs	r2, #1
 80004fe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2210      	movs	r2, #16
 8000504:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2202      	movs	r2, #2
 800050a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2200      	movs	r2, #0
 8000510:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2280      	movs	r2, #128	; 0x80
 8000516:	02d2      	lsls	r2, r2, #11
 8000518:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2280      	movs	r2, #128	; 0x80
 800051e:	03d2      	lsls	r2, r2, #15
 8000520:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000522:	187b      	adds	r3, r7, r1
 8000524:	0018      	movs	r0, r3
 8000526:	f000 ff01 	bl	800132c <HAL_RCC_OscConfig>
 800052a:	1e03      	subs	r3, r0, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800052e:	f000 f8db 	bl	80006e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000532:	212c      	movs	r1, #44	; 0x2c
 8000534:	187b      	adds	r3, r7, r1
 8000536:	220f      	movs	r2, #15
 8000538:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2203      	movs	r2, #3
 800053e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2200      	movs	r2, #0
 800054a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2200      	movs	r2, #0
 8000550:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2101      	movs	r1, #1
 8000556:	0018      	movs	r0, r3
 8000558:	f001 fabe 	bl	8001ad8 <HAL_RCC_ClockConfig>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000560:	f000 f8c2 	bl	80006e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2201      	movs	r2, #1
 8000568:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	2200      	movs	r2, #0
 800056e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	0018      	movs	r0, r3
 8000574:	f001 fcd0 	bl	8001f18 <HAL_RCCEx_PeriphCLKConfig>
 8000578:	1e03      	subs	r3, r0, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800057c:	f000 f8b4 	bl	80006e8 <Error_Handler>
  }
}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	b01f      	add	sp, #124	; 0x7c
 8000586:	bd90      	pop	{r4, r7, pc}
 8000588:	40007000 	.word	0x40007000
 800058c:	ffffe7ff 	.word	0xffffe7ff

08000590 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000594:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <MX_USART1_UART_Init+0x60>)
 8000596:	4a17      	ldr	r2, [pc, #92]	; (80005f4 <MX_USART1_UART_Init+0x64>)
 8000598:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <MX_USART1_UART_Init+0x60>)
 800059c:	22e1      	movs	r2, #225	; 0xe1
 800059e:	0252      	lsls	r2, r2, #9
 80005a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005a2:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <MX_USART1_UART_Init+0x60>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <MX_USART1_UART_Init+0x60>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <MX_USART1_UART_Init+0x60>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <MX_USART1_UART_Init+0x60>)
 80005b6:	220c      	movs	r2, #12
 80005b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ba:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <MX_USART1_UART_Init+0x60>)
 80005bc:	2200      	movs	r2, #0
 80005be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <MX_USART1_UART_Init+0x60>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005c6:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <MX_USART1_UART_Init+0x60>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <MX_USART1_UART_Init+0x60>)
 80005ce:	2208      	movs	r2, #8
 80005d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <MX_USART1_UART_Init+0x60>)
 80005d4:	2280      	movs	r2, #128	; 0x80
 80005d6:	0212      	lsls	r2, r2, #8
 80005d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <MX_USART1_UART_Init+0x60>)
 80005dc:	0018      	movs	r0, r3
 80005de:	f001 fe0f 	bl	8002200 <HAL_UART_Init>
 80005e2:	1e03      	subs	r3, r0, #0
 80005e4:	d001      	beq.n	80005ea <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80005e6:	f000 f87f 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000184 	.word	0x20000184
 80005f4:	40013800 	.word	0x40013800

080005f8 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <MX_USART5_UART_Init+0x58>)
 80005fe:	4a15      	ldr	r2, [pc, #84]	; (8000654 <MX_USART5_UART_Init+0x5c>)
 8000600:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_USART5_UART_Init+0x58>)
 8000604:	22e1      	movs	r2, #225	; 0xe1
 8000606:	0252      	lsls	r2, r2, #9
 8000608:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_USART5_UART_Init+0x58>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_USART5_UART_Init+0x58>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_USART5_UART_Init+0x58>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_USART5_UART_Init+0x58>)
 800061e:	220c      	movs	r2, #12
 8000620:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <MX_USART5_UART_Init+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_USART5_UART_Init+0x58>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_USART5_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_USART5_UART_Init+0x58>)
 8000636:	2200      	movs	r2, #0
 8000638:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <MX_USART5_UART_Init+0x58>)
 800063c:	0018      	movs	r0, r3
 800063e:	f001 fddf 	bl	8002200 <HAL_UART_Init>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 8000646:	f000 f84f 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200000b8 	.word	0x200000b8
 8000654:	40005000 	.word	0x40005000

08000658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_DMA_Init+0x48>)
 8000660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_DMA_Init+0x48>)
 8000664:	2101      	movs	r1, #1
 8000666:	430a      	orrs	r2, r1
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <MX_DMA_Init+0x48>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	2201      	movs	r2, #1
 8000670:	4013      	ands	r3, r2
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	200a      	movs	r0, #10
 800067c:	f000 faf8 	bl	8000c70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000680:	200a      	movs	r0, #10
 8000682:	f000 fb0a 	bl	8000c9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2100      	movs	r1, #0
 800068a:	200b      	movs	r0, #11
 800068c:	f000 faf0 	bl	8000c70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000690:	200b      	movs	r0, #11
 8000692:	f000 fb02 	bl	8000c9a <HAL_NVIC_EnableIRQ>

}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	b002      	add	sp, #8
 800069c:	bd80      	pop	{r7, pc}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	40021000 	.word	0x40021000

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_GPIO_Init+0x40>)
 80006ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <MX_GPIO_Init+0x40>)
 80006b0:	2101      	movs	r1, #1
 80006b2:	430a      	orrs	r2, r1
 80006b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_GPIO_Init+0x40>)
 80006b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ba:	2201      	movs	r2, #1
 80006bc:	4013      	ands	r3, r2
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_GPIO_Init+0x40>)
 80006c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <MX_GPIO_Init+0x40>)
 80006c8:	2102      	movs	r1, #2
 80006ca:	430a      	orrs	r2, r1
 80006cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ce:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <MX_GPIO_Init+0x40>)
 80006d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d2:	2202      	movs	r2, #2
 80006d4:	4013      	ands	r3, r2
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	b002      	add	sp, #8
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	40021000 	.word	0x40021000

080006e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ee:	e7fe      	b.n	80006ee <Error_Handler+0x6>

080006f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <HAL_MspInit+0x24>)
 80006f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_MspInit+0x24>)
 80006fa:	2101      	movs	r1, #1
 80006fc:	430a      	orrs	r2, r1
 80006fe:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <HAL_MspInit+0x24>)
 8000702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000704:	4b03      	ldr	r3, [pc, #12]	; (8000714 <HAL_MspInit+0x24>)
 8000706:	2180      	movs	r1, #128	; 0x80
 8000708:	0549      	lsls	r1, r1, #21
 800070a:	430a      	orrs	r2, r1
 800070c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000

08000718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	2314      	movs	r3, #20
 8000722:	18fb      	adds	r3, r7, r3
 8000724:	0018      	movs	r0, r3
 8000726:	2314      	movs	r3, #20
 8000728:	001a      	movs	r2, r3
 800072a:	2100      	movs	r1, #0
 800072c:	f002 fca8 	bl	8003080 <memset>
  if(huart->Instance==USART1)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a77      	ldr	r2, [pc, #476]	; (8000914 <HAL_UART_MspInit+0x1fc>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d000      	beq.n	800073c <HAL_UART_MspInit+0x24>
 800073a:	e087      	b.n	800084c <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800073c:	4b76      	ldr	r3, [pc, #472]	; (8000918 <HAL_UART_MspInit+0x200>)
 800073e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000740:	4b75      	ldr	r3, [pc, #468]	; (8000918 <HAL_UART_MspInit+0x200>)
 8000742:	2180      	movs	r1, #128	; 0x80
 8000744:	01c9      	lsls	r1, r1, #7
 8000746:	430a      	orrs	r2, r1
 8000748:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b73      	ldr	r3, [pc, #460]	; (8000918 <HAL_UART_MspInit+0x200>)
 800074c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800074e:	4b72      	ldr	r3, [pc, #456]	; (8000918 <HAL_UART_MspInit+0x200>)
 8000750:	2101      	movs	r1, #1
 8000752:	430a      	orrs	r2, r1
 8000754:	62da      	str	r2, [r3, #44]	; 0x2c
 8000756:	4b70      	ldr	r3, [pc, #448]	; (8000918 <HAL_UART_MspInit+0x200>)
 8000758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800075a:	2201      	movs	r2, #1
 800075c:	4013      	ands	r3, r2
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000762:	2114      	movs	r1, #20
 8000764:	187b      	adds	r3, r7, r1
 8000766:	22c0      	movs	r2, #192	; 0xc0
 8000768:	00d2      	lsls	r2, r2, #3
 800076a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2202      	movs	r2, #2
 8000770:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2203      	movs	r2, #3
 800077c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2204      	movs	r2, #4
 8000782:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	187a      	adds	r2, r7, r1
 8000786:	23a0      	movs	r3, #160	; 0xa0
 8000788:	05db      	lsls	r3, r3, #23
 800078a:	0011      	movs	r1, r2
 800078c:	0018      	movs	r0, r3
 800078e:	f000 fc4f 	bl	8001030 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000792:	4b62      	ldr	r3, [pc, #392]	; (800091c <HAL_UART_MspInit+0x204>)
 8000794:	4a62      	ldr	r2, [pc, #392]	; (8000920 <HAL_UART_MspInit+0x208>)
 8000796:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 8000798:	4b60      	ldr	r3, [pc, #384]	; (800091c <HAL_UART_MspInit+0x204>)
 800079a:	2203      	movs	r2, #3
 800079c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800079e:	4b5f      	ldr	r3, [pc, #380]	; (800091c <HAL_UART_MspInit+0x204>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007a4:	4b5d      	ldr	r3, [pc, #372]	; (800091c <HAL_UART_MspInit+0x204>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007aa:	4b5c      	ldr	r3, [pc, #368]	; (800091c <HAL_UART_MspInit+0x204>)
 80007ac:	2280      	movs	r2, #128	; 0x80
 80007ae:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007b0:	4b5a      	ldr	r3, [pc, #360]	; (800091c <HAL_UART_MspInit+0x204>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007b6:	4b59      	ldr	r3, [pc, #356]	; (800091c <HAL_UART_MspInit+0x204>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80007bc:	4b57      	ldr	r3, [pc, #348]	; (800091c <HAL_UART_MspInit+0x204>)
 80007be:	2220      	movs	r2, #32
 80007c0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80007c2:	4b56      	ldr	r3, [pc, #344]	; (800091c <HAL_UART_MspInit+0x204>)
 80007c4:	22c0      	movs	r2, #192	; 0xc0
 80007c6:	0192      	lsls	r2, r2, #6
 80007c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80007ca:	4b54      	ldr	r3, [pc, #336]	; (800091c <HAL_UART_MspInit+0x204>)
 80007cc:	0018      	movs	r0, r3
 80007ce:	f000 fa81 	bl	8000cd4 <HAL_DMA_Init>
 80007d2:	1e03      	subs	r3, r0, #0
 80007d4:	d001      	beq.n	80007da <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80007d6:	f7ff ff87 	bl	80006e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a4f      	ldr	r2, [pc, #316]	; (800091c <HAL_UART_MspInit+0x204>)
 80007de:	671a      	str	r2, [r3, #112]	; 0x70
 80007e0:	4b4e      	ldr	r3, [pc, #312]	; (800091c <HAL_UART_MspInit+0x204>)
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80007e6:	4b4f      	ldr	r3, [pc, #316]	; (8000924 <HAL_UART_MspInit+0x20c>)
 80007e8:	4a4f      	ldr	r2, [pc, #316]	; (8000928 <HAL_UART_MspInit+0x210>)
 80007ea:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 80007ec:	4b4d      	ldr	r3, [pc, #308]	; (8000924 <HAL_UART_MspInit+0x20c>)
 80007ee:	2203      	movs	r2, #3
 80007f0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007f2:	4b4c      	ldr	r3, [pc, #304]	; (8000924 <HAL_UART_MspInit+0x20c>)
 80007f4:	2210      	movs	r2, #16
 80007f6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f8:	4b4a      	ldr	r3, [pc, #296]	; (8000924 <HAL_UART_MspInit+0x20c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007fe:	4b49      	ldr	r3, [pc, #292]	; (8000924 <HAL_UART_MspInit+0x20c>)
 8000800:	2280      	movs	r2, #128	; 0x80
 8000802:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000804:	4b47      	ldr	r3, [pc, #284]	; (8000924 <HAL_UART_MspInit+0x20c>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800080a:	4b46      	ldr	r3, [pc, #280]	; (8000924 <HAL_UART_MspInit+0x20c>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000810:	4b44      	ldr	r3, [pc, #272]	; (8000924 <HAL_UART_MspInit+0x20c>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000816:	4b43      	ldr	r3, [pc, #268]	; (8000924 <HAL_UART_MspInit+0x20c>)
 8000818:	2280      	movs	r2, #128	; 0x80
 800081a:	0192      	lsls	r2, r2, #6
 800081c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800081e:	4b41      	ldr	r3, [pc, #260]	; (8000924 <HAL_UART_MspInit+0x20c>)
 8000820:	0018      	movs	r0, r3
 8000822:	f000 fa57 	bl	8000cd4 <HAL_DMA_Init>
 8000826:	1e03      	subs	r3, r0, #0
 8000828:	d001      	beq.n	800082e <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 800082a:	f7ff ff5d 	bl	80006e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4a3c      	ldr	r2, [pc, #240]	; (8000924 <HAL_UART_MspInit+0x20c>)
 8000832:	66da      	str	r2, [r3, #108]	; 0x6c
 8000834:	4b3b      	ldr	r3, [pc, #236]	; (8000924 <HAL_UART_MspInit+0x20c>)
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	201b      	movs	r0, #27
 8000840:	f000 fa16 	bl	8000c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000844:	201b      	movs	r0, #27
 8000846:	f000 fa28 	bl	8000c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 800084a:	e05f      	b.n	800090c <HAL_UART_MspInit+0x1f4>
  else if(huart->Instance==USART5)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a36      	ldr	r2, [pc, #216]	; (800092c <HAL_UART_MspInit+0x214>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d15a      	bne.n	800090c <HAL_UART_MspInit+0x1f4>
    __HAL_RCC_USART5_CLK_ENABLE();
 8000856:	4b30      	ldr	r3, [pc, #192]	; (8000918 <HAL_UART_MspInit+0x200>)
 8000858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800085a:	4b2f      	ldr	r3, [pc, #188]	; (8000918 <HAL_UART_MspInit+0x200>)
 800085c:	2180      	movs	r1, #128	; 0x80
 800085e:	0349      	lsls	r1, r1, #13
 8000860:	430a      	orrs	r2, r1
 8000862:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000864:	4b2c      	ldr	r3, [pc, #176]	; (8000918 <HAL_UART_MspInit+0x200>)
 8000866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000868:	4b2b      	ldr	r3, [pc, #172]	; (8000918 <HAL_UART_MspInit+0x200>)
 800086a:	2102      	movs	r1, #2
 800086c:	430a      	orrs	r2, r1
 800086e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000870:	4b29      	ldr	r3, [pc, #164]	; (8000918 <HAL_UART_MspInit+0x200>)
 8000872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000874:	2202      	movs	r2, #2
 8000876:	4013      	ands	r3, r2
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800087c:	2114      	movs	r1, #20
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2218      	movs	r2, #24
 8000882:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2202      	movs	r2, #2
 8000888:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2203      	movs	r2, #3
 8000894:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2206      	movs	r2, #6
 800089a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089c:	187b      	adds	r3, r7, r1
 800089e:	4a24      	ldr	r2, [pc, #144]	; (8000930 <HAL_UART_MspInit+0x218>)
 80008a0:	0019      	movs	r1, r3
 80008a2:	0010      	movs	r0, r2
 80008a4:	f000 fbc4 	bl	8001030 <HAL_GPIO_Init>
    hdma_usart5_rx.Instance = DMA1_Channel6;
 80008a8:	4b22      	ldr	r3, [pc, #136]	; (8000934 <HAL_UART_MspInit+0x21c>)
 80008aa:	4a23      	ldr	r2, [pc, #140]	; (8000938 <HAL_UART_MspInit+0x220>)
 80008ac:	601a      	str	r2, [r3, #0]
    hdma_usart5_rx.Init.Request = DMA_REQUEST_13;
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <HAL_UART_MspInit+0x21c>)
 80008b0:	220d      	movs	r2, #13
 80008b2:	605a      	str	r2, [r3, #4]
    hdma_usart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008b4:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <HAL_UART_MspInit+0x21c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
    hdma_usart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ba:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <HAL_UART_MspInit+0x21c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
    hdma_usart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008c0:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <HAL_UART_MspInit+0x21c>)
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	611a      	str	r2, [r3, #16]
    hdma_usart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008c6:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <HAL_UART_MspInit+0x21c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	615a      	str	r2, [r3, #20]
    hdma_usart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008cc:	4b19      	ldr	r3, [pc, #100]	; (8000934 <HAL_UART_MspInit+0x21c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
    hdma_usart5_rx.Init.Mode = DMA_CIRCULAR;
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <HAL_UART_MspInit+0x21c>)
 80008d4:	2220      	movs	r2, #32
 80008d6:	61da      	str	r2, [r3, #28]
    hdma_usart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80008d8:	4b16      	ldr	r3, [pc, #88]	; (8000934 <HAL_UART_MspInit+0x21c>)
 80008da:	2280      	movs	r2, #128	; 0x80
 80008dc:	0192      	lsls	r2, r2, #6
 80008de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart5_rx) != HAL_OK)
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <HAL_UART_MspInit+0x21c>)
 80008e2:	0018      	movs	r0, r3
 80008e4:	f000 f9f6 	bl	8000cd4 <HAL_DMA_Init>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d001      	beq.n	80008f0 <HAL_UART_MspInit+0x1d8>
      Error_Handler();
 80008ec:	f7ff fefc 	bl	80006e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart5_rx);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a10      	ldr	r2, [pc, #64]	; (8000934 <HAL_UART_MspInit+0x21c>)
 80008f4:	671a      	str	r2, [r3, #112]	; 0x70
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <HAL_UART_MspInit+0x21c>)
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2100      	movs	r1, #0
 8000900:	200e      	movs	r0, #14
 8000902:	f000 f9b5 	bl	8000c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8000906:	200e      	movs	r0, #14
 8000908:	f000 f9c7 	bl	8000c9a <HAL_NVIC_EnableIRQ>
}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	b00a      	add	sp, #40	; 0x28
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40013800 	.word	0x40013800
 8000918:	40021000 	.word	0x40021000
 800091c:	2000013c 	.word	0x2000013c
 8000920:	40020030 	.word	0x40020030
 8000924:	20000070 	.word	0x20000070
 8000928:	4002001c 	.word	0x4002001c
 800092c:	40005000 	.word	0x40005000
 8000930:	50000400 	.word	0x50000400
 8000934:	20000028 	.word	0x20000028
 8000938:	4002006c 	.word	0x4002006c

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <NMI_Handler+0x4>

08000942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <HardFault_Handler+0x4>

08000948 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000960:	f000 f8be 	bl	8000ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000972:	0018      	movs	r0, r3
 8000974:	f000 faae 	bl	8000ed4 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <DMA1_Channel2_3_IRQHandler+0x20>)
 800097a:	0018      	movs	r0, r3
 800097c:	f000 faaa 	bl	8000ed4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	20000070 	.word	0x20000070
 800098c:	2000013c 	.word	0x2000013c

08000990 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart5_rx);
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8000996:	0018      	movs	r0, r3
 8000998:	f000 fa9c 	bl	8000ed4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	20000028 	.word	0x20000028

080009a8 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80009ac:	4b03      	ldr	r3, [pc, #12]	; (80009bc <USART4_5_IRQHandler+0x14>)
 80009ae:	0018      	movs	r0, r3
 80009b0:	f001 fc7a 	bl	80022a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	200000b8 	.word	0x200000b8

080009c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009c4:	4b03      	ldr	r3, [pc, #12]	; (80009d4 <USART1_IRQHandler+0x14>)
 80009c6:	0018      	movs	r0, r3
 80009c8:	f001 fc6e 	bl	80022a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	20000184 	.word	0x20000184

080009d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80009e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ea:	490e      	ldr	r1, [pc, #56]	; (8000a24 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <LoopForever+0xe>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a00:	4c0b      	ldr	r4, [pc, #44]	; (8000a30 <LoopForever+0x16>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a0e:	f7ff ffe3 	bl	80009d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a12:	f002 fb11 	bl	8003038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a16:	f7ff fd39 	bl	800048c <main>

08000a1a <LoopForever>:

LoopForever:
    b LoopForever
 8000a1a:	e7fe      	b.n	8000a1a <LoopForever>
   ldr   r0, =_estack
 8000a1c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a28:	08003124 	.word	0x08003124
  ldr r2, =_sbss
 8000a2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a30:	2000020c 	.word	0x2000020c

08000a34 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC1_COMP_IRQHandler>
	...

08000a38 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a44:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <HAL_Init+0x3c>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <HAL_Init+0x3c>)
 8000a4a:	2140      	movs	r1, #64	; 0x40
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a50:	2000      	movs	r0, #0
 8000a52:	f000 f811 	bl	8000a78 <HAL_InitTick>
 8000a56:	1e03      	subs	r3, r0, #0
 8000a58:	d003      	beq.n	8000a62 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	701a      	strb	r2, [r3, #0]
 8000a60:	e001      	b.n	8000a66 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a62:	f7ff fe45 	bl	80006f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
}
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b002      	add	sp, #8
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	40022000 	.word	0x40022000

08000a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <HAL_InitTick+0x5c>)
 8000a82:	681c      	ldr	r4, [r3, #0]
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <HAL_InitTick+0x60>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	0019      	movs	r1, r3
 8000a8a:	23fa      	movs	r3, #250	; 0xfa
 8000a8c:	0098      	lsls	r0, r3, #2
 8000a8e:	f7ff fb3b 	bl	8000108 <__udivsi3>
 8000a92:	0003      	movs	r3, r0
 8000a94:	0019      	movs	r1, r3
 8000a96:	0020      	movs	r0, r4
 8000a98:	f7ff fb36 	bl	8000108 <__udivsi3>
 8000a9c:	0003      	movs	r3, r0
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 f90b 	bl	8000cba <HAL_SYSTICK_Config>
 8000aa4:	1e03      	subs	r3, r0, #0
 8000aa6:	d001      	beq.n	8000aac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e00f      	b.n	8000acc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b03      	cmp	r3, #3
 8000ab0:	d80b      	bhi.n	8000aca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	425b      	negs	r3, r3
 8000ab8:	2200      	movs	r2, #0
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 f8d8 	bl	8000c70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_InitTick+0x64>)
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e000      	b.n	8000acc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	0018      	movs	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b003      	add	sp, #12
 8000ad2:	bd90      	pop	{r4, r7, pc}
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	20000004 	.word	0x20000004

08000ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_IncTick+0x1c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	001a      	movs	r2, r3
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_IncTick+0x20>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	18d2      	adds	r2, r2, r3
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_IncTick+0x20>)
 8000af2:	601a      	str	r2, [r3, #0]
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	20000008 	.word	0x20000008
 8000b00:	20000208 	.word	0x20000208

08000b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b02      	ldr	r3, [pc, #8]	; (8000b14 <HAL_GetTick+0x10>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	20000208 	.word	0x20000208

08000b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	0002      	movs	r2, r0
 8000b20:	1dfb      	adds	r3, r7, #7
 8000b22:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b24:	1dfb      	adds	r3, r7, #7
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b7f      	cmp	r3, #127	; 0x7f
 8000b2a:	d809      	bhi.n	8000b40 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	001a      	movs	r2, r3
 8000b32:	231f      	movs	r3, #31
 8000b34:	401a      	ands	r2, r3
 8000b36:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <__NVIC_EnableIRQ+0x30>)
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4091      	lsls	r1, r2
 8000b3c:	000a      	movs	r2, r1
 8000b3e:	601a      	str	r2, [r3, #0]
  }
}
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b002      	add	sp, #8
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	e000e100 	.word	0xe000e100

08000b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	0002      	movs	r2, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	1dfb      	adds	r3, r7, #7
 8000b58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b60:	d828      	bhi.n	8000bb4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b62:	4a2f      	ldr	r2, [pc, #188]	; (8000c20 <__NVIC_SetPriority+0xd4>)
 8000b64:	1dfb      	adds	r3, r7, #7
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b25b      	sxtb	r3, r3
 8000b6a:	089b      	lsrs	r3, r3, #2
 8000b6c:	33c0      	adds	r3, #192	; 0xc0
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	589b      	ldr	r3, [r3, r2]
 8000b72:	1dfa      	adds	r2, r7, #7
 8000b74:	7812      	ldrb	r2, [r2, #0]
 8000b76:	0011      	movs	r1, r2
 8000b78:	2203      	movs	r2, #3
 8000b7a:	400a      	ands	r2, r1
 8000b7c:	00d2      	lsls	r2, r2, #3
 8000b7e:	21ff      	movs	r1, #255	; 0xff
 8000b80:	4091      	lsls	r1, r2
 8000b82:	000a      	movs	r2, r1
 8000b84:	43d2      	mvns	r2, r2
 8000b86:	401a      	ands	r2, r3
 8000b88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	019b      	lsls	r3, r3, #6
 8000b8e:	22ff      	movs	r2, #255	; 0xff
 8000b90:	401a      	ands	r2, r3
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	0018      	movs	r0, r3
 8000b98:	2303      	movs	r3, #3
 8000b9a:	4003      	ands	r3, r0
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba0:	481f      	ldr	r0, [pc, #124]	; (8000c20 <__NVIC_SetPriority+0xd4>)
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	b25b      	sxtb	r3, r3
 8000ba8:	089b      	lsrs	r3, r3, #2
 8000baa:	430a      	orrs	r2, r1
 8000bac:	33c0      	adds	r3, #192	; 0xc0
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bb2:	e031      	b.n	8000c18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb4:	4a1b      	ldr	r2, [pc, #108]	; (8000c24 <__NVIC_SetPriority+0xd8>)
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	0019      	movs	r1, r3
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	400b      	ands	r3, r1
 8000bc0:	3b08      	subs	r3, #8
 8000bc2:	089b      	lsrs	r3, r3, #2
 8000bc4:	3306      	adds	r3, #6
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	18d3      	adds	r3, r2, r3
 8000bca:	3304      	adds	r3, #4
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	1dfa      	adds	r2, r7, #7
 8000bd0:	7812      	ldrb	r2, [r2, #0]
 8000bd2:	0011      	movs	r1, r2
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	400a      	ands	r2, r1
 8000bd8:	00d2      	lsls	r2, r2, #3
 8000bda:	21ff      	movs	r1, #255	; 0xff
 8000bdc:	4091      	lsls	r1, r2
 8000bde:	000a      	movs	r2, r1
 8000be0:	43d2      	mvns	r2, r2
 8000be2:	401a      	ands	r2, r3
 8000be4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	019b      	lsls	r3, r3, #6
 8000bea:	22ff      	movs	r2, #255	; 0xff
 8000bec:	401a      	ands	r2, r3
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	4003      	ands	r3, r0
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bfc:	4809      	ldr	r0, [pc, #36]	; (8000c24 <__NVIC_SetPriority+0xd8>)
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	001c      	movs	r4, r3
 8000c04:	230f      	movs	r3, #15
 8000c06:	4023      	ands	r3, r4
 8000c08:	3b08      	subs	r3, #8
 8000c0a:	089b      	lsrs	r3, r3, #2
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	3306      	adds	r3, #6
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	18c3      	adds	r3, r0, r3
 8000c14:	3304      	adds	r3, #4
 8000c16:	601a      	str	r2, [r3, #0]
}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b003      	add	sp, #12
 8000c1e:	bd90      	pop	{r4, r7, pc}
 8000c20:	e000e100 	.word	0xe000e100
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	4a0c      	ldr	r2, [pc, #48]	; (8000c68 <SysTick_Config+0x40>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d901      	bls.n	8000c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e010      	b.n	8000c60 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <SysTick_Config+0x44>)
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	3a01      	subs	r2, #1
 8000c44:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c46:	2301      	movs	r3, #1
 8000c48:	425b      	negs	r3, r3
 8000c4a:	2103      	movs	r1, #3
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f7ff ff7d 	bl	8000b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <SysTick_Config+0x44>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <SysTick_Config+0x44>)
 8000c5a:	2207      	movs	r2, #7
 8000c5c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c5e:	2300      	movs	r3, #0
}
 8000c60:	0018      	movs	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b002      	add	sp, #8
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	00ffffff 	.word	0x00ffffff
 8000c6c:	e000e010 	.word	0xe000e010

08000c70 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
 8000c7a:	210f      	movs	r1, #15
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	1c02      	adds	r2, r0, #0
 8000c80:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b25b      	sxtb	r3, r3
 8000c8a:	0011      	movs	r1, r2
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f7ff ff5d 	bl	8000b4c <__NVIC_SetPriority>
}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b004      	add	sp, #16
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	0002      	movs	r2, r0
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	b25b      	sxtb	r3, r3
 8000cac:	0018      	movs	r0, r3
 8000cae:	f7ff ff33 	bl	8000b18 <__NVIC_EnableIRQ>
}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b002      	add	sp, #8
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f7ff ffaf 	bl	8000c28 <SysTick_Config>
 8000cca:	0003      	movs	r3, r0
}
 8000ccc:	0018      	movs	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b002      	add	sp, #8
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d101      	bne.n	8000ce6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e061      	b.n	8000daa <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a32      	ldr	r2, [pc, #200]	; (8000db4 <HAL_DMA_Init+0xe0>)
 8000cec:	4694      	mov	ip, r2
 8000cee:	4463      	add	r3, ip
 8000cf0:	2114      	movs	r1, #20
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f7ff fa08 	bl	8000108 <__udivsi3>
 8000cf8:	0003      	movs	r3, r0
 8000cfa:	009a      	lsls	r2, r3, #2
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a2d      	ldr	r2, [pc, #180]	; (8000db8 <HAL_DMA_Init+0xe4>)
 8000d04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2225      	movs	r2, #37	; 0x25
 8000d0a:	2102      	movs	r1, #2
 8000d0c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	4a28      	ldr	r2, [pc, #160]	; (8000dbc <HAL_DMA_Init+0xe8>)
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000d26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	691b      	ldr	r3, [r3, #16]
 8000d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a1b      	ldr	r3, [r3, #32]
 8000d44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	68fa      	ldr	r2, [r7, #12]
 8000d52:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	01db      	lsls	r3, r3, #7
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d018      	beq.n	8000d92 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <HAL_DMA_Init+0xec>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d68:	211c      	movs	r1, #28
 8000d6a:	400b      	ands	r3, r1
 8000d6c:	210f      	movs	r1, #15
 8000d6e:	4099      	lsls	r1, r3
 8000d70:	000b      	movs	r3, r1
 8000d72:	43d9      	mvns	r1, r3
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_DMA_Init+0xec>)
 8000d76:	400a      	ands	r2, r1
 8000d78:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <HAL_DMA_Init+0xec>)
 8000d7c:	6819      	ldr	r1, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685a      	ldr	r2, [r3, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	201c      	movs	r0, #28
 8000d88:	4003      	ands	r3, r0
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <HAL_DMA_Init+0xec>)
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2225      	movs	r2, #37	; 0x25
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2224      	movs	r2, #36	; 0x24
 8000da4:	2100      	movs	r1, #0
 8000da6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	0018      	movs	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b004      	add	sp, #16
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	bffdfff8 	.word	0xbffdfff8
 8000db8:	40020000 	.word	0x40020000
 8000dbc:	ffff800f 	.word	0xffff800f
 8000dc0:	400200a8 	.word	0x400200a8

08000dc4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dcc:	230f      	movs	r3, #15
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2225      	movs	r2, #37	; 0x25
 8000dd8:	5c9b      	ldrb	r3, [r3, r2]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d008      	beq.n	8000df2 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2204      	movs	r2, #4
 8000de4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2224      	movs	r2, #36	; 0x24
 8000dea:	2100      	movs	r1, #0
 8000dec:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e024      	b.n	8000e3c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	210e      	movs	r1, #14
 8000dfe:	438a      	bics	r2, r1
 8000e00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	438a      	bics	r2, r1
 8000e10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	221c      	movs	r2, #28
 8000e18:	401a      	ands	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	2101      	movs	r1, #1
 8000e20:	4091      	lsls	r1, r2
 8000e22:	000a      	movs	r2, r1
 8000e24:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2225      	movs	r2, #37	; 0x25
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2224      	movs	r2, #36	; 0x24
 8000e32:	2100      	movs	r1, #0
 8000e34:	5499      	strb	r1, [r3, r2]

    return status;
 8000e36:	230f      	movs	r3, #15
 8000e38:	18fb      	adds	r3, r7, r3
 8000e3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b004      	add	sp, #16
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	18fb      	adds	r3, r7, r3
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2225      	movs	r2, #37	; 0x25
 8000e58:	5c9b      	ldrb	r3, [r3, r2]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d007      	beq.n	8000e70 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2204      	movs	r2, #4
 8000e64:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e66:	230f      	movs	r3, #15
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	701a      	strb	r2, [r3, #0]
 8000e6e:	e02a      	b.n	8000ec6 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	210e      	movs	r1, #14
 8000e7c:	438a      	bics	r2, r1
 8000e7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	438a      	bics	r2, r1
 8000e8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e94:	221c      	movs	r2, #28
 8000e96:	401a      	ands	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	4091      	lsls	r1, r2
 8000ea0:	000a      	movs	r2, r1
 8000ea2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2225      	movs	r2, #37	; 0x25
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2224      	movs	r2, #36	; 0x24
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d004      	beq.n	8000ec6 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	0010      	movs	r0, r2
 8000ec4:	4798      	blx	r3
    }
  }
  return status;
 8000ec6:	230f      	movs	r3, #15
 8000ec8:	18fb      	adds	r3, r7, r3
 8000eca:	781b      	ldrb	r3, [r3, #0]
}
 8000ecc:	0018      	movs	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b004      	add	sp, #16
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef0:	221c      	movs	r2, #28
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	409a      	lsls	r2, r3
 8000ef8:	0013      	movs	r3, r2
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	4013      	ands	r3, r2
 8000efe:	d026      	beq.n	8000f4e <HAL_DMA_IRQHandler+0x7a>
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	2204      	movs	r2, #4
 8000f04:	4013      	ands	r3, r2
 8000f06:	d022      	beq.n	8000f4e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2220      	movs	r2, #32
 8000f10:	4013      	ands	r3, r2
 8000f12:	d107      	bne.n	8000f24 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2104      	movs	r1, #4
 8000f20:	438a      	bics	r2, r1
 8000f22:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f28:	221c      	movs	r2, #28
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	2104      	movs	r1, #4
 8000f32:	4091      	lsls	r1, r2
 8000f34:	000a      	movs	r2, r1
 8000f36:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d100      	bne.n	8000f42 <HAL_DMA_IRQHandler+0x6e>
 8000f40:	e071      	b.n	8001026 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	0010      	movs	r0, r2
 8000f4a:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8000f4c:	e06b      	b.n	8001026 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	221c      	movs	r2, #28
 8000f54:	4013      	ands	r3, r2
 8000f56:	2202      	movs	r2, #2
 8000f58:	409a      	lsls	r2, r3
 8000f5a:	0013      	movs	r3, r2
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	d02d      	beq.n	8000fbe <HAL_DMA_IRQHandler+0xea>
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	2202      	movs	r2, #2
 8000f66:	4013      	ands	r3, r2
 8000f68:	d029      	beq.n	8000fbe <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2220      	movs	r2, #32
 8000f72:	4013      	ands	r3, r2
 8000f74:	d10b      	bne.n	8000f8e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	210a      	movs	r1, #10
 8000f82:	438a      	bics	r2, r1
 8000f84:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2225      	movs	r2, #37	; 0x25
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	221c      	movs	r2, #28
 8000f94:	401a      	ands	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	2102      	movs	r1, #2
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	000a      	movs	r2, r1
 8000fa0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2224      	movs	r2, #36	; 0x24
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d039      	beq.n	8001026 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	0010      	movs	r0, r2
 8000fba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000fbc:	e033      	b.n	8001026 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	221c      	movs	r2, #28
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	2208      	movs	r2, #8
 8000fc8:	409a      	lsls	r2, r3
 8000fca:	0013      	movs	r3, r2
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d02a      	beq.n	8001028 <HAL_DMA_IRQHandler+0x154>
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	2208      	movs	r2, #8
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	d026      	beq.n	8001028 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	210e      	movs	r1, #14
 8000fe6:	438a      	bics	r2, r1
 8000fe8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	221c      	movs	r2, #28
 8000ff0:	401a      	ands	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	4091      	lsls	r1, r2
 8000ffa:	000a      	movs	r2, r1
 8000ffc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2201      	movs	r2, #1
 8001002:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2225      	movs	r2, #37	; 0x25
 8001008:	2101      	movs	r1, #1
 800100a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2224      	movs	r2, #36	; 0x24
 8001010:	2100      	movs	r1, #0
 8001012:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001018:	2b00      	cmp	r3, #0
 800101a:	d005      	beq.n	8001028 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	0010      	movs	r0, r2
 8001024:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	46c0      	nop			; (mov r8, r8)
}
 800102a:	46bd      	mov	sp, r7
 800102c:	b004      	add	sp, #16
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001046:	e155      	b.n	80012f4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2101      	movs	r1, #1
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	4091      	lsls	r1, r2
 8001052:	000a      	movs	r2, r1
 8001054:	4013      	ands	r3, r2
 8001056:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d100      	bne.n	8001060 <HAL_GPIO_Init+0x30>
 800105e:	e146      	b.n	80012ee <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d00b      	beq.n	8001080 <HAL_GPIO_Init+0x50>
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b02      	cmp	r3, #2
 800106e:	d007      	beq.n	8001080 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001074:	2b11      	cmp	r3, #17
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b12      	cmp	r3, #18
 800107e:	d130      	bne.n	80010e2 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	409a      	lsls	r2, r3
 800108e:	0013      	movs	r3, r2
 8001090:	43da      	mvns	r2, r3
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	68da      	ldr	r2, [r3, #12]
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	409a      	lsls	r2, r3
 80010a2:	0013      	movs	r3, r2
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b6:	2201      	movs	r2, #1
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	409a      	lsls	r2, r3
 80010bc:	0013      	movs	r3, r2
 80010be:	43da      	mvns	r2, r3
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	091b      	lsrs	r3, r3, #4
 80010cc:	2201      	movs	r2, #1
 80010ce:	401a      	ands	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	409a      	lsls	r2, r3
 80010d4:	0013      	movs	r3, r2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	409a      	lsls	r2, r3
 80010f0:	0013      	movs	r3, r2
 80010f2:	43da      	mvns	r2, r3
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	409a      	lsls	r2, r3
 8001104:	0013      	movs	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b02      	cmp	r3, #2
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0xf2>
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b12      	cmp	r3, #18
 8001120:	d123      	bne.n	800116a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	08da      	lsrs	r2, r3, #3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3208      	adds	r2, #8
 800112a:	0092      	lsls	r2, r2, #2
 800112c:	58d3      	ldr	r3, [r2, r3]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	2207      	movs	r2, #7
 8001134:	4013      	ands	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	220f      	movs	r2, #15
 800113a:	409a      	lsls	r2, r3
 800113c:	0013      	movs	r3, r2
 800113e:	43da      	mvns	r2, r3
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	691a      	ldr	r2, [r3, #16]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	2107      	movs	r1, #7
 800114e:	400b      	ands	r3, r1
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	409a      	lsls	r2, r3
 8001154:	0013      	movs	r3, r2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	08da      	lsrs	r2, r3, #3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3208      	adds	r2, #8
 8001164:	0092      	lsls	r2, r2, #2
 8001166:	6939      	ldr	r1, [r7, #16]
 8001168:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	2203      	movs	r2, #3
 8001176:	409a      	lsls	r2, r3
 8001178:	0013      	movs	r3, r2
 800117a:	43da      	mvns	r2, r3
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2203      	movs	r2, #3
 8001188:	401a      	ands	r2, r3
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	409a      	lsls	r2, r3
 8001190:	0013      	movs	r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	2380      	movs	r3, #128	; 0x80
 80011a4:	055b      	lsls	r3, r3, #21
 80011a6:	4013      	ands	r3, r2
 80011a8:	d100      	bne.n	80011ac <HAL_GPIO_Init+0x17c>
 80011aa:	e0a0      	b.n	80012ee <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ac:	4b57      	ldr	r3, [pc, #348]	; (800130c <HAL_GPIO_Init+0x2dc>)
 80011ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011b0:	4b56      	ldr	r3, [pc, #344]	; (800130c <HAL_GPIO_Init+0x2dc>)
 80011b2:	2101      	movs	r1, #1
 80011b4:	430a      	orrs	r2, r1
 80011b6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80011b8:	4a55      	ldr	r2, [pc, #340]	; (8001310 <HAL_GPIO_Init+0x2e0>)
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	089b      	lsrs	r3, r3, #2
 80011be:	3302      	adds	r3, #2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	589b      	ldr	r3, [r3, r2]
 80011c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	2203      	movs	r2, #3
 80011ca:	4013      	ands	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	220f      	movs	r2, #15
 80011d0:	409a      	lsls	r2, r3
 80011d2:	0013      	movs	r3, r2
 80011d4:	43da      	mvns	r2, r3
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	23a0      	movs	r3, #160	; 0xa0
 80011e0:	05db      	lsls	r3, r3, #23
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d01f      	beq.n	8001226 <HAL_GPIO_Init+0x1f6>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a4a      	ldr	r2, [pc, #296]	; (8001314 <HAL_GPIO_Init+0x2e4>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d019      	beq.n	8001222 <HAL_GPIO_Init+0x1f2>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a49      	ldr	r2, [pc, #292]	; (8001318 <HAL_GPIO_Init+0x2e8>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d013      	beq.n	800121e <HAL_GPIO_Init+0x1ee>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a48      	ldr	r2, [pc, #288]	; (800131c <HAL_GPIO_Init+0x2ec>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d00d      	beq.n	800121a <HAL_GPIO_Init+0x1ea>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a47      	ldr	r2, [pc, #284]	; (8001320 <HAL_GPIO_Init+0x2f0>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d007      	beq.n	8001216 <HAL_GPIO_Init+0x1e6>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a46      	ldr	r2, [pc, #280]	; (8001324 <HAL_GPIO_Init+0x2f4>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d101      	bne.n	8001212 <HAL_GPIO_Init+0x1e2>
 800120e:	2305      	movs	r3, #5
 8001210:	e00a      	b.n	8001228 <HAL_GPIO_Init+0x1f8>
 8001212:	2306      	movs	r3, #6
 8001214:	e008      	b.n	8001228 <HAL_GPIO_Init+0x1f8>
 8001216:	2304      	movs	r3, #4
 8001218:	e006      	b.n	8001228 <HAL_GPIO_Init+0x1f8>
 800121a:	2303      	movs	r3, #3
 800121c:	e004      	b.n	8001228 <HAL_GPIO_Init+0x1f8>
 800121e:	2302      	movs	r3, #2
 8001220:	e002      	b.n	8001228 <HAL_GPIO_Init+0x1f8>
 8001222:	2301      	movs	r3, #1
 8001224:	e000      	b.n	8001228 <HAL_GPIO_Init+0x1f8>
 8001226:	2300      	movs	r3, #0
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	2103      	movs	r1, #3
 800122c:	400a      	ands	r2, r1
 800122e:	0092      	lsls	r2, r2, #2
 8001230:	4093      	lsls	r3, r2
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001238:	4935      	ldr	r1, [pc, #212]	; (8001310 <HAL_GPIO_Init+0x2e0>)
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	089b      	lsrs	r3, r3, #2
 800123e:	3302      	adds	r3, #2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001246:	4b38      	ldr	r3, [pc, #224]	; (8001328 <HAL_GPIO_Init+0x2f8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	43da      	mvns	r2, r3
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	2380      	movs	r3, #128	; 0x80
 800125c:	025b      	lsls	r3, r3, #9
 800125e:	4013      	ands	r3, r2
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800126a:	4b2f      	ldr	r3, [pc, #188]	; (8001328 <HAL_GPIO_Init+0x2f8>)
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001270:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <HAL_GPIO_Init+0x2f8>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	43da      	mvns	r2, r3
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	029b      	lsls	r3, r3, #10
 8001288:	4013      	ands	r3, r2
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001294:	4b24      	ldr	r3, [pc, #144]	; (8001328 <HAL_GPIO_Init+0x2f8>)
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129a:	4b23      	ldr	r3, [pc, #140]	; (8001328 <HAL_GPIO_Init+0x2f8>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	43da      	mvns	r2, r3
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4013      	ands	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	2380      	movs	r3, #128	; 0x80
 80012b0:	035b      	lsls	r3, r3, #13
 80012b2:	4013      	ands	r3, r2
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <HAL_GPIO_Init+0x2f8>)
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <HAL_GPIO_Init+0x2f8>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	43da      	mvns	r2, r3
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	2380      	movs	r3, #128	; 0x80
 80012da:	039b      	lsls	r3, r3, #14
 80012dc:	4013      	ands	r3, r2
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <HAL_GPIO_Init+0x2f8>)
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	3301      	adds	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	40da      	lsrs	r2, r3
 80012fc:	1e13      	subs	r3, r2, #0
 80012fe:	d000      	beq.n	8001302 <HAL_GPIO_Init+0x2d2>
 8001300:	e6a2      	b.n	8001048 <HAL_GPIO_Init+0x18>
  }
}
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	46bd      	mov	sp, r7
 8001306:	b006      	add	sp, #24
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	40021000 	.word	0x40021000
 8001310:	40010000 	.word	0x40010000
 8001314:	50000400 	.word	0x50000400
 8001318:	50000800 	.word	0x50000800
 800131c:	50000c00 	.word	0x50000c00
 8001320:	50001000 	.word	0x50001000
 8001324:	50001c00 	.word	0x50001c00
 8001328:	40010400 	.word	0x40010400

0800132c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800132c:	b5b0      	push	{r4, r5, r7, lr}
 800132e:	b08a      	sub	sp, #40	; 0x28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d102      	bne.n	8001340 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	f000 fbc2 	bl	8001ac4 <HAL_RCC_OscConfig+0x798>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001340:	4bca      	ldr	r3, [pc, #808]	; (800166c <HAL_RCC_OscConfig+0x340>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	220c      	movs	r2, #12
 8001346:	4013      	ands	r3, r2
 8001348:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800134a:	4bc8      	ldr	r3, [pc, #800]	; (800166c <HAL_RCC_OscConfig+0x340>)
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	2380      	movs	r3, #128	; 0x80
 8001350:	025b      	lsls	r3, r3, #9
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2201      	movs	r2, #1
 800135c:	4013      	ands	r3, r2
 800135e:	d100      	bne.n	8001362 <HAL_RCC_OscConfig+0x36>
 8001360:	e07e      	b.n	8001460 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	2b08      	cmp	r3, #8
 8001366:	d007      	beq.n	8001378 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	2b0c      	cmp	r3, #12
 800136c:	d112      	bne.n	8001394 <HAL_RCC_OscConfig+0x68>
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	025b      	lsls	r3, r3, #9
 8001374:	429a      	cmp	r2, r3
 8001376:	d10d      	bne.n	8001394 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001378:	4bbc      	ldr	r3, [pc, #752]	; (800166c <HAL_RCC_OscConfig+0x340>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	029b      	lsls	r3, r3, #10
 8001380:	4013      	ands	r3, r2
 8001382:	d100      	bne.n	8001386 <HAL_RCC_OscConfig+0x5a>
 8001384:	e06b      	b.n	800145e <HAL_RCC_OscConfig+0x132>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d167      	bne.n	800145e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	f000 fb98 	bl	8001ac4 <HAL_RCC_OscConfig+0x798>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	025b      	lsls	r3, r3, #9
 800139c:	429a      	cmp	r2, r3
 800139e:	d107      	bne.n	80013b0 <HAL_RCC_OscConfig+0x84>
 80013a0:	4bb2      	ldr	r3, [pc, #712]	; (800166c <HAL_RCC_OscConfig+0x340>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4bb1      	ldr	r3, [pc, #708]	; (800166c <HAL_RCC_OscConfig+0x340>)
 80013a6:	2180      	movs	r1, #128	; 0x80
 80013a8:	0249      	lsls	r1, r1, #9
 80013aa:	430a      	orrs	r2, r1
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	e027      	b.n	8001400 <HAL_RCC_OscConfig+0xd4>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	23a0      	movs	r3, #160	; 0xa0
 80013b6:	02db      	lsls	r3, r3, #11
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d10e      	bne.n	80013da <HAL_RCC_OscConfig+0xae>
 80013bc:	4bab      	ldr	r3, [pc, #684]	; (800166c <HAL_RCC_OscConfig+0x340>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4baa      	ldr	r3, [pc, #680]	; (800166c <HAL_RCC_OscConfig+0x340>)
 80013c2:	2180      	movs	r1, #128	; 0x80
 80013c4:	02c9      	lsls	r1, r1, #11
 80013c6:	430a      	orrs	r2, r1
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	4ba8      	ldr	r3, [pc, #672]	; (800166c <HAL_RCC_OscConfig+0x340>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4ba7      	ldr	r3, [pc, #668]	; (800166c <HAL_RCC_OscConfig+0x340>)
 80013d0:	2180      	movs	r1, #128	; 0x80
 80013d2:	0249      	lsls	r1, r1, #9
 80013d4:	430a      	orrs	r2, r1
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	e012      	b.n	8001400 <HAL_RCC_OscConfig+0xd4>
 80013da:	4ba4      	ldr	r3, [pc, #656]	; (800166c <HAL_RCC_OscConfig+0x340>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4ba3      	ldr	r3, [pc, #652]	; (800166c <HAL_RCC_OscConfig+0x340>)
 80013e0:	49a3      	ldr	r1, [pc, #652]	; (8001670 <HAL_RCC_OscConfig+0x344>)
 80013e2:	400a      	ands	r2, r1
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	4ba1      	ldr	r3, [pc, #644]	; (800166c <HAL_RCC_OscConfig+0x340>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	025b      	lsls	r3, r3, #9
 80013ee:	4013      	ands	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4b9d      	ldr	r3, [pc, #628]	; (800166c <HAL_RCC_OscConfig+0x340>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b9c      	ldr	r3, [pc, #624]	; (800166c <HAL_RCC_OscConfig+0x340>)
 80013fa:	499e      	ldr	r1, [pc, #632]	; (8001674 <HAL_RCC_OscConfig+0x348>)
 80013fc:	400a      	ands	r2, r1
 80013fe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d015      	beq.n	8001434 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001408:	f7ff fb7c 	bl	8000b04 <HAL_GetTick>
 800140c:	0003      	movs	r3, r0
 800140e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001410:	e009      	b.n	8001426 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001412:	f7ff fb77 	bl	8000b04 <HAL_GetTick>
 8001416:	0002      	movs	r2, r0
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b64      	cmp	r3, #100	; 0x64
 800141e:	d902      	bls.n	8001426 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	f000 fb4f 	bl	8001ac4 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001426:	4b91      	ldr	r3, [pc, #580]	; (800166c <HAL_RCC_OscConfig+0x340>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	029b      	lsls	r3, r3, #10
 800142e:	4013      	ands	r3, r2
 8001430:	d0ef      	beq.n	8001412 <HAL_RCC_OscConfig+0xe6>
 8001432:	e015      	b.n	8001460 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff fb66 	bl	8000b04 <HAL_GetTick>
 8001438:	0003      	movs	r3, r0
 800143a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800143e:	f7ff fb61 	bl	8000b04 <HAL_GetTick>
 8001442:	0002      	movs	r2, r0
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b64      	cmp	r3, #100	; 0x64
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e339      	b.n	8001ac4 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001450:	4b86      	ldr	r3, [pc, #536]	; (800166c <HAL_RCC_OscConfig+0x340>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	2380      	movs	r3, #128	; 0x80
 8001456:	029b      	lsls	r3, r3, #10
 8001458:	4013      	ands	r3, r2
 800145a:	d1f0      	bne.n	800143e <HAL_RCC_OscConfig+0x112>
 800145c:	e000      	b.n	8001460 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2202      	movs	r2, #2
 8001466:	4013      	ands	r3, r2
 8001468:	d100      	bne.n	800146c <HAL_RCC_OscConfig+0x140>
 800146a:	e09a      	b.n	80015a2 <HAL_RCC_OscConfig+0x276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	2220      	movs	r2, #32
 8001476:	4013      	ands	r3, r2
 8001478:	d009      	beq.n	800148e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800147a:	4b7c      	ldr	r3, [pc, #496]	; (800166c <HAL_RCC_OscConfig+0x340>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4b7b      	ldr	r3, [pc, #492]	; (800166c <HAL_RCC_OscConfig+0x340>)
 8001480:	2120      	movs	r1, #32
 8001482:	430a      	orrs	r2, r1
 8001484:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	2220      	movs	r2, #32
 800148a:	4393      	bics	r3, r2
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	2b04      	cmp	r3, #4
 8001492:	d005      	beq.n	80014a0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	2b0c      	cmp	r3, #12
 8001498:	d13f      	bne.n	800151a <HAL_RCC_OscConfig+0x1ee>
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d13c      	bne.n	800151a <HAL_RCC_OscConfig+0x1ee>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80014a0:	4b72      	ldr	r3, [pc, #456]	; (800166c <HAL_RCC_OscConfig+0x340>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2204      	movs	r2, #4
 80014a6:	4013      	ands	r3, r2
 80014a8:	d004      	beq.n	80014b4 <HAL_RCC_OscConfig+0x188>
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e307      	b.n	8001ac4 <HAL_RCC_OscConfig+0x798>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b4:	4b6d      	ldr	r3, [pc, #436]	; (800166c <HAL_RCC_OscConfig+0x340>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	4a6f      	ldr	r2, [pc, #444]	; (8001678 <HAL_RCC_OscConfig+0x34c>)
 80014ba:	4013      	ands	r3, r2
 80014bc:	0019      	movs	r1, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	021a      	lsls	r2, r3, #8
 80014c4:	4b69      	ldr	r3, [pc, #420]	; (800166c <HAL_RCC_OscConfig+0x340>)
 80014c6:	430a      	orrs	r2, r1
 80014c8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80014ca:	4b68      	ldr	r3, [pc, #416]	; (800166c <HAL_RCC_OscConfig+0x340>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2209      	movs	r2, #9
 80014d0:	4393      	bics	r3, r2
 80014d2:	0019      	movs	r1, r3
 80014d4:	4b65      	ldr	r3, [pc, #404]	; (800166c <HAL_RCC_OscConfig+0x340>)
 80014d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014d8:	430a      	orrs	r2, r1
 80014da:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014dc:	f000 fc44 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 80014e0:	0001      	movs	r1, r0
 80014e2:	4b62      	ldr	r3, [pc, #392]	; (800166c <HAL_RCC_OscConfig+0x340>)
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	091b      	lsrs	r3, r3, #4
 80014e8:	220f      	movs	r2, #15
 80014ea:	4013      	ands	r3, r2
 80014ec:	4a63      	ldr	r2, [pc, #396]	; (800167c <HAL_RCC_OscConfig+0x350>)
 80014ee:	5cd3      	ldrb	r3, [r2, r3]
 80014f0:	000a      	movs	r2, r1
 80014f2:	40da      	lsrs	r2, r3
 80014f4:	4b62      	ldr	r3, [pc, #392]	; (8001680 <HAL_RCC_OscConfig+0x354>)
 80014f6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80014f8:	4b62      	ldr	r3, [pc, #392]	; (8001684 <HAL_RCC_OscConfig+0x358>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2513      	movs	r5, #19
 80014fe:	197c      	adds	r4, r7, r5
 8001500:	0018      	movs	r0, r3
 8001502:	f7ff fab9 	bl	8000a78 <HAL_InitTick>
 8001506:	0003      	movs	r3, r0
 8001508:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800150a:	197b      	adds	r3, r7, r5
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d047      	beq.n	80015a2 <HAL_RCC_OscConfig+0x276>
      {
        return status;
 8001512:	2313      	movs	r3, #19
 8001514:	18fb      	adds	r3, r7, r3
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	e2d4      	b.n	8001ac4 <HAL_RCC_OscConfig+0x798>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	2b00      	cmp	r3, #0
 800151e:	d027      	beq.n	8001570 <HAL_RCC_OscConfig+0x244>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001520:	4b52      	ldr	r3, [pc, #328]	; (800166c <HAL_RCC_OscConfig+0x340>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2209      	movs	r2, #9
 8001526:	4393      	bics	r3, r2
 8001528:	0019      	movs	r1, r3
 800152a:	4b50      	ldr	r3, [pc, #320]	; (800166c <HAL_RCC_OscConfig+0x340>)
 800152c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800152e:	430a      	orrs	r2, r1
 8001530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001532:	f7ff fae7 	bl	8000b04 <HAL_GetTick>
 8001536:	0003      	movs	r3, r0
 8001538:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x222>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800153c:	f7ff fae2 	bl	8000b04 <HAL_GetTick>
 8001540:	0002      	movs	r2, r0
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x222>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e2ba      	b.n	8001ac4 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800154e:	4b47      	ldr	r3, [pc, #284]	; (800166c <HAL_RCC_OscConfig+0x340>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2204      	movs	r2, #4
 8001554:	4013      	ands	r3, r2
 8001556:	d0f1      	beq.n	800153c <HAL_RCC_OscConfig+0x210>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001558:	4b44      	ldr	r3, [pc, #272]	; (800166c <HAL_RCC_OscConfig+0x340>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	4a46      	ldr	r2, [pc, #280]	; (8001678 <HAL_RCC_OscConfig+0x34c>)
 800155e:	4013      	ands	r3, r2
 8001560:	0019      	movs	r1, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	021a      	lsls	r2, r3, #8
 8001568:	4b40      	ldr	r3, [pc, #256]	; (800166c <HAL_RCC_OscConfig+0x340>)
 800156a:	430a      	orrs	r2, r1
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	e018      	b.n	80015a2 <HAL_RCC_OscConfig+0x276>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001570:	4b3e      	ldr	r3, [pc, #248]	; (800166c <HAL_RCC_OscConfig+0x340>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b3d      	ldr	r3, [pc, #244]	; (800166c <HAL_RCC_OscConfig+0x340>)
 8001576:	2101      	movs	r1, #1
 8001578:	438a      	bics	r2, r1
 800157a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157c:	f7ff fac2 	bl	8000b04 <HAL_GetTick>
 8001580:	0003      	movs	r3, r0
 8001582:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001586:	f7ff fabd 	bl	8000b04 <HAL_GetTick>
 800158a:	0002      	movs	r2, r0
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e295      	b.n	8001ac4 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001598:	4b34      	ldr	r3, [pc, #208]	; (800166c <HAL_RCC_OscConfig+0x340>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2204      	movs	r2, #4
 800159e:	4013      	ands	r3, r2
 80015a0:	d1f1      	bne.n	8001586 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2210      	movs	r2, #16
 80015a8:	4013      	ands	r3, r2
 80015aa:	d100      	bne.n	80015ae <HAL_RCC_OscConfig+0x282>
 80015ac:	e0a3      	b.n	80016f6 <HAL_RCC_OscConfig+0x3ca>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d141      	bne.n	8001638 <HAL_RCC_OscConfig+0x30c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015b4:	4b2d      	ldr	r3, [pc, #180]	; (800166c <HAL_RCC_OscConfig+0x340>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4013      	ands	r3, r2
 80015be:	d005      	beq.n	80015cc <HAL_RCC_OscConfig+0x2a0>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e27b      	b.n	8001ac4 <HAL_RCC_OscConfig+0x798>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015cc:	4b27      	ldr	r3, [pc, #156]	; (800166c <HAL_RCC_OscConfig+0x340>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	4a2d      	ldr	r2, [pc, #180]	; (8001688 <HAL_RCC_OscConfig+0x35c>)
 80015d2:	4013      	ands	r3, r2
 80015d4:	0019      	movs	r1, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015da:	4b24      	ldr	r3, [pc, #144]	; (800166c <HAL_RCC_OscConfig+0x340>)
 80015dc:	430a      	orrs	r2, r1
 80015de:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e0:	4b22      	ldr	r3, [pc, #136]	; (800166c <HAL_RCC_OscConfig+0x340>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	0a19      	lsrs	r1, r3, #8
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	061a      	lsls	r2, r3, #24
 80015ee:	4b1f      	ldr	r3, [pc, #124]	; (800166c <HAL_RCC_OscConfig+0x340>)
 80015f0:	430a      	orrs	r2, r1
 80015f2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	0b5b      	lsrs	r3, r3, #13
 80015fa:	3301      	adds	r3, #1
 80015fc:	2280      	movs	r2, #128	; 0x80
 80015fe:	0212      	lsls	r2, r2, #8
 8001600:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <HAL_RCC_OscConfig+0x340>)
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	091b      	lsrs	r3, r3, #4
 8001608:	210f      	movs	r1, #15
 800160a:	400b      	ands	r3, r1
 800160c:	491b      	ldr	r1, [pc, #108]	; (800167c <HAL_RCC_OscConfig+0x350>)
 800160e:	5ccb      	ldrb	r3, [r1, r3]
 8001610:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001612:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_RCC_OscConfig+0x354>)
 8001614:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001616:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <HAL_RCC_OscConfig+0x358>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2513      	movs	r5, #19
 800161c:	197c      	adds	r4, r7, r5
 800161e:	0018      	movs	r0, r3
 8001620:	f7ff fa2a 	bl	8000a78 <HAL_InitTick>
 8001624:	0003      	movs	r3, r0
 8001626:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001628:	197b      	adds	r3, r7, r5
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d062      	beq.n	80016f6 <HAL_RCC_OscConfig+0x3ca>
        {
          return status;
 8001630:	2313      	movs	r3, #19
 8001632:	18fb      	adds	r3, r7, r3
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	e245      	b.n	8001ac4 <HAL_RCC_OscConfig+0x798>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d040      	beq.n	80016c2 <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001640:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_RCC_OscConfig+0x340>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_RCC_OscConfig+0x340>)
 8001646:	2180      	movs	r1, #128	; 0x80
 8001648:	0049      	lsls	r1, r1, #1
 800164a:	430a      	orrs	r2, r1
 800164c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164e:	f7ff fa59 	bl	8000b04 <HAL_GetTick>
 8001652:	0003      	movs	r3, r0
 8001654:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001656:	e019      	b.n	800168c <HAL_RCC_OscConfig+0x360>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001658:	f7ff fa54 	bl	8000b04 <HAL_GetTick>
 800165c:	0002      	movs	r2, r0
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d912      	bls.n	800168c <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e22c      	b.n	8001ac4 <HAL_RCC_OscConfig+0x798>
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	40021000 	.word	0x40021000
 8001670:	fffeffff 	.word	0xfffeffff
 8001674:	fffbffff 	.word	0xfffbffff
 8001678:	ffffe0ff 	.word	0xffffe0ff
 800167c:	080030a8 	.word	0x080030a8
 8001680:	20000000 	.word	0x20000000
 8001684:	20000004 	.word	0x20000004
 8001688:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800168c:	4bc6      	ldr	r3, [pc, #792]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4013      	ands	r3, r2
 8001696:	d0df      	beq.n	8001658 <HAL_RCC_OscConfig+0x32c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001698:	4bc3      	ldr	r3, [pc, #780]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	4ac3      	ldr	r2, [pc, #780]	; (80019ac <HAL_RCC_OscConfig+0x680>)
 800169e:	4013      	ands	r3, r2
 80016a0:	0019      	movs	r1, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016a6:	4bc0      	ldr	r3, [pc, #768]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 80016a8:	430a      	orrs	r2, r1
 80016aa:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ac:	4bbe      	ldr	r3, [pc, #760]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	0a19      	lsrs	r1, r3, #8
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	061a      	lsls	r2, r3, #24
 80016ba:	4bbb      	ldr	r3, [pc, #748]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 80016bc:	430a      	orrs	r2, r1
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	e019      	b.n	80016f6 <HAL_RCC_OscConfig+0x3ca>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016c2:	4bb9      	ldr	r3, [pc, #740]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	4bb8      	ldr	r3, [pc, #736]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 80016c8:	49b9      	ldr	r1, [pc, #740]	; (80019b0 <HAL_RCC_OscConfig+0x684>)
 80016ca:	400a      	ands	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ce:	f7ff fa19 	bl	8000b04 <HAL_GetTick>
 80016d2:	0003      	movs	r3, r0
 80016d4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016d8:	f7ff fa14 	bl	8000b04 <HAL_GetTick>
 80016dc:	0002      	movs	r2, r0
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x3be>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e1ec      	b.n	8001ac4 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80016ea:	4baf      	ldr	r3, [pc, #700]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	2380      	movs	r3, #128	; 0x80
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4013      	ands	r3, r2
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2208      	movs	r2, #8
 80016fc:	4013      	ands	r3, r2
 80016fe:	d036      	beq.n	800176e <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d019      	beq.n	800173c <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001708:	4ba7      	ldr	r3, [pc, #668]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 800170a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800170c:	4ba6      	ldr	r3, [pc, #664]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 800170e:	2101      	movs	r1, #1
 8001710:	430a      	orrs	r2, r1
 8001712:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001714:	f7ff f9f6 	bl	8000b04 <HAL_GetTick>
 8001718:	0003      	movs	r3, r0
 800171a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x404>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800171e:	f7ff f9f1 	bl	8000b04 <HAL_GetTick>
 8001722:	0002      	movs	r2, r0
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e1c9      	b.n	8001ac4 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001730:	4b9d      	ldr	r3, [pc, #628]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 8001732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001734:	2202      	movs	r2, #2
 8001736:	4013      	ands	r3, r2
 8001738:	d0f1      	beq.n	800171e <HAL_RCC_OscConfig+0x3f2>
 800173a:	e018      	b.n	800176e <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800173c:	4b9a      	ldr	r3, [pc, #616]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 800173e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001740:	4b99      	ldr	r3, [pc, #612]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 8001742:	2101      	movs	r1, #1
 8001744:	438a      	bics	r2, r1
 8001746:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001748:	f7ff f9dc 	bl	8000b04 <HAL_GetTick>
 800174c:	0003      	movs	r3, r0
 800174e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001752:	f7ff f9d7 	bl	8000b04 <HAL_GetTick>
 8001756:	0002      	movs	r2, r0
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e1af      	b.n	8001ac4 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001764:	4b90      	ldr	r3, [pc, #576]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 8001766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001768:	2202      	movs	r2, #2
 800176a:	4013      	ands	r3, r2
 800176c:	d1f1      	bne.n	8001752 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2204      	movs	r2, #4
 8001774:	4013      	ands	r3, r2
 8001776:	d100      	bne.n	800177a <HAL_RCC_OscConfig+0x44e>
 8001778:	e0af      	b.n	80018da <HAL_RCC_OscConfig+0x5ae>
  {
    FlagStatus       pwrclkchanged = RESET;
 800177a:	2323      	movs	r3, #35	; 0x23
 800177c:	18fb      	adds	r3, r7, r3
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001782:	4b89      	ldr	r3, [pc, #548]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 8001784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	055b      	lsls	r3, r3, #21
 800178a:	4013      	ands	r3, r2
 800178c:	d10a      	bne.n	80017a4 <HAL_RCC_OscConfig+0x478>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	4b86      	ldr	r3, [pc, #536]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 8001790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001792:	4b85      	ldr	r3, [pc, #532]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 8001794:	2180      	movs	r1, #128	; 0x80
 8001796:	0549      	lsls	r1, r1, #21
 8001798:	430a      	orrs	r2, r1
 800179a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800179c:	2323      	movs	r3, #35	; 0x23
 800179e:	18fb      	adds	r3, r7, r3
 80017a0:	2201      	movs	r2, #1
 80017a2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a4:	4b83      	ldr	r3, [pc, #524]	; (80019b4 <HAL_RCC_OscConfig+0x688>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	2380      	movs	r3, #128	; 0x80
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	4013      	ands	r3, r2
 80017ae:	d11a      	bne.n	80017e6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017b0:	4b80      	ldr	r3, [pc, #512]	; (80019b4 <HAL_RCC_OscConfig+0x688>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b7f      	ldr	r3, [pc, #508]	; (80019b4 <HAL_RCC_OscConfig+0x688>)
 80017b6:	2180      	movs	r1, #128	; 0x80
 80017b8:	0049      	lsls	r1, r1, #1
 80017ba:	430a      	orrs	r2, r1
 80017bc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017be:	f7ff f9a1 	bl	8000b04 <HAL_GetTick>
 80017c2:	0003      	movs	r3, r0
 80017c4:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x4ae>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c8:	f7ff f99c 	bl	8000b04 <HAL_GetTick>
 80017cc:	0002      	movs	r2, r0
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	; 0x64
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x4ae>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e174      	b.n	8001ac4 <HAL_RCC_OscConfig+0x798>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017da:	4b76      	ldr	r3, [pc, #472]	; (80019b4 <HAL_RCC_OscConfig+0x688>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4013      	ands	r3, r2
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d107      	bne.n	8001802 <HAL_RCC_OscConfig+0x4d6>
 80017f2:	4b6d      	ldr	r3, [pc, #436]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 80017f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017f6:	4b6c      	ldr	r3, [pc, #432]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 80017f8:	2180      	movs	r1, #128	; 0x80
 80017fa:	0049      	lsls	r1, r1, #1
 80017fc:	430a      	orrs	r2, r1
 80017fe:	651a      	str	r2, [r3, #80]	; 0x50
 8001800:	e031      	b.n	8001866 <HAL_RCC_OscConfig+0x53a>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0x4f8>
 800180a:	4b67      	ldr	r3, [pc, #412]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 800180c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800180e:	4b66      	ldr	r3, [pc, #408]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 8001810:	4967      	ldr	r1, [pc, #412]	; (80019b0 <HAL_RCC_OscConfig+0x684>)
 8001812:	400a      	ands	r2, r1
 8001814:	651a      	str	r2, [r3, #80]	; 0x50
 8001816:	4b64      	ldr	r3, [pc, #400]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 8001818:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800181a:	4b63      	ldr	r3, [pc, #396]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 800181c:	4966      	ldr	r1, [pc, #408]	; (80019b8 <HAL_RCC_OscConfig+0x68c>)
 800181e:	400a      	ands	r2, r1
 8001820:	651a      	str	r2, [r3, #80]	; 0x50
 8001822:	e020      	b.n	8001866 <HAL_RCC_OscConfig+0x53a>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	23a0      	movs	r3, #160	; 0xa0
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	429a      	cmp	r2, r3
 800182e:	d10e      	bne.n	800184e <HAL_RCC_OscConfig+0x522>
 8001830:	4b5d      	ldr	r3, [pc, #372]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 8001832:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001834:	4b5c      	ldr	r3, [pc, #368]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 8001836:	2180      	movs	r1, #128	; 0x80
 8001838:	00c9      	lsls	r1, r1, #3
 800183a:	430a      	orrs	r2, r1
 800183c:	651a      	str	r2, [r3, #80]	; 0x50
 800183e:	4b5a      	ldr	r3, [pc, #360]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 8001840:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001842:	4b59      	ldr	r3, [pc, #356]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 8001844:	2180      	movs	r1, #128	; 0x80
 8001846:	0049      	lsls	r1, r1, #1
 8001848:	430a      	orrs	r2, r1
 800184a:	651a      	str	r2, [r3, #80]	; 0x50
 800184c:	e00b      	b.n	8001866 <HAL_RCC_OscConfig+0x53a>
 800184e:	4b56      	ldr	r3, [pc, #344]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 8001850:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001852:	4b55      	ldr	r3, [pc, #340]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 8001854:	4956      	ldr	r1, [pc, #344]	; (80019b0 <HAL_RCC_OscConfig+0x684>)
 8001856:	400a      	ands	r2, r1
 8001858:	651a      	str	r2, [r3, #80]	; 0x50
 800185a:	4b53      	ldr	r3, [pc, #332]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 800185c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800185e:	4b52      	ldr	r3, [pc, #328]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 8001860:	4955      	ldr	r1, [pc, #340]	; (80019b8 <HAL_RCC_OscConfig+0x68c>)
 8001862:	400a      	ands	r2, r1
 8001864:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d015      	beq.n	800189a <HAL_RCC_OscConfig+0x56e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186e:	f7ff f949 	bl	8000b04 <HAL_GetTick>
 8001872:	0003      	movs	r3, r0
 8001874:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001876:	e009      	b.n	800188c <HAL_RCC_OscConfig+0x560>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001878:	f7ff f944 	bl	8000b04 <HAL_GetTick>
 800187c:	0002      	movs	r2, r0
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	4a4e      	ldr	r2, [pc, #312]	; (80019bc <HAL_RCC_OscConfig+0x690>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x560>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e11b      	b.n	8001ac4 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800188c:	4b46      	ldr	r3, [pc, #280]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 800188e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4013      	ands	r3, r2
 8001896:	d0ef      	beq.n	8001878 <HAL_RCC_OscConfig+0x54c>
 8001898:	e014      	b.n	80018c4 <HAL_RCC_OscConfig+0x598>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189a:	f7ff f933 	bl	8000b04 <HAL_GetTick>
 800189e:	0003      	movs	r3, r0
 80018a0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018a2:	e009      	b.n	80018b8 <HAL_RCC_OscConfig+0x58c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a4:	f7ff f92e 	bl	8000b04 <HAL_GetTick>
 80018a8:	0002      	movs	r2, r0
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	4a43      	ldr	r2, [pc, #268]	; (80019bc <HAL_RCC_OscConfig+0x690>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e105      	b.n	8001ac4 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018b8:	4b3b      	ldr	r3, [pc, #236]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 80018ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4013      	ands	r3, r2
 80018c2:	d1ef      	bne.n	80018a4 <HAL_RCC_OscConfig+0x578>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018c4:	2323      	movs	r3, #35	; 0x23
 80018c6:	18fb      	adds	r3, r7, r3
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d105      	bne.n	80018da <HAL_RCC_OscConfig+0x5ae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ce:	4b36      	ldr	r3, [pc, #216]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 80018d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018d2:	4b35      	ldr	r3, [pc, #212]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 80018d4:	493a      	ldr	r1, [pc, #232]	; (80019c0 <HAL_RCC_OscConfig+0x694>)
 80018d6:	400a      	ands	r2, r1
 80018d8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2220      	movs	r2, #32
 80018e0:	4013      	ands	r3, r2
 80018e2:	d049      	beq.n	8001978 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d026      	beq.n	800193a <HAL_RCC_OscConfig+0x60e>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80018ec:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	4b2d      	ldr	r3, [pc, #180]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 80018f2:	2101      	movs	r1, #1
 80018f4:	430a      	orrs	r2, r1
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 80018fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018fc:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 80018fe:	2101      	movs	r1, #1
 8001900:	430a      	orrs	r2, r1
 8001902:	635a      	str	r2, [r3, #52]	; 0x34
 8001904:	4b2f      	ldr	r3, [pc, #188]	; (80019c4 <HAL_RCC_OscConfig+0x698>)
 8001906:	6a1a      	ldr	r2, [r3, #32]
 8001908:	4b2e      	ldr	r3, [pc, #184]	; (80019c4 <HAL_RCC_OscConfig+0x698>)
 800190a:	2180      	movs	r1, #128	; 0x80
 800190c:	0189      	lsls	r1, r1, #6
 800190e:	430a      	orrs	r2, r1
 8001910:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001912:	f7ff f8f7 	bl	8000b04 <HAL_GetTick>
 8001916:	0003      	movs	r3, r0
 8001918:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x602>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800191c:	f7ff f8f2 	bl	8000b04 <HAL_GetTick>
 8001920:	0002      	movs	r2, r0
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x602>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e0ca      	b.n	8001ac4 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800192e:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2202      	movs	r2, #2
 8001934:	4013      	ands	r3, r2
 8001936:	d0f1      	beq.n	800191c <HAL_RCC_OscConfig+0x5f0>
 8001938:	e01e      	b.n	8001978 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800193a:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 8001940:	2101      	movs	r1, #1
 8001942:	438a      	bics	r2, r1
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	4b1f      	ldr	r3, [pc, #124]	; (80019c4 <HAL_RCC_OscConfig+0x698>)
 8001948:	6a1a      	ldr	r2, [r3, #32]
 800194a:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <HAL_RCC_OscConfig+0x698>)
 800194c:	491e      	ldr	r1, [pc, #120]	; (80019c8 <HAL_RCC_OscConfig+0x69c>)
 800194e:	400a      	ands	r2, r1
 8001950:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001952:	f7ff f8d7 	bl	8000b04 <HAL_GetTick>
 8001956:	0003      	movs	r3, r0
 8001958:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x642>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800195c:	f7ff f8d2 	bl	8000b04 <HAL_GetTick>
 8001960:	0002      	movs	r2, r0
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x642>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e0aa      	b.n	8001ac4 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2202      	movs	r2, #2
 8001974:	4013      	ands	r3, r2
 8001976:	d1f1      	bne.n	800195c <HAL_RCC_OscConfig+0x630>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197c:	2b00      	cmp	r3, #0
 800197e:	d100      	bne.n	8001982 <HAL_RCC_OscConfig+0x656>
 8001980:	e09f      	b.n	8001ac2 <HAL_RCC_OscConfig+0x796>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	2b0c      	cmp	r3, #12
 8001986:	d100      	bne.n	800198a <HAL_RCC_OscConfig+0x65e>
 8001988:	e078      	b.n	8001a7c <HAL_RCC_OscConfig+0x750>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198e:	2b02      	cmp	r3, #2
 8001990:	d159      	bne.n	8001a46 <HAL_RCC_OscConfig+0x71a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 8001998:	490c      	ldr	r1, [pc, #48]	; (80019cc <HAL_RCC_OscConfig+0x6a0>)
 800199a:	400a      	ands	r2, r1
 800199c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199e:	f7ff f8b1 	bl	8000b04 <HAL_GetTick>
 80019a2:	0003      	movs	r3, r0
 80019a4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019a6:	e01c      	b.n	80019e2 <HAL_RCC_OscConfig+0x6b6>
 80019a8:	40021000 	.word	0x40021000
 80019ac:	ffff1fff 	.word	0xffff1fff
 80019b0:	fffffeff 	.word	0xfffffeff
 80019b4:	40007000 	.word	0x40007000
 80019b8:	fffffbff 	.word	0xfffffbff
 80019bc:	00001388 	.word	0x00001388
 80019c0:	efffffff 	.word	0xefffffff
 80019c4:	40010000 	.word	0x40010000
 80019c8:	ffffdfff 	.word	0xffffdfff
 80019cc:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d0:	f7ff f898 	bl	8000b04 <HAL_GetTick>
 80019d4:	0002      	movs	r2, r0
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e070      	b.n	8001ac4 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019e2:	4b3a      	ldr	r3, [pc, #232]	; (8001acc <HAL_RCC_OscConfig+0x7a0>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	2380      	movs	r3, #128	; 0x80
 80019e8:	049b      	lsls	r3, r3, #18
 80019ea:	4013      	ands	r3, r2
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x6a4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ee:	4b37      	ldr	r3, [pc, #220]	; (8001acc <HAL_RCC_OscConfig+0x7a0>)
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	4a37      	ldr	r2, [pc, #220]	; (8001ad0 <HAL_RCC_OscConfig+0x7a4>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	0019      	movs	r1, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a06:	431a      	orrs	r2, r3
 8001a08:	4b30      	ldr	r3, [pc, #192]	; (8001acc <HAL_RCC_OscConfig+0x7a0>)
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a0e:	4b2f      	ldr	r3, [pc, #188]	; (8001acc <HAL_RCC_OscConfig+0x7a0>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	4b2e      	ldr	r3, [pc, #184]	; (8001acc <HAL_RCC_OscConfig+0x7a0>)
 8001a14:	2180      	movs	r1, #128	; 0x80
 8001a16:	0449      	lsls	r1, r1, #17
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1c:	f7ff f872 	bl	8000b04 <HAL_GetTick>
 8001a20:	0003      	movs	r3, r0
 8001a22:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x70c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a26:	f7ff f86d 	bl	8000b04 <HAL_GetTick>
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x70c>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e045      	b.n	8001ac4 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a38:	4b24      	ldr	r3, [pc, #144]	; (8001acc <HAL_RCC_OscConfig+0x7a0>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	049b      	lsls	r3, r3, #18
 8001a40:	4013      	ands	r3, r2
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x6fa>
 8001a44:	e03d      	b.n	8001ac2 <HAL_RCC_OscConfig+0x796>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a46:	4b21      	ldr	r3, [pc, #132]	; (8001acc <HAL_RCC_OscConfig+0x7a0>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	4b20      	ldr	r3, [pc, #128]	; (8001acc <HAL_RCC_OscConfig+0x7a0>)
 8001a4c:	4921      	ldr	r1, [pc, #132]	; (8001ad4 <HAL_RCC_OscConfig+0x7a8>)
 8001a4e:	400a      	ands	r2, r1
 8001a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a52:	f7ff f857 	bl	8000b04 <HAL_GetTick>
 8001a56:	0003      	movs	r3, r0
 8001a58:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a5c:	f7ff f852 	bl	8000b04 <HAL_GetTick>
 8001a60:	0002      	movs	r2, r0
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e02a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <HAL_RCC_OscConfig+0x7a0>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	049b      	lsls	r3, r3, #18
 8001a76:	4013      	ands	r3, r2
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x730>
 8001a7a:	e022      	b.n	8001ac2 <HAL_RCC_OscConfig+0x796>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_OscConfig+0x75c>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e01d      	b.n	8001ac4 <HAL_RCC_OscConfig+0x798>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a88:	4b10      	ldr	r3, [pc, #64]	; (8001acc <HAL_RCC_OscConfig+0x7a0>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	025b      	lsls	r3, r3, #9
 8001a94:	401a      	ands	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d10f      	bne.n	8001abe <HAL_RCC_OscConfig+0x792>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	23f0      	movs	r3, #240	; 0xf0
 8001aa2:	039b      	lsls	r3, r3, #14
 8001aa4:	401a      	ands	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_OscConfig+0x792>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	23c0      	movs	r3, #192	; 0xc0
 8001ab2:	041b      	lsls	r3, r3, #16
 8001ab4:	401a      	ands	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d001      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x796>
        {
          return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <HAL_RCC_OscConfig+0x798>
        }
      }
    }
  }
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b00a      	add	sp, #40	; 0x28
 8001aca:	bdb0      	pop	{r4, r5, r7, pc}
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	ff02ffff 	.word	0xff02ffff
 8001ad4:	feffffff 	.word	0xfeffffff

08001ad8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad8:	b5b0      	push	{r4, r5, r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e129      	b.n	8001d40 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aec:	4b96      	ldr	r3, [pc, #600]	; (8001d48 <HAL_RCC_ClockConfig+0x270>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2201      	movs	r2, #1
 8001af2:	4013      	ands	r3, r2
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d91e      	bls.n	8001b38 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afa:	4b93      	ldr	r3, [pc, #588]	; (8001d48 <HAL_RCC_ClockConfig+0x270>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2201      	movs	r2, #1
 8001b00:	4393      	bics	r3, r2
 8001b02:	0019      	movs	r1, r3
 8001b04:	4b90      	ldr	r3, [pc, #576]	; (8001d48 <HAL_RCC_ClockConfig+0x270>)
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b0c:	f7fe fffa 	bl	8000b04 <HAL_GetTick>
 8001b10:	0003      	movs	r3, r0
 8001b12:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b14:	e009      	b.n	8001b2a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b16:	f7fe fff5 	bl	8000b04 <HAL_GetTick>
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	4a8a      	ldr	r2, [pc, #552]	; (8001d4c <HAL_RCC_ClockConfig+0x274>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e10a      	b.n	8001d40 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2a:	4b87      	ldr	r3, [pc, #540]	; (8001d48 <HAL_RCC_ClockConfig+0x270>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	4013      	ands	r3, r2
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d1ee      	bne.n	8001b16 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d009      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b42:	4b83      	ldr	r3, [pc, #524]	; (8001d50 <HAL_RCC_ClockConfig+0x278>)
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	22f0      	movs	r2, #240	; 0xf0
 8001b48:	4393      	bics	r3, r2
 8001b4a:	0019      	movs	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	4b7f      	ldr	r3, [pc, #508]	; (8001d50 <HAL_RCC_ClockConfig+0x278>)
 8001b52:	430a      	orrs	r2, r1
 8001b54:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d100      	bne.n	8001b62 <HAL_RCC_ClockConfig+0x8a>
 8001b60:	e089      	b.n	8001c76 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d107      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b6a:	4b79      	ldr	r3, [pc, #484]	; (8001d50 <HAL_RCC_ClockConfig+0x278>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	029b      	lsls	r3, r3, #10
 8001b72:	4013      	ands	r3, r2
 8001b74:	d120      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e0e2      	b.n	8001d40 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	d107      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b82:	4b73      	ldr	r3, [pc, #460]	; (8001d50 <HAL_RCC_ClockConfig+0x278>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	2380      	movs	r3, #128	; 0x80
 8001b88:	049b      	lsls	r3, r3, #18
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d114      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e0d6      	b.n	8001d40 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d106      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b9a:	4b6d      	ldr	r3, [pc, #436]	; (8001d50 <HAL_RCC_ClockConfig+0x278>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2204      	movs	r2, #4
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d109      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0cb      	b.n	8001d40 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ba8:	4b69      	ldr	r3, [pc, #420]	; (8001d50 <HAL_RCC_ClockConfig+0x278>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d101      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0c3      	b.n	8001d40 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bb8:	4b65      	ldr	r3, [pc, #404]	; (8001d50 <HAL_RCC_ClockConfig+0x278>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	4393      	bics	r3, r2
 8001bc0:	0019      	movs	r1, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	4b62      	ldr	r3, [pc, #392]	; (8001d50 <HAL_RCC_ClockConfig+0x278>)
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bcc:	f7fe ff9a 	bl	8000b04 <HAL_GetTick>
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d111      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bdc:	e009      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bde:	f7fe ff91 	bl	8000b04 <HAL_GetTick>
 8001be2:	0002      	movs	r2, r0
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	4a58      	ldr	r2, [pc, #352]	; (8001d4c <HAL_RCC_ClockConfig+0x274>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e0a6      	b.n	8001d40 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bf2:	4b57      	ldr	r3, [pc, #348]	; (8001d50 <HAL_RCC_ClockConfig+0x278>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d1ef      	bne.n	8001bde <HAL_RCC_ClockConfig+0x106>
 8001bfe:	e03a      	b.n	8001c76 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	d111      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c08:	e009      	b.n	8001c1e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0a:	f7fe ff7b 	bl	8000b04 <HAL_GetTick>
 8001c0e:	0002      	movs	r2, r0
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	4a4d      	ldr	r2, [pc, #308]	; (8001d4c <HAL_RCC_ClockConfig+0x274>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e090      	b.n	8001d40 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c1e:	4b4c      	ldr	r3, [pc, #304]	; (8001d50 <HAL_RCC_ClockConfig+0x278>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	220c      	movs	r2, #12
 8001c24:	4013      	ands	r3, r2
 8001c26:	2b0c      	cmp	r3, #12
 8001c28:	d1ef      	bne.n	8001c0a <HAL_RCC_ClockConfig+0x132>
 8001c2a:	e024      	b.n	8001c76 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d11b      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c34:	e009      	b.n	8001c4a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c36:	f7fe ff65 	bl	8000b04 <HAL_GetTick>
 8001c3a:	0002      	movs	r2, r0
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	4a42      	ldr	r2, [pc, #264]	; (8001d4c <HAL_RCC_ClockConfig+0x274>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e07a      	b.n	8001d40 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c4a:	4b41      	ldr	r3, [pc, #260]	; (8001d50 <HAL_RCC_ClockConfig+0x278>)
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	220c      	movs	r2, #12
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d1ef      	bne.n	8001c36 <HAL_RCC_ClockConfig+0x15e>
 8001c56:	e00e      	b.n	8001c76 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c58:	f7fe ff54 	bl	8000b04 <HAL_GetTick>
 8001c5c:	0002      	movs	r2, r0
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	4a3a      	ldr	r2, [pc, #232]	; (8001d4c <HAL_RCC_ClockConfig+0x274>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e069      	b.n	8001d40 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c6c:	4b38      	ldr	r3, [pc, #224]	; (8001d50 <HAL_RCC_ClockConfig+0x278>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	220c      	movs	r2, #12
 8001c72:	4013      	ands	r3, r2
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c76:	4b34      	ldr	r3, [pc, #208]	; (8001d48 <HAL_RCC_ClockConfig+0x270>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d21e      	bcs.n	8001cc2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c84:	4b30      	ldr	r3, [pc, #192]	; (8001d48 <HAL_RCC_ClockConfig+0x270>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	4393      	bics	r3, r2
 8001c8c:	0019      	movs	r1, r3
 8001c8e:	4b2e      	ldr	r3, [pc, #184]	; (8001d48 <HAL_RCC_ClockConfig+0x270>)
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c96:	f7fe ff35 	bl	8000b04 <HAL_GetTick>
 8001c9a:	0003      	movs	r3, r0
 8001c9c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9e:	e009      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca0:	f7fe ff30 	bl	8000b04 <HAL_GetTick>
 8001ca4:	0002      	movs	r2, r0
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	4a28      	ldr	r2, [pc, #160]	; (8001d4c <HAL_RCC_ClockConfig+0x274>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e045      	b.n	8001d40 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb4:	4b24      	ldr	r3, [pc, #144]	; (8001d48 <HAL_RCC_ClockConfig+0x270>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4013      	ands	r3, r2
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d1ee      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2204      	movs	r2, #4
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d009      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ccc:	4b20      	ldr	r3, [pc, #128]	; (8001d50 <HAL_RCC_ClockConfig+0x278>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	4a20      	ldr	r2, [pc, #128]	; (8001d54 <HAL_RCC_ClockConfig+0x27c>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	0019      	movs	r1, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <HAL_RCC_ClockConfig+0x278>)
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2208      	movs	r2, #8
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d00a      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cea:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_RCC_ClockConfig+0x278>)
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	4a1a      	ldr	r2, [pc, #104]	; (8001d58 <HAL_RCC_ClockConfig+0x280>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	0019      	movs	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	00da      	lsls	r2, r3, #3
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <HAL_RCC_ClockConfig+0x278>)
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d00:	f000 f832 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8001d04:	0001      	movs	r1, r0
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_RCC_ClockConfig+0x278>)
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	091b      	lsrs	r3, r3, #4
 8001d0c:	220f      	movs	r2, #15
 8001d0e:	4013      	ands	r3, r2
 8001d10:	4a12      	ldr	r2, [pc, #72]	; (8001d5c <HAL_RCC_ClockConfig+0x284>)
 8001d12:	5cd3      	ldrb	r3, [r2, r3]
 8001d14:	000a      	movs	r2, r1
 8001d16:	40da      	lsrs	r2, r3
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <HAL_RCC_ClockConfig+0x288>)
 8001d1a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <HAL_RCC_ClockConfig+0x28c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	250b      	movs	r5, #11
 8001d22:	197c      	adds	r4, r7, r5
 8001d24:	0018      	movs	r0, r3
 8001d26:	f7fe fea7 	bl	8000a78 <HAL_InitTick>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001d2e:	197b      	adds	r3, r7, r5
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 8001d36:	230b      	movs	r3, #11
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	e000      	b.n	8001d40 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	0018      	movs	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b004      	add	sp, #16
 8001d46:	bdb0      	pop	{r4, r5, r7, pc}
 8001d48:	40022000 	.word	0x40022000
 8001d4c:	00001388 	.word	0x00001388
 8001d50:	40021000 	.word	0x40021000
 8001d54:	fffff8ff 	.word	0xfffff8ff
 8001d58:	ffffc7ff 	.word	0xffffc7ff
 8001d5c:	080030a8 	.word	0x080030a8
 8001d60:	20000000 	.word	0x20000000
 8001d64:	20000004 	.word	0x20000004

08001d68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d6a:	b08f      	sub	sp, #60	; 0x3c
 8001d6c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001d6e:	4b4a      	ldr	r3, [pc, #296]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x130>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d76:	230c      	movs	r3, #12
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d00f      	beq.n	8001d9e <HAL_RCC_GetSysClockFreq+0x36>
 8001d7e:	2b0c      	cmp	r3, #12
 8001d80:	d010      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0x3c>
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d000      	beq.n	8001d88 <HAL_RCC_GetSysClockFreq+0x20>
 8001d86:	e073      	b.n	8001e70 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d88:	4b43      	ldr	r3, [pc, #268]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x130>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2210      	movs	r2, #16
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d002      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001d92:	4b42      	ldr	r3, [pc, #264]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x134>)
 8001d94:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001d96:	e079      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8001d98:	4b41      	ldr	r3, [pc, #260]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d9a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d9c:	e076      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d9e:	4b41      	ldr	r3, [pc, #260]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001da0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001da2:	e073      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da6:	0c9a      	lsrs	r2, r3, #18
 8001da8:	230f      	movs	r3, #15
 8001daa:	401a      	ands	r2, r3
 8001dac:	4b3e      	ldr	r3, [pc, #248]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x140>)
 8001dae:	5c9b      	ldrb	r3, [r3, r2]
 8001db0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db4:	0d9a      	lsrs	r2, r3, #22
 8001db6:	2303      	movs	r3, #3
 8001db8:	4013      	ands	r3, r2
 8001dba:	3301      	adds	r3, #1
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dbe:	4b36      	ldr	r3, [pc, #216]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x130>)
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	025b      	lsls	r3, r3, #9
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d019      	beq.n	8001dfe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dcc:	61bb      	str	r3, [r7, #24]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
 8001dd2:	4a34      	ldr	r2, [pc, #208]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	69b8      	ldr	r0, [r7, #24]
 8001dd8:	69f9      	ldr	r1, [r7, #28]
 8001dda:	f7fe fa41 	bl	8000260 <__aeabi_lmul>
 8001dde:	0003      	movs	r3, r0
 8001de0:	000c      	movs	r4, r1
 8001de2:	0018      	movs	r0, r3
 8001de4:	0021      	movs	r1, r4
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f7fe fa15 	bl	8000220 <__aeabi_uldivmod>
 8001df6:	0003      	movs	r3, r0
 8001df8:	000c      	movs	r4, r1
 8001dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8001dfc:	e035      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001dfe:	4b26      	ldr	r3, [pc, #152]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x130>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2210      	movs	r2, #16
 8001e04:	4013      	ands	r3, r2
 8001e06:	d019      	beq.n	8001e3c <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	4a22      	ldr	r2, [pc, #136]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x134>)
 8001e12:	2300      	movs	r3, #0
 8001e14:	68b8      	ldr	r0, [r7, #8]
 8001e16:	68f9      	ldr	r1, [r7, #12]
 8001e18:	f7fe fa22 	bl	8000260 <__aeabi_lmul>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	000c      	movs	r4, r1
 8001e20:	0018      	movs	r0, r3
 8001e22:	0021      	movs	r1, r4
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	603b      	str	r3, [r7, #0]
 8001e28:	2300      	movs	r3, #0
 8001e2a:	607b      	str	r3, [r7, #4]
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f7fe f9f6 	bl	8000220 <__aeabi_uldivmod>
 8001e34:	0003      	movs	r3, r0
 8001e36:	000c      	movs	r4, r1
 8001e38:	637b      	str	r3, [r7, #52]	; 0x34
 8001e3a:	e016      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3e:	0018      	movs	r0, r3
 8001e40:	2300      	movs	r3, #0
 8001e42:	0019      	movs	r1, r3
 8001e44:	4a16      	ldr	r2, [pc, #88]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e46:	2300      	movs	r3, #0
 8001e48:	f7fe fa0a 	bl	8000260 <__aeabi_lmul>
 8001e4c:	0003      	movs	r3, r0
 8001e4e:	000c      	movs	r4, r1
 8001e50:	0018      	movs	r0, r3
 8001e52:	0021      	movs	r1, r4
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	001d      	movs	r5, r3
 8001e58:	2300      	movs	r3, #0
 8001e5a:	001e      	movs	r6, r3
 8001e5c:	002a      	movs	r2, r5
 8001e5e:	0033      	movs	r3, r6
 8001e60:	f7fe f9de 	bl	8000220 <__aeabi_uldivmod>
 8001e64:	0003      	movs	r3, r0
 8001e66:	000c      	movs	r4, r1
 8001e68:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e6e:	e00d      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x130>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	0b5b      	lsrs	r3, r3, #13
 8001e76:	2207      	movs	r2, #7
 8001e78:	4013      	ands	r3, r2
 8001e7a:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	2280      	movs	r2, #128	; 0x80
 8001e82:	0212      	lsls	r2, r2, #8
 8001e84:	409a      	lsls	r2, r3
 8001e86:	0013      	movs	r3, r2
 8001e88:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e8a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e8e:	0018      	movs	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b00f      	add	sp, #60	; 0x3c
 8001e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	003d0900 	.word	0x003d0900
 8001ea0:	00f42400 	.word	0x00f42400
 8001ea4:	007a1200 	.word	0x007a1200
 8001ea8:	080030c0 	.word	0x080030c0

08001eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb0:	4b02      	ldr	r3, [pc, #8]	; (8001ebc <HAL_RCC_GetHCLKFreq+0x10>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
}
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	20000000 	.word	0x20000000

08001ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ec4:	f7ff fff2 	bl	8001eac <HAL_RCC_GetHCLKFreq>
 8001ec8:	0001      	movs	r1, r0
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	0a1b      	lsrs	r3, r3, #8
 8001ed0:	2207      	movs	r2, #7
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	4a04      	ldr	r2, [pc, #16]	; (8001ee8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ed6:	5cd3      	ldrb	r3, [r2, r3]
 8001ed8:	40d9      	lsrs	r1, r3
 8001eda:	000b      	movs	r3, r1
}
 8001edc:	0018      	movs	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	080030b8 	.word	0x080030b8

08001eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ef0:	f7ff ffdc 	bl	8001eac <HAL_RCC_GetHCLKFreq>
 8001ef4:	0001      	movs	r1, r0
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	0adb      	lsrs	r3, r3, #11
 8001efc:	2207      	movs	r2, #7
 8001efe:	4013      	ands	r3, r2
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f02:	5cd3      	ldrb	r3, [r2, r3]
 8001f04:	40d9      	lsrs	r1, r3
 8001f06:	000b      	movs	r3, r1
}
 8001f08:	0018      	movs	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	40021000 	.word	0x40021000
 8001f14:	080030b8 	.word	0x080030b8

08001f18 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001f20:	2317      	movs	r3, #23
 8001f22:	18fb      	adds	r3, r7, r3
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d106      	bne.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	2380      	movs	r3, #128	; 0x80
 8001f38:	011b      	lsls	r3, r3, #4
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d100      	bne.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001f3e:	e0d9      	b.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f40:	4ba4      	ldr	r3, [pc, #656]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	055b      	lsls	r3, r3, #21
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d10a      	bne.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f4c:	4ba1      	ldr	r3, [pc, #644]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f50:	4ba0      	ldr	r3, [pc, #640]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f52:	2180      	movs	r1, #128	; 0x80
 8001f54:	0549      	lsls	r1, r1, #21
 8001f56:	430a      	orrs	r2, r1
 8001f58:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001f5a:	2317      	movs	r3, #23
 8001f5c:	18fb      	adds	r3, r7, r3
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f62:	4b9d      	ldr	r3, [pc, #628]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d11a      	bne.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f6e:	4b9a      	ldr	r3, [pc, #616]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	4b99      	ldr	r3, [pc, #612]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001f74:	2180      	movs	r1, #128	; 0x80
 8001f76:	0049      	lsls	r1, r1, #1
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7c:	f7fe fdc2 	bl	8000b04 <HAL_GetTick>
 8001f80:	0003      	movs	r3, r0
 8001f82:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f84:	e008      	b.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f86:	f7fe fdbd 	bl	8000b04 <HAL_GetTick>
 8001f8a:	0002      	movs	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b64      	cmp	r3, #100	; 0x64
 8001f92:	d901      	bls.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e118      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f98:	4b8f      	ldr	r3, [pc, #572]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d0f0      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001fa4:	4b8b      	ldr	r3, [pc, #556]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	23c0      	movs	r3, #192	; 0xc0
 8001faa:	039b      	lsls	r3, r3, #14
 8001fac:	4013      	ands	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	23c0      	movs	r3, #192	; 0xc0
 8001fb6:	039b      	lsls	r3, r3, #14
 8001fb8:	4013      	ands	r3, r2
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d107      	bne.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	23c0      	movs	r3, #192	; 0xc0
 8001fc6:	039b      	lsls	r3, r3, #14
 8001fc8:	4013      	ands	r3, r2
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d013      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	23c0      	movs	r3, #192	; 0xc0
 8001fd6:	029b      	lsls	r3, r3, #10
 8001fd8:	401a      	ands	r2, r3
 8001fda:	23c0      	movs	r3, #192	; 0xc0
 8001fdc:	029b      	lsls	r3, r3, #10
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d10a      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001fe2:	4b7c      	ldr	r3, [pc, #496]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	029b      	lsls	r3, r3, #10
 8001fea:	401a      	ands	r2, r3
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	029b      	lsls	r3, r3, #10
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0e8      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001ff8:	4b76      	ldr	r3, [pc, #472]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ffa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ffc:	23c0      	movs	r3, #192	; 0xc0
 8001ffe:	029b      	lsls	r3, r3, #10
 8002000:	4013      	ands	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d049      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	23c0      	movs	r3, #192	; 0xc0
 8002010:	029b      	lsls	r3, r3, #10
 8002012:	4013      	ands	r3, r2
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	429a      	cmp	r2, r3
 8002018:	d004      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2220      	movs	r2, #32
 8002020:	4013      	ands	r3, r2
 8002022:	d10d      	bne.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	23c0      	movs	r3, #192	; 0xc0
 800202a:	029b      	lsls	r3, r3, #10
 800202c:	4013      	ands	r3, r2
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	429a      	cmp	r2, r3
 8002032:	d034      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	2380      	movs	r3, #128	; 0x80
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	4013      	ands	r3, r2
 800203e:	d02e      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002040:	4b64      	ldr	r3, [pc, #400]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002044:	4a65      	ldr	r2, [pc, #404]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002046:	4013      	ands	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800204a:	4b62      	ldr	r3, [pc, #392]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800204c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800204e:	4b61      	ldr	r3, [pc, #388]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002050:	2180      	movs	r1, #128	; 0x80
 8002052:	0309      	lsls	r1, r1, #12
 8002054:	430a      	orrs	r2, r1
 8002056:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002058:	4b5e      	ldr	r3, [pc, #376]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800205a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800205c:	4b5d      	ldr	r3, [pc, #372]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800205e:	4960      	ldr	r1, [pc, #384]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002060:	400a      	ands	r2, r1
 8002062:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002064:	4b5b      	ldr	r3, [pc, #364]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	2380      	movs	r3, #128	; 0x80
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	4013      	ands	r3, r2
 8002072:	d014      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7fe fd46 	bl	8000b04 <HAL_GetTick>
 8002078:	0003      	movs	r3, r0
 800207a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800207c:	e009      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800207e:	f7fe fd41 	bl	8000b04 <HAL_GetTick>
 8002082:	0002      	movs	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	4a56      	ldr	r2, [pc, #344]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d901      	bls.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e09b      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002092:	4b50      	ldr	r3, [pc, #320]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002094:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4013      	ands	r3, r2
 800209c:	d0ef      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	23c0      	movs	r3, #192	; 0xc0
 80020a4:	029b      	lsls	r3, r3, #10
 80020a6:	401a      	ands	r2, r3
 80020a8:	23c0      	movs	r3, #192	; 0xc0
 80020aa:	029b      	lsls	r3, r3, #10
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d10c      	bne.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80020b0:	4b48      	ldr	r3, [pc, #288]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a4c      	ldr	r2, [pc, #304]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	0019      	movs	r1, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	23c0      	movs	r3, #192	; 0xc0
 80020c0:	039b      	lsls	r3, r3, #14
 80020c2:	401a      	ands	r2, r3
 80020c4:	4b43      	ldr	r3, [pc, #268]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020c6:	430a      	orrs	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	4b42      	ldr	r3, [pc, #264]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020cc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	23c0      	movs	r3, #192	; 0xc0
 80020d4:	029b      	lsls	r3, r3, #10
 80020d6:	401a      	ands	r2, r3
 80020d8:	4b3e      	ldr	r3, [pc, #248]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020da:	430a      	orrs	r2, r1
 80020dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020de:	2317      	movs	r3, #23
 80020e0:	18fb      	adds	r3, r7, r3
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d105      	bne.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e8:	4b3a      	ldr	r3, [pc, #232]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020ec:	4b39      	ldr	r3, [pc, #228]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020ee:	493f      	ldr	r1, [pc, #252]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80020f0:	400a      	ands	r2, r1
 80020f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2201      	movs	r2, #1
 80020fa:	4013      	ands	r3, r2
 80020fc:	d009      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020fe:	4b35      	ldr	r3, [pc, #212]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002102:	2203      	movs	r2, #3
 8002104:	4393      	bics	r3, r2
 8002106:	0019      	movs	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	4b31      	ldr	r3, [pc, #196]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800210e:	430a      	orrs	r2, r1
 8002110:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2202      	movs	r2, #2
 8002118:	4013      	ands	r3, r2
 800211a:	d009      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800211c:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800211e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002120:	220c      	movs	r2, #12
 8002122:	4393      	bics	r3, r2
 8002124:	0019      	movs	r1, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	691a      	ldr	r2, [r3, #16]
 800212a:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800212c:	430a      	orrs	r2, r1
 800212e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2204      	movs	r2, #4
 8002136:	4013      	ands	r3, r2
 8002138:	d009      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800213a:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800213c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213e:	4a2c      	ldr	r2, [pc, #176]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002140:	4013      	ands	r3, r2
 8002142:	0019      	movs	r1, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	695a      	ldr	r2, [r3, #20]
 8002148:	4b22      	ldr	r3, [pc, #136]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800214a:	430a      	orrs	r2, r1
 800214c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2208      	movs	r2, #8
 8002154:	4013      	ands	r3, r2
 8002156:	d009      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002158:	4b1e      	ldr	r3, [pc, #120]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800215a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215c:	4a25      	ldr	r2, [pc, #148]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800215e:	4013      	ands	r3, r2
 8002160:	0019      	movs	r1, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699a      	ldr	r2, [r3, #24]
 8002166:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002168:	430a      	orrs	r2, r1
 800216a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	4013      	ands	r3, r2
 8002176:	d009      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002178:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800217a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217c:	4a17      	ldr	r2, [pc, #92]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800217e:	4013      	ands	r3, r2
 8002180:	0019      	movs	r1, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69da      	ldr	r2, [r3, #28]
 8002186:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002188:	430a      	orrs	r2, r1
 800218a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2240      	movs	r2, #64	; 0x40
 8002192:	4013      	ands	r3, r2
 8002194:	d009      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002196:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219a:	4a17      	ldr	r2, [pc, #92]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800219c:	4013      	ands	r3, r2
 800219e:	0019      	movs	r1, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80021a6:	430a      	orrs	r2, r1
 80021a8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2280      	movs	r2, #128	; 0x80
 80021b0:	4013      	ands	r3, r2
 80021b2:	d009      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80021b4:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80021b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b8:	4a10      	ldr	r2, [pc, #64]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	0019      	movs	r1, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1a      	ldr	r2, [r3, #32]
 80021c2:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80021c4:	430a      	orrs	r2, r1
 80021c6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	0018      	movs	r0, r3
 80021cc:	46bd      	mov	sp, r7
 80021ce:	b006      	add	sp, #24
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40007000 	.word	0x40007000
 80021dc:	fffcffff 	.word	0xfffcffff
 80021e0:	fff7ffff 	.word	0xfff7ffff
 80021e4:	00001388 	.word	0x00001388
 80021e8:	ffcfffff 	.word	0xffcfffff
 80021ec:	efffffff 	.word	0xefffffff
 80021f0:	fffff3ff 	.word	0xfffff3ff
 80021f4:	ffffcfff 	.word	0xffffcfff
 80021f8:	fbffffff 	.word	0xfbffffff
 80021fc:	fff3ffff 	.word	0xfff3ffff

08002200 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e044      	b.n	800229c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002216:	2b00      	cmp	r3, #0
 8002218:	d107      	bne.n	800222a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2274      	movs	r2, #116	; 0x74
 800221e:	2100      	movs	r1, #0
 8002220:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	0018      	movs	r0, r3
 8002226:	f7fe fa77 	bl	8000718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2224      	movs	r2, #36	; 0x24
 800222e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2101      	movs	r1, #1
 800223c:	438a      	bics	r2, r1
 800223e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	0018      	movs	r0, r3
 8002244:	f000 fa56 	bl	80026f4 <UART_SetConfig>
 8002248:	0003      	movs	r3, r0
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e024      	b.n	800229c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	0018      	movs	r0, r3
 800225e:	f000 fd05 	bl	8002c6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	490d      	ldr	r1, [pc, #52]	; (80022a4 <HAL_UART_Init+0xa4>)
 800226e:	400a      	ands	r2, r1
 8002270:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	212a      	movs	r1, #42	; 0x2a
 800227e:	438a      	bics	r2, r1
 8002280:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2101      	movs	r1, #1
 800228e:	430a      	orrs	r2, r1
 8002290:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	0018      	movs	r0, r3
 8002296:	f000 fd9d 	bl	8002dd4 <UART_CheckIdleState>
 800229a:	0003      	movs	r3, r0
}
 800229c:	0018      	movs	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	b002      	add	sp, #8
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	ffffb7ff 	.word	0xffffb7ff

080022a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	4ab6      	ldr	r2, [pc, #728]	; (80025a4 <HAL_UART_IRQHandler+0x2fc>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d112      	bne.n	80022fc <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	2220      	movs	r2, #32
 80022da:	4013      	ands	r3, r2
 80022dc:	d00e      	beq.n	80022fc <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	2220      	movs	r2, #32
 80022e2:	4013      	ands	r3, r2
 80022e4:	d00a      	beq.n	80022fc <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d100      	bne.n	80022f0 <HAL_UART_IRQHandler+0x48>
 80022ee:	e1d6      	b.n	800269e <HAL_UART_IRQHandler+0x3f6>
      {
        huart->RxISR(huart);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	0010      	movs	r0, r2
 80022f8:	4798      	blx	r3
      }
      return;
 80022fa:	e1d0      	b.n	800269e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d100      	bne.n	8002304 <HAL_UART_IRQHandler+0x5c>
 8002302:	e0d9      	b.n	80024b8 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	2201      	movs	r2, #1
 8002308:	4013      	ands	r3, r2
 800230a:	d104      	bne.n	8002316 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	4aa6      	ldr	r2, [pc, #664]	; (80025a8 <HAL_UART_IRQHandler+0x300>)
 8002310:	4013      	ands	r3, r2
 8002312:	d100      	bne.n	8002316 <HAL_UART_IRQHandler+0x6e>
 8002314:	e0d0      	b.n	80024b8 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	2201      	movs	r2, #1
 800231a:	4013      	ands	r3, r2
 800231c:	d010      	beq.n	8002340 <HAL_UART_IRQHandler+0x98>
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4013      	ands	r3, r2
 8002326:	d00b      	beq.n	8002340 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2201      	movs	r2, #1
 800232e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2280      	movs	r2, #128	; 0x80
 8002334:	589b      	ldr	r3, [r3, r2]
 8002336:	2201      	movs	r2, #1
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2180      	movs	r1, #128	; 0x80
 800233e:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	2202      	movs	r2, #2
 8002344:	4013      	ands	r3, r2
 8002346:	d00f      	beq.n	8002368 <HAL_UART_IRQHandler+0xc0>
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	2201      	movs	r2, #1
 800234c:	4013      	ands	r3, r2
 800234e:	d00b      	beq.n	8002368 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2202      	movs	r2, #2
 8002356:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2280      	movs	r2, #128	; 0x80
 800235c:	589b      	ldr	r3, [r3, r2]
 800235e:	2204      	movs	r2, #4
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2180      	movs	r1, #128	; 0x80
 8002366:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	2204      	movs	r2, #4
 800236c:	4013      	ands	r3, r2
 800236e:	d00f      	beq.n	8002390 <HAL_UART_IRQHandler+0xe8>
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	2201      	movs	r2, #1
 8002374:	4013      	ands	r3, r2
 8002376:	d00b      	beq.n	8002390 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2204      	movs	r2, #4
 800237e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2280      	movs	r2, #128	; 0x80
 8002384:	589b      	ldr	r3, [r3, r2]
 8002386:	2202      	movs	r2, #2
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2180      	movs	r1, #128	; 0x80
 800238e:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	2208      	movs	r2, #8
 8002394:	4013      	ands	r3, r2
 8002396:	d013      	beq.n	80023c0 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	2220      	movs	r2, #32
 800239c:	4013      	ands	r3, r2
 800239e:	d103      	bne.n	80023a8 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2201      	movs	r2, #1
 80023a4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80023a6:	d00b      	beq.n	80023c0 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2208      	movs	r2, #8
 80023ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2280      	movs	r2, #128	; 0x80
 80023b4:	589b      	ldr	r3, [r3, r2]
 80023b6:	2208      	movs	r2, #8
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2180      	movs	r1, #128	; 0x80
 80023be:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80023c0:	69fa      	ldr	r2, [r7, #28]
 80023c2:	2380      	movs	r3, #128	; 0x80
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	4013      	ands	r3, r2
 80023c8:	d011      	beq.n	80023ee <HAL_UART_IRQHandler+0x146>
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	04db      	lsls	r3, r3, #19
 80023d0:	4013      	ands	r3, r2
 80023d2:	d00c      	beq.n	80023ee <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2280      	movs	r2, #128	; 0x80
 80023da:	0112      	lsls	r2, r2, #4
 80023dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2280      	movs	r2, #128	; 0x80
 80023e2:	589b      	ldr	r3, [r3, r2]
 80023e4:	2220      	movs	r2, #32
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2180      	movs	r1, #128	; 0x80
 80023ec:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2280      	movs	r2, #128	; 0x80
 80023f2:	589b      	ldr	r3, [r3, r2]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d100      	bne.n	80023fa <HAL_UART_IRQHandler+0x152>
 80023f8:	e153      	b.n	80026a2 <HAL_UART_IRQHandler+0x3fa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	2220      	movs	r2, #32
 80023fe:	4013      	ands	r3, r2
 8002400:	d00c      	beq.n	800241c <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	2220      	movs	r2, #32
 8002406:	4013      	ands	r3, r2
 8002408:	d008      	beq.n	800241c <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800240e:	2b00      	cmp	r3, #0
 8002410:	d004      	beq.n	800241c <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	0010      	movs	r0, r2
 800241a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2280      	movs	r2, #128	; 0x80
 8002420:	589b      	ldr	r3, [r3, r2]
 8002422:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2240      	movs	r2, #64	; 0x40
 800242c:	4013      	ands	r3, r2
 800242e:	2b40      	cmp	r3, #64	; 0x40
 8002430:	d003      	beq.n	800243a <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2228      	movs	r2, #40	; 0x28
 8002436:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002438:	d033      	beq.n	80024a2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	0018      	movs	r0, r3
 800243e:	f000 fd91 	bl	8002f64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2240      	movs	r2, #64	; 0x40
 800244a:	4013      	ands	r3, r2
 800244c:	2b40      	cmp	r3, #64	; 0x40
 800244e:	d123      	bne.n	8002498 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2140      	movs	r1, #64	; 0x40
 800245c:	438a      	bics	r2, r1
 800245e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002464:	2b00      	cmp	r3, #0
 8002466:	d012      	beq.n	800248e <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	4a4f      	ldr	r2, [pc, #316]	; (80025ac <HAL_UART_IRQHandler+0x304>)
 800246e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002474:	0018      	movs	r0, r3
 8002476:	f7fe fce5 	bl	8000e44 <HAL_DMA_Abort_IT>
 800247a:	1e03      	subs	r3, r0, #0
 800247c:	d01a      	beq.n	80024b4 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002488:	0018      	movs	r0, r3
 800248a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800248c:	e012      	b.n	80024b4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	0018      	movs	r0, r3
 8002492:	f000 f91b 	bl	80026cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002496:	e00d      	b.n	80024b4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	0018      	movs	r0, r3
 800249c:	f000 f916 	bl	80026cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024a0:	e008      	b.n	80024b4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	0018      	movs	r0, r3
 80024a6:	f000 f911 	bl	80026cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2280      	movs	r2, #128	; 0x80
 80024ae:	2100      	movs	r1, #0
 80024b0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80024b2:	e0f6      	b.n	80026a2 <HAL_UART_IRQHandler+0x3fa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024b4:	46c0      	nop			; (mov r8, r8)
    return;
 80024b6:	e0f4      	b.n	80026a2 <HAL_UART_IRQHandler+0x3fa>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d000      	beq.n	80024c2 <HAL_UART_IRQHandler+0x21a>
 80024c0:	e0b9      	b.n	8002636 <HAL_UART_IRQHandler+0x38e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	2210      	movs	r2, #16
 80024c6:	4013      	ands	r3, r2
 80024c8:	d100      	bne.n	80024cc <HAL_UART_IRQHandler+0x224>
 80024ca:	e0b4      	b.n	8002636 <HAL_UART_IRQHandler+0x38e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	2210      	movs	r2, #16
 80024d0:	4013      	ands	r3, r2
 80024d2:	d100      	bne.n	80024d6 <HAL_UART_IRQHandler+0x22e>
 80024d4:	e0af      	b.n	8002636 <HAL_UART_IRQHandler+0x38e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2210      	movs	r2, #16
 80024dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2240      	movs	r2, #64	; 0x40
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b40      	cmp	r3, #64	; 0x40
 80024ea:	d163      	bne.n	80025b4 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	2108      	movs	r1, #8
 80024f6:	187b      	adds	r3, r7, r1
 80024f8:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 80024fa:	187b      	adds	r3, r7, r1
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d100      	bne.n	8002504 <HAL_UART_IRQHandler+0x25c>
 8002502:	e0d0      	b.n	80026a6 <HAL_UART_IRQHandler+0x3fe>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2258      	movs	r2, #88	; 0x58
 8002508:	5a9b      	ldrh	r3, [r3, r2]
 800250a:	2208      	movs	r2, #8
 800250c:	18ba      	adds	r2, r7, r2
 800250e:	8812      	ldrh	r2, [r2, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d300      	bcc.n	8002516 <HAL_UART_IRQHandler+0x26e>
 8002514:	e0c7      	b.n	80026a6 <HAL_UART_IRQHandler+0x3fe>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2208      	movs	r2, #8
 800251a:	18ba      	adds	r2, r7, r2
 800251c:	215a      	movs	r1, #90	; 0x5a
 800251e:	8812      	ldrh	r2, [r2, #0]
 8002520:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2220      	movs	r2, #32
 800252c:	4013      	ands	r3, r2
 800252e:	d12a      	bne.n	8002586 <HAL_UART_IRQHandler+0x2de>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	491d      	ldr	r1, [pc, #116]	; (80025b0 <HAL_UART_IRQHandler+0x308>)
 800253c:	400a      	ands	r2, r1
 800253e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2101      	movs	r1, #1
 800254c:	438a      	bics	r2, r1
 800254e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2140      	movs	r1, #64	; 0x40
 800255c:	438a      	bics	r2, r1
 800255e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2220      	movs	r2, #32
 8002564:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2110      	movs	r1, #16
 8002578:	438a      	bics	r2, r1
 800257a:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002580:	0018      	movs	r0, r3
 8002582:	f7fe fc1f 	bl	8000dc4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2258      	movs	r2, #88	; 0x58
 800258a:	5a9a      	ldrh	r2, [r3, r2]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	215a      	movs	r1, #90	; 0x5a
 8002590:	5a5b      	ldrh	r3, [r3, r1]
 8002592:	b29b      	uxth	r3, r3
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	b29a      	uxth	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	0011      	movs	r1, r2
 800259c:	0018      	movs	r0, r3
 800259e:	f000 f89d 	bl	80026dc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80025a2:	e080      	b.n	80026a6 <HAL_UART_IRQHandler+0x3fe>
 80025a4:	0000080f 	.word	0x0000080f
 80025a8:	04000120 	.word	0x04000120
 80025ac:	08002fc5 	.word	0x08002fc5
 80025b0:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2258      	movs	r2, #88	; 0x58
 80025b8:	5a99      	ldrh	r1, [r3, r2]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	225a      	movs	r2, #90	; 0x5a
 80025be:	5a9b      	ldrh	r3, [r3, r2]
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	230a      	movs	r3, #10
 80025c4:	18fb      	adds	r3, r7, r3
 80025c6:	1a8a      	subs	r2, r1, r2
 80025c8:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	225a      	movs	r2, #90	; 0x5a
 80025ce:	5a9b      	ldrh	r3, [r3, r2]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d100      	bne.n	80025d8 <HAL_UART_IRQHandler+0x330>
 80025d6:	e068      	b.n	80026aa <HAL_UART_IRQHandler+0x402>
          &&(nb_rx_data > 0U) )
 80025d8:	230a      	movs	r3, #10
 80025da:	18fb      	adds	r3, r7, r3
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d063      	beq.n	80026aa <HAL_UART_IRQHandler+0x402>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4932      	ldr	r1, [pc, #200]	; (80026b8 <HAL_UART_IRQHandler+0x410>)
 80025ee:	400a      	ands	r2, r1
 80025f0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2101      	movs	r1, #1
 80025fe:	438a      	bics	r2, r1
 8002600:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2220      	movs	r2, #32
 8002606:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2110      	movs	r1, #16
 8002620:	438a      	bics	r2, r1
 8002622:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002624:	230a      	movs	r3, #10
 8002626:	18fb      	adds	r3, r7, r3
 8002628:	881a      	ldrh	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	0011      	movs	r1, r2
 800262e:	0018      	movs	r0, r3
 8002630:	f000 f854 	bl	80026dc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002634:	e039      	b.n	80026aa <HAL_UART_IRQHandler+0x402>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002636:	69fa      	ldr	r2, [r7, #28]
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	035b      	lsls	r3, r3, #13
 800263c:	4013      	ands	r3, r2
 800263e:	d00e      	beq.n	800265e <HAL_UART_IRQHandler+0x3b6>
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	2380      	movs	r3, #128	; 0x80
 8002644:	03db      	lsls	r3, r3, #15
 8002646:	4013      	ands	r3, r2
 8002648:	d009      	beq.n	800265e <HAL_UART_IRQHandler+0x3b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2280      	movs	r2, #128	; 0x80
 8002650:	0352      	lsls	r2, r2, #13
 8002652:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	0018      	movs	r0, r3
 8002658:	f000 fce5 	bl	8003026 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800265c:	e028      	b.n	80026b0 <HAL_UART_IRQHandler+0x408>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	2280      	movs	r2, #128	; 0x80
 8002662:	4013      	ands	r3, r2
 8002664:	d00d      	beq.n	8002682 <HAL_UART_IRQHandler+0x3da>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	2280      	movs	r2, #128	; 0x80
 800266a:	4013      	ands	r3, r2
 800266c:	d009      	beq.n	8002682 <HAL_UART_IRQHandler+0x3da>
  {
    if (huart->TxISR != NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002672:	2b00      	cmp	r3, #0
 8002674:	d01b      	beq.n	80026ae <HAL_UART_IRQHandler+0x406>
    {
      huart->TxISR(huart);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	0010      	movs	r0, r2
 800267e:	4798      	blx	r3
    }
    return;
 8002680:	e015      	b.n	80026ae <HAL_UART_IRQHandler+0x406>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	2240      	movs	r2, #64	; 0x40
 8002686:	4013      	ands	r3, r2
 8002688:	d012      	beq.n	80026b0 <HAL_UART_IRQHandler+0x408>
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2240      	movs	r2, #64	; 0x40
 800268e:	4013      	ands	r3, r2
 8002690:	d00e      	beq.n	80026b0 <HAL_UART_IRQHandler+0x408>
  {
    UART_EndTransmit_IT(huart);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	0018      	movs	r0, r3
 8002696:	f000 fcac 	bl	8002ff2 <UART_EndTransmit_IT>
    return;
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	e008      	b.n	80026b0 <HAL_UART_IRQHandler+0x408>
      return;
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	e006      	b.n	80026b0 <HAL_UART_IRQHandler+0x408>
    return;
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	e004      	b.n	80026b0 <HAL_UART_IRQHandler+0x408>
      return;
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	e002      	b.n	80026b0 <HAL_UART_IRQHandler+0x408>
      return;
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	e000      	b.n	80026b0 <HAL_UART_IRQHandler+0x408>
    return;
 80026ae:	46c0      	nop			; (mov r8, r8)
  }

}
 80026b0:	46bd      	mov	sp, r7
 80026b2:	b008      	add	sp, #32
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	fffffedf 	.word	0xfffffedf

080026bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80026c4:	46c0      	nop			; (mov r8, r8)
 80026c6:	46bd      	mov	sp, r7
 80026c8:	b002      	add	sp, #8
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80026d4:	46c0      	nop			; (mov r8, r8)
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b002      	add	sp, #8
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	000a      	movs	r2, r1
 80026e6:	1cbb      	adds	r3, r7, #2
 80026e8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b002      	add	sp, #8
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026f4:	b5b0      	push	{r4, r5, r7, lr}
 80026f6:	b08e      	sub	sp, #56	; 0x38
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026fc:	231a      	movs	r3, #26
 80026fe:	2218      	movs	r2, #24
 8002700:	4694      	mov	ip, r2
 8002702:	44bc      	add	ip, r7
 8002704:	4463      	add	r3, ip
 8002706:	2200      	movs	r2, #0
 8002708:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	431a      	orrs	r2, r3
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	431a      	orrs	r2, r3
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	4313      	orrs	r3, r2
 8002720:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4acb      	ldr	r2, [pc, #812]	; (8002a58 <UART_SetConfig+0x364>)
 800272a:	4013      	ands	r3, r2
 800272c:	0019      	movs	r1, r3
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002734:	430a      	orrs	r2, r1
 8002736:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	4ac7      	ldr	r2, [pc, #796]	; (8002a5c <UART_SetConfig+0x368>)
 8002740:	4013      	ands	r3, r2
 8002742:	0019      	movs	r1, r3
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4ac1      	ldr	r2, [pc, #772]	; (8002a60 <UART_SetConfig+0x36c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d004      	beq.n	800276a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002766:	4313      	orrs	r3, r2
 8002768:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	4abc      	ldr	r2, [pc, #752]	; (8002a64 <UART_SetConfig+0x370>)
 8002772:	4013      	ands	r3, r2
 8002774:	0019      	movs	r1, r3
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800277c:	430a      	orrs	r2, r1
 800277e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4ab8      	ldr	r2, [pc, #736]	; (8002a68 <UART_SetConfig+0x374>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d134      	bne.n	80027f4 <UART_SetConfig+0x100>
 800278a:	4bb8      	ldr	r3, [pc, #736]	; (8002a6c <UART_SetConfig+0x378>)
 800278c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278e:	2203      	movs	r2, #3
 8002790:	4013      	ands	r3, r2
 8002792:	2b01      	cmp	r3, #1
 8002794:	d015      	beq.n	80027c2 <UART_SetConfig+0xce>
 8002796:	d304      	bcc.n	80027a2 <UART_SetConfig+0xae>
 8002798:	2b02      	cmp	r3, #2
 800279a:	d00a      	beq.n	80027b2 <UART_SetConfig+0xbe>
 800279c:	2b03      	cmp	r3, #3
 800279e:	d018      	beq.n	80027d2 <UART_SetConfig+0xde>
 80027a0:	e01f      	b.n	80027e2 <UART_SetConfig+0xee>
 80027a2:	231b      	movs	r3, #27
 80027a4:	2218      	movs	r2, #24
 80027a6:	4694      	mov	ip, r2
 80027a8:	44bc      	add	ip, r7
 80027aa:	4463      	add	r3, ip
 80027ac:	2201      	movs	r2, #1
 80027ae:	701a      	strb	r2, [r3, #0]
 80027b0:	e0c5      	b.n	800293e <UART_SetConfig+0x24a>
 80027b2:	231b      	movs	r3, #27
 80027b4:	2218      	movs	r2, #24
 80027b6:	4694      	mov	ip, r2
 80027b8:	44bc      	add	ip, r7
 80027ba:	4463      	add	r3, ip
 80027bc:	2202      	movs	r2, #2
 80027be:	701a      	strb	r2, [r3, #0]
 80027c0:	e0bd      	b.n	800293e <UART_SetConfig+0x24a>
 80027c2:	231b      	movs	r3, #27
 80027c4:	2218      	movs	r2, #24
 80027c6:	4694      	mov	ip, r2
 80027c8:	44bc      	add	ip, r7
 80027ca:	4463      	add	r3, ip
 80027cc:	2204      	movs	r2, #4
 80027ce:	701a      	strb	r2, [r3, #0]
 80027d0:	e0b5      	b.n	800293e <UART_SetConfig+0x24a>
 80027d2:	231b      	movs	r3, #27
 80027d4:	2218      	movs	r2, #24
 80027d6:	4694      	mov	ip, r2
 80027d8:	44bc      	add	ip, r7
 80027da:	4463      	add	r3, ip
 80027dc:	2208      	movs	r2, #8
 80027de:	701a      	strb	r2, [r3, #0]
 80027e0:	e0ad      	b.n	800293e <UART_SetConfig+0x24a>
 80027e2:	231b      	movs	r3, #27
 80027e4:	2218      	movs	r2, #24
 80027e6:	4694      	mov	ip, r2
 80027e8:	44bc      	add	ip, r7
 80027ea:	4463      	add	r3, ip
 80027ec:	2210      	movs	r2, #16
 80027ee:	701a      	strb	r2, [r3, #0]
 80027f0:	46c0      	nop			; (mov r8, r8)
 80027f2:	e0a4      	b.n	800293e <UART_SetConfig+0x24a>
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a9d      	ldr	r2, [pc, #628]	; (8002a70 <UART_SetConfig+0x37c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d137      	bne.n	800286e <UART_SetConfig+0x17a>
 80027fe:	4b9b      	ldr	r3, [pc, #620]	; (8002a6c <UART_SetConfig+0x378>)
 8002800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002802:	220c      	movs	r2, #12
 8002804:	4013      	ands	r3, r2
 8002806:	2b04      	cmp	r3, #4
 8002808:	d018      	beq.n	800283c <UART_SetConfig+0x148>
 800280a:	d802      	bhi.n	8002812 <UART_SetConfig+0x11e>
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <UART_SetConfig+0x128>
 8002810:	e024      	b.n	800285c <UART_SetConfig+0x168>
 8002812:	2b08      	cmp	r3, #8
 8002814:	d00a      	beq.n	800282c <UART_SetConfig+0x138>
 8002816:	2b0c      	cmp	r3, #12
 8002818:	d018      	beq.n	800284c <UART_SetConfig+0x158>
 800281a:	e01f      	b.n	800285c <UART_SetConfig+0x168>
 800281c:	231b      	movs	r3, #27
 800281e:	2218      	movs	r2, #24
 8002820:	4694      	mov	ip, r2
 8002822:	44bc      	add	ip, r7
 8002824:	4463      	add	r3, ip
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]
 800282a:	e088      	b.n	800293e <UART_SetConfig+0x24a>
 800282c:	231b      	movs	r3, #27
 800282e:	2218      	movs	r2, #24
 8002830:	4694      	mov	ip, r2
 8002832:	44bc      	add	ip, r7
 8002834:	4463      	add	r3, ip
 8002836:	2202      	movs	r2, #2
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	e080      	b.n	800293e <UART_SetConfig+0x24a>
 800283c:	231b      	movs	r3, #27
 800283e:	2218      	movs	r2, #24
 8002840:	4694      	mov	ip, r2
 8002842:	44bc      	add	ip, r7
 8002844:	4463      	add	r3, ip
 8002846:	2204      	movs	r2, #4
 8002848:	701a      	strb	r2, [r3, #0]
 800284a:	e078      	b.n	800293e <UART_SetConfig+0x24a>
 800284c:	231b      	movs	r3, #27
 800284e:	2218      	movs	r2, #24
 8002850:	4694      	mov	ip, r2
 8002852:	44bc      	add	ip, r7
 8002854:	4463      	add	r3, ip
 8002856:	2208      	movs	r2, #8
 8002858:	701a      	strb	r2, [r3, #0]
 800285a:	e070      	b.n	800293e <UART_SetConfig+0x24a>
 800285c:	231b      	movs	r3, #27
 800285e:	2218      	movs	r2, #24
 8002860:	4694      	mov	ip, r2
 8002862:	44bc      	add	ip, r7
 8002864:	4463      	add	r3, ip
 8002866:	2210      	movs	r2, #16
 8002868:	701a      	strb	r2, [r3, #0]
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	e067      	b.n	800293e <UART_SetConfig+0x24a>
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a80      	ldr	r2, [pc, #512]	; (8002a74 <UART_SetConfig+0x380>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d107      	bne.n	8002888 <UART_SetConfig+0x194>
 8002878:	231b      	movs	r3, #27
 800287a:	2218      	movs	r2, #24
 800287c:	4694      	mov	ip, r2
 800287e:	44bc      	add	ip, r7
 8002880:	4463      	add	r3, ip
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]
 8002886:	e05a      	b.n	800293e <UART_SetConfig+0x24a>
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a7a      	ldr	r2, [pc, #488]	; (8002a78 <UART_SetConfig+0x384>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d107      	bne.n	80028a2 <UART_SetConfig+0x1ae>
 8002892:	231b      	movs	r3, #27
 8002894:	2218      	movs	r2, #24
 8002896:	4694      	mov	ip, r2
 8002898:	44bc      	add	ip, r7
 800289a:	4463      	add	r3, ip
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
 80028a0:	e04d      	b.n	800293e <UART_SetConfig+0x24a>
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a6e      	ldr	r2, [pc, #440]	; (8002a60 <UART_SetConfig+0x36c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d141      	bne.n	8002930 <UART_SetConfig+0x23c>
 80028ac:	4b6f      	ldr	r3, [pc, #444]	; (8002a6c <UART_SetConfig+0x378>)
 80028ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028b0:	23c0      	movs	r3, #192	; 0xc0
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	4013      	ands	r3, r2
 80028b6:	2280      	movs	r2, #128	; 0x80
 80028b8:	00d2      	lsls	r2, r2, #3
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d01f      	beq.n	80028fe <UART_SetConfig+0x20a>
 80028be:	2280      	movs	r2, #128	; 0x80
 80028c0:	00d2      	lsls	r2, r2, #3
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d802      	bhi.n	80028cc <UART_SetConfig+0x1d8>
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d009      	beq.n	80028de <UART_SetConfig+0x1ea>
 80028ca:	e028      	b.n	800291e <UART_SetConfig+0x22a>
 80028cc:	2280      	movs	r2, #128	; 0x80
 80028ce:	0112      	lsls	r2, r2, #4
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00c      	beq.n	80028ee <UART_SetConfig+0x1fa>
 80028d4:	22c0      	movs	r2, #192	; 0xc0
 80028d6:	0112      	lsls	r2, r2, #4
 80028d8:	4293      	cmp	r3, r2
 80028da:	d018      	beq.n	800290e <UART_SetConfig+0x21a>
 80028dc:	e01f      	b.n	800291e <UART_SetConfig+0x22a>
 80028de:	231b      	movs	r3, #27
 80028e0:	2218      	movs	r2, #24
 80028e2:	4694      	mov	ip, r2
 80028e4:	44bc      	add	ip, r7
 80028e6:	4463      	add	r3, ip
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
 80028ec:	e027      	b.n	800293e <UART_SetConfig+0x24a>
 80028ee:	231b      	movs	r3, #27
 80028f0:	2218      	movs	r2, #24
 80028f2:	4694      	mov	ip, r2
 80028f4:	44bc      	add	ip, r7
 80028f6:	4463      	add	r3, ip
 80028f8:	2202      	movs	r2, #2
 80028fa:	701a      	strb	r2, [r3, #0]
 80028fc:	e01f      	b.n	800293e <UART_SetConfig+0x24a>
 80028fe:	231b      	movs	r3, #27
 8002900:	2218      	movs	r2, #24
 8002902:	4694      	mov	ip, r2
 8002904:	44bc      	add	ip, r7
 8002906:	4463      	add	r3, ip
 8002908:	2204      	movs	r2, #4
 800290a:	701a      	strb	r2, [r3, #0]
 800290c:	e017      	b.n	800293e <UART_SetConfig+0x24a>
 800290e:	231b      	movs	r3, #27
 8002910:	2218      	movs	r2, #24
 8002912:	4694      	mov	ip, r2
 8002914:	44bc      	add	ip, r7
 8002916:	4463      	add	r3, ip
 8002918:	2208      	movs	r2, #8
 800291a:	701a      	strb	r2, [r3, #0]
 800291c:	e00f      	b.n	800293e <UART_SetConfig+0x24a>
 800291e:	231b      	movs	r3, #27
 8002920:	2218      	movs	r2, #24
 8002922:	4694      	mov	ip, r2
 8002924:	44bc      	add	ip, r7
 8002926:	4463      	add	r3, ip
 8002928:	2210      	movs	r2, #16
 800292a:	701a      	strb	r2, [r3, #0]
 800292c:	46c0      	nop			; (mov r8, r8)
 800292e:	e006      	b.n	800293e <UART_SetConfig+0x24a>
 8002930:	231b      	movs	r3, #27
 8002932:	2218      	movs	r2, #24
 8002934:	4694      	mov	ip, r2
 8002936:	44bc      	add	ip, r7
 8002938:	4463      	add	r3, ip
 800293a:	2210      	movs	r2, #16
 800293c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a47      	ldr	r2, [pc, #284]	; (8002a60 <UART_SetConfig+0x36c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d000      	beq.n	800294a <UART_SetConfig+0x256>
 8002948:	e0a0      	b.n	8002a8c <UART_SetConfig+0x398>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800294a:	231b      	movs	r3, #27
 800294c:	2218      	movs	r2, #24
 800294e:	4694      	mov	ip, r2
 8002950:	44bc      	add	ip, r7
 8002952:	4463      	add	r3, ip
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b02      	cmp	r3, #2
 8002958:	d00d      	beq.n	8002976 <UART_SetConfig+0x282>
 800295a:	dc02      	bgt.n	8002962 <UART_SetConfig+0x26e>
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <UART_SetConfig+0x278>
 8002960:	e01d      	b.n	800299e <UART_SetConfig+0x2aa>
 8002962:	2b04      	cmp	r3, #4
 8002964:	d012      	beq.n	800298c <UART_SetConfig+0x298>
 8002966:	2b08      	cmp	r3, #8
 8002968:	d015      	beq.n	8002996 <UART_SetConfig+0x2a2>
 800296a:	e018      	b.n	800299e <UART_SetConfig+0x2aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800296c:	f7ff faa8 	bl	8001ec0 <HAL_RCC_GetPCLK1Freq>
 8002970:	0003      	movs	r3, r0
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002974:	e01d      	b.n	80029b2 <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002976:	4b3d      	ldr	r3, [pc, #244]	; (8002a6c <UART_SetConfig+0x378>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2210      	movs	r2, #16
 800297c:	4013      	ands	r3, r2
 800297e:	d002      	beq.n	8002986 <UART_SetConfig+0x292>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002980:	4b3e      	ldr	r3, [pc, #248]	; (8002a7c <UART_SetConfig+0x388>)
 8002982:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002984:	e015      	b.n	80029b2 <UART_SetConfig+0x2be>
          pclk = (uint32_t) HSI_VALUE;
 8002986:	4b3e      	ldr	r3, [pc, #248]	; (8002a80 <UART_SetConfig+0x38c>)
 8002988:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800298a:	e012      	b.n	80029b2 <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800298c:	f7ff f9ec 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8002990:	0003      	movs	r3, r0
 8002992:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002994:	e00d      	b.n	80029b2 <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002996:	2380      	movs	r3, #128	; 0x80
 8002998:	021b      	lsls	r3, r3, #8
 800299a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800299c:	e009      	b.n	80029b2 <UART_SetConfig+0x2be>
      default:
        pclk = 0U;
 800299e:	2300      	movs	r3, #0
 80029a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80029a2:	231a      	movs	r3, #26
 80029a4:	2218      	movs	r2, #24
 80029a6:	4694      	mov	ip, r2
 80029a8:	44bc      	add	ip, r7
 80029aa:	4463      	add	r3, ip
 80029ac:	2201      	movs	r2, #1
 80029ae:	701a      	strb	r2, [r3, #0]
        break;
 80029b0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80029b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d100      	bne.n	80029ba <UART_SetConfig+0x2c6>
 80029b8:	e13c      	b.n	8002c34 <UART_SetConfig+0x540>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	0013      	movs	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	189b      	adds	r3, r3, r2
 80029c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d305      	bcc.n	80029d6 <UART_SetConfig+0x2e2>
          (pclk > (4096U * huart->Init.BaudRate)))
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80029d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d907      	bls.n	80029e6 <UART_SetConfig+0x2f2>
      {
        ret = HAL_ERROR;
 80029d6:	231a      	movs	r3, #26
 80029d8:	2218      	movs	r2, #24
 80029da:	4694      	mov	ip, r2
 80029dc:	44bc      	add	ip, r7
 80029de:	4463      	add	r3, ip
 80029e0:	2201      	movs	r2, #1
 80029e2:	701a      	strb	r2, [r3, #0]
 80029e4:	e126      	b.n	8002c34 <UART_SetConfig+0x540>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80029e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	6939      	ldr	r1, [r7, #16]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	000b      	movs	r3, r1
 80029f4:	0e1b      	lsrs	r3, r3, #24
 80029f6:	0010      	movs	r0, r2
 80029f8:	0205      	lsls	r5, r0, #8
 80029fa:	431d      	orrs	r5, r3
 80029fc:	000b      	movs	r3, r1
 80029fe:	021c      	lsls	r4, r3, #8
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	085b      	lsrs	r3, r3, #1
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68b8      	ldr	r0, [r7, #8]
 8002a0e:	68f9      	ldr	r1, [r7, #12]
 8002a10:	1900      	adds	r0, r0, r4
 8002a12:	4169      	adcs	r1, r5
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	603b      	str	r3, [r7, #0]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	607b      	str	r3, [r7, #4]
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f7fd fbfd 	bl	8000220 <__aeabi_uldivmod>
 8002a26:	0003      	movs	r3, r0
 8002a28:	000c      	movs	r4, r1
 8002a2a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2e:	4a15      	ldr	r2, [pc, #84]	; (8002a84 <UART_SetConfig+0x390>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d908      	bls.n	8002a46 <UART_SetConfig+0x352>
 8002a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a36:	4a14      	ldr	r2, [pc, #80]	; (8002a88 <UART_SetConfig+0x394>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d804      	bhi.n	8002a46 <UART_SetConfig+0x352>
        {
          huart->Instance->BRR = usartdiv;
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a42:	60da      	str	r2, [r3, #12]
 8002a44:	e0f6      	b.n	8002c34 <UART_SetConfig+0x540>
        }
        else
        {
          ret = HAL_ERROR;
 8002a46:	231a      	movs	r3, #26
 8002a48:	2218      	movs	r2, #24
 8002a4a:	4694      	mov	ip, r2
 8002a4c:	44bc      	add	ip, r7
 8002a4e:	4463      	add	r3, ip
 8002a50:	2201      	movs	r2, #1
 8002a52:	701a      	strb	r2, [r3, #0]
 8002a54:	e0ee      	b.n	8002c34 <UART_SetConfig+0x540>
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	efff69f3 	.word	0xefff69f3
 8002a5c:	ffffcfff 	.word	0xffffcfff
 8002a60:	40004800 	.word	0x40004800
 8002a64:	fffff4ff 	.word	0xfffff4ff
 8002a68:	40013800 	.word	0x40013800
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40004400 	.word	0x40004400
 8002a74:	40004c00 	.word	0x40004c00
 8002a78:	40005000 	.word	0x40005000
 8002a7c:	003d0900 	.word	0x003d0900
 8002a80:	00f42400 	.word	0x00f42400
 8002a84:	000002ff 	.word	0x000002ff
 8002a88:	000fffff 	.word	0x000fffff
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	69da      	ldr	r2, [r3, #28]
 8002a90:	2380      	movs	r3, #128	; 0x80
 8002a92:	021b      	lsls	r3, r3, #8
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d000      	beq.n	8002a9a <UART_SetConfig+0x3a6>
 8002a98:	e073      	b.n	8002b82 <UART_SetConfig+0x48e>
  {
    switch (clocksource)
 8002a9a:	231b      	movs	r3, #27
 8002a9c:	2218      	movs	r2, #24
 8002a9e:	4694      	mov	ip, r2
 8002aa0:	44bc      	add	ip, r7
 8002aa2:	4463      	add	r3, ip
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d822      	bhi.n	8002af0 <UART_SetConfig+0x3fc>
 8002aaa:	009a      	lsls	r2, r3, #2
 8002aac:	4b69      	ldr	r3, [pc, #420]	; (8002c54 <UART_SetConfig+0x560>)
 8002aae:	18d3      	adds	r3, r2, r3
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ab4:	f7ff fa04 	bl	8001ec0 <HAL_RCC_GetPCLK1Freq>
 8002ab8:	0003      	movs	r3, r0
 8002aba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002abc:	e022      	b.n	8002b04 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002abe:	f7ff fa15 	bl	8001eec <HAL_RCC_GetPCLK2Freq>
 8002ac2:	0003      	movs	r3, r0
 8002ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ac6:	e01d      	b.n	8002b04 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ac8:	4b63      	ldr	r3, [pc, #396]	; (8002c58 <UART_SetConfig+0x564>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2210      	movs	r2, #16
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d002      	beq.n	8002ad8 <UART_SetConfig+0x3e4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002ad2:	4b62      	ldr	r3, [pc, #392]	; (8002c5c <UART_SetConfig+0x568>)
 8002ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ad6:	e015      	b.n	8002b04 <UART_SetConfig+0x410>
          pclk = (uint32_t) HSI_VALUE;
 8002ad8:	4b61      	ldr	r3, [pc, #388]	; (8002c60 <UART_SetConfig+0x56c>)
 8002ada:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002adc:	e012      	b.n	8002b04 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ade:	f7ff f943 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8002ae2:	0003      	movs	r3, r0
 8002ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ae6:	e00d      	b.n	8002b04 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ae8:	2380      	movs	r3, #128	; 0x80
 8002aea:	021b      	lsls	r3, r3, #8
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002aee:	e009      	b.n	8002b04 <UART_SetConfig+0x410>
      default:
        pclk = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002af4:	231a      	movs	r3, #26
 8002af6:	2218      	movs	r2, #24
 8002af8:	4694      	mov	ip, r2
 8002afa:	44bc      	add	ip, r7
 8002afc:	4463      	add	r3, ip
 8002afe:	2201      	movs	r2, #1
 8002b00:	701a      	strb	r2, [r3, #0]
        break;
 8002b02:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d100      	bne.n	8002b0c <UART_SetConfig+0x418>
 8002b0a:	e093      	b.n	8002c34 <UART_SetConfig+0x540>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0e:	005a      	lsls	r2, r3, #1
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	085b      	lsrs	r3, r3, #1
 8002b16:	18d2      	adds	r2, r2, r3
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	0019      	movs	r1, r3
 8002b1e:	0010      	movs	r0, r2
 8002b20:	f7fd faf2 	bl	8000108 <__udivsi3>
 8002b24:	0003      	movs	r3, r0
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2c:	2b0f      	cmp	r3, #15
 8002b2e:	d920      	bls.n	8002b72 <UART_SetConfig+0x47e>
 8002b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b32:	4a4c      	ldr	r2, [pc, #304]	; (8002c64 <UART_SetConfig+0x570>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d81c      	bhi.n	8002b72 <UART_SetConfig+0x47e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	200e      	movs	r0, #14
 8002b3e:	2418      	movs	r4, #24
 8002b40:	193b      	adds	r3, r7, r4
 8002b42:	181b      	adds	r3, r3, r0
 8002b44:	210f      	movs	r1, #15
 8002b46:	438a      	bics	r2, r1
 8002b48:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4c:	085b      	lsrs	r3, r3, #1
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2207      	movs	r2, #7
 8002b52:	4013      	ands	r3, r2
 8002b54:	b299      	uxth	r1, r3
 8002b56:	193b      	adds	r3, r7, r4
 8002b58:	181b      	adds	r3, r3, r0
 8002b5a:	193a      	adds	r2, r7, r4
 8002b5c:	1812      	adds	r2, r2, r0
 8002b5e:	8812      	ldrh	r2, [r2, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	193a      	adds	r2, r7, r4
 8002b6a:	1812      	adds	r2, r2, r0
 8002b6c:	8812      	ldrh	r2, [r2, #0]
 8002b6e:	60da      	str	r2, [r3, #12]
 8002b70:	e060      	b.n	8002c34 <UART_SetConfig+0x540>
      }
      else
      {
        ret = HAL_ERROR;
 8002b72:	231a      	movs	r3, #26
 8002b74:	2218      	movs	r2, #24
 8002b76:	4694      	mov	ip, r2
 8002b78:	44bc      	add	ip, r7
 8002b7a:	4463      	add	r3, ip
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	701a      	strb	r2, [r3, #0]
 8002b80:	e058      	b.n	8002c34 <UART_SetConfig+0x540>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b82:	231b      	movs	r3, #27
 8002b84:	2218      	movs	r2, #24
 8002b86:	4694      	mov	ip, r2
 8002b88:	44bc      	add	ip, r7
 8002b8a:	4463      	add	r3, ip
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d822      	bhi.n	8002bd8 <UART_SetConfig+0x4e4>
 8002b92:	009a      	lsls	r2, r3, #2
 8002b94:	4b34      	ldr	r3, [pc, #208]	; (8002c68 <UART_SetConfig+0x574>)
 8002b96:	18d3      	adds	r3, r2, r3
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b9c:	f7ff f990 	bl	8001ec0 <HAL_RCC_GetPCLK1Freq>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ba4:	e022      	b.n	8002bec <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ba6:	f7ff f9a1 	bl	8001eec <HAL_RCC_GetPCLK2Freq>
 8002baa:	0003      	movs	r3, r0
 8002bac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bae:	e01d      	b.n	8002bec <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bb0:	4b29      	ldr	r3, [pc, #164]	; (8002c58 <UART_SetConfig+0x564>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2210      	movs	r2, #16
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d002      	beq.n	8002bc0 <UART_SetConfig+0x4cc>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002bba:	4b28      	ldr	r3, [pc, #160]	; (8002c5c <UART_SetConfig+0x568>)
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002bbe:	e015      	b.n	8002bec <UART_SetConfig+0x4f8>
          pclk = (uint32_t) HSI_VALUE;
 8002bc0:	4b27      	ldr	r3, [pc, #156]	; (8002c60 <UART_SetConfig+0x56c>)
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bc4:	e012      	b.n	8002bec <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bc6:	f7ff f8cf 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8002bca:	0003      	movs	r3, r0
 8002bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bce:	e00d      	b.n	8002bec <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	021b      	lsls	r3, r3, #8
 8002bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bd6:	e009      	b.n	8002bec <UART_SetConfig+0x4f8>
      default:
        pclk = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002bdc:	231a      	movs	r3, #26
 8002bde:	2218      	movs	r2, #24
 8002be0:	4694      	mov	ip, r2
 8002be2:	44bc      	add	ip, r7
 8002be4:	4463      	add	r3, ip
 8002be6:	2201      	movs	r2, #1
 8002be8:	701a      	strb	r2, [r3, #0]
        break;
 8002bea:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d020      	beq.n	8002c34 <UART_SetConfig+0x540>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	085a      	lsrs	r2, r3, #1
 8002bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfa:	18d2      	adds	r2, r2, r3
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	0019      	movs	r1, r3
 8002c02:	0010      	movs	r0, r2
 8002c04:	f7fd fa80 	bl	8000108 <__udivsi3>
 8002c08:	0003      	movs	r3, r0
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c10:	2b0f      	cmp	r3, #15
 8002c12:	d908      	bls.n	8002c26 <UART_SetConfig+0x532>
 8002c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c16:	4a13      	ldr	r2, [pc, #76]	; (8002c64 <UART_SetConfig+0x570>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d804      	bhi.n	8002c26 <UART_SetConfig+0x532>
      {
        huart->Instance->BRR = usartdiv;
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c22:	60da      	str	r2, [r3, #12]
 8002c24:	e006      	b.n	8002c34 <UART_SetConfig+0x540>
      }
      else
      {
        ret = HAL_ERROR;
 8002c26:	231a      	movs	r3, #26
 8002c28:	2218      	movs	r2, #24
 8002c2a:	4694      	mov	ip, r2
 8002c2c:	44bc      	add	ip, r7
 8002c2e:	4463      	add	r3, ip
 8002c30:	2201      	movs	r2, #1
 8002c32:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	2200      	movs	r2, #0
 8002c38:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002c40:	231a      	movs	r3, #26
 8002c42:	2218      	movs	r2, #24
 8002c44:	4694      	mov	ip, r2
 8002c46:	44bc      	add	ip, r7
 8002c48:	4463      	add	r3, ip
 8002c4a:	781b      	ldrb	r3, [r3, #0]
}
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b00e      	add	sp, #56	; 0x38
 8002c52:	bdb0      	pop	{r4, r5, r7, pc}
 8002c54:	080030cc 	.word	0x080030cc
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	003d0900 	.word	0x003d0900
 8002c60:	00f42400 	.word	0x00f42400
 8002c64:	0000ffff 	.word	0x0000ffff
 8002c68:	080030f0 	.word	0x080030f0

08002c6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	2201      	movs	r2, #1
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d00b      	beq.n	8002c96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	4a4a      	ldr	r2, [pc, #296]	; (8002db0 <UART_AdvFeatureConfig+0x144>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	0019      	movs	r1, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d00b      	beq.n	8002cb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	4a43      	ldr	r2, [pc, #268]	; (8002db4 <UART_AdvFeatureConfig+0x148>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	0019      	movs	r1, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	2204      	movs	r2, #4
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d00b      	beq.n	8002cda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	4a3b      	ldr	r2, [pc, #236]	; (8002db8 <UART_AdvFeatureConfig+0x14c>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	0019      	movs	r1, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	2208      	movs	r2, #8
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d00b      	beq.n	8002cfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	4a34      	ldr	r2, [pc, #208]	; (8002dbc <UART_AdvFeatureConfig+0x150>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	0019      	movs	r1, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	2210      	movs	r2, #16
 8002d02:	4013      	ands	r3, r2
 8002d04:	d00b      	beq.n	8002d1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	4a2c      	ldr	r2, [pc, #176]	; (8002dc0 <UART_AdvFeatureConfig+0x154>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	0019      	movs	r1, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	2220      	movs	r2, #32
 8002d24:	4013      	ands	r3, r2
 8002d26:	d00b      	beq.n	8002d40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	4a25      	ldr	r2, [pc, #148]	; (8002dc4 <UART_AdvFeatureConfig+0x158>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	0019      	movs	r1, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	2240      	movs	r2, #64	; 0x40
 8002d46:	4013      	ands	r3, r2
 8002d48:	d01d      	beq.n	8002d86 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	4a1d      	ldr	r2, [pc, #116]	; (8002dc8 <UART_AdvFeatureConfig+0x15c>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	0019      	movs	r1, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	035b      	lsls	r3, r3, #13
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d10b      	bne.n	8002d86 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	4a15      	ldr	r2, [pc, #84]	; (8002dcc <UART_AdvFeatureConfig+0x160>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	0019      	movs	r1, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	2280      	movs	r2, #128	; 0x80
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d00b      	beq.n	8002da8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	4a0e      	ldr	r2, [pc, #56]	; (8002dd0 <UART_AdvFeatureConfig+0x164>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	0019      	movs	r1, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	605a      	str	r2, [r3, #4]
  }
}
 8002da8:	46c0      	nop			; (mov r8, r8)
 8002daa:	46bd      	mov	sp, r7
 8002dac:	b002      	add	sp, #8
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	fffdffff 	.word	0xfffdffff
 8002db4:	fffeffff 	.word	0xfffeffff
 8002db8:	fffbffff 	.word	0xfffbffff
 8002dbc:	ffff7fff 	.word	0xffff7fff
 8002dc0:	ffffefff 	.word	0xffffefff
 8002dc4:	ffffdfff 	.word	0xffffdfff
 8002dc8:	ffefffff 	.word	0xffefffff
 8002dcc:	ff9fffff 	.word	0xff9fffff
 8002dd0:	fff7ffff 	.word	0xfff7ffff

08002dd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2280      	movs	r2, #128	; 0x80
 8002de0:	2100      	movs	r1, #0
 8002de2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002de4:	f7fd fe8e 	bl	8000b04 <HAL_GetTick>
 8002de8:	0003      	movs	r3, r0
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2208      	movs	r2, #8
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d10d      	bne.n	8002e16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	2380      	movs	r3, #128	; 0x80
 8002dfe:	0399      	lsls	r1, r3, #14
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	4b18      	ldr	r3, [pc, #96]	; (8002e64 <UART_CheckIdleState+0x90>)
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	0013      	movs	r3, r2
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f000 f82d 	bl	8002e68 <UART_WaitOnFlagUntilTimeout>
 8002e0e:	1e03      	subs	r3, r0, #0
 8002e10:	d001      	beq.n	8002e16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e022      	b.n	8002e5c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2204      	movs	r2, #4
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d10d      	bne.n	8002e40 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	2380      	movs	r3, #128	; 0x80
 8002e28:	03d9      	lsls	r1, r3, #15
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <UART_CheckIdleState+0x90>)
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	0013      	movs	r3, r2
 8002e32:	2200      	movs	r2, #0
 8002e34:	f000 f818 	bl	8002e68 <UART_WaitOnFlagUntilTimeout>
 8002e38:	1e03      	subs	r3, r0, #0
 8002e3a:	d001      	beq.n	8002e40 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e00d      	b.n	8002e5c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2220      	movs	r2, #32
 8002e44:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2274      	movs	r2, #116	; 0x74
 8002e56:	2100      	movs	r1, #0
 8002e58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b004      	add	sp, #16
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	01ffffff 	.word	0x01ffffff

08002e68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	603b      	str	r3, [r7, #0]
 8002e74:	1dfb      	adds	r3, r7, #7
 8002e76:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e78:	e05e      	b.n	8002f38 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	d05b      	beq.n	8002f38 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e80:	f7fd fe40 	bl	8000b04 <HAL_GetTick>
 8002e84:	0002      	movs	r2, r0
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d302      	bcc.n	8002e96 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d11b      	bne.n	8002ece <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	492f      	ldr	r1, [pc, #188]	; (8002f60 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002ea2:	400a      	ands	r2, r1
 8002ea4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	438a      	bics	r2, r1
 8002eb4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2274      	movs	r2, #116	; 0x74
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e044      	b.n	8002f58 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d02e      	beq.n	8002f38 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	69da      	ldr	r2, [r3, #28]
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	401a      	ands	r2, r3
 8002ee6:	2380      	movs	r3, #128	; 0x80
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d124      	bne.n	8002f38 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2280      	movs	r2, #128	; 0x80
 8002ef4:	0112      	lsls	r2, r2, #4
 8002ef6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4917      	ldr	r1, [pc, #92]	; (8002f60 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002f04:	400a      	ands	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2101      	movs	r1, #1
 8002f14:	438a      	bics	r2, r1
 8002f16:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2220      	movs	r2, #32
 8002f22:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2280      	movs	r2, #128	; 0x80
 8002f28:	2120      	movs	r1, #32
 8002f2a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2274      	movs	r2, #116	; 0x74
 8002f30:	2100      	movs	r1, #0
 8002f32:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e00f      	b.n	8002f58 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	4013      	ands	r3, r2
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	425a      	negs	r2, r3
 8002f48:	4153      	adcs	r3, r2
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	001a      	movs	r2, r3
 8002f4e:	1dfb      	adds	r3, r7, #7
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d091      	beq.n	8002e7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	0018      	movs	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b004      	add	sp, #16
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	fffffe5f 	.word	0xfffffe5f

08002f64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4912      	ldr	r1, [pc, #72]	; (8002fc0 <UART_EndRxTransfer+0x5c>)
 8002f78:	400a      	ands	r2, r1
 8002f7a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2101      	movs	r1, #1
 8002f88:	438a      	bics	r2, r1
 8002f8a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d107      	bne.n	8002fa4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2110      	movs	r1, #16
 8002fa0:	438a      	bics	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b002      	add	sp, #8
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	fffffedf 	.word	0xfffffedf

08002fc4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	225a      	movs	r2, #90	; 0x5a
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2252      	movs	r2, #82	; 0x52
 8002fde:	2100      	movs	r1, #0
 8002fe0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f7ff fb71 	bl	80026cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	46bd      	mov	sp, r7
 8002fee:	b004      	add	sp, #16
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2140      	movs	r1, #64	; 0x40
 8003006:	438a      	bics	r2, r1
 8003008:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2220      	movs	r2, #32
 800300e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	0018      	movs	r0, r3
 800301a:	f7ff fb4f 	bl	80026bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	46bd      	mov	sp, r7
 8003022:	b002      	add	sp, #8
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	46bd      	mov	sp, r7
 8003032:	b002      	add	sp, #8
 8003034:	bd80      	pop	{r7, pc}
	...

08003038 <__libc_init_array>:
 8003038:	b570      	push	{r4, r5, r6, lr}
 800303a:	2600      	movs	r6, #0
 800303c:	4d0c      	ldr	r5, [pc, #48]	; (8003070 <__libc_init_array+0x38>)
 800303e:	4c0d      	ldr	r4, [pc, #52]	; (8003074 <__libc_init_array+0x3c>)
 8003040:	1b64      	subs	r4, r4, r5
 8003042:	10a4      	asrs	r4, r4, #2
 8003044:	42a6      	cmp	r6, r4
 8003046:	d109      	bne.n	800305c <__libc_init_array+0x24>
 8003048:	2600      	movs	r6, #0
 800304a:	f000 f821 	bl	8003090 <_init>
 800304e:	4d0a      	ldr	r5, [pc, #40]	; (8003078 <__libc_init_array+0x40>)
 8003050:	4c0a      	ldr	r4, [pc, #40]	; (800307c <__libc_init_array+0x44>)
 8003052:	1b64      	subs	r4, r4, r5
 8003054:	10a4      	asrs	r4, r4, #2
 8003056:	42a6      	cmp	r6, r4
 8003058:	d105      	bne.n	8003066 <__libc_init_array+0x2e>
 800305a:	bd70      	pop	{r4, r5, r6, pc}
 800305c:	00b3      	lsls	r3, r6, #2
 800305e:	58eb      	ldr	r3, [r5, r3]
 8003060:	4798      	blx	r3
 8003062:	3601      	adds	r6, #1
 8003064:	e7ee      	b.n	8003044 <__libc_init_array+0xc>
 8003066:	00b3      	lsls	r3, r6, #2
 8003068:	58eb      	ldr	r3, [r5, r3]
 800306a:	4798      	blx	r3
 800306c:	3601      	adds	r6, #1
 800306e:	e7f2      	b.n	8003056 <__libc_init_array+0x1e>
 8003070:	0800311c 	.word	0x0800311c
 8003074:	0800311c 	.word	0x0800311c
 8003078:	0800311c 	.word	0x0800311c
 800307c:	08003120 	.word	0x08003120

08003080 <memset>:
 8003080:	0003      	movs	r3, r0
 8003082:	1812      	adds	r2, r2, r0
 8003084:	4293      	cmp	r3, r2
 8003086:	d100      	bne.n	800308a <memset+0xa>
 8003088:	4770      	bx	lr
 800308a:	7019      	strb	r1, [r3, #0]
 800308c:	3301      	adds	r3, #1
 800308e:	e7f9      	b.n	8003084 <memset+0x4>

08003090 <_init>:
 8003090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003096:	bc08      	pop	{r3}
 8003098:	469e      	mov	lr, r3
 800309a:	4770      	bx	lr

0800309c <_fini>:
 800309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030a2:	bc08      	pop	{r3}
 80030a4:	469e      	mov	lr, r3
 80030a6:	4770      	bx	lr
