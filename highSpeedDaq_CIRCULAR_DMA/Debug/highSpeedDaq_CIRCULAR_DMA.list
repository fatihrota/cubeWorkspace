
highSpeedDaq_CIRCULAR_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ced0  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001890  0800d0b8  0800d0b8  0001d0b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e948  0800e948  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e948  0800e948  0001e948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e950  0800e950  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e950  0800e950  0001e950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e954  0800e954  0001e954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800e958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005f24  200001e4  0800eb3c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006108  0800eb3c  00026108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033d7b  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007152  00000000  00000000  00053f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000edf2  00000000  00000000  0005b0da  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001168  00000000  00000000  00069ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001aa0  00000000  00000000  0006b038  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002b4e4  00000000  00000000  0006cad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001d8ad  00000000  00000000  00097fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000cb2b1  00000000  00000000  000b5869  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00180b1a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004528  00000000  00000000  00180b98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e4 	.word	0x200001e4
 8000204:	00000000 	.word	0x00000000
 8000208:	0800d0a0 	.word	0x0800d0a0

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e8 	.word	0x200001e8
 8000224:	0800d0a0 	.word	0x0800d0a0

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295
 8000c54:	f000 b974 	b.w	8000f40 <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f806 	bl	8000c70 <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__udivmoddi4>:
 8000c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c74:	468c      	mov	ip, r1
 8000c76:	4604      	mov	r4, r0
 8000c78:	9e08      	ldr	r6, [sp, #32]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d14b      	bne.n	8000d16 <__udivmoddi4+0xa6>
 8000c7e:	428a      	cmp	r2, r1
 8000c80:	4615      	mov	r5, r2
 8000c82:	d967      	bls.n	8000d54 <__udivmoddi4+0xe4>
 8000c84:	fab2 f282 	clz	r2, r2
 8000c88:	b14a      	cbz	r2, 8000c9e <__udivmoddi4+0x2e>
 8000c8a:	f1c2 0720 	rsb	r7, r2, #32
 8000c8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c92:	fa20 f707 	lsr.w	r7, r0, r7
 8000c96:	4095      	lsls	r5, r2
 8000c98:	ea47 0c03 	orr.w	ip, r7, r3
 8000c9c:	4094      	lsls	r4, r2
 8000c9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ca2:	fbbc f7fe 	udiv	r7, ip, lr
 8000ca6:	fa1f f885 	uxth.w	r8, r5
 8000caa:	fb0e c317 	mls	r3, lr, r7, ip
 8000cae:	fb07 f908 	mul.w	r9, r7, r8
 8000cb2:	0c21      	lsrs	r1, r4, #16
 8000cb4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cb8:	4599      	cmp	r9, r3
 8000cba:	d909      	bls.n	8000cd0 <__udivmoddi4+0x60>
 8000cbc:	18eb      	adds	r3, r5, r3
 8000cbe:	f107 31ff 	add.w	r1, r7, #4294967295
 8000cc2:	f080 811c 	bcs.w	8000efe <__udivmoddi4+0x28e>
 8000cc6:	4599      	cmp	r9, r3
 8000cc8:	f240 8119 	bls.w	8000efe <__udivmoddi4+0x28e>
 8000ccc:	3f02      	subs	r7, #2
 8000cce:	442b      	add	r3, r5
 8000cd0:	eba3 0309 	sub.w	r3, r3, r9
 8000cd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cdc:	fb00 f108 	mul.w	r1, r0, r8
 8000ce0:	b2a4      	uxth	r4, r4
 8000ce2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce6:	42a1      	cmp	r1, r4
 8000ce8:	d909      	bls.n	8000cfe <__udivmoddi4+0x8e>
 8000cea:	192c      	adds	r4, r5, r4
 8000cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf0:	f080 8107 	bcs.w	8000f02 <__udivmoddi4+0x292>
 8000cf4:	42a1      	cmp	r1, r4
 8000cf6:	f240 8104 	bls.w	8000f02 <__udivmoddi4+0x292>
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	442c      	add	r4, r5
 8000cfe:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d02:	2700      	movs	r7, #0
 8000d04:	1a64      	subs	r4, r4, r1
 8000d06:	b11e      	cbz	r6, 8000d10 <__udivmoddi4+0xa0>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	40d4      	lsrs	r4, r2
 8000d0c:	e9c6 4300 	strd	r4, r3, [r6]
 8000d10:	4639      	mov	r1, r7
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d909      	bls.n	8000d2e <__udivmoddi4+0xbe>
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	f000 80ec 	beq.w	8000ef8 <__udivmoddi4+0x288>
 8000d20:	2700      	movs	r7, #0
 8000d22:	e9c6 0100 	strd	r0, r1, [r6]
 8000d26:	4638      	mov	r0, r7
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	fab3 f783 	clz	r7, r3
 8000d32:	2f00      	cmp	r7, #0
 8000d34:	d148      	bne.n	8000dc8 <__udivmoddi4+0x158>
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xd0>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 80fb 	bhi.w	8000f36 <__udivmoddi4+0x2c6>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb61 0303 	sbc.w	r3, r1, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	469c      	mov	ip, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d0e0      	beq.n	8000d10 <__udivmoddi4+0xa0>
 8000d4e:	e9c6 4c00 	strd	r4, ip, [r6]
 8000d52:	e7dd      	b.n	8000d10 <__udivmoddi4+0xa0>
 8000d54:	b902      	cbnz	r2, 8000d58 <__udivmoddi4+0xe8>
 8000d56:	deff      	udf	#255	; 0xff
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	2a00      	cmp	r2, #0
 8000d5e:	f040 808f 	bne.w	8000e80 <__udivmoddi4+0x210>
 8000d62:	2701      	movs	r7, #1
 8000d64:	1b49      	subs	r1, r1, r5
 8000d66:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000d6a:	fa1f f985 	uxth.w	r9, r5
 8000d6e:	fbb1 fef8 	udiv	lr, r1, r8
 8000d72:	fb08 111e 	mls	r1, r8, lr, r1
 8000d76:	fb09 f00e 	mul.w	r0, r9, lr
 8000d7a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000d7e:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000d82:	4298      	cmp	r0, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x126>
 8000d86:	18eb      	adds	r3, r5, r3
 8000d88:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x124>
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	f200 80cd 	bhi.w	8000f2e <__udivmoddi4+0x2be>
 8000d94:	468e      	mov	lr, r1
 8000d96:	1a1b      	subs	r3, r3, r0
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	fb09 f900 	mul.w	r9, r9, r0
 8000da4:	b2a4      	uxth	r4, r4
 8000da6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000daa:	45a1      	cmp	r9, r4
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x14e>
 8000dae:	192c      	adds	r4, r5, r4
 8000db0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db4:	d202      	bcs.n	8000dbc <__udivmoddi4+0x14c>
 8000db6:	45a1      	cmp	r9, r4
 8000db8:	f200 80b6 	bhi.w	8000f28 <__udivmoddi4+0x2b8>
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000dc6:	e79e      	b.n	8000d06 <__udivmoddi4+0x96>
 8000dc8:	f1c7 0520 	rsb	r5, r7, #32
 8000dcc:	40bb      	lsls	r3, r7
 8000dce:	fa22 fc05 	lsr.w	ip, r2, r5
 8000dd2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dd6:	fa21 f405 	lsr.w	r4, r1, r5
 8000dda:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dde:	fbb4 f9fe 	udiv	r9, r4, lr
 8000de2:	fa1f f88c 	uxth.w	r8, ip
 8000de6:	fb0e 4419 	mls	r4, lr, r9, r4
 8000dea:	fa20 f305 	lsr.w	r3, r0, r5
 8000dee:	40b9      	lsls	r1, r7
 8000df0:	fb09 fa08 	mul.w	sl, r9, r8
 8000df4:	4319      	orrs	r1, r3
 8000df6:	0c0b      	lsrs	r3, r1, #16
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	45a2      	cmp	sl, r4
 8000dfe:	fa02 f207 	lsl.w	r2, r2, r7
 8000e02:	fa00 f307 	lsl.w	r3, r0, r7
 8000e06:	d90b      	bls.n	8000e20 <__udivmoddi4+0x1b0>
 8000e08:	eb1c 0404 	adds.w	r4, ip, r4
 8000e0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e10:	f080 8088 	bcs.w	8000f24 <__udivmoddi4+0x2b4>
 8000e14:	45a2      	cmp	sl, r4
 8000e16:	f240 8085 	bls.w	8000f24 <__udivmoddi4+0x2b4>
 8000e1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e1e:	4464      	add	r4, ip
 8000e20:	eba4 040a 	sub.w	r4, r4, sl
 8000e24:	fbb4 f0fe 	udiv	r0, r4, lr
 8000e28:	fb0e 4410 	mls	r4, lr, r0, r4
 8000e2c:	fb00 fa08 	mul.w	sl, r0, r8
 8000e30:	b289      	uxth	r1, r1
 8000e32:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000e36:	45a2      	cmp	sl, r4
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x1dc>
 8000e3a:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e42:	d26b      	bcs.n	8000f1c <__udivmoddi4+0x2ac>
 8000e44:	45a2      	cmp	sl, r4
 8000e46:	d969      	bls.n	8000f1c <__udivmoddi4+0x2ac>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4464      	add	r4, ip
 8000e4c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e50:	fba0 8902 	umull	r8, r9, r0, r2
 8000e54:	eba4 040a 	sub.w	r4, r4, sl
 8000e58:	454c      	cmp	r4, r9
 8000e5a:	4641      	mov	r1, r8
 8000e5c:	46ce      	mov	lr, r9
 8000e5e:	d354      	bcc.n	8000f0a <__udivmoddi4+0x29a>
 8000e60:	d051      	beq.n	8000f06 <__udivmoddi4+0x296>
 8000e62:	2e00      	cmp	r6, #0
 8000e64:	d069      	beq.n	8000f3a <__udivmoddi4+0x2ca>
 8000e66:	1a5a      	subs	r2, r3, r1
 8000e68:	eb64 040e 	sbc.w	r4, r4, lr
 8000e6c:	fa04 f505 	lsl.w	r5, r4, r5
 8000e70:	fa22 f307 	lsr.w	r3, r2, r7
 8000e74:	40fc      	lsrs	r4, r7
 8000e76:	431d      	orrs	r5, r3
 8000e78:	e9c6 5400 	strd	r5, r4, [r6]
 8000e7c:	2700      	movs	r7, #0
 8000e7e:	e747      	b.n	8000d10 <__udivmoddi4+0xa0>
 8000e80:	4095      	lsls	r5, r2
 8000e82:	f1c2 0320 	rsb	r3, r2, #32
 8000e86:	fa21 f003 	lsr.w	r0, r1, r3
 8000e8a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000e8e:	fbb0 f7f8 	udiv	r7, r0, r8
 8000e92:	fa1f f985 	uxth.w	r9, r5
 8000e96:	fb08 0017 	mls	r0, r8, r7, r0
 8000e9a:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9e:	4091      	lsls	r1, r2
 8000ea0:	fb07 fc09 	mul.w	ip, r7, r9
 8000ea4:	430b      	orrs	r3, r1
 8000ea6:	0c19      	lsrs	r1, r3, #16
 8000ea8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eac:	458c      	cmp	ip, r1
 8000eae:	fa04 f402 	lsl.w	r4, r4, r2
 8000eb2:	d907      	bls.n	8000ec4 <__udivmoddi4+0x254>
 8000eb4:	1869      	adds	r1, r5, r1
 8000eb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000eba:	d231      	bcs.n	8000f20 <__udivmoddi4+0x2b0>
 8000ebc:	458c      	cmp	ip, r1
 8000ebe:	d92f      	bls.n	8000f20 <__udivmoddi4+0x2b0>
 8000ec0:	3f02      	subs	r7, #2
 8000ec2:	4429      	add	r1, r5
 8000ec4:	eba1 010c 	sub.w	r1, r1, ip
 8000ec8:	fbb1 f0f8 	udiv	r0, r1, r8
 8000ecc:	fb08 1c10 	mls	ip, r8, r0, r1
 8000ed0:	fb00 fe09 	mul.w	lr, r0, r9
 8000ed4:	b299      	uxth	r1, r3
 8000ed6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eda:	458e      	cmp	lr, r1
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x27e>
 8000ede:	1869      	adds	r1, r5, r1
 8000ee0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ee4:	d218      	bcs.n	8000f18 <__udivmoddi4+0x2a8>
 8000ee6:	458e      	cmp	lr, r1
 8000ee8:	d916      	bls.n	8000f18 <__udivmoddi4+0x2a8>
 8000eea:	3802      	subs	r0, #2
 8000eec:	4429      	add	r1, r5
 8000eee:	eba1 010e 	sub.w	r1, r1, lr
 8000ef2:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ef6:	e73a      	b.n	8000d6e <__udivmoddi4+0xfe>
 8000ef8:	4637      	mov	r7, r6
 8000efa:	4630      	mov	r0, r6
 8000efc:	e708      	b.n	8000d10 <__udivmoddi4+0xa0>
 8000efe:	460f      	mov	r7, r1
 8000f00:	e6e6      	b.n	8000cd0 <__udivmoddi4+0x60>
 8000f02:	4618      	mov	r0, r3
 8000f04:	e6fb      	b.n	8000cfe <__udivmoddi4+0x8e>
 8000f06:	4543      	cmp	r3, r8
 8000f08:	d2ab      	bcs.n	8000e62 <__udivmoddi4+0x1f2>
 8000f0a:	ebb8 0102 	subs.w	r1, r8, r2
 8000f0e:	eb69 020c 	sbc.w	r2, r9, ip
 8000f12:	3801      	subs	r0, #1
 8000f14:	4696      	mov	lr, r2
 8000f16:	e7a4      	b.n	8000e62 <__udivmoddi4+0x1f2>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e7e8      	b.n	8000eee <__udivmoddi4+0x27e>
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	e795      	b.n	8000e4c <__udivmoddi4+0x1dc>
 8000f20:	4607      	mov	r7, r0
 8000f22:	e7cf      	b.n	8000ec4 <__udivmoddi4+0x254>
 8000f24:	4681      	mov	r9, r0
 8000f26:	e77b      	b.n	8000e20 <__udivmoddi4+0x1b0>
 8000f28:	3802      	subs	r0, #2
 8000f2a:	442c      	add	r4, r5
 8000f2c:	e747      	b.n	8000dbe <__udivmoddi4+0x14e>
 8000f2e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f32:	442b      	add	r3, r5
 8000f34:	e72f      	b.n	8000d96 <__udivmoddi4+0x126>
 8000f36:	4638      	mov	r0, r7
 8000f38:	e707      	b.n	8000d4a <__udivmoddi4+0xda>
 8000f3a:	4637      	mov	r7, r6
 8000f3c:	e6e8      	b.n	8000d10 <__udivmoddi4+0xa0>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <AD7768_writeReg>:
#include "debug.h"

extern SPI_HandleTypeDef hspi3;

void AD7768_writeReg(uint8_t addr, uint8_t value)
{
 8000f44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[2];
	uint8_t read[2];

	buf[0] = (addr & 0x7F);
	buf[1] = value;
	HAL_GPIO_WritePin(ADC_CS_PIN, ADC_CS_PIN_NO, GPIO_PIN_RESET);
 8000f46:	4c0e      	ldr	r4, [pc, #56]	; (8000f80 <AD7768_writeReg+0x3c>)
	buf[0] = (addr & 0x7F);
 8000f48:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8000f4c:	f88d 0008 	strb.w	r0, [sp, #8]
	buf[1] = value;
 8000f50:	f88d 1009 	strb.w	r1, [sp, #9]
	HAL_GPIO_WritePin(ADC_CS_PIN, ADC_CS_PIN_NO, GPIO_PIN_RESET);
 8000f54:	4620      	mov	r0, r4
 8000f56:	2200      	movs	r2, #0
 8000f58:	2101      	movs	r1, #1
 8000f5a:	f001 fc6b 	bl	8002834 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, &buf[0], &read[0], 2, 1000);
 8000f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f62:	aa03      	add	r2, sp, #12
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	a902      	add	r1, sp, #8
 8000f68:	2302      	movs	r3, #2
 8000f6a:	4806      	ldr	r0, [pc, #24]	; (8000f84 <AD7768_writeReg+0x40>)
 8000f6c:	f002 f881 	bl	8003072 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(ADC_CS_PIN, ADC_CS_PIN_NO, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	4620      	mov	r0, r4
 8000f74:	4611      	mov	r1, r2
 8000f76:	f001 fc5d 	bl	8002834 <HAL_GPIO_WritePin>
}
 8000f7a:	b004      	add	sp, #16
 8000f7c:	bd10      	pop	{r4, pc}
 8000f7e:	bf00      	nop
 8000f80:	40011400 	.word	0x40011400
 8000f84:	2000167c 	.word	0x2000167c

08000f88 <AD7768_readReg>:


uint8_t AD7768_readReg(uint8_t addr)
{
 8000f88:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint8_t buf[2];
	uint8_t read[2];
	HAL_GPIO_WritePin(ADC_CS_PIN, ADC_CS_PIN_NO, GPIO_PIN_RESET);
	buf[0] = 0x80 | (addr & 0x7F);
	buf[1] = 0x00;
	HAL_SPI_TransmitReceive(&hspi3, &buf[0], &read[0], 2, 1000);
 8000f8c:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
{
 8000f90:	4605      	mov	r5, r0
	buf[1] = 0x00;
 8000f92:	2600      	movs	r6, #0
	HAL_GPIO_WritePin(ADC_CS_PIN, ADC_CS_PIN_NO, GPIO_PIN_RESET);
 8000f94:	4c1a      	ldr	r4, [pc, #104]	; (8001000 <AD7768_readReg+0x78>)
	HAL_SPI_TransmitReceive(&hspi3, &buf[0], &read[0], 2, 1000);
 8000f96:	4f1b      	ldr	r7, [pc, #108]	; (8001004 <AD7768_readReg+0x7c>)
	HAL_GPIO_WritePin(ADC_CS_PIN, ADC_CS_PIN_NO, GPIO_PIN_RESET);
 8000f98:	4620      	mov	r0, r4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	f001 fc49 	bl	8002834 <HAL_GPIO_WritePin>
	buf[0] = 0x80 | (addr & 0x7F);
 8000fa2:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	HAL_SPI_TransmitReceive(&hspi3, &buf[0], &read[0], 2, 1000);
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	aa03      	add	r2, sp, #12
 8000faa:	a902      	add	r1, sp, #8
 8000fac:	f8cd 8000 	str.w	r8, [sp]
 8000fb0:	4638      	mov	r0, r7
	buf[0] = 0x80 | (addr & 0x7F);
 8000fb2:	f88d 5008 	strb.w	r5, [sp, #8]
	buf[1] = 0x00;
 8000fb6:	f88d 6009 	strb.w	r6, [sp, #9]
	HAL_SPI_TransmitReceive(&hspi3, &buf[0], &read[0], 2, 1000);
 8000fba:	f002 f85a 	bl	8003072 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(ADC_CS_PIN, ADC_CS_PIN_NO, GPIO_PIN_SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4620      	mov	r0, r4
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	f001 fc36 	bl	8002834 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(ADC_CS_PIN, ADC_CS_PIN_NO, GPIO_PIN_RESET);
 8000fc8:	4632      	mov	r2, r6
 8000fca:	4620      	mov	r0, r4
 8000fcc:	2101      	movs	r1, #1
 8000fce:	f001 fc31 	bl	8002834 <HAL_GPIO_WritePin>
	buf[0] = 0x80 | (addr & 0x7F);
	buf[1] = 0x00;
	HAL_SPI_TransmitReceive(&hspi3, &buf[0], &read[0], 2, 1000);
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	aa03      	add	r2, sp, #12
 8000fd6:	a902      	add	r1, sp, #8
 8000fd8:	f8cd 8000 	str.w	r8, [sp]
 8000fdc:	4638      	mov	r0, r7
	buf[0] = 0x80 | (addr & 0x7F);
 8000fde:	f88d 5008 	strb.w	r5, [sp, #8]
	buf[1] = 0x00;
 8000fe2:	f88d 6009 	strb.w	r6, [sp, #9]
	HAL_SPI_TransmitReceive(&hspi3, &buf[0], &read[0], 2, 1000);
 8000fe6:	f002 f844 	bl	8003072 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(ADC_CS_PIN, ADC_CS_PIN_NO, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	4620      	mov	r0, r4
 8000fee:	4611      	mov	r1, r2
 8000ff0:	f001 fc20 	bl	8002834 <HAL_GPIO_WritePin>

	return read[1];
}
 8000ff4:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8000ff8:	b004      	add	sp, #16
 8000ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ffe:	bf00      	nop
 8001000:	40011400 	.word	0x40011400
 8001004:	2000167c 	.word	0x2000167c

08001008 <AD7768_setup>:


void AD7768_setup(uint8_t dClk, uint8_t decRate, uint8_t pwrMode)
{
 8001008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800100c:	4606      	mov	r6, r0
	uint8_t readVal = AD7768_readReg(AD7768_REG_REV_ID);
 800100e:	200a      	movs	r0, #10
{
 8001010:	460c      	mov	r4, r1
 8001012:	4615      	mov	r5, r2
	uint8_t readVal = AD7768_readReg(AD7768_REG_REV_ID);
 8001014:	f7ff ffb8 	bl	8000f88 <AD7768_readReg>
 8001018:	4607      	mov	r7, r0

	dbg_printf("readVal : %x  \n", readVal);
 800101a:	4601      	mov	r1, r0
 800101c:	4813      	ldr	r0, [pc, #76]	; (800106c <AD7768_setup+0x64>)
 800101e:	f008 fce9 	bl	80099f4 <iprintf>
	if (readVal != 0x06)
 8001022:	2f06      	cmp	r7, #6
 8001024:	d002      	beq.n	800102c <AD7768_setup+0x24>
	{
		dbg_printf("There is a problem with ADC\n");
 8001026:	4812      	ldr	r0, [pc, #72]	; (8001070 <AD7768_setup+0x68>)
 8001028:	f008 fd58 	bl	8009adc <puts>
	}HAL_Delay(100);
 800102c:	2064      	movs	r0, #100	; 0x64
 800102e:	f000 fc93 	bl	8001958 <HAL_Delay>

	AD7768_writeReg(AD7768_REG_CH_MODE_A, decRate);
 8001032:	4621      	mov	r1, r4
 8001034:	2001      	movs	r0, #1
 8001036:	f7ff ff85 	bl	8000f44 <AD7768_writeReg>
	HAL_Delay(100);
 800103a:	2064      	movs	r0, #100	; 0x64
 800103c:	f000 fc8c 	bl	8001958 <HAL_Delay>
	AD7768_writeReg(AD7768_REG_PWR_MODE, pwrMode);
 8001040:	4629      	mov	r1, r5
 8001042:	2004      	movs	r0, #4
 8001044:	f7ff ff7e 	bl	8000f44 <AD7768_writeReg>
	HAL_Delay(100);
 8001048:	2064      	movs	r0, #100	; 0x64
 800104a:	f000 fc85 	bl	8001958 <HAL_Delay>
	AD7768_writeReg(AD7768_REG_INTERFACE_CFG, dClk);
 800104e:	4631      	mov	r1, r6
 8001050:	2007      	movs	r0, #7
 8001052:	f7ff ff77 	bl	8000f44 <AD7768_writeReg>
	HAL_Delay(100);
 8001056:	2064      	movs	r0, #100	; 0x64
 8001058:	f000 fc7e 	bl	8001958 <HAL_Delay>

	dbg_printf("decRate : %x - pwrMode : %x dClk : %x\n", decRate, pwrMode, dClk);
 800105c:	4633      	mov	r3, r6
 800105e:	462a      	mov	r2, r5
 8001060:	4621      	mov	r1, r4
}
 8001062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	dbg_printf("decRate : %x - pwrMode : %x dClk : %x\n", decRate, pwrMode, dClk);
 8001066:	4803      	ldr	r0, [pc, #12]	; (8001074 <AD7768_setup+0x6c>)
 8001068:	f008 bcc4 	b.w	80099f4 <iprintf>
 800106c:	0800d1d6 	.word	0x0800d1d6
 8001070:	0800d1e6 	.word	0x0800d1e6
 8001074:	0800d202 	.word	0x0800d202

08001078 <debug_init>:

unsigned int dbg_tx_count = 0;


void debug_init()
{
 8001078:	b508      	push	{r3, lr}
	memset(dbg_tx_buffer,0,DEBUG_TX_BUFFER_SIZE);
 800107a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800107e:	2100      	movs	r1, #0
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <debug_init+0x18>)
 8001082:	f007 fdcb 	bl	8008c1c <memset>
	dbg_tx_count = 0;
 8001086:	2200      	movs	r2, #0
 8001088:	4b02      	ldr	r3, [pc, #8]	; (8001094 <debug_init+0x1c>)
 800108a:	601a      	str	r2, [r3, #0]
}
 800108c:	bd08      	pop	{r3, pc}
 800108e:	bf00      	nop
 8001090:	20001274 	.word	0x20001274
 8001094:	20000200 	.word	0x20000200

08001098 <debug_transmit_buffer>:

void debug_transmit_buffer()
{
 8001098:	b538      	push	{r3, r4, r5, lr}
	uint32_t count = 0;

	memcpy(dbg_tx_dma_buffer,dbg_tx_buffer,dbg_tx_count);
 800109a:	4c08      	ldr	r4, [pc, #32]	; (80010bc <debug_transmit_buffer+0x24>)
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <debug_transmit_buffer+0x28>)
 800109e:	6825      	ldr	r5, [r4, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	462a      	mov	r2, r5
 80010a4:	4907      	ldr	r1, [pc, #28]	; (80010c4 <debug_transmit_buffer+0x2c>)
 80010a6:	f007 fdae 	bl	8008c06 <memcpy>
	dbg_tx(dbg_tx_dma_buffer,dbg_tx_count);
 80010aa:	b2aa      	uxth	r2, r5
 80010ac:	4601      	mov	r1, r0
 80010ae:	4806      	ldr	r0, [pc, #24]	; (80010c8 <debug_transmit_buffer+0x30>)
 80010b0:	f002 fab8 	bl	8003624 <HAL_UART_Transmit_DMA>
	dbg_tx_count = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	6023      	str	r3, [r4, #0]
}
 80010b8:	bd38      	pop	{r3, r4, r5, pc}
 80010ba:	bf00      	nop
 80010bc:	20000200 	.word	0x20000200
 80010c0:	20000e74 	.word	0x20000e74
 80010c4:	20001274 	.word	0x20001274
 80010c8:	20001774 	.word	0x20001774

080010cc <__io_putchar>:

PUTCHAR_PROTOTYPE
{
	if (ch != '\r')
 80010cc:	280d      	cmp	r0, #13
{
 80010ce:	b510      	push	{r4, lr}
 80010d0:	4604      	mov	r4, r0
	if (ch != '\r')
 80010d2:	d011      	beq.n	80010f8 <__io_putchar+0x2c>
	{
		dbg_tx_buffer[dbg_tx_count++] = ch;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <__io_putchar+0x30>)
 80010d6:	490a      	ldr	r1, [pc, #40]	; (8001100 <__io_putchar+0x34>)
 80010d8:	681a      	ldr	r2, [r3, #0]

		if ((ch == '\n') || (dbg_tx_count >= DEBUG_TX_BUFFER_SIZE))
 80010da:	2c0a      	cmp	r4, #10
		dbg_tx_buffer[dbg_tx_count++] = ch;
 80010dc:	f102 0001 	add.w	r0, r2, #1
 80010e0:	6018      	str	r0, [r3, #0]
 80010e2:	548c      	strb	r4, [r1, r2]
		if ((ch == '\n') || (dbg_tx_count >= DEBUG_TX_BUFFER_SIZE))
 80010e4:	d002      	beq.n	80010ec <__io_putchar+0x20>
 80010e6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80010ea:	d305      	bcc.n	80010f8 <__io_putchar+0x2c>
		{
			dbg_tx_buffer[dbg_tx_count++] = '\r';
 80010ec:	3202      	adds	r2, #2
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	230d      	movs	r3, #13
 80010f2:	540b      	strb	r3, [r1, r0]
			debug_transmit_buffer();
 80010f4:	f7ff ffd0 	bl	8001098 <debug_transmit_buffer>
		}
	}

	return ch;
}
 80010f8:	4620      	mov	r0, r4
 80010fa:	bd10      	pop	{r4, pc}
 80010fc:	20000200 	.word	0x20000200
 8001100:	20001274 	.word	0x20001274

08001104 <DWT_Init>:
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
   // if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001104:	4a06      	ldr	r2, [pc, #24]	; (8001120 <DWT_Init+0x1c>)
 8001106:	68d3      	ldr	r3, [r2, #12]
 8001108:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800110c:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 800110e:	2200      	movs	r2, #0
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <DWT_Init+0x20>)
 8001112:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	f042 0201 	orr.w	r2, r2, #1
 800111a:	601a      	str	r2, [r3, #0]
    //}
}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000edf0 	.word	0xe000edf0
 8001124:	e0001000 	.word	0xe0001000

08001128 <HAL_GPIO_EXTI_Callback>:
ip4_addr_t ipaddr_dest;

uint32_t extCnt = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {

	if (GPIO_Pin == GPIO_PIN_4) {
 8001128:	2810      	cmp	r0, #16
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800112a:	b510      	push	{r4, lr}
	if (GPIO_Pin == GPIO_PIN_4) {
 800112c:	d113      	bne.n	8001156 <HAL_GPIO_EXTI_Callback+0x2e>
		__HAL_SPI_ENABLE(&hspi1);
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <HAL_GPIO_EXTI_Callback+0x30>)

		EXTI0_Flag = 1;

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, extCnt % 2);
 8001130:	4c0a      	ldr	r4, [pc, #40]	; (800115c <HAL_GPIO_EXTI_Callback+0x34>)
		__HAL_SPI_ENABLE(&hspi1);
 8001132:	681a      	ldr	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, extCnt % 2);
 8001134:	2140      	movs	r1, #64	; 0x40
		__HAL_SPI_ENABLE(&hspi1);
 8001136:	6813      	ldr	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, extCnt % 2);
 8001138:	4809      	ldr	r0, [pc, #36]	; (8001160 <HAL_GPIO_EXTI_Callback+0x38>)
		__HAL_SPI_ENABLE(&hspi1);
 800113a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800113e:	6013      	str	r3, [r2, #0]
		EXTI0_Flag = 1;
 8001140:	2201      	movs	r2, #1
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001144:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, extCnt % 2);
 8001146:	6822      	ldr	r2, [r4, #0]
 8001148:	f002 0201 	and.w	r2, r2, #1
 800114c:	f001 fb72 	bl	8002834 <HAL_GPIO_WritePin>
		extCnt++;
 8001150:	6823      	ldr	r3, [r4, #0]
 8001152:	3301      	adds	r3, #1
 8001154:	6023      	str	r3, [r4, #0]
	}

}
 8001156:	bd10      	pop	{r4, pc}
 8001158:	2000171c 	.word	0x2000171c
 800115c:	20000d0c 	.word	0x20000d0c
 8001160:	40011400 	.word	0x40011400
 8001164:	20000204 	.word	0x20000204

08001168 <HAL_SPI_RxHalfCpltCallback>:

void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
	SPI_RxDMABuffer[0]++;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_SPI_RxHalfCpltCallback+0x1c>)
	p1->payload = &SPI_RxDMABuffer[0];

	udp_sendto(test_pcb, p1, &ipaddr_dest, test_port);
 800116a:	4807      	ldr	r0, [pc, #28]	; (8001188 <HAL_SPI_RxHalfCpltCallback+0x20>)
	SPI_RxDMABuffer[0]++;
 800116c:	781a      	ldrb	r2, [r3, #0]
	udp_sendto(test_pcb, p1, &ipaddr_dest, test_port);
 800116e:	6800      	ldr	r0, [r0, #0]
	SPI_RxDMABuffer[0]++;
 8001170:	3201      	adds	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]
	p1->payload = &SPI_RxDMABuffer[0];
 8001174:	4a05      	ldr	r2, [pc, #20]	; (800118c <HAL_SPI_RxHalfCpltCallback+0x24>)
 8001176:	6811      	ldr	r1, [r2, #0]
	udp_sendto(test_pcb, p1, &ipaddr_dest, test_port);
 8001178:	4a05      	ldr	r2, [pc, #20]	; (8001190 <HAL_SPI_RxHalfCpltCallback+0x28>)
	p1->payload = &SPI_RxDMABuffer[0];
 800117a:	604b      	str	r3, [r1, #4]
	udp_sendto(test_pcb, p1, &ipaddr_dest, test_port);
 800117c:	f64d 1302 	movw	r3, #55554	; 0xd902
 8001180:	f006 ba78 	b.w	8007674 <udp_sendto>
 8001184:	20000205 	.word	0x20000205
 8001188:	20000d10 	.word	0x20000d10
 800118c:	200016d4 	.word	0x200016d4
 8001190:	20001674 	.word	0x20001674

08001194 <HAL_SPI_RxCpltCallback>:
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{

	p2->payload = &SPI_RxDMABuffer[SAMPLE_DMA_SIZE + 4];
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <HAL_SPI_RxCpltCallback+0x18>)

	udp_sendto(test_pcb, p2, &ipaddr_dest, test_port);
 8001196:	4806      	ldr	r0, [pc, #24]	; (80011b0 <HAL_SPI_RxCpltCallback+0x1c>)
	p2->payload = &SPI_RxDMABuffer[SAMPLE_DMA_SIZE + 4];
 8001198:	6819      	ldr	r1, [r3, #0]
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_SPI_RxCpltCallback+0x20>)
	udp_sendto(test_pcb, p2, &ipaddr_dest, test_port);
 800119c:	4a06      	ldr	r2, [pc, #24]	; (80011b8 <HAL_SPI_RxCpltCallback+0x24>)
	p2->payload = &SPI_RxDMABuffer[SAMPLE_DMA_SIZE + 4];
 800119e:	604b      	str	r3, [r1, #4]
	udp_sendto(test_pcb, p2, &ipaddr_dest, test_port);
 80011a0:	6800      	ldr	r0, [r0, #0]
 80011a2:	f64d 1302 	movw	r3, #55554	; 0xd902
 80011a6:	f006 ba65 	b.w	8007674 <udp_sendto>
 80011aa:	bf00      	nop
 80011ac:	20001678 	.word	0x20001678
 80011b0:	20000d10 	.word	0x20000d10
 80011b4:	20000789 	.word	0x20000789
 80011b8:	20001674 	.word	0x20001674

080011bc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
  */
void SystemClock_Config(void)
{
 80011bc:	b530      	push	{r4, r5, lr}
 80011be:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c0:	2210      	movs	r2, #16
 80011c2:	2100      	movs	r1, #0
 80011c4:	a80a      	add	r0, sp, #40	; 0x28
 80011c6:	f007 fd29 	bl	8008c1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ca:	2214      	movs	r2, #20
 80011cc:	2100      	movs	r1, #0
 80011ce:	a801      	add	r0, sp, #4
 80011d0:	f007 fd24 	bl	8008c1c <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d4:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80011d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011da:	2204      	movs	r2, #4
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80011dc:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80011de:	e9cd 3208 	strd	r3, r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e2:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011ea:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80011ec:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 80011f0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80011f4:	2340      	movs	r3, #64	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f8:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011fa:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 80011fc:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001200:	f001 fb2a 	bl	8002858 <HAL_RCC_OscConfig>
 8001204:	b108      	cbz	r0, 800120a <SystemClock_Config+0x4e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001206:	b672      	cpsid	i
 8001208:	e7fe      	b.n	8001208 <SystemClock_Config+0x4c>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120a:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120c:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001210:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001214:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001216:	e9cd 3004 	strd	r3, r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800121a:	4621      	mov	r1, r4
 800121c:	a801      	add	r0, sp, #4
 800121e:	f001 fd83 	bl	8002d28 <HAL_RCC_ClockConfig>
 8001222:	b108      	cbz	r0, 8001228 <SystemClock_Config+0x6c>
 8001224:	b672      	cpsid	i
 8001226:	e7fe      	b.n	8001226 <SystemClock_Config+0x6a>
  {
    Error_Handler();
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_HSE_PREDIV2_DIV5);
 8001228:	4a08      	ldr	r2, [pc, #32]	; (800124c <SystemClock_Config+0x90>)
 800122a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800122c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001234:	62d3      	str	r3, [r2, #44]	; 0x2c
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_CONFIG(RCC_PLLI2S_MUL10);
 8001236:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001238:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800123c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001240:	62d3      	str	r3, [r2, #44]	; 0x2c
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8001242:	4b03      	ldr	r3, [pc, #12]	; (8001250 <SystemClock_Config+0x94>)
 8001244:	601d      	str	r5, [r3, #0]
}
 8001246:	b015      	add	sp, #84	; 0x54
 8001248:	bd30      	pop	{r4, r5, pc}
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000
 8001250:	42420070 	.word	0x42420070

08001254 <main>:
{
 8001254:	b580      	push	{r7, lr}
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001256:	4c8d      	ldr	r4, [pc, #564]	; (800148c <main+0x238>)
{
 8001258:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 800125a:	f000 fb59 	bl	8001910 <HAL_Init>
  SystemClock_Config();
 800125e:	f7ff ffad 	bl	80011bc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001262:	2210      	movs	r2, #16
 8001264:	2100      	movs	r1, #0
 8001266:	a806      	add	r0, sp, #24
 8001268:	f007 fcd8 	bl	8008c1c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126c:	69a3      	ldr	r3, [r4, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ETH_RESET_Pin|GPIO_PIN_0|ADC_SYNC_START_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001270:	f043 0310 	orr.w	r3, r3, #16
 8001274:	61a3      	str	r3, [r4, #24]
 8001276:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOD, ETH_RESET_Pin|GPIO_PIN_0|ADC_SYNC_START_Pin, GPIO_PIN_RESET);
 8001278:	f242 0103 	movw	r1, #8195	; 0x2003
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127c:	f003 0310 	and.w	r3, r3, #16
 8001280:	9302      	str	r3, [sp, #8]
 8001282:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001284:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOD, ETH_RESET_Pin|GPIO_PIN_0|ADC_SYNC_START_Pin, GPIO_PIN_RESET);
 8001286:	4882      	ldr	r0, [pc, #520]	; (8001490 <main+0x23c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	61a3      	str	r3, [r4, #24]
 800128e:	69a3      	ldr	r3, [r4, #24]

  /*Configure GPIO pins : ETH_RESET_Pin PD0 ADC_SYNC_START_Pin */
  GPIO_InitStruct.Pin = ETH_RESET_Pin|GPIO_PIN_0|ADC_SYNC_START_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2500      	movs	r5, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	9303      	str	r3, [sp, #12]
 8001298:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	2701      	movs	r7, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	f043 0308 	orr.w	r3, r3, #8
 80012a2:	61a3      	str	r3, [r4, #24]
 80012a4:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2602      	movs	r6, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a8:	f003 0308 	and.w	r3, r3, #8
 80012ac:	9304      	str	r3, [sp, #16]
 80012ae:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b0:	69a3      	ldr	r3, [r4, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80012b2:	f04f 0808 	mov.w	r8, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b6:	f043 0320 	orr.w	r3, r3, #32
 80012ba:	61a3      	str	r3, [r4, #24]
 80012bc:	69a3      	ldr	r3, [r4, #24]
 80012be:	f003 0320 	and.w	r3, r3, #32
 80012c2:	9305      	str	r3, [sp, #20]
 80012c4:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOD, ETH_RESET_Pin|GPIO_PIN_0|ADC_SYNC_START_Pin, GPIO_PIN_RESET);
 80012c6:	f001 fab5 	bl	8002834 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ca:	f242 0303 	movw	r3, #8195	; 0x2003
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ce:	a906      	add	r1, sp, #24
 80012d0:	486f      	ldr	r0, [pc, #444]	; (8001490 <main+0x23c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d2:	e9cd 3706 	strd	r3, r7, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	e9cd 5608 	strd	r5, r6, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012da:	f001 f9cb 	bl	8002674 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012de:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80012e0:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012e2:	433b      	orrs	r3, r7
 80012e4:	6163      	str	r3, [r4, #20]
 80012e6:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80012e8:	4629      	mov	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ea:	403b      	ands	r3, r7
 80012ec:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80012ee:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012f0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80012f2:	f000 fb55 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80012f6:	200c      	movs	r0, #12
 80012f8:	f000 fb86 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80012fc:	462a      	mov	r2, r5
 80012fe:	4629      	mov	r1, r5
 8001300:	2011      	movs	r0, #17
 8001302:	f000 fb4d 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001306:	2011      	movs	r0, #17
 8001308:	f000 fb7e 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800130c:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi3.Instance = SPI3;
 8001310:	4860      	ldr	r0, [pc, #384]	; (8001494 <main+0x240>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001312:	4c61      	ldr	r4, [pc, #388]	; (8001498 <main+0x244>)
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001314:	e9c0 5502 	strd	r5, r5, [r0, #8]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001318:	e9c0 4300 	strd	r4, r3, [r0]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800131c:	e9c0 5504 	strd	r5, r5, [r0, #16]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001320:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001324:	e9c0 5508 	strd	r5, r5, [r0, #32]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001328:	6285      	str	r5, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800132a:	250a      	movs	r5, #10
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800132c:	e9c0 3806 	strd	r3, r8, [r0, #24]
  hspi3.Init.CRCPolynomial = 10;
 8001330:	62c5      	str	r5, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001332:	f001 fe46 	bl	8002fc2 <HAL_SPI_Init>
 8001336:	b108      	cbz	r0, 800133c <main+0xe8>
 8001338:	b672      	cpsid	i
 800133a:	e7fe      	b.n	800133a <main+0xe6>
  hspi1.Instance = SPI1;
 800133c:	4c57      	ldr	r4, [pc, #348]	; (800149c <main+0x248>)
 800133e:	4b58      	ldr	r3, [pc, #352]	; (80014a0 <main+0x24c>)
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001340:	e9c4 6004 	strd	r6, r0, [r4, #16]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001344:	e9c4 3000 	strd	r3, r0, [r4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001348:	f44f 6380 	mov.w	r3, #1024	; 0x400
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800134c:	e9c4 0806 	strd	r0, r8, [r4, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001350:	e9c4 3002 	strd	r3, r0, [r4, #8]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001354:	e9c4 0008 	strd	r0, r0, [r4, #32]
  hspi1.Init.CRCPolynomial = 10;
 8001358:	e9c4 050a 	strd	r0, r5, [r4, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800135c:	4620      	mov	r0, r4
 800135e:	f001 fe30 	bl	8002fc2 <HAL_SPI_Init>
 8001362:	b108      	cbz	r0, 8001368 <main+0x114>
 8001364:	b672      	cpsid	i
 8001366:	e7fe      	b.n	8001366 <main+0x112>
  huart2.Init.BaudRate = 115200;
 8001368:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Instance = USART2;
 800136c:	4b4d      	ldr	r3, [pc, #308]	; (80014a4 <main+0x250>)
  huart2.Init.BaudRate = 115200;
 800136e:	494e      	ldr	r1, [pc, #312]	; (80014a8 <main+0x254>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001370:	e9c3 0002 	strd	r0, r0, [r3, #8]
  huart2.Init.Mode = UART_MODE_TX;
 8001374:	e9c3 0804 	strd	r0, r8, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001378:	e9c3 0006 	strd	r0, r0, [r3, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800137c:	4618      	mov	r0, r3
  huart2.Init.BaudRate = 115200;
 800137e:	e9c3 1200 	strd	r1, r2, [r3]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001382:	f002 f921 	bl	80035c8 <HAL_UART_Init>
 8001386:	4605      	mov	r5, r0
 8001388:	b108      	cbz	r0, 800138e <main+0x13a>
 800138a:	b672      	cpsid	i
 800138c:	e7fe      	b.n	800138c <main+0x138>
  HAL_GPIO_WritePin(ETH_RESET_GPIO_Port, ETH_RESET_Pin, RESET);
 800138e:	4602      	mov	r2, r0
 8001390:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001394:	483e      	ldr	r0, [pc, #248]	; (8001490 <main+0x23c>)
 8001396:	f001 fa4d 	bl	8002834 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800139a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800139e:	f000 fadb 	bl	8001958 <HAL_Delay>
  HAL_GPIO_WritePin(ETH_RESET_GPIO_Port, ETH_RESET_Pin, SET);
 80013a2:	463a      	mov	r2, r7
 80013a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a8:	4839      	ldr	r0, [pc, #228]	; (8001490 <main+0x23c>)
 80013aa:	f001 fa43 	bl	8002834 <HAL_GPIO_WritePin>
  MX_LWIP_Init();
 80013ae:	f002 f9b9 	bl	8003724 <MX_LWIP_Init>
  debug_init();
 80013b2:	f7ff fe61 	bl	8001078 <debug_init>
  DWT_Init();
 80013b6:	f7ff fea5 	bl	8001104 <DWT_Init>
  SystemCoreClockUpdate();
 80013ba:	f000 fa11 	bl	80017e0 <SystemCoreClockUpdate>
  dbg_printf("Clock : %d\r\n", SystemCoreClock);
 80013be:	4b3b      	ldr	r3, [pc, #236]	; (80014ac <main+0x258>)
 80013c0:	483b      	ldr	r0, [pc, #236]	; (80014b0 <main+0x25c>)
 80013c2:	6819      	ldr	r1, [r3, #0]
 80013c4:	f008 fb16 	bl	80099f4 <iprintf>
  AD7768_setup(AD7768_INTERFACE_CFG_DCLK_DIV(AD7768_DCLK_DIV_2),
 80013c8:	2233      	movs	r2, #51	; 0x33
 80013ca:	4641      	mov	r1, r8
 80013cc:	4630      	mov	r0, r6
 80013ce:	f7ff fe1b 	bl	8001008 <AD7768_setup>
  HAL_Delay(100);
 80013d2:	2064      	movs	r0, #100	; 0x64
 80013d4:	f000 fac0 	bl	8001958 <HAL_Delay>
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80013d8:	2210      	movs	r2, #16
 80013da:	4629      	mov	r1, r5
 80013dc:	a806      	add	r0, sp, #24
 80013de:	f007 fc1d 	bl	8008c1c <memset>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80013e2:	462a      	mov	r2, r5
 80013e4:	2140      	movs	r1, #64	; 0x40
 80013e6:	482a      	ldr	r0, [pc, #168]	; (8001490 <main+0x23c>)
 80013e8:	f001 fa24 	bl	8002834 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013ec:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ee:	e9cd 3706 	strd	r3, r7, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f2:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f4:	a906      	add	r1, sp, #24
 80013f6:	4826      	ldr	r0, [pc, #152]	; (8001490 <main+0x23c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013fc:	f001 f93a 	bl	8002674 <HAL_GPIO_Init>
  test_pcb = udp_new();
 8001400:	f006 f952 	bl	80076a8 <udp_new>
 8001404:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <main+0x260>)
  udp_bind(test_pcb, &ipaddr, 54321);
 8001406:	f24d 4231 	movw	r2, #54321	; 0xd431
 800140a:	492b      	ldr	r1, [pc, #172]	; (80014b8 <main+0x264>)
  test_pcb = udp_new();
 800140c:	6018      	str	r0, [r3, #0]
  udp_bind(test_pcb, &ipaddr, 54321);
 800140e:	f006 f857 	bl	80074c0 <udp_bind>
  p1 = pbuf_alloc(PBUF_TRANSPORT, 1408 + 4, PBUF_REF);
 8001412:	4632      	mov	r2, r6
 8001414:	f240 5184 	movw	r1, #1412	; 0x584
 8001418:	4628      	mov	r0, r5
 800141a:	f002 ff1b 	bl	8004254 <pbuf_alloc>
 800141e:	4b27      	ldr	r3, [pc, #156]	; (80014bc <main+0x268>)
 8001420:	4607      	mov	r7, r0
 8001422:	6018      	str	r0, [r3, #0]
  p1->payload = (uint8_t *)malloc((1408 + 4) * sizeof(uint8_t));
 8001424:	f240 5084 	movw	r0, #1412	; 0x584
 8001428:	f007 fbce 	bl	8008bc8 <malloc>
  memset(p1->payload, 0, 1408+4);
 800142c:	f240 5284 	movw	r2, #1412	; 0x584
 8001430:	4629      	mov	r1, r5
  p1->payload = (uint8_t *)malloc((1408 + 4) * sizeof(uint8_t));
 8001432:	6078      	str	r0, [r7, #4]
  memset(p1->payload, 0, 1408+4);
 8001434:	f007 fbf2 	bl	8008c1c <memset>
  p2 = pbuf_alloc(PBUF_TRANSPORT, 1408, PBUF_REF);
 8001438:	4632      	mov	r2, r6
 800143a:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 800143e:	4628      	mov	r0, r5
 8001440:	f002 ff08 	bl	8004254 <pbuf_alloc>
 8001444:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <main+0x26c>)
 8001446:	4606      	mov	r6, r0
 8001448:	6018      	str	r0, [r3, #0]
  p2->payload = (uint8_t *)malloc((1408) * sizeof(uint8_t));
 800144a:	f44f 60b0 	mov.w	r0, #1408	; 0x580
 800144e:	f007 fbbb 	bl	8008bc8 <malloc>
  memset(p2->payload, 0, 1408);
 8001452:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8001456:	4629      	mov	r1, r5
  p2->payload = (uint8_t *)malloc((1408) * sizeof(uint8_t));
 8001458:	6070      	str	r0, [r6, #4]
  memset(p2->payload, 0, 1408);
 800145a:	f007 fbdf 	bl	8008c1c <memset>
  IP4_ADDR(&ipaddr_dest, IP_ADDRESS_DEST[0], IP_ADDRESS_DEST[1], IP_ADDRESS_DEST[2], IP_ADDRESS_DEST[3]);
 800145e:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <main+0x270>)
 8001460:	4a19      	ldr	r2, [pc, #100]	; (80014c8 <main+0x274>)
  HAL_SPI_Receive_DMA(&hspi1, &SPI_RxDMABuffer[4], SAMPLE_DMA_SIZE * 2);
 8001462:	491a      	ldr	r1, [pc, #104]	; (80014cc <main+0x278>)
  IP4_ADDR(&ipaddr_dest, IP_ADDRESS_DEST[0], IP_ADDRESS_DEST[1], IP_ADDRESS_DEST[2], IP_ADDRESS_DEST[3]);
 8001464:	601a      	str	r2, [r3, #0]
  __HAL_DMA_ENABLE_IT(&hdma_spi1_rx, DMA_IT_HT);
 8001466:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <main+0x27c>)
  HAL_SPI_Receive_DMA(&hspi1, &SPI_RxDMABuffer[4], SAMPLE_DMA_SIZE * 2);
 8001468:	4620      	mov	r0, r4
  __HAL_DMA_ENABLE_IT(&hdma_spi1_rx, DMA_IT_HT);
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	f042 0204 	orr.w	r2, r2, #4
 8001472:	601a      	str	r2, [r3, #0]
  __HAL_DMA_ENABLE_IT(&hdma_spi1_rx, DMA_IT_TC);
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	f042 0202 	orr.w	r2, r2, #2
 800147a:	601a      	str	r2, [r3, #0]
  HAL_SPI_Receive_DMA(&hspi1, &SPI_RxDMABuffer[4], SAMPLE_DMA_SIZE * 2);
 800147c:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 8001480:	f001 ff6c 	bl	800335c <HAL_SPI_Receive_DMA>
		  MX_LWIP_Process();
 8001484:	f002 f9a2 	bl	80037cc <MX_LWIP_Process>
 8001488:	e7fc      	b.n	8001484 <main+0x230>
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000
 8001490:	40011400 	.word	0x40011400
 8001494:	2000167c 	.word	0x2000167c
 8001498:	40003c00 	.word	0x40003c00
 800149c:	2000171c 	.word	0x2000171c
 80014a0:	40013000 	.word	0x40013000
 80014a4:	20001774 	.word	0x20001774
 80014a8:	40004400 	.word	0x40004400
 80014ac:	20000000 	.word	0x20000000
 80014b0:	0800d229 	.word	0x0800d229
 80014b4:	20000d10 	.word	0x20000d10
 80014b8:	20001834 	.word	0x20001834
 80014bc:	200016d4 	.word	0x200016d4
 80014c0:	20001678 	.word	0x20001678
 80014c4:	20001674 	.word	0x20001674
 80014c8:	7963a8c0 	.word	0x7963a8c0
 80014cc:	20000209 	.word	0x20000209
 80014d0:	200017b4 	.word	0x200017b4

080014d4 <Error_Handler>:
 80014d4:	b672      	cpsid	i
 80014d6:	e7fe      	b.n	80014d6 <Error_Handler+0x2>

080014d8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014d8:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <HAL_MspInit+0x3c>)
{
 80014da:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80014dc:	699a      	ldr	r2, [r3, #24]
 80014de:	f042 0201 	orr.w	r2, r2, #1
 80014e2:	619a      	str	r2, [r3, #24]
 80014e4:	699a      	ldr	r2, [r3, #24]
 80014e6:	f002 0201 	and.w	r2, r2, #1
 80014ea:	9200      	str	r2, [sp, #0]
 80014ec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	69da      	ldr	r2, [r3, #28]
 80014f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014f4:	61da      	str	r2, [r3, #28]
 80014f6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014f8:	4a07      	ldr	r2, [pc, #28]	; (8001518 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001502:	6853      	ldr	r3, [r2, #4]
 8001504:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001508:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800150c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150e:	b002      	add	sp, #8
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40021000 	.word	0x40021000
 8001518:	40010000 	.word	0x40010000

0800151c <HAL_SPI_MspInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	2210      	movs	r2, #16
{
 800151e:	b530      	push	{r4, r5, lr}
 8001520:	4605      	mov	r5, r0
 8001522:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	eb0d 0002 	add.w	r0, sp, r2
 8001528:	2100      	movs	r1, #0
 800152a:	f007 fb77 	bl	8008c1c <memset>
  if(hspi->Instance==SPI1)
 800152e:	682b      	ldr	r3, [r5, #0]
 8001530:	4a3e      	ldr	r2, [pc, #248]	; (800162c <HAL_SPI_MspInit+0x110>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d149      	bne.n	80015ca <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001536:	4b3e      	ldr	r3, [pc, #248]	; (8001630 <HAL_SPI_MspInit+0x114>)
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001538:	483e      	ldr	r0, [pc, #248]	; (8001634 <HAL_SPI_MspInit+0x118>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800153a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI1_CLK_ENABLE();
 800153e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001542:	619a      	str	r2, [r3, #24]
 8001544:	699a      	ldr	r2, [r3, #24]

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001546:	4c3c      	ldr	r4, [pc, #240]	; (8001638 <HAL_SPI_MspInit+0x11c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001548:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800154c:	9200      	str	r2, [sp, #0]
 800154e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001550:	699a      	ldr	r2, [r3, #24]
 8001552:	f042 0204 	orr.w	r2, r2, #4
 8001556:	619a      	str	r2, [r3, #24]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	9301      	str	r3, [sp, #4]
 8001560:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001562:	23b0      	movs	r3, #176	; 0xb0
 8001564:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001566:	f001 f885 	bl	8002674 <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800156a:	2300      	movs	r3, #0
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800156c:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800156e:	4833      	ldr	r0, [pc, #204]	; (800163c <HAL_SPI_MspInit+0x120>)
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001570:	60a3      	str	r3, [r4, #8]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001572:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001576:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800157a:	6163      	str	r3, [r4, #20]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800157c:	f04f 0c20 	mov.w	ip, #32
 8001580:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001584:	4620      	mov	r0, r4
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001586:	e9c4 c306 	strd	ip, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800158a:	f000 fa61 	bl	8001a50 <HAL_DMA_Init>
 800158e:	b108      	cbz	r0, 8001594 <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 8001590:	f7ff ffa0 	bl	80014d4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001594:	64ec      	str	r4, [r5, #76]	; 0x4c
 8001596:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN SPI1_MspInit 1 */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001598:	2510      	movs	r5, #16
 800159a:	4b29      	ldr	r3, [pc, #164]	; (8001640 <HAL_SPI_MspInit+0x124>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800159c:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800159e:	e9cd 5304 	strd	r5, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a2:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	eb0d 0105 	add.w	r1, sp, r5
 80015a8:	4822      	ldr	r0, [pc, #136]	; (8001634 <HAL_SPI_MspInit+0x118>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015aa:	e9cd 4306 	strd	r4, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ae:	f001 f861 	bl	8002674 <HAL_GPIO_Init>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80015b2:	4b24      	ldr	r3, [pc, #144]	; (8001644 <HAL_SPI_MspInit+0x128>)
    HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80015b4:	200a      	movs	r0, #10
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80015b6:	615d      	str	r5, [r3, #20]
    HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80015b8:	4622      	mov	r2, r4
 80015ba:	4621      	mov	r1, r4
 80015bc:	f000 f9f0 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80015c0:	200a      	movs	r0, #10
 80015c2:	f000 fa21 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015c6:	b009      	add	sp, #36	; 0x24
 80015c8:	bd30      	pop	{r4, r5, pc}
  else if(hspi->Instance==SPI3)
 80015ca:	4a1f      	ldr	r2, [pc, #124]	; (8001648 <HAL_SPI_MspInit+0x12c>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d1fa      	bne.n	80015c6 <HAL_SPI_MspInit+0xaa>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015d0:	4b17      	ldr	r3, [pc, #92]	; (8001630 <HAL_SPI_MspInit+0x114>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d2:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015d4:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d6:	481d      	ldr	r0, [pc, #116]	; (800164c <HAL_SPI_MspInit+0x130>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015dc:	61da      	str	r2, [r3, #28]
 80015de:	69da      	ldr	r2, [r3, #28]
 80015e0:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80015e4:	9202      	str	r2, [sp, #8]
 80015e6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e8:	699a      	ldr	r2, [r3, #24]
 80015ea:	f042 0210 	orr.w	r2, r2, #16
 80015ee:	619a      	str	r2, [r3, #24]
 80015f0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f6:	f003 0310 	and.w	r3, r3, #16
 80015fa:	9303      	str	r3, [sp, #12]
 80015fc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001608:	f001 f834 	bl	8002674 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160c:	2300      	movs	r3, #0
 800160e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001612:	480e      	ldr	r0, [pc, #56]	; (800164c <HAL_SPI_MspInit+0x130>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001614:	e9cd 1304 	strd	r1, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001618:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161c:	f001 f82a 	bl	8002674 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_SPI3_ENABLE();
 8001620:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <HAL_SPI_MspInit+0x134>)
 8001622:	6853      	ldr	r3, [r2, #4]
 8001624:	f043 53b8 	orr.w	r3, r3, #385875968	; 0x17000000
 8001628:	6053      	str	r3, [r2, #4]
}
 800162a:	e7cc      	b.n	80015c6 <HAL_SPI_MspInit+0xaa>
 800162c:	40013000 	.word	0x40013000
 8001630:	40021000 	.word	0x40021000
 8001634:	40010800 	.word	0x40010800
 8001638:	200017b4 	.word	0x200017b4
 800163c:	4002001c 	.word	0x4002001c
 8001640:	10110000 	.word	0x10110000
 8001644:	40010400 	.word	0x40010400
 8001648:	40003c00 	.word	0x40003c00
 800164c:	40011000 	.word	0x40011000
 8001650:	40010000 	.word	0x40010000

08001654 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001654:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001656:	2710      	movs	r7, #16
{
 8001658:	4606      	mov	r6, r0
 800165a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	463a      	mov	r2, r7
 800165e:	2100      	movs	r1, #0
 8001660:	a802      	add	r0, sp, #8
 8001662:	f007 fadb 	bl	8008c1c <memset>
  if(huart->Instance==USART2)
 8001666:	6832      	ldr	r2, [r6, #0]
 8001668:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <HAL_UART_MspInit+0xa0>)
 800166a:	429a      	cmp	r2, r3
 800166c:	d140      	bne.n	80016f0 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800166e:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001672:	69da      	ldr	r2, [r3, #28]
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001674:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8001676:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800167a:	61da      	str	r2, [r3, #28]
 800167c:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800167e:	481e      	ldr	r0, [pc, #120]	; (80016f8 <HAL_UART_MspInit+0xa4>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001680:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001684:	9200      	str	r2, [sp, #0]
 8001686:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001688:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168a:	2500      	movs	r5, #0
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800168c:	f042 0220 	orr.w	r2, r2, #32
 8001690:	619a      	str	r2, [r3, #24]
 8001692:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2220      	movs	r2, #32
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001696:	f003 0320 	and.w	r3, r3, #32
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a4:	2303      	movs	r3, #3
 80016a6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a8:	f000 ffe4 	bl	8002674 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ac:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ae:	4812      	ldr	r0, [pc, #72]	; (80016f8 <HAL_UART_MspInit+0xa4>)
 80016b0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b2:	e9cd 3502 	strd	r3, r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b8:	f000 ffdc 	bl	8002674 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART2_ENABLE();
 80016bc:	4a0f      	ldr	r2, [pc, #60]	; (80016fc <HAL_UART_MspInit+0xa8>)

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80016be:	4c10      	ldr	r4, [pc, #64]	; (8001700 <HAL_UART_MspInit+0xac>)
    __HAL_AFIO_REMAP_USART2_ENABLE();
 80016c0:	6853      	ldr	r3, [r2, #4]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80016c2:	4620      	mov	r0, r4
    __HAL_AFIO_REMAP_USART2_ENABLE();
 80016c4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80016c8:	f043 0308 	orr.w	r3, r3, #8
 80016cc:	6053      	str	r3, [r2, #4]
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <HAL_UART_MspInit+0xb0>)
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016d0:	60a5      	str	r5, [r4, #8]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016d2:	e9c4 3700 	strd	r3, r7, [r4]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016d6:	2380      	movs	r3, #128	; 0x80
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80016d8:	e9c4 5505 	strd	r5, r5, [r4, #20]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016dc:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016e0:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80016e2:	f000 f9b5 	bl	8001a50 <HAL_DMA_Init>
 80016e6:	b108      	cbz	r0, 80016ec <HAL_UART_MspInit+0x98>
    {
      Error_Handler();
 80016e8:	f7ff fef4 	bl	80014d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80016ec:	6334      	str	r4, [r6, #48]	; 0x30
 80016ee:	6266      	str	r6, [r4, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016f0:	b007      	add	sp, #28
 80016f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f4:	40004400 	.word	0x40004400
 80016f8:	40011400 	.word	0x40011400
 80016fc:	40010000 	.word	0x40010000
 8001700:	200016d8 	.word	0x200016d8
 8001704:	40020080 	.word	0x40020080

08001708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001708:	e7fe      	b.n	8001708 <NMI_Handler>

0800170a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170a:	e7fe      	b.n	800170a <HardFault_Handler>

0800170c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800170c:	e7fe      	b.n	800170c <MemManage_Handler>

0800170e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170e:	e7fe      	b.n	800170e <BusFault_Handler>

08001710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001710:	e7fe      	b.n	8001710 <UsageFault_Handler>

08001712 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001712:	4770      	bx	lr

08001714 <DebugMon_Handler>:
 8001714:	4770      	bx	lr

08001716 <PendSV_Handler>:
 8001716:	4770      	bx	lr

08001718 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001718:	f000 b90c 	b.w	8001934 <HAL_IncTick>

0800171c <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800171c:	4801      	ldr	r0, [pc, #4]	; (8001724 <DMA1_Channel2_IRQHandler+0x8>)
 800171e:	f000 ba15 	b.w	8001b4c <HAL_DMA_IRQHandler>
 8001722:	bf00      	nop
 8001724:	200017b4 	.word	0x200017b4

08001728 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001728:	4801      	ldr	r0, [pc, #4]	; (8001730 <DMA1_Channel7_IRQHandler+0x8>)
 800172a:	f000 ba0f 	b.w	8001b4c <HAL_DMA_IRQHandler>
 800172e:	bf00      	nop
 8001730:	200016d8 	.word	0x200016d8

08001734 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001734:	4801      	ldr	r0, [pc, #4]	; (800173c <ETH_IRQHandler+0x8>)
 8001736:	f000 bd19 	b.w	800216c <HAL_ETH_IRQHandler>
 800173a:	bf00      	nop
 800173c:	200048a8 	.word	0x200048a8

08001740 <ETH_WKUP_IRQHandler>:
 8001740:	f7ff bff8 	b.w	8001734 <ETH_IRQHandler>

08001744 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001744:	2010      	movs	r0, #16
 8001746:	f001 b87b 	b.w	8002840 <HAL_GPIO_EXTI_IRQHandler>

0800174a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800174a:	b570      	push	{r4, r5, r6, lr}
 800174c:	460e      	mov	r6, r1
 800174e:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001750:	460c      	mov	r4, r1
 8001752:	1ba3      	subs	r3, r4, r6
 8001754:	429d      	cmp	r5, r3
 8001756:	dc01      	bgt.n	800175c <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001758:	4628      	mov	r0, r5
 800175a:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800175c:	f3af 8000 	nop.w
 8001760:	f804 0b01 	strb.w	r0, [r4], #1
 8001764:	e7f5      	b.n	8001752 <_read+0x8>

08001766 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001766:	b570      	push	{r4, r5, r6, lr}
 8001768:	460e      	mov	r6, r1
 800176a:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176c:	460c      	mov	r4, r1
 800176e:	1ba3      	subs	r3, r4, r6
 8001770:	429d      	cmp	r5, r3
 8001772:	dc01      	bgt.n	8001778 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001774:	4628      	mov	r0, r5
 8001776:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001778:	f814 0b01 	ldrb.w	r0, [r4], #1
 800177c:	f7ff fca6 	bl	80010cc <__io_putchar>
 8001780:	e7f5      	b.n	800176e <_write+0x8>

08001782 <_close>:

int _close(int file)
{
	return -1;
}
 8001782:	f04f 30ff 	mov.w	r0, #4294967295
 8001786:	4770      	bx	lr

08001788 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001788:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800178c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800178e:	604b      	str	r3, [r1, #4]
}
 8001790:	4770      	bx	lr

08001792 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001792:	2001      	movs	r0, #1
 8001794:	4770      	bx	lr

08001796 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001796:	2000      	movs	r0, #0
 8001798:	4770      	bx	lr
	...

0800179c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <_sbrk+0x2c>)
{
 800179e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80017a0:	6819      	ldr	r1, [r3, #0]
{
 80017a2:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 80017a4:	b909      	cbnz	r1, 80017aa <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80017a6:	4909      	ldr	r1, [pc, #36]	; (80017cc <_sbrk+0x30>)
 80017a8:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017aa:	6818      	ldr	r0, [r3, #0]
 80017ac:	4c08      	ldr	r4, [pc, #32]	; (80017d0 <_sbrk+0x34>)
 80017ae:	4909      	ldr	r1, [pc, #36]	; (80017d4 <_sbrk+0x38>)
 80017b0:	4402      	add	r2, r0
 80017b2:	1b09      	subs	r1, r1, r4
 80017b4:	428a      	cmp	r2, r1
  {
    errno = ENOMEM;
 80017b6:	bf81      	itttt	hi
 80017b8:	220c      	movhi	r2, #12
 80017ba:	4b07      	ldrhi	r3, [pc, #28]	; (80017d8 <_sbrk+0x3c>)
    return (void *)-1;
 80017bc:	f04f 30ff 	movhi.w	r0, #4294967295
    errno = ENOMEM;
 80017c0:	601a      	strhi	r2, [r3, #0]
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80017c2:	bf98      	it	ls
 80017c4:	601a      	strls	r2, [r3, #0]

  return (void *)prev_heap_end;
}
 80017c6:	bd10      	pop	{r4, pc}
 80017c8:	20000d14 	.word	0x20000d14
 80017cc:	20006108 	.word	0x20006108
 80017d0:	00000400 	.word	0x00000400
 80017d4:	20010000 	.word	0x20010000
 80017d8:	20006104 	.word	0x20006104

080017dc <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017dc:	4770      	bx	lr
	...

080017e0 <SystemCoreClockUpdate>:
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80017e0:	4820      	ldr	r0, [pc, #128]	; (8001864 <SystemCoreClockUpdate+0x84>)
{
 80017e2:	b570      	push	{r4, r5, r6, lr}
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80017e4:	6843      	ldr	r3, [r0, #4]
 80017e6:	4c20      	ldr	r4, [pc, #128]	; (8001868 <SystemCoreClockUpdate+0x88>)
 80017e8:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d00c      	beq.n	800180a <SystemCoreClockUpdate+0x2a>
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	d00c      	beq.n	800180e <SystemCoreClockUpdate+0x2e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80017f4:	4b1d      	ldr	r3, [pc, #116]	; (800186c <SystemCoreClockUpdate+0x8c>)
        {/* PLL2 clock selected as PREDIV1 clock entry */
          
          /* Get PREDIV2 division factor and PLL2 multiplication factor */
          prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4U) + 1U;
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
 80017f6:	6023      	str	r3, [r4, #0]
      break;
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80017f8:	6843      	ldr	r3, [r0, #4]
 80017fa:	4a1d      	ldr	r2, [pc, #116]	; (8001870 <SystemCoreClockUpdate+0x90>)
 80017fc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001800:	5cd2      	ldrb	r2, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8001802:	6823      	ldr	r3, [r4, #0]
 8001804:	40d3      	lsrs	r3, r2
 8001806:	6023      	str	r3, [r4, #0]
}
 8001808:	bd70      	pop	{r4, r5, r6, pc}
      SystemCoreClock = HSE_VALUE;
 800180a:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <SystemCoreClockUpdate+0x94>)
 800180c:	e7f3      	b.n	80017f6 <SystemCoreClockUpdate+0x16>
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800180e:	6843      	ldr	r3, [r0, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001810:	6842      	ldr	r2, [r0, #4]
      pllmull = pllmull >> 18U;
 8001812:	f3c3 4383 	ubfx	r3, r3, #18, #4
      if (pllmull != 0x0DU)
 8001816:	2b0d      	cmp	r3, #13
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001818:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
         pllmull += 2U;
 800181c:	bf14      	ite	ne
 800181e:	3302      	addne	r3, #2
        pllmull = 13U / 2U; 
 8001820:	2306      	moveq	r3, #6
      if (pllsource == 0x00U)
 8001822:	b912      	cbnz	r2, 800182a <SystemCoreClockUpdate+0x4a>
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8001824:	4a14      	ldr	r2, [pc, #80]	; (8001878 <SystemCoreClockUpdate+0x98>)
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
 8001826:	4353      	muls	r3, r2
 8001828:	e7e5      	b.n	80017f6 <SystemCoreClockUpdate+0x16>
        prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
 800182a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 800182c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
        if (prediv1source == 0U)
 800182e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 8001832:	f001 010f 	and.w	r1, r1, #15
 8001836:	f101 0501 	add.w	r5, r1, #1
 800183a:	490e      	ldr	r1, [pc, #56]	; (8001874 <SystemCoreClockUpdate+0x94>)
        if (prediv1source == 0U)
 800183c:	d103      	bne.n	8001846 <SystemCoreClockUpdate+0x66>
          SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;          
 800183e:	fbb1 f1f5 	udiv	r1, r1, r5
 8001842:	434b      	muls	r3, r1
 8001844:	e7d7      	b.n	80017f6 <SystemCoreClockUpdate+0x16>
          prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4U) + 1U;
 8001846:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
 8001848:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
          prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4U) + 1U;
 800184a:	f3c6 1603 	ubfx	r6, r6, #4, #4
 800184e:	3601      	adds	r6, #1
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
 8001850:	fbb1 f1f6 	udiv	r1, r1, r6
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
 8001854:	f3c2 2203 	ubfx	r2, r2, #8, #4
 8001858:	3202      	adds	r2, #2
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
 800185a:	434a      	muls	r2, r1
 800185c:	fbb2 f2f5 	udiv	r2, r2, r5
 8001860:	e7e1      	b.n	8001826 <SystemCoreClockUpdate+0x46>
 8001862:	bf00      	nop
 8001864:	40021000 	.word	0x40021000
 8001868:	20000000 	.word	0x20000000
 800186c:	007a1200 	.word	0x007a1200
 8001870:	0800d236 	.word	0x0800d236
 8001874:	017d7840 	.word	0x017d7840
 8001878:	003d0900 	.word	0x003d0900

0800187c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800187c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800187e:	e003      	b.n	8001888 <LoopCopyDataInit>

08001880 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001882:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001884:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001886:	3104      	adds	r1, #4

08001888 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001888:	480a      	ldr	r0, [pc, #40]	; (80018b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800188c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800188e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001890:	d3f6      	bcc.n	8001880 <CopyDataInit>
  ldr r2, =_sbss
 8001892:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001894:	e002      	b.n	800189c <LoopFillZerobss>

08001896 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001898:	f842 3b04 	str.w	r3, [r2], #4

0800189c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800189e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80018a0:	d3f9      	bcc.n	8001896 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018a2:	f7ff ff9b 	bl	80017dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018a6:	f007 f96b 	bl	8008b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018aa:	f7ff fcd3 	bl	8001254 <main>
  bx lr
 80018ae:	4770      	bx	lr
  ldr r3, =_sidata
 80018b0:	0800e958 	.word	0x0800e958
  ldr r0, =_sdata
 80018b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80018b8:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 80018bc:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 80018c0:	20006108 	.word	0x20006108

080018c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018c4:	e7fe      	b.n	80018c4 <ADC1_2_IRQHandler>
	...

080018c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <HAL_InitTick+0x3c>)
{
 80018cc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018ce:	7818      	ldrb	r0, [r3, #0]
 80018d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d4:	fbb3 f3f0 	udiv	r3, r3, r0
 80018d8:	4a0b      	ldr	r2, [pc, #44]	; (8001908 <HAL_InitTick+0x40>)
 80018da:	6810      	ldr	r0, [r2, #0]
 80018dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80018e0:	f000 f8a0 	bl	8001a24 <HAL_SYSTICK_Config>
 80018e4:	4604      	mov	r4, r0
 80018e6:	b958      	cbnz	r0, 8001900 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018e8:	2d0f      	cmp	r5, #15
 80018ea:	d809      	bhi.n	8001900 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ec:	4602      	mov	r2, r0
 80018ee:	4629      	mov	r1, r5
 80018f0:	f04f 30ff 	mov.w	r0, #4294967295
 80018f4:	f000 f854 	bl	80019a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f8:	4620      	mov	r0, r4
 80018fa:	4b04      	ldr	r3, [pc, #16]	; (800190c <HAL_InitTick+0x44>)
 80018fc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80018fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001900:	2001      	movs	r0, #1
 8001902:	e7fc      	b.n	80018fe <HAL_InitTick+0x36>
 8001904:	20000004 	.word	0x20000004
 8001908:	20000000 	.word	0x20000000
 800190c:	20000008 	.word	0x20000008

08001910 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001910:	4a07      	ldr	r2, [pc, #28]	; (8001930 <HAL_Init+0x20>)
{
 8001912:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001914:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001916:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001918:	f043 0310 	orr.w	r3, r3, #16
 800191c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800191e:	f000 f82d 	bl	800197c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001922:	2000      	movs	r0, #0
 8001924:	f7ff ffd0 	bl	80018c8 <HAL_InitTick>
  HAL_MspInit();
 8001928:	f7ff fdd6 	bl	80014d8 <HAL_MspInit>
}
 800192c:	2000      	movs	r0, #0
 800192e:	bd08      	pop	{r3, pc}
 8001930:	40022000 	.word	0x40022000

08001934 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001934:	4a03      	ldr	r2, [pc, #12]	; (8001944 <HAL_IncTick+0x10>)
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <HAL_IncTick+0x14>)
 8001938:	6811      	ldr	r1, [r2, #0]
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	440b      	add	r3, r1
 800193e:	6013      	str	r3, [r2, #0]
}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	200017f8 	.word	0x200017f8
 8001948:	20000004 	.word	0x20000004

0800194c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800194c:	4b01      	ldr	r3, [pc, #4]	; (8001954 <HAL_GetTick+0x8>)
 800194e:	6818      	ldr	r0, [r3, #0]
}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	200017f8 	.word	0x200017f8

08001958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001958:	b538      	push	{r3, r4, r5, lr}
 800195a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800195c:	f7ff fff6 	bl	800194c <HAL_GetTick>
 8001960:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001962:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001964:	bf1e      	ittt	ne
 8001966:	4b04      	ldrne	r3, [pc, #16]	; (8001978 <HAL_Delay+0x20>)
 8001968:	781b      	ldrbne	r3, [r3, #0]
 800196a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800196c:	f7ff ffee 	bl	800194c <HAL_GetTick>
 8001970:	1b40      	subs	r0, r0, r5
 8001972:	42a0      	cmp	r0, r4
 8001974:	d3fa      	bcc.n	800196c <HAL_Delay+0x14>
  {
  }
}
 8001976:	bd38      	pop	{r3, r4, r5, pc}
 8001978:	20000004 	.word	0x20000004

0800197c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800197c:	4a07      	ldr	r2, [pc, #28]	; (800199c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800197e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001980:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001982:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001986:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800198a:	041b      	lsls	r3, r3, #16
 800198c:	0c1b      	lsrs	r3, r3, #16
 800198e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001996:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001998:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a0:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a2:	b570      	push	{r4, r5, r6, lr}
 80019a4:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a6:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019aa:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ae:	f1c4 0507 	rsb	r5, r4, #7
 80019b2:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b4:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b8:	bf28      	it	cs
 80019ba:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019bc:	2b06      	cmp	r3, #6
 80019be:	bf98      	it	ls
 80019c0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c2:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c6:	bf88      	it	hi
 80019c8:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ca:	ea21 0303 	bic.w	r3, r1, r3
 80019ce:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d0:	fa06 f404 	lsl.w	r4, r6, r4
 80019d4:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80019d8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019da:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019de:	bfa8      	it	ge
 80019e0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80019e4:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e8:	bfb8      	it	lt
 80019ea:	4a06      	ldrlt	r2, [pc, #24]	; (8001a04 <HAL_NVIC_SetPriority+0x64>)
 80019ec:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ee:	bfab      	itete	ge
 80019f0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fc:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80019fe:	bd70      	pop	{r4, r5, r6, pc}
 8001a00:	e000ed00 	.word	0xe000ed00
 8001a04:	e000ed14 	.word	0xe000ed14

08001a08 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001a08:	2800      	cmp	r0, #0
 8001a0a:	db08      	blt.n	8001a1e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	0942      	lsrs	r2, r0, #5
 8001a10:	f000 001f 	and.w	r0, r0, #31
 8001a14:	fa03 f000 	lsl.w	r0, r3, r0
 8001a18:	4b01      	ldr	r3, [pc, #4]	; (8001a20 <HAL_NVIC_EnableIRQ+0x18>)
 8001a1a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001a1e:	4770      	bx	lr
 8001a20:	e000e100 	.word	0xe000e100

08001a24 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a24:	3801      	subs	r0, #1
 8001a26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a2a:	d20a      	bcs.n	8001a42 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a30:	4a06      	ldr	r2, [pc, #24]	; (8001a4c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a32:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a34:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a38:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a3a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a3c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a42:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000e010 	.word	0xe000e010
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a50:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a52:	2800      	cmp	r0, #0
 8001a54:	d032      	beq.n	8001abc <HAL_DMA_Init+0x6c>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a56:	6801      	ldr	r1, [r0, #0]
 8001a58:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <HAL_DMA_Init+0x70>)
 8001a5a:	2414      	movs	r4, #20
 8001a5c:	4299      	cmp	r1, r3
 8001a5e:	d825      	bhi.n	8001aac <HAL_DMA_Init+0x5c>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a60:	4a18      	ldr	r2, [pc, #96]	; (8001ac4 <HAL_DMA_Init+0x74>)
    hdma->DmaBaseAddress = DMA1;
 8001a62:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a66:	440a      	add	r2, r1
 8001a68:	fbb2 f2f4 	udiv	r2, r2, r4
 8001a6c:	0092      	lsls	r2, r2, #2
 8001a6e:	6402      	str	r2, [r0, #64]	; 0x40
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 8001a70:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a72:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8001a76:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a78:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 8001a7a:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a7c:	4323      	orrs	r3, r4
 8001a7e:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a80:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a84:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a86:	6944      	ldr	r4, [r0, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a88:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a8c:	4323      	orrs	r3, r4
 8001a8e:	6984      	ldr	r4, [r0, #24]
 8001a90:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a92:	69c4      	ldr	r4, [r0, #28]
 8001a94:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001a96:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a98:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a9a:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a9c:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001a9e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aa2:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001aa4:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8001aa8:	4618      	mov	r0, r3
}
 8001aaa:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_DMA_Init+0x78>)
 8001aae:	440b      	add	r3, r1
 8001ab0:	fbb3 f3f4 	udiv	r3, r3, r4
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001ab8:	4b04      	ldr	r3, [pc, #16]	; (8001acc <HAL_DMA_Init+0x7c>)
 8001aba:	e7d9      	b.n	8001a70 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 8001abc:	2001      	movs	r0, #1
 8001abe:	e7f4      	b.n	8001aaa <HAL_DMA_Init+0x5a>
 8001ac0:	40020407 	.word	0x40020407
 8001ac4:	bffdfff8 	.word	0xbffdfff8
 8001ac8:	bffdfbf8 	.word	0xbffdfbf8
 8001acc:	40020400 	.word	0x40020400

08001ad0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ad0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ad2:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001ad6:	2c01      	cmp	r4, #1
 8001ad8:	d035      	beq.n	8001b46 <HAL_DMA_Start_IT+0x76>
 8001ada:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001adc:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001ae0:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ae4:	42a5      	cmp	r5, r4
 8001ae6:	f04f 0600 	mov.w	r6, #0
 8001aea:	f04f 0402 	mov.w	r4, #2
 8001aee:	d128      	bne.n	8001b42 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001af0:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001af4:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001af6:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001af8:	6826      	ldr	r6, [r4, #0]
 8001afa:	f026 0601 	bic.w	r6, r6, #1
 8001afe:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b00:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8001b04:	40bd      	lsls	r5, r7
 8001b06:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b08:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b0a:	6843      	ldr	r3, [r0, #4]
 8001b0c:	6805      	ldr	r5, [r0, #0]
 8001b0e:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001b10:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b12:	bf0b      	itete	eq
 8001b14:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001b16:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001b18:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001b1a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001b1c:	b14b      	cbz	r3, 8001b32 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b1e:	6823      	ldr	r3, [r4, #0]
 8001b20:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8001b24:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b26:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001b28:	682b      	ldr	r3, [r5, #0]
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	602b      	str	r3, [r5, #0]
}
 8001b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	f023 0304 	bic.w	r3, r3, #4
 8001b38:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b3a:	6823      	ldr	r3, [r4, #0]
 8001b3c:	f043 030a 	orr.w	r3, r3, #10
 8001b40:	e7f0      	b.n	8001b24 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8001b42:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8001b46:	2002      	movs	r0, #2
 8001b48:	e7f2      	b.n	8001b30 <HAL_DMA_Start_IT+0x60>
	...

08001b4c <HAL_DMA_IRQHandler>:
{
 8001b4c:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b4e:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b50:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b52:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b54:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001b56:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b58:	4095      	lsls	r5, r2
 8001b5a:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001b5c:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b5e:	f000 8085 	beq.w	8001c6c <HAL_DMA_IRQHandler+0x120>
 8001b62:	074d      	lsls	r5, r1, #29
 8001b64:	f140 8082 	bpl.w	8001c6c <HAL_DMA_IRQHandler+0x120>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4992      	ldr	r1, [pc, #584]	; (8001db4 <HAL_DMA_IRQHandler+0x268>)
 8001b6c:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b6e:	bf5e      	ittt	pl
 8001b70:	681a      	ldrpl	r2, [r3, #0]
 8001b72:	f022 0204 	bicpl.w	r2, r2, #4
 8001b76:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b78:	4a8f      	ldr	r2, [pc, #572]	; (8001db8 <HAL_DMA_IRQHandler+0x26c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d93e      	bls.n	8001bfc <HAL_DMA_IRQHandler+0xb0>
 8001b7e:	428b      	cmp	r3, r1
 8001b80:	d035      	beq.n	8001bee <HAL_DMA_IRQHandler+0xa2>
 8001b82:	3114      	adds	r1, #20
 8001b84:	428b      	cmp	r3, r1
 8001b86:	d034      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0xa6>
 8001b88:	3114      	adds	r1, #20
 8001b8a:	428b      	cmp	r3, r1
 8001b8c:	d033      	beq.n	8001bf6 <HAL_DMA_IRQHandler+0xaa>
 8001b8e:	3114      	adds	r1, #20
 8001b90:	428b      	cmp	r3, r1
 8001b92:	d020      	beq.n	8001bd6 <HAL_DMA_IRQHandler+0x8a>
 8001b94:	3114      	adds	r1, #20
 8001b96:	428b      	cmp	r3, r1
 8001b98:	d020      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x90>
 8001b9a:	3114      	adds	r1, #20
 8001b9c:	428b      	cmp	r3, r1
 8001b9e:	d020      	beq.n	8001be2 <HAL_DMA_IRQHandler+0x96>
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d021      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x9c>
 8001ba4:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d020      	beq.n	8001bee <HAL_DMA_IRQHandler+0xa2>
 8001bac:	3214      	adds	r2, #20
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d01f      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0xa6>
 8001bb2:	3214      	adds	r2, #20
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d01e      	beq.n	8001bf6 <HAL_DMA_IRQHandler+0xaa>
 8001bb8:	3214      	adds	r2, #20
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	bf14      	ite	ne
 8001bbe:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8001bc2:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8001bc6:	4a7d      	ldr	r2, [pc, #500]	; (8001dbc <HAL_DMA_IRQHandler+0x270>)
 8001bc8:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001bca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 80ef 	beq.w	8001db0 <HAL_DMA_IRQHandler+0x264>
}
 8001bd2:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001bd4:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001bd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bda:	e7f4      	b.n	8001bc6 <HAL_DMA_IRQHandler+0x7a>
 8001bdc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001be0:	e7f1      	b.n	8001bc6 <HAL_DMA_IRQHandler+0x7a>
 8001be2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001be6:	e7ee      	b.n	8001bc6 <HAL_DMA_IRQHandler+0x7a>
 8001be8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001bec:	e7eb      	b.n	8001bc6 <HAL_DMA_IRQHandler+0x7a>
 8001bee:	2304      	movs	r3, #4
 8001bf0:	e7e9      	b.n	8001bc6 <HAL_DMA_IRQHandler+0x7a>
 8001bf2:	2340      	movs	r3, #64	; 0x40
 8001bf4:	e7e7      	b.n	8001bc6 <HAL_DMA_IRQHandler+0x7a>
 8001bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bfa:	e7e4      	b.n	8001bc6 <HAL_DMA_IRQHandler+0x7a>
 8001bfc:	428b      	cmp	r3, r1
 8001bfe:	d02e      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x112>
 8001c00:	496f      	ldr	r1, [pc, #444]	; (8001dc0 <HAL_DMA_IRQHandler+0x274>)
 8001c02:	428b      	cmp	r3, r1
 8001c04:	d02d      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x116>
 8001c06:	3114      	adds	r1, #20
 8001c08:	428b      	cmp	r3, r1
 8001c0a:	d02c      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x11a>
 8001c0c:	3114      	adds	r1, #20
 8001c0e:	428b      	cmp	r3, r1
 8001c10:	d019      	beq.n	8001c46 <HAL_DMA_IRQHandler+0xfa>
 8001c12:	3114      	adds	r1, #20
 8001c14:	428b      	cmp	r3, r1
 8001c16:	d019      	beq.n	8001c4c <HAL_DMA_IRQHandler+0x100>
 8001c18:	3114      	adds	r1, #20
 8001c1a:	428b      	cmp	r3, r1
 8001c1c:	d019      	beq.n	8001c52 <HAL_DMA_IRQHandler+0x106>
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d01a      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x10c>
 8001c22:	4a68      	ldr	r2, [pc, #416]	; (8001dc4 <HAL_DMA_IRQHandler+0x278>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d01a      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x112>
 8001c28:	3214      	adds	r2, #20
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d019      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x116>
 8001c2e:	3214      	adds	r2, #20
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d018      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x11a>
 8001c34:	3214      	adds	r2, #20
 8001c36:	4293      	cmp	r3, r2
 8001c38:	bf14      	ite	ne
 8001c3a:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8001c3e:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8001c42:	4a61      	ldr	r2, [pc, #388]	; (8001dc8 <HAL_DMA_IRQHandler+0x27c>)
 8001c44:	e7c0      	b.n	8001bc8 <HAL_DMA_IRQHandler+0x7c>
 8001c46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c4a:	e7fa      	b.n	8001c42 <HAL_DMA_IRQHandler+0xf6>
 8001c4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c50:	e7f7      	b.n	8001c42 <HAL_DMA_IRQHandler+0xf6>
 8001c52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c56:	e7f4      	b.n	8001c42 <HAL_DMA_IRQHandler+0xf6>
 8001c58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001c5c:	e7f1      	b.n	8001c42 <HAL_DMA_IRQHandler+0xf6>
 8001c5e:	2304      	movs	r3, #4
 8001c60:	e7ef      	b.n	8001c42 <HAL_DMA_IRQHandler+0xf6>
 8001c62:	2340      	movs	r3, #64	; 0x40
 8001c64:	e7ed      	b.n	8001c42 <HAL_DMA_IRQHandler+0xf6>
 8001c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c6a:	e7ea      	b.n	8001c42 <HAL_DMA_IRQHandler+0xf6>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001c6c:	2502      	movs	r5, #2
 8001c6e:	4095      	lsls	r5, r2
 8001c70:	4225      	tst	r5, r4
 8001c72:	f000 8087 	beq.w	8001d84 <HAL_DMA_IRQHandler+0x238>
 8001c76:	078d      	lsls	r5, r1, #30
 8001c78:	f140 8084 	bpl.w	8001d84 <HAL_DMA_IRQHandler+0x238>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	0694      	lsls	r4, r2, #26
 8001c80:	d406      	bmi.n	8001c90 <HAL_DMA_IRQHandler+0x144>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	f022 020a 	bic.w	r2, r2, #10
 8001c88:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c90:	4a49      	ldr	r2, [pc, #292]	; (8001db8 <HAL_DMA_IRQHandler+0x26c>)
 8001c92:	4948      	ldr	r1, [pc, #288]	; (8001db4 <HAL_DMA_IRQHandler+0x268>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d93d      	bls.n	8001d14 <HAL_DMA_IRQHandler+0x1c8>
 8001c98:	428b      	cmp	r3, r1
 8001c9a:	d034      	beq.n	8001d06 <HAL_DMA_IRQHandler+0x1ba>
 8001c9c:	3114      	adds	r1, #20
 8001c9e:	428b      	cmp	r3, r1
 8001ca0:	d033      	beq.n	8001d0a <HAL_DMA_IRQHandler+0x1be>
 8001ca2:	3114      	adds	r1, #20
 8001ca4:	428b      	cmp	r3, r1
 8001ca6:	d032      	beq.n	8001d0e <HAL_DMA_IRQHandler+0x1c2>
 8001ca8:	3114      	adds	r1, #20
 8001caa:	428b      	cmp	r3, r1
 8001cac:	d01f      	beq.n	8001cee <HAL_DMA_IRQHandler+0x1a2>
 8001cae:	3114      	adds	r1, #20
 8001cb0:	428b      	cmp	r3, r1
 8001cb2:	d01f      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x1a8>
 8001cb4:	3114      	adds	r1, #20
 8001cb6:	428b      	cmp	r3, r1
 8001cb8:	d01f      	beq.n	8001cfa <HAL_DMA_IRQHandler+0x1ae>
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d020      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x1b4>
 8001cbe:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d01f      	beq.n	8001d06 <HAL_DMA_IRQHandler+0x1ba>
 8001cc6:	3214      	adds	r2, #20
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d01e      	beq.n	8001d0a <HAL_DMA_IRQHandler+0x1be>
 8001ccc:	3214      	adds	r2, #20
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d01d      	beq.n	8001d0e <HAL_DMA_IRQHandler+0x1c2>
 8001cd2:	3214      	adds	r2, #20
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	bf14      	ite	ne
 8001cd8:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8001cdc:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 8001ce0:	4a36      	ldr	r2, [pc, #216]	; (8001dbc <HAL_DMA_IRQHandler+0x270>)
 8001ce2:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001cea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001cec:	e76e      	b.n	8001bcc <HAL_DMA_IRQHandler+0x80>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001cee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cf2:	e7f5      	b.n	8001ce0 <HAL_DMA_IRQHandler+0x194>
 8001cf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cf8:	e7f2      	b.n	8001ce0 <HAL_DMA_IRQHandler+0x194>
 8001cfa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001cfe:	e7ef      	b.n	8001ce0 <HAL_DMA_IRQHandler+0x194>
 8001d00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d04:	e7ec      	b.n	8001ce0 <HAL_DMA_IRQHandler+0x194>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e7ea      	b.n	8001ce0 <HAL_DMA_IRQHandler+0x194>
 8001d0a:	2320      	movs	r3, #32
 8001d0c:	e7e8      	b.n	8001ce0 <HAL_DMA_IRQHandler+0x194>
 8001d0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d12:	e7e5      	b.n	8001ce0 <HAL_DMA_IRQHandler+0x194>
 8001d14:	428b      	cmp	r3, r1
 8001d16:	d02e      	beq.n	8001d76 <HAL_DMA_IRQHandler+0x22a>
 8001d18:	4929      	ldr	r1, [pc, #164]	; (8001dc0 <HAL_DMA_IRQHandler+0x274>)
 8001d1a:	428b      	cmp	r3, r1
 8001d1c:	d02d      	beq.n	8001d7a <HAL_DMA_IRQHandler+0x22e>
 8001d1e:	3114      	adds	r1, #20
 8001d20:	428b      	cmp	r3, r1
 8001d22:	d02c      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x232>
 8001d24:	3114      	adds	r1, #20
 8001d26:	428b      	cmp	r3, r1
 8001d28:	d019      	beq.n	8001d5e <HAL_DMA_IRQHandler+0x212>
 8001d2a:	3114      	adds	r1, #20
 8001d2c:	428b      	cmp	r3, r1
 8001d2e:	d019      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x218>
 8001d30:	3114      	adds	r1, #20
 8001d32:	428b      	cmp	r3, r1
 8001d34:	d019      	beq.n	8001d6a <HAL_DMA_IRQHandler+0x21e>
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d01a      	beq.n	8001d70 <HAL_DMA_IRQHandler+0x224>
 8001d3a:	4a22      	ldr	r2, [pc, #136]	; (8001dc4 <HAL_DMA_IRQHandler+0x278>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d01a      	beq.n	8001d76 <HAL_DMA_IRQHandler+0x22a>
 8001d40:	3214      	adds	r2, #20
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d019      	beq.n	8001d7a <HAL_DMA_IRQHandler+0x22e>
 8001d46:	3214      	adds	r2, #20
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d018      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x232>
 8001d4c:	3214      	adds	r2, #20
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	bf14      	ite	ne
 8001d52:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8001d56:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 8001d5a:	4a1b      	ldr	r2, [pc, #108]	; (8001dc8 <HAL_DMA_IRQHandler+0x27c>)
 8001d5c:	e7c1      	b.n	8001ce2 <HAL_DMA_IRQHandler+0x196>
 8001d5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d62:	e7fa      	b.n	8001d5a <HAL_DMA_IRQHandler+0x20e>
 8001d64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d68:	e7f7      	b.n	8001d5a <HAL_DMA_IRQHandler+0x20e>
 8001d6a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d6e:	e7f4      	b.n	8001d5a <HAL_DMA_IRQHandler+0x20e>
 8001d70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d74:	e7f1      	b.n	8001d5a <HAL_DMA_IRQHandler+0x20e>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e7ef      	b.n	8001d5a <HAL_DMA_IRQHandler+0x20e>
 8001d7a:	2320      	movs	r3, #32
 8001d7c:	e7ed      	b.n	8001d5a <HAL_DMA_IRQHandler+0x20e>
 8001d7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d82:	e7ea      	b.n	8001d5a <HAL_DMA_IRQHandler+0x20e>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d84:	2508      	movs	r5, #8
 8001d86:	4095      	lsls	r5, r2
 8001d88:	4225      	tst	r5, r4
 8001d8a:	d011      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x264>
 8001d8c:	0709      	lsls	r1, r1, #28
 8001d8e:	d50f      	bpl.n	8001db0 <HAL_DMA_IRQHandler+0x264>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d90:	6819      	ldr	r1, [r3, #0]
 8001d92:	f021 010e 	bic.w	r1, r1, #14
 8001d96:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d98:	2301      	movs	r3, #1
 8001d9a:	fa03 f202 	lsl.w	r2, r3, r2
 8001d9e:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001da0:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001da2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001da6:	2300      	movs	r3, #0
 8001da8:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001dac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001dae:	e70d      	b.n	8001bcc <HAL_DMA_IRQHandler+0x80>
}
 8001db0:	bc70      	pop	{r4, r5, r6}
 8001db2:	4770      	bx	lr
 8001db4:	40020008 	.word	0x40020008
 8001db8:	40020080 	.word	0x40020080
 8001dbc:	40020400 	.word	0x40020400
 8001dc0:	4002001c 	.word	0x4002001c
 8001dc4:	40020408 	.word	0x40020408
 8001dc8:	40020000 	.word	0x40020000

08001dcc <ETH_Delay.constprop.4>:
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dcc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <ETH_Delay.constprop.4+0x20>)
static void ETH_Delay(uint32_t mdelay)
 8001dd2:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8001dda:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001ddc:	bf00      	nop
  }
  while (Delay --);
 8001dde:	9b01      	ldr	r3, [sp, #4]
 8001de0:	1e5a      	subs	r2, r3, #1
 8001de2:	9201      	str	r2, [sp, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f9      	bne.n	8001ddc <ETH_Delay.constprop.4+0x10>
}
 8001de8:	b002      	add	sp, #8
 8001dea:	4770      	bx	lr
 8001dec:	20000000 	.word	0x20000000

08001df0 <ETH_FlushTransmitFIFO>:
  __IO uint32_t tmpreg1 = 0U;
 8001df0:	2300      	movs	r3, #0
{
 8001df2:	b507      	push	{r0, r1, r2, lr}
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001df4:	f241 0118 	movw	r1, #4120	; 0x1018
  __IO uint32_t tmpreg1 = 0U;
 8001df8:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001dfa:	6803      	ldr	r3, [r0, #0]
 8001dfc:	585a      	ldr	r2, [r3, r1]
 8001dfe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001e02:	505a      	str	r2, [r3, r1]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e04:	585b      	ldr	r3, [r3, r1]
 8001e06:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001e08:	f7ff ffe0 	bl	8001dcc <ETH_Delay.constprop.4>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e0c:	9a01      	ldr	r2, [sp, #4]
 8001e0e:	6803      	ldr	r3, [r0, #0]
 8001e10:	505a      	str	r2, [r3, r1]
}
 8001e12:	b003      	add	sp, #12
 8001e14:	f85d fb04 	ldr.w	pc, [sp], #4

08001e18 <ETH_MACDMAConfig>:
{
 8001e18:	b570      	push	{r4, r5, r6, lr}
 8001e1a:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001e1c:	b129      	cbz	r1, 8001e2a <ETH_MACDMAConfig+0x12>
    (heth->Init).Speed = ETH_SPEED_100M;
 8001e1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e26:	e9c0 3202 	strd	r3, r2, [r0, #8]
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001e2a:	69e3      	ldr	r3, [r4, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8001e2c:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	bf08      	it	eq
 8001e32:	f44f 6180 	moveq.w	r1, #1024	; 0x400
                        macinit.LoopbackMode |
 8001e36:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001e3a:	bf18      	it	ne
 8001e3c:	2100      	movne	r1, #0
  tmpreg1 = (heth->Instance)->MACCR;
 8001e3e:	6815      	ldr	r5, [r2, #0]
                        macinit.LoopbackMode |
 8001e40:	4303      	orrs	r3, r0
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e42:	482e      	ldr	r0, [pc, #184]	; (8001efc <ETH_MACDMAConfig+0xe4>)
 8001e44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e48:	4028      	ands	r0, r5
 8001e4a:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001e4c:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e4e:	6013      	str	r3, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e50:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 8001e52:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e54:	f7ff fd80 	bl	8001958 <HAL_Delay>
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001e58:	2240      	movs	r2, #64	; 0x40
  (heth->Instance)->MACCR = tmpreg1;
 8001e5a:	6823      	ldr	r3, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e5c:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg1;
 8001e5e:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001e60:	605a      	str	r2, [r3, #4]
  tmpreg1 = (heth->Instance)->MACFFR;
 8001e62:	685d      	ldr	r5, [r3, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e64:	f7ff fd78 	bl	8001958 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8001e68:	6823      	ldr	r3, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e6a:	2001      	movs	r0, #1
  (heth->Instance)->MACFFR = tmpreg1;
 8001e6c:	605d      	str	r5, [r3, #4]
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001e6e:	2500      	movs	r5, #0
 8001e70:	609d      	str	r5, [r3, #8]
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001e72:	60dd      	str	r5, [r3, #12]
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e74:	699a      	ldr	r2, [r3, #24]
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e76:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8001e7a:	0412      	lsls	r2, r2, #16
 8001e7c:	0c12      	lsrs	r2, r2, #16
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001e7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001e82:	619a      	str	r2, [r3, #24]
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e84:	699e      	ldr	r6, [r3, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e86:	f7ff fd67 	bl	8001958 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001e8a:	6823      	ldr	r3, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e8c:	2001      	movs	r0, #1
  (heth->Instance)->MACFCR = tmpreg1;
 8001e8e:	619e      	str	r6, [r3, #24]
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8001e90:	61dd      	str	r5, [r3, #28]
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8001e92:	69dd      	ldr	r5, [r3, #28]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e94:	f7ff fd60 	bl	8001958 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8001e98:	6822      	ldr	r2, [r4, #0]
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001e9a:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <ETH_MACDMAConfig+0xe8>)
  (heth->Instance)->MACVLANTR = tmpreg1;
 8001e9c:	61d5      	str	r5, [r2, #28]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e9e:	f241 0518 	movw	r5, #4120	; 0x1018
 8001ea2:	5951      	ldr	r1, [r2, r5]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ea4:	2001      	movs	r0, #1
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001ea6:	400b      	ands	r3, r1
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001ea8:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8001eac:	f043 0304 	orr.w	r3, r3, #4
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001eb0:	5153      	str	r3, [r2, r5]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001eb2:	5956      	ldr	r6, [r2, r5]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eb4:	f7ff fd50 	bl	8001958 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001eb8:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001eba:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <ETH_MACDMAConfig+0xec>)
  (heth->Instance)->DMAOMR = tmpreg1;
 8001ebc:	515e      	str	r6, [r3, r5]
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ec2:	601a      	str	r2, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ec4:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->DMABMR;
 8001ec6:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ec8:	f7ff fd46 	bl	8001958 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001ecc:	6822      	ldr	r2, [r4, #0]
 8001ece:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8001ed2:	601d      	str	r5, [r3, #0]
  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001ed4:	69a3      	ldr	r3, [r4, #24]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d107      	bne.n	8001eea <ETH_MACDMAConfig+0xd2>
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001eda:	f241 011c 	movw	r1, #4124	; 0x101c
 8001ede:	5853      	ldr	r3, [r2, r1]
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ee8:	5053      	str	r3, [r2, r1]
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001eea:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001eec:	4a06      	ldr	r2, [pc, #24]	; (8001f08 <ETH_MACDMAConfig+0xf0>)
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001eee:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001ef0:	6011      	str	r1, [r2, #0]
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001ef2:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <ETH_MACDMAConfig+0xf4>)
 8001ef6:	601a      	str	r2, [r3, #0]
}
 8001ef8:	bd70      	pop	{r4, r5, r6, pc}
 8001efa:	bf00      	nop
 8001efc:	ff20810f 	.word	0xff20810f
 8001f00:	f8de3f23 	.word	0xf8de3f23
 8001f04:	02c12000 	.word	0x02c12000
 8001f08:	40028040 	.word	0x40028040
 8001f0c:	40028044 	.word	0x40028044

08001f10 <HAL_ETH_DMATxDescListInit>:
{
 8001f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 8001f14:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8001f18:	2c01      	cmp	r4, #1
 8001f1a:	f04f 0402 	mov.w	r4, #2
 8001f1e:	d031      	beq.n	8001f84 <HAL_ETH_DMATxDescListInit+0x74>
 8001f20:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8001f22:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 8001f26:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  for (i = 0U; i < TxBuffCount; i++)
 8001f2a:	460c      	mov	r4, r1
 8001f2c:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 8001f2e:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8001f32:	f240 5cf4 	movw	ip, #1524	; 0x5f4
  heth->TxDesc = DMATxDescTab;
 8001f36:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (i < (TxBuffCount - 1U))
 8001f38:	f103 3eff 	add.w	lr, r3, #4294967295
  for (i = 0U; i < TxBuffCount; i++)
 8001f3c:	429d      	cmp	r5, r3
 8001f3e:	d10c      	bne.n	8001f5a <HAL_ETH_DMATxDescListInit+0x4a>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001f40:	f241 0310 	movw	r3, #4112	; 0x1010
 8001f44:	6802      	ldr	r2, [r0, #0]
 8001f46:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8001f54:	4618      	mov	r0, r3
}
 8001f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8001f5a:	fb0c 2605 	mla	r6, ip, r5, r2
 8001f5e:	60a6      	str	r6, [r4, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001f60:	69c6      	ldr	r6, [r0, #28]
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 8001f62:	6027      	str	r7, [r4, #0]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001f64:	b91e      	cbnz	r6, 8001f6e <HAL_ETH_DMATxDescListInit+0x5e>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001f66:	6826      	ldr	r6, [r4, #0]
 8001f68:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8001f6c:	6026      	str	r6, [r4, #0]
 8001f6e:	f104 0610 	add.w	r6, r4, #16
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1U);
 8001f72:	45ae      	cmp	lr, r5
 8001f74:	bf94      	ite	ls
 8001f76:	4688      	movls	r8, r1
 8001f78:	46b0      	movhi	r8, r6
 8001f7a:	3501      	adds	r5, #1
 8001f7c:	f8c4 800c 	str.w	r8, [r4, #12]
 8001f80:	4634      	mov	r4, r6
 8001f82:	e7db      	b.n	8001f3c <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 8001f84:	4620      	mov	r0, r4
 8001f86:	e7e6      	b.n	8001f56 <HAL_ETH_DMATxDescListInit+0x46>

08001f88 <HAL_ETH_DMARxDescListInit>:
{
 8001f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(heth);
 8001f8c:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8001f90:	2c01      	cmp	r4, #1
 8001f92:	f04f 0402 	mov.w	r4, #2
 8001f96:	d02f      	beq.n	8001ff8 <HAL_ETH_DMARxDescListInit+0x70>
 8001f98:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8001f9a:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 8001f9e:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  for (i = 0U; i < RxBuffCount; i++)
 8001fa2:	460c      	mov	r4, r1
 8001fa4:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001fa6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001faa:	f244 5cf4 	movw	ip, #17908	; 0x45f4
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 8001fae:	f240 5ef4 	movw	lr, #1524	; 0x5f4
  heth->RxDesc = DMARxDescTab;
 8001fb2:	6281      	str	r1, [r0, #40]	; 0x28
    if (i < (RxBuffCount - 1U))
 8001fb4:	f103 38ff 	add.w	r8, r3, #4294967295
  for (i = 0U; i < RxBuffCount; i++)
 8001fb8:	42ab      	cmp	r3, r5
 8001fba:	d10c      	bne.n	8001fd6 <HAL_ETH_DMARxDescListInit+0x4e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001fbc:	f241 030c 	movw	r3, #4108	; 0x100c
 8001fc0:	6802      	ldr	r2, [r0, #0]
 8001fc2:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8001fd0:	4618      	mov	r0, r3
}
 8001fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 8001fd6:	fb0e 2605 	mla	r6, lr, r5, r2
 8001fda:	60a6      	str	r6, [r4, #8]
 8001fdc:	f104 0610 	add.w	r6, r4, #16
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 8001fe0:	45a8      	cmp	r8, r5
 8001fe2:	bf94      	ite	ls
 8001fe4:	4689      	movls	r9, r1
 8001fe6:	46b1      	movhi	r9, r6
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001fe8:	6027      	str	r7, [r4, #0]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001fea:	f8c4 c004 	str.w	ip, [r4, #4]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 8001fee:	f8c4 900c 	str.w	r9, [r4, #12]
 8001ff2:	3501      	adds	r5, #1
 8001ff4:	4634      	mov	r4, r6
 8001ff6:	e7df      	b.n	8001fb8 <HAL_ETH_DMARxDescListInit+0x30>
  __HAL_LOCK(heth);
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	e7ea      	b.n	8001fd2 <HAL_ETH_DMARxDescListInit+0x4a>

08001ffc <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8001ffc:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
{
 8002000:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8002002:	2b01      	cmp	r3, #1
 8002004:	f04f 0302 	mov.w	r3, #2
 8002008:	d069      	beq.n	80020de <HAL_ETH_TransmitFrame+0xe2>
 800200a:	2201      	movs	r2, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800200c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 8002010:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  if (FrameLength == 0U)
 8002014:	b929      	cbnz	r1, 8002022 <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 8002016:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800201a:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 800201e:	4610      	mov	r0, r2
}
 8002020:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002022:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002024:	681c      	ldr	r4, [r3, #0]
 8002026:	2c00      	cmp	r4, #0
 8002028:	da06      	bge.n	8002038 <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800202a:	2312      	movs	r3, #18
 800202c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8002030:	2300      	movs	r3, #0
 8002032:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8002036:	e7f2      	b.n	800201e <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002038:	f240 54f4 	movw	r4, #1524	; 0x5f4
 800203c:	42a1      	cmp	r1, r4
 800203e:	d92f      	bls.n	80020a0 <HAL_ETH_TransmitFrame+0xa4>
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 8002040:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE)
 8002044:	fb04 1412 	mls	r4, r4, r2, r1
 8002048:	b344      	cbz	r4, 800209c <HAL_ETH_TransmitFrame+0xa0>
      bufcount++;
 800204a:	3201      	adds	r2, #1
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 800204c:	4c25      	ldr	r4, [pc, #148]	; (80020e4 <HAL_ETH_TransmitFrame+0xe8>)
 800204e:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 8002052:	fb04 1102 	mla	r1, r4, r2, r1
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002056:	f240 57f4 	movw	r7, #1524	; 0x5f4
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800205a:	2400      	movs	r4, #0
 800205c:	f3c1 010c 	ubfx	r1, r1, #0, #13
      if (i == (bufcount - 1U))
 8002060:	1e56      	subs	r6, r2, #1
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002062:	681d      	ldr	r5, [r3, #0]
 8002064:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 8002068:	601d      	str	r5, [r3, #0]
      if (i == 0U)
 800206a:	b91c      	cbnz	r4, 8002074 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 800206c:	681d      	ldr	r5, [r3, #0]
 800206e:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8002072:	601d      	str	r5, [r3, #0]
      if (i == (bufcount - 1U))
 8002074:	42a6      	cmp	r6, r4
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002076:	bf08      	it	eq
 8002078:	681d      	ldreq	r5, [r3, #0]
    for (i = 0U; i < bufcount; i++)
 800207a:	f104 0401 	add.w	r4, r4, #1
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800207e:	bf04      	itt	eq
 8002080:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
 8002084:	601d      	streq	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002086:	681d      	ldr	r5, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002088:	605f      	str	r7, [r3, #4]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800208a:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800208e:	bf08      	it	eq
 8002090:	6059      	streq	r1, [r3, #4]
    for (i = 0U; i < bufcount; i++)
 8002092:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002094:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002096:	68db      	ldr	r3, [r3, #12]
    for (i = 0U; i < bufcount; i++)
 8002098:	d1e3      	bne.n	8002062 <HAL_ETH_TransmitFrame+0x66>
 800209a:	e00d      	b.n	80020b8 <HAL_ETH_TransmitFrame+0xbc>
  if (bufcount == 1U)
 800209c:	2a01      	cmp	r2, #1
 800209e:	d1d5      	bne.n	800204c <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 80020a0:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80020a2:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 80020a6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80020aa:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80020ac:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80020ae:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80020b0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020b4:	601a      	str	r2, [r3, #0]
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80020b6:	68db      	ldr	r3, [r3, #12]
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80020b8:	f241 0214 	movw	r2, #4116	; 0x1014
 80020bc:	62c3      	str	r3, [r0, #44]	; 0x2c
 80020be:	6803      	ldr	r3, [r0, #0]
 80020c0:	5899      	ldr	r1, [r3, r2]
 80020c2:	0749      	lsls	r1, r1, #29
 80020c4:	d505      	bpl.n	80020d2 <HAL_ETH_TransmitFrame+0xd6>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80020c6:	2104      	movs	r1, #4
 80020c8:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 80020ca:	f241 0204 	movw	r2, #4100	; 0x1004
 80020ce:	2100      	movs	r1, #0
 80020d0:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 80020d2:	2301      	movs	r3, #1
 80020d4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80020d8:	2300      	movs	r3, #0
 80020da:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 80020de:	4618      	mov	r0, r3
 80020e0:	e79e      	b.n	8002020 <HAL_ETH_TransmitFrame+0x24>
 80020e2:	bf00      	nop
 80020e4:	fffffa0c 	.word	0xfffffa0c

080020e8 <HAL_ETH_GetReceivedFrame>:
  __HAL_LOCK(heth);
 80020e8:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
{
 80020ec:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(heth);
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	f04f 0302 	mov.w	r3, #2
 80020f4:	d023      	beq.n	800213e <HAL_ETH_GetReceivedFrame+0x56>
 80020f6:	2401      	movs	r4, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80020f8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80020fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
  __HAL_LOCK(heth);
 80020fe:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	2a00      	cmp	r2, #0
 8002106:	db27      	blt.n	8002158 <HAL_ETH_GetReceivedFrame+0x70>
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68d9      	ldr	r1, [r3, #12]
 800210c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8002110:	d017      	beq.n	8002142 <HAL_ETH_GetReceivedFrame+0x5a>
      (heth->RxFrameInfos).SegCount++;
 8002112:	6b82      	ldr	r2, [r0, #56]	; 0x38
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002114:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount++;
 8002116:	4422      	add	r2, r4
      if ((heth->RxFrameInfos).SegCount == 1U)
 8002118:	42a2      	cmp	r2, r4
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800211a:	bf08      	it	eq
 800211c:	6303      	streq	r3, [r0, #48]	; 0x30
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800211e:	681b      	ldr	r3, [r3, #0]
      (heth->RxFrameInfos).SegCount++;
 8002120:	6382      	str	r2, [r0, #56]	; 0x38
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002122:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8002126:	3b04      	subs	r3, #4
      heth->RxFrameInfos.length = framelength;
 8002128:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800212a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800212c:	689b      	ldr	r3, [r3, #8]
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 800212e:	6281      	str	r1, [r0, #40]	; 0x28
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002130:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 8002132:	2301      	movs	r3, #1
 8002134:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8002138:	2300      	movs	r3, #0
 800213a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 800213e:	4618      	mov	r0, r3
 8002140:	bd30      	pop	{r4, r5, pc}
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002142:	681d      	ldr	r5, [r3, #0]
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8002144:	6281      	str	r1, [r0, #40]	; 0x28
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002146:	05ad      	lsls	r5, r5, #22
      (heth->RxFrameInfos).SegCount++;
 8002148:	bf55      	itete	pl
 800214a:	6b83      	ldrpl	r3, [r0, #56]	; 0x38
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800214c:	e9c0 320c 	strdmi	r3, r2, [r0, #48]	; 0x30
      (heth->RxFrameInfos).SegCount++;
 8002150:	3301      	addpl	r3, #1
      (heth->RxFrameInfos).SegCount = 1U;
 8002152:	6384      	strmi	r4, [r0, #56]	; 0x38
      (heth->RxFrameInfos).SegCount++;
 8002154:	bf58      	it	pl
 8002156:	6383      	strpl	r3, [r0, #56]	; 0x38
  heth->State = HAL_ETH_STATE_READY;
 8002158:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 800215a:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 800215c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8002160:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8002164:	e7eb      	b.n	800213e <HAL_ETH_GetReceivedFrame+0x56>

08002166 <HAL_ETH_TxCpltCallback>:
 8002166:	4770      	bx	lr

08002168 <HAL_ETH_RxCpltCallback>:
 8002168:	4770      	bx	lr

0800216a <HAL_ETH_ErrorCallback>:
 800216a:	4770      	bx	lr

0800216c <HAL_ETH_IRQHandler>:
{
 800216c:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R))
 800216e:	f241 0614 	movw	r6, #4116	; 0x1014
 8002172:	6802      	ldr	r2, [r0, #0]
{
 8002174:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R))
 8002176:	5995      	ldr	r5, [r2, r6]
 8002178:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800217c:	d021      	beq.n	80021c2 <HAL_ETH_IRQHandler+0x56>
    HAL_ETH_RxCpltCallback(heth);
 800217e:	f7ff fff3 	bl	8002168 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002182:	2240      	movs	r2, #64	; 0x40
 8002184:	6823      	ldr	r3, [r4, #0]
 8002186:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8002188:	2301      	movs	r3, #1
 800218a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800218e:	2300      	movs	r3, #0
 8002190:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002194:	f241 0514 	movw	r5, #4116	; 0x1014
 8002198:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800219c:	6823      	ldr	r3, [r4, #0]
 800219e:	515a      	str	r2, [r3, r5]
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80021a0:	595b      	ldr	r3, [r3, r5]
 80021a2:	041b      	lsls	r3, r3, #16
 80021a4:	d50c      	bpl.n	80021c0 <HAL_ETH_IRQHandler+0x54>
    HAL_ETH_ErrorCallback(heth);
 80021a6:	4620      	mov	r0, r4
 80021a8:	f7ff ffdf 	bl	800216a <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80021ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021b0:	6823      	ldr	r3, [r4, #0]
 80021b2:	515a      	str	r2, [r3, r5]
    heth->State = HAL_ETH_STATE_READY;
 80021b4:	2301      	movs	r3, #1
 80021b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80021ba:	2300      	movs	r3, #0
 80021bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80021c0:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T))
 80021c2:	5993      	ldr	r3, [r2, r6]
 80021c4:	07da      	lsls	r2, r3, #31
 80021c6:	d5e5      	bpl.n	8002194 <HAL_ETH_IRQHandler+0x28>
    HAL_ETH_TxCpltCallback(heth);
 80021c8:	f7ff ffcd 	bl	8002166 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80021cc:	2301      	movs	r3, #1
 80021ce:	6822      	ldr	r2, [r4, #0]
 80021d0:	5193      	str	r3, [r2, r6]
    heth->State = HAL_ETH_STATE_READY;
 80021d2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80021d6:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80021da:	e7db      	b.n	8002194 <HAL_ETH_IRQHandler+0x28>

080021dc <HAL_ETH_ReadPHYRegister>:
{
 80021dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 80021de:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 80021e2:	4605      	mov	r5, r0
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 80021e4:	2b82      	cmp	r3, #130	; 0x82
{
 80021e6:	4616      	mov	r6, r2
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 80021e8:	d030      	beq.n	800224c <HAL_ETH_ReadPHYRegister+0x70>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80021ea:	2382      	movs	r3, #130	; 0x82
 80021ec:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 80021f0:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80021f2:	018c      	lsls	r4, r1, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 80021f4:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80021f6:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 80021fa:	f044 0401 	orr.w	r4, r4, #1
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80021fe:	f000 001c 	and.w	r0, r0, #28
 8002202:	4320      	orrs	r0, r4
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002204:	8a2c      	ldrh	r4, [r5, #16]
 8002206:	02e4      	lsls	r4, r4, #11
 8002208:	b2a4      	uxth	r4, r4
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800220a:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg1;
 800220c:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 800220e:	f7ff fb9d 	bl	800194c <HAL_GetTick>
 8002212:	4607      	mov	r7, r0
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002214:	f014 0001 	ands.w	r0, r4, #1
 8002218:	d107      	bne.n	800222a <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800221a:	682b      	ldr	r3, [r5, #0]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	b29b      	uxth	r3, r3
 8002220:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8002222:	2301      	movs	r3, #1
 8002224:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8002228:	e00c      	b.n	8002244 <HAL_ETH_ReadPHYRegister+0x68>
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800222a:	f7ff fb8f 	bl	800194c <HAL_GetTick>
 800222e:	1bc0      	subs	r0, r0, r7
 8002230:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8002234:	d307      	bcc.n	8002246 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State = HAL_ETH_STATE_READY;
 8002236:	2301      	movs	r3, #1
 8002238:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800223c:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800223e:	2003      	movs	r0, #3
      __HAL_UNLOCK(heth);
 8002240:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 8002244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8002246:	682b      	ldr	r3, [r5, #0]
 8002248:	691c      	ldr	r4, [r3, #16]
 800224a:	e7e3      	b.n	8002214 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 800224c:	2002      	movs	r0, #2
 800224e:	e7f9      	b.n	8002244 <HAL_ETH_ReadPHYRegister+0x68>

08002250 <HAL_ETH_WritePHYRegister>:
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8002250:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 8002254:	b570      	push	{r4, r5, r6, lr}
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8002256:	2b42      	cmp	r3, #66	; 0x42
{
 8002258:	4605      	mov	r5, r0
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 800225a:	d02e      	beq.n	80022ba <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800225c:	2342      	movs	r3, #66	; 0x42
 800225e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8002262:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002264:	018c      	lsls	r4, r1, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8002266:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002268:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 800226c:	f044 0403 	orr.w	r4, r4, #3
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002270:	f000 001c 	and.w	r0, r0, #28
 8002274:	4320      	orrs	r0, r4
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002276:	8a2c      	ldrh	r4, [r5, #16]
 8002278:	b292      	uxth	r2, r2
 800227a:	02e4      	lsls	r4, r4, #11
 800227c:	b2a4      	uxth	r4, r4
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800227e:	4304      	orrs	r4, r0
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002280:	615a      	str	r2, [r3, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8002282:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8002284:	f7ff fb62 	bl	800194c <HAL_GetTick>
 8002288:	4606      	mov	r6, r0
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800228a:	f014 0001 	ands.w	r0, r4, #1
 800228e:	d103      	bne.n	8002298 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8002290:	2301      	movs	r3, #1
 8002292:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8002296:	e00c      	b.n	80022b2 <HAL_ETH_WritePHYRegister+0x62>
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002298:	f7ff fb58 	bl	800194c <HAL_GetTick>
 800229c:	1b80      	subs	r0, r0, r6
 800229e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80022a2:	d307      	bcc.n	80022b4 <HAL_ETH_WritePHYRegister+0x64>
      heth->State = HAL_ETH_STATE_READY;
 80022a4:	2301      	movs	r3, #1
 80022a6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80022aa:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 80022ac:	2003      	movs	r0, #3
      __HAL_UNLOCK(heth);
 80022ae:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 80022b2:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 80022b4:	682b      	ldr	r3, [r5, #0]
 80022b6:	691c      	ldr	r4, [r3, #16]
 80022b8:	e7e7      	b.n	800228a <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 80022ba:	2002      	movs	r0, #2
 80022bc:	e7f9      	b.n	80022b2 <HAL_ETH_WritePHYRegister+0x62>
	...

080022c0 <HAL_ETH_Init>:
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80022c0:	2300      	movs	r3, #0
{
 80022c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (heth == NULL)
 80022c4:	4604      	mov	r4, r0
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80022c6:	9301      	str	r3, [sp, #4]
  if (heth == NULL)
 80022c8:	2800      	cmp	r0, #0
 80022ca:	f000 80c3 	beq.w	8002454 <HAL_ETH_Init+0x194>
  if (heth->State == HAL_ETH_STATE_RESET)
 80022ce:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80022d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022d6:	b91b      	cbnz	r3, 80022e0 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 80022d8:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 80022dc:	f001 fad0 	bl	8003880 <HAL_ETH_MspInit>
  AFIO->MAPR &= ~(AFIO_MAPR_MII_RMII_SEL);
 80022e0:	4b5d      	ldr	r3, [pc, #372]	; (8002458 <HAL_ETH_Init+0x198>)
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80022e8:	605a      	str	r2, [r3, #4]
  AFIO->MAPR |= (uint32_t)heth->Init.MediaInterface;
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	6a21      	ldr	r1, [r4, #32]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80022f2:	6823      	ldr	r3, [r4, #0]
 80022f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002300:	f7ff fb24 	bl	800194c <HAL_GetTick>
 8002304:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002306:	6823      	ldr	r3, [r4, #0]
 8002308:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800230c:	6812      	ldr	r2, [r2, #0]
 800230e:	07d0      	lsls	r0, r2, #31
 8002310:	d41d      	bmi.n	800234e <HAL_ETH_Init+0x8e>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002312:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8002314:	f000 fda4 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002318:	4b50      	ldr	r3, [pc, #320]	; (800245c <HAL_ETH_Init+0x19c>)
 800231a:	4a51      	ldr	r2, [pc, #324]	; (8002460 <HAL_ETH_Init+0x1a0>)
 800231c:	4403      	add	r3, r0
 800231e:	4293      	cmp	r3, r2
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002320:	f025 051c 	bic.w	r5, r5, #28
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002324:	d822      	bhi.n	800236c <HAL_ETH_Init+0xac>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV16;
 8002326:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800232a:	6823      	ldr	r3, [r4, #0]
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800232c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002330:	611d      	str	r5, [r3, #16]
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002332:	2100      	movs	r1, #0
 8002334:	4620      	mov	r0, r4
 8002336:	f7ff ff8b 	bl	8002250 <HAL_ETH_WritePHYRegister>
 800233a:	4605      	mov	r5, r0
 800233c:	b1f0      	cbz	r0, 800237c <HAL_ETH_Init+0xbc>
      heth->State = HAL_ETH_STATE_READY;
 800233e:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8002340:	2101      	movs	r1, #1
 8002342:	4620      	mov	r0, r4
 8002344:	f7ff fd68 	bl	8001e18 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8002348:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 800234c:	e00b      	b.n	8002366 <HAL_ETH_Init+0xa6>
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 800234e:	f7ff fafd 	bl	800194c <HAL_GetTick>
 8002352:	1b40      	subs	r0, r0, r5
 8002354:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8002358:	d9d5      	bls.n	8002306 <HAL_ETH_Init+0x46>
      heth->State = HAL_ETH_STATE_TIMEOUT;
 800235a:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 800235c:	2300      	movs	r3, #0
      heth->State = HAL_ETH_STATE_TIMEOUT;
 800235e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8002362:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8002366:	4628      	mov	r0, r5
 8002368:	b003      	add	sp, #12
 800236a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800236c:	4b3d      	ldr	r3, [pc, #244]	; (8002464 <HAL_ETH_Init+0x1a4>)
 800236e:	4a3e      	ldr	r2, [pc, #248]	; (8002468 <HAL_ETH_Init+0x1a8>)
 8002370:	4403      	add	r3, r0
 8002372:	4293      	cmp	r3, r2
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV26;
 8002374:	bf98      	it	ls
 8002376:	f045 050c 	orrls.w	r5, r5, #12
 800237a:	e7d6      	b.n	800232a <HAL_ETH_Init+0x6a>
  HAL_Delay(PHY_RESET_DELAY);
 800237c:	20ff      	movs	r0, #255	; 0xff
 800237e:	f7ff faeb 	bl	8001958 <HAL_Delay>
  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002382:	6863      	ldr	r3, [r4, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d053      	beq.n	8002430 <HAL_ETH_Init+0x170>
    tickstart = HAL_GetTick();
 8002388:	f7ff fae0 	bl	800194c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 800238c:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002390:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002392:	aa01      	add	r2, sp, #4
 8002394:	2101      	movs	r1, #1
 8002396:	4620      	mov	r0, r4
 8002398:	f7ff ff20 	bl	80021dc <HAL_ETH_ReadPHYRegister>
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 800239c:	f7ff fad6 	bl	800194c <HAL_GetTick>
 80023a0:	1b80      	subs	r0, r0, r6
 80023a2:	42b8      	cmp	r0, r7
 80023a4:	d90b      	bls.n	80023be <HAL_ETH_Init+0xfe>
        ETH_MACDMAConfig(heth, err);
 80023a6:	2101      	movs	r1, #1
 80023a8:	4620      	mov	r0, r4
 80023aa:	f7ff fd35 	bl	8001e18 <ETH_MACDMAConfig>
        heth->State = HAL_ETH_STATE_READY;
 80023ae:	2301      	movs	r3, #1
 80023b0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 80023b4:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80023b6:	2503      	movs	r5, #3
        __HAL_UNLOCK(heth);
 80023b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 80023bc:	e7d3      	b.n	8002366 <HAL_ETH_Init+0xa6>
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80023be:	9b01      	ldr	r3, [sp, #4]
 80023c0:	0759      	lsls	r1, r3, #29
 80023c2:	d5e6      	bpl.n	8002392 <HAL_ETH_Init+0xd2>
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80023c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023c8:	2100      	movs	r1, #0
 80023ca:	4620      	mov	r0, r4
 80023cc:	f7ff ff40 	bl	8002250 <HAL_ETH_WritePHYRegister>
 80023d0:	2800      	cmp	r0, #0
 80023d2:	d1b4      	bne.n	800233e <HAL_ETH_Init+0x7e>
    tickstart = HAL_GetTick();
 80023d4:	f7ff faba 	bl	800194c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80023d8:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80023dc:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80023de:	aa01      	add	r2, sp, #4
 80023e0:	2101      	movs	r1, #1
 80023e2:	4620      	mov	r0, r4
 80023e4:	f7ff fefa 	bl	80021dc <HAL_ETH_ReadPHYRegister>
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80023e8:	f7ff fab0 	bl	800194c <HAL_GetTick>
 80023ec:	1b80      	subs	r0, r0, r6
 80023ee:	42b8      	cmp	r0, r7
 80023f0:	d8d9      	bhi.n	80023a6 <HAL_ETH_Init+0xe6>
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80023f2:	9b01      	ldr	r3, [sp, #4]
 80023f4:	069a      	lsls	r2, r3, #26
 80023f6:	d5f2      	bpl.n	80023de <HAL_ETH_Init+0x11e>
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80023f8:	aa01      	add	r2, sp, #4
 80023fa:	2110      	movs	r1, #16
 80023fc:	4620      	mov	r0, r4
 80023fe:	f7ff feed 	bl	80021dc <HAL_ETH_ReadPHYRegister>
 8002402:	2800      	cmp	r0, #0
 8002404:	d19b      	bne.n	800233e <HAL_ETH_Init+0x7e>
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002406:	9b01      	ldr	r3, [sp, #4]
 8002408:	f013 0204 	ands.w	r2, r3, #4
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800240c:	bf18      	it	ne
 800240e:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002412:	079b      	lsls	r3, r3, #30
      (heth->Init).Speed = ETH_SPEED_10M;
 8002414:	bf4c      	ite	mi
 8002416:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8002418:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 800241c:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 800241e:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8002420:	2100      	movs	r1, #0
 8002422:	4620      	mov	r0, r4
 8002424:	f7ff fcf8 	bl	8001e18 <ETH_MACDMAConfig>
  heth->State = HAL_ETH_STATE_READY;
 8002428:	2301      	movs	r3, #1
 800242a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 800242e:	e79a      	b.n	8002366 <HAL_ETH_Init+0xa6>
                                                 (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002430:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8002434:	085b      	lsrs	r3, r3, #1
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002436:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 800243a:	b292      	uxth	r2, r2
 800243c:	4629      	mov	r1, r5
 800243e:	4620      	mov	r0, r4
 8002440:	f7ff ff06 	bl	8002250 <HAL_ETH_WritePHYRegister>
 8002444:	2800      	cmp	r0, #0
 8002446:	f47f af7a 	bne.w	800233e <HAL_ETH_Init+0x7e>
    HAL_Delay(PHY_CONFIG_DELAY);
 800244a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800244e:	f7ff fa83 	bl	8001958 <HAL_Delay>
 8002452:	e7e5      	b.n	8002420 <HAL_ETH_Init+0x160>
    return HAL_ERROR;
 8002454:	2501      	movs	r5, #1
 8002456:	e786      	b.n	8002366 <HAL_ETH_Init+0xa6>
 8002458:	40010000 	.word	0x40010000
 800245c:	feced300 	.word	0xfeced300
 8002460:	00e4e1bf 	.word	0x00e4e1bf
 8002464:	fde9f140 	.word	0xfde9f140
 8002468:	017d783f 	.word	0x017d783f

0800246c <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 800246c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
{
 8002470:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(heth);
 8002472:	2b01      	cmp	r3, #1
{
 8002474:	4605      	mov	r5, r0
 8002476:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 800247a:	d031      	beq.n	80024e0 <HAL_ETH_Start+0x74>
  __IO uint32_t tmpreg1 = 0U;
 800247c:	2400      	movs	r4, #0
  __HAL_LOCK(heth);
 800247e:	2601      	movs	r6, #1
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002480:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8002482:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __IO uint32_t tmpreg1 = 0U;
 8002486:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002488:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 800248a:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800248e:	f042 0208 	orr.w	r2, r2, #8
 8002492:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002498:	f7ff fc98 	bl	8001dcc <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 800249c:	9a01      	ldr	r2, [sp, #4]
 800249e:	682b      	ldr	r3, [r5, #0]
 80024a0:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg1 = 0U;
 80024a2:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	f042 0204 	orr.w	r2, r2, #4
 80024aa:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80024b0:	f7ff fc8c 	bl	8001dcc <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 80024b4:	682b      	ldr	r3, [r5, #0]
 80024b6:	9a00      	ldr	r2, [sp, #0]
  ETH_FlushTransmitFIFO(heth);
 80024b8:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg1;
 80024ba:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 80024bc:	f7ff fc98 	bl	8001df0 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 80024c0:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 80024c4:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 80024c6:	682a      	ldr	r2, [r5, #0]
 80024c8:	58d1      	ldr	r1, [r2, r3]
 80024ca:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 80024ce:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 80024d0:	58d1      	ldr	r1, [r2, r3]
 80024d2:	f041 0102 	orr.w	r1, r1, #2
 80024d6:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 80024d8:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80024dc:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 80024e0:	b002      	add	sp, #8
 80024e2:	bd70      	pop	{r4, r5, r6, pc}

080024e4 <HAL_ETH_Stop>:
  __HAL_LOCK(heth);
 80024e4:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
{
 80024e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(heth);
 80024ea:	2b01      	cmp	r3, #1
{
 80024ec:	4605      	mov	r5, r0
 80024ee:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 80024f2:	d031      	beq.n	8002558 <HAL_ETH_Stop+0x74>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80024f4:	f241 0218 	movw	r2, #4120	; 0x1018
  __HAL_LOCK(heth);
 80024f8:	2601      	movs	r6, #1
  __IO uint32_t tmpreg1 = 0U;
 80024fa:	2400      	movs	r4, #0
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80024fc:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 80024fe:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002502:	5899      	ldr	r1, [r3, r2]
  __HAL_LOCK(heth);
 8002504:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002508:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800250c:	5099      	str	r1, [r3, r2]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800250e:	5899      	ldr	r1, [r3, r2]
 8002510:	f021 0102 	bic.w	r1, r1, #2
 8002514:	5099      	str	r1, [r3, r2]
  __IO uint32_t tmpreg1 = 0U;
 8002516:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	f022 0204 	bic.w	r2, r2, #4
 800251e:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002524:	f7ff fc52 	bl	8001dcc <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8002528:	682b      	ldr	r3, [r5, #0]
 800252a:	9a01      	ldr	r2, [sp, #4]
  ETH_FlushTransmitFIFO(heth);
 800252c:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg1;
 800252e:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8002530:	f7ff fc5e 	bl	8001df0 <ETH_FlushTransmitFIFO>
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002534:	682b      	ldr	r3, [r5, #0]
  __IO uint32_t tmpreg1 = 0U;
 8002536:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	f022 0208 	bic.w	r2, r2, #8
 800253e:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002544:	f7ff fc42 	bl	8001dcc <ETH_Delay.constprop.4>
  return HAL_OK;
 8002548:	4620      	mov	r0, r4
  (heth->Instance)->MACCR = tmpreg1;
 800254a:	9a00      	ldr	r2, [sp, #0]
 800254c:	682b      	ldr	r3, [r5, #0]
 800254e:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 8002550:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8002554:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8002558:	b002      	add	sp, #8
 800255a:	bd70      	pop	{r4, r5, r6, pc}

0800255c <HAL_ETH_ConfigMAC>:
{
 800255c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 800255e:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
{
 8002562:	4605      	mov	r5, r0
  __HAL_LOCK(heth);
 8002564:	2b01      	cmp	r3, #1
{
 8002566:	460c      	mov	r4, r1
 8002568:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 800256c:	d071      	beq.n	8002652 <HAL_ETH_ConfigMAC+0xf6>
 800256e:	2601      	movs	r6, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8002570:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __HAL_LOCK(heth);
 8002574:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
 8002578:	682a      	ldr	r2, [r5, #0]
 800257a:	e9d5 7002 	ldrd	r7, r0, [r5, #8]
  if (macconf != NULL)
 800257e:	2900      	cmp	r1, #0
 8002580:	d068      	beq.n	8002654 <HAL_ETH_ConfigMAC+0xf8>
    tmpreg1 = (heth->Instance)->MACCR;
 8002582:	6813      	ldr	r3, [r2, #0]
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002584:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8002670 <HAL_ETH_ConfigMAC+0x114>
 8002588:	ea0c 0c03 	and.w	ip, ip, r3
                          macconf->BackOffLimit |
 800258c:	e9d1 3100 	ldrd	r3, r1, [r1]
 8002590:	430b      	orrs	r3, r1
 8002592:	68a1      	ldr	r1, [r4, #8]
 8002594:	430b      	orrs	r3, r1
 8002596:	68e1      	ldr	r1, [r4, #12]
 8002598:	430b      	orrs	r3, r1
 800259a:	6921      	ldr	r1, [r4, #16]
 800259c:	430b      	orrs	r3, r1
 800259e:	6961      	ldr	r1, [r4, #20]
 80025a0:	430b      	orrs	r3, r1
 80025a2:	69a1      	ldr	r1, [r4, #24]
 80025a4:	430b      	orrs	r3, r1
 80025a6:	69e1      	ldr	r1, [r4, #28]
 80025a8:	430b      	orrs	r3, r1
 80025aa:	6a21      	ldr	r1, [r4, #32]
 80025ac:	430b      	orrs	r3, r1
 80025ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80025b0:	430b      	orrs	r3, r1
 80025b2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80025b4:	430b      	orrs	r3, r1
 80025b6:	433b      	orrs	r3, r7
 80025b8:	4303      	orrs	r3, r0
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 80025ba:	ea43 030c 	orr.w	r3, r3, ip
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80025be:	6013      	str	r3, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025c0:	4630      	mov	r0, r6
    tmpreg1 = (heth->Instance)->MACCR;
 80025c2:	6817      	ldr	r7, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025c4:	f7ff f9c8 	bl	8001958 <HAL_Delay>
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 80025c8:	e9d4 310b 	ldrd	r3, r1, [r4, #44]	; 0x2c
 80025cc:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 80025ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
    (heth->Instance)->MACCR = tmpreg1;
 80025d0:	682a      	ldr	r2, [r5, #0]
                                          macconf->SourceAddrFilter |
 80025d2:	430b      	orrs	r3, r1
                                          macconf->PassControlFrames |
 80025d4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    (heth->Instance)->MACCR = tmpreg1;
 80025d6:	6017      	str	r7, [r2, #0]
                                          macconf->PassControlFrames |
 80025d8:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception |
 80025da:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025dc:	4630      	mov	r0, r6
                                          macconf->BroadcastFramesReception |
 80025de:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 80025e0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80025e2:	430b      	orrs	r3, r1
                                          macconf->PromiscuousMode |
 80025e4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80025e6:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 80025e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80025ea:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 80025ec:	6053      	str	r3, [r2, #4]
    tmpreg1 = (heth->Instance)->MACFFR;
 80025ee:	6857      	ldr	r7, [r2, #4]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025f0:	f7ff f9b2 	bl	8001958 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 80025f4:	682a      	ldr	r2, [r5, #0]
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80025f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    (heth->Instance)->MACFFR = tmpreg1;
 80025f8:	6057      	str	r7, [r2, #4]
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80025fa:	6093      	str	r3, [r2, #8]
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80025fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80025fe:	60d3      	str	r3, [r2, #12]
                          macconf->ReceiveFlowControl |
 8002600:	e9d4 3016 	ldrd	r3, r0, [r4, #88]	; 0x58
 8002604:	4303      	orrs	r3, r0
 8002606:	6e20      	ldr	r0, [r4, #96]	; 0x60
    tmpreg1 = (heth->Instance)->MACFCR;
 8002608:	6991      	ldr	r1, [r2, #24]
                          macconf->ReceiveFlowControl |
 800260a:	4303      	orrs	r3, r0
 800260c:	6e60      	ldr	r0, [r4, #100]	; 0x64
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800260e:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
                          macconf->ReceiveFlowControl |
 8002612:	4303      	orrs	r3, r0
 8002614:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002616:	0409      	lsls	r1, r1, #16
                          macconf->ReceiveFlowControl |
 8002618:	4303      	orrs	r3, r0
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800261a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800261c:	0c09      	lsrs	r1, r1, #16
                          macconf->ReceiveFlowControl |
 800261e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002622:	430b      	orrs	r3, r1
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002624:	6193      	str	r3, [r2, #24]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002626:	4630      	mov	r0, r6
    tmpreg1 = (heth->Instance)->MACFCR;
 8002628:	6997      	ldr	r7, [r2, #24]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800262a:	f7ff f995 	bl	8001958 <HAL_Delay>
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 800262e:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
    (heth->Instance)->MACFCR = tmpreg1;
 8002632:	682b      	ldr	r3, [r5, #0]
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8002634:	430a      	orrs	r2, r1
    (heth->Instance)->MACFCR = tmpreg1;
 8002636:	619f      	str	r7, [r3, #24]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002638:	4630      	mov	r0, r6
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 800263a:	61da      	str	r2, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800263c:	69dc      	ldr	r4, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800263e:	f7ff f98b 	bl	8001958 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002642:	682b      	ldr	r3, [r5, #0]
 8002644:	61dc      	str	r4, [r3, #28]
  heth->State = HAL_ETH_STATE_READY;
 8002646:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8002648:	2000      	movs	r0, #0
  heth->State = HAL_ETH_STATE_READY;
 800264a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800264e:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
}
 8002652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = (heth->Instance)->MACCR;
 8002654:	6811      	ldr	r1, [r2, #0]
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002656:	ea47 0300 	orr.w	r3, r7, r0
    tmpreg1 &= ~(0x00004800U);
 800265a:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800265e:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002660:	6013      	str	r3, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002662:	4630      	mov	r0, r6
    tmpreg1 = (heth->Instance)->MACCR;
 8002664:	6814      	ldr	r4, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002666:	f7ff f977 	bl	8001958 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800266a:	682b      	ldr	r3, [r5, #0]
 800266c:	601c      	str	r4, [r3, #0]
 800266e:	e7ea      	b.n	8002646 <HAL_ETH_ConfigMAC+0xea>
 8002670:	ff20810f 	.word	0xff20810f

08002674 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002678:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800267a:	4626      	mov	r6, r4
 800267c:	4b65      	ldr	r3, [pc, #404]	; (8002814 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800267e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8002824 <HAL_GPIO_Init+0x1b0>
 8002682:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8002828 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002686:	680a      	ldr	r2, [r1, #0]
 8002688:	fa32 f506 	lsrs.w	r5, r2, r6
 800268c:	d102      	bne.n	8002694 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 800268e:	b003      	add	sp, #12
 8002690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002694:	f04f 0801 	mov.w	r8, #1
 8002698:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800269c:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80026a0:	4590      	cmp	r8, r2
 80026a2:	d17e      	bne.n	80027a2 <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 80026a4:	684d      	ldr	r5, [r1, #4]
 80026a6:	2d12      	cmp	r5, #18
 80026a8:	f000 80a9 	beq.w	80027fe <HAL_GPIO_Init+0x18a>
 80026ac:	f200 8082 	bhi.w	80027b4 <HAL_GPIO_Init+0x140>
 80026b0:	2d02      	cmp	r5, #2
 80026b2:	f000 80a1 	beq.w	80027f8 <HAL_GPIO_Init+0x184>
 80026b6:	d876      	bhi.n	80027a6 <HAL_GPIO_Init+0x132>
 80026b8:	2d00      	cmp	r5, #0
 80026ba:	f000 8088 	beq.w	80027ce <HAL_GPIO_Init+0x15a>
 80026be:	2d01      	cmp	r5, #1
 80026c0:	f000 8098 	beq.w	80027f4 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026c4:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026c8:	2aff      	cmp	r2, #255	; 0xff
 80026ca:	bf93      	iteet	ls
 80026cc:	4682      	movls	sl, r0
 80026ce:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80026d2:	3d08      	subhi	r5, #8
 80026d4:	f8d0 b000 	ldrls.w	fp, [r0]
 80026d8:	bf92      	itee	ls
 80026da:	00b5      	lslls	r5, r6, #2
 80026dc:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80026e0:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026e2:	fa09 f805 	lsl.w	r8, r9, r5
 80026e6:	ea2b 0808 	bic.w	r8, fp, r8
 80026ea:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026ee:	bf88      	it	hi
 80026f0:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026f4:	ea48 0505 	orr.w	r5, r8, r5
 80026f8:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026fc:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002700:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8002704:	d04d      	beq.n	80027a2 <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002706:	4f44      	ldr	r7, [pc, #272]	; (8002818 <HAL_GPIO_Init+0x1a4>)
 8002708:	f026 0803 	bic.w	r8, r6, #3
 800270c:	69bd      	ldr	r5, [r7, #24]
 800270e:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002712:	f045 0501 	orr.w	r5, r5, #1
 8002716:	61bd      	str	r5, [r7, #24]
 8002718:	69bd      	ldr	r5, [r7, #24]
 800271a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 800271e:	f005 0501 	and.w	r5, r5, #1
 8002722:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002724:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002728:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800272a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800272e:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002732:	fa09 f90b 	lsl.w	r9, r9, fp
 8002736:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800273a:	4d38      	ldr	r5, [pc, #224]	; (800281c <HAL_GPIO_Init+0x1a8>)
 800273c:	42a8      	cmp	r0, r5
 800273e:	d063      	beq.n	8002808 <HAL_GPIO_Init+0x194>
 8002740:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002744:	42a8      	cmp	r0, r5
 8002746:	d061      	beq.n	800280c <HAL_GPIO_Init+0x198>
 8002748:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800274c:	42a8      	cmp	r0, r5
 800274e:	d05f      	beq.n	8002810 <HAL_GPIO_Init+0x19c>
 8002750:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002754:	42a8      	cmp	r0, r5
 8002756:	bf0c      	ite	eq
 8002758:	2503      	moveq	r5, #3
 800275a:	2504      	movne	r5, #4
 800275c:	fa05 f50b 	lsl.w	r5, r5, fp
 8002760:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002764:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8002768:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800276a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800276e:	bf14      	ite	ne
 8002770:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002772:	4395      	biceq	r5, r2
 8002774:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002776:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002778:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800277c:	bf14      	ite	ne
 800277e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002780:	4395      	biceq	r5, r2
 8002782:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002784:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002786:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800278a:	bf14      	ite	ne
 800278c:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800278e:	4395      	biceq	r5, r2
 8002790:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002792:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002794:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002798:	bf14      	ite	ne
 800279a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800279c:	ea25 0202 	biceq.w	r2, r5, r2
 80027a0:	60da      	str	r2, [r3, #12]
	position++;
 80027a2:	3601      	adds	r6, #1
 80027a4:	e76f      	b.n	8002686 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80027a6:	2d03      	cmp	r5, #3
 80027a8:	d022      	beq.n	80027f0 <HAL_GPIO_Init+0x17c>
 80027aa:	2d11      	cmp	r5, #17
 80027ac:	d18a      	bne.n	80026c4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027ae:	68cc      	ldr	r4, [r1, #12]
 80027b0:	3404      	adds	r4, #4
          break;
 80027b2:	e787      	b.n	80026c4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80027b4:	4f1a      	ldr	r7, [pc, #104]	; (8002820 <HAL_GPIO_Init+0x1ac>)
 80027b6:	42bd      	cmp	r5, r7
 80027b8:	d009      	beq.n	80027ce <HAL_GPIO_Init+0x15a>
 80027ba:	d812      	bhi.n	80027e2 <HAL_GPIO_Init+0x16e>
 80027bc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800282c <HAL_GPIO_Init+0x1b8>
 80027c0:	454d      	cmp	r5, r9
 80027c2:	d004      	beq.n	80027ce <HAL_GPIO_Init+0x15a>
 80027c4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80027c8:	454d      	cmp	r5, r9
 80027ca:	f47f af7b 	bne.w	80026c4 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027ce:	688c      	ldr	r4, [r1, #8]
 80027d0:	b1c4      	cbz	r4, 8002804 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027d2:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80027d4:	bf0c      	ite	eq
 80027d6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80027da:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027de:	2408      	movs	r4, #8
 80027e0:	e770      	b.n	80026c4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80027e2:	4565      	cmp	r5, ip
 80027e4:	d0f3      	beq.n	80027ce <HAL_GPIO_Init+0x15a>
 80027e6:	4575      	cmp	r5, lr
 80027e8:	d0f1      	beq.n	80027ce <HAL_GPIO_Init+0x15a>
 80027ea:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8002830 <HAL_GPIO_Init+0x1bc>
 80027ee:	e7eb      	b.n	80027c8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027f0:	2400      	movs	r4, #0
 80027f2:	e767      	b.n	80026c4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027f4:	68cc      	ldr	r4, [r1, #12]
          break;
 80027f6:	e765      	b.n	80026c4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027f8:	68cc      	ldr	r4, [r1, #12]
 80027fa:	3408      	adds	r4, #8
          break;
 80027fc:	e762      	b.n	80026c4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027fe:	68cc      	ldr	r4, [r1, #12]
 8002800:	340c      	adds	r4, #12
          break;
 8002802:	e75f      	b.n	80026c4 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002804:	2404      	movs	r4, #4
 8002806:	e75d      	b.n	80026c4 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002808:	2500      	movs	r5, #0
 800280a:	e7a7      	b.n	800275c <HAL_GPIO_Init+0xe8>
 800280c:	2501      	movs	r5, #1
 800280e:	e7a5      	b.n	800275c <HAL_GPIO_Init+0xe8>
 8002810:	2502      	movs	r5, #2
 8002812:	e7a3      	b.n	800275c <HAL_GPIO_Init+0xe8>
 8002814:	40010400 	.word	0x40010400
 8002818:	40021000 	.word	0x40021000
 800281c:	40010800 	.word	0x40010800
 8002820:	10210000 	.word	0x10210000
 8002824:	10310000 	.word	0x10310000
 8002828:	10320000 	.word	0x10320000
 800282c:	10110000 	.word	0x10110000
 8002830:	10220000 	.word	0x10220000

08002834 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002834:	b10a      	cbz	r2, 800283a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002836:	6101      	str	r1, [r0, #16]
  }
}
 8002838:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800283a:	0409      	lsls	r1, r1, #16
 800283c:	e7fb      	b.n	8002836 <HAL_GPIO_WritePin+0x2>
	...

08002840 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002840:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002842:	4b04      	ldr	r3, [pc, #16]	; (8002854 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002844:	6959      	ldr	r1, [r3, #20]
 8002846:	4201      	tst	r1, r0
 8002848:	d002      	beq.n	8002850 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800284a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800284c:	f7fe fc6c 	bl	8001128 <HAL_GPIO_EXTI_Callback>
  }
}
 8002850:	bd08      	pop	{r3, pc}
 8002852:	bf00      	nop
 8002854:	40010400 	.word	0x40010400

08002858 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002858:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800285c:	4604      	mov	r4, r0
 800285e:	b918      	cbnz	r0, 8002868 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002860:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8002862:	b002      	add	sp, #8
 8002864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002868:	6803      	ldr	r3, [r0, #0]
 800286a:	07db      	lsls	r3, r3, #31
 800286c:	d414      	bmi.n	8002898 <HAL_RCC_OscConfig+0x40>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800286e:	6823      	ldr	r3, [r4, #0]
 8002870:	079f      	lsls	r7, r3, #30
 8002872:	d45f      	bmi.n	8002934 <HAL_RCC_OscConfig+0xdc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002874:	6823      	ldr	r3, [r4, #0]
 8002876:	0719      	lsls	r1, r3, #28
 8002878:	f100 8096 	bmi.w	80029a8 <HAL_RCC_OscConfig+0x150>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800287c:	6823      	ldr	r3, [r4, #0]
 800287e:	075a      	lsls	r2, r3, #29
 8002880:	f100 80c0 	bmi.w	8002a04 <HAL_RCC_OscConfig+0x1ac>
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8002884:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002886:	2a00      	cmp	r2, #0
 8002888:	f040 812e 	bne.w	8002ae8 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800288c:	6a22      	ldr	r2, [r4, #32]
 800288e:	2a00      	cmp	r2, #0
 8002890:	f040 8181 	bne.w	8002b96 <HAL_RCC_OscConfig+0x33e>
  return HAL_OK;
 8002894:	2000      	movs	r0, #0
 8002896:	e7e4      	b.n	8002862 <HAL_RCC_OscConfig+0xa>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002898:	4d8e      	ldr	r5, [pc, #568]	; (8002ad4 <HAL_RCC_OscConfig+0x27c>)
 800289a:	686b      	ldr	r3, [r5, #4]
 800289c:	f003 030c 	and.w	r3, r3, #12
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d007      	beq.n	80028b4 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028a4:	686b      	ldr	r3, [r5, #4]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d109      	bne.n	80028c2 <HAL_RCC_OscConfig+0x6a>
 80028ae:	686b      	ldr	r3, [r5, #4]
 80028b0:	03de      	lsls	r6, r3, #15
 80028b2:	d506      	bpl.n	80028c2 <HAL_RCC_OscConfig+0x6a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b4:	682b      	ldr	r3, [r5, #0]
 80028b6:	039d      	lsls	r5, r3, #14
 80028b8:	d5d9      	bpl.n	800286e <HAL_RCC_OscConfig+0x16>
 80028ba:	68a3      	ldr	r3, [r4, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1d6      	bne.n	800286e <HAL_RCC_OscConfig+0x16>
 80028c0:	e7ce      	b.n	8002860 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c2:	68a3      	ldr	r3, [r4, #8]
 80028c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c8:	d110      	bne.n	80028ec <HAL_RCC_OscConfig+0x94>
 80028ca:	682b      	ldr	r3, [r5, #0]
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80028d2:	f7ff f83b 	bl	800194c <HAL_GetTick>
 80028d6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d8:	682b      	ldr	r3, [r5, #0]
 80028da:	0398      	lsls	r0, r3, #14
 80028dc:	d4c7      	bmi.n	800286e <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028de:	f7ff f835 	bl	800194c <HAL_GetTick>
 80028e2:	1b80      	subs	r0, r0, r6
 80028e4:	2864      	cmp	r0, #100	; 0x64
 80028e6:	d9f7      	bls.n	80028d8 <HAL_RCC_OscConfig+0x80>
            return HAL_TIMEOUT;
 80028e8:	2003      	movs	r0, #3
 80028ea:	e7ba      	b.n	8002862 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ec:	b99b      	cbnz	r3, 8002916 <HAL_RCC_OscConfig+0xbe>
 80028ee:	682b      	ldr	r3, [r5, #0]
 80028f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f4:	602b      	str	r3, [r5, #0]
 80028f6:	682b      	ldr	r3, [r5, #0]
 80028f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028fc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80028fe:	f7ff f825 	bl	800194c <HAL_GetTick>
 8002902:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002904:	682b      	ldr	r3, [r5, #0]
 8002906:	0399      	lsls	r1, r3, #14
 8002908:	d5b1      	bpl.n	800286e <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800290a:	f7ff f81f 	bl	800194c <HAL_GetTick>
 800290e:	1b80      	subs	r0, r0, r6
 8002910:	2864      	cmp	r0, #100	; 0x64
 8002912:	d9f7      	bls.n	8002904 <HAL_RCC_OscConfig+0xac>
 8002914:	e7e8      	b.n	80028e8 <HAL_RCC_OscConfig+0x90>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002916:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800291a:	682b      	ldr	r3, [r5, #0]
 800291c:	d103      	bne.n	8002926 <HAL_RCC_OscConfig+0xce>
 800291e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002922:	602b      	str	r3, [r5, #0]
 8002924:	e7d1      	b.n	80028ca <HAL_RCC_OscConfig+0x72>
 8002926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800292a:	602b      	str	r3, [r5, #0]
 800292c:	682b      	ldr	r3, [r5, #0]
 800292e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002932:	e7cd      	b.n	80028d0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002934:	4d67      	ldr	r5, [pc, #412]	; (8002ad4 <HAL_RCC_OscConfig+0x27c>)
 8002936:	686b      	ldr	r3, [r5, #4]
 8002938:	f013 0f0c 	tst.w	r3, #12
 800293c:	d007      	beq.n	800294e <HAL_RCC_OscConfig+0xf6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800293e:	686b      	ldr	r3, [r5, #4]
 8002940:	f003 030c 	and.w	r3, r3, #12
 8002944:	2b08      	cmp	r3, #8
 8002946:	d110      	bne.n	800296a <HAL_RCC_OscConfig+0x112>
 8002948:	686b      	ldr	r3, [r5, #4]
 800294a:	03da      	lsls	r2, r3, #15
 800294c:	d40d      	bmi.n	800296a <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294e:	682b      	ldr	r3, [r5, #0]
 8002950:	079b      	lsls	r3, r3, #30
 8002952:	d502      	bpl.n	800295a <HAL_RCC_OscConfig+0x102>
 8002954:	6963      	ldr	r3, [r4, #20]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d182      	bne.n	8002860 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295a:	682b      	ldr	r3, [r5, #0]
 800295c:	69a2      	ldr	r2, [r4, #24]
 800295e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002962:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002966:	602b      	str	r3, [r5, #0]
 8002968:	e784      	b.n	8002874 <HAL_RCC_OscConfig+0x1c>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800296a:	6962      	ldr	r2, [r4, #20]
 800296c:	4b5a      	ldr	r3, [pc, #360]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 800296e:	b16a      	cbz	r2, 800298c <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_HSI_ENABLE();
 8002970:	2201      	movs	r2, #1
 8002972:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002974:	f7fe ffea 	bl	800194c <HAL_GetTick>
 8002978:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297a:	682b      	ldr	r3, [r5, #0]
 800297c:	079f      	lsls	r7, r3, #30
 800297e:	d4ec      	bmi.n	800295a <HAL_RCC_OscConfig+0x102>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002980:	f7fe ffe4 	bl	800194c <HAL_GetTick>
 8002984:	1b80      	subs	r0, r0, r6
 8002986:	2802      	cmp	r0, #2
 8002988:	d9f7      	bls.n	800297a <HAL_RCC_OscConfig+0x122>
 800298a:	e7ad      	b.n	80028e8 <HAL_RCC_OscConfig+0x90>
        __HAL_RCC_HSI_DISABLE();
 800298c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800298e:	f7fe ffdd 	bl	800194c <HAL_GetTick>
 8002992:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002994:	682b      	ldr	r3, [r5, #0]
 8002996:	0798      	lsls	r0, r3, #30
 8002998:	f57f af6c 	bpl.w	8002874 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800299c:	f7fe ffd6 	bl	800194c <HAL_GetTick>
 80029a0:	1b80      	subs	r0, r0, r6
 80029a2:	2802      	cmp	r0, #2
 80029a4:	d9f6      	bls.n	8002994 <HAL_RCC_OscConfig+0x13c>
 80029a6:	e79f      	b.n	80028e8 <HAL_RCC_OscConfig+0x90>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029a8:	69e2      	ldr	r2, [r4, #28]
 80029aa:	4d4a      	ldr	r5, [pc, #296]	; (8002ad4 <HAL_RCC_OscConfig+0x27c>)
 80029ac:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <HAL_RCC_OscConfig+0x284>)
 80029ae:	b1da      	cbz	r2, 80029e8 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 80029b0:	2201      	movs	r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80029b4:	f7fe ffca 	bl	800194c <HAL_GetTick>
 80029b8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80029bc:	079b      	lsls	r3, r3, #30
 80029be:	d50d      	bpl.n	80029dc <HAL_RCC_OscConfig+0x184>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029c0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80029c4:	4b46      	ldr	r3, [pc, #280]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80029cc:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80029ce:	bf00      	nop
  }
  while (Delay --);
 80029d0:	9b01      	ldr	r3, [sp, #4]
 80029d2:	1e5a      	subs	r2, r3, #1
 80029d4:	9201      	str	r2, [sp, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f9      	bne.n	80029ce <HAL_RCC_OscConfig+0x176>
 80029da:	e74f      	b.n	800287c <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029dc:	f7fe ffb6 	bl	800194c <HAL_GetTick>
 80029e0:	1b80      	subs	r0, r0, r6
 80029e2:	2802      	cmp	r0, #2
 80029e4:	d9e9      	bls.n	80029ba <HAL_RCC_OscConfig+0x162>
 80029e6:	e77f      	b.n	80028e8 <HAL_RCC_OscConfig+0x90>
      __HAL_RCC_LSI_DISABLE();
 80029e8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80029ea:	f7fe ffaf 	bl	800194c <HAL_GetTick>
 80029ee:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80029f2:	079f      	lsls	r7, r3, #30
 80029f4:	f57f af42 	bpl.w	800287c <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f8:	f7fe ffa8 	bl	800194c <HAL_GetTick>
 80029fc:	1b80      	subs	r0, r0, r6
 80029fe:	2802      	cmp	r0, #2
 8002a00:	d9f6      	bls.n	80029f0 <HAL_RCC_OscConfig+0x198>
 8002a02:	e771      	b.n	80028e8 <HAL_RCC_OscConfig+0x90>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a04:	4d33      	ldr	r5, [pc, #204]	; (8002ad4 <HAL_RCC_OscConfig+0x27c>)
 8002a06:	69eb      	ldr	r3, [r5, #28]
 8002a08:	00de      	lsls	r6, r3, #3
 8002a0a:	d424      	bmi.n	8002a56 <HAL_RCC_OscConfig+0x1fe>
      pwrclkchanged = SET;
 8002a0c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a0e:	69eb      	ldr	r3, [r5, #28]
 8002a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a14:	61eb      	str	r3, [r5, #28]
 8002a16:	69eb      	ldr	r3, [r5, #28]
 8002a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a20:	4e30      	ldr	r6, [pc, #192]	; (8002ae4 <HAL_RCC_OscConfig+0x28c>)
 8002a22:	6833      	ldr	r3, [r6, #0]
 8002a24:	05d8      	lsls	r0, r3, #23
 8002a26:	d518      	bpl.n	8002a5a <HAL_RCC_OscConfig+0x202>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a28:	6923      	ldr	r3, [r4, #16]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d126      	bne.n	8002a7c <HAL_RCC_OscConfig+0x224>
 8002a2e:	6a2b      	ldr	r3, [r5, #32]
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8002a36:	f7fe ff89 	bl	800194c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002a3e:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a40:	6a2b      	ldr	r3, [r5, #32]
 8002a42:	079a      	lsls	r2, r3, #30
 8002a44:	d53f      	bpl.n	8002ac6 <HAL_RCC_OscConfig+0x26e>
    if (pwrclkchanged == SET)
 8002a46:	2f00      	cmp	r7, #0
 8002a48:	f43f af1c 	beq.w	8002884 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a4c:	69eb      	ldr	r3, [r5, #28]
 8002a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a52:	61eb      	str	r3, [r5, #28]
 8002a54:	e716      	b.n	8002884 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002a56:	2700      	movs	r7, #0
 8002a58:	e7e2      	b.n	8002a20 <HAL_RCC_OscConfig+0x1c8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a5a:	6833      	ldr	r3, [r6, #0]
 8002a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a60:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002a62:	f7fe ff73 	bl	800194c <HAL_GetTick>
 8002a66:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a68:	6833      	ldr	r3, [r6, #0]
 8002a6a:	05d9      	lsls	r1, r3, #23
 8002a6c:	d4dc      	bmi.n	8002a28 <HAL_RCC_OscConfig+0x1d0>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6e:	f7fe ff6d 	bl	800194c <HAL_GetTick>
 8002a72:	eba0 0008 	sub.w	r0, r0, r8
 8002a76:	2864      	cmp	r0, #100	; 0x64
 8002a78:	d9f6      	bls.n	8002a68 <HAL_RCC_OscConfig+0x210>
 8002a7a:	e735      	b.n	80028e8 <HAL_RCC_OscConfig+0x90>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a7c:	b9ab      	cbnz	r3, 8002aaa <HAL_RCC_OscConfig+0x252>
 8002a7e:	6a2b      	ldr	r3, [r5, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a80:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a84:	f023 0301 	bic.w	r3, r3, #1
 8002a88:	622b      	str	r3, [r5, #32]
 8002a8a:	6a2b      	ldr	r3, [r5, #32]
 8002a8c:	f023 0304 	bic.w	r3, r3, #4
 8002a90:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8002a92:	f7fe ff5b 	bl	800194c <HAL_GetTick>
 8002a96:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a98:	6a2b      	ldr	r3, [r5, #32]
 8002a9a:	079b      	lsls	r3, r3, #30
 8002a9c:	d5d3      	bpl.n	8002a46 <HAL_RCC_OscConfig+0x1ee>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a9e:	f7fe ff55 	bl	800194c <HAL_GetTick>
 8002aa2:	1b80      	subs	r0, r0, r6
 8002aa4:	4540      	cmp	r0, r8
 8002aa6:	d9f7      	bls.n	8002a98 <HAL_RCC_OscConfig+0x240>
 8002aa8:	e71e      	b.n	80028e8 <HAL_RCC_OscConfig+0x90>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aaa:	2b05      	cmp	r3, #5
 8002aac:	6a2b      	ldr	r3, [r5, #32]
 8002aae:	d103      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x260>
 8002ab0:	f043 0304 	orr.w	r3, r3, #4
 8002ab4:	622b      	str	r3, [r5, #32]
 8002ab6:	e7ba      	b.n	8002a2e <HAL_RCC_OscConfig+0x1d6>
 8002ab8:	f023 0301 	bic.w	r3, r3, #1
 8002abc:	622b      	str	r3, [r5, #32]
 8002abe:	6a2b      	ldr	r3, [r5, #32]
 8002ac0:	f023 0304 	bic.w	r3, r3, #4
 8002ac4:	e7b6      	b.n	8002a34 <HAL_RCC_OscConfig+0x1dc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac6:	f7fe ff41 	bl	800194c <HAL_GetTick>
 8002aca:	eba0 0008 	sub.w	r0, r0, r8
 8002ace:	42b0      	cmp	r0, r6
 8002ad0:	d9b6      	bls.n	8002a40 <HAL_RCC_OscConfig+0x1e8>
 8002ad2:	e709      	b.n	80028e8 <HAL_RCC_OscConfig+0x90>
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	42420000 	.word	0x42420000
 8002adc:	42420480 	.word	0x42420480
 8002ae0:	20000000 	.word	0x20000000
 8002ae4:	40007000 	.word	0x40007000
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002ae8:	4d58      	ldr	r5, [pc, #352]	; (8002c4c <HAL_RCC_OscConfig+0x3f4>)
 8002aea:	686b      	ldr	r3, [r5, #4]
 8002aec:	03d8      	lsls	r0, r3, #15
 8002aee:	d508      	bpl.n	8002b02 <HAL_RCC_OscConfig+0x2aa>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002af0:	686b      	ldr	r3, [r5, #4]
 8002af2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d103      	bne.n	8002b02 <HAL_RCC_OscConfig+0x2aa>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8002afa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002afc:	03d9      	lsls	r1, r3, #15
 8002afe:	f53f aeaf 	bmi.w	8002860 <HAL_RCC_OscConfig+0x8>
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8002b02:	2a02      	cmp	r2, #2
 8002b04:	d133      	bne.n	8002b6e <HAL_RCC_OscConfig+0x316>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002b06:	682b      	ldr	r3, [r5, #0]
 8002b08:	00da      	lsls	r2, r3, #3
 8002b0a:	d506      	bpl.n	8002b1a <HAL_RCC_OscConfig+0x2c2>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002b0c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002b0e:	6b62      	ldr	r2, [r4, #52]	; 0x34
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002b10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002b14:	4293      	cmp	r3, r2
 8002b16:	f47f aea3 	bne.w	8002860 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL2_DISABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	4e4c      	ldr	r6, [pc, #304]	; (8002c50 <HAL_RCC_OscConfig+0x3f8>)
 8002b1e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002b20:	f7fe ff14 	bl	800194c <HAL_GetTick>
 8002b24:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002b26:	682b      	ldr	r3, [r5, #0]
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	d41a      	bmi.n	8002b62 <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002b2c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002b2e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002b30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b34:	4313      	orrs	r3, r2
 8002b36:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002b38:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002b3a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002b3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b40:	4313      	orrs	r3, r2
 8002b42:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL2_ENABLE();
 8002b44:	2301      	movs	r3, #1
 8002b46:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002b48:	f7fe ff00 	bl	800194c <HAL_GetTick>
 8002b4c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002b4e:	682b      	ldr	r3, [r5, #0]
 8002b50:	011f      	lsls	r7, r3, #4
 8002b52:	f53f ae9b 	bmi.w	800288c <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002b56:	f7fe fef9 	bl	800194c <HAL_GetTick>
 8002b5a:	1b80      	subs	r0, r0, r6
 8002b5c:	2864      	cmp	r0, #100	; 0x64
 8002b5e:	d9f6      	bls.n	8002b4e <HAL_RCC_OscConfig+0x2f6>
 8002b60:	e6c2      	b.n	80028e8 <HAL_RCC_OscConfig+0x90>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002b62:	f7fe fef3 	bl	800194c <HAL_GetTick>
 8002b66:	1bc0      	subs	r0, r0, r7
 8002b68:	2864      	cmp	r0, #100	; 0x64
 8002b6a:	d9dc      	bls.n	8002b26 <HAL_RCC_OscConfig+0x2ce>
 8002b6c:	e6bc      	b.n	80028e8 <HAL_RCC_OscConfig+0x90>
        __HAL_RCC_PLL2_DISABLE();
 8002b6e:	2200      	movs	r2, #0
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002b70:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b76:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL2_DISABLE();
 8002b78:	4b35      	ldr	r3, [pc, #212]	; (8002c50 <HAL_RCC_OscConfig+0x3f8>)
 8002b7a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002b7c:	f7fe fee6 	bl	800194c <HAL_GetTick>
 8002b80:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002b82:	682b      	ldr	r3, [r5, #0]
 8002b84:	0118      	lsls	r0, r3, #4
 8002b86:	f57f ae81 	bpl.w	800288c <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002b8a:	f7fe fedf 	bl	800194c <HAL_GetTick>
 8002b8e:	1b80      	subs	r0, r0, r6
 8002b90:	2864      	cmp	r0, #100	; 0x64
 8002b92:	d9f6      	bls.n	8002b82 <HAL_RCC_OscConfig+0x32a>
 8002b94:	e6a8      	b.n	80028e8 <HAL_RCC_OscConfig+0x90>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b96:	4b2d      	ldr	r3, [pc, #180]	; (8002c4c <HAL_RCC_OscConfig+0x3f4>)
 8002b98:	6859      	ldr	r1, [r3, #4]
 8002b9a:	461d      	mov	r5, r3
 8002b9c:	f001 010c 	and.w	r1, r1, #12
 8002ba0:	2908      	cmp	r1, #8
 8002ba2:	d041      	beq.n	8002c28 <HAL_RCC_OscConfig+0x3d0>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	4e2b      	ldr	r6, [pc, #172]	; (8002c54 <HAL_RCC_OscConfig+0x3fc>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba8:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002baa:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bac:	d12f      	bne.n	8002c0e <HAL_RCC_OscConfig+0x3b6>
        tickstart = HAL_GetTick();
 8002bae:	f7fe fecd 	bl	800194c <HAL_GetTick>
 8002bb2:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb4:	682b      	ldr	r3, [r5, #0]
 8002bb6:	0199      	lsls	r1, r3, #6
 8002bb8:	d423      	bmi.n	8002c02 <HAL_RCC_OscConfig+0x3aa>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc0:	d109      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x37e>
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8002bc2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002bc4:	6861      	ldr	r1, [r4, #4]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	62ea      	str	r2, [r5, #44]	; 0x2c
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bca:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002bcc:	68e1      	ldr	r1, [r4, #12]
 8002bce:	f022 020f 	bic.w	r2, r2, #15
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	62ea      	str	r2, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bd6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002bd8:	686a      	ldr	r2, [r5, #4]
 8002bda:	430b      	orrs	r3, r1
 8002bdc:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002be0:	4313      	orrs	r3, r2
 8002be2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002be4:	2301      	movs	r3, #1
 8002be6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002be8:	f7fe feb0 	bl	800194c <HAL_GetTick>
 8002bec:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bee:	682b      	ldr	r3, [r5, #0]
 8002bf0:	019a      	lsls	r2, r3, #6
 8002bf2:	f53f ae4f 	bmi.w	8002894 <HAL_RCC_OscConfig+0x3c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf6:	f7fe fea9 	bl	800194c <HAL_GetTick>
 8002bfa:	1b00      	subs	r0, r0, r4
 8002bfc:	2802      	cmp	r0, #2
 8002bfe:	d9f6      	bls.n	8002bee <HAL_RCC_OscConfig+0x396>
 8002c00:	e672      	b.n	80028e8 <HAL_RCC_OscConfig+0x90>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c02:	f7fe fea3 	bl	800194c <HAL_GetTick>
 8002c06:	1bc0      	subs	r0, r0, r7
 8002c08:	2802      	cmp	r0, #2
 8002c0a:	d9d3      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x35c>
 8002c0c:	e66c      	b.n	80028e8 <HAL_RCC_OscConfig+0x90>
        tickstart = HAL_GetTick();
 8002c0e:	f7fe fe9d 	bl	800194c <HAL_GetTick>
 8002c12:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c14:	682b      	ldr	r3, [r5, #0]
 8002c16:	019b      	lsls	r3, r3, #6
 8002c18:	f57f ae3c 	bpl.w	8002894 <HAL_RCC_OscConfig+0x3c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7fe fe96 	bl	800194c <HAL_GetTick>
 8002c20:	1b00      	subs	r0, r0, r4
 8002c22:	2802      	cmp	r0, #2
 8002c24:	d9f6      	bls.n	8002c14 <HAL_RCC_OscConfig+0x3bc>
 8002c26:	e65f      	b.n	80028e8 <HAL_RCC_OscConfig+0x90>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c28:	2a01      	cmp	r2, #1
 8002c2a:	f43f ae19 	beq.w	8002860 <HAL_RCC_OscConfig+0x8>
        pll_config = RCC->CFGR;
 8002c2e:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c32:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8002c36:	429a      	cmp	r2, r3
 8002c38:	f47f ae12 	bne.w	8002860 <HAL_RCC_OscConfig+0x8>
 8002c3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c3e:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8002c42:	1ac0      	subs	r0, r0, r3
 8002c44:	bf18      	it	ne
 8002c46:	2001      	movne	r0, #1
 8002c48:	e60b      	b.n	8002862 <HAL_RCC_OscConfig+0xa>
 8002c4a:	bf00      	nop
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	42420068 	.word	0x42420068
 8002c54:	42420060 	.word	0x42420060

08002c58 <HAL_RCC_GetSysClockFreq>:
{
 8002c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c5a:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8002c5c:	466a      	mov	r2, sp
 8002c5e:	4b2c      	ldr	r3, [pc, #176]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c60:	f103 0508 	add.w	r5, r3, #8
 8002c64:	4614      	mov	r4, r2
 8002c66:	6818      	ldr	r0, [r3, #0]
 8002c68:	6859      	ldr	r1, [r3, #4]
 8002c6a:	3308      	adds	r3, #8
 8002c6c:	c403      	stmia	r4!, {r0, r1}
 8002c6e:	42ab      	cmp	r3, r5
 8002c70:	4622      	mov	r2, r4
 8002c72:	d1f7      	bne.n	8002c64 <HAL_RCC_GetSysClockFreq+0xc>
 8002c74:	6818      	ldr	r0, [r3, #0]
 8002c76:	889b      	ldrh	r3, [r3, #4]
 8002c78:	6020      	str	r0, [r4, #0]
 8002c7a:	80a3      	strh	r3, [r4, #4]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8002c7c:	4b25      	ldr	r3, [pc, #148]	; (8002d14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c7e:	ac04      	add	r4, sp, #16
 8002c80:	f103 0510 	add.w	r5, r3, #16
 8002c84:	4622      	mov	r2, r4
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	6859      	ldr	r1, [r3, #4]
 8002c8a:	3308      	adds	r3, #8
 8002c8c:	c203      	stmia	r2!, {r0, r1}
 8002c8e:	42ab      	cmp	r3, r5
 8002c90:	4614      	mov	r4, r2
 8002c92:	d1f7      	bne.n	8002c84 <HAL_RCC_GetSysClockFreq+0x2c>
  tmpreg = RCC->CFGR;
 8002c94:	4920      	ldr	r1, [pc, #128]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c96:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002c98:	f003 020c 	and.w	r2, r3, #12
 8002c9c:	2a04      	cmp	r2, #4
 8002c9e:	d035      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0xb4>
 8002ca0:	2a08      	cmp	r2, #8
 8002ca2:	d002      	beq.n	8002caa <HAL_RCC_GetSysClockFreq+0x52>
      sysclockfreq = HSI_VALUE;
 8002ca4:	481d      	ldr	r0, [pc, #116]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xc4>)
}
 8002ca6:	b009      	add	sp, #36	; 0x24
 8002ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002caa:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002cae:	a808      	add	r0, sp, #32
 8002cb0:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cb2:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cb4:	f812 6c20 	ldrb.w	r6, [r2, #-32]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cb8:	d525      	bpl.n	8002d06 <HAL_RCC_GetSysClockFreq+0xae>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002cba:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	4403      	add	r3, r0
 8002cc2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002cc6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8002cc8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002ccc:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002cce:	d015      	beq.n	8002cfc <HAL_RCC_GetSysClockFreq+0xa4>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002cd0:	6acf      	ldr	r7, [r1, #44]	; 0x2c
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002cd2:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8002cd4:	f3c4 2403 	ubfx	r4, r4, #8, #4
 8002cd8:	3402      	adds	r4, #2
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8002cda:	fba4 4506 	umull	r4, r5, r4, r6
 8002cde:	fba4 0103 	umull	r0, r1, r4, r3
 8002ce2:	fb03 1105 	mla	r1, r3, r5, r1
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002ce6:	f3c7 1303 	ubfx	r3, r7, #4, #4
 8002cea:	3301      	adds	r3, #1
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8002cec:	fba3 2302 	umull	r2, r3, r3, r2
 8002cf0:	f7fd ffa6 	bl	8000c40 <__aeabi_uldivmod>
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002cf4:	2e0d      	cmp	r6, #13
 8002cf6:	d1d6      	bne.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x4e>
          pllclk = pllclk / 2;
 8002cf8:	0840      	lsrs	r0, r0, #1
 8002cfa:	e7d4      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x4e>
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002cfc:	fb03 f006 	mul.w	r0, r3, r6
 8002d00:	fbb0 f0f2 	udiv	r0, r0, r2
 8002d04:	e7f6      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x9c>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d06:	4807      	ldr	r0, [pc, #28]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d08:	4370      	muls	r0, r6
 8002d0a:	e7cc      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
 8002d0c:	4804      	ldr	r0, [pc, #16]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xc8>)
  return sysclockfreq;
 8002d0e:	e7ca      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x4e>
 8002d10:	0800d0b8 	.word	0x0800d0b8
 8002d14:	0800d0c6 	.word	0x0800d0c6
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	007a1200 	.word	0x007a1200
 8002d20:	017d7840 	.word	0x017d7840
 8002d24:	003d0900 	.word	0x003d0900

08002d28 <HAL_RCC_ClockConfig>:
{
 8002d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d2c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002d2e:	4604      	mov	r4, r0
 8002d30:	b910      	cbnz	r0, 8002d38 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002d32:	2001      	movs	r0, #1
}
 8002d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d38:	4a44      	ldr	r2, [pc, #272]	; (8002e4c <HAL_RCC_ClockConfig+0x124>)
 8002d3a:	6813      	ldr	r3, [r2, #0]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	428b      	cmp	r3, r1
 8002d42:	d328      	bcc.n	8002d96 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d44:	6821      	ldr	r1, [r4, #0]
 8002d46:	078e      	lsls	r6, r1, #30
 8002d48:	d430      	bmi.n	8002dac <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d4a:	07ca      	lsls	r2, r1, #31
 8002d4c:	d443      	bmi.n	8002dd6 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d4e:	4a3f      	ldr	r2, [pc, #252]	; (8002e4c <HAL_RCC_ClockConfig+0x124>)
 8002d50:	6813      	ldr	r3, [r2, #0]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	42ab      	cmp	r3, r5
 8002d58:	d865      	bhi.n	8002e26 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5a:	6822      	ldr	r2, [r4, #0]
 8002d5c:	4d3c      	ldr	r5, [pc, #240]	; (8002e50 <HAL_RCC_ClockConfig+0x128>)
 8002d5e:	f012 0f04 	tst.w	r2, #4
 8002d62:	d16c      	bne.n	8002e3e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d64:	0713      	lsls	r3, r2, #28
 8002d66:	d506      	bpl.n	8002d76 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d68:	686b      	ldr	r3, [r5, #4]
 8002d6a:	6922      	ldr	r2, [r4, #16]
 8002d6c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002d70:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002d74:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d76:	f7ff ff6f 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002d7a:	686b      	ldr	r3, [r5, #4]
 8002d7c:	4a35      	ldr	r2, [pc, #212]	; (8002e54 <HAL_RCC_ClockConfig+0x12c>)
 8002d7e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002d82:	5cd3      	ldrb	r3, [r2, r3]
 8002d84:	40d8      	lsrs	r0, r3
 8002d86:	4b34      	ldr	r3, [pc, #208]	; (8002e58 <HAL_RCC_ClockConfig+0x130>)
 8002d88:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002d8a:	4b34      	ldr	r3, [pc, #208]	; (8002e5c <HAL_RCC_ClockConfig+0x134>)
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	f7fe fd9b 	bl	80018c8 <HAL_InitTick>
  return HAL_OK;
 8002d92:	2000      	movs	r0, #0
 8002d94:	e7ce      	b.n	8002d34 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d96:	6813      	ldr	r3, [r2, #0]
 8002d98:	f023 0307 	bic.w	r3, r3, #7
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da0:	6813      	ldr	r3, [r2, #0]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	428b      	cmp	r3, r1
 8002da8:	d1c3      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xa>
 8002daa:	e7cb      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1c>
 8002dac:	4b28      	ldr	r3, [pc, #160]	; (8002e50 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dae:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002db2:	bf1e      	ittt	ne
 8002db4:	685a      	ldrne	r2, [r3, #4]
 8002db6:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8002dba:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dbc:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dbe:	bf42      	ittt	mi
 8002dc0:	685a      	ldrmi	r2, [r3, #4]
 8002dc2:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002dc6:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	68a0      	ldr	r0, [r4, #8]
 8002dcc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002dd0:	4302      	orrs	r2, r0
 8002dd2:	605a      	str	r2, [r3, #4]
 8002dd4:	e7b9      	b.n	8002d4a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd6:	6862      	ldr	r2, [r4, #4]
 8002dd8:	4e1d      	ldr	r6, [pc, #116]	; (8002e50 <HAL_RCC_ClockConfig+0x128>)
 8002dda:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ddc:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dde:	d11a      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de4:	d0a5      	beq.n	8002d32 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002de6:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dec:	f023 0303 	bic.w	r3, r3, #3
 8002df0:	4313      	orrs	r3, r2
 8002df2:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002df4:	f7fe fdaa 	bl	800194c <HAL_GetTick>
 8002df8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfa:	6873      	ldr	r3, [r6, #4]
 8002dfc:	6862      	ldr	r2, [r4, #4]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002e06:	d0a2      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e08:	f7fe fda0 	bl	800194c <HAL_GetTick>
 8002e0c:	1bc0      	subs	r0, r0, r7
 8002e0e:	4540      	cmp	r0, r8
 8002e10:	d9f3      	bls.n	8002dfa <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8002e12:	2003      	movs	r0, #3
 8002e14:	e78e      	b.n	8002d34 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e16:	2a02      	cmp	r2, #2
 8002e18:	d102      	bne.n	8002e20 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e1a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e1e:	e7e1      	b.n	8002de4 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e20:	f013 0f02 	tst.w	r3, #2
 8002e24:	e7de      	b.n	8002de4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	6813      	ldr	r3, [r2, #0]
 8002e28:	f023 0307 	bic.w	r3, r3, #7
 8002e2c:	432b      	orrs	r3, r5
 8002e2e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e30:	6813      	ldr	r3, [r2, #0]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	42ab      	cmp	r3, r5
 8002e38:	f47f af7b 	bne.w	8002d32 <HAL_RCC_ClockConfig+0xa>
 8002e3c:	e78d      	b.n	8002d5a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e3e:	686b      	ldr	r3, [r5, #4]
 8002e40:	68e1      	ldr	r1, [r4, #12]
 8002e42:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e46:	430b      	orrs	r3, r1
 8002e48:	606b      	str	r3, [r5, #4]
 8002e4a:	e78b      	b.n	8002d64 <HAL_RCC_ClockConfig+0x3c>
 8002e4c:	40022000 	.word	0x40022000
 8002e50:	40021000 	.word	0x40021000
 8002e54:	0800d236 	.word	0x0800d236
 8002e58:	20000000 	.word	0x20000000
 8002e5c:	20000008 	.word	0x20000008

08002e60 <HAL_RCC_GetHCLKFreq>:
}
 8002e60:	4b01      	ldr	r3, [pc, #4]	; (8002e68 <HAL_RCC_GetHCLKFreq+0x8>)
 8002e62:	6818      	ldr	r0, [r3, #0]
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	20000000 	.word	0x20000000

08002e6c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e6c:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002e6e:	4a05      	ldr	r2, [pc, #20]	; (8002e84 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002e76:	5cd3      	ldrb	r3, [r2, r3]
 8002e78:	4a03      	ldr	r2, [pc, #12]	; (8002e88 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002e7a:	6810      	ldr	r0, [r2, #0]
}
 8002e7c:	40d8      	lsrs	r0, r3
 8002e7e:	4770      	bx	lr
 8002e80:	40021000 	.word	0x40021000
 8002e84:	0800d246 	.word	0x0800d246
 8002e88:	20000000 	.word	0x20000000

08002e8c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e8c:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002e8e:	4a05      	ldr	r2, [pc, #20]	; (8002ea4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002e96:	5cd3      	ldrb	r3, [r2, r3]
 8002e98:	4a03      	ldr	r2, [pc, #12]	; (8002ea8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002e9a:	6810      	ldr	r0, [r2, #0]
}
 8002e9c:	40d8      	lsrs	r0, r3
 8002e9e:	4770      	bx	lr
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	0800d246 	.word	0x0800d246
 8002ea8:	20000000 	.word	0x20000000

08002eac <SPI_WaitFlagStateUntilTimeout.constprop.6>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002eac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002eb0:	461c      	mov	r4, r3
 8002eb2:	4616      	mov	r6, r2
 8002eb4:	460f      	mov	r7, r1
 8002eb6:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002eb8:	f7fe fd48 	bl	800194c <HAL_GetTick>
 8002ebc:	4434      	add	r4, r6
 8002ebe:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8002ec0:	f7fe fd44 	bl	800194c <HAL_GetTick>
 8002ec4:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ec6:	4b23      	ldr	r3, [pc, #140]	; (8002f54 <SPI_WaitFlagStateUntilTimeout.constprop.6+0xa8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8002ece:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ed0:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8002ed2:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ed4:	6893      	ldr	r3, [r2, #8]
 8002ed6:	ea37 0303 	bics.w	r3, r7, r3
 8002eda:	d001      	beq.n	8002ee0 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x34>
    }
  }

  return HAL_OK;
 8002edc:	2000      	movs	r0, #0
 8002ede:	e02e      	b.n	8002f3e <SPI_WaitFlagStateUntilTimeout.constprop.6+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8002ee0:	1c73      	adds	r3, r6, #1
 8002ee2:	d0f7      	beq.n	8002ed4 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ee4:	f7fe fd32 	bl	800194c <HAL_GetTick>
 8002ee8:	eba0 0008 	sub.w	r0, r0, r8
 8002eec:	42a0      	cmp	r0, r4
 8002eee:	d329      	bcc.n	8002f44 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ef0:	682b      	ldr	r3, [r5, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ef8:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002efa:	686a      	ldr	r2, [r5, #4]
 8002efc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002f00:	d10a      	bne.n	8002f18 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x6c>
 8002f02:	68aa      	ldr	r2, [r5, #8]
 8002f04:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002f08:	d002      	beq.n	8002f10 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f0a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002f0e:	d103      	bne.n	8002f18 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f16:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f18:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002f1a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002f1e:	d107      	bne.n	8002f30 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x84>
          SPI_RESET_CRC(hspi);
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f2e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002f30:	2301      	movs	r3, #1
 8002f32:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002f36:	2300      	movs	r3, #0
 8002f38:	2003      	movs	r0, #3
 8002f3a:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8002f3e:	b002      	add	sp, #8
 8002f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 8002f44:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002f46:	2b00      	cmp	r3, #0
      count--;
 8002f48:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002f4a:	bf08      	it	eq
 8002f4c:	2400      	moveq	r4, #0
      count--;
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	e7be      	b.n	8002ed0 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x24>
 8002f52:	bf00      	nop
 8002f54:	20000000 	.word	0x20000000

08002f58 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002f58:	b538      	push	{r3, r4, r5, lr}
 8002f5a:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f5c:	6842      	ldr	r2, [r0, #4]
{
 8002f5e:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f60:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002f64:	d116      	bne.n	8002f94 <SPI_EndRxTransaction+0x3c>
 8002f66:	6880      	ldr	r0, [r0, #8]
 8002f68:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002f6c:	d002      	beq.n	8002f74 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f6e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8002f72:	d10f      	bne.n	8002f94 <SPI_EndRxTransaction+0x3c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002f74:	6822      	ldr	r2, [r4, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002f76:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 8002f7a:	6815      	ldr	r5, [r2, #0]
 8002f7c:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 8002f80:	6015      	str	r5, [r2, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002f82:	d107      	bne.n	8002f94 <SPI_EndRxTransaction+0x3c>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f84:	460a      	mov	r2, r1
 8002f86:	2101      	movs	r1, #1
 8002f88:	4620      	mov	r0, r4
 8002f8a:	f7ff ff8f 	bl	8002eac <SPI_WaitFlagStateUntilTimeout.constprop.6>
 8002f8e:	b920      	cbnz	r0, 8002f9a <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8002f90:	2000      	movs	r0, #0
}
 8002f92:	bd38      	pop	{r3, r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f94:	460a      	mov	r2, r1
 8002f96:	2180      	movs	r1, #128	; 0x80
 8002f98:	e7f6      	b.n	8002f88 <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f9c:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f9e:	f043 0320 	orr.w	r3, r3, #32
 8002fa2:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002fa4:	e7f5      	b.n	8002f92 <SPI_EndRxTransaction+0x3a>

08002fa6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa6:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fa8:	4613      	mov	r3, r2
 8002faa:	460a      	mov	r2, r1
 8002fac:	2180      	movs	r1, #128	; 0x80
{
 8002fae:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fb0:	f7ff ff7c 	bl	8002eac <SPI_WaitFlagStateUntilTimeout.constprop.6>
 8002fb4:	b120      	cbz	r0, 8002fc0 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8002fb6:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fb8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002fba:	f043 0320 	orr.w	r3, r3, #32
 8002fbe:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8002fc0:	bd10      	pop	{r4, pc}

08002fc2 <HAL_SPI_Init>:
{
 8002fc2:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8002fc4:	4604      	mov	r4, r0
 8002fc6:	2800      	cmp	r0, #0
 8002fc8:	d051      	beq.n	800306e <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d14a      	bne.n	8003066 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fd0:	6842      	ldr	r2, [r0, #4]
 8002fd2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002fd6:	d000      	beq.n	8002fda <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fd8:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fde:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002fe2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002fe6:	b923      	cbnz	r3, 8002ff2 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 8002fe8:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002fec:	4620      	mov	r0, r4
 8002fee:	f7fe fa95 	bl	800151c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002ff2:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002ff4:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002ff6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002ffa:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ffc:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8002ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003002:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003004:	6863      	ldr	r3, [r4, #4]
 8003006:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 800300a:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800300e:	4303      	orrs	r3, r0
 8003010:	68e0      	ldr	r0, [r4, #12]
 8003012:	69a1      	ldr	r1, [r4, #24]
 8003014:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8003018:	4303      	orrs	r3, r0
 800301a:	6920      	ldr	r0, [r4, #16]
 800301c:	f000 0002 	and.w	r0, r0, #2
 8003020:	4303      	orrs	r3, r0
 8003022:	6960      	ldr	r0, [r4, #20]
 8003024:	f000 0001 	and.w	r0, r0, #1
 8003028:	4303      	orrs	r3, r0
 800302a:	f401 7000 	and.w	r0, r1, #512	; 0x200
 800302e:	4303      	orrs	r3, r0
 8003030:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003032:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003034:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8003038:	4303      	orrs	r3, r0
 800303a:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800303c:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003040:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8003044:	4303      	orrs	r3, r0
 8003046:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003048:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 800304c:	4303      	orrs	r3, r0
 800304e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003050:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003052:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003054:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003056:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800305a:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 800305c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800305e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003060:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8003064:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003066:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003068:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800306c:	e7b5      	b.n	8002fda <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 800306e:	2001      	movs	r0, #1
 8003070:	e7f8      	b.n	8003064 <HAL_SPI_Init+0xa2>

08003072 <HAL_SPI_TransmitReceive>:
{
 8003072:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003076:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8003078:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800307c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800307e:	2b01      	cmp	r3, #1
{
 8003080:	460d      	mov	r5, r1
 8003082:	4691      	mov	r9, r2
 8003084:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8003086:	f000 80e2 	beq.w	800324e <HAL_SPI_TransmitReceive+0x1dc>
 800308a:	2301      	movs	r3, #1
 800308c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8003090:	f7fe fc5c 	bl	800194c <HAL_GetTick>
  tmp_state           = hspi->State;
 8003094:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8003098:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 800309a:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800309c:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 800309e:	6861      	ldr	r1, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030a0:	d00a      	beq.n	80030b8 <HAL_SPI_TransmitReceive+0x46>
 80030a2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80030a6:	f040 80d0 	bne.w	800324a <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030aa:	68a0      	ldr	r0, [r4, #8]
 80030ac:	2800      	cmp	r0, #0
 80030ae:	f040 80cc 	bne.w	800324a <HAL_SPI_TransmitReceive+0x1d8>
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	f040 80c9 	bne.w	800324a <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030b8:	2d00      	cmp	r5, #0
 80030ba:	f000 80c4 	beq.w	8003246 <HAL_SPI_TransmitReceive+0x1d4>
 80030be:	f1b9 0f00 	cmp.w	r9, #0
 80030c2:	f000 80c0 	beq.w	8003246 <HAL_SPI_TransmitReceive+0x1d4>
 80030c6:	2e00      	cmp	r6, #0
 80030c8:	f000 80bd 	beq.w	8003246 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030cc:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030d0:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030d4:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030d6:	bf1c      	itt	ne
 80030d8:	2305      	movne	r3, #5
 80030da:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030de:	2300      	movs	r3, #0
 80030e0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 80030e2:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030e6:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80030e8:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80030ea:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030ec:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 80030ee:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030f0:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80030f2:	bf58      	it	pl
 80030f4:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030f6:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 80030f8:	bf58      	it	pl
 80030fa:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 80030fe:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8003100:	bf58      	it	pl
 8003102:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003104:	68e2      	ldr	r2, [r4, #12]
 8003106:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800310a:	d158      	bne.n	80031be <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800310c:	b109      	cbz	r1, 8003112 <HAL_SPI_TransmitReceive+0xa0>
 800310e:	2e01      	cmp	r6, #1
 8003110:	d107      	bne.n	8003122 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003112:	f835 2b02 	ldrh.w	r2, [r5], #2
 8003116:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8003118:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800311a:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800311c:	3b01      	subs	r3, #1
 800311e:	b29b      	uxth	r3, r3
 8003120:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003122:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003124:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003126:	b29b      	uxth	r3, r3
 8003128:	b9ab      	cbnz	r3, 8003156 <HAL_SPI_TransmitReceive+0xe4>
 800312a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800312c:	b29b      	uxth	r3, r3
 800312e:	b993      	cbnz	r3, 8003156 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003130:	4642      	mov	r2, r8
 8003132:	4639      	mov	r1, r7
 8003134:	4620      	mov	r0, r4
 8003136:	f7ff ff36 	bl	8002fa6 <SPI_EndRxTxTransaction>
 800313a:	2800      	cmp	r0, #0
 800313c:	f040 8081 	bne.w	8003242 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003140:	68a3      	ldr	r3, [r4, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d132      	bne.n	80031ac <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	9001      	str	r0, [sp, #4]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	9201      	str	r2, [sp, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	9301      	str	r3, [sp, #4]
 8003152:	9b01      	ldr	r3, [sp, #4]
 8003154:	e02a      	b.n	80031ac <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003156:	6822      	ldr	r2, [r4, #0]
 8003158:	6893      	ldr	r3, [r2, #8]
 800315a:	0799      	lsls	r1, r3, #30
 800315c:	d50d      	bpl.n	800317a <HAL_SPI_TransmitReceive+0x108>
 800315e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003160:	b29b      	uxth	r3, r3
 8003162:	b153      	cbz	r3, 800317a <HAL_SPI_TransmitReceive+0x108>
 8003164:	b14d      	cbz	r5, 800317a <HAL_SPI_TransmitReceive+0x108>
        txallowed = 0U;
 8003166:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003168:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800316a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800316e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003170:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003172:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003174:	3b01      	subs	r3, #1
 8003176:	b29b      	uxth	r3, r3
 8003178:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800317a:	6893      	ldr	r3, [r2, #8]
 800317c:	07db      	lsls	r3, r3, #31
 800317e:	d50c      	bpl.n	800319a <HAL_SPI_TransmitReceive+0x128>
 8003180:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003182:	b29b      	uxth	r3, r3
 8003184:	b14b      	cbz	r3, 800319a <HAL_SPI_TransmitReceive+0x128>
        txallowed = 1U;
 8003186:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003188:	68d2      	ldr	r2, [r2, #12]
 800318a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800318c:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003190:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003192:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003194:	3b01      	subs	r3, #1
 8003196:	b29b      	uxth	r3, r3
 8003198:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800319a:	f7fe fbd7 	bl	800194c <HAL_GetTick>
 800319e:	eba0 0008 	sub.w	r0, r0, r8
 80031a2:	4287      	cmp	r7, r0
 80031a4:	d8be      	bhi.n	8003124 <HAL_SPI_TransmitReceive+0xb2>
 80031a6:	1c7e      	adds	r6, r7, #1
 80031a8:	d0bc      	beq.n	8003124 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 80031aa:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80031ac:	2301      	movs	r3, #1
 80031ae:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80031b2:	2300      	movs	r3, #0
 80031b4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80031b8:	b003      	add	sp, #12
 80031ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031be:	b109      	cbz	r1, 80031c4 <HAL_SPI_TransmitReceive+0x152>
 80031c0:	2e01      	cmp	r6, #1
 80031c2:	d108      	bne.n	80031d6 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031c4:	782a      	ldrb	r2, [r5, #0]
 80031c6:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80031ca:	3301      	adds	r3, #1
 80031cc:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80031ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80031d6:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031d8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80031da:	b29b      	uxth	r3, r3
 80031dc:	b91b      	cbnz	r3, 80031e6 <HAL_SPI_TransmitReceive+0x174>
 80031de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0a4      	beq.n	8003130 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031e6:	6822      	ldr	r2, [r4, #0]
 80031e8:	6893      	ldr	r3, [r2, #8]
 80031ea:	0798      	lsls	r0, r3, #30
 80031ec:	d50e      	bpl.n	800320c <HAL_SPI_TransmitReceive+0x19a>
 80031ee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	b15b      	cbz	r3, 800320c <HAL_SPI_TransmitReceive+0x19a>
 80031f4:	b155      	cbz	r5, 800320c <HAL_SPI_TransmitReceive+0x19a>
        txallowed = 0U;
 80031f6:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80031fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003200:	3301      	adds	r3, #1
 8003202:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003204:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003206:	3b01      	subs	r3, #1
 8003208:	b29b      	uxth	r3, r3
 800320a:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800320c:	6822      	ldr	r2, [r4, #0]
 800320e:	6893      	ldr	r3, [r2, #8]
 8003210:	07d9      	lsls	r1, r3, #31
 8003212:	d50d      	bpl.n	8003230 <HAL_SPI_TransmitReceive+0x1be>
 8003214:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003216:	b29b      	uxth	r3, r3
 8003218:	b153      	cbz	r3, 8003230 <HAL_SPI_TransmitReceive+0x1be>
        txallowed = 1U;
 800321a:	2501      	movs	r5, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800321c:	68d2      	ldr	r2, [r2, #12]
 800321e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003220:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003222:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003224:	3301      	adds	r3, #1
 8003226:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003228:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800322a:	3b01      	subs	r3, #1
 800322c:	b29b      	uxth	r3, r3
 800322e:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003230:	f7fe fb8c 	bl	800194c <HAL_GetTick>
 8003234:	eba0 0008 	sub.w	r0, r0, r8
 8003238:	4287      	cmp	r7, r0
 800323a:	d8cd      	bhi.n	80031d8 <HAL_SPI_TransmitReceive+0x166>
 800323c:	1c7b      	adds	r3, r7, #1
 800323e:	d0cb      	beq.n	80031d8 <HAL_SPI_TransmitReceive+0x166>
 8003240:	e7b3      	b.n	80031aa <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003242:	2320      	movs	r3, #32
 8003244:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003246:	2001      	movs	r0, #1
 8003248:	e7b0      	b.n	80031ac <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 800324a:	2002      	movs	r0, #2
 800324c:	e7ae      	b.n	80031ac <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 800324e:	2002      	movs	r0, #2
 8003250:	e7b2      	b.n	80031b8 <HAL_SPI_TransmitReceive+0x146>
	...

08003254 <HAL_SPI_TransmitReceive_DMA>:
{
 8003254:	b538      	push	{r3, r4, r5, lr}
 8003256:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8003258:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 800325c:	2801      	cmp	r0, #1
 800325e:	d071      	beq.n	8003344 <HAL_SPI_TransmitReceive_DMA+0xf0>
 8003260:	2001      	movs	r0, #1
 8003262:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  tmp_state           = hspi->State;
 8003266:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800326a:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800326c:	2801      	cmp	r0, #1
 800326e:	d008      	beq.n	8003282 <HAL_SPI_TransmitReceive_DMA+0x2e>
 8003270:	6865      	ldr	r5, [r4, #4]
 8003272:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 8003276:	d161      	bne.n	800333c <HAL_SPI_TransmitReceive_DMA+0xe8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003278:	68a5      	ldr	r5, [r4, #8]
 800327a:	2d00      	cmp	r5, #0
 800327c:	d15e      	bne.n	800333c <HAL_SPI_TransmitReceive_DMA+0xe8>
 800327e:	2804      	cmp	r0, #4
 8003280:	d15c      	bne.n	800333c <HAL_SPI_TransmitReceive_DMA+0xe8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003282:	2900      	cmp	r1, #0
 8003284:	d05c      	beq.n	8003340 <HAL_SPI_TransmitReceive_DMA+0xec>
 8003286:	2a00      	cmp	r2, #0
 8003288:	d05a      	beq.n	8003340 <HAL_SPI_TransmitReceive_DMA+0xec>
 800328a:	2b00      	cmp	r3, #0
 800328c:	d058      	beq.n	8003340 <HAL_SPI_TransmitReceive_DMA+0xec>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800328e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  hspi->TxXferSize  = Size;
 8003292:	86a3      	strh	r3, [r4, #52]	; 0x34
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003294:	2804      	cmp	r0, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003296:	bf1c      	itt	ne
 8003298:	2005      	movne	r0, #5
 800329a:	f884 0051 	strbne.w	r0, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800329e:	2000      	movs	r0, #0
 80032a0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->TxXferCount = Size;
 80032a2:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxXferCount = Size;
 80032a4:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80032a6:	87a3      	strh	r3, [r4, #60]	; 0x3c
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80032a8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->TxISR       = NULL;
 80032ac:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80032b4:	bf0c      	ite	eq
 80032b6:	4b24      	ldreq	r3, [pc, #144]	; (8003348 <HAL_SPI_TransmitReceive_DMA+0xf4>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80032b8:	4b24      	ldrne	r3, [pc, #144]	; (800334c <HAL_SPI_TransmitReceive_DMA+0xf8>)
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80032ba:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032bc:	63a2      	str	r2, [r4, #56]	; 0x38
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80032be:	bf0b      	itete	eq
 80032c0:	62c3      	streq	r3, [r0, #44]	; 0x2c
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80032c2:	62c3      	strne	r3, [r0, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80032c4:	4b22      	ldreq	r3, [pc, #136]	; (8003350 <HAL_SPI_TransmitReceive_DMA+0xfc>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80032c6:	4b23      	ldrne	r3, [pc, #140]	; (8003354 <HAL_SPI_TransmitReceive_DMA+0x100>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80032c8:	6821      	ldr	r1, [r4, #0]
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80032ca:	6283      	str	r3, [r0, #40]	; 0x28
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80032cc:	4b22      	ldr	r3, [pc, #136]	; (8003358 <HAL_SPI_TransmitReceive_DMA+0x104>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80032ce:	310c      	adds	r1, #12
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80032d0:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmarx->XferAbortCallback = NULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	6343      	str	r3, [r0, #52]	; 0x34
                                 hspi->RxXferCount))
 80032d6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80032d8:	f7fe fbfa 	bl	8001ad0 <HAL_DMA_Start_IT>
 80032dc:	4603      	mov	r3, r0
 80032de:	b150      	cbz	r0, 80032f6 <HAL_SPI_TransmitReceive_DMA+0xa2>
    hspi->State = HAL_SPI_STATE_READY;
 80032e0:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80032e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80032e4:	f043 0310 	orr.w	r3, r3, #16
 80032e8:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 80032ea:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80032ee:	2300      	movs	r3, #0
 80032f0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80032f4:	bd38      	pop	{r3, r4, r5, pc}
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80032f6:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80032f8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80032fa:	6851      	ldr	r1, [r2, #4]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80032fc:	320c      	adds	r2, #12
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80032fe:	f041 0101 	orr.w	r1, r1, #1
 8003302:	f842 1c08 	str.w	r1, [r2, #-8]
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003306:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hspi->hdmatx->XferAbortCallback    = NULL;
 800330a:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800330e:	6b21      	ldr	r1, [r4, #48]	; 0x30
                                 hspi->TxXferCount))
 8003310:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003312:	f7fe fbdd 	bl	8001ad0 <HAL_DMA_Start_IT>
 8003316:	2800      	cmp	r0, #0
 8003318:	d1e2      	bne.n	80032e0 <HAL_SPI_TransmitReceive_DMA+0x8c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800331a:	6823      	ldr	r3, [r4, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8003320:	bf5e      	ittt	pl
 8003322:	681a      	ldrpl	r2, [r3, #0]
 8003324:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8003328:	601a      	strpl	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	f042 0220 	orr.w	r2, r2, #32
 8003330:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	f042 0202 	orr.w	r2, r2, #2
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	e7d8      	b.n	80032ee <HAL_SPI_TransmitReceive_DMA+0x9a>
    errorcode = HAL_BUSY;
 800333c:	2002      	movs	r0, #2
 800333e:	e7d6      	b.n	80032ee <HAL_SPI_TransmitReceive_DMA+0x9a>
    errorcode = HAL_ERROR;
 8003340:	2001      	movs	r0, #1
 8003342:	e7d4      	b.n	80032ee <HAL_SPI_TransmitReceive_DMA+0x9a>
  __HAL_LOCK(hspi);
 8003344:	2002      	movs	r0, #2
 8003346:	e7d5      	b.n	80032f4 <HAL_SPI_TransmitReceive_DMA+0xa0>
 8003348:	0800343f 	.word	0x0800343f
 800334c:	0800344b 	.word	0x0800344b
 8003350:	08003479 	.word	0x08003479
 8003354:	080034df 	.word	0x080034df
 8003358:	08003457 	.word	0x08003457

0800335c <HAL_SPI_Receive_DMA>:
{
 800335c:	4613      	mov	r3, r2
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800335e:	6882      	ldr	r2, [r0, #8]
{
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	4604      	mov	r4, r0
 8003364:	460d      	mov	r5, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003366:	b95a      	cbnz	r2, 8003380 <HAL_SPI_Receive_DMA+0x24>
 8003368:	6846      	ldr	r6, [r0, #4]
 800336a:	f5b6 7f82 	cmp.w	r6, #260	; 0x104
 800336e:	d107      	bne.n	8003380 <HAL_SPI_Receive_DMA+0x24>
}
 8003370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003374:	2204      	movs	r2, #4
 8003376:	f880 2051 	strb.w	r2, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800337a:	460a      	mov	r2, r1
 800337c:	f7ff bf6a 	b.w	8003254 <HAL_SPI_TransmitReceive_DMA>
  __HAL_LOCK(hspi);
 8003380:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
 8003384:	2901      	cmp	r1, #1
 8003386:	d050      	beq.n	800342a <HAL_SPI_Receive_DMA+0xce>
 8003388:	2101      	movs	r1, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 800338a:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  __HAL_LOCK(hspi);
 800338e:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 8003392:	b2c0      	uxtb	r0, r0
 8003394:	4288      	cmp	r0, r1
 8003396:	d146      	bne.n	8003426 <HAL_SPI_Receive_DMA+0xca>
  if ((pData == NULL) || (Size == 0U))
 8003398:	2d00      	cmp	r5, #0
 800339a:	d02f      	beq.n	80033fc <HAL_SPI_Receive_DMA+0xa0>
 800339c:	2b00      	cmp	r3, #0
 800339e:	d02d      	beq.n	80033fc <HAL_SPI_Receive_DMA+0xa0>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80033a0:	2104      	movs	r1, #4
 80033a2:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033a6:	2100      	movs	r1, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033a8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033ac:	6561      	str	r1, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 80033ae:	e9c4 1110 	strd	r1, r1, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80033b2:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 80033b4:	86a1      	strh	r1, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80033b6:	86e1      	strh	r1, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80033b8:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80033ba:	87a3      	strh	r3, [r4, #60]	; 0x3c
 80033bc:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033be:	d107      	bne.n	80033d0 <HAL_SPI_Receive_DMA+0x74>
    __HAL_SPI_DISABLE(hspi);
 80033c0:	680b      	ldr	r3, [r1, #0]
 80033c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033c6:	600b      	str	r3, [r1, #0]
    SPI_1LINE_RX(hspi);
 80033c8:	680b      	ldr	r3, [r1, #0]
 80033ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033ce:	600b      	str	r3, [r1, #0]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80033d0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80033d2:	4b17      	ldr	r3, [pc, #92]	; (8003430 <HAL_SPI_Receive_DMA+0xd4>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80033d4:	462a      	mov	r2, r5
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80033d6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80033d8:	4b16      	ldr	r3, [pc, #88]	; (8003434 <HAL_SPI_Receive_DMA+0xd8>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80033da:	310c      	adds	r1, #12
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80033dc:	6283      	str	r3, [r0, #40]	; 0x28
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80033de:	4b16      	ldr	r3, [pc, #88]	; (8003438 <HAL_SPI_Receive_DMA+0xdc>)
 80033e0:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmarx->XferAbortCallback = NULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	6343      	str	r3, [r0, #52]	; 0x34
                                 hspi->RxXferCount))
 80033e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80033e8:	f7fe fb72 	bl	8001ad0 <HAL_DMA_Start_IT>
 80033ec:	b150      	cbz	r0, 8003404 <HAL_SPI_Receive_DMA+0xa8>
    hspi->State = HAL_SPI_STATE_READY;
 80033ee:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80033f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80033f2:	f043 0310 	orr.w	r3, r3, #16
 80033f6:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 80033f8:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033fc:	2300      	movs	r3, #0
 80033fe:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003402:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800340a:	bf5e      	ittt	pl
 800340c:	681a      	ldrpl	r2, [r3, #0]
 800340e:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8003412:	601a      	strpl	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	f042 0220 	orr.w	r2, r2, #32
 800341a:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	605a      	str	r2, [r3, #4]
 8003424:	e7ea      	b.n	80033fc <HAL_SPI_Receive_DMA+0xa0>
    errorcode = HAL_BUSY;
 8003426:	2002      	movs	r0, #2
 8003428:	e7e8      	b.n	80033fc <HAL_SPI_Receive_DMA+0xa0>
  __HAL_LOCK(hspi);
 800342a:	2002      	movs	r0, #2
 800342c:	e7e9      	b.n	8003402 <HAL_SPI_Receive_DMA+0xa6>
 800342e:	bf00      	nop
 8003430:	0800343f 	.word	0x0800343f
 8003434:	08003479 	.word	0x08003479
 8003438:	08003457 	.word	0x08003457

0800343c <HAL_SPI_TxRxCpltCallback>:
 800343c:	4770      	bx	lr

0800343e <SPI_DMAHalfReceiveCplt>:
{
 800343e:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003440:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003442:	f7fd fe91 	bl	8001168 <HAL_SPI_RxHalfCpltCallback>
}
 8003446:	bd08      	pop	{r3, pc}

08003448 <HAL_SPI_TxRxHalfCpltCallback>:
 8003448:	4770      	bx	lr

0800344a <SPI_DMAHalfTransmitReceiveCplt>:
{
 800344a:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800344c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800344e:	f7ff fffb 	bl	8003448 <HAL_SPI_TxRxHalfCpltCallback>
}
 8003452:	bd08      	pop	{r3, pc}

08003454 <HAL_SPI_ErrorCallback>:
 8003454:	4770      	bx	lr

08003456 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003456:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8003458:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800345a:	6802      	ldr	r2, [r0, #0]
 800345c:	6853      	ldr	r3, [r2, #4]
 800345e:	f023 0303 	bic.w	r3, r3, #3
 8003462:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003464:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003466:	f043 0310 	orr.w	r3, r3, #16
 800346a:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800346c:	2301      	movs	r3, #1
 800346e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 8003472:	f7ff ffef 	bl	8003454 <HAL_SPI_ErrorCallback>
}
 8003476:	bd08      	pop	{r3, pc}

08003478 <SPI_DMAReceiveCplt>:
{
 8003478:	b538      	push	{r3, r4, r5, lr}
 800347a:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800347c:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 800347e:	f7fe fa65 	bl	800194c <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003482:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8003484:	4602      	mov	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	069b      	lsls	r3, r3, #26
 800348a:	d424      	bmi.n	80034d6 <SPI_DMAReceiveCplt+0x5e>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800348c:	6823      	ldr	r3, [r4, #0]
 800348e:	6859      	ldr	r1, [r3, #4]
 8003490:	f021 0120 	bic.w	r1, r1, #32
 8003494:	6059      	str	r1, [r3, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003496:	68a1      	ldr	r1, [r4, #8]
 8003498:	b9c9      	cbnz	r1, 80034ce <SPI_DMAReceiveCplt+0x56>
 800349a:	6861      	ldr	r1, [r4, #4]
 800349c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80034a0:	d115      	bne.n	80034ce <SPI_DMAReceiveCplt+0x56>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80034a2:	6859      	ldr	r1, [r3, #4]
 80034a4:	f021 0103 	bic.w	r1, r1, #3
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80034a8:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80034aa:	4620      	mov	r0, r4
 80034ac:	2164      	movs	r1, #100	; 0x64
 80034ae:	f7ff fd53 	bl	8002f58 <SPI_EndRxTransaction>
 80034b2:	b108      	cbz	r0, 80034b8 <SPI_DMAReceiveCplt+0x40>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034b4:	2320      	movs	r3, #32
 80034b6:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->RxXferCount = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80034bc:	2301      	movs	r3, #1
 80034be:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80034c4:	b13b      	cbz	r3, 80034d6 <SPI_DMAReceiveCplt+0x5e>
      HAL_SPI_ErrorCallback(hspi);
 80034c6:	4620      	mov	r0, r4
 80034c8:	f7ff ffc4 	bl	8003454 <HAL_SPI_ErrorCallback>
}
 80034cc:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80034ce:	6859      	ldr	r1, [r3, #4]
 80034d0:	f021 0101 	bic.w	r1, r1, #1
 80034d4:	e7e8      	b.n	80034a8 <SPI_DMAReceiveCplt+0x30>
  HAL_SPI_RxCpltCallback(hspi);
 80034d6:	4620      	mov	r0, r4
 80034d8:	f7fd fe5c 	bl	8001194 <HAL_SPI_RxCpltCallback>
 80034dc:	e7f6      	b.n	80034cc <SPI_DMAReceiveCplt+0x54>

080034de <SPI_DMATransmitReceiveCplt>:
{
 80034de:	b538      	push	{r3, r4, r5, lr}
 80034e0:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80034e2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 80034e4:	f7fe fa32 	bl	800194c <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80034e8:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80034ea:	4602      	mov	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	069b      	lsls	r3, r3, #26
 80034f0:	d41e      	bmi.n	8003530 <SPI_DMATransmitReceiveCplt+0x52>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80034f2:	6821      	ldr	r1, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80034f4:	4620      	mov	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80034f6:	684b      	ldr	r3, [r1, #4]
 80034f8:	f023 0320 	bic.w	r3, r3, #32
 80034fc:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80034fe:	2164      	movs	r1, #100	; 0x64
 8003500:	f7ff fd51 	bl	8002fa6 <SPI_EndRxTxTransaction>
 8003504:	b118      	cbz	r0, 800350e <SPI_DMATransmitReceiveCplt+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003506:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003508:	f043 0320 	orr.w	r3, r3, #32
 800350c:	6563      	str	r3, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800350e:	6822      	ldr	r2, [r4, #0]
 8003510:	6853      	ldr	r3, [r2, #4]
 8003512:	f023 0303 	bic.w	r3, r3, #3
 8003516:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800351c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800351e:	2301      	movs	r3, #1
 8003520:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003524:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003526:	b11b      	cbz	r3, 8003530 <SPI_DMATransmitReceiveCplt+0x52>
      HAL_SPI_ErrorCallback(hspi);
 8003528:	4620      	mov	r0, r4
 800352a:	f7ff ff93 	bl	8003454 <HAL_SPI_ErrorCallback>
}
 800352e:	bd38      	pop	{r3, r4, r5, pc}
  HAL_SPI_TxRxCpltCallback(hspi);
 8003530:	4620      	mov	r0, r4
 8003532:	f7ff ff83 	bl	800343c <HAL_SPI_TxRxCpltCallback>
 8003536:	e7fa      	b.n	800352e <SPI_DMATransmitReceiveCplt+0x50>

08003538 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003538:	6803      	ldr	r3, [r0, #0]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003540:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	695a      	ldr	r2, [r3, #20]
 8003544:	f022 0201 	bic.w	r2, r2, #1
 8003548:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800354a:	2320      	movs	r3, #32
 800354c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8003550:	4770      	bx	lr
	...

08003554 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003554:	b510      	push	{r4, lr}
 8003556:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003558:	6803      	ldr	r3, [r0, #0]
 800355a:	68c1      	ldr	r1, [r0, #12]
 800355c:	691a      	ldr	r2, [r3, #16]
 800355e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003562:	430a      	orrs	r2, r1
 8003564:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003566:	6882      	ldr	r2, [r0, #8]
 8003568:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800356a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800356c:	4302      	orrs	r2, r0
 800356e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003570:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8003574:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003578:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800357a:	430a      	orrs	r2, r1
 800357c:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800357e:	695a      	ldr	r2, [r3, #20]
 8003580:	69a1      	ldr	r1, [r4, #24]
 8003582:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003586:	430a      	orrs	r2, r1
 8003588:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800358a:	4a0e      	ldr	r2, [pc, #56]	; (80035c4 <UART_SetConfig+0x70>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d115      	bne.n	80035bc <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003590:	f7ff fc7c 	bl	8002e8c <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003594:	2319      	movs	r3, #25
 8003596:	4358      	muls	r0, r3
 8003598:	6863      	ldr	r3, [r4, #4]
 800359a:	2264      	movs	r2, #100	; 0x64
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	fbb0 f0f3 	udiv	r0, r0, r3
 80035a2:	fbb0 f1f2 	udiv	r1, r0, r2
 80035a6:	fb02 0311 	mls	r3, r2, r1, r0
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	3332      	adds	r3, #50	; 0x32
 80035ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80035b2:	6824      	ldr	r4, [r4, #0]
 80035b4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80035b8:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 80035ba:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80035bc:	f7ff fc56 	bl	8002e6c <HAL_RCC_GetPCLK1Freq>
 80035c0:	e7e8      	b.n	8003594 <UART_SetConfig+0x40>
 80035c2:	bf00      	nop
 80035c4:	40013800 	.word	0x40013800

080035c8 <HAL_UART_Init>:
{
 80035c8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80035ca:	4604      	mov	r4, r0
 80035cc:	b340      	cbz	r0, 8003620 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80035ce:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80035d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80035d6:	b91b      	cbnz	r3, 80035e0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80035d8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80035dc:	f7fe f83a 	bl	8001654 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80035e0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80035e2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80035e4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80035e8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80035ea:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80035ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035f0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80035f2:	f7ff ffaf 	bl	8003554 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035f6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003600:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003602:	695a      	ldr	r2, [r3, #20]
 8003604:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003608:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003610:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003612:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003614:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003616:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800361a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800361e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003620:	2001      	movs	r0, #1
 8003622:	e7fc      	b.n	800361e <HAL_UART_Init+0x56>

08003624 <HAL_UART_Transmit_DMA>:
{
 8003624:	b538      	push	{r3, r4, r5, lr}
 8003626:	4604      	mov	r4, r0
 8003628:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800362a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800362e:	2a20      	cmp	r2, #32
 8003630:	d12a      	bne.n	8003688 <HAL_UART_Transmit_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 8003632:	b339      	cbz	r1, 8003684 <HAL_UART_Transmit_DMA+0x60>
 8003634:	b333      	cbz	r3, 8003684 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8003636:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800363a:	2a01      	cmp	r2, #1
 800363c:	d024      	beq.n	8003688 <HAL_UART_Transmit_DMA+0x64>
 800363e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003640:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8003642:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003646:	2221      	movs	r2, #33	; 0x21
    huart->TxXferCount = Size;
 8003648:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800364a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800364c:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800364e:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003652:	4a0e      	ldr	r2, [pc, #56]	; (800368c <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8003654:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8003656:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003658:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800365a:	4a0d      	ldr	r2, [pc, #52]	; (8003690 <HAL_UART_Transmit_DMA+0x6c>)
 800365c:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800365e:	4a0d      	ldr	r2, [pc, #52]	; (8003694 <HAL_UART_Transmit_DMA+0x70>)
    huart->hdmatx->XferAbortCallback = NULL;
 8003660:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003664:	6822      	ldr	r2, [r4, #0]
 8003666:	3204      	adds	r2, #4
 8003668:	f7fe fa32 	bl	8001ad0 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800366c:	f06f 0240 	mvn.w	r2, #64	; 0x40
    return HAL_OK;
 8003670:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003672:	6823      	ldr	r3, [r4, #0]
 8003674:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003676:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8003678:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800367c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003680:	615a      	str	r2, [r3, #20]
}
 8003682:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8003684:	2001      	movs	r0, #1
 8003686:	e7fc      	b.n	8003682 <HAL_UART_Transmit_DMA+0x5e>
    return HAL_BUSY;
 8003688:	2002      	movs	r0, #2
 800368a:	e7fa      	b.n	8003682 <HAL_UART_Transmit_DMA+0x5e>
 800368c:	0800369b 	.word	0x0800369b
 8003690:	080036c9 	.word	0x080036c9
 8003694:	080036d5 	.word	0x080036d5

08003698 <HAL_UART_TxCpltCallback>:
 8003698:	4770      	bx	lr

0800369a <UART_DMATransmitCplt>:
{
 800369a:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800369c:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800369e:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f013 0320 	ands.w	r3, r3, #32
 80036a6:	d10a      	bne.n	80036be <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0x00U;
 80036a8:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80036aa:	6813      	ldr	r3, [r2, #0]
 80036ac:	695a      	ldr	r2, [r3, #20]
 80036ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036b2:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036ba:	60da      	str	r2, [r3, #12]
}
 80036bc:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80036be:	4610      	mov	r0, r2
 80036c0:	f7ff ffea 	bl	8003698 <HAL_UART_TxCpltCallback>
}
 80036c4:	e7fa      	b.n	80036bc <UART_DMATransmitCplt+0x22>

080036c6 <HAL_UART_TxHalfCpltCallback>:
 80036c6:	4770      	bx	lr

080036c8 <UART_DMATxHalfCplt>:
{
 80036c8:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80036ca:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80036cc:	f7ff fffb 	bl	80036c6 <HAL_UART_TxHalfCpltCallback>
}
 80036d0:	bd08      	pop	{r3, pc}

080036d2 <HAL_UART_ErrorCallback>:
 80036d2:	4770      	bx	lr

080036d4 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036d4:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 80036d6:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80036d8:	680b      	ldr	r3, [r1, #0]
 80036da:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80036dc:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 80036e0:	2821      	cmp	r0, #33	; 0x21
 80036e2:	d10a      	bne.n	80036fa <UART_DMAError+0x26>
 80036e4:	0612      	lsls	r2, r2, #24
 80036e6:	d508      	bpl.n	80036fa <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 80036e8:	2200      	movs	r2, #0
 80036ea:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80036f2:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80036f4:	2220      	movs	r2, #32
 80036f6:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036fa:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80036fc:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8003700:	2a22      	cmp	r2, #34	; 0x22
 8003702:	d106      	bne.n	8003712 <UART_DMAError+0x3e>
 8003704:	065b      	lsls	r3, r3, #25
 8003706:	d504      	bpl.n	8003712 <UART_DMAError+0x3e>
    huart->RxXferCount = 0x00U;
 8003708:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 800370a:	4608      	mov	r0, r1
    huart->RxXferCount = 0x00U;
 800370c:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800370e:	f7ff ff13 	bl	8003538 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003712:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8003714:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003716:	f043 0310 	orr.w	r3, r3, #16
 800371a:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800371c:	f7ff ffd9 	bl	80036d2 <HAL_UART_ErrorCallback>
}
 8003720:	bd08      	pop	{r3, pc}
	...

08003724 <MX_LWIP_Init>:
{
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
  IP_ADDRESS[1] = 168;
  IP_ADDRESS[2] = 99;
  IP_ADDRESS[3] = 102;
 8003724:	2366      	movs	r3, #102	; 0x66
{
 8003726:	b5f0      	push	{r4, r5, r6, r7, lr}
  IP_ADDRESS[0] = 192;
 8003728:	4e1e      	ldr	r6, [pc, #120]	; (80037a4 <MX_LWIP_Init+0x80>)
  NETMASK_ADDRESS[0] = 255;
 800372a:	4d1f      	ldr	r5, [pc, #124]	; (80037a8 <MX_LWIP_Init+0x84>)
  IP_ADDRESS[3] = 102;
 800372c:	70f3      	strb	r3, [r6, #3]
  NETMASK_ADDRESS[0] = 255;
 800372e:	23ff      	movs	r3, #255	; 0xff
  IP_ADDRESS[0] = 192;
 8003730:	20c0      	movs	r0, #192	; 0xc0
  IP_ADDRESS[1] = 168;
 8003732:	21a8      	movs	r1, #168	; 0xa8
  IP_ADDRESS[2] = 99;
 8003734:	2263      	movs	r2, #99	; 0x63
  NETMASK_ADDRESS[0] = 255;
 8003736:	702b      	strb	r3, [r5, #0]
  NETMASK_ADDRESS[1] = 255;
 8003738:	706b      	strb	r3, [r5, #1]
  NETMASK_ADDRESS[2] = 255;
 800373a:	70ab      	strb	r3, [r5, #2]
  NETMASK_ADDRESS[3] = 0;
 800373c:	2700      	movs	r7, #0
  GATEWAY_ADDRESS[0] = 192;
  GATEWAY_ADDRESS[1] = 168;
  GATEWAY_ADDRESS[2] = 99;
  GATEWAY_ADDRESS[3] = 1;
 800373e:	2301      	movs	r3, #1
  GATEWAY_ADDRESS[0] = 192;
 8003740:	4c1a      	ldr	r4, [pc, #104]	; (80037ac <MX_LWIP_Init+0x88>)
{
 8003742:	b085      	sub	sp, #20
  GATEWAY_ADDRESS[0] = 192;
 8003744:	7020      	strb	r0, [r4, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003746:	7061      	strb	r1, [r4, #1]
  GATEWAY_ADDRESS[2] = 99;
 8003748:	70a2      	strb	r2, [r4, #2]
  GATEWAY_ADDRESS[3] = 1;
 800374a:	70e3      	strb	r3, [r4, #3]
  IP_ADDRESS[0] = 192;
 800374c:	7030      	strb	r0, [r6, #0]
  IP_ADDRESS[1] = 168;
 800374e:	7071      	strb	r1, [r6, #1]
  IP_ADDRESS[2] = 99;
 8003750:	70b2      	strb	r2, [r6, #2]
  NETMASK_ADDRESS[3] = 0;
 8003752:	70ef      	strb	r7, [r5, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003754:	f000 faa3 	bl	8003c9e <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003758:	4915      	ldr	r1, [pc, #84]	; (80037b0 <MX_LWIP_Init+0x8c>)
 800375a:	6833      	ldr	r3, [r6, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800375c:	4a15      	ldr	r2, [pc, #84]	; (80037b4 <MX_LWIP_Init+0x90>)
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800375e:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003760:	682b      	ldr	r3, [r5, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003762:	6820      	ldr	r0, [r4, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003764:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003766:	4b14      	ldr	r3, [pc, #80]	; (80037b8 <MX_LWIP_Init+0x94>)

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003768:	4c14      	ldr	r4, [pc, #80]	; (80037bc <MX_LWIP_Init+0x98>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800376a:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800376c:	4814      	ldr	r0, [pc, #80]	; (80037c0 <MX_LWIP_Init+0x9c>)
 800376e:	9002      	str	r0, [sp, #8]
 8003770:	4814      	ldr	r0, [pc, #80]	; (80037c4 <MX_LWIP_Init+0xa0>)
 8003772:	e9cd 7000 	strd	r7, r0, [sp]
 8003776:	4620      	mov	r0, r4
 8003778:	f000 fc06 	bl	8003f88 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800377c:	4620      	mov	r0, r4
 800377e:	f000 fc41 	bl	8004004 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003782:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003786:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 8003788:	075b      	lsls	r3, r3, #29
 800378a:	d508      	bpl.n	800379e <MX_LWIP_Init+0x7a>
    netif_set_up(&gnetif);
 800378c:	f000 fc40 	bl	8004010 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003790:	490d      	ldr	r1, [pc, #52]	; (80037c8 <MX_LWIP_Init+0xa4>)
 8003792:	480a      	ldr	r0, [pc, #40]	; (80037bc <MX_LWIP_Init+0x98>)
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003794:	b005      	add	sp, #20
 8003796:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800379a:	f000 bc55 	b.w	8004048 <netif_set_link_callback>
    netif_set_down(&gnetif);
 800379e:	f000 fc46 	bl	800402e <netif_set_down>
 80037a2:	e7f5      	b.n	8003790 <MX_LWIP_Init+0x6c>
 80037a4:	2000183c 	.word	0x2000183c
 80037a8:	20001838 	.word	0x20001838
 80037ac:	200017fc 	.word	0x200017fc
 80037b0:	20001834 	.word	0x20001834
 80037b4:	20001840 	.word	0x20001840
 80037b8:	20001844 	.word	0x20001844
 80037bc:	20001800 	.word	0x20001800
 80037c0:	08008a79 	.word	0x08008a79
 80037c4:	08003ab9 	.word	0x08003ab9
 80037c8:	08003bed 	.word	0x08003bed

080037cc <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80037cc:	b508      	push	{r3, lr}
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80037ce:	4803      	ldr	r0, [pc, #12]	; (80037dc <MX_LWIP_Process+0x10>)
 80037d0:	f000 f906 	bl	80039e0 <ethernetif_input>
  /* Handle timeouts */
  sys_check_timeouts();

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80037d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_check_timeouts();
 80037d8:	f003 bdaa 	b.w	8007330 <sys_check_timeouts>
 80037dc:	20001800 	.word	0x20001800

080037e0 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80037e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 80037e4:	f04f 0800 	mov.w	r8, #0
{
 80037e8:	460c      	mov	r4, r1
  uint32_t framelength = 0;
 80037ea:	4647      	mov	r7, r8
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80037ec:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80037f0:	4a22      	ldr	r2, [pc, #136]	; (800387c <low_level_output+0x9c>)
 80037f2:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80037f4:	9200      	str	r2, [sp, #0]
 80037f6:	68b3      	ldr	r3, [r6, #8]
  for(q = p; q != NULL; q = q->next)
 80037f8:	b92c      	cbnz	r4, 8003806 <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80037fa:	4639      	mov	r1, r7
 80037fc:	481f      	ldr	r0, [pc, #124]	; (800387c <low_level_output+0x9c>)
 80037fe:	f7fe fbfd 	bl	8001ffc <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003802:	4620      	mov	r0, r4
 8003804:	e004      	b.n	8003810 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003806:	6832      	ldr	r2, [r6, #0]
 8003808:	2a00      	cmp	r2, #0
 800380a:	da11      	bge.n	8003830 <low_level_output+0x50>
        errval = ERR_USE;
 800380c:	f06f 0007 	mvn.w	r0, #7

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003810:	f241 0214 	movw	r2, #4116	; 0x1014
 8003814:	9b00      	ldr	r3, [sp, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	5899      	ldr	r1, [r3, r2]
 800381a:	0689      	lsls	r1, r1, #26
 800381c:	d505      	bpl.n	800382a <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800381e:	2120      	movs	r1, #32
 8003820:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003822:	f241 0204 	movw	r2, #4100	; 0x1004
 8003826:	2100      	movs	r1, #0
 8003828:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 800382a:	b003      	add	sp, #12
 800382c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003830:	4645      	mov	r5, r8
      payloadoffset = 0;
 8003832:	f04f 0a00 	mov.w	sl, #0
      byteslefttocopy = q->len;
 8003836:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800383a:	eb05 0809 	add.w	r8, r5, r9
 800383e:	6861      	ldr	r1, [r4, #4]
 8003840:	45d8      	cmp	r8, fp
 8003842:	eb03 0005 	add.w	r0, r3, r5
 8003846:	4451      	add	r1, sl
 8003848:	d807      	bhi.n	800385a <low_level_output+0x7a>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800384a:	464a      	mov	r2, r9
 800384c:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 800384e:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003850:	f005 f9d9 	bl	8008c06 <memcpy>
  for(q = p; q != NULL; q = q->next)
 8003854:	6824      	ldr	r4, [r4, #0]
 8003856:	9b01      	ldr	r3, [sp, #4]
 8003858:	e7ce      	b.n	80037f8 <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800385a:	ebab 0505 	sub.w	r5, fp, r5
 800385e:	462a      	mov	r2, r5
 8003860:	f005 f9d1 	bl	8008c06 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003864:	68f6      	ldr	r6, [r6, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003866:	6833      	ldr	r3, [r6, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	dbcf      	blt.n	800380c <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800386c:	44aa      	add	sl, r5
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800386e:	442f      	add	r7, r5
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003870:	68b3      	ldr	r3, [r6, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003872:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 8003876:	2500      	movs	r5, #0
 8003878:	e7df      	b.n	800383a <low_level_output+0x5a>
 800387a:	bf00      	nop
 800387c:	200048a8 	.word	0x200048a8

08003880 <HAL_ETH_MspInit>:
{
 8003880:	b570      	push	{r4, r5, r6, lr}
 8003882:	4604      	mov	r4, r0
 8003884:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003886:	2210      	movs	r2, #16
 8003888:	2100      	movs	r1, #0
 800388a:	a808      	add	r0, sp, #32
 800388c:	f005 f9c6 	bl	8008c1c <memset>
  if(ethHandle->Instance==ETH)
 8003890:	6822      	ldr	r2, [r4, #0]
 8003892:	4b4d      	ldr	r3, [pc, #308]	; (80039c8 <HAL_ETH_MspInit+0x148>)
 8003894:	429a      	cmp	r2, r3
 8003896:	f040 8094 	bne.w	80039c2 <HAL_ETH_MspInit+0x142>
    __HAL_RCC_ETH_CLK_ENABLE();
 800389a:	f5a3 43e0 	sub.w	r3, r3, #28672	; 0x7000
 800389e:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a0:	2602      	movs	r6, #2
    __HAL_RCC_ETH_CLK_ENABLE();
 80038a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038a6:	615a      	str	r2, [r3, #20]
 80038a8:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038aa:	2503      	movs	r5, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 80038ac:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80038b0:	9201      	str	r2, [sp, #4]
 80038b2:	9a01      	ldr	r2, [sp, #4]
 80038b4:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038b6:	a908      	add	r1, sp, #32
    __HAL_RCC_ETH_CLK_ENABLE();
 80038b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038bc:	615a      	str	r2, [r3, #20]
 80038be:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038c0:	4842      	ldr	r0, [pc, #264]	; (80039cc <HAL_ETH_MspInit+0x14c>)
    __HAL_RCC_ETH_CLK_ENABLE();
 80038c2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80038c6:	9202      	str	r2, [sp, #8]
 80038c8:	9a02      	ldr	r2, [sp, #8]
 80038ca:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038cc:	2400      	movs	r4, #0
    __HAL_RCC_ETH_CLK_ENABLE();
 80038ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80038d2:	615a      	str	r2, [r3, #20]
 80038d4:	695a      	ldr	r2, [r3, #20]
 80038d6:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80038da:	9203      	str	r2, [sp, #12]
 80038dc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038de:	699a      	ldr	r2, [r3, #24]
 80038e0:	f042 0210 	orr.w	r2, r2, #16
 80038e4:	619a      	str	r2, [r3, #24]
 80038e6:	699a      	ldr	r2, [r3, #24]
 80038e8:	f002 0210 	and.w	r2, r2, #16
 80038ec:	9204      	str	r2, [sp, #16]
 80038ee:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038f0:	699a      	ldr	r2, [r3, #24]
 80038f2:	f042 0204 	orr.w	r2, r2, #4
 80038f6:	619a      	str	r2, [r3, #24]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	f002 0204 	and.w	r2, r2, #4
 80038fe:	9205      	str	r2, [sp, #20]
 8003900:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003902:	699a      	ldr	r2, [r3, #24]
 8003904:	f042 0208 	orr.w	r2, r2, #8
 8003908:	619a      	str	r2, [r3, #24]
 800390a:	699a      	ldr	r2, [r3, #24]
 800390c:	f002 0208 	and.w	r2, r2, #8
 8003910:	9206      	str	r2, [sp, #24]
 8003912:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003914:	699a      	ldr	r2, [r3, #24]
 8003916:	f042 0220 	orr.w	r2, r2, #32
 800391a:	619a      	str	r2, [r3, #24]
 800391c:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800391e:	950b      	str	r5, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003920:	f003 0320 	and.w	r3, r3, #32
 8003924:	9307      	str	r3, [sp, #28]
 8003926:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003928:	2306      	movs	r3, #6
 800392a:	e9cd 3608 	strd	r3, r6, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800392e:	f7fe fea1 	bl	8002674 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003932:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003934:	a908      	add	r1, sp, #32
 8003936:	4825      	ldr	r0, [pc, #148]	; (80039cc <HAL_ETH_MspInit+0x14c>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003938:	e9cd 3408 	strd	r3, r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393c:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800393e:	f7fe fe99 	bl	8002674 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8003942:	230b      	movs	r3, #11
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003944:	a908      	add	r1, sp, #32
 8003946:	4822      	ldr	r0, [pc, #136]	; (80039d0 <HAL_ETH_MspInit+0x150>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003948:	e9cd 3408 	strd	r3, r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394c:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394e:	f7fe fe91 	bl	8002674 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003952:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003954:	a908      	add	r1, sp, #32
 8003956:	481e      	ldr	r0, [pc, #120]	; (80039d0 <HAL_ETH_MspInit+0x150>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003958:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800395c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800395e:	f7fe fe89 	bl	8002674 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003962:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003966:	a908      	add	r1, sp, #32
 8003968:	481a      	ldr	r0, [pc, #104]	; (80039d4 <HAL_ETH_MspInit+0x154>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800396a:	e9cd 3408 	strd	r3, r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396e:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003970:	f7fe fe80 	bl	8002674 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_8;
 8003974:	f44f 5364 	mov.w	r3, #14592	; 0x3900
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003978:	a908      	add	r1, sp, #32
 800397a:	4816      	ldr	r0, [pc, #88]	; (80039d4 <HAL_ETH_MspInit+0x154>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397c:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003980:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003982:	f7fe fe77 	bl	8002674 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003986:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800398a:	a908      	add	r1, sp, #32
 800398c:	4812      	ldr	r0, [pc, #72]	; (80039d8 <HAL_ETH_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800398e:	e9cd 3408 	strd	r3, r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003992:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003994:	f7fe fe6e 	bl	8002674 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_ETH_ENABLE();
 8003998:	4a10      	ldr	r2, [pc, #64]	; (80039dc <HAL_ETH_MspInit+0x15c>)
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800399a:	4621      	mov	r1, r4
    __HAL_AFIO_REMAP_ETH_ENABLE();
 800399c:	6853      	ldr	r3, [r2, #4]
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800399e:	203d      	movs	r0, #61	; 0x3d
    __HAL_AFIO_REMAP_ETH_ENABLE();
 80039a0:	f043 63e4 	orr.w	r3, r3, #119537664	; 0x7200000
 80039a4:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80039a6:	4622      	mov	r2, r4
 80039a8:	f7fd fffa 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80039ac:	203d      	movs	r0, #61	; 0x3d
 80039ae:	f7fe f82b 	bl	8001a08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 80039b2:	203e      	movs	r0, #62	; 0x3e
 80039b4:	4622      	mov	r2, r4
 80039b6:	4621      	mov	r1, r4
 80039b8:	f7fd fff2 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 80039bc:	203e      	movs	r0, #62	; 0x3e
 80039be:	f7fe f823 	bl	8001a08 <HAL_NVIC_EnableIRQ>
}
 80039c2:	b00c      	add	sp, #48	; 0x30
 80039c4:	bd70      	pop	{r4, r5, r6, pc}
 80039c6:	bf00      	nop
 80039c8:	40028000 	.word	0x40028000
 80039cc:	40011000 	.word	0x40011000
 80039d0:	40010800 	.word	0x40010800
 80039d4:	40010c00 	.word	0x40010c00
 80039d8:	40011400 	.word	0x40011400
 80039dc:	40010000 	.word	0x40010000

080039e0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80039e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80039e4:	4c33      	ldr	r4, [pc, #204]	; (8003ab4 <ethernetif_input+0xd4>)
{
 80039e6:	4682      	mov	sl, r0
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80039e8:	4620      	mov	r0, r4
 80039ea:	f7fe fb7d 	bl	80020e8 <HAL_ETH_GetReceivedFrame>
 80039ee:	4605      	mov	r5, r0
 80039f0:	2800      	cmp	r0, #0
 80039f2:	d15c      	bne.n	8003aae <ethernetif_input+0xce>
  len = heth.RxFrameInfos.length;
 80039f4:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
  if (len > 0)
 80039f6:	2900      	cmp	r1, #0
 80039f8:	d050      	beq.n	8003a9c <ethernetif_input+0xbc>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80039fa:	2203      	movs	r2, #3
 80039fc:	2004      	movs	r0, #4
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80039fe:	6c26      	ldr	r6, [r4, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003a00:	f000 fc28 	bl	8004254 <pbuf_alloc>
  if (p != NULL)
 8003a04:	4607      	mov	r7, r0
 8003a06:	2800      	cmp	r0, #0
 8003a08:	d048      	beq.n	8003a9c <ethernetif_input+0xbc>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003a0a:	4680      	mov	r8, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003a0c:	f240 5bf4 	movw	fp, #1524	; 0x5f4
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003a10:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003a14:	9600      	str	r6, [sp, #0]
      byteslefttocopy = q->len;
 8003a16:	462e      	mov	r6, r5
      payloadoffset = 0;
 8003a18:	2300      	movs	r3, #0
      byteslefttocopy = q->len;
 8003a1a:	f8b8 200a 	ldrh.w	r2, [r8, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003a1e:	18b5      	adds	r5, r6, r2
 8003a20:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8003a24:	9900      	ldr	r1, [sp, #0]
 8003a26:	455d      	cmp	r5, fp
 8003a28:	4418      	add	r0, r3
 8003a2a:	4431      	add	r1, r6
 8003a2c:	d825      	bhi.n	8003a7a <ethernetif_input+0x9a>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003a2e:	f005 f8ea 	bl	8008c06 <memcpy>
    for(q = p; q != NULL; q = q->next)
 8003a32:	f8d8 8000 	ldr.w	r8, [r8]
 8003a36:	f1b8 0f00 	cmp.w	r8, #0
 8003a3a:	d1ec      	bne.n	8003a16 <ethernetif_input+0x36>
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003a3c:	2200      	movs	r2, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003a3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003a40:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003a42:	4282      	cmp	r2, r0
 8003a44:	d12c      	bne.n	8003aa0 <ethernetif_input+0xc0>
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003a46:	f241 0114 	movw	r1, #4116	; 0x1014
 8003a4a:	6823      	ldr	r3, [r4, #0]
    heth.RxFrameInfos.SegCount =0;
 8003a4c:	2200      	movs	r2, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003a4e:	5858      	ldr	r0, [r3, r1]
    heth.RxFrameInfos.SegCount =0;
 8003a50:	63a2      	str	r2, [r4, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003a52:	0600      	lsls	r0, r0, #24
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003a54:	bf41      	itttt	mi
 8003a56:	2080      	movmi	r0, #128	; 0x80
 8003a58:	5058      	strmi	r0, [r3, r1]
    heth.Instance->DMARPDR = 0;
 8003a5a:	f241 0108 	movwmi	r1, #4104	; 0x1008
 8003a5e:	505a      	strmi	r2, [r3, r1]

  /* move received packet into a new pbuf */
  p = low_level_input(netif);

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003a60:	b32f      	cbz	r7, 8003aae <ethernetif_input+0xce>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8003a62:	f8da 3010 	ldr.w	r3, [sl, #16]
 8003a66:	4651      	mov	r1, sl
 8003a68:	4638      	mov	r0, r7
 8003a6a:	4798      	blx	r3

  if (err != ERR_OK)
 8003a6c:	b1f8      	cbz	r0, 8003aae <ethernetif_input+0xce>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003a6e:	4638      	mov	r0, r7
    p = NULL;
  }
}
 8003a70:	b003      	add	sp, #12
 8003a72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 8003a76:	f000 bb8b 	b.w	8004190 <pbuf_free>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003a7a:	ebab 0606 	sub.w	r6, fp, r6
 8003a7e:	4632      	mov	r2, r6
 8003a80:	9301      	str	r3, [sp, #4]
 8003a82:	f005 f8c0 	bl	8008c06 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003a86:	f8d9 900c 	ldr.w	r9, [r9, #12]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003a8a:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003a8e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003a92:	9300      	str	r3, [sp, #0]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003a94:	9b01      	ldr	r3, [sp, #4]
 8003a96:	4433      	add	r3, r6
        bufferoffset = 0;
 8003a98:	2600      	movs	r6, #0
 8003a9a:	e7c0      	b.n	8003a1e <ethernetif_input+0x3e>
  struct pbuf *p = NULL;
 8003a9c:	2700      	movs	r7, #0
 8003a9e:	e7cd      	b.n	8003a3c <ethernetif_input+0x5c>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003aa0:	6819      	ldr	r1, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003aa2:	3201      	adds	r2, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003aa4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8003aa8:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	e7c9      	b.n	8003a42 <ethernetif_input+0x62>
}
 8003aae:	b003      	add	sp, #12
 8003ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ab4:	200048a8 	.word	0x200048a8

08003ab8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003ab8:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003aba:	4604      	mov	r4, r0
{
 8003abc:	b085      	sub	sp, #20
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003abe:	b930      	cbnz	r0, 8003ace <ethernetif_init+0x16>
 8003ac0:	4b3c      	ldr	r3, [pc, #240]	; (8003bb4 <ethernetif_init+0xfc>)
 8003ac2:	f240 223e 	movw	r2, #574	; 0x23e
 8003ac6:	493c      	ldr	r1, [pc, #240]	; (8003bb8 <ethernetif_init+0x100>)
 8003ac8:	483c      	ldr	r0, [pc, #240]	; (8003bbc <ethernetif_init+0x104>)
 8003aca:	f005 ff93 	bl	80099f4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003ace:	f247 4373 	movw	r3, #29811	; 0x7473
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003ad2:	2201      	movs	r2, #1
  netif->name[0] = IFNAME0;
 8003ad4:	8623      	strh	r3, [r4, #48]	; 0x30
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003ad6:	4b3a      	ldr	r3, [pc, #232]	; (8003bc0 <ethernetif_init+0x108>)
  heth.Instance = ETH;
 8003ad8:	4d3a      	ldr	r5, [pc, #232]	; (8003bc4 <ethernetif_init+0x10c>)
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003ada:	493b      	ldr	r1, [pc, #236]	; (8003bc8 <ethernetif_init+0x110>)
  netif->output = etharp_output;
 8003adc:	6163      	str	r3, [r4, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003ade:	4b3b      	ldr	r3, [pc, #236]	; (8003bcc <ethernetif_init+0x114>)
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003ae0:	e9c5 1200 	strd	r1, r2, [r5]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003ae4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003ae8:	f44f 6100 	mov.w	r1, #2048	; 0x800
  netif->linkoutput = low_level_output;
 8003aec:	61a3      	str	r3, [r4, #24]
  uint32_t regvalue = 0;
 8003aee:	2300      	movs	r3, #0
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 8003af0:	822a      	strh	r2, [r5, #16]
  MACAddr[0] = 0x00;
 8003af2:	4a37      	ldr	r2, [pc, #220]	; (8003bd0 <ethernetif_init+0x118>)
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003af4:	e9c5 0102 	strd	r0, r1, [r5, #8]
  MACAddr[0] = 0x00;
 8003af8:	9202      	str	r2, [sp, #8]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003afa:	4628      	mov	r0, r5
  heth.Init.MACAddr = &MACAddr[0];
 8003afc:	aa02      	add	r2, sp, #8
  uint32_t regvalue = 0;
 8003afe:	9301      	str	r3, [sp, #4]
  MACAddr[3] = 0x00;
 8003b00:	f8ad 300c 	strh.w	r3, [sp, #12]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003b04:	e9c5 2305 	strd	r2, r3, [r5, #20]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_MII;
 8003b08:	e9c5 3307 	strd	r3, r3, [r5, #28]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003b0c:	f7fe fbd8 	bl	80022c0 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 8003b10:	b928      	cbnz	r0, 8003b1e <ethernetif_init+0x66>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003b12:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8003b16:	f043 0304 	orr.w	r3, r3, #4
 8003b1a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003b1e:	2304      	movs	r3, #4
 8003b20:	4a2c      	ldr	r2, [pc, #176]	; (8003bd4 <ethernetif_init+0x11c>)
 8003b22:	492d      	ldr	r1, [pc, #180]	; (8003bd8 <ethernetif_init+0x120>)
 8003b24:	4827      	ldr	r0, [pc, #156]	; (8003bc4 <ethernetif_init+0x10c>)
 8003b26:	f7fe f9f3 	bl	8001f10 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003b2a:	492c      	ldr	r1, [pc, #176]	; (8003bdc <ethernetif_init+0x124>)
 8003b2c:	2308      	movs	r3, #8
 8003b2e:	4a2c      	ldr	r2, [pc, #176]	; (8003be0 <ethernetif_init+0x128>)
 8003b30:	4824      	ldr	r0, [pc, #144]	; (8003bc4 <ethernetif_init+0x10c>)
 8003b32:	f7fe fa29 	bl	8001f88 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003b36:	2306      	movs	r3, #6
 8003b38:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003b3c:	696b      	ldr	r3, [r5, #20]
  HAL_ETH_Start(&heth);
 8003b3e:	4821      	ldr	r0, [pc, #132]	; (8003bc4 <ethernetif_init+0x10c>)
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003b40:	781a      	ldrb	r2, [r3, #0]
 8003b42:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003b46:	785a      	ldrb	r2, [r3, #1]
 8003b48:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003b4c:	789a      	ldrb	r2, [r3, #2]
 8003b4e:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003b52:	78da      	ldrb	r2, [r3, #3]
 8003b54:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003b58:	791a      	ldrb	r2, [r3, #4]
 8003b5a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003b5e:	795b      	ldrb	r3, [r3, #5]
 8003b60:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->mtu = 1500;
 8003b64:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003b68:	84e3      	strh	r3, [r4, #38]	; 0x26
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003b6a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8003b6e:	f043 030a 	orr.w	r3, r3, #10
 8003b72:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  HAL_ETH_Start(&heth);
 8003b76:	f7fe fc79 	bl	800246c <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 8003b7a:	aa01      	add	r2, sp, #4
 8003b7c:	2111      	movs	r1, #17
 8003b7e:	4811      	ldr	r0, [pc, #68]	; (8003bc4 <ethernetif_init+0x10c>)
 8003b80:	f7fe fb2c 	bl	80021dc <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 8003b84:	9a01      	ldr	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 8003b86:	2111      	movs	r1, #17
  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 8003b88:	f042 0203 	orr.w	r2, r2, #3
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 8003b8c:	480d      	ldr	r0, [pc, #52]	; (8003bc4 <ethernetif_init+0x10c>)
  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 8003b8e:	9201      	str	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 8003b90:	f7fe fb5e 	bl	8002250 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 8003b94:	aa01      	add	r2, sp, #4
 8003b96:	2112      	movs	r1, #18
 8003b98:	480a      	ldr	r0, [pc, #40]	; (8003bc4 <ethernetif_init+0x10c>)
 8003b9a:	f7fe fb1f 	bl	80021dc <HAL_ETH_ReadPHYRegister>
  regvalue |= PHY_MISR_LINK_INT_EN;
 8003b9e:	9a01      	ldr	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 8003ba0:	2112      	movs	r1, #18
  regvalue |= PHY_MISR_LINK_INT_EN;
 8003ba2:	f042 0220 	orr.w	r2, r2, #32
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 8003ba6:	4807      	ldr	r0, [pc, #28]	; (8003bc4 <ethernetif_init+0x10c>)
  regvalue |= PHY_MISR_LINK_INT_EN;
 8003ba8:	9201      	str	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 8003baa:	f7fe fb51 	bl	8002250 <HAL_ETH_WritePHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 8003bae:	2000      	movs	r0, #0
 8003bb0:	b005      	add	sp, #20
 8003bb2:	bd30      	pop	{r4, r5, pc}
 8003bb4:	0800d24e 	.word	0x0800d24e
 8003bb8:	0800d26a 	.word	0x0800d26a
 8003bbc:	0800d278 	.word	0x0800d278
 8003bc0:	08007cf5 	.word	0x08007cf5
 8003bc4:	200048a8 	.word	0x200048a8
 8003bc8:	40028000 	.word	0x40028000
 8003bcc:	080037e1 	.word	0x080037e1
 8003bd0:	00e18000 	.word	0x00e18000
 8003bd4:	200048f0 	.word	0x200048f0
 8003bd8:	20001848 	.word	0x20001848
 8003bdc:	20004828 	.word	0x20004828
 8003be0:	20001888 	.word	0x20001888

08003be4 <sys_now>:
 8003be4:	f7fd beb2 	b.w	800194c <HAL_GetTick>

08003be8 <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8003be8:	4770      	bx	lr
	...

08003bec <ethernetif_update_config>:
{
 8003bec:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t tickstart = 0;
 8003bee:	2100      	movs	r1, #0
  if(netif_is_link_up(netif))
 8003bf0:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
 8003bf4:	4605      	mov	r5, r0
  if(netif_is_link_up(netif))
 8003bf6:	0758      	lsls	r0, r3, #29
  __IO uint32_t tickstart = 0;
 8003bf8:	9100      	str	r1, [sp, #0]
  uint32_t regvalue = 0;
 8003bfa:	9101      	str	r1, [sp, #4]
  if(netif_is_link_up(netif))
 8003bfc:	d544      	bpl.n	8003c88 <ethernetif_update_config+0x9c>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003bfe:	4c24      	ldr	r4, [pc, #144]	; (8003c90 <ethernetif_update_config+0xa4>)
 8003c00:	6863      	ldr	r3, [r4, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d035      	beq.n	8003c72 <ethernetif_update_config+0x86>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003c06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	f7fe fb20 	bl	8002250 <HAL_ETH_WritePHYRegister>
      tickstart = HAL_GetTick();
 8003c10:	f7fd fe9c 	bl	800194c <HAL_GetTick>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003c14:	4626      	mov	r6, r4
      tickstart = HAL_GetTick();
 8003c16:	9000      	str	r0, [sp, #0]
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003c18:	aa01      	add	r2, sp, #4
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	4630      	mov	r0, r6
 8003c1e:	f7fe fadd 	bl	80021dc <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 8003c22:	f7fd fe93 	bl	800194c <HAL_GetTick>
 8003c26:	9b00      	ldr	r3, [sp, #0]
 8003c28:	1ac0      	subs	r0, r0, r3
 8003c2a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003c2e:	d820      	bhi.n	8003c72 <ethernetif_update_config+0x86>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003c30:	9b01      	ldr	r3, [sp, #4]
 8003c32:	069a      	lsls	r2, r3, #26
 8003c34:	d5f0      	bpl.n	8003c18 <ethernetif_update_config+0x2c>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003c36:	aa01      	add	r2, sp, #4
 8003c38:	2110      	movs	r1, #16
 8003c3a:	4815      	ldr	r0, [pc, #84]	; (8003c90 <ethernetif_update_config+0xa4>)
 8003c3c:	f7fe face 	bl	80021dc <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003c40:	9b01      	ldr	r3, [sp, #4]
 8003c42:	f013 0204 	ands.w	r2, r3, #4
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003c46:	bf18      	it	ne
 8003c48:	f44f 6200 	movne.w	r2, #2048	; 0x800
      if(regvalue & PHY_SPEED_STATUS)
 8003c4c:	079b      	lsls	r3, r3, #30
        heth.Init.Speed = ETH_SPEED_10M;
 8003c4e:	bf4c      	ite	mi
 8003c50:	2300      	movmi	r3, #0
        heth.Init.Speed = ETH_SPEED_100M;
 8003c52:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003c56:	60e2      	str	r2, [r4, #12]
        heth.Init.Speed = ETH_SPEED_100M;
 8003c58:	60a3      	str	r3, [r4, #8]
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	480c      	ldr	r0, [pc, #48]	; (8003c90 <ethernetif_update_config+0xa4>)
 8003c5e:	f7fe fc7d 	bl	800255c <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 8003c62:	480b      	ldr	r0, [pc, #44]	; (8003c90 <ethernetif_update_config+0xa4>)
 8003c64:	f7fe fc02 	bl	800246c <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 8003c68:	4628      	mov	r0, r5
 8003c6a:	f7ff ffbd 	bl	8003be8 <ethernetif_notify_conn_changed>
}
 8003c6e:	b002      	add	sp, #8
 8003c70:	bd70      	pop	{r4, r5, r6, pc}
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003c72:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8003c76:	0852      	lsrs	r2, r2, #1
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003c78:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 8003c7c:	b292      	uxth	r2, r2
 8003c7e:	2100      	movs	r1, #0
 8003c80:	4803      	ldr	r0, [pc, #12]	; (8003c90 <ethernetif_update_config+0xa4>)
 8003c82:	f7fe fae5 	bl	8002250 <HAL_ETH_WritePHYRegister>
 8003c86:	e7e8      	b.n	8003c5a <ethernetif_update_config+0x6e>
    HAL_ETH_Stop(&heth);
 8003c88:	4801      	ldr	r0, [pc, #4]	; (8003c90 <ethernetif_update_config+0xa4>)
 8003c8a:	f7fe fc2b 	bl	80024e4 <HAL_ETH_Stop>
 8003c8e:	e7eb      	b.n	8003c68 <ethernetif_update_config+0x7c>
 8003c90:	200048a8 	.word	0x200048a8

08003c94 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 8003c94:	ba40      	rev16	r0, r0
}
 8003c96:	b280      	uxth	r0, r0
 8003c98:	4770      	bx	lr

08003c9a <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 8003c9a:	ba00      	rev	r0, r0
 8003c9c:	4770      	bx	lr

08003c9e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003c9e:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003ca0:	f000 f80c 	bl	8003cbc <mem_init>
  memp_init();
 8003ca4:	f000 f8ec 	bl	8003e80 <memp_init>
  pbuf_init();
  netif_init();
 8003ca8:	f000 f929 	bl	8003efe <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003cac:	f003 fb6e 	bl	800738c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003cb0:	f000 fdf4 	bl	800489c <tcp_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8003cb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8003cb8:	f003 bb10 	b.w	80072dc <sys_timeouts_init>

08003cbc <mem_init>:
 * C library malloc().
 */
void
mem_init(void)
{
}
 8003cbc:	4770      	bx	lr

08003cbe <mem_trim>:
void*
mem_trim(void *mem, mem_size_t size)
{
  LWIP_UNUSED_ARG(size);
  return mem;
}
 8003cbe:	4770      	bx	lr

08003cc0 <mem_malloc>:
 *
 * Note that the returned value must always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8003cc0:	b510      	push	{r4, lr}
  void* ret = mem_clib_malloc(size + MEM_LIBC_STATSHELPER_SIZE);
 8003cc2:	f004 ff81 	bl	8008bc8 <malloc>
  if (ret == NULL) {
 8003cc6:	4604      	mov	r4, r0
 8003cc8:	b150      	cbz	r0, 8003ce0 <mem_malloc+0x20>
    MEM_STATS_INC(err);
  } else {
    LWIP_ASSERT("malloc() must return aligned memory", LWIP_MEM_ALIGN(ret) == ret);
 8003cca:	1cc3      	adds	r3, r0, #3
 8003ccc:	f023 0303 	bic.w	r3, r3, #3
 8003cd0:	4298      	cmp	r0, r3
 8003cd2:	d005      	beq.n	8003ce0 <mem_malloc+0x20>
 8003cd4:	4b03      	ldr	r3, [pc, #12]	; (8003ce4 <mem_malloc+0x24>)
 8003cd6:	2280      	movs	r2, #128	; 0x80
 8003cd8:	4903      	ldr	r1, [pc, #12]	; (8003ce8 <mem_malloc+0x28>)
 8003cda:	4804      	ldr	r0, [pc, #16]	; (8003cec <mem_malloc+0x2c>)
 8003cdc:	f005 fe8a 	bl	80099f4 <iprintf>
    ret = (u8_t*)ret + MEM_LIBC_STATSHELPER_SIZE;
    MEM_STATS_INC_USED(used, size);
#endif
  }
  return ret;
}
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	bd10      	pop	{r4, pc}
 8003ce4:	0800d2c5 	.word	0x0800d2c5
 8003ce8:	0800d2f4 	.word	0x0800d2f4
 8003cec:	0800d278 	.word	0x0800d278

08003cf0 <mem_free>:
 *
 * @param rmem is the pointer as returned by a previous call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003cf0:	b510      	push	{r4, lr}
  LWIP_ASSERT("rmem != NULL", (rmem != NULL));
 8003cf2:	4604      	mov	r4, r0
 8003cf4:	b928      	cbnz	r0, 8003d02 <mem_free+0x12>
 8003cf6:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <mem_free+0x34>)
 8003cf8:	2291      	movs	r2, #145	; 0x91
 8003cfa:	490b      	ldr	r1, [pc, #44]	; (8003d28 <mem_free+0x38>)
 8003cfc:	480b      	ldr	r0, [pc, #44]	; (8003d2c <mem_free+0x3c>)
 8003cfe:	f005 fe79 	bl	80099f4 <iprintf>
  LWIP_ASSERT("rmem == MEM_ALIGN(rmem)", (rmem == LWIP_MEM_ALIGN(rmem)));
 8003d02:	1ce3      	adds	r3, r4, #3
 8003d04:	f023 0303 	bic.w	r3, r3, #3
 8003d08:	429c      	cmp	r4, r3
 8003d0a:	d005      	beq.n	8003d18 <mem_free+0x28>
 8003d0c:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <mem_free+0x34>)
 8003d0e:	2292      	movs	r2, #146	; 0x92
 8003d10:	4907      	ldr	r1, [pc, #28]	; (8003d30 <mem_free+0x40>)
 8003d12:	4806      	ldr	r0, [pc, #24]	; (8003d2c <mem_free+0x3c>)
 8003d14:	f005 fe6e 	bl	80099f4 <iprintf>
#if LWIP_STATS && MEM_STATS
  rmem = (u8_t*)rmem - MEM_LIBC_STATSHELPER_SIZE;
  MEM_STATS_DEC_USED(used, *(mem_size_t*)rmem);
#endif
  mem_clib_free(rmem);
 8003d18:	4620      	mov	r0, r4
}
 8003d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mem_clib_free(rmem);
 8003d1e:	f004 bf5b 	b.w	8008bd8 <free>
 8003d22:	bf00      	nop
 8003d24:	0800d2c5 	.word	0x0800d2c5
 8003d28:	0800d2a0 	.word	0x0800d2a0
 8003d2c:	0800d278 	.word	0x0800d278
 8003d30:	0800d2ad 	.word	0x0800d2ad

08003d34 <do_memp_malloc_pool_fn>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8003d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d36:	4605      	mov	r5, r0
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
 8003d38:	8880      	ldrh	r0, [r0, #4]
{
 8003d3a:	460f      	mov	r7, r1
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
 8003d3c:	3003      	adds	r0, #3
 8003d3e:	f020 0003 	bic.w	r0, r0, #3
 8003d42:	302c      	adds	r0, #44	; 0x2c
{
 8003d44:	4616      	mov	r6, r2
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
 8003d46:	f7ff ffbb 	bl	8003cc0 <mem_malloc>
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8003d4a:	4604      	mov	r4, r0
 8003d4c:	b1c0      	cbz	r0, 8003d80 <do_memp_malloc_pool_fn+0x4c>
    memp->next = NULL;
#endif /* MEMP_OVERFLOW_CHECK */
#endif /* !MEMP_MEM_MALLOC */
#if MEMP_OVERFLOW_CHECK
    memp->file = file;
    memp->line = line;
 8003d4e:	e9c0 7601 	strd	r7, r6, [r0, #4]
  memset(m, 0xcd, MEMP_SANITY_REGION_BEFORE_ALIGNED);
 8003d52:	2210      	movs	r2, #16
 8003d54:	21cd      	movs	r1, #205	; 0xcd
 8003d56:	300c      	adds	r0, #12
 8003d58:	f004 ff60 	bl	8008c1c <memset>
  m = (u8_t*)p + MEMP_SIZE + desc->size;
 8003d5c:	88a8      	ldrh	r0, [r5, #4]
  memset(m, 0xcd, MEMP_SANITY_REGION_AFTER_ALIGNED);
 8003d5e:	2210      	movs	r2, #16
  m = (u8_t*)p + MEMP_SIZE + desc->size;
 8003d60:	301c      	adds	r0, #28
  memset(m, 0xcd, MEMP_SANITY_REGION_AFTER_ALIGNED);
 8003d62:	21cd      	movs	r1, #205	; 0xcd
 8003d64:	4420      	add	r0, r4
 8003d66:	f004 ff59 	bl	8008c1c <memset>
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8003d6a:	07a3      	lsls	r3, r4, #30
 8003d6c:	d006      	beq.n	8003d7c <do_memp_malloc_pool_fn+0x48>
 8003d6e:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <do_memp_malloc_pool_fn+0x50>)
 8003d70:	f240 1249 	movw	r2, #329	; 0x149
 8003d74:	4904      	ldr	r1, [pc, #16]	; (8003d88 <do_memp_malloc_pool_fn+0x54>)
 8003d76:	4805      	ldr	r0, [pc, #20]	; (8003d8c <do_memp_malloc_pool_fn+0x58>)
 8003d78:	f005 fe3c 	bl	80099f4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8003d7c:	f104 001c 	add.w	r0, r4, #28
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
}
 8003d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d82:	bf00      	nop
 8003d84:	0800d338 	.word	0x0800d338
 8003d88:	0800d368 	.word	0x0800d368
 8003d8c:	0800d278 	.word	0x0800d278

08003d90 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8003d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8003d94:	078b      	lsls	r3, r1, #30
{
 8003d96:	b0a1      	sub	sp, #132	; 0x84
 8003d98:	4606      	mov	r6, r0
 8003d9a:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8003d9c:	d006      	beq.n	8003dac <do_memp_free_pool+0x1c>
 8003d9e:	4b33      	ldr	r3, [pc, #204]	; (8003e6c <do_memp_free_pool+0xdc>)
 8003da0:	f240 129d 	movw	r2, #413	; 0x19d
 8003da4:	4932      	ldr	r1, [pc, #200]	; (8003e70 <do_memp_free_pool+0xe0>)
 8003da6:	4833      	ldr	r0, [pc, #204]	; (8003e74 <do_memp_free_pool+0xe4>)
 8003da8:	f005 fe24 	bl	80099f4 <iprintf>
  m = (u8_t*)p + MEMP_SIZE + desc->size;
 8003dac:	2500      	movs	r5, #0
 8003dae:	88b7      	ldrh	r7, [r6, #4]
      LWIP_ASSERT(errstr, 0);
 8003db0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003e6c <do_memp_free_pool+0xdc>
 8003db4:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 8003e74 <do_memp_free_pool+0xe4>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8003db8:	f1a4 091c 	sub.w	r9, r4, #28
    if (m[k] != 0xcd) {
 8003dbc:	4427      	add	r7, r4
 8003dbe:	5d7b      	ldrb	r3, [r7, r5]
 8003dc0:	2bcd      	cmp	r3, #205	; 0xcd
 8003dc2:	d01c      	beq.n	8003dfe <do_memp_free_pool+0x6e>
      char errstr[128] = "detected memp overflow in pool ";
 8003dc4:	466a      	mov	r2, sp
 8003dc6:	4690      	mov	r8, r2
 8003dc8:	4b2b      	ldr	r3, [pc, #172]	; (8003e78 <do_memp_free_pool+0xe8>)
 8003dca:	f103 0e20 	add.w	lr, r3, #32
 8003dce:	4694      	mov	ip, r2
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	6859      	ldr	r1, [r3, #4]
 8003dd4:	3308      	adds	r3, #8
 8003dd6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8003dda:	4573      	cmp	r3, lr
 8003ddc:	4662      	mov	r2, ip
 8003dde:	d1f6      	bne.n	8003dce <do_memp_free_pool+0x3e>
 8003de0:	2260      	movs	r2, #96	; 0x60
 8003de2:	2100      	movs	r1, #0
 8003de4:	a808      	add	r0, sp, #32
 8003de6:	f004 ff19 	bl	8008c1c <memset>
      strcat(errstr, desc->desc);
 8003dea:	6831      	ldr	r1, [r6, #0]
 8003dec:	4640      	mov	r0, r8
 8003dee:	f005 feb1 	bl	8009b54 <strcat>
      LWIP_ASSERT(errstr, 0);
 8003df2:	4653      	mov	r3, sl
 8003df4:	228a      	movs	r2, #138	; 0x8a
 8003df6:	4641      	mov	r1, r8
 8003df8:	4658      	mov	r0, fp
 8003dfa:	f005 fdfb 	bl	80099f4 <iprintf>
 8003dfe:	3501      	adds	r5, #1
  for (k = 0; k < MEMP_SANITY_REGION_AFTER_ALIGNED; k++) {
 8003e00:	2d10      	cmp	r5, #16
 8003e02:	d1dc      	bne.n	8003dbe <do_memp_free_pool+0x2e>
      LWIP_ASSERT(errstr, 0);
 8003e04:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8003e6c <do_memp_free_pool+0xdc>
 8003e08:	f8df a068 	ldr.w	sl, [pc, #104]	; 8003e74 <do_memp_free_pool+0xe4>
 8003e0c:	f1a4 0511 	sub.w	r5, r4, #17
 8003e10:	3c01      	subs	r4, #1
    if (m[k] != 0xcd) {
 8003e12:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003e16:	2bcd      	cmp	r3, #205	; 0xcd
 8003e18:	d020      	beq.n	8003e5c <do_memp_free_pool+0xcc>
      char errstr[128] = "detected memp underflow in pool ";
 8003e1a:	466a      	mov	r2, sp
 8003e1c:	4617      	mov	r7, r2
 8003e1e:	4b17      	ldr	r3, [pc, #92]	; (8003e7c <do_memp_free_pool+0xec>)
 8003e20:	f103 0e20 	add.w	lr, r3, #32
 8003e24:	4694      	mov	ip, r2
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	6859      	ldr	r1, [r3, #4]
 8003e2a:	3308      	adds	r3, #8
 8003e2c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8003e30:	4573      	cmp	r3, lr
 8003e32:	4662      	mov	r2, ip
 8003e34:	d1f6      	bne.n	8003e24 <do_memp_free_pool+0x94>
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	225f      	movs	r2, #95	; 0x5f
 8003e3a:	f88c 3000 	strb.w	r3, [ip]
 8003e3e:	2100      	movs	r1, #0
 8003e40:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 8003e44:	f004 feea 	bl	8008c1c <memset>
      strcat(errstr, desc->desc);
 8003e48:	6831      	ldr	r1, [r6, #0]
 8003e4a:	4638      	mov	r0, r7
 8003e4c:	f005 fe82 	bl	8009b54 <strcat>
      LWIP_ASSERT(errstr, 0);
 8003e50:	4643      	mov	r3, r8
 8003e52:	22a5      	movs	r2, #165	; 0xa5
 8003e54:	4639      	mov	r1, r7
 8003e56:	4650      	mov	r0, sl
 8003e58:	f005 fdcc 	bl	80099f4 <iprintf>
  for (k = 0; k < MEMP_SANITY_REGION_BEFORE_ALIGNED; k++) {
 8003e5c:	42ac      	cmp	r4, r5
 8003e5e:	d1d8      	bne.n	8003e12 <do_memp_free_pool+0x82>
#endif

#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
 8003e60:	4648      	mov	r0, r9
 8003e62:	f7ff ff45 	bl	8003cf0 <mem_free>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8003e66:	b021      	add	sp, #132	; 0x84
 8003e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e6c:	0800d338 	.word	0x0800d338
 8003e70:	0800d318 	.word	0x0800d318
 8003e74:	0800d278 	.word	0x0800d278
 8003e78:	0800d0d6 	.word	0x0800d0d6
 8003e7c:	0800d156 	.word	0x0800d156

08003e80 <memp_init>:
}
 8003e80:	4770      	bx	lr
	...

08003e84 <memp_malloc_fn>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8003e84:	2809      	cmp	r0, #9
{
 8003e86:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8003e88:	d806      	bhi.n	8003e98 <memp_malloc_fn+0x14>
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 8003e8a:	4b08      	ldr	r3, [pc, #32]	; (8003eac <memp_malloc_fn+0x28>)
 8003e8c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 8003e90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 8003e94:	f7ff bf4e 	b.w	8003d34 <do_memp_malloc_pool_fn>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8003e98:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <memp_malloc_fn+0x2c>)
 8003e9a:	f240 1287 	movw	r2, #391	; 0x187
 8003e9e:	4905      	ldr	r1, [pc, #20]	; (8003eb4 <memp_malloc_fn+0x30>)
 8003ea0:	4805      	ldr	r0, [pc, #20]	; (8003eb8 <memp_malloc_fn+0x34>)
 8003ea2:	f005 fda7 	bl	80099f4 <iprintf>
}
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	bd08      	pop	{r3, pc}
 8003eaa:	bf00      	nop
 8003eac:	0800d414 	.word	0x0800d414
 8003eb0:	0800d338 	.word	0x0800d338
 8003eb4:	0800d3f7 	.word	0x0800d3f7
 8003eb8:	0800d278 	.word	0x0800d278

08003ebc <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8003ebc:	2809      	cmp	r0, #9
 8003ebe:	d906      	bls.n	8003ece <memp_free+0x12>
 8003ec0:	4b06      	ldr	r3, [pc, #24]	; (8003edc <memp_free+0x20>)
 8003ec2:	f240 12db 	movw	r2, #475	; 0x1db
 8003ec6:	4906      	ldr	r1, [pc, #24]	; (8003ee0 <memp_free+0x24>)
 8003ec8:	4806      	ldr	r0, [pc, #24]	; (8003ee4 <memp_free+0x28>)
 8003eca:	f005 bd93 	b.w	80099f4 <iprintf>

  if (mem == NULL) {
 8003ece:	b121      	cbz	r1, 8003eda <memp_free+0x1e>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8003ed0:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <memp_free+0x2c>)
 8003ed2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003ed6:	f7ff bf5b 	b.w	8003d90 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8003eda:	4770      	bx	lr
 8003edc:	0800d338 	.word	0x0800d338
 8003ee0:	0800d3dc 	.word	0x0800d3dc
 8003ee4:	0800d278 	.word	0x0800d278
 8003ee8:	0800d414 	.word	0x0800d414

08003eec <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8003eec:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
netif_issue_reports(struct netif* netif, u8_t report_type)
 8003ef0:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8003ef2:	071b      	lsls	r3, r3, #28
 8003ef4:	d502      	bpl.n	8003efc <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 8003ef6:	3104      	adds	r1, #4
 8003ef8:	f003 bdc0 	b.w	8007a7c <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8003efc:	4770      	bx	lr

08003efe <netif_init>:
}
 8003efe:	4770      	bx	lr

08003f00 <netif_set_ipaddr>:
{
 8003f00:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f02:	4604      	mov	r4, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8003f04:	460d      	mov	r5, r1
 8003f06:	b1b1      	cbz	r1, 8003f36 <netif_set_ipaddr+0x36>
 8003f08:	680b      	ldr	r3, [r1, #0]
 8003f0a:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8003f0c:	9a01      	ldr	r2, [sp, #4]
 8003f0e:	6863      	ldr	r3, [r4, #4]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d00e      	beq.n	8003f32 <netif_set_ipaddr+0x32>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8003f14:	1d26      	adds	r6, r4, #4
 8003f16:	a901      	add	r1, sp, #4
 8003f18:	4630      	mov	r0, r6
 8003f1a:	f001 fa51 	bl	80053c0 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8003f1e:	a901      	add	r1, sp, #4
 8003f20:	4630      	mov	r0, r6
 8003f22:	f003 fbd5 	bl	80076d0 <udp_netif_ip_addr_changed>
    raw_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8003f26:	a901      	add	r1, sp, #4
 8003f28:	4630      	mov	r0, r6
 8003f2a:	f000 fc71 	bl	8004810 <raw_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8003f2e:	b92d      	cbnz	r5, 8003f3c <netif_set_ipaddr+0x3c>
 8003f30:	6065      	str	r5, [r4, #4]
}
 8003f32:	b002      	add	sp, #8
 8003f34:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8003f36:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <netif_set_ipaddr+0x4c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	e7e6      	b.n	8003f0a <netif_set_ipaddr+0xa>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8003f3c:	682b      	ldr	r3, [r5, #0]
 8003f3e:	6063      	str	r3, [r4, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0f6      	beq.n	8003f32 <netif_set_ipaddr+0x32>
 8003f44:	4620      	mov	r0, r4
 8003f46:	f7ff ffd1 	bl	8003eec <netif_issue_reports.part.0>
}
 8003f4a:	e7f2      	b.n	8003f32 <netif_set_ipaddr+0x32>
 8003f4c:	0800e424 	.word	0x0800e424

08003f50 <netif_set_addr>:
{
 8003f50:	b570      	push	{r4, r5, r6, lr}
 8003f52:	4606      	mov	r6, r0
 8003f54:	4615      	mov	r5, r2
 8003f56:	461c      	mov	r4, r3
  if (ip4_addr_isany(ipaddr)) {
 8003f58:	b109      	cbz	r1, 8003f5e <netif_set_addr+0xe>
 8003f5a:	680b      	ldr	r3, [r1, #0]
 8003f5c:	b94b      	cbnz	r3, 8003f72 <netif_set_addr+0x22>
    netif_set_ipaddr(netif, ipaddr);
 8003f5e:	4630      	mov	r0, r6
 8003f60:	f7ff ffce 	bl	8003f00 <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8003f64:	b105      	cbz	r5, 8003f68 <netif_set_addr+0x18>
 8003f66:	682d      	ldr	r5, [r5, #0]
 8003f68:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8003f6a:	b104      	cbz	r4, 8003f6e <netif_set_addr+0x1e>
 8003f6c:	6824      	ldr	r4, [r4, #0]
 8003f6e:	60f4      	str	r4, [r6, #12]
}
 8003f70:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8003f72:	b102      	cbz	r2, 8003f76 <netif_set_addr+0x26>
 8003f74:	6815      	ldr	r5, [r2, #0]
 8003f76:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8003f78:	b104      	cbz	r4, 8003f7c <netif_set_addr+0x2c>
 8003f7a:	6824      	ldr	r4, [r4, #0]
 8003f7c:	60f4      	str	r4, [r6, #12]
    netif_set_ipaddr(netif, ipaddr);
 8003f7e:	4630      	mov	r0, r6
}
 8003f80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 8003f84:	f7ff bfbc 	b.w	8003f00 <netif_set_ipaddr>

08003f88 <netif_add>:
{
 8003f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f8c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003f8e:	4604      	mov	r4, r0
 8003f90:	460f      	mov	r7, r1
 8003f92:	4690      	mov	r8, r2
 8003f94:	4699      	mov	r9, r3
  LWIP_ASSERT("No init function given", init != NULL);
 8003f96:	b92e      	cbnz	r6, 8003fa4 <netif_add+0x1c>
 8003f98:	4b15      	ldr	r3, [pc, #84]	; (8003ff0 <netif_add+0x68>)
 8003f9a:	22fb      	movs	r2, #251	; 0xfb
 8003f9c:	4915      	ldr	r1, [pc, #84]	; (8003ff4 <netif_add+0x6c>)
 8003f9e:	4816      	ldr	r0, [pc, #88]	; (8003ff8 <netif_add+0x70>)
 8003fa0:	f005 fd28 	bl	80099f4 <iprintf>
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8003fa4:	2303      	movs	r3, #3
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8003fa6:	2500      	movs	r5, #0
  netif->num = netif_num++;
 8003fa8:	4a14      	ldr	r2, [pc, #80]	; (8003ffc <netif_add+0x74>)
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8003faa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->state = state;
 8003fae:	9b08      	ldr	r3, [sp, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8003fb0:	4620      	mov	r0, r4
  netif->state = state;
 8003fb2:	6223      	str	r3, [r4, #32]
  netif->num = netif_num++;
 8003fb4:	7813      	ldrb	r3, [r2, #0]
  ip_addr_set_zero_ip4(&netif->netmask);
 8003fb6:	e9c4 5501 	strd	r5, r5, [r4, #4]
  netif->num = netif_num++;
 8003fba:	1c59      	adds	r1, r3, #1
 8003fbc:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  netif->input = input;
 8003fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  netif->num = netif_num++;
 8003fc2:	7011      	strb	r1, [r2, #0]
  netif->input = input;
 8003fc4:	6123      	str	r3, [r4, #16]
  ip_addr_set_zero_ip4(&netif->gw);
 8003fc6:	60e5      	str	r5, [r4, #12]
  netif->flags = 0;
 8003fc8:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
  netif->link_callback = NULL;
 8003fcc:	61e5      	str	r5, [r4, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8003fce:	464b      	mov	r3, r9
 8003fd0:	4642      	mov	r2, r8
 8003fd2:	4639      	mov	r1, r7
 8003fd4:	f7ff ffbc 	bl	8003f50 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8003fd8:	4620      	mov	r0, r4
 8003fda:	47b0      	blx	r6
 8003fdc:	b930      	cbnz	r0, 8003fec <netif_add+0x64>
  netif->next = netif_list;
 8003fde:	4b08      	ldr	r3, [pc, #32]	; (8004000 <netif_add+0x78>)
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 8003fe4:	601c      	str	r4, [r3, #0]
}
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8003fec:	462c      	mov	r4, r5
 8003fee:	e7fa      	b.n	8003fe6 <netif_add+0x5e>
 8003ff0:	0800d4a2 	.word	0x0800d4a2
 8003ff4:	0800d4d3 	.word	0x0800d4d3
 8003ff8:	0800d278 	.word	0x0800d278
 8003ffc:	20000d18 	.word	0x20000d18
 8004000:	200060d8 	.word	0x200060d8

08004004 <netif_set_default>:
  netif_default = netif;
 8004004:	4b01      	ldr	r3, [pc, #4]	; (800400c <netif_set_default+0x8>)
 8004006:	6018      	str	r0, [r3, #0]
}
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	200060dc 	.word	0x200060dc

08004010 <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004010:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
 8004014:	07d1      	lsls	r1, r2, #31
 8004016:	d409      	bmi.n	800402c <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 8004018:	f042 0101 	orr.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800401c:	0752      	lsls	r2, r2, #29
    netif->flags |= NETIF_FLAG_UP;
 800401e:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8004022:	d503      	bpl.n	800402c <netif_set_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004024:	6843      	ldr	r3, [r0, #4]
 8004026:	b10b      	cbz	r3, 800402c <netif_set_up+0x1c>
 8004028:	f7ff bf60 	b.w	8003eec <netif_issue_reports.part.0>
}
 800402c:	4770      	bx	lr

0800402e <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 800402e:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8004032:	07d9      	lsls	r1, r3, #31
 8004034:	d507      	bpl.n	8004046 <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 8004036:	f023 0101 	bic.w	r1, r3, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800403a:	071b      	lsls	r3, r3, #28
    netif->flags &= ~NETIF_FLAG_UP;
 800403c:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004040:	d501      	bpl.n	8004046 <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 8004042:	f003 bc6f 	b.w	8007924 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004046:	4770      	bx	lr

08004048 <netif_set_link_callback>:
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
  if (netif) {
 8004048:	b100      	cbz	r0, 800404c <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 800404a:	61c1      	str	r1, [r0, #28]
  }
}
 800404c:	4770      	bx	lr
	...

08004050 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8004050:	b570      	push	{r4, r5, r6, lr}
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004052:	4604      	mov	r4, r0
 8004054:	bb70      	cbnz	r0, 80040b4 <pbuf_header_impl+0x64>
 8004056:	4b20      	ldr	r3, [pc, #128]	; (80040d8 <pbuf_header_impl+0x88>)
 8004058:	f240 223f 	movw	r2, #575	; 0x23f
 800405c:	491f      	ldr	r1, [pc, #124]	; (80040dc <pbuf_header_impl+0x8c>)
 800405e:	4820      	ldr	r0, [pc, #128]	; (80040e0 <pbuf_header_impl+0x90>)
 8004060:	f005 fcc8 	bl	80099f4 <iprintf>
  p->tot_len += header_size_increment;

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8004064:	2000      	movs	r0, #0
}
 8004066:	bd70      	pop	{r4, r5, r6, pc}
    increment_magnitude = (u16_t)header_size_increment;
 8004068:	461d      	mov	r5, r3
  type = p->type;
 800406a:	7b26      	ldrb	r6, [r4, #12]
  payload = p->payload;
 800406c:	6860      	ldr	r0, [r4, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800406e:	b10e      	cbz	r6, 8004074 <pbuf_header_impl+0x24>
 8004070:	2e03      	cmp	r6, #3
 8004072:	d106      	bne.n	8004082 <pbuf_header_impl+0x32>
    p->payload = (u8_t *)p->payload - header_size_increment;
 8004074:	1a40      	subs	r0, r0, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004076:	f104 0210 	add.w	r2, r4, #16
 800407a:	4290      	cmp	r0, r2
 800407c:	d20a      	bcs.n	8004094 <pbuf_header_impl+0x44>
      return 1;
 800407e:	2001      	movs	r0, #1
 8004080:	e7f1      	b.n	8004066 <pbuf_header_impl+0x16>
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8004082:	3e01      	subs	r6, #1
 8004084:	2e01      	cmp	r6, #1
 8004086:	d810      	bhi.n	80040aa <pbuf_header_impl+0x5a>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8004088:	2900      	cmp	r1, #0
 800408a:	da0b      	bge.n	80040a4 <pbuf_header_impl+0x54>
 800408c:	8962      	ldrh	r2, [r4, #10]
 800408e:	42aa      	cmp	r2, r5
 8004090:	d3f5      	bcc.n	800407e <pbuf_header_impl+0x2e>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8004092:	1a40      	subs	r0, r0, r1
  p->len += header_size_increment;
 8004094:	8962      	ldrh	r2, [r4, #10]
    p->payload = (u8_t *)p->payload - header_size_increment;
 8004096:	6060      	str	r0, [r4, #4]
  p->len += header_size_increment;
 8004098:	441a      	add	r2, r3
 800409a:	8162      	strh	r2, [r4, #10]
  p->tot_len += header_size_increment;
 800409c:	8922      	ldrh	r2, [r4, #8]
 800409e:	4413      	add	r3, r2
 80040a0:	8123      	strh	r3, [r4, #8]
 80040a2:	e7df      	b.n	8004064 <pbuf_header_impl+0x14>
    } else if ((header_size_increment > 0) && force) {
 80040a4:	2a00      	cmp	r2, #0
 80040a6:	d1f4      	bne.n	8004092 <pbuf_header_impl+0x42>
 80040a8:	e7e9      	b.n	800407e <pbuf_header_impl+0x2e>
    LWIP_ASSERT("bad pbuf type", 0);
 80040aa:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <pbuf_header_impl+0x88>)
 80040ac:	f240 2277 	movw	r2, #631	; 0x277
 80040b0:	490c      	ldr	r1, [pc, #48]	; (80040e4 <pbuf_header_impl+0x94>)
 80040b2:	e00c      	b.n	80040ce <pbuf_header_impl+0x7e>
  if ((header_size_increment == 0) || (p == NULL)) {
 80040b4:	2900      	cmp	r1, #0
 80040b6:	d0d5      	beq.n	8004064 <pbuf_header_impl+0x14>
 80040b8:	b28b      	uxth	r3, r1
  if (header_size_increment < 0) {
 80040ba:	dad5      	bge.n	8004068 <pbuf_header_impl+0x18>
    increment_magnitude = (u16_t)-header_size_increment;
 80040bc:	425d      	negs	r5, r3
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80040be:	8960      	ldrh	r0, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 80040c0:	b2ad      	uxth	r5, r5
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80040c2:	42a8      	cmp	r0, r5
 80040c4:	d2d1      	bcs.n	800406a <pbuf_header_impl+0x1a>
 80040c6:	f240 2247 	movw	r2, #583	; 0x247
 80040ca:	4b03      	ldr	r3, [pc, #12]	; (80040d8 <pbuf_header_impl+0x88>)
 80040cc:	4906      	ldr	r1, [pc, #24]	; (80040e8 <pbuf_header_impl+0x98>)
    LWIP_ASSERT("bad pbuf type", 0);
 80040ce:	4804      	ldr	r0, [pc, #16]	; (80040e0 <pbuf_header_impl+0x90>)
 80040d0:	f005 fc90 	bl	80099f4 <iprintf>
 80040d4:	e7d3      	b.n	800407e <pbuf_header_impl+0x2e>
 80040d6:	bf00      	nop
 80040d8:	0800d74f 	.word	0x0800d74f
 80040dc:	0800d7b9 	.word	0x0800d7b9
 80040e0:	0800d278 	.word	0x0800d278
 80040e4:	0800d79d 	.word	0x0800d79d
 80040e8:	0800d77f 	.word	0x0800d77f

080040ec <pbuf_free_ooseq>:
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80040ec:	2200      	movs	r2, #0
 80040ee:	4b07      	ldr	r3, [pc, #28]	; (800410c <pbuf_free_ooseq+0x20>)
{
 80040f0:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80040f2:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80040f4:	4b06      	ldr	r3, [pc, #24]	; (8004110 <pbuf_free_ooseq+0x24>)
 80040f6:	681c      	ldr	r4, [r3, #0]
 80040f8:	b12c      	cbz	r4, 8004106 <pbuf_free_ooseq+0x1a>
    if (NULL != pcb->ooseq) {
 80040fa:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80040fc:	b120      	cbz	r0, 8004108 <pbuf_free_ooseq+0x1c>
      tcp_segs_free(pcb->ooseq);
 80040fe:	f000 fc47 	bl	8004990 <tcp_segs_free>
      pcb->ooseq = NULL;
 8004102:	2300      	movs	r3, #0
 8004104:	6723      	str	r3, [r4, #112]	; 0x70
}
 8004106:	bd10      	pop	{r4, pc}
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004108:	68e4      	ldr	r4, [r4, #12]
 800410a:	e7f5      	b.n	80040f8 <pbuf_free_ooseq+0xc>
 800410c:	200060e0 	.word	0x200060e0
 8004110:	200060e8 	.word	0x200060e8

08004114 <pbuf_alloced_custom>:
{
 8004114:	b570      	push	{r4, r5, r6, lr}
 8004116:	9d04      	ldr	r5, [sp, #16]
  switch (l) {
 8004118:	2804      	cmp	r0, #4
 800411a:	d81e      	bhi.n	800415a <pbuf_alloced_custom+0x46>
 800411c:	e8df f000 	tbb	[pc, r0]
 8004120:	1b280326 	.word	0x1b280326
 8004124:	1b          	.byte	0x1b
 8004125:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8004126:	2022      	movs	r0, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004128:	3003      	adds	r0, #3
 800412a:	f020 0403 	bic.w	r4, r0, #3
 800412e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8004132:	190e      	adds	r6, r1, r4
 8004134:	4286      	cmp	r6, r0
 8004136:	f04f 0000 	mov.w	r0, #0
 800413a:	d816      	bhi.n	800416a <pbuf_alloced_custom+0x56>
  p->pbuf.next = NULL;
 800413c:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 800413e:	b1cd      	cbz	r5, 8004174 <pbuf_alloced_custom+0x60>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004140:	442c      	add	r4, r5
 8004142:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8004144:	2002      	movs	r0, #2
  p->pbuf.type = type;
 8004146:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8004148:	2201      	movs	r2, #1
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800414a:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800414c:	8119      	strh	r1, [r3, #8]
 800414e:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 8004150:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8004152:	4618      	mov	r0, r3
 8004154:	e009      	b.n	800416a <pbuf_alloced_custom+0x56>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8004156:	2000      	movs	r0, #0
    break;
 8004158:	e7e6      	b.n	8004128 <pbuf_alloced_custom+0x14>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800415a:	4b07      	ldr	r3, [pc, #28]	; (8004178 <pbuf_alloced_custom+0x64>)
 800415c:	f240 12c5 	movw	r2, #453	; 0x1c5
 8004160:	4906      	ldr	r1, [pc, #24]	; (800417c <pbuf_alloced_custom+0x68>)
 8004162:	4807      	ldr	r0, [pc, #28]	; (8004180 <pbuf_alloced_custom+0x6c>)
 8004164:	f005 fc46 	bl	80099f4 <iprintf>
    return NULL;
 8004168:	2000      	movs	r0, #0
}
 800416a:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800416c:	2036      	movs	r0, #54	; 0x36
 800416e:	e7db      	b.n	8004128 <pbuf_alloced_custom+0x14>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8004170:	200e      	movs	r0, #14
 8004172:	e7d9      	b.n	8004128 <pbuf_alloced_custom+0x14>
    p->pbuf.payload = NULL;
 8004174:	605d      	str	r5, [r3, #4]
 8004176:	e7e5      	b.n	8004144 <pbuf_alloced_custom+0x30>
 8004178:	0800d74f 	.word	0x0800d74f
 800417c:	0800d592 	.word	0x0800d592
 8004180:	0800d278 	.word	0x0800d278

08004184 <pbuf_header>:
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
 8004184:	2200      	movs	r2, #0
 8004186:	f7ff bf63 	b.w	8004050 <pbuf_header_impl>

0800418a <pbuf_header_force>:
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 1);
 800418a:	2201      	movs	r2, #1
 800418c:	f7ff bf60 	b.w	8004050 <pbuf_header_impl>

08004190 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8004190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8004194:	4604      	mov	r4, r0
 8004196:	b950      	cbnz	r0, 80041ae <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004198:	4b28      	ldr	r3, [pc, #160]	; (800423c <pbuf_free+0xac>)
 800419a:	f240 22d2 	movw	r2, #722	; 0x2d2
 800419e:	4928      	ldr	r1, [pc, #160]	; (8004240 <pbuf_free+0xb0>)
 80041a0:	4828      	ldr	r0, [pc, #160]	; (8004244 <pbuf_free+0xb4>)
 80041a2:	f005 fc27 	bl	80099f4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80041a6:	4625      	mov	r5, r4
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 80041a8:	4628      	mov	r0, r5
 80041aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 80041ae:	7b03      	ldrb	r3, [r0, #12]
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d906      	bls.n	80041c2 <pbuf_free+0x32>
 80041b4:	4b21      	ldr	r3, [pc, #132]	; (800423c <pbuf_free+0xac>)
 80041b6:	f240 22de 	movw	r2, #734	; 0x2de
 80041ba:	4923      	ldr	r1, [pc, #140]	; (8004248 <pbuf_free+0xb8>)
 80041bc:	4821      	ldr	r0, [pc, #132]	; (8004244 <pbuf_free+0xb4>)
 80041be:	f005 fc19 	bl	80099f4 <iprintf>
{
 80041c2:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80041c4:	4e1d      	ldr	r6, [pc, #116]	; (800423c <pbuf_free+0xac>)
 80041c6:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8004250 <pbuf_free+0xc0>
 80041ca:	4f1e      	ldr	r7, [pc, #120]	; (8004244 <pbuf_free+0xb4>)
 80041cc:	89e3      	ldrh	r3, [r4, #14]
 80041ce:	b933      	cbnz	r3, 80041de <pbuf_free+0x4e>
 80041d0:	4633      	mov	r3, r6
 80041d2:	f240 22eb 	movw	r2, #747	; 0x2eb
 80041d6:	4641      	mov	r1, r8
 80041d8:	4638      	mov	r0, r7
 80041da:	f005 fc0b 	bl	80099f4 <iprintf>
    ref = --(p->ref);
 80041de:	89e3      	ldrh	r3, [r4, #14]
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	81e3      	strh	r3, [r4, #14]
    if (ref == 0) {
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1de      	bne.n	80041a8 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80041ea:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 80041ec:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80041f0:	079b      	lsls	r3, r3, #30
 80041f2:	d511      	bpl.n	8004218 <pbuf_free+0x88>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80041f4:	6923      	ldr	r3, [r4, #16]
 80041f6:	b933      	cbnz	r3, 8004206 <pbuf_free+0x76>
 80041f8:	4633      	mov	r3, r6
 80041fa:	f240 22f9 	movw	r2, #761	; 0x2f9
 80041fe:	4913      	ldr	r1, [pc, #76]	; (800424c <pbuf_free+0xbc>)
 8004200:	4638      	mov	r0, r7
 8004202:	f005 fbf7 	bl	80099f4 <iprintf>
        pc->custom_free_function(p);
 8004206:	6923      	ldr	r3, [r4, #16]
 8004208:	4620      	mov	r0, r4
 800420a:	4798      	blx	r3
  while (p != NULL) {
 800420c:	464c      	mov	r4, r9
      count++;
 800420e:	3501      	adds	r5, #1
 8004210:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 8004212:	2c00      	cmp	r4, #0
 8004214:	d1da      	bne.n	80041cc <pbuf_free+0x3c>
 8004216:	e7c7      	b.n	80041a8 <pbuf_free+0x18>
      type = p->type;
 8004218:	7b23      	ldrb	r3, [r4, #12]
        if (type == PBUF_POOL) {
 800421a:	2b03      	cmp	r3, #3
 800421c:	d104      	bne.n	8004228 <pbuf_free+0x98>
          memp_free(MEMP_PBUF_POOL, p);
 800421e:	4621      	mov	r1, r4
 8004220:	2009      	movs	r0, #9
          memp_free(MEMP_PBUF, p);
 8004222:	f7ff fe4b 	bl	8003ebc <memp_free>
 8004226:	e7f1      	b.n	800420c <pbuf_free+0x7c>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8004228:	3b01      	subs	r3, #1
 800422a:	2b01      	cmp	r3, #1
 800422c:	d802      	bhi.n	8004234 <pbuf_free+0xa4>
          memp_free(MEMP_PBUF, p);
 800422e:	4621      	mov	r1, r4
 8004230:	2008      	movs	r0, #8
 8004232:	e7f6      	b.n	8004222 <pbuf_free+0x92>
          mem_free(p);
 8004234:	4620      	mov	r0, r4
 8004236:	f7ff fd5b 	bl	8003cf0 <mem_free>
 800423a:	e7e7      	b.n	800420c <pbuf_free+0x7c>
 800423c:	0800d74f 	.word	0x0800d74f
 8004240:	0800d7b9 	.word	0x0800d7b9
 8004244:	0800d278 	.word	0x0800d278
 8004248:	0800d703 	.word	0x0800d703
 800424c:	0800d72e 	.word	0x0800d72e
 8004250:	0800d718 	.word	0x0800d718

08004254 <pbuf_alloc>:
{
 8004254:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004258:	460e      	mov	r6, r1
 800425a:	4617      	mov	r7, r2
  switch (layer) {
 800425c:	2804      	cmp	r0, #4
 800425e:	d80e      	bhi.n	800427e <pbuf_alloc+0x2a>
 8004260:	e8df f000 	tbb	[pc, r0]
 8004264:	0b170315 	.word	0x0b170315
 8004268:	0b          	.byte	0x0b
 8004269:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800426a:	2522      	movs	r5, #34	; 0x22
  switch (type) {
 800426c:	2f03      	cmp	r7, #3
 800426e:	f200 80c0 	bhi.w	80043f2 <pbuf_alloc+0x19e>
 8004272:	e8df f007 	tbb	[pc, r7]
 8004276:	af97      	.short	0xaf97
 8004278:	10af      	.short	0x10af
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800427a:	2500      	movs	r5, #0
    break;
 800427c:	e7f6      	b.n	800426c <pbuf_alloc+0x18>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800427e:	f44f 728b 	mov.w	r2, #278	; 0x116
 8004282:	4b5e      	ldr	r3, [pc, #376]	; (80043fc <pbuf_alloc+0x1a8>)
 8004284:	495e      	ldr	r1, [pc, #376]	; (8004400 <pbuf_alloc+0x1ac>)
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004286:	485f      	ldr	r0, [pc, #380]	; (8004404 <pbuf_alloc+0x1b0>)
 8004288:	f005 fbb4 	bl	80099f4 <iprintf>
 800428c:	e050      	b.n	8004330 <pbuf_alloc+0xdc>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800428e:	2536      	movs	r5, #54	; 0x36
 8004290:	e7ec      	b.n	800426c <pbuf_alloc+0x18>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8004292:	250e      	movs	r5, #14
 8004294:	e7ea      	b.n	800426c <pbuf_alloc+0x18>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004296:	f240 121d 	movw	r2, #285	; 0x11d
 800429a:	4958      	ldr	r1, [pc, #352]	; (80043fc <pbuf_alloc+0x1a8>)
 800429c:	2009      	movs	r0, #9
 800429e:	f7ff fdf1 	bl	8003e84 <memp_malloc_fn>
    if (p == NULL) {
 80042a2:	4604      	mov	r4, r0
 80042a4:	b928      	cbnz	r0, 80042b2 <pbuf_alloc+0x5e>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80042a6:	2201      	movs	r2, #1
 80042a8:	4b57      	ldr	r3, [pc, #348]	; (8004408 <pbuf_alloc+0x1b4>)
 80042aa:	701a      	strb	r2, [r3, #0]
}
 80042ac:	4620      	mov	r0, r4
 80042ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p->type = type;
 80042b2:	2303      	movs	r3, #3
 80042b4:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
 80042b6:	2300      	movs	r3, #0
 80042b8:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80042ba:	1943      	adds	r3, r0, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80042bc:	3503      	adds	r5, #3
 80042be:	f025 0503 	bic.w	r5, r5, #3
 80042c2:	f5c5 7514 	rsb	r5, r5, #592	; 0x250
 80042c6:	42b5      	cmp	r5, r6
 80042c8:	bf28      	it	cs
 80042ca:	4635      	movcs	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80042cc:	3313      	adds	r3, #19
 80042ce:	f023 0303 	bic.w	r3, r3, #3
 80042d2:	6043      	str	r3, [r0, #4]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80042d4:	f500 7718 	add.w	r7, r0, #608	; 0x260
 80042d8:	442b      	add	r3, r5
 80042da:	429f      	cmp	r7, r3
    p->tot_len = length;
 80042dc:	8106      	strh	r6, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80042de:	8145      	strh	r5, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80042e0:	d206      	bcs.n	80042f0 <pbuf_alloc+0x9c>
 80042e2:	4b46      	ldr	r3, [pc, #280]	; (80043fc <pbuf_alloc+0x1a8>)
 80042e4:	f44f 7298 	mov.w	r2, #304	; 0x130
 80042e8:	4948      	ldr	r1, [pc, #288]	; (800440c <pbuf_alloc+0x1b8>)
 80042ea:	4846      	ldr	r0, [pc, #280]	; (8004404 <pbuf_alloc+0x1b0>)
 80042ec:	f005 fb82 	bl	80099f4 <iprintf>
    p->ref = 1;
 80042f0:	2301      	movs	r3, #1
    while (rem_len > 0) {
 80042f2:	46a3      	mov	fp, r4
    p->ref = 1;
 80042f4:	81e3      	strh	r3, [r4, #14]
    rem_len = length - p->len;
 80042f6:	8963      	ldrh	r3, [r4, #10]
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80042f8:	f8df 8100 	ldr.w	r8, [pc, #256]	; 80043fc <pbuf_alloc+0x1a8>
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80042fc:	f8df a118 	ldr.w	sl, [pc, #280]	; 8004418 <pbuf_alloc+0x1c4>
 8004300:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8004404 <pbuf_alloc+0x1b0>
    rem_len = length - p->len;
 8004304:	1af6      	subs	r6, r6, r3
    while (rem_len > 0) {
 8004306:	2e00      	cmp	r6, #0
 8004308:	dc04      	bgt.n	8004314 <pbuf_alloc+0xc0>
  p->ref = 1;
 800430a:	2301      	movs	r3, #1
 800430c:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 800430e:	2300      	movs	r3, #0
 8004310:	7363      	strb	r3, [r4, #13]
  return p;
 8004312:	e7cb      	b.n	80042ac <pbuf_alloc+0x58>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004314:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8004318:	4641      	mov	r1, r8
 800431a:	2009      	movs	r0, #9
 800431c:	f7ff fdb2 	bl	8003e84 <memp_malloc_fn>
      if (q == NULL) {
 8004320:	4605      	mov	r5, r0
 8004322:	b938      	cbnz	r0, 8004334 <pbuf_alloc+0xe0>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004324:	2201      	movs	r2, #1
 8004326:	4b38      	ldr	r3, [pc, #224]	; (8004408 <pbuf_alloc+0x1b4>)
        pbuf_free(p);
 8004328:	4620      	mov	r0, r4
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800432a:	701a      	strb	r2, [r3, #0]
        pbuf_free(p);
 800432c:	f7ff ff30 	bl	8004190 <pbuf_free>
    return NULL;
 8004330:	2400      	movs	r4, #0
 8004332:	e7bb      	b.n	80042ac <pbuf_alloc+0x58>
      q->type = type;
 8004334:	2303      	movs	r3, #3
 8004336:	7303      	strb	r3, [r0, #12]
      q->flags = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 800433c:	6003      	str	r3, [r0, #0]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800433e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004342:	429e      	cmp	r6, r3
      r->next = q;
 8004344:	f8cb 0000 	str.w	r0, [fp]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8004348:	d106      	bne.n	8004358 <pbuf_alloc+0x104>
 800434a:	4643      	mov	r3, r8
 800434c:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8004350:	4651      	mov	r1, sl
 8004352:	4648      	mov	r0, r9
 8004354:	f005 fb4e 	bl	80099f4 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8004358:	b2b3      	uxth	r3, r6
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800435a:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
      q->tot_len = (u16_t)rem_len;
 800435e:	812b      	strh	r3, [r5, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8004360:	bf28      	it	cs
 8004362:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8004366:	816b      	strh	r3, [r5, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8004368:	f105 0310 	add.w	r3, r5, #16
 800436c:	606b      	str	r3, [r5, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800436e:	079b      	lsls	r3, r3, #30
 8004370:	d006      	beq.n	8004380 <pbuf_alloc+0x12c>
 8004372:	4643      	mov	r3, r8
 8004374:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8004378:	4925      	ldr	r1, [pc, #148]	; (8004410 <pbuf_alloc+0x1bc>)
 800437a:	4648      	mov	r0, r9
 800437c:	f005 fb3a 	bl	80099f4 <iprintf>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8004380:	8962      	ldrh	r2, [r4, #10]
 8004382:	6863      	ldr	r3, [r4, #4]
 8004384:	4413      	add	r3, r2
 8004386:	429f      	cmp	r7, r3
 8004388:	d206      	bcs.n	8004398 <pbuf_alloc+0x144>
 800438a:	4643      	mov	r3, r8
 800438c:	f240 1255 	movw	r2, #341	; 0x155
 8004390:	491e      	ldr	r1, [pc, #120]	; (800440c <pbuf_alloc+0x1b8>)
 8004392:	4648      	mov	r0, r9
 8004394:	f005 fb2e 	bl	80099f4 <iprintf>
      q->ref = 1;
 8004398:	2301      	movs	r3, #1
 800439a:	81eb      	strh	r3, [r5, #14]
      rem_len -= q->len;
 800439c:	896b      	ldrh	r3, [r5, #10]
 800439e:	46ab      	mov	fp, r5
 80043a0:	1af6      	subs	r6, r6, r3
 80043a2:	e7b0      	b.n	8004306 <pbuf_alloc+0xb2>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 80043a4:	f105 0013 	add.w	r0, r5, #19
 80043a8:	1cf3      	adds	r3, r6, #3
 80043aa:	f023 0303 	bic.w	r3, r3, #3
 80043ae:	f020 0003 	bic.w	r0, r0, #3
      p = (struct pbuf*)mem_malloc(alloc_len);
 80043b2:	4418      	add	r0, r3
 80043b4:	f7ff fc84 	bl	8003cc0 <mem_malloc>
 80043b8:	2700      	movs	r7, #0
    if (p == NULL) {
 80043ba:	4604      	mov	r4, r0
 80043bc:	2800      	cmp	r0, #0
 80043be:	d0b7      	beq.n	8004330 <pbuf_alloc+0xdc>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 80043c0:	4405      	add	r5, r0
 80043c2:	3513      	adds	r5, #19
 80043c4:	f025 0503 	bic.w	r5, r5, #3
 80043c8:	6045      	str	r5, [r0, #4]
    p->len = p->tot_len = length;
 80043ca:	8106      	strh	r6, [r0, #8]
 80043cc:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 80043ce:	6007      	str	r7, [r0, #0]
    p->type = type;
 80043d0:	7327      	strb	r7, [r4, #12]
    break;
 80043d2:	e79a      	b.n	800430a <pbuf_alloc+0xb6>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80043d4:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 80043d8:	4908      	ldr	r1, [pc, #32]	; (80043fc <pbuf_alloc+0x1a8>)
 80043da:	2008      	movs	r0, #8
 80043dc:	f7ff fd52 	bl	8003e84 <memp_malloc_fn>
    if (p == NULL) {
 80043e0:	4604      	mov	r4, r0
 80043e2:	2800      	cmp	r0, #0
 80043e4:	d0a4      	beq.n	8004330 <pbuf_alloc+0xdc>
    p->payload = NULL;
 80043e6:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 80043e8:	8106      	strh	r6, [r0, #8]
    p->payload = NULL;
 80043ea:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 80043ec:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 80043ee:	6003      	str	r3, [r0, #0]
 80043f0:	e7ee      	b.n	80043d0 <pbuf_alloc+0x17c>
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80043f2:	4b02      	ldr	r3, [pc, #8]	; (80043fc <pbuf_alloc+0x1a8>)
 80043f4:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80043f8:	4906      	ldr	r1, [pc, #24]	; (8004414 <pbuf_alloc+0x1c0>)
 80043fa:	e744      	b.n	8004286 <pbuf_alloc+0x32>
 80043fc:	0800d74f 	.word	0x0800d74f
 8004400:	0800d4ea 	.word	0x0800d4ea
 8004404:	0800d278 	.word	0x0800d278
 8004408:	200060e0 	.word	0x200060e0
 800440c:	0800d505 	.word	0x0800d505
 8004410:	0800d54a 	.word	0x0800d54a
 8004414:	0800d577 	.word	0x0800d577
 8004418:	0800d536 	.word	0x0800d536

0800441c <pbuf_realloc>:
{
 800441c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004420:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004422:	4604      	mov	r4, r0
 8004424:	b930      	cbnz	r0, 8004434 <pbuf_realloc+0x18>
 8004426:	4b2e      	ldr	r3, [pc, #184]	; (80044e0 <pbuf_realloc+0xc4>)
 8004428:	f240 12f3 	movw	r2, #499	; 0x1f3
 800442c:	492d      	ldr	r1, [pc, #180]	; (80044e4 <pbuf_realloc+0xc8>)
 800442e:	482e      	ldr	r0, [pc, #184]	; (80044e8 <pbuf_realloc+0xcc>)
 8004430:	f005 fae0 	bl	80099f4 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8004434:	7b23      	ldrb	r3, [r4, #12]
 8004436:	2b03      	cmp	r3, #3
 8004438:	d906      	bls.n	8004448 <pbuf_realloc+0x2c>
 800443a:	4b29      	ldr	r3, [pc, #164]	; (80044e0 <pbuf_realloc+0xc4>)
 800443c:	f240 12f7 	movw	r2, #503	; 0x1f7
 8004440:	492a      	ldr	r1, [pc, #168]	; (80044ec <pbuf_realloc+0xd0>)
 8004442:	4829      	ldr	r0, [pc, #164]	; (80044e8 <pbuf_realloc+0xcc>)
 8004444:	f005 fad6 	bl	80099f4 <iprintf>
  if (new_len >= p->tot_len) {
 8004448:	8926      	ldrh	r6, [r4, #8]
 800444a:	42ae      	cmp	r6, r5
 800444c:	d945      	bls.n	80044da <pbuf_realloc+0xbe>
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800444e:	4f24      	ldr	r7, [pc, #144]	; (80044e0 <pbuf_realloc+0xc4>)
 8004450:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80044f8 <pbuf_realloc+0xdc>
 8004454:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80044e8 <pbuf_realloc+0xcc>
  grow = new_len - p->tot_len;
 8004458:	1bae      	subs	r6, r5, r6
  while (rem_len > q->len) {
 800445a:	8963      	ldrh	r3, [r4, #10]
 800445c:	42ab      	cmp	r3, r5
 800445e:	d319      	bcc.n	8004494 <pbuf_realloc+0x78>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8004460:	7b22      	ldrb	r2, [r4, #12]
 8004462:	2a00      	cmp	r2, #0
 8004464:	d131      	bne.n	80044ca <pbuf_realloc+0xae>
 8004466:	42ab      	cmp	r3, r5
 8004468:	d02f      	beq.n	80044ca <pbuf_realloc+0xae>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800446a:	7b63      	ldrb	r3, [r4, #13]
 800446c:	079b      	lsls	r3, r3, #30
 800446e:	d42c      	bmi.n	80044ca <pbuf_realloc+0xae>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8004470:	6861      	ldr	r1, [r4, #4]
 8004472:	4620      	mov	r0, r4
 8004474:	1b09      	subs	r1, r1, r4
 8004476:	b289      	uxth	r1, r1
 8004478:	4429      	add	r1, r5
 800447a:	f7ff fc20 	bl	8003cbe <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800447e:	4604      	mov	r4, r0
 8004480:	bb18      	cbnz	r0, 80044ca <pbuf_realloc+0xae>
 8004482:	4b17      	ldr	r3, [pc, #92]	; (80044e0 <pbuf_realloc+0xc4>)
 8004484:	f240 221d 	movw	r2, #541	; 0x21d
 8004488:	4919      	ldr	r1, [pc, #100]	; (80044f0 <pbuf_realloc+0xd4>)
 800448a:	4817      	ldr	r0, [pc, #92]	; (80044e8 <pbuf_realloc+0xcc>)
 800448c:	f005 fab2 	bl	80099f4 <iprintf>
  q->len = rem_len;
 8004490:	8164      	strh	r4, [r4, #10]
 8004492:	deff      	udf	#255	; 0xff
    rem_len -= q->len;
 8004494:	1aed      	subs	r5, r5, r3
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8004496:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800449a:	429e      	cmp	r6, r3
    rem_len -= q->len;
 800449c:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800449e:	dd06      	ble.n	80044ae <pbuf_realloc+0x92>
 80044a0:	463b      	mov	r3, r7
 80044a2:	f240 220b 	movw	r2, #523	; 0x20b
 80044a6:	4649      	mov	r1, r9
 80044a8:	4640      	mov	r0, r8
 80044aa:	f005 faa3 	bl	80099f4 <iprintf>
    q->tot_len += (u16_t)grow;
 80044ae:	8923      	ldrh	r3, [r4, #8]
 80044b0:	4433      	add	r3, r6
 80044b2:	8123      	strh	r3, [r4, #8]
    q = q->next;
 80044b4:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80044b6:	2c00      	cmp	r4, #0
 80044b8:	d1cf      	bne.n	800445a <pbuf_realloc+0x3e>
 80044ba:	463b      	mov	r3, r7
 80044bc:	f240 220f 	movw	r2, #527	; 0x20f
 80044c0:	490c      	ldr	r1, [pc, #48]	; (80044f4 <pbuf_realloc+0xd8>)
 80044c2:	4640      	mov	r0, r8
 80044c4:	f005 fa96 	bl	80099f4 <iprintf>
 80044c8:	e7c7      	b.n	800445a <pbuf_realloc+0x3e>
  if (q->next != NULL) {
 80044ca:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 80044cc:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 80044ce:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 80044d0:	b108      	cbz	r0, 80044d6 <pbuf_realloc+0xba>
    pbuf_free(q->next);
 80044d2:	f7ff fe5d 	bl	8004190 <pbuf_free>
  q->next = NULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	6023      	str	r3, [r4, #0]
}
 80044da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044de:	bf00      	nop
 80044e0:	0800d74f 	.word	0x0800d74f
 80044e4:	0800d7ab 	.word	0x0800d7ab
 80044e8:	0800d278 	.word	0x0800d278
 80044ec:	0800d7c3 	.word	0x0800d7c3
 80044f0:	0800d807 	.word	0x0800d807
 80044f4:	0800d7ef 	.word	0x0800d7ef
 80044f8:	0800d7de 	.word	0x0800d7de

080044fc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80044fc:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 80044fe:	2200      	movs	r2, #0
 8004500:	b290      	uxth	r0, r2
 8004502:	3201      	adds	r2, #1
 8004504:	b903      	cbnz	r3, 8004508 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 8004506:	4770      	bx	lr
    p = p->next;
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	e7f9      	b.n	8004500 <pbuf_clen+0x4>

0800450c <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 800450c:	b158      	cbz	r0, 8004526 <pbuf_ref+0x1a>
    SYS_ARCH_INC(p->ref, 1);
 800450e:	89c3      	ldrh	r3, [r0, #14]
 8004510:	3301      	adds	r3, #1
 8004512:	b29b      	uxth	r3, r3
 8004514:	81c3      	strh	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8004516:	b933      	cbnz	r3, 8004526 <pbuf_ref+0x1a>
 8004518:	4b03      	ldr	r3, [pc, #12]	; (8004528 <pbuf_ref+0x1c>)
 800451a:	f240 3239 	movw	r2, #825	; 0x339
 800451e:	4903      	ldr	r1, [pc, #12]	; (800452c <pbuf_ref+0x20>)
 8004520:	4803      	ldr	r0, [pc, #12]	; (8004530 <pbuf_ref+0x24>)
 8004522:	f005 ba67 	b.w	80099f4 <iprintf>
  }
}
 8004526:	4770      	bx	lr
 8004528:	0800d74f 	.word	0x0800d74f
 800452c:	0800d823 	.word	0x0800d823
 8004530:	0800d278 	.word	0x0800d278

08004534 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8004534:	b570      	push	{r4, r5, r6, lr}
 8004536:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8004538:	4604      	mov	r4, r0
 800453a:	b100      	cbz	r0, 800453e <pbuf_cat+0xa>
 800453c:	b961      	cbnz	r1, 8004558 <pbuf_cat+0x24>
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800453e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8004542:	4b14      	ldr	r3, [pc, #80]	; (8004594 <pbuf_cat+0x60>)
 8004544:	f240 324d 	movw	r2, #845	; 0x34d
 8004548:	4913      	ldr	r1, [pc, #76]	; (8004598 <pbuf_cat+0x64>)
 800454a:	4814      	ldr	r0, [pc, #80]	; (800459c <pbuf_cat+0x68>)
 800454c:	f005 ba52 	b.w	80099f4 <iprintf>
    p->tot_len += t->tot_len;
 8004550:	8929      	ldrh	r1, [r5, #8]
 8004552:	440b      	add	r3, r1
 8004554:	8123      	strh	r3, [r4, #8]
 8004556:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 8004558:	6822      	ldr	r2, [r4, #0]
 800455a:	8923      	ldrh	r3, [r4, #8]
 800455c:	2a00      	cmp	r2, #0
 800455e:	d1f7      	bne.n	8004550 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8004560:	8962      	ldrh	r2, [r4, #10]
 8004562:	429a      	cmp	r2, r3
 8004564:	d006      	beq.n	8004574 <pbuf_cat+0x40>
 8004566:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <pbuf_cat+0x60>)
 8004568:	f240 3255 	movw	r2, #853	; 0x355
 800456c:	490c      	ldr	r1, [pc, #48]	; (80045a0 <pbuf_cat+0x6c>)
 800456e:	480b      	ldr	r0, [pc, #44]	; (800459c <pbuf_cat+0x68>)
 8004570:	f005 fa40 	bl	80099f4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	b133      	cbz	r3, 8004586 <pbuf_cat+0x52>
 8004578:	4b06      	ldr	r3, [pc, #24]	; (8004594 <pbuf_cat+0x60>)
 800457a:	f240 3256 	movw	r2, #854	; 0x356
 800457e:	4909      	ldr	r1, [pc, #36]	; (80045a4 <pbuf_cat+0x70>)
 8004580:	4806      	ldr	r0, [pc, #24]	; (800459c <pbuf_cat+0x68>)
 8004582:	f005 fa37 	bl	80099f4 <iprintf>
  p->tot_len += t->tot_len;
 8004586:	892a      	ldrh	r2, [r5, #8]
 8004588:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 800458a:	6025      	str	r5, [r4, #0]
  p->tot_len += t->tot_len;
 800458c:	4413      	add	r3, r2
 800458e:	8123      	strh	r3, [r4, #8]
}
 8004590:	bd70      	pop	{r4, r5, r6, pc}
 8004592:	bf00      	nop
 8004594:	0800d74f 	.word	0x0800d74f
 8004598:	0800d5b6 	.word	0x0800d5b6
 800459c:	0800d278 	.word	0x0800d278
 80045a0:	0800d5eb 	.word	0x0800d5eb
 80045a4:	0800d618 	.word	0x0800d618

080045a8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80045a8:	b510      	push	{r4, lr}
 80045aa:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 80045ac:	f7ff ffc2 	bl	8004534 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80045b0:	4620      	mov	r0, r4
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80045b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 80045b6:	f7ff bfa9 	b.w	800450c <pbuf_ref>
	...

080045bc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80045bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c0:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80045c2:	4605      	mov	r5, r0
 80045c4:	b120      	cbz	r0, 80045d0 <pbuf_copy+0x14>
 80045c6:	b119      	cbz	r1, 80045d0 <pbuf_copy+0x14>
 80045c8:	8902      	ldrh	r2, [r0, #8]
 80045ca:	890b      	ldrh	r3, [r1, #8]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d20a      	bcs.n	80045e6 <pbuf_copy+0x2a>
 80045d0:	f240 32bd 	movw	r2, #957	; 0x3bd
 80045d4:	4b35      	ldr	r3, [pc, #212]	; (80046ac <pbuf_copy+0xf0>)
 80045d6:	4936      	ldr	r1, [pc, #216]	; (80046b0 <pbuf_copy+0xf4>)
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80045d8:	4836      	ldr	r0, [pc, #216]	; (80046b4 <pbuf_copy+0xf8>)
 80045da:	f005 fa0b 	bl	80099f4 <iprintf>
 80045de:	f06f 000f 	mvn.w	r0, #15
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 80045e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t offset_to=0, offset_from=0, len;
 80045e6:	f04f 0b00 	mov.w	fp, #0
 80045ea:	465f      	mov	r7, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80045ec:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80046ac <pbuf_copy+0xf0>
 80045f0:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 80046c4 <pbuf_copy+0x108>
 80045f4:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 80046b4 <pbuf_copy+0xf8>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80045f8:	896e      	ldrh	r6, [r5, #10]
 80045fa:	8963      	ldrh	r3, [r4, #10]
 80045fc:	1bf6      	subs	r6, r6, r7
 80045fe:	eba3 030b 	sub.w	r3, r3, fp
 8004602:	429e      	cmp	r6, r3
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8004604:	6868      	ldr	r0, [r5, #4]
 8004606:	6861      	ldr	r1, [r4, #4]
      len = p_from->len - offset_from;
 8004608:	bfac      	ite	ge
 800460a:	b29e      	uxthge	r6, r3
      len = p_to->len - offset_to;
 800460c:	b2b6      	uxthlt	r6, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800460e:	4632      	mov	r2, r6
 8004610:	4459      	add	r1, fp
 8004612:	4438      	add	r0, r7
 8004614:	f004 faf7 	bl	8008c06 <memcpy>
    offset_to += len;
 8004618:	4437      	add	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800461a:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 800461c:	b2bf      	uxth	r7, r7
    offset_from += len;
 800461e:	445e      	add	r6, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8004620:	42bb      	cmp	r3, r7
    offset_from += len;
 8004622:	fa1f fb86 	uxth.w	fp, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8004626:	d206      	bcs.n	8004636 <pbuf_copy+0x7a>
 8004628:	4643      	mov	r3, r8
 800462a:	f240 32cd 	movw	r2, #973	; 0x3cd
 800462e:	4651      	mov	r1, sl
 8004630:	4648      	mov	r0, r9
 8004632:	f005 f9df 	bl	80099f4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8004636:	8963      	ldrh	r3, [r4, #10]
 8004638:	455b      	cmp	r3, fp
 800463a:	d206      	bcs.n	800464a <pbuf_copy+0x8e>
 800463c:	4643      	mov	r3, r8
 800463e:	f240 32ce 	movw	r2, #974	; 0x3ce
 8004642:	491d      	ldr	r1, [pc, #116]	; (80046b8 <pbuf_copy+0xfc>)
 8004644:	4648      	mov	r0, r9
 8004646:	f005 f9d5 	bl	80099f4 <iprintf>
    if (offset_from >= p_from->len) {
 800464a:	8963      	ldrh	r3, [r4, #10]
 800464c:	455b      	cmp	r3, fp
    if (offset_to == p_to->len) {
 800464e:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 8004650:	bf9c      	itt	ls
 8004652:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 8004654:	f04f 0b00 	movls.w	fp, #0
    if (offset_to == p_to->len) {
 8004658:	42bb      	cmp	r3, r7
 800465a:	d108      	bne.n	800466e <pbuf_copy+0xb2>
      p_to = p_to->next;
 800465c:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800465e:	b92d      	cbnz	r5, 800466c <pbuf_copy+0xb0>
 8004660:	b314      	cbz	r4, 80046a8 <pbuf_copy+0xec>
 8004662:	4b12      	ldr	r3, [pc, #72]	; (80046ac <pbuf_copy+0xf0>)
 8004664:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8004668:	4914      	ldr	r1, [pc, #80]	; (80046bc <pbuf_copy+0x100>)
 800466a:	e7b5      	b.n	80045d8 <pbuf_copy+0x1c>
      offset_to = 0;
 800466c:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800466e:	b17c      	cbz	r4, 8004690 <pbuf_copy+0xd4>
 8004670:	8962      	ldrh	r2, [r4, #10]
 8004672:	8923      	ldrh	r3, [r4, #8]
 8004674:	429a      	cmp	r2, r3
 8004676:	d10b      	bne.n	8004690 <pbuf_copy+0xd4>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8004678:	6823      	ldr	r3, [r4, #0]
 800467a:	b14b      	cbz	r3, 8004690 <pbuf_copy+0xd4>
 800467c:	f240 32de 	movw	r2, #990	; 0x3de
 8004680:	4b0a      	ldr	r3, [pc, #40]	; (80046ac <pbuf_copy+0xf0>)
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8004682:	490f      	ldr	r1, [pc, #60]	; (80046c0 <pbuf_copy+0x104>)
 8004684:	480b      	ldr	r0, [pc, #44]	; (80046b4 <pbuf_copy+0xf8>)
 8004686:	f005 f9b5 	bl	80099f4 <iprintf>
 800468a:	f06f 0005 	mvn.w	r0, #5
 800468e:	e7a8      	b.n	80045e2 <pbuf_copy+0x26>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8004690:	896a      	ldrh	r2, [r5, #10]
 8004692:	892b      	ldrh	r3, [r5, #8]
 8004694:	429a      	cmp	r2, r3
 8004696:	d105      	bne.n	80046a4 <pbuf_copy+0xe8>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8004698:	682b      	ldr	r3, [r5, #0]
 800469a:	b11b      	cbz	r3, 80046a4 <pbuf_copy+0xe8>
 800469c:	4b03      	ldr	r3, [pc, #12]	; (80046ac <pbuf_copy+0xf0>)
 800469e:	f240 32e3 	movw	r2, #995	; 0x3e3
 80046a2:	e7ee      	b.n	8004682 <pbuf_copy+0xc6>
  } while (p_from);
 80046a4:	2c00      	cmp	r4, #0
 80046a6:	d1a7      	bne.n	80045f8 <pbuf_copy+0x3c>
  return ERR_OK;
 80046a8:	4620      	mov	r0, r4
 80046aa:	e79a      	b.n	80045e2 <pbuf_copy+0x26>
 80046ac:	0800d74f 	.word	0x0800d74f
 80046b0:	0800d628 	.word	0x0800d628
 80046b4:	0800d278 	.word	0x0800d278
 80046b8:	0800d66f 	.word	0x0800d66f
 80046bc:	0800d68a 	.word	0x0800d68a
 80046c0:	0800d697 	.word	0x0800d697
 80046c4:	0800d658 	.word	0x0800d658

080046c8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80046c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046cc:	460f      	mov	r7, r1
 80046ce:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80046d0:	4606      	mov	r6, r0
 80046d2:	b950      	cbnz	r0, 80046ea <pbuf_copy_partial+0x22>
 80046d4:	4b1b      	ldr	r3, [pc, #108]	; (8004744 <pbuf_copy_partial+0x7c>)
 80046d6:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80046da:	491b      	ldr	r1, [pc, #108]	; (8004748 <pbuf_copy_partial+0x80>)
 80046dc:	481b      	ldr	r0, [pc, #108]	; (800474c <pbuf_copy_partial+0x84>)
 80046de:	f005 f989 	bl	80099f4 <iprintf>
 80046e2:	4635      	mov	r5, r6
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 80046e4:	4628      	mov	r0, r5
 80046e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80046ea:	bb41      	cbnz	r1, 800473e <pbuf_copy_partial+0x76>
 80046ec:	4b15      	ldr	r3, [pc, #84]	; (8004744 <pbuf_copy_partial+0x7c>)
 80046ee:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80046f2:	4917      	ldr	r1, [pc, #92]	; (8004750 <pbuf_copy_partial+0x88>)
 80046f4:	4815      	ldr	r0, [pc, #84]	; (800474c <pbuf_copy_partial+0x84>)
 80046f6:	f005 f97d 	bl	80099f4 <iprintf>
 80046fa:	463d      	mov	r5, r7
 80046fc:	e7f2      	b.n	80046e4 <pbuf_copy_partial+0x1c>
 80046fe:	8972      	ldrh	r2, [r6, #10]
    if ((offset != 0) && (offset >= p->len)) {
 8004700:	b153      	cbz	r3, 8004718 <pbuf_copy_partial+0x50>
 8004702:	4293      	cmp	r3, r2
 8004704:	d308      	bcc.n	8004718 <pbuf_copy_partial+0x50>
      offset -= p->len;
 8004706:	1a9b      	subs	r3, r3, r2
 8004708:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800470a:	6836      	ldr	r6, [r6, #0]
 800470c:	f1b8 0f00 	cmp.w	r8, #0
 8004710:	d0e8      	beq.n	80046e4 <pbuf_copy_partial+0x1c>
 8004712:	2e00      	cmp	r6, #0
 8004714:	d1f3      	bne.n	80046fe <pbuf_copy_partial+0x36>
 8004716:	e7e5      	b.n	80046e4 <pbuf_copy_partial+0x1c>
      buf_copy_len = p->len - offset;
 8004718:	1ad2      	subs	r2, r2, r3
 800471a:	b294      	uxth	r4, r2
 800471c:	4544      	cmp	r4, r8
 800471e:	bf28      	it	cs
 8004720:	4644      	movcs	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8004722:	6871      	ldr	r1, [r6, #4]
 8004724:	4622      	mov	r2, r4
 8004726:	4419      	add	r1, r3
 8004728:	1978      	adds	r0, r7, r5
      copied_total += buf_copy_len;
 800472a:	4425      	add	r5, r4
      len -= buf_copy_len;
 800472c:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8004730:	f004 fa69 	bl	8008c06 <memcpy>
      copied_total += buf_copy_len;
 8004734:	b2ad      	uxth	r5, r5
      len -= buf_copy_len;
 8004736:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 800473a:	2300      	movs	r3, #0
 800473c:	e7e5      	b.n	800470a <pbuf_copy_partial+0x42>
  left = 0;
 800473e:	2500      	movs	r5, #0
 8004740:	e7e4      	b.n	800470c <pbuf_copy_partial+0x44>
 8004742:	bf00      	nop
 8004744:	0800d74f 	.word	0x0800d74f
 8004748:	0800d6c1 	.word	0x0800d6c1
 800474c:	0800d278 	.word	0x0800d278
 8004750:	0800d6e0 	.word	0x0800d6e0

08004754 <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
 8004754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004758:	4606      	mov	r6, r0
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  u8_t eaten = 0;
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800475a:	4f27      	ldr	r7, [pc, #156]	; (80047f8 <raw_input+0xa4>)
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
 800475c:	f04f 0900 	mov.w	r9, #0
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8004760:	6839      	ldr	r1, [r7, #0]
 8004762:	6978      	ldr	r0, [r7, #20]
 8004764:	f003 fdc9 	bl	80082fa <ip4_addr_isbroadcast_u32>
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 8004768:	6873      	ldr	r3, [r6, #4]
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800476a:	4682      	mov	sl, r0
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 800476c:	f893 b009 	ldrb.w	fp, [r3, #9]
  pcb = raw_pcbs;
 8004770:	4b22      	ldr	r3, [pc, #136]	; (80047fc <raw_input+0xa8>)
 8004772:	4698      	mov	r8, r3
 8004774:	681d      	ldr	r5, [r3, #0]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
 8004776:	b925      	cbnz	r5, 8004782 <raw_input+0x2e>
 8004778:	462c      	mov	r4, r5
    /* drop the packet */
    prev = pcb;
    pcb = pcb->next;
  }
  return eaten;
}
 800477a:	4620      	mov	r0, r4
 800477c:	b003      	add	sp, #12
 800477e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pcb->protocol == proto) && raw_input_match(pcb, broadcast)) {
 8004782:	7c2b      	ldrb	r3, [r5, #16]
 8004784:	455b      	cmp	r3, fp
 8004786:	d104      	bne.n	8004792 <raw_input+0x3e>
 8004788:	682b      	ldr	r3, [r5, #0]
    if (broadcast != 0) {
 800478a:	f1ba 0f00 	cmp.w	sl, #0
 800478e:	d002      	beq.n	8004796 <raw_input+0x42>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 8004790:	b12b      	cbz	r3, 800479e <raw_input+0x4a>
 8004792:	2400      	movs	r4, #0
 8004794:	e01b      	b.n	80047ce <raw_input+0x7a>
    if (ip_addr_isany(&pcb->local_ip) ||
 8004796:	b113      	cbz	r3, 800479e <raw_input+0x4a>
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	4293      	cmp	r3, r2
 800479c:	d1f9      	bne.n	8004792 <raw_input+0x3e>
      if (pcb->recv != NULL) {
 800479e:	696c      	ldr	r4, [r5, #20]
 80047a0:	b1ac      	cbz	r4, 80047ce <raw_input+0x7a>
        void* old_payload = p->payload;
 80047a2:	6873      	ldr	r3, [r6, #4]
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 80047a4:	4632      	mov	r2, r6
        void* old_payload = p->payload;
 80047a6:	9301      	str	r3, [sp, #4]
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 80047a8:	4629      	mov	r1, r5
 80047aa:	4b15      	ldr	r3, [pc, #84]	; (8004800 <raw_input+0xac>)
 80047ac:	69a8      	ldr	r0, [r5, #24]
 80047ae:	47a0      	blx	r4
        if (eaten != 0) {
 80047b0:	4604      	mov	r4, r0
 80047b2:	b190      	cbz	r0, 80047da <raw_input+0x86>
          if (prev != NULL) {
 80047b4:	f1b9 0f00 	cmp.w	r9, #0
 80047b8:	d01a      	beq.n	80047f0 <raw_input+0x9c>
          eaten = 1;
 80047ba:	2401      	movs	r4, #1
          p = NULL;
 80047bc:	2600      	movs	r6, #0
 80047be:	68eb      	ldr	r3, [r5, #12]
            prev->next = pcb->next;
 80047c0:	f8c9 300c 	str.w	r3, [r9, #12]
            pcb->next = raw_pcbs;
 80047c4:	f8d8 3000 	ldr.w	r3, [r8]
            raw_pcbs = pcb;
 80047c8:	f8c8 5000 	str.w	r5, [r8]
            pcb->next = raw_pcbs;
 80047cc:	60eb      	str	r3, [r5, #12]
    pcb = pcb->next;
 80047ce:	68eb      	ldr	r3, [r5, #12]
 80047d0:	46a9      	mov	r9, r5
  while ((eaten == 0) && (pcb != NULL)) {
 80047d2:	2c00      	cmp	r4, #0
 80047d4:	d1d1      	bne.n	800477a <raw_input+0x26>
    pcb = pcb->next;
 80047d6:	461d      	mov	r5, r3
 80047d8:	e7cd      	b.n	8004776 <raw_input+0x22>
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 80047da:	6873      	ldr	r3, [r6, #4]
 80047dc:	9a01      	ldr	r2, [sp, #4]
 80047de:	4293      	cmp	r3, r2
 80047e0:	d0f5      	beq.n	80047ce <raw_input+0x7a>
 80047e2:	4b08      	ldr	r3, [pc, #32]	; (8004804 <raw_input+0xb0>)
 80047e4:	22b6      	movs	r2, #182	; 0xb6
 80047e6:	4908      	ldr	r1, [pc, #32]	; (8004808 <raw_input+0xb4>)
 80047e8:	4808      	ldr	r0, [pc, #32]	; (800480c <raw_input+0xb8>)
 80047ea:	f005 f903 	bl	80099f4 <iprintf>
 80047ee:	e7ee      	b.n	80047ce <raw_input+0x7a>
          eaten = 1;
 80047f0:	2401      	movs	r4, #1
          p = NULL;
 80047f2:	464e      	mov	r6, r9
 80047f4:	e7eb      	b.n	80047ce <raw_input+0x7a>
 80047f6:	bf00      	nop
 80047f8:	200060c0 	.word	0x200060c0
 80047fc:	20000d1c 	.word	0x20000d1c
 8004800:	200060d0 	.word	0x200060d0
 8004804:	0800d835 	.word	0x0800d835
 8004808:	0800d864 	.word	0x0800d864
 800480c:	0800d278 	.word	0x0800d278

08004810 <raw_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void raw_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8004810:	b510      	push	{r4, lr}
  struct raw_pcb* rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8004812:	b138      	cbz	r0, 8004824 <raw_netif_ip_addr_changed+0x14>
 8004814:	6803      	ldr	r3, [r0, #0]
 8004816:	b12b      	cbz	r3, 8004824 <raw_netif_ip_addr_changed+0x14>
 8004818:	b121      	cbz	r1, 8004824 <raw_netif_ip_addr_changed+0x14>
 800481a:	680b      	ldr	r3, [r1, #0]
 800481c:	b113      	cbz	r3, 8004824 <raw_netif_ip_addr_changed+0x14>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 800481e:	4b06      	ldr	r3, [pc, #24]	; (8004838 <raw_netif_ip_addr_changed+0x28>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	b903      	cbnz	r3, 8004826 <raw_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
      }
    }
  }
}
 8004824:	bd10      	pop	{r4, pc}
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 8004826:	681c      	ldr	r4, [r3, #0]
 8004828:	6802      	ldr	r2, [r0, #0]
 800482a:	4294      	cmp	r4, r2
        ip_addr_copy(rpcb->local_ip, *new_addr);
 800482c:	bf04      	itt	eq
 800482e:	680a      	ldreq	r2, [r1, #0]
 8004830:	601a      	streq	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	e7f5      	b.n	8004822 <raw_netif_ip_addr_changed+0x12>
 8004836:	bf00      	nop
 8004838:	20000d1c 	.word	0x20000d1c

0800483c <tcp_close_shutdown_fin>:
  return ERR_OK;
}

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800483c:	b510      	push	{r4, lr}
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800483e:	4604      	mov	r4, r0
 8004840:	b930      	cbnz	r0, 8004850 <tcp_close_shutdown_fin+0x14>
 8004842:	4b13      	ldr	r3, [pc, #76]	; (8004890 <tcp_close_shutdown_fin+0x54>)
 8004844:	f240 124d 	movw	r2, #333	; 0x14d
 8004848:	4912      	ldr	r1, [pc, #72]	; (8004894 <tcp_close_shutdown_fin+0x58>)
 800484a:	4813      	ldr	r0, [pc, #76]	; (8004898 <tcp_close_shutdown_fin+0x5c>)
 800484c:	f005 f8d2 	bl	80099f4 <iprintf>

  switch (pcb->state) {
 8004850:	7d23      	ldrb	r3, [r4, #20]
 8004852:	2b04      	cmp	r3, #4
 8004854:	d003      	beq.n	800485e <tcp_close_shutdown_fin+0x22>
 8004856:	2b07      	cmp	r3, #7
 8004858:	d00c      	beq.n	8004874 <tcp_close_shutdown_fin+0x38>
 800485a:	2b03      	cmp	r3, #3
 800485c:	d108      	bne.n	8004870 <tcp_close_shutdown_fin+0x34>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800485e:	4620      	mov	r0, r4
 8004860:	f002 f994 	bl	8006b8c <tcp_send_fin>
    if (err == ERR_OK) {
 8004864:	b960      	cbnz	r0, 8004880 <tcp_close_shutdown_fin+0x44>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8004866:	2305      	movs	r3, #5
    break;
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
    if (err == ERR_OK) {
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8004868:	7523      	strb	r3, [r4, #20]
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800486a:	4620      	mov	r0, r4
 800486c:	f002 f9e6 	bl	8006c3c <tcp_output>
    return ERR_OK;
 8004870:	2000      	movs	r0, #0
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
  }
  return err;
}
 8004872:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
 8004874:	4620      	mov	r0, r4
 8004876:	f002 f989 	bl	8006b8c <tcp_send_fin>
    if (err == ERR_OK) {
 800487a:	b908      	cbnz	r0, 8004880 <tcp_close_shutdown_fin+0x44>
      pcb->state = LAST_ACK;
 800487c:	2309      	movs	r3, #9
 800487e:	e7f3      	b.n	8004868 <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
 8004880:	1c43      	adds	r3, r0, #1
 8004882:	d1f6      	bne.n	8004872 <tcp_close_shutdown_fin+0x36>
    pcb->flags |= TF_CLOSEPEND;
 8004884:	7ea3      	ldrb	r3, [r4, #26]
 8004886:	f043 0308 	orr.w	r3, r3, #8
 800488a:	76a3      	strb	r3, [r4, #26]
 800488c:	e7f0      	b.n	8004870 <tcp_close_shutdown_fin+0x34>
 800488e:	bf00      	nop
 8004890:	0800d904 	.word	0x0800d904
 8004894:	0800d933 	.word	0x0800d933
 8004898:	0800d278 	.word	0x0800d278

0800489c <tcp_init>:
}
 800489c:	4770      	bx	lr
	...

080048a0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80048a0:	b538      	push	{r3, r4, r5, lr}
 80048a2:	4604      	mov	r4, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80048a4:	8d01      	ldrh	r1, [r0, #40]	; 0x28

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80048a6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80048a8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80048aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80048ac:	1ac8      	subs	r0, r1, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80048ae:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80048b2:	4428      	add	r0, r5
 80048b4:	bf94      	ite	ls
 80048b6:	1a82      	subls	r2, r0, r2
 80048b8:	f5a0 6286 	subhi.w	r2, r0, #1072	; 0x430
 80048bc:	2a00      	cmp	r2, #0
 80048be:	db01      	blt.n	80048c4 <tcp_update_rcv_ann_wnd+0x24>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80048c0:	8561      	strh	r1, [r4, #42]	; 0x2a
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
    }
    return 0;
  }
}
 80048c2:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80048c4:	1aea      	subs	r2, r5, r3
 80048c6:	2a00      	cmp	r2, #0
 80048c8:	dd02      	ble.n	80048d0 <tcp_update_rcv_ann_wnd+0x30>
      pcb->rcv_ann_wnd = 0;
 80048ca:	2000      	movs	r0, #0
 80048cc:	8560      	strh	r0, [r4, #42]	; 0x2a
 80048ce:	e7f8      	b.n	80048c2 <tcp_update_rcv_ann_wnd+0x22>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80048d0:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80048d2:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 80048d6:	d306      	bcc.n	80048e6 <tcp_update_rcv_ann_wnd+0x46>
 80048d8:	4b04      	ldr	r3, [pc, #16]	; (80048ec <tcp_update_rcv_ann_wnd+0x4c>)
 80048da:	f44f 7242 	mov.w	r2, #776	; 0x308
 80048de:	4904      	ldr	r1, [pc, #16]	; (80048f0 <tcp_update_rcv_ann_wnd+0x50>)
 80048e0:	4804      	ldr	r0, [pc, #16]	; (80048f4 <tcp_update_rcv_ann_wnd+0x54>)
 80048e2:	f005 f887 	bl	80099f4 <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80048e6:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 80048e8:	2000      	movs	r0, #0
 80048ea:	e7ea      	b.n	80048c2 <tcp_update_rcv_ann_wnd+0x22>
 80048ec:	0800d904 	.word	0x0800d904
 80048f0:	0800db38 	.word	0x0800db38
 80048f4:	0800d278 	.word	0x0800d278

080048f8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80048f8:	b538      	push	{r3, r4, r5, lr}
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80048fa:	7d03      	ldrb	r3, [r0, #20]
{
 80048fc:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80048fe:	2b01      	cmp	r3, #1
{
 8004900:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8004902:	d106      	bne.n	8004912 <tcp_recved+0x1a>
 8004904:	4b17      	ldr	r3, [pc, #92]	; (8004964 <tcp_recved+0x6c>)
 8004906:	f44f 7248 	mov.w	r2, #800	; 0x320
 800490a:	4917      	ldr	r1, [pc, #92]	; (8004968 <tcp_recved+0x70>)
 800490c:	4817      	ldr	r0, [pc, #92]	; (800496c <tcp_recved+0x74>)
 800490e:	f005 f871 	bl	80099f4 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8004912:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8004914:	4429      	add	r1, r5
 8004916:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8004918:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
  pcb->rcv_wnd += len;
 800491c:	8521      	strh	r1, [r4, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800491e:	d911      	bls.n	8004944 <tcp_recved+0x4c>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8004920:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8004924:	8523      	strh	r3, [r4, #40]	; 0x28
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8004926:	4620      	mov	r0, r4
 8004928:	f7ff ffba 	bl	80048a0 <tcp_update_rcv_ann_wnd>

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800492c:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8004930:	db17      	blt.n	8004962 <tcp_recved+0x6a>
    tcp_ack_now(pcb);
 8004932:	7ea3      	ldrb	r3, [r4, #26]
    tcp_output(pcb);
 8004934:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 8004936:	f043 0302 	orr.w	r3, r3, #2
 800493a:	76a3      	strb	r3, [r4, #26]
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800493c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_output(pcb);
 8004940:	f002 b97c 	b.w	8006c3c <tcp_output>
  } else if (pcb->rcv_wnd == 0) {
 8004944:	2900      	cmp	r1, #0
 8004946:	d1ee      	bne.n	8004926 <tcp_recved+0x2e>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8004948:	7d23      	ldrb	r3, [r4, #20]
 800494a:	2b07      	cmp	r3, #7
 800494c:	d0e8      	beq.n	8004920 <tcp_recved+0x28>
 800494e:	2b09      	cmp	r3, #9
 8004950:	d0e6      	beq.n	8004920 <tcp_recved+0x28>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8004952:	4b04      	ldr	r3, [pc, #16]	; (8004964 <tcp_recved+0x6c>)
 8004954:	f240 322d 	movw	r2, #813	; 0x32d
 8004958:	4905      	ldr	r1, [pc, #20]	; (8004970 <tcp_recved+0x78>)
 800495a:	4804      	ldr	r0, [pc, #16]	; (800496c <tcp_recved+0x74>)
 800495c:	f005 f84a 	bl	80099f4 <iprintf>
 8004960:	e7e1      	b.n	8004926 <tcp_recved+0x2e>
}
 8004962:	bd38      	pop	{r3, r4, r5, pc}
 8004964:	0800d904 	.word	0x0800d904
 8004968:	0800d99f 	.word	0x0800d99f
 800496c:	0800d278 	.word	0x0800d278
 8004970:	0800d9c5 	.word	0x0800d9c5

08004974 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8004974:	b510      	push	{r4, lr}
  if (seg != NULL) {
 8004976:	4604      	mov	r4, r0
 8004978:	b148      	cbz	r0, 800498e <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 800497a:	6840      	ldr	r0, [r0, #4]
 800497c:	b108      	cbz	r0, 8004982 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800497e:	f7ff fc07 	bl	8004190 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8004982:	4621      	mov	r1, r4
  }
}
 8004984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8004988:	2004      	movs	r0, #4
 800498a:	f7ff ba97 	b.w	8003ebc <memp_free>
}
 800498e:	bd10      	pop	{r4, pc}

08004990 <tcp_segs_free>:
{
 8004990:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8004992:	b900      	cbnz	r0, 8004996 <tcp_segs_free+0x6>
}
 8004994:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 8004996:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8004998:	f7ff ffec 	bl	8004974 <tcp_seg_free>
    seg = next;
 800499c:	4620      	mov	r0, r4
 800499e:	e7f8      	b.n	8004992 <tcp_segs_free+0x2>

080049a0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80049a0:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80049a2:	f240 5294 	movw	r2, #1428	; 0x594
{
 80049a6:	4604      	mov	r4, r0
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80049a8:	490a      	ldr	r1, [pc, #40]	; (80049d4 <tcp_seg_copy+0x34>)
 80049aa:	2004      	movs	r0, #4
 80049ac:	f7ff fa6a 	bl	8003e84 <memp_malloc_fn>
  if (cseg == NULL) {
 80049b0:	4605      	mov	r5, r0
 80049b2:	b160      	cbz	r0, 80049ce <tcp_seg_copy+0x2e>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80049b4:	4620      	mov	r0, r4
 80049b6:	462b      	mov	r3, r5
 80049b8:	f104 0214 	add.w	r2, r4, #20
 80049bc:	f850 1b04 	ldr.w	r1, [r0], #4
 80049c0:	4290      	cmp	r0, r2
 80049c2:	f843 1b04 	str.w	r1, [r3], #4
 80049c6:	d1f9      	bne.n	80049bc <tcp_seg_copy+0x1c>
  pbuf_ref(cseg->p);
 80049c8:	6868      	ldr	r0, [r5, #4]
 80049ca:	f7ff fd9f 	bl	800450c <pbuf_ref>
  return cseg;
}
 80049ce:	4628      	mov	r0, r5
 80049d0:	bd38      	pop	{r3, r4, r5, pc}
 80049d2:	bf00      	nop
 80049d4:	0800d904 	.word	0x0800d904

080049d8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80049d8:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 80049da:	7d03      	ldrb	r3, [r0, #20]
{
 80049dc:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d919      	bls.n	8004a16 <tcp_pcb_purge+0x3e>
 80049e2:	2b0a      	cmp	r3, #10
 80049e4:	d017      	beq.n	8004a16 <tcp_pcb_purge+0x3e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80049e6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80049e8:	b118      	cbz	r0, 80049f2 <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80049ea:	f7ff fbd1 	bl	8004190 <pbuf_free>
      pcb->refused_data = NULL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 80049f2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80049f4:	f7ff ffcc 	bl	8004990 <tcp_segs_free>
    pcb->ooseq = NULL;
 80049f8:	2500      	movs	r5, #0
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80049fa:	f64f 73ff 	movw	r3, #65535	; 0xffff

    tcp_segs_free(pcb->unsent);
 80049fe:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    pcb->rtime = -1;
 8004a00:	8623      	strh	r3, [r4, #48]	; 0x30
    pcb->ooseq = NULL;
 8004a02:	6725      	str	r5, [r4, #112]	; 0x70
    tcp_segs_free(pcb->unsent);
 8004a04:	f7ff ffc4 	bl	8004990 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8004a08:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004a0a:	f7ff ffc1 	bl	8004990 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8004a0e:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8004a12:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8004a16:	bd38      	pop	{r3, r4, r5, pc}

08004a18 <tcp_slowtmr>:
{
 8004a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8004a1c:	4eb0      	ldr	r6, [pc, #704]	; (8004ce0 <tcp_slowtmr+0x2c8>)
{
 8004a1e:	b085      	sub	sp, #20
  ++tcp_ticks;
 8004a20:	6833      	ldr	r3, [r6, #0]
      tcp_active_pcbs_changed = 0;
 8004a22:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 8004d14 <tcp_slowtmr+0x2fc>
  ++tcp_ticks;
 8004a26:	3301      	adds	r3, #1
 8004a28:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 8004a2a:	4bae      	ldr	r3, [pc, #696]	; (8004ce4 <tcp_slowtmr+0x2cc>)
 8004a2c:	781a      	ldrb	r2, [r3, #0]
 8004a2e:	9302      	str	r3, [sp, #8]
 8004a30:	3201      	adds	r2, #1
 8004a32:	701a      	strb	r2, [r3, #0]
  prev = NULL;
 8004a34:	f04f 0800 	mov.w	r8, #0
  pcb = tcp_active_pcbs;
 8004a38:	4fab      	ldr	r7, [pc, #684]	; (8004ce8 <tcp_slowtmr+0x2d0>)
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8004a3a:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 8004d18 <tcp_slowtmr+0x300>
  pcb = tcp_active_pcbs;
 8004a3e:	683c      	ldr	r4, [r7, #0]
  while (pcb != NULL) {
 8004a40:	b96c      	cbnz	r4, 8004a5e <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 8004a42:	4faa      	ldr	r7, [pc, #680]	; (8004cec <tcp_slowtmr+0x2d4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8004a44:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 8004d18 <tcp_slowtmr+0x300>
  pcb = tcp_tw_pcbs;
 8004a48:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8004a4a:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8004d1c <tcp_slowtmr+0x304>
 8004a4e:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 8004cf4 <tcp_slowtmr+0x2dc>
  while (pcb != NULL) {
 8004a52:	2d00      	cmp	r5, #0
 8004a54:	f040 8185 	bne.w	8004d62 <tcp_slowtmr+0x34a>
}
 8004a58:	b005      	add	sp, #20
 8004a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8004a5e:	7d23      	ldrb	r3, [r4, #20]
 8004a60:	b933      	cbnz	r3, 8004a70 <tcp_slowtmr+0x58>
 8004a62:	464b      	mov	r3, r9
 8004a64:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8004a68:	49a1      	ldr	r1, [pc, #644]	; (8004cf0 <tcp_slowtmr+0x2d8>)
 8004a6a:	48a2      	ldr	r0, [pc, #648]	; (8004cf4 <tcp_slowtmr+0x2dc>)
 8004a6c:	f004 ffc2 	bl	80099f4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8004a70:	7d23      	ldrb	r3, [r4, #20]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d106      	bne.n	8004a84 <tcp_slowtmr+0x6c>
 8004a76:	464b      	mov	r3, r9
 8004a78:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8004a7c:	499e      	ldr	r1, [pc, #632]	; (8004cf8 <tcp_slowtmr+0x2e0>)
 8004a7e:	489d      	ldr	r0, [pc, #628]	; (8004cf4 <tcp_slowtmr+0x2dc>)
 8004a80:	f004 ffb8 	bl	80099f4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8004a84:	7d23      	ldrb	r3, [r4, #20]
 8004a86:	2b0a      	cmp	r3, #10
 8004a88:	d106      	bne.n	8004a98 <tcp_slowtmr+0x80>
 8004a8a:	464b      	mov	r3, r9
 8004a8c:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8004a90:	499a      	ldr	r1, [pc, #616]	; (8004cfc <tcp_slowtmr+0x2e4>)
 8004a92:	4898      	ldr	r0, [pc, #608]	; (8004cf4 <tcp_slowtmr+0x2dc>)
 8004a94:	f004 ffae 	bl	80099f4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8004a98:	9b02      	ldr	r3, [sp, #8]
 8004a9a:	7f62      	ldrb	r2, [r4, #29]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d104      	bne.n	8004aac <tcp_slowtmr+0x94>
      pcb = pcb->next;
 8004aa2:	68e5      	ldr	r5, [r4, #12]
 8004aa4:	4644      	mov	r4, r8
 8004aa6:	46a0      	mov	r8, r4
 8004aa8:	462c      	mov	r4, r5
 8004aaa:	e7c9      	b.n	8004a40 <tcp_slowtmr+0x28>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8004aac:	7d21      	ldrb	r1, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 8004aae:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8004ab0:	2902      	cmp	r1, #2
 8004ab2:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8004ab6:	f040 809d 	bne.w	8004bf4 <tcp_slowtmr+0x1dc>
 8004aba:	2a05      	cmp	r2, #5
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8004abc:	f200 80e4 	bhi.w	8004c88 <tcp_slowtmr+0x270>
      if (pcb->persist_backoff > 0) {
 8004ac0:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 8004ac4:	f1bb 0f00 	cmp.w	fp, #0
 8004ac8:	f000 80a7 	beq.w	8004c1a <tcp_slowtmr+0x202>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8004acc:	488c      	ldr	r0, [pc, #560]	; (8004d00 <tcp_slowtmr+0x2e8>)
        if (pcb->persist_cnt < backoff_cnt) {
 8004ace:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8004ad2:	4483      	add	fp, r0
 8004ad4:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 8004ad8:	4293      	cmp	r3, r2
          pcb->persist_cnt++;
 8004ada:	bf3c      	itt	cc
 8004adc:	3301      	addcc	r3, #1
 8004ade:	f884 3094 	strbcc.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8004ae2:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	f080 8086 	bcs.w	8004bf8 <tcp_slowtmr+0x1e0>
    pcb_remove = 0;
 8004aec:	f04f 0b00 	mov.w	fp, #0
    if (pcb->state == FIN_WAIT_2) {
 8004af0:	7d23      	ldrb	r3, [r4, #20]
 8004af2:	2b06      	cmp	r3, #6
 8004af4:	d10b      	bne.n	8004b0e <tcp_slowtmr+0xf6>
      if (pcb->flags & TF_RXCLOSED) {
 8004af6:	7ea2      	ldrb	r2, [r4, #26]
 8004af8:	06d2      	lsls	r2, r2, #27
 8004afa:	d508      	bpl.n	8004b0e <tcp_slowtmr+0xf6>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004afc:	6832      	ldr	r2, [r6, #0]
 8004afe:	6a21      	ldr	r1, [r4, #32]
 8004b00:	1a52      	subs	r2, r2, r1
 8004b02:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 8004b04:	bf84      	itt	hi
 8004b06:	f10b 0b01 	addhi.w	fp, fp, #1
 8004b0a:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8004b0e:	7a25      	ldrb	r5, [r4, #8]
 8004b10:	f015 0508 	ands.w	r5, r5, #8
 8004b14:	d019      	beq.n	8004b4a <tcp_slowtmr+0x132>
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d002      	beq.n	8004b20 <tcp_slowtmr+0x108>
       ((pcb->state == ESTABLISHED) ||
 8004b1a:	2b07      	cmp	r3, #7
 8004b1c:	f040 80c9 	bne.w	8004cb2 <tcp_slowtmr+0x29a>
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8004b20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b24:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004b28:	6831      	ldr	r1, [r6, #0]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8004b2a:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
 8004b2e:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
 8004b32:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004b36:	6a23      	ldr	r3, [r4, #32]
 8004b38:	1ac9      	subs	r1, r1, r3
 8004b3a:	4291      	cmp	r1, r2
 8004b3c:	f240 80a7 	bls.w	8004c8e <tcp_slowtmr+0x276>
        ++pcb_reset;
 8004b40:	2501      	movs	r5, #1
        ++pcb_remove;
 8004b42:	f10b 0b01 	add.w	fp, fp, #1
 8004b46:	fa5f fb8b 	uxtb.w	fp, fp
    if (pcb->ooseq != NULL &&
 8004b4a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004b4c:	b160      	cbz	r0, 8004b68 <tcp_slowtmr+0x150>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8004b4e:	6833      	ldr	r3, [r6, #0]
 8004b50:	6a22      	ldr	r2, [r4, #32]
 8004b52:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 8004b56:	1a9a      	subs	r2, r3, r2
 8004b58:	2306      	movs	r3, #6
 8004b5a:	434b      	muls	r3, r1
    if (pcb->ooseq != NULL &&
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d303      	bcc.n	8004b68 <tcp_slowtmr+0x150>
      tcp_segs_free(pcb->ooseq);
 8004b60:	f7ff ff16 	bl	8004990 <tcp_segs_free>
      pcb->ooseq = NULL;
 8004b64:	2300      	movs	r3, #0
 8004b66:	6723      	str	r3, [r4, #112]	; 0x70
    if (pcb->state == SYN_RCVD) {
 8004b68:	7d23      	ldrb	r3, [r4, #20]
 8004b6a:	2b03      	cmp	r3, #3
 8004b6c:	f040 80a3 	bne.w	8004cb6 <tcp_slowtmr+0x29e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004b70:	6833      	ldr	r3, [r6, #0]
 8004b72:	6a22      	ldr	r2, [r4, #32]
 8004b74:	1a9b      	subs	r3, r3, r2
 8004b76:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8004b78:	d803      	bhi.n	8004b82 <tcp_slowtmr+0x16a>
    if (pcb_remove) {
 8004b7a:	f1bb 0f00 	cmp.w	fp, #0
 8004b7e:	f000 80cf 	beq.w	8004d20 <tcp_slowtmr+0x308>
      tcp_pcb_purge(pcb);
 8004b82:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 8004b84:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 8004b88:	f7ff ff26 	bl	80049d8 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8004b8c:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 8004b8e:	f1b8 0f00 	cmp.w	r8, #0
 8004b92:	f000 8098 	beq.w	8004cc6 <tcp_slowtmr+0x2ae>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8004b96:	429c      	cmp	r4, r3
 8004b98:	d106      	bne.n	8004ba8 <tcp_slowtmr+0x190>
 8004b9a:	464b      	mov	r3, r9
 8004b9c:	f240 4289 	movw	r2, #1161	; 0x489
 8004ba0:	4958      	ldr	r1, [pc, #352]	; (8004d04 <tcp_slowtmr+0x2ec>)
 8004ba2:	4854      	ldr	r0, [pc, #336]	; (8004cf4 <tcp_slowtmr+0x2dc>)
 8004ba4:	f004 ff26 	bl	80099f4 <iprintf>
        prev->next = pcb->next;
 8004ba8:	68e3      	ldr	r3, [r4, #12]
 8004baa:	f8c8 300c 	str.w	r3, [r8, #12]
      if (pcb_reset) {
 8004bae:	b14d      	cbz	r5, 8004bc4 <tcp_slowtmr+0x1ac>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8004bb0:	8b23      	ldrh	r3, [r4, #24]
 8004bb2:	4622      	mov	r2, r4
 8004bb4:	9301      	str	r3, [sp, #4]
 8004bb6:	8ae3      	ldrh	r3, [r4, #22]
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004bbc:	1d23      	adds	r3, r4, #4
 8004bbe:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004bc0:	f002 f9b6 	bl	8006f30 <tcp_rst>
      err_arg = pcb->callback_arg;
 8004bc4:	6923      	ldr	r3, [r4, #16]
      memp_free(MEMP_TCP_PCB, pcb2);
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	2002      	movs	r0, #2
      err_arg = pcb->callback_arg;
 8004bca:	9303      	str	r3, [sp, #12]
      pcb = pcb->next;
 8004bcc:	68e5      	ldr	r5, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8004bce:	f7ff f975 	bl	8003ebc <memp_free>
      tcp_active_pcbs_changed = 0;
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8004bd8:	f1bb 0f00 	cmp.w	fp, #0
 8004bdc:	d004      	beq.n	8004be8 <tcp_slowtmr+0x1d0>
 8004bde:	9b03      	ldr	r3, [sp, #12]
 8004be0:	f06f 010c 	mvn.w	r1, #12
 8004be4:	4618      	mov	r0, r3
 8004be6:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 8004be8:	f89a 3000 	ldrb.w	r3, [sl]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f43f af59 	beq.w	8004aa4 <tcp_slowtmr+0x8c>
tcp_slowtmr_start:
 8004bf2:	e71f      	b.n	8004a34 <tcp_slowtmr+0x1c>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8004bf4:	2a0b      	cmp	r2, #11
 8004bf6:	e761      	b.n	8004abc <tcp_slowtmr+0xa4>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f002 fa88 	bl	800710e <tcp_zero_window_probe>
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	f47f af74 	bne.w	8004aec <tcp_slowtmr+0xd4>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8004c04:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
            pcb->persist_cnt = 0;
 8004c08:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8004c0c:	2b06      	cmp	r3, #6
 8004c0e:	f63f af6d 	bhi.w	8004aec <tcp_slowtmr+0xd4>
              pcb->persist_backoff++;
 8004c12:	3301      	adds	r3, #1
 8004c14:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8004c18:	e768      	b.n	8004aec <tcp_slowtmr+0xd4>
        if (pcb->rtime >= 0) {
 8004c1a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8004c1e:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 8004c20:	bfa4      	itt	ge
 8004c22:	3301      	addge	r3, #1
 8004c24:	8623      	strhge	r3, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8004c26:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f43f af5f 	beq.w	8004aec <tcp_slowtmr+0xd4>
 8004c2e:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 8004c32:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8004c36:	4298      	cmp	r0, r3
 8004c38:	f6ff af58 	blt.w	8004aec <tcp_slowtmr+0xd4>
          if (pcb->state != SYN_SENT) {
 8004c3c:	2902      	cmp	r1, #2
 8004c3e:	d00a      	beq.n	8004c56 <tcp_slowtmr+0x23e>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8004c40:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8004c44:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8004c48:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8004c4c:	492e      	ldr	r1, [pc, #184]	; (8004d08 <tcp_slowtmr+0x2f0>)
 8004c4e:	5c8a      	ldrb	r2, [r1, r2]
 8004c50:	4093      	lsls	r3, r2
 8004c52:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 8004c56:	2300      	movs	r3, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8004c58:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
          pcb->rtime = 0;
 8004c5c:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8004c5e:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8004c62:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          pcb->ssthresh = eff_wnd >> 1;
 8004c64:	4293      	cmp	r3, r2
 8004c66:	bf28      	it	cs
 8004c68:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8004c6a:	004a      	lsls	r2, r1, #1
          pcb->ssthresh = eff_wnd >> 1;
 8004c6c:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8004c6e:	b292      	uxth	r2, r2
 8004c70:	4293      	cmp	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 8004c72:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          pcb->cwnd = pcb->mss;
 8004c76:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
            pcb->ssthresh = (pcb->mss << 1);
 8004c7a:	bf38      	it	cc
 8004c7c:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8004c80:	4620      	mov	r0, r4
 8004c82:	f002 f9af 	bl	8006fe4 <tcp_rexmit_rto>
 8004c86:	e733      	b.n	8004af0 <tcp_slowtmr+0xd8>
      ++pcb_remove;
 8004c88:	f04f 0b01 	mov.w	fp, #1
 8004c8c:	e730      	b.n	8004af0 <tcp_slowtmr+0xd8>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8004c8e:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8004c92:	4a1e      	ldr	r2, [pc, #120]	; (8004d0c <tcp_slowtmr+0x2f4>)
 8004c94:	fb02 5303 	mla	r3, r2, r3, r5
                / TCP_SLOW_INTERVAL)
 8004c98:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004c9c:	4299      	cmp	r1, r3
 8004c9e:	d908      	bls.n	8004cb2 <tcp_slowtmr+0x29a>
        err = tcp_keepalive(pcb);
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	f002 fa0a 	bl	80070ba <tcp_keepalive>
        if (err == ERR_OK) {
 8004ca6:	b920      	cbnz	r0, 8004cb2 <tcp_slowtmr+0x29a>
          pcb->keep_cnt_sent++;
 8004ca8:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8004cac:	3301      	adds	r3, #1
 8004cae:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8004cb2:	2500      	movs	r5, #0
 8004cb4:	e749      	b.n	8004b4a <tcp_slowtmr+0x132>
    if (pcb->state == LAST_ACK) {
 8004cb6:	2b09      	cmp	r3, #9
 8004cb8:	f47f af5f 	bne.w	8004b7a <tcp_slowtmr+0x162>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8004cbc:	6833      	ldr	r3, [r6, #0]
 8004cbe:	6a22      	ldr	r2, [r4, #32]
 8004cc0:	1a9b      	subs	r3, r3, r2
 8004cc2:	2bf0      	cmp	r3, #240	; 0xf0
 8004cc4:	e758      	b.n	8004b78 <tcp_slowtmr+0x160>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8004cc6:	429c      	cmp	r4, r3
 8004cc8:	d006      	beq.n	8004cd8 <tcp_slowtmr+0x2c0>
 8004cca:	464b      	mov	r3, r9
 8004ccc:	f240 428d 	movw	r2, #1165	; 0x48d
 8004cd0:	490f      	ldr	r1, [pc, #60]	; (8004d10 <tcp_slowtmr+0x2f8>)
 8004cd2:	4808      	ldr	r0, [pc, #32]	; (8004cf4 <tcp_slowtmr+0x2dc>)
 8004cd4:	f004 fe8e 	bl	80099f4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8004cd8:	68e3      	ldr	r3, [r4, #12]
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	e767      	b.n	8004bae <tcp_slowtmr+0x196>
 8004cde:	bf00      	nop
 8004ce0:	200060ec 	.word	0x200060ec
 8004ce4:	20000d21 	.word	0x20000d21
 8004ce8:	200060e8 	.word	0x200060e8
 8004cec:	200060f8 	.word	0x200060f8
 8004cf0:	0800d9e6 	.word	0x0800d9e6
 8004cf4:	0800d278 	.word	0x0800d278
 8004cf8:	0800da10 	.word	0x0800da10
 8004cfc:	0800da3a 	.word	0x0800da3a
 8004d00:	0800d998 	.word	0x0800d998
 8004d04:	0800da67 	.word	0x0800da67
 8004d08:	0800d8de 	.word	0x0800d8de
 8004d0c:	000124f8 	.word	0x000124f8
 8004d10:	0800da92 	.word	0x0800da92
 8004d14:	200060e4 	.word	0x200060e4
 8004d18:	0800d904 	.word	0x0800d904
 8004d1c:	0800dabc 	.word	0x0800dabc
      ++prev->polltmr;
 8004d20:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8004d22:	7f22      	ldrb	r2, [r4, #28]
      ++prev->polltmr;
 8004d24:	3301      	adds	r3, #1
 8004d26:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8004d28:	429a      	cmp	r2, r3
      pcb = pcb->next;
 8004d2a:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 8004d2c:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8004d2e:	f63f aeba 	bhi.w	8004aa6 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 8004d32:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 8004d36:	f884 b01b 	strb.w	fp, [r4, #27]
        tcp_active_pcbs_changed = 0;
 8004d3a:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 8004d3e:	b173      	cbz	r3, 8004d5e <tcp_slowtmr+0x346>
 8004d40:	4621      	mov	r1, r4
 8004d42:	6920      	ldr	r0, [r4, #16]
 8004d44:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8004d46:	f89a 3000 	ldrb.w	r3, [sl]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f47f ae72 	bne.w	8004a34 <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 8004d50:	2800      	cmp	r0, #0
 8004d52:	f47f aea8 	bne.w	8004aa6 <tcp_slowtmr+0x8e>
          tcp_output(prev);
 8004d56:	4620      	mov	r0, r4
 8004d58:	f001 ff70 	bl	8006c3c <tcp_output>
 8004d5c:	e6a3      	b.n	8004aa6 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 8004d5e:	4658      	mov	r0, fp
 8004d60:	e7f1      	b.n	8004d46 <tcp_slowtmr+0x32e>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8004d62:	7d2b      	ldrb	r3, [r5, #20]
 8004d64:	2b0a      	cmp	r3, #10
 8004d66:	d006      	beq.n	8004d76 <tcp_slowtmr+0x35e>
 8004d68:	4643      	mov	r3, r8
 8004d6a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8004d6e:	4651      	mov	r1, sl
 8004d70:	4648      	mov	r0, r9
 8004d72:	f004 fe3f 	bl	80099f4 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8004d76:	6833      	ldr	r3, [r6, #0]
 8004d78:	6a2a      	ldr	r2, [r5, #32]
 8004d7a:	1a9b      	subs	r3, r3, r2
 8004d7c:	2bf0      	cmp	r3, #240	; 0xf0
 8004d7e:	d802      	bhi.n	8004d86 <tcp_slowtmr+0x36e>
      pcb = pcb->next;
 8004d80:	462c      	mov	r4, r5
 8004d82:	68ed      	ldr	r5, [r5, #12]
 8004d84:	e665      	b.n	8004a52 <tcp_slowtmr+0x3a>
      tcp_pcb_purge(pcb);
 8004d86:	4628      	mov	r0, r5
 8004d88:	f7ff fe26 	bl	80049d8 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8004d8c:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 8004d8e:	b194      	cbz	r4, 8004db6 <tcp_slowtmr+0x39e>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8004d90:	429d      	cmp	r5, r3
 8004d92:	d106      	bne.n	8004da2 <tcp_slowtmr+0x38a>
 8004d94:	4643      	mov	r3, r8
 8004d96:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8004d9a:	490d      	ldr	r1, [pc, #52]	; (8004dd0 <tcp_slowtmr+0x3b8>)
 8004d9c:	4648      	mov	r0, r9
 8004d9e:	f004 fe29 	bl	80099f4 <iprintf>
        prev->next = pcb->next;
 8004da2:	68eb      	ldr	r3, [r5, #12]
 8004da4:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8004da6:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8004daa:	4629      	mov	r1, r5
 8004dac:	2002      	movs	r0, #2
 8004dae:	f7ff f885 	bl	8003ebc <memp_free>
      pcb = pcb->next;
 8004db2:	465d      	mov	r5, fp
 8004db4:	e64d      	b.n	8004a52 <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8004db6:	429d      	cmp	r5, r3
 8004db8:	d006      	beq.n	8004dc8 <tcp_slowtmr+0x3b0>
 8004dba:	4643      	mov	r3, r8
 8004dbc:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8004dc0:	4904      	ldr	r1, [pc, #16]	; (8004dd4 <tcp_slowtmr+0x3bc>)
 8004dc2:	4648      	mov	r0, r9
 8004dc4:	f004 fe16 	bl	80099f4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8004dc8:	68eb      	ldr	r3, [r5, #12]
 8004dca:	603b      	str	r3, [r7, #0]
 8004dcc:	e7eb      	b.n	8004da6 <tcp_slowtmr+0x38e>
 8004dce:	bf00      	nop
 8004dd0:	0800daeb 	.word	0x0800daeb
 8004dd4:	0800db12 	.word	0x0800db12

08004dd8 <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 8004dd8:	6803      	ldr	r3, [r0, #0]
{
 8004dda:	b510      	push	{r4, lr}
  TCP_RMV(pcblist, pcb);
 8004ddc:	428b      	cmp	r3, r1
{
 8004dde:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 8004de0:	d137      	bne.n	8004e52 <tcp_pcb_remove+0x7a>
 8004de2:	68cb      	ldr	r3, [r1, #12]
 8004de4:	6003      	str	r3, [r0, #0]
 8004de6:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 8004de8:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 8004dea:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8004dec:	f7ff fdf4 	bl	80049d8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8004df0:	7d23      	ldrb	r3, [r4, #20]
 8004df2:	2b0a      	cmp	r3, #10
 8004df4:	d00a      	beq.n	8004e0c <tcp_pcb_remove+0x34>
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d008      	beq.n	8004e0c <tcp_pcb_remove+0x34>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 8004dfa:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 8004dfc:	07da      	lsls	r2, r3, #31
 8004dfe:	d505      	bpl.n	8004e0c <tcp_pcb_remove+0x34>
    pcb->flags |= TF_ACK_NOW;
 8004e00:	f043 0302 	orr.w	r3, r3, #2
 8004e04:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8004e06:	4620      	mov	r0, r4
 8004e08:	f001 ff18 	bl	8006c3c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8004e0c:	7d23      	ldrb	r3, [r4, #20]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d01a      	beq.n	8004e48 <tcp_pcb_remove+0x70>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8004e12:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004e14:	b133      	cbz	r3, 8004e24 <tcp_pcb_remove+0x4c>
 8004e16:	4b13      	ldr	r3, [pc, #76]	; (8004e64 <tcp_pcb_remove+0x8c>)
 8004e18:	f240 7253 	movw	r2, #1875	; 0x753
 8004e1c:	4912      	ldr	r1, [pc, #72]	; (8004e68 <tcp_pcb_remove+0x90>)
 8004e1e:	4813      	ldr	r0, [pc, #76]	; (8004e6c <tcp_pcb_remove+0x94>)
 8004e20:	f004 fde8 	bl	80099f4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8004e24:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004e26:	b133      	cbz	r3, 8004e36 <tcp_pcb_remove+0x5e>
 8004e28:	4b0e      	ldr	r3, [pc, #56]	; (8004e64 <tcp_pcb_remove+0x8c>)
 8004e2a:	f240 7254 	movw	r2, #1876	; 0x754
 8004e2e:	4910      	ldr	r1, [pc, #64]	; (8004e70 <tcp_pcb_remove+0x98>)
 8004e30:	480e      	ldr	r0, [pc, #56]	; (8004e6c <tcp_pcb_remove+0x94>)
 8004e32:	f004 fddf 	bl	80099f4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8004e36:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004e38:	b133      	cbz	r3, 8004e48 <tcp_pcb_remove+0x70>
 8004e3a:	4b0a      	ldr	r3, [pc, #40]	; (8004e64 <tcp_pcb_remove+0x8c>)
 8004e3c:	f240 7256 	movw	r2, #1878	; 0x756
 8004e40:	490c      	ldr	r1, [pc, #48]	; (8004e74 <tcp_pcb_remove+0x9c>)
 8004e42:	480a      	ldr	r0, [pc, #40]	; (8004e6c <tcp_pcb_remove+0x94>)
 8004e44:	f004 fdd6 	bl	80099f4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8004e4c:	82e3      	strh	r3, [r4, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8004e4e:	bd10      	pop	{r4, pc}
 8004e50:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0c7      	beq.n	8004de6 <tcp_pcb_remove+0xe>
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	42a2      	cmp	r2, r4
 8004e5a:	d1f9      	bne.n	8004e50 <tcp_pcb_remove+0x78>
 8004e5c:	68e2      	ldr	r2, [r4, #12]
 8004e5e:	60da      	str	r2, [r3, #12]
 8004e60:	e7c1      	b.n	8004de6 <tcp_pcb_remove+0xe>
 8004e62:	bf00      	nop
 8004e64:	0800d904 	.word	0x0800d904
 8004e68:	0800d950 	.word	0x0800d950
 8004e6c:	0800d278 	.word	0x0800d278
 8004e70:	0800d968 	.word	0x0800d968
 8004e74:	0800d981 	.word	0x0800d981

08004e78 <tcp_close_shutdown>:
{
 8004e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e7a:	4604      	mov	r4, r0
 8004e7c:	7d05      	ldrb	r5, [r0, #20]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8004e7e:	2900      	cmp	r1, #0
 8004e80:	d049      	beq.n	8004f16 <tcp_close_shutdown+0x9e>
 8004e82:	2d04      	cmp	r5, #4
 8004e84:	d001      	beq.n	8004e8a <tcp_close_shutdown+0x12>
 8004e86:	2d07      	cmp	r5, #7
 8004e88:	d145      	bne.n	8004f16 <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8004e8a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004e8c:	b91b      	cbnz	r3, 8004e96 <tcp_close_shutdown+0x1e>
 8004e8e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004e90:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8004e94:	d03f      	beq.n	8004f16 <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8004e96:	7ea3      	ldrb	r3, [r4, #26]
 8004e98:	06db      	lsls	r3, r3, #27
 8004e9a:	d406      	bmi.n	8004eaa <tcp_close_shutdown+0x32>
 8004e9c:	4b3f      	ldr	r3, [pc, #252]	; (8004f9c <tcp_close_shutdown+0x124>)
 8004e9e:	f240 120f 	movw	r2, #271	; 0x10f
 8004ea2:	493f      	ldr	r1, [pc, #252]	; (8004fa0 <tcp_close_shutdown+0x128>)
 8004ea4:	483f      	ldr	r0, [pc, #252]	; (8004fa4 <tcp_close_shutdown+0x12c>)
 8004ea6:	f004 fda5 	bl	80099f4 <iprintf>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8004eaa:	8b23      	ldrh	r3, [r4, #24]
 8004eac:	4622      	mov	r2, r4
 8004eae:	9301      	str	r3, [sp, #4]
 8004eb0:	8ae3      	ldrh	r3, [r4, #22]
 8004eb2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004eb8:	1d23      	adds	r3, r4, #4
 8004eba:	f002 f839 	bl	8006f30 <tcp_rst>
      tcp_pcb_purge(pcb);
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	f7ff fd8a 	bl	80049d8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8004ec4:	4a38      	ldr	r2, [pc, #224]	; (8004fa8 <tcp_close_shutdown+0x130>)
 8004ec6:	6813      	ldr	r3, [r2, #0]
 8004ec8:	42a3      	cmp	r3, r4
 8004eca:	d115      	bne.n	8004ef8 <tcp_close_shutdown+0x80>
 8004ecc:	68e3      	ldr	r3, [r4, #12]
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	60e3      	str	r3, [r4, #12]
 8004ed6:	4b35      	ldr	r3, [pc, #212]	; (8004fac <tcp_close_shutdown+0x134>)
 8004ed8:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8004eda:	7d23      	ldrb	r3, [r4, #20]
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	d113      	bne.n	8004f08 <tcp_close_shutdown+0x90>
        pcb->state = TIME_WAIT;
 8004ee0:	230a      	movs	r3, #10
 8004ee2:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8004ee4:	4b32      	ldr	r3, [pc, #200]	; (8004fb0 <tcp_close_shutdown+0x138>)
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	601c      	str	r4, [r3, #0]
 8004eea:	60e2      	str	r2, [r4, #12]
 8004eec:	f002 f9c0 	bl	8007270 <tcp_timer_needed>
}
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	b003      	add	sp, #12
 8004ef4:	bd30      	pop	{r4, r5, pc}
 8004ef6:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0e9      	beq.n	8004ed0 <tcp_close_shutdown+0x58>
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	42a2      	cmp	r2, r4
 8004f00:	d1f9      	bne.n	8004ef6 <tcp_close_shutdown+0x7e>
 8004f02:	68e2      	ldr	r2, [r4, #12]
 8004f04:	60da      	str	r2, [r3, #12]
 8004f06:	e7e3      	b.n	8004ed0 <tcp_close_shutdown+0x58>
        if (tcp_input_pcb == pcb) {
 8004f08:	4b2a      	ldr	r3, [pc, #168]	; (8004fb4 <tcp_close_shutdown+0x13c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	42a3      	cmp	r3, r4
 8004f0e:	d117      	bne.n	8004f40 <tcp_close_shutdown+0xc8>
          tcp_trigger_input_pcb_close();
 8004f10:	f001 fd08 	bl	8006924 <tcp_trigger_input_pcb_close>
 8004f14:	e7ec      	b.n	8004ef0 <tcp_close_shutdown+0x78>
  switch (pcb->state) {
 8004f16:	2d01      	cmp	r5, #1
 8004f18:	d020      	beq.n	8004f5c <tcp_close_shutdown+0xe4>
 8004f1a:	d307      	bcc.n	8004f2c <tcp_close_shutdown+0xb4>
 8004f1c:	2d02      	cmp	r5, #2
 8004f1e:	d033      	beq.n	8004f88 <tcp_close_shutdown+0x110>
    return tcp_close_shutdown_fin(pcb);
 8004f20:	4620      	mov	r0, r4
}
 8004f22:	b003      	add	sp, #12
 8004f24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return tcp_close_shutdown_fin(pcb);
 8004f28:	f7ff bc88 	b.w	800483c <tcp_close_shutdown_fin>
    if (pcb->local_port != 0) {
 8004f2c:	8ae3      	ldrh	r3, [r4, #22]
 8004f2e:	b13b      	cbz	r3, 8004f40 <tcp_close_shutdown+0xc8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8004f30:	4a21      	ldr	r2, [pc, #132]	; (8004fb8 <tcp_close_shutdown+0x140>)
 8004f32:	6813      	ldr	r3, [r2, #0]
 8004f34:	42a3      	cmp	r3, r4
 8004f36:	d109      	bne.n	8004f4c <tcp_close_shutdown+0xd4>
 8004f38:	68e3      	ldr	r3, [r4, #12]
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60e3      	str	r3, [r4, #12]
          memp_free(MEMP_TCP_PCB, pcb);
 8004f40:	4621      	mov	r1, r4
 8004f42:	2002      	movs	r0, #2
    memp_free(MEMP_TCP_PCB, pcb);
 8004f44:	f7fe ffba 	bl	8003ebc <memp_free>
    break;
 8004f48:	e7d2      	b.n	8004ef0 <tcp_close_shutdown+0x78>
 8004f4a:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0f5      	beq.n	8004f3c <tcp_close_shutdown+0xc4>
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	42a2      	cmp	r2, r4
 8004f54:	d1f9      	bne.n	8004f4a <tcp_close_shutdown+0xd2>
 8004f56:	68e2      	ldr	r2, [r4, #12]
 8004f58:	60da      	str	r2, [r3, #12]
 8004f5a:	e7ef      	b.n	8004f3c <tcp_close_shutdown+0xc4>
         pcb->listener = NULL;
 8004f5c:	2100      	movs	r1, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8004f5e:	4a17      	ldr	r2, [pc, #92]	; (8004fbc <tcp_close_shutdown+0x144>)
 8004f60:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 8004f64:	681b      	ldr	r3, [r3, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8004f66:	b94b      	cbnz	r3, 8004f7c <tcp_close_shutdown+0x104>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8004f68:	3501      	adds	r5, #1
 8004f6a:	2d04      	cmp	r5, #4
 8004f6c:	d1f8      	bne.n	8004f60 <tcp_close_shutdown+0xe8>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8004f6e:	4621      	mov	r1, r4
 8004f70:	4813      	ldr	r0, [pc, #76]	; (8004fc0 <tcp_close_shutdown+0x148>)
 8004f72:	f7ff ff31 	bl	8004dd8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8004f76:	4621      	mov	r1, r4
 8004f78:	2003      	movs	r0, #3
 8004f7a:	e7e3      	b.n	8004f44 <tcp_close_shutdown+0xcc>
      if (pcb->listener == lpcb) {
 8004f7c:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8004f7e:	4284      	cmp	r4, r0
         pcb->listener = NULL;
 8004f80:	bf08      	it	eq
 8004f82:	6799      	streq	r1, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	e7ee      	b.n	8004f66 <tcp_close_shutdown+0xee>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8004f88:	4621      	mov	r1, r4
 8004f8a:	4807      	ldr	r0, [pc, #28]	; (8004fa8 <tcp_close_shutdown+0x130>)
 8004f8c:	f7ff ff24 	bl	8004dd8 <tcp_pcb_remove>
 8004f90:	2201      	movs	r2, #1
 8004f92:	4b06      	ldr	r3, [pc, #24]	; (8004fac <tcp_close_shutdown+0x134>)
    memp_free(MEMP_TCP_PCB, pcb);
 8004f94:	4621      	mov	r1, r4
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8004f96:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8004f98:	4628      	mov	r0, r5
 8004f9a:	e7d3      	b.n	8004f44 <tcp_close_shutdown+0xcc>
 8004f9c:	0800d904 	.word	0x0800d904
 8004fa0:	0800d8eb 	.word	0x0800d8eb
 8004fa4:	0800d278 	.word	0x0800d278
 8004fa8:	200060e8 	.word	0x200060e8
 8004fac:	200060e4 	.word	0x200060e4
 8004fb0:	200060f8 	.word	0x200060f8
 8004fb4:	200060fc 	.word	0x200060fc
 8004fb8:	200060f4 	.word	0x200060f4
 8004fbc:	0800d940 	.word	0x0800d940
 8004fc0:	200060f0 	.word	0x200060f0

08004fc4 <tcp_close>:
  if (pcb->state != LISTEN) {
 8004fc4:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 8004fc6:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 8004fc8:	2b01      	cmp	r3, #1
    pcb->flags |= TF_RXCLOSED;
 8004fca:	bf1e      	ittt	ne
 8004fcc:	7e83      	ldrbne	r3, [r0, #26]
 8004fce:	f043 0310 	orrne.w	r3, r3, #16
 8004fd2:	7683      	strbne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8004fd4:	f7ff bf50 	b.w	8004e78 <tcp_close_shutdown>

08004fd8 <tcp_recv_null>:
{
 8004fd8:	b510      	push	{r4, lr}
 8004fda:	4608      	mov	r0, r1
  if (p != NULL) {
 8004fdc:	4614      	mov	r4, r2
 8004fde:	b13a      	cbz	r2, 8004ff0 <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
 8004fe0:	8911      	ldrh	r1, [r2, #8]
 8004fe2:	f7ff fc89 	bl	80048f8 <tcp_recved>
    pbuf_free(p);
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f7ff f8d2 	bl	8004190 <pbuf_free>
}
 8004fec:	2000      	movs	r0, #0
 8004fee:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1fb      	bne.n	8004fec <tcp_recv_null+0x14>
}
 8004ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8004ff8:	f7ff bfe4 	b.w	8004fc4 <tcp_close>

08004ffc <tcp_process_refused_data>:
{
 8004ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pcb->refused_data = NULL;
 8004ffe:	2300      	movs	r3, #0
    u8_t refused_flags = pcb->refused_data->flags;
 8005000:	6f46      	ldr	r6, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8005002:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 8005006:	7b77      	ldrb	r7, [r6, #13]
{
 8005008:	4604      	mov	r4, r0
    pcb->refused_data = NULL;
 800500a:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800500c:	b1dd      	cbz	r5, 8005046 <tcp_process_refused_data+0x4a>
 800500e:	4601      	mov	r1, r0
 8005010:	4632      	mov	r2, r6
 8005012:	6900      	ldr	r0, [r0, #16]
 8005014:	47a8      	blx	r5
 8005016:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8005018:	b9e0      	cbnz	r0, 8005054 <tcp_process_refused_data+0x58>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800501a:	06bb      	lsls	r3, r7, #26
 800501c:	d511      	bpl.n	8005042 <tcp_process_refused_data+0x46>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800501e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8005020:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8005024:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 8005028:	bf1c      	itt	ne
 800502a:	3301      	addne	r3, #1
 800502c:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800502e:	b146      	cbz	r6, 8005042 <tcp_process_refused_data+0x46>
 8005030:	2300      	movs	r3, #0
 8005032:	4621      	mov	r1, r4
 8005034:	461a      	mov	r2, r3
 8005036:	6920      	ldr	r0, [r4, #16]
 8005038:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 800503a:	300d      	adds	r0, #13
 800503c:	d101      	bne.n	8005042 <tcp_process_refused_data+0x46>
          return ERR_ABRT;
 800503e:	f06f 050c 	mvn.w	r5, #12
}
 8005042:	4628      	mov	r0, r5
 8005044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8005046:	4601      	mov	r1, r0
 8005048:	462b      	mov	r3, r5
 800504a:	4632      	mov	r2, r6
 800504c:	4628      	mov	r0, r5
 800504e:	f7ff ffc3 	bl	8004fd8 <tcp_recv_null>
 8005052:	e7e0      	b.n	8005016 <tcp_process_refused_data+0x1a>
    } else if (err == ERR_ABRT) {
 8005054:	f110 050d 	adds.w	r5, r0, #13
 8005058:	d0f1      	beq.n	800503e <tcp_process_refused_data+0x42>
      pcb->refused_data = refused_data;
 800505a:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 800505c:	f06f 0504 	mvn.w	r5, #4
 8005060:	e7ef      	b.n	8005042 <tcp_process_refused_data+0x46>
	...

08005064 <tcp_fasttmr>:
{
 8005064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8005068:	4d1b      	ldr	r5, [pc, #108]	; (80050d8 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 800506a:	4f1c      	ldr	r7, [pc, #112]	; (80050dc <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 800506c:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800506e:	4e1c      	ldr	r6, [pc, #112]	; (80050e0 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 8005070:	3301      	adds	r3, #1
 8005072:	702b      	strb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 8005074:	f04f 0800 	mov.w	r8, #0
  pcb = tcp_active_pcbs;
 8005078:	683c      	ldr	r4, [r7, #0]
  while (pcb != NULL) {
 800507a:	b90c      	cbnz	r4, 8005080 <tcp_fasttmr+0x1c>
}
 800507c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 8005080:	782b      	ldrb	r3, [r5, #0]
 8005082:	7f62      	ldrb	r2, [r4, #29]
 8005084:	429a      	cmp	r2, r3
 8005086:	d024      	beq.n	80050d2 <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 8005088:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 800508a:	7ea3      	ldrb	r3, [r4, #26]
 800508c:	07d9      	lsls	r1, r3, #31
 800508e:	d509      	bpl.n	80050a4 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8005090:	f043 0302 	orr.w	r3, r3, #2
 8005094:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 8005096:	4620      	mov	r0, r4
 8005098:	f001 fdd0 	bl	8006c3c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800509c:	7ea3      	ldrb	r3, [r4, #26]
 800509e:	f023 0303 	bic.w	r3, r3, #3
 80050a2:	76a3      	strb	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 80050a4:	7ea3      	ldrb	r3, [r4, #26]
 80050a6:	071a      	lsls	r2, r3, #28
 80050a8:	d505      	bpl.n	80050b6 <tcp_fasttmr+0x52>
        pcb->flags &= ~(TF_CLOSEPEND);
 80050aa:	f023 0308 	bic.w	r3, r3, #8
 80050ae:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 80050b0:	4620      	mov	r0, r4
 80050b2:	f7ff fbc3 	bl	800483c <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 80050b6:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 80050b8:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 80050bc:	b13b      	cbz	r3, 80050ce <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 80050be:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 80050c0:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 80050c4:	f7ff ff9a 	bl	8004ffc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80050c8:	7833      	ldrb	r3, [r6, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1d2      	bne.n	8005074 <tcp_fasttmr+0x10>
{
 80050ce:	464c      	mov	r4, r9
 80050d0:	e7d3      	b.n	800507a <tcp_fasttmr+0x16>
      pcb = pcb->next;
 80050d2:	f8d4 900c 	ldr.w	r9, [r4, #12]
 80050d6:	e7fa      	b.n	80050ce <tcp_fasttmr+0x6a>
 80050d8:	20000d21 	.word	0x20000d21
 80050dc:	200060e8 	.word	0x200060e8
 80050e0:	200060e4 	.word	0x200060e4

080050e4 <tcp_tmr>:
{
 80050e4:	b508      	push	{r3, lr}
  tcp_fasttmr();
 80050e6:	f7ff ffbd 	bl	8005064 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 80050ea:	4a06      	ldr	r2, [pc, #24]	; (8005104 <tcp_tmr+0x20>)
 80050ec:	7813      	ldrb	r3, [r2, #0]
 80050ee:	3301      	adds	r3, #1
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	7013      	strb	r3, [r2, #0]
 80050f4:	07db      	lsls	r3, r3, #31
 80050f6:	d503      	bpl.n	8005100 <tcp_tmr+0x1c>
}
 80050f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 80050fc:	f7ff bc8c 	b.w	8004a18 <tcp_slowtmr>
}
 8005100:	bd08      	pop	{r3, pc}
 8005102:	bf00      	nop
 8005104:	20000d20 	.word	0x20000d20

08005108 <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005108:	7d03      	ldrb	r3, [r0, #20]
{
 800510a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800510e:	2b01      	cmp	r3, #1
{
 8005110:	4604      	mov	r4, r0
 8005112:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005114:	d106      	bne.n	8005124 <tcp_abandon+0x1c>
 8005116:	4b30      	ldr	r3, [pc, #192]	; (80051d8 <tcp_abandon+0xd0>)
 8005118:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800511c:	492f      	ldr	r1, [pc, #188]	; (80051dc <tcp_abandon+0xd4>)
 800511e:	4830      	ldr	r0, [pc, #192]	; (80051e0 <tcp_abandon+0xd8>)
 8005120:	f004 fc68 	bl	80099f4 <iprintf>
  if (pcb->state == TIME_WAIT) {
 8005124:	7d23      	ldrb	r3, [r4, #20]
 8005126:	2b0a      	cmp	r3, #10
 8005128:	d10a      	bne.n	8005140 <tcp_abandon+0x38>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800512a:	4621      	mov	r1, r4
 800512c:	482d      	ldr	r0, [pc, #180]	; (80051e4 <tcp_abandon+0xdc>)
 800512e:	f7ff fe53 	bl	8004dd8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8005132:	4621      	mov	r1, r4
 8005134:	2002      	movs	r0, #2
}
 8005136:	b002      	add	sp, #8
 8005138:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 800513c:	f7fe bebe 	b.w	8003ebc <memp_free>
    seqno = pcb->snd_nxt;
 8005140:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 8005144:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 8005148:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 800514c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8005150:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 8005152:	b99b      	cbnz	r3, 800517c <tcp_abandon+0x74>
      if (pcb->local_port != 0) {
 8005154:	b13d      	cbz	r5, 8005166 <tcp_abandon+0x5e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005156:	4a24      	ldr	r2, [pc, #144]	; (80051e8 <tcp_abandon+0xe0>)
 8005158:	6813      	ldr	r3, [r2, #0]
 800515a:	42a3      	cmp	r3, r4
 800515c:	d106      	bne.n	800516c <tcp_abandon+0x64>
 800515e:	68e3      	ldr	r3, [r4, #12]
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	2500      	movs	r5, #0
 8005164:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 8005166:	462e      	mov	r6, r5
 8005168:	e00f      	b.n	800518a <tcp_abandon+0x82>
 800516a:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0f8      	beq.n	8005162 <tcp_abandon+0x5a>
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	42a2      	cmp	r2, r4
 8005174:	d1f9      	bne.n	800516a <tcp_abandon+0x62>
 8005176:	68e2      	ldr	r2, [r4, #12]
 8005178:	60da      	str	r2, [r3, #12]
 800517a:	e7f2      	b.n	8005162 <tcp_abandon+0x5a>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800517c:	4621      	mov	r1, r4
 800517e:	481b      	ldr	r0, [pc, #108]	; (80051ec <tcp_abandon+0xe4>)
 8005180:	f7ff fe2a 	bl	8004dd8 <tcp_pcb_remove>
 8005184:	2201      	movs	r2, #1
 8005186:	4b1a      	ldr	r3, [pc, #104]	; (80051f0 <tcp_abandon+0xe8>)
 8005188:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800518a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800518c:	b108      	cbz	r0, 8005192 <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unacked);
 800518e:	f7ff fbff 	bl	8004990 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8005192:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005194:	b108      	cbz	r0, 800519a <tcp_abandon+0x92>
      tcp_segs_free(pcb->unsent);
 8005196:	f7ff fbfb 	bl	8004990 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800519a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800519c:	b108      	cbz	r0, 80051a2 <tcp_abandon+0x9a>
      tcp_segs_free(pcb->ooseq);
 800519e:	f7ff fbf7 	bl	8004990 <tcp_segs_free>
    if (send_rst) {
 80051a2:	b146      	cbz	r6, 80051b6 <tcp_abandon+0xae>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80051a4:	8b23      	ldrh	r3, [r4, #24]
 80051a6:	4622      	mov	r2, r4
 80051a8:	e9cd 5300 	strd	r5, r3, [sp]
 80051ac:	4651      	mov	r1, sl
 80051ae:	1d23      	adds	r3, r4, #4
 80051b0:	4648      	mov	r0, r9
 80051b2:	f001 febd 	bl	8006f30 <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 80051b6:	4621      	mov	r1, r4
 80051b8:	2002      	movs	r0, #2
 80051ba:	f7fe fe7f 	bl	8003ebc <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80051be:	b13f      	cbz	r7, 80051d0 <tcp_abandon+0xc8>
 80051c0:	f06f 010c 	mvn.w	r1, #12
 80051c4:	4640      	mov	r0, r8
 80051c6:	463b      	mov	r3, r7
}
 80051c8:	b002      	add	sp, #8
 80051ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80051ce:	4718      	bx	r3
}
 80051d0:	b002      	add	sp, #8
 80051d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d6:	bf00      	nop
 80051d8:	0800d904 	.word	0x0800d904
 80051dc:	0800d8ad 	.word	0x0800d8ad
 80051e0:	0800d278 	.word	0x0800d278
 80051e4:	200060f8 	.word	0x200060f8
 80051e8:	200060f4 	.word	0x200060f4
 80051ec:	200060e8 	.word	0x200060e8
 80051f0:	200060e4 	.word	0x200060e4

080051f4 <tcp_abort>:
  tcp_abandon(pcb, 1);
 80051f4:	2101      	movs	r1, #1
 80051f6:	f7ff bf87 	b.w	8005108 <tcp_abandon>

080051fa <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 80051fa:	b538      	push	{r3, r4, r5, lr}
 80051fc:	4604      	mov	r4, r0
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 80051fe:	b901      	cbnz	r1, 8005202 <tcp_netif_ip_addr_changed_pcblist+0x8>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8005200:	bd38      	pop	{r3, r4, r5, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8005202:	680a      	ldr	r2, [r1, #0]
 8005204:	6823      	ldr	r3, [r4, #0]
 8005206:	68cd      	ldr	r5, [r1, #12]
 8005208:	429a      	cmp	r2, r3
 800520a:	d102      	bne.n	8005212 <tcp_netif_ip_addr_changed_pcblist+0x18>
      tcp_abort(pcb);
 800520c:	4608      	mov	r0, r1
 800520e:	f7ff fff1 	bl	80051f4 <tcp_abort>
{
 8005212:	4629      	mov	r1, r5
 8005214:	e7f3      	b.n	80051fe <tcp_netif_ip_addr_changed_pcblist+0x4>
	...

08005218 <tcp_kill_state>:
{
 8005218:	b430      	push	{r4, r5}
  inactivity = 0;
 800521a:	2400      	movs	r4, #0
  inactive = NULL;
 800521c:	4622      	mov	r2, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800521e:	4b0b      	ldr	r3, [pc, #44]	; (800524c <tcp_kill_state+0x34>)
 8005220:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005222:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <tcp_kill_state+0x38>)
 8005224:	681d      	ldr	r5, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005226:	b921      	cbnz	r1, 8005232 <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 8005228:	b172      	cbz	r2, 8005248 <tcp_kill_state+0x30>
}
 800522a:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 800522c:	4610      	mov	r0, r2
 800522e:	f7ff bf6b 	b.w	8005108 <tcp_abandon>
    if (pcb->state == state) {
 8005232:	7d0b      	ldrb	r3, [r1, #20]
 8005234:	4283      	cmp	r3, r0
 8005236:	d105      	bne.n	8005244 <tcp_kill_state+0x2c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005238:	6a0b      	ldr	r3, [r1, #32]
 800523a:	1aeb      	subs	r3, r5, r3
 800523c:	42a3      	cmp	r3, r4
 800523e:	bf24      	itt	cs
 8005240:	461c      	movcs	r4, r3
 8005242:	460a      	movcs	r2, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005244:	68c9      	ldr	r1, [r1, #12]
 8005246:	e7ee      	b.n	8005226 <tcp_kill_state+0xe>
}
 8005248:	bc30      	pop	{r4, r5}
 800524a:	4770      	bx	lr
 800524c:	200060e8 	.word	0x200060e8
 8005250:	200060ec 	.word	0x200060ec

08005254 <tcp_alloc>:
{
 8005254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005256:	f240 6217 	movw	r2, #1559	; 0x617
{
 800525a:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800525c:	4941      	ldr	r1, [pc, #260]	; (8005364 <tcp_alloc+0x110>)
 800525e:	2002      	movs	r0, #2
 8005260:	f7fe fe10 	bl	8003e84 <memp_malloc_fn>
 8005264:	4c40      	ldr	r4, [pc, #256]	; (8005368 <tcp_alloc+0x114>)
  if (pcb == NULL) {
 8005266:	4603      	mov	r3, r0
 8005268:	2800      	cmp	r0, #0
 800526a:	d13e      	bne.n	80052ea <tcp_alloc+0x96>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800526c:	4a3f      	ldr	r2, [pc, #252]	; (800536c <tcp_alloc+0x118>)
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800526e:	6826      	ldr	r6, [r4, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005270:	6812      	ldr	r2, [r2, #0]
 8005272:	2a00      	cmp	r2, #0
 8005274:	d160      	bne.n	8005338 <tcp_alloc+0xe4>
  if (inactive != NULL) {
 8005276:	b113      	cbz	r3, 800527e <tcp_alloc+0x2a>
    tcp_abort(inactive);
 8005278:	4618      	mov	r0, r3
 800527a:	f7ff ffbb 	bl	80051f4 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800527e:	f240 621d 	movw	r2, #1565	; 0x61d
 8005282:	4938      	ldr	r1, [pc, #224]	; (8005364 <tcp_alloc+0x110>)
 8005284:	2002      	movs	r0, #2
 8005286:	f7fe fdfd 	bl	8003e84 <memp_malloc_fn>
    if (pcb == NULL) {
 800528a:	4603      	mov	r3, r0
 800528c:	bb68      	cbnz	r0, 80052ea <tcp_alloc+0x96>
      tcp_kill_state(LAST_ACK);
 800528e:	2009      	movs	r0, #9
 8005290:	f7ff ffc2 	bl	8005218 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005294:	f240 6223 	movw	r2, #1571	; 0x623
 8005298:	4932      	ldr	r1, [pc, #200]	; (8005364 <tcp_alloc+0x110>)
 800529a:	2002      	movs	r0, #2
 800529c:	f7fe fdf2 	bl	8003e84 <memp_malloc_fn>
      if (pcb == NULL) {
 80052a0:	4603      	mov	r3, r0
 80052a2:	bb10      	cbnz	r0, 80052ea <tcp_alloc+0x96>
        tcp_kill_state(CLOSING);
 80052a4:	2008      	movs	r0, #8
 80052a6:	f7ff ffb7 	bl	8005218 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80052aa:	f240 6229 	movw	r2, #1577	; 0x629
 80052ae:	492d      	ldr	r1, [pc, #180]	; (8005364 <tcp_alloc+0x110>)
 80052b0:	2002      	movs	r0, #2
 80052b2:	f7fe fde7 	bl	8003e84 <memp_malloc_fn>
        if (pcb == NULL) {
 80052b6:	4603      	mov	r3, r0
 80052b8:	b9b8      	cbnz	r0, 80052ea <tcp_alloc+0x96>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80052ba:	f015 0f80 	tst.w	r5, #128	; 0x80
 80052be:	bf0c      	ite	eq
 80052c0:	4628      	moveq	r0, r5
 80052c2:	207f      	movne	r0, #127	; 0x7f
  inactivity = 0;
 80052c4:	461e      	mov	r6, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80052c6:	4a2a      	ldr	r2, [pc, #168]	; (8005370 <tcp_alloc+0x11c>)
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80052c8:	f8d4 c000 	ldr.w	ip, [r4]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80052cc:	6812      	ldr	r2, [r2, #0]
 80052ce:	2a00      	cmp	r2, #0
 80052d0:	d13a      	bne.n	8005348 <tcp_alloc+0xf4>
  if (inactive != NULL) {
 80052d2:	b113      	cbz	r3, 80052da <tcp_alloc+0x86>
    tcp_abort(inactive);
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff ff8d 	bl	80051f4 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80052da:	f240 622f 	movw	r2, #1583	; 0x62f
 80052de:	4921      	ldr	r1, [pc, #132]	; (8005364 <tcp_alloc+0x110>)
 80052e0:	2002      	movs	r0, #2
 80052e2:	f7fe fdcf 	bl	8003e84 <memp_malloc_fn>
  if (pcb != NULL) {
 80052e6:	4603      	mov	r3, r0
 80052e8:	b320      	cbz	r0, 8005334 <tcp_alloc+0xe0>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80052ea:	2298      	movs	r2, #152	; 0x98
 80052ec:	2100      	movs	r1, #0
 80052ee:	4618      	mov	r0, r3
 80052f0:	f003 fc94 	bl	8008c1c <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80052f4:	491f      	ldr	r1, [pc, #124]	; (8005374 <tcp_alloc+0x120>)
    pcb->snd_buf = TCP_SND_BUF;
 80052f6:	f44f 6286 	mov.w	r2, #1072	; 0x430
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80052fa:	6281      	str	r1, [r0, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80052fc:	21ff      	movs	r1, #255	; 0xff
 80052fe:	7281      	strb	r1, [r0, #10]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8005300:	2106      	movs	r1, #6
 8005302:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8005306:	87c1      	strh	r1, [r0, #62]	; 0x3e
    pcb->rtime = -1;
 8005308:	491b      	ldr	r1, [pc, #108]	; (8005378 <tcp_alloc+0x124>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800530a:	4603      	mov	r3, r0
    pcb->rtime = -1;
 800530c:	6301      	str	r1, [r0, #48]	; 0x30
    pcb->cwnd = 1;
 800530e:	2101      	movs	r1, #1
 8005310:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8005314:	6821      	ldr	r1, [r4, #0]
    pcb->snd_buf = TCP_SND_BUF;
 8005316:	f8a0 2060 	strh.w	r2, [r0, #96]	; 0x60
    pcb->tmr = tcp_ticks;
 800531a:	6201      	str	r1, [r0, #32]
    pcb->ssthresh = TCP_SND_BUF;
 800531c:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
    pcb->last_timer = tcp_timer_ctr;
 8005320:	4916      	ldr	r1, [pc, #88]	; (800537c <tcp_alloc+0x128>)
    pcb->recv = tcp_recv_null;
 8005322:	4a17      	ldr	r2, [pc, #92]	; (8005380 <tcp_alloc+0x12c>)
    pcb->last_timer = tcp_timer_ctr;
 8005324:	7809      	ldrb	r1, [r1, #0]
    pcb->recv = tcp_recv_null;
 8005326:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800532a:	4a16      	ldr	r2, [pc, #88]	; (8005384 <tcp_alloc+0x130>)
    pcb->prio = prio;
 800532c:	7545      	strb	r5, [r0, #21]
    pcb->last_timer = tcp_timer_ctr;
 800532e:	7741      	strb	r1, [r0, #29]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8005330:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
}
 8005334:	4618      	mov	r0, r3
 8005336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005338:	6a11      	ldr	r1, [r2, #32]
 800533a:	1a71      	subs	r1, r6, r1
 800533c:	4281      	cmp	r1, r0
 800533e:	bf24      	itt	cs
 8005340:	4613      	movcs	r3, r2
 8005342:	4608      	movcs	r0, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005344:	68d2      	ldr	r2, [r2, #12]
 8005346:	e794      	b.n	8005272 <tcp_alloc+0x1e>
    if (pcb->prio <= mprio &&
 8005348:	7d57      	ldrb	r7, [r2, #21]
 800534a:	4287      	cmp	r7, r0
 800534c:	d807      	bhi.n	800535e <tcp_alloc+0x10a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800534e:	6a11      	ldr	r1, [r2, #32]
 8005350:	ebac 0101 	sub.w	r1, ip, r1
    if (pcb->prio <= mprio &&
 8005354:	42b1      	cmp	r1, r6
 8005356:	bf22      	ittt	cs
 8005358:	4638      	movcs	r0, r7
 800535a:	460e      	movcs	r6, r1
 800535c:	4613      	movcs	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800535e:	68d2      	ldr	r2, [r2, #12]
 8005360:	e7b5      	b.n	80052ce <tcp_alloc+0x7a>
 8005362:	bf00      	nop
 8005364:	0800d904 	.word	0x0800d904
 8005368:	200060ec 	.word	0x200060ec
 800536c:	200060f8 	.word	0x200060f8
 8005370:	200060e8 	.word	0x200060e8
 8005374:	08600860 	.word	0x08600860
 8005378:	0218ffff 	.word	0x0218ffff
 800537c:	20000d21 	.word	0x20000d21
 8005380:	08004fd9 	.word	0x08004fd9
 8005384:	006ddd00 	.word	0x006ddd00

08005388 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8005388:	4b03      	ldr	r3, [pc, #12]	; (8005398 <tcp_next_iss+0x10>)
 800538a:	4a04      	ldr	r2, [pc, #16]	; (800539c <tcp_next_iss+0x14>)
 800538c:	6818      	ldr	r0, [r3, #0]
 800538e:	6812      	ldr	r2, [r2, #0]
 8005390:	4410      	add	r0, r2
 8005392:	6018      	str	r0, [r3, #0]
}
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	2000000c 	.word	0x2000000c
 800539c:	200060ec 	.word	0x200060ec

080053a0 <tcp_eff_send_mss_impl>:
{
 80053a0:	b510      	push	{r4, lr}
 80053a2:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 80053a4:	4608      	mov	r0, r1
 80053a6:	f002 fe23 	bl	8007ff0 <ip4_route>
    if (outif == NULL) {
 80053aa:	b130      	cbz	r0, 80053ba <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 80053ac:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
  if (mtu != 0) {
 80053ae:	b123      	cbz	r3, 80053ba <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 80053b0:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	429c      	cmp	r4, r3
 80053b6:	bf28      	it	cs
 80053b8:	461c      	movcs	r4, r3
}
 80053ba:	4620      	mov	r0, r4
 80053bc:	bd10      	pop	{r4, pc}
	...

080053c0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 80053c4:	4604      	mov	r4, r0
 80053c6:	b180      	cbz	r0, 80053ea <tcp_netif_ip_addr_changed+0x2a>
 80053c8:	6803      	ldr	r3, [r0, #0]
 80053ca:	b173      	cbz	r3, 80053ea <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80053cc:	4b0c      	ldr	r3, [pc, #48]	; (8005400 <tcp_netif_ip_addr_changed+0x40>)
 80053ce:	6819      	ldr	r1, [r3, #0]
 80053d0:	f7ff ff13 	bl	80051fa <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80053d4:	4b0b      	ldr	r3, [pc, #44]	; (8005404 <tcp_netif_ip_addr_changed+0x44>)
 80053d6:	4620      	mov	r0, r4
 80053d8:	6819      	ldr	r1, [r3, #0]
 80053da:	f7ff ff0e 	bl	80051fa <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80053de:	b125      	cbz	r5, 80053ea <tcp_netif_ip_addr_changed+0x2a>
 80053e0:	682b      	ldr	r3, [r5, #0]
 80053e2:	b113      	cbz	r3, 80053ea <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80053e4:	4b08      	ldr	r3, [pc, #32]	; (8005408 <tcp_netif_ip_addr_changed+0x48>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	b903      	cbnz	r3, 80053ec <tcp_netif_ip_addr_changed+0x2c>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 80053ea:	bd38      	pop	{r3, r4, r5, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80053ec:	6818      	ldr	r0, [r3, #0]
 80053ee:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 80053f0:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80053f2:	4288      	cmp	r0, r1
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80053f4:	bf04      	itt	eq
 80053f6:	6829      	ldreq	r1, [r5, #0]
 80053f8:	6019      	streq	r1, [r3, #0]
{
 80053fa:	4613      	mov	r3, r2
 80053fc:	e7f4      	b.n	80053e8 <tcp_netif_ip_addr_changed+0x28>
 80053fe:	bf00      	nop
 8005400:	200060e8 	.word	0x200060e8
 8005404:	200060f4 	.word	0x200060f4
 8005408:	200060f0 	.word	0x200060f0

0800540c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800540c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800540e:	6903      	ldr	r3, [r0, #16]
{
 8005410:	4605      	mov	r5, r0
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8005412:	8998      	ldrh	r0, [r3, #12]
{
 8005414:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8005416:	f7fe fc3d 	bl	8003c94 <lwip_htons>
 800541a:	07c2      	lsls	r2, r0, #31
 800541c:	d414      	bmi.n	8005448 <tcp_oos_insert_segment+0x3c>
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
 800541e:	4e18      	ldr	r6, [pc, #96]	; (8005480 <tcp_oos_insert_segment+0x74>)
 8005420:	6927      	ldr	r7, [r4, #16]
 8005422:	6830      	ldr	r0, [r6, #0]
 8005424:	892b      	ldrh	r3, [r5, #8]
 8005426:	6879      	ldr	r1, [r7, #4]
 8005428:	8922      	ldrh	r2, [r4, #8]
 800542a:	4403      	add	r3, r0
 800542c:	440a      	add	r2, r1
 800542e:	1a9a      	subs	r2, r3, r2
    while (next &&
 8005430:	2a00      	cmp	r2, #0
 8005432:	da0f      	bge.n	8005454 <tcp_oos_insert_segment+0x48>
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8005434:	1a5b      	subs	r3, r3, r1
    if (next &&
 8005436:	2b00      	cmp	r3, #0
 8005438:	dd0a      	ble.n	8005450 <tcp_oos_insert_segment+0x44>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800543a:	1a09      	subs	r1, r1, r0
 800543c:	b289      	uxth	r1, r1
 800543e:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8005440:	6868      	ldr	r0, [r5, #4]
 8005442:	f7fe ffeb 	bl	800441c <pbuf_realloc>
 8005446:	e003      	b.n	8005450 <tcp_oos_insert_segment+0x44>
    tcp_segs_free(next);
 8005448:	4620      	mov	r0, r4
 800544a:	f7ff faa1 	bl	8004990 <tcp_segs_free>
    next = NULL;
 800544e:	2400      	movs	r4, #0
    }
  }
  cseg->next = next;
 8005450:	602c      	str	r4, [r5, #0]
}
 8005452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8005454:	89b8      	ldrh	r0, [r7, #12]
 8005456:	f7fe fc1d 	bl	8003c94 <lwip_htons>
 800545a:	07c3      	lsls	r3, r0, #31
 800545c:	d507      	bpl.n	800546e <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800545e:	692b      	ldr	r3, [r5, #16]
 8005460:	2001      	movs	r0, #1
 8005462:	899f      	ldrh	r7, [r3, #12]
 8005464:	f7fe fc16 	bl	8003c94 <lwip_htons>
 8005468:	692b      	ldr	r3, [r5, #16]
 800546a:	4338      	orrs	r0, r7
 800546c:	8198      	strh	r0, [r3, #12]
      next = next->next;
 800546e:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 8005470:	4620      	mov	r0, r4
 8005472:	f7ff fa7f 	bl	8004974 <tcp_seg_free>
 8005476:	463c      	mov	r4, r7
    while (next &&
 8005478:	2f00      	cmp	r7, #0
 800547a:	d1d1      	bne.n	8005420 <tcp_oos_insert_segment+0x14>
 800547c:	e7e8      	b.n	8005450 <tcp_oos_insert_segment+0x44>
 800547e:	bf00      	nop
 8005480:	20000d4c 	.word	0x20000d4c

08005484 <tcp_receive>:
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8005484:	7d03      	ldrb	r3, [r0, #20]
{
 8005486:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800548a:	2b03      	cmp	r3, #3
{
 800548c:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800548e:	d806      	bhi.n	800549e <tcp_receive+0x1a>
 8005490:	4b84      	ldr	r3, [pc, #528]	; (80056a4 <tcp_receive+0x220>)
 8005492:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8005496:	4984      	ldr	r1, [pc, #528]	; (80056a8 <tcp_receive+0x224>)
 8005498:	4884      	ldr	r0, [pc, #528]	; (80056ac <tcp_receive+0x228>)
 800549a:	f004 faab 	bl	80099f4 <iprintf>

  if (flags & TCP_ACK) {
 800549e:	4b84      	ldr	r3, [pc, #528]	; (80056b0 <tcp_receive+0x22c>)
 80054a0:	4e84      	ldr	r6, [pc, #528]	; (80056b4 <tcp_receive+0x230>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	f013 0f10 	tst.w	r3, #16
 80054a8:	f000 8176 	beq.w	8005798 <tcp_receive+0x314>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80054ac:	e9d4 0c14 	ldrd	r0, ip, [r4, #80]	; 0x50
 80054b0:	6831      	ldr	r1, [r6, #0]
 80054b2:	4d81      	ldr	r5, [pc, #516]	; (80056b8 <tcp_receive+0x234>)
 80054b4:	1a47      	subs	r7, r0, r1
 80054b6:	2f00      	cmp	r7, #0
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80054b8:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 80054bc:	682b      	ldr	r3, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80054be:	db0c      	blt.n	80054da <tcp_receive+0x56>
 80054c0:	4288      	cmp	r0, r1
 80054c2:	d103      	bne.n	80054cc <tcp_receive+0x48>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80054c4:	ebac 0003 	sub.w	r0, ip, r3
 80054c8:	2800      	cmp	r0, #0
 80054ca:	db06      	blt.n	80054da <tcp_receive+0x56>
 80054cc:	459c      	cmp	ip, r3
 80054ce:	d11a      	bne.n	8005506 <tcp_receive+0x82>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80054d0:	487a      	ldr	r0, [pc, #488]	; (80056bc <tcp_receive+0x238>)
 80054d2:	6800      	ldr	r0, [r0, #0]
 80054d4:	89c0      	ldrh	r0, [r0, #14]
 80054d6:	4290      	cmp	r0, r2
 80054d8:	d915      	bls.n	8005506 <tcp_receive+0x82>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80054da:	4878      	ldr	r0, [pc, #480]	; (80056bc <tcp_receive+0x238>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80054dc:	f8b4 e05e 	ldrh.w	lr, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80054e0:	6800      	ldr	r0, [r0, #0]
 80054e2:	89c0      	ldrh	r0, [r0, #14]
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
      pcb->snd_wl2 = ackno;
 80054e4:	e9c4 1314 	strd	r1, r3, [r4, #80]	; 0x50
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80054e8:	b287      	uxth	r7, r0
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80054ea:	45be      	cmp	lr, r7
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80054ec:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
        pcb->snd_wnd_max = pcb->snd_wnd;
 80054f0:	bf38      	it	cc
 80054f2:	f8a4 005e 	strhcc.w	r0, [r4, #94]	; 0x5e
 80054f6:	f894 1095 	ldrb.w	r1, [r4, #149]	; 0x95
      if (pcb->snd_wnd == 0) {
 80054fa:	bb97      	cbnz	r7, 8005562 <tcp_receive+0xde>
        if (pcb->persist_backoff == 0) {
 80054fc:	b919      	cbnz	r1, 8005506 <tcp_receive+0x82>
          /* start persist timer */
          pcb->persist_cnt = 0;
 80054fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005502:	f8a4 1094 	strh.w	r1, [r4, #148]	; 0x94
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8005506:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005508:	4f6d      	ldr	r7, [pc, #436]	; (80056c0 <tcp_receive+0x23c>)
 800550a:	1a19      	subs	r1, r3, r0
 800550c:	2900      	cmp	r1, #0
 800550e:	dc37      	bgt.n	8005580 <tcp_receive+0xfc>
      /* Clause 2 */
      if (tcplen == 0) {
 8005510:	496c      	ldr	r1, [pc, #432]	; (80056c4 <tcp_receive+0x240>)
 8005512:	8809      	ldrh	r1, [r1, #0]
 8005514:	bb81      	cbnz	r1, 8005578 <tcp_receive+0xf4>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8005516:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
 800551a:	6d61      	ldr	r1, [r4, #84]	; 0x54
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800551c:	4462      	add	r2, ip
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800551e:	4471      	add	r1, lr
 8005520:	4291      	cmp	r1, r2
 8005522:	d129      	bne.n	8005578 <tcp_receive+0xf4>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8005524:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8005528:	2a00      	cmp	r2, #0
 800552a:	db25      	blt.n	8005578 <tcp_receive+0xf4>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800552c:	4298      	cmp	r0, r3
 800552e:	d123      	bne.n	8005578 <tcp_receive+0xf4>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8005530:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005534:	2bff      	cmp	r3, #255	; 0xff
                ++pcb->dupacks;
 8005536:	bf1c      	itt	ne
 8005538:	3301      	addne	r3, #1
 800553a:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800553e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005542:	2b03      	cmp	r3, #3
 8005544:	d913      	bls.n	800556e <tcp_receive+0xea>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8005546:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800554a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800554c:	4413      	add	r3, r2
 800554e:	b29b      	uxth	r3, r3
 8005550:	429a      	cmp	r2, r3
 8005552:	d201      	bcs.n	8005558 <tcp_receive+0xd4>
                  pcb->cwnd += pcb->mss;
 8005554:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (pcb->unsent == NULL) {
        pcb->unsent_oversize = 0;
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8005558:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80056a4 <tcp_receive+0x220>
 800555c:	f8df a14c 	ldr.w	sl, [pc, #332]	; 80056ac <tcp_receive+0x228>
 8005560:	e10d      	b.n	800577e <tcp_receive+0x2fa>
      } else if (pcb->persist_backoff > 0) {
 8005562:	2900      	cmp	r1, #0
 8005564:	d0cf      	beq.n	8005506 <tcp_receive+0x82>
          pcb->persist_backoff = 0;
 8005566:	2100      	movs	r1, #0
 8005568:	f884 1095 	strb.w	r1, [r4, #149]	; 0x95
 800556c:	e7cb      	b.n	8005506 <tcp_receive+0x82>
              } else if (pcb->dupacks == 3) {
 800556e:	d1f3      	bne.n	8005558 <tcp_receive+0xd4>
                tcp_rexmit_fast(pcb);
 8005570:	4620      	mov	r0, r4
 8005572:	f001 fd7b 	bl	800706c <tcp_rexmit_fast>
 8005576:	e7ef      	b.n	8005558 <tcp_receive+0xd4>
        pcb->dupacks = 0;
 8005578:	2300      	movs	r3, #0
 800557a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800557e:	e7eb      	b.n	8005558 <tcp_receive+0xd4>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8005580:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005582:	1a9a      	subs	r2, r3, r2
 8005584:	2a00      	cmp	r2, #0
 8005586:	f300 8089 	bgt.w	800569c <tcp_receive+0x218>
      if (pcb->flags & TF_INFR) {
 800558a:	7ea2      	ldrb	r2, [r4, #26]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800558c:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      if (pcb->flags & TF_INFR) {
 8005590:	0751      	lsls	r1, r2, #29
      pcb->nrtx = 0;
 8005592:	f04f 0100 	mov.w	r1, #0
        pcb->flags &= ~TF_INFR;
 8005596:	bf42      	ittt	mi
 8005598:	f022 0204 	bicmi.w	r2, r2, #4
 800559c:	76a2      	strbmi	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800559e:	f8b4 204a 	ldrhmi.w	r2, [r4, #74]	; 0x4a
      pcb->lastack = ackno;
 80055a2:	6463      	str	r3, [r4, #68]	; 0x44
        pcb->cwnd = pcb->ssthresh;
 80055a4:	bf48      	it	mi
 80055a6:	f8a4 2048 	strhmi.w	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
 80055aa:	7d23      	ldrb	r3, [r4, #20]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80055ac:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      if (pcb->state >= ESTABLISHED) {
 80055ae:	2b03      	cmp	r3, #3
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80055b0:	eb02 02e0 	add.w	r2, r2, r0, asr #3
      pcb->nrtx = 0;
 80055b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80055b8:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 80055bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 80055c0:	d90f      	bls.n	80055e2 <tcp_receive+0x15e>
        if (pcb->cwnd < pcb->ssthresh) {
 80055c2:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80055c6:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 80055ca:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80055cc:	4291      	cmp	r1, r2
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80055ce:	bf9c      	itt	ls
 80055d0:	435b      	mulls	r3, r3
 80055d2:	fb93 f3f2 	sdivls	r3, r3, r2
 80055d6:	4413      	add	r3, r2
 80055d8:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 80055da:	429a      	cmp	r2, r3
 80055dc:	d201      	bcs.n	80055e2 <tcp_receive+0x15e>
            pcb->cwnd = new_cwnd;
 80055de:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80055e2:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80056a4 <tcp_receive+0x220>
 80055e6:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80056ac <tcp_receive+0x228>
 80055ea:	e04a      	b.n	8005682 <tcp_receive+0x1fe>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	6858      	ldr	r0, [r3, #4]
 80055f0:	f7fe fb53 	bl	8003c9a <lwip_htonl>
 80055f4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80055f6:	4683      	mov	fp, r0
 80055f8:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	8998      	ldrh	r0, [r3, #12]
 8005600:	f7fe fb48 	bl	8003c94 <lwip_htons>
 8005604:	f010 0003 	ands.w	r0, r0, #3
 8005608:	bf18      	it	ne
 800560a:	2001      	movne	r0, #1
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	eba8 0803 	sub.w	r8, r8, r3
 8005612:	44d8      	add	r8, fp
 8005614:	4480      	add	r8, r0
      while (pcb->unacked != NULL &&
 8005616:	f1b8 0f00 	cmp.w	r8, #0
 800561a:	dc35      	bgt.n	8005688 <tcp_receive+0x204>
        next = pcb->unacked;
 800561c:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8005620:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
        pcb->unacked = pcb->unacked->next;
 8005624:	f8d8 3000 	ldr.w	r3, [r8]
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8005628:	f8d8 0004 	ldr.w	r0, [r8, #4]
        pcb->unacked = pcb->unacked->next;
 800562c:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800562e:	f7fe ff65 	bl	80044fc <pbuf_clen>
 8005632:	4583      	cmp	fp, r0
 8005634:	d206      	bcs.n	8005644 <tcp_receive+0x1c0>
 8005636:	464b      	mov	r3, r9
 8005638:	f240 429e 	movw	r2, #1182	; 0x49e
 800563c:	4922      	ldr	r1, [pc, #136]	; (80056c8 <tcp_receive+0x244>)
 800563e:	4650      	mov	r0, sl
 8005640:	f004 f9d8 	bl	80099f4 <iprintf>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8005644:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005648:	f7fe ff58 	bl	80044fc <pbuf_clen>
 800564c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 8005650:	883a      	ldrh	r2, [r7, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8005652:	1a18      	subs	r0, r3, r0
        recv_acked += next->len;
 8005654:	f8b8 3008 	ldrh.w	r3, [r8, #8]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8005658:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
 800565c:	4413      	add	r3, r2
        tcp_seg_free(next);
 800565e:	4640      	mov	r0, r8
        recv_acked += next->len;
 8005660:	803b      	strh	r3, [r7, #0]
        tcp_seg_free(next);
 8005662:	f7ff f987 	bl	8004974 <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 8005666:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800566a:	b153      	cbz	r3, 8005682 <tcp_receive+0x1fe>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800566c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800566e:	b943      	cbnz	r3, 8005682 <tcp_receive+0x1fe>
 8005670:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005672:	b933      	cbnz	r3, 8005682 <tcp_receive+0x1fe>
 8005674:	464b      	mov	r3, r9
 8005676:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800567a:	4914      	ldr	r1, [pc, #80]	; (80056cc <tcp_receive+0x248>)
 800567c:	4650      	mov	r0, sl
 800567e:	f004 f9b9 	bl	80099f4 <iprintf>
      while (pcb->unacked != NULL &&
 8005682:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1b1      	bne.n	80055ec <tcp_receive+0x168>
      if (pcb->unacked == NULL) {
 8005688:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800568a:	2300      	movs	r3, #0
 800568c:	b922      	cbnz	r2, 8005698 <tcp_receive+0x214>
        pcb->rtime = -1;
 800568e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005692:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8005694:	76e3      	strb	r3, [r4, #27]
 8005696:	e75f      	b.n	8005558 <tcp_receive+0xd4>
        pcb->rtime = 0;
 8005698:	8623      	strh	r3, [r4, #48]	; 0x30
 800569a:	e7fb      	b.n	8005694 <tcp_receive+0x210>
      tcp_send_empty_ack(pcb);
 800569c:	4620      	mov	r0, r4
 800569e:	f001 fa98 	bl	8006bd2 <tcp_send_empty_ack>
 80056a2:	e759      	b.n	8005558 <tcp_receive+0xd4>
 80056a4:	0800dd08 	.word	0x0800dd08
 80056a8:	0800dd3a 	.word	0x0800dd3a
 80056ac:	0800d278 	.word	0x0800d278
 80056b0:	20000d28 	.word	0x20000d28
 80056b4:	20000d4c 	.word	0x20000d4c
 80056b8:	20000d24 	.word	0x20000d24
 80056bc:	20000d54 	.word	0x20000d54
 80056c0:	20000d40 	.word	0x20000d40
 80056c4:	20000d62 	.word	0x20000d62
 80056c8:	0800dd53 	.word	0x0800dd53
 80056cc:	0800dd7b 	.word	0x0800dd7b
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80056d0:	682a      	ldr	r2, [r5, #0]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	9201      	str	r2, [sp, #4]
 80056d6:	6858      	ldr	r0, [r3, #4]
 80056d8:	f7fe fadf 	bl	8003c9a <lwip_htonl>
 80056dc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80056de:	4683      	mov	fp, r0
 80056e0:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	8998      	ldrh	r0, [r3, #12]
 80056e8:	f7fe fad4 	bl	8003c94 <lwip_htons>
 80056ec:	f010 0003 	ands.w	r0, r0, #3
 80056f0:	bf18      	it	ne
 80056f2:	2001      	movne	r0, #1
 80056f4:	9a01      	ldr	r2, [sp, #4]
 80056f6:	eba2 0808 	sub.w	r8, r2, r8
 80056fa:	eba8 080b 	sub.w	r8, r8, fp
 80056fe:	eba8 0800 	sub.w	r8, r8, r0
    while (pcb->unsent != NULL &&
 8005702:	f1b8 0f00 	cmp.w	r8, #0
 8005706:	db3d      	blt.n	8005784 <tcp_receive+0x300>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8005708:	682b      	ldr	r3, [r5, #0]
 800570a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800570c:	1a9b      	subs	r3, r3, r2
 800570e:	2b00      	cmp	r3, #0
 8005710:	dc38      	bgt.n	8005784 <tcp_receive+0x300>
      next = pcb->unsent;
 8005712:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 8005716:	f8d8 3000 	ldr.w	r3, [r8]
 800571a:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 800571c:	b90b      	cbnz	r3, 8005722 <tcp_receive+0x29e>
        pcb->unsent_oversize = 0;
 800571e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8005722:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005726:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
 800572a:	f7fe fee7 	bl	80044fc <pbuf_clen>
 800572e:	4583      	cmp	fp, r0
 8005730:	d206      	bcs.n	8005740 <tcp_receive+0x2bc>
 8005732:	464b      	mov	r3, r9
 8005734:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8005738:	49b5      	ldr	r1, [pc, #724]	; (8005a10 <tcp_receive+0x58c>)
 800573a:	4650      	mov	r0, sl
 800573c:	f004 f95a 	bl	80099f4 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8005740:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005744:	f7fe feda 	bl	80044fc <pbuf_clen>
 8005748:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 800574c:	883a      	ldrh	r2, [r7, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800574e:	1a18      	subs	r0, r3, r0
      recv_acked += next->len;
 8005750:	f8b8 3008 	ldrh.w	r3, [r8, #8]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8005754:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
 8005758:	4413      	add	r3, r2
      tcp_seg_free(next);
 800575a:	4640      	mov	r0, r8
      recv_acked += next->len;
 800575c:	803b      	strh	r3, [r7, #0]
      tcp_seg_free(next);
 800575e:	f7ff f909 	bl	8004974 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8005762:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005766:	b153      	cbz	r3, 800577e <tcp_receive+0x2fa>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8005768:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800576a:	b943      	cbnz	r3, 800577e <tcp_receive+0x2fa>
 800576c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800576e:	b933      	cbnz	r3, 800577e <tcp_receive+0x2fa>
 8005770:	464b      	mov	r3, r9
 8005772:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8005776:	49a7      	ldr	r1, [pc, #668]	; (8005a14 <tcp_receive+0x590>)
 8005778:	4650      	mov	r0, sl
 800577a:	f004 f93b 	bl	80099f4 <iprintf>
    while (pcb->unsent != NULL &&
 800577e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1a5      	bne.n	80056d0 <tcp_receive+0x24c>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8005784:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8005788:	883a      	ldrh	r2, [r7, #0]
 800578a:	4413      	add	r3, r2
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800578c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 800578e:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8005792:	2a00      	cmp	r2, #0
 8005794:	f040 8118 	bne.w	80059c8 <tcp_receive+0x544>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8005798:	4f9f      	ldr	r7, [pc, #636]	; (8005a18 <tcp_receive+0x594>)
 800579a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800579c:	8838      	ldrh	r0, [r7, #0]
 800579e:	6833      	ldr	r3, [r6, #0]
 80057a0:	2800      	cmp	r0, #0
 80057a2:	f000 831b 	beq.w	8005ddc <tcp_receive+0x958>
 80057a6:	7d21      	ldrb	r1, [r4, #20]
 80057a8:	2906      	cmp	r1, #6
 80057aa:	f200 8317 	bhi.w	8005ddc <tcp_receive+0x958>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80057ae:	eba2 0a03 	sub.w	sl, r2, r3
 80057b2:	f1ba 0f01 	cmp.w	sl, #1
 80057b6:	f100 815a 	bmi.w	8005a6e <tcp_receive+0x5ea>
 80057ba:	f1c3 0101 	rsb	r1, r3, #1
 80057be:	1a09      	subs	r1, r1, r0
 80057c0:	4411      	add	r1, r2
 80057c2:	2900      	cmp	r1, #0
 80057c4:	f300 8153 	bgt.w	8005a6e <tcp_receive+0x5ea>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80057c8:	4d94      	ldr	r5, [pc, #592]	; (8005a1c <tcp_receive+0x598>)
      off = pcb->rcv_nxt - seqno;
 80057ca:	46d1      	mov	r9, sl
      struct pbuf *p = inseg.p;
 80057cc:	f8d5 8004 	ldr.w	r8, [r5, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80057d0:	f1b8 0f00 	cmp.w	r8, #0
 80057d4:	d106      	bne.n	80057e4 <tcp_receive+0x360>
 80057d6:	4b92      	ldr	r3, [pc, #584]	; (8005a20 <tcp_receive+0x59c>)
 80057d8:	f240 523c 	movw	r2, #1340	; 0x53c
 80057dc:	4991      	ldr	r1, [pc, #580]	; (8005a24 <tcp_receive+0x5a0>)
 80057de:	4892      	ldr	r0, [pc, #584]	; (8005a28 <tcp_receive+0x5a4>)
 80057e0:	f004 f908 	bl	80099f4 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 80057e4:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 80057e8:	459a      	cmp	sl, r3
 80057ea:	dd06      	ble.n	80057fa <tcp_receive+0x376>
 80057ec:	4b8c      	ldr	r3, [pc, #560]	; (8005a20 <tcp_receive+0x59c>)
 80057ee:	f240 523d 	movw	r2, #1341	; 0x53d
 80057f2:	498e      	ldr	r1, [pc, #568]	; (8005a2c <tcp_receive+0x5a8>)
 80057f4:	488c      	ldr	r0, [pc, #560]	; (8005a28 <tcp_receive+0x5a4>)
 80057f6:	f004 f8fd 	bl	80099f4 <iprintf>
      if (inseg.p->len < off) {
 80057fa:	6868      	ldr	r0, [r5, #4]
 80057fc:	fa1f fb8a 	uxth.w	fp, sl
 8005800:	8943      	ldrh	r3, [r0, #10]
 8005802:	4553      	cmp	r3, sl
 8005804:	f280 8127 	bge.w	8005a56 <tcp_receive+0x5d2>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8005808:	8903      	ldrh	r3, [r0, #8]
 800580a:	4553      	cmp	r3, sl
 800580c:	da06      	bge.n	800581c <tcp_receive+0x398>
 800580e:	4b84      	ldr	r3, [pc, #528]	; (8005a20 <tcp_receive+0x59c>)
 8005810:	f240 523f 	movw	r2, #1343	; 0x53f
 8005814:	4986      	ldr	r1, [pc, #536]	; (8005a30 <tcp_receive+0x5ac>)
 8005816:	4884      	ldr	r0, [pc, #528]	; (8005a28 <tcp_receive+0x5a4>)
 8005818:	f004 f8ec 	bl	80099f4 <iprintf>
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 800581c:	2200      	movs	r2, #0
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800581e:	686b      	ldr	r3, [r5, #4]
 8005820:	8919      	ldrh	r1, [r3, #8]
 8005822:	eba1 010b 	sub.w	r1, r1, fp
 8005826:	b289      	uxth	r1, r1
        while (p->len < off) {
 8005828:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800582c:	454b      	cmp	r3, r9
 800582e:	f2c0 8109 	blt.w	8005a44 <tcp_receive+0x5c0>
          p = p->next;
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8005832:	f1c9 0100 	rsb	r1, r9, #0
 8005836:	b209      	sxth	r1, r1
 8005838:	4640      	mov	r0, r8
 800583a:	f7fe fca3 	bl	8004184 <pbuf_header>
 800583e:	b130      	cbz	r0, 800584e <tcp_receive+0x3ca>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8005840:	f240 524c 	movw	r2, #1356	; 0x54c
 8005844:	4b76      	ldr	r3, [pc, #472]	; (8005a20 <tcp_receive+0x59c>)
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8005846:	497b      	ldr	r1, [pc, #492]	; (8005a34 <tcp_receive+0x5b0>)
 8005848:	4877      	ldr	r0, [pc, #476]	; (8005a28 <tcp_receive+0x5a4>)
 800584a:	f004 f8d3 	bl	80099f4 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800584e:	8929      	ldrh	r1, [r5, #8]
 8005850:	6833      	ldr	r3, [r6, #0]
 8005852:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005854:	440b      	add	r3, r1
 8005856:	1a9b      	subs	r3, r3, r2
 8005858:	812b      	strh	r3, [r5, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800585a:	692b      	ldr	r3, [r5, #16]
 800585c:	6032      	str	r2, [r6, #0]
 800585e:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8005860:	6831      	ldr	r1, [r6, #0]
 8005862:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005864:	1a8b      	subs	r3, r1, r2
 8005866:	2b00      	cmp	r3, #0
 8005868:	f2c0 82b2 	blt.w	8005dd0 <tcp_receive+0x94c>
 800586c:	1c4b      	adds	r3, r1, #1
 800586e:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8005870:	1a9b      	subs	r3, r3, r2
 8005872:	1a1b      	subs	r3, r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	f300 82ab 	bgt.w	8005dd0 <tcp_receive+0x94c>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800587a:	4291      	cmp	r1, r2
 800587c:	f040 81c7 	bne.w	8005c0e <tcp_receive+0x78a>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8005880:	4d66      	ldr	r5, [pc, #408]	; (8005a1c <tcp_receive+0x598>)
 8005882:	692b      	ldr	r3, [r5, #16]
 8005884:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8005888:	8998      	ldrh	r0, [r3, #12]
 800588a:	f7fe fa03 	bl	8003c94 <lwip_htons>
 800588e:	f010 0003 	ands.w	r0, r0, #3
 8005892:	bf18      	it	ne
 8005894:	2001      	movne	r0, #1

        if (tcplen > pcb->rcv_wnd) {
 8005896:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8005898:	4440      	add	r0, r8
 800589a:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 800589c:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 800589e:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 80058a0:	d242      	bcs.n	8005928 <tcp_receive+0x4a4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80058a2:	692b      	ldr	r3, [r5, #16]
 80058a4:	8998      	ldrh	r0, [r3, #12]
 80058a6:	f7fe f9f5 	bl	8003c94 <lwip_htons>
 80058aa:	07c2      	lsls	r2, r0, #31
 80058ac:	d510      	bpl.n	80058d0 <tcp_receive+0x44c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80058ae:	692b      	ldr	r3, [r5, #16]
 80058b0:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 80058b4:	4640      	mov	r0, r8
 80058b6:	f7fe f9ed 	bl	8003c94 <lwip_htons>
 80058ba:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 80058be:	f7fe f9e9 	bl	8003c94 <lwip_htons>
 80058c2:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 80058c6:	692b      	ldr	r3, [r5, #16]
 80058c8:	ea40 0808 	orr.w	r8, r0, r8
 80058cc:	f8a3 800c 	strh.w	r8, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80058d0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80058d2:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80058d4:	692b      	ldr	r3, [r5, #16]
 80058d6:	8998      	ldrh	r0, [r3, #12]
 80058d8:	f7fe f9dc 	bl	8003c94 <lwip_htons>
 80058dc:	0783      	lsls	r3, r0, #30
            inseg.len -= 1;
 80058de:	bf48      	it	mi
 80058e0:	892b      	ldrhmi	r3, [r5, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80058e2:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 80058e4:	bf44      	itt	mi
 80058e6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80058ea:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 80058ec:	8929      	ldrh	r1, [r5, #8]
 80058ee:	f7fe fd95 	bl	800441c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80058f2:	692b      	ldr	r3, [r5, #16]
 80058f4:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80058f8:	8998      	ldrh	r0, [r3, #12]
 80058fa:	f7fe f9cb 	bl	8003c94 <lwip_htons>
 80058fe:	f010 0003 	ands.w	r0, r0, #3
 8005902:	bf18      	it	ne
 8005904:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8005906:	6833      	ldr	r3, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 8005908:	4440      	add	r0, r8
 800590a:	b280      	uxth	r0, r0
 800590c:	8038      	strh	r0, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800590e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005910:	4418      	add	r0, r3
 8005912:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005914:	4413      	add	r3, r2
 8005916:	4298      	cmp	r0, r3
 8005918:	d006      	beq.n	8005928 <tcp_receive+0x4a4>
 800591a:	4b41      	ldr	r3, [pc, #260]	; (8005a20 <tcp_receive+0x59c>)
 800591c:	f240 527f 	movw	r2, #1407	; 0x57f
 8005920:	4945      	ldr	r1, [pc, #276]	; (8005a38 <tcp_receive+0x5b4>)
 8005922:	4841      	ldr	r0, [pc, #260]	; (8005a28 <tcp_receive+0x5a4>)
 8005924:	f004 f866 	bl	80099f4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8005928:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 80ae 	beq.w	8005a8c <tcp_receive+0x608>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8005930:	692b      	ldr	r3, [r5, #16]
 8005932:	8998      	ldrh	r0, [r3, #12]
 8005934:	f7fe f9ae 	bl	8003c94 <lwip_htons>
 8005938:	07c0      	lsls	r0, r0, #31
 800593a:	f100 80a4 	bmi.w	8005a86 <tcp_receive+0x602>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 800593e:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
 8005942:	6830      	ldr	r0, [r6, #0]
 8005944:	883b      	ldrh	r3, [r7, #0]
 8005946:	4403      	add	r3, r0
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8005948:	f1b8 0f00 	cmp.w	r8, #0
 800594c:	d039      	beq.n	80059c2 <tcp_receive+0x53e>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800594e:	f8d8 c010 	ldr.w	ip, [r8, #16]
 8005952:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8005956:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800595a:	4411      	add	r1, r2
 800595c:	1a59      	subs	r1, r3, r1
            while (next &&
 800595e:	2900      	cmp	r1, #0
 8005960:	f280 80c1 	bge.w	8005ae6 <tcp_receive+0x662>
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
 8005964:	1a9b      	subs	r3, r3, r2
            if (next &&
 8005966:	2b00      	cmp	r3, #0
 8005968:	dd2b      	ble.n	80059c2 <tcp_receive+0x53e>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800596a:	692b      	ldr	r3, [r5, #16]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800596c:	1a12      	subs	r2, r2, r0
 800596e:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8005970:	8998      	ldrh	r0, [r3, #12]
 8005972:	f7fe f98f 	bl	8003c94 <lwip_htons>
 8005976:	0783      	lsls	r3, r0, #30
                inseg.len -= 1;
 8005978:	bf48      	it	mi
 800597a:	892b      	ldrhmi	r3, [r5, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800597c:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 800597e:	bf44      	itt	mi
 8005980:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8005984:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8005986:	8929      	ldrh	r1, [r5, #8]
 8005988:	f7fe fd48 	bl	800441c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800598c:	692b      	ldr	r3, [r5, #16]
 800598e:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8005992:	8998      	ldrh	r0, [r3, #12]
 8005994:	f7fe f97e 	bl	8003c94 <lwip_htons>
 8005998:	f010 0003 	ands.w	r0, r0, #3
 800599c:	bf18      	it	ne
 800599e:	2001      	movne	r0, #1
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80059a0:	6833      	ldr	r3, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 80059a2:	4448      	add	r0, r9
 80059a4:	b280      	uxth	r0, r0
 80059a6:	8038      	strh	r0, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80059a8:	4418      	add	r0, r3
 80059aa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	4298      	cmp	r0, r3
 80059b2:	d006      	beq.n	80059c2 <tcp_receive+0x53e>
 80059b4:	4b1a      	ldr	r3, [pc, #104]	; (8005a20 <tcp_receive+0x59c>)
 80059b6:	f240 52af 	movw	r2, #1455	; 0x5af
 80059ba:	4920      	ldr	r1, [pc, #128]	; (8005a3c <tcp_receive+0x5b8>)
 80059bc:	481a      	ldr	r0, [pc, #104]	; (8005a28 <tcp_receive+0x5a4>)
 80059be:	f004 f819 	bl	80099f4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80059c2:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
 80059c6:	e061      	b.n	8005a8c <tcp_receive+0x608>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80059c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80059ca:	6829      	ldr	r1, [r5, #0]
 80059cc:	1a5b      	subs	r3, r3, r1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f6bf aee2 	bge.w	8005798 <tcp_receive+0x314>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80059d4:	4b1a      	ldr	r3, [pc, #104]	; (8005a40 <tcp_receive+0x5bc>)
      m = m - (pcb->sa >> 3);
 80059d6:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80059da:	6819      	ldr	r1, [r3, #0]
 80059dc:	1a89      	subs	r1, r1, r2
      m = m - (pcb->sa >> 3);
 80059de:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
 80059e2:	b289      	uxth	r1, r1
 80059e4:	b20b      	sxth	r3, r1
      if (m < 0) {
 80059e6:	2b00      	cmp	r3, #0
      m = m - (pcb->sv >> 2);
 80059e8:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sa += m;
 80059ec:	4408      	add	r0, r1
        m = -m;
 80059ee:	bfbc      	itt	lt
 80059f0:	4249      	neglt	r1, r1
 80059f2:	b20b      	sxthlt	r3, r1
      pcb->sv += m;
 80059f4:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
 80059f8:	4413      	add	r3, r2
      pcb->sa += m;
 80059fa:	b200      	sxth	r0, r0
      pcb->sv += m;
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8005a00:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 8005a04:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8005a08:	2300      	movs	r3, #0
      pcb->sa += m;
 8005a0a:	87a0      	strh	r0, [r4, #60]	; 0x3c
      pcb->rttest = 0;
 8005a0c:	6363      	str	r3, [r4, #52]	; 0x34
 8005a0e:	e6c3      	b.n	8005798 <tcp_receive+0x314>
 8005a10:	0800dd53 	.word	0x0800dd53
 8005a14:	0800dd7b 	.word	0x0800dd7b
 8005a18:	20000d62 	.word	0x20000d62
 8005a1c:	20000d2c 	.word	0x20000d2c
 8005a20:	0800dd08 	.word	0x0800dd08
 8005a24:	0800dd9b 	.word	0x0800dd9b
 8005a28:	0800d278 	.word	0x0800d278
 8005a2c:	0800ddab 	.word	0x0800ddab
 8005a30:	0800ddba 	.word	0x0800ddba
 8005a34:	0800ddca 	.word	0x0800ddca
 8005a38:	0800dddd 	.word	0x0800dddd
 8005a3c:	0800de14 	.word	0x0800de14
 8005a40:	200060ec 	.word	0x200060ec
          p->tot_len = new_tot_len;
 8005a44:	f8a8 1008 	strh.w	r1, [r8, #8]
          p->len = 0;
 8005a48:	f8a8 200a 	strh.w	r2, [r8, #10]
          off -= p->len;
 8005a4c:	eba9 0903 	sub.w	r9, r9, r3
          p = p->next;
 8005a50:	f8d8 8000 	ldr.w	r8, [r8]
 8005a54:	e6e8      	b.n	8005828 <tcp_receive+0x3a4>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8005a56:	f1cb 0100 	rsb	r1, fp, #0
 8005a5a:	b209      	sxth	r1, r1
 8005a5c:	f7fe fb92 	bl	8004184 <pbuf_header>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	f43f aef4 	beq.w	800584e <tcp_receive+0x3ca>
          LWIP_ASSERT("pbuf_header failed", 0);
 8005a66:	4b9b      	ldr	r3, [pc, #620]	; (8005cd4 <tcp_receive+0x850>)
 8005a68:	f240 5251 	movw	r2, #1361	; 0x551
 8005a6c:	e6eb      	b.n	8005846 <tcp_receive+0x3c2>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8005a6e:	1a9b      	subs	r3, r3, r2
 8005a70:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 8005a72:	bfbe      	ittt	lt
 8005a74:	7ea3      	ldrblt	r3, [r4, #26]
 8005a76:	f043 0302 	orrlt.w	r3, r3, #2
 8005a7a:	76a3      	strblt	r3, [r4, #26]
 8005a7c:	e6f0      	b.n	8005860 <tcp_receive+0x3dc>
              pcb->ooseq = pcb->ooseq->next;
 8005a7e:	6803      	ldr	r3, [r0, #0]
 8005a80:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8005a82:	f7fe ff77 	bl	8004974 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8005a86:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	d1f8      	bne.n	8005a7e <tcp_receive+0x5fa>
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8005a8c:	883a      	ldrh	r2, [r7, #0]
 8005a8e:	6833      	ldr	r3, [r6, #0]
 8005a90:	4413      	add	r3, r2
 8005a92:	6263      	str	r3, [r4, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8005a94:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d206      	bcs.n	8005aa8 <tcp_receive+0x624>
 8005a9a:	4b8e      	ldr	r3, [pc, #568]	; (8005cd4 <tcp_receive+0x850>)
 8005a9c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8005aa0:	498d      	ldr	r1, [pc, #564]	; (8005cd8 <tcp_receive+0x854>)
 8005aa2:	488e      	ldr	r0, [pc, #568]	; (8005cdc <tcp_receive+0x858>)
 8005aa4:	f003 ffa6 	bl	80099f4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8005aa8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005aaa:	883a      	ldrh	r2, [r7, #0]

        tcp_update_rcv_ann_wnd(pcb);
 8005aac:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 8005aae:	1a9b      	subs	r3, r3, r2
 8005ab0:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8005ab2:	f7fe fef5 	bl	80048a0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8005ab6:	686b      	ldr	r3, [r5, #4]
 8005ab8:	891a      	ldrh	r2, [r3, #8]
 8005aba:	b11a      	cbz	r2, 8005ac4 <tcp_receive+0x640>
          recv_data = inseg.p;
 8005abc:	4a88      	ldr	r2, [pc, #544]	; (8005ce0 <tcp_receive+0x85c>)
 8005abe:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	606b      	str	r3, [r5, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8005ac4:	692b      	ldr	r3, [r5, #16]
 8005ac6:	8998      	ldrh	r0, [r3, #12]
 8005ac8:	f7fe f8e4 	bl	8003c94 <lwip_htons>
 8005acc:	07c5      	lsls	r5, r0, #31
 8005ace:	d504      	bpl.n	8005ada <tcp_receive+0x656>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8005ad0:	4a84      	ldr	r2, [pc, #528]	; (8005ce4 <tcp_receive+0x860>)
 8005ad2:	7813      	ldrb	r3, [r2, #0]
 8005ad4:	f043 0320 	orr.w	r3, r3, #32
 8005ad8:	7013      	strb	r3, [r2, #0]

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8005ada:	4f7e      	ldr	r7, [pc, #504]	; (8005cd4 <tcp_receive+0x850>)
 8005adc:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8005cec <tcp_receive+0x868>
 8005ae0:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8005cdc <tcp_receive+0x858>
 8005ae4:	e07c      	b.n	8005be0 <tcp_receive+0x75c>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8005ae6:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 8005aea:	f7fe f8d3 	bl	8003c94 <lwip_htons>
 8005aee:	07c1      	lsls	r1, r0, #31
 8005af0:	d51b      	bpl.n	8005b2a <tcp_receive+0x6a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8005af2:	692b      	ldr	r3, [r5, #16]
 8005af4:	8998      	ldrh	r0, [r3, #12]
 8005af6:	f7fe f8cd 	bl	8003c94 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8005afa:	0782      	lsls	r2, r0, #30
 8005afc:	d415      	bmi.n	8005b2a <tcp_receive+0x6a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8005afe:	692b      	ldr	r3, [r5, #16]
 8005b00:	2001      	movs	r0, #1
 8005b02:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 8005b06:	f7fe f8c5 	bl	8003c94 <lwip_htons>
 8005b0a:	692b      	ldr	r3, [r5, #16]
 8005b0c:	ea49 0000 	orr.w	r0, r9, r0
 8005b10:	b280      	uxth	r0, r0
 8005b12:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8005b14:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8005b18:	f7fe f8bc 	bl	8003c94 <lwip_htons>
 8005b1c:	f010 0003 	ands.w	r0, r0, #3
 8005b20:	bf18      	it	ne
 8005b22:	2001      	movne	r0, #1
 8005b24:	4481      	add	r9, r0
 8005b26:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 8005b2a:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(prev);
 8005b2e:	4640      	mov	r0, r8
 8005b30:	f7fe ff20 	bl	8004974 <tcp_seg_free>
              next = next->next;
 8005b34:	46c8      	mov	r8, r9
 8005b36:	e704      	b.n	8005942 <tcp_receive+0x4be>
          seqno = pcb->ooseq->tcphdr->seqno;
 8005b38:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8005b3a:	8990      	ldrh	r0, [r2, #12]
 8005b3c:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8005b40:	f7fe f8a8 	bl	8003c94 <lwip_htons>
 8005b44:	f010 0003 	ands.w	r0, r0, #3
 8005b48:	bf18      	it	ne
 8005b4a:	2001      	movne	r0, #1
 8005b4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8005b4e:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8005b52:	449a      	add	sl, r3
 8005b54:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8005b56:	692b      	ldr	r3, [r5, #16]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8005b58:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8005b5a:	8998      	ldrh	r0, [r3, #12]
 8005b5c:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
 8005b60:	f7fe f898 	bl	8003c94 <lwip_htons>
 8005b64:	f010 0003 	ands.w	r0, r0, #3
 8005b68:	bf18      	it	ne
 8005b6a:	2001      	movne	r0, #1
 8005b6c:	4458      	add	r0, fp
 8005b6e:	4582      	cmp	sl, r0
 8005b70:	d206      	bcs.n	8005b80 <tcp_receive+0x6fc>
 8005b72:	463b      	mov	r3, r7
 8005b74:	f240 52de 	movw	r2, #1502	; 0x5de
 8005b78:	4641      	mov	r1, r8
 8005b7a:	4648      	mov	r0, r9
 8005b7c:	f003 ff3a 	bl	80099f4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8005b80:	692b      	ldr	r3, [r5, #16]
 8005b82:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8005b86:	8998      	ldrh	r0, [r3, #12]
 8005b88:	f7fe f884 	bl	8003c94 <lwip_htons>
 8005b8c:	f010 0003 	ands.w	r0, r0, #3
 8005b90:	bf18      	it	ne
 8005b92:	2001      	movne	r0, #1
 8005b94:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005b96:	4450      	add	r0, sl
 8005b98:	1a18      	subs	r0, r3, r0
 8005b9a:	8520      	strh	r0, [r4, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	f7fe fe7f 	bl	80048a0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8005ba2:	6869      	ldr	r1, [r5, #4]
 8005ba4:	890b      	ldrh	r3, [r1, #8]
 8005ba6:	b133      	cbz	r3, 8005bb6 <tcp_receive+0x732>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8005ba8:	4b4d      	ldr	r3, [pc, #308]	; (8005ce0 <tcp_receive+0x85c>)
 8005baa:	6818      	ldr	r0, [r3, #0]
 8005bac:	b338      	cbz	r0, 8005bfe <tcp_receive+0x77a>
              pbuf_cat(recv_data, cseg->p);
 8005bae:	f7fe fcc1 	bl	8004534 <pbuf_cat>
            } else {
              recv_data = cseg->p;
            }
            cseg->p = NULL;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	606b      	str	r3, [r5, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8005bb6:	692b      	ldr	r3, [r5, #16]
 8005bb8:	8998      	ldrh	r0, [r3, #12]
 8005bba:	f7fe f86b 	bl	8003c94 <lwip_htons>
 8005bbe:	07c0      	lsls	r0, r0, #31
 8005bc0:	d509      	bpl.n	8005bd6 <tcp_receive+0x752>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8005bc2:	4a48      	ldr	r2, [pc, #288]	; (8005ce4 <tcp_receive+0x860>)
 8005bc4:	7813      	ldrb	r3, [r2, #0]
 8005bc6:	f043 0320 	orr.w	r3, r3, #32
 8005bca:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8005bcc:	7d23      	ldrb	r3, [r4, #20]
 8005bce:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 8005bd0:	bf04      	itt	eq
 8005bd2:	2307      	moveq	r3, #7
 8005bd4:	7523      	strbeq	r3, [r4, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8005bd6:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 8005bd8:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 8005bda:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 8005bdc:	f7fe feca 	bl	8004974 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8005be0:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8005be2:	b125      	cbz	r5, 8005bee <tcp_receive+0x76a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8005be4:	692a      	ldr	r2, [r5, #16]
        while (pcb->ooseq != NULL &&
 8005be6:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8005be8:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 8005bea:	428b      	cmp	r3, r1
 8005bec:	d0a4      	beq.n	8005b38 <tcp_receive+0x6b4>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8005bee:	7ea3      	ldrb	r3, [r4, #26]
 8005bf0:	07d9      	lsls	r1, r3, #31
 8005bf2:	d506      	bpl.n	8005c02 <tcp_receive+0x77e>
 8005bf4:	f023 0301 	bic.w	r3, r3, #1
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
 8005bf8:	f043 0302 	orr.w	r3, r3, #2
 8005bfc:	e003      	b.n	8005c06 <tcp_receive+0x782>
              recv_data = cseg->p;
 8005bfe:	6019      	str	r1, [r3, #0]
 8005c00:	e7d7      	b.n	8005bb2 <tcp_receive+0x72e>
        tcp_ack(pcb);
 8005c02:	f043 0301 	orr.w	r3, r3, #1
 8005c06:	76a3      	strb	r3, [r4, #26]
    }
  }
}
 8005c08:	b003      	add	sp, #12
 8005c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tcp_send_empty_ack(pcb);
 8005c0e:	4620      	mov	r0, r4
 8005c10:	f000 ffdf 	bl	8006bd2 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 8005c14:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8005c16:	b925      	cbnz	r5, 8005c22 <tcp_receive+0x79e>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8005c18:	4833      	ldr	r0, [pc, #204]	; (8005ce8 <tcp_receive+0x864>)
 8005c1a:	f7fe fec1 	bl	80049a0 <tcp_seg_copy>
 8005c1e:	6720      	str	r0, [r4, #112]	; 0x70
 8005c20:	e7f2      	b.n	8005c08 <tcp_receive+0x784>
          prev = NULL;
 8005c22:	f04f 0800 	mov.w	r8, #0
            if (seqno == next->tcphdr->seqno) {
 8005c26:	6833      	ldr	r3, [r6, #0]
 8005c28:	f103 3cff 	add.w	ip, r3, #4294967295
 8005c2c:	f103 0e01 	add.w	lr, r3, #1
 8005c30:	6928      	ldr	r0, [r5, #16]
 8005c32:	6842      	ldr	r2, [r0, #4]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d117      	bne.n	8005c68 <tcp_receive+0x7e4>
              if (inseg.len > next->len) {
 8005c38:	482b      	ldr	r0, [pc, #172]	; (8005ce8 <tcp_receive+0x864>)
 8005c3a:	892b      	ldrh	r3, [r5, #8]
 8005c3c:	8902      	ldrh	r2, [r0, #8]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d9e2      	bls.n	8005c08 <tcp_receive+0x784>
                cseg = tcp_seg_copy(&inseg);
 8005c42:	f7fe fead 	bl	80049a0 <tcp_seg_copy>
                if (cseg != NULL) {
 8005c46:	2800      	cmp	r0, #0
 8005c48:	d0de      	beq.n	8005c08 <tcp_receive+0x784>
                  if (prev != NULL) {
 8005c4a:	f1b8 0f00 	cmp.w	r8, #0
 8005c4e:	d009      	beq.n	8005c64 <tcp_receive+0x7e0>
                    prev->next = cseg;
 8005c50:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8005c54:	4629      	mov	r1, r5
}
 8005c56:	b003      	add	sp, #12
 8005c58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    tcp_oos_insert_segment(cseg, next);
 8005c5c:	f7ff bbd6 	b.w	800540c <tcp_oos_insert_segment>
 8005c60:	460d      	mov	r5, r1
 8005c62:	e7e5      	b.n	8005c30 <tcp_receive+0x7ac>
                    pcb->ooseq = cseg;
 8005c64:	6720      	str	r0, [r4, #112]	; 0x70
 8005c66:	e7f5      	b.n	8005c54 <tcp_receive+0x7d0>
              if (prev == NULL) {
 8005c68:	f1b8 0f00 	cmp.w	r8, #0
 8005c6c:	d109      	bne.n	8005c82 <tcp_receive+0x7fe>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8005c6e:	1a99      	subs	r1, r3, r2
 8005c70:	2900      	cmp	r1, #0
 8005c72:	da3d      	bge.n	8005cf0 <tcp_receive+0x86c>
                  cseg = tcp_seg_copy(&inseg);
 8005c74:	481c      	ldr	r0, [pc, #112]	; (8005ce8 <tcp_receive+0x864>)
 8005c76:	f7fe fe93 	bl	80049a0 <tcp_seg_copy>
                  if (cseg != NULL) {
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	d0c4      	beq.n	8005c08 <tcp_receive+0x784>
                    pcb->ooseq = cseg;
 8005c7e:	6720      	str	r0, [r4, #112]	; 0x70
 8005c80:	e7e8      	b.n	8005c54 <tcp_receive+0x7d0>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8005c82:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8005c86:	6849      	ldr	r1, [r1, #4]
 8005c88:	ebac 0101 	sub.w	r1, ip, r1
 8005c8c:	2900      	cmp	r1, #0
 8005c8e:	db2f      	blt.n	8005cf0 <tcp_receive+0x86c>
 8005c90:	ebae 0102 	sub.w	r1, lr, r2
 8005c94:	2900      	cmp	r1, #0
 8005c96:	dc2b      	bgt.n	8005cf0 <tcp_receive+0x86c>
                  cseg = tcp_seg_copy(&inseg);
 8005c98:	4813      	ldr	r0, [pc, #76]	; (8005ce8 <tcp_receive+0x864>)
 8005c9a:	f7fe fe81 	bl	80049a0 <tcp_seg_copy>
                  if (cseg != NULL) {
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d0b1      	beq.n	8005c08 <tcp_receive+0x784>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8005ca4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005ca8:	6831      	ldr	r1, [r6, #0]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	1a5b      	subs	r3, r3, r1
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	dd07      	ble.n	8005cc8 <tcp_receive+0x844>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8005cb8:	1a89      	subs	r1, r1, r2
 8005cba:	b289      	uxth	r1, r1
 8005cbc:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 8005cc0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005cc4:	f7fe fbaa 	bl	800441c <pbuf_realloc>
                    prev->next = cseg;
 8005cc8:	f8c8 4000 	str.w	r4, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8005ccc:	4629      	mov	r1, r5
 8005cce:	4620      	mov	r0, r4
 8005cd0:	e7c1      	b.n	8005c56 <tcp_receive+0x7d2>
 8005cd2:	bf00      	nop
 8005cd4:	0800dd08 	.word	0x0800dd08
 8005cd8:	0800de4f 	.word	0x0800de4f
 8005cdc:	0800d278 	.word	0x0800d278
 8005ce0:	20000d44 	.word	0x20000d44
 8005ce4:	20000d48 	.word	0x20000d48
 8005ce8:	20000d2c 	.word	0x20000d2c
 8005cec:	0800de6e 	.word	0x0800de6e
              if (next->next == NULL &&
 8005cf0:	6829      	ldr	r1, [r5, #0]
 8005cf2:	46a8      	mov	r8, r5
 8005cf4:	2900      	cmp	r1, #0
 8005cf6:	d1b3      	bne.n	8005c60 <tcp_receive+0x7dc>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8005cf8:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	dd84      	ble.n	8005c08 <tcp_receive+0x784>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8005cfe:	8980      	ldrh	r0, [r0, #12]
 8005d00:	f7fd ffc8 	bl	8003c94 <lwip_htons>
 8005d04:	07c2      	lsls	r2, r0, #31
 8005d06:	f53f af7f 	bmi.w	8005c08 <tcp_receive+0x784>
                next->next = tcp_seg_copy(&inseg);
 8005d0a:	483a      	ldr	r0, [pc, #232]	; (8005df4 <tcp_receive+0x970>)
 8005d0c:	f7fe fe48 	bl	80049a0 <tcp_seg_copy>
 8005d10:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8005d12:	2800      	cmp	r0, #0
 8005d14:	f43f af78 	beq.w	8005c08 <tcp_receive+0x784>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8005d18:	692b      	ldr	r3, [r5, #16]
 8005d1a:	6831      	ldr	r1, [r6, #0]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	892b      	ldrh	r3, [r5, #8]
 8005d20:	4413      	add	r3, r2
 8005d22:	1a5b      	subs	r3, r3, r1
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	dd05      	ble.n	8005d34 <tcp_receive+0x8b0>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8005d28:	1a89      	subs	r1, r1, r2
 8005d2a:	b289      	uxth	r1, r1
 8005d2c:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8005d2e:	6868      	ldr	r0, [r5, #4]
 8005d30:	f7fe fb74 	bl	800441c <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8005d34:	6832      	ldr	r2, [r6, #0]
 8005d36:	883b      	ldrh	r3, [r7, #0]
 8005d38:	4413      	add	r3, r2
 8005d3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005d3c:	1a9b      	subs	r3, r3, r2
 8005d3e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005d40:	1a9b      	subs	r3, r3, r2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f77f af60 	ble.w	8005c08 <tcp_receive+0x784>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8005d48:	682b      	ldr	r3, [r5, #0]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	8998      	ldrh	r0, [r3, #12]
 8005d4e:	f7fd ffa1 	bl	8003c94 <lwip_htons>
 8005d52:	07c3      	lsls	r3, r0, #31
 8005d54:	d512      	bpl.n	8005d7c <tcp_receive+0x8f8>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8005d56:	682b      	ldr	r3, [r5, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8005d5e:	4640      	mov	r0, r8
 8005d60:	f7fd ff98 	bl	8003c94 <lwip_htons>
 8005d64:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8005d68:	f7fd ff94 	bl	8003c94 <lwip_htons>
 8005d6c:	682b      	ldr	r3, [r5, #0]
 8005d6e:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	ea40 0808 	orr.w	r8, r0, r8
 8005d78:	f8a3 800c 	strh.w	r8, [r3, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8005d7c:	6832      	ldr	r2, [r6, #0]
 8005d7e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8005d80:	682b      	ldr	r3, [r5, #0]
 8005d82:	1a89      	subs	r1, r1, r2
 8005d84:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 8005d86:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8005d88:	4411      	add	r1, r2
 8005d8a:	b289      	uxth	r1, r1
 8005d8c:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8005d8e:	f7fe fb45 	bl	800441c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8005d92:	682b      	ldr	r3, [r5, #0]
 8005d94:	891d      	ldrh	r5, [r3, #8]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	8998      	ldrh	r0, [r3, #12]
 8005d9a:	f7fd ff7b 	bl	8003c94 <lwip_htons>
 8005d9e:	f010 0003 	ands.w	r0, r0, #3
 8005da2:	bf18      	it	ne
 8005da4:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8005da6:	6833      	ldr	r3, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 8005da8:	4428      	add	r0, r5
 8005daa:	b280      	uxth	r0, r0
 8005dac:	8038      	strh	r0, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8005dae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005db0:	4418      	add	r0, r3
 8005db2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005db4:	4413      	add	r3, r2
 8005db6:	4298      	cmp	r0, r3
 8005db8:	f43f af26 	beq.w	8005c08 <tcp_receive+0x784>
 8005dbc:	f240 627b 	movw	r2, #1659	; 0x67b
 8005dc0:	4b0d      	ldr	r3, [pc, #52]	; (8005df8 <tcp_receive+0x974>)
 8005dc2:	490e      	ldr	r1, [pc, #56]	; (8005dfc <tcp_receive+0x978>)
 8005dc4:	480e      	ldr	r0, [pc, #56]	; (8005e00 <tcp_receive+0x97c>)
}
 8005dc6:	b003      	add	sp, #12
 8005dc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8005dcc:	f003 be12 	b.w	80099f4 <iprintf>
      tcp_send_empty_ack(pcb);
 8005dd0:	4620      	mov	r0, r4
}
 8005dd2:	b003      	add	sp, #12
 8005dd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tcp_send_empty_ack(pcb);
 8005dd8:	f000 befb 	b.w	8006bd2 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8005ddc:	1a99      	subs	r1, r3, r2
 8005dde:	2900      	cmp	r1, #0
 8005de0:	db06      	blt.n	8005df0 <tcp_receive+0x96c>
 8005de2:	3301      	adds	r3, #1
 8005de4:	1a9b      	subs	r3, r3, r2
 8005de6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005de8:	1a9b      	subs	r3, r3, r2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f77f af0c 	ble.w	8005c08 <tcp_receive+0x784>
      tcp_ack_now(pcb);
 8005df0:	7ea3      	ldrb	r3, [r4, #26]
 8005df2:	e701      	b.n	8005bf8 <tcp_receive+0x774>
 8005df4:	20000d2c 	.word	0x20000d2c
 8005df8:	0800dd08 	.word	0x0800dd08
 8005dfc:	0800dddd 	.word	0x0800dddd
 8005e00:	0800d278 	.word	0x0800d278

08005e04 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8005e04:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <tcp_getoptbyte+0x30>)
 8005e06:	490c      	ldr	r1, [pc, #48]	; (8005e38 <tcp_getoptbyte+0x34>)
 8005e08:	6818      	ldr	r0, [r3, #0]
 8005e0a:	880b      	ldrh	r3, [r1, #0]
{
 8005e0c:	b530      	push	{r4, r5, lr}
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	b292      	uxth	r2, r2
 8005e12:	460d      	mov	r5, r1
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8005e14:	b118      	cbz	r0, 8005e1e <tcp_getoptbyte+0x1a>
 8005e16:	4c09      	ldr	r4, [pc, #36]	; (8005e3c <tcp_getoptbyte+0x38>)
 8005e18:	8824      	ldrh	r4, [r4, #0]
 8005e1a:	429c      	cmp	r4, r3
 8005e1c:	d905      	bls.n	8005e2a <tcp_getoptbyte+0x26>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8005e1e:	4908      	ldr	r1, [pc, #32]	; (8005e40 <tcp_getoptbyte+0x3c>)
    return opts[tcp_optidx++];
 8005e20:	802a      	strh	r2, [r5, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8005e22:	6809      	ldr	r1, [r1, #0]
    return opts[tcp_optidx++];
 8005e24:	440b      	add	r3, r1
 8005e26:	7d18      	ldrb	r0, [r3, #20]
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
    return tcphdr_opt2[idx];
  }
}
 8005e28:	bd30      	pop	{r4, r5, pc}
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8005e2a:	1b1b      	subs	r3, r3, r4
    return tcphdr_opt2[idx];
 8005e2c:	b2db      	uxtb	r3, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8005e2e:	800a      	strh	r2, [r1, #0]
    return tcphdr_opt2[idx];
 8005e30:	5cc0      	ldrb	r0, [r0, r3]
 8005e32:	e7f9      	b.n	8005e28 <tcp_getoptbyte+0x24>
 8005e34:	20000d5c 	.word	0x20000d5c
 8005e38:	20000d50 	.word	0x20000d50
 8005e3c:	20000d58 	.word	0x20000d58
 8005e40:	20000d54 	.word	0x20000d54

08005e44 <tcp_parseopt.isra.1>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 8005e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8005e46:	4e1a      	ldr	r6, [pc, #104]	; (8005eb0 <tcp_parseopt.isra.1+0x6c>)
tcp_parseopt(struct tcp_pcb *pcb)
 8005e48:	4607      	mov	r7, r0
  if (tcphdr_optlen != 0) {
 8005e4a:	8833      	ldrh	r3, [r6, #0]
 8005e4c:	b133      	cbz	r3, 8005e5c <tcp_parseopt.isra.1+0x18>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8005e4e:	2300      	movs	r3, #0
 8005e50:	4d18      	ldr	r5, [pc, #96]	; (8005eb4 <tcp_parseopt.isra.1+0x70>)
 8005e52:	802b      	strh	r3, [r5, #0]
 8005e54:	8834      	ldrh	r4, [r6, #0]
 8005e56:	882b      	ldrh	r3, [r5, #0]
 8005e58:	42a3      	cmp	r3, r4
 8005e5a:	d300      	bcc.n	8005e5e <tcp_parseopt.isra.1+0x1a>
           can skip past them. */
        tcp_optidx += data - 2;
      }
    }
  }
}
 8005e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8_t opt = tcp_getoptbyte();
 8005e5e:	f7ff ffd1 	bl	8005e04 <tcp_getoptbyte>
      switch (opt) {
 8005e62:	2801      	cmp	r0, #1
 8005e64:	d0f6      	beq.n	8005e54 <tcp_parseopt.isra.1+0x10>
 8005e66:	d3f9      	bcc.n	8005e5c <tcp_parseopt.isra.1+0x18>
 8005e68:	2802      	cmp	r0, #2
 8005e6a:	d117      	bne.n	8005e9c <tcp_parseopt.isra.1+0x58>
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8005e6c:	f7ff ffca 	bl	8005e04 <tcp_getoptbyte>
 8005e70:	2804      	cmp	r0, #4
 8005e72:	d1f3      	bne.n	8005e5c <tcp_parseopt.isra.1+0x18>
 8005e74:	882b      	ldrh	r3, [r5, #0]
 8005e76:	3301      	adds	r3, #1
 8005e78:	42a3      	cmp	r3, r4
 8005e7a:	daef      	bge.n	8005e5c <tcp_parseopt.isra.1+0x18>
        mss = (tcp_getoptbyte() << 8);
 8005e7c:	f7ff ffc2 	bl	8005e04 <tcp_getoptbyte>
 8005e80:	0200      	lsls	r0, r0, #8
 8005e82:	b284      	uxth	r4, r0
        mss |= tcp_getoptbyte();
 8005e84:	f7ff ffbe 	bl	8005e04 <tcp_getoptbyte>
 8005e88:	4320      	orrs	r0, r4
 8005e8a:	b280      	uxth	r0, r0
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8005e8c:	1e43      	subs	r3, r0, #1
 8005e8e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8005e92:	bf28      	it	cs
 8005e94:	f44f 7006 	movcs.w	r0, #536	; 0x218
 8005e98:	8038      	strh	r0, [r7, #0]
 8005e9a:	e7db      	b.n	8005e54 <tcp_parseopt.isra.1+0x10>
        data = tcp_getoptbyte();
 8005e9c:	f7ff ffb2 	bl	8005e04 <tcp_getoptbyte>
        if (data < 2) {
 8005ea0:	2801      	cmp	r0, #1
 8005ea2:	d9db      	bls.n	8005e5c <tcp_parseopt.isra.1+0x18>
        tcp_optidx += data - 2;
 8005ea4:	882b      	ldrh	r3, [r5, #0]
 8005ea6:	3b02      	subs	r3, #2
 8005ea8:	4418      	add	r0, r3
 8005eaa:	8028      	strh	r0, [r5, #0]
 8005eac:	e7d2      	b.n	8005e54 <tcp_parseopt.isra.1+0x10>
 8005eae:	bf00      	nop
 8005eb0:	20000d60 	.word	0x20000d60
 8005eb4:	20000d50 	.word	0x20000d50

08005eb8 <tcp_input_delayed_close>:
{
 8005eb8:	b510      	push	{r4, lr}
  if (recv_flags & TF_CLOSED) {
 8005eba:	4b0d      	ldr	r3, [pc, #52]	; (8005ef0 <tcp_input_delayed_close+0x38>)
{
 8005ebc:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 8005ebe:	7818      	ldrb	r0, [r3, #0]
 8005ec0:	f010 0010 	ands.w	r0, r0, #16
 8005ec4:	d012      	beq.n	8005eec <tcp_input_delayed_close+0x34>
    if (!(pcb->flags & TF_RXCLOSED)) {
 8005ec6:	7ea3      	ldrb	r3, [r4, #26]
 8005ec8:	06db      	lsls	r3, r3, #27
 8005eca:	d406      	bmi.n	8005eda <tcp_input_delayed_close+0x22>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8005ecc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005ed0:	b11b      	cbz	r3, 8005eda <tcp_input_delayed_close+0x22>
 8005ed2:	f06f 010e 	mvn.w	r1, #14
 8005ed6:	6920      	ldr	r0, [r4, #16]
 8005ed8:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8005eda:	4621      	mov	r1, r4
 8005edc:	4805      	ldr	r0, [pc, #20]	; (8005ef4 <tcp_input_delayed_close+0x3c>)
 8005ede:	f7fe ff7b 	bl	8004dd8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8005ee2:	2002      	movs	r0, #2
 8005ee4:	4621      	mov	r1, r4
 8005ee6:	f7fd ffe9 	bl	8003ebc <memp_free>
 8005eea:	2001      	movs	r0, #1
}
 8005eec:	bd10      	pop	{r4, pc}
 8005eee:	bf00      	nop
 8005ef0:	20000d48 	.word	0x20000d48
 8005ef4:	200060e8 	.word	0x200060e8

08005ef8 <tcp_input>:
{
 8005ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tcphdr = (struct tcp_hdr *)p->payload;
 8005efc:	6843      	ldr	r3, [r0, #4]
 8005efe:	4ea3      	ldr	r6, [pc, #652]	; (800618c <tcp_input+0x294>)
{
 8005f00:	b089      	sub	sp, #36	; 0x24
  tcphdr = (struct tcp_hdr *)p->payload;
 8005f02:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 8005f04:	8943      	ldrh	r3, [r0, #10]
{
 8005f06:	4605      	mov	r5, r0
  if (p->len < TCP_HLEN) {
 8005f08:	2b13      	cmp	r3, #19
 8005f0a:	f240 81b7 	bls.w	800627c <tcp_input+0x384>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8005f0e:	4fa0      	ldr	r7, [pc, #640]	; (8006190 <tcp_input+0x298>)
 8005f10:	6839      	ldr	r1, [r7, #0]
 8005f12:	6978      	ldr	r0, [r7, #20]
 8005f14:	f002 f9f1 	bl	80082fa <ip4_addr_isbroadcast_u32>
 8005f18:	46b8      	mov	r8, r7
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	f040 81ad 	bne.w	800627c <tcp_input+0x384>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8005f28:	2be0      	cmp	r3, #224	; 0xe0
 8005f2a:	f000 81a7 	beq.w	800627c <tcp_input+0x384>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8005f2e:	6833      	ldr	r3, [r6, #0]
 8005f30:	8998      	ldrh	r0, [r3, #12]
 8005f32:	f7fd feaf 	bl	8003c94 <lwip_htons>
 8005f36:	0a81      	lsrs	r1, r0, #10
 8005f38:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8005f3c:	2913      	cmp	r1, #19
 8005f3e:	f240 819d 	bls.w	800627c <tcp_input+0x384>
 8005f42:	892b      	ldrh	r3, [r5, #8]
 8005f44:	b289      	uxth	r1, r1
 8005f46:	428b      	cmp	r3, r1
 8005f48:	f0c0 8198 	bcc.w	800627c <tcp_input+0x384>
  if (p->len >= hdrlen_bytes) {
 8005f4c:	8968      	ldrh	r0, [r5, #10]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8005f4e:	4a91      	ldr	r2, [pc, #580]	; (8006194 <tcp_input+0x29c>)
 8005f50:	f1a1 0314 	sub.w	r3, r1, #20
  tcphdr_opt2 = NULL;
 8005f54:	4f90      	ldr	r7, [pc, #576]	; (8006198 <tcp_input+0x2a0>)
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8005f56:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 8005f58:	4288      	cmp	r0, r1
  tcphdr_opt2 = NULL;
 8005f5a:	603c      	str	r4, [r7, #0]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8005f5c:	8013      	strh	r3, [r2, #0]
 8005f5e:	4614      	mov	r4, r2
 8005f60:	f8df 9284 	ldr.w	r9, [pc, #644]	; 80061e8 <tcp_input+0x2f0>
  if (p->len >= hdrlen_bytes) {
 8005f64:	d34a      	bcc.n	8005ffc <tcp_input+0x104>
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8005f66:	4249      	negs	r1, r1
 8005f68:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 8005f6a:	f8a9 3000 	strh.w	r3, [r9]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8005f6e:	f7fe f909 	bl	8004184 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8005f72:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8005f74:	f8df a274 	ldr.w	sl, [pc, #628]	; 80061ec <tcp_input+0x2f4>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8005f78:	8820      	ldrh	r0, [r4, #0]
 8005f7a:	f7fd fe8b 	bl	8003c94 <lwip_htons>
 8005f7e:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8005f80:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8005f82:	4f86      	ldr	r7, [pc, #536]	; (800619c <tcp_input+0x2a4>)
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8005f84:	8860      	ldrh	r0, [r4, #2]
 8005f86:	f7fd fe85 	bl	8003c94 <lwip_htons>
 8005f8a:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8005f8c:	6834      	ldr	r4, [r6, #0]
  prev = NULL;
 8005f8e:	f04f 0900 	mov.w	r9, #0
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8005f92:	6860      	ldr	r0, [r4, #4]
 8005f94:	f7fd fe81 	bl	8003c9a <lwip_htonl>
 8005f98:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8005f9a:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8005f9c:	f8ca 0000 	str.w	r0, [sl]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8005fa0:	68a0      	ldr	r0, [r4, #8]
 8005fa2:	f7fd fe7a 	bl	8003c9a <lwip_htonl>
 8005fa6:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8005fa8:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8005faa:	6038      	str	r0, [r7, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8005fac:	89e0      	ldrh	r0, [r4, #14]
 8005fae:	f7fd fe71 	bl	8003c94 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 8005fb2:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8005fb4:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 8005fb6:	8998      	ldrh	r0, [r3, #12]
 8005fb8:	f7fd fe6c 	bl	8003c94 <lwip_htons>
 8005fbc:	b2c0      	uxtb	r0, r0
 8005fbe:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8005fc2:	f010 0003 	ands.w	r0, r0, #3
 8005fc6:	bf18      	it	ne
 8005fc8:	2001      	movne	r0, #1
 8005fca:	8929      	ldrh	r1, [r5, #8]
 8005fcc:	f8cd a00c 	str.w	sl, [sp, #12]
 8005fd0:	4408      	add	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005fd2:	4973      	ldr	r1, [pc, #460]	; (80061a0 <tcp_input+0x2a8>)
 8005fd4:	46ba      	mov	sl, r7
 8005fd6:	460f      	mov	r7, r1
  flags = TCPH_FLAGS(tcphdr);
 8005fd8:	4a72      	ldr	r2, [pc, #456]	; (80061a4 <tcp_input+0x2ac>)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005fda:	680c      	ldr	r4, [r1, #0]
  flags = TCPH_FLAGS(tcphdr);
 8005fdc:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8005fde:	4b72      	ldr	r3, [pc, #456]	; (80061a8 <tcp_input+0x2b0>)
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8005fe0:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 80061b0 <tcp_input+0x2b8>
 8005fe4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8005fe8:	8018      	strh	r0, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005fea:	2c00      	cmp	r4, #0
 8005fec:	d140      	bne.n	8006070 <tcp_input+0x178>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005fee:	4b6f      	ldr	r3, [pc, #444]	; (80061ac <tcp_input+0x2b4>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005ff0:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80061b0 <tcp_input+0x2b8>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005ff4:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005ff6:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 80061b8 <tcp_input+0x2c0>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005ffa:	e146      	b.n	800628a <tcp_input+0x392>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8005ffc:	682b      	ldr	r3, [r5, #0]
 8005ffe:	b92b      	cbnz	r3, 800600c <tcp_input+0x114>
 8006000:	4b6b      	ldr	r3, [pc, #428]	; (80061b0 <tcp_input+0x2b8>)
 8006002:	22b2      	movs	r2, #178	; 0xb2
 8006004:	496b      	ldr	r1, [pc, #428]	; (80061b4 <tcp_input+0x2bc>)
 8006006:	486c      	ldr	r0, [pc, #432]	; (80061b8 <tcp_input+0x2c0>)
 8006008:	f003 fcf4 	bl	80099f4 <iprintf>
    pbuf_header(p, -TCP_HLEN);
 800600c:	f06f 0113 	mvn.w	r1, #19
 8006010:	4628      	mov	r0, r5
 8006012:	f7fe f8b7 	bl	8004184 <pbuf_header>
    tcphdr_opt1len = p->len;
 8006016:	8969      	ldrh	r1, [r5, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8006018:	8824      	ldrh	r4, [r4, #0]
    tcphdr_opt1len = p->len;
 800601a:	f8a9 1000 	strh.w	r1, [r9]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800601e:	1a64      	subs	r4, r4, r1
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8006020:	4249      	negs	r1, r1
 8006022:	b209      	sxth	r1, r1
 8006024:	4628      	mov	r0, r5
 8006026:	f7fe f8ad 	bl	8004184 <pbuf_header>
    if (opt2len > p->next->len) {
 800602a:	6828      	ldr	r0, [r5, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800602c:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 800602e:	8943      	ldrh	r3, [r0, #10]
 8006030:	42a3      	cmp	r3, r4
 8006032:	f0c0 8123 	bcc.w	800627c <tcp_input+0x384>
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8006036:	6843      	ldr	r3, [r0, #4]
    pbuf_header(p->next, -(s16_t)opt2len);
 8006038:	4261      	negs	r1, r4
 800603a:	b209      	sxth	r1, r1
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800603c:	603b      	str	r3, [r7, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 800603e:	f7fe f8a1 	bl	8004184 <pbuf_header>
    p->tot_len -= opt2len;
 8006042:	892b      	ldrh	r3, [r5, #8]
 8006044:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8006046:	896b      	ldrh	r3, [r5, #10]
    p->tot_len -= opt2len;
 8006048:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800604a:	b12b      	cbz	r3, 8006058 <tcp_input+0x160>
 800604c:	4b58      	ldr	r3, [pc, #352]	; (80061b0 <tcp_input+0x2b8>)
 800604e:	22cf      	movs	r2, #207	; 0xcf
 8006050:	495a      	ldr	r1, [pc, #360]	; (80061bc <tcp_input+0x2c4>)
 8006052:	4859      	ldr	r0, [pc, #356]	; (80061b8 <tcp_input+0x2c0>)
 8006054:	f003 fcce 	bl	80099f4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8006058:	682b      	ldr	r3, [r5, #0]
 800605a:	892a      	ldrh	r2, [r5, #8]
 800605c:	891b      	ldrh	r3, [r3, #8]
 800605e:	429a      	cmp	r2, r3
 8006060:	d087      	beq.n	8005f72 <tcp_input+0x7a>
 8006062:	4b53      	ldr	r3, [pc, #332]	; (80061b0 <tcp_input+0x2b8>)
 8006064:	22d0      	movs	r2, #208	; 0xd0
 8006066:	4956      	ldr	r1, [pc, #344]	; (80061c0 <tcp_input+0x2c8>)
 8006068:	4853      	ldr	r0, [pc, #332]	; (80061b8 <tcp_input+0x2c0>)
 800606a:	f003 fcc3 	bl	80099f4 <iprintf>
 800606e:	e780      	b.n	8005f72 <tcp_input+0x7a>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006070:	7d23      	ldrb	r3, [r4, #20]
 8006072:	b92b      	cbnz	r3, 8006080 <tcp_input+0x188>
 8006074:	465b      	mov	r3, fp
 8006076:	22e2      	movs	r2, #226	; 0xe2
 8006078:	4952      	ldr	r1, [pc, #328]	; (80061c4 <tcp_input+0x2cc>)
 800607a:	484f      	ldr	r0, [pc, #316]	; (80061b8 <tcp_input+0x2c0>)
 800607c:	f003 fcba 	bl	80099f4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8006080:	7d23      	ldrb	r3, [r4, #20]
 8006082:	2b0a      	cmp	r3, #10
 8006084:	d105      	bne.n	8006092 <tcp_input+0x19a>
 8006086:	465b      	mov	r3, fp
 8006088:	22e3      	movs	r2, #227	; 0xe3
 800608a:	494f      	ldr	r1, [pc, #316]	; (80061c8 <tcp_input+0x2d0>)
 800608c:	484a      	ldr	r0, [pc, #296]	; (80061b8 <tcp_input+0x2c0>)
 800608e:	f003 fcb1 	bl	80099f4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8006092:	7d23      	ldrb	r3, [r4, #20]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d105      	bne.n	80060a4 <tcp_input+0x1ac>
 8006098:	465b      	mov	r3, fp
 800609a:	22e4      	movs	r2, #228	; 0xe4
 800609c:	494b      	ldr	r1, [pc, #300]	; (80061cc <tcp_input+0x2d4>)
 800609e:	4846      	ldr	r0, [pc, #280]	; (80061b8 <tcp_input+0x2c0>)
 80060a0:	f003 fca8 	bl	80099f4 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 80060a4:	6832      	ldr	r2, [r6, #0]
 80060a6:	8b21      	ldrh	r1, [r4, #24]
 80060a8:	8813      	ldrh	r3, [r2, #0]
 80060aa:	4299      	cmp	r1, r3
 80060ac:	68e3      	ldr	r3, [r4, #12]
 80060ae:	d16a      	bne.n	8006186 <tcp_input+0x28e>
 80060b0:	8ae1      	ldrh	r1, [r4, #22]
 80060b2:	8852      	ldrh	r2, [r2, #2]
 80060b4:	4291      	cmp	r1, r2
 80060b6:	d166      	bne.n	8006186 <tcp_input+0x28e>
        pcb->local_port == tcphdr->dest &&
 80060b8:	6861      	ldr	r1, [r4, #4]
 80060ba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80060be:	4291      	cmp	r1, r2
 80060c0:	d161      	bne.n	8006186 <tcp_input+0x28e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80060c2:	6821      	ldr	r1, [r4, #0]
 80060c4:	f8d8 2014 	ldr.w	r2, [r8, #20]
 80060c8:	4291      	cmp	r1, r2
 80060ca:	d15c      	bne.n	8006186 <tcp_input+0x28e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80060cc:	429c      	cmp	r4, r3
 80060ce:	f040 8416 	bne.w	80068fe <tcp_input+0xa06>
 80060d2:	4b37      	ldr	r3, [pc, #220]	; (80061b0 <tcp_input+0x2b8>)
 80060d4:	22ec      	movs	r2, #236	; 0xec
 80060d6:	493e      	ldr	r1, [pc, #248]	; (80061d0 <tcp_input+0x2d8>)
 80060d8:	4837      	ldr	r0, [pc, #220]	; (80061b8 <tcp_input+0x2c0>)
 80060da:	f003 fc8b 	bl	80099f4 <iprintf>
      if (prev != NULL) {
 80060de:	f1b9 0f00 	cmp.w	r9, #0
 80060e2:	d005      	beq.n	80060f0 <tcp_input+0x1f8>
        prev->next = pcb->next;
 80060e4:	68e3      	ldr	r3, [r4, #12]
 80060e6:	f8c9 300c 	str.w	r3, [r9, #12]
        pcb->next = tcp_active_pcbs;
 80060ea:	683b      	ldr	r3, [r7, #0]
        tcp_active_pcbs = pcb;
 80060ec:	603c      	str	r4, [r7, #0]
        pcb->next = tcp_active_pcbs;
 80060ee:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80060f0:	68e3      	ldr	r3, [r4, #12]
 80060f2:	429c      	cmp	r4, r3
 80060f4:	d105      	bne.n	8006102 <tcp_input+0x20a>
 80060f6:	4b2e      	ldr	r3, [pc, #184]	; (80061b0 <tcp_input+0x2b8>)
 80060f8:	22f4      	movs	r2, #244	; 0xf4
 80060fa:	4936      	ldr	r1, [pc, #216]	; (80061d4 <tcp_input+0x2dc>)
 80060fc:	482e      	ldr	r0, [pc, #184]	; (80061b8 <tcp_input+0x2c0>)
 80060fe:	f003 fc79 	bl	80099f4 <iprintf>
    inseg.next = NULL;
 8006102:	2200      	movs	r2, #0
 8006104:	4b34      	ldr	r3, [pc, #208]	; (80061d8 <tcp_input+0x2e0>)
    inseg.len = p->tot_len;
 8006106:	8929      	ldrh	r1, [r5, #8]
    recv_acked = 0;
 8006108:	4834      	ldr	r0, [pc, #208]	; (80061dc <tcp_input+0x2e4>)
    inseg.len = p->tot_len;
 800610a:	8119      	strh	r1, [r3, #8]
    inseg.tcphdr = tcphdr;
 800610c:	6831      	ldr	r1, [r6, #0]
    recv_flags = 0;
 800610e:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 80061f0 <tcp_input+0x2f8>
    inseg.tcphdr = tcphdr;
 8006112:	6119      	str	r1, [r3, #16]
    recv_data = NULL;
 8006114:	4932      	ldr	r1, [pc, #200]	; (80061e0 <tcp_input+0x2e8>)
    inseg.next = NULL;
 8006116:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8006118:	600a      	str	r2, [r1, #0]
    recv_flags = 0;
 800611a:	f888 2000 	strb.w	r2, [r8]
    recv_acked = 0;
 800611e:	8002      	strh	r2, [r0, #0]
    if (flags & TCP_PSH) {
 8006120:	9a04      	ldr	r2, [sp, #16]
    inseg.p = p;
 8006122:	605d      	str	r5, [r3, #4]
    if (flags & TCP_PSH) {
 8006124:	7812      	ldrb	r2, [r2, #0]
 8006126:	4681      	mov	r9, r0
 8006128:	f012 0f08 	tst.w	r2, #8
 800612c:	468b      	mov	fp, r1
 800612e:	9306      	str	r3, [sp, #24]
 8006130:	d003      	beq.n	800613a <tcp_input+0x242>
      p->flags |= PBUF_FLAG_PUSH;
 8006132:	7b6b      	ldrb	r3, [r5, #13]
 8006134:	f043 0301 	orr.w	r3, r3, #1
 8006138:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 800613a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 813e 	beq.w	80063be <tcp_input+0x4c6>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006142:	4620      	mov	r0, r4
 8006144:	f7fe ff5a 	bl	8004ffc <tcp_process_refused_data>
 8006148:	300d      	adds	r0, #13
 800614a:	d008      	beq.n	800615e <tcp_input+0x266>
 800614c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 8135 	beq.w	80063be <tcp_input+0x4c6>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006154:	9b05      	ldr	r3, [sp, #20]
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 8130 	beq.w	80063be <tcp_input+0x4c6>
        if (pcb->rcv_ann_wnd == 0) {
 800615e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006160:	b913      	cbnz	r3, 8006168 <tcp_input+0x270>
          tcp_send_empty_ack(pcb);
 8006162:	4620      	mov	r0, r4
 8006164:	f000 fd35 	bl	8006bd2 <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 8006168:	2400      	movs	r4, #0
 800616a:	4b1e      	ldr	r3, [pc, #120]	; (80061e4 <tcp_input+0x2ec>)
    recv_data = NULL;
 800616c:	f8cb 4000 	str.w	r4, [fp]
    tcp_input_pcb = NULL;
 8006170:	601c      	str	r4, [r3, #0]
    if (inseg.p != NULL)
 8006172:	9b06      	ldr	r3, [sp, #24]
 8006174:	6858      	ldr	r0, [r3, #4]
 8006176:	b118      	cbz	r0, 8006180 <tcp_input+0x288>
      pbuf_free(inseg.p);
 8006178:	f7fe f80a 	bl	8004190 <pbuf_free>
      inseg.p = NULL;
 800617c:	9b06      	ldr	r3, [sp, #24]
 800617e:	605c      	str	r4, [r3, #4]
}
 8006180:	b009      	add	sp, #36	; 0x24
 8006182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006186:	46a1      	mov	r9, r4
 8006188:	461c      	mov	r4, r3
 800618a:	e72e      	b.n	8005fea <tcp_input+0xf2>
 800618c:	20000d54 	.word	0x20000d54
 8006190:	200060c0 	.word	0x200060c0
 8006194:	20000d60 	.word	0x20000d60
 8006198:	20000d5c 	.word	0x20000d5c
 800619c:	20000d24 	.word	0x20000d24
 80061a0:	200060e8 	.word	0x200060e8
 80061a4:	20000d28 	.word	0x20000d28
 80061a8:	20000d62 	.word	0x20000d62
 80061ac:	200060f8 	.word	0x200060f8
 80061b0:	0800dd08 	.word	0x0800dd08
 80061b4:	0800db52 	.word	0x0800db52
 80061b8:	0800d278 	.word	0x0800d278
 80061bc:	0800db62 	.word	0x0800db62
 80061c0:	0800db6e 	.word	0x0800db6e
 80061c4:	0800db8d 	.word	0x0800db8d
 80061c8:	0800dbb4 	.word	0x0800dbb4
 80061cc:	0800dbde 	.word	0x0800dbde
 80061d0:	0800dc05 	.word	0x0800dc05
 80061d4:	0800dc30 	.word	0x0800dc30
 80061d8:	20000d2c 	.word	0x20000d2c
 80061dc:	20000d40 	.word	0x20000d40
 80061e0:	20000d44 	.word	0x20000d44
 80061e4:	200060fc 	.word	0x200060fc
 80061e8:	20000d58 	.word	0x20000d58
 80061ec:	20000d4c 	.word	0x20000d4c
 80061f0:	20000d48 	.word	0x20000d48
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80061f4:	7d23      	ldrb	r3, [r4, #20]
 80061f6:	2b0a      	cmp	r3, #10
 80061f8:	d005      	beq.n	8006206 <tcp_input+0x30e>
 80061fa:	464b      	mov	r3, r9
 80061fc:	22fe      	movs	r2, #254	; 0xfe
 80061fe:	49a6      	ldr	r1, [pc, #664]	; (8006498 <tcp_input+0x5a0>)
 8006200:	4658      	mov	r0, fp
 8006202:	f003 fbf7 	bl	80099f4 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8006206:	6833      	ldr	r3, [r6, #0]
 8006208:	8b22      	ldrh	r2, [r4, #24]
 800620a:	8818      	ldrh	r0, [r3, #0]
 800620c:	4290      	cmp	r0, r2
 800620e:	d13b      	bne.n	8006288 <tcp_input+0x390>
          pcb->local_port == tcphdr->dest &&
 8006210:	8ae1      	ldrh	r1, [r4, #22]
      if (pcb->remote_port == tcphdr->src &&
 8006212:	885a      	ldrh	r2, [r3, #2]
 8006214:	428a      	cmp	r2, r1
 8006216:	d137      	bne.n	8006288 <tcp_input+0x390>
          pcb->local_port == tcphdr->dest &&
 8006218:	6861      	ldr	r1, [r4, #4]
 800621a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800621e:	4299      	cmp	r1, r3
 8006220:	d132      	bne.n	8006288 <tcp_input+0x390>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006222:	6821      	ldr	r1, [r4, #0]
 8006224:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006228:	4299      	cmp	r1, r3
 800622a:	d12d      	bne.n	8006288 <tcp_input+0x390>
  if (flags & TCP_RST) {
 800622c:	9b04      	ldr	r3, [sp, #16]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	075e      	lsls	r6, r3, #29
 8006232:	d423      	bmi.n	800627c <tcp_input+0x384>
 8006234:	9905      	ldr	r1, [sp, #20]
 8006236:	880e      	ldrh	r6, [r1, #0]
  if (flags & TCP_SYN) {
 8006238:	0799      	lsls	r1, r3, #30
 800623a:	d512      	bpl.n	8006262 <tcp_input+0x36a>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800623c:	9b03      	ldr	r3, [sp, #12]
 800623e:	6819      	ldr	r1, [r3, #0]
 8006240:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006242:	1acb      	subs	r3, r1, r3
 8006244:	d412      	bmi.n	800626c <tcp_input+0x374>
 8006246:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 8006248:	1bdb      	subs	r3, r3, r7
 800624a:	2b00      	cmp	r3, #0
 800624c:	dc0e      	bgt.n	800626c <tcp_input+0x374>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800624e:	4b93      	ldr	r3, [pc, #588]	; (800649c <tcp_input+0x5a4>)
 8006250:	e9cd 2000 	strd	r2, r0, [sp]
 8006254:	4431      	add	r1, r6
 8006256:	1d1a      	adds	r2, r3, #4
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006258:	f8da 0000 	ldr.w	r0, [sl]
 800625c:	f000 fe68 	bl	8006f30 <tcp_rst>
 8006260:	e00c      	b.n	800627c <tcp_input+0x384>
  } else if (flags & TCP_FIN) {
 8006262:	07df      	lsls	r7, r3, #31
    pcb->tmr = tcp_ticks;
 8006264:	bf42      	ittt	mi
 8006266:	4b8e      	ldrmi	r3, [pc, #568]	; (80064a0 <tcp_input+0x5a8>)
 8006268:	681b      	ldrmi	r3, [r3, #0]
 800626a:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 800626c:	b136      	cbz	r6, 800627c <tcp_input+0x384>
    tcp_output(pcb);
 800626e:	4620      	mov	r0, r4
    pcb->flags |= TF_ACK_NOW;
 8006270:	7ea3      	ldrb	r3, [r4, #26]
 8006272:	f043 0302 	orr.w	r3, r3, #2
 8006276:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8006278:	f000 fce0 	bl	8006c3c <tcp_output>
  pbuf_free(p);
 800627c:	4628      	mov	r0, r5
}
 800627e:	b009      	add	sp, #36	; 0x24
 8006280:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8006284:	f7fd bf84 	b.w	8004190 <pbuf_free>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006288:	68e4      	ldr	r4, [r4, #12]
 800628a:	2c00      	cmp	r4, #0
 800628c:	d1b2      	bne.n	80061f4 <tcp_input+0x2fc>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800628e:	4b85      	ldr	r3, [pc, #532]	; (80064a4 <tcp_input+0x5ac>)
      if (lpcb->local_port == tcphdr->dest) {
 8006290:	6832      	ldr	r2, [r6, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006292:	6819      	ldr	r1, [r3, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8006294:	f8d8 c014 	ldr.w	ip, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006298:	4689      	mov	r9, r1
 800629a:	f1b9 0f00 	cmp.w	r9, #0
 800629e:	d111      	bne.n	80062c4 <tcp_input+0x3cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80062a0:	8990      	ldrh	r0, [r2, #12]
 80062a2:	f7fd fcf7 	bl	8003c94 <lwip_htons>
 80062a6:	0743      	lsls	r3, r0, #29
 80062a8:	d4e8      	bmi.n	800627c <tcp_input+0x384>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80062aa:	9a05      	ldr	r2, [sp, #20]
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80062ac:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80062ae:	8810      	ldrh	r0, [r2, #0]
 80062b0:	9a03      	ldr	r2, [sp, #12]
 80062b2:	6811      	ldr	r1, [r2, #0]
 80062b4:	881a      	ldrh	r2, [r3, #0]
 80062b6:	4401      	add	r1, r0
 80062b8:	9201      	str	r2, [sp, #4]
 80062ba:	885b      	ldrh	r3, [r3, #2]
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	4b77      	ldr	r3, [pc, #476]	; (800649c <tcp_input+0x5a4>)
 80062c0:	1d1a      	adds	r2, r3, #4
 80062c2:	e7c9      	b.n	8006258 <tcp_input+0x360>
      if (lpcb->local_port == tcphdr->dest) {
 80062c4:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 80062c8:	8853      	ldrh	r3, [r2, #2]
 80062ca:	4283      	cmp	r3, r0
 80062cc:	d107      	bne.n	80062de <tcp_input+0x3e6>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80062ce:	f8d9 3000 	ldr.w	r3, [r9]
 80062d2:	4563      	cmp	r3, ip
 80062d4:	f000 82f6 	beq.w	80068c4 <tcp_input+0x9cc>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 82f3 	beq.w	80068c4 <tcp_input+0x9cc>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80062de:	464c      	mov	r4, r9
 80062e0:	f8d9 900c 	ldr.w	r9, [r9, #12]
 80062e4:	e7d9      	b.n	800629a <tcp_input+0x3a2>
  } else if (flags & TCP_SYN) {
 80062e6:	0799      	lsls	r1, r3, #30
 80062e8:	d5c8      	bpl.n	800627c <tcp_input+0x384>
    npcb = tcp_alloc(pcb->prio);
 80062ea:	f899 0015 	ldrb.w	r0, [r9, #21]
 80062ee:	f7fe ffb1 	bl	8005254 <tcp_alloc>
    if (npcb == NULL) {
 80062f2:	4682      	mov	sl, r0
 80062f4:	b950      	cbnz	r0, 800630c <tcp_input+0x414>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80062f6:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d0be      	beq.n	800627c <tcp_input+0x384>
 80062fe:	4601      	mov	r1, r0
 8006300:	f04f 32ff 	mov.w	r2, #4294967295
 8006304:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8006308:	4798      	blx	r3
 800630a:	e7b7      	b.n	800627c <tcp_input+0x384>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800630c:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 8006310:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8006312:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8006314:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006318:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800631a:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 800631e:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8006320:	7813      	ldrb	r3, [r2, #0]
 8006322:	7852      	ldrb	r2, [r2, #1]
 8006324:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006328:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800632a:	2303      	movs	r3, #3
 800632c:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800632e:	9b03      	ldr	r3, [sp, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3301      	adds	r3, #1
 8006334:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8006336:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8006338:	f7ff f826 	bl	8005388 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800633c:	9b03      	ldr	r3, [sp, #12]
    npcb->snd_wl2 = iss;
 800633e:	f8ca 0054 	str.w	r0, [sl, #84]	; 0x54
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8006342:	681b      	ldr	r3, [r3, #0]
    npcb->snd_nxt = iss;
 8006344:	f8ca 004c 	str.w	r0, [sl, #76]	; 0x4c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8006348:	3b01      	subs	r3, #1
 800634a:	f8ca 3050 	str.w	r3, [sl, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800634e:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->lastack = iss;
 8006352:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
    npcb->snd_lbb = iss;
 8006356:	f8ca 0058 	str.w	r0, [sl, #88]	; 0x58
    npcb->callback_arg = pcb->callback_arg;
 800635a:	f8ca 3010 	str.w	r3, [sl, #16]
    npcb->listener = pcb;
 800635e:	f8ca 9078 	str.w	r9, [sl, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8006362:	f899 3008 	ldrb.w	r3, [r9, #8]
 8006366:	f003 030c 	and.w	r3, r3, #12
 800636a:	f88a 3008 	strb.w	r3, [sl, #8]
    TCP_REG_ACTIVE(npcb);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	f8c7 a000 	str.w	sl, [r7]
 8006374:	f8ca 300c 	str.w	r3, [sl, #12]
 8006378:	f000 ff7a 	bl	8007270 <tcp_timer_needed>
 800637c:	2201      	movs	r2, #1
 800637e:	4b4a      	ldr	r3, [pc, #296]	; (80064a8 <tcp_input+0x5b0>)
    tcp_parseopt(npcb);
 8006380:	f10a 0032 	add.w	r0, sl, #50	; 0x32
    TCP_REG_ACTIVE(npcb);
 8006384:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8006386:	f7ff fd5d 	bl	8005e44 <tcp_parseopt.isra.1>
    npcb->snd_wnd = tcphdr->wnd;
 800638a:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800638c:	f10a 0104 	add.w	r1, sl, #4
    npcb->snd_wnd = tcphdr->wnd;
 8006390:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8006392:	f8ba 0032 	ldrh.w	r0, [sl, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 8006396:	f8aa 305c 	strh.w	r3, [sl, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800639a:	f8aa 305e 	strh.w	r3, [sl, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800639e:	f7fe ffff 	bl	80053a0 <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80063a2:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80063a4:	f8aa 0032 	strh.w	r0, [sl, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80063a8:	4650      	mov	r0, sl
 80063aa:	f000 fb5f 	bl	8006a6c <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 80063ae:	b120      	cbz	r0, 80063ba <tcp_input+0x4c2>
      tcp_abandon(npcb, 0);
 80063b0:	4621      	mov	r1, r4
 80063b2:	4650      	mov	r0, sl
 80063b4:	f7fe fea8 	bl	8005108 <tcp_abandon>
 80063b8:	e760      	b.n	800627c <tcp_input+0x384>
    tcp_output(npcb);
 80063ba:	4650      	mov	r0, sl
 80063bc:	e75c      	b.n	8006278 <tcp_input+0x380>
    tcp_input_pcb = pcb;
 80063be:	4b3b      	ldr	r3, [pc, #236]	; (80064ac <tcp_input+0x5b4>)
 80063c0:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 80063c2:	9b04      	ldr	r3, [sp, #16]
 80063c4:	781d      	ldrb	r5, [r3, #0]
 80063c6:	076a      	lsls	r2, r5, #29
 80063c8:	d53d      	bpl.n	8006446 <tcp_input+0x54e>
    if (pcb->state == SYN_SENT) {
 80063ca:	7d21      	ldrb	r1, [r4, #20]
 80063cc:	2902      	cmp	r1, #2
 80063ce:	d123      	bne.n	8006418 <tcp_input+0x520>
      if (ackno == pcb->snd_nxt) {
 80063d0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80063d2:	f8da 3000 	ldr.w	r3, [sl]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d109      	bne.n	80063ee <tcp_input+0x4f6>
      recv_flags |= TF_RESET;
 80063da:	f898 3000 	ldrb.w	r3, [r8]
 80063de:	f043 0308 	orr.w	r3, r3, #8
 80063e2:	f888 3000 	strb.w	r3, [r8]
      pcb->flags &= ~TF_ACK_DELAY;
 80063e6:	7ea3      	ldrb	r3, [r4, #26]
 80063e8:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 80063ec:	76a3      	strb	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 80063ee:	f898 3000 	ldrb.w	r3, [r8]
 80063f2:	0719      	lsls	r1, r3, #28
 80063f4:	f140 81ff 	bpl.w	80067f6 <tcp_input+0x8fe>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80063f8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80063fc:	b11b      	cbz	r3, 8006406 <tcp_input+0x50e>
 80063fe:	f06f 010d 	mvn.w	r1, #13
 8006402:	6920      	ldr	r0, [r4, #16]
 8006404:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006406:	4621      	mov	r1, r4
 8006408:	4829      	ldr	r0, [pc, #164]	; (80064b0 <tcp_input+0x5b8>)
 800640a:	f7fe fce5 	bl	8004dd8 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800640e:	4621      	mov	r1, r4
 8006410:	2002      	movs	r0, #2
 8006412:	f7fd fd53 	bl	8003ebc <memp_free>
 8006416:	e6a7      	b.n	8006168 <tcp_input+0x270>
      if (seqno == pcb->rcv_nxt) {
 8006418:	9b03      	ldr	r3, [sp, #12]
 800641a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	429a      	cmp	r2, r3
 8006420:	d007      	beq.n	8006432 <tcp_input+0x53a>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8006422:	1a9b      	subs	r3, r3, r2
 8006424:	d4e3      	bmi.n	80063ee <tcp_input+0x4f6>
 8006426:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006428:	1a9b      	subs	r3, r3, r2
 800642a:	2b00      	cmp	r3, #0
 800642c:	dcdf      	bgt.n	80063ee <tcp_input+0x4f6>
      tcp_ack_now(pcb);
 800642e:	7ea3      	ldrb	r3, [r4, #26]
 8006430:	e011      	b.n	8006456 <tcp_input+0x55e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8006432:	2900      	cmp	r1, #0
 8006434:	d1d1      	bne.n	80063da <tcp_input+0x4e2>
 8006436:	4b1f      	ldr	r3, [pc, #124]	; (80064b4 <tcp_input+0x5bc>)
 8006438:	f240 22e7 	movw	r2, #743	; 0x2e7
 800643c:	491e      	ldr	r1, [pc, #120]	; (80064b8 <tcp_input+0x5c0>)
 800643e:	481f      	ldr	r0, [pc, #124]	; (80064bc <tcp_input+0x5c4>)
 8006440:	f003 fad8 	bl	80099f4 <iprintf>
 8006444:	e7c9      	b.n	80063da <tcp_input+0x4e2>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8006446:	f015 0202 	ands.w	r2, r5, #2
 800644a:	7ea3      	ldrb	r3, [r4, #26]
 800644c:	d006      	beq.n	800645c <tcp_input+0x564>
 800644e:	7d21      	ldrb	r1, [r4, #20]
 8006450:	3902      	subs	r1, #2
 8006452:	2901      	cmp	r1, #1
 8006454:	d902      	bls.n	800645c <tcp_input+0x564>
      tcp_ack_now(pcb);
 8006456:	f043 0302 	orr.w	r3, r3, #2
 800645a:	e7c7      	b.n	80063ec <tcp_input+0x4f4>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800645c:	06db      	lsls	r3, r3, #27
    pcb->tmr = tcp_ticks;
 800645e:	bf58      	it	pl
 8006460:	4b0f      	ldrpl	r3, [pc, #60]	; (80064a0 <tcp_input+0x5a8>)
  tcp_parseopt(pcb);
 8006462:	f104 0032 	add.w	r0, r4, #50	; 0x32
    pcb->tmr = tcp_ticks;
 8006466:	bf58      	it	pl
 8006468:	681b      	ldrpl	r3, [r3, #0]
 800646a:	9207      	str	r2, [sp, #28]
 800646c:	bf58      	it	pl
 800646e:	6223      	strpl	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 8006470:	2300      	movs	r3, #0
 8006472:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 8006476:	f7ff fce5 	bl	8005e44 <tcp_parseopt.isra.1>
  switch (pcb->state) {
 800647a:	7d23      	ldrb	r3, [r4, #20]
 800647c:	9a07      	ldr	r2, [sp, #28]
 800647e:	3b02      	subs	r3, #2
 8006480:	2b07      	cmp	r3, #7
 8006482:	d8b4      	bhi.n	80063ee <tcp_input+0x4f6>
 8006484:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006488:	009e001c 	.word	0x009e001c
 800648c:	010c0108 	.word	0x010c0108
 8006490:	01080156 	.word	0x01080156
 8006494:	019e016f 	.word	0x019e016f
 8006498:	0800dc5a 	.word	0x0800dc5a
 800649c:	200060d0 	.word	0x200060d0
 80064a0:	200060ec 	.word	0x200060ec
 80064a4:	200060f0 	.word	0x200060f0
 80064a8:	200060e4 	.word	0x200060e4
 80064ac:	200060fc 	.word	0x200060fc
 80064b0:	200060e8 	.word	0x200060e8
 80064b4:	0800dd08 	.word	0x0800dd08
 80064b8:	0800dc87 	.word	0x0800dc87
 80064bc:	0800d278 	.word	0x0800d278
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80064c0:	f005 0312 	and.w	r3, r5, #18
 80064c4:	2b12      	cmp	r3, #18
 80064c6:	d15f      	bne.n	8006588 <tcp_input+0x690>
        && (ackno == pcb->lastack + 1)) {
 80064c8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80064ca:	f8da 3000 	ldr.w	r3, [sl]
 80064ce:	3201      	adds	r2, #1
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d159      	bne.n	8006588 <tcp_input+0x690>
      pcb->rcv_nxt = seqno + 1;
 80064d4:	9b03      	ldr	r3, [sp, #12]
      pcb->lastack = ackno;
 80064d6:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 80064d8:	681b      	ldr	r3, [r3, #0]
      pcb->snd_wnd = tcphdr->wnd;
 80064da:	6832      	ldr	r2, [r6, #0]
      pcb->rcv_nxt = seqno + 1;
 80064dc:	1c59      	adds	r1, r3, #1
 80064de:	6261      	str	r1, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80064e0:	62e1      	str	r1, [r4, #44]	; 0x2c
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80064e2:	3b01      	subs	r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 80064e4:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80064e6:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 80064e8:	2304      	movs	r3, #4
      pcb->snd_wnd = tcphdr->wnd;
 80064ea:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 80064ee:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->state = ESTABLISHED;
 80064f2:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80064f4:	18e1      	adds	r1, r4, r3
 80064f6:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 80064f8:	f7fe ff52 	bl	80053a0 <tcp_eff_send_mss_impl>
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80064fc:	f241 121c 	movw	r2, #4380	; 0x111c
 8006500:	0043      	lsls	r3, r0, #1
 8006502:	4293      	cmp	r3, r2
 8006504:	bf38      	it	cc
 8006506:	4613      	movcc	r3, r2
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8006508:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800650a:	0080      	lsls	r0, r0, #2
 800650c:	4283      	cmp	r3, r0
 800650e:	bf28      	it	cs
 8006510:	4603      	movcs	r3, r0
 8006512:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8006516:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800651a:	b933      	cbnz	r3, 800652a <tcp_input+0x632>
 800651c:	4ba1      	ldr	r3, [pc, #644]	; (80067a4 <tcp_input+0x8ac>)
 800651e:	f240 321a 	movw	r2, #794	; 0x31a
 8006522:	49a1      	ldr	r1, [pc, #644]	; (80067a8 <tcp_input+0x8b0>)
 8006524:	48a1      	ldr	r0, [pc, #644]	; (80067ac <tcp_input+0x8b4>)
 8006526:	f003 fa65 	bl	80099f4 <iprintf>
      --pcb->snd_queuelen;
 800652a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 800652e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
      --pcb->snd_queuelen;
 8006530:	3b01      	subs	r3, #1
 8006532:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if (rseg == NULL) {
 8006536:	b9fd      	cbnz	r5, 8006578 <tcp_input+0x680>
        rseg = pcb->unsent;
 8006538:	6ea5      	ldr	r5, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800653a:	b935      	cbnz	r5, 800654a <tcp_input+0x652>
 800653c:	4b99      	ldr	r3, [pc, #612]	; (80067a4 <tcp_input+0x8ac>)
 800653e:	f240 3222 	movw	r2, #802	; 0x322
 8006542:	499b      	ldr	r1, [pc, #620]	; (80067b0 <tcp_input+0x8b8>)
 8006544:	4899      	ldr	r0, [pc, #612]	; (80067ac <tcp_input+0x8b4>)
 8006546:	f003 fa55 	bl	80099f4 <iprintf>
        pcb->unsent = rseg->next;
 800654a:	682b      	ldr	r3, [r5, #0]
 800654c:	66a3      	str	r3, [r4, #104]	; 0x68
      tcp_seg_free(rseg);
 800654e:	4628      	mov	r0, r5
 8006550:	f7fe fa10 	bl	8004974 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 8006554:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006556:	b993      	cbnz	r3, 800657e <tcp_input+0x686>
        pcb->rtime = -1;
 8006558:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800655c:	8623      	strh	r3, [r4, #48]	; 0x30
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800655e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006562:	2b00      	cmp	r3, #0
 8006564:	f43f af63 	beq.w	800642e <tcp_input+0x536>
 8006568:	2200      	movs	r2, #0
 800656a:	4621      	mov	r1, r4
 800656c:	6920      	ldr	r0, [r4, #16]
 800656e:	4798      	blx	r3
      if (err == ERR_ABRT) {
 8006570:	300d      	adds	r0, #13
 8006572:	f47f af5c 	bne.w	800642e <tcp_input+0x536>
 8006576:	e5f7      	b.n	8006168 <tcp_input+0x270>
        pcb->unacked = rseg->next;
 8006578:	682b      	ldr	r3, [r5, #0]
 800657a:	66e3      	str	r3, [r4, #108]	; 0x6c
 800657c:	e7e7      	b.n	800654e <tcp_input+0x656>
        pcb->rtime = 0;
 800657e:	2300      	movs	r3, #0
 8006580:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 8006582:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006586:	e7ea      	b.n	800655e <tcp_input+0x666>
    else if (flags & TCP_ACK) {
 8006588:	06e8      	lsls	r0, r5, #27
 800658a:	f57f af30 	bpl.w	80063ee <tcp_input+0x4f6>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800658e:	9a05      	ldr	r2, [sp, #20]
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006590:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006592:	8810      	ldrh	r0, [r2, #0]
 8006594:	9a03      	ldr	r2, [sp, #12]
 8006596:	6811      	ldr	r1, [r2, #0]
 8006598:	881a      	ldrh	r2, [r3, #0]
 800659a:	4401      	add	r1, r0
 800659c:	9201      	str	r2, [sp, #4]
 800659e:	885b      	ldrh	r3, [r3, #2]
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	4b84      	ldr	r3, [pc, #528]	; (80067b4 <tcp_input+0x8bc>)
 80065a4:	f8da 0000 	ldr.w	r0, [sl]
 80065a8:	1d1a      	adds	r2, r3, #4
 80065aa:	f000 fcc1 	bl	8006f30 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 80065ae:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80065b2:	2b05      	cmp	r3, #5
 80065b4:	f63f af1b 	bhi.w	80063ee <tcp_input+0x4f6>
        pcb->rtime = 0;
 80065b8:	2300      	movs	r3, #0
        tcp_rexmit_rto(pcb);
 80065ba:	4620      	mov	r0, r4
        pcb->rtime = 0;
 80065bc:	8623      	strh	r3, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 80065be:	f000 fd11 	bl	8006fe4 <tcp_rexmit_rto>
 80065c2:	e714      	b.n	80063ee <tcp_input+0x4f6>
    if (flags & TCP_ACK) {
 80065c4:	06e9      	lsls	r1, r5, #27
 80065c6:	d559      	bpl.n	800667c <tcp_input+0x784>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80065c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80065ca:	f8da 0000 	ldr.w	r0, [sl]
 80065ce:	43db      	mvns	r3, r3
 80065d0:	42c3      	cmn	r3, r0
 80065d2:	d444      	bmi.n	800665e <tcp_input+0x766>
 80065d4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80065d6:	1ac3      	subs	r3, r0, r3
 80065d8:	2b00      	cmp	r3, #0
 80065da:	dc40      	bgt.n	800665e <tcp_input+0x766>
        pcb->state = ESTABLISHED;
 80065dc:	2304      	movs	r3, #4
 80065de:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 80065e0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80065e2:	b143      	cbz	r3, 80065f6 <tcp_input+0x6fe>
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	b933      	cbnz	r3, 80065f6 <tcp_input+0x6fe>
 80065e8:	4b6e      	ldr	r3, [pc, #440]	; (80067a4 <tcp_input+0x8ac>)
 80065ea:	f240 3251 	movw	r2, #849	; 0x351
 80065ee:	4972      	ldr	r1, [pc, #456]	; (80067b8 <tcp_input+0x8c0>)
 80065f0:	486e      	ldr	r0, [pc, #440]	; (80067ac <tcp_input+0x8b4>)
 80065f2:	f003 f9ff 	bl	80099f4 <iprintf>
        if (pcb->listener == NULL) {
 80065f6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80065f8:	b91b      	cbnz	r3, 8006602 <tcp_input+0x70a>
            tcp_abort(pcb);
 80065fa:	4620      	mov	r0, r4
 80065fc:	f7fe fdfa 	bl	80051f4 <tcp_abort>
            goto aborted;
 8006600:	e5b2      	b.n	8006168 <tcp_input+0x270>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0f8      	beq.n	80065fa <tcp_input+0x702>
 8006608:	2200      	movs	r2, #0
 800660a:	4621      	mov	r1, r4
 800660c:	6920      	ldr	r0, [r4, #16]
 800660e:	4798      	blx	r3
        if (err != ERR_OK) {
 8006610:	b118      	cbz	r0, 800661a <tcp_input+0x722>
          if (err != ERR_ABRT) {
 8006612:	300d      	adds	r0, #13
 8006614:	f43f ada8 	beq.w	8006168 <tcp_input+0x270>
 8006618:	e7ef      	b.n	80065fa <tcp_input+0x702>
        tcp_receive(pcb);
 800661a:	4620      	mov	r0, r4
 800661c:	f7fe ff32 	bl	8005484 <tcp_receive>
        if (recv_acked != 0) {
 8006620:	f8b9 3000 	ldrh.w	r3, [r9]
 8006624:	b113      	cbz	r3, 800662c <tcp_input+0x734>
          recv_acked--;
 8006626:	3b01      	subs	r3, #1
 8006628:	f8a9 3000 	strh.w	r3, [r9]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800662c:	f241 111c 	movw	r1, #4380	; 0x111c
 8006630:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8006632:	0053      	lsls	r3, r2, #1
 8006634:	428b      	cmp	r3, r1
 8006636:	bf38      	it	cc
 8006638:	460b      	movcc	r3, r1
 800663a:	0092      	lsls	r2, r2, #2
 800663c:	4293      	cmp	r3, r2
 800663e:	bf28      	it	cs
 8006640:	4613      	movcs	r3, r2
 8006642:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8006646:	f898 3000 	ldrb.w	r3, [r8]
 800664a:	069b      	lsls	r3, r3, #26
 800664c:	f57f aecf 	bpl.w	80063ee <tcp_input+0x4f6>
      tcp_ack_now(pcb);
 8006650:	7ea3      	ldrb	r3, [r4, #26]
 8006652:	f043 0302 	orr.w	r3, r3, #2
 8006656:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 8006658:	2307      	movs	r3, #7
      pcb->state = FIN_WAIT_2;
 800665a:	7523      	strb	r3, [r4, #20]
 800665c:	e6c7      	b.n	80063ee <tcp_input+0x4f6>
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800665e:	9a05      	ldr	r2, [sp, #20]
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006660:	6833      	ldr	r3, [r6, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006662:	8815      	ldrh	r5, [r2, #0]
 8006664:	9a03      	ldr	r2, [sp, #12]
 8006666:	6811      	ldr	r1, [r2, #0]
 8006668:	881a      	ldrh	r2, [r3, #0]
 800666a:	4429      	add	r1, r5
 800666c:	9201      	str	r2, [sp, #4]
 800666e:	885b      	ldrh	r3, [r3, #2]
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	4b50      	ldr	r3, [pc, #320]	; (80067b4 <tcp_input+0x8bc>)
 8006674:	1d1a      	adds	r2, r3, #4
 8006676:	f000 fc5b 	bl	8006f30 <tcp_rst>
 800667a:	e6b8      	b.n	80063ee <tcp_input+0x4f6>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800667c:	2a00      	cmp	r2, #0
 800667e:	f43f aeb6 	beq.w	80063ee <tcp_input+0x4f6>
 8006682:	9a03      	ldr	r2, [sp, #12]
 8006684:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006686:	6812      	ldr	r2, [r2, #0]
 8006688:	3b01      	subs	r3, #1
 800668a:	4293      	cmp	r3, r2
 800668c:	f47f aeaf 	bne.w	80063ee <tcp_input+0x4f6>
      tcp_rexmit(pcb);
 8006690:	4620      	mov	r0, r4
 8006692:	f000 fcc2 	bl	800701a <tcp_rexmit>
 8006696:	e6aa      	b.n	80063ee <tcp_input+0x4f6>
    tcp_receive(pcb);
 8006698:	4620      	mov	r0, r4
 800669a:	f7fe fef3 	bl	8005484 <tcp_receive>
 800669e:	e7d2      	b.n	8006646 <tcp_input+0x74e>
    tcp_receive(pcb);
 80066a0:	4620      	mov	r0, r4
 80066a2:	f7fe feef 	bl	8005484 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80066a6:	f898 3000 	ldrb.w	r3, [r8]
 80066aa:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80066ae:	9b04      	ldr	r3, [sp, #16]
 80066b0:	781b      	ldrb	r3, [r3, #0]
    if (recv_flags & TF_GOT_FIN) {
 80066b2:	d030      	beq.n	8006716 <tcp_input+0x81e>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80066b4:	f013 0f10 	tst.w	r3, #16
 80066b8:	7ea3      	ldrb	r3, [r4, #26]
 80066ba:	d027      	beq.n	800670c <tcp_input+0x814>
 80066bc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80066be:	f8da 2000 	ldr.w	r2, [sl]
 80066c2:	4291      	cmp	r1, r2
 80066c4:	d122      	bne.n	800670c <tcp_input+0x814>
 80066c6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80066c8:	bb02      	cbnz	r2, 800670c <tcp_input+0x814>
        tcp_ack_now(pcb);
 80066ca:	f043 0302 	orr.w	r3, r3, #2
 80066ce:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 80066d0:	4620      	mov	r0, r4
 80066d2:	f7fe f981 	bl	80049d8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	429c      	cmp	r4, r3
 80066da:	d109      	bne.n	80066f0 <tcp_input+0x7f8>
      TCP_RMV_ACTIVE(pcb);
 80066dc:	68e3      	ldr	r3, [r4, #12]
 80066de:	603b      	str	r3, [r7, #0]
 80066e0:	e008      	b.n	80066f4 <tcp_input+0x7fc>
        TCP_RMV_ACTIVE(pcb);
 80066e2:	68da      	ldr	r2, [r3, #12]
 80066e4:	4294      	cmp	r4, r2
 80066e6:	d102      	bne.n	80066ee <tcp_input+0x7f6>
      TCP_RMV_ACTIVE(pcb);
 80066e8:	68e2      	ldr	r2, [r4, #12]
 80066ea:	60da      	str	r2, [r3, #12]
 80066ec:	e002      	b.n	80066f4 <tcp_input+0x7fc>
        TCP_RMV_ACTIVE(pcb);
 80066ee:	4613      	mov	r3, r2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1f6      	bne.n	80066e2 <tcp_input+0x7ea>
      TCP_RMV_ACTIVE(pcb);
 80066f4:	2201      	movs	r2, #1
 80066f6:	4b31      	ldr	r3, [pc, #196]	; (80067bc <tcp_input+0x8c4>)
 80066f8:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80066fa:	230a      	movs	r3, #10
 80066fc:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80066fe:	4b30      	ldr	r3, [pc, #192]	; (80067c0 <tcp_input+0x8c8>)
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	601c      	str	r4, [r3, #0]
 8006704:	60e2      	str	r2, [r4, #12]
 8006706:	f000 fdb3 	bl	8007270 <tcp_timer_needed>
 800670a:	e670      	b.n	80063ee <tcp_input+0x4f6>
        tcp_ack_now(pcb);
 800670c:	f043 0302 	orr.w	r3, r3, #2
 8006710:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 8006712:	2308      	movs	r3, #8
 8006714:	e7a1      	b.n	800665a <tcp_input+0x762>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006716:	06df      	lsls	r7, r3, #27
 8006718:	f57f ae69 	bpl.w	80063ee <tcp_input+0x4f6>
 800671c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800671e:	f8da 3000 	ldr.w	r3, [sl]
 8006722:	429a      	cmp	r2, r3
 8006724:	f47f ae63 	bne.w	80063ee <tcp_input+0x4f6>
 8006728:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800672a:	2b00      	cmp	r3, #0
 800672c:	f47f ae5f 	bne.w	80063ee <tcp_input+0x4f6>
      pcb->state = FIN_WAIT_2;
 8006730:	2306      	movs	r3, #6
 8006732:	e792      	b.n	800665a <tcp_input+0x762>
    tcp_receive(pcb);
 8006734:	4620      	mov	r0, r4
 8006736:	f7fe fea5 	bl	8005484 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800673a:	f898 3000 	ldrb.w	r3, [r8]
 800673e:	069e      	lsls	r6, r3, #26
 8006740:	f57f ae55 	bpl.w	80063ee <tcp_input+0x4f6>
      tcp_ack_now(pcb);
 8006744:	7ea3      	ldrb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 8006746:	4620      	mov	r0, r4
      tcp_ack_now(pcb);
 8006748:	f043 0302 	orr.w	r3, r3, #2
 800674c:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 800674e:	f7fe f943 	bl	80049d8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	429c      	cmp	r4, r3
 8006756:	d0c1      	beq.n	80066dc <tcp_input+0x7e4>
 8006758:	2b00      	cmp	r3, #0
 800675a:	d0cb      	beq.n	80066f4 <tcp_input+0x7fc>
 800675c:	68da      	ldr	r2, [r3, #12]
 800675e:	4294      	cmp	r4, r2
 8006760:	d0c2      	beq.n	80066e8 <tcp_input+0x7f0>
 8006762:	4613      	mov	r3, r2
 8006764:	e7f8      	b.n	8006758 <tcp_input+0x860>
    tcp_receive(pcb);
 8006766:	4620      	mov	r0, r4
 8006768:	f7fe fe8c 	bl	8005484 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800676c:	9b04      	ldr	r3, [sp, #16]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	06dd      	lsls	r5, r3, #27
 8006772:	f57f ae3c 	bpl.w	80063ee <tcp_input+0x4f6>
 8006776:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006778:	f8da 3000 	ldr.w	r3, [sl]
 800677c:	429a      	cmp	r2, r3
 800677e:	f47f ae36 	bne.w	80063ee <tcp_input+0x4f6>
 8006782:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006784:	2b00      	cmp	r3, #0
 8006786:	f47f ae32 	bne.w	80063ee <tcp_input+0x4f6>
      tcp_pcb_purge(pcb);
 800678a:	4620      	mov	r0, r4
 800678c:	f7fe f924 	bl	80049d8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	429c      	cmp	r4, r3
 8006794:	d0a2      	beq.n	80066dc <tcp_input+0x7e4>
 8006796:	2b00      	cmp	r3, #0
 8006798:	d0ac      	beq.n	80066f4 <tcp_input+0x7fc>
 800679a:	68da      	ldr	r2, [r3, #12]
 800679c:	4294      	cmp	r4, r2
 800679e:	d0a3      	beq.n	80066e8 <tcp_input+0x7f0>
 80067a0:	4613      	mov	r3, r2
 80067a2:	e7f8      	b.n	8006796 <tcp_input+0x89e>
 80067a4:	0800dd08 	.word	0x0800dd08
 80067a8:	0800dca7 	.word	0x0800dca7
 80067ac:	0800d278 	.word	0x0800d278
 80067b0:	0800dcbd 	.word	0x0800dcbd
 80067b4:	200060d0 	.word	0x200060d0
 80067b8:	0800dcd0 	.word	0x0800dcd0
 80067bc:	200060e4 	.word	0x200060e4
 80067c0:	200060f8 	.word	0x200060f8
    tcp_receive(pcb);
 80067c4:	4620      	mov	r0, r4
 80067c6:	f7fe fe5d 	bl	8005484 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80067ca:	9b04      	ldr	r3, [sp, #16]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	06d8      	lsls	r0, r3, #27
 80067d0:	f57f ae0d 	bpl.w	80063ee <tcp_input+0x4f6>
 80067d4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80067d6:	f8da 3000 	ldr.w	r3, [sl]
 80067da:	429a      	cmp	r2, r3
 80067dc:	f47f ae07 	bne.w	80063ee <tcp_input+0x4f6>
 80067e0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f47f ae03 	bne.w	80063ee <tcp_input+0x4f6>
      recv_flags |= TF_CLOSED;
 80067e8:	f898 3000 	ldrb.w	r3, [r8]
 80067ec:	f043 0310 	orr.w	r3, r3, #16
 80067f0:	f888 3000 	strb.w	r3, [r8]
 80067f4:	e5fb      	b.n	80063ee <tcp_input+0x4f6>
        if (recv_acked > 0) {
 80067f6:	f8b9 2000 	ldrh.w	r2, [r9]
 80067fa:	b122      	cbz	r2, 8006806 <tcp_input+0x90e>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80067fc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80067fe:	b9f3      	cbnz	r3, 800683e <tcp_input+0x946>
          recv_acked = 0;
 8006800:	2300      	movs	r3, #0
 8006802:	f8a9 3000 	strh.w	r3, [r9]
        if (tcp_input_delayed_close(pcb)) {
 8006806:	4620      	mov	r0, r4
 8006808:	f7ff fb56 	bl	8005eb8 <tcp_input_delayed_close>
 800680c:	2800      	cmp	r0, #0
 800680e:	f47f acab 	bne.w	8006168 <tcp_input+0x270>
        if (recv_data != NULL) {
 8006812:	f8db 3000 	ldr.w	r3, [fp]
 8006816:	b333      	cbz	r3, 8006866 <tcp_input+0x96e>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8006818:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800681a:	b133      	cbz	r3, 800682a <tcp_input+0x932>
 800681c:	4b3b      	ldr	r3, [pc, #236]	; (800690c <tcp_input+0xa14>)
 800681e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8006822:	493b      	ldr	r1, [pc, #236]	; (8006910 <tcp_input+0xa18>)
 8006824:	483b      	ldr	r0, [pc, #236]	; (8006914 <tcp_input+0xa1c>)
 8006826:	f003 f8e5 	bl	80099f4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800682a:	7ea3      	ldrb	r3, [r4, #26]
 800682c:	f8db 2000 	ldr.w	r2, [fp]
 8006830:	f013 0310 	ands.w	r3, r3, #16
 8006834:	d009      	beq.n	800684a <tcp_input+0x952>
            pbuf_free(recv_data);
 8006836:	4610      	mov	r0, r2
 8006838:	f7fd fcaa 	bl	8004190 <pbuf_free>
 800683c:	e6dd      	b.n	80065fa <tcp_input+0x702>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800683e:	4621      	mov	r1, r4
 8006840:	6920      	ldr	r0, [r4, #16]
 8006842:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8006844:	300d      	adds	r0, #13
 8006846:	d1db      	bne.n	8006800 <tcp_input+0x908>
 8006848:	e48e      	b.n	8006168 <tcp_input+0x270>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800684a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 800684e:	b30d      	cbz	r5, 8006894 <tcp_input+0x99c>
 8006850:	4621      	mov	r1, r4
 8006852:	6920      	ldr	r0, [r4, #16]
 8006854:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 8006856:	f110 0f0d 	cmn.w	r0, #13
 800685a:	f43f ac85 	beq.w	8006168 <tcp_input+0x270>
          if (err != ERR_OK) {
 800685e:	b110      	cbz	r0, 8006866 <tcp_input+0x96e>
            pcb->refused_data = recv_data;
 8006860:	f8db 3000 	ldr.w	r3, [fp]
 8006864:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 8006866:	f898 3000 	ldrb.w	r3, [r8]
 800686a:	069a      	lsls	r2, r3, #26
 800686c:	d505      	bpl.n	800687a <tcp_input+0x982>
          if (pcb->refused_data != NULL) {
 800686e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006870:	b1b3      	cbz	r3, 80068a0 <tcp_input+0x9a8>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8006872:	7b5a      	ldrb	r2, [r3, #13]
 8006874:	f042 0220 	orr.w	r2, r2, #32
 8006878:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800687a:	2200      	movs	r2, #0
 800687c:	4b26      	ldr	r3, [pc, #152]	; (8006918 <tcp_input+0xa20>)
        if (tcp_input_delayed_close(pcb)) {
 800687e:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 8006880:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8006882:	f7ff fb19 	bl	8005eb8 <tcp_input_delayed_close>
 8006886:	2800      	cmp	r0, #0
 8006888:	f47f ac6e 	bne.w	8006168 <tcp_input+0x270>
        tcp_output(pcb);
 800688c:	4620      	mov	r0, r4
 800688e:	f000 f9d5 	bl	8006c3c <tcp_output>
 8006892:	e469      	b.n	8006168 <tcp_input+0x270>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8006894:	462b      	mov	r3, r5
 8006896:	4621      	mov	r1, r4
 8006898:	4628      	mov	r0, r5
 800689a:	f7fe fb9d 	bl	8004fd8 <tcp_recv_null>
 800689e:	e7da      	b.n	8006856 <tcp_input+0x95e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80068a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 80068a2:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80068a6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 80068aa:	bf1c      	itt	ne
 80068ac:	3301      	addne	r3, #1
 80068ae:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 80068b0:	2d00      	cmp	r5, #0
 80068b2:	d0e2      	beq.n	800687a <tcp_input+0x982>
 80068b4:	2300      	movs	r3, #0
 80068b6:	4621      	mov	r1, r4
 80068b8:	461a      	mov	r2, r3
 80068ba:	6920      	ldr	r0, [r4, #16]
 80068bc:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 80068be:	300d      	adds	r0, #13
 80068c0:	d1db      	bne.n	800687a <tcp_input+0x982>
aborted:
 80068c2:	e451      	b.n	8006168 <tcp_input+0x270>
      if (prev != NULL) {
 80068c4:	b13c      	cbz	r4, 80068d6 <tcp_input+0x9de>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80068c6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80068ca:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80068cc:	4b13      	ldr	r3, [pc, #76]	; (800691c <tcp_input+0xa24>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80068ce:	f8c9 100c 	str.w	r1, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80068d2:	f8c3 9000 	str.w	r9, [r3]
  if (flags & TCP_RST) {
 80068d6:	9b04      	ldr	r3, [sp, #16]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	075c      	lsls	r4, r3, #29
 80068dc:	f53f acce 	bmi.w	800627c <tcp_input+0x384>
  if (flags & TCP_ACK) {
 80068e0:	f013 0410 	ands.w	r4, r3, #16
 80068e4:	f43f acff 	beq.w	80062e6 <tcp_input+0x3ee>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80068e8:	9b05      	ldr	r3, [sp, #20]
 80068ea:	881c      	ldrh	r4, [r3, #0]
 80068ec:	9b03      	ldr	r3, [sp, #12]
 80068ee:	6819      	ldr	r1, [r3, #0]
 80068f0:	8813      	ldrh	r3, [r2, #0]
 80068f2:	4421      	add	r1, r4
 80068f4:	e9cd 0300 	strd	r0, r3, [sp]
 80068f8:	4b09      	ldr	r3, [pc, #36]	; (8006920 <tcp_input+0xa28>)
 80068fa:	1d1a      	adds	r2, r3, #4
 80068fc:	e4ac      	b.n	8006258 <tcp_input+0x360>
      if (prev != NULL) {
 80068fe:	f1b9 0f00 	cmp.w	r9, #0
 8006902:	f47f abef 	bne.w	80060e4 <tcp_input+0x1ec>
 8006906:	f7ff bbfc 	b.w	8006102 <tcp_input+0x20a>
 800690a:	bf00      	nop
 800690c:	0800dd08 	.word	0x0800dd08
 8006910:	0800dcee 	.word	0x0800dcee
 8006914:	0800d278 	.word	0x0800d278
 8006918:	200060fc 	.word	0x200060fc
 800691c:	200060f0 	.word	0x200060f0
 8006920:	200060d0 	.word	0x200060d0

08006924 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8006924:	4a02      	ldr	r2, [pc, #8]	; (8006930 <tcp_trigger_input_pcb_close+0xc>)
 8006926:	7813      	ldrb	r3, [r2, #0]
 8006928:	f043 0310 	orr.w	r3, r3, #16
 800692c:	7013      	strb	r3, [r2, #0]
}
 800692e:	4770      	bx	lr
 8006930:	20000d48 	.word	0x20000d48

08006934 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8006934:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006938:	4681      	mov	r9, r0
 800693a:	460e      	mov	r6, r1
 800693c:	4690      	mov	r8, r2
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800693e:	492a      	ldr	r1, [pc, #168]	; (80069e8 <tcp_create_segment+0xb4>)
 8006940:	22b2      	movs	r2, #178	; 0xb2
 8006942:	2004      	movs	r0, #4
{
 8006944:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
 8006948:	469a      	mov	sl, r3
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800694a:	f7fd fa9b 	bl	8003e84 <memp_malloc_fn>
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800694e:	ea4f 078b 	mov.w	r7, fp, lsl #2
 8006952:	b2fd      	uxtb	r5, r7
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8006954:	4604      	mov	r4, r0
 8006956:	b928      	cbnz	r0, 8006964 <tcp_create_segment+0x30>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8006958:	4630      	mov	r0, r6
 800695a:	f7fd fc19 	bl	8004190 <pbuf_free>
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
  return seg;
}
 800695e:	4620      	mov	r0, r4
 8006960:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  seg->next = NULL;
 8006964:	2300      	movs	r3, #0
  seg->flags = optflags;
 8006966:	f880 b00c 	strb.w	fp, [r0, #12]
  seg->p = p;
 800696a:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800696e:	8933      	ldrh	r3, [r6, #8]
 8006970:	b2bf      	uxth	r7, r7
 8006972:	42bb      	cmp	r3, r7
 8006974:	d205      	bcs.n	8006982 <tcp_create_segment+0x4e>
 8006976:	4b1c      	ldr	r3, [pc, #112]	; (80069e8 <tcp_create_segment+0xb4>)
 8006978:	22ba      	movs	r2, #186	; 0xba
 800697a:	491c      	ldr	r1, [pc, #112]	; (80069ec <tcp_create_segment+0xb8>)
 800697c:	481c      	ldr	r0, [pc, #112]	; (80069f0 <tcp_create_segment+0xbc>)
 800697e:	f003 f839 	bl	80099f4 <iprintf>
  seg->len = p->tot_len - optlen;
 8006982:	8933      	ldrh	r3, [r6, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 8006984:	4630      	mov	r0, r6
  seg->len = p->tot_len - optlen;
 8006986:	1bdf      	subs	r7, r3, r7
 8006988:	8127      	strh	r7, [r4, #8]
  seg->oversize_left = 0;
 800698a:	2700      	movs	r7, #0
  if (pbuf_header(p, TCP_HLEN)) {
 800698c:	2114      	movs	r1, #20
  seg->oversize_left = 0;
 800698e:	8167      	strh	r7, [r4, #10]
  if (pbuf_header(p, TCP_HLEN)) {
 8006990:	f7fd fbf8 	bl	8004184 <pbuf_header>
 8006994:	4606      	mov	r6, r0
 8006996:	b120      	cbz	r0, 80069a2 <tcp_create_segment+0x6e>
    tcp_seg_free(seg);
 8006998:	4620      	mov	r0, r4
 800699a:	f7fd ffeb 	bl	8004974 <tcp_seg_free>
    return NULL;
 800699e:	463c      	mov	r4, r7
 80069a0:	e7dd      	b.n	800695e <tcp_create_segment+0x2a>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80069a2:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80069a4:	f8b9 0016 	ldrh.w	r0, [r9, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80069a8:	685f      	ldr	r7, [r3, #4]
 80069aa:	6127      	str	r7, [r4, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80069ac:	f7fd f972 	bl	8003c94 <lwip_htons>
 80069b0:	8038      	strh	r0, [r7, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80069b2:	f8b9 0018 	ldrh.w	r0, [r9, #24]
 80069b6:	6927      	ldr	r7, [r4, #16]
 80069b8:	f7fd f96c 	bl	8003c94 <lwip_htons>
 80069bc:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80069be:	4650      	mov	r0, sl
 80069c0:	6927      	ldr	r7, [r4, #16]
 80069c2:	f7fd f96a 	bl	8003c9a <lwip_htonl>
 80069c6:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80069c8:	02a8      	lsls	r0, r5, #10
 80069ca:	f500 40a0 	add.w	r0, r0, #20480	; 0x5000
 80069ce:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 80069d2:	ea40 0008 	orr.w	r0, r0, r8
 80069d6:	6927      	ldr	r7, [r4, #16]
 80069d8:	f7fd f95c 	bl	8003c94 <lwip_htons>
  seg->tcphdr->urgp = 0;
 80069dc:	6923      	ldr	r3, [r4, #16]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80069de:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 80069e0:	749e      	strb	r6, [r3, #18]
 80069e2:	74de      	strb	r6, [r3, #19]
  return seg;
 80069e4:	e7bb      	b.n	800695e <tcp_create_segment+0x2a>
 80069e6:	bf00      	nop
 80069e8:	0800e00b 	.word	0x0800e00b
 80069ec:	0800de93 	.word	0x0800de93
 80069f0:	0800d278 	.word	0x0800d278

080069f4 <tcp_output_alloc_header.constprop.1>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80069f4:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 80069f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80069f8:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 80069fa:	4605      	mov	r5, r0
 80069fc:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80069fe:	2001      	movs	r0, #1
 8006a00:	2200      	movs	r2, #0
 8006a02:	f7fd fc27 	bl	8004254 <pbuf_alloc>
  if (p != NULL) {
 8006a06:	4606      	mov	r6, r0
 8006a08:	b340      	cbz	r0, 8006a5c <tcp_output_alloc_header.constprop.1+0x68>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8006a0a:	8943      	ldrh	r3, [r0, #10]
 8006a0c:	2b13      	cmp	r3, #19
 8006a0e:	d805      	bhi.n	8006a1c <tcp_output_alloc_header.constprop.1+0x28>
 8006a10:	4b13      	ldr	r3, [pc, #76]	; (8006a60 <tcp_output_alloc_header.constprop.1+0x6c>)
 8006a12:	2273      	movs	r2, #115	; 0x73
 8006a14:	4913      	ldr	r1, [pc, #76]	; (8006a64 <tcp_output_alloc_header.constprop.1+0x70>)
 8006a16:	4814      	ldr	r0, [pc, #80]	; (8006a68 <tcp_output_alloc_header.constprop.1+0x74>)
 8006a18:	f002 ffec 	bl	80099f4 <iprintf>
    tcphdr->src = lwip_htons(pcb->local_port);
 8006a1c:	8ae8      	ldrh	r0, [r5, #22]
    tcphdr = (struct tcp_hdr *)p->payload;
 8006a1e:	6874      	ldr	r4, [r6, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 8006a20:	f7fd f938 	bl	8003c94 <lwip_htons>
 8006a24:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8006a26:	8b28      	ldrh	r0, [r5, #24]
 8006a28:	f7fd f934 	bl	8003c94 <lwip_htons>
    tcphdr->seqno = seqno_be;
 8006a2c:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8006a2e:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8006a30:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006a32:	f7fd f932 	bl	8003c9a <lwip_htonl>
 8006a36:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8006a38:	f245 0010 	movw	r0, #20496	; 0x5010
 8006a3c:	f7fd f92a 	bl	8003c94 <lwip_htons>
 8006a40:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8006a42:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 8006a44:	f7fd f926 	bl	8003c94 <lwip_htons>
    tcphdr->chksum = 0;
 8006a48:	2300      	movs	r3, #0
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8006a4a:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
    tcphdr->chksum = 0;
 8006a4c:	7423      	strb	r3, [r4, #16]
 8006a4e:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 8006a50:	74a3      	strb	r3, [r4, #18]
 8006a52:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8006a54:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8006a56:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8006a58:	4413      	add	r3, r2
 8006a5a:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 8006a5c:	4630      	mov	r0, r6
 8006a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a60:	0800e00b 	.word	0x0800e00b
 8006a64:	0800dfdd 	.word	0x0800dfdd
 8006a68:	0800d278 	.word	0x0800d278

08006a6c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8006a6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  u8_t optflags = 0;
  u8_t optlen = 0;

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8006a70:	f011 0803 	ands.w	r8, r1, #3
{
 8006a74:	4604      	mov	r4, r0
 8006a76:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8006a78:	d106      	bne.n	8006a88 <tcp_enqueue_flags+0x1c>
 8006a7a:	4b3d      	ldr	r3, [pc, #244]	; (8006b70 <tcp_enqueue_flags+0x104>)
 8006a7c:	f240 321b 	movw	r2, #795	; 0x31b
 8006a80:	493c      	ldr	r1, [pc, #240]	; (8006b74 <tcp_enqueue_flags+0x108>)
 8006a82:	483d      	ldr	r0, [pc, #244]	; (8006b78 <tcp_enqueue_flags+0x10c>)
 8006a84:	f002 ffb6 	bl	80099f4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8006a88:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8006a8c:	2b08      	cmp	r3, #8
 8006a8e:	d90a      	bls.n	8006aa6 <tcp_enqueue_flags+0x3a>
 8006a90:	07f1      	lsls	r1, r6, #31
 8006a92:	d408      	bmi.n	8006aa6 <tcp_enqueue_flags+0x3a>

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    pcb->flags |= TF_NAGLEMEMERR;
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8006a94:	f04f 30ff 	mov.w	r0, #4294967295
    pcb->flags |= TF_NAGLEMEMERR;
 8006a98:	7ea3      	ldrb	r3, [r4, #26]
 8006a9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a9e:	76a3      	strb	r3, [r4, #26]
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 8006aa0:	b003      	add	sp, #12
 8006aa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8006aa6:	2200      	movs	r2, #0
  if (flags & TCP_SYN) {
 8006aa8:	f3c6 0740 	ubfx	r7, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8006aac:	ea4f 0987 	mov.w	r9, r7, lsl #2
 8006ab0:	4649      	mov	r1, r9
 8006ab2:	4610      	mov	r0, r2
 8006ab4:	f7fd fbce 	bl	8004254 <pbuf_alloc>
 8006ab8:	4605      	mov	r5, r0
 8006aba:	2800      	cmp	r0, #0
 8006abc:	d0ea      	beq.n	8006a94 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8006abe:	8943      	ldrh	r3, [r0, #10]
 8006ac0:	454b      	cmp	r3, r9
 8006ac2:	d206      	bcs.n	8006ad2 <tcp_enqueue_flags+0x66>
 8006ac4:	4b2a      	ldr	r3, [pc, #168]	; (8006b70 <tcp_enqueue_flags+0x104>)
 8006ac6:	f240 3241 	movw	r2, #833	; 0x341
 8006aca:	492c      	ldr	r1, [pc, #176]	; (8006b7c <tcp_enqueue_flags+0x110>)
 8006acc:	482a      	ldr	r0, [pc, #168]	; (8006b78 <tcp_enqueue_flags+0x10c>)
 8006ace:	f002 ff91 	bl	80099f4 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8006ad2:	9700      	str	r7, [sp, #0]
 8006ad4:	4629      	mov	r1, r5
 8006ad6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ad8:	4632      	mov	r2, r6
 8006ada:	4620      	mov	r0, r4
 8006adc:	f7ff ff2a 	bl	8006934 <tcp_create_segment>
 8006ae0:	4605      	mov	r5, r0
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	d0d6      	beq.n	8006a94 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8006ae6:	6903      	ldr	r3, [r0, #16]
 8006ae8:	079a      	lsls	r2, r3, #30
 8006aea:	d006      	beq.n	8006afa <tcp_enqueue_flags+0x8e>
 8006aec:	4b20      	ldr	r3, [pc, #128]	; (8006b70 <tcp_enqueue_flags+0x104>)
 8006aee:	f240 3249 	movw	r2, #841	; 0x349
 8006af2:	4923      	ldr	r1, [pc, #140]	; (8006b80 <tcp_enqueue_flags+0x114>)
 8006af4:	4820      	ldr	r0, [pc, #128]	; (8006b78 <tcp_enqueue_flags+0x10c>)
 8006af6:	f002 ff7d 	bl	80099f4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8006afa:	892b      	ldrh	r3, [r5, #8]
 8006afc:	b133      	cbz	r3, 8006b0c <tcp_enqueue_flags+0xa0>
 8006afe:	4b1c      	ldr	r3, [pc, #112]	; (8006b70 <tcp_enqueue_flags+0x104>)
 8006b00:	f240 324a 	movw	r2, #842	; 0x34a
 8006b04:	491f      	ldr	r1, [pc, #124]	; (8006b84 <tcp_enqueue_flags+0x118>)
 8006b06:	481c      	ldr	r0, [pc, #112]	; (8006b78 <tcp_enqueue_flags+0x10c>)
 8006b08:	f002 ff74 	bl	80099f4 <iprintf>
  if (pcb->unsent == NULL) {
 8006b0c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006b0e:	bb4b      	cbnz	r3, 8006b64 <tcp_enqueue_flags+0xf8>
    pcb->unsent = seg;
 8006b10:	66a5      	str	r5, [r4, #104]	; 0x68
  pcb->unsent_oversize = 0;
 8006b12:	2300      	movs	r3, #0
 8006b14:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8006b18:	f1b8 0f00 	cmp.w	r8, #0
 8006b1c:	d002      	beq.n	8006b24 <tcp_enqueue_flags+0xb8>
    pcb->snd_lbb++;
 8006b1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b20:	3301      	adds	r3, #1
 8006b22:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 8006b24:	07f3      	lsls	r3, r6, #31
    pcb->flags |= TF_FIN;
 8006b26:	bf42      	ittt	mi
 8006b28:	7ea3      	ldrbmi	r3, [r4, #26]
 8006b2a:	f043 0320 	orrmi.w	r3, r3, #32
 8006b2e:	76a3      	strbmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8006b30:	6868      	ldr	r0, [r5, #4]
 8006b32:	f7fd fce3 	bl	80044fc <pbuf_clen>
 8006b36:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8006b3a:	4418      	add	r0, r3
 8006b3c:	b280      	uxth	r0, r0
 8006b3e:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8006b42:	2800      	cmp	r0, #0
 8006b44:	d0ac      	beq.n	8006aa0 <tcp_enqueue_flags+0x34>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8006b46:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006b48:	b948      	cbnz	r0, 8006b5e <tcp_enqueue_flags+0xf2>
 8006b4a:	6ea4      	ldr	r4, [r4, #104]	; 0x68
 8006b4c:	2c00      	cmp	r4, #0
 8006b4e:	d1a7      	bne.n	8006aa0 <tcp_enqueue_flags+0x34>
 8006b50:	4b07      	ldr	r3, [pc, #28]	; (8006b70 <tcp_enqueue_flags+0x104>)
 8006b52:	f240 326d 	movw	r2, #877	; 0x36d
 8006b56:	490c      	ldr	r1, [pc, #48]	; (8006b88 <tcp_enqueue_flags+0x11c>)
 8006b58:	4807      	ldr	r0, [pc, #28]	; (8006b78 <tcp_enqueue_flags+0x10c>)
 8006b5a:	f002 ff4b 	bl	80099f4 <iprintf>
  return ERR_OK;
 8006b5e:	2000      	movs	r0, #0
 8006b60:	e79e      	b.n	8006aa0 <tcp_enqueue_flags+0x34>
 8006b62:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	2a00      	cmp	r2, #0
 8006b68:	d1fb      	bne.n	8006b62 <tcp_enqueue_flags+0xf6>
    useg->next = seg;
 8006b6a:	601d      	str	r5, [r3, #0]
 8006b6c:	e7d1      	b.n	8006b12 <tcp_enqueue_flags+0xa6>
 8006b6e:	bf00      	nop
 8006b70:	0800e00b 	.word	0x0800e00b
 8006b74:	0800dea8 	.word	0x0800dea8
 8006b78:	0800d278 	.word	0x0800d278
 8006b7c:	0800defd 	.word	0x0800defd
 8006b80:	0800df36 	.word	0x0800df36
 8006b84:	0800df4e 	.word	0x0800df4e
 8006b88:	0800df78 	.word	0x0800df78

08006b8c <tcp_send_fin>:
{
 8006b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 8006b8e:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 8006b90:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 8006b92:	b934      	cbnz	r4, 8006ba2 <tcp_send_fin+0x16>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8006b94:	4628      	mov	r0, r5
}
 8006b96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	f7ff bf66 	b.w	8006a6c <tcp_enqueue_flags>
 8006ba0:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8006ba2:	6823      	ldr	r3, [r4, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1fb      	bne.n	8006ba0 <tcp_send_fin+0x14>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8006ba8:	6923      	ldr	r3, [r4, #16]
 8006baa:	8998      	ldrh	r0, [r3, #12]
 8006bac:	f7fd f872 	bl	8003c94 <lwip_htons>
 8006bb0:	f010 0707 	ands.w	r7, r0, #7
 8006bb4:	d1ee      	bne.n	8006b94 <tcp_send_fin+0x8>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8006bb6:	6923      	ldr	r3, [r4, #16]
 8006bb8:	2001      	movs	r0, #1
 8006bba:	899e      	ldrh	r6, [r3, #12]
 8006bbc:	f7fd f86a 	bl	8003c94 <lwip_htons>
 8006bc0:	6923      	ldr	r3, [r4, #16]
 8006bc2:	4330      	orrs	r0, r6
 8006bc4:	8198      	strh	r0, [r3, #12]
      pcb->flags |= TF_FIN;
 8006bc6:	7eab      	ldrb	r3, [r5, #26]
}
 8006bc8:	4638      	mov	r0, r7
      pcb->flags |= TF_FIN;
 8006bca:	f043 0320 	orr.w	r3, r3, #32
 8006bce:	76ab      	strb	r3, [r5, #26]
}
 8006bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006bd2 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8006bd2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006bd4:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8006bd6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8006bd8:	f7fd f85f 	bl	8003c9a <lwip_htonl>
 8006bdc:	2100      	movs	r1, #0
 8006bde:	4602      	mov	r2, r0
 8006be0:	4620      	mov	r0, r4
 8006be2:	f7ff ff07 	bl	80069f4 <tcp_output_alloc_header.constprop.1>
  if (p == NULL) {
 8006be6:	4606      	mov	r6, r0
 8006be8:	b940      	cbnz	r0, 8006bfc <tcp_send_empty_ack+0x2a>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8006bea:	f06f 0501 	mvn.w	r5, #1
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8006bee:	7ea3      	ldrb	r3, [r4, #26]
 8006bf0:	f043 0303 	orr.w	r3, r3, #3
 8006bf4:	76a3      	strb	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	b004      	add	sp, #16
 8006bfa:	bd70      	pop	{r4, r5, r6, pc}
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8006bfc:	1d25      	adds	r5, r4, #4
 8006bfe:	4628      	mov	r0, r5
 8006c00:	f001 f9f6 	bl	8007ff0 <ip4_route>
  if (netif == NULL) {
 8006c04:	b1a0      	cbz	r0, 8006c30 <tcp_send_empty_ack+0x5e>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8006c06:	2206      	movs	r2, #6
 8006c08:	9201      	str	r2, [sp, #4]
 8006c0a:	7a62      	ldrb	r2, [r4, #9]
 8006c0c:	9002      	str	r0, [sp, #8]
 8006c0e:	9200      	str	r2, [sp, #0]
 8006c10:	7aa3      	ldrb	r3, [r4, #10]
 8006c12:	462a      	mov	r2, r5
 8006c14:	4621      	mov	r1, r4
 8006c16:	4630      	mov	r0, r6
 8006c18:	f001 fb5e 	bl	80082d8 <ip4_output_if>
 8006c1c:	4605      	mov	r5, r0
  pbuf_free(p);
 8006c1e:	4630      	mov	r0, r6
 8006c20:	f7fd fab6 	bl	8004190 <pbuf_free>
 8006c24:	7ea3      	ldrb	r3, [r4, #26]
  if (err != ERR_OK) {
 8006c26:	b135      	cbz	r5, 8006c36 <tcp_send_empty_ack+0x64>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8006c28:	f043 0303 	orr.w	r3, r3, #3
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8006c2c:	76a3      	strb	r3, [r4, #26]
 8006c2e:	e7e2      	b.n	8006bf6 <tcp_send_empty_ack+0x24>
    err = ERR_RTE;
 8006c30:	f06f 0503 	mvn.w	r5, #3
 8006c34:	e7f3      	b.n	8006c1e <tcp_send_empty_ack+0x4c>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8006c36:	f023 0303 	bic.w	r3, r3, #3
 8006c3a:	e7f7      	b.n	8006c2c <tcp_send_empty_ack+0x5a>

08006c3c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8006c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8006c40:	7d03      	ldrb	r3, [r0, #20]
{
 8006c42:	b087      	sub	sp, #28
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8006c44:	2b01      	cmp	r3, #1
{
 8006c46:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8006c48:	d106      	bne.n	8006c58 <tcp_output+0x1c>
 8006c4a:	4ba5      	ldr	r3, [pc, #660]	; (8006ee0 <tcp_output+0x2a4>)
 8006c4c:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8006c50:	49a4      	ldr	r1, [pc, #656]	; (8006ee4 <tcp_output+0x2a8>)
 8006c52:	48a5      	ldr	r0, [pc, #660]	; (8006ee8 <tcp_output+0x2ac>)
 8006c54:	f002 fece 	bl	80099f4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8006c58:	4ba4      	ldr	r3, [pc, #656]	; (8006eec <tcp_output+0x2b0>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	42a3      	cmp	r3, r4
 8006c5e:	d04f      	beq.n	8006d00 <tcp_output+0xc4>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8006c60:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8006c64:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c

  seg = pcb->unsent;
 8006c68:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8006c6a:	429e      	cmp	r6, r3
 8006c6c:	bf28      	it	cs
 8006c6e:	461e      	movcs	r6, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8006c70:	7ea3      	ldrb	r3, [r4, #26]
 8006c72:	0799      	lsls	r1, r3, #30
 8006c74:	d510      	bpl.n	8006c98 <tcp_output+0x5c>
 8006c76:	b92d      	cbnz	r5, 8006c84 <tcp_output+0x48>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 8006c78:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 8006c7a:	b007      	add	sp, #28
 8006c7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 8006c80:	f7ff bfa7 	b.w	8006bd2 <tcp_send_empty_ack>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8006c84:	692b      	ldr	r3, [r5, #16]
 8006c86:	6858      	ldr	r0, [r3, #4]
 8006c88:	f7fd f807 	bl	8003c9a <lwip_htonl>
 8006c8c:	892b      	ldrh	r3, [r5, #8]
 8006c8e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006c90:	1a9b      	subs	r3, r3, r2
 8006c92:	4418      	add	r0, r3
     (seg == NULL ||
 8006c94:	42b0      	cmp	r0, r6
 8006c96:	d8ef      	bhi.n	8006c78 <tcp_output+0x3c>
  useg = pcb->unacked;
 8006c98:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
  if (useg != NULL) {
 8006c9a:	2f00      	cmp	r7, #0
 8006c9c:	d133      	bne.n	8006d06 <tcp_output+0xca>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8006c9e:	f104 0804 	add.w	r8, r4, #4
 8006ca2:	4640      	mov	r0, r8
 8006ca4:	f001 f9a4 	bl	8007ff0 <ip4_route>
  if (netif == NULL) {
 8006ca8:	4681      	mov	r9, r0
 8006caa:	2800      	cmp	r0, #0
 8006cac:	f000 813c 	beq.w	8006f28 <tcp_output+0x2ec>
  if (ip_addr_isany(&pcb->local_ip)) {
 8006cb0:	6823      	ldr	r3, [r4, #0]
 8006cb2:	b90b      	cbnz	r3, 8006cb8 <tcp_output+0x7c>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8006cb4:	6843      	ldr	r3, [r0, #4]
 8006cb6:	6023      	str	r3, [r4, #0]
  if (seg != NULL &&
 8006cb8:	b1cd      	cbz	r5, 8006cee <tcp_output+0xb2>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8006cba:	692b      	ldr	r3, [r5, #16]
 8006cbc:	6858      	ldr	r0, [r3, #4]
 8006cbe:	f7fc ffec 	bl	8003c9a <lwip_htonl>
 8006cc2:	892b      	ldrh	r3, [r5, #8]
 8006cc4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006cc6:	1a9b      	subs	r3, r3, r2
 8006cc8:	4418      	add	r0, r3
  if (seg != NULL &&
 8006cca:	42b0      	cmp	r0, r6
 8006ccc:	d96e      	bls.n	8006dac <tcp_output+0x170>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8006cce:	2e00      	cmp	r6, #0
 8006cd0:	d06c      	beq.n	8006dac <tcp_output+0x170>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8006cd2:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8006cd6:	42b3      	cmp	r3, r6
 8006cd8:	d168      	bne.n	8006dac <tcp_output+0x170>
 8006cda:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d165      	bne.n	8006dac <tcp_output+0x170>
    if (pcb->persist_backoff == 0) {
 8006ce0:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8006ce4:	b91b      	cbnz	r3, 8006cee <tcp_output+0xb2>
      pcb->persist_cnt = 0;
 8006ce6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cea:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
  if (pcb->unsent == NULL) {
 8006cee:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006cf0:	b913      	cbnz	r3, 8006cf8 <tcp_output+0xbc>
    pcb->unsent_oversize = 0;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->flags &= ~TF_NAGLEMEMERR;
 8006cf8:	7ea3      	ldrb	r3, [r4, #26]
 8006cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cfe:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 8006d00:	2000      	movs	r0, #0
 8006d02:	e0ea      	b.n	8006eda <tcp_output+0x29e>
 8006d04:	461f      	mov	r7, r3
    for (; useg->next != NULL; useg = useg->next);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1fb      	bne.n	8006d04 <tcp_output+0xc8>
 8006d0c:	e7c7      	b.n	8006c9e <tcp_output+0x62>
    pcb->unsent = seg->next;
 8006d0e:	682b      	ldr	r3, [r5, #0]
 8006d10:	66a3      	str	r3, [r4, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8006d12:	7d23      	ldrb	r3, [r4, #20]
 8006d14:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8006d16:	bf1e      	ittt	ne
 8006d18:	7ea3      	ldrbne	r3, [r4, #26]
 8006d1a:	f023 0303 	bicne.w	r3, r3, #3
 8006d1e:	76a3      	strbne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8006d20:	692b      	ldr	r3, [r5, #16]
 8006d22:	6858      	ldr	r0, [r3, #4]
 8006d24:	f7fc ffb9 	bl	8003c9a <lwip_htonl>
 8006d28:	6929      	ldr	r1, [r5, #16]
 8006d2a:	4683      	mov	fp, r0
 8006d2c:	8988      	ldrh	r0, [r1, #12]
 8006d2e:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8006d32:	f7fc ffaf 	bl	8003c94 <lwip_htons>
 8006d36:	f010 0003 	ands.w	r0, r0, #3
 8006d3a:	bf18      	it	ne
 8006d3c:	2001      	movne	r0, #1
 8006d3e:	eb0b 030a 	add.w	r3, fp, sl
 8006d42:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8006d44:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 8006d46:	692a      	ldr	r2, [r5, #16]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8006d48:	1a1b      	subs	r3, r3, r0
 8006d4a:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 8006d4c:	bfb8      	it	lt
 8006d4e:	64e0      	strlt	r0, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 8006d50:	8990      	ldrh	r0, [r2, #12]
 8006d52:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8006d56:	f7fc ff9d 	bl	8003c94 <lwip_htons>
 8006d5a:	f010 0003 	ands.w	r0, r0, #3
 8006d5e:	bf18      	it	ne
 8006d60:	2001      	movne	r0, #1
 8006d62:	eb10 0f0a 	cmn.w	r0, sl
 8006d66:	f000 80db 	beq.w	8006f20 <tcp_output+0x2e4>
      seg->next = NULL;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 8006d6e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006d70:	b913      	cbnz	r3, 8006d78 <tcp_output+0x13c>
        pcb->unacked = seg;
 8006d72:	66e5      	str	r5, [r4, #108]	; 0x6c
          useg->next = seg;
 8006d74:	462f      	mov	r7, r5
 8006d76:	e016      	b.n	8006da6 <tcp_output+0x16a>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8006d78:	692b      	ldr	r3, [r5, #16]
 8006d7a:	6858      	ldr	r0, [r3, #4]
 8006d7c:	f7fc ff8d 	bl	8003c9a <lwip_htonl>
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	4682      	mov	sl, r0
 8006d84:	6850      	ldr	r0, [r2, #4]
 8006d86:	f7fc ff88 	bl	8003c9a <lwip_htonl>
 8006d8a:	ebaa 0000 	sub.w	r0, sl, r0
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	f280 80c4 	bge.w	8006f1c <tcp_output+0x2e0>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8006d94:	f104 036c 	add.w	r3, r4, #108	; 0x6c
          while (*cur_seg &&
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	2a00      	cmp	r2, #0
 8006d9c:	f040 80ac 	bne.w	8006ef8 <tcp_output+0x2bc>
          seg->next = (*cur_seg);
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 8006da4:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 8006da6:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  while (seg != NULL &&
 8006da8:	2d00      	cmp	r5, #0
 8006daa:	d0a2      	beq.n	8006cf2 <tcp_output+0xb6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8006dac:	692b      	ldr	r3, [r5, #16]
 8006dae:	6858      	ldr	r0, [r3, #4]
 8006db0:	f7fc ff73 	bl	8003c9a <lwip_htonl>
 8006db4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006db6:	1ac0      	subs	r0, r0, r3
 8006db8:	892b      	ldrh	r3, [r5, #8]
 8006dba:	4418      	add	r0, r3
  while (seg != NULL &&
 8006dbc:	42b0      	cmp	r0, r6
 8006dbe:	d896      	bhi.n	8006cee <tcp_output+0xb2>
    LWIP_ASSERT("RST not expected here!",
 8006dc0:	692b      	ldr	r3, [r5, #16]
 8006dc2:	8998      	ldrh	r0, [r3, #12]
 8006dc4:	f7fc ff66 	bl	8003c94 <lwip_htons>
 8006dc8:	0742      	lsls	r2, r0, #29
 8006dca:	d506      	bpl.n	8006dda <tcp_output+0x19e>
 8006dcc:	4b44      	ldr	r3, [pc, #272]	; (8006ee0 <tcp_output+0x2a4>)
 8006dce:	f240 4246 	movw	r2, #1094	; 0x446
 8006dd2:	4947      	ldr	r1, [pc, #284]	; (8006ef0 <tcp_output+0x2b4>)
 8006dd4:	4844      	ldr	r0, [pc, #272]	; (8006ee8 <tcp_output+0x2ac>)
 8006dd6:	f002 fe0d 	bl	80099f4 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8006dda:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006ddc:	b1b3      	cbz	r3, 8006e0c <tcp_output+0x1d0>
 8006dde:	7ea2      	ldrb	r2, [r4, #26]
 8006de0:	f012 0f44 	tst.w	r2, #68	; 0x44
 8006de4:	d112      	bne.n	8006e0c <tcp_output+0x1d0>
 8006de6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006de8:	b12b      	cbz	r3, 8006df6 <tcp_output+0x1ba>
 8006dea:	6819      	ldr	r1, [r3, #0]
 8006dec:	b971      	cbnz	r1, 8006e0c <tcp_output+0x1d0>
 8006dee:	8919      	ldrh	r1, [r3, #8]
 8006df0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8006df2:	4299      	cmp	r1, r3
 8006df4:	d20a      	bcs.n	8006e0c <tcp_output+0x1d0>
 8006df6:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8006dfa:	b13b      	cbz	r3, 8006e0c <tcp_output+0x1d0>
 8006dfc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8006e00:	2b08      	cmp	r3, #8
 8006e02:	d803      	bhi.n	8006e0c <tcp_output+0x1d0>
 8006e04:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 8006e08:	f43f af71 	beq.w	8006cee <tcp_output+0xb2>
    if (pcb->state != SYN_SENT) {
 8006e0c:	7d23      	ldrb	r3, [r4, #20]
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d009      	beq.n	8006e26 <tcp_output+0x1ea>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8006e12:	692b      	ldr	r3, [r5, #16]
 8006e14:	2010      	movs	r0, #16
 8006e16:	f8b3 a00c 	ldrh.w	sl, [r3, #12]
 8006e1a:	f7fc ff3b 	bl	8003c94 <lwip_htons>
 8006e1e:	692a      	ldr	r2, [r5, #16]
 8006e20:	ea4a 0000 	orr.w	r0, sl, r0
 8006e24:	8190      	strh	r0, [r2, #12]
    seg->oversize_left = 0;
 8006e26:	2300      	movs	r3, #0
 8006e28:	816b      	strh	r3, [r5, #10]
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8006e2a:	686b      	ldr	r3, [r5, #4]
 8006e2c:	89db      	ldrh	r3, [r3, #14]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	f47f af6d 	bne.w	8006d0e <tcp_output+0xd2>
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8006e34:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006e36:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006e3a:	f7fc ff2e 	bl	8003c9a <lwip_htonl>
 8006e3e:	f8ca 0008 	str.w	r0, [sl, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8006e42:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8006e44:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006e48:	f7fc ff24 	bl	8003c94 <lwip_htons>
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8006e4c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006e4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8006e50:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8006e54:	4413      	add	r3, r2
 8006e56:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8006e58:	7b2b      	ldrb	r3, [r5, #12]
 8006e5a:	07db      	lsls	r3, r3, #31
 8006e5c:	d50c      	bpl.n	8006e78 <tcp_output+0x23c>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8006e5e:	4641      	mov	r1, r8
 8006e60:	f44f 7006 	mov.w	r0, #536	; 0x218
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8006e64:	f8d5 a010 	ldr.w	sl, [r5, #16]
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8006e68:	f7fe fa9a 	bl	80053a0 <tcp_eff_send_mss_impl>
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8006e6c:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8006e70:	f7fc ff13 	bl	8003c9a <lwip_htonl>
 8006e74:	f8ca 0014 	str.w	r0, [sl, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8006e78:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8006e7c:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 8006e7e:	bfbc      	itt	lt
 8006e80:	2300      	movlt	r3, #0
 8006e82:	8623      	strhlt	r3, [r4, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8006e84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e86:	b93b      	cbnz	r3, 8006e98 <tcp_output+0x25c>
    pcb->rttest = tcp_ticks;
 8006e88:	4a1a      	ldr	r2, [pc, #104]	; (8006ef4 <tcp_output+0x2b8>)
 8006e8a:	692b      	ldr	r3, [r5, #16]
 8006e8c:	6812      	ldr	r2, [r2, #0]
 8006e8e:	6362      	str	r2, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8006e90:	6858      	ldr	r0, [r3, #4]
 8006e92:	f7fc ff02 	bl	8003c9a <lwip_htonl>
 8006e96:	63a0      	str	r0, [r4, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8006e98:	6868      	ldr	r0, [r5, #4]
 8006e9a:	692a      	ldr	r2, [r5, #16]
 8006e9c:	6843      	ldr	r3, [r0, #4]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8006e9e:	8941      	ldrh	r1, [r0, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 8006ea4:	1ac9      	subs	r1, r1, r3
 8006ea6:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 8006ea8:	8901      	ldrh	r1, [r0, #8]

  seg->p->payload = seg->tcphdr;
 8006eaa:	6042      	str	r2, [r0, #4]
  seg->p->tot_len -= len;
 8006eac:	1acb      	subs	r3, r1, r3
 8006eae:	8103      	strh	r3, [r0, #8]

  seg->tcphdr->chksum = 0;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	7413      	strb	r3, [r2, #16]
 8006eb4:	7453      	strb	r3, [r2, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8006eb6:	2206      	movs	r2, #6
 8006eb8:	9201      	str	r2, [sp, #4]
 8006eba:	7a62      	ldrb	r2, [r4, #9]
 8006ebc:	7aa3      	ldrb	r3, [r4, #10]
 8006ebe:	9200      	str	r2, [sp, #0]
 8006ec0:	f8cd 9008 	str.w	r9, [sp, #8]
 8006ec4:	4642      	mov	r2, r8
 8006ec6:	4621      	mov	r1, r4
 8006ec8:	f001 fa06 	bl	80082d8 <ip4_output_if>
    if (err != ERR_OK) {
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	f43f af1e 	beq.w	8006d0e <tcp_output+0xd2>
      pcb->flags |= TF_NAGLEMEMERR;
 8006ed2:	7ea3      	ldrb	r3, [r4, #26]
 8006ed4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ed8:	76a3      	strb	r3, [r4, #26]
}
 8006eda:	b007      	add	sp, #28
 8006edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee0:	0800e00b 	.word	0x0800e00b
 8006ee4:	0800dfa0 	.word	0x0800dfa0
 8006ee8:	0800d278 	.word	0x0800d278
 8006eec:	200060fc 	.word	0x200060fc
 8006ef0:	0800dfc6 	.word	0x0800dfc6
 8006ef4:	200060ec 	.word	0x200060ec
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8006ef8:	6912      	ldr	r2, [r2, #16]
 8006efa:	9305      	str	r3, [sp, #20]
 8006efc:	6850      	ldr	r0, [r2, #4]
 8006efe:	f7fc fecc 	bl	8003c9a <lwip_htonl>
 8006f02:	6929      	ldr	r1, [r5, #16]
 8006f04:	4682      	mov	sl, r0
 8006f06:	6848      	ldr	r0, [r1, #4]
 8006f08:	f7fc fec7 	bl	8003c9a <lwip_htonl>
 8006f0c:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 8006f10:	2800      	cmp	r0, #0
 8006f12:	9b05      	ldr	r3, [sp, #20]
 8006f14:	f6bf af44 	bge.w	8006da0 <tcp_output+0x164>
              cur_seg = &((*cur_seg)->next );
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	e73d      	b.n	8006d98 <tcp_output+0x15c>
          useg->next = seg;
 8006f1c:	603d      	str	r5, [r7, #0]
 8006f1e:	e729      	b.n	8006d74 <tcp_output+0x138>
      tcp_seg_free(seg);
 8006f20:	4628      	mov	r0, r5
 8006f22:	f7fd fd27 	bl	8004974 <tcp_seg_free>
 8006f26:	e73e      	b.n	8006da6 <tcp_output+0x16a>
    return ERR_RTE;
 8006f28:	f06f 0003 	mvn.w	r0, #3
 8006f2c:	e7d5      	b.n	8006eda <tcp_output+0x29e>
 8006f2e:	bf00      	nop

08006f30 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8006f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f34:	4681      	mov	r9, r0
 8006f36:	b085      	sub	sp, #20
 8006f38:	460e      	mov	r6, r1
 8006f3a:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8006f3c:	2114      	movs	r1, #20
 8006f3e:	2200      	movs	r2, #0
 8006f40:	2001      	movs	r0, #1
{
 8006f42:	461f      	mov	r7, r3
 8006f44:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 8006f48:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8006f4c:	f7fd f982 	bl	8004254 <pbuf_alloc>
  if (p == NULL) {
 8006f50:	4605      	mov	r5, r0
 8006f52:	2800      	cmp	r0, #0
 8006f54:	d03c      	beq.n	8006fd0 <tcp_rst+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8006f56:	8943      	ldrh	r3, [r0, #10]
 8006f58:	2b13      	cmp	r3, #19
 8006f5a:	d806      	bhi.n	8006f6a <tcp_rst+0x3a>
 8006f5c:	4b1e      	ldr	r3, [pc, #120]	; (8006fd8 <tcp_rst+0xa8>)
 8006f5e:	f240 524d 	movw	r2, #1357	; 0x54d
 8006f62:	491e      	ldr	r1, [pc, #120]	; (8006fdc <tcp_rst+0xac>)
 8006f64:	481e      	ldr	r0, [pc, #120]	; (8006fe0 <tcp_rst+0xb0>)
 8006f66:	f002 fd45 	bl	80099f4 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  tcphdr->src = lwip_htons(local_port);
 8006f6a:	4658      	mov	r0, fp
  tcphdr = (struct tcp_hdr *)p->payload;
 8006f6c:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 8006f6e:	f7fc fe91 	bl	8003c94 <lwip_htons>
 8006f72:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8006f74:	4650      	mov	r0, sl
 8006f76:	f7fc fe8d 	bl	8003c94 <lwip_htons>
 8006f7a:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8006f7c:	4648      	mov	r0, r9
 8006f7e:	f7fc fe8c 	bl	8003c9a <lwip_htonl>
 8006f82:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8006f84:	4630      	mov	r0, r6
 8006f86:	f7fc fe88 	bl	8003c9a <lwip_htonl>
 8006f8a:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8006f8c:	f245 0014 	movw	r0, #20500	; 0x5014
 8006f90:	f7fc fe80 	bl	8003c94 <lwip_htons>
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8006f94:	2308      	movs	r3, #8
 8006f96:	2600      	movs	r6, #0
 8006f98:	73a3      	strb	r3, [r4, #14]
 8006f9a:	2360      	movs	r3, #96	; 0x60
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8006f9c:	81a0      	strh	r0, [r4, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8006f9e:	73e3      	strb	r3, [r4, #15]
#endif
  tcphdr->chksum = 0;
 8006fa0:	7426      	strb	r6, [r4, #16]
 8006fa2:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
 8006fa4:	74a6      	strb	r6, [r4, #18]
 8006fa6:	74e6      	strb	r6, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8006fa8:	4638      	mov	r0, r7
 8006faa:	f001 f821 	bl	8007ff0 <ip4_route>
  if (netif != NULL) {
 8006fae:	b148      	cbz	r0, 8006fc4 <tcp_rst+0x94>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8006fb0:	2306      	movs	r3, #6
 8006fb2:	9002      	str	r0, [sp, #8]
 8006fb4:	e9cd 6300 	strd	r6, r3, [sp]
 8006fb8:	463a      	mov	r2, r7
 8006fba:	23ff      	movs	r3, #255	; 0xff
 8006fbc:	4641      	mov	r1, r8
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	f001 f98a 	bl	80082d8 <ip4_output_if>
  }
  pbuf_free(p);
 8006fc4:	4628      	mov	r0, r5
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8006fc6:	b005      	add	sp, #20
 8006fc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8006fcc:	f7fd b8e0 	b.w	8004190 <pbuf_free>
}
 8006fd0:	b005      	add	sp, #20
 8006fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fd6:	bf00      	nop
 8006fd8:	0800e00b 	.word	0x0800e00b
 8006fdc:	0800dfdd 	.word	0x0800dfdd
 8006fe0:	0800d278 	.word	0x0800d278

08006fe4 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8006fe4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006fe6:	b1ba      	cbz	r2, 8007018 <tcp_rexmit_rto+0x34>
 8006fe8:	4613      	mov	r3, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8006fea:	6819      	ldr	r1, [r3, #0]
 8006fec:	b991      	cbnz	r1, 8007014 <tcp_rexmit_rto+0x30>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8006fee:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8006ff0:	6019      	str	r1, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 8006ff2:	b911      	cbnz	r1, 8006ffa <tcp_rexmit_rto+0x16>
    pcb->unsent_oversize = seg->oversize_left;
 8006ff4:	895b      	ldrh	r3, [r3, #10]
 8006ff6:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8006ffa:	2300      	movs	r3, #0
  pcb->unsent = pcb->unacked;
 8006ffc:	6682      	str	r2, [r0, #104]	; 0x68

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8006ffe:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
  pcb->unacked = NULL;
 8007002:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (pcb->nrtx < 0xFF) {
 8007004:	2aff      	cmp	r2, #255	; 0xff
    ++pcb->nrtx;
 8007006:	bf1c      	itt	ne
 8007008:	3201      	addne	r2, #1
 800700a:	f880 2042 	strbne.w	r2, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800700e:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8007010:	f7ff be14 	b.w	8006c3c <tcp_output>
 8007014:	460b      	mov	r3, r1
 8007016:	e7e8      	b.n	8006fea <tcp_rexmit_rto+0x6>
}
 8007018:	4770      	bx	lr

0800701a <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800701a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800701c:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
{
 800701e:	4604      	mov	r4, r0
  if (pcb->unacked == NULL) {
 8007020:	b1ad      	cbz	r5, 800704e <tcp_rexmit+0x34>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 8007022:	682b      	ldr	r3, [r5, #0]

  cur_seg = &(pcb->unsent);
 8007024:	f100 0668 	add.w	r6, r0, #104	; 0x68
  pcb->unacked = seg->next;
 8007028:	66c3      	str	r3, [r0, #108]	; 0x6c
  while (*cur_seg &&
 800702a:	6833      	ldr	r3, [r6, #0]
 800702c:	b983      	cbnz	r3, 8007050 <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 800702e:	6833      	ldr	r3, [r6, #0]
 8007030:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 8007032:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	b90b      	cbnz	r3, 800703c <tcp_rexmit+0x22>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8007038:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800703c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8007040:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 8007042:	bf1c      	itt	ne
 8007044:	3301      	addne	r3, #1
 8007046:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800704a:	2300      	movs	r3, #0
 800704c:	6363      	str	r3, [r4, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800704e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	6858      	ldr	r0, [r3, #4]
 8007054:	f7fc fe21 	bl	8003c9a <lwip_htonl>
 8007058:	692b      	ldr	r3, [r5, #16]
 800705a:	4607      	mov	r7, r0
 800705c:	6858      	ldr	r0, [r3, #4]
 800705e:	f7fc fe1c 	bl	8003c9a <lwip_htonl>
 8007062:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 8007064:	2800      	cmp	r0, #0
 8007066:	dae2      	bge.n	800702e <tcp_rexmit+0x14>
      cur_seg = &((*cur_seg)->next );
 8007068:	6836      	ldr	r6, [r6, #0]
 800706a:	e7de      	b.n	800702a <tcp_rexmit+0x10>

0800706c <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800706c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 800706e:	b510      	push	{r4, lr}
 8007070:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8007072:	b30b      	cbz	r3, 80070b8 <tcp_rexmit_fast+0x4c>
 8007074:	7e83      	ldrb	r3, [r0, #26]
 8007076:	075b      	lsls	r3, r3, #29
 8007078:	d41e      	bmi.n	80070b8 <tcp_rexmit_fast+0x4c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800707a:	f7ff ffce 	bl	800701a <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800707e:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8007082:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8007086:	4293      	cmp	r3, r2
 8007088:	bf38      	it	cc
 800708a:	085a      	lsrcc	r2, r3, #1

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800708c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800708e:	bf28      	it	cs
 8007090:	0852      	lsrcs	r2, r2, #1
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8007092:	0059      	lsls	r1, r3, #1
 8007094:	428a      	cmp	r2, r1
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8007096:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800709a:	bf38      	it	cc
 800709c:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80070a0:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 80070a4:	440b      	add	r3, r1
 80070a6:	4413      	add	r3, r2
 80070a8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 80070ac:	7ea3      	ldrb	r3, [r4, #26]
 80070ae:	f043 0304 	orr.w	r3, r3, #4
 80070b2:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 80070b4:	2300      	movs	r3, #0
 80070b6:	8623      	strh	r3, [r4, #48]	; 0x30
  }
}
 80070b8:	bd10      	pop	{r4, pc}

080070ba <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80070ba:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80070bc:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 80070be:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80070c0:	3801      	subs	r0, #1
 80070c2:	f7fc fdea 	bl	8003c9a <lwip_htonl>
 80070c6:	2100      	movs	r1, #0
 80070c8:	4602      	mov	r2, r0
 80070ca:	4620      	mov	r0, r4
 80070cc:	f7ff fc92 	bl	80069f4 <tcp_output_alloc_header.constprop.1>
  if (p == NULL) {
 80070d0:	4605      	mov	r5, r0
 80070d2:	b1c8      	cbz	r0, 8007108 <tcp_keepalive+0x4e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80070d4:	1d26      	adds	r6, r4, #4
 80070d6:	4630      	mov	r0, r6
 80070d8:	f000 ff8a 	bl	8007ff0 <ip4_route>
  if (netif == NULL) {
 80070dc:	b188      	cbz	r0, 8007102 <tcp_keepalive+0x48>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 80070de:	2200      	movs	r2, #0
 80070e0:	2106      	movs	r1, #6
 80070e2:	7aa3      	ldrb	r3, [r4, #10]
 80070e4:	e9cd 2100 	strd	r2, r1, [sp]
 80070e8:	9002      	str	r0, [sp, #8]
 80070ea:	4621      	mov	r1, r4
 80070ec:	4632      	mov	r2, r6
 80070ee:	4628      	mov	r0, r5
 80070f0:	f001 f8f2 	bl	80082d8 <ip4_output_if>
 80070f4:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80070f6:	4628      	mov	r0, r5
 80070f8:	f7fd f84a 	bl	8004190 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 80070fc:	4620      	mov	r0, r4
 80070fe:	b004      	add	sp, #16
 8007100:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 8007102:	f06f 0403 	mvn.w	r4, #3
 8007106:	e7f6      	b.n	80070f6 <tcp_keepalive+0x3c>
    return ERR_MEM;
 8007108:	f04f 34ff 	mov.w	r4, #4294967295
 800710c:	e7f6      	b.n	80070fc <tcp_keepalive+0x42>

0800710e <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800710e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8007112:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 8007114:	4606      	mov	r6, r0

  if (seg == NULL) {
 8007116:	b914      	cbnz	r4, 800711e <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 8007118:	6e84      	ldr	r4, [r0, #104]	; 0x68
  }
  if (seg == NULL) {
 800711a:	2c00      	cmp	r4, #0
 800711c:	d041      	beq.n	80071a2 <tcp_zero_window_probe+0x94>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800711e:	6923      	ldr	r3, [r4, #16]
 8007120:	8998      	ldrh	r0, [r3, #12]
 8007122:	f7fc fdb7 	bl	8003c94 <lwip_htons>
 8007126:	f010 0501 	ands.w	r5, r0, #1
 800712a:	bf18      	it	ne
 800712c:	8925      	ldrhne	r5, [r4, #8]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800712e:	6923      	ldr	r3, [r4, #16]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8007130:	bf1c      	itt	ne
 8007132:	fab5 f585 	clzne	r5, r5
 8007136:	096d      	lsrne	r5, r5, #5
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8007138:	685a      	ldr	r2, [r3, #4]
 800713a:	f085 0101 	eor.w	r1, r5, #1
 800713e:	4630      	mov	r0, r6
 8007140:	f7ff fc58 	bl	80069f4 <tcp_output_alloc_header.constprop.1>
  if (p == NULL) {
 8007144:	4607      	mov	r7, r0
 8007146:	2800      	cmp	r0, #0
 8007148:	d03d      	beq.n	80071c6 <tcp_zero_window_probe+0xb8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800714a:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800714e:	b365      	cbz	r5, 80071aa <tcp_zero_window_probe+0x9c>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8007150:	2011      	movs	r0, #17
 8007152:	f8b8 500c 	ldrh.w	r5, [r8, #12]
 8007156:	f7fc fd9d 	bl	8003c94 <lwip_htons>
 800715a:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 800715e:	b2ad      	uxth	r5, r5
 8007160:	4328      	orrs	r0, r5
 8007162:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8007166:	6923      	ldr	r3, [r4, #16]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8007168:	1d34      	adds	r4, r6, #4
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800716a:	6858      	ldr	r0, [r3, #4]
 800716c:	f7fc fd95 	bl	8003c9a <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8007170:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8007172:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8007174:	1a1b      	subs	r3, r3, r0
 8007176:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 8007178:	bfb8      	it	lt
 800717a:	64f0      	strlt	r0, [r6, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800717c:	4620      	mov	r0, r4
 800717e:	f000 ff37 	bl	8007ff0 <ip4_route>
  if (netif == NULL) {
 8007182:	b1e8      	cbz	r0, 80071c0 <tcp_zero_window_probe+0xb2>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8007184:	2200      	movs	r2, #0
 8007186:	2106      	movs	r1, #6
 8007188:	9002      	str	r0, [sp, #8]
 800718a:	e9cd 2100 	strd	r2, r1, [sp]
 800718e:	7ab3      	ldrb	r3, [r6, #10]
 8007190:	4622      	mov	r2, r4
 8007192:	4631      	mov	r1, r6
 8007194:	4638      	mov	r0, r7
 8007196:	f001 f89f 	bl	80082d8 <ip4_output_if>
 800719a:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800719c:	4638      	mov	r0, r7
 800719e:	f7fc fff7 	bl	8004190 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 80071a2:	4620      	mov	r0, r4
 80071a4:	b004      	add	sp, #16
 80071a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80071aa:	6860      	ldr	r0, [r4, #4]
 80071ac:	8922      	ldrh	r2, [r4, #8]
 80071ae:	8903      	ldrh	r3, [r0, #8]
 80071b0:	f108 0114 	add.w	r1, r8, #20
 80071b4:	1a9b      	subs	r3, r3, r2
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	2201      	movs	r2, #1
 80071ba:	f7fd fa85 	bl	80046c8 <pbuf_copy_partial>
 80071be:	e7d2      	b.n	8007166 <tcp_zero_window_probe+0x58>
    err = ERR_RTE;
 80071c0:	f06f 0403 	mvn.w	r4, #3
 80071c4:	e7ea      	b.n	800719c <tcp_zero_window_probe+0x8e>
    return ERR_MEM;
 80071c6:	f04f 34ff 	mov.w	r4, #4294967295
 80071ca:	e7ea      	b.n	80071a2 <tcp_zero_window_probe+0x94>

080071cc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80071cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071d0:	4605      	mov	r5, r0
 80071d2:	460f      	mov	r7, r1
 80071d4:	4616      	mov	r6, r2
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80071d6:	4921      	ldr	r1, [pc, #132]	; (800725c <sys_timeout+0x90>)
 80071d8:	22d2      	movs	r2, #210	; 0xd2
 80071da:	2007      	movs	r0, #7
 80071dc:	f7fc fe52 	bl	8003e84 <memp_malloc_fn>
  if (timeout == NULL) {
 80071e0:	4604      	mov	r4, r0
 80071e2:	b938      	cbnz	r0, 80071f4 <sys_timeout+0x28>
        t->next = timeout;
        break;
      }
    }
  }
}
 80071e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80071e8:	4b1c      	ldr	r3, [pc, #112]	; (800725c <sys_timeout+0x90>)
 80071ea:	22d4      	movs	r2, #212	; 0xd4
 80071ec:	491c      	ldr	r1, [pc, #112]	; (8007260 <sys_timeout+0x94>)
 80071ee:	481d      	ldr	r0, [pc, #116]	; (8007264 <sys_timeout+0x98>)
 80071f0:	f002 bc00 	b.w	80099f4 <iprintf>
  now = sys_now();
 80071f4:	f7fc fcf6 	bl	8003be4 <sys_now>
  if (next_timeout == NULL) {
 80071f8:	4a1b      	ldr	r2, [pc, #108]	; (8007268 <sys_timeout+0x9c>)
 80071fa:	491c      	ldr	r1, [pc, #112]	; (800726c <sys_timeout+0xa0>)
 80071fc:	6813      	ldr	r3, [r2, #0]
 80071fe:	b95b      	cbnz	r3, 8007218 <sys_timeout+0x4c>
    timeouts_last_time = now;
 8007200:	6008      	str	r0, [r1, #0]
    diff = 0;
 8007202:	4618      	mov	r0, r3
  timeout->next = NULL;
 8007204:	2100      	movs	r1, #0
  timeout->time = msecs + diff;
 8007206:	4428      	add	r0, r5
  timeout->next = NULL;
 8007208:	6021      	str	r1, [r4, #0]
  timeout->arg = arg;
 800720a:	e9c4 7602 	strd	r7, r6, [r4, #8]
  timeout->time = msecs + diff;
 800720e:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 8007210:	b92b      	cbnz	r3, 800721e <sys_timeout+0x52>
    next_timeout = timeout;
 8007212:	6014      	str	r4, [r2, #0]
}
 8007214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    diff = now - timeouts_last_time;
 8007218:	6809      	ldr	r1, [r1, #0]
 800721a:	1a40      	subs	r0, r0, r1
 800721c:	e7f2      	b.n	8007204 <sys_timeout+0x38>
  if (next_timeout->time > msecs) {
 800721e:	6859      	ldr	r1, [r3, #4]
 8007220:	42a9      	cmp	r1, r5
 8007222:	d903      	bls.n	800722c <sys_timeout+0x60>
    next_timeout->time -= msecs;
 8007224:	1b4d      	subs	r5, r1, r5
 8007226:	605d      	str	r5, [r3, #4]
    timeout->next = next_timeout;
 8007228:	6023      	str	r3, [r4, #0]
 800722a:	e7f2      	b.n	8007212 <sys_timeout+0x46>
 800722c:	4618      	mov	r0, r3
      timeout->time -= t->time;
 800722e:	6841      	ldr	r1, [r0, #4]
 8007230:	6862      	ldr	r2, [r4, #4]
 8007232:	1a52      	subs	r2, r2, r1
      if (t->next == NULL || t->next->time > timeout->time) {
 8007234:	6801      	ldr	r1, [r0, #0]
      timeout->time -= t->time;
 8007236:	6062      	str	r2, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8007238:	b139      	cbz	r1, 800724a <sys_timeout+0x7e>
 800723a:	684e      	ldr	r6, [r1, #4]
 800723c:	42b2      	cmp	r2, r6
 800723e:	d301      	bcc.n	8007244 <sys_timeout+0x78>
 8007240:	4608      	mov	r0, r1
 8007242:	e7f4      	b.n	800722e <sys_timeout+0x62>
          t->next->time -= timeout->time;
 8007244:	1ab2      	subs	r2, r6, r2
 8007246:	604a      	str	r2, [r1, #4]
 8007248:	e004      	b.n	8007254 <sys_timeout+0x88>
        } else if (timeout->time > msecs) {
 800724a:	42aa      	cmp	r2, r5
 800724c:	d902      	bls.n	8007254 <sys_timeout+0x88>
          timeout->time = msecs + next_timeout->time;
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	441d      	add	r5, r3
 8007252:	6065      	str	r5, [r4, #4]
        timeout->next = t->next;
 8007254:	6021      	str	r1, [r4, #0]
        t->next = timeout;
 8007256:	6004      	str	r4, [r0, #0]
        break;
 8007258:	e7dc      	b.n	8007214 <sys_timeout+0x48>
 800725a:	bf00      	nop
 800725c:	0800e06c 	.word	0x0800e06c
 8007260:	0800e0a0 	.word	0x0800e0a0
 8007264:	0800d278 	.word	0x0800d278
 8007268:	20000d64 	.word	0x20000d64
 800726c:	20000d6c 	.word	0x20000d6c

08007270 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8007270:	4b08      	ldr	r3, [pc, #32]	; (8007294 <tcp_timer_needed+0x24>)
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	b962      	cbnz	r2, 8007290 <tcp_timer_needed+0x20>
 8007276:	4a08      	ldr	r2, [pc, #32]	; (8007298 <tcp_timer_needed+0x28>)
 8007278:	6812      	ldr	r2, [r2, #0]
 800727a:	b912      	cbnz	r2, 8007282 <tcp_timer_needed+0x12>
 800727c:	4a07      	ldr	r2, [pc, #28]	; (800729c <tcp_timer_needed+0x2c>)
 800727e:	6812      	ldr	r2, [r2, #0]
 8007280:	b132      	cbz	r2, 8007290 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 8007282:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8007284:	4906      	ldr	r1, [pc, #24]	; (80072a0 <tcp_timer_needed+0x30>)
    tcpip_tcp_timer_active = 1;
 8007286:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8007288:	20fa      	movs	r0, #250	; 0xfa
 800728a:	2200      	movs	r2, #0
 800728c:	f7ff bf9e 	b.w	80071cc <sys_timeout>
}
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	20000d68 	.word	0x20000d68
 8007298:	200060e8 	.word	0x200060e8
 800729c:	200060f8 	.word	0x200060f8
 80072a0:	080072a5 	.word	0x080072a5

080072a4 <tcpip_tcp_timer>:
{
 80072a4:	b508      	push	{r3, lr}
  tcp_tmr();
 80072a6:	f7fd ff1d 	bl	80050e4 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80072aa:	4b08      	ldr	r3, [pc, #32]	; (80072cc <tcpip_tcp_timer+0x28>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	b913      	cbnz	r3, 80072b6 <tcpip_tcp_timer+0x12>
 80072b0:	4b07      	ldr	r3, [pc, #28]	; (80072d0 <tcpip_tcp_timer+0x2c>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	b133      	cbz	r3, 80072c4 <tcpip_tcp_timer+0x20>
}
 80072b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80072ba:	2200      	movs	r2, #0
 80072bc:	4905      	ldr	r1, [pc, #20]	; (80072d4 <tcpip_tcp_timer+0x30>)
 80072be:	20fa      	movs	r0, #250	; 0xfa
 80072c0:	f7ff bf84 	b.w	80071cc <sys_timeout>
    tcpip_tcp_timer_active = 0;
 80072c4:	4a04      	ldr	r2, [pc, #16]	; (80072d8 <tcpip_tcp_timer+0x34>)
 80072c6:	6013      	str	r3, [r2, #0]
}
 80072c8:	bd08      	pop	{r3, pc}
 80072ca:	bf00      	nop
 80072cc:	200060e8 	.word	0x200060e8
 80072d0:	200060f8 	.word	0x200060f8
 80072d4:	080072a5 	.word	0x080072a5
 80072d8:	20000d68 	.word	0x20000d68

080072dc <sys_timeouts_init>:
{
 80072dc:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 80072de:	4d0a      	ldr	r5, [pc, #40]	; (8007308 <sys_timeouts_init+0x2c>)
 80072e0:	4c0a      	ldr	r4, [pc, #40]	; (800730c <sys_timeouts_init+0x30>)
 80072e2:	f105 0208 	add.w	r2, r5, #8
 80072e6:	4621      	mov	r1, r4
 80072e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80072ec:	f7ff ff6e 	bl	80071cc <sys_timeout>
 80072f0:	f105 0210 	add.w	r2, r5, #16
 80072f4:	4621      	mov	r1, r4
 80072f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80072fa:	f7ff ff67 	bl	80071cc <sys_timeout>
  timeouts_last_time = sys_now();
 80072fe:	f7fc fc71 	bl	8003be4 <sys_now>
 8007302:	4b03      	ldr	r3, [pc, #12]	; (8007310 <sys_timeouts_init+0x34>)
 8007304:	6018      	str	r0, [r3, #0]
}
 8007306:	bd38      	pop	{r3, r4, r5, pc}
 8007308:	0800e054 	.word	0x0800e054
 800730c:	08007315 	.word	0x08007315
 8007310:	20000d6c 	.word	0x20000d6c

08007314 <cyclic_timer>:
{
 8007314:	b510      	push	{r4, lr}
 8007316:	4604      	mov	r4, r0
  cyclic->handler();
 8007318:	6843      	ldr	r3, [r0, #4]
 800731a:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800731c:	4622      	mov	r2, r4
 800731e:	6820      	ldr	r0, [r4, #0]
 8007320:	4902      	ldr	r1, [pc, #8]	; (800732c <cyclic_timer+0x18>)
}
 8007322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8007326:	f7ff bf51 	b.w	80071cc <sys_timeout>
 800732a:	bf00      	nop
 800732c:	08007315 	.word	0x08007315

08007330 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8007330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (next_timeout) {
 8007334:	4d12      	ldr	r5, [pc, #72]	; (8007380 <sys_check_timeouts+0x50>)
 8007336:	682b      	ldr	r3, [r5, #0]
 8007338:	b1fb      	cbz	r3, 800737a <sys_check_timeouts+0x4a>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800733a:	f7fc fc53 	bl	8003be4 <sys_now>
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800733e:	4e11      	ldr	r6, [pc, #68]	; (8007384 <sys_check_timeouts+0x54>)
    do {
      PBUF_CHECK_FREE_OOSEQ();
 8007340:	4f11      	ldr	r7, [pc, #68]	; (8007388 <sys_check_timeouts+0x58>)
    diff = now - timeouts_last_time;
 8007342:	6834      	ldr	r4, [r6, #0]
 8007344:	1b04      	subs	r4, r0, r4
      PBUF_CHECK_FREE_OOSEQ();
 8007346:	783b      	ldrb	r3, [r7, #0]
 8007348:	b10b      	cbz	r3, 800734e <sys_check_timeouts+0x1e>
 800734a:	f7fc fecf 	bl	80040ec <pbuf_free_ooseq>
      had_one = 0;
      tmptimeout = next_timeout;
 800734e:	6829      	ldr	r1, [r5, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8007350:	b199      	cbz	r1, 800737a <sys_check_timeouts+0x4a>
 8007352:	684b      	ldr	r3, [r1, #4]
 8007354:	42a3      	cmp	r3, r4
 8007356:	d810      	bhi.n	800737a <sys_check_timeouts+0x4a>
        had_one = 1;
        timeouts_last_time += tmptimeout->time;
        diff -= tmptimeout->time;
        next_timeout = tmptimeout->next;
        handler = tmptimeout->h;
        arg = tmptimeout->arg;
 8007358:	e9d1 8902 	ldrd	r8, r9, [r1, #8]
        timeouts_last_time += tmptimeout->time;
 800735c:	6832      	ldr	r2, [r6, #0]
        diff -= tmptimeout->time;
 800735e:	1ae4      	subs	r4, r4, r3
        timeouts_last_time += tmptimeout->time;
 8007360:	441a      	add	r2, r3
        next_timeout = tmptimeout->next;
 8007362:	680b      	ldr	r3, [r1, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8007364:	2007      	movs	r0, #7
        timeouts_last_time += tmptimeout->time;
 8007366:	6032      	str	r2, [r6, #0]
        next_timeout = tmptimeout->next;
 8007368:	602b      	str	r3, [r5, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800736a:	f7fc fda7 	bl	8003ebc <memp_free>
        if (handler != NULL) {
 800736e:	f1b8 0f00 	cmp.w	r8, #0
 8007372:	d0e8      	beq.n	8007346 <sys_check_timeouts+0x16>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 8007374:	4648      	mov	r0, r9
 8007376:	47c0      	blx	r8
 8007378:	e7e5      	b.n	8007346 <sys_check_timeouts+0x16>
  }
  else
  {
	  uint8_t error = 1;
  }
}
 800737a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800737e:	bf00      	nop
 8007380:	20000d64 	.word	0x20000d64
 8007384:	20000d6c 	.word	0x20000d6c
 8007388:	200060e0 	.word	0x200060e0

0800738c <udp_init>:
udp_init(void)
{
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800738c:	4770      	bx	lr
	...

08007390 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8007390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8007394:	8943      	ldrh	r3, [r0, #10]
{
 8007396:	b085      	sub	sp, #20
  if (p->len < UDP_HLEN) {
 8007398:	2b07      	cmp	r3, #7
{
 800739a:	4605      	mov	r5, r0
 800739c:	4689      	mov	r9, r1
  if (p->len < UDP_HLEN) {
 800739e:	d805      	bhi.n	80073ac <udp_input+0x1c>
    if (pbuf_header(p, -UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80073a0:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80073a2:	b005      	add	sp, #20
 80073a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 80073a8:	f7fc bef2 	b.w	8004190 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80073ac:	4e3e      	ldr	r6, [pc, #248]	; (80074a8 <udp_input+0x118>)
  udphdr = (struct udp_hdr *)p->payload;
 80073ae:	6844      	ldr	r4, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80073b0:	6831      	ldr	r1, [r6, #0]
 80073b2:	6970      	ldr	r0, [r6, #20]
 80073b4:	f000 ffa1 	bl	80082fa <ip4_addr_isbroadcast_u32>
 80073b8:	4680      	mov	r8, r0
  src = lwip_ntohs(udphdr->src);
 80073ba:	8820      	ldrh	r0, [r4, #0]
 80073bc:	f7fc fc6a 	bl	8003c94 <lwip_htons>
 80073c0:	4607      	mov	r7, r0
  dest = lwip_ntohs(udphdr->dest);
 80073c2:	8860      	ldrh	r0, [r4, #2]
 80073c4:	f7fc fc66 	bl	8003c94 <lwip_htons>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80073c8:	e9d6 c104 	ldrd	ip, r1, [r6, #16]
  uncon_pcb = NULL;
 80073cc:	2400      	movs	r4, #0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80073ce:	4a37      	ldr	r2, [pc, #220]	; (80074ac <udp_input+0x11c>)
  dest = lwip_ntohs(udphdr->dest);
 80073d0:	4682      	mov	sl, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80073d2:	6810      	ldr	r0, [r2, #0]
  prev = NULL;
 80073d4:	46a6      	mov	lr, r4
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80073d6:	4603      	mov	r3, r0
 80073d8:	4693      	mov	fp, r2
 80073da:	9603      	str	r6, [sp, #12]
 80073dc:	b99b      	cbnz	r3, 8007406 <udp_input+0x76>
  if (pcb != NULL) {
 80073de:	b91c      	cbnz	r4, 80073e8 <udp_input+0x58>
  if (for_us) {
 80073e0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80073e4:	428b      	cmp	r3, r1
 80073e6:	d1db      	bne.n	80073a0 <udp_input+0x10>
    if (pbuf_header(p, -UDP_HLEN)) {
 80073e8:	f06f 0107 	mvn.w	r1, #7
 80073ec:	4628      	mov	r0, r5
 80073ee:	f7fc fec9 	bl	8004184 <pbuf_header>
 80073f2:	2800      	cmp	r0, #0
 80073f4:	d036      	beq.n	8007464 <udp_input+0xd4>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 80073f6:	4b2e      	ldr	r3, [pc, #184]	; (80074b0 <udp_input+0x120>)
 80073f8:	f240 1255 	movw	r2, #341	; 0x155
 80073fc:	492d      	ldr	r1, [pc, #180]	; (80074b4 <udp_input+0x124>)
 80073fe:	482e      	ldr	r0, [pc, #184]	; (80074b8 <udp_input+0x128>)
 8007400:	f002 faf8 	bl	80099f4 <iprintf>
 8007404:	e7cc      	b.n	80073a0 <udp_input+0x10>
    if ((pcb->local_port == dest) &&
 8007406:	8a5a      	ldrh	r2, [r3, #18]
 8007408:	4552      	cmp	r2, sl
 800740a:	d128      	bne.n	800745e <udp_input+0xce>
 800740c:	681a      	ldr	r2, [r3, #0]
    if (broadcast != 0) {
 800740e:	f1b8 0f00 	cmp.w	r8, #0
 8007412:	d020      	beq.n	8007456 <udp_input+0xc6>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8007414:	b13a      	cbz	r2, 8007426 <udp_input+0x96>
 8007416:	1c4e      	adds	r6, r1, #1
 8007418:	d005      	beq.n	8007426 <udp_input+0x96>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800741a:	404a      	eors	r2, r1
 800741c:	4616      	mov	r6, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800741e:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8007422:	4216      	tst	r6, r2
 8007424:	d11b      	bne.n	800745e <udp_input+0xce>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8007426:	7c1a      	ldrb	r2, [r3, #16]
 8007428:	0752      	lsls	r2, r2, #29
 800742a:	d402      	bmi.n	8007432 <udp_input+0xa2>
 800742c:	2c00      	cmp	r4, #0
 800742e:	bf08      	it	eq
 8007430:	461c      	moveq	r4, r3
      if ((pcb->remote_port == src) &&
 8007432:	8a9a      	ldrh	r2, [r3, #20]
 8007434:	42ba      	cmp	r2, r7
 8007436:	d112      	bne.n	800745e <udp_input+0xce>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8007438:	685a      	ldr	r2, [r3, #4]
      if ((pcb->remote_port == src) &&
 800743a:	b10a      	cbz	r2, 8007440 <udp_input+0xb0>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800743c:	4562      	cmp	r2, ip
 800743e:	d10e      	bne.n	800745e <udp_input+0xce>
        if (prev != NULL) {
 8007440:	f1be 0f00 	cmp.w	lr, #0
 8007444:	d005      	beq.n	8007452 <udp_input+0xc2>
          prev->next = pcb->next;
 8007446:	68da      	ldr	r2, [r3, #12]
          udp_pcbs = pcb;
 8007448:	f8cb 3000 	str.w	r3, [fp]
          prev->next = pcb->next;
 800744c:	f8ce 200c 	str.w	r2, [lr, #12]
          pcb->next = udp_pcbs;
 8007450:	60d8      	str	r0, [r3, #12]
 8007452:	461c      	mov	r4, r3
 8007454:	e7c8      	b.n	80073e8 <udp_input+0x58>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007456:	2a00      	cmp	r2, #0
 8007458:	d0e5      	beq.n	8007426 <udp_input+0x96>
 800745a:	428a      	cmp	r2, r1
 800745c:	d0e3      	beq.n	8007426 <udp_input+0x96>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800745e:	469e      	mov	lr, r3
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	e7bb      	b.n	80073dc <udp_input+0x4c>
    if (pcb != NULL) {
 8007464:	b15c      	cbz	r4, 800747e <udp_input+0xee>
      if (pcb->recv != NULL) {
 8007466:	69a6      	ldr	r6, [r4, #24]
 8007468:	2e00      	cmp	r6, #0
 800746a:	d099      	beq.n	80073a0 <udp_input+0x10>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800746c:	9700      	str	r7, [sp, #0]
 800746e:	4b13      	ldr	r3, [pc, #76]	; (80074bc <udp_input+0x12c>)
 8007470:	462a      	mov	r2, r5
 8007472:	4621      	mov	r1, r4
 8007474:	69e0      	ldr	r0, [r4, #28]
 8007476:	47b0      	blx	r6
}
 8007478:	b005      	add	sp, #20
 800747a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800747e:	f1b8 0f00 	cmp.w	r8, #0
 8007482:	d18d      	bne.n	80073a0 <udp_input+0x10>
 8007484:	9b03      	ldr	r3, [sp, #12]
 8007486:	695b      	ldr	r3, [r3, #20]
 8007488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800748c:	2be0      	cmp	r3, #224	; 0xe0
 800748e:	d087      	beq.n	80073a0 <udp_input+0x10>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8007490:	9b03      	ldr	r3, [sp, #12]
 8007492:	4628      	mov	r0, r5
 8007494:	8999      	ldrh	r1, [r3, #12]
 8007496:	3108      	adds	r1, #8
 8007498:	b209      	sxth	r1, r1
 800749a:	f7fc fe76 	bl	800418a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800749e:	2103      	movs	r1, #3
 80074a0:	4628      	mov	r0, r5
 80074a2:	f000 fd9b 	bl	8007fdc <icmp_dest_unreach>
 80074a6:	e77b      	b.n	80073a0 <udp_input+0x10>
 80074a8:	200060c0 	.word	0x200060c0
 80074ac:	20006100 	.word	0x20006100
 80074b0:	0800e0dd 	.word	0x0800e0dd
 80074b4:	0800e10c 	.word	0x0800e10c
 80074b8:	0800d278 	.word	0x0800d278
 80074bc:	200060d0 	.word	0x200060d0

080074c0 <udp_bind>:
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 80074c0:	4b28      	ldr	r3, [pc, #160]	; (8007564 <udp_bind+0xa4>)
{
 80074c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 80074c6:	2900      	cmp	r1, #0
 80074c8:	bf08      	it	eq
 80074ca:	4619      	moveq	r1, r3
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80074cc:	2800      	cmp	r0, #0
 80074ce:	d046      	beq.n	800755e <udp_bind+0x9e>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80074d0:	4f25      	ldr	r7, [pc, #148]	; (8007568 <udp_bind+0xa8>)
 80074d2:	f8d7 c000 	ldr.w	ip, [r7]
 80074d6:	4663      	mov	r3, ip
 80074d8:	b9e3      	cbnz	r3, 8007514 <udp_bind+0x54>
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 80074da:	2a00      	cmp	r2, #0
 80074dc:	d13d      	bne.n	800755a <udp_bind+0x9a>
 80074de:	f44f 4680 	mov.w	r6, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80074e2:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80074e6:	4d21      	ldr	r5, [pc, #132]	; (800756c <udp_bind+0xac>)
 80074e8:	882c      	ldrh	r4, [r5, #0]
 80074ea:	4544      	cmp	r4, r8
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80074ec:	bf08      	it	eq
 80074ee:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80074f2:	46e6      	mov	lr, ip
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80074f4:	bf1c      	itt	ne
 80074f6:	1c62      	addne	r2, r4, #1
 80074f8:	b292      	uxthne	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80074fa:	f1be 0f00 	cmp.w	lr, #0
 80074fe:	d10f      	bne.n	8007520 <udp_bind+0x60>
 8007500:	802a      	strh	r2, [r5, #0]
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8007502:	6809      	ldr	r1, [r1, #0]

  pcb->local_port = port;
 8007504:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8007506:	6001      	str	r1, [r0, #0]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8007508:	b913      	cbnz	r3, 8007510 <udp_bind+0x50>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800750a:	f8c0 c00c 	str.w	ip, [r0, #12]
    udp_pcbs = pcb;
 800750e:	6038      	str	r0, [r7, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8007510:	2000      	movs	r0, #0
 8007512:	e010      	b.n	8007536 <udp_bind+0x76>
    if (pcb == ipcb) {
 8007514:	4283      	cmp	r3, r0
 8007516:	d001      	beq.n	800751c <udp_bind+0x5c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	e7dd      	b.n	80074d8 <udp_bind+0x18>
      rebind = 1;
 800751c:	2301      	movs	r3, #1
 800751e:	e7dc      	b.n	80074da <udp_bind+0x1a>
    if (pcb->local_port == udp_port) {
 8007520:	f8be 4012 	ldrh.w	r4, [lr, #18]
 8007524:	4294      	cmp	r4, r2
 8007526:	d108      	bne.n	800753a <udp_bind+0x7a>
 8007528:	3e01      	subs	r6, #1
 800752a:	b2b6      	uxth	r6, r6
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800752c:	2e00      	cmp	r6, #0
 800752e:	d1dc      	bne.n	80074ea <udp_bind+0x2a>
 8007530:	802a      	strh	r2, [r5, #0]
      return ERR_USE;
 8007532:	f06f 0007 	mvn.w	r0, #7
}
 8007536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800753a:	f8de e00c 	ldr.w	lr, [lr, #12]
 800753e:	e7dc      	b.n	80074fa <udp_bind+0x3a>
      if (pcb != ipcb) {
 8007540:	4284      	cmp	r4, r0
 8007542:	d006      	beq.n	8007552 <udp_bind+0x92>
          if ((ipcb->local_port == port) &&
 8007544:	8a65      	ldrh	r5, [r4, #18]
 8007546:	4295      	cmp	r5, r2
 8007548:	d103      	bne.n	8007552 <udp_bind+0x92>
 800754a:	6826      	ldr	r6, [r4, #0]
 800754c:	680d      	ldr	r5, [r1, #0]
 800754e:	42ae      	cmp	r6, r5
 8007550:	d0ef      	beq.n	8007532 <udp_bind+0x72>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8007552:	68e4      	ldr	r4, [r4, #12]
 8007554:	2c00      	cmp	r4, #0
 8007556:	d1f3      	bne.n	8007540 <udp_bind+0x80>
 8007558:	e7d3      	b.n	8007502 <udp_bind+0x42>
 800755a:	4664      	mov	r4, ip
 800755c:	e7fa      	b.n	8007554 <udp_bind+0x94>
    return ERR_VAL;
 800755e:	f06f 0005 	mvn.w	r0, #5
 8007562:	e7e8      	b.n	8007536 <udp_bind+0x76>
 8007564:	0800e424 	.word	0x0800e424
 8007568:	20006100 	.word	0x20006100
 800756c:	20000010 	.word	0x20000010

08007570 <udp_sendto_if_src>:
{
 8007570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007574:	460e      	mov	r6, r1
 8007576:	b085      	sub	sp, #20
 8007578:	4690      	mov	r8, r2
 800757a:	4699      	mov	r9, r3
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800757c:	4607      	mov	r7, r0
 800757e:	2800      	cmp	r0, #0
 8007580:	d050      	beq.n	8007624 <udp_sendto_if_src+0xb4>
 8007582:	2a00      	cmp	r2, #0
 8007584:	d04e      	beq.n	8007624 <udp_sendto_if_src+0xb4>
  if (pcb->local_port == 0) {
 8007586:	8a42      	ldrh	r2, [r0, #18]
 8007588:	2a00      	cmp	r2, #0
 800758a:	d033      	beq.n	80075f4 <udp_sendto_if_src+0x84>
  if (pbuf_header(p, UDP_HLEN)) {
 800758c:	2108      	movs	r1, #8
 800758e:	4630      	mov	r0, r6
 8007590:	f7fc fdf8 	bl	8004184 <pbuf_header>
 8007594:	2800      	cmp	r0, #0
 8007596:	d137      	bne.n	8007608 <udp_sendto_if_src+0x98>
 8007598:	4634      	mov	r4, r6
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800759a:	8963      	ldrh	r3, [r4, #10]
 800759c:	2b07      	cmp	r3, #7
 800759e:	d806      	bhi.n	80075ae <udp_sendto_if_src+0x3e>
 80075a0:	4b23      	ldr	r3, [pc, #140]	; (8007630 <udp_sendto_if_src+0xc0>)
 80075a2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80075a6:	4923      	ldr	r1, [pc, #140]	; (8007634 <udp_sendto_if_src+0xc4>)
 80075a8:	4823      	ldr	r0, [pc, #140]	; (8007638 <udp_sendto_if_src+0xc8>)
 80075aa:	f002 fa23 	bl	80099f4 <iprintf>
  udphdr->src = lwip_htons(pcb->local_port);
 80075ae:	8a78      	ldrh	r0, [r7, #18]
  udphdr = (struct udp_hdr *)q->payload;
 80075b0:	6865      	ldr	r5, [r4, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 80075b2:	f7fc fb6f 	bl	8003c94 <lwip_htons>
 80075b6:	8028      	strh	r0, [r5, #0]
  udphdr->dest = lwip_htons(dst_port);
 80075b8:	4648      	mov	r0, r9
 80075ba:	f7fc fb6b 	bl	8003c94 <lwip_htons>
  udphdr->chksum = 0x0000;
 80075be:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 80075c0:	8068      	strh	r0, [r5, #2]
  udphdr->chksum = 0x0000;
 80075c2:	71ab      	strb	r3, [r5, #6]
 80075c4:	71eb      	strb	r3, [r5, #7]
    udphdr->len = lwip_htons(q->tot_len);
 80075c6:	8920      	ldrh	r0, [r4, #8]
 80075c8:	f7fc fb64 	bl	8003c94 <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80075cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    udphdr->len = lwip_htons(q->tot_len);
 80075ce:	80a8      	strh	r0, [r5, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80075d0:	7abb      	ldrb	r3, [r7, #10]
 80075d2:	9202      	str	r2, [sp, #8]
 80075d4:	2211      	movs	r2, #17
 80075d6:	9201      	str	r2, [sp, #4]
 80075d8:	7a7a      	ldrb	r2, [r7, #9]
 80075da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80075dc:	9200      	str	r2, [sp, #0]
 80075de:	4620      	mov	r0, r4
 80075e0:	4642      	mov	r2, r8
 80075e2:	f000 fe01 	bl	80081e8 <ip4_output_if_src>
  if (q != p) {
 80075e6:	42b4      	cmp	r4, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80075e8:	4605      	mov	r5, r0
  if (q != p) {
 80075ea:	d009      	beq.n	8007600 <udp_sendto_if_src+0x90>
    pbuf_free(q);
 80075ec:	4620      	mov	r0, r4
 80075ee:	f7fc fdcf 	bl	8004190 <pbuf_free>
 80075f2:	e005      	b.n	8007600 <udp_sendto_if_src+0x90>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80075f4:	4601      	mov	r1, r0
 80075f6:	f7ff ff63 	bl	80074c0 <udp_bind>
    if (err != ERR_OK) {
 80075fa:	4605      	mov	r5, r0
 80075fc:	2800      	cmp	r0, #0
 80075fe:	d0c5      	beq.n	800758c <udp_sendto_if_src+0x1c>
}
 8007600:	4628      	mov	r0, r5
 8007602:	b005      	add	sp, #20
 8007604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8007608:	2200      	movs	r2, #0
 800760a:	2108      	movs	r1, #8
 800760c:	2001      	movs	r0, #1
 800760e:	f7fc fe21 	bl	8004254 <pbuf_alloc>
    if (q == NULL) {
 8007612:	4604      	mov	r4, r0
 8007614:	b148      	cbz	r0, 800762a <udp_sendto_if_src+0xba>
    if (p->tot_len != 0) {
 8007616:	8933      	ldrh	r3, [r6, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d0be      	beq.n	800759a <udp_sendto_if_src+0x2a>
      pbuf_chain(q, p);
 800761c:	4631      	mov	r1, r6
 800761e:	f7fc ffc3 	bl	80045a8 <pbuf_chain>
 8007622:	e7ba      	b.n	800759a <udp_sendto_if_src+0x2a>
    return ERR_VAL;
 8007624:	f06f 0505 	mvn.w	r5, #5
 8007628:	e7ea      	b.n	8007600 <udp_sendto_if_src+0x90>
      return ERR_MEM;
 800762a:	f04f 35ff 	mov.w	r5, #4294967295
 800762e:	e7e7      	b.n	8007600 <udp_sendto_if_src+0x90>
 8007630:	0800e0dd 	.word	0x0800e0dd
 8007634:	0800e120 	.word	0x0800e120
 8007638:	0800d278 	.word	0x0800d278

0800763c <udp_sendto_if>:
{
 800763c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800763e:	9c06      	ldr	r4, [sp, #24]
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8007640:	b190      	cbz	r0, 8007668 <udp_sendto_if+0x2c>
 8007642:	b18a      	cbz	r2, 8007668 <udp_sendto_if+0x2c>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8007644:	6805      	ldr	r5, [r0, #0]
 8007646:	b11d      	cbz	r5, 8007650 <udp_sendto_if+0x14>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8007648:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800764c:	2ee0      	cmp	r6, #224	; 0xe0
 800764e:	d106      	bne.n	800765e <udp_sendto_if+0x22>
    src_ip = netif_ip_addr4(netif);
 8007650:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8007652:	e9cd 4500 	strd	r4, r5, [sp]
 8007656:	f7ff ff8b 	bl	8007570 <udp_sendto_if_src>
}
 800765a:	b002      	add	sp, #8
 800765c:	bd70      	pop	{r4, r5, r6, pc}
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800765e:	6866      	ldr	r6, [r4, #4]
 8007660:	42b5      	cmp	r5, r6
 8007662:	d104      	bne.n	800766e <udp_sendto_if+0x32>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8007664:	4605      	mov	r5, r0
 8007666:	e7f4      	b.n	8007652 <udp_sendto_if+0x16>
    return ERR_VAL;
 8007668:	f06f 0005 	mvn.w	r0, #5
 800766c:	e7f5      	b.n	800765a <udp_sendto_if+0x1e>
      return ERR_RTE;
 800766e:	f06f 0003 	mvn.w	r0, #3
 8007672:	e7f2      	b.n	800765a <udp_sendto_if+0x1e>

08007674 <udp_sendto>:
{
 8007674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007676:	460e      	mov	r6, r1
 8007678:	4614      	mov	r4, r2
 800767a:	461f      	mov	r7, r3
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800767c:	4605      	mov	r5, r0
 800767e:	b168      	cbz	r0, 800769c <udp_sendto+0x28>
 8007680:	b162      	cbz	r2, 800769c <udp_sendto+0x28>
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 8007682:	4610      	mov	r0, r2
 8007684:	f000 fcb4 	bl	8007ff0 <ip4_route>
  if (netif == NULL) {
 8007688:	b158      	cbz	r0, 80076a2 <udp_sendto+0x2e>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800768a:	9000      	str	r0, [sp, #0]
 800768c:	463b      	mov	r3, r7
 800768e:	4622      	mov	r2, r4
 8007690:	4631      	mov	r1, r6
 8007692:	4628      	mov	r0, r5
 8007694:	f7ff ffd2 	bl	800763c <udp_sendto_if>
}
 8007698:	b003      	add	sp, #12
 800769a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_VAL;
 800769c:	f06f 0005 	mvn.w	r0, #5
 80076a0:	e7fa      	b.n	8007698 <udp_sendto+0x24>
    return ERR_RTE;
 80076a2:	f06f 0003 	mvn.w	r0, #3
 80076a6:	e7f7      	b.n	8007698 <udp_sendto+0x24>

080076a8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80076a8:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80076aa:	f240 4252 	movw	r2, #1106	; 0x452
 80076ae:	4907      	ldr	r1, [pc, #28]	; (80076cc <udp_new+0x24>)
 80076b0:	2001      	movs	r0, #1
 80076b2:	f7fc fbe7 	bl	8003e84 <memp_malloc_fn>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80076b6:	4604      	mov	r4, r0
 80076b8:	b128      	cbz	r0, 80076c6 <udp_new+0x1e>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80076ba:	2220      	movs	r2, #32
 80076bc:	2100      	movs	r1, #0
 80076be:	f001 faad 	bl	8008c1c <memset>
    pcb->ttl = UDP_TTL;
 80076c2:	23ff      	movs	r3, #255	; 0xff
 80076c4:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 80076c6:	4620      	mov	r0, r4
 80076c8:	bd10      	pop	{r4, pc}
 80076ca:	bf00      	nop
 80076cc:	0800e0dd 	.word	0x0800e0dd

080076d0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80076d0:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80076d2:	b138      	cbz	r0, 80076e4 <udp_netif_ip_addr_changed+0x14>
 80076d4:	6803      	ldr	r3, [r0, #0]
 80076d6:	b12b      	cbz	r3, 80076e4 <udp_netif_ip_addr_changed+0x14>
 80076d8:	b121      	cbz	r1, 80076e4 <udp_netif_ip_addr_changed+0x14>
 80076da:	680b      	ldr	r3, [r1, #0]
 80076dc:	b113      	cbz	r3, 80076e4 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80076de:	4b06      	ldr	r3, [pc, #24]	; (80076f8 <udp_netif_ip_addr_changed+0x28>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	b903      	cbnz	r3, 80076e6 <udp_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
 80076e4:	bd10      	pop	{r4, pc}
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80076e6:	681c      	ldr	r4, [r3, #0]
 80076e8:	6802      	ldr	r2, [r0, #0]
 80076ea:	4294      	cmp	r4, r2
        ip_addr_copy(upcb->local_ip, *new_addr);
 80076ec:	bf04      	itt	eq
 80076ee:	680a      	ldreq	r2, [r1, #0]
 80076f0:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	e7f5      	b.n	80076e2 <udp_netif_ip_addr_changed+0x12>
 80076f6:	bf00      	nop
 80076f8:	20006100 	.word	0x20006100

080076fc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80076fc:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80076fe:	2618      	movs	r6, #24
 8007700:	4346      	muls	r6, r0
 8007702:	4d0b      	ldr	r5, [pc, #44]	; (8007730 <etharp_free_entry+0x34>)
{
 8007704:	4604      	mov	r4, r0
  if (arp_table[i].q != NULL) {
 8007706:	59a8      	ldr	r0, [r5, r6]
 8007708:	b118      	cbz	r0, 8007712 <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800770a:	f7fc fd41 	bl	8004190 <pbuf_free>
    arp_table[i].q = NULL;
 800770e:	2300      	movs	r3, #0
 8007710:	51ab      	str	r3, [r5, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8007712:	2318      	movs	r3, #24
 8007714:	2200      	movs	r2, #0
 8007716:	fb03 5304 	mla	r3, r3, r4, r5
 800771a:	751a      	strb	r2, [r3, #20]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 800771c:	825a      	strh	r2, [r3, #18]
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 800771e:	e9c3 2201 	strd	r2, r2, [r3, #4]
  arp_table[i].ethaddr = ethzero;
 8007722:	4a04      	ldr	r2, [pc, #16]	; (8007734 <etharp_free_entry+0x38>)
 8007724:	6810      	ldr	r0, [r2, #0]
 8007726:	8892      	ldrh	r2, [r2, #4]
 8007728:	60d8      	str	r0, [r3, #12]
 800772a:	821a      	strh	r2, [r3, #16]
#endif /* LWIP_DEBUG */
}
 800772c:	bd70      	pop	{r4, r5, r6, pc}
 800772e:	bf00      	nop
 8007730:	20000d70 	.word	0x20000d70
 8007734:	0800e62d 	.word	0x0800e62d

08007738 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8007738:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800773c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800773e:	4689      	mov	r9, r1
 8007740:	4692      	mov	sl, r2
 8007742:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8007744:	4607      	mov	r7, r0
 8007746:	b930      	cbnz	r0, 8007756 <etharp_raw+0x1e>
 8007748:	4b2c      	ldr	r3, [pc, #176]	; (80077fc <etharp_raw+0xc4>)
 800774a:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800774e:	492c      	ldr	r1, [pc, #176]	; (8007800 <etharp_raw+0xc8>)
 8007750:	482c      	ldr	r0, [pc, #176]	; (8007804 <etharp_raw+0xcc>)
 8007752:	f002 f94f 	bl	80099f4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8007756:	2200      	movs	r2, #0
 8007758:	211c      	movs	r1, #28
 800775a:	2002      	movs	r0, #2
 800775c:	f7fc fd7a 	bl	8004254 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8007760:	4606      	mov	r6, r0
 8007762:	2800      	cmp	r0, #0
 8007764:	d047      	beq.n	80077f6 <etharp_raw+0xbe>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8007766:	8943      	ldrh	r3, [r0, #10]
 8007768:	2b1b      	cmp	r3, #27
 800776a:	d806      	bhi.n	800777a <etharp_raw+0x42>
 800776c:	4b23      	ldr	r3, [pc, #140]	; (80077fc <etharp_raw+0xc4>)
 800776e:	f240 4264 	movw	r2, #1124	; 0x464
 8007772:	4925      	ldr	r1, [pc, #148]	; (8007808 <etharp_raw+0xd0>)
 8007774:	4823      	ldr	r0, [pc, #140]	; (8007804 <etharp_raw+0xcc>)
 8007776:	f002 f93d 	bl	80099f4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800777a:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  hdr = (struct etharp_hdr *)p->payload;
 800777e:	6874      	ldr	r4, [r6, #4]
  hdr->opcode = lwip_htons(opcode);
 8007780:	f7fc fa88 	bl	8003c94 <lwip_htons>
 8007784:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8007786:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800778a:	2b06      	cmp	r3, #6
 800778c:	d006      	beq.n	800779c <etharp_raw+0x64>
 800778e:	4b1b      	ldr	r3, [pc, #108]	; (80077fc <etharp_raw+0xc4>)
 8007790:	f240 426b 	movw	r2, #1131	; 0x46b
 8007794:	491d      	ldr	r1, [pc, #116]	; (800780c <etharp_raw+0xd4>)
 8007796:	481b      	ldr	r0, [pc, #108]	; (8007804 <etharp_raw+0xcc>)
 8007798:	f002 f92c 	bl	80099f4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800779c:	f8d8 3000 	ldr.w	r3, [r8]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80077a0:	464a      	mov	r2, r9
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80077a2:	60a3      	str	r3, [r4, #8]
 80077a4:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80077a8:	4631      	mov	r1, r6
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80077aa:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80077ac:	682b      	ldr	r3, [r5, #0]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80077ae:	4638      	mov	r0, r7
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80077b0:	f8c4 3012 	str.w	r3, [r4, #18]
 80077b4:	88ab      	ldrh	r3, [r5, #4]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80077b6:	2500      	movs	r5, #0
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80077b8:	82e3      	strh	r3, [r4, #22]
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 80077ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80077c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077c4:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80077c6:	7025      	strb	r5, [r4, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80077c8:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80077ca:	2301      	movs	r3, #1
 80077cc:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80077ce:	2308      	movs	r3, #8
 80077d0:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 80077d2:	2306      	movs	r3, #6
 80077d4:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80077d6:	2304      	movs	r3, #4
 80077d8:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80077da:	f640 0306 	movw	r3, #2054	; 0x806
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80077de:	70e5      	strb	r5, [r4, #3]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	4653      	mov	r3, sl
 80077e4:	f001 f994 	bl	8008b10 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80077e8:	4630      	mov	r0, r6
 80077ea:	f7fc fcd1 	bl	8004190 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 80077ee:	4628      	mov	r0, r5
}
 80077f0:	b002      	add	sp, #8
 80077f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 80077f6:	f04f 30ff 	mov.w	r0, #4294967295
 80077fa:	e7f9      	b.n	80077f0 <etharp_raw+0xb8>
 80077fc:	0800e243 	.word	0x0800e243
 8007800:	0800d26a 	.word	0x0800d26a
 8007804:	0800d278 	.word	0x0800d278
 8007808:	0800e27a 	.word	0x0800e27a
 800780c:	0800e2ab 	.word	0x0800e2ab

08007810 <etharp_find_entry.isra.0>:
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8007810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s8_t old_queue = ARP_TABLE_SIZE;
 8007814:	220a      	movs	r2, #10
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8007816:	4604      	mov	r4, r0
 8007818:	2000      	movs	r0, #0
 800781a:	4b3d      	ldr	r3, [pc, #244]	; (8007910 <etharp_find_entry.isra.0+0x100>)
 800781c:	9101      	str	r1, [sp, #4]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800781e:	4696      	mov	lr, r2
 8007820:	4611      	mov	r1, r2
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8007822:	4682      	mov	sl, r0
 8007824:	4681      	mov	r9, r0
 8007826:	4680      	mov	r8, r0
  s8_t empty = ARP_TABLE_SIZE;
 8007828:	4694      	mov	ip, r2
 800782a:	461d      	mov	r5, r3
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800782c:	f1bc 0f0a 	cmp.w	ip, #10
    u8_t state = arp_table[i].state;
 8007830:	f893 b014 	ldrb.w	fp, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8007834:	d12a      	bne.n	800788c <etharp_find_entry.isra.0+0x7c>
 8007836:	f1bb 0f00 	cmp.w	fp, #0
 800783a:	d12a      	bne.n	8007892 <etharp_find_entry.isra.0+0x82>
      empty = i;
 800783c:	fa4f fc80 	sxtb.w	ip, r0
 8007840:	3001      	adds	r0, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007842:	280a      	cmp	r0, #10
 8007844:	f103 0318 	add.w	r3, r3, #24
 8007848:	d1f0      	bne.n	800782c <etharp_find_entry.isra.0+0x1c>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800784a:	9b01      	ldr	r3, [sp, #4]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d15b      	bne.n	8007908 <etharp_find_entry.isra.0+0xf8>
 8007850:	f1bc 0f0a 	cmp.w	ip, #10
 8007854:	d03c      	beq.n	80078d0 <etharp_find_entry.isra.0+0xc0>
    i = empty;
 8007856:	fa5f f68c 	uxtb.w	r6, ip
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800785a:	2318      	movs	r3, #24
 800785c:	fb03 5306 	mla	r3, r3, r6, r5
 8007860:	7d1b      	ldrb	r3, [r3, #20]
 8007862:	b133      	cbz	r3, 8007872 <etharp_find_entry.isra.0+0x62>
 8007864:	4b2b      	ldr	r3, [pc, #172]	; (8007914 <etharp_find_entry.isra.0+0x104>)
 8007866:	f240 1287 	movw	r2, #391	; 0x187
 800786a:	492b      	ldr	r1, [pc, #172]	; (8007918 <etharp_find_entry.isra.0+0x108>)
 800786c:	482b      	ldr	r0, [pc, #172]	; (800791c <etharp_find_entry.isra.0+0x10c>)
 800786e:	f002 f8c1 	bl	80099f4 <iprintf>
  if (ipaddr != NULL) {
 8007872:	b124      	cbz	r4, 800787e <etharp_find_entry.isra.0+0x6e>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8007874:	2318      	movs	r3, #24
 8007876:	fb03 5306 	mla	r3, r3, r6, r5
 800787a:	6822      	ldr	r2, [r4, #0]
 800787c:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 800787e:	2318      	movs	r3, #24
 8007880:	fb03 5506 	mla	r5, r3, r6, r5
 8007884:	2300      	movs	r3, #0
  return (err_t)i;
 8007886:	b270      	sxtb	r0, r6
  arp_table[i].ctime = 0;
 8007888:	826b      	strh	r3, [r5, #18]
 800788a:	e008      	b.n	800789e <etharp_find_entry.isra.0+0x8e>
    } else if (state != ETHARP_STATE_EMPTY) {
 800788c:	f1bb 0f00 	cmp.w	fp, #0
 8007890:	d0d6      	beq.n	8007840 <etharp_find_entry.isra.0+0x30>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8007892:	b13c      	cbz	r4, 80078a4 <etharp_find_entry.isra.0+0x94>
 8007894:	6827      	ldr	r7, [r4, #0]
 8007896:	685e      	ldr	r6, [r3, #4]
 8007898:	42b7      	cmp	r7, r6
 800789a:	d103      	bne.n	80078a4 <etharp_find_entry.isra.0+0x94>
        return i;
 800789c:	b240      	sxtb	r0, r0
}
 800789e:	b003      	add	sp, #12
 80078a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (state == ETHARP_STATE_PENDING) {
 80078a4:	f1bb 0f01 	cmp.w	fp, #1
 80078a8:	8a5f      	ldrh	r7, [r3, #18]
 80078aa:	d10c      	bne.n	80078c6 <etharp_find_entry.isra.0+0xb6>
        if (arp_table[i].q != NULL) {
 80078ac:	681e      	ldr	r6, [r3, #0]
 80078ae:	b126      	cbz	r6, 80078ba <etharp_find_entry.isra.0+0xaa>
          if (arp_table[i].ctime >= age_queue) {
 80078b0:	4547      	cmp	r7, r8
 80078b2:	d3c5      	bcc.n	8007840 <etharp_find_entry.isra.0+0x30>
            old_queue = i;
 80078b4:	b242      	sxtb	r2, r0
 80078b6:	46b8      	mov	r8, r7
 80078b8:	e7c2      	b.n	8007840 <etharp_find_entry.isra.0+0x30>
          if (arp_table[i].ctime >= age_pending) {
 80078ba:	454f      	cmp	r7, r9
 80078bc:	d3c0      	bcc.n	8007840 <etharp_find_entry.isra.0+0x30>
            old_pending = i;
 80078be:	fa4f fe80 	sxtb.w	lr, r0
 80078c2:	46b9      	mov	r9, r7
 80078c4:	e7bc      	b.n	8007840 <etharp_find_entry.isra.0+0x30>
          if (arp_table[i].ctime >= age_stable) {
 80078c6:	4557      	cmp	r7, sl
            old_stable = i;
 80078c8:	bf24      	itt	cs
 80078ca:	b241      	sxtbcs	r1, r0
 80078cc:	46ba      	movcs	sl, r7
 80078ce:	e7b7      	b.n	8007840 <etharp_find_entry.isra.0+0x30>
    if (old_stable < ARP_TABLE_SIZE) {
 80078d0:	290a      	cmp	r1, #10
 80078d2:	d00f      	beq.n	80078f4 <etharp_find_entry.isra.0+0xe4>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80078d4:	2318      	movs	r3, #24
      i = old_stable;
 80078d6:	b2ce      	uxtb	r6, r1
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80078d8:	4359      	muls	r1, r3
 80078da:	586b      	ldr	r3, [r5, r1]
 80078dc:	b133      	cbz	r3, 80078ec <etharp_find_entry.isra.0+0xdc>
 80078de:	4b0d      	ldr	r3, [pc, #52]	; (8007914 <etharp_find_entry.isra.0+0x104>)
 80078e0:	f240 126f 	movw	r2, #367	; 0x16f
 80078e4:	490e      	ldr	r1, [pc, #56]	; (8007920 <etharp_find_entry.isra.0+0x110>)
 80078e6:	480d      	ldr	r0, [pc, #52]	; (800791c <etharp_find_entry.isra.0+0x10c>)
 80078e8:	f002 f884 	bl	80099f4 <iprintf>
    etharp_free_entry(i);
 80078ec:	4630      	mov	r0, r6
 80078ee:	f7ff ff05 	bl	80076fc <etharp_free_entry>
 80078f2:	e7b2      	b.n	800785a <etharp_find_entry.isra.0+0x4a>
    } else if (old_pending < ARP_TABLE_SIZE) {
 80078f4:	f1be 0f0a 	cmp.w	lr, #10
 80078f8:	d002      	beq.n	8007900 <etharp_find_entry.isra.0+0xf0>
      i = old_pending;
 80078fa:	fa5f f68e 	uxtb.w	r6, lr
 80078fe:	e7f5      	b.n	80078ec <etharp_find_entry.isra.0+0xdc>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8007900:	2a0a      	cmp	r2, #10
 8007902:	d001      	beq.n	8007908 <etharp_find_entry.isra.0+0xf8>
      i = old_queue;
 8007904:	b2d6      	uxtb	r6, r2
 8007906:	e7f1      	b.n	80078ec <etharp_find_entry.isra.0+0xdc>
    return (s8_t)ERR_MEM;
 8007908:	f04f 30ff 	mov.w	r0, #4294967295
 800790c:	e7c7      	b.n	800789e <etharp_find_entry.isra.0+0x8e>
 800790e:	bf00      	nop
 8007910:	20000d70 	.word	0x20000d70
 8007914:	0800e243 	.word	0x0800e243
 8007918:	0800e165 	.word	0x0800e165
 800791c:	0800d278 	.word	0x0800d278
 8007920:	0800e14e 	.word	0x0800e14e

08007924 <etharp_cleanup_netif>:
{
 8007924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007926:	4605      	mov	r5, r0
 8007928:	2400      	movs	r4, #0
 800792a:	2718      	movs	r7, #24
 800792c:	4e07      	ldr	r6, [pc, #28]	; (800794c <etharp_cleanup_netif+0x28>)
 800792e:	fb07 6304 	mla	r3, r7, r4, r6
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8007932:	7d1a      	ldrb	r2, [r3, #20]
 8007934:	b12a      	cbz	r2, 8007942 <etharp_cleanup_netif+0x1e>
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	42ab      	cmp	r3, r5
 800793a:	d102      	bne.n	8007942 <etharp_cleanup_netif+0x1e>
      etharp_free_entry(i);
 800793c:	4620      	mov	r0, r4
 800793e:	f7ff fedd 	bl	80076fc <etharp_free_entry>
 8007942:	3401      	adds	r4, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007944:	2c0a      	cmp	r4, #10
 8007946:	d1f2      	bne.n	800792e <etharp_cleanup_netif+0xa>
}
 8007948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800794a:	bf00      	nop
 800794c:	20000d70 	.word	0x20000d70

08007950 <etharp_input>:
{
 8007950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007954:	4680      	mov	r8, r0
 8007956:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8007958:	460c      	mov	r4, r1
 800795a:	b949      	cbnz	r1, 8007970 <etharp_input+0x20>
 800795c:	4b42      	ldr	r3, [pc, #264]	; (8007a68 <etharp_input+0x118>)
 800795e:	f44f 7222 	mov.w	r2, #648	; 0x288
 8007962:	4942      	ldr	r1, [pc, #264]	; (8007a6c <etharp_input+0x11c>)
 8007964:	4842      	ldr	r0, [pc, #264]	; (8007a70 <etharp_input+0x120>)
 8007966:	f002 f845 	bl	80099f4 <iprintf>
}
 800796a:	b006      	add	sp, #24
 800796c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 8007970:	6846      	ldr	r6, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8007972:	8833      	ldrh	r3, [r6, #0]
 8007974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007978:	d108      	bne.n	800798c <etharp_input+0x3c>
 800797a:	7933      	ldrb	r3, [r6, #4]
 800797c:	2b06      	cmp	r3, #6
 800797e:	d105      	bne.n	800798c <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8007980:	7973      	ldrb	r3, [r6, #5]
 8007982:	2b04      	cmp	r3, #4
 8007984:	d102      	bne.n	800798c <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8007986:	8873      	ldrh	r3, [r6, #2]
 8007988:	2b08      	cmp	r3, #8
 800798a:	d003      	beq.n	8007994 <etharp_input+0x44>
  pbuf_free(p);
 800798c:	4640      	mov	r0, r8
 800798e:	f7fc fbff 	bl	8004190 <pbuf_free>
 8007992:	e7ea      	b.n	800796a <etharp_input+0x1a>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8007994:	f8d6 300e 	ldr.w	r3, [r6, #14]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007998:	684d      	ldr	r5, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800799a:	9305      	str	r3, [sp, #20]
 800799c:	f106 0708 	add.w	r7, r6, #8
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 80079a0:	69b3      	ldr	r3, [r6, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80079a2:	b115      	cbz	r5, 80079aa <etharp_input+0x5a>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80079a4:	429d      	cmp	r5, r3
 80079a6:	d05b      	beq.n	8007a60 <etharp_input+0x110>
    for_us = 0;
 80079a8:	2500      	movs	r5, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80079aa:	f04f 0902 	mov.w	r9, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80079ae:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80079b2:	2b06      	cmp	r3, #6
 80079b4:	d006      	beq.n	80079c4 <etharp_input+0x74>
 80079b6:	4b2c      	ldr	r3, [pc, #176]	; (8007a68 <etharp_input+0x118>)
 80079b8:	f240 12ab 	movw	r2, #427	; 0x1ab
 80079bc:	492d      	ldr	r1, [pc, #180]	; (8007a74 <etharp_input+0x124>)
 80079be:	482c      	ldr	r0, [pc, #176]	; (8007a70 <etharp_input+0x120>)
 80079c0:	f002 f818 	bl	80099f4 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 80079c4:	9805      	ldr	r0, [sp, #20]
 80079c6:	b3b0      	cbz	r0, 8007a36 <etharp_input+0xe6>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80079c8:	4621      	mov	r1, r4
 80079ca:	f000 fc96 	bl	80082fa <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 80079ce:	4682      	mov	sl, r0
 80079d0:	bb88      	cbnz	r0, 8007a36 <etharp_input+0xe6>
      ip4_addr_ismulticast(ipaddr)) {
 80079d2:	9b05      	ldr	r3, [sp, #20]
 80079d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80079d8:	2be0      	cmp	r3, #224	; 0xe0
 80079da:	d02c      	beq.n	8007a36 <etharp_input+0xe6>
  i = etharp_find_entry(ipaddr, flags, netif);
 80079dc:	4649      	mov	r1, r9
 80079de:	a805      	add	r0, sp, #20
 80079e0:	f7ff ff16 	bl	8007810 <etharp_find_entry.isra.0>
  if (i < 0) {
 80079e4:	2800      	cmp	r0, #0
 80079e6:	db26      	blt.n	8007a36 <etharp_input+0xe6>
    arp_table[i].state = ETHARP_STATE_STABLE;
 80079e8:	2318      	movs	r3, #24
 80079ea:	4343      	muls	r3, r0
 80079ec:	2002      	movs	r0, #2
 80079ee:	4a22      	ldr	r2, [pc, #136]	; (8007a78 <etharp_input+0x128>)
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80079f0:	f103 0c0c 	add.w	ip, r3, #12
    arp_table[i].state = ETHARP_STATE_STABLE;
 80079f4:	18d1      	adds	r1, r2, r3
 80079f6:	7508      	strb	r0, [r1, #20]
  arp_table[i].netif = netif;
 80079f8:	608c      	str	r4, [r1, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80079fa:	6838      	ldr	r0, [r7, #0]
 80079fc:	eb02 0e0c 	add.w	lr, r2, ip
 8007a00:	f842 000c 	str.w	r0, [r2, ip]
 8007a04:	88b8      	ldrh	r0, [r7, #4]
 8007a06:	f8ae 0004 	strh.w	r0, [lr, #4]
  if (arp_table[i].q != NULL) {
 8007a0a:	f852 9003 	ldr.w	r9, [r2, r3]
  arp_table[i].ctime = 0;
 8007a0e:	f8a1 a012 	strh.w	sl, [r1, #18]
  if (arp_table[i].q != NULL) {
 8007a12:	f1b9 0f00 	cmp.w	r9, #0
 8007a16:	d00e      	beq.n	8007a36 <etharp_input+0xe6>
    arp_table[i].q = NULL;
 8007a18:	f842 a003 	str.w	sl, [r2, r3]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8007a1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a20:	f104 0229 	add.w	r2, r4, #41	; 0x29
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	4649      	mov	r1, r9
 8007a28:	463b      	mov	r3, r7
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	f001 f870 	bl	8008b10 <ethernet_output>
    pbuf_free(p);
 8007a30:	4648      	mov	r0, r9
 8007a32:	f7fc fbad 	bl	8004190 <pbuf_free>
  switch (hdr->opcode) {
 8007a36:	88f3      	ldrh	r3, [r6, #6]
 8007a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a3c:	d1a6      	bne.n	800798c <etharp_input+0x3c>
    if (for_us) {
 8007a3e:	2d00      	cmp	r5, #0
 8007a40:	d0a4      	beq.n	800798c <etharp_input+0x3c>
      etharp_raw(netif,
 8007a42:	2202      	movs	r2, #2
 8007a44:	9203      	str	r2, [sp, #12]
 8007a46:	aa05      	add	r2, sp, #20
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8007a48:	f104 0329 	add.w	r3, r4, #41	; 0x29
      etharp_raw(netif,
 8007a4c:	e9cd 7201 	strd	r7, r2, [sp, #4]
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8007a50:	1d22      	adds	r2, r4, #4
      etharp_raw(netif,
 8007a52:	9200      	str	r2, [sp, #0]
 8007a54:	4619      	mov	r1, r3
 8007a56:	463a      	mov	r2, r7
 8007a58:	4620      	mov	r0, r4
 8007a5a:	f7ff fe6d 	bl	8007738 <etharp_raw>
 8007a5e:	e795      	b.n	800798c <etharp_input+0x3c>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8007a60:	2501      	movs	r5, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8007a62:	46a9      	mov	r9, r5
 8007a64:	e7a3      	b.n	80079ae <etharp_input+0x5e>
 8007a66:	bf00      	nop
 8007a68:	0800e243 	.word	0x0800e243
 8007a6c:	0800d26a 	.word	0x0800d26a
 8007a70:	0800d278 	.word	0x0800d278
 8007a74:	0800e1ad 	.word	0x0800e1ad
 8007a78:	20000d70 	.word	0x20000d70

08007a7c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8007a7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8007a7e:	2401      	movs	r4, #1
{
 8007a80:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8007a82:	e9cd 1402 	strd	r1, r4, [sp, #8]
 8007a86:	4906      	ldr	r1, [pc, #24]	; (8007aa0 <etharp_request+0x24>)
 8007a88:	f100 0329 	add.w	r3, r0, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8007a8c:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8007a8e:	9101      	str	r1, [sp, #4]
 8007a90:	9200      	str	r2, [sp, #0]
 8007a92:	4619      	mov	r1, r3
 8007a94:	4a03      	ldr	r2, [pc, #12]	; (8007aa4 <etharp_request+0x28>)
 8007a96:	f7ff fe4f 	bl	8007738 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8007a9a:	b004      	add	sp, #16
 8007a9c:	bd10      	pop	{r4, pc}
 8007a9e:	bf00      	nop
 8007aa0:	0800e62d 	.word	0x0800e62d
 8007aa4:	0800e5c1 	.word	0x0800e5c1

08007aa8 <etharp_tmr>:
{
 8007aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aac:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 8007aae:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8007ab0:	2704      	movs	r7, #4
 8007ab2:	4c14      	ldr	r4, [pc, #80]	; (8007b04 <etharp_tmr+0x5c>)
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8007ab4:	f1a4 0804 	sub.w	r8, r4, #4
    u8_t state = arp_table[i].state;
 8007ab8:	7b22      	ldrb	r2, [r4, #12]
    if (state != ETHARP_STATE_EMPTY
 8007aba:	b16a      	cbz	r2, 8007ad8 <etharp_tmr+0x30>
      arp_table[i].ctime++;
 8007abc:	8963      	ldrh	r3, [r4, #10]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8007ac2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8007ac6:	8163      	strh	r3, [r4, #10]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8007ac8:	d203      	bcs.n	8007ad2 <etharp_tmr+0x2a>
 8007aca:	2a01      	cmp	r2, #1
 8007acc:	d10b      	bne.n	8007ae6 <etharp_tmr+0x3e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8007ace:	2b04      	cmp	r3, #4
 8007ad0:	d90d      	bls.n	8007aee <etharp_tmr+0x46>
        etharp_free_entry(i);
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	f7ff fe12 	bl	80076fc <etharp_free_entry>
 8007ad8:	3501      	adds	r5, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007ada:	2d0a      	cmp	r5, #10
 8007adc:	f104 0418 	add.w	r4, r4, #24
 8007ae0:	d1ea      	bne.n	8007ab8 <etharp_tmr+0x10>
}
 8007ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8007ae6:	2a03      	cmp	r2, #3
 8007ae8:	d108      	bne.n	8007afc <etharp_tmr+0x54>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8007aea:	7327      	strb	r7, [r4, #12]
 8007aec:	e7f4      	b.n	8007ad8 <etharp_tmr+0x30>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8007aee:	2118      	movs	r1, #24
 8007af0:	6820      	ldr	r0, [r4, #0]
 8007af2:	fb01 8105 	mla	r1, r1, r5, r8
 8007af6:	f7ff ffc1 	bl	8007a7c <etharp_request>
 8007afa:	e7ed      	b.n	8007ad8 <etharp_tmr+0x30>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8007afc:	2a04      	cmp	r2, #4
 8007afe:	d1eb      	bne.n	8007ad8 <etharp_tmr+0x30>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8007b00:	7326      	strb	r6, [r4, #12]
 8007b02:	e7e9      	b.n	8007ad8 <etharp_tmr+0x30>
 8007b04:	20000d78 	.word	0x20000d78

08007b08 <etharp_output_to_arp_index>:
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8007b08:	2318      	movs	r3, #24
{
 8007b0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8007b0e:	4c23      	ldr	r4, [pc, #140]	; (8007b9c <etharp_output_to_arp_index+0x94>)
{
 8007b10:	b085      	sub	sp, #20
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8007b12:	fb03 4302 	mla	r3, r3, r2, r4
 8007b16:	7d1b      	ldrb	r3, [r3, #20]
{
 8007b18:	4605      	mov	r5, r0
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8007b1a:	2b01      	cmp	r3, #1
{
 8007b1c:	4689      	mov	r9, r1
 8007b1e:	4616      	mov	r6, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8007b20:	d806      	bhi.n	8007b30 <etharp_output_to_arp_index+0x28>
 8007b22:	4b1f      	ldr	r3, [pc, #124]	; (8007ba0 <etharp_output_to_arp_index+0x98>)
 8007b24:	f240 22ed 	movw	r2, #749	; 0x2ed
 8007b28:	491e      	ldr	r1, [pc, #120]	; (8007ba4 <etharp_output_to_arp_index+0x9c>)
 8007b2a:	481f      	ldr	r0, [pc, #124]	; (8007ba8 <etharp_output_to_arp_index+0xa0>)
 8007b2c:	f001 ff62 	bl	80099f4 <iprintf>
 8007b30:	2118      	movs	r1, #24
 8007b32:	4371      	muls	r1, r6
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8007b34:	1867      	adds	r7, r4, r1
 8007b36:	7d3b      	ldrb	r3, [r7, #20]
 8007b38:	f101 060c 	add.w	r6, r1, #12
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	4426      	add	r6, r4
 8007b40:	f105 0829 	add.w	r8, r5, #41	; 0x29
 8007b44:	d10b      	bne.n	8007b5e <etharp_output_to_arp_index+0x56>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8007b46:	8a7b      	ldrh	r3, [r7, #18]
 8007b48:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8007b4c:	d913      	bls.n	8007b76 <etharp_output_to_arp_index+0x6e>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8007b4e:	3104      	adds	r1, #4
 8007b50:	4421      	add	r1, r4
 8007b52:	4628      	mov	r0, r5
 8007b54:	f7ff ff92 	bl	8007a7c <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8007b58:	b908      	cbnz	r0, 8007b5e <etharp_output_to_arp_index+0x56>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	753b      	strb	r3, [r7, #20]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8007b5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b62:	4642      	mov	r2, r8
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	4649      	mov	r1, r9
 8007b68:	4633      	mov	r3, r6
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	f000 ffd0 	bl	8008b10 <ethernet_output>
}
 8007b70:	b005      	add	sp, #20
 8007b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8007b76:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8007b7a:	d3f0      	bcc.n	8007b5e <etharp_output_to_arp_index+0x56>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	9303      	str	r3, [sp, #12]
 8007b80:	4b0a      	ldr	r3, [pc, #40]	; (8007bac <etharp_output_to_arp_index+0xa4>)
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8007b82:	3104      	adds	r1, #4
 8007b84:	4421      	add	r1, r4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8007b86:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8007b88:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8007b8a:	9102      	str	r1, [sp, #8]
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	4632      	mov	r2, r6
 8007b90:	4643      	mov	r3, r8
 8007b92:	4641      	mov	r1, r8
 8007b94:	4628      	mov	r0, r5
 8007b96:	f7ff fdcf 	bl	8007738 <etharp_raw>
 8007b9a:	e7dd      	b.n	8007b58 <etharp_output_to_arp_index+0x50>
 8007b9c:	20000d70 	.word	0x20000d70
 8007ba0:	0800e243 	.word	0x0800e243
 8007ba4:	0800e1d1 	.word	0x0800e1d1
 8007ba8:	0800d278 	.word	0x0800d278
 8007bac:	0800e62d 	.word	0x0800e62d

08007bb0 <etharp_query>:
{
 8007bb0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb4:	4689      	mov	r9, r1
 8007bb6:	4680      	mov	r8, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8007bb8:	4601      	mov	r1, r0
 8007bba:	f8d9 0000 	ldr.w	r0, [r9]
{
 8007bbe:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8007bc0:	f000 fb9b 	bl	80082fa <ip4_addr_isbroadcast_u32>
 8007bc4:	4605      	mov	r5, r0
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	d15a      	bne.n	8007c80 <etharp_query+0xd0>
      ip4_addr_ismulticast(ipaddr) ||
 8007bca:	f8d9 3000 	ldr.w	r3, [r9]
 8007bce:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8007bd2:	2ae0      	cmp	r2, #224	; 0xe0
 8007bd4:	d054      	beq.n	8007c80 <etharp_query+0xd0>
      ip4_addr_isany(ipaddr)) {
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d052      	beq.n	8007c80 <etharp_query+0xd0>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8007bda:	2101      	movs	r1, #1
 8007bdc:	4648      	mov	r0, r9
 8007bde:	f7ff fe17 	bl	8007810 <etharp_find_entry.isra.0>
  if (i < 0) {
 8007be2:	1e06      	subs	r6, r0, #0
 8007be4:	db4f      	blt.n	8007c86 <etharp_query+0xd6>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8007be6:	2318      	movs	r3, #24
 8007be8:	4c3c      	ldr	r4, [pc, #240]	; (8007cdc <etharp_query+0x12c>)
 8007bea:	fb03 4306 	mla	r3, r3, r6, r4
 8007bee:	7d1a      	ldrb	r2, [r3, #20]
 8007bf0:	b91a      	cbnz	r2, 8007bfa <etharp_query+0x4a>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8007bf2:	2501      	movs	r5, #1
    arp_table[i].netif = netif;
 8007bf4:	f8c3 8008 	str.w	r8, [r3, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8007bf8:	751d      	strb	r5, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8007bfa:	2318      	movs	r3, #24
 8007bfc:	fb03 4306 	mla	r3, r3, r6, r4
 8007c00:	7d1b      	ldrb	r3, [r3, #20]
 8007c02:	b933      	cbnz	r3, 8007c12 <etharp_query+0x62>
 8007c04:	4b36      	ldr	r3, [pc, #216]	; (8007ce0 <etharp_query+0x130>)
 8007c06:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007c0a:	4936      	ldr	r1, [pc, #216]	; (8007ce4 <etharp_query+0x134>)
 8007c0c:	4836      	ldr	r0, [pc, #216]	; (8007ce8 <etharp_query+0x138>)
 8007c0e:	f001 fef1 	bl	80099f4 <iprintf>
  if (is_new_entry || (q == NULL)) {
 8007c12:	b90d      	cbnz	r5, 8007c18 <etharp_query+0x68>
 8007c14:	2f00      	cmp	r7, #0
 8007c16:	d138      	bne.n	8007c8a <etharp_query+0xda>
    result = etharp_request(netif, ipaddr);
 8007c18:	4649      	mov	r1, r9
 8007c1a:	4640      	mov	r0, r8
 8007c1c:	f7ff ff2e 	bl	8007a7c <etharp_request>
    if (q == NULL) {
 8007c20:	bbaf      	cbnz	r7, 8007c8e <etharp_query+0xde>
}
 8007c22:	b002      	add	sp, #8
 8007c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8007c28:	d1fb      	bne.n	8007c22 <etharp_query+0x72>
 8007c2a:	463d      	mov	r5, r7
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8007c2c:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8007ce0 <etharp_query+0x130>
 8007c30:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8007cf0 <etharp_query+0x140>
 8007c34:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8007ce8 <etharp_query+0x138>
 8007c38:	896a      	ldrh	r2, [r5, #10]
 8007c3a:	892b      	ldrh	r3, [r5, #8]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d108      	bne.n	8007c52 <etharp_query+0xa2>
 8007c40:	682b      	ldr	r3, [r5, #0]
 8007c42:	b133      	cbz	r3, 8007c52 <etharp_query+0xa2>
 8007c44:	4643      	mov	r3, r8
 8007c46:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8007c4a:	4649      	mov	r1, r9
 8007c4c:	4650      	mov	r0, sl
 8007c4e:	f001 fed1 	bl	80099f4 <iprintf>
      if (p->type != PBUF_ROM) {
 8007c52:	7b2b      	ldrb	r3, [r5, #12]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d12e      	bne.n	8007cb6 <etharp_query+0x106>
      p = p->next;
 8007c58:	682d      	ldr	r5, [r5, #0]
    while (p) {
 8007c5a:	2d00      	cmp	r5, #0
 8007c5c:	d1ec      	bne.n	8007c38 <etharp_query+0x88>
      pbuf_ref(p);
 8007c5e:	4638      	mov	r0, r7
 8007c60:	f7fc fc54 	bl	800450c <pbuf_ref>
 8007c64:	46b8      	mov	r8, r7
      if (arp_table[i].q != NULL) {
 8007c66:	2318      	movs	r3, #24
 8007c68:	fb03 f206 	mul.w	r2, r3, r6
 8007c6c:	58a0      	ldr	r0, [r4, r2]
 8007c6e:	461d      	mov	r5, r3
 8007c70:	b108      	cbz	r0, 8007c76 <etharp_query+0xc6>
        pbuf_free(arp_table[i].q);
 8007c72:	f7fc fa8d 	bl	8004190 <pbuf_free>
      arp_table[i].q = p;
 8007c76:	436e      	muls	r6, r5
      result = ERR_OK;
 8007c78:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8007c7a:	f844 8006 	str.w	r8, [r4, r6]
 8007c7e:	e7d0      	b.n	8007c22 <etharp_query+0x72>
    return ERR_ARG;
 8007c80:	f06f 000f 	mvn.w	r0, #15
 8007c84:	e7cd      	b.n	8007c22 <etharp_query+0x72>
 8007c86:	4630      	mov	r0, r6
 8007c88:	e7cb      	b.n	8007c22 <etharp_query+0x72>
  err_t result = ERR_MEM;
 8007c8a:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8007c8e:	2318      	movs	r3, #24
 8007c90:	4373      	muls	r3, r6
 8007c92:	18e2      	adds	r2, r4, r3
 8007c94:	7d12      	ldrb	r2, [r2, #20]
 8007c96:	2a01      	cmp	r2, #1
 8007c98:	d9c6      	bls.n	8007c28 <etharp_query+0x78>
    ETHARP_SET_HINT(netif, i);
 8007c9a:	4a14      	ldr	r2, [pc, #80]	; (8007cec <etharp_query+0x13c>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8007c9c:	330c      	adds	r3, #12
    ETHARP_SET_HINT(netif, i);
 8007c9e:	7016      	strb	r6, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8007ca0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ca4:	4423      	add	r3, r4
 8007ca6:	9200      	str	r2, [sp, #0]
 8007ca8:	4639      	mov	r1, r7
 8007caa:	f108 0229 	add.w	r2, r8, #41	; 0x29
 8007cae:	4640      	mov	r0, r8
 8007cb0:	f000 ff2e 	bl	8008b10 <ethernet_output>
 8007cb4:	e7b5      	b.n	8007c22 <etharp_query+0x72>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	8929      	ldrh	r1, [r5, #8]
 8007cba:	2002      	movs	r0, #2
 8007cbc:	f7fc faca 	bl	8004254 <pbuf_alloc>
      if (p != NULL) {
 8007cc0:	4680      	mov	r8, r0
 8007cc2:	b138      	cbz	r0, 8007cd4 <etharp_query+0x124>
        if (pbuf_copy(p, q) != ERR_OK) {
 8007cc4:	4639      	mov	r1, r7
 8007cc6:	f7fc fc79 	bl	80045bc <pbuf_copy>
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	d0cb      	beq.n	8007c66 <etharp_query+0xb6>
          pbuf_free(p);
 8007cce:	4640      	mov	r0, r8
 8007cd0:	f7fc fa5e 	bl	8004190 <pbuf_free>
      result = ERR_MEM;
 8007cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd8:	e7a3      	b.n	8007c22 <etharp_query+0x72>
 8007cda:	bf00      	nop
 8007cdc:	20000d70 	.word	0x20000d70
 8007ce0:	0800e243 	.word	0x0800e243
 8007ce4:	0800e201 	.word	0x0800e201
 8007ce8:	0800d278 	.word	0x0800d278
 8007cec:	20000e60 	.word	0x20000e60
 8007cf0:	0800e229 	.word	0x0800e229

08007cf4 <etharp_output>:
{
 8007cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cf6:	460e      	mov	r6, r1
 8007cf8:	b085      	sub	sp, #20
 8007cfa:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	b930      	cbnz	r0, 8007d0e <etharp_output+0x1a>
 8007d00:	4b3d      	ldr	r3, [pc, #244]	; (8007df8 <etharp_output+0x104>)
 8007d02:	f240 321b 	movw	r2, #795	; 0x31b
 8007d06:	493d      	ldr	r1, [pc, #244]	; (8007dfc <etharp_output+0x108>)
 8007d08:	483d      	ldr	r0, [pc, #244]	; (8007e00 <etharp_output+0x10c>)
 8007d0a:	f001 fe73 	bl	80099f4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8007d0e:	b936      	cbnz	r6, 8007d1e <etharp_output+0x2a>
 8007d10:	4b39      	ldr	r3, [pc, #228]	; (8007df8 <etharp_output+0x104>)
 8007d12:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007d16:	493b      	ldr	r1, [pc, #236]	; (8007e04 <etharp_output+0x110>)
 8007d18:	4839      	ldr	r0, [pc, #228]	; (8007e00 <etharp_output+0x10c>)
 8007d1a:	f001 fe6b 	bl	80099f4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8007d1e:	b935      	cbnz	r5, 8007d2e <etharp_output+0x3a>
 8007d20:	4b35      	ldr	r3, [pc, #212]	; (8007df8 <etharp_output+0x104>)
 8007d22:	f240 321d 	movw	r2, #797	; 0x31d
 8007d26:	4938      	ldr	r1, [pc, #224]	; (8007e08 <etharp_output+0x114>)
 8007d28:	4835      	ldr	r0, [pc, #212]	; (8007e00 <etharp_output+0x10c>)
 8007d2a:	f001 fe63 	bl	80099f4 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8007d2e:	4621      	mov	r1, r4
 8007d30:	6828      	ldr	r0, [r5, #0]
 8007d32:	f000 fae2 	bl	80082fa <ip4_addr_isbroadcast_u32>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	d159      	bne.n	8007dee <etharp_output+0xfa>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8007d3a:	682b      	ldr	r3, [r5, #0]
 8007d3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007d40:	2ae0      	cmp	r2, #224	; 0xe0
 8007d42:	d11b      	bne.n	8007d7c <etharp_output+0x88>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8007d44:	2301      	movs	r3, #1
 8007d46:	f8ad 3008 	strh.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8007d4a:	235e      	movs	r3, #94	; 0x5e
 8007d4c:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8007d50:	786b      	ldrb	r3, [r5, #1]
 8007d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d56:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8007d5a:	78ab      	ldrb	r3, [r5, #2]
 8007d5c:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8007d60:	78eb      	ldrb	r3, [r5, #3]
 8007d62:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8007d66:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8007d68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d6c:	4631      	mov	r1, r6
 8007d6e:	9200      	str	r2, [sp, #0]
 8007d70:	4620      	mov	r0, r4
 8007d72:	f104 0229 	add.w	r2, r4, #41	; 0x29
 8007d76:	f000 fecb 	bl	8008b10 <ethernet_output>
 8007d7a:	e01f      	b.n	8007dbc <etharp_output+0xc8>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8007d7c:	6862      	ldr	r2, [r4, #4]
 8007d7e:	68a1      	ldr	r1, [r4, #8]
 8007d80:	405a      	eors	r2, r3
 8007d82:	420a      	tst	r2, r1
 8007d84:	d008      	beq.n	8007d98 <etharp_output+0xa4>
 8007d86:	f64f 62a9 	movw	r2, #65193	; 0xfea9
        !ip4_addr_islinklocal(ipaddr)) {
 8007d8a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d003      	beq.n	8007d98 <etharp_output+0xa4>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8007d90:	68e3      	ldr	r3, [r4, #12]
 8007d92:	b373      	cbz	r3, 8007df2 <etharp_output+0xfe>
            dst_addr = netif_ip4_gw(netif);
 8007d94:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8007d98:	2018      	movs	r0, #24
 8007d9a:	4b1c      	ldr	r3, [pc, #112]	; (8007e0c <etharp_output+0x118>)
 8007d9c:	491c      	ldr	r1, [pc, #112]	; (8007e10 <etharp_output+0x11c>)
 8007d9e:	781a      	ldrb	r2, [r3, #0]
 8007da0:	fb00 1002 	mla	r0, r0, r2, r1
 8007da4:	7d01      	ldrb	r1, [r0, #20]
 8007da6:	2901      	cmp	r1, #1
 8007da8:	4619      	mov	r1, r3
 8007daa:	d909      	bls.n	8007dc0 <etharp_output+0xcc>
 8007dac:	682f      	ldr	r7, [r5, #0]
 8007dae:	6843      	ldr	r3, [r0, #4]
 8007db0:	429f      	cmp	r7, r3
 8007db2:	d105      	bne.n	8007dc0 <etharp_output+0xcc>
        return etharp_output_to_arp_index(netif, q, i);
 8007db4:	4631      	mov	r1, r6
 8007db6:	4620      	mov	r0, r4
 8007db8:	f7ff fea6 	bl	8007b08 <etharp_output_to_arp_index>
}
 8007dbc:	b005      	add	sp, #20
 8007dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	4b13      	ldr	r3, [pc, #76]	; (8007e10 <etharp_output+0x11c>)
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8007dc4:	7d18      	ldrb	r0, [r3, #20]
 8007dc6:	2801      	cmp	r0, #1
 8007dc8:	d906      	bls.n	8007dd8 <etharp_output+0xe4>
 8007dca:	682f      	ldr	r7, [r5, #0]
 8007dcc:	6858      	ldr	r0, [r3, #4]
 8007dce:	4287      	cmp	r7, r0
 8007dd0:	d102      	bne.n	8007dd8 <etharp_output+0xe4>
        ETHARP_SET_HINT(netif, i);
 8007dd2:	b2d2      	uxtb	r2, r2
 8007dd4:	700a      	strb	r2, [r1, #0]
 8007dd6:	e7ed      	b.n	8007db4 <etharp_output+0xc0>
 8007dd8:	3201      	adds	r2, #1
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8007dda:	2a0a      	cmp	r2, #10
 8007ddc:	f103 0318 	add.w	r3, r3, #24
 8007de0:	d1f0      	bne.n	8007dc4 <etharp_output+0xd0>
    return etharp_query(netif, dst_addr, q);
 8007de2:	4632      	mov	r2, r6
 8007de4:	4629      	mov	r1, r5
 8007de6:	4620      	mov	r0, r4
 8007de8:	f7ff fee2 	bl	8007bb0 <etharp_query>
 8007dec:	e7e6      	b.n	8007dbc <etharp_output+0xc8>
    dest = (const struct eth_addr *)&ethbroadcast;
 8007dee:	4b09      	ldr	r3, [pc, #36]	; (8007e14 <etharp_output+0x120>)
 8007df0:	e7ba      	b.n	8007d68 <etharp_output+0x74>
            return ERR_RTE;
 8007df2:	f06f 0003 	mvn.w	r0, #3
 8007df6:	e7e1      	b.n	8007dbc <etharp_output+0xc8>
 8007df8:	0800e243 	.word	0x0800e243
 8007dfc:	0800d26a 	.word	0x0800d26a
 8007e00:	0800d278 	.word	0x0800d278
 8007e04:	0800d7fd 	.word	0x0800d7fd
 8007e08:	0800e18e 	.word	0x0800e18e
 8007e0c:	20000e60 	.word	0x20000e60
 8007e10:	20000d70 	.word	0x20000d70
 8007e14:	0800e5c1 	.word	0x0800e5c1

08007e18 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8007e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	b087      	sub	sp, #28
 8007e1e:	460f      	mov	r7, r1
 8007e20:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8007e22:	2124      	movs	r1, #36	; 0x24
 8007e24:	2200      	movs	r2, #0
 8007e26:	2001      	movs	r0, #1
 8007e28:	f7fc fa14 	bl	8004254 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8007e2c:	4605      	mov	r5, r0
 8007e2e:	b3a0      	cbz	r0, 8007e9a <icmp_send_response.isra.0+0x82>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8007e30:	8943      	ldrh	r3, [r0, #10]
 8007e32:	2b23      	cmp	r3, #35	; 0x23
 8007e34:	d806      	bhi.n	8007e44 <icmp_send_response.isra.0+0x2c>
 8007e36:	4b1a      	ldr	r3, [pc, #104]	; (8007ea0 <icmp_send_response.isra.0+0x88>)
 8007e38:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8007e3c:	4919      	ldr	r1, [pc, #100]	; (8007ea4 <icmp_send_response.isra.0+0x8c>)
 8007e3e:	481a      	ldr	r0, [pc, #104]	; (8007ea8 <icmp_send_response.isra.0+0x90>)
 8007e40:	f001 fdd8 	bl	80099f4 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8007e44:	2300      	movs	r3, #0
  iphdr = (struct ip_hdr *)p->payload;
 8007e46:	6822      	ldr	r2, [r4, #0]
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8007e48:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8007e4a:	f102 001c 	add.w	r0, r2, #28
  icmphdr->id = 0;
 8007e4e:	7123      	strb	r3, [r4, #4]
 8007e50:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8007e52:	71a3      	strb	r3, [r4, #6]
 8007e54:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8007e56:	4613      	mov	r3, r2
  icmphdr->type = type;
 8007e58:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8007e5a:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8007e5c:	f104 0108 	add.w	r1, r4, #8
 8007e60:	f853 6b04 	ldr.w	r6, [r3], #4
 8007e64:	4283      	cmp	r3, r0
 8007e66:	f841 6b04 	str.w	r6, [r1], #4
 8007e6a:	d1f9      	bne.n	8007e60 <icmp_send_response.isra.0+0x48>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8007e6c:	68d3      	ldr	r3, [r2, #12]
 8007e6e:	ae06      	add	r6, sp, #24
 8007e70:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8007e74:	4630      	mov	r0, r6
 8007e76:	f000 f8bb 	bl	8007ff0 <ip4_route>
#endif
  if (netif != NULL) {
 8007e7a:	b158      	cbz	r0, 8007e94 <icmp_send_response.isra.0+0x7c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8007e7c:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8007e7e:	2301      	movs	r3, #1
    icmphdr->chksum = 0;
 8007e80:	70a1      	strb	r1, [r4, #2]
 8007e82:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8007e84:	4632      	mov	r2, r6
 8007e86:	9002      	str	r0, [sp, #8]
 8007e88:	e9cd 1300 	strd	r1, r3, [sp]
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	23ff      	movs	r3, #255	; 0xff
 8007e90:	f000 fa22 	bl	80082d8 <ip4_output_if>
  }
  pbuf_free(q);
 8007e94:	4628      	mov	r0, r5
 8007e96:	f7fc f97b 	bl	8004190 <pbuf_free>
}
 8007e9a:	b007      	add	sp, #28
 8007e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	0800e353 	.word	0x0800e353
 8007ea4:	0800e388 	.word	0x0800e388
 8007ea8:	0800d278 	.word	0x0800d278

08007eac <icmp_input>:
{
 8007eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8007eb0:	4b44      	ldr	r3, [pc, #272]	; (8007fc4 <icmp_input+0x118>)
{
 8007eb2:	b085      	sub	sp, #20
  iphdr_in = ip4_current_header();
 8007eb4:	f8d3 9008 	ldr.w	r9, [r3, #8]
{
 8007eb8:	4604      	mov	r4, r0
  hlen = IPH_HL(iphdr_in) * 4;
 8007eba:	f899 5000 	ldrb.w	r5, [r9]
{
 8007ebe:	4688      	mov	r8, r1
  hlen = IPH_HL(iphdr_in) * 4;
 8007ec0:	f005 050f 	and.w	r5, r5, #15
 8007ec4:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 8007ec6:	2d13      	cmp	r5, #19
 8007ec8:	461f      	mov	r7, r3
 8007eca:	d92a      	bls.n	8007f22 <icmp_input+0x76>
  if (p->len < sizeof(u16_t)*2) {
 8007ecc:	8942      	ldrh	r2, [r0, #10]
 8007ece:	2a03      	cmp	r2, #3
 8007ed0:	d927      	bls.n	8007f22 <icmp_input+0x76>
  type = *((u8_t *)p->payload);
 8007ed2:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 8007ed4:	7812      	ldrb	r2, [r2, #0]
 8007ed6:	2a08      	cmp	r2, #8
 8007ed8:	d123      	bne.n	8007f22 <icmp_input+0x76>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8007eda:	6958      	ldr	r0, [r3, #20]
 8007edc:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8007ee0:	2ae0      	cmp	r2, #224	; 0xe0
 8007ee2:	d01e      	beq.n	8007f22 <icmp_input+0x76>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8007ee4:	6819      	ldr	r1, [r3, #0]
 8007ee6:	f000 fa08 	bl	80082fa <ip4_addr_isbroadcast_u32>
 8007eea:	4606      	mov	r6, r0
 8007eec:	b9c8      	cbnz	r0, 8007f22 <icmp_input+0x76>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8007eee:	8923      	ldrh	r3, [r4, #8]
 8007ef0:	2b07      	cmp	r3, #7
 8007ef2:	d916      	bls.n	8007f22 <icmp_input+0x76>
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8007ef4:	f105 010e 	add.w	r1, r5, #14
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f7fc f943 	bl	8004184 <pbuf_header>
 8007efe:	2800      	cmp	r0, #0
 8007f00:	d04f      	beq.n	8007fa2 <icmp_input+0xf6>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8007f02:	8921      	ldrh	r1, [r4, #8]
 8007f04:	4632      	mov	r2, r6
 8007f06:	4429      	add	r1, r5
 8007f08:	b289      	uxth	r1, r1
 8007f0a:	2002      	movs	r0, #2
 8007f0c:	f7fc f9a2 	bl	8004254 <pbuf_alloc>
      if (r == NULL) {
 8007f10:	4606      	mov	r6, r0
 8007f12:	b130      	cbz	r0, 8007f22 <icmp_input+0x76>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8007f14:	8942      	ldrh	r2, [r0, #10]
 8007f16:	f105 0308 	add.w	r3, r5, #8
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d207      	bcs.n	8007f2e <icmp_input+0x82>
        pbuf_free(r);
 8007f1e:	f7fc f937 	bl	8004190 <pbuf_free>
  pbuf_free(p);
 8007f22:	4620      	mov	r0, r4
}
 8007f24:	b005      	add	sp, #20
 8007f26:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8007f2a:	f7fc b931 	b.w	8004190 <pbuf_free>
      MEMCPY(r->payload, iphdr_in, hlen);
 8007f2e:	4649      	mov	r1, r9
 8007f30:	462a      	mov	r2, r5
 8007f32:	6840      	ldr	r0, [r0, #4]
 8007f34:	f000 fe67 	bl	8008c06 <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 8007f38:	4269      	negs	r1, r5
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	f7fc f922 	bl	8004184 <pbuf_header>
 8007f40:	b138      	cbz	r0, 8007f52 <icmp_input+0xa6>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8007f42:	4b21      	ldr	r3, [pc, #132]	; (8007fc8 <icmp_input+0x11c>)
 8007f44:	22af      	movs	r2, #175	; 0xaf
 8007f46:	4921      	ldr	r1, [pc, #132]	; (8007fcc <icmp_input+0x120>)
 8007f48:	4821      	ldr	r0, [pc, #132]	; (8007fd0 <icmp_input+0x124>)
 8007f4a:	f001 fd53 	bl	80099f4 <iprintf>
        pbuf_free(r);
 8007f4e:	4630      	mov	r0, r6
 8007f50:	e7e5      	b.n	8007f1e <icmp_input+0x72>
      if (pbuf_copy(r, p) != ERR_OK) {
 8007f52:	4621      	mov	r1, r4
 8007f54:	4630      	mov	r0, r6
 8007f56:	f7fc fb31 	bl	80045bc <pbuf_copy>
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	d1f7      	bne.n	8007f4e <icmp_input+0xa2>
      pbuf_free(p);
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f7fc f916 	bl	8004190 <pbuf_free>
 8007f64:	4634      	mov	r4, r6
    if (pbuf_header(p, (s16_t)hlen)) {
 8007f66:	4629      	mov	r1, r5
 8007f68:	4620      	mov	r0, r4
    iecho = (struct icmp_echo_hdr *)p->payload;
 8007f6a:	6866      	ldr	r6, [r4, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 8007f6c:	f7fc f90a 	bl	8004184 <pbuf_header>
 8007f70:	4602      	mov	r2, r0
 8007f72:	2800      	cmp	r0, #0
 8007f74:	d1d5      	bne.n	8007f22 <icmp_input+0x76>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8007f76:	6861      	ldr	r1, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	60cb      	str	r3, [r1, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	610b      	str	r3, [r1, #16]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8007f80:	23ff      	movs	r3, #255	; 0xff
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8007f82:	7030      	strb	r0, [r6, #0]
      iecho->chksum = 0;
 8007f84:	70b0      	strb	r0, [r6, #2]
 8007f86:	70f0      	strb	r0, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8007f88:	720b      	strb	r3, [r1, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8007f8a:	7288      	strb	r0, [r1, #10]
 8007f8c:	72c8      	strb	r0, [r1, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8007f8e:	2101      	movs	r1, #1
 8007f90:	f8cd 8008 	str.w	r8, [sp, #8]
 8007f94:	e9cd 0100 	strd	r0, r1, [sp]
 8007f98:	490e      	ldr	r1, [pc, #56]	; (8007fd4 <icmp_input+0x128>)
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f000 f99c 	bl	80082d8 <ip4_output_if>
 8007fa0:	e7bf      	b.n	8007f22 <icmp_input+0x76>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8007fa2:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 8007fa6:	31f2      	adds	r1, #242	; 0xf2
 8007fa8:	b209      	sxth	r1, r1
 8007faa:	4620      	mov	r0, r4
 8007fac:	f7fc f8ea 	bl	8004184 <pbuf_header>
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	d0d8      	beq.n	8007f66 <icmp_input+0xba>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8007fb4:	4b04      	ldr	r3, [pc, #16]	; (8007fc8 <icmp_input+0x11c>)
 8007fb6:	22c0      	movs	r2, #192	; 0xc0
 8007fb8:	4907      	ldr	r1, [pc, #28]	; (8007fd8 <icmp_input+0x12c>)
 8007fba:	4805      	ldr	r0, [pc, #20]	; (8007fd0 <icmp_input+0x124>)
 8007fbc:	f001 fd1a 	bl	80099f4 <iprintf>
        goto icmperr;
 8007fc0:	e7af      	b.n	8007f22 <icmp_input+0x76>
 8007fc2:	bf00      	nop
 8007fc4:	200060c0 	.word	0x200060c0
 8007fc8:	0800e353 	.word	0x0800e353
 8007fcc:	0800e2ec 	.word	0x0800e2ec
 8007fd0:	0800d278 	.word	0x0800d278
 8007fd4:	200060d4 	.word	0x200060d4
 8007fd8:	0800e321 	.word	0x0800e321

08007fdc <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 8007fdc:	460a      	mov	r2, r1
 8007fde:	3004      	adds	r0, #4
 8007fe0:	2103      	movs	r1, #3
 8007fe2:	f7ff bf19 	b.w	8007e18 <icmp_send_response.isra.0>

08007fe6 <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 8007fe6:	460a      	mov	r2, r1
 8007fe8:	3004      	adds	r0, #4
 8007fea:	210b      	movs	r1, #11
 8007fec:	f7ff bf14 	b.w	8007e18 <icmp_send_response.isra.0>

08007ff0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8007ff0:	b530      	push	{r4, r5, lr}
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8007ff2:	4b13      	ldr	r3, [pc, #76]	; (8008040 <ip4_route+0x50>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	b96b      	cbnz	r3, 8008014 <ip4_route+0x24>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8007ff8:	4a12      	ldr	r2, [pc, #72]	; (8008044 <ip4_route+0x54>)
 8007ffa:	6812      	ldr	r2, [r2, #0]
 8007ffc:	b1ea      	cbz	r2, 800803a <ip4_route+0x4a>
 8007ffe:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
 8008002:	f001 0105 	and.w	r1, r1, #5
 8008006:	2905      	cmp	r1, #5
 8008008:	d117      	bne.n	800803a <ip4_route+0x4a>
 800800a:	6851      	ldr	r1, [r2, #4]
 800800c:	2900      	cmp	r1, #0
 800800e:	bf18      	it	ne
 8008010:	4613      	movne	r3, r2
 8008012:	e012      	b.n	800803a <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008014:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8008018:	07cd      	lsls	r5, r1, #31
 800801a:	d5eb      	bpl.n	8007ff4 <ip4_route+0x4>
 800801c:	074c      	lsls	r4, r1, #29
 800801e:	d5e9      	bpl.n	8007ff4 <ip4_route+0x4>
 8008020:	685a      	ldr	r2, [r3, #4]
 8008022:	2a00      	cmp	r2, #0
 8008024:	d0e6      	beq.n	8007ff4 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8008026:	6804      	ldr	r4, [r0, #0]
 8008028:	689d      	ldr	r5, [r3, #8]
 800802a:	4062      	eors	r2, r4
 800802c:	422a      	tst	r2, r5
 800802e:	d004      	beq.n	800803a <ip4_route+0x4a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8008030:	078a      	lsls	r2, r1, #30
 8008032:	d4df      	bmi.n	8007ff4 <ip4_route+0x4>
 8008034:	68da      	ldr	r2, [r3, #12]
 8008036:	4294      	cmp	r4, r2
 8008038:	d1dc      	bne.n	8007ff4 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 800803a:	4618      	mov	r0, r3
 800803c:	bd30      	pop	{r4, r5, pc}
 800803e:	bf00      	nop
 8008040:	200060d8 	.word	0x200060d8
 8008044:	200060dc 	.word	0x200060dc

08008048 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8008048:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800804c:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
 8008050:	4605      	mov	r5, r0
  if (IPH_V(iphdr) != 4) {
 8008052:	f898 9000 	ldrb.w	r9, [r8]
{
 8008056:	460f      	mov	r7, r1
  if (IPH_V(iphdr) != 4) {
 8008058:	ea4f 1319 	mov.w	r3, r9, lsr #4
 800805c:	2b04      	cmp	r3, #4
 800805e:	d005      	beq.n	800806c <ip4_input+0x24>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8008060:	4628      	mov	r0, r5
 8008062:	f7fc f895 	bl	8004190 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8008066:	2000      	movs	r0, #0
 8008068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800806c:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8008070:	f7fb fe10 	bl	8003c94 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8008074:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen = IPH_HL(iphdr);
 8008076:	f009 090f 	and.w	r9, r9, #15
  if (iphdr_len < p->tot_len) {
 800807a:	4283      	cmp	r3, r0
  iphdr_hlen *= 4;
 800807c:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8008080:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 8008082:	d903      	bls.n	800808c <ip4_input+0x44>
    pbuf_realloc(p, iphdr_len);
 8008084:	4601      	mov	r1, r0
 8008086:	4628      	mov	r0, r5
 8008088:	f7fc f9c8 	bl	800441c <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800808c:	896b      	ldrh	r3, [r5, #10]
 800808e:	454b      	cmp	r3, r9
 8008090:	d3e6      	bcc.n	8008060 <ip4_input+0x18>
 8008092:	892b      	ldrh	r3, [r5, #8]
 8008094:	42a3      	cmp	r3, r4
 8008096:	d3e3      	bcc.n	8008060 <ip4_input+0x18>
 8008098:	f1b9 0f13 	cmp.w	r9, #19
 800809c:	d9e0      	bls.n	8008060 <ip4_input+0x18>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800809e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80080a2:	4c4f      	ldr	r4, [pc, #316]	; (80081e0 <ip4_input+0x198>)
 80080a4:	6163      	str	r3, [r4, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80080a6:	f8d8 200c 	ldr.w	r2, [r8, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80080aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080ae:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80080b0:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80080b2:	d143      	bne.n	800813c <ip4_input+0xf4>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80080b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80080b8:	07da      	lsls	r2, r3, #31
 80080ba:	d502      	bpl.n	80080c2 <ip4_input+0x7a>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d163      	bne.n	800818a <ip4_input+0x142>
      netif = NULL;
 80080c2:	2600      	movs	r6, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80080c4:	4639      	mov	r1, r7
 80080c6:	6920      	ldr	r0, [r4, #16]
 80080c8:	f000 f917 	bl	80082fa <ip4_addr_isbroadcast_u32>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	d1c7      	bne.n	8008060 <ip4_input+0x18>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80080d0:	6923      	ldr	r3, [r4, #16]
 80080d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80080d6:	2be0      	cmp	r3, #224	; 0xe0
 80080d8:	d0c2      	beq.n	8008060 <ip4_input+0x18>
  if (netif == NULL) {
 80080da:	2e00      	cmp	r6, #0
 80080dc:	d0c0      	beq.n	8008060 <ip4_input+0x18>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80080de:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80080e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80080e6:	b13b      	cbz	r3, 80080f8 <ip4_input+0xb0>
    p = ip4_reass(p);
 80080e8:	4628      	mov	r0, r5
 80080ea:	f000 fa37 	bl	800855c <ip4_reass>
    if (p == NULL) {
 80080ee:	4605      	mov	r5, r0
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d0b8      	beq.n	8008066 <ip4_input+0x1e>
    iphdr = (struct ip_hdr *)p->payload;
 80080f4:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_input_netif = inp;
 80080f8:	e9c4 6700 	strd	r6, r7, [r4]
  ip_data.current_ip4_header = iphdr;
 80080fc:	f8c4 8008 	str.w	r8, [r4, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8008100:	f898 3000 	ldrb.w	r3, [r8]
  if (raw_input(p, inp) == 0)
 8008104:	4639      	mov	r1, r7
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8008106:	f003 030f 	and.w	r3, r3, #15
 800810a:	009b      	lsls	r3, r3, #2
  if (raw_input(p, inp) == 0)
 800810c:	4628      	mov	r0, r5
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800810e:	81a3      	strh	r3, [r4, #12]
  if (raw_input(p, inp) == 0)
 8008110:	f7fc fb20 	bl	8004754 <raw_input>
 8008114:	2800      	cmp	r0, #0
 8008116:	d13e      	bne.n	8008196 <ip4_input+0x14e>
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8008118:	f1c9 0100 	rsb	r1, r9, #0
 800811c:	4628      	mov	r0, r5
 800811e:	f7fc f831 	bl	8004184 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 8008122:	f898 3009 	ldrb.w	r3, [r8, #9]
 8008126:	2b06      	cmp	r3, #6
 8008128:	d03d      	beq.n	80081a6 <ip4_input+0x15e>
 800812a:	2b11      	cmp	r3, #17
 800812c:	d02f      	beq.n	800818e <ip4_input+0x146>
 800812e:	2b01      	cmp	r3, #1
 8008130:	d13e      	bne.n	80081b0 <ip4_input+0x168>
      icmp_input(p, inp);
 8008132:	4639      	mov	r1, r7
 8008134:	4628      	mov	r0, r5
 8008136:	f7ff feb9 	bl	8007eac <icmp_input>
      break;
 800813a:	e02c      	b.n	8008196 <ip4_input+0x14e>
 800813c:	463e      	mov	r6, r7
    int first = 1;
 800813e:	f04f 0a01 	mov.w	sl, #1
        netif = netif_list;
 8008142:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 80081e4 <ip4_input+0x19c>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8008146:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
 800814a:	07db      	lsls	r3, r3, #31
 800814c:	d404      	bmi.n	8008158 <ip4_input+0x110>
      if (first) {
 800814e:	f1ba 0f00 	cmp.w	sl, #0
 8008152:	d10d      	bne.n	8008170 <ip4_input+0x128>
        netif = netif->next;
 8008154:	6836      	ldr	r6, [r6, #0]
 8008156:	e010      	b.n	800817a <ip4_input+0x132>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8008158:	6873      	ldr	r3, [r6, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0f7      	beq.n	800814e <ip4_input+0x106>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800815e:	6960      	ldr	r0, [r4, #20]
 8008160:	4283      	cmp	r3, r0
 8008162:	d0af      	beq.n	80080c4 <ip4_input+0x7c>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8008164:	4631      	mov	r1, r6
 8008166:	f000 f8c8 	bl	80082fa <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800816a:	2800      	cmp	r0, #0
 800816c:	d0ef      	beq.n	800814e <ip4_input+0x106>
 800816e:	e7a9      	b.n	80080c4 <ip4_input+0x7c>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8008170:	7d23      	ldrb	r3, [r4, #20]
 8008172:	2b7f      	cmp	r3, #127	; 0x7f
 8008174:	d0a5      	beq.n	80080c2 <ip4_input+0x7a>
        netif = netif_list;
 8008176:	f8db 6000 	ldr.w	r6, [fp]
      if (netif == inp) {
 800817a:	42b7      	cmp	r7, r6
        netif = netif->next;
 800817c:	bf08      	it	eq
 800817e:	683e      	ldreq	r6, [r7, #0]
 8008180:	f04f 0a00 	mov.w	sl, #0
    } while (netif != NULL);
 8008184:	2e00      	cmp	r6, #0
 8008186:	d1de      	bne.n	8008146 <ip4_input+0xfe>
 8008188:	e79b      	b.n	80080c2 <ip4_input+0x7a>
 800818a:	463e      	mov	r6, r7
 800818c:	e79a      	b.n	80080c4 <ip4_input+0x7c>
      udp_input(p, inp);
 800818e:	4639      	mov	r1, r7
 8008190:	4628      	mov	r0, r5
 8008192:	f7ff f8fd 	bl	8007390 <udp_input>
  ip_data.current_netif = NULL;
 8008196:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 8008198:	e9c4 3300 	strd	r3, r3, [r4]
  ip_data.current_ip4_header = NULL;
 800819c:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 800819e:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 80081a0:	e9c4 3304 	strd	r3, r3, [r4, #16]
  return ERR_OK;
 80081a4:	e75f      	b.n	8008066 <ip4_input+0x1e>
      tcp_input(p, inp);
 80081a6:	4639      	mov	r1, r7
 80081a8:	4628      	mov	r0, r5
 80081aa:	f7fd fea5 	bl	8005ef8 <tcp_input>
      break;
 80081ae:	e7f2      	b.n	8008196 <ip4_input+0x14e>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80081b0:	4631      	mov	r1, r6
 80081b2:	6960      	ldr	r0, [r4, #20]
 80081b4:	f000 f8a1 	bl	80082fa <ip4_addr_isbroadcast_u32>
 80081b8:	b970      	cbnz	r0, 80081d8 <ip4_input+0x190>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80081ba:	6963      	ldr	r3, [r4, #20]
 80081bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80081c0:	2be0      	cmp	r3, #224	; 0xe0
 80081c2:	d009      	beq.n	80081d8 <ip4_input+0x190>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 80081c4:	4649      	mov	r1, r9
 80081c6:	4628      	mov	r0, r5
 80081c8:	f7fb ffdf 	bl	800418a <pbuf_header_force>
        p->payload = iphdr;
 80081cc:	f8c5 8004 	str.w	r8, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80081d0:	2102      	movs	r1, #2
 80081d2:	4628      	mov	r0, r5
 80081d4:	f7ff ff02 	bl	8007fdc <icmp_dest_unreach>
      pbuf_free(p);
 80081d8:	4628      	mov	r0, r5
 80081da:	f7fb ffd9 	bl	8004190 <pbuf_free>
 80081de:	e7da      	b.n	8008196 <ip4_input+0x14e>
 80081e0:	200060c0 	.word	0x200060c0
 80081e4:	200060d8 	.word	0x200060d8

080081e8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80081e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80081ec:	461f      	mov	r7, r3
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80081ee:	89c3      	ldrh	r3, [r0, #14]
{
 80081f0:	4605      	mov	r5, r0
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80081f2:	2b01      	cmp	r3, #1
{
 80081f4:	468a      	mov	sl, r1
 80081f6:	4616      	mov	r6, r2
 80081f8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80081fc:	d006      	beq.n	800820c <ip4_output_if_src+0x24>
 80081fe:	4b30      	ldr	r3, [pc, #192]	; (80082c0 <ip4_output_if_src+0xd8>)
 8008200:	f240 3233 	movw	r2, #819	; 0x333
 8008204:	492f      	ldr	r1, [pc, #188]	; (80082c4 <ip4_output_if_src+0xdc>)
 8008206:	4830      	ldr	r0, [pc, #192]	; (80082c8 <ip4_output_if_src+0xe0>)
 8008208:	f001 fbf4 	bl	80099f4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800820c:	2e00      	cmp	r6, #0
 800820e:	d047      	beq.n	80082a0 <ip4_output_if_src+0xb8>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8008210:	2114      	movs	r1, #20
 8008212:	4628      	mov	r0, r5
 8008214:	f7fb ffb6 	bl	8004184 <pbuf_header>
 8008218:	2800      	cmp	r0, #0
 800821a:	d14e      	bne.n	80082ba <ip4_output_if_src+0xd2>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800821c:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800821e:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8008220:	2b13      	cmp	r3, #19
 8008222:	d806      	bhi.n	8008232 <ip4_output_if_src+0x4a>
 8008224:	4b26      	ldr	r3, [pc, #152]	; (80082c0 <ip4_output_if_src+0xd8>)
 8008226:	f240 3261 	movw	r2, #865	; 0x361
 800822a:	4928      	ldr	r1, [pc, #160]	; (80082cc <ip4_output_if_src+0xe4>)
 800822c:	4826      	ldr	r0, [pc, #152]	; (80082c8 <ip4_output_if_src+0xe0>)
 800822e:	f001 fbe1 	bl	80099f4 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 8008232:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 8008236:	7227      	strb	r7, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 8008238:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800823a:	6833      	ldr	r3, [r6, #0]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800823c:	2700      	movs	r7, #0
    ip4_addr_copy(iphdr->dest, *dest);
 800823e:	6123      	str	r3, [r4, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8008240:	2345      	movs	r3, #69	; 0x45
 8008242:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 8008244:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8008248:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80082d4 <ip4_output_if_src+0xec>
    IPH_TOS_SET(iphdr, tos);
 800824c:	7063      	strb	r3, [r4, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800824e:	8928      	ldrh	r0, [r5, #8]
 8008250:	f7fb fd20 	bl	8003c94 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8008254:	71a7      	strb	r7, [r4, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8008256:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8008258:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800825a:	f8b9 0000 	ldrh.w	r0, [r9]
 800825e:	f7fb fd19 	bl	8003c94 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8008262:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8008266:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 8008268:	3301      	adds	r3, #1
 800826a:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800826e:	f1ba 0f00 	cmp.w	sl, #0
 8008272:	d112      	bne.n	800829a <ip4_output_if_src+0xb2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8008274:	4b16      	ldr	r3, [pc, #88]	; (80082d0 <ip4_output_if_src+0xe8>)
 8008276:	681b      	ldr	r3, [r3, #0]
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8008278:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800827a:	72a7      	strb	r7, [r4, #10]
 800827c:	72e7      	strb	r7, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800827e:	f8b8 3026 	ldrh.w	r3, [r8, #38]	; 0x26
 8008282:	b19b      	cbz	r3, 80082ac <ip4_output_if_src+0xc4>
 8008284:	892a      	ldrh	r2, [r5, #8]
 8008286:	429a      	cmp	r2, r3
 8008288:	d910      	bls.n	80082ac <ip4_output_if_src+0xc4>
    return ip4_frag(p, netif, dest);
 800828a:	4632      	mov	r2, r6
 800828c:	4641      	mov	r1, r8
 800828e:	4628      	mov	r0, r5
 8008290:	f000 fb14 	bl	80088bc <ip4_frag>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8008294:	b002      	add	sp, #8
 8008296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip4_addr_copy(iphdr->src, *src);
 800829a:	f8da 3000 	ldr.w	r3, [sl]
 800829e:	e7eb      	b.n	8008278 <ip4_output_if_src+0x90>
    ip4_addr_copy(dest_addr, iphdr->dest);
 80082a0:	686b      	ldr	r3, [r5, #4]
 80082a2:	ae02      	add	r6, sp, #8
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	f846 3d04 	str.w	r3, [r6, #-4]!
 80082aa:	e7e8      	b.n	800827e <ip4_output_if_src+0x96>
  return netif->output(netif, p, dest);
 80082ac:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80082b0:	4632      	mov	r2, r6
 80082b2:	4629      	mov	r1, r5
 80082b4:	4640      	mov	r0, r8
 80082b6:	4798      	blx	r3
 80082b8:	e7ec      	b.n	8008294 <ip4_output_if_src+0xac>
      return ERR_BUF;
 80082ba:	f06f 0001 	mvn.w	r0, #1
 80082be:	e7e9      	b.n	8008294 <ip4_output_if_src+0xac>
 80082c0:	0800e3b4 	.word	0x0800e3b4
 80082c4:	0800e3e8 	.word	0x0800e3e8
 80082c8:	0800d278 	.word	0x0800d278
 80082cc:	0800e3f4 	.word	0x0800e3f4
 80082d0:	0800e424 	.word	0x0800e424
 80082d4:	20000e62 	.word	0x20000e62

080082d8 <ip4_output_if>:
{
 80082d8:	b4f0      	push	{r4, r5, r6, r7}
 80082da:	9c06      	ldr	r4, [sp, #24]
 80082dc:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80082e0:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80082e4:	b11a      	cbz	r2, 80082ee <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 80082e6:	b109      	cbz	r1, 80082ec <ip4_output_if+0x14>
 80082e8:	680f      	ldr	r7, [r1, #0]
 80082ea:	b907      	cbnz	r7, 80082ee <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 80082ec:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80082ee:	e9cd 6405 	strd	r6, r4, [sp, #20]
 80082f2:	9504      	str	r5, [sp, #16]
}
 80082f4:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80082f6:	f7ff bf77 	b.w	80081e8 <ip4_output_if_src>

080082fa <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80082fa:	1e43      	subs	r3, r0, #1
 80082fc:	3303      	adds	r3, #3
 80082fe:	d811      	bhi.n	8008324 <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8008300:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 8008304:	f013 0302 	ands.w	r3, r3, #2
 8008308:	d00e      	beq.n	8008328 <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800830a:	684a      	ldr	r2, [r1, #4]
 800830c:	4282      	cmp	r2, r0
 800830e:	d00b      	beq.n	8008328 <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8008310:	688b      	ldr	r3, [r1, #8]
 8008312:	4042      	eors	r2, r0
 8008314:	421a      	tst	r2, r3
 8008316:	d107      	bne.n	8008328 <ip4_addr_isbroadcast_u32+0x2e>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8008318:	43db      	mvns	r3, r3
 800831a:	4383      	bics	r3, r0
    return 1;
 800831c:	bf0c      	ite	eq
 800831e:	2001      	moveq	r0, #1
 8008320:	2000      	movne	r0, #0
 8008322:	4770      	bx	lr
 8008324:	2001      	movs	r0, #1
 8008326:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8008328:	2000      	movs	r0, #0
  }
}
 800832a:	4770      	bx	lr

0800832c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800832c:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800832e:	4b0c      	ldr	r3, [pc, #48]	; (8008360 <ip_reass_dequeue_datagram+0x34>)
{
 8008330:	4604      	mov	r4, r0
  if (reassdatagrams == ipr) {
 8008332:	681a      	ldr	r2, [r3, #0]
{
 8008334:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 8008336:	4282      	cmp	r2, r0
 8008338:	d107      	bne.n	800834a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800833a:	6802      	ldr	r2, [r0, #0]
 800833c:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800833e:	4621      	mov	r1, r4
}
 8008340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 8008344:	2005      	movs	r0, #5
 8008346:	f7fb bdb9 	b.w	8003ebc <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800834a:	b931      	cbnz	r1, 800835a <ip_reass_dequeue_datagram+0x2e>
 800834c:	4b05      	ldr	r3, [pc, #20]	; (8008364 <ip_reass_dequeue_datagram+0x38>)
 800834e:	f240 1245 	movw	r2, #325	; 0x145
 8008352:	4905      	ldr	r1, [pc, #20]	; (8008368 <ip_reass_dequeue_datagram+0x3c>)
 8008354:	4805      	ldr	r0, [pc, #20]	; (800836c <ip_reass_dequeue_datagram+0x40>)
 8008356:	f001 fb4d 	bl	80099f4 <iprintf>
    prev->next = ipr->next;
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	602b      	str	r3, [r5, #0]
 800835e:	e7ee      	b.n	800833e <ip_reass_dequeue_datagram+0x12>
 8008360:	20000e68 	.word	0x20000e68
 8008364:	0800e50d 	.word	0x0800e50d
 8008368:	0800e546 	.word	0x0800e546
 800836c:	0800d278 	.word	0x0800d278

08008370 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8008370:	4281      	cmp	r1, r0
{
 8008372:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008376:	4605      	mov	r5, r0
 8008378:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800837a:	d105      	bne.n	8008388 <ip_reass_free_complete_datagram+0x18>
 800837c:	4b2f      	ldr	r3, [pc, #188]	; (800843c <ip_reass_free_complete_datagram+0xcc>)
 800837e:	22ab      	movs	r2, #171	; 0xab
 8008380:	492f      	ldr	r1, [pc, #188]	; (8008440 <ip_reass_free_complete_datagram+0xd0>)
 8008382:	4830      	ldr	r0, [pc, #192]	; (8008444 <ip_reass_free_complete_datagram+0xd4>)
 8008384:	f001 fb36 	bl	80099f4 <iprintf>
  if (prev != NULL) {
 8008388:	b147      	cbz	r7, 800839c <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	42ab      	cmp	r3, r5
 800838e:	d005      	beq.n	800839c <ip_reass_free_complete_datagram+0x2c>
 8008390:	4b2a      	ldr	r3, [pc, #168]	; (800843c <ip_reass_free_complete_datagram+0xcc>)
 8008392:	22ad      	movs	r2, #173	; 0xad
 8008394:	492c      	ldr	r1, [pc, #176]	; (8008448 <ip_reass_free_complete_datagram+0xd8>)
 8008396:	482b      	ldr	r0, [pc, #172]	; (8008444 <ip_reass_free_complete_datagram+0xd4>)
 8008398:	f001 fb2c 	bl	80099f4 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800839c:	686e      	ldr	r6, [r5, #4]
 800839e:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 80083a0:	889a      	ldrh	r2, [r3, #4]
 80083a2:	bb92      	cbnz	r2, 800840a <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 80083a4:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80083a6:	f105 011c 	add.w	r1, r5, #28
    ipr->p = iprh->next_pbuf;
 80083aa:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80083ac:	f105 0208 	add.w	r2, r5, #8
 80083b0:	f852 0b04 	ldr.w	r0, [r2], #4
 80083b4:	428a      	cmp	r2, r1
 80083b6:	f843 0b04 	str.w	r0, [r3], #4
 80083ba:	d1f9      	bne.n	80083b0 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80083bc:	2101      	movs	r1, #1
 80083be:	4630      	mov	r0, r6
 80083c0:	f7ff fe11 	bl	8007fe6 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80083c4:	4630      	mov	r0, r6
 80083c6:	f7fc f899 	bl	80044fc <pbuf_clen>
 80083ca:	4604      	mov	r4, r0
    pbuf_free(p);
 80083cc:	4630      	mov	r0, r6
 80083ce:	f7fb fedf 	bl	8004190 <pbuf_free>
  p = ipr->p;
 80083d2:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80083d4:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800843c <ip_reass_free_complete_datagram+0xcc>
 80083d8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8008454 <ip_reass_free_complete_datagram+0xe4>
 80083dc:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008444 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 80083e0:	b9ae      	cbnz	r6, 800840e <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 80083e2:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 80083e4:	4d19      	ldr	r5, [pc, #100]	; (800844c <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 80083e6:	4639      	mov	r1, r7
 80083e8:	f7ff ffa0 	bl	800832c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 80083ec:	882b      	ldrh	r3, [r5, #0]
 80083ee:	42a3      	cmp	r3, r4
 80083f0:	d205      	bcs.n	80083fe <ip_reass_free_complete_datagram+0x8e>
 80083f2:	4b12      	ldr	r3, [pc, #72]	; (800843c <ip_reass_free_complete_datagram+0xcc>)
 80083f4:	22d2      	movs	r2, #210	; 0xd2
 80083f6:	4916      	ldr	r1, [pc, #88]	; (8008450 <ip_reass_free_complete_datagram+0xe0>)
 80083f8:	4812      	ldr	r0, [pc, #72]	; (8008444 <ip_reass_free_complete_datagram+0xd4>)
 80083fa:	f001 fafb 	bl	80099f4 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 80083fe:	882b      	ldrh	r3, [r5, #0]
}
 8008400:	4620      	mov	r0, r4
  ip_reass_pbufcount -= pbufs_freed;
 8008402:	1b1b      	subs	r3, r3, r4
 8008404:	802b      	strh	r3, [r5, #0]
}
 8008406:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 800840a:	2400      	movs	r4, #0
 800840c:	e7e1      	b.n	80083d2 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 800840e:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 8008410:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 8008412:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 8008416:	f7fc f871 	bl	80044fc <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800841a:	4404      	add	r4, r0
 800841c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8008420:	db05      	blt.n	800842e <ip_reass_free_complete_datagram+0xbe>
 8008422:	4643      	mov	r3, r8
 8008424:	22cc      	movs	r2, #204	; 0xcc
 8008426:	4649      	mov	r1, r9
 8008428:	4650      	mov	r0, sl
 800842a:	f001 fae3 	bl	80099f4 <iprintf>
    pbuf_free(pcur);
 800842e:	4630      	mov	r0, r6
    pbufs_freed += clen;
 8008430:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 8008432:	f7fb fead 	bl	8004190 <pbuf_free>
    p = iprh->next_pbuf;
 8008436:	465e      	mov	r6, fp
 8008438:	e7d2      	b.n	80083e0 <ip_reass_free_complete_datagram+0x70>
 800843a:	bf00      	nop
 800843c:	0800e50d 	.word	0x0800e50d
 8008440:	0800e55f 	.word	0x0800e55f
 8008444:	0800d278 	.word	0x0800d278
 8008448:	0800e56b 	.word	0x0800e56b
 800844c:	20000e64 	.word	0x20000e64
 8008450:	0800e59a 	.word	0x0800e59a
 8008454:	0800e57d 	.word	0x0800e57d

08008458 <ip_reass_remove_oldest_datagram>:
{
 8008458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800845c:	4606      	mov	r6, r0
 800845e:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8008460:	2500      	movs	r5, #0
    r = reassdatagrams;
 8008462:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80084cc <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 8008466:	2400      	movs	r4, #0
    oldest_prev = NULL;
 8008468:	4621      	mov	r1, r4
    prev = NULL;
 800846a:	46a4      	mov	ip, r4
    oldest = NULL;
 800846c:	4620      	mov	r0, r4
    r = reassdatagrams;
 800846e:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 8008472:	b953      	cbnz	r3, 800848a <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8008474:	b110      	cbz	r0, 800847c <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8008476:	f7ff ff7b 	bl	8008370 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800847a:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800847c:	42bd      	cmp	r5, r7
 800847e:	da01      	bge.n	8008484 <ip_reass_remove_oldest_datagram+0x2c>
 8008480:	2c01      	cmp	r4, #1
 8008482:	dcf0      	bgt.n	8008466 <ip_reass_remove_oldest_datagram+0xe>
}
 8008484:	4628      	mov	r0, r5
 8008486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800848a:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 800848e:	695a      	ldr	r2, [r3, #20]
 8008490:	4572      	cmp	r2, lr
 8008492:	d109      	bne.n	80084a8 <ip_reass_remove_oldest_datagram+0x50>
 8008494:	f8d6 e010 	ldr.w	lr, [r6, #16]
 8008498:	699a      	ldr	r2, [r3, #24]
 800849a:	4572      	cmp	r2, lr
 800849c:	d104      	bne.n	80084a8 <ip_reass_remove_oldest_datagram+0x50>
 800849e:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 80084a2:	88b2      	ldrh	r2, [r6, #4]
 80084a4:	4596      	cmp	lr, r2
 80084a6:	d008      	beq.n	80084ba <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 80084a8:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80084aa:	b160      	cbz	r0, 80084c6 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 80084ac:	7fc2      	ldrb	r2, [r0, #31]
 80084ae:	f893 e01f 	ldrb.w	lr, [r3, #31]
          oldest_prev = prev;
 80084b2:	4596      	cmp	lr, r2
 80084b4:	bf9c      	itt	ls
 80084b6:	4661      	movls	r1, ip
 80084b8:	4618      	movls	r0, r3
      if (r->next != NULL) {
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	2a00      	cmp	r2, #0
 80084be:	bf18      	it	ne
 80084c0:	469c      	movne	ip, r3
 80084c2:	4613      	mov	r3, r2
 80084c4:	e7d5      	b.n	8008472 <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 80084c6:	4661      	mov	r1, ip
 80084c8:	4618      	mov	r0, r3
 80084ca:	e7f6      	b.n	80084ba <ip_reass_remove_oldest_datagram+0x62>
 80084cc:	20000e68 	.word	0x20000e68

080084d0 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 80084d0:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 80084d2:	4604      	mov	r4, r0
 80084d4:	b930      	cbnz	r0, 80084e4 <ip_frag_free_pbuf_custom_ref+0x14>
 80084d6:	4b06      	ldr	r3, [pc, #24]	; (80084f0 <ip_frag_free_pbuf_custom_ref+0x20>)
 80084d8:	f240 22ae 	movw	r2, #686	; 0x2ae
 80084dc:	4905      	ldr	r1, [pc, #20]	; (80084f4 <ip_frag_free_pbuf_custom_ref+0x24>)
 80084de:	4806      	ldr	r0, [pc, #24]	; (80084f8 <ip_frag_free_pbuf_custom_ref+0x28>)
 80084e0:	f001 fa88 	bl	80099f4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80084e4:	4621      	mov	r1, r4
}
 80084e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 80084ea:	2006      	movs	r0, #6
 80084ec:	f7fb bce6 	b.w	8003ebc <memp_free>
 80084f0:	0800e50d 	.word	0x0800e50d
 80084f4:	0800d7b9 	.word	0x0800d7b9
 80084f8:	0800d278 	.word	0x0800d278

080084fc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80084fc:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80084fe:	4604      	mov	r4, r0
 8008500:	b930      	cbnz	r0, 8008510 <ipfrag_free_pbuf_custom+0x14>
 8008502:	4b08      	ldr	r3, [pc, #32]	; (8008524 <ipfrag_free_pbuf_custom+0x28>)
 8008504:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8008508:	4907      	ldr	r1, [pc, #28]	; (8008528 <ipfrag_free_pbuf_custom+0x2c>)
 800850a:	4808      	ldr	r0, [pc, #32]	; (800852c <ipfrag_free_pbuf_custom+0x30>)
 800850c:	f001 fa72 	bl	80099f4 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 8008510:	6960      	ldr	r0, [r4, #20]
 8008512:	b108      	cbz	r0, 8008518 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8008514:	f7fb fe3c 	bl	8004190 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8008518:	4620      	mov	r0, r4
}
 800851a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 800851e:	f7ff bfd7 	b.w	80084d0 <ip_frag_free_pbuf_custom_ref>
 8008522:	bf00      	nop
 8008524:	0800e50d 	.word	0x0800e50d
 8008528:	0800e5b5 	.word	0x0800e5b5
 800852c:	0800d278 	.word	0x0800d278

08008530 <ip_reass_tmr>:
{
 8008530:	b538      	push	{r3, r4, r5, lr}
  struct ip_reassdata *r, *prev = NULL;
 8008532:	2400      	movs	r4, #0
  r = reassdatagrams;
 8008534:	4b08      	ldr	r3, [pc, #32]	; (8008558 <ip_reass_tmr+0x28>)
 8008536:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 8008538:	b900      	cbnz	r0, 800853c <ip_reass_tmr+0xc>
}
 800853a:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 800853c:	7fc3      	ldrb	r3, [r0, #31]
 800853e:	6805      	ldr	r5, [r0, #0]
 8008540:	b123      	cbz	r3, 800854c <ip_reass_tmr+0x1c>
      r->timer--;
 8008542:	3b01      	subs	r3, #1
 8008544:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
 8008546:	4604      	mov	r4, r0
 8008548:	4628      	mov	r0, r5
 800854a:	e7f5      	b.n	8008538 <ip_reass_tmr+0x8>
 800854c:	4621      	mov	r1, r4
 800854e:	f7ff ff0f 	bl	8008370 <ip_reass_free_complete_datagram>
 8008552:	4620      	mov	r0, r4
 8008554:	e7f7      	b.n	8008546 <ip_reass_tmr+0x16>
 8008556:	bf00      	nop
 8008558:	20000e68 	.word	0x20000e68

0800855c <ip4_reass>:
{
 800855c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 8008560:	6845      	ldr	r5, [r0, #4]
{
 8008562:	4607      	mov	r7, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8008564:	782b      	ldrb	r3, [r5, #0]
 8008566:	f003 030f 	and.w	r3, r3, #15
 800856a:	2b05      	cmp	r3, #5
 800856c:	f040 8092 	bne.w	8008694 <ip4_reass+0x138>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8008570:	88e8      	ldrh	r0, [r5, #6]
 8008572:	f7fb fb8f 	bl	8003c94 <lwip_htons>
 8008576:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800857a:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800857e:	8868      	ldrh	r0, [r5, #2]
 8008580:	f7fb fb88 	bl	8003c94 <lwip_htons>
 8008584:	782b      	ldrb	r3, [r5, #0]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8008586:	4cb3      	ldr	r4, [pc, #716]	; (8008854 <ip4_reass+0x2f8>)
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8008588:	f003 030f 	and.w	r3, r3, #15
 800858c:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 8008590:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 8008592:	4638      	mov	r0, r7
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8008594:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 8008596:	f7fb ffb1 	bl	80044fc <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800859a:	8823      	ldrh	r3, [r4, #0]
  clen = pbuf_clen(p);
 800859c:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800859e:	4403      	add	r3, r0
 80085a0:	2b0a      	cmp	r3, #10
 80085a2:	dc6e      	bgt.n	8008682 <ip4_reass+0x126>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80085a4:	4eac      	ldr	r6, [pc, #688]	; (8008858 <ip4_reass+0x2fc>)
 80085a6:	6834      	ldr	r4, [r6, #0]
 80085a8:	2c00      	cmp	r4, #0
 80085aa:	d178      	bne.n	800869e <ip4_reass+0x142>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80085ac:	f44f 728f 	mov.w	r2, #286	; 0x11e
 80085b0:	49aa      	ldr	r1, [pc, #680]	; (800885c <ip4_reass+0x300>)
 80085b2:	2005      	movs	r0, #5
 80085b4:	f7fb fc66 	bl	8003e84 <memp_malloc_fn>
  if (ipr == NULL) {
 80085b8:	4604      	mov	r4, r0
 80085ba:	b970      	cbnz	r0, 80085da <ip4_reass+0x7e>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80085bc:	4651      	mov	r1, sl
 80085be:	4628      	mov	r0, r5
 80085c0:	f7ff ff4a 	bl	8008458 <ip_reass_remove_oldest_datagram>
 80085c4:	4582      	cmp	sl, r0
 80085c6:	dc65      	bgt.n	8008694 <ip4_reass+0x138>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80085c8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80085cc:	49a3      	ldr	r1, [pc, #652]	; (800885c <ip4_reass+0x300>)
 80085ce:	2005      	movs	r0, #5
 80085d0:	f7fb fc58 	bl	8003e84 <memp_malloc_fn>
    if (ipr == NULL)
 80085d4:	4604      	mov	r4, r0
 80085d6:	2800      	cmp	r0, #0
 80085d8:	d05c      	beq.n	8008694 <ip4_reass+0x138>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80085da:	221c      	movs	r2, #28
 80085dc:	2100      	movs	r1, #0
 80085de:	1d20      	adds	r0, r4, #4
 80085e0:	f000 fb1c 	bl	8008c1c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80085e4:	2303      	movs	r3, #3
 80085e6:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 80085e8:	6833      	ldr	r3, [r6, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80085ea:	f104 0208 	add.w	r2, r4, #8
  ipr->next = reassdatagrams;
 80085ee:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80085f0:	462b      	mov	r3, r5
  reassdatagrams = ipr;
 80085f2:	6034      	str	r4, [r6, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80085f4:	f105 0114 	add.w	r1, r5, #20
 80085f8:	f853 0b04 	ldr.w	r0, [r3], #4
 80085fc:	428b      	cmp	r3, r1
 80085fe:	f842 0b04 	str.w	r0, [r2], #4
 8008602:	d1f9      	bne.n	80085f8 <ip4_reass+0x9c>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8008604:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  if (is_last) {
 8008608:	f01b 0b20 	ands.w	fp, fp, #32
 800860c:	d108      	bne.n	8008620 <ip4_reass+0xc4>
    u16_t datagram_len = (u16_t)(offset + len);
 800860e:	9b01      	ldr	r3, [sp, #4]
 8008610:	444b      	add	r3, r9
 8008612:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8008614:	4599      	cmp	r9, r3
 8008616:	d83d      	bhi.n	8008694 <ip4_reass+0x138>
 8008618:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800861c:	4293      	cmp	r3, r2
 800861e:	d839      	bhi.n	8008694 <ip4_reass+0x138>
  fraghdr = (struct ip_hdr*)new_p->payload;
 8008620:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8008622:	8868      	ldrh	r0, [r5, #2]
 8008624:	f7fb fb36 	bl	8003c94 <lwip_htons>
 8008628:	f895 8000 	ldrb.w	r8, [r5]
 800862c:	f008 080f 	and.w	r8, r8, #15
 8008630:	eba0 0888 	sub.w	r8, r0, r8, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8008634:	88e8      	ldrh	r0, [r5, #6]
 8008636:	f7fb fb2d 	bl	8003c94 <lwip_htons>
  for (q = ipr->p; q != NULL;) {
 800863a:	f8d4 c004 	ldr.w	ip, [r4, #4]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800863e:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh->next_pbuf = NULL;
 8008642:	2500      	movs	r5, #0
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8008644:	fa1f f888 	uxth.w	r8, r8
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8008648:	00c0      	lsls	r0, r0, #3
  iprh->end = offset + len;
 800864a:	eb08 0300 	add.w	r3, r8, r0
  for (q = ipr->p; q != NULL;) {
 800864e:	4662      	mov	r2, ip
  int valid = 1;
 8008650:	f04f 0801 	mov.w	r8, #1
  iprh = (struct ip_reass_helper*)new_p->payload;
 8008654:	687e      	ldr	r6, [r7, #4]
  iprh->end = offset + len;
 8008656:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 8008658:	7035      	strb	r5, [r6, #0]
 800865a:	7075      	strb	r5, [r6, #1]
 800865c:	70b5      	strb	r5, [r6, #2]
 800865e:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 8008660:	80b0      	strh	r0, [r6, #4]
  iprh->end = offset + len;
 8008662:	80f3      	strh	r3, [r6, #6]
  for (q = ipr->p; q != NULL;) {
 8008664:	bb52      	cbnz	r2, 80086bc <ip4_reass+0x160>
    if (iprh_prev != NULL) {
 8008666:	2d00      	cmp	r5, #0
 8008668:	f040 8092 	bne.w	8008790 <ip4_reass+0x234>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800866c:	f1bc 0f00 	cmp.w	ip, #0
 8008670:	d07d      	beq.n	800876e <ip4_reass+0x212>
 8008672:	4b7a      	ldr	r3, [pc, #488]	; (800885c <ip4_reass+0x300>)
 8008674:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8008678:	4979      	ldr	r1, [pc, #484]	; (8008860 <ip4_reass+0x304>)
 800867a:	487a      	ldr	r0, [pc, #488]	; (8008864 <ip4_reass+0x308>)
 800867c:	f001 f9ba 	bl	80099f4 <iprintf>
 8008680:	e075      	b.n	800876e <ip4_reass+0x212>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8008682:	4601      	mov	r1, r0
 8008684:	4628      	mov	r0, r5
 8008686:	f7ff fee7 	bl	8008458 <ip_reass_remove_oldest_datagram>
 800868a:	b118      	cbz	r0, 8008694 <ip4_reass+0x138>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800868c:	8823      	ldrh	r3, [r4, #0]
 800868e:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8008690:	2b0a      	cmp	r3, #10
 8008692:	dd87      	ble.n	80085a4 <ip4_reass+0x48>
  pbuf_free(p);
 8008694:	4638      	mov	r0, r7
 8008696:	f7fb fd7b 	bl	8004190 <pbuf_free>
  return NULL;
 800869a:	2500      	movs	r5, #0
 800869c:	e0d6      	b.n	800884c <ip4_reass+0x2f0>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800869e:	68eb      	ldr	r3, [r5, #12]
 80086a0:	6962      	ldr	r2, [r4, #20]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d108      	bne.n	80086b8 <ip4_reass+0x15c>
 80086a6:	692b      	ldr	r3, [r5, #16]
 80086a8:	69a2      	ldr	r2, [r4, #24]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d104      	bne.n	80086b8 <ip4_reass+0x15c>
 80086ae:	89a2      	ldrh	r2, [r4, #12]
 80086b0:	88ab      	ldrh	r3, [r5, #4]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	f000 80de 	beq.w	8008874 <ip4_reass+0x318>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80086b8:	6824      	ldr	r4, [r4, #0]
 80086ba:	e775      	b.n	80085a8 <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 80086bc:	f8d2 e004 	ldr.w	lr, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 80086c0:	f8be 1004 	ldrh.w	r1, [lr, #4]
 80086c4:	4288      	cmp	r0, r1
 80086c6:	d254      	bcs.n	8008772 <ip4_reass+0x216>
      iprh->next_pbuf = q;
 80086c8:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 80086ca:	2d00      	cmp	r5, #0
 80086cc:	d04d      	beq.n	800876a <ip4_reass+0x20e>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80086ce:	88ea      	ldrh	r2, [r5, #6]
 80086d0:	4290      	cmp	r0, r2
 80086d2:	f0c0 8091 	bcc.w	80087f8 <ip4_reass+0x29c>
 80086d6:	428b      	cmp	r3, r1
 80086d8:	f200 808e 	bhi.w	80087f8 <ip4_reass+0x29c>
        iprh_prev->next_pbuf = new_p;
 80086dc:	602f      	str	r7, [r5, #0]
        if (iprh_prev->end != iprh->start) {
 80086de:	4290      	cmp	r0, r2
      if (iprh_prev->end != iprh->start) {
 80086e0:	f040 80e4 	bne.w	80088ac <ip4_reass+0x350>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80086e4:	f1bb 0f00 	cmp.w	fp, #0
 80086e8:	d004      	beq.n	80086f4 <ip4_reass+0x198>
 80086ea:	7fa3      	ldrb	r3, [r4, #30]
 80086ec:	f013 0301 	ands.w	r3, r3, #1
 80086f0:	f000 808d 	beq.w	800880e <ip4_reass+0x2b2>
    if (valid) {
 80086f4:	f1b8 0f00 	cmp.w	r8, #0
 80086f8:	d159      	bne.n	80087ae <ip4_reass+0x252>
          q = iprh->next_pbuf;
 80086fa:	f04f 0800 	mov.w	r8, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80086fe:	4e55      	ldr	r6, [pc, #340]	; (8008854 <ip4_reass+0x2f8>)
 8008700:	8833      	ldrh	r3, [r6, #0]
 8008702:	449a      	add	sl, r3
 8008704:	f8a6 a000 	strh.w	sl, [r6]
  if (is_last) {
 8008708:	f1bb 0f00 	cmp.w	fp, #0
 800870c:	d107      	bne.n	800871e <ip4_reass+0x1c2>
    u16_t datagram_len = (u16_t)(offset + len);
 800870e:	9b01      	ldr	r3, [sp, #4]
 8008710:	4499      	add	r9, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8008712:	7fa3      	ldrb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8008714:	f8a4 901c 	strh.w	r9, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8008718:	f043 0301 	orr.w	r3, r3, #1
 800871c:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800871e:	f1b8 0f01 	cmp.w	r8, #1
 8008722:	d1ba      	bne.n	800869a <ip4_reass+0x13e>
    ipr->datagram_len += IP_HLEN;
 8008724:	8ba3      	ldrh	r3, [r4, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8008726:	f104 011c 	add.w	r1, r4, #28
    ipr->datagram_len += IP_HLEN;
 800872a:	3314      	adds	r3, #20
 800872c:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800872e:	6863      	ldr	r3, [r4, #4]
 8008730:	685d      	ldr	r5, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8008732:	f104 0308 	add.w	r3, r4, #8
 8008736:	462a      	mov	r2, r5
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8008738:	682f      	ldr	r7, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800873a:	f853 0b04 	ldr.w	r0, [r3], #4
 800873e:	428b      	cmp	r3, r1
 8008740:	f842 0b04 	str.w	r0, [r2], #4
 8008744:	d1f9      	bne.n	800873a <ip4_reass+0x1de>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8008746:	8ba0      	ldrh	r0, [r4, #28]
 8008748:	f7fb faa4 	bl	8003c94 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 800874c:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800874e:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8008750:	71ab      	strb	r3, [r5, #6]
 8008752:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8008754:	72ab      	strb	r3, [r5, #10]
 8008756:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 8008758:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 800875a:	2f00      	cmp	r7, #0
 800875c:	d159      	bne.n	8008812 <ip4_reass+0x2b6>
    if (ipr == reassdatagrams) {
 800875e:	4b3e      	ldr	r3, [pc, #248]	; (8008858 <ip4_reass+0x2fc>)
 8008760:	6819      	ldr	r1, [r3, #0]
 8008762:	428c      	cmp	r4, r1
 8008764:	d167      	bne.n	8008836 <ip4_reass+0x2da>
      ipr_prev = NULL;
 8008766:	4639      	mov	r1, r7
 8008768:	e067      	b.n	800883a <ip4_reass+0x2de>
        if (iprh->end > iprh_tmp->start) {
 800876a:	428b      	cmp	r3, r1
 800876c:	d844      	bhi.n	80087f8 <ip4_reass+0x29c>
      ipr->p = new_p;
 800876e:	6067      	str	r7, [r4, #4]
 8008770:	e7b8      	b.n	80086e4 <ip4_reass+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8008772:	d041      	beq.n	80087f8 <ip4_reass+0x29c>
    } else if (iprh->start < iprh_tmp->end) {
 8008774:	f8be 2006 	ldrh.w	r2, [lr, #6]
 8008778:	4282      	cmp	r2, r0
 800877a:	d83d      	bhi.n	80087f8 <ip4_reass+0x29c>
      if (iprh_prev != NULL) {
 800877c:	b125      	cbz	r5, 8008788 <ip4_reass+0x22c>
        if (iprh_prev->end != iprh_tmp->start) {
 800877e:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 8008780:	428a      	cmp	r2, r1
 8008782:	bf18      	it	ne
 8008784:	f04f 0800 	movne.w	r8, #0
    q = iprh_tmp->next_pbuf;
 8008788:	f8de 2000 	ldr.w	r2, [lr]
 800878c:	4675      	mov	r5, lr
 800878e:	e769      	b.n	8008664 <ip4_reass+0x108>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8008790:	88eb      	ldrh	r3, [r5, #6]
 8008792:	4283      	cmp	r3, r0
 8008794:	d906      	bls.n	80087a4 <ip4_reass+0x248>
 8008796:	4b31      	ldr	r3, [pc, #196]	; (800885c <ip4_reass+0x300>)
 8008798:	f240 12ab 	movw	r2, #427	; 0x1ab
 800879c:	4932      	ldr	r1, [pc, #200]	; (8008868 <ip4_reass+0x30c>)
 800879e:	4831      	ldr	r0, [pc, #196]	; (8008864 <ip4_reass+0x308>)
 80087a0:	f001 f928 	bl	80099f4 <iprintf>
      iprh_prev->next_pbuf = new_p;
 80087a4:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 80087a6:	88ea      	ldrh	r2, [r5, #6]
 80087a8:	88b3      	ldrh	r3, [r6, #4]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	e798      	b.n	80086e0 <ip4_reass+0x184>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80087ae:	6863      	ldr	r3, [r4, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d0a2      	beq.n	80086fa <ip4_reass+0x19e>
 80087b4:	6859      	ldr	r1, [r3, #4]
 80087b6:	888b      	ldrh	r3, [r1, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d19e      	bne.n	80086fa <ip4_reass+0x19e>
        q = iprh->next_pbuf;
 80087bc:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 80087be:	b99b      	cbnz	r3, 80087e8 <ip4_reass+0x28c>
          LWIP_ASSERT("sanity check",
 80087c0:	42b1      	cmp	r1, r6
 80087c2:	d106      	bne.n	80087d2 <ip4_reass+0x276>
 80087c4:	4b25      	ldr	r3, [pc, #148]	; (800885c <ip4_reass+0x300>)
 80087c6:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80087ca:	4928      	ldr	r1, [pc, #160]	; (800886c <ip4_reass+0x310>)
 80087cc:	4825      	ldr	r0, [pc, #148]	; (8008864 <ip4_reass+0x308>)
 80087ce:	f001 f911 	bl	80099f4 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80087d2:	6833      	ldr	r3, [r6, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d092      	beq.n	80086fe <ip4_reass+0x1a2>
 80087d8:	4b20      	ldr	r3, [pc, #128]	; (800885c <ip4_reass+0x300>)
 80087da:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80087de:	4924      	ldr	r1, [pc, #144]	; (8008870 <ip4_reass+0x314>)
 80087e0:	4820      	ldr	r0, [pc, #128]	; (8008864 <ip4_reass+0x308>)
 80087e2:	f001 f907 	bl	80099f4 <iprintf>
 80087e6:	e78a      	b.n	80086fe <ip4_reass+0x1a2>
          iprh = (struct ip_reass_helper*)q->payload;
 80087e8:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 80087ea:	88f0      	ldrh	r0, [r6, #6]
 80087ec:	8893      	ldrh	r3, [r2, #4]
 80087ee:	4298      	cmp	r0, r3
 80087f0:	d183      	bne.n	80086fa <ip4_reass+0x19e>
          q = iprh->next_pbuf;
 80087f2:	6813      	ldr	r3, [r2, #0]
 80087f4:	4616      	mov	r6, r2
 80087f6:	e7e2      	b.n	80087be <ip4_reass+0x262>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80087f8:	4638      	mov	r0, r7
 80087fa:	f7fb fe7f 	bl	80044fc <pbuf_clen>
 80087fe:	4a15      	ldr	r2, [pc, #84]	; (8008854 <ip4_reass+0x2f8>)
 8008800:	8813      	ldrh	r3, [r2, #0]
 8008802:	1a18      	subs	r0, r3, r0
 8008804:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 8008806:	4638      	mov	r0, r7
 8008808:	f7fb fcc2 	bl	8004190 <pbuf_free>
 800880c:	e742      	b.n	8008694 <ip4_reass+0x138>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800880e:	4698      	mov	r8, r3
 8008810:	e775      	b.n	80086fe <ip4_reass+0x1a2>
      iprh = (struct ip_reass_helper*)r->payload;
 8008812:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_header(r, -IP_HLEN);
 8008816:	f06f 0113 	mvn.w	r1, #19
 800881a:	4638      	mov	r0, r7
 800881c:	f7fb fcb2 	bl	8004184 <pbuf_header>
      pbuf_cat(p, r);
 8008820:	4639      	mov	r1, r7
 8008822:	4628      	mov	r0, r5
 8008824:	f7fb fe86 	bl	8004534 <pbuf_cat>
      r = iprh->next_pbuf;
 8008828:	f8d8 7000 	ldr.w	r7, [r8]
 800882c:	e795      	b.n	800875a <ip4_reass+0x1fe>
        if (ipr_prev->next == ipr) {
 800882e:	680b      	ldr	r3, [r1, #0]
 8008830:	429c      	cmp	r4, r3
 8008832:	d002      	beq.n	800883a <ip4_reass+0x2de>
 8008834:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8008836:	2900      	cmp	r1, #0
 8008838:	d1f9      	bne.n	800882e <ip4_reass+0x2d2>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800883a:	4620      	mov	r0, r4
 800883c:	f7ff fd76 	bl	800832c <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 8008840:	4628      	mov	r0, r5
 8008842:	f7fb fe5b 	bl	80044fc <pbuf_clen>
 8008846:	8833      	ldrh	r3, [r6, #0]
 8008848:	1a18      	subs	r0, r3, r0
 800884a:	8030      	strh	r0, [r6, #0]
}
 800884c:	4628      	mov	r0, r5
 800884e:	b003      	add	sp, #12
 8008850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008854:	20000e64 	.word	0x20000e64
 8008858:	20000e68 	.word	0x20000e68
 800885c:	0800e50d 	.word	0x0800e50d
 8008860:	0800e4a7 	.word	0x0800e4a7
 8008864:	0800d278 	.word	0x0800d278
 8008868:	0800e489 	.word	0x0800e489
 800886c:	0800e4de 	.word	0x0800e4de
 8008870:	0800e4eb 	.word	0x0800e4eb
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8008874:	88e8      	ldrh	r0, [r5, #6]
 8008876:	f7fb fa0d 	bl	8003c94 <lwip_htons>
 800887a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800887e:	2800      	cmp	r0, #0
 8008880:	f47f aec0 	bne.w	8008604 <ip4_reass+0xa8>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8008884:	89e0      	ldrh	r0, [r4, #14]
 8008886:	f7fb fa05 	bl	8003c94 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800888a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800888e:	2800      	cmp	r0, #0
 8008890:	f43f aeb8 	beq.w	8008604 <ip4_reass+0xa8>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8008894:	462b      	mov	r3, r5
 8008896:	f104 0208 	add.w	r2, r4, #8
 800889a:	f105 0114 	add.w	r1, r5, #20
 800889e:	f853 0b04 	ldr.w	r0, [r3], #4
 80088a2:	428b      	cmp	r3, r1
 80088a4:	f842 0b04 	str.w	r0, [r2], #4
 80088a8:	d1f9      	bne.n	800889e <ip4_reass+0x342>
 80088aa:	e6ab      	b.n	8008604 <ip4_reass+0xa8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80088ac:	f1bb 0f00 	cmp.w	fp, #0
 80088b0:	f43f af23 	beq.w	80086fa <ip4_reass+0x19e>
 80088b4:	f04f 0800 	mov.w	r8, #0
 80088b8:	e717      	b.n	80086ea <ip4_reass+0x18e>
 80088ba:	bf00      	nop

080088bc <ip4_frag>:
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80088bc:	2308      	movs	r3, #8
{
 80088be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80088c2:	f8b1 8026 	ldrh.w	r8, [r1, #38]	; 0x26
{
 80088c6:	b08b      	sub	sp, #44	; 0x2c
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80088c8:	f1a8 0814 	sub.w	r8, r8, #20
 80088cc:	fb98 f8f3 	sdiv	r8, r8, r3
 80088d0:	fa1f f388 	uxth.w	r3, r8
 80088d4:	9307      	str	r3, [sp, #28]
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 80088d6:	6843      	ldr	r3, [r0, #4]
{
 80088d8:	4607      	mov	r7, r0
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80088da:	781e      	ldrb	r6, [r3, #0]
{
 80088dc:	468b      	mov	fp, r1
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80088de:	f006 060f 	and.w	r6, r6, #15
 80088e2:	00b6      	lsls	r6, r6, #2
 80088e4:	2e14      	cmp	r6, #20
{
 80088e6:	9208      	str	r2, [sp, #32]
  original_iphdr = (struct ip_hdr *)p->payload;
 80088e8:	9302      	str	r3, [sp, #8]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80088ea:	d00b      	beq.n	8008904 <ip4_frag+0x48>
 80088ec:	f240 22e1 	movw	r2, #737	; 0x2e1
 80088f0:	4b5b      	ldr	r3, [pc, #364]	; (8008a60 <ip4_frag+0x1a4>)
 80088f2:	495c      	ldr	r1, [pc, #368]	; (8008a64 <ip4_frag+0x1a8>)

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80088f4:	485c      	ldr	r0, [pc, #368]	; (8008a68 <ip4_frag+0x1ac>)
 80088f6:	f001 f87d 	bl	80099f4 <iprintf>
 80088fa:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 80088fe:	b00b      	add	sp, #44	; 0x2c
 8008900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8008904:	9b02      	ldr	r3, [sp, #8]
 8008906:	88d8      	ldrh	r0, [r3, #6]
 8008908:	f7fb f9c4 	bl	8003c94 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800890c:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8008910:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 8008914:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8008916:	d004      	beq.n	8008922 <ip4_frag+0x66>
 8008918:	4b51      	ldr	r3, [pc, #324]	; (8008a60 <ip4_frag+0x1a4>)
 800891a:	f240 22e6 	movw	r2, #742	; 0x2e6
 800891e:	4953      	ldr	r1, [pc, #332]	; (8008a6c <ip4_frag+0x1b0>)
 8008920:	e7e8      	b.n	80088f4 <ip4_frag+0x38>
  left = p->tot_len - IP_HLEN;
 8008922:	893d      	ldrh	r5, [r7, #8]
    fragsize = LWIP_MIN(left, nfb * 8);
 8008924:	fa1f f888 	uxth.w	r8, r8
  left = p->tot_len - IP_HLEN;
 8008928:	3d14      	subs	r5, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 800892a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  left = p->tot_len - IP_HLEN;
 800892e:	b2ad      	uxth	r5, r5
    fragsize = LWIP_MIN(left, nfb * 8);
 8008930:	9306      	str	r3, [sp, #24]
  while (left) {
 8008932:	b90d      	cbnz	r5, 8008938 <ip4_frag+0x7c>
  return ERR_OK;
 8008934:	4628      	mov	r0, r5
 8008936:	e7e2      	b.n	80088fe <ip4_frag+0x42>
    fragsize = LWIP_MIN(left, nfb * 8);
 8008938:	9b06      	ldr	r3, [sp, #24]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800893a:	2200      	movs	r2, #0
    fragsize = LWIP_MIN(left, nfb * 8);
 800893c:	42ab      	cmp	r3, r5
 800893e:	bfa8      	it	ge
 8008940:	462b      	movge	r3, r5
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8008942:	2114      	movs	r1, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 8008944:	b29b      	uxth	r3, r3
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8008946:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 8008948:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800894a:	f7fb fc83 	bl	8004254 <pbuf_alloc>
    if (rambuf == NULL) {
 800894e:	4680      	mov	r8, r0
 8008950:	b388      	cbz	r0, 80089b6 <ip4_frag+0xfa>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8008952:	897b      	ldrh	r3, [r7, #10]
 8008954:	2b13      	cmp	r3, #19
 8008956:	d806      	bhi.n	8008966 <ip4_frag+0xaa>
 8008958:	4b41      	ldr	r3, [pc, #260]	; (8008a60 <ip4_frag+0x1a4>)
 800895a:	f240 3209 	movw	r2, #777	; 0x309
 800895e:	4944      	ldr	r1, [pc, #272]	; (8008a70 <ip4_frag+0x1b4>)
 8008960:	4841      	ldr	r0, [pc, #260]	; (8008a68 <ip4_frag+0x1ac>)
 8008962:	f001 f847 	bl	80099f4 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8008966:	9b02      	ldr	r3, [sp, #8]
 8008968:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800896c:	4619      	mov	r1, r3
 800896e:	3114      	adds	r1, #20
 8008970:	f853 0b04 	ldr.w	r0, [r3], #4
 8008974:	428b      	cmp	r3, r1
 8008976:	f842 0b04 	str.w	r0, [r2], #4
 800897a:	d1f9      	bne.n	8008970 <ip4_frag+0xb4>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800897c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 8008980:	f8dd 9014 	ldr.w	r9, [sp, #20]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8008984:	9303      	str	r3, [sp, #12]
    while (left_to_copy) {
 8008986:	f1b9 0f00 	cmp.w	r9, #0
 800898a:	d03a      	beq.n	8008a02 <ip4_frag+0x146>
      u16_t plen = p->len - poff;
 800898c:	897c      	ldrh	r4, [r7, #10]
 800898e:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8008990:	b2a4      	uxth	r4, r4
 8008992:	454c      	cmp	r4, r9
 8008994:	bf28      	it	cs
 8008996:	464c      	movcs	r4, r9
      if (!newpbuflen) {
 8008998:	b914      	cbnz	r4, 80089a0 <ip4_frag+0xe4>
        p = p->next;
 800899a:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 800899c:	2600      	movs	r6, #0
 800899e:	e7f2      	b.n	8008986 <ip4_frag+0xca>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80089a0:	f240 22a7 	movw	r2, #679	; 0x2a7
 80089a4:	492e      	ldr	r1, [pc, #184]	; (8008a60 <ip4_frag+0x1a4>)
 80089a6:	2006      	movs	r0, #6
 80089a8:	f7fb fa6c 	bl	8003e84 <memp_malloc_fn>
      if (pcr == NULL) {
 80089ac:	4682      	mov	sl, r0
 80089ae:	b928      	cbnz	r0, 80089bc <ip4_frag+0x100>
        pbuf_free(rambuf);
 80089b0:	4640      	mov	r0, r8
 80089b2:	f7fb fbed 	bl	8004190 <pbuf_free>
  return ERR_MEM;
 80089b6:	f04f 30ff 	mov.w	r0, #4294967295
 80089ba:	e7a0      	b.n	80088fe <ip4_frag+0x42>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80089bc:	9401      	str	r4, [sp, #4]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2202      	movs	r2, #2
 80089c2:	4433      	add	r3, r6
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	4621      	mov	r1, r4
 80089c8:	4603      	mov	r3, r0
 80089ca:	2004      	movs	r0, #4
 80089cc:	f7fb fba2 	bl	8004114 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 80089d0:	b918      	cbnz	r0, 80089da <ip4_frag+0x11e>
        ip_frag_free_pbuf_custom_ref(pcr);
 80089d2:	4650      	mov	r0, sl
 80089d4:	f7ff fd7c 	bl	80084d0 <ip_frag_free_pbuf_custom_ref>
 80089d8:	e7ea      	b.n	80089b0 <ip4_frag+0xf4>
 80089da:	9009      	str	r0, [sp, #36]	; 0x24
      pbuf_ref(p);
 80089dc:	4638      	mov	r0, r7
 80089de:	f7fb fd95 	bl	800450c <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80089e2:	4b24      	ldr	r3, [pc, #144]	; (8008a74 <ip4_frag+0x1b8>)
      left_to_copy -= newpbuflen;
 80089e4:	eba9 0904 	sub.w	r9, r9, r4
      pcr->original = p;
 80089e8:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80089ec:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 80089f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089f2:	4640      	mov	r0, r8
      left_to_copy -= newpbuflen;
 80089f4:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 80089f8:	f7fb fd9c 	bl	8004534 <pbuf_cat>
      if (left_to_copy) {
 80089fc:	f1b9 0f00 	cmp.w	r9, #0
 8008a00:	d1cb      	bne.n	800899a <ip4_frag+0xde>
    tmp = (IP_OFFMASK & (ofo));
 8008a02:	9b04      	ldr	r3, [sp, #16]
    poff += newpbuflen;
 8008a04:	4426      	add	r6, r4
    tmp = (IP_OFFMASK & (ofo));
 8008a06:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 8008a0a:	f8bb 3026 	ldrh.w	r3, [fp, #38]	; 0x26
    poff += newpbuflen;
 8008a0e:	b2b6      	uxth	r6, r6
    last = (left <= netif->mtu - IP_HLEN);
 8008a10:	3b13      	subs	r3, #19
    if (!last) {
 8008a12:	429d      	cmp	r5, r3
      tmp = tmp | IP_MF;
 8008a14:	bfa8      	it	ge
 8008a16:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8008a1a:	f7fb f93b 	bl	8003c94 <lwip_htons>
 8008a1e:	9b03      	ldr	r3, [sp, #12]
 8008a20:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8008a22:	9b05      	ldr	r3, [sp, #20]
 8008a24:	f103 0014 	add.w	r0, r3, #20
 8008a28:	b280      	uxth	r0, r0
 8008a2a:	f7fb f933 	bl	8003c94 <lwip_htons>
 8008a2e:	9b03      	ldr	r3, [sp, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 8008a30:	9a03      	ldr	r2, [sp, #12]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8008a32:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8008a34:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 8008a36:	4641      	mov	r1, r8
    IPH_CHKSUM_SET(iphdr, 0);
 8008a38:	7293      	strb	r3, [r2, #10]
 8008a3a:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 8008a3c:	4658      	mov	r0, fp
 8008a3e:	f8db 3014 	ldr.w	r3, [fp, #20]
 8008a42:	9a08      	ldr	r2, [sp, #32]
 8008a44:	4798      	blx	r3
    pbuf_free(rambuf);
 8008a46:	4640      	mov	r0, r8
 8008a48:	f7fb fba2 	bl	8004190 <pbuf_free>
    left -= fragsize;
 8008a4c:	9b05      	ldr	r3, [sp, #20]
    ofo += nfb;
 8008a4e:	9a07      	ldr	r2, [sp, #28]
    left -= fragsize;
 8008a50:	1aed      	subs	r5, r5, r3
    ofo += nfb;
 8008a52:	9b04      	ldr	r3, [sp, #16]
    left -= fragsize;
 8008a54:	b2ad      	uxth	r5, r5
    ofo += nfb;
 8008a56:	4413      	add	r3, r2
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	9304      	str	r3, [sp, #16]
 8008a5c:	e769      	b.n	8008932 <ip4_frag+0x76>
 8008a5e:	bf00      	nop
 8008a60:	0800e50d 	.word	0x0800e50d
 8008a64:	0800e428 	.word	0x0800e428
 8008a68:	0800d278 	.word	0x0800d278
 8008a6c:	0800e44f 	.word	0x0800e44f
 8008a70:	0800e469 	.word	0x0800e469
 8008a74:	080084fd 	.word	0x080084fd

08008a78 <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8008a78:	8943      	ldrh	r3, [r0, #10]
{
 8008a7a:	b570      	push	{r4, r5, r6, lr}
  if (p->len <= SIZEOF_ETH_HDR) {
 8008a7c:	2b0e      	cmp	r3, #14
{
 8008a7e:	4604      	mov	r4, r0
 8008a80:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 8008a82:	d914      	bls.n	8008aae <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8008a84:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8008a86:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 8008a88:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 8008a8a:	07d9      	lsls	r1, r3, #31
 8008a8c:	d50a      	bpl.n	8008aa4 <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d111      	bne.n	8008ab6 <ethernet_input+0x3e>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8008a92:	7843      	ldrb	r3, [r0, #1]
 8008a94:	b933      	cbnz	r3, 8008aa4 <ethernet_input+0x2c>
 8008a96:	7883      	ldrb	r3, [r0, #2]
 8008a98:	2b5e      	cmp	r3, #94	; 0x5e
 8008a9a:	d103      	bne.n	8008aa4 <ethernet_input+0x2c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8008a9c:	7b63      	ldrb	r3, [r4, #13]
 8008a9e:	f043 0310 	orr.w	r3, r3, #16
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8008aa2:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8008aa4:	2e08      	cmp	r6, #8
 8008aa6:	d010      	beq.n	8008aca <ethernet_input+0x52>
 8008aa8:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 8008aac:	d01e      	beq.n	8008aec <ethernet_input+0x74>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f7fb fb6e 	bl	8004190 <pbuf_free>
  return ERR_OK;
 8008ab4:	e018      	b.n	8008ae8 <ethernet_input+0x70>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8008ab6:	2206      	movs	r2, #6
 8008ab8:	4914      	ldr	r1, [pc, #80]	; (8008b0c <ethernet_input+0x94>)
 8008aba:	f000 f895 	bl	8008be8 <memcmp>
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	d1f0      	bne.n	8008aa4 <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLBCAST;
 8008ac2:	7b63      	ldrb	r3, [r4, #13]
 8008ac4:	f043 0308 	orr.w	r3, r3, #8
 8008ac8:	e7eb      	b.n	8008aa2 <ethernet_input+0x2a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8008aca:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8008ace:	071a      	lsls	r2, r3, #28
 8008ad0:	d5ed      	bpl.n	8008aae <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8008ad2:	f06f 010d 	mvn.w	r1, #13
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f7fb fb54 	bl	8004184 <pbuf_header>
 8008adc:	2800      	cmp	r0, #0
 8008ade:	d1e6      	bne.n	8008aae <ethernet_input+0x36>
        ip4_input(p, netif);
 8008ae0:	4629      	mov	r1, r5
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	f7ff fab0 	bl	8008048 <ip4_input>
}
 8008ae8:	2000      	movs	r0, #0
 8008aea:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8008aec:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8008af0:	071b      	lsls	r3, r3, #28
 8008af2:	d5dc      	bpl.n	8008aae <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8008af4:	f06f 010d 	mvn.w	r1, #13
 8008af8:	4620      	mov	r0, r4
 8008afa:	f7fb fb43 	bl	8004184 <pbuf_header>
 8008afe:	2800      	cmp	r0, #0
 8008b00:	d1d5      	bne.n	8008aae <ethernet_input+0x36>
        etharp_input(p, netif);
 8008b02:	4629      	mov	r1, r5
 8008b04:	4620      	mov	r0, r4
 8008b06:	f7fe ff23 	bl	8007950 <etharp_input>
      break;
 8008b0a:	e7ed      	b.n	8008ae8 <ethernet_input+0x70>
 8008b0c:	0800e5c1 	.word	0x0800e5c1

08008b10 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8008b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b14:	4604      	mov	r4, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8008b16:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 8008b1a:	460d      	mov	r5, r1
 8008b1c:	4616      	mov	r6, r2
 8008b1e:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 8008b20:	f7fb f8b8 	bl	8003c94 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8008b24:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 8008b26:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8008b28:	4628      	mov	r0, r5
 8008b2a:	f7fb fb2b 	bl	8004184 <pbuf_header>
 8008b2e:	b9e0      	cbnz	r0, 8008b6a <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8008b30:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 8008b32:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	600b      	str	r3, [r1, #0]
 8008b3a:	88bb      	ldrh	r3, [r7, #4]
 8008b3c:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 8008b3e:	6833      	ldr	r3, [r6, #0]
 8008b40:	f8c1 3006 	str.w	r3, [r1, #6]
 8008b44:	88b3      	ldrh	r3, [r6, #4]
 8008b46:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8008b48:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008b4c:	2b06      	cmp	r3, #6
 8008b4e:	d006      	beq.n	8008b5e <ethernet_output+0x4e>
 8008b50:	4b08      	ldr	r3, [pc, #32]	; (8008b74 <ethernet_output+0x64>)
 8008b52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008b56:	4908      	ldr	r1, [pc, #32]	; (8008b78 <ethernet_output+0x68>)
 8008b58:	4808      	ldr	r0, [pc, #32]	; (8008b7c <ethernet_output+0x6c>)
 8008b5a:	f000 ff4b 	bl	80099f4 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8008b5e:	69a3      	ldr	r3, [r4, #24]
 8008b60:	4629      	mov	r1, r5
 8008b62:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8008b64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8008b68:	4718      	bx	r3
}
 8008b6a:	f06f 0001 	mvn.w	r0, #1
 8008b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b72:	bf00      	nop
 8008b74:	0800e5c7 	.word	0x0800e5c7
 8008b78:	0800e5fc 	.word	0x0800e5fc
 8008b7c:	0800d278 	.word	0x0800d278

08008b80 <__libc_init_array>:
 8008b80:	b570      	push	{r4, r5, r6, lr}
 8008b82:	2500      	movs	r5, #0
 8008b84:	4e0c      	ldr	r6, [pc, #48]	; (8008bb8 <__libc_init_array+0x38>)
 8008b86:	4c0d      	ldr	r4, [pc, #52]	; (8008bbc <__libc_init_array+0x3c>)
 8008b88:	1ba4      	subs	r4, r4, r6
 8008b8a:	10a4      	asrs	r4, r4, #2
 8008b8c:	42a5      	cmp	r5, r4
 8008b8e:	d109      	bne.n	8008ba4 <__libc_init_array+0x24>
 8008b90:	f004 fa86 	bl	800d0a0 <_init>
 8008b94:	2500      	movs	r5, #0
 8008b96:	4e0a      	ldr	r6, [pc, #40]	; (8008bc0 <__libc_init_array+0x40>)
 8008b98:	4c0a      	ldr	r4, [pc, #40]	; (8008bc4 <__libc_init_array+0x44>)
 8008b9a:	1ba4      	subs	r4, r4, r6
 8008b9c:	10a4      	asrs	r4, r4, #2
 8008b9e:	42a5      	cmp	r5, r4
 8008ba0:	d105      	bne.n	8008bae <__libc_init_array+0x2e>
 8008ba2:	bd70      	pop	{r4, r5, r6, pc}
 8008ba4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ba8:	4798      	blx	r3
 8008baa:	3501      	adds	r5, #1
 8008bac:	e7ee      	b.n	8008b8c <__libc_init_array+0xc>
 8008bae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008bb2:	4798      	blx	r3
 8008bb4:	3501      	adds	r5, #1
 8008bb6:	e7f2      	b.n	8008b9e <__libc_init_array+0x1e>
 8008bb8:	0800e950 	.word	0x0800e950
 8008bbc:	0800e950 	.word	0x0800e950
 8008bc0:	0800e950 	.word	0x0800e950
 8008bc4:	0800e954 	.word	0x0800e954

08008bc8 <malloc>:
 8008bc8:	4b02      	ldr	r3, [pc, #8]	; (8008bd4 <malloc+0xc>)
 8008bca:	4601      	mov	r1, r0
 8008bcc:	6818      	ldr	r0, [r3, #0]
 8008bce:	f000 b887 	b.w	8008ce0 <_malloc_r>
 8008bd2:	bf00      	nop
 8008bd4:	20000014 	.word	0x20000014

08008bd8 <free>:
 8008bd8:	4b02      	ldr	r3, [pc, #8]	; (8008be4 <free+0xc>)
 8008bda:	4601      	mov	r1, r0
 8008bdc:	6818      	ldr	r0, [r3, #0]
 8008bde:	f000 b833 	b.w	8008c48 <_free_r>
 8008be2:	bf00      	nop
 8008be4:	20000014 	.word	0x20000014

08008be8 <memcmp>:
 8008be8:	b530      	push	{r4, r5, lr}
 8008bea:	2400      	movs	r4, #0
 8008bec:	42a2      	cmp	r2, r4
 8008bee:	d101      	bne.n	8008bf4 <memcmp+0xc>
 8008bf0:	2000      	movs	r0, #0
 8008bf2:	e007      	b.n	8008c04 <memcmp+0x1c>
 8008bf4:	5d03      	ldrb	r3, [r0, r4]
 8008bf6:	3401      	adds	r4, #1
 8008bf8:	190d      	adds	r5, r1, r4
 8008bfa:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8008bfe:	42ab      	cmp	r3, r5
 8008c00:	d0f4      	beq.n	8008bec <memcmp+0x4>
 8008c02:	1b58      	subs	r0, r3, r5
 8008c04:	bd30      	pop	{r4, r5, pc}

08008c06 <memcpy>:
 8008c06:	b510      	push	{r4, lr}
 8008c08:	1e43      	subs	r3, r0, #1
 8008c0a:	440a      	add	r2, r1
 8008c0c:	4291      	cmp	r1, r2
 8008c0e:	d100      	bne.n	8008c12 <memcpy+0xc>
 8008c10:	bd10      	pop	{r4, pc}
 8008c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c1a:	e7f7      	b.n	8008c0c <memcpy+0x6>

08008c1c <memset>:
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	4402      	add	r2, r0
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d100      	bne.n	8008c26 <memset+0xa>
 8008c24:	4770      	bx	lr
 8008c26:	f803 1b01 	strb.w	r1, [r3], #1
 8008c2a:	e7f9      	b.n	8008c20 <memset+0x4>

08008c2c <_calloc_r>:
 8008c2c:	b538      	push	{r3, r4, r5, lr}
 8008c2e:	fb02 f401 	mul.w	r4, r2, r1
 8008c32:	4621      	mov	r1, r4
 8008c34:	f000 f854 	bl	8008ce0 <_malloc_r>
 8008c38:	4605      	mov	r5, r0
 8008c3a:	b118      	cbz	r0, 8008c44 <_calloc_r+0x18>
 8008c3c:	4622      	mov	r2, r4
 8008c3e:	2100      	movs	r1, #0
 8008c40:	f7ff ffec 	bl	8008c1c <memset>
 8008c44:	4628      	mov	r0, r5
 8008c46:	bd38      	pop	{r3, r4, r5, pc}

08008c48 <_free_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	4605      	mov	r5, r0
 8008c4c:	2900      	cmp	r1, #0
 8008c4e:	d043      	beq.n	8008cd8 <_free_r+0x90>
 8008c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c54:	1f0c      	subs	r4, r1, #4
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	bfb8      	it	lt
 8008c5a:	18e4      	addlt	r4, r4, r3
 8008c5c:	f003 fa96 	bl	800c18c <__malloc_lock>
 8008c60:	4a1e      	ldr	r2, [pc, #120]	; (8008cdc <_free_r+0x94>)
 8008c62:	6813      	ldr	r3, [r2, #0]
 8008c64:	4610      	mov	r0, r2
 8008c66:	b933      	cbnz	r3, 8008c76 <_free_r+0x2e>
 8008c68:	6063      	str	r3, [r4, #4]
 8008c6a:	6014      	str	r4, [r2, #0]
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c72:	f003 ba8c 	b.w	800c18e <__malloc_unlock>
 8008c76:	42a3      	cmp	r3, r4
 8008c78:	d90b      	bls.n	8008c92 <_free_r+0x4a>
 8008c7a:	6821      	ldr	r1, [r4, #0]
 8008c7c:	1862      	adds	r2, r4, r1
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	bf01      	itttt	eq
 8008c82:	681a      	ldreq	r2, [r3, #0]
 8008c84:	685b      	ldreq	r3, [r3, #4]
 8008c86:	1852      	addeq	r2, r2, r1
 8008c88:	6022      	streq	r2, [r4, #0]
 8008c8a:	6063      	str	r3, [r4, #4]
 8008c8c:	6004      	str	r4, [r0, #0]
 8008c8e:	e7ed      	b.n	8008c6c <_free_r+0x24>
 8008c90:	4613      	mov	r3, r2
 8008c92:	685a      	ldr	r2, [r3, #4]
 8008c94:	b10a      	cbz	r2, 8008c9a <_free_r+0x52>
 8008c96:	42a2      	cmp	r2, r4
 8008c98:	d9fa      	bls.n	8008c90 <_free_r+0x48>
 8008c9a:	6819      	ldr	r1, [r3, #0]
 8008c9c:	1858      	adds	r0, r3, r1
 8008c9e:	42a0      	cmp	r0, r4
 8008ca0:	d10b      	bne.n	8008cba <_free_r+0x72>
 8008ca2:	6820      	ldr	r0, [r4, #0]
 8008ca4:	4401      	add	r1, r0
 8008ca6:	1858      	adds	r0, r3, r1
 8008ca8:	4282      	cmp	r2, r0
 8008caa:	6019      	str	r1, [r3, #0]
 8008cac:	d1de      	bne.n	8008c6c <_free_r+0x24>
 8008cae:	6810      	ldr	r0, [r2, #0]
 8008cb0:	6852      	ldr	r2, [r2, #4]
 8008cb2:	4401      	add	r1, r0
 8008cb4:	6019      	str	r1, [r3, #0]
 8008cb6:	605a      	str	r2, [r3, #4]
 8008cb8:	e7d8      	b.n	8008c6c <_free_r+0x24>
 8008cba:	d902      	bls.n	8008cc2 <_free_r+0x7a>
 8008cbc:	230c      	movs	r3, #12
 8008cbe:	602b      	str	r3, [r5, #0]
 8008cc0:	e7d4      	b.n	8008c6c <_free_r+0x24>
 8008cc2:	6820      	ldr	r0, [r4, #0]
 8008cc4:	1821      	adds	r1, r4, r0
 8008cc6:	428a      	cmp	r2, r1
 8008cc8:	bf01      	itttt	eq
 8008cca:	6811      	ldreq	r1, [r2, #0]
 8008ccc:	6852      	ldreq	r2, [r2, #4]
 8008cce:	1809      	addeq	r1, r1, r0
 8008cd0:	6021      	streq	r1, [r4, #0]
 8008cd2:	6062      	str	r2, [r4, #4]
 8008cd4:	605c      	str	r4, [r3, #4]
 8008cd6:	e7c9      	b.n	8008c6c <_free_r+0x24>
 8008cd8:	bd38      	pop	{r3, r4, r5, pc}
 8008cda:	bf00      	nop
 8008cdc:	20000e6c 	.word	0x20000e6c

08008ce0 <_malloc_r>:
 8008ce0:	b570      	push	{r4, r5, r6, lr}
 8008ce2:	1ccd      	adds	r5, r1, #3
 8008ce4:	f025 0503 	bic.w	r5, r5, #3
 8008ce8:	3508      	adds	r5, #8
 8008cea:	2d0c      	cmp	r5, #12
 8008cec:	bf38      	it	cc
 8008cee:	250c      	movcc	r5, #12
 8008cf0:	2d00      	cmp	r5, #0
 8008cf2:	4606      	mov	r6, r0
 8008cf4:	db01      	blt.n	8008cfa <_malloc_r+0x1a>
 8008cf6:	42a9      	cmp	r1, r5
 8008cf8:	d903      	bls.n	8008d02 <_malloc_r+0x22>
 8008cfa:	230c      	movs	r3, #12
 8008cfc:	6033      	str	r3, [r6, #0]
 8008cfe:	2000      	movs	r0, #0
 8008d00:	bd70      	pop	{r4, r5, r6, pc}
 8008d02:	f003 fa43 	bl	800c18c <__malloc_lock>
 8008d06:	4a21      	ldr	r2, [pc, #132]	; (8008d8c <_malloc_r+0xac>)
 8008d08:	6814      	ldr	r4, [r2, #0]
 8008d0a:	4621      	mov	r1, r4
 8008d0c:	b991      	cbnz	r1, 8008d34 <_malloc_r+0x54>
 8008d0e:	4c20      	ldr	r4, [pc, #128]	; (8008d90 <_malloc_r+0xb0>)
 8008d10:	6823      	ldr	r3, [r4, #0]
 8008d12:	b91b      	cbnz	r3, 8008d1c <_malloc_r+0x3c>
 8008d14:	4630      	mov	r0, r6
 8008d16:	f000 fee9 	bl	8009aec <_sbrk_r>
 8008d1a:	6020      	str	r0, [r4, #0]
 8008d1c:	4629      	mov	r1, r5
 8008d1e:	4630      	mov	r0, r6
 8008d20:	f000 fee4 	bl	8009aec <_sbrk_r>
 8008d24:	1c43      	adds	r3, r0, #1
 8008d26:	d124      	bne.n	8008d72 <_malloc_r+0x92>
 8008d28:	230c      	movs	r3, #12
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	6033      	str	r3, [r6, #0]
 8008d2e:	f003 fa2e 	bl	800c18e <__malloc_unlock>
 8008d32:	e7e4      	b.n	8008cfe <_malloc_r+0x1e>
 8008d34:	680b      	ldr	r3, [r1, #0]
 8008d36:	1b5b      	subs	r3, r3, r5
 8008d38:	d418      	bmi.n	8008d6c <_malloc_r+0x8c>
 8008d3a:	2b0b      	cmp	r3, #11
 8008d3c:	d90f      	bls.n	8008d5e <_malloc_r+0x7e>
 8008d3e:	600b      	str	r3, [r1, #0]
 8008d40:	18cc      	adds	r4, r1, r3
 8008d42:	50cd      	str	r5, [r1, r3]
 8008d44:	4630      	mov	r0, r6
 8008d46:	f003 fa22 	bl	800c18e <__malloc_unlock>
 8008d4a:	f104 000b 	add.w	r0, r4, #11
 8008d4e:	1d23      	adds	r3, r4, #4
 8008d50:	f020 0007 	bic.w	r0, r0, #7
 8008d54:	1ac3      	subs	r3, r0, r3
 8008d56:	d0d3      	beq.n	8008d00 <_malloc_r+0x20>
 8008d58:	425a      	negs	r2, r3
 8008d5a:	50e2      	str	r2, [r4, r3]
 8008d5c:	e7d0      	b.n	8008d00 <_malloc_r+0x20>
 8008d5e:	684b      	ldr	r3, [r1, #4]
 8008d60:	428c      	cmp	r4, r1
 8008d62:	bf16      	itet	ne
 8008d64:	6063      	strne	r3, [r4, #4]
 8008d66:	6013      	streq	r3, [r2, #0]
 8008d68:	460c      	movne	r4, r1
 8008d6a:	e7eb      	b.n	8008d44 <_malloc_r+0x64>
 8008d6c:	460c      	mov	r4, r1
 8008d6e:	6849      	ldr	r1, [r1, #4]
 8008d70:	e7cc      	b.n	8008d0c <_malloc_r+0x2c>
 8008d72:	1cc4      	adds	r4, r0, #3
 8008d74:	f024 0403 	bic.w	r4, r4, #3
 8008d78:	42a0      	cmp	r0, r4
 8008d7a:	d005      	beq.n	8008d88 <_malloc_r+0xa8>
 8008d7c:	1a21      	subs	r1, r4, r0
 8008d7e:	4630      	mov	r0, r6
 8008d80:	f000 feb4 	bl	8009aec <_sbrk_r>
 8008d84:	3001      	adds	r0, #1
 8008d86:	d0cf      	beq.n	8008d28 <_malloc_r+0x48>
 8008d88:	6025      	str	r5, [r4, #0]
 8008d8a:	e7db      	b.n	8008d44 <_malloc_r+0x64>
 8008d8c:	20000e6c 	.word	0x20000e6c
 8008d90:	20000e70 	.word	0x20000e70

08008d94 <__cvt>:
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d9a:	461e      	mov	r6, r3
 8008d9c:	bfbb      	ittet	lt
 8008d9e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008da2:	461e      	movlt	r6, r3
 8008da4:	2300      	movge	r3, #0
 8008da6:	232d      	movlt	r3, #45	; 0x2d
 8008da8:	b088      	sub	sp, #32
 8008daa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008dac:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8008db0:	f027 0720 	bic.w	r7, r7, #32
 8008db4:	2f46      	cmp	r7, #70	; 0x46
 8008db6:	4614      	mov	r4, r2
 8008db8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008dba:	700b      	strb	r3, [r1, #0]
 8008dbc:	d004      	beq.n	8008dc8 <__cvt+0x34>
 8008dbe:	2f45      	cmp	r7, #69	; 0x45
 8008dc0:	d100      	bne.n	8008dc4 <__cvt+0x30>
 8008dc2:	3501      	adds	r5, #1
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	e000      	b.n	8008dca <__cvt+0x36>
 8008dc8:	2303      	movs	r3, #3
 8008dca:	aa07      	add	r2, sp, #28
 8008dcc:	9204      	str	r2, [sp, #16]
 8008dce:	aa06      	add	r2, sp, #24
 8008dd0:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008dd4:	e9cd 3500 	strd	r3, r5, [sp]
 8008dd8:	4622      	mov	r2, r4
 8008dda:	4633      	mov	r3, r6
 8008ddc:	f001 fee8 	bl	800abb0 <_dtoa_r>
 8008de0:	2f47      	cmp	r7, #71	; 0x47
 8008de2:	4680      	mov	r8, r0
 8008de4:	d102      	bne.n	8008dec <__cvt+0x58>
 8008de6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008de8:	07db      	lsls	r3, r3, #31
 8008dea:	d526      	bpl.n	8008e3a <__cvt+0xa6>
 8008dec:	2f46      	cmp	r7, #70	; 0x46
 8008dee:	eb08 0905 	add.w	r9, r8, r5
 8008df2:	d111      	bne.n	8008e18 <__cvt+0x84>
 8008df4:	f898 3000 	ldrb.w	r3, [r8]
 8008df8:	2b30      	cmp	r3, #48	; 0x30
 8008dfa:	d10a      	bne.n	8008e12 <__cvt+0x7e>
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	2300      	movs	r3, #0
 8008e00:	4620      	mov	r0, r4
 8008e02:	4631      	mov	r1, r6
 8008e04:	f7f7 fe3c 	bl	8000a80 <__aeabi_dcmpeq>
 8008e08:	b918      	cbnz	r0, 8008e12 <__cvt+0x7e>
 8008e0a:	f1c5 0501 	rsb	r5, r5, #1
 8008e0e:	f8ca 5000 	str.w	r5, [sl]
 8008e12:	f8da 3000 	ldr.w	r3, [sl]
 8008e16:	4499      	add	r9, r3
 8008e18:	2200      	movs	r2, #0
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	4631      	mov	r1, r6
 8008e20:	f7f7 fe2e 	bl	8000a80 <__aeabi_dcmpeq>
 8008e24:	b938      	cbnz	r0, 8008e36 <__cvt+0xa2>
 8008e26:	2230      	movs	r2, #48	; 0x30
 8008e28:	9b07      	ldr	r3, [sp, #28]
 8008e2a:	454b      	cmp	r3, r9
 8008e2c:	d205      	bcs.n	8008e3a <__cvt+0xa6>
 8008e2e:	1c59      	adds	r1, r3, #1
 8008e30:	9107      	str	r1, [sp, #28]
 8008e32:	701a      	strb	r2, [r3, #0]
 8008e34:	e7f8      	b.n	8008e28 <__cvt+0x94>
 8008e36:	f8cd 901c 	str.w	r9, [sp, #28]
 8008e3a:	4640      	mov	r0, r8
 8008e3c:	9b07      	ldr	r3, [sp, #28]
 8008e3e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008e40:	eba3 0308 	sub.w	r3, r3, r8
 8008e44:	6013      	str	r3, [r2, #0]
 8008e46:	b008      	add	sp, #32
 8008e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008e4c <__exponent>:
 8008e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e4e:	2900      	cmp	r1, #0
 8008e50:	bfb4      	ite	lt
 8008e52:	232d      	movlt	r3, #45	; 0x2d
 8008e54:	232b      	movge	r3, #43	; 0x2b
 8008e56:	4604      	mov	r4, r0
 8008e58:	bfb8      	it	lt
 8008e5a:	4249      	neglt	r1, r1
 8008e5c:	2909      	cmp	r1, #9
 8008e5e:	f804 2b02 	strb.w	r2, [r4], #2
 8008e62:	7043      	strb	r3, [r0, #1]
 8008e64:	dd21      	ble.n	8008eaa <__exponent+0x5e>
 8008e66:	f10d 0307 	add.w	r3, sp, #7
 8008e6a:	461f      	mov	r7, r3
 8008e6c:	260a      	movs	r6, #10
 8008e6e:	fb91 f5f6 	sdiv	r5, r1, r6
 8008e72:	fb06 1115 	mls	r1, r6, r5, r1
 8008e76:	2d09      	cmp	r5, #9
 8008e78:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8008e7c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008e80:	f103 32ff 	add.w	r2, r3, #4294967295
 8008e84:	4629      	mov	r1, r5
 8008e86:	dc09      	bgt.n	8008e9c <__exponent+0x50>
 8008e88:	3130      	adds	r1, #48	; 0x30
 8008e8a:	3b02      	subs	r3, #2
 8008e8c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008e90:	42bb      	cmp	r3, r7
 8008e92:	4622      	mov	r2, r4
 8008e94:	d304      	bcc.n	8008ea0 <__exponent+0x54>
 8008e96:	1a10      	subs	r0, r2, r0
 8008e98:	b003      	add	sp, #12
 8008e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e9c:	4613      	mov	r3, r2
 8008e9e:	e7e6      	b.n	8008e6e <__exponent+0x22>
 8008ea0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ea4:	f804 2b01 	strb.w	r2, [r4], #1
 8008ea8:	e7f2      	b.n	8008e90 <__exponent+0x44>
 8008eaa:	2330      	movs	r3, #48	; 0x30
 8008eac:	4419      	add	r1, r3
 8008eae:	7083      	strb	r3, [r0, #2]
 8008eb0:	1d02      	adds	r2, r0, #4
 8008eb2:	70c1      	strb	r1, [r0, #3]
 8008eb4:	e7ef      	b.n	8008e96 <__exponent+0x4a>
	...

08008eb8 <_printf_float>:
 8008eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ebc:	b091      	sub	sp, #68	; 0x44
 8008ebe:	460c      	mov	r4, r1
 8008ec0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8008ec2:	4693      	mov	fp, r2
 8008ec4:	461e      	mov	r6, r3
 8008ec6:	4605      	mov	r5, r0
 8008ec8:	f003 f8ce 	bl	800c068 <_localeconv_r>
 8008ecc:	6803      	ldr	r3, [r0, #0]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ed2:	f7f7 f9a9 	bl	8000228 <strlen>
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	930e      	str	r3, [sp, #56]	; 0x38
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	900a      	str	r0, [sp, #40]	; 0x28
 8008ede:	3307      	adds	r3, #7
 8008ee0:	f023 0307 	bic.w	r3, r3, #7
 8008ee4:	f103 0208 	add.w	r2, r3, #8
 8008ee8:	f894 8018 	ldrb.w	r8, [r4, #24]
 8008eec:	f8d4 a000 	ldr.w	sl, [r4]
 8008ef0:	603a      	str	r2, [r7, #0]
 8008ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008efa:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8008efe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008f02:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f04:	f04f 32ff 	mov.w	r2, #4294967295
 8008f08:	4ba6      	ldr	r3, [pc, #664]	; (80091a4 <_printf_float+0x2ec>)
 8008f0a:	4638      	mov	r0, r7
 8008f0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f0e:	f7f7 fde9 	bl	8000ae4 <__aeabi_dcmpun>
 8008f12:	bb68      	cbnz	r0, 8008f70 <_printf_float+0xb8>
 8008f14:	f04f 32ff 	mov.w	r2, #4294967295
 8008f18:	4ba2      	ldr	r3, [pc, #648]	; (80091a4 <_printf_float+0x2ec>)
 8008f1a:	4638      	mov	r0, r7
 8008f1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f1e:	f7f7 fdc3 	bl	8000aa8 <__aeabi_dcmple>
 8008f22:	bb28      	cbnz	r0, 8008f70 <_printf_float+0xb8>
 8008f24:	2200      	movs	r2, #0
 8008f26:	2300      	movs	r3, #0
 8008f28:	4638      	mov	r0, r7
 8008f2a:	4649      	mov	r1, r9
 8008f2c:	f7f7 fdb2 	bl	8000a94 <__aeabi_dcmplt>
 8008f30:	b110      	cbz	r0, 8008f38 <_printf_float+0x80>
 8008f32:	232d      	movs	r3, #45	; 0x2d
 8008f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f38:	4f9b      	ldr	r7, [pc, #620]	; (80091a8 <_printf_float+0x2f0>)
 8008f3a:	4b9c      	ldr	r3, [pc, #624]	; (80091ac <_printf_float+0x2f4>)
 8008f3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008f40:	bf98      	it	ls
 8008f42:	461f      	movls	r7, r3
 8008f44:	2303      	movs	r3, #3
 8008f46:	f04f 0900 	mov.w	r9, #0
 8008f4a:	6123      	str	r3, [r4, #16]
 8008f4c:	f02a 0304 	bic.w	r3, sl, #4
 8008f50:	6023      	str	r3, [r4, #0]
 8008f52:	9600      	str	r6, [sp, #0]
 8008f54:	465b      	mov	r3, fp
 8008f56:	aa0f      	add	r2, sp, #60	; 0x3c
 8008f58:	4621      	mov	r1, r4
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	f000 f9e2 	bl	8009324 <_printf_common>
 8008f60:	3001      	adds	r0, #1
 8008f62:	f040 8090 	bne.w	8009086 <_printf_float+0x1ce>
 8008f66:	f04f 30ff 	mov.w	r0, #4294967295
 8008f6a:	b011      	add	sp, #68	; 0x44
 8008f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f70:	463a      	mov	r2, r7
 8008f72:	464b      	mov	r3, r9
 8008f74:	4638      	mov	r0, r7
 8008f76:	4649      	mov	r1, r9
 8008f78:	f7f7 fdb4 	bl	8000ae4 <__aeabi_dcmpun>
 8008f7c:	b110      	cbz	r0, 8008f84 <_printf_float+0xcc>
 8008f7e:	4f8c      	ldr	r7, [pc, #560]	; (80091b0 <_printf_float+0x2f8>)
 8008f80:	4b8c      	ldr	r3, [pc, #560]	; (80091b4 <_printf_float+0x2fc>)
 8008f82:	e7db      	b.n	8008f3c <_printf_float+0x84>
 8008f84:	6863      	ldr	r3, [r4, #4]
 8008f86:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8008f8a:	1c59      	adds	r1, r3, #1
 8008f8c:	a80d      	add	r0, sp, #52	; 0x34
 8008f8e:	a90e      	add	r1, sp, #56	; 0x38
 8008f90:	d140      	bne.n	8009014 <_printf_float+0x15c>
 8008f92:	2306      	movs	r3, #6
 8008f94:	6063      	str	r3, [r4, #4]
 8008f96:	f04f 0c00 	mov.w	ip, #0
 8008f9a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8008f9e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8008fa2:	6863      	ldr	r3, [r4, #4]
 8008fa4:	6022      	str	r2, [r4, #0]
 8008fa6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	463a      	mov	r2, r7
 8008fae:	464b      	mov	r3, r9
 8008fb0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	f7ff feed 	bl	8008d94 <__cvt>
 8008fba:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8008fbe:	2b47      	cmp	r3, #71	; 0x47
 8008fc0:	4607      	mov	r7, r0
 8008fc2:	d109      	bne.n	8008fd8 <_printf_float+0x120>
 8008fc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fc6:	1cd8      	adds	r0, r3, #3
 8008fc8:	db02      	blt.n	8008fd0 <_printf_float+0x118>
 8008fca:	6862      	ldr	r2, [r4, #4]
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	dd47      	ble.n	8009060 <_printf_float+0x1a8>
 8008fd0:	f1a8 0802 	sub.w	r8, r8, #2
 8008fd4:	fa5f f888 	uxtb.w	r8, r8
 8008fd8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8008fdc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008fde:	d824      	bhi.n	800902a <_printf_float+0x172>
 8008fe0:	3901      	subs	r1, #1
 8008fe2:	4642      	mov	r2, r8
 8008fe4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008fe8:	910d      	str	r1, [sp, #52]	; 0x34
 8008fea:	f7ff ff2f 	bl	8008e4c <__exponent>
 8008fee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ff0:	4681      	mov	r9, r0
 8008ff2:	1813      	adds	r3, r2, r0
 8008ff4:	2a01      	cmp	r2, #1
 8008ff6:	6123      	str	r3, [r4, #16]
 8008ff8:	dc02      	bgt.n	8009000 <_printf_float+0x148>
 8008ffa:	6822      	ldr	r2, [r4, #0]
 8008ffc:	07d1      	lsls	r1, r2, #31
 8008ffe:	d501      	bpl.n	8009004 <_printf_float+0x14c>
 8009000:	3301      	adds	r3, #1
 8009002:	6123      	str	r3, [r4, #16]
 8009004:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009008:	2b00      	cmp	r3, #0
 800900a:	d0a2      	beq.n	8008f52 <_printf_float+0x9a>
 800900c:	232d      	movs	r3, #45	; 0x2d
 800900e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009012:	e79e      	b.n	8008f52 <_printf_float+0x9a>
 8009014:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8009018:	f000 816e 	beq.w	80092f8 <_printf_float+0x440>
 800901c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009020:	d1b9      	bne.n	8008f96 <_printf_float+0xde>
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1b7      	bne.n	8008f96 <_printf_float+0xde>
 8009026:	2301      	movs	r3, #1
 8009028:	e7b4      	b.n	8008f94 <_printf_float+0xdc>
 800902a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800902e:	d119      	bne.n	8009064 <_printf_float+0x1ac>
 8009030:	2900      	cmp	r1, #0
 8009032:	6863      	ldr	r3, [r4, #4]
 8009034:	dd0c      	ble.n	8009050 <_printf_float+0x198>
 8009036:	6121      	str	r1, [r4, #16]
 8009038:	b913      	cbnz	r3, 8009040 <_printf_float+0x188>
 800903a:	6822      	ldr	r2, [r4, #0]
 800903c:	07d2      	lsls	r2, r2, #31
 800903e:	d502      	bpl.n	8009046 <_printf_float+0x18e>
 8009040:	3301      	adds	r3, #1
 8009042:	440b      	add	r3, r1
 8009044:	6123      	str	r3, [r4, #16]
 8009046:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009048:	f04f 0900 	mov.w	r9, #0
 800904c:	65a3      	str	r3, [r4, #88]	; 0x58
 800904e:	e7d9      	b.n	8009004 <_printf_float+0x14c>
 8009050:	b913      	cbnz	r3, 8009058 <_printf_float+0x1a0>
 8009052:	6822      	ldr	r2, [r4, #0]
 8009054:	07d0      	lsls	r0, r2, #31
 8009056:	d501      	bpl.n	800905c <_printf_float+0x1a4>
 8009058:	3302      	adds	r3, #2
 800905a:	e7f3      	b.n	8009044 <_printf_float+0x18c>
 800905c:	2301      	movs	r3, #1
 800905e:	e7f1      	b.n	8009044 <_printf_float+0x18c>
 8009060:	f04f 0867 	mov.w	r8, #103	; 0x67
 8009064:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009068:	4293      	cmp	r3, r2
 800906a:	db05      	blt.n	8009078 <_printf_float+0x1c0>
 800906c:	6822      	ldr	r2, [r4, #0]
 800906e:	6123      	str	r3, [r4, #16]
 8009070:	07d1      	lsls	r1, r2, #31
 8009072:	d5e8      	bpl.n	8009046 <_printf_float+0x18e>
 8009074:	3301      	adds	r3, #1
 8009076:	e7e5      	b.n	8009044 <_printf_float+0x18c>
 8009078:	2b00      	cmp	r3, #0
 800907a:	bfcc      	ite	gt
 800907c:	2301      	movgt	r3, #1
 800907e:	f1c3 0302 	rsble	r3, r3, #2
 8009082:	4413      	add	r3, r2
 8009084:	e7de      	b.n	8009044 <_printf_float+0x18c>
 8009086:	6823      	ldr	r3, [r4, #0]
 8009088:	055a      	lsls	r2, r3, #21
 800908a:	d407      	bmi.n	800909c <_printf_float+0x1e4>
 800908c:	6923      	ldr	r3, [r4, #16]
 800908e:	463a      	mov	r2, r7
 8009090:	4659      	mov	r1, fp
 8009092:	4628      	mov	r0, r5
 8009094:	47b0      	blx	r6
 8009096:	3001      	adds	r0, #1
 8009098:	d129      	bne.n	80090ee <_printf_float+0x236>
 800909a:	e764      	b.n	8008f66 <_printf_float+0xae>
 800909c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80090a0:	f240 80d7 	bls.w	8009252 <_printf_float+0x39a>
 80090a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090a8:	2200      	movs	r2, #0
 80090aa:	2300      	movs	r3, #0
 80090ac:	f7f7 fce8 	bl	8000a80 <__aeabi_dcmpeq>
 80090b0:	b388      	cbz	r0, 8009116 <_printf_float+0x25e>
 80090b2:	2301      	movs	r3, #1
 80090b4:	4a40      	ldr	r2, [pc, #256]	; (80091b8 <_printf_float+0x300>)
 80090b6:	4659      	mov	r1, fp
 80090b8:	4628      	mov	r0, r5
 80090ba:	47b0      	blx	r6
 80090bc:	3001      	adds	r0, #1
 80090be:	f43f af52 	beq.w	8008f66 <_printf_float+0xae>
 80090c2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80090c6:	429a      	cmp	r2, r3
 80090c8:	db02      	blt.n	80090d0 <_printf_float+0x218>
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	07d8      	lsls	r0, r3, #31
 80090ce:	d50e      	bpl.n	80090ee <_printf_float+0x236>
 80090d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090d4:	4659      	mov	r1, fp
 80090d6:	4628      	mov	r0, r5
 80090d8:	47b0      	blx	r6
 80090da:	3001      	adds	r0, #1
 80090dc:	f43f af43 	beq.w	8008f66 <_printf_float+0xae>
 80090e0:	2700      	movs	r7, #0
 80090e2:	f104 081a 	add.w	r8, r4, #26
 80090e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090e8:	3b01      	subs	r3, #1
 80090ea:	42bb      	cmp	r3, r7
 80090ec:	dc09      	bgt.n	8009102 <_printf_float+0x24a>
 80090ee:	6823      	ldr	r3, [r4, #0]
 80090f0:	079f      	lsls	r7, r3, #30
 80090f2:	f100 80fd 	bmi.w	80092f0 <_printf_float+0x438>
 80090f6:	68e0      	ldr	r0, [r4, #12]
 80090f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090fa:	4298      	cmp	r0, r3
 80090fc:	bfb8      	it	lt
 80090fe:	4618      	movlt	r0, r3
 8009100:	e733      	b.n	8008f6a <_printf_float+0xb2>
 8009102:	2301      	movs	r3, #1
 8009104:	4642      	mov	r2, r8
 8009106:	4659      	mov	r1, fp
 8009108:	4628      	mov	r0, r5
 800910a:	47b0      	blx	r6
 800910c:	3001      	adds	r0, #1
 800910e:	f43f af2a 	beq.w	8008f66 <_printf_float+0xae>
 8009112:	3701      	adds	r7, #1
 8009114:	e7e7      	b.n	80090e6 <_printf_float+0x22e>
 8009116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009118:	2b00      	cmp	r3, #0
 800911a:	dc2b      	bgt.n	8009174 <_printf_float+0x2bc>
 800911c:	2301      	movs	r3, #1
 800911e:	4a26      	ldr	r2, [pc, #152]	; (80091b8 <_printf_float+0x300>)
 8009120:	4659      	mov	r1, fp
 8009122:	4628      	mov	r0, r5
 8009124:	47b0      	blx	r6
 8009126:	3001      	adds	r0, #1
 8009128:	f43f af1d 	beq.w	8008f66 <_printf_float+0xae>
 800912c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800912e:	b923      	cbnz	r3, 800913a <_printf_float+0x282>
 8009130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009132:	b913      	cbnz	r3, 800913a <_printf_float+0x282>
 8009134:	6823      	ldr	r3, [r4, #0]
 8009136:	07d9      	lsls	r1, r3, #31
 8009138:	d5d9      	bpl.n	80090ee <_printf_float+0x236>
 800913a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800913e:	4659      	mov	r1, fp
 8009140:	4628      	mov	r0, r5
 8009142:	47b0      	blx	r6
 8009144:	3001      	adds	r0, #1
 8009146:	f43f af0e 	beq.w	8008f66 <_printf_float+0xae>
 800914a:	f04f 0800 	mov.w	r8, #0
 800914e:	f104 091a 	add.w	r9, r4, #26
 8009152:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009154:	425b      	negs	r3, r3
 8009156:	4543      	cmp	r3, r8
 8009158:	dc01      	bgt.n	800915e <_printf_float+0x2a6>
 800915a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800915c:	e797      	b.n	800908e <_printf_float+0x1d6>
 800915e:	2301      	movs	r3, #1
 8009160:	464a      	mov	r2, r9
 8009162:	4659      	mov	r1, fp
 8009164:	4628      	mov	r0, r5
 8009166:	47b0      	blx	r6
 8009168:	3001      	adds	r0, #1
 800916a:	f43f aefc 	beq.w	8008f66 <_printf_float+0xae>
 800916e:	f108 0801 	add.w	r8, r8, #1
 8009172:	e7ee      	b.n	8009152 <_printf_float+0x29a>
 8009174:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009176:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009178:	429a      	cmp	r2, r3
 800917a:	bfa8      	it	ge
 800917c:	461a      	movge	r2, r3
 800917e:	2a00      	cmp	r2, #0
 8009180:	4690      	mov	r8, r2
 8009182:	dd07      	ble.n	8009194 <_printf_float+0x2dc>
 8009184:	4613      	mov	r3, r2
 8009186:	4659      	mov	r1, fp
 8009188:	463a      	mov	r2, r7
 800918a:	4628      	mov	r0, r5
 800918c:	47b0      	blx	r6
 800918e:	3001      	adds	r0, #1
 8009190:	f43f aee9 	beq.w	8008f66 <_printf_float+0xae>
 8009194:	f104 031a 	add.w	r3, r4, #26
 8009198:	f04f 0a00 	mov.w	sl, #0
 800919c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80091a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80091a2:	e015      	b.n	80091d0 <_printf_float+0x318>
 80091a4:	7fefffff 	.word	0x7fefffff
 80091a8:	0800e63c 	.word	0x0800e63c
 80091ac:	0800e638 	.word	0x0800e638
 80091b0:	0800e644 	.word	0x0800e644
 80091b4:	0800e640 	.word	0x0800e640
 80091b8:	0800db6c 	.word	0x0800db6c
 80091bc:	2301      	movs	r3, #1
 80091be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80091c0:	4659      	mov	r1, fp
 80091c2:	4628      	mov	r0, r5
 80091c4:	47b0      	blx	r6
 80091c6:	3001      	adds	r0, #1
 80091c8:	f43f aecd 	beq.w	8008f66 <_printf_float+0xae>
 80091cc:	f10a 0a01 	add.w	sl, sl, #1
 80091d0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80091d4:	eba9 0308 	sub.w	r3, r9, r8
 80091d8:	4553      	cmp	r3, sl
 80091da:	dcef      	bgt.n	80091bc <_printf_float+0x304>
 80091dc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80091e0:	429a      	cmp	r2, r3
 80091e2:	444f      	add	r7, r9
 80091e4:	db14      	blt.n	8009210 <_printf_float+0x358>
 80091e6:	6823      	ldr	r3, [r4, #0]
 80091e8:	07da      	lsls	r2, r3, #31
 80091ea:	d411      	bmi.n	8009210 <_printf_float+0x358>
 80091ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091ee:	990d      	ldr	r1, [sp, #52]	; 0x34
 80091f0:	eba3 0209 	sub.w	r2, r3, r9
 80091f4:	eba3 0901 	sub.w	r9, r3, r1
 80091f8:	4591      	cmp	r9, r2
 80091fa:	bfa8      	it	ge
 80091fc:	4691      	movge	r9, r2
 80091fe:	f1b9 0f00 	cmp.w	r9, #0
 8009202:	dc0d      	bgt.n	8009220 <_printf_float+0x368>
 8009204:	2700      	movs	r7, #0
 8009206:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800920a:	f104 081a 	add.w	r8, r4, #26
 800920e:	e018      	b.n	8009242 <_printf_float+0x38a>
 8009210:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009214:	4659      	mov	r1, fp
 8009216:	4628      	mov	r0, r5
 8009218:	47b0      	blx	r6
 800921a:	3001      	adds	r0, #1
 800921c:	d1e6      	bne.n	80091ec <_printf_float+0x334>
 800921e:	e6a2      	b.n	8008f66 <_printf_float+0xae>
 8009220:	464b      	mov	r3, r9
 8009222:	463a      	mov	r2, r7
 8009224:	4659      	mov	r1, fp
 8009226:	4628      	mov	r0, r5
 8009228:	47b0      	blx	r6
 800922a:	3001      	adds	r0, #1
 800922c:	d1ea      	bne.n	8009204 <_printf_float+0x34c>
 800922e:	e69a      	b.n	8008f66 <_printf_float+0xae>
 8009230:	2301      	movs	r3, #1
 8009232:	4642      	mov	r2, r8
 8009234:	4659      	mov	r1, fp
 8009236:	4628      	mov	r0, r5
 8009238:	47b0      	blx	r6
 800923a:	3001      	adds	r0, #1
 800923c:	f43f ae93 	beq.w	8008f66 <_printf_float+0xae>
 8009240:	3701      	adds	r7, #1
 8009242:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009246:	1a9b      	subs	r3, r3, r2
 8009248:	eba3 0309 	sub.w	r3, r3, r9
 800924c:	42bb      	cmp	r3, r7
 800924e:	dcef      	bgt.n	8009230 <_printf_float+0x378>
 8009250:	e74d      	b.n	80090ee <_printf_float+0x236>
 8009252:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009254:	2a01      	cmp	r2, #1
 8009256:	dc01      	bgt.n	800925c <_printf_float+0x3a4>
 8009258:	07db      	lsls	r3, r3, #31
 800925a:	d538      	bpl.n	80092ce <_printf_float+0x416>
 800925c:	2301      	movs	r3, #1
 800925e:	463a      	mov	r2, r7
 8009260:	4659      	mov	r1, fp
 8009262:	4628      	mov	r0, r5
 8009264:	47b0      	blx	r6
 8009266:	3001      	adds	r0, #1
 8009268:	f43f ae7d 	beq.w	8008f66 <_printf_float+0xae>
 800926c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009270:	4659      	mov	r1, fp
 8009272:	4628      	mov	r0, r5
 8009274:	47b0      	blx	r6
 8009276:	3001      	adds	r0, #1
 8009278:	f107 0701 	add.w	r7, r7, #1
 800927c:	f43f ae73 	beq.w	8008f66 <_printf_float+0xae>
 8009280:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009284:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009286:	2200      	movs	r2, #0
 8009288:	f103 38ff 	add.w	r8, r3, #4294967295
 800928c:	2300      	movs	r3, #0
 800928e:	f7f7 fbf7 	bl	8000a80 <__aeabi_dcmpeq>
 8009292:	b9c0      	cbnz	r0, 80092c6 <_printf_float+0x40e>
 8009294:	4643      	mov	r3, r8
 8009296:	463a      	mov	r2, r7
 8009298:	4659      	mov	r1, fp
 800929a:	4628      	mov	r0, r5
 800929c:	47b0      	blx	r6
 800929e:	3001      	adds	r0, #1
 80092a0:	d10d      	bne.n	80092be <_printf_float+0x406>
 80092a2:	e660      	b.n	8008f66 <_printf_float+0xae>
 80092a4:	2301      	movs	r3, #1
 80092a6:	4642      	mov	r2, r8
 80092a8:	4659      	mov	r1, fp
 80092aa:	4628      	mov	r0, r5
 80092ac:	47b0      	blx	r6
 80092ae:	3001      	adds	r0, #1
 80092b0:	f43f ae59 	beq.w	8008f66 <_printf_float+0xae>
 80092b4:	3701      	adds	r7, #1
 80092b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092b8:	3b01      	subs	r3, #1
 80092ba:	42bb      	cmp	r3, r7
 80092bc:	dcf2      	bgt.n	80092a4 <_printf_float+0x3ec>
 80092be:	464b      	mov	r3, r9
 80092c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80092c4:	e6e4      	b.n	8009090 <_printf_float+0x1d8>
 80092c6:	2700      	movs	r7, #0
 80092c8:	f104 081a 	add.w	r8, r4, #26
 80092cc:	e7f3      	b.n	80092b6 <_printf_float+0x3fe>
 80092ce:	2301      	movs	r3, #1
 80092d0:	e7e1      	b.n	8009296 <_printf_float+0x3de>
 80092d2:	2301      	movs	r3, #1
 80092d4:	4642      	mov	r2, r8
 80092d6:	4659      	mov	r1, fp
 80092d8:	4628      	mov	r0, r5
 80092da:	47b0      	blx	r6
 80092dc:	3001      	adds	r0, #1
 80092de:	f43f ae42 	beq.w	8008f66 <_printf_float+0xae>
 80092e2:	3701      	adds	r7, #1
 80092e4:	68e3      	ldr	r3, [r4, #12]
 80092e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80092e8:	1a9b      	subs	r3, r3, r2
 80092ea:	42bb      	cmp	r3, r7
 80092ec:	dcf1      	bgt.n	80092d2 <_printf_float+0x41a>
 80092ee:	e702      	b.n	80090f6 <_printf_float+0x23e>
 80092f0:	2700      	movs	r7, #0
 80092f2:	f104 0819 	add.w	r8, r4, #25
 80092f6:	e7f5      	b.n	80092e4 <_printf_float+0x42c>
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f43f ae94 	beq.w	8009026 <_printf_float+0x16e>
 80092fe:	f04f 0c00 	mov.w	ip, #0
 8009302:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8009306:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800930a:	6022      	str	r2, [r4, #0]
 800930c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8009310:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009314:	9300      	str	r3, [sp, #0]
 8009316:	463a      	mov	r2, r7
 8009318:	464b      	mov	r3, r9
 800931a:	4628      	mov	r0, r5
 800931c:	f7ff fd3a 	bl	8008d94 <__cvt>
 8009320:	4607      	mov	r7, r0
 8009322:	e64f      	b.n	8008fc4 <_printf_float+0x10c>

08009324 <_printf_common>:
 8009324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009328:	4691      	mov	r9, r2
 800932a:	461f      	mov	r7, r3
 800932c:	688a      	ldr	r2, [r1, #8]
 800932e:	690b      	ldr	r3, [r1, #16]
 8009330:	4606      	mov	r6, r0
 8009332:	4293      	cmp	r3, r2
 8009334:	bfb8      	it	lt
 8009336:	4613      	movlt	r3, r2
 8009338:	f8c9 3000 	str.w	r3, [r9]
 800933c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009340:	460c      	mov	r4, r1
 8009342:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009346:	b112      	cbz	r2, 800934e <_printf_common+0x2a>
 8009348:	3301      	adds	r3, #1
 800934a:	f8c9 3000 	str.w	r3, [r9]
 800934e:	6823      	ldr	r3, [r4, #0]
 8009350:	0699      	lsls	r1, r3, #26
 8009352:	bf42      	ittt	mi
 8009354:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009358:	3302      	addmi	r3, #2
 800935a:	f8c9 3000 	strmi.w	r3, [r9]
 800935e:	6825      	ldr	r5, [r4, #0]
 8009360:	f015 0506 	ands.w	r5, r5, #6
 8009364:	d107      	bne.n	8009376 <_printf_common+0x52>
 8009366:	f104 0a19 	add.w	sl, r4, #25
 800936a:	68e3      	ldr	r3, [r4, #12]
 800936c:	f8d9 2000 	ldr.w	r2, [r9]
 8009370:	1a9b      	subs	r3, r3, r2
 8009372:	42ab      	cmp	r3, r5
 8009374:	dc29      	bgt.n	80093ca <_printf_common+0xa6>
 8009376:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800937a:	6822      	ldr	r2, [r4, #0]
 800937c:	3300      	adds	r3, #0
 800937e:	bf18      	it	ne
 8009380:	2301      	movne	r3, #1
 8009382:	0692      	lsls	r2, r2, #26
 8009384:	d42e      	bmi.n	80093e4 <_printf_common+0xc0>
 8009386:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800938a:	4639      	mov	r1, r7
 800938c:	4630      	mov	r0, r6
 800938e:	47c0      	blx	r8
 8009390:	3001      	adds	r0, #1
 8009392:	d021      	beq.n	80093d8 <_printf_common+0xb4>
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	68e5      	ldr	r5, [r4, #12]
 8009398:	f003 0306 	and.w	r3, r3, #6
 800939c:	2b04      	cmp	r3, #4
 800939e:	bf18      	it	ne
 80093a0:	2500      	movne	r5, #0
 80093a2:	f8d9 2000 	ldr.w	r2, [r9]
 80093a6:	f04f 0900 	mov.w	r9, #0
 80093aa:	bf08      	it	eq
 80093ac:	1aad      	subeq	r5, r5, r2
 80093ae:	68a3      	ldr	r3, [r4, #8]
 80093b0:	6922      	ldr	r2, [r4, #16]
 80093b2:	bf08      	it	eq
 80093b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093b8:	4293      	cmp	r3, r2
 80093ba:	bfc4      	itt	gt
 80093bc:	1a9b      	subgt	r3, r3, r2
 80093be:	18ed      	addgt	r5, r5, r3
 80093c0:	341a      	adds	r4, #26
 80093c2:	454d      	cmp	r5, r9
 80093c4:	d11a      	bne.n	80093fc <_printf_common+0xd8>
 80093c6:	2000      	movs	r0, #0
 80093c8:	e008      	b.n	80093dc <_printf_common+0xb8>
 80093ca:	2301      	movs	r3, #1
 80093cc:	4652      	mov	r2, sl
 80093ce:	4639      	mov	r1, r7
 80093d0:	4630      	mov	r0, r6
 80093d2:	47c0      	blx	r8
 80093d4:	3001      	adds	r0, #1
 80093d6:	d103      	bne.n	80093e0 <_printf_common+0xbc>
 80093d8:	f04f 30ff 	mov.w	r0, #4294967295
 80093dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093e0:	3501      	adds	r5, #1
 80093e2:	e7c2      	b.n	800936a <_printf_common+0x46>
 80093e4:	2030      	movs	r0, #48	; 0x30
 80093e6:	18e1      	adds	r1, r4, r3
 80093e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093ec:	1c5a      	adds	r2, r3, #1
 80093ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093f2:	4422      	add	r2, r4
 80093f4:	3302      	adds	r3, #2
 80093f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093fa:	e7c4      	b.n	8009386 <_printf_common+0x62>
 80093fc:	2301      	movs	r3, #1
 80093fe:	4622      	mov	r2, r4
 8009400:	4639      	mov	r1, r7
 8009402:	4630      	mov	r0, r6
 8009404:	47c0      	blx	r8
 8009406:	3001      	adds	r0, #1
 8009408:	d0e6      	beq.n	80093d8 <_printf_common+0xb4>
 800940a:	f109 0901 	add.w	r9, r9, #1
 800940e:	e7d8      	b.n	80093c2 <_printf_common+0x9e>

08009410 <_printf_i>:
 8009410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009414:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009418:	460c      	mov	r4, r1
 800941a:	7e09      	ldrb	r1, [r1, #24]
 800941c:	b085      	sub	sp, #20
 800941e:	296e      	cmp	r1, #110	; 0x6e
 8009420:	4617      	mov	r7, r2
 8009422:	4606      	mov	r6, r0
 8009424:	4698      	mov	r8, r3
 8009426:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009428:	f000 80b3 	beq.w	8009592 <_printf_i+0x182>
 800942c:	d822      	bhi.n	8009474 <_printf_i+0x64>
 800942e:	2963      	cmp	r1, #99	; 0x63
 8009430:	d036      	beq.n	80094a0 <_printf_i+0x90>
 8009432:	d80a      	bhi.n	800944a <_printf_i+0x3a>
 8009434:	2900      	cmp	r1, #0
 8009436:	f000 80b9 	beq.w	80095ac <_printf_i+0x19c>
 800943a:	2958      	cmp	r1, #88	; 0x58
 800943c:	f000 8083 	beq.w	8009546 <_printf_i+0x136>
 8009440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009444:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009448:	e032      	b.n	80094b0 <_printf_i+0xa0>
 800944a:	2964      	cmp	r1, #100	; 0x64
 800944c:	d001      	beq.n	8009452 <_printf_i+0x42>
 800944e:	2969      	cmp	r1, #105	; 0x69
 8009450:	d1f6      	bne.n	8009440 <_printf_i+0x30>
 8009452:	6820      	ldr	r0, [r4, #0]
 8009454:	6813      	ldr	r3, [r2, #0]
 8009456:	0605      	lsls	r5, r0, #24
 8009458:	f103 0104 	add.w	r1, r3, #4
 800945c:	d52a      	bpl.n	80094b4 <_printf_i+0xa4>
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	6011      	str	r1, [r2, #0]
 8009462:	2b00      	cmp	r3, #0
 8009464:	da03      	bge.n	800946e <_printf_i+0x5e>
 8009466:	222d      	movs	r2, #45	; 0x2d
 8009468:	425b      	negs	r3, r3
 800946a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800946e:	486f      	ldr	r0, [pc, #444]	; (800962c <_printf_i+0x21c>)
 8009470:	220a      	movs	r2, #10
 8009472:	e039      	b.n	80094e8 <_printf_i+0xd8>
 8009474:	2973      	cmp	r1, #115	; 0x73
 8009476:	f000 809d 	beq.w	80095b4 <_printf_i+0x1a4>
 800947a:	d808      	bhi.n	800948e <_printf_i+0x7e>
 800947c:	296f      	cmp	r1, #111	; 0x6f
 800947e:	d020      	beq.n	80094c2 <_printf_i+0xb2>
 8009480:	2970      	cmp	r1, #112	; 0x70
 8009482:	d1dd      	bne.n	8009440 <_printf_i+0x30>
 8009484:	6823      	ldr	r3, [r4, #0]
 8009486:	f043 0320 	orr.w	r3, r3, #32
 800948a:	6023      	str	r3, [r4, #0]
 800948c:	e003      	b.n	8009496 <_printf_i+0x86>
 800948e:	2975      	cmp	r1, #117	; 0x75
 8009490:	d017      	beq.n	80094c2 <_printf_i+0xb2>
 8009492:	2978      	cmp	r1, #120	; 0x78
 8009494:	d1d4      	bne.n	8009440 <_printf_i+0x30>
 8009496:	2378      	movs	r3, #120	; 0x78
 8009498:	4865      	ldr	r0, [pc, #404]	; (8009630 <_printf_i+0x220>)
 800949a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800949e:	e055      	b.n	800954c <_printf_i+0x13c>
 80094a0:	6813      	ldr	r3, [r2, #0]
 80094a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094a6:	1d19      	adds	r1, r3, #4
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	6011      	str	r1, [r2, #0]
 80094ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094b0:	2301      	movs	r3, #1
 80094b2:	e08c      	b.n	80095ce <_printf_i+0x1be>
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80094ba:	6011      	str	r1, [r2, #0]
 80094bc:	bf18      	it	ne
 80094be:	b21b      	sxthne	r3, r3
 80094c0:	e7cf      	b.n	8009462 <_printf_i+0x52>
 80094c2:	6813      	ldr	r3, [r2, #0]
 80094c4:	6825      	ldr	r5, [r4, #0]
 80094c6:	1d18      	adds	r0, r3, #4
 80094c8:	6010      	str	r0, [r2, #0]
 80094ca:	0628      	lsls	r0, r5, #24
 80094cc:	d501      	bpl.n	80094d2 <_printf_i+0xc2>
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	e002      	b.n	80094d8 <_printf_i+0xc8>
 80094d2:	0668      	lsls	r0, r5, #25
 80094d4:	d5fb      	bpl.n	80094ce <_printf_i+0xbe>
 80094d6:	881b      	ldrh	r3, [r3, #0]
 80094d8:	296f      	cmp	r1, #111	; 0x6f
 80094da:	bf14      	ite	ne
 80094dc:	220a      	movne	r2, #10
 80094de:	2208      	moveq	r2, #8
 80094e0:	4852      	ldr	r0, [pc, #328]	; (800962c <_printf_i+0x21c>)
 80094e2:	2100      	movs	r1, #0
 80094e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094e8:	6865      	ldr	r5, [r4, #4]
 80094ea:	2d00      	cmp	r5, #0
 80094ec:	60a5      	str	r5, [r4, #8]
 80094ee:	f2c0 8095 	blt.w	800961c <_printf_i+0x20c>
 80094f2:	6821      	ldr	r1, [r4, #0]
 80094f4:	f021 0104 	bic.w	r1, r1, #4
 80094f8:	6021      	str	r1, [r4, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d13d      	bne.n	800957a <_printf_i+0x16a>
 80094fe:	2d00      	cmp	r5, #0
 8009500:	f040 808e 	bne.w	8009620 <_printf_i+0x210>
 8009504:	4665      	mov	r5, ip
 8009506:	2a08      	cmp	r2, #8
 8009508:	d10b      	bne.n	8009522 <_printf_i+0x112>
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	07db      	lsls	r3, r3, #31
 800950e:	d508      	bpl.n	8009522 <_printf_i+0x112>
 8009510:	6923      	ldr	r3, [r4, #16]
 8009512:	6862      	ldr	r2, [r4, #4]
 8009514:	429a      	cmp	r2, r3
 8009516:	bfde      	ittt	le
 8009518:	2330      	movle	r3, #48	; 0x30
 800951a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800951e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009522:	ebac 0305 	sub.w	r3, ip, r5
 8009526:	6123      	str	r3, [r4, #16]
 8009528:	f8cd 8000 	str.w	r8, [sp]
 800952c:	463b      	mov	r3, r7
 800952e:	aa03      	add	r2, sp, #12
 8009530:	4621      	mov	r1, r4
 8009532:	4630      	mov	r0, r6
 8009534:	f7ff fef6 	bl	8009324 <_printf_common>
 8009538:	3001      	adds	r0, #1
 800953a:	d14d      	bne.n	80095d8 <_printf_i+0x1c8>
 800953c:	f04f 30ff 	mov.w	r0, #4294967295
 8009540:	b005      	add	sp, #20
 8009542:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009546:	4839      	ldr	r0, [pc, #228]	; (800962c <_printf_i+0x21c>)
 8009548:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800954c:	6813      	ldr	r3, [r2, #0]
 800954e:	6821      	ldr	r1, [r4, #0]
 8009550:	1d1d      	adds	r5, r3, #4
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	6015      	str	r5, [r2, #0]
 8009556:	060a      	lsls	r2, r1, #24
 8009558:	d50b      	bpl.n	8009572 <_printf_i+0x162>
 800955a:	07ca      	lsls	r2, r1, #31
 800955c:	bf44      	itt	mi
 800955e:	f041 0120 	orrmi.w	r1, r1, #32
 8009562:	6021      	strmi	r1, [r4, #0]
 8009564:	b91b      	cbnz	r3, 800956e <_printf_i+0x15e>
 8009566:	6822      	ldr	r2, [r4, #0]
 8009568:	f022 0220 	bic.w	r2, r2, #32
 800956c:	6022      	str	r2, [r4, #0]
 800956e:	2210      	movs	r2, #16
 8009570:	e7b7      	b.n	80094e2 <_printf_i+0xd2>
 8009572:	064d      	lsls	r5, r1, #25
 8009574:	bf48      	it	mi
 8009576:	b29b      	uxthmi	r3, r3
 8009578:	e7ef      	b.n	800955a <_printf_i+0x14a>
 800957a:	4665      	mov	r5, ip
 800957c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009580:	fb02 3311 	mls	r3, r2, r1, r3
 8009584:	5cc3      	ldrb	r3, [r0, r3]
 8009586:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800958a:	460b      	mov	r3, r1
 800958c:	2900      	cmp	r1, #0
 800958e:	d1f5      	bne.n	800957c <_printf_i+0x16c>
 8009590:	e7b9      	b.n	8009506 <_printf_i+0xf6>
 8009592:	6813      	ldr	r3, [r2, #0]
 8009594:	6825      	ldr	r5, [r4, #0]
 8009596:	1d18      	adds	r0, r3, #4
 8009598:	6961      	ldr	r1, [r4, #20]
 800959a:	6010      	str	r0, [r2, #0]
 800959c:	0628      	lsls	r0, r5, #24
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	d501      	bpl.n	80095a6 <_printf_i+0x196>
 80095a2:	6019      	str	r1, [r3, #0]
 80095a4:	e002      	b.n	80095ac <_printf_i+0x19c>
 80095a6:	066a      	lsls	r2, r5, #25
 80095a8:	d5fb      	bpl.n	80095a2 <_printf_i+0x192>
 80095aa:	8019      	strh	r1, [r3, #0]
 80095ac:	2300      	movs	r3, #0
 80095ae:	4665      	mov	r5, ip
 80095b0:	6123      	str	r3, [r4, #16]
 80095b2:	e7b9      	b.n	8009528 <_printf_i+0x118>
 80095b4:	6813      	ldr	r3, [r2, #0]
 80095b6:	1d19      	adds	r1, r3, #4
 80095b8:	6011      	str	r1, [r2, #0]
 80095ba:	681d      	ldr	r5, [r3, #0]
 80095bc:	6862      	ldr	r2, [r4, #4]
 80095be:	2100      	movs	r1, #0
 80095c0:	4628      	mov	r0, r5
 80095c2:	f002 fdd5 	bl	800c170 <memchr>
 80095c6:	b108      	cbz	r0, 80095cc <_printf_i+0x1bc>
 80095c8:	1b40      	subs	r0, r0, r5
 80095ca:	6060      	str	r0, [r4, #4]
 80095cc:	6863      	ldr	r3, [r4, #4]
 80095ce:	6123      	str	r3, [r4, #16]
 80095d0:	2300      	movs	r3, #0
 80095d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095d6:	e7a7      	b.n	8009528 <_printf_i+0x118>
 80095d8:	6923      	ldr	r3, [r4, #16]
 80095da:	462a      	mov	r2, r5
 80095dc:	4639      	mov	r1, r7
 80095de:	4630      	mov	r0, r6
 80095e0:	47c0      	blx	r8
 80095e2:	3001      	adds	r0, #1
 80095e4:	d0aa      	beq.n	800953c <_printf_i+0x12c>
 80095e6:	6823      	ldr	r3, [r4, #0]
 80095e8:	079b      	lsls	r3, r3, #30
 80095ea:	d413      	bmi.n	8009614 <_printf_i+0x204>
 80095ec:	68e0      	ldr	r0, [r4, #12]
 80095ee:	9b03      	ldr	r3, [sp, #12]
 80095f0:	4298      	cmp	r0, r3
 80095f2:	bfb8      	it	lt
 80095f4:	4618      	movlt	r0, r3
 80095f6:	e7a3      	b.n	8009540 <_printf_i+0x130>
 80095f8:	2301      	movs	r3, #1
 80095fa:	464a      	mov	r2, r9
 80095fc:	4639      	mov	r1, r7
 80095fe:	4630      	mov	r0, r6
 8009600:	47c0      	blx	r8
 8009602:	3001      	adds	r0, #1
 8009604:	d09a      	beq.n	800953c <_printf_i+0x12c>
 8009606:	3501      	adds	r5, #1
 8009608:	68e3      	ldr	r3, [r4, #12]
 800960a:	9a03      	ldr	r2, [sp, #12]
 800960c:	1a9b      	subs	r3, r3, r2
 800960e:	42ab      	cmp	r3, r5
 8009610:	dcf2      	bgt.n	80095f8 <_printf_i+0x1e8>
 8009612:	e7eb      	b.n	80095ec <_printf_i+0x1dc>
 8009614:	2500      	movs	r5, #0
 8009616:	f104 0919 	add.w	r9, r4, #25
 800961a:	e7f5      	b.n	8009608 <_printf_i+0x1f8>
 800961c:	2b00      	cmp	r3, #0
 800961e:	d1ac      	bne.n	800957a <_printf_i+0x16a>
 8009620:	7803      	ldrb	r3, [r0, #0]
 8009622:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009626:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800962a:	e76c      	b.n	8009506 <_printf_i+0xf6>
 800962c:	0800e648 	.word	0x0800e648
 8009630:	0800e659 	.word	0x0800e659

08009634 <_scanf_float>:
 8009634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009638:	469a      	mov	sl, r3
 800963a:	688b      	ldr	r3, [r1, #8]
 800963c:	4616      	mov	r6, r2
 800963e:	1e5a      	subs	r2, r3, #1
 8009640:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009644:	bf88      	it	hi
 8009646:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800964a:	b087      	sub	sp, #28
 800964c:	bf85      	ittet	hi
 800964e:	189b      	addhi	r3, r3, r2
 8009650:	9301      	strhi	r3, [sp, #4]
 8009652:	2300      	movls	r3, #0
 8009654:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009658:	4688      	mov	r8, r1
 800965a:	f04f 0b00 	mov.w	fp, #0
 800965e:	bf8c      	ite	hi
 8009660:	608b      	strhi	r3, [r1, #8]
 8009662:	9301      	strls	r3, [sp, #4]
 8009664:	680b      	ldr	r3, [r1, #0]
 8009666:	4607      	mov	r7, r0
 8009668:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800966c:	f848 3b1c 	str.w	r3, [r8], #28
 8009670:	460c      	mov	r4, r1
 8009672:	4645      	mov	r5, r8
 8009674:	465a      	mov	r2, fp
 8009676:	46d9      	mov	r9, fp
 8009678:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800967c:	f8cd b008 	str.w	fp, [sp, #8]
 8009680:	68a1      	ldr	r1, [r4, #8]
 8009682:	b181      	cbz	r1, 80096a6 <_scanf_float+0x72>
 8009684:	6833      	ldr	r3, [r6, #0]
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	2b49      	cmp	r3, #73	; 0x49
 800968a:	d071      	beq.n	8009770 <_scanf_float+0x13c>
 800968c:	d84d      	bhi.n	800972a <_scanf_float+0xf6>
 800968e:	2b39      	cmp	r3, #57	; 0x39
 8009690:	d840      	bhi.n	8009714 <_scanf_float+0xe0>
 8009692:	2b31      	cmp	r3, #49	; 0x31
 8009694:	f080 8088 	bcs.w	80097a8 <_scanf_float+0x174>
 8009698:	2b2d      	cmp	r3, #45	; 0x2d
 800969a:	f000 8090 	beq.w	80097be <_scanf_float+0x18a>
 800969e:	d815      	bhi.n	80096cc <_scanf_float+0x98>
 80096a0:	2b2b      	cmp	r3, #43	; 0x2b
 80096a2:	f000 808c 	beq.w	80097be <_scanf_float+0x18a>
 80096a6:	f1b9 0f00 	cmp.w	r9, #0
 80096aa:	d003      	beq.n	80096b4 <_scanf_float+0x80>
 80096ac:	6823      	ldr	r3, [r4, #0]
 80096ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096b2:	6023      	str	r3, [r4, #0]
 80096b4:	3a01      	subs	r2, #1
 80096b6:	2a01      	cmp	r2, #1
 80096b8:	f200 80ea 	bhi.w	8009890 <_scanf_float+0x25c>
 80096bc:	4545      	cmp	r5, r8
 80096be:	f200 80dc 	bhi.w	800987a <_scanf_float+0x246>
 80096c2:	2601      	movs	r6, #1
 80096c4:	4630      	mov	r0, r6
 80096c6:	b007      	add	sp, #28
 80096c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096cc:	2b2e      	cmp	r3, #46	; 0x2e
 80096ce:	f000 809f 	beq.w	8009810 <_scanf_float+0x1dc>
 80096d2:	2b30      	cmp	r3, #48	; 0x30
 80096d4:	d1e7      	bne.n	80096a6 <_scanf_float+0x72>
 80096d6:	6820      	ldr	r0, [r4, #0]
 80096d8:	f410 7f80 	tst.w	r0, #256	; 0x100
 80096dc:	d064      	beq.n	80097a8 <_scanf_float+0x174>
 80096de:	9b01      	ldr	r3, [sp, #4]
 80096e0:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80096e4:	6020      	str	r0, [r4, #0]
 80096e6:	f109 0901 	add.w	r9, r9, #1
 80096ea:	b11b      	cbz	r3, 80096f4 <_scanf_float+0xc0>
 80096ec:	3b01      	subs	r3, #1
 80096ee:	3101      	adds	r1, #1
 80096f0:	9301      	str	r3, [sp, #4]
 80096f2:	60a1      	str	r1, [r4, #8]
 80096f4:	68a3      	ldr	r3, [r4, #8]
 80096f6:	3b01      	subs	r3, #1
 80096f8:	60a3      	str	r3, [r4, #8]
 80096fa:	6923      	ldr	r3, [r4, #16]
 80096fc:	3301      	adds	r3, #1
 80096fe:	6123      	str	r3, [r4, #16]
 8009700:	6873      	ldr	r3, [r6, #4]
 8009702:	3b01      	subs	r3, #1
 8009704:	2b00      	cmp	r3, #0
 8009706:	6073      	str	r3, [r6, #4]
 8009708:	f340 80ac 	ble.w	8009864 <_scanf_float+0x230>
 800970c:	6833      	ldr	r3, [r6, #0]
 800970e:	3301      	adds	r3, #1
 8009710:	6033      	str	r3, [r6, #0]
 8009712:	e7b5      	b.n	8009680 <_scanf_float+0x4c>
 8009714:	2b45      	cmp	r3, #69	; 0x45
 8009716:	f000 8085 	beq.w	8009824 <_scanf_float+0x1f0>
 800971a:	2b46      	cmp	r3, #70	; 0x46
 800971c:	d06a      	beq.n	80097f4 <_scanf_float+0x1c0>
 800971e:	2b41      	cmp	r3, #65	; 0x41
 8009720:	d1c1      	bne.n	80096a6 <_scanf_float+0x72>
 8009722:	2a01      	cmp	r2, #1
 8009724:	d1bf      	bne.n	80096a6 <_scanf_float+0x72>
 8009726:	2202      	movs	r2, #2
 8009728:	e046      	b.n	80097b8 <_scanf_float+0x184>
 800972a:	2b65      	cmp	r3, #101	; 0x65
 800972c:	d07a      	beq.n	8009824 <_scanf_float+0x1f0>
 800972e:	d818      	bhi.n	8009762 <_scanf_float+0x12e>
 8009730:	2b54      	cmp	r3, #84	; 0x54
 8009732:	d066      	beq.n	8009802 <_scanf_float+0x1ce>
 8009734:	d811      	bhi.n	800975a <_scanf_float+0x126>
 8009736:	2b4e      	cmp	r3, #78	; 0x4e
 8009738:	d1b5      	bne.n	80096a6 <_scanf_float+0x72>
 800973a:	2a00      	cmp	r2, #0
 800973c:	d146      	bne.n	80097cc <_scanf_float+0x198>
 800973e:	f1b9 0f00 	cmp.w	r9, #0
 8009742:	d145      	bne.n	80097d0 <_scanf_float+0x19c>
 8009744:	6821      	ldr	r1, [r4, #0]
 8009746:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800974a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800974e:	d13f      	bne.n	80097d0 <_scanf_float+0x19c>
 8009750:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009754:	6021      	str	r1, [r4, #0]
 8009756:	2201      	movs	r2, #1
 8009758:	e02e      	b.n	80097b8 <_scanf_float+0x184>
 800975a:	2b59      	cmp	r3, #89	; 0x59
 800975c:	d01e      	beq.n	800979c <_scanf_float+0x168>
 800975e:	2b61      	cmp	r3, #97	; 0x61
 8009760:	e7de      	b.n	8009720 <_scanf_float+0xec>
 8009762:	2b6e      	cmp	r3, #110	; 0x6e
 8009764:	d0e9      	beq.n	800973a <_scanf_float+0x106>
 8009766:	d815      	bhi.n	8009794 <_scanf_float+0x160>
 8009768:	2b66      	cmp	r3, #102	; 0x66
 800976a:	d043      	beq.n	80097f4 <_scanf_float+0x1c0>
 800976c:	2b69      	cmp	r3, #105	; 0x69
 800976e:	d19a      	bne.n	80096a6 <_scanf_float+0x72>
 8009770:	f1bb 0f00 	cmp.w	fp, #0
 8009774:	d138      	bne.n	80097e8 <_scanf_float+0x1b4>
 8009776:	f1b9 0f00 	cmp.w	r9, #0
 800977a:	d197      	bne.n	80096ac <_scanf_float+0x78>
 800977c:	6821      	ldr	r1, [r4, #0]
 800977e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009782:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009786:	d195      	bne.n	80096b4 <_scanf_float+0x80>
 8009788:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800978c:	6021      	str	r1, [r4, #0]
 800978e:	f04f 0b01 	mov.w	fp, #1
 8009792:	e011      	b.n	80097b8 <_scanf_float+0x184>
 8009794:	2b74      	cmp	r3, #116	; 0x74
 8009796:	d034      	beq.n	8009802 <_scanf_float+0x1ce>
 8009798:	2b79      	cmp	r3, #121	; 0x79
 800979a:	d184      	bne.n	80096a6 <_scanf_float+0x72>
 800979c:	f1bb 0f07 	cmp.w	fp, #7
 80097a0:	d181      	bne.n	80096a6 <_scanf_float+0x72>
 80097a2:	f04f 0b08 	mov.w	fp, #8
 80097a6:	e007      	b.n	80097b8 <_scanf_float+0x184>
 80097a8:	eb12 0f0b 	cmn.w	r2, fp
 80097ac:	f47f af7b 	bne.w	80096a6 <_scanf_float+0x72>
 80097b0:	6821      	ldr	r1, [r4, #0]
 80097b2:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80097b6:	6021      	str	r1, [r4, #0]
 80097b8:	702b      	strb	r3, [r5, #0]
 80097ba:	3501      	adds	r5, #1
 80097bc:	e79a      	b.n	80096f4 <_scanf_float+0xc0>
 80097be:	6821      	ldr	r1, [r4, #0]
 80097c0:	0608      	lsls	r0, r1, #24
 80097c2:	f57f af70 	bpl.w	80096a6 <_scanf_float+0x72>
 80097c6:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80097ca:	e7f4      	b.n	80097b6 <_scanf_float+0x182>
 80097cc:	2a02      	cmp	r2, #2
 80097ce:	d047      	beq.n	8009860 <_scanf_float+0x22c>
 80097d0:	f1bb 0f01 	cmp.w	fp, #1
 80097d4:	d003      	beq.n	80097de <_scanf_float+0x1aa>
 80097d6:	f1bb 0f04 	cmp.w	fp, #4
 80097da:	f47f af64 	bne.w	80096a6 <_scanf_float+0x72>
 80097de:	f10b 0b01 	add.w	fp, fp, #1
 80097e2:	fa5f fb8b 	uxtb.w	fp, fp
 80097e6:	e7e7      	b.n	80097b8 <_scanf_float+0x184>
 80097e8:	f1bb 0f03 	cmp.w	fp, #3
 80097ec:	d0f7      	beq.n	80097de <_scanf_float+0x1aa>
 80097ee:	f1bb 0f05 	cmp.w	fp, #5
 80097f2:	e7f2      	b.n	80097da <_scanf_float+0x1a6>
 80097f4:	f1bb 0f02 	cmp.w	fp, #2
 80097f8:	f47f af55 	bne.w	80096a6 <_scanf_float+0x72>
 80097fc:	f04f 0b03 	mov.w	fp, #3
 8009800:	e7da      	b.n	80097b8 <_scanf_float+0x184>
 8009802:	f1bb 0f06 	cmp.w	fp, #6
 8009806:	f47f af4e 	bne.w	80096a6 <_scanf_float+0x72>
 800980a:	f04f 0b07 	mov.w	fp, #7
 800980e:	e7d3      	b.n	80097b8 <_scanf_float+0x184>
 8009810:	6821      	ldr	r1, [r4, #0]
 8009812:	0588      	lsls	r0, r1, #22
 8009814:	f57f af47 	bpl.w	80096a6 <_scanf_float+0x72>
 8009818:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800981c:	6021      	str	r1, [r4, #0]
 800981e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009822:	e7c9      	b.n	80097b8 <_scanf_float+0x184>
 8009824:	6821      	ldr	r1, [r4, #0]
 8009826:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800982a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800982e:	d006      	beq.n	800983e <_scanf_float+0x20a>
 8009830:	0548      	lsls	r0, r1, #21
 8009832:	f57f af38 	bpl.w	80096a6 <_scanf_float+0x72>
 8009836:	f1b9 0f00 	cmp.w	r9, #0
 800983a:	f43f af3b 	beq.w	80096b4 <_scanf_float+0x80>
 800983e:	0588      	lsls	r0, r1, #22
 8009840:	bf58      	it	pl
 8009842:	9802      	ldrpl	r0, [sp, #8]
 8009844:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009848:	bf58      	it	pl
 800984a:	eba9 0000 	subpl.w	r0, r9, r0
 800984e:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8009852:	bf58      	it	pl
 8009854:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8009858:	6021      	str	r1, [r4, #0]
 800985a:	f04f 0900 	mov.w	r9, #0
 800985e:	e7ab      	b.n	80097b8 <_scanf_float+0x184>
 8009860:	2203      	movs	r2, #3
 8009862:	e7a9      	b.n	80097b8 <_scanf_float+0x184>
 8009864:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009868:	4631      	mov	r1, r6
 800986a:	4638      	mov	r0, r7
 800986c:	9205      	str	r2, [sp, #20]
 800986e:	4798      	blx	r3
 8009870:	9a05      	ldr	r2, [sp, #20]
 8009872:	2800      	cmp	r0, #0
 8009874:	f43f af04 	beq.w	8009680 <_scanf_float+0x4c>
 8009878:	e715      	b.n	80096a6 <_scanf_float+0x72>
 800987a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800987e:	4632      	mov	r2, r6
 8009880:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009884:	4638      	mov	r0, r7
 8009886:	4798      	blx	r3
 8009888:	6923      	ldr	r3, [r4, #16]
 800988a:	3b01      	subs	r3, #1
 800988c:	6123      	str	r3, [r4, #16]
 800988e:	e715      	b.n	80096bc <_scanf_float+0x88>
 8009890:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009894:	2b06      	cmp	r3, #6
 8009896:	d80a      	bhi.n	80098ae <_scanf_float+0x27a>
 8009898:	f1bb 0f02 	cmp.w	fp, #2
 800989c:	d967      	bls.n	800996e <_scanf_float+0x33a>
 800989e:	f1ab 0b03 	sub.w	fp, fp, #3
 80098a2:	fa5f fb8b 	uxtb.w	fp, fp
 80098a6:	eba5 0b0b 	sub.w	fp, r5, fp
 80098aa:	455d      	cmp	r5, fp
 80098ac:	d14a      	bne.n	8009944 <_scanf_float+0x310>
 80098ae:	6823      	ldr	r3, [r4, #0]
 80098b0:	05da      	lsls	r2, r3, #23
 80098b2:	d51f      	bpl.n	80098f4 <_scanf_float+0x2c0>
 80098b4:	055b      	lsls	r3, r3, #21
 80098b6:	d467      	bmi.n	8009988 <_scanf_float+0x354>
 80098b8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80098bc:	6923      	ldr	r3, [r4, #16]
 80098be:	2965      	cmp	r1, #101	; 0x65
 80098c0:	f103 33ff 	add.w	r3, r3, #4294967295
 80098c4:	f105 3bff 	add.w	fp, r5, #4294967295
 80098c8:	6123      	str	r3, [r4, #16]
 80098ca:	d00d      	beq.n	80098e8 <_scanf_float+0x2b4>
 80098cc:	2945      	cmp	r1, #69	; 0x45
 80098ce:	d00b      	beq.n	80098e8 <_scanf_float+0x2b4>
 80098d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098d4:	4632      	mov	r2, r6
 80098d6:	4638      	mov	r0, r7
 80098d8:	4798      	blx	r3
 80098da:	6923      	ldr	r3, [r4, #16]
 80098dc:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80098e0:	3b01      	subs	r3, #1
 80098e2:	f1a5 0b02 	sub.w	fp, r5, #2
 80098e6:	6123      	str	r3, [r4, #16]
 80098e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098ec:	4632      	mov	r2, r6
 80098ee:	4638      	mov	r0, r7
 80098f0:	4798      	blx	r3
 80098f2:	465d      	mov	r5, fp
 80098f4:	6826      	ldr	r6, [r4, #0]
 80098f6:	f016 0610 	ands.w	r6, r6, #16
 80098fa:	d176      	bne.n	80099ea <_scanf_float+0x3b6>
 80098fc:	702e      	strb	r6, [r5, #0]
 80098fe:	6823      	ldr	r3, [r4, #0]
 8009900:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009908:	d141      	bne.n	800998e <_scanf_float+0x35a>
 800990a:	9b02      	ldr	r3, [sp, #8]
 800990c:	eba9 0303 	sub.w	r3, r9, r3
 8009910:	425a      	negs	r2, r3
 8009912:	2b00      	cmp	r3, #0
 8009914:	d148      	bne.n	80099a8 <_scanf_float+0x374>
 8009916:	4641      	mov	r1, r8
 8009918:	2200      	movs	r2, #0
 800991a:	4638      	mov	r0, r7
 800991c:	f000 ff5c 	bl	800a7d8 <_strtod_r>
 8009920:	6825      	ldr	r5, [r4, #0]
 8009922:	4680      	mov	r8, r0
 8009924:	f015 0f02 	tst.w	r5, #2
 8009928:	4689      	mov	r9, r1
 800992a:	f8da 3000 	ldr.w	r3, [sl]
 800992e:	d046      	beq.n	80099be <_scanf_float+0x38a>
 8009930:	1d1a      	adds	r2, r3, #4
 8009932:	f8ca 2000 	str.w	r2, [sl]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	e9c3 8900 	strd	r8, r9, [r3]
 800993c:	68e3      	ldr	r3, [r4, #12]
 800993e:	3301      	adds	r3, #1
 8009940:	60e3      	str	r3, [r4, #12]
 8009942:	e6bf      	b.n	80096c4 <_scanf_float+0x90>
 8009944:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009948:	4632      	mov	r2, r6
 800994a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800994e:	4638      	mov	r0, r7
 8009950:	4798      	blx	r3
 8009952:	6923      	ldr	r3, [r4, #16]
 8009954:	3b01      	subs	r3, #1
 8009956:	6123      	str	r3, [r4, #16]
 8009958:	e7a7      	b.n	80098aa <_scanf_float+0x276>
 800995a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800995e:	4632      	mov	r2, r6
 8009960:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009964:	4638      	mov	r0, r7
 8009966:	4798      	blx	r3
 8009968:	6923      	ldr	r3, [r4, #16]
 800996a:	3b01      	subs	r3, #1
 800996c:	6123      	str	r3, [r4, #16]
 800996e:	4545      	cmp	r5, r8
 8009970:	d8f3      	bhi.n	800995a <_scanf_float+0x326>
 8009972:	e6a6      	b.n	80096c2 <_scanf_float+0x8e>
 8009974:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009978:	4632      	mov	r2, r6
 800997a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800997e:	4638      	mov	r0, r7
 8009980:	4798      	blx	r3
 8009982:	6923      	ldr	r3, [r4, #16]
 8009984:	3b01      	subs	r3, #1
 8009986:	6123      	str	r3, [r4, #16]
 8009988:	4545      	cmp	r5, r8
 800998a:	d8f3      	bhi.n	8009974 <_scanf_float+0x340>
 800998c:	e699      	b.n	80096c2 <_scanf_float+0x8e>
 800998e:	9b03      	ldr	r3, [sp, #12]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d0c0      	beq.n	8009916 <_scanf_float+0x2e2>
 8009994:	9904      	ldr	r1, [sp, #16]
 8009996:	230a      	movs	r3, #10
 8009998:	4632      	mov	r2, r6
 800999a:	3101      	adds	r1, #1
 800999c:	4638      	mov	r0, r7
 800999e:	f000 ffa7 	bl	800a8f0 <_strtol_r>
 80099a2:	9b03      	ldr	r3, [sp, #12]
 80099a4:	9d04      	ldr	r5, [sp, #16]
 80099a6:	1ac2      	subs	r2, r0, r3
 80099a8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80099ac:	429d      	cmp	r5, r3
 80099ae:	bf28      	it	cs
 80099b0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80099b4:	490e      	ldr	r1, [pc, #56]	; (80099f0 <_scanf_float+0x3bc>)
 80099b6:	4628      	mov	r0, r5
 80099b8:	f000 f8ac 	bl	8009b14 <siprintf>
 80099bc:	e7ab      	b.n	8009916 <_scanf_float+0x2e2>
 80099be:	1d1f      	adds	r7, r3, #4
 80099c0:	f015 0504 	ands.w	r5, r5, #4
 80099c4:	f8ca 7000 	str.w	r7, [sl]
 80099c8:	d1b5      	bne.n	8009936 <_scanf_float+0x302>
 80099ca:	681f      	ldr	r7, [r3, #0]
 80099cc:	4602      	mov	r2, r0
 80099ce:	460b      	mov	r3, r1
 80099d0:	f7f7 f888 	bl	8000ae4 <__aeabi_dcmpun>
 80099d4:	b120      	cbz	r0, 80099e0 <_scanf_float+0x3ac>
 80099d6:	4628      	mov	r0, r5
 80099d8:	f000 f898 	bl	8009b0c <nanf>
 80099dc:	6038      	str	r0, [r7, #0]
 80099de:	e7ad      	b.n	800993c <_scanf_float+0x308>
 80099e0:	4640      	mov	r0, r8
 80099e2:	4649      	mov	r1, r9
 80099e4:	f7f7 f8dc 	bl	8000ba0 <__aeabi_d2f>
 80099e8:	e7f8      	b.n	80099dc <_scanf_float+0x3a8>
 80099ea:	2600      	movs	r6, #0
 80099ec:	e66a      	b.n	80096c4 <_scanf_float+0x90>
 80099ee:	bf00      	nop
 80099f0:	0800e66a 	.word	0x0800e66a

080099f4 <iprintf>:
 80099f4:	b40f      	push	{r0, r1, r2, r3}
 80099f6:	4b0a      	ldr	r3, [pc, #40]	; (8009a20 <iprintf+0x2c>)
 80099f8:	b513      	push	{r0, r1, r4, lr}
 80099fa:	681c      	ldr	r4, [r3, #0]
 80099fc:	b124      	cbz	r4, 8009a08 <iprintf+0x14>
 80099fe:	69a3      	ldr	r3, [r4, #24]
 8009a00:	b913      	cbnz	r3, 8009a08 <iprintf+0x14>
 8009a02:	4620      	mov	r0, r4
 8009a04:	f001 ff78 	bl	800b8f8 <__sinit>
 8009a08:	ab05      	add	r3, sp, #20
 8009a0a:	9a04      	ldr	r2, [sp, #16]
 8009a0c:	68a1      	ldr	r1, [r4, #8]
 8009a0e:	4620      	mov	r0, r4
 8009a10:	9301      	str	r3, [sp, #4]
 8009a12:	f003 f92f 	bl	800cc74 <_vfiprintf_r>
 8009a16:	b002      	add	sp, #8
 8009a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a1c:	b004      	add	sp, #16
 8009a1e:	4770      	bx	lr
 8009a20:	20000014 	.word	0x20000014

08009a24 <_puts_r>:
 8009a24:	b570      	push	{r4, r5, r6, lr}
 8009a26:	460e      	mov	r6, r1
 8009a28:	4605      	mov	r5, r0
 8009a2a:	b118      	cbz	r0, 8009a34 <_puts_r+0x10>
 8009a2c:	6983      	ldr	r3, [r0, #24]
 8009a2e:	b90b      	cbnz	r3, 8009a34 <_puts_r+0x10>
 8009a30:	f001 ff62 	bl	800b8f8 <__sinit>
 8009a34:	69ab      	ldr	r3, [r5, #24]
 8009a36:	68ac      	ldr	r4, [r5, #8]
 8009a38:	b913      	cbnz	r3, 8009a40 <_puts_r+0x1c>
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	f001 ff5c 	bl	800b8f8 <__sinit>
 8009a40:	4b23      	ldr	r3, [pc, #140]	; (8009ad0 <_puts_r+0xac>)
 8009a42:	429c      	cmp	r4, r3
 8009a44:	d117      	bne.n	8009a76 <_puts_r+0x52>
 8009a46:	686c      	ldr	r4, [r5, #4]
 8009a48:	89a3      	ldrh	r3, [r4, #12]
 8009a4a:	071b      	lsls	r3, r3, #28
 8009a4c:	d51d      	bpl.n	8009a8a <_puts_r+0x66>
 8009a4e:	6923      	ldr	r3, [r4, #16]
 8009a50:	b1db      	cbz	r3, 8009a8a <_puts_r+0x66>
 8009a52:	3e01      	subs	r6, #1
 8009a54:	68a3      	ldr	r3, [r4, #8]
 8009a56:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	60a3      	str	r3, [r4, #8]
 8009a5e:	b9e9      	cbnz	r1, 8009a9c <_puts_r+0x78>
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	da2e      	bge.n	8009ac2 <_puts_r+0x9e>
 8009a64:	4622      	mov	r2, r4
 8009a66:	210a      	movs	r1, #10
 8009a68:	4628      	mov	r0, r5
 8009a6a:	f000 ff53 	bl	800a914 <__swbuf_r>
 8009a6e:	3001      	adds	r0, #1
 8009a70:	d011      	beq.n	8009a96 <_puts_r+0x72>
 8009a72:	200a      	movs	r0, #10
 8009a74:	e011      	b.n	8009a9a <_puts_r+0x76>
 8009a76:	4b17      	ldr	r3, [pc, #92]	; (8009ad4 <_puts_r+0xb0>)
 8009a78:	429c      	cmp	r4, r3
 8009a7a:	d101      	bne.n	8009a80 <_puts_r+0x5c>
 8009a7c:	68ac      	ldr	r4, [r5, #8]
 8009a7e:	e7e3      	b.n	8009a48 <_puts_r+0x24>
 8009a80:	4b15      	ldr	r3, [pc, #84]	; (8009ad8 <_puts_r+0xb4>)
 8009a82:	429c      	cmp	r4, r3
 8009a84:	bf08      	it	eq
 8009a86:	68ec      	ldreq	r4, [r5, #12]
 8009a88:	e7de      	b.n	8009a48 <_puts_r+0x24>
 8009a8a:	4621      	mov	r1, r4
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	f000 ff93 	bl	800a9b8 <__swsetup_r>
 8009a92:	2800      	cmp	r0, #0
 8009a94:	d0dd      	beq.n	8009a52 <_puts_r+0x2e>
 8009a96:	f04f 30ff 	mov.w	r0, #4294967295
 8009a9a:	bd70      	pop	{r4, r5, r6, pc}
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	da04      	bge.n	8009aaa <_puts_r+0x86>
 8009aa0:	69a2      	ldr	r2, [r4, #24]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	dc06      	bgt.n	8009ab4 <_puts_r+0x90>
 8009aa6:	290a      	cmp	r1, #10
 8009aa8:	d004      	beq.n	8009ab4 <_puts_r+0x90>
 8009aaa:	6823      	ldr	r3, [r4, #0]
 8009aac:	1c5a      	adds	r2, r3, #1
 8009aae:	6022      	str	r2, [r4, #0]
 8009ab0:	7019      	strb	r1, [r3, #0]
 8009ab2:	e7cf      	b.n	8009a54 <_puts_r+0x30>
 8009ab4:	4622      	mov	r2, r4
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	f000 ff2c 	bl	800a914 <__swbuf_r>
 8009abc:	3001      	adds	r0, #1
 8009abe:	d1c9      	bne.n	8009a54 <_puts_r+0x30>
 8009ac0:	e7e9      	b.n	8009a96 <_puts_r+0x72>
 8009ac2:	200a      	movs	r0, #10
 8009ac4:	6823      	ldr	r3, [r4, #0]
 8009ac6:	1c5a      	adds	r2, r3, #1
 8009ac8:	6022      	str	r2, [r4, #0]
 8009aca:	7018      	strb	r0, [r3, #0]
 8009acc:	e7e5      	b.n	8009a9a <_puts_r+0x76>
 8009ace:	bf00      	nop
 8009ad0:	0800e6f0 	.word	0x0800e6f0
 8009ad4:	0800e710 	.word	0x0800e710
 8009ad8:	0800e6d0 	.word	0x0800e6d0

08009adc <puts>:
 8009adc:	4b02      	ldr	r3, [pc, #8]	; (8009ae8 <puts+0xc>)
 8009ade:	4601      	mov	r1, r0
 8009ae0:	6818      	ldr	r0, [r3, #0]
 8009ae2:	f7ff bf9f 	b.w	8009a24 <_puts_r>
 8009ae6:	bf00      	nop
 8009ae8:	20000014 	.word	0x20000014

08009aec <_sbrk_r>:
 8009aec:	b538      	push	{r3, r4, r5, lr}
 8009aee:	2300      	movs	r3, #0
 8009af0:	4c05      	ldr	r4, [pc, #20]	; (8009b08 <_sbrk_r+0x1c>)
 8009af2:	4605      	mov	r5, r0
 8009af4:	4608      	mov	r0, r1
 8009af6:	6023      	str	r3, [r4, #0]
 8009af8:	f7f7 fe50 	bl	800179c <_sbrk>
 8009afc:	1c43      	adds	r3, r0, #1
 8009afe:	d102      	bne.n	8009b06 <_sbrk_r+0x1a>
 8009b00:	6823      	ldr	r3, [r4, #0]
 8009b02:	b103      	cbz	r3, 8009b06 <_sbrk_r+0x1a>
 8009b04:	602b      	str	r3, [r5, #0]
 8009b06:	bd38      	pop	{r3, r4, r5, pc}
 8009b08:	20006104 	.word	0x20006104

08009b0c <nanf>:
 8009b0c:	4800      	ldr	r0, [pc, #0]	; (8009b10 <nanf+0x4>)
 8009b0e:	4770      	bx	lr
 8009b10:	7fc00000 	.word	0x7fc00000

08009b14 <siprintf>:
 8009b14:	b40e      	push	{r1, r2, r3}
 8009b16:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b1a:	b500      	push	{lr}
 8009b1c:	b09c      	sub	sp, #112	; 0x70
 8009b1e:	ab1d      	add	r3, sp, #116	; 0x74
 8009b20:	9002      	str	r0, [sp, #8]
 8009b22:	9006      	str	r0, [sp, #24]
 8009b24:	9107      	str	r1, [sp, #28]
 8009b26:	9104      	str	r1, [sp, #16]
 8009b28:	4808      	ldr	r0, [pc, #32]	; (8009b4c <siprintf+0x38>)
 8009b2a:	4909      	ldr	r1, [pc, #36]	; (8009b50 <siprintf+0x3c>)
 8009b2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b30:	9105      	str	r1, [sp, #20]
 8009b32:	6800      	ldr	r0, [r0, #0]
 8009b34:	a902      	add	r1, sp, #8
 8009b36:	9301      	str	r3, [sp, #4]
 8009b38:	f002 ff7c 	bl	800ca34 <_svfiprintf_r>
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	9b02      	ldr	r3, [sp, #8]
 8009b40:	701a      	strb	r2, [r3, #0]
 8009b42:	b01c      	add	sp, #112	; 0x70
 8009b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b48:	b003      	add	sp, #12
 8009b4a:	4770      	bx	lr
 8009b4c:	20000014 	.word	0x20000014
 8009b50:	ffff0208 	.word	0xffff0208

08009b54 <strcat>:
 8009b54:	4603      	mov	r3, r0
 8009b56:	b510      	push	{r4, lr}
 8009b58:	781a      	ldrb	r2, [r3, #0]
 8009b5a:	1c5c      	adds	r4, r3, #1
 8009b5c:	b93a      	cbnz	r2, 8009b6e <strcat+0x1a>
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b64:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b68:	2a00      	cmp	r2, #0
 8009b6a:	d1f9      	bne.n	8009b60 <strcat+0xc>
 8009b6c:	bd10      	pop	{r4, pc}
 8009b6e:	4623      	mov	r3, r4
 8009b70:	e7f2      	b.n	8009b58 <strcat+0x4>

08009b72 <strncmp>:
 8009b72:	b510      	push	{r4, lr}
 8009b74:	b16a      	cbz	r2, 8009b92 <strncmp+0x20>
 8009b76:	3901      	subs	r1, #1
 8009b78:	1884      	adds	r4, r0, r2
 8009b7a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009b7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d103      	bne.n	8009b8e <strncmp+0x1c>
 8009b86:	42a0      	cmp	r0, r4
 8009b88:	d001      	beq.n	8009b8e <strncmp+0x1c>
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d1f5      	bne.n	8009b7a <strncmp+0x8>
 8009b8e:	1a98      	subs	r0, r3, r2
 8009b90:	bd10      	pop	{r4, pc}
 8009b92:	4610      	mov	r0, r2
 8009b94:	e7fc      	b.n	8009b90 <strncmp+0x1e>

08009b96 <sulp>:
 8009b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b9a:	460f      	mov	r7, r1
 8009b9c:	4690      	mov	r8, r2
 8009b9e:	f002 fdc1 	bl	800c724 <__ulp>
 8009ba2:	4604      	mov	r4, r0
 8009ba4:	460d      	mov	r5, r1
 8009ba6:	f1b8 0f00 	cmp.w	r8, #0
 8009baa:	d011      	beq.n	8009bd0 <sulp+0x3a>
 8009bac:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009bb0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	dd0b      	ble.n	8009bd0 <sulp+0x3a>
 8009bb8:	2400      	movs	r4, #0
 8009bba:	051b      	lsls	r3, r3, #20
 8009bbc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009bc0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009bc4:	4622      	mov	r2, r4
 8009bc6:	462b      	mov	r3, r5
 8009bc8:	f7f6 fcf2 	bl	80005b0 <__aeabi_dmul>
 8009bcc:	4604      	mov	r4, r0
 8009bce:	460d      	mov	r5, r1
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	4629      	mov	r1, r5
 8009bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009bd8 <_strtod_l>:
 8009bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bdc:	461f      	mov	r7, r3
 8009bde:	2300      	movs	r3, #0
 8009be0:	b0a1      	sub	sp, #132	; 0x84
 8009be2:	4683      	mov	fp, r0
 8009be4:	4638      	mov	r0, r7
 8009be6:	460e      	mov	r6, r1
 8009be8:	9217      	str	r2, [sp, #92]	; 0x5c
 8009bea:	931c      	str	r3, [sp, #112]	; 0x70
 8009bec:	f002 fa39 	bl	800c062 <__localeconv_l>
 8009bf0:	4680      	mov	r8, r0
 8009bf2:	6800      	ldr	r0, [r0, #0]
 8009bf4:	f7f6 fb18 	bl	8000228 <strlen>
 8009bf8:	f04f 0900 	mov.w	r9, #0
 8009bfc:	4604      	mov	r4, r0
 8009bfe:	f04f 0a00 	mov.w	sl, #0
 8009c02:	961b      	str	r6, [sp, #108]	; 0x6c
 8009c04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c06:	781a      	ldrb	r2, [r3, #0]
 8009c08:	2a0d      	cmp	r2, #13
 8009c0a:	d832      	bhi.n	8009c72 <_strtod_l+0x9a>
 8009c0c:	2a09      	cmp	r2, #9
 8009c0e:	d236      	bcs.n	8009c7e <_strtod_l+0xa6>
 8009c10:	2a00      	cmp	r2, #0
 8009c12:	d03e      	beq.n	8009c92 <_strtod_l+0xba>
 8009c14:	2300      	movs	r3, #0
 8009c16:	930d      	str	r3, [sp, #52]	; 0x34
 8009c18:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009c1a:	782b      	ldrb	r3, [r5, #0]
 8009c1c:	2b30      	cmp	r3, #48	; 0x30
 8009c1e:	f040 80ac 	bne.w	8009d7a <_strtod_l+0x1a2>
 8009c22:	786b      	ldrb	r3, [r5, #1]
 8009c24:	2b58      	cmp	r3, #88	; 0x58
 8009c26:	d001      	beq.n	8009c2c <_strtod_l+0x54>
 8009c28:	2b78      	cmp	r3, #120	; 0x78
 8009c2a:	d167      	bne.n	8009cfc <_strtod_l+0x124>
 8009c2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c2e:	9702      	str	r7, [sp, #8]
 8009c30:	9301      	str	r3, [sp, #4]
 8009c32:	ab1c      	add	r3, sp, #112	; 0x70
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	4a89      	ldr	r2, [pc, #548]	; (8009e5c <_strtod_l+0x284>)
 8009c38:	ab1d      	add	r3, sp, #116	; 0x74
 8009c3a:	a91b      	add	r1, sp, #108	; 0x6c
 8009c3c:	4658      	mov	r0, fp
 8009c3e:	f001 ff35 	bl	800baac <__gethex>
 8009c42:	f010 0407 	ands.w	r4, r0, #7
 8009c46:	4606      	mov	r6, r0
 8009c48:	d005      	beq.n	8009c56 <_strtod_l+0x7e>
 8009c4a:	2c06      	cmp	r4, #6
 8009c4c:	d12b      	bne.n	8009ca6 <_strtod_l+0xce>
 8009c4e:	2300      	movs	r3, #0
 8009c50:	3501      	adds	r5, #1
 8009c52:	951b      	str	r5, [sp, #108]	; 0x6c
 8009c54:	930d      	str	r3, [sp, #52]	; 0x34
 8009c56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f040 85a6 	bne.w	800a7aa <_strtod_l+0xbd2>
 8009c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c60:	b1e3      	cbz	r3, 8009c9c <_strtod_l+0xc4>
 8009c62:	464a      	mov	r2, r9
 8009c64:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8009c68:	4610      	mov	r0, r2
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	b021      	add	sp, #132	; 0x84
 8009c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c72:	2a2b      	cmp	r2, #43	; 0x2b
 8009c74:	d015      	beq.n	8009ca2 <_strtod_l+0xca>
 8009c76:	2a2d      	cmp	r2, #45	; 0x2d
 8009c78:	d004      	beq.n	8009c84 <_strtod_l+0xac>
 8009c7a:	2a20      	cmp	r2, #32
 8009c7c:	d1ca      	bne.n	8009c14 <_strtod_l+0x3c>
 8009c7e:	3301      	adds	r3, #1
 8009c80:	931b      	str	r3, [sp, #108]	; 0x6c
 8009c82:	e7bf      	b.n	8009c04 <_strtod_l+0x2c>
 8009c84:	2201      	movs	r2, #1
 8009c86:	920d      	str	r2, [sp, #52]	; 0x34
 8009c88:	1c5a      	adds	r2, r3, #1
 8009c8a:	921b      	str	r2, [sp, #108]	; 0x6c
 8009c8c:	785b      	ldrb	r3, [r3, #1]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1c2      	bne.n	8009c18 <_strtod_l+0x40>
 8009c92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c94:	961b      	str	r6, [sp, #108]	; 0x6c
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	f040 8585 	bne.w	800a7a6 <_strtod_l+0xbce>
 8009c9c:	464a      	mov	r2, r9
 8009c9e:	4653      	mov	r3, sl
 8009ca0:	e7e2      	b.n	8009c68 <_strtod_l+0x90>
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	e7ef      	b.n	8009c86 <_strtod_l+0xae>
 8009ca6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009ca8:	b13a      	cbz	r2, 8009cba <_strtod_l+0xe2>
 8009caa:	2135      	movs	r1, #53	; 0x35
 8009cac:	a81e      	add	r0, sp, #120	; 0x78
 8009cae:	f002 fe2c 	bl	800c90a <__copybits>
 8009cb2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009cb4:	4658      	mov	r0, fp
 8009cb6:	f002 fa9f 	bl	800c1f8 <_Bfree>
 8009cba:	3c01      	subs	r4, #1
 8009cbc:	2c04      	cmp	r4, #4
 8009cbe:	d806      	bhi.n	8009cce <_strtod_l+0xf6>
 8009cc0:	e8df f004 	tbb	[pc, r4]
 8009cc4:	1714030a 	.word	0x1714030a
 8009cc8:	0a          	.byte	0x0a
 8009cc9:	00          	.byte	0x00
 8009cca:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8009cce:	0731      	lsls	r1, r6, #28
 8009cd0:	d5c1      	bpl.n	8009c56 <_strtod_l+0x7e>
 8009cd2:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8009cd6:	e7be      	b.n	8009c56 <_strtod_l+0x7e>
 8009cd8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009cda:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8009cde:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009ce2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009ce6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8009cea:	e7f0      	b.n	8009cce <_strtod_l+0xf6>
 8009cec:	f8df a170 	ldr.w	sl, [pc, #368]	; 8009e60 <_strtod_l+0x288>
 8009cf0:	e7ed      	b.n	8009cce <_strtod_l+0xf6>
 8009cf2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8009cf6:	f04f 39ff 	mov.w	r9, #4294967295
 8009cfa:	e7e8      	b.n	8009cce <_strtod_l+0xf6>
 8009cfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009cfe:	1c5a      	adds	r2, r3, #1
 8009d00:	921b      	str	r2, [sp, #108]	; 0x6c
 8009d02:	785b      	ldrb	r3, [r3, #1]
 8009d04:	2b30      	cmp	r3, #48	; 0x30
 8009d06:	d0f9      	beq.n	8009cfc <_strtod_l+0x124>
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d0a4      	beq.n	8009c56 <_strtod_l+0x7e>
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	2500      	movs	r5, #0
 8009d10:	220a      	movs	r2, #10
 8009d12:	9307      	str	r3, [sp, #28]
 8009d14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d16:	9506      	str	r5, [sp, #24]
 8009d18:	9308      	str	r3, [sp, #32]
 8009d1a:	9504      	str	r5, [sp, #16]
 8009d1c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009d1e:	7807      	ldrb	r7, [r0, #0]
 8009d20:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8009d24:	b2d9      	uxtb	r1, r3
 8009d26:	2909      	cmp	r1, #9
 8009d28:	d929      	bls.n	8009d7e <_strtod_l+0x1a6>
 8009d2a:	4622      	mov	r2, r4
 8009d2c:	f8d8 1000 	ldr.w	r1, [r8]
 8009d30:	f7ff ff1f 	bl	8009b72 <strncmp>
 8009d34:	2800      	cmp	r0, #0
 8009d36:	d031      	beq.n	8009d9c <_strtod_l+0x1c4>
 8009d38:	2000      	movs	r0, #0
 8009d3a:	463b      	mov	r3, r7
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	9c04      	ldr	r4, [sp, #16]
 8009d40:	9005      	str	r0, [sp, #20]
 8009d42:	2b65      	cmp	r3, #101	; 0x65
 8009d44:	d001      	beq.n	8009d4a <_strtod_l+0x172>
 8009d46:	2b45      	cmp	r3, #69	; 0x45
 8009d48:	d114      	bne.n	8009d74 <_strtod_l+0x19c>
 8009d4a:	b924      	cbnz	r4, 8009d56 <_strtod_l+0x17e>
 8009d4c:	b910      	cbnz	r0, 8009d54 <_strtod_l+0x17c>
 8009d4e:	9b07      	ldr	r3, [sp, #28]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d09e      	beq.n	8009c92 <_strtod_l+0xba>
 8009d54:	2400      	movs	r4, #0
 8009d56:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009d58:	1c73      	adds	r3, r6, #1
 8009d5a:	931b      	str	r3, [sp, #108]	; 0x6c
 8009d5c:	7873      	ldrb	r3, [r6, #1]
 8009d5e:	2b2b      	cmp	r3, #43	; 0x2b
 8009d60:	d078      	beq.n	8009e54 <_strtod_l+0x27c>
 8009d62:	2b2d      	cmp	r3, #45	; 0x2d
 8009d64:	d070      	beq.n	8009e48 <_strtod_l+0x270>
 8009d66:	f04f 0c00 	mov.w	ip, #0
 8009d6a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8009d6e:	2f09      	cmp	r7, #9
 8009d70:	d97c      	bls.n	8009e6c <_strtod_l+0x294>
 8009d72:	961b      	str	r6, [sp, #108]	; 0x6c
 8009d74:	f04f 0e00 	mov.w	lr, #0
 8009d78:	e09a      	b.n	8009eb0 <_strtod_l+0x2d8>
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	e7c7      	b.n	8009d0e <_strtod_l+0x136>
 8009d7e:	9904      	ldr	r1, [sp, #16]
 8009d80:	3001      	adds	r0, #1
 8009d82:	2908      	cmp	r1, #8
 8009d84:	bfd7      	itett	le
 8009d86:	9906      	ldrle	r1, [sp, #24]
 8009d88:	fb02 3505 	mlagt	r5, r2, r5, r3
 8009d8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009d90:	9306      	strle	r3, [sp, #24]
 8009d92:	9b04      	ldr	r3, [sp, #16]
 8009d94:	901b      	str	r0, [sp, #108]	; 0x6c
 8009d96:	3301      	adds	r3, #1
 8009d98:	9304      	str	r3, [sp, #16]
 8009d9a:	e7bf      	b.n	8009d1c <_strtod_l+0x144>
 8009d9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d9e:	191a      	adds	r2, r3, r4
 8009da0:	921b      	str	r2, [sp, #108]	; 0x6c
 8009da2:	9a04      	ldr	r2, [sp, #16]
 8009da4:	5d1b      	ldrb	r3, [r3, r4]
 8009da6:	2a00      	cmp	r2, #0
 8009da8:	d037      	beq.n	8009e1a <_strtod_l+0x242>
 8009daa:	4602      	mov	r2, r0
 8009dac:	9c04      	ldr	r4, [sp, #16]
 8009dae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009db2:	2909      	cmp	r1, #9
 8009db4:	d913      	bls.n	8009dde <_strtod_l+0x206>
 8009db6:	2101      	movs	r1, #1
 8009db8:	9105      	str	r1, [sp, #20]
 8009dba:	e7c2      	b.n	8009d42 <_strtod_l+0x16a>
 8009dbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009dbe:	3001      	adds	r0, #1
 8009dc0:	1c5a      	adds	r2, r3, #1
 8009dc2:	921b      	str	r2, [sp, #108]	; 0x6c
 8009dc4:	785b      	ldrb	r3, [r3, #1]
 8009dc6:	2b30      	cmp	r3, #48	; 0x30
 8009dc8:	d0f8      	beq.n	8009dbc <_strtod_l+0x1e4>
 8009dca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009dce:	2a08      	cmp	r2, #8
 8009dd0:	f200 84f0 	bhi.w	800a7b4 <_strtod_l+0xbdc>
 8009dd4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009dd6:	9208      	str	r2, [sp, #32]
 8009dd8:	4602      	mov	r2, r0
 8009dda:	2000      	movs	r0, #0
 8009ddc:	4604      	mov	r4, r0
 8009dde:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8009de2:	f100 0101 	add.w	r1, r0, #1
 8009de6:	d012      	beq.n	8009e0e <_strtod_l+0x236>
 8009de8:	440a      	add	r2, r1
 8009dea:	270a      	movs	r7, #10
 8009dec:	4621      	mov	r1, r4
 8009dee:	eb00 0c04 	add.w	ip, r0, r4
 8009df2:	458c      	cmp	ip, r1
 8009df4:	d113      	bne.n	8009e1e <_strtod_l+0x246>
 8009df6:	1821      	adds	r1, r4, r0
 8009df8:	2908      	cmp	r1, #8
 8009dfa:	f104 0401 	add.w	r4, r4, #1
 8009dfe:	4404      	add	r4, r0
 8009e00:	dc19      	bgt.n	8009e36 <_strtod_l+0x25e>
 8009e02:	210a      	movs	r1, #10
 8009e04:	9b06      	ldr	r3, [sp, #24]
 8009e06:	fb01 e303 	mla	r3, r1, r3, lr
 8009e0a:	9306      	str	r3, [sp, #24]
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e10:	1c58      	adds	r0, r3, #1
 8009e12:	901b      	str	r0, [sp, #108]	; 0x6c
 8009e14:	785b      	ldrb	r3, [r3, #1]
 8009e16:	4608      	mov	r0, r1
 8009e18:	e7c9      	b.n	8009dae <_strtod_l+0x1d6>
 8009e1a:	9804      	ldr	r0, [sp, #16]
 8009e1c:	e7d3      	b.n	8009dc6 <_strtod_l+0x1ee>
 8009e1e:	2908      	cmp	r1, #8
 8009e20:	f101 0101 	add.w	r1, r1, #1
 8009e24:	dc03      	bgt.n	8009e2e <_strtod_l+0x256>
 8009e26:	9b06      	ldr	r3, [sp, #24]
 8009e28:	437b      	muls	r3, r7
 8009e2a:	9306      	str	r3, [sp, #24]
 8009e2c:	e7e1      	b.n	8009df2 <_strtod_l+0x21a>
 8009e2e:	2910      	cmp	r1, #16
 8009e30:	bfd8      	it	le
 8009e32:	437d      	mulle	r5, r7
 8009e34:	e7dd      	b.n	8009df2 <_strtod_l+0x21a>
 8009e36:	2c10      	cmp	r4, #16
 8009e38:	bfdc      	itt	le
 8009e3a:	210a      	movle	r1, #10
 8009e3c:	fb01 e505 	mlale	r5, r1, r5, lr
 8009e40:	e7e4      	b.n	8009e0c <_strtod_l+0x234>
 8009e42:	2301      	movs	r3, #1
 8009e44:	9305      	str	r3, [sp, #20]
 8009e46:	e781      	b.n	8009d4c <_strtod_l+0x174>
 8009e48:	f04f 0c01 	mov.w	ip, #1
 8009e4c:	1cb3      	adds	r3, r6, #2
 8009e4e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009e50:	78b3      	ldrb	r3, [r6, #2]
 8009e52:	e78a      	b.n	8009d6a <_strtod_l+0x192>
 8009e54:	f04f 0c00 	mov.w	ip, #0
 8009e58:	e7f8      	b.n	8009e4c <_strtod_l+0x274>
 8009e5a:	bf00      	nop
 8009e5c:	0800e670 	.word	0x0800e670
 8009e60:	7ff00000 	.word	0x7ff00000
 8009e64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e66:	1c5f      	adds	r7, r3, #1
 8009e68:	971b      	str	r7, [sp, #108]	; 0x6c
 8009e6a:	785b      	ldrb	r3, [r3, #1]
 8009e6c:	2b30      	cmp	r3, #48	; 0x30
 8009e6e:	d0f9      	beq.n	8009e64 <_strtod_l+0x28c>
 8009e70:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8009e74:	2f08      	cmp	r7, #8
 8009e76:	f63f af7d 	bhi.w	8009d74 <_strtod_l+0x19c>
 8009e7a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009e7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e80:	9309      	str	r3, [sp, #36]	; 0x24
 8009e82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e84:	1c5f      	adds	r7, r3, #1
 8009e86:	971b      	str	r7, [sp, #108]	; 0x6c
 8009e88:	785b      	ldrb	r3, [r3, #1]
 8009e8a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8009e8e:	f1b8 0f09 	cmp.w	r8, #9
 8009e92:	d937      	bls.n	8009f04 <_strtod_l+0x32c>
 8009e94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e96:	1a7f      	subs	r7, r7, r1
 8009e98:	2f08      	cmp	r7, #8
 8009e9a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009e9e:	dc37      	bgt.n	8009f10 <_strtod_l+0x338>
 8009ea0:	45be      	cmp	lr, r7
 8009ea2:	bfa8      	it	ge
 8009ea4:	46be      	movge	lr, r7
 8009ea6:	f1bc 0f00 	cmp.w	ip, #0
 8009eaa:	d001      	beq.n	8009eb0 <_strtod_l+0x2d8>
 8009eac:	f1ce 0e00 	rsb	lr, lr, #0
 8009eb0:	2c00      	cmp	r4, #0
 8009eb2:	d151      	bne.n	8009f58 <_strtod_l+0x380>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	f47f aece 	bne.w	8009c56 <_strtod_l+0x7e>
 8009eba:	9a07      	ldr	r2, [sp, #28]
 8009ebc:	2a00      	cmp	r2, #0
 8009ebe:	f47f aeca 	bne.w	8009c56 <_strtod_l+0x7e>
 8009ec2:	9a05      	ldr	r2, [sp, #20]
 8009ec4:	2a00      	cmp	r2, #0
 8009ec6:	f47f aee4 	bne.w	8009c92 <_strtod_l+0xba>
 8009eca:	2b4e      	cmp	r3, #78	; 0x4e
 8009ecc:	d027      	beq.n	8009f1e <_strtod_l+0x346>
 8009ece:	dc21      	bgt.n	8009f14 <_strtod_l+0x33c>
 8009ed0:	2b49      	cmp	r3, #73	; 0x49
 8009ed2:	f47f aede 	bne.w	8009c92 <_strtod_l+0xba>
 8009ed6:	49a4      	ldr	r1, [pc, #656]	; (800a168 <_strtod_l+0x590>)
 8009ed8:	a81b      	add	r0, sp, #108	; 0x6c
 8009eda:	f002 f81b 	bl	800bf14 <__match>
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	f43f aed7 	beq.w	8009c92 <_strtod_l+0xba>
 8009ee4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ee6:	49a1      	ldr	r1, [pc, #644]	; (800a16c <_strtod_l+0x594>)
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	a81b      	add	r0, sp, #108	; 0x6c
 8009eec:	931b      	str	r3, [sp, #108]	; 0x6c
 8009eee:	f002 f811 	bl	800bf14 <__match>
 8009ef2:	b910      	cbnz	r0, 8009efa <_strtod_l+0x322>
 8009ef4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	931b      	str	r3, [sp, #108]	; 0x6c
 8009efa:	f8df a284 	ldr.w	sl, [pc, #644]	; 800a180 <_strtod_l+0x5a8>
 8009efe:	f04f 0900 	mov.w	r9, #0
 8009f02:	e6a8      	b.n	8009c56 <_strtod_l+0x7e>
 8009f04:	210a      	movs	r1, #10
 8009f06:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009f0a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009f0e:	e7b8      	b.n	8009e82 <_strtod_l+0x2aa>
 8009f10:	46be      	mov	lr, r7
 8009f12:	e7c8      	b.n	8009ea6 <_strtod_l+0x2ce>
 8009f14:	2b69      	cmp	r3, #105	; 0x69
 8009f16:	d0de      	beq.n	8009ed6 <_strtod_l+0x2fe>
 8009f18:	2b6e      	cmp	r3, #110	; 0x6e
 8009f1a:	f47f aeba 	bne.w	8009c92 <_strtod_l+0xba>
 8009f1e:	4994      	ldr	r1, [pc, #592]	; (800a170 <_strtod_l+0x598>)
 8009f20:	a81b      	add	r0, sp, #108	; 0x6c
 8009f22:	f001 fff7 	bl	800bf14 <__match>
 8009f26:	2800      	cmp	r0, #0
 8009f28:	f43f aeb3 	beq.w	8009c92 <_strtod_l+0xba>
 8009f2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	2b28      	cmp	r3, #40	; 0x28
 8009f32:	d10e      	bne.n	8009f52 <_strtod_l+0x37a>
 8009f34:	aa1e      	add	r2, sp, #120	; 0x78
 8009f36:	498f      	ldr	r1, [pc, #572]	; (800a174 <_strtod_l+0x59c>)
 8009f38:	a81b      	add	r0, sp, #108	; 0x6c
 8009f3a:	f001 ffff 	bl	800bf3c <__hexnan>
 8009f3e:	2805      	cmp	r0, #5
 8009f40:	d107      	bne.n	8009f52 <_strtod_l+0x37a>
 8009f42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009f44:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8009f48:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8009f4c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8009f50:	e681      	b.n	8009c56 <_strtod_l+0x7e>
 8009f52:	f8df a234 	ldr.w	sl, [pc, #564]	; 800a188 <_strtod_l+0x5b0>
 8009f56:	e7d2      	b.n	8009efe <_strtod_l+0x326>
 8009f58:	ebae 0302 	sub.w	r3, lr, r2
 8009f5c:	9307      	str	r3, [sp, #28]
 8009f5e:	9b04      	ldr	r3, [sp, #16]
 8009f60:	9806      	ldr	r0, [sp, #24]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	bf08      	it	eq
 8009f66:	4623      	moveq	r3, r4
 8009f68:	2c10      	cmp	r4, #16
 8009f6a:	9304      	str	r3, [sp, #16]
 8009f6c:	46a0      	mov	r8, r4
 8009f6e:	bfa8      	it	ge
 8009f70:	f04f 0810 	movge.w	r8, #16
 8009f74:	f7f6 faa2 	bl	80004bc <__aeabi_ui2d>
 8009f78:	2c09      	cmp	r4, #9
 8009f7a:	4681      	mov	r9, r0
 8009f7c:	468a      	mov	sl, r1
 8009f7e:	dc13      	bgt.n	8009fa8 <_strtod_l+0x3d0>
 8009f80:	9b07      	ldr	r3, [sp, #28]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	f43f ae67 	beq.w	8009c56 <_strtod_l+0x7e>
 8009f88:	9b07      	ldr	r3, [sp, #28]
 8009f8a:	dd7e      	ble.n	800a08a <_strtod_l+0x4b2>
 8009f8c:	2b16      	cmp	r3, #22
 8009f8e:	dc65      	bgt.n	800a05c <_strtod_l+0x484>
 8009f90:	4a79      	ldr	r2, [pc, #484]	; (800a178 <_strtod_l+0x5a0>)
 8009f92:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8009f96:	464a      	mov	r2, r9
 8009f98:	e9de 0100 	ldrd	r0, r1, [lr]
 8009f9c:	4653      	mov	r3, sl
 8009f9e:	f7f6 fb07 	bl	80005b0 <__aeabi_dmul>
 8009fa2:	4681      	mov	r9, r0
 8009fa4:	468a      	mov	sl, r1
 8009fa6:	e656      	b.n	8009c56 <_strtod_l+0x7e>
 8009fa8:	4b73      	ldr	r3, [pc, #460]	; (800a178 <_strtod_l+0x5a0>)
 8009faa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009fae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009fb2:	f7f6 fafd 	bl	80005b0 <__aeabi_dmul>
 8009fb6:	4606      	mov	r6, r0
 8009fb8:	4628      	mov	r0, r5
 8009fba:	460f      	mov	r7, r1
 8009fbc:	f7f6 fa7e 	bl	80004bc <__aeabi_ui2d>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	4639      	mov	r1, r7
 8009fc8:	f7f6 f93c 	bl	8000244 <__adddf3>
 8009fcc:	2c0f      	cmp	r4, #15
 8009fce:	4681      	mov	r9, r0
 8009fd0:	468a      	mov	sl, r1
 8009fd2:	ddd5      	ble.n	8009f80 <_strtod_l+0x3a8>
 8009fd4:	9b07      	ldr	r3, [sp, #28]
 8009fd6:	eba4 0808 	sub.w	r8, r4, r8
 8009fda:	4498      	add	r8, r3
 8009fdc:	f1b8 0f00 	cmp.w	r8, #0
 8009fe0:	f340 809a 	ble.w	800a118 <_strtod_l+0x540>
 8009fe4:	f018 030f 	ands.w	r3, r8, #15
 8009fe8:	d00a      	beq.n	800a000 <_strtod_l+0x428>
 8009fea:	4963      	ldr	r1, [pc, #396]	; (800a178 <_strtod_l+0x5a0>)
 8009fec:	464a      	mov	r2, r9
 8009fee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009ff2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ff6:	4653      	mov	r3, sl
 8009ff8:	f7f6 fada 	bl	80005b0 <__aeabi_dmul>
 8009ffc:	4681      	mov	r9, r0
 8009ffe:	468a      	mov	sl, r1
 800a000:	f038 080f 	bics.w	r8, r8, #15
 800a004:	d077      	beq.n	800a0f6 <_strtod_l+0x51e>
 800a006:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a00a:	dd4b      	ble.n	800a0a4 <_strtod_l+0x4cc>
 800a00c:	f04f 0800 	mov.w	r8, #0
 800a010:	f8cd 8010 	str.w	r8, [sp, #16]
 800a014:	f8cd 8020 	str.w	r8, [sp, #32]
 800a018:	f8cd 8018 	str.w	r8, [sp, #24]
 800a01c:	2322      	movs	r3, #34	; 0x22
 800a01e:	f04f 0900 	mov.w	r9, #0
 800a022:	f8df a15c 	ldr.w	sl, [pc, #348]	; 800a180 <_strtod_l+0x5a8>
 800a026:	f8cb 3000 	str.w	r3, [fp]
 800a02a:	9b08      	ldr	r3, [sp, #32]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f43f ae12 	beq.w	8009c56 <_strtod_l+0x7e>
 800a032:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a034:	4658      	mov	r0, fp
 800a036:	f002 f8df 	bl	800c1f8 <_Bfree>
 800a03a:	9906      	ldr	r1, [sp, #24]
 800a03c:	4658      	mov	r0, fp
 800a03e:	f002 f8db 	bl	800c1f8 <_Bfree>
 800a042:	9904      	ldr	r1, [sp, #16]
 800a044:	4658      	mov	r0, fp
 800a046:	f002 f8d7 	bl	800c1f8 <_Bfree>
 800a04a:	9908      	ldr	r1, [sp, #32]
 800a04c:	4658      	mov	r0, fp
 800a04e:	f002 f8d3 	bl	800c1f8 <_Bfree>
 800a052:	4641      	mov	r1, r8
 800a054:	4658      	mov	r0, fp
 800a056:	f002 f8cf 	bl	800c1f8 <_Bfree>
 800a05a:	e5fc      	b.n	8009c56 <_strtod_l+0x7e>
 800a05c:	9a07      	ldr	r2, [sp, #28]
 800a05e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a062:	4293      	cmp	r3, r2
 800a064:	dbb6      	blt.n	8009fd4 <_strtod_l+0x3fc>
 800a066:	4d44      	ldr	r5, [pc, #272]	; (800a178 <_strtod_l+0x5a0>)
 800a068:	f1c4 040f 	rsb	r4, r4, #15
 800a06c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a070:	464a      	mov	r2, r9
 800a072:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a076:	4653      	mov	r3, sl
 800a078:	f7f6 fa9a 	bl	80005b0 <__aeabi_dmul>
 800a07c:	9b07      	ldr	r3, [sp, #28]
 800a07e:	1b1c      	subs	r4, r3, r4
 800a080:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a084:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a088:	e789      	b.n	8009f9e <_strtod_l+0x3c6>
 800a08a:	f113 0f16 	cmn.w	r3, #22
 800a08e:	dba1      	blt.n	8009fd4 <_strtod_l+0x3fc>
 800a090:	4a39      	ldr	r2, [pc, #228]	; (800a178 <_strtod_l+0x5a0>)
 800a092:	4648      	mov	r0, r9
 800a094:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800a098:	e9d2 2300 	ldrd	r2, r3, [r2]
 800a09c:	4651      	mov	r1, sl
 800a09e:	f7f6 fbb1 	bl	8000804 <__aeabi_ddiv>
 800a0a2:	e77e      	b.n	8009fa2 <_strtod_l+0x3ca>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	4648      	mov	r0, r9
 800a0a8:	4651      	mov	r1, sl
 800a0aa:	461d      	mov	r5, r3
 800a0ac:	4e33      	ldr	r6, [pc, #204]	; (800a17c <_strtod_l+0x5a4>)
 800a0ae:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a0b2:	f1b8 0f01 	cmp.w	r8, #1
 800a0b6:	dc21      	bgt.n	800a0fc <_strtod_l+0x524>
 800a0b8:	b10b      	cbz	r3, 800a0be <_strtod_l+0x4e6>
 800a0ba:	4681      	mov	r9, r0
 800a0bc:	468a      	mov	sl, r1
 800a0be:	4b2f      	ldr	r3, [pc, #188]	; (800a17c <_strtod_l+0x5a4>)
 800a0c0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800a0c4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a0c8:	464a      	mov	r2, r9
 800a0ca:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a0ce:	4653      	mov	r3, sl
 800a0d0:	f7f6 fa6e 	bl	80005b0 <__aeabi_dmul>
 800a0d4:	4b2a      	ldr	r3, [pc, #168]	; (800a180 <_strtod_l+0x5a8>)
 800a0d6:	460a      	mov	r2, r1
 800a0d8:	400b      	ands	r3, r1
 800a0da:	492a      	ldr	r1, [pc, #168]	; (800a184 <_strtod_l+0x5ac>)
 800a0dc:	4681      	mov	r9, r0
 800a0de:	428b      	cmp	r3, r1
 800a0e0:	d894      	bhi.n	800a00c <_strtod_l+0x434>
 800a0e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a0e6:	428b      	cmp	r3, r1
 800a0e8:	bf86      	itte	hi
 800a0ea:	f04f 39ff 	movhi.w	r9, #4294967295
 800a0ee:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800a18c <_strtod_l+0x5b4>
 800a0f2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	9305      	str	r3, [sp, #20]
 800a0fa:	e07b      	b.n	800a1f4 <_strtod_l+0x61c>
 800a0fc:	f018 0f01 	tst.w	r8, #1
 800a100:	d006      	beq.n	800a110 <_strtod_l+0x538>
 800a102:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800a106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10a:	f7f6 fa51 	bl	80005b0 <__aeabi_dmul>
 800a10e:	2301      	movs	r3, #1
 800a110:	3501      	adds	r5, #1
 800a112:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a116:	e7cc      	b.n	800a0b2 <_strtod_l+0x4da>
 800a118:	d0ed      	beq.n	800a0f6 <_strtod_l+0x51e>
 800a11a:	f1c8 0800 	rsb	r8, r8, #0
 800a11e:	f018 020f 	ands.w	r2, r8, #15
 800a122:	d00a      	beq.n	800a13a <_strtod_l+0x562>
 800a124:	4b14      	ldr	r3, [pc, #80]	; (800a178 <_strtod_l+0x5a0>)
 800a126:	4648      	mov	r0, r9
 800a128:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a12c:	4651      	mov	r1, sl
 800a12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a132:	f7f6 fb67 	bl	8000804 <__aeabi_ddiv>
 800a136:	4681      	mov	r9, r0
 800a138:	468a      	mov	sl, r1
 800a13a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a13e:	d0da      	beq.n	800a0f6 <_strtod_l+0x51e>
 800a140:	f1b8 0f1f 	cmp.w	r8, #31
 800a144:	dd24      	ble.n	800a190 <_strtod_l+0x5b8>
 800a146:	f04f 0800 	mov.w	r8, #0
 800a14a:	f8cd 8010 	str.w	r8, [sp, #16]
 800a14e:	f8cd 8020 	str.w	r8, [sp, #32]
 800a152:	f8cd 8018 	str.w	r8, [sp, #24]
 800a156:	2322      	movs	r3, #34	; 0x22
 800a158:	f04f 0900 	mov.w	r9, #0
 800a15c:	f04f 0a00 	mov.w	sl, #0
 800a160:	f8cb 3000 	str.w	r3, [fp]
 800a164:	e761      	b.n	800a02a <_strtod_l+0x452>
 800a166:	bf00      	nop
 800a168:	0800e63d 	.word	0x0800e63d
 800a16c:	0800e6c3 	.word	0x0800e6c3
 800a170:	0800e645 	.word	0x0800e645
 800a174:	0800e684 	.word	0x0800e684
 800a178:	0800e760 	.word	0x0800e760
 800a17c:	0800e738 	.word	0x0800e738
 800a180:	7ff00000 	.word	0x7ff00000
 800a184:	7ca00000 	.word	0x7ca00000
 800a188:	fff80000 	.word	0xfff80000
 800a18c:	7fefffff 	.word	0x7fefffff
 800a190:	f018 0310 	ands.w	r3, r8, #16
 800a194:	bf18      	it	ne
 800a196:	236a      	movne	r3, #106	; 0x6a
 800a198:	4648      	mov	r0, r9
 800a19a:	9305      	str	r3, [sp, #20]
 800a19c:	4651      	mov	r1, sl
 800a19e:	2300      	movs	r3, #0
 800a1a0:	4da1      	ldr	r5, [pc, #644]	; (800a428 <_strtod_l+0x850>)
 800a1a2:	f1b8 0f00 	cmp.w	r8, #0
 800a1a6:	f300 8113 	bgt.w	800a3d0 <_strtod_l+0x7f8>
 800a1aa:	b10b      	cbz	r3, 800a1b0 <_strtod_l+0x5d8>
 800a1ac:	4681      	mov	r9, r0
 800a1ae:	468a      	mov	sl, r1
 800a1b0:	9b05      	ldr	r3, [sp, #20]
 800a1b2:	b1bb      	cbz	r3, 800a1e4 <_strtod_l+0x60c>
 800a1b4:	f3ca 530a 	ubfx	r3, sl, #20, #11
 800a1b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	4651      	mov	r1, sl
 800a1c0:	dd10      	ble.n	800a1e4 <_strtod_l+0x60c>
 800a1c2:	2b1f      	cmp	r3, #31
 800a1c4:	f340 8110 	ble.w	800a3e8 <_strtod_l+0x810>
 800a1c8:	2b34      	cmp	r3, #52	; 0x34
 800a1ca:	bfd8      	it	le
 800a1cc:	f04f 32ff 	movle.w	r2, #4294967295
 800a1d0:	f04f 0900 	mov.w	r9, #0
 800a1d4:	bfcf      	iteee	gt
 800a1d6:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800a1da:	3b20      	suble	r3, #32
 800a1dc:	fa02 f303 	lslle.w	r3, r2, r3
 800a1e0:	ea03 0a01 	andle.w	sl, r3, r1
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	4648      	mov	r0, r9
 800a1ea:	4651      	mov	r1, sl
 800a1ec:	f7f6 fc48 	bl	8000a80 <__aeabi_dcmpeq>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d1a8      	bne.n	800a146 <_strtod_l+0x56e>
 800a1f4:	9b06      	ldr	r3, [sp, #24]
 800a1f6:	9a04      	ldr	r2, [sp, #16]
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	9908      	ldr	r1, [sp, #32]
 800a1fc:	4623      	mov	r3, r4
 800a1fe:	4658      	mov	r0, fp
 800a200:	f002 f84c 	bl	800c29c <__s2b>
 800a204:	9008      	str	r0, [sp, #32]
 800a206:	2800      	cmp	r0, #0
 800a208:	f43f af00 	beq.w	800a00c <_strtod_l+0x434>
 800a20c:	9a07      	ldr	r2, [sp, #28]
 800a20e:	9b07      	ldr	r3, [sp, #28]
 800a210:	2a00      	cmp	r2, #0
 800a212:	f1c3 0300 	rsb	r3, r3, #0
 800a216:	bfa8      	it	ge
 800a218:	2300      	movge	r3, #0
 800a21a:	f04f 0800 	mov.w	r8, #0
 800a21e:	930e      	str	r3, [sp, #56]	; 0x38
 800a220:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a224:	9316      	str	r3, [sp, #88]	; 0x58
 800a226:	f8cd 8010 	str.w	r8, [sp, #16]
 800a22a:	9b08      	ldr	r3, [sp, #32]
 800a22c:	4658      	mov	r0, fp
 800a22e:	6859      	ldr	r1, [r3, #4]
 800a230:	f001 ffae 	bl	800c190 <_Balloc>
 800a234:	9006      	str	r0, [sp, #24]
 800a236:	2800      	cmp	r0, #0
 800a238:	f43f aef0 	beq.w	800a01c <_strtod_l+0x444>
 800a23c:	9b08      	ldr	r3, [sp, #32]
 800a23e:	300c      	adds	r0, #12
 800a240:	691a      	ldr	r2, [r3, #16]
 800a242:	f103 010c 	add.w	r1, r3, #12
 800a246:	3202      	adds	r2, #2
 800a248:	0092      	lsls	r2, r2, #2
 800a24a:	f7fe fcdc 	bl	8008c06 <memcpy>
 800a24e:	ab1e      	add	r3, sp, #120	; 0x78
 800a250:	9301      	str	r3, [sp, #4]
 800a252:	ab1d      	add	r3, sp, #116	; 0x74
 800a254:	9300      	str	r3, [sp, #0]
 800a256:	464a      	mov	r2, r9
 800a258:	4653      	mov	r3, sl
 800a25a:	4658      	mov	r0, fp
 800a25c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800a260:	f002 fad6 	bl	800c810 <__d2b>
 800a264:	901c      	str	r0, [sp, #112]	; 0x70
 800a266:	2800      	cmp	r0, #0
 800a268:	f43f aed8 	beq.w	800a01c <_strtod_l+0x444>
 800a26c:	2101      	movs	r1, #1
 800a26e:	4658      	mov	r0, fp
 800a270:	f002 f8a0 	bl	800c3b4 <__i2b>
 800a274:	9004      	str	r0, [sp, #16]
 800a276:	4603      	mov	r3, r0
 800a278:	2800      	cmp	r0, #0
 800a27a:	f43f aecf 	beq.w	800a01c <_strtod_l+0x444>
 800a27e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800a280:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a282:	2d00      	cmp	r5, #0
 800a284:	bfab      	itete	ge
 800a286:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a288:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a28a:	18ee      	addge	r6, r5, r3
 800a28c:	1b5c      	sublt	r4, r3, r5
 800a28e:	9b05      	ldr	r3, [sp, #20]
 800a290:	bfa8      	it	ge
 800a292:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800a294:	eba5 0503 	sub.w	r5, r5, r3
 800a298:	4415      	add	r5, r2
 800a29a:	4b64      	ldr	r3, [pc, #400]	; (800a42c <_strtod_l+0x854>)
 800a29c:	f105 35ff 	add.w	r5, r5, #4294967295
 800a2a0:	bfb8      	it	lt
 800a2a2:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a2a4:	429d      	cmp	r5, r3
 800a2a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a2aa:	f280 80af 	bge.w	800a40c <_strtod_l+0x834>
 800a2ae:	1b5b      	subs	r3, r3, r5
 800a2b0:	2b1f      	cmp	r3, #31
 800a2b2:	eba2 0203 	sub.w	r2, r2, r3
 800a2b6:	f04f 0701 	mov.w	r7, #1
 800a2ba:	f300 809c 	bgt.w	800a3f6 <_strtod_l+0x81e>
 800a2be:	2500      	movs	r5, #0
 800a2c0:	fa07 f303 	lsl.w	r3, r7, r3
 800a2c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2c6:	18b7      	adds	r7, r6, r2
 800a2c8:	9b05      	ldr	r3, [sp, #20]
 800a2ca:	42be      	cmp	r6, r7
 800a2cc:	4414      	add	r4, r2
 800a2ce:	441c      	add	r4, r3
 800a2d0:	4633      	mov	r3, r6
 800a2d2:	bfa8      	it	ge
 800a2d4:	463b      	movge	r3, r7
 800a2d6:	42a3      	cmp	r3, r4
 800a2d8:	bfa8      	it	ge
 800a2da:	4623      	movge	r3, r4
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	bfc2      	ittt	gt
 800a2e0:	1aff      	subgt	r7, r7, r3
 800a2e2:	1ae4      	subgt	r4, r4, r3
 800a2e4:	1af6      	subgt	r6, r6, r3
 800a2e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2e8:	b1bb      	cbz	r3, 800a31a <_strtod_l+0x742>
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	9904      	ldr	r1, [sp, #16]
 800a2ee:	4658      	mov	r0, fp
 800a2f0:	f002 f8fe 	bl	800c4f0 <__pow5mult>
 800a2f4:	9004      	str	r0, [sp, #16]
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	f43f ae90 	beq.w	800a01c <_strtod_l+0x444>
 800a2fc:	4601      	mov	r1, r0
 800a2fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a300:	4658      	mov	r0, fp
 800a302:	f002 f860 	bl	800c3c6 <__multiply>
 800a306:	9009      	str	r0, [sp, #36]	; 0x24
 800a308:	2800      	cmp	r0, #0
 800a30a:	f43f ae87 	beq.w	800a01c <_strtod_l+0x444>
 800a30e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a310:	4658      	mov	r0, fp
 800a312:	f001 ff71 	bl	800c1f8 <_Bfree>
 800a316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a318:	931c      	str	r3, [sp, #112]	; 0x70
 800a31a:	2f00      	cmp	r7, #0
 800a31c:	dc7a      	bgt.n	800a414 <_strtod_l+0x83c>
 800a31e:	9b07      	ldr	r3, [sp, #28]
 800a320:	2b00      	cmp	r3, #0
 800a322:	dd08      	ble.n	800a336 <_strtod_l+0x75e>
 800a324:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a326:	9906      	ldr	r1, [sp, #24]
 800a328:	4658      	mov	r0, fp
 800a32a:	f002 f8e1 	bl	800c4f0 <__pow5mult>
 800a32e:	9006      	str	r0, [sp, #24]
 800a330:	2800      	cmp	r0, #0
 800a332:	f43f ae73 	beq.w	800a01c <_strtod_l+0x444>
 800a336:	2c00      	cmp	r4, #0
 800a338:	dd08      	ble.n	800a34c <_strtod_l+0x774>
 800a33a:	4622      	mov	r2, r4
 800a33c:	9906      	ldr	r1, [sp, #24]
 800a33e:	4658      	mov	r0, fp
 800a340:	f002 f924 	bl	800c58c <__lshift>
 800a344:	9006      	str	r0, [sp, #24]
 800a346:	2800      	cmp	r0, #0
 800a348:	f43f ae68 	beq.w	800a01c <_strtod_l+0x444>
 800a34c:	2e00      	cmp	r6, #0
 800a34e:	dd08      	ble.n	800a362 <_strtod_l+0x78a>
 800a350:	4632      	mov	r2, r6
 800a352:	9904      	ldr	r1, [sp, #16]
 800a354:	4658      	mov	r0, fp
 800a356:	f002 f919 	bl	800c58c <__lshift>
 800a35a:	9004      	str	r0, [sp, #16]
 800a35c:	2800      	cmp	r0, #0
 800a35e:	f43f ae5d 	beq.w	800a01c <_strtod_l+0x444>
 800a362:	9a06      	ldr	r2, [sp, #24]
 800a364:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a366:	4658      	mov	r0, fp
 800a368:	f002 f97e 	bl	800c668 <__mdiff>
 800a36c:	4680      	mov	r8, r0
 800a36e:	2800      	cmp	r0, #0
 800a370:	f43f ae54 	beq.w	800a01c <_strtod_l+0x444>
 800a374:	2400      	movs	r4, #0
 800a376:	68c3      	ldr	r3, [r0, #12]
 800a378:	9904      	ldr	r1, [sp, #16]
 800a37a:	60c4      	str	r4, [r0, #12]
 800a37c:	930c      	str	r3, [sp, #48]	; 0x30
 800a37e:	f002 f959 	bl	800c634 <__mcmp>
 800a382:	42a0      	cmp	r0, r4
 800a384:	da54      	bge.n	800a430 <_strtod_l+0x858>
 800a386:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a388:	b9f3      	cbnz	r3, 800a3c8 <_strtod_l+0x7f0>
 800a38a:	f1b9 0f00 	cmp.w	r9, #0
 800a38e:	d11b      	bne.n	800a3c8 <_strtod_l+0x7f0>
 800a390:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800a394:	b9c3      	cbnz	r3, 800a3c8 <_strtod_l+0x7f0>
 800a396:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800a39a:	0d1b      	lsrs	r3, r3, #20
 800a39c:	051b      	lsls	r3, r3, #20
 800a39e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a3a2:	d911      	bls.n	800a3c8 <_strtod_l+0x7f0>
 800a3a4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a3a8:	b91b      	cbnz	r3, 800a3b2 <_strtod_l+0x7da>
 800a3aa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	dd0a      	ble.n	800a3c8 <_strtod_l+0x7f0>
 800a3b2:	4641      	mov	r1, r8
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	4658      	mov	r0, fp
 800a3b8:	f002 f8e8 	bl	800c58c <__lshift>
 800a3bc:	9904      	ldr	r1, [sp, #16]
 800a3be:	4680      	mov	r8, r0
 800a3c0:	f002 f938 	bl	800c634 <__mcmp>
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	dc68      	bgt.n	800a49a <_strtod_l+0x8c2>
 800a3c8:	9b05      	ldr	r3, [sp, #20]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d172      	bne.n	800a4b4 <_strtod_l+0x8dc>
 800a3ce:	e630      	b.n	800a032 <_strtod_l+0x45a>
 800a3d0:	f018 0f01 	tst.w	r8, #1
 800a3d4:	d004      	beq.n	800a3e0 <_strtod_l+0x808>
 800a3d6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a3da:	f7f6 f8e9 	bl	80005b0 <__aeabi_dmul>
 800a3de:	2301      	movs	r3, #1
 800a3e0:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a3e4:	3508      	adds	r5, #8
 800a3e6:	e6dc      	b.n	800a1a2 <_strtod_l+0x5ca>
 800a3e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a3ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f0:	ea03 0909 	and.w	r9, r3, r9
 800a3f4:	e6f6      	b.n	800a1e4 <_strtod_l+0x60c>
 800a3f6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a3fa:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a3fe:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a402:	35e2      	adds	r5, #226	; 0xe2
 800a404:	fa07 f505 	lsl.w	r5, r7, r5
 800a408:	970f      	str	r7, [sp, #60]	; 0x3c
 800a40a:	e75c      	b.n	800a2c6 <_strtod_l+0x6ee>
 800a40c:	2301      	movs	r3, #1
 800a40e:	2500      	movs	r5, #0
 800a410:	930f      	str	r3, [sp, #60]	; 0x3c
 800a412:	e758      	b.n	800a2c6 <_strtod_l+0x6ee>
 800a414:	463a      	mov	r2, r7
 800a416:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a418:	4658      	mov	r0, fp
 800a41a:	f002 f8b7 	bl	800c58c <__lshift>
 800a41e:	901c      	str	r0, [sp, #112]	; 0x70
 800a420:	2800      	cmp	r0, #0
 800a422:	f47f af7c 	bne.w	800a31e <_strtod_l+0x746>
 800a426:	e5f9      	b.n	800a01c <_strtod_l+0x444>
 800a428:	0800e698 	.word	0x0800e698
 800a42c:	fffffc02 	.word	0xfffffc02
 800a430:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a434:	f040 8089 	bne.w	800a54a <_strtod_l+0x972>
 800a438:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a43a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800a43e:	b342      	cbz	r2, 800a492 <_strtod_l+0x8ba>
 800a440:	4aaf      	ldr	r2, [pc, #700]	; (800a700 <_strtod_l+0xb28>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d156      	bne.n	800a4f4 <_strtod_l+0x91c>
 800a446:	9b05      	ldr	r3, [sp, #20]
 800a448:	4648      	mov	r0, r9
 800a44a:	b1eb      	cbz	r3, 800a488 <_strtod_l+0x8b0>
 800a44c:	4653      	mov	r3, sl
 800a44e:	4aad      	ldr	r2, [pc, #692]	; (800a704 <_strtod_l+0xb2c>)
 800a450:	f04f 31ff 	mov.w	r1, #4294967295
 800a454:	401a      	ands	r2, r3
 800a456:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a45a:	d818      	bhi.n	800a48e <_strtod_l+0x8b6>
 800a45c:	0d12      	lsrs	r2, r2, #20
 800a45e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a462:	fa01 f303 	lsl.w	r3, r1, r3
 800a466:	4298      	cmp	r0, r3
 800a468:	d144      	bne.n	800a4f4 <_strtod_l+0x91c>
 800a46a:	4ba7      	ldr	r3, [pc, #668]	; (800a708 <_strtod_l+0xb30>)
 800a46c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a46e:	429a      	cmp	r2, r3
 800a470:	d102      	bne.n	800a478 <_strtod_l+0x8a0>
 800a472:	3001      	adds	r0, #1
 800a474:	f43f add2 	beq.w	800a01c <_strtod_l+0x444>
 800a478:	4ba2      	ldr	r3, [pc, #648]	; (800a704 <_strtod_l+0xb2c>)
 800a47a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a47c:	f04f 0900 	mov.w	r9, #0
 800a480:	401a      	ands	r2, r3
 800a482:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800a486:	e79f      	b.n	800a3c8 <_strtod_l+0x7f0>
 800a488:	f04f 33ff 	mov.w	r3, #4294967295
 800a48c:	e7eb      	b.n	800a466 <_strtod_l+0x88e>
 800a48e:	460b      	mov	r3, r1
 800a490:	e7e9      	b.n	800a466 <_strtod_l+0x88e>
 800a492:	bb7b      	cbnz	r3, 800a4f4 <_strtod_l+0x91c>
 800a494:	f1b9 0f00 	cmp.w	r9, #0
 800a498:	d12c      	bne.n	800a4f4 <_strtod_l+0x91c>
 800a49a:	9905      	ldr	r1, [sp, #20]
 800a49c:	4653      	mov	r3, sl
 800a49e:	4a99      	ldr	r2, [pc, #612]	; (800a704 <_strtod_l+0xb2c>)
 800a4a0:	b1f1      	cbz	r1, 800a4e0 <_strtod_l+0x908>
 800a4a2:	ea02 010a 	and.w	r1, r2, sl
 800a4a6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a4aa:	dc19      	bgt.n	800a4e0 <_strtod_l+0x908>
 800a4ac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a4b0:	f77f ae51 	ble.w	800a156 <_strtod_l+0x57e>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	4a95      	ldr	r2, [pc, #596]	; (800a70c <_strtod_l+0xb34>)
 800a4b8:	4648      	mov	r0, r9
 800a4ba:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800a4be:	4651      	mov	r1, sl
 800a4c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a4c4:	f7f6 f874 	bl	80005b0 <__aeabi_dmul>
 800a4c8:	4681      	mov	r9, r0
 800a4ca:	468a      	mov	sl, r1
 800a4cc:	2900      	cmp	r1, #0
 800a4ce:	f47f adb0 	bne.w	800a032 <_strtod_l+0x45a>
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	f47f adad 	bne.w	800a032 <_strtod_l+0x45a>
 800a4d8:	2322      	movs	r3, #34	; 0x22
 800a4da:	f8cb 3000 	str.w	r3, [fp]
 800a4de:	e5a8      	b.n	800a032 <_strtod_l+0x45a>
 800a4e0:	4013      	ands	r3, r2
 800a4e2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a4e6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800a4ea:	f04f 39ff 	mov.w	r9, #4294967295
 800a4ee:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800a4f2:	e769      	b.n	800a3c8 <_strtod_l+0x7f0>
 800a4f4:	b19d      	cbz	r5, 800a51e <_strtod_l+0x946>
 800a4f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f8:	421d      	tst	r5, r3
 800a4fa:	f43f af65 	beq.w	800a3c8 <_strtod_l+0x7f0>
 800a4fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a500:	9a05      	ldr	r2, [sp, #20]
 800a502:	4648      	mov	r0, r9
 800a504:	4651      	mov	r1, sl
 800a506:	b173      	cbz	r3, 800a526 <_strtod_l+0x94e>
 800a508:	f7ff fb45 	bl	8009b96 <sulp>
 800a50c:	4602      	mov	r2, r0
 800a50e:	460b      	mov	r3, r1
 800a510:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a514:	f7f5 fe96 	bl	8000244 <__adddf3>
 800a518:	4681      	mov	r9, r0
 800a51a:	468a      	mov	sl, r1
 800a51c:	e754      	b.n	800a3c8 <_strtod_l+0x7f0>
 800a51e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a520:	ea13 0f09 	tst.w	r3, r9
 800a524:	e7e9      	b.n	800a4fa <_strtod_l+0x922>
 800a526:	f7ff fb36 	bl	8009b96 <sulp>
 800a52a:	4602      	mov	r2, r0
 800a52c:	460b      	mov	r3, r1
 800a52e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a532:	f7f5 fe85 	bl	8000240 <__aeabi_dsub>
 800a536:	2200      	movs	r2, #0
 800a538:	2300      	movs	r3, #0
 800a53a:	4681      	mov	r9, r0
 800a53c:	468a      	mov	sl, r1
 800a53e:	f7f6 fa9f 	bl	8000a80 <__aeabi_dcmpeq>
 800a542:	2800      	cmp	r0, #0
 800a544:	f47f ae07 	bne.w	800a156 <_strtod_l+0x57e>
 800a548:	e73e      	b.n	800a3c8 <_strtod_l+0x7f0>
 800a54a:	9904      	ldr	r1, [sp, #16]
 800a54c:	4640      	mov	r0, r8
 800a54e:	f002 f9ae 	bl	800c8ae <__ratio>
 800a552:	2200      	movs	r2, #0
 800a554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a558:	4606      	mov	r6, r0
 800a55a:	460f      	mov	r7, r1
 800a55c:	f7f6 faa4 	bl	8000aa8 <__aeabi_dcmple>
 800a560:	2800      	cmp	r0, #0
 800a562:	d075      	beq.n	800a650 <_strtod_l+0xa78>
 800a564:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a566:	2b00      	cmp	r3, #0
 800a568:	d047      	beq.n	800a5fa <_strtod_l+0xa22>
 800a56a:	2600      	movs	r6, #0
 800a56c:	4f68      	ldr	r7, [pc, #416]	; (800a710 <_strtod_l+0xb38>)
 800a56e:	4d68      	ldr	r5, [pc, #416]	; (800a710 <_strtod_l+0xb38>)
 800a570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a572:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a576:	0d1b      	lsrs	r3, r3, #20
 800a578:	051b      	lsls	r3, r3, #20
 800a57a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a57c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a57e:	4b65      	ldr	r3, [pc, #404]	; (800a714 <_strtod_l+0xb3c>)
 800a580:	429a      	cmp	r2, r3
 800a582:	f040 80cf 	bne.w	800a724 <_strtod_l+0xb4c>
 800a586:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a58a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a58e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a590:	4648      	mov	r0, r9
 800a592:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800a596:	4651      	mov	r1, sl
 800a598:	f002 f8c4 	bl	800c724 <__ulp>
 800a59c:	4602      	mov	r2, r0
 800a59e:	460b      	mov	r3, r1
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	4639      	mov	r1, r7
 800a5a4:	f7f6 f804 	bl	80005b0 <__aeabi_dmul>
 800a5a8:	464a      	mov	r2, r9
 800a5aa:	4653      	mov	r3, sl
 800a5ac:	f7f5 fe4a 	bl	8000244 <__adddf3>
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	4954      	ldr	r1, [pc, #336]	; (800a704 <_strtod_l+0xb2c>)
 800a5b4:	4a58      	ldr	r2, [pc, #352]	; (800a718 <_strtod_l+0xb40>)
 800a5b6:	4019      	ands	r1, r3
 800a5b8:	4291      	cmp	r1, r2
 800a5ba:	4681      	mov	r9, r0
 800a5bc:	d95e      	bls.n	800a67c <_strtod_l+0xaa4>
 800a5be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5c0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d103      	bne.n	800a5d0 <_strtod_l+0x9f8>
 800a5c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	f43f ad26 	beq.w	800a01c <_strtod_l+0x444>
 800a5d0:	f04f 39ff 	mov.w	r9, #4294967295
 800a5d4:	f8df a130 	ldr.w	sl, [pc, #304]	; 800a708 <_strtod_l+0xb30>
 800a5d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a5da:	4658      	mov	r0, fp
 800a5dc:	f001 fe0c 	bl	800c1f8 <_Bfree>
 800a5e0:	9906      	ldr	r1, [sp, #24]
 800a5e2:	4658      	mov	r0, fp
 800a5e4:	f001 fe08 	bl	800c1f8 <_Bfree>
 800a5e8:	9904      	ldr	r1, [sp, #16]
 800a5ea:	4658      	mov	r0, fp
 800a5ec:	f001 fe04 	bl	800c1f8 <_Bfree>
 800a5f0:	4641      	mov	r1, r8
 800a5f2:	4658      	mov	r0, fp
 800a5f4:	f001 fe00 	bl	800c1f8 <_Bfree>
 800a5f8:	e617      	b.n	800a22a <_strtod_l+0x652>
 800a5fa:	f1b9 0f00 	cmp.w	r9, #0
 800a5fe:	d119      	bne.n	800a634 <_strtod_l+0xa5c>
 800a600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a602:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a606:	b9e3      	cbnz	r3, 800a642 <_strtod_l+0xa6a>
 800a608:	2200      	movs	r2, #0
 800a60a:	4b41      	ldr	r3, [pc, #260]	; (800a710 <_strtod_l+0xb38>)
 800a60c:	4630      	mov	r0, r6
 800a60e:	4639      	mov	r1, r7
 800a610:	f7f6 fa40 	bl	8000a94 <__aeabi_dcmplt>
 800a614:	b9c8      	cbnz	r0, 800a64a <_strtod_l+0xa72>
 800a616:	2200      	movs	r2, #0
 800a618:	4b40      	ldr	r3, [pc, #256]	; (800a71c <_strtod_l+0xb44>)
 800a61a:	4630      	mov	r0, r6
 800a61c:	4639      	mov	r1, r7
 800a61e:	f7f5 ffc7 	bl	80005b0 <__aeabi_dmul>
 800a622:	4604      	mov	r4, r0
 800a624:	460d      	mov	r5, r1
 800a626:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a62a:	9418      	str	r4, [sp, #96]	; 0x60
 800a62c:	9319      	str	r3, [sp, #100]	; 0x64
 800a62e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800a632:	e79d      	b.n	800a570 <_strtod_l+0x998>
 800a634:	f1b9 0f01 	cmp.w	r9, #1
 800a638:	d103      	bne.n	800a642 <_strtod_l+0xa6a>
 800a63a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f43f ad8a 	beq.w	800a156 <_strtod_l+0x57e>
 800a642:	2600      	movs	r6, #0
 800a644:	4f36      	ldr	r7, [pc, #216]	; (800a720 <_strtod_l+0xb48>)
 800a646:	2400      	movs	r4, #0
 800a648:	e791      	b.n	800a56e <_strtod_l+0x996>
 800a64a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a64c:	4d33      	ldr	r5, [pc, #204]	; (800a71c <_strtod_l+0xb44>)
 800a64e:	e7ea      	b.n	800a626 <_strtod_l+0xa4e>
 800a650:	4b32      	ldr	r3, [pc, #200]	; (800a71c <_strtod_l+0xb44>)
 800a652:	2200      	movs	r2, #0
 800a654:	4630      	mov	r0, r6
 800a656:	4639      	mov	r1, r7
 800a658:	f7f5 ffaa 	bl	80005b0 <__aeabi_dmul>
 800a65c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a65e:	4604      	mov	r4, r0
 800a660:	460d      	mov	r5, r1
 800a662:	b933      	cbnz	r3, 800a672 <_strtod_l+0xa9a>
 800a664:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a668:	9010      	str	r0, [sp, #64]	; 0x40
 800a66a:	9311      	str	r3, [sp, #68]	; 0x44
 800a66c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a670:	e77e      	b.n	800a570 <_strtod_l+0x998>
 800a672:	4602      	mov	r2, r0
 800a674:	460b      	mov	r3, r1
 800a676:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a67a:	e7f7      	b.n	800a66c <_strtod_l+0xa94>
 800a67c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 800a680:	9b05      	ldr	r3, [sp, #20]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d1a8      	bne.n	800a5d8 <_strtod_l+0xa00>
 800a686:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800a68a:	0d1b      	lsrs	r3, r3, #20
 800a68c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a68e:	051b      	lsls	r3, r3, #20
 800a690:	429a      	cmp	r2, r3
 800a692:	4656      	mov	r6, sl
 800a694:	d1a0      	bne.n	800a5d8 <_strtod_l+0xa00>
 800a696:	4629      	mov	r1, r5
 800a698:	4620      	mov	r0, r4
 800a69a:	f7f6 fa39 	bl	8000b10 <__aeabi_d2iz>
 800a69e:	f7f5 ff1d 	bl	80004dc <__aeabi_i2d>
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	4629      	mov	r1, r5
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	f7f5 fdc9 	bl	8000240 <__aeabi_dsub>
 800a6ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6b0:	4604      	mov	r4, r0
 800a6b2:	460d      	mov	r5, r1
 800a6b4:	b933      	cbnz	r3, 800a6c4 <_strtod_l+0xaec>
 800a6b6:	f1b9 0f00 	cmp.w	r9, #0
 800a6ba:	d103      	bne.n	800a6c4 <_strtod_l+0xaec>
 800a6bc:	f3ca 0613 	ubfx	r6, sl, #0, #20
 800a6c0:	2e00      	cmp	r6, #0
 800a6c2:	d06a      	beq.n	800a79a <_strtod_l+0xbc2>
 800a6c4:	a30a      	add	r3, pc, #40	; (adr r3, 800a6f0 <_strtod_l+0xb18>)
 800a6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	4629      	mov	r1, r5
 800a6ce:	f7f6 f9e1 	bl	8000a94 <__aeabi_dcmplt>
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	f47f acad 	bne.w	800a032 <_strtod_l+0x45a>
 800a6d8:	a307      	add	r3, pc, #28	; (adr r3, 800a6f8 <_strtod_l+0xb20>)
 800a6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6de:	4620      	mov	r0, r4
 800a6e0:	4629      	mov	r1, r5
 800a6e2:	f7f6 f9f5 	bl	8000ad0 <__aeabi_dcmpgt>
 800a6e6:	2800      	cmp	r0, #0
 800a6e8:	f43f af76 	beq.w	800a5d8 <_strtod_l+0xa00>
 800a6ec:	e4a1      	b.n	800a032 <_strtod_l+0x45a>
 800a6ee:	bf00      	nop
 800a6f0:	94a03595 	.word	0x94a03595
 800a6f4:	3fdfffff 	.word	0x3fdfffff
 800a6f8:	35afe535 	.word	0x35afe535
 800a6fc:	3fe00000 	.word	0x3fe00000
 800a700:	000fffff 	.word	0x000fffff
 800a704:	7ff00000 	.word	0x7ff00000
 800a708:	7fefffff 	.word	0x7fefffff
 800a70c:	39500000 	.word	0x39500000
 800a710:	3ff00000 	.word	0x3ff00000
 800a714:	7fe00000 	.word	0x7fe00000
 800a718:	7c9fffff 	.word	0x7c9fffff
 800a71c:	3fe00000 	.word	0x3fe00000
 800a720:	bff00000 	.word	0xbff00000
 800a724:	9b05      	ldr	r3, [sp, #20]
 800a726:	b313      	cbz	r3, 800a76e <_strtod_l+0xb96>
 800a728:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a72a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a72e:	d81e      	bhi.n	800a76e <_strtod_l+0xb96>
 800a730:	a325      	add	r3, pc, #148	; (adr r3, 800a7c8 <_strtod_l+0xbf0>)
 800a732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a736:	4620      	mov	r0, r4
 800a738:	4629      	mov	r1, r5
 800a73a:	f7f6 f9b5 	bl	8000aa8 <__aeabi_dcmple>
 800a73e:	b190      	cbz	r0, 800a766 <_strtod_l+0xb8e>
 800a740:	4629      	mov	r1, r5
 800a742:	4620      	mov	r0, r4
 800a744:	f7f6 fa0c 	bl	8000b60 <__aeabi_d2uiz>
 800a748:	2800      	cmp	r0, #0
 800a74a:	bf08      	it	eq
 800a74c:	2001      	moveq	r0, #1
 800a74e:	f7f5 feb5 	bl	80004bc <__aeabi_ui2d>
 800a752:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a754:	4604      	mov	r4, r0
 800a756:	460d      	mov	r5, r1
 800a758:	b9d3      	cbnz	r3, 800a790 <_strtod_l+0xbb8>
 800a75a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a75e:	9012      	str	r0, [sp, #72]	; 0x48
 800a760:	9313      	str	r3, [sp, #76]	; 0x4c
 800a762:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a766:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a768:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a76c:	1a9f      	subs	r7, r3, r2
 800a76e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a772:	f001 ffd7 	bl	800c724 <__ulp>
 800a776:	4602      	mov	r2, r0
 800a778:	460b      	mov	r3, r1
 800a77a:	4630      	mov	r0, r6
 800a77c:	4639      	mov	r1, r7
 800a77e:	f7f5 ff17 	bl	80005b0 <__aeabi_dmul>
 800a782:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a786:	f7f5 fd5d 	bl	8000244 <__adddf3>
 800a78a:	4681      	mov	r9, r0
 800a78c:	468a      	mov	sl, r1
 800a78e:	e777      	b.n	800a680 <_strtod_l+0xaa8>
 800a790:	4602      	mov	r2, r0
 800a792:	460b      	mov	r3, r1
 800a794:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a798:	e7e3      	b.n	800a762 <_strtod_l+0xb8a>
 800a79a:	a30d      	add	r3, pc, #52	; (adr r3, 800a7d0 <_strtod_l+0xbf8>)
 800a79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a0:	f7f6 f978 	bl	8000a94 <__aeabi_dcmplt>
 800a7a4:	e79f      	b.n	800a6e6 <_strtod_l+0xb0e>
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	930d      	str	r3, [sp, #52]	; 0x34
 800a7aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a7ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a7ae:	6013      	str	r3, [r2, #0]
 800a7b0:	f7ff ba55 	b.w	8009c5e <_strtod_l+0x86>
 800a7b4:	2b65      	cmp	r3, #101	; 0x65
 800a7b6:	f04f 0200 	mov.w	r2, #0
 800a7ba:	f43f ab42 	beq.w	8009e42 <_strtod_l+0x26a>
 800a7be:	2101      	movs	r1, #1
 800a7c0:	4614      	mov	r4, r2
 800a7c2:	9105      	str	r1, [sp, #20]
 800a7c4:	f7ff babf 	b.w	8009d46 <_strtod_l+0x16e>
 800a7c8:	ffc00000 	.word	0xffc00000
 800a7cc:	41dfffff 	.word	0x41dfffff
 800a7d0:	94a03595 	.word	0x94a03595
 800a7d4:	3fcfffff 	.word	0x3fcfffff

0800a7d8 <_strtod_r>:
 800a7d8:	4b05      	ldr	r3, [pc, #20]	; (800a7f0 <_strtod_r+0x18>)
 800a7da:	b410      	push	{r4}
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4c05      	ldr	r4, [pc, #20]	; (800a7f4 <_strtod_r+0x1c>)
 800a7e0:	6a1b      	ldr	r3, [r3, #32]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	bf08      	it	eq
 800a7e6:	4623      	moveq	r3, r4
 800a7e8:	bc10      	pop	{r4}
 800a7ea:	f7ff b9f5 	b.w	8009bd8 <_strtod_l>
 800a7ee:	bf00      	nop
 800a7f0:	20000014 	.word	0x20000014
 800a7f4:	20000078 	.word	0x20000078

0800a7f8 <_strtol_l.isra.0>:
 800a7f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7fc:	4680      	mov	r8, r0
 800a7fe:	4689      	mov	r9, r1
 800a800:	4692      	mov	sl, r2
 800a802:	461e      	mov	r6, r3
 800a804:	460f      	mov	r7, r1
 800a806:	463d      	mov	r5, r7
 800a808:	9808      	ldr	r0, [sp, #32]
 800a80a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a80e:	f001 fc25 	bl	800c05c <__locale_ctype_ptr_l>
 800a812:	4420      	add	r0, r4
 800a814:	7843      	ldrb	r3, [r0, #1]
 800a816:	f013 0308 	ands.w	r3, r3, #8
 800a81a:	d132      	bne.n	800a882 <_strtol_l.isra.0+0x8a>
 800a81c:	2c2d      	cmp	r4, #45	; 0x2d
 800a81e:	d132      	bne.n	800a886 <_strtol_l.isra.0+0x8e>
 800a820:	2201      	movs	r2, #1
 800a822:	787c      	ldrb	r4, [r7, #1]
 800a824:	1cbd      	adds	r5, r7, #2
 800a826:	2e00      	cmp	r6, #0
 800a828:	d05d      	beq.n	800a8e6 <_strtol_l.isra.0+0xee>
 800a82a:	2e10      	cmp	r6, #16
 800a82c:	d109      	bne.n	800a842 <_strtol_l.isra.0+0x4a>
 800a82e:	2c30      	cmp	r4, #48	; 0x30
 800a830:	d107      	bne.n	800a842 <_strtol_l.isra.0+0x4a>
 800a832:	782b      	ldrb	r3, [r5, #0]
 800a834:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a838:	2b58      	cmp	r3, #88	; 0x58
 800a83a:	d14f      	bne.n	800a8dc <_strtol_l.isra.0+0xe4>
 800a83c:	2610      	movs	r6, #16
 800a83e:	786c      	ldrb	r4, [r5, #1]
 800a840:	3502      	adds	r5, #2
 800a842:	2a00      	cmp	r2, #0
 800a844:	bf14      	ite	ne
 800a846:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a84a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a84e:	2700      	movs	r7, #0
 800a850:	fbb1 fcf6 	udiv	ip, r1, r6
 800a854:	4638      	mov	r0, r7
 800a856:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a85a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a85e:	2b09      	cmp	r3, #9
 800a860:	d817      	bhi.n	800a892 <_strtol_l.isra.0+0x9a>
 800a862:	461c      	mov	r4, r3
 800a864:	42a6      	cmp	r6, r4
 800a866:	dd23      	ble.n	800a8b0 <_strtol_l.isra.0+0xb8>
 800a868:	1c7b      	adds	r3, r7, #1
 800a86a:	d007      	beq.n	800a87c <_strtol_l.isra.0+0x84>
 800a86c:	4584      	cmp	ip, r0
 800a86e:	d31c      	bcc.n	800a8aa <_strtol_l.isra.0+0xb2>
 800a870:	d101      	bne.n	800a876 <_strtol_l.isra.0+0x7e>
 800a872:	45a6      	cmp	lr, r4
 800a874:	db19      	blt.n	800a8aa <_strtol_l.isra.0+0xb2>
 800a876:	2701      	movs	r7, #1
 800a878:	fb00 4006 	mla	r0, r0, r6, r4
 800a87c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a880:	e7eb      	b.n	800a85a <_strtol_l.isra.0+0x62>
 800a882:	462f      	mov	r7, r5
 800a884:	e7bf      	b.n	800a806 <_strtol_l.isra.0+0xe>
 800a886:	2c2b      	cmp	r4, #43	; 0x2b
 800a888:	bf04      	itt	eq
 800a88a:	1cbd      	addeq	r5, r7, #2
 800a88c:	787c      	ldrbeq	r4, [r7, #1]
 800a88e:	461a      	mov	r2, r3
 800a890:	e7c9      	b.n	800a826 <_strtol_l.isra.0+0x2e>
 800a892:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a896:	2b19      	cmp	r3, #25
 800a898:	d801      	bhi.n	800a89e <_strtol_l.isra.0+0xa6>
 800a89a:	3c37      	subs	r4, #55	; 0x37
 800a89c:	e7e2      	b.n	800a864 <_strtol_l.isra.0+0x6c>
 800a89e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a8a2:	2b19      	cmp	r3, #25
 800a8a4:	d804      	bhi.n	800a8b0 <_strtol_l.isra.0+0xb8>
 800a8a6:	3c57      	subs	r4, #87	; 0x57
 800a8a8:	e7dc      	b.n	800a864 <_strtol_l.isra.0+0x6c>
 800a8aa:	f04f 37ff 	mov.w	r7, #4294967295
 800a8ae:	e7e5      	b.n	800a87c <_strtol_l.isra.0+0x84>
 800a8b0:	1c7b      	adds	r3, r7, #1
 800a8b2:	d108      	bne.n	800a8c6 <_strtol_l.isra.0+0xce>
 800a8b4:	2322      	movs	r3, #34	; 0x22
 800a8b6:	4608      	mov	r0, r1
 800a8b8:	f8c8 3000 	str.w	r3, [r8]
 800a8bc:	f1ba 0f00 	cmp.w	sl, #0
 800a8c0:	d107      	bne.n	800a8d2 <_strtol_l.isra.0+0xda>
 800a8c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8c6:	b102      	cbz	r2, 800a8ca <_strtol_l.isra.0+0xd2>
 800a8c8:	4240      	negs	r0, r0
 800a8ca:	f1ba 0f00 	cmp.w	sl, #0
 800a8ce:	d0f8      	beq.n	800a8c2 <_strtol_l.isra.0+0xca>
 800a8d0:	b10f      	cbz	r7, 800a8d6 <_strtol_l.isra.0+0xde>
 800a8d2:	f105 39ff 	add.w	r9, r5, #4294967295
 800a8d6:	f8ca 9000 	str.w	r9, [sl]
 800a8da:	e7f2      	b.n	800a8c2 <_strtol_l.isra.0+0xca>
 800a8dc:	2430      	movs	r4, #48	; 0x30
 800a8de:	2e00      	cmp	r6, #0
 800a8e0:	d1af      	bne.n	800a842 <_strtol_l.isra.0+0x4a>
 800a8e2:	2608      	movs	r6, #8
 800a8e4:	e7ad      	b.n	800a842 <_strtol_l.isra.0+0x4a>
 800a8e6:	2c30      	cmp	r4, #48	; 0x30
 800a8e8:	d0a3      	beq.n	800a832 <_strtol_l.isra.0+0x3a>
 800a8ea:	260a      	movs	r6, #10
 800a8ec:	e7a9      	b.n	800a842 <_strtol_l.isra.0+0x4a>
	...

0800a8f0 <_strtol_r>:
 800a8f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8f2:	4c06      	ldr	r4, [pc, #24]	; (800a90c <_strtol_r+0x1c>)
 800a8f4:	4d06      	ldr	r5, [pc, #24]	; (800a910 <_strtol_r+0x20>)
 800a8f6:	6824      	ldr	r4, [r4, #0]
 800a8f8:	6a24      	ldr	r4, [r4, #32]
 800a8fa:	2c00      	cmp	r4, #0
 800a8fc:	bf08      	it	eq
 800a8fe:	462c      	moveq	r4, r5
 800a900:	9400      	str	r4, [sp, #0]
 800a902:	f7ff ff79 	bl	800a7f8 <_strtol_l.isra.0>
 800a906:	b003      	add	sp, #12
 800a908:	bd30      	pop	{r4, r5, pc}
 800a90a:	bf00      	nop
 800a90c:	20000014 	.word	0x20000014
 800a910:	20000078 	.word	0x20000078

0800a914 <__swbuf_r>:
 800a914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a916:	460e      	mov	r6, r1
 800a918:	4614      	mov	r4, r2
 800a91a:	4605      	mov	r5, r0
 800a91c:	b118      	cbz	r0, 800a926 <__swbuf_r+0x12>
 800a91e:	6983      	ldr	r3, [r0, #24]
 800a920:	b90b      	cbnz	r3, 800a926 <__swbuf_r+0x12>
 800a922:	f000 ffe9 	bl	800b8f8 <__sinit>
 800a926:	4b21      	ldr	r3, [pc, #132]	; (800a9ac <__swbuf_r+0x98>)
 800a928:	429c      	cmp	r4, r3
 800a92a:	d12a      	bne.n	800a982 <__swbuf_r+0x6e>
 800a92c:	686c      	ldr	r4, [r5, #4]
 800a92e:	69a3      	ldr	r3, [r4, #24]
 800a930:	60a3      	str	r3, [r4, #8]
 800a932:	89a3      	ldrh	r3, [r4, #12]
 800a934:	071a      	lsls	r2, r3, #28
 800a936:	d52e      	bpl.n	800a996 <__swbuf_r+0x82>
 800a938:	6923      	ldr	r3, [r4, #16]
 800a93a:	b363      	cbz	r3, 800a996 <__swbuf_r+0x82>
 800a93c:	6923      	ldr	r3, [r4, #16]
 800a93e:	6820      	ldr	r0, [r4, #0]
 800a940:	b2f6      	uxtb	r6, r6
 800a942:	1ac0      	subs	r0, r0, r3
 800a944:	6963      	ldr	r3, [r4, #20]
 800a946:	4637      	mov	r7, r6
 800a948:	4283      	cmp	r3, r0
 800a94a:	dc04      	bgt.n	800a956 <__swbuf_r+0x42>
 800a94c:	4621      	mov	r1, r4
 800a94e:	4628      	mov	r0, r5
 800a950:	f000 ff68 	bl	800b824 <_fflush_r>
 800a954:	bb28      	cbnz	r0, 800a9a2 <__swbuf_r+0x8e>
 800a956:	68a3      	ldr	r3, [r4, #8]
 800a958:	3001      	adds	r0, #1
 800a95a:	3b01      	subs	r3, #1
 800a95c:	60a3      	str	r3, [r4, #8]
 800a95e:	6823      	ldr	r3, [r4, #0]
 800a960:	1c5a      	adds	r2, r3, #1
 800a962:	6022      	str	r2, [r4, #0]
 800a964:	701e      	strb	r6, [r3, #0]
 800a966:	6963      	ldr	r3, [r4, #20]
 800a968:	4283      	cmp	r3, r0
 800a96a:	d004      	beq.n	800a976 <__swbuf_r+0x62>
 800a96c:	89a3      	ldrh	r3, [r4, #12]
 800a96e:	07db      	lsls	r3, r3, #31
 800a970:	d519      	bpl.n	800a9a6 <__swbuf_r+0x92>
 800a972:	2e0a      	cmp	r6, #10
 800a974:	d117      	bne.n	800a9a6 <__swbuf_r+0x92>
 800a976:	4621      	mov	r1, r4
 800a978:	4628      	mov	r0, r5
 800a97a:	f000 ff53 	bl	800b824 <_fflush_r>
 800a97e:	b190      	cbz	r0, 800a9a6 <__swbuf_r+0x92>
 800a980:	e00f      	b.n	800a9a2 <__swbuf_r+0x8e>
 800a982:	4b0b      	ldr	r3, [pc, #44]	; (800a9b0 <__swbuf_r+0x9c>)
 800a984:	429c      	cmp	r4, r3
 800a986:	d101      	bne.n	800a98c <__swbuf_r+0x78>
 800a988:	68ac      	ldr	r4, [r5, #8]
 800a98a:	e7d0      	b.n	800a92e <__swbuf_r+0x1a>
 800a98c:	4b09      	ldr	r3, [pc, #36]	; (800a9b4 <__swbuf_r+0xa0>)
 800a98e:	429c      	cmp	r4, r3
 800a990:	bf08      	it	eq
 800a992:	68ec      	ldreq	r4, [r5, #12]
 800a994:	e7cb      	b.n	800a92e <__swbuf_r+0x1a>
 800a996:	4621      	mov	r1, r4
 800a998:	4628      	mov	r0, r5
 800a99a:	f000 f80d 	bl	800a9b8 <__swsetup_r>
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	d0cc      	beq.n	800a93c <__swbuf_r+0x28>
 800a9a2:	f04f 37ff 	mov.w	r7, #4294967295
 800a9a6:	4638      	mov	r0, r7
 800a9a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	0800e6f0 	.word	0x0800e6f0
 800a9b0:	0800e710 	.word	0x0800e710
 800a9b4:	0800e6d0 	.word	0x0800e6d0

0800a9b8 <__swsetup_r>:
 800a9b8:	4b32      	ldr	r3, [pc, #200]	; (800aa84 <__swsetup_r+0xcc>)
 800a9ba:	b570      	push	{r4, r5, r6, lr}
 800a9bc:	681d      	ldr	r5, [r3, #0]
 800a9be:	4606      	mov	r6, r0
 800a9c0:	460c      	mov	r4, r1
 800a9c2:	b125      	cbz	r5, 800a9ce <__swsetup_r+0x16>
 800a9c4:	69ab      	ldr	r3, [r5, #24]
 800a9c6:	b913      	cbnz	r3, 800a9ce <__swsetup_r+0x16>
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	f000 ff95 	bl	800b8f8 <__sinit>
 800a9ce:	4b2e      	ldr	r3, [pc, #184]	; (800aa88 <__swsetup_r+0xd0>)
 800a9d0:	429c      	cmp	r4, r3
 800a9d2:	d10f      	bne.n	800a9f4 <__swsetup_r+0x3c>
 800a9d4:	686c      	ldr	r4, [r5, #4]
 800a9d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	0715      	lsls	r5, r2, #28
 800a9de:	d42c      	bmi.n	800aa3a <__swsetup_r+0x82>
 800a9e0:	06d0      	lsls	r0, r2, #27
 800a9e2:	d411      	bmi.n	800aa08 <__swsetup_r+0x50>
 800a9e4:	2209      	movs	r2, #9
 800a9e6:	6032      	str	r2, [r6, #0]
 800a9e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9ec:	81a3      	strh	r3, [r4, #12]
 800a9ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f2:	e03e      	b.n	800aa72 <__swsetup_r+0xba>
 800a9f4:	4b25      	ldr	r3, [pc, #148]	; (800aa8c <__swsetup_r+0xd4>)
 800a9f6:	429c      	cmp	r4, r3
 800a9f8:	d101      	bne.n	800a9fe <__swsetup_r+0x46>
 800a9fa:	68ac      	ldr	r4, [r5, #8]
 800a9fc:	e7eb      	b.n	800a9d6 <__swsetup_r+0x1e>
 800a9fe:	4b24      	ldr	r3, [pc, #144]	; (800aa90 <__swsetup_r+0xd8>)
 800aa00:	429c      	cmp	r4, r3
 800aa02:	bf08      	it	eq
 800aa04:	68ec      	ldreq	r4, [r5, #12]
 800aa06:	e7e6      	b.n	800a9d6 <__swsetup_r+0x1e>
 800aa08:	0751      	lsls	r1, r2, #29
 800aa0a:	d512      	bpl.n	800aa32 <__swsetup_r+0x7a>
 800aa0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa0e:	b141      	cbz	r1, 800aa22 <__swsetup_r+0x6a>
 800aa10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa14:	4299      	cmp	r1, r3
 800aa16:	d002      	beq.n	800aa1e <__swsetup_r+0x66>
 800aa18:	4630      	mov	r0, r6
 800aa1a:	f7fe f915 	bl	8008c48 <_free_r>
 800aa1e:	2300      	movs	r3, #0
 800aa20:	6363      	str	r3, [r4, #52]	; 0x34
 800aa22:	89a3      	ldrh	r3, [r4, #12]
 800aa24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa28:	81a3      	strh	r3, [r4, #12]
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	6063      	str	r3, [r4, #4]
 800aa2e:	6923      	ldr	r3, [r4, #16]
 800aa30:	6023      	str	r3, [r4, #0]
 800aa32:	89a3      	ldrh	r3, [r4, #12]
 800aa34:	f043 0308 	orr.w	r3, r3, #8
 800aa38:	81a3      	strh	r3, [r4, #12]
 800aa3a:	6923      	ldr	r3, [r4, #16]
 800aa3c:	b94b      	cbnz	r3, 800aa52 <__swsetup_r+0x9a>
 800aa3e:	89a3      	ldrh	r3, [r4, #12]
 800aa40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa48:	d003      	beq.n	800aa52 <__swsetup_r+0x9a>
 800aa4a:	4621      	mov	r1, r4
 800aa4c:	4630      	mov	r0, r6
 800aa4e:	f001 fb3d 	bl	800c0cc <__smakebuf_r>
 800aa52:	89a2      	ldrh	r2, [r4, #12]
 800aa54:	f012 0301 	ands.w	r3, r2, #1
 800aa58:	d00c      	beq.n	800aa74 <__swsetup_r+0xbc>
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	60a3      	str	r3, [r4, #8]
 800aa5e:	6963      	ldr	r3, [r4, #20]
 800aa60:	425b      	negs	r3, r3
 800aa62:	61a3      	str	r3, [r4, #24]
 800aa64:	6923      	ldr	r3, [r4, #16]
 800aa66:	b953      	cbnz	r3, 800aa7e <__swsetup_r+0xc6>
 800aa68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa6c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800aa70:	d1ba      	bne.n	800a9e8 <__swsetup_r+0x30>
 800aa72:	bd70      	pop	{r4, r5, r6, pc}
 800aa74:	0792      	lsls	r2, r2, #30
 800aa76:	bf58      	it	pl
 800aa78:	6963      	ldrpl	r3, [r4, #20]
 800aa7a:	60a3      	str	r3, [r4, #8]
 800aa7c:	e7f2      	b.n	800aa64 <__swsetup_r+0xac>
 800aa7e:	2000      	movs	r0, #0
 800aa80:	e7f7      	b.n	800aa72 <__swsetup_r+0xba>
 800aa82:	bf00      	nop
 800aa84:	20000014 	.word	0x20000014
 800aa88:	0800e6f0 	.word	0x0800e6f0
 800aa8c:	0800e710 	.word	0x0800e710
 800aa90:	0800e6d0 	.word	0x0800e6d0

0800aa94 <quorem>:
 800aa94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa98:	6903      	ldr	r3, [r0, #16]
 800aa9a:	690c      	ldr	r4, [r1, #16]
 800aa9c:	4680      	mov	r8, r0
 800aa9e:	42a3      	cmp	r3, r4
 800aaa0:	f2c0 8084 	blt.w	800abac <quorem+0x118>
 800aaa4:	3c01      	subs	r4, #1
 800aaa6:	f101 0714 	add.w	r7, r1, #20
 800aaaa:	f100 0614 	add.w	r6, r0, #20
 800aaae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800aab2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800aab6:	3501      	adds	r5, #1
 800aab8:	fbb0 f5f5 	udiv	r5, r0, r5
 800aabc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800aac0:	eb06 030c 	add.w	r3, r6, ip
 800aac4:	eb07 090c 	add.w	r9, r7, ip
 800aac8:	9301      	str	r3, [sp, #4]
 800aaca:	b39d      	cbz	r5, 800ab34 <quorem+0xa0>
 800aacc:	f04f 0a00 	mov.w	sl, #0
 800aad0:	4638      	mov	r0, r7
 800aad2:	46b6      	mov	lr, r6
 800aad4:	46d3      	mov	fp, sl
 800aad6:	f850 2b04 	ldr.w	r2, [r0], #4
 800aada:	b293      	uxth	r3, r2
 800aadc:	fb05 a303 	mla	r3, r5, r3, sl
 800aae0:	0c12      	lsrs	r2, r2, #16
 800aae2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aae6:	fb05 a202 	mla	r2, r5, r2, sl
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	ebab 0303 	sub.w	r3, fp, r3
 800aaf0:	f8de b000 	ldr.w	fp, [lr]
 800aaf4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800aaf8:	fa1f fb8b 	uxth.w	fp, fp
 800aafc:	445b      	add	r3, fp
 800aafe:	fa1f fb82 	uxth.w	fp, r2
 800ab02:	f8de 2000 	ldr.w	r2, [lr]
 800ab06:	4581      	cmp	r9, r0
 800ab08:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ab0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab16:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800ab1a:	f84e 3b04 	str.w	r3, [lr], #4
 800ab1e:	d2da      	bcs.n	800aad6 <quorem+0x42>
 800ab20:	f856 300c 	ldr.w	r3, [r6, ip]
 800ab24:	b933      	cbnz	r3, 800ab34 <quorem+0xa0>
 800ab26:	9b01      	ldr	r3, [sp, #4]
 800ab28:	3b04      	subs	r3, #4
 800ab2a:	429e      	cmp	r6, r3
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	d331      	bcc.n	800ab94 <quorem+0x100>
 800ab30:	f8c8 4010 	str.w	r4, [r8, #16]
 800ab34:	4640      	mov	r0, r8
 800ab36:	f001 fd7d 	bl	800c634 <__mcmp>
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	db26      	blt.n	800ab8c <quorem+0xf8>
 800ab3e:	4630      	mov	r0, r6
 800ab40:	f04f 0c00 	mov.w	ip, #0
 800ab44:	3501      	adds	r5, #1
 800ab46:	f857 1b04 	ldr.w	r1, [r7], #4
 800ab4a:	f8d0 e000 	ldr.w	lr, [r0]
 800ab4e:	b28b      	uxth	r3, r1
 800ab50:	ebac 0303 	sub.w	r3, ip, r3
 800ab54:	fa1f f28e 	uxth.w	r2, lr
 800ab58:	4413      	add	r3, r2
 800ab5a:	0c0a      	lsrs	r2, r1, #16
 800ab5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ab60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab6a:	45b9      	cmp	r9, r7
 800ab6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ab70:	f840 3b04 	str.w	r3, [r0], #4
 800ab74:	d2e7      	bcs.n	800ab46 <quorem+0xb2>
 800ab76:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ab7a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ab7e:	b92a      	cbnz	r2, 800ab8c <quorem+0xf8>
 800ab80:	3b04      	subs	r3, #4
 800ab82:	429e      	cmp	r6, r3
 800ab84:	461a      	mov	r2, r3
 800ab86:	d30b      	bcc.n	800aba0 <quorem+0x10c>
 800ab88:	f8c8 4010 	str.w	r4, [r8, #16]
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	b003      	add	sp, #12
 800ab90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab94:	6812      	ldr	r2, [r2, #0]
 800ab96:	3b04      	subs	r3, #4
 800ab98:	2a00      	cmp	r2, #0
 800ab9a:	d1c9      	bne.n	800ab30 <quorem+0x9c>
 800ab9c:	3c01      	subs	r4, #1
 800ab9e:	e7c4      	b.n	800ab2a <quorem+0x96>
 800aba0:	6812      	ldr	r2, [r2, #0]
 800aba2:	3b04      	subs	r3, #4
 800aba4:	2a00      	cmp	r2, #0
 800aba6:	d1ef      	bne.n	800ab88 <quorem+0xf4>
 800aba8:	3c01      	subs	r4, #1
 800abaa:	e7ea      	b.n	800ab82 <quorem+0xee>
 800abac:	2000      	movs	r0, #0
 800abae:	e7ee      	b.n	800ab8e <quorem+0xfa>

0800abb0 <_dtoa_r>:
 800abb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb4:	4616      	mov	r6, r2
 800abb6:	461f      	mov	r7, r3
 800abb8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800abba:	b095      	sub	sp, #84	; 0x54
 800abbc:	4604      	mov	r4, r0
 800abbe:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800abc2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800abc6:	b93d      	cbnz	r5, 800abd8 <_dtoa_r+0x28>
 800abc8:	2010      	movs	r0, #16
 800abca:	f7fd fffd 	bl	8008bc8 <malloc>
 800abce:	6260      	str	r0, [r4, #36]	; 0x24
 800abd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800abd4:	6005      	str	r5, [r0, #0]
 800abd6:	60c5      	str	r5, [r0, #12]
 800abd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abda:	6819      	ldr	r1, [r3, #0]
 800abdc:	b151      	cbz	r1, 800abf4 <_dtoa_r+0x44>
 800abde:	685a      	ldr	r2, [r3, #4]
 800abe0:	2301      	movs	r3, #1
 800abe2:	4093      	lsls	r3, r2
 800abe4:	604a      	str	r2, [r1, #4]
 800abe6:	608b      	str	r3, [r1, #8]
 800abe8:	4620      	mov	r0, r4
 800abea:	f001 fb05 	bl	800c1f8 <_Bfree>
 800abee:	2200      	movs	r2, #0
 800abf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abf2:	601a      	str	r2, [r3, #0]
 800abf4:	1e3b      	subs	r3, r7, #0
 800abf6:	bfaf      	iteee	ge
 800abf8:	2300      	movge	r3, #0
 800abfa:	2201      	movlt	r2, #1
 800abfc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ac00:	9303      	strlt	r3, [sp, #12]
 800ac02:	bfac      	ite	ge
 800ac04:	f8c8 3000 	strge.w	r3, [r8]
 800ac08:	f8c8 2000 	strlt.w	r2, [r8]
 800ac0c:	4bae      	ldr	r3, [pc, #696]	; (800aec8 <_dtoa_r+0x318>)
 800ac0e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ac12:	ea33 0308 	bics.w	r3, r3, r8
 800ac16:	d11b      	bne.n	800ac50 <_dtoa_r+0xa0>
 800ac18:	f242 730f 	movw	r3, #9999	; 0x270f
 800ac1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ac1e:	6013      	str	r3, [r2, #0]
 800ac20:	9b02      	ldr	r3, [sp, #8]
 800ac22:	b923      	cbnz	r3, 800ac2e <_dtoa_r+0x7e>
 800ac24:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	f000 8545 	beq.w	800b6b8 <_dtoa_r+0xb08>
 800ac2e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac30:	b953      	cbnz	r3, 800ac48 <_dtoa_r+0x98>
 800ac32:	4ba6      	ldr	r3, [pc, #664]	; (800aecc <_dtoa_r+0x31c>)
 800ac34:	e021      	b.n	800ac7a <_dtoa_r+0xca>
 800ac36:	4ba6      	ldr	r3, [pc, #664]	; (800aed0 <_dtoa_r+0x320>)
 800ac38:	9306      	str	r3, [sp, #24]
 800ac3a:	3308      	adds	r3, #8
 800ac3c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ac3e:	6013      	str	r3, [r2, #0]
 800ac40:	9806      	ldr	r0, [sp, #24]
 800ac42:	b015      	add	sp, #84	; 0x54
 800ac44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac48:	4ba0      	ldr	r3, [pc, #640]	; (800aecc <_dtoa_r+0x31c>)
 800ac4a:	9306      	str	r3, [sp, #24]
 800ac4c:	3303      	adds	r3, #3
 800ac4e:	e7f5      	b.n	800ac3c <_dtoa_r+0x8c>
 800ac50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ac54:	2200      	movs	r2, #0
 800ac56:	2300      	movs	r3, #0
 800ac58:	4630      	mov	r0, r6
 800ac5a:	4639      	mov	r1, r7
 800ac5c:	f7f5 ff10 	bl	8000a80 <__aeabi_dcmpeq>
 800ac60:	4682      	mov	sl, r0
 800ac62:	b160      	cbz	r0, 800ac7e <_dtoa_r+0xce>
 800ac64:	2301      	movs	r3, #1
 800ac66:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ac68:	6013      	str	r3, [r2, #0]
 800ac6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	f000 8520 	beq.w	800b6b2 <_dtoa_r+0xb02>
 800ac72:	4b98      	ldr	r3, [pc, #608]	; (800aed4 <_dtoa_r+0x324>)
 800ac74:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ac76:	6013      	str	r3, [r2, #0]
 800ac78:	3b01      	subs	r3, #1
 800ac7a:	9306      	str	r3, [sp, #24]
 800ac7c:	e7e0      	b.n	800ac40 <_dtoa_r+0x90>
 800ac7e:	ab12      	add	r3, sp, #72	; 0x48
 800ac80:	9301      	str	r3, [sp, #4]
 800ac82:	ab13      	add	r3, sp, #76	; 0x4c
 800ac84:	9300      	str	r3, [sp, #0]
 800ac86:	4632      	mov	r2, r6
 800ac88:	463b      	mov	r3, r7
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	f001 fdc0 	bl	800c810 <__d2b>
 800ac90:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ac94:	4683      	mov	fp, r0
 800ac96:	2d00      	cmp	r5, #0
 800ac98:	d07d      	beq.n	800ad96 <_dtoa_r+0x1e6>
 800ac9a:	46b0      	mov	r8, r6
 800ac9c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aca0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800aca4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800aca8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800acac:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800acb0:	2200      	movs	r2, #0
 800acb2:	4b89      	ldr	r3, [pc, #548]	; (800aed8 <_dtoa_r+0x328>)
 800acb4:	4640      	mov	r0, r8
 800acb6:	4649      	mov	r1, r9
 800acb8:	f7f5 fac2 	bl	8000240 <__aeabi_dsub>
 800acbc:	a37c      	add	r3, pc, #496	; (adr r3, 800aeb0 <_dtoa_r+0x300>)
 800acbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc2:	f7f5 fc75 	bl	80005b0 <__aeabi_dmul>
 800acc6:	a37c      	add	r3, pc, #496	; (adr r3, 800aeb8 <_dtoa_r+0x308>)
 800acc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800accc:	f7f5 faba 	bl	8000244 <__adddf3>
 800acd0:	4606      	mov	r6, r0
 800acd2:	4628      	mov	r0, r5
 800acd4:	460f      	mov	r7, r1
 800acd6:	f7f5 fc01 	bl	80004dc <__aeabi_i2d>
 800acda:	a379      	add	r3, pc, #484	; (adr r3, 800aec0 <_dtoa_r+0x310>)
 800acdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace0:	f7f5 fc66 	bl	80005b0 <__aeabi_dmul>
 800ace4:	4602      	mov	r2, r0
 800ace6:	460b      	mov	r3, r1
 800ace8:	4630      	mov	r0, r6
 800acea:	4639      	mov	r1, r7
 800acec:	f7f5 faaa 	bl	8000244 <__adddf3>
 800acf0:	4606      	mov	r6, r0
 800acf2:	460f      	mov	r7, r1
 800acf4:	f7f5 ff0c 	bl	8000b10 <__aeabi_d2iz>
 800acf8:	2200      	movs	r2, #0
 800acfa:	4682      	mov	sl, r0
 800acfc:	2300      	movs	r3, #0
 800acfe:	4630      	mov	r0, r6
 800ad00:	4639      	mov	r1, r7
 800ad02:	f7f5 fec7 	bl	8000a94 <__aeabi_dcmplt>
 800ad06:	b148      	cbz	r0, 800ad1c <_dtoa_r+0x16c>
 800ad08:	4650      	mov	r0, sl
 800ad0a:	f7f5 fbe7 	bl	80004dc <__aeabi_i2d>
 800ad0e:	4632      	mov	r2, r6
 800ad10:	463b      	mov	r3, r7
 800ad12:	f7f5 feb5 	bl	8000a80 <__aeabi_dcmpeq>
 800ad16:	b908      	cbnz	r0, 800ad1c <_dtoa_r+0x16c>
 800ad18:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad1c:	f1ba 0f16 	cmp.w	sl, #22
 800ad20:	d85a      	bhi.n	800add8 <_dtoa_r+0x228>
 800ad22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad26:	496d      	ldr	r1, [pc, #436]	; (800aedc <_dtoa_r+0x32c>)
 800ad28:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ad2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad30:	f7f5 fece 	bl	8000ad0 <__aeabi_dcmpgt>
 800ad34:	2800      	cmp	r0, #0
 800ad36:	d051      	beq.n	800addc <_dtoa_r+0x22c>
 800ad38:	2300      	movs	r3, #0
 800ad3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad3e:	930d      	str	r3, [sp, #52]	; 0x34
 800ad40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad42:	1b5d      	subs	r5, r3, r5
 800ad44:	1e6b      	subs	r3, r5, #1
 800ad46:	9307      	str	r3, [sp, #28]
 800ad48:	bf43      	ittte	mi
 800ad4a:	2300      	movmi	r3, #0
 800ad4c:	f1c5 0901 	rsbmi	r9, r5, #1
 800ad50:	9307      	strmi	r3, [sp, #28]
 800ad52:	f04f 0900 	movpl.w	r9, #0
 800ad56:	f1ba 0f00 	cmp.w	sl, #0
 800ad5a:	db41      	blt.n	800ade0 <_dtoa_r+0x230>
 800ad5c:	9b07      	ldr	r3, [sp, #28]
 800ad5e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800ad62:	4453      	add	r3, sl
 800ad64:	9307      	str	r3, [sp, #28]
 800ad66:	2300      	movs	r3, #0
 800ad68:	9308      	str	r3, [sp, #32]
 800ad6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ad6c:	2b09      	cmp	r3, #9
 800ad6e:	f200 808f 	bhi.w	800ae90 <_dtoa_r+0x2e0>
 800ad72:	2b05      	cmp	r3, #5
 800ad74:	bfc4      	itt	gt
 800ad76:	3b04      	subgt	r3, #4
 800ad78:	931e      	strgt	r3, [sp, #120]	; 0x78
 800ad7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ad7c:	bfc8      	it	gt
 800ad7e:	2500      	movgt	r5, #0
 800ad80:	f1a3 0302 	sub.w	r3, r3, #2
 800ad84:	bfd8      	it	le
 800ad86:	2501      	movle	r5, #1
 800ad88:	2b03      	cmp	r3, #3
 800ad8a:	f200 808d 	bhi.w	800aea8 <_dtoa_r+0x2f8>
 800ad8e:	e8df f003 	tbb	[pc, r3]
 800ad92:	7d7b      	.short	0x7d7b
 800ad94:	6f2f      	.short	0x6f2f
 800ad96:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ad9a:	441d      	add	r5, r3
 800ad9c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800ada0:	2820      	cmp	r0, #32
 800ada2:	dd13      	ble.n	800adcc <_dtoa_r+0x21c>
 800ada4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800ada8:	9b02      	ldr	r3, [sp, #8]
 800adaa:	fa08 f800 	lsl.w	r8, r8, r0
 800adae:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800adb2:	fa23 f000 	lsr.w	r0, r3, r0
 800adb6:	ea48 0000 	orr.w	r0, r8, r0
 800adba:	f7f5 fb7f 	bl	80004bc <__aeabi_ui2d>
 800adbe:	2301      	movs	r3, #1
 800adc0:	4680      	mov	r8, r0
 800adc2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800adc6:	3d01      	subs	r5, #1
 800adc8:	9310      	str	r3, [sp, #64]	; 0x40
 800adca:	e771      	b.n	800acb0 <_dtoa_r+0x100>
 800adcc:	9b02      	ldr	r3, [sp, #8]
 800adce:	f1c0 0020 	rsb	r0, r0, #32
 800add2:	fa03 f000 	lsl.w	r0, r3, r0
 800add6:	e7f0      	b.n	800adba <_dtoa_r+0x20a>
 800add8:	2301      	movs	r3, #1
 800adda:	e7b0      	b.n	800ad3e <_dtoa_r+0x18e>
 800addc:	900d      	str	r0, [sp, #52]	; 0x34
 800adde:	e7af      	b.n	800ad40 <_dtoa_r+0x190>
 800ade0:	f1ca 0300 	rsb	r3, sl, #0
 800ade4:	9308      	str	r3, [sp, #32]
 800ade6:	2300      	movs	r3, #0
 800ade8:	eba9 090a 	sub.w	r9, r9, sl
 800adec:	930c      	str	r3, [sp, #48]	; 0x30
 800adee:	e7bc      	b.n	800ad6a <_dtoa_r+0x1ba>
 800adf0:	2301      	movs	r3, #1
 800adf2:	9309      	str	r3, [sp, #36]	; 0x24
 800adf4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	dd74      	ble.n	800aee4 <_dtoa_r+0x334>
 800adfa:	4698      	mov	r8, r3
 800adfc:	9304      	str	r3, [sp, #16]
 800adfe:	2200      	movs	r2, #0
 800ae00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ae02:	6072      	str	r2, [r6, #4]
 800ae04:	2204      	movs	r2, #4
 800ae06:	f102 0014 	add.w	r0, r2, #20
 800ae0a:	4298      	cmp	r0, r3
 800ae0c:	6871      	ldr	r1, [r6, #4]
 800ae0e:	d96e      	bls.n	800aeee <_dtoa_r+0x33e>
 800ae10:	4620      	mov	r0, r4
 800ae12:	f001 f9bd 	bl	800c190 <_Balloc>
 800ae16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae18:	6030      	str	r0, [r6, #0]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f1b8 0f0e 	cmp.w	r8, #14
 800ae20:	9306      	str	r3, [sp, #24]
 800ae22:	f200 80ed 	bhi.w	800b000 <_dtoa_r+0x450>
 800ae26:	2d00      	cmp	r5, #0
 800ae28:	f000 80ea 	beq.w	800b000 <_dtoa_r+0x450>
 800ae2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae30:	f1ba 0f00 	cmp.w	sl, #0
 800ae34:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ae38:	dd77      	ble.n	800af2a <_dtoa_r+0x37a>
 800ae3a:	4a28      	ldr	r2, [pc, #160]	; (800aedc <_dtoa_r+0x32c>)
 800ae3c:	f00a 030f 	and.w	r3, sl, #15
 800ae40:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ae44:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ae48:	06f0      	lsls	r0, r6, #27
 800ae4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ae52:	d568      	bpl.n	800af26 <_dtoa_r+0x376>
 800ae54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ae58:	4b21      	ldr	r3, [pc, #132]	; (800aee0 <_dtoa_r+0x330>)
 800ae5a:	2503      	movs	r5, #3
 800ae5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ae60:	f7f5 fcd0 	bl	8000804 <__aeabi_ddiv>
 800ae64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae68:	f006 060f 	and.w	r6, r6, #15
 800ae6c:	4f1c      	ldr	r7, [pc, #112]	; (800aee0 <_dtoa_r+0x330>)
 800ae6e:	e04f      	b.n	800af10 <_dtoa_r+0x360>
 800ae70:	2301      	movs	r3, #1
 800ae72:	9309      	str	r3, [sp, #36]	; 0x24
 800ae74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ae76:	4453      	add	r3, sl
 800ae78:	f103 0801 	add.w	r8, r3, #1
 800ae7c:	9304      	str	r3, [sp, #16]
 800ae7e:	4643      	mov	r3, r8
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	bfb8      	it	lt
 800ae84:	2301      	movlt	r3, #1
 800ae86:	e7ba      	b.n	800adfe <_dtoa_r+0x24e>
 800ae88:	2300      	movs	r3, #0
 800ae8a:	e7b2      	b.n	800adf2 <_dtoa_r+0x242>
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	e7f0      	b.n	800ae72 <_dtoa_r+0x2c2>
 800ae90:	2501      	movs	r5, #1
 800ae92:	2300      	movs	r3, #0
 800ae94:	9509      	str	r5, [sp, #36]	; 0x24
 800ae96:	931e      	str	r3, [sp, #120]	; 0x78
 800ae98:	f04f 33ff 	mov.w	r3, #4294967295
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	9304      	str	r3, [sp, #16]
 800aea0:	4698      	mov	r8, r3
 800aea2:	2312      	movs	r3, #18
 800aea4:	921f      	str	r2, [sp, #124]	; 0x7c
 800aea6:	e7aa      	b.n	800adfe <_dtoa_r+0x24e>
 800aea8:	2301      	movs	r3, #1
 800aeaa:	9309      	str	r3, [sp, #36]	; 0x24
 800aeac:	e7f4      	b.n	800ae98 <_dtoa_r+0x2e8>
 800aeae:	bf00      	nop
 800aeb0:	636f4361 	.word	0x636f4361
 800aeb4:	3fd287a7 	.word	0x3fd287a7
 800aeb8:	8b60c8b3 	.word	0x8b60c8b3
 800aebc:	3fc68a28 	.word	0x3fc68a28
 800aec0:	509f79fb 	.word	0x509f79fb
 800aec4:	3fd34413 	.word	0x3fd34413
 800aec8:	7ff00000 	.word	0x7ff00000
 800aecc:	0800e6c9 	.word	0x0800e6c9
 800aed0:	0800e6c0 	.word	0x0800e6c0
 800aed4:	0800db6d 	.word	0x0800db6d
 800aed8:	3ff80000 	.word	0x3ff80000
 800aedc:	0800e760 	.word	0x0800e760
 800aee0:	0800e738 	.word	0x0800e738
 800aee4:	2301      	movs	r3, #1
 800aee6:	9304      	str	r3, [sp, #16]
 800aee8:	4698      	mov	r8, r3
 800aeea:	461a      	mov	r2, r3
 800aeec:	e7da      	b.n	800aea4 <_dtoa_r+0x2f4>
 800aeee:	3101      	adds	r1, #1
 800aef0:	6071      	str	r1, [r6, #4]
 800aef2:	0052      	lsls	r2, r2, #1
 800aef4:	e787      	b.n	800ae06 <_dtoa_r+0x256>
 800aef6:	07f1      	lsls	r1, r6, #31
 800aef8:	d508      	bpl.n	800af0c <_dtoa_r+0x35c>
 800aefa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aefe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af02:	f7f5 fb55 	bl	80005b0 <__aeabi_dmul>
 800af06:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800af0a:	3501      	adds	r5, #1
 800af0c:	1076      	asrs	r6, r6, #1
 800af0e:	3708      	adds	r7, #8
 800af10:	2e00      	cmp	r6, #0
 800af12:	d1f0      	bne.n	800aef6 <_dtoa_r+0x346>
 800af14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800af18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af1c:	f7f5 fc72 	bl	8000804 <__aeabi_ddiv>
 800af20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af24:	e01b      	b.n	800af5e <_dtoa_r+0x3ae>
 800af26:	2502      	movs	r5, #2
 800af28:	e7a0      	b.n	800ae6c <_dtoa_r+0x2bc>
 800af2a:	f000 80a4 	beq.w	800b076 <_dtoa_r+0x4c6>
 800af2e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800af32:	f1ca 0600 	rsb	r6, sl, #0
 800af36:	4ba0      	ldr	r3, [pc, #640]	; (800b1b8 <_dtoa_r+0x608>)
 800af38:	f006 020f 	and.w	r2, r6, #15
 800af3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af44:	f7f5 fb34 	bl	80005b0 <__aeabi_dmul>
 800af48:	2502      	movs	r5, #2
 800af4a:	2300      	movs	r3, #0
 800af4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af50:	4f9a      	ldr	r7, [pc, #616]	; (800b1bc <_dtoa_r+0x60c>)
 800af52:	1136      	asrs	r6, r6, #4
 800af54:	2e00      	cmp	r6, #0
 800af56:	f040 8083 	bne.w	800b060 <_dtoa_r+0x4b0>
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d1e0      	bne.n	800af20 <_dtoa_r+0x370>
 800af5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af60:	2b00      	cmp	r3, #0
 800af62:	f000 808a 	beq.w	800b07a <_dtoa_r+0x4ca>
 800af66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af6a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800af6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800af72:	2200      	movs	r2, #0
 800af74:	4b92      	ldr	r3, [pc, #584]	; (800b1c0 <_dtoa_r+0x610>)
 800af76:	f7f5 fd8d 	bl	8000a94 <__aeabi_dcmplt>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	d07d      	beq.n	800b07a <_dtoa_r+0x4ca>
 800af7e:	f1b8 0f00 	cmp.w	r8, #0
 800af82:	d07a      	beq.n	800b07a <_dtoa_r+0x4ca>
 800af84:	9b04      	ldr	r3, [sp, #16]
 800af86:	2b00      	cmp	r3, #0
 800af88:	dd36      	ble.n	800aff8 <_dtoa_r+0x448>
 800af8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800af8e:	2200      	movs	r2, #0
 800af90:	4b8c      	ldr	r3, [pc, #560]	; (800b1c4 <_dtoa_r+0x614>)
 800af92:	f7f5 fb0d 	bl	80005b0 <__aeabi_dmul>
 800af96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af9a:	9e04      	ldr	r6, [sp, #16]
 800af9c:	f10a 37ff 	add.w	r7, sl, #4294967295
 800afa0:	3501      	adds	r5, #1
 800afa2:	4628      	mov	r0, r5
 800afa4:	f7f5 fa9a 	bl	80004dc <__aeabi_i2d>
 800afa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800afac:	f7f5 fb00 	bl	80005b0 <__aeabi_dmul>
 800afb0:	2200      	movs	r2, #0
 800afb2:	4b85      	ldr	r3, [pc, #532]	; (800b1c8 <_dtoa_r+0x618>)
 800afb4:	f7f5 f946 	bl	8000244 <__adddf3>
 800afb8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800afbc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800afc0:	950b      	str	r5, [sp, #44]	; 0x2c
 800afc2:	2e00      	cmp	r6, #0
 800afc4:	d15c      	bne.n	800b080 <_dtoa_r+0x4d0>
 800afc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afca:	2200      	movs	r2, #0
 800afcc:	4b7f      	ldr	r3, [pc, #508]	; (800b1cc <_dtoa_r+0x61c>)
 800afce:	f7f5 f937 	bl	8000240 <__aeabi_dsub>
 800afd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afd4:	462b      	mov	r3, r5
 800afd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afda:	f7f5 fd79 	bl	8000ad0 <__aeabi_dcmpgt>
 800afde:	2800      	cmp	r0, #0
 800afe0:	f040 8281 	bne.w	800b4e6 <_dtoa_r+0x936>
 800afe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afea:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800afee:	f7f5 fd51 	bl	8000a94 <__aeabi_dcmplt>
 800aff2:	2800      	cmp	r0, #0
 800aff4:	f040 8275 	bne.w	800b4e2 <_dtoa_r+0x932>
 800aff8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800affc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b000:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b002:	2b00      	cmp	r3, #0
 800b004:	f2c0 814b 	blt.w	800b29e <_dtoa_r+0x6ee>
 800b008:	f1ba 0f0e 	cmp.w	sl, #14
 800b00c:	f300 8147 	bgt.w	800b29e <_dtoa_r+0x6ee>
 800b010:	4b69      	ldr	r3, [pc, #420]	; (800b1b8 <_dtoa_r+0x608>)
 800b012:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b01e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b020:	2b00      	cmp	r3, #0
 800b022:	f280 80d7 	bge.w	800b1d4 <_dtoa_r+0x624>
 800b026:	f1b8 0f00 	cmp.w	r8, #0
 800b02a:	f300 80d3 	bgt.w	800b1d4 <_dtoa_r+0x624>
 800b02e:	f040 8257 	bne.w	800b4e0 <_dtoa_r+0x930>
 800b032:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b036:	2200      	movs	r2, #0
 800b038:	4b64      	ldr	r3, [pc, #400]	; (800b1cc <_dtoa_r+0x61c>)
 800b03a:	f7f5 fab9 	bl	80005b0 <__aeabi_dmul>
 800b03e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b042:	f7f5 fd3b 	bl	8000abc <__aeabi_dcmpge>
 800b046:	4646      	mov	r6, r8
 800b048:	4647      	mov	r7, r8
 800b04a:	2800      	cmp	r0, #0
 800b04c:	f040 822d 	bne.w	800b4aa <_dtoa_r+0x8fa>
 800b050:	9b06      	ldr	r3, [sp, #24]
 800b052:	9a06      	ldr	r2, [sp, #24]
 800b054:	1c5d      	adds	r5, r3, #1
 800b056:	2331      	movs	r3, #49	; 0x31
 800b058:	f10a 0a01 	add.w	sl, sl, #1
 800b05c:	7013      	strb	r3, [r2, #0]
 800b05e:	e228      	b.n	800b4b2 <_dtoa_r+0x902>
 800b060:	07f2      	lsls	r2, r6, #31
 800b062:	d505      	bpl.n	800b070 <_dtoa_r+0x4c0>
 800b064:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b068:	f7f5 faa2 	bl	80005b0 <__aeabi_dmul>
 800b06c:	2301      	movs	r3, #1
 800b06e:	3501      	adds	r5, #1
 800b070:	1076      	asrs	r6, r6, #1
 800b072:	3708      	adds	r7, #8
 800b074:	e76e      	b.n	800af54 <_dtoa_r+0x3a4>
 800b076:	2502      	movs	r5, #2
 800b078:	e771      	b.n	800af5e <_dtoa_r+0x3ae>
 800b07a:	4657      	mov	r7, sl
 800b07c:	4646      	mov	r6, r8
 800b07e:	e790      	b.n	800afa2 <_dtoa_r+0x3f2>
 800b080:	4b4d      	ldr	r3, [pc, #308]	; (800b1b8 <_dtoa_r+0x608>)
 800b082:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b086:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b08a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d048      	beq.n	800b122 <_dtoa_r+0x572>
 800b090:	4602      	mov	r2, r0
 800b092:	460b      	mov	r3, r1
 800b094:	2000      	movs	r0, #0
 800b096:	494e      	ldr	r1, [pc, #312]	; (800b1d0 <_dtoa_r+0x620>)
 800b098:	f7f5 fbb4 	bl	8000804 <__aeabi_ddiv>
 800b09c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b0a0:	f7f5 f8ce 	bl	8000240 <__aeabi_dsub>
 800b0a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b0a8:	9d06      	ldr	r5, [sp, #24]
 800b0aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0ae:	f7f5 fd2f 	bl	8000b10 <__aeabi_d2iz>
 800b0b2:	9011      	str	r0, [sp, #68]	; 0x44
 800b0b4:	f7f5 fa12 	bl	80004dc <__aeabi_i2d>
 800b0b8:	4602      	mov	r2, r0
 800b0ba:	460b      	mov	r3, r1
 800b0bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0c0:	f7f5 f8be 	bl	8000240 <__aeabi_dsub>
 800b0c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0ca:	3330      	adds	r3, #48	; 0x30
 800b0cc:	f805 3b01 	strb.w	r3, [r5], #1
 800b0d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b0d4:	f7f5 fcde 	bl	8000a94 <__aeabi_dcmplt>
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	d163      	bne.n	800b1a4 <_dtoa_r+0x5f4>
 800b0dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b0e0:	2000      	movs	r0, #0
 800b0e2:	4937      	ldr	r1, [pc, #220]	; (800b1c0 <_dtoa_r+0x610>)
 800b0e4:	f7f5 f8ac 	bl	8000240 <__aeabi_dsub>
 800b0e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b0ec:	f7f5 fcd2 	bl	8000a94 <__aeabi_dcmplt>
 800b0f0:	2800      	cmp	r0, #0
 800b0f2:	f040 80b5 	bne.w	800b260 <_dtoa_r+0x6b0>
 800b0f6:	9b06      	ldr	r3, [sp, #24]
 800b0f8:	1aeb      	subs	r3, r5, r3
 800b0fa:	429e      	cmp	r6, r3
 800b0fc:	f77f af7c 	ble.w	800aff8 <_dtoa_r+0x448>
 800b100:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b104:	2200      	movs	r2, #0
 800b106:	4b2f      	ldr	r3, [pc, #188]	; (800b1c4 <_dtoa_r+0x614>)
 800b108:	f7f5 fa52 	bl	80005b0 <__aeabi_dmul>
 800b10c:	2200      	movs	r2, #0
 800b10e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b112:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b116:	4b2b      	ldr	r3, [pc, #172]	; (800b1c4 <_dtoa_r+0x614>)
 800b118:	f7f5 fa4a 	bl	80005b0 <__aeabi_dmul>
 800b11c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b120:	e7c3      	b.n	800b0aa <_dtoa_r+0x4fa>
 800b122:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b126:	f7f5 fa43 	bl	80005b0 <__aeabi_dmul>
 800b12a:	9b06      	ldr	r3, [sp, #24]
 800b12c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b130:	199d      	adds	r5, r3, r6
 800b132:	461e      	mov	r6, r3
 800b134:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b138:	f7f5 fcea 	bl	8000b10 <__aeabi_d2iz>
 800b13c:	9011      	str	r0, [sp, #68]	; 0x44
 800b13e:	f7f5 f9cd 	bl	80004dc <__aeabi_i2d>
 800b142:	4602      	mov	r2, r0
 800b144:	460b      	mov	r3, r1
 800b146:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b14a:	f7f5 f879 	bl	8000240 <__aeabi_dsub>
 800b14e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b150:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b154:	3330      	adds	r3, #48	; 0x30
 800b156:	f806 3b01 	strb.w	r3, [r6], #1
 800b15a:	42ae      	cmp	r6, r5
 800b15c:	f04f 0200 	mov.w	r2, #0
 800b160:	d124      	bne.n	800b1ac <_dtoa_r+0x5fc>
 800b162:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b166:	4b1a      	ldr	r3, [pc, #104]	; (800b1d0 <_dtoa_r+0x620>)
 800b168:	f7f5 f86c 	bl	8000244 <__adddf3>
 800b16c:	4602      	mov	r2, r0
 800b16e:	460b      	mov	r3, r1
 800b170:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b174:	f7f5 fcac 	bl	8000ad0 <__aeabi_dcmpgt>
 800b178:	2800      	cmp	r0, #0
 800b17a:	d171      	bne.n	800b260 <_dtoa_r+0x6b0>
 800b17c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b180:	2000      	movs	r0, #0
 800b182:	4913      	ldr	r1, [pc, #76]	; (800b1d0 <_dtoa_r+0x620>)
 800b184:	f7f5 f85c 	bl	8000240 <__aeabi_dsub>
 800b188:	4602      	mov	r2, r0
 800b18a:	460b      	mov	r3, r1
 800b18c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b190:	f7f5 fc80 	bl	8000a94 <__aeabi_dcmplt>
 800b194:	2800      	cmp	r0, #0
 800b196:	f43f af2f 	beq.w	800aff8 <_dtoa_r+0x448>
 800b19a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b19e:	1e6a      	subs	r2, r5, #1
 800b1a0:	2b30      	cmp	r3, #48	; 0x30
 800b1a2:	d001      	beq.n	800b1a8 <_dtoa_r+0x5f8>
 800b1a4:	46ba      	mov	sl, r7
 800b1a6:	e04a      	b.n	800b23e <_dtoa_r+0x68e>
 800b1a8:	4615      	mov	r5, r2
 800b1aa:	e7f6      	b.n	800b19a <_dtoa_r+0x5ea>
 800b1ac:	4b05      	ldr	r3, [pc, #20]	; (800b1c4 <_dtoa_r+0x614>)
 800b1ae:	f7f5 f9ff 	bl	80005b0 <__aeabi_dmul>
 800b1b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1b6:	e7bd      	b.n	800b134 <_dtoa_r+0x584>
 800b1b8:	0800e760 	.word	0x0800e760
 800b1bc:	0800e738 	.word	0x0800e738
 800b1c0:	3ff00000 	.word	0x3ff00000
 800b1c4:	40240000 	.word	0x40240000
 800b1c8:	401c0000 	.word	0x401c0000
 800b1cc:	40140000 	.word	0x40140000
 800b1d0:	3fe00000 	.word	0x3fe00000
 800b1d4:	9d06      	ldr	r5, [sp, #24]
 800b1d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b1da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1de:	4630      	mov	r0, r6
 800b1e0:	4639      	mov	r1, r7
 800b1e2:	f7f5 fb0f 	bl	8000804 <__aeabi_ddiv>
 800b1e6:	f7f5 fc93 	bl	8000b10 <__aeabi_d2iz>
 800b1ea:	4681      	mov	r9, r0
 800b1ec:	f7f5 f976 	bl	80004dc <__aeabi_i2d>
 800b1f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1f4:	f7f5 f9dc 	bl	80005b0 <__aeabi_dmul>
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	4630      	mov	r0, r6
 800b1fe:	4639      	mov	r1, r7
 800b200:	f7f5 f81e 	bl	8000240 <__aeabi_dsub>
 800b204:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800b208:	f805 6b01 	strb.w	r6, [r5], #1
 800b20c:	9e06      	ldr	r6, [sp, #24]
 800b20e:	4602      	mov	r2, r0
 800b210:	1bae      	subs	r6, r5, r6
 800b212:	45b0      	cmp	r8, r6
 800b214:	460b      	mov	r3, r1
 800b216:	d135      	bne.n	800b284 <_dtoa_r+0x6d4>
 800b218:	f7f5 f814 	bl	8000244 <__adddf3>
 800b21c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b220:	4606      	mov	r6, r0
 800b222:	460f      	mov	r7, r1
 800b224:	f7f5 fc54 	bl	8000ad0 <__aeabi_dcmpgt>
 800b228:	b9c8      	cbnz	r0, 800b25e <_dtoa_r+0x6ae>
 800b22a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b22e:	4630      	mov	r0, r6
 800b230:	4639      	mov	r1, r7
 800b232:	f7f5 fc25 	bl	8000a80 <__aeabi_dcmpeq>
 800b236:	b110      	cbz	r0, 800b23e <_dtoa_r+0x68e>
 800b238:	f019 0f01 	tst.w	r9, #1
 800b23c:	d10f      	bne.n	800b25e <_dtoa_r+0x6ae>
 800b23e:	4659      	mov	r1, fp
 800b240:	4620      	mov	r0, r4
 800b242:	f000 ffd9 	bl	800c1f8 <_Bfree>
 800b246:	2300      	movs	r3, #0
 800b248:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b24a:	702b      	strb	r3, [r5, #0]
 800b24c:	f10a 0301 	add.w	r3, sl, #1
 800b250:	6013      	str	r3, [r2, #0]
 800b252:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b254:	2b00      	cmp	r3, #0
 800b256:	f43f acf3 	beq.w	800ac40 <_dtoa_r+0x90>
 800b25a:	601d      	str	r5, [r3, #0]
 800b25c:	e4f0      	b.n	800ac40 <_dtoa_r+0x90>
 800b25e:	4657      	mov	r7, sl
 800b260:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b264:	1e6b      	subs	r3, r5, #1
 800b266:	2a39      	cmp	r2, #57	; 0x39
 800b268:	d106      	bne.n	800b278 <_dtoa_r+0x6c8>
 800b26a:	9a06      	ldr	r2, [sp, #24]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d107      	bne.n	800b280 <_dtoa_r+0x6d0>
 800b270:	2330      	movs	r3, #48	; 0x30
 800b272:	7013      	strb	r3, [r2, #0]
 800b274:	4613      	mov	r3, r2
 800b276:	3701      	adds	r7, #1
 800b278:	781a      	ldrb	r2, [r3, #0]
 800b27a:	3201      	adds	r2, #1
 800b27c:	701a      	strb	r2, [r3, #0]
 800b27e:	e791      	b.n	800b1a4 <_dtoa_r+0x5f4>
 800b280:	461d      	mov	r5, r3
 800b282:	e7ed      	b.n	800b260 <_dtoa_r+0x6b0>
 800b284:	2200      	movs	r2, #0
 800b286:	4b99      	ldr	r3, [pc, #612]	; (800b4ec <_dtoa_r+0x93c>)
 800b288:	f7f5 f992 	bl	80005b0 <__aeabi_dmul>
 800b28c:	2200      	movs	r2, #0
 800b28e:	2300      	movs	r3, #0
 800b290:	4606      	mov	r6, r0
 800b292:	460f      	mov	r7, r1
 800b294:	f7f5 fbf4 	bl	8000a80 <__aeabi_dcmpeq>
 800b298:	2800      	cmp	r0, #0
 800b29a:	d09e      	beq.n	800b1da <_dtoa_r+0x62a>
 800b29c:	e7cf      	b.n	800b23e <_dtoa_r+0x68e>
 800b29e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2a0:	2a00      	cmp	r2, #0
 800b2a2:	f000 8088 	beq.w	800b3b6 <_dtoa_r+0x806>
 800b2a6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b2a8:	2a01      	cmp	r2, #1
 800b2aa:	dc6d      	bgt.n	800b388 <_dtoa_r+0x7d8>
 800b2ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b2ae:	2a00      	cmp	r2, #0
 800b2b0:	d066      	beq.n	800b380 <_dtoa_r+0x7d0>
 800b2b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b2b6:	464d      	mov	r5, r9
 800b2b8:	9e08      	ldr	r6, [sp, #32]
 800b2ba:	9a07      	ldr	r2, [sp, #28]
 800b2bc:	2101      	movs	r1, #1
 800b2be:	441a      	add	r2, r3
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	4499      	add	r9, r3
 800b2c4:	9207      	str	r2, [sp, #28]
 800b2c6:	f001 f875 	bl	800c3b4 <__i2b>
 800b2ca:	4607      	mov	r7, r0
 800b2cc:	2d00      	cmp	r5, #0
 800b2ce:	dd0b      	ble.n	800b2e8 <_dtoa_r+0x738>
 800b2d0:	9b07      	ldr	r3, [sp, #28]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	dd08      	ble.n	800b2e8 <_dtoa_r+0x738>
 800b2d6:	42ab      	cmp	r3, r5
 800b2d8:	bfa8      	it	ge
 800b2da:	462b      	movge	r3, r5
 800b2dc:	9a07      	ldr	r2, [sp, #28]
 800b2de:	eba9 0903 	sub.w	r9, r9, r3
 800b2e2:	1aed      	subs	r5, r5, r3
 800b2e4:	1ad3      	subs	r3, r2, r3
 800b2e6:	9307      	str	r3, [sp, #28]
 800b2e8:	9b08      	ldr	r3, [sp, #32]
 800b2ea:	b1eb      	cbz	r3, 800b328 <_dtoa_r+0x778>
 800b2ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d065      	beq.n	800b3be <_dtoa_r+0x80e>
 800b2f2:	b18e      	cbz	r6, 800b318 <_dtoa_r+0x768>
 800b2f4:	4639      	mov	r1, r7
 800b2f6:	4632      	mov	r2, r6
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	f001 f8f9 	bl	800c4f0 <__pow5mult>
 800b2fe:	465a      	mov	r2, fp
 800b300:	4601      	mov	r1, r0
 800b302:	4607      	mov	r7, r0
 800b304:	4620      	mov	r0, r4
 800b306:	f001 f85e 	bl	800c3c6 <__multiply>
 800b30a:	4659      	mov	r1, fp
 800b30c:	900a      	str	r0, [sp, #40]	; 0x28
 800b30e:	4620      	mov	r0, r4
 800b310:	f000 ff72 	bl	800c1f8 <_Bfree>
 800b314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b316:	469b      	mov	fp, r3
 800b318:	9b08      	ldr	r3, [sp, #32]
 800b31a:	1b9a      	subs	r2, r3, r6
 800b31c:	d004      	beq.n	800b328 <_dtoa_r+0x778>
 800b31e:	4659      	mov	r1, fp
 800b320:	4620      	mov	r0, r4
 800b322:	f001 f8e5 	bl	800c4f0 <__pow5mult>
 800b326:	4683      	mov	fp, r0
 800b328:	2101      	movs	r1, #1
 800b32a:	4620      	mov	r0, r4
 800b32c:	f001 f842 	bl	800c3b4 <__i2b>
 800b330:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b332:	4606      	mov	r6, r0
 800b334:	2b00      	cmp	r3, #0
 800b336:	f000 81c6 	beq.w	800b6c6 <_dtoa_r+0xb16>
 800b33a:	461a      	mov	r2, r3
 800b33c:	4601      	mov	r1, r0
 800b33e:	4620      	mov	r0, r4
 800b340:	f001 f8d6 	bl	800c4f0 <__pow5mult>
 800b344:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b346:	4606      	mov	r6, r0
 800b348:	2b01      	cmp	r3, #1
 800b34a:	dc3e      	bgt.n	800b3ca <_dtoa_r+0x81a>
 800b34c:	9b02      	ldr	r3, [sp, #8]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d137      	bne.n	800b3c2 <_dtoa_r+0x812>
 800b352:	9b03      	ldr	r3, [sp, #12]
 800b354:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d134      	bne.n	800b3c6 <_dtoa_r+0x816>
 800b35c:	9b03      	ldr	r3, [sp, #12]
 800b35e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b362:	0d1b      	lsrs	r3, r3, #20
 800b364:	051b      	lsls	r3, r3, #20
 800b366:	b12b      	cbz	r3, 800b374 <_dtoa_r+0x7c4>
 800b368:	9b07      	ldr	r3, [sp, #28]
 800b36a:	f109 0901 	add.w	r9, r9, #1
 800b36e:	3301      	adds	r3, #1
 800b370:	9307      	str	r3, [sp, #28]
 800b372:	2301      	movs	r3, #1
 800b374:	9308      	str	r3, [sp, #32]
 800b376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d128      	bne.n	800b3ce <_dtoa_r+0x81e>
 800b37c:	2001      	movs	r0, #1
 800b37e:	e02e      	b.n	800b3de <_dtoa_r+0x82e>
 800b380:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b382:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b386:	e796      	b.n	800b2b6 <_dtoa_r+0x706>
 800b388:	9b08      	ldr	r3, [sp, #32]
 800b38a:	f108 36ff 	add.w	r6, r8, #4294967295
 800b38e:	42b3      	cmp	r3, r6
 800b390:	bfb7      	itett	lt
 800b392:	9b08      	ldrlt	r3, [sp, #32]
 800b394:	1b9e      	subge	r6, r3, r6
 800b396:	1af2      	sublt	r2, r6, r3
 800b398:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800b39a:	bfbf      	itttt	lt
 800b39c:	9608      	strlt	r6, [sp, #32]
 800b39e:	189b      	addlt	r3, r3, r2
 800b3a0:	930c      	strlt	r3, [sp, #48]	; 0x30
 800b3a2:	2600      	movlt	r6, #0
 800b3a4:	f1b8 0f00 	cmp.w	r8, #0
 800b3a8:	bfb9      	ittee	lt
 800b3aa:	eba9 0508 	sublt.w	r5, r9, r8
 800b3ae:	2300      	movlt	r3, #0
 800b3b0:	464d      	movge	r5, r9
 800b3b2:	4643      	movge	r3, r8
 800b3b4:	e781      	b.n	800b2ba <_dtoa_r+0x70a>
 800b3b6:	9e08      	ldr	r6, [sp, #32]
 800b3b8:	464d      	mov	r5, r9
 800b3ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b3bc:	e786      	b.n	800b2cc <_dtoa_r+0x71c>
 800b3be:	9a08      	ldr	r2, [sp, #32]
 800b3c0:	e7ad      	b.n	800b31e <_dtoa_r+0x76e>
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	e7d6      	b.n	800b374 <_dtoa_r+0x7c4>
 800b3c6:	9b02      	ldr	r3, [sp, #8]
 800b3c8:	e7d4      	b.n	800b374 <_dtoa_r+0x7c4>
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	9308      	str	r3, [sp, #32]
 800b3ce:	6933      	ldr	r3, [r6, #16]
 800b3d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b3d4:	6918      	ldr	r0, [r3, #16]
 800b3d6:	f000 ff9f 	bl	800c318 <__hi0bits>
 800b3da:	f1c0 0020 	rsb	r0, r0, #32
 800b3de:	9b07      	ldr	r3, [sp, #28]
 800b3e0:	4418      	add	r0, r3
 800b3e2:	f010 001f 	ands.w	r0, r0, #31
 800b3e6:	d047      	beq.n	800b478 <_dtoa_r+0x8c8>
 800b3e8:	f1c0 0320 	rsb	r3, r0, #32
 800b3ec:	2b04      	cmp	r3, #4
 800b3ee:	dd3b      	ble.n	800b468 <_dtoa_r+0x8b8>
 800b3f0:	9b07      	ldr	r3, [sp, #28]
 800b3f2:	f1c0 001c 	rsb	r0, r0, #28
 800b3f6:	4481      	add	r9, r0
 800b3f8:	4405      	add	r5, r0
 800b3fa:	4403      	add	r3, r0
 800b3fc:	9307      	str	r3, [sp, #28]
 800b3fe:	f1b9 0f00 	cmp.w	r9, #0
 800b402:	dd05      	ble.n	800b410 <_dtoa_r+0x860>
 800b404:	4659      	mov	r1, fp
 800b406:	464a      	mov	r2, r9
 800b408:	4620      	mov	r0, r4
 800b40a:	f001 f8bf 	bl	800c58c <__lshift>
 800b40e:	4683      	mov	fp, r0
 800b410:	9b07      	ldr	r3, [sp, #28]
 800b412:	2b00      	cmp	r3, #0
 800b414:	dd05      	ble.n	800b422 <_dtoa_r+0x872>
 800b416:	4631      	mov	r1, r6
 800b418:	461a      	mov	r2, r3
 800b41a:	4620      	mov	r0, r4
 800b41c:	f001 f8b6 	bl	800c58c <__lshift>
 800b420:	4606      	mov	r6, r0
 800b422:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b424:	b353      	cbz	r3, 800b47c <_dtoa_r+0x8cc>
 800b426:	4631      	mov	r1, r6
 800b428:	4658      	mov	r0, fp
 800b42a:	f001 f903 	bl	800c634 <__mcmp>
 800b42e:	2800      	cmp	r0, #0
 800b430:	da24      	bge.n	800b47c <_dtoa_r+0x8cc>
 800b432:	2300      	movs	r3, #0
 800b434:	4659      	mov	r1, fp
 800b436:	220a      	movs	r2, #10
 800b438:	4620      	mov	r0, r4
 800b43a:	f000 fef4 	bl	800c226 <__multadd>
 800b43e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b440:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b444:	4683      	mov	fp, r0
 800b446:	2b00      	cmp	r3, #0
 800b448:	f000 8144 	beq.w	800b6d4 <_dtoa_r+0xb24>
 800b44c:	2300      	movs	r3, #0
 800b44e:	4639      	mov	r1, r7
 800b450:	220a      	movs	r2, #10
 800b452:	4620      	mov	r0, r4
 800b454:	f000 fee7 	bl	800c226 <__multadd>
 800b458:	9b04      	ldr	r3, [sp, #16]
 800b45a:	4607      	mov	r7, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	dc4d      	bgt.n	800b4fc <_dtoa_r+0x94c>
 800b460:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b462:	2b02      	cmp	r3, #2
 800b464:	dd4a      	ble.n	800b4fc <_dtoa_r+0x94c>
 800b466:	e011      	b.n	800b48c <_dtoa_r+0x8dc>
 800b468:	d0c9      	beq.n	800b3fe <_dtoa_r+0x84e>
 800b46a:	9a07      	ldr	r2, [sp, #28]
 800b46c:	331c      	adds	r3, #28
 800b46e:	441a      	add	r2, r3
 800b470:	4499      	add	r9, r3
 800b472:	441d      	add	r5, r3
 800b474:	4613      	mov	r3, r2
 800b476:	e7c1      	b.n	800b3fc <_dtoa_r+0x84c>
 800b478:	4603      	mov	r3, r0
 800b47a:	e7f6      	b.n	800b46a <_dtoa_r+0x8ba>
 800b47c:	f1b8 0f00 	cmp.w	r8, #0
 800b480:	dc36      	bgt.n	800b4f0 <_dtoa_r+0x940>
 800b482:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b484:	2b02      	cmp	r3, #2
 800b486:	dd33      	ble.n	800b4f0 <_dtoa_r+0x940>
 800b488:	f8cd 8010 	str.w	r8, [sp, #16]
 800b48c:	9b04      	ldr	r3, [sp, #16]
 800b48e:	b963      	cbnz	r3, 800b4aa <_dtoa_r+0x8fa>
 800b490:	4631      	mov	r1, r6
 800b492:	2205      	movs	r2, #5
 800b494:	4620      	mov	r0, r4
 800b496:	f000 fec6 	bl	800c226 <__multadd>
 800b49a:	4601      	mov	r1, r0
 800b49c:	4606      	mov	r6, r0
 800b49e:	4658      	mov	r0, fp
 800b4a0:	f001 f8c8 	bl	800c634 <__mcmp>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	f73f add3 	bgt.w	800b050 <_dtoa_r+0x4a0>
 800b4aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b4ac:	9d06      	ldr	r5, [sp, #24]
 800b4ae:	ea6f 0a03 	mvn.w	sl, r3
 800b4b2:	f04f 0900 	mov.w	r9, #0
 800b4b6:	4631      	mov	r1, r6
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f000 fe9d 	bl	800c1f8 <_Bfree>
 800b4be:	2f00      	cmp	r7, #0
 800b4c0:	f43f aebd 	beq.w	800b23e <_dtoa_r+0x68e>
 800b4c4:	f1b9 0f00 	cmp.w	r9, #0
 800b4c8:	d005      	beq.n	800b4d6 <_dtoa_r+0x926>
 800b4ca:	45b9      	cmp	r9, r7
 800b4cc:	d003      	beq.n	800b4d6 <_dtoa_r+0x926>
 800b4ce:	4649      	mov	r1, r9
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f000 fe91 	bl	800c1f8 <_Bfree>
 800b4d6:	4639      	mov	r1, r7
 800b4d8:	4620      	mov	r0, r4
 800b4da:	f000 fe8d 	bl	800c1f8 <_Bfree>
 800b4de:	e6ae      	b.n	800b23e <_dtoa_r+0x68e>
 800b4e0:	2600      	movs	r6, #0
 800b4e2:	4637      	mov	r7, r6
 800b4e4:	e7e1      	b.n	800b4aa <_dtoa_r+0x8fa>
 800b4e6:	46ba      	mov	sl, r7
 800b4e8:	4637      	mov	r7, r6
 800b4ea:	e5b1      	b.n	800b050 <_dtoa_r+0x4a0>
 800b4ec:	40240000 	.word	0x40240000
 800b4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4f2:	f8cd 8010 	str.w	r8, [sp, #16]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	f000 80f3 	beq.w	800b6e2 <_dtoa_r+0xb32>
 800b4fc:	2d00      	cmp	r5, #0
 800b4fe:	dd05      	ble.n	800b50c <_dtoa_r+0x95c>
 800b500:	4639      	mov	r1, r7
 800b502:	462a      	mov	r2, r5
 800b504:	4620      	mov	r0, r4
 800b506:	f001 f841 	bl	800c58c <__lshift>
 800b50a:	4607      	mov	r7, r0
 800b50c:	9b08      	ldr	r3, [sp, #32]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d04c      	beq.n	800b5ac <_dtoa_r+0x9fc>
 800b512:	6879      	ldr	r1, [r7, #4]
 800b514:	4620      	mov	r0, r4
 800b516:	f000 fe3b 	bl	800c190 <_Balloc>
 800b51a:	4605      	mov	r5, r0
 800b51c:	693a      	ldr	r2, [r7, #16]
 800b51e:	f107 010c 	add.w	r1, r7, #12
 800b522:	3202      	adds	r2, #2
 800b524:	0092      	lsls	r2, r2, #2
 800b526:	300c      	adds	r0, #12
 800b528:	f7fd fb6d 	bl	8008c06 <memcpy>
 800b52c:	2201      	movs	r2, #1
 800b52e:	4629      	mov	r1, r5
 800b530:	4620      	mov	r0, r4
 800b532:	f001 f82b 	bl	800c58c <__lshift>
 800b536:	46b9      	mov	r9, r7
 800b538:	4607      	mov	r7, r0
 800b53a:	9b06      	ldr	r3, [sp, #24]
 800b53c:	9307      	str	r3, [sp, #28]
 800b53e:	9b02      	ldr	r3, [sp, #8]
 800b540:	f003 0301 	and.w	r3, r3, #1
 800b544:	9308      	str	r3, [sp, #32]
 800b546:	4631      	mov	r1, r6
 800b548:	4658      	mov	r0, fp
 800b54a:	f7ff faa3 	bl	800aa94 <quorem>
 800b54e:	4649      	mov	r1, r9
 800b550:	4605      	mov	r5, r0
 800b552:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b556:	4658      	mov	r0, fp
 800b558:	f001 f86c 	bl	800c634 <__mcmp>
 800b55c:	463a      	mov	r2, r7
 800b55e:	9002      	str	r0, [sp, #8]
 800b560:	4631      	mov	r1, r6
 800b562:	4620      	mov	r0, r4
 800b564:	f001 f880 	bl	800c668 <__mdiff>
 800b568:	68c3      	ldr	r3, [r0, #12]
 800b56a:	4602      	mov	r2, r0
 800b56c:	bb03      	cbnz	r3, 800b5b0 <_dtoa_r+0xa00>
 800b56e:	4601      	mov	r1, r0
 800b570:	9009      	str	r0, [sp, #36]	; 0x24
 800b572:	4658      	mov	r0, fp
 800b574:	f001 f85e 	bl	800c634 <__mcmp>
 800b578:	4603      	mov	r3, r0
 800b57a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b57c:	4611      	mov	r1, r2
 800b57e:	4620      	mov	r0, r4
 800b580:	9309      	str	r3, [sp, #36]	; 0x24
 800b582:	f000 fe39 	bl	800c1f8 <_Bfree>
 800b586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b588:	b9a3      	cbnz	r3, 800b5b4 <_dtoa_r+0xa04>
 800b58a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b58c:	b992      	cbnz	r2, 800b5b4 <_dtoa_r+0xa04>
 800b58e:	9a08      	ldr	r2, [sp, #32]
 800b590:	b982      	cbnz	r2, 800b5b4 <_dtoa_r+0xa04>
 800b592:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b596:	d029      	beq.n	800b5ec <_dtoa_r+0xa3c>
 800b598:	9b02      	ldr	r3, [sp, #8]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	dd01      	ble.n	800b5a2 <_dtoa_r+0x9f2>
 800b59e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b5a2:	9b07      	ldr	r3, [sp, #28]
 800b5a4:	1c5d      	adds	r5, r3, #1
 800b5a6:	f883 8000 	strb.w	r8, [r3]
 800b5aa:	e784      	b.n	800b4b6 <_dtoa_r+0x906>
 800b5ac:	4638      	mov	r0, r7
 800b5ae:	e7c2      	b.n	800b536 <_dtoa_r+0x986>
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	e7e3      	b.n	800b57c <_dtoa_r+0x9cc>
 800b5b4:	9a02      	ldr	r2, [sp, #8]
 800b5b6:	2a00      	cmp	r2, #0
 800b5b8:	db04      	blt.n	800b5c4 <_dtoa_r+0xa14>
 800b5ba:	d123      	bne.n	800b604 <_dtoa_r+0xa54>
 800b5bc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b5be:	bb0a      	cbnz	r2, 800b604 <_dtoa_r+0xa54>
 800b5c0:	9a08      	ldr	r2, [sp, #32]
 800b5c2:	b9fa      	cbnz	r2, 800b604 <_dtoa_r+0xa54>
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	ddec      	ble.n	800b5a2 <_dtoa_r+0x9f2>
 800b5c8:	4659      	mov	r1, fp
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	f000 ffdd 	bl	800c58c <__lshift>
 800b5d2:	4631      	mov	r1, r6
 800b5d4:	4683      	mov	fp, r0
 800b5d6:	f001 f82d 	bl	800c634 <__mcmp>
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	dc03      	bgt.n	800b5e6 <_dtoa_r+0xa36>
 800b5de:	d1e0      	bne.n	800b5a2 <_dtoa_r+0x9f2>
 800b5e0:	f018 0f01 	tst.w	r8, #1
 800b5e4:	d0dd      	beq.n	800b5a2 <_dtoa_r+0x9f2>
 800b5e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b5ea:	d1d8      	bne.n	800b59e <_dtoa_r+0x9ee>
 800b5ec:	9b07      	ldr	r3, [sp, #28]
 800b5ee:	9a07      	ldr	r2, [sp, #28]
 800b5f0:	1c5d      	adds	r5, r3, #1
 800b5f2:	2339      	movs	r3, #57	; 0x39
 800b5f4:	7013      	strb	r3, [r2, #0]
 800b5f6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b5fa:	1e6a      	subs	r2, r5, #1
 800b5fc:	2b39      	cmp	r3, #57	; 0x39
 800b5fe:	d04d      	beq.n	800b69c <_dtoa_r+0xaec>
 800b600:	3301      	adds	r3, #1
 800b602:	e052      	b.n	800b6aa <_dtoa_r+0xafa>
 800b604:	9a07      	ldr	r2, [sp, #28]
 800b606:	2b00      	cmp	r3, #0
 800b608:	f102 0501 	add.w	r5, r2, #1
 800b60c:	dd06      	ble.n	800b61c <_dtoa_r+0xa6c>
 800b60e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b612:	d0eb      	beq.n	800b5ec <_dtoa_r+0xa3c>
 800b614:	f108 0801 	add.w	r8, r8, #1
 800b618:	9b07      	ldr	r3, [sp, #28]
 800b61a:	e7c4      	b.n	800b5a6 <_dtoa_r+0x9f6>
 800b61c:	9b06      	ldr	r3, [sp, #24]
 800b61e:	9a04      	ldr	r2, [sp, #16]
 800b620:	1aeb      	subs	r3, r5, r3
 800b622:	4293      	cmp	r3, r2
 800b624:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b628:	d021      	beq.n	800b66e <_dtoa_r+0xabe>
 800b62a:	4659      	mov	r1, fp
 800b62c:	2300      	movs	r3, #0
 800b62e:	220a      	movs	r2, #10
 800b630:	4620      	mov	r0, r4
 800b632:	f000 fdf8 	bl	800c226 <__multadd>
 800b636:	45b9      	cmp	r9, r7
 800b638:	4683      	mov	fp, r0
 800b63a:	f04f 0300 	mov.w	r3, #0
 800b63e:	f04f 020a 	mov.w	r2, #10
 800b642:	4649      	mov	r1, r9
 800b644:	4620      	mov	r0, r4
 800b646:	d105      	bne.n	800b654 <_dtoa_r+0xaa4>
 800b648:	f000 fded 	bl	800c226 <__multadd>
 800b64c:	4681      	mov	r9, r0
 800b64e:	4607      	mov	r7, r0
 800b650:	9507      	str	r5, [sp, #28]
 800b652:	e778      	b.n	800b546 <_dtoa_r+0x996>
 800b654:	f000 fde7 	bl	800c226 <__multadd>
 800b658:	4639      	mov	r1, r7
 800b65a:	4681      	mov	r9, r0
 800b65c:	2300      	movs	r3, #0
 800b65e:	220a      	movs	r2, #10
 800b660:	4620      	mov	r0, r4
 800b662:	f000 fde0 	bl	800c226 <__multadd>
 800b666:	4607      	mov	r7, r0
 800b668:	e7f2      	b.n	800b650 <_dtoa_r+0xaa0>
 800b66a:	f04f 0900 	mov.w	r9, #0
 800b66e:	4659      	mov	r1, fp
 800b670:	2201      	movs	r2, #1
 800b672:	4620      	mov	r0, r4
 800b674:	f000 ff8a 	bl	800c58c <__lshift>
 800b678:	4631      	mov	r1, r6
 800b67a:	4683      	mov	fp, r0
 800b67c:	f000 ffda 	bl	800c634 <__mcmp>
 800b680:	2800      	cmp	r0, #0
 800b682:	dcb8      	bgt.n	800b5f6 <_dtoa_r+0xa46>
 800b684:	d102      	bne.n	800b68c <_dtoa_r+0xadc>
 800b686:	f018 0f01 	tst.w	r8, #1
 800b68a:	d1b4      	bne.n	800b5f6 <_dtoa_r+0xa46>
 800b68c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b690:	1e6a      	subs	r2, r5, #1
 800b692:	2b30      	cmp	r3, #48	; 0x30
 800b694:	f47f af0f 	bne.w	800b4b6 <_dtoa_r+0x906>
 800b698:	4615      	mov	r5, r2
 800b69a:	e7f7      	b.n	800b68c <_dtoa_r+0xadc>
 800b69c:	9b06      	ldr	r3, [sp, #24]
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d105      	bne.n	800b6ae <_dtoa_r+0xafe>
 800b6a2:	2331      	movs	r3, #49	; 0x31
 800b6a4:	9a06      	ldr	r2, [sp, #24]
 800b6a6:	f10a 0a01 	add.w	sl, sl, #1
 800b6aa:	7013      	strb	r3, [r2, #0]
 800b6ac:	e703      	b.n	800b4b6 <_dtoa_r+0x906>
 800b6ae:	4615      	mov	r5, r2
 800b6b0:	e7a1      	b.n	800b5f6 <_dtoa_r+0xa46>
 800b6b2:	4b17      	ldr	r3, [pc, #92]	; (800b710 <_dtoa_r+0xb60>)
 800b6b4:	f7ff bae1 	b.w	800ac7a <_dtoa_r+0xca>
 800b6b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	f47f aabb 	bne.w	800ac36 <_dtoa_r+0x86>
 800b6c0:	4b14      	ldr	r3, [pc, #80]	; (800b714 <_dtoa_r+0xb64>)
 800b6c2:	f7ff bada 	b.w	800ac7a <_dtoa_r+0xca>
 800b6c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	f77f ae3f 	ble.w	800b34c <_dtoa_r+0x79c>
 800b6ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6d0:	9308      	str	r3, [sp, #32]
 800b6d2:	e653      	b.n	800b37c <_dtoa_r+0x7cc>
 800b6d4:	9b04      	ldr	r3, [sp, #16]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	dc03      	bgt.n	800b6e2 <_dtoa_r+0xb32>
 800b6da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b6dc:	2b02      	cmp	r3, #2
 800b6de:	f73f aed5 	bgt.w	800b48c <_dtoa_r+0x8dc>
 800b6e2:	9d06      	ldr	r5, [sp, #24]
 800b6e4:	4631      	mov	r1, r6
 800b6e6:	4658      	mov	r0, fp
 800b6e8:	f7ff f9d4 	bl	800aa94 <quorem>
 800b6ec:	9b06      	ldr	r3, [sp, #24]
 800b6ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b6f2:	f805 8b01 	strb.w	r8, [r5], #1
 800b6f6:	9a04      	ldr	r2, [sp, #16]
 800b6f8:	1aeb      	subs	r3, r5, r3
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	ddb5      	ble.n	800b66a <_dtoa_r+0xaba>
 800b6fe:	4659      	mov	r1, fp
 800b700:	2300      	movs	r3, #0
 800b702:	220a      	movs	r2, #10
 800b704:	4620      	mov	r0, r4
 800b706:	f000 fd8e 	bl	800c226 <__multadd>
 800b70a:	4683      	mov	fp, r0
 800b70c:	e7ea      	b.n	800b6e4 <_dtoa_r+0xb34>
 800b70e:	bf00      	nop
 800b710:	0800db6c 	.word	0x0800db6c
 800b714:	0800e6c0 	.word	0x0800e6c0

0800b718 <__sflush_r>:
 800b718:	898a      	ldrh	r2, [r1, #12]
 800b71a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b71e:	4605      	mov	r5, r0
 800b720:	0710      	lsls	r0, r2, #28
 800b722:	460c      	mov	r4, r1
 800b724:	d458      	bmi.n	800b7d8 <__sflush_r+0xc0>
 800b726:	684b      	ldr	r3, [r1, #4]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	dc05      	bgt.n	800b738 <__sflush_r+0x20>
 800b72c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b72e:	2b00      	cmp	r3, #0
 800b730:	dc02      	bgt.n	800b738 <__sflush_r+0x20>
 800b732:	2000      	movs	r0, #0
 800b734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b738:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b73a:	2e00      	cmp	r6, #0
 800b73c:	d0f9      	beq.n	800b732 <__sflush_r+0x1a>
 800b73e:	2300      	movs	r3, #0
 800b740:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b744:	682f      	ldr	r7, [r5, #0]
 800b746:	6a21      	ldr	r1, [r4, #32]
 800b748:	602b      	str	r3, [r5, #0]
 800b74a:	d032      	beq.n	800b7b2 <__sflush_r+0x9a>
 800b74c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b74e:	89a3      	ldrh	r3, [r4, #12]
 800b750:	075a      	lsls	r2, r3, #29
 800b752:	d505      	bpl.n	800b760 <__sflush_r+0x48>
 800b754:	6863      	ldr	r3, [r4, #4]
 800b756:	1ac0      	subs	r0, r0, r3
 800b758:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b75a:	b10b      	cbz	r3, 800b760 <__sflush_r+0x48>
 800b75c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b75e:	1ac0      	subs	r0, r0, r3
 800b760:	2300      	movs	r3, #0
 800b762:	4602      	mov	r2, r0
 800b764:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b766:	6a21      	ldr	r1, [r4, #32]
 800b768:	4628      	mov	r0, r5
 800b76a:	47b0      	blx	r6
 800b76c:	1c43      	adds	r3, r0, #1
 800b76e:	89a3      	ldrh	r3, [r4, #12]
 800b770:	d106      	bne.n	800b780 <__sflush_r+0x68>
 800b772:	6829      	ldr	r1, [r5, #0]
 800b774:	291d      	cmp	r1, #29
 800b776:	d848      	bhi.n	800b80a <__sflush_r+0xf2>
 800b778:	4a29      	ldr	r2, [pc, #164]	; (800b820 <__sflush_r+0x108>)
 800b77a:	40ca      	lsrs	r2, r1
 800b77c:	07d6      	lsls	r6, r2, #31
 800b77e:	d544      	bpl.n	800b80a <__sflush_r+0xf2>
 800b780:	2200      	movs	r2, #0
 800b782:	6062      	str	r2, [r4, #4]
 800b784:	6922      	ldr	r2, [r4, #16]
 800b786:	04d9      	lsls	r1, r3, #19
 800b788:	6022      	str	r2, [r4, #0]
 800b78a:	d504      	bpl.n	800b796 <__sflush_r+0x7e>
 800b78c:	1c42      	adds	r2, r0, #1
 800b78e:	d101      	bne.n	800b794 <__sflush_r+0x7c>
 800b790:	682b      	ldr	r3, [r5, #0]
 800b792:	b903      	cbnz	r3, 800b796 <__sflush_r+0x7e>
 800b794:	6560      	str	r0, [r4, #84]	; 0x54
 800b796:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b798:	602f      	str	r7, [r5, #0]
 800b79a:	2900      	cmp	r1, #0
 800b79c:	d0c9      	beq.n	800b732 <__sflush_r+0x1a>
 800b79e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7a2:	4299      	cmp	r1, r3
 800b7a4:	d002      	beq.n	800b7ac <__sflush_r+0x94>
 800b7a6:	4628      	mov	r0, r5
 800b7a8:	f7fd fa4e 	bl	8008c48 <_free_r>
 800b7ac:	2000      	movs	r0, #0
 800b7ae:	6360      	str	r0, [r4, #52]	; 0x34
 800b7b0:	e7c0      	b.n	800b734 <__sflush_r+0x1c>
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	47b0      	blx	r6
 800b7b8:	1c41      	adds	r1, r0, #1
 800b7ba:	d1c8      	bne.n	800b74e <__sflush_r+0x36>
 800b7bc:	682b      	ldr	r3, [r5, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d0c5      	beq.n	800b74e <__sflush_r+0x36>
 800b7c2:	2b1d      	cmp	r3, #29
 800b7c4:	d001      	beq.n	800b7ca <__sflush_r+0xb2>
 800b7c6:	2b16      	cmp	r3, #22
 800b7c8:	d101      	bne.n	800b7ce <__sflush_r+0xb6>
 800b7ca:	602f      	str	r7, [r5, #0]
 800b7cc:	e7b1      	b.n	800b732 <__sflush_r+0x1a>
 800b7ce:	89a3      	ldrh	r3, [r4, #12]
 800b7d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7d4:	81a3      	strh	r3, [r4, #12]
 800b7d6:	e7ad      	b.n	800b734 <__sflush_r+0x1c>
 800b7d8:	690f      	ldr	r7, [r1, #16]
 800b7da:	2f00      	cmp	r7, #0
 800b7dc:	d0a9      	beq.n	800b732 <__sflush_r+0x1a>
 800b7de:	0793      	lsls	r3, r2, #30
 800b7e0:	bf18      	it	ne
 800b7e2:	2300      	movne	r3, #0
 800b7e4:	680e      	ldr	r6, [r1, #0]
 800b7e6:	bf08      	it	eq
 800b7e8:	694b      	ldreq	r3, [r1, #20]
 800b7ea:	eba6 0807 	sub.w	r8, r6, r7
 800b7ee:	600f      	str	r7, [r1, #0]
 800b7f0:	608b      	str	r3, [r1, #8]
 800b7f2:	f1b8 0f00 	cmp.w	r8, #0
 800b7f6:	dd9c      	ble.n	800b732 <__sflush_r+0x1a>
 800b7f8:	4643      	mov	r3, r8
 800b7fa:	463a      	mov	r2, r7
 800b7fc:	6a21      	ldr	r1, [r4, #32]
 800b7fe:	4628      	mov	r0, r5
 800b800:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b802:	47b0      	blx	r6
 800b804:	2800      	cmp	r0, #0
 800b806:	dc06      	bgt.n	800b816 <__sflush_r+0xfe>
 800b808:	89a3      	ldrh	r3, [r4, #12]
 800b80a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b80e:	81a3      	strh	r3, [r4, #12]
 800b810:	f04f 30ff 	mov.w	r0, #4294967295
 800b814:	e78e      	b.n	800b734 <__sflush_r+0x1c>
 800b816:	4407      	add	r7, r0
 800b818:	eba8 0800 	sub.w	r8, r8, r0
 800b81c:	e7e9      	b.n	800b7f2 <__sflush_r+0xda>
 800b81e:	bf00      	nop
 800b820:	20400001 	.word	0x20400001

0800b824 <_fflush_r>:
 800b824:	b538      	push	{r3, r4, r5, lr}
 800b826:	690b      	ldr	r3, [r1, #16]
 800b828:	4605      	mov	r5, r0
 800b82a:	460c      	mov	r4, r1
 800b82c:	b1db      	cbz	r3, 800b866 <_fflush_r+0x42>
 800b82e:	b118      	cbz	r0, 800b838 <_fflush_r+0x14>
 800b830:	6983      	ldr	r3, [r0, #24]
 800b832:	b90b      	cbnz	r3, 800b838 <_fflush_r+0x14>
 800b834:	f000 f860 	bl	800b8f8 <__sinit>
 800b838:	4b0c      	ldr	r3, [pc, #48]	; (800b86c <_fflush_r+0x48>)
 800b83a:	429c      	cmp	r4, r3
 800b83c:	d109      	bne.n	800b852 <_fflush_r+0x2e>
 800b83e:	686c      	ldr	r4, [r5, #4]
 800b840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b844:	b17b      	cbz	r3, 800b866 <_fflush_r+0x42>
 800b846:	4621      	mov	r1, r4
 800b848:	4628      	mov	r0, r5
 800b84a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b84e:	f7ff bf63 	b.w	800b718 <__sflush_r>
 800b852:	4b07      	ldr	r3, [pc, #28]	; (800b870 <_fflush_r+0x4c>)
 800b854:	429c      	cmp	r4, r3
 800b856:	d101      	bne.n	800b85c <_fflush_r+0x38>
 800b858:	68ac      	ldr	r4, [r5, #8]
 800b85a:	e7f1      	b.n	800b840 <_fflush_r+0x1c>
 800b85c:	4b05      	ldr	r3, [pc, #20]	; (800b874 <_fflush_r+0x50>)
 800b85e:	429c      	cmp	r4, r3
 800b860:	bf08      	it	eq
 800b862:	68ec      	ldreq	r4, [r5, #12]
 800b864:	e7ec      	b.n	800b840 <_fflush_r+0x1c>
 800b866:	2000      	movs	r0, #0
 800b868:	bd38      	pop	{r3, r4, r5, pc}
 800b86a:	bf00      	nop
 800b86c:	0800e6f0 	.word	0x0800e6f0
 800b870:	0800e710 	.word	0x0800e710
 800b874:	0800e6d0 	.word	0x0800e6d0

0800b878 <std>:
 800b878:	2300      	movs	r3, #0
 800b87a:	b510      	push	{r4, lr}
 800b87c:	4604      	mov	r4, r0
 800b87e:	e9c0 3300 	strd	r3, r3, [r0]
 800b882:	6083      	str	r3, [r0, #8]
 800b884:	8181      	strh	r1, [r0, #12]
 800b886:	6643      	str	r3, [r0, #100]	; 0x64
 800b888:	81c2      	strh	r2, [r0, #14]
 800b88a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b88e:	6183      	str	r3, [r0, #24]
 800b890:	4619      	mov	r1, r3
 800b892:	2208      	movs	r2, #8
 800b894:	305c      	adds	r0, #92	; 0x5c
 800b896:	f7fd f9c1 	bl	8008c1c <memset>
 800b89a:	4b05      	ldr	r3, [pc, #20]	; (800b8b0 <std+0x38>)
 800b89c:	6224      	str	r4, [r4, #32]
 800b89e:	6263      	str	r3, [r4, #36]	; 0x24
 800b8a0:	4b04      	ldr	r3, [pc, #16]	; (800b8b4 <std+0x3c>)
 800b8a2:	62a3      	str	r3, [r4, #40]	; 0x28
 800b8a4:	4b04      	ldr	r3, [pc, #16]	; (800b8b8 <std+0x40>)
 800b8a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b8a8:	4b04      	ldr	r3, [pc, #16]	; (800b8bc <std+0x44>)
 800b8aa:	6323      	str	r3, [r4, #48]	; 0x30
 800b8ac:	bd10      	pop	{r4, pc}
 800b8ae:	bf00      	nop
 800b8b0:	0800cea1 	.word	0x0800cea1
 800b8b4:	0800cec3 	.word	0x0800cec3
 800b8b8:	0800cefb 	.word	0x0800cefb
 800b8bc:	0800cf1f 	.word	0x0800cf1f

0800b8c0 <_cleanup_r>:
 800b8c0:	4901      	ldr	r1, [pc, #4]	; (800b8c8 <_cleanup_r+0x8>)
 800b8c2:	f000 b885 	b.w	800b9d0 <_fwalk_reent>
 800b8c6:	bf00      	nop
 800b8c8:	0800b825 	.word	0x0800b825

0800b8cc <__sfmoreglue>:
 800b8cc:	b570      	push	{r4, r5, r6, lr}
 800b8ce:	2568      	movs	r5, #104	; 0x68
 800b8d0:	1e4a      	subs	r2, r1, #1
 800b8d2:	4355      	muls	r5, r2
 800b8d4:	460e      	mov	r6, r1
 800b8d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b8da:	f7fd fa01 	bl	8008ce0 <_malloc_r>
 800b8de:	4604      	mov	r4, r0
 800b8e0:	b140      	cbz	r0, 800b8f4 <__sfmoreglue+0x28>
 800b8e2:	2100      	movs	r1, #0
 800b8e4:	e9c0 1600 	strd	r1, r6, [r0]
 800b8e8:	300c      	adds	r0, #12
 800b8ea:	60a0      	str	r0, [r4, #8]
 800b8ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b8f0:	f7fd f994 	bl	8008c1c <memset>
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	bd70      	pop	{r4, r5, r6, pc}

0800b8f8 <__sinit>:
 800b8f8:	6983      	ldr	r3, [r0, #24]
 800b8fa:	b510      	push	{r4, lr}
 800b8fc:	4604      	mov	r4, r0
 800b8fe:	bb33      	cbnz	r3, 800b94e <__sinit+0x56>
 800b900:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b904:	6503      	str	r3, [r0, #80]	; 0x50
 800b906:	4b12      	ldr	r3, [pc, #72]	; (800b950 <__sinit+0x58>)
 800b908:	4a12      	ldr	r2, [pc, #72]	; (800b954 <__sinit+0x5c>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	6282      	str	r2, [r0, #40]	; 0x28
 800b90e:	4298      	cmp	r0, r3
 800b910:	bf04      	itt	eq
 800b912:	2301      	moveq	r3, #1
 800b914:	6183      	streq	r3, [r0, #24]
 800b916:	f000 f81f 	bl	800b958 <__sfp>
 800b91a:	6060      	str	r0, [r4, #4]
 800b91c:	4620      	mov	r0, r4
 800b91e:	f000 f81b 	bl	800b958 <__sfp>
 800b922:	60a0      	str	r0, [r4, #8]
 800b924:	4620      	mov	r0, r4
 800b926:	f000 f817 	bl	800b958 <__sfp>
 800b92a:	2200      	movs	r2, #0
 800b92c:	60e0      	str	r0, [r4, #12]
 800b92e:	2104      	movs	r1, #4
 800b930:	6860      	ldr	r0, [r4, #4]
 800b932:	f7ff ffa1 	bl	800b878 <std>
 800b936:	2201      	movs	r2, #1
 800b938:	2109      	movs	r1, #9
 800b93a:	68a0      	ldr	r0, [r4, #8]
 800b93c:	f7ff ff9c 	bl	800b878 <std>
 800b940:	2202      	movs	r2, #2
 800b942:	2112      	movs	r1, #18
 800b944:	68e0      	ldr	r0, [r4, #12]
 800b946:	f7ff ff97 	bl	800b878 <std>
 800b94a:	2301      	movs	r3, #1
 800b94c:	61a3      	str	r3, [r4, #24]
 800b94e:	bd10      	pop	{r4, pc}
 800b950:	0800e634 	.word	0x0800e634
 800b954:	0800b8c1 	.word	0x0800b8c1

0800b958 <__sfp>:
 800b958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b95a:	4b1b      	ldr	r3, [pc, #108]	; (800b9c8 <__sfp+0x70>)
 800b95c:	4607      	mov	r7, r0
 800b95e:	681e      	ldr	r6, [r3, #0]
 800b960:	69b3      	ldr	r3, [r6, #24]
 800b962:	b913      	cbnz	r3, 800b96a <__sfp+0x12>
 800b964:	4630      	mov	r0, r6
 800b966:	f7ff ffc7 	bl	800b8f8 <__sinit>
 800b96a:	3648      	adds	r6, #72	; 0x48
 800b96c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b970:	3b01      	subs	r3, #1
 800b972:	d503      	bpl.n	800b97c <__sfp+0x24>
 800b974:	6833      	ldr	r3, [r6, #0]
 800b976:	b133      	cbz	r3, 800b986 <__sfp+0x2e>
 800b978:	6836      	ldr	r6, [r6, #0]
 800b97a:	e7f7      	b.n	800b96c <__sfp+0x14>
 800b97c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b980:	b16d      	cbz	r5, 800b99e <__sfp+0x46>
 800b982:	3468      	adds	r4, #104	; 0x68
 800b984:	e7f4      	b.n	800b970 <__sfp+0x18>
 800b986:	2104      	movs	r1, #4
 800b988:	4638      	mov	r0, r7
 800b98a:	f7ff ff9f 	bl	800b8cc <__sfmoreglue>
 800b98e:	6030      	str	r0, [r6, #0]
 800b990:	2800      	cmp	r0, #0
 800b992:	d1f1      	bne.n	800b978 <__sfp+0x20>
 800b994:	230c      	movs	r3, #12
 800b996:	4604      	mov	r4, r0
 800b998:	603b      	str	r3, [r7, #0]
 800b99a:	4620      	mov	r0, r4
 800b99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b99e:	4b0b      	ldr	r3, [pc, #44]	; (800b9cc <__sfp+0x74>)
 800b9a0:	6665      	str	r5, [r4, #100]	; 0x64
 800b9a2:	e9c4 5500 	strd	r5, r5, [r4]
 800b9a6:	60a5      	str	r5, [r4, #8]
 800b9a8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b9ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b9b0:	2208      	movs	r2, #8
 800b9b2:	4629      	mov	r1, r5
 800b9b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b9b8:	f7fd f930 	bl	8008c1c <memset>
 800b9bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b9c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b9c4:	e7e9      	b.n	800b99a <__sfp+0x42>
 800b9c6:	bf00      	nop
 800b9c8:	0800e634 	.word	0x0800e634
 800b9cc:	ffff0001 	.word	0xffff0001

0800b9d0 <_fwalk_reent>:
 800b9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9d4:	4680      	mov	r8, r0
 800b9d6:	4689      	mov	r9, r1
 800b9d8:	2600      	movs	r6, #0
 800b9da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b9de:	b914      	cbnz	r4, 800b9e6 <_fwalk_reent+0x16>
 800b9e0:	4630      	mov	r0, r6
 800b9e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9e6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b9ea:	3f01      	subs	r7, #1
 800b9ec:	d501      	bpl.n	800b9f2 <_fwalk_reent+0x22>
 800b9ee:	6824      	ldr	r4, [r4, #0]
 800b9f0:	e7f5      	b.n	800b9de <_fwalk_reent+0xe>
 800b9f2:	89ab      	ldrh	r3, [r5, #12]
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d907      	bls.n	800ba08 <_fwalk_reent+0x38>
 800b9f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	d003      	beq.n	800ba08 <_fwalk_reent+0x38>
 800ba00:	4629      	mov	r1, r5
 800ba02:	4640      	mov	r0, r8
 800ba04:	47c8      	blx	r9
 800ba06:	4306      	orrs	r6, r0
 800ba08:	3568      	adds	r5, #104	; 0x68
 800ba0a:	e7ee      	b.n	800b9ea <_fwalk_reent+0x1a>

0800ba0c <rshift>:
 800ba0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba0e:	6906      	ldr	r6, [r0, #16]
 800ba10:	114b      	asrs	r3, r1, #5
 800ba12:	429e      	cmp	r6, r3
 800ba14:	f100 0414 	add.w	r4, r0, #20
 800ba18:	dd31      	ble.n	800ba7e <rshift+0x72>
 800ba1a:	f011 011f 	ands.w	r1, r1, #31
 800ba1e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ba22:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ba26:	d108      	bne.n	800ba3a <rshift+0x2e>
 800ba28:	4621      	mov	r1, r4
 800ba2a:	42b2      	cmp	r2, r6
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	d211      	bcs.n	800ba54 <rshift+0x48>
 800ba30:	f852 3b04 	ldr.w	r3, [r2], #4
 800ba34:	f841 3b04 	str.w	r3, [r1], #4
 800ba38:	e7f7      	b.n	800ba2a <rshift+0x1e>
 800ba3a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ba3e:	4623      	mov	r3, r4
 800ba40:	f1c1 0c20 	rsb	ip, r1, #32
 800ba44:	40cd      	lsrs	r5, r1
 800ba46:	3204      	adds	r2, #4
 800ba48:	42b2      	cmp	r2, r6
 800ba4a:	4617      	mov	r7, r2
 800ba4c:	d30d      	bcc.n	800ba6a <rshift+0x5e>
 800ba4e:	601d      	str	r5, [r3, #0]
 800ba50:	b105      	cbz	r5, 800ba54 <rshift+0x48>
 800ba52:	3304      	adds	r3, #4
 800ba54:	42a3      	cmp	r3, r4
 800ba56:	eba3 0204 	sub.w	r2, r3, r4
 800ba5a:	bf08      	it	eq
 800ba5c:	2300      	moveq	r3, #0
 800ba5e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ba62:	6102      	str	r2, [r0, #16]
 800ba64:	bf08      	it	eq
 800ba66:	6143      	streq	r3, [r0, #20]
 800ba68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba6a:	683f      	ldr	r7, [r7, #0]
 800ba6c:	fa07 f70c 	lsl.w	r7, r7, ip
 800ba70:	433d      	orrs	r5, r7
 800ba72:	f843 5b04 	str.w	r5, [r3], #4
 800ba76:	f852 5b04 	ldr.w	r5, [r2], #4
 800ba7a:	40cd      	lsrs	r5, r1
 800ba7c:	e7e4      	b.n	800ba48 <rshift+0x3c>
 800ba7e:	4623      	mov	r3, r4
 800ba80:	e7e8      	b.n	800ba54 <rshift+0x48>

0800ba82 <__hexdig_fun>:
 800ba82:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ba86:	2b09      	cmp	r3, #9
 800ba88:	d802      	bhi.n	800ba90 <__hexdig_fun+0xe>
 800ba8a:	3820      	subs	r0, #32
 800ba8c:	b2c0      	uxtb	r0, r0
 800ba8e:	4770      	bx	lr
 800ba90:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ba94:	2b05      	cmp	r3, #5
 800ba96:	d801      	bhi.n	800ba9c <__hexdig_fun+0x1a>
 800ba98:	3847      	subs	r0, #71	; 0x47
 800ba9a:	e7f7      	b.n	800ba8c <__hexdig_fun+0xa>
 800ba9c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800baa0:	2b05      	cmp	r3, #5
 800baa2:	d801      	bhi.n	800baa8 <__hexdig_fun+0x26>
 800baa4:	3827      	subs	r0, #39	; 0x27
 800baa6:	e7f1      	b.n	800ba8c <__hexdig_fun+0xa>
 800baa8:	2000      	movs	r0, #0
 800baaa:	4770      	bx	lr

0800baac <__gethex>:
 800baac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab0:	b08b      	sub	sp, #44	; 0x2c
 800bab2:	9002      	str	r0, [sp, #8]
 800bab4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800bab6:	468a      	mov	sl, r1
 800bab8:	4690      	mov	r8, r2
 800baba:	9306      	str	r3, [sp, #24]
 800babc:	f000 fad1 	bl	800c062 <__localeconv_l>
 800bac0:	6803      	ldr	r3, [r0, #0]
 800bac2:	f04f 0b00 	mov.w	fp, #0
 800bac6:	4618      	mov	r0, r3
 800bac8:	9303      	str	r3, [sp, #12]
 800baca:	f7f4 fbad 	bl	8000228 <strlen>
 800bace:	9b03      	ldr	r3, [sp, #12]
 800bad0:	9001      	str	r0, [sp, #4]
 800bad2:	4403      	add	r3, r0
 800bad4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bad8:	9307      	str	r3, [sp, #28]
 800bada:	f8da 3000 	ldr.w	r3, [sl]
 800bade:	3302      	adds	r3, #2
 800bae0:	461f      	mov	r7, r3
 800bae2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bae6:	2830      	cmp	r0, #48	; 0x30
 800bae8:	d06c      	beq.n	800bbc4 <__gethex+0x118>
 800baea:	f7ff ffca 	bl	800ba82 <__hexdig_fun>
 800baee:	4604      	mov	r4, r0
 800baf0:	2800      	cmp	r0, #0
 800baf2:	d16a      	bne.n	800bbca <__gethex+0x11e>
 800baf4:	9a01      	ldr	r2, [sp, #4]
 800baf6:	9903      	ldr	r1, [sp, #12]
 800baf8:	4638      	mov	r0, r7
 800bafa:	f7fe f83a 	bl	8009b72 <strncmp>
 800bafe:	2800      	cmp	r0, #0
 800bb00:	d166      	bne.n	800bbd0 <__gethex+0x124>
 800bb02:	9b01      	ldr	r3, [sp, #4]
 800bb04:	5cf8      	ldrb	r0, [r7, r3]
 800bb06:	18fe      	adds	r6, r7, r3
 800bb08:	f7ff ffbb 	bl	800ba82 <__hexdig_fun>
 800bb0c:	2800      	cmp	r0, #0
 800bb0e:	d062      	beq.n	800bbd6 <__gethex+0x12a>
 800bb10:	4633      	mov	r3, r6
 800bb12:	7818      	ldrb	r0, [r3, #0]
 800bb14:	461f      	mov	r7, r3
 800bb16:	2830      	cmp	r0, #48	; 0x30
 800bb18:	f103 0301 	add.w	r3, r3, #1
 800bb1c:	d0f9      	beq.n	800bb12 <__gethex+0x66>
 800bb1e:	f7ff ffb0 	bl	800ba82 <__hexdig_fun>
 800bb22:	fab0 f580 	clz	r5, r0
 800bb26:	4634      	mov	r4, r6
 800bb28:	f04f 0b01 	mov.w	fp, #1
 800bb2c:	096d      	lsrs	r5, r5, #5
 800bb2e:	463a      	mov	r2, r7
 800bb30:	4616      	mov	r6, r2
 800bb32:	7830      	ldrb	r0, [r6, #0]
 800bb34:	3201      	adds	r2, #1
 800bb36:	f7ff ffa4 	bl	800ba82 <__hexdig_fun>
 800bb3a:	2800      	cmp	r0, #0
 800bb3c:	d1f8      	bne.n	800bb30 <__gethex+0x84>
 800bb3e:	9a01      	ldr	r2, [sp, #4]
 800bb40:	9903      	ldr	r1, [sp, #12]
 800bb42:	4630      	mov	r0, r6
 800bb44:	f7fe f815 	bl	8009b72 <strncmp>
 800bb48:	b950      	cbnz	r0, 800bb60 <__gethex+0xb4>
 800bb4a:	b954      	cbnz	r4, 800bb62 <__gethex+0xb6>
 800bb4c:	9b01      	ldr	r3, [sp, #4]
 800bb4e:	18f4      	adds	r4, r6, r3
 800bb50:	4622      	mov	r2, r4
 800bb52:	4616      	mov	r6, r2
 800bb54:	7830      	ldrb	r0, [r6, #0]
 800bb56:	3201      	adds	r2, #1
 800bb58:	f7ff ff93 	bl	800ba82 <__hexdig_fun>
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	d1f8      	bne.n	800bb52 <__gethex+0xa6>
 800bb60:	b10c      	cbz	r4, 800bb66 <__gethex+0xba>
 800bb62:	1ba4      	subs	r4, r4, r6
 800bb64:	00a4      	lsls	r4, r4, #2
 800bb66:	7833      	ldrb	r3, [r6, #0]
 800bb68:	2b50      	cmp	r3, #80	; 0x50
 800bb6a:	d001      	beq.n	800bb70 <__gethex+0xc4>
 800bb6c:	2b70      	cmp	r3, #112	; 0x70
 800bb6e:	d140      	bne.n	800bbf2 <__gethex+0x146>
 800bb70:	7873      	ldrb	r3, [r6, #1]
 800bb72:	2b2b      	cmp	r3, #43	; 0x2b
 800bb74:	d031      	beq.n	800bbda <__gethex+0x12e>
 800bb76:	2b2d      	cmp	r3, #45	; 0x2d
 800bb78:	d033      	beq.n	800bbe2 <__gethex+0x136>
 800bb7a:	f04f 0900 	mov.w	r9, #0
 800bb7e:	1c71      	adds	r1, r6, #1
 800bb80:	7808      	ldrb	r0, [r1, #0]
 800bb82:	f7ff ff7e 	bl	800ba82 <__hexdig_fun>
 800bb86:	1e43      	subs	r3, r0, #1
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	2b18      	cmp	r3, #24
 800bb8c:	d831      	bhi.n	800bbf2 <__gethex+0x146>
 800bb8e:	f1a0 0210 	sub.w	r2, r0, #16
 800bb92:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bb96:	f7ff ff74 	bl	800ba82 <__hexdig_fun>
 800bb9a:	1e43      	subs	r3, r0, #1
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	2b18      	cmp	r3, #24
 800bba0:	d922      	bls.n	800bbe8 <__gethex+0x13c>
 800bba2:	f1b9 0f00 	cmp.w	r9, #0
 800bba6:	d000      	beq.n	800bbaa <__gethex+0xfe>
 800bba8:	4252      	negs	r2, r2
 800bbaa:	4414      	add	r4, r2
 800bbac:	f8ca 1000 	str.w	r1, [sl]
 800bbb0:	b30d      	cbz	r5, 800bbf6 <__gethex+0x14a>
 800bbb2:	f1bb 0f00 	cmp.w	fp, #0
 800bbb6:	bf0c      	ite	eq
 800bbb8:	2706      	moveq	r7, #6
 800bbba:	2700      	movne	r7, #0
 800bbbc:	4638      	mov	r0, r7
 800bbbe:	b00b      	add	sp, #44	; 0x2c
 800bbc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbc4:	f10b 0b01 	add.w	fp, fp, #1
 800bbc8:	e78a      	b.n	800bae0 <__gethex+0x34>
 800bbca:	2500      	movs	r5, #0
 800bbcc:	462c      	mov	r4, r5
 800bbce:	e7ae      	b.n	800bb2e <__gethex+0x82>
 800bbd0:	463e      	mov	r6, r7
 800bbd2:	2501      	movs	r5, #1
 800bbd4:	e7c7      	b.n	800bb66 <__gethex+0xba>
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	e7fb      	b.n	800bbd2 <__gethex+0x126>
 800bbda:	f04f 0900 	mov.w	r9, #0
 800bbde:	1cb1      	adds	r1, r6, #2
 800bbe0:	e7ce      	b.n	800bb80 <__gethex+0xd4>
 800bbe2:	f04f 0901 	mov.w	r9, #1
 800bbe6:	e7fa      	b.n	800bbde <__gethex+0x132>
 800bbe8:	230a      	movs	r3, #10
 800bbea:	fb03 0202 	mla	r2, r3, r2, r0
 800bbee:	3a10      	subs	r2, #16
 800bbf0:	e7cf      	b.n	800bb92 <__gethex+0xe6>
 800bbf2:	4631      	mov	r1, r6
 800bbf4:	e7da      	b.n	800bbac <__gethex+0x100>
 800bbf6:	4629      	mov	r1, r5
 800bbf8:	1bf3      	subs	r3, r6, r7
 800bbfa:	3b01      	subs	r3, #1
 800bbfc:	2b07      	cmp	r3, #7
 800bbfe:	dc49      	bgt.n	800bc94 <__gethex+0x1e8>
 800bc00:	9802      	ldr	r0, [sp, #8]
 800bc02:	f000 fac5 	bl	800c190 <_Balloc>
 800bc06:	f04f 0b00 	mov.w	fp, #0
 800bc0a:	4605      	mov	r5, r0
 800bc0c:	46da      	mov	sl, fp
 800bc0e:	9b01      	ldr	r3, [sp, #4]
 800bc10:	f100 0914 	add.w	r9, r0, #20
 800bc14:	f1c3 0301 	rsb	r3, r3, #1
 800bc18:	f8cd 9010 	str.w	r9, [sp, #16]
 800bc1c:	9308      	str	r3, [sp, #32]
 800bc1e:	42b7      	cmp	r7, r6
 800bc20:	d33b      	bcc.n	800bc9a <__gethex+0x1ee>
 800bc22:	9804      	ldr	r0, [sp, #16]
 800bc24:	f840 ab04 	str.w	sl, [r0], #4
 800bc28:	eba0 0009 	sub.w	r0, r0, r9
 800bc2c:	1080      	asrs	r0, r0, #2
 800bc2e:	6128      	str	r0, [r5, #16]
 800bc30:	0147      	lsls	r7, r0, #5
 800bc32:	4650      	mov	r0, sl
 800bc34:	f000 fb70 	bl	800c318 <__hi0bits>
 800bc38:	f8d8 6000 	ldr.w	r6, [r8]
 800bc3c:	1a3f      	subs	r7, r7, r0
 800bc3e:	42b7      	cmp	r7, r6
 800bc40:	dd64      	ble.n	800bd0c <__gethex+0x260>
 800bc42:	1bbf      	subs	r7, r7, r6
 800bc44:	4639      	mov	r1, r7
 800bc46:	4628      	mov	r0, r5
 800bc48:	f000 fe79 	bl	800c93e <__any_on>
 800bc4c:	4682      	mov	sl, r0
 800bc4e:	b178      	cbz	r0, 800bc70 <__gethex+0x1c4>
 800bc50:	f04f 0a01 	mov.w	sl, #1
 800bc54:	1e7b      	subs	r3, r7, #1
 800bc56:	1159      	asrs	r1, r3, #5
 800bc58:	f003 021f 	and.w	r2, r3, #31
 800bc5c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bc60:	fa0a f202 	lsl.w	r2, sl, r2
 800bc64:	420a      	tst	r2, r1
 800bc66:	d003      	beq.n	800bc70 <__gethex+0x1c4>
 800bc68:	4553      	cmp	r3, sl
 800bc6a:	dc46      	bgt.n	800bcfa <__gethex+0x24e>
 800bc6c:	f04f 0a02 	mov.w	sl, #2
 800bc70:	4639      	mov	r1, r7
 800bc72:	4628      	mov	r0, r5
 800bc74:	f7ff feca 	bl	800ba0c <rshift>
 800bc78:	443c      	add	r4, r7
 800bc7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bc7e:	42a3      	cmp	r3, r4
 800bc80:	da52      	bge.n	800bd28 <__gethex+0x27c>
 800bc82:	4629      	mov	r1, r5
 800bc84:	9802      	ldr	r0, [sp, #8]
 800bc86:	f000 fab7 	bl	800c1f8 <_Bfree>
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bc8e:	27a3      	movs	r7, #163	; 0xa3
 800bc90:	6013      	str	r3, [r2, #0]
 800bc92:	e793      	b.n	800bbbc <__gethex+0x110>
 800bc94:	3101      	adds	r1, #1
 800bc96:	105b      	asrs	r3, r3, #1
 800bc98:	e7b0      	b.n	800bbfc <__gethex+0x150>
 800bc9a:	1e73      	subs	r3, r6, #1
 800bc9c:	9305      	str	r3, [sp, #20]
 800bc9e:	9a07      	ldr	r2, [sp, #28]
 800bca0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d018      	beq.n	800bcda <__gethex+0x22e>
 800bca8:	f1bb 0f20 	cmp.w	fp, #32
 800bcac:	d107      	bne.n	800bcbe <__gethex+0x212>
 800bcae:	9b04      	ldr	r3, [sp, #16]
 800bcb0:	f8c3 a000 	str.w	sl, [r3]
 800bcb4:	f04f 0a00 	mov.w	sl, #0
 800bcb8:	46d3      	mov	fp, sl
 800bcba:	3304      	adds	r3, #4
 800bcbc:	9304      	str	r3, [sp, #16]
 800bcbe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bcc2:	f7ff fede 	bl	800ba82 <__hexdig_fun>
 800bcc6:	f000 000f 	and.w	r0, r0, #15
 800bcca:	fa00 f00b 	lsl.w	r0, r0, fp
 800bcce:	ea4a 0a00 	orr.w	sl, sl, r0
 800bcd2:	f10b 0b04 	add.w	fp, fp, #4
 800bcd6:	9b05      	ldr	r3, [sp, #20]
 800bcd8:	e00d      	b.n	800bcf6 <__gethex+0x24a>
 800bcda:	9b05      	ldr	r3, [sp, #20]
 800bcdc:	9a08      	ldr	r2, [sp, #32]
 800bcde:	4413      	add	r3, r2
 800bce0:	42bb      	cmp	r3, r7
 800bce2:	d3e1      	bcc.n	800bca8 <__gethex+0x1fc>
 800bce4:	4618      	mov	r0, r3
 800bce6:	9a01      	ldr	r2, [sp, #4]
 800bce8:	9903      	ldr	r1, [sp, #12]
 800bcea:	9309      	str	r3, [sp, #36]	; 0x24
 800bcec:	f7fd ff41 	bl	8009b72 <strncmp>
 800bcf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	d1d8      	bne.n	800bca8 <__gethex+0x1fc>
 800bcf6:	461e      	mov	r6, r3
 800bcf8:	e791      	b.n	800bc1e <__gethex+0x172>
 800bcfa:	1eb9      	subs	r1, r7, #2
 800bcfc:	4628      	mov	r0, r5
 800bcfe:	f000 fe1e 	bl	800c93e <__any_on>
 800bd02:	2800      	cmp	r0, #0
 800bd04:	d0b2      	beq.n	800bc6c <__gethex+0x1c0>
 800bd06:	f04f 0a03 	mov.w	sl, #3
 800bd0a:	e7b1      	b.n	800bc70 <__gethex+0x1c4>
 800bd0c:	da09      	bge.n	800bd22 <__gethex+0x276>
 800bd0e:	1bf7      	subs	r7, r6, r7
 800bd10:	4629      	mov	r1, r5
 800bd12:	463a      	mov	r2, r7
 800bd14:	9802      	ldr	r0, [sp, #8]
 800bd16:	f000 fc39 	bl	800c58c <__lshift>
 800bd1a:	4605      	mov	r5, r0
 800bd1c:	1be4      	subs	r4, r4, r7
 800bd1e:	f100 0914 	add.w	r9, r0, #20
 800bd22:	f04f 0a00 	mov.w	sl, #0
 800bd26:	e7a8      	b.n	800bc7a <__gethex+0x1ce>
 800bd28:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bd2c:	42a0      	cmp	r0, r4
 800bd2e:	dd6b      	ble.n	800be08 <__gethex+0x35c>
 800bd30:	1b04      	subs	r4, r0, r4
 800bd32:	42a6      	cmp	r6, r4
 800bd34:	dc2e      	bgt.n	800bd94 <__gethex+0x2e8>
 800bd36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd3a:	2b02      	cmp	r3, #2
 800bd3c:	d022      	beq.n	800bd84 <__gethex+0x2d8>
 800bd3e:	2b03      	cmp	r3, #3
 800bd40:	d024      	beq.n	800bd8c <__gethex+0x2e0>
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d115      	bne.n	800bd72 <__gethex+0x2c6>
 800bd46:	42a6      	cmp	r6, r4
 800bd48:	d113      	bne.n	800bd72 <__gethex+0x2c6>
 800bd4a:	2e01      	cmp	r6, #1
 800bd4c:	dc0b      	bgt.n	800bd66 <__gethex+0x2ba>
 800bd4e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bd52:	9a06      	ldr	r2, [sp, #24]
 800bd54:	2762      	movs	r7, #98	; 0x62
 800bd56:	6013      	str	r3, [r2, #0]
 800bd58:	2301      	movs	r3, #1
 800bd5a:	612b      	str	r3, [r5, #16]
 800bd5c:	f8c9 3000 	str.w	r3, [r9]
 800bd60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bd62:	601d      	str	r5, [r3, #0]
 800bd64:	e72a      	b.n	800bbbc <__gethex+0x110>
 800bd66:	1e71      	subs	r1, r6, #1
 800bd68:	4628      	mov	r0, r5
 800bd6a:	f000 fde8 	bl	800c93e <__any_on>
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	d1ed      	bne.n	800bd4e <__gethex+0x2a2>
 800bd72:	4629      	mov	r1, r5
 800bd74:	9802      	ldr	r0, [sp, #8]
 800bd76:	f000 fa3f 	bl	800c1f8 <_Bfree>
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bd7e:	2750      	movs	r7, #80	; 0x50
 800bd80:	6013      	str	r3, [r2, #0]
 800bd82:	e71b      	b.n	800bbbc <__gethex+0x110>
 800bd84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d0e1      	beq.n	800bd4e <__gethex+0x2a2>
 800bd8a:	e7f2      	b.n	800bd72 <__gethex+0x2c6>
 800bd8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d1dd      	bne.n	800bd4e <__gethex+0x2a2>
 800bd92:	e7ee      	b.n	800bd72 <__gethex+0x2c6>
 800bd94:	1e67      	subs	r7, r4, #1
 800bd96:	f1ba 0f00 	cmp.w	sl, #0
 800bd9a:	d132      	bne.n	800be02 <__gethex+0x356>
 800bd9c:	b127      	cbz	r7, 800bda8 <__gethex+0x2fc>
 800bd9e:	4639      	mov	r1, r7
 800bda0:	4628      	mov	r0, r5
 800bda2:	f000 fdcc 	bl	800c93e <__any_on>
 800bda6:	4682      	mov	sl, r0
 800bda8:	2301      	movs	r3, #1
 800bdaa:	117a      	asrs	r2, r7, #5
 800bdac:	f007 071f 	and.w	r7, r7, #31
 800bdb0:	fa03 f707 	lsl.w	r7, r3, r7
 800bdb4:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800bdb8:	4621      	mov	r1, r4
 800bdba:	421f      	tst	r7, r3
 800bdbc:	f04f 0702 	mov.w	r7, #2
 800bdc0:	4628      	mov	r0, r5
 800bdc2:	bf18      	it	ne
 800bdc4:	f04a 0a02 	orrne.w	sl, sl, #2
 800bdc8:	1b36      	subs	r6, r6, r4
 800bdca:	f7ff fe1f 	bl	800ba0c <rshift>
 800bdce:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800bdd2:	f1ba 0f00 	cmp.w	sl, #0
 800bdd6:	d048      	beq.n	800be6a <__gethex+0x3be>
 800bdd8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bddc:	2b02      	cmp	r3, #2
 800bdde:	d015      	beq.n	800be0c <__gethex+0x360>
 800bde0:	2b03      	cmp	r3, #3
 800bde2:	d017      	beq.n	800be14 <__gethex+0x368>
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d109      	bne.n	800bdfc <__gethex+0x350>
 800bde8:	f01a 0f02 	tst.w	sl, #2
 800bdec:	d006      	beq.n	800bdfc <__gethex+0x350>
 800bdee:	f8d9 3000 	ldr.w	r3, [r9]
 800bdf2:	ea4a 0a03 	orr.w	sl, sl, r3
 800bdf6:	f01a 0f01 	tst.w	sl, #1
 800bdfa:	d10e      	bne.n	800be1a <__gethex+0x36e>
 800bdfc:	f047 0710 	orr.w	r7, r7, #16
 800be00:	e033      	b.n	800be6a <__gethex+0x3be>
 800be02:	f04f 0a01 	mov.w	sl, #1
 800be06:	e7cf      	b.n	800bda8 <__gethex+0x2fc>
 800be08:	2701      	movs	r7, #1
 800be0a:	e7e2      	b.n	800bdd2 <__gethex+0x326>
 800be0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be0e:	f1c3 0301 	rsb	r3, r3, #1
 800be12:	9315      	str	r3, [sp, #84]	; 0x54
 800be14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be16:	2b00      	cmp	r3, #0
 800be18:	d0f0      	beq.n	800bdfc <__gethex+0x350>
 800be1a:	f04f 0c00 	mov.w	ip, #0
 800be1e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800be22:	f105 0314 	add.w	r3, r5, #20
 800be26:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800be2a:	eb03 010a 	add.w	r1, r3, sl
 800be2e:	4618      	mov	r0, r3
 800be30:	f853 2b04 	ldr.w	r2, [r3], #4
 800be34:	f1b2 3fff 	cmp.w	r2, #4294967295
 800be38:	d01c      	beq.n	800be74 <__gethex+0x3c8>
 800be3a:	3201      	adds	r2, #1
 800be3c:	6002      	str	r2, [r0, #0]
 800be3e:	2f02      	cmp	r7, #2
 800be40:	f105 0314 	add.w	r3, r5, #20
 800be44:	d138      	bne.n	800beb8 <__gethex+0x40c>
 800be46:	f8d8 2000 	ldr.w	r2, [r8]
 800be4a:	3a01      	subs	r2, #1
 800be4c:	42b2      	cmp	r2, r6
 800be4e:	d10a      	bne.n	800be66 <__gethex+0x3ba>
 800be50:	2201      	movs	r2, #1
 800be52:	1171      	asrs	r1, r6, #5
 800be54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800be58:	f006 061f 	and.w	r6, r6, #31
 800be5c:	fa02 f606 	lsl.w	r6, r2, r6
 800be60:	421e      	tst	r6, r3
 800be62:	bf18      	it	ne
 800be64:	4617      	movne	r7, r2
 800be66:	f047 0720 	orr.w	r7, r7, #32
 800be6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be6c:	601d      	str	r5, [r3, #0]
 800be6e:	9b06      	ldr	r3, [sp, #24]
 800be70:	601c      	str	r4, [r3, #0]
 800be72:	e6a3      	b.n	800bbbc <__gethex+0x110>
 800be74:	4299      	cmp	r1, r3
 800be76:	f843 cc04 	str.w	ip, [r3, #-4]
 800be7a:	d8d8      	bhi.n	800be2e <__gethex+0x382>
 800be7c:	68ab      	ldr	r3, [r5, #8]
 800be7e:	4599      	cmp	r9, r3
 800be80:	db12      	blt.n	800bea8 <__gethex+0x3fc>
 800be82:	6869      	ldr	r1, [r5, #4]
 800be84:	9802      	ldr	r0, [sp, #8]
 800be86:	3101      	adds	r1, #1
 800be88:	f000 f982 	bl	800c190 <_Balloc>
 800be8c:	4683      	mov	fp, r0
 800be8e:	692a      	ldr	r2, [r5, #16]
 800be90:	f105 010c 	add.w	r1, r5, #12
 800be94:	3202      	adds	r2, #2
 800be96:	0092      	lsls	r2, r2, #2
 800be98:	300c      	adds	r0, #12
 800be9a:	f7fc feb4 	bl	8008c06 <memcpy>
 800be9e:	4629      	mov	r1, r5
 800bea0:	9802      	ldr	r0, [sp, #8]
 800bea2:	f000 f9a9 	bl	800c1f8 <_Bfree>
 800bea6:	465d      	mov	r5, fp
 800bea8:	692b      	ldr	r3, [r5, #16]
 800beaa:	1c5a      	adds	r2, r3, #1
 800beac:	612a      	str	r2, [r5, #16]
 800beae:	2201      	movs	r2, #1
 800beb0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800beb4:	615a      	str	r2, [r3, #20]
 800beb6:	e7c2      	b.n	800be3e <__gethex+0x392>
 800beb8:	692a      	ldr	r2, [r5, #16]
 800beba:	454a      	cmp	r2, r9
 800bebc:	dd0b      	ble.n	800bed6 <__gethex+0x42a>
 800bebe:	2101      	movs	r1, #1
 800bec0:	4628      	mov	r0, r5
 800bec2:	f7ff fda3 	bl	800ba0c <rshift>
 800bec6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800beca:	3401      	adds	r4, #1
 800becc:	42a3      	cmp	r3, r4
 800bece:	f6ff aed8 	blt.w	800bc82 <__gethex+0x1d6>
 800bed2:	2701      	movs	r7, #1
 800bed4:	e7c7      	b.n	800be66 <__gethex+0x3ba>
 800bed6:	f016 061f 	ands.w	r6, r6, #31
 800beda:	d0fa      	beq.n	800bed2 <__gethex+0x426>
 800bedc:	449a      	add	sl, r3
 800bede:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800bee2:	f000 fa19 	bl	800c318 <__hi0bits>
 800bee6:	f1c6 0620 	rsb	r6, r6, #32
 800beea:	42b0      	cmp	r0, r6
 800beec:	dbe7      	blt.n	800bebe <__gethex+0x412>
 800beee:	e7f0      	b.n	800bed2 <__gethex+0x426>

0800bef0 <L_shift>:
 800bef0:	f1c2 0208 	rsb	r2, r2, #8
 800bef4:	0092      	lsls	r2, r2, #2
 800bef6:	b570      	push	{r4, r5, r6, lr}
 800bef8:	f1c2 0620 	rsb	r6, r2, #32
 800befc:	6843      	ldr	r3, [r0, #4]
 800befe:	6804      	ldr	r4, [r0, #0]
 800bf00:	fa03 f506 	lsl.w	r5, r3, r6
 800bf04:	432c      	orrs	r4, r5
 800bf06:	40d3      	lsrs	r3, r2
 800bf08:	6004      	str	r4, [r0, #0]
 800bf0a:	f840 3f04 	str.w	r3, [r0, #4]!
 800bf0e:	4288      	cmp	r0, r1
 800bf10:	d3f4      	bcc.n	800befc <L_shift+0xc>
 800bf12:	bd70      	pop	{r4, r5, r6, pc}

0800bf14 <__match>:
 800bf14:	b530      	push	{r4, r5, lr}
 800bf16:	6803      	ldr	r3, [r0, #0]
 800bf18:	3301      	adds	r3, #1
 800bf1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf1e:	b914      	cbnz	r4, 800bf26 <__match+0x12>
 800bf20:	6003      	str	r3, [r0, #0]
 800bf22:	2001      	movs	r0, #1
 800bf24:	bd30      	pop	{r4, r5, pc}
 800bf26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf2a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bf2e:	2d19      	cmp	r5, #25
 800bf30:	bf98      	it	ls
 800bf32:	3220      	addls	r2, #32
 800bf34:	42a2      	cmp	r2, r4
 800bf36:	d0f0      	beq.n	800bf1a <__match+0x6>
 800bf38:	2000      	movs	r0, #0
 800bf3a:	e7f3      	b.n	800bf24 <__match+0x10>

0800bf3c <__hexnan>:
 800bf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf40:	2500      	movs	r5, #0
 800bf42:	680b      	ldr	r3, [r1, #0]
 800bf44:	4682      	mov	sl, r0
 800bf46:	115f      	asrs	r7, r3, #5
 800bf48:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800bf4c:	f013 031f 	ands.w	r3, r3, #31
 800bf50:	bf18      	it	ne
 800bf52:	3704      	addne	r7, #4
 800bf54:	1f3e      	subs	r6, r7, #4
 800bf56:	4690      	mov	r8, r2
 800bf58:	46b1      	mov	r9, r6
 800bf5a:	4634      	mov	r4, r6
 800bf5c:	46ab      	mov	fp, r5
 800bf5e:	b087      	sub	sp, #28
 800bf60:	6801      	ldr	r1, [r0, #0]
 800bf62:	9301      	str	r3, [sp, #4]
 800bf64:	f847 5c04 	str.w	r5, [r7, #-4]
 800bf68:	9502      	str	r5, [sp, #8]
 800bf6a:	784a      	ldrb	r2, [r1, #1]
 800bf6c:	1c4b      	adds	r3, r1, #1
 800bf6e:	9303      	str	r3, [sp, #12]
 800bf70:	b342      	cbz	r2, 800bfc4 <__hexnan+0x88>
 800bf72:	4610      	mov	r0, r2
 800bf74:	9105      	str	r1, [sp, #20]
 800bf76:	9204      	str	r2, [sp, #16]
 800bf78:	f7ff fd83 	bl	800ba82 <__hexdig_fun>
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	d143      	bne.n	800c008 <__hexnan+0xcc>
 800bf80:	9a04      	ldr	r2, [sp, #16]
 800bf82:	9905      	ldr	r1, [sp, #20]
 800bf84:	2a20      	cmp	r2, #32
 800bf86:	d818      	bhi.n	800bfba <__hexnan+0x7e>
 800bf88:	9b02      	ldr	r3, [sp, #8]
 800bf8a:	459b      	cmp	fp, r3
 800bf8c:	dd13      	ble.n	800bfb6 <__hexnan+0x7a>
 800bf8e:	454c      	cmp	r4, r9
 800bf90:	d206      	bcs.n	800bfa0 <__hexnan+0x64>
 800bf92:	2d07      	cmp	r5, #7
 800bf94:	dc04      	bgt.n	800bfa0 <__hexnan+0x64>
 800bf96:	462a      	mov	r2, r5
 800bf98:	4649      	mov	r1, r9
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	f7ff ffa8 	bl	800bef0 <L_shift>
 800bfa0:	4544      	cmp	r4, r8
 800bfa2:	d944      	bls.n	800c02e <__hexnan+0xf2>
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	f1a4 0904 	sub.w	r9, r4, #4
 800bfaa:	f844 3c04 	str.w	r3, [r4, #-4]
 800bfae:	461d      	mov	r5, r3
 800bfb0:	464c      	mov	r4, r9
 800bfb2:	f8cd b008 	str.w	fp, [sp, #8]
 800bfb6:	9903      	ldr	r1, [sp, #12]
 800bfb8:	e7d7      	b.n	800bf6a <__hexnan+0x2e>
 800bfba:	2a29      	cmp	r2, #41	; 0x29
 800bfbc:	d14a      	bne.n	800c054 <__hexnan+0x118>
 800bfbe:	3102      	adds	r1, #2
 800bfc0:	f8ca 1000 	str.w	r1, [sl]
 800bfc4:	f1bb 0f00 	cmp.w	fp, #0
 800bfc8:	d044      	beq.n	800c054 <__hexnan+0x118>
 800bfca:	454c      	cmp	r4, r9
 800bfcc:	d206      	bcs.n	800bfdc <__hexnan+0xa0>
 800bfce:	2d07      	cmp	r5, #7
 800bfd0:	dc04      	bgt.n	800bfdc <__hexnan+0xa0>
 800bfd2:	462a      	mov	r2, r5
 800bfd4:	4649      	mov	r1, r9
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	f7ff ff8a 	bl	800bef0 <L_shift>
 800bfdc:	4544      	cmp	r4, r8
 800bfde:	d928      	bls.n	800c032 <__hexnan+0xf6>
 800bfe0:	4643      	mov	r3, r8
 800bfe2:	f854 2b04 	ldr.w	r2, [r4], #4
 800bfe6:	42a6      	cmp	r6, r4
 800bfe8:	f843 2b04 	str.w	r2, [r3], #4
 800bfec:	d2f9      	bcs.n	800bfe2 <__hexnan+0xa6>
 800bfee:	2200      	movs	r2, #0
 800bff0:	f843 2b04 	str.w	r2, [r3], #4
 800bff4:	429e      	cmp	r6, r3
 800bff6:	d2fb      	bcs.n	800bff0 <__hexnan+0xb4>
 800bff8:	6833      	ldr	r3, [r6, #0]
 800bffa:	b91b      	cbnz	r3, 800c004 <__hexnan+0xc8>
 800bffc:	4546      	cmp	r6, r8
 800bffe:	d127      	bne.n	800c050 <__hexnan+0x114>
 800c000:	2301      	movs	r3, #1
 800c002:	6033      	str	r3, [r6, #0]
 800c004:	2005      	movs	r0, #5
 800c006:	e026      	b.n	800c056 <__hexnan+0x11a>
 800c008:	3501      	adds	r5, #1
 800c00a:	2d08      	cmp	r5, #8
 800c00c:	f10b 0b01 	add.w	fp, fp, #1
 800c010:	dd06      	ble.n	800c020 <__hexnan+0xe4>
 800c012:	4544      	cmp	r4, r8
 800c014:	d9cf      	bls.n	800bfb6 <__hexnan+0x7a>
 800c016:	2300      	movs	r3, #0
 800c018:	2501      	movs	r5, #1
 800c01a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c01e:	3c04      	subs	r4, #4
 800c020:	6822      	ldr	r2, [r4, #0]
 800c022:	f000 000f 	and.w	r0, r0, #15
 800c026:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c02a:	6020      	str	r0, [r4, #0]
 800c02c:	e7c3      	b.n	800bfb6 <__hexnan+0x7a>
 800c02e:	2508      	movs	r5, #8
 800c030:	e7c1      	b.n	800bfb6 <__hexnan+0x7a>
 800c032:	9b01      	ldr	r3, [sp, #4]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d0df      	beq.n	800bff8 <__hexnan+0xbc>
 800c038:	f04f 32ff 	mov.w	r2, #4294967295
 800c03c:	f1c3 0320 	rsb	r3, r3, #32
 800c040:	fa22 f303 	lsr.w	r3, r2, r3
 800c044:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800c048:	401a      	ands	r2, r3
 800c04a:	f847 2c04 	str.w	r2, [r7, #-4]
 800c04e:	e7d3      	b.n	800bff8 <__hexnan+0xbc>
 800c050:	3e04      	subs	r6, #4
 800c052:	e7d1      	b.n	800bff8 <__hexnan+0xbc>
 800c054:	2004      	movs	r0, #4
 800c056:	b007      	add	sp, #28
 800c058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c05c <__locale_ctype_ptr_l>:
 800c05c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c060:	4770      	bx	lr

0800c062 <__localeconv_l>:
 800c062:	30f0      	adds	r0, #240	; 0xf0
 800c064:	4770      	bx	lr
	...

0800c068 <_localeconv_r>:
 800c068:	4b04      	ldr	r3, [pc, #16]	; (800c07c <_localeconv_r+0x14>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	6a18      	ldr	r0, [r3, #32]
 800c06e:	4b04      	ldr	r3, [pc, #16]	; (800c080 <_localeconv_r+0x18>)
 800c070:	2800      	cmp	r0, #0
 800c072:	bf08      	it	eq
 800c074:	4618      	moveq	r0, r3
 800c076:	30f0      	adds	r0, #240	; 0xf0
 800c078:	4770      	bx	lr
 800c07a:	bf00      	nop
 800c07c:	20000014 	.word	0x20000014
 800c080:	20000078 	.word	0x20000078

0800c084 <__swhatbuf_r>:
 800c084:	b570      	push	{r4, r5, r6, lr}
 800c086:	460e      	mov	r6, r1
 800c088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c08c:	b096      	sub	sp, #88	; 0x58
 800c08e:	2900      	cmp	r1, #0
 800c090:	4614      	mov	r4, r2
 800c092:	461d      	mov	r5, r3
 800c094:	da07      	bge.n	800c0a6 <__swhatbuf_r+0x22>
 800c096:	2300      	movs	r3, #0
 800c098:	602b      	str	r3, [r5, #0]
 800c09a:	89b3      	ldrh	r3, [r6, #12]
 800c09c:	061a      	lsls	r2, r3, #24
 800c09e:	d410      	bmi.n	800c0c2 <__swhatbuf_r+0x3e>
 800c0a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0a4:	e00e      	b.n	800c0c4 <__swhatbuf_r+0x40>
 800c0a6:	466a      	mov	r2, sp
 800c0a8:	f000 ff6c 	bl	800cf84 <_fstat_r>
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	dbf2      	blt.n	800c096 <__swhatbuf_r+0x12>
 800c0b0:	9a01      	ldr	r2, [sp, #4]
 800c0b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c0b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c0ba:	425a      	negs	r2, r3
 800c0bc:	415a      	adcs	r2, r3
 800c0be:	602a      	str	r2, [r5, #0]
 800c0c0:	e7ee      	b.n	800c0a0 <__swhatbuf_r+0x1c>
 800c0c2:	2340      	movs	r3, #64	; 0x40
 800c0c4:	2000      	movs	r0, #0
 800c0c6:	6023      	str	r3, [r4, #0]
 800c0c8:	b016      	add	sp, #88	; 0x58
 800c0ca:	bd70      	pop	{r4, r5, r6, pc}

0800c0cc <__smakebuf_r>:
 800c0cc:	898b      	ldrh	r3, [r1, #12]
 800c0ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0d0:	079d      	lsls	r5, r3, #30
 800c0d2:	4606      	mov	r6, r0
 800c0d4:	460c      	mov	r4, r1
 800c0d6:	d507      	bpl.n	800c0e8 <__smakebuf_r+0x1c>
 800c0d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c0dc:	6023      	str	r3, [r4, #0]
 800c0de:	6123      	str	r3, [r4, #16]
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	6163      	str	r3, [r4, #20]
 800c0e4:	b002      	add	sp, #8
 800c0e6:	bd70      	pop	{r4, r5, r6, pc}
 800c0e8:	ab01      	add	r3, sp, #4
 800c0ea:	466a      	mov	r2, sp
 800c0ec:	f7ff ffca 	bl	800c084 <__swhatbuf_r>
 800c0f0:	9900      	ldr	r1, [sp, #0]
 800c0f2:	4605      	mov	r5, r0
 800c0f4:	4630      	mov	r0, r6
 800c0f6:	f7fc fdf3 	bl	8008ce0 <_malloc_r>
 800c0fa:	b948      	cbnz	r0, 800c110 <__smakebuf_r+0x44>
 800c0fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c100:	059a      	lsls	r2, r3, #22
 800c102:	d4ef      	bmi.n	800c0e4 <__smakebuf_r+0x18>
 800c104:	f023 0303 	bic.w	r3, r3, #3
 800c108:	f043 0302 	orr.w	r3, r3, #2
 800c10c:	81a3      	strh	r3, [r4, #12]
 800c10e:	e7e3      	b.n	800c0d8 <__smakebuf_r+0xc>
 800c110:	4b0d      	ldr	r3, [pc, #52]	; (800c148 <__smakebuf_r+0x7c>)
 800c112:	62b3      	str	r3, [r6, #40]	; 0x28
 800c114:	89a3      	ldrh	r3, [r4, #12]
 800c116:	6020      	str	r0, [r4, #0]
 800c118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c11c:	81a3      	strh	r3, [r4, #12]
 800c11e:	9b00      	ldr	r3, [sp, #0]
 800c120:	6120      	str	r0, [r4, #16]
 800c122:	6163      	str	r3, [r4, #20]
 800c124:	9b01      	ldr	r3, [sp, #4]
 800c126:	b15b      	cbz	r3, 800c140 <__smakebuf_r+0x74>
 800c128:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c12c:	4630      	mov	r0, r6
 800c12e:	f000 ff3b 	bl	800cfa8 <_isatty_r>
 800c132:	b128      	cbz	r0, 800c140 <__smakebuf_r+0x74>
 800c134:	89a3      	ldrh	r3, [r4, #12]
 800c136:	f023 0303 	bic.w	r3, r3, #3
 800c13a:	f043 0301 	orr.w	r3, r3, #1
 800c13e:	81a3      	strh	r3, [r4, #12]
 800c140:	89a3      	ldrh	r3, [r4, #12]
 800c142:	431d      	orrs	r5, r3
 800c144:	81a5      	strh	r5, [r4, #12]
 800c146:	e7cd      	b.n	800c0e4 <__smakebuf_r+0x18>
 800c148:	0800b8c1 	.word	0x0800b8c1

0800c14c <__ascii_mbtowc>:
 800c14c:	b082      	sub	sp, #8
 800c14e:	b901      	cbnz	r1, 800c152 <__ascii_mbtowc+0x6>
 800c150:	a901      	add	r1, sp, #4
 800c152:	b142      	cbz	r2, 800c166 <__ascii_mbtowc+0x1a>
 800c154:	b14b      	cbz	r3, 800c16a <__ascii_mbtowc+0x1e>
 800c156:	7813      	ldrb	r3, [r2, #0]
 800c158:	600b      	str	r3, [r1, #0]
 800c15a:	7812      	ldrb	r2, [r2, #0]
 800c15c:	1c10      	adds	r0, r2, #0
 800c15e:	bf18      	it	ne
 800c160:	2001      	movne	r0, #1
 800c162:	b002      	add	sp, #8
 800c164:	4770      	bx	lr
 800c166:	4610      	mov	r0, r2
 800c168:	e7fb      	b.n	800c162 <__ascii_mbtowc+0x16>
 800c16a:	f06f 0001 	mvn.w	r0, #1
 800c16e:	e7f8      	b.n	800c162 <__ascii_mbtowc+0x16>

0800c170 <memchr>:
 800c170:	b510      	push	{r4, lr}
 800c172:	b2c9      	uxtb	r1, r1
 800c174:	4402      	add	r2, r0
 800c176:	4290      	cmp	r0, r2
 800c178:	4603      	mov	r3, r0
 800c17a:	d101      	bne.n	800c180 <memchr+0x10>
 800c17c:	2300      	movs	r3, #0
 800c17e:	e003      	b.n	800c188 <memchr+0x18>
 800c180:	781c      	ldrb	r4, [r3, #0]
 800c182:	3001      	adds	r0, #1
 800c184:	428c      	cmp	r4, r1
 800c186:	d1f6      	bne.n	800c176 <memchr+0x6>
 800c188:	4618      	mov	r0, r3
 800c18a:	bd10      	pop	{r4, pc}

0800c18c <__malloc_lock>:
 800c18c:	4770      	bx	lr

0800c18e <__malloc_unlock>:
 800c18e:	4770      	bx	lr

0800c190 <_Balloc>:
 800c190:	b570      	push	{r4, r5, r6, lr}
 800c192:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c194:	4604      	mov	r4, r0
 800c196:	460e      	mov	r6, r1
 800c198:	b93d      	cbnz	r5, 800c1aa <_Balloc+0x1a>
 800c19a:	2010      	movs	r0, #16
 800c19c:	f7fc fd14 	bl	8008bc8 <malloc>
 800c1a0:	6260      	str	r0, [r4, #36]	; 0x24
 800c1a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c1a6:	6005      	str	r5, [r0, #0]
 800c1a8:	60c5      	str	r5, [r0, #12]
 800c1aa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c1ac:	68eb      	ldr	r3, [r5, #12]
 800c1ae:	b183      	cbz	r3, 800c1d2 <_Balloc+0x42>
 800c1b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1b2:	68db      	ldr	r3, [r3, #12]
 800c1b4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c1b8:	b9b8      	cbnz	r0, 800c1ea <_Balloc+0x5a>
 800c1ba:	2101      	movs	r1, #1
 800c1bc:	fa01 f506 	lsl.w	r5, r1, r6
 800c1c0:	1d6a      	adds	r2, r5, #5
 800c1c2:	0092      	lsls	r2, r2, #2
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	f7fc fd31 	bl	8008c2c <_calloc_r>
 800c1ca:	b160      	cbz	r0, 800c1e6 <_Balloc+0x56>
 800c1cc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c1d0:	e00e      	b.n	800c1f0 <_Balloc+0x60>
 800c1d2:	2221      	movs	r2, #33	; 0x21
 800c1d4:	2104      	movs	r1, #4
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	f7fc fd28 	bl	8008c2c <_calloc_r>
 800c1dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1de:	60e8      	str	r0, [r5, #12]
 800c1e0:	68db      	ldr	r3, [r3, #12]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d1e4      	bne.n	800c1b0 <_Balloc+0x20>
 800c1e6:	2000      	movs	r0, #0
 800c1e8:	bd70      	pop	{r4, r5, r6, pc}
 800c1ea:	6802      	ldr	r2, [r0, #0]
 800c1ec:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c1f6:	e7f7      	b.n	800c1e8 <_Balloc+0x58>

0800c1f8 <_Bfree>:
 800c1f8:	b570      	push	{r4, r5, r6, lr}
 800c1fa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c1fc:	4606      	mov	r6, r0
 800c1fe:	460d      	mov	r5, r1
 800c200:	b93c      	cbnz	r4, 800c212 <_Bfree+0x1a>
 800c202:	2010      	movs	r0, #16
 800c204:	f7fc fce0 	bl	8008bc8 <malloc>
 800c208:	6270      	str	r0, [r6, #36]	; 0x24
 800c20a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c20e:	6004      	str	r4, [r0, #0]
 800c210:	60c4      	str	r4, [r0, #12]
 800c212:	b13d      	cbz	r5, 800c224 <_Bfree+0x2c>
 800c214:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c216:	686a      	ldr	r2, [r5, #4]
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c21e:	6029      	str	r1, [r5, #0]
 800c220:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c224:	bd70      	pop	{r4, r5, r6, pc}

0800c226 <__multadd>:
 800c226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c22a:	461f      	mov	r7, r3
 800c22c:	4606      	mov	r6, r0
 800c22e:	460c      	mov	r4, r1
 800c230:	2300      	movs	r3, #0
 800c232:	690d      	ldr	r5, [r1, #16]
 800c234:	f101 0c14 	add.w	ip, r1, #20
 800c238:	f8dc 0000 	ldr.w	r0, [ip]
 800c23c:	3301      	adds	r3, #1
 800c23e:	b281      	uxth	r1, r0
 800c240:	fb02 7101 	mla	r1, r2, r1, r7
 800c244:	0c00      	lsrs	r0, r0, #16
 800c246:	0c0f      	lsrs	r7, r1, #16
 800c248:	fb02 7000 	mla	r0, r2, r0, r7
 800c24c:	b289      	uxth	r1, r1
 800c24e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c252:	429d      	cmp	r5, r3
 800c254:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c258:	f84c 1b04 	str.w	r1, [ip], #4
 800c25c:	dcec      	bgt.n	800c238 <__multadd+0x12>
 800c25e:	b1d7      	cbz	r7, 800c296 <__multadd+0x70>
 800c260:	68a3      	ldr	r3, [r4, #8]
 800c262:	42ab      	cmp	r3, r5
 800c264:	dc12      	bgt.n	800c28c <__multadd+0x66>
 800c266:	6861      	ldr	r1, [r4, #4]
 800c268:	4630      	mov	r0, r6
 800c26a:	3101      	adds	r1, #1
 800c26c:	f7ff ff90 	bl	800c190 <_Balloc>
 800c270:	4680      	mov	r8, r0
 800c272:	6922      	ldr	r2, [r4, #16]
 800c274:	f104 010c 	add.w	r1, r4, #12
 800c278:	3202      	adds	r2, #2
 800c27a:	0092      	lsls	r2, r2, #2
 800c27c:	300c      	adds	r0, #12
 800c27e:	f7fc fcc2 	bl	8008c06 <memcpy>
 800c282:	4621      	mov	r1, r4
 800c284:	4630      	mov	r0, r6
 800c286:	f7ff ffb7 	bl	800c1f8 <_Bfree>
 800c28a:	4644      	mov	r4, r8
 800c28c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c290:	3501      	adds	r5, #1
 800c292:	615f      	str	r7, [r3, #20]
 800c294:	6125      	str	r5, [r4, #16]
 800c296:	4620      	mov	r0, r4
 800c298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c29c <__s2b>:
 800c29c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2a0:	4615      	mov	r5, r2
 800c2a2:	2209      	movs	r2, #9
 800c2a4:	461f      	mov	r7, r3
 800c2a6:	3308      	adds	r3, #8
 800c2a8:	460c      	mov	r4, r1
 800c2aa:	fb93 f3f2 	sdiv	r3, r3, r2
 800c2ae:	4606      	mov	r6, r0
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	2100      	movs	r1, #0
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	db20      	blt.n	800c2fa <__s2b+0x5e>
 800c2b8:	4630      	mov	r0, r6
 800c2ba:	f7ff ff69 	bl	800c190 <_Balloc>
 800c2be:	9b08      	ldr	r3, [sp, #32]
 800c2c0:	2d09      	cmp	r5, #9
 800c2c2:	6143      	str	r3, [r0, #20]
 800c2c4:	f04f 0301 	mov.w	r3, #1
 800c2c8:	6103      	str	r3, [r0, #16]
 800c2ca:	dd19      	ble.n	800c300 <__s2b+0x64>
 800c2cc:	f104 0809 	add.w	r8, r4, #9
 800c2d0:	46c1      	mov	r9, r8
 800c2d2:	442c      	add	r4, r5
 800c2d4:	f819 3b01 	ldrb.w	r3, [r9], #1
 800c2d8:	4601      	mov	r1, r0
 800c2da:	3b30      	subs	r3, #48	; 0x30
 800c2dc:	220a      	movs	r2, #10
 800c2de:	4630      	mov	r0, r6
 800c2e0:	f7ff ffa1 	bl	800c226 <__multadd>
 800c2e4:	45a1      	cmp	r9, r4
 800c2e6:	d1f5      	bne.n	800c2d4 <__s2b+0x38>
 800c2e8:	eb08 0405 	add.w	r4, r8, r5
 800c2ec:	3c08      	subs	r4, #8
 800c2ee:	1b2d      	subs	r5, r5, r4
 800c2f0:	1963      	adds	r3, r4, r5
 800c2f2:	42bb      	cmp	r3, r7
 800c2f4:	db07      	blt.n	800c306 <__s2b+0x6a>
 800c2f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2fa:	0052      	lsls	r2, r2, #1
 800c2fc:	3101      	adds	r1, #1
 800c2fe:	e7d9      	b.n	800c2b4 <__s2b+0x18>
 800c300:	340a      	adds	r4, #10
 800c302:	2509      	movs	r5, #9
 800c304:	e7f3      	b.n	800c2ee <__s2b+0x52>
 800c306:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c30a:	4601      	mov	r1, r0
 800c30c:	3b30      	subs	r3, #48	; 0x30
 800c30e:	220a      	movs	r2, #10
 800c310:	4630      	mov	r0, r6
 800c312:	f7ff ff88 	bl	800c226 <__multadd>
 800c316:	e7eb      	b.n	800c2f0 <__s2b+0x54>

0800c318 <__hi0bits>:
 800c318:	0c02      	lsrs	r2, r0, #16
 800c31a:	0412      	lsls	r2, r2, #16
 800c31c:	4603      	mov	r3, r0
 800c31e:	b9b2      	cbnz	r2, 800c34e <__hi0bits+0x36>
 800c320:	0403      	lsls	r3, r0, #16
 800c322:	2010      	movs	r0, #16
 800c324:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c328:	bf04      	itt	eq
 800c32a:	021b      	lsleq	r3, r3, #8
 800c32c:	3008      	addeq	r0, #8
 800c32e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c332:	bf04      	itt	eq
 800c334:	011b      	lsleq	r3, r3, #4
 800c336:	3004      	addeq	r0, #4
 800c338:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c33c:	bf04      	itt	eq
 800c33e:	009b      	lsleq	r3, r3, #2
 800c340:	3002      	addeq	r0, #2
 800c342:	2b00      	cmp	r3, #0
 800c344:	db06      	blt.n	800c354 <__hi0bits+0x3c>
 800c346:	005b      	lsls	r3, r3, #1
 800c348:	d503      	bpl.n	800c352 <__hi0bits+0x3a>
 800c34a:	3001      	adds	r0, #1
 800c34c:	4770      	bx	lr
 800c34e:	2000      	movs	r0, #0
 800c350:	e7e8      	b.n	800c324 <__hi0bits+0xc>
 800c352:	2020      	movs	r0, #32
 800c354:	4770      	bx	lr

0800c356 <__lo0bits>:
 800c356:	6803      	ldr	r3, [r0, #0]
 800c358:	4601      	mov	r1, r0
 800c35a:	f013 0207 	ands.w	r2, r3, #7
 800c35e:	d00b      	beq.n	800c378 <__lo0bits+0x22>
 800c360:	07da      	lsls	r2, r3, #31
 800c362:	d423      	bmi.n	800c3ac <__lo0bits+0x56>
 800c364:	0798      	lsls	r0, r3, #30
 800c366:	bf49      	itett	mi
 800c368:	085b      	lsrmi	r3, r3, #1
 800c36a:	089b      	lsrpl	r3, r3, #2
 800c36c:	2001      	movmi	r0, #1
 800c36e:	600b      	strmi	r3, [r1, #0]
 800c370:	bf5c      	itt	pl
 800c372:	600b      	strpl	r3, [r1, #0]
 800c374:	2002      	movpl	r0, #2
 800c376:	4770      	bx	lr
 800c378:	b298      	uxth	r0, r3
 800c37a:	b9a8      	cbnz	r0, 800c3a8 <__lo0bits+0x52>
 800c37c:	2010      	movs	r0, #16
 800c37e:	0c1b      	lsrs	r3, r3, #16
 800c380:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c384:	bf04      	itt	eq
 800c386:	0a1b      	lsreq	r3, r3, #8
 800c388:	3008      	addeq	r0, #8
 800c38a:	071a      	lsls	r2, r3, #28
 800c38c:	bf04      	itt	eq
 800c38e:	091b      	lsreq	r3, r3, #4
 800c390:	3004      	addeq	r0, #4
 800c392:	079a      	lsls	r2, r3, #30
 800c394:	bf04      	itt	eq
 800c396:	089b      	lsreq	r3, r3, #2
 800c398:	3002      	addeq	r0, #2
 800c39a:	07da      	lsls	r2, r3, #31
 800c39c:	d402      	bmi.n	800c3a4 <__lo0bits+0x4e>
 800c39e:	085b      	lsrs	r3, r3, #1
 800c3a0:	d006      	beq.n	800c3b0 <__lo0bits+0x5a>
 800c3a2:	3001      	adds	r0, #1
 800c3a4:	600b      	str	r3, [r1, #0]
 800c3a6:	4770      	bx	lr
 800c3a8:	4610      	mov	r0, r2
 800c3aa:	e7e9      	b.n	800c380 <__lo0bits+0x2a>
 800c3ac:	2000      	movs	r0, #0
 800c3ae:	4770      	bx	lr
 800c3b0:	2020      	movs	r0, #32
 800c3b2:	4770      	bx	lr

0800c3b4 <__i2b>:
 800c3b4:	b510      	push	{r4, lr}
 800c3b6:	460c      	mov	r4, r1
 800c3b8:	2101      	movs	r1, #1
 800c3ba:	f7ff fee9 	bl	800c190 <_Balloc>
 800c3be:	2201      	movs	r2, #1
 800c3c0:	6144      	str	r4, [r0, #20]
 800c3c2:	6102      	str	r2, [r0, #16]
 800c3c4:	bd10      	pop	{r4, pc}

0800c3c6 <__multiply>:
 800c3c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ca:	4614      	mov	r4, r2
 800c3cc:	690a      	ldr	r2, [r1, #16]
 800c3ce:	6923      	ldr	r3, [r4, #16]
 800c3d0:	4688      	mov	r8, r1
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	bfbe      	ittt	lt
 800c3d6:	460b      	movlt	r3, r1
 800c3d8:	46a0      	movlt	r8, r4
 800c3da:	461c      	movlt	r4, r3
 800c3dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c3e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c3e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c3e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c3ec:	eb07 0609 	add.w	r6, r7, r9
 800c3f0:	42b3      	cmp	r3, r6
 800c3f2:	bfb8      	it	lt
 800c3f4:	3101      	addlt	r1, #1
 800c3f6:	f7ff fecb 	bl	800c190 <_Balloc>
 800c3fa:	f100 0514 	add.w	r5, r0, #20
 800c3fe:	462b      	mov	r3, r5
 800c400:	2200      	movs	r2, #0
 800c402:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c406:	4573      	cmp	r3, lr
 800c408:	d316      	bcc.n	800c438 <__multiply+0x72>
 800c40a:	f104 0214 	add.w	r2, r4, #20
 800c40e:	f108 0114 	add.w	r1, r8, #20
 800c412:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c416:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c41a:	9300      	str	r3, [sp, #0]
 800c41c:	9b00      	ldr	r3, [sp, #0]
 800c41e:	9201      	str	r2, [sp, #4]
 800c420:	4293      	cmp	r3, r2
 800c422:	d80c      	bhi.n	800c43e <__multiply+0x78>
 800c424:	2e00      	cmp	r6, #0
 800c426:	dd03      	ble.n	800c430 <__multiply+0x6a>
 800c428:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d05d      	beq.n	800c4ec <__multiply+0x126>
 800c430:	6106      	str	r6, [r0, #16]
 800c432:	b003      	add	sp, #12
 800c434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c438:	f843 2b04 	str.w	r2, [r3], #4
 800c43c:	e7e3      	b.n	800c406 <__multiply+0x40>
 800c43e:	f8b2 b000 	ldrh.w	fp, [r2]
 800c442:	f1bb 0f00 	cmp.w	fp, #0
 800c446:	d023      	beq.n	800c490 <__multiply+0xca>
 800c448:	4689      	mov	r9, r1
 800c44a:	46ac      	mov	ip, r5
 800c44c:	f04f 0800 	mov.w	r8, #0
 800c450:	f859 4b04 	ldr.w	r4, [r9], #4
 800c454:	f8dc a000 	ldr.w	sl, [ip]
 800c458:	b2a3      	uxth	r3, r4
 800c45a:	fa1f fa8a 	uxth.w	sl, sl
 800c45e:	fb0b a303 	mla	r3, fp, r3, sl
 800c462:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c466:	f8dc 4000 	ldr.w	r4, [ip]
 800c46a:	4443      	add	r3, r8
 800c46c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c470:	fb0b 840a 	mla	r4, fp, sl, r8
 800c474:	46e2      	mov	sl, ip
 800c476:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c480:	454f      	cmp	r7, r9
 800c482:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c486:	f84a 3b04 	str.w	r3, [sl], #4
 800c48a:	d82b      	bhi.n	800c4e4 <__multiply+0x11e>
 800c48c:	f8cc 8004 	str.w	r8, [ip, #4]
 800c490:	9b01      	ldr	r3, [sp, #4]
 800c492:	3204      	adds	r2, #4
 800c494:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c498:	f1ba 0f00 	cmp.w	sl, #0
 800c49c:	d020      	beq.n	800c4e0 <__multiply+0x11a>
 800c49e:	4689      	mov	r9, r1
 800c4a0:	46a8      	mov	r8, r5
 800c4a2:	f04f 0b00 	mov.w	fp, #0
 800c4a6:	682b      	ldr	r3, [r5, #0]
 800c4a8:	f8b9 c000 	ldrh.w	ip, [r9]
 800c4ac:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c4b0:	b29b      	uxth	r3, r3
 800c4b2:	fb0a 440c 	mla	r4, sl, ip, r4
 800c4b6:	46c4      	mov	ip, r8
 800c4b8:	445c      	add	r4, fp
 800c4ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c4be:	f84c 3b04 	str.w	r3, [ip], #4
 800c4c2:	f859 3b04 	ldr.w	r3, [r9], #4
 800c4c6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c4ca:	0c1b      	lsrs	r3, r3, #16
 800c4cc:	fb0a b303 	mla	r3, sl, r3, fp
 800c4d0:	454f      	cmp	r7, r9
 800c4d2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c4d6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c4da:	d805      	bhi.n	800c4e8 <__multiply+0x122>
 800c4dc:	f8c8 3004 	str.w	r3, [r8, #4]
 800c4e0:	3504      	adds	r5, #4
 800c4e2:	e79b      	b.n	800c41c <__multiply+0x56>
 800c4e4:	46d4      	mov	ip, sl
 800c4e6:	e7b3      	b.n	800c450 <__multiply+0x8a>
 800c4e8:	46e0      	mov	r8, ip
 800c4ea:	e7dd      	b.n	800c4a8 <__multiply+0xe2>
 800c4ec:	3e01      	subs	r6, #1
 800c4ee:	e799      	b.n	800c424 <__multiply+0x5e>

0800c4f0 <__pow5mult>:
 800c4f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4f4:	4615      	mov	r5, r2
 800c4f6:	f012 0203 	ands.w	r2, r2, #3
 800c4fa:	4606      	mov	r6, r0
 800c4fc:	460f      	mov	r7, r1
 800c4fe:	d007      	beq.n	800c510 <__pow5mult+0x20>
 800c500:	4c21      	ldr	r4, [pc, #132]	; (800c588 <__pow5mult+0x98>)
 800c502:	3a01      	subs	r2, #1
 800c504:	2300      	movs	r3, #0
 800c506:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c50a:	f7ff fe8c 	bl	800c226 <__multadd>
 800c50e:	4607      	mov	r7, r0
 800c510:	10ad      	asrs	r5, r5, #2
 800c512:	d035      	beq.n	800c580 <__pow5mult+0x90>
 800c514:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c516:	b93c      	cbnz	r4, 800c528 <__pow5mult+0x38>
 800c518:	2010      	movs	r0, #16
 800c51a:	f7fc fb55 	bl	8008bc8 <malloc>
 800c51e:	6270      	str	r0, [r6, #36]	; 0x24
 800c520:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c524:	6004      	str	r4, [r0, #0]
 800c526:	60c4      	str	r4, [r0, #12]
 800c528:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c52c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c530:	b94c      	cbnz	r4, 800c546 <__pow5mult+0x56>
 800c532:	f240 2171 	movw	r1, #625	; 0x271
 800c536:	4630      	mov	r0, r6
 800c538:	f7ff ff3c 	bl	800c3b4 <__i2b>
 800c53c:	2300      	movs	r3, #0
 800c53e:	4604      	mov	r4, r0
 800c540:	f8c8 0008 	str.w	r0, [r8, #8]
 800c544:	6003      	str	r3, [r0, #0]
 800c546:	f04f 0800 	mov.w	r8, #0
 800c54a:	07eb      	lsls	r3, r5, #31
 800c54c:	d50a      	bpl.n	800c564 <__pow5mult+0x74>
 800c54e:	4639      	mov	r1, r7
 800c550:	4622      	mov	r2, r4
 800c552:	4630      	mov	r0, r6
 800c554:	f7ff ff37 	bl	800c3c6 <__multiply>
 800c558:	4681      	mov	r9, r0
 800c55a:	4639      	mov	r1, r7
 800c55c:	4630      	mov	r0, r6
 800c55e:	f7ff fe4b 	bl	800c1f8 <_Bfree>
 800c562:	464f      	mov	r7, r9
 800c564:	106d      	asrs	r5, r5, #1
 800c566:	d00b      	beq.n	800c580 <__pow5mult+0x90>
 800c568:	6820      	ldr	r0, [r4, #0]
 800c56a:	b938      	cbnz	r0, 800c57c <__pow5mult+0x8c>
 800c56c:	4622      	mov	r2, r4
 800c56e:	4621      	mov	r1, r4
 800c570:	4630      	mov	r0, r6
 800c572:	f7ff ff28 	bl	800c3c6 <__multiply>
 800c576:	6020      	str	r0, [r4, #0]
 800c578:	f8c0 8000 	str.w	r8, [r0]
 800c57c:	4604      	mov	r4, r0
 800c57e:	e7e4      	b.n	800c54a <__pow5mult+0x5a>
 800c580:	4638      	mov	r0, r7
 800c582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c586:	bf00      	nop
 800c588:	0800e828 	.word	0x0800e828

0800c58c <__lshift>:
 800c58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c590:	460c      	mov	r4, r1
 800c592:	4607      	mov	r7, r0
 800c594:	4616      	mov	r6, r2
 800c596:	6923      	ldr	r3, [r4, #16]
 800c598:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c59c:	eb0a 0903 	add.w	r9, sl, r3
 800c5a0:	6849      	ldr	r1, [r1, #4]
 800c5a2:	68a3      	ldr	r3, [r4, #8]
 800c5a4:	f109 0501 	add.w	r5, r9, #1
 800c5a8:	42ab      	cmp	r3, r5
 800c5aa:	db32      	blt.n	800c612 <__lshift+0x86>
 800c5ac:	4638      	mov	r0, r7
 800c5ae:	f7ff fdef 	bl	800c190 <_Balloc>
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	4680      	mov	r8, r0
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	f100 0114 	add.w	r1, r0, #20
 800c5bc:	4553      	cmp	r3, sl
 800c5be:	db2b      	blt.n	800c618 <__lshift+0x8c>
 800c5c0:	6920      	ldr	r0, [r4, #16]
 800c5c2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c5c6:	f104 0314 	add.w	r3, r4, #20
 800c5ca:	f016 021f 	ands.w	r2, r6, #31
 800c5ce:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c5d2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c5d6:	d025      	beq.n	800c624 <__lshift+0x98>
 800c5d8:	2000      	movs	r0, #0
 800c5da:	f1c2 0e20 	rsb	lr, r2, #32
 800c5de:	468a      	mov	sl, r1
 800c5e0:	681e      	ldr	r6, [r3, #0]
 800c5e2:	4096      	lsls	r6, r2
 800c5e4:	4330      	orrs	r0, r6
 800c5e6:	f84a 0b04 	str.w	r0, [sl], #4
 800c5ea:	f853 0b04 	ldr.w	r0, [r3], #4
 800c5ee:	459c      	cmp	ip, r3
 800c5f0:	fa20 f00e 	lsr.w	r0, r0, lr
 800c5f4:	d814      	bhi.n	800c620 <__lshift+0x94>
 800c5f6:	6048      	str	r0, [r1, #4]
 800c5f8:	b108      	cbz	r0, 800c5fe <__lshift+0x72>
 800c5fa:	f109 0502 	add.w	r5, r9, #2
 800c5fe:	3d01      	subs	r5, #1
 800c600:	4638      	mov	r0, r7
 800c602:	f8c8 5010 	str.w	r5, [r8, #16]
 800c606:	4621      	mov	r1, r4
 800c608:	f7ff fdf6 	bl	800c1f8 <_Bfree>
 800c60c:	4640      	mov	r0, r8
 800c60e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c612:	3101      	adds	r1, #1
 800c614:	005b      	lsls	r3, r3, #1
 800c616:	e7c7      	b.n	800c5a8 <__lshift+0x1c>
 800c618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c61c:	3301      	adds	r3, #1
 800c61e:	e7cd      	b.n	800c5bc <__lshift+0x30>
 800c620:	4651      	mov	r1, sl
 800c622:	e7dc      	b.n	800c5de <__lshift+0x52>
 800c624:	3904      	subs	r1, #4
 800c626:	f853 2b04 	ldr.w	r2, [r3], #4
 800c62a:	459c      	cmp	ip, r3
 800c62c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c630:	d8f9      	bhi.n	800c626 <__lshift+0x9a>
 800c632:	e7e4      	b.n	800c5fe <__lshift+0x72>

0800c634 <__mcmp>:
 800c634:	6903      	ldr	r3, [r0, #16]
 800c636:	690a      	ldr	r2, [r1, #16]
 800c638:	b530      	push	{r4, r5, lr}
 800c63a:	1a9b      	subs	r3, r3, r2
 800c63c:	d10c      	bne.n	800c658 <__mcmp+0x24>
 800c63e:	0092      	lsls	r2, r2, #2
 800c640:	3014      	adds	r0, #20
 800c642:	3114      	adds	r1, #20
 800c644:	1884      	adds	r4, r0, r2
 800c646:	4411      	add	r1, r2
 800c648:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c64c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c650:	4295      	cmp	r5, r2
 800c652:	d003      	beq.n	800c65c <__mcmp+0x28>
 800c654:	d305      	bcc.n	800c662 <__mcmp+0x2e>
 800c656:	2301      	movs	r3, #1
 800c658:	4618      	mov	r0, r3
 800c65a:	bd30      	pop	{r4, r5, pc}
 800c65c:	42a0      	cmp	r0, r4
 800c65e:	d3f3      	bcc.n	800c648 <__mcmp+0x14>
 800c660:	e7fa      	b.n	800c658 <__mcmp+0x24>
 800c662:	f04f 33ff 	mov.w	r3, #4294967295
 800c666:	e7f7      	b.n	800c658 <__mcmp+0x24>

0800c668 <__mdiff>:
 800c668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c66c:	460d      	mov	r5, r1
 800c66e:	4607      	mov	r7, r0
 800c670:	4611      	mov	r1, r2
 800c672:	4628      	mov	r0, r5
 800c674:	4614      	mov	r4, r2
 800c676:	f7ff ffdd 	bl	800c634 <__mcmp>
 800c67a:	1e06      	subs	r6, r0, #0
 800c67c:	d108      	bne.n	800c690 <__mdiff+0x28>
 800c67e:	4631      	mov	r1, r6
 800c680:	4638      	mov	r0, r7
 800c682:	f7ff fd85 	bl	800c190 <_Balloc>
 800c686:	2301      	movs	r3, #1
 800c688:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c68c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c690:	bfa4      	itt	ge
 800c692:	4623      	movge	r3, r4
 800c694:	462c      	movge	r4, r5
 800c696:	4638      	mov	r0, r7
 800c698:	6861      	ldr	r1, [r4, #4]
 800c69a:	bfa6      	itte	ge
 800c69c:	461d      	movge	r5, r3
 800c69e:	2600      	movge	r6, #0
 800c6a0:	2601      	movlt	r6, #1
 800c6a2:	f7ff fd75 	bl	800c190 <_Balloc>
 800c6a6:	f04f 0e00 	mov.w	lr, #0
 800c6aa:	60c6      	str	r6, [r0, #12]
 800c6ac:	692b      	ldr	r3, [r5, #16]
 800c6ae:	6926      	ldr	r6, [r4, #16]
 800c6b0:	f104 0214 	add.w	r2, r4, #20
 800c6b4:	f105 0914 	add.w	r9, r5, #20
 800c6b8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c6bc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c6c0:	f100 0114 	add.w	r1, r0, #20
 800c6c4:	f852 ab04 	ldr.w	sl, [r2], #4
 800c6c8:	f859 5b04 	ldr.w	r5, [r9], #4
 800c6cc:	fa1f f38a 	uxth.w	r3, sl
 800c6d0:	4473      	add	r3, lr
 800c6d2:	b2ac      	uxth	r4, r5
 800c6d4:	1b1b      	subs	r3, r3, r4
 800c6d6:	0c2c      	lsrs	r4, r5, #16
 800c6d8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800c6dc:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800c6e0:	b29b      	uxth	r3, r3
 800c6e2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800c6e6:	45c8      	cmp	r8, r9
 800c6e8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800c6ec:	4694      	mov	ip, r2
 800c6ee:	f841 4b04 	str.w	r4, [r1], #4
 800c6f2:	d8e7      	bhi.n	800c6c4 <__mdiff+0x5c>
 800c6f4:	45bc      	cmp	ip, r7
 800c6f6:	d304      	bcc.n	800c702 <__mdiff+0x9a>
 800c6f8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c6fc:	b183      	cbz	r3, 800c720 <__mdiff+0xb8>
 800c6fe:	6106      	str	r6, [r0, #16]
 800c700:	e7c4      	b.n	800c68c <__mdiff+0x24>
 800c702:	f85c 4b04 	ldr.w	r4, [ip], #4
 800c706:	b2a2      	uxth	r2, r4
 800c708:	4472      	add	r2, lr
 800c70a:	1413      	asrs	r3, r2, #16
 800c70c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c710:	b292      	uxth	r2, r2
 800c712:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c716:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c71a:	f841 2b04 	str.w	r2, [r1], #4
 800c71e:	e7e9      	b.n	800c6f4 <__mdiff+0x8c>
 800c720:	3e01      	subs	r6, #1
 800c722:	e7e9      	b.n	800c6f8 <__mdiff+0x90>

0800c724 <__ulp>:
 800c724:	4b10      	ldr	r3, [pc, #64]	; (800c768 <__ulp+0x44>)
 800c726:	400b      	ands	r3, r1
 800c728:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	dd02      	ble.n	800c736 <__ulp+0x12>
 800c730:	2000      	movs	r0, #0
 800c732:	4619      	mov	r1, r3
 800c734:	4770      	bx	lr
 800c736:	425b      	negs	r3, r3
 800c738:	151b      	asrs	r3, r3, #20
 800c73a:	2b13      	cmp	r3, #19
 800c73c:	f04f 0000 	mov.w	r0, #0
 800c740:	f04f 0100 	mov.w	r1, #0
 800c744:	dc04      	bgt.n	800c750 <__ulp+0x2c>
 800c746:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c74a:	fa42 f103 	asr.w	r1, r2, r3
 800c74e:	4770      	bx	lr
 800c750:	2201      	movs	r2, #1
 800c752:	3b14      	subs	r3, #20
 800c754:	2b1e      	cmp	r3, #30
 800c756:	bfce      	itee	gt
 800c758:	4613      	movgt	r3, r2
 800c75a:	f1c3 031f 	rsble	r3, r3, #31
 800c75e:	fa02 f303 	lslle.w	r3, r2, r3
 800c762:	4618      	mov	r0, r3
 800c764:	4770      	bx	lr
 800c766:	bf00      	nop
 800c768:	7ff00000 	.word	0x7ff00000

0800c76c <__b2d>:
 800c76c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c770:	6907      	ldr	r7, [r0, #16]
 800c772:	f100 0914 	add.w	r9, r0, #20
 800c776:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800c77a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800c77e:	f1a7 0804 	sub.w	r8, r7, #4
 800c782:	4630      	mov	r0, r6
 800c784:	f7ff fdc8 	bl	800c318 <__hi0bits>
 800c788:	f1c0 0320 	rsb	r3, r0, #32
 800c78c:	280a      	cmp	r0, #10
 800c78e:	600b      	str	r3, [r1, #0]
 800c790:	491e      	ldr	r1, [pc, #120]	; (800c80c <__b2d+0xa0>)
 800c792:	dc17      	bgt.n	800c7c4 <__b2d+0x58>
 800c794:	45c1      	cmp	r9, r8
 800c796:	bf28      	it	cs
 800c798:	2200      	movcs	r2, #0
 800c79a:	f1c0 0c0b 	rsb	ip, r0, #11
 800c79e:	fa26 f30c 	lsr.w	r3, r6, ip
 800c7a2:	bf38      	it	cc
 800c7a4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c7a8:	ea43 0501 	orr.w	r5, r3, r1
 800c7ac:	f100 0315 	add.w	r3, r0, #21
 800c7b0:	fa06 f303 	lsl.w	r3, r6, r3
 800c7b4:	fa22 f20c 	lsr.w	r2, r2, ip
 800c7b8:	ea43 0402 	orr.w	r4, r3, r2
 800c7bc:	4620      	mov	r0, r4
 800c7be:	4629      	mov	r1, r5
 800c7c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7c4:	45c1      	cmp	r9, r8
 800c7c6:	bf3a      	itte	cc
 800c7c8:	f1a7 0808 	subcc.w	r8, r7, #8
 800c7cc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c7d0:	2200      	movcs	r2, #0
 800c7d2:	f1b0 030b 	subs.w	r3, r0, #11
 800c7d6:	d015      	beq.n	800c804 <__b2d+0x98>
 800c7d8:	409e      	lsls	r6, r3
 800c7da:	f1c3 0720 	rsb	r7, r3, #32
 800c7de:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800c7e2:	fa22 f107 	lsr.w	r1, r2, r7
 800c7e6:	45c8      	cmp	r8, r9
 800c7e8:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800c7ec:	ea46 0501 	orr.w	r5, r6, r1
 800c7f0:	bf94      	ite	ls
 800c7f2:	2100      	movls	r1, #0
 800c7f4:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800c7f8:	fa02 f003 	lsl.w	r0, r2, r3
 800c7fc:	40f9      	lsrs	r1, r7
 800c7fe:	ea40 0401 	orr.w	r4, r0, r1
 800c802:	e7db      	b.n	800c7bc <__b2d+0x50>
 800c804:	ea46 0501 	orr.w	r5, r6, r1
 800c808:	4614      	mov	r4, r2
 800c80a:	e7d7      	b.n	800c7bc <__b2d+0x50>
 800c80c:	3ff00000 	.word	0x3ff00000

0800c810 <__d2b>:
 800c810:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c814:	461c      	mov	r4, r3
 800c816:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800c81a:	2101      	movs	r1, #1
 800c81c:	4690      	mov	r8, r2
 800c81e:	f7ff fcb7 	bl	800c190 <_Balloc>
 800c822:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800c826:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800c82a:	4607      	mov	r7, r0
 800c82c:	bb34      	cbnz	r4, 800c87c <__d2b+0x6c>
 800c82e:	9201      	str	r2, [sp, #4]
 800c830:	f1b8 0200 	subs.w	r2, r8, #0
 800c834:	d027      	beq.n	800c886 <__d2b+0x76>
 800c836:	a802      	add	r0, sp, #8
 800c838:	f840 2d08 	str.w	r2, [r0, #-8]!
 800c83c:	f7ff fd8b 	bl	800c356 <__lo0bits>
 800c840:	9900      	ldr	r1, [sp, #0]
 800c842:	b1f0      	cbz	r0, 800c882 <__d2b+0x72>
 800c844:	9a01      	ldr	r2, [sp, #4]
 800c846:	f1c0 0320 	rsb	r3, r0, #32
 800c84a:	fa02 f303 	lsl.w	r3, r2, r3
 800c84e:	430b      	orrs	r3, r1
 800c850:	40c2      	lsrs	r2, r0
 800c852:	617b      	str	r3, [r7, #20]
 800c854:	9201      	str	r2, [sp, #4]
 800c856:	9b01      	ldr	r3, [sp, #4]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	bf14      	ite	ne
 800c85c:	2102      	movne	r1, #2
 800c85e:	2101      	moveq	r1, #1
 800c860:	61bb      	str	r3, [r7, #24]
 800c862:	6139      	str	r1, [r7, #16]
 800c864:	b1c4      	cbz	r4, 800c898 <__d2b+0x88>
 800c866:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c86a:	4404      	add	r4, r0
 800c86c:	6034      	str	r4, [r6, #0]
 800c86e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c872:	6028      	str	r0, [r5, #0]
 800c874:	4638      	mov	r0, r7
 800c876:	b002      	add	sp, #8
 800c878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c87c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c880:	e7d5      	b.n	800c82e <__d2b+0x1e>
 800c882:	6179      	str	r1, [r7, #20]
 800c884:	e7e7      	b.n	800c856 <__d2b+0x46>
 800c886:	a801      	add	r0, sp, #4
 800c888:	f7ff fd65 	bl	800c356 <__lo0bits>
 800c88c:	2101      	movs	r1, #1
 800c88e:	9b01      	ldr	r3, [sp, #4]
 800c890:	6139      	str	r1, [r7, #16]
 800c892:	617b      	str	r3, [r7, #20]
 800c894:	3020      	adds	r0, #32
 800c896:	e7e5      	b.n	800c864 <__d2b+0x54>
 800c898:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c89c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c8a0:	6030      	str	r0, [r6, #0]
 800c8a2:	6918      	ldr	r0, [r3, #16]
 800c8a4:	f7ff fd38 	bl	800c318 <__hi0bits>
 800c8a8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c8ac:	e7e1      	b.n	800c872 <__d2b+0x62>

0800c8ae <__ratio>:
 800c8ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b2:	4688      	mov	r8, r1
 800c8b4:	4669      	mov	r1, sp
 800c8b6:	4681      	mov	r9, r0
 800c8b8:	f7ff ff58 	bl	800c76c <__b2d>
 800c8bc:	468b      	mov	fp, r1
 800c8be:	4606      	mov	r6, r0
 800c8c0:	460f      	mov	r7, r1
 800c8c2:	4640      	mov	r0, r8
 800c8c4:	a901      	add	r1, sp, #4
 800c8c6:	f7ff ff51 	bl	800c76c <__b2d>
 800c8ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c8ce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c8d2:	460d      	mov	r5, r1
 800c8d4:	eba3 0c02 	sub.w	ip, r3, r2
 800c8d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c8dc:	1a9b      	subs	r3, r3, r2
 800c8de:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	bfd5      	itete	le
 800c8e6:	460a      	movle	r2, r1
 800c8e8:	463a      	movgt	r2, r7
 800c8ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c8ee:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800c8f2:	bfd8      	it	le
 800c8f4:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800c8f8:	462b      	mov	r3, r5
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	4659      	mov	r1, fp
 800c8fe:	4630      	mov	r0, r6
 800c900:	f7f3 ff80 	bl	8000804 <__aeabi_ddiv>
 800c904:	b003      	add	sp, #12
 800c906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c90a <__copybits>:
 800c90a:	3901      	subs	r1, #1
 800c90c:	b510      	push	{r4, lr}
 800c90e:	1149      	asrs	r1, r1, #5
 800c910:	6914      	ldr	r4, [r2, #16]
 800c912:	3101      	adds	r1, #1
 800c914:	f102 0314 	add.w	r3, r2, #20
 800c918:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c91c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c920:	42a3      	cmp	r3, r4
 800c922:	4602      	mov	r2, r0
 800c924:	d303      	bcc.n	800c92e <__copybits+0x24>
 800c926:	2300      	movs	r3, #0
 800c928:	428a      	cmp	r2, r1
 800c92a:	d305      	bcc.n	800c938 <__copybits+0x2e>
 800c92c:	bd10      	pop	{r4, pc}
 800c92e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c932:	f840 2b04 	str.w	r2, [r0], #4
 800c936:	e7f3      	b.n	800c920 <__copybits+0x16>
 800c938:	f842 3b04 	str.w	r3, [r2], #4
 800c93c:	e7f4      	b.n	800c928 <__copybits+0x1e>

0800c93e <__any_on>:
 800c93e:	f100 0214 	add.w	r2, r0, #20
 800c942:	6900      	ldr	r0, [r0, #16]
 800c944:	114b      	asrs	r3, r1, #5
 800c946:	4298      	cmp	r0, r3
 800c948:	b510      	push	{r4, lr}
 800c94a:	db11      	blt.n	800c970 <__any_on+0x32>
 800c94c:	dd0a      	ble.n	800c964 <__any_on+0x26>
 800c94e:	f011 011f 	ands.w	r1, r1, #31
 800c952:	d007      	beq.n	800c964 <__any_on+0x26>
 800c954:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c958:	fa24 f001 	lsr.w	r0, r4, r1
 800c95c:	fa00 f101 	lsl.w	r1, r0, r1
 800c960:	428c      	cmp	r4, r1
 800c962:	d10b      	bne.n	800c97c <__any_on+0x3e>
 800c964:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c968:	4293      	cmp	r3, r2
 800c96a:	d803      	bhi.n	800c974 <__any_on+0x36>
 800c96c:	2000      	movs	r0, #0
 800c96e:	bd10      	pop	{r4, pc}
 800c970:	4603      	mov	r3, r0
 800c972:	e7f7      	b.n	800c964 <__any_on+0x26>
 800c974:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c978:	2900      	cmp	r1, #0
 800c97a:	d0f5      	beq.n	800c968 <__any_on+0x2a>
 800c97c:	2001      	movs	r0, #1
 800c97e:	e7f6      	b.n	800c96e <__any_on+0x30>

0800c980 <__ssputs_r>:
 800c980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c984:	688e      	ldr	r6, [r1, #8]
 800c986:	4682      	mov	sl, r0
 800c988:	429e      	cmp	r6, r3
 800c98a:	460c      	mov	r4, r1
 800c98c:	4690      	mov	r8, r2
 800c98e:	4699      	mov	r9, r3
 800c990:	d837      	bhi.n	800ca02 <__ssputs_r+0x82>
 800c992:	898a      	ldrh	r2, [r1, #12]
 800c994:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c998:	d031      	beq.n	800c9fe <__ssputs_r+0x7e>
 800c99a:	2302      	movs	r3, #2
 800c99c:	6825      	ldr	r5, [r4, #0]
 800c99e:	6909      	ldr	r1, [r1, #16]
 800c9a0:	1a6f      	subs	r7, r5, r1
 800c9a2:	6965      	ldr	r5, [r4, #20]
 800c9a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c9a8:	fb95 f5f3 	sdiv	r5, r5, r3
 800c9ac:	f109 0301 	add.w	r3, r9, #1
 800c9b0:	443b      	add	r3, r7
 800c9b2:	429d      	cmp	r5, r3
 800c9b4:	bf38      	it	cc
 800c9b6:	461d      	movcc	r5, r3
 800c9b8:	0553      	lsls	r3, r2, #21
 800c9ba:	d530      	bpl.n	800ca1e <__ssputs_r+0x9e>
 800c9bc:	4629      	mov	r1, r5
 800c9be:	f7fc f98f 	bl	8008ce0 <_malloc_r>
 800c9c2:	4606      	mov	r6, r0
 800c9c4:	b950      	cbnz	r0, 800c9dc <__ssputs_r+0x5c>
 800c9c6:	230c      	movs	r3, #12
 800c9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9cc:	f8ca 3000 	str.w	r3, [sl]
 800c9d0:	89a3      	ldrh	r3, [r4, #12]
 800c9d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9d6:	81a3      	strh	r3, [r4, #12]
 800c9d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9dc:	463a      	mov	r2, r7
 800c9de:	6921      	ldr	r1, [r4, #16]
 800c9e0:	f7fc f911 	bl	8008c06 <memcpy>
 800c9e4:	89a3      	ldrh	r3, [r4, #12]
 800c9e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c9ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9ee:	81a3      	strh	r3, [r4, #12]
 800c9f0:	6126      	str	r6, [r4, #16]
 800c9f2:	443e      	add	r6, r7
 800c9f4:	6026      	str	r6, [r4, #0]
 800c9f6:	464e      	mov	r6, r9
 800c9f8:	6165      	str	r5, [r4, #20]
 800c9fa:	1bed      	subs	r5, r5, r7
 800c9fc:	60a5      	str	r5, [r4, #8]
 800c9fe:	454e      	cmp	r6, r9
 800ca00:	d900      	bls.n	800ca04 <__ssputs_r+0x84>
 800ca02:	464e      	mov	r6, r9
 800ca04:	4632      	mov	r2, r6
 800ca06:	4641      	mov	r1, r8
 800ca08:	6820      	ldr	r0, [r4, #0]
 800ca0a:	f000 faef 	bl	800cfec <memmove>
 800ca0e:	68a3      	ldr	r3, [r4, #8]
 800ca10:	2000      	movs	r0, #0
 800ca12:	1b9b      	subs	r3, r3, r6
 800ca14:	60a3      	str	r3, [r4, #8]
 800ca16:	6823      	ldr	r3, [r4, #0]
 800ca18:	441e      	add	r6, r3
 800ca1a:	6026      	str	r6, [r4, #0]
 800ca1c:	e7dc      	b.n	800c9d8 <__ssputs_r+0x58>
 800ca1e:	462a      	mov	r2, r5
 800ca20:	f000 fafd 	bl	800d01e <_realloc_r>
 800ca24:	4606      	mov	r6, r0
 800ca26:	2800      	cmp	r0, #0
 800ca28:	d1e2      	bne.n	800c9f0 <__ssputs_r+0x70>
 800ca2a:	6921      	ldr	r1, [r4, #16]
 800ca2c:	4650      	mov	r0, sl
 800ca2e:	f7fc f90b 	bl	8008c48 <_free_r>
 800ca32:	e7c8      	b.n	800c9c6 <__ssputs_r+0x46>

0800ca34 <_svfiprintf_r>:
 800ca34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca38:	461d      	mov	r5, r3
 800ca3a:	898b      	ldrh	r3, [r1, #12]
 800ca3c:	b09d      	sub	sp, #116	; 0x74
 800ca3e:	061f      	lsls	r7, r3, #24
 800ca40:	4680      	mov	r8, r0
 800ca42:	460c      	mov	r4, r1
 800ca44:	4616      	mov	r6, r2
 800ca46:	d50f      	bpl.n	800ca68 <_svfiprintf_r+0x34>
 800ca48:	690b      	ldr	r3, [r1, #16]
 800ca4a:	b96b      	cbnz	r3, 800ca68 <_svfiprintf_r+0x34>
 800ca4c:	2140      	movs	r1, #64	; 0x40
 800ca4e:	f7fc f947 	bl	8008ce0 <_malloc_r>
 800ca52:	6020      	str	r0, [r4, #0]
 800ca54:	6120      	str	r0, [r4, #16]
 800ca56:	b928      	cbnz	r0, 800ca64 <_svfiprintf_r+0x30>
 800ca58:	230c      	movs	r3, #12
 800ca5a:	f8c8 3000 	str.w	r3, [r8]
 800ca5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca62:	e0c8      	b.n	800cbf6 <_svfiprintf_r+0x1c2>
 800ca64:	2340      	movs	r3, #64	; 0x40
 800ca66:	6163      	str	r3, [r4, #20]
 800ca68:	2300      	movs	r3, #0
 800ca6a:	9309      	str	r3, [sp, #36]	; 0x24
 800ca6c:	2320      	movs	r3, #32
 800ca6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca72:	2330      	movs	r3, #48	; 0x30
 800ca74:	f04f 0b01 	mov.w	fp, #1
 800ca78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca7c:	9503      	str	r5, [sp, #12]
 800ca7e:	4637      	mov	r7, r6
 800ca80:	463d      	mov	r5, r7
 800ca82:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ca86:	b10b      	cbz	r3, 800ca8c <_svfiprintf_r+0x58>
 800ca88:	2b25      	cmp	r3, #37	; 0x25
 800ca8a:	d13e      	bne.n	800cb0a <_svfiprintf_r+0xd6>
 800ca8c:	ebb7 0a06 	subs.w	sl, r7, r6
 800ca90:	d00b      	beq.n	800caaa <_svfiprintf_r+0x76>
 800ca92:	4653      	mov	r3, sl
 800ca94:	4632      	mov	r2, r6
 800ca96:	4621      	mov	r1, r4
 800ca98:	4640      	mov	r0, r8
 800ca9a:	f7ff ff71 	bl	800c980 <__ssputs_r>
 800ca9e:	3001      	adds	r0, #1
 800caa0:	f000 80a4 	beq.w	800cbec <_svfiprintf_r+0x1b8>
 800caa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caa6:	4453      	add	r3, sl
 800caa8:	9309      	str	r3, [sp, #36]	; 0x24
 800caaa:	783b      	ldrb	r3, [r7, #0]
 800caac:	2b00      	cmp	r3, #0
 800caae:	f000 809d 	beq.w	800cbec <_svfiprintf_r+0x1b8>
 800cab2:	2300      	movs	r3, #0
 800cab4:	f04f 32ff 	mov.w	r2, #4294967295
 800cab8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cabc:	9304      	str	r3, [sp, #16]
 800cabe:	9307      	str	r3, [sp, #28]
 800cac0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cac4:	931a      	str	r3, [sp, #104]	; 0x68
 800cac6:	462f      	mov	r7, r5
 800cac8:	2205      	movs	r2, #5
 800caca:	f817 1b01 	ldrb.w	r1, [r7], #1
 800cace:	4850      	ldr	r0, [pc, #320]	; (800cc10 <_svfiprintf_r+0x1dc>)
 800cad0:	f7ff fb4e 	bl	800c170 <memchr>
 800cad4:	9b04      	ldr	r3, [sp, #16]
 800cad6:	b9d0      	cbnz	r0, 800cb0e <_svfiprintf_r+0xda>
 800cad8:	06d9      	lsls	r1, r3, #27
 800cada:	bf44      	itt	mi
 800cadc:	2220      	movmi	r2, #32
 800cade:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cae2:	071a      	lsls	r2, r3, #28
 800cae4:	bf44      	itt	mi
 800cae6:	222b      	movmi	r2, #43	; 0x2b
 800cae8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800caec:	782a      	ldrb	r2, [r5, #0]
 800caee:	2a2a      	cmp	r2, #42	; 0x2a
 800caf0:	d015      	beq.n	800cb1e <_svfiprintf_r+0xea>
 800caf2:	462f      	mov	r7, r5
 800caf4:	2000      	movs	r0, #0
 800caf6:	250a      	movs	r5, #10
 800caf8:	9a07      	ldr	r2, [sp, #28]
 800cafa:	4639      	mov	r1, r7
 800cafc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb00:	3b30      	subs	r3, #48	; 0x30
 800cb02:	2b09      	cmp	r3, #9
 800cb04:	d94d      	bls.n	800cba2 <_svfiprintf_r+0x16e>
 800cb06:	b1b8      	cbz	r0, 800cb38 <_svfiprintf_r+0x104>
 800cb08:	e00f      	b.n	800cb2a <_svfiprintf_r+0xf6>
 800cb0a:	462f      	mov	r7, r5
 800cb0c:	e7b8      	b.n	800ca80 <_svfiprintf_r+0x4c>
 800cb0e:	4a40      	ldr	r2, [pc, #256]	; (800cc10 <_svfiprintf_r+0x1dc>)
 800cb10:	463d      	mov	r5, r7
 800cb12:	1a80      	subs	r0, r0, r2
 800cb14:	fa0b f000 	lsl.w	r0, fp, r0
 800cb18:	4318      	orrs	r0, r3
 800cb1a:	9004      	str	r0, [sp, #16]
 800cb1c:	e7d3      	b.n	800cac6 <_svfiprintf_r+0x92>
 800cb1e:	9a03      	ldr	r2, [sp, #12]
 800cb20:	1d11      	adds	r1, r2, #4
 800cb22:	6812      	ldr	r2, [r2, #0]
 800cb24:	9103      	str	r1, [sp, #12]
 800cb26:	2a00      	cmp	r2, #0
 800cb28:	db01      	blt.n	800cb2e <_svfiprintf_r+0xfa>
 800cb2a:	9207      	str	r2, [sp, #28]
 800cb2c:	e004      	b.n	800cb38 <_svfiprintf_r+0x104>
 800cb2e:	4252      	negs	r2, r2
 800cb30:	f043 0302 	orr.w	r3, r3, #2
 800cb34:	9207      	str	r2, [sp, #28]
 800cb36:	9304      	str	r3, [sp, #16]
 800cb38:	783b      	ldrb	r3, [r7, #0]
 800cb3a:	2b2e      	cmp	r3, #46	; 0x2e
 800cb3c:	d10c      	bne.n	800cb58 <_svfiprintf_r+0x124>
 800cb3e:	787b      	ldrb	r3, [r7, #1]
 800cb40:	2b2a      	cmp	r3, #42	; 0x2a
 800cb42:	d133      	bne.n	800cbac <_svfiprintf_r+0x178>
 800cb44:	9b03      	ldr	r3, [sp, #12]
 800cb46:	3702      	adds	r7, #2
 800cb48:	1d1a      	adds	r2, r3, #4
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	9203      	str	r2, [sp, #12]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	bfb8      	it	lt
 800cb52:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb56:	9305      	str	r3, [sp, #20]
 800cb58:	4d2e      	ldr	r5, [pc, #184]	; (800cc14 <_svfiprintf_r+0x1e0>)
 800cb5a:	2203      	movs	r2, #3
 800cb5c:	7839      	ldrb	r1, [r7, #0]
 800cb5e:	4628      	mov	r0, r5
 800cb60:	f7ff fb06 	bl	800c170 <memchr>
 800cb64:	b138      	cbz	r0, 800cb76 <_svfiprintf_r+0x142>
 800cb66:	2340      	movs	r3, #64	; 0x40
 800cb68:	1b40      	subs	r0, r0, r5
 800cb6a:	fa03 f000 	lsl.w	r0, r3, r0
 800cb6e:	9b04      	ldr	r3, [sp, #16]
 800cb70:	3701      	adds	r7, #1
 800cb72:	4303      	orrs	r3, r0
 800cb74:	9304      	str	r3, [sp, #16]
 800cb76:	7839      	ldrb	r1, [r7, #0]
 800cb78:	2206      	movs	r2, #6
 800cb7a:	4827      	ldr	r0, [pc, #156]	; (800cc18 <_svfiprintf_r+0x1e4>)
 800cb7c:	1c7e      	adds	r6, r7, #1
 800cb7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb82:	f7ff faf5 	bl	800c170 <memchr>
 800cb86:	2800      	cmp	r0, #0
 800cb88:	d038      	beq.n	800cbfc <_svfiprintf_r+0x1c8>
 800cb8a:	4b24      	ldr	r3, [pc, #144]	; (800cc1c <_svfiprintf_r+0x1e8>)
 800cb8c:	bb13      	cbnz	r3, 800cbd4 <_svfiprintf_r+0x1a0>
 800cb8e:	9b03      	ldr	r3, [sp, #12]
 800cb90:	3307      	adds	r3, #7
 800cb92:	f023 0307 	bic.w	r3, r3, #7
 800cb96:	3308      	adds	r3, #8
 800cb98:	9303      	str	r3, [sp, #12]
 800cb9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb9c:	444b      	add	r3, r9
 800cb9e:	9309      	str	r3, [sp, #36]	; 0x24
 800cba0:	e76d      	b.n	800ca7e <_svfiprintf_r+0x4a>
 800cba2:	fb05 3202 	mla	r2, r5, r2, r3
 800cba6:	2001      	movs	r0, #1
 800cba8:	460f      	mov	r7, r1
 800cbaa:	e7a6      	b.n	800cafa <_svfiprintf_r+0xc6>
 800cbac:	2300      	movs	r3, #0
 800cbae:	250a      	movs	r5, #10
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	3701      	adds	r7, #1
 800cbb4:	9305      	str	r3, [sp, #20]
 800cbb6:	4638      	mov	r0, r7
 800cbb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbbc:	3a30      	subs	r2, #48	; 0x30
 800cbbe:	2a09      	cmp	r2, #9
 800cbc0:	d903      	bls.n	800cbca <_svfiprintf_r+0x196>
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d0c8      	beq.n	800cb58 <_svfiprintf_r+0x124>
 800cbc6:	9105      	str	r1, [sp, #20]
 800cbc8:	e7c6      	b.n	800cb58 <_svfiprintf_r+0x124>
 800cbca:	fb05 2101 	mla	r1, r5, r1, r2
 800cbce:	2301      	movs	r3, #1
 800cbd0:	4607      	mov	r7, r0
 800cbd2:	e7f0      	b.n	800cbb6 <_svfiprintf_r+0x182>
 800cbd4:	ab03      	add	r3, sp, #12
 800cbd6:	9300      	str	r3, [sp, #0]
 800cbd8:	4622      	mov	r2, r4
 800cbda:	4b11      	ldr	r3, [pc, #68]	; (800cc20 <_svfiprintf_r+0x1ec>)
 800cbdc:	a904      	add	r1, sp, #16
 800cbde:	4640      	mov	r0, r8
 800cbe0:	f7fc f96a 	bl	8008eb8 <_printf_float>
 800cbe4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cbe8:	4681      	mov	r9, r0
 800cbea:	d1d6      	bne.n	800cb9a <_svfiprintf_r+0x166>
 800cbec:	89a3      	ldrh	r3, [r4, #12]
 800cbee:	065b      	lsls	r3, r3, #25
 800cbf0:	f53f af35 	bmi.w	800ca5e <_svfiprintf_r+0x2a>
 800cbf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbf6:	b01d      	add	sp, #116	; 0x74
 800cbf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbfc:	ab03      	add	r3, sp, #12
 800cbfe:	9300      	str	r3, [sp, #0]
 800cc00:	4622      	mov	r2, r4
 800cc02:	4b07      	ldr	r3, [pc, #28]	; (800cc20 <_svfiprintf_r+0x1ec>)
 800cc04:	a904      	add	r1, sp, #16
 800cc06:	4640      	mov	r0, r8
 800cc08:	f7fc fc02 	bl	8009410 <_printf_i>
 800cc0c:	e7ea      	b.n	800cbe4 <_svfiprintf_r+0x1b0>
 800cc0e:	bf00      	nop
 800cc10:	0800e834 	.word	0x0800e834
 800cc14:	0800e83a 	.word	0x0800e83a
 800cc18:	0800e83e 	.word	0x0800e83e
 800cc1c:	08008eb9 	.word	0x08008eb9
 800cc20:	0800c981 	.word	0x0800c981

0800cc24 <__sfputc_r>:
 800cc24:	6893      	ldr	r3, [r2, #8]
 800cc26:	b410      	push	{r4}
 800cc28:	3b01      	subs	r3, #1
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	6093      	str	r3, [r2, #8]
 800cc2e:	da07      	bge.n	800cc40 <__sfputc_r+0x1c>
 800cc30:	6994      	ldr	r4, [r2, #24]
 800cc32:	42a3      	cmp	r3, r4
 800cc34:	db01      	blt.n	800cc3a <__sfputc_r+0x16>
 800cc36:	290a      	cmp	r1, #10
 800cc38:	d102      	bne.n	800cc40 <__sfputc_r+0x1c>
 800cc3a:	bc10      	pop	{r4}
 800cc3c:	f7fd be6a 	b.w	800a914 <__swbuf_r>
 800cc40:	6813      	ldr	r3, [r2, #0]
 800cc42:	1c58      	adds	r0, r3, #1
 800cc44:	6010      	str	r0, [r2, #0]
 800cc46:	7019      	strb	r1, [r3, #0]
 800cc48:	4608      	mov	r0, r1
 800cc4a:	bc10      	pop	{r4}
 800cc4c:	4770      	bx	lr

0800cc4e <__sfputs_r>:
 800cc4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc50:	4606      	mov	r6, r0
 800cc52:	460f      	mov	r7, r1
 800cc54:	4614      	mov	r4, r2
 800cc56:	18d5      	adds	r5, r2, r3
 800cc58:	42ac      	cmp	r4, r5
 800cc5a:	d101      	bne.n	800cc60 <__sfputs_r+0x12>
 800cc5c:	2000      	movs	r0, #0
 800cc5e:	e007      	b.n	800cc70 <__sfputs_r+0x22>
 800cc60:	463a      	mov	r2, r7
 800cc62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc66:	4630      	mov	r0, r6
 800cc68:	f7ff ffdc 	bl	800cc24 <__sfputc_r>
 800cc6c:	1c43      	adds	r3, r0, #1
 800cc6e:	d1f3      	bne.n	800cc58 <__sfputs_r+0xa>
 800cc70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc74 <_vfiprintf_r>:
 800cc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc78:	460c      	mov	r4, r1
 800cc7a:	b09d      	sub	sp, #116	; 0x74
 800cc7c:	4617      	mov	r7, r2
 800cc7e:	461d      	mov	r5, r3
 800cc80:	4606      	mov	r6, r0
 800cc82:	b118      	cbz	r0, 800cc8c <_vfiprintf_r+0x18>
 800cc84:	6983      	ldr	r3, [r0, #24]
 800cc86:	b90b      	cbnz	r3, 800cc8c <_vfiprintf_r+0x18>
 800cc88:	f7fe fe36 	bl	800b8f8 <__sinit>
 800cc8c:	4b7c      	ldr	r3, [pc, #496]	; (800ce80 <_vfiprintf_r+0x20c>)
 800cc8e:	429c      	cmp	r4, r3
 800cc90:	d158      	bne.n	800cd44 <_vfiprintf_r+0xd0>
 800cc92:	6874      	ldr	r4, [r6, #4]
 800cc94:	89a3      	ldrh	r3, [r4, #12]
 800cc96:	0718      	lsls	r0, r3, #28
 800cc98:	d55e      	bpl.n	800cd58 <_vfiprintf_r+0xe4>
 800cc9a:	6923      	ldr	r3, [r4, #16]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d05b      	beq.n	800cd58 <_vfiprintf_r+0xe4>
 800cca0:	2300      	movs	r3, #0
 800cca2:	9309      	str	r3, [sp, #36]	; 0x24
 800cca4:	2320      	movs	r3, #32
 800cca6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ccaa:	2330      	movs	r3, #48	; 0x30
 800ccac:	f04f 0b01 	mov.w	fp, #1
 800ccb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccb4:	9503      	str	r5, [sp, #12]
 800ccb6:	46b8      	mov	r8, r7
 800ccb8:	4645      	mov	r5, r8
 800ccba:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ccbe:	b10b      	cbz	r3, 800ccc4 <_vfiprintf_r+0x50>
 800ccc0:	2b25      	cmp	r3, #37	; 0x25
 800ccc2:	d154      	bne.n	800cd6e <_vfiprintf_r+0xfa>
 800ccc4:	ebb8 0a07 	subs.w	sl, r8, r7
 800ccc8:	d00b      	beq.n	800cce2 <_vfiprintf_r+0x6e>
 800ccca:	4653      	mov	r3, sl
 800cccc:	463a      	mov	r2, r7
 800ccce:	4621      	mov	r1, r4
 800ccd0:	4630      	mov	r0, r6
 800ccd2:	f7ff ffbc 	bl	800cc4e <__sfputs_r>
 800ccd6:	3001      	adds	r0, #1
 800ccd8:	f000 80c2 	beq.w	800ce60 <_vfiprintf_r+0x1ec>
 800ccdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccde:	4453      	add	r3, sl
 800cce0:	9309      	str	r3, [sp, #36]	; 0x24
 800cce2:	f898 3000 	ldrb.w	r3, [r8]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	f000 80ba 	beq.w	800ce60 <_vfiprintf_r+0x1ec>
 800ccec:	2300      	movs	r3, #0
 800ccee:	f04f 32ff 	mov.w	r2, #4294967295
 800ccf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccf6:	9304      	str	r3, [sp, #16]
 800ccf8:	9307      	str	r3, [sp, #28]
 800ccfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ccfe:	931a      	str	r3, [sp, #104]	; 0x68
 800cd00:	46a8      	mov	r8, r5
 800cd02:	2205      	movs	r2, #5
 800cd04:	f818 1b01 	ldrb.w	r1, [r8], #1
 800cd08:	485e      	ldr	r0, [pc, #376]	; (800ce84 <_vfiprintf_r+0x210>)
 800cd0a:	f7ff fa31 	bl	800c170 <memchr>
 800cd0e:	9b04      	ldr	r3, [sp, #16]
 800cd10:	bb78      	cbnz	r0, 800cd72 <_vfiprintf_r+0xfe>
 800cd12:	06d9      	lsls	r1, r3, #27
 800cd14:	bf44      	itt	mi
 800cd16:	2220      	movmi	r2, #32
 800cd18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cd1c:	071a      	lsls	r2, r3, #28
 800cd1e:	bf44      	itt	mi
 800cd20:	222b      	movmi	r2, #43	; 0x2b
 800cd22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cd26:	782a      	ldrb	r2, [r5, #0]
 800cd28:	2a2a      	cmp	r2, #42	; 0x2a
 800cd2a:	d02a      	beq.n	800cd82 <_vfiprintf_r+0x10e>
 800cd2c:	46a8      	mov	r8, r5
 800cd2e:	2000      	movs	r0, #0
 800cd30:	250a      	movs	r5, #10
 800cd32:	9a07      	ldr	r2, [sp, #28]
 800cd34:	4641      	mov	r1, r8
 800cd36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd3a:	3b30      	subs	r3, #48	; 0x30
 800cd3c:	2b09      	cmp	r3, #9
 800cd3e:	d969      	bls.n	800ce14 <_vfiprintf_r+0x1a0>
 800cd40:	b360      	cbz	r0, 800cd9c <_vfiprintf_r+0x128>
 800cd42:	e024      	b.n	800cd8e <_vfiprintf_r+0x11a>
 800cd44:	4b50      	ldr	r3, [pc, #320]	; (800ce88 <_vfiprintf_r+0x214>)
 800cd46:	429c      	cmp	r4, r3
 800cd48:	d101      	bne.n	800cd4e <_vfiprintf_r+0xda>
 800cd4a:	68b4      	ldr	r4, [r6, #8]
 800cd4c:	e7a2      	b.n	800cc94 <_vfiprintf_r+0x20>
 800cd4e:	4b4f      	ldr	r3, [pc, #316]	; (800ce8c <_vfiprintf_r+0x218>)
 800cd50:	429c      	cmp	r4, r3
 800cd52:	bf08      	it	eq
 800cd54:	68f4      	ldreq	r4, [r6, #12]
 800cd56:	e79d      	b.n	800cc94 <_vfiprintf_r+0x20>
 800cd58:	4621      	mov	r1, r4
 800cd5a:	4630      	mov	r0, r6
 800cd5c:	f7fd fe2c 	bl	800a9b8 <__swsetup_r>
 800cd60:	2800      	cmp	r0, #0
 800cd62:	d09d      	beq.n	800cca0 <_vfiprintf_r+0x2c>
 800cd64:	f04f 30ff 	mov.w	r0, #4294967295
 800cd68:	b01d      	add	sp, #116	; 0x74
 800cd6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd6e:	46a8      	mov	r8, r5
 800cd70:	e7a2      	b.n	800ccb8 <_vfiprintf_r+0x44>
 800cd72:	4a44      	ldr	r2, [pc, #272]	; (800ce84 <_vfiprintf_r+0x210>)
 800cd74:	4645      	mov	r5, r8
 800cd76:	1a80      	subs	r0, r0, r2
 800cd78:	fa0b f000 	lsl.w	r0, fp, r0
 800cd7c:	4318      	orrs	r0, r3
 800cd7e:	9004      	str	r0, [sp, #16]
 800cd80:	e7be      	b.n	800cd00 <_vfiprintf_r+0x8c>
 800cd82:	9a03      	ldr	r2, [sp, #12]
 800cd84:	1d11      	adds	r1, r2, #4
 800cd86:	6812      	ldr	r2, [r2, #0]
 800cd88:	9103      	str	r1, [sp, #12]
 800cd8a:	2a00      	cmp	r2, #0
 800cd8c:	db01      	blt.n	800cd92 <_vfiprintf_r+0x11e>
 800cd8e:	9207      	str	r2, [sp, #28]
 800cd90:	e004      	b.n	800cd9c <_vfiprintf_r+0x128>
 800cd92:	4252      	negs	r2, r2
 800cd94:	f043 0302 	orr.w	r3, r3, #2
 800cd98:	9207      	str	r2, [sp, #28]
 800cd9a:	9304      	str	r3, [sp, #16]
 800cd9c:	f898 3000 	ldrb.w	r3, [r8]
 800cda0:	2b2e      	cmp	r3, #46	; 0x2e
 800cda2:	d10e      	bne.n	800cdc2 <_vfiprintf_r+0x14e>
 800cda4:	f898 3001 	ldrb.w	r3, [r8, #1]
 800cda8:	2b2a      	cmp	r3, #42	; 0x2a
 800cdaa:	d138      	bne.n	800ce1e <_vfiprintf_r+0x1aa>
 800cdac:	9b03      	ldr	r3, [sp, #12]
 800cdae:	f108 0802 	add.w	r8, r8, #2
 800cdb2:	1d1a      	adds	r2, r3, #4
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	9203      	str	r2, [sp, #12]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	bfb8      	it	lt
 800cdbc:	f04f 33ff 	movlt.w	r3, #4294967295
 800cdc0:	9305      	str	r3, [sp, #20]
 800cdc2:	4d33      	ldr	r5, [pc, #204]	; (800ce90 <_vfiprintf_r+0x21c>)
 800cdc4:	2203      	movs	r2, #3
 800cdc6:	f898 1000 	ldrb.w	r1, [r8]
 800cdca:	4628      	mov	r0, r5
 800cdcc:	f7ff f9d0 	bl	800c170 <memchr>
 800cdd0:	b140      	cbz	r0, 800cde4 <_vfiprintf_r+0x170>
 800cdd2:	2340      	movs	r3, #64	; 0x40
 800cdd4:	1b40      	subs	r0, r0, r5
 800cdd6:	fa03 f000 	lsl.w	r0, r3, r0
 800cdda:	9b04      	ldr	r3, [sp, #16]
 800cddc:	f108 0801 	add.w	r8, r8, #1
 800cde0:	4303      	orrs	r3, r0
 800cde2:	9304      	str	r3, [sp, #16]
 800cde4:	f898 1000 	ldrb.w	r1, [r8]
 800cde8:	2206      	movs	r2, #6
 800cdea:	482a      	ldr	r0, [pc, #168]	; (800ce94 <_vfiprintf_r+0x220>)
 800cdec:	f108 0701 	add.w	r7, r8, #1
 800cdf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdf4:	f7ff f9bc 	bl	800c170 <memchr>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	d037      	beq.n	800ce6c <_vfiprintf_r+0x1f8>
 800cdfc:	4b26      	ldr	r3, [pc, #152]	; (800ce98 <_vfiprintf_r+0x224>)
 800cdfe:	bb1b      	cbnz	r3, 800ce48 <_vfiprintf_r+0x1d4>
 800ce00:	9b03      	ldr	r3, [sp, #12]
 800ce02:	3307      	adds	r3, #7
 800ce04:	f023 0307 	bic.w	r3, r3, #7
 800ce08:	3308      	adds	r3, #8
 800ce0a:	9303      	str	r3, [sp, #12]
 800ce0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce0e:	444b      	add	r3, r9
 800ce10:	9309      	str	r3, [sp, #36]	; 0x24
 800ce12:	e750      	b.n	800ccb6 <_vfiprintf_r+0x42>
 800ce14:	fb05 3202 	mla	r2, r5, r2, r3
 800ce18:	2001      	movs	r0, #1
 800ce1a:	4688      	mov	r8, r1
 800ce1c:	e78a      	b.n	800cd34 <_vfiprintf_r+0xc0>
 800ce1e:	2300      	movs	r3, #0
 800ce20:	250a      	movs	r5, #10
 800ce22:	4619      	mov	r1, r3
 800ce24:	f108 0801 	add.w	r8, r8, #1
 800ce28:	9305      	str	r3, [sp, #20]
 800ce2a:	4640      	mov	r0, r8
 800ce2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce30:	3a30      	subs	r2, #48	; 0x30
 800ce32:	2a09      	cmp	r2, #9
 800ce34:	d903      	bls.n	800ce3e <_vfiprintf_r+0x1ca>
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d0c3      	beq.n	800cdc2 <_vfiprintf_r+0x14e>
 800ce3a:	9105      	str	r1, [sp, #20]
 800ce3c:	e7c1      	b.n	800cdc2 <_vfiprintf_r+0x14e>
 800ce3e:	fb05 2101 	mla	r1, r5, r1, r2
 800ce42:	2301      	movs	r3, #1
 800ce44:	4680      	mov	r8, r0
 800ce46:	e7f0      	b.n	800ce2a <_vfiprintf_r+0x1b6>
 800ce48:	ab03      	add	r3, sp, #12
 800ce4a:	9300      	str	r3, [sp, #0]
 800ce4c:	4622      	mov	r2, r4
 800ce4e:	4b13      	ldr	r3, [pc, #76]	; (800ce9c <_vfiprintf_r+0x228>)
 800ce50:	a904      	add	r1, sp, #16
 800ce52:	4630      	mov	r0, r6
 800ce54:	f7fc f830 	bl	8008eb8 <_printf_float>
 800ce58:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ce5c:	4681      	mov	r9, r0
 800ce5e:	d1d5      	bne.n	800ce0c <_vfiprintf_r+0x198>
 800ce60:	89a3      	ldrh	r3, [r4, #12]
 800ce62:	065b      	lsls	r3, r3, #25
 800ce64:	f53f af7e 	bmi.w	800cd64 <_vfiprintf_r+0xf0>
 800ce68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce6a:	e77d      	b.n	800cd68 <_vfiprintf_r+0xf4>
 800ce6c:	ab03      	add	r3, sp, #12
 800ce6e:	9300      	str	r3, [sp, #0]
 800ce70:	4622      	mov	r2, r4
 800ce72:	4b0a      	ldr	r3, [pc, #40]	; (800ce9c <_vfiprintf_r+0x228>)
 800ce74:	a904      	add	r1, sp, #16
 800ce76:	4630      	mov	r0, r6
 800ce78:	f7fc faca 	bl	8009410 <_printf_i>
 800ce7c:	e7ec      	b.n	800ce58 <_vfiprintf_r+0x1e4>
 800ce7e:	bf00      	nop
 800ce80:	0800e6f0 	.word	0x0800e6f0
 800ce84:	0800e834 	.word	0x0800e834
 800ce88:	0800e710 	.word	0x0800e710
 800ce8c:	0800e6d0 	.word	0x0800e6d0
 800ce90:	0800e83a 	.word	0x0800e83a
 800ce94:	0800e83e 	.word	0x0800e83e
 800ce98:	08008eb9 	.word	0x08008eb9
 800ce9c:	0800cc4f 	.word	0x0800cc4f

0800cea0 <__sread>:
 800cea0:	b510      	push	{r4, lr}
 800cea2:	460c      	mov	r4, r1
 800cea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cea8:	f000 f8e0 	bl	800d06c <_read_r>
 800ceac:	2800      	cmp	r0, #0
 800ceae:	bfab      	itete	ge
 800ceb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ceb2:	89a3      	ldrhlt	r3, [r4, #12]
 800ceb4:	181b      	addge	r3, r3, r0
 800ceb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ceba:	bfac      	ite	ge
 800cebc:	6563      	strge	r3, [r4, #84]	; 0x54
 800cebe:	81a3      	strhlt	r3, [r4, #12]
 800cec0:	bd10      	pop	{r4, pc}

0800cec2 <__swrite>:
 800cec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cec6:	461f      	mov	r7, r3
 800cec8:	898b      	ldrh	r3, [r1, #12]
 800ceca:	4605      	mov	r5, r0
 800cecc:	05db      	lsls	r3, r3, #23
 800cece:	460c      	mov	r4, r1
 800ced0:	4616      	mov	r6, r2
 800ced2:	d505      	bpl.n	800cee0 <__swrite+0x1e>
 800ced4:	2302      	movs	r3, #2
 800ced6:	2200      	movs	r2, #0
 800ced8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cedc:	f000 f874 	bl	800cfc8 <_lseek_r>
 800cee0:	89a3      	ldrh	r3, [r4, #12]
 800cee2:	4632      	mov	r2, r6
 800cee4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cee8:	81a3      	strh	r3, [r4, #12]
 800ceea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ceee:	463b      	mov	r3, r7
 800cef0:	4628      	mov	r0, r5
 800cef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cef6:	f000 b823 	b.w	800cf40 <_write_r>

0800cefa <__sseek>:
 800cefa:	b510      	push	{r4, lr}
 800cefc:	460c      	mov	r4, r1
 800cefe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf02:	f000 f861 	bl	800cfc8 <_lseek_r>
 800cf06:	1c43      	adds	r3, r0, #1
 800cf08:	89a3      	ldrh	r3, [r4, #12]
 800cf0a:	bf15      	itete	ne
 800cf0c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf16:	81a3      	strheq	r3, [r4, #12]
 800cf18:	bf18      	it	ne
 800cf1a:	81a3      	strhne	r3, [r4, #12]
 800cf1c:	bd10      	pop	{r4, pc}

0800cf1e <__sclose>:
 800cf1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf22:	f000 b81f 	b.w	800cf64 <_close_r>

0800cf26 <__ascii_wctomb>:
 800cf26:	b149      	cbz	r1, 800cf3c <__ascii_wctomb+0x16>
 800cf28:	2aff      	cmp	r2, #255	; 0xff
 800cf2a:	bf8b      	itete	hi
 800cf2c:	238a      	movhi	r3, #138	; 0x8a
 800cf2e:	700a      	strbls	r2, [r1, #0]
 800cf30:	6003      	strhi	r3, [r0, #0]
 800cf32:	2001      	movls	r0, #1
 800cf34:	bf88      	it	hi
 800cf36:	f04f 30ff 	movhi.w	r0, #4294967295
 800cf3a:	4770      	bx	lr
 800cf3c:	4608      	mov	r0, r1
 800cf3e:	4770      	bx	lr

0800cf40 <_write_r>:
 800cf40:	b538      	push	{r3, r4, r5, lr}
 800cf42:	4605      	mov	r5, r0
 800cf44:	4608      	mov	r0, r1
 800cf46:	4611      	mov	r1, r2
 800cf48:	2200      	movs	r2, #0
 800cf4a:	4c05      	ldr	r4, [pc, #20]	; (800cf60 <_write_r+0x20>)
 800cf4c:	6022      	str	r2, [r4, #0]
 800cf4e:	461a      	mov	r2, r3
 800cf50:	f7f4 fc09 	bl	8001766 <_write>
 800cf54:	1c43      	adds	r3, r0, #1
 800cf56:	d102      	bne.n	800cf5e <_write_r+0x1e>
 800cf58:	6823      	ldr	r3, [r4, #0]
 800cf5a:	b103      	cbz	r3, 800cf5e <_write_r+0x1e>
 800cf5c:	602b      	str	r3, [r5, #0]
 800cf5e:	bd38      	pop	{r3, r4, r5, pc}
 800cf60:	20006104 	.word	0x20006104

0800cf64 <_close_r>:
 800cf64:	b538      	push	{r3, r4, r5, lr}
 800cf66:	2300      	movs	r3, #0
 800cf68:	4c05      	ldr	r4, [pc, #20]	; (800cf80 <_close_r+0x1c>)
 800cf6a:	4605      	mov	r5, r0
 800cf6c:	4608      	mov	r0, r1
 800cf6e:	6023      	str	r3, [r4, #0]
 800cf70:	f7f4 fc07 	bl	8001782 <_close>
 800cf74:	1c43      	adds	r3, r0, #1
 800cf76:	d102      	bne.n	800cf7e <_close_r+0x1a>
 800cf78:	6823      	ldr	r3, [r4, #0]
 800cf7a:	b103      	cbz	r3, 800cf7e <_close_r+0x1a>
 800cf7c:	602b      	str	r3, [r5, #0]
 800cf7e:	bd38      	pop	{r3, r4, r5, pc}
 800cf80:	20006104 	.word	0x20006104

0800cf84 <_fstat_r>:
 800cf84:	b538      	push	{r3, r4, r5, lr}
 800cf86:	2300      	movs	r3, #0
 800cf88:	4c06      	ldr	r4, [pc, #24]	; (800cfa4 <_fstat_r+0x20>)
 800cf8a:	4605      	mov	r5, r0
 800cf8c:	4608      	mov	r0, r1
 800cf8e:	4611      	mov	r1, r2
 800cf90:	6023      	str	r3, [r4, #0]
 800cf92:	f7f4 fbf9 	bl	8001788 <_fstat>
 800cf96:	1c43      	adds	r3, r0, #1
 800cf98:	d102      	bne.n	800cfa0 <_fstat_r+0x1c>
 800cf9a:	6823      	ldr	r3, [r4, #0]
 800cf9c:	b103      	cbz	r3, 800cfa0 <_fstat_r+0x1c>
 800cf9e:	602b      	str	r3, [r5, #0]
 800cfa0:	bd38      	pop	{r3, r4, r5, pc}
 800cfa2:	bf00      	nop
 800cfa4:	20006104 	.word	0x20006104

0800cfa8 <_isatty_r>:
 800cfa8:	b538      	push	{r3, r4, r5, lr}
 800cfaa:	2300      	movs	r3, #0
 800cfac:	4c05      	ldr	r4, [pc, #20]	; (800cfc4 <_isatty_r+0x1c>)
 800cfae:	4605      	mov	r5, r0
 800cfb0:	4608      	mov	r0, r1
 800cfb2:	6023      	str	r3, [r4, #0]
 800cfb4:	f7f4 fbed 	bl	8001792 <_isatty>
 800cfb8:	1c43      	adds	r3, r0, #1
 800cfba:	d102      	bne.n	800cfc2 <_isatty_r+0x1a>
 800cfbc:	6823      	ldr	r3, [r4, #0]
 800cfbe:	b103      	cbz	r3, 800cfc2 <_isatty_r+0x1a>
 800cfc0:	602b      	str	r3, [r5, #0]
 800cfc2:	bd38      	pop	{r3, r4, r5, pc}
 800cfc4:	20006104 	.word	0x20006104

0800cfc8 <_lseek_r>:
 800cfc8:	b538      	push	{r3, r4, r5, lr}
 800cfca:	4605      	mov	r5, r0
 800cfcc:	4608      	mov	r0, r1
 800cfce:	4611      	mov	r1, r2
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	4c05      	ldr	r4, [pc, #20]	; (800cfe8 <_lseek_r+0x20>)
 800cfd4:	6022      	str	r2, [r4, #0]
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	f7f4 fbdd 	bl	8001796 <_lseek>
 800cfdc:	1c43      	adds	r3, r0, #1
 800cfde:	d102      	bne.n	800cfe6 <_lseek_r+0x1e>
 800cfe0:	6823      	ldr	r3, [r4, #0]
 800cfe2:	b103      	cbz	r3, 800cfe6 <_lseek_r+0x1e>
 800cfe4:	602b      	str	r3, [r5, #0]
 800cfe6:	bd38      	pop	{r3, r4, r5, pc}
 800cfe8:	20006104 	.word	0x20006104

0800cfec <memmove>:
 800cfec:	4288      	cmp	r0, r1
 800cfee:	b510      	push	{r4, lr}
 800cff0:	eb01 0302 	add.w	r3, r1, r2
 800cff4:	d807      	bhi.n	800d006 <memmove+0x1a>
 800cff6:	1e42      	subs	r2, r0, #1
 800cff8:	4299      	cmp	r1, r3
 800cffa:	d00a      	beq.n	800d012 <memmove+0x26>
 800cffc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d000:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d004:	e7f8      	b.n	800cff8 <memmove+0xc>
 800d006:	4283      	cmp	r3, r0
 800d008:	d9f5      	bls.n	800cff6 <memmove+0xa>
 800d00a:	1881      	adds	r1, r0, r2
 800d00c:	1ad2      	subs	r2, r2, r3
 800d00e:	42d3      	cmn	r3, r2
 800d010:	d100      	bne.n	800d014 <memmove+0x28>
 800d012:	bd10      	pop	{r4, pc}
 800d014:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d018:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d01c:	e7f7      	b.n	800d00e <memmove+0x22>

0800d01e <_realloc_r>:
 800d01e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d020:	4607      	mov	r7, r0
 800d022:	4614      	mov	r4, r2
 800d024:	460e      	mov	r6, r1
 800d026:	b921      	cbnz	r1, 800d032 <_realloc_r+0x14>
 800d028:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d02c:	4611      	mov	r1, r2
 800d02e:	f7fb be57 	b.w	8008ce0 <_malloc_r>
 800d032:	b922      	cbnz	r2, 800d03e <_realloc_r+0x20>
 800d034:	f7fb fe08 	bl	8008c48 <_free_r>
 800d038:	4625      	mov	r5, r4
 800d03a:	4628      	mov	r0, r5
 800d03c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d03e:	f000 f827 	bl	800d090 <_malloc_usable_size_r>
 800d042:	42a0      	cmp	r0, r4
 800d044:	d20f      	bcs.n	800d066 <_realloc_r+0x48>
 800d046:	4621      	mov	r1, r4
 800d048:	4638      	mov	r0, r7
 800d04a:	f7fb fe49 	bl	8008ce0 <_malloc_r>
 800d04e:	4605      	mov	r5, r0
 800d050:	2800      	cmp	r0, #0
 800d052:	d0f2      	beq.n	800d03a <_realloc_r+0x1c>
 800d054:	4631      	mov	r1, r6
 800d056:	4622      	mov	r2, r4
 800d058:	f7fb fdd5 	bl	8008c06 <memcpy>
 800d05c:	4631      	mov	r1, r6
 800d05e:	4638      	mov	r0, r7
 800d060:	f7fb fdf2 	bl	8008c48 <_free_r>
 800d064:	e7e9      	b.n	800d03a <_realloc_r+0x1c>
 800d066:	4635      	mov	r5, r6
 800d068:	e7e7      	b.n	800d03a <_realloc_r+0x1c>
	...

0800d06c <_read_r>:
 800d06c:	b538      	push	{r3, r4, r5, lr}
 800d06e:	4605      	mov	r5, r0
 800d070:	4608      	mov	r0, r1
 800d072:	4611      	mov	r1, r2
 800d074:	2200      	movs	r2, #0
 800d076:	4c05      	ldr	r4, [pc, #20]	; (800d08c <_read_r+0x20>)
 800d078:	6022      	str	r2, [r4, #0]
 800d07a:	461a      	mov	r2, r3
 800d07c:	f7f4 fb65 	bl	800174a <_read>
 800d080:	1c43      	adds	r3, r0, #1
 800d082:	d102      	bne.n	800d08a <_read_r+0x1e>
 800d084:	6823      	ldr	r3, [r4, #0]
 800d086:	b103      	cbz	r3, 800d08a <_read_r+0x1e>
 800d088:	602b      	str	r3, [r5, #0]
 800d08a:	bd38      	pop	{r3, r4, r5, pc}
 800d08c:	20006104 	.word	0x20006104

0800d090 <_malloc_usable_size_r>:
 800d090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d094:	1f18      	subs	r0, r3, #4
 800d096:	2b00      	cmp	r3, #0
 800d098:	bfbc      	itt	lt
 800d09a:	580b      	ldrlt	r3, [r1, r0]
 800d09c:	18c0      	addlt	r0, r0, r3
 800d09e:	4770      	bx	lr

0800d0a0 <_init>:
 800d0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0a2:	bf00      	nop
 800d0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0a6:	bc08      	pop	{r3}
 800d0a8:	469e      	mov	lr, r3
 800d0aa:	4770      	bx	lr

0800d0ac <_fini>:
 800d0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ae:	bf00      	nop
 800d0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0b2:	bc08      	pop	{r3}
 800d0b4:	469e      	mov	lr, r3
 800d0b6:	4770      	bx	lr
