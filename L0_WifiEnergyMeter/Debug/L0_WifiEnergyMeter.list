
L0_WifiEnergyMeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .app_info     00000000  080000c0  080000c0  00020234  2**0
                  CONTENTS
  2 .text         0000e404  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000008b0  0800e4c8  0800e4c8  0001e4c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800ed78  0800ed78  00020234  2**0
                  CONTENTS
  5 .ARM          00000008  0800ed78  0800ed78  0001ed78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800ed80  0800ed80  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800ed80  0800ed80  0001ed80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800ed84  0800ed84  0001ed84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000234  20000000  0800ed88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .app_sha      00000000  0800efbc  0800efbc  00020234  2**0
                  CONTENTS
 11 .conf         00000000  0802f000  0802f000  00020234  2**0
                  CONTENTS
 12 .bss          00001098  20000238  20000238  00020238  2**3
                  ALLOC
 13 ._user_heap_stack 00000600  200012d0  200012d0  00020238  2**0
                  ALLOC
 14 .ARM.attributes 00000028  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 15 .debug_info   00019aaf  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 000038c0  00000000  00000000  00039d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00000f28  00000000  00000000  0003d5d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000dd0  00000000  00000000  0003e4f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00018aad  00000000  00000000  0003f2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00010599  00000000  00000000  00057d75  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0008408f  00000000  00000000  0006830e  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      0000007b  00000000  00000000  000ec39d  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000047d0  00000000  00000000  000ec418  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__APPLICATION_ISR_END+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__APPLICATION_ISR_END+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__APPLICATION_ISR_END+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000238 	.word	0x20000238
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e4ac 	.word	0x0800e4ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000023c 	.word	0x2000023c
 8000104:	0800e4ac 	.word	0x0800e4ac

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f001 fcad 	bl	8001d88 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f001 fc05 	bl	8001c48 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fc9f 	bl	8001d88 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fc95 	bl	8001d88 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fc27 	bl	8001cc0 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fc1d 	bl	8001cc0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_uldivmod>:
 8000494:	2b00      	cmp	r3, #0
 8000496:	d111      	bne.n	80004bc <__aeabi_uldivmod+0x28>
 8000498:	2a00      	cmp	r2, #0
 800049a:	d10f      	bne.n	80004bc <__aeabi_uldivmod+0x28>
 800049c:	2900      	cmp	r1, #0
 800049e:	d100      	bne.n	80004a2 <__aeabi_uldivmod+0xe>
 80004a0:	2800      	cmp	r0, #0
 80004a2:	d002      	beq.n	80004aa <__aeabi_uldivmod+0x16>
 80004a4:	2100      	movs	r1, #0
 80004a6:	43c9      	mvns	r1, r1
 80004a8:	1c08      	adds	r0, r1, #0
 80004aa:	b407      	push	{r0, r1, r2}
 80004ac:	4802      	ldr	r0, [pc, #8]	; (80004b8 <__aeabi_uldivmod+0x24>)
 80004ae:	a102      	add	r1, pc, #8	; (adr r1, 80004b8 <__aeabi_uldivmod+0x24>)
 80004b0:	1840      	adds	r0, r0, r1
 80004b2:	9002      	str	r0, [sp, #8]
 80004b4:	bd03      	pop	{r0, r1, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	ffffff5d 	.word	0xffffff5d
 80004bc:	b403      	push	{r0, r1}
 80004be:	4668      	mov	r0, sp
 80004c0:	b501      	push	{r0, lr}
 80004c2:	9802      	ldr	r0, [sp, #8]
 80004c4:	f000 f84e 	bl	8000564 <__udivmoddi4>
 80004c8:	9b01      	ldr	r3, [sp, #4]
 80004ca:	469e      	mov	lr, r3
 80004cc:	b002      	add	sp, #8
 80004ce:	bc0c      	pop	{r2, r3}
 80004d0:	4770      	bx	lr
 80004d2:	46c0      	nop			; (mov r8, r8)

080004d4 <__aeabi_lmul>:
 80004d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d6:	46ce      	mov	lr, r9
 80004d8:	4647      	mov	r7, r8
 80004da:	0415      	lsls	r5, r2, #16
 80004dc:	0c2d      	lsrs	r5, r5, #16
 80004de:	002e      	movs	r6, r5
 80004e0:	b580      	push	{r7, lr}
 80004e2:	0407      	lsls	r7, r0, #16
 80004e4:	0c14      	lsrs	r4, r2, #16
 80004e6:	0c3f      	lsrs	r7, r7, #16
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	437e      	muls	r6, r7
 80004ee:	435d      	muls	r5, r3
 80004f0:	4367      	muls	r7, r4
 80004f2:	4363      	muls	r3, r4
 80004f4:	197f      	adds	r7, r7, r5
 80004f6:	0c34      	lsrs	r4, r6, #16
 80004f8:	19e4      	adds	r4, r4, r7
 80004fa:	469c      	mov	ip, r3
 80004fc:	42a5      	cmp	r5, r4
 80004fe:	d903      	bls.n	8000508 <__aeabi_lmul+0x34>
 8000500:	2380      	movs	r3, #128	; 0x80
 8000502:	025b      	lsls	r3, r3, #9
 8000504:	4698      	mov	r8, r3
 8000506:	44c4      	add	ip, r8
 8000508:	464b      	mov	r3, r9
 800050a:	4343      	muls	r3, r0
 800050c:	4351      	muls	r1, r2
 800050e:	0c25      	lsrs	r5, r4, #16
 8000510:	0436      	lsls	r6, r6, #16
 8000512:	4465      	add	r5, ip
 8000514:	0c36      	lsrs	r6, r6, #16
 8000516:	0424      	lsls	r4, r4, #16
 8000518:	19a4      	adds	r4, r4, r6
 800051a:	195b      	adds	r3, r3, r5
 800051c:	1859      	adds	r1, r3, r1
 800051e:	0020      	movs	r0, r4
 8000520:	bc0c      	pop	{r2, r3}
 8000522:	4690      	mov	r8, r2
 8000524:	4699      	mov	r9, r3
 8000526:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000528 <__aeabi_d2uiz>:
 8000528:	b570      	push	{r4, r5, r6, lr}
 800052a:	2200      	movs	r2, #0
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <__aeabi_d2uiz+0x38>)
 800052e:	0004      	movs	r4, r0
 8000530:	000d      	movs	r5, r1
 8000532:	f7ff ffa5 	bl	8000480 <__aeabi_dcmpge>
 8000536:	2800      	cmp	r0, #0
 8000538:	d104      	bne.n	8000544 <__aeabi_d2uiz+0x1c>
 800053a:	0020      	movs	r0, r4
 800053c:	0029      	movs	r1, r5
 800053e:	f002 fa61 	bl	8002a04 <__aeabi_d2iz>
 8000542:	bd70      	pop	{r4, r5, r6, pc}
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <__aeabi_d2uiz+0x38>)
 8000546:	2200      	movs	r2, #0
 8000548:	0020      	movs	r0, r4
 800054a:	0029      	movs	r1, r5
 800054c:	f001 fef6 	bl	800233c <__aeabi_dsub>
 8000550:	f002 fa58 	bl	8002a04 <__aeabi_d2iz>
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	061b      	lsls	r3, r3, #24
 8000558:	469c      	mov	ip, r3
 800055a:	4460      	add	r0, ip
 800055c:	e7f1      	b.n	8000542 <__aeabi_d2uiz+0x1a>
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	41e00000 	.word	0x41e00000

08000564 <__udivmoddi4>:
 8000564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000566:	464f      	mov	r7, r9
 8000568:	4646      	mov	r6, r8
 800056a:	46d6      	mov	lr, sl
 800056c:	b5c0      	push	{r6, r7, lr}
 800056e:	0004      	movs	r4, r0
 8000570:	b082      	sub	sp, #8
 8000572:	000d      	movs	r5, r1
 8000574:	4691      	mov	r9, r2
 8000576:	4698      	mov	r8, r3
 8000578:	428b      	cmp	r3, r1
 800057a:	d82f      	bhi.n	80005dc <__udivmoddi4+0x78>
 800057c:	d02c      	beq.n	80005d8 <__udivmoddi4+0x74>
 800057e:	4641      	mov	r1, r8
 8000580:	4648      	mov	r0, r9
 8000582:	f002 fbd5 	bl	8002d30 <__clzdi2>
 8000586:	0029      	movs	r1, r5
 8000588:	0006      	movs	r6, r0
 800058a:	0020      	movs	r0, r4
 800058c:	f002 fbd0 	bl	8002d30 <__clzdi2>
 8000590:	1a33      	subs	r3, r6, r0
 8000592:	469c      	mov	ip, r3
 8000594:	3b20      	subs	r3, #32
 8000596:	469a      	mov	sl, r3
 8000598:	d500      	bpl.n	800059c <__udivmoddi4+0x38>
 800059a:	e076      	b.n	800068a <__udivmoddi4+0x126>
 800059c:	464b      	mov	r3, r9
 800059e:	4652      	mov	r2, sl
 80005a0:	4093      	lsls	r3, r2
 80005a2:	001f      	movs	r7, r3
 80005a4:	464b      	mov	r3, r9
 80005a6:	4662      	mov	r2, ip
 80005a8:	4093      	lsls	r3, r2
 80005aa:	001e      	movs	r6, r3
 80005ac:	42af      	cmp	r7, r5
 80005ae:	d828      	bhi.n	8000602 <__udivmoddi4+0x9e>
 80005b0:	d025      	beq.n	80005fe <__udivmoddi4+0x9a>
 80005b2:	4653      	mov	r3, sl
 80005b4:	1ba4      	subs	r4, r4, r6
 80005b6:	41bd      	sbcs	r5, r7
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	da00      	bge.n	80005be <__udivmoddi4+0x5a>
 80005bc:	e07b      	b.n	80006b6 <__udivmoddi4+0x152>
 80005be:	2200      	movs	r2, #0
 80005c0:	2300      	movs	r3, #0
 80005c2:	9200      	str	r2, [sp, #0]
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2301      	movs	r3, #1
 80005c8:	4652      	mov	r2, sl
 80005ca:	4093      	lsls	r3, r2
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2301      	movs	r3, #1
 80005d0:	4662      	mov	r2, ip
 80005d2:	4093      	lsls	r3, r2
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	e018      	b.n	800060a <__udivmoddi4+0xa6>
 80005d8:	4282      	cmp	r2, r0
 80005da:	d9d0      	bls.n	800057e <__udivmoddi4+0x1a>
 80005dc:	2200      	movs	r2, #0
 80005de:	2300      	movs	r3, #0
 80005e0:	9200      	str	r2, [sp, #0]
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <__udivmoddi4+0x8a>
 80005ea:	601c      	str	r4, [r3, #0]
 80005ec:	605d      	str	r5, [r3, #4]
 80005ee:	9800      	ldr	r0, [sp, #0]
 80005f0:	9901      	ldr	r1, [sp, #4]
 80005f2:	b002      	add	sp, #8
 80005f4:	bc1c      	pop	{r2, r3, r4}
 80005f6:	4690      	mov	r8, r2
 80005f8:	4699      	mov	r9, r3
 80005fa:	46a2      	mov	sl, r4
 80005fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005fe:	42a3      	cmp	r3, r4
 8000600:	d9d7      	bls.n	80005b2 <__udivmoddi4+0x4e>
 8000602:	2200      	movs	r2, #0
 8000604:	2300      	movs	r3, #0
 8000606:	9200      	str	r2, [sp, #0]
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	4663      	mov	r3, ip
 800060c:	2b00      	cmp	r3, #0
 800060e:	d0e9      	beq.n	80005e4 <__udivmoddi4+0x80>
 8000610:	07fb      	lsls	r3, r7, #31
 8000612:	4698      	mov	r8, r3
 8000614:	4641      	mov	r1, r8
 8000616:	0872      	lsrs	r2, r6, #1
 8000618:	430a      	orrs	r2, r1
 800061a:	087b      	lsrs	r3, r7, #1
 800061c:	4666      	mov	r6, ip
 800061e:	e00e      	b.n	800063e <__udivmoddi4+0xda>
 8000620:	42ab      	cmp	r3, r5
 8000622:	d101      	bne.n	8000628 <__udivmoddi4+0xc4>
 8000624:	42a2      	cmp	r2, r4
 8000626:	d80c      	bhi.n	8000642 <__udivmoddi4+0xde>
 8000628:	1aa4      	subs	r4, r4, r2
 800062a:	419d      	sbcs	r5, r3
 800062c:	2001      	movs	r0, #1
 800062e:	1924      	adds	r4, r4, r4
 8000630:	416d      	adcs	r5, r5
 8000632:	2100      	movs	r1, #0
 8000634:	3e01      	subs	r6, #1
 8000636:	1824      	adds	r4, r4, r0
 8000638:	414d      	adcs	r5, r1
 800063a:	2e00      	cmp	r6, #0
 800063c:	d006      	beq.n	800064c <__udivmoddi4+0xe8>
 800063e:	42ab      	cmp	r3, r5
 8000640:	d9ee      	bls.n	8000620 <__udivmoddi4+0xbc>
 8000642:	3e01      	subs	r6, #1
 8000644:	1924      	adds	r4, r4, r4
 8000646:	416d      	adcs	r5, r5
 8000648:	2e00      	cmp	r6, #0
 800064a:	d1f8      	bne.n	800063e <__udivmoddi4+0xda>
 800064c:	9800      	ldr	r0, [sp, #0]
 800064e:	9901      	ldr	r1, [sp, #4]
 8000650:	4653      	mov	r3, sl
 8000652:	1900      	adds	r0, r0, r4
 8000654:	4169      	adcs	r1, r5
 8000656:	2b00      	cmp	r3, #0
 8000658:	db23      	blt.n	80006a2 <__udivmoddi4+0x13e>
 800065a:	002b      	movs	r3, r5
 800065c:	4652      	mov	r2, sl
 800065e:	40d3      	lsrs	r3, r2
 8000660:	002a      	movs	r2, r5
 8000662:	4664      	mov	r4, ip
 8000664:	40e2      	lsrs	r2, r4
 8000666:	001c      	movs	r4, r3
 8000668:	4653      	mov	r3, sl
 800066a:	0015      	movs	r5, r2
 800066c:	2b00      	cmp	r3, #0
 800066e:	db2d      	blt.n	80006cc <__udivmoddi4+0x168>
 8000670:	0026      	movs	r6, r4
 8000672:	4657      	mov	r7, sl
 8000674:	40be      	lsls	r6, r7
 8000676:	0033      	movs	r3, r6
 8000678:	0026      	movs	r6, r4
 800067a:	4667      	mov	r7, ip
 800067c:	40be      	lsls	r6, r7
 800067e:	0032      	movs	r2, r6
 8000680:	1a80      	subs	r0, r0, r2
 8000682:	4199      	sbcs	r1, r3
 8000684:	9000      	str	r0, [sp, #0]
 8000686:	9101      	str	r1, [sp, #4]
 8000688:	e7ac      	b.n	80005e4 <__udivmoddi4+0x80>
 800068a:	4662      	mov	r2, ip
 800068c:	2320      	movs	r3, #32
 800068e:	1a9b      	subs	r3, r3, r2
 8000690:	464a      	mov	r2, r9
 8000692:	40da      	lsrs	r2, r3
 8000694:	4661      	mov	r1, ip
 8000696:	0013      	movs	r3, r2
 8000698:	4642      	mov	r2, r8
 800069a:	408a      	lsls	r2, r1
 800069c:	0017      	movs	r7, r2
 800069e:	431f      	orrs	r7, r3
 80006a0:	e780      	b.n	80005a4 <__udivmoddi4+0x40>
 80006a2:	4662      	mov	r2, ip
 80006a4:	2320      	movs	r3, #32
 80006a6:	1a9b      	subs	r3, r3, r2
 80006a8:	002a      	movs	r2, r5
 80006aa:	4666      	mov	r6, ip
 80006ac:	409a      	lsls	r2, r3
 80006ae:	0023      	movs	r3, r4
 80006b0:	40f3      	lsrs	r3, r6
 80006b2:	4313      	orrs	r3, r2
 80006b4:	e7d4      	b.n	8000660 <__udivmoddi4+0xfc>
 80006b6:	4662      	mov	r2, ip
 80006b8:	2320      	movs	r3, #32
 80006ba:	2100      	movs	r1, #0
 80006bc:	1a9b      	subs	r3, r3, r2
 80006be:	2200      	movs	r2, #0
 80006c0:	9100      	str	r1, [sp, #0]
 80006c2:	9201      	str	r2, [sp, #4]
 80006c4:	2201      	movs	r2, #1
 80006c6:	40da      	lsrs	r2, r3
 80006c8:	9201      	str	r2, [sp, #4]
 80006ca:	e780      	b.n	80005ce <__udivmoddi4+0x6a>
 80006cc:	2320      	movs	r3, #32
 80006ce:	4662      	mov	r2, ip
 80006d0:	0026      	movs	r6, r4
 80006d2:	1a9b      	subs	r3, r3, r2
 80006d4:	40de      	lsrs	r6, r3
 80006d6:	002f      	movs	r7, r5
 80006d8:	46b0      	mov	r8, r6
 80006da:	4666      	mov	r6, ip
 80006dc:	40b7      	lsls	r7, r6
 80006de:	4646      	mov	r6, r8
 80006e0:	003b      	movs	r3, r7
 80006e2:	4333      	orrs	r3, r6
 80006e4:	e7c8      	b.n	8000678 <__udivmoddi4+0x114>
 80006e6:	46c0      	nop			; (mov r8, r8)

080006e8 <__aeabi_fdiv>:
 80006e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ea:	4657      	mov	r7, sl
 80006ec:	464e      	mov	r6, r9
 80006ee:	4645      	mov	r5, r8
 80006f0:	46de      	mov	lr, fp
 80006f2:	0244      	lsls	r4, r0, #9
 80006f4:	b5e0      	push	{r5, r6, r7, lr}
 80006f6:	0046      	lsls	r6, r0, #1
 80006f8:	4688      	mov	r8, r1
 80006fa:	0a64      	lsrs	r4, r4, #9
 80006fc:	0e36      	lsrs	r6, r6, #24
 80006fe:	0fc7      	lsrs	r7, r0, #31
 8000700:	2e00      	cmp	r6, #0
 8000702:	d063      	beq.n	80007cc <__aeabi_fdiv+0xe4>
 8000704:	2eff      	cmp	r6, #255	; 0xff
 8000706:	d024      	beq.n	8000752 <__aeabi_fdiv+0x6a>
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	00e4      	lsls	r4, r4, #3
 800070c:	04db      	lsls	r3, r3, #19
 800070e:	431c      	orrs	r4, r3
 8000710:	2300      	movs	r3, #0
 8000712:	4699      	mov	r9, r3
 8000714:	469b      	mov	fp, r3
 8000716:	3e7f      	subs	r6, #127	; 0x7f
 8000718:	4643      	mov	r3, r8
 800071a:	4642      	mov	r2, r8
 800071c:	025d      	lsls	r5, r3, #9
 800071e:	0fd2      	lsrs	r2, r2, #31
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	0a6d      	lsrs	r5, r5, #9
 8000724:	0e1b      	lsrs	r3, r3, #24
 8000726:	4690      	mov	r8, r2
 8000728:	4692      	mov	sl, r2
 800072a:	d065      	beq.n	80007f8 <__aeabi_fdiv+0x110>
 800072c:	2bff      	cmp	r3, #255	; 0xff
 800072e:	d055      	beq.n	80007dc <__aeabi_fdiv+0xf4>
 8000730:	2280      	movs	r2, #128	; 0x80
 8000732:	2100      	movs	r1, #0
 8000734:	00ed      	lsls	r5, r5, #3
 8000736:	04d2      	lsls	r2, r2, #19
 8000738:	3b7f      	subs	r3, #127	; 0x7f
 800073a:	4315      	orrs	r5, r2
 800073c:	1af6      	subs	r6, r6, r3
 800073e:	4643      	mov	r3, r8
 8000740:	464a      	mov	r2, r9
 8000742:	407b      	eors	r3, r7
 8000744:	2a0f      	cmp	r2, #15
 8000746:	d900      	bls.n	800074a <__aeabi_fdiv+0x62>
 8000748:	e08d      	b.n	8000866 <__aeabi_fdiv+0x17e>
 800074a:	486d      	ldr	r0, [pc, #436]	; (8000900 <__aeabi_fdiv+0x218>)
 800074c:	0092      	lsls	r2, r2, #2
 800074e:	5882      	ldr	r2, [r0, r2]
 8000750:	4697      	mov	pc, r2
 8000752:	2c00      	cmp	r4, #0
 8000754:	d154      	bne.n	8000800 <__aeabi_fdiv+0x118>
 8000756:	2308      	movs	r3, #8
 8000758:	4699      	mov	r9, r3
 800075a:	3b06      	subs	r3, #6
 800075c:	26ff      	movs	r6, #255	; 0xff
 800075e:	469b      	mov	fp, r3
 8000760:	e7da      	b.n	8000718 <__aeabi_fdiv+0x30>
 8000762:	2500      	movs	r5, #0
 8000764:	4653      	mov	r3, sl
 8000766:	2902      	cmp	r1, #2
 8000768:	d01b      	beq.n	80007a2 <__aeabi_fdiv+0xba>
 800076a:	2903      	cmp	r1, #3
 800076c:	d100      	bne.n	8000770 <__aeabi_fdiv+0x88>
 800076e:	e0bf      	b.n	80008f0 <__aeabi_fdiv+0x208>
 8000770:	2901      	cmp	r1, #1
 8000772:	d028      	beq.n	80007c6 <__aeabi_fdiv+0xde>
 8000774:	0030      	movs	r0, r6
 8000776:	307f      	adds	r0, #127	; 0x7f
 8000778:	2800      	cmp	r0, #0
 800077a:	dd20      	ble.n	80007be <__aeabi_fdiv+0xd6>
 800077c:	076a      	lsls	r2, r5, #29
 800077e:	d004      	beq.n	800078a <__aeabi_fdiv+0xa2>
 8000780:	220f      	movs	r2, #15
 8000782:	402a      	ands	r2, r5
 8000784:	2a04      	cmp	r2, #4
 8000786:	d000      	beq.n	800078a <__aeabi_fdiv+0xa2>
 8000788:	3504      	adds	r5, #4
 800078a:	012a      	lsls	r2, r5, #4
 800078c:	d503      	bpl.n	8000796 <__aeabi_fdiv+0xae>
 800078e:	0030      	movs	r0, r6
 8000790:	4a5c      	ldr	r2, [pc, #368]	; (8000904 <__aeabi_fdiv+0x21c>)
 8000792:	3080      	adds	r0, #128	; 0x80
 8000794:	4015      	ands	r5, r2
 8000796:	28fe      	cmp	r0, #254	; 0xfe
 8000798:	dc03      	bgt.n	80007a2 <__aeabi_fdiv+0xba>
 800079a:	01ac      	lsls	r4, r5, #6
 800079c:	0a64      	lsrs	r4, r4, #9
 800079e:	b2c2      	uxtb	r2, r0
 80007a0:	e001      	b.n	80007a6 <__aeabi_fdiv+0xbe>
 80007a2:	22ff      	movs	r2, #255	; 0xff
 80007a4:	2400      	movs	r4, #0
 80007a6:	0264      	lsls	r4, r4, #9
 80007a8:	05d2      	lsls	r2, r2, #23
 80007aa:	0a60      	lsrs	r0, r4, #9
 80007ac:	07db      	lsls	r3, r3, #31
 80007ae:	4310      	orrs	r0, r2
 80007b0:	4318      	orrs	r0, r3
 80007b2:	bc3c      	pop	{r2, r3, r4, r5}
 80007b4:	4690      	mov	r8, r2
 80007b6:	4699      	mov	r9, r3
 80007b8:	46a2      	mov	sl, r4
 80007ba:	46ab      	mov	fp, r5
 80007bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007be:	2201      	movs	r2, #1
 80007c0:	1a10      	subs	r0, r2, r0
 80007c2:	281b      	cmp	r0, #27
 80007c4:	dd7c      	ble.n	80008c0 <__aeabi_fdiv+0x1d8>
 80007c6:	2200      	movs	r2, #0
 80007c8:	2400      	movs	r4, #0
 80007ca:	e7ec      	b.n	80007a6 <__aeabi_fdiv+0xbe>
 80007cc:	2c00      	cmp	r4, #0
 80007ce:	d11d      	bne.n	800080c <__aeabi_fdiv+0x124>
 80007d0:	2304      	movs	r3, #4
 80007d2:	4699      	mov	r9, r3
 80007d4:	3b03      	subs	r3, #3
 80007d6:	2600      	movs	r6, #0
 80007d8:	469b      	mov	fp, r3
 80007da:	e79d      	b.n	8000718 <__aeabi_fdiv+0x30>
 80007dc:	3eff      	subs	r6, #255	; 0xff
 80007de:	2d00      	cmp	r5, #0
 80007e0:	d120      	bne.n	8000824 <__aeabi_fdiv+0x13c>
 80007e2:	2102      	movs	r1, #2
 80007e4:	4643      	mov	r3, r8
 80007e6:	464a      	mov	r2, r9
 80007e8:	407b      	eors	r3, r7
 80007ea:	430a      	orrs	r2, r1
 80007ec:	2a0f      	cmp	r2, #15
 80007ee:	d8d8      	bhi.n	80007a2 <__aeabi_fdiv+0xba>
 80007f0:	4845      	ldr	r0, [pc, #276]	; (8000908 <__aeabi_fdiv+0x220>)
 80007f2:	0092      	lsls	r2, r2, #2
 80007f4:	5882      	ldr	r2, [r0, r2]
 80007f6:	4697      	mov	pc, r2
 80007f8:	2d00      	cmp	r5, #0
 80007fa:	d119      	bne.n	8000830 <__aeabi_fdiv+0x148>
 80007fc:	2101      	movs	r1, #1
 80007fe:	e7f1      	b.n	80007e4 <__aeabi_fdiv+0xfc>
 8000800:	230c      	movs	r3, #12
 8000802:	4699      	mov	r9, r3
 8000804:	3b09      	subs	r3, #9
 8000806:	26ff      	movs	r6, #255	; 0xff
 8000808:	469b      	mov	fp, r3
 800080a:	e785      	b.n	8000718 <__aeabi_fdiv+0x30>
 800080c:	0020      	movs	r0, r4
 800080e:	f002 fa71 	bl	8002cf4 <__clzsi2>
 8000812:	2676      	movs	r6, #118	; 0x76
 8000814:	1f43      	subs	r3, r0, #5
 8000816:	409c      	lsls	r4, r3
 8000818:	2300      	movs	r3, #0
 800081a:	4276      	negs	r6, r6
 800081c:	1a36      	subs	r6, r6, r0
 800081e:	4699      	mov	r9, r3
 8000820:	469b      	mov	fp, r3
 8000822:	e779      	b.n	8000718 <__aeabi_fdiv+0x30>
 8000824:	464a      	mov	r2, r9
 8000826:	2303      	movs	r3, #3
 8000828:	431a      	orrs	r2, r3
 800082a:	4691      	mov	r9, r2
 800082c:	2103      	movs	r1, #3
 800082e:	e786      	b.n	800073e <__aeabi_fdiv+0x56>
 8000830:	0028      	movs	r0, r5
 8000832:	f002 fa5f 	bl	8002cf4 <__clzsi2>
 8000836:	1f43      	subs	r3, r0, #5
 8000838:	1836      	adds	r6, r6, r0
 800083a:	409d      	lsls	r5, r3
 800083c:	3676      	adds	r6, #118	; 0x76
 800083e:	2100      	movs	r1, #0
 8000840:	e77d      	b.n	800073e <__aeabi_fdiv+0x56>
 8000842:	2480      	movs	r4, #128	; 0x80
 8000844:	2300      	movs	r3, #0
 8000846:	03e4      	lsls	r4, r4, #15
 8000848:	22ff      	movs	r2, #255	; 0xff
 800084a:	e7ac      	b.n	80007a6 <__aeabi_fdiv+0xbe>
 800084c:	2500      	movs	r5, #0
 800084e:	2380      	movs	r3, #128	; 0x80
 8000850:	03db      	lsls	r3, r3, #15
 8000852:	421c      	tst	r4, r3
 8000854:	d028      	beq.n	80008a8 <__aeabi_fdiv+0x1c0>
 8000856:	421d      	tst	r5, r3
 8000858:	d126      	bne.n	80008a8 <__aeabi_fdiv+0x1c0>
 800085a:	432b      	orrs	r3, r5
 800085c:	025c      	lsls	r4, r3, #9
 800085e:	0a64      	lsrs	r4, r4, #9
 8000860:	4643      	mov	r3, r8
 8000862:	22ff      	movs	r2, #255	; 0xff
 8000864:	e79f      	b.n	80007a6 <__aeabi_fdiv+0xbe>
 8000866:	0162      	lsls	r2, r4, #5
 8000868:	016c      	lsls	r4, r5, #5
 800086a:	42a2      	cmp	r2, r4
 800086c:	d224      	bcs.n	80008b8 <__aeabi_fdiv+0x1d0>
 800086e:	211b      	movs	r1, #27
 8000870:	2500      	movs	r5, #0
 8000872:	3e01      	subs	r6, #1
 8000874:	2701      	movs	r7, #1
 8000876:	0010      	movs	r0, r2
 8000878:	006d      	lsls	r5, r5, #1
 800087a:	0052      	lsls	r2, r2, #1
 800087c:	2800      	cmp	r0, #0
 800087e:	db01      	blt.n	8000884 <__aeabi_fdiv+0x19c>
 8000880:	4294      	cmp	r4, r2
 8000882:	d801      	bhi.n	8000888 <__aeabi_fdiv+0x1a0>
 8000884:	1b12      	subs	r2, r2, r4
 8000886:	433d      	orrs	r5, r7
 8000888:	3901      	subs	r1, #1
 800088a:	2900      	cmp	r1, #0
 800088c:	d1f3      	bne.n	8000876 <__aeabi_fdiv+0x18e>
 800088e:	0014      	movs	r4, r2
 8000890:	1e62      	subs	r2, r4, #1
 8000892:	4194      	sbcs	r4, r2
 8000894:	4325      	orrs	r5, r4
 8000896:	e76d      	b.n	8000774 <__aeabi_fdiv+0x8c>
 8000898:	46ba      	mov	sl, r7
 800089a:	4659      	mov	r1, fp
 800089c:	0025      	movs	r5, r4
 800089e:	4653      	mov	r3, sl
 80008a0:	2902      	cmp	r1, #2
 80008a2:	d000      	beq.n	80008a6 <__aeabi_fdiv+0x1be>
 80008a4:	e761      	b.n	800076a <__aeabi_fdiv+0x82>
 80008a6:	e77c      	b.n	80007a2 <__aeabi_fdiv+0xba>
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	03db      	lsls	r3, r3, #15
 80008ac:	431c      	orrs	r4, r3
 80008ae:	0264      	lsls	r4, r4, #9
 80008b0:	0a64      	lsrs	r4, r4, #9
 80008b2:	003b      	movs	r3, r7
 80008b4:	22ff      	movs	r2, #255	; 0xff
 80008b6:	e776      	b.n	80007a6 <__aeabi_fdiv+0xbe>
 80008b8:	1b12      	subs	r2, r2, r4
 80008ba:	211a      	movs	r1, #26
 80008bc:	2501      	movs	r5, #1
 80008be:	e7d9      	b.n	8000874 <__aeabi_fdiv+0x18c>
 80008c0:	369e      	adds	r6, #158	; 0x9e
 80008c2:	002a      	movs	r2, r5
 80008c4:	40b5      	lsls	r5, r6
 80008c6:	002c      	movs	r4, r5
 80008c8:	40c2      	lsrs	r2, r0
 80008ca:	1e65      	subs	r5, r4, #1
 80008cc:	41ac      	sbcs	r4, r5
 80008ce:	4314      	orrs	r4, r2
 80008d0:	0762      	lsls	r2, r4, #29
 80008d2:	d004      	beq.n	80008de <__aeabi_fdiv+0x1f6>
 80008d4:	220f      	movs	r2, #15
 80008d6:	4022      	ands	r2, r4
 80008d8:	2a04      	cmp	r2, #4
 80008da:	d000      	beq.n	80008de <__aeabi_fdiv+0x1f6>
 80008dc:	3404      	adds	r4, #4
 80008de:	0162      	lsls	r2, r4, #5
 80008e0:	d403      	bmi.n	80008ea <__aeabi_fdiv+0x202>
 80008e2:	01a4      	lsls	r4, r4, #6
 80008e4:	0a64      	lsrs	r4, r4, #9
 80008e6:	2200      	movs	r2, #0
 80008e8:	e75d      	b.n	80007a6 <__aeabi_fdiv+0xbe>
 80008ea:	2201      	movs	r2, #1
 80008ec:	2400      	movs	r4, #0
 80008ee:	e75a      	b.n	80007a6 <__aeabi_fdiv+0xbe>
 80008f0:	2480      	movs	r4, #128	; 0x80
 80008f2:	03e4      	lsls	r4, r4, #15
 80008f4:	432c      	orrs	r4, r5
 80008f6:	0264      	lsls	r4, r4, #9
 80008f8:	0a64      	lsrs	r4, r4, #9
 80008fa:	22ff      	movs	r2, #255	; 0xff
 80008fc:	e753      	b.n	80007a6 <__aeabi_fdiv+0xbe>
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	0800e604 	.word	0x0800e604
 8000904:	f7ffffff 	.word	0xf7ffffff
 8000908:	0800e644 	.word	0x0800e644

0800090c <__aeabi_fmul>:
 800090c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800090e:	464e      	mov	r6, r9
 8000910:	4657      	mov	r7, sl
 8000912:	4645      	mov	r5, r8
 8000914:	46de      	mov	lr, fp
 8000916:	b5e0      	push	{r5, r6, r7, lr}
 8000918:	0243      	lsls	r3, r0, #9
 800091a:	0a5b      	lsrs	r3, r3, #9
 800091c:	0045      	lsls	r5, r0, #1
 800091e:	b083      	sub	sp, #12
 8000920:	1c0f      	adds	r7, r1, #0
 8000922:	4699      	mov	r9, r3
 8000924:	0e2d      	lsrs	r5, r5, #24
 8000926:	0fc6      	lsrs	r6, r0, #31
 8000928:	2d00      	cmp	r5, #0
 800092a:	d057      	beq.n	80009dc <__aeabi_fmul+0xd0>
 800092c:	2dff      	cmp	r5, #255	; 0xff
 800092e:	d024      	beq.n	800097a <__aeabi_fmul+0x6e>
 8000930:	2080      	movs	r0, #128	; 0x80
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	04c0      	lsls	r0, r0, #19
 8000936:	4318      	orrs	r0, r3
 8000938:	2300      	movs	r3, #0
 800093a:	4681      	mov	r9, r0
 800093c:	469a      	mov	sl, r3
 800093e:	469b      	mov	fp, r3
 8000940:	3d7f      	subs	r5, #127	; 0x7f
 8000942:	027c      	lsls	r4, r7, #9
 8000944:	007a      	lsls	r2, r7, #1
 8000946:	0ffb      	lsrs	r3, r7, #31
 8000948:	0a64      	lsrs	r4, r4, #9
 800094a:	0e12      	lsrs	r2, r2, #24
 800094c:	4698      	mov	r8, r3
 800094e:	d023      	beq.n	8000998 <__aeabi_fmul+0x8c>
 8000950:	2aff      	cmp	r2, #255	; 0xff
 8000952:	d04b      	beq.n	80009ec <__aeabi_fmul+0xe0>
 8000954:	00e3      	lsls	r3, r4, #3
 8000956:	2480      	movs	r4, #128	; 0x80
 8000958:	2000      	movs	r0, #0
 800095a:	04e4      	lsls	r4, r4, #19
 800095c:	3a7f      	subs	r2, #127	; 0x7f
 800095e:	431c      	orrs	r4, r3
 8000960:	18ad      	adds	r5, r5, r2
 8000962:	1c6b      	adds	r3, r5, #1
 8000964:	4647      	mov	r7, r8
 8000966:	9301      	str	r3, [sp, #4]
 8000968:	4653      	mov	r3, sl
 800096a:	4077      	eors	r7, r6
 800096c:	003a      	movs	r2, r7
 800096e:	2b0f      	cmp	r3, #15
 8000970:	d848      	bhi.n	8000a04 <__aeabi_fmul+0xf8>
 8000972:	497d      	ldr	r1, [pc, #500]	; (8000b68 <__aeabi_fmul+0x25c>)
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	58cb      	ldr	r3, [r1, r3]
 8000978:	469f      	mov	pc, r3
 800097a:	2b00      	cmp	r3, #0
 800097c:	d000      	beq.n	8000980 <__aeabi_fmul+0x74>
 800097e:	e085      	b.n	8000a8c <__aeabi_fmul+0x180>
 8000980:	3308      	adds	r3, #8
 8000982:	469a      	mov	sl, r3
 8000984:	3b06      	subs	r3, #6
 8000986:	469b      	mov	fp, r3
 8000988:	027c      	lsls	r4, r7, #9
 800098a:	007a      	lsls	r2, r7, #1
 800098c:	0ffb      	lsrs	r3, r7, #31
 800098e:	25ff      	movs	r5, #255	; 0xff
 8000990:	0a64      	lsrs	r4, r4, #9
 8000992:	0e12      	lsrs	r2, r2, #24
 8000994:	4698      	mov	r8, r3
 8000996:	d1db      	bne.n	8000950 <__aeabi_fmul+0x44>
 8000998:	2c00      	cmp	r4, #0
 800099a:	d000      	beq.n	800099e <__aeabi_fmul+0x92>
 800099c:	e090      	b.n	8000ac0 <__aeabi_fmul+0x1b4>
 800099e:	4652      	mov	r2, sl
 80009a0:	2301      	movs	r3, #1
 80009a2:	431a      	orrs	r2, r3
 80009a4:	4692      	mov	sl, r2
 80009a6:	2001      	movs	r0, #1
 80009a8:	e7db      	b.n	8000962 <__aeabi_fmul+0x56>
 80009aa:	464c      	mov	r4, r9
 80009ac:	4658      	mov	r0, fp
 80009ae:	0017      	movs	r7, r2
 80009b0:	2802      	cmp	r0, #2
 80009b2:	d024      	beq.n	80009fe <__aeabi_fmul+0xf2>
 80009b4:	2803      	cmp	r0, #3
 80009b6:	d100      	bne.n	80009ba <__aeabi_fmul+0xae>
 80009b8:	e0cf      	b.n	8000b5a <__aeabi_fmul+0x24e>
 80009ba:	2200      	movs	r2, #0
 80009bc:	2300      	movs	r3, #0
 80009be:	2801      	cmp	r0, #1
 80009c0:	d14d      	bne.n	8000a5e <__aeabi_fmul+0x152>
 80009c2:	0258      	lsls	r0, r3, #9
 80009c4:	05d2      	lsls	r2, r2, #23
 80009c6:	0a40      	lsrs	r0, r0, #9
 80009c8:	07ff      	lsls	r7, r7, #31
 80009ca:	4310      	orrs	r0, r2
 80009cc:	4338      	orrs	r0, r7
 80009ce:	b003      	add	sp, #12
 80009d0:	bc3c      	pop	{r2, r3, r4, r5}
 80009d2:	4690      	mov	r8, r2
 80009d4:	4699      	mov	r9, r3
 80009d6:	46a2      	mov	sl, r4
 80009d8:	46ab      	mov	fp, r5
 80009da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d15b      	bne.n	8000a98 <__aeabi_fmul+0x18c>
 80009e0:	2304      	movs	r3, #4
 80009e2:	469a      	mov	sl, r3
 80009e4:	3b03      	subs	r3, #3
 80009e6:	2500      	movs	r5, #0
 80009e8:	469b      	mov	fp, r3
 80009ea:	e7aa      	b.n	8000942 <__aeabi_fmul+0x36>
 80009ec:	35ff      	adds	r5, #255	; 0xff
 80009ee:	2c00      	cmp	r4, #0
 80009f0:	d160      	bne.n	8000ab4 <__aeabi_fmul+0x1a8>
 80009f2:	4652      	mov	r2, sl
 80009f4:	2302      	movs	r3, #2
 80009f6:	431a      	orrs	r2, r3
 80009f8:	4692      	mov	sl, r2
 80009fa:	2002      	movs	r0, #2
 80009fc:	e7b1      	b.n	8000962 <__aeabi_fmul+0x56>
 80009fe:	22ff      	movs	r2, #255	; 0xff
 8000a00:	2300      	movs	r3, #0
 8000a02:	e7de      	b.n	80009c2 <__aeabi_fmul+0xb6>
 8000a04:	464b      	mov	r3, r9
 8000a06:	0c1b      	lsrs	r3, r3, #16
 8000a08:	469c      	mov	ip, r3
 8000a0a:	464b      	mov	r3, r9
 8000a0c:	0426      	lsls	r6, r4, #16
 8000a0e:	0c36      	lsrs	r6, r6, #16
 8000a10:	0418      	lsls	r0, r3, #16
 8000a12:	4661      	mov	r1, ip
 8000a14:	0033      	movs	r3, r6
 8000a16:	0c22      	lsrs	r2, r4, #16
 8000a18:	4664      	mov	r4, ip
 8000a1a:	0c00      	lsrs	r0, r0, #16
 8000a1c:	4343      	muls	r3, r0
 8000a1e:	434e      	muls	r6, r1
 8000a20:	4350      	muls	r0, r2
 8000a22:	4354      	muls	r4, r2
 8000a24:	1980      	adds	r0, r0, r6
 8000a26:	0c1a      	lsrs	r2, r3, #16
 8000a28:	1812      	adds	r2, r2, r0
 8000a2a:	4296      	cmp	r6, r2
 8000a2c:	d903      	bls.n	8000a36 <__aeabi_fmul+0x12a>
 8000a2e:	2180      	movs	r1, #128	; 0x80
 8000a30:	0249      	lsls	r1, r1, #9
 8000a32:	468c      	mov	ip, r1
 8000a34:	4464      	add	r4, ip
 8000a36:	041b      	lsls	r3, r3, #16
 8000a38:	0c1b      	lsrs	r3, r3, #16
 8000a3a:	0410      	lsls	r0, r2, #16
 8000a3c:	18c0      	adds	r0, r0, r3
 8000a3e:	0183      	lsls	r3, r0, #6
 8000a40:	1e5e      	subs	r6, r3, #1
 8000a42:	41b3      	sbcs	r3, r6
 8000a44:	0e80      	lsrs	r0, r0, #26
 8000a46:	4318      	orrs	r0, r3
 8000a48:	0c13      	lsrs	r3, r2, #16
 8000a4a:	191b      	adds	r3, r3, r4
 8000a4c:	019b      	lsls	r3, r3, #6
 8000a4e:	4303      	orrs	r3, r0
 8000a50:	001c      	movs	r4, r3
 8000a52:	0123      	lsls	r3, r4, #4
 8000a54:	d579      	bpl.n	8000b4a <__aeabi_fmul+0x23e>
 8000a56:	2301      	movs	r3, #1
 8000a58:	0862      	lsrs	r2, r4, #1
 8000a5a:	401c      	ands	r4, r3
 8000a5c:	4314      	orrs	r4, r2
 8000a5e:	9a01      	ldr	r2, [sp, #4]
 8000a60:	327f      	adds	r2, #127	; 0x7f
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	dd4d      	ble.n	8000b02 <__aeabi_fmul+0x1f6>
 8000a66:	0763      	lsls	r3, r4, #29
 8000a68:	d004      	beq.n	8000a74 <__aeabi_fmul+0x168>
 8000a6a:	230f      	movs	r3, #15
 8000a6c:	4023      	ands	r3, r4
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	d000      	beq.n	8000a74 <__aeabi_fmul+0x168>
 8000a72:	3404      	adds	r4, #4
 8000a74:	0123      	lsls	r3, r4, #4
 8000a76:	d503      	bpl.n	8000a80 <__aeabi_fmul+0x174>
 8000a78:	4b3c      	ldr	r3, [pc, #240]	; (8000b6c <__aeabi_fmul+0x260>)
 8000a7a:	9a01      	ldr	r2, [sp, #4]
 8000a7c:	401c      	ands	r4, r3
 8000a7e:	3280      	adds	r2, #128	; 0x80
 8000a80:	2afe      	cmp	r2, #254	; 0xfe
 8000a82:	dcbc      	bgt.n	80009fe <__aeabi_fmul+0xf2>
 8000a84:	01a3      	lsls	r3, r4, #6
 8000a86:	0a5b      	lsrs	r3, r3, #9
 8000a88:	b2d2      	uxtb	r2, r2
 8000a8a:	e79a      	b.n	80009c2 <__aeabi_fmul+0xb6>
 8000a8c:	230c      	movs	r3, #12
 8000a8e:	469a      	mov	sl, r3
 8000a90:	3b09      	subs	r3, #9
 8000a92:	25ff      	movs	r5, #255	; 0xff
 8000a94:	469b      	mov	fp, r3
 8000a96:	e754      	b.n	8000942 <__aeabi_fmul+0x36>
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f002 f92b 	bl	8002cf4 <__clzsi2>
 8000a9e:	464a      	mov	r2, r9
 8000aa0:	1f43      	subs	r3, r0, #5
 8000aa2:	2576      	movs	r5, #118	; 0x76
 8000aa4:	409a      	lsls	r2, r3
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	426d      	negs	r5, r5
 8000aaa:	4691      	mov	r9, r2
 8000aac:	1a2d      	subs	r5, r5, r0
 8000aae:	469a      	mov	sl, r3
 8000ab0:	469b      	mov	fp, r3
 8000ab2:	e746      	b.n	8000942 <__aeabi_fmul+0x36>
 8000ab4:	4652      	mov	r2, sl
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	431a      	orrs	r2, r3
 8000aba:	4692      	mov	sl, r2
 8000abc:	2003      	movs	r0, #3
 8000abe:	e750      	b.n	8000962 <__aeabi_fmul+0x56>
 8000ac0:	0020      	movs	r0, r4
 8000ac2:	f002 f917 	bl	8002cf4 <__clzsi2>
 8000ac6:	1f43      	subs	r3, r0, #5
 8000ac8:	1a2d      	subs	r5, r5, r0
 8000aca:	409c      	lsls	r4, r3
 8000acc:	3d76      	subs	r5, #118	; 0x76
 8000ace:	2000      	movs	r0, #0
 8000ad0:	e747      	b.n	8000962 <__aeabi_fmul+0x56>
 8000ad2:	2380      	movs	r3, #128	; 0x80
 8000ad4:	2700      	movs	r7, #0
 8000ad6:	03db      	lsls	r3, r3, #15
 8000ad8:	22ff      	movs	r2, #255	; 0xff
 8000ada:	e772      	b.n	80009c2 <__aeabi_fmul+0xb6>
 8000adc:	4642      	mov	r2, r8
 8000ade:	e766      	b.n	80009ae <__aeabi_fmul+0xa2>
 8000ae0:	464c      	mov	r4, r9
 8000ae2:	0032      	movs	r2, r6
 8000ae4:	4658      	mov	r0, fp
 8000ae6:	e762      	b.n	80009ae <__aeabi_fmul+0xa2>
 8000ae8:	2380      	movs	r3, #128	; 0x80
 8000aea:	464a      	mov	r2, r9
 8000aec:	03db      	lsls	r3, r3, #15
 8000aee:	421a      	tst	r2, r3
 8000af0:	d022      	beq.n	8000b38 <__aeabi_fmul+0x22c>
 8000af2:	421c      	tst	r4, r3
 8000af4:	d120      	bne.n	8000b38 <__aeabi_fmul+0x22c>
 8000af6:	4323      	orrs	r3, r4
 8000af8:	025b      	lsls	r3, r3, #9
 8000afa:	0a5b      	lsrs	r3, r3, #9
 8000afc:	4647      	mov	r7, r8
 8000afe:	22ff      	movs	r2, #255	; 0xff
 8000b00:	e75f      	b.n	80009c2 <__aeabi_fmul+0xb6>
 8000b02:	2301      	movs	r3, #1
 8000b04:	1a9a      	subs	r2, r3, r2
 8000b06:	2a1b      	cmp	r2, #27
 8000b08:	dc21      	bgt.n	8000b4e <__aeabi_fmul+0x242>
 8000b0a:	0023      	movs	r3, r4
 8000b0c:	9901      	ldr	r1, [sp, #4]
 8000b0e:	40d3      	lsrs	r3, r2
 8000b10:	319e      	adds	r1, #158	; 0x9e
 8000b12:	408c      	lsls	r4, r1
 8000b14:	001a      	movs	r2, r3
 8000b16:	0023      	movs	r3, r4
 8000b18:	1e5c      	subs	r4, r3, #1
 8000b1a:	41a3      	sbcs	r3, r4
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	075a      	lsls	r2, r3, #29
 8000b20:	d004      	beq.n	8000b2c <__aeabi_fmul+0x220>
 8000b22:	220f      	movs	r2, #15
 8000b24:	401a      	ands	r2, r3
 8000b26:	2a04      	cmp	r2, #4
 8000b28:	d000      	beq.n	8000b2c <__aeabi_fmul+0x220>
 8000b2a:	3304      	adds	r3, #4
 8000b2c:	015a      	lsls	r2, r3, #5
 8000b2e:	d411      	bmi.n	8000b54 <__aeabi_fmul+0x248>
 8000b30:	019b      	lsls	r3, r3, #6
 8000b32:	0a5b      	lsrs	r3, r3, #9
 8000b34:	2200      	movs	r2, #0
 8000b36:	e744      	b.n	80009c2 <__aeabi_fmul+0xb6>
 8000b38:	2380      	movs	r3, #128	; 0x80
 8000b3a:	464a      	mov	r2, r9
 8000b3c:	03db      	lsls	r3, r3, #15
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	025b      	lsls	r3, r3, #9
 8000b42:	0a5b      	lsrs	r3, r3, #9
 8000b44:	0037      	movs	r7, r6
 8000b46:	22ff      	movs	r2, #255	; 0xff
 8000b48:	e73b      	b.n	80009c2 <__aeabi_fmul+0xb6>
 8000b4a:	9501      	str	r5, [sp, #4]
 8000b4c:	e787      	b.n	8000a5e <__aeabi_fmul+0x152>
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2300      	movs	r3, #0
 8000b52:	e736      	b.n	80009c2 <__aeabi_fmul+0xb6>
 8000b54:	2201      	movs	r2, #1
 8000b56:	2300      	movs	r3, #0
 8000b58:	e733      	b.n	80009c2 <__aeabi_fmul+0xb6>
 8000b5a:	2380      	movs	r3, #128	; 0x80
 8000b5c:	03db      	lsls	r3, r3, #15
 8000b5e:	4323      	orrs	r3, r4
 8000b60:	025b      	lsls	r3, r3, #9
 8000b62:	0a5b      	lsrs	r3, r3, #9
 8000b64:	22ff      	movs	r2, #255	; 0xff
 8000b66:	e72c      	b.n	80009c2 <__aeabi_fmul+0xb6>
 8000b68:	0800e684 	.word	0x0800e684
 8000b6c:	f7ffffff 	.word	0xf7ffffff

08000b70 <__aeabi_fsub>:
 8000b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b72:	4647      	mov	r7, r8
 8000b74:	46ce      	mov	lr, r9
 8000b76:	0044      	lsls	r4, r0, #1
 8000b78:	0fc2      	lsrs	r2, r0, #31
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	0247      	lsls	r7, r0, #9
 8000b7e:	0248      	lsls	r0, r1, #9
 8000b80:	0a40      	lsrs	r0, r0, #9
 8000b82:	4684      	mov	ip, r0
 8000b84:	4666      	mov	r6, ip
 8000b86:	0048      	lsls	r0, r1, #1
 8000b88:	0a7f      	lsrs	r7, r7, #9
 8000b8a:	0e24      	lsrs	r4, r4, #24
 8000b8c:	00f6      	lsls	r6, r6, #3
 8000b8e:	0025      	movs	r5, r4
 8000b90:	4690      	mov	r8, r2
 8000b92:	00fb      	lsls	r3, r7, #3
 8000b94:	0e00      	lsrs	r0, r0, #24
 8000b96:	0fc9      	lsrs	r1, r1, #31
 8000b98:	46b1      	mov	r9, r6
 8000b9a:	28ff      	cmp	r0, #255	; 0xff
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_fsub+0x30>
 8000b9e:	e085      	b.n	8000cac <__aeabi_fsub+0x13c>
 8000ba0:	2601      	movs	r6, #1
 8000ba2:	4071      	eors	r1, r6
 8000ba4:	1a26      	subs	r6, r4, r0
 8000ba6:	4291      	cmp	r1, r2
 8000ba8:	d057      	beq.n	8000c5a <__aeabi_fsub+0xea>
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	dd43      	ble.n	8000c36 <__aeabi_fsub+0xc6>
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	d000      	beq.n	8000bb4 <__aeabi_fsub+0x44>
 8000bb2:	e07f      	b.n	8000cb4 <__aeabi_fsub+0x144>
 8000bb4:	4649      	mov	r1, r9
 8000bb6:	2900      	cmp	r1, #0
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_fsub+0x4c>
 8000bba:	e0aa      	b.n	8000d12 <__aeabi_fsub+0x1a2>
 8000bbc:	3e01      	subs	r6, #1
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d000      	beq.n	8000bc4 <__aeabi_fsub+0x54>
 8000bc2:	e0f7      	b.n	8000db4 <__aeabi_fsub+0x244>
 8000bc4:	1a5b      	subs	r3, r3, r1
 8000bc6:	015a      	lsls	r2, r3, #5
 8000bc8:	d400      	bmi.n	8000bcc <__aeabi_fsub+0x5c>
 8000bca:	e08b      	b.n	8000ce4 <__aeabi_fsub+0x174>
 8000bcc:	019b      	lsls	r3, r3, #6
 8000bce:	099c      	lsrs	r4, r3, #6
 8000bd0:	0020      	movs	r0, r4
 8000bd2:	f002 f88f 	bl	8002cf4 <__clzsi2>
 8000bd6:	3805      	subs	r0, #5
 8000bd8:	4084      	lsls	r4, r0
 8000bda:	4285      	cmp	r5, r0
 8000bdc:	dd00      	ble.n	8000be0 <__aeabi_fsub+0x70>
 8000bde:	e0d3      	b.n	8000d88 <__aeabi_fsub+0x218>
 8000be0:	1b45      	subs	r5, r0, r5
 8000be2:	0023      	movs	r3, r4
 8000be4:	2020      	movs	r0, #32
 8000be6:	3501      	adds	r5, #1
 8000be8:	40eb      	lsrs	r3, r5
 8000bea:	1b45      	subs	r5, r0, r5
 8000bec:	40ac      	lsls	r4, r5
 8000bee:	1e62      	subs	r2, r4, #1
 8000bf0:	4194      	sbcs	r4, r2
 8000bf2:	4323      	orrs	r3, r4
 8000bf4:	2407      	movs	r4, #7
 8000bf6:	2500      	movs	r5, #0
 8000bf8:	401c      	ands	r4, r3
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	4641      	mov	r1, r8
 8000bfe:	400a      	ands	r2, r1
 8000c00:	2c00      	cmp	r4, #0
 8000c02:	d004      	beq.n	8000c0e <__aeabi_fsub+0x9e>
 8000c04:	210f      	movs	r1, #15
 8000c06:	4019      	ands	r1, r3
 8000c08:	2904      	cmp	r1, #4
 8000c0a:	d000      	beq.n	8000c0e <__aeabi_fsub+0x9e>
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	0159      	lsls	r1, r3, #5
 8000c10:	d400      	bmi.n	8000c14 <__aeabi_fsub+0xa4>
 8000c12:	e080      	b.n	8000d16 <__aeabi_fsub+0x1a6>
 8000c14:	3501      	adds	r5, #1
 8000c16:	b2ec      	uxtb	r4, r5
 8000c18:	2dff      	cmp	r5, #255	; 0xff
 8000c1a:	d000      	beq.n	8000c1e <__aeabi_fsub+0xae>
 8000c1c:	e0a3      	b.n	8000d66 <__aeabi_fsub+0x1f6>
 8000c1e:	24ff      	movs	r4, #255	; 0xff
 8000c20:	2300      	movs	r3, #0
 8000c22:	025b      	lsls	r3, r3, #9
 8000c24:	05e4      	lsls	r4, r4, #23
 8000c26:	0a58      	lsrs	r0, r3, #9
 8000c28:	07d2      	lsls	r2, r2, #31
 8000c2a:	4320      	orrs	r0, r4
 8000c2c:	4310      	orrs	r0, r2
 8000c2e:	bc0c      	pop	{r2, r3}
 8000c30:	4690      	mov	r8, r2
 8000c32:	4699      	mov	r9, r3
 8000c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d174      	bne.n	8000d24 <__aeabi_fsub+0x1b4>
 8000c3a:	1c60      	adds	r0, r4, #1
 8000c3c:	b2c0      	uxtb	r0, r0
 8000c3e:	2801      	cmp	r0, #1
 8000c40:	dc00      	bgt.n	8000c44 <__aeabi_fsub+0xd4>
 8000c42:	e0a7      	b.n	8000d94 <__aeabi_fsub+0x224>
 8000c44:	464a      	mov	r2, r9
 8000c46:	1a9c      	subs	r4, r3, r2
 8000c48:	0162      	lsls	r2, r4, #5
 8000c4a:	d500      	bpl.n	8000c4e <__aeabi_fsub+0xde>
 8000c4c:	e0b6      	b.n	8000dbc <__aeabi_fsub+0x24c>
 8000c4e:	2c00      	cmp	r4, #0
 8000c50:	d1be      	bne.n	8000bd0 <__aeabi_fsub+0x60>
 8000c52:	2200      	movs	r2, #0
 8000c54:	2400      	movs	r4, #0
 8000c56:	2300      	movs	r3, #0
 8000c58:	e7e3      	b.n	8000c22 <__aeabi_fsub+0xb2>
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	dc00      	bgt.n	8000c60 <__aeabi_fsub+0xf0>
 8000c5e:	e085      	b.n	8000d6c <__aeabi_fsub+0x1fc>
 8000c60:	2800      	cmp	r0, #0
 8000c62:	d046      	beq.n	8000cf2 <__aeabi_fsub+0x182>
 8000c64:	2cff      	cmp	r4, #255	; 0xff
 8000c66:	d049      	beq.n	8000cfc <__aeabi_fsub+0x18c>
 8000c68:	2280      	movs	r2, #128	; 0x80
 8000c6a:	4648      	mov	r0, r9
 8000c6c:	04d2      	lsls	r2, r2, #19
 8000c6e:	4310      	orrs	r0, r2
 8000c70:	4681      	mov	r9, r0
 8000c72:	2201      	movs	r2, #1
 8000c74:	2e1b      	cmp	r6, #27
 8000c76:	dc09      	bgt.n	8000c8c <__aeabi_fsub+0x11c>
 8000c78:	2020      	movs	r0, #32
 8000c7a:	464c      	mov	r4, r9
 8000c7c:	1b80      	subs	r0, r0, r6
 8000c7e:	4084      	lsls	r4, r0
 8000c80:	464a      	mov	r2, r9
 8000c82:	0020      	movs	r0, r4
 8000c84:	40f2      	lsrs	r2, r6
 8000c86:	1e44      	subs	r4, r0, #1
 8000c88:	41a0      	sbcs	r0, r4
 8000c8a:	4302      	orrs	r2, r0
 8000c8c:	189b      	adds	r3, r3, r2
 8000c8e:	015a      	lsls	r2, r3, #5
 8000c90:	d528      	bpl.n	8000ce4 <__aeabi_fsub+0x174>
 8000c92:	3501      	adds	r5, #1
 8000c94:	2dff      	cmp	r5, #255	; 0xff
 8000c96:	d100      	bne.n	8000c9a <__aeabi_fsub+0x12a>
 8000c98:	e0a8      	b.n	8000dec <__aeabi_fsub+0x27c>
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2407      	movs	r4, #7
 8000c9e:	4994      	ldr	r1, [pc, #592]	; (8000ef0 <__aeabi_fsub+0x380>)
 8000ca0:	401a      	ands	r2, r3
 8000ca2:	085b      	lsrs	r3, r3, #1
 8000ca4:	400b      	ands	r3, r1
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	401c      	ands	r4, r3
 8000caa:	e7a6      	b.n	8000bfa <__aeabi_fsub+0x8a>
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d000      	beq.n	8000cb2 <__aeabi_fsub+0x142>
 8000cb0:	e778      	b.n	8000ba4 <__aeabi_fsub+0x34>
 8000cb2:	e775      	b.n	8000ba0 <__aeabi_fsub+0x30>
 8000cb4:	2cff      	cmp	r4, #255	; 0xff
 8000cb6:	d054      	beq.n	8000d62 <__aeabi_fsub+0x1f2>
 8000cb8:	2280      	movs	r2, #128	; 0x80
 8000cba:	4649      	mov	r1, r9
 8000cbc:	04d2      	lsls	r2, r2, #19
 8000cbe:	4311      	orrs	r1, r2
 8000cc0:	4689      	mov	r9, r1
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	2e1b      	cmp	r6, #27
 8000cc6:	dc09      	bgt.n	8000cdc <__aeabi_fsub+0x16c>
 8000cc8:	2120      	movs	r1, #32
 8000cca:	4648      	mov	r0, r9
 8000ccc:	1b89      	subs	r1, r1, r6
 8000cce:	4088      	lsls	r0, r1
 8000cd0:	464a      	mov	r2, r9
 8000cd2:	0001      	movs	r1, r0
 8000cd4:	40f2      	lsrs	r2, r6
 8000cd6:	1e48      	subs	r0, r1, #1
 8000cd8:	4181      	sbcs	r1, r0
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	1a9b      	subs	r3, r3, r2
 8000cde:	015a      	lsls	r2, r3, #5
 8000ce0:	d500      	bpl.n	8000ce4 <__aeabi_fsub+0x174>
 8000ce2:	e773      	b.n	8000bcc <__aeabi_fsub+0x5c>
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	4641      	mov	r1, r8
 8000ce8:	400a      	ands	r2, r1
 8000cea:	0759      	lsls	r1, r3, #29
 8000cec:	d000      	beq.n	8000cf0 <__aeabi_fsub+0x180>
 8000cee:	e789      	b.n	8000c04 <__aeabi_fsub+0x94>
 8000cf0:	e011      	b.n	8000d16 <__aeabi_fsub+0x1a6>
 8000cf2:	4648      	mov	r0, r9
 8000cf4:	2800      	cmp	r0, #0
 8000cf6:	d158      	bne.n	8000daa <__aeabi_fsub+0x23a>
 8000cf8:	2cff      	cmp	r4, #255	; 0xff
 8000cfa:	d10c      	bne.n	8000d16 <__aeabi_fsub+0x1a6>
 8000cfc:	08db      	lsrs	r3, r3, #3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d100      	bne.n	8000d04 <__aeabi_fsub+0x194>
 8000d02:	e78c      	b.n	8000c1e <__aeabi_fsub+0xae>
 8000d04:	2080      	movs	r0, #128	; 0x80
 8000d06:	03c0      	lsls	r0, r0, #15
 8000d08:	4303      	orrs	r3, r0
 8000d0a:	025b      	lsls	r3, r3, #9
 8000d0c:	0a5b      	lsrs	r3, r3, #9
 8000d0e:	24ff      	movs	r4, #255	; 0xff
 8000d10:	e787      	b.n	8000c22 <__aeabi_fsub+0xb2>
 8000d12:	2cff      	cmp	r4, #255	; 0xff
 8000d14:	d025      	beq.n	8000d62 <__aeabi_fsub+0x1f2>
 8000d16:	08db      	lsrs	r3, r3, #3
 8000d18:	2dff      	cmp	r5, #255	; 0xff
 8000d1a:	d0f0      	beq.n	8000cfe <__aeabi_fsub+0x18e>
 8000d1c:	025b      	lsls	r3, r3, #9
 8000d1e:	0a5b      	lsrs	r3, r3, #9
 8000d20:	b2ec      	uxtb	r4, r5
 8000d22:	e77e      	b.n	8000c22 <__aeabi_fsub+0xb2>
 8000d24:	2c00      	cmp	r4, #0
 8000d26:	d04d      	beq.n	8000dc4 <__aeabi_fsub+0x254>
 8000d28:	28ff      	cmp	r0, #255	; 0xff
 8000d2a:	d018      	beq.n	8000d5e <__aeabi_fsub+0x1ee>
 8000d2c:	2480      	movs	r4, #128	; 0x80
 8000d2e:	04e4      	lsls	r4, r4, #19
 8000d30:	4272      	negs	r2, r6
 8000d32:	4323      	orrs	r3, r4
 8000d34:	2a1b      	cmp	r2, #27
 8000d36:	dd00      	ble.n	8000d3a <__aeabi_fsub+0x1ca>
 8000d38:	e0c4      	b.n	8000ec4 <__aeabi_fsub+0x354>
 8000d3a:	001c      	movs	r4, r3
 8000d3c:	2520      	movs	r5, #32
 8000d3e:	40d4      	lsrs	r4, r2
 8000d40:	1aaa      	subs	r2, r5, r2
 8000d42:	4093      	lsls	r3, r2
 8000d44:	1e5a      	subs	r2, r3, #1
 8000d46:	4193      	sbcs	r3, r2
 8000d48:	4323      	orrs	r3, r4
 8000d4a:	464a      	mov	r2, r9
 8000d4c:	0005      	movs	r5, r0
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	4688      	mov	r8, r1
 8000d52:	e738      	b.n	8000bc6 <__aeabi_fsub+0x56>
 8000d54:	1c72      	adds	r2, r6, #1
 8000d56:	d0f8      	beq.n	8000d4a <__aeabi_fsub+0x1da>
 8000d58:	43f2      	mvns	r2, r6
 8000d5a:	28ff      	cmp	r0, #255	; 0xff
 8000d5c:	d1ea      	bne.n	8000d34 <__aeabi_fsub+0x1c4>
 8000d5e:	000a      	movs	r2, r1
 8000d60:	464b      	mov	r3, r9
 8000d62:	25ff      	movs	r5, #255	; 0xff
 8000d64:	e7d7      	b.n	8000d16 <__aeabi_fsub+0x1a6>
 8000d66:	019b      	lsls	r3, r3, #6
 8000d68:	0a5b      	lsrs	r3, r3, #9
 8000d6a:	e75a      	b.n	8000c22 <__aeabi_fsub+0xb2>
 8000d6c:	2e00      	cmp	r6, #0
 8000d6e:	d141      	bne.n	8000df4 <__aeabi_fsub+0x284>
 8000d70:	1c65      	adds	r5, r4, #1
 8000d72:	b2e9      	uxtb	r1, r5
 8000d74:	2901      	cmp	r1, #1
 8000d76:	dd45      	ble.n	8000e04 <__aeabi_fsub+0x294>
 8000d78:	2dff      	cmp	r5, #255	; 0xff
 8000d7a:	d100      	bne.n	8000d7e <__aeabi_fsub+0x20e>
 8000d7c:	e74f      	b.n	8000c1e <__aeabi_fsub+0xae>
 8000d7e:	2407      	movs	r4, #7
 8000d80:	444b      	add	r3, r9
 8000d82:	085b      	lsrs	r3, r3, #1
 8000d84:	401c      	ands	r4, r3
 8000d86:	e738      	b.n	8000bfa <__aeabi_fsub+0x8a>
 8000d88:	2207      	movs	r2, #7
 8000d8a:	4b5a      	ldr	r3, [pc, #360]	; (8000ef4 <__aeabi_fsub+0x384>)
 8000d8c:	1a2d      	subs	r5, r5, r0
 8000d8e:	4023      	ands	r3, r4
 8000d90:	4014      	ands	r4, r2
 8000d92:	e732      	b.n	8000bfa <__aeabi_fsub+0x8a>
 8000d94:	2c00      	cmp	r4, #0
 8000d96:	d11d      	bne.n	8000dd4 <__aeabi_fsub+0x264>
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d17a      	bne.n	8000e92 <__aeabi_fsub+0x322>
 8000d9c:	464b      	mov	r3, r9
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d100      	bne.n	8000da4 <__aeabi_fsub+0x234>
 8000da2:	e091      	b.n	8000ec8 <__aeabi_fsub+0x358>
 8000da4:	000a      	movs	r2, r1
 8000da6:	2500      	movs	r5, #0
 8000da8:	e7b5      	b.n	8000d16 <__aeabi_fsub+0x1a6>
 8000daa:	3e01      	subs	r6, #1
 8000dac:	2e00      	cmp	r6, #0
 8000dae:	d119      	bne.n	8000de4 <__aeabi_fsub+0x274>
 8000db0:	444b      	add	r3, r9
 8000db2:	e76c      	b.n	8000c8e <__aeabi_fsub+0x11e>
 8000db4:	2cff      	cmp	r4, #255	; 0xff
 8000db6:	d184      	bne.n	8000cc2 <__aeabi_fsub+0x152>
 8000db8:	25ff      	movs	r5, #255	; 0xff
 8000dba:	e7ac      	b.n	8000d16 <__aeabi_fsub+0x1a6>
 8000dbc:	464a      	mov	r2, r9
 8000dbe:	4688      	mov	r8, r1
 8000dc0:	1ad4      	subs	r4, r2, r3
 8000dc2:	e705      	b.n	8000bd0 <__aeabi_fsub+0x60>
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1c5      	bne.n	8000d54 <__aeabi_fsub+0x1e4>
 8000dc8:	000a      	movs	r2, r1
 8000dca:	28ff      	cmp	r0, #255	; 0xff
 8000dcc:	d0c8      	beq.n	8000d60 <__aeabi_fsub+0x1f0>
 8000dce:	0005      	movs	r5, r0
 8000dd0:	464b      	mov	r3, r9
 8000dd2:	e7a0      	b.n	8000d16 <__aeabi_fsub+0x1a6>
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d149      	bne.n	8000e6c <__aeabi_fsub+0x2fc>
 8000dd8:	464b      	mov	r3, r9
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d077      	beq.n	8000ece <__aeabi_fsub+0x35e>
 8000dde:	000a      	movs	r2, r1
 8000de0:	25ff      	movs	r5, #255	; 0xff
 8000de2:	e798      	b.n	8000d16 <__aeabi_fsub+0x1a6>
 8000de4:	2cff      	cmp	r4, #255	; 0xff
 8000de6:	d000      	beq.n	8000dea <__aeabi_fsub+0x27a>
 8000de8:	e743      	b.n	8000c72 <__aeabi_fsub+0x102>
 8000dea:	e787      	b.n	8000cfc <__aeabi_fsub+0x18c>
 8000dec:	000a      	movs	r2, r1
 8000dee:	24ff      	movs	r4, #255	; 0xff
 8000df0:	2300      	movs	r3, #0
 8000df2:	e716      	b.n	8000c22 <__aeabi_fsub+0xb2>
 8000df4:	2c00      	cmp	r4, #0
 8000df6:	d115      	bne.n	8000e24 <__aeabi_fsub+0x2b4>
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d157      	bne.n	8000eac <__aeabi_fsub+0x33c>
 8000dfc:	28ff      	cmp	r0, #255	; 0xff
 8000dfe:	d1e6      	bne.n	8000dce <__aeabi_fsub+0x25e>
 8000e00:	464b      	mov	r3, r9
 8000e02:	e77b      	b.n	8000cfc <__aeabi_fsub+0x18c>
 8000e04:	2c00      	cmp	r4, #0
 8000e06:	d120      	bne.n	8000e4a <__aeabi_fsub+0x2da>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d057      	beq.n	8000ebc <__aeabi_fsub+0x34c>
 8000e0c:	4649      	mov	r1, r9
 8000e0e:	2900      	cmp	r1, #0
 8000e10:	d053      	beq.n	8000eba <__aeabi_fsub+0x34a>
 8000e12:	444b      	add	r3, r9
 8000e14:	015a      	lsls	r2, r3, #5
 8000e16:	d568      	bpl.n	8000eea <__aeabi_fsub+0x37a>
 8000e18:	2407      	movs	r4, #7
 8000e1a:	4a36      	ldr	r2, [pc, #216]	; (8000ef4 <__aeabi_fsub+0x384>)
 8000e1c:	401c      	ands	r4, r3
 8000e1e:	2501      	movs	r5, #1
 8000e20:	4013      	ands	r3, r2
 8000e22:	e6ea      	b.n	8000bfa <__aeabi_fsub+0x8a>
 8000e24:	28ff      	cmp	r0, #255	; 0xff
 8000e26:	d0eb      	beq.n	8000e00 <__aeabi_fsub+0x290>
 8000e28:	2280      	movs	r2, #128	; 0x80
 8000e2a:	04d2      	lsls	r2, r2, #19
 8000e2c:	4276      	negs	r6, r6
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	2e1b      	cmp	r6, #27
 8000e32:	dc53      	bgt.n	8000edc <__aeabi_fsub+0x36c>
 8000e34:	2520      	movs	r5, #32
 8000e36:	1bad      	subs	r5, r5, r6
 8000e38:	001a      	movs	r2, r3
 8000e3a:	40ab      	lsls	r3, r5
 8000e3c:	40f2      	lsrs	r2, r6
 8000e3e:	1e5c      	subs	r4, r3, #1
 8000e40:	41a3      	sbcs	r3, r4
 8000e42:	4313      	orrs	r3, r2
 8000e44:	444b      	add	r3, r9
 8000e46:	0005      	movs	r5, r0
 8000e48:	e721      	b.n	8000c8e <__aeabi_fsub+0x11e>
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d0d8      	beq.n	8000e00 <__aeabi_fsub+0x290>
 8000e4e:	4649      	mov	r1, r9
 8000e50:	2900      	cmp	r1, #0
 8000e52:	d100      	bne.n	8000e56 <__aeabi_fsub+0x2e6>
 8000e54:	e752      	b.n	8000cfc <__aeabi_fsub+0x18c>
 8000e56:	2180      	movs	r1, #128	; 0x80
 8000e58:	03c9      	lsls	r1, r1, #15
 8000e5a:	420f      	tst	r7, r1
 8000e5c:	d100      	bne.n	8000e60 <__aeabi_fsub+0x2f0>
 8000e5e:	e74d      	b.n	8000cfc <__aeabi_fsub+0x18c>
 8000e60:	4660      	mov	r0, ip
 8000e62:	4208      	tst	r0, r1
 8000e64:	d000      	beq.n	8000e68 <__aeabi_fsub+0x2f8>
 8000e66:	e749      	b.n	8000cfc <__aeabi_fsub+0x18c>
 8000e68:	464b      	mov	r3, r9
 8000e6a:	e747      	b.n	8000cfc <__aeabi_fsub+0x18c>
 8000e6c:	4648      	mov	r0, r9
 8000e6e:	25ff      	movs	r5, #255	; 0xff
 8000e70:	2800      	cmp	r0, #0
 8000e72:	d100      	bne.n	8000e76 <__aeabi_fsub+0x306>
 8000e74:	e74f      	b.n	8000d16 <__aeabi_fsub+0x1a6>
 8000e76:	2280      	movs	r2, #128	; 0x80
 8000e78:	03d2      	lsls	r2, r2, #15
 8000e7a:	4217      	tst	r7, r2
 8000e7c:	d004      	beq.n	8000e88 <__aeabi_fsub+0x318>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	4210      	tst	r0, r2
 8000e82:	d101      	bne.n	8000e88 <__aeabi_fsub+0x318>
 8000e84:	464b      	mov	r3, r9
 8000e86:	4688      	mov	r8, r1
 8000e88:	2201      	movs	r2, #1
 8000e8a:	4641      	mov	r1, r8
 8000e8c:	25ff      	movs	r5, #255	; 0xff
 8000e8e:	400a      	ands	r2, r1
 8000e90:	e741      	b.n	8000d16 <__aeabi_fsub+0x1a6>
 8000e92:	4648      	mov	r0, r9
 8000e94:	2800      	cmp	r0, #0
 8000e96:	d01f      	beq.n	8000ed8 <__aeabi_fsub+0x368>
 8000e98:	1a1a      	subs	r2, r3, r0
 8000e9a:	0150      	lsls	r0, r2, #5
 8000e9c:	d520      	bpl.n	8000ee0 <__aeabi_fsub+0x370>
 8000e9e:	464a      	mov	r2, r9
 8000ea0:	2407      	movs	r4, #7
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	401c      	ands	r4, r3
 8000ea6:	4688      	mov	r8, r1
 8000ea8:	2500      	movs	r5, #0
 8000eaa:	e6a6      	b.n	8000bfa <__aeabi_fsub+0x8a>
 8000eac:	1c74      	adds	r4, r6, #1
 8000eae:	d0c9      	beq.n	8000e44 <__aeabi_fsub+0x2d4>
 8000eb0:	43f6      	mvns	r6, r6
 8000eb2:	28ff      	cmp	r0, #255	; 0xff
 8000eb4:	d1bc      	bne.n	8000e30 <__aeabi_fsub+0x2c0>
 8000eb6:	464b      	mov	r3, r9
 8000eb8:	e720      	b.n	8000cfc <__aeabi_fsub+0x18c>
 8000eba:	4699      	mov	r9, r3
 8000ebc:	464b      	mov	r3, r9
 8000ebe:	2500      	movs	r5, #0
 8000ec0:	08db      	lsrs	r3, r3, #3
 8000ec2:	e72b      	b.n	8000d1c <__aeabi_fsub+0x1ac>
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e740      	b.n	8000d4a <__aeabi_fsub+0x1da>
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e6a9      	b.n	8000c22 <__aeabi_fsub+0xb2>
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	03db      	lsls	r3, r3, #15
 8000ed4:	24ff      	movs	r4, #255	; 0xff
 8000ed6:	e6a4      	b.n	8000c22 <__aeabi_fsub+0xb2>
 8000ed8:	2500      	movs	r5, #0
 8000eda:	e71c      	b.n	8000d16 <__aeabi_fsub+0x1a6>
 8000edc:	2301      	movs	r3, #1
 8000ede:	e7b1      	b.n	8000e44 <__aeabi_fsub+0x2d4>
 8000ee0:	2a00      	cmp	r2, #0
 8000ee2:	d0f1      	beq.n	8000ec8 <__aeabi_fsub+0x358>
 8000ee4:	0013      	movs	r3, r2
 8000ee6:	2500      	movs	r5, #0
 8000ee8:	e6fc      	b.n	8000ce4 <__aeabi_fsub+0x174>
 8000eea:	2500      	movs	r5, #0
 8000eec:	e6fa      	b.n	8000ce4 <__aeabi_fsub+0x174>
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	7dffffff 	.word	0x7dffffff
 8000ef4:	fbffffff 	.word	0xfbffffff

08000ef8 <__aeabi_i2f>:
 8000ef8:	b570      	push	{r4, r5, r6, lr}
 8000efa:	2800      	cmp	r0, #0
 8000efc:	d03d      	beq.n	8000f7a <__aeabi_i2f+0x82>
 8000efe:	17c3      	asrs	r3, r0, #31
 8000f00:	18c5      	adds	r5, r0, r3
 8000f02:	405d      	eors	r5, r3
 8000f04:	0fc4      	lsrs	r4, r0, #31
 8000f06:	0028      	movs	r0, r5
 8000f08:	f001 fef4 	bl	8002cf4 <__clzsi2>
 8000f0c:	229e      	movs	r2, #158	; 0x9e
 8000f0e:	1a12      	subs	r2, r2, r0
 8000f10:	2a96      	cmp	r2, #150	; 0x96
 8000f12:	dc07      	bgt.n	8000f24 <__aeabi_i2f+0x2c>
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	2808      	cmp	r0, #8
 8000f18:	dd33      	ble.n	8000f82 <__aeabi_i2f+0x8a>
 8000f1a:	3808      	subs	r0, #8
 8000f1c:	4085      	lsls	r5, r0
 8000f1e:	0268      	lsls	r0, r5, #9
 8000f20:	0a40      	lsrs	r0, r0, #9
 8000f22:	e023      	b.n	8000f6c <__aeabi_i2f+0x74>
 8000f24:	2a99      	cmp	r2, #153	; 0x99
 8000f26:	dd0b      	ble.n	8000f40 <__aeabi_i2f+0x48>
 8000f28:	2305      	movs	r3, #5
 8000f2a:	0029      	movs	r1, r5
 8000f2c:	1a1b      	subs	r3, r3, r0
 8000f2e:	40d9      	lsrs	r1, r3
 8000f30:	0003      	movs	r3, r0
 8000f32:	331b      	adds	r3, #27
 8000f34:	409d      	lsls	r5, r3
 8000f36:	002b      	movs	r3, r5
 8000f38:	1e5d      	subs	r5, r3, #1
 8000f3a:	41ab      	sbcs	r3, r5
 8000f3c:	4319      	orrs	r1, r3
 8000f3e:	000d      	movs	r5, r1
 8000f40:	2805      	cmp	r0, #5
 8000f42:	dd01      	ble.n	8000f48 <__aeabi_i2f+0x50>
 8000f44:	1f43      	subs	r3, r0, #5
 8000f46:	409d      	lsls	r5, r3
 8000f48:	002b      	movs	r3, r5
 8000f4a:	490f      	ldr	r1, [pc, #60]	; (8000f88 <__aeabi_i2f+0x90>)
 8000f4c:	400b      	ands	r3, r1
 8000f4e:	076e      	lsls	r6, r5, #29
 8000f50:	d009      	beq.n	8000f66 <__aeabi_i2f+0x6e>
 8000f52:	260f      	movs	r6, #15
 8000f54:	4035      	ands	r5, r6
 8000f56:	2d04      	cmp	r5, #4
 8000f58:	d005      	beq.n	8000f66 <__aeabi_i2f+0x6e>
 8000f5a:	3304      	adds	r3, #4
 8000f5c:	015d      	lsls	r5, r3, #5
 8000f5e:	d502      	bpl.n	8000f66 <__aeabi_i2f+0x6e>
 8000f60:	229f      	movs	r2, #159	; 0x9f
 8000f62:	400b      	ands	r3, r1
 8000f64:	1a12      	subs	r2, r2, r0
 8000f66:	019b      	lsls	r3, r3, #6
 8000f68:	0a58      	lsrs	r0, r3, #9
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	0240      	lsls	r0, r0, #9
 8000f6e:	05d2      	lsls	r2, r2, #23
 8000f70:	0a40      	lsrs	r0, r0, #9
 8000f72:	07e4      	lsls	r4, r4, #31
 8000f74:	4310      	orrs	r0, r2
 8000f76:	4320      	orrs	r0, r4
 8000f78:	bd70      	pop	{r4, r5, r6, pc}
 8000f7a:	2400      	movs	r4, #0
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2000      	movs	r0, #0
 8000f80:	e7f4      	b.n	8000f6c <__aeabi_i2f+0x74>
 8000f82:	0268      	lsls	r0, r5, #9
 8000f84:	0a40      	lsrs	r0, r0, #9
 8000f86:	e7f1      	b.n	8000f6c <__aeabi_i2f+0x74>
 8000f88:	fbffffff 	.word	0xfbffffff

08000f8c <__aeabi_ui2f>:
 8000f8c:	b570      	push	{r4, r5, r6, lr}
 8000f8e:	1e04      	subs	r4, r0, #0
 8000f90:	d034      	beq.n	8000ffc <__aeabi_ui2f+0x70>
 8000f92:	f001 feaf 	bl	8002cf4 <__clzsi2>
 8000f96:	229e      	movs	r2, #158	; 0x9e
 8000f98:	1a12      	subs	r2, r2, r0
 8000f9a:	2a96      	cmp	r2, #150	; 0x96
 8000f9c:	dc07      	bgt.n	8000fae <__aeabi_ui2f+0x22>
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	2808      	cmp	r0, #8
 8000fa2:	dd2e      	ble.n	8001002 <__aeabi_ui2f+0x76>
 8000fa4:	3808      	subs	r0, #8
 8000fa6:	4084      	lsls	r4, r0
 8000fa8:	0260      	lsls	r0, r4, #9
 8000faa:	0a40      	lsrs	r0, r0, #9
 8000fac:	e021      	b.n	8000ff2 <__aeabi_ui2f+0x66>
 8000fae:	2a99      	cmp	r2, #153	; 0x99
 8000fb0:	dd09      	ble.n	8000fc6 <__aeabi_ui2f+0x3a>
 8000fb2:	0003      	movs	r3, r0
 8000fb4:	0021      	movs	r1, r4
 8000fb6:	331b      	adds	r3, #27
 8000fb8:	4099      	lsls	r1, r3
 8000fba:	1e4b      	subs	r3, r1, #1
 8000fbc:	4199      	sbcs	r1, r3
 8000fbe:	2305      	movs	r3, #5
 8000fc0:	1a1b      	subs	r3, r3, r0
 8000fc2:	40dc      	lsrs	r4, r3
 8000fc4:	430c      	orrs	r4, r1
 8000fc6:	2805      	cmp	r0, #5
 8000fc8:	dd01      	ble.n	8000fce <__aeabi_ui2f+0x42>
 8000fca:	1f43      	subs	r3, r0, #5
 8000fcc:	409c      	lsls	r4, r3
 8000fce:	0023      	movs	r3, r4
 8000fd0:	490d      	ldr	r1, [pc, #52]	; (8001008 <__aeabi_ui2f+0x7c>)
 8000fd2:	400b      	ands	r3, r1
 8000fd4:	0765      	lsls	r5, r4, #29
 8000fd6:	d009      	beq.n	8000fec <__aeabi_ui2f+0x60>
 8000fd8:	250f      	movs	r5, #15
 8000fda:	402c      	ands	r4, r5
 8000fdc:	2c04      	cmp	r4, #4
 8000fde:	d005      	beq.n	8000fec <__aeabi_ui2f+0x60>
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	015c      	lsls	r4, r3, #5
 8000fe4:	d502      	bpl.n	8000fec <__aeabi_ui2f+0x60>
 8000fe6:	229f      	movs	r2, #159	; 0x9f
 8000fe8:	400b      	ands	r3, r1
 8000fea:	1a12      	subs	r2, r2, r0
 8000fec:	019b      	lsls	r3, r3, #6
 8000fee:	0a58      	lsrs	r0, r3, #9
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	0240      	lsls	r0, r0, #9
 8000ff4:	05d2      	lsls	r2, r2, #23
 8000ff6:	0a40      	lsrs	r0, r0, #9
 8000ff8:	4310      	orrs	r0, r2
 8000ffa:	bd70      	pop	{r4, r5, r6, pc}
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2000      	movs	r0, #0
 8001000:	e7f7      	b.n	8000ff2 <__aeabi_ui2f+0x66>
 8001002:	0260      	lsls	r0, r4, #9
 8001004:	0a40      	lsrs	r0, r0, #9
 8001006:	e7f4      	b.n	8000ff2 <__aeabi_ui2f+0x66>
 8001008:	fbffffff 	.word	0xfbffffff

0800100c <__aeabi_dadd>:
 800100c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800100e:	464f      	mov	r7, r9
 8001010:	4646      	mov	r6, r8
 8001012:	46d6      	mov	lr, sl
 8001014:	000c      	movs	r4, r1
 8001016:	0309      	lsls	r1, r1, #12
 8001018:	b5c0      	push	{r6, r7, lr}
 800101a:	0a49      	lsrs	r1, r1, #9
 800101c:	0f47      	lsrs	r7, r0, #29
 800101e:	005e      	lsls	r6, r3, #1
 8001020:	4339      	orrs	r1, r7
 8001022:	031f      	lsls	r7, r3, #12
 8001024:	0fdb      	lsrs	r3, r3, #31
 8001026:	469c      	mov	ip, r3
 8001028:	0065      	lsls	r5, r4, #1
 800102a:	0a7b      	lsrs	r3, r7, #9
 800102c:	0f57      	lsrs	r7, r2, #29
 800102e:	431f      	orrs	r7, r3
 8001030:	0d6d      	lsrs	r5, r5, #21
 8001032:	0fe4      	lsrs	r4, r4, #31
 8001034:	0d76      	lsrs	r6, r6, #21
 8001036:	46a1      	mov	r9, r4
 8001038:	00c0      	lsls	r0, r0, #3
 800103a:	46b8      	mov	r8, r7
 800103c:	00d2      	lsls	r2, r2, #3
 800103e:	1bab      	subs	r3, r5, r6
 8001040:	4564      	cmp	r4, ip
 8001042:	d07b      	beq.n	800113c <__aeabi_dadd+0x130>
 8001044:	2b00      	cmp	r3, #0
 8001046:	dd5f      	ble.n	8001108 <__aeabi_dadd+0xfc>
 8001048:	2e00      	cmp	r6, #0
 800104a:	d000      	beq.n	800104e <__aeabi_dadd+0x42>
 800104c:	e0a4      	b.n	8001198 <__aeabi_dadd+0x18c>
 800104e:	003e      	movs	r6, r7
 8001050:	4316      	orrs	r6, r2
 8001052:	d100      	bne.n	8001056 <__aeabi_dadd+0x4a>
 8001054:	e112      	b.n	800127c <__aeabi_dadd+0x270>
 8001056:	1e5e      	subs	r6, r3, #1
 8001058:	2e00      	cmp	r6, #0
 800105a:	d000      	beq.n	800105e <__aeabi_dadd+0x52>
 800105c:	e19e      	b.n	800139c <__aeabi_dadd+0x390>
 800105e:	1a87      	subs	r7, r0, r2
 8001060:	4643      	mov	r3, r8
 8001062:	42b8      	cmp	r0, r7
 8001064:	4180      	sbcs	r0, r0
 8001066:	2501      	movs	r5, #1
 8001068:	1ac9      	subs	r1, r1, r3
 800106a:	4240      	negs	r0, r0
 800106c:	1a09      	subs	r1, r1, r0
 800106e:	020b      	lsls	r3, r1, #8
 8001070:	d400      	bmi.n	8001074 <__aeabi_dadd+0x68>
 8001072:	e131      	b.n	80012d8 <__aeabi_dadd+0x2cc>
 8001074:	0249      	lsls	r1, r1, #9
 8001076:	0a4e      	lsrs	r6, r1, #9
 8001078:	2e00      	cmp	r6, #0
 800107a:	d100      	bne.n	800107e <__aeabi_dadd+0x72>
 800107c:	e16e      	b.n	800135c <__aeabi_dadd+0x350>
 800107e:	0030      	movs	r0, r6
 8001080:	f001 fe38 	bl	8002cf4 <__clzsi2>
 8001084:	0003      	movs	r3, r0
 8001086:	3b08      	subs	r3, #8
 8001088:	2b1f      	cmp	r3, #31
 800108a:	dd00      	ble.n	800108e <__aeabi_dadd+0x82>
 800108c:	e161      	b.n	8001352 <__aeabi_dadd+0x346>
 800108e:	2220      	movs	r2, #32
 8001090:	0039      	movs	r1, r7
 8001092:	1ad2      	subs	r2, r2, r3
 8001094:	409e      	lsls	r6, r3
 8001096:	40d1      	lsrs	r1, r2
 8001098:	409f      	lsls	r7, r3
 800109a:	430e      	orrs	r6, r1
 800109c:	429d      	cmp	r5, r3
 800109e:	dd00      	ble.n	80010a2 <__aeabi_dadd+0x96>
 80010a0:	e151      	b.n	8001346 <__aeabi_dadd+0x33a>
 80010a2:	1b5d      	subs	r5, r3, r5
 80010a4:	1c6b      	adds	r3, r5, #1
 80010a6:	2b1f      	cmp	r3, #31
 80010a8:	dd00      	ble.n	80010ac <__aeabi_dadd+0xa0>
 80010aa:	e17c      	b.n	80013a6 <__aeabi_dadd+0x39a>
 80010ac:	2120      	movs	r1, #32
 80010ae:	1ac9      	subs	r1, r1, r3
 80010b0:	003d      	movs	r5, r7
 80010b2:	0030      	movs	r0, r6
 80010b4:	408f      	lsls	r7, r1
 80010b6:	4088      	lsls	r0, r1
 80010b8:	40dd      	lsrs	r5, r3
 80010ba:	1e79      	subs	r1, r7, #1
 80010bc:	418f      	sbcs	r7, r1
 80010be:	0031      	movs	r1, r6
 80010c0:	2207      	movs	r2, #7
 80010c2:	4328      	orrs	r0, r5
 80010c4:	40d9      	lsrs	r1, r3
 80010c6:	2500      	movs	r5, #0
 80010c8:	4307      	orrs	r7, r0
 80010ca:	403a      	ands	r2, r7
 80010cc:	2a00      	cmp	r2, #0
 80010ce:	d009      	beq.n	80010e4 <__aeabi_dadd+0xd8>
 80010d0:	230f      	movs	r3, #15
 80010d2:	403b      	ands	r3, r7
 80010d4:	2b04      	cmp	r3, #4
 80010d6:	d005      	beq.n	80010e4 <__aeabi_dadd+0xd8>
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	42bb      	cmp	r3, r7
 80010dc:	41bf      	sbcs	r7, r7
 80010de:	427f      	negs	r7, r7
 80010e0:	19c9      	adds	r1, r1, r7
 80010e2:	001f      	movs	r7, r3
 80010e4:	020b      	lsls	r3, r1, #8
 80010e6:	d400      	bmi.n	80010ea <__aeabi_dadd+0xde>
 80010e8:	e226      	b.n	8001538 <__aeabi_dadd+0x52c>
 80010ea:	1c6a      	adds	r2, r5, #1
 80010ec:	4bc6      	ldr	r3, [pc, #792]	; (8001408 <__aeabi_dadd+0x3fc>)
 80010ee:	0555      	lsls	r5, r2, #21
 80010f0:	0d6d      	lsrs	r5, r5, #21
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d100      	bne.n	80010f8 <__aeabi_dadd+0xec>
 80010f6:	e106      	b.n	8001306 <__aeabi_dadd+0x2fa>
 80010f8:	4ac4      	ldr	r2, [pc, #784]	; (800140c <__aeabi_dadd+0x400>)
 80010fa:	08ff      	lsrs	r7, r7, #3
 80010fc:	400a      	ands	r2, r1
 80010fe:	0753      	lsls	r3, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	433b      	orrs	r3, r7
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	e08e      	b.n	8001226 <__aeabi_dadd+0x21a>
 8001108:	2b00      	cmp	r3, #0
 800110a:	d000      	beq.n	800110e <__aeabi_dadd+0x102>
 800110c:	e0b8      	b.n	8001280 <__aeabi_dadd+0x274>
 800110e:	1c6b      	adds	r3, r5, #1
 8001110:	055b      	lsls	r3, r3, #21
 8001112:	0d5b      	lsrs	r3, r3, #21
 8001114:	2b01      	cmp	r3, #1
 8001116:	dc00      	bgt.n	800111a <__aeabi_dadd+0x10e>
 8001118:	e130      	b.n	800137c <__aeabi_dadd+0x370>
 800111a:	1a87      	subs	r7, r0, r2
 800111c:	4643      	mov	r3, r8
 800111e:	42b8      	cmp	r0, r7
 8001120:	41b6      	sbcs	r6, r6
 8001122:	1acb      	subs	r3, r1, r3
 8001124:	4276      	negs	r6, r6
 8001126:	1b9e      	subs	r6, r3, r6
 8001128:	0233      	lsls	r3, r6, #8
 800112a:	d500      	bpl.n	800112e <__aeabi_dadd+0x122>
 800112c:	e14c      	b.n	80013c8 <__aeabi_dadd+0x3bc>
 800112e:	003b      	movs	r3, r7
 8001130:	4333      	orrs	r3, r6
 8001132:	d1a1      	bne.n	8001078 <__aeabi_dadd+0x6c>
 8001134:	2200      	movs	r2, #0
 8001136:	2400      	movs	r4, #0
 8001138:	2500      	movs	r5, #0
 800113a:	e070      	b.n	800121e <__aeabi_dadd+0x212>
 800113c:	2b00      	cmp	r3, #0
 800113e:	dc00      	bgt.n	8001142 <__aeabi_dadd+0x136>
 8001140:	e0e5      	b.n	800130e <__aeabi_dadd+0x302>
 8001142:	2e00      	cmp	r6, #0
 8001144:	d100      	bne.n	8001148 <__aeabi_dadd+0x13c>
 8001146:	e083      	b.n	8001250 <__aeabi_dadd+0x244>
 8001148:	4eaf      	ldr	r6, [pc, #700]	; (8001408 <__aeabi_dadd+0x3fc>)
 800114a:	42b5      	cmp	r5, r6
 800114c:	d060      	beq.n	8001210 <__aeabi_dadd+0x204>
 800114e:	2680      	movs	r6, #128	; 0x80
 8001150:	0436      	lsls	r6, r6, #16
 8001152:	4337      	orrs	r7, r6
 8001154:	46b8      	mov	r8, r7
 8001156:	2b38      	cmp	r3, #56	; 0x38
 8001158:	dc00      	bgt.n	800115c <__aeabi_dadd+0x150>
 800115a:	e13e      	b.n	80013da <__aeabi_dadd+0x3ce>
 800115c:	4643      	mov	r3, r8
 800115e:	4313      	orrs	r3, r2
 8001160:	001f      	movs	r7, r3
 8001162:	1e7a      	subs	r2, r7, #1
 8001164:	4197      	sbcs	r7, r2
 8001166:	183f      	adds	r7, r7, r0
 8001168:	4287      	cmp	r7, r0
 800116a:	4180      	sbcs	r0, r0
 800116c:	4240      	negs	r0, r0
 800116e:	1809      	adds	r1, r1, r0
 8001170:	020b      	lsls	r3, r1, #8
 8001172:	d400      	bmi.n	8001176 <__aeabi_dadd+0x16a>
 8001174:	e0b0      	b.n	80012d8 <__aeabi_dadd+0x2cc>
 8001176:	4ba4      	ldr	r3, [pc, #656]	; (8001408 <__aeabi_dadd+0x3fc>)
 8001178:	3501      	adds	r5, #1
 800117a:	429d      	cmp	r5, r3
 800117c:	d100      	bne.n	8001180 <__aeabi_dadd+0x174>
 800117e:	e0c3      	b.n	8001308 <__aeabi_dadd+0x2fc>
 8001180:	4aa2      	ldr	r2, [pc, #648]	; (800140c <__aeabi_dadd+0x400>)
 8001182:	087b      	lsrs	r3, r7, #1
 8001184:	400a      	ands	r2, r1
 8001186:	2101      	movs	r1, #1
 8001188:	400f      	ands	r7, r1
 800118a:	431f      	orrs	r7, r3
 800118c:	0851      	lsrs	r1, r2, #1
 800118e:	07d3      	lsls	r3, r2, #31
 8001190:	2207      	movs	r2, #7
 8001192:	431f      	orrs	r7, r3
 8001194:	403a      	ands	r2, r7
 8001196:	e799      	b.n	80010cc <__aeabi_dadd+0xc0>
 8001198:	4e9b      	ldr	r6, [pc, #620]	; (8001408 <__aeabi_dadd+0x3fc>)
 800119a:	42b5      	cmp	r5, r6
 800119c:	d038      	beq.n	8001210 <__aeabi_dadd+0x204>
 800119e:	2680      	movs	r6, #128	; 0x80
 80011a0:	0436      	lsls	r6, r6, #16
 80011a2:	4337      	orrs	r7, r6
 80011a4:	46b8      	mov	r8, r7
 80011a6:	2b38      	cmp	r3, #56	; 0x38
 80011a8:	dd00      	ble.n	80011ac <__aeabi_dadd+0x1a0>
 80011aa:	e0dc      	b.n	8001366 <__aeabi_dadd+0x35a>
 80011ac:	2b1f      	cmp	r3, #31
 80011ae:	dc00      	bgt.n	80011b2 <__aeabi_dadd+0x1a6>
 80011b0:	e130      	b.n	8001414 <__aeabi_dadd+0x408>
 80011b2:	001e      	movs	r6, r3
 80011b4:	4647      	mov	r7, r8
 80011b6:	3e20      	subs	r6, #32
 80011b8:	40f7      	lsrs	r7, r6
 80011ba:	46bc      	mov	ip, r7
 80011bc:	2b20      	cmp	r3, #32
 80011be:	d004      	beq.n	80011ca <__aeabi_dadd+0x1be>
 80011c0:	2640      	movs	r6, #64	; 0x40
 80011c2:	1af3      	subs	r3, r6, r3
 80011c4:	4646      	mov	r6, r8
 80011c6:	409e      	lsls	r6, r3
 80011c8:	4332      	orrs	r2, r6
 80011ca:	0017      	movs	r7, r2
 80011cc:	4663      	mov	r3, ip
 80011ce:	1e7a      	subs	r2, r7, #1
 80011d0:	4197      	sbcs	r7, r2
 80011d2:	431f      	orrs	r7, r3
 80011d4:	e0cc      	b.n	8001370 <__aeabi_dadd+0x364>
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d100      	bne.n	80011dc <__aeabi_dadd+0x1d0>
 80011da:	e204      	b.n	80015e6 <__aeabi_dadd+0x5da>
 80011dc:	4643      	mov	r3, r8
 80011de:	4313      	orrs	r3, r2
 80011e0:	d100      	bne.n	80011e4 <__aeabi_dadd+0x1d8>
 80011e2:	e159      	b.n	8001498 <__aeabi_dadd+0x48c>
 80011e4:	074b      	lsls	r3, r1, #29
 80011e6:	08c0      	lsrs	r0, r0, #3
 80011e8:	4318      	orrs	r0, r3
 80011ea:	2380      	movs	r3, #128	; 0x80
 80011ec:	08c9      	lsrs	r1, r1, #3
 80011ee:	031b      	lsls	r3, r3, #12
 80011f0:	4219      	tst	r1, r3
 80011f2:	d008      	beq.n	8001206 <__aeabi_dadd+0x1fa>
 80011f4:	4645      	mov	r5, r8
 80011f6:	08ed      	lsrs	r5, r5, #3
 80011f8:	421d      	tst	r5, r3
 80011fa:	d104      	bne.n	8001206 <__aeabi_dadd+0x1fa>
 80011fc:	4643      	mov	r3, r8
 80011fe:	08d0      	lsrs	r0, r2, #3
 8001200:	0759      	lsls	r1, r3, #29
 8001202:	4308      	orrs	r0, r1
 8001204:	0029      	movs	r1, r5
 8001206:	0f42      	lsrs	r2, r0, #29
 8001208:	00c9      	lsls	r1, r1, #3
 800120a:	4d7f      	ldr	r5, [pc, #508]	; (8001408 <__aeabi_dadd+0x3fc>)
 800120c:	4311      	orrs	r1, r2
 800120e:	00c0      	lsls	r0, r0, #3
 8001210:	074b      	lsls	r3, r1, #29
 8001212:	08ca      	lsrs	r2, r1, #3
 8001214:	497c      	ldr	r1, [pc, #496]	; (8001408 <__aeabi_dadd+0x3fc>)
 8001216:	08c0      	lsrs	r0, r0, #3
 8001218:	4303      	orrs	r3, r0
 800121a:	428d      	cmp	r5, r1
 800121c:	d068      	beq.n	80012f0 <__aeabi_dadd+0x2e4>
 800121e:	0312      	lsls	r2, r2, #12
 8001220:	056d      	lsls	r5, r5, #21
 8001222:	0b12      	lsrs	r2, r2, #12
 8001224:	0d6d      	lsrs	r5, r5, #21
 8001226:	2100      	movs	r1, #0
 8001228:	0312      	lsls	r2, r2, #12
 800122a:	0018      	movs	r0, r3
 800122c:	0b13      	lsrs	r3, r2, #12
 800122e:	0d0a      	lsrs	r2, r1, #20
 8001230:	0512      	lsls	r2, r2, #20
 8001232:	431a      	orrs	r2, r3
 8001234:	4b76      	ldr	r3, [pc, #472]	; (8001410 <__aeabi_dadd+0x404>)
 8001236:	052d      	lsls	r5, r5, #20
 8001238:	4013      	ands	r3, r2
 800123a:	432b      	orrs	r3, r5
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	07e4      	lsls	r4, r4, #31
 8001240:	085b      	lsrs	r3, r3, #1
 8001242:	4323      	orrs	r3, r4
 8001244:	0019      	movs	r1, r3
 8001246:	bc1c      	pop	{r2, r3, r4}
 8001248:	4690      	mov	r8, r2
 800124a:	4699      	mov	r9, r3
 800124c:	46a2      	mov	sl, r4
 800124e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001250:	003e      	movs	r6, r7
 8001252:	4316      	orrs	r6, r2
 8001254:	d012      	beq.n	800127c <__aeabi_dadd+0x270>
 8001256:	1e5e      	subs	r6, r3, #1
 8001258:	2e00      	cmp	r6, #0
 800125a:	d000      	beq.n	800125e <__aeabi_dadd+0x252>
 800125c:	e100      	b.n	8001460 <__aeabi_dadd+0x454>
 800125e:	1887      	adds	r7, r0, r2
 8001260:	4287      	cmp	r7, r0
 8001262:	4180      	sbcs	r0, r0
 8001264:	4441      	add	r1, r8
 8001266:	4240      	negs	r0, r0
 8001268:	1809      	adds	r1, r1, r0
 800126a:	2501      	movs	r5, #1
 800126c:	020b      	lsls	r3, r1, #8
 800126e:	d533      	bpl.n	80012d8 <__aeabi_dadd+0x2cc>
 8001270:	2502      	movs	r5, #2
 8001272:	e785      	b.n	8001180 <__aeabi_dadd+0x174>
 8001274:	4664      	mov	r4, ip
 8001276:	0033      	movs	r3, r6
 8001278:	4641      	mov	r1, r8
 800127a:	0010      	movs	r0, r2
 800127c:	001d      	movs	r5, r3
 800127e:	e7c7      	b.n	8001210 <__aeabi_dadd+0x204>
 8001280:	2d00      	cmp	r5, #0
 8001282:	d000      	beq.n	8001286 <__aeabi_dadd+0x27a>
 8001284:	e0da      	b.n	800143c <__aeabi_dadd+0x430>
 8001286:	000c      	movs	r4, r1
 8001288:	4304      	orrs	r4, r0
 800128a:	d0f3      	beq.n	8001274 <__aeabi_dadd+0x268>
 800128c:	1c5c      	adds	r4, r3, #1
 800128e:	d100      	bne.n	8001292 <__aeabi_dadd+0x286>
 8001290:	e19f      	b.n	80015d2 <__aeabi_dadd+0x5c6>
 8001292:	4c5d      	ldr	r4, [pc, #372]	; (8001408 <__aeabi_dadd+0x3fc>)
 8001294:	42a6      	cmp	r6, r4
 8001296:	d100      	bne.n	800129a <__aeabi_dadd+0x28e>
 8001298:	e12f      	b.n	80014fa <__aeabi_dadd+0x4ee>
 800129a:	43db      	mvns	r3, r3
 800129c:	2b38      	cmp	r3, #56	; 0x38
 800129e:	dd00      	ble.n	80012a2 <__aeabi_dadd+0x296>
 80012a0:	e166      	b.n	8001570 <__aeabi_dadd+0x564>
 80012a2:	2b1f      	cmp	r3, #31
 80012a4:	dd00      	ble.n	80012a8 <__aeabi_dadd+0x29c>
 80012a6:	e183      	b.n	80015b0 <__aeabi_dadd+0x5a4>
 80012a8:	2420      	movs	r4, #32
 80012aa:	0005      	movs	r5, r0
 80012ac:	1ae4      	subs	r4, r4, r3
 80012ae:	000f      	movs	r7, r1
 80012b0:	40dd      	lsrs	r5, r3
 80012b2:	40d9      	lsrs	r1, r3
 80012b4:	40a0      	lsls	r0, r4
 80012b6:	4643      	mov	r3, r8
 80012b8:	40a7      	lsls	r7, r4
 80012ba:	1a5b      	subs	r3, r3, r1
 80012bc:	1e44      	subs	r4, r0, #1
 80012be:	41a0      	sbcs	r0, r4
 80012c0:	4698      	mov	r8, r3
 80012c2:	432f      	orrs	r7, r5
 80012c4:	4338      	orrs	r0, r7
 80012c6:	1a17      	subs	r7, r2, r0
 80012c8:	42ba      	cmp	r2, r7
 80012ca:	4192      	sbcs	r2, r2
 80012cc:	4643      	mov	r3, r8
 80012ce:	4252      	negs	r2, r2
 80012d0:	1a99      	subs	r1, r3, r2
 80012d2:	4664      	mov	r4, ip
 80012d4:	0035      	movs	r5, r6
 80012d6:	e6ca      	b.n	800106e <__aeabi_dadd+0x62>
 80012d8:	2207      	movs	r2, #7
 80012da:	403a      	ands	r2, r7
 80012dc:	2a00      	cmp	r2, #0
 80012de:	d000      	beq.n	80012e2 <__aeabi_dadd+0x2d6>
 80012e0:	e6f6      	b.n	80010d0 <__aeabi_dadd+0xc4>
 80012e2:	074b      	lsls	r3, r1, #29
 80012e4:	08ca      	lsrs	r2, r1, #3
 80012e6:	4948      	ldr	r1, [pc, #288]	; (8001408 <__aeabi_dadd+0x3fc>)
 80012e8:	08ff      	lsrs	r7, r7, #3
 80012ea:	433b      	orrs	r3, r7
 80012ec:	428d      	cmp	r5, r1
 80012ee:	d196      	bne.n	800121e <__aeabi_dadd+0x212>
 80012f0:	0019      	movs	r1, r3
 80012f2:	4311      	orrs	r1, r2
 80012f4:	d100      	bne.n	80012f8 <__aeabi_dadd+0x2ec>
 80012f6:	e19e      	b.n	8001636 <__aeabi_dadd+0x62a>
 80012f8:	2180      	movs	r1, #128	; 0x80
 80012fa:	0309      	lsls	r1, r1, #12
 80012fc:	430a      	orrs	r2, r1
 80012fe:	0312      	lsls	r2, r2, #12
 8001300:	0b12      	lsrs	r2, r2, #12
 8001302:	4d41      	ldr	r5, [pc, #260]	; (8001408 <__aeabi_dadd+0x3fc>)
 8001304:	e78f      	b.n	8001226 <__aeabi_dadd+0x21a>
 8001306:	0015      	movs	r5, r2
 8001308:	2200      	movs	r2, #0
 800130a:	2300      	movs	r3, #0
 800130c:	e78b      	b.n	8001226 <__aeabi_dadd+0x21a>
 800130e:	2b00      	cmp	r3, #0
 8001310:	d000      	beq.n	8001314 <__aeabi_dadd+0x308>
 8001312:	e0c7      	b.n	80014a4 <__aeabi_dadd+0x498>
 8001314:	1c6b      	adds	r3, r5, #1
 8001316:	055f      	lsls	r7, r3, #21
 8001318:	0d7f      	lsrs	r7, r7, #21
 800131a:	2f01      	cmp	r7, #1
 800131c:	dc00      	bgt.n	8001320 <__aeabi_dadd+0x314>
 800131e:	e0f1      	b.n	8001504 <__aeabi_dadd+0x4f8>
 8001320:	4d39      	ldr	r5, [pc, #228]	; (8001408 <__aeabi_dadd+0x3fc>)
 8001322:	42ab      	cmp	r3, r5
 8001324:	d100      	bne.n	8001328 <__aeabi_dadd+0x31c>
 8001326:	e0b9      	b.n	800149c <__aeabi_dadd+0x490>
 8001328:	1885      	adds	r5, r0, r2
 800132a:	000a      	movs	r2, r1
 800132c:	4285      	cmp	r5, r0
 800132e:	4189      	sbcs	r1, r1
 8001330:	4442      	add	r2, r8
 8001332:	4249      	negs	r1, r1
 8001334:	1851      	adds	r1, r2, r1
 8001336:	2207      	movs	r2, #7
 8001338:	07cf      	lsls	r7, r1, #31
 800133a:	086d      	lsrs	r5, r5, #1
 800133c:	432f      	orrs	r7, r5
 800133e:	0849      	lsrs	r1, r1, #1
 8001340:	403a      	ands	r2, r7
 8001342:	001d      	movs	r5, r3
 8001344:	e6c2      	b.n	80010cc <__aeabi_dadd+0xc0>
 8001346:	2207      	movs	r2, #7
 8001348:	4930      	ldr	r1, [pc, #192]	; (800140c <__aeabi_dadd+0x400>)
 800134a:	1aed      	subs	r5, r5, r3
 800134c:	4031      	ands	r1, r6
 800134e:	403a      	ands	r2, r7
 8001350:	e6bc      	b.n	80010cc <__aeabi_dadd+0xc0>
 8001352:	003e      	movs	r6, r7
 8001354:	3828      	subs	r0, #40	; 0x28
 8001356:	4086      	lsls	r6, r0
 8001358:	2700      	movs	r7, #0
 800135a:	e69f      	b.n	800109c <__aeabi_dadd+0x90>
 800135c:	0038      	movs	r0, r7
 800135e:	f001 fcc9 	bl	8002cf4 <__clzsi2>
 8001362:	3020      	adds	r0, #32
 8001364:	e68e      	b.n	8001084 <__aeabi_dadd+0x78>
 8001366:	4643      	mov	r3, r8
 8001368:	4313      	orrs	r3, r2
 800136a:	001f      	movs	r7, r3
 800136c:	1e7a      	subs	r2, r7, #1
 800136e:	4197      	sbcs	r7, r2
 8001370:	1bc7      	subs	r7, r0, r7
 8001372:	42b8      	cmp	r0, r7
 8001374:	4180      	sbcs	r0, r0
 8001376:	4240      	negs	r0, r0
 8001378:	1a09      	subs	r1, r1, r0
 800137a:	e678      	b.n	800106e <__aeabi_dadd+0x62>
 800137c:	000e      	movs	r6, r1
 800137e:	003b      	movs	r3, r7
 8001380:	4306      	orrs	r6, r0
 8001382:	4313      	orrs	r3, r2
 8001384:	2d00      	cmp	r5, #0
 8001386:	d161      	bne.n	800144c <__aeabi_dadd+0x440>
 8001388:	2e00      	cmp	r6, #0
 800138a:	d000      	beq.n	800138e <__aeabi_dadd+0x382>
 800138c:	e0f4      	b.n	8001578 <__aeabi_dadd+0x56c>
 800138e:	2b00      	cmp	r3, #0
 8001390:	d100      	bne.n	8001394 <__aeabi_dadd+0x388>
 8001392:	e11b      	b.n	80015cc <__aeabi_dadd+0x5c0>
 8001394:	4664      	mov	r4, ip
 8001396:	0039      	movs	r1, r7
 8001398:	0010      	movs	r0, r2
 800139a:	e739      	b.n	8001210 <__aeabi_dadd+0x204>
 800139c:	4f1a      	ldr	r7, [pc, #104]	; (8001408 <__aeabi_dadd+0x3fc>)
 800139e:	42bb      	cmp	r3, r7
 80013a0:	d07a      	beq.n	8001498 <__aeabi_dadd+0x48c>
 80013a2:	0033      	movs	r3, r6
 80013a4:	e6ff      	b.n	80011a6 <__aeabi_dadd+0x19a>
 80013a6:	0030      	movs	r0, r6
 80013a8:	3d1f      	subs	r5, #31
 80013aa:	40e8      	lsrs	r0, r5
 80013ac:	2b20      	cmp	r3, #32
 80013ae:	d003      	beq.n	80013b8 <__aeabi_dadd+0x3ac>
 80013b0:	2140      	movs	r1, #64	; 0x40
 80013b2:	1acb      	subs	r3, r1, r3
 80013b4:	409e      	lsls	r6, r3
 80013b6:	4337      	orrs	r7, r6
 80013b8:	1e7b      	subs	r3, r7, #1
 80013ba:	419f      	sbcs	r7, r3
 80013bc:	2207      	movs	r2, #7
 80013be:	4307      	orrs	r7, r0
 80013c0:	403a      	ands	r2, r7
 80013c2:	2100      	movs	r1, #0
 80013c4:	2500      	movs	r5, #0
 80013c6:	e789      	b.n	80012dc <__aeabi_dadd+0x2d0>
 80013c8:	1a17      	subs	r7, r2, r0
 80013ca:	4643      	mov	r3, r8
 80013cc:	42ba      	cmp	r2, r7
 80013ce:	41b6      	sbcs	r6, r6
 80013d0:	1a59      	subs	r1, r3, r1
 80013d2:	4276      	negs	r6, r6
 80013d4:	1b8e      	subs	r6, r1, r6
 80013d6:	4664      	mov	r4, ip
 80013d8:	e64e      	b.n	8001078 <__aeabi_dadd+0x6c>
 80013da:	2b1f      	cmp	r3, #31
 80013dc:	dd00      	ble.n	80013e0 <__aeabi_dadd+0x3d4>
 80013de:	e0ad      	b.n	800153c <__aeabi_dadd+0x530>
 80013e0:	2620      	movs	r6, #32
 80013e2:	4647      	mov	r7, r8
 80013e4:	1af6      	subs	r6, r6, r3
 80013e6:	40b7      	lsls	r7, r6
 80013e8:	46b9      	mov	r9, r7
 80013ea:	0017      	movs	r7, r2
 80013ec:	46b2      	mov	sl, r6
 80013ee:	40df      	lsrs	r7, r3
 80013f0:	464e      	mov	r6, r9
 80013f2:	433e      	orrs	r6, r7
 80013f4:	0037      	movs	r7, r6
 80013f6:	4656      	mov	r6, sl
 80013f8:	40b2      	lsls	r2, r6
 80013fa:	1e56      	subs	r6, r2, #1
 80013fc:	41b2      	sbcs	r2, r6
 80013fe:	4317      	orrs	r7, r2
 8001400:	4642      	mov	r2, r8
 8001402:	40da      	lsrs	r2, r3
 8001404:	1889      	adds	r1, r1, r2
 8001406:	e6ae      	b.n	8001166 <__aeabi_dadd+0x15a>
 8001408:	000007ff 	.word	0x000007ff
 800140c:	ff7fffff 	.word	0xff7fffff
 8001410:	800fffff 	.word	0x800fffff
 8001414:	2620      	movs	r6, #32
 8001416:	4647      	mov	r7, r8
 8001418:	1af6      	subs	r6, r6, r3
 800141a:	40b7      	lsls	r7, r6
 800141c:	46b9      	mov	r9, r7
 800141e:	0017      	movs	r7, r2
 8001420:	46b2      	mov	sl, r6
 8001422:	40df      	lsrs	r7, r3
 8001424:	464e      	mov	r6, r9
 8001426:	433e      	orrs	r6, r7
 8001428:	0037      	movs	r7, r6
 800142a:	4656      	mov	r6, sl
 800142c:	40b2      	lsls	r2, r6
 800142e:	1e56      	subs	r6, r2, #1
 8001430:	41b2      	sbcs	r2, r6
 8001432:	4317      	orrs	r7, r2
 8001434:	4642      	mov	r2, r8
 8001436:	40da      	lsrs	r2, r3
 8001438:	1a89      	subs	r1, r1, r2
 800143a:	e799      	b.n	8001370 <__aeabi_dadd+0x364>
 800143c:	4c7f      	ldr	r4, [pc, #508]	; (800163c <__aeabi_dadd+0x630>)
 800143e:	42a6      	cmp	r6, r4
 8001440:	d05b      	beq.n	80014fa <__aeabi_dadd+0x4ee>
 8001442:	2480      	movs	r4, #128	; 0x80
 8001444:	0424      	lsls	r4, r4, #16
 8001446:	425b      	negs	r3, r3
 8001448:	4321      	orrs	r1, r4
 800144a:	e727      	b.n	800129c <__aeabi_dadd+0x290>
 800144c:	2e00      	cmp	r6, #0
 800144e:	d10c      	bne.n	800146a <__aeabi_dadd+0x45e>
 8001450:	2b00      	cmp	r3, #0
 8001452:	d100      	bne.n	8001456 <__aeabi_dadd+0x44a>
 8001454:	e0cb      	b.n	80015ee <__aeabi_dadd+0x5e2>
 8001456:	4664      	mov	r4, ip
 8001458:	0039      	movs	r1, r7
 800145a:	0010      	movs	r0, r2
 800145c:	4d77      	ldr	r5, [pc, #476]	; (800163c <__aeabi_dadd+0x630>)
 800145e:	e6d7      	b.n	8001210 <__aeabi_dadd+0x204>
 8001460:	4f76      	ldr	r7, [pc, #472]	; (800163c <__aeabi_dadd+0x630>)
 8001462:	42bb      	cmp	r3, r7
 8001464:	d018      	beq.n	8001498 <__aeabi_dadd+0x48c>
 8001466:	0033      	movs	r3, r6
 8001468:	e675      	b.n	8001156 <__aeabi_dadd+0x14a>
 800146a:	2b00      	cmp	r3, #0
 800146c:	d014      	beq.n	8001498 <__aeabi_dadd+0x48c>
 800146e:	074b      	lsls	r3, r1, #29
 8001470:	08c0      	lsrs	r0, r0, #3
 8001472:	4318      	orrs	r0, r3
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	08c9      	lsrs	r1, r1, #3
 8001478:	031b      	lsls	r3, r3, #12
 800147a:	4219      	tst	r1, r3
 800147c:	d007      	beq.n	800148e <__aeabi_dadd+0x482>
 800147e:	08fc      	lsrs	r4, r7, #3
 8001480:	421c      	tst	r4, r3
 8001482:	d104      	bne.n	800148e <__aeabi_dadd+0x482>
 8001484:	0779      	lsls	r1, r7, #29
 8001486:	08d0      	lsrs	r0, r2, #3
 8001488:	4308      	orrs	r0, r1
 800148a:	46e1      	mov	r9, ip
 800148c:	0021      	movs	r1, r4
 800148e:	464c      	mov	r4, r9
 8001490:	0f42      	lsrs	r2, r0, #29
 8001492:	00c9      	lsls	r1, r1, #3
 8001494:	4311      	orrs	r1, r2
 8001496:	00c0      	lsls	r0, r0, #3
 8001498:	4d68      	ldr	r5, [pc, #416]	; (800163c <__aeabi_dadd+0x630>)
 800149a:	e6b9      	b.n	8001210 <__aeabi_dadd+0x204>
 800149c:	001d      	movs	r5, r3
 800149e:	2200      	movs	r2, #0
 80014a0:	2300      	movs	r3, #0
 80014a2:	e6c0      	b.n	8001226 <__aeabi_dadd+0x21a>
 80014a4:	2d00      	cmp	r5, #0
 80014a6:	d15b      	bne.n	8001560 <__aeabi_dadd+0x554>
 80014a8:	000d      	movs	r5, r1
 80014aa:	4305      	orrs	r5, r0
 80014ac:	d100      	bne.n	80014b0 <__aeabi_dadd+0x4a4>
 80014ae:	e6e2      	b.n	8001276 <__aeabi_dadd+0x26a>
 80014b0:	1c5d      	adds	r5, r3, #1
 80014b2:	d100      	bne.n	80014b6 <__aeabi_dadd+0x4aa>
 80014b4:	e0b0      	b.n	8001618 <__aeabi_dadd+0x60c>
 80014b6:	4d61      	ldr	r5, [pc, #388]	; (800163c <__aeabi_dadd+0x630>)
 80014b8:	42ae      	cmp	r6, r5
 80014ba:	d01f      	beq.n	80014fc <__aeabi_dadd+0x4f0>
 80014bc:	43db      	mvns	r3, r3
 80014be:	2b38      	cmp	r3, #56	; 0x38
 80014c0:	dc71      	bgt.n	80015a6 <__aeabi_dadd+0x59a>
 80014c2:	2b1f      	cmp	r3, #31
 80014c4:	dd00      	ble.n	80014c8 <__aeabi_dadd+0x4bc>
 80014c6:	e096      	b.n	80015f6 <__aeabi_dadd+0x5ea>
 80014c8:	2520      	movs	r5, #32
 80014ca:	000f      	movs	r7, r1
 80014cc:	1aed      	subs	r5, r5, r3
 80014ce:	40af      	lsls	r7, r5
 80014d0:	46b9      	mov	r9, r7
 80014d2:	0007      	movs	r7, r0
 80014d4:	46aa      	mov	sl, r5
 80014d6:	40df      	lsrs	r7, r3
 80014d8:	464d      	mov	r5, r9
 80014da:	433d      	orrs	r5, r7
 80014dc:	002f      	movs	r7, r5
 80014de:	4655      	mov	r5, sl
 80014e0:	40a8      	lsls	r0, r5
 80014e2:	40d9      	lsrs	r1, r3
 80014e4:	1e45      	subs	r5, r0, #1
 80014e6:	41a8      	sbcs	r0, r5
 80014e8:	4488      	add	r8, r1
 80014ea:	4307      	orrs	r7, r0
 80014ec:	18bf      	adds	r7, r7, r2
 80014ee:	4297      	cmp	r7, r2
 80014f0:	4192      	sbcs	r2, r2
 80014f2:	4251      	negs	r1, r2
 80014f4:	4441      	add	r1, r8
 80014f6:	0035      	movs	r5, r6
 80014f8:	e63a      	b.n	8001170 <__aeabi_dadd+0x164>
 80014fa:	4664      	mov	r4, ip
 80014fc:	0035      	movs	r5, r6
 80014fe:	4641      	mov	r1, r8
 8001500:	0010      	movs	r0, r2
 8001502:	e685      	b.n	8001210 <__aeabi_dadd+0x204>
 8001504:	000b      	movs	r3, r1
 8001506:	4303      	orrs	r3, r0
 8001508:	2d00      	cmp	r5, #0
 800150a:	d000      	beq.n	800150e <__aeabi_dadd+0x502>
 800150c:	e663      	b.n	80011d6 <__aeabi_dadd+0x1ca>
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f5      	beq.n	80014fe <__aeabi_dadd+0x4f2>
 8001512:	4643      	mov	r3, r8
 8001514:	4313      	orrs	r3, r2
 8001516:	d100      	bne.n	800151a <__aeabi_dadd+0x50e>
 8001518:	e67a      	b.n	8001210 <__aeabi_dadd+0x204>
 800151a:	1887      	adds	r7, r0, r2
 800151c:	4287      	cmp	r7, r0
 800151e:	4180      	sbcs	r0, r0
 8001520:	2207      	movs	r2, #7
 8001522:	4441      	add	r1, r8
 8001524:	4240      	negs	r0, r0
 8001526:	1809      	adds	r1, r1, r0
 8001528:	403a      	ands	r2, r7
 800152a:	020b      	lsls	r3, r1, #8
 800152c:	d400      	bmi.n	8001530 <__aeabi_dadd+0x524>
 800152e:	e6d5      	b.n	80012dc <__aeabi_dadd+0x2d0>
 8001530:	4b43      	ldr	r3, [pc, #268]	; (8001640 <__aeabi_dadd+0x634>)
 8001532:	3501      	adds	r5, #1
 8001534:	4019      	ands	r1, r3
 8001536:	e5c9      	b.n	80010cc <__aeabi_dadd+0xc0>
 8001538:	0038      	movs	r0, r7
 800153a:	e669      	b.n	8001210 <__aeabi_dadd+0x204>
 800153c:	001e      	movs	r6, r3
 800153e:	4647      	mov	r7, r8
 8001540:	3e20      	subs	r6, #32
 8001542:	40f7      	lsrs	r7, r6
 8001544:	46bc      	mov	ip, r7
 8001546:	2b20      	cmp	r3, #32
 8001548:	d004      	beq.n	8001554 <__aeabi_dadd+0x548>
 800154a:	2640      	movs	r6, #64	; 0x40
 800154c:	1af3      	subs	r3, r6, r3
 800154e:	4646      	mov	r6, r8
 8001550:	409e      	lsls	r6, r3
 8001552:	4332      	orrs	r2, r6
 8001554:	0017      	movs	r7, r2
 8001556:	4663      	mov	r3, ip
 8001558:	1e7a      	subs	r2, r7, #1
 800155a:	4197      	sbcs	r7, r2
 800155c:	431f      	orrs	r7, r3
 800155e:	e602      	b.n	8001166 <__aeabi_dadd+0x15a>
 8001560:	4d36      	ldr	r5, [pc, #216]	; (800163c <__aeabi_dadd+0x630>)
 8001562:	42ae      	cmp	r6, r5
 8001564:	d0ca      	beq.n	80014fc <__aeabi_dadd+0x4f0>
 8001566:	2580      	movs	r5, #128	; 0x80
 8001568:	042d      	lsls	r5, r5, #16
 800156a:	425b      	negs	r3, r3
 800156c:	4329      	orrs	r1, r5
 800156e:	e7a6      	b.n	80014be <__aeabi_dadd+0x4b2>
 8001570:	4308      	orrs	r0, r1
 8001572:	1e41      	subs	r1, r0, #1
 8001574:	4188      	sbcs	r0, r1
 8001576:	e6a6      	b.n	80012c6 <__aeabi_dadd+0x2ba>
 8001578:	2b00      	cmp	r3, #0
 800157a:	d100      	bne.n	800157e <__aeabi_dadd+0x572>
 800157c:	e648      	b.n	8001210 <__aeabi_dadd+0x204>
 800157e:	1a87      	subs	r7, r0, r2
 8001580:	4643      	mov	r3, r8
 8001582:	42b8      	cmp	r0, r7
 8001584:	41b6      	sbcs	r6, r6
 8001586:	1acb      	subs	r3, r1, r3
 8001588:	4276      	negs	r6, r6
 800158a:	1b9e      	subs	r6, r3, r6
 800158c:	0233      	lsls	r3, r6, #8
 800158e:	d54b      	bpl.n	8001628 <__aeabi_dadd+0x61c>
 8001590:	1a17      	subs	r7, r2, r0
 8001592:	4643      	mov	r3, r8
 8001594:	42ba      	cmp	r2, r7
 8001596:	4192      	sbcs	r2, r2
 8001598:	1a59      	subs	r1, r3, r1
 800159a:	4252      	negs	r2, r2
 800159c:	1a89      	subs	r1, r1, r2
 800159e:	2207      	movs	r2, #7
 80015a0:	4664      	mov	r4, ip
 80015a2:	403a      	ands	r2, r7
 80015a4:	e592      	b.n	80010cc <__aeabi_dadd+0xc0>
 80015a6:	4301      	orrs	r1, r0
 80015a8:	000f      	movs	r7, r1
 80015aa:	1e79      	subs	r1, r7, #1
 80015ac:	418f      	sbcs	r7, r1
 80015ae:	e79d      	b.n	80014ec <__aeabi_dadd+0x4e0>
 80015b0:	001c      	movs	r4, r3
 80015b2:	000f      	movs	r7, r1
 80015b4:	3c20      	subs	r4, #32
 80015b6:	40e7      	lsrs	r7, r4
 80015b8:	2b20      	cmp	r3, #32
 80015ba:	d003      	beq.n	80015c4 <__aeabi_dadd+0x5b8>
 80015bc:	2440      	movs	r4, #64	; 0x40
 80015be:	1ae3      	subs	r3, r4, r3
 80015c0:	4099      	lsls	r1, r3
 80015c2:	4308      	orrs	r0, r1
 80015c4:	1e41      	subs	r1, r0, #1
 80015c6:	4188      	sbcs	r0, r1
 80015c8:	4338      	orrs	r0, r7
 80015ca:	e67c      	b.n	80012c6 <__aeabi_dadd+0x2ba>
 80015cc:	2200      	movs	r2, #0
 80015ce:	2400      	movs	r4, #0
 80015d0:	e625      	b.n	800121e <__aeabi_dadd+0x212>
 80015d2:	1a17      	subs	r7, r2, r0
 80015d4:	4643      	mov	r3, r8
 80015d6:	42ba      	cmp	r2, r7
 80015d8:	4192      	sbcs	r2, r2
 80015da:	1a59      	subs	r1, r3, r1
 80015dc:	4252      	negs	r2, r2
 80015de:	1a89      	subs	r1, r1, r2
 80015e0:	4664      	mov	r4, ip
 80015e2:	0035      	movs	r5, r6
 80015e4:	e543      	b.n	800106e <__aeabi_dadd+0x62>
 80015e6:	4641      	mov	r1, r8
 80015e8:	0010      	movs	r0, r2
 80015ea:	4d14      	ldr	r5, [pc, #80]	; (800163c <__aeabi_dadd+0x630>)
 80015ec:	e610      	b.n	8001210 <__aeabi_dadd+0x204>
 80015ee:	2280      	movs	r2, #128	; 0x80
 80015f0:	2400      	movs	r4, #0
 80015f2:	0312      	lsls	r2, r2, #12
 80015f4:	e680      	b.n	80012f8 <__aeabi_dadd+0x2ec>
 80015f6:	001d      	movs	r5, r3
 80015f8:	000f      	movs	r7, r1
 80015fa:	3d20      	subs	r5, #32
 80015fc:	40ef      	lsrs	r7, r5
 80015fe:	46bc      	mov	ip, r7
 8001600:	2b20      	cmp	r3, #32
 8001602:	d003      	beq.n	800160c <__aeabi_dadd+0x600>
 8001604:	2540      	movs	r5, #64	; 0x40
 8001606:	1aeb      	subs	r3, r5, r3
 8001608:	4099      	lsls	r1, r3
 800160a:	4308      	orrs	r0, r1
 800160c:	0007      	movs	r7, r0
 800160e:	4663      	mov	r3, ip
 8001610:	1e78      	subs	r0, r7, #1
 8001612:	4187      	sbcs	r7, r0
 8001614:	431f      	orrs	r7, r3
 8001616:	e769      	b.n	80014ec <__aeabi_dadd+0x4e0>
 8001618:	1887      	adds	r7, r0, r2
 800161a:	4297      	cmp	r7, r2
 800161c:	419b      	sbcs	r3, r3
 800161e:	4441      	add	r1, r8
 8001620:	425b      	negs	r3, r3
 8001622:	18c9      	adds	r1, r1, r3
 8001624:	0035      	movs	r5, r6
 8001626:	e5a3      	b.n	8001170 <__aeabi_dadd+0x164>
 8001628:	003b      	movs	r3, r7
 800162a:	4333      	orrs	r3, r6
 800162c:	d0ce      	beq.n	80015cc <__aeabi_dadd+0x5c0>
 800162e:	2207      	movs	r2, #7
 8001630:	0031      	movs	r1, r6
 8001632:	403a      	ands	r2, r7
 8001634:	e652      	b.n	80012dc <__aeabi_dadd+0x2d0>
 8001636:	2300      	movs	r3, #0
 8001638:	001a      	movs	r2, r3
 800163a:	e5f4      	b.n	8001226 <__aeabi_dadd+0x21a>
 800163c:	000007ff 	.word	0x000007ff
 8001640:	ff7fffff 	.word	0xff7fffff

08001644 <__aeabi_ddiv>:
 8001644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001646:	4657      	mov	r7, sl
 8001648:	46de      	mov	lr, fp
 800164a:	464e      	mov	r6, r9
 800164c:	4645      	mov	r5, r8
 800164e:	b5e0      	push	{r5, r6, r7, lr}
 8001650:	4683      	mov	fp, r0
 8001652:	0007      	movs	r7, r0
 8001654:	030e      	lsls	r6, r1, #12
 8001656:	0048      	lsls	r0, r1, #1
 8001658:	b085      	sub	sp, #20
 800165a:	4692      	mov	sl, r2
 800165c:	001c      	movs	r4, r3
 800165e:	0b36      	lsrs	r6, r6, #12
 8001660:	0d40      	lsrs	r0, r0, #21
 8001662:	0fcd      	lsrs	r5, r1, #31
 8001664:	2800      	cmp	r0, #0
 8001666:	d100      	bne.n	800166a <__aeabi_ddiv+0x26>
 8001668:	e09d      	b.n	80017a6 <__aeabi_ddiv+0x162>
 800166a:	4b95      	ldr	r3, [pc, #596]	; (80018c0 <__aeabi_ddiv+0x27c>)
 800166c:	4298      	cmp	r0, r3
 800166e:	d039      	beq.n	80016e4 <__aeabi_ddiv+0xa0>
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	00f6      	lsls	r6, r6, #3
 8001674:	041b      	lsls	r3, r3, #16
 8001676:	431e      	orrs	r6, r3
 8001678:	4a92      	ldr	r2, [pc, #584]	; (80018c4 <__aeabi_ddiv+0x280>)
 800167a:	0f7b      	lsrs	r3, r7, #29
 800167c:	4333      	orrs	r3, r6
 800167e:	4699      	mov	r9, r3
 8001680:	4694      	mov	ip, r2
 8001682:	0003      	movs	r3, r0
 8001684:	4463      	add	r3, ip
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2300      	movs	r3, #0
 800168a:	2600      	movs	r6, #0
 800168c:	00ff      	lsls	r7, r7, #3
 800168e:	9302      	str	r3, [sp, #8]
 8001690:	0323      	lsls	r3, r4, #12
 8001692:	0b1b      	lsrs	r3, r3, #12
 8001694:	4698      	mov	r8, r3
 8001696:	0063      	lsls	r3, r4, #1
 8001698:	0fe4      	lsrs	r4, r4, #31
 800169a:	4652      	mov	r2, sl
 800169c:	0d5b      	lsrs	r3, r3, #21
 800169e:	9401      	str	r4, [sp, #4]
 80016a0:	d100      	bne.n	80016a4 <__aeabi_ddiv+0x60>
 80016a2:	e0b3      	b.n	800180c <__aeabi_ddiv+0x1c8>
 80016a4:	4986      	ldr	r1, [pc, #536]	; (80018c0 <__aeabi_ddiv+0x27c>)
 80016a6:	428b      	cmp	r3, r1
 80016a8:	d100      	bne.n	80016ac <__aeabi_ddiv+0x68>
 80016aa:	e09e      	b.n	80017ea <__aeabi_ddiv+0x1a6>
 80016ac:	4642      	mov	r2, r8
 80016ae:	00d1      	lsls	r1, r2, #3
 80016b0:	2280      	movs	r2, #128	; 0x80
 80016b2:	0412      	lsls	r2, r2, #16
 80016b4:	430a      	orrs	r2, r1
 80016b6:	4651      	mov	r1, sl
 80016b8:	0f49      	lsrs	r1, r1, #29
 80016ba:	4311      	orrs	r1, r2
 80016bc:	468b      	mov	fp, r1
 80016be:	4981      	ldr	r1, [pc, #516]	; (80018c4 <__aeabi_ddiv+0x280>)
 80016c0:	4652      	mov	r2, sl
 80016c2:	468c      	mov	ip, r1
 80016c4:	9900      	ldr	r1, [sp, #0]
 80016c6:	4463      	add	r3, ip
 80016c8:	1acb      	subs	r3, r1, r3
 80016ca:	2100      	movs	r1, #0
 80016cc:	00d2      	lsls	r2, r2, #3
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	002b      	movs	r3, r5
 80016d2:	4063      	eors	r3, r4
 80016d4:	469a      	mov	sl, r3
 80016d6:	2e0f      	cmp	r6, #15
 80016d8:	d900      	bls.n	80016dc <__aeabi_ddiv+0x98>
 80016da:	e105      	b.n	80018e8 <__aeabi_ddiv+0x2a4>
 80016dc:	4b7a      	ldr	r3, [pc, #488]	; (80018c8 <__aeabi_ddiv+0x284>)
 80016de:	00b6      	lsls	r6, r6, #2
 80016e0:	599b      	ldr	r3, [r3, r6]
 80016e2:	469f      	mov	pc, r3
 80016e4:	465b      	mov	r3, fp
 80016e6:	4333      	orrs	r3, r6
 80016e8:	4699      	mov	r9, r3
 80016ea:	d000      	beq.n	80016ee <__aeabi_ddiv+0xaa>
 80016ec:	e0b8      	b.n	8001860 <__aeabi_ddiv+0x21c>
 80016ee:	2302      	movs	r3, #2
 80016f0:	2608      	movs	r6, #8
 80016f2:	2700      	movs	r7, #0
 80016f4:	9000      	str	r0, [sp, #0]
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	e7ca      	b.n	8001690 <__aeabi_ddiv+0x4c>
 80016fa:	46cb      	mov	fp, r9
 80016fc:	003a      	movs	r2, r7
 80016fe:	9902      	ldr	r1, [sp, #8]
 8001700:	9501      	str	r5, [sp, #4]
 8001702:	9b01      	ldr	r3, [sp, #4]
 8001704:	469a      	mov	sl, r3
 8001706:	2902      	cmp	r1, #2
 8001708:	d027      	beq.n	800175a <__aeabi_ddiv+0x116>
 800170a:	2903      	cmp	r1, #3
 800170c:	d100      	bne.n	8001710 <__aeabi_ddiv+0xcc>
 800170e:	e280      	b.n	8001c12 <__aeabi_ddiv+0x5ce>
 8001710:	2901      	cmp	r1, #1
 8001712:	d044      	beq.n	800179e <__aeabi_ddiv+0x15a>
 8001714:	496d      	ldr	r1, [pc, #436]	; (80018cc <__aeabi_ddiv+0x288>)
 8001716:	9b00      	ldr	r3, [sp, #0]
 8001718:	468c      	mov	ip, r1
 800171a:	4463      	add	r3, ip
 800171c:	001c      	movs	r4, r3
 800171e:	2c00      	cmp	r4, #0
 8001720:	dd38      	ble.n	8001794 <__aeabi_ddiv+0x150>
 8001722:	0753      	lsls	r3, r2, #29
 8001724:	d000      	beq.n	8001728 <__aeabi_ddiv+0xe4>
 8001726:	e213      	b.n	8001b50 <__aeabi_ddiv+0x50c>
 8001728:	08d2      	lsrs	r2, r2, #3
 800172a:	465b      	mov	r3, fp
 800172c:	01db      	lsls	r3, r3, #7
 800172e:	d509      	bpl.n	8001744 <__aeabi_ddiv+0x100>
 8001730:	4659      	mov	r1, fp
 8001732:	4b67      	ldr	r3, [pc, #412]	; (80018d0 <__aeabi_ddiv+0x28c>)
 8001734:	4019      	ands	r1, r3
 8001736:	468b      	mov	fp, r1
 8001738:	2180      	movs	r1, #128	; 0x80
 800173a:	00c9      	lsls	r1, r1, #3
 800173c:	468c      	mov	ip, r1
 800173e:	9b00      	ldr	r3, [sp, #0]
 8001740:	4463      	add	r3, ip
 8001742:	001c      	movs	r4, r3
 8001744:	4b63      	ldr	r3, [pc, #396]	; (80018d4 <__aeabi_ddiv+0x290>)
 8001746:	429c      	cmp	r4, r3
 8001748:	dc07      	bgt.n	800175a <__aeabi_ddiv+0x116>
 800174a:	465b      	mov	r3, fp
 800174c:	0564      	lsls	r4, r4, #21
 800174e:	075f      	lsls	r7, r3, #29
 8001750:	025b      	lsls	r3, r3, #9
 8001752:	4317      	orrs	r7, r2
 8001754:	0b1b      	lsrs	r3, r3, #12
 8001756:	0d62      	lsrs	r2, r4, #21
 8001758:	e002      	b.n	8001760 <__aeabi_ddiv+0x11c>
 800175a:	2300      	movs	r3, #0
 800175c:	2700      	movs	r7, #0
 800175e:	4a58      	ldr	r2, [pc, #352]	; (80018c0 <__aeabi_ddiv+0x27c>)
 8001760:	2100      	movs	r1, #0
 8001762:	031b      	lsls	r3, r3, #12
 8001764:	0b1c      	lsrs	r4, r3, #12
 8001766:	0d0b      	lsrs	r3, r1, #20
 8001768:	051b      	lsls	r3, r3, #20
 800176a:	4323      	orrs	r3, r4
 800176c:	0514      	lsls	r4, r2, #20
 800176e:	4a5a      	ldr	r2, [pc, #360]	; (80018d8 <__aeabi_ddiv+0x294>)
 8001770:	0038      	movs	r0, r7
 8001772:	4013      	ands	r3, r2
 8001774:	431c      	orrs	r4, r3
 8001776:	4653      	mov	r3, sl
 8001778:	0064      	lsls	r4, r4, #1
 800177a:	07db      	lsls	r3, r3, #31
 800177c:	0864      	lsrs	r4, r4, #1
 800177e:	431c      	orrs	r4, r3
 8001780:	0021      	movs	r1, r4
 8001782:	b005      	add	sp, #20
 8001784:	bc3c      	pop	{r2, r3, r4, r5}
 8001786:	4690      	mov	r8, r2
 8001788:	4699      	mov	r9, r3
 800178a:	46a2      	mov	sl, r4
 800178c:	46ab      	mov	fp, r5
 800178e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001790:	2201      	movs	r2, #1
 8001792:	4252      	negs	r2, r2
 8001794:	2301      	movs	r3, #1
 8001796:	1b1b      	subs	r3, r3, r4
 8001798:	2b38      	cmp	r3, #56	; 0x38
 800179a:	dc00      	bgt.n	800179e <__aeabi_ddiv+0x15a>
 800179c:	e1ad      	b.n	8001afa <__aeabi_ddiv+0x4b6>
 800179e:	2200      	movs	r2, #0
 80017a0:	2300      	movs	r3, #0
 80017a2:	2700      	movs	r7, #0
 80017a4:	e7dc      	b.n	8001760 <__aeabi_ddiv+0x11c>
 80017a6:	465b      	mov	r3, fp
 80017a8:	4333      	orrs	r3, r6
 80017aa:	4699      	mov	r9, r3
 80017ac:	d05e      	beq.n	800186c <__aeabi_ddiv+0x228>
 80017ae:	2e00      	cmp	r6, #0
 80017b0:	d100      	bne.n	80017b4 <__aeabi_ddiv+0x170>
 80017b2:	e18a      	b.n	8001aca <__aeabi_ddiv+0x486>
 80017b4:	0030      	movs	r0, r6
 80017b6:	f001 fa9d 	bl	8002cf4 <__clzsi2>
 80017ba:	0003      	movs	r3, r0
 80017bc:	3b0b      	subs	r3, #11
 80017be:	2b1c      	cmp	r3, #28
 80017c0:	dd00      	ble.n	80017c4 <__aeabi_ddiv+0x180>
 80017c2:	e17b      	b.n	8001abc <__aeabi_ddiv+0x478>
 80017c4:	221d      	movs	r2, #29
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	465a      	mov	r2, fp
 80017ca:	0001      	movs	r1, r0
 80017cc:	40da      	lsrs	r2, r3
 80017ce:	3908      	subs	r1, #8
 80017d0:	408e      	lsls	r6, r1
 80017d2:	0013      	movs	r3, r2
 80017d4:	465f      	mov	r7, fp
 80017d6:	4333      	orrs	r3, r6
 80017d8:	4699      	mov	r9, r3
 80017da:	408f      	lsls	r7, r1
 80017dc:	4b3f      	ldr	r3, [pc, #252]	; (80018dc <__aeabi_ddiv+0x298>)
 80017de:	2600      	movs	r6, #0
 80017e0:	1a1b      	subs	r3, r3, r0
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	2300      	movs	r3, #0
 80017e6:	9302      	str	r3, [sp, #8]
 80017e8:	e752      	b.n	8001690 <__aeabi_ddiv+0x4c>
 80017ea:	4641      	mov	r1, r8
 80017ec:	4653      	mov	r3, sl
 80017ee:	430b      	orrs	r3, r1
 80017f0:	493b      	ldr	r1, [pc, #236]	; (80018e0 <__aeabi_ddiv+0x29c>)
 80017f2:	469b      	mov	fp, r3
 80017f4:	468c      	mov	ip, r1
 80017f6:	9b00      	ldr	r3, [sp, #0]
 80017f8:	4463      	add	r3, ip
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	465b      	mov	r3, fp
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d13b      	bne.n	800187a <__aeabi_ddiv+0x236>
 8001802:	2302      	movs	r3, #2
 8001804:	2200      	movs	r2, #0
 8001806:	431e      	orrs	r6, r3
 8001808:	2102      	movs	r1, #2
 800180a:	e761      	b.n	80016d0 <__aeabi_ddiv+0x8c>
 800180c:	4643      	mov	r3, r8
 800180e:	4313      	orrs	r3, r2
 8001810:	469b      	mov	fp, r3
 8001812:	d037      	beq.n	8001884 <__aeabi_ddiv+0x240>
 8001814:	4643      	mov	r3, r8
 8001816:	2b00      	cmp	r3, #0
 8001818:	d100      	bne.n	800181c <__aeabi_ddiv+0x1d8>
 800181a:	e162      	b.n	8001ae2 <__aeabi_ddiv+0x49e>
 800181c:	4640      	mov	r0, r8
 800181e:	f001 fa69 	bl	8002cf4 <__clzsi2>
 8001822:	0003      	movs	r3, r0
 8001824:	3b0b      	subs	r3, #11
 8001826:	2b1c      	cmp	r3, #28
 8001828:	dd00      	ble.n	800182c <__aeabi_ddiv+0x1e8>
 800182a:	e153      	b.n	8001ad4 <__aeabi_ddiv+0x490>
 800182c:	0002      	movs	r2, r0
 800182e:	4641      	mov	r1, r8
 8001830:	3a08      	subs	r2, #8
 8001832:	4091      	lsls	r1, r2
 8001834:	4688      	mov	r8, r1
 8001836:	211d      	movs	r1, #29
 8001838:	1acb      	subs	r3, r1, r3
 800183a:	4651      	mov	r1, sl
 800183c:	40d9      	lsrs	r1, r3
 800183e:	000b      	movs	r3, r1
 8001840:	4641      	mov	r1, r8
 8001842:	430b      	orrs	r3, r1
 8001844:	469b      	mov	fp, r3
 8001846:	4653      	mov	r3, sl
 8001848:	4093      	lsls	r3, r2
 800184a:	001a      	movs	r2, r3
 800184c:	9b00      	ldr	r3, [sp, #0]
 800184e:	4925      	ldr	r1, [pc, #148]	; (80018e4 <__aeabi_ddiv+0x2a0>)
 8001850:	469c      	mov	ip, r3
 8001852:	4460      	add	r0, ip
 8001854:	0003      	movs	r3, r0
 8001856:	468c      	mov	ip, r1
 8001858:	4463      	add	r3, ip
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	2100      	movs	r1, #0
 800185e:	e737      	b.n	80016d0 <__aeabi_ddiv+0x8c>
 8001860:	2303      	movs	r3, #3
 8001862:	46b1      	mov	r9, r6
 8001864:	9000      	str	r0, [sp, #0]
 8001866:	260c      	movs	r6, #12
 8001868:	9302      	str	r3, [sp, #8]
 800186a:	e711      	b.n	8001690 <__aeabi_ddiv+0x4c>
 800186c:	2300      	movs	r3, #0
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	3301      	adds	r3, #1
 8001872:	2604      	movs	r6, #4
 8001874:	2700      	movs	r7, #0
 8001876:	9302      	str	r3, [sp, #8]
 8001878:	e70a      	b.n	8001690 <__aeabi_ddiv+0x4c>
 800187a:	2303      	movs	r3, #3
 800187c:	46c3      	mov	fp, r8
 800187e:	431e      	orrs	r6, r3
 8001880:	2103      	movs	r1, #3
 8001882:	e725      	b.n	80016d0 <__aeabi_ddiv+0x8c>
 8001884:	3301      	adds	r3, #1
 8001886:	431e      	orrs	r6, r3
 8001888:	2200      	movs	r2, #0
 800188a:	2101      	movs	r1, #1
 800188c:	e720      	b.n	80016d0 <__aeabi_ddiv+0x8c>
 800188e:	2300      	movs	r3, #0
 8001890:	469a      	mov	sl, r3
 8001892:	2380      	movs	r3, #128	; 0x80
 8001894:	2700      	movs	r7, #0
 8001896:	031b      	lsls	r3, r3, #12
 8001898:	4a09      	ldr	r2, [pc, #36]	; (80018c0 <__aeabi_ddiv+0x27c>)
 800189a:	e761      	b.n	8001760 <__aeabi_ddiv+0x11c>
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	4649      	mov	r1, r9
 80018a0:	031b      	lsls	r3, r3, #12
 80018a2:	4219      	tst	r1, r3
 80018a4:	d100      	bne.n	80018a8 <__aeabi_ddiv+0x264>
 80018a6:	e0e2      	b.n	8001a6e <__aeabi_ddiv+0x42a>
 80018a8:	4659      	mov	r1, fp
 80018aa:	4219      	tst	r1, r3
 80018ac:	d000      	beq.n	80018b0 <__aeabi_ddiv+0x26c>
 80018ae:	e0de      	b.n	8001a6e <__aeabi_ddiv+0x42a>
 80018b0:	430b      	orrs	r3, r1
 80018b2:	031b      	lsls	r3, r3, #12
 80018b4:	0017      	movs	r7, r2
 80018b6:	0b1b      	lsrs	r3, r3, #12
 80018b8:	46a2      	mov	sl, r4
 80018ba:	4a01      	ldr	r2, [pc, #4]	; (80018c0 <__aeabi_ddiv+0x27c>)
 80018bc:	e750      	b.n	8001760 <__aeabi_ddiv+0x11c>
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	000007ff 	.word	0x000007ff
 80018c4:	fffffc01 	.word	0xfffffc01
 80018c8:	0800e6c4 	.word	0x0800e6c4
 80018cc:	000003ff 	.word	0x000003ff
 80018d0:	feffffff 	.word	0xfeffffff
 80018d4:	000007fe 	.word	0x000007fe
 80018d8:	800fffff 	.word	0x800fffff
 80018dc:	fffffc0d 	.word	0xfffffc0d
 80018e0:	fffff801 	.word	0xfffff801
 80018e4:	000003f3 	.word	0x000003f3
 80018e8:	45d9      	cmp	r9, fp
 80018ea:	d900      	bls.n	80018ee <__aeabi_ddiv+0x2aa>
 80018ec:	e0cb      	b.n	8001a86 <__aeabi_ddiv+0x442>
 80018ee:	d100      	bne.n	80018f2 <__aeabi_ddiv+0x2ae>
 80018f0:	e0c6      	b.n	8001a80 <__aeabi_ddiv+0x43c>
 80018f2:	003c      	movs	r4, r7
 80018f4:	4648      	mov	r0, r9
 80018f6:	2700      	movs	r7, #0
 80018f8:	9b00      	ldr	r3, [sp, #0]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	465b      	mov	r3, fp
 8001900:	0e16      	lsrs	r6, r2, #24
 8001902:	021b      	lsls	r3, r3, #8
 8001904:	431e      	orrs	r6, r3
 8001906:	0213      	lsls	r3, r2, #8
 8001908:	4698      	mov	r8, r3
 800190a:	0433      	lsls	r3, r6, #16
 800190c:	0c1b      	lsrs	r3, r3, #16
 800190e:	4699      	mov	r9, r3
 8001910:	0c31      	lsrs	r1, r6, #16
 8001912:	9101      	str	r1, [sp, #4]
 8001914:	f7fe fc90 	bl	8000238 <__aeabi_uidivmod>
 8001918:	464a      	mov	r2, r9
 800191a:	4342      	muls	r2, r0
 800191c:	040b      	lsls	r3, r1, #16
 800191e:	0c21      	lsrs	r1, r4, #16
 8001920:	0005      	movs	r5, r0
 8001922:	4319      	orrs	r1, r3
 8001924:	428a      	cmp	r2, r1
 8001926:	d907      	bls.n	8001938 <__aeabi_ddiv+0x2f4>
 8001928:	1989      	adds	r1, r1, r6
 800192a:	3d01      	subs	r5, #1
 800192c:	428e      	cmp	r6, r1
 800192e:	d803      	bhi.n	8001938 <__aeabi_ddiv+0x2f4>
 8001930:	428a      	cmp	r2, r1
 8001932:	d901      	bls.n	8001938 <__aeabi_ddiv+0x2f4>
 8001934:	1e85      	subs	r5, r0, #2
 8001936:	1989      	adds	r1, r1, r6
 8001938:	1a88      	subs	r0, r1, r2
 800193a:	9901      	ldr	r1, [sp, #4]
 800193c:	f7fe fc7c 	bl	8000238 <__aeabi_uidivmod>
 8001940:	0409      	lsls	r1, r1, #16
 8001942:	468c      	mov	ip, r1
 8001944:	464a      	mov	r2, r9
 8001946:	0421      	lsls	r1, r4, #16
 8001948:	4664      	mov	r4, ip
 800194a:	4342      	muls	r2, r0
 800194c:	0c09      	lsrs	r1, r1, #16
 800194e:	0003      	movs	r3, r0
 8001950:	4321      	orrs	r1, r4
 8001952:	428a      	cmp	r2, r1
 8001954:	d904      	bls.n	8001960 <__aeabi_ddiv+0x31c>
 8001956:	1989      	adds	r1, r1, r6
 8001958:	3b01      	subs	r3, #1
 800195a:	428e      	cmp	r6, r1
 800195c:	d800      	bhi.n	8001960 <__aeabi_ddiv+0x31c>
 800195e:	e0f1      	b.n	8001b44 <__aeabi_ddiv+0x500>
 8001960:	042d      	lsls	r5, r5, #16
 8001962:	431d      	orrs	r5, r3
 8001964:	46ab      	mov	fp, r5
 8001966:	4643      	mov	r3, r8
 8001968:	1a89      	subs	r1, r1, r2
 800196a:	4642      	mov	r2, r8
 800196c:	0c28      	lsrs	r0, r5, #16
 800196e:	0412      	lsls	r2, r2, #16
 8001970:	0c1d      	lsrs	r5, r3, #16
 8001972:	465b      	mov	r3, fp
 8001974:	0c14      	lsrs	r4, r2, #16
 8001976:	0022      	movs	r2, r4
 8001978:	041b      	lsls	r3, r3, #16
 800197a:	0c1b      	lsrs	r3, r3, #16
 800197c:	435a      	muls	r2, r3
 800197e:	9403      	str	r4, [sp, #12]
 8001980:	436b      	muls	r3, r5
 8001982:	4344      	muls	r4, r0
 8001984:	9502      	str	r5, [sp, #8]
 8001986:	4368      	muls	r0, r5
 8001988:	191b      	adds	r3, r3, r4
 800198a:	0c15      	lsrs	r5, r2, #16
 800198c:	18eb      	adds	r3, r5, r3
 800198e:	429c      	cmp	r4, r3
 8001990:	d903      	bls.n	800199a <__aeabi_ddiv+0x356>
 8001992:	2480      	movs	r4, #128	; 0x80
 8001994:	0264      	lsls	r4, r4, #9
 8001996:	46a4      	mov	ip, r4
 8001998:	4460      	add	r0, ip
 800199a:	0c1c      	lsrs	r4, r3, #16
 800199c:	0415      	lsls	r5, r2, #16
 800199e:	041b      	lsls	r3, r3, #16
 80019a0:	0c2d      	lsrs	r5, r5, #16
 80019a2:	1820      	adds	r0, r4, r0
 80019a4:	195d      	adds	r5, r3, r5
 80019a6:	4281      	cmp	r1, r0
 80019a8:	d377      	bcc.n	8001a9a <__aeabi_ddiv+0x456>
 80019aa:	d073      	beq.n	8001a94 <__aeabi_ddiv+0x450>
 80019ac:	1a0c      	subs	r4, r1, r0
 80019ae:	4aa2      	ldr	r2, [pc, #648]	; (8001c38 <__aeabi_ddiv+0x5f4>)
 80019b0:	1b7d      	subs	r5, r7, r5
 80019b2:	42af      	cmp	r7, r5
 80019b4:	41bf      	sbcs	r7, r7
 80019b6:	4694      	mov	ip, r2
 80019b8:	9b00      	ldr	r3, [sp, #0]
 80019ba:	427f      	negs	r7, r7
 80019bc:	4463      	add	r3, ip
 80019be:	1be0      	subs	r0, r4, r7
 80019c0:	001c      	movs	r4, r3
 80019c2:	4286      	cmp	r6, r0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_ddiv+0x384>
 80019c6:	e0db      	b.n	8001b80 <__aeabi_ddiv+0x53c>
 80019c8:	9901      	ldr	r1, [sp, #4]
 80019ca:	f7fe fc35 	bl	8000238 <__aeabi_uidivmod>
 80019ce:	464a      	mov	r2, r9
 80019d0:	4342      	muls	r2, r0
 80019d2:	040b      	lsls	r3, r1, #16
 80019d4:	0c29      	lsrs	r1, r5, #16
 80019d6:	0007      	movs	r7, r0
 80019d8:	4319      	orrs	r1, r3
 80019da:	428a      	cmp	r2, r1
 80019dc:	d907      	bls.n	80019ee <__aeabi_ddiv+0x3aa>
 80019de:	1989      	adds	r1, r1, r6
 80019e0:	3f01      	subs	r7, #1
 80019e2:	428e      	cmp	r6, r1
 80019e4:	d803      	bhi.n	80019ee <__aeabi_ddiv+0x3aa>
 80019e6:	428a      	cmp	r2, r1
 80019e8:	d901      	bls.n	80019ee <__aeabi_ddiv+0x3aa>
 80019ea:	1e87      	subs	r7, r0, #2
 80019ec:	1989      	adds	r1, r1, r6
 80019ee:	1a88      	subs	r0, r1, r2
 80019f0:	9901      	ldr	r1, [sp, #4]
 80019f2:	f7fe fc21 	bl	8000238 <__aeabi_uidivmod>
 80019f6:	0409      	lsls	r1, r1, #16
 80019f8:	464a      	mov	r2, r9
 80019fa:	4689      	mov	r9, r1
 80019fc:	0429      	lsls	r1, r5, #16
 80019fe:	464d      	mov	r5, r9
 8001a00:	4342      	muls	r2, r0
 8001a02:	0c09      	lsrs	r1, r1, #16
 8001a04:	0003      	movs	r3, r0
 8001a06:	4329      	orrs	r1, r5
 8001a08:	428a      	cmp	r2, r1
 8001a0a:	d907      	bls.n	8001a1c <__aeabi_ddiv+0x3d8>
 8001a0c:	1989      	adds	r1, r1, r6
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	428e      	cmp	r6, r1
 8001a12:	d803      	bhi.n	8001a1c <__aeabi_ddiv+0x3d8>
 8001a14:	428a      	cmp	r2, r1
 8001a16:	d901      	bls.n	8001a1c <__aeabi_ddiv+0x3d8>
 8001a18:	1e83      	subs	r3, r0, #2
 8001a1a:	1989      	adds	r1, r1, r6
 8001a1c:	043f      	lsls	r7, r7, #16
 8001a1e:	1a89      	subs	r1, r1, r2
 8001a20:	003a      	movs	r2, r7
 8001a22:	9f03      	ldr	r7, [sp, #12]
 8001a24:	431a      	orrs	r2, r3
 8001a26:	0038      	movs	r0, r7
 8001a28:	0413      	lsls	r3, r2, #16
 8001a2a:	0c1b      	lsrs	r3, r3, #16
 8001a2c:	4358      	muls	r0, r3
 8001a2e:	4681      	mov	r9, r0
 8001a30:	9802      	ldr	r0, [sp, #8]
 8001a32:	0c15      	lsrs	r5, r2, #16
 8001a34:	436f      	muls	r7, r5
 8001a36:	4343      	muls	r3, r0
 8001a38:	4345      	muls	r5, r0
 8001a3a:	4648      	mov	r0, r9
 8001a3c:	0c00      	lsrs	r0, r0, #16
 8001a3e:	4684      	mov	ip, r0
 8001a40:	19db      	adds	r3, r3, r7
 8001a42:	4463      	add	r3, ip
 8001a44:	429f      	cmp	r7, r3
 8001a46:	d903      	bls.n	8001a50 <__aeabi_ddiv+0x40c>
 8001a48:	2080      	movs	r0, #128	; 0x80
 8001a4a:	0240      	lsls	r0, r0, #9
 8001a4c:	4684      	mov	ip, r0
 8001a4e:	4465      	add	r5, ip
 8001a50:	4648      	mov	r0, r9
 8001a52:	0c1f      	lsrs	r7, r3, #16
 8001a54:	0400      	lsls	r0, r0, #16
 8001a56:	041b      	lsls	r3, r3, #16
 8001a58:	0c00      	lsrs	r0, r0, #16
 8001a5a:	197d      	adds	r5, r7, r5
 8001a5c:	1818      	adds	r0, r3, r0
 8001a5e:	42a9      	cmp	r1, r5
 8001a60:	d200      	bcs.n	8001a64 <__aeabi_ddiv+0x420>
 8001a62:	e084      	b.n	8001b6e <__aeabi_ddiv+0x52a>
 8001a64:	d100      	bne.n	8001a68 <__aeabi_ddiv+0x424>
 8001a66:	e07f      	b.n	8001b68 <__aeabi_ddiv+0x524>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	e657      	b.n	800171e <__aeabi_ddiv+0xda>
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	464a      	mov	r2, r9
 8001a72:	031b      	lsls	r3, r3, #12
 8001a74:	4313      	orrs	r3, r2
 8001a76:	031b      	lsls	r3, r3, #12
 8001a78:	0b1b      	lsrs	r3, r3, #12
 8001a7a:	46aa      	mov	sl, r5
 8001a7c:	4a6f      	ldr	r2, [pc, #444]	; (8001c3c <__aeabi_ddiv+0x5f8>)
 8001a7e:	e66f      	b.n	8001760 <__aeabi_ddiv+0x11c>
 8001a80:	42ba      	cmp	r2, r7
 8001a82:	d900      	bls.n	8001a86 <__aeabi_ddiv+0x442>
 8001a84:	e735      	b.n	80018f2 <__aeabi_ddiv+0x2ae>
 8001a86:	464b      	mov	r3, r9
 8001a88:	07dc      	lsls	r4, r3, #31
 8001a8a:	0858      	lsrs	r0, r3, #1
 8001a8c:	087b      	lsrs	r3, r7, #1
 8001a8e:	431c      	orrs	r4, r3
 8001a90:	07ff      	lsls	r7, r7, #31
 8001a92:	e734      	b.n	80018fe <__aeabi_ddiv+0x2ba>
 8001a94:	2400      	movs	r4, #0
 8001a96:	42af      	cmp	r7, r5
 8001a98:	d289      	bcs.n	80019ae <__aeabi_ddiv+0x36a>
 8001a9a:	4447      	add	r7, r8
 8001a9c:	4547      	cmp	r7, r8
 8001a9e:	41a4      	sbcs	r4, r4
 8001aa0:	465b      	mov	r3, fp
 8001aa2:	4264      	negs	r4, r4
 8001aa4:	19a4      	adds	r4, r4, r6
 8001aa6:	1864      	adds	r4, r4, r1
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	42a6      	cmp	r6, r4
 8001aac:	d21e      	bcs.n	8001aec <__aeabi_ddiv+0x4a8>
 8001aae:	42a0      	cmp	r0, r4
 8001ab0:	d86d      	bhi.n	8001b8e <__aeabi_ddiv+0x54a>
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_ddiv+0x472>
 8001ab4:	e0b6      	b.n	8001c24 <__aeabi_ddiv+0x5e0>
 8001ab6:	1a24      	subs	r4, r4, r0
 8001ab8:	469b      	mov	fp, r3
 8001aba:	e778      	b.n	80019ae <__aeabi_ddiv+0x36a>
 8001abc:	0003      	movs	r3, r0
 8001abe:	465a      	mov	r2, fp
 8001ac0:	3b28      	subs	r3, #40	; 0x28
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	2700      	movs	r7, #0
 8001ac6:	4691      	mov	r9, r2
 8001ac8:	e688      	b.n	80017dc <__aeabi_ddiv+0x198>
 8001aca:	4658      	mov	r0, fp
 8001acc:	f001 f912 	bl	8002cf4 <__clzsi2>
 8001ad0:	3020      	adds	r0, #32
 8001ad2:	e672      	b.n	80017ba <__aeabi_ddiv+0x176>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	4652      	mov	r2, sl
 8001ad8:	3b28      	subs	r3, #40	; 0x28
 8001ada:	409a      	lsls	r2, r3
 8001adc:	4693      	mov	fp, r2
 8001ade:	2200      	movs	r2, #0
 8001ae0:	e6b4      	b.n	800184c <__aeabi_ddiv+0x208>
 8001ae2:	4650      	mov	r0, sl
 8001ae4:	f001 f906 	bl	8002cf4 <__clzsi2>
 8001ae8:	3020      	adds	r0, #32
 8001aea:	e69a      	b.n	8001822 <__aeabi_ddiv+0x1de>
 8001aec:	42a6      	cmp	r6, r4
 8001aee:	d1e2      	bne.n	8001ab6 <__aeabi_ddiv+0x472>
 8001af0:	45b8      	cmp	r8, r7
 8001af2:	d9dc      	bls.n	8001aae <__aeabi_ddiv+0x46a>
 8001af4:	1a34      	subs	r4, r6, r0
 8001af6:	469b      	mov	fp, r3
 8001af8:	e759      	b.n	80019ae <__aeabi_ddiv+0x36a>
 8001afa:	2b1f      	cmp	r3, #31
 8001afc:	dc65      	bgt.n	8001bca <__aeabi_ddiv+0x586>
 8001afe:	4c50      	ldr	r4, [pc, #320]	; (8001c40 <__aeabi_ddiv+0x5fc>)
 8001b00:	9900      	ldr	r1, [sp, #0]
 8001b02:	46a4      	mov	ip, r4
 8001b04:	465c      	mov	r4, fp
 8001b06:	4461      	add	r1, ip
 8001b08:	0008      	movs	r0, r1
 8001b0a:	408c      	lsls	r4, r1
 8001b0c:	0011      	movs	r1, r2
 8001b0e:	4082      	lsls	r2, r0
 8001b10:	40d9      	lsrs	r1, r3
 8001b12:	1e50      	subs	r0, r2, #1
 8001b14:	4182      	sbcs	r2, r0
 8001b16:	430c      	orrs	r4, r1
 8001b18:	4314      	orrs	r4, r2
 8001b1a:	465a      	mov	r2, fp
 8001b1c:	40da      	lsrs	r2, r3
 8001b1e:	0013      	movs	r3, r2
 8001b20:	0762      	lsls	r2, r4, #29
 8001b22:	d009      	beq.n	8001b38 <__aeabi_ddiv+0x4f4>
 8001b24:	220f      	movs	r2, #15
 8001b26:	4022      	ands	r2, r4
 8001b28:	2a04      	cmp	r2, #4
 8001b2a:	d005      	beq.n	8001b38 <__aeabi_ddiv+0x4f4>
 8001b2c:	0022      	movs	r2, r4
 8001b2e:	1d14      	adds	r4, r2, #4
 8001b30:	4294      	cmp	r4, r2
 8001b32:	4189      	sbcs	r1, r1
 8001b34:	4249      	negs	r1, r1
 8001b36:	185b      	adds	r3, r3, r1
 8001b38:	021a      	lsls	r2, r3, #8
 8001b3a:	d562      	bpl.n	8001c02 <__aeabi_ddiv+0x5be>
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	2300      	movs	r3, #0
 8001b40:	2700      	movs	r7, #0
 8001b42:	e60d      	b.n	8001760 <__aeabi_ddiv+0x11c>
 8001b44:	428a      	cmp	r2, r1
 8001b46:	d800      	bhi.n	8001b4a <__aeabi_ddiv+0x506>
 8001b48:	e70a      	b.n	8001960 <__aeabi_ddiv+0x31c>
 8001b4a:	1e83      	subs	r3, r0, #2
 8001b4c:	1989      	adds	r1, r1, r6
 8001b4e:	e707      	b.n	8001960 <__aeabi_ddiv+0x31c>
 8001b50:	230f      	movs	r3, #15
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d100      	bne.n	8001b5a <__aeabi_ddiv+0x516>
 8001b58:	e5e6      	b.n	8001728 <__aeabi_ddiv+0xe4>
 8001b5a:	1d17      	adds	r7, r2, #4
 8001b5c:	4297      	cmp	r7, r2
 8001b5e:	4192      	sbcs	r2, r2
 8001b60:	4253      	negs	r3, r2
 8001b62:	449b      	add	fp, r3
 8001b64:	08fa      	lsrs	r2, r7, #3
 8001b66:	e5e0      	b.n	800172a <__aeabi_ddiv+0xe6>
 8001b68:	2800      	cmp	r0, #0
 8001b6a:	d100      	bne.n	8001b6e <__aeabi_ddiv+0x52a>
 8001b6c:	e5d7      	b.n	800171e <__aeabi_ddiv+0xda>
 8001b6e:	1871      	adds	r1, r6, r1
 8001b70:	1e53      	subs	r3, r2, #1
 8001b72:	42b1      	cmp	r1, r6
 8001b74:	d327      	bcc.n	8001bc6 <__aeabi_ddiv+0x582>
 8001b76:	42a9      	cmp	r1, r5
 8001b78:	d315      	bcc.n	8001ba6 <__aeabi_ddiv+0x562>
 8001b7a:	d058      	beq.n	8001c2e <__aeabi_ddiv+0x5ea>
 8001b7c:	001a      	movs	r2, r3
 8001b7e:	e773      	b.n	8001a68 <__aeabi_ddiv+0x424>
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	dc00      	bgt.n	8001b86 <__aeabi_ddiv+0x542>
 8001b84:	e604      	b.n	8001790 <__aeabi_ddiv+0x14c>
 8001b86:	2301      	movs	r3, #1
 8001b88:	2200      	movs	r2, #0
 8001b8a:	449b      	add	fp, r3
 8001b8c:	e5cd      	b.n	800172a <__aeabi_ddiv+0xe6>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	4447      	add	r7, r8
 8001b92:	4547      	cmp	r7, r8
 8001b94:	4189      	sbcs	r1, r1
 8001b96:	425b      	negs	r3, r3
 8001b98:	469c      	mov	ip, r3
 8001b9a:	4249      	negs	r1, r1
 8001b9c:	1989      	adds	r1, r1, r6
 8001b9e:	190c      	adds	r4, r1, r4
 8001ba0:	44e3      	add	fp, ip
 8001ba2:	1a24      	subs	r4, r4, r0
 8001ba4:	e703      	b.n	80019ae <__aeabi_ddiv+0x36a>
 8001ba6:	4643      	mov	r3, r8
 8001ba8:	005f      	lsls	r7, r3, #1
 8001baa:	4547      	cmp	r7, r8
 8001bac:	419b      	sbcs	r3, r3
 8001bae:	46b8      	mov	r8, r7
 8001bb0:	425b      	negs	r3, r3
 8001bb2:	199e      	adds	r6, r3, r6
 8001bb4:	3a02      	subs	r2, #2
 8001bb6:	1989      	adds	r1, r1, r6
 8001bb8:	42a9      	cmp	r1, r5
 8001bba:	d000      	beq.n	8001bbe <__aeabi_ddiv+0x57a>
 8001bbc:	e754      	b.n	8001a68 <__aeabi_ddiv+0x424>
 8001bbe:	4540      	cmp	r0, r8
 8001bc0:	d000      	beq.n	8001bc4 <__aeabi_ddiv+0x580>
 8001bc2:	e751      	b.n	8001a68 <__aeabi_ddiv+0x424>
 8001bc4:	e5ab      	b.n	800171e <__aeabi_ddiv+0xda>
 8001bc6:	001a      	movs	r2, r3
 8001bc8:	e7f6      	b.n	8001bb8 <__aeabi_ddiv+0x574>
 8001bca:	211f      	movs	r1, #31
 8001bcc:	465f      	mov	r7, fp
 8001bce:	4249      	negs	r1, r1
 8001bd0:	1b0c      	subs	r4, r1, r4
 8001bd2:	40e7      	lsrs	r7, r4
 8001bd4:	2b20      	cmp	r3, #32
 8001bd6:	d007      	beq.n	8001be8 <__aeabi_ddiv+0x5a4>
 8001bd8:	491a      	ldr	r1, [pc, #104]	; (8001c44 <__aeabi_ddiv+0x600>)
 8001bda:	9b00      	ldr	r3, [sp, #0]
 8001bdc:	468c      	mov	ip, r1
 8001bde:	4463      	add	r3, ip
 8001be0:	0018      	movs	r0, r3
 8001be2:	465b      	mov	r3, fp
 8001be4:	4083      	lsls	r3, r0
 8001be6:	431a      	orrs	r2, r3
 8001be8:	1e50      	subs	r0, r2, #1
 8001bea:	4182      	sbcs	r2, r0
 8001bec:	433a      	orrs	r2, r7
 8001bee:	2707      	movs	r7, #7
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	4017      	ands	r7, r2
 8001bf4:	d009      	beq.n	8001c0a <__aeabi_ddiv+0x5c6>
 8001bf6:	210f      	movs	r1, #15
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	4011      	ands	r1, r2
 8001bfc:	0014      	movs	r4, r2
 8001bfe:	2904      	cmp	r1, #4
 8001c00:	d195      	bne.n	8001b2e <__aeabi_ddiv+0x4ea>
 8001c02:	0022      	movs	r2, r4
 8001c04:	075f      	lsls	r7, r3, #29
 8001c06:	025b      	lsls	r3, r3, #9
 8001c08:	0b1b      	lsrs	r3, r3, #12
 8001c0a:	08d2      	lsrs	r2, r2, #3
 8001c0c:	4317      	orrs	r7, r2
 8001c0e:	2200      	movs	r2, #0
 8001c10:	e5a6      	b.n	8001760 <__aeabi_ddiv+0x11c>
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	4659      	mov	r1, fp
 8001c16:	031b      	lsls	r3, r3, #12
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	031b      	lsls	r3, r3, #12
 8001c1c:	0017      	movs	r7, r2
 8001c1e:	0b1b      	lsrs	r3, r3, #12
 8001c20:	4a06      	ldr	r2, [pc, #24]	; (8001c3c <__aeabi_ddiv+0x5f8>)
 8001c22:	e59d      	b.n	8001760 <__aeabi_ddiv+0x11c>
 8001c24:	42bd      	cmp	r5, r7
 8001c26:	d8b2      	bhi.n	8001b8e <__aeabi_ddiv+0x54a>
 8001c28:	469b      	mov	fp, r3
 8001c2a:	2400      	movs	r4, #0
 8001c2c:	e6bf      	b.n	80019ae <__aeabi_ddiv+0x36a>
 8001c2e:	4580      	cmp	r8, r0
 8001c30:	d3b9      	bcc.n	8001ba6 <__aeabi_ddiv+0x562>
 8001c32:	001a      	movs	r2, r3
 8001c34:	e7c3      	b.n	8001bbe <__aeabi_ddiv+0x57a>
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	000003ff 	.word	0x000003ff
 8001c3c:	000007ff 	.word	0x000007ff
 8001c40:	0000041e 	.word	0x0000041e
 8001c44:	0000043e 	.word	0x0000043e

08001c48 <__eqdf2>:
 8001c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c4a:	464f      	mov	r7, r9
 8001c4c:	4646      	mov	r6, r8
 8001c4e:	46d6      	mov	lr, sl
 8001c50:	4684      	mov	ip, r0
 8001c52:	b5c0      	push	{r6, r7, lr}
 8001c54:	4680      	mov	r8, r0
 8001c56:	4e19      	ldr	r6, [pc, #100]	; (8001cbc <__eqdf2+0x74>)
 8001c58:	0318      	lsls	r0, r3, #12
 8001c5a:	030f      	lsls	r7, r1, #12
 8001c5c:	004d      	lsls	r5, r1, #1
 8001c5e:	0b00      	lsrs	r0, r0, #12
 8001c60:	005c      	lsls	r4, r3, #1
 8001c62:	4682      	mov	sl, r0
 8001c64:	0b3f      	lsrs	r7, r7, #12
 8001c66:	0d6d      	lsrs	r5, r5, #21
 8001c68:	0fc9      	lsrs	r1, r1, #31
 8001c6a:	4691      	mov	r9, r2
 8001c6c:	0d64      	lsrs	r4, r4, #21
 8001c6e:	0fdb      	lsrs	r3, r3, #31
 8001c70:	2001      	movs	r0, #1
 8001c72:	42b5      	cmp	r5, r6
 8001c74:	d00a      	beq.n	8001c8c <__eqdf2+0x44>
 8001c76:	42b4      	cmp	r4, r6
 8001c78:	d003      	beq.n	8001c82 <__eqdf2+0x3a>
 8001c7a:	42a5      	cmp	r5, r4
 8001c7c:	d101      	bne.n	8001c82 <__eqdf2+0x3a>
 8001c7e:	4557      	cmp	r7, sl
 8001c80:	d00c      	beq.n	8001c9c <__eqdf2+0x54>
 8001c82:	bc1c      	pop	{r2, r3, r4}
 8001c84:	4690      	mov	r8, r2
 8001c86:	4699      	mov	r9, r3
 8001c88:	46a2      	mov	sl, r4
 8001c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c8c:	4666      	mov	r6, ip
 8001c8e:	433e      	orrs	r6, r7
 8001c90:	d1f7      	bne.n	8001c82 <__eqdf2+0x3a>
 8001c92:	42ac      	cmp	r4, r5
 8001c94:	d1f5      	bne.n	8001c82 <__eqdf2+0x3a>
 8001c96:	4654      	mov	r4, sl
 8001c98:	4314      	orrs	r4, r2
 8001c9a:	d1f2      	bne.n	8001c82 <__eqdf2+0x3a>
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	45c8      	cmp	r8, r9
 8001ca0:	d1ef      	bne.n	8001c82 <__eqdf2+0x3a>
 8001ca2:	4299      	cmp	r1, r3
 8001ca4:	d007      	beq.n	8001cb6 <__eqdf2+0x6e>
 8001ca6:	2d00      	cmp	r5, #0
 8001ca8:	d1eb      	bne.n	8001c82 <__eqdf2+0x3a>
 8001caa:	4663      	mov	r3, ip
 8001cac:	431f      	orrs	r7, r3
 8001cae:	0038      	movs	r0, r7
 8001cb0:	1e47      	subs	r7, r0, #1
 8001cb2:	41b8      	sbcs	r0, r7
 8001cb4:	e7e5      	b.n	8001c82 <__eqdf2+0x3a>
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	e7e3      	b.n	8001c82 <__eqdf2+0x3a>
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	000007ff 	.word	0x000007ff

08001cc0 <__gedf2>:
 8001cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc2:	464f      	mov	r7, r9
 8001cc4:	4646      	mov	r6, r8
 8001cc6:	46d6      	mov	lr, sl
 8001cc8:	004d      	lsls	r5, r1, #1
 8001cca:	b5c0      	push	{r6, r7, lr}
 8001ccc:	030e      	lsls	r6, r1, #12
 8001cce:	0fc9      	lsrs	r1, r1, #31
 8001cd0:	468a      	mov	sl, r1
 8001cd2:	492c      	ldr	r1, [pc, #176]	; (8001d84 <__gedf2+0xc4>)
 8001cd4:	031f      	lsls	r7, r3, #12
 8001cd6:	005c      	lsls	r4, r3, #1
 8001cd8:	4680      	mov	r8, r0
 8001cda:	0b36      	lsrs	r6, r6, #12
 8001cdc:	0d6d      	lsrs	r5, r5, #21
 8001cde:	4691      	mov	r9, r2
 8001ce0:	0b3f      	lsrs	r7, r7, #12
 8001ce2:	0d64      	lsrs	r4, r4, #21
 8001ce4:	0fdb      	lsrs	r3, r3, #31
 8001ce6:	428d      	cmp	r5, r1
 8001ce8:	d01e      	beq.n	8001d28 <__gedf2+0x68>
 8001cea:	428c      	cmp	r4, r1
 8001cec:	d016      	beq.n	8001d1c <__gedf2+0x5c>
 8001cee:	2d00      	cmp	r5, #0
 8001cf0:	d11e      	bne.n	8001d30 <__gedf2+0x70>
 8001cf2:	4330      	orrs	r0, r6
 8001cf4:	4684      	mov	ip, r0
 8001cf6:	2c00      	cmp	r4, #0
 8001cf8:	d101      	bne.n	8001cfe <__gedf2+0x3e>
 8001cfa:	433a      	orrs	r2, r7
 8001cfc:	d023      	beq.n	8001d46 <__gedf2+0x86>
 8001cfe:	4662      	mov	r2, ip
 8001d00:	2a00      	cmp	r2, #0
 8001d02:	d01a      	beq.n	8001d3a <__gedf2+0x7a>
 8001d04:	459a      	cmp	sl, r3
 8001d06:	d029      	beq.n	8001d5c <__gedf2+0x9c>
 8001d08:	4651      	mov	r1, sl
 8001d0a:	2002      	movs	r0, #2
 8001d0c:	3901      	subs	r1, #1
 8001d0e:	4008      	ands	r0, r1
 8001d10:	3801      	subs	r0, #1
 8001d12:	bc1c      	pop	{r2, r3, r4}
 8001d14:	4690      	mov	r8, r2
 8001d16:	4699      	mov	r9, r3
 8001d18:	46a2      	mov	sl, r4
 8001d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1c:	0039      	movs	r1, r7
 8001d1e:	4311      	orrs	r1, r2
 8001d20:	d0e5      	beq.n	8001cee <__gedf2+0x2e>
 8001d22:	2002      	movs	r0, #2
 8001d24:	4240      	negs	r0, r0
 8001d26:	e7f4      	b.n	8001d12 <__gedf2+0x52>
 8001d28:	4330      	orrs	r0, r6
 8001d2a:	d1fa      	bne.n	8001d22 <__gedf2+0x62>
 8001d2c:	42ac      	cmp	r4, r5
 8001d2e:	d00f      	beq.n	8001d50 <__gedf2+0x90>
 8001d30:	2c00      	cmp	r4, #0
 8001d32:	d10f      	bne.n	8001d54 <__gedf2+0x94>
 8001d34:	433a      	orrs	r2, r7
 8001d36:	d0e7      	beq.n	8001d08 <__gedf2+0x48>
 8001d38:	e00c      	b.n	8001d54 <__gedf2+0x94>
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	4393      	bics	r3, r2
 8001d40:	0018      	movs	r0, r3
 8001d42:	3001      	adds	r0, #1
 8001d44:	e7e5      	b.n	8001d12 <__gedf2+0x52>
 8001d46:	4663      	mov	r3, ip
 8001d48:	2000      	movs	r0, #0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0e1      	beq.n	8001d12 <__gedf2+0x52>
 8001d4e:	e7db      	b.n	8001d08 <__gedf2+0x48>
 8001d50:	433a      	orrs	r2, r7
 8001d52:	d1e6      	bne.n	8001d22 <__gedf2+0x62>
 8001d54:	459a      	cmp	sl, r3
 8001d56:	d1d7      	bne.n	8001d08 <__gedf2+0x48>
 8001d58:	42a5      	cmp	r5, r4
 8001d5a:	dcd5      	bgt.n	8001d08 <__gedf2+0x48>
 8001d5c:	42a5      	cmp	r5, r4
 8001d5e:	db05      	blt.n	8001d6c <__gedf2+0xac>
 8001d60:	42be      	cmp	r6, r7
 8001d62:	d8d1      	bhi.n	8001d08 <__gedf2+0x48>
 8001d64:	d008      	beq.n	8001d78 <__gedf2+0xb8>
 8001d66:	2000      	movs	r0, #0
 8001d68:	42be      	cmp	r6, r7
 8001d6a:	d2d2      	bcs.n	8001d12 <__gedf2+0x52>
 8001d6c:	4650      	mov	r0, sl
 8001d6e:	2301      	movs	r3, #1
 8001d70:	3801      	subs	r0, #1
 8001d72:	4398      	bics	r0, r3
 8001d74:	3001      	adds	r0, #1
 8001d76:	e7cc      	b.n	8001d12 <__gedf2+0x52>
 8001d78:	45c8      	cmp	r8, r9
 8001d7a:	d8c5      	bhi.n	8001d08 <__gedf2+0x48>
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	45c8      	cmp	r8, r9
 8001d80:	d3f4      	bcc.n	8001d6c <__gedf2+0xac>
 8001d82:	e7c6      	b.n	8001d12 <__gedf2+0x52>
 8001d84:	000007ff 	.word	0x000007ff

08001d88 <__ledf2>:
 8001d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d8a:	464f      	mov	r7, r9
 8001d8c:	4646      	mov	r6, r8
 8001d8e:	46d6      	mov	lr, sl
 8001d90:	004d      	lsls	r5, r1, #1
 8001d92:	b5c0      	push	{r6, r7, lr}
 8001d94:	030e      	lsls	r6, r1, #12
 8001d96:	0fc9      	lsrs	r1, r1, #31
 8001d98:	468a      	mov	sl, r1
 8001d9a:	492e      	ldr	r1, [pc, #184]	; (8001e54 <__ledf2+0xcc>)
 8001d9c:	031f      	lsls	r7, r3, #12
 8001d9e:	005c      	lsls	r4, r3, #1
 8001da0:	4680      	mov	r8, r0
 8001da2:	0b36      	lsrs	r6, r6, #12
 8001da4:	0d6d      	lsrs	r5, r5, #21
 8001da6:	4691      	mov	r9, r2
 8001da8:	0b3f      	lsrs	r7, r7, #12
 8001daa:	0d64      	lsrs	r4, r4, #21
 8001dac:	0fdb      	lsrs	r3, r3, #31
 8001dae:	428d      	cmp	r5, r1
 8001db0:	d018      	beq.n	8001de4 <__ledf2+0x5c>
 8001db2:	428c      	cmp	r4, r1
 8001db4:	d011      	beq.n	8001dda <__ledf2+0x52>
 8001db6:	2d00      	cmp	r5, #0
 8001db8:	d118      	bne.n	8001dec <__ledf2+0x64>
 8001dba:	4330      	orrs	r0, r6
 8001dbc:	4684      	mov	ip, r0
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d11e      	bne.n	8001e00 <__ledf2+0x78>
 8001dc2:	433a      	orrs	r2, r7
 8001dc4:	d11c      	bne.n	8001e00 <__ledf2+0x78>
 8001dc6:	4663      	mov	r3, ip
 8001dc8:	2000      	movs	r0, #0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d030      	beq.n	8001e30 <__ledf2+0xa8>
 8001dce:	4651      	mov	r1, sl
 8001dd0:	2002      	movs	r0, #2
 8001dd2:	3901      	subs	r1, #1
 8001dd4:	4008      	ands	r0, r1
 8001dd6:	3801      	subs	r0, #1
 8001dd8:	e02a      	b.n	8001e30 <__ledf2+0xa8>
 8001dda:	0039      	movs	r1, r7
 8001ddc:	4311      	orrs	r1, r2
 8001dde:	d0ea      	beq.n	8001db6 <__ledf2+0x2e>
 8001de0:	2002      	movs	r0, #2
 8001de2:	e025      	b.n	8001e30 <__ledf2+0xa8>
 8001de4:	4330      	orrs	r0, r6
 8001de6:	d1fb      	bne.n	8001de0 <__ledf2+0x58>
 8001de8:	42ac      	cmp	r4, r5
 8001dea:	d026      	beq.n	8001e3a <__ledf2+0xb2>
 8001dec:	2c00      	cmp	r4, #0
 8001dee:	d126      	bne.n	8001e3e <__ledf2+0xb6>
 8001df0:	433a      	orrs	r2, r7
 8001df2:	d124      	bne.n	8001e3e <__ledf2+0xb6>
 8001df4:	4651      	mov	r1, sl
 8001df6:	2002      	movs	r0, #2
 8001df8:	3901      	subs	r1, #1
 8001dfa:	4008      	ands	r0, r1
 8001dfc:	3801      	subs	r0, #1
 8001dfe:	e017      	b.n	8001e30 <__ledf2+0xa8>
 8001e00:	4662      	mov	r2, ip
 8001e02:	2a00      	cmp	r2, #0
 8001e04:	d00f      	beq.n	8001e26 <__ledf2+0x9e>
 8001e06:	459a      	cmp	sl, r3
 8001e08:	d1e1      	bne.n	8001dce <__ledf2+0x46>
 8001e0a:	42a5      	cmp	r5, r4
 8001e0c:	db05      	blt.n	8001e1a <__ledf2+0x92>
 8001e0e:	42be      	cmp	r6, r7
 8001e10:	d8dd      	bhi.n	8001dce <__ledf2+0x46>
 8001e12:	d019      	beq.n	8001e48 <__ledf2+0xc0>
 8001e14:	2000      	movs	r0, #0
 8001e16:	42be      	cmp	r6, r7
 8001e18:	d20a      	bcs.n	8001e30 <__ledf2+0xa8>
 8001e1a:	4650      	mov	r0, sl
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	3801      	subs	r0, #1
 8001e20:	4398      	bics	r0, r3
 8001e22:	3001      	adds	r0, #1
 8001e24:	e004      	b.n	8001e30 <__ledf2+0xa8>
 8001e26:	2201      	movs	r2, #1
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	4393      	bics	r3, r2
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	3001      	adds	r0, #1
 8001e30:	bc1c      	pop	{r2, r3, r4}
 8001e32:	4690      	mov	r8, r2
 8001e34:	4699      	mov	r9, r3
 8001e36:	46a2      	mov	sl, r4
 8001e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e3a:	433a      	orrs	r2, r7
 8001e3c:	d1d0      	bne.n	8001de0 <__ledf2+0x58>
 8001e3e:	459a      	cmp	sl, r3
 8001e40:	d1c5      	bne.n	8001dce <__ledf2+0x46>
 8001e42:	42a5      	cmp	r5, r4
 8001e44:	dcc3      	bgt.n	8001dce <__ledf2+0x46>
 8001e46:	e7e0      	b.n	8001e0a <__ledf2+0x82>
 8001e48:	45c8      	cmp	r8, r9
 8001e4a:	d8c0      	bhi.n	8001dce <__ledf2+0x46>
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	45c8      	cmp	r8, r9
 8001e50:	d3e3      	bcc.n	8001e1a <__ledf2+0x92>
 8001e52:	e7ed      	b.n	8001e30 <__ledf2+0xa8>
 8001e54:	000007ff 	.word	0x000007ff

08001e58 <__aeabi_dmul>:
 8001e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e5a:	4657      	mov	r7, sl
 8001e5c:	46de      	mov	lr, fp
 8001e5e:	464e      	mov	r6, r9
 8001e60:	4645      	mov	r5, r8
 8001e62:	b5e0      	push	{r5, r6, r7, lr}
 8001e64:	4683      	mov	fp, r0
 8001e66:	0006      	movs	r6, r0
 8001e68:	030f      	lsls	r7, r1, #12
 8001e6a:	0048      	lsls	r0, r1, #1
 8001e6c:	b087      	sub	sp, #28
 8001e6e:	4692      	mov	sl, r2
 8001e70:	001d      	movs	r5, r3
 8001e72:	0b3f      	lsrs	r7, r7, #12
 8001e74:	0d40      	lsrs	r0, r0, #21
 8001e76:	0fcc      	lsrs	r4, r1, #31
 8001e78:	2800      	cmp	r0, #0
 8001e7a:	d100      	bne.n	8001e7e <__aeabi_dmul+0x26>
 8001e7c:	e06f      	b.n	8001f5e <__aeabi_dmul+0x106>
 8001e7e:	4bde      	ldr	r3, [pc, #888]	; (80021f8 <__aeabi_dmul+0x3a0>)
 8001e80:	4298      	cmp	r0, r3
 8001e82:	d038      	beq.n	8001ef6 <__aeabi_dmul+0x9e>
 8001e84:	2380      	movs	r3, #128	; 0x80
 8001e86:	00ff      	lsls	r7, r7, #3
 8001e88:	041b      	lsls	r3, r3, #16
 8001e8a:	431f      	orrs	r7, r3
 8001e8c:	0f73      	lsrs	r3, r6, #29
 8001e8e:	433b      	orrs	r3, r7
 8001e90:	9301      	str	r3, [sp, #4]
 8001e92:	4bda      	ldr	r3, [pc, #872]	; (80021fc <__aeabi_dmul+0x3a4>)
 8001e94:	2700      	movs	r7, #0
 8001e96:	4699      	mov	r9, r3
 8001e98:	2300      	movs	r3, #0
 8001e9a:	469b      	mov	fp, r3
 8001e9c:	00f6      	lsls	r6, r6, #3
 8001e9e:	4481      	add	r9, r0
 8001ea0:	032b      	lsls	r3, r5, #12
 8001ea2:	0069      	lsls	r1, r5, #1
 8001ea4:	0b1b      	lsrs	r3, r3, #12
 8001ea6:	4652      	mov	r2, sl
 8001ea8:	4698      	mov	r8, r3
 8001eaa:	0d49      	lsrs	r1, r1, #21
 8001eac:	0fed      	lsrs	r5, r5, #31
 8001eae:	2900      	cmp	r1, #0
 8001eb0:	d100      	bne.n	8001eb4 <__aeabi_dmul+0x5c>
 8001eb2:	e085      	b.n	8001fc0 <__aeabi_dmul+0x168>
 8001eb4:	4bd0      	ldr	r3, [pc, #832]	; (80021f8 <__aeabi_dmul+0x3a0>)
 8001eb6:	4299      	cmp	r1, r3
 8001eb8:	d100      	bne.n	8001ebc <__aeabi_dmul+0x64>
 8001eba:	e073      	b.n	8001fa4 <__aeabi_dmul+0x14c>
 8001ebc:	4643      	mov	r3, r8
 8001ebe:	00da      	lsls	r2, r3, #3
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	041b      	lsls	r3, r3, #16
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	4652      	mov	r2, sl
 8001ec8:	48cc      	ldr	r0, [pc, #816]	; (80021fc <__aeabi_dmul+0x3a4>)
 8001eca:	0f52      	lsrs	r2, r2, #29
 8001ecc:	4684      	mov	ip, r0
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	4652      	mov	r2, sl
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	4461      	add	r1, ip
 8001ed6:	00d2      	lsls	r2, r2, #3
 8001ed8:	4489      	add	r9, r1
 8001eda:	0021      	movs	r1, r4
 8001edc:	4069      	eors	r1, r5
 8001ede:	9100      	str	r1, [sp, #0]
 8001ee0:	468c      	mov	ip, r1
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	4449      	add	r1, r9
 8001ee6:	468a      	mov	sl, r1
 8001ee8:	2f0f      	cmp	r7, #15
 8001eea:	d900      	bls.n	8001eee <__aeabi_dmul+0x96>
 8001eec:	e090      	b.n	8002010 <__aeabi_dmul+0x1b8>
 8001eee:	49c4      	ldr	r1, [pc, #784]	; (8002200 <__aeabi_dmul+0x3a8>)
 8001ef0:	00bf      	lsls	r7, r7, #2
 8001ef2:	59cf      	ldr	r7, [r1, r7]
 8001ef4:	46bf      	mov	pc, r7
 8001ef6:	465b      	mov	r3, fp
 8001ef8:	433b      	orrs	r3, r7
 8001efa:	9301      	str	r3, [sp, #4]
 8001efc:	d000      	beq.n	8001f00 <__aeabi_dmul+0xa8>
 8001efe:	e16a      	b.n	80021d6 <__aeabi_dmul+0x37e>
 8001f00:	2302      	movs	r3, #2
 8001f02:	2708      	movs	r7, #8
 8001f04:	2600      	movs	r6, #0
 8001f06:	4681      	mov	r9, r0
 8001f08:	469b      	mov	fp, r3
 8001f0a:	e7c9      	b.n	8001ea0 <__aeabi_dmul+0x48>
 8001f0c:	0032      	movs	r2, r6
 8001f0e:	4658      	mov	r0, fp
 8001f10:	9b01      	ldr	r3, [sp, #4]
 8001f12:	4661      	mov	r1, ip
 8001f14:	9100      	str	r1, [sp, #0]
 8001f16:	2802      	cmp	r0, #2
 8001f18:	d100      	bne.n	8001f1c <__aeabi_dmul+0xc4>
 8001f1a:	e075      	b.n	8002008 <__aeabi_dmul+0x1b0>
 8001f1c:	2803      	cmp	r0, #3
 8001f1e:	d100      	bne.n	8001f22 <__aeabi_dmul+0xca>
 8001f20:	e1fe      	b.n	8002320 <__aeabi_dmul+0x4c8>
 8001f22:	2801      	cmp	r0, #1
 8001f24:	d000      	beq.n	8001f28 <__aeabi_dmul+0xd0>
 8001f26:	e12c      	b.n	8002182 <__aeabi_dmul+0x32a>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	2700      	movs	r7, #0
 8001f2c:	2600      	movs	r6, #0
 8001f2e:	2500      	movs	r5, #0
 8001f30:	033f      	lsls	r7, r7, #12
 8001f32:	0d2a      	lsrs	r2, r5, #20
 8001f34:	0b3f      	lsrs	r7, r7, #12
 8001f36:	48b3      	ldr	r0, [pc, #716]	; (8002204 <__aeabi_dmul+0x3ac>)
 8001f38:	0512      	lsls	r2, r2, #20
 8001f3a:	433a      	orrs	r2, r7
 8001f3c:	4002      	ands	r2, r0
 8001f3e:	051b      	lsls	r3, r3, #20
 8001f40:	4313      	orrs	r3, r2
 8001f42:	9a00      	ldr	r2, [sp, #0]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	07d1      	lsls	r1, r2, #31
 8001f48:	085b      	lsrs	r3, r3, #1
 8001f4a:	430b      	orrs	r3, r1
 8001f4c:	0030      	movs	r0, r6
 8001f4e:	0019      	movs	r1, r3
 8001f50:	b007      	add	sp, #28
 8001f52:	bc3c      	pop	{r2, r3, r4, r5}
 8001f54:	4690      	mov	r8, r2
 8001f56:	4699      	mov	r9, r3
 8001f58:	46a2      	mov	sl, r4
 8001f5a:	46ab      	mov	fp, r5
 8001f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f5e:	465b      	mov	r3, fp
 8001f60:	433b      	orrs	r3, r7
 8001f62:	9301      	str	r3, [sp, #4]
 8001f64:	d100      	bne.n	8001f68 <__aeabi_dmul+0x110>
 8001f66:	e12f      	b.n	80021c8 <__aeabi_dmul+0x370>
 8001f68:	2f00      	cmp	r7, #0
 8001f6a:	d100      	bne.n	8001f6e <__aeabi_dmul+0x116>
 8001f6c:	e1a5      	b.n	80022ba <__aeabi_dmul+0x462>
 8001f6e:	0038      	movs	r0, r7
 8001f70:	f000 fec0 	bl	8002cf4 <__clzsi2>
 8001f74:	0003      	movs	r3, r0
 8001f76:	3b0b      	subs	r3, #11
 8001f78:	2b1c      	cmp	r3, #28
 8001f7a:	dd00      	ble.n	8001f7e <__aeabi_dmul+0x126>
 8001f7c:	e196      	b.n	80022ac <__aeabi_dmul+0x454>
 8001f7e:	221d      	movs	r2, #29
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	465a      	mov	r2, fp
 8001f84:	0001      	movs	r1, r0
 8001f86:	40da      	lsrs	r2, r3
 8001f88:	465e      	mov	r6, fp
 8001f8a:	3908      	subs	r1, #8
 8001f8c:	408f      	lsls	r7, r1
 8001f8e:	0013      	movs	r3, r2
 8001f90:	408e      	lsls	r6, r1
 8001f92:	433b      	orrs	r3, r7
 8001f94:	9301      	str	r3, [sp, #4]
 8001f96:	4b9c      	ldr	r3, [pc, #624]	; (8002208 <__aeabi_dmul+0x3b0>)
 8001f98:	2700      	movs	r7, #0
 8001f9a:	1a1b      	subs	r3, r3, r0
 8001f9c:	4699      	mov	r9, r3
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	469b      	mov	fp, r3
 8001fa2:	e77d      	b.n	8001ea0 <__aeabi_dmul+0x48>
 8001fa4:	4641      	mov	r1, r8
 8001fa6:	4653      	mov	r3, sl
 8001fa8:	430b      	orrs	r3, r1
 8001faa:	4993      	ldr	r1, [pc, #588]	; (80021f8 <__aeabi_dmul+0x3a0>)
 8001fac:	468c      	mov	ip, r1
 8001fae:	44e1      	add	r9, ip
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d000      	beq.n	8001fb6 <__aeabi_dmul+0x15e>
 8001fb4:	e11a      	b.n	80021ec <__aeabi_dmul+0x394>
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	2002      	movs	r0, #2
 8001fba:	4317      	orrs	r7, r2
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	e78c      	b.n	8001eda <__aeabi_dmul+0x82>
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	d100      	bne.n	8001fc6 <__aeabi_dmul+0x16e>
 8001fc4:	e10d      	b.n	80021e2 <__aeabi_dmul+0x38a>
 8001fc6:	4643      	mov	r3, r8
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d100      	bne.n	8001fce <__aeabi_dmul+0x176>
 8001fcc:	e181      	b.n	80022d2 <__aeabi_dmul+0x47a>
 8001fce:	4640      	mov	r0, r8
 8001fd0:	f000 fe90 	bl	8002cf4 <__clzsi2>
 8001fd4:	0002      	movs	r2, r0
 8001fd6:	3a0b      	subs	r2, #11
 8001fd8:	2a1c      	cmp	r2, #28
 8001fda:	dd00      	ble.n	8001fde <__aeabi_dmul+0x186>
 8001fdc:	e172      	b.n	80022c4 <__aeabi_dmul+0x46c>
 8001fde:	0001      	movs	r1, r0
 8001fe0:	4643      	mov	r3, r8
 8001fe2:	3908      	subs	r1, #8
 8001fe4:	408b      	lsls	r3, r1
 8001fe6:	4698      	mov	r8, r3
 8001fe8:	231d      	movs	r3, #29
 8001fea:	1a9a      	subs	r2, r3, r2
 8001fec:	4653      	mov	r3, sl
 8001fee:	40d3      	lsrs	r3, r2
 8001ff0:	001a      	movs	r2, r3
 8001ff2:	4643      	mov	r3, r8
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	4652      	mov	r2, sl
 8001ff8:	408a      	lsls	r2, r1
 8001ffa:	4649      	mov	r1, r9
 8001ffc:	1a08      	subs	r0, r1, r0
 8001ffe:	4982      	ldr	r1, [pc, #520]	; (8002208 <__aeabi_dmul+0x3b0>)
 8002000:	4689      	mov	r9, r1
 8002002:	4481      	add	r9, r0
 8002004:	2000      	movs	r0, #0
 8002006:	e768      	b.n	8001eda <__aeabi_dmul+0x82>
 8002008:	4b7b      	ldr	r3, [pc, #492]	; (80021f8 <__aeabi_dmul+0x3a0>)
 800200a:	2700      	movs	r7, #0
 800200c:	2600      	movs	r6, #0
 800200e:	e78e      	b.n	8001f2e <__aeabi_dmul+0xd6>
 8002010:	0c14      	lsrs	r4, r2, #16
 8002012:	0412      	lsls	r2, r2, #16
 8002014:	0c12      	lsrs	r2, r2, #16
 8002016:	0011      	movs	r1, r2
 8002018:	0c37      	lsrs	r7, r6, #16
 800201a:	0436      	lsls	r6, r6, #16
 800201c:	0c35      	lsrs	r5, r6, #16
 800201e:	4379      	muls	r1, r7
 8002020:	0028      	movs	r0, r5
 8002022:	468c      	mov	ip, r1
 8002024:	002e      	movs	r6, r5
 8002026:	4360      	muls	r0, r4
 8002028:	4460      	add	r0, ip
 800202a:	4683      	mov	fp, r0
 800202c:	4356      	muls	r6, r2
 800202e:	0021      	movs	r1, r4
 8002030:	0c30      	lsrs	r0, r6, #16
 8002032:	4680      	mov	r8, r0
 8002034:	4658      	mov	r0, fp
 8002036:	4379      	muls	r1, r7
 8002038:	4440      	add	r0, r8
 800203a:	9102      	str	r1, [sp, #8]
 800203c:	4584      	cmp	ip, r0
 800203e:	d906      	bls.n	800204e <__aeabi_dmul+0x1f6>
 8002040:	4688      	mov	r8, r1
 8002042:	2180      	movs	r1, #128	; 0x80
 8002044:	0249      	lsls	r1, r1, #9
 8002046:	468c      	mov	ip, r1
 8002048:	44e0      	add	r8, ip
 800204a:	4641      	mov	r1, r8
 800204c:	9102      	str	r1, [sp, #8]
 800204e:	0436      	lsls	r6, r6, #16
 8002050:	0c01      	lsrs	r1, r0, #16
 8002052:	0c36      	lsrs	r6, r6, #16
 8002054:	0400      	lsls	r0, r0, #16
 8002056:	468b      	mov	fp, r1
 8002058:	1981      	adds	r1, r0, r6
 800205a:	0c1e      	lsrs	r6, r3, #16
 800205c:	041b      	lsls	r3, r3, #16
 800205e:	0c1b      	lsrs	r3, r3, #16
 8002060:	9103      	str	r1, [sp, #12]
 8002062:	0019      	movs	r1, r3
 8002064:	4379      	muls	r1, r7
 8002066:	468c      	mov	ip, r1
 8002068:	0028      	movs	r0, r5
 800206a:	4375      	muls	r5, r6
 800206c:	4465      	add	r5, ip
 800206e:	46a8      	mov	r8, r5
 8002070:	4358      	muls	r0, r3
 8002072:	0c05      	lsrs	r5, r0, #16
 8002074:	4445      	add	r5, r8
 8002076:	4377      	muls	r7, r6
 8002078:	42a9      	cmp	r1, r5
 800207a:	d903      	bls.n	8002084 <__aeabi_dmul+0x22c>
 800207c:	2180      	movs	r1, #128	; 0x80
 800207e:	0249      	lsls	r1, r1, #9
 8002080:	468c      	mov	ip, r1
 8002082:	4467      	add	r7, ip
 8002084:	0c29      	lsrs	r1, r5, #16
 8002086:	468c      	mov	ip, r1
 8002088:	0039      	movs	r1, r7
 800208a:	0400      	lsls	r0, r0, #16
 800208c:	0c00      	lsrs	r0, r0, #16
 800208e:	042d      	lsls	r5, r5, #16
 8002090:	182d      	adds	r5, r5, r0
 8002092:	4461      	add	r1, ip
 8002094:	44ab      	add	fp, r5
 8002096:	9105      	str	r1, [sp, #20]
 8002098:	4659      	mov	r1, fp
 800209a:	9104      	str	r1, [sp, #16]
 800209c:	9901      	ldr	r1, [sp, #4]
 800209e:	040f      	lsls	r7, r1, #16
 80020a0:	0c3f      	lsrs	r7, r7, #16
 80020a2:	0c08      	lsrs	r0, r1, #16
 80020a4:	0039      	movs	r1, r7
 80020a6:	4351      	muls	r1, r2
 80020a8:	4342      	muls	r2, r0
 80020aa:	4690      	mov	r8, r2
 80020ac:	0002      	movs	r2, r0
 80020ae:	468c      	mov	ip, r1
 80020b0:	0c09      	lsrs	r1, r1, #16
 80020b2:	468b      	mov	fp, r1
 80020b4:	4362      	muls	r2, r4
 80020b6:	437c      	muls	r4, r7
 80020b8:	4444      	add	r4, r8
 80020ba:	445c      	add	r4, fp
 80020bc:	45a0      	cmp	r8, r4
 80020be:	d903      	bls.n	80020c8 <__aeabi_dmul+0x270>
 80020c0:	2180      	movs	r1, #128	; 0x80
 80020c2:	0249      	lsls	r1, r1, #9
 80020c4:	4688      	mov	r8, r1
 80020c6:	4442      	add	r2, r8
 80020c8:	0c21      	lsrs	r1, r4, #16
 80020ca:	4688      	mov	r8, r1
 80020cc:	4661      	mov	r1, ip
 80020ce:	0409      	lsls	r1, r1, #16
 80020d0:	0c09      	lsrs	r1, r1, #16
 80020d2:	468c      	mov	ip, r1
 80020d4:	0039      	movs	r1, r7
 80020d6:	4359      	muls	r1, r3
 80020d8:	4343      	muls	r3, r0
 80020da:	4370      	muls	r0, r6
 80020dc:	437e      	muls	r6, r7
 80020de:	0c0f      	lsrs	r7, r1, #16
 80020e0:	18f6      	adds	r6, r6, r3
 80020e2:	0424      	lsls	r4, r4, #16
 80020e4:	19be      	adds	r6, r7, r6
 80020e6:	4464      	add	r4, ip
 80020e8:	4442      	add	r2, r8
 80020ea:	468c      	mov	ip, r1
 80020ec:	42b3      	cmp	r3, r6
 80020ee:	d903      	bls.n	80020f8 <__aeabi_dmul+0x2a0>
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	025b      	lsls	r3, r3, #9
 80020f4:	4698      	mov	r8, r3
 80020f6:	4440      	add	r0, r8
 80020f8:	9b02      	ldr	r3, [sp, #8]
 80020fa:	4661      	mov	r1, ip
 80020fc:	4698      	mov	r8, r3
 80020fe:	9b04      	ldr	r3, [sp, #16]
 8002100:	0437      	lsls	r7, r6, #16
 8002102:	4443      	add	r3, r8
 8002104:	469b      	mov	fp, r3
 8002106:	45ab      	cmp	fp, r5
 8002108:	41ad      	sbcs	r5, r5
 800210a:	426b      	negs	r3, r5
 800210c:	040d      	lsls	r5, r1, #16
 800210e:	9905      	ldr	r1, [sp, #20]
 8002110:	0c2d      	lsrs	r5, r5, #16
 8002112:	468c      	mov	ip, r1
 8002114:	197f      	adds	r7, r7, r5
 8002116:	4467      	add	r7, ip
 8002118:	18fd      	adds	r5, r7, r3
 800211a:	46a8      	mov	r8, r5
 800211c:	465d      	mov	r5, fp
 800211e:	192d      	adds	r5, r5, r4
 8002120:	42a5      	cmp	r5, r4
 8002122:	41a4      	sbcs	r4, r4
 8002124:	4693      	mov	fp, r2
 8002126:	4264      	negs	r4, r4
 8002128:	46a4      	mov	ip, r4
 800212a:	44c3      	add	fp, r8
 800212c:	44dc      	add	ip, fp
 800212e:	428f      	cmp	r7, r1
 8002130:	41bf      	sbcs	r7, r7
 8002132:	4598      	cmp	r8, r3
 8002134:	419b      	sbcs	r3, r3
 8002136:	4593      	cmp	fp, r2
 8002138:	4192      	sbcs	r2, r2
 800213a:	45a4      	cmp	ip, r4
 800213c:	41a4      	sbcs	r4, r4
 800213e:	425b      	negs	r3, r3
 8002140:	427f      	negs	r7, r7
 8002142:	431f      	orrs	r7, r3
 8002144:	0c36      	lsrs	r6, r6, #16
 8002146:	4252      	negs	r2, r2
 8002148:	4264      	negs	r4, r4
 800214a:	19bf      	adds	r7, r7, r6
 800214c:	4322      	orrs	r2, r4
 800214e:	18bf      	adds	r7, r7, r2
 8002150:	4662      	mov	r2, ip
 8002152:	1838      	adds	r0, r7, r0
 8002154:	0243      	lsls	r3, r0, #9
 8002156:	0dd2      	lsrs	r2, r2, #23
 8002158:	9903      	ldr	r1, [sp, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	026a      	lsls	r2, r5, #9
 800215e:	430a      	orrs	r2, r1
 8002160:	1e50      	subs	r0, r2, #1
 8002162:	4182      	sbcs	r2, r0
 8002164:	4661      	mov	r1, ip
 8002166:	0ded      	lsrs	r5, r5, #23
 8002168:	432a      	orrs	r2, r5
 800216a:	024e      	lsls	r6, r1, #9
 800216c:	4332      	orrs	r2, r6
 800216e:	01d9      	lsls	r1, r3, #7
 8002170:	d400      	bmi.n	8002174 <__aeabi_dmul+0x31c>
 8002172:	e0b3      	b.n	80022dc <__aeabi_dmul+0x484>
 8002174:	2601      	movs	r6, #1
 8002176:	0850      	lsrs	r0, r2, #1
 8002178:	4032      	ands	r2, r6
 800217a:	4302      	orrs	r2, r0
 800217c:	07de      	lsls	r6, r3, #31
 800217e:	4332      	orrs	r2, r6
 8002180:	085b      	lsrs	r3, r3, #1
 8002182:	4c22      	ldr	r4, [pc, #136]	; (800220c <__aeabi_dmul+0x3b4>)
 8002184:	4454      	add	r4, sl
 8002186:	2c00      	cmp	r4, #0
 8002188:	dd62      	ble.n	8002250 <__aeabi_dmul+0x3f8>
 800218a:	0751      	lsls	r1, r2, #29
 800218c:	d009      	beq.n	80021a2 <__aeabi_dmul+0x34a>
 800218e:	200f      	movs	r0, #15
 8002190:	4010      	ands	r0, r2
 8002192:	2804      	cmp	r0, #4
 8002194:	d005      	beq.n	80021a2 <__aeabi_dmul+0x34a>
 8002196:	1d10      	adds	r0, r2, #4
 8002198:	4290      	cmp	r0, r2
 800219a:	4192      	sbcs	r2, r2
 800219c:	4252      	negs	r2, r2
 800219e:	189b      	adds	r3, r3, r2
 80021a0:	0002      	movs	r2, r0
 80021a2:	01d9      	lsls	r1, r3, #7
 80021a4:	d504      	bpl.n	80021b0 <__aeabi_dmul+0x358>
 80021a6:	2480      	movs	r4, #128	; 0x80
 80021a8:	4819      	ldr	r0, [pc, #100]	; (8002210 <__aeabi_dmul+0x3b8>)
 80021aa:	00e4      	lsls	r4, r4, #3
 80021ac:	4003      	ands	r3, r0
 80021ae:	4454      	add	r4, sl
 80021b0:	4818      	ldr	r0, [pc, #96]	; (8002214 <__aeabi_dmul+0x3bc>)
 80021b2:	4284      	cmp	r4, r0
 80021b4:	dd00      	ble.n	80021b8 <__aeabi_dmul+0x360>
 80021b6:	e727      	b.n	8002008 <__aeabi_dmul+0x1b0>
 80021b8:	075e      	lsls	r6, r3, #29
 80021ba:	025b      	lsls	r3, r3, #9
 80021bc:	08d2      	lsrs	r2, r2, #3
 80021be:	0b1f      	lsrs	r7, r3, #12
 80021c0:	0563      	lsls	r3, r4, #21
 80021c2:	4316      	orrs	r6, r2
 80021c4:	0d5b      	lsrs	r3, r3, #21
 80021c6:	e6b2      	b.n	8001f2e <__aeabi_dmul+0xd6>
 80021c8:	2300      	movs	r3, #0
 80021ca:	4699      	mov	r9, r3
 80021cc:	3301      	adds	r3, #1
 80021ce:	2704      	movs	r7, #4
 80021d0:	2600      	movs	r6, #0
 80021d2:	469b      	mov	fp, r3
 80021d4:	e664      	b.n	8001ea0 <__aeabi_dmul+0x48>
 80021d6:	2303      	movs	r3, #3
 80021d8:	9701      	str	r7, [sp, #4]
 80021da:	4681      	mov	r9, r0
 80021dc:	270c      	movs	r7, #12
 80021de:	469b      	mov	fp, r3
 80021e0:	e65e      	b.n	8001ea0 <__aeabi_dmul+0x48>
 80021e2:	2201      	movs	r2, #1
 80021e4:	2001      	movs	r0, #1
 80021e6:	4317      	orrs	r7, r2
 80021e8:	2200      	movs	r2, #0
 80021ea:	e676      	b.n	8001eda <__aeabi_dmul+0x82>
 80021ec:	2303      	movs	r3, #3
 80021ee:	2003      	movs	r0, #3
 80021f0:	431f      	orrs	r7, r3
 80021f2:	4643      	mov	r3, r8
 80021f4:	e671      	b.n	8001eda <__aeabi_dmul+0x82>
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	000007ff 	.word	0x000007ff
 80021fc:	fffffc01 	.word	0xfffffc01
 8002200:	0800e704 	.word	0x0800e704
 8002204:	800fffff 	.word	0x800fffff
 8002208:	fffffc0d 	.word	0xfffffc0d
 800220c:	000003ff 	.word	0x000003ff
 8002210:	feffffff 	.word	0xfeffffff
 8002214:	000007fe 	.word	0x000007fe
 8002218:	2300      	movs	r3, #0
 800221a:	2780      	movs	r7, #128	; 0x80
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	033f      	lsls	r7, r7, #12
 8002220:	2600      	movs	r6, #0
 8002222:	4b43      	ldr	r3, [pc, #268]	; (8002330 <__aeabi_dmul+0x4d8>)
 8002224:	e683      	b.n	8001f2e <__aeabi_dmul+0xd6>
 8002226:	9b01      	ldr	r3, [sp, #4]
 8002228:	0032      	movs	r2, r6
 800222a:	46a4      	mov	ip, r4
 800222c:	4658      	mov	r0, fp
 800222e:	e670      	b.n	8001f12 <__aeabi_dmul+0xba>
 8002230:	46ac      	mov	ip, r5
 8002232:	e66e      	b.n	8001f12 <__aeabi_dmul+0xba>
 8002234:	2780      	movs	r7, #128	; 0x80
 8002236:	9901      	ldr	r1, [sp, #4]
 8002238:	033f      	lsls	r7, r7, #12
 800223a:	4239      	tst	r1, r7
 800223c:	d02d      	beq.n	800229a <__aeabi_dmul+0x442>
 800223e:	423b      	tst	r3, r7
 8002240:	d12b      	bne.n	800229a <__aeabi_dmul+0x442>
 8002242:	431f      	orrs	r7, r3
 8002244:	033f      	lsls	r7, r7, #12
 8002246:	0b3f      	lsrs	r7, r7, #12
 8002248:	9500      	str	r5, [sp, #0]
 800224a:	0016      	movs	r6, r2
 800224c:	4b38      	ldr	r3, [pc, #224]	; (8002330 <__aeabi_dmul+0x4d8>)
 800224e:	e66e      	b.n	8001f2e <__aeabi_dmul+0xd6>
 8002250:	2501      	movs	r5, #1
 8002252:	1b2d      	subs	r5, r5, r4
 8002254:	2d38      	cmp	r5, #56	; 0x38
 8002256:	dd00      	ble.n	800225a <__aeabi_dmul+0x402>
 8002258:	e666      	b.n	8001f28 <__aeabi_dmul+0xd0>
 800225a:	2d1f      	cmp	r5, #31
 800225c:	dc40      	bgt.n	80022e0 <__aeabi_dmul+0x488>
 800225e:	4835      	ldr	r0, [pc, #212]	; (8002334 <__aeabi_dmul+0x4dc>)
 8002260:	001c      	movs	r4, r3
 8002262:	4450      	add	r0, sl
 8002264:	0016      	movs	r6, r2
 8002266:	4082      	lsls	r2, r0
 8002268:	4084      	lsls	r4, r0
 800226a:	40ee      	lsrs	r6, r5
 800226c:	1e50      	subs	r0, r2, #1
 800226e:	4182      	sbcs	r2, r0
 8002270:	4334      	orrs	r4, r6
 8002272:	4314      	orrs	r4, r2
 8002274:	40eb      	lsrs	r3, r5
 8002276:	0762      	lsls	r2, r4, #29
 8002278:	d009      	beq.n	800228e <__aeabi_dmul+0x436>
 800227a:	220f      	movs	r2, #15
 800227c:	4022      	ands	r2, r4
 800227e:	2a04      	cmp	r2, #4
 8002280:	d005      	beq.n	800228e <__aeabi_dmul+0x436>
 8002282:	0022      	movs	r2, r4
 8002284:	1d14      	adds	r4, r2, #4
 8002286:	4294      	cmp	r4, r2
 8002288:	4180      	sbcs	r0, r0
 800228a:	4240      	negs	r0, r0
 800228c:	181b      	adds	r3, r3, r0
 800228e:	021a      	lsls	r2, r3, #8
 8002290:	d53e      	bpl.n	8002310 <__aeabi_dmul+0x4b8>
 8002292:	2301      	movs	r3, #1
 8002294:	2700      	movs	r7, #0
 8002296:	2600      	movs	r6, #0
 8002298:	e649      	b.n	8001f2e <__aeabi_dmul+0xd6>
 800229a:	2780      	movs	r7, #128	; 0x80
 800229c:	9b01      	ldr	r3, [sp, #4]
 800229e:	033f      	lsls	r7, r7, #12
 80022a0:	431f      	orrs	r7, r3
 80022a2:	033f      	lsls	r7, r7, #12
 80022a4:	0b3f      	lsrs	r7, r7, #12
 80022a6:	9400      	str	r4, [sp, #0]
 80022a8:	4b21      	ldr	r3, [pc, #132]	; (8002330 <__aeabi_dmul+0x4d8>)
 80022aa:	e640      	b.n	8001f2e <__aeabi_dmul+0xd6>
 80022ac:	0003      	movs	r3, r0
 80022ae:	465a      	mov	r2, fp
 80022b0:	3b28      	subs	r3, #40	; 0x28
 80022b2:	409a      	lsls	r2, r3
 80022b4:	2600      	movs	r6, #0
 80022b6:	9201      	str	r2, [sp, #4]
 80022b8:	e66d      	b.n	8001f96 <__aeabi_dmul+0x13e>
 80022ba:	4658      	mov	r0, fp
 80022bc:	f000 fd1a 	bl	8002cf4 <__clzsi2>
 80022c0:	3020      	adds	r0, #32
 80022c2:	e657      	b.n	8001f74 <__aeabi_dmul+0x11c>
 80022c4:	0003      	movs	r3, r0
 80022c6:	4652      	mov	r2, sl
 80022c8:	3b28      	subs	r3, #40	; 0x28
 80022ca:	409a      	lsls	r2, r3
 80022cc:	0013      	movs	r3, r2
 80022ce:	2200      	movs	r2, #0
 80022d0:	e693      	b.n	8001ffa <__aeabi_dmul+0x1a2>
 80022d2:	4650      	mov	r0, sl
 80022d4:	f000 fd0e 	bl	8002cf4 <__clzsi2>
 80022d8:	3020      	adds	r0, #32
 80022da:	e67b      	b.n	8001fd4 <__aeabi_dmul+0x17c>
 80022dc:	46ca      	mov	sl, r9
 80022de:	e750      	b.n	8002182 <__aeabi_dmul+0x32a>
 80022e0:	201f      	movs	r0, #31
 80022e2:	001e      	movs	r6, r3
 80022e4:	4240      	negs	r0, r0
 80022e6:	1b04      	subs	r4, r0, r4
 80022e8:	40e6      	lsrs	r6, r4
 80022ea:	2d20      	cmp	r5, #32
 80022ec:	d003      	beq.n	80022f6 <__aeabi_dmul+0x49e>
 80022ee:	4c12      	ldr	r4, [pc, #72]	; (8002338 <__aeabi_dmul+0x4e0>)
 80022f0:	4454      	add	r4, sl
 80022f2:	40a3      	lsls	r3, r4
 80022f4:	431a      	orrs	r2, r3
 80022f6:	1e50      	subs	r0, r2, #1
 80022f8:	4182      	sbcs	r2, r0
 80022fa:	4332      	orrs	r2, r6
 80022fc:	2607      	movs	r6, #7
 80022fe:	2700      	movs	r7, #0
 8002300:	4016      	ands	r6, r2
 8002302:	d009      	beq.n	8002318 <__aeabi_dmul+0x4c0>
 8002304:	200f      	movs	r0, #15
 8002306:	2300      	movs	r3, #0
 8002308:	4010      	ands	r0, r2
 800230a:	0014      	movs	r4, r2
 800230c:	2804      	cmp	r0, #4
 800230e:	d1b9      	bne.n	8002284 <__aeabi_dmul+0x42c>
 8002310:	0022      	movs	r2, r4
 8002312:	075e      	lsls	r6, r3, #29
 8002314:	025b      	lsls	r3, r3, #9
 8002316:	0b1f      	lsrs	r7, r3, #12
 8002318:	08d2      	lsrs	r2, r2, #3
 800231a:	4316      	orrs	r6, r2
 800231c:	2300      	movs	r3, #0
 800231e:	e606      	b.n	8001f2e <__aeabi_dmul+0xd6>
 8002320:	2780      	movs	r7, #128	; 0x80
 8002322:	033f      	lsls	r7, r7, #12
 8002324:	431f      	orrs	r7, r3
 8002326:	033f      	lsls	r7, r7, #12
 8002328:	0b3f      	lsrs	r7, r7, #12
 800232a:	0016      	movs	r6, r2
 800232c:	4b00      	ldr	r3, [pc, #0]	; (8002330 <__aeabi_dmul+0x4d8>)
 800232e:	e5fe      	b.n	8001f2e <__aeabi_dmul+0xd6>
 8002330:	000007ff 	.word	0x000007ff
 8002334:	0000041e 	.word	0x0000041e
 8002338:	0000043e 	.word	0x0000043e

0800233c <__aeabi_dsub>:
 800233c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800233e:	4657      	mov	r7, sl
 8002340:	464e      	mov	r6, r9
 8002342:	4645      	mov	r5, r8
 8002344:	46de      	mov	lr, fp
 8002346:	000c      	movs	r4, r1
 8002348:	0309      	lsls	r1, r1, #12
 800234a:	b5e0      	push	{r5, r6, r7, lr}
 800234c:	0a49      	lsrs	r1, r1, #9
 800234e:	0f46      	lsrs	r6, r0, #29
 8002350:	005f      	lsls	r7, r3, #1
 8002352:	4331      	orrs	r1, r6
 8002354:	031e      	lsls	r6, r3, #12
 8002356:	0fdb      	lsrs	r3, r3, #31
 8002358:	0a76      	lsrs	r6, r6, #9
 800235a:	469b      	mov	fp, r3
 800235c:	0f53      	lsrs	r3, r2, #29
 800235e:	4333      	orrs	r3, r6
 8002360:	4ec8      	ldr	r6, [pc, #800]	; (8002684 <__aeabi_dsub+0x348>)
 8002362:	0065      	lsls	r5, r4, #1
 8002364:	00c0      	lsls	r0, r0, #3
 8002366:	0fe4      	lsrs	r4, r4, #31
 8002368:	00d2      	lsls	r2, r2, #3
 800236a:	0d6d      	lsrs	r5, r5, #21
 800236c:	46a2      	mov	sl, r4
 800236e:	4681      	mov	r9, r0
 8002370:	0d7f      	lsrs	r7, r7, #21
 8002372:	469c      	mov	ip, r3
 8002374:	4690      	mov	r8, r2
 8002376:	42b7      	cmp	r7, r6
 8002378:	d100      	bne.n	800237c <__aeabi_dsub+0x40>
 800237a:	e0b9      	b.n	80024f0 <__aeabi_dsub+0x1b4>
 800237c:	465b      	mov	r3, fp
 800237e:	2601      	movs	r6, #1
 8002380:	4073      	eors	r3, r6
 8002382:	469b      	mov	fp, r3
 8002384:	1bee      	subs	r6, r5, r7
 8002386:	45a3      	cmp	fp, r4
 8002388:	d100      	bne.n	800238c <__aeabi_dsub+0x50>
 800238a:	e083      	b.n	8002494 <__aeabi_dsub+0x158>
 800238c:	2e00      	cmp	r6, #0
 800238e:	dd63      	ble.n	8002458 <__aeabi_dsub+0x11c>
 8002390:	2f00      	cmp	r7, #0
 8002392:	d000      	beq.n	8002396 <__aeabi_dsub+0x5a>
 8002394:	e0b1      	b.n	80024fa <__aeabi_dsub+0x1be>
 8002396:	4663      	mov	r3, ip
 8002398:	4313      	orrs	r3, r2
 800239a:	d100      	bne.n	800239e <__aeabi_dsub+0x62>
 800239c:	e123      	b.n	80025e6 <__aeabi_dsub+0x2aa>
 800239e:	1e73      	subs	r3, r6, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d000      	beq.n	80023a6 <__aeabi_dsub+0x6a>
 80023a4:	e1ba      	b.n	800271c <__aeabi_dsub+0x3e0>
 80023a6:	1a86      	subs	r6, r0, r2
 80023a8:	4663      	mov	r3, ip
 80023aa:	42b0      	cmp	r0, r6
 80023ac:	4180      	sbcs	r0, r0
 80023ae:	2501      	movs	r5, #1
 80023b0:	1ac9      	subs	r1, r1, r3
 80023b2:	4240      	negs	r0, r0
 80023b4:	1a09      	subs	r1, r1, r0
 80023b6:	020b      	lsls	r3, r1, #8
 80023b8:	d400      	bmi.n	80023bc <__aeabi_dsub+0x80>
 80023ba:	e147      	b.n	800264c <__aeabi_dsub+0x310>
 80023bc:	0249      	lsls	r1, r1, #9
 80023be:	0a4b      	lsrs	r3, r1, #9
 80023c0:	4698      	mov	r8, r3
 80023c2:	4643      	mov	r3, r8
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d100      	bne.n	80023ca <__aeabi_dsub+0x8e>
 80023c8:	e189      	b.n	80026de <__aeabi_dsub+0x3a2>
 80023ca:	4640      	mov	r0, r8
 80023cc:	f000 fc92 	bl	8002cf4 <__clzsi2>
 80023d0:	0003      	movs	r3, r0
 80023d2:	3b08      	subs	r3, #8
 80023d4:	2b1f      	cmp	r3, #31
 80023d6:	dd00      	ble.n	80023da <__aeabi_dsub+0x9e>
 80023d8:	e17c      	b.n	80026d4 <__aeabi_dsub+0x398>
 80023da:	2220      	movs	r2, #32
 80023dc:	0030      	movs	r0, r6
 80023de:	1ad2      	subs	r2, r2, r3
 80023e0:	4641      	mov	r1, r8
 80023e2:	40d0      	lsrs	r0, r2
 80023e4:	4099      	lsls	r1, r3
 80023e6:	0002      	movs	r2, r0
 80023e8:	409e      	lsls	r6, r3
 80023ea:	430a      	orrs	r2, r1
 80023ec:	429d      	cmp	r5, r3
 80023ee:	dd00      	ble.n	80023f2 <__aeabi_dsub+0xb6>
 80023f0:	e16a      	b.n	80026c8 <__aeabi_dsub+0x38c>
 80023f2:	1b5d      	subs	r5, r3, r5
 80023f4:	1c6b      	adds	r3, r5, #1
 80023f6:	2b1f      	cmp	r3, #31
 80023f8:	dd00      	ble.n	80023fc <__aeabi_dsub+0xc0>
 80023fa:	e194      	b.n	8002726 <__aeabi_dsub+0x3ea>
 80023fc:	2120      	movs	r1, #32
 80023fe:	0010      	movs	r0, r2
 8002400:	0035      	movs	r5, r6
 8002402:	1ac9      	subs	r1, r1, r3
 8002404:	408e      	lsls	r6, r1
 8002406:	40da      	lsrs	r2, r3
 8002408:	4088      	lsls	r0, r1
 800240a:	40dd      	lsrs	r5, r3
 800240c:	1e71      	subs	r1, r6, #1
 800240e:	418e      	sbcs	r6, r1
 8002410:	0011      	movs	r1, r2
 8002412:	2207      	movs	r2, #7
 8002414:	4328      	orrs	r0, r5
 8002416:	2500      	movs	r5, #0
 8002418:	4306      	orrs	r6, r0
 800241a:	4032      	ands	r2, r6
 800241c:	2a00      	cmp	r2, #0
 800241e:	d009      	beq.n	8002434 <__aeabi_dsub+0xf8>
 8002420:	230f      	movs	r3, #15
 8002422:	4033      	ands	r3, r6
 8002424:	2b04      	cmp	r3, #4
 8002426:	d005      	beq.n	8002434 <__aeabi_dsub+0xf8>
 8002428:	1d33      	adds	r3, r6, #4
 800242a:	42b3      	cmp	r3, r6
 800242c:	41b6      	sbcs	r6, r6
 800242e:	4276      	negs	r6, r6
 8002430:	1989      	adds	r1, r1, r6
 8002432:	001e      	movs	r6, r3
 8002434:	020b      	lsls	r3, r1, #8
 8002436:	d400      	bmi.n	800243a <__aeabi_dsub+0xfe>
 8002438:	e23d      	b.n	80028b6 <__aeabi_dsub+0x57a>
 800243a:	1c6a      	adds	r2, r5, #1
 800243c:	4b91      	ldr	r3, [pc, #580]	; (8002684 <__aeabi_dsub+0x348>)
 800243e:	0555      	lsls	r5, r2, #21
 8002440:	0d6d      	lsrs	r5, r5, #21
 8002442:	429a      	cmp	r2, r3
 8002444:	d100      	bne.n	8002448 <__aeabi_dsub+0x10c>
 8002446:	e119      	b.n	800267c <__aeabi_dsub+0x340>
 8002448:	4a8f      	ldr	r2, [pc, #572]	; (8002688 <__aeabi_dsub+0x34c>)
 800244a:	08f6      	lsrs	r6, r6, #3
 800244c:	400a      	ands	r2, r1
 800244e:	0757      	lsls	r7, r2, #29
 8002450:	0252      	lsls	r2, r2, #9
 8002452:	4337      	orrs	r7, r6
 8002454:	0b12      	lsrs	r2, r2, #12
 8002456:	e09b      	b.n	8002590 <__aeabi_dsub+0x254>
 8002458:	2e00      	cmp	r6, #0
 800245a:	d000      	beq.n	800245e <__aeabi_dsub+0x122>
 800245c:	e0c5      	b.n	80025ea <__aeabi_dsub+0x2ae>
 800245e:	1c6e      	adds	r6, r5, #1
 8002460:	0576      	lsls	r6, r6, #21
 8002462:	0d76      	lsrs	r6, r6, #21
 8002464:	2e01      	cmp	r6, #1
 8002466:	dc00      	bgt.n	800246a <__aeabi_dsub+0x12e>
 8002468:	e148      	b.n	80026fc <__aeabi_dsub+0x3c0>
 800246a:	4667      	mov	r7, ip
 800246c:	1a86      	subs	r6, r0, r2
 800246e:	1bcb      	subs	r3, r1, r7
 8002470:	42b0      	cmp	r0, r6
 8002472:	41bf      	sbcs	r7, r7
 8002474:	427f      	negs	r7, r7
 8002476:	46b8      	mov	r8, r7
 8002478:	001f      	movs	r7, r3
 800247a:	4643      	mov	r3, r8
 800247c:	1aff      	subs	r7, r7, r3
 800247e:	003b      	movs	r3, r7
 8002480:	46b8      	mov	r8, r7
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	d500      	bpl.n	8002488 <__aeabi_dsub+0x14c>
 8002486:	e15f      	b.n	8002748 <__aeabi_dsub+0x40c>
 8002488:	4337      	orrs	r7, r6
 800248a:	d19a      	bne.n	80023c2 <__aeabi_dsub+0x86>
 800248c:	2200      	movs	r2, #0
 800248e:	2400      	movs	r4, #0
 8002490:	2500      	movs	r5, #0
 8002492:	e079      	b.n	8002588 <__aeabi_dsub+0x24c>
 8002494:	2e00      	cmp	r6, #0
 8002496:	dc00      	bgt.n	800249a <__aeabi_dsub+0x15e>
 8002498:	e0fa      	b.n	8002690 <__aeabi_dsub+0x354>
 800249a:	2f00      	cmp	r7, #0
 800249c:	d100      	bne.n	80024a0 <__aeabi_dsub+0x164>
 800249e:	e08d      	b.n	80025bc <__aeabi_dsub+0x280>
 80024a0:	4b78      	ldr	r3, [pc, #480]	; (8002684 <__aeabi_dsub+0x348>)
 80024a2:	429d      	cmp	r5, r3
 80024a4:	d067      	beq.n	8002576 <__aeabi_dsub+0x23a>
 80024a6:	2380      	movs	r3, #128	; 0x80
 80024a8:	4667      	mov	r7, ip
 80024aa:	041b      	lsls	r3, r3, #16
 80024ac:	431f      	orrs	r7, r3
 80024ae:	46bc      	mov	ip, r7
 80024b0:	2e38      	cmp	r6, #56	; 0x38
 80024b2:	dc00      	bgt.n	80024b6 <__aeabi_dsub+0x17a>
 80024b4:	e152      	b.n	800275c <__aeabi_dsub+0x420>
 80024b6:	4663      	mov	r3, ip
 80024b8:	4313      	orrs	r3, r2
 80024ba:	1e5a      	subs	r2, r3, #1
 80024bc:	4193      	sbcs	r3, r2
 80024be:	181e      	adds	r6, r3, r0
 80024c0:	4286      	cmp	r6, r0
 80024c2:	4180      	sbcs	r0, r0
 80024c4:	4240      	negs	r0, r0
 80024c6:	1809      	adds	r1, r1, r0
 80024c8:	020b      	lsls	r3, r1, #8
 80024ca:	d400      	bmi.n	80024ce <__aeabi_dsub+0x192>
 80024cc:	e0be      	b.n	800264c <__aeabi_dsub+0x310>
 80024ce:	4b6d      	ldr	r3, [pc, #436]	; (8002684 <__aeabi_dsub+0x348>)
 80024d0:	3501      	adds	r5, #1
 80024d2:	429d      	cmp	r5, r3
 80024d4:	d100      	bne.n	80024d8 <__aeabi_dsub+0x19c>
 80024d6:	e0d2      	b.n	800267e <__aeabi_dsub+0x342>
 80024d8:	4a6b      	ldr	r2, [pc, #428]	; (8002688 <__aeabi_dsub+0x34c>)
 80024da:	0873      	lsrs	r3, r6, #1
 80024dc:	400a      	ands	r2, r1
 80024de:	2101      	movs	r1, #1
 80024e0:	400e      	ands	r6, r1
 80024e2:	431e      	orrs	r6, r3
 80024e4:	0851      	lsrs	r1, r2, #1
 80024e6:	07d3      	lsls	r3, r2, #31
 80024e8:	2207      	movs	r2, #7
 80024ea:	431e      	orrs	r6, r3
 80024ec:	4032      	ands	r2, r6
 80024ee:	e795      	b.n	800241c <__aeabi_dsub+0xe0>
 80024f0:	001e      	movs	r6, r3
 80024f2:	4316      	orrs	r6, r2
 80024f4:	d000      	beq.n	80024f8 <__aeabi_dsub+0x1bc>
 80024f6:	e745      	b.n	8002384 <__aeabi_dsub+0x48>
 80024f8:	e740      	b.n	800237c <__aeabi_dsub+0x40>
 80024fa:	4b62      	ldr	r3, [pc, #392]	; (8002684 <__aeabi_dsub+0x348>)
 80024fc:	429d      	cmp	r5, r3
 80024fe:	d03a      	beq.n	8002576 <__aeabi_dsub+0x23a>
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	4667      	mov	r7, ip
 8002504:	041b      	lsls	r3, r3, #16
 8002506:	431f      	orrs	r7, r3
 8002508:	46bc      	mov	ip, r7
 800250a:	2e38      	cmp	r6, #56	; 0x38
 800250c:	dd00      	ble.n	8002510 <__aeabi_dsub+0x1d4>
 800250e:	e0eb      	b.n	80026e8 <__aeabi_dsub+0x3ac>
 8002510:	2e1f      	cmp	r6, #31
 8002512:	dc00      	bgt.n	8002516 <__aeabi_dsub+0x1da>
 8002514:	e13a      	b.n	800278c <__aeabi_dsub+0x450>
 8002516:	0033      	movs	r3, r6
 8002518:	4667      	mov	r7, ip
 800251a:	3b20      	subs	r3, #32
 800251c:	40df      	lsrs	r7, r3
 800251e:	003b      	movs	r3, r7
 8002520:	2e20      	cmp	r6, #32
 8002522:	d005      	beq.n	8002530 <__aeabi_dsub+0x1f4>
 8002524:	2740      	movs	r7, #64	; 0x40
 8002526:	1bbf      	subs	r7, r7, r6
 8002528:	4666      	mov	r6, ip
 800252a:	40be      	lsls	r6, r7
 800252c:	4332      	orrs	r2, r6
 800252e:	4690      	mov	r8, r2
 8002530:	4646      	mov	r6, r8
 8002532:	1e72      	subs	r2, r6, #1
 8002534:	4196      	sbcs	r6, r2
 8002536:	4333      	orrs	r3, r6
 8002538:	e0da      	b.n	80026f0 <__aeabi_dsub+0x3b4>
 800253a:	2b00      	cmp	r3, #0
 800253c:	d100      	bne.n	8002540 <__aeabi_dsub+0x204>
 800253e:	e214      	b.n	800296a <__aeabi_dsub+0x62e>
 8002540:	4663      	mov	r3, ip
 8002542:	4313      	orrs	r3, r2
 8002544:	d100      	bne.n	8002548 <__aeabi_dsub+0x20c>
 8002546:	e168      	b.n	800281a <__aeabi_dsub+0x4de>
 8002548:	2380      	movs	r3, #128	; 0x80
 800254a:	074e      	lsls	r6, r1, #29
 800254c:	08c0      	lsrs	r0, r0, #3
 800254e:	08c9      	lsrs	r1, r1, #3
 8002550:	031b      	lsls	r3, r3, #12
 8002552:	4306      	orrs	r6, r0
 8002554:	4219      	tst	r1, r3
 8002556:	d008      	beq.n	800256a <__aeabi_dsub+0x22e>
 8002558:	4660      	mov	r0, ip
 800255a:	08c0      	lsrs	r0, r0, #3
 800255c:	4218      	tst	r0, r3
 800255e:	d104      	bne.n	800256a <__aeabi_dsub+0x22e>
 8002560:	4663      	mov	r3, ip
 8002562:	0001      	movs	r1, r0
 8002564:	08d2      	lsrs	r2, r2, #3
 8002566:	075e      	lsls	r6, r3, #29
 8002568:	4316      	orrs	r6, r2
 800256a:	00f3      	lsls	r3, r6, #3
 800256c:	4699      	mov	r9, r3
 800256e:	00c9      	lsls	r1, r1, #3
 8002570:	0f72      	lsrs	r2, r6, #29
 8002572:	4d44      	ldr	r5, [pc, #272]	; (8002684 <__aeabi_dsub+0x348>)
 8002574:	4311      	orrs	r1, r2
 8002576:	464b      	mov	r3, r9
 8002578:	08de      	lsrs	r6, r3, #3
 800257a:	4b42      	ldr	r3, [pc, #264]	; (8002684 <__aeabi_dsub+0x348>)
 800257c:	074f      	lsls	r7, r1, #29
 800257e:	4337      	orrs	r7, r6
 8002580:	08ca      	lsrs	r2, r1, #3
 8002582:	429d      	cmp	r5, r3
 8002584:	d100      	bne.n	8002588 <__aeabi_dsub+0x24c>
 8002586:	e06e      	b.n	8002666 <__aeabi_dsub+0x32a>
 8002588:	0312      	lsls	r2, r2, #12
 800258a:	056d      	lsls	r5, r5, #21
 800258c:	0b12      	lsrs	r2, r2, #12
 800258e:	0d6d      	lsrs	r5, r5, #21
 8002590:	2100      	movs	r1, #0
 8002592:	0312      	lsls	r2, r2, #12
 8002594:	0b13      	lsrs	r3, r2, #12
 8002596:	0d0a      	lsrs	r2, r1, #20
 8002598:	0512      	lsls	r2, r2, #20
 800259a:	431a      	orrs	r2, r3
 800259c:	4b3b      	ldr	r3, [pc, #236]	; (800268c <__aeabi_dsub+0x350>)
 800259e:	052d      	lsls	r5, r5, #20
 80025a0:	4013      	ands	r3, r2
 80025a2:	432b      	orrs	r3, r5
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	07e4      	lsls	r4, r4, #31
 80025a8:	085b      	lsrs	r3, r3, #1
 80025aa:	4323      	orrs	r3, r4
 80025ac:	0038      	movs	r0, r7
 80025ae:	0019      	movs	r1, r3
 80025b0:	bc3c      	pop	{r2, r3, r4, r5}
 80025b2:	4690      	mov	r8, r2
 80025b4:	4699      	mov	r9, r3
 80025b6:	46a2      	mov	sl, r4
 80025b8:	46ab      	mov	fp, r5
 80025ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025bc:	4663      	mov	r3, ip
 80025be:	4313      	orrs	r3, r2
 80025c0:	d011      	beq.n	80025e6 <__aeabi_dsub+0x2aa>
 80025c2:	1e73      	subs	r3, r6, #1
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d000      	beq.n	80025ca <__aeabi_dsub+0x28e>
 80025c8:	e107      	b.n	80027da <__aeabi_dsub+0x49e>
 80025ca:	1886      	adds	r6, r0, r2
 80025cc:	4286      	cmp	r6, r0
 80025ce:	4180      	sbcs	r0, r0
 80025d0:	4461      	add	r1, ip
 80025d2:	4240      	negs	r0, r0
 80025d4:	1809      	adds	r1, r1, r0
 80025d6:	2501      	movs	r5, #1
 80025d8:	020b      	lsls	r3, r1, #8
 80025da:	d537      	bpl.n	800264c <__aeabi_dsub+0x310>
 80025dc:	2502      	movs	r5, #2
 80025de:	e77b      	b.n	80024d8 <__aeabi_dsub+0x19c>
 80025e0:	003e      	movs	r6, r7
 80025e2:	4661      	mov	r1, ip
 80025e4:	4691      	mov	r9, r2
 80025e6:	0035      	movs	r5, r6
 80025e8:	e7c5      	b.n	8002576 <__aeabi_dsub+0x23a>
 80025ea:	465c      	mov	r4, fp
 80025ec:	2d00      	cmp	r5, #0
 80025ee:	d000      	beq.n	80025f2 <__aeabi_dsub+0x2b6>
 80025f0:	e0e1      	b.n	80027b6 <__aeabi_dsub+0x47a>
 80025f2:	000b      	movs	r3, r1
 80025f4:	4303      	orrs	r3, r0
 80025f6:	d0f3      	beq.n	80025e0 <__aeabi_dsub+0x2a4>
 80025f8:	1c73      	adds	r3, r6, #1
 80025fa:	d100      	bne.n	80025fe <__aeabi_dsub+0x2c2>
 80025fc:	e1ac      	b.n	8002958 <__aeabi_dsub+0x61c>
 80025fe:	4b21      	ldr	r3, [pc, #132]	; (8002684 <__aeabi_dsub+0x348>)
 8002600:	429f      	cmp	r7, r3
 8002602:	d100      	bne.n	8002606 <__aeabi_dsub+0x2ca>
 8002604:	e13a      	b.n	800287c <__aeabi_dsub+0x540>
 8002606:	43f3      	mvns	r3, r6
 8002608:	2b38      	cmp	r3, #56	; 0x38
 800260a:	dd00      	ble.n	800260e <__aeabi_dsub+0x2d2>
 800260c:	e16f      	b.n	80028ee <__aeabi_dsub+0x5b2>
 800260e:	2b1f      	cmp	r3, #31
 8002610:	dd00      	ble.n	8002614 <__aeabi_dsub+0x2d8>
 8002612:	e18c      	b.n	800292e <__aeabi_dsub+0x5f2>
 8002614:	2520      	movs	r5, #32
 8002616:	000e      	movs	r6, r1
 8002618:	1aed      	subs	r5, r5, r3
 800261a:	40ae      	lsls	r6, r5
 800261c:	46b0      	mov	r8, r6
 800261e:	0006      	movs	r6, r0
 8002620:	46aa      	mov	sl, r5
 8002622:	40de      	lsrs	r6, r3
 8002624:	4645      	mov	r5, r8
 8002626:	4335      	orrs	r5, r6
 8002628:	002e      	movs	r6, r5
 800262a:	4655      	mov	r5, sl
 800262c:	40d9      	lsrs	r1, r3
 800262e:	40a8      	lsls	r0, r5
 8002630:	4663      	mov	r3, ip
 8002632:	1e45      	subs	r5, r0, #1
 8002634:	41a8      	sbcs	r0, r5
 8002636:	1a5b      	subs	r3, r3, r1
 8002638:	469c      	mov	ip, r3
 800263a:	4330      	orrs	r0, r6
 800263c:	1a16      	subs	r6, r2, r0
 800263e:	42b2      	cmp	r2, r6
 8002640:	4192      	sbcs	r2, r2
 8002642:	4663      	mov	r3, ip
 8002644:	4252      	negs	r2, r2
 8002646:	1a99      	subs	r1, r3, r2
 8002648:	003d      	movs	r5, r7
 800264a:	e6b4      	b.n	80023b6 <__aeabi_dsub+0x7a>
 800264c:	2207      	movs	r2, #7
 800264e:	4032      	ands	r2, r6
 8002650:	2a00      	cmp	r2, #0
 8002652:	d000      	beq.n	8002656 <__aeabi_dsub+0x31a>
 8002654:	e6e4      	b.n	8002420 <__aeabi_dsub+0xe4>
 8002656:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <__aeabi_dsub+0x348>)
 8002658:	08f6      	lsrs	r6, r6, #3
 800265a:	074f      	lsls	r7, r1, #29
 800265c:	4337      	orrs	r7, r6
 800265e:	08ca      	lsrs	r2, r1, #3
 8002660:	429d      	cmp	r5, r3
 8002662:	d000      	beq.n	8002666 <__aeabi_dsub+0x32a>
 8002664:	e790      	b.n	8002588 <__aeabi_dsub+0x24c>
 8002666:	003b      	movs	r3, r7
 8002668:	4313      	orrs	r3, r2
 800266a:	d100      	bne.n	800266e <__aeabi_dsub+0x332>
 800266c:	e1a6      	b.n	80029bc <__aeabi_dsub+0x680>
 800266e:	2380      	movs	r3, #128	; 0x80
 8002670:	031b      	lsls	r3, r3, #12
 8002672:	431a      	orrs	r2, r3
 8002674:	0312      	lsls	r2, r2, #12
 8002676:	0b12      	lsrs	r2, r2, #12
 8002678:	4d02      	ldr	r5, [pc, #8]	; (8002684 <__aeabi_dsub+0x348>)
 800267a:	e789      	b.n	8002590 <__aeabi_dsub+0x254>
 800267c:	0015      	movs	r5, r2
 800267e:	2200      	movs	r2, #0
 8002680:	2700      	movs	r7, #0
 8002682:	e785      	b.n	8002590 <__aeabi_dsub+0x254>
 8002684:	000007ff 	.word	0x000007ff
 8002688:	ff7fffff 	.word	0xff7fffff
 800268c:	800fffff 	.word	0x800fffff
 8002690:	2e00      	cmp	r6, #0
 8002692:	d000      	beq.n	8002696 <__aeabi_dsub+0x35a>
 8002694:	e0c7      	b.n	8002826 <__aeabi_dsub+0x4ea>
 8002696:	1c6b      	adds	r3, r5, #1
 8002698:	055e      	lsls	r6, r3, #21
 800269a:	0d76      	lsrs	r6, r6, #21
 800269c:	2e01      	cmp	r6, #1
 800269e:	dc00      	bgt.n	80026a2 <__aeabi_dsub+0x366>
 80026a0:	e0f0      	b.n	8002884 <__aeabi_dsub+0x548>
 80026a2:	4dc8      	ldr	r5, [pc, #800]	; (80029c4 <__aeabi_dsub+0x688>)
 80026a4:	42ab      	cmp	r3, r5
 80026a6:	d100      	bne.n	80026aa <__aeabi_dsub+0x36e>
 80026a8:	e0b9      	b.n	800281e <__aeabi_dsub+0x4e2>
 80026aa:	1885      	adds	r5, r0, r2
 80026ac:	000a      	movs	r2, r1
 80026ae:	4285      	cmp	r5, r0
 80026b0:	4189      	sbcs	r1, r1
 80026b2:	4462      	add	r2, ip
 80026b4:	4249      	negs	r1, r1
 80026b6:	1851      	adds	r1, r2, r1
 80026b8:	2207      	movs	r2, #7
 80026ba:	07ce      	lsls	r6, r1, #31
 80026bc:	086d      	lsrs	r5, r5, #1
 80026be:	432e      	orrs	r6, r5
 80026c0:	0849      	lsrs	r1, r1, #1
 80026c2:	4032      	ands	r2, r6
 80026c4:	001d      	movs	r5, r3
 80026c6:	e6a9      	b.n	800241c <__aeabi_dsub+0xe0>
 80026c8:	49bf      	ldr	r1, [pc, #764]	; (80029c8 <__aeabi_dsub+0x68c>)
 80026ca:	1aed      	subs	r5, r5, r3
 80026cc:	4011      	ands	r1, r2
 80026ce:	2207      	movs	r2, #7
 80026d0:	4032      	ands	r2, r6
 80026d2:	e6a3      	b.n	800241c <__aeabi_dsub+0xe0>
 80026d4:	0032      	movs	r2, r6
 80026d6:	3828      	subs	r0, #40	; 0x28
 80026d8:	4082      	lsls	r2, r0
 80026da:	2600      	movs	r6, #0
 80026dc:	e686      	b.n	80023ec <__aeabi_dsub+0xb0>
 80026de:	0030      	movs	r0, r6
 80026e0:	f000 fb08 	bl	8002cf4 <__clzsi2>
 80026e4:	3020      	adds	r0, #32
 80026e6:	e673      	b.n	80023d0 <__aeabi_dsub+0x94>
 80026e8:	4663      	mov	r3, ip
 80026ea:	4313      	orrs	r3, r2
 80026ec:	1e5a      	subs	r2, r3, #1
 80026ee:	4193      	sbcs	r3, r2
 80026f0:	1ac6      	subs	r6, r0, r3
 80026f2:	42b0      	cmp	r0, r6
 80026f4:	4180      	sbcs	r0, r0
 80026f6:	4240      	negs	r0, r0
 80026f8:	1a09      	subs	r1, r1, r0
 80026fa:	e65c      	b.n	80023b6 <__aeabi_dsub+0x7a>
 80026fc:	000e      	movs	r6, r1
 80026fe:	4667      	mov	r7, ip
 8002700:	4306      	orrs	r6, r0
 8002702:	4317      	orrs	r7, r2
 8002704:	2d00      	cmp	r5, #0
 8002706:	d15e      	bne.n	80027c6 <__aeabi_dsub+0x48a>
 8002708:	2e00      	cmp	r6, #0
 800270a:	d000      	beq.n	800270e <__aeabi_dsub+0x3d2>
 800270c:	e0f3      	b.n	80028f6 <__aeabi_dsub+0x5ba>
 800270e:	2f00      	cmp	r7, #0
 8002710:	d100      	bne.n	8002714 <__aeabi_dsub+0x3d8>
 8002712:	e11e      	b.n	8002952 <__aeabi_dsub+0x616>
 8002714:	465c      	mov	r4, fp
 8002716:	4661      	mov	r1, ip
 8002718:	4691      	mov	r9, r2
 800271a:	e72c      	b.n	8002576 <__aeabi_dsub+0x23a>
 800271c:	4fa9      	ldr	r7, [pc, #676]	; (80029c4 <__aeabi_dsub+0x688>)
 800271e:	42be      	cmp	r6, r7
 8002720:	d07b      	beq.n	800281a <__aeabi_dsub+0x4de>
 8002722:	001e      	movs	r6, r3
 8002724:	e6f1      	b.n	800250a <__aeabi_dsub+0x1ce>
 8002726:	0010      	movs	r0, r2
 8002728:	3d1f      	subs	r5, #31
 800272a:	40e8      	lsrs	r0, r5
 800272c:	2b20      	cmp	r3, #32
 800272e:	d003      	beq.n	8002738 <__aeabi_dsub+0x3fc>
 8002730:	2140      	movs	r1, #64	; 0x40
 8002732:	1acb      	subs	r3, r1, r3
 8002734:	409a      	lsls	r2, r3
 8002736:	4316      	orrs	r6, r2
 8002738:	1e73      	subs	r3, r6, #1
 800273a:	419e      	sbcs	r6, r3
 800273c:	2207      	movs	r2, #7
 800273e:	4306      	orrs	r6, r0
 8002740:	4032      	ands	r2, r6
 8002742:	2100      	movs	r1, #0
 8002744:	2500      	movs	r5, #0
 8002746:	e783      	b.n	8002650 <__aeabi_dsub+0x314>
 8002748:	1a16      	subs	r6, r2, r0
 800274a:	4663      	mov	r3, ip
 800274c:	42b2      	cmp	r2, r6
 800274e:	4180      	sbcs	r0, r0
 8002750:	1a59      	subs	r1, r3, r1
 8002752:	4240      	negs	r0, r0
 8002754:	1a0b      	subs	r3, r1, r0
 8002756:	4698      	mov	r8, r3
 8002758:	465c      	mov	r4, fp
 800275a:	e632      	b.n	80023c2 <__aeabi_dsub+0x86>
 800275c:	2e1f      	cmp	r6, #31
 800275e:	dd00      	ble.n	8002762 <__aeabi_dsub+0x426>
 8002760:	e0ab      	b.n	80028ba <__aeabi_dsub+0x57e>
 8002762:	2720      	movs	r7, #32
 8002764:	1bbb      	subs	r3, r7, r6
 8002766:	469a      	mov	sl, r3
 8002768:	4663      	mov	r3, ip
 800276a:	4657      	mov	r7, sl
 800276c:	40bb      	lsls	r3, r7
 800276e:	4699      	mov	r9, r3
 8002770:	0013      	movs	r3, r2
 8002772:	464f      	mov	r7, r9
 8002774:	40f3      	lsrs	r3, r6
 8002776:	431f      	orrs	r7, r3
 8002778:	003b      	movs	r3, r7
 800277a:	4657      	mov	r7, sl
 800277c:	40ba      	lsls	r2, r7
 800277e:	1e57      	subs	r7, r2, #1
 8002780:	41ba      	sbcs	r2, r7
 8002782:	4313      	orrs	r3, r2
 8002784:	4662      	mov	r2, ip
 8002786:	40f2      	lsrs	r2, r6
 8002788:	1889      	adds	r1, r1, r2
 800278a:	e698      	b.n	80024be <__aeabi_dsub+0x182>
 800278c:	2720      	movs	r7, #32
 800278e:	1bbb      	subs	r3, r7, r6
 8002790:	469a      	mov	sl, r3
 8002792:	4663      	mov	r3, ip
 8002794:	4657      	mov	r7, sl
 8002796:	40bb      	lsls	r3, r7
 8002798:	4699      	mov	r9, r3
 800279a:	0013      	movs	r3, r2
 800279c:	464f      	mov	r7, r9
 800279e:	40f3      	lsrs	r3, r6
 80027a0:	431f      	orrs	r7, r3
 80027a2:	003b      	movs	r3, r7
 80027a4:	4657      	mov	r7, sl
 80027a6:	40ba      	lsls	r2, r7
 80027a8:	1e57      	subs	r7, r2, #1
 80027aa:	41ba      	sbcs	r2, r7
 80027ac:	4313      	orrs	r3, r2
 80027ae:	4662      	mov	r2, ip
 80027b0:	40f2      	lsrs	r2, r6
 80027b2:	1a89      	subs	r1, r1, r2
 80027b4:	e79c      	b.n	80026f0 <__aeabi_dsub+0x3b4>
 80027b6:	4b83      	ldr	r3, [pc, #524]	; (80029c4 <__aeabi_dsub+0x688>)
 80027b8:	429f      	cmp	r7, r3
 80027ba:	d05f      	beq.n	800287c <__aeabi_dsub+0x540>
 80027bc:	2580      	movs	r5, #128	; 0x80
 80027be:	042d      	lsls	r5, r5, #16
 80027c0:	4273      	negs	r3, r6
 80027c2:	4329      	orrs	r1, r5
 80027c4:	e720      	b.n	8002608 <__aeabi_dsub+0x2cc>
 80027c6:	2e00      	cmp	r6, #0
 80027c8:	d10c      	bne.n	80027e4 <__aeabi_dsub+0x4a8>
 80027ca:	2f00      	cmp	r7, #0
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dsub+0x494>
 80027ce:	e0d0      	b.n	8002972 <__aeabi_dsub+0x636>
 80027d0:	465c      	mov	r4, fp
 80027d2:	4661      	mov	r1, ip
 80027d4:	4691      	mov	r9, r2
 80027d6:	4d7b      	ldr	r5, [pc, #492]	; (80029c4 <__aeabi_dsub+0x688>)
 80027d8:	e6cd      	b.n	8002576 <__aeabi_dsub+0x23a>
 80027da:	4f7a      	ldr	r7, [pc, #488]	; (80029c4 <__aeabi_dsub+0x688>)
 80027dc:	42be      	cmp	r6, r7
 80027de:	d01c      	beq.n	800281a <__aeabi_dsub+0x4de>
 80027e0:	001e      	movs	r6, r3
 80027e2:	e665      	b.n	80024b0 <__aeabi_dsub+0x174>
 80027e4:	2f00      	cmp	r7, #0
 80027e6:	d018      	beq.n	800281a <__aeabi_dsub+0x4de>
 80027e8:	08c0      	lsrs	r0, r0, #3
 80027ea:	074e      	lsls	r6, r1, #29
 80027ec:	4306      	orrs	r6, r0
 80027ee:	2080      	movs	r0, #128	; 0x80
 80027f0:	08c9      	lsrs	r1, r1, #3
 80027f2:	0300      	lsls	r0, r0, #12
 80027f4:	4201      	tst	r1, r0
 80027f6:	d008      	beq.n	800280a <__aeabi_dsub+0x4ce>
 80027f8:	4663      	mov	r3, ip
 80027fa:	08dc      	lsrs	r4, r3, #3
 80027fc:	4204      	tst	r4, r0
 80027fe:	d104      	bne.n	800280a <__aeabi_dsub+0x4ce>
 8002800:	0021      	movs	r1, r4
 8002802:	46da      	mov	sl, fp
 8002804:	08d2      	lsrs	r2, r2, #3
 8002806:	075e      	lsls	r6, r3, #29
 8002808:	4316      	orrs	r6, r2
 800280a:	00f3      	lsls	r3, r6, #3
 800280c:	4699      	mov	r9, r3
 800280e:	2401      	movs	r4, #1
 8002810:	4653      	mov	r3, sl
 8002812:	00c9      	lsls	r1, r1, #3
 8002814:	0f72      	lsrs	r2, r6, #29
 8002816:	4311      	orrs	r1, r2
 8002818:	401c      	ands	r4, r3
 800281a:	4d6a      	ldr	r5, [pc, #424]	; (80029c4 <__aeabi_dsub+0x688>)
 800281c:	e6ab      	b.n	8002576 <__aeabi_dsub+0x23a>
 800281e:	001d      	movs	r5, r3
 8002820:	2200      	movs	r2, #0
 8002822:	2700      	movs	r7, #0
 8002824:	e6b4      	b.n	8002590 <__aeabi_dsub+0x254>
 8002826:	2d00      	cmp	r5, #0
 8002828:	d159      	bne.n	80028de <__aeabi_dsub+0x5a2>
 800282a:	000b      	movs	r3, r1
 800282c:	4303      	orrs	r3, r0
 800282e:	d100      	bne.n	8002832 <__aeabi_dsub+0x4f6>
 8002830:	e6d6      	b.n	80025e0 <__aeabi_dsub+0x2a4>
 8002832:	1c73      	adds	r3, r6, #1
 8002834:	d100      	bne.n	8002838 <__aeabi_dsub+0x4fc>
 8002836:	e0b2      	b.n	800299e <__aeabi_dsub+0x662>
 8002838:	4b62      	ldr	r3, [pc, #392]	; (80029c4 <__aeabi_dsub+0x688>)
 800283a:	429f      	cmp	r7, r3
 800283c:	d01e      	beq.n	800287c <__aeabi_dsub+0x540>
 800283e:	43f3      	mvns	r3, r6
 8002840:	2b38      	cmp	r3, #56	; 0x38
 8002842:	dc6f      	bgt.n	8002924 <__aeabi_dsub+0x5e8>
 8002844:	2b1f      	cmp	r3, #31
 8002846:	dd00      	ble.n	800284a <__aeabi_dsub+0x50e>
 8002848:	e097      	b.n	800297a <__aeabi_dsub+0x63e>
 800284a:	2520      	movs	r5, #32
 800284c:	000e      	movs	r6, r1
 800284e:	1aed      	subs	r5, r5, r3
 8002850:	40ae      	lsls	r6, r5
 8002852:	46b0      	mov	r8, r6
 8002854:	0006      	movs	r6, r0
 8002856:	46aa      	mov	sl, r5
 8002858:	40de      	lsrs	r6, r3
 800285a:	4645      	mov	r5, r8
 800285c:	4335      	orrs	r5, r6
 800285e:	002e      	movs	r6, r5
 8002860:	4655      	mov	r5, sl
 8002862:	40a8      	lsls	r0, r5
 8002864:	40d9      	lsrs	r1, r3
 8002866:	1e45      	subs	r5, r0, #1
 8002868:	41a8      	sbcs	r0, r5
 800286a:	448c      	add	ip, r1
 800286c:	4306      	orrs	r6, r0
 800286e:	18b6      	adds	r6, r6, r2
 8002870:	4296      	cmp	r6, r2
 8002872:	4192      	sbcs	r2, r2
 8002874:	4251      	negs	r1, r2
 8002876:	4461      	add	r1, ip
 8002878:	003d      	movs	r5, r7
 800287a:	e625      	b.n	80024c8 <__aeabi_dsub+0x18c>
 800287c:	003d      	movs	r5, r7
 800287e:	4661      	mov	r1, ip
 8002880:	4691      	mov	r9, r2
 8002882:	e678      	b.n	8002576 <__aeabi_dsub+0x23a>
 8002884:	000b      	movs	r3, r1
 8002886:	4303      	orrs	r3, r0
 8002888:	2d00      	cmp	r5, #0
 800288a:	d000      	beq.n	800288e <__aeabi_dsub+0x552>
 800288c:	e655      	b.n	800253a <__aeabi_dsub+0x1fe>
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f5      	beq.n	800287e <__aeabi_dsub+0x542>
 8002892:	4663      	mov	r3, ip
 8002894:	4313      	orrs	r3, r2
 8002896:	d100      	bne.n	800289a <__aeabi_dsub+0x55e>
 8002898:	e66d      	b.n	8002576 <__aeabi_dsub+0x23a>
 800289a:	1886      	adds	r6, r0, r2
 800289c:	4286      	cmp	r6, r0
 800289e:	4180      	sbcs	r0, r0
 80028a0:	4461      	add	r1, ip
 80028a2:	4240      	negs	r0, r0
 80028a4:	1809      	adds	r1, r1, r0
 80028a6:	2200      	movs	r2, #0
 80028a8:	020b      	lsls	r3, r1, #8
 80028aa:	d400      	bmi.n	80028ae <__aeabi_dsub+0x572>
 80028ac:	e6d0      	b.n	8002650 <__aeabi_dsub+0x314>
 80028ae:	4b46      	ldr	r3, [pc, #280]	; (80029c8 <__aeabi_dsub+0x68c>)
 80028b0:	3501      	adds	r5, #1
 80028b2:	4019      	ands	r1, r3
 80028b4:	e5b2      	b.n	800241c <__aeabi_dsub+0xe0>
 80028b6:	46b1      	mov	r9, r6
 80028b8:	e65d      	b.n	8002576 <__aeabi_dsub+0x23a>
 80028ba:	0033      	movs	r3, r6
 80028bc:	4667      	mov	r7, ip
 80028be:	3b20      	subs	r3, #32
 80028c0:	40df      	lsrs	r7, r3
 80028c2:	003b      	movs	r3, r7
 80028c4:	2e20      	cmp	r6, #32
 80028c6:	d005      	beq.n	80028d4 <__aeabi_dsub+0x598>
 80028c8:	2740      	movs	r7, #64	; 0x40
 80028ca:	1bbf      	subs	r7, r7, r6
 80028cc:	4666      	mov	r6, ip
 80028ce:	40be      	lsls	r6, r7
 80028d0:	4332      	orrs	r2, r6
 80028d2:	4690      	mov	r8, r2
 80028d4:	4646      	mov	r6, r8
 80028d6:	1e72      	subs	r2, r6, #1
 80028d8:	4196      	sbcs	r6, r2
 80028da:	4333      	orrs	r3, r6
 80028dc:	e5ef      	b.n	80024be <__aeabi_dsub+0x182>
 80028de:	4b39      	ldr	r3, [pc, #228]	; (80029c4 <__aeabi_dsub+0x688>)
 80028e0:	429f      	cmp	r7, r3
 80028e2:	d0cb      	beq.n	800287c <__aeabi_dsub+0x540>
 80028e4:	2580      	movs	r5, #128	; 0x80
 80028e6:	042d      	lsls	r5, r5, #16
 80028e8:	4273      	negs	r3, r6
 80028ea:	4329      	orrs	r1, r5
 80028ec:	e7a8      	b.n	8002840 <__aeabi_dsub+0x504>
 80028ee:	4308      	orrs	r0, r1
 80028f0:	1e41      	subs	r1, r0, #1
 80028f2:	4188      	sbcs	r0, r1
 80028f4:	e6a2      	b.n	800263c <__aeabi_dsub+0x300>
 80028f6:	2f00      	cmp	r7, #0
 80028f8:	d100      	bne.n	80028fc <__aeabi_dsub+0x5c0>
 80028fa:	e63c      	b.n	8002576 <__aeabi_dsub+0x23a>
 80028fc:	4663      	mov	r3, ip
 80028fe:	1a86      	subs	r6, r0, r2
 8002900:	1acf      	subs	r7, r1, r3
 8002902:	42b0      	cmp	r0, r6
 8002904:	419b      	sbcs	r3, r3
 8002906:	425b      	negs	r3, r3
 8002908:	1afb      	subs	r3, r7, r3
 800290a:	4698      	mov	r8, r3
 800290c:	021b      	lsls	r3, r3, #8
 800290e:	d54e      	bpl.n	80029ae <__aeabi_dsub+0x672>
 8002910:	1a16      	subs	r6, r2, r0
 8002912:	4663      	mov	r3, ip
 8002914:	42b2      	cmp	r2, r6
 8002916:	4192      	sbcs	r2, r2
 8002918:	1a59      	subs	r1, r3, r1
 800291a:	4252      	negs	r2, r2
 800291c:	1a89      	subs	r1, r1, r2
 800291e:	465c      	mov	r4, fp
 8002920:	2200      	movs	r2, #0
 8002922:	e57b      	b.n	800241c <__aeabi_dsub+0xe0>
 8002924:	4301      	orrs	r1, r0
 8002926:	000e      	movs	r6, r1
 8002928:	1e71      	subs	r1, r6, #1
 800292a:	418e      	sbcs	r6, r1
 800292c:	e79f      	b.n	800286e <__aeabi_dsub+0x532>
 800292e:	001d      	movs	r5, r3
 8002930:	000e      	movs	r6, r1
 8002932:	3d20      	subs	r5, #32
 8002934:	40ee      	lsrs	r6, r5
 8002936:	46b0      	mov	r8, r6
 8002938:	2b20      	cmp	r3, #32
 800293a:	d004      	beq.n	8002946 <__aeabi_dsub+0x60a>
 800293c:	2540      	movs	r5, #64	; 0x40
 800293e:	1aeb      	subs	r3, r5, r3
 8002940:	4099      	lsls	r1, r3
 8002942:	4308      	orrs	r0, r1
 8002944:	4681      	mov	r9, r0
 8002946:	4648      	mov	r0, r9
 8002948:	4643      	mov	r3, r8
 800294a:	1e41      	subs	r1, r0, #1
 800294c:	4188      	sbcs	r0, r1
 800294e:	4318      	orrs	r0, r3
 8002950:	e674      	b.n	800263c <__aeabi_dsub+0x300>
 8002952:	2200      	movs	r2, #0
 8002954:	2400      	movs	r4, #0
 8002956:	e617      	b.n	8002588 <__aeabi_dsub+0x24c>
 8002958:	1a16      	subs	r6, r2, r0
 800295a:	4663      	mov	r3, ip
 800295c:	42b2      	cmp	r2, r6
 800295e:	4192      	sbcs	r2, r2
 8002960:	1a59      	subs	r1, r3, r1
 8002962:	4252      	negs	r2, r2
 8002964:	1a89      	subs	r1, r1, r2
 8002966:	003d      	movs	r5, r7
 8002968:	e525      	b.n	80023b6 <__aeabi_dsub+0x7a>
 800296a:	4661      	mov	r1, ip
 800296c:	4691      	mov	r9, r2
 800296e:	4d15      	ldr	r5, [pc, #84]	; (80029c4 <__aeabi_dsub+0x688>)
 8002970:	e601      	b.n	8002576 <__aeabi_dsub+0x23a>
 8002972:	2280      	movs	r2, #128	; 0x80
 8002974:	2400      	movs	r4, #0
 8002976:	0312      	lsls	r2, r2, #12
 8002978:	e679      	b.n	800266e <__aeabi_dsub+0x332>
 800297a:	001d      	movs	r5, r3
 800297c:	000e      	movs	r6, r1
 800297e:	3d20      	subs	r5, #32
 8002980:	40ee      	lsrs	r6, r5
 8002982:	46b0      	mov	r8, r6
 8002984:	2b20      	cmp	r3, #32
 8002986:	d004      	beq.n	8002992 <__aeabi_dsub+0x656>
 8002988:	2540      	movs	r5, #64	; 0x40
 800298a:	1aeb      	subs	r3, r5, r3
 800298c:	4099      	lsls	r1, r3
 800298e:	4308      	orrs	r0, r1
 8002990:	4681      	mov	r9, r0
 8002992:	464e      	mov	r6, r9
 8002994:	4643      	mov	r3, r8
 8002996:	1e71      	subs	r1, r6, #1
 8002998:	418e      	sbcs	r6, r1
 800299a:	431e      	orrs	r6, r3
 800299c:	e767      	b.n	800286e <__aeabi_dsub+0x532>
 800299e:	1886      	adds	r6, r0, r2
 80029a0:	4296      	cmp	r6, r2
 80029a2:	419b      	sbcs	r3, r3
 80029a4:	4461      	add	r1, ip
 80029a6:	425b      	negs	r3, r3
 80029a8:	18c9      	adds	r1, r1, r3
 80029aa:	003d      	movs	r5, r7
 80029ac:	e58c      	b.n	80024c8 <__aeabi_dsub+0x18c>
 80029ae:	4647      	mov	r7, r8
 80029b0:	4337      	orrs	r7, r6
 80029b2:	d0ce      	beq.n	8002952 <__aeabi_dsub+0x616>
 80029b4:	2207      	movs	r2, #7
 80029b6:	4641      	mov	r1, r8
 80029b8:	4032      	ands	r2, r6
 80029ba:	e649      	b.n	8002650 <__aeabi_dsub+0x314>
 80029bc:	2700      	movs	r7, #0
 80029be:	003a      	movs	r2, r7
 80029c0:	e5e6      	b.n	8002590 <__aeabi_dsub+0x254>
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	000007ff 	.word	0x000007ff
 80029c8:	ff7fffff 	.word	0xff7fffff

080029cc <__aeabi_dcmpun>:
 80029cc:	b570      	push	{r4, r5, r6, lr}
 80029ce:	4e0c      	ldr	r6, [pc, #48]	; (8002a00 <__aeabi_dcmpun+0x34>)
 80029d0:	030d      	lsls	r5, r1, #12
 80029d2:	031c      	lsls	r4, r3, #12
 80029d4:	0049      	lsls	r1, r1, #1
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	0b2d      	lsrs	r5, r5, #12
 80029da:	0d49      	lsrs	r1, r1, #21
 80029dc:	0b24      	lsrs	r4, r4, #12
 80029de:	0d5b      	lsrs	r3, r3, #21
 80029e0:	42b1      	cmp	r1, r6
 80029e2:	d008      	beq.n	80029f6 <__aeabi_dcmpun+0x2a>
 80029e4:	4906      	ldr	r1, [pc, #24]	; (8002a00 <__aeabi_dcmpun+0x34>)
 80029e6:	2000      	movs	r0, #0
 80029e8:	428b      	cmp	r3, r1
 80029ea:	d103      	bne.n	80029f4 <__aeabi_dcmpun+0x28>
 80029ec:	4314      	orrs	r4, r2
 80029ee:	0020      	movs	r0, r4
 80029f0:	1e44      	subs	r4, r0, #1
 80029f2:	41a0      	sbcs	r0, r4
 80029f4:	bd70      	pop	{r4, r5, r6, pc}
 80029f6:	4305      	orrs	r5, r0
 80029f8:	2001      	movs	r0, #1
 80029fa:	2d00      	cmp	r5, #0
 80029fc:	d1fa      	bne.n	80029f4 <__aeabi_dcmpun+0x28>
 80029fe:	e7f1      	b.n	80029e4 <__aeabi_dcmpun+0x18>
 8002a00:	000007ff 	.word	0x000007ff

08002a04 <__aeabi_d2iz>:
 8002a04:	b530      	push	{r4, r5, lr}
 8002a06:	4d14      	ldr	r5, [pc, #80]	; (8002a58 <__aeabi_d2iz+0x54>)
 8002a08:	030a      	lsls	r2, r1, #12
 8002a0a:	004b      	lsls	r3, r1, #1
 8002a0c:	0b12      	lsrs	r2, r2, #12
 8002a0e:	0d5b      	lsrs	r3, r3, #21
 8002a10:	0fc9      	lsrs	r1, r1, #31
 8002a12:	2400      	movs	r4, #0
 8002a14:	42ab      	cmp	r3, r5
 8002a16:	dd11      	ble.n	8002a3c <__aeabi_d2iz+0x38>
 8002a18:	4c10      	ldr	r4, [pc, #64]	; (8002a5c <__aeabi_d2iz+0x58>)
 8002a1a:	42a3      	cmp	r3, r4
 8002a1c:	dc10      	bgt.n	8002a40 <__aeabi_d2iz+0x3c>
 8002a1e:	2480      	movs	r4, #128	; 0x80
 8002a20:	0364      	lsls	r4, r4, #13
 8002a22:	4322      	orrs	r2, r4
 8002a24:	4c0e      	ldr	r4, [pc, #56]	; (8002a60 <__aeabi_d2iz+0x5c>)
 8002a26:	1ae4      	subs	r4, r4, r3
 8002a28:	2c1f      	cmp	r4, #31
 8002a2a:	dd0c      	ble.n	8002a46 <__aeabi_d2iz+0x42>
 8002a2c:	480d      	ldr	r0, [pc, #52]	; (8002a64 <__aeabi_d2iz+0x60>)
 8002a2e:	1ac3      	subs	r3, r0, r3
 8002a30:	40da      	lsrs	r2, r3
 8002a32:	0013      	movs	r3, r2
 8002a34:	425c      	negs	r4, r3
 8002a36:	2900      	cmp	r1, #0
 8002a38:	d100      	bne.n	8002a3c <__aeabi_d2iz+0x38>
 8002a3a:	001c      	movs	r4, r3
 8002a3c:	0020      	movs	r0, r4
 8002a3e:	bd30      	pop	{r4, r5, pc}
 8002a40:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <__aeabi_d2iz+0x64>)
 8002a42:	18cc      	adds	r4, r1, r3
 8002a44:	e7fa      	b.n	8002a3c <__aeabi_d2iz+0x38>
 8002a46:	4d09      	ldr	r5, [pc, #36]	; (8002a6c <__aeabi_d2iz+0x68>)
 8002a48:	40e0      	lsrs	r0, r4
 8002a4a:	46ac      	mov	ip, r5
 8002a4c:	4463      	add	r3, ip
 8002a4e:	409a      	lsls	r2, r3
 8002a50:	0013      	movs	r3, r2
 8002a52:	4303      	orrs	r3, r0
 8002a54:	e7ee      	b.n	8002a34 <__aeabi_d2iz+0x30>
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	000003fe 	.word	0x000003fe
 8002a5c:	0000041d 	.word	0x0000041d
 8002a60:	00000433 	.word	0x00000433
 8002a64:	00000413 	.word	0x00000413
 8002a68:	7fffffff 	.word	0x7fffffff
 8002a6c:	fffffbed 	.word	0xfffffbed

08002a70 <__aeabi_i2d>:
 8002a70:	b570      	push	{r4, r5, r6, lr}
 8002a72:	2800      	cmp	r0, #0
 8002a74:	d02d      	beq.n	8002ad2 <__aeabi_i2d+0x62>
 8002a76:	17c3      	asrs	r3, r0, #31
 8002a78:	18c5      	adds	r5, r0, r3
 8002a7a:	405d      	eors	r5, r3
 8002a7c:	0fc4      	lsrs	r4, r0, #31
 8002a7e:	0028      	movs	r0, r5
 8002a80:	f000 f938 	bl	8002cf4 <__clzsi2>
 8002a84:	4b15      	ldr	r3, [pc, #84]	; (8002adc <__aeabi_i2d+0x6c>)
 8002a86:	1a1b      	subs	r3, r3, r0
 8002a88:	055b      	lsls	r3, r3, #21
 8002a8a:	0d5b      	lsrs	r3, r3, #21
 8002a8c:	280a      	cmp	r0, #10
 8002a8e:	dd15      	ble.n	8002abc <__aeabi_i2d+0x4c>
 8002a90:	380b      	subs	r0, #11
 8002a92:	4085      	lsls	r5, r0
 8002a94:	2200      	movs	r2, #0
 8002a96:	032d      	lsls	r5, r5, #12
 8002a98:	0b2d      	lsrs	r5, r5, #12
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	0010      	movs	r0, r2
 8002a9e:	032d      	lsls	r5, r5, #12
 8002aa0:	0d0a      	lsrs	r2, r1, #20
 8002aa2:	0b2d      	lsrs	r5, r5, #12
 8002aa4:	0512      	lsls	r2, r2, #20
 8002aa6:	432a      	orrs	r2, r5
 8002aa8:	4d0d      	ldr	r5, [pc, #52]	; (8002ae0 <__aeabi_i2d+0x70>)
 8002aaa:	051b      	lsls	r3, r3, #20
 8002aac:	402a      	ands	r2, r5
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	07e4      	lsls	r4, r4, #31
 8002ab4:	085b      	lsrs	r3, r3, #1
 8002ab6:	4323      	orrs	r3, r4
 8002ab8:	0019      	movs	r1, r3
 8002aba:	bd70      	pop	{r4, r5, r6, pc}
 8002abc:	0002      	movs	r2, r0
 8002abe:	0029      	movs	r1, r5
 8002ac0:	3215      	adds	r2, #21
 8002ac2:	4091      	lsls	r1, r2
 8002ac4:	000a      	movs	r2, r1
 8002ac6:	210b      	movs	r1, #11
 8002ac8:	1a08      	subs	r0, r1, r0
 8002aca:	40c5      	lsrs	r5, r0
 8002acc:	032d      	lsls	r5, r5, #12
 8002ace:	0b2d      	lsrs	r5, r5, #12
 8002ad0:	e7e3      	b.n	8002a9a <__aeabi_i2d+0x2a>
 8002ad2:	2400      	movs	r4, #0
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	2500      	movs	r5, #0
 8002ad8:	2200      	movs	r2, #0
 8002ada:	e7de      	b.n	8002a9a <__aeabi_i2d+0x2a>
 8002adc:	0000041e 	.word	0x0000041e
 8002ae0:	800fffff 	.word	0x800fffff

08002ae4 <__aeabi_ui2d>:
 8002ae4:	b510      	push	{r4, lr}
 8002ae6:	1e04      	subs	r4, r0, #0
 8002ae8:	d025      	beq.n	8002b36 <__aeabi_ui2d+0x52>
 8002aea:	f000 f903 	bl	8002cf4 <__clzsi2>
 8002aee:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <__aeabi_ui2d+0x5c>)
 8002af0:	1a1b      	subs	r3, r3, r0
 8002af2:	055b      	lsls	r3, r3, #21
 8002af4:	0d5b      	lsrs	r3, r3, #21
 8002af6:	280a      	cmp	r0, #10
 8002af8:	dd12      	ble.n	8002b20 <__aeabi_ui2d+0x3c>
 8002afa:	380b      	subs	r0, #11
 8002afc:	4084      	lsls	r4, r0
 8002afe:	2200      	movs	r2, #0
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	0b24      	lsrs	r4, r4, #12
 8002b04:	2100      	movs	r1, #0
 8002b06:	0010      	movs	r0, r2
 8002b08:	0324      	lsls	r4, r4, #12
 8002b0a:	0d0a      	lsrs	r2, r1, #20
 8002b0c:	0b24      	lsrs	r4, r4, #12
 8002b0e:	0512      	lsls	r2, r2, #20
 8002b10:	4322      	orrs	r2, r4
 8002b12:	4c0c      	ldr	r4, [pc, #48]	; (8002b44 <__aeabi_ui2d+0x60>)
 8002b14:	051b      	lsls	r3, r3, #20
 8002b16:	4022      	ands	r2, r4
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	0859      	lsrs	r1, r3, #1
 8002b1e:	bd10      	pop	{r4, pc}
 8002b20:	0002      	movs	r2, r0
 8002b22:	0021      	movs	r1, r4
 8002b24:	3215      	adds	r2, #21
 8002b26:	4091      	lsls	r1, r2
 8002b28:	000a      	movs	r2, r1
 8002b2a:	210b      	movs	r1, #11
 8002b2c:	1a08      	subs	r0, r1, r0
 8002b2e:	40c4      	lsrs	r4, r0
 8002b30:	0324      	lsls	r4, r4, #12
 8002b32:	0b24      	lsrs	r4, r4, #12
 8002b34:	e7e6      	b.n	8002b04 <__aeabi_ui2d+0x20>
 8002b36:	2300      	movs	r3, #0
 8002b38:	2400      	movs	r4, #0
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	e7e2      	b.n	8002b04 <__aeabi_ui2d+0x20>
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	0000041e 	.word	0x0000041e
 8002b44:	800fffff 	.word	0x800fffff

08002b48 <__aeabi_f2d>:
 8002b48:	0041      	lsls	r1, r0, #1
 8002b4a:	0e09      	lsrs	r1, r1, #24
 8002b4c:	1c4b      	adds	r3, r1, #1
 8002b4e:	b570      	push	{r4, r5, r6, lr}
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	0246      	lsls	r6, r0, #9
 8002b54:	0a75      	lsrs	r5, r6, #9
 8002b56:	0fc4      	lsrs	r4, r0, #31
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	dd14      	ble.n	8002b86 <__aeabi_f2d+0x3e>
 8002b5c:	23e0      	movs	r3, #224	; 0xe0
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	076d      	lsls	r5, r5, #29
 8002b62:	0b36      	lsrs	r6, r6, #12
 8002b64:	18cb      	adds	r3, r1, r3
 8002b66:	2100      	movs	r1, #0
 8002b68:	0d0a      	lsrs	r2, r1, #20
 8002b6a:	0028      	movs	r0, r5
 8002b6c:	0512      	lsls	r2, r2, #20
 8002b6e:	4d1c      	ldr	r5, [pc, #112]	; (8002be0 <__aeabi_f2d+0x98>)
 8002b70:	4332      	orrs	r2, r6
 8002b72:	055b      	lsls	r3, r3, #21
 8002b74:	402a      	ands	r2, r5
 8002b76:	085b      	lsrs	r3, r3, #1
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	07e4      	lsls	r4, r4, #31
 8002b7e:	085b      	lsrs	r3, r3, #1
 8002b80:	4323      	orrs	r3, r4
 8002b82:	0019      	movs	r1, r3
 8002b84:	bd70      	pop	{r4, r5, r6, pc}
 8002b86:	2900      	cmp	r1, #0
 8002b88:	d114      	bne.n	8002bb4 <__aeabi_f2d+0x6c>
 8002b8a:	2d00      	cmp	r5, #0
 8002b8c:	d01e      	beq.n	8002bcc <__aeabi_f2d+0x84>
 8002b8e:	0028      	movs	r0, r5
 8002b90:	f000 f8b0 	bl	8002cf4 <__clzsi2>
 8002b94:	280a      	cmp	r0, #10
 8002b96:	dc1c      	bgt.n	8002bd2 <__aeabi_f2d+0x8a>
 8002b98:	230b      	movs	r3, #11
 8002b9a:	002a      	movs	r2, r5
 8002b9c:	1a1b      	subs	r3, r3, r0
 8002b9e:	40da      	lsrs	r2, r3
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	3315      	adds	r3, #21
 8002ba4:	409d      	lsls	r5, r3
 8002ba6:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <__aeabi_f2d+0x9c>)
 8002ba8:	0312      	lsls	r2, r2, #12
 8002baa:	1a1b      	subs	r3, r3, r0
 8002bac:	055b      	lsls	r3, r3, #21
 8002bae:	0b16      	lsrs	r6, r2, #12
 8002bb0:	0d5b      	lsrs	r3, r3, #21
 8002bb2:	e7d8      	b.n	8002b66 <__aeabi_f2d+0x1e>
 8002bb4:	2d00      	cmp	r5, #0
 8002bb6:	d006      	beq.n	8002bc6 <__aeabi_f2d+0x7e>
 8002bb8:	0b32      	lsrs	r2, r6, #12
 8002bba:	2680      	movs	r6, #128	; 0x80
 8002bbc:	0336      	lsls	r6, r6, #12
 8002bbe:	076d      	lsls	r5, r5, #29
 8002bc0:	4316      	orrs	r6, r2
 8002bc2:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <__aeabi_f2d+0xa0>)
 8002bc4:	e7cf      	b.n	8002b66 <__aeabi_f2d+0x1e>
 8002bc6:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <__aeabi_f2d+0xa0>)
 8002bc8:	2600      	movs	r6, #0
 8002bca:	e7cc      	b.n	8002b66 <__aeabi_f2d+0x1e>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	2600      	movs	r6, #0
 8002bd0:	e7c9      	b.n	8002b66 <__aeabi_f2d+0x1e>
 8002bd2:	0003      	movs	r3, r0
 8002bd4:	002a      	movs	r2, r5
 8002bd6:	3b0b      	subs	r3, #11
 8002bd8:	409a      	lsls	r2, r3
 8002bda:	2500      	movs	r5, #0
 8002bdc:	e7e3      	b.n	8002ba6 <__aeabi_f2d+0x5e>
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	800fffff 	.word	0x800fffff
 8002be4:	00000389 	.word	0x00000389
 8002be8:	000007ff 	.word	0x000007ff

08002bec <__aeabi_d2f>:
 8002bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bee:	004c      	lsls	r4, r1, #1
 8002bf0:	0d64      	lsrs	r4, r4, #21
 8002bf2:	030b      	lsls	r3, r1, #12
 8002bf4:	1c62      	adds	r2, r4, #1
 8002bf6:	0a5b      	lsrs	r3, r3, #9
 8002bf8:	0f46      	lsrs	r6, r0, #29
 8002bfa:	0552      	lsls	r2, r2, #21
 8002bfc:	0fc9      	lsrs	r1, r1, #31
 8002bfe:	431e      	orrs	r6, r3
 8002c00:	00c5      	lsls	r5, r0, #3
 8002c02:	0d52      	lsrs	r2, r2, #21
 8002c04:	2a01      	cmp	r2, #1
 8002c06:	dd29      	ble.n	8002c5c <__aeabi_d2f+0x70>
 8002c08:	4b37      	ldr	r3, [pc, #220]	; (8002ce8 <__aeabi_d2f+0xfc>)
 8002c0a:	18e7      	adds	r7, r4, r3
 8002c0c:	2ffe      	cmp	r7, #254	; 0xfe
 8002c0e:	dc1c      	bgt.n	8002c4a <__aeabi_d2f+0x5e>
 8002c10:	2f00      	cmp	r7, #0
 8002c12:	dd3b      	ble.n	8002c8c <__aeabi_d2f+0xa0>
 8002c14:	0180      	lsls	r0, r0, #6
 8002c16:	1e43      	subs	r3, r0, #1
 8002c18:	4198      	sbcs	r0, r3
 8002c1a:	2207      	movs	r2, #7
 8002c1c:	00f3      	lsls	r3, r6, #3
 8002c1e:	0f6d      	lsrs	r5, r5, #29
 8002c20:	4303      	orrs	r3, r0
 8002c22:	432b      	orrs	r3, r5
 8002c24:	401a      	ands	r2, r3
 8002c26:	2a00      	cmp	r2, #0
 8002c28:	d004      	beq.n	8002c34 <__aeabi_d2f+0x48>
 8002c2a:	220f      	movs	r2, #15
 8002c2c:	401a      	ands	r2, r3
 8002c2e:	2a04      	cmp	r2, #4
 8002c30:	d000      	beq.n	8002c34 <__aeabi_d2f+0x48>
 8002c32:	3304      	adds	r3, #4
 8002c34:	2280      	movs	r2, #128	; 0x80
 8002c36:	04d2      	lsls	r2, r2, #19
 8002c38:	401a      	ands	r2, r3
 8002c3a:	d024      	beq.n	8002c86 <__aeabi_d2f+0x9a>
 8002c3c:	3701      	adds	r7, #1
 8002c3e:	b2fa      	uxtb	r2, r7
 8002c40:	2fff      	cmp	r7, #255	; 0xff
 8002c42:	d002      	beq.n	8002c4a <__aeabi_d2f+0x5e>
 8002c44:	019b      	lsls	r3, r3, #6
 8002c46:	0a58      	lsrs	r0, r3, #9
 8002c48:	e001      	b.n	8002c4e <__aeabi_d2f+0x62>
 8002c4a:	22ff      	movs	r2, #255	; 0xff
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	0240      	lsls	r0, r0, #9
 8002c50:	05d2      	lsls	r2, r2, #23
 8002c52:	0a40      	lsrs	r0, r0, #9
 8002c54:	07c9      	lsls	r1, r1, #31
 8002c56:	4310      	orrs	r0, r2
 8002c58:	4308      	orrs	r0, r1
 8002c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c5c:	4335      	orrs	r5, r6
 8002c5e:	2c00      	cmp	r4, #0
 8002c60:	d104      	bne.n	8002c6c <__aeabi_d2f+0x80>
 8002c62:	2d00      	cmp	r5, #0
 8002c64:	d10a      	bne.n	8002c7c <__aeabi_d2f+0x90>
 8002c66:	2200      	movs	r2, #0
 8002c68:	2000      	movs	r0, #0
 8002c6a:	e7f0      	b.n	8002c4e <__aeabi_d2f+0x62>
 8002c6c:	2d00      	cmp	r5, #0
 8002c6e:	d0ec      	beq.n	8002c4a <__aeabi_d2f+0x5e>
 8002c70:	2080      	movs	r0, #128	; 0x80
 8002c72:	03c0      	lsls	r0, r0, #15
 8002c74:	4330      	orrs	r0, r6
 8002c76:	22ff      	movs	r2, #255	; 0xff
 8002c78:	e7e9      	b.n	8002c4e <__aeabi_d2f+0x62>
 8002c7a:	2400      	movs	r4, #0
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	025b      	lsls	r3, r3, #9
 8002c80:	0a58      	lsrs	r0, r3, #9
 8002c82:	b2e2      	uxtb	r2, r4
 8002c84:	e7e3      	b.n	8002c4e <__aeabi_d2f+0x62>
 8002c86:	08db      	lsrs	r3, r3, #3
 8002c88:	003c      	movs	r4, r7
 8002c8a:	e7f8      	b.n	8002c7e <__aeabi_d2f+0x92>
 8002c8c:	003b      	movs	r3, r7
 8002c8e:	3317      	adds	r3, #23
 8002c90:	dbf3      	blt.n	8002c7a <__aeabi_d2f+0x8e>
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	041b      	lsls	r3, r3, #16
 8002c96:	4333      	orrs	r3, r6
 8002c98:	261e      	movs	r6, #30
 8002c9a:	1bf6      	subs	r6, r6, r7
 8002c9c:	2e1f      	cmp	r6, #31
 8002c9e:	dd14      	ble.n	8002cca <__aeabi_d2f+0xde>
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	4252      	negs	r2, r2
 8002ca4:	1bd7      	subs	r7, r2, r7
 8002ca6:	001a      	movs	r2, r3
 8002ca8:	40fa      	lsrs	r2, r7
 8002caa:	0017      	movs	r7, r2
 8002cac:	2e20      	cmp	r6, #32
 8002cae:	d004      	beq.n	8002cba <__aeabi_d2f+0xce>
 8002cb0:	4a0e      	ldr	r2, [pc, #56]	; (8002cec <__aeabi_d2f+0x100>)
 8002cb2:	4694      	mov	ip, r2
 8002cb4:	4464      	add	r4, ip
 8002cb6:	40a3      	lsls	r3, r4
 8002cb8:	431d      	orrs	r5, r3
 8002cba:	002b      	movs	r3, r5
 8002cbc:	1e5d      	subs	r5, r3, #1
 8002cbe:	41ab      	sbcs	r3, r5
 8002cc0:	2207      	movs	r2, #7
 8002cc2:	433b      	orrs	r3, r7
 8002cc4:	401a      	ands	r2, r3
 8002cc6:	2700      	movs	r7, #0
 8002cc8:	e7ad      	b.n	8002c26 <__aeabi_d2f+0x3a>
 8002cca:	4a09      	ldr	r2, [pc, #36]	; (8002cf0 <__aeabi_d2f+0x104>)
 8002ccc:	0028      	movs	r0, r5
 8002cce:	18a2      	adds	r2, r4, r2
 8002cd0:	4095      	lsls	r5, r2
 8002cd2:	4093      	lsls	r3, r2
 8002cd4:	1e6c      	subs	r4, r5, #1
 8002cd6:	41a5      	sbcs	r5, r4
 8002cd8:	40f0      	lsrs	r0, r6
 8002cda:	2207      	movs	r2, #7
 8002cdc:	432b      	orrs	r3, r5
 8002cde:	4303      	orrs	r3, r0
 8002ce0:	401a      	ands	r2, r3
 8002ce2:	2700      	movs	r7, #0
 8002ce4:	e79f      	b.n	8002c26 <__aeabi_d2f+0x3a>
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	fffffc80 	.word	0xfffffc80
 8002cec:	fffffca2 	.word	0xfffffca2
 8002cf0:	fffffc82 	.word	0xfffffc82

08002cf4 <__clzsi2>:
 8002cf4:	211c      	movs	r1, #28
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	041b      	lsls	r3, r3, #16
 8002cfa:	4298      	cmp	r0, r3
 8002cfc:	d301      	bcc.n	8002d02 <__clzsi2+0xe>
 8002cfe:	0c00      	lsrs	r0, r0, #16
 8002d00:	3910      	subs	r1, #16
 8002d02:	0a1b      	lsrs	r3, r3, #8
 8002d04:	4298      	cmp	r0, r3
 8002d06:	d301      	bcc.n	8002d0c <__clzsi2+0x18>
 8002d08:	0a00      	lsrs	r0, r0, #8
 8002d0a:	3908      	subs	r1, #8
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	4298      	cmp	r0, r3
 8002d10:	d301      	bcc.n	8002d16 <__clzsi2+0x22>
 8002d12:	0900      	lsrs	r0, r0, #4
 8002d14:	3904      	subs	r1, #4
 8002d16:	a202      	add	r2, pc, #8	; (adr r2, 8002d20 <__clzsi2+0x2c>)
 8002d18:	5c10      	ldrb	r0, [r2, r0]
 8002d1a:	1840      	adds	r0, r0, r1
 8002d1c:	4770      	bx	lr
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	02020304 	.word	0x02020304
 8002d24:	01010101 	.word	0x01010101
	...

08002d30 <__clzdi2>:
 8002d30:	b510      	push	{r4, lr}
 8002d32:	2900      	cmp	r1, #0
 8002d34:	d103      	bne.n	8002d3e <__clzdi2+0xe>
 8002d36:	f7ff ffdd 	bl	8002cf4 <__clzsi2>
 8002d3a:	3020      	adds	r0, #32
 8002d3c:	e002      	b.n	8002d44 <__clzdi2+0x14>
 8002d3e:	1c08      	adds	r0, r1, #0
 8002d40:	f7ff ffd8 	bl	8002cf4 <__clzsi2>
 8002d44:	bd10      	pop	{r4, pc}
 8002d46:	46c0      	nop			; (mov r8, r8)

08002d48 <max31856_select>:
/*============================================================================*/
/* Implementation of functions                                                */
/*============================================================================*/

void max31856_select(tMAX31856 *tc)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
	tc->CS_Port->BRR = tc->CS_Pin;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6852      	ldr	r2, [r2, #4]
 8002d58:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b002      	add	sp, #8
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <max31856_deselect>:

/*****************************************************************************/
void max31856_deselect(tMAX31856 *tc)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
	tc->CS_Port->BSRR = tc->CS_Pin;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6852      	ldr	r2, [r2, #4]
 8002d72:	619a      	str	r2, [r3, #24]
}
 8002d74:	46c0      	nop			; (mov r8, r8)
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b002      	add	sp, #8
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <max31856_wr_reg>:
 * @param reg		register address offset
 * @param value		value to be written
 * @param length	length of transmitted data
 */
void max31856_wr_reg(tMAX31856 *ch, uint8_t reg, uint8_t *value, uint8_t length)
{
 8002d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d7e:	b08b      	sub	sp, #44	; 0x2c
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	0008      	movs	r0, r1
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	0019      	movs	r1, r3
 8002d8a:	250b      	movs	r5, #11
 8002d8c:	197b      	adds	r3, r7, r5
 8002d8e:	1c02      	adds	r2, r0, #0
 8002d90:	701a      	strb	r2, [r3, #0]
 8002d92:	240a      	movs	r4, #10
 8002d94:	193b      	adds	r3, r7, r4
 8002d96:	1c0a      	adds	r2, r1, #0
 8002d98:	701a      	strb	r2, [r3, #0]
	uint8_t txData;
	uint8_t buffer[16];

	memcpy(buffer,value,length);
 8002d9a:	193b      	adds	r3, r7, r4
 8002d9c:	781a      	ldrb	r2, [r3, #0]
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	2614      	movs	r6, #20
 8002da2:	19bb      	adds	r3, r7, r6
 8002da4:	0018      	movs	r0, r3
 8002da6:	f007 f87c 	bl	8009ea2 <memcpy>

	txData = reg + MAX31856_WR_REG;
 8002daa:	197b      	adds	r3, r7, r5
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	3b80      	subs	r3, #128	; 0x80
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	2527      	movs	r5, #39	; 0x27
 8002db4:	197b      	adds	r3, r7, r5
 8002db6:	701a      	strb	r2, [r3, #0]

	max31856_select(ch);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f7ff ffc4 	bl	8002d48 <max31856_select>
	HAL_SPI_Transmit(&hspi2,&txData,1,1000);
 8002dc0:	23fa      	movs	r3, #250	; 0xfa
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	1979      	adds	r1, r7, r5
 8002dc6:	480a      	ldr	r0, [pc, #40]	; (8002df0 <max31856_wr_reg+0x74>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f004 fa8f 	bl	80072ec <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,buffer,length,1000);
 8002dce:	193b      	adds	r3, r7, r4
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	23fa      	movs	r3, #250	; 0xfa
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	19b9      	adds	r1, r7, r6
 8002dda:	4805      	ldr	r0, [pc, #20]	; (8002df0 <max31856_wr_reg+0x74>)
 8002ddc:	f004 fa86 	bl	80072ec <HAL_SPI_Transmit>
	max31856_deselect(ch);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	0018      	movs	r0, r3
 8002de4:	f7ff ffbd 	bl	8002d62 <max31856_deselect>
}
 8002de8:	46c0      	nop			; (mov r8, r8)
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b00b      	add	sp, #44	; 0x2c
 8002dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002df0:	20000bf8 	.word	0x20000bf8

08002df4 <max31856_rd_reg>:
 * @param reg		register address offset
 * @param value		pointer tot value to be read
 * @param length	length of received data
 */
void max31856_rd_reg(tMAX31856 *ch, uint8_t reg, uint8_t *value, uint8_t length)
{
 8002df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002df6:	b08f      	sub	sp, #60	; 0x3c
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	0008      	movs	r0, r1
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	0019      	movs	r1, r3
 8002e02:	230b      	movs	r3, #11
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	1c02      	adds	r2, r0, #0
 8002e08:	701a      	strb	r2, [r3, #0]
 8002e0a:	240a      	movs	r4, #10
 8002e0c:	193b      	adds	r3, r7, r4
 8002e0e:	1c0a      	adds	r2, r1, #0
 8002e10:	701a      	strb	r2, [r3, #0]
	uint8_t txData[16];
	uint8_t rxData[17];


	memset(rxData,0,16);
 8002e12:	2514      	movs	r5, #20
 8002e14:	197b      	adds	r3, r7, r5
 8002e16:	2210      	movs	r2, #16
 8002e18:	2100      	movs	r1, #0
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f007 f84a 	bl	8009eb4 <memset>
	memset(txData,0,16);
 8002e20:	2628      	movs	r6, #40	; 0x28
 8002e22:	19bb      	adds	r3, r7, r6
 8002e24:	2210      	movs	r2, #16
 8002e26:	2100      	movs	r1, #0
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f007 f843 	bl	8009eb4 <memset>

	txData[0] = reg;
 8002e2e:	19bb      	adds	r3, r7, r6
 8002e30:	220b      	movs	r2, #11
 8002e32:	18ba      	adds	r2, r7, r2
 8002e34:	7812      	ldrb	r2, [r2, #0]
 8002e36:	701a      	strb	r2, [r3, #0]

	max31856_select(ch);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f7ff ff84 	bl	8002d48 <max31856_select>
	//HAL_SPI_TransmitReceive(&hspi2,txData,rxData,length+1,1000);
	HAL_SPI_Transmit(&hspi2,txData,1,1000);
 8002e40:	23fa      	movs	r3, #250	; 0xfa
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	19b9      	adds	r1, r7, r6
 8002e46:	480e      	ldr	r0, [pc, #56]	; (8002e80 <max31856_rd_reg+0x8c>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f004 fa4f 	bl	80072ec <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,rxData,length,1000);
 8002e4e:	193b      	adds	r3, r7, r4
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	23fa      	movs	r3, #250	; 0xfa
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	1979      	adds	r1, r7, r5
 8002e5a:	4809      	ldr	r0, [pc, #36]	; (8002e80 <max31856_rd_reg+0x8c>)
 8002e5c:	f004 fb9c 	bl	8007598 <HAL_SPI_Receive>
	max31856_deselect(ch);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	0018      	movs	r0, r3
 8002e64:	f7ff ff7d 	bl	8002d62 <max31856_deselect>

	memcpy(value,rxData,length);
 8002e68:	193b      	adds	r3, r7, r4
 8002e6a:	781a      	ldrb	r2, [r3, #0]
 8002e6c:	1979      	adds	r1, r7, r5
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	0018      	movs	r0, r3
 8002e72:	f007 f816 	bl	8009ea2 <memcpy>
}
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b00f      	add	sp, #60	; 0x3c
 8002e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	20000bf8 	.word	0x20000bf8

08002e84 <max31856_read_raw_buffered>:
	max31856_rd_reg(&tc[ch],MAX31856_LTCBH,raw,4);
}

/*****************************************************************************/
void max31856_read_raw_buffered(uint32_t ch,uint8_t *raw)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
	memcpy(raw,&gMAX31856_buffer[ch*MAX31856_READ_SIZE],MAX31856_READ_SIZE);
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	0013      	movs	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	189b      	adds	r3, r3, r2
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	001a      	movs	r2, r3
 8002e9a:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <max31856_read_raw_buffered+0x2c>)
 8002e9c:	18d1      	adds	r1, r2, r3
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2206      	movs	r2, #6
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f006 fffd 	bl	8009ea2 <memcpy>
}
 8002ea8:	46c0      	nop			; (mov r8, r8)
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b002      	add	sp, #8
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	20000678 	.word	0x20000678

08002eb4 <sampleExtCj>:
 * @brief Read sample data from external cold junction STS31 thermal sensor
 * @param ch	Channel number
 * @param mux_ch	mux_ch or not
 */
void sampleExtCj(int ch, int mux_ch)
{
 8002eb4:	b5b0      	push	{r4, r5, r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
	static uint32_t extcjCounter=0;

	float extTemp;
	if (extcjCounter == 0)
 8002ebe:	4b4a      	ldr	r3, [pc, #296]	; (8002fe8 <sampleExtCj+0x134>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d000      	beq.n	8002ec8 <sampleExtCj+0x14>
 8002ec6:	e07e      	b.n	8002fc6 <sampleExtCj+0x112>
	{

		if (EXTCJ_ReadTemperature(&extTemp) == 0)
 8002ec8:	2308      	movs	r3, #8
 8002eca:	18fb      	adds	r3, r7, r3
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f001 fa93 	bl	80043f8 <EXTCJ_ReadTemperature>
 8002ed2:	1e03      	subs	r3, r0, #0
 8002ed4:	d171      	bne.n	8002fba <sampleExtCj+0x106>
		{
			if (fabs(extTempf[ch] - extTemp) > 0.3)
 8002ed6:	4b45      	ldr	r3, [pc, #276]	; (8002fec <sampleExtCj+0x138>)
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	0092      	lsls	r2, r2, #2
 8002edc:	58d3      	ldr	r3, [r2, r3]
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	1c11      	adds	r1, r2, #0
 8002ee2:	1c18      	adds	r0, r3, #0
 8002ee4:	f7fd fe44 	bl	8000b70 <__aeabi_fsub>
 8002ee8:	1c03      	adds	r3, r0, #0
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	085b      	lsrs	r3, r3, #1
 8002eee:	1c18      	adds	r0, r3, #0
 8002ef0:	f7ff fe2a 	bl	8002b48 <__aeabi_f2d>
 8002ef4:	4a3e      	ldr	r2, [pc, #248]	; (8002ff0 <sampleExtCj+0x13c>)
 8002ef6:	4b3f      	ldr	r3, [pc, #252]	; (8002ff4 <sampleExtCj+0x140>)
 8002ef8:	f7fd fab8 	bl	800046c <__aeabi_dcmpgt>
 8002efc:	1e03      	subs	r3, r0, #0
 8002efe:	d005      	beq.n	8002f0c <sampleExtCj+0x58>
				extTempf[ch] = extTemp;
 8002f00:	68b9      	ldr	r1, [r7, #8]
 8002f02:	4b3a      	ldr	r3, [pc, #232]	; (8002fec <sampleExtCj+0x138>)
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	0092      	lsls	r2, r2, #2
 8002f08:	50d1      	str	r1, [r2, r3]
 8002f0a:	e027      	b.n	8002f5c <sampleExtCj+0xa8>
			else
				extTempf[ch] = extTempf[ch] * 0.99 +  extTemp *0.01;
 8002f0c:	4b37      	ldr	r3, [pc, #220]	; (8002fec <sampleExtCj+0x138>)
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	0092      	lsls	r2, r2, #2
 8002f12:	58d3      	ldr	r3, [r2, r3]
 8002f14:	1c18      	adds	r0, r3, #0
 8002f16:	f7ff fe17 	bl	8002b48 <__aeabi_f2d>
 8002f1a:	4a37      	ldr	r2, [pc, #220]	; (8002ff8 <sampleExtCj+0x144>)
 8002f1c:	4b37      	ldr	r3, [pc, #220]	; (8002ffc <sampleExtCj+0x148>)
 8002f1e:	f7fe ff9b 	bl	8001e58 <__aeabi_dmul>
 8002f22:	0003      	movs	r3, r0
 8002f24:	000c      	movs	r4, r1
 8002f26:	0025      	movs	r5, r4
 8002f28:	001c      	movs	r4, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	1c18      	adds	r0, r3, #0
 8002f2e:	f7ff fe0b 	bl	8002b48 <__aeabi_f2d>
 8002f32:	4a33      	ldr	r2, [pc, #204]	; (8003000 <sampleExtCj+0x14c>)
 8002f34:	4b33      	ldr	r3, [pc, #204]	; (8003004 <sampleExtCj+0x150>)
 8002f36:	f7fe ff8f 	bl	8001e58 <__aeabi_dmul>
 8002f3a:	0002      	movs	r2, r0
 8002f3c:	000b      	movs	r3, r1
 8002f3e:	0020      	movs	r0, r4
 8002f40:	0029      	movs	r1, r5
 8002f42:	f7fe f863 	bl	800100c <__aeabi_dadd>
 8002f46:	0003      	movs	r3, r0
 8002f48:	000c      	movs	r4, r1
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	0021      	movs	r1, r4
 8002f4e:	f7ff fe4d 	bl	8002bec <__aeabi_d2f>
 8002f52:	1c01      	adds	r1, r0, #0
 8002f54:	4b25      	ldr	r3, [pc, #148]	; (8002fec <sampleExtCj+0x138>)
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	0092      	lsls	r2, r2, #2
 8002f5a:	50d1      	str	r1, [r2, r3]

			int16_t max31CJ = 0;
 8002f5c:	250e      	movs	r5, #14
 8002f5e:	197b      	adds	r3, r7, r5
 8002f60:	2200      	movs	r2, #0
 8002f62:	801a      	strh	r2, [r3, #0]

			max31CJ = (extTempf[ch]-extColdJOffset[ch]) / 0.00390625;
 8002f64:	4b21      	ldr	r3, [pc, #132]	; (8002fec <sampleExtCj+0x138>)
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	0092      	lsls	r2, r2, #2
 8002f6a:	58d0      	ldr	r0, [r2, r3]
 8002f6c:	4b26      	ldr	r3, [pc, #152]	; (8003008 <sampleExtCj+0x154>)
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	0092      	lsls	r2, r2, #2
 8002f72:	58d3      	ldr	r3, [r2, r3]
 8002f74:	1c19      	adds	r1, r3, #0
 8002f76:	f7fd fdfb 	bl	8000b70 <__aeabi_fsub>
 8002f7a:	1c03      	adds	r3, r0, #0
 8002f7c:	1c18      	adds	r0, r3, #0
 8002f7e:	f7ff fde3 	bl	8002b48 <__aeabi_f2d>
 8002f82:	2200      	movs	r2, #0
 8002f84:	4b21      	ldr	r3, [pc, #132]	; (800300c <sampleExtCj+0x158>)
 8002f86:	f7fe fb5d 	bl	8001644 <__aeabi_ddiv>
 8002f8a:	0003      	movs	r3, r0
 8002f8c:	000c      	movs	r4, r1
 8002f8e:	001a      	movs	r2, r3
 8002f90:	0023      	movs	r3, r4
 8002f92:	197c      	adds	r4, r7, r5
 8002f94:	0010      	movs	r0, r2
 8002f96:	0019      	movs	r1, r3
 8002f98:	f7ff fd34 	bl	8002a04 <__aeabi_d2iz>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	8023      	strh	r3, [r4, #0]


			extCJTemp[0] = (max31CJ & 0xFF00)>>8;
 8002fa0:	197b      	adds	r3, r7, r5
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	5e9b      	ldrsh	r3, [r3, r2]
 8002fa6:	121b      	asrs	r3, r3, #8
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	4b19      	ldr	r3, [pc, #100]	; (8003010 <sampleExtCj+0x15c>)
 8002fac:	701a      	strb	r2, [r3, #0]
			extCJTemp[1] = (max31CJ & 0xFF);
 8002fae:	197b      	adds	r3, r7, r5
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	4b16      	ldr	r3, [pc, #88]	; (8003010 <sampleExtCj+0x15c>)
 8002fb6:	705a      	strb	r2, [r3, #1]
	{
		extcjCounter++;
	}
	//dbg_printf("ch : %d - Ext CJ : %f\r\n", ch, extTemp);

}
 8002fb8:	e012      	b.n	8002fe0 <sampleExtCj+0x12c>
			extCjErrCount++;
 8002fba:	4b16      	ldr	r3, [pc, #88]	; (8003014 <sampleExtCj+0x160>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	4b14      	ldr	r3, [pc, #80]	; (8003014 <sampleExtCj+0x160>)
 8002fc2:	601a      	str	r2, [r3, #0]
}
 8002fc4:	e00c      	b.n	8002fe0 <sampleExtCj+0x12c>
	else if (extcjCounter > 250)
 8002fc6:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <sampleExtCj+0x134>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2bfa      	cmp	r3, #250	; 0xfa
 8002fcc:	d903      	bls.n	8002fd6 <sampleExtCj+0x122>
		extcjCounter=0;
 8002fce:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <sampleExtCj+0x134>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
}
 8002fd4:	e004      	b.n	8002fe0 <sampleExtCj+0x12c>
		extcjCounter++;
 8002fd6:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <sampleExtCj+0x134>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	4b02      	ldr	r3, [pc, #8]	; (8002fe8 <sampleExtCj+0x134>)
 8002fde:	601a      	str	r2, [r3, #0]
}
 8002fe0:	46c0      	nop			; (mov r8, r8)
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b004      	add	sp, #16
 8002fe6:	bdb0      	pop	{r4, r5, r7, pc}
 8002fe8:	2000025c 	.word	0x2000025c
 8002fec:	20000690 	.word	0x20000690
 8002ff0:	33333333 	.word	0x33333333
 8002ff4:	3fd33333 	.word	0x3fd33333
 8002ff8:	7ae147ae 	.word	0x7ae147ae
 8002ffc:	3fefae14 	.word	0x3fefae14
 8003000:	47ae147b 	.word	0x47ae147b
 8003004:	3f847ae1 	.word	0x3f847ae1
 8003008:	20000730 	.word	0x20000730
 800300c:	3f700000 	.word	0x3f700000
 8003010:	20000698 	.word	0x20000698
 8003014:	20000258 	.word	0x20000258

08003018 <max31856_nonmuxed_sample>:
/**
 * @brief Read Thermocouple sensor value. Function is generated for non-muxed thermocouple
 * boards.
 */
void max31856_nonmuxed_sample()
{
 8003018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800301a:	b089      	sub	sp, #36	; 0x24
 800301c:	af02      	add	r7, sp, #8
	int32_t temp;
	double tempf = 0;
 800301e:	2300      	movs	r3, #0
 8003020:	2400      	movs	r4, #0
 8003022:	60bb      	str	r3, [r7, #8]
 8003024:	60fc      	str	r4, [r7, #12]
	static uint8_t ch;
	static uint8_t counter;

	if (counter % 4)
 8003026:	4bc3      	ldr	r3, [pc, #780]	; (8003334 <max31856_nonmuxed_sample+0x31c>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2203      	movs	r2, #3
 800302c:	4013      	ands	r3, r2
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d006      	beq.n	8003042 <max31856_nonmuxed_sample+0x2a>
		counter ++;
 8003034:	4bbf      	ldr	r3, [pc, #764]	; (8003334 <max31856_nonmuxed_sample+0x31c>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	3301      	adds	r3, #1
 800303a:	b2da      	uxtb	r2, r3
 800303c:	4bbd      	ldr	r3, [pc, #756]	; (8003334 <max31856_nonmuxed_sample+0x31c>)
 800303e:	701a      	strb	r2, [r3, #0]
		}

		counter = 0;
	}

}
 8003040:	e174      	b.n	800332c <max31856_nonmuxed_sample+0x314>
		if (gExtCjEnabled)
 8003042:	4bbd      	ldr	r3, [pc, #756]	; (8003338 <max31856_nonmuxed_sample+0x320>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <max31856_nonmuxed_sample+0x3e>
			sampleExtCj(ch, 0);
 800304a:	4bbc      	ldr	r3, [pc, #752]	; (800333c <max31856_nonmuxed_sample+0x324>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2100      	movs	r1, #0
 8003050:	0018      	movs	r0, r3
 8003052:	f7ff ff2f 	bl	8002eb4 <sampleExtCj>
		if (gExtCjEnabled)
 8003056:	4bb8      	ldr	r3, [pc, #736]	; (8003338 <max31856_nonmuxed_sample+0x320>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00d      	beq.n	800307a <max31856_nonmuxed_sample+0x62>
			max31856_wr_reg(&tc[ch],MAX31856_CJTH,&extCJTemp[0],2);
 800305e:	4bb7      	ldr	r3, [pc, #732]	; (800333c <max31856_nonmuxed_sample+0x324>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	001a      	movs	r2, r3
 8003064:	0013      	movs	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	189b      	adds	r3, r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4ab4      	ldr	r2, [pc, #720]	; (8003340 <max31856_nonmuxed_sample+0x328>)
 800306e:	1898      	adds	r0, r3, r2
 8003070:	4ab4      	ldr	r2, [pc, #720]	; (8003344 <max31856_nonmuxed_sample+0x32c>)
 8003072:	2302      	movs	r3, #2
 8003074:	210a      	movs	r1, #10
 8003076:	f7ff fe81 	bl	8002d7c <max31856_wr_reg>
		HAL_Delay(100);
 800307a:	2064      	movs	r0, #100	; 0x64
 800307c:	f002 f9a2 	bl	80053c4 <HAL_Delay>
		max31856_rd_reg(&tc[ch],MAX31856_READ_START,&tempData[ch][0],MAX31856_READ_SIZE);
 8003080:	4bae      	ldr	r3, [pc, #696]	; (800333c <max31856_nonmuxed_sample+0x324>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	001a      	movs	r2, r3
 8003086:	0013      	movs	r3, r2
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	189b      	adds	r3, r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4aac      	ldr	r2, [pc, #688]	; (8003340 <max31856_nonmuxed_sample+0x328>)
 8003090:	1898      	adds	r0, r3, r2
 8003092:	4baa      	ldr	r3, [pc, #680]	; (800333c <max31856_nonmuxed_sample+0x324>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	001a      	movs	r2, r3
 8003098:	0013      	movs	r3, r2
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	189b      	adds	r3, r3, r2
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	4aa9      	ldr	r2, [pc, #676]	; (8003348 <max31856_nonmuxed_sample+0x330>)
 80030a2:	189a      	adds	r2, r3, r2
 80030a4:	2306      	movs	r3, #6
 80030a6:	210a      	movs	r1, #10
 80030a8:	f7ff fea4 	bl	8002df4 <max31856_rd_reg>
			temp =  (int32_t)tempData[ch][2] << 16;
 80030ac:	4ba3      	ldr	r3, [pc, #652]	; (800333c <max31856_nonmuxed_sample+0x324>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	0019      	movs	r1, r3
 80030b2:	4aa5      	ldr	r2, [pc, #660]	; (8003348 <max31856_nonmuxed_sample+0x330>)
 80030b4:	000b      	movs	r3, r1
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	185b      	adds	r3, r3, r1
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	18d3      	adds	r3, r2, r3
 80030be:	3302      	adds	r3, #2
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	041b      	lsls	r3, r3, #16
 80030c4:	617b      	str	r3, [r7, #20]
			temp |= (int32_t)tempData[ch][3] << 8;
 80030c6:	4b9d      	ldr	r3, [pc, #628]	; (800333c <max31856_nonmuxed_sample+0x324>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	0019      	movs	r1, r3
 80030cc:	4a9e      	ldr	r2, [pc, #632]	; (8003348 <max31856_nonmuxed_sample+0x330>)
 80030ce:	000b      	movs	r3, r1
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	185b      	adds	r3, r3, r1
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	18d3      	adds	r3, r2, r3
 80030d8:	3303      	adds	r3, #3
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	021b      	lsls	r3, r3, #8
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	617b      	str	r3, [r7, #20]
			temp |= (int32_t)tempData[ch][4];
 80030e4:	4b95      	ldr	r3, [pc, #596]	; (800333c <max31856_nonmuxed_sample+0x324>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	0019      	movs	r1, r3
 80030ea:	4a97      	ldr	r2, [pc, #604]	; (8003348 <max31856_nonmuxed_sample+0x330>)
 80030ec:	000b      	movs	r3, r1
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	185b      	adds	r3, r3, r1
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	18d3      	adds	r3, r2, r3
 80030f6:	3304      	adds	r3, #4
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	001a      	movs	r2, r3
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	4313      	orrs	r3, r2
 8003100:	617b      	str	r3, [r7, #20]
			if (temp & 0x00800000)
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	041b      	lsls	r3, r3, #16
 8003108:	4013      	ands	r3, r2
 800310a:	d004      	beq.n	8003116 <max31856_nonmuxed_sample+0xfe>
				temp |= 0xFF000000;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	22ff      	movs	r2, #255	; 0xff
 8003110:	0612      	lsls	r2, r2, #24
 8003112:	4313      	orrs	r3, r2
 8003114:	617b      	str	r3, [r7, #20]
			temp = temp >> 5;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	115b      	asrs	r3, r3, #5
 800311a:	617b      	str	r3, [r7, #20]
			tempf = (float) temp * 0.0078125f;
 800311c:	6978      	ldr	r0, [r7, #20]
 800311e:	f7fd feeb 	bl	8000ef8 <__aeabi_i2f>
 8003122:	1c03      	adds	r3, r0, #0
 8003124:	21f0      	movs	r1, #240	; 0xf0
 8003126:	0589      	lsls	r1, r1, #22
 8003128:	1c18      	adds	r0, r3, #0
 800312a:	f7fd fbef 	bl	800090c <__aeabi_fmul>
 800312e:	1c03      	adds	r3, r0, #0
 8003130:	1c18      	adds	r0, r3, #0
 8003132:	f7ff fd09 	bl	8002b48 <__aeabi_f2d>
 8003136:	0003      	movs	r3, r0
 8003138:	000c      	movs	r4, r1
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	60fc      	str	r4, [r7, #12]
			if (fabs(tempf - tempSkip[ch]) > 25)
 800313e:	4b7f      	ldr	r3, [pc, #508]	; (800333c <max31856_nonmuxed_sample+0x324>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	4a82      	ldr	r2, [pc, #520]	; (800334c <max31856_nonmuxed_sample+0x334>)
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	18d3      	adds	r3, r2, r3
 8003148:	685c      	ldr	r4, [r3, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	001a      	movs	r2, r3
 800314e:	0023      	movs	r3, r4
 8003150:	68b8      	ldr	r0, [r7, #8]
 8003152:	68f9      	ldr	r1, [r7, #12]
 8003154:	f7ff f8f2 	bl	800233c <__aeabi_dsub>
 8003158:	0003      	movs	r3, r0
 800315a:	000c      	movs	r4, r1
 800315c:	001a      	movs	r2, r3
 800315e:	603a      	str	r2, [r7, #0]
 8003160:	0063      	lsls	r3, r4, #1
 8003162:	085b      	lsrs	r3, r3, #1
 8003164:	607b      	str	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	4b79      	ldr	r3, [pc, #484]	; (8003350 <max31856_nonmuxed_sample+0x338>)
 800316a:	6838      	ldr	r0, [r7, #0]
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	f7fd f97d 	bl	800046c <__aeabi_dcmpgt>
 8003172:	1e03      	subs	r3, r0, #0
 8003174:	d008      	beq.n	8003188 <max31856_nonmuxed_sample+0x170>
				tempSkip[ch] = tempf;
 8003176:	4b71      	ldr	r3, [pc, #452]	; (800333c <max31856_nonmuxed_sample+0x324>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	4a74      	ldr	r2, [pc, #464]	; (800334c <max31856_nonmuxed_sample+0x334>)
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	18d2      	adds	r2, r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	68fc      	ldr	r4, [r7, #12]
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	6054      	str	r4, [r2, #4]
			if (fabs(filterData[ch]-tempf) > 0.3f)
 8003188:	4b6c      	ldr	r3, [pc, #432]	; (800333c <max31856_nonmuxed_sample+0x324>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	4a71      	ldr	r2, [pc, #452]	; (8003354 <max31856_nonmuxed_sample+0x33c>)
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	18d3      	adds	r3, r2, r3
 8003192:	6818      	ldr	r0, [r3, #0]
 8003194:	6859      	ldr	r1, [r3, #4]
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f7ff f8cf 	bl	800233c <__aeabi_dsub>
 800319e:	0003      	movs	r3, r0
 80031a0:	000c      	movs	r4, r1
 80031a2:	001a      	movs	r2, r3
 80031a4:	0015      	movs	r5, r2
 80031a6:	0063      	lsls	r3, r4, #1
 80031a8:	085e      	lsrs	r6, r3, #1
 80031aa:	2280      	movs	r2, #128	; 0x80
 80031ac:	05d2      	lsls	r2, r2, #23
 80031ae:	4b6a      	ldr	r3, [pc, #424]	; (8003358 <max31856_nonmuxed_sample+0x340>)
 80031b0:	0028      	movs	r0, r5
 80031b2:	0031      	movs	r1, r6
 80031b4:	f7fd f95a 	bl	800046c <__aeabi_dcmpgt>
 80031b8:	1e03      	subs	r3, r0, #0
 80031ba:	d009      	beq.n	80031d0 <max31856_nonmuxed_sample+0x1b8>
				filterData[ch] = tempf;
 80031bc:	4b5f      	ldr	r3, [pc, #380]	; (800333c <max31856_nonmuxed_sample+0x324>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	4a64      	ldr	r2, [pc, #400]	; (8003354 <max31856_nonmuxed_sample+0x33c>)
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	18d2      	adds	r2, r2, r3
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	68fc      	ldr	r4, [r7, #12]
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	6054      	str	r4, [r2, #4]
 80031ce:	e02a      	b.n	8003226 <max31856_nonmuxed_sample+0x20e>
				filterData[ch] = filterData[ch]*0.998f + ((double)tempf)*0.002f;
 80031d0:	4b5a      	ldr	r3, [pc, #360]	; (800333c <max31856_nonmuxed_sample+0x324>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	4a5f      	ldr	r2, [pc, #380]	; (8003354 <max31856_nonmuxed_sample+0x33c>)
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	18d3      	adds	r3, r2, r3
 80031da:	6818      	ldr	r0, [r3, #0]
 80031dc:	6859      	ldr	r1, [r3, #4]
 80031de:	22c0      	movs	r2, #192	; 0xc0
 80031e0:	0612      	lsls	r2, r2, #24
 80031e2:	4b5e      	ldr	r3, [pc, #376]	; (800335c <max31856_nonmuxed_sample+0x344>)
 80031e4:	f7fe fe38 	bl	8001e58 <__aeabi_dmul>
 80031e8:	0003      	movs	r3, r0
 80031ea:	000c      	movs	r4, r1
 80031ec:	603b      	str	r3, [r7, #0]
 80031ee:	607c      	str	r4, [r7, #4]
 80031f0:	22e0      	movs	r2, #224	; 0xe0
 80031f2:	0612      	lsls	r2, r2, #24
 80031f4:	4b5a      	ldr	r3, [pc, #360]	; (8003360 <max31856_nonmuxed_sample+0x348>)
 80031f6:	68b8      	ldr	r0, [r7, #8]
 80031f8:	68f9      	ldr	r1, [r7, #12]
 80031fa:	f7fe fe2d 	bl	8001e58 <__aeabi_dmul>
 80031fe:	0003      	movs	r3, r0
 8003200:	000c      	movs	r4, r1
 8003202:	0019      	movs	r1, r3
 8003204:	0022      	movs	r2, r4
 8003206:	4b4d      	ldr	r3, [pc, #308]	; (800333c <max31856_nonmuxed_sample+0x324>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	001d      	movs	r5, r3
 800320c:	0013      	movs	r3, r2
 800320e:	000a      	movs	r2, r1
 8003210:	6838      	ldr	r0, [r7, #0]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	f7fd fefa 	bl	800100c <__aeabi_dadd>
 8003218:	0003      	movs	r3, r0
 800321a:	000c      	movs	r4, r1
 800321c:	494d      	ldr	r1, [pc, #308]	; (8003354 <max31856_nonmuxed_sample+0x33c>)
 800321e:	00ea      	lsls	r2, r5, #3
 8003220:	188a      	adds	r2, r1, r2
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	6054      	str	r4, [r2, #4]
			temp =  (filterData[ch] / 0.0078125f);
 8003226:	4b45      	ldr	r3, [pc, #276]	; (800333c <max31856_nonmuxed_sample+0x324>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	4a4a      	ldr	r2, [pc, #296]	; (8003354 <max31856_nonmuxed_sample+0x33c>)
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	18d3      	adds	r3, r2, r3
 8003230:	6818      	ldr	r0, [r3, #0]
 8003232:	6859      	ldr	r1, [r3, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	23fe      	movs	r3, #254	; 0xfe
 8003238:	059b      	lsls	r3, r3, #22
 800323a:	f7fe fa03 	bl	8001644 <__aeabi_ddiv>
 800323e:	0003      	movs	r3, r0
 8003240:	000c      	movs	r4, r1
 8003242:	0018      	movs	r0, r3
 8003244:	0021      	movs	r1, r4
 8003246:	f7ff fbdd 	bl	8002a04 <__aeabi_d2iz>
 800324a:	0003      	movs	r3, r0
 800324c:	617b      	str	r3, [r7, #20]
			temp = temp << 5;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	015b      	lsls	r3, r3, #5
 8003252:	617b      	str	r3, [r7, #20]
			tempData[ch][2] = (temp & 0x00FF0000) >> 16;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	141a      	asrs	r2, r3, #16
 8003258:	4b38      	ldr	r3, [pc, #224]	; (800333c <max31856_nonmuxed_sample+0x324>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	0019      	movs	r1, r3
 800325e:	b2d0      	uxtb	r0, r2
 8003260:	4a39      	ldr	r2, [pc, #228]	; (8003348 <max31856_nonmuxed_sample+0x330>)
 8003262:	000b      	movs	r3, r1
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	185b      	adds	r3, r3, r1
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	18d3      	adds	r3, r2, r3
 800326c:	3302      	adds	r3, #2
 800326e:	1c02      	adds	r2, r0, #0
 8003270:	701a      	strb	r2, [r3, #0]
			tempData[ch][3] = (temp & 0x0000FF00) >> 8;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	121a      	asrs	r2, r3, #8
 8003276:	4b31      	ldr	r3, [pc, #196]	; (800333c <max31856_nonmuxed_sample+0x324>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	0019      	movs	r1, r3
 800327c:	b2d0      	uxtb	r0, r2
 800327e:	4a32      	ldr	r2, [pc, #200]	; (8003348 <max31856_nonmuxed_sample+0x330>)
 8003280:	000b      	movs	r3, r1
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	185b      	adds	r3, r3, r1
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	18d3      	adds	r3, r2, r3
 800328a:	3303      	adds	r3, #3
 800328c:	1c02      	adds	r2, r0, #0
 800328e:	701a      	strb	r2, [r3, #0]
			tempData[ch][4] = (temp & 0x000000FF);
 8003290:	4b2a      	ldr	r3, [pc, #168]	; (800333c <max31856_nonmuxed_sample+0x324>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	0019      	movs	r1, r3
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	b2d8      	uxtb	r0, r3
 800329a:	4a2b      	ldr	r2, [pc, #172]	; (8003348 <max31856_nonmuxed_sample+0x330>)
 800329c:	000b      	movs	r3, r1
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	185b      	adds	r3, r3, r1
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	18d3      	adds	r3, r2, r3
 80032a6:	3304      	adds	r3, #4
 80032a8:	1c02      	adds	r2, r0, #0
 80032aa:	701a      	strb	r2, [r3, #0]
		dbg_printf("ch[%d]: %f -- %d \n",ch, tempf, tempData[ch][5]);
 80032ac:	4b23      	ldr	r3, [pc, #140]	; (800333c <max31856_nonmuxed_sample+0x324>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	001d      	movs	r5, r3
 80032b2:	4b22      	ldr	r3, [pc, #136]	; (800333c <max31856_nonmuxed_sample+0x324>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	0019      	movs	r1, r3
 80032b8:	4a23      	ldr	r2, [pc, #140]	; (8003348 <max31856_nonmuxed_sample+0x330>)
 80032ba:	000b      	movs	r3, r1
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	185b      	adds	r3, r3, r1
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	18d3      	adds	r3, r2, r3
 80032c4:	3305      	adds	r3, #5
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	001a      	movs	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	68fc      	ldr	r4, [r7, #12]
 80032ce:	4825      	ldr	r0, [pc, #148]	; (8003364 <max31856_nonmuxed_sample+0x34c>)
 80032d0:	9200      	str	r2, [sp, #0]
 80032d2:	001a      	movs	r2, r3
 80032d4:	0023      	movs	r3, r4
 80032d6:	0029      	movs	r1, r5
 80032d8:	f007 fc50 	bl	800ab7c <iprintf>
		memcpy(&gMAX31856_buffer[ch*MAX31856_READ_SIZE],&tempData[ch],MAX31856_READ_SIZE);
 80032dc:	4b17      	ldr	r3, [pc, #92]	; (800333c <max31856_nonmuxed_sample+0x324>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	001a      	movs	r2, r3
 80032e2:	0013      	movs	r3, r2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	189b      	adds	r3, r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	001a      	movs	r2, r3
 80032ec:	4b1e      	ldr	r3, [pc, #120]	; (8003368 <max31856_nonmuxed_sample+0x350>)
 80032ee:	18d0      	adds	r0, r2, r3
 80032f0:	4b12      	ldr	r3, [pc, #72]	; (800333c <max31856_nonmuxed_sample+0x324>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	001a      	movs	r2, r3
 80032f6:	0013      	movs	r3, r2
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	189b      	adds	r3, r3, r2
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	4a12      	ldr	r2, [pc, #72]	; (8003348 <max31856_nonmuxed_sample+0x330>)
 8003300:	189b      	adds	r3, r3, r2
 8003302:	2206      	movs	r2, #6
 8003304:	0019      	movs	r1, r3
 8003306:	f006 fdcc 	bl	8009ea2 <memcpy>
		if(ch >= 3)
 800330a:	4b0c      	ldr	r3, [pc, #48]	; (800333c <max31856_nonmuxed_sample+0x324>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d903      	bls.n	800331a <max31856_nonmuxed_sample+0x302>
			ch=0;
 8003312:	4b0a      	ldr	r3, [pc, #40]	; (800333c <max31856_nonmuxed_sample+0x324>)
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]
 8003318:	e005      	b.n	8003326 <max31856_nonmuxed_sample+0x30e>
			ch++;
 800331a:	4b08      	ldr	r3, [pc, #32]	; (800333c <max31856_nonmuxed_sample+0x324>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	3301      	adds	r3, #1
 8003320:	b2da      	uxtb	r2, r3
 8003322:	4b06      	ldr	r3, [pc, #24]	; (800333c <max31856_nonmuxed_sample+0x324>)
 8003324:	701a      	strb	r2, [r3, #0]
		counter = 0;
 8003326:	4b03      	ldr	r3, [pc, #12]	; (8003334 <max31856_nonmuxed_sample+0x31c>)
 8003328:	2200      	movs	r2, #0
 800332a:	701a      	strb	r2, [r3, #0]
}
 800332c:	46c0      	nop			; (mov r8, r8)
 800332e:	46bd      	mov	sp, r7
 8003330:	b007      	add	sp, #28
 8003332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003334:	20000260 	.word	0x20000260
 8003338:	20000254 	.word	0x20000254
 800333c:	20000261 	.word	0x20000261
 8003340:	20000000 	.word	0x20000000
 8003344:	20000698 	.word	0x20000698
 8003348:	20000718 	.word	0x20000718
 800334c:	200006f8 	.word	0x200006f8
 8003350:	40390000 	.word	0x40390000
 8003354:	200006b8 	.word	0x200006b8
 8003358:	3fd33333 	.word	0x3fd33333
 800335c:	3fefef9d 	.word	0x3fefef9d
 8003360:	3f60624d 	.word	0x3f60624d
 8003364:	0800e4c8 	.word	0x0800e4c8
 8003368:	20000678 	.word	0x20000678

0800336c <max31856_init>:
 * @param cr0	cr0 configuration
 * @param cr1	cr1 configuration
 * @return	0 or 1
 */
int max31856_init(tMAX31856 *ch,uint8_t cr0,uint8_t cr1)
{
 800336c:	b590      	push	{r4, r7, lr}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	0008      	movs	r0, r1
 8003376:	0011      	movs	r1, r2
 8003378:	1cfb      	adds	r3, r7, #3
 800337a:	1c02      	adds	r2, r0, #0
 800337c:	701a      	strb	r2, [r3, #0]
 800337e:	1cbb      	adds	r3, r7, #2
 8003380:	1c0a      	adds	r2, r1, #0
 8003382:	701a      	strb	r2, [r3, #0]
	uint8_t datar[2] = {0};
 8003384:	2308      	movs	r3, #8
 8003386:	18fb      	adds	r3, r7, r3
 8003388:	2200      	movs	r2, #0
 800338a:	801a      	strh	r2, [r3, #0]

	for (int i=0;i<10;i++)
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	e03a      	b.n	8003408 <max31856_init+0x9c>
	{
		max31856_wr_reg(ch,MAX31856_CR0,&cr0,1);
 8003392:	1cfa      	adds	r2, r7, #3
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	2301      	movs	r3, #1
 8003398:	2100      	movs	r1, #0
 800339a:	f7ff fcef 	bl	8002d7c <max31856_wr_reg>
		max31856_wr_reg(ch,MAX31856_CR1,&cr1,1);
 800339e:	1cba      	adds	r2, r7, #2
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	2301      	movs	r3, #1
 80033a4:	2101      	movs	r1, #1
 80033a6:	f7ff fce9 	bl	8002d7c <max31856_wr_reg>

		max31856_rd_reg(ch,MAX31856_CR0,&datar[0],1);
 80033aa:	2408      	movs	r4, #8
 80033ac:	193a      	adds	r2, r7, r4
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	2301      	movs	r3, #1
 80033b2:	2100      	movs	r1, #0
 80033b4:	f7ff fd1e 	bl	8002df4 <max31856_rd_reg>
		max31856_rd_reg(ch,MAX31856_CR1,&datar[1],1);
 80033b8:	193b      	adds	r3, r7, r4
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	2301      	movs	r3, #1
 80033c0:	2101      	movs	r1, #1
 80033c2:	f7ff fd17 	bl	8002df4 <max31856_rd_reg>
		ch->flags |= MAX31856_F_INIT_VALID;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2201      	movs	r2, #1
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	609a      	str	r2, [r3, #8]
		if ((cr0 == datar[0]) && (cr1 == datar[1]))
 80033d2:	193b      	adds	r3, r7, r4
 80033d4:	781a      	ldrb	r2, [r3, #0]
 80033d6:	1cfb      	adds	r3, r7, #3
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d10e      	bne.n	80033fc <max31856_init+0x90>
 80033de:	2308      	movs	r3, #8
 80033e0:	18fb      	adds	r3, r7, r3
 80033e2:	785a      	ldrb	r2, [r3, #1]
 80033e4:	1cbb      	adds	r3, r7, #2
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d107      	bne.n	80033fc <max31856_init+0x90>
		{
			ch->flags |= MAX31856_F_INIT_VALID;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2201      	movs	r2, #1
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	609a      	str	r2, [r3, #8]
			return 0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	e009      	b.n	8003410 <max31856_init+0xa4>
		}
		HAL_Delay(10);
 80033fc:	200a      	movs	r0, #10
 80033fe:	f001 ffe1 	bl	80053c4 <HAL_Delay>
	for (int i=0;i<10;i++)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3301      	adds	r3, #1
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b09      	cmp	r3, #9
 800340c:	ddc1      	ble.n	8003392 <max31856_init+0x26>
	}
	return 1;
 800340e:	2301      	movs	r3, #1
}
 8003410:	0018      	movs	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	b005      	add	sp, #20
 8003416:	bd90      	pop	{r4, r7, pc}

08003418 <tc_init>:

/*****************************************************************************/
void tc_init(int extcj)
{
 8003418:	b590      	push	{r4, r7, lr}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
	memcpy(&gBoardConfig.gConfig_tc, &DefaultConfig_tc, sizeof(tConfig_tc));
 8003420:	4b6a      	ldr	r3, [pc, #424]	; (80035cc <tc_init+0x1b4>)
 8003422:	4a6b      	ldr	r2, [pc, #428]	; (80035d0 <tc_init+0x1b8>)
 8003424:	3308      	adds	r3, #8
 8003426:	0011      	movs	r1, r2
 8003428:	2210      	movs	r2, #16
 800342a:	0018      	movs	r0, r3
 800342c:	f006 fd39 	bl	8009ea2 <memcpy>
	dbg_printf("Init TCs\n");
 8003430:	4b68      	ldr	r3, [pc, #416]	; (80035d4 <tc_init+0x1bc>)
 8003432:	0018      	movs	r0, r3
 8003434:	f007 fc1c 	bl	800ac70 <puts>
	if (extcj < 0)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	da04      	bge.n	8003448 <tc_init+0x30>
	{
		dbg_printf("ExtCj Init Internal Err\n");
 800343e:	4b66      	ldr	r3, [pc, #408]	; (80035d8 <tc_init+0x1c0>)
 8003440:	0018      	movs	r0, r3
 8003442:	f007 fc15 	bl	800ac70 <puts>
 8003446:	e028      	b.n	800349a <tc_init+0x82>
	}
	else if (extcj == 1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d125      	bne.n	800349a <tc_init+0x82>
	{
		/** Disable internal CJ sensing */
		gExtCjEnabled = 1; // this is a external CJ enabled board
 800344e:	4b63      	ldr	r3, [pc, #396]	; (80035dc <tc_init+0x1c4>)
 8003450:	2201      	movs	r2, #1
 8003452:	701a      	strb	r2, [r3, #0]

		/** Not a muxed one but has external CJ Sensors */
		for (int i=0;i<MAX_TC_CHANNELS;i++)
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	e01c      	b.n	8003494 <tc_init+0x7c>
		{
			extColdJOffset[i] = gBoardConfig.gConfig_tc.ch_conf[i].cj_offset * 0.0625;
 800345a:	4a5c      	ldr	r2, [pc, #368]	; (80035cc <tc_init+0x1b4>)
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	3302      	adds	r3, #2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	18d3      	adds	r3, r2, r3
 8003464:	3302      	adds	r3, #2
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	b25b      	sxtb	r3, r3
 800346a:	0018      	movs	r0, r3
 800346c:	f7ff fb00 	bl	8002a70 <__aeabi_i2d>
 8003470:	2200      	movs	r2, #0
 8003472:	4b5b      	ldr	r3, [pc, #364]	; (80035e0 <tc_init+0x1c8>)
 8003474:	f7fe fcf0 	bl	8001e58 <__aeabi_dmul>
 8003478:	0003      	movs	r3, r0
 800347a:	000c      	movs	r4, r1
 800347c:	0018      	movs	r0, r3
 800347e:	0021      	movs	r1, r4
 8003480:	f7ff fbb4 	bl	8002bec <__aeabi_d2f>
 8003484:	1c01      	adds	r1, r0, #0
 8003486:	4b57      	ldr	r3, [pc, #348]	; (80035e4 <tc_init+0x1cc>)
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	0092      	lsls	r2, r2, #2
 800348c:	50d1      	str	r1, [r2, r3]
		for (int i=0;i<MAX_TC_CHANNELS;i++)
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	3301      	adds	r3, #1
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	2b03      	cmp	r3, #3
 8003498:	dddf      	ble.n	800345a <tc_init+0x42>
		}

	}

	dbg_printf("cj_offset 0: %d", gBoardConfig.gConfig_tc.ch_conf[0].cj_offset);
 800349a:	4b4c      	ldr	r3, [pc, #304]	; (80035cc <tc_init+0x1b4>)
 800349c:	7a9b      	ldrb	r3, [r3, #10]
 800349e:	b25b      	sxtb	r3, r3
 80034a0:	001a      	movs	r2, r3
 80034a2:	4b51      	ldr	r3, [pc, #324]	; (80035e8 <tc_init+0x1d0>)
 80034a4:	0011      	movs	r1, r2
 80034a6:	0018      	movs	r0, r3
 80034a8:	f007 fb68 	bl	800ab7c <iprintf>
	dbg_printf("cj_offset 1: %d", gBoardConfig.gConfig_tc.ch_conf[1].cj_offset);
 80034ac:	4b47      	ldr	r3, [pc, #284]	; (80035cc <tc_init+0x1b4>)
 80034ae:	7b9b      	ldrb	r3, [r3, #14]
 80034b0:	b25b      	sxtb	r3, r3
 80034b2:	001a      	movs	r2, r3
 80034b4:	4b4d      	ldr	r3, [pc, #308]	; (80035ec <tc_init+0x1d4>)
 80034b6:	0011      	movs	r1, r2
 80034b8:	0018      	movs	r0, r3
 80034ba:	f007 fb5f 	bl	800ab7c <iprintf>
	dbg_printf("cj_offset 2: %d", gBoardConfig.gConfig_tc.ch_conf[2].cj_offset);
 80034be:	4b43      	ldr	r3, [pc, #268]	; (80035cc <tc_init+0x1b4>)
 80034c0:	7c9b      	ldrb	r3, [r3, #18]
 80034c2:	b25b      	sxtb	r3, r3
 80034c4:	001a      	movs	r2, r3
 80034c6:	4b4a      	ldr	r3, [pc, #296]	; (80035f0 <tc_init+0x1d8>)
 80034c8:	0011      	movs	r1, r2
 80034ca:	0018      	movs	r0, r3
 80034cc:	f007 fb56 	bl	800ab7c <iprintf>
	dbg_printf("cj_offset 3: %d", gBoardConfig.gConfig_tc.ch_conf[3].cj_offset);
 80034d0:	4b3e      	ldr	r3, [pc, #248]	; (80035cc <tc_init+0x1b4>)
 80034d2:	7d9b      	ldrb	r3, [r3, #22]
 80034d4:	b25b      	sxtb	r3, r3
 80034d6:	001a      	movs	r2, r3
 80034d8:	4b46      	ldr	r3, [pc, #280]	; (80035f4 <tc_init+0x1dc>)
 80034da:	0011      	movs	r1, r2
 80034dc:	0018      	movs	r0, r3
 80034de:	f007 fb4d 	bl	800ab7c <iprintf>
	dbg_printf("cr0 : %x", gBoardConfig.gConfig_tc.ch_conf[0].cr0);
 80034e2:	4b3a      	ldr	r3, [pc, #232]	; (80035cc <tc_init+0x1b4>)
 80034e4:	7a1b      	ldrb	r3, [r3, #8]
 80034e6:	001a      	movs	r2, r3
 80034e8:	4b43      	ldr	r3, [pc, #268]	; (80035f8 <tc_init+0x1e0>)
 80034ea:	0011      	movs	r1, r2
 80034ec:	0018      	movs	r0, r3
 80034ee:	f007 fb45 	bl	800ab7c <iprintf>
	dbg_printf("cr1 : %x\r\n", gBoardConfig.gConfig_tc.ch_conf[0].cr1);
 80034f2:	4b36      	ldr	r3, [pc, #216]	; (80035cc <tc_init+0x1b4>)
 80034f4:	7a5b      	ldrb	r3, [r3, #9]
 80034f6:	001a      	movs	r2, r3
 80034f8:	4b40      	ldr	r3, [pc, #256]	; (80035fc <tc_init+0x1e4>)
 80034fa:	0011      	movs	r1, r2
 80034fc:	0018      	movs	r0, r3
 80034fe:	f007 fb3d 	bl	800ab7c <iprintf>


	uint32_t try = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	613b      	str	r3, [r7, #16]

	for (int i=0;i<MAX_TC_CHANNELS;i++)
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	e057      	b.n	80035bc <tc_init+0x1a4>
	{
		max31856_deselect(&tc[i]);
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	0013      	movs	r3, r2
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	189b      	adds	r3, r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4a3a      	ldr	r2, [pc, #232]	; (8003600 <tc_init+0x1e8>)
 8003518:	189b      	adds	r3, r3, r2
 800351a:	0018      	movs	r0, r3
 800351c:	f7ff fc21 	bl	8002d62 <max31856_deselect>
		HAL_Delay(10);
 8003520:	200a      	movs	r0, #10
 8003522:	f001 ff4f 	bl	80053c4 <HAL_Delay>

		try = 0;
 8003526:	2300      	movs	r3, #0
 8003528:	613b      	str	r3, [r7, #16]
		while(try < 20)
 800352a:	e041      	b.n	80035b0 <tc_init+0x198>
		{
			if (!max31856_init(&tc[i],gBoardConfig.gConfig_tc.ch_conf[i].cr0,gBoardConfig.gConfig_tc.ch_conf[i].cr1))
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	0013      	movs	r3, r2
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	189b      	adds	r3, r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4a32      	ldr	r2, [pc, #200]	; (8003600 <tc_init+0x1e8>)
 8003538:	1898      	adds	r0, r3, r2
 800353a:	4b24      	ldr	r3, [pc, #144]	; (80035cc <tc_init+0x1b4>)
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	3202      	adds	r2, #2
 8003540:	0092      	lsls	r2, r2, #2
 8003542:	5cd1      	ldrb	r1, [r2, r3]
 8003544:	4a21      	ldr	r2, [pc, #132]	; (80035cc <tc_init+0x1b4>)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	3302      	adds	r3, #2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	18d3      	adds	r3, r2, r3
 800354e:	3301      	adds	r3, #1
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	001a      	movs	r2, r3
 8003554:	f7ff ff0a 	bl	800336c <max31856_init>
 8003558:	1e03      	subs	r3, r0, #0
 800355a:	d11c      	bne.n	8003596 <tc_init+0x17e>
			{
				if (!gExtCjEnabled)
 800355c:	4b1f      	ldr	r3, [pc, #124]	; (80035dc <tc_init+0x1c4>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d110      	bne.n	8003586 <tc_init+0x16e>
					max31856_wr_reg(&tc[i],MAX31856_CJTO,(unsigned char* )&gBoardConfig.gConfig_tc.ch_conf[i].cj_offset,1);
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	0013      	movs	r3, r2
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	189b      	adds	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4a24      	ldr	r2, [pc, #144]	; (8003600 <tc_init+0x1e8>)
 8003570:	1898      	adds	r0, r3, r2
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	3302      	adds	r3, #2
 8003576:	009a      	lsls	r2, r3, #2
 8003578:	4b14      	ldr	r3, [pc, #80]	; (80035cc <tc_init+0x1b4>)
 800357a:	18d3      	adds	r3, r2, r3
 800357c:	1c9a      	adds	r2, r3, #2
 800357e:	2301      	movs	r3, #1
 8003580:	2109      	movs	r1, #9
 8003582:	f7ff fbfb 	bl	8002d7c <max31856_wr_reg>
				dbg_printf("TC Ch %d OK\n",i+1);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	4b1e      	ldr	r3, [pc, #120]	; (8003604 <tc_init+0x1ec>)
 800358c:	0011      	movs	r1, r2
 800358e:	0018      	movs	r0, r3
 8003590:	f007 faf4 	bl	800ab7c <iprintf>
				break;
 8003594:	e00f      	b.n	80035b6 <tc_init+0x19e>
			}
			else
			{
				dbg_printf("TC Ch %d Fail\n",i+1);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	4b1b      	ldr	r3, [pc, #108]	; (8003608 <tc_init+0x1f0>)
 800359c:	0011      	movs	r1, r2
 800359e:	0018      	movs	r0, r3
 80035a0:	f007 faec 	bl	800ab7c <iprintf>
			}
			HAL_Delay(10);
 80035a4:	200a      	movs	r0, #10
 80035a6:	f001 ff0d 	bl	80053c4 <HAL_Delay>
			try++;
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	3301      	adds	r3, #1
 80035ae:	613b      	str	r3, [r7, #16]
		while(try < 20)
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	2b13      	cmp	r3, #19
 80035b4:	d9ba      	bls.n	800352c <tc_init+0x114>
	for (int i=0;i<MAX_TC_CHANNELS;i++)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	3301      	adds	r3, #1
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b03      	cmp	r3, #3
 80035c0:	dda4      	ble.n	800350c <tc_init+0xf4>
		}
	}

}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	46bd      	mov	sp, r7
 80035c6:	b007      	add	sp, #28
 80035c8:	bd90      	pop	{r4, r7, pc}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	2000069c 	.word	0x2000069c
 80035d0:	0800e9bc 	.word	0x0800e9bc
 80035d4:	0800e4dc 	.word	0x0800e4dc
 80035d8:	0800e4e8 	.word	0x0800e4e8
 80035dc:	20000254 	.word	0x20000254
 80035e0:	3fb00000 	.word	0x3fb00000
 80035e4:	20000730 	.word	0x20000730
 80035e8:	0800e500 	.word	0x0800e500
 80035ec:	0800e510 	.word	0x0800e510
 80035f0:	0800e520 	.word	0x0800e520
 80035f4:	0800e530 	.word	0x0800e530
 80035f8:	0800e540 	.word	0x0800e540
 80035fc:	0800e54c 	.word	0x0800e54c
 8003600:	20000000 	.word	0x20000000
 8003604:	0800e558 	.word	0x0800e558
 8003608:	0800e568 	.word	0x0800e568

0800360c <max31856_process>:


/*****************************************************************************/
void max31856_process()
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
	max31856_nonmuxed_sample();
 8003610:	f7ff fd02 	bl	8003018 <max31856_nonmuxed_sample>
}
 8003614:	46c0      	nop			; (mov r8, r8)
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003620:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003624:	4b03      	ldr	r3, [pc, #12]	; (8003634 <__NVIC_SystemReset+0x18>)
 8003626:	4a04      	ldr	r2, [pc, #16]	; (8003638 <__NVIC_SystemReset+0x1c>)
 8003628:	60da      	str	r2, [r3, #12]
 800362a:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	e7fd      	b.n	800362e <__NVIC_SystemReset+0x12>
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	e000ed00 	.word	0xe000ed00
 8003638:	05fa0004 	.word	0x05fa0004

0800363c <bus_cmd_both_read_handler>:
/*============================================================================*/
/* Implementation of functions                                                */
/*============================================================================*/

uint32_t bus_cmd_both_read_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	607a      	str	r2, [r7, #4]
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	230a      	movs	r3, #10
 800364a:	18fb      	adds	r3, r7, r3
 800364c:	1c0a      	adds	r2, r1, #0
 800364e:	801a      	strh	r2, [r3, #0]
	uint8_t *data = &txData[0];
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	617b      	str	r3, [r7, #20]
	*txLen = stmp3x_read_raw_buffered(data);
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	0018      	movs	r0, r3
 8003658:	f001 fc4a 	bl	8004ef0 <stmp3x_read_raw_buffered>
 800365c:	0003      	movs	r3, r0
 800365e:	b29a      	uxth	r2, r3
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	801a      	strh	r2, [r3, #0]
	data += 350;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	335f      	adds	r3, #95	; 0x5f
 8003668:	33ff      	adds	r3, #255	; 0xff
 800366a:	617b      	str	r3, [r7, #20]

	for (int i=0;i<MAX_TC_CHANNELS;i++)
 800366c:	2300      	movs	r3, #0
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	e00b      	b.n	800368a <bus_cmd_both_read_handler+0x4e>
	{
		max31856_read_raw_buffered(i,data);
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	0011      	movs	r1, r2
 8003678:	0018      	movs	r0, r3
 800367a:	f7ff fc03 	bl	8002e84 <max31856_read_raw_buffered>
		data+=TC_CH_SAMPLE_SIZE;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	3306      	adds	r3, #6
 8003682:	617b      	str	r3, [r7, #20]
	for (int i=0;i<MAX_TC_CHANNELS;i++)
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	3301      	adds	r3, #1
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b03      	cmp	r3, #3
 800368e:	ddf0      	ble.n	8003672 <bus_cmd_both_read_handler+0x36>
	}

	*txLen += TC_CH_SAMPLE_SIZE * MAX_TC_CHANNELS;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	3318      	adds	r3, #24
 8003696:	b29a      	uxth	r2, r3
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	801a      	strh	r2, [r3, #0]

	return 0;
 800369c:	2300      	movs	r3, #0
}
 800369e:	0018      	movs	r0, r3
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b006      	add	sp, #24
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <bus_cmd_tc_read_handler>:
 * @param txData send msg
 * @param txLen send msg length
 * @return uint32_t 0
 */
uint32_t bus_cmd_tc_read_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b086      	sub	sp, #24
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	60f8      	str	r0, [r7, #12]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
 80036b2:	230a      	movs	r3, #10
 80036b4:	18fb      	adds	r3, r7, r3
 80036b6:	1c0a      	adds	r2, r1, #0
 80036b8:	801a      	strh	r2, [r3, #0]
	uint8_t *data = &txData[0];
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	617b      	str	r3, [r7, #20]
	for (int i=0;i<MAX_TC_CHANNELS;i++)
 80036be:	2300      	movs	r3, #0
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	e00b      	b.n	80036dc <bus_cmd_tc_read_handler+0x36>
	{
		max31856_read_raw_buffered(i,data);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	0011      	movs	r1, r2
 80036ca:	0018      	movs	r0, r3
 80036cc:	f7ff fbda 	bl	8002e84 <max31856_read_raw_buffered>
		data+=TC_CH_SAMPLE_SIZE;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	3306      	adds	r3, #6
 80036d4:	617b      	str	r3, [r7, #20]
	for (int i=0;i<MAX_TC_CHANNELS;i++)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	3301      	adds	r3, #1
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	2b03      	cmp	r3, #3
 80036e0:	ddf0      	ble.n	80036c4 <bus_cmd_tc_read_handler+0x1e>
	}

	*txLen = TC_CH_SAMPLE_SIZE * MAX_TC_CHANNELS;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2218      	movs	r2, #24
 80036e6:	801a      	strh	r2, [r3, #0]

	return 0;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	0018      	movs	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b006      	add	sp, #24
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <bus_cmd_pa_read_handler>:
 * @param txData send msg
 * @param txLen send msg length
 * @return uint32_t 
 */
uint32_t bus_cmd_pa_read_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b086      	sub	sp, #24
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	603b      	str	r3, [r7, #0]
 80036fe:	230a      	movs	r3, #10
 8003700:	18fb      	adds	r3, r7, r3
 8003702:	1c0a      	adds	r2, r1, #0
 8003704:	801a      	strh	r2, [r3, #0]
	uint8_t *data = &txData[0];
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	617b      	str	r3, [r7, #20]
	*txLen = stmp3x_read_raw_buffered(data);
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	0018      	movs	r0, r3
 800370e:	f001 fbef 	bl	8004ef0 <stmp3x_read_raw_buffered>
 8003712:	0003      	movs	r3, r0
 8003714:	b29a      	uxth	r2, r3
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	801a      	strh	r2, [r3, #0]
	return 0;
 800371a:	2300      	movs	r3, #0
}
 800371c:	0018      	movs	r0, r3
 800371e:	46bd      	mov	sp, r7
 8003720:	b006      	add	sp, #24
 8003722:	bd80      	pop	{r7, pc}

08003724 <bus_cmd_ping_handler>:

/******************************************************************************/

uint32_t bus_cmd_ping_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	607a      	str	r2, [r7, #4]
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	230a      	movs	r3, #10
 8003732:	18fb      	adds	r3, r7, r3
 8003734:	1c0a      	adds	r2, r1, #0
 8003736:	801a      	strh	r2, [r3, #0]
	return 0;
 8003738:	2300      	movs	r3, #0
}
 800373a:	0018      	movs	r0, r3
 800373c:	46bd      	mov	sp, r7
 800373e:	b004      	add	sp, #16
 8003740:	bd80      	pop	{r7, pc}

08003742 <bus_cmd_tc_conf_read_handler>:

/******************************************************************************/

uint32_t bus_cmd_tc_conf_read_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b084      	sub	sp, #16
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	603b      	str	r3, [r7, #0]
 800374e:	230a      	movs	r3, #10
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	1c0a      	adds	r2, r1, #0
 8003754:	801a      	strh	r2, [r3, #0]
	return 0;
 8003756:	2300      	movs	r3, #0
}
 8003758:	0018      	movs	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	b004      	add	sp, #16
 800375e:	bd80      	pop	{r7, pc}

08003760 <bus_cmd_tc_conf_write_handler>:

/******************************************************************************/

uint32_t bus_cmd_tc_conf_write_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	607a      	str	r2, [r7, #4]
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	230a      	movs	r3, #10
 800376e:	18fb      	adds	r3, r7, r3
 8003770:	1c0a      	adds	r2, r1, #0
 8003772:	801a      	strh	r2, [r3, #0]
	return 0;
 8003774:	2300      	movs	r3, #0
}
 8003776:	0018      	movs	r0, r3
 8003778:	46bd      	mov	sp, r7
 800377a:	b004      	add	sp, #16
 800377c:	bd80      	pop	{r7, pc}

0800377e <bus_cmd_pa_conf_read_handler>:

/******************************************************************************/

uint32_t bus_cmd_pa_conf_read_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b084      	sub	sp, #16
 8003782:	af00      	add	r7, sp, #0
 8003784:	60f8      	str	r0, [r7, #12]
 8003786:	607a      	str	r2, [r7, #4]
 8003788:	603b      	str	r3, [r7, #0]
 800378a:	230a      	movs	r3, #10
 800378c:	18fb      	adds	r3, r7, r3
 800378e:	1c0a      	adds	r2, r1, #0
 8003790:	801a      	strh	r2, [r3, #0]
	return 0;
 8003792:	2300      	movs	r3, #0
}
 8003794:	0018      	movs	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	b004      	add	sp, #16
 800379a:	bd80      	pop	{r7, pc}

0800379c <bus_cmd_pa_conf_write_handler>:

/******************************************************************************/

uint32_t bus_cmd_pa_conf_write_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	607a      	str	r2, [r7, #4]
 80037a6:	603b      	str	r3, [r7, #0]
 80037a8:	230a      	movs	r3, #10
 80037aa:	18fb      	adds	r3, r7, r3
 80037ac:	1c0a      	adds	r2, r1, #0
 80037ae:	801a      	strh	r2, [r3, #0]
	return 0;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	0018      	movs	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	b004      	add	sp, #16
 80037b8:	bd80      	pop	{r7, pc}

080037ba <bus_cmd_read_info_handler>:

/******************************************************************************/

uint32_t bus_cmd_read_info_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b084      	sub	sp, #16
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	607a      	str	r2, [r7, #4]
 80037c4:	603b      	str	r3, [r7, #0]
 80037c6:	230a      	movs	r3, #10
 80037c8:	18fb      	adds	r3, r7, r3
 80037ca:	1c0a      	adds	r2, r1, #0
 80037cc:	801a      	strh	r2, [r3, #0]
	return 0;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	0018      	movs	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b004      	add	sp, #16
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <rt_bus_cmd_enter_bootloader>:
 * @param txData send msg
 * @param txLen send msg length
 * @return uint32_t 0
 */
uint32_t rt_bus_cmd_enter_bootloader (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	607a      	str	r2, [r7, #4]
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	230a      	movs	r3, #10
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	1c0a      	adds	r2, r1, #0
 80037ea:	801a      	strh	r2, [r3, #0]
	//bus_entering_bootlaoder_hook();
	enterBL = 1;
 80037ec:	4b03      	ldr	r3, [pc, #12]	; (80037fc <rt_bus_cmd_enter_bootloader+0x24>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	701a      	strb	r2, [r3, #0]

	return 0;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	0018      	movs	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b004      	add	sp, #16
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000262 	.word	0x20000262

08003800 <rt_bus_cmd_reset>:
 * @param txData send msg
 * @param txLen send msg length
 * @return uint32_t 
 */
uint32_t rt_bus_cmd_reset (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	607a      	str	r2, [r7, #4]
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	230a      	movs	r3, #10
 800380e:	18fb      	adds	r3, r7, r3
 8003810:	1c0a      	adds	r2, r1, #0
 8003812:	801a      	strh	r2, [r3, #0]
	iapMailbox[0] = 0;
 8003814:	4b03      	ldr	r3, [pc, #12]	; (8003824 <rt_bus_cmd_reset+0x24>)
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
	iapMailbox[1] = 0;
 800381a:	4b02      	ldr	r3, [pc, #8]	; (8003824 <rt_bus_cmd_reset+0x24>)
 800381c:	2200      	movs	r2, #0
 800381e:	605a      	str	r2, [r3, #4]
	//bus_reseting_hook();
	NVIC_SystemReset();
 8003820:	f7ff fefc 	bl	800361c <__NVIC_SystemReset>
 8003824:	20000740 	.word	0x20000740

08003828 <rt_bus_cmd_bl_stay>:
 * @param txData send msg
 * @param txLen send msg length
 * @return uint32_t 
 */
uint32_t rt_bus_cmd_bl_stay (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	607a      	str	r2, [r7, #4]
 8003832:	603b      	str	r3, [r7, #0]
 8003834:	230a      	movs	r3, #10
 8003836:	18fb      	adds	r3, r7, r3
 8003838:	1c0a      	adds	r2, r1, #0
 800383a:	801a      	strh	r2, [r3, #0]
	*txData = 0;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	701a      	strb	r2, [r3, #0]
	txData[1] = 0;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3301      	adds	r3, #1
 8003846:	2200      	movs	r2, #0
 8003848:	701a      	strb	r2, [r3, #0]
	*txLen = 2;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2202      	movs	r2, #2
 800384e:	801a      	strh	r2, [r3, #0]
	return 0;
 8003850:	2300      	movs	r3, #0
}
 8003852:	0018      	movs	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	b004      	add	sp, #16
 8003858:	bd80      	pop	{r7, pc}

0800385a <rt_bus_cmd_bl_read_handler>:


/******************************************************************************/

uint32_t rt_bus_cmd_bl_read_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b084      	sub	sp, #16
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	603b      	str	r3, [r7, #0]
 8003866:	230a      	movs	r3, #10
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	1c0a      	adds	r2, r1, #0
 800386c:	801a      	strh	r2, [r3, #0]
	return 0;
 800386e:	2300      	movs	r3, #0
}
 8003870:	0018      	movs	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	b004      	add	sp, #16
 8003876:	bd80      	pop	{r7, pc}

08003878 <rt_bus_cmd_bl_write_handler>:

/******************************************************************************/
uint32_t rt_bus_cmd_bl_write_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	230a      	movs	r3, #10
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	1c0a      	adds	r2, r1, #0
 800388a:	801a      	strh	r2, [r3, #0]

	return 0;
 800388c:	2300      	movs	r3, #0
}
 800388e:	0018      	movs	r0, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	b004      	add	sp, #16
 8003894:	bd80      	pop	{r7, pc}

08003896 <rt_bus_cmd_bl_erase_handler>:

/******************************************************************************/

uint32_t rt_bus_cmd_bl_erase_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	603b      	str	r3, [r7, #0]
 80038a2:	230a      	movs	r3, #10
 80038a4:	18fb      	adds	r3, r7, r3
 80038a6:	1c0a      	adds	r2, r1, #0
 80038a8:	801a      	strh	r2, [r3, #0]

	return 0;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	0018      	movs	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	b004      	add	sp, #16
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <crc_ccitt_byte>:
};

/******************************************************************************/

static inline unsigned short crc_ccitt_byte(uint16_t crc, const uint8_t c)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	0002      	movs	r2, r0
 80038bc:	1dbb      	adds	r3, r7, #6
 80038be:	801a      	strh	r2, [r3, #0]
 80038c0:	1d7b      	adds	r3, r7, #5
 80038c2:	1c0a      	adds	r2, r1, #0
 80038c4:	701a      	strb	r2, [r3, #0]
	return (crc >> 8) ^ crc_ccitt_table[(crc ^ c) & 0xff];
 80038c6:	1dbb      	adds	r3, r7, #6
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	0a1b      	lsrs	r3, r3, #8
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	1dbb      	adds	r3, r7, #6
 80038d0:	8819      	ldrh	r1, [r3, #0]
 80038d2:	1d7b      	adds	r3, r7, #5
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	404b      	eors	r3, r1
 80038d8:	21ff      	movs	r1, #255	; 0xff
 80038da:	4019      	ands	r1, r3
 80038dc:	4b04      	ldr	r3, [pc, #16]	; (80038f0 <crc_ccitt_byte+0x3c>)
 80038de:	0049      	lsls	r1, r1, #1
 80038e0:	5acb      	ldrh	r3, [r1, r3]
 80038e2:	4053      	eors	r3, r2
 80038e4:	b29b      	uxth	r3, r3
}
 80038e6:	0018      	movs	r0, r3
 80038e8:	46bd      	mov	sp, r7
 80038ea:	b002      	add	sp, #8
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	0800e7bc 	.word	0x0800e7bc

080038f4 <crc16>:

/******************************************************************************/

unsigned short crc16(unsigned char *data_p, unsigned short length)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	000a      	movs	r2, r1
 80038fe:	1cbb      	adds	r3, r7, #2
 8003900:	801a      	strh	r2, [r3, #0]
	unsigned int crc = 0x0000;
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
	while (length--)
 8003906:	e00a      	b.n	800391e <crc16+0x2a>
		crc = crc_ccitt_byte(crc, *data_p++);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	b298      	uxth	r0, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	607a      	str	r2, [r7, #4]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	0019      	movs	r1, r3
 8003916:	f7ff ffcd 	bl	80038b4 <crc_ccitt_byte>
 800391a:	0003      	movs	r3, r0
 800391c:	60fb      	str	r3, [r7, #12]
	while (length--)
 800391e:	1cbb      	adds	r3, r7, #2
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	1cba      	adds	r2, r7, #2
 8003924:	1e59      	subs	r1, r3, #1
 8003926:	8011      	strh	r1, [r2, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1ed      	bne.n	8003908 <crc16+0x14>
	return (crc>>8) | (crc<<8);;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	0a1b      	lsrs	r3, r3, #8
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	b29b      	uxth	r3, r3
 8003936:	021b      	lsls	r3, r3, #8
 8003938:	b29b      	uxth	r3, r3
 800393a:	4313      	orrs	r3, r2
 800393c:	b29b      	uxth	r3, r3
}
 800393e:	0018      	movs	r0, r3
 8003940:	46bd      	mov	sp, r7
 8003942:	b004      	add	sp, #16
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <bus_frame_pack>:
 * @brief SPI send/receive data format. Received from VTS bus communication
 * @param cmd message command type
 * @param datalength message length
 */
void bus_frame_pack(uint8_t cmd, uint16_t *datalength)
{
 8003948:	b5b0      	push	{r4, r5, r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	0002      	movs	r2, r0
 8003950:	6039      	str	r1, [r7, #0]
 8003952:	1dfb      	adds	r3, r7, #7
 8003954:	701a      	strb	r2, [r3, #0]
	uint16_t cCRC = 0;
 8003956:	210e      	movs	r1, #14
 8003958:	187b      	adds	r3, r7, r1
 800395a:	2200      	movs	r2, #0
 800395c:	801a      	strh	r2, [r3, #0]

	spiTxBuffer[0] = PRT_STX;
 800395e:	4b1d      	ldr	r3, [pc, #116]	; (80039d4 <bus_frame_pack+0x8c>)
 8003960:	2201      	movs	r2, #1
 8003962:	701a      	strb	r2, [r3, #0]

	//txBuffer[1] = (uBusId & 0xFF00)>>8;
	//txBuffer[2] = (uBusId & 0x00FF);

	spiTxBuffer[3] = (((*datalength)+1) & 0xFF00)>>8;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	3301      	adds	r3, #1
 800396a:	121b      	asrs	r3, r3, #8
 800396c:	b2da      	uxtb	r2, r3
 800396e:	4b19      	ldr	r3, [pc, #100]	; (80039d4 <bus_frame_pack+0x8c>)
 8003970:	70da      	strb	r2, [r3, #3]
	spiTxBuffer[4] = (((*datalength)+1) & 0xFF);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	b2db      	uxtb	r3, r3
 8003978:	3301      	adds	r3, #1
 800397a:	b2da      	uxtb	r2, r3
 800397c:	4b15      	ldr	r3, [pc, #84]	; (80039d4 <bus_frame_pack+0x8c>)
 800397e:	711a      	strb	r2, [r3, #4]

	spiTxBuffer[5] = cmd;
 8003980:	4b14      	ldr	r3, [pc, #80]	; (80039d4 <bus_frame_pack+0x8c>)
 8003982:	1dfa      	adds	r2, r7, #7
 8003984:	7812      	ldrb	r2, [r2, #0]
 8003986:	715a      	strb	r2, [r3, #5]

	cCRC =  crc16(&spiTxBuffer[PRT_AD_MSB_IDX], MAX_SPI_DATA - 4);
 8003988:	000d      	movs	r5, r1
 800398a:	187c      	adds	r4, r7, r1
 800398c:	23fe      	movs	r3, #254	; 0xfe
 800398e:	005a      	lsls	r2, r3, #1
 8003990:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <bus_frame_pack+0x90>)
 8003992:	0011      	movs	r1, r2
 8003994:	0018      	movs	r0, r3
 8003996:	f7ff ffad 	bl	80038f4 <crc16>
 800399a:	0003      	movs	r3, r0
 800399c:	8023      	strh	r3, [r4, #0]

	spiTxBuffer[MAX_SPI_DATA - 3] = (cCRC & 0xFF00)>>8;
 800399e:	0029      	movs	r1, r5
 80039a0:	0008      	movs	r0, r1
 80039a2:	187b      	adds	r3, r7, r1
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	0a1b      	lsrs	r3, r3, #8
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	b2d9      	uxtb	r1, r3
 80039ac:	4a09      	ldr	r2, [pc, #36]	; (80039d4 <bus_frame_pack+0x8c>)
 80039ae:	23fe      	movs	r3, #254	; 0xfe
 80039b0:	33ff      	adds	r3, #255	; 0xff
 80039b2:	54d1      	strb	r1, [r2, r3]
	spiTxBuffer[MAX_SPI_DATA - 2] = (cCRC & 0x00FF);
 80039b4:	0001      	movs	r1, r0
 80039b6:	187b      	adds	r3, r7, r1
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	b2d9      	uxtb	r1, r3
 80039bc:	4a05      	ldr	r2, [pc, #20]	; (80039d4 <bus_frame_pack+0x8c>)
 80039be:	23ff      	movs	r3, #255	; 0xff
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	54d1      	strb	r1, [r2, r3]
	spiTxBuffer[MAX_SPI_DATA - 1] = PRT_ETX;
 80039c4:	4b03      	ldr	r3, [pc, #12]	; (80039d4 <bus_frame_pack+0x8c>)
 80039c6:	4a05      	ldr	r2, [pc, #20]	; (80039dc <bus_frame_pack+0x94>)
 80039c8:	2103      	movs	r1, #3
 80039ca:	5499      	strb	r1, [r3, r2]
}
 80039cc:	46c0      	nop			; (mov r8, r8)
 80039ce:	46bd      	mov	sp, r7
 80039d0:	b004      	add	sp, #16
 80039d2:	bdb0      	pop	{r4, r5, r7, pc}
 80039d4:	20000748 	.word	0x20000748
 80039d8:	20000749 	.word	0x20000749
 80039dc:	000001ff 	.word	0x000001ff

080039e0 <bus_process>:
/******************************************************************************/



void bus_process(void)
{
 80039e0:	b5b0      	push	{r4, r5, r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af02      	add	r7, sp, #8
	if (espMsgRcvd)
 80039e6:	4b59      	ldr	r3, [pc, #356]	; (8003b4c <bus_process+0x16c>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d100      	bne.n	80039f0 <bus_process+0x10>
 80039ee:	e0a8      	b.n	8003b42 <bus_process+0x162>
	{
		uint16_t calc_CRC = 0;
 80039f0:	2308      	movs	r3, #8
 80039f2:	18fb      	adds	r3, r7, r3
 80039f4:	2200      	movs	r2, #0
 80039f6:	801a      	strh	r2, [r3, #0]
		uint16_t txSize = 0;
 80039f8:	1dbb      	adds	r3, r7, #6
 80039fa:	2200      	movs	r2, #0
 80039fc:	801a      	strh	r2, [r3, #0]

		memset(spiTxBuffer, 0, MAX_SPI_DATA);
 80039fe:	2380      	movs	r3, #128	; 0x80
 8003a00:	009a      	lsls	r2, r3, #2
 8003a02:	4b53      	ldr	r3, [pc, #332]	; (8003b50 <bus_process+0x170>)
 8003a04:	2100      	movs	r1, #0
 8003a06:	0018      	movs	r0, r3
 8003a08:	f006 fa54 	bl	8009eb4 <memset>
		dbg_printf("[0] : %d - [1] : %d - cmd[5] : %d - [511] : %d\r\n", spiRxBuffer[0], spiRxBuffer[1], spiRxBuffer[5], spiRxBuffer[511]);
 8003a0c:	4b51      	ldr	r3, [pc, #324]	; (8003b54 <bus_process+0x174>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	0019      	movs	r1, r3
 8003a12:	4b50      	ldr	r3, [pc, #320]	; (8003b54 <bus_process+0x174>)
 8003a14:	785b      	ldrb	r3, [r3, #1]
 8003a16:	001c      	movs	r4, r3
 8003a18:	4b4e      	ldr	r3, [pc, #312]	; (8003b54 <bus_process+0x174>)
 8003a1a:	795b      	ldrb	r3, [r3, #5]
 8003a1c:	001d      	movs	r5, r3
 8003a1e:	4b4d      	ldr	r3, [pc, #308]	; (8003b54 <bus_process+0x174>)
 8003a20:	4a4d      	ldr	r2, [pc, #308]	; (8003b58 <bus_process+0x178>)
 8003a22:	5c9b      	ldrb	r3, [r3, r2]
 8003a24:	484d      	ldr	r0, [pc, #308]	; (8003b5c <bus_process+0x17c>)
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	002b      	movs	r3, r5
 8003a2a:	0022      	movs	r2, r4
 8003a2c:	f007 f8a6 	bl	800ab7c <iprintf>
		spiTxBuffer[511] = 0x3;
 8003a30:	4b47      	ldr	r3, [pc, #284]	; (8003b50 <bus_process+0x170>)
 8003a32:	4a49      	ldr	r2, [pc, #292]	; (8003b58 <bus_process+0x178>)
 8003a34:	2103      	movs	r1, #3
 8003a36:	5499      	strb	r1, [r3, r2]

		if ((spiRxBuffer[PRT_STX_IDX] == PRT_STX) && spiRxBuffer[MAX_SPI_DATA - PRT_ETX_LEFT_IDX] == PRT_ETX)
 8003a38:	4b46      	ldr	r3, [pc, #280]	; (8003b54 <bus_process+0x174>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d155      	bne.n	8003aec <bus_process+0x10c>
 8003a40:	4b44      	ldr	r3, [pc, #272]	; (8003b54 <bus_process+0x174>)
 8003a42:	4a45      	ldr	r2, [pc, #276]	; (8003b58 <bus_process+0x178>)
 8003a44:	5c9b      	ldrb	r3, [r3, r2]
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	d150      	bne.n	8003aec <bus_process+0x10c>
		{
			calc_CRC = crc16(&spiRxBuffer[PRT_AD_MSB_IDX], MAX_SPI_DATA-4);
 8003a4a:	23fe      	movs	r3, #254	; 0xfe
 8003a4c:	005a      	lsls	r2, r3, #1
 8003a4e:	4b44      	ldr	r3, [pc, #272]	; (8003b60 <bus_process+0x180>)
 8003a50:	0011      	movs	r1, r2
 8003a52:	0018      	movs	r0, r3
 8003a54:	f7ff ff4e 	bl	80038f4 <crc16>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	001a      	movs	r2, r3
 8003a5c:	2108      	movs	r1, #8
 8003a5e:	187b      	adds	r3, r7, r1
 8003a60:	801a      	strh	r2, [r3, #0]
			if (memcmp(&spiRxBuffer[MAX_SPI_DATA-3],&calc_CRC,2)==0)
 8003a62:	1879      	adds	r1, r7, r1
 8003a64:	4b3f      	ldr	r3, [pc, #252]	; (8003b64 <bus_process+0x184>)
 8003a66:	2202      	movs	r2, #2
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f006 fa0b 	bl	8009e84 <memcmp>
 8003a6e:	1e03      	subs	r3, r0, #0
 8003a70:	d135      	bne.n	8003ade <bus_process+0xfe>
			{
				for (int i=0;i<gCommandCount ;i++)
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	e02e      	b.n	8003ad6 <bus_process+0xf6>
				{
					if (commands[i].cmd == spiRxBuffer[PRT_CMD_IDX])
 8003a78:	4b3b      	ldr	r3, [pc, #236]	; (8003b68 <bus_process+0x188>)
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	00d2      	lsls	r2, r2, #3
 8003a7e:	5cd2      	ldrb	r2, [r2, r3]
 8003a80:	4b34      	ldr	r3, [pc, #208]	; (8003b54 <bus_process+0x174>)
 8003a82:	795b      	ldrb	r3, [r3, #5]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d123      	bne.n	8003ad0 <bus_process+0xf0>
					{
						uint8_t ret = commands[i].handler(&spiRxBuffer[PRT_DATA_S_IDX], MAX_SPI_DATA, &spiTxBuffer[PRT_DATA_S_IDX+1], &txSize);
 8003a88:	4a37      	ldr	r2, [pc, #220]	; (8003b68 <bus_process+0x188>)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	18d3      	adds	r3, r2, r3
 8003a90:	3304      	adds	r3, #4
 8003a92:	681c      	ldr	r4, [r3, #0]
 8003a94:	1dbd      	adds	r5, r7, #6
 8003a96:	4a35      	ldr	r2, [pc, #212]	; (8003b6c <bus_process+0x18c>)
 8003a98:	2380      	movs	r3, #128	; 0x80
 8003a9a:	0099      	lsls	r1, r3, #2
 8003a9c:	4834      	ldr	r0, [pc, #208]	; (8003b70 <bus_process+0x190>)
 8003a9e:	002b      	movs	r3, r5
 8003aa0:	47a0      	blx	r4
 8003aa2:	0002      	movs	r2, r0
 8003aa4:	230b      	movs	r3, #11
 8003aa6:	18fb      	adds	r3, r7, r3
 8003aa8:	701a      	strb	r2, [r3, #0]

						spiTxBuffer[PRT_DATA_S_IDX] = PRT_ACK;
 8003aaa:	4b29      	ldr	r3, [pc, #164]	; (8003b50 <bus_process+0x170>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	719a      	strb	r2, [r3, #6]
						txSize ++;
 8003ab0:	1dbb      	adds	r3, r7, #6
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	1dbb      	adds	r3, r7, #6
 8003aba:	801a      	strh	r2, [r3, #0]

						bus_frame_pack(commands[i].cmd,&txSize);
 8003abc:	4b2a      	ldr	r3, [pc, #168]	; (8003b68 <bus_process+0x188>)
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	00d2      	lsls	r2, r2, #3
 8003ac2:	5cd3      	ldrb	r3, [r2, r3]
 8003ac4:	1dba      	adds	r2, r7, #6
 8003ac6:	0011      	movs	r1, r2
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f7ff ff3d 	bl	8003948 <bus_frame_pack>
						//bus_transmit(MAX_SPI_DATA);
						break;
 8003ace:	e006      	b.n	8003ade <bus_process+0xfe>
				for (int i=0;i<gCommandCount ;i++)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	220f      	movs	r2, #15
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4293      	cmp	r3, r2
 8003adc:	dbcc      	blt.n	8003a78 <bus_process+0x98>
					}
				}
			}
			memset(spiRxBuffer, 0, MAX_SPI_DATA);
 8003ade:	2380      	movs	r3, #128	; 0x80
 8003ae0:	009a      	lsls	r2, r3, #2
 8003ae2:	4b1c      	ldr	r3, [pc, #112]	; (8003b54 <bus_process+0x174>)
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f006 f9e4 	bl	8009eb4 <memset>
		}



		/* Disable the peripheral */
		hdma_spi1_tx.Instance->CCR &= ~DMA_CCR_EN;
 8003aec:	4b21      	ldr	r3, [pc, #132]	; (8003b74 <bus_process+0x194>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	4b20      	ldr	r3, [pc, #128]	; (8003b74 <bus_process+0x194>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2101      	movs	r1, #1
 8003af8:	438a      	bics	r2, r1
 8003afa:	601a      	str	r2, [r3, #0]
		hdma_spi1_tx.DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma_spi1_tx.ChannelIndex);
 8003afc:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <bus_process+0x194>)
 8003afe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b00:	4b1c      	ldr	r3, [pc, #112]	; (8003b74 <bus_process+0x194>)
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	2101      	movs	r1, #1
 8003b06:	4091      	lsls	r1, r2
 8003b08:	000a      	movs	r2, r1
 8003b0a:	605a      	str	r2, [r3, #4]
		/* Configure DMA Channel data length */
		hdma_spi1_tx.Instance->CNDTR = MAX_SPI_DATA;
 8003b0c:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <bus_process+0x194>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2280      	movs	r2, #128	; 0x80
 8003b12:	0092      	lsls	r2, r2, #2
 8003b14:	605a      	str	r2, [r3, #4]
		/* Configure DMA Channel destination address */
		hdma_spi1_tx.Instance->CPAR = (uint32_t)&hspi1.Instance->DR;
 8003b16:	4b18      	ldr	r3, [pc, #96]	; (8003b78 <bus_process+0x198>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	330c      	adds	r3, #12
 8003b1c:	001a      	movs	r2, r3
 8003b1e:	4b15      	ldr	r3, [pc, #84]	; (8003b74 <bus_process+0x194>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	609a      	str	r2, [r3, #8]
		/* Configure DMA Channel source address */
		hdma_spi1_tx.Instance->CMAR = (uint32_t)&spiTxBuffer[0];
 8003b24:	4b13      	ldr	r3, [pc, #76]	; (8003b74 <bus_process+0x194>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a09      	ldr	r2, [pc, #36]	; (8003b50 <bus_process+0x170>)
 8003b2a:	60da      	str	r2, [r3, #12]
		/* Enable the Peripheral */
		hdma_spi1_tx.Instance->CCR |= DMA_CCR_EN;
 8003b2c:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <bus_process+0x194>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	4b10      	ldr	r3, [pc, #64]	; (8003b74 <bus_process+0x194>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2101      	movs	r1, #1
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	601a      	str	r2, [r3, #0]


		espMsgRcvd = 0;
 8003b3c:	4b03      	ldr	r3, [pc, #12]	; (8003b4c <bus_process+0x16c>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	701a      	strb	r2, [r3, #0]


	}


}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b004      	add	sp, #16
 8003b48:	bdb0      	pop	{r4, r5, r7, pc}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	20000668 	.word	0x20000668
 8003b50:	20000748 	.word	0x20000748
 8003b54:	20000468 	.word	0x20000468
 8003b58:	000001ff 	.word	0x000001ff
 8003b5c:	0800e578 	.word	0x0800e578
 8003b60:	20000469 	.word	0x20000469
 8003b64:	20000665 	.word	0x20000665
 8003b68:	0800e744 	.word	0x0800e744
 8003b6c:	2000074f 	.word	0x2000074f
 8003b70:	2000046e 	.word	0x2000046e
 8003b74:	20000e40 	.word	0x20000e40
 8003b78:	20000d1c 	.word	0x20000d1c

08003b7c <bus_comm_process>:

/******************************************************************************/

void bus_comm_process(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0

	/*dbg_printf("main  :[0]: %x - [1] : %x - [2] : %x [3] : %x\n", spiRxBuffer[0], spiRxBuffer[1], spiRxBuffer[2], spiRxBuffer[3]);
	dbg_printf("main  :[0]: %x - [1] : %x - [2] : %x [3] : %x\n", spiRxBuffer[4], spiRxBuffer[5], spiRxBuffer[6], spiRxBuffer[7]);
	dbg_printf("rxBuffer  :[511]: %x \n", spiRxBuffer[SPI_RX_BUFFER_SIZE-1]);*/

	if (enterBL)
 8003b80:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <bus_comm_process+0x1c>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <bus_comm_process+0x14>
	{
		HAL_Delay(200);
 8003b88:	20c8      	movs	r0, #200	; 0xc8
 8003b8a:	f001 fc1b 	bl	80053c4 <HAL_Delay>
		while(1)
 8003b8e:	e7fe      	b.n	8003b8e <bus_comm_process+0x12>
		{
			//bl_jump();
		}
	}

}
 8003b90:	46c0      	nop			; (mov r8, r8)
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	20000262 	.word	0x20000262

08003b9c <conf_writeconf>:
/* Implementation of functions                                                */
/*============================================================================*/


void conf_writeconf (tBoardConfig * c)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
	static tBoardConfig  *conf = (tBoardConfig *)&__CONFIG_START;
	for (int i=0;i<3;i++)
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	e016      	b.n	8003bd8 <conf_writeconf+0x3c>
	{
		FLASH_If_Erase((uint32_t)&__CONFIG_START,FLASH_PAGE_SIZE); 								//Delete 1 page
 8003baa:	4b10      	ldr	r3, [pc, #64]	; (8003bec <conf_writeconf+0x50>)
 8003bac:	2180      	movs	r1, #128	; 0x80
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f000 fc74 	bl	800449c <FLASH_If_Erase>
		FLASH_If_Write((uint32_t)&__CONFIG_START,(uint32_t *)c,sizeof(tBoardConfig)/sizeof(uint32_t));
 8003bb4:	4b0d      	ldr	r3, [pc, #52]	; (8003bec <conf_writeconf+0x50>)
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	2207      	movs	r2, #7
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f000 fca3 	bl	8004506 <FLASH_If_Write>
		if (memcmp(conf,c,sizeof(tBoardConfig))==0)
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <conf_writeconf+0x54>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	221c      	movs	r2, #28
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f006 f95b 	bl	8009e84 <memcmp>
 8003bce:	1e03      	subs	r3, r0, #0
 8003bd0:	d006      	beq.n	8003be0 <conf_writeconf+0x44>
	for (int i=0;i<3;i++)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	dde5      	ble.n	8003baa <conf_writeconf+0xe>
		{
			break;
		}
	}

}
 8003bde:	e000      	b.n	8003be2 <conf_writeconf+0x46>
			break;
 8003be0:	46c0      	nop			; (mov r8, r8)
}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	46bd      	mov	sp, r7
 8003be6:	b004      	add	sp, #16
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	0802f000 	.word	0x0802f000
 8003bf0:	20000030 	.word	0x20000030

08003bf4 <conf_checkandload>:

/******************************************************************************/
void conf_checkandload()
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
	static tBoardConfig  *conf = (tBoardConfig *)&__CONFIG_START;

	if ((memcmp(&conf->magic,&DefaultConfig.magic,4)!= 0) || (conf->vers != DefaultConfig.vers))
 8003bf8:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <conf_checkandload+0x44>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	4b0f      	ldr	r3, [pc, #60]	; (8003c3c <conf_checkandload+0x48>)
 8003c00:	2204      	movs	r2, #4
 8003c02:	0019      	movs	r1, r3
 8003c04:	f006 f93e 	bl	8009e84 <memcmp>
 8003c08:	1e03      	subs	r3, r0, #0
 8003c0a:	d106      	bne.n	8003c1a <conf_checkandload+0x26>
 8003c0c:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <conf_checkandload+0x44>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <conf_checkandload+0x48>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d003      	beq.n	8003c22 <conf_checkandload+0x2e>
	{
		conf_writeconf((tBoardConfig *)&DefaultConfig);
 8003c1a:	4b08      	ldr	r3, [pc, #32]	; (8003c3c <conf_checkandload+0x48>)
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	f7ff ffbd 	bl	8003b9c <conf_writeconf>
	}
	memcpy(&gBoardConfig,conf,sizeof(tBoardConfig));
 8003c22:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <conf_checkandload+0x44>)
 8003c24:	6819      	ldr	r1, [r3, #0]
 8003c26:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <conf_checkandload+0x4c>)
 8003c28:	221c      	movs	r2, #28
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f006 f939 	bl	8009ea2 <memcpy>
}
 8003c30:	46c0      	nop			; (mov r8, r8)
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	20000034 	.word	0x20000034
 8003c3c:	0800e9cc 	.word	0x0800e9cc
 8003c40:	2000069c 	.word	0x2000069c

08003c44 <conf_init>:
	memcpy(&gBoardConfig,conf,sizeof(tBoardConfig));
}

/******************************************************************************/
void conf_init()
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
	FLASH_If_Init();
 8003c48:	f000 fc18 	bl	800447c <FLASH_If_Init>
	conf_checkandload();
 8003c4c:	f7ff ffd2 	bl	8003bf4 <conf_checkandload>
}
 8003c50:	46c0      	nop			; (mov r8, r8)
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <debug_init>:
/*============================================================================*/
/* Implementation of functions                                                */
/*============================================================================*/

void debug_init()
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
	memset(dbg_tx_buffer,0,DEBUG_TX_BUFFER_SIZE);
 8003c5c:	2380      	movs	r3, #128	; 0x80
 8003c5e:	005a      	lsls	r2, r3, #1
 8003c60:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <debug_init+0x20>)
 8003c62:	2100      	movs	r1, #0
 8003c64:	0018      	movs	r0, r3
 8003c66:	f006 f925 	bl	8009eb4 <memset>
	dbg_tx_count = 0;
 8003c6a:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <debug_init+0x24>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
}
 8003c70:	46c0      	nop			; (mov r8, r8)
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	20000a48 	.word	0x20000a48
 8003c7c:	20000264 	.word	0x20000264

08003c80 <debug_transmit_buffer>:


/******************************************************************************/
void debug_transmit_buffer()
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
	uint32_t count = 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	607b      	str	r3, [r7, #4]
	while ((DEBUG_UART->gState != HAL_UART_STATE_READY) & (count < 65000))
 8003c8a:	e002      	b.n	8003c92 <debug_transmit_buffer+0x12>
	{
		//WDT_Feed();
		count ++;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	607b      	str	r3, [r7, #4]
	while ((DEBUG_UART->gState != HAL_UART_STATE_READY) & (count < 65000))
 8003c92:	4b13      	ldr	r3, [pc, #76]	; (8003ce0 <debug_transmit_buffer+0x60>)
 8003c94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c96:	3b20      	subs	r3, #32
 8003c98:	1e5a      	subs	r2, r3, #1
 8003c9a:	4193      	sbcs	r3, r2
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	4810      	ldr	r0, [pc, #64]	; (8003ce4 <debug_transmit_buffer+0x64>)
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	4288      	cmp	r0, r1
 8003ca6:	415b      	adcs	r3, r3
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	4013      	ands	r3, r2
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1ec      	bne.n	8003c8c <debug_transmit_buffer+0xc>
	}
	memcpy(dbg_tx_dma_buffer,dbg_tx_buffer,dbg_tx_count);
 8003cb2:	4b0d      	ldr	r3, [pc, #52]	; (8003ce8 <debug_transmit_buffer+0x68>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	490d      	ldr	r1, [pc, #52]	; (8003cec <debug_transmit_buffer+0x6c>)
 8003cb8:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <debug_transmit_buffer+0x70>)
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f006 f8f1 	bl	8009ea2 <memcpy>
	dbg_tx(dbg_tx_dma_buffer,dbg_tx_count);
 8003cc0:	4b09      	ldr	r3, [pc, #36]	; (8003ce8 <debug_transmit_buffer+0x68>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	490a      	ldr	r1, [pc, #40]	; (8003cf0 <debug_transmit_buffer+0x70>)
 8003cc8:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <debug_transmit_buffer+0x60>)
 8003cca:	0018      	movs	r0, r3
 8003ccc:	f004 fd88 	bl	80087e0 <HAL_UART_Transmit_DMA>
	dbg_tx_count = 0;
 8003cd0:	4b05      	ldr	r3, [pc, #20]	; (8003ce8 <debug_transmit_buffer+0x68>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]
}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b002      	add	sp, #8
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	20000c98 	.word	0x20000c98
 8003ce4:	0000fde7 	.word	0x0000fde7
 8003ce8:	20000264 	.word	0x20000264
 8003cec:	20000a48 	.word	0x20000a48
 8003cf0:	20000948 	.word	0x20000948

08003cf4 <__io_putchar>:

/******************************************************************************/

PUTCHAR_PROTOTYPE
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
	if (ch != '\r')
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b0d      	cmp	r3, #13
 8003d00:	d019      	beq.n	8003d36 <__io_putchar+0x42>
	{
		dbg_tx_buffer[dbg_tx_count++] = ch;
 8003d02:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <__io_putchar+0x4c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	1c59      	adds	r1, r3, #1
 8003d08:	4a0d      	ldr	r2, [pc, #52]	; (8003d40 <__io_putchar+0x4c>)
 8003d0a:	6011      	str	r1, [r2, #0]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	b2d1      	uxtb	r1, r2
 8003d10:	4a0c      	ldr	r2, [pc, #48]	; (8003d44 <__io_putchar+0x50>)
 8003d12:	54d1      	strb	r1, [r2, r3]

		if ((ch == '\n') || (dbg_tx_count >= DEBUG_TX_BUFFER_SIZE))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b0a      	cmp	r3, #10
 8003d18:	d003      	beq.n	8003d22 <__io_putchar+0x2e>
 8003d1a:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <__io_putchar+0x4c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2bff      	cmp	r3, #255	; 0xff
 8003d20:	d909      	bls.n	8003d36 <__io_putchar+0x42>
		{
			dbg_tx_buffer[dbg_tx_count++] = '\r';
 8003d22:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <__io_putchar+0x4c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	1c59      	adds	r1, r3, #1
 8003d28:	4a05      	ldr	r2, [pc, #20]	; (8003d40 <__io_putchar+0x4c>)
 8003d2a:	6011      	str	r1, [r2, #0]
 8003d2c:	4a05      	ldr	r2, [pc, #20]	; (8003d44 <__io_putchar+0x50>)
 8003d2e:	210d      	movs	r1, #13
 8003d30:	54d1      	strb	r1, [r2, r3]
			debug_transmit_buffer();
 8003d32:	f7ff ffa5 	bl	8003c80 <debug_transmit_buffer>
		}
	}

	return ch;
 8003d36:	687b      	ldr	r3, [r7, #4]
}
 8003d38:	0018      	movs	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	b002      	add	sp, #8
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	20000264 	.word	0x20000264
 8003d44:	20000a48 	.word	0x20000a48

08003d48 <Delay>:
/**
 * @brief Delay for specified period
 * @param micros	delay time in microseconds
 */
void Delay(uint32_t micros)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
	  /* Go to clock cycles */
	  	micros *= (SystemCoreClock / 1000000) / 5;
 8003d50:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <Delay+0x34>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	490a      	ldr	r1, [pc, #40]	; (8003d80 <Delay+0x38>)
 8003d56:	0018      	movs	r0, r3
 8003d58:	f7fc f9e8 	bl	800012c <__udivsi3>
 8003d5c:	0003      	movs	r3, r0
 8003d5e:	001a      	movs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4353      	muls	r3, r2
 8003d64:	607b      	str	r3, [r7, #4]

	  	/* Wait till done */
	  	while (micros--);
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	1e5a      	subs	r2, r3, #1
 8003d6c:	607a      	str	r2, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1fa      	bne.n	8003d68 <Delay+0x20>
}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	46bd      	mov	sp, r7
 8003d76:	b002      	add	sp, #8
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	46c0      	nop			; (mov r8, r8)
 8003d7c:	20000058 	.word	0x20000058
 8003d80:	004c4b40 	.word	0x004c4b40

08003d84 <softI2C_sleep_usec>:
/**
 * @brief Sleep required for softI2C implementation
 * @param useconds	delay time in microseconds
 */
void softI2C_sleep_usec(uint32_t useconds)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
	Delay(useconds);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f7ff ffda 	bl	8003d48 <Delay>
}
 8003d94:	46c0      	nop			; (mov r8, r8)
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b002      	add	sp, #8
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <softI2C_SCL_read>:
/**
 * @brief Read SCL pin and return
 * @return
 */
uint8_t softI2C_SCL_read(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
    return (uint8_t)HAL_GPIO_ReadPin(gSoftIC2.port, gSoftIC2.scl) == GPIO_PIN_SET;
 8003da0:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <softI2C_SCL_read+0x20>)
 8003da2:	2240      	movs	r2, #64	; 0x40
 8003da4:	0011      	movs	r1, r2
 8003da6:	0018      	movs	r0, r3
 8003da8:	f002 fa4c 	bl	8006244 <HAL_GPIO_ReadPin>
 8003dac:	0003      	movs	r3, r0
 8003dae:	3b01      	subs	r3, #1
 8003db0:	425a      	negs	r2, r3
 8003db2:	4153      	adcs	r3, r2
 8003db4:	b2db      	uxtb	r3, r3
}
 8003db6:	0018      	movs	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	50000400 	.word	0x50000400

08003dc0 <softI2C_SDA_read>:
/**
 * @brief Read SDA pin and return
 * @return
 */
uint8_t softI2C_SDA_read(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
    return (uint8_t)HAL_GPIO_ReadPin(gSoftIC2.port, gSoftIC2.sda) == GPIO_PIN_SET;
 8003dc4:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <softI2C_SDA_read+0x20>)
 8003dc6:	2280      	movs	r2, #128	; 0x80
 8003dc8:	0011      	movs	r1, r2
 8003dca:	0018      	movs	r0, r3
 8003dcc:	f002 fa3a 	bl	8006244 <HAL_GPIO_ReadPin>
 8003dd0:	0003      	movs	r3, r0
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	425a      	negs	r2, r3
 8003dd6:	4153      	adcs	r3, r2
 8003dd8:	b2db      	uxtb	r3, r3
}
 8003dda:	0018      	movs	r0, r3
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	50000400 	.word	0x50000400

08003de4 <softI2C_wait_while_clock_stretching>:
/**
 * @brief Wait for SoftI2C
 * @return 0 or -1
 */
static uint8_t softI2C_wait_while_clock_stretching(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
    uint8_t timeout = 100;
 8003dea:	1dfb      	adds	r3, r7, #7
 8003dec:	2264      	movs	r2, #100	; 0x64
 8003dee:	701a      	strb	r2, [r3, #0]

    while (--timeout) {
 8003df0:	e008      	b.n	8003e04 <softI2C_wait_while_clock_stretching+0x20>
        if (softI2C_SCL_read())
 8003df2:	f7ff ffd3 	bl	8003d9c <softI2C_SCL_read>
 8003df6:	1e03      	subs	r3, r0, #0
 8003df8:	d001      	beq.n	8003dfe <softI2C_wait_while_clock_stretching+0x1a>
            return 0;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	e00c      	b.n	8003e18 <softI2C_wait_while_clock_stretching+0x34>
        softI2C_sleep_usec(SOFTI2C_WAIT);
 8003dfe:	2005      	movs	r0, #5
 8003e00:	f7ff ffc0 	bl	8003d84 <softI2C_sleep_usec>
    while (--timeout) {
 8003e04:	1dfb      	adds	r3, r7, #7
 8003e06:	1dfa      	adds	r2, r7, #7
 8003e08:	7812      	ldrb	r2, [r2, #0]
 8003e0a:	3a01      	subs	r2, #1
 8003e0c:	701a      	strb	r2, [r3, #0]
 8003e0e:	1dfb      	adds	r3, r7, #7
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1ed      	bne.n	8003df2 <softI2C_wait_while_clock_stretching+0xe>
    }

    return -1;
 8003e16:	23ff      	movs	r3, #255	; 0xff
}
 8003e18:	0018      	movs	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	b002      	add	sp, #8
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <softI2C_SDA_in>:
/*****************************************************************************/
/**
 * @brief Change SDA mode input
 */
void softI2C_SDA_in(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {
 8003e26:	1d3b      	adds	r3, r7, #4
 8003e28:	0018      	movs	r0, r3
 8003e2a:	2314      	movs	r3, #20
 8003e2c:	001a      	movs	r2, r3
 8003e2e:	2100      	movs	r1, #0
 8003e30:	f006 f840 	bl	8009eb4 <memset>
        .Pin = gSoftIC2.sda,
 8003e34:	2380      	movs	r3, #128	; 0x80
 8003e36:	001a      	movs	r2, r3
    GPIO_InitTypeDef GPIO_InitStruct = {
 8003e38:	1d3b      	adds	r3, r7, #4
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	1d3b      	adds	r3, r7, #4
 8003e3e:	2201      	movs	r2, #1
 8003e40:	609a      	str	r2, [r3, #8]
 8003e42:	1d3b      	adds	r3, r7, #4
 8003e44:	2202      	movs	r2, #2
 8003e46:	60da      	str	r2, [r3, #12]
        .Mode = GPIO_MODE_INPUT,
        .Pull = GPIO_PULLUP,
        .Speed = GPIO_SPEED_FREQ_HIGH,
    };
    HAL_GPIO_Init(gSoftIC2.port, &GPIO_InitStruct);
 8003e48:	4a04      	ldr	r2, [pc, #16]	; (8003e5c <softI2C_SDA_in+0x3c>)
 8003e4a:	1d3b      	adds	r3, r7, #4
 8003e4c:	0019      	movs	r1, r3
 8003e4e:	0010      	movs	r0, r2
 8003e50:	f002 f87a 	bl	8005f48 <HAL_GPIO_Init>
}
 8003e54:	46c0      	nop			; (mov r8, r8)
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b006      	add	sp, #24
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	50000400 	.word	0x50000400

08003e60 <softI2C_SDA_out>:
/*****************************************************************************/
/**
 * @brief Change SDA mode output
 */
void softI2C_SDA_out(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {
 8003e66:	1d3b      	adds	r3, r7, #4
 8003e68:	0018      	movs	r0, r3
 8003e6a:	2314      	movs	r3, #20
 8003e6c:	001a      	movs	r2, r3
 8003e6e:	2100      	movs	r1, #0
 8003e70:	f006 f820 	bl	8009eb4 <memset>
        .Pin = gSoftIC2.sda,
 8003e74:	2380      	movs	r3, #128	; 0x80
 8003e76:	001a      	movs	r2, r3
    GPIO_InitTypeDef GPIO_InitStruct = {
 8003e78:	1d3b      	adds	r3, r7, #4
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	1d3b      	adds	r3, r7, #4
 8003e7e:	2201      	movs	r2, #1
 8003e80:	605a      	str	r2, [r3, #4]
 8003e82:	1d3b      	adds	r3, r7, #4
 8003e84:	2201      	movs	r2, #1
 8003e86:	609a      	str	r2, [r3, #8]
 8003e88:	1d3b      	adds	r3, r7, #4
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	60da      	str	r2, [r3, #12]
        .Mode = GPIO_MODE_OUTPUT_PP,
        .Pull = GPIO_PULLUP,
        .Speed = GPIO_SPEED_FREQ_HIGH,
    };
    HAL_GPIO_Init(gSoftIC2.port, &GPIO_InitStruct);
 8003e8e:	4a08      	ldr	r2, [pc, #32]	; (8003eb0 <softI2C_SDA_out+0x50>)
 8003e90:	1d3b      	adds	r3, r7, #4
 8003e92:	0019      	movs	r1, r3
 8003e94:	0010      	movs	r0, r2
 8003e96:	f002 f857 	bl	8005f48 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(gSoftIC2.port, gSoftIC2.sda, GPIO_PIN_RESET);
 8003e9a:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <softI2C_SDA_out+0x50>)
 8003e9c:	2180      	movs	r1, #128	; 0x80
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f002 f9ec 	bl	800627e <HAL_GPIO_WritePin>
}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	b006      	add	sp, #24
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	46c0      	nop			; (mov r8, r8)
 8003eb0:	50000400 	.word	0x50000400

08003eb4 <softI2C_SCL_in>:
/*****************************************************************************/
/**
 * @brief Change SCL mode input
 */
void softI2C_SCL_in(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {
 8003eba:	1d3b      	adds	r3, r7, #4
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	2314      	movs	r3, #20
 8003ec0:	001a      	movs	r2, r3
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	f005 fff6 	bl	8009eb4 <memset>
        .Pin = gSoftIC2.scl,
 8003ec8:	2340      	movs	r3, #64	; 0x40
 8003eca:	001a      	movs	r2, r3
    GPIO_InitTypeDef GPIO_InitStruct = {
 8003ecc:	1d3b      	adds	r3, r7, #4
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	1d3b      	adds	r3, r7, #4
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	609a      	str	r2, [r3, #8]
 8003ed6:	1d3b      	adds	r3, r7, #4
 8003ed8:	2202      	movs	r2, #2
 8003eda:	60da      	str	r2, [r3, #12]
        .Mode = GPIO_MODE_INPUT,
        .Pull = GPIO_PULLUP,
        .Speed = GPIO_SPEED_FREQ_HIGH,
    };
    HAL_GPIO_Init(gSoftIC2.port, &GPIO_InitStruct);
 8003edc:	4a04      	ldr	r2, [pc, #16]	; (8003ef0 <softI2C_SCL_in+0x3c>)
 8003ede:	1d3b      	adds	r3, r7, #4
 8003ee0:	0019      	movs	r1, r3
 8003ee2:	0010      	movs	r0, r2
 8003ee4:	f002 f830 	bl	8005f48 <HAL_GPIO_Init>
}
 8003ee8:	46c0      	nop			; (mov r8, r8)
 8003eea:	46bd      	mov	sp, r7
 8003eec:	b006      	add	sp, #24
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	50000400 	.word	0x50000400

08003ef4 <softI2C_SCL_out>:
/*****************************************************************************/
/**
 * @brief Change SCL mode output
 */
void softI2C_SCL_out(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {
 8003efa:	1d3b      	adds	r3, r7, #4
 8003efc:	0018      	movs	r0, r3
 8003efe:	2314      	movs	r3, #20
 8003f00:	001a      	movs	r2, r3
 8003f02:	2100      	movs	r1, #0
 8003f04:	f005 ffd6 	bl	8009eb4 <memset>
        .Pin = gSoftIC2.scl,
 8003f08:	2340      	movs	r3, #64	; 0x40
 8003f0a:	001a      	movs	r2, r3
    GPIO_InitTypeDef GPIO_InitStruct = {
 8003f0c:	1d3b      	adds	r3, r7, #4
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	1d3b      	adds	r3, r7, #4
 8003f12:	2201      	movs	r2, #1
 8003f14:	605a      	str	r2, [r3, #4]
 8003f16:	1d3b      	adds	r3, r7, #4
 8003f18:	2201      	movs	r2, #1
 8003f1a:	609a      	str	r2, [r3, #8]
 8003f1c:	1d3b      	adds	r3, r7, #4
 8003f1e:	2202      	movs	r2, #2
 8003f20:	60da      	str	r2, [r3, #12]
        .Mode = GPIO_MODE_OUTPUT_PP,
        .Pull = GPIO_PULLUP,
        .Speed = GPIO_SPEED_FREQ_HIGH,
    };
    HAL_GPIO_Init(gSoftIC2.port, &GPIO_InitStruct);
 8003f22:	4a08      	ldr	r2, [pc, #32]	; (8003f44 <softI2C_SCL_out+0x50>)
 8003f24:	1d3b      	adds	r3, r7, #4
 8003f26:	0019      	movs	r1, r3
 8003f28:	0010      	movs	r0, r2
 8003f2a:	f002 f80d 	bl	8005f48 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(gSoftIC2.port, gSoftIC2.scl, GPIO_PIN_RESET);
 8003f2e:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <softI2C_SCL_out+0x50>)
 8003f30:	2140      	movs	r1, #64	; 0x40
 8003f32:	2200      	movs	r2, #0
 8003f34:	0018      	movs	r0, r3
 8003f36:	f002 f9a2 	bl	800627e <HAL_GPIO_WritePin>
}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	b006      	add	sp, #24
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	50000400 	.word	0x50000400

08003f48 <softI2C_start>:
/**
 * @brief Soft I2C start
 * @return	-1 or 0
 */
static uint8_t softI2C_start(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
    softI2C_SCL_in();
 8003f4c:	f7ff ffb2 	bl	8003eb4 <softI2C_SCL_in>
    if (softI2C_wait_while_clock_stretching())
 8003f50:	f7ff ff48 	bl	8003de4 <softI2C_wait_while_clock_stretching>
 8003f54:	1e03      	subs	r3, r0, #0
 8003f56:	d001      	beq.n	8003f5c <softI2C_start+0x14>
        return -1;
 8003f58:	23ff      	movs	r3, #255	; 0xff
 8003f5a:	e00a      	b.n	8003f72 <softI2C_start+0x2a>

    softI2C_SDA_out();
 8003f5c:	f7ff ff80 	bl	8003e60 <softI2C_SDA_out>
    softI2C_sleep_usec(SOFTI2C_WAIT);
 8003f60:	2005      	movs	r0, #5
 8003f62:	f7ff ff0f 	bl	8003d84 <softI2C_sleep_usec>
    softI2C_SCL_out();
 8003f66:	f7ff ffc5 	bl	8003ef4 <softI2C_SCL_out>
    softI2C_sleep_usec(SOFTI2C_WAIT);
 8003f6a:	2005      	movs	r0, #5
 8003f6c:	f7ff ff0a 	bl	8003d84 <softI2C_sleep_usec>
    return 0;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	0018      	movs	r0, r3
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <softI2C_stop>:
/*****************************************************************************/
/**
 * @brief Soft I2C stop
 */
static void softI2C_stop(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
	softI2C_SDA_out();
 8003f7c:	f7ff ff70 	bl	8003e60 <softI2C_SDA_out>
	softI2C_sleep_usec(SOFTI2C_WAIT);
 8003f80:	2005      	movs	r0, #5
 8003f82:	f7ff feff 	bl	8003d84 <softI2C_sleep_usec>
    softI2C_SCL_in();
 8003f86:	f7ff ff95 	bl	8003eb4 <softI2C_SCL_in>
    softI2C_sleep_usec(SOFTI2C_WAIT);
 8003f8a:	2005      	movs	r0, #5
 8003f8c:	f7ff fefa 	bl	8003d84 <softI2C_sleep_usec>
    softI2C_SDA_in();
 8003f90:	f7ff ff46 	bl	8003e20 <softI2C_SDA_in>
    softI2C_sleep_usec(SOFTI2C_WAIT);
 8003f94:	2005      	movs	r0, #5
 8003f96:	f7ff fef5 	bl	8003d84 <softI2C_sleep_usec>
}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <softI2C_fill_cmd_send_buf>:
 * @param num_args	number of arguments	(Unused)
 * @return	index in buffer
 */
uint16_t softI2C_fill_cmd_send_buf(uint8_t *buf, uint16_t cmd,
                                     const uint16_t *args, uint8_t num_args)
{
 8003fa0:	b5b0      	push	{r4, r5, r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	0008      	movs	r0, r1
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	0019      	movs	r1, r3
 8003fae:	250a      	movs	r5, #10
 8003fb0:	197b      	adds	r3, r7, r5
 8003fb2:	1c02      	adds	r2, r0, #0
 8003fb4:	801a      	strh	r2, [r3, #0]
 8003fb6:	2309      	movs	r3, #9
 8003fb8:	18fb      	adds	r3, r7, r3
 8003fba:	1c0a      	adds	r2, r1, #0
 8003fbc:	701a      	strb	r2, [r3, #0]
    uint16_t idx = 0;
 8003fbe:	2016      	movs	r0, #22
 8003fc0:	183b      	adds	r3, r7, r0
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	801a      	strh	r2, [r3, #0]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 8003fc6:	197b      	adds	r3, r7, r5
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	0a1b      	lsrs	r3, r3, #8
 8003fcc:	b299      	uxth	r1, r3
 8003fce:	183b      	adds	r3, r7, r0
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	0004      	movs	r4, r0
 8003fd4:	183a      	adds	r2, r7, r0
 8003fd6:	1c58      	adds	r0, r3, #1
 8003fd8:	8010      	strh	r0, [r2, #0]
 8003fda:	001a      	movs	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	189b      	adds	r3, r3, r2
 8003fe0:	b2ca      	uxtb	r2, r1
 8003fe2:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 8003fe4:	0020      	movs	r0, r4
 8003fe6:	183b      	adds	r3, r7, r0
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	183a      	adds	r2, r7, r0
 8003fec:	1c59      	adds	r1, r3, #1
 8003fee:	8011      	strh	r1, [r2, #0]
 8003ff0:	001a      	movs	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	189b      	adds	r3, r3, r2
 8003ff6:	197a      	adds	r2, r7, r5
 8003ff8:	8812      	ldrh	r2, [r2, #0]
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]

    return idx;
 8003ffe:	183b      	adds	r3, r7, r0
 8004000:	881b      	ldrh	r3, [r3, #0]
}
 8004002:	0018      	movs	r0, r3
 8004004:	46bd      	mov	sp, r7
 8004006:	b006      	add	sp, #24
 8004008:	bdb0      	pop	{r4, r5, r7, pc}

0800400a <STS31_WriteCmd_soft>:
 * @brief SoftI2C Write command to STS31 thermal sensor chip
 * @param data	data to be sent
 * @return	-1 or 0
 */
int STS31_WriteCmd_soft(uint8_t data)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	0002      	movs	r2, r0
 8004012:	1dfb      	adds	r3, r7, #7
 8004014:	701a      	strb	r2, [r3, #0]
	int8_t nack, i;
	for (i = 7; i >= 0; i--)
 8004016:	230f      	movs	r3, #15
 8004018:	18fb      	adds	r3, r7, r3
 800401a:	2207      	movs	r2, #7
 800401c:	701a      	strb	r2, [r3, #0]
 800401e:	e029      	b.n	8004074 <STS31_WriteCmd_soft+0x6a>
	{
		softI2C_SCL_out();
 8004020:	f7ff ff68 	bl	8003ef4 <softI2C_SCL_out>
		if ((data >> i) & 0x01)
 8004024:	1dfb      	adds	r3, r7, #7
 8004026:	781a      	ldrb	r2, [r3, #0]
 8004028:	230f      	movs	r3, #15
 800402a:	18fb      	adds	r3, r7, r3
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	b25b      	sxtb	r3, r3
 8004030:	411a      	asrs	r2, r3
 8004032:	0013      	movs	r3, r2
 8004034:	2201      	movs	r2, #1
 8004036:	4013      	ands	r3, r2
 8004038:	d002      	beq.n	8004040 <STS31_WriteCmd_soft+0x36>
			softI2C_SDA_in();
 800403a:	f7ff fef1 	bl	8003e20 <softI2C_SDA_in>
 800403e:	e001      	b.n	8004044 <STS31_WriteCmd_soft+0x3a>
		else
			softI2C_SDA_out();
 8004040:	f7ff ff0e 	bl	8003e60 <softI2C_SDA_out>
		softI2C_sleep_usec(SOFTI2C_WAIT);
 8004044:	2005      	movs	r0, #5
 8004046:	f7ff fe9d 	bl	8003d84 <softI2C_sleep_usec>
		softI2C_SCL_in();
 800404a:	f7ff ff33 	bl	8003eb4 <softI2C_SCL_in>
		softI2C_sleep_usec(SOFTI2C_WAIT);
 800404e:	2005      	movs	r0, #5
 8004050:	f7ff fe98 	bl	8003d84 <softI2C_sleep_usec>
		if (softI2C_wait_while_clock_stretching())
 8004054:	f7ff fec6 	bl	8003de4 <softI2C_wait_while_clock_stretching>
 8004058:	1e03      	subs	r3, r0, #0
 800405a:	d002      	beq.n	8004062 <STS31_WriteCmd_soft+0x58>
			return -1;
 800405c:	2301      	movs	r3, #1
 800405e:	425b      	negs	r3, r3
 8004060:	e029      	b.n	80040b6 <STS31_WriteCmd_soft+0xac>
	for (i = 7; i >= 0; i--)
 8004062:	210f      	movs	r1, #15
 8004064:	187b      	adds	r3, r7, r1
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	b25b      	sxtb	r3, r3
 800406a:	b2db      	uxtb	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b2da      	uxtb	r2, r3
 8004070:	187b      	adds	r3, r7, r1
 8004072:	701a      	strb	r2, [r3, #0]
 8004074:	230f      	movs	r3, #15
 8004076:	18fb      	adds	r3, r7, r3
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	2b7f      	cmp	r3, #127	; 0x7f
 800407c:	d9d0      	bls.n	8004020 <STS31_WriteCmd_soft+0x16>
	}
	softI2C_SCL_out();
 800407e:	f7ff ff39 	bl	8003ef4 <softI2C_SCL_out>
	softI2C_SDA_in();
 8004082:	f7ff fecd 	bl	8003e20 <softI2C_SDA_in>
	softI2C_sleep_usec(SOFTI2C_WAIT);
 8004086:	2005      	movs	r0, #5
 8004088:	f7ff fe7c 	bl	8003d84 <softI2C_sleep_usec>
	softI2C_SCL_in();
 800408c:	f7ff ff12 	bl	8003eb4 <softI2C_SCL_in>
	if (softI2C_wait_while_clock_stretching())
 8004090:	f7ff fea8 	bl	8003de4 <softI2C_wait_while_clock_stretching>
 8004094:	1e03      	subs	r3, r0, #0
 8004096:	d002      	beq.n	800409e <STS31_WriteCmd_soft+0x94>
		return -1;
 8004098:	2301      	movs	r3, #1
 800409a:	425b      	negs	r3, r3
 800409c:	e00b      	b.n	80040b6 <STS31_WriteCmd_soft+0xac>
	nack = (softI2C_SDA_read() != 0);
 800409e:	f7ff fe8f 	bl	8003dc0 <softI2C_SDA_read>
 80040a2:	0003      	movs	r3, r0
 80040a4:	1e5a      	subs	r2, r3, #1
 80040a6:	4193      	sbcs	r3, r2
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	230e      	movs	r3, #14
 80040ac:	18fb      	adds	r3, r7, r3
 80040ae:	701a      	strb	r2, [r3, #0]
	softI2C_SCL_out();
 80040b0:	f7ff ff20 	bl	8003ef4 <softI2C_SCL_out>

	return 0;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	0018      	movs	r0, r3
 80040b8:	46bd      	mov	sp, r7
 80040ba:	b004      	add	sp, #16
 80040bc:	bd80      	pop	{r7, pc}

080040be <STS31_ReadCmd_soft>:
 * @brief SoftI2C Read command from STS31 thermal sensor chip
 * @param ack	send ack or not
 * @return	data or -1
 */
int STS31_ReadCmd_soft(uint8_t ack)
{
 80040be:	b590      	push	{r4, r7, lr}
 80040c0:	b085      	sub	sp, #20
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	0002      	movs	r2, r0
 80040c6:	1dfb      	adds	r3, r7, #7
 80040c8:	701a      	strb	r2, [r3, #0]
	int8_t i;
	uint8_t data = 0;
 80040ca:	230e      	movs	r3, #14
 80040cc:	18fb      	adds	r3, r7, r3
 80040ce:	2200      	movs	r2, #0
 80040d0:	701a      	strb	r2, [r3, #0]
	softI2C_SDA_in();
 80040d2:	f7ff fea5 	bl	8003e20 <softI2C_SDA_in>
	for (i = 7; i >= 0; i--)
 80040d6:	230f      	movs	r3, #15
 80040d8:	18fb      	adds	r3, r7, r3
 80040da:	2207      	movs	r2, #7
 80040dc:	701a      	strb	r2, [r3, #0]
 80040de:	e02b      	b.n	8004138 <STS31_ReadCmd_soft+0x7a>
	{
		softI2C_sleep_usec(SOFTI2C_WAIT);
 80040e0:	2005      	movs	r0, #5
 80040e2:	f7ff fe4f 	bl	8003d84 <softI2C_sleep_usec>
		softI2C_SCL_in();
 80040e6:	f7ff fee5 	bl	8003eb4 <softI2C_SCL_in>
		if (softI2C_wait_while_clock_stretching())
 80040ea:	f7ff fe7b 	bl	8003de4 <softI2C_wait_while_clock_stretching>
 80040ee:	1e03      	subs	r3, r0, #0
 80040f0:	d002      	beq.n	80040f8 <STS31_ReadCmd_soft+0x3a>
			return -1;
 80040f2:	2301      	movs	r3, #1
 80040f4:	425b      	negs	r3, r3
 80040f6:	e043      	b.n	8004180 <STS31_ReadCmd_soft+0xc2>
		data |= (softI2C_SDA_read() != 0) << i;
 80040f8:	f7ff fe62 	bl	8003dc0 <softI2C_SDA_read>
 80040fc:	0003      	movs	r3, r0
 80040fe:	1e5a      	subs	r2, r3, #1
 8004100:	4193      	sbcs	r3, r2
 8004102:	b2db      	uxtb	r3, r3
 8004104:	001a      	movs	r2, r3
 8004106:	240f      	movs	r4, #15
 8004108:	193b      	adds	r3, r7, r4
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	b25b      	sxtb	r3, r3
 800410e:	409a      	lsls	r2, r3
 8004110:	0013      	movs	r3, r2
 8004112:	b25a      	sxtb	r2, r3
 8004114:	210e      	movs	r1, #14
 8004116:	187b      	adds	r3, r7, r1
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	b25b      	sxtb	r3, r3
 800411c:	4313      	orrs	r3, r2
 800411e:	b25a      	sxtb	r2, r3
 8004120:	187b      	adds	r3, r7, r1
 8004122:	701a      	strb	r2, [r3, #0]
		softI2C_SCL_out();
 8004124:	f7ff fee6 	bl	8003ef4 <softI2C_SCL_out>
	for (i = 7; i >= 0; i--)
 8004128:	193b      	adds	r3, r7, r4
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	b25b      	sxtb	r3, r3
 800412e:	b2db      	uxtb	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b2da      	uxtb	r2, r3
 8004134:	193b      	adds	r3, r7, r4
 8004136:	701a      	strb	r2, [r3, #0]
 8004138:	230f      	movs	r3, #15
 800413a:	18fb      	adds	r3, r7, r3
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b7f      	cmp	r3, #127	; 0x7f
 8004140:	d9ce      	bls.n	80040e0 <STS31_ReadCmd_soft+0x22>
	}
	if (ack)
 8004142:	1dfb      	adds	r3, r7, #7
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <STS31_ReadCmd_soft+0x92>
		softI2C_SDA_out();
 800414a:	f7ff fe89 	bl	8003e60 <softI2C_SDA_out>
 800414e:	e001      	b.n	8004154 <STS31_ReadCmd_soft+0x96>
	else
		softI2C_SDA_in();
 8004150:	f7ff fe66 	bl	8003e20 <softI2C_SDA_in>
	softI2C_sleep_usec(SOFTI2C_WAIT);
 8004154:	2005      	movs	r0, #5
 8004156:	f7ff fe15 	bl	8003d84 <softI2C_sleep_usec>
	softI2C_SCL_in();
 800415a:	f7ff feab 	bl	8003eb4 <softI2C_SCL_in>
	softI2C_sleep_usec(SOFTI2C_WAIT);
 800415e:	2005      	movs	r0, #5
 8004160:	f7ff fe10 	bl	8003d84 <softI2C_sleep_usec>
	if (softI2C_wait_while_clock_stretching())
 8004164:	f7ff fe3e 	bl	8003de4 <softI2C_wait_while_clock_stretching>
 8004168:	1e03      	subs	r3, r0, #0
 800416a:	d002      	beq.n	8004172 <STS31_ReadCmd_soft+0xb4>
		return -1;
 800416c:	2301      	movs	r3, #1
 800416e:	425b      	negs	r3, r3
 8004170:	e006      	b.n	8004180 <STS31_ReadCmd_soft+0xc2>
	softI2C_SCL_out();
 8004172:	f7ff febf 	bl	8003ef4 <softI2C_SCL_out>
	softI2C_SDA_in();
 8004176:	f7ff fe53 	bl	8003e20 <softI2C_SDA_in>

	return data;
 800417a:	230e      	movs	r3, #14
 800417c:	18fb      	adds	r3, r7, r3
 800417e:	781b      	ldrb	r3, [r3, #0]
}
 8004180:	0018      	movs	r0, r3
 8004182:	46bd      	mov	sp, r7
 8004184:	b005      	add	sp, #20
 8004186:	bd90      	pop	{r4, r7, pc}

08004188 <softI2C_i2c_write>:
 * @param count		unused
 * @return	-1 or return value
 */
int8_t softI2C_i2c_write(uint8_t address, const uint16_t cmd,
                           uint16_t count)
{
 8004188:	b590      	push	{r4, r7, lr}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	0004      	movs	r4, r0
 8004190:	0008      	movs	r0, r1
 8004192:	0011      	movs	r1, r2
 8004194:	1dfb      	adds	r3, r7, #7
 8004196:	1c22      	adds	r2, r4, #0
 8004198:	701a      	strb	r2, [r3, #0]
 800419a:	1d3b      	adds	r3, r7, #4
 800419c:	1c02      	adds	r2, r0, #0
 800419e:	801a      	strh	r2, [r3, #0]
 80041a0:	1cbb      	adds	r3, r7, #2
 80041a2:	1c0a      	adds	r2, r1, #0
 80041a4:	801a      	strh	r2, [r3, #0]
    int8_t ret;
    uint8_t buf[2];

    softI2C_fill_cmd_send_buf(buf, cmd, NULL, 0);
 80041a6:	1d3b      	adds	r3, r7, #4
 80041a8:	8819      	ldrh	r1, [r3, #0]
 80041aa:	230c      	movs	r3, #12
 80041ac:	18f8      	adds	r0, r7, r3
 80041ae:	2300      	movs	r3, #0
 80041b0:	2200      	movs	r2, #0
 80041b2:	f7ff fef5 	bl	8003fa0 <softI2C_fill_cmd_send_buf>

    ret = softI2C_start();
 80041b6:	f7ff fec7 	bl	8003f48 <softI2C_start>
 80041ba:	0003      	movs	r3, r0
 80041bc:	001a      	movs	r2, r3
 80041be:	2117      	movs	r1, #23
 80041c0:	187b      	adds	r3, r7, r1
 80041c2:	701a      	strb	r2, [r3, #0]
    if (ret != 0)
 80041c4:	187b      	adds	r3, r7, r1
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	b25b      	sxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <softI2C_i2c_write+0x4c>
        return -1;
 80041ce:	2301      	movs	r3, #1
 80041d0:	425b      	negs	r3, r3
 80041d2:	e02f      	b.n	8004234 <softI2C_i2c_write+0xac>

    ret = STS31_WriteCmd_soft(address << 1 | 0);
 80041d4:	1dfb      	adds	r3, r7, #7
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	18db      	adds	r3, r3, r3
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	0018      	movs	r0, r3
 80041de:	f7ff ff14 	bl	800400a <STS31_WriteCmd_soft>
 80041e2:	0002      	movs	r2, r0
 80041e4:	2117      	movs	r1, #23
 80041e6:	187b      	adds	r3, r7, r1
 80041e8:	701a      	strb	r2, [r3, #0]
    if (ret != 0) {
 80041ea:	187b      	adds	r3, r7, r1
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	b25b      	sxtb	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d004      	beq.n	80041fe <softI2C_i2c_write+0x76>
        softI2C_stop();
 80041f4:	f7ff fec0 	bl	8003f78 <softI2C_stop>
        return -1;
 80041f8:	2301      	movs	r3, #1
 80041fa:	425b      	negs	r3, r3
 80041fc:	e01a      	b.n	8004234 <softI2C_i2c_write+0xac>
    }

    for (int i = 0; i < 2; i++)
 80041fe:	2300      	movs	r3, #0
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	e00e      	b.n	8004222 <softI2C_i2c_write+0x9a>
    {
    	ret = STS31_WriteCmd_soft(buf[i]);
 8004204:	230c      	movs	r3, #12
 8004206:	18fa      	adds	r2, r7, r3
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	18d3      	adds	r3, r2, r3
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	0018      	movs	r0, r3
 8004210:	f7ff fefb 	bl	800400a <STS31_WriteCmd_soft>
 8004214:	0002      	movs	r2, r0
 8004216:	2317      	movs	r3, #23
 8004218:	18fb      	adds	r3, r7, r3
 800421a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 2; i++)
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	3301      	adds	r3, #1
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	2b01      	cmp	r3, #1
 8004226:	dded      	ble.n	8004204 <softI2C_i2c_write+0x7c>
    }

    softI2C_stop();
 8004228:	f7ff fea6 	bl	8003f78 <softI2C_stop>
    return ret;
 800422c:	2317      	movs	r3, #23
 800422e:	18fb      	adds	r3, r7, r3
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	b25b      	sxtb	r3, r3
}
 8004234:	0018      	movs	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	b007      	add	sp, #28
 800423a:	bd90      	pop	{r4, r7, pc}

0800423c <softI2C_i2c_read>:
 * @param data		pointer to read data buffer
 * @param count		(unusued)
 * @return	0 or return value
 */
int8_t softI2C_i2c_read(uint8_t address, uint16_t cmd, uint16_t *data, uint16_t count)
{
 800423c:	b5b0      	push	{r4, r5, r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	0004      	movs	r4, r0
 8004244:	0008      	movs	r0, r1
 8004246:	60ba      	str	r2, [r7, #8]
 8004248:	0019      	movs	r1, r3
 800424a:	250f      	movs	r5, #15
 800424c:	197b      	adds	r3, r7, r5
 800424e:	1c22      	adds	r2, r4, #0
 8004250:	701a      	strb	r2, [r3, #0]
 8004252:	240c      	movs	r4, #12
 8004254:	193b      	adds	r3, r7, r4
 8004256:	1c02      	adds	r2, r0, #0
 8004258:	801a      	strh	r2, [r3, #0]
 800425a:	1dbb      	adds	r3, r7, #6
 800425c:	1c0a      	adds	r2, r1, #0
 800425e:	801a      	strh	r2, [r3, #0]
    int8_t ret;
    uint8_t v[2];

    softI2C_i2c_write(address, cmd, 1);
 8004260:	193b      	adds	r3, r7, r4
 8004262:	8819      	ldrh	r1, [r3, #0]
 8004264:	197b      	adds	r3, r7, r5
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2201      	movs	r2, #1
 800426a:	0018      	movs	r0, r3
 800426c:	f7ff ff8c 	bl	8004188 <softI2C_i2c_write>

    ret = softI2C_start();
 8004270:	f7ff fe6a 	bl	8003f48 <softI2C_start>
 8004274:	0003      	movs	r3, r0
 8004276:	001a      	movs	r2, r3
 8004278:	2117      	movs	r1, #23
 800427a:	187b      	adds	r3, r7, r1
 800427c:	701a      	strb	r2, [r3, #0]
    if (ret != 0)
 800427e:	187b      	adds	r3, r7, r1
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	b25b      	sxtb	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d004      	beq.n	8004292 <softI2C_i2c_read+0x56>
        return ret;
 8004288:	2317      	movs	r3, #23
 800428a:	18fb      	adds	r3, r7, r3
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	b25b      	sxtb	r3, r3
 8004290:	e041      	b.n	8004316 <softI2C_i2c_read+0xda>

    ret = STS31_WriteCmd_soft((address << 1) | 1);
 8004292:	230f      	movs	r3, #15
 8004294:	18fb      	adds	r3, r7, r3
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	b25b      	sxtb	r3, r3
 800429c:	2201      	movs	r2, #1
 800429e:	4313      	orrs	r3, r2
 80042a0:	b25b      	sxtb	r3, r3
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	0018      	movs	r0, r3
 80042a6:	f7ff feb0 	bl	800400a <STS31_WriteCmd_soft>
 80042aa:	0002      	movs	r2, r0
 80042ac:	2117      	movs	r1, #23
 80042ae:	187b      	adds	r3, r7, r1
 80042b0:	701a      	strb	r2, [r3, #0]
    if (ret != 0) {
 80042b2:	187b      	adds	r3, r7, r1
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	b25b      	sxtb	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d006      	beq.n	80042ca <softI2C_i2c_read+0x8e>
    	softI2C_stop();
 80042bc:	f7ff fe5c 	bl	8003f78 <softI2C_stop>
        return ret;
 80042c0:	2317      	movs	r3, #23
 80042c2:	18fb      	adds	r3, r7, r3
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	b25b      	sxtb	r3, r3
 80042c8:	e025      	b.n	8004316 <softI2C_i2c_read+0xda>
    }

    v[0] = STS31_ReadCmd_soft(1);
 80042ca:	2001      	movs	r0, #1
 80042cc:	f7ff fef7 	bl	80040be <STS31_ReadCmd_soft>
 80042d0:	0003      	movs	r3, r0
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	2414      	movs	r4, #20
 80042d6:	193b      	adds	r3, r7, r4
 80042d8:	701a      	strb	r2, [r3, #0]
    v[1] = STS31_ReadCmd_soft(1);
 80042da:	2001      	movs	r0, #1
 80042dc:	f7ff feef 	bl	80040be <STS31_ReadCmd_soft>
 80042e0:	0003      	movs	r3, r0
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	193b      	adds	r3, r7, r4
 80042e6:	705a      	strb	r2, [r3, #1]
    uint8_t c = STS31_ReadCmd_soft(0);
 80042e8:	2000      	movs	r0, #0
 80042ea:	f7ff fee8 	bl	80040be <STS31_ReadCmd_soft>
 80042ee:	0002      	movs	r2, r0
 80042f0:	2316      	movs	r3, #22
 80042f2:	18fb      	adds	r3, r7, r3
 80042f4:	701a      	strb	r2, [r3, #0]

    *data= (((uint16_t )v[0])<<8) | v[1];
 80042f6:	0021      	movs	r1, r4
 80042f8:	187b      	adds	r3, r7, r1
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	021b      	lsls	r3, r3, #8
 80042fe:	b21a      	sxth	r2, r3
 8004300:	187b      	adds	r3, r7, r1
 8004302:	785b      	ldrb	r3, [r3, #1]
 8004304:	b21b      	sxth	r3, r3
 8004306:	4313      	orrs	r3, r2
 8004308:	b21b      	sxth	r3, r3
 800430a:	b29a      	uxth	r2, r3
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	801a      	strh	r2, [r3, #0]

    softI2C_stop();
 8004310:	f7ff fe32 	bl	8003f78 <softI2C_stop>
    return 0;
 8004314:	2300      	movs	r3, #0
}
 8004316:	0018      	movs	r0, r3
 8004318:	46bd      	mov	sp, r7
 800431a:	b006      	add	sp, #24
 800431c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004320 <STS31_SoftReset_soft>:
 * @brief STS31 Reset
 * @param ch	Select STS31 thermal sensor chip
 * @return
 */
int STS31_SoftReset_soft()
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
	return softI2C_i2c_write(STS_ADDR,0x30A2,1);
 8004324:	234a      	movs	r3, #74	; 0x4a
 8004326:	4904      	ldr	r1, [pc, #16]	; (8004338 <STS31_SoftReset_soft+0x18>)
 8004328:	2201      	movs	r2, #1
 800432a:	0018      	movs	r0, r3
 800432c:	f7ff ff2c 	bl	8004188 <softI2C_i2c_write>
 8004330:	0003      	movs	r3, r0
}
 8004332:	0018      	movs	r0, r3
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	000030a2 	.word	0x000030a2

0800433c <STS31_EnterPeriodicMode_soft>:
 * @brief STS31 Periodic Mode
 * @param ch	Select STS31 thermal sensor chip
 * @return
 */
int STS31_EnterPeriodicMode_soft()
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
	return softI2C_i2c_write(STS_ADDR,0x2032,1);
 8004340:	234a      	movs	r3, #74	; 0x4a
 8004342:	4904      	ldr	r1, [pc, #16]	; (8004354 <STS31_EnterPeriodicMode_soft+0x18>)
 8004344:	2201      	movs	r2, #1
 8004346:	0018      	movs	r0, r3
 8004348:	f7ff ff1e 	bl	8004188 <softI2C_i2c_write>
 800434c:	0003      	movs	r3, r0
}
 800434e:	0018      	movs	r0, r3
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	00002032 	.word	0x00002032

08004358 <EXTCJ_ll_init_soft>:
/**
 * @brief Initialize softI2C
 * @return	external Cold Junction STS31 thermal sensor count
 */
int EXTCJ_ll_init_soft(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800435e:	4b1e      	ldr	r3, [pc, #120]	; (80043d8 <EXTCJ_ll_init_soft+0x80>)
 8004360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004362:	4b1d      	ldr	r3, [pc, #116]	; (80043d8 <EXTCJ_ll_init_soft+0x80>)
 8004364:	2102      	movs	r1, #2
 8004366:	430a      	orrs	r2, r1
 8004368:	62da      	str	r2, [r3, #44]	; 0x2c
 800436a:	4b1b      	ldr	r3, [pc, #108]	; (80043d8 <EXTCJ_ll_init_soft+0x80>)
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	2202      	movs	r2, #2
 8004370:	4013      	ands	r3, r2
 8004372:	607b      	str	r3, [r7, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
	uint8_t extCJ_count = 0;
 8004376:	230f      	movs	r3, #15
 8004378:	18fb      	adds	r3, r7, r3
 800437a:	2200      	movs	r2, #0
 800437c:	701a      	strb	r2, [r3, #0]
	softI2C_SDA_in();
 800437e:	f7ff fd4f 	bl	8003e20 <softI2C_SDA_in>
	softI2C_SCL_in();
 8004382:	f7ff fd97 	bl	8003eb4 <softI2C_SCL_in>

	for(int i=0; i<EXT_THERMAL_COUNT; i++)
 8004386:	2300      	movs	r3, #0
 8004388:	60bb      	str	r3, [r7, #8]
 800438a:	e01b      	b.n	80043c4 <EXTCJ_ll_init_soft+0x6c>
	{
		if (STS31_SoftReset_soft(i) < 0)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	0018      	movs	r0, r3
 8004390:	f7ff ffc6 	bl	8004320 <STS31_SoftReset_soft>
 8004394:	1e03      	subs	r3, r0, #0
 8004396:	da01      	bge.n	800439c <EXTCJ_ll_init_soft+0x44>
		{
			return 0;
 8004398:	2300      	movs	r3, #0
 800439a:	e019      	b.n	80043d0 <EXTCJ_ll_init_soft+0x78>
		}
		HAL_Delay(50);
 800439c:	2032      	movs	r0, #50	; 0x32
 800439e:	f001 f811 	bl	80053c4 <HAL_Delay>
		if (STS31_EnterPeriodicMode_soft(i) < 0)
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	0018      	movs	r0, r3
 80043a6:	f7ff ffc9 	bl	800433c <STS31_EnterPeriodicMode_soft>
 80043aa:	1e03      	subs	r3, r0, #0
 80043ac:	da01      	bge.n	80043b2 <EXTCJ_ll_init_soft+0x5a>
		{
			return 0;
 80043ae:	2300      	movs	r3, #0
 80043b0:	e00e      	b.n	80043d0 <EXTCJ_ll_init_soft+0x78>
		}

		extCJ_count++;
 80043b2:	210f      	movs	r1, #15
 80043b4:	187b      	adds	r3, r7, r1
 80043b6:	781a      	ldrb	r2, [r3, #0]
 80043b8:	187b      	adds	r3, r7, r1
 80043ba:	3201      	adds	r2, #1
 80043bc:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<EXT_THERMAL_COUNT; i++)
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	3301      	adds	r3, #1
 80043c2:	60bb      	str	r3, [r7, #8]
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	dde0      	ble.n	800438c <EXTCJ_ll_init_soft+0x34>
	}

	return extCJ_count;
 80043ca:	230f      	movs	r3, #15
 80043cc:	18fb      	adds	r3, r7, r3
 80043ce:	781b      	ldrb	r3, [r3, #0]
}
 80043d0:	0018      	movs	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b004      	add	sp, #16
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40021000 	.word	0x40021000

080043dc <EXTCJ_init>:

/*****************************************************************************/
int EXTCJ_init(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
	if (EXTCJ_ll_init_soft() < EXT_THERMAL_COUNT)
 80043e0:	f7ff ffba 	bl	8004358 <EXTCJ_ll_init_soft>
 80043e4:	1e03      	subs	r3, r0, #0
 80043e6:	dc02      	bgt.n	80043ee <EXTCJ_init+0x12>
	{
		return -1;
 80043e8:	2301      	movs	r3, #1
 80043ea:	425b      	negs	r3, r3
 80043ec:	e000      	b.n	80043f0 <EXTCJ_init+0x14>
	}

	return EXT_THERMAL_COUNT;
 80043ee:	2301      	movs	r3, #1
}
 80043f0:	0018      	movs	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <EXTCJ_ReadTemperature>:

int EXTCJ_ReadTemperature(float *data)
/*****************************************************************************/
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
	uint16_t t;
	int r;
	softI2C_i2c_write(STS_ADDR,0x2032,1);	/**< Fetch Temperature Command */
 8004400:	234a      	movs	r3, #74	; 0x4a
 8004402:	491a      	ldr	r1, [pc, #104]	; (800446c <EXTCJ_ReadTemperature+0x74>)
 8004404:	2201      	movs	r2, #1
 8004406:	0018      	movs	r0, r3
 8004408:	f7ff febe 	bl	8004188 <softI2C_i2c_write>
	HAL_Delay(5);
 800440c:	2005      	movs	r0, #5
 800440e:	f000 ffd9 	bl	80053c4 <HAL_Delay>
	r=softI2C_i2c_read(STS_ADDR,0xE000,&t,1);	/**< Read Temperature Data */
 8004412:	204a      	movs	r0, #74	; 0x4a
 8004414:	230a      	movs	r3, #10
 8004416:	18fa      	adds	r2, r7, r3
 8004418:	23e0      	movs	r3, #224	; 0xe0
 800441a:	0219      	lsls	r1, r3, #8
 800441c:	2301      	movs	r3, #1
 800441e:	f7ff ff0d 	bl	800423c <softI2C_i2c_read>
 8004422:	0003      	movs	r3, r0
 8004424:	60fb      	str	r3, [r7, #12]
	if (r != 0)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <EXTCJ_ReadTemperature+0x38>
		return r;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	e019      	b.n	8004464 <EXTCJ_ReadTemperature+0x6c>
	*data = (((float)t * 175.0f) / 65535.0f) - 45.0f;
 8004430:	230a      	movs	r3, #10
 8004432:	18fb      	adds	r3, r7, r3
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	0018      	movs	r0, r3
 8004438:	f7fc fda8 	bl	8000f8c <__aeabi_ui2f>
 800443c:	1c03      	adds	r3, r0, #0
 800443e:	490c      	ldr	r1, [pc, #48]	; (8004470 <EXTCJ_ReadTemperature+0x78>)
 8004440:	1c18      	adds	r0, r3, #0
 8004442:	f7fc fa63 	bl	800090c <__aeabi_fmul>
 8004446:	1c03      	adds	r3, r0, #0
 8004448:	490a      	ldr	r1, [pc, #40]	; (8004474 <EXTCJ_ReadTemperature+0x7c>)
 800444a:	1c18      	adds	r0, r3, #0
 800444c:	f7fc f94c 	bl	80006e8 <__aeabi_fdiv>
 8004450:	1c03      	adds	r3, r0, #0
 8004452:	4909      	ldr	r1, [pc, #36]	; (8004478 <EXTCJ_ReadTemperature+0x80>)
 8004454:	1c18      	adds	r0, r3, #0
 8004456:	f7fc fb8b 	bl	8000b70 <__aeabi_fsub>
 800445a:	1c03      	adds	r3, r0, #0
 800445c:	1c1a      	adds	r2, r3, #0
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	601a      	str	r2, [r3, #0]

	return 0;
 8004462:	2300      	movs	r3, #0
}
 8004464:	0018      	movs	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	b004      	add	sp, #16
 800446a:	bd80      	pop	{r7, pc}
 800446c:	00002032 	.word	0x00002032
 8004470:	432f0000 	.word	0x432f0000
 8004474:	477fff00 	.word	0x477fff00
 8004478:	42340000 	.word	0x42340000

0800447c <FLASH_If_Init>:
 * @brief  Unlocks Flash for write access
 * @param  None
 * @retval None
 */
void FLASH_If_Init(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
	/* Unlock the Program memory */
	HAL_FLASH_Unlock();
 8004480:	f001 fb68 	bl	8005b54 <HAL_FLASH_Unlock>

	/* Clear all FLASH flags */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_PGAERR | FLASH_FLAG_WRPERR);
 8004484:	4b03      	ldr	r3, [pc, #12]	; (8004494 <FLASH_If_Init+0x18>)
 8004486:	4a04      	ldr	r2, [pc, #16]	; (8004498 <FLASH_If_Init+0x1c>)
 8004488:	619a      	str	r2, [r3, #24]
	/* Unlock the Program memory */
	HAL_FLASH_Lock();
 800448a:	f001 fbb3 	bl	8005bf4 <HAL_FLASH_Lock>
}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40022000 	.word	0x40022000
 8004498:	00000302 	.word	0x00000302

0800449c <FLASH_If_Erase>:
 * @param  start: start of user flash area
 * @retval FLASHIF_OK : user flash area successfully erased
 *         FLASHIF_ERASEKO : error occurred
 */
uint32_t FLASH_If_Erase(uint32_t start,uint32_t length)
{
 800449c:	b5b0      	push	{r4, r5, r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
	uint32_t NbrOfPages = 0;
 80044a6:	2300      	movs	r3, #0
 80044a8:	61fb      	str	r3, [r7, #28]
	uint32_t PageError = 0;
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]
	FLASH_EraseInitTypeDef pEraseInit;
	HAL_StatusTypeDef status = HAL_OK;
 80044ae:	241b      	movs	r4, #27
 80044b0:	193b      	adds	r3, r7, r4
 80044b2:	2200      	movs	r2, #0
 80044b4:	701a      	strb	r2, [r3, #0]

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80044b6:	f001 fb4d 	bl	8005b54 <HAL_FLASH_Unlock>

	/* Get the sector where start the user flash area */
	NbrOfPages = length/FLASH_PAGE_SIZE;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	09db      	lsrs	r3, r3, #7
 80044be:	61fb      	str	r3, [r7, #28]

	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80044c0:	2108      	movs	r1, #8
 80044c2:	187b      	adds	r3, r7, r1
 80044c4:	2200      	movs	r2, #0
 80044c6:	601a      	str	r2, [r3, #0]
	pEraseInit.PageAddress = start;
 80044c8:	187b      	adds	r3, r7, r1
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	605a      	str	r2, [r3, #4]
	//pEraseInit.Banks = FLASH_BANK_1;
	pEraseInit.NbPages = NbrOfPages;
 80044ce:	187b      	adds	r3, r7, r1
 80044d0:	69fa      	ldr	r2, [r7, #28]
 80044d2:	609a      	str	r2, [r3, #8]
	status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 80044d4:	0025      	movs	r5, r4
 80044d6:	193c      	adds	r4, r7, r4
 80044d8:	2314      	movs	r3, #20
 80044da:	18fa      	adds	r2, r7, r3
 80044dc:	187b      	adds	r3, r7, r1
 80044de:	0011      	movs	r1, r2
 80044e0:	0018      	movs	r0, r3
 80044e2:	f001 fca9 	bl	8005e38 <HAL_FLASHEx_Erase>
 80044e6:	0003      	movs	r3, r0
 80044e8:	7023      	strb	r3, [r4, #0]

	/* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 80044ea:	f001 fb83 	bl	8005bf4 <HAL_FLASH_Lock>

	if (status != HAL_OK)
 80044ee:	002c      	movs	r4, r5
 80044f0:	193b      	adds	r3, r7, r4
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <FLASH_If_Erase+0x60>
	{
		/* Error occurred while page erase */
		return FLASHIF_ERASEKO;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <FLASH_If_Erase+0x62>
	}

	return FLASHIF_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	0018      	movs	r0, r3
 8004500:	46bd      	mov	sp, r7
 8004502:	b008      	add	sp, #32
 8004504:	bdb0      	pop	{r4, r5, r7, pc}

08004506 <FLASH_If_Write>:
 * @retval uint32_t 0: Data successfully written to Flash memory
 *         1: Error occurred while writing data in Flash memory
 *         2: Written Data in flash memory is different from expected one
 */
uint32_t FLASH_If_Write(uint32_t destination, uint32_t *p_source, uint32_t length)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b086      	sub	sp, #24
 800450a:	af00      	add	r7, sp, #0
 800450c:	60f8      	str	r0, [r7, #12]
 800450e:	60b9      	str	r1, [r7, #8]
 8004510:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8004512:	2300      	movs	r3, #0
 8004514:	617b      	str	r3, [r7, #20]

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8004516:	f001 fb1d 	bl	8005b54 <HAL_FLASH_Unlock>

	for (i = 0; i < length; i++)
 800451a:	2300      	movs	r3, #0
 800451c:	617b      	str	r3, [r7, #20]
 800451e:	e01f      	b.n	8004560 <FLASH_If_Write+0x5a>
	{
		/* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, destination, (p_source[i])) == HAL_OK)
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	18d3      	adds	r3, r2, r3
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	0019      	movs	r1, r3
 800452e:	2002      	movs	r0, #2
 8004530:	f001 fad4 	bl	8005adc <HAL_FLASH_Program>
 8004534:	1e03      	subs	r3, r0, #0
 8004536:	d10e      	bne.n	8004556 <FLASH_If_Write+0x50>
		{
			/* Check the written value */
			if (*(uint32_t*)destination != *(uint32_t*)(p_source+i))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	18cb      	adds	r3, r1, r3
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d001      	beq.n	800454e <FLASH_If_Write+0x48>
			{
				/* Flash content doesn't match SRAM content */
				return(FLASHIF_WRITINGCTRL_ERROR);
 800454a:	2302      	movs	r3, #2
 800454c:	e00f      	b.n	800456e <FLASH_If_Write+0x68>
			}
			/* Increment FLASH destination address */
			destination += 4;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	3304      	adds	r3, #4
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	e001      	b.n	800455a <FLASH_If_Write+0x54>
		}
		else
		{
			/* Error occurred while writing data in Flash memory */
			return (FLASHIF_WRITING_ERROR);
 8004556:	2303      	movs	r3, #3
 8004558:	e009      	b.n	800456e <FLASH_If_Write+0x68>
	for (i = 0; i < length; i++)
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	3301      	adds	r3, #1
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	429a      	cmp	r2, r3
 8004566:	d3db      	bcc.n	8004520 <FLASH_If_Write+0x1a>
		}
	}

	/* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8004568:	f001 fb44 	bl	8005bf4 <HAL_FLASH_Lock>

	return (FLASHIF_OK);
 800456c:	2300      	movs	r3, #0
}
 800456e:	0018      	movs	r0, r3
 8004570:	46bd      	mov	sp, r7
 8004572:	b006      	add	sp, #24
 8004574:	bd80      	pop	{r7, pc}

08004576 <HAL_GPIO_EXTI_Callback>:
extern void bus_process(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004576:	b580      	push	{r7, lr}
 8004578:	b082      	sub	sp, #8
 800457a:	af00      	add	r7, sp, #0
 800457c:	0002      	movs	r2, r0
 800457e:	1dbb      	adds	r3, r7, #6
 8004580:	801a      	strh	r2, [r3, #0]

	if (GPIO_Pin == GPIO_PIN_4) {
		//__HAL_SPI_ENABLE(&hspi1);

	}
}
 8004582:	46c0      	nop			; (mov r8, r8)
 8004584:	46bd      	mov	sp, r7
 8004586:	b002      	add	sp, #8
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
	//dbg_printf("RX ALL\r\n");

	memcpy(spiRxBuffer, SPI_RxDMABuffer, 512);
 8004594:	4a0c      	ldr	r2, [pc, #48]	; (80045c8 <HAL_SPI_RxCpltCallback+0x3c>)
 8004596:	4b0d      	ldr	r3, [pc, #52]	; (80045cc <HAL_SPI_RxCpltCallback+0x40>)
 8004598:	0010      	movs	r0, r2
 800459a:	0019      	movs	r1, r3
 800459c:	2380      	movs	r3, #128	; 0x80
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	001a      	movs	r2, r3
 80045a2:	f005 fc7e 	bl	8009ea2 <memcpy>
	espMsgRcvd = 1;
 80045a6:	4b0a      	ldr	r3, [pc, #40]	; (80045d0 <HAL_SPI_RxCpltCallback+0x44>)
 80045a8:	2201      	movs	r2, #1
 80045aa:	701a      	strb	r2, [r3, #0]
	bus_process();
 80045ac:	f7ff fa18 	bl	80039e0 <bus_process>
	memset(SPI_RxDMABuffer, 0, 512);
 80045b0:	2380      	movs	r3, #128	; 0x80
 80045b2:	009a      	lsls	r2, r3, #2
 80045b4:	4b05      	ldr	r3, [pc, #20]	; (80045cc <HAL_SPI_RxCpltCallback+0x40>)
 80045b6:	2100      	movs	r1, #0
 80045b8:	0018      	movs	r0, r3
 80045ba:	f005 fc7b 	bl	8009eb4 <memset>
}
 80045be:	46c0      	nop			; (mov r8, r8)
 80045c0:	46bd      	mov	sp, r7
 80045c2:	b002      	add	sp, #8
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	20000468 	.word	0x20000468
 80045cc:	20000268 	.word	0x20000268
 80045d0:	20000668 	.word	0x20000668

080045d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80045da:	f000 fe83 	bl	80052e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80045de:	f000 f85f 	bl	80046a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80045e2:	f000 f9c3 	bl	800496c <MX_GPIO_Init>
  MX_DMA_Init();
 80045e6:	f000 f99b 	bl	8004920 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80045ea:	f000 f939 	bl	8004860 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80045ee:	f000 f967 	bl	80048c0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80045f2:	f000 f8fd 	bl	80047f0 <MX_SPI2_Init>
  MX_SPI1_Init();
 80045f6:	f000 f8c7 	bl	8004788 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  conf_init();
 80045fa:	f7ff fb23 	bl	8003c44 <conf_init>
  debug_init();
 80045fe:	f7ff fb2b 	bl	8003c58 <debug_init>
  stpm_init();
 8004602:	f000 fc89 	bl	8004f18 <stpm_init>

  int extcjr = EXTCJ_init();
 8004606:	f7ff fee9 	bl	80043dc <EXTCJ_init>
 800460a:	0003      	movs	r3, r0
 800460c:	607b      	str	r3, [r7, #4]
  dbg_printf("extcj : %d\r\n", extcjr);
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	4b1c      	ldr	r3, [pc, #112]	; (8004684 <main+0xb0>)
 8004612:	0011      	movs	r1, r2
 8004614:	0018      	movs	r0, r3
 8004616:	f006 fab1 	bl	800ab7c <iprintf>
  tc_init(extcjr);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	0018      	movs	r0, r3
 800461e:	f7fe fefb 	bl	8003418 <tc_init>

  HAL_SPI_Receive_DMA(&hspi1, SPI_RxDMABuffer, 512);
 8004622:	2380      	movs	r3, #128	; 0x80
 8004624:	009a      	lsls	r2, r3, #2
 8004626:	4918      	ldr	r1, [pc, #96]	; (8004688 <main+0xb4>)
 8004628:	4b18      	ldr	r3, [pc, #96]	; (800468c <main+0xb8>)
 800462a:	0018      	movs	r0, r3
 800462c:	f003 fa96 	bl	8007b5c <HAL_SPI_Receive_DMA>
  //HAL_SPI_Transmit_DMA(&hspi1, spiTxBuffer, 512);

  //__HAL_SPI_ENABLE((&hspi1));
  SET_BIT(hspi1.Instance->CR2, SPI_CR2_TXDMAEN);
 8004630:	4b16      	ldr	r3, [pc, #88]	; (800468c <main+0xb8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	4b15      	ldr	r3, [pc, #84]	; (800468c <main+0xb8>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2102      	movs	r1, #2
 800463c:	430a      	orrs	r2, r1
 800463e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(hspi1.Instance->CR1, SPI_CR1_SSM);
 8004640:	4b12      	ldr	r3, [pc, #72]	; (800468c <main+0xb8>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	4b11      	ldr	r3, [pc, #68]	; (800468c <main+0xb8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4911      	ldr	r1, [pc, #68]	; (8004690 <main+0xbc>)
 800464c:	400a      	ands	r2, r1
 800464e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(hspi1.Instance->CR1, SPI_CR1_SSI);
 8004650:	4b0e      	ldr	r3, [pc, #56]	; (800468c <main+0xb8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	4b0d      	ldr	r3, [pc, #52]	; (800468c <main+0xb8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	490e      	ldr	r1, [pc, #56]	; (8004694 <main+0xc0>)
 800465c:	400a      	ands	r2, r1
 800465e:	601a      	str	r2, [r3, #0]

  HAL_DMA_Start(&hdma_spi1_tx, (uint32_t)&spiTxBuffer[0], (uint32_t)&hspi1.Instance->DR, 512);
 8004660:	490d      	ldr	r1, [pc, #52]	; (8004698 <main+0xc4>)
 8004662:	4b0a      	ldr	r3, [pc, #40]	; (800468c <main+0xb8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	330c      	adds	r3, #12
 8004668:	001a      	movs	r2, r3
 800466a:	2380      	movs	r3, #128	; 0x80
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	480b      	ldr	r0, [pc, #44]	; (800469c <main+0xc8>)
 8004670:	f001 f820 	bl	80056b4 <HAL_DMA_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //dbg_printf("Test\r\n");
	  //HAL_Delay(1000);
	  stpm_Process();
 8004674:	f000 fcba 	bl	8004fec <stpm_Process>
	  max31856_process();
 8004678:	f7fe ffc8 	bl	800360c <max31856_process>
	  bus_comm_process();
 800467c:	f7ff fa7e 	bl	8003b7c <bus_comm_process>
	  stpm_Process();
 8004680:	e7f8      	b.n	8004674 <main+0xa0>
 8004682:	46c0      	nop			; (mov r8, r8)
 8004684:	0800e5ac 	.word	0x0800e5ac
 8004688:	20000268 	.word	0x20000268
 800468c:	20000d1c 	.word	0x20000d1c
 8004690:	fffffdff 	.word	0xfffffdff
 8004694:	fffffeff 	.word	0xfffffeff
 8004698:	20000748 	.word	0x20000748
 800469c:	20000e40 	.word	0x20000e40

080046a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046a0:	b590      	push	{r4, r7, lr}
 80046a2:	b09f      	sub	sp, #124	; 0x7c
 80046a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046a6:	2440      	movs	r4, #64	; 0x40
 80046a8:	193b      	adds	r3, r7, r4
 80046aa:	0018      	movs	r0, r3
 80046ac:	2338      	movs	r3, #56	; 0x38
 80046ae:	001a      	movs	r2, r3
 80046b0:	2100      	movs	r1, #0
 80046b2:	f005 fbff 	bl	8009eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80046b6:	232c      	movs	r3, #44	; 0x2c
 80046b8:	18fb      	adds	r3, r7, r3
 80046ba:	0018      	movs	r0, r3
 80046bc:	2314      	movs	r3, #20
 80046be:	001a      	movs	r2, r3
 80046c0:	2100      	movs	r1, #0
 80046c2:	f005 fbf7 	bl	8009eb4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80046c6:	1d3b      	adds	r3, r7, #4
 80046c8:	0018      	movs	r0, r3
 80046ca:	2328      	movs	r3, #40	; 0x28
 80046cc:	001a      	movs	r2, r3
 80046ce:	2100      	movs	r1, #0
 80046d0:	f005 fbf0 	bl	8009eb4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80046d4:	4b2a      	ldr	r3, [pc, #168]	; (8004780 <SystemClock_Config+0xe0>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a2a      	ldr	r2, [pc, #168]	; (8004784 <SystemClock_Config+0xe4>)
 80046da:	401a      	ands	r2, r3
 80046dc:	4b28      	ldr	r3, [pc, #160]	; (8004780 <SystemClock_Config+0xe0>)
 80046de:	2180      	movs	r1, #128	; 0x80
 80046e0:	0109      	lsls	r1, r1, #4
 80046e2:	430a      	orrs	r2, r1
 80046e4:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80046e6:	0021      	movs	r1, r4
 80046e8:	187b      	adds	r3, r7, r1
 80046ea:	2202      	movs	r2, #2
 80046ec:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80046ee:	187b      	adds	r3, r7, r1
 80046f0:	2201      	movs	r2, #1
 80046f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80046f4:	187b      	adds	r3, r7, r1
 80046f6:	2210      	movs	r2, #16
 80046f8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80046fa:	187b      	adds	r3, r7, r1
 80046fc:	2202      	movs	r2, #2
 80046fe:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004700:	187b      	adds	r3, r7, r1
 8004702:	2200      	movs	r2, #0
 8004704:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8004706:	187b      	adds	r3, r7, r1
 8004708:	2200      	movs	r2, #0
 800470a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800470c:	187b      	adds	r3, r7, r1
 800470e:	2280      	movs	r2, #128	; 0x80
 8004710:	03d2      	lsls	r2, r2, #15
 8004712:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004714:	187b      	adds	r3, r7, r1
 8004716:	0018      	movs	r0, r3
 8004718:	f001 fdea 	bl	80062f0 <HAL_RCC_OscConfig>
 800471c:	1e03      	subs	r3, r0, #0
 800471e:	d001      	beq.n	8004724 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8004720:	f000 f994 	bl	8004a4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004724:	212c      	movs	r1, #44	; 0x2c
 8004726:	187b      	adds	r3, r7, r1
 8004728:	220f      	movs	r2, #15
 800472a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800472c:	187b      	adds	r3, r7, r1
 800472e:	2203      	movs	r2, #3
 8004730:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004732:	187b      	adds	r3, r7, r1
 8004734:	2200      	movs	r2, #0
 8004736:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004738:	187b      	adds	r3, r7, r1
 800473a:	2200      	movs	r2, #0
 800473c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800473e:	187b      	adds	r3, r7, r1
 8004740:	2200      	movs	r2, #0
 8004742:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004744:	187b      	adds	r3, r7, r1
 8004746:	2101      	movs	r1, #1
 8004748:	0018      	movs	r0, r3
 800474a:	f002 f9a7 	bl	8006a9c <HAL_RCC_ClockConfig>
 800474e:	1e03      	subs	r3, r0, #0
 8004750:	d001      	beq.n	8004756 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8004752:	f000 f97b 	bl	8004a4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8004756:	1d3b      	adds	r3, r7, #4
 8004758:	2203      	movs	r2, #3
 800475a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800475c:	1d3b      	adds	r3, r7, #4
 800475e:	2200      	movs	r2, #0
 8004760:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004762:	1d3b      	adds	r3, r7, #4
 8004764:	2200      	movs	r2, #0
 8004766:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004768:	1d3b      	adds	r3, r7, #4
 800476a:	0018      	movs	r0, r3
 800476c:	f002 fbb6 	bl	8006edc <HAL_RCCEx_PeriphCLKConfig>
 8004770:	1e03      	subs	r3, r0, #0
 8004772:	d001      	beq.n	8004778 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8004774:	f000 f96a 	bl	8004a4c <Error_Handler>
  }
}
 8004778:	46c0      	nop			; (mov r8, r8)
 800477a:	46bd      	mov	sp, r7
 800477c:	b01f      	add	sp, #124	; 0x7c
 800477e:	bd90      	pop	{r4, r7, pc}
 8004780:	40007000 	.word	0x40007000
 8004784:	ffffe7ff 	.word	0xffffe7ff

08004788 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800478c:	4b16      	ldr	r3, [pc, #88]	; (80047e8 <MX_SPI1_Init+0x60>)
 800478e:	4a17      	ldr	r2, [pc, #92]	; (80047ec <MX_SPI1_Init+0x64>)
 8004790:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8004792:	4b15      	ldr	r3, [pc, #84]	; (80047e8 <MX_SPI1_Init+0x60>)
 8004794:	2200      	movs	r2, #0
 8004796:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004798:	4b13      	ldr	r3, [pc, #76]	; (80047e8 <MX_SPI1_Init+0x60>)
 800479a:	2200      	movs	r2, #0
 800479c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800479e:	4b12      	ldr	r3, [pc, #72]	; (80047e8 <MX_SPI1_Init+0x60>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80047a4:	4b10      	ldr	r3, [pc, #64]	; (80047e8 <MX_SPI1_Init+0x60>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80047aa:	4b0f      	ldr	r3, [pc, #60]	; (80047e8 <MX_SPI1_Init+0x60>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80047b0:	4b0d      	ldr	r3, [pc, #52]	; (80047e8 <MX_SPI1_Init+0x60>)
 80047b2:	2280      	movs	r2, #128	; 0x80
 80047b4:	0092      	lsls	r2, r2, #2
 80047b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80047b8:	4b0b      	ldr	r3, [pc, #44]	; (80047e8 <MX_SPI1_Init+0x60>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80047be:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <MX_SPI1_Init+0x60>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047c4:	4b08      	ldr	r3, [pc, #32]	; (80047e8 <MX_SPI1_Init+0x60>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80047ca:	4b07      	ldr	r3, [pc, #28]	; (80047e8 <MX_SPI1_Init+0x60>)
 80047cc:	2207      	movs	r2, #7
 80047ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80047d0:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <MX_SPI1_Init+0x60>)
 80047d2:	0018      	movs	r0, r3
 80047d4:	f002 fcf6 	bl	80071c4 <HAL_SPI_Init>
 80047d8:	1e03      	subs	r3, r0, #0
 80047da:	d001      	beq.n	80047e0 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 80047dc:	f000 f936 	bl	8004a4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80047e0:	46c0      	nop			; (mov r8, r8)
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	46c0      	nop			; (mov r8, r8)
 80047e8:	20000d1c 	.word	0x20000d1c
 80047ec:	40013000 	.word	0x40013000

080047f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80047f4:	4b18      	ldr	r3, [pc, #96]	; (8004858 <MX_SPI2_Init+0x68>)
 80047f6:	4a19      	ldr	r2, [pc, #100]	; (800485c <MX_SPI2_Init+0x6c>)
 80047f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80047fa:	4b17      	ldr	r3, [pc, #92]	; (8004858 <MX_SPI2_Init+0x68>)
 80047fc:	2282      	movs	r2, #130	; 0x82
 80047fe:	0052      	lsls	r2, r2, #1
 8004800:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004802:	4b15      	ldr	r3, [pc, #84]	; (8004858 <MX_SPI2_Init+0x68>)
 8004804:	2200      	movs	r2, #0
 8004806:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004808:	4b13      	ldr	r3, [pc, #76]	; (8004858 <MX_SPI2_Init+0x68>)
 800480a:	2200      	movs	r2, #0
 800480c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800480e:	4b12      	ldr	r3, [pc, #72]	; (8004858 <MX_SPI2_Init+0x68>)
 8004810:	2202      	movs	r2, #2
 8004812:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004814:	4b10      	ldr	r3, [pc, #64]	; (8004858 <MX_SPI2_Init+0x68>)
 8004816:	2201      	movs	r2, #1
 8004818:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800481a:	4b0f      	ldr	r3, [pc, #60]	; (8004858 <MX_SPI2_Init+0x68>)
 800481c:	2280      	movs	r2, #128	; 0x80
 800481e:	0092      	lsls	r2, r2, #2
 8004820:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004822:	4b0d      	ldr	r3, [pc, #52]	; (8004858 <MX_SPI2_Init+0x68>)
 8004824:	2218      	movs	r2, #24
 8004826:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004828:	4b0b      	ldr	r3, [pc, #44]	; (8004858 <MX_SPI2_Init+0x68>)
 800482a:	2200      	movs	r2, #0
 800482c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800482e:	4b0a      	ldr	r3, [pc, #40]	; (8004858 <MX_SPI2_Init+0x68>)
 8004830:	2200      	movs	r2, #0
 8004832:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004834:	4b08      	ldr	r3, [pc, #32]	; (8004858 <MX_SPI2_Init+0x68>)
 8004836:	2200      	movs	r2, #0
 8004838:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800483a:	4b07      	ldr	r3, [pc, #28]	; (8004858 <MX_SPI2_Init+0x68>)
 800483c:	2207      	movs	r2, #7
 800483e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004840:	4b05      	ldr	r3, [pc, #20]	; (8004858 <MX_SPI2_Init+0x68>)
 8004842:	0018      	movs	r0, r3
 8004844:	f002 fcbe 	bl	80071c4 <HAL_SPI_Init>
 8004848:	1e03      	subs	r3, r0, #0
 800484a:	d001      	beq.n	8004850 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800484c:	f000 f8fe 	bl	8004a4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004850:	46c0      	nop			; (mov r8, r8)
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	20000bf8 	.word	0x20000bf8
 800485c:	40003800 	.word	0x40003800

08004860 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004864:	4b14      	ldr	r3, [pc, #80]	; (80048b8 <MX_USART1_UART_Init+0x58>)
 8004866:	4a15      	ldr	r2, [pc, #84]	; (80048bc <MX_USART1_UART_Init+0x5c>)
 8004868:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800486a:	4b13      	ldr	r3, [pc, #76]	; (80048b8 <MX_USART1_UART_Init+0x58>)
 800486c:	22e1      	movs	r2, #225	; 0xe1
 800486e:	0252      	lsls	r2, r2, #9
 8004870:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004872:	4b11      	ldr	r3, [pc, #68]	; (80048b8 <MX_USART1_UART_Init+0x58>)
 8004874:	2200      	movs	r2, #0
 8004876:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004878:	4b0f      	ldr	r3, [pc, #60]	; (80048b8 <MX_USART1_UART_Init+0x58>)
 800487a:	2200      	movs	r2, #0
 800487c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800487e:	4b0e      	ldr	r3, [pc, #56]	; (80048b8 <MX_USART1_UART_Init+0x58>)
 8004880:	2200      	movs	r2, #0
 8004882:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8004884:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <MX_USART1_UART_Init+0x58>)
 8004886:	2208      	movs	r2, #8
 8004888:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800488a:	4b0b      	ldr	r3, [pc, #44]	; (80048b8 <MX_USART1_UART_Init+0x58>)
 800488c:	2200      	movs	r2, #0
 800488e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004890:	4b09      	ldr	r3, [pc, #36]	; (80048b8 <MX_USART1_UART_Init+0x58>)
 8004892:	2200      	movs	r2, #0
 8004894:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004896:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <MX_USART1_UART_Init+0x58>)
 8004898:	2200      	movs	r2, #0
 800489a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800489c:	4b06      	ldr	r3, [pc, #24]	; (80048b8 <MX_USART1_UART_Init+0x58>)
 800489e:	2200      	movs	r2, #0
 80048a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80048a2:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <MX_USART1_UART_Init+0x58>)
 80048a4:	0018      	movs	r0, r3
 80048a6:	f003 fe9f 	bl	80085e8 <HAL_UART_Init>
 80048aa:	1e03      	subs	r3, r0, #0
 80048ac:	d001      	beq.n	80048b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80048ae:	f000 f8cd 	bl	8004a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80048b2:	46c0      	nop			; (mov r8, r8)
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	20000c98 	.word	0x20000c98
 80048bc:	40013800 	.word	0x40013800

080048c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80048c4:	4b14      	ldr	r3, [pc, #80]	; (8004918 <MX_USART2_UART_Init+0x58>)
 80048c6:	4a15      	ldr	r2, [pc, #84]	; (800491c <MX_USART2_UART_Init+0x5c>)
 80048c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80048ca:	4b13      	ldr	r3, [pc, #76]	; (8004918 <MX_USART2_UART_Init+0x58>)
 80048cc:	2296      	movs	r2, #150	; 0x96
 80048ce:	0192      	lsls	r2, r2, #6
 80048d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80048d2:	4b11      	ldr	r3, [pc, #68]	; (8004918 <MX_USART2_UART_Init+0x58>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80048d8:	4b0f      	ldr	r3, [pc, #60]	; (8004918 <MX_USART2_UART_Init+0x58>)
 80048da:	2200      	movs	r2, #0
 80048dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80048de:	4b0e      	ldr	r3, [pc, #56]	; (8004918 <MX_USART2_UART_Init+0x58>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80048e4:	4b0c      	ldr	r3, [pc, #48]	; (8004918 <MX_USART2_UART_Init+0x58>)
 80048e6:	220c      	movs	r2, #12
 80048e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048ea:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <MX_USART2_UART_Init+0x58>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80048f0:	4b09      	ldr	r3, [pc, #36]	; (8004918 <MX_USART2_UART_Init+0x58>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048f6:	4b08      	ldr	r3, [pc, #32]	; (8004918 <MX_USART2_UART_Init+0x58>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048fc:	4b06      	ldr	r3, [pc, #24]	; (8004918 <MX_USART2_UART_Init+0x58>)
 80048fe:	2200      	movs	r2, #0
 8004900:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004902:	4b05      	ldr	r3, [pc, #20]	; (8004918 <MX_USART2_UART_Init+0x58>)
 8004904:	0018      	movs	r0, r3
 8004906:	f003 fe6f 	bl	80085e8 <HAL_UART_Init>
 800490a:	1e03      	subs	r3, r0, #0
 800490c:	d001      	beq.n	8004912 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800490e:	f000 f89d 	bl	8004a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004912:	46c0      	nop			; (mov r8, r8)
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	20000d74 	.word	0x20000d74
 800491c:	40004400 	.word	0x40004400

08004920 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004926:	4b10      	ldr	r3, [pc, #64]	; (8004968 <MX_DMA_Init+0x48>)
 8004928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800492a:	4b0f      	ldr	r3, [pc, #60]	; (8004968 <MX_DMA_Init+0x48>)
 800492c:	2101      	movs	r1, #1
 800492e:	430a      	orrs	r2, r1
 8004930:	631a      	str	r2, [r3, #48]	; 0x30
 8004932:	4b0d      	ldr	r3, [pc, #52]	; (8004968 <MX_DMA_Init+0x48>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	2201      	movs	r2, #1
 8004938:	4013      	ands	r3, r2
 800493a:	607b      	str	r3, [r7, #4]
 800493c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800493e:	2200      	movs	r2, #0
 8004940:	2100      	movs	r1, #0
 8004942:	200a      	movs	r0, #10
 8004944:	f000 fe0c 	bl	8005560 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8004948:	200a      	movs	r0, #10
 800494a:	f000 fe1e 	bl	800558a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800494e:	2200      	movs	r2, #0
 8004950:	2100      	movs	r1, #0
 8004952:	200b      	movs	r0, #11
 8004954:	f000 fe04 	bl	8005560 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8004958:	200b      	movs	r0, #11
 800495a:	f000 fe16 	bl	800558a <HAL_NVIC_EnableIRQ>

}
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	46bd      	mov	sp, r7
 8004962:	b002      	add	sp, #8
 8004964:	bd80      	pop	{r7, pc}
 8004966:	46c0      	nop			; (mov r8, r8)
 8004968:	40021000 	.word	0x40021000

0800496c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800496c:	b590      	push	{r4, r7, lr}
 800496e:	b089      	sub	sp, #36	; 0x24
 8004970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004972:	240c      	movs	r4, #12
 8004974:	193b      	adds	r3, r7, r4
 8004976:	0018      	movs	r0, r3
 8004978:	2314      	movs	r3, #20
 800497a:	001a      	movs	r2, r3
 800497c:	2100      	movs	r1, #0
 800497e:	f005 fa99 	bl	8009eb4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004982:	4b2f      	ldr	r3, [pc, #188]	; (8004a40 <MX_GPIO_Init+0xd4>)
 8004984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004986:	4b2e      	ldr	r3, [pc, #184]	; (8004a40 <MX_GPIO_Init+0xd4>)
 8004988:	2101      	movs	r1, #1
 800498a:	430a      	orrs	r2, r1
 800498c:	62da      	str	r2, [r3, #44]	; 0x2c
 800498e:	4b2c      	ldr	r3, [pc, #176]	; (8004a40 <MX_GPIO_Init+0xd4>)
 8004990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004992:	2201      	movs	r2, #1
 8004994:	4013      	ands	r3, r2
 8004996:	60bb      	str	r3, [r7, #8]
 8004998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800499a:	4b29      	ldr	r3, [pc, #164]	; (8004a40 <MX_GPIO_Init+0xd4>)
 800499c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800499e:	4b28      	ldr	r3, [pc, #160]	; (8004a40 <MX_GPIO_Init+0xd4>)
 80049a0:	2102      	movs	r1, #2
 80049a2:	430a      	orrs	r2, r1
 80049a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80049a6:	4b26      	ldr	r3, [pc, #152]	; (8004a40 <MX_GPIO_Init+0xd4>)
 80049a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049aa:	2202      	movs	r2, #2
 80049ac:	4013      	ands	r3, r2
 80049ae:	607b      	str	r3, [r7, #4]
 80049b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TC_CH_3_Pin|TC_CH_2_Pin|TC_CH_1_Pin|TC_CH_0_Pin, GPIO_PIN_SET);
 80049b2:	4924      	ldr	r1, [pc, #144]	; (8004a44 <MX_GPIO_Init+0xd8>)
 80049b4:	4b24      	ldr	r3, [pc, #144]	; (8004a48 <MX_GPIO_Init+0xdc>)
 80049b6:	2201      	movs	r2, #1
 80049b8:	0018      	movs	r0, r3
 80049ba:	f001 fc60 	bl	800627e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ESP_CS_Pin */
  GPIO_InitStruct.Pin = ESP_CS_Pin;
 80049be:	193b      	adds	r3, r7, r4
 80049c0:	2210      	movs	r2, #16
 80049c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80049c4:	193b      	adds	r3, r7, r4
 80049c6:	2284      	movs	r2, #132	; 0x84
 80049c8:	0392      	lsls	r2, r2, #14
 80049ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049cc:	193b      	adds	r3, r7, r4
 80049ce:	2200      	movs	r2, #0
 80049d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ESP_CS_GPIO_Port, &GPIO_InitStruct);
 80049d2:	193a      	adds	r2, r7, r4
 80049d4:	23a0      	movs	r3, #160	; 0xa0
 80049d6:	05db      	lsls	r3, r3, #23
 80049d8:	0011      	movs	r1, r2
 80049da:	0018      	movs	r0, r3
 80049dc:	f001 fab4 	bl	8005f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : TC_CH_3_Pin TC_CH_2_Pin TC_CH_1_Pin TC_CH_0_Pin */
  GPIO_InitStruct.Pin = TC_CH_3_Pin|TC_CH_2_Pin|TC_CH_1_Pin|TC_CH_0_Pin;
 80049e0:	0021      	movs	r1, r4
 80049e2:	187b      	adds	r3, r7, r1
 80049e4:	4a17      	ldr	r2, [pc, #92]	; (8004a44 <MX_GPIO_Init+0xd8>)
 80049e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049e8:	187b      	adds	r3, r7, r1
 80049ea:	2201      	movs	r2, #1
 80049ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ee:	187b      	adds	r3, r7, r1
 80049f0:	2200      	movs	r2, #0
 80049f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049f4:	187b      	adds	r3, r7, r1
 80049f6:	2202      	movs	r2, #2
 80049f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049fa:	000c      	movs	r4, r1
 80049fc:	187b      	adds	r3, r7, r1
 80049fe:	4a12      	ldr	r2, [pc, #72]	; (8004a48 <MX_GPIO_Init+0xdc>)
 8004a00:	0019      	movs	r1, r3
 8004a02:	0010      	movs	r0, r2
 8004a04:	f001 faa0 	bl	8005f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : CJ_ALERT_Pin */
  GPIO_InitStruct.Pin = CJ_ALERT_Pin;
 8004a08:	0021      	movs	r1, r4
 8004a0a:	187b      	adds	r3, r7, r1
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a10:	187b      	adds	r3, r7, r1
 8004a12:	2200      	movs	r2, #0
 8004a14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a16:	187b      	adds	r3, r7, r1
 8004a18:	2200      	movs	r2, #0
 8004a1a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CJ_ALERT_GPIO_Port, &GPIO_InitStruct);
 8004a1c:	187b      	adds	r3, r7, r1
 8004a1e:	4a0a      	ldr	r2, [pc, #40]	; (8004a48 <MX_GPIO_Init+0xdc>)
 8004a20:	0019      	movs	r1, r3
 8004a22:	0010      	movs	r0, r2
 8004a24:	f001 fa90 	bl	8005f48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8004a28:	2200      	movs	r2, #0
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	2007      	movs	r0, #7
 8004a2e:	f000 fd97 	bl	8005560 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004a32:	2007      	movs	r0, #7
 8004a34:	f000 fda9 	bl	800558a <HAL_NVIC_EnableIRQ>

}
 8004a38:	46c0      	nop			; (mov r8, r8)
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	b009      	add	sp, #36	; 0x24
 8004a3e:	bd90      	pop	{r4, r7, pc}
 8004a40:	40021000 	.word	0x40021000
 8004a44:	00000c06 	.word	0x00000c06
 8004a48:	50000400 	.word	0x50000400

08004a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004a50:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004a52:	e7fe      	b.n	8004a52 <Error_Handler+0x6>

08004a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a58:	4b07      	ldr	r3, [pc, #28]	; (8004a78 <HAL_MspInit+0x24>)
 8004a5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a5c:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <HAL_MspInit+0x24>)
 8004a5e:	2101      	movs	r1, #1
 8004a60:	430a      	orrs	r2, r1
 8004a62:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a64:	4b04      	ldr	r3, [pc, #16]	; (8004a78 <HAL_MspInit+0x24>)
 8004a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a68:	4b03      	ldr	r3, [pc, #12]	; (8004a78 <HAL_MspInit+0x24>)
 8004a6a:	2180      	movs	r1, #128	; 0x80
 8004a6c:	0549      	lsls	r1, r1, #21
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a72:	46c0      	nop			; (mov r8, r8)
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40021000 	.word	0x40021000

08004a7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08a      	sub	sp, #40	; 0x28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a84:	2314      	movs	r3, #20
 8004a86:	18fb      	adds	r3, r7, r3
 8004a88:	0018      	movs	r0, r3
 8004a8a:	2314      	movs	r3, #20
 8004a8c:	001a      	movs	r2, r3
 8004a8e:	2100      	movs	r1, #0
 8004a90:	f005 fa10 	bl	8009eb4 <memset>
  if(hspi->Instance==SPI1)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a62      	ldr	r2, [pc, #392]	; (8004c24 <HAL_SPI_MspInit+0x1a8>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d000      	beq.n	8004aa0 <HAL_SPI_MspInit+0x24>
 8004a9e:	e086      	b.n	8004bae <HAL_SPI_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004aa0:	4b61      	ldr	r3, [pc, #388]	; (8004c28 <HAL_SPI_MspInit+0x1ac>)
 8004aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aa4:	4b60      	ldr	r3, [pc, #384]	; (8004c28 <HAL_SPI_MspInit+0x1ac>)
 8004aa6:	2180      	movs	r1, #128	; 0x80
 8004aa8:	0149      	lsls	r1, r1, #5
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aae:	4b5e      	ldr	r3, [pc, #376]	; (8004c28 <HAL_SPI_MspInit+0x1ac>)
 8004ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab2:	4b5d      	ldr	r3, [pc, #372]	; (8004c28 <HAL_SPI_MspInit+0x1ac>)
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	62da      	str	r2, [r3, #44]	; 0x2c
 8004aba:	4b5b      	ldr	r3, [pc, #364]	; (8004c28 <HAL_SPI_MspInit+0x1ac>)
 8004abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abe:	2201      	movs	r2, #1
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
 8004ac4:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004ac6:	2114      	movs	r1, #20
 8004ac8:	187b      	adds	r3, r7, r1
 8004aca:	22e0      	movs	r2, #224	; 0xe0
 8004acc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ace:	187b      	adds	r3, r7, r1
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad4:	187b      	adds	r3, r7, r1
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ada:	187b      	adds	r3, r7, r1
 8004adc:	2203      	movs	r2, #3
 8004ade:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004ae0:	187b      	adds	r3, r7, r1
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ae6:	187a      	adds	r2, r7, r1
 8004ae8:	23a0      	movs	r3, #160	; 0xa0
 8004aea:	05db      	lsls	r3, r3, #23
 8004aec:	0011      	movs	r1, r2
 8004aee:	0018      	movs	r0, r3
 8004af0:	f001 fa2a 	bl	8005f48 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8004af4:	4b4d      	ldr	r3, [pc, #308]	; (8004c2c <HAL_SPI_MspInit+0x1b0>)
 8004af6:	4a4e      	ldr	r2, [pc, #312]	; (8004c30 <HAL_SPI_MspInit+0x1b4>)
 8004af8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8004afa:	4b4c      	ldr	r3, [pc, #304]	; (8004c2c <HAL_SPI_MspInit+0x1b0>)
 8004afc:	2201      	movs	r2, #1
 8004afe:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b00:	4b4a      	ldr	r3, [pc, #296]	; (8004c2c <HAL_SPI_MspInit+0x1b0>)
 8004b02:	2210      	movs	r2, #16
 8004b04:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b06:	4b49      	ldr	r3, [pc, #292]	; (8004c2c <HAL_SPI_MspInit+0x1b0>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b0c:	4b47      	ldr	r3, [pc, #284]	; (8004c2c <HAL_SPI_MspInit+0x1b0>)
 8004b0e:	2280      	movs	r2, #128	; 0x80
 8004b10:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b12:	4b46      	ldr	r3, [pc, #280]	; (8004c2c <HAL_SPI_MspInit+0x1b0>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b18:	4b44      	ldr	r3, [pc, #272]	; (8004c2c <HAL_SPI_MspInit+0x1b0>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004b1e:	4b43      	ldr	r3, [pc, #268]	; (8004c2c <HAL_SPI_MspInit+0x1b0>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004b24:	4b41      	ldr	r3, [pc, #260]	; (8004c2c <HAL_SPI_MspInit+0x1b0>)
 8004b26:	2280      	movs	r2, #128	; 0x80
 8004b28:	0152      	lsls	r2, r2, #5
 8004b2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004b2c:	4b3f      	ldr	r3, [pc, #252]	; (8004c2c <HAL_SPI_MspInit+0x1b0>)
 8004b2e:	0018      	movs	r0, r3
 8004b30:	f000 fd48 	bl	80055c4 <HAL_DMA_Init>
 8004b34:	1e03      	subs	r3, r0, #0
 8004b36:	d001      	beq.n	8004b3c <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8004b38:	f7ff ff88 	bl	8004a4c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a3b      	ldr	r2, [pc, #236]	; (8004c2c <HAL_SPI_MspInit+0x1b0>)
 8004b40:	649a      	str	r2, [r3, #72]	; 0x48
 8004b42:	4b3a      	ldr	r3, [pc, #232]	; (8004c2c <HAL_SPI_MspInit+0x1b0>)
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8004b48:	4b3a      	ldr	r3, [pc, #232]	; (8004c34 <HAL_SPI_MspInit+0x1b8>)
 8004b4a:	4a3b      	ldr	r2, [pc, #236]	; (8004c38 <HAL_SPI_MspInit+0x1bc>)
 8004b4c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8004b4e:	4b39      	ldr	r3, [pc, #228]	; (8004c34 <HAL_SPI_MspInit+0x1b8>)
 8004b50:	2201      	movs	r2, #1
 8004b52:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b54:	4b37      	ldr	r3, [pc, #220]	; (8004c34 <HAL_SPI_MspInit+0x1b8>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b5a:	4b36      	ldr	r3, [pc, #216]	; (8004c34 <HAL_SPI_MspInit+0x1b8>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b60:	4b34      	ldr	r3, [pc, #208]	; (8004c34 <HAL_SPI_MspInit+0x1b8>)
 8004b62:	2280      	movs	r2, #128	; 0x80
 8004b64:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b66:	4b33      	ldr	r3, [pc, #204]	; (8004c34 <HAL_SPI_MspInit+0x1b8>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b6c:	4b31      	ldr	r3, [pc, #196]	; (8004c34 <HAL_SPI_MspInit+0x1b8>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8004b72:	4b30      	ldr	r3, [pc, #192]	; (8004c34 <HAL_SPI_MspInit+0x1b8>)
 8004b74:	2220      	movs	r2, #32
 8004b76:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004b78:	4b2e      	ldr	r3, [pc, #184]	; (8004c34 <HAL_SPI_MspInit+0x1b8>)
 8004b7a:	2280      	movs	r2, #128	; 0x80
 8004b7c:	0192      	lsls	r2, r2, #6
 8004b7e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004b80:	4b2c      	ldr	r3, [pc, #176]	; (8004c34 <HAL_SPI_MspInit+0x1b8>)
 8004b82:	0018      	movs	r0, r3
 8004b84:	f000 fd1e 	bl	80055c4 <HAL_DMA_Init>
 8004b88:	1e03      	subs	r3, r0, #0
 8004b8a:	d001      	beq.n	8004b90 <HAL_SPI_MspInit+0x114>
    {
      Error_Handler();
 8004b8c:	f7ff ff5e 	bl	8004a4c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a28      	ldr	r2, [pc, #160]	; (8004c34 <HAL_SPI_MspInit+0x1b8>)
 8004b94:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b96:	4b27      	ldr	r3, [pc, #156]	; (8004c34 <HAL_SPI_MspInit+0x1b8>)
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	2019      	movs	r0, #25
 8004ba2:	f000 fcdd 	bl	8005560 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004ba6:	2019      	movs	r0, #25
 8004ba8:	f000 fcef 	bl	800558a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004bac:	e036      	b.n	8004c1c <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI2)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a22      	ldr	r2, [pc, #136]	; (8004c3c <HAL_SPI_MspInit+0x1c0>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d131      	bne.n	8004c1c <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004bb8:	4b1b      	ldr	r3, [pc, #108]	; (8004c28 <HAL_SPI_MspInit+0x1ac>)
 8004bba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bbc:	4b1a      	ldr	r3, [pc, #104]	; (8004c28 <HAL_SPI_MspInit+0x1ac>)
 8004bbe:	2180      	movs	r1, #128	; 0x80
 8004bc0:	01c9      	lsls	r1, r1, #7
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bc6:	4b18      	ldr	r3, [pc, #96]	; (8004c28 <HAL_SPI_MspInit+0x1ac>)
 8004bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bca:	4b17      	ldr	r3, [pc, #92]	; (8004c28 <HAL_SPI_MspInit+0x1ac>)
 8004bcc:	2102      	movs	r1, #2
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8004bd2:	4b15      	ldr	r3, [pc, #84]	; (8004c28 <HAL_SPI_MspInit+0x1ac>)
 8004bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	4013      	ands	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004bde:	2114      	movs	r1, #20
 8004be0:	187b      	adds	r3, r7, r1
 8004be2:	22e0      	movs	r2, #224	; 0xe0
 8004be4:	0212      	lsls	r2, r2, #8
 8004be6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be8:	187b      	adds	r3, r7, r1
 8004bea:	2202      	movs	r2, #2
 8004bec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bee:	187b      	adds	r3, r7, r1
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bf4:	187b      	adds	r3, r7, r1
 8004bf6:	2203      	movs	r2, #3
 8004bf8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8004bfa:	187b      	adds	r3, r7, r1
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c00:	187b      	adds	r3, r7, r1
 8004c02:	4a0f      	ldr	r2, [pc, #60]	; (8004c40 <HAL_SPI_MspInit+0x1c4>)
 8004c04:	0019      	movs	r1, r3
 8004c06:	0010      	movs	r0, r2
 8004c08:	f001 f99e 	bl	8005f48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2100      	movs	r1, #0
 8004c10:	201a      	movs	r0, #26
 8004c12:	f000 fca5 	bl	8005560 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004c16:	201a      	movs	r0, #26
 8004c18:	f000 fcb7 	bl	800558a <HAL_NVIC_EnableIRQ>
}
 8004c1c:	46c0      	nop			; (mov r8, r8)
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	b00a      	add	sp, #40	; 0x28
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40013000 	.word	0x40013000
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	20000e40 	.word	0x20000e40
 8004c30:	40020030 	.word	0x40020030
 8004c34:	20000df8 	.word	0x20000df8
 8004c38:	4002001c 	.word	0x4002001c
 8004c3c:	40003800 	.word	0x40003800
 8004c40:	50000400 	.word	0x50000400

08004c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08a      	sub	sp, #40	; 0x28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c4c:	2314      	movs	r3, #20
 8004c4e:	18fb      	adds	r3, r7, r3
 8004c50:	0018      	movs	r0, r3
 8004c52:	2314      	movs	r3, #20
 8004c54:	001a      	movs	r2, r3
 8004c56:	2100      	movs	r1, #0
 8004c58:	f005 f92c 	bl	8009eb4 <memset>
  if(huart->Instance==USART1)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a62      	ldr	r2, [pc, #392]	; (8004dec <HAL_UART_MspInit+0x1a8>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d15c      	bne.n	8004d20 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c66:	4b62      	ldr	r3, [pc, #392]	; (8004df0 <HAL_UART_MspInit+0x1ac>)
 8004c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c6a:	4b61      	ldr	r3, [pc, #388]	; (8004df0 <HAL_UART_MspInit+0x1ac>)
 8004c6c:	2180      	movs	r1, #128	; 0x80
 8004c6e:	01c9      	lsls	r1, r1, #7
 8004c70:	430a      	orrs	r2, r1
 8004c72:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c74:	4b5e      	ldr	r3, [pc, #376]	; (8004df0 <HAL_UART_MspInit+0x1ac>)
 8004c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c78:	4b5d      	ldr	r3, [pc, #372]	; (8004df0 <HAL_UART_MspInit+0x1ac>)
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c80:	4b5b      	ldr	r3, [pc, #364]	; (8004df0 <HAL_UART_MspInit+0x1ac>)
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	2201      	movs	r2, #1
 8004c86:	4013      	ands	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]
 8004c8a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004c8c:	2114      	movs	r1, #20
 8004c8e:	187b      	adds	r3, r7, r1
 8004c90:	22c0      	movs	r2, #192	; 0xc0
 8004c92:	00d2      	lsls	r2, r2, #3
 8004c94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c96:	187b      	adds	r3, r7, r1
 8004c98:	2202      	movs	r2, #2
 8004c9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c9c:	187b      	adds	r3, r7, r1
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ca2:	187b      	adds	r3, r7, r1
 8004ca4:	2203      	movs	r2, #3
 8004ca6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8004ca8:	187b      	adds	r3, r7, r1
 8004caa:	2204      	movs	r2, #4
 8004cac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cae:	187a      	adds	r2, r7, r1
 8004cb0:	23a0      	movs	r3, #160	; 0xa0
 8004cb2:	05db      	lsls	r3, r3, #23
 8004cb4:	0011      	movs	r1, r2
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f001 f946 	bl	8005f48 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004cbc:	4b4d      	ldr	r3, [pc, #308]	; (8004df4 <HAL_UART_MspInit+0x1b0>)
 8004cbe:	4a4e      	ldr	r2, [pc, #312]	; (8004df8 <HAL_UART_MspInit+0x1b4>)
 8004cc0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 8004cc2:	4b4c      	ldr	r3, [pc, #304]	; (8004df4 <HAL_UART_MspInit+0x1b0>)
 8004cc4:	2203      	movs	r2, #3
 8004cc6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cc8:	4b4a      	ldr	r3, [pc, #296]	; (8004df4 <HAL_UART_MspInit+0x1b0>)
 8004cca:	2210      	movs	r2, #16
 8004ccc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cce:	4b49      	ldr	r3, [pc, #292]	; (8004df4 <HAL_UART_MspInit+0x1b0>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004cd4:	4b47      	ldr	r3, [pc, #284]	; (8004df4 <HAL_UART_MspInit+0x1b0>)
 8004cd6:	2280      	movs	r2, #128	; 0x80
 8004cd8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cda:	4b46      	ldr	r3, [pc, #280]	; (8004df4 <HAL_UART_MspInit+0x1b0>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ce0:	4b44      	ldr	r3, [pc, #272]	; (8004df4 <HAL_UART_MspInit+0x1b0>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004ce6:	4b43      	ldr	r3, [pc, #268]	; (8004df4 <HAL_UART_MspInit+0x1b0>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004cec:	4b41      	ldr	r3, [pc, #260]	; (8004df4 <HAL_UART_MspInit+0x1b0>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004cf2:	4b40      	ldr	r3, [pc, #256]	; (8004df4 <HAL_UART_MspInit+0x1b0>)
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f000 fc65 	bl	80055c4 <HAL_DMA_Init>
 8004cfa:	1e03      	subs	r3, r0, #0
 8004cfc:	d001      	beq.n	8004d02 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8004cfe:	f7ff fea5 	bl	8004a4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a3b      	ldr	r2, [pc, #236]	; (8004df4 <HAL_UART_MspInit+0x1b0>)
 8004d06:	66da      	str	r2, [r3, #108]	; 0x6c
 8004d08:	4b3a      	ldr	r3, [pc, #232]	; (8004df4 <HAL_UART_MspInit+0x1b0>)
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004d0e:	2200      	movs	r2, #0
 8004d10:	2100      	movs	r1, #0
 8004d12:	201b      	movs	r0, #27
 8004d14:	f000 fc24 	bl	8005560 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004d18:	201b      	movs	r0, #27
 8004d1a:	f000 fc36 	bl	800558a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004d1e:	e060      	b.n	8004de2 <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART2)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a35      	ldr	r2, [pc, #212]	; (8004dfc <HAL_UART_MspInit+0x1b8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d15b      	bne.n	8004de2 <HAL_UART_MspInit+0x19e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d2a:	4b31      	ldr	r3, [pc, #196]	; (8004df0 <HAL_UART_MspInit+0x1ac>)
 8004d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d2e:	4b30      	ldr	r3, [pc, #192]	; (8004df0 <HAL_UART_MspInit+0x1ac>)
 8004d30:	2180      	movs	r1, #128	; 0x80
 8004d32:	0289      	lsls	r1, r1, #10
 8004d34:	430a      	orrs	r2, r1
 8004d36:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d38:	4b2d      	ldr	r3, [pc, #180]	; (8004df0 <HAL_UART_MspInit+0x1ac>)
 8004d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3c:	4b2c      	ldr	r3, [pc, #176]	; (8004df0 <HAL_UART_MspInit+0x1ac>)
 8004d3e:	2101      	movs	r1, #1
 8004d40:	430a      	orrs	r2, r1
 8004d42:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d44:	4b2a      	ldr	r3, [pc, #168]	; (8004df0 <HAL_UART_MspInit+0x1ac>)
 8004d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d48:	2201      	movs	r2, #1
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004d50:	2114      	movs	r1, #20
 8004d52:	187b      	adds	r3, r7, r1
 8004d54:	220c      	movs	r2, #12
 8004d56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d58:	187b      	adds	r3, r7, r1
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d5e:	187b      	adds	r3, r7, r1
 8004d60:	2200      	movs	r2, #0
 8004d62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d64:	187b      	adds	r3, r7, r1
 8004d66:	2203      	movs	r2, #3
 8004d68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8004d6a:	187b      	adds	r3, r7, r1
 8004d6c:	2204      	movs	r2, #4
 8004d6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d70:	187a      	adds	r2, r7, r1
 8004d72:	23a0      	movs	r3, #160	; 0xa0
 8004d74:	05db      	lsls	r3, r3, #23
 8004d76:	0011      	movs	r1, r2
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f001 f8e5 	bl	8005f48 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8004d7e:	4b20      	ldr	r3, [pc, #128]	; (8004e00 <HAL_UART_MspInit+0x1bc>)
 8004d80:	4a20      	ldr	r2, [pc, #128]	; (8004e04 <HAL_UART_MspInit+0x1c0>)
 8004d82:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 8004d84:	4b1e      	ldr	r3, [pc, #120]	; (8004e00 <HAL_UART_MspInit+0x1bc>)
 8004d86:	2204      	movs	r2, #4
 8004d88:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d8a:	4b1d      	ldr	r3, [pc, #116]	; (8004e00 <HAL_UART_MspInit+0x1bc>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d90:	4b1b      	ldr	r3, [pc, #108]	; (8004e00 <HAL_UART_MspInit+0x1bc>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d96:	4b1a      	ldr	r3, [pc, #104]	; (8004e00 <HAL_UART_MspInit+0x1bc>)
 8004d98:	2280      	movs	r2, #128	; 0x80
 8004d9a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d9c:	4b18      	ldr	r3, [pc, #96]	; (8004e00 <HAL_UART_MspInit+0x1bc>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004da2:	4b17      	ldr	r3, [pc, #92]	; (8004e00 <HAL_UART_MspInit+0x1bc>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004da8:	4b15      	ldr	r3, [pc, #84]	; (8004e00 <HAL_UART_MspInit+0x1bc>)
 8004daa:	2220      	movs	r2, #32
 8004dac:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004dae:	4b14      	ldr	r3, [pc, #80]	; (8004e00 <HAL_UART_MspInit+0x1bc>)
 8004db0:	2280      	movs	r2, #128	; 0x80
 8004db2:	0152      	lsls	r2, r2, #5
 8004db4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004db6:	4b12      	ldr	r3, [pc, #72]	; (8004e00 <HAL_UART_MspInit+0x1bc>)
 8004db8:	0018      	movs	r0, r3
 8004dba:	f000 fc03 	bl	80055c4 <HAL_DMA_Init>
 8004dbe:	1e03      	subs	r3, r0, #0
 8004dc0:	d001      	beq.n	8004dc6 <HAL_UART_MspInit+0x182>
      Error_Handler();
 8004dc2:	f7ff fe43 	bl	8004a4c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a0d      	ldr	r2, [pc, #52]	; (8004e00 <HAL_UART_MspInit+0x1bc>)
 8004dca:	671a      	str	r2, [r3, #112]	; 0x70
 8004dcc:	4b0c      	ldr	r3, [pc, #48]	; (8004e00 <HAL_UART_MspInit+0x1bc>)
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	201c      	movs	r0, #28
 8004dd8:	f000 fbc2 	bl	8005560 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004ddc:	201c      	movs	r0, #28
 8004dde:	f000 fbd4 	bl	800558a <HAL_NVIC_EnableIRQ>
}
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	46bd      	mov	sp, r7
 8004de6:	b00a      	add	sp, #40	; 0x28
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	40013800 	.word	0x40013800
 8004df0:	40021000 	.word	0x40021000
 8004df4:	20000c50 	.word	0x20000c50
 8004df8:	40020044 	.word	0x40020044
 8004dfc:	40004400 	.word	0x40004400
 8004e00:	20000bb0 	.word	0x20000bb0
 8004e04:	40020058 	.word	0x40020058

08004e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e0c:	e7fe      	b.n	8004e0c <NMI_Handler+0x4>

08004e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e12:	e7fe      	b.n	8004e12 <HardFault_Handler+0x4>

08004e14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004e18:	46c0      	nop			; (mov r8, r8)
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e2c:	f000 faae 	bl	800538c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e30:	46c0      	nop			; (mov r8, r8)
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004e3a:	2010      	movs	r0, #16
 8004e3c:	f001 fa3c 	bl	80062b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004e40:	46c0      	nop			; (mov r8, r8)
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
	...

08004e48 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8004e4c:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f000 fd67 	bl	8005922 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004e54:	4b04      	ldr	r3, [pc, #16]	; (8004e68 <DMA1_Channel2_3_IRQHandler+0x20>)
 8004e56:	0018      	movs	r0, r3
 8004e58:	f000 fd63 	bl	8005922 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004e5c:	46c0      	nop			; (mov r8, r8)
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	20000df8 	.word	0x20000df8
 8004e68:	20000e40 	.word	0x20000e40

08004e6c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004e70:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 8004e72:	0018      	movs	r0, r3
 8004e74:	f000 fd55 	bl	8005922 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004e78:	4b04      	ldr	r3, [pc, #16]	; (8004e8c <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 8004e7a:	0018      	movs	r0, r3
 8004e7c:	f000 fd51 	bl	8005922 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8004e80:	46c0      	nop			; (mov r8, r8)
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	46c0      	nop			; (mov r8, r8)
 8004e88:	20000c50 	.word	0x20000c50
 8004e8c:	20000bb0 	.word	0x20000bb0

08004e90 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004e94:	4b03      	ldr	r3, [pc, #12]	; (8004ea4 <SPI1_IRQHandler+0x14>)
 8004e96:	0018      	movs	r0, r3
 8004e98:	f003 f854 	bl	8007f44 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004e9c:	46c0      	nop			; (mov r8, r8)
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	46c0      	nop			; (mov r8, r8)
 8004ea4:	20000d1c 	.word	0x20000d1c

08004ea8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004eac:	4b03      	ldr	r3, [pc, #12]	; (8004ebc <SPI2_IRQHandler+0x14>)
 8004eae:	0018      	movs	r0, r3
 8004eb0:	f003 f848 	bl	8007f44 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004eb4:	46c0      	nop			; (mov r8, r8)
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	46c0      	nop			; (mov r8, r8)
 8004ebc:	20000bf8 	.word	0x20000bf8

08004ec0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004ec4:	4b03      	ldr	r3, [pc, #12]	; (8004ed4 <USART1_IRQHandler+0x14>)
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	f003 fd90 	bl	80089ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004ecc:	46c0      	nop			; (mov r8, r8)
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	46c0      	nop			; (mov r8, r8)
 8004ed4:	20000c98 	.word	0x20000c98

08004ed8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004edc:	4b03      	ldr	r3, [pc, #12]	; (8004eec <USART2_IRQHandler+0x14>)
 8004ede:	0018      	movs	r0, r3
 8004ee0:	f003 fd84 	bl	80089ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004ee4:	46c0      	nop			; (mov r8, r8)
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	20000d74 	.word	0x20000d74

08004ef0 <stmp3x_read_raw_buffered>:
/*============================================================================*/
/* Implementation of functions                                                */
/*============================================================================*/

int stmp3x_read_raw_buffered(uint8_t *data)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
	memcpy(data, &stpm_rxBuffer[0], STPM3x_SAMPLE_SIZE);
 8004ef8:	23af      	movs	r3, #175	; 0xaf
 8004efa:	005a      	lsls	r2, r3, #1
 8004efc:	4905      	ldr	r1, [pc, #20]	; (8004f14 <stmp3x_read_raw_buffered+0x24>)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	0018      	movs	r0, r3
 8004f02:	f004 ffce 	bl	8009ea2 <memcpy>
	return STPM3x_SAMPLE_SIZE;
 8004f06:	23af      	movs	r3, #175	; 0xaf
 8004f08:	005b      	lsls	r3, r3, #1
}
 8004f0a:	0018      	movs	r0, r3
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	b002      	add	sp, #8
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	20000ff0 	.word	0x20000ff0

08004f18 <stpm_init>:

}

/*****************************************************************************/
void stpm_init(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
	for (int i=0;i<STPM3x_SAMPLE_SIZE;i++)
 8004f1e:	2300      	movs	r3, #0
 8004f20:	607b      	str	r3, [r7, #4]
 8004f22:	e007      	b.n	8004f34 <stpm_init+0x1c>
		stpm_rxBuffer[i] = 0;
 8004f24:	4a2a      	ldr	r2, [pc, #168]	; (8004fd0 <stpm_init+0xb8>)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	18d3      	adds	r3, r2, r3
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<STPM3x_SAMPLE_SIZE;i++)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3301      	adds	r3, #1
 8004f32:	607b      	str	r3, [r7, #4]
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	235e      	movs	r3, #94	; 0x5e
 8004f38:	33ff      	adds	r3, #255	; 0xff
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	ddf2      	ble.n	8004f24 <stpm_init+0xc>
	for (int i=0;i<STPM3x_SAMPLE_SIZE;i++)
 8004f3e:	2300      	movs	r3, #0
 8004f40:	603b      	str	r3, [r7, #0]
 8004f42:	e007      	b.n	8004f54 <stpm_init+0x3c>
		stpm_txBuffer[i] = 0;
 8004f44:	4a23      	ldr	r2, [pc, #140]	; (8004fd4 <stpm_init+0xbc>)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	18d3      	adds	r3, r2, r3
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<STPM3x_SAMPLE_SIZE;i++)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	3301      	adds	r3, #1
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	235e      	movs	r3, #94	; 0x5e
 8004f58:	33ff      	adds	r3, #255	; 0xff
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	ddf2      	ble.n	8004f44 <stpm_init+0x2c>

	//MX_USART2_UART_Init();

	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);   // enable idle line interrupt
 8004f5e:	4b1e      	ldr	r3, [pc, #120]	; (8004fd8 <stpm_init+0xc0>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	4b1c      	ldr	r3, [pc, #112]	; (8004fd8 <stpm_init+0xc0>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2120      	movs	r1, #32
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	601a      	str	r2, [r3, #0]

	/** Initial command sequence to activate STPM3x to read periodically. */
	HAL_UART_Transmit(&huart2, &readCR3[0], 5, 1000);
 8004f6e:	23fa      	movs	r3, #250	; 0xfa
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	491a      	ldr	r1, [pc, #104]	; (8004fdc <stpm_init+0xc4>)
 8004f74:	4818      	ldr	r0, [pc, #96]	; (8004fd8 <stpm_init+0xc0>)
 8004f76:	2205      	movs	r2, #5
 8004f78:	f003 fb8a 	bl	8008690 <HAL_UART_Transmit>
	HAL_Delay(100);
 8004f7c:	2064      	movs	r0, #100	; 0x64
 8004f7e:	f000 fa21 	bl	80053c4 <HAL_Delay>
	HAL_UART_Transmit(&huart2, &readCR3[0], 5, 1000);
 8004f82:	23fa      	movs	r3, #250	; 0xfa
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4915      	ldr	r1, [pc, #84]	; (8004fdc <stpm_init+0xc4>)
 8004f88:	4813      	ldr	r0, [pc, #76]	; (8004fd8 <stpm_init+0xc0>)
 8004f8a:	2205      	movs	r2, #5
 8004f8c:	f003 fb80 	bl	8008690 <HAL_UART_Transmit>
	HAL_Delay(100);
 8004f90:	2064      	movs	r0, #100	; 0x64
 8004f92:	f000 fa17 	bl	80053c4 <HAL_Delay>
	HAL_UART_Transmit(&huart2, &sndCommand[0], 5, 1000);
 8004f96:	23fa      	movs	r3, #250	; 0xfa
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4911      	ldr	r1, [pc, #68]	; (8004fe0 <stpm_init+0xc8>)
 8004f9c:	480e      	ldr	r0, [pc, #56]	; (8004fd8 <stpm_init+0xc0>)
 8004f9e:	2205      	movs	r2, #5
 8004fa0:	f003 fb76 	bl	8008690 <HAL_UART_Transmit>
	HAL_Delay(100);
 8004fa4:	2064      	movs	r0, #100	; 0x64
 8004fa6:	f000 fa0d 	bl	80053c4 <HAL_Delay>
	HAL_UART_Transmit(&huart2, &configCR3[0], 5, 1000);
 8004faa:	23fa      	movs	r3, #250	; 0xfa
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	490d      	ldr	r1, [pc, #52]	; (8004fe4 <stpm_init+0xcc>)
 8004fb0:	4809      	ldr	r0, [pc, #36]	; (8004fd8 <stpm_init+0xc0>)
 8004fb2:	2205      	movs	r2, #5
 8004fb4:	f003 fb6c 	bl	8008690 <HAL_UART_Transmit>

	/** Start UART receive via DMA */
	HAL_UART_Receive_DMA(&huart2, rxDMABuffer, STPM3x_RX_BUFFER_SIZE);
 8004fb8:	23b4      	movs	r3, #180	; 0xb4
 8004fba:	005a      	lsls	r2, r3, #1
 8004fbc:	490a      	ldr	r1, [pc, #40]	; (8004fe8 <stpm_init+0xd0>)
 8004fbe:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <stpm_init+0xc0>)
 8004fc0:	0018      	movs	r0, r3
 8004fc2:	f003 fcad 	bl	8008920 <HAL_UART_Receive_DMA>
}
 8004fc6:	46c0      	nop			; (mov r8, r8)
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	b002      	add	sp, #8
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	46c0      	nop			; (mov r8, r8)
 8004fd0:	20000ff0 	.word	0x20000ff0
 8004fd4:	20001150 	.word	0x20001150
 8004fd8:	20000d74 	.word	0x20000d74
 8004fdc:	20000050 	.word	0x20000050
 8004fe0:	20000038 	.word	0x20000038
 8004fe4:	20000048 	.word	0x20000048
 8004fe8:	20000e88 	.word	0x20000e88

08004fec <stpm_Process>:


/*****************************************************************************/
void stpm_Process(void)
{
 8004fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fee:	b08b      	sub	sp, #44	; 0x2c
 8004ff0:	af04      	add	r7, sp, #16
	/** Set LATCH */
	errorCode = HAL_UART_Transmit(&huart2, &configCR3[0], 5, 1000);
 8004ff2:	23fa      	movs	r3, #250	; 0xfa
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	494a      	ldr	r1, [pc, #296]	; (8005120 <stpm_Process+0x134>)
 8004ff8:	484a      	ldr	r0, [pc, #296]	; (8005124 <stpm_Process+0x138>)
 8004ffa:	2205      	movs	r2, #5
 8004ffc:	f003 fb48 	bl	8008690 <HAL_UART_Transmit>
 8005000:	0003      	movs	r3, r0
 8005002:	001a      	movs	r2, r3
 8005004:	4b48      	ldr	r3, [pc, #288]	; (8005128 <stpm_Process+0x13c>)
 8005006:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8005008:	200a      	movs	r0, #10
 800500a:	f000 f9db 	bl	80053c4 <HAL_Delay>

	if (errorCode != HAL_OK)
 800500e:	4b46      	ldr	r3, [pc, #280]	; (8005128 <stpm_Process+0x13c>)
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d007      	beq.n	8005026 <stpm_Process+0x3a>
	{
		dbg_printf("errcode 1 : %d\n", errorCode);
 8005016:	4b44      	ldr	r3, [pc, #272]	; (8005128 <stpm_Process+0x13c>)
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	001a      	movs	r2, r3
 800501c:	4b43      	ldr	r3, [pc, #268]	; (800512c <stpm_Process+0x140>)
 800501e:	0011      	movs	r1, r2
 8005020:	0018      	movs	r0, r3
 8005022:	f005 fdab 	bl	800ab7c <iprintf>
	}

	/** Start from register 0 */
	errorCode = HAL_UART_Transmit(&huart2, &initCommand[0], 5, 1000);
 8005026:	23fa      	movs	r3, #250	; 0xfa
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4941      	ldr	r1, [pc, #260]	; (8005130 <stpm_Process+0x144>)
 800502c:	483d      	ldr	r0, [pc, #244]	; (8005124 <stpm_Process+0x138>)
 800502e:	2205      	movs	r2, #5
 8005030:	f003 fb2e 	bl	8008690 <HAL_UART_Transmit>
 8005034:	0003      	movs	r3, r0
 8005036:	001a      	movs	r2, r3
 8005038:	4b3b      	ldr	r3, [pc, #236]	; (8005128 <stpm_Process+0x13c>)
 800503a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 800503c:	200a      	movs	r0, #10
 800503e:	f000 f9c1 	bl	80053c4 <HAL_Delay>

	if (errorCode != HAL_OK)
 8005042:	4b39      	ldr	r3, [pc, #228]	; (8005128 <stpm_Process+0x13c>)
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d007      	beq.n	800505a <stpm_Process+0x6e>
	{
		dbg_printf("errcode 2 : %d\n", errorCode);
 800504a:	4b37      	ldr	r3, [pc, #220]	; (8005128 <stpm_Process+0x13c>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	001a      	movs	r2, r3
 8005050:	4b38      	ldr	r3, [pc, #224]	; (8005134 <stpm_Process+0x148>)
 8005052:	0011      	movs	r1, r2
 8005054:	0018      	movs	r0, r3
 8005056:	f005 fd91 	bl	800ab7c <iprintf>
	}

	/** Read all registers */
	for (int i = 0; i < 70; i++)
 800505a:	2300      	movs	r3, #0
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	e010      	b.n	8005082 <stpm_Process+0x96>
	{
		errorCode = HAL_UART_Transmit(&huart2, &sndCommand[0], 5, 1000);
 8005060:	23fa      	movs	r3, #250	; 0xfa
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4934      	ldr	r1, [pc, #208]	; (8005138 <stpm_Process+0x14c>)
 8005066:	482f      	ldr	r0, [pc, #188]	; (8005124 <stpm_Process+0x138>)
 8005068:	2205      	movs	r2, #5
 800506a:	f003 fb11 	bl	8008690 <HAL_UART_Transmit>
 800506e:	0003      	movs	r3, r0
 8005070:	001a      	movs	r2, r3
 8005072:	4b2d      	ldr	r3, [pc, #180]	; (8005128 <stpm_Process+0x13c>)
 8005074:	701a      	strb	r2, [r3, #0]
		HAL_Delay(5);
 8005076:	2005      	movs	r0, #5
 8005078:	f000 f9a4 	bl	80053c4 <HAL_Delay>
	for (int i = 0; i < 70; i++)
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	3301      	adds	r3, #1
 8005080:	617b      	str	r3, [r7, #20]
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2b45      	cmp	r3, #69	; 0x45
 8005086:	ddeb      	ble.n	8005060 <stpm_Process+0x74>
	}

	if (errorCode != HAL_OK)
 8005088:	4b27      	ldr	r3, [pc, #156]	; (8005128 <stpm_Process+0x13c>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d007      	beq.n	80050a0 <stpm_Process+0xb4>
	{
		dbg_printf("errcode 3 : %d\n", errorCode);
 8005090:	4b25      	ldr	r3, [pc, #148]	; (8005128 <stpm_Process+0x13c>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	001a      	movs	r2, r3
 8005096:	4b29      	ldr	r3, [pc, #164]	; (800513c <stpm_Process+0x150>)
 8005098:	0011      	movs	r1, r2
 800509a:	0018      	movs	r0, r3
 800509c:	f005 fd6e 	bl	800ab7c <iprintf>
	}

	HAL_Delay(100);
 80050a0:	2064      	movs	r0, #100	; 0x64
 80050a2:	f000 f98f 	bl	80053c4 <HAL_Delay>

	memcpy(&stpm_rxBuffer[0],&rxDMABuffer[10],STPM3x_SAMPLE_SIZE);
 80050a6:	23af      	movs	r3, #175	; 0xaf
 80050a8:	005a      	lsls	r2, r3, #1
 80050aa:	4925      	ldr	r1, [pc, #148]	; (8005140 <stpm_Process+0x154>)
 80050ac:	4b25      	ldr	r3, [pc, #148]	; (8005144 <stpm_Process+0x158>)
 80050ae:	0018      	movs	r0, r3
 80050b0:	f004 fef7 	bl	8009ea2 <memcpy>

#ifdef RTDEBUG
	//dbg_printf("RX Buffer : \n");
	int j = 0;
 80050b4:	2300      	movs	r3, #0
 80050b6:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 1; i++)
 80050b8:	2300      	movs	r3, #0
 80050ba:	613b      	str	r3, [r7, #16]
 80050bc:	e028      	b.n	8005110 <stpm_Process+0x124>
	{
		j = i *5;
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	0013      	movs	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	189b      	adds	r3, r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]
		dbg_printf("[%d] - %x:%x:%x:%x:%x \n", i, stpm_rxBuffer[j], stpm_rxBuffer[j+1], stpm_rxBuffer[j+2], stpm_rxBuffer[j+3], stpm_rxBuffer[j+4]);
 80050c8:	4a1e      	ldr	r2, [pc, #120]	; (8005144 <stpm_Process+0x158>)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	18d3      	adds	r3, r2, r3
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	001e      	movs	r6, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	3301      	adds	r3, #1
 80050d6:	4a1b      	ldr	r2, [pc, #108]	; (8005144 <stpm_Process+0x158>)
 80050d8:	5cd3      	ldrb	r3, [r2, r3]
 80050da:	607b      	str	r3, [r7, #4]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	3302      	adds	r3, #2
 80050e0:	4a18      	ldr	r2, [pc, #96]	; (8005144 <stpm_Process+0x158>)
 80050e2:	5cd3      	ldrb	r3, [r2, r3]
 80050e4:	001c      	movs	r4, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	3303      	adds	r3, #3
 80050ea:	4a16      	ldr	r2, [pc, #88]	; (8005144 <stpm_Process+0x158>)
 80050ec:	5cd3      	ldrb	r3, [r2, r3]
 80050ee:	001d      	movs	r5, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	3304      	adds	r3, #4
 80050f4:	4a13      	ldr	r2, [pc, #76]	; (8005144 <stpm_Process+0x158>)
 80050f6:	5cd3      	ldrb	r3, [r2, r3]
 80050f8:	6939      	ldr	r1, [r7, #16]
 80050fa:	4813      	ldr	r0, [pc, #76]	; (8005148 <stpm_Process+0x15c>)
 80050fc:	9302      	str	r3, [sp, #8]
 80050fe:	9501      	str	r5, [sp, #4]
 8005100:	9400      	str	r4, [sp, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	0032      	movs	r2, r6
 8005106:	f005 fd39 	bl	800ab7c <iprintf>
	for (int i = 0; i < 1; i++)
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	3301      	adds	r3, #1
 800510e:	613b      	str	r3, [r7, #16]
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	ddd3      	ble.n	80050be <stpm_Process+0xd2>
	}
#endif

}
 8005116:	46c0      	nop			; (mov r8, r8)
 8005118:	46bd      	mov	sp, r7
 800511a:	b007      	add	sp, #28
 800511c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800511e:	46c0      	nop			; (mov r8, r8)
 8005120:	20000048 	.word	0x20000048
 8005124:	20000d74 	.word	0x20000d74
 8005128:	2000114e 	.word	0x2000114e
 800512c:	0800e5bc 	.word	0x0800e5bc
 8005130:	20000040 	.word	0x20000040
 8005134:	0800e5cc 	.word	0x0800e5cc
 8005138:	20000038 	.word	0x20000038
 800513c:	0800e5dc 	.word	0x0800e5dc
 8005140:	20000e92 	.word	0x20000e92
 8005144:	20000ff0 	.word	0x20000ff0
 8005148:	0800e5ec 	.word	0x0800e5ec

0800514c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005158:	2300      	movs	r3, #0
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	e00a      	b.n	8005174 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800515e:	e000      	b.n	8005162 <_read+0x16>
 8005160:	bf00      	nop
 8005162:	0001      	movs	r1, r0
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	60ba      	str	r2, [r7, #8]
 800516a:	b2ca      	uxtb	r2, r1
 800516c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	3301      	adds	r3, #1
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	429a      	cmp	r2, r3
 800517a:	dbf0      	blt.n	800515e <_read+0x12>
	}

return len;
 800517c:	687b      	ldr	r3, [r7, #4]
}
 800517e:	0018      	movs	r0, r3
 8005180:	46bd      	mov	sp, r7
 8005182:	b006      	add	sp, #24
 8005184:	bd80      	pop	{r7, pc}

08005186 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b086      	sub	sp, #24
 800518a:	af00      	add	r7, sp, #0
 800518c:	60f8      	str	r0, [r7, #12]
 800518e:	60b9      	str	r1, [r7, #8]
 8005190:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005192:	2300      	movs	r3, #0
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	e009      	b.n	80051ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	1c5a      	adds	r2, r3, #1
 800519c:	60ba      	str	r2, [r7, #8]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	0018      	movs	r0, r3
 80051a2:	f7fe fda7 	bl	8003cf4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	3301      	adds	r3, #1
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	dbf1      	blt.n	8005198 <_write+0x12>
	}
	return len;
 80051b4:	687b      	ldr	r3, [r7, #4]
}
 80051b6:	0018      	movs	r0, r3
 80051b8:	46bd      	mov	sp, r7
 80051ba:	b006      	add	sp, #24
 80051bc:	bd80      	pop	{r7, pc}

080051be <_close>:

int _close(int file)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b082      	sub	sp, #8
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
	return -1;
 80051c6:	2301      	movs	r3, #1
 80051c8:	425b      	negs	r3, r3
}
 80051ca:	0018      	movs	r0, r3
 80051cc:	46bd      	mov	sp, r7
 80051ce:	b002      	add	sp, #8
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b082      	sub	sp, #8
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	2280      	movs	r2, #128	; 0x80
 80051e0:	0192      	lsls	r2, r2, #6
 80051e2:	605a      	str	r2, [r3, #4]
	return 0;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	0018      	movs	r0, r3
 80051e8:	46bd      	mov	sp, r7
 80051ea:	b002      	add	sp, #8
 80051ec:	bd80      	pop	{r7, pc}

080051ee <_isatty>:

int _isatty(int file)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b082      	sub	sp, #8
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
	return 1;
 80051f6:	2301      	movs	r3, #1
}
 80051f8:	0018      	movs	r0, r3
 80051fa:	46bd      	mov	sp, r7
 80051fc:	b002      	add	sp, #8
 80051fe:	bd80      	pop	{r7, pc}

08005200 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
	return 0;
 800520c:	2300      	movs	r3, #0
}
 800520e:	0018      	movs	r0, r3
 8005210:	46bd      	mov	sp, r7
 8005212:	b004      	add	sp, #16
 8005214:	bd80      	pop	{r7, pc}
	...

08005218 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005220:	4a14      	ldr	r2, [pc, #80]	; (8005274 <_sbrk+0x5c>)
 8005222:	4b15      	ldr	r3, [pc, #84]	; (8005278 <_sbrk+0x60>)
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800522c:	4b13      	ldr	r3, [pc, #76]	; (800527c <_sbrk+0x64>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d102      	bne.n	800523a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005234:	4b11      	ldr	r3, [pc, #68]	; (800527c <_sbrk+0x64>)
 8005236:	4a12      	ldr	r2, [pc, #72]	; (8005280 <_sbrk+0x68>)
 8005238:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800523a:	4b10      	ldr	r3, [pc, #64]	; (800527c <_sbrk+0x64>)
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	18d3      	adds	r3, r2, r3
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	429a      	cmp	r2, r3
 8005246:	d207      	bcs.n	8005258 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005248:	f004 fdf2 	bl	8009e30 <__errno>
 800524c:	0003      	movs	r3, r0
 800524e:	220c      	movs	r2, #12
 8005250:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005252:	2301      	movs	r3, #1
 8005254:	425b      	negs	r3, r3
 8005256:	e009      	b.n	800526c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005258:	4b08      	ldr	r3, [pc, #32]	; (800527c <_sbrk+0x64>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800525e:	4b07      	ldr	r3, [pc, #28]	; (800527c <_sbrk+0x64>)
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	18d2      	adds	r2, r2, r3
 8005266:	4b05      	ldr	r3, [pc, #20]	; (800527c <_sbrk+0x64>)
 8005268:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800526a:	68fb      	ldr	r3, [r7, #12]
}
 800526c:	0018      	movs	r0, r3
 800526e:	46bd      	mov	sp, r7
 8005270:	b006      	add	sp, #24
 8005272:	bd80      	pop	{r7, pc}
 8005274:	20005000 	.word	0x20005000
 8005278:	00000400 	.word	0x00000400
 800527c:	2000066c 	.word	0x2000066c
 8005280:	200012d0 	.word	0x200012d0

08005284 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005288:	46c0      	nop			; (mov r8, r8)
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8005290:	480d      	ldr	r0, [pc, #52]	; (80052c8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8005292:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005294:	480d      	ldr	r0, [pc, #52]	; (80052cc <LoopForever+0x6>)
  ldr r1, =_edata
 8005296:	490e      	ldr	r1, [pc, #56]	; (80052d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005298:	4a0e      	ldr	r2, [pc, #56]	; (80052d4 <LoopForever+0xe>)
  movs r3, #0
 800529a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800529c:	e002      	b.n	80052a4 <LoopCopyDataInit>

0800529e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800529e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052a2:	3304      	adds	r3, #4

080052a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052a8:	d3f9      	bcc.n	800529e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052aa:	4a0b      	ldr	r2, [pc, #44]	; (80052d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80052ac:	4c0b      	ldr	r4, [pc, #44]	; (80052dc <LoopForever+0x16>)
  movs r3, #0
 80052ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052b0:	e001      	b.n	80052b6 <LoopFillZerobss>

080052b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052b4:	3204      	adds	r2, #4

080052b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052b8:	d3fb      	bcc.n	80052b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80052ba:	f7ff ffe3 	bl	8005284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80052be:	f004 fdbd 	bl	8009e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80052c2:	f7ff f987 	bl	80045d4 <main>

080052c6 <LoopForever>:

LoopForever:
    b LoopForever
 80052c6:	e7fe      	b.n	80052c6 <LoopForever>
   ldr   r0, =_estack
 80052c8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80052cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80052d0:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 80052d4:	0800ed88 	.word	0x0800ed88
  ldr r2, =_sbss
 80052d8:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 80052dc:	200012d0 	.word	0x200012d0

080052e0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80052e0:	e7fe      	b.n	80052e0 <ADC1_COMP_IRQHandler>
	...

080052e4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80052ea:	1dfb      	adds	r3, r7, #7
 80052ec:	2200      	movs	r2, #0
 80052ee:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80052f0:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <HAL_Init+0x3c>)
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <HAL_Init+0x3c>)
 80052f6:	2140      	movs	r1, #64	; 0x40
 80052f8:	430a      	orrs	r2, r1
 80052fa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80052fc:	2000      	movs	r0, #0
 80052fe:	f000 f811 	bl	8005324 <HAL_InitTick>
 8005302:	1e03      	subs	r3, r0, #0
 8005304:	d003      	beq.n	800530e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8005306:	1dfb      	adds	r3, r7, #7
 8005308:	2201      	movs	r2, #1
 800530a:	701a      	strb	r2, [r3, #0]
 800530c:	e001      	b.n	8005312 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800530e:	f7ff fba1 	bl	8004a54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005312:	1dfb      	adds	r3, r7, #7
 8005314:	781b      	ldrb	r3, [r3, #0]
}
 8005316:	0018      	movs	r0, r3
 8005318:	46bd      	mov	sp, r7
 800531a:	b002      	add	sp, #8
 800531c:	bd80      	pop	{r7, pc}
 800531e:	46c0      	nop			; (mov r8, r8)
 8005320:	40022000 	.word	0x40022000

08005324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005324:	b590      	push	{r4, r7, lr}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800532c:	4b14      	ldr	r3, [pc, #80]	; (8005380 <HAL_InitTick+0x5c>)
 800532e:	681c      	ldr	r4, [r3, #0]
 8005330:	4b14      	ldr	r3, [pc, #80]	; (8005384 <HAL_InitTick+0x60>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	0019      	movs	r1, r3
 8005336:	23fa      	movs	r3, #250	; 0xfa
 8005338:	0098      	lsls	r0, r3, #2
 800533a:	f7fa fef7 	bl	800012c <__udivsi3>
 800533e:	0003      	movs	r3, r0
 8005340:	0019      	movs	r1, r3
 8005342:	0020      	movs	r0, r4
 8005344:	f7fa fef2 	bl	800012c <__udivsi3>
 8005348:	0003      	movs	r3, r0
 800534a:	0018      	movs	r0, r3
 800534c:	f000 f92d 	bl	80055aa <HAL_SYSTICK_Config>
 8005350:	1e03      	subs	r3, r0, #0
 8005352:	d001      	beq.n	8005358 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e00f      	b.n	8005378 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b03      	cmp	r3, #3
 800535c:	d80b      	bhi.n	8005376 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	2301      	movs	r3, #1
 8005362:	425b      	negs	r3, r3
 8005364:	2200      	movs	r2, #0
 8005366:	0018      	movs	r0, r3
 8005368:	f000 f8fa 	bl	8005560 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800536c:	4b06      	ldr	r3, [pc, #24]	; (8005388 <HAL_InitTick+0x64>)
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	e000      	b.n	8005378 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
}
 8005378:	0018      	movs	r0, r3
 800537a:	46bd      	mov	sp, r7
 800537c:	b003      	add	sp, #12
 800537e:	bd90      	pop	{r4, r7, pc}
 8005380:	20000058 	.word	0x20000058
 8005384:	20000060 	.word	0x20000060
 8005388:	2000005c 	.word	0x2000005c

0800538c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005390:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <HAL_IncTick+0x1c>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	001a      	movs	r2, r3
 8005396:	4b05      	ldr	r3, [pc, #20]	; (80053ac <HAL_IncTick+0x20>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	18d2      	adds	r2, r2, r3
 800539c:	4b03      	ldr	r3, [pc, #12]	; (80053ac <HAL_IncTick+0x20>)
 800539e:	601a      	str	r2, [r3, #0]
}
 80053a0:	46c0      	nop			; (mov r8, r8)
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	46c0      	nop			; (mov r8, r8)
 80053a8:	20000060 	.word	0x20000060
 80053ac:	200012b0 	.word	0x200012b0

080053b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	af00      	add	r7, sp, #0
  return uwTick;
 80053b4:	4b02      	ldr	r3, [pc, #8]	; (80053c0 <HAL_GetTick+0x10>)
 80053b6:	681b      	ldr	r3, [r3, #0]
}
 80053b8:	0018      	movs	r0, r3
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	46c0      	nop			; (mov r8, r8)
 80053c0:	200012b0 	.word	0x200012b0

080053c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80053cc:	f7ff fff0 	bl	80053b0 <HAL_GetTick>
 80053d0:	0003      	movs	r3, r0
 80053d2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	3301      	adds	r3, #1
 80053dc:	d005      	beq.n	80053ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80053de:	4b09      	ldr	r3, [pc, #36]	; (8005404 <HAL_Delay+0x40>)
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	001a      	movs	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	189b      	adds	r3, r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80053ea:	46c0      	nop			; (mov r8, r8)
 80053ec:	f7ff ffe0 	bl	80053b0 <HAL_GetTick>
 80053f0:	0002      	movs	r2, r0
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d8f7      	bhi.n	80053ec <HAL_Delay+0x28>
  {
  }
}
 80053fc:	46c0      	nop			; (mov r8, r8)
 80053fe:	46bd      	mov	sp, r7
 8005400:	b004      	add	sp, #16
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20000060 	.word	0x20000060

08005408 <__NVIC_EnableIRQ>:
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	0002      	movs	r2, r0
 8005410:	1dfb      	adds	r3, r7, #7
 8005412:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005414:	1dfb      	adds	r3, r7, #7
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2b7f      	cmp	r3, #127	; 0x7f
 800541a:	d809      	bhi.n	8005430 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800541c:	1dfb      	adds	r3, r7, #7
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	001a      	movs	r2, r3
 8005422:	231f      	movs	r3, #31
 8005424:	401a      	ands	r2, r3
 8005426:	4b04      	ldr	r3, [pc, #16]	; (8005438 <__NVIC_EnableIRQ+0x30>)
 8005428:	2101      	movs	r1, #1
 800542a:	4091      	lsls	r1, r2
 800542c:	000a      	movs	r2, r1
 800542e:	601a      	str	r2, [r3, #0]
}
 8005430:	46c0      	nop			; (mov r8, r8)
 8005432:	46bd      	mov	sp, r7
 8005434:	b002      	add	sp, #8
 8005436:	bd80      	pop	{r7, pc}
 8005438:	e000e100 	.word	0xe000e100

0800543c <__NVIC_SetPriority>:
{
 800543c:	b590      	push	{r4, r7, lr}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	0002      	movs	r2, r0
 8005444:	6039      	str	r1, [r7, #0]
 8005446:	1dfb      	adds	r3, r7, #7
 8005448:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800544a:	1dfb      	adds	r3, r7, #7
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	2b7f      	cmp	r3, #127	; 0x7f
 8005450:	d828      	bhi.n	80054a4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005452:	4a2f      	ldr	r2, [pc, #188]	; (8005510 <__NVIC_SetPriority+0xd4>)
 8005454:	1dfb      	adds	r3, r7, #7
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	b25b      	sxtb	r3, r3
 800545a:	089b      	lsrs	r3, r3, #2
 800545c:	33c0      	adds	r3, #192	; 0xc0
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	589b      	ldr	r3, [r3, r2]
 8005462:	1dfa      	adds	r2, r7, #7
 8005464:	7812      	ldrb	r2, [r2, #0]
 8005466:	0011      	movs	r1, r2
 8005468:	2203      	movs	r2, #3
 800546a:	400a      	ands	r2, r1
 800546c:	00d2      	lsls	r2, r2, #3
 800546e:	21ff      	movs	r1, #255	; 0xff
 8005470:	4091      	lsls	r1, r2
 8005472:	000a      	movs	r2, r1
 8005474:	43d2      	mvns	r2, r2
 8005476:	401a      	ands	r2, r3
 8005478:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	019b      	lsls	r3, r3, #6
 800547e:	22ff      	movs	r2, #255	; 0xff
 8005480:	401a      	ands	r2, r3
 8005482:	1dfb      	adds	r3, r7, #7
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	0018      	movs	r0, r3
 8005488:	2303      	movs	r3, #3
 800548a:	4003      	ands	r3, r0
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005490:	481f      	ldr	r0, [pc, #124]	; (8005510 <__NVIC_SetPriority+0xd4>)
 8005492:	1dfb      	adds	r3, r7, #7
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	b25b      	sxtb	r3, r3
 8005498:	089b      	lsrs	r3, r3, #2
 800549a:	430a      	orrs	r2, r1
 800549c:	33c0      	adds	r3, #192	; 0xc0
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	501a      	str	r2, [r3, r0]
}
 80054a2:	e031      	b.n	8005508 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80054a4:	4a1b      	ldr	r2, [pc, #108]	; (8005514 <__NVIC_SetPriority+0xd8>)
 80054a6:	1dfb      	adds	r3, r7, #7
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	0019      	movs	r1, r3
 80054ac:	230f      	movs	r3, #15
 80054ae:	400b      	ands	r3, r1
 80054b0:	3b08      	subs	r3, #8
 80054b2:	089b      	lsrs	r3, r3, #2
 80054b4:	3306      	adds	r3, #6
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	18d3      	adds	r3, r2, r3
 80054ba:	3304      	adds	r3, #4
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	1dfa      	adds	r2, r7, #7
 80054c0:	7812      	ldrb	r2, [r2, #0]
 80054c2:	0011      	movs	r1, r2
 80054c4:	2203      	movs	r2, #3
 80054c6:	400a      	ands	r2, r1
 80054c8:	00d2      	lsls	r2, r2, #3
 80054ca:	21ff      	movs	r1, #255	; 0xff
 80054cc:	4091      	lsls	r1, r2
 80054ce:	000a      	movs	r2, r1
 80054d0:	43d2      	mvns	r2, r2
 80054d2:	401a      	ands	r2, r3
 80054d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	019b      	lsls	r3, r3, #6
 80054da:	22ff      	movs	r2, #255	; 0xff
 80054dc:	401a      	ands	r2, r3
 80054de:	1dfb      	adds	r3, r7, #7
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	0018      	movs	r0, r3
 80054e4:	2303      	movs	r3, #3
 80054e6:	4003      	ands	r3, r0
 80054e8:	00db      	lsls	r3, r3, #3
 80054ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80054ec:	4809      	ldr	r0, [pc, #36]	; (8005514 <__NVIC_SetPriority+0xd8>)
 80054ee:	1dfb      	adds	r3, r7, #7
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	001c      	movs	r4, r3
 80054f4:	230f      	movs	r3, #15
 80054f6:	4023      	ands	r3, r4
 80054f8:	3b08      	subs	r3, #8
 80054fa:	089b      	lsrs	r3, r3, #2
 80054fc:	430a      	orrs	r2, r1
 80054fe:	3306      	adds	r3, #6
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	18c3      	adds	r3, r0, r3
 8005504:	3304      	adds	r3, #4
 8005506:	601a      	str	r2, [r3, #0]
}
 8005508:	46c0      	nop			; (mov r8, r8)
 800550a:	46bd      	mov	sp, r7
 800550c:	b003      	add	sp, #12
 800550e:	bd90      	pop	{r4, r7, pc}
 8005510:	e000e100 	.word	0xe000e100
 8005514:	e000ed00 	.word	0xe000ed00

08005518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3b01      	subs	r3, #1
 8005524:	4a0c      	ldr	r2, [pc, #48]	; (8005558 <SysTick_Config+0x40>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d901      	bls.n	800552e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800552a:	2301      	movs	r3, #1
 800552c:	e010      	b.n	8005550 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800552e:	4b0b      	ldr	r3, [pc, #44]	; (800555c <SysTick_Config+0x44>)
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	3a01      	subs	r2, #1
 8005534:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005536:	2301      	movs	r3, #1
 8005538:	425b      	negs	r3, r3
 800553a:	2103      	movs	r1, #3
 800553c:	0018      	movs	r0, r3
 800553e:	f7ff ff7d 	bl	800543c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005542:	4b06      	ldr	r3, [pc, #24]	; (800555c <SysTick_Config+0x44>)
 8005544:	2200      	movs	r2, #0
 8005546:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005548:	4b04      	ldr	r3, [pc, #16]	; (800555c <SysTick_Config+0x44>)
 800554a:	2207      	movs	r2, #7
 800554c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800554e:	2300      	movs	r3, #0
}
 8005550:	0018      	movs	r0, r3
 8005552:	46bd      	mov	sp, r7
 8005554:	b002      	add	sp, #8
 8005556:	bd80      	pop	{r7, pc}
 8005558:	00ffffff 	.word	0x00ffffff
 800555c:	e000e010 	.word	0xe000e010

08005560 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	60b9      	str	r1, [r7, #8]
 8005568:	607a      	str	r2, [r7, #4]
 800556a:	210f      	movs	r1, #15
 800556c:	187b      	adds	r3, r7, r1
 800556e:	1c02      	adds	r2, r0, #0
 8005570:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	187b      	adds	r3, r7, r1
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	b25b      	sxtb	r3, r3
 800557a:	0011      	movs	r1, r2
 800557c:	0018      	movs	r0, r3
 800557e:	f7ff ff5d 	bl	800543c <__NVIC_SetPriority>
}
 8005582:	46c0      	nop			; (mov r8, r8)
 8005584:	46bd      	mov	sp, r7
 8005586:	b004      	add	sp, #16
 8005588:	bd80      	pop	{r7, pc}

0800558a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b082      	sub	sp, #8
 800558e:	af00      	add	r7, sp, #0
 8005590:	0002      	movs	r2, r0
 8005592:	1dfb      	adds	r3, r7, #7
 8005594:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005596:	1dfb      	adds	r3, r7, #7
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	b25b      	sxtb	r3, r3
 800559c:	0018      	movs	r0, r3
 800559e:	f7ff ff33 	bl	8005408 <__NVIC_EnableIRQ>
}
 80055a2:	46c0      	nop			; (mov r8, r8)
 80055a4:	46bd      	mov	sp, r7
 80055a6:	b002      	add	sp, #8
 80055a8:	bd80      	pop	{r7, pc}

080055aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b082      	sub	sp, #8
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	0018      	movs	r0, r3
 80055b6:	f7ff ffaf 	bl	8005518 <SysTick_Config>
 80055ba:	0003      	movs	r3, r0
}
 80055bc:	0018      	movs	r0, r3
 80055be:	46bd      	mov	sp, r7
 80055c0:	b002      	add	sp, #8
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e061      	b.n	800569a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a32      	ldr	r2, [pc, #200]	; (80056a4 <HAL_DMA_Init+0xe0>)
 80055dc:	4694      	mov	ip, r2
 80055de:	4463      	add	r3, ip
 80055e0:	2114      	movs	r1, #20
 80055e2:	0018      	movs	r0, r3
 80055e4:	f7fa fda2 	bl	800012c <__udivsi3>
 80055e8:	0003      	movs	r3, r0
 80055ea:	009a      	lsls	r2, r3, #2
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a2d      	ldr	r2, [pc, #180]	; (80056a8 <HAL_DMA_Init+0xe4>)
 80055f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2225      	movs	r2, #37	; 0x25
 80055fa:	2102      	movs	r1, #2
 80055fc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4a28      	ldr	r2, [pc, #160]	; (80056ac <HAL_DMA_Init+0xe8>)
 800560a:	4013      	ands	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005616:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005622:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800562e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4313      	orrs	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689a      	ldr	r2, [r3, #8]
 8005648:	2380      	movs	r3, #128	; 0x80
 800564a:	01db      	lsls	r3, r3, #7
 800564c:	429a      	cmp	r2, r3
 800564e:	d018      	beq.n	8005682 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005650:	4b17      	ldr	r3, [pc, #92]	; (80056b0 <HAL_DMA_Init+0xec>)
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005658:	211c      	movs	r1, #28
 800565a:	400b      	ands	r3, r1
 800565c:	210f      	movs	r1, #15
 800565e:	4099      	lsls	r1, r3
 8005660:	000b      	movs	r3, r1
 8005662:	43d9      	mvns	r1, r3
 8005664:	4b12      	ldr	r3, [pc, #72]	; (80056b0 <HAL_DMA_Init+0xec>)
 8005666:	400a      	ands	r2, r1
 8005668:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800566a:	4b11      	ldr	r3, [pc, #68]	; (80056b0 <HAL_DMA_Init+0xec>)
 800566c:	6819      	ldr	r1, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005676:	201c      	movs	r0, #28
 8005678:	4003      	ands	r3, r0
 800567a:	409a      	lsls	r2, r3
 800567c:	4b0c      	ldr	r3, [pc, #48]	; (80056b0 <HAL_DMA_Init+0xec>)
 800567e:	430a      	orrs	r2, r1
 8005680:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2225      	movs	r2, #37	; 0x25
 800568c:	2101      	movs	r1, #1
 800568e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2224      	movs	r2, #36	; 0x24
 8005694:	2100      	movs	r1, #0
 8005696:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	0018      	movs	r0, r3
 800569c:	46bd      	mov	sp, r7
 800569e:	b004      	add	sp, #16
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	46c0      	nop			; (mov r8, r8)
 80056a4:	bffdfff8 	.word	0xbffdfff8
 80056a8:	40020000 	.word	0x40020000
 80056ac:	ffff800f 	.word	0xffff800f
 80056b0:	400200a8 	.word	0x400200a8

080056b4 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
 80056c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056c2:	2317      	movs	r3, #23
 80056c4:	18fb      	adds	r3, r7, r3
 80056c6:	2200      	movs	r2, #0
 80056c8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2224      	movs	r2, #36	; 0x24
 80056ce:	5c9b      	ldrb	r3, [r3, r2]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_DMA_Start+0x24>
 80056d4:	2302      	movs	r3, #2
 80056d6:	e032      	b.n	800573e <HAL_DMA_Start+0x8a>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2224      	movs	r2, #36	; 0x24
 80056dc:	2101      	movs	r1, #1
 80056de:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2225      	movs	r2, #37	; 0x25
 80056e4:	5c9b      	ldrb	r3, [r3, r2]
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d11d      	bne.n	8005728 <HAL_DMA_Start+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2225      	movs	r2, #37	; 0x25
 80056f0:	2102      	movs	r1, #2
 80056f2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2101      	movs	r1, #1
 8005706:	438a      	bics	r2, r1
 8005708:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	68b9      	ldr	r1, [r7, #8]
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f000 f9b4 	bl	8005a7e <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2101      	movs	r1, #1
 8005722:	430a      	orrs	r2, r1
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	e007      	b.n	8005738 <HAL_DMA_Start+0x84>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2224      	movs	r2, #36	; 0x24
 800572c:	2100      	movs	r1, #0
 800572e:	5499      	strb	r1, [r3, r2]
    status = HAL_BUSY;
 8005730:	2317      	movs	r3, #23
 8005732:	18fb      	adds	r3, r7, r3
 8005734:	2202      	movs	r2, #2
 8005736:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8005738:	2317      	movs	r3, #23
 800573a:	18fb      	adds	r3, r7, r3
 800573c:	781b      	ldrb	r3, [r3, #0]
}
 800573e:	0018      	movs	r0, r3
 8005740:	46bd      	mov	sp, r7
 8005742:	b006      	add	sp, #24
 8005744:	bd80      	pop	{r7, pc}

08005746 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b086      	sub	sp, #24
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	607a      	str	r2, [r7, #4]
 8005752:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005754:	2317      	movs	r3, #23
 8005756:	18fb      	adds	r3, r7, r3
 8005758:	2200      	movs	r2, #0
 800575a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2224      	movs	r2, #36	; 0x24
 8005760:	5c9b      	ldrb	r3, [r3, r2]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d101      	bne.n	800576a <HAL_DMA_Start_IT+0x24>
 8005766:	2302      	movs	r3, #2
 8005768:	e04f      	b.n	800580a <HAL_DMA_Start_IT+0xc4>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2224      	movs	r2, #36	; 0x24
 800576e:	2101      	movs	r1, #1
 8005770:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2225      	movs	r2, #37	; 0x25
 8005776:	5c9b      	ldrb	r3, [r3, r2]
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b01      	cmp	r3, #1
 800577c:	d13a      	bne.n	80057f4 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2225      	movs	r2, #37	; 0x25
 8005782:	2102      	movs	r1, #2
 8005784:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2101      	movs	r1, #1
 8005798:	438a      	bics	r2, r1
 800579a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	68b9      	ldr	r1, [r7, #8]
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f000 f96b 	bl	8005a7e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d008      	beq.n	80057c2 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	210e      	movs	r1, #14
 80057bc:	430a      	orrs	r2, r1
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	e00f      	b.n	80057e2 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2104      	movs	r1, #4
 80057ce:	438a      	bics	r2, r1
 80057d0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	210a      	movs	r1, #10
 80057de:	430a      	orrs	r2, r1
 80057e0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2101      	movs	r1, #1
 80057ee:	430a      	orrs	r2, r1
 80057f0:	601a      	str	r2, [r3, #0]
 80057f2:	e007      	b.n	8005804 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2224      	movs	r2, #36	; 0x24
 80057f8:	2100      	movs	r1, #0
 80057fa:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80057fc:	2317      	movs	r3, #23
 80057fe:	18fb      	adds	r3, r7, r3
 8005800:	2202      	movs	r2, #2
 8005802:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8005804:	2317      	movs	r3, #23
 8005806:	18fb      	adds	r3, r7, r3
 8005808:	781b      	ldrb	r3, [r3, #0]
}
 800580a:	0018      	movs	r0, r3
 800580c:	46bd      	mov	sp, r7
 800580e:	b006      	add	sp, #24
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800581a:	230f      	movs	r3, #15
 800581c:	18fb      	adds	r3, r7, r3
 800581e:	2200      	movs	r2, #0
 8005820:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2225      	movs	r2, #37	; 0x25
 8005826:	5c9b      	ldrb	r3, [r3, r2]
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d008      	beq.n	8005840 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2204      	movs	r2, #4
 8005832:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2224      	movs	r2, #36	; 0x24
 8005838:	2100      	movs	r1, #0
 800583a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e024      	b.n	800588a <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	210e      	movs	r1, #14
 800584c:	438a      	bics	r2, r1
 800584e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2101      	movs	r1, #1
 800585c:	438a      	bics	r2, r1
 800585e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005864:	221c      	movs	r2, #28
 8005866:	401a      	ands	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586c:	2101      	movs	r1, #1
 800586e:	4091      	lsls	r1, r2
 8005870:	000a      	movs	r2, r1
 8005872:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2225      	movs	r2, #37	; 0x25
 8005878:	2101      	movs	r1, #1
 800587a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2224      	movs	r2, #36	; 0x24
 8005880:	2100      	movs	r1, #0
 8005882:	5499      	strb	r1, [r3, r2]

    return status;
 8005884:	230f      	movs	r3, #15
 8005886:	18fb      	adds	r3, r7, r3
 8005888:	781b      	ldrb	r3, [r3, #0]
  }
}
 800588a:	0018      	movs	r0, r3
 800588c:	46bd      	mov	sp, r7
 800588e:	b004      	add	sp, #16
 8005890:	bd80      	pop	{r7, pc}

08005892 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b084      	sub	sp, #16
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800589a:	230f      	movs	r3, #15
 800589c:	18fb      	adds	r3, r7, r3
 800589e:	2200      	movs	r2, #0
 80058a0:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2225      	movs	r2, #37	; 0x25
 80058a6:	5c9b      	ldrb	r3, [r3, r2]
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d007      	beq.n	80058be <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2204      	movs	r2, #4
 80058b2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80058b4:	230f      	movs	r3, #15
 80058b6:	18fb      	adds	r3, r7, r3
 80058b8:	2201      	movs	r2, #1
 80058ba:	701a      	strb	r2, [r3, #0]
 80058bc:	e02a      	b.n	8005914 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	210e      	movs	r1, #14
 80058ca:	438a      	bics	r2, r1
 80058cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2101      	movs	r1, #1
 80058da:	438a      	bics	r2, r1
 80058dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e2:	221c      	movs	r2, #28
 80058e4:	401a      	ands	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	2101      	movs	r1, #1
 80058ec:	4091      	lsls	r1, r2
 80058ee:	000a      	movs	r2, r1
 80058f0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2225      	movs	r2, #37	; 0x25
 80058f6:	2101      	movs	r1, #1
 80058f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2224      	movs	r2, #36	; 0x24
 80058fe:	2100      	movs	r1, #0
 8005900:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005906:	2b00      	cmp	r3, #0
 8005908:	d004      	beq.n	8005914 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	0010      	movs	r0, r2
 8005912:	4798      	blx	r3
    }
  }
  return status;
 8005914:	230f      	movs	r3, #15
 8005916:	18fb      	adds	r3, r7, r3
 8005918:	781b      	ldrb	r3, [r3, #0]
}
 800591a:	0018      	movs	r0, r3
 800591c:	46bd      	mov	sp, r7
 800591e:	b004      	add	sp, #16
 8005920:	bd80      	pop	{r7, pc}

08005922 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b084      	sub	sp, #16
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800593e:	221c      	movs	r2, #28
 8005940:	4013      	ands	r3, r2
 8005942:	2204      	movs	r2, #4
 8005944:	409a      	lsls	r2, r3
 8005946:	0013      	movs	r3, r2
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	4013      	ands	r3, r2
 800594c:	d026      	beq.n	800599c <HAL_DMA_IRQHandler+0x7a>
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	2204      	movs	r2, #4
 8005952:	4013      	ands	r3, r2
 8005954:	d022      	beq.n	800599c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2220      	movs	r2, #32
 800595e:	4013      	ands	r3, r2
 8005960:	d107      	bne.n	8005972 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2104      	movs	r1, #4
 800596e:	438a      	bics	r2, r1
 8005970:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005976:	221c      	movs	r2, #28
 8005978:	401a      	ands	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	2104      	movs	r1, #4
 8005980:	4091      	lsls	r1, r2
 8005982:	000a      	movs	r2, r1
 8005984:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598a:	2b00      	cmp	r3, #0
 800598c:	d100      	bne.n	8005990 <HAL_DMA_IRQHandler+0x6e>
 800598e:	e071      	b.n	8005a74 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	0010      	movs	r0, r2
 8005998:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800599a:	e06b      	b.n	8005a74 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a0:	221c      	movs	r2, #28
 80059a2:	4013      	ands	r3, r2
 80059a4:	2202      	movs	r2, #2
 80059a6:	409a      	lsls	r2, r3
 80059a8:	0013      	movs	r3, r2
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	4013      	ands	r3, r2
 80059ae:	d02d      	beq.n	8005a0c <HAL_DMA_IRQHandler+0xea>
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2202      	movs	r2, #2
 80059b4:	4013      	ands	r3, r2
 80059b6:	d029      	beq.n	8005a0c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2220      	movs	r2, #32
 80059c0:	4013      	ands	r3, r2
 80059c2:	d10b      	bne.n	80059dc <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	210a      	movs	r1, #10
 80059d0:	438a      	bics	r2, r1
 80059d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2225      	movs	r2, #37	; 0x25
 80059d8:	2101      	movs	r1, #1
 80059da:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e0:	221c      	movs	r2, #28
 80059e2:	401a      	ands	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e8:	2102      	movs	r1, #2
 80059ea:	4091      	lsls	r1, r2
 80059ec:	000a      	movs	r2, r1
 80059ee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2224      	movs	r2, #36	; 0x24
 80059f4:	2100      	movs	r1, #0
 80059f6:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d039      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	0010      	movs	r0, r2
 8005a08:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005a0a:	e033      	b.n	8005a74 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a10:	221c      	movs	r2, #28
 8005a12:	4013      	ands	r3, r2
 8005a14:	2208      	movs	r2, #8
 8005a16:	409a      	lsls	r2, r3
 8005a18:	0013      	movs	r3, r2
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	d02a      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x154>
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2208      	movs	r2, #8
 8005a24:	4013      	ands	r3, r2
 8005a26:	d026      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	210e      	movs	r1, #14
 8005a34:	438a      	bics	r2, r1
 8005a36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3c:	221c      	movs	r2, #28
 8005a3e:	401a      	ands	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a44:	2101      	movs	r1, #1
 8005a46:	4091      	lsls	r1, r2
 8005a48:	000a      	movs	r2, r1
 8005a4a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2225      	movs	r2, #37	; 0x25
 8005a56:	2101      	movs	r1, #1
 8005a58:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2224      	movs	r2, #36	; 0x24
 8005a5e:	2100      	movs	r1, #0
 8005a60:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d005      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	0010      	movs	r0, r2
 8005a72:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005a74:	46c0      	nop			; (mov r8, r8)
 8005a76:	46c0      	nop			; (mov r8, r8)
}
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	b004      	add	sp, #16
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	60b9      	str	r1, [r7, #8]
 8005a88:	607a      	str	r2, [r7, #4]
 8005a8a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a90:	221c      	movs	r2, #28
 8005a92:	401a      	ands	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a98:	2101      	movs	r1, #1
 8005a9a:	4091      	lsls	r1, r2
 8005a9c:	000a      	movs	r2, r1
 8005a9e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	2b10      	cmp	r3, #16
 8005aae:	d108      	bne.n	8005ac2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005ac0:	e007      	b.n	8005ad2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	60da      	str	r2, [r3, #12]
}
 8005ad2:	46c0      	nop			; (mov r8, r8)
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	b004      	add	sp, #16
 8005ad8:	bd80      	pop	{r7, pc}
	...

08005adc <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8005adc:	b5b0      	push	{r4, r5, r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005ae8:	2317      	movs	r3, #23
 8005aea:	18fb      	adds	r3, r7, r3
 8005aec:	2201      	movs	r2, #1
 8005aee:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005af0:	4b16      	ldr	r3, [pc, #88]	; (8005b4c <HAL_FLASH_Program+0x70>)
 8005af2:	7c1b      	ldrb	r3, [r3, #16]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d101      	bne.n	8005afc <HAL_FLASH_Program+0x20>
 8005af8:	2302      	movs	r3, #2
 8005afa:	e022      	b.n	8005b42 <HAL_FLASH_Program+0x66>
 8005afc:	4b13      	ldr	r3, [pc, #76]	; (8005b4c <HAL_FLASH_Program+0x70>)
 8005afe:	2201      	movs	r2, #1
 8005b00:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005b02:	2517      	movs	r5, #23
 8005b04:	197c      	adds	r4, r7, r5
 8005b06:	4b12      	ldr	r3, [pc, #72]	; (8005b50 <HAL_FLASH_Program+0x74>)
 8005b08:	0018      	movs	r0, r3
 8005b0a:	f000 f887 	bl	8005c1c <FLASH_WaitForLastOperation>
 8005b0e:	0003      	movs	r3, r0
 8005b10:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8005b12:	197b      	adds	r3, r7, r5
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10d      	bne.n	8005b36 <HAL_FLASH_Program+0x5a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005b1a:	4b0c      	ldr	r3, [pc, #48]	; (8005b4c <HAL_FLASH_Program+0x70>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	615a      	str	r2, [r3, #20]

    /*Program word (32-bit) at a specified address.*/
    *(__IO uint32_t *)Address = Data;
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005b26:	2317      	movs	r3, #23
 8005b28:	18fc      	adds	r4, r7, r3
 8005b2a:	4b09      	ldr	r3, [pc, #36]	; (8005b50 <HAL_FLASH_Program+0x74>)
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	f000 f875 	bl	8005c1c <FLASH_WaitForLastOperation>
 8005b32:	0003      	movs	r3, r0
 8005b34:	7023      	strb	r3, [r4, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005b36:	4b05      	ldr	r3, [pc, #20]	; (8005b4c <HAL_FLASH_Program+0x70>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	741a      	strb	r2, [r3, #16]

  return status;
 8005b3c:	2317      	movs	r3, #23
 8005b3e:	18fb      	adds	r3, r7, r3
 8005b40:	781b      	ldrb	r3, [r3, #0]
}
 8005b42:	0018      	movs	r0, r3
 8005b44:	46bd      	mov	sp, r7
 8005b46:	b006      	add	sp, #24
 8005b48:	bdb0      	pop	{r4, r5, r7, pc}
 8005b4a:	46c0      	nop			; (mov r8, r8)
 8005b4c:	200012b4 	.word	0x200012b4
 8005b50:	0000c350 	.word	0x0000c350

08005b54 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  /* Unlocking FLASH_PECR register access*/
  if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8005b5a:	4b21      	ldr	r3, [pc, #132]	; (8005be0 <HAL_FLASH_Unlock+0x8c>)
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	4013      	ands	r3, r2
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d118      	bne.n	8005b98 <HAL_FLASH_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b66:	f3ef 8310 	mrs	r3, PRIMASK
 8005b6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8005b6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b70:	b672      	cpsid	i
    __disable_irq();

    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 8005b72:	4b1b      	ldr	r3, [pc, #108]	; (8005be0 <HAL_FLASH_Unlock+0x8c>)
 8005b74:	4a1b      	ldr	r2, [pc, #108]	; (8005be4 <HAL_FLASH_Unlock+0x90>)
 8005b76:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 8005b78:	4b19      	ldr	r3, [pc, #100]	; (8005be0 <HAL_FLASH_Unlock+0x8c>)
 8005b7a:	4a1b      	ldr	r2, [pc, #108]	; (8005be8 <HAL_FLASH_Unlock+0x94>)
 8005b7c:	60da      	str	r2, [r3, #12]
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	f383 8810 	msr	PRIMASK, r3

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8005b88:	4b15      	ldr	r3, [pc, #84]	; (8005be0 <HAL_FLASH_Unlock+0x8c>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	4013      	ands	r3, r2
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d101      	bne.n	8005b98 <HAL_FLASH_Unlock+0x44>
    {
      return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e01f      	b.n	8005bd8 <HAL_FLASH_Unlock+0x84>
    }
  }

  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8005b98:	4b11      	ldr	r3, [pc, #68]	; (8005be0 <HAL_FLASH_Unlock+0x8c>)
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d118      	bne.n	8005bd6 <HAL_FLASH_Unlock+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ba4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ba8:	607b      	str	r3, [r7, #4]
  return(result);
 8005baa:	687b      	ldr	r3, [r7, #4]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8005bac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005bae:	b672      	cpsid	i
    __disable_irq();

    /* Unlocking the program memory access */
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 8005bb0:	4b0b      	ldr	r3, [pc, #44]	; (8005be0 <HAL_FLASH_Unlock+0x8c>)
 8005bb2:	4a0e      	ldr	r2, [pc, #56]	; (8005bec <HAL_FLASH_Unlock+0x98>)
 8005bb4:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 8005bb6:	4b0a      	ldr	r3, [pc, #40]	; (8005be0 <HAL_FLASH_Unlock+0x8c>)
 8005bb8:	4a0d      	ldr	r2, [pc, #52]	; (8005bf0 <HAL_FLASH_Unlock+0x9c>)
 8005bba:	611a      	str	r2, [r3, #16]
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f383 8810 	msr	PRIMASK, r3

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8005bc6:	4b06      	ldr	r3, [pc, #24]	; (8005be0 <HAL_FLASH_Unlock+0x8c>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	4013      	ands	r3, r2
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d101      	bne.n	8005bd6 <HAL_FLASH_Unlock+0x82>
    {
      return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e000      	b.n	8005bd8 <HAL_FLASH_Unlock+0x84>
    }
  }

  return HAL_OK; 
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	0018      	movs	r0, r3
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	b006      	add	sp, #24
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	40022000 	.word	0x40022000
 8005be4:	89abcdef 	.word	0x89abcdef
 8005be8:	02030405 	.word	0x02030405
 8005bec:	8c9daebf 	.word	0x8c9daebf
 8005bf0:	13141516 	.word	0x13141516

08005bf4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
  /* Set the PRGLOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8005bf8:	4b07      	ldr	r3, [pc, #28]	; (8005c18 <HAL_FLASH_Lock+0x24>)
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	4b06      	ldr	r3, [pc, #24]	; (8005c18 <HAL_FLASH_Lock+0x24>)
 8005bfe:	2102      	movs	r1, #2
 8005c00:	430a      	orrs	r2, r1
 8005c02:	605a      	str	r2, [r3, #4]
  
  /* Set the PELOCK Bit to lock the PECR Register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8005c04:	4b04      	ldr	r3, [pc, #16]	; (8005c18 <HAL_FLASH_Lock+0x24>)
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	4b03      	ldr	r3, [pc, #12]	; (8005c18 <HAL_FLASH_Lock+0x24>)
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	605a      	str	r2, [r3, #4]

  return HAL_OK;  
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	0018      	movs	r0, r3
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	40022000 	.word	0x40022000

08005c1c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005c24:	f7ff fbc4 	bl	80053b0 <HAL_GetTick>
 8005c28:	0003      	movs	r3, r0
 8005c2a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005c2c:	e00f      	b.n	8005c4e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	3301      	adds	r3, #1
 8005c32:	d00c      	beq.n	8005c4e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d007      	beq.n	8005c4a <FLASH_WaitForLastOperation+0x2e>
 8005c3a:	f7ff fbb9 	bl	80053b0 <HAL_GetTick>
 8005c3e:	0002      	movs	r2, r0
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d201      	bcs.n	8005c4e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e052      	b.n	8005cf4 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005c4e:	4b2b      	ldr	r3, [pc, #172]	; (8005cfc <FLASH_WaitForLastOperation+0xe0>)
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	2201      	movs	r2, #1
 8005c54:	4013      	ands	r3, r2
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d0e9      	beq.n	8005c2e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005c5a:	4b28      	ldr	r3, [pc, #160]	; (8005cfc <FLASH_WaitForLastOperation+0xe0>)
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	4013      	ands	r3, r2
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d102      	bne.n	8005c6c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005c66:	4b25      	ldr	r3, [pc, #148]	; (8005cfc <FLASH_WaitForLastOperation+0xe0>)
 8005c68:	2202      	movs	r2, #2
 8005c6a:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8005c6c:	4b23      	ldr	r3, [pc, #140]	; (8005cfc <FLASH_WaitForLastOperation+0xe0>)
 8005c6e:	699a      	ldr	r2, [r3, #24]
 8005c70:	2380      	movs	r3, #128	; 0x80
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	401a      	ands	r2, r3
 8005c76:	2380      	movs	r3, #128	; 0x80
 8005c78:	005b      	lsls	r3, r3, #1
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d035      	beq.n	8005cea <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8005c7e:	4b1f      	ldr	r3, [pc, #124]	; (8005cfc <FLASH_WaitForLastOperation+0xe0>)
 8005c80:	699a      	ldr	r2, [r3, #24]
 8005c82:	2380      	movs	r3, #128	; 0x80
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8005c88:	2380      	movs	r3, #128	; 0x80
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d02c      	beq.n	8005cea <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8005c90:	4b1a      	ldr	r3, [pc, #104]	; (8005cfc <FLASH_WaitForLastOperation+0xe0>)
 8005c92:	699a      	ldr	r2, [r3, #24]
 8005c94:	2380      	movs	r3, #128	; 0x80
 8005c96:	00db      	lsls	r3, r3, #3
 8005c98:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8005c9a:	2380      	movs	r3, #128	; 0x80
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d023      	beq.n	8005cea <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8005ca2:	4b16      	ldr	r3, [pc, #88]	; (8005cfc <FLASH_WaitForLastOperation+0xe0>)
 8005ca4:	699a      	ldr	r2, [r3, #24]
 8005ca6:	2380      	movs	r3, #128	; 0x80
 8005ca8:	011b      	lsls	r3, r3, #4
 8005caa:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8005cac:	2380      	movs	r3, #128	; 0x80
 8005cae:	011b      	lsls	r3, r3, #4
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d01a      	beq.n	8005cea <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8005cb4:	4b11      	ldr	r3, [pc, #68]	; (8005cfc <FLASH_WaitForLastOperation+0xe0>)
 8005cb6:	699a      	ldr	r2, [r3, #24]
 8005cb8:	2380      	movs	r3, #128	; 0x80
 8005cba:	019b      	lsls	r3, r3, #6
 8005cbc:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8005cbe:	2380      	movs	r3, #128	; 0x80
 8005cc0:	019b      	lsls	r3, r3, #6
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d011      	beq.n	8005cea <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8005cc6:	4b0d      	ldr	r3, [pc, #52]	; (8005cfc <FLASH_WaitForLastOperation+0xe0>)
 8005cc8:	699a      	ldr	r2, [r3, #24]
 8005cca:	2380      	movs	r3, #128	; 0x80
 8005ccc:	029b      	lsls	r3, r3, #10
 8005cce:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8005cd0:	2380      	movs	r3, #128	; 0x80
 8005cd2:	029b      	lsls	r3, r3, #10
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d008      	beq.n	8005cea <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8005cd8:	4b08      	ldr	r3, [pc, #32]	; (8005cfc <FLASH_WaitForLastOperation+0xe0>)
 8005cda:	699a      	ldr	r2, [r3, #24]
 8005cdc:	2380      	movs	r3, #128	; 0x80
 8005cde:	025b      	lsls	r3, r3, #9
 8005ce0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8005ce2:	2380      	movs	r3, #128	; 0x80
 8005ce4:	025b      	lsls	r3, r3, #9
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d103      	bne.n	8005cf2 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 8005cea:	f000 f809 	bl	8005d00 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e000      	b.n	8005cf4 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	b004      	add	sp, #16
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	40022000 	.word	0x40022000

08005d00 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8005d06:	2300      	movs	r3, #0
 8005d08:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005d0a:	4b49      	ldr	r3, [pc, #292]	; (8005e30 <FLASH_SetErrorCode+0x130>)
 8005d0c:	699a      	ldr	r2, [r3, #24]
 8005d0e:	2380      	movs	r3, #128	; 0x80
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	401a      	ands	r2, r3
 8005d14:	2380      	movs	r3, #128	; 0x80
 8005d16:	005b      	lsls	r3, r3, #1
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d10a      	bne.n	8005d32 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005d1c:	4b45      	ldr	r3, [pc, #276]	; (8005e34 <FLASH_SetErrorCode+0x134>)
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	2202      	movs	r2, #2
 8005d22:	431a      	orrs	r2, r3
 8005d24:	4b43      	ldr	r3, [pc, #268]	; (8005e34 <FLASH_SetErrorCode+0x134>)
 8005d26:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2280      	movs	r2, #128	; 0x80
 8005d2c:	0052      	lsls	r2, r2, #1
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8005d32:	4b3f      	ldr	r3, [pc, #252]	; (8005e30 <FLASH_SetErrorCode+0x130>)
 8005d34:	699a      	ldr	r2, [r3, #24]
 8005d36:	2380      	movs	r3, #128	; 0x80
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	401a      	ands	r2, r3
 8005d3c:	2380      	movs	r3, #128	; 0x80
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d10a      	bne.n	8005d5a <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005d44:	4b3b      	ldr	r3, [pc, #236]	; (8005e34 <FLASH_SetErrorCode+0x134>)
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	4b39      	ldr	r3, [pc, #228]	; (8005e34 <FLASH_SetErrorCode+0x134>)
 8005d4e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2280      	movs	r2, #128	; 0x80
 8005d54:	0092      	lsls	r2, r2, #2
 8005d56:	4313      	orrs	r3, r2
 8005d58:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8005d5a:	4b35      	ldr	r3, [pc, #212]	; (8005e30 <FLASH_SetErrorCode+0x130>)
 8005d5c:	699a      	ldr	r2, [r3, #24]
 8005d5e:	2380      	movs	r3, #128	; 0x80
 8005d60:	00db      	lsls	r3, r3, #3
 8005d62:	401a      	ands	r2, r3
 8005d64:	2380      	movs	r3, #128	; 0x80
 8005d66:	00db      	lsls	r3, r3, #3
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d10a      	bne.n	8005d82 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8005d6c:	4b31      	ldr	r3, [pc, #196]	; (8005e34 <FLASH_SetErrorCode+0x134>)
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	2208      	movs	r2, #8
 8005d72:	431a      	orrs	r2, r3
 8005d74:	4b2f      	ldr	r3, [pc, #188]	; (8005e34 <FLASH_SetErrorCode+0x134>)
 8005d76:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2280      	movs	r2, #128	; 0x80
 8005d7c:	00d2      	lsls	r2, r2, #3
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8005d82:	4b2b      	ldr	r3, [pc, #172]	; (8005e30 <FLASH_SetErrorCode+0x130>)
 8005d84:	699a      	ldr	r2, [r3, #24]
 8005d86:	2380      	movs	r3, #128	; 0x80
 8005d88:	011b      	lsls	r3, r3, #4
 8005d8a:	401a      	ands	r2, r3
 8005d8c:	2380      	movs	r3, #128	; 0x80
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d10a      	bne.n	8005daa <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8005d94:	4b27      	ldr	r3, [pc, #156]	; (8005e34 <FLASH_SetErrorCode+0x134>)
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	2204      	movs	r2, #4
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	4b25      	ldr	r3, [pc, #148]	; (8005e34 <FLASH_SetErrorCode+0x134>)
 8005d9e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2280      	movs	r2, #128	; 0x80
 8005da4:	0112      	lsls	r2, r2, #4
 8005da6:	4313      	orrs	r3, r2
 8005da8:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8005daa:	4b21      	ldr	r3, [pc, #132]	; (8005e30 <FLASH_SetErrorCode+0x130>)
 8005dac:	699a      	ldr	r2, [r3, #24]
 8005dae:	2380      	movs	r3, #128	; 0x80
 8005db0:	019b      	lsls	r3, r3, #6
 8005db2:	401a      	ands	r2, r3
 8005db4:	2380      	movs	r3, #128	; 0x80
 8005db6:	019b      	lsls	r3, r3, #6
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d10a      	bne.n	8005dd2 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005dbc:	4b1d      	ldr	r3, [pc, #116]	; (8005e34 <FLASH_SetErrorCode+0x134>)
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	2210      	movs	r2, #16
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	4b1b      	ldr	r3, [pc, #108]	; (8005e34 <FLASH_SetErrorCode+0x134>)
 8005dc6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2280      	movs	r2, #128	; 0x80
 8005dcc:	0192      	lsls	r2, r2, #6
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8005dd2:	4b17      	ldr	r3, [pc, #92]	; (8005e30 <FLASH_SetErrorCode+0x130>)
 8005dd4:	699a      	ldr	r2, [r3, #24]
 8005dd6:	2380      	movs	r3, #128	; 0x80
 8005dd8:	029b      	lsls	r3, r3, #10
 8005dda:	401a      	ands	r2, r3
 8005ddc:	2380      	movs	r3, #128	; 0x80
 8005dde:	029b      	lsls	r3, r3, #10
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d109      	bne.n	8005df8 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8005de4:	4b13      	ldr	r3, [pc, #76]	; (8005e34 <FLASH_SetErrorCode+0x134>)
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	2220      	movs	r2, #32
 8005dea:	431a      	orrs	r2, r3
 8005dec:	4b11      	ldr	r3, [pc, #68]	; (8005e34 <FLASH_SetErrorCode+0x134>)
 8005dee:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2220      	movs	r2, #32
 8005df4:	4313      	orrs	r3, r2
 8005df6:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8005df8:	4b0d      	ldr	r3, [pc, #52]	; (8005e30 <FLASH_SetErrorCode+0x130>)
 8005dfa:	699a      	ldr	r2, [r3, #24]
 8005dfc:	2380      	movs	r3, #128	; 0x80
 8005dfe:	025b      	lsls	r3, r3, #9
 8005e00:	401a      	ands	r2, r3
 8005e02:	2380      	movs	r3, #128	; 0x80
 8005e04:	025b      	lsls	r3, r3, #9
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d10a      	bne.n	8005e20 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8005e0a:	4b0a      	ldr	r3, [pc, #40]	; (8005e34 <FLASH_SetErrorCode+0x134>)
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	2240      	movs	r2, #64	; 0x40
 8005e10:	431a      	orrs	r2, r3
 8005e12:	4b08      	ldr	r3, [pc, #32]	; (8005e34 <FLASH_SetErrorCode+0x134>)
 8005e14:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2280      	movs	r2, #128	; 0x80
 8005e1a:	0252      	lsls	r2, r2, #9
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005e20:	4b03      	ldr	r3, [pc, #12]	; (8005e30 <FLASH_SetErrorCode+0x130>)
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	619a      	str	r2, [r3, #24]
}  
 8005e26:	46c0      	nop			; (mov r8, r8)
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	b002      	add	sp, #8
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	46c0      	nop			; (mov r8, r8)
 8005e30:	40022000 	.word	0x40022000
 8005e34:	200012b4 	.word	0x200012b4

08005e38 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005e38:	b5b0      	push	{r4, r5, r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005e42:	230f      	movs	r3, #15
 8005e44:	18fb      	adds	r3, r7, r3
 8005e46:	2201      	movs	r2, #1
 8005e48:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005e4e:	4b29      	ldr	r3, [pc, #164]	; (8005ef4 <HAL_FLASHEx_Erase+0xbc>)
 8005e50:	7c1b      	ldrb	r3, [r3, #16]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d101      	bne.n	8005e5a <HAL_FLASHEx_Erase+0x22>
 8005e56:	2302      	movs	r3, #2
 8005e58:	e048      	b.n	8005eec <HAL_FLASHEx_Erase+0xb4>
 8005e5a:	4b26      	ldr	r3, [pc, #152]	; (8005ef4 <HAL_FLASHEx_Erase+0xbc>)
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	741a      	strb	r2, [r3, #16]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005e60:	250f      	movs	r5, #15
 8005e62:	197c      	adds	r4, r7, r5
 8005e64:	4b24      	ldr	r3, [pc, #144]	; (8005ef8 <HAL_FLASHEx_Erase+0xc0>)
 8005e66:	0018      	movs	r0, r3
 8005e68:	f7ff fed8 	bl	8005c1c <FLASH_WaitForLastOperation>
 8005e6c:	0003      	movs	r3, r0
 8005e6e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8005e70:	197b      	adds	r3, r7, r5
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d133      	bne.n	8005ee0 <HAL_FLASHEx_Erase+0xa8>
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	4252      	negs	r2, r2
 8005e7e:	601a      	str	r2, [r3, #0]
    assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_PROGRAM_ADDRESS((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEraseInit->NbPages * FLASH_PAGE_SIZE - 1U));

    /* Erase page by page to be done*/
    for(address = pEraseInit->PageAddress; 
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	60bb      	str	r3, [r7, #8]
 8005e86:	e022      	b.n	8005ece <HAL_FLASHEx_Erase+0x96>
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
        address += FLASH_PAGE_SIZE)
    {
      FLASH_PageErase(address);
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	0018      	movs	r0, r3
 8005e8c:	f000 f83a 	bl	8005f04 <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005e90:	250f      	movs	r5, #15
 8005e92:	197c      	adds	r4, r7, r5
 8005e94:	4b18      	ldr	r3, [pc, #96]	; (8005ef8 <HAL_FLASHEx_Erase+0xc0>)
 8005e96:	0018      	movs	r0, r3
 8005e98:	f7ff fec0 	bl	8005c1c <FLASH_WaitForLastOperation>
 8005e9c:	0003      	movs	r3, r0
 8005e9e:	7023      	strb	r3, [r4, #0]

      /* If the erase operation is completed, disable the ERASE Bit */
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8005ea0:	4b16      	ldr	r3, [pc, #88]	; (8005efc <HAL_FLASHEx_Erase+0xc4>)
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	4b15      	ldr	r3, [pc, #84]	; (8005efc <HAL_FLASHEx_Erase+0xc4>)
 8005ea6:	2108      	movs	r1, #8
 8005ea8:	438a      	bics	r2, r1
 8005eaa:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8005eac:	4b13      	ldr	r3, [pc, #76]	; (8005efc <HAL_FLASHEx_Erase+0xc4>)
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	4b12      	ldr	r3, [pc, #72]	; (8005efc <HAL_FLASHEx_Erase+0xc4>)
 8005eb2:	4913      	ldr	r1, [pc, #76]	; (8005f00 <HAL_FLASHEx_Erase+0xc8>)
 8005eb4:	400a      	ands	r2, r1
 8005eb6:	605a      	str	r2, [r3, #4]

      if (status != HAL_OK) 
 8005eb8:	197b      	adds	r3, r7, r5
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d003      	beq.n	8005ec8 <HAL_FLASHEx_Erase+0x90>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = address;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	601a      	str	r2, [r3, #0]
        break;
 8005ec6:	e00b      	b.n	8005ee0 <HAL_FLASHEx_Erase+0xa8>
        address += FLASH_PAGE_SIZE)
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	3380      	adds	r3, #128	; 0x80
 8005ecc:	60bb      	str	r3, [r7, #8]
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	01da      	lsls	r2, r3, #7
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	18d3      	adds	r3, r2, r3
    for(address = pEraseInit->PageAddress; 
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d3d3      	bcc.n	8005e88 <HAL_FLASHEx_Erase+0x50>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005ee0:	4b04      	ldr	r3, [pc, #16]	; (8005ef4 <HAL_FLASHEx_Erase+0xbc>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	741a      	strb	r2, [r3, #16]

  return status;
 8005ee6:	230f      	movs	r3, #15
 8005ee8:	18fb      	adds	r3, r7, r3
 8005eea:	781b      	ldrb	r3, [r3, #0]
}
 8005eec:	0018      	movs	r0, r3
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	b004      	add	sp, #16
 8005ef2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ef4:	200012b4 	.word	0x200012b4
 8005ef8:	0000c350 	.word	0x0000c350
 8005efc:	40022000 	.word	0x40022000
 8005f00:	fffffdff 	.word	0xfffffdff

08005f04 <FLASH_PageErase>:
  * @note   A Page is erased in the Program memory only if the address to load 
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005f0c:	4b0c      	ldr	r3, [pc, #48]	; (8005f40 <FLASH_PageErase+0x3c>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	615a      	str	r2, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8005f12:	4b0c      	ldr	r3, [pc, #48]	; (8005f44 <FLASH_PageErase+0x40>)
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	4b0b      	ldr	r3, [pc, #44]	; (8005f44 <FLASH_PageErase+0x40>)
 8005f18:	2180      	movs	r1, #128	; 0x80
 8005f1a:	0089      	lsls	r1, r1, #2
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	605a      	str	r2, [r3, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8005f20:	4b08      	ldr	r3, [pc, #32]	; (8005f44 <FLASH_PageErase+0x40>)
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	4b07      	ldr	r3, [pc, #28]	; (8005f44 <FLASH_PageErase+0x40>)
 8005f26:	2108      	movs	r1, #8
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	605a      	str	r2, [r3, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	227f      	movs	r2, #127	; 0x7f
 8005f30:	4393      	bics	r3, r2
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]
}
 8005f36:	46c0      	nop			; (mov r8, r8)
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	b002      	add	sp, #8
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	46c0      	nop			; (mov r8, r8)
 8005f40:	200012b4 	.word	0x200012b4
 8005f44:	40022000 	.word	0x40022000

08005f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8005f5e:	e155      	b.n	800620c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2101      	movs	r1, #1
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	4091      	lsls	r1, r2
 8005f6a:	000a      	movs	r2, r1
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d100      	bne.n	8005f78 <HAL_GPIO_Init+0x30>
 8005f76:	e146      	b.n	8006206 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	2203      	movs	r2, #3
 8005f7e:	4013      	ands	r3, r2
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d005      	beq.n	8005f90 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	2203      	movs	r2, #3
 8005f8a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d130      	bne.n	8005ff2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	2203      	movs	r2, #3
 8005f9c:	409a      	lsls	r2, r3
 8005f9e:	0013      	movs	r3, r2
 8005fa0:	43da      	mvns	r2, r3
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	005b      	lsls	r3, r3, #1
 8005fb0:	409a      	lsls	r2, r3
 8005fb2:	0013      	movs	r3, r2
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	409a      	lsls	r2, r3
 8005fcc:	0013      	movs	r3, r2
 8005fce:	43da      	mvns	r2, r3
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	091b      	lsrs	r3, r3, #4
 8005fdc:	2201      	movs	r2, #1
 8005fde:	401a      	ands	r2, r3
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	409a      	lsls	r2, r3
 8005fe4:	0013      	movs	r3, r2
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	2203      	movs	r2, #3
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d017      	beq.n	800602e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	2203      	movs	r2, #3
 800600a:	409a      	lsls	r2, r3
 800600c:	0013      	movs	r3, r2
 800600e:	43da      	mvns	r2, r3
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	4013      	ands	r3, r2
 8006014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	689a      	ldr	r2, [r3, #8]
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	409a      	lsls	r2, r3
 8006020:	0013      	movs	r3, r2
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	4313      	orrs	r3, r2
 8006026:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	2203      	movs	r2, #3
 8006034:	4013      	ands	r3, r2
 8006036:	2b02      	cmp	r3, #2
 8006038:	d123      	bne.n	8006082 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	08da      	lsrs	r2, r3, #3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	3208      	adds	r2, #8
 8006042:	0092      	lsls	r2, r2, #2
 8006044:	58d3      	ldr	r3, [r2, r3]
 8006046:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	2207      	movs	r2, #7
 800604c:	4013      	ands	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	220f      	movs	r2, #15
 8006052:	409a      	lsls	r2, r3
 8006054:	0013      	movs	r3, r2
 8006056:	43da      	mvns	r2, r3
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	4013      	ands	r3, r2
 800605c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	691a      	ldr	r2, [r3, #16]
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2107      	movs	r1, #7
 8006066:	400b      	ands	r3, r1
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	409a      	lsls	r2, r3
 800606c:	0013      	movs	r3, r2
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4313      	orrs	r3, r2
 8006072:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	08da      	lsrs	r2, r3, #3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3208      	adds	r2, #8
 800607c:	0092      	lsls	r2, r2, #2
 800607e:	6939      	ldr	r1, [r7, #16]
 8006080:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	005b      	lsls	r3, r3, #1
 800608c:	2203      	movs	r2, #3
 800608e:	409a      	lsls	r2, r3
 8006090:	0013      	movs	r3, r2
 8006092:	43da      	mvns	r2, r3
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	4013      	ands	r3, r2
 8006098:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	2203      	movs	r2, #3
 80060a0:	401a      	ands	r2, r3
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	005b      	lsls	r3, r3, #1
 80060a6:	409a      	lsls	r2, r3
 80060a8:	0013      	movs	r3, r2
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	23c0      	movs	r3, #192	; 0xc0
 80060bc:	029b      	lsls	r3, r3, #10
 80060be:	4013      	ands	r3, r2
 80060c0:	d100      	bne.n	80060c4 <HAL_GPIO_Init+0x17c>
 80060c2:	e0a0      	b.n	8006206 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060c4:	4b57      	ldr	r3, [pc, #348]	; (8006224 <HAL_GPIO_Init+0x2dc>)
 80060c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060c8:	4b56      	ldr	r3, [pc, #344]	; (8006224 <HAL_GPIO_Init+0x2dc>)
 80060ca:	2101      	movs	r1, #1
 80060cc:	430a      	orrs	r2, r1
 80060ce:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80060d0:	4a55      	ldr	r2, [pc, #340]	; (8006228 <HAL_GPIO_Init+0x2e0>)
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	089b      	lsrs	r3, r3, #2
 80060d6:	3302      	adds	r3, #2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	589b      	ldr	r3, [r3, r2]
 80060dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2203      	movs	r2, #3
 80060e2:	4013      	ands	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	220f      	movs	r2, #15
 80060e8:	409a      	lsls	r2, r3
 80060ea:	0013      	movs	r3, r2
 80060ec:	43da      	mvns	r2, r3
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	4013      	ands	r3, r2
 80060f2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	23a0      	movs	r3, #160	; 0xa0
 80060f8:	05db      	lsls	r3, r3, #23
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d01f      	beq.n	800613e <HAL_GPIO_Init+0x1f6>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a4a      	ldr	r2, [pc, #296]	; (800622c <HAL_GPIO_Init+0x2e4>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d019      	beq.n	800613a <HAL_GPIO_Init+0x1f2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a49      	ldr	r2, [pc, #292]	; (8006230 <HAL_GPIO_Init+0x2e8>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d013      	beq.n	8006136 <HAL_GPIO_Init+0x1ee>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a48      	ldr	r2, [pc, #288]	; (8006234 <HAL_GPIO_Init+0x2ec>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d00d      	beq.n	8006132 <HAL_GPIO_Init+0x1ea>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a47      	ldr	r2, [pc, #284]	; (8006238 <HAL_GPIO_Init+0x2f0>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d007      	beq.n	800612e <HAL_GPIO_Init+0x1e6>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a46      	ldr	r2, [pc, #280]	; (800623c <HAL_GPIO_Init+0x2f4>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d101      	bne.n	800612a <HAL_GPIO_Init+0x1e2>
 8006126:	2305      	movs	r3, #5
 8006128:	e00a      	b.n	8006140 <HAL_GPIO_Init+0x1f8>
 800612a:	2306      	movs	r3, #6
 800612c:	e008      	b.n	8006140 <HAL_GPIO_Init+0x1f8>
 800612e:	2304      	movs	r3, #4
 8006130:	e006      	b.n	8006140 <HAL_GPIO_Init+0x1f8>
 8006132:	2303      	movs	r3, #3
 8006134:	e004      	b.n	8006140 <HAL_GPIO_Init+0x1f8>
 8006136:	2302      	movs	r3, #2
 8006138:	e002      	b.n	8006140 <HAL_GPIO_Init+0x1f8>
 800613a:	2301      	movs	r3, #1
 800613c:	e000      	b.n	8006140 <HAL_GPIO_Init+0x1f8>
 800613e:	2300      	movs	r3, #0
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	2103      	movs	r1, #3
 8006144:	400a      	ands	r2, r1
 8006146:	0092      	lsls	r2, r2, #2
 8006148:	4093      	lsls	r3, r2
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	4313      	orrs	r3, r2
 800614e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006150:	4935      	ldr	r1, [pc, #212]	; (8006228 <HAL_GPIO_Init+0x2e0>)
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	089b      	lsrs	r3, r3, #2
 8006156:	3302      	adds	r3, #2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800615e:	4b38      	ldr	r3, [pc, #224]	; (8006240 <HAL_GPIO_Init+0x2f8>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	43da      	mvns	r2, r3
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	4013      	ands	r3, r2
 800616c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	2380      	movs	r3, #128	; 0x80
 8006174:	025b      	lsls	r3, r3, #9
 8006176:	4013      	ands	r3, r2
 8006178:	d003      	beq.n	8006182 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006182:	4b2f      	ldr	r3, [pc, #188]	; (8006240 <HAL_GPIO_Init+0x2f8>)
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8006188:	4b2d      	ldr	r3, [pc, #180]	; (8006240 <HAL_GPIO_Init+0x2f8>)
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	43da      	mvns	r2, r3
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	4013      	ands	r3, r2
 8006196:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	2380      	movs	r3, #128	; 0x80
 800619e:	029b      	lsls	r3, r3, #10
 80061a0:	4013      	ands	r3, r2
 80061a2:	d003      	beq.n	80061ac <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80061ac:	4b24      	ldr	r3, [pc, #144]	; (8006240 <HAL_GPIO_Init+0x2f8>)
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80061b2:	4b23      	ldr	r3, [pc, #140]	; (8006240 <HAL_GPIO_Init+0x2f8>)
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	43da      	mvns	r2, r3
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	4013      	ands	r3, r2
 80061c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	2380      	movs	r3, #128	; 0x80
 80061c8:	035b      	lsls	r3, r3, #13
 80061ca:	4013      	ands	r3, r2
 80061cc:	d003      	beq.n	80061d6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80061d6:	4b1a      	ldr	r3, [pc, #104]	; (8006240 <HAL_GPIO_Init+0x2f8>)
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80061dc:	4b18      	ldr	r3, [pc, #96]	; (8006240 <HAL_GPIO_Init+0x2f8>)
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	43da      	mvns	r2, r3
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	4013      	ands	r3, r2
 80061ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	2380      	movs	r3, #128	; 0x80
 80061f2:	039b      	lsls	r3, r3, #14
 80061f4:	4013      	ands	r3, r2
 80061f6:	d003      	beq.n	8006200 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006200:	4b0f      	ldr	r3, [pc, #60]	; (8006240 <HAL_GPIO_Init+0x2f8>)
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	3301      	adds	r3, #1
 800620a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	40da      	lsrs	r2, r3
 8006214:	1e13      	subs	r3, r2, #0
 8006216:	d000      	beq.n	800621a <HAL_GPIO_Init+0x2d2>
 8006218:	e6a2      	b.n	8005f60 <HAL_GPIO_Init+0x18>
  }
}
 800621a:	46c0      	nop			; (mov r8, r8)
 800621c:	46bd      	mov	sp, r7
 800621e:	b006      	add	sp, #24
 8006220:	bd80      	pop	{r7, pc}
 8006222:	46c0      	nop			; (mov r8, r8)
 8006224:	40021000 	.word	0x40021000
 8006228:	40010000 	.word	0x40010000
 800622c:	50000400 	.word	0x50000400
 8006230:	50000800 	.word	0x50000800
 8006234:	50000c00 	.word	0x50000c00
 8006238:	50001000 	.word	0x50001000
 800623c:	50001c00 	.word	0x50001c00
 8006240:	40010400 	.word	0x40010400

08006244 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	000a      	movs	r2, r1
 800624e:	1cbb      	adds	r3, r7, #2
 8006250:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	1cba      	adds	r2, r7, #2
 8006258:	8812      	ldrh	r2, [r2, #0]
 800625a:	4013      	ands	r3, r2
 800625c:	d004      	beq.n	8006268 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800625e:	230f      	movs	r3, #15
 8006260:	18fb      	adds	r3, r7, r3
 8006262:	2201      	movs	r2, #1
 8006264:	701a      	strb	r2, [r3, #0]
 8006266:	e003      	b.n	8006270 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006268:	230f      	movs	r3, #15
 800626a:	18fb      	adds	r3, r7, r3
 800626c:	2200      	movs	r2, #0
 800626e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006270:	230f      	movs	r3, #15
 8006272:	18fb      	adds	r3, r7, r3
 8006274:	781b      	ldrb	r3, [r3, #0]
}
 8006276:	0018      	movs	r0, r3
 8006278:	46bd      	mov	sp, r7
 800627a:	b004      	add	sp, #16
 800627c:	bd80      	pop	{r7, pc}

0800627e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b082      	sub	sp, #8
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	0008      	movs	r0, r1
 8006288:	0011      	movs	r1, r2
 800628a:	1cbb      	adds	r3, r7, #2
 800628c:	1c02      	adds	r2, r0, #0
 800628e:	801a      	strh	r2, [r3, #0]
 8006290:	1c7b      	adds	r3, r7, #1
 8006292:	1c0a      	adds	r2, r1, #0
 8006294:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006296:	1c7b      	adds	r3, r7, #1
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d004      	beq.n	80062a8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800629e:	1cbb      	adds	r3, r7, #2
 80062a0:	881a      	ldrh	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80062a6:	e003      	b.n	80062b0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80062a8:	1cbb      	adds	r3, r7, #2
 80062aa:	881a      	ldrh	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80062b0:	46c0      	nop			; (mov r8, r8)
 80062b2:	46bd      	mov	sp, r7
 80062b4:	b002      	add	sp, #8
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	0002      	movs	r2, r0
 80062c0:	1dbb      	adds	r3, r7, #6
 80062c2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80062c4:	4b09      	ldr	r3, [pc, #36]	; (80062ec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	1dba      	adds	r2, r7, #6
 80062ca:	8812      	ldrh	r2, [r2, #0]
 80062cc:	4013      	ands	r3, r2
 80062ce:	d008      	beq.n	80062e2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80062d0:	4b06      	ldr	r3, [pc, #24]	; (80062ec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80062d2:	1dba      	adds	r2, r7, #6
 80062d4:	8812      	ldrh	r2, [r2, #0]
 80062d6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80062d8:	1dbb      	adds	r3, r7, #6
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	0018      	movs	r0, r3
 80062de:	f7fe f94a 	bl	8004576 <HAL_GPIO_EXTI_Callback>
  }
}
 80062e2:	46c0      	nop			; (mov r8, r8)
 80062e4:	46bd      	mov	sp, r7
 80062e6:	b002      	add	sp, #8
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	46c0      	nop			; (mov r8, r8)
 80062ec:	40010400 	.word	0x40010400

080062f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062f0:	b5b0      	push	{r4, r5, r7, lr}
 80062f2:	b08a      	sub	sp, #40	; 0x28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d102      	bne.n	8006304 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	f000 fbc2 	bl	8006a88 <HAL_RCC_OscConfig+0x798>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006304:	4bca      	ldr	r3, [pc, #808]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	220c      	movs	r2, #12
 800630a:	4013      	ands	r3, r2
 800630c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800630e:	4bc8      	ldr	r3, [pc, #800]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	2380      	movs	r3, #128	; 0x80
 8006314:	025b      	lsls	r3, r3, #9
 8006316:	4013      	ands	r3, r2
 8006318:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2201      	movs	r2, #1
 8006320:	4013      	ands	r3, r2
 8006322:	d100      	bne.n	8006326 <HAL_RCC_OscConfig+0x36>
 8006324:	e07e      	b.n	8006424 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	2b08      	cmp	r3, #8
 800632a:	d007      	beq.n	800633c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	2b0c      	cmp	r3, #12
 8006330:	d112      	bne.n	8006358 <HAL_RCC_OscConfig+0x68>
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	2380      	movs	r3, #128	; 0x80
 8006336:	025b      	lsls	r3, r3, #9
 8006338:	429a      	cmp	r2, r3
 800633a:	d10d      	bne.n	8006358 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800633c:	4bbc      	ldr	r3, [pc, #752]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	2380      	movs	r3, #128	; 0x80
 8006342:	029b      	lsls	r3, r3, #10
 8006344:	4013      	ands	r3, r2
 8006346:	d100      	bne.n	800634a <HAL_RCC_OscConfig+0x5a>
 8006348:	e06b      	b.n	8006422 <HAL_RCC_OscConfig+0x132>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d167      	bne.n	8006422 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	f000 fb98 	bl	8006a88 <HAL_RCC_OscConfig+0x798>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	2380      	movs	r3, #128	; 0x80
 800635e:	025b      	lsls	r3, r3, #9
 8006360:	429a      	cmp	r2, r3
 8006362:	d107      	bne.n	8006374 <HAL_RCC_OscConfig+0x84>
 8006364:	4bb2      	ldr	r3, [pc, #712]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	4bb1      	ldr	r3, [pc, #708]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 800636a:	2180      	movs	r1, #128	; 0x80
 800636c:	0249      	lsls	r1, r1, #9
 800636e:	430a      	orrs	r2, r1
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	e027      	b.n	80063c4 <HAL_RCC_OscConfig+0xd4>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	23a0      	movs	r3, #160	; 0xa0
 800637a:	02db      	lsls	r3, r3, #11
 800637c:	429a      	cmp	r2, r3
 800637e:	d10e      	bne.n	800639e <HAL_RCC_OscConfig+0xae>
 8006380:	4bab      	ldr	r3, [pc, #684]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	4baa      	ldr	r3, [pc, #680]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 8006386:	2180      	movs	r1, #128	; 0x80
 8006388:	02c9      	lsls	r1, r1, #11
 800638a:	430a      	orrs	r2, r1
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	4ba8      	ldr	r3, [pc, #672]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	4ba7      	ldr	r3, [pc, #668]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 8006394:	2180      	movs	r1, #128	; 0x80
 8006396:	0249      	lsls	r1, r1, #9
 8006398:	430a      	orrs	r2, r1
 800639a:	601a      	str	r2, [r3, #0]
 800639c:	e012      	b.n	80063c4 <HAL_RCC_OscConfig+0xd4>
 800639e:	4ba4      	ldr	r3, [pc, #656]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	4ba3      	ldr	r3, [pc, #652]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 80063a4:	49a3      	ldr	r1, [pc, #652]	; (8006634 <HAL_RCC_OscConfig+0x344>)
 80063a6:	400a      	ands	r2, r1
 80063a8:	601a      	str	r2, [r3, #0]
 80063aa:	4ba1      	ldr	r3, [pc, #644]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	2380      	movs	r3, #128	; 0x80
 80063b0:	025b      	lsls	r3, r3, #9
 80063b2:	4013      	ands	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4b9d      	ldr	r3, [pc, #628]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	4b9c      	ldr	r3, [pc, #624]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 80063be:	499e      	ldr	r1, [pc, #632]	; (8006638 <HAL_RCC_OscConfig+0x348>)
 80063c0:	400a      	ands	r2, r1
 80063c2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d015      	beq.n	80063f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063cc:	f7fe fff0 	bl	80053b0 <HAL_GetTick>
 80063d0:	0003      	movs	r3, r0
 80063d2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063d4:	e009      	b.n	80063ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063d6:	f7fe ffeb 	bl	80053b0 <HAL_GetTick>
 80063da:	0002      	movs	r2, r0
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	2b64      	cmp	r3, #100	; 0x64
 80063e2:	d902      	bls.n	80063ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	f000 fb4f 	bl	8006a88 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063ea:	4b91      	ldr	r3, [pc, #580]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	2380      	movs	r3, #128	; 0x80
 80063f0:	029b      	lsls	r3, r3, #10
 80063f2:	4013      	ands	r3, r2
 80063f4:	d0ef      	beq.n	80063d6 <HAL_RCC_OscConfig+0xe6>
 80063f6:	e015      	b.n	8006424 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f8:	f7fe ffda 	bl	80053b0 <HAL_GetTick>
 80063fc:	0003      	movs	r3, r0
 80063fe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006400:	e008      	b.n	8006414 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006402:	f7fe ffd5 	bl	80053b0 <HAL_GetTick>
 8006406:	0002      	movs	r2, r0
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	2b64      	cmp	r3, #100	; 0x64
 800640e:	d901      	bls.n	8006414 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e339      	b.n	8006a88 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006414:	4b86      	ldr	r3, [pc, #536]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	2380      	movs	r3, #128	; 0x80
 800641a:	029b      	lsls	r3, r3, #10
 800641c:	4013      	ands	r3, r2
 800641e:	d1f0      	bne.n	8006402 <HAL_RCC_OscConfig+0x112>
 8006420:	e000      	b.n	8006424 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006422:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2202      	movs	r2, #2
 800642a:	4013      	ands	r3, r2
 800642c:	d100      	bne.n	8006430 <HAL_RCC_OscConfig+0x140>
 800642e:	e09a      	b.n	8006566 <HAL_RCC_OscConfig+0x276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	2220      	movs	r2, #32
 800643a:	4013      	ands	r3, r2
 800643c:	d009      	beq.n	8006452 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800643e:	4b7c      	ldr	r3, [pc, #496]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	4b7b      	ldr	r3, [pc, #492]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 8006444:	2120      	movs	r1, #32
 8006446:	430a      	orrs	r2, r1
 8006448:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	2220      	movs	r2, #32
 800644e:	4393      	bics	r3, r2
 8006450:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	2b04      	cmp	r3, #4
 8006456:	d005      	beq.n	8006464 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	2b0c      	cmp	r3, #12
 800645c:	d13f      	bne.n	80064de <HAL_RCC_OscConfig+0x1ee>
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d13c      	bne.n	80064de <HAL_RCC_OscConfig+0x1ee>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8006464:	4b72      	ldr	r3, [pc, #456]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2204      	movs	r2, #4
 800646a:	4013      	ands	r3, r2
 800646c:	d004      	beq.n	8006478 <HAL_RCC_OscConfig+0x188>
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e307      	b.n	8006a88 <HAL_RCC_OscConfig+0x798>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006478:	4b6d      	ldr	r3, [pc, #436]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	4a6f      	ldr	r2, [pc, #444]	; (800663c <HAL_RCC_OscConfig+0x34c>)
 800647e:	4013      	ands	r3, r2
 8006480:	0019      	movs	r1, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	021a      	lsls	r2, r3, #8
 8006488:	4b69      	ldr	r3, [pc, #420]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 800648a:	430a      	orrs	r2, r1
 800648c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800648e:	4b68      	ldr	r3, [pc, #416]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2209      	movs	r2, #9
 8006494:	4393      	bics	r3, r2
 8006496:	0019      	movs	r1, r3
 8006498:	4b65      	ldr	r3, [pc, #404]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 800649a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800649c:	430a      	orrs	r2, r1
 800649e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064a0:	f000 fc44 	bl	8006d2c <HAL_RCC_GetSysClockFreq>
 80064a4:	0001      	movs	r1, r0
 80064a6:	4b62      	ldr	r3, [pc, #392]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	091b      	lsrs	r3, r3, #4
 80064ac:	220f      	movs	r2, #15
 80064ae:	4013      	ands	r3, r2
 80064b0:	4a63      	ldr	r2, [pc, #396]	; (8006640 <HAL_RCC_OscConfig+0x350>)
 80064b2:	5cd3      	ldrb	r3, [r2, r3]
 80064b4:	000a      	movs	r2, r1
 80064b6:	40da      	lsrs	r2, r3
 80064b8:	4b62      	ldr	r3, [pc, #392]	; (8006644 <HAL_RCC_OscConfig+0x354>)
 80064ba:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80064bc:	4b62      	ldr	r3, [pc, #392]	; (8006648 <HAL_RCC_OscConfig+0x358>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2513      	movs	r5, #19
 80064c2:	197c      	adds	r4, r7, r5
 80064c4:	0018      	movs	r0, r3
 80064c6:	f7fe ff2d 	bl	8005324 <HAL_InitTick>
 80064ca:	0003      	movs	r3, r0
 80064cc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80064ce:	197b      	adds	r3, r7, r5
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d047      	beq.n	8006566 <HAL_RCC_OscConfig+0x276>
      {
        return status;
 80064d6:	2313      	movs	r3, #19
 80064d8:	18fb      	adds	r3, r7, r3
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	e2d4      	b.n	8006a88 <HAL_RCC_OscConfig+0x798>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d027      	beq.n	8006534 <HAL_RCC_OscConfig+0x244>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80064e4:	4b52      	ldr	r3, [pc, #328]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2209      	movs	r2, #9
 80064ea:	4393      	bics	r3, r2
 80064ec:	0019      	movs	r1, r3
 80064ee:	4b50      	ldr	r3, [pc, #320]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 80064f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f2:	430a      	orrs	r2, r1
 80064f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064f6:	f7fe ff5b 	bl	80053b0 <HAL_GetTick>
 80064fa:	0003      	movs	r3, r0
 80064fc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064fe:	e008      	b.n	8006512 <HAL_RCC_OscConfig+0x222>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006500:	f7fe ff56 	bl	80053b0 <HAL_GetTick>
 8006504:	0002      	movs	r2, r0
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	2b02      	cmp	r3, #2
 800650c:	d901      	bls.n	8006512 <HAL_RCC_OscConfig+0x222>
          {
            return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e2ba      	b.n	8006a88 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006512:	4b47      	ldr	r3, [pc, #284]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2204      	movs	r2, #4
 8006518:	4013      	ands	r3, r2
 800651a:	d0f1      	beq.n	8006500 <HAL_RCC_OscConfig+0x210>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800651c:	4b44      	ldr	r3, [pc, #272]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	4a46      	ldr	r2, [pc, #280]	; (800663c <HAL_RCC_OscConfig+0x34c>)
 8006522:	4013      	ands	r3, r2
 8006524:	0019      	movs	r1, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	021a      	lsls	r2, r3, #8
 800652c:	4b40      	ldr	r3, [pc, #256]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 800652e:	430a      	orrs	r2, r1
 8006530:	605a      	str	r2, [r3, #4]
 8006532:	e018      	b.n	8006566 <HAL_RCC_OscConfig+0x276>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006534:	4b3e      	ldr	r3, [pc, #248]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	4b3d      	ldr	r3, [pc, #244]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 800653a:	2101      	movs	r1, #1
 800653c:	438a      	bics	r2, r1
 800653e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006540:	f7fe ff36 	bl	80053b0 <HAL_GetTick>
 8006544:	0003      	movs	r3, r0
 8006546:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006548:	e008      	b.n	800655c <HAL_RCC_OscConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800654a:	f7fe ff31 	bl	80053b0 <HAL_GetTick>
 800654e:	0002      	movs	r2, r0
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	2b02      	cmp	r3, #2
 8006556:	d901      	bls.n	800655c <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e295      	b.n	8006a88 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800655c:	4b34      	ldr	r3, [pc, #208]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2204      	movs	r2, #4
 8006562:	4013      	ands	r3, r2
 8006564:	d1f1      	bne.n	800654a <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2210      	movs	r2, #16
 800656c:	4013      	ands	r3, r2
 800656e:	d100      	bne.n	8006572 <HAL_RCC_OscConfig+0x282>
 8006570:	e0a3      	b.n	80066ba <HAL_RCC_OscConfig+0x3ca>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d141      	bne.n	80065fc <HAL_RCC_OscConfig+0x30c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006578:	4b2d      	ldr	r3, [pc, #180]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	2380      	movs	r3, #128	; 0x80
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4013      	ands	r3, r2
 8006582:	d005      	beq.n	8006590 <HAL_RCC_OscConfig+0x2a0>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e27b      	b.n	8006a88 <HAL_RCC_OscConfig+0x798>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006590:	4b27      	ldr	r3, [pc, #156]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	4a2d      	ldr	r2, [pc, #180]	; (800664c <HAL_RCC_OscConfig+0x35c>)
 8006596:	4013      	ands	r3, r2
 8006598:	0019      	movs	r1, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800659e:	4b24      	ldr	r3, [pc, #144]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 80065a0:	430a      	orrs	r2, r1
 80065a2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065a4:	4b22      	ldr	r3, [pc, #136]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	021b      	lsls	r3, r3, #8
 80065aa:	0a19      	lsrs	r1, r3, #8
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	061a      	lsls	r2, r3, #24
 80065b2:	4b1f      	ldr	r3, [pc, #124]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 80065b4:	430a      	orrs	r2, r1
 80065b6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065bc:	0b5b      	lsrs	r3, r3, #13
 80065be:	3301      	adds	r3, #1
 80065c0:	2280      	movs	r2, #128	; 0x80
 80065c2:	0212      	lsls	r2, r2, #8
 80065c4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80065c6:	4b1a      	ldr	r3, [pc, #104]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	091b      	lsrs	r3, r3, #4
 80065cc:	210f      	movs	r1, #15
 80065ce:	400b      	ands	r3, r1
 80065d0:	491b      	ldr	r1, [pc, #108]	; (8006640 <HAL_RCC_OscConfig+0x350>)
 80065d2:	5ccb      	ldrb	r3, [r1, r3]
 80065d4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80065d6:	4b1b      	ldr	r3, [pc, #108]	; (8006644 <HAL_RCC_OscConfig+0x354>)
 80065d8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80065da:	4b1b      	ldr	r3, [pc, #108]	; (8006648 <HAL_RCC_OscConfig+0x358>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2513      	movs	r5, #19
 80065e0:	197c      	adds	r4, r7, r5
 80065e2:	0018      	movs	r0, r3
 80065e4:	f7fe fe9e 	bl	8005324 <HAL_InitTick>
 80065e8:	0003      	movs	r3, r0
 80065ea:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80065ec:	197b      	adds	r3, r7, r5
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d062      	beq.n	80066ba <HAL_RCC_OscConfig+0x3ca>
        {
          return status;
 80065f4:	2313      	movs	r3, #19
 80065f6:	18fb      	adds	r3, r7, r3
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	e245      	b.n	8006a88 <HAL_RCC_OscConfig+0x798>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	69db      	ldr	r3, [r3, #28]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d040      	beq.n	8006686 <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006604:	4b0a      	ldr	r3, [pc, #40]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	4b09      	ldr	r3, [pc, #36]	; (8006630 <HAL_RCC_OscConfig+0x340>)
 800660a:	2180      	movs	r1, #128	; 0x80
 800660c:	0049      	lsls	r1, r1, #1
 800660e:	430a      	orrs	r2, r1
 8006610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006612:	f7fe fecd 	bl	80053b0 <HAL_GetTick>
 8006616:	0003      	movs	r3, r0
 8006618:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800661a:	e019      	b.n	8006650 <HAL_RCC_OscConfig+0x360>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800661c:	f7fe fec8 	bl	80053b0 <HAL_GetTick>
 8006620:	0002      	movs	r2, r0
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	2b02      	cmp	r3, #2
 8006628:	d912      	bls.n	8006650 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e22c      	b.n	8006a88 <HAL_RCC_OscConfig+0x798>
 800662e:	46c0      	nop			; (mov r8, r8)
 8006630:	40021000 	.word	0x40021000
 8006634:	fffeffff 	.word	0xfffeffff
 8006638:	fffbffff 	.word	0xfffbffff
 800663c:	ffffe0ff 	.word	0xffffe0ff
 8006640:	0800e9e8 	.word	0x0800e9e8
 8006644:	20000058 	.word	0x20000058
 8006648:	2000005c 	.word	0x2000005c
 800664c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006650:	4bc6      	ldr	r3, [pc, #792]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	2380      	movs	r3, #128	; 0x80
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4013      	ands	r3, r2
 800665a:	d0df      	beq.n	800661c <HAL_RCC_OscConfig+0x32c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800665c:	4bc3      	ldr	r3, [pc, #780]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	4ac3      	ldr	r2, [pc, #780]	; (8006970 <HAL_RCC_OscConfig+0x680>)
 8006662:	4013      	ands	r3, r2
 8006664:	0019      	movs	r1, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800666a:	4bc0      	ldr	r3, [pc, #768]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 800666c:	430a      	orrs	r2, r1
 800666e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006670:	4bbe      	ldr	r3, [pc, #760]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	021b      	lsls	r3, r3, #8
 8006676:	0a19      	lsrs	r1, r3, #8
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	061a      	lsls	r2, r3, #24
 800667e:	4bbb      	ldr	r3, [pc, #748]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 8006680:	430a      	orrs	r2, r1
 8006682:	605a      	str	r2, [r3, #4]
 8006684:	e019      	b.n	80066ba <HAL_RCC_OscConfig+0x3ca>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006686:	4bb9      	ldr	r3, [pc, #740]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	4bb8      	ldr	r3, [pc, #736]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 800668c:	49b9      	ldr	r1, [pc, #740]	; (8006974 <HAL_RCC_OscConfig+0x684>)
 800668e:	400a      	ands	r2, r1
 8006690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006692:	f7fe fe8d 	bl	80053b0 <HAL_GetTick>
 8006696:	0003      	movs	r3, r0
 8006698:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800669a:	e008      	b.n	80066ae <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800669c:	f7fe fe88 	bl	80053b0 <HAL_GetTick>
 80066a0:	0002      	movs	r2, r0
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_OscConfig+0x3be>
          {
            return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e1ec      	b.n	8006a88 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80066ae:	4baf      	ldr	r3, [pc, #700]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	2380      	movs	r3, #128	; 0x80
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4013      	ands	r3, r2
 80066b8:	d1f0      	bne.n	800669c <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2208      	movs	r2, #8
 80066c0:	4013      	ands	r3, r2
 80066c2:	d036      	beq.n	8006732 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d019      	beq.n	8006700 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066cc:	4ba7      	ldr	r3, [pc, #668]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 80066ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066d0:	4ba6      	ldr	r3, [pc, #664]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 80066d2:	2101      	movs	r1, #1
 80066d4:	430a      	orrs	r2, r1
 80066d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066d8:	f7fe fe6a 	bl	80053b0 <HAL_GetTick>
 80066dc:	0003      	movs	r3, r0
 80066de:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80066e0:	e008      	b.n	80066f4 <HAL_RCC_OscConfig+0x404>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066e2:	f7fe fe65 	bl	80053b0 <HAL_GetTick>
 80066e6:	0002      	movs	r2, r0
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d901      	bls.n	80066f4 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e1c9      	b.n	8006a88 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80066f4:	4b9d      	ldr	r3, [pc, #628]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 80066f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f8:	2202      	movs	r2, #2
 80066fa:	4013      	ands	r3, r2
 80066fc:	d0f1      	beq.n	80066e2 <HAL_RCC_OscConfig+0x3f2>
 80066fe:	e018      	b.n	8006732 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006700:	4b9a      	ldr	r3, [pc, #616]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 8006702:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006704:	4b99      	ldr	r3, [pc, #612]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 8006706:	2101      	movs	r1, #1
 8006708:	438a      	bics	r2, r1
 800670a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800670c:	f7fe fe50 	bl	80053b0 <HAL_GetTick>
 8006710:	0003      	movs	r3, r0
 8006712:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006714:	e008      	b.n	8006728 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006716:	f7fe fe4b 	bl	80053b0 <HAL_GetTick>
 800671a:	0002      	movs	r2, r0
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b02      	cmp	r3, #2
 8006722:	d901      	bls.n	8006728 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e1af      	b.n	8006a88 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006728:	4b90      	ldr	r3, [pc, #576]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 800672a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800672c:	2202      	movs	r2, #2
 800672e:	4013      	ands	r3, r2
 8006730:	d1f1      	bne.n	8006716 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2204      	movs	r2, #4
 8006738:	4013      	ands	r3, r2
 800673a:	d100      	bne.n	800673e <HAL_RCC_OscConfig+0x44e>
 800673c:	e0af      	b.n	800689e <HAL_RCC_OscConfig+0x5ae>
  {
    FlagStatus       pwrclkchanged = RESET;
 800673e:	2323      	movs	r3, #35	; 0x23
 8006740:	18fb      	adds	r3, r7, r3
 8006742:	2200      	movs	r2, #0
 8006744:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006746:	4b89      	ldr	r3, [pc, #548]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 8006748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800674a:	2380      	movs	r3, #128	; 0x80
 800674c:	055b      	lsls	r3, r3, #21
 800674e:	4013      	ands	r3, r2
 8006750:	d10a      	bne.n	8006768 <HAL_RCC_OscConfig+0x478>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006752:	4b86      	ldr	r3, [pc, #536]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 8006754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006756:	4b85      	ldr	r3, [pc, #532]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 8006758:	2180      	movs	r1, #128	; 0x80
 800675a:	0549      	lsls	r1, r1, #21
 800675c:	430a      	orrs	r2, r1
 800675e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006760:	2323      	movs	r3, #35	; 0x23
 8006762:	18fb      	adds	r3, r7, r3
 8006764:	2201      	movs	r2, #1
 8006766:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006768:	4b83      	ldr	r3, [pc, #524]	; (8006978 <HAL_RCC_OscConfig+0x688>)
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	2380      	movs	r3, #128	; 0x80
 800676e:	005b      	lsls	r3, r3, #1
 8006770:	4013      	ands	r3, r2
 8006772:	d11a      	bne.n	80067aa <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006774:	4b80      	ldr	r3, [pc, #512]	; (8006978 <HAL_RCC_OscConfig+0x688>)
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	4b7f      	ldr	r3, [pc, #508]	; (8006978 <HAL_RCC_OscConfig+0x688>)
 800677a:	2180      	movs	r1, #128	; 0x80
 800677c:	0049      	lsls	r1, r1, #1
 800677e:	430a      	orrs	r2, r1
 8006780:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006782:	f7fe fe15 	bl	80053b0 <HAL_GetTick>
 8006786:	0003      	movs	r3, r0
 8006788:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800678a:	e008      	b.n	800679e <HAL_RCC_OscConfig+0x4ae>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800678c:	f7fe fe10 	bl	80053b0 <HAL_GetTick>
 8006790:	0002      	movs	r2, r0
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	2b64      	cmp	r3, #100	; 0x64
 8006798:	d901      	bls.n	800679e <HAL_RCC_OscConfig+0x4ae>
        {
          return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e174      	b.n	8006a88 <HAL_RCC_OscConfig+0x798>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800679e:	4b76      	ldr	r3, [pc, #472]	; (8006978 <HAL_RCC_OscConfig+0x688>)
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	2380      	movs	r3, #128	; 0x80
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	4013      	ands	r3, r2
 80067a8:	d0f0      	beq.n	800678c <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	689a      	ldr	r2, [r3, #8]
 80067ae:	2380      	movs	r3, #128	; 0x80
 80067b0:	005b      	lsls	r3, r3, #1
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d107      	bne.n	80067c6 <HAL_RCC_OscConfig+0x4d6>
 80067b6:	4b6d      	ldr	r3, [pc, #436]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 80067b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067ba:	4b6c      	ldr	r3, [pc, #432]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 80067bc:	2180      	movs	r1, #128	; 0x80
 80067be:	0049      	lsls	r1, r1, #1
 80067c0:	430a      	orrs	r2, r1
 80067c2:	651a      	str	r2, [r3, #80]	; 0x50
 80067c4:	e031      	b.n	800682a <HAL_RCC_OscConfig+0x53a>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10c      	bne.n	80067e8 <HAL_RCC_OscConfig+0x4f8>
 80067ce:	4b67      	ldr	r3, [pc, #412]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 80067d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067d2:	4b66      	ldr	r3, [pc, #408]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 80067d4:	4967      	ldr	r1, [pc, #412]	; (8006974 <HAL_RCC_OscConfig+0x684>)
 80067d6:	400a      	ands	r2, r1
 80067d8:	651a      	str	r2, [r3, #80]	; 0x50
 80067da:	4b64      	ldr	r3, [pc, #400]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 80067dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067de:	4b63      	ldr	r3, [pc, #396]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 80067e0:	4966      	ldr	r1, [pc, #408]	; (800697c <HAL_RCC_OscConfig+0x68c>)
 80067e2:	400a      	ands	r2, r1
 80067e4:	651a      	str	r2, [r3, #80]	; 0x50
 80067e6:	e020      	b.n	800682a <HAL_RCC_OscConfig+0x53a>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	689a      	ldr	r2, [r3, #8]
 80067ec:	23a0      	movs	r3, #160	; 0xa0
 80067ee:	00db      	lsls	r3, r3, #3
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d10e      	bne.n	8006812 <HAL_RCC_OscConfig+0x522>
 80067f4:	4b5d      	ldr	r3, [pc, #372]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 80067f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067f8:	4b5c      	ldr	r3, [pc, #368]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 80067fa:	2180      	movs	r1, #128	; 0x80
 80067fc:	00c9      	lsls	r1, r1, #3
 80067fe:	430a      	orrs	r2, r1
 8006800:	651a      	str	r2, [r3, #80]	; 0x50
 8006802:	4b5a      	ldr	r3, [pc, #360]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 8006804:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006806:	4b59      	ldr	r3, [pc, #356]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 8006808:	2180      	movs	r1, #128	; 0x80
 800680a:	0049      	lsls	r1, r1, #1
 800680c:	430a      	orrs	r2, r1
 800680e:	651a      	str	r2, [r3, #80]	; 0x50
 8006810:	e00b      	b.n	800682a <HAL_RCC_OscConfig+0x53a>
 8006812:	4b56      	ldr	r3, [pc, #344]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 8006814:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006816:	4b55      	ldr	r3, [pc, #340]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 8006818:	4956      	ldr	r1, [pc, #344]	; (8006974 <HAL_RCC_OscConfig+0x684>)
 800681a:	400a      	ands	r2, r1
 800681c:	651a      	str	r2, [r3, #80]	; 0x50
 800681e:	4b53      	ldr	r3, [pc, #332]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 8006820:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006822:	4b52      	ldr	r3, [pc, #328]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 8006824:	4955      	ldr	r1, [pc, #340]	; (800697c <HAL_RCC_OscConfig+0x68c>)
 8006826:	400a      	ands	r2, r1
 8006828:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d015      	beq.n	800685e <HAL_RCC_OscConfig+0x56e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006832:	f7fe fdbd 	bl	80053b0 <HAL_GetTick>
 8006836:	0003      	movs	r3, r0
 8006838:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800683a:	e009      	b.n	8006850 <HAL_RCC_OscConfig+0x560>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800683c:	f7fe fdb8 	bl	80053b0 <HAL_GetTick>
 8006840:	0002      	movs	r2, r0
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	4a4e      	ldr	r2, [pc, #312]	; (8006980 <HAL_RCC_OscConfig+0x690>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d901      	bls.n	8006850 <HAL_RCC_OscConfig+0x560>
        {
          return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e11b      	b.n	8006a88 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006850:	4b46      	ldr	r3, [pc, #280]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 8006852:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006854:	2380      	movs	r3, #128	; 0x80
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4013      	ands	r3, r2
 800685a:	d0ef      	beq.n	800683c <HAL_RCC_OscConfig+0x54c>
 800685c:	e014      	b.n	8006888 <HAL_RCC_OscConfig+0x598>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800685e:	f7fe fda7 	bl	80053b0 <HAL_GetTick>
 8006862:	0003      	movs	r3, r0
 8006864:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006866:	e009      	b.n	800687c <HAL_RCC_OscConfig+0x58c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006868:	f7fe fda2 	bl	80053b0 <HAL_GetTick>
 800686c:	0002      	movs	r2, r0
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	4a43      	ldr	r2, [pc, #268]	; (8006980 <HAL_RCC_OscConfig+0x690>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d901      	bls.n	800687c <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e105      	b.n	8006a88 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800687c:	4b3b      	ldr	r3, [pc, #236]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 800687e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006880:	2380      	movs	r3, #128	; 0x80
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4013      	ands	r3, r2
 8006886:	d1ef      	bne.n	8006868 <HAL_RCC_OscConfig+0x578>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006888:	2323      	movs	r3, #35	; 0x23
 800688a:	18fb      	adds	r3, r7, r3
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d105      	bne.n	800689e <HAL_RCC_OscConfig+0x5ae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006892:	4b36      	ldr	r3, [pc, #216]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 8006894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006896:	4b35      	ldr	r3, [pc, #212]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 8006898:	493a      	ldr	r1, [pc, #232]	; (8006984 <HAL_RCC_OscConfig+0x694>)
 800689a:	400a      	ands	r2, r1
 800689c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2220      	movs	r2, #32
 80068a4:	4013      	ands	r3, r2
 80068a6:	d049      	beq.n	800693c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d026      	beq.n	80068fe <HAL_RCC_OscConfig+0x60e>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80068b0:	4b2e      	ldr	r3, [pc, #184]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 80068b2:	689a      	ldr	r2, [r3, #8]
 80068b4:	4b2d      	ldr	r3, [pc, #180]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 80068b6:	2101      	movs	r1, #1
 80068b8:	430a      	orrs	r2, r1
 80068ba:	609a      	str	r2, [r3, #8]
 80068bc:	4b2b      	ldr	r3, [pc, #172]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 80068be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068c0:	4b2a      	ldr	r3, [pc, #168]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 80068c2:	2101      	movs	r1, #1
 80068c4:	430a      	orrs	r2, r1
 80068c6:	635a      	str	r2, [r3, #52]	; 0x34
 80068c8:	4b2f      	ldr	r3, [pc, #188]	; (8006988 <HAL_RCC_OscConfig+0x698>)
 80068ca:	6a1a      	ldr	r2, [r3, #32]
 80068cc:	4b2e      	ldr	r3, [pc, #184]	; (8006988 <HAL_RCC_OscConfig+0x698>)
 80068ce:	2180      	movs	r1, #128	; 0x80
 80068d0:	0189      	lsls	r1, r1, #6
 80068d2:	430a      	orrs	r2, r1
 80068d4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d6:	f7fe fd6b 	bl	80053b0 <HAL_GetTick>
 80068da:	0003      	movs	r3, r0
 80068dc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068de:	e008      	b.n	80068f2 <HAL_RCC_OscConfig+0x602>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068e0:	f7fe fd66 	bl	80053b0 <HAL_GetTick>
 80068e4:	0002      	movs	r2, r0
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0x602>
          {
            return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e0ca      	b.n	8006a88 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068f2:	4b1e      	ldr	r3, [pc, #120]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	2202      	movs	r2, #2
 80068f8:	4013      	ands	r3, r2
 80068fa:	d0f1      	beq.n	80068e0 <HAL_RCC_OscConfig+0x5f0>
 80068fc:	e01e      	b.n	800693c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80068fe:	4b1b      	ldr	r3, [pc, #108]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 8006900:	689a      	ldr	r2, [r3, #8]
 8006902:	4b1a      	ldr	r3, [pc, #104]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 8006904:	2101      	movs	r1, #1
 8006906:	438a      	bics	r2, r1
 8006908:	609a      	str	r2, [r3, #8]
 800690a:	4b1f      	ldr	r3, [pc, #124]	; (8006988 <HAL_RCC_OscConfig+0x698>)
 800690c:	6a1a      	ldr	r2, [r3, #32]
 800690e:	4b1e      	ldr	r3, [pc, #120]	; (8006988 <HAL_RCC_OscConfig+0x698>)
 8006910:	491e      	ldr	r1, [pc, #120]	; (800698c <HAL_RCC_OscConfig+0x69c>)
 8006912:	400a      	ands	r2, r1
 8006914:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006916:	f7fe fd4b 	bl	80053b0 <HAL_GetTick>
 800691a:	0003      	movs	r3, r0
 800691c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800691e:	e008      	b.n	8006932 <HAL_RCC_OscConfig+0x642>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006920:	f7fe fd46 	bl	80053b0 <HAL_GetTick>
 8006924:	0002      	movs	r2, r0
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	2b02      	cmp	r3, #2
 800692c:	d901      	bls.n	8006932 <HAL_RCC_OscConfig+0x642>
          {
            return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e0aa      	b.n	8006a88 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006932:	4b0e      	ldr	r3, [pc, #56]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	2202      	movs	r2, #2
 8006938:	4013      	ands	r3, r2
 800693a:	d1f1      	bne.n	8006920 <HAL_RCC_OscConfig+0x630>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006940:	2b00      	cmp	r3, #0
 8006942:	d100      	bne.n	8006946 <HAL_RCC_OscConfig+0x656>
 8006944:	e09f      	b.n	8006a86 <HAL_RCC_OscConfig+0x796>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	2b0c      	cmp	r3, #12
 800694a:	d100      	bne.n	800694e <HAL_RCC_OscConfig+0x65e>
 800694c:	e078      	b.n	8006a40 <HAL_RCC_OscConfig+0x750>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006952:	2b02      	cmp	r3, #2
 8006954:	d159      	bne.n	8006a0a <HAL_RCC_OscConfig+0x71a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006956:	4b05      	ldr	r3, [pc, #20]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	4b04      	ldr	r3, [pc, #16]	; (800696c <HAL_RCC_OscConfig+0x67c>)
 800695c:	490c      	ldr	r1, [pc, #48]	; (8006990 <HAL_RCC_OscConfig+0x6a0>)
 800695e:	400a      	ands	r2, r1
 8006960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006962:	f7fe fd25 	bl	80053b0 <HAL_GetTick>
 8006966:	0003      	movs	r3, r0
 8006968:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800696a:	e01c      	b.n	80069a6 <HAL_RCC_OscConfig+0x6b6>
 800696c:	40021000 	.word	0x40021000
 8006970:	ffff1fff 	.word	0xffff1fff
 8006974:	fffffeff 	.word	0xfffffeff
 8006978:	40007000 	.word	0x40007000
 800697c:	fffffbff 	.word	0xfffffbff
 8006980:	00001388 	.word	0x00001388
 8006984:	efffffff 	.word	0xefffffff
 8006988:	40010000 	.word	0x40010000
 800698c:	ffffdfff 	.word	0xffffdfff
 8006990:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006994:	f7fe fd0c 	bl	80053b0 <HAL_GetTick>
 8006998:	0002      	movs	r2, r0
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d901      	bls.n	80069a6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e070      	b.n	8006a88 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80069a6:	4b3a      	ldr	r3, [pc, #232]	; (8006a90 <HAL_RCC_OscConfig+0x7a0>)
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	2380      	movs	r3, #128	; 0x80
 80069ac:	049b      	lsls	r3, r3, #18
 80069ae:	4013      	ands	r3, r2
 80069b0:	d1f0      	bne.n	8006994 <HAL_RCC_OscConfig+0x6a4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069b2:	4b37      	ldr	r3, [pc, #220]	; (8006a90 <HAL_RCC_OscConfig+0x7a0>)
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	4a37      	ldr	r2, [pc, #220]	; (8006a94 <HAL_RCC_OscConfig+0x7a4>)
 80069b8:	4013      	ands	r3, r2
 80069ba:	0019      	movs	r1, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c4:	431a      	orrs	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ca:	431a      	orrs	r2, r3
 80069cc:	4b30      	ldr	r3, [pc, #192]	; (8006a90 <HAL_RCC_OscConfig+0x7a0>)
 80069ce:	430a      	orrs	r2, r1
 80069d0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069d2:	4b2f      	ldr	r3, [pc, #188]	; (8006a90 <HAL_RCC_OscConfig+0x7a0>)
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	4b2e      	ldr	r3, [pc, #184]	; (8006a90 <HAL_RCC_OscConfig+0x7a0>)
 80069d8:	2180      	movs	r1, #128	; 0x80
 80069da:	0449      	lsls	r1, r1, #17
 80069dc:	430a      	orrs	r2, r1
 80069de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069e0:	f7fe fce6 	bl	80053b0 <HAL_GetTick>
 80069e4:	0003      	movs	r3, r0
 80069e6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80069e8:	e008      	b.n	80069fc <HAL_RCC_OscConfig+0x70c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069ea:	f7fe fce1 	bl	80053b0 <HAL_GetTick>
 80069ee:	0002      	movs	r2, r0
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d901      	bls.n	80069fc <HAL_RCC_OscConfig+0x70c>
          {
            return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e045      	b.n	8006a88 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80069fc:	4b24      	ldr	r3, [pc, #144]	; (8006a90 <HAL_RCC_OscConfig+0x7a0>)
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	2380      	movs	r3, #128	; 0x80
 8006a02:	049b      	lsls	r3, r3, #18
 8006a04:	4013      	ands	r3, r2
 8006a06:	d0f0      	beq.n	80069ea <HAL_RCC_OscConfig+0x6fa>
 8006a08:	e03d      	b.n	8006a86 <HAL_RCC_OscConfig+0x796>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a0a:	4b21      	ldr	r3, [pc, #132]	; (8006a90 <HAL_RCC_OscConfig+0x7a0>)
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	4b20      	ldr	r3, [pc, #128]	; (8006a90 <HAL_RCC_OscConfig+0x7a0>)
 8006a10:	4921      	ldr	r1, [pc, #132]	; (8006a98 <HAL_RCC_OscConfig+0x7a8>)
 8006a12:	400a      	ands	r2, r1
 8006a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a16:	f7fe fccb 	bl	80053b0 <HAL_GetTick>
 8006a1a:	0003      	movs	r3, r0
 8006a1c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006a1e:	e008      	b.n	8006a32 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a20:	f7fe fcc6 	bl	80053b0 <HAL_GetTick>
 8006a24:	0002      	movs	r2, r0
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d901      	bls.n	8006a32 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e02a      	b.n	8006a88 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006a32:	4b17      	ldr	r3, [pc, #92]	; (8006a90 <HAL_RCC_OscConfig+0x7a0>)
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	2380      	movs	r3, #128	; 0x80
 8006a38:	049b      	lsls	r3, r3, #18
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	d1f0      	bne.n	8006a20 <HAL_RCC_OscConfig+0x730>
 8006a3e:	e022      	b.n	8006a86 <HAL_RCC_OscConfig+0x796>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d101      	bne.n	8006a4c <HAL_RCC_OscConfig+0x75c>
      {
        return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e01d      	b.n	8006a88 <HAL_RCC_OscConfig+0x798>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006a4c:	4b10      	ldr	r3, [pc, #64]	; (8006a90 <HAL_RCC_OscConfig+0x7a0>)
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	2380      	movs	r3, #128	; 0x80
 8006a56:	025b      	lsls	r3, r3, #9
 8006a58:	401a      	ands	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d10f      	bne.n	8006a82 <HAL_RCC_OscConfig+0x792>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006a62:	69ba      	ldr	r2, [r7, #24]
 8006a64:	23f0      	movs	r3, #240	; 0xf0
 8006a66:	039b      	lsls	r3, r3, #14
 8006a68:	401a      	ands	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d107      	bne.n	8006a82 <HAL_RCC_OscConfig+0x792>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006a72:	69ba      	ldr	r2, [r7, #24]
 8006a74:	23c0      	movs	r3, #192	; 0xc0
 8006a76:	041b      	lsls	r3, r3, #16
 8006a78:	401a      	ands	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d001      	beq.n	8006a86 <HAL_RCC_OscConfig+0x796>
        {
          return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e000      	b.n	8006a88 <HAL_RCC_OscConfig+0x798>
        }
      }
    }
  }
  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	0018      	movs	r0, r3
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	b00a      	add	sp, #40	; 0x28
 8006a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8006a90:	40021000 	.word	0x40021000
 8006a94:	ff02ffff 	.word	0xff02ffff
 8006a98:	feffffff 	.word	0xfeffffff

08006a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a9c:	b5b0      	push	{r4, r5, r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e129      	b.n	8006d04 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ab0:	4b96      	ldr	r3, [pc, #600]	; (8006d0c <HAL_RCC_ClockConfig+0x270>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d91e      	bls.n	8006afc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006abe:	4b93      	ldr	r3, [pc, #588]	; (8006d0c <HAL_RCC_ClockConfig+0x270>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	4393      	bics	r3, r2
 8006ac6:	0019      	movs	r1, r3
 8006ac8:	4b90      	ldr	r3, [pc, #576]	; (8006d0c <HAL_RCC_ClockConfig+0x270>)
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006ad0:	f7fe fc6e 	bl	80053b0 <HAL_GetTick>
 8006ad4:	0003      	movs	r3, r0
 8006ad6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ad8:	e009      	b.n	8006aee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ada:	f7fe fc69 	bl	80053b0 <HAL_GetTick>
 8006ade:	0002      	movs	r2, r0
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	4a8a      	ldr	r2, [pc, #552]	; (8006d10 <HAL_RCC_ClockConfig+0x274>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d901      	bls.n	8006aee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e10a      	b.n	8006d04 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aee:	4b87      	ldr	r3, [pc, #540]	; (8006d0c <HAL_RCC_ClockConfig+0x270>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2201      	movs	r2, #1
 8006af4:	4013      	ands	r3, r2
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d1ee      	bne.n	8006ada <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2202      	movs	r2, #2
 8006b02:	4013      	ands	r3, r2
 8006b04:	d009      	beq.n	8006b1a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b06:	4b83      	ldr	r3, [pc, #524]	; (8006d14 <HAL_RCC_ClockConfig+0x278>)
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	22f0      	movs	r2, #240	; 0xf0
 8006b0c:	4393      	bics	r3, r2
 8006b0e:	0019      	movs	r1, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	689a      	ldr	r2, [r3, #8]
 8006b14:	4b7f      	ldr	r3, [pc, #508]	; (8006d14 <HAL_RCC_ClockConfig+0x278>)
 8006b16:	430a      	orrs	r2, r1
 8006b18:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	4013      	ands	r3, r2
 8006b22:	d100      	bne.n	8006b26 <HAL_RCC_ClockConfig+0x8a>
 8006b24:	e089      	b.n	8006c3a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d107      	bne.n	8006b3e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b2e:	4b79      	ldr	r3, [pc, #484]	; (8006d14 <HAL_RCC_ClockConfig+0x278>)
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	2380      	movs	r3, #128	; 0x80
 8006b34:	029b      	lsls	r3, r3, #10
 8006b36:	4013      	ands	r3, r2
 8006b38:	d120      	bne.n	8006b7c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e0e2      	b.n	8006d04 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	d107      	bne.n	8006b56 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b46:	4b73      	ldr	r3, [pc, #460]	; (8006d14 <HAL_RCC_ClockConfig+0x278>)
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	2380      	movs	r3, #128	; 0x80
 8006b4c:	049b      	lsls	r3, r3, #18
 8006b4e:	4013      	ands	r3, r2
 8006b50:	d114      	bne.n	8006b7c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e0d6      	b.n	8006d04 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d106      	bne.n	8006b6c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b5e:	4b6d      	ldr	r3, [pc, #436]	; (8006d14 <HAL_RCC_ClockConfig+0x278>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2204      	movs	r2, #4
 8006b64:	4013      	ands	r3, r2
 8006b66:	d109      	bne.n	8006b7c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e0cb      	b.n	8006d04 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006b6c:	4b69      	ldr	r3, [pc, #420]	; (8006d14 <HAL_RCC_ClockConfig+0x278>)
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	2380      	movs	r3, #128	; 0x80
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4013      	ands	r3, r2
 8006b76:	d101      	bne.n	8006b7c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e0c3      	b.n	8006d04 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b7c:	4b65      	ldr	r3, [pc, #404]	; (8006d14 <HAL_RCC_ClockConfig+0x278>)
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	2203      	movs	r2, #3
 8006b82:	4393      	bics	r3, r2
 8006b84:	0019      	movs	r1, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	4b62      	ldr	r3, [pc, #392]	; (8006d14 <HAL_RCC_ClockConfig+0x278>)
 8006b8c:	430a      	orrs	r2, r1
 8006b8e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b90:	f7fe fc0e 	bl	80053b0 <HAL_GetTick>
 8006b94:	0003      	movs	r3, r0
 8006b96:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d111      	bne.n	8006bc4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ba0:	e009      	b.n	8006bb6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ba2:	f7fe fc05 	bl	80053b0 <HAL_GetTick>
 8006ba6:	0002      	movs	r2, r0
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	4a58      	ldr	r2, [pc, #352]	; (8006d10 <HAL_RCC_ClockConfig+0x274>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d901      	bls.n	8006bb6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e0a6      	b.n	8006d04 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006bb6:	4b57      	ldr	r3, [pc, #348]	; (8006d14 <HAL_RCC_ClockConfig+0x278>)
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	220c      	movs	r2, #12
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	2b08      	cmp	r3, #8
 8006bc0:	d1ef      	bne.n	8006ba2 <HAL_RCC_ClockConfig+0x106>
 8006bc2:	e03a      	b.n	8006c3a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	2b03      	cmp	r3, #3
 8006bca:	d111      	bne.n	8006bf0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bcc:	e009      	b.n	8006be2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bce:	f7fe fbef 	bl	80053b0 <HAL_GetTick>
 8006bd2:	0002      	movs	r2, r0
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	4a4d      	ldr	r2, [pc, #308]	; (8006d10 <HAL_RCC_ClockConfig+0x274>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d901      	bls.n	8006be2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e090      	b.n	8006d04 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006be2:	4b4c      	ldr	r3, [pc, #304]	; (8006d14 <HAL_RCC_ClockConfig+0x278>)
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	220c      	movs	r2, #12
 8006be8:	4013      	ands	r3, r2
 8006bea:	2b0c      	cmp	r3, #12
 8006bec:	d1ef      	bne.n	8006bce <HAL_RCC_ClockConfig+0x132>
 8006bee:	e024      	b.n	8006c3a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d11b      	bne.n	8006c30 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006bf8:	e009      	b.n	8006c0e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bfa:	f7fe fbd9 	bl	80053b0 <HAL_GetTick>
 8006bfe:	0002      	movs	r2, r0
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	4a42      	ldr	r2, [pc, #264]	; (8006d10 <HAL_RCC_ClockConfig+0x274>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d901      	bls.n	8006c0e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e07a      	b.n	8006d04 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c0e:	4b41      	ldr	r3, [pc, #260]	; (8006d14 <HAL_RCC_ClockConfig+0x278>)
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	220c      	movs	r2, #12
 8006c14:	4013      	ands	r3, r2
 8006c16:	2b04      	cmp	r3, #4
 8006c18:	d1ef      	bne.n	8006bfa <HAL_RCC_ClockConfig+0x15e>
 8006c1a:	e00e      	b.n	8006c3a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c1c:	f7fe fbc8 	bl	80053b0 <HAL_GetTick>
 8006c20:	0002      	movs	r2, r0
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	4a3a      	ldr	r2, [pc, #232]	; (8006d10 <HAL_RCC_ClockConfig+0x274>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d901      	bls.n	8006c30 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e069      	b.n	8006d04 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006c30:	4b38      	ldr	r3, [pc, #224]	; (8006d14 <HAL_RCC_ClockConfig+0x278>)
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	220c      	movs	r2, #12
 8006c36:	4013      	ands	r3, r2
 8006c38:	d1f0      	bne.n	8006c1c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c3a:	4b34      	ldr	r3, [pc, #208]	; (8006d0c <HAL_RCC_ClockConfig+0x270>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	4013      	ands	r3, r2
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d21e      	bcs.n	8006c86 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c48:	4b30      	ldr	r3, [pc, #192]	; (8006d0c <HAL_RCC_ClockConfig+0x270>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	4393      	bics	r3, r2
 8006c50:	0019      	movs	r1, r3
 8006c52:	4b2e      	ldr	r3, [pc, #184]	; (8006d0c <HAL_RCC_ClockConfig+0x270>)
 8006c54:	683a      	ldr	r2, [r7, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006c5a:	f7fe fba9 	bl	80053b0 <HAL_GetTick>
 8006c5e:	0003      	movs	r3, r0
 8006c60:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c62:	e009      	b.n	8006c78 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c64:	f7fe fba4 	bl	80053b0 <HAL_GetTick>
 8006c68:	0002      	movs	r2, r0
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	4a28      	ldr	r2, [pc, #160]	; (8006d10 <HAL_RCC_ClockConfig+0x274>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d901      	bls.n	8006c78 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e045      	b.n	8006d04 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c78:	4b24      	ldr	r3, [pc, #144]	; (8006d0c <HAL_RCC_ClockConfig+0x270>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	4013      	ands	r3, r2
 8006c80:	683a      	ldr	r2, [r7, #0]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d1ee      	bne.n	8006c64 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2204      	movs	r2, #4
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	d009      	beq.n	8006ca4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c90:	4b20      	ldr	r3, [pc, #128]	; (8006d14 <HAL_RCC_ClockConfig+0x278>)
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	4a20      	ldr	r2, [pc, #128]	; (8006d18 <HAL_RCC_ClockConfig+0x27c>)
 8006c96:	4013      	ands	r3, r2
 8006c98:	0019      	movs	r1, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68da      	ldr	r2, [r3, #12]
 8006c9e:	4b1d      	ldr	r3, [pc, #116]	; (8006d14 <HAL_RCC_ClockConfig+0x278>)
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2208      	movs	r2, #8
 8006caa:	4013      	ands	r3, r2
 8006cac:	d00a      	beq.n	8006cc4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006cae:	4b19      	ldr	r3, [pc, #100]	; (8006d14 <HAL_RCC_ClockConfig+0x278>)
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	4a1a      	ldr	r2, [pc, #104]	; (8006d1c <HAL_RCC_ClockConfig+0x280>)
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	0019      	movs	r1, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	00da      	lsls	r2, r3, #3
 8006cbe:	4b15      	ldr	r3, [pc, #84]	; (8006d14 <HAL_RCC_ClockConfig+0x278>)
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006cc4:	f000 f832 	bl	8006d2c <HAL_RCC_GetSysClockFreq>
 8006cc8:	0001      	movs	r1, r0
 8006cca:	4b12      	ldr	r3, [pc, #72]	; (8006d14 <HAL_RCC_ClockConfig+0x278>)
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	091b      	lsrs	r3, r3, #4
 8006cd0:	220f      	movs	r2, #15
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	4a12      	ldr	r2, [pc, #72]	; (8006d20 <HAL_RCC_ClockConfig+0x284>)
 8006cd6:	5cd3      	ldrb	r3, [r2, r3]
 8006cd8:	000a      	movs	r2, r1
 8006cda:	40da      	lsrs	r2, r3
 8006cdc:	4b11      	ldr	r3, [pc, #68]	; (8006d24 <HAL_RCC_ClockConfig+0x288>)
 8006cde:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006ce0:	4b11      	ldr	r3, [pc, #68]	; (8006d28 <HAL_RCC_ClockConfig+0x28c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	250b      	movs	r5, #11
 8006ce6:	197c      	adds	r4, r7, r5
 8006ce8:	0018      	movs	r0, r3
 8006cea:	f7fe fb1b 	bl	8005324 <HAL_InitTick>
 8006cee:	0003      	movs	r3, r0
 8006cf0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8006cf2:	197b      	adds	r3, r7, r5
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d003      	beq.n	8006d02 <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 8006cfa:	230b      	movs	r3, #11
 8006cfc:	18fb      	adds	r3, r7, r3
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	e000      	b.n	8006d04 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	0018      	movs	r0, r3
 8006d06:	46bd      	mov	sp, r7
 8006d08:	b004      	add	sp, #16
 8006d0a:	bdb0      	pop	{r4, r5, r7, pc}
 8006d0c:	40022000 	.word	0x40022000
 8006d10:	00001388 	.word	0x00001388
 8006d14:	40021000 	.word	0x40021000
 8006d18:	fffff8ff 	.word	0xfffff8ff
 8006d1c:	ffffc7ff 	.word	0xffffc7ff
 8006d20:	0800e9e8 	.word	0x0800e9e8
 8006d24:	20000058 	.word	0x20000058
 8006d28:	2000005c 	.word	0x2000005c

08006d2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d2e:	b08f      	sub	sp, #60	; 0x3c
 8006d30:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8006d32:	4b4a      	ldr	r3, [pc, #296]	; (8006e5c <HAL_RCC_GetSysClockFreq+0x130>)
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d3a:	230c      	movs	r3, #12
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	2b08      	cmp	r3, #8
 8006d40:	d00f      	beq.n	8006d62 <HAL_RCC_GetSysClockFreq+0x36>
 8006d42:	2b0c      	cmp	r3, #12
 8006d44:	d010      	beq.n	8006d68 <HAL_RCC_GetSysClockFreq+0x3c>
 8006d46:	2b04      	cmp	r3, #4
 8006d48:	d000      	beq.n	8006d4c <HAL_RCC_GetSysClockFreq+0x20>
 8006d4a:	e073      	b.n	8006e34 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006d4c:	4b43      	ldr	r3, [pc, #268]	; (8006e5c <HAL_RCC_GetSysClockFreq+0x130>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2210      	movs	r2, #16
 8006d52:	4013      	ands	r3, r2
 8006d54:	d002      	beq.n	8006d5c <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006d56:	4b42      	ldr	r3, [pc, #264]	; (8006e60 <HAL_RCC_GetSysClockFreq+0x134>)
 8006d58:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006d5a:	e079      	b.n	8006e50 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8006d5c:	4b41      	ldr	r3, [pc, #260]	; (8006e64 <HAL_RCC_GetSysClockFreq+0x138>)
 8006d5e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006d60:	e076      	b.n	8006e50 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006d62:	4b41      	ldr	r3, [pc, #260]	; (8006e68 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006d64:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006d66:	e073      	b.n	8006e50 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6a:	0c9a      	lsrs	r2, r3, #18
 8006d6c:	230f      	movs	r3, #15
 8006d6e:	401a      	ands	r2, r3
 8006d70:	4b3e      	ldr	r3, [pc, #248]	; (8006e6c <HAL_RCC_GetSysClockFreq+0x140>)
 8006d72:	5c9b      	ldrb	r3, [r3, r2]
 8006d74:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d78:	0d9a      	lsrs	r2, r3, #22
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	3301      	adds	r3, #1
 8006d80:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d82:	4b36      	ldr	r3, [pc, #216]	; (8006e5c <HAL_RCC_GetSysClockFreq+0x130>)
 8006d84:	68da      	ldr	r2, [r3, #12]
 8006d86:	2380      	movs	r3, #128	; 0x80
 8006d88:	025b      	lsls	r3, r3, #9
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	d019      	beq.n	8006dc2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d90:	61bb      	str	r3, [r7, #24]
 8006d92:	2300      	movs	r3, #0
 8006d94:	61fb      	str	r3, [r7, #28]
 8006d96:	4a34      	ldr	r2, [pc, #208]	; (8006e68 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006d98:	2300      	movs	r3, #0
 8006d9a:	69b8      	ldr	r0, [r7, #24]
 8006d9c:	69f9      	ldr	r1, [r7, #28]
 8006d9e:	f7f9 fb99 	bl	80004d4 <__aeabi_lmul>
 8006da2:	0003      	movs	r3, r0
 8006da4:	000c      	movs	r4, r1
 8006da6:	0018      	movs	r0, r3
 8006da8:	0021      	movs	r1, r4
 8006daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dac:	613b      	str	r3, [r7, #16]
 8006dae:	2300      	movs	r3, #0
 8006db0:	617b      	str	r3, [r7, #20]
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	f7f9 fb6d 	bl	8000494 <__aeabi_uldivmod>
 8006dba:	0003      	movs	r3, r0
 8006dbc:	000c      	movs	r4, r1
 8006dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8006dc0:	e035      	b.n	8006e2e <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006dc2:	4b26      	ldr	r3, [pc, #152]	; (8006e5c <HAL_RCC_GetSysClockFreq+0x130>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2210      	movs	r2, #16
 8006dc8:	4013      	ands	r3, r2
 8006dca:	d019      	beq.n	8006e00 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8006dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dce:	60bb      	str	r3, [r7, #8]
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	4a22      	ldr	r2, [pc, #136]	; (8006e60 <HAL_RCC_GetSysClockFreq+0x134>)
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	68b8      	ldr	r0, [r7, #8]
 8006dda:	68f9      	ldr	r1, [r7, #12]
 8006ddc:	f7f9 fb7a 	bl	80004d4 <__aeabi_lmul>
 8006de0:	0003      	movs	r3, r0
 8006de2:	000c      	movs	r4, r1
 8006de4:	0018      	movs	r0, r3
 8006de6:	0021      	movs	r1, r4
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	603b      	str	r3, [r7, #0]
 8006dec:	2300      	movs	r3, #0
 8006dee:	607b      	str	r3, [r7, #4]
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f7f9 fb4e 	bl	8000494 <__aeabi_uldivmod>
 8006df8:	0003      	movs	r3, r0
 8006dfa:	000c      	movs	r4, r1
 8006dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8006dfe:	e016      	b.n	8006e2e <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e02:	0018      	movs	r0, r3
 8006e04:	2300      	movs	r3, #0
 8006e06:	0019      	movs	r1, r3
 8006e08:	4a16      	ldr	r2, [pc, #88]	; (8006e64 <HAL_RCC_GetSysClockFreq+0x138>)
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	f7f9 fb62 	bl	80004d4 <__aeabi_lmul>
 8006e10:	0003      	movs	r3, r0
 8006e12:	000c      	movs	r4, r1
 8006e14:	0018      	movs	r0, r3
 8006e16:	0021      	movs	r1, r4
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	001d      	movs	r5, r3
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	001e      	movs	r6, r3
 8006e20:	002a      	movs	r2, r5
 8006e22:	0033      	movs	r3, r6
 8006e24:	f7f9 fb36 	bl	8000494 <__aeabi_uldivmod>
 8006e28:	0003      	movs	r3, r0
 8006e2a:	000c      	movs	r4, r1
 8006e2c:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8006e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e30:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006e32:	e00d      	b.n	8006e50 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006e34:	4b09      	ldr	r3, [pc, #36]	; (8006e5c <HAL_RCC_GetSysClockFreq+0x130>)
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	0b5b      	lsrs	r3, r3, #13
 8006e3a:	2207      	movs	r2, #7
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006e40:	6a3b      	ldr	r3, [r7, #32]
 8006e42:	3301      	adds	r3, #1
 8006e44:	2280      	movs	r2, #128	; 0x80
 8006e46:	0212      	lsls	r2, r2, #8
 8006e48:	409a      	lsls	r2, r3
 8006e4a:	0013      	movs	r3, r2
 8006e4c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006e4e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006e52:	0018      	movs	r0, r3
 8006e54:	46bd      	mov	sp, r7
 8006e56:	b00f      	add	sp, #60	; 0x3c
 8006e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e5a:	46c0      	nop			; (mov r8, r8)
 8006e5c:	40021000 	.word	0x40021000
 8006e60:	003d0900 	.word	0x003d0900
 8006e64:	00f42400 	.word	0x00f42400
 8006e68:	007a1200 	.word	0x007a1200
 8006e6c:	0800ea00 	.word	0x0800ea00

08006e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e74:	4b02      	ldr	r3, [pc, #8]	; (8006e80 <HAL_RCC_GetHCLKFreq+0x10>)
 8006e76:	681b      	ldr	r3, [r3, #0]
}
 8006e78:	0018      	movs	r0, r3
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	46c0      	nop			; (mov r8, r8)
 8006e80:	20000058 	.word	0x20000058

08006e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e88:	f7ff fff2 	bl	8006e70 <HAL_RCC_GetHCLKFreq>
 8006e8c:	0001      	movs	r1, r0
 8006e8e:	4b06      	ldr	r3, [pc, #24]	; (8006ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	0a1b      	lsrs	r3, r3, #8
 8006e94:	2207      	movs	r2, #7
 8006e96:	4013      	ands	r3, r2
 8006e98:	4a04      	ldr	r2, [pc, #16]	; (8006eac <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e9a:	5cd3      	ldrb	r3, [r2, r3]
 8006e9c:	40d9      	lsrs	r1, r3
 8006e9e:	000b      	movs	r3, r1
}
 8006ea0:	0018      	movs	r0, r3
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	46c0      	nop			; (mov r8, r8)
 8006ea8:	40021000 	.word	0x40021000
 8006eac:	0800e9f8 	.word	0x0800e9f8

08006eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006eb4:	f7ff ffdc 	bl	8006e70 <HAL_RCC_GetHCLKFreq>
 8006eb8:	0001      	movs	r1, r0
 8006eba:	4b06      	ldr	r3, [pc, #24]	; (8006ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	0adb      	lsrs	r3, r3, #11
 8006ec0:	2207      	movs	r2, #7
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	4a04      	ldr	r2, [pc, #16]	; (8006ed8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ec6:	5cd3      	ldrb	r3, [r2, r3]
 8006ec8:	40d9      	lsrs	r1, r3
 8006eca:	000b      	movs	r3, r1
}
 8006ecc:	0018      	movs	r0, r3
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	46c0      	nop			; (mov r8, r8)
 8006ed4:	40021000 	.word	0x40021000
 8006ed8:	0800e9f8 	.word	0x0800e9f8

08006edc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8006ee4:	2317      	movs	r3, #23
 8006ee6:	18fb      	adds	r3, r7, r3
 8006ee8:	2200      	movs	r2, #0
 8006eea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	d106      	bne.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	2380      	movs	r3, #128	; 0x80
 8006efc:	011b      	lsls	r3, r3, #4
 8006efe:	4013      	ands	r3, r2
 8006f00:	d100      	bne.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8006f02:	e0d9      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f04:	4ba4      	ldr	r3, [pc, #656]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f08:	2380      	movs	r3, #128	; 0x80
 8006f0a:	055b      	lsls	r3, r3, #21
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	d10a      	bne.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f10:	4ba1      	ldr	r3, [pc, #644]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f14:	4ba0      	ldr	r3, [pc, #640]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f16:	2180      	movs	r1, #128	; 0x80
 8006f18:	0549      	lsls	r1, r1, #21
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006f1e:	2317      	movs	r3, #23
 8006f20:	18fb      	adds	r3, r7, r3
 8006f22:	2201      	movs	r2, #1
 8006f24:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f26:	4b9d      	ldr	r3, [pc, #628]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	2380      	movs	r3, #128	; 0x80
 8006f2c:	005b      	lsls	r3, r3, #1
 8006f2e:	4013      	ands	r3, r2
 8006f30:	d11a      	bne.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f32:	4b9a      	ldr	r3, [pc, #616]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	4b99      	ldr	r3, [pc, #612]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006f38:	2180      	movs	r1, #128	; 0x80
 8006f3a:	0049      	lsls	r1, r1, #1
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f40:	f7fe fa36 	bl	80053b0 <HAL_GetTick>
 8006f44:	0003      	movs	r3, r0
 8006f46:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f48:	e008      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f4a:	f7fe fa31 	bl	80053b0 <HAL_GetTick>
 8006f4e:	0002      	movs	r2, r0
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	2b64      	cmp	r3, #100	; 0x64
 8006f56:	d901      	bls.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e118      	b.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f5c:	4b8f      	ldr	r3, [pc, #572]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	2380      	movs	r3, #128	; 0x80
 8006f62:	005b      	lsls	r3, r3, #1
 8006f64:	4013      	ands	r3, r2
 8006f66:	d0f0      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006f68:	4b8b      	ldr	r3, [pc, #556]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	23c0      	movs	r3, #192	; 0xc0
 8006f6e:	039b      	lsls	r3, r3, #14
 8006f70:	4013      	ands	r3, r2
 8006f72:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685a      	ldr	r2, [r3, #4]
 8006f78:	23c0      	movs	r3, #192	; 0xc0
 8006f7a:	039b      	lsls	r3, r3, #14
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d107      	bne.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	689a      	ldr	r2, [r3, #8]
 8006f88:	23c0      	movs	r3, #192	; 0xc0
 8006f8a:	039b      	lsls	r3, r3, #14
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d013      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	23c0      	movs	r3, #192	; 0xc0
 8006f9a:	029b      	lsls	r3, r3, #10
 8006f9c:	401a      	ands	r2, r3
 8006f9e:	23c0      	movs	r3, #192	; 0xc0
 8006fa0:	029b      	lsls	r3, r3, #10
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d10a      	bne.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006fa6:	4b7c      	ldr	r3, [pc, #496]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	2380      	movs	r3, #128	; 0x80
 8006fac:	029b      	lsls	r3, r3, #10
 8006fae:	401a      	ands	r2, r3
 8006fb0:	2380      	movs	r3, #128	; 0x80
 8006fb2:	029b      	lsls	r3, r3, #10
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d101      	bne.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e0e8      	b.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006fbc:	4b76      	ldr	r3, [pc, #472]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006fbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006fc0:	23c0      	movs	r3, #192	; 0xc0
 8006fc2:	029b      	lsls	r3, r3, #10
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d049      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685a      	ldr	r2, [r3, #4]
 8006fd2:	23c0      	movs	r3, #192	; 0xc0
 8006fd4:	029b      	lsls	r3, r3, #10
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d004      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	d10d      	bne.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	23c0      	movs	r3, #192	; 0xc0
 8006fee:	029b      	lsls	r3, r3, #10
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d034      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	2380      	movs	r3, #128	; 0x80
 8006ffe:	011b      	lsls	r3, r3, #4
 8007000:	4013      	ands	r3, r2
 8007002:	d02e      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8007004:	4b64      	ldr	r3, [pc, #400]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007008:	4a65      	ldr	r2, [pc, #404]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800700a:	4013      	ands	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800700e:	4b62      	ldr	r3, [pc, #392]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007010:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007012:	4b61      	ldr	r3, [pc, #388]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007014:	2180      	movs	r1, #128	; 0x80
 8007016:	0309      	lsls	r1, r1, #12
 8007018:	430a      	orrs	r2, r1
 800701a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800701c:	4b5e      	ldr	r3, [pc, #376]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800701e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007020:	4b5d      	ldr	r3, [pc, #372]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007022:	4960      	ldr	r1, [pc, #384]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8007024:	400a      	ands	r2, r1
 8007026:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8007028:	4b5b      	ldr	r3, [pc, #364]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	2380      	movs	r3, #128	; 0x80
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	4013      	ands	r3, r2
 8007036:	d014      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007038:	f7fe f9ba 	bl	80053b0 <HAL_GetTick>
 800703c:	0003      	movs	r3, r0
 800703e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007040:	e009      	b.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007042:	f7fe f9b5 	bl	80053b0 <HAL_GetTick>
 8007046:	0002      	movs	r2, r0
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	4a56      	ldr	r2, [pc, #344]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d901      	bls.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e09b      	b.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007056:	4b50      	ldr	r3, [pc, #320]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007058:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800705a:	2380      	movs	r3, #128	; 0x80
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4013      	ands	r3, r2
 8007060:	d0ef      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	23c0      	movs	r3, #192	; 0xc0
 8007068:	029b      	lsls	r3, r3, #10
 800706a:	401a      	ands	r2, r3
 800706c:	23c0      	movs	r3, #192	; 0xc0
 800706e:	029b      	lsls	r3, r3, #10
 8007070:	429a      	cmp	r2, r3
 8007072:	d10c      	bne.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8007074:	4b48      	ldr	r3, [pc, #288]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a4c      	ldr	r2, [pc, #304]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800707a:	4013      	ands	r3, r2
 800707c:	0019      	movs	r1, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	23c0      	movs	r3, #192	; 0xc0
 8007084:	039b      	lsls	r3, r3, #14
 8007086:	401a      	ands	r2, r3
 8007088:	4b43      	ldr	r3, [pc, #268]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800708a:	430a      	orrs	r2, r1
 800708c:	601a      	str	r2, [r3, #0]
 800708e:	4b42      	ldr	r3, [pc, #264]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007090:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	23c0      	movs	r3, #192	; 0xc0
 8007098:	029b      	lsls	r3, r3, #10
 800709a:	401a      	ands	r2, r3
 800709c:	4b3e      	ldr	r3, [pc, #248]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800709e:	430a      	orrs	r2, r1
 80070a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80070a2:	2317      	movs	r3, #23
 80070a4:	18fb      	adds	r3, r7, r3
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d105      	bne.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070ac:	4b3a      	ldr	r3, [pc, #232]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80070ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070b0:	4b39      	ldr	r3, [pc, #228]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80070b2:	493f      	ldr	r1, [pc, #252]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80070b4:	400a      	ands	r2, r1
 80070b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2201      	movs	r2, #1
 80070be:	4013      	ands	r3, r2
 80070c0:	d009      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070c2:	4b35      	ldr	r3, [pc, #212]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80070c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070c6:	2203      	movs	r2, #3
 80070c8:	4393      	bics	r3, r2
 80070ca:	0019      	movs	r1, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68da      	ldr	r2, [r3, #12]
 80070d0:	4b31      	ldr	r3, [pc, #196]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80070d2:	430a      	orrs	r2, r1
 80070d4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2202      	movs	r2, #2
 80070dc:	4013      	ands	r3, r2
 80070de:	d009      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070e0:	4b2d      	ldr	r3, [pc, #180]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80070e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070e4:	220c      	movs	r2, #12
 80070e6:	4393      	bics	r3, r2
 80070e8:	0019      	movs	r1, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	691a      	ldr	r2, [r3, #16]
 80070ee:	4b2a      	ldr	r3, [pc, #168]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80070f0:	430a      	orrs	r2, r1
 80070f2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2204      	movs	r2, #4
 80070fa:	4013      	ands	r3, r2
 80070fc:	d009      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070fe:	4b26      	ldr	r3, [pc, #152]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007102:	4a2c      	ldr	r2, [pc, #176]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007104:	4013      	ands	r3, r2
 8007106:	0019      	movs	r1, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	695a      	ldr	r2, [r3, #20]
 800710c:	4b22      	ldr	r3, [pc, #136]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800710e:	430a      	orrs	r2, r1
 8007110:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2208      	movs	r2, #8
 8007118:	4013      	ands	r3, r2
 800711a:	d009      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800711c:	4b1e      	ldr	r3, [pc, #120]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800711e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007120:	4a25      	ldr	r2, [pc, #148]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8007122:	4013      	ands	r3, r2
 8007124:	0019      	movs	r1, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	699a      	ldr	r2, [r3, #24]
 800712a:	4b1b      	ldr	r3, [pc, #108]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800712c:	430a      	orrs	r2, r1
 800712e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	2380      	movs	r3, #128	; 0x80
 8007136:	005b      	lsls	r3, r3, #1
 8007138:	4013      	ands	r3, r2
 800713a:	d009      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800713c:	4b16      	ldr	r3, [pc, #88]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800713e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007140:	4a17      	ldr	r2, [pc, #92]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007142:	4013      	ands	r3, r2
 8007144:	0019      	movs	r1, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	69da      	ldr	r2, [r3, #28]
 800714a:	4b13      	ldr	r3, [pc, #76]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800714c:	430a      	orrs	r2, r1
 800714e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2240      	movs	r2, #64	; 0x40
 8007156:	4013      	ands	r3, r2
 8007158:	d009      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800715a:	4b0f      	ldr	r3, [pc, #60]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800715c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800715e:	4a17      	ldr	r2, [pc, #92]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8007160:	4013      	ands	r3, r2
 8007162:	0019      	movs	r1, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007168:	4b0b      	ldr	r3, [pc, #44]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800716a:	430a      	orrs	r2, r1
 800716c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2280      	movs	r2, #128	; 0x80
 8007174:	4013      	ands	r3, r2
 8007176:	d009      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8007178:	4b07      	ldr	r3, [pc, #28]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800717a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800717c:	4a10      	ldr	r2, [pc, #64]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800717e:	4013      	ands	r3, r2
 8007180:	0019      	movs	r1, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a1a      	ldr	r2, [r3, #32]
 8007186:	4b04      	ldr	r3, [pc, #16]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007188:	430a      	orrs	r2, r1
 800718a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	0018      	movs	r0, r3
 8007190:	46bd      	mov	sp, r7
 8007192:	b006      	add	sp, #24
 8007194:	bd80      	pop	{r7, pc}
 8007196:	46c0      	nop			; (mov r8, r8)
 8007198:	40021000 	.word	0x40021000
 800719c:	40007000 	.word	0x40007000
 80071a0:	fffcffff 	.word	0xfffcffff
 80071a4:	fff7ffff 	.word	0xfff7ffff
 80071a8:	00001388 	.word	0x00001388
 80071ac:	ffcfffff 	.word	0xffcfffff
 80071b0:	efffffff 	.word	0xefffffff
 80071b4:	fffff3ff 	.word	0xfffff3ff
 80071b8:	ffffcfff 	.word	0xffffcfff
 80071bc:	fbffffff 	.word	0xfbffffff
 80071c0:	fff3ffff 	.word	0xfff3ffff

080071c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e083      	b.n	80072de <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d109      	bne.n	80071f2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	685a      	ldr	r2, [r3, #4]
 80071e2:	2382      	movs	r3, #130	; 0x82
 80071e4:	005b      	lsls	r3, r3, #1
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d009      	beq.n	80071fe <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	61da      	str	r2, [r3, #28]
 80071f0:	e005      	b.n	80071fe <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2251      	movs	r2, #81	; 0x51
 8007208:	5c9b      	ldrb	r3, [r3, r2]
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b00      	cmp	r3, #0
 800720e:	d107      	bne.n	8007220 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2250      	movs	r2, #80	; 0x50
 8007214:	2100      	movs	r1, #0
 8007216:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	0018      	movs	r0, r3
 800721c:	f7fd fc2e 	bl	8004a7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2251      	movs	r2, #81	; 0x51
 8007224:	2102      	movs	r1, #2
 8007226:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2140      	movs	r1, #64	; 0x40
 8007234:	438a      	bics	r2, r1
 8007236:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	2382      	movs	r3, #130	; 0x82
 800723e:	005b      	lsls	r3, r3, #1
 8007240:	401a      	ands	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6899      	ldr	r1, [r3, #8]
 8007246:	2384      	movs	r3, #132	; 0x84
 8007248:	021b      	lsls	r3, r3, #8
 800724a:	400b      	ands	r3, r1
 800724c:	431a      	orrs	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68d9      	ldr	r1, [r3, #12]
 8007252:	2380      	movs	r3, #128	; 0x80
 8007254:	011b      	lsls	r3, r3, #4
 8007256:	400b      	ands	r3, r1
 8007258:	431a      	orrs	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	2102      	movs	r1, #2
 8007260:	400b      	ands	r3, r1
 8007262:	431a      	orrs	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	2101      	movs	r1, #1
 800726a:	400b      	ands	r3, r1
 800726c:	431a      	orrs	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6999      	ldr	r1, [r3, #24]
 8007272:	2380      	movs	r3, #128	; 0x80
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	400b      	ands	r3, r1
 8007278:	431a      	orrs	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	2138      	movs	r1, #56	; 0x38
 8007280:	400b      	ands	r3, r1
 8007282:	431a      	orrs	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a1b      	ldr	r3, [r3, #32]
 8007288:	2180      	movs	r1, #128	; 0x80
 800728a:	400b      	ands	r3, r1
 800728c:	431a      	orrs	r2, r3
 800728e:	0011      	movs	r1, r2
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007294:	2380      	movs	r3, #128	; 0x80
 8007296:	019b      	lsls	r3, r3, #6
 8007298:	401a      	ands	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	430a      	orrs	r2, r1
 80072a0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	0c1b      	lsrs	r3, r3, #16
 80072a8:	2204      	movs	r2, #4
 80072aa:	4013      	ands	r3, r2
 80072ac:	0019      	movs	r1, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	2210      	movs	r2, #16
 80072b4:	401a      	ands	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	69da      	ldr	r2, [r3, #28]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4907      	ldr	r1, [pc, #28]	; (80072e8 <HAL_SPI_Init+0x124>)
 80072ca:	400a      	ands	r2, r1
 80072cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2251      	movs	r2, #81	; 0x51
 80072d8:	2101      	movs	r1, #1
 80072da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	0018      	movs	r0, r3
 80072e0:	46bd      	mov	sp, r7
 80072e2:	b002      	add	sp, #8
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	46c0      	nop			; (mov r8, r8)
 80072e8:	fffff7ff 	.word	0xfffff7ff

080072ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b088      	sub	sp, #32
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	603b      	str	r3, [r7, #0]
 80072f8:	1dbb      	adds	r3, r7, #6
 80072fa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80072fc:	231f      	movs	r3, #31
 80072fe:	18fb      	adds	r3, r7, r3
 8007300:	2200      	movs	r2, #0
 8007302:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2250      	movs	r2, #80	; 0x50
 8007308:	5c9b      	ldrb	r3, [r3, r2]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d101      	bne.n	8007312 <HAL_SPI_Transmit+0x26>
 800730e:	2302      	movs	r3, #2
 8007310:	e13e      	b.n	8007590 <HAL_SPI_Transmit+0x2a4>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2250      	movs	r2, #80	; 0x50
 8007316:	2101      	movs	r1, #1
 8007318:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800731a:	f7fe f849 	bl	80053b0 <HAL_GetTick>
 800731e:	0003      	movs	r3, r0
 8007320:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007322:	2316      	movs	r3, #22
 8007324:	18fb      	adds	r3, r7, r3
 8007326:	1dba      	adds	r2, r7, #6
 8007328:	8812      	ldrh	r2, [r2, #0]
 800732a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2251      	movs	r2, #81	; 0x51
 8007330:	5c9b      	ldrb	r3, [r3, r2]
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b01      	cmp	r3, #1
 8007336:	d004      	beq.n	8007342 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8007338:	231f      	movs	r3, #31
 800733a:	18fb      	adds	r3, r7, r3
 800733c:	2202      	movs	r2, #2
 800733e:	701a      	strb	r2, [r3, #0]
    goto error;
 8007340:	e11b      	b.n	800757a <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d003      	beq.n	8007350 <HAL_SPI_Transmit+0x64>
 8007348:	1dbb      	adds	r3, r7, #6
 800734a:	881b      	ldrh	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d104      	bne.n	800735a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8007350:	231f      	movs	r3, #31
 8007352:	18fb      	adds	r3, r7, r3
 8007354:	2201      	movs	r2, #1
 8007356:	701a      	strb	r2, [r3, #0]
    goto error;
 8007358:	e10f      	b.n	800757a <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2251      	movs	r2, #81	; 0x51
 800735e:	2103      	movs	r1, #3
 8007360:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	1dba      	adds	r2, r7, #6
 8007372:	8812      	ldrh	r2, [r2, #0]
 8007374:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	1dba      	adds	r2, r7, #6
 800737a:	8812      	ldrh	r2, [r2, #0]
 800737c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2200      	movs	r2, #0
 8007388:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	689a      	ldr	r2, [r3, #8]
 80073a0:	2380      	movs	r3, #128	; 0x80
 80073a2:	021b      	lsls	r3, r3, #8
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d110      	bne.n	80073ca <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2140      	movs	r1, #64	; 0x40
 80073b4:	438a      	bics	r2, r1
 80073b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2180      	movs	r1, #128	; 0x80
 80073c4:	01c9      	lsls	r1, r1, #7
 80073c6:	430a      	orrs	r2, r1
 80073c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2240      	movs	r2, #64	; 0x40
 80073d2:	4013      	ands	r3, r2
 80073d4:	2b40      	cmp	r3, #64	; 0x40
 80073d6:	d007      	beq.n	80073e8 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2140      	movs	r1, #64	; 0x40
 80073e4:	430a      	orrs	r2, r1
 80073e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	68da      	ldr	r2, [r3, #12]
 80073ec:	2380      	movs	r3, #128	; 0x80
 80073ee:	011b      	lsls	r3, r3, #4
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d14e      	bne.n	8007492 <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d004      	beq.n	8007406 <HAL_SPI_Transmit+0x11a>
 80073fc:	2316      	movs	r3, #22
 80073fe:	18fb      	adds	r3, r7, r3
 8007400:	881b      	ldrh	r3, [r3, #0]
 8007402:	2b01      	cmp	r3, #1
 8007404:	d13f      	bne.n	8007486 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740a:	881a      	ldrh	r2, [r3, #0]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007416:	1c9a      	adds	r2, r3, #2
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007420:	b29b      	uxth	r3, r3
 8007422:	3b01      	subs	r3, #1
 8007424:	b29a      	uxth	r2, r3
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800742a:	e02c      	b.n	8007486 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	2202      	movs	r2, #2
 8007434:	4013      	ands	r3, r2
 8007436:	2b02      	cmp	r3, #2
 8007438:	d112      	bne.n	8007460 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743e:	881a      	ldrh	r2, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744a:	1c9a      	adds	r2, r3, #2
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007454:	b29b      	uxth	r3, r3
 8007456:	3b01      	subs	r3, #1
 8007458:	b29a      	uxth	r2, r3
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	86da      	strh	r2, [r3, #54]	; 0x36
 800745e:	e012      	b.n	8007486 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007460:	f7fd ffa6 	bl	80053b0 <HAL_GetTick>
 8007464:	0002      	movs	r2, r0
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	429a      	cmp	r2, r3
 800746e:	d802      	bhi.n	8007476 <HAL_SPI_Transmit+0x18a>
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	3301      	adds	r3, #1
 8007474:	d102      	bne.n	800747c <HAL_SPI_Transmit+0x190>
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d104      	bne.n	8007486 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 800747c:	231f      	movs	r3, #31
 800747e:	18fb      	adds	r3, r7, r3
 8007480:	2203      	movs	r2, #3
 8007482:	701a      	strb	r2, [r3, #0]
          goto error;
 8007484:	e079      	b.n	800757a <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800748a:	b29b      	uxth	r3, r3
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1cd      	bne.n	800742c <HAL_SPI_Transmit+0x140>
 8007490:	e04f      	b.n	8007532 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d004      	beq.n	80074a4 <HAL_SPI_Transmit+0x1b8>
 800749a:	2316      	movs	r3, #22
 800749c:	18fb      	adds	r3, r7, r3
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d141      	bne.n	8007528 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	330c      	adds	r3, #12
 80074ae:	7812      	ldrb	r2, [r2, #0]
 80074b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b6:	1c5a      	adds	r2, r3, #1
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	3b01      	subs	r3, #1
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80074ca:	e02d      	b.n	8007528 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	2202      	movs	r2, #2
 80074d4:	4013      	ands	r3, r2
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d113      	bne.n	8007502 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	330c      	adds	r3, #12
 80074e4:	7812      	ldrb	r2, [r2, #0]
 80074e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ec:	1c5a      	adds	r2, r3, #1
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	3b01      	subs	r3, #1
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8007500:	e012      	b.n	8007528 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007502:	f7fd ff55 	bl	80053b0 <HAL_GetTick>
 8007506:	0002      	movs	r2, r0
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	429a      	cmp	r2, r3
 8007510:	d802      	bhi.n	8007518 <HAL_SPI_Transmit+0x22c>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	3301      	adds	r3, #1
 8007516:	d102      	bne.n	800751e <HAL_SPI_Transmit+0x232>
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d104      	bne.n	8007528 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 800751e:	231f      	movs	r3, #31
 8007520:	18fb      	adds	r3, r7, r3
 8007522:	2203      	movs	r2, #3
 8007524:	701a      	strb	r2, [r3, #0]
          goto error;
 8007526:	e028      	b.n	800757a <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800752c:	b29b      	uxth	r3, r3
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1cc      	bne.n	80074cc <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007532:	69ba      	ldr	r2, [r7, #24]
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	0018      	movs	r0, r3
 800753a:	f001 f80f 	bl	800855c <SPI_EndRxTxTransaction>
 800753e:	1e03      	subs	r3, r0, #0
 8007540:	d002      	beq.n	8007548 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2220      	movs	r2, #32
 8007546:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10a      	bne.n	8007566 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007550:	2300      	movs	r3, #0
 8007552:	613b      	str	r3, [r7, #16]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	613b      	str	r3, [r7, #16]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	613b      	str	r3, [r7, #16]
 8007564:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800756a:	2b00      	cmp	r3, #0
 800756c:	d004      	beq.n	8007578 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 800756e:	231f      	movs	r3, #31
 8007570:	18fb      	adds	r3, r7, r3
 8007572:	2201      	movs	r2, #1
 8007574:	701a      	strb	r2, [r3, #0]
 8007576:	e000      	b.n	800757a <HAL_SPI_Transmit+0x28e>
  }

error:
 8007578:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2251      	movs	r2, #81	; 0x51
 800757e:	2101      	movs	r1, #1
 8007580:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2250      	movs	r2, #80	; 0x50
 8007586:	2100      	movs	r1, #0
 8007588:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800758a:	231f      	movs	r3, #31
 800758c:	18fb      	adds	r3, r7, r3
 800758e:	781b      	ldrb	r3, [r3, #0]
}
 8007590:	0018      	movs	r0, r3
 8007592:	46bd      	mov	sp, r7
 8007594:	b008      	add	sp, #32
 8007596:	bd80      	pop	{r7, pc}

08007598 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007598:	b590      	push	{r4, r7, lr}
 800759a:	b089      	sub	sp, #36	; 0x24
 800759c:	af02      	add	r7, sp, #8
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	603b      	str	r3, [r7, #0]
 80075a4:	1dbb      	adds	r3, r7, #6
 80075a6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80075a8:	2317      	movs	r3, #23
 80075aa:	18fb      	adds	r3, r7, r3
 80075ac:	2200      	movs	r2, #0
 80075ae:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	685a      	ldr	r2, [r3, #4]
 80075b4:	2382      	movs	r3, #130	; 0x82
 80075b6:	005b      	lsls	r3, r3, #1
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d113      	bne.n	80075e4 <HAL_SPI_Receive+0x4c>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10f      	bne.n	80075e4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2251      	movs	r2, #81	; 0x51
 80075c8:	2104      	movs	r1, #4
 80075ca:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80075cc:	1dbb      	adds	r3, r7, #6
 80075ce:	881c      	ldrh	r4, [r3, #0]
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	68b9      	ldr	r1, [r7, #8]
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	0023      	movs	r3, r4
 80075dc:	f000 f902 	bl	80077e4 <HAL_SPI_TransmitReceive>
 80075e0:	0003      	movs	r3, r0
 80075e2:	e0f9      	b.n	80077d8 <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2250      	movs	r2, #80	; 0x50
 80075e8:	5c9b      	ldrb	r3, [r3, r2]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d101      	bne.n	80075f2 <HAL_SPI_Receive+0x5a>
 80075ee:	2302      	movs	r3, #2
 80075f0:	e0f2      	b.n	80077d8 <HAL_SPI_Receive+0x240>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2250      	movs	r2, #80	; 0x50
 80075f6:	2101      	movs	r1, #1
 80075f8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075fa:	f7fd fed9 	bl	80053b0 <HAL_GetTick>
 80075fe:	0003      	movs	r3, r0
 8007600:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2251      	movs	r2, #81	; 0x51
 8007606:	5c9b      	ldrb	r3, [r3, r2]
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b01      	cmp	r3, #1
 800760c:	d004      	beq.n	8007618 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800760e:	2317      	movs	r3, #23
 8007610:	18fb      	adds	r3, r7, r3
 8007612:	2202      	movs	r2, #2
 8007614:	701a      	strb	r2, [r3, #0]
    goto error;
 8007616:	e0d4      	b.n	80077c2 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d003      	beq.n	8007626 <HAL_SPI_Receive+0x8e>
 800761e:	1dbb      	adds	r3, r7, #6
 8007620:	881b      	ldrh	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d104      	bne.n	8007630 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8007626:	2317      	movs	r3, #23
 8007628:	18fb      	adds	r3, r7, r3
 800762a:	2201      	movs	r2, #1
 800762c:	701a      	strb	r2, [r3, #0]
    goto error;
 800762e:	e0c8      	b.n	80077c2 <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2251      	movs	r2, #81	; 0x51
 8007634:	2104      	movs	r1, #4
 8007636:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	1dba      	adds	r2, r7, #6
 8007648:	8812      	ldrh	r2, [r2, #0]
 800764a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	1dba      	adds	r2, r7, #6
 8007650:	8812      	ldrh	r2, [r2, #0]
 8007652:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	689a      	ldr	r2, [r3, #8]
 8007676:	2380      	movs	r3, #128	; 0x80
 8007678:	021b      	lsls	r3, r3, #8
 800767a:	429a      	cmp	r2, r3
 800767c:	d10f      	bne.n	800769e <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2140      	movs	r1, #64	; 0x40
 800768a:	438a      	bics	r2, r1
 800768c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4951      	ldr	r1, [pc, #324]	; (80077e0 <HAL_SPI_Receive+0x248>)
 800769a:	400a      	ands	r2, r1
 800769c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2240      	movs	r2, #64	; 0x40
 80076a6:	4013      	ands	r3, r2
 80076a8:	2b40      	cmp	r3, #64	; 0x40
 80076aa:	d007      	beq.n	80076bc <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2140      	movs	r1, #64	; 0x40
 80076b8:	430a      	orrs	r2, r1
 80076ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d164      	bne.n	800778e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80076c4:	e02f      	b.n	8007726 <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	2201      	movs	r2, #1
 80076ce:	4013      	ands	r3, r2
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d115      	bne.n	8007700 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	330c      	adds	r3, #12
 80076da:	001a      	movs	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e0:	7812      	ldrb	r2, [r2, #0]
 80076e2:	b2d2      	uxtb	r2, r2
 80076e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ea:	1c5a      	adds	r2, r3, #1
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	3b01      	subs	r3, #1
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076fe:	e012      	b.n	8007726 <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007700:	f7fd fe56 	bl	80053b0 <HAL_GetTick>
 8007704:	0002      	movs	r2, r0
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	429a      	cmp	r2, r3
 800770e:	d802      	bhi.n	8007716 <HAL_SPI_Receive+0x17e>
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	3301      	adds	r3, #1
 8007714:	d102      	bne.n	800771c <HAL_SPI_Receive+0x184>
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d104      	bne.n	8007726 <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 800771c:	2317      	movs	r3, #23
 800771e:	18fb      	adds	r3, r7, r3
 8007720:	2203      	movs	r2, #3
 8007722:	701a      	strb	r2, [r3, #0]
          goto error;
 8007724:	e04d      	b.n	80077c2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800772a:	b29b      	uxth	r3, r3
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1ca      	bne.n	80076c6 <HAL_SPI_Receive+0x12e>
 8007730:	e032      	b.n	8007798 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	2201      	movs	r2, #1
 800773a:	4013      	ands	r3, r2
 800773c:	2b01      	cmp	r3, #1
 800773e:	d113      	bne.n	8007768 <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68da      	ldr	r2, [r3, #12]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800774a:	b292      	uxth	r2, r2
 800774c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007752:	1c9a      	adds	r2, r3, #2
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800775c:	b29b      	uxth	r3, r3
 800775e:	3b01      	subs	r3, #1
 8007760:	b29a      	uxth	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007766:	e012      	b.n	800778e <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007768:	f7fd fe22 	bl	80053b0 <HAL_GetTick>
 800776c:	0002      	movs	r2, r0
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	429a      	cmp	r2, r3
 8007776:	d802      	bhi.n	800777e <HAL_SPI_Receive+0x1e6>
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	3301      	adds	r3, #1
 800777c:	d102      	bne.n	8007784 <HAL_SPI_Receive+0x1ec>
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d104      	bne.n	800778e <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 8007784:	2317      	movs	r3, #23
 8007786:	18fb      	adds	r3, r7, r3
 8007788:	2203      	movs	r2, #3
 800778a:	701a      	strb	r2, [r3, #0]
          goto error;
 800778c:	e019      	b.n	80077c2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007792:	b29b      	uxth	r3, r3
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1cc      	bne.n	8007732 <HAL_SPI_Receive+0x19a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007798:	693a      	ldr	r2, [r7, #16]
 800779a:	6839      	ldr	r1, [r7, #0]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	0018      	movs	r0, r3
 80077a0:	f000 fe72 	bl	8008488 <SPI_EndRxTransaction>
 80077a4:	1e03      	subs	r3, r0, #0
 80077a6:	d002      	beq.n	80077ae <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2220      	movs	r2, #32
 80077ac:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d004      	beq.n	80077c0 <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 80077b6:	2317      	movs	r3, #23
 80077b8:	18fb      	adds	r3, r7, r3
 80077ba:	2201      	movs	r2, #1
 80077bc:	701a      	strb	r2, [r3, #0]
 80077be:	e000      	b.n	80077c2 <HAL_SPI_Receive+0x22a>
  }

error :
 80077c0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2251      	movs	r2, #81	; 0x51
 80077c6:	2101      	movs	r1, #1
 80077c8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2250      	movs	r2, #80	; 0x50
 80077ce:	2100      	movs	r1, #0
 80077d0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80077d2:	2317      	movs	r3, #23
 80077d4:	18fb      	adds	r3, r7, r3
 80077d6:	781b      	ldrb	r3, [r3, #0]
}
 80077d8:	0018      	movs	r0, r3
 80077da:	46bd      	mov	sp, r7
 80077dc:	b007      	add	sp, #28
 80077de:	bd90      	pop	{r4, r7, pc}
 80077e0:	ffffbfff 	.word	0xffffbfff

080077e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b08c      	sub	sp, #48	; 0x30
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
 80077f0:	001a      	movs	r2, r3
 80077f2:	1cbb      	adds	r3, r7, #2
 80077f4:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80077f6:	2301      	movs	r3, #1
 80077f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80077fa:	232b      	movs	r3, #43	; 0x2b
 80077fc:	18fb      	adds	r3, r7, r3
 80077fe:	2200      	movs	r2, #0
 8007800:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2250      	movs	r2, #80	; 0x50
 8007806:	5c9b      	ldrb	r3, [r3, r2]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d101      	bne.n	8007810 <HAL_SPI_TransmitReceive+0x2c>
 800780c:	2302      	movs	r3, #2
 800780e:	e1a1      	b.n	8007b54 <HAL_SPI_TransmitReceive+0x370>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2250      	movs	r2, #80	; 0x50
 8007814:	2101      	movs	r1, #1
 8007816:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007818:	f7fd fdca 	bl	80053b0 <HAL_GetTick>
 800781c:	0003      	movs	r3, r0
 800781e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007820:	2023      	movs	r0, #35	; 0x23
 8007822:	183b      	adds	r3, r7, r0
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	2151      	movs	r1, #81	; 0x51
 8007828:	5c52      	ldrb	r2, [r2, r1]
 800782a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007832:	231a      	movs	r3, #26
 8007834:	18fb      	adds	r3, r7, r3
 8007836:	1cba      	adds	r2, r7, #2
 8007838:	8812      	ldrh	r2, [r2, #0]
 800783a:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800783c:	183b      	adds	r3, r7, r0
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d012      	beq.n	800786a <HAL_SPI_TransmitReceive+0x86>
 8007844:	69fa      	ldr	r2, [r7, #28]
 8007846:	2382      	movs	r3, #130	; 0x82
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	429a      	cmp	r2, r3
 800784c:	d108      	bne.n	8007860 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d104      	bne.n	8007860 <HAL_SPI_TransmitReceive+0x7c>
 8007856:	2323      	movs	r3, #35	; 0x23
 8007858:	18fb      	adds	r3, r7, r3
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	2b04      	cmp	r3, #4
 800785e:	d004      	beq.n	800786a <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8007860:	232b      	movs	r3, #43	; 0x2b
 8007862:	18fb      	adds	r3, r7, r3
 8007864:	2202      	movs	r2, #2
 8007866:	701a      	strb	r2, [r3, #0]
    goto error;
 8007868:	e169      	b.n	8007b3e <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d006      	beq.n	800787e <HAL_SPI_TransmitReceive+0x9a>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d003      	beq.n	800787e <HAL_SPI_TransmitReceive+0x9a>
 8007876:	1cbb      	adds	r3, r7, #2
 8007878:	881b      	ldrh	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d104      	bne.n	8007888 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 800787e:	232b      	movs	r3, #43	; 0x2b
 8007880:	18fb      	adds	r3, r7, r3
 8007882:	2201      	movs	r2, #1
 8007884:	701a      	strb	r2, [r3, #0]
    goto error;
 8007886:	e15a      	b.n	8007b3e <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2251      	movs	r2, #81	; 0x51
 800788c:	5c9b      	ldrb	r3, [r3, r2]
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b04      	cmp	r3, #4
 8007892:	d003      	beq.n	800789c <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2251      	movs	r2, #81	; 0x51
 8007898:	2105      	movs	r1, #5
 800789a:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	1cba      	adds	r2, r7, #2
 80078ac:	8812      	ldrh	r2, [r2, #0]
 80078ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	1cba      	adds	r2, r7, #2
 80078b4:	8812      	ldrh	r2, [r2, #0]
 80078b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	1cba      	adds	r2, r7, #2
 80078c2:	8812      	ldrh	r2, [r2, #0]
 80078c4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	1cba      	adds	r2, r7, #2
 80078ca:	8812      	ldrh	r2, [r2, #0]
 80078cc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2240      	movs	r2, #64	; 0x40
 80078e2:	4013      	ands	r3, r2
 80078e4:	2b40      	cmp	r3, #64	; 0x40
 80078e6:	d007      	beq.n	80078f8 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2140      	movs	r1, #64	; 0x40
 80078f4:	430a      	orrs	r2, r1
 80078f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	68da      	ldr	r2, [r3, #12]
 80078fc:	2380      	movs	r3, #128	; 0x80
 80078fe:	011b      	lsls	r3, r3, #4
 8007900:	429a      	cmp	r2, r3
 8007902:	d000      	beq.n	8007906 <HAL_SPI_TransmitReceive+0x122>
 8007904:	e07a      	b.n	80079fc <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d004      	beq.n	8007918 <HAL_SPI_TransmitReceive+0x134>
 800790e:	231a      	movs	r3, #26
 8007910:	18fb      	adds	r3, r7, r3
 8007912:	881b      	ldrh	r3, [r3, #0]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d166      	bne.n	80079e6 <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791c:	881a      	ldrh	r2, [r3, #0]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007928:	1c9a      	adds	r2, r3, #2
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007932:	b29b      	uxth	r3, r3
 8007934:	3b01      	subs	r3, #1
 8007936:	b29a      	uxth	r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800793c:	e053      	b.n	80079e6 <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	2202      	movs	r2, #2
 8007946:	4013      	ands	r3, r2
 8007948:	2b02      	cmp	r3, #2
 800794a:	d11b      	bne.n	8007984 <HAL_SPI_TransmitReceive+0x1a0>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007950:	b29b      	uxth	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d016      	beq.n	8007984 <HAL_SPI_TransmitReceive+0x1a0>
 8007956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007958:	2b01      	cmp	r3, #1
 800795a:	d113      	bne.n	8007984 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007960:	881a      	ldrh	r2, [r3, #0]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796c:	1c9a      	adds	r2, r3, #2
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007976:	b29b      	uxth	r3, r3
 8007978:	3b01      	subs	r3, #1
 800797a:	b29a      	uxth	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007980:	2300      	movs	r3, #0
 8007982:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	2201      	movs	r2, #1
 800798c:	4013      	ands	r3, r2
 800798e:	2b01      	cmp	r3, #1
 8007990:	d119      	bne.n	80079c6 <HAL_SPI_TransmitReceive+0x1e2>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007996:	b29b      	uxth	r3, r3
 8007998:	2b00      	cmp	r3, #0
 800799a:	d014      	beq.n	80079c6 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68da      	ldr	r2, [r3, #12]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a6:	b292      	uxth	r2, r2
 80079a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ae:	1c9a      	adds	r2, r3, #2
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	3b01      	subs	r3, #1
 80079bc:	b29a      	uxth	r2, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079c2:	2301      	movs	r3, #1
 80079c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80079c6:	f7fd fcf3 	bl	80053b0 <HAL_GetTick>
 80079ca:	0002      	movs	r2, r0
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d807      	bhi.n	80079e6 <HAL_SPI_TransmitReceive+0x202>
 80079d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d8:	3301      	adds	r3, #1
 80079da:	d004      	beq.n	80079e6 <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 80079dc:	232b      	movs	r3, #43	; 0x2b
 80079de:	18fb      	adds	r3, r7, r3
 80079e0:	2203      	movs	r2, #3
 80079e2:	701a      	strb	r2, [r3, #0]
        goto error;
 80079e4:	e0ab      	b.n	8007b3e <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1a6      	bne.n	800793e <HAL_SPI_TransmitReceive+0x15a>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1a1      	bne.n	800793e <HAL_SPI_TransmitReceive+0x15a>
 80079fa:	e07f      	b.n	8007afc <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d005      	beq.n	8007a10 <HAL_SPI_TransmitReceive+0x22c>
 8007a04:	231a      	movs	r3, #26
 8007a06:	18fb      	adds	r3, r7, r3
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d000      	beq.n	8007a10 <HAL_SPI_TransmitReceive+0x22c>
 8007a0e:	e06b      	b.n	8007ae8 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	330c      	adds	r3, #12
 8007a1a:	7812      	ldrb	r2, [r2, #0]
 8007a1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a22:	1c5a      	adds	r2, r3, #1
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a36:	e057      	b.n	8007ae8 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	2202      	movs	r2, #2
 8007a40:	4013      	ands	r3, r2
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d11c      	bne.n	8007a80 <HAL_SPI_TransmitReceive+0x29c>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d017      	beq.n	8007a80 <HAL_SPI_TransmitReceive+0x29c>
 8007a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d114      	bne.n	8007a80 <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	330c      	adds	r3, #12
 8007a60:	7812      	ldrb	r2, [r2, #0]
 8007a62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a68:	1c5a      	adds	r2, r3, #1
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	3b01      	subs	r3, #1
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	2201      	movs	r2, #1
 8007a88:	4013      	ands	r3, r2
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d119      	bne.n	8007ac2 <HAL_SPI_TransmitReceive+0x2de>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d014      	beq.n	8007ac2 <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68da      	ldr	r2, [r3, #12]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa2:	b2d2      	uxtb	r2, r2
 8007aa4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aaa:	1c5a      	adds	r2, r3, #1
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007ac2:	f7fd fc75 	bl	80053b0 <HAL_GetTick>
 8007ac6:	0002      	movs	r2, r0
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d802      	bhi.n	8007ad8 <HAL_SPI_TransmitReceive+0x2f4>
 8007ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	d102      	bne.n	8007ade <HAL_SPI_TransmitReceive+0x2fa>
 8007ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d104      	bne.n	8007ae8 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 8007ade:	232b      	movs	r3, #43	; 0x2b
 8007ae0:	18fb      	adds	r3, r7, r3
 8007ae2:	2203      	movs	r2, #3
 8007ae4:	701a      	strb	r2, [r3, #0]
        goto error;
 8007ae6:	e02a      	b.n	8007b3e <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1a2      	bne.n	8007a38 <HAL_SPI_TransmitReceive+0x254>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d19d      	bne.n	8007a38 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007afe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	0018      	movs	r0, r3
 8007b04:	f000 fd2a 	bl	800855c <SPI_EndRxTxTransaction>
 8007b08:	1e03      	subs	r3, r0, #0
 8007b0a:	d007      	beq.n	8007b1c <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 8007b0c:	232b      	movs	r3, #43	; 0x2b
 8007b0e:	18fb      	adds	r3, r7, r3
 8007b10:	2201      	movs	r2, #1
 8007b12:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2220      	movs	r2, #32
 8007b18:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007b1a:	e010      	b.n	8007b3e <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10b      	bne.n	8007b3c <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b24:	2300      	movs	r3, #0
 8007b26:	617b      	str	r3, [r7, #20]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	617b      	str	r3, [r7, #20]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	617b      	str	r3, [r7, #20]
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	e000      	b.n	8007b3e <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 8007b3c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2251      	movs	r2, #81	; 0x51
 8007b42:	2101      	movs	r1, #1
 8007b44:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2250      	movs	r2, #80	; 0x50
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007b4e:	232b      	movs	r3, #43	; 0x2b
 8007b50:	18fb      	adds	r3, r7, r3
 8007b52:	781b      	ldrb	r3, [r3, #0]
}
 8007b54:	0018      	movs	r0, r3
 8007b56:	46bd      	mov	sp, r7
 8007b58:	b00c      	add	sp, #48	; 0x30
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	1dbb      	adds	r3, r7, #6
 8007b68:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b6a:	2317      	movs	r3, #23
 8007b6c:	18fb      	adds	r3, r7, r3
 8007b6e:	2200      	movs	r2, #0
 8007b70:	701a      	strb	r2, [r3, #0]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d112      	bne.n	8007ba0 <HAL_SPI_Receive_DMA+0x44>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	685a      	ldr	r2, [r3, #4]
 8007b7e:	2382      	movs	r3, #130	; 0x82
 8007b80:	005b      	lsls	r3, r3, #1
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d10c      	bne.n	8007ba0 <HAL_SPI_Receive_DMA+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2251      	movs	r2, #81	; 0x51
 8007b8a:	2104      	movs	r1, #4
 8007b8c:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8007b8e:	1dbb      	adds	r3, r7, #6
 8007b90:	881b      	ldrh	r3, [r3, #0]
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	68b9      	ldr	r1, [r7, #8]
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f000 f8ba 	bl	8007d10 <HAL_SPI_TransmitReceive_DMA>
 8007b9c:	0003      	movs	r3, r0
 8007b9e:	e0aa      	b.n	8007cf6 <HAL_SPI_Receive_DMA+0x19a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2250      	movs	r2, #80	; 0x50
 8007ba4:	5c9b      	ldrb	r3, [r3, r2]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d101      	bne.n	8007bae <HAL_SPI_Receive_DMA+0x52>
 8007baa:	2302      	movs	r3, #2
 8007bac:	e0a3      	b.n	8007cf6 <HAL_SPI_Receive_DMA+0x19a>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2250      	movs	r2, #80	; 0x50
 8007bb2:	2101      	movs	r1, #1
 8007bb4:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2251      	movs	r2, #81	; 0x51
 8007bba:	5c9b      	ldrb	r3, [r3, r2]
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d004      	beq.n	8007bcc <HAL_SPI_Receive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8007bc2:	2317      	movs	r3, #23
 8007bc4:	18fb      	adds	r3, r7, r3
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	701a      	strb	r2, [r3, #0]
    goto error;
 8007bca:	e08d      	b.n	8007ce8 <HAL_SPI_Receive_DMA+0x18c>
  }

  if ((pData == NULL) || (Size == 0U))
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <HAL_SPI_Receive_DMA+0x7e>
 8007bd2:	1dbb      	adds	r3, r7, #6
 8007bd4:	881b      	ldrh	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d104      	bne.n	8007be4 <HAL_SPI_Receive_DMA+0x88>
  {
    errorcode = HAL_ERROR;
 8007bda:	2317      	movs	r3, #23
 8007bdc:	18fb      	adds	r3, r7, r3
 8007bde:	2201      	movs	r2, #1
 8007be0:	701a      	strb	r2, [r3, #0]
    goto error;
 8007be2:	e081      	b.n	8007ce8 <HAL_SPI_Receive_DMA+0x18c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2251      	movs	r2, #81	; 0x51
 8007be8:	2104      	movs	r1, #4
 8007bea:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	1dba      	adds	r2, r7, #6
 8007bfc:	8812      	ldrh	r2, [r2, #0]
 8007bfe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	1dba      	adds	r2, r7, #6
 8007c04:	8812      	ldrh	r2, [r2, #0]
 8007c06:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	689a      	ldr	r2, [r3, #8]
 8007c24:	2380      	movs	r3, #128	; 0x80
 8007c26:	021b      	lsls	r3, r3, #8
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d10f      	bne.n	8007c4c <HAL_SPI_Receive_DMA+0xf0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2140      	movs	r1, #64	; 0x40
 8007c38:	438a      	bics	r2, r1
 8007c3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	492e      	ldr	r1, [pc, #184]	; (8007d00 <HAL_SPI_Receive_DMA+0x1a4>)
 8007c48:	400a      	ands	r2, r1
 8007c4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c50:	4a2c      	ldr	r2, [pc, #176]	; (8007d04 <HAL_SPI_Receive_DMA+0x1a8>)
 8007c52:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c58:	4a2b      	ldr	r2, [pc, #172]	; (8007d08 <HAL_SPI_Receive_DMA+0x1ac>)
 8007c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c60:	4a2a      	ldr	r2, [pc, #168]	; (8007d0c <HAL_SPI_Receive_DMA+0x1b0>)
 8007c62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c68:	2200      	movs	r2, #0
 8007c6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	330c      	adds	r3, #12
 8007c76:	0019      	movs	r1, r3
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7c:	001a      	movs	r2, r3
                                 hspi->RxXferCount))
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c82:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007c84:	f7fd fd5f 	bl	8005746 <HAL_DMA_Start_IT>
 8007c88:	1e03      	subs	r3, r0, #0
 8007c8a:	d00e      	beq.n	8007caa <HAL_SPI_Receive_DMA+0x14e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c90:	2210      	movs	r2, #16
 8007c92:	431a      	orrs	r2, r3
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007c98:	2317      	movs	r3, #23
 8007c9a:	18fb      	adds	r3, r7, r3
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2251      	movs	r2, #81	; 0x51
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	5499      	strb	r1, [r3, r2]
    goto error;
 8007ca8:	e01e      	b.n	8007ce8 <HAL_SPI_Receive_DMA+0x18c>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2240      	movs	r2, #64	; 0x40
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	2b40      	cmp	r3, #64	; 0x40
 8007cb6:	d007      	beq.n	8007cc8 <HAL_SPI_Receive_DMA+0x16c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2140      	movs	r1, #64	; 0x40
 8007cc4:	430a      	orrs	r2, r1
 8007cc6:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2120      	movs	r1, #32
 8007cd4:	430a      	orrs	r2, r1
 8007cd6:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	685a      	ldr	r2, [r3, #4]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2101      	movs	r1, #1
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2250      	movs	r2, #80	; 0x50
 8007cec:	2100      	movs	r1, #0
 8007cee:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007cf0:	2317      	movs	r3, #23
 8007cf2:	18fb      	adds	r3, r7, r3
 8007cf4:	781b      	ldrb	r3, [r3, #0]
}
 8007cf6:	0018      	movs	r0, r3
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	b006      	add	sp, #24
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	46c0      	nop			; (mov r8, r8)
 8007d00:	ffffbfff 	.word	0xffffbfff
 8007d04:	080082c3 	.word	0x080082c3
 8007d08:	08008181 	.word	0x08008181
 8007d0c:	080082ff 	.word	0x080082ff

08007d10 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
 8007d1c:	001a      	movs	r2, r3
 8007d1e:	1cbb      	adds	r3, r7, #2
 8007d20:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007d22:	2317      	movs	r3, #23
 8007d24:	18fb      	adds	r3, r7, r3
 8007d26:	2200      	movs	r2, #0
 8007d28:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2250      	movs	r2, #80	; 0x50
 8007d2e:	5c9b      	ldrb	r3, [r3, r2]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d101      	bne.n	8007d38 <HAL_SPI_TransmitReceive_DMA+0x28>
 8007d34:	2302      	movs	r3, #2
 8007d36:	e0f6      	b.n	8007f26 <HAL_SPI_TransmitReceive_DMA+0x216>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2250      	movs	r2, #80	; 0x50
 8007d3c:	2101      	movs	r1, #1
 8007d3e:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d40:	2016      	movs	r0, #22
 8007d42:	183b      	adds	r3, r7, r0
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	2151      	movs	r1, #81	; 0x51
 8007d48:	5c52      	ldrb	r2, [r2, r1]
 8007d4a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007d52:	183b      	adds	r3, r7, r0
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d012      	beq.n	8007d80 <HAL_SPI_TransmitReceive_DMA+0x70>
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	2382      	movs	r3, #130	; 0x82
 8007d5e:	005b      	lsls	r3, r3, #1
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d108      	bne.n	8007d76 <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d104      	bne.n	8007d76 <HAL_SPI_TransmitReceive_DMA+0x66>
 8007d6c:	2316      	movs	r3, #22
 8007d6e:	18fb      	adds	r3, r7, r3
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	2b04      	cmp	r3, #4
 8007d74:	d004      	beq.n	8007d80 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8007d76:	2317      	movs	r3, #23
 8007d78:	18fb      	adds	r3, r7, r3
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	701a      	strb	r2, [r3, #0]
    goto error;
 8007d7e:	e0cb      	b.n	8007f18 <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d006      	beq.n	8007d94 <HAL_SPI_TransmitReceive_DMA+0x84>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <HAL_SPI_TransmitReceive_DMA+0x84>
 8007d8c:	1cbb      	adds	r3, r7, #2
 8007d8e:	881b      	ldrh	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d104      	bne.n	8007d9e <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 8007d94:	2317      	movs	r3, #23
 8007d96:	18fb      	adds	r3, r7, r3
 8007d98:	2201      	movs	r2, #1
 8007d9a:	701a      	strb	r2, [r3, #0]
    goto error;
 8007d9c:	e0bc      	b.n	8007f18 <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2251      	movs	r2, #81	; 0x51
 8007da2:	5c9b      	ldrb	r3, [r3, r2]
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b04      	cmp	r3, #4
 8007da8:	d003      	beq.n	8007db2 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2251      	movs	r2, #81	; 0x51
 8007dae:	2105      	movs	r1, #5
 8007db0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2200      	movs	r2, #0
 8007db6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	1cba      	adds	r2, r7, #2
 8007dc2:	8812      	ldrh	r2, [r2, #0]
 8007dc4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	1cba      	adds	r2, r7, #2
 8007dca:	8812      	ldrh	r2, [r2, #0]
 8007dcc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	1cba      	adds	r2, r7, #2
 8007dd8:	8812      	ldrh	r2, [r2, #0]
 8007dda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	1cba      	adds	r2, r7, #2
 8007de0:	8812      	ldrh	r2, [r2, #0]
 8007de2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2200      	movs	r2, #0
 8007de8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2251      	movs	r2, #81	; 0x51
 8007df4:	5c9b      	ldrb	r3, [r3, r2]
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b04      	cmp	r3, #4
 8007dfa:	d108      	bne.n	8007e0e <HAL_SPI_TransmitReceive_DMA+0xfe>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e00:	4a4b      	ldr	r2, [pc, #300]	; (8007f30 <HAL_SPI_TransmitReceive_DMA+0x220>)
 8007e02:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e08:	4a4a      	ldr	r2, [pc, #296]	; (8007f34 <HAL_SPI_TransmitReceive_DMA+0x224>)
 8007e0a:	62da      	str	r2, [r3, #44]	; 0x2c
 8007e0c:	e007      	b.n	8007e1e <HAL_SPI_TransmitReceive_DMA+0x10e>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e12:	4a49      	ldr	r2, [pc, #292]	; (8007f38 <HAL_SPI_TransmitReceive_DMA+0x228>)
 8007e14:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e1a:	4a48      	ldr	r2, [pc, #288]	; (8007f3c <HAL_SPI_TransmitReceive_DMA+0x22c>)
 8007e1c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e22:	4a47      	ldr	r2, [pc, #284]	; (8007f40 <HAL_SPI_TransmitReceive_DMA+0x230>)
 8007e24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	330c      	adds	r3, #12
 8007e38:	0019      	movs	r1, r3
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3e:	001a      	movs	r2, r3
                                 hspi->RxXferCount))
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e44:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007e46:	f7fd fc7e 	bl	8005746 <HAL_DMA_Start_IT>
 8007e4a:	1e03      	subs	r3, r0, #0
 8007e4c:	d00e      	beq.n	8007e6c <HAL_SPI_TransmitReceive_DMA+0x15c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e52:	2210      	movs	r2, #16
 8007e54:	431a      	orrs	r2, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007e5a:	2317      	movs	r3, #23
 8007e5c:	18fb      	adds	r3, r7, r3
 8007e5e:	2201      	movs	r2, #1
 8007e60:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2251      	movs	r2, #81	; 0x51
 8007e66:	2101      	movs	r1, #1
 8007e68:	5499      	strb	r1, [r3, r2]
    goto error;
 8007e6a:	e055      	b.n	8007f18 <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2101      	movs	r1, #1
 8007e78:	430a      	orrs	r2, r1
 8007e7a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e80:	2200      	movs	r2, #0
 8007e82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e88:	2200      	movs	r2, #0
 8007e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e90:	2200      	movs	r2, #0
 8007e92:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e98:	2200      	movs	r2, #0
 8007e9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea4:	0019      	movs	r1, r3
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	330c      	adds	r3, #12
 8007eac:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eb2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007eb4:	f7fd fc47 	bl	8005746 <HAL_DMA_Start_IT>
 8007eb8:	1e03      	subs	r3, r0, #0
 8007eba:	d00e      	beq.n	8007eda <HAL_SPI_TransmitReceive_DMA+0x1ca>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec0:	2210      	movs	r2, #16
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007ec8:	2317      	movs	r3, #23
 8007eca:	18fb      	adds	r3, r7, r3
 8007ecc:	2201      	movs	r2, #1
 8007ece:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2251      	movs	r2, #81	; 0x51
 8007ed4:	2101      	movs	r1, #1
 8007ed6:	5499      	strb	r1, [r3, r2]
    goto error;
 8007ed8:	e01e      	b.n	8007f18 <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2240      	movs	r2, #64	; 0x40
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	2b40      	cmp	r3, #64	; 0x40
 8007ee6:	d007      	beq.n	8007ef8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2140      	movs	r1, #64	; 0x40
 8007ef4:	430a      	orrs	r2, r1
 8007ef6:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	685a      	ldr	r2, [r3, #4]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2120      	movs	r1, #32
 8007f04:	430a      	orrs	r2, r1
 8007f06:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2102      	movs	r1, #2
 8007f14:	430a      	orrs	r2, r1
 8007f16:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2250      	movs	r2, #80	; 0x50
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007f20:	2317      	movs	r3, #23
 8007f22:	18fb      	adds	r3, r7, r3
 8007f24:	781b      	ldrb	r3, [r3, #0]
}
 8007f26:	0018      	movs	r0, r3
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	b006      	add	sp, #24
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	46c0      	nop			; (mov r8, r8)
 8007f30:	080082c3 	.word	0x080082c3
 8007f34:	08008181 	.word	0x08008181
 8007f38:	080082e1 	.word	0x080082e1
 8007f3c:	0800822f 	.word	0x0800822f
 8007f40:	080082ff 	.word	0x080082ff

08007f44 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b088      	sub	sp, #32
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	099b      	lsrs	r3, r3, #6
 8007f60:	001a      	movs	r2, r3
 8007f62:	2301      	movs	r3, #1
 8007f64:	4013      	ands	r3, r2
 8007f66:	d10f      	bne.n	8007f88 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007f6e:	d00b      	beq.n	8007f88 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	099b      	lsrs	r3, r3, #6
 8007f74:	001a      	movs	r2, r3
 8007f76:	2301      	movs	r3, #1
 8007f78:	4013      	ands	r3, r2
 8007f7a:	d005      	beq.n	8007f88 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	0010      	movs	r0, r2
 8007f84:	4798      	blx	r3
    return;
 8007f86:	e0d6      	b.n	8008136 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	085b      	lsrs	r3, r3, #1
 8007f8c:	001a      	movs	r2, r3
 8007f8e:	2301      	movs	r3, #1
 8007f90:	4013      	ands	r3, r2
 8007f92:	d00b      	beq.n	8007fac <HAL_SPI_IRQHandler+0x68>
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	09db      	lsrs	r3, r3, #7
 8007f98:	001a      	movs	r2, r3
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	d005      	beq.n	8007fac <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	0010      	movs	r0, r2
 8007fa8:	4798      	blx	r3
    return;
 8007faa:	e0c4      	b.n	8008136 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	095b      	lsrs	r3, r3, #5
 8007fb0:	001a      	movs	r2, r3
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	d10c      	bne.n	8007fd2 <HAL_SPI_IRQHandler+0x8e>
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	099b      	lsrs	r3, r3, #6
 8007fbc:	001a      	movs	r2, r3
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	d106      	bne.n	8007fd2 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	0a1b      	lsrs	r3, r3, #8
 8007fc8:	001a      	movs	r2, r3
 8007fca:	2301      	movs	r3, #1
 8007fcc:	4013      	ands	r3, r2
 8007fce:	d100      	bne.n	8007fd2 <HAL_SPI_IRQHandler+0x8e>
 8007fd0:	e0b1      	b.n	8008136 <HAL_SPI_IRQHandler+0x1f2>
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	095b      	lsrs	r3, r3, #5
 8007fd6:	001a      	movs	r2, r3
 8007fd8:	2301      	movs	r3, #1
 8007fda:	4013      	ands	r3, r2
 8007fdc:	d100      	bne.n	8007fe0 <HAL_SPI_IRQHandler+0x9c>
 8007fde:	e0aa      	b.n	8008136 <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	099b      	lsrs	r3, r3, #6
 8007fe4:	001a      	movs	r2, r3
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	4013      	ands	r3, r2
 8007fea:	d023      	beq.n	8008034 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2251      	movs	r2, #81	; 0x51
 8007ff0:	5c9b      	ldrb	r3, [r3, r2]
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b03      	cmp	r3, #3
 8007ff6:	d011      	beq.n	800801c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ffc:	2204      	movs	r2, #4
 8007ffe:	431a      	orrs	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008004:	2300      	movs	r3, #0
 8008006:	617b      	str	r3, [r7, #20]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	617b      	str	r3, [r7, #20]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	617b      	str	r3, [r7, #20]
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	e00b      	b.n	8008034 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800801c:	2300      	movs	r3, #0
 800801e:	613b      	str	r3, [r7, #16]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	613b      	str	r3, [r7, #16]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	613b      	str	r3, [r7, #16]
 8008030:	693b      	ldr	r3, [r7, #16]
        return;
 8008032:	e080      	b.n	8008136 <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	095b      	lsrs	r3, r3, #5
 8008038:	001a      	movs	r2, r3
 800803a:	2301      	movs	r3, #1
 800803c:	4013      	ands	r3, r2
 800803e:	d014      	beq.n	800806a <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008044:	2201      	movs	r2, #1
 8008046:	431a      	orrs	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800804c:	2300      	movs	r3, #0
 800804e:	60fb      	str	r3, [r7, #12]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	60fb      	str	r3, [r7, #12]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2140      	movs	r1, #64	; 0x40
 8008064:	438a      	bics	r2, r1
 8008066:	601a      	str	r2, [r3, #0]
 8008068:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	0a1b      	lsrs	r3, r3, #8
 800806e:	001a      	movs	r2, r3
 8008070:	2301      	movs	r3, #1
 8008072:	4013      	ands	r3, r2
 8008074:	d00c      	beq.n	8008090 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800807a:	2208      	movs	r2, #8
 800807c:	431a      	orrs	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008082:	2300      	movs	r3, #0
 8008084:	60bb      	str	r3, [r7, #8]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	60bb      	str	r3, [r7, #8]
 800808e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008094:	2b00      	cmp	r3, #0
 8008096:	d04d      	beq.n	8008134 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685a      	ldr	r2, [r3, #4]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	21e0      	movs	r1, #224	; 0xe0
 80080a4:	438a      	bics	r2, r1
 80080a6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2251      	movs	r2, #81	; 0x51
 80080ac:	2101      	movs	r1, #1
 80080ae:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	2202      	movs	r2, #2
 80080b4:	4013      	ands	r3, r2
 80080b6:	d103      	bne.n	80080c0 <HAL_SPI_IRQHandler+0x17c>
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	2201      	movs	r2, #1
 80080bc:	4013      	ands	r3, r2
 80080be:	d032      	beq.n	8008126 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	685a      	ldr	r2, [r3, #4]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2103      	movs	r1, #3
 80080cc:	438a      	bics	r2, r1
 80080ce:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d010      	beq.n	80080fa <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080dc:	4a17      	ldr	r2, [pc, #92]	; (800813c <HAL_SPI_IRQHandler+0x1f8>)
 80080de:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080e4:	0018      	movs	r0, r3
 80080e6:	f7fd fbd4 	bl	8005892 <HAL_DMA_Abort_IT>
 80080ea:	1e03      	subs	r3, r0, #0
 80080ec:	d005      	beq.n	80080fa <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f2:	2240      	movs	r2, #64	; 0x40
 80080f4:	431a      	orrs	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d016      	beq.n	8008130 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008106:	4a0d      	ldr	r2, [pc, #52]	; (800813c <HAL_SPI_IRQHandler+0x1f8>)
 8008108:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800810e:	0018      	movs	r0, r3
 8008110:	f7fd fbbf 	bl	8005892 <HAL_DMA_Abort_IT>
 8008114:	1e03      	subs	r3, r0, #0
 8008116:	d00b      	beq.n	8008130 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800811c:	2240      	movs	r2, #64	; 0x40
 800811e:	431a      	orrs	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8008124:	e004      	b.n	8008130 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	0018      	movs	r0, r3
 800812a:	f000 f821 	bl	8008170 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800812e:	e000      	b.n	8008132 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8008130:	46c0      	nop			; (mov r8, r8)
    return;
 8008132:	46c0      	nop			; (mov r8, r8)
 8008134:	46c0      	nop			; (mov r8, r8)
  }
}
 8008136:	46bd      	mov	sp, r7
 8008138:	b008      	add	sp, #32
 800813a:	bd80      	pop	{r7, pc}
 800813c:	08008341 	.word	0x08008341

08008140 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008148:	46c0      	nop			; (mov r8, r8)
 800814a:	46bd      	mov	sp, r7
 800814c:	b002      	add	sp, #8
 800814e:	bd80      	pop	{r7, pc}

08008150 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008158:	46c0      	nop			; (mov r8, r8)
 800815a:	46bd      	mov	sp, r7
 800815c:	b002      	add	sp, #8
 800815e:	bd80      	pop	{r7, pc}

08008160 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008168:	46c0      	nop			; (mov r8, r8)
 800816a:	46bd      	mov	sp, r7
 800816c:	b002      	add	sp, #8
 800816e:	bd80      	pop	{r7, pc}

08008170 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008178:	46c0      	nop			; (mov r8, r8)
 800817a:	46bd      	mov	sp, r7
 800817c:	b002      	add	sp, #8
 800817e:	bd80      	pop	{r7, pc}

08008180 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800818e:	f7fd f90f 	bl	80053b0 <HAL_GetTick>
 8008192:	0003      	movs	r3, r0
 8008194:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2220      	movs	r2, #32
 800819e:	4013      	ands	r3, r2
 80081a0:	2b20      	cmp	r3, #32
 80081a2:	d03d      	beq.n	8008220 <SPI_DMAReceiveCplt+0xa0>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	685a      	ldr	r2, [r3, #4]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2120      	movs	r1, #32
 80081b0:	438a      	bics	r2, r1
 80081b2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10e      	bne.n	80081da <SPI_DMAReceiveCplt+0x5a>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	685a      	ldr	r2, [r3, #4]
 80081c0:	2382      	movs	r3, #130	; 0x82
 80081c2:	005b      	lsls	r3, r3, #1
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d108      	bne.n	80081da <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	685a      	ldr	r2, [r3, #4]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2103      	movs	r1, #3
 80081d4:	438a      	bics	r2, r1
 80081d6:	605a      	str	r2, [r3, #4]
 80081d8:	e007      	b.n	80081ea <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	685a      	ldr	r2, [r3, #4]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2101      	movs	r1, #1
 80081e6:	438a      	bics	r2, r1
 80081e8:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80081ea:	68ba      	ldr	r2, [r7, #8]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2164      	movs	r1, #100	; 0x64
 80081f0:	0018      	movs	r0, r3
 80081f2:	f000 f949 	bl	8008488 <SPI_EndRxTransaction>
 80081f6:	1e03      	subs	r3, r0, #0
 80081f8:	d002      	beq.n	8008200 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2220      	movs	r2, #32
 80081fe:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2251      	movs	r2, #81	; 0x51
 800820a:	2101      	movs	r1, #1
 800820c:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008212:	2b00      	cmp	r3, #0
 8008214:	d004      	beq.n	8008220 <SPI_DMAReceiveCplt+0xa0>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	0018      	movs	r0, r3
 800821a:	f7ff ffa9 	bl	8008170 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800821e:	e003      	b.n	8008228 <SPI_DMAReceiveCplt+0xa8>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	0018      	movs	r0, r3
 8008224:	f7fc f9b2 	bl	800458c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008228:	46bd      	mov	sp, r7
 800822a:	b004      	add	sp, #16
 800822c:	bd80      	pop	{r7, pc}

0800822e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b084      	sub	sp, #16
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800823a:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800823c:	f7fd f8b8 	bl	80053b0 <HAL_GetTick>
 8008240:	0003      	movs	r3, r0
 8008242:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2220      	movs	r2, #32
 800824c:	4013      	ands	r3, r2
 800824e:	2b20      	cmp	r3, #32
 8008250:	d030      	beq.n	80082b4 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	685a      	ldr	r2, [r3, #4]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2120      	movs	r1, #32
 800825e:	438a      	bics	r2, r1
 8008260:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2164      	movs	r1, #100	; 0x64
 8008268:	0018      	movs	r0, r3
 800826a:	f000 f977 	bl	800855c <SPI_EndRxTxTransaction>
 800826e:	1e03      	subs	r3, r0, #0
 8008270:	d005      	beq.n	800827e <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008276:	2220      	movs	r2, #32
 8008278:	431a      	orrs	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	685a      	ldr	r2, [r3, #4]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2103      	movs	r1, #3
 800828a:	438a      	bics	r2, r1
 800828c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2251      	movs	r2, #81	; 0x51
 800829e:	2101      	movs	r1, #1
 80082a0:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d004      	beq.n	80082b4 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	0018      	movs	r0, r3
 80082ae:	f7ff ff5f 	bl	8008170 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80082b2:	e003      	b.n	80082bc <SPI_DMATransmitReceiveCplt+0x8e>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	0018      	movs	r0, r3
 80082b8:	f7ff ff42 	bl	8008140 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082bc:	46bd      	mov	sp, r7
 80082be:	b004      	add	sp, #16
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b084      	sub	sp, #16
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ce:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	0018      	movs	r0, r3
 80082d4:	f7ff ff3c 	bl	8008150 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082d8:	46c0      	nop			; (mov r8, r8)
 80082da:	46bd      	mov	sp, r7
 80082dc:	b004      	add	sp, #16
 80082de:	bd80      	pop	{r7, pc}

080082e0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ec:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	0018      	movs	r0, r3
 80082f2:	f7ff ff35 	bl	8008160 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082f6:	46c0      	nop			; (mov r8, r8)
 80082f8:	46bd      	mov	sp, r7
 80082fa:	b004      	add	sp, #16
 80082fc:	bd80      	pop	{r7, pc}

080082fe <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b084      	sub	sp, #16
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800830a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	685a      	ldr	r2, [r3, #4]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2103      	movs	r1, #3
 8008318:	438a      	bics	r2, r1
 800831a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008320:	2210      	movs	r2, #16
 8008322:	431a      	orrs	r2, r3
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2251      	movs	r2, #81	; 0x51
 800832c:	2101      	movs	r1, #1
 800832e:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	0018      	movs	r0, r3
 8008334:	f7ff ff1c 	bl	8008170 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008338:	46c0      	nop			; (mov r8, r8)
 800833a:	46bd      	mov	sp, r7
 800833c:	b004      	add	sp, #16
 800833e:	bd80      	pop	{r7, pc}

08008340 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800834c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	0018      	movs	r0, r3
 800835e:	f7ff ff07 	bl	8008170 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008362:	46c0      	nop			; (mov r8, r8)
 8008364:	46bd      	mov	sp, r7
 8008366:	b004      	add	sp, #16
 8008368:	bd80      	pop	{r7, pc}
	...

0800836c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b088      	sub	sp, #32
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	603b      	str	r3, [r7, #0]
 8008378:	1dfb      	adds	r3, r7, #7
 800837a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800837c:	f7fd f818 	bl	80053b0 <HAL_GetTick>
 8008380:	0002      	movs	r2, r0
 8008382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008384:	1a9b      	subs	r3, r3, r2
 8008386:	683a      	ldr	r2, [r7, #0]
 8008388:	18d3      	adds	r3, r2, r3
 800838a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800838c:	f7fd f810 	bl	80053b0 <HAL_GetTick>
 8008390:	0003      	movs	r3, r0
 8008392:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008394:	4b3a      	ldr	r3, [pc, #232]	; (8008480 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	015b      	lsls	r3, r3, #5
 800839a:	0d1b      	lsrs	r3, r3, #20
 800839c:	69fa      	ldr	r2, [r7, #28]
 800839e:	4353      	muls	r3, r2
 80083a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083a2:	e058      	b.n	8008456 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	3301      	adds	r3, #1
 80083a8:	d055      	beq.n	8008456 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80083aa:	f7fd f801 	bl	80053b0 <HAL_GetTick>
 80083ae:	0002      	movs	r2, r0
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	69fa      	ldr	r2, [r7, #28]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d902      	bls.n	80083c0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d142      	bne.n	8008446 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	685a      	ldr	r2, [r3, #4]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	21e0      	movs	r1, #224	; 0xe0
 80083cc:	438a      	bics	r2, r1
 80083ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	685a      	ldr	r2, [r3, #4]
 80083d4:	2382      	movs	r3, #130	; 0x82
 80083d6:	005b      	lsls	r3, r3, #1
 80083d8:	429a      	cmp	r2, r3
 80083da:	d113      	bne.n	8008404 <SPI_WaitFlagStateUntilTimeout+0x98>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	689a      	ldr	r2, [r3, #8]
 80083e0:	2380      	movs	r3, #128	; 0x80
 80083e2:	021b      	lsls	r3, r3, #8
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d005      	beq.n	80083f4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	689a      	ldr	r2, [r3, #8]
 80083ec:	2380      	movs	r3, #128	; 0x80
 80083ee:	00db      	lsls	r3, r3, #3
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d107      	bne.n	8008404 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2140      	movs	r1, #64	; 0x40
 8008400:	438a      	bics	r2, r1
 8008402:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008408:	2380      	movs	r3, #128	; 0x80
 800840a:	019b      	lsls	r3, r3, #6
 800840c:	429a      	cmp	r2, r3
 800840e:	d110      	bne.n	8008432 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	491a      	ldr	r1, [pc, #104]	; (8008484 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800841c:	400a      	ands	r2, r1
 800841e:	601a      	str	r2, [r3, #0]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2180      	movs	r1, #128	; 0x80
 800842c:	0189      	lsls	r1, r1, #6
 800842e:	430a      	orrs	r2, r1
 8008430:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2251      	movs	r2, #81	; 0x51
 8008436:	2101      	movs	r1, #1
 8008438:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2250      	movs	r2, #80	; 0x50
 800843e:	2100      	movs	r1, #0
 8008440:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008442:	2303      	movs	r3, #3
 8008444:	e017      	b.n	8008476 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d101      	bne.n	8008450 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800844c:	2300      	movs	r3, #0
 800844e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	3b01      	subs	r3, #1
 8008454:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	4013      	ands	r3, r2
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	425a      	negs	r2, r3
 8008466:	4153      	adcs	r3, r2
 8008468:	b2db      	uxtb	r3, r3
 800846a:	001a      	movs	r2, r3
 800846c:	1dfb      	adds	r3, r7, #7
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	429a      	cmp	r2, r3
 8008472:	d197      	bne.n	80083a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	0018      	movs	r0, r3
 8008478:	46bd      	mov	sp, r7
 800847a:	b008      	add	sp, #32
 800847c:	bd80      	pop	{r7, pc}
 800847e:	46c0      	nop			; (mov r8, r8)
 8008480:	20000058 	.word	0x20000058
 8008484:	ffffdfff 	.word	0xffffdfff

08008488 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af02      	add	r7, sp, #8
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	685a      	ldr	r2, [r3, #4]
 8008498:	2382      	movs	r3, #130	; 0x82
 800849a:	005b      	lsls	r3, r3, #1
 800849c:	429a      	cmp	r2, r3
 800849e:	d113      	bne.n	80084c8 <SPI_EndRxTransaction+0x40>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	689a      	ldr	r2, [r3, #8]
 80084a4:	2380      	movs	r3, #128	; 0x80
 80084a6:	021b      	lsls	r3, r3, #8
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d005      	beq.n	80084b8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	689a      	ldr	r2, [r3, #8]
 80084b0:	2380      	movs	r3, #128	; 0x80
 80084b2:	00db      	lsls	r3, r3, #3
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d107      	bne.n	80084c8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2140      	movs	r1, #64	; 0x40
 80084c4:	438a      	bics	r2, r1
 80084c6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	685a      	ldr	r2, [r3, #4]
 80084cc:	2382      	movs	r3, #130	; 0x82
 80084ce:	005b      	lsls	r3, r3, #1
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d12b      	bne.n	800852c <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	689a      	ldr	r2, [r3, #8]
 80084d8:	2380      	movs	r3, #128	; 0x80
 80084da:	00db      	lsls	r3, r3, #3
 80084dc:	429a      	cmp	r2, r3
 80084de:	d012      	beq.n	8008506 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80084e0:	68ba      	ldr	r2, [r7, #8]
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	0013      	movs	r3, r2
 80084ea:	2200      	movs	r2, #0
 80084ec:	2180      	movs	r1, #128	; 0x80
 80084ee:	f7ff ff3d 	bl	800836c <SPI_WaitFlagStateUntilTimeout>
 80084f2:	1e03      	subs	r3, r0, #0
 80084f4:	d02d      	beq.n	8008552 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084fa:	2220      	movs	r2, #32
 80084fc:	431a      	orrs	r2, r3
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e026      	b.n	8008554 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008506:	68ba      	ldr	r2, [r7, #8]
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	9300      	str	r3, [sp, #0]
 800850e:	0013      	movs	r3, r2
 8008510:	2200      	movs	r2, #0
 8008512:	2101      	movs	r1, #1
 8008514:	f7ff ff2a 	bl	800836c <SPI_WaitFlagStateUntilTimeout>
 8008518:	1e03      	subs	r3, r0, #0
 800851a:	d01a      	beq.n	8008552 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008520:	2220      	movs	r2, #32
 8008522:	431a      	orrs	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008528:	2303      	movs	r3, #3
 800852a:	e013      	b.n	8008554 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	0013      	movs	r3, r2
 8008536:	2200      	movs	r2, #0
 8008538:	2101      	movs	r1, #1
 800853a:	f7ff ff17 	bl	800836c <SPI_WaitFlagStateUntilTimeout>
 800853e:	1e03      	subs	r3, r0, #0
 8008540:	d007      	beq.n	8008552 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008546:	2220      	movs	r2, #32
 8008548:	431a      	orrs	r2, r3
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800854e:	2303      	movs	r3, #3
 8008550:	e000      	b.n	8008554 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	0018      	movs	r0, r3
 8008556:	46bd      	mov	sp, r7
 8008558:	b004      	add	sp, #16
 800855a:	bd80      	pop	{r7, pc}

0800855c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b088      	sub	sp, #32
 8008560:	af02      	add	r7, sp, #8
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008568:	4b1d      	ldr	r3, [pc, #116]	; (80085e0 <SPI_EndRxTxTransaction+0x84>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	491d      	ldr	r1, [pc, #116]	; (80085e4 <SPI_EndRxTxTransaction+0x88>)
 800856e:	0018      	movs	r0, r3
 8008570:	f7f7 fddc 	bl	800012c <__udivsi3>
 8008574:	0003      	movs	r3, r0
 8008576:	001a      	movs	r2, r3
 8008578:	0013      	movs	r3, r2
 800857a:	015b      	lsls	r3, r3, #5
 800857c:	1a9b      	subs	r3, r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	189b      	adds	r3, r3, r2
 8008582:	00db      	lsls	r3, r3, #3
 8008584:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	685a      	ldr	r2, [r3, #4]
 800858a:	2382      	movs	r3, #130	; 0x82
 800858c:	005b      	lsls	r3, r3, #1
 800858e:	429a      	cmp	r2, r3
 8008590:	d112      	bne.n	80085b8 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	0013      	movs	r3, r2
 800859c:	2200      	movs	r2, #0
 800859e:	2180      	movs	r1, #128	; 0x80
 80085a0:	f7ff fee4 	bl	800836c <SPI_WaitFlagStateUntilTimeout>
 80085a4:	1e03      	subs	r3, r0, #0
 80085a6:	d016      	beq.n	80085d6 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ac:	2220      	movs	r2, #32
 80085ae:	431a      	orrs	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80085b4:	2303      	movs	r3, #3
 80085b6:	e00f      	b.n	80085d8 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00a      	beq.n	80085d4 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	3b01      	subs	r3, #1
 80085c2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	2280      	movs	r2, #128	; 0x80
 80085cc:	4013      	ands	r3, r2
 80085ce:	2b80      	cmp	r3, #128	; 0x80
 80085d0:	d0f2      	beq.n	80085b8 <SPI_EndRxTxTransaction+0x5c>
 80085d2:	e000      	b.n	80085d6 <SPI_EndRxTxTransaction+0x7a>
        break;
 80085d4:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	0018      	movs	r0, r3
 80085da:	46bd      	mov	sp, r7
 80085dc:	b006      	add	sp, #24
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	20000058 	.word	0x20000058
 80085e4:	016e3600 	.word	0x016e3600

080085e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d101      	bne.n	80085fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e044      	b.n	8008684 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d107      	bne.n	8008612 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2274      	movs	r2, #116	; 0x74
 8008606:	2100      	movs	r1, #0
 8008608:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	0018      	movs	r0, r3
 800860e:	f7fc fb19 	bl	8004c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2224      	movs	r2, #36	; 0x24
 8008616:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2101      	movs	r1, #1
 8008624:	438a      	bics	r2, r1
 8008626:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	0018      	movs	r0, r3
 800862c:	f000 fce4 	bl	8008ff8 <UART_SetConfig>
 8008630:	0003      	movs	r3, r0
 8008632:	2b01      	cmp	r3, #1
 8008634:	d101      	bne.n	800863a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e024      	b.n	8008684 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863e:	2b00      	cmp	r3, #0
 8008640:	d003      	beq.n	800864a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	0018      	movs	r0, r3
 8008646:	f000 ff93 	bl	8009570 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	685a      	ldr	r2, [r3, #4]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	490d      	ldr	r1, [pc, #52]	; (800868c <HAL_UART_Init+0xa4>)
 8008656:	400a      	ands	r2, r1
 8008658:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	689a      	ldr	r2, [r3, #8]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	212a      	movs	r1, #42	; 0x2a
 8008666:	438a      	bics	r2, r1
 8008668:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2101      	movs	r1, #1
 8008676:	430a      	orrs	r2, r1
 8008678:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	0018      	movs	r0, r3
 800867e:	f001 f82b 	bl	80096d8 <UART_CheckIdleState>
 8008682:	0003      	movs	r3, r0
}
 8008684:	0018      	movs	r0, r3
 8008686:	46bd      	mov	sp, r7
 8008688:	b002      	add	sp, #8
 800868a:	bd80      	pop	{r7, pc}
 800868c:	ffffb7ff 	.word	0xffffb7ff

08008690 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b08a      	sub	sp, #40	; 0x28
 8008694:	af02      	add	r7, sp, #8
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	603b      	str	r3, [r7, #0]
 800869c:	1dbb      	adds	r3, r7, #6
 800869e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086a4:	2b20      	cmp	r3, #32
 80086a6:	d000      	beq.n	80086aa <HAL_UART_Transmit+0x1a>
 80086a8:	e095      	b.n	80087d6 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d003      	beq.n	80086b8 <HAL_UART_Transmit+0x28>
 80086b0:	1dbb      	adds	r3, r7, #6
 80086b2:	881b      	ldrh	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d101      	bne.n	80086bc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e08d      	b.n	80087d8 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	689a      	ldr	r2, [r3, #8]
 80086c0:	2380      	movs	r3, #128	; 0x80
 80086c2:	015b      	lsls	r3, r3, #5
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d109      	bne.n	80086dc <HAL_UART_Transmit+0x4c>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d105      	bne.n	80086dc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	2201      	movs	r2, #1
 80086d4:	4013      	ands	r3, r2
 80086d6:	d001      	beq.n	80086dc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80086d8:	2301      	movs	r3, #1
 80086da:	e07d      	b.n	80087d8 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2274      	movs	r2, #116	; 0x74
 80086e0:	5c9b      	ldrb	r3, [r3, r2]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d101      	bne.n	80086ea <HAL_UART_Transmit+0x5a>
 80086e6:	2302      	movs	r3, #2
 80086e8:	e076      	b.n	80087d8 <HAL_UART_Transmit+0x148>
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2274      	movs	r2, #116	; 0x74
 80086ee:	2101      	movs	r1, #1
 80086f0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2280      	movs	r2, #128	; 0x80
 80086f6:	2100      	movs	r1, #0
 80086f8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2221      	movs	r2, #33	; 0x21
 80086fe:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008700:	f7fc fe56 	bl	80053b0 <HAL_GetTick>
 8008704:	0003      	movs	r3, r0
 8008706:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	1dba      	adds	r2, r7, #6
 800870c:	2150      	movs	r1, #80	; 0x50
 800870e:	8812      	ldrh	r2, [r2, #0]
 8008710:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	1dba      	adds	r2, r7, #6
 8008716:	2152      	movs	r1, #82	; 0x52
 8008718:	8812      	ldrh	r2, [r2, #0]
 800871a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	689a      	ldr	r2, [r3, #8]
 8008720:	2380      	movs	r3, #128	; 0x80
 8008722:	015b      	lsls	r3, r3, #5
 8008724:	429a      	cmp	r2, r3
 8008726:	d108      	bne.n	800873a <HAL_UART_Transmit+0xaa>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d104      	bne.n	800873a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8008730:	2300      	movs	r3, #0
 8008732:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	61bb      	str	r3, [r7, #24]
 8008738:	e003      	b.n	8008742 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800873e:	2300      	movs	r3, #0
 8008740:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2274      	movs	r2, #116	; 0x74
 8008746:	2100      	movs	r1, #0
 8008748:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800874a:	e02c      	b.n	80087a6 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	0013      	movs	r3, r2
 8008756:	2200      	movs	r2, #0
 8008758:	2180      	movs	r1, #128	; 0x80
 800875a:	f001 f807 	bl	800976c <UART_WaitOnFlagUntilTimeout>
 800875e:	1e03      	subs	r3, r0, #0
 8008760:	d001      	beq.n	8008766 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	e038      	b.n	80087d8 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10b      	bne.n	8008784 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	881b      	ldrh	r3, [r3, #0]
 8008770:	001a      	movs	r2, r3
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	05d2      	lsls	r2, r2, #23
 8008778:	0dd2      	lsrs	r2, r2, #23
 800877a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	3302      	adds	r3, #2
 8008780:	61bb      	str	r3, [r7, #24]
 8008782:	e007      	b.n	8008794 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	781a      	ldrb	r2, [r3, #0]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	3301      	adds	r3, #1
 8008792:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2252      	movs	r2, #82	; 0x52
 8008798:	5a9b      	ldrh	r3, [r3, r2]
 800879a:	b29b      	uxth	r3, r3
 800879c:	3b01      	subs	r3, #1
 800879e:	b299      	uxth	r1, r3
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2252      	movs	r2, #82	; 0x52
 80087a4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2252      	movs	r2, #82	; 0x52
 80087aa:	5a9b      	ldrh	r3, [r3, r2]
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1cc      	bne.n	800874c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80087b2:	697a      	ldr	r2, [r7, #20]
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	0013      	movs	r3, r2
 80087bc:	2200      	movs	r2, #0
 80087be:	2140      	movs	r1, #64	; 0x40
 80087c0:	f000 ffd4 	bl	800976c <UART_WaitOnFlagUntilTimeout>
 80087c4:	1e03      	subs	r3, r0, #0
 80087c6:	d001      	beq.n	80087cc <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80087c8:	2303      	movs	r3, #3
 80087ca:	e005      	b.n	80087d8 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2220      	movs	r2, #32
 80087d0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	e000      	b.n	80087d8 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80087d6:	2302      	movs	r3, #2
  }
}
 80087d8:	0018      	movs	r0, r3
 80087da:	46bd      	mov	sp, r7
 80087dc:	b008      	add	sp, #32
 80087de:	bd80      	pop	{r7, pc}

080087e0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b088      	sub	sp, #32
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	1dbb      	adds	r3, r7, #6
 80087ec:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087f2:	2b20      	cmp	r3, #32
 80087f4:	d000      	beq.n	80087f8 <HAL_UART_Transmit_DMA+0x18>
 80087f6:	e088      	b.n	800890a <HAL_UART_Transmit_DMA+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <HAL_UART_Transmit_DMA+0x26>
 80087fe:	1dbb      	adds	r3, r7, #6
 8008800:	881b      	ldrh	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d101      	bne.n	800880a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	e080      	b.n	800890c <HAL_UART_Transmit_DMA+0x12c>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	689a      	ldr	r2, [r3, #8]
 800880e:	2380      	movs	r3, #128	; 0x80
 8008810:	015b      	lsls	r3, r3, #5
 8008812:	429a      	cmp	r2, r3
 8008814:	d109      	bne.n	800882a <HAL_UART_Transmit_DMA+0x4a>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d105      	bne.n	800882a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2201      	movs	r2, #1
 8008822:	4013      	ands	r3, r2
 8008824:	d001      	beq.n	800882a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e070      	b.n	800890c <HAL_UART_Transmit_DMA+0x12c>
      }
    }

    __HAL_LOCK(huart);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2274      	movs	r2, #116	; 0x74
 800882e:	5c9b      	ldrb	r3, [r3, r2]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d101      	bne.n	8008838 <HAL_UART_Transmit_DMA+0x58>
 8008834:	2302      	movs	r3, #2
 8008836:	e069      	b.n	800890c <HAL_UART_Transmit_DMA+0x12c>
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2274      	movs	r2, #116	; 0x74
 800883c:	2101      	movs	r1, #1
 800883e:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	68ba      	ldr	r2, [r7, #8]
 8008844:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	1dba      	adds	r2, r7, #6
 800884a:	2150      	movs	r1, #80	; 0x50
 800884c:	8812      	ldrh	r2, [r2, #0]
 800884e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	1dba      	adds	r2, r7, #6
 8008854:	2152      	movs	r1, #82	; 0x52
 8008856:	8812      	ldrh	r2, [r2, #0]
 8008858:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2280      	movs	r2, #128	; 0x80
 800885e:	2100      	movs	r1, #0
 8008860:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2221      	movs	r2, #33	; 0x21
 8008866:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800886c:	2b00      	cmp	r3, #0
 800886e:	d02b      	beq.n	80088c8 <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008874:	4a27      	ldr	r2, [pc, #156]	; (8008914 <HAL_UART_Transmit_DMA+0x134>)
 8008876:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800887c:	4a26      	ldr	r2, [pc, #152]	; (8008918 <HAL_UART_Transmit_DMA+0x138>)
 800887e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008884:	4a25      	ldr	r2, [pc, #148]	; (800891c <HAL_UART_Transmit_DMA+0x13c>)
 8008886:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800888c:	2200      	movs	r2, #0
 800888e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008898:	0019      	movs	r1, r3
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	3328      	adds	r3, #40	; 0x28
 80088a0:	001a      	movs	r2, r3
 80088a2:	1dbb      	adds	r3, r7, #6
 80088a4:	881b      	ldrh	r3, [r3, #0]
 80088a6:	f7fc ff4e 	bl	8005746 <HAL_DMA_Start_IT>
 80088aa:	1e03      	subs	r3, r0, #0
 80088ac:	d00c      	beq.n	80088c8 <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2280      	movs	r2, #128	; 0x80
 80088b2:	2110      	movs	r1, #16
 80088b4:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2274      	movs	r2, #116	; 0x74
 80088ba:	2100      	movs	r1, #0
 80088bc:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2220      	movs	r2, #32
 80088c2:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e021      	b.n	800890c <HAL_UART_Transmit_DMA+0x12c>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2240      	movs	r2, #64	; 0x40
 80088ce:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2274      	movs	r2, #116	; 0x74
 80088d4:	2100      	movs	r1, #0
 80088d6:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088d8:	f3ef 8310 	mrs	r3, PRIMASK
 80088dc:	613b      	str	r3, [r7, #16]
  return(result);
 80088de:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80088e0:	61fb      	str	r3, [r7, #28]
 80088e2:	2301      	movs	r3, #1
 80088e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	f383 8810 	msr	PRIMASK, r3
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	689a      	ldr	r2, [r3, #8]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2180      	movs	r1, #128	; 0x80
 80088f8:	430a      	orrs	r2, r1
 80088fa:	609a      	str	r2, [r3, #8]
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	61bb      	str	r3, [r7, #24]
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	f383 8810 	msr	PRIMASK, r3

    return HAL_OK;
 8008906:	2300      	movs	r3, #0
 8008908:	e000      	b.n	800890c <HAL_UART_Transmit_DMA+0x12c>
  }
  else
  {
    return HAL_BUSY;
 800890a:	2302      	movs	r3, #2
  }
}
 800890c:	0018      	movs	r0, r3
 800890e:	46bd      	mov	sp, r7
 8008910:	b008      	add	sp, #32
 8008912:	bd80      	pop	{r7, pc}
 8008914:	08009b19 	.word	0x08009b19
 8008918:	08009ba9 	.word	0x08009ba9
 800891c:	08009d1d 	.word	0x08009d1d

08008920 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b088      	sub	sp, #32
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	1dbb      	adds	r3, r7, #6
 800892c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008932:	2b20      	cmp	r3, #32
 8008934:	d153      	bne.n	80089de <HAL_UART_Receive_DMA+0xbe>
  {
    if ((pData == NULL) || (Size == 0U))
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d003      	beq.n	8008944 <HAL_UART_Receive_DMA+0x24>
 800893c:	1dbb      	adds	r3, r7, #6
 800893e:	881b      	ldrh	r3, [r3, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d101      	bne.n	8008948 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	e04b      	b.n	80089e0 <HAL_UART_Receive_DMA+0xc0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	689a      	ldr	r2, [r3, #8]
 800894c:	2380      	movs	r3, #128	; 0x80
 800894e:	015b      	lsls	r3, r3, #5
 8008950:	429a      	cmp	r2, r3
 8008952:	d109      	bne.n	8008968 <HAL_UART_Receive_DMA+0x48>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d105      	bne.n	8008968 <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	2201      	movs	r2, #1
 8008960:	4013      	ands	r3, r2
 8008962:	d001      	beq.n	8008968 <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e03b      	b.n	80089e0 <HAL_UART_Receive_DMA+0xc0>
      }
    }

    __HAL_LOCK(huart);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2274      	movs	r2, #116	; 0x74
 800896c:	5c9b      	ldrb	r3, [r3, r2]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d101      	bne.n	8008976 <HAL_UART_Receive_DMA+0x56>
 8008972:	2302      	movs	r3, #2
 8008974:	e034      	b.n	80089e0 <HAL_UART_Receive_DMA+0xc0>
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2274      	movs	r2, #116	; 0x74
 800897a:	2101      	movs	r1, #1
 800897c:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a17      	ldr	r2, [pc, #92]	; (80089e8 <HAL_UART_Receive_DMA+0xc8>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d01e      	beq.n	80089cc <HAL_UART_Receive_DMA+0xac>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	685a      	ldr	r2, [r3, #4]
 8008994:	2380      	movs	r3, #128	; 0x80
 8008996:	041b      	lsls	r3, r3, #16
 8008998:	4013      	ands	r3, r2
 800899a:	d017      	beq.n	80089cc <HAL_UART_Receive_DMA+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800899c:	f3ef 8310 	mrs	r3, PRIMASK
 80089a0:	613b      	str	r3, [r7, #16]
  return(result);
 80089a2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80089a4:	61fb      	str	r3, [r7, #28]
 80089a6:	2301      	movs	r3, #1
 80089a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f383 8810 	msr	PRIMASK, r3
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2180      	movs	r1, #128	; 0x80
 80089bc:	04c9      	lsls	r1, r1, #19
 80089be:	430a      	orrs	r2, r1
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	61bb      	str	r3, [r7, #24]
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	f383 8810 	msr	PRIMASK, r3
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80089cc:	1dbb      	adds	r3, r7, #6
 80089ce:	881a      	ldrh	r2, [r3, #0]
 80089d0:	68b9      	ldr	r1, [r7, #8]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	0018      	movs	r0, r3
 80089d6:	f000 ff85 	bl	80098e4 <UART_Start_Receive_DMA>
 80089da:	0003      	movs	r3, r0
 80089dc:	e000      	b.n	80089e0 <HAL_UART_Receive_DMA+0xc0>
  }
  else
  {
    return HAL_BUSY;
 80089de:	2302      	movs	r3, #2
  }
}
 80089e0:	0018      	movs	r0, r3
 80089e2:	46bd      	mov	sp, r7
 80089e4:	b008      	add	sp, #32
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	40004800 	.word	0x40004800

080089ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b0aa      	sub	sp, #168	; 0xa8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	69db      	ldr	r3, [r3, #28]
 80089fa:	22a4      	movs	r2, #164	; 0xa4
 80089fc:	18b9      	adds	r1, r7, r2
 80089fe:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	21a0      	movs	r1, #160	; 0xa0
 8008a08:	1879      	adds	r1, r7, r1
 8008a0a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	219c      	movs	r1, #156	; 0x9c
 8008a14:	1879      	adds	r1, r7, r1
 8008a16:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a18:	18bb      	adds	r3, r7, r2
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a99      	ldr	r2, [pc, #612]	; (8008c84 <HAL_UART_IRQHandler+0x298>)
 8008a1e:	4013      	ands	r3, r2
 8008a20:	2298      	movs	r2, #152	; 0x98
 8008a22:	18b9      	adds	r1, r7, r2
 8008a24:	600b      	str	r3, [r1, #0]
  if (errorflags == 0U)
 8008a26:	18bb      	adds	r3, r7, r2
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d116      	bne.n	8008a5c <HAL_UART_IRQHandler+0x70>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008a2e:	23a4      	movs	r3, #164	; 0xa4
 8008a30:	18fb      	adds	r3, r7, r3
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2220      	movs	r2, #32
 8008a36:	4013      	ands	r3, r2
 8008a38:	d010      	beq.n	8008a5c <HAL_UART_IRQHandler+0x70>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008a3a:	23a0      	movs	r3, #160	; 0xa0
 8008a3c:	18fb      	adds	r3, r7, r3
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2220      	movs	r2, #32
 8008a42:	4013      	ands	r3, r2
 8008a44:	d00a      	beq.n	8008a5c <HAL_UART_IRQHandler+0x70>
    {
      if (huart->RxISR != NULL)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d100      	bne.n	8008a50 <HAL_UART_IRQHandler+0x64>
 8008a4e:	e28e      	b.n	8008f6e <HAL_UART_IRQHandler+0x582>
      {
        huart->RxISR(huart);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	0010      	movs	r0, r2
 8008a58:	4798      	blx	r3
      }
      return;
 8008a5a:	e288      	b.n	8008f6e <HAL_UART_IRQHandler+0x582>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008a5c:	2398      	movs	r3, #152	; 0x98
 8008a5e:	18fb      	adds	r3, r7, r3
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d100      	bne.n	8008a68 <HAL_UART_IRQHandler+0x7c>
 8008a66:	e113      	b.n	8008c90 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008a68:	239c      	movs	r3, #156	; 0x9c
 8008a6a:	18fb      	adds	r3, r7, r3
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	4013      	ands	r3, r2
 8008a72:	d106      	bne.n	8008a82 <HAL_UART_IRQHandler+0x96>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008a74:	23a0      	movs	r3, #160	; 0xa0
 8008a76:	18fb      	adds	r3, r7, r3
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a83      	ldr	r2, [pc, #524]	; (8008c88 <HAL_UART_IRQHandler+0x29c>)
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	d100      	bne.n	8008a82 <HAL_UART_IRQHandler+0x96>
 8008a80:	e106      	b.n	8008c90 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a82:	23a4      	movs	r3, #164	; 0xa4
 8008a84:	18fb      	adds	r3, r7, r3
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2201      	movs	r2, #1
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	d012      	beq.n	8008ab4 <HAL_UART_IRQHandler+0xc8>
 8008a8e:	23a0      	movs	r3, #160	; 0xa0
 8008a90:	18fb      	adds	r3, r7, r3
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	2380      	movs	r3, #128	; 0x80
 8008a96:	005b      	lsls	r3, r3, #1
 8008a98:	4013      	ands	r3, r2
 8008a9a:	d00b      	beq.n	8008ab4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2280      	movs	r2, #128	; 0x80
 8008aa8:	589b      	ldr	r3, [r3, r2]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	431a      	orrs	r2, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2180      	movs	r1, #128	; 0x80
 8008ab2:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ab4:	23a4      	movs	r3, #164	; 0xa4
 8008ab6:	18fb      	adds	r3, r7, r3
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2202      	movs	r2, #2
 8008abc:	4013      	ands	r3, r2
 8008abe:	d011      	beq.n	8008ae4 <HAL_UART_IRQHandler+0xf8>
 8008ac0:	239c      	movs	r3, #156	; 0x9c
 8008ac2:	18fb      	adds	r3, r7, r3
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	4013      	ands	r3, r2
 8008aca:	d00b      	beq.n	8008ae4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2202      	movs	r2, #2
 8008ad2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2280      	movs	r2, #128	; 0x80
 8008ad8:	589b      	ldr	r3, [r3, r2]
 8008ada:	2204      	movs	r2, #4
 8008adc:	431a      	orrs	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2180      	movs	r1, #128	; 0x80
 8008ae2:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ae4:	23a4      	movs	r3, #164	; 0xa4
 8008ae6:	18fb      	adds	r3, r7, r3
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2204      	movs	r2, #4
 8008aec:	4013      	ands	r3, r2
 8008aee:	d011      	beq.n	8008b14 <HAL_UART_IRQHandler+0x128>
 8008af0:	239c      	movs	r3, #156	; 0x9c
 8008af2:	18fb      	adds	r3, r7, r3
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2201      	movs	r2, #1
 8008af8:	4013      	ands	r3, r2
 8008afa:	d00b      	beq.n	8008b14 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2204      	movs	r2, #4
 8008b02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2280      	movs	r2, #128	; 0x80
 8008b08:	589b      	ldr	r3, [r3, r2]
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	431a      	orrs	r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2180      	movs	r1, #128	; 0x80
 8008b12:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b14:	23a4      	movs	r3, #164	; 0xa4
 8008b16:	18fb      	adds	r3, r7, r3
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2208      	movs	r2, #8
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	d017      	beq.n	8008b50 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008b20:	23a0      	movs	r3, #160	; 0xa0
 8008b22:	18fb      	adds	r3, r7, r3
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2220      	movs	r2, #32
 8008b28:	4013      	ands	r3, r2
 8008b2a:	d105      	bne.n	8008b38 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008b2c:	239c      	movs	r3, #156	; 0x9c
 8008b2e:	18fb      	adds	r3, r7, r3
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2201      	movs	r2, #1
 8008b34:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008b36:	d00b      	beq.n	8008b50 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2208      	movs	r2, #8
 8008b3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2280      	movs	r2, #128	; 0x80
 8008b44:	589b      	ldr	r3, [r3, r2]
 8008b46:	2208      	movs	r2, #8
 8008b48:	431a      	orrs	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2180      	movs	r1, #128	; 0x80
 8008b4e:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008b50:	23a4      	movs	r3, #164	; 0xa4
 8008b52:	18fb      	adds	r3, r7, r3
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	2380      	movs	r3, #128	; 0x80
 8008b58:	011b      	lsls	r3, r3, #4
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	d013      	beq.n	8008b86 <HAL_UART_IRQHandler+0x19a>
 8008b5e:	23a0      	movs	r3, #160	; 0xa0
 8008b60:	18fb      	adds	r3, r7, r3
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	2380      	movs	r3, #128	; 0x80
 8008b66:	04db      	lsls	r3, r3, #19
 8008b68:	4013      	ands	r3, r2
 8008b6a:	d00c      	beq.n	8008b86 <HAL_UART_IRQHandler+0x19a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2280      	movs	r2, #128	; 0x80
 8008b72:	0112      	lsls	r2, r2, #4
 8008b74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2280      	movs	r2, #128	; 0x80
 8008b7a:	589b      	ldr	r3, [r3, r2]
 8008b7c:	2220      	movs	r2, #32
 8008b7e:	431a      	orrs	r2, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2180      	movs	r1, #128	; 0x80
 8008b84:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2280      	movs	r2, #128	; 0x80
 8008b8a:	589b      	ldr	r3, [r3, r2]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d100      	bne.n	8008b92 <HAL_UART_IRQHandler+0x1a6>
 8008b90:	e1ef      	b.n	8008f72 <HAL_UART_IRQHandler+0x586>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008b92:	23a4      	movs	r3, #164	; 0xa4
 8008b94:	18fb      	adds	r3, r7, r3
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2220      	movs	r2, #32
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	d00e      	beq.n	8008bbc <HAL_UART_IRQHandler+0x1d0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008b9e:	23a0      	movs	r3, #160	; 0xa0
 8008ba0:	18fb      	adds	r3, r7, r3
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2220      	movs	r2, #32
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	d008      	beq.n	8008bbc <HAL_UART_IRQHandler+0x1d0>
      {
        if (huart->RxISR != NULL)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d004      	beq.n	8008bbc <HAL_UART_IRQHandler+0x1d0>
        {
          huart->RxISR(huart);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	0010      	movs	r0, r2
 8008bba:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2280      	movs	r2, #128	; 0x80
 8008bc0:	589b      	ldr	r3, [r3, r2]
 8008bc2:	2294      	movs	r2, #148	; 0x94
 8008bc4:	18ba      	adds	r2, r7, r2
 8008bc6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	2240      	movs	r2, #64	; 0x40
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	2b40      	cmp	r3, #64	; 0x40
 8008bd4:	d005      	beq.n	8008be2 <HAL_UART_IRQHandler+0x1f6>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008bd6:	2394      	movs	r3, #148	; 0x94
 8008bd8:	18fb      	adds	r3, r7, r3
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	2228      	movs	r2, #40	; 0x28
 8008bde:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008be0:	d045      	beq.n	8008c6e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	0018      	movs	r0, r3
 8008be6:	f000 ff3b 	bl	8009a60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	2240      	movs	r2, #64	; 0x40
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	2b40      	cmp	r3, #64	; 0x40
 8008bf6:	d135      	bne.n	8008c64 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8008bfc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8008bfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c00:	2090      	movs	r0, #144	; 0x90
 8008c02:	183a      	adds	r2, r7, r0
 8008c04:	6013      	str	r3, [r2, #0]
 8008c06:	2301      	movs	r3, #1
 8008c08:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c0c:	f383 8810 	msr	PRIMASK, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	689a      	ldr	r2, [r3, #8]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2140      	movs	r1, #64	; 0x40
 8008c1c:	438a      	bics	r2, r1
 8008c1e:	609a      	str	r2, [r3, #8]
 8008c20:	183b      	adds	r3, r7, r0
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c28:	f383 8810 	msr	PRIMASK, r3

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d012      	beq.n	8008c5a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c38:	4a14      	ldr	r2, [pc, #80]	; (8008c8c <HAL_UART_IRQHandler+0x2a0>)
 8008c3a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c40:	0018      	movs	r0, r3
 8008c42:	f7fc fe26 	bl	8005892 <HAL_DMA_Abort_IT>
 8008c46:	1e03      	subs	r3, r0, #0
 8008c48:	d01a      	beq.n	8008c80 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c54:	0018      	movs	r0, r3
 8008c56:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c58:	e012      	b.n	8008c80 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	0018      	movs	r0, r3
 8008c5e:	f000 f9b7 	bl	8008fd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c62:	e00d      	b.n	8008c80 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	0018      	movs	r0, r3
 8008c68:	f000 f9b2 	bl	8008fd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c6c:	e008      	b.n	8008c80 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	0018      	movs	r0, r3
 8008c72:	f000 f9ad 	bl	8008fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2280      	movs	r2, #128	; 0x80
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8008c7e:	e178      	b.n	8008f72 <HAL_UART_IRQHandler+0x586>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c80:	46c0      	nop			; (mov r8, r8)
    return;
 8008c82:	e176      	b.n	8008f72 <HAL_UART_IRQHandler+0x586>
 8008c84:	0000080f 	.word	0x0000080f
 8008c88:	04000120 	.word	0x04000120
 8008c8c:	08009d9f 	.word	0x08009d9f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d000      	beq.n	8008c9a <HAL_UART_IRQHandler+0x2ae>
 8008c98:	e129      	b.n	8008eee <HAL_UART_IRQHandler+0x502>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008c9a:	23a4      	movs	r3, #164	; 0xa4
 8008c9c:	18fb      	adds	r3, r7, r3
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2210      	movs	r2, #16
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	d100      	bne.n	8008ca8 <HAL_UART_IRQHandler+0x2bc>
 8008ca6:	e122      	b.n	8008eee <HAL_UART_IRQHandler+0x502>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008ca8:	23a0      	movs	r3, #160	; 0xa0
 8008caa:	18fb      	adds	r3, r7, r3
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2210      	movs	r2, #16
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	d100      	bne.n	8008cb6 <HAL_UART_IRQHandler+0x2ca>
 8008cb4:	e11b      	b.n	8008eee <HAL_UART_IRQHandler+0x502>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2210      	movs	r2, #16
 8008cbc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	2240      	movs	r2, #64	; 0x40
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	2b40      	cmp	r3, #64	; 0x40
 8008cca:	d000      	beq.n	8008cce <HAL_UART_IRQHandler+0x2e2>
 8008ccc:	e097      	b.n	8008dfe <HAL_UART_IRQHandler+0x412>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	685a      	ldr	r2, [r3, #4]
 8008cd6:	217e      	movs	r1, #126	; 0x7e
 8008cd8:	187b      	adds	r3, r7, r1
 8008cda:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008cdc:	187b      	adds	r3, r7, r1
 8008cde:	881b      	ldrh	r3, [r3, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d100      	bne.n	8008ce6 <HAL_UART_IRQHandler+0x2fa>
 8008ce4:	e147      	b.n	8008f76 <HAL_UART_IRQHandler+0x58a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2258      	movs	r2, #88	; 0x58
 8008cea:	5a9b      	ldrh	r3, [r3, r2]
 8008cec:	227e      	movs	r2, #126	; 0x7e
 8008cee:	18ba      	adds	r2, r7, r2
 8008cf0:	8812      	ldrh	r2, [r2, #0]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d300      	bcc.n	8008cf8 <HAL_UART_IRQHandler+0x30c>
 8008cf6:	e13e      	b.n	8008f76 <HAL_UART_IRQHandler+0x58a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	227e      	movs	r2, #126	; 0x7e
 8008cfc:	18ba      	adds	r2, r7, r2
 8008cfe:	215a      	movs	r1, #90	; 0x5a
 8008d00:	8812      	ldrh	r2, [r2, #0]
 8008d02:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2220      	movs	r2, #32
 8008d0e:	4013      	ands	r3, r2
 8008d10:	d166      	bne.n	8008de0 <HAL_UART_IRQHandler+0x3f4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d12:	f3ef 8310 	mrs	r3, PRIMASK
 8008d16:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d22:	f383 8810 	msr	PRIMASK, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4995      	ldr	r1, [pc, #596]	; (8008f88 <HAL_UART_IRQHandler+0x59c>)
 8008d32:	400a      	ands	r2, r1
 8008d34:	601a      	str	r2, [r3, #0]
 8008d36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d38:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3c:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d40:	f3ef 8310 	mrs	r3, PRIMASK
 8008d44:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8008d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d48:	677b      	str	r3, [r7, #116]	; 0x74
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d50:	f383 8810 	msr	PRIMASK, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	689a      	ldr	r2, [r3, #8]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2101      	movs	r1, #1
 8008d60:	438a      	bics	r2, r1
 8008d62:	609a      	str	r2, [r3, #8]
 8008d64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d66:	647b      	str	r3, [r7, #68]	; 0x44
 8008d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d6a:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8008d72:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8008d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d76:	673b      	str	r3, [r7, #112]	; 0x70
 8008d78:	2301      	movs	r3, #1
 8008d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d7e:	f383 8810 	msr	PRIMASK, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	689a      	ldr	r2, [r3, #8]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2140      	movs	r1, #64	; 0x40
 8008d8e:	438a      	bics	r2, r1
 8008d90:	609a      	str	r2, [r3, #8]
 8008d92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d94:	653b      	str	r3, [r7, #80]	; 0x50
 8008d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d98:	f383 8810 	msr	PRIMASK, r3

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2220      	movs	r2, #32
 8008da0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008da8:	f3ef 8310 	mrs	r3, PRIMASK
 8008dac:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8008dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008db0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008db2:	2301      	movs	r3, #1
 8008db4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008db6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008db8:	f383 8810 	msr	PRIMASK, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2110      	movs	r1, #16
 8008dc8:	438a      	bics	r2, r1
 8008dca:	601a      	str	r2, [r3, #0]
 8008dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dd2:	f383 8810 	msr	PRIMASK, r3

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dda:	0018      	movs	r0, r3
 8008ddc:	f7fc fd19 	bl	8005812 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2258      	movs	r2, #88	; 0x58
 8008de4:	5a9a      	ldrh	r2, [r3, r2]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	215a      	movs	r1, #90	; 0x5a
 8008dea:	5a5b      	ldrh	r3, [r3, r1]
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	1ad3      	subs	r3, r2, r3
 8008df0:	b29a      	uxth	r2, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	0011      	movs	r1, r2
 8008df6:	0018      	movs	r0, r3
 8008df8:	f000 f8f2 	bl	8008fe0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008dfc:	e0bb      	b.n	8008f76 <HAL_UART_IRQHandler+0x58a>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2258      	movs	r2, #88	; 0x58
 8008e02:	5a99      	ldrh	r1, [r3, r2]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	225a      	movs	r2, #90	; 0x5a
 8008e08:	5a9b      	ldrh	r3, [r3, r2]
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	238e      	movs	r3, #142	; 0x8e
 8008e0e:	18fb      	adds	r3, r7, r3
 8008e10:	1a8a      	subs	r2, r1, r2
 8008e12:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	225a      	movs	r2, #90	; 0x5a
 8008e18:	5a9b      	ldrh	r3, [r3, r2]
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d100      	bne.n	8008e22 <HAL_UART_IRQHandler+0x436>
 8008e20:	e0ab      	b.n	8008f7a <HAL_UART_IRQHandler+0x58e>
          && (nb_rx_data > 0U))
 8008e22:	238e      	movs	r3, #142	; 0x8e
 8008e24:	18fb      	adds	r3, r7, r3
 8008e26:	881b      	ldrh	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d100      	bne.n	8008e2e <HAL_UART_IRQHandler+0x442>
 8008e2c:	e0a5      	b.n	8008f7a <HAL_UART_IRQHandler+0x58e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8008e32:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e34:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e36:	2088      	movs	r0, #136	; 0x88
 8008e38:	183a      	adds	r2, r7, r0
 8008e3a:	6013      	str	r3, [r2, #0]
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	f383 8810 	msr	PRIMASK, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	494e      	ldr	r1, [pc, #312]	; (8008f8c <HAL_UART_IRQHandler+0x5a0>)
 8008e52:	400a      	ands	r2, r1
 8008e54:	601a      	str	r2, [r3, #0]
 8008e56:	183b      	adds	r3, r7, r0
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	617b      	str	r3, [r7, #20]
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e62:	f3ef 8310 	mrs	r3, PRIMASK
 8008e66:	61bb      	str	r3, [r7, #24]
  return(result);
 8008e68:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e6a:	2084      	movs	r0, #132	; 0x84
 8008e6c:	183a      	adds	r2, r7, r0
 8008e6e:	6013      	str	r3, [r2, #0]
 8008e70:	2301      	movs	r3, #1
 8008e72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	f383 8810 	msr	PRIMASK, r3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	689a      	ldr	r2, [r3, #8]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2101      	movs	r1, #1
 8008e86:	438a      	bics	r2, r1
 8008e88:	609a      	str	r2, [r3, #8]
 8008e8a:	183b      	adds	r3, r7, r0
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	623b      	str	r3, [r7, #32]
 8008e90:	6a3b      	ldr	r3, [r7, #32]
 8008e92:	f383 8810 	msr	PRIMASK, r3

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2220      	movs	r2, #32
 8008e9a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ea8:	f3ef 8310 	mrs	r3, PRIMASK
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eb0:	2080      	movs	r0, #128	; 0x80
 8008eb2:	183a      	adds	r2, r7, r0
 8008eb4:	6013      	str	r3, [r2, #0]
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ebc:	f383 8810 	msr	PRIMASK, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2110      	movs	r1, #16
 8008ecc:	438a      	bics	r2, r1
 8008ece:	601a      	str	r2, [r3, #0]
 8008ed0:	183b      	adds	r3, r7, r0
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed8:	f383 8810 	msr	PRIMASK, r3
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008edc:	238e      	movs	r3, #142	; 0x8e
 8008ede:	18fb      	adds	r3, r7, r3
 8008ee0:	881a      	ldrh	r2, [r3, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	0011      	movs	r1, r2
 8008ee6:	0018      	movs	r0, r3
 8008ee8:	f000 f87a 	bl	8008fe0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008eec:	e045      	b.n	8008f7a <HAL_UART_IRQHandler+0x58e>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008eee:	23a4      	movs	r3, #164	; 0xa4
 8008ef0:	18fb      	adds	r3, r7, r3
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	2380      	movs	r3, #128	; 0x80
 8008ef6:	035b      	lsls	r3, r3, #13
 8008ef8:	4013      	ands	r3, r2
 8008efa:	d010      	beq.n	8008f1e <HAL_UART_IRQHandler+0x532>
 8008efc:	239c      	movs	r3, #156	; 0x9c
 8008efe:	18fb      	adds	r3, r7, r3
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	2380      	movs	r3, #128	; 0x80
 8008f04:	03db      	lsls	r3, r3, #15
 8008f06:	4013      	ands	r3, r2
 8008f08:	d009      	beq.n	8008f1e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2280      	movs	r2, #128	; 0x80
 8008f10:	0352      	lsls	r2, r2, #13
 8008f12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	0018      	movs	r0, r3
 8008f18:	f000 ff81 	bl	8009e1e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f1c:	e030      	b.n	8008f80 <HAL_UART_IRQHandler+0x594>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008f1e:	23a4      	movs	r3, #164	; 0xa4
 8008f20:	18fb      	adds	r3, r7, r3
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2280      	movs	r2, #128	; 0x80
 8008f26:	4013      	ands	r3, r2
 8008f28:	d00f      	beq.n	8008f4a <HAL_UART_IRQHandler+0x55e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008f2a:	23a0      	movs	r3, #160	; 0xa0
 8008f2c:	18fb      	adds	r3, r7, r3
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2280      	movs	r2, #128	; 0x80
 8008f32:	4013      	ands	r3, r2
 8008f34:	d009      	beq.n	8008f4a <HAL_UART_IRQHandler+0x55e>
  {
    if (huart->TxISR != NULL)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d01f      	beq.n	8008f7e <HAL_UART_IRQHandler+0x592>
    {
      huart->TxISR(huart);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	0010      	movs	r0, r2
 8008f46:	4798      	blx	r3
    }
    return;
 8008f48:	e019      	b.n	8008f7e <HAL_UART_IRQHandler+0x592>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008f4a:	23a4      	movs	r3, #164	; 0xa4
 8008f4c:	18fb      	adds	r3, r7, r3
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2240      	movs	r2, #64	; 0x40
 8008f52:	4013      	ands	r3, r2
 8008f54:	d014      	beq.n	8008f80 <HAL_UART_IRQHandler+0x594>
 8008f56:	23a0      	movs	r3, #160	; 0xa0
 8008f58:	18fb      	adds	r3, r7, r3
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2240      	movs	r2, #64	; 0x40
 8008f5e:	4013      	ands	r3, r2
 8008f60:	d00e      	beq.n	8008f80 <HAL_UART_IRQHandler+0x594>
  {
    UART_EndTransmit_IT(huart);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	0018      	movs	r0, r3
 8008f66:	f000 ff31 	bl	8009dcc <UART_EndTransmit_IT>
    return;
 8008f6a:	46c0      	nop			; (mov r8, r8)
 8008f6c:	e008      	b.n	8008f80 <HAL_UART_IRQHandler+0x594>
      return;
 8008f6e:	46c0      	nop			; (mov r8, r8)
 8008f70:	e006      	b.n	8008f80 <HAL_UART_IRQHandler+0x594>
    return;
 8008f72:	46c0      	nop			; (mov r8, r8)
 8008f74:	e004      	b.n	8008f80 <HAL_UART_IRQHandler+0x594>
      return;
 8008f76:	46c0      	nop			; (mov r8, r8)
 8008f78:	e002      	b.n	8008f80 <HAL_UART_IRQHandler+0x594>
      return;
 8008f7a:	46c0      	nop			; (mov r8, r8)
 8008f7c:	e000      	b.n	8008f80 <HAL_UART_IRQHandler+0x594>
    return;
 8008f7e:	46c0      	nop			; (mov r8, r8)
  }

}
 8008f80:	46bd      	mov	sp, r7
 8008f82:	b02a      	add	sp, #168	; 0xa8
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	46c0      	nop			; (mov r8, r8)
 8008f88:	fffffeff 	.word	0xfffffeff
 8008f8c:	fffffedf 	.word	0xfffffedf

08008f90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008f98:	46c0      	nop			; (mov r8, r8)
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	b002      	add	sp, #8
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008fa8:	46c0      	nop			; (mov r8, r8)
 8008faa:	46bd      	mov	sp, r7
 8008fac:	b002      	add	sp, #8
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008fb8:	46c0      	nop			; (mov r8, r8)
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	b002      	add	sp, #8
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008fc8:	46c0      	nop			; (mov r8, r8)
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	b002      	add	sp, #8
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008fd8:	46c0      	nop			; (mov r8, r8)
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	b002      	add	sp, #8
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	000a      	movs	r2, r1
 8008fea:	1cbb      	adds	r3, r7, #2
 8008fec:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008fee:	46c0      	nop			; (mov r8, r8)
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	b002      	add	sp, #8
 8008ff4:	bd80      	pop	{r7, pc}
	...

08008ff8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ff8:	b5b0      	push	{r4, r5, r7, lr}
 8008ffa:	b08e      	sub	sp, #56	; 0x38
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009000:	231a      	movs	r3, #26
 8009002:	2218      	movs	r2, #24
 8009004:	4694      	mov	ip, r2
 8009006:	44bc      	add	ip, r7
 8009008:	4463      	add	r3, ip
 800900a:	2200      	movs	r2, #0
 800900c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	689a      	ldr	r2, [r3, #8]
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	431a      	orrs	r2, r3
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	695b      	ldr	r3, [r3, #20]
 800901c:	431a      	orrs	r2, r3
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	69db      	ldr	r3, [r3, #28]
 8009022:	4313      	orrs	r3, r2
 8009024:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4acb      	ldr	r2, [pc, #812]	; (800935c <UART_SetConfig+0x364>)
 800902e:	4013      	ands	r3, r2
 8009030:	0019      	movs	r1, r3
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009038:	430a      	orrs	r2, r1
 800903a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	4ac7      	ldr	r2, [pc, #796]	; (8009360 <UART_SetConfig+0x368>)
 8009044:	4013      	ands	r3, r2
 8009046:	0019      	movs	r1, r3
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	68da      	ldr	r2, [r3, #12]
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	430a      	orrs	r2, r1
 8009052:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4ac1      	ldr	r2, [pc, #772]	; (8009364 <UART_SetConfig+0x36c>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d004      	beq.n	800906e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	6a1b      	ldr	r3, [r3, #32]
 8009068:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800906a:	4313      	orrs	r3, r2
 800906c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	4abc      	ldr	r2, [pc, #752]	; (8009368 <UART_SetConfig+0x370>)
 8009076:	4013      	ands	r3, r2
 8009078:	0019      	movs	r1, r3
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009080:	430a      	orrs	r2, r1
 8009082:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4ab8      	ldr	r2, [pc, #736]	; (800936c <UART_SetConfig+0x374>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d134      	bne.n	80090f8 <UART_SetConfig+0x100>
 800908e:	4bb8      	ldr	r3, [pc, #736]	; (8009370 <UART_SetConfig+0x378>)
 8009090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009092:	2203      	movs	r2, #3
 8009094:	4013      	ands	r3, r2
 8009096:	2b01      	cmp	r3, #1
 8009098:	d015      	beq.n	80090c6 <UART_SetConfig+0xce>
 800909a:	d304      	bcc.n	80090a6 <UART_SetConfig+0xae>
 800909c:	2b02      	cmp	r3, #2
 800909e:	d00a      	beq.n	80090b6 <UART_SetConfig+0xbe>
 80090a0:	2b03      	cmp	r3, #3
 80090a2:	d018      	beq.n	80090d6 <UART_SetConfig+0xde>
 80090a4:	e01f      	b.n	80090e6 <UART_SetConfig+0xee>
 80090a6:	231b      	movs	r3, #27
 80090a8:	2218      	movs	r2, #24
 80090aa:	4694      	mov	ip, r2
 80090ac:	44bc      	add	ip, r7
 80090ae:	4463      	add	r3, ip
 80090b0:	2201      	movs	r2, #1
 80090b2:	701a      	strb	r2, [r3, #0]
 80090b4:	e0c5      	b.n	8009242 <UART_SetConfig+0x24a>
 80090b6:	231b      	movs	r3, #27
 80090b8:	2218      	movs	r2, #24
 80090ba:	4694      	mov	ip, r2
 80090bc:	44bc      	add	ip, r7
 80090be:	4463      	add	r3, ip
 80090c0:	2202      	movs	r2, #2
 80090c2:	701a      	strb	r2, [r3, #0]
 80090c4:	e0bd      	b.n	8009242 <UART_SetConfig+0x24a>
 80090c6:	231b      	movs	r3, #27
 80090c8:	2218      	movs	r2, #24
 80090ca:	4694      	mov	ip, r2
 80090cc:	44bc      	add	ip, r7
 80090ce:	4463      	add	r3, ip
 80090d0:	2204      	movs	r2, #4
 80090d2:	701a      	strb	r2, [r3, #0]
 80090d4:	e0b5      	b.n	8009242 <UART_SetConfig+0x24a>
 80090d6:	231b      	movs	r3, #27
 80090d8:	2218      	movs	r2, #24
 80090da:	4694      	mov	ip, r2
 80090dc:	44bc      	add	ip, r7
 80090de:	4463      	add	r3, ip
 80090e0:	2208      	movs	r2, #8
 80090e2:	701a      	strb	r2, [r3, #0]
 80090e4:	e0ad      	b.n	8009242 <UART_SetConfig+0x24a>
 80090e6:	231b      	movs	r3, #27
 80090e8:	2218      	movs	r2, #24
 80090ea:	4694      	mov	ip, r2
 80090ec:	44bc      	add	ip, r7
 80090ee:	4463      	add	r3, ip
 80090f0:	2210      	movs	r2, #16
 80090f2:	701a      	strb	r2, [r3, #0]
 80090f4:	46c0      	nop			; (mov r8, r8)
 80090f6:	e0a4      	b.n	8009242 <UART_SetConfig+0x24a>
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a9d      	ldr	r2, [pc, #628]	; (8009374 <UART_SetConfig+0x37c>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d137      	bne.n	8009172 <UART_SetConfig+0x17a>
 8009102:	4b9b      	ldr	r3, [pc, #620]	; (8009370 <UART_SetConfig+0x378>)
 8009104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009106:	220c      	movs	r2, #12
 8009108:	4013      	ands	r3, r2
 800910a:	2b04      	cmp	r3, #4
 800910c:	d018      	beq.n	8009140 <UART_SetConfig+0x148>
 800910e:	d802      	bhi.n	8009116 <UART_SetConfig+0x11e>
 8009110:	2b00      	cmp	r3, #0
 8009112:	d005      	beq.n	8009120 <UART_SetConfig+0x128>
 8009114:	e024      	b.n	8009160 <UART_SetConfig+0x168>
 8009116:	2b08      	cmp	r3, #8
 8009118:	d00a      	beq.n	8009130 <UART_SetConfig+0x138>
 800911a:	2b0c      	cmp	r3, #12
 800911c:	d018      	beq.n	8009150 <UART_SetConfig+0x158>
 800911e:	e01f      	b.n	8009160 <UART_SetConfig+0x168>
 8009120:	231b      	movs	r3, #27
 8009122:	2218      	movs	r2, #24
 8009124:	4694      	mov	ip, r2
 8009126:	44bc      	add	ip, r7
 8009128:	4463      	add	r3, ip
 800912a:	2200      	movs	r2, #0
 800912c:	701a      	strb	r2, [r3, #0]
 800912e:	e088      	b.n	8009242 <UART_SetConfig+0x24a>
 8009130:	231b      	movs	r3, #27
 8009132:	2218      	movs	r2, #24
 8009134:	4694      	mov	ip, r2
 8009136:	44bc      	add	ip, r7
 8009138:	4463      	add	r3, ip
 800913a:	2202      	movs	r2, #2
 800913c:	701a      	strb	r2, [r3, #0]
 800913e:	e080      	b.n	8009242 <UART_SetConfig+0x24a>
 8009140:	231b      	movs	r3, #27
 8009142:	2218      	movs	r2, #24
 8009144:	4694      	mov	ip, r2
 8009146:	44bc      	add	ip, r7
 8009148:	4463      	add	r3, ip
 800914a:	2204      	movs	r2, #4
 800914c:	701a      	strb	r2, [r3, #0]
 800914e:	e078      	b.n	8009242 <UART_SetConfig+0x24a>
 8009150:	231b      	movs	r3, #27
 8009152:	2218      	movs	r2, #24
 8009154:	4694      	mov	ip, r2
 8009156:	44bc      	add	ip, r7
 8009158:	4463      	add	r3, ip
 800915a:	2208      	movs	r2, #8
 800915c:	701a      	strb	r2, [r3, #0]
 800915e:	e070      	b.n	8009242 <UART_SetConfig+0x24a>
 8009160:	231b      	movs	r3, #27
 8009162:	2218      	movs	r2, #24
 8009164:	4694      	mov	ip, r2
 8009166:	44bc      	add	ip, r7
 8009168:	4463      	add	r3, ip
 800916a:	2210      	movs	r2, #16
 800916c:	701a      	strb	r2, [r3, #0]
 800916e:	46c0      	nop			; (mov r8, r8)
 8009170:	e067      	b.n	8009242 <UART_SetConfig+0x24a>
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a80      	ldr	r2, [pc, #512]	; (8009378 <UART_SetConfig+0x380>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d107      	bne.n	800918c <UART_SetConfig+0x194>
 800917c:	231b      	movs	r3, #27
 800917e:	2218      	movs	r2, #24
 8009180:	4694      	mov	ip, r2
 8009182:	44bc      	add	ip, r7
 8009184:	4463      	add	r3, ip
 8009186:	2200      	movs	r2, #0
 8009188:	701a      	strb	r2, [r3, #0]
 800918a:	e05a      	b.n	8009242 <UART_SetConfig+0x24a>
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a7a      	ldr	r2, [pc, #488]	; (800937c <UART_SetConfig+0x384>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d107      	bne.n	80091a6 <UART_SetConfig+0x1ae>
 8009196:	231b      	movs	r3, #27
 8009198:	2218      	movs	r2, #24
 800919a:	4694      	mov	ip, r2
 800919c:	44bc      	add	ip, r7
 800919e:	4463      	add	r3, ip
 80091a0:	2200      	movs	r2, #0
 80091a2:	701a      	strb	r2, [r3, #0]
 80091a4:	e04d      	b.n	8009242 <UART_SetConfig+0x24a>
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a6e      	ldr	r2, [pc, #440]	; (8009364 <UART_SetConfig+0x36c>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d141      	bne.n	8009234 <UART_SetConfig+0x23c>
 80091b0:	4b6f      	ldr	r3, [pc, #444]	; (8009370 <UART_SetConfig+0x378>)
 80091b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091b4:	23c0      	movs	r3, #192	; 0xc0
 80091b6:	011b      	lsls	r3, r3, #4
 80091b8:	4013      	ands	r3, r2
 80091ba:	2280      	movs	r2, #128	; 0x80
 80091bc:	00d2      	lsls	r2, r2, #3
 80091be:	4293      	cmp	r3, r2
 80091c0:	d01f      	beq.n	8009202 <UART_SetConfig+0x20a>
 80091c2:	2280      	movs	r2, #128	; 0x80
 80091c4:	00d2      	lsls	r2, r2, #3
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d802      	bhi.n	80091d0 <UART_SetConfig+0x1d8>
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d009      	beq.n	80091e2 <UART_SetConfig+0x1ea>
 80091ce:	e028      	b.n	8009222 <UART_SetConfig+0x22a>
 80091d0:	2280      	movs	r2, #128	; 0x80
 80091d2:	0112      	lsls	r2, r2, #4
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d00c      	beq.n	80091f2 <UART_SetConfig+0x1fa>
 80091d8:	22c0      	movs	r2, #192	; 0xc0
 80091da:	0112      	lsls	r2, r2, #4
 80091dc:	4293      	cmp	r3, r2
 80091de:	d018      	beq.n	8009212 <UART_SetConfig+0x21a>
 80091e0:	e01f      	b.n	8009222 <UART_SetConfig+0x22a>
 80091e2:	231b      	movs	r3, #27
 80091e4:	2218      	movs	r2, #24
 80091e6:	4694      	mov	ip, r2
 80091e8:	44bc      	add	ip, r7
 80091ea:	4463      	add	r3, ip
 80091ec:	2200      	movs	r2, #0
 80091ee:	701a      	strb	r2, [r3, #0]
 80091f0:	e027      	b.n	8009242 <UART_SetConfig+0x24a>
 80091f2:	231b      	movs	r3, #27
 80091f4:	2218      	movs	r2, #24
 80091f6:	4694      	mov	ip, r2
 80091f8:	44bc      	add	ip, r7
 80091fa:	4463      	add	r3, ip
 80091fc:	2202      	movs	r2, #2
 80091fe:	701a      	strb	r2, [r3, #0]
 8009200:	e01f      	b.n	8009242 <UART_SetConfig+0x24a>
 8009202:	231b      	movs	r3, #27
 8009204:	2218      	movs	r2, #24
 8009206:	4694      	mov	ip, r2
 8009208:	44bc      	add	ip, r7
 800920a:	4463      	add	r3, ip
 800920c:	2204      	movs	r2, #4
 800920e:	701a      	strb	r2, [r3, #0]
 8009210:	e017      	b.n	8009242 <UART_SetConfig+0x24a>
 8009212:	231b      	movs	r3, #27
 8009214:	2218      	movs	r2, #24
 8009216:	4694      	mov	ip, r2
 8009218:	44bc      	add	ip, r7
 800921a:	4463      	add	r3, ip
 800921c:	2208      	movs	r2, #8
 800921e:	701a      	strb	r2, [r3, #0]
 8009220:	e00f      	b.n	8009242 <UART_SetConfig+0x24a>
 8009222:	231b      	movs	r3, #27
 8009224:	2218      	movs	r2, #24
 8009226:	4694      	mov	ip, r2
 8009228:	44bc      	add	ip, r7
 800922a:	4463      	add	r3, ip
 800922c:	2210      	movs	r2, #16
 800922e:	701a      	strb	r2, [r3, #0]
 8009230:	46c0      	nop			; (mov r8, r8)
 8009232:	e006      	b.n	8009242 <UART_SetConfig+0x24a>
 8009234:	231b      	movs	r3, #27
 8009236:	2218      	movs	r2, #24
 8009238:	4694      	mov	ip, r2
 800923a:	44bc      	add	ip, r7
 800923c:	4463      	add	r3, ip
 800923e:	2210      	movs	r2, #16
 8009240:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a47      	ldr	r2, [pc, #284]	; (8009364 <UART_SetConfig+0x36c>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d000      	beq.n	800924e <UART_SetConfig+0x256>
 800924c:	e0a0      	b.n	8009390 <UART_SetConfig+0x398>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800924e:	231b      	movs	r3, #27
 8009250:	2218      	movs	r2, #24
 8009252:	4694      	mov	ip, r2
 8009254:	44bc      	add	ip, r7
 8009256:	4463      	add	r3, ip
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	2b02      	cmp	r3, #2
 800925c:	d00d      	beq.n	800927a <UART_SetConfig+0x282>
 800925e:	dc02      	bgt.n	8009266 <UART_SetConfig+0x26e>
 8009260:	2b00      	cmp	r3, #0
 8009262:	d005      	beq.n	8009270 <UART_SetConfig+0x278>
 8009264:	e01d      	b.n	80092a2 <UART_SetConfig+0x2aa>
 8009266:	2b04      	cmp	r3, #4
 8009268:	d012      	beq.n	8009290 <UART_SetConfig+0x298>
 800926a:	2b08      	cmp	r3, #8
 800926c:	d015      	beq.n	800929a <UART_SetConfig+0x2a2>
 800926e:	e018      	b.n	80092a2 <UART_SetConfig+0x2aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009270:	f7fd fe08 	bl	8006e84 <HAL_RCC_GetPCLK1Freq>
 8009274:	0003      	movs	r3, r0
 8009276:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009278:	e01d      	b.n	80092b6 <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800927a:	4b3d      	ldr	r3, [pc, #244]	; (8009370 <UART_SetConfig+0x378>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2210      	movs	r2, #16
 8009280:	4013      	ands	r3, r2
 8009282:	d002      	beq.n	800928a <UART_SetConfig+0x292>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8009284:	4b3e      	ldr	r3, [pc, #248]	; (8009380 <UART_SetConfig+0x388>)
 8009286:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009288:	e015      	b.n	80092b6 <UART_SetConfig+0x2be>
          pclk = (uint32_t) HSI_VALUE;
 800928a:	4b3e      	ldr	r3, [pc, #248]	; (8009384 <UART_SetConfig+0x38c>)
 800928c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800928e:	e012      	b.n	80092b6 <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009290:	f7fd fd4c 	bl	8006d2c <HAL_RCC_GetSysClockFreq>
 8009294:	0003      	movs	r3, r0
 8009296:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009298:	e00d      	b.n	80092b6 <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800929a:	2380      	movs	r3, #128	; 0x80
 800929c:	021b      	lsls	r3, r3, #8
 800929e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80092a0:	e009      	b.n	80092b6 <UART_SetConfig+0x2be>
      default:
        pclk = 0U;
 80092a2:	2300      	movs	r3, #0
 80092a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80092a6:	231a      	movs	r3, #26
 80092a8:	2218      	movs	r2, #24
 80092aa:	4694      	mov	ip, r2
 80092ac:	44bc      	add	ip, r7
 80092ae:	4463      	add	r3, ip
 80092b0:	2201      	movs	r2, #1
 80092b2:	701a      	strb	r2, [r3, #0]
        break;
 80092b4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80092b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d100      	bne.n	80092be <UART_SetConfig+0x2c6>
 80092bc:	e13c      	b.n	8009538 <UART_SetConfig+0x540>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	685a      	ldr	r2, [r3, #4]
 80092c2:	0013      	movs	r3, r2
 80092c4:	005b      	lsls	r3, r3, #1
 80092c6:	189b      	adds	r3, r3, r2
 80092c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d305      	bcc.n	80092da <UART_SetConfig+0x2e2>
          (pclk > (4096U * huart->Init.BaudRate)))
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80092d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d907      	bls.n	80092ea <UART_SetConfig+0x2f2>
      {
        ret = HAL_ERROR;
 80092da:	231a      	movs	r3, #26
 80092dc:	2218      	movs	r2, #24
 80092de:	4694      	mov	ip, r2
 80092e0:	44bc      	add	ip, r7
 80092e2:	4463      	add	r3, ip
 80092e4:	2201      	movs	r2, #1
 80092e6:	701a      	strb	r2, [r3, #0]
 80092e8:	e126      	b.n	8009538 <UART_SetConfig+0x540>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80092ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ec:	613b      	str	r3, [r7, #16]
 80092ee:	2300      	movs	r3, #0
 80092f0:	617b      	str	r3, [r7, #20]
 80092f2:	6939      	ldr	r1, [r7, #16]
 80092f4:	697a      	ldr	r2, [r7, #20]
 80092f6:	000b      	movs	r3, r1
 80092f8:	0e1b      	lsrs	r3, r3, #24
 80092fa:	0010      	movs	r0, r2
 80092fc:	0205      	lsls	r5, r0, #8
 80092fe:	431d      	orrs	r5, r3
 8009300:	000b      	movs	r3, r1
 8009302:	021c      	lsls	r4, r3, #8
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	085b      	lsrs	r3, r3, #1
 800930a:	60bb      	str	r3, [r7, #8]
 800930c:	2300      	movs	r3, #0
 800930e:	60fb      	str	r3, [r7, #12]
 8009310:	68b8      	ldr	r0, [r7, #8]
 8009312:	68f9      	ldr	r1, [r7, #12]
 8009314:	1900      	adds	r0, r0, r4
 8009316:	4169      	adcs	r1, r5
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	603b      	str	r3, [r7, #0]
 800931e:	2300      	movs	r3, #0
 8009320:	607b      	str	r3, [r7, #4]
 8009322:	683a      	ldr	r2, [r7, #0]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f7f7 f8b5 	bl	8000494 <__aeabi_uldivmod>
 800932a:	0003      	movs	r3, r0
 800932c:	000c      	movs	r4, r1
 800932e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009332:	4a15      	ldr	r2, [pc, #84]	; (8009388 <UART_SetConfig+0x390>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d908      	bls.n	800934a <UART_SetConfig+0x352>
 8009338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933a:	4a14      	ldr	r2, [pc, #80]	; (800938c <UART_SetConfig+0x394>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d804      	bhi.n	800934a <UART_SetConfig+0x352>
        {
          huart->Instance->BRR = usartdiv;
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009346:	60da      	str	r2, [r3, #12]
 8009348:	e0f6      	b.n	8009538 <UART_SetConfig+0x540>
        }
        else
        {
          ret = HAL_ERROR;
 800934a:	231a      	movs	r3, #26
 800934c:	2218      	movs	r2, #24
 800934e:	4694      	mov	ip, r2
 8009350:	44bc      	add	ip, r7
 8009352:	4463      	add	r3, ip
 8009354:	2201      	movs	r2, #1
 8009356:	701a      	strb	r2, [r3, #0]
 8009358:	e0ee      	b.n	8009538 <UART_SetConfig+0x540>
 800935a:	46c0      	nop			; (mov r8, r8)
 800935c:	efff69f3 	.word	0xefff69f3
 8009360:	ffffcfff 	.word	0xffffcfff
 8009364:	40004800 	.word	0x40004800
 8009368:	fffff4ff 	.word	0xfffff4ff
 800936c:	40013800 	.word	0x40013800
 8009370:	40021000 	.word	0x40021000
 8009374:	40004400 	.word	0x40004400
 8009378:	40004c00 	.word	0x40004c00
 800937c:	40005000 	.word	0x40005000
 8009380:	003d0900 	.word	0x003d0900
 8009384:	00f42400 	.word	0x00f42400
 8009388:	000002ff 	.word	0x000002ff
 800938c:	000fffff 	.word	0x000fffff
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	69da      	ldr	r2, [r3, #28]
 8009394:	2380      	movs	r3, #128	; 0x80
 8009396:	021b      	lsls	r3, r3, #8
 8009398:	429a      	cmp	r2, r3
 800939a:	d000      	beq.n	800939e <UART_SetConfig+0x3a6>
 800939c:	e073      	b.n	8009486 <UART_SetConfig+0x48e>
  {
    switch (clocksource)
 800939e:	231b      	movs	r3, #27
 80093a0:	2218      	movs	r2, #24
 80093a2:	4694      	mov	ip, r2
 80093a4:	44bc      	add	ip, r7
 80093a6:	4463      	add	r3, ip
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	2b08      	cmp	r3, #8
 80093ac:	d822      	bhi.n	80093f4 <UART_SetConfig+0x3fc>
 80093ae:	009a      	lsls	r2, r3, #2
 80093b0:	4b69      	ldr	r3, [pc, #420]	; (8009558 <UART_SetConfig+0x560>)
 80093b2:	18d3      	adds	r3, r2, r3
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093b8:	f7fd fd64 	bl	8006e84 <HAL_RCC_GetPCLK1Freq>
 80093bc:	0003      	movs	r3, r0
 80093be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093c0:	e022      	b.n	8009408 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093c2:	f7fd fd75 	bl	8006eb0 <HAL_RCC_GetPCLK2Freq>
 80093c6:	0003      	movs	r3, r0
 80093c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093ca:	e01d      	b.n	8009408 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093cc:	4b63      	ldr	r3, [pc, #396]	; (800955c <UART_SetConfig+0x564>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2210      	movs	r2, #16
 80093d2:	4013      	ands	r3, r2
 80093d4:	d002      	beq.n	80093dc <UART_SetConfig+0x3e4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80093d6:	4b62      	ldr	r3, [pc, #392]	; (8009560 <UART_SetConfig+0x568>)
 80093d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80093da:	e015      	b.n	8009408 <UART_SetConfig+0x410>
          pclk = (uint32_t) HSI_VALUE;
 80093dc:	4b61      	ldr	r3, [pc, #388]	; (8009564 <UART_SetConfig+0x56c>)
 80093de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093e0:	e012      	b.n	8009408 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093e2:	f7fd fca3 	bl	8006d2c <HAL_RCC_GetSysClockFreq>
 80093e6:	0003      	movs	r3, r0
 80093e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093ea:	e00d      	b.n	8009408 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093ec:	2380      	movs	r3, #128	; 0x80
 80093ee:	021b      	lsls	r3, r3, #8
 80093f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093f2:	e009      	b.n	8009408 <UART_SetConfig+0x410>
      default:
        pclk = 0U;
 80093f4:	2300      	movs	r3, #0
 80093f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80093f8:	231a      	movs	r3, #26
 80093fa:	2218      	movs	r2, #24
 80093fc:	4694      	mov	ip, r2
 80093fe:	44bc      	add	ip, r7
 8009400:	4463      	add	r3, ip
 8009402:	2201      	movs	r2, #1
 8009404:	701a      	strb	r2, [r3, #0]
        break;
 8009406:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800940a:	2b00      	cmp	r3, #0
 800940c:	d100      	bne.n	8009410 <UART_SetConfig+0x418>
 800940e:	e093      	b.n	8009538 <UART_SetConfig+0x540>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009412:	005a      	lsls	r2, r3, #1
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	085b      	lsrs	r3, r3, #1
 800941a:	18d2      	adds	r2, r2, r3
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	0019      	movs	r1, r3
 8009422:	0010      	movs	r0, r2
 8009424:	f7f6 fe82 	bl	800012c <__udivsi3>
 8009428:	0003      	movs	r3, r0
 800942a:	b29b      	uxth	r3, r3
 800942c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800942e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009430:	2b0f      	cmp	r3, #15
 8009432:	d920      	bls.n	8009476 <UART_SetConfig+0x47e>
 8009434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009436:	4a4c      	ldr	r2, [pc, #304]	; (8009568 <UART_SetConfig+0x570>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d81c      	bhi.n	8009476 <UART_SetConfig+0x47e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800943c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943e:	b29a      	uxth	r2, r3
 8009440:	200e      	movs	r0, #14
 8009442:	2418      	movs	r4, #24
 8009444:	193b      	adds	r3, r7, r4
 8009446:	181b      	adds	r3, r3, r0
 8009448:	210f      	movs	r1, #15
 800944a:	438a      	bics	r2, r1
 800944c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800944e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009450:	085b      	lsrs	r3, r3, #1
 8009452:	b29b      	uxth	r3, r3
 8009454:	2207      	movs	r2, #7
 8009456:	4013      	ands	r3, r2
 8009458:	b299      	uxth	r1, r3
 800945a:	193b      	adds	r3, r7, r4
 800945c:	181b      	adds	r3, r3, r0
 800945e:	193a      	adds	r2, r7, r4
 8009460:	1812      	adds	r2, r2, r0
 8009462:	8812      	ldrh	r2, [r2, #0]
 8009464:	430a      	orrs	r2, r1
 8009466:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	193a      	adds	r2, r7, r4
 800946e:	1812      	adds	r2, r2, r0
 8009470:	8812      	ldrh	r2, [r2, #0]
 8009472:	60da      	str	r2, [r3, #12]
 8009474:	e060      	b.n	8009538 <UART_SetConfig+0x540>
      }
      else
      {
        ret = HAL_ERROR;
 8009476:	231a      	movs	r3, #26
 8009478:	2218      	movs	r2, #24
 800947a:	4694      	mov	ip, r2
 800947c:	44bc      	add	ip, r7
 800947e:	4463      	add	r3, ip
 8009480:	2201      	movs	r2, #1
 8009482:	701a      	strb	r2, [r3, #0]
 8009484:	e058      	b.n	8009538 <UART_SetConfig+0x540>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009486:	231b      	movs	r3, #27
 8009488:	2218      	movs	r2, #24
 800948a:	4694      	mov	ip, r2
 800948c:	44bc      	add	ip, r7
 800948e:	4463      	add	r3, ip
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	2b08      	cmp	r3, #8
 8009494:	d822      	bhi.n	80094dc <UART_SetConfig+0x4e4>
 8009496:	009a      	lsls	r2, r3, #2
 8009498:	4b34      	ldr	r3, [pc, #208]	; (800956c <UART_SetConfig+0x574>)
 800949a:	18d3      	adds	r3, r2, r3
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094a0:	f7fd fcf0 	bl	8006e84 <HAL_RCC_GetPCLK1Freq>
 80094a4:	0003      	movs	r3, r0
 80094a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094a8:	e022      	b.n	80094f0 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094aa:	f7fd fd01 	bl	8006eb0 <HAL_RCC_GetPCLK2Freq>
 80094ae:	0003      	movs	r3, r0
 80094b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094b2:	e01d      	b.n	80094f0 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094b4:	4b29      	ldr	r3, [pc, #164]	; (800955c <UART_SetConfig+0x564>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2210      	movs	r2, #16
 80094ba:	4013      	ands	r3, r2
 80094bc:	d002      	beq.n	80094c4 <UART_SetConfig+0x4cc>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80094be:	4b28      	ldr	r3, [pc, #160]	; (8009560 <UART_SetConfig+0x568>)
 80094c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80094c2:	e015      	b.n	80094f0 <UART_SetConfig+0x4f8>
          pclk = (uint32_t) HSI_VALUE;
 80094c4:	4b27      	ldr	r3, [pc, #156]	; (8009564 <UART_SetConfig+0x56c>)
 80094c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094c8:	e012      	b.n	80094f0 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094ca:	f7fd fc2f 	bl	8006d2c <HAL_RCC_GetSysClockFreq>
 80094ce:	0003      	movs	r3, r0
 80094d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094d2:	e00d      	b.n	80094f0 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094d4:	2380      	movs	r3, #128	; 0x80
 80094d6:	021b      	lsls	r3, r3, #8
 80094d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094da:	e009      	b.n	80094f0 <UART_SetConfig+0x4f8>
      default:
        pclk = 0U;
 80094dc:	2300      	movs	r3, #0
 80094de:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80094e0:	231a      	movs	r3, #26
 80094e2:	2218      	movs	r2, #24
 80094e4:	4694      	mov	ip, r2
 80094e6:	44bc      	add	ip, r7
 80094e8:	4463      	add	r3, ip
 80094ea:	2201      	movs	r2, #1
 80094ec:	701a      	strb	r2, [r3, #0]
        break;
 80094ee:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80094f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d020      	beq.n	8009538 <UART_SetConfig+0x540>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	085a      	lsrs	r2, r3, #1
 80094fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fe:	18d2      	adds	r2, r2, r3
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	0019      	movs	r1, r3
 8009506:	0010      	movs	r0, r2
 8009508:	f7f6 fe10 	bl	800012c <__udivsi3>
 800950c:	0003      	movs	r3, r0
 800950e:	b29b      	uxth	r3, r3
 8009510:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009514:	2b0f      	cmp	r3, #15
 8009516:	d908      	bls.n	800952a <UART_SetConfig+0x532>
 8009518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951a:	4a13      	ldr	r2, [pc, #76]	; (8009568 <UART_SetConfig+0x570>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d804      	bhi.n	800952a <UART_SetConfig+0x532>
      {
        huart->Instance->BRR = usartdiv;
 8009520:	69fb      	ldr	r3, [r7, #28]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009526:	60da      	str	r2, [r3, #12]
 8009528:	e006      	b.n	8009538 <UART_SetConfig+0x540>
      }
      else
      {
        ret = HAL_ERROR;
 800952a:	231a      	movs	r3, #26
 800952c:	2218      	movs	r2, #24
 800952e:	4694      	mov	ip, r2
 8009530:	44bc      	add	ip, r7
 8009532:	4463      	add	r3, ip
 8009534:	2201      	movs	r2, #1
 8009536:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	2200      	movs	r2, #0
 800953c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	2200      	movs	r2, #0
 8009542:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009544:	231a      	movs	r3, #26
 8009546:	2218      	movs	r2, #24
 8009548:	4694      	mov	ip, r2
 800954a:	44bc      	add	ip, r7
 800954c:	4463      	add	r3, ip
 800954e:	781b      	ldrb	r3, [r3, #0]
}
 8009550:	0018      	movs	r0, r3
 8009552:	46bd      	mov	sp, r7
 8009554:	b00e      	add	sp, #56	; 0x38
 8009556:	bdb0      	pop	{r4, r5, r7, pc}
 8009558:	0800ea0c 	.word	0x0800ea0c
 800955c:	40021000 	.word	0x40021000
 8009560:	003d0900 	.word	0x003d0900
 8009564:	00f42400 	.word	0x00f42400
 8009568:	0000ffff 	.word	0x0000ffff
 800956c:	0800ea30 	.word	0x0800ea30

08009570 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957c:	2201      	movs	r2, #1
 800957e:	4013      	ands	r3, r2
 8009580:	d00b      	beq.n	800959a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	4a4a      	ldr	r2, [pc, #296]	; (80096b4 <UART_AdvFeatureConfig+0x144>)
 800958a:	4013      	ands	r3, r2
 800958c:	0019      	movs	r1, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	430a      	orrs	r2, r1
 8009598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959e:	2202      	movs	r2, #2
 80095a0:	4013      	ands	r3, r2
 80095a2:	d00b      	beq.n	80095bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	4a43      	ldr	r2, [pc, #268]	; (80096b8 <UART_AdvFeatureConfig+0x148>)
 80095ac:	4013      	ands	r3, r2
 80095ae:	0019      	movs	r1, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	430a      	orrs	r2, r1
 80095ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c0:	2204      	movs	r2, #4
 80095c2:	4013      	ands	r3, r2
 80095c4:	d00b      	beq.n	80095de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	4a3b      	ldr	r2, [pc, #236]	; (80096bc <UART_AdvFeatureConfig+0x14c>)
 80095ce:	4013      	ands	r3, r2
 80095d0:	0019      	movs	r1, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	430a      	orrs	r2, r1
 80095dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e2:	2208      	movs	r2, #8
 80095e4:	4013      	ands	r3, r2
 80095e6:	d00b      	beq.n	8009600 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	4a34      	ldr	r2, [pc, #208]	; (80096c0 <UART_AdvFeatureConfig+0x150>)
 80095f0:	4013      	ands	r3, r2
 80095f2:	0019      	movs	r1, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	430a      	orrs	r2, r1
 80095fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009604:	2210      	movs	r2, #16
 8009606:	4013      	ands	r3, r2
 8009608:	d00b      	beq.n	8009622 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	4a2c      	ldr	r2, [pc, #176]	; (80096c4 <UART_AdvFeatureConfig+0x154>)
 8009612:	4013      	ands	r3, r2
 8009614:	0019      	movs	r1, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	430a      	orrs	r2, r1
 8009620:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009626:	2220      	movs	r2, #32
 8009628:	4013      	ands	r3, r2
 800962a:	d00b      	beq.n	8009644 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	4a25      	ldr	r2, [pc, #148]	; (80096c8 <UART_AdvFeatureConfig+0x158>)
 8009634:	4013      	ands	r3, r2
 8009636:	0019      	movs	r1, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	430a      	orrs	r2, r1
 8009642:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009648:	2240      	movs	r2, #64	; 0x40
 800964a:	4013      	ands	r3, r2
 800964c:	d01d      	beq.n	800968a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	4a1d      	ldr	r2, [pc, #116]	; (80096cc <UART_AdvFeatureConfig+0x15c>)
 8009656:	4013      	ands	r3, r2
 8009658:	0019      	movs	r1, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	430a      	orrs	r2, r1
 8009664:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800966a:	2380      	movs	r3, #128	; 0x80
 800966c:	035b      	lsls	r3, r3, #13
 800966e:	429a      	cmp	r2, r3
 8009670:	d10b      	bne.n	800968a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	4a15      	ldr	r2, [pc, #84]	; (80096d0 <UART_AdvFeatureConfig+0x160>)
 800967a:	4013      	ands	r3, r2
 800967c:	0019      	movs	r1, r3
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	430a      	orrs	r2, r1
 8009688:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968e:	2280      	movs	r2, #128	; 0x80
 8009690:	4013      	ands	r3, r2
 8009692:	d00b      	beq.n	80096ac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	4a0e      	ldr	r2, [pc, #56]	; (80096d4 <UART_AdvFeatureConfig+0x164>)
 800969c:	4013      	ands	r3, r2
 800969e:	0019      	movs	r1, r3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	430a      	orrs	r2, r1
 80096aa:	605a      	str	r2, [r3, #4]
  }
}
 80096ac:	46c0      	nop			; (mov r8, r8)
 80096ae:	46bd      	mov	sp, r7
 80096b0:	b002      	add	sp, #8
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	fffdffff 	.word	0xfffdffff
 80096b8:	fffeffff 	.word	0xfffeffff
 80096bc:	fffbffff 	.word	0xfffbffff
 80096c0:	ffff7fff 	.word	0xffff7fff
 80096c4:	ffffefff 	.word	0xffffefff
 80096c8:	ffffdfff 	.word	0xffffdfff
 80096cc:	ffefffff 	.word	0xffefffff
 80096d0:	ff9fffff 	.word	0xff9fffff
 80096d4:	fff7ffff 	.word	0xfff7ffff

080096d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b086      	sub	sp, #24
 80096dc:	af02      	add	r7, sp, #8
 80096de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2280      	movs	r2, #128	; 0x80
 80096e4:	2100      	movs	r1, #0
 80096e6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80096e8:	f7fb fe62 	bl	80053b0 <HAL_GetTick>
 80096ec:	0003      	movs	r3, r0
 80096ee:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2208      	movs	r2, #8
 80096f8:	4013      	ands	r3, r2
 80096fa:	2b08      	cmp	r3, #8
 80096fc:	d10d      	bne.n	800971a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	2380      	movs	r3, #128	; 0x80
 8009702:	0399      	lsls	r1, r3, #14
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	4b18      	ldr	r3, [pc, #96]	; (8009768 <UART_CheckIdleState+0x90>)
 8009708:	9300      	str	r3, [sp, #0]
 800970a:	0013      	movs	r3, r2
 800970c:	2200      	movs	r2, #0
 800970e:	f000 f82d 	bl	800976c <UART_WaitOnFlagUntilTimeout>
 8009712:	1e03      	subs	r3, r0, #0
 8009714:	d001      	beq.n	800971a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009716:	2303      	movs	r3, #3
 8009718:	e022      	b.n	8009760 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2204      	movs	r2, #4
 8009722:	4013      	ands	r3, r2
 8009724:	2b04      	cmp	r3, #4
 8009726:	d10d      	bne.n	8009744 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	2380      	movs	r3, #128	; 0x80
 800972c:	03d9      	lsls	r1, r3, #15
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	4b0d      	ldr	r3, [pc, #52]	; (8009768 <UART_CheckIdleState+0x90>)
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	0013      	movs	r3, r2
 8009736:	2200      	movs	r2, #0
 8009738:	f000 f818 	bl	800976c <UART_WaitOnFlagUntilTimeout>
 800973c:	1e03      	subs	r3, r0, #0
 800973e:	d001      	beq.n	8009744 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009740:	2303      	movs	r3, #3
 8009742:	e00d      	b.n	8009760 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2220      	movs	r2, #32
 8009748:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2220      	movs	r2, #32
 800974e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2274      	movs	r2, #116	; 0x74
 800975a:	2100      	movs	r1, #0
 800975c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	0018      	movs	r0, r3
 8009762:	46bd      	mov	sp, r7
 8009764:	b004      	add	sp, #16
 8009766:	bd80      	pop	{r7, pc}
 8009768:	01ffffff 	.word	0x01ffffff

0800976c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b094      	sub	sp, #80	; 0x50
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	603b      	str	r3, [r7, #0]
 8009778:	1dfb      	adds	r3, r7, #7
 800977a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800977c:	e09b      	b.n	80098b6 <UART_WaitOnFlagUntilTimeout+0x14a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800977e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009780:	3301      	adds	r3, #1
 8009782:	d100      	bne.n	8009786 <UART_WaitOnFlagUntilTimeout+0x1a>
 8009784:	e097      	b.n	80098b6 <UART_WaitOnFlagUntilTimeout+0x14a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009786:	f7fb fe13 	bl	80053b0 <HAL_GetTick>
 800978a:	0002      	movs	r2, r0
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	1ad3      	subs	r3, r2, r3
 8009790:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009792:	429a      	cmp	r2, r3
 8009794:	d302      	bcc.n	800979c <UART_WaitOnFlagUntilTimeout+0x30>
 8009796:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009798:	2b00      	cmp	r3, #0
 800979a:	d139      	bne.n	8009810 <UART_WaitOnFlagUntilTimeout+0xa4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800979c:	f3ef 8310 	mrs	r3, PRIMASK
 80097a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80097a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80097a4:	647b      	str	r3, [r7, #68]	; 0x44
 80097a6:	2301      	movs	r3, #1
 80097a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ac:	f383 8810 	msr	PRIMASK, r3
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4949      	ldr	r1, [pc, #292]	; (80098e0 <UART_WaitOnFlagUntilTimeout+0x174>)
 80097bc:	400a      	ands	r2, r1
 80097be:	601a      	str	r2, [r3, #0]
 80097c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097c2:	633b      	str	r3, [r7, #48]	; 0x30
 80097c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c6:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097ca:	f3ef 8310 	mrs	r3, PRIMASK
 80097ce:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80097d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097d2:	643b      	str	r3, [r7, #64]	; 0x40
 80097d4:	2301      	movs	r3, #1
 80097d6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097da:	f383 8810 	msr	PRIMASK, r3
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	689a      	ldr	r2, [r3, #8]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2101      	movs	r1, #1
 80097ea:	438a      	bics	r2, r1
 80097ec:	609a      	str	r2, [r3, #8]
 80097ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097f4:	f383 8810 	msr	PRIMASK, r3

        huart->gState = HAL_UART_STATE_READY;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2220      	movs	r2, #32
 80097fc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2220      	movs	r2, #32
 8009802:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2274      	movs	r2, #116	; 0x74
 8009808:	2100      	movs	r1, #0
 800980a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800980c:	2303      	movs	r3, #3
 800980e:	e063      	b.n	80098d8 <UART_WaitOnFlagUntilTimeout+0x16c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2204      	movs	r2, #4
 8009818:	4013      	ands	r3, r2
 800981a:	d04c      	beq.n	80098b6 <UART_WaitOnFlagUntilTimeout+0x14a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	69da      	ldr	r2, [r3, #28]
 8009822:	2380      	movs	r3, #128	; 0x80
 8009824:	011b      	lsls	r3, r3, #4
 8009826:	401a      	ands	r2, r3
 8009828:	2380      	movs	r3, #128	; 0x80
 800982a:	011b      	lsls	r3, r3, #4
 800982c:	429a      	cmp	r2, r3
 800982e:	d142      	bne.n	80098b6 <UART_WaitOnFlagUntilTimeout+0x14a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2280      	movs	r2, #128	; 0x80
 8009836:	0112      	lsls	r2, r2, #4
 8009838:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800983a:	f3ef 8310 	mrs	r3, PRIMASK
 800983e:	613b      	str	r3, [r7, #16]
  return(result);
 8009840:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009842:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009844:	2301      	movs	r3, #1
 8009846:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	f383 8810 	msr	PRIMASK, r3
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4921      	ldr	r1, [pc, #132]	; (80098e0 <UART_WaitOnFlagUntilTimeout+0x174>)
 800985a:	400a      	ands	r2, r1
 800985c:	601a      	str	r2, [r3, #0]
 800985e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009860:	61bb      	str	r3, [r7, #24]
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009868:	f3ef 8310 	mrs	r3, PRIMASK
 800986c:	61fb      	str	r3, [r7, #28]
  return(result);
 800986e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009870:	64bb      	str	r3, [r7, #72]	; 0x48
 8009872:	2301      	movs	r3, #1
 8009874:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009876:	6a3b      	ldr	r3, [r7, #32]
 8009878:	f383 8810 	msr	PRIMASK, r3
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	689a      	ldr	r2, [r3, #8]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2101      	movs	r1, #1
 8009888:	438a      	bics	r2, r1
 800988a:	609a      	str	r2, [r3, #8]
 800988c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800988e:	627b      	str	r3, [r7, #36]	; 0x24
 8009890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009892:	f383 8810 	msr	PRIMASK, r3

          huart->gState = HAL_UART_STATE_READY;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2220      	movs	r2, #32
 800989a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2220      	movs	r2, #32
 80098a0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2280      	movs	r2, #128	; 0x80
 80098a6:	2120      	movs	r1, #32
 80098a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2274      	movs	r2, #116	; 0x74
 80098ae:	2100      	movs	r1, #0
 80098b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80098b2:	2303      	movs	r3, #3
 80098b4:	e010      	b.n	80098d8 <UART_WaitOnFlagUntilTimeout+0x16c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	69db      	ldr	r3, [r3, #28]
 80098bc:	68ba      	ldr	r2, [r7, #8]
 80098be:	4013      	ands	r3, r2
 80098c0:	68ba      	ldr	r2, [r7, #8]
 80098c2:	1ad3      	subs	r3, r2, r3
 80098c4:	425a      	negs	r2, r3
 80098c6:	4153      	adcs	r3, r2
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	001a      	movs	r2, r3
 80098cc:	1dfb      	adds	r3, r7, #7
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d100      	bne.n	80098d6 <UART_WaitOnFlagUntilTimeout+0x16a>
 80098d4:	e753      	b.n	800977e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	0018      	movs	r0, r3
 80098da:	46bd      	mov	sp, r7
 80098dc:	b014      	add	sp, #80	; 0x50
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	fffffe5f 	.word	0xfffffe5f

080098e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b090      	sub	sp, #64	; 0x40
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	1dbb      	adds	r3, r7, #6
 80098f0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	1dba      	adds	r2, r7, #6
 80098fc:	2158      	movs	r1, #88	; 0x58
 80098fe:	8812      	ldrh	r2, [r2, #0]
 8009900:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2280      	movs	r2, #128	; 0x80
 8009906:	2100      	movs	r1, #0
 8009908:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2222      	movs	r2, #34	; 0x22
 800990e:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009914:	2b00      	cmp	r3, #0
 8009916:	d02b      	beq.n	8009970 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800991c:	4a3c      	ldr	r2, [pc, #240]	; (8009a10 <UART_Start_Receive_DMA+0x12c>)
 800991e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009924:	4a3b      	ldr	r2, [pc, #236]	; (8009a14 <UART_Start_Receive_DMA+0x130>)
 8009926:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800992c:	4a3a      	ldr	r2, [pc, #232]	; (8009a18 <UART_Start_Receive_DMA+0x134>)
 800992e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009934:	2200      	movs	r2, #0
 8009936:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	3324      	adds	r3, #36	; 0x24
 8009942:	0019      	movs	r1, r3
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009948:	001a      	movs	r2, r3
 800994a:	1dbb      	adds	r3, r7, #6
 800994c:	881b      	ldrh	r3, [r3, #0]
 800994e:	f7fb fefa 	bl	8005746 <HAL_DMA_Start_IT>
 8009952:	1e03      	subs	r3, r0, #0
 8009954:	d00c      	beq.n	8009970 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2280      	movs	r2, #128	; 0x80
 800995a:	2110      	movs	r1, #16
 800995c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2274      	movs	r2, #116	; 0x74
 8009962:	2100      	movs	r1, #0
 8009964:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2220      	movs	r2, #32
 800996a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	e04a      	b.n	8009a06 <UART_Start_Receive_DMA+0x122>
    }
  }
  __HAL_UNLOCK(huart);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2274      	movs	r2, #116	; 0x74
 8009974:	2100      	movs	r1, #0
 8009976:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009978:	f3ef 8310 	mrs	r3, PRIMASK
 800997c:	613b      	str	r3, [r7, #16]
  return(result);
 800997e:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009980:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009982:	2301      	movs	r3, #1
 8009984:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f383 8810 	msr	PRIMASK, r3
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2180      	movs	r1, #128	; 0x80
 8009998:	0049      	lsls	r1, r1, #1
 800999a:	430a      	orrs	r2, r1
 800999c:	601a      	str	r2, [r3, #0]
 800999e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099a0:	61bb      	str	r3, [r7, #24]
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099a8:	f3ef 8310 	mrs	r3, PRIMASK
 80099ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80099ae:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80099b2:	2301      	movs	r3, #1
 80099b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099b6:	6a3b      	ldr	r3, [r7, #32]
 80099b8:	f383 8810 	msr	PRIMASK, r3
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	689a      	ldr	r2, [r3, #8]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2101      	movs	r1, #1
 80099c8:	430a      	orrs	r2, r1
 80099ca:	609a      	str	r2, [r3, #8]
 80099cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ce:	627b      	str	r3, [r7, #36]	; 0x24
 80099d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d2:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099d6:	f3ef 8310 	mrs	r3, PRIMASK
 80099da:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80099dc:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099de:	637b      	str	r3, [r7, #52]	; 0x34
 80099e0:	2301      	movs	r3, #1
 80099e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e6:	f383 8810 	msr	PRIMASK, r3
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	689a      	ldr	r2, [r3, #8]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2140      	movs	r1, #64	; 0x40
 80099f6:	430a      	orrs	r2, r1
 80099f8:	609a      	str	r2, [r3, #8]
 80099fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099fc:	633b      	str	r3, [r7, #48]	; 0x30
 80099fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a00:	f383 8810 	msr	PRIMASK, r3

  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	0018      	movs	r0, r3
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	b010      	add	sp, #64	; 0x40
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	46c0      	nop			; (mov r8, r8)
 8009a10:	08009bc9 	.word	0x08009bc9
 8009a14:	08009ce1 	.word	0x08009ce1
 8009a18:	08009d1d 	.word	0x08009d1d

08009a1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b086      	sub	sp, #24
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a24:	f3ef 8310 	mrs	r3, PRIMASK
 8009a28:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a2a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009a2c:	617b      	str	r3, [r7, #20]
 8009a2e:	2301      	movs	r3, #1
 8009a30:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f383 8810 	msr	PRIMASK, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	21c0      	movs	r1, #192	; 0xc0
 8009a44:	438a      	bics	r2, r1
 8009a46:	601a      	str	r2, [r3, #0]
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	613b      	str	r3, [r7, #16]
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	f383 8810 	msr	PRIMASK, r3

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2220      	movs	r2, #32
 8009a56:	679a      	str	r2, [r3, #120]	; 0x78
}
 8009a58:	46c0      	nop			; (mov r8, r8)
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	b006      	add	sp, #24
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b08e      	sub	sp, #56	; 0x38
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a68:	f3ef 8310 	mrs	r3, PRIMASK
 8009a6c:	617b      	str	r3, [r7, #20]
  return(result);
 8009a6e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a70:	637b      	str	r3, [r7, #52]	; 0x34
 8009a72:	2301      	movs	r3, #1
 8009a74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	f383 8810 	msr	PRIMASK, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4923      	ldr	r1, [pc, #140]	; (8009b14 <UART_EndRxTransfer+0xb4>)
 8009a88:	400a      	ands	r2, r1
 8009a8a:	601a      	str	r2, [r3, #0]
 8009a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a8e:	61fb      	str	r3, [r7, #28]
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a96:	f3ef 8310 	mrs	r3, PRIMASK
 8009a9a:	623b      	str	r3, [r7, #32]
  return(result);
 8009a9c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a9e:	633b      	str	r3, [r7, #48]	; 0x30
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa6:	f383 8810 	msr	PRIMASK, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	689a      	ldr	r2, [r3, #8]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2101      	movs	r1, #1
 8009ab6:	438a      	bics	r2, r1
 8009ab8:	609a      	str	r2, [r3, #8]
 8009aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8009abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac0:	f383 8810 	msr	PRIMASK, r3

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d116      	bne.n	8009afa <UART_EndRxTransfer+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009acc:	f3ef 8310 	mrs	r3, PRIMASK
 8009ad0:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ad2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f383 8810 	msr	PRIMASK, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2110      	movs	r1, #16
 8009aec:	438a      	bics	r2, r1
 8009aee:	601a      	str	r2, [r3, #0]
 8009af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af2:	613b      	str	r3, [r7, #16]
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	f383 8810 	msr	PRIMASK, r3
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2220      	movs	r2, #32
 8009afe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009b0c:	46c0      	nop			; (mov r8, r8)
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	b00e      	add	sp, #56	; 0x38
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	fffffedf 	.word	0xfffffedf

08009b18 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b08c      	sub	sp, #48	; 0x30
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b24:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2220      	movs	r2, #32
 8009b2e:	4013      	ands	r3, r2
 8009b30:	d132      	bne.n	8009b98 <UART_DMATransmitCplt+0x80>
  {
    huart->TxXferCount = 0U;
 8009b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b34:	2252      	movs	r2, #82	; 0x52
 8009b36:	2100      	movs	r1, #0
 8009b38:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b3a:	f3ef 8310 	mrs	r3, PRIMASK
 8009b3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b40:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b44:	2301      	movs	r3, #1
 8009b46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	f383 8810 	msr	PRIMASK, r3
 8009b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	689a      	ldr	r2, [r3, #8]
 8009b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2180      	movs	r1, #128	; 0x80
 8009b5a:	438a      	bics	r2, r1
 8009b5c:	609a      	str	r2, [r3, #8]
 8009b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b60:	617b      	str	r3, [r7, #20]
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b68:	f3ef 8310 	mrs	r3, PRIMASK
 8009b6c:	61bb      	str	r3, [r7, #24]
  return(result);
 8009b6e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b70:	627b      	str	r3, [r7, #36]	; 0x24
 8009b72:	2301      	movs	r3, #1
 8009b74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	f383 8810 	msr	PRIMASK, r3
 8009b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2140      	movs	r1, #64	; 0x40
 8009b88:	430a      	orrs	r2, r1
 8009b8a:	601a      	str	r2, [r3, #0]
 8009b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8e:	623b      	str	r3, [r7, #32]
 8009b90:	6a3b      	ldr	r3, [r7, #32]
 8009b92:	f383 8810 	msr	PRIMASK, r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b96:	e003      	b.n	8009ba0 <UART_DMATransmitCplt+0x88>
    HAL_UART_TxCpltCallback(huart);
 8009b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b9a:	0018      	movs	r0, r3
 8009b9c:	f7ff f9f8 	bl	8008f90 <HAL_UART_TxCpltCallback>
}
 8009ba0:	46c0      	nop			; (mov r8, r8)
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	b00c      	add	sp, #48	; 0x30
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bb4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	0018      	movs	r0, r3
 8009bba:	f7ff f9f1 	bl	8008fa0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bbe:	46c0      	nop			; (mov r8, r8)
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	b004      	add	sp, #16
 8009bc4:	bd80      	pop	{r7, pc}
	...

08009bc8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b094      	sub	sp, #80	; 0x50
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd4:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2220      	movs	r2, #32
 8009bde:	4013      	ands	r3, r2
 8009be0:	d166      	bne.n	8009cb0 <UART_DMAReceiveCplt+0xe8>
  {
    huart->RxXferCount = 0U;
 8009be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009be4:	225a      	movs	r2, #90	; 0x5a
 8009be6:	2100      	movs	r1, #0
 8009be8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bea:	f3ef 8310 	mrs	r3, PRIMASK
 8009bee:	61bb      	str	r3, [r7, #24]
  return(result);
 8009bf0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	f383 8810 	msr	PRIMASK, r3
 8009bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4934      	ldr	r1, [pc, #208]	; (8009cdc <UART_DMAReceiveCplt+0x114>)
 8009c0a:	400a      	ands	r2, r1
 8009c0c:	601a      	str	r2, [r3, #0]
 8009c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c10:	623b      	str	r3, [r7, #32]
 8009c12:	6a3b      	ldr	r3, [r7, #32]
 8009c14:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c18:	f3ef 8310 	mrs	r3, PRIMASK
 8009c1c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c20:	647b      	str	r3, [r7, #68]	; 0x44
 8009c22:	2301      	movs	r3, #1
 8009c24:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c28:	f383 8810 	msr	PRIMASK, r3
 8009c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	689a      	ldr	r2, [r3, #8]
 8009c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	2101      	movs	r1, #1
 8009c38:	438a      	bics	r2, r1
 8009c3a:	609a      	str	r2, [r3, #8]
 8009c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c42:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c46:	f3ef 8310 	mrs	r3, PRIMASK
 8009c4a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8009c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c4e:	643b      	str	r3, [r7, #64]	; 0x40
 8009c50:	2301      	movs	r3, #1
 8009c52:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c56:	f383 8810 	msr	PRIMASK, r3
 8009c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	689a      	ldr	r2, [r3, #8]
 8009c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2140      	movs	r1, #64	; 0x40
 8009c66:	438a      	bics	r2, r1
 8009c68:	609a      	str	r2, [r3, #8]
 8009c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c70:	f383 8810 	msr	PRIMASK, r3

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c76:	2220      	movs	r2, #32
 8009c78:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d116      	bne.n	8009cb0 <UART_DMAReceiveCplt+0xe8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c82:	f3ef 8310 	mrs	r3, PRIMASK
 8009c86:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c88:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	f383 8810 	msr	PRIMASK, r3
 8009c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2110      	movs	r1, #16
 8009ca2:	438a      	bics	r2, r1
 8009ca4:	601a      	str	r2, [r3, #0]
 8009ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ca8:	617b      	str	r3, [r7, #20]
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	f383 8810 	msr	PRIMASK, r3
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d108      	bne.n	8009cca <UART_DMAReceiveCplt+0x102>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cba:	2258      	movs	r2, #88	; 0x58
 8009cbc:	5a9a      	ldrh	r2, [r3, r2]
 8009cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cc0:	0011      	movs	r1, r2
 8009cc2:	0018      	movs	r0, r3
 8009cc4:	f7ff f98c 	bl	8008fe0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009cc8:	e003      	b.n	8009cd2 <UART_DMAReceiveCplt+0x10a>
    HAL_UART_RxCpltCallback(huart);
 8009cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ccc:	0018      	movs	r0, r3
 8009cce:	f7ff f96f 	bl	8008fb0 <HAL_UART_RxCpltCallback>
}
 8009cd2:	46c0      	nop			; (mov r8, r8)
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	b014      	add	sp, #80	; 0x50
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	46c0      	nop			; (mov r8, r8)
 8009cdc:	fffffeff 	.word	0xfffffeff

08009ce0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cec:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d10a      	bne.n	8009d0c <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2258      	movs	r2, #88	; 0x58
 8009cfa:	5a9b      	ldrh	r3, [r3, r2]
 8009cfc:	085b      	lsrs	r3, r3, #1
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	0011      	movs	r1, r2
 8009d04:	0018      	movs	r0, r3
 8009d06:	f7ff f96b 	bl	8008fe0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009d0a:	e003      	b.n	8009d14 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	0018      	movs	r0, r3
 8009d10:	f7ff f956 	bl	8008fc0 <HAL_UART_RxHalfCpltCallback>
}
 8009d14:	46c0      	nop			; (mov r8, r8)
 8009d16:	46bd      	mov	sp, r7
 8009d18:	b004      	add	sp, #16
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b086      	sub	sp, #24
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d28:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d2e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d34:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	2280      	movs	r2, #128	; 0x80
 8009d3e:	4013      	ands	r3, r2
 8009d40:	2b80      	cmp	r3, #128	; 0x80
 8009d42:	d10a      	bne.n	8009d5a <UART_DMAError+0x3e>
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	2b21      	cmp	r3, #33	; 0x21
 8009d48:	d107      	bne.n	8009d5a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	2252      	movs	r2, #82	; 0x52
 8009d4e:	2100      	movs	r1, #0
 8009d50:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	0018      	movs	r0, r3
 8009d56:	f7ff fe61 	bl	8009a1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	2240      	movs	r2, #64	; 0x40
 8009d62:	4013      	ands	r3, r2
 8009d64:	2b40      	cmp	r3, #64	; 0x40
 8009d66:	d10a      	bne.n	8009d7e <UART_DMAError+0x62>
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2b22      	cmp	r3, #34	; 0x22
 8009d6c:	d107      	bne.n	8009d7e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	225a      	movs	r2, #90	; 0x5a
 8009d72:	2100      	movs	r1, #0
 8009d74:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	0018      	movs	r0, r3
 8009d7a:	f7ff fe71 	bl	8009a60 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	2280      	movs	r2, #128	; 0x80
 8009d82:	589b      	ldr	r3, [r3, r2]
 8009d84:	2210      	movs	r2, #16
 8009d86:	431a      	orrs	r2, r3
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	2180      	movs	r1, #128	; 0x80
 8009d8c:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	0018      	movs	r0, r3
 8009d92:	f7ff f91d 	bl	8008fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d96:	46c0      	nop			; (mov r8, r8)
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	b006      	add	sp, #24
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b084      	sub	sp, #16
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009daa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	225a      	movs	r2, #90	; 0x5a
 8009db0:	2100      	movs	r1, #0
 8009db2:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2252      	movs	r2, #82	; 0x52
 8009db8:	2100      	movs	r1, #0
 8009dba:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	0018      	movs	r0, r3
 8009dc0:	f7ff f906 	bl	8008fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009dc4:	46c0      	nop			; (mov r8, r8)
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	b004      	add	sp, #16
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b086      	sub	sp, #24
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dd4:	f3ef 8310 	mrs	r3, PRIMASK
 8009dd8:	60bb      	str	r3, [r7, #8]
  return(result);
 8009dda:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ddc:	617b      	str	r3, [r7, #20]
 8009dde:	2301      	movs	r3, #1
 8009de0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f383 8810 	msr	PRIMASK, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2140      	movs	r1, #64	; 0x40
 8009df4:	438a      	bics	r2, r1
 8009df6:	601a      	str	r2, [r3, #0]
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	613b      	str	r3, [r7, #16]
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	f383 8810 	msr	PRIMASK, r3

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2220      	movs	r2, #32
 8009e06:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	0018      	movs	r0, r3
 8009e12:	f7ff f8bd 	bl	8008f90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e16:	46c0      	nop			; (mov r8, r8)
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	b006      	add	sp, #24
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b082      	sub	sp, #8
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009e26:	46c0      	nop			; (mov r8, r8)
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	b002      	add	sp, #8
 8009e2c:	bd80      	pop	{r7, pc}
	...

08009e30 <__errno>:
 8009e30:	4b01      	ldr	r3, [pc, #4]	; (8009e38 <__errno+0x8>)
 8009e32:	6818      	ldr	r0, [r3, #0]
 8009e34:	4770      	bx	lr
 8009e36:	46c0      	nop			; (mov r8, r8)
 8009e38:	20000064 	.word	0x20000064

08009e3c <__libc_init_array>:
 8009e3c:	b570      	push	{r4, r5, r6, lr}
 8009e3e:	2600      	movs	r6, #0
 8009e40:	4d0c      	ldr	r5, [pc, #48]	; (8009e74 <__libc_init_array+0x38>)
 8009e42:	4c0d      	ldr	r4, [pc, #52]	; (8009e78 <__libc_init_array+0x3c>)
 8009e44:	1b64      	subs	r4, r4, r5
 8009e46:	10a4      	asrs	r4, r4, #2
 8009e48:	42a6      	cmp	r6, r4
 8009e4a:	d109      	bne.n	8009e60 <__libc_init_array+0x24>
 8009e4c:	2600      	movs	r6, #0
 8009e4e:	f004 fb2d 	bl	800e4ac <_init>
 8009e52:	4d0a      	ldr	r5, [pc, #40]	; (8009e7c <__libc_init_array+0x40>)
 8009e54:	4c0a      	ldr	r4, [pc, #40]	; (8009e80 <__libc_init_array+0x44>)
 8009e56:	1b64      	subs	r4, r4, r5
 8009e58:	10a4      	asrs	r4, r4, #2
 8009e5a:	42a6      	cmp	r6, r4
 8009e5c:	d105      	bne.n	8009e6a <__libc_init_array+0x2e>
 8009e5e:	bd70      	pop	{r4, r5, r6, pc}
 8009e60:	00b3      	lsls	r3, r6, #2
 8009e62:	58eb      	ldr	r3, [r5, r3]
 8009e64:	4798      	blx	r3
 8009e66:	3601      	adds	r6, #1
 8009e68:	e7ee      	b.n	8009e48 <__libc_init_array+0xc>
 8009e6a:	00b3      	lsls	r3, r6, #2
 8009e6c:	58eb      	ldr	r3, [r5, r3]
 8009e6e:	4798      	blx	r3
 8009e70:	3601      	adds	r6, #1
 8009e72:	e7f2      	b.n	8009e5a <__libc_init_array+0x1e>
 8009e74:	0800ed80 	.word	0x0800ed80
 8009e78:	0800ed80 	.word	0x0800ed80
 8009e7c:	0800ed80 	.word	0x0800ed80
 8009e80:	0800ed84 	.word	0x0800ed84

08009e84 <memcmp>:
 8009e84:	b530      	push	{r4, r5, lr}
 8009e86:	2400      	movs	r4, #0
 8009e88:	42a2      	cmp	r2, r4
 8009e8a:	d101      	bne.n	8009e90 <memcmp+0xc>
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	e005      	b.n	8009e9c <memcmp+0x18>
 8009e90:	5d03      	ldrb	r3, [r0, r4]
 8009e92:	1c65      	adds	r5, r4, #1
 8009e94:	5d0c      	ldrb	r4, [r1, r4]
 8009e96:	42a3      	cmp	r3, r4
 8009e98:	d001      	beq.n	8009e9e <memcmp+0x1a>
 8009e9a:	1b18      	subs	r0, r3, r4
 8009e9c:	bd30      	pop	{r4, r5, pc}
 8009e9e:	002c      	movs	r4, r5
 8009ea0:	e7f2      	b.n	8009e88 <memcmp+0x4>

08009ea2 <memcpy>:
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	b510      	push	{r4, lr}
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d100      	bne.n	8009eac <memcpy+0xa>
 8009eaa:	bd10      	pop	{r4, pc}
 8009eac:	5ccc      	ldrb	r4, [r1, r3]
 8009eae:	54c4      	strb	r4, [r0, r3]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	e7f8      	b.n	8009ea6 <memcpy+0x4>

08009eb4 <memset>:
 8009eb4:	0003      	movs	r3, r0
 8009eb6:	1812      	adds	r2, r2, r0
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d100      	bne.n	8009ebe <memset+0xa>
 8009ebc:	4770      	bx	lr
 8009ebe:	7019      	strb	r1, [r3, #0]
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	e7f9      	b.n	8009eb8 <memset+0x4>

08009ec4 <__cvt>:
 8009ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ec6:	b08b      	sub	sp, #44	; 0x2c
 8009ec8:	0014      	movs	r4, r2
 8009eca:	1e1d      	subs	r5, r3, #0
 8009ecc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009ece:	da53      	bge.n	8009f78 <__cvt+0xb4>
 8009ed0:	2480      	movs	r4, #128	; 0x80
 8009ed2:	0624      	lsls	r4, r4, #24
 8009ed4:	191b      	adds	r3, r3, r4
 8009ed6:	001d      	movs	r5, r3
 8009ed8:	0014      	movs	r4, r2
 8009eda:	232d      	movs	r3, #45	; 0x2d
 8009edc:	700b      	strb	r3, [r1, #0]
 8009ede:	2320      	movs	r3, #32
 8009ee0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8009ee2:	2203      	movs	r2, #3
 8009ee4:	439e      	bics	r6, r3
 8009ee6:	2e46      	cmp	r6, #70	; 0x46
 8009ee8:	d007      	beq.n	8009efa <__cvt+0x36>
 8009eea:	0033      	movs	r3, r6
 8009eec:	3b45      	subs	r3, #69	; 0x45
 8009eee:	4259      	negs	r1, r3
 8009ef0:	414b      	adcs	r3, r1
 8009ef2:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009ef4:	3a01      	subs	r2, #1
 8009ef6:	18cb      	adds	r3, r1, r3
 8009ef8:	9310      	str	r3, [sp, #64]	; 0x40
 8009efa:	ab09      	add	r3, sp, #36	; 0x24
 8009efc:	9304      	str	r3, [sp, #16]
 8009efe:	ab08      	add	r3, sp, #32
 8009f00:	9303      	str	r3, [sp, #12]
 8009f02:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f04:	9200      	str	r2, [sp, #0]
 8009f06:	9302      	str	r3, [sp, #8]
 8009f08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f0a:	0022      	movs	r2, r4
 8009f0c:	9301      	str	r3, [sp, #4]
 8009f0e:	002b      	movs	r3, r5
 8009f10:	f001 ff0e 	bl	800bd30 <_dtoa_r>
 8009f14:	0007      	movs	r7, r0
 8009f16:	2e47      	cmp	r6, #71	; 0x47
 8009f18:	d102      	bne.n	8009f20 <__cvt+0x5c>
 8009f1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f1c:	07db      	lsls	r3, r3, #31
 8009f1e:	d524      	bpl.n	8009f6a <__cvt+0xa6>
 8009f20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f22:	18fb      	adds	r3, r7, r3
 8009f24:	9307      	str	r3, [sp, #28]
 8009f26:	2e46      	cmp	r6, #70	; 0x46
 8009f28:	d114      	bne.n	8009f54 <__cvt+0x90>
 8009f2a:	783b      	ldrb	r3, [r7, #0]
 8009f2c:	2b30      	cmp	r3, #48	; 0x30
 8009f2e:	d10c      	bne.n	8009f4a <__cvt+0x86>
 8009f30:	2200      	movs	r2, #0
 8009f32:	2300      	movs	r3, #0
 8009f34:	0020      	movs	r0, r4
 8009f36:	0029      	movs	r1, r5
 8009f38:	f7f6 fa7e 	bl	8000438 <__aeabi_dcmpeq>
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	d104      	bne.n	8009f4a <__cvt+0x86>
 8009f40:	2301      	movs	r3, #1
 8009f42:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f44:	1a9b      	subs	r3, r3, r2
 8009f46:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009f48:	6013      	str	r3, [r2, #0]
 8009f4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f4c:	9a07      	ldr	r2, [sp, #28]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	18d3      	adds	r3, r2, r3
 8009f52:	9307      	str	r3, [sp, #28]
 8009f54:	2200      	movs	r2, #0
 8009f56:	2300      	movs	r3, #0
 8009f58:	0020      	movs	r0, r4
 8009f5a:	0029      	movs	r1, r5
 8009f5c:	f7f6 fa6c 	bl	8000438 <__aeabi_dcmpeq>
 8009f60:	2230      	movs	r2, #48	; 0x30
 8009f62:	2800      	cmp	r0, #0
 8009f64:	d00d      	beq.n	8009f82 <__cvt+0xbe>
 8009f66:	9b07      	ldr	r3, [sp, #28]
 8009f68:	9309      	str	r3, [sp, #36]	; 0x24
 8009f6a:	0038      	movs	r0, r7
 8009f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f6e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009f70:	1bdb      	subs	r3, r3, r7
 8009f72:	6013      	str	r3, [r2, #0]
 8009f74:	b00b      	add	sp, #44	; 0x2c
 8009f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f78:	2300      	movs	r3, #0
 8009f7a:	e7af      	b.n	8009edc <__cvt+0x18>
 8009f7c:	1c59      	adds	r1, r3, #1
 8009f7e:	9109      	str	r1, [sp, #36]	; 0x24
 8009f80:	701a      	strb	r2, [r3, #0]
 8009f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f84:	9907      	ldr	r1, [sp, #28]
 8009f86:	428b      	cmp	r3, r1
 8009f88:	d3f8      	bcc.n	8009f7c <__cvt+0xb8>
 8009f8a:	e7ee      	b.n	8009f6a <__cvt+0xa6>

08009f8c <__exponent>:
 8009f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f8e:	1c83      	adds	r3, r0, #2
 8009f90:	b085      	sub	sp, #20
 8009f92:	9301      	str	r3, [sp, #4]
 8009f94:	0006      	movs	r6, r0
 8009f96:	000c      	movs	r4, r1
 8009f98:	7002      	strb	r2, [r0, #0]
 8009f9a:	232b      	movs	r3, #43	; 0x2b
 8009f9c:	2900      	cmp	r1, #0
 8009f9e:	da01      	bge.n	8009fa4 <__exponent+0x18>
 8009fa0:	232d      	movs	r3, #45	; 0x2d
 8009fa2:	424c      	negs	r4, r1
 8009fa4:	7073      	strb	r3, [r6, #1]
 8009fa6:	2c09      	cmp	r4, #9
 8009fa8:	dd22      	ble.n	8009ff0 <__exponent+0x64>
 8009faa:	ab02      	add	r3, sp, #8
 8009fac:	1ddd      	adds	r5, r3, #7
 8009fae:	0020      	movs	r0, r4
 8009fb0:	210a      	movs	r1, #10
 8009fb2:	f7f6 fa2b 	bl	800040c <__aeabi_idivmod>
 8009fb6:	1e6f      	subs	r7, r5, #1
 8009fb8:	3130      	adds	r1, #48	; 0x30
 8009fba:	7039      	strb	r1, [r7, #0]
 8009fbc:	0020      	movs	r0, r4
 8009fbe:	210a      	movs	r1, #10
 8009fc0:	f7f6 f93e 	bl	8000240 <__divsi3>
 8009fc4:	0004      	movs	r4, r0
 8009fc6:	2809      	cmp	r0, #9
 8009fc8:	dc0b      	bgt.n	8009fe2 <__exponent+0x56>
 8009fca:	3d02      	subs	r5, #2
 8009fcc:	3430      	adds	r4, #48	; 0x30
 8009fce:	9b01      	ldr	r3, [sp, #4]
 8009fd0:	702c      	strb	r4, [r5, #0]
 8009fd2:	aa02      	add	r2, sp, #8
 8009fd4:	3207      	adds	r2, #7
 8009fd6:	0018      	movs	r0, r3
 8009fd8:	42aa      	cmp	r2, r5
 8009fda:	d804      	bhi.n	8009fe6 <__exponent+0x5a>
 8009fdc:	1b80      	subs	r0, r0, r6
 8009fde:	b005      	add	sp, #20
 8009fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fe2:	003d      	movs	r5, r7
 8009fe4:	e7e3      	b.n	8009fae <__exponent+0x22>
 8009fe6:	782a      	ldrb	r2, [r5, #0]
 8009fe8:	3501      	adds	r5, #1
 8009fea:	701a      	strb	r2, [r3, #0]
 8009fec:	3301      	adds	r3, #1
 8009fee:	e7f0      	b.n	8009fd2 <__exponent+0x46>
 8009ff0:	2330      	movs	r3, #48	; 0x30
 8009ff2:	18e4      	adds	r4, r4, r3
 8009ff4:	70b3      	strb	r3, [r6, #2]
 8009ff6:	1d30      	adds	r0, r6, #4
 8009ff8:	70f4      	strb	r4, [r6, #3]
 8009ffa:	e7ef      	b.n	8009fdc <__exponent+0x50>

08009ffc <_printf_float>:
 8009ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ffe:	b095      	sub	sp, #84	; 0x54
 800a000:	000c      	movs	r4, r1
 800a002:	920a      	str	r2, [sp, #40]	; 0x28
 800a004:	930b      	str	r3, [sp, #44]	; 0x2c
 800a006:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800a008:	9009      	str	r0, [sp, #36]	; 0x24
 800a00a:	f003 f933 	bl	800d274 <_localeconv_r>
 800a00e:	6803      	ldr	r3, [r0, #0]
 800a010:	0018      	movs	r0, r3
 800a012:	930c      	str	r3, [sp, #48]	; 0x30
 800a014:	f7f6 f878 	bl	8000108 <strlen>
 800a018:	2300      	movs	r3, #0
 800a01a:	9312      	str	r3, [sp, #72]	; 0x48
 800a01c:	6823      	ldr	r3, [r4, #0]
 800a01e:	900e      	str	r0, [sp, #56]	; 0x38
 800a020:	930d      	str	r3, [sp, #52]	; 0x34
 800a022:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a024:	7e27      	ldrb	r7, [r4, #24]
 800a026:	682b      	ldr	r3, [r5, #0]
 800a028:	2207      	movs	r2, #7
 800a02a:	05c9      	lsls	r1, r1, #23
 800a02c:	d545      	bpl.n	800a0ba <_printf_float+0xbe>
 800a02e:	189b      	adds	r3, r3, r2
 800a030:	4393      	bics	r3, r2
 800a032:	001a      	movs	r2, r3
 800a034:	3208      	adds	r2, #8
 800a036:	602a      	str	r2, [r5, #0]
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	64a2      	str	r2, [r4, #72]	; 0x48
 800a03e:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a040:	2201      	movs	r2, #1
 800a042:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800a044:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 800a046:	006b      	lsls	r3, r5, #1
 800a048:	085b      	lsrs	r3, r3, #1
 800a04a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a04c:	4252      	negs	r2, r2
 800a04e:	4bac      	ldr	r3, [pc, #688]	; (800a300 <_printf_float+0x304>)
 800a050:	0030      	movs	r0, r6
 800a052:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a054:	f7f8 fcba 	bl	80029cc <__aeabi_dcmpun>
 800a058:	2800      	cmp	r0, #0
 800a05a:	d130      	bne.n	800a0be <_printf_float+0xc2>
 800a05c:	2201      	movs	r2, #1
 800a05e:	4ba8      	ldr	r3, [pc, #672]	; (800a300 <_printf_float+0x304>)
 800a060:	4252      	negs	r2, r2
 800a062:	0030      	movs	r0, r6
 800a064:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a066:	f7f6 f9f7 	bl	8000458 <__aeabi_dcmple>
 800a06a:	2800      	cmp	r0, #0
 800a06c:	d127      	bne.n	800a0be <_printf_float+0xc2>
 800a06e:	2200      	movs	r2, #0
 800a070:	2300      	movs	r3, #0
 800a072:	0030      	movs	r0, r6
 800a074:	0029      	movs	r1, r5
 800a076:	f7f6 f9e5 	bl	8000444 <__aeabi_dcmplt>
 800a07a:	2800      	cmp	r0, #0
 800a07c:	d003      	beq.n	800a086 <_printf_float+0x8a>
 800a07e:	0023      	movs	r3, r4
 800a080:	222d      	movs	r2, #45	; 0x2d
 800a082:	3343      	adds	r3, #67	; 0x43
 800a084:	701a      	strb	r2, [r3, #0]
 800a086:	4d9f      	ldr	r5, [pc, #636]	; (800a304 <_printf_float+0x308>)
 800a088:	2f47      	cmp	r7, #71	; 0x47
 800a08a:	d800      	bhi.n	800a08e <_printf_float+0x92>
 800a08c:	4d9e      	ldr	r5, [pc, #632]	; (800a308 <_printf_float+0x30c>)
 800a08e:	2303      	movs	r3, #3
 800a090:	2600      	movs	r6, #0
 800a092:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a094:	6123      	str	r3, [r4, #16]
 800a096:	3301      	adds	r3, #1
 800a098:	439a      	bics	r2, r3
 800a09a:	6022      	str	r2, [r4, #0]
 800a09c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a09e:	aa13      	add	r2, sp, #76	; 0x4c
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	0021      	movs	r1, r4
 800a0a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0a8:	f000 f9f4 	bl	800a494 <_printf_common>
 800a0ac:	1c43      	adds	r3, r0, #1
 800a0ae:	d000      	beq.n	800a0b2 <_printf_float+0xb6>
 800a0b0:	e093      	b.n	800a1da <_printf_float+0x1de>
 800a0b2:	2001      	movs	r0, #1
 800a0b4:	4240      	negs	r0, r0
 800a0b6:	b015      	add	sp, #84	; 0x54
 800a0b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0ba:	3307      	adds	r3, #7
 800a0bc:	e7b8      	b.n	800a030 <_printf_float+0x34>
 800a0be:	0032      	movs	r2, r6
 800a0c0:	002b      	movs	r3, r5
 800a0c2:	0030      	movs	r0, r6
 800a0c4:	0029      	movs	r1, r5
 800a0c6:	f7f8 fc81 	bl	80029cc <__aeabi_dcmpun>
 800a0ca:	2800      	cmp	r0, #0
 800a0cc:	d004      	beq.n	800a0d8 <_printf_float+0xdc>
 800a0ce:	4d8f      	ldr	r5, [pc, #572]	; (800a30c <_printf_float+0x310>)
 800a0d0:	2f47      	cmp	r7, #71	; 0x47
 800a0d2:	d8dc      	bhi.n	800a08e <_printf_float+0x92>
 800a0d4:	4d8e      	ldr	r5, [pc, #568]	; (800a310 <_printf_float+0x314>)
 800a0d6:	e7da      	b.n	800a08e <_printf_float+0x92>
 800a0d8:	2380      	movs	r3, #128	; 0x80
 800a0da:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a0dc:	6862      	ldr	r2, [r4, #4]
 800a0de:	00db      	lsls	r3, r3, #3
 800a0e0:	430b      	orrs	r3, r1
 800a0e2:	1c51      	adds	r1, r2, #1
 800a0e4:	d143      	bne.n	800a16e <_printf_float+0x172>
 800a0e6:	3207      	adds	r2, #7
 800a0e8:	6062      	str	r2, [r4, #4]
 800a0ea:	aa12      	add	r2, sp, #72	; 0x48
 800a0ec:	2100      	movs	r1, #0
 800a0ee:	9205      	str	r2, [sp, #20]
 800a0f0:	aa11      	add	r2, sp, #68	; 0x44
 800a0f2:	9203      	str	r2, [sp, #12]
 800a0f4:	2223      	movs	r2, #35	; 0x23
 800a0f6:	6023      	str	r3, [r4, #0]
 800a0f8:	9106      	str	r1, [sp, #24]
 800a0fa:	9301      	str	r3, [sp, #4]
 800a0fc:	a908      	add	r1, sp, #32
 800a0fe:	6863      	ldr	r3, [r4, #4]
 800a100:	1852      	adds	r2, r2, r1
 800a102:	9202      	str	r2, [sp, #8]
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	0032      	movs	r2, r6
 800a108:	002b      	movs	r3, r5
 800a10a:	9704      	str	r7, [sp, #16]
 800a10c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a10e:	f7ff fed9 	bl	8009ec4 <__cvt>
 800a112:	2320      	movs	r3, #32
 800a114:	003a      	movs	r2, r7
 800a116:	0005      	movs	r5, r0
 800a118:	439a      	bics	r2, r3
 800a11a:	2a47      	cmp	r2, #71	; 0x47
 800a11c:	d107      	bne.n	800a12e <_printf_float+0x132>
 800a11e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a120:	1cda      	adds	r2, r3, #3
 800a122:	db02      	blt.n	800a12a <_printf_float+0x12e>
 800a124:	6862      	ldr	r2, [r4, #4]
 800a126:	4293      	cmp	r3, r2
 800a128:	dd45      	ble.n	800a1b6 <_printf_float+0x1ba>
 800a12a:	3f02      	subs	r7, #2
 800a12c:	b2ff      	uxtb	r7, r7
 800a12e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a130:	2f65      	cmp	r7, #101	; 0x65
 800a132:	d825      	bhi.n	800a180 <_printf_float+0x184>
 800a134:	0020      	movs	r0, r4
 800a136:	3901      	subs	r1, #1
 800a138:	003a      	movs	r2, r7
 800a13a:	3050      	adds	r0, #80	; 0x50
 800a13c:	9111      	str	r1, [sp, #68]	; 0x44
 800a13e:	f7ff ff25 	bl	8009f8c <__exponent>
 800a142:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a144:	0006      	movs	r6, r0
 800a146:	1813      	adds	r3, r2, r0
 800a148:	6123      	str	r3, [r4, #16]
 800a14a:	2a01      	cmp	r2, #1
 800a14c:	dc02      	bgt.n	800a154 <_printf_float+0x158>
 800a14e:	6822      	ldr	r2, [r4, #0]
 800a150:	07d2      	lsls	r2, r2, #31
 800a152:	d501      	bpl.n	800a158 <_printf_float+0x15c>
 800a154:	3301      	adds	r3, #1
 800a156:	6123      	str	r3, [r4, #16]
 800a158:	2323      	movs	r3, #35	; 0x23
 800a15a:	aa08      	add	r2, sp, #32
 800a15c:	189b      	adds	r3, r3, r2
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d09b      	beq.n	800a09c <_printf_float+0xa0>
 800a164:	0023      	movs	r3, r4
 800a166:	222d      	movs	r2, #45	; 0x2d
 800a168:	3343      	adds	r3, #67	; 0x43
 800a16a:	701a      	strb	r2, [r3, #0]
 800a16c:	e796      	b.n	800a09c <_printf_float+0xa0>
 800a16e:	2f67      	cmp	r7, #103	; 0x67
 800a170:	d100      	bne.n	800a174 <_printf_float+0x178>
 800a172:	e176      	b.n	800a462 <_printf_float+0x466>
 800a174:	2f47      	cmp	r7, #71	; 0x47
 800a176:	d1b8      	bne.n	800a0ea <_printf_float+0xee>
 800a178:	2a00      	cmp	r2, #0
 800a17a:	d1b6      	bne.n	800a0ea <_printf_float+0xee>
 800a17c:	2201      	movs	r2, #1
 800a17e:	e7b3      	b.n	800a0e8 <_printf_float+0xec>
 800a180:	2f66      	cmp	r7, #102	; 0x66
 800a182:	d119      	bne.n	800a1b8 <_printf_float+0x1bc>
 800a184:	6863      	ldr	r3, [r4, #4]
 800a186:	2900      	cmp	r1, #0
 800a188:	dd0c      	ble.n	800a1a4 <_printf_float+0x1a8>
 800a18a:	6121      	str	r1, [r4, #16]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d102      	bne.n	800a196 <_printf_float+0x19a>
 800a190:	6822      	ldr	r2, [r4, #0]
 800a192:	07d2      	lsls	r2, r2, #31
 800a194:	d502      	bpl.n	800a19c <_printf_float+0x1a0>
 800a196:	3301      	adds	r3, #1
 800a198:	185b      	adds	r3, r3, r1
 800a19a:	6123      	str	r3, [r4, #16]
 800a19c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a19e:	2600      	movs	r6, #0
 800a1a0:	65a3      	str	r3, [r4, #88]	; 0x58
 800a1a2:	e7d9      	b.n	800a158 <_printf_float+0x15c>
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d103      	bne.n	800a1b0 <_printf_float+0x1b4>
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	6821      	ldr	r1, [r4, #0]
 800a1ac:	4211      	tst	r1, r2
 800a1ae:	d000      	beq.n	800a1b2 <_printf_float+0x1b6>
 800a1b0:	1c9a      	adds	r2, r3, #2
 800a1b2:	6122      	str	r2, [r4, #16]
 800a1b4:	e7f2      	b.n	800a19c <_printf_float+0x1a0>
 800a1b6:	2767      	movs	r7, #103	; 0x67
 800a1b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	db05      	blt.n	800a1cc <_printf_float+0x1d0>
 800a1c0:	6822      	ldr	r2, [r4, #0]
 800a1c2:	6123      	str	r3, [r4, #16]
 800a1c4:	07d2      	lsls	r2, r2, #31
 800a1c6:	d5e9      	bpl.n	800a19c <_printf_float+0x1a0>
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	e7e6      	b.n	800a19a <_printf_float+0x19e>
 800a1cc:	2101      	movs	r1, #1
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	dc01      	bgt.n	800a1d6 <_printf_float+0x1da>
 800a1d2:	1849      	adds	r1, r1, r1
 800a1d4:	1ac9      	subs	r1, r1, r3
 800a1d6:	1852      	adds	r2, r2, r1
 800a1d8:	e7eb      	b.n	800a1b2 <_printf_float+0x1b6>
 800a1da:	6822      	ldr	r2, [r4, #0]
 800a1dc:	0553      	lsls	r3, r2, #21
 800a1de:	d408      	bmi.n	800a1f2 <_printf_float+0x1f6>
 800a1e0:	6923      	ldr	r3, [r4, #16]
 800a1e2:	002a      	movs	r2, r5
 800a1e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a1e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1e8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a1ea:	47a8      	blx	r5
 800a1ec:	1c43      	adds	r3, r0, #1
 800a1ee:	d129      	bne.n	800a244 <_printf_float+0x248>
 800a1f0:	e75f      	b.n	800a0b2 <_printf_float+0xb6>
 800a1f2:	2f65      	cmp	r7, #101	; 0x65
 800a1f4:	d800      	bhi.n	800a1f8 <_printf_float+0x1fc>
 800a1f6:	e0e0      	b.n	800a3ba <_printf_float+0x3be>
 800a1f8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a1fa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	2300      	movs	r3, #0
 800a200:	f7f6 f91a 	bl	8000438 <__aeabi_dcmpeq>
 800a204:	2800      	cmp	r0, #0
 800a206:	d034      	beq.n	800a272 <_printf_float+0x276>
 800a208:	2301      	movs	r3, #1
 800a20a:	4a42      	ldr	r2, [pc, #264]	; (800a314 <_printf_float+0x318>)
 800a20c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a20e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a210:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a212:	47a8      	blx	r5
 800a214:	1c43      	adds	r3, r0, #1
 800a216:	d100      	bne.n	800a21a <_printf_float+0x21e>
 800a218:	e74b      	b.n	800a0b2 <_printf_float+0xb6>
 800a21a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a21c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a21e:	4293      	cmp	r3, r2
 800a220:	db02      	blt.n	800a228 <_printf_float+0x22c>
 800a222:	6823      	ldr	r3, [r4, #0]
 800a224:	07db      	lsls	r3, r3, #31
 800a226:	d50d      	bpl.n	800a244 <_printf_float+0x248>
 800a228:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a22a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a22c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a22e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a230:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a232:	47a8      	blx	r5
 800a234:	2500      	movs	r5, #0
 800a236:	1c43      	adds	r3, r0, #1
 800a238:	d100      	bne.n	800a23c <_printf_float+0x240>
 800a23a:	e73a      	b.n	800a0b2 <_printf_float+0xb6>
 800a23c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a23e:	3b01      	subs	r3, #1
 800a240:	42ab      	cmp	r3, r5
 800a242:	dc0a      	bgt.n	800a25a <_printf_float+0x25e>
 800a244:	6823      	ldr	r3, [r4, #0]
 800a246:	079b      	lsls	r3, r3, #30
 800a248:	d500      	bpl.n	800a24c <_printf_float+0x250>
 800a24a:	e108      	b.n	800a45e <_printf_float+0x462>
 800a24c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a24e:	68e0      	ldr	r0, [r4, #12]
 800a250:	4298      	cmp	r0, r3
 800a252:	db00      	blt.n	800a256 <_printf_float+0x25a>
 800a254:	e72f      	b.n	800a0b6 <_printf_float+0xba>
 800a256:	0018      	movs	r0, r3
 800a258:	e72d      	b.n	800a0b6 <_printf_float+0xba>
 800a25a:	0022      	movs	r2, r4
 800a25c:	2301      	movs	r3, #1
 800a25e:	321a      	adds	r2, #26
 800a260:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a262:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a264:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a266:	47b0      	blx	r6
 800a268:	1c43      	adds	r3, r0, #1
 800a26a:	d100      	bne.n	800a26e <_printf_float+0x272>
 800a26c:	e721      	b.n	800a0b2 <_printf_float+0xb6>
 800a26e:	3501      	adds	r5, #1
 800a270:	e7e4      	b.n	800a23c <_printf_float+0x240>
 800a272:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a274:	2b00      	cmp	r3, #0
 800a276:	dc2d      	bgt.n	800a2d4 <_printf_float+0x2d8>
 800a278:	2301      	movs	r3, #1
 800a27a:	4a26      	ldr	r2, [pc, #152]	; (800a314 <_printf_float+0x318>)
 800a27c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a27e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a280:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a282:	47b0      	blx	r6
 800a284:	1c43      	adds	r3, r0, #1
 800a286:	d100      	bne.n	800a28a <_printf_float+0x28e>
 800a288:	e713      	b.n	800a0b2 <_printf_float+0xb6>
 800a28a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d105      	bne.n	800a29c <_printf_float+0x2a0>
 800a290:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a292:	2b00      	cmp	r3, #0
 800a294:	d102      	bne.n	800a29c <_printf_float+0x2a0>
 800a296:	6823      	ldr	r3, [r4, #0]
 800a298:	07db      	lsls	r3, r3, #31
 800a29a:	d5d3      	bpl.n	800a244 <_printf_float+0x248>
 800a29c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a29e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a2a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2a6:	47b0      	blx	r6
 800a2a8:	2600      	movs	r6, #0
 800a2aa:	1c43      	adds	r3, r0, #1
 800a2ac:	d100      	bne.n	800a2b0 <_printf_float+0x2b4>
 800a2ae:	e700      	b.n	800a0b2 <_printf_float+0xb6>
 800a2b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2b2:	425b      	negs	r3, r3
 800a2b4:	42b3      	cmp	r3, r6
 800a2b6:	dc01      	bgt.n	800a2bc <_printf_float+0x2c0>
 800a2b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a2ba:	e792      	b.n	800a1e2 <_printf_float+0x1e6>
 800a2bc:	0022      	movs	r2, r4
 800a2be:	2301      	movs	r3, #1
 800a2c0:	321a      	adds	r2, #26
 800a2c2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a2c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2c6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800a2c8:	47b8      	blx	r7
 800a2ca:	1c43      	adds	r3, r0, #1
 800a2cc:	d100      	bne.n	800a2d0 <_printf_float+0x2d4>
 800a2ce:	e6f0      	b.n	800a0b2 <_printf_float+0xb6>
 800a2d0:	3601      	adds	r6, #1
 800a2d2:	e7ed      	b.n	800a2b0 <_printf_float+0x2b4>
 800a2d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2d6:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800a2d8:	429f      	cmp	r7, r3
 800a2da:	dd00      	ble.n	800a2de <_printf_float+0x2e2>
 800a2dc:	001f      	movs	r7, r3
 800a2de:	2f00      	cmp	r7, #0
 800a2e0:	dd08      	ble.n	800a2f4 <_printf_float+0x2f8>
 800a2e2:	003b      	movs	r3, r7
 800a2e4:	002a      	movs	r2, r5
 800a2e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a2e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2ea:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a2ec:	47b0      	blx	r6
 800a2ee:	1c43      	adds	r3, r0, #1
 800a2f0:	d100      	bne.n	800a2f4 <_printf_float+0x2f8>
 800a2f2:	e6de      	b.n	800a0b2 <_printf_float+0xb6>
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	930d      	str	r3, [sp, #52]	; 0x34
 800a2f8:	43fb      	mvns	r3, r7
 800a2fa:	17db      	asrs	r3, r3, #31
 800a2fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2fe:	e018      	b.n	800a332 <_printf_float+0x336>
 800a300:	7fefffff 	.word	0x7fefffff
 800a304:	0800ea5c 	.word	0x0800ea5c
 800a308:	0800ea58 	.word	0x0800ea58
 800a30c:	0800ea64 	.word	0x0800ea64
 800a310:	0800ea60 	.word	0x0800ea60
 800a314:	0800ea68 	.word	0x0800ea68
 800a318:	0022      	movs	r2, r4
 800a31a:	2301      	movs	r3, #1
 800a31c:	321a      	adds	r2, #26
 800a31e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a320:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a322:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a324:	47b0      	blx	r6
 800a326:	1c43      	adds	r3, r0, #1
 800a328:	d100      	bne.n	800a32c <_printf_float+0x330>
 800a32a:	e6c2      	b.n	800a0b2 <_printf_float+0xb6>
 800a32c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a32e:	3301      	adds	r3, #1
 800a330:	930d      	str	r3, [sp, #52]	; 0x34
 800a332:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a334:	6da6      	ldr	r6, [r4, #88]	; 0x58
 800a336:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a338:	403b      	ands	r3, r7
 800a33a:	1af3      	subs	r3, r6, r3
 800a33c:	4293      	cmp	r3, r2
 800a33e:	dceb      	bgt.n	800a318 <_printf_float+0x31c>
 800a340:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a342:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a344:	19ad      	adds	r5, r5, r6
 800a346:	4293      	cmp	r3, r2
 800a348:	db10      	blt.n	800a36c <_printf_float+0x370>
 800a34a:	6823      	ldr	r3, [r4, #0]
 800a34c:	07db      	lsls	r3, r3, #31
 800a34e:	d40d      	bmi.n	800a36c <_printf_float+0x370>
 800a350:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800a352:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a354:	1bbe      	subs	r6, r7, r6
 800a356:	1aff      	subs	r7, r7, r3
 800a358:	42b7      	cmp	r7, r6
 800a35a:	dd00      	ble.n	800a35e <_printf_float+0x362>
 800a35c:	0037      	movs	r7, r6
 800a35e:	2f00      	cmp	r7, #0
 800a360:	dc0d      	bgt.n	800a37e <_printf_float+0x382>
 800a362:	43fe      	mvns	r6, r7
 800a364:	17f3      	asrs	r3, r6, #31
 800a366:	2500      	movs	r5, #0
 800a368:	930c      	str	r3, [sp, #48]	; 0x30
 800a36a:	e01c      	b.n	800a3a6 <_printf_float+0x3aa>
 800a36c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a36e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a370:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a372:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a374:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800a376:	47b8      	blx	r7
 800a378:	1c43      	adds	r3, r0, #1
 800a37a:	d1e9      	bne.n	800a350 <_printf_float+0x354>
 800a37c:	e699      	b.n	800a0b2 <_printf_float+0xb6>
 800a37e:	003b      	movs	r3, r7
 800a380:	002a      	movs	r2, r5
 800a382:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a384:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a386:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a388:	47a8      	blx	r5
 800a38a:	1c43      	adds	r3, r0, #1
 800a38c:	d1e9      	bne.n	800a362 <_printf_float+0x366>
 800a38e:	e690      	b.n	800a0b2 <_printf_float+0xb6>
 800a390:	0022      	movs	r2, r4
 800a392:	2301      	movs	r3, #1
 800a394:	321a      	adds	r2, #26
 800a396:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a398:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a39a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a39c:	47b0      	blx	r6
 800a39e:	1c43      	adds	r3, r0, #1
 800a3a0:	d100      	bne.n	800a3a4 <_printf_float+0x3a8>
 800a3a2:	e686      	b.n	800a0b2 <_printf_float+0xb6>
 800a3a4:	3501      	adds	r5, #1
 800a3a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a3a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a3aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a3ac:	1a9b      	subs	r3, r3, r2
 800a3ae:	003a      	movs	r2, r7
 800a3b0:	400a      	ands	r2, r1
 800a3b2:	1a9b      	subs	r3, r3, r2
 800a3b4:	42ab      	cmp	r3, r5
 800a3b6:	dceb      	bgt.n	800a390 <_printf_float+0x394>
 800a3b8:	e744      	b.n	800a244 <_printf_float+0x248>
 800a3ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	dc02      	bgt.n	800a3c6 <_printf_float+0x3ca>
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	421a      	tst	r2, r3
 800a3c4:	d032      	beq.n	800a42c <_printf_float+0x430>
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	002a      	movs	r2, r5
 800a3ca:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a3cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3ce:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800a3d0:	47b8      	blx	r7
 800a3d2:	1c43      	adds	r3, r0, #1
 800a3d4:	d100      	bne.n	800a3d8 <_printf_float+0x3dc>
 800a3d6:	e66c      	b.n	800a0b2 <_printf_float+0xb6>
 800a3d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a3de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3e0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800a3e2:	3501      	adds	r5, #1
 800a3e4:	47b8      	blx	r7
 800a3e6:	1c43      	adds	r3, r0, #1
 800a3e8:	d100      	bne.n	800a3ec <_printf_float+0x3f0>
 800a3ea:	e662      	b.n	800a0b2 <_printf_float+0xb6>
 800a3ec:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a3ee:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a3f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	1e5f      	subs	r7, r3, #1
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	f7f6 f81e 	bl	8000438 <__aeabi_dcmpeq>
 800a3fc:	003b      	movs	r3, r7
 800a3fe:	2800      	cmp	r0, #0
 800a400:	d014      	beq.n	800a42c <_printf_float+0x430>
 800a402:	2500      	movs	r5, #0
 800a404:	e00a      	b.n	800a41c <_printf_float+0x420>
 800a406:	0022      	movs	r2, r4
 800a408:	2301      	movs	r3, #1
 800a40a:	321a      	adds	r2, #26
 800a40c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a40e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a410:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800a412:	47b8      	blx	r7
 800a414:	1c43      	adds	r3, r0, #1
 800a416:	d100      	bne.n	800a41a <_printf_float+0x41e>
 800a418:	e64b      	b.n	800a0b2 <_printf_float+0xb6>
 800a41a:	3501      	adds	r5, #1
 800a41c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a41e:	3b01      	subs	r3, #1
 800a420:	42ab      	cmp	r3, r5
 800a422:	dcf0      	bgt.n	800a406 <_printf_float+0x40a>
 800a424:	0022      	movs	r2, r4
 800a426:	0033      	movs	r3, r6
 800a428:	3250      	adds	r2, #80	; 0x50
 800a42a:	e6db      	b.n	800a1e4 <_printf_float+0x1e8>
 800a42c:	002a      	movs	r2, r5
 800a42e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a430:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a432:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a434:	47a8      	blx	r5
 800a436:	1c43      	adds	r3, r0, #1
 800a438:	d1f4      	bne.n	800a424 <_printf_float+0x428>
 800a43a:	e63a      	b.n	800a0b2 <_printf_float+0xb6>
 800a43c:	0022      	movs	r2, r4
 800a43e:	2301      	movs	r3, #1
 800a440:	3219      	adds	r2, #25
 800a442:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a444:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a446:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a448:	47b0      	blx	r6
 800a44a:	1c43      	adds	r3, r0, #1
 800a44c:	d100      	bne.n	800a450 <_printf_float+0x454>
 800a44e:	e630      	b.n	800a0b2 <_printf_float+0xb6>
 800a450:	3501      	adds	r5, #1
 800a452:	68e3      	ldr	r3, [r4, #12]
 800a454:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a456:	1a9b      	subs	r3, r3, r2
 800a458:	42ab      	cmp	r3, r5
 800a45a:	dcef      	bgt.n	800a43c <_printf_float+0x440>
 800a45c:	e6f6      	b.n	800a24c <_printf_float+0x250>
 800a45e:	2500      	movs	r5, #0
 800a460:	e7f7      	b.n	800a452 <_printf_float+0x456>
 800a462:	2a00      	cmp	r2, #0
 800a464:	d100      	bne.n	800a468 <_printf_float+0x46c>
 800a466:	e689      	b.n	800a17c <_printf_float+0x180>
 800a468:	2100      	movs	r1, #0
 800a46a:	9106      	str	r1, [sp, #24]
 800a46c:	a912      	add	r1, sp, #72	; 0x48
 800a46e:	9105      	str	r1, [sp, #20]
 800a470:	a911      	add	r1, sp, #68	; 0x44
 800a472:	9103      	str	r1, [sp, #12]
 800a474:	2123      	movs	r1, #35	; 0x23
 800a476:	a808      	add	r0, sp, #32
 800a478:	1809      	adds	r1, r1, r0
 800a47a:	6023      	str	r3, [r4, #0]
 800a47c:	9301      	str	r3, [sp, #4]
 800a47e:	9200      	str	r2, [sp, #0]
 800a480:	002b      	movs	r3, r5
 800a482:	9704      	str	r7, [sp, #16]
 800a484:	9102      	str	r1, [sp, #8]
 800a486:	0032      	movs	r2, r6
 800a488:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a48a:	f7ff fd1b 	bl	8009ec4 <__cvt>
 800a48e:	0005      	movs	r5, r0
 800a490:	e645      	b.n	800a11e <_printf_float+0x122>
 800a492:	46c0      	nop			; (mov r8, r8)

0800a494 <_printf_common>:
 800a494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a496:	0015      	movs	r5, r2
 800a498:	9301      	str	r3, [sp, #4]
 800a49a:	688a      	ldr	r2, [r1, #8]
 800a49c:	690b      	ldr	r3, [r1, #16]
 800a49e:	9000      	str	r0, [sp, #0]
 800a4a0:	000c      	movs	r4, r1
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	da00      	bge.n	800a4a8 <_printf_common+0x14>
 800a4a6:	0013      	movs	r3, r2
 800a4a8:	0022      	movs	r2, r4
 800a4aa:	602b      	str	r3, [r5, #0]
 800a4ac:	3243      	adds	r2, #67	; 0x43
 800a4ae:	7812      	ldrb	r2, [r2, #0]
 800a4b0:	2a00      	cmp	r2, #0
 800a4b2:	d001      	beq.n	800a4b8 <_printf_common+0x24>
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	602b      	str	r3, [r5, #0]
 800a4b8:	6823      	ldr	r3, [r4, #0]
 800a4ba:	069b      	lsls	r3, r3, #26
 800a4bc:	d502      	bpl.n	800a4c4 <_printf_common+0x30>
 800a4be:	682b      	ldr	r3, [r5, #0]
 800a4c0:	3302      	adds	r3, #2
 800a4c2:	602b      	str	r3, [r5, #0]
 800a4c4:	2706      	movs	r7, #6
 800a4c6:	6823      	ldr	r3, [r4, #0]
 800a4c8:	401f      	ands	r7, r3
 800a4ca:	d027      	beq.n	800a51c <_printf_common+0x88>
 800a4cc:	0023      	movs	r3, r4
 800a4ce:	3343      	adds	r3, #67	; 0x43
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	1e5a      	subs	r2, r3, #1
 800a4d4:	4193      	sbcs	r3, r2
 800a4d6:	6822      	ldr	r2, [r4, #0]
 800a4d8:	0692      	lsls	r2, r2, #26
 800a4da:	d430      	bmi.n	800a53e <_printf_common+0xaa>
 800a4dc:	0022      	movs	r2, r4
 800a4de:	9901      	ldr	r1, [sp, #4]
 800a4e0:	3243      	adds	r2, #67	; 0x43
 800a4e2:	9800      	ldr	r0, [sp, #0]
 800a4e4:	9e08      	ldr	r6, [sp, #32]
 800a4e6:	47b0      	blx	r6
 800a4e8:	1c43      	adds	r3, r0, #1
 800a4ea:	d025      	beq.n	800a538 <_printf_common+0xa4>
 800a4ec:	2306      	movs	r3, #6
 800a4ee:	6820      	ldr	r0, [r4, #0]
 800a4f0:	682a      	ldr	r2, [r5, #0]
 800a4f2:	68e1      	ldr	r1, [r4, #12]
 800a4f4:	4003      	ands	r3, r0
 800a4f6:	2500      	movs	r5, #0
 800a4f8:	2b04      	cmp	r3, #4
 800a4fa:	d103      	bne.n	800a504 <_printf_common+0x70>
 800a4fc:	1a8d      	subs	r5, r1, r2
 800a4fe:	43eb      	mvns	r3, r5
 800a500:	17db      	asrs	r3, r3, #31
 800a502:	401d      	ands	r5, r3
 800a504:	68a3      	ldr	r3, [r4, #8]
 800a506:	6922      	ldr	r2, [r4, #16]
 800a508:	4293      	cmp	r3, r2
 800a50a:	dd01      	ble.n	800a510 <_printf_common+0x7c>
 800a50c:	1a9b      	subs	r3, r3, r2
 800a50e:	18ed      	adds	r5, r5, r3
 800a510:	2700      	movs	r7, #0
 800a512:	42bd      	cmp	r5, r7
 800a514:	d120      	bne.n	800a558 <_printf_common+0xc4>
 800a516:	2000      	movs	r0, #0
 800a518:	e010      	b.n	800a53c <_printf_common+0xa8>
 800a51a:	3701      	adds	r7, #1
 800a51c:	68e3      	ldr	r3, [r4, #12]
 800a51e:	682a      	ldr	r2, [r5, #0]
 800a520:	1a9b      	subs	r3, r3, r2
 800a522:	42bb      	cmp	r3, r7
 800a524:	ddd2      	ble.n	800a4cc <_printf_common+0x38>
 800a526:	0022      	movs	r2, r4
 800a528:	2301      	movs	r3, #1
 800a52a:	3219      	adds	r2, #25
 800a52c:	9901      	ldr	r1, [sp, #4]
 800a52e:	9800      	ldr	r0, [sp, #0]
 800a530:	9e08      	ldr	r6, [sp, #32]
 800a532:	47b0      	blx	r6
 800a534:	1c43      	adds	r3, r0, #1
 800a536:	d1f0      	bne.n	800a51a <_printf_common+0x86>
 800a538:	2001      	movs	r0, #1
 800a53a:	4240      	negs	r0, r0
 800a53c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a53e:	2030      	movs	r0, #48	; 0x30
 800a540:	18e1      	adds	r1, r4, r3
 800a542:	3143      	adds	r1, #67	; 0x43
 800a544:	7008      	strb	r0, [r1, #0]
 800a546:	0021      	movs	r1, r4
 800a548:	1c5a      	adds	r2, r3, #1
 800a54a:	3145      	adds	r1, #69	; 0x45
 800a54c:	7809      	ldrb	r1, [r1, #0]
 800a54e:	18a2      	adds	r2, r4, r2
 800a550:	3243      	adds	r2, #67	; 0x43
 800a552:	3302      	adds	r3, #2
 800a554:	7011      	strb	r1, [r2, #0]
 800a556:	e7c1      	b.n	800a4dc <_printf_common+0x48>
 800a558:	0022      	movs	r2, r4
 800a55a:	2301      	movs	r3, #1
 800a55c:	321a      	adds	r2, #26
 800a55e:	9901      	ldr	r1, [sp, #4]
 800a560:	9800      	ldr	r0, [sp, #0]
 800a562:	9e08      	ldr	r6, [sp, #32]
 800a564:	47b0      	blx	r6
 800a566:	1c43      	adds	r3, r0, #1
 800a568:	d0e6      	beq.n	800a538 <_printf_common+0xa4>
 800a56a:	3701      	adds	r7, #1
 800a56c:	e7d1      	b.n	800a512 <_printf_common+0x7e>
	...

0800a570 <_printf_i>:
 800a570:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a572:	b089      	sub	sp, #36	; 0x24
 800a574:	9204      	str	r2, [sp, #16]
 800a576:	000a      	movs	r2, r1
 800a578:	3243      	adds	r2, #67	; 0x43
 800a57a:	9305      	str	r3, [sp, #20]
 800a57c:	9003      	str	r0, [sp, #12]
 800a57e:	9202      	str	r2, [sp, #8]
 800a580:	7e0a      	ldrb	r2, [r1, #24]
 800a582:	000c      	movs	r4, r1
 800a584:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a586:	2a6e      	cmp	r2, #110	; 0x6e
 800a588:	d100      	bne.n	800a58c <_printf_i+0x1c>
 800a58a:	e086      	b.n	800a69a <_printf_i+0x12a>
 800a58c:	d81f      	bhi.n	800a5ce <_printf_i+0x5e>
 800a58e:	2a63      	cmp	r2, #99	; 0x63
 800a590:	d033      	beq.n	800a5fa <_printf_i+0x8a>
 800a592:	d808      	bhi.n	800a5a6 <_printf_i+0x36>
 800a594:	2a00      	cmp	r2, #0
 800a596:	d100      	bne.n	800a59a <_printf_i+0x2a>
 800a598:	e08c      	b.n	800a6b4 <_printf_i+0x144>
 800a59a:	2a58      	cmp	r2, #88	; 0x58
 800a59c:	d04d      	beq.n	800a63a <_printf_i+0xca>
 800a59e:	0025      	movs	r5, r4
 800a5a0:	3542      	adds	r5, #66	; 0x42
 800a5a2:	702a      	strb	r2, [r5, #0]
 800a5a4:	e030      	b.n	800a608 <_printf_i+0x98>
 800a5a6:	2a64      	cmp	r2, #100	; 0x64
 800a5a8:	d001      	beq.n	800a5ae <_printf_i+0x3e>
 800a5aa:	2a69      	cmp	r2, #105	; 0x69
 800a5ac:	d1f7      	bne.n	800a59e <_printf_i+0x2e>
 800a5ae:	6819      	ldr	r1, [r3, #0]
 800a5b0:	6825      	ldr	r5, [r4, #0]
 800a5b2:	1d0a      	adds	r2, r1, #4
 800a5b4:	0628      	lsls	r0, r5, #24
 800a5b6:	d529      	bpl.n	800a60c <_printf_i+0x9c>
 800a5b8:	6808      	ldr	r0, [r1, #0]
 800a5ba:	601a      	str	r2, [r3, #0]
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	da03      	bge.n	800a5c8 <_printf_i+0x58>
 800a5c0:	232d      	movs	r3, #45	; 0x2d
 800a5c2:	9a02      	ldr	r2, [sp, #8]
 800a5c4:	4240      	negs	r0, r0
 800a5c6:	7013      	strb	r3, [r2, #0]
 800a5c8:	4e6b      	ldr	r6, [pc, #428]	; (800a778 <_printf_i+0x208>)
 800a5ca:	270a      	movs	r7, #10
 800a5cc:	e04f      	b.n	800a66e <_printf_i+0xfe>
 800a5ce:	2a73      	cmp	r2, #115	; 0x73
 800a5d0:	d074      	beq.n	800a6bc <_printf_i+0x14c>
 800a5d2:	d808      	bhi.n	800a5e6 <_printf_i+0x76>
 800a5d4:	2a6f      	cmp	r2, #111	; 0x6f
 800a5d6:	d01f      	beq.n	800a618 <_printf_i+0xa8>
 800a5d8:	2a70      	cmp	r2, #112	; 0x70
 800a5da:	d1e0      	bne.n	800a59e <_printf_i+0x2e>
 800a5dc:	2220      	movs	r2, #32
 800a5de:	6809      	ldr	r1, [r1, #0]
 800a5e0:	430a      	orrs	r2, r1
 800a5e2:	6022      	str	r2, [r4, #0]
 800a5e4:	e003      	b.n	800a5ee <_printf_i+0x7e>
 800a5e6:	2a75      	cmp	r2, #117	; 0x75
 800a5e8:	d016      	beq.n	800a618 <_printf_i+0xa8>
 800a5ea:	2a78      	cmp	r2, #120	; 0x78
 800a5ec:	d1d7      	bne.n	800a59e <_printf_i+0x2e>
 800a5ee:	0022      	movs	r2, r4
 800a5f0:	2178      	movs	r1, #120	; 0x78
 800a5f2:	3245      	adds	r2, #69	; 0x45
 800a5f4:	7011      	strb	r1, [r2, #0]
 800a5f6:	4e61      	ldr	r6, [pc, #388]	; (800a77c <_printf_i+0x20c>)
 800a5f8:	e022      	b.n	800a640 <_printf_i+0xd0>
 800a5fa:	0025      	movs	r5, r4
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	3542      	adds	r5, #66	; 0x42
 800a600:	1d11      	adds	r1, r2, #4
 800a602:	6019      	str	r1, [r3, #0]
 800a604:	6813      	ldr	r3, [r2, #0]
 800a606:	702b      	strb	r3, [r5, #0]
 800a608:	2301      	movs	r3, #1
 800a60a:	e065      	b.n	800a6d8 <_printf_i+0x168>
 800a60c:	6808      	ldr	r0, [r1, #0]
 800a60e:	601a      	str	r2, [r3, #0]
 800a610:	0669      	lsls	r1, r5, #25
 800a612:	d5d3      	bpl.n	800a5bc <_printf_i+0x4c>
 800a614:	b200      	sxth	r0, r0
 800a616:	e7d1      	b.n	800a5bc <_printf_i+0x4c>
 800a618:	6819      	ldr	r1, [r3, #0]
 800a61a:	6825      	ldr	r5, [r4, #0]
 800a61c:	1d08      	adds	r0, r1, #4
 800a61e:	6018      	str	r0, [r3, #0]
 800a620:	6808      	ldr	r0, [r1, #0]
 800a622:	062e      	lsls	r6, r5, #24
 800a624:	d505      	bpl.n	800a632 <_printf_i+0xc2>
 800a626:	4e54      	ldr	r6, [pc, #336]	; (800a778 <_printf_i+0x208>)
 800a628:	2708      	movs	r7, #8
 800a62a:	2a6f      	cmp	r2, #111	; 0x6f
 800a62c:	d01b      	beq.n	800a666 <_printf_i+0xf6>
 800a62e:	270a      	movs	r7, #10
 800a630:	e019      	b.n	800a666 <_printf_i+0xf6>
 800a632:	066d      	lsls	r5, r5, #25
 800a634:	d5f7      	bpl.n	800a626 <_printf_i+0xb6>
 800a636:	b280      	uxth	r0, r0
 800a638:	e7f5      	b.n	800a626 <_printf_i+0xb6>
 800a63a:	3145      	adds	r1, #69	; 0x45
 800a63c:	4e4e      	ldr	r6, [pc, #312]	; (800a778 <_printf_i+0x208>)
 800a63e:	700a      	strb	r2, [r1, #0]
 800a640:	6818      	ldr	r0, [r3, #0]
 800a642:	6822      	ldr	r2, [r4, #0]
 800a644:	1d01      	adds	r1, r0, #4
 800a646:	6800      	ldr	r0, [r0, #0]
 800a648:	6019      	str	r1, [r3, #0]
 800a64a:	0615      	lsls	r5, r2, #24
 800a64c:	d521      	bpl.n	800a692 <_printf_i+0x122>
 800a64e:	07d3      	lsls	r3, r2, #31
 800a650:	d502      	bpl.n	800a658 <_printf_i+0xe8>
 800a652:	2320      	movs	r3, #32
 800a654:	431a      	orrs	r2, r3
 800a656:	6022      	str	r2, [r4, #0]
 800a658:	2710      	movs	r7, #16
 800a65a:	2800      	cmp	r0, #0
 800a65c:	d103      	bne.n	800a666 <_printf_i+0xf6>
 800a65e:	2320      	movs	r3, #32
 800a660:	6822      	ldr	r2, [r4, #0]
 800a662:	439a      	bics	r2, r3
 800a664:	6022      	str	r2, [r4, #0]
 800a666:	0023      	movs	r3, r4
 800a668:	2200      	movs	r2, #0
 800a66a:	3343      	adds	r3, #67	; 0x43
 800a66c:	701a      	strb	r2, [r3, #0]
 800a66e:	6863      	ldr	r3, [r4, #4]
 800a670:	60a3      	str	r3, [r4, #8]
 800a672:	2b00      	cmp	r3, #0
 800a674:	db58      	blt.n	800a728 <_printf_i+0x1b8>
 800a676:	2204      	movs	r2, #4
 800a678:	6821      	ldr	r1, [r4, #0]
 800a67a:	4391      	bics	r1, r2
 800a67c:	6021      	str	r1, [r4, #0]
 800a67e:	2800      	cmp	r0, #0
 800a680:	d154      	bne.n	800a72c <_printf_i+0x1bc>
 800a682:	9d02      	ldr	r5, [sp, #8]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d05a      	beq.n	800a73e <_printf_i+0x1ce>
 800a688:	0025      	movs	r5, r4
 800a68a:	7833      	ldrb	r3, [r6, #0]
 800a68c:	3542      	adds	r5, #66	; 0x42
 800a68e:	702b      	strb	r3, [r5, #0]
 800a690:	e055      	b.n	800a73e <_printf_i+0x1ce>
 800a692:	0655      	lsls	r5, r2, #25
 800a694:	d5db      	bpl.n	800a64e <_printf_i+0xde>
 800a696:	b280      	uxth	r0, r0
 800a698:	e7d9      	b.n	800a64e <_printf_i+0xde>
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	680d      	ldr	r5, [r1, #0]
 800a69e:	1d10      	adds	r0, r2, #4
 800a6a0:	6949      	ldr	r1, [r1, #20]
 800a6a2:	6018      	str	r0, [r3, #0]
 800a6a4:	6813      	ldr	r3, [r2, #0]
 800a6a6:	062e      	lsls	r6, r5, #24
 800a6a8:	d501      	bpl.n	800a6ae <_printf_i+0x13e>
 800a6aa:	6019      	str	r1, [r3, #0]
 800a6ac:	e002      	b.n	800a6b4 <_printf_i+0x144>
 800a6ae:	066d      	lsls	r5, r5, #25
 800a6b0:	d5fb      	bpl.n	800a6aa <_printf_i+0x13a>
 800a6b2:	8019      	strh	r1, [r3, #0]
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	9d02      	ldr	r5, [sp, #8]
 800a6b8:	6123      	str	r3, [r4, #16]
 800a6ba:	e04f      	b.n	800a75c <_printf_i+0x1ec>
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	1d11      	adds	r1, r2, #4
 800a6c0:	6019      	str	r1, [r3, #0]
 800a6c2:	6815      	ldr	r5, [r2, #0]
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	6862      	ldr	r2, [r4, #4]
 800a6c8:	0028      	movs	r0, r5
 800a6ca:	f002 fe67 	bl	800d39c <memchr>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	d001      	beq.n	800a6d6 <_printf_i+0x166>
 800a6d2:	1b40      	subs	r0, r0, r5
 800a6d4:	6060      	str	r0, [r4, #4]
 800a6d6:	6863      	ldr	r3, [r4, #4]
 800a6d8:	6123      	str	r3, [r4, #16]
 800a6da:	2300      	movs	r3, #0
 800a6dc:	9a02      	ldr	r2, [sp, #8]
 800a6de:	7013      	strb	r3, [r2, #0]
 800a6e0:	e03c      	b.n	800a75c <_printf_i+0x1ec>
 800a6e2:	6923      	ldr	r3, [r4, #16]
 800a6e4:	002a      	movs	r2, r5
 800a6e6:	9904      	ldr	r1, [sp, #16]
 800a6e8:	9803      	ldr	r0, [sp, #12]
 800a6ea:	9d05      	ldr	r5, [sp, #20]
 800a6ec:	47a8      	blx	r5
 800a6ee:	1c43      	adds	r3, r0, #1
 800a6f0:	d03e      	beq.n	800a770 <_printf_i+0x200>
 800a6f2:	6823      	ldr	r3, [r4, #0]
 800a6f4:	079b      	lsls	r3, r3, #30
 800a6f6:	d415      	bmi.n	800a724 <_printf_i+0x1b4>
 800a6f8:	9b07      	ldr	r3, [sp, #28]
 800a6fa:	68e0      	ldr	r0, [r4, #12]
 800a6fc:	4298      	cmp	r0, r3
 800a6fe:	da39      	bge.n	800a774 <_printf_i+0x204>
 800a700:	0018      	movs	r0, r3
 800a702:	e037      	b.n	800a774 <_printf_i+0x204>
 800a704:	0022      	movs	r2, r4
 800a706:	2301      	movs	r3, #1
 800a708:	3219      	adds	r2, #25
 800a70a:	9904      	ldr	r1, [sp, #16]
 800a70c:	9803      	ldr	r0, [sp, #12]
 800a70e:	9e05      	ldr	r6, [sp, #20]
 800a710:	47b0      	blx	r6
 800a712:	1c43      	adds	r3, r0, #1
 800a714:	d02c      	beq.n	800a770 <_printf_i+0x200>
 800a716:	3501      	adds	r5, #1
 800a718:	68e3      	ldr	r3, [r4, #12]
 800a71a:	9a07      	ldr	r2, [sp, #28]
 800a71c:	1a9b      	subs	r3, r3, r2
 800a71e:	42ab      	cmp	r3, r5
 800a720:	dcf0      	bgt.n	800a704 <_printf_i+0x194>
 800a722:	e7e9      	b.n	800a6f8 <_printf_i+0x188>
 800a724:	2500      	movs	r5, #0
 800a726:	e7f7      	b.n	800a718 <_printf_i+0x1a8>
 800a728:	2800      	cmp	r0, #0
 800a72a:	d0ad      	beq.n	800a688 <_printf_i+0x118>
 800a72c:	9d02      	ldr	r5, [sp, #8]
 800a72e:	0039      	movs	r1, r7
 800a730:	f7f5 fd82 	bl	8000238 <__aeabi_uidivmod>
 800a734:	5c73      	ldrb	r3, [r6, r1]
 800a736:	3d01      	subs	r5, #1
 800a738:	702b      	strb	r3, [r5, #0]
 800a73a:	2800      	cmp	r0, #0
 800a73c:	d1f7      	bne.n	800a72e <_printf_i+0x1be>
 800a73e:	2f08      	cmp	r7, #8
 800a740:	d109      	bne.n	800a756 <_printf_i+0x1e6>
 800a742:	6823      	ldr	r3, [r4, #0]
 800a744:	07db      	lsls	r3, r3, #31
 800a746:	d506      	bpl.n	800a756 <_printf_i+0x1e6>
 800a748:	6863      	ldr	r3, [r4, #4]
 800a74a:	6922      	ldr	r2, [r4, #16]
 800a74c:	4293      	cmp	r3, r2
 800a74e:	dc02      	bgt.n	800a756 <_printf_i+0x1e6>
 800a750:	2330      	movs	r3, #48	; 0x30
 800a752:	3d01      	subs	r5, #1
 800a754:	702b      	strb	r3, [r5, #0]
 800a756:	9b02      	ldr	r3, [sp, #8]
 800a758:	1b5b      	subs	r3, r3, r5
 800a75a:	6123      	str	r3, [r4, #16]
 800a75c:	9b05      	ldr	r3, [sp, #20]
 800a75e:	aa07      	add	r2, sp, #28
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	0021      	movs	r1, r4
 800a764:	9b04      	ldr	r3, [sp, #16]
 800a766:	9803      	ldr	r0, [sp, #12]
 800a768:	f7ff fe94 	bl	800a494 <_printf_common>
 800a76c:	1c43      	adds	r3, r0, #1
 800a76e:	d1b8      	bne.n	800a6e2 <_printf_i+0x172>
 800a770:	2001      	movs	r0, #1
 800a772:	4240      	negs	r0, r0
 800a774:	b009      	add	sp, #36	; 0x24
 800a776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a778:	0800ea6a 	.word	0x0800ea6a
 800a77c:	0800ea7b 	.word	0x0800ea7b

0800a780 <_scanf_float>:
 800a780:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a782:	b08b      	sub	sp, #44	; 0x2c
 800a784:	9002      	str	r0, [sp, #8]
 800a786:	9200      	str	r2, [sp, #0]
 800a788:	2000      	movs	r0, #0
 800a78a:	22ae      	movs	r2, #174	; 0xae
 800a78c:	9305      	str	r3, [sp, #20]
 800a78e:	688b      	ldr	r3, [r1, #8]
 800a790:	000e      	movs	r6, r1
 800a792:	1e59      	subs	r1, r3, #1
 800a794:	0052      	lsls	r2, r2, #1
 800a796:	9004      	str	r0, [sp, #16]
 800a798:	4291      	cmp	r1, r2
 800a79a:	d905      	bls.n	800a7a8 <_scanf_float+0x28>
 800a79c:	3b5e      	subs	r3, #94	; 0x5e
 800a79e:	3bff      	subs	r3, #255	; 0xff
 800a7a0:	9304      	str	r3, [sp, #16]
 800a7a2:	235e      	movs	r3, #94	; 0x5e
 800a7a4:	33ff      	adds	r3, #255	; 0xff
 800a7a6:	60b3      	str	r3, [r6, #8]
 800a7a8:	23f0      	movs	r3, #240	; 0xf0
 800a7aa:	6832      	ldr	r2, [r6, #0]
 800a7ac:	00db      	lsls	r3, r3, #3
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	6033      	str	r3, [r6, #0]
 800a7b2:	0033      	movs	r3, r6
 800a7b4:	2700      	movs	r7, #0
 800a7b6:	331c      	adds	r3, #28
 800a7b8:	001d      	movs	r5, r3
 800a7ba:	003c      	movs	r4, r7
 800a7bc:	9303      	str	r3, [sp, #12]
 800a7be:	9708      	str	r7, [sp, #32]
 800a7c0:	9707      	str	r7, [sp, #28]
 800a7c2:	9701      	str	r7, [sp, #4]
 800a7c4:	9706      	str	r7, [sp, #24]
 800a7c6:	68b2      	ldr	r2, [r6, #8]
 800a7c8:	2a00      	cmp	r2, #0
 800a7ca:	d013      	beq.n	800a7f4 <_scanf_float+0x74>
 800a7cc:	9b00      	ldr	r3, [sp, #0]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	9309      	str	r3, [sp, #36]	; 0x24
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	2b49      	cmp	r3, #73	; 0x49
 800a7d6:	d100      	bne.n	800a7da <_scanf_float+0x5a>
 800a7d8:	e07c      	b.n	800a8d4 <_scanf_float+0x154>
 800a7da:	d854      	bhi.n	800a886 <_scanf_float+0x106>
 800a7dc:	2b39      	cmp	r3, #57	; 0x39
 800a7de:	d847      	bhi.n	800a870 <_scanf_float+0xf0>
 800a7e0:	2b31      	cmp	r3, #49	; 0x31
 800a7e2:	d300      	bcc.n	800a7e6 <_scanf_float+0x66>
 800a7e4:	e094      	b.n	800a910 <_scanf_float+0x190>
 800a7e6:	2b2d      	cmp	r3, #45	; 0x2d
 800a7e8:	d100      	bne.n	800a7ec <_scanf_float+0x6c>
 800a7ea:	e09c      	b.n	800a926 <_scanf_float+0x1a6>
 800a7ec:	d817      	bhi.n	800a81e <_scanf_float+0x9e>
 800a7ee:	2b2b      	cmp	r3, #43	; 0x2b
 800a7f0:	d100      	bne.n	800a7f4 <_scanf_float+0x74>
 800a7f2:	e098      	b.n	800a926 <_scanf_float+0x1a6>
 800a7f4:	9b01      	ldr	r3, [sp, #4]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d003      	beq.n	800a802 <_scanf_float+0x82>
 800a7fa:	6832      	ldr	r2, [r6, #0]
 800a7fc:	4b9b      	ldr	r3, [pc, #620]	; (800aa6c <_scanf_float+0x2ec>)
 800a7fe:	4013      	ands	r3, r2
 800a800:	6033      	str	r3, [r6, #0]
 800a802:	3c01      	subs	r4, #1
 800a804:	2c01      	cmp	r4, #1
 800a806:	d900      	bls.n	800a80a <_scanf_float+0x8a>
 800a808:	e0ee      	b.n	800a9e8 <_scanf_float+0x268>
 800a80a:	24be      	movs	r4, #190	; 0xbe
 800a80c:	0064      	lsls	r4, r4, #1
 800a80e:	9b03      	ldr	r3, [sp, #12]
 800a810:	429d      	cmp	r5, r3
 800a812:	d900      	bls.n	800a816 <_scanf_float+0x96>
 800a814:	e0de      	b.n	800a9d4 <_scanf_float+0x254>
 800a816:	2701      	movs	r7, #1
 800a818:	0038      	movs	r0, r7
 800a81a:	b00b      	add	sp, #44	; 0x2c
 800a81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a81e:	2b2e      	cmp	r3, #46	; 0x2e
 800a820:	d100      	bne.n	800a824 <_scanf_float+0xa4>
 800a822:	e0a2      	b.n	800a96a <_scanf_float+0x1ea>
 800a824:	2b30      	cmp	r3, #48	; 0x30
 800a826:	d1e5      	bne.n	800a7f4 <_scanf_float+0x74>
 800a828:	6831      	ldr	r1, [r6, #0]
 800a82a:	05c8      	lsls	r0, r1, #23
 800a82c:	d570      	bpl.n	800a910 <_scanf_float+0x190>
 800a82e:	2380      	movs	r3, #128	; 0x80
 800a830:	4399      	bics	r1, r3
 800a832:	9b01      	ldr	r3, [sp, #4]
 800a834:	6031      	str	r1, [r6, #0]
 800a836:	3301      	adds	r3, #1
 800a838:	9301      	str	r3, [sp, #4]
 800a83a:	9b04      	ldr	r3, [sp, #16]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d003      	beq.n	800a848 <_scanf_float+0xc8>
 800a840:	3b01      	subs	r3, #1
 800a842:	3201      	adds	r2, #1
 800a844:	9304      	str	r3, [sp, #16]
 800a846:	60b2      	str	r2, [r6, #8]
 800a848:	68b3      	ldr	r3, [r6, #8]
 800a84a:	9a00      	ldr	r2, [sp, #0]
 800a84c:	3b01      	subs	r3, #1
 800a84e:	60b3      	str	r3, [r6, #8]
 800a850:	6933      	ldr	r3, [r6, #16]
 800a852:	3301      	adds	r3, #1
 800a854:	6133      	str	r3, [r6, #16]
 800a856:	9b00      	ldr	r3, [sp, #0]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	9309      	str	r3, [sp, #36]	; 0x24
 800a85c:	3b01      	subs	r3, #1
 800a85e:	6053      	str	r3, [r2, #4]
 800a860:	2b00      	cmp	r3, #0
 800a862:	dc00      	bgt.n	800a866 <_scanf_float+0xe6>
 800a864:	e0ac      	b.n	800a9c0 <_scanf_float+0x240>
 800a866:	6813      	ldr	r3, [r2, #0]
 800a868:	9309      	str	r3, [sp, #36]	; 0x24
 800a86a:	3301      	adds	r3, #1
 800a86c:	6013      	str	r3, [r2, #0]
 800a86e:	e7aa      	b.n	800a7c6 <_scanf_float+0x46>
 800a870:	2b45      	cmp	r3, #69	; 0x45
 800a872:	d100      	bne.n	800a876 <_scanf_float+0xf6>
 800a874:	e083      	b.n	800a97e <_scanf_float+0x1fe>
 800a876:	2b46      	cmp	r3, #70	; 0x46
 800a878:	d06d      	beq.n	800a956 <_scanf_float+0x1d6>
 800a87a:	2b41      	cmp	r3, #65	; 0x41
 800a87c:	d1ba      	bne.n	800a7f4 <_scanf_float+0x74>
 800a87e:	2c01      	cmp	r4, #1
 800a880:	d1b8      	bne.n	800a7f4 <_scanf_float+0x74>
 800a882:	2402      	movs	r4, #2
 800a884:	e04c      	b.n	800a920 <_scanf_float+0x1a0>
 800a886:	2b65      	cmp	r3, #101	; 0x65
 800a888:	d079      	beq.n	800a97e <_scanf_float+0x1fe>
 800a88a:	d81b      	bhi.n	800a8c4 <_scanf_float+0x144>
 800a88c:	2b54      	cmp	r3, #84	; 0x54
 800a88e:	d067      	beq.n	800a960 <_scanf_float+0x1e0>
 800a890:	d813      	bhi.n	800a8ba <_scanf_float+0x13a>
 800a892:	2b4e      	cmp	r3, #78	; 0x4e
 800a894:	d1ae      	bne.n	800a7f4 <_scanf_float+0x74>
 800a896:	2c00      	cmp	r4, #0
 800a898:	d14c      	bne.n	800a934 <_scanf_float+0x1b4>
 800a89a:	9a01      	ldr	r2, [sp, #4]
 800a89c:	2a00      	cmp	r2, #0
 800a89e:	d14b      	bne.n	800a938 <_scanf_float+0x1b8>
 800a8a0:	21e0      	movs	r1, #224	; 0xe0
 800a8a2:	20e0      	movs	r0, #224	; 0xe0
 800a8a4:	6832      	ldr	r2, [r6, #0]
 800a8a6:	00c9      	lsls	r1, r1, #3
 800a8a8:	4011      	ands	r1, r2
 800a8aa:	00c0      	lsls	r0, r0, #3
 800a8ac:	4281      	cmp	r1, r0
 800a8ae:	d143      	bne.n	800a938 <_scanf_float+0x1b8>
 800a8b0:	496f      	ldr	r1, [pc, #444]	; (800aa70 <_scanf_float+0x2f0>)
 800a8b2:	3401      	adds	r4, #1
 800a8b4:	400a      	ands	r2, r1
 800a8b6:	6032      	str	r2, [r6, #0]
 800a8b8:	e032      	b.n	800a920 <_scanf_float+0x1a0>
 800a8ba:	2b59      	cmp	r3, #89	; 0x59
 800a8bc:	d023      	beq.n	800a906 <_scanf_float+0x186>
 800a8be:	2b61      	cmp	r3, #97	; 0x61
 800a8c0:	d0dd      	beq.n	800a87e <_scanf_float+0xfe>
 800a8c2:	e797      	b.n	800a7f4 <_scanf_float+0x74>
 800a8c4:	2b6e      	cmp	r3, #110	; 0x6e
 800a8c6:	d0e6      	beq.n	800a896 <_scanf_float+0x116>
 800a8c8:	d818      	bhi.n	800a8fc <_scanf_float+0x17c>
 800a8ca:	2b66      	cmp	r3, #102	; 0x66
 800a8cc:	d043      	beq.n	800a956 <_scanf_float+0x1d6>
 800a8ce:	2b69      	cmp	r3, #105	; 0x69
 800a8d0:	d000      	beq.n	800a8d4 <_scanf_float+0x154>
 800a8d2:	e78f      	b.n	800a7f4 <_scanf_float+0x74>
 800a8d4:	2f00      	cmp	r7, #0
 800a8d6:	d137      	bne.n	800a948 <_scanf_float+0x1c8>
 800a8d8:	9a01      	ldr	r2, [sp, #4]
 800a8da:	2a00      	cmp	r2, #0
 800a8dc:	d000      	beq.n	800a8e0 <_scanf_float+0x160>
 800a8de:	e78c      	b.n	800a7fa <_scanf_float+0x7a>
 800a8e0:	21e0      	movs	r1, #224	; 0xe0
 800a8e2:	20e0      	movs	r0, #224	; 0xe0
 800a8e4:	6832      	ldr	r2, [r6, #0]
 800a8e6:	00c9      	lsls	r1, r1, #3
 800a8e8:	4011      	ands	r1, r2
 800a8ea:	00c0      	lsls	r0, r0, #3
 800a8ec:	4281      	cmp	r1, r0
 800a8ee:	d000      	beq.n	800a8f2 <_scanf_float+0x172>
 800a8f0:	e787      	b.n	800a802 <_scanf_float+0x82>
 800a8f2:	495f      	ldr	r1, [pc, #380]	; (800aa70 <_scanf_float+0x2f0>)
 800a8f4:	3701      	adds	r7, #1
 800a8f6:	400a      	ands	r2, r1
 800a8f8:	6032      	str	r2, [r6, #0]
 800a8fa:	e011      	b.n	800a920 <_scanf_float+0x1a0>
 800a8fc:	2b74      	cmp	r3, #116	; 0x74
 800a8fe:	d02f      	beq.n	800a960 <_scanf_float+0x1e0>
 800a900:	2b79      	cmp	r3, #121	; 0x79
 800a902:	d000      	beq.n	800a906 <_scanf_float+0x186>
 800a904:	e776      	b.n	800a7f4 <_scanf_float+0x74>
 800a906:	2f07      	cmp	r7, #7
 800a908:	d000      	beq.n	800a90c <_scanf_float+0x18c>
 800a90a:	e773      	b.n	800a7f4 <_scanf_float+0x74>
 800a90c:	2708      	movs	r7, #8
 800a90e:	e007      	b.n	800a920 <_scanf_float+0x1a0>
 800a910:	19e2      	adds	r2, r4, r7
 800a912:	2a00      	cmp	r2, #0
 800a914:	d000      	beq.n	800a918 <_scanf_float+0x198>
 800a916:	e76d      	b.n	800a7f4 <_scanf_float+0x74>
 800a918:	4a56      	ldr	r2, [pc, #344]	; (800aa74 <_scanf_float+0x2f4>)
 800a91a:	6831      	ldr	r1, [r6, #0]
 800a91c:	400a      	ands	r2, r1
 800a91e:	6032      	str	r2, [r6, #0]
 800a920:	702b      	strb	r3, [r5, #0]
 800a922:	3501      	adds	r5, #1
 800a924:	e790      	b.n	800a848 <_scanf_float+0xc8>
 800a926:	2180      	movs	r1, #128	; 0x80
 800a928:	6832      	ldr	r2, [r6, #0]
 800a92a:	420a      	tst	r2, r1
 800a92c:	d100      	bne.n	800a930 <_scanf_float+0x1b0>
 800a92e:	e761      	b.n	800a7f4 <_scanf_float+0x74>
 800a930:	438a      	bics	r2, r1
 800a932:	e7f4      	b.n	800a91e <_scanf_float+0x19e>
 800a934:	2c02      	cmp	r4, #2
 800a936:	d041      	beq.n	800a9bc <_scanf_float+0x23c>
 800a938:	2f01      	cmp	r7, #1
 800a93a:	d002      	beq.n	800a942 <_scanf_float+0x1c2>
 800a93c:	2f04      	cmp	r7, #4
 800a93e:	d000      	beq.n	800a942 <_scanf_float+0x1c2>
 800a940:	e758      	b.n	800a7f4 <_scanf_float+0x74>
 800a942:	3701      	adds	r7, #1
 800a944:	b2ff      	uxtb	r7, r7
 800a946:	e7eb      	b.n	800a920 <_scanf_float+0x1a0>
 800a948:	2102      	movs	r1, #2
 800a94a:	1efa      	subs	r2, r7, #3
 800a94c:	438a      	bics	r2, r1
 800a94e:	b2d2      	uxtb	r2, r2
 800a950:	2a00      	cmp	r2, #0
 800a952:	d0f6      	beq.n	800a942 <_scanf_float+0x1c2>
 800a954:	e74e      	b.n	800a7f4 <_scanf_float+0x74>
 800a956:	2f02      	cmp	r7, #2
 800a958:	d000      	beq.n	800a95c <_scanf_float+0x1dc>
 800a95a:	e74b      	b.n	800a7f4 <_scanf_float+0x74>
 800a95c:	2703      	movs	r7, #3
 800a95e:	e7df      	b.n	800a920 <_scanf_float+0x1a0>
 800a960:	2f06      	cmp	r7, #6
 800a962:	d000      	beq.n	800a966 <_scanf_float+0x1e6>
 800a964:	e746      	b.n	800a7f4 <_scanf_float+0x74>
 800a966:	2707      	movs	r7, #7
 800a968:	e7da      	b.n	800a920 <_scanf_float+0x1a0>
 800a96a:	6832      	ldr	r2, [r6, #0]
 800a96c:	0591      	lsls	r1, r2, #22
 800a96e:	d400      	bmi.n	800a972 <_scanf_float+0x1f2>
 800a970:	e740      	b.n	800a7f4 <_scanf_float+0x74>
 800a972:	4941      	ldr	r1, [pc, #260]	; (800aa78 <_scanf_float+0x2f8>)
 800a974:	400a      	ands	r2, r1
 800a976:	6032      	str	r2, [r6, #0]
 800a978:	9a01      	ldr	r2, [sp, #4]
 800a97a:	9206      	str	r2, [sp, #24]
 800a97c:	e7d0      	b.n	800a920 <_scanf_float+0x1a0>
 800a97e:	21a0      	movs	r1, #160	; 0xa0
 800a980:	2080      	movs	r0, #128	; 0x80
 800a982:	6832      	ldr	r2, [r6, #0]
 800a984:	00c9      	lsls	r1, r1, #3
 800a986:	4011      	ands	r1, r2
 800a988:	00c0      	lsls	r0, r0, #3
 800a98a:	4281      	cmp	r1, r0
 800a98c:	d006      	beq.n	800a99c <_scanf_float+0x21c>
 800a98e:	4202      	tst	r2, r0
 800a990:	d100      	bne.n	800a994 <_scanf_float+0x214>
 800a992:	e72f      	b.n	800a7f4 <_scanf_float+0x74>
 800a994:	9901      	ldr	r1, [sp, #4]
 800a996:	2900      	cmp	r1, #0
 800a998:	d100      	bne.n	800a99c <_scanf_float+0x21c>
 800a99a:	e732      	b.n	800a802 <_scanf_float+0x82>
 800a99c:	0591      	lsls	r1, r2, #22
 800a99e:	d404      	bmi.n	800a9aa <_scanf_float+0x22a>
 800a9a0:	9901      	ldr	r1, [sp, #4]
 800a9a2:	9806      	ldr	r0, [sp, #24]
 800a9a4:	9508      	str	r5, [sp, #32]
 800a9a6:	1a09      	subs	r1, r1, r0
 800a9a8:	9107      	str	r1, [sp, #28]
 800a9aa:	4931      	ldr	r1, [pc, #196]	; (800aa70 <_scanf_float+0x2f0>)
 800a9ac:	400a      	ands	r2, r1
 800a9ae:	21c0      	movs	r1, #192	; 0xc0
 800a9b0:	0049      	lsls	r1, r1, #1
 800a9b2:	430a      	orrs	r2, r1
 800a9b4:	6032      	str	r2, [r6, #0]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	9201      	str	r2, [sp, #4]
 800a9ba:	e7b1      	b.n	800a920 <_scanf_float+0x1a0>
 800a9bc:	2403      	movs	r4, #3
 800a9be:	e7af      	b.n	800a920 <_scanf_float+0x1a0>
 800a9c0:	23c0      	movs	r3, #192	; 0xc0
 800a9c2:	005b      	lsls	r3, r3, #1
 800a9c4:	58f3      	ldr	r3, [r6, r3]
 800a9c6:	9900      	ldr	r1, [sp, #0]
 800a9c8:	9802      	ldr	r0, [sp, #8]
 800a9ca:	4798      	blx	r3
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	d100      	bne.n	800a9d2 <_scanf_float+0x252>
 800a9d0:	e6f9      	b.n	800a7c6 <_scanf_float+0x46>
 800a9d2:	e70f      	b.n	800a7f4 <_scanf_float+0x74>
 800a9d4:	3d01      	subs	r5, #1
 800a9d6:	5933      	ldr	r3, [r6, r4]
 800a9d8:	7829      	ldrb	r1, [r5, #0]
 800a9da:	9a00      	ldr	r2, [sp, #0]
 800a9dc:	9802      	ldr	r0, [sp, #8]
 800a9de:	4798      	blx	r3
 800a9e0:	6933      	ldr	r3, [r6, #16]
 800a9e2:	3b01      	subs	r3, #1
 800a9e4:	6133      	str	r3, [r6, #16]
 800a9e6:	e712      	b.n	800a80e <_scanf_float+0x8e>
 800a9e8:	1e7b      	subs	r3, r7, #1
 800a9ea:	2b06      	cmp	r3, #6
 800a9ec:	d826      	bhi.n	800aa3c <_scanf_float+0x2bc>
 800a9ee:	2f02      	cmp	r7, #2
 800a9f0:	d839      	bhi.n	800aa66 <_scanf_float+0x2e6>
 800a9f2:	24be      	movs	r4, #190	; 0xbe
 800a9f4:	0064      	lsls	r4, r4, #1
 800a9f6:	9b03      	ldr	r3, [sp, #12]
 800a9f8:	429d      	cmp	r5, r3
 800a9fa:	d800      	bhi.n	800a9fe <_scanf_float+0x27e>
 800a9fc:	e70b      	b.n	800a816 <_scanf_float+0x96>
 800a9fe:	3d01      	subs	r5, #1
 800aa00:	5933      	ldr	r3, [r6, r4]
 800aa02:	7829      	ldrb	r1, [r5, #0]
 800aa04:	9a00      	ldr	r2, [sp, #0]
 800aa06:	9802      	ldr	r0, [sp, #8]
 800aa08:	4798      	blx	r3
 800aa0a:	6933      	ldr	r3, [r6, #16]
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	6133      	str	r3, [r6, #16]
 800aa10:	e7f1      	b.n	800a9f6 <_scanf_float+0x276>
 800aa12:	9b04      	ldr	r3, [sp, #16]
 800aa14:	9a00      	ldr	r2, [sp, #0]
 800aa16:	3b01      	subs	r3, #1
 800aa18:	9304      	str	r3, [sp, #16]
 800aa1a:	7819      	ldrb	r1, [r3, #0]
 800aa1c:	23be      	movs	r3, #190	; 0xbe
 800aa1e:	005b      	lsls	r3, r3, #1
 800aa20:	58f3      	ldr	r3, [r6, r3]
 800aa22:	9802      	ldr	r0, [sp, #8]
 800aa24:	9309      	str	r3, [sp, #36]	; 0x24
 800aa26:	4798      	blx	r3
 800aa28:	6933      	ldr	r3, [r6, #16]
 800aa2a:	3b01      	subs	r3, #1
 800aa2c:	6133      	str	r3, [r6, #16]
 800aa2e:	3c01      	subs	r4, #1
 800aa30:	b2e4      	uxtb	r4, r4
 800aa32:	2c02      	cmp	r4, #2
 800aa34:	d1ed      	bne.n	800aa12 <_scanf_float+0x292>
 800aa36:	3f03      	subs	r7, #3
 800aa38:	b2ff      	uxtb	r7, r7
 800aa3a:	1bed      	subs	r5, r5, r7
 800aa3c:	6833      	ldr	r3, [r6, #0]
 800aa3e:	05da      	lsls	r2, r3, #23
 800aa40:	d537      	bpl.n	800aab2 <_scanf_float+0x332>
 800aa42:	055b      	lsls	r3, r3, #21
 800aa44:	d51a      	bpl.n	800aa7c <_scanf_float+0x2fc>
 800aa46:	24be      	movs	r4, #190	; 0xbe
 800aa48:	0064      	lsls	r4, r4, #1
 800aa4a:	9b03      	ldr	r3, [sp, #12]
 800aa4c:	429d      	cmp	r5, r3
 800aa4e:	d800      	bhi.n	800aa52 <_scanf_float+0x2d2>
 800aa50:	e6e1      	b.n	800a816 <_scanf_float+0x96>
 800aa52:	3d01      	subs	r5, #1
 800aa54:	5933      	ldr	r3, [r6, r4]
 800aa56:	7829      	ldrb	r1, [r5, #0]
 800aa58:	9a00      	ldr	r2, [sp, #0]
 800aa5a:	9802      	ldr	r0, [sp, #8]
 800aa5c:	4798      	blx	r3
 800aa5e:	6933      	ldr	r3, [r6, #16]
 800aa60:	3b01      	subs	r3, #1
 800aa62:	6133      	str	r3, [r6, #16]
 800aa64:	e7f1      	b.n	800aa4a <_scanf_float+0x2ca>
 800aa66:	003c      	movs	r4, r7
 800aa68:	9504      	str	r5, [sp, #16]
 800aa6a:	e7e0      	b.n	800aa2e <_scanf_float+0x2ae>
 800aa6c:	fffffeff 	.word	0xfffffeff
 800aa70:	fffff87f 	.word	0xfffff87f
 800aa74:	fffffe7f 	.word	0xfffffe7f
 800aa78:	fffffd7f 	.word	0xfffffd7f
 800aa7c:	6933      	ldr	r3, [r6, #16]
 800aa7e:	1e6c      	subs	r4, r5, #1
 800aa80:	7821      	ldrb	r1, [r4, #0]
 800aa82:	3b01      	subs	r3, #1
 800aa84:	6133      	str	r3, [r6, #16]
 800aa86:	2965      	cmp	r1, #101	; 0x65
 800aa88:	d00c      	beq.n	800aaa4 <_scanf_float+0x324>
 800aa8a:	2945      	cmp	r1, #69	; 0x45
 800aa8c:	d00a      	beq.n	800aaa4 <_scanf_float+0x324>
 800aa8e:	23be      	movs	r3, #190	; 0xbe
 800aa90:	005b      	lsls	r3, r3, #1
 800aa92:	58f3      	ldr	r3, [r6, r3]
 800aa94:	9a00      	ldr	r2, [sp, #0]
 800aa96:	9802      	ldr	r0, [sp, #8]
 800aa98:	4798      	blx	r3
 800aa9a:	6933      	ldr	r3, [r6, #16]
 800aa9c:	1eac      	subs	r4, r5, #2
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	7821      	ldrb	r1, [r4, #0]
 800aaa2:	6133      	str	r3, [r6, #16]
 800aaa4:	23be      	movs	r3, #190	; 0xbe
 800aaa6:	005b      	lsls	r3, r3, #1
 800aaa8:	58f3      	ldr	r3, [r6, r3]
 800aaaa:	9a00      	ldr	r2, [sp, #0]
 800aaac:	9802      	ldr	r0, [sp, #8]
 800aaae:	4798      	blx	r3
 800aab0:	0025      	movs	r5, r4
 800aab2:	2710      	movs	r7, #16
 800aab4:	6833      	ldr	r3, [r6, #0]
 800aab6:	401f      	ands	r7, r3
 800aab8:	d15b      	bne.n	800ab72 <_scanf_float+0x3f2>
 800aaba:	23c0      	movs	r3, #192	; 0xc0
 800aabc:	702f      	strb	r7, [r5, #0]
 800aabe:	6832      	ldr	r2, [r6, #0]
 800aac0:	00db      	lsls	r3, r3, #3
 800aac2:	4013      	ands	r3, r2
 800aac4:	2280      	movs	r2, #128	; 0x80
 800aac6:	00d2      	lsls	r2, r2, #3
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d11b      	bne.n	800ab04 <_scanf_float+0x384>
 800aacc:	9a06      	ldr	r2, [sp, #24]
 800aace:	9b01      	ldr	r3, [sp, #4]
 800aad0:	1a9b      	subs	r3, r3, r2
 800aad2:	425a      	negs	r2, r3
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d122      	bne.n	800ab1e <_scanf_float+0x39e>
 800aad8:	2200      	movs	r2, #0
 800aada:	9903      	ldr	r1, [sp, #12]
 800aadc:	9802      	ldr	r0, [sp, #8]
 800aade:	f000 ff35 	bl	800b94c <_strtod_r>
 800aae2:	9b05      	ldr	r3, [sp, #20]
 800aae4:	0004      	movs	r4, r0
 800aae6:	6830      	ldr	r0, [r6, #0]
 800aae8:	000d      	movs	r5, r1
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	0782      	lsls	r2, r0, #30
 800aaee:	d523      	bpl.n	800ab38 <_scanf_float+0x3b8>
 800aaf0:	1d1a      	adds	r2, r3, #4
 800aaf2:	9905      	ldr	r1, [sp, #20]
 800aaf4:	600a      	str	r2, [r1, #0]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	601c      	str	r4, [r3, #0]
 800aafa:	605d      	str	r5, [r3, #4]
 800aafc:	68f3      	ldr	r3, [r6, #12]
 800aafe:	3301      	adds	r3, #1
 800ab00:	60f3      	str	r3, [r6, #12]
 800ab02:	e689      	b.n	800a818 <_scanf_float+0x98>
 800ab04:	9b07      	ldr	r3, [sp, #28]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d0e6      	beq.n	800aad8 <_scanf_float+0x358>
 800ab0a:	9b08      	ldr	r3, [sp, #32]
 800ab0c:	003a      	movs	r2, r7
 800ab0e:	1c59      	adds	r1, r3, #1
 800ab10:	9802      	ldr	r0, [sp, #8]
 800ab12:	230a      	movs	r3, #10
 800ab14:	f000 ffaa 	bl	800ba6c <_strtol_r>
 800ab18:	9b07      	ldr	r3, [sp, #28]
 800ab1a:	9d08      	ldr	r5, [sp, #32]
 800ab1c:	1ac2      	subs	r2, r0, r3
 800ab1e:	0033      	movs	r3, r6
 800ab20:	3370      	adds	r3, #112	; 0x70
 800ab22:	33ff      	adds	r3, #255	; 0xff
 800ab24:	429d      	cmp	r5, r3
 800ab26:	d302      	bcc.n	800ab2e <_scanf_float+0x3ae>
 800ab28:	0035      	movs	r5, r6
 800ab2a:	356f      	adds	r5, #111	; 0x6f
 800ab2c:	35ff      	adds	r5, #255	; 0xff
 800ab2e:	4912      	ldr	r1, [pc, #72]	; (800ab78 <_scanf_float+0x3f8>)
 800ab30:	0028      	movs	r0, r5
 800ab32:	f000 f8ab 	bl	800ac8c <siprintf>
 800ab36:	e7cf      	b.n	800aad8 <_scanf_float+0x358>
 800ab38:	2104      	movs	r1, #4
 800ab3a:	4008      	ands	r0, r1
 800ab3c:	1d1a      	adds	r2, r3, #4
 800ab3e:	9001      	str	r0, [sp, #4]
 800ab40:	2800      	cmp	r0, #0
 800ab42:	d1d6      	bne.n	800aaf2 <_scanf_float+0x372>
 800ab44:	9905      	ldr	r1, [sp, #20]
 800ab46:	0020      	movs	r0, r4
 800ab48:	600a      	str	r2, [r1, #0]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	0022      	movs	r2, r4
 800ab4e:	9300      	str	r3, [sp, #0]
 800ab50:	0029      	movs	r1, r5
 800ab52:	002b      	movs	r3, r5
 800ab54:	f7f7 ff3a 	bl	80029cc <__aeabi_dcmpun>
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	d005      	beq.n	800ab68 <_scanf_float+0x3e8>
 800ab5c:	9801      	ldr	r0, [sp, #4]
 800ab5e:	f000 f891 	bl	800ac84 <nanf>
 800ab62:	9b00      	ldr	r3, [sp, #0]
 800ab64:	6018      	str	r0, [r3, #0]
 800ab66:	e7c9      	b.n	800aafc <_scanf_float+0x37c>
 800ab68:	0020      	movs	r0, r4
 800ab6a:	0029      	movs	r1, r5
 800ab6c:	f7f8 f83e 	bl	8002bec <__aeabi_d2f>
 800ab70:	e7f7      	b.n	800ab62 <_scanf_float+0x3e2>
 800ab72:	2700      	movs	r7, #0
 800ab74:	e650      	b.n	800a818 <_scanf_float+0x98>
 800ab76:	46c0      	nop			; (mov r8, r8)
 800ab78:	0800ea8c 	.word	0x0800ea8c

0800ab7c <iprintf>:
 800ab7c:	b40f      	push	{r0, r1, r2, r3}
 800ab7e:	4b0b      	ldr	r3, [pc, #44]	; (800abac <iprintf+0x30>)
 800ab80:	b513      	push	{r0, r1, r4, lr}
 800ab82:	681c      	ldr	r4, [r3, #0]
 800ab84:	2c00      	cmp	r4, #0
 800ab86:	d005      	beq.n	800ab94 <iprintf+0x18>
 800ab88:	69a3      	ldr	r3, [r4, #24]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d102      	bne.n	800ab94 <iprintf+0x18>
 800ab8e:	0020      	movs	r0, r4
 800ab90:	f001 ffa6 	bl	800cae0 <__sinit>
 800ab94:	ab05      	add	r3, sp, #20
 800ab96:	9a04      	ldr	r2, [sp, #16]
 800ab98:	68a1      	ldr	r1, [r4, #8]
 800ab9a:	0020      	movs	r0, r4
 800ab9c:	9301      	str	r3, [sp, #4]
 800ab9e:	f003 fa3d 	bl	800e01c <_vfiprintf_r>
 800aba2:	bc16      	pop	{r1, r2, r4}
 800aba4:	bc08      	pop	{r3}
 800aba6:	b004      	add	sp, #16
 800aba8:	4718      	bx	r3
 800abaa:	46c0      	nop			; (mov r8, r8)
 800abac:	20000064 	.word	0x20000064

0800abb0 <_puts_r>:
 800abb0:	b570      	push	{r4, r5, r6, lr}
 800abb2:	0005      	movs	r5, r0
 800abb4:	000e      	movs	r6, r1
 800abb6:	2800      	cmp	r0, #0
 800abb8:	d004      	beq.n	800abc4 <_puts_r+0x14>
 800abba:	6983      	ldr	r3, [r0, #24]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d101      	bne.n	800abc4 <_puts_r+0x14>
 800abc0:	f001 ff8e 	bl	800cae0 <__sinit>
 800abc4:	69ab      	ldr	r3, [r5, #24]
 800abc6:	68ac      	ldr	r4, [r5, #8]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d102      	bne.n	800abd2 <_puts_r+0x22>
 800abcc:	0028      	movs	r0, r5
 800abce:	f001 ff87 	bl	800cae0 <__sinit>
 800abd2:	4b24      	ldr	r3, [pc, #144]	; (800ac64 <_puts_r+0xb4>)
 800abd4:	429c      	cmp	r4, r3
 800abd6:	d10f      	bne.n	800abf8 <_puts_r+0x48>
 800abd8:	686c      	ldr	r4, [r5, #4]
 800abda:	89a3      	ldrh	r3, [r4, #12]
 800abdc:	071b      	lsls	r3, r3, #28
 800abde:	d502      	bpl.n	800abe6 <_puts_r+0x36>
 800abe0:	6923      	ldr	r3, [r4, #16]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d11f      	bne.n	800ac26 <_puts_r+0x76>
 800abe6:	0021      	movs	r1, r4
 800abe8:	0028      	movs	r0, r5
 800abea:	f000 ffa5 	bl	800bb38 <__swsetup_r>
 800abee:	2800      	cmp	r0, #0
 800abf0:	d019      	beq.n	800ac26 <_puts_r+0x76>
 800abf2:	2001      	movs	r0, #1
 800abf4:	4240      	negs	r0, r0
 800abf6:	bd70      	pop	{r4, r5, r6, pc}
 800abf8:	4b1b      	ldr	r3, [pc, #108]	; (800ac68 <_puts_r+0xb8>)
 800abfa:	429c      	cmp	r4, r3
 800abfc:	d101      	bne.n	800ac02 <_puts_r+0x52>
 800abfe:	68ac      	ldr	r4, [r5, #8]
 800ac00:	e7eb      	b.n	800abda <_puts_r+0x2a>
 800ac02:	4b1a      	ldr	r3, [pc, #104]	; (800ac6c <_puts_r+0xbc>)
 800ac04:	429c      	cmp	r4, r3
 800ac06:	d1e8      	bne.n	800abda <_puts_r+0x2a>
 800ac08:	68ec      	ldr	r4, [r5, #12]
 800ac0a:	e7e6      	b.n	800abda <_puts_r+0x2a>
 800ac0c:	3601      	adds	r6, #1
 800ac0e:	60a3      	str	r3, [r4, #8]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	da04      	bge.n	800ac1e <_puts_r+0x6e>
 800ac14:	69a2      	ldr	r2, [r4, #24]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	dc16      	bgt.n	800ac48 <_puts_r+0x98>
 800ac1a:	290a      	cmp	r1, #10
 800ac1c:	d014      	beq.n	800ac48 <_puts_r+0x98>
 800ac1e:	6823      	ldr	r3, [r4, #0]
 800ac20:	1c5a      	adds	r2, r3, #1
 800ac22:	6022      	str	r2, [r4, #0]
 800ac24:	7019      	strb	r1, [r3, #0]
 800ac26:	68a3      	ldr	r3, [r4, #8]
 800ac28:	7831      	ldrb	r1, [r6, #0]
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	2900      	cmp	r1, #0
 800ac2e:	d1ed      	bne.n	800ac0c <_puts_r+0x5c>
 800ac30:	60a3      	str	r3, [r4, #8]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	da0f      	bge.n	800ac56 <_puts_r+0xa6>
 800ac36:	0022      	movs	r2, r4
 800ac38:	310a      	adds	r1, #10
 800ac3a:	0028      	movs	r0, r5
 800ac3c:	f000 ff26 	bl	800ba8c <__swbuf_r>
 800ac40:	1c43      	adds	r3, r0, #1
 800ac42:	d0d6      	beq.n	800abf2 <_puts_r+0x42>
 800ac44:	200a      	movs	r0, #10
 800ac46:	e7d6      	b.n	800abf6 <_puts_r+0x46>
 800ac48:	0022      	movs	r2, r4
 800ac4a:	0028      	movs	r0, r5
 800ac4c:	f000 ff1e 	bl	800ba8c <__swbuf_r>
 800ac50:	1c43      	adds	r3, r0, #1
 800ac52:	d1e8      	bne.n	800ac26 <_puts_r+0x76>
 800ac54:	e7cd      	b.n	800abf2 <_puts_r+0x42>
 800ac56:	200a      	movs	r0, #10
 800ac58:	6823      	ldr	r3, [r4, #0]
 800ac5a:	1c5a      	adds	r2, r3, #1
 800ac5c:	6022      	str	r2, [r4, #0]
 800ac5e:	7018      	strb	r0, [r3, #0]
 800ac60:	e7c9      	b.n	800abf6 <_puts_r+0x46>
 800ac62:	46c0      	nop			; (mov r8, r8)
 800ac64:	0800eb18 	.word	0x0800eb18
 800ac68:	0800eb38 	.word	0x0800eb38
 800ac6c:	0800eaf8 	.word	0x0800eaf8

0800ac70 <puts>:
 800ac70:	b510      	push	{r4, lr}
 800ac72:	4b03      	ldr	r3, [pc, #12]	; (800ac80 <puts+0x10>)
 800ac74:	0001      	movs	r1, r0
 800ac76:	6818      	ldr	r0, [r3, #0]
 800ac78:	f7ff ff9a 	bl	800abb0 <_puts_r>
 800ac7c:	bd10      	pop	{r4, pc}
 800ac7e:	46c0      	nop			; (mov r8, r8)
 800ac80:	20000064 	.word	0x20000064

0800ac84 <nanf>:
 800ac84:	4800      	ldr	r0, [pc, #0]	; (800ac88 <nanf+0x4>)
 800ac86:	4770      	bx	lr
 800ac88:	7fc00000 	.word	0x7fc00000

0800ac8c <siprintf>:
 800ac8c:	b40e      	push	{r1, r2, r3}
 800ac8e:	b500      	push	{lr}
 800ac90:	490b      	ldr	r1, [pc, #44]	; (800acc0 <siprintf+0x34>)
 800ac92:	b09c      	sub	sp, #112	; 0x70
 800ac94:	ab1d      	add	r3, sp, #116	; 0x74
 800ac96:	9002      	str	r0, [sp, #8]
 800ac98:	9006      	str	r0, [sp, #24]
 800ac9a:	9107      	str	r1, [sp, #28]
 800ac9c:	9104      	str	r1, [sp, #16]
 800ac9e:	4809      	ldr	r0, [pc, #36]	; (800acc4 <siprintf+0x38>)
 800aca0:	4909      	ldr	r1, [pc, #36]	; (800acc8 <siprintf+0x3c>)
 800aca2:	cb04      	ldmia	r3!, {r2}
 800aca4:	9105      	str	r1, [sp, #20]
 800aca6:	6800      	ldr	r0, [r0, #0]
 800aca8:	a902      	add	r1, sp, #8
 800acaa:	9301      	str	r3, [sp, #4]
 800acac:	f003 f890 	bl	800ddd0 <_svfiprintf_r>
 800acb0:	2300      	movs	r3, #0
 800acb2:	9a02      	ldr	r2, [sp, #8]
 800acb4:	7013      	strb	r3, [r2, #0]
 800acb6:	b01c      	add	sp, #112	; 0x70
 800acb8:	bc08      	pop	{r3}
 800acba:	b003      	add	sp, #12
 800acbc:	4718      	bx	r3
 800acbe:	46c0      	nop			; (mov r8, r8)
 800acc0:	7fffffff 	.word	0x7fffffff
 800acc4:	20000064 	.word	0x20000064
 800acc8:	ffff0208 	.word	0xffff0208

0800accc <sulp>:
 800accc:	b570      	push	{r4, r5, r6, lr}
 800acce:	0016      	movs	r6, r2
 800acd0:	000d      	movs	r5, r1
 800acd2:	f002 fe3f 	bl	800d954 <__ulp>
 800acd6:	2e00      	cmp	r6, #0
 800acd8:	d00d      	beq.n	800acf6 <sulp+0x2a>
 800acda:	236b      	movs	r3, #107	; 0x6b
 800acdc:	006a      	lsls	r2, r5, #1
 800acde:	0d52      	lsrs	r2, r2, #21
 800ace0:	1a9b      	subs	r3, r3, r2
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	dd07      	ble.n	800acf6 <sulp+0x2a>
 800ace6:	2400      	movs	r4, #0
 800ace8:	4a03      	ldr	r2, [pc, #12]	; (800acf8 <sulp+0x2c>)
 800acea:	051b      	lsls	r3, r3, #20
 800acec:	189d      	adds	r5, r3, r2
 800acee:	002b      	movs	r3, r5
 800acf0:	0022      	movs	r2, r4
 800acf2:	f7f7 f8b1 	bl	8001e58 <__aeabi_dmul>
 800acf6:	bd70      	pop	{r4, r5, r6, pc}
 800acf8:	3ff00000 	.word	0x3ff00000

0800acfc <_strtod_l>:
 800acfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acfe:	b0a7      	sub	sp, #156	; 0x9c
 800ad00:	9307      	str	r3, [sp, #28]
 800ad02:	2300      	movs	r3, #0
 800ad04:	9004      	str	r0, [sp, #16]
 800ad06:	9807      	ldr	r0, [sp, #28]
 800ad08:	9322      	str	r3, [sp, #136]	; 0x88
 800ad0a:	9106      	str	r1, [sp, #24]
 800ad0c:	921d      	str	r2, [sp, #116]	; 0x74
 800ad0e:	f002 faae 	bl	800d26e <__localeconv_l>
 800ad12:	0005      	movs	r5, r0
 800ad14:	6800      	ldr	r0, [r0, #0]
 800ad16:	f7f5 f9f7 	bl	8000108 <strlen>
 800ad1a:	2600      	movs	r6, #0
 800ad1c:	2700      	movs	r7, #0
 800ad1e:	9b06      	ldr	r3, [sp, #24]
 800ad20:	9005      	str	r0, [sp, #20]
 800ad22:	9321      	str	r3, [sp, #132]	; 0x84
 800ad24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad26:	781a      	ldrb	r2, [r3, #0]
 800ad28:	2a0d      	cmp	r2, #13
 800ad2a:	d839      	bhi.n	800ada0 <_strtod_l+0xa4>
 800ad2c:	2a09      	cmp	r2, #9
 800ad2e:	d23d      	bcs.n	800adac <_strtod_l+0xb0>
 800ad30:	2a00      	cmp	r2, #0
 800ad32:	d044      	beq.n	800adbe <_strtod_l+0xc2>
 800ad34:	2300      	movs	r3, #0
 800ad36:	9313      	str	r3, [sp, #76]	; 0x4c
 800ad38:	2200      	movs	r2, #0
 800ad3a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800ad3c:	920c      	str	r2, [sp, #48]	; 0x30
 800ad3e:	7823      	ldrb	r3, [r4, #0]
 800ad40:	2b30      	cmp	r3, #48	; 0x30
 800ad42:	d000      	beq.n	800ad46 <_strtod_l+0x4a>
 800ad44:	e07e      	b.n	800ae44 <_strtod_l+0x148>
 800ad46:	7863      	ldrb	r3, [r4, #1]
 800ad48:	2b58      	cmp	r3, #88	; 0x58
 800ad4a:	d002      	beq.n	800ad52 <_strtod_l+0x56>
 800ad4c:	2b78      	cmp	r3, #120	; 0x78
 800ad4e:	d000      	beq.n	800ad52 <_strtod_l+0x56>
 800ad50:	e06e      	b.n	800ae30 <_strtod_l+0x134>
 800ad52:	9b07      	ldr	r3, [sp, #28]
 800ad54:	4a96      	ldr	r2, [pc, #600]	; (800afb0 <_strtod_l+0x2b4>)
 800ad56:	9302      	str	r3, [sp, #8]
 800ad58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad5a:	a921      	add	r1, sp, #132	; 0x84
 800ad5c:	9301      	str	r3, [sp, #4]
 800ad5e:	ab22      	add	r3, sp, #136	; 0x88
 800ad60:	9300      	str	r3, [sp, #0]
 800ad62:	9804      	ldr	r0, [sp, #16]
 800ad64:	ab23      	add	r3, sp, #140	; 0x8c
 800ad66:	f001 ff97 	bl	800cc98 <__gethex>
 800ad6a:	2507      	movs	r5, #7
 800ad6c:	9005      	str	r0, [sp, #20]
 800ad6e:	4005      	ands	r5, r0
 800ad70:	d005      	beq.n	800ad7e <_strtod_l+0x82>
 800ad72:	2d06      	cmp	r5, #6
 800ad74:	d12f      	bne.n	800add6 <_strtod_l+0xda>
 800ad76:	2300      	movs	r3, #0
 800ad78:	3401      	adds	r4, #1
 800ad7a:	9421      	str	r4, [sp, #132]	; 0x84
 800ad7c:	9313      	str	r3, [sp, #76]	; 0x4c
 800ad7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d002      	beq.n	800ad8a <_strtod_l+0x8e>
 800ad84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad86:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad88:	601a      	str	r2, [r3, #0]
 800ad8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d01d      	beq.n	800adcc <_strtod_l+0xd0>
 800ad90:	2380      	movs	r3, #128	; 0x80
 800ad92:	0032      	movs	r2, r6
 800ad94:	061b      	lsls	r3, r3, #24
 800ad96:	18fb      	adds	r3, r7, r3
 800ad98:	0010      	movs	r0, r2
 800ad9a:	0019      	movs	r1, r3
 800ad9c:	b027      	add	sp, #156	; 0x9c
 800ad9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ada0:	2a2b      	cmp	r2, #43	; 0x2b
 800ada2:	d016      	beq.n	800add2 <_strtod_l+0xd6>
 800ada4:	2a2d      	cmp	r2, #45	; 0x2d
 800ada6:	d003      	beq.n	800adb0 <_strtod_l+0xb4>
 800ada8:	2a20      	cmp	r2, #32
 800adaa:	d1c3      	bne.n	800ad34 <_strtod_l+0x38>
 800adac:	3301      	adds	r3, #1
 800adae:	e7b8      	b.n	800ad22 <_strtod_l+0x26>
 800adb0:	2201      	movs	r2, #1
 800adb2:	9213      	str	r2, [sp, #76]	; 0x4c
 800adb4:	1c5a      	adds	r2, r3, #1
 800adb6:	9221      	str	r2, [sp, #132]	; 0x84
 800adb8:	785b      	ldrb	r3, [r3, #1]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d1bc      	bne.n	800ad38 <_strtod_l+0x3c>
 800adbe:	9b06      	ldr	r3, [sp, #24]
 800adc0:	9321      	str	r3, [sp, #132]	; 0x84
 800adc2:	2300      	movs	r3, #0
 800adc4:	9313      	str	r3, [sp, #76]	; 0x4c
 800adc6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d1db      	bne.n	800ad84 <_strtod_l+0x88>
 800adcc:	0032      	movs	r2, r6
 800adce:	003b      	movs	r3, r7
 800add0:	e7e2      	b.n	800ad98 <_strtod_l+0x9c>
 800add2:	2200      	movs	r2, #0
 800add4:	e7ed      	b.n	800adb2 <_strtod_l+0xb6>
 800add6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800add8:	2a00      	cmp	r2, #0
 800adda:	d007      	beq.n	800adec <_strtod_l+0xf0>
 800addc:	2135      	movs	r1, #53	; 0x35
 800adde:	a824      	add	r0, sp, #144	; 0x90
 800ade0:	f002 fea5 	bl	800db2e <__copybits>
 800ade4:	9922      	ldr	r1, [sp, #136]	; 0x88
 800ade6:	9804      	ldr	r0, [sp, #16]
 800ade8:	f002 fb1b 	bl	800d422 <_Bfree>
 800adec:	1e68      	subs	r0, r5, #1
 800adee:	2804      	cmp	r0, #4
 800adf0:	d806      	bhi.n	800ae00 <_strtod_l+0x104>
 800adf2:	f7f5 f991 	bl	8000118 <__gnu_thumb1_case_uqi>
 800adf6:	030c      	.short	0x030c
 800adf8:	1917      	.short	0x1917
 800adfa:	0c          	.byte	0x0c
 800adfb:	00          	.byte	0x00
 800adfc:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800adfe:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800ae00:	9b05      	ldr	r3, [sp, #20]
 800ae02:	071b      	lsls	r3, r3, #28
 800ae04:	d5bb      	bpl.n	800ad7e <_strtod_l+0x82>
 800ae06:	2380      	movs	r3, #128	; 0x80
 800ae08:	061b      	lsls	r3, r3, #24
 800ae0a:	431f      	orrs	r7, r3
 800ae0c:	e7b7      	b.n	800ad7e <_strtod_l+0x82>
 800ae0e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800ae10:	4a68      	ldr	r2, [pc, #416]	; (800afb4 <_strtod_l+0x2b8>)
 800ae12:	4969      	ldr	r1, [pc, #420]	; (800afb8 <_strtod_l+0x2bc>)
 800ae14:	401a      	ands	r2, r3
 800ae16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae18:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800ae1a:	185b      	adds	r3, r3, r1
 800ae1c:	051b      	lsls	r3, r3, #20
 800ae1e:	431a      	orrs	r2, r3
 800ae20:	0017      	movs	r7, r2
 800ae22:	e7ed      	b.n	800ae00 <_strtod_l+0x104>
 800ae24:	4f65      	ldr	r7, [pc, #404]	; (800afbc <_strtod_l+0x2c0>)
 800ae26:	e7eb      	b.n	800ae00 <_strtod_l+0x104>
 800ae28:	2601      	movs	r6, #1
 800ae2a:	4f65      	ldr	r7, [pc, #404]	; (800afc0 <_strtod_l+0x2c4>)
 800ae2c:	4276      	negs	r6, r6
 800ae2e:	e7e7      	b.n	800ae00 <_strtod_l+0x104>
 800ae30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae32:	1c5a      	adds	r2, r3, #1
 800ae34:	9221      	str	r2, [sp, #132]	; 0x84
 800ae36:	785b      	ldrb	r3, [r3, #1]
 800ae38:	2b30      	cmp	r3, #48	; 0x30
 800ae3a:	d0f9      	beq.n	800ae30 <_strtod_l+0x134>
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d09e      	beq.n	800ad7e <_strtod_l+0x82>
 800ae40:	2301      	movs	r3, #1
 800ae42:	930c      	str	r3, [sp, #48]	; 0x30
 800ae44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae46:	220a      	movs	r2, #10
 800ae48:	9312      	str	r3, [sp, #72]	; 0x48
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae4e:	9308      	str	r3, [sp, #32]
 800ae50:	930a      	str	r3, [sp, #40]	; 0x28
 800ae52:	9821      	ldr	r0, [sp, #132]	; 0x84
 800ae54:	7804      	ldrb	r4, [r0, #0]
 800ae56:	0023      	movs	r3, r4
 800ae58:	3b30      	subs	r3, #48	; 0x30
 800ae5a:	b2d9      	uxtb	r1, r3
 800ae5c:	2909      	cmp	r1, #9
 800ae5e:	d934      	bls.n	800aeca <_strtod_l+0x1ce>
 800ae60:	9a05      	ldr	r2, [sp, #20]
 800ae62:	6829      	ldr	r1, [r5, #0]
 800ae64:	f003 fa4e 	bl	800e304 <strncmp>
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	d040      	beq.n	800aeee <_strtod_l+0x1f2>
 800ae6c:	2000      	movs	r0, #0
 800ae6e:	0023      	movs	r3, r4
 800ae70:	4684      	mov	ip, r0
 800ae72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae74:	9007      	str	r0, [sp, #28]
 800ae76:	9205      	str	r2, [sp, #20]
 800ae78:	2220      	movs	r2, #32
 800ae7a:	0019      	movs	r1, r3
 800ae7c:	4391      	bics	r1, r2
 800ae7e:	000a      	movs	r2, r1
 800ae80:	2100      	movs	r1, #0
 800ae82:	2a45      	cmp	r2, #69	; 0x45
 800ae84:	d000      	beq.n	800ae88 <_strtod_l+0x18c>
 800ae86:	e0bf      	b.n	800b008 <_strtod_l+0x30c>
 800ae88:	9b05      	ldr	r3, [sp, #20]
 800ae8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae8c:	4303      	orrs	r3, r0
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	428b      	cmp	r3, r1
 800ae92:	d094      	beq.n	800adbe <_strtod_l+0xc2>
 800ae94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae96:	9306      	str	r3, [sp, #24]
 800ae98:	3301      	adds	r3, #1
 800ae9a:	9321      	str	r3, [sp, #132]	; 0x84
 800ae9c:	9b06      	ldr	r3, [sp, #24]
 800ae9e:	785b      	ldrb	r3, [r3, #1]
 800aea0:	2b2b      	cmp	r3, #43	; 0x2b
 800aea2:	d100      	bne.n	800aea6 <_strtod_l+0x1aa>
 800aea4:	e082      	b.n	800afac <_strtod_l+0x2b0>
 800aea6:	000c      	movs	r4, r1
 800aea8:	2b2d      	cmp	r3, #45	; 0x2d
 800aeaa:	d105      	bne.n	800aeb8 <_strtod_l+0x1bc>
 800aeac:	2401      	movs	r4, #1
 800aeae:	9b06      	ldr	r3, [sp, #24]
 800aeb0:	3302      	adds	r3, #2
 800aeb2:	9321      	str	r3, [sp, #132]	; 0x84
 800aeb4:	9b06      	ldr	r3, [sp, #24]
 800aeb6:	789b      	ldrb	r3, [r3, #2]
 800aeb8:	001a      	movs	r2, r3
 800aeba:	3a30      	subs	r2, #48	; 0x30
 800aebc:	2a09      	cmp	r2, #9
 800aebe:	d800      	bhi.n	800aec2 <_strtod_l+0x1c6>
 800aec0:	e084      	b.n	800afcc <_strtod_l+0x2d0>
 800aec2:	9a06      	ldr	r2, [sp, #24]
 800aec4:	2100      	movs	r1, #0
 800aec6:	9221      	str	r2, [sp, #132]	; 0x84
 800aec8:	e09e      	b.n	800b008 <_strtod_l+0x30c>
 800aeca:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aecc:	2908      	cmp	r1, #8
 800aece:	dc09      	bgt.n	800aee4 <_strtod_l+0x1e8>
 800aed0:	9908      	ldr	r1, [sp, #32]
 800aed2:	4351      	muls	r1, r2
 800aed4:	18cb      	adds	r3, r1, r3
 800aed6:	9308      	str	r3, [sp, #32]
 800aed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeda:	3001      	adds	r0, #1
 800aedc:	3301      	adds	r3, #1
 800aede:	930a      	str	r3, [sp, #40]	; 0x28
 800aee0:	9021      	str	r0, [sp, #132]	; 0x84
 800aee2:	e7b6      	b.n	800ae52 <_strtod_l+0x156>
 800aee4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aee6:	4351      	muls	r1, r2
 800aee8:	18cb      	adds	r3, r1, r3
 800aeea:	930b      	str	r3, [sp, #44]	; 0x2c
 800aeec:	e7f4      	b.n	800aed8 <_strtod_l+0x1dc>
 800aeee:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aef0:	9b05      	ldr	r3, [sp, #20]
 800aef2:	4694      	mov	ip, r2
 800aef4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aef6:	4463      	add	r3, ip
 800aef8:	9321      	str	r3, [sp, #132]	; 0x84
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	2a00      	cmp	r2, #0
 800aefe:	d036      	beq.n	800af6e <_strtod_l+0x272>
 800af00:	4684      	mov	ip, r0
 800af02:	9205      	str	r2, [sp, #20]
 800af04:	001a      	movs	r2, r3
 800af06:	3a30      	subs	r2, #48	; 0x30
 800af08:	2a09      	cmp	r2, #9
 800af0a:	d912      	bls.n	800af32 <_strtod_l+0x236>
 800af0c:	2201      	movs	r2, #1
 800af0e:	9207      	str	r2, [sp, #28]
 800af10:	e7b2      	b.n	800ae78 <_strtod_l+0x17c>
 800af12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af14:	3001      	adds	r0, #1
 800af16:	1c5a      	adds	r2, r3, #1
 800af18:	9221      	str	r2, [sp, #132]	; 0x84
 800af1a:	785b      	ldrb	r3, [r3, #1]
 800af1c:	2b30      	cmp	r3, #48	; 0x30
 800af1e:	d0f8      	beq.n	800af12 <_strtod_l+0x216>
 800af20:	001a      	movs	r2, r3
 800af22:	3a31      	subs	r2, #49	; 0x31
 800af24:	2a08      	cmp	r2, #8
 800af26:	d83c      	bhi.n	800afa2 <_strtod_l+0x2a6>
 800af28:	4684      	mov	ip, r0
 800af2a:	2000      	movs	r0, #0
 800af2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af2e:	9005      	str	r0, [sp, #20]
 800af30:	9212      	str	r2, [sp, #72]	; 0x48
 800af32:	3b30      	subs	r3, #48	; 0x30
 800af34:	1c42      	adds	r2, r0, #1
 800af36:	2b00      	cmp	r3, #0
 800af38:	d013      	beq.n	800af62 <_strtod_l+0x266>
 800af3a:	210a      	movs	r1, #10
 800af3c:	4494      	add	ip, r2
 800af3e:	9a05      	ldr	r2, [sp, #20]
 800af40:	1885      	adds	r5, r0, r2
 800af42:	42aa      	cmp	r2, r5
 800af44:	d115      	bne.n	800af72 <_strtod_l+0x276>
 800af46:	9905      	ldr	r1, [sp, #20]
 800af48:	9a05      	ldr	r2, [sp, #20]
 800af4a:	3101      	adds	r1, #1
 800af4c:	1809      	adds	r1, r1, r0
 800af4e:	1812      	adds	r2, r2, r0
 800af50:	9105      	str	r1, [sp, #20]
 800af52:	2a08      	cmp	r2, #8
 800af54:	dc1b      	bgt.n	800af8e <_strtod_l+0x292>
 800af56:	220a      	movs	r2, #10
 800af58:	9908      	ldr	r1, [sp, #32]
 800af5a:	434a      	muls	r2, r1
 800af5c:	189b      	adds	r3, r3, r2
 800af5e:	2200      	movs	r2, #0
 800af60:	9308      	str	r3, [sp, #32]
 800af62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af64:	0010      	movs	r0, r2
 800af66:	1c59      	adds	r1, r3, #1
 800af68:	9121      	str	r1, [sp, #132]	; 0x84
 800af6a:	785b      	ldrb	r3, [r3, #1]
 800af6c:	e7ca      	b.n	800af04 <_strtod_l+0x208>
 800af6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af70:	e7d4      	b.n	800af1c <_strtod_l+0x220>
 800af72:	1c54      	adds	r4, r2, #1
 800af74:	2a08      	cmp	r2, #8
 800af76:	dc04      	bgt.n	800af82 <_strtod_l+0x286>
 800af78:	9a08      	ldr	r2, [sp, #32]
 800af7a:	434a      	muls	r2, r1
 800af7c:	9208      	str	r2, [sp, #32]
 800af7e:	0022      	movs	r2, r4
 800af80:	e7df      	b.n	800af42 <_strtod_l+0x246>
 800af82:	2c10      	cmp	r4, #16
 800af84:	dcfb      	bgt.n	800af7e <_strtod_l+0x282>
 800af86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af88:	434a      	muls	r2, r1
 800af8a:	920b      	str	r2, [sp, #44]	; 0x2c
 800af8c:	e7f7      	b.n	800af7e <_strtod_l+0x282>
 800af8e:	9905      	ldr	r1, [sp, #20]
 800af90:	2200      	movs	r2, #0
 800af92:	2910      	cmp	r1, #16
 800af94:	dce5      	bgt.n	800af62 <_strtod_l+0x266>
 800af96:	210a      	movs	r1, #10
 800af98:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800af9a:	4341      	muls	r1, r0
 800af9c:	185b      	adds	r3, r3, r1
 800af9e:	930b      	str	r3, [sp, #44]	; 0x2c
 800afa0:	e7df      	b.n	800af62 <_strtod_l+0x266>
 800afa2:	2200      	movs	r2, #0
 800afa4:	4694      	mov	ip, r2
 800afa6:	9205      	str	r2, [sp, #20]
 800afa8:	3201      	adds	r2, #1
 800afaa:	e7b0      	b.n	800af0e <_strtod_l+0x212>
 800afac:	000c      	movs	r4, r1
 800afae:	e77e      	b.n	800aeae <_strtod_l+0x1b2>
 800afb0:	0800ea94 	.word	0x0800ea94
 800afb4:	ffefffff 	.word	0xffefffff
 800afb8:	00000433 	.word	0x00000433
 800afbc:	7ff00000 	.word	0x7ff00000
 800afc0:	7fffffff 	.word	0x7fffffff
 800afc4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afc6:	1c5a      	adds	r2, r3, #1
 800afc8:	9221      	str	r2, [sp, #132]	; 0x84
 800afca:	785b      	ldrb	r3, [r3, #1]
 800afcc:	2b30      	cmp	r3, #48	; 0x30
 800afce:	d0f9      	beq.n	800afc4 <_strtod_l+0x2c8>
 800afd0:	001a      	movs	r2, r3
 800afd2:	3a31      	subs	r2, #49	; 0x31
 800afd4:	2100      	movs	r1, #0
 800afd6:	2a08      	cmp	r2, #8
 800afd8:	d816      	bhi.n	800b008 <_strtod_l+0x30c>
 800afda:	3b30      	subs	r3, #48	; 0x30
 800afdc:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800afde:	930e      	str	r3, [sp, #56]	; 0x38
 800afe0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afe2:	1c59      	adds	r1, r3, #1
 800afe4:	9121      	str	r1, [sp, #132]	; 0x84
 800afe6:	785b      	ldrb	r3, [r3, #1]
 800afe8:	001a      	movs	r2, r3
 800afea:	3a30      	subs	r2, #48	; 0x30
 800afec:	2a09      	cmp	r2, #9
 800afee:	d932      	bls.n	800b056 <_strtod_l+0x35a>
 800aff0:	1b4a      	subs	r2, r1, r5
 800aff2:	4dad      	ldr	r5, [pc, #692]	; (800b2a8 <_strtod_l+0x5ac>)
 800aff4:	0029      	movs	r1, r5
 800aff6:	2a08      	cmp	r2, #8
 800aff8:	dc03      	bgt.n	800b002 <_strtod_l+0x306>
 800affa:	990e      	ldr	r1, [sp, #56]	; 0x38
 800affc:	42a9      	cmp	r1, r5
 800affe:	dd00      	ble.n	800b002 <_strtod_l+0x306>
 800b000:	0029      	movs	r1, r5
 800b002:	2c00      	cmp	r4, #0
 800b004:	d000      	beq.n	800b008 <_strtod_l+0x30c>
 800b006:	4249      	negs	r1, r1
 800b008:	9a05      	ldr	r2, [sp, #20]
 800b00a:	2a00      	cmp	r2, #0
 800b00c:	d149      	bne.n	800b0a2 <_strtod_l+0x3a6>
 800b00e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b010:	4310      	orrs	r0, r2
 800b012:	d000      	beq.n	800b016 <_strtod_l+0x31a>
 800b014:	e6b3      	b.n	800ad7e <_strtod_l+0x82>
 800b016:	9a07      	ldr	r2, [sp, #28]
 800b018:	2a00      	cmp	r2, #0
 800b01a:	d000      	beq.n	800b01e <_strtod_l+0x322>
 800b01c:	e6cf      	b.n	800adbe <_strtod_l+0xc2>
 800b01e:	2b4e      	cmp	r3, #78	; 0x4e
 800b020:	d025      	beq.n	800b06e <_strtod_l+0x372>
 800b022:	dc1f      	bgt.n	800b064 <_strtod_l+0x368>
 800b024:	2b49      	cmp	r3, #73	; 0x49
 800b026:	d000      	beq.n	800b02a <_strtod_l+0x32e>
 800b028:	e6c9      	b.n	800adbe <_strtod_l+0xc2>
 800b02a:	49a0      	ldr	r1, [pc, #640]	; (800b2ac <_strtod_l+0x5b0>)
 800b02c:	a821      	add	r0, sp, #132	; 0x84
 800b02e:	f002 f870 	bl	800d112 <__match>
 800b032:	2800      	cmp	r0, #0
 800b034:	d100      	bne.n	800b038 <_strtod_l+0x33c>
 800b036:	e6c2      	b.n	800adbe <_strtod_l+0xc2>
 800b038:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b03a:	499d      	ldr	r1, [pc, #628]	; (800b2b0 <_strtod_l+0x5b4>)
 800b03c:	3b01      	subs	r3, #1
 800b03e:	a821      	add	r0, sp, #132	; 0x84
 800b040:	9321      	str	r3, [sp, #132]	; 0x84
 800b042:	f002 f866 	bl	800d112 <__match>
 800b046:	2800      	cmp	r0, #0
 800b048:	d102      	bne.n	800b050 <_strtod_l+0x354>
 800b04a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b04c:	3301      	adds	r3, #1
 800b04e:	9321      	str	r3, [sp, #132]	; 0x84
 800b050:	4f98      	ldr	r7, [pc, #608]	; (800b2b4 <_strtod_l+0x5b8>)
 800b052:	2600      	movs	r6, #0
 800b054:	e693      	b.n	800ad7e <_strtod_l+0x82>
 800b056:	220a      	movs	r2, #10
 800b058:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b05a:	434a      	muls	r2, r1
 800b05c:	18d2      	adds	r2, r2, r3
 800b05e:	3a30      	subs	r2, #48	; 0x30
 800b060:	920e      	str	r2, [sp, #56]	; 0x38
 800b062:	e7bd      	b.n	800afe0 <_strtod_l+0x2e4>
 800b064:	2b69      	cmp	r3, #105	; 0x69
 800b066:	d0e0      	beq.n	800b02a <_strtod_l+0x32e>
 800b068:	2b6e      	cmp	r3, #110	; 0x6e
 800b06a:	d000      	beq.n	800b06e <_strtod_l+0x372>
 800b06c:	e6a7      	b.n	800adbe <_strtod_l+0xc2>
 800b06e:	4992      	ldr	r1, [pc, #584]	; (800b2b8 <_strtod_l+0x5bc>)
 800b070:	a821      	add	r0, sp, #132	; 0x84
 800b072:	f002 f84e 	bl	800d112 <__match>
 800b076:	2800      	cmp	r0, #0
 800b078:	d100      	bne.n	800b07c <_strtod_l+0x380>
 800b07a:	e6a0      	b.n	800adbe <_strtod_l+0xc2>
 800b07c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	2b28      	cmp	r3, #40	; 0x28
 800b082:	d10c      	bne.n	800b09e <_strtod_l+0x3a2>
 800b084:	aa24      	add	r2, sp, #144	; 0x90
 800b086:	498d      	ldr	r1, [pc, #564]	; (800b2bc <_strtod_l+0x5c0>)
 800b088:	a821      	add	r0, sp, #132	; 0x84
 800b08a:	f002 f856 	bl	800d13a <__hexnan>
 800b08e:	2805      	cmp	r0, #5
 800b090:	d105      	bne.n	800b09e <_strtod_l+0x3a2>
 800b092:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800b094:	4a87      	ldr	r2, [pc, #540]	; (800b2b4 <_strtod_l+0x5b8>)
 800b096:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800b098:	431a      	orrs	r2, r3
 800b09a:	0017      	movs	r7, r2
 800b09c:	e66f      	b.n	800ad7e <_strtod_l+0x82>
 800b09e:	4f88      	ldr	r7, [pc, #544]	; (800b2c0 <_strtod_l+0x5c4>)
 800b0a0:	e7d7      	b.n	800b052 <_strtod_l+0x356>
 800b0a2:	4663      	mov	r3, ip
 800b0a4:	1acb      	subs	r3, r1, r3
 800b0a6:	9307      	str	r3, [sp, #28]
 800b0a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d101      	bne.n	800b0b2 <_strtod_l+0x3b6>
 800b0ae:	9b05      	ldr	r3, [sp, #20]
 800b0b0:	930a      	str	r3, [sp, #40]	; 0x28
 800b0b2:	9c05      	ldr	r4, [sp, #20]
 800b0b4:	2c10      	cmp	r4, #16
 800b0b6:	dd00      	ble.n	800b0ba <_strtod_l+0x3be>
 800b0b8:	2410      	movs	r4, #16
 800b0ba:	9808      	ldr	r0, [sp, #32]
 800b0bc:	f7f7 fd12 	bl	8002ae4 <__aeabi_ui2d>
 800b0c0:	9b05      	ldr	r3, [sp, #20]
 800b0c2:	0006      	movs	r6, r0
 800b0c4:	000f      	movs	r7, r1
 800b0c6:	2b09      	cmp	r3, #9
 800b0c8:	dc15      	bgt.n	800b0f6 <_strtod_l+0x3fa>
 800b0ca:	9b07      	ldr	r3, [sp, #28]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d100      	bne.n	800b0d2 <_strtod_l+0x3d6>
 800b0d0:	e655      	b.n	800ad7e <_strtod_l+0x82>
 800b0d2:	9b07      	ldr	r3, [sp, #28]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	dc00      	bgt.n	800b0da <_strtod_l+0x3de>
 800b0d8:	e07d      	b.n	800b1d6 <_strtod_l+0x4da>
 800b0da:	2b16      	cmp	r3, #22
 800b0dc:	dc62      	bgt.n	800b1a4 <_strtod_l+0x4a8>
 800b0de:	00dc      	lsls	r4, r3, #3
 800b0e0:	4b78      	ldr	r3, [pc, #480]	; (800b2c4 <_strtod_l+0x5c8>)
 800b0e2:	0032      	movs	r2, r6
 800b0e4:	1919      	adds	r1, r3, r4
 800b0e6:	003b      	movs	r3, r7
 800b0e8:	6808      	ldr	r0, [r1, #0]
 800b0ea:	6849      	ldr	r1, [r1, #4]
 800b0ec:	f7f6 feb4 	bl	8001e58 <__aeabi_dmul>
 800b0f0:	0006      	movs	r6, r0
 800b0f2:	000f      	movs	r7, r1
 800b0f4:	e643      	b.n	800ad7e <_strtod_l+0x82>
 800b0f6:	0022      	movs	r2, r4
 800b0f8:	4b72      	ldr	r3, [pc, #456]	; (800b2c4 <_strtod_l+0x5c8>)
 800b0fa:	3a09      	subs	r2, #9
 800b0fc:	00d2      	lsls	r2, r2, #3
 800b0fe:	189b      	adds	r3, r3, r2
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	f7f6 fea8 	bl	8001e58 <__aeabi_dmul>
 800b108:	0006      	movs	r6, r0
 800b10a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b10c:	000f      	movs	r7, r1
 800b10e:	f7f7 fce9 	bl	8002ae4 <__aeabi_ui2d>
 800b112:	000b      	movs	r3, r1
 800b114:	0002      	movs	r2, r0
 800b116:	0039      	movs	r1, r7
 800b118:	0030      	movs	r0, r6
 800b11a:	f7f5 ff77 	bl	800100c <__aeabi_dadd>
 800b11e:	9b05      	ldr	r3, [sp, #20]
 800b120:	0006      	movs	r6, r0
 800b122:	000f      	movs	r7, r1
 800b124:	2b0f      	cmp	r3, #15
 800b126:	ddd0      	ble.n	800b0ca <_strtod_l+0x3ce>
 800b128:	9b05      	ldr	r3, [sp, #20]
 800b12a:	1b1c      	subs	r4, r3, r4
 800b12c:	9b07      	ldr	r3, [sp, #28]
 800b12e:	18e4      	adds	r4, r4, r3
 800b130:	2c00      	cmp	r4, #0
 800b132:	dc00      	bgt.n	800b136 <_strtod_l+0x43a>
 800b134:	e094      	b.n	800b260 <_strtod_l+0x564>
 800b136:	230f      	movs	r3, #15
 800b138:	4023      	ands	r3, r4
 800b13a:	d00a      	beq.n	800b152 <_strtod_l+0x456>
 800b13c:	4961      	ldr	r1, [pc, #388]	; (800b2c4 <_strtod_l+0x5c8>)
 800b13e:	00db      	lsls	r3, r3, #3
 800b140:	18c9      	adds	r1, r1, r3
 800b142:	0032      	movs	r2, r6
 800b144:	6808      	ldr	r0, [r1, #0]
 800b146:	6849      	ldr	r1, [r1, #4]
 800b148:	003b      	movs	r3, r7
 800b14a:	f7f6 fe85 	bl	8001e58 <__aeabi_dmul>
 800b14e:	0006      	movs	r6, r0
 800b150:	000f      	movs	r7, r1
 800b152:	230f      	movs	r3, #15
 800b154:	439c      	bics	r4, r3
 800b156:	d06e      	beq.n	800b236 <_strtod_l+0x53a>
 800b158:	3326      	adds	r3, #38	; 0x26
 800b15a:	33ff      	adds	r3, #255	; 0xff
 800b15c:	429c      	cmp	r4, r3
 800b15e:	dd48      	ble.n	800b1f2 <_strtod_l+0x4f6>
 800b160:	2400      	movs	r4, #0
 800b162:	9405      	str	r4, [sp, #20]
 800b164:	940b      	str	r4, [sp, #44]	; 0x2c
 800b166:	940a      	str	r4, [sp, #40]	; 0x28
 800b168:	2322      	movs	r3, #34	; 0x22
 800b16a:	2600      	movs	r6, #0
 800b16c:	9a04      	ldr	r2, [sp, #16]
 800b16e:	4f51      	ldr	r7, [pc, #324]	; (800b2b4 <_strtod_l+0x5b8>)
 800b170:	6013      	str	r3, [r2, #0]
 800b172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b174:	42b3      	cmp	r3, r6
 800b176:	d100      	bne.n	800b17a <_strtod_l+0x47e>
 800b178:	e601      	b.n	800ad7e <_strtod_l+0x82>
 800b17a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b17c:	9804      	ldr	r0, [sp, #16]
 800b17e:	f002 f950 	bl	800d422 <_Bfree>
 800b182:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b184:	9804      	ldr	r0, [sp, #16]
 800b186:	f002 f94c 	bl	800d422 <_Bfree>
 800b18a:	9905      	ldr	r1, [sp, #20]
 800b18c:	9804      	ldr	r0, [sp, #16]
 800b18e:	f002 f948 	bl	800d422 <_Bfree>
 800b192:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b194:	9804      	ldr	r0, [sp, #16]
 800b196:	f002 f944 	bl	800d422 <_Bfree>
 800b19a:	0021      	movs	r1, r4
 800b19c:	9804      	ldr	r0, [sp, #16]
 800b19e:	f002 f940 	bl	800d422 <_Bfree>
 800b1a2:	e5ec      	b.n	800ad7e <_strtod_l+0x82>
 800b1a4:	2325      	movs	r3, #37	; 0x25
 800b1a6:	9a05      	ldr	r2, [sp, #20]
 800b1a8:	1a9b      	subs	r3, r3, r2
 800b1aa:	9a07      	ldr	r2, [sp, #28]
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	dbbb      	blt.n	800b128 <_strtod_l+0x42c>
 800b1b0:	230f      	movs	r3, #15
 800b1b2:	9a05      	ldr	r2, [sp, #20]
 800b1b4:	4c43      	ldr	r4, [pc, #268]	; (800b2c4 <_strtod_l+0x5c8>)
 800b1b6:	1a9d      	subs	r5, r3, r2
 800b1b8:	00e9      	lsls	r1, r5, #3
 800b1ba:	1861      	adds	r1, r4, r1
 800b1bc:	0032      	movs	r2, r6
 800b1be:	6808      	ldr	r0, [r1, #0]
 800b1c0:	6849      	ldr	r1, [r1, #4]
 800b1c2:	003b      	movs	r3, r7
 800b1c4:	f7f6 fe48 	bl	8001e58 <__aeabi_dmul>
 800b1c8:	9b07      	ldr	r3, [sp, #28]
 800b1ca:	1b5e      	subs	r6, r3, r5
 800b1cc:	00f6      	lsls	r6, r6, #3
 800b1ce:	19a6      	adds	r6, r4, r6
 800b1d0:	6832      	ldr	r2, [r6, #0]
 800b1d2:	6873      	ldr	r3, [r6, #4]
 800b1d4:	e78a      	b.n	800b0ec <_strtod_l+0x3f0>
 800b1d6:	9b07      	ldr	r3, [sp, #28]
 800b1d8:	3316      	adds	r3, #22
 800b1da:	dba5      	blt.n	800b128 <_strtod_l+0x42c>
 800b1dc:	9b07      	ldr	r3, [sp, #28]
 800b1de:	0030      	movs	r0, r6
 800b1e0:	00da      	lsls	r2, r3, #3
 800b1e2:	4b38      	ldr	r3, [pc, #224]	; (800b2c4 <_strtod_l+0x5c8>)
 800b1e4:	0039      	movs	r1, r7
 800b1e6:	1a9b      	subs	r3, r3, r2
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	f7f6 fa2a 	bl	8001644 <__aeabi_ddiv>
 800b1f0:	e77e      	b.n	800b0f0 <_strtod_l+0x3f4>
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	0030      	movs	r0, r6
 800b1f6:	0039      	movs	r1, r7
 800b1f8:	001d      	movs	r5, r3
 800b1fa:	1124      	asrs	r4, r4, #4
 800b1fc:	2c01      	cmp	r4, #1
 800b1fe:	dc1d      	bgt.n	800b23c <_strtod_l+0x540>
 800b200:	2b00      	cmp	r3, #0
 800b202:	d001      	beq.n	800b208 <_strtod_l+0x50c>
 800b204:	0006      	movs	r6, r0
 800b206:	000f      	movs	r7, r1
 800b208:	4b2f      	ldr	r3, [pc, #188]	; (800b2c8 <_strtod_l+0x5cc>)
 800b20a:	00ed      	lsls	r5, r5, #3
 800b20c:	18ff      	adds	r7, r7, r3
 800b20e:	4b2f      	ldr	r3, [pc, #188]	; (800b2cc <_strtod_l+0x5d0>)
 800b210:	0032      	movs	r2, r6
 800b212:	195d      	adds	r5, r3, r5
 800b214:	6828      	ldr	r0, [r5, #0]
 800b216:	6869      	ldr	r1, [r5, #4]
 800b218:	003b      	movs	r3, r7
 800b21a:	f7f6 fe1d 	bl	8001e58 <__aeabi_dmul>
 800b21e:	4b25      	ldr	r3, [pc, #148]	; (800b2b4 <_strtod_l+0x5b8>)
 800b220:	4a2b      	ldr	r2, [pc, #172]	; (800b2d0 <_strtod_l+0x5d4>)
 800b222:	0006      	movs	r6, r0
 800b224:	400b      	ands	r3, r1
 800b226:	4293      	cmp	r3, r2
 800b228:	d89a      	bhi.n	800b160 <_strtod_l+0x464>
 800b22a:	4a2a      	ldr	r2, [pc, #168]	; (800b2d4 <_strtod_l+0x5d8>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d913      	bls.n	800b258 <_strtod_l+0x55c>
 800b230:	2601      	movs	r6, #1
 800b232:	4f29      	ldr	r7, [pc, #164]	; (800b2d8 <_strtod_l+0x5dc>)
 800b234:	4276      	negs	r6, r6
 800b236:	2300      	movs	r3, #0
 800b238:	9306      	str	r3, [sp, #24]
 800b23a:	e07b      	b.n	800b334 <_strtod_l+0x638>
 800b23c:	2201      	movs	r2, #1
 800b23e:	4214      	tst	r4, r2
 800b240:	d007      	beq.n	800b252 <_strtod_l+0x556>
 800b242:	4a22      	ldr	r2, [pc, #136]	; (800b2cc <_strtod_l+0x5d0>)
 800b244:	00eb      	lsls	r3, r5, #3
 800b246:	189b      	adds	r3, r3, r2
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	f7f6 fe04 	bl	8001e58 <__aeabi_dmul>
 800b250:	2301      	movs	r3, #1
 800b252:	3501      	adds	r5, #1
 800b254:	1064      	asrs	r4, r4, #1
 800b256:	e7d1      	b.n	800b1fc <_strtod_l+0x500>
 800b258:	23d4      	movs	r3, #212	; 0xd4
 800b25a:	049b      	lsls	r3, r3, #18
 800b25c:	18cf      	adds	r7, r1, r3
 800b25e:	e7ea      	b.n	800b236 <_strtod_l+0x53a>
 800b260:	2c00      	cmp	r4, #0
 800b262:	d0e8      	beq.n	800b236 <_strtod_l+0x53a>
 800b264:	230f      	movs	r3, #15
 800b266:	4264      	negs	r4, r4
 800b268:	4023      	ands	r3, r4
 800b26a:	d00a      	beq.n	800b282 <_strtod_l+0x586>
 800b26c:	4a15      	ldr	r2, [pc, #84]	; (800b2c4 <_strtod_l+0x5c8>)
 800b26e:	00db      	lsls	r3, r3, #3
 800b270:	18d3      	adds	r3, r2, r3
 800b272:	0030      	movs	r0, r6
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	0039      	movs	r1, r7
 800b27a:	f7f6 f9e3 	bl	8001644 <__aeabi_ddiv>
 800b27e:	0006      	movs	r6, r0
 800b280:	000f      	movs	r7, r1
 800b282:	1124      	asrs	r4, r4, #4
 800b284:	d0d7      	beq.n	800b236 <_strtod_l+0x53a>
 800b286:	2c1f      	cmp	r4, #31
 800b288:	dd28      	ble.n	800b2dc <_strtod_l+0x5e0>
 800b28a:	2400      	movs	r4, #0
 800b28c:	9405      	str	r4, [sp, #20]
 800b28e:	940b      	str	r4, [sp, #44]	; 0x2c
 800b290:	940a      	str	r4, [sp, #40]	; 0x28
 800b292:	2322      	movs	r3, #34	; 0x22
 800b294:	9a04      	ldr	r2, [sp, #16]
 800b296:	2600      	movs	r6, #0
 800b298:	6013      	str	r3, [r2, #0]
 800b29a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b29c:	2700      	movs	r7, #0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d000      	beq.n	800b2a4 <_strtod_l+0x5a8>
 800b2a2:	e76a      	b.n	800b17a <_strtod_l+0x47e>
 800b2a4:	e56b      	b.n	800ad7e <_strtod_l+0x82>
 800b2a6:	46c0      	nop			; (mov r8, r8)
 800b2a8:	00004e1f 	.word	0x00004e1f
 800b2ac:	0800ea5d 	.word	0x0800ea5d
 800b2b0:	0800eaeb 	.word	0x0800eaeb
 800b2b4:	7ff00000 	.word	0x7ff00000
 800b2b8:	0800ea65 	.word	0x0800ea65
 800b2bc:	0800eaa8 	.word	0x0800eaa8
 800b2c0:	fff80000 	.word	0xfff80000
 800b2c4:	0800eb90 	.word	0x0800eb90
 800b2c8:	fcb00000 	.word	0xfcb00000
 800b2cc:	0800eb68 	.word	0x0800eb68
 800b2d0:	7ca00000 	.word	0x7ca00000
 800b2d4:	7c900000 	.word	0x7c900000
 800b2d8:	7fefffff 	.word	0x7fefffff
 800b2dc:	2310      	movs	r3, #16
 800b2de:	4023      	ands	r3, r4
 800b2e0:	9306      	str	r3, [sp, #24]
 800b2e2:	d001      	beq.n	800b2e8 <_strtod_l+0x5ec>
 800b2e4:	236a      	movs	r3, #106	; 0x6a
 800b2e6:	9306      	str	r3, [sp, #24]
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	0030      	movs	r0, r6
 800b2ec:	0039      	movs	r1, r7
 800b2ee:	001d      	movs	r5, r3
 800b2f0:	2c00      	cmp	r4, #0
 800b2f2:	dd00      	ble.n	800b2f6 <_strtod_l+0x5fa>
 800b2f4:	e10e      	b.n	800b514 <_strtod_l+0x818>
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d001      	beq.n	800b2fe <_strtod_l+0x602>
 800b2fa:	0006      	movs	r6, r0
 800b2fc:	000f      	movs	r7, r1
 800b2fe:	9b06      	ldr	r3, [sp, #24]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d00f      	beq.n	800b324 <_strtod_l+0x628>
 800b304:	236b      	movs	r3, #107	; 0x6b
 800b306:	0079      	lsls	r1, r7, #1
 800b308:	0d49      	lsrs	r1, r1, #21
 800b30a:	003a      	movs	r2, r7
 800b30c:	1a5b      	subs	r3, r3, r1
 800b30e:	2b00      	cmp	r3, #0
 800b310:	dd08      	ble.n	800b324 <_strtod_l+0x628>
 800b312:	2b1f      	cmp	r3, #31
 800b314:	dc00      	bgt.n	800b318 <_strtod_l+0x61c>
 800b316:	e112      	b.n	800b53e <_strtod_l+0x842>
 800b318:	2600      	movs	r6, #0
 800b31a:	2b34      	cmp	r3, #52	; 0x34
 800b31c:	dc00      	bgt.n	800b320 <_strtod_l+0x624>
 800b31e:	e107      	b.n	800b530 <_strtod_l+0x834>
 800b320:	27dc      	movs	r7, #220	; 0xdc
 800b322:	04bf      	lsls	r7, r7, #18
 800b324:	2200      	movs	r2, #0
 800b326:	2300      	movs	r3, #0
 800b328:	0030      	movs	r0, r6
 800b32a:	0039      	movs	r1, r7
 800b32c:	f7f5 f884 	bl	8000438 <__aeabi_dcmpeq>
 800b330:	2800      	cmp	r0, #0
 800b332:	d1aa      	bne.n	800b28a <_strtod_l+0x58e>
 800b334:	9b08      	ldr	r3, [sp, #32]
 800b336:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b338:	9300      	str	r3, [sp, #0]
 800b33a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b33c:	9b05      	ldr	r3, [sp, #20]
 800b33e:	9804      	ldr	r0, [sp, #16]
 800b340:	f002 f8c6 	bl	800d4d0 <__s2b>
 800b344:	900b      	str	r0, [sp, #44]	; 0x2c
 800b346:	2800      	cmp	r0, #0
 800b348:	d100      	bne.n	800b34c <_strtod_l+0x650>
 800b34a:	e709      	b.n	800b160 <_strtod_l+0x464>
 800b34c:	9b07      	ldr	r3, [sp, #28]
 800b34e:	9a07      	ldr	r2, [sp, #28]
 800b350:	17db      	asrs	r3, r3, #31
 800b352:	4252      	negs	r2, r2
 800b354:	4013      	ands	r3, r2
 800b356:	9315      	str	r3, [sp, #84]	; 0x54
 800b358:	9b07      	ldr	r3, [sp, #28]
 800b35a:	2400      	movs	r4, #0
 800b35c:	43db      	mvns	r3, r3
 800b35e:	9a07      	ldr	r2, [sp, #28]
 800b360:	17db      	asrs	r3, r3, #31
 800b362:	401a      	ands	r2, r3
 800b364:	921c      	str	r2, [sp, #112]	; 0x70
 800b366:	9405      	str	r4, [sp, #20]
 800b368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b36a:	9804      	ldr	r0, [sp, #16]
 800b36c:	6859      	ldr	r1, [r3, #4]
 800b36e:	f002 f820 	bl	800d3b2 <_Balloc>
 800b372:	900a      	str	r0, [sp, #40]	; 0x28
 800b374:	2800      	cmp	r0, #0
 800b376:	d100      	bne.n	800b37a <_strtod_l+0x67e>
 800b378:	e6f6      	b.n	800b168 <_strtod_l+0x46c>
 800b37a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b37c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b37e:	691b      	ldr	r3, [r3, #16]
 800b380:	310c      	adds	r1, #12
 800b382:	1c9a      	adds	r2, r3, #2
 800b384:	0092      	lsls	r2, r2, #2
 800b386:	300c      	adds	r0, #12
 800b388:	9308      	str	r3, [sp, #32]
 800b38a:	f7fe fd8a 	bl	8009ea2 <memcpy>
 800b38e:	ab24      	add	r3, sp, #144	; 0x90
 800b390:	9301      	str	r3, [sp, #4]
 800b392:	ab23      	add	r3, sp, #140	; 0x8c
 800b394:	9300      	str	r3, [sp, #0]
 800b396:	0032      	movs	r2, r6
 800b398:	003b      	movs	r3, r7
 800b39a:	9804      	ldr	r0, [sp, #16]
 800b39c:	960e      	str	r6, [sp, #56]	; 0x38
 800b39e:	970f      	str	r7, [sp, #60]	; 0x3c
 800b3a0:	f002 fb4a 	bl	800da38 <__d2b>
 800b3a4:	9022      	str	r0, [sp, #136]	; 0x88
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	d100      	bne.n	800b3ac <_strtod_l+0x6b0>
 800b3aa:	e6dd      	b.n	800b168 <_strtod_l+0x46c>
 800b3ac:	2101      	movs	r1, #1
 800b3ae:	9804      	ldr	r0, [sp, #16]
 800b3b0:	f002 f915 	bl	800d5de <__i2b>
 800b3b4:	9005      	str	r0, [sp, #20]
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	d100      	bne.n	800b3bc <_strtod_l+0x6c0>
 800b3ba:	e6d5      	b.n	800b168 <_strtod_l+0x46c>
 800b3bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	da00      	bge.n	800b3c4 <_strtod_l+0x6c8>
 800b3c2:	e0c1      	b.n	800b548 <_strtod_l+0x84c>
 800b3c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b3c6:	189d      	adds	r5, r3, r2
 800b3c8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b3ca:	4694      	mov	ip, r2
 800b3cc:	9906      	ldr	r1, [sp, #24]
 800b3ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b3d0:	1a5b      	subs	r3, r3, r1
 800b3d2:	2136      	movs	r1, #54	; 0x36
 800b3d4:	189b      	adds	r3, r3, r2
 800b3d6:	1a8a      	subs	r2, r1, r2
 800b3d8:	49b2      	ldr	r1, [pc, #712]	; (800b6a4 <_strtod_l+0x9a8>)
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	2001      	movs	r0, #1
 800b3de:	428b      	cmp	r3, r1
 800b3e0:	db00      	blt.n	800b3e4 <_strtod_l+0x6e8>
 800b3e2:	e0bd      	b.n	800b560 <_strtod_l+0x864>
 800b3e4:	1ac9      	subs	r1, r1, r3
 800b3e6:	1a52      	subs	r2, r2, r1
 800b3e8:	291f      	cmp	r1, #31
 800b3ea:	dd00      	ble.n	800b3ee <_strtod_l+0x6f2>
 800b3ec:	e0b1      	b.n	800b552 <_strtod_l+0x856>
 800b3ee:	4088      	lsls	r0, r1
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	9014      	str	r0, [sp, #80]	; 0x50
 800b3f4:	9310      	str	r3, [sp, #64]	; 0x40
 800b3f6:	18ab      	adds	r3, r5, r2
 800b3f8:	9308      	str	r3, [sp, #32]
 800b3fa:	0013      	movs	r3, r2
 800b3fc:	9a06      	ldr	r2, [sp, #24]
 800b3fe:	4463      	add	r3, ip
 800b400:	18d3      	adds	r3, r2, r3
 800b402:	9a08      	ldr	r2, [sp, #32]
 800b404:	930c      	str	r3, [sp, #48]	; 0x30
 800b406:	002b      	movs	r3, r5
 800b408:	4295      	cmp	r5, r2
 800b40a:	dd00      	ble.n	800b40e <_strtod_l+0x712>
 800b40c:	0013      	movs	r3, r2
 800b40e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b410:	4293      	cmp	r3, r2
 800b412:	dd00      	ble.n	800b416 <_strtod_l+0x71a>
 800b414:	0013      	movs	r3, r2
 800b416:	2b00      	cmp	r3, #0
 800b418:	dd06      	ble.n	800b428 <_strtod_l+0x72c>
 800b41a:	9a08      	ldr	r2, [sp, #32]
 800b41c:	1aed      	subs	r5, r5, r3
 800b41e:	1ad2      	subs	r2, r2, r3
 800b420:	9208      	str	r2, [sp, #32]
 800b422:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b424:	1ad2      	subs	r2, r2, r3
 800b426:	920c      	str	r2, [sp, #48]	; 0x30
 800b428:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d017      	beq.n	800b45e <_strtod_l+0x762>
 800b42e:	001a      	movs	r2, r3
 800b430:	9905      	ldr	r1, [sp, #20]
 800b432:	9804      	ldr	r0, [sp, #16]
 800b434:	f002 f96c 	bl	800d710 <__pow5mult>
 800b438:	9005      	str	r0, [sp, #20]
 800b43a:	2800      	cmp	r0, #0
 800b43c:	d100      	bne.n	800b440 <_strtod_l+0x744>
 800b43e:	e693      	b.n	800b168 <_strtod_l+0x46c>
 800b440:	0001      	movs	r1, r0
 800b442:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b444:	9804      	ldr	r0, [sp, #16]
 800b446:	f002 f8d3 	bl	800d5f0 <__multiply>
 800b44a:	9012      	str	r0, [sp, #72]	; 0x48
 800b44c:	2800      	cmp	r0, #0
 800b44e:	d100      	bne.n	800b452 <_strtod_l+0x756>
 800b450:	e68a      	b.n	800b168 <_strtod_l+0x46c>
 800b452:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b454:	9804      	ldr	r0, [sp, #16]
 800b456:	f001 ffe4 	bl	800d422 <_Bfree>
 800b45a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b45c:	9322      	str	r3, [sp, #136]	; 0x88
 800b45e:	9b08      	ldr	r3, [sp, #32]
 800b460:	2b00      	cmp	r3, #0
 800b462:	dd00      	ble.n	800b466 <_strtod_l+0x76a>
 800b464:	e07f      	b.n	800b566 <_strtod_l+0x86a>
 800b466:	9b07      	ldr	r3, [sp, #28]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	dd08      	ble.n	800b47e <_strtod_l+0x782>
 800b46c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b46e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b470:	9804      	ldr	r0, [sp, #16]
 800b472:	f002 f94d 	bl	800d710 <__pow5mult>
 800b476:	900a      	str	r0, [sp, #40]	; 0x28
 800b478:	2800      	cmp	r0, #0
 800b47a:	d100      	bne.n	800b47e <_strtod_l+0x782>
 800b47c:	e674      	b.n	800b168 <_strtod_l+0x46c>
 800b47e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b480:	2b00      	cmp	r3, #0
 800b482:	dd08      	ble.n	800b496 <_strtod_l+0x79a>
 800b484:	001a      	movs	r2, r3
 800b486:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b488:	9804      	ldr	r0, [sp, #16]
 800b48a:	f002 f993 	bl	800d7b4 <__lshift>
 800b48e:	900a      	str	r0, [sp, #40]	; 0x28
 800b490:	2800      	cmp	r0, #0
 800b492:	d100      	bne.n	800b496 <_strtod_l+0x79a>
 800b494:	e668      	b.n	800b168 <_strtod_l+0x46c>
 800b496:	2d00      	cmp	r5, #0
 800b498:	dd08      	ble.n	800b4ac <_strtod_l+0x7b0>
 800b49a:	002a      	movs	r2, r5
 800b49c:	9905      	ldr	r1, [sp, #20]
 800b49e:	9804      	ldr	r0, [sp, #16]
 800b4a0:	f002 f988 	bl	800d7b4 <__lshift>
 800b4a4:	9005      	str	r0, [sp, #20]
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	d100      	bne.n	800b4ac <_strtod_l+0x7b0>
 800b4aa:	e65d      	b.n	800b168 <_strtod_l+0x46c>
 800b4ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4ae:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b4b0:	9804      	ldr	r0, [sp, #16]
 800b4b2:	f002 f9eb 	bl	800d88c <__mdiff>
 800b4b6:	1e04      	subs	r4, r0, #0
 800b4b8:	d100      	bne.n	800b4bc <_strtod_l+0x7c0>
 800b4ba:	e655      	b.n	800b168 <_strtod_l+0x46c>
 800b4bc:	2500      	movs	r5, #0
 800b4be:	68c3      	ldr	r3, [r0, #12]
 800b4c0:	9905      	ldr	r1, [sp, #20]
 800b4c2:	60c5      	str	r5, [r0, #12]
 800b4c4:	9312      	str	r3, [sp, #72]	; 0x48
 800b4c6:	f002 f9c7 	bl	800d858 <__mcmp>
 800b4ca:	42a8      	cmp	r0, r5
 800b4cc:	da55      	bge.n	800b57a <_strtod_l+0x87e>
 800b4ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b4d0:	42ab      	cmp	r3, r5
 800b4d2:	d11b      	bne.n	800b50c <_strtod_l+0x810>
 800b4d4:	42ae      	cmp	r6, r5
 800b4d6:	d119      	bne.n	800b50c <_strtod_l+0x810>
 800b4d8:	033b      	lsls	r3, r7, #12
 800b4da:	42ab      	cmp	r3, r5
 800b4dc:	d116      	bne.n	800b50c <_strtod_l+0x810>
 800b4de:	22d6      	movs	r2, #214	; 0xd6
 800b4e0:	4b71      	ldr	r3, [pc, #452]	; (800b6a8 <_strtod_l+0x9ac>)
 800b4e2:	04d2      	lsls	r2, r2, #19
 800b4e4:	403b      	ands	r3, r7
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d910      	bls.n	800b50c <_strtod_l+0x810>
 800b4ea:	6963      	ldr	r3, [r4, #20]
 800b4ec:	42ab      	cmp	r3, r5
 800b4ee:	d102      	bne.n	800b4f6 <_strtod_l+0x7fa>
 800b4f0:	6923      	ldr	r3, [r4, #16]
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	dd0a      	ble.n	800b50c <_strtod_l+0x810>
 800b4f6:	0021      	movs	r1, r4
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	9804      	ldr	r0, [sp, #16]
 800b4fc:	f002 f95a 	bl	800d7b4 <__lshift>
 800b500:	9905      	ldr	r1, [sp, #20]
 800b502:	0004      	movs	r4, r0
 800b504:	f002 f9a8 	bl	800d858 <__mcmp>
 800b508:	2800      	cmp	r0, #0
 800b50a:	dc6b      	bgt.n	800b5e4 <_strtod_l+0x8e8>
 800b50c:	9b06      	ldr	r3, [sp, #24]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d178      	bne.n	800b604 <_strtod_l+0x908>
 800b512:	e632      	b.n	800b17a <_strtod_l+0x47e>
 800b514:	2201      	movs	r2, #1
 800b516:	4214      	tst	r4, r2
 800b518:	d007      	beq.n	800b52a <_strtod_l+0x82e>
 800b51a:	4a64      	ldr	r2, [pc, #400]	; (800b6ac <_strtod_l+0x9b0>)
 800b51c:	00eb      	lsls	r3, r5, #3
 800b51e:	18d3      	adds	r3, r2, r3
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	f7f6 fc98 	bl	8001e58 <__aeabi_dmul>
 800b528:	2301      	movs	r3, #1
 800b52a:	3501      	adds	r5, #1
 800b52c:	1064      	asrs	r4, r4, #1
 800b52e:	e6df      	b.n	800b2f0 <_strtod_l+0x5f4>
 800b530:	2101      	movs	r1, #1
 800b532:	3b20      	subs	r3, #32
 800b534:	4249      	negs	r1, r1
 800b536:	4099      	lsls	r1, r3
 800b538:	400a      	ands	r2, r1
 800b53a:	0017      	movs	r7, r2
 800b53c:	e6f2      	b.n	800b324 <_strtod_l+0x628>
 800b53e:	2201      	movs	r2, #1
 800b540:	4252      	negs	r2, r2
 800b542:	409a      	lsls	r2, r3
 800b544:	4016      	ands	r6, r2
 800b546:	e6ed      	b.n	800b324 <_strtod_l+0x628>
 800b548:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b54a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b54c:	1ad2      	subs	r2, r2, r3
 800b54e:	4694      	mov	ip, r2
 800b550:	e73c      	b.n	800b3cc <_strtod_l+0x6d0>
 800b552:	4957      	ldr	r1, [pc, #348]	; (800b6b0 <_strtod_l+0x9b4>)
 800b554:	1acb      	subs	r3, r1, r3
 800b556:	0001      	movs	r1, r0
 800b558:	4099      	lsls	r1, r3
 800b55a:	9110      	str	r1, [sp, #64]	; 0x40
 800b55c:	9014      	str	r0, [sp, #80]	; 0x50
 800b55e:	e74a      	b.n	800b3f6 <_strtod_l+0x6fa>
 800b560:	2300      	movs	r3, #0
 800b562:	9310      	str	r3, [sp, #64]	; 0x40
 800b564:	e7fa      	b.n	800b55c <_strtod_l+0x860>
 800b566:	9a08      	ldr	r2, [sp, #32]
 800b568:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b56a:	9804      	ldr	r0, [sp, #16]
 800b56c:	f002 f922 	bl	800d7b4 <__lshift>
 800b570:	9022      	str	r0, [sp, #136]	; 0x88
 800b572:	2800      	cmp	r0, #0
 800b574:	d000      	beq.n	800b578 <_strtod_l+0x87c>
 800b576:	e776      	b.n	800b466 <_strtod_l+0x76a>
 800b578:	e5f6      	b.n	800b168 <_strtod_l+0x46c>
 800b57a:	970c      	str	r7, [sp, #48]	; 0x30
 800b57c:	2800      	cmp	r0, #0
 800b57e:	d000      	beq.n	800b582 <_strtod_l+0x886>
 800b580:	e0a0      	b.n	800b6c4 <_strtod_l+0x9c8>
 800b582:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b584:	033b      	lsls	r3, r7, #12
 800b586:	0b1b      	lsrs	r3, r3, #12
 800b588:	2a00      	cmp	r2, #0
 800b58a:	d027      	beq.n	800b5dc <_strtod_l+0x8e0>
 800b58c:	4a49      	ldr	r2, [pc, #292]	; (800b6b4 <_strtod_l+0x9b8>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d157      	bne.n	800b642 <_strtod_l+0x946>
 800b592:	2201      	movs	r2, #1
 800b594:	9b06      	ldr	r3, [sp, #24]
 800b596:	4252      	negs	r2, r2
 800b598:	0031      	movs	r1, r6
 800b59a:	0010      	movs	r0, r2
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d00b      	beq.n	800b5b8 <_strtod_l+0x8bc>
 800b5a0:	25d4      	movs	r5, #212	; 0xd4
 800b5a2:	4b41      	ldr	r3, [pc, #260]	; (800b6a8 <_strtod_l+0x9ac>)
 800b5a4:	04ed      	lsls	r5, r5, #19
 800b5a6:	403b      	ands	r3, r7
 800b5a8:	0010      	movs	r0, r2
 800b5aa:	42ab      	cmp	r3, r5
 800b5ac:	d804      	bhi.n	800b5b8 <_strtod_l+0x8bc>
 800b5ae:	306c      	adds	r0, #108	; 0x6c
 800b5b0:	0d1b      	lsrs	r3, r3, #20
 800b5b2:	1ac3      	subs	r3, r0, r3
 800b5b4:	409a      	lsls	r2, r3
 800b5b6:	0010      	movs	r0, r2
 800b5b8:	4281      	cmp	r1, r0
 800b5ba:	d142      	bne.n	800b642 <_strtod_l+0x946>
 800b5bc:	4b3e      	ldr	r3, [pc, #248]	; (800b6b8 <_strtod_l+0x9bc>)
 800b5be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d102      	bne.n	800b5ca <_strtod_l+0x8ce>
 800b5c4:	1c4b      	adds	r3, r1, #1
 800b5c6:	d100      	bne.n	800b5ca <_strtod_l+0x8ce>
 800b5c8:	e5ce      	b.n	800b168 <_strtod_l+0x46c>
 800b5ca:	4b37      	ldr	r3, [pc, #220]	; (800b6a8 <_strtod_l+0x9ac>)
 800b5cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5ce:	2600      	movs	r6, #0
 800b5d0:	401a      	ands	r2, r3
 800b5d2:	0013      	movs	r3, r2
 800b5d4:	2280      	movs	r2, #128	; 0x80
 800b5d6:	0352      	lsls	r2, r2, #13
 800b5d8:	189f      	adds	r7, r3, r2
 800b5da:	e797      	b.n	800b50c <_strtod_l+0x810>
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d130      	bne.n	800b642 <_strtod_l+0x946>
 800b5e0:	2e00      	cmp	r6, #0
 800b5e2:	d12e      	bne.n	800b642 <_strtod_l+0x946>
 800b5e4:	9906      	ldr	r1, [sp, #24]
 800b5e6:	003b      	movs	r3, r7
 800b5e8:	4a2f      	ldr	r2, [pc, #188]	; (800b6a8 <_strtod_l+0x9ac>)
 800b5ea:	2900      	cmp	r1, #0
 800b5ec:	d020      	beq.n	800b630 <_strtod_l+0x934>
 800b5ee:	0011      	movs	r1, r2
 800b5f0:	20d6      	movs	r0, #214	; 0xd6
 800b5f2:	4039      	ands	r1, r7
 800b5f4:	04c0      	lsls	r0, r0, #19
 800b5f6:	4281      	cmp	r1, r0
 800b5f8:	dc1a      	bgt.n	800b630 <_strtod_l+0x934>
 800b5fa:	23dc      	movs	r3, #220	; 0xdc
 800b5fc:	049b      	lsls	r3, r3, #18
 800b5fe:	4299      	cmp	r1, r3
 800b600:	dc00      	bgt.n	800b604 <_strtod_l+0x908>
 800b602:	e646      	b.n	800b292 <_strtod_l+0x596>
 800b604:	4b2d      	ldr	r3, [pc, #180]	; (800b6bc <_strtod_l+0x9c0>)
 800b606:	0030      	movs	r0, r6
 800b608:	931b      	str	r3, [sp, #108]	; 0x6c
 800b60a:	2300      	movs	r3, #0
 800b60c:	931a      	str	r3, [sp, #104]	; 0x68
 800b60e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b610:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b612:	0039      	movs	r1, r7
 800b614:	f7f6 fc20 	bl	8001e58 <__aeabi_dmul>
 800b618:	0006      	movs	r6, r0
 800b61a:	000f      	movs	r7, r1
 800b61c:	1e0b      	subs	r3, r1, #0
 800b61e:	d000      	beq.n	800b622 <_strtod_l+0x926>
 800b620:	e5ab      	b.n	800b17a <_strtod_l+0x47e>
 800b622:	2800      	cmp	r0, #0
 800b624:	d000      	beq.n	800b628 <_strtod_l+0x92c>
 800b626:	e5a8      	b.n	800b17a <_strtod_l+0x47e>
 800b628:	9a04      	ldr	r2, [sp, #16]
 800b62a:	3322      	adds	r3, #34	; 0x22
 800b62c:	6013      	str	r3, [r2, #0]
 800b62e:	e5a4      	b.n	800b17a <_strtod_l+0x47e>
 800b630:	2601      	movs	r6, #1
 800b632:	4013      	ands	r3, r2
 800b634:	4a22      	ldr	r2, [pc, #136]	; (800b6c0 <_strtod_l+0x9c4>)
 800b636:	4276      	negs	r6, r6
 800b638:	189b      	adds	r3, r3, r2
 800b63a:	4a1e      	ldr	r2, [pc, #120]	; (800b6b4 <_strtod_l+0x9b8>)
 800b63c:	431a      	orrs	r2, r3
 800b63e:	0017      	movs	r7, r2
 800b640:	e764      	b.n	800b50c <_strtod_l+0x810>
 800b642:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b644:	2b00      	cmp	r3, #0
 800b646:	d015      	beq.n	800b674 <_strtod_l+0x978>
 800b648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b64a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b64c:	4213      	tst	r3, r2
 800b64e:	d100      	bne.n	800b652 <_strtod_l+0x956>
 800b650:	e75c      	b.n	800b50c <_strtod_l+0x810>
 800b652:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b654:	9a06      	ldr	r2, [sp, #24]
 800b656:	0030      	movs	r0, r6
 800b658:	0039      	movs	r1, r7
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d00f      	beq.n	800b67e <_strtod_l+0x982>
 800b65e:	f7ff fb35 	bl	800accc <sulp>
 800b662:	0002      	movs	r2, r0
 800b664:	000b      	movs	r3, r1
 800b666:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b668:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b66a:	f7f5 fccf 	bl	800100c <__aeabi_dadd>
 800b66e:	0006      	movs	r6, r0
 800b670:	000f      	movs	r7, r1
 800b672:	e74b      	b.n	800b50c <_strtod_l+0x810>
 800b674:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b676:	4233      	tst	r3, r6
 800b678:	d100      	bne.n	800b67c <_strtod_l+0x980>
 800b67a:	e747      	b.n	800b50c <_strtod_l+0x810>
 800b67c:	e7e9      	b.n	800b652 <_strtod_l+0x956>
 800b67e:	f7ff fb25 	bl	800accc <sulp>
 800b682:	0002      	movs	r2, r0
 800b684:	000b      	movs	r3, r1
 800b686:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b688:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b68a:	f7f6 fe57 	bl	800233c <__aeabi_dsub>
 800b68e:	2200      	movs	r2, #0
 800b690:	2300      	movs	r3, #0
 800b692:	0006      	movs	r6, r0
 800b694:	000f      	movs	r7, r1
 800b696:	f7f4 fecf 	bl	8000438 <__aeabi_dcmpeq>
 800b69a:	2800      	cmp	r0, #0
 800b69c:	d000      	beq.n	800b6a0 <_strtod_l+0x9a4>
 800b69e:	e5f8      	b.n	800b292 <_strtod_l+0x596>
 800b6a0:	e734      	b.n	800b50c <_strtod_l+0x810>
 800b6a2:	46c0      	nop			; (mov r8, r8)
 800b6a4:	fffffc02 	.word	0xfffffc02
 800b6a8:	7ff00000 	.word	0x7ff00000
 800b6ac:	0800eac0 	.word	0x0800eac0
 800b6b0:	fffffbe2 	.word	0xfffffbe2
 800b6b4:	000fffff 	.word	0x000fffff
 800b6b8:	7fefffff 	.word	0x7fefffff
 800b6bc:	39500000 	.word	0x39500000
 800b6c0:	fff00000 	.word	0xfff00000
 800b6c4:	9905      	ldr	r1, [sp, #20]
 800b6c6:	0020      	movs	r0, r4
 800b6c8:	f002 fa0a 	bl	800dae0 <__ratio>
 800b6cc:	2380      	movs	r3, #128	; 0x80
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	05db      	lsls	r3, r3, #23
 800b6d2:	9008      	str	r0, [sp, #32]
 800b6d4:	9109      	str	r1, [sp, #36]	; 0x24
 800b6d6:	f7f4 febf 	bl	8000458 <__aeabi_dcmple>
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	d100      	bne.n	800b6e0 <_strtod_l+0x9e4>
 800b6de:	e07f      	b.n	800b7e0 <_strtod_l+0xae4>
 800b6e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d04b      	beq.n	800b77e <_strtod_l+0xa82>
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	4b8a      	ldr	r3, [pc, #552]	; (800b914 <_strtod_l+0xc18>)
 800b6ea:	9210      	str	r2, [sp, #64]	; 0x40
 800b6ec:	9311      	str	r3, [sp, #68]	; 0x44
 800b6ee:	4b89      	ldr	r3, [pc, #548]	; (800b914 <_strtod_l+0xc18>)
 800b6f0:	9308      	str	r3, [sp, #32]
 800b6f2:	4a89      	ldr	r2, [pc, #548]	; (800b918 <_strtod_l+0xc1c>)
 800b6f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6f6:	4013      	ands	r3, r2
 800b6f8:	9314      	str	r3, [sp, #80]	; 0x50
 800b6fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b6fc:	4b87      	ldr	r3, [pc, #540]	; (800b91c <_strtod_l+0xc20>)
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d000      	beq.n	800b704 <_strtod_l+0xa08>
 800b702:	e0ba      	b.n	800b87a <_strtod_l+0xb7e>
 800b704:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b706:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b708:	921a      	str	r2, [sp, #104]	; 0x68
 800b70a:	931b      	str	r3, [sp, #108]	; 0x6c
 800b70c:	4a84      	ldr	r2, [pc, #528]	; (800b920 <_strtod_l+0xc24>)
 800b70e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b710:	4694      	mov	ip, r2
 800b712:	4463      	add	r3, ip
 800b714:	001f      	movs	r7, r3
 800b716:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b718:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b71a:	0030      	movs	r0, r6
 800b71c:	0039      	movs	r1, r7
 800b71e:	920c      	str	r2, [sp, #48]	; 0x30
 800b720:	930d      	str	r3, [sp, #52]	; 0x34
 800b722:	f002 f917 	bl	800d954 <__ulp>
 800b726:	0002      	movs	r2, r0
 800b728:	000b      	movs	r3, r1
 800b72a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b72c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b72e:	f7f6 fb93 	bl	8001e58 <__aeabi_dmul>
 800b732:	0032      	movs	r2, r6
 800b734:	003b      	movs	r3, r7
 800b736:	f7f5 fc69 	bl	800100c <__aeabi_dadd>
 800b73a:	4a77      	ldr	r2, [pc, #476]	; (800b918 <_strtod_l+0xc1c>)
 800b73c:	4b79      	ldr	r3, [pc, #484]	; (800b924 <_strtod_l+0xc28>)
 800b73e:	0006      	movs	r6, r0
 800b740:	400a      	ands	r2, r1
 800b742:	429a      	cmp	r2, r3
 800b744:	d964      	bls.n	800b810 <_strtod_l+0xb14>
 800b746:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b748:	4a77      	ldr	r2, [pc, #476]	; (800b928 <_strtod_l+0xc2c>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d103      	bne.n	800b756 <_strtod_l+0xa5a>
 800b74e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b750:	3301      	adds	r3, #1
 800b752:	d100      	bne.n	800b756 <_strtod_l+0xa5a>
 800b754:	e508      	b.n	800b168 <_strtod_l+0x46c>
 800b756:	2601      	movs	r6, #1
 800b758:	4f73      	ldr	r7, [pc, #460]	; (800b928 <_strtod_l+0xc2c>)
 800b75a:	4276      	negs	r6, r6
 800b75c:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b75e:	9804      	ldr	r0, [sp, #16]
 800b760:	f001 fe5f 	bl	800d422 <_Bfree>
 800b764:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b766:	9804      	ldr	r0, [sp, #16]
 800b768:	f001 fe5b 	bl	800d422 <_Bfree>
 800b76c:	9905      	ldr	r1, [sp, #20]
 800b76e:	9804      	ldr	r0, [sp, #16]
 800b770:	f001 fe57 	bl	800d422 <_Bfree>
 800b774:	0021      	movs	r1, r4
 800b776:	9804      	ldr	r0, [sp, #16]
 800b778:	f001 fe53 	bl	800d422 <_Bfree>
 800b77c:	e5f4      	b.n	800b368 <_strtod_l+0x66c>
 800b77e:	2e00      	cmp	r6, #0
 800b780:	d11e      	bne.n	800b7c0 <_strtod_l+0xac4>
 800b782:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b784:	031b      	lsls	r3, r3, #12
 800b786:	d121      	bne.n	800b7cc <_strtod_l+0xad0>
 800b788:	9808      	ldr	r0, [sp, #32]
 800b78a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b78c:	2200      	movs	r2, #0
 800b78e:	4b61      	ldr	r3, [pc, #388]	; (800b914 <_strtod_l+0xc18>)
 800b790:	f7f4 fe58 	bl	8000444 <__aeabi_dcmplt>
 800b794:	2800      	cmp	r0, #0
 800b796:	d11f      	bne.n	800b7d8 <_strtod_l+0xadc>
 800b798:	9808      	ldr	r0, [sp, #32]
 800b79a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b79c:	2200      	movs	r2, #0
 800b79e:	4b63      	ldr	r3, [pc, #396]	; (800b92c <_strtod_l+0xc30>)
 800b7a0:	f7f6 fb5a 	bl	8001e58 <__aeabi_dmul>
 800b7a4:	0005      	movs	r5, r0
 800b7a6:	9108      	str	r1, [sp, #32]
 800b7a8:	2280      	movs	r2, #128	; 0x80
 800b7aa:	0612      	lsls	r2, r2, #24
 800b7ac:	4694      	mov	ip, r2
 800b7ae:	9b08      	ldr	r3, [sp, #32]
 800b7b0:	951e      	str	r5, [sp, #120]	; 0x78
 800b7b2:	4463      	add	r3, ip
 800b7b4:	931f      	str	r3, [sp, #124]	; 0x7c
 800b7b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b7b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b7ba:	9210      	str	r2, [sp, #64]	; 0x40
 800b7bc:	9311      	str	r3, [sp, #68]	; 0x44
 800b7be:	e798      	b.n	800b6f2 <_strtod_l+0x9f6>
 800b7c0:	2e01      	cmp	r6, #1
 800b7c2:	d103      	bne.n	800b7cc <_strtod_l+0xad0>
 800b7c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d100      	bne.n	800b7cc <_strtod_l+0xad0>
 800b7ca:	e562      	b.n	800b292 <_strtod_l+0x596>
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	4b58      	ldr	r3, [pc, #352]	; (800b930 <_strtod_l+0xc34>)
 800b7d0:	2500      	movs	r5, #0
 800b7d2:	9210      	str	r2, [sp, #64]	; 0x40
 800b7d4:	9311      	str	r3, [sp, #68]	; 0x44
 800b7d6:	e78a      	b.n	800b6ee <_strtod_l+0x9f2>
 800b7d8:	4b54      	ldr	r3, [pc, #336]	; (800b92c <_strtod_l+0xc30>)
 800b7da:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800b7dc:	9308      	str	r3, [sp, #32]
 800b7de:	e7e3      	b.n	800b7a8 <_strtod_l+0xaac>
 800b7e0:	4b52      	ldr	r3, [pc, #328]	; (800b92c <_strtod_l+0xc30>)
 800b7e2:	9808      	ldr	r0, [sp, #32]
 800b7e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f7f6 fb36 	bl	8001e58 <__aeabi_dmul>
 800b7ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b7ee:	0005      	movs	r5, r0
 800b7f0:	9108      	str	r1, [sp, #32]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d107      	bne.n	800b806 <_strtod_l+0xb0a>
 800b7f6:	2380      	movs	r3, #128	; 0x80
 800b7f8:	061b      	lsls	r3, r3, #24
 800b7fa:	18cb      	adds	r3, r1, r3
 800b7fc:	9016      	str	r0, [sp, #88]	; 0x58
 800b7fe:	9317      	str	r3, [sp, #92]	; 0x5c
 800b800:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b802:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b804:	e7d9      	b.n	800b7ba <_strtod_l+0xabe>
 800b806:	0002      	movs	r2, r0
 800b808:	9b08      	ldr	r3, [sp, #32]
 800b80a:	9216      	str	r2, [sp, #88]	; 0x58
 800b80c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b80e:	e7f7      	b.n	800b800 <_strtod_l+0xb04>
 800b810:	23d4      	movs	r3, #212	; 0xd4
 800b812:	049b      	lsls	r3, r3, #18
 800b814:	18cf      	adds	r7, r1, r3
 800b816:	9b06      	ldr	r3, [sp, #24]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d19f      	bne.n	800b75c <_strtod_l+0xa60>
 800b81c:	4b3e      	ldr	r3, [pc, #248]	; (800b918 <_strtod_l+0xc1c>)
 800b81e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b820:	970c      	str	r7, [sp, #48]	; 0x30
 800b822:	403b      	ands	r3, r7
 800b824:	429a      	cmp	r2, r3
 800b826:	d199      	bne.n	800b75c <_strtod_l+0xa60>
 800b828:	9908      	ldr	r1, [sp, #32]
 800b82a:	0028      	movs	r0, r5
 800b82c:	f7f7 f8ea 	bl	8002a04 <__aeabi_d2iz>
 800b830:	f7f7 f91e 	bl	8002a70 <__aeabi_i2d>
 800b834:	000b      	movs	r3, r1
 800b836:	0002      	movs	r2, r0
 800b838:	9908      	ldr	r1, [sp, #32]
 800b83a:	0028      	movs	r0, r5
 800b83c:	f7f6 fd7e 	bl	800233c <__aeabi_dsub>
 800b840:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b842:	9008      	str	r0, [sp, #32]
 800b844:	9109      	str	r1, [sp, #36]	; 0x24
 800b846:	2b00      	cmp	r3, #0
 800b848:	d104      	bne.n	800b854 <_strtod_l+0xb58>
 800b84a:	2e00      	cmp	r6, #0
 800b84c:	d102      	bne.n	800b854 <_strtod_l+0xb58>
 800b84e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b850:	031b      	lsls	r3, r3, #12
 800b852:	d058      	beq.n	800b906 <_strtod_l+0xc0a>
 800b854:	9808      	ldr	r0, [sp, #32]
 800b856:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b858:	4a36      	ldr	r2, [pc, #216]	; (800b934 <_strtod_l+0xc38>)
 800b85a:	4b37      	ldr	r3, [pc, #220]	; (800b938 <_strtod_l+0xc3c>)
 800b85c:	f7f4 fdf2 	bl	8000444 <__aeabi_dcmplt>
 800b860:	2800      	cmp	r0, #0
 800b862:	d000      	beq.n	800b866 <_strtod_l+0xb6a>
 800b864:	e489      	b.n	800b17a <_strtod_l+0x47e>
 800b866:	9808      	ldr	r0, [sp, #32]
 800b868:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b86a:	4a34      	ldr	r2, [pc, #208]	; (800b93c <_strtod_l+0xc40>)
 800b86c:	4b2f      	ldr	r3, [pc, #188]	; (800b92c <_strtod_l+0xc30>)
 800b86e:	f7f4 fdfd 	bl	800046c <__aeabi_dcmpgt>
 800b872:	2800      	cmp	r0, #0
 800b874:	d100      	bne.n	800b878 <_strtod_l+0xb7c>
 800b876:	e771      	b.n	800b75c <_strtod_l+0xa60>
 800b878:	e47f      	b.n	800b17a <_strtod_l+0x47e>
 800b87a:	9b06      	ldr	r3, [sp, #24]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d02a      	beq.n	800b8d6 <_strtod_l+0xbda>
 800b880:	23d4      	movs	r3, #212	; 0xd4
 800b882:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b884:	04db      	lsls	r3, r3, #19
 800b886:	429a      	cmp	r2, r3
 800b888:	d825      	bhi.n	800b8d6 <_strtod_l+0xbda>
 800b88a:	4a2d      	ldr	r2, [pc, #180]	; (800b940 <_strtod_l+0xc44>)
 800b88c:	4b2d      	ldr	r3, [pc, #180]	; (800b944 <_strtod_l+0xc48>)
 800b88e:	0028      	movs	r0, r5
 800b890:	9908      	ldr	r1, [sp, #32]
 800b892:	f7f4 fde1 	bl	8000458 <__aeabi_dcmple>
 800b896:	2800      	cmp	r0, #0
 800b898:	d016      	beq.n	800b8c8 <_strtod_l+0xbcc>
 800b89a:	0028      	movs	r0, r5
 800b89c:	9908      	ldr	r1, [sp, #32]
 800b89e:	f7f4 fe43 	bl	8000528 <__aeabi_d2uiz>
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	d100      	bne.n	800b8a8 <_strtod_l+0xbac>
 800b8a6:	3001      	adds	r0, #1
 800b8a8:	f7f7 f91c 	bl	8002ae4 <__aeabi_ui2d>
 800b8ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b8ae:	0005      	movs	r5, r0
 800b8b0:	9108      	str	r1, [sp, #32]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d122      	bne.n	800b8fc <_strtod_l+0xc00>
 800b8b6:	2380      	movs	r3, #128	; 0x80
 800b8b8:	061b      	lsls	r3, r3, #24
 800b8ba:	18cb      	adds	r3, r1, r3
 800b8bc:	9018      	str	r0, [sp, #96]	; 0x60
 800b8be:	9319      	str	r3, [sp, #100]	; 0x64
 800b8c0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b8c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b8c4:	9210      	str	r2, [sp, #64]	; 0x40
 800b8c6:	9311      	str	r3, [sp, #68]	; 0x44
 800b8c8:	22d6      	movs	r2, #214	; 0xd6
 800b8ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b8cc:	04d2      	lsls	r2, r2, #19
 800b8ce:	189b      	adds	r3, r3, r2
 800b8d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b8d2:	1a9b      	subs	r3, r3, r2
 800b8d4:	9311      	str	r3, [sp, #68]	; 0x44
 800b8d6:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b8d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b8da:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800b8dc:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800b8de:	f002 f839 	bl	800d954 <__ulp>
 800b8e2:	0002      	movs	r2, r0
 800b8e4:	000b      	movs	r3, r1
 800b8e6:	0030      	movs	r0, r6
 800b8e8:	0039      	movs	r1, r7
 800b8ea:	f7f6 fab5 	bl	8001e58 <__aeabi_dmul>
 800b8ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8f2:	f7f5 fb8b 	bl	800100c <__aeabi_dadd>
 800b8f6:	0006      	movs	r6, r0
 800b8f8:	000f      	movs	r7, r1
 800b8fa:	e78c      	b.n	800b816 <_strtod_l+0xb1a>
 800b8fc:	0002      	movs	r2, r0
 800b8fe:	9b08      	ldr	r3, [sp, #32]
 800b900:	9218      	str	r2, [sp, #96]	; 0x60
 800b902:	9319      	str	r3, [sp, #100]	; 0x64
 800b904:	e7dc      	b.n	800b8c0 <_strtod_l+0xbc4>
 800b906:	4a0b      	ldr	r2, [pc, #44]	; (800b934 <_strtod_l+0xc38>)
 800b908:	4b0f      	ldr	r3, [pc, #60]	; (800b948 <_strtod_l+0xc4c>)
 800b90a:	9808      	ldr	r0, [sp, #32]
 800b90c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b90e:	f7f4 fd99 	bl	8000444 <__aeabi_dcmplt>
 800b912:	e7ae      	b.n	800b872 <_strtod_l+0xb76>
 800b914:	3ff00000 	.word	0x3ff00000
 800b918:	7ff00000 	.word	0x7ff00000
 800b91c:	7fe00000 	.word	0x7fe00000
 800b920:	fcb00000 	.word	0xfcb00000
 800b924:	7c9fffff 	.word	0x7c9fffff
 800b928:	7fefffff 	.word	0x7fefffff
 800b92c:	3fe00000 	.word	0x3fe00000
 800b930:	bff00000 	.word	0xbff00000
 800b934:	94a03595 	.word	0x94a03595
 800b938:	3fdfffff 	.word	0x3fdfffff
 800b93c:	35afe535 	.word	0x35afe535
 800b940:	ffc00000 	.word	0xffc00000
 800b944:	41dfffff 	.word	0x41dfffff
 800b948:	3fcfffff 	.word	0x3fcfffff

0800b94c <_strtod_r>:
 800b94c:	4b04      	ldr	r3, [pc, #16]	; (800b960 <_strtod_r+0x14>)
 800b94e:	b510      	push	{r4, lr}
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	6a1b      	ldr	r3, [r3, #32]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d100      	bne.n	800b95a <_strtod_r+0xe>
 800b958:	4b02      	ldr	r3, [pc, #8]	; (800b964 <_strtod_r+0x18>)
 800b95a:	f7ff f9cf 	bl	800acfc <_strtod_l>
 800b95e:	bd10      	pop	{r4, pc}
 800b960:	20000064 	.word	0x20000064
 800b964:	200000c8 	.word	0x200000c8

0800b968 <_strtol_l.isra.0>:
 800b968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b96a:	001f      	movs	r7, r3
 800b96c:	000e      	movs	r6, r1
 800b96e:	b087      	sub	sp, #28
 800b970:	9005      	str	r0, [sp, #20]
 800b972:	9101      	str	r1, [sp, #4]
 800b974:	9202      	str	r2, [sp, #8]
 800b976:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b978:	7834      	ldrb	r4, [r6, #0]
 800b97a:	f001 fc75 	bl	800d268 <__locale_ctype_ptr_l>
 800b97e:	2208      	movs	r2, #8
 800b980:	1900      	adds	r0, r0, r4
 800b982:	7843      	ldrb	r3, [r0, #1]
 800b984:	1c75      	adds	r5, r6, #1
 800b986:	4013      	ands	r3, r2
 800b988:	d136      	bne.n	800b9f8 <_strtol_l.isra.0+0x90>
 800b98a:	2c2d      	cmp	r4, #45	; 0x2d
 800b98c:	d136      	bne.n	800b9fc <_strtol_l.isra.0+0x94>
 800b98e:	1cb5      	adds	r5, r6, #2
 800b990:	7874      	ldrb	r4, [r6, #1]
 800b992:	2601      	movs	r6, #1
 800b994:	2f00      	cmp	r7, #0
 800b996:	d062      	beq.n	800ba5e <_strtol_l.isra.0+0xf6>
 800b998:	2f10      	cmp	r7, #16
 800b99a:	d109      	bne.n	800b9b0 <_strtol_l.isra.0+0x48>
 800b99c:	2c30      	cmp	r4, #48	; 0x30
 800b99e:	d107      	bne.n	800b9b0 <_strtol_l.isra.0+0x48>
 800b9a0:	2220      	movs	r2, #32
 800b9a2:	782b      	ldrb	r3, [r5, #0]
 800b9a4:	4393      	bics	r3, r2
 800b9a6:	2b58      	cmp	r3, #88	; 0x58
 800b9a8:	d154      	bne.n	800ba54 <_strtol_l.isra.0+0xec>
 800b9aa:	2710      	movs	r7, #16
 800b9ac:	786c      	ldrb	r4, [r5, #1]
 800b9ae:	3502      	adds	r5, #2
 800b9b0:	4b2d      	ldr	r3, [pc, #180]	; (800ba68 <_strtol_l.isra.0+0x100>)
 800b9b2:	0039      	movs	r1, r7
 800b9b4:	18f3      	adds	r3, r6, r3
 800b9b6:	0018      	movs	r0, r3
 800b9b8:	9303      	str	r3, [sp, #12]
 800b9ba:	f7f4 fc3d 	bl	8000238 <__aeabi_uidivmod>
 800b9be:	9104      	str	r1, [sp, #16]
 800b9c0:	2101      	movs	r1, #1
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	4249      	negs	r1, r1
 800b9c6:	0002      	movs	r2, r0
 800b9c8:	468c      	mov	ip, r1
 800b9ca:	0018      	movs	r0, r3
 800b9cc:	0021      	movs	r1, r4
 800b9ce:	3930      	subs	r1, #48	; 0x30
 800b9d0:	2909      	cmp	r1, #9
 800b9d2:	d81a      	bhi.n	800ba0a <_strtol_l.isra.0+0xa2>
 800b9d4:	000c      	movs	r4, r1
 800b9d6:	42a7      	cmp	r7, r4
 800b9d8:	dd23      	ble.n	800ba22 <_strtol_l.isra.0+0xba>
 800b9da:	1c59      	adds	r1, r3, #1
 800b9dc:	d009      	beq.n	800b9f2 <_strtol_l.isra.0+0x8a>
 800b9de:	4663      	mov	r3, ip
 800b9e0:	4282      	cmp	r2, r0
 800b9e2:	d306      	bcc.n	800b9f2 <_strtol_l.isra.0+0x8a>
 800b9e4:	d102      	bne.n	800b9ec <_strtol_l.isra.0+0x84>
 800b9e6:	9904      	ldr	r1, [sp, #16]
 800b9e8:	42a1      	cmp	r1, r4
 800b9ea:	db02      	blt.n	800b9f2 <_strtol_l.isra.0+0x8a>
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	4378      	muls	r0, r7
 800b9f0:	1820      	adds	r0, r4, r0
 800b9f2:	782c      	ldrb	r4, [r5, #0]
 800b9f4:	3501      	adds	r5, #1
 800b9f6:	e7e9      	b.n	800b9cc <_strtol_l.isra.0+0x64>
 800b9f8:	002e      	movs	r6, r5
 800b9fa:	e7bc      	b.n	800b976 <_strtol_l.isra.0+0xe>
 800b9fc:	2c2b      	cmp	r4, #43	; 0x2b
 800b9fe:	d001      	beq.n	800ba04 <_strtol_l.isra.0+0x9c>
 800ba00:	001e      	movs	r6, r3
 800ba02:	e7c7      	b.n	800b994 <_strtol_l.isra.0+0x2c>
 800ba04:	1cb5      	adds	r5, r6, #2
 800ba06:	7874      	ldrb	r4, [r6, #1]
 800ba08:	e7fa      	b.n	800ba00 <_strtol_l.isra.0+0x98>
 800ba0a:	0021      	movs	r1, r4
 800ba0c:	3941      	subs	r1, #65	; 0x41
 800ba0e:	2919      	cmp	r1, #25
 800ba10:	d801      	bhi.n	800ba16 <_strtol_l.isra.0+0xae>
 800ba12:	3c37      	subs	r4, #55	; 0x37
 800ba14:	e7df      	b.n	800b9d6 <_strtol_l.isra.0+0x6e>
 800ba16:	0021      	movs	r1, r4
 800ba18:	3961      	subs	r1, #97	; 0x61
 800ba1a:	2919      	cmp	r1, #25
 800ba1c:	d801      	bhi.n	800ba22 <_strtol_l.isra.0+0xba>
 800ba1e:	3c57      	subs	r4, #87	; 0x57
 800ba20:	e7d9      	b.n	800b9d6 <_strtol_l.isra.0+0x6e>
 800ba22:	1c5a      	adds	r2, r3, #1
 800ba24:	d108      	bne.n	800ba38 <_strtol_l.isra.0+0xd0>
 800ba26:	9a05      	ldr	r2, [sp, #20]
 800ba28:	3323      	adds	r3, #35	; 0x23
 800ba2a:	6013      	str	r3, [r2, #0]
 800ba2c:	9b02      	ldr	r3, [sp, #8]
 800ba2e:	9803      	ldr	r0, [sp, #12]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d109      	bne.n	800ba48 <_strtol_l.isra.0+0xe0>
 800ba34:	b007      	add	sp, #28
 800ba36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba38:	2e00      	cmp	r6, #0
 800ba3a:	d000      	beq.n	800ba3e <_strtol_l.isra.0+0xd6>
 800ba3c:	4240      	negs	r0, r0
 800ba3e:	9a02      	ldr	r2, [sp, #8]
 800ba40:	2a00      	cmp	r2, #0
 800ba42:	d0f7      	beq.n	800ba34 <_strtol_l.isra.0+0xcc>
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d001      	beq.n	800ba4c <_strtol_l.isra.0+0xe4>
 800ba48:	1e6b      	subs	r3, r5, #1
 800ba4a:	9301      	str	r3, [sp, #4]
 800ba4c:	9b02      	ldr	r3, [sp, #8]
 800ba4e:	9a01      	ldr	r2, [sp, #4]
 800ba50:	601a      	str	r2, [r3, #0]
 800ba52:	e7ef      	b.n	800ba34 <_strtol_l.isra.0+0xcc>
 800ba54:	2430      	movs	r4, #48	; 0x30
 800ba56:	2f00      	cmp	r7, #0
 800ba58:	d1aa      	bne.n	800b9b0 <_strtol_l.isra.0+0x48>
 800ba5a:	2708      	movs	r7, #8
 800ba5c:	e7a8      	b.n	800b9b0 <_strtol_l.isra.0+0x48>
 800ba5e:	2c30      	cmp	r4, #48	; 0x30
 800ba60:	d09e      	beq.n	800b9a0 <_strtol_l.isra.0+0x38>
 800ba62:	270a      	movs	r7, #10
 800ba64:	e7a4      	b.n	800b9b0 <_strtol_l.isra.0+0x48>
 800ba66:	46c0      	nop			; (mov r8, r8)
 800ba68:	7fffffff 	.word	0x7fffffff

0800ba6c <_strtol_r>:
 800ba6c:	b513      	push	{r0, r1, r4, lr}
 800ba6e:	4c05      	ldr	r4, [pc, #20]	; (800ba84 <_strtol_r+0x18>)
 800ba70:	6824      	ldr	r4, [r4, #0]
 800ba72:	6a24      	ldr	r4, [r4, #32]
 800ba74:	2c00      	cmp	r4, #0
 800ba76:	d100      	bne.n	800ba7a <_strtol_r+0xe>
 800ba78:	4c03      	ldr	r4, [pc, #12]	; (800ba88 <_strtol_r+0x1c>)
 800ba7a:	9400      	str	r4, [sp, #0]
 800ba7c:	f7ff ff74 	bl	800b968 <_strtol_l.isra.0>
 800ba80:	bd16      	pop	{r1, r2, r4, pc}
 800ba82:	46c0      	nop			; (mov r8, r8)
 800ba84:	20000064 	.word	0x20000064
 800ba88:	200000c8 	.word	0x200000c8

0800ba8c <__swbuf_r>:
 800ba8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba8e:	0005      	movs	r5, r0
 800ba90:	000e      	movs	r6, r1
 800ba92:	0014      	movs	r4, r2
 800ba94:	2800      	cmp	r0, #0
 800ba96:	d004      	beq.n	800baa2 <__swbuf_r+0x16>
 800ba98:	6983      	ldr	r3, [r0, #24]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d101      	bne.n	800baa2 <__swbuf_r+0x16>
 800ba9e:	f001 f81f 	bl	800cae0 <__sinit>
 800baa2:	4b22      	ldr	r3, [pc, #136]	; (800bb2c <__swbuf_r+0xa0>)
 800baa4:	429c      	cmp	r4, r3
 800baa6:	d12d      	bne.n	800bb04 <__swbuf_r+0x78>
 800baa8:	686c      	ldr	r4, [r5, #4]
 800baaa:	69a3      	ldr	r3, [r4, #24]
 800baac:	60a3      	str	r3, [r4, #8]
 800baae:	89a3      	ldrh	r3, [r4, #12]
 800bab0:	071b      	lsls	r3, r3, #28
 800bab2:	d531      	bpl.n	800bb18 <__swbuf_r+0x8c>
 800bab4:	6923      	ldr	r3, [r4, #16]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d02e      	beq.n	800bb18 <__swbuf_r+0x8c>
 800baba:	6823      	ldr	r3, [r4, #0]
 800babc:	6922      	ldr	r2, [r4, #16]
 800babe:	b2f7      	uxtb	r7, r6
 800bac0:	1a98      	subs	r0, r3, r2
 800bac2:	6963      	ldr	r3, [r4, #20]
 800bac4:	b2f6      	uxtb	r6, r6
 800bac6:	4283      	cmp	r3, r0
 800bac8:	dc05      	bgt.n	800bad6 <__swbuf_r+0x4a>
 800baca:	0021      	movs	r1, r4
 800bacc:	0028      	movs	r0, r5
 800bace:	f000 ff99 	bl	800ca04 <_fflush_r>
 800bad2:	2800      	cmp	r0, #0
 800bad4:	d126      	bne.n	800bb24 <__swbuf_r+0x98>
 800bad6:	68a3      	ldr	r3, [r4, #8]
 800bad8:	3001      	adds	r0, #1
 800bada:	3b01      	subs	r3, #1
 800badc:	60a3      	str	r3, [r4, #8]
 800bade:	6823      	ldr	r3, [r4, #0]
 800bae0:	1c5a      	adds	r2, r3, #1
 800bae2:	6022      	str	r2, [r4, #0]
 800bae4:	701f      	strb	r7, [r3, #0]
 800bae6:	6963      	ldr	r3, [r4, #20]
 800bae8:	4283      	cmp	r3, r0
 800baea:	d004      	beq.n	800baf6 <__swbuf_r+0x6a>
 800baec:	89a3      	ldrh	r3, [r4, #12]
 800baee:	07db      	lsls	r3, r3, #31
 800baf0:	d51a      	bpl.n	800bb28 <__swbuf_r+0x9c>
 800baf2:	2e0a      	cmp	r6, #10
 800baf4:	d118      	bne.n	800bb28 <__swbuf_r+0x9c>
 800baf6:	0021      	movs	r1, r4
 800baf8:	0028      	movs	r0, r5
 800bafa:	f000 ff83 	bl	800ca04 <_fflush_r>
 800bafe:	2800      	cmp	r0, #0
 800bb00:	d012      	beq.n	800bb28 <__swbuf_r+0x9c>
 800bb02:	e00f      	b.n	800bb24 <__swbuf_r+0x98>
 800bb04:	4b0a      	ldr	r3, [pc, #40]	; (800bb30 <__swbuf_r+0xa4>)
 800bb06:	429c      	cmp	r4, r3
 800bb08:	d101      	bne.n	800bb0e <__swbuf_r+0x82>
 800bb0a:	68ac      	ldr	r4, [r5, #8]
 800bb0c:	e7cd      	b.n	800baaa <__swbuf_r+0x1e>
 800bb0e:	4b09      	ldr	r3, [pc, #36]	; (800bb34 <__swbuf_r+0xa8>)
 800bb10:	429c      	cmp	r4, r3
 800bb12:	d1ca      	bne.n	800baaa <__swbuf_r+0x1e>
 800bb14:	68ec      	ldr	r4, [r5, #12]
 800bb16:	e7c8      	b.n	800baaa <__swbuf_r+0x1e>
 800bb18:	0021      	movs	r1, r4
 800bb1a:	0028      	movs	r0, r5
 800bb1c:	f000 f80c 	bl	800bb38 <__swsetup_r>
 800bb20:	2800      	cmp	r0, #0
 800bb22:	d0ca      	beq.n	800baba <__swbuf_r+0x2e>
 800bb24:	2601      	movs	r6, #1
 800bb26:	4276      	negs	r6, r6
 800bb28:	0030      	movs	r0, r6
 800bb2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb2c:	0800eb18 	.word	0x0800eb18
 800bb30:	0800eb38 	.word	0x0800eb38
 800bb34:	0800eaf8 	.word	0x0800eaf8

0800bb38 <__swsetup_r>:
 800bb38:	4b36      	ldr	r3, [pc, #216]	; (800bc14 <__swsetup_r+0xdc>)
 800bb3a:	b570      	push	{r4, r5, r6, lr}
 800bb3c:	681d      	ldr	r5, [r3, #0]
 800bb3e:	0006      	movs	r6, r0
 800bb40:	000c      	movs	r4, r1
 800bb42:	2d00      	cmp	r5, #0
 800bb44:	d005      	beq.n	800bb52 <__swsetup_r+0x1a>
 800bb46:	69ab      	ldr	r3, [r5, #24]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d102      	bne.n	800bb52 <__swsetup_r+0x1a>
 800bb4c:	0028      	movs	r0, r5
 800bb4e:	f000 ffc7 	bl	800cae0 <__sinit>
 800bb52:	4b31      	ldr	r3, [pc, #196]	; (800bc18 <__swsetup_r+0xe0>)
 800bb54:	429c      	cmp	r4, r3
 800bb56:	d10f      	bne.n	800bb78 <__swsetup_r+0x40>
 800bb58:	686c      	ldr	r4, [r5, #4]
 800bb5a:	230c      	movs	r3, #12
 800bb5c:	5ee2      	ldrsh	r2, [r4, r3]
 800bb5e:	b293      	uxth	r3, r2
 800bb60:	0719      	lsls	r1, r3, #28
 800bb62:	d42d      	bmi.n	800bbc0 <__swsetup_r+0x88>
 800bb64:	06d9      	lsls	r1, r3, #27
 800bb66:	d411      	bmi.n	800bb8c <__swsetup_r+0x54>
 800bb68:	2309      	movs	r3, #9
 800bb6a:	2001      	movs	r0, #1
 800bb6c:	6033      	str	r3, [r6, #0]
 800bb6e:	3337      	adds	r3, #55	; 0x37
 800bb70:	4313      	orrs	r3, r2
 800bb72:	81a3      	strh	r3, [r4, #12]
 800bb74:	4240      	negs	r0, r0
 800bb76:	bd70      	pop	{r4, r5, r6, pc}
 800bb78:	4b28      	ldr	r3, [pc, #160]	; (800bc1c <__swsetup_r+0xe4>)
 800bb7a:	429c      	cmp	r4, r3
 800bb7c:	d101      	bne.n	800bb82 <__swsetup_r+0x4a>
 800bb7e:	68ac      	ldr	r4, [r5, #8]
 800bb80:	e7eb      	b.n	800bb5a <__swsetup_r+0x22>
 800bb82:	4b27      	ldr	r3, [pc, #156]	; (800bc20 <__swsetup_r+0xe8>)
 800bb84:	429c      	cmp	r4, r3
 800bb86:	d1e8      	bne.n	800bb5a <__swsetup_r+0x22>
 800bb88:	68ec      	ldr	r4, [r5, #12]
 800bb8a:	e7e6      	b.n	800bb5a <__swsetup_r+0x22>
 800bb8c:	075b      	lsls	r3, r3, #29
 800bb8e:	d513      	bpl.n	800bbb8 <__swsetup_r+0x80>
 800bb90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb92:	2900      	cmp	r1, #0
 800bb94:	d008      	beq.n	800bba8 <__swsetup_r+0x70>
 800bb96:	0023      	movs	r3, r4
 800bb98:	3344      	adds	r3, #68	; 0x44
 800bb9a:	4299      	cmp	r1, r3
 800bb9c:	d002      	beq.n	800bba4 <__swsetup_r+0x6c>
 800bb9e:	0030      	movs	r0, r6
 800bba0:	f002 f80c 	bl	800dbbc <_free_r>
 800bba4:	2300      	movs	r3, #0
 800bba6:	6363      	str	r3, [r4, #52]	; 0x34
 800bba8:	2224      	movs	r2, #36	; 0x24
 800bbaa:	89a3      	ldrh	r3, [r4, #12]
 800bbac:	4393      	bics	r3, r2
 800bbae:	81a3      	strh	r3, [r4, #12]
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	6063      	str	r3, [r4, #4]
 800bbb4:	6923      	ldr	r3, [r4, #16]
 800bbb6:	6023      	str	r3, [r4, #0]
 800bbb8:	2308      	movs	r3, #8
 800bbba:	89a2      	ldrh	r2, [r4, #12]
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	81a3      	strh	r3, [r4, #12]
 800bbc0:	6923      	ldr	r3, [r4, #16]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d10b      	bne.n	800bbde <__swsetup_r+0xa6>
 800bbc6:	21a0      	movs	r1, #160	; 0xa0
 800bbc8:	2280      	movs	r2, #128	; 0x80
 800bbca:	89a3      	ldrh	r3, [r4, #12]
 800bbcc:	0089      	lsls	r1, r1, #2
 800bbce:	0092      	lsls	r2, r2, #2
 800bbd0:	400b      	ands	r3, r1
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	d003      	beq.n	800bbde <__swsetup_r+0xa6>
 800bbd6:	0021      	movs	r1, r4
 800bbd8:	0030      	movs	r0, r6
 800bbda:	f001 fb7f 	bl	800d2dc <__smakebuf_r>
 800bbde:	2301      	movs	r3, #1
 800bbe0:	89a2      	ldrh	r2, [r4, #12]
 800bbe2:	4013      	ands	r3, r2
 800bbe4:	d011      	beq.n	800bc0a <__swsetup_r+0xd2>
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	60a3      	str	r3, [r4, #8]
 800bbea:	6963      	ldr	r3, [r4, #20]
 800bbec:	425b      	negs	r3, r3
 800bbee:	61a3      	str	r3, [r4, #24]
 800bbf0:	2000      	movs	r0, #0
 800bbf2:	6923      	ldr	r3, [r4, #16]
 800bbf4:	4283      	cmp	r3, r0
 800bbf6:	d1be      	bne.n	800bb76 <__swsetup_r+0x3e>
 800bbf8:	230c      	movs	r3, #12
 800bbfa:	5ee2      	ldrsh	r2, [r4, r3]
 800bbfc:	0613      	lsls	r3, r2, #24
 800bbfe:	d5ba      	bpl.n	800bb76 <__swsetup_r+0x3e>
 800bc00:	2340      	movs	r3, #64	; 0x40
 800bc02:	4313      	orrs	r3, r2
 800bc04:	81a3      	strh	r3, [r4, #12]
 800bc06:	3801      	subs	r0, #1
 800bc08:	e7b5      	b.n	800bb76 <__swsetup_r+0x3e>
 800bc0a:	0792      	lsls	r2, r2, #30
 800bc0c:	d400      	bmi.n	800bc10 <__swsetup_r+0xd8>
 800bc0e:	6963      	ldr	r3, [r4, #20]
 800bc10:	60a3      	str	r3, [r4, #8]
 800bc12:	e7ed      	b.n	800bbf0 <__swsetup_r+0xb8>
 800bc14:	20000064 	.word	0x20000064
 800bc18:	0800eb18 	.word	0x0800eb18
 800bc1c:	0800eb38 	.word	0x0800eb38
 800bc20:	0800eaf8 	.word	0x0800eaf8

0800bc24 <quorem>:
 800bc24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc26:	6903      	ldr	r3, [r0, #16]
 800bc28:	690c      	ldr	r4, [r1, #16]
 800bc2a:	b089      	sub	sp, #36	; 0x24
 800bc2c:	0007      	movs	r7, r0
 800bc2e:	9105      	str	r1, [sp, #20]
 800bc30:	2600      	movs	r6, #0
 800bc32:	42a3      	cmp	r3, r4
 800bc34:	db65      	blt.n	800bd02 <quorem+0xde>
 800bc36:	000b      	movs	r3, r1
 800bc38:	3c01      	subs	r4, #1
 800bc3a:	3314      	adds	r3, #20
 800bc3c:	00a5      	lsls	r5, r4, #2
 800bc3e:	9303      	str	r3, [sp, #12]
 800bc40:	195b      	adds	r3, r3, r5
 800bc42:	9304      	str	r3, [sp, #16]
 800bc44:	0003      	movs	r3, r0
 800bc46:	3314      	adds	r3, #20
 800bc48:	9302      	str	r3, [sp, #8]
 800bc4a:	195d      	adds	r5, r3, r5
 800bc4c:	9b04      	ldr	r3, [sp, #16]
 800bc4e:	6828      	ldr	r0, [r5, #0]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	1c59      	adds	r1, r3, #1
 800bc54:	9301      	str	r3, [sp, #4]
 800bc56:	f7f4 fa69 	bl	800012c <__udivsi3>
 800bc5a:	9001      	str	r0, [sp, #4]
 800bc5c:	42b0      	cmp	r0, r6
 800bc5e:	d029      	beq.n	800bcb4 <quorem+0x90>
 800bc60:	9b03      	ldr	r3, [sp, #12]
 800bc62:	9802      	ldr	r0, [sp, #8]
 800bc64:	469c      	mov	ip, r3
 800bc66:	9606      	str	r6, [sp, #24]
 800bc68:	4662      	mov	r2, ip
 800bc6a:	ca08      	ldmia	r2!, {r3}
 800bc6c:	4694      	mov	ip, r2
 800bc6e:	9a01      	ldr	r2, [sp, #4]
 800bc70:	b299      	uxth	r1, r3
 800bc72:	4351      	muls	r1, r2
 800bc74:	0c1b      	lsrs	r3, r3, #16
 800bc76:	4353      	muls	r3, r2
 800bc78:	1989      	adds	r1, r1, r6
 800bc7a:	0c0a      	lsrs	r2, r1, #16
 800bc7c:	189b      	adds	r3, r3, r2
 800bc7e:	9307      	str	r3, [sp, #28]
 800bc80:	0c1e      	lsrs	r6, r3, #16
 800bc82:	6803      	ldr	r3, [r0, #0]
 800bc84:	b289      	uxth	r1, r1
 800bc86:	b29a      	uxth	r2, r3
 800bc88:	9b06      	ldr	r3, [sp, #24]
 800bc8a:	18d2      	adds	r2, r2, r3
 800bc8c:	6803      	ldr	r3, [r0, #0]
 800bc8e:	1a52      	subs	r2, r2, r1
 800bc90:	0c19      	lsrs	r1, r3, #16
 800bc92:	466b      	mov	r3, sp
 800bc94:	8b9b      	ldrh	r3, [r3, #28]
 800bc96:	1acb      	subs	r3, r1, r3
 800bc98:	1411      	asrs	r1, r2, #16
 800bc9a:	185b      	adds	r3, r3, r1
 800bc9c:	1419      	asrs	r1, r3, #16
 800bc9e:	b292      	uxth	r2, r2
 800bca0:	041b      	lsls	r3, r3, #16
 800bca2:	431a      	orrs	r2, r3
 800bca4:	9b04      	ldr	r3, [sp, #16]
 800bca6:	9106      	str	r1, [sp, #24]
 800bca8:	c004      	stmia	r0!, {r2}
 800bcaa:	4563      	cmp	r3, ip
 800bcac:	d2dc      	bcs.n	800bc68 <quorem+0x44>
 800bcae:	682b      	ldr	r3, [r5, #0]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d02d      	beq.n	800bd10 <quorem+0xec>
 800bcb4:	9905      	ldr	r1, [sp, #20]
 800bcb6:	0038      	movs	r0, r7
 800bcb8:	f001 fdce 	bl	800d858 <__mcmp>
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	db1f      	blt.n	800bd00 <quorem+0xdc>
 800bcc0:	2500      	movs	r5, #0
 800bcc2:	9b01      	ldr	r3, [sp, #4]
 800bcc4:	9802      	ldr	r0, [sp, #8]
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	9903      	ldr	r1, [sp, #12]
 800bcca:	9301      	str	r3, [sp, #4]
 800bccc:	6802      	ldr	r2, [r0, #0]
 800bcce:	c908      	ldmia	r1!, {r3}
 800bcd0:	b292      	uxth	r2, r2
 800bcd2:	1955      	adds	r5, r2, r5
 800bcd4:	b29a      	uxth	r2, r3
 800bcd6:	1aaa      	subs	r2, r5, r2
 800bcd8:	6805      	ldr	r5, [r0, #0]
 800bcda:	0c1b      	lsrs	r3, r3, #16
 800bcdc:	0c2d      	lsrs	r5, r5, #16
 800bcde:	1aeb      	subs	r3, r5, r3
 800bce0:	1415      	asrs	r5, r2, #16
 800bce2:	195b      	adds	r3, r3, r5
 800bce4:	141d      	asrs	r5, r3, #16
 800bce6:	b292      	uxth	r2, r2
 800bce8:	041b      	lsls	r3, r3, #16
 800bcea:	4313      	orrs	r3, r2
 800bcec:	c008      	stmia	r0!, {r3}
 800bcee:	9b04      	ldr	r3, [sp, #16]
 800bcf0:	428b      	cmp	r3, r1
 800bcf2:	d2eb      	bcs.n	800bccc <quorem+0xa8>
 800bcf4:	9a02      	ldr	r2, [sp, #8]
 800bcf6:	00a3      	lsls	r3, r4, #2
 800bcf8:	18d3      	adds	r3, r2, r3
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	2a00      	cmp	r2, #0
 800bcfe:	d011      	beq.n	800bd24 <quorem+0x100>
 800bd00:	9e01      	ldr	r6, [sp, #4]
 800bd02:	0030      	movs	r0, r6
 800bd04:	b009      	add	sp, #36	; 0x24
 800bd06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd08:	682b      	ldr	r3, [r5, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d104      	bne.n	800bd18 <quorem+0xf4>
 800bd0e:	3c01      	subs	r4, #1
 800bd10:	9b02      	ldr	r3, [sp, #8]
 800bd12:	3d04      	subs	r5, #4
 800bd14:	42ab      	cmp	r3, r5
 800bd16:	d3f7      	bcc.n	800bd08 <quorem+0xe4>
 800bd18:	613c      	str	r4, [r7, #16]
 800bd1a:	e7cb      	b.n	800bcb4 <quorem+0x90>
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	2a00      	cmp	r2, #0
 800bd20:	d104      	bne.n	800bd2c <quorem+0x108>
 800bd22:	3c01      	subs	r4, #1
 800bd24:	9a02      	ldr	r2, [sp, #8]
 800bd26:	3b04      	subs	r3, #4
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d3f7      	bcc.n	800bd1c <quorem+0xf8>
 800bd2c:	613c      	str	r4, [r7, #16]
 800bd2e:	e7e7      	b.n	800bd00 <quorem+0xdc>

0800bd30 <_dtoa_r>:
 800bd30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd32:	0016      	movs	r6, r2
 800bd34:	001f      	movs	r7, r3
 800bd36:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bd38:	b09b      	sub	sp, #108	; 0x6c
 800bd3a:	9002      	str	r0, [sp, #8]
 800bd3c:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800bd3e:	9606      	str	r6, [sp, #24]
 800bd40:	9707      	str	r7, [sp, #28]
 800bd42:	2c00      	cmp	r4, #0
 800bd44:	d108      	bne.n	800bd58 <_dtoa_r+0x28>
 800bd46:	2010      	movs	r0, #16
 800bd48:	f001 fb0c 	bl	800d364 <malloc>
 800bd4c:	9b02      	ldr	r3, [sp, #8]
 800bd4e:	6258      	str	r0, [r3, #36]	; 0x24
 800bd50:	6044      	str	r4, [r0, #4]
 800bd52:	6084      	str	r4, [r0, #8]
 800bd54:	6004      	str	r4, [r0, #0]
 800bd56:	60c4      	str	r4, [r0, #12]
 800bd58:	9b02      	ldr	r3, [sp, #8]
 800bd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd5c:	6819      	ldr	r1, [r3, #0]
 800bd5e:	2900      	cmp	r1, #0
 800bd60:	d00b      	beq.n	800bd7a <_dtoa_r+0x4a>
 800bd62:	685a      	ldr	r2, [r3, #4]
 800bd64:	2301      	movs	r3, #1
 800bd66:	4093      	lsls	r3, r2
 800bd68:	604a      	str	r2, [r1, #4]
 800bd6a:	608b      	str	r3, [r1, #8]
 800bd6c:	9802      	ldr	r0, [sp, #8]
 800bd6e:	f001 fb58 	bl	800d422 <_Bfree>
 800bd72:	2200      	movs	r2, #0
 800bd74:	9b02      	ldr	r3, [sp, #8]
 800bd76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd78:	601a      	str	r2, [r3, #0]
 800bd7a:	2f00      	cmp	r7, #0
 800bd7c:	da20      	bge.n	800bdc0 <_dtoa_r+0x90>
 800bd7e:	2301      	movs	r3, #1
 800bd80:	602b      	str	r3, [r5, #0]
 800bd82:	007b      	lsls	r3, r7, #1
 800bd84:	085b      	lsrs	r3, r3, #1
 800bd86:	9307      	str	r3, [sp, #28]
 800bd88:	9c07      	ldr	r4, [sp, #28]
 800bd8a:	4bb2      	ldr	r3, [pc, #712]	; (800c054 <_dtoa_r+0x324>)
 800bd8c:	0022      	movs	r2, r4
 800bd8e:	9317      	str	r3, [sp, #92]	; 0x5c
 800bd90:	401a      	ands	r2, r3
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d117      	bne.n	800bdc6 <_dtoa_r+0x96>
 800bd96:	4bb0      	ldr	r3, [pc, #704]	; (800c058 <_dtoa_r+0x328>)
 800bd98:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bd9a:	6013      	str	r3, [r2, #0]
 800bd9c:	9b06      	ldr	r3, [sp, #24]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d103      	bne.n	800bdaa <_dtoa_r+0x7a>
 800bda2:	0324      	lsls	r4, r4, #12
 800bda4:	d101      	bne.n	800bdaa <_dtoa_r+0x7a>
 800bda6:	f000 fd87 	bl	800c8b8 <_dtoa_r+0xb88>
 800bdaa:	4bac      	ldr	r3, [pc, #688]	; (800c05c <_dtoa_r+0x32c>)
 800bdac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bdae:	9308      	str	r3, [sp, #32]
 800bdb0:	2a00      	cmp	r2, #0
 800bdb2:	d002      	beq.n	800bdba <_dtoa_r+0x8a>
 800bdb4:	4baa      	ldr	r3, [pc, #680]	; (800c060 <_dtoa_r+0x330>)
 800bdb6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bdb8:	6013      	str	r3, [r2, #0]
 800bdba:	9808      	ldr	r0, [sp, #32]
 800bdbc:	b01b      	add	sp, #108	; 0x6c
 800bdbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	602b      	str	r3, [r5, #0]
 800bdc4:	e7e0      	b.n	800bd88 <_dtoa_r+0x58>
 800bdc6:	9e06      	ldr	r6, [sp, #24]
 800bdc8:	9f07      	ldr	r7, [sp, #28]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	2300      	movs	r3, #0
 800bdce:	0030      	movs	r0, r6
 800bdd0:	0039      	movs	r1, r7
 800bdd2:	f7f4 fb31 	bl	8000438 <__aeabi_dcmpeq>
 800bdd6:	1e05      	subs	r5, r0, #0
 800bdd8:	d00b      	beq.n	800bdf2 <_dtoa_r+0xc2>
 800bdda:	2301      	movs	r3, #1
 800bddc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bdde:	6013      	str	r3, [r2, #0]
 800bde0:	4ba0      	ldr	r3, [pc, #640]	; (800c064 <_dtoa_r+0x334>)
 800bde2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bde4:	9308      	str	r3, [sp, #32]
 800bde6:	2a00      	cmp	r2, #0
 800bde8:	d0e7      	beq.n	800bdba <_dtoa_r+0x8a>
 800bdea:	4a9f      	ldr	r2, [pc, #636]	; (800c068 <_dtoa_r+0x338>)
 800bdec:	9924      	ldr	r1, [sp, #144]	; 0x90
 800bdee:	600a      	str	r2, [r1, #0]
 800bdf0:	e7e3      	b.n	800bdba <_dtoa_r+0x8a>
 800bdf2:	ab18      	add	r3, sp, #96	; 0x60
 800bdf4:	9301      	str	r3, [sp, #4]
 800bdf6:	ab19      	add	r3, sp, #100	; 0x64
 800bdf8:	9300      	str	r3, [sp, #0]
 800bdfa:	0032      	movs	r2, r6
 800bdfc:	003b      	movs	r3, r7
 800bdfe:	9802      	ldr	r0, [sp, #8]
 800be00:	f001 fe1a 	bl	800da38 <__d2b>
 800be04:	0063      	lsls	r3, r4, #1
 800be06:	9003      	str	r0, [sp, #12]
 800be08:	0d5b      	lsrs	r3, r3, #21
 800be0a:	d074      	beq.n	800bef6 <_dtoa_r+0x1c6>
 800be0c:	033a      	lsls	r2, r7, #12
 800be0e:	4c97      	ldr	r4, [pc, #604]	; (800c06c <_dtoa_r+0x33c>)
 800be10:	0b12      	lsrs	r2, r2, #12
 800be12:	4314      	orrs	r4, r2
 800be14:	0021      	movs	r1, r4
 800be16:	4a96      	ldr	r2, [pc, #600]	; (800c070 <_dtoa_r+0x340>)
 800be18:	0030      	movs	r0, r6
 800be1a:	9516      	str	r5, [sp, #88]	; 0x58
 800be1c:	189e      	adds	r6, r3, r2
 800be1e:	2200      	movs	r2, #0
 800be20:	4b94      	ldr	r3, [pc, #592]	; (800c074 <_dtoa_r+0x344>)
 800be22:	f7f6 fa8b 	bl	800233c <__aeabi_dsub>
 800be26:	4a94      	ldr	r2, [pc, #592]	; (800c078 <_dtoa_r+0x348>)
 800be28:	4b94      	ldr	r3, [pc, #592]	; (800c07c <_dtoa_r+0x34c>)
 800be2a:	f7f6 f815 	bl	8001e58 <__aeabi_dmul>
 800be2e:	4a94      	ldr	r2, [pc, #592]	; (800c080 <_dtoa_r+0x350>)
 800be30:	4b94      	ldr	r3, [pc, #592]	; (800c084 <_dtoa_r+0x354>)
 800be32:	f7f5 f8eb 	bl	800100c <__aeabi_dadd>
 800be36:	0004      	movs	r4, r0
 800be38:	0030      	movs	r0, r6
 800be3a:	000d      	movs	r5, r1
 800be3c:	f7f6 fe18 	bl	8002a70 <__aeabi_i2d>
 800be40:	4a91      	ldr	r2, [pc, #580]	; (800c088 <_dtoa_r+0x358>)
 800be42:	4b92      	ldr	r3, [pc, #584]	; (800c08c <_dtoa_r+0x35c>)
 800be44:	f7f6 f808 	bl	8001e58 <__aeabi_dmul>
 800be48:	0002      	movs	r2, r0
 800be4a:	000b      	movs	r3, r1
 800be4c:	0020      	movs	r0, r4
 800be4e:	0029      	movs	r1, r5
 800be50:	f7f5 f8dc 	bl	800100c <__aeabi_dadd>
 800be54:	0004      	movs	r4, r0
 800be56:	000d      	movs	r5, r1
 800be58:	f7f6 fdd4 	bl	8002a04 <__aeabi_d2iz>
 800be5c:	2200      	movs	r2, #0
 800be5e:	0007      	movs	r7, r0
 800be60:	2300      	movs	r3, #0
 800be62:	0020      	movs	r0, r4
 800be64:	0029      	movs	r1, r5
 800be66:	f7f4 faed 	bl	8000444 <__aeabi_dcmplt>
 800be6a:	2800      	cmp	r0, #0
 800be6c:	d009      	beq.n	800be82 <_dtoa_r+0x152>
 800be6e:	0038      	movs	r0, r7
 800be70:	f7f6 fdfe 	bl	8002a70 <__aeabi_i2d>
 800be74:	002b      	movs	r3, r5
 800be76:	0022      	movs	r2, r4
 800be78:	f7f4 fade 	bl	8000438 <__aeabi_dcmpeq>
 800be7c:	4243      	negs	r3, r0
 800be7e:	4158      	adcs	r0, r3
 800be80:	1a3f      	subs	r7, r7, r0
 800be82:	2301      	movs	r3, #1
 800be84:	9314      	str	r3, [sp, #80]	; 0x50
 800be86:	2f16      	cmp	r7, #22
 800be88:	d80d      	bhi.n	800bea6 <_dtoa_r+0x176>
 800be8a:	4981      	ldr	r1, [pc, #516]	; (800c090 <_dtoa_r+0x360>)
 800be8c:	00fb      	lsls	r3, r7, #3
 800be8e:	18c9      	adds	r1, r1, r3
 800be90:	6808      	ldr	r0, [r1, #0]
 800be92:	6849      	ldr	r1, [r1, #4]
 800be94:	9a06      	ldr	r2, [sp, #24]
 800be96:	9b07      	ldr	r3, [sp, #28]
 800be98:	f7f4 fae8 	bl	800046c <__aeabi_dcmpgt>
 800be9c:	2800      	cmp	r0, #0
 800be9e:	d046      	beq.n	800bf2e <_dtoa_r+0x1fe>
 800bea0:	2300      	movs	r3, #0
 800bea2:	3f01      	subs	r7, #1
 800bea4:	9314      	str	r3, [sp, #80]	; 0x50
 800bea6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bea8:	1b9e      	subs	r6, r3, r6
 800beaa:	2300      	movs	r3, #0
 800beac:	930a      	str	r3, [sp, #40]	; 0x28
 800beae:	0033      	movs	r3, r6
 800beb0:	3b01      	subs	r3, #1
 800beb2:	930b      	str	r3, [sp, #44]	; 0x2c
 800beb4:	d504      	bpl.n	800bec0 <_dtoa_r+0x190>
 800beb6:	2301      	movs	r3, #1
 800beb8:	1b9b      	subs	r3, r3, r6
 800beba:	930a      	str	r3, [sp, #40]	; 0x28
 800bebc:	2300      	movs	r3, #0
 800bebe:	930b      	str	r3, [sp, #44]	; 0x2c
 800bec0:	2f00      	cmp	r7, #0
 800bec2:	db36      	blt.n	800bf32 <_dtoa_r+0x202>
 800bec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bec6:	9711      	str	r7, [sp, #68]	; 0x44
 800bec8:	19db      	adds	r3, r3, r7
 800beca:	930b      	str	r3, [sp, #44]	; 0x2c
 800becc:	2300      	movs	r3, #0
 800bece:	9304      	str	r3, [sp, #16]
 800bed0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bed2:	2401      	movs	r4, #1
 800bed4:	2b09      	cmp	r3, #9
 800bed6:	d900      	bls.n	800beda <_dtoa_r+0x1aa>
 800bed8:	e084      	b.n	800bfe4 <_dtoa_r+0x2b4>
 800beda:	2b05      	cmp	r3, #5
 800bedc:	dd02      	ble.n	800bee4 <_dtoa_r+0x1b4>
 800bede:	2400      	movs	r4, #0
 800bee0:	3b04      	subs	r3, #4
 800bee2:	9320      	str	r3, [sp, #128]	; 0x80
 800bee4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bee6:	1e98      	subs	r0, r3, #2
 800bee8:	2803      	cmp	r0, #3
 800beea:	d900      	bls.n	800beee <_dtoa_r+0x1be>
 800beec:	e084      	b.n	800bff8 <_dtoa_r+0x2c8>
 800beee:	f7f4 f913 	bl	8000118 <__gnu_thumb1_case_uqi>
 800bef2:	7775      	.short	0x7775
 800bef4:	6a28      	.short	0x6a28
 800bef6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bef8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800befa:	189e      	adds	r6, r3, r2
 800befc:	4b65      	ldr	r3, [pc, #404]	; (800c094 <_dtoa_r+0x364>)
 800befe:	18f2      	adds	r2, r6, r3
 800bf00:	2a20      	cmp	r2, #32
 800bf02:	dd0f      	ble.n	800bf24 <_dtoa_r+0x1f4>
 800bf04:	2340      	movs	r3, #64	; 0x40
 800bf06:	1a9b      	subs	r3, r3, r2
 800bf08:	409c      	lsls	r4, r3
 800bf0a:	4b63      	ldr	r3, [pc, #396]	; (800c098 <_dtoa_r+0x368>)
 800bf0c:	9806      	ldr	r0, [sp, #24]
 800bf0e:	18f3      	adds	r3, r6, r3
 800bf10:	40d8      	lsrs	r0, r3
 800bf12:	4320      	orrs	r0, r4
 800bf14:	f7f6 fde6 	bl	8002ae4 <__aeabi_ui2d>
 800bf18:	2301      	movs	r3, #1
 800bf1a:	4c60      	ldr	r4, [pc, #384]	; (800c09c <_dtoa_r+0x36c>)
 800bf1c:	3e01      	subs	r6, #1
 800bf1e:	1909      	adds	r1, r1, r4
 800bf20:	9316      	str	r3, [sp, #88]	; 0x58
 800bf22:	e77c      	b.n	800be1e <_dtoa_r+0xee>
 800bf24:	2320      	movs	r3, #32
 800bf26:	9806      	ldr	r0, [sp, #24]
 800bf28:	1a9b      	subs	r3, r3, r2
 800bf2a:	4098      	lsls	r0, r3
 800bf2c:	e7f2      	b.n	800bf14 <_dtoa_r+0x1e4>
 800bf2e:	9014      	str	r0, [sp, #80]	; 0x50
 800bf30:	e7b9      	b.n	800bea6 <_dtoa_r+0x176>
 800bf32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf34:	1bdb      	subs	r3, r3, r7
 800bf36:	930a      	str	r3, [sp, #40]	; 0x28
 800bf38:	427b      	negs	r3, r7
 800bf3a:	9304      	str	r3, [sp, #16]
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	9311      	str	r3, [sp, #68]	; 0x44
 800bf40:	e7c6      	b.n	800bed0 <_dtoa_r+0x1a0>
 800bf42:	2301      	movs	r3, #1
 800bf44:	930d      	str	r3, [sp, #52]	; 0x34
 800bf46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	dd59      	ble.n	800c000 <_dtoa_r+0x2d0>
 800bf4c:	930c      	str	r3, [sp, #48]	; 0x30
 800bf4e:	9309      	str	r3, [sp, #36]	; 0x24
 800bf50:	9a02      	ldr	r2, [sp, #8]
 800bf52:	6a55      	ldr	r5, [r2, #36]	; 0x24
 800bf54:	2200      	movs	r2, #0
 800bf56:	606a      	str	r2, [r5, #4]
 800bf58:	3204      	adds	r2, #4
 800bf5a:	0010      	movs	r0, r2
 800bf5c:	3014      	adds	r0, #20
 800bf5e:	6869      	ldr	r1, [r5, #4]
 800bf60:	4298      	cmp	r0, r3
 800bf62:	d952      	bls.n	800c00a <_dtoa_r+0x2da>
 800bf64:	9802      	ldr	r0, [sp, #8]
 800bf66:	f001 fa24 	bl	800d3b2 <_Balloc>
 800bf6a:	9b02      	ldr	r3, [sp, #8]
 800bf6c:	6028      	str	r0, [r5, #0]
 800bf6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	9308      	str	r3, [sp, #32]
 800bf74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf76:	2b0e      	cmp	r3, #14
 800bf78:	d900      	bls.n	800bf7c <_dtoa_r+0x24c>
 800bf7a:	e10a      	b.n	800c192 <_dtoa_r+0x462>
 800bf7c:	2c00      	cmp	r4, #0
 800bf7e:	d100      	bne.n	800bf82 <_dtoa_r+0x252>
 800bf80:	e107      	b.n	800c192 <_dtoa_r+0x462>
 800bf82:	9b06      	ldr	r3, [sp, #24]
 800bf84:	9c07      	ldr	r4, [sp, #28]
 800bf86:	9312      	str	r3, [sp, #72]	; 0x48
 800bf88:	9413      	str	r4, [sp, #76]	; 0x4c
 800bf8a:	2f00      	cmp	r7, #0
 800bf8c:	dc00      	bgt.n	800bf90 <_dtoa_r+0x260>
 800bf8e:	e089      	b.n	800c0a4 <_dtoa_r+0x374>
 800bf90:	210f      	movs	r1, #15
 800bf92:	003a      	movs	r2, r7
 800bf94:	4b3e      	ldr	r3, [pc, #248]	; (800c090 <_dtoa_r+0x360>)
 800bf96:	400a      	ands	r2, r1
 800bf98:	00d2      	lsls	r2, r2, #3
 800bf9a:	189b      	adds	r3, r3, r2
 800bf9c:	681d      	ldr	r5, [r3, #0]
 800bf9e:	685e      	ldr	r6, [r3, #4]
 800bfa0:	2302      	movs	r3, #2
 800bfa2:	113c      	asrs	r4, r7, #4
 800bfa4:	930e      	str	r3, [sp, #56]	; 0x38
 800bfa6:	06e3      	lsls	r3, r4, #27
 800bfa8:	d50b      	bpl.n	800bfc2 <_dtoa_r+0x292>
 800bfaa:	4b3d      	ldr	r3, [pc, #244]	; (800c0a0 <_dtoa_r+0x370>)
 800bfac:	400c      	ands	r4, r1
 800bfae:	6a1a      	ldr	r2, [r3, #32]
 800bfb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bfb4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bfb6:	f7f5 fb45 	bl	8001644 <__aeabi_ddiv>
 800bfba:	2303      	movs	r3, #3
 800bfbc:	9006      	str	r0, [sp, #24]
 800bfbe:	9107      	str	r1, [sp, #28]
 800bfc0:	930e      	str	r3, [sp, #56]	; 0x38
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	e03a      	b.n	800c03c <_dtoa_r+0x30c>
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	930d      	str	r3, [sp, #52]	; 0x34
 800bfca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfcc:	18fb      	adds	r3, r7, r3
 800bfce:	930c      	str	r3, [sp, #48]	; 0x30
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	9309      	str	r3, [sp, #36]	; 0x24
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	dcbb      	bgt.n	800bf50 <_dtoa_r+0x220>
 800bfd8:	2301      	movs	r3, #1
 800bfda:	e7b9      	b.n	800bf50 <_dtoa_r+0x220>
 800bfdc:	2300      	movs	r3, #0
 800bfde:	e7b1      	b.n	800bf44 <_dtoa_r+0x214>
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	e7f1      	b.n	800bfc8 <_dtoa_r+0x298>
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	940d      	str	r4, [sp, #52]	; 0x34
 800bfe8:	9320      	str	r3, [sp, #128]	; 0x80
 800bfea:	3b01      	subs	r3, #1
 800bfec:	2200      	movs	r2, #0
 800bfee:	930c      	str	r3, [sp, #48]	; 0x30
 800bff0:	9309      	str	r3, [sp, #36]	; 0x24
 800bff2:	3313      	adds	r3, #19
 800bff4:	9221      	str	r2, [sp, #132]	; 0x84
 800bff6:	e7ab      	b.n	800bf50 <_dtoa_r+0x220>
 800bff8:	2301      	movs	r3, #1
 800bffa:	930d      	str	r3, [sp, #52]	; 0x34
 800bffc:	3b02      	subs	r3, #2
 800bffe:	e7f5      	b.n	800bfec <_dtoa_r+0x2bc>
 800c000:	2301      	movs	r3, #1
 800c002:	930c      	str	r3, [sp, #48]	; 0x30
 800c004:	9309      	str	r3, [sp, #36]	; 0x24
 800c006:	001a      	movs	r2, r3
 800c008:	e7f4      	b.n	800bff4 <_dtoa_r+0x2c4>
 800c00a:	3101      	adds	r1, #1
 800c00c:	6069      	str	r1, [r5, #4]
 800c00e:	0052      	lsls	r2, r2, #1
 800c010:	e7a3      	b.n	800bf5a <_dtoa_r+0x22a>
 800c012:	2301      	movs	r3, #1
 800c014:	421c      	tst	r4, r3
 800c016:	d00e      	beq.n	800c036 <_dtoa_r+0x306>
 800c018:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c01a:	4a21      	ldr	r2, [pc, #132]	; (800c0a0 <_dtoa_r+0x370>)
 800c01c:	3301      	adds	r3, #1
 800c01e:	930e      	str	r3, [sp, #56]	; 0x38
 800c020:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c022:	0028      	movs	r0, r5
 800c024:	00db      	lsls	r3, r3, #3
 800c026:	189b      	adds	r3, r3, r2
 800c028:	0031      	movs	r1, r6
 800c02a:	681a      	ldr	r2, [r3, #0]
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	f7f5 ff13 	bl	8001e58 <__aeabi_dmul>
 800c032:	0005      	movs	r5, r0
 800c034:	000e      	movs	r6, r1
 800c036:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c038:	1064      	asrs	r4, r4, #1
 800c03a:	3301      	adds	r3, #1
 800c03c:	9310      	str	r3, [sp, #64]	; 0x40
 800c03e:	2c00      	cmp	r4, #0
 800c040:	d1e7      	bne.n	800c012 <_dtoa_r+0x2e2>
 800c042:	9806      	ldr	r0, [sp, #24]
 800c044:	9907      	ldr	r1, [sp, #28]
 800c046:	002a      	movs	r2, r5
 800c048:	0033      	movs	r3, r6
 800c04a:	f7f5 fafb 	bl	8001644 <__aeabi_ddiv>
 800c04e:	9006      	str	r0, [sp, #24]
 800c050:	9107      	str	r1, [sp, #28]
 800c052:	e042      	b.n	800c0da <_dtoa_r+0x3aa>
 800c054:	7ff00000 	.word	0x7ff00000
 800c058:	0000270f 	.word	0x0000270f
 800c05c:	0800eaf1 	.word	0x0800eaf1
 800c060:	0800eaf4 	.word	0x0800eaf4
 800c064:	0800ea68 	.word	0x0800ea68
 800c068:	0800ea69 	.word	0x0800ea69
 800c06c:	3ff00000 	.word	0x3ff00000
 800c070:	fffffc01 	.word	0xfffffc01
 800c074:	3ff80000 	.word	0x3ff80000
 800c078:	636f4361 	.word	0x636f4361
 800c07c:	3fd287a7 	.word	0x3fd287a7
 800c080:	8b60c8b3 	.word	0x8b60c8b3
 800c084:	3fc68a28 	.word	0x3fc68a28
 800c088:	509f79fb 	.word	0x509f79fb
 800c08c:	3fd34413 	.word	0x3fd34413
 800c090:	0800eb90 	.word	0x0800eb90
 800c094:	00000432 	.word	0x00000432
 800c098:	00000412 	.word	0x00000412
 800c09c:	fe100000 	.word	0xfe100000
 800c0a0:	0800eb68 	.word	0x0800eb68
 800c0a4:	2302      	movs	r3, #2
 800c0a6:	930e      	str	r3, [sp, #56]	; 0x38
 800c0a8:	2f00      	cmp	r7, #0
 800c0aa:	d016      	beq.n	800c0da <_dtoa_r+0x3aa>
 800c0ac:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c0ae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c0b0:	427c      	negs	r4, r7
 800c0b2:	330d      	adds	r3, #13
 800c0b4:	4023      	ands	r3, r4
 800c0b6:	4ace      	ldr	r2, [pc, #824]	; (800c3f0 <_dtoa_r+0x6c0>)
 800c0b8:	00db      	lsls	r3, r3, #3
 800c0ba:	18d3      	adds	r3, r2, r3
 800c0bc:	681a      	ldr	r2, [r3, #0]
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	f7f5 feca 	bl	8001e58 <__aeabi_dmul>
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	2601      	movs	r6, #1
 800c0c8:	001d      	movs	r5, r3
 800c0ca:	9006      	str	r0, [sp, #24]
 800c0cc:	9107      	str	r1, [sp, #28]
 800c0ce:	1124      	asrs	r4, r4, #4
 800c0d0:	2c00      	cmp	r4, #0
 800c0d2:	d000      	beq.n	800c0d6 <_dtoa_r+0x3a6>
 800c0d4:	e08c      	b.n	800c1f0 <_dtoa_r+0x4c0>
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d1b9      	bne.n	800c04e <_dtoa_r+0x31e>
 800c0da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d100      	bne.n	800c0e2 <_dtoa_r+0x3b2>
 800c0e0:	e096      	b.n	800c210 <_dtoa_r+0x4e0>
 800c0e2:	9c06      	ldr	r4, [sp, #24]
 800c0e4:	9d07      	ldr	r5, [sp, #28]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	4bc2      	ldr	r3, [pc, #776]	; (800c3f4 <_dtoa_r+0x6c4>)
 800c0ea:	0020      	movs	r0, r4
 800c0ec:	0029      	movs	r1, r5
 800c0ee:	f7f4 f9a9 	bl	8000444 <__aeabi_dcmplt>
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	d100      	bne.n	800c0f8 <_dtoa_r+0x3c8>
 800c0f6:	e08b      	b.n	800c210 <_dtoa_r+0x4e0>
 800c0f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d100      	bne.n	800c100 <_dtoa_r+0x3d0>
 800c0fe:	e087      	b.n	800c210 <_dtoa_r+0x4e0>
 800c100:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c102:	2b00      	cmp	r3, #0
 800c104:	dd41      	ble.n	800c18a <_dtoa_r+0x45a>
 800c106:	4bbc      	ldr	r3, [pc, #752]	; (800c3f8 <_dtoa_r+0x6c8>)
 800c108:	2200      	movs	r2, #0
 800c10a:	0020      	movs	r0, r4
 800c10c:	0029      	movs	r1, r5
 800c10e:	f7f5 fea3 	bl	8001e58 <__aeabi_dmul>
 800c112:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c114:	9006      	str	r0, [sp, #24]
 800c116:	9107      	str	r1, [sp, #28]
 800c118:	3301      	adds	r3, #1
 800c11a:	930e      	str	r3, [sp, #56]	; 0x38
 800c11c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c11e:	1e7e      	subs	r6, r7, #1
 800c120:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c122:	9310      	str	r3, [sp, #64]	; 0x40
 800c124:	f7f6 fca4 	bl	8002a70 <__aeabi_i2d>
 800c128:	9a06      	ldr	r2, [sp, #24]
 800c12a:	9b07      	ldr	r3, [sp, #28]
 800c12c:	f7f5 fe94 	bl	8001e58 <__aeabi_dmul>
 800c130:	2200      	movs	r2, #0
 800c132:	4bb2      	ldr	r3, [pc, #712]	; (800c3fc <_dtoa_r+0x6cc>)
 800c134:	f7f4 ff6a 	bl	800100c <__aeabi_dadd>
 800c138:	4ab1      	ldr	r2, [pc, #708]	; (800c400 <_dtoa_r+0x6d0>)
 800c13a:	900e      	str	r0, [sp, #56]	; 0x38
 800c13c:	910f      	str	r1, [sp, #60]	; 0x3c
 800c13e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800c140:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c142:	4694      	mov	ip, r2
 800c144:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c146:	4463      	add	r3, ip
 800c148:	9315      	str	r3, [sp, #84]	; 0x54
 800c14a:	001d      	movs	r5, r3
 800c14c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d161      	bne.n	800c216 <_dtoa_r+0x4e6>
 800c152:	9806      	ldr	r0, [sp, #24]
 800c154:	9907      	ldr	r1, [sp, #28]
 800c156:	2200      	movs	r2, #0
 800c158:	4baa      	ldr	r3, [pc, #680]	; (800c404 <_dtoa_r+0x6d4>)
 800c15a:	f7f6 f8ef 	bl	800233c <__aeabi_dsub>
 800c15e:	0022      	movs	r2, r4
 800c160:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c162:	9006      	str	r0, [sp, #24]
 800c164:	9107      	str	r1, [sp, #28]
 800c166:	f7f4 f981 	bl	800046c <__aeabi_dcmpgt>
 800c16a:	2800      	cmp	r0, #0
 800c16c:	d000      	beq.n	800c170 <_dtoa_r+0x440>
 800c16e:	e2a8      	b.n	800c6c2 <_dtoa_r+0x992>
 800c170:	48a5      	ldr	r0, [pc, #660]	; (800c408 <_dtoa_r+0x6d8>)
 800c172:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c174:	4684      	mov	ip, r0
 800c176:	4461      	add	r1, ip
 800c178:	000b      	movs	r3, r1
 800c17a:	9806      	ldr	r0, [sp, #24]
 800c17c:	9907      	ldr	r1, [sp, #28]
 800c17e:	0022      	movs	r2, r4
 800c180:	f7f4 f960 	bl	8000444 <__aeabi_dcmplt>
 800c184:	2800      	cmp	r0, #0
 800c186:	d000      	beq.n	800c18a <_dtoa_r+0x45a>
 800c188:	e295      	b.n	800c6b6 <_dtoa_r+0x986>
 800c18a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c18c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c18e:	9306      	str	r3, [sp, #24]
 800c190:	9407      	str	r4, [sp, #28]
 800c192:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c194:	2b00      	cmp	r3, #0
 800c196:	da00      	bge.n	800c19a <_dtoa_r+0x46a>
 800c198:	e15c      	b.n	800c454 <_dtoa_r+0x724>
 800c19a:	2f0e      	cmp	r7, #14
 800c19c:	dd00      	ble.n	800c1a0 <_dtoa_r+0x470>
 800c19e:	e159      	b.n	800c454 <_dtoa_r+0x724>
 800c1a0:	4b93      	ldr	r3, [pc, #588]	; (800c3f0 <_dtoa_r+0x6c0>)
 800c1a2:	00fa      	lsls	r2, r7, #3
 800c1a4:	189b      	adds	r3, r3, r2
 800c1a6:	685c      	ldr	r4, [r3, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	9304      	str	r3, [sp, #16]
 800c1ac:	9405      	str	r4, [sp, #20]
 800c1ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	db00      	blt.n	800c1b6 <_dtoa_r+0x486>
 800c1b4:	e0d8      	b.n	800c368 <_dtoa_r+0x638>
 800c1b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	dd00      	ble.n	800c1be <_dtoa_r+0x48e>
 800c1bc:	e0d4      	b.n	800c368 <_dtoa_r+0x638>
 800c1be:	d000      	beq.n	800c1c2 <_dtoa_r+0x492>
 800c1c0:	e27d      	b.n	800c6be <_dtoa_r+0x98e>
 800c1c2:	9804      	ldr	r0, [sp, #16]
 800c1c4:	9905      	ldr	r1, [sp, #20]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	4b8e      	ldr	r3, [pc, #568]	; (800c404 <_dtoa_r+0x6d4>)
 800c1ca:	f7f5 fe45 	bl	8001e58 <__aeabi_dmul>
 800c1ce:	9a06      	ldr	r2, [sp, #24]
 800c1d0:	9b07      	ldr	r3, [sp, #28]
 800c1d2:	f7f4 f955 	bl	8000480 <__aeabi_dcmpge>
 800c1d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1d8:	9304      	str	r3, [sp, #16]
 800c1da:	001e      	movs	r6, r3
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	d000      	beq.n	800c1e2 <_dtoa_r+0x4b2>
 800c1e0:	e24f      	b.n	800c682 <_dtoa_r+0x952>
 800c1e2:	9b08      	ldr	r3, [sp, #32]
 800c1e4:	9a08      	ldr	r2, [sp, #32]
 800c1e6:	1c5d      	adds	r5, r3, #1
 800c1e8:	2331      	movs	r3, #49	; 0x31
 800c1ea:	3701      	adds	r7, #1
 800c1ec:	7013      	strb	r3, [r2, #0]
 800c1ee:	e24b      	b.n	800c688 <_dtoa_r+0x958>
 800c1f0:	4234      	tst	r4, r6
 800c1f2:	d00a      	beq.n	800c20a <_dtoa_r+0x4da>
 800c1f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1f6:	4a85      	ldr	r2, [pc, #532]	; (800c40c <_dtoa_r+0x6dc>)
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	930e      	str	r3, [sp, #56]	; 0x38
 800c1fc:	00eb      	lsls	r3, r5, #3
 800c1fe:	189b      	adds	r3, r3, r2
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	f7f5 fe28 	bl	8001e58 <__aeabi_dmul>
 800c208:	0033      	movs	r3, r6
 800c20a:	1064      	asrs	r4, r4, #1
 800c20c:	3501      	adds	r5, #1
 800c20e:	e75f      	b.n	800c0d0 <_dtoa_r+0x3a0>
 800c210:	003e      	movs	r6, r7
 800c212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c214:	e784      	b.n	800c120 <_dtoa_r+0x3f0>
 800c216:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c218:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c21a:	1e5a      	subs	r2, r3, #1
 800c21c:	4b74      	ldr	r3, [pc, #464]	; (800c3f0 <_dtoa_r+0x6c0>)
 800c21e:	00d2      	lsls	r2, r2, #3
 800c220:	189b      	adds	r3, r3, r2
 800c222:	681a      	ldr	r2, [r3, #0]
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	2900      	cmp	r1, #0
 800c228:	d049      	beq.n	800c2be <_dtoa_r+0x58e>
 800c22a:	2000      	movs	r0, #0
 800c22c:	4978      	ldr	r1, [pc, #480]	; (800c410 <_dtoa_r+0x6e0>)
 800c22e:	f7f5 fa09 	bl	8001644 <__aeabi_ddiv>
 800c232:	002b      	movs	r3, r5
 800c234:	0022      	movs	r2, r4
 800c236:	f7f6 f881 	bl	800233c <__aeabi_dsub>
 800c23a:	9b08      	ldr	r3, [sp, #32]
 800c23c:	900e      	str	r0, [sp, #56]	; 0x38
 800c23e:	910f      	str	r1, [sp, #60]	; 0x3c
 800c240:	9315      	str	r3, [sp, #84]	; 0x54
 800c242:	9806      	ldr	r0, [sp, #24]
 800c244:	9907      	ldr	r1, [sp, #28]
 800c246:	f7f6 fbdd 	bl	8002a04 <__aeabi_d2iz>
 800c24a:	0004      	movs	r4, r0
 800c24c:	f7f6 fc10 	bl	8002a70 <__aeabi_i2d>
 800c250:	0002      	movs	r2, r0
 800c252:	000b      	movs	r3, r1
 800c254:	9806      	ldr	r0, [sp, #24]
 800c256:	9907      	ldr	r1, [sp, #28]
 800c258:	f7f6 f870 	bl	800233c <__aeabi_dsub>
 800c25c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c25e:	3430      	adds	r4, #48	; 0x30
 800c260:	1c5d      	adds	r5, r3, #1
 800c262:	701c      	strb	r4, [r3, #0]
 800c264:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c266:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c268:	9006      	str	r0, [sp, #24]
 800c26a:	9107      	str	r1, [sp, #28]
 800c26c:	f7f4 f8ea 	bl	8000444 <__aeabi_dcmplt>
 800c270:	2800      	cmp	r0, #0
 800c272:	d16c      	bne.n	800c34e <_dtoa_r+0x61e>
 800c274:	9a06      	ldr	r2, [sp, #24]
 800c276:	9b07      	ldr	r3, [sp, #28]
 800c278:	2000      	movs	r0, #0
 800c27a:	495e      	ldr	r1, [pc, #376]	; (800c3f4 <_dtoa_r+0x6c4>)
 800c27c:	f7f6 f85e 	bl	800233c <__aeabi_dsub>
 800c280:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c282:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c284:	f7f4 f8de 	bl	8000444 <__aeabi_dcmplt>
 800c288:	2800      	cmp	r0, #0
 800c28a:	d000      	beq.n	800c28e <_dtoa_r+0x55e>
 800c28c:	e0c3      	b.n	800c416 <_dtoa_r+0x6e6>
 800c28e:	9b08      	ldr	r3, [sp, #32]
 800c290:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c292:	1aeb      	subs	r3, r5, r3
 800c294:	429a      	cmp	r2, r3
 800c296:	dc00      	bgt.n	800c29a <_dtoa_r+0x56a>
 800c298:	e777      	b.n	800c18a <_dtoa_r+0x45a>
 800c29a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c29c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c29e:	2200      	movs	r2, #0
 800c2a0:	4b55      	ldr	r3, [pc, #340]	; (800c3f8 <_dtoa_r+0x6c8>)
 800c2a2:	f7f5 fdd9 	bl	8001e58 <__aeabi_dmul>
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	900e      	str	r0, [sp, #56]	; 0x38
 800c2aa:	910f      	str	r1, [sp, #60]	; 0x3c
 800c2ac:	9806      	ldr	r0, [sp, #24]
 800c2ae:	9907      	ldr	r1, [sp, #28]
 800c2b0:	4b51      	ldr	r3, [pc, #324]	; (800c3f8 <_dtoa_r+0x6c8>)
 800c2b2:	f7f5 fdd1 	bl	8001e58 <__aeabi_dmul>
 800c2b6:	9515      	str	r5, [sp, #84]	; 0x54
 800c2b8:	9006      	str	r0, [sp, #24]
 800c2ba:	9107      	str	r1, [sp, #28]
 800c2bc:	e7c1      	b.n	800c242 <_dtoa_r+0x512>
 800c2be:	0020      	movs	r0, r4
 800c2c0:	0029      	movs	r1, r5
 800c2c2:	f7f5 fdc9 	bl	8001e58 <__aeabi_dmul>
 800c2c6:	9c08      	ldr	r4, [sp, #32]
 800c2c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c2ca:	0023      	movs	r3, r4
 800c2cc:	4694      	mov	ip, r2
 800c2ce:	900e      	str	r0, [sp, #56]	; 0x38
 800c2d0:	910f      	str	r1, [sp, #60]	; 0x3c
 800c2d2:	4463      	add	r3, ip
 800c2d4:	9315      	str	r3, [sp, #84]	; 0x54
 800c2d6:	9806      	ldr	r0, [sp, #24]
 800c2d8:	9907      	ldr	r1, [sp, #28]
 800c2da:	f7f6 fb93 	bl	8002a04 <__aeabi_d2iz>
 800c2de:	0005      	movs	r5, r0
 800c2e0:	f7f6 fbc6 	bl	8002a70 <__aeabi_i2d>
 800c2e4:	000b      	movs	r3, r1
 800c2e6:	0002      	movs	r2, r0
 800c2e8:	9806      	ldr	r0, [sp, #24]
 800c2ea:	9907      	ldr	r1, [sp, #28]
 800c2ec:	f7f6 f826 	bl	800233c <__aeabi_dsub>
 800c2f0:	3530      	adds	r5, #48	; 0x30
 800c2f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c2f4:	7025      	strb	r5, [r4, #0]
 800c2f6:	3401      	adds	r4, #1
 800c2f8:	9006      	str	r0, [sp, #24]
 800c2fa:	9107      	str	r1, [sp, #28]
 800c2fc:	42a3      	cmp	r3, r4
 800c2fe:	d12a      	bne.n	800c356 <_dtoa_r+0x626>
 800c300:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c302:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c304:	9a08      	ldr	r2, [sp, #32]
 800c306:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c308:	4694      	mov	ip, r2
 800c30a:	4463      	add	r3, ip
 800c30c:	2200      	movs	r2, #0
 800c30e:	001d      	movs	r5, r3
 800c310:	4b3f      	ldr	r3, [pc, #252]	; (800c410 <_dtoa_r+0x6e0>)
 800c312:	f7f4 fe7b 	bl	800100c <__aeabi_dadd>
 800c316:	0002      	movs	r2, r0
 800c318:	000b      	movs	r3, r1
 800c31a:	9806      	ldr	r0, [sp, #24]
 800c31c:	9907      	ldr	r1, [sp, #28]
 800c31e:	f7f4 f8a5 	bl	800046c <__aeabi_dcmpgt>
 800c322:	2800      	cmp	r0, #0
 800c324:	d000      	beq.n	800c328 <_dtoa_r+0x5f8>
 800c326:	e076      	b.n	800c416 <_dtoa_r+0x6e6>
 800c328:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c32a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c32c:	2000      	movs	r0, #0
 800c32e:	4938      	ldr	r1, [pc, #224]	; (800c410 <_dtoa_r+0x6e0>)
 800c330:	f7f6 f804 	bl	800233c <__aeabi_dsub>
 800c334:	0002      	movs	r2, r0
 800c336:	000b      	movs	r3, r1
 800c338:	9806      	ldr	r0, [sp, #24]
 800c33a:	9907      	ldr	r1, [sp, #28]
 800c33c:	f7f4 f882 	bl	8000444 <__aeabi_dcmplt>
 800c340:	2800      	cmp	r0, #0
 800c342:	d100      	bne.n	800c346 <_dtoa_r+0x616>
 800c344:	e721      	b.n	800c18a <_dtoa_r+0x45a>
 800c346:	1e6b      	subs	r3, r5, #1
 800c348:	781a      	ldrb	r2, [r3, #0]
 800c34a:	2a30      	cmp	r2, #48	; 0x30
 800c34c:	d001      	beq.n	800c352 <_dtoa_r+0x622>
 800c34e:	0037      	movs	r7, r6
 800c350:	e03f      	b.n	800c3d2 <_dtoa_r+0x6a2>
 800c352:	001d      	movs	r5, r3
 800c354:	e7f7      	b.n	800c346 <_dtoa_r+0x616>
 800c356:	9806      	ldr	r0, [sp, #24]
 800c358:	9907      	ldr	r1, [sp, #28]
 800c35a:	2200      	movs	r2, #0
 800c35c:	4b26      	ldr	r3, [pc, #152]	; (800c3f8 <_dtoa_r+0x6c8>)
 800c35e:	f7f5 fd7b 	bl	8001e58 <__aeabi_dmul>
 800c362:	9006      	str	r0, [sp, #24]
 800c364:	9107      	str	r1, [sp, #28]
 800c366:	e7b6      	b.n	800c2d6 <_dtoa_r+0x5a6>
 800c368:	9e08      	ldr	r6, [sp, #32]
 800c36a:	9a04      	ldr	r2, [sp, #16]
 800c36c:	9b05      	ldr	r3, [sp, #20]
 800c36e:	9806      	ldr	r0, [sp, #24]
 800c370:	9907      	ldr	r1, [sp, #28]
 800c372:	f7f5 f967 	bl	8001644 <__aeabi_ddiv>
 800c376:	f7f6 fb45 	bl	8002a04 <__aeabi_d2iz>
 800c37a:	0004      	movs	r4, r0
 800c37c:	f7f6 fb78 	bl	8002a70 <__aeabi_i2d>
 800c380:	9a04      	ldr	r2, [sp, #16]
 800c382:	9b05      	ldr	r3, [sp, #20]
 800c384:	f7f5 fd68 	bl	8001e58 <__aeabi_dmul>
 800c388:	0002      	movs	r2, r0
 800c38a:	000b      	movs	r3, r1
 800c38c:	9806      	ldr	r0, [sp, #24]
 800c38e:	9907      	ldr	r1, [sp, #28]
 800c390:	f7f5 ffd4 	bl	800233c <__aeabi_dsub>
 800c394:	0023      	movs	r3, r4
 800c396:	3330      	adds	r3, #48	; 0x30
 800c398:	7033      	strb	r3, [r6, #0]
 800c39a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c39c:	9b08      	ldr	r3, [sp, #32]
 800c39e:	1c75      	adds	r5, r6, #1
 800c3a0:	1aeb      	subs	r3, r5, r3
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d148      	bne.n	800c438 <_dtoa_r+0x708>
 800c3a6:	0002      	movs	r2, r0
 800c3a8:	000b      	movs	r3, r1
 800c3aa:	f7f4 fe2f 	bl	800100c <__aeabi_dadd>
 800c3ae:	9a04      	ldr	r2, [sp, #16]
 800c3b0:	9b05      	ldr	r3, [sp, #20]
 800c3b2:	9006      	str	r0, [sp, #24]
 800c3b4:	9107      	str	r1, [sp, #28]
 800c3b6:	f7f4 f859 	bl	800046c <__aeabi_dcmpgt>
 800c3ba:	2800      	cmp	r0, #0
 800c3bc:	d12a      	bne.n	800c414 <_dtoa_r+0x6e4>
 800c3be:	9a04      	ldr	r2, [sp, #16]
 800c3c0:	9b05      	ldr	r3, [sp, #20]
 800c3c2:	9806      	ldr	r0, [sp, #24]
 800c3c4:	9907      	ldr	r1, [sp, #28]
 800c3c6:	f7f4 f837 	bl	8000438 <__aeabi_dcmpeq>
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	d001      	beq.n	800c3d2 <_dtoa_r+0x6a2>
 800c3ce:	07e3      	lsls	r3, r4, #31
 800c3d0:	d420      	bmi.n	800c414 <_dtoa_r+0x6e4>
 800c3d2:	9903      	ldr	r1, [sp, #12]
 800c3d4:	9802      	ldr	r0, [sp, #8]
 800c3d6:	f001 f824 	bl	800d422 <_Bfree>
 800c3da:	2300      	movs	r3, #0
 800c3dc:	702b      	strb	r3, [r5, #0]
 800c3de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c3e0:	3701      	adds	r7, #1
 800c3e2:	601f      	str	r7, [r3, #0]
 800c3e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d100      	bne.n	800c3ec <_dtoa_r+0x6bc>
 800c3ea:	e4e6      	b.n	800bdba <_dtoa_r+0x8a>
 800c3ec:	601d      	str	r5, [r3, #0]
 800c3ee:	e4e4      	b.n	800bdba <_dtoa_r+0x8a>
 800c3f0:	0800eb90 	.word	0x0800eb90
 800c3f4:	3ff00000 	.word	0x3ff00000
 800c3f8:	40240000 	.word	0x40240000
 800c3fc:	401c0000 	.word	0x401c0000
 800c400:	fcc00000 	.word	0xfcc00000
 800c404:	40140000 	.word	0x40140000
 800c408:	7cc00000 	.word	0x7cc00000
 800c40c:	0800eb68 	.word	0x0800eb68
 800c410:	3fe00000 	.word	0x3fe00000
 800c414:	003e      	movs	r6, r7
 800c416:	1e6b      	subs	r3, r5, #1
 800c418:	781a      	ldrb	r2, [r3, #0]
 800c41a:	2a39      	cmp	r2, #57	; 0x39
 800c41c:	d106      	bne.n	800c42c <_dtoa_r+0x6fc>
 800c41e:	9a08      	ldr	r2, [sp, #32]
 800c420:	429a      	cmp	r2, r3
 800c422:	d107      	bne.n	800c434 <_dtoa_r+0x704>
 800c424:	2330      	movs	r3, #48	; 0x30
 800c426:	7013      	strb	r3, [r2, #0]
 800c428:	0013      	movs	r3, r2
 800c42a:	3601      	adds	r6, #1
 800c42c:	781a      	ldrb	r2, [r3, #0]
 800c42e:	3201      	adds	r2, #1
 800c430:	701a      	strb	r2, [r3, #0]
 800c432:	e78c      	b.n	800c34e <_dtoa_r+0x61e>
 800c434:	001d      	movs	r5, r3
 800c436:	e7ee      	b.n	800c416 <_dtoa_r+0x6e6>
 800c438:	2200      	movs	r2, #0
 800c43a:	4ba4      	ldr	r3, [pc, #656]	; (800c6cc <_dtoa_r+0x99c>)
 800c43c:	f7f5 fd0c 	bl	8001e58 <__aeabi_dmul>
 800c440:	2200      	movs	r2, #0
 800c442:	2300      	movs	r3, #0
 800c444:	9006      	str	r0, [sp, #24]
 800c446:	9107      	str	r1, [sp, #28]
 800c448:	002e      	movs	r6, r5
 800c44a:	f7f3 fff5 	bl	8000438 <__aeabi_dcmpeq>
 800c44e:	2800      	cmp	r0, #0
 800c450:	d08b      	beq.n	800c36a <_dtoa_r+0x63a>
 800c452:	e7be      	b.n	800c3d2 <_dtoa_r+0x6a2>
 800c454:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c456:	2a00      	cmp	r2, #0
 800c458:	d100      	bne.n	800c45c <_dtoa_r+0x72c>
 800c45a:	e0da      	b.n	800c612 <_dtoa_r+0x8e2>
 800c45c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c45e:	2a01      	cmp	r2, #1
 800c460:	dd00      	ble.n	800c464 <_dtoa_r+0x734>
 800c462:	e0bd      	b.n	800c5e0 <_dtoa_r+0x8b0>
 800c464:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c466:	2a00      	cmp	r2, #0
 800c468:	d100      	bne.n	800c46c <_dtoa_r+0x73c>
 800c46a:	e0b5      	b.n	800c5d8 <_dtoa_r+0x8a8>
 800c46c:	4a98      	ldr	r2, [pc, #608]	; (800c6d0 <_dtoa_r+0x9a0>)
 800c46e:	189b      	adds	r3, r3, r2
 800c470:	9d04      	ldr	r5, [sp, #16]
 800c472:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c474:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c476:	2101      	movs	r1, #1
 800c478:	18d2      	adds	r2, r2, r3
 800c47a:	920a      	str	r2, [sp, #40]	; 0x28
 800c47c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c47e:	9802      	ldr	r0, [sp, #8]
 800c480:	18d3      	adds	r3, r2, r3
 800c482:	930b      	str	r3, [sp, #44]	; 0x2c
 800c484:	f001 f8ab 	bl	800d5de <__i2b>
 800c488:	0006      	movs	r6, r0
 800c48a:	2c00      	cmp	r4, #0
 800c48c:	dd0e      	ble.n	800c4ac <_dtoa_r+0x77c>
 800c48e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c490:	2b00      	cmp	r3, #0
 800c492:	dd0b      	ble.n	800c4ac <_dtoa_r+0x77c>
 800c494:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c496:	0023      	movs	r3, r4
 800c498:	4294      	cmp	r4, r2
 800c49a:	dd00      	ble.n	800c49e <_dtoa_r+0x76e>
 800c49c:	0013      	movs	r3, r2
 800c49e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4a0:	1ae4      	subs	r4, r4, r3
 800c4a2:	1ad2      	subs	r2, r2, r3
 800c4a4:	920a      	str	r2, [sp, #40]	; 0x28
 800c4a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c4a8:	1ad3      	subs	r3, r2, r3
 800c4aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800c4ac:	9b04      	ldr	r3, [sp, #16]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d01f      	beq.n	800c4f2 <_dtoa_r+0x7c2>
 800c4b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d100      	bne.n	800c4ba <_dtoa_r+0x78a>
 800c4b8:	e0af      	b.n	800c61a <_dtoa_r+0x8ea>
 800c4ba:	2d00      	cmp	r5, #0
 800c4bc:	d011      	beq.n	800c4e2 <_dtoa_r+0x7b2>
 800c4be:	0031      	movs	r1, r6
 800c4c0:	002a      	movs	r2, r5
 800c4c2:	9802      	ldr	r0, [sp, #8]
 800c4c4:	f001 f924 	bl	800d710 <__pow5mult>
 800c4c8:	9a03      	ldr	r2, [sp, #12]
 800c4ca:	0001      	movs	r1, r0
 800c4cc:	0006      	movs	r6, r0
 800c4ce:	9802      	ldr	r0, [sp, #8]
 800c4d0:	f001 f88e 	bl	800d5f0 <__multiply>
 800c4d4:	9903      	ldr	r1, [sp, #12]
 800c4d6:	9010      	str	r0, [sp, #64]	; 0x40
 800c4d8:	9802      	ldr	r0, [sp, #8]
 800c4da:	f000 ffa2 	bl	800d422 <_Bfree>
 800c4de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c4e0:	9303      	str	r3, [sp, #12]
 800c4e2:	9b04      	ldr	r3, [sp, #16]
 800c4e4:	1b5a      	subs	r2, r3, r5
 800c4e6:	d004      	beq.n	800c4f2 <_dtoa_r+0x7c2>
 800c4e8:	9903      	ldr	r1, [sp, #12]
 800c4ea:	9802      	ldr	r0, [sp, #8]
 800c4ec:	f001 f910 	bl	800d710 <__pow5mult>
 800c4f0:	9003      	str	r0, [sp, #12]
 800c4f2:	2101      	movs	r1, #1
 800c4f4:	9802      	ldr	r0, [sp, #8]
 800c4f6:	f001 f872 	bl	800d5de <__i2b>
 800c4fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4fc:	9004      	str	r0, [sp, #16]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d100      	bne.n	800c504 <_dtoa_r+0x7d4>
 800c502:	e1e3      	b.n	800c8cc <_dtoa_r+0xb9c>
 800c504:	001a      	movs	r2, r3
 800c506:	0001      	movs	r1, r0
 800c508:	9802      	ldr	r0, [sp, #8]
 800c50a:	f001 f901 	bl	800d710 <__pow5mult>
 800c50e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c510:	9004      	str	r0, [sp, #16]
 800c512:	2b01      	cmp	r3, #1
 800c514:	dd00      	ble.n	800c518 <_dtoa_r+0x7e8>
 800c516:	e082      	b.n	800c61e <_dtoa_r+0x8ee>
 800c518:	2500      	movs	r5, #0
 800c51a:	9b06      	ldr	r3, [sp, #24]
 800c51c:	42ab      	cmp	r3, r5
 800c51e:	d10e      	bne.n	800c53e <_dtoa_r+0x80e>
 800c520:	9b07      	ldr	r3, [sp, #28]
 800c522:	031b      	lsls	r3, r3, #12
 800c524:	42ab      	cmp	r3, r5
 800c526:	d10a      	bne.n	800c53e <_dtoa_r+0x80e>
 800c528:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c52a:	9a07      	ldr	r2, [sp, #28]
 800c52c:	4213      	tst	r3, r2
 800c52e:	d006      	beq.n	800c53e <_dtoa_r+0x80e>
 800c530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c532:	3501      	adds	r5, #1
 800c534:	3301      	adds	r3, #1
 800c536:	930a      	str	r3, [sp, #40]	; 0x28
 800c538:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c53a:	3301      	adds	r3, #1
 800c53c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c53e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c540:	2001      	movs	r0, #1
 800c542:	2b00      	cmp	r3, #0
 800c544:	d16c      	bne.n	800c620 <_dtoa_r+0x8f0>
 800c546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c548:	1818      	adds	r0, r3, r0
 800c54a:	231f      	movs	r3, #31
 800c54c:	4018      	ands	r0, r3
 800c54e:	d07e      	beq.n	800c64e <_dtoa_r+0x91e>
 800c550:	3301      	adds	r3, #1
 800c552:	1a1b      	subs	r3, r3, r0
 800c554:	2b04      	cmp	r3, #4
 800c556:	dd70      	ble.n	800c63a <_dtoa_r+0x90a>
 800c558:	231c      	movs	r3, #28
 800c55a:	1a18      	subs	r0, r3, r0
 800c55c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c55e:	1824      	adds	r4, r4, r0
 800c560:	181b      	adds	r3, r3, r0
 800c562:	930a      	str	r3, [sp, #40]	; 0x28
 800c564:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c566:	181b      	adds	r3, r3, r0
 800c568:	930b      	str	r3, [sp, #44]	; 0x2c
 800c56a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	dd05      	ble.n	800c57c <_dtoa_r+0x84c>
 800c570:	001a      	movs	r2, r3
 800c572:	9903      	ldr	r1, [sp, #12]
 800c574:	9802      	ldr	r0, [sp, #8]
 800c576:	f001 f91d 	bl	800d7b4 <__lshift>
 800c57a:	9003      	str	r0, [sp, #12]
 800c57c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c57e:	2b00      	cmp	r3, #0
 800c580:	dd05      	ble.n	800c58e <_dtoa_r+0x85e>
 800c582:	001a      	movs	r2, r3
 800c584:	9904      	ldr	r1, [sp, #16]
 800c586:	9802      	ldr	r0, [sp, #8]
 800c588:	f001 f914 	bl	800d7b4 <__lshift>
 800c58c:	9004      	str	r0, [sp, #16]
 800c58e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c590:	2b00      	cmp	r3, #0
 800c592:	d05e      	beq.n	800c652 <_dtoa_r+0x922>
 800c594:	9904      	ldr	r1, [sp, #16]
 800c596:	9803      	ldr	r0, [sp, #12]
 800c598:	f001 f95e 	bl	800d858 <__mcmp>
 800c59c:	2800      	cmp	r0, #0
 800c59e:	da58      	bge.n	800c652 <_dtoa_r+0x922>
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	220a      	movs	r2, #10
 800c5a4:	9903      	ldr	r1, [sp, #12]
 800c5a6:	9802      	ldr	r0, [sp, #8]
 800c5a8:	f000 ff54 	bl	800d454 <__multadd>
 800c5ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5ae:	3f01      	subs	r7, #1
 800c5b0:	9003      	str	r0, [sp, #12]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d100      	bne.n	800c5b8 <_dtoa_r+0x888>
 800c5b6:	e190      	b.n	800c8da <_dtoa_r+0xbaa>
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	0031      	movs	r1, r6
 800c5bc:	220a      	movs	r2, #10
 800c5be:	9802      	ldr	r0, [sp, #8]
 800c5c0:	f000 ff48 	bl	800d454 <__multadd>
 800c5c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5c6:	0006      	movs	r6, r0
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	dd00      	ble.n	800c5ce <_dtoa_r+0x89e>
 800c5cc:	e088      	b.n	800c6e0 <_dtoa_r+0x9b0>
 800c5ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c5d0:	2b02      	cmp	r3, #2
 800c5d2:	dc00      	bgt.n	800c5d6 <_dtoa_r+0x8a6>
 800c5d4:	e084      	b.n	800c6e0 <_dtoa_r+0x9b0>
 800c5d6:	e044      	b.n	800c662 <_dtoa_r+0x932>
 800c5d8:	2336      	movs	r3, #54	; 0x36
 800c5da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c5dc:	1a9b      	subs	r3, r3, r2
 800c5de:	e747      	b.n	800c470 <_dtoa_r+0x740>
 800c5e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5e2:	1e5d      	subs	r5, r3, #1
 800c5e4:	9b04      	ldr	r3, [sp, #16]
 800c5e6:	42ab      	cmp	r3, r5
 800c5e8:	db08      	blt.n	800c5fc <_dtoa_r+0x8cc>
 800c5ea:	1b5d      	subs	r5, r3, r5
 800c5ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	da0c      	bge.n	800c60c <_dtoa_r+0x8dc>
 800c5f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5f6:	1a9c      	subs	r4, r3, r2
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	e73b      	b.n	800c474 <_dtoa_r+0x744>
 800c5fc:	9b04      	ldr	r3, [sp, #16]
 800c5fe:	9504      	str	r5, [sp, #16]
 800c600:	1aea      	subs	r2, r5, r3
 800c602:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c604:	2500      	movs	r5, #0
 800c606:	189b      	adds	r3, r3, r2
 800c608:	9311      	str	r3, [sp, #68]	; 0x44
 800c60a:	e7ef      	b.n	800c5ec <_dtoa_r+0x8bc>
 800c60c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c60e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c610:	e730      	b.n	800c474 <_dtoa_r+0x744>
 800c612:	9d04      	ldr	r5, [sp, #16]
 800c614:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c616:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800c618:	e737      	b.n	800c48a <_dtoa_r+0x75a>
 800c61a:	9a04      	ldr	r2, [sp, #16]
 800c61c:	e764      	b.n	800c4e8 <_dtoa_r+0x7b8>
 800c61e:	2500      	movs	r5, #0
 800c620:	9b04      	ldr	r3, [sp, #16]
 800c622:	9a04      	ldr	r2, [sp, #16]
 800c624:	691b      	ldr	r3, [r3, #16]
 800c626:	9310      	str	r3, [sp, #64]	; 0x40
 800c628:	3303      	adds	r3, #3
 800c62a:	009b      	lsls	r3, r3, #2
 800c62c:	18d3      	adds	r3, r2, r3
 800c62e:	6858      	ldr	r0, [r3, #4]
 800c630:	f000 ff8c 	bl	800d54c <__hi0bits>
 800c634:	2320      	movs	r3, #32
 800c636:	1a18      	subs	r0, r3, r0
 800c638:	e785      	b.n	800c546 <_dtoa_r+0x816>
 800c63a:	2b04      	cmp	r3, #4
 800c63c:	d095      	beq.n	800c56a <_dtoa_r+0x83a>
 800c63e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c640:	331c      	adds	r3, #28
 800c642:	18d2      	adds	r2, r2, r3
 800c644:	920a      	str	r2, [sp, #40]	; 0x28
 800c646:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c648:	18e4      	adds	r4, r4, r3
 800c64a:	18d3      	adds	r3, r2, r3
 800c64c:	e78c      	b.n	800c568 <_dtoa_r+0x838>
 800c64e:	0003      	movs	r3, r0
 800c650:	e7f5      	b.n	800c63e <_dtoa_r+0x90e>
 800c652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c654:	2b00      	cmp	r3, #0
 800c656:	dc3d      	bgt.n	800c6d4 <_dtoa_r+0x9a4>
 800c658:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c65a:	2b02      	cmp	r3, #2
 800c65c:	dd3a      	ble.n	800c6d4 <_dtoa_r+0x9a4>
 800c65e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c660:	930c      	str	r3, [sp, #48]	; 0x30
 800c662:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c664:	2b00      	cmp	r3, #0
 800c666:	d10c      	bne.n	800c682 <_dtoa_r+0x952>
 800c668:	9904      	ldr	r1, [sp, #16]
 800c66a:	2205      	movs	r2, #5
 800c66c:	9802      	ldr	r0, [sp, #8]
 800c66e:	f000 fef1 	bl	800d454 <__multadd>
 800c672:	9004      	str	r0, [sp, #16]
 800c674:	0001      	movs	r1, r0
 800c676:	9803      	ldr	r0, [sp, #12]
 800c678:	f001 f8ee 	bl	800d858 <__mcmp>
 800c67c:	2800      	cmp	r0, #0
 800c67e:	dd00      	ble.n	800c682 <_dtoa_r+0x952>
 800c680:	e5af      	b.n	800c1e2 <_dtoa_r+0x4b2>
 800c682:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c684:	9d08      	ldr	r5, [sp, #32]
 800c686:	43df      	mvns	r7, r3
 800c688:	2300      	movs	r3, #0
 800c68a:	9309      	str	r3, [sp, #36]	; 0x24
 800c68c:	9904      	ldr	r1, [sp, #16]
 800c68e:	9802      	ldr	r0, [sp, #8]
 800c690:	f000 fec7 	bl	800d422 <_Bfree>
 800c694:	2e00      	cmp	r6, #0
 800c696:	d100      	bne.n	800c69a <_dtoa_r+0x96a>
 800c698:	e69b      	b.n	800c3d2 <_dtoa_r+0x6a2>
 800c69a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d005      	beq.n	800c6ac <_dtoa_r+0x97c>
 800c6a0:	42b3      	cmp	r3, r6
 800c6a2:	d003      	beq.n	800c6ac <_dtoa_r+0x97c>
 800c6a4:	0019      	movs	r1, r3
 800c6a6:	9802      	ldr	r0, [sp, #8]
 800c6a8:	f000 febb 	bl	800d422 <_Bfree>
 800c6ac:	0031      	movs	r1, r6
 800c6ae:	9802      	ldr	r0, [sp, #8]
 800c6b0:	f000 feb7 	bl	800d422 <_Bfree>
 800c6b4:	e68d      	b.n	800c3d2 <_dtoa_r+0x6a2>
 800c6b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c6b8:	9304      	str	r3, [sp, #16]
 800c6ba:	001e      	movs	r6, r3
 800c6bc:	e7e1      	b.n	800c682 <_dtoa_r+0x952>
 800c6be:	2300      	movs	r3, #0
 800c6c0:	e7fa      	b.n	800c6b8 <_dtoa_r+0x988>
 800c6c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c6c4:	0037      	movs	r7, r6
 800c6c6:	9304      	str	r3, [sp, #16]
 800c6c8:	001e      	movs	r6, r3
 800c6ca:	e58a      	b.n	800c1e2 <_dtoa_r+0x4b2>
 800c6cc:	40240000 	.word	0x40240000
 800c6d0:	00000433 	.word	0x00000433
 800c6d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d100      	bne.n	800c6dc <_dtoa_r+0x9ac>
 800c6da:	e0b2      	b.n	800c842 <_dtoa_r+0xb12>
 800c6dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6de:	930c      	str	r3, [sp, #48]	; 0x30
 800c6e0:	2c00      	cmp	r4, #0
 800c6e2:	dd05      	ble.n	800c6f0 <_dtoa_r+0x9c0>
 800c6e4:	0031      	movs	r1, r6
 800c6e6:	0022      	movs	r2, r4
 800c6e8:	9802      	ldr	r0, [sp, #8]
 800c6ea:	f001 f863 	bl	800d7b4 <__lshift>
 800c6ee:	0006      	movs	r6, r0
 800c6f0:	0030      	movs	r0, r6
 800c6f2:	2d00      	cmp	r5, #0
 800c6f4:	d011      	beq.n	800c71a <_dtoa_r+0x9ea>
 800c6f6:	6871      	ldr	r1, [r6, #4]
 800c6f8:	9802      	ldr	r0, [sp, #8]
 800c6fa:	f000 fe5a 	bl	800d3b2 <_Balloc>
 800c6fe:	0031      	movs	r1, r6
 800c700:	0004      	movs	r4, r0
 800c702:	6933      	ldr	r3, [r6, #16]
 800c704:	310c      	adds	r1, #12
 800c706:	1c9a      	adds	r2, r3, #2
 800c708:	0092      	lsls	r2, r2, #2
 800c70a:	300c      	adds	r0, #12
 800c70c:	f7fd fbc9 	bl	8009ea2 <memcpy>
 800c710:	2201      	movs	r2, #1
 800c712:	0021      	movs	r1, r4
 800c714:	9802      	ldr	r0, [sp, #8]
 800c716:	f001 f84d 	bl	800d7b4 <__lshift>
 800c71a:	9609      	str	r6, [sp, #36]	; 0x24
 800c71c:	0006      	movs	r6, r0
 800c71e:	9b08      	ldr	r3, [sp, #32]
 800c720:	930a      	str	r3, [sp, #40]	; 0x28
 800c722:	9904      	ldr	r1, [sp, #16]
 800c724:	9803      	ldr	r0, [sp, #12]
 800c726:	f7ff fa7d 	bl	800bc24 <quorem>
 800c72a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c72c:	900d      	str	r0, [sp, #52]	; 0x34
 800c72e:	0004      	movs	r4, r0
 800c730:	9803      	ldr	r0, [sp, #12]
 800c732:	f001 f891 	bl	800d858 <__mcmp>
 800c736:	0032      	movs	r2, r6
 800c738:	9010      	str	r0, [sp, #64]	; 0x40
 800c73a:	9904      	ldr	r1, [sp, #16]
 800c73c:	9802      	ldr	r0, [sp, #8]
 800c73e:	f001 f8a5 	bl	800d88c <__mdiff>
 800c742:	2301      	movs	r3, #1
 800c744:	930b      	str	r3, [sp, #44]	; 0x2c
 800c746:	68c3      	ldr	r3, [r0, #12]
 800c748:	3430      	adds	r4, #48	; 0x30
 800c74a:	0005      	movs	r5, r0
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d104      	bne.n	800c75a <_dtoa_r+0xa2a>
 800c750:	0001      	movs	r1, r0
 800c752:	9803      	ldr	r0, [sp, #12]
 800c754:	f001 f880 	bl	800d858 <__mcmp>
 800c758:	900b      	str	r0, [sp, #44]	; 0x2c
 800c75a:	0029      	movs	r1, r5
 800c75c:	9802      	ldr	r0, [sp, #8]
 800c75e:	f000 fe60 	bl	800d422 <_Bfree>
 800c762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c764:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c766:	4313      	orrs	r3, r2
 800c768:	d10e      	bne.n	800c788 <_dtoa_r+0xa58>
 800c76a:	9a06      	ldr	r2, [sp, #24]
 800c76c:	3301      	adds	r3, #1
 800c76e:	4213      	tst	r3, r2
 800c770:	d10a      	bne.n	800c788 <_dtoa_r+0xa58>
 800c772:	2c39      	cmp	r4, #57	; 0x39
 800c774:	d026      	beq.n	800c7c4 <_dtoa_r+0xa94>
 800c776:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c778:	2b00      	cmp	r3, #0
 800c77a:	dd01      	ble.n	800c780 <_dtoa_r+0xa50>
 800c77c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800c77e:	3431      	adds	r4, #49	; 0x31
 800c780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c782:	1c5d      	adds	r5, r3, #1
 800c784:	701c      	strb	r4, [r3, #0]
 800c786:	e781      	b.n	800c68c <_dtoa_r+0x95c>
 800c788:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	db07      	blt.n	800c79e <_dtoa_r+0xa6e>
 800c78e:	001d      	movs	r5, r3
 800c790:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c792:	431d      	orrs	r5, r3
 800c794:	d122      	bne.n	800c7dc <_dtoa_r+0xaac>
 800c796:	2301      	movs	r3, #1
 800c798:	9a06      	ldr	r2, [sp, #24]
 800c79a:	4213      	tst	r3, r2
 800c79c:	d11e      	bne.n	800c7dc <_dtoa_r+0xaac>
 800c79e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	dded      	ble.n	800c780 <_dtoa_r+0xa50>
 800c7a4:	9903      	ldr	r1, [sp, #12]
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	9802      	ldr	r0, [sp, #8]
 800c7aa:	f001 f803 	bl	800d7b4 <__lshift>
 800c7ae:	9904      	ldr	r1, [sp, #16]
 800c7b0:	9003      	str	r0, [sp, #12]
 800c7b2:	f001 f851 	bl	800d858 <__mcmp>
 800c7b6:	2800      	cmp	r0, #0
 800c7b8:	dc02      	bgt.n	800c7c0 <_dtoa_r+0xa90>
 800c7ba:	d1e1      	bne.n	800c780 <_dtoa_r+0xa50>
 800c7bc:	07e3      	lsls	r3, r4, #31
 800c7be:	d5df      	bpl.n	800c780 <_dtoa_r+0xa50>
 800c7c0:	2c39      	cmp	r4, #57	; 0x39
 800c7c2:	d1db      	bne.n	800c77c <_dtoa_r+0xa4c>
 800c7c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c7c8:	1c5d      	adds	r5, r3, #1
 800c7ca:	2339      	movs	r3, #57	; 0x39
 800c7cc:	7013      	strb	r3, [r2, #0]
 800c7ce:	1e6b      	subs	r3, r5, #1
 800c7d0:	781a      	ldrb	r2, [r3, #0]
 800c7d2:	2a39      	cmp	r2, #57	; 0x39
 800c7d4:	d067      	beq.n	800c8a6 <_dtoa_r+0xb76>
 800c7d6:	3201      	adds	r2, #1
 800c7d8:	701a      	strb	r2, [r3, #0]
 800c7da:	e757      	b.n	800c68c <_dtoa_r+0x95c>
 800c7dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7de:	1c5d      	adds	r5, r3, #1
 800c7e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	dd04      	ble.n	800c7f0 <_dtoa_r+0xac0>
 800c7e6:	2c39      	cmp	r4, #57	; 0x39
 800c7e8:	d0ec      	beq.n	800c7c4 <_dtoa_r+0xa94>
 800c7ea:	3401      	adds	r4, #1
 800c7ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7ee:	e7c9      	b.n	800c784 <_dtoa_r+0xa54>
 800c7f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7f4:	701c      	strb	r4, [r3, #0]
 800c7f6:	9b08      	ldr	r3, [sp, #32]
 800c7f8:	1aeb      	subs	r3, r5, r3
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d03e      	beq.n	800c87c <_dtoa_r+0xb4c>
 800c7fe:	2300      	movs	r3, #0
 800c800:	220a      	movs	r2, #10
 800c802:	9903      	ldr	r1, [sp, #12]
 800c804:	9802      	ldr	r0, [sp, #8]
 800c806:	f000 fe25 	bl	800d454 <__multadd>
 800c80a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c80c:	9003      	str	r0, [sp, #12]
 800c80e:	42b3      	cmp	r3, r6
 800c810:	d109      	bne.n	800c826 <_dtoa_r+0xaf6>
 800c812:	2300      	movs	r3, #0
 800c814:	220a      	movs	r2, #10
 800c816:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c818:	9802      	ldr	r0, [sp, #8]
 800c81a:	f000 fe1b 	bl	800d454 <__multadd>
 800c81e:	9009      	str	r0, [sp, #36]	; 0x24
 800c820:	0006      	movs	r6, r0
 800c822:	950a      	str	r5, [sp, #40]	; 0x28
 800c824:	e77d      	b.n	800c722 <_dtoa_r+0x9f2>
 800c826:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c828:	2300      	movs	r3, #0
 800c82a:	220a      	movs	r2, #10
 800c82c:	9802      	ldr	r0, [sp, #8]
 800c82e:	f000 fe11 	bl	800d454 <__multadd>
 800c832:	2300      	movs	r3, #0
 800c834:	9009      	str	r0, [sp, #36]	; 0x24
 800c836:	220a      	movs	r2, #10
 800c838:	0031      	movs	r1, r6
 800c83a:	9802      	ldr	r0, [sp, #8]
 800c83c:	f000 fe0a 	bl	800d454 <__multadd>
 800c840:	e7ee      	b.n	800c820 <_dtoa_r+0xaf0>
 800c842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c844:	930c      	str	r3, [sp, #48]	; 0x30
 800c846:	9b08      	ldr	r3, [sp, #32]
 800c848:	9306      	str	r3, [sp, #24]
 800c84a:	9904      	ldr	r1, [sp, #16]
 800c84c:	9803      	ldr	r0, [sp, #12]
 800c84e:	f7ff f9e9 	bl	800bc24 <quorem>
 800c852:	9b06      	ldr	r3, [sp, #24]
 800c854:	3030      	adds	r0, #48	; 0x30
 800c856:	1c5d      	adds	r5, r3, #1
 800c858:	7018      	strb	r0, [r3, #0]
 800c85a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c85c:	9b08      	ldr	r3, [sp, #32]
 800c85e:	0004      	movs	r4, r0
 800c860:	1aeb      	subs	r3, r5, r3
 800c862:	429a      	cmp	r2, r3
 800c864:	dd08      	ble.n	800c878 <_dtoa_r+0xb48>
 800c866:	2300      	movs	r3, #0
 800c868:	220a      	movs	r2, #10
 800c86a:	9903      	ldr	r1, [sp, #12]
 800c86c:	9802      	ldr	r0, [sp, #8]
 800c86e:	f000 fdf1 	bl	800d454 <__multadd>
 800c872:	9506      	str	r5, [sp, #24]
 800c874:	9003      	str	r0, [sp, #12]
 800c876:	e7e8      	b.n	800c84a <_dtoa_r+0xb1a>
 800c878:	2300      	movs	r3, #0
 800c87a:	9309      	str	r3, [sp, #36]	; 0x24
 800c87c:	9903      	ldr	r1, [sp, #12]
 800c87e:	2201      	movs	r2, #1
 800c880:	9802      	ldr	r0, [sp, #8]
 800c882:	f000 ff97 	bl	800d7b4 <__lshift>
 800c886:	9904      	ldr	r1, [sp, #16]
 800c888:	9003      	str	r0, [sp, #12]
 800c88a:	f000 ffe5 	bl	800d858 <__mcmp>
 800c88e:	2800      	cmp	r0, #0
 800c890:	dc9d      	bgt.n	800c7ce <_dtoa_r+0xa9e>
 800c892:	d101      	bne.n	800c898 <_dtoa_r+0xb68>
 800c894:	07e3      	lsls	r3, r4, #31
 800c896:	d49a      	bmi.n	800c7ce <_dtoa_r+0xa9e>
 800c898:	1e6b      	subs	r3, r5, #1
 800c89a:	781a      	ldrb	r2, [r3, #0]
 800c89c:	2a30      	cmp	r2, #48	; 0x30
 800c89e:	d000      	beq.n	800c8a2 <_dtoa_r+0xb72>
 800c8a0:	e6f4      	b.n	800c68c <_dtoa_r+0x95c>
 800c8a2:	001d      	movs	r5, r3
 800c8a4:	e7f8      	b.n	800c898 <_dtoa_r+0xb68>
 800c8a6:	9a08      	ldr	r2, [sp, #32]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d103      	bne.n	800c8b4 <_dtoa_r+0xb84>
 800c8ac:	2331      	movs	r3, #49	; 0x31
 800c8ae:	3701      	adds	r7, #1
 800c8b0:	7013      	strb	r3, [r2, #0]
 800c8b2:	e6eb      	b.n	800c68c <_dtoa_r+0x95c>
 800c8b4:	001d      	movs	r5, r3
 800c8b6:	e78a      	b.n	800c7ce <_dtoa_r+0xa9e>
 800c8b8:	4b0b      	ldr	r3, [pc, #44]	; (800c8e8 <_dtoa_r+0xbb8>)
 800c8ba:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c8bc:	9308      	str	r3, [sp, #32]
 800c8be:	4b0b      	ldr	r3, [pc, #44]	; (800c8ec <_dtoa_r+0xbbc>)
 800c8c0:	2a00      	cmp	r2, #0
 800c8c2:	d001      	beq.n	800c8c8 <_dtoa_r+0xb98>
 800c8c4:	f7ff fa77 	bl	800bdb6 <_dtoa_r+0x86>
 800c8c8:	f7ff fa77 	bl	800bdba <_dtoa_r+0x8a>
 800c8cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c8ce:	2b01      	cmp	r3, #1
 800c8d0:	dc00      	bgt.n	800c8d4 <_dtoa_r+0xba4>
 800c8d2:	e621      	b.n	800c518 <_dtoa_r+0x7e8>
 800c8d4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800c8d6:	2001      	movs	r0, #1
 800c8d8:	e635      	b.n	800c546 <_dtoa_r+0x816>
 800c8da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	dcb2      	bgt.n	800c846 <_dtoa_r+0xb16>
 800c8e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c8e2:	2b02      	cmp	r3, #2
 800c8e4:	ddaf      	ble.n	800c846 <_dtoa_r+0xb16>
 800c8e6:	e6bc      	b.n	800c662 <_dtoa_r+0x932>
 800c8e8:	0800eae8 	.word	0x0800eae8
 800c8ec:	0800eaf0 	.word	0x0800eaf0

0800c8f0 <__sflush_r>:
 800c8f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8f2:	898a      	ldrh	r2, [r1, #12]
 800c8f4:	0005      	movs	r5, r0
 800c8f6:	000c      	movs	r4, r1
 800c8f8:	0713      	lsls	r3, r2, #28
 800c8fa:	d460      	bmi.n	800c9be <__sflush_r+0xce>
 800c8fc:	684b      	ldr	r3, [r1, #4]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	dc04      	bgt.n	800c90c <__sflush_r+0x1c>
 800c902:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c904:	2b00      	cmp	r3, #0
 800c906:	dc01      	bgt.n	800c90c <__sflush_r+0x1c>
 800c908:	2000      	movs	r0, #0
 800c90a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c90c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c90e:	2f00      	cmp	r7, #0
 800c910:	d0fa      	beq.n	800c908 <__sflush_r+0x18>
 800c912:	2300      	movs	r3, #0
 800c914:	682e      	ldr	r6, [r5, #0]
 800c916:	602b      	str	r3, [r5, #0]
 800c918:	2380      	movs	r3, #128	; 0x80
 800c91a:	015b      	lsls	r3, r3, #5
 800c91c:	6a21      	ldr	r1, [r4, #32]
 800c91e:	401a      	ands	r2, r3
 800c920:	d034      	beq.n	800c98c <__sflush_r+0x9c>
 800c922:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c924:	89a3      	ldrh	r3, [r4, #12]
 800c926:	075b      	lsls	r3, r3, #29
 800c928:	d506      	bpl.n	800c938 <__sflush_r+0x48>
 800c92a:	6863      	ldr	r3, [r4, #4]
 800c92c:	1ac0      	subs	r0, r0, r3
 800c92e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c930:	2b00      	cmp	r3, #0
 800c932:	d001      	beq.n	800c938 <__sflush_r+0x48>
 800c934:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c936:	1ac0      	subs	r0, r0, r3
 800c938:	0002      	movs	r2, r0
 800c93a:	6a21      	ldr	r1, [r4, #32]
 800c93c:	2300      	movs	r3, #0
 800c93e:	0028      	movs	r0, r5
 800c940:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c942:	47b8      	blx	r7
 800c944:	89a1      	ldrh	r1, [r4, #12]
 800c946:	1c43      	adds	r3, r0, #1
 800c948:	d106      	bne.n	800c958 <__sflush_r+0x68>
 800c94a:	682b      	ldr	r3, [r5, #0]
 800c94c:	2b1d      	cmp	r3, #29
 800c94e:	d830      	bhi.n	800c9b2 <__sflush_r+0xc2>
 800c950:	4a2b      	ldr	r2, [pc, #172]	; (800ca00 <__sflush_r+0x110>)
 800c952:	40da      	lsrs	r2, r3
 800c954:	07d3      	lsls	r3, r2, #31
 800c956:	d52c      	bpl.n	800c9b2 <__sflush_r+0xc2>
 800c958:	2300      	movs	r3, #0
 800c95a:	6063      	str	r3, [r4, #4]
 800c95c:	6923      	ldr	r3, [r4, #16]
 800c95e:	6023      	str	r3, [r4, #0]
 800c960:	04cb      	lsls	r3, r1, #19
 800c962:	d505      	bpl.n	800c970 <__sflush_r+0x80>
 800c964:	1c43      	adds	r3, r0, #1
 800c966:	d102      	bne.n	800c96e <__sflush_r+0x7e>
 800c968:	682b      	ldr	r3, [r5, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d100      	bne.n	800c970 <__sflush_r+0x80>
 800c96e:	6560      	str	r0, [r4, #84]	; 0x54
 800c970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c972:	602e      	str	r6, [r5, #0]
 800c974:	2900      	cmp	r1, #0
 800c976:	d0c7      	beq.n	800c908 <__sflush_r+0x18>
 800c978:	0023      	movs	r3, r4
 800c97a:	3344      	adds	r3, #68	; 0x44
 800c97c:	4299      	cmp	r1, r3
 800c97e:	d002      	beq.n	800c986 <__sflush_r+0x96>
 800c980:	0028      	movs	r0, r5
 800c982:	f001 f91b 	bl	800dbbc <_free_r>
 800c986:	2000      	movs	r0, #0
 800c988:	6360      	str	r0, [r4, #52]	; 0x34
 800c98a:	e7be      	b.n	800c90a <__sflush_r+0x1a>
 800c98c:	2301      	movs	r3, #1
 800c98e:	0028      	movs	r0, r5
 800c990:	47b8      	blx	r7
 800c992:	1c43      	adds	r3, r0, #1
 800c994:	d1c6      	bne.n	800c924 <__sflush_r+0x34>
 800c996:	682b      	ldr	r3, [r5, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d0c3      	beq.n	800c924 <__sflush_r+0x34>
 800c99c:	2b1d      	cmp	r3, #29
 800c99e:	d001      	beq.n	800c9a4 <__sflush_r+0xb4>
 800c9a0:	2b16      	cmp	r3, #22
 800c9a2:	d101      	bne.n	800c9a8 <__sflush_r+0xb8>
 800c9a4:	602e      	str	r6, [r5, #0]
 800c9a6:	e7af      	b.n	800c908 <__sflush_r+0x18>
 800c9a8:	2340      	movs	r3, #64	; 0x40
 800c9aa:	89a2      	ldrh	r2, [r4, #12]
 800c9ac:	4313      	orrs	r3, r2
 800c9ae:	81a3      	strh	r3, [r4, #12]
 800c9b0:	e7ab      	b.n	800c90a <__sflush_r+0x1a>
 800c9b2:	2340      	movs	r3, #64	; 0x40
 800c9b4:	430b      	orrs	r3, r1
 800c9b6:	2001      	movs	r0, #1
 800c9b8:	81a3      	strh	r3, [r4, #12]
 800c9ba:	4240      	negs	r0, r0
 800c9bc:	e7a5      	b.n	800c90a <__sflush_r+0x1a>
 800c9be:	690f      	ldr	r7, [r1, #16]
 800c9c0:	2f00      	cmp	r7, #0
 800c9c2:	d0a1      	beq.n	800c908 <__sflush_r+0x18>
 800c9c4:	680b      	ldr	r3, [r1, #0]
 800c9c6:	600f      	str	r7, [r1, #0]
 800c9c8:	1bdb      	subs	r3, r3, r7
 800c9ca:	9301      	str	r3, [sp, #4]
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	0792      	lsls	r2, r2, #30
 800c9d0:	d100      	bne.n	800c9d4 <__sflush_r+0xe4>
 800c9d2:	694b      	ldr	r3, [r1, #20]
 800c9d4:	60a3      	str	r3, [r4, #8]
 800c9d6:	9b01      	ldr	r3, [sp, #4]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	dc00      	bgt.n	800c9de <__sflush_r+0xee>
 800c9dc:	e794      	b.n	800c908 <__sflush_r+0x18>
 800c9de:	9b01      	ldr	r3, [sp, #4]
 800c9e0:	003a      	movs	r2, r7
 800c9e2:	6a21      	ldr	r1, [r4, #32]
 800c9e4:	0028      	movs	r0, r5
 800c9e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c9e8:	47b0      	blx	r6
 800c9ea:	2800      	cmp	r0, #0
 800c9ec:	dc03      	bgt.n	800c9f6 <__sflush_r+0x106>
 800c9ee:	2340      	movs	r3, #64	; 0x40
 800c9f0:	89a2      	ldrh	r2, [r4, #12]
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	e7df      	b.n	800c9b6 <__sflush_r+0xc6>
 800c9f6:	9b01      	ldr	r3, [sp, #4]
 800c9f8:	183f      	adds	r7, r7, r0
 800c9fa:	1a1b      	subs	r3, r3, r0
 800c9fc:	9301      	str	r3, [sp, #4]
 800c9fe:	e7ea      	b.n	800c9d6 <__sflush_r+0xe6>
 800ca00:	20400001 	.word	0x20400001

0800ca04 <_fflush_r>:
 800ca04:	690b      	ldr	r3, [r1, #16]
 800ca06:	b570      	push	{r4, r5, r6, lr}
 800ca08:	0005      	movs	r5, r0
 800ca0a:	000c      	movs	r4, r1
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d101      	bne.n	800ca14 <_fflush_r+0x10>
 800ca10:	2000      	movs	r0, #0
 800ca12:	bd70      	pop	{r4, r5, r6, pc}
 800ca14:	2800      	cmp	r0, #0
 800ca16:	d004      	beq.n	800ca22 <_fflush_r+0x1e>
 800ca18:	6983      	ldr	r3, [r0, #24]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d101      	bne.n	800ca22 <_fflush_r+0x1e>
 800ca1e:	f000 f85f 	bl	800cae0 <__sinit>
 800ca22:	4b0b      	ldr	r3, [pc, #44]	; (800ca50 <_fflush_r+0x4c>)
 800ca24:	429c      	cmp	r4, r3
 800ca26:	d109      	bne.n	800ca3c <_fflush_r+0x38>
 800ca28:	686c      	ldr	r4, [r5, #4]
 800ca2a:	220c      	movs	r2, #12
 800ca2c:	5ea3      	ldrsh	r3, [r4, r2]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d0ee      	beq.n	800ca10 <_fflush_r+0xc>
 800ca32:	0021      	movs	r1, r4
 800ca34:	0028      	movs	r0, r5
 800ca36:	f7ff ff5b 	bl	800c8f0 <__sflush_r>
 800ca3a:	e7ea      	b.n	800ca12 <_fflush_r+0xe>
 800ca3c:	4b05      	ldr	r3, [pc, #20]	; (800ca54 <_fflush_r+0x50>)
 800ca3e:	429c      	cmp	r4, r3
 800ca40:	d101      	bne.n	800ca46 <_fflush_r+0x42>
 800ca42:	68ac      	ldr	r4, [r5, #8]
 800ca44:	e7f1      	b.n	800ca2a <_fflush_r+0x26>
 800ca46:	4b04      	ldr	r3, [pc, #16]	; (800ca58 <_fflush_r+0x54>)
 800ca48:	429c      	cmp	r4, r3
 800ca4a:	d1ee      	bne.n	800ca2a <_fflush_r+0x26>
 800ca4c:	68ec      	ldr	r4, [r5, #12]
 800ca4e:	e7ec      	b.n	800ca2a <_fflush_r+0x26>
 800ca50:	0800eb18 	.word	0x0800eb18
 800ca54:	0800eb38 	.word	0x0800eb38
 800ca58:	0800eaf8 	.word	0x0800eaf8

0800ca5c <std>:
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	b510      	push	{r4, lr}
 800ca60:	0004      	movs	r4, r0
 800ca62:	6003      	str	r3, [r0, #0]
 800ca64:	6043      	str	r3, [r0, #4]
 800ca66:	6083      	str	r3, [r0, #8]
 800ca68:	8181      	strh	r1, [r0, #12]
 800ca6a:	6643      	str	r3, [r0, #100]	; 0x64
 800ca6c:	81c2      	strh	r2, [r0, #14]
 800ca6e:	6103      	str	r3, [r0, #16]
 800ca70:	6143      	str	r3, [r0, #20]
 800ca72:	6183      	str	r3, [r0, #24]
 800ca74:	0019      	movs	r1, r3
 800ca76:	2208      	movs	r2, #8
 800ca78:	305c      	adds	r0, #92	; 0x5c
 800ca7a:	f7fd fa1b 	bl	8009eb4 <memset>
 800ca7e:	4b05      	ldr	r3, [pc, #20]	; (800ca94 <std+0x38>)
 800ca80:	6224      	str	r4, [r4, #32]
 800ca82:	6263      	str	r3, [r4, #36]	; 0x24
 800ca84:	4b04      	ldr	r3, [pc, #16]	; (800ca98 <std+0x3c>)
 800ca86:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca88:	4b04      	ldr	r3, [pc, #16]	; (800ca9c <std+0x40>)
 800ca8a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca8c:	4b04      	ldr	r3, [pc, #16]	; (800caa0 <std+0x44>)
 800ca8e:	6323      	str	r3, [r4, #48]	; 0x30
 800ca90:	bd10      	pop	{r4, pc}
 800ca92:	46c0      	nop			; (mov r8, r8)
 800ca94:	0800e26d 	.word	0x0800e26d
 800ca98:	0800e295 	.word	0x0800e295
 800ca9c:	0800e2cd 	.word	0x0800e2cd
 800caa0:	0800e2f9 	.word	0x0800e2f9

0800caa4 <_cleanup_r>:
 800caa4:	b510      	push	{r4, lr}
 800caa6:	4902      	ldr	r1, [pc, #8]	; (800cab0 <_cleanup_r+0xc>)
 800caa8:	f000 f88c 	bl	800cbc4 <_fwalk_reent>
 800caac:	bd10      	pop	{r4, pc}
 800caae:	46c0      	nop			; (mov r8, r8)
 800cab0:	0800ca05 	.word	0x0800ca05

0800cab4 <__sfmoreglue>:
 800cab4:	b570      	push	{r4, r5, r6, lr}
 800cab6:	2568      	movs	r5, #104	; 0x68
 800cab8:	1e4a      	subs	r2, r1, #1
 800caba:	4355      	muls	r5, r2
 800cabc:	000e      	movs	r6, r1
 800cabe:	0029      	movs	r1, r5
 800cac0:	3174      	adds	r1, #116	; 0x74
 800cac2:	f001 f8c5 	bl	800dc50 <_malloc_r>
 800cac6:	1e04      	subs	r4, r0, #0
 800cac8:	d008      	beq.n	800cadc <__sfmoreglue+0x28>
 800caca:	2100      	movs	r1, #0
 800cacc:	002a      	movs	r2, r5
 800cace:	6001      	str	r1, [r0, #0]
 800cad0:	6046      	str	r6, [r0, #4]
 800cad2:	300c      	adds	r0, #12
 800cad4:	60a0      	str	r0, [r4, #8]
 800cad6:	3268      	adds	r2, #104	; 0x68
 800cad8:	f7fd f9ec 	bl	8009eb4 <memset>
 800cadc:	0020      	movs	r0, r4
 800cade:	bd70      	pop	{r4, r5, r6, pc}

0800cae0 <__sinit>:
 800cae0:	6983      	ldr	r3, [r0, #24]
 800cae2:	b513      	push	{r0, r1, r4, lr}
 800cae4:	0004      	movs	r4, r0
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d128      	bne.n	800cb3c <__sinit+0x5c>
 800caea:	6483      	str	r3, [r0, #72]	; 0x48
 800caec:	64c3      	str	r3, [r0, #76]	; 0x4c
 800caee:	6503      	str	r3, [r0, #80]	; 0x50
 800caf0:	4b13      	ldr	r3, [pc, #76]	; (800cb40 <__sinit+0x60>)
 800caf2:	4a14      	ldr	r2, [pc, #80]	; (800cb44 <__sinit+0x64>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	6282      	str	r2, [r0, #40]	; 0x28
 800caf8:	9301      	str	r3, [sp, #4]
 800cafa:	4298      	cmp	r0, r3
 800cafc:	d101      	bne.n	800cb02 <__sinit+0x22>
 800cafe:	2301      	movs	r3, #1
 800cb00:	6183      	str	r3, [r0, #24]
 800cb02:	0020      	movs	r0, r4
 800cb04:	f000 f820 	bl	800cb48 <__sfp>
 800cb08:	6060      	str	r0, [r4, #4]
 800cb0a:	0020      	movs	r0, r4
 800cb0c:	f000 f81c 	bl	800cb48 <__sfp>
 800cb10:	60a0      	str	r0, [r4, #8]
 800cb12:	0020      	movs	r0, r4
 800cb14:	f000 f818 	bl	800cb48 <__sfp>
 800cb18:	2200      	movs	r2, #0
 800cb1a:	60e0      	str	r0, [r4, #12]
 800cb1c:	2104      	movs	r1, #4
 800cb1e:	6860      	ldr	r0, [r4, #4]
 800cb20:	f7ff ff9c 	bl	800ca5c <std>
 800cb24:	2201      	movs	r2, #1
 800cb26:	2109      	movs	r1, #9
 800cb28:	68a0      	ldr	r0, [r4, #8]
 800cb2a:	f7ff ff97 	bl	800ca5c <std>
 800cb2e:	2202      	movs	r2, #2
 800cb30:	2112      	movs	r1, #18
 800cb32:	68e0      	ldr	r0, [r4, #12]
 800cb34:	f7ff ff92 	bl	800ca5c <std>
 800cb38:	2301      	movs	r3, #1
 800cb3a:	61a3      	str	r3, [r4, #24]
 800cb3c:	bd13      	pop	{r0, r1, r4, pc}
 800cb3e:	46c0      	nop			; (mov r8, r8)
 800cb40:	0800ea54 	.word	0x0800ea54
 800cb44:	0800caa5 	.word	0x0800caa5

0800cb48 <__sfp>:
 800cb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb4a:	4b1c      	ldr	r3, [pc, #112]	; (800cbbc <__sfp+0x74>)
 800cb4c:	0007      	movs	r7, r0
 800cb4e:	681e      	ldr	r6, [r3, #0]
 800cb50:	69b3      	ldr	r3, [r6, #24]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d102      	bne.n	800cb5c <__sfp+0x14>
 800cb56:	0030      	movs	r0, r6
 800cb58:	f7ff ffc2 	bl	800cae0 <__sinit>
 800cb5c:	3648      	adds	r6, #72	; 0x48
 800cb5e:	68b4      	ldr	r4, [r6, #8]
 800cb60:	6873      	ldr	r3, [r6, #4]
 800cb62:	3b01      	subs	r3, #1
 800cb64:	d504      	bpl.n	800cb70 <__sfp+0x28>
 800cb66:	6833      	ldr	r3, [r6, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d007      	beq.n	800cb7c <__sfp+0x34>
 800cb6c:	6836      	ldr	r6, [r6, #0]
 800cb6e:	e7f6      	b.n	800cb5e <__sfp+0x16>
 800cb70:	220c      	movs	r2, #12
 800cb72:	5ea5      	ldrsh	r5, [r4, r2]
 800cb74:	2d00      	cmp	r5, #0
 800cb76:	d00d      	beq.n	800cb94 <__sfp+0x4c>
 800cb78:	3468      	adds	r4, #104	; 0x68
 800cb7a:	e7f2      	b.n	800cb62 <__sfp+0x1a>
 800cb7c:	2104      	movs	r1, #4
 800cb7e:	0038      	movs	r0, r7
 800cb80:	f7ff ff98 	bl	800cab4 <__sfmoreglue>
 800cb84:	6030      	str	r0, [r6, #0]
 800cb86:	2800      	cmp	r0, #0
 800cb88:	d1f0      	bne.n	800cb6c <__sfp+0x24>
 800cb8a:	230c      	movs	r3, #12
 800cb8c:	0004      	movs	r4, r0
 800cb8e:	603b      	str	r3, [r7, #0]
 800cb90:	0020      	movs	r0, r4
 800cb92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb94:	0020      	movs	r0, r4
 800cb96:	4b0a      	ldr	r3, [pc, #40]	; (800cbc0 <__sfp+0x78>)
 800cb98:	6665      	str	r5, [r4, #100]	; 0x64
 800cb9a:	6025      	str	r5, [r4, #0]
 800cb9c:	6065      	str	r5, [r4, #4]
 800cb9e:	60a5      	str	r5, [r4, #8]
 800cba0:	60e3      	str	r3, [r4, #12]
 800cba2:	6125      	str	r5, [r4, #16]
 800cba4:	6165      	str	r5, [r4, #20]
 800cba6:	61a5      	str	r5, [r4, #24]
 800cba8:	2208      	movs	r2, #8
 800cbaa:	0029      	movs	r1, r5
 800cbac:	305c      	adds	r0, #92	; 0x5c
 800cbae:	f7fd f981 	bl	8009eb4 <memset>
 800cbb2:	6365      	str	r5, [r4, #52]	; 0x34
 800cbb4:	63a5      	str	r5, [r4, #56]	; 0x38
 800cbb6:	64a5      	str	r5, [r4, #72]	; 0x48
 800cbb8:	64e5      	str	r5, [r4, #76]	; 0x4c
 800cbba:	e7e9      	b.n	800cb90 <__sfp+0x48>
 800cbbc:	0800ea54 	.word	0x0800ea54
 800cbc0:	ffff0001 	.word	0xffff0001

0800cbc4 <_fwalk_reent>:
 800cbc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbc6:	0004      	movs	r4, r0
 800cbc8:	0007      	movs	r7, r0
 800cbca:	2600      	movs	r6, #0
 800cbcc:	9101      	str	r1, [sp, #4]
 800cbce:	3448      	adds	r4, #72	; 0x48
 800cbd0:	2c00      	cmp	r4, #0
 800cbd2:	d101      	bne.n	800cbd8 <_fwalk_reent+0x14>
 800cbd4:	0030      	movs	r0, r6
 800cbd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cbd8:	6863      	ldr	r3, [r4, #4]
 800cbda:	68a5      	ldr	r5, [r4, #8]
 800cbdc:	9300      	str	r3, [sp, #0]
 800cbde:	9b00      	ldr	r3, [sp, #0]
 800cbe0:	3b01      	subs	r3, #1
 800cbe2:	9300      	str	r3, [sp, #0]
 800cbe4:	d501      	bpl.n	800cbea <_fwalk_reent+0x26>
 800cbe6:	6824      	ldr	r4, [r4, #0]
 800cbe8:	e7f2      	b.n	800cbd0 <_fwalk_reent+0xc>
 800cbea:	89ab      	ldrh	r3, [r5, #12]
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	d908      	bls.n	800cc02 <_fwalk_reent+0x3e>
 800cbf0:	220e      	movs	r2, #14
 800cbf2:	5eab      	ldrsh	r3, [r5, r2]
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	d004      	beq.n	800cc02 <_fwalk_reent+0x3e>
 800cbf8:	0029      	movs	r1, r5
 800cbfa:	0038      	movs	r0, r7
 800cbfc:	9b01      	ldr	r3, [sp, #4]
 800cbfe:	4798      	blx	r3
 800cc00:	4306      	orrs	r6, r0
 800cc02:	3568      	adds	r5, #104	; 0x68
 800cc04:	e7eb      	b.n	800cbde <_fwalk_reent+0x1a>

0800cc06 <rshift>:
 800cc06:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc08:	0004      	movs	r4, r0
 800cc0a:	6905      	ldr	r5, [r0, #16]
 800cc0c:	3414      	adds	r4, #20
 800cc0e:	114b      	asrs	r3, r1, #5
 800cc10:	0026      	movs	r6, r4
 800cc12:	429d      	cmp	r5, r3
 800cc14:	dd14      	ble.n	800cc40 <rshift+0x3a>
 800cc16:	221f      	movs	r2, #31
 800cc18:	00ad      	lsls	r5, r5, #2
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	4011      	ands	r1, r2
 800cc1e:	1965      	adds	r5, r4, r5
 800cc20:	18e3      	adds	r3, r4, r3
 800cc22:	0022      	movs	r2, r4
 800cc24:	2900      	cmp	r1, #0
 800cc26:	d01e      	beq.n	800cc66 <rshift+0x60>
 800cc28:	cb04      	ldmia	r3!, {r2}
 800cc2a:	2720      	movs	r7, #32
 800cc2c:	40ca      	lsrs	r2, r1
 800cc2e:	46a4      	mov	ip, r4
 800cc30:	1a7f      	subs	r7, r7, r1
 800cc32:	4666      	mov	r6, ip
 800cc34:	429d      	cmp	r5, r3
 800cc36:	d80b      	bhi.n	800cc50 <rshift+0x4a>
 800cc38:	6032      	str	r2, [r6, #0]
 800cc3a:	2a00      	cmp	r2, #0
 800cc3c:	d000      	beq.n	800cc40 <rshift+0x3a>
 800cc3e:	3604      	adds	r6, #4
 800cc40:	1b33      	subs	r3, r6, r4
 800cc42:	109b      	asrs	r3, r3, #2
 800cc44:	6103      	str	r3, [r0, #16]
 800cc46:	42a6      	cmp	r6, r4
 800cc48:	d101      	bne.n	800cc4e <rshift+0x48>
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	6143      	str	r3, [r0, #20]
 800cc4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc50:	681e      	ldr	r6, [r3, #0]
 800cc52:	40be      	lsls	r6, r7
 800cc54:	4332      	orrs	r2, r6
 800cc56:	4666      	mov	r6, ip
 800cc58:	c604      	stmia	r6!, {r2}
 800cc5a:	cb04      	ldmia	r3!, {r2}
 800cc5c:	46b4      	mov	ip, r6
 800cc5e:	40ca      	lsrs	r2, r1
 800cc60:	e7e7      	b.n	800cc32 <rshift+0x2c>
 800cc62:	cb02      	ldmia	r3!, {r1}
 800cc64:	c202      	stmia	r2!, {r1}
 800cc66:	0016      	movs	r6, r2
 800cc68:	429d      	cmp	r5, r3
 800cc6a:	d8fa      	bhi.n	800cc62 <rshift+0x5c>
 800cc6c:	e7e8      	b.n	800cc40 <rshift+0x3a>

0800cc6e <__hexdig_fun>:
 800cc6e:	0003      	movs	r3, r0
 800cc70:	3b30      	subs	r3, #48	; 0x30
 800cc72:	2b09      	cmp	r3, #9
 800cc74:	d803      	bhi.n	800cc7e <__hexdig_fun+0x10>
 800cc76:	3820      	subs	r0, #32
 800cc78:	b2c3      	uxtb	r3, r0
 800cc7a:	0018      	movs	r0, r3
 800cc7c:	4770      	bx	lr
 800cc7e:	0003      	movs	r3, r0
 800cc80:	3b61      	subs	r3, #97	; 0x61
 800cc82:	2b05      	cmp	r3, #5
 800cc84:	d801      	bhi.n	800cc8a <__hexdig_fun+0x1c>
 800cc86:	3847      	subs	r0, #71	; 0x47
 800cc88:	e7f6      	b.n	800cc78 <__hexdig_fun+0xa>
 800cc8a:	0002      	movs	r2, r0
 800cc8c:	3a41      	subs	r2, #65	; 0x41
 800cc8e:	2300      	movs	r3, #0
 800cc90:	2a05      	cmp	r2, #5
 800cc92:	d8f2      	bhi.n	800cc7a <__hexdig_fun+0xc>
 800cc94:	3827      	subs	r0, #39	; 0x27
 800cc96:	e7ef      	b.n	800cc78 <__hexdig_fun+0xa>

0800cc98 <__gethex>:
 800cc98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc9a:	b08d      	sub	sp, #52	; 0x34
 800cc9c:	9005      	str	r0, [sp, #20]
 800cc9e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800cca0:	9109      	str	r1, [sp, #36]	; 0x24
 800cca2:	9202      	str	r2, [sp, #8]
 800cca4:	930a      	str	r3, [sp, #40]	; 0x28
 800cca6:	f000 fae2 	bl	800d26e <__localeconv_l>
 800ccaa:	6803      	ldr	r3, [r0, #0]
 800ccac:	0018      	movs	r0, r3
 800ccae:	9307      	str	r3, [sp, #28]
 800ccb0:	f7f3 fa2a 	bl	8000108 <strlen>
 800ccb4:	2202      	movs	r2, #2
 800ccb6:	9b07      	ldr	r3, [sp, #28]
 800ccb8:	4252      	negs	r2, r2
 800ccba:	181b      	adds	r3, r3, r0
 800ccbc:	3b01      	subs	r3, #1
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	9004      	str	r0, [sp, #16]
 800ccc2:	930b      	str	r3, [sp, #44]	; 0x2c
 800ccc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccc6:	6819      	ldr	r1, [r3, #0]
 800ccc8:	1c8b      	adds	r3, r1, #2
 800ccca:	1a52      	subs	r2, r2, r1
 800cccc:	18d1      	adds	r1, r2, r3
 800ccce:	9301      	str	r3, [sp, #4]
 800ccd0:	9108      	str	r1, [sp, #32]
 800ccd2:	9901      	ldr	r1, [sp, #4]
 800ccd4:	3301      	adds	r3, #1
 800ccd6:	7808      	ldrb	r0, [r1, #0]
 800ccd8:	2830      	cmp	r0, #48	; 0x30
 800ccda:	d0f7      	beq.n	800cccc <__gethex+0x34>
 800ccdc:	f7ff ffc7 	bl	800cc6e <__hexdig_fun>
 800cce0:	1e07      	subs	r7, r0, #0
 800cce2:	d000      	beq.n	800cce6 <__gethex+0x4e>
 800cce4:	e06f      	b.n	800cdc6 <__gethex+0x12e>
 800cce6:	9a04      	ldr	r2, [sp, #16]
 800cce8:	9907      	ldr	r1, [sp, #28]
 800ccea:	9801      	ldr	r0, [sp, #4]
 800ccec:	f001 fb0a 	bl	800e304 <strncmp>
 800ccf0:	2800      	cmp	r0, #0
 800ccf2:	d000      	beq.n	800ccf6 <__gethex+0x5e>
 800ccf4:	e06d      	b.n	800cdd2 <__gethex+0x13a>
 800ccf6:	9b01      	ldr	r3, [sp, #4]
 800ccf8:	9a04      	ldr	r2, [sp, #16]
 800ccfa:	189c      	adds	r4, r3, r2
 800ccfc:	7820      	ldrb	r0, [r4, #0]
 800ccfe:	f7ff ffb6 	bl	800cc6e <__hexdig_fun>
 800cd02:	2800      	cmp	r0, #0
 800cd04:	d069      	beq.n	800cdda <__gethex+0x142>
 800cd06:	9401      	str	r4, [sp, #4]
 800cd08:	9b01      	ldr	r3, [sp, #4]
 800cd0a:	7818      	ldrb	r0, [r3, #0]
 800cd0c:	2830      	cmp	r0, #48	; 0x30
 800cd0e:	d009      	beq.n	800cd24 <__gethex+0x8c>
 800cd10:	f7ff ffad 	bl	800cc6e <__hexdig_fun>
 800cd14:	4243      	negs	r3, r0
 800cd16:	4143      	adcs	r3, r0
 800cd18:	9303      	str	r3, [sp, #12]
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	0026      	movs	r6, r4
 800cd1e:	9308      	str	r3, [sp, #32]
 800cd20:	9c01      	ldr	r4, [sp, #4]
 800cd22:	e004      	b.n	800cd2e <__gethex+0x96>
 800cd24:	9b01      	ldr	r3, [sp, #4]
 800cd26:	3301      	adds	r3, #1
 800cd28:	9301      	str	r3, [sp, #4]
 800cd2a:	e7ed      	b.n	800cd08 <__gethex+0x70>
 800cd2c:	3401      	adds	r4, #1
 800cd2e:	7820      	ldrb	r0, [r4, #0]
 800cd30:	f7ff ff9d 	bl	800cc6e <__hexdig_fun>
 800cd34:	2800      	cmp	r0, #0
 800cd36:	d1f9      	bne.n	800cd2c <__gethex+0x94>
 800cd38:	9a04      	ldr	r2, [sp, #16]
 800cd3a:	9907      	ldr	r1, [sp, #28]
 800cd3c:	0020      	movs	r0, r4
 800cd3e:	f001 fae1 	bl	800e304 <strncmp>
 800cd42:	2800      	cmp	r0, #0
 800cd44:	d109      	bne.n	800cd5a <__gethex+0xc2>
 800cd46:	2e00      	cmp	r6, #0
 800cd48:	d10a      	bne.n	800cd60 <__gethex+0xc8>
 800cd4a:	9b04      	ldr	r3, [sp, #16]
 800cd4c:	18e4      	adds	r4, r4, r3
 800cd4e:	0026      	movs	r6, r4
 800cd50:	7820      	ldrb	r0, [r4, #0]
 800cd52:	f7ff ff8c 	bl	800cc6e <__hexdig_fun>
 800cd56:	2800      	cmp	r0, #0
 800cd58:	d139      	bne.n	800cdce <__gethex+0x136>
 800cd5a:	2700      	movs	r7, #0
 800cd5c:	42be      	cmp	r6, r7
 800cd5e:	d001      	beq.n	800cd64 <__gethex+0xcc>
 800cd60:	1b37      	subs	r7, r6, r4
 800cd62:	00bf      	lsls	r7, r7, #2
 800cd64:	7823      	ldrb	r3, [r4, #0]
 800cd66:	2b50      	cmp	r3, #80	; 0x50
 800cd68:	d001      	beq.n	800cd6e <__gethex+0xd6>
 800cd6a:	2b70      	cmp	r3, #112	; 0x70
 800cd6c:	d142      	bne.n	800cdf4 <__gethex+0x15c>
 800cd6e:	7863      	ldrb	r3, [r4, #1]
 800cd70:	2b2b      	cmp	r3, #43	; 0x2b
 800cd72:	d034      	beq.n	800cdde <__gethex+0x146>
 800cd74:	2b2d      	cmp	r3, #45	; 0x2d
 800cd76:	d036      	beq.n	800cde6 <__gethex+0x14e>
 800cd78:	2300      	movs	r3, #0
 800cd7a:	1c66      	adds	r6, r4, #1
 800cd7c:	9306      	str	r3, [sp, #24]
 800cd7e:	7830      	ldrb	r0, [r6, #0]
 800cd80:	f7ff ff75 	bl	800cc6e <__hexdig_fun>
 800cd84:	1e43      	subs	r3, r0, #1
 800cd86:	b2db      	uxtb	r3, r3
 800cd88:	2b18      	cmp	r3, #24
 800cd8a:	d833      	bhi.n	800cdf4 <__gethex+0x15c>
 800cd8c:	3810      	subs	r0, #16
 800cd8e:	0005      	movs	r5, r0
 800cd90:	3601      	adds	r6, #1
 800cd92:	7830      	ldrb	r0, [r6, #0]
 800cd94:	f7ff ff6b 	bl	800cc6e <__hexdig_fun>
 800cd98:	1e43      	subs	r3, r0, #1
 800cd9a:	b2db      	uxtb	r3, r3
 800cd9c:	2b18      	cmp	r3, #24
 800cd9e:	d924      	bls.n	800cdea <__gethex+0x152>
 800cda0:	9b06      	ldr	r3, [sp, #24]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d000      	beq.n	800cda8 <__gethex+0x110>
 800cda6:	426d      	negs	r5, r5
 800cda8:	197f      	adds	r7, r7, r5
 800cdaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdac:	601e      	str	r6, [r3, #0]
 800cdae:	9b03      	ldr	r3, [sp, #12]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d021      	beq.n	800cdf8 <__gethex+0x160>
 800cdb4:	9b08      	ldr	r3, [sp, #32]
 800cdb6:	2606      	movs	r6, #6
 800cdb8:	425a      	negs	r2, r3
 800cdba:	4153      	adcs	r3, r2
 800cdbc:	425b      	negs	r3, r3
 800cdbe:	401e      	ands	r6, r3
 800cdc0:	0030      	movs	r0, r6
 800cdc2:	b00d      	add	sp, #52	; 0x34
 800cdc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	9303      	str	r3, [sp, #12]
 800cdca:	001e      	movs	r6, r3
 800cdcc:	e7a8      	b.n	800cd20 <__gethex+0x88>
 800cdce:	3401      	adds	r4, #1
 800cdd0:	e7be      	b.n	800cd50 <__gethex+0xb8>
 800cdd2:	9c01      	ldr	r4, [sp, #4]
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	9303      	str	r3, [sp, #12]
 800cdd8:	e7c4      	b.n	800cd64 <__gethex+0xcc>
 800cdda:	0007      	movs	r7, r0
 800cddc:	e7fa      	b.n	800cdd4 <__gethex+0x13c>
 800cdde:	2300      	movs	r3, #0
 800cde0:	9306      	str	r3, [sp, #24]
 800cde2:	1ca6      	adds	r6, r4, #2
 800cde4:	e7cb      	b.n	800cd7e <__gethex+0xe6>
 800cde6:	2301      	movs	r3, #1
 800cde8:	e7fa      	b.n	800cde0 <__gethex+0x148>
 800cdea:	230a      	movs	r3, #10
 800cdec:	435d      	muls	r5, r3
 800cdee:	182d      	adds	r5, r5, r0
 800cdf0:	3d10      	subs	r5, #16
 800cdf2:	e7cd      	b.n	800cd90 <__gethex+0xf8>
 800cdf4:	0026      	movs	r6, r4
 800cdf6:	e7d8      	b.n	800cdaa <__gethex+0x112>
 800cdf8:	9b01      	ldr	r3, [sp, #4]
 800cdfa:	9903      	ldr	r1, [sp, #12]
 800cdfc:	1ae3      	subs	r3, r4, r3
 800cdfe:	3b01      	subs	r3, #1
 800ce00:	2b07      	cmp	r3, #7
 800ce02:	dc47      	bgt.n	800ce94 <__gethex+0x1fc>
 800ce04:	9805      	ldr	r0, [sp, #20]
 800ce06:	f000 fad4 	bl	800d3b2 <_Balloc>
 800ce0a:	0003      	movs	r3, r0
 800ce0c:	3314      	adds	r3, #20
 800ce0e:	9303      	str	r3, [sp, #12]
 800ce10:	9308      	str	r3, [sp, #32]
 800ce12:	2300      	movs	r3, #0
 800ce14:	0005      	movs	r5, r0
 800ce16:	001e      	movs	r6, r3
 800ce18:	9306      	str	r3, [sp, #24]
 800ce1a:	9b01      	ldr	r3, [sp, #4]
 800ce1c:	42a3      	cmp	r3, r4
 800ce1e:	d33c      	bcc.n	800ce9a <__gethex+0x202>
 800ce20:	9c08      	ldr	r4, [sp, #32]
 800ce22:	9b03      	ldr	r3, [sp, #12]
 800ce24:	c440      	stmia	r4!, {r6}
 800ce26:	1ae4      	subs	r4, r4, r3
 800ce28:	10a4      	asrs	r4, r4, #2
 800ce2a:	612c      	str	r4, [r5, #16]
 800ce2c:	0030      	movs	r0, r6
 800ce2e:	f000 fb8d 	bl	800d54c <__hi0bits>
 800ce32:	9b02      	ldr	r3, [sp, #8]
 800ce34:	0164      	lsls	r4, r4, #5
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	1a26      	subs	r6, r4, r0
 800ce3a:	9301      	str	r3, [sp, #4]
 800ce3c:	429e      	cmp	r6, r3
 800ce3e:	dd5f      	ble.n	800cf00 <__gethex+0x268>
 800ce40:	1af6      	subs	r6, r6, r3
 800ce42:	0031      	movs	r1, r6
 800ce44:	0028      	movs	r0, r5
 800ce46:	f000 fe88 	bl	800db5a <__any_on>
 800ce4a:	1e04      	subs	r4, r0, #0
 800ce4c:	d00f      	beq.n	800ce6e <__gethex+0x1d6>
 800ce4e:	2401      	movs	r4, #1
 800ce50:	211f      	movs	r1, #31
 800ce52:	0020      	movs	r0, r4
 800ce54:	1e73      	subs	r3, r6, #1
 800ce56:	4019      	ands	r1, r3
 800ce58:	4088      	lsls	r0, r1
 800ce5a:	0001      	movs	r1, r0
 800ce5c:	115a      	asrs	r2, r3, #5
 800ce5e:	9803      	ldr	r0, [sp, #12]
 800ce60:	0092      	lsls	r2, r2, #2
 800ce62:	5812      	ldr	r2, [r2, r0]
 800ce64:	420a      	tst	r2, r1
 800ce66:	d002      	beq.n	800ce6e <__gethex+0x1d6>
 800ce68:	42a3      	cmp	r3, r4
 800ce6a:	dc41      	bgt.n	800cef0 <__gethex+0x258>
 800ce6c:	2402      	movs	r4, #2
 800ce6e:	0031      	movs	r1, r6
 800ce70:	0028      	movs	r0, r5
 800ce72:	f7ff fec8 	bl	800cc06 <rshift>
 800ce76:	19bf      	adds	r7, r7, r6
 800ce78:	9b02      	ldr	r3, [sp, #8]
 800ce7a:	689b      	ldr	r3, [r3, #8]
 800ce7c:	9304      	str	r3, [sp, #16]
 800ce7e:	42bb      	cmp	r3, r7
 800ce80:	da4e      	bge.n	800cf20 <__gethex+0x288>
 800ce82:	0029      	movs	r1, r5
 800ce84:	9805      	ldr	r0, [sp, #20]
 800ce86:	f000 facc 	bl	800d422 <_Bfree>
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ce8e:	26a3      	movs	r6, #163	; 0xa3
 800ce90:	6013      	str	r3, [r2, #0]
 800ce92:	e795      	b.n	800cdc0 <__gethex+0x128>
 800ce94:	3101      	adds	r1, #1
 800ce96:	105b      	asrs	r3, r3, #1
 800ce98:	e7b2      	b.n	800ce00 <__gethex+0x168>
 800ce9a:	1e63      	subs	r3, r4, #1
 800ce9c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d015      	beq.n	800ced2 <__gethex+0x23a>
 800cea6:	9b06      	ldr	r3, [sp, #24]
 800cea8:	2b20      	cmp	r3, #32
 800ceaa:	d105      	bne.n	800ceb8 <__gethex+0x220>
 800ceac:	9b08      	ldr	r3, [sp, #32]
 800ceae:	601e      	str	r6, [r3, #0]
 800ceb0:	2600      	movs	r6, #0
 800ceb2:	3304      	adds	r3, #4
 800ceb4:	9308      	str	r3, [sp, #32]
 800ceb6:	9606      	str	r6, [sp, #24]
 800ceb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceba:	7818      	ldrb	r0, [r3, #0]
 800cebc:	f7ff fed7 	bl	800cc6e <__hexdig_fun>
 800cec0:	230f      	movs	r3, #15
 800cec2:	4018      	ands	r0, r3
 800cec4:	9b06      	ldr	r3, [sp, #24]
 800cec6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800cec8:	4098      	lsls	r0, r3
 800ceca:	3304      	adds	r3, #4
 800cecc:	4306      	orrs	r6, r0
 800cece:	9306      	str	r3, [sp, #24]
 800ced0:	e7a3      	b.n	800ce1a <__gethex+0x182>
 800ced2:	2301      	movs	r3, #1
 800ced4:	9a04      	ldr	r2, [sp, #16]
 800ced6:	1a9c      	subs	r4, r3, r2
 800ced8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceda:	191c      	adds	r4, r3, r4
 800cedc:	9b01      	ldr	r3, [sp, #4]
 800cede:	429c      	cmp	r4, r3
 800cee0:	d3e1      	bcc.n	800cea6 <__gethex+0x20e>
 800cee2:	9907      	ldr	r1, [sp, #28]
 800cee4:	0020      	movs	r0, r4
 800cee6:	f001 fa0d 	bl	800e304 <strncmp>
 800ceea:	2800      	cmp	r0, #0
 800ceec:	d1db      	bne.n	800cea6 <__gethex+0x20e>
 800ceee:	e794      	b.n	800ce1a <__gethex+0x182>
 800cef0:	1eb1      	subs	r1, r6, #2
 800cef2:	0028      	movs	r0, r5
 800cef4:	f000 fe31 	bl	800db5a <__any_on>
 800cef8:	2800      	cmp	r0, #0
 800cefa:	d0b7      	beq.n	800ce6c <__gethex+0x1d4>
 800cefc:	2403      	movs	r4, #3
 800cefe:	e7b6      	b.n	800ce6e <__gethex+0x1d6>
 800cf00:	9b01      	ldr	r3, [sp, #4]
 800cf02:	2400      	movs	r4, #0
 800cf04:	429e      	cmp	r6, r3
 800cf06:	dab7      	bge.n	800ce78 <__gethex+0x1e0>
 800cf08:	1b9e      	subs	r6, r3, r6
 800cf0a:	0029      	movs	r1, r5
 800cf0c:	0032      	movs	r2, r6
 800cf0e:	9805      	ldr	r0, [sp, #20]
 800cf10:	f000 fc50 	bl	800d7b4 <__lshift>
 800cf14:	0003      	movs	r3, r0
 800cf16:	3314      	adds	r3, #20
 800cf18:	0005      	movs	r5, r0
 800cf1a:	1bbf      	subs	r7, r7, r6
 800cf1c:	9303      	str	r3, [sp, #12]
 800cf1e:	e7ab      	b.n	800ce78 <__gethex+0x1e0>
 800cf20:	9b02      	ldr	r3, [sp, #8]
 800cf22:	685e      	ldr	r6, [r3, #4]
 800cf24:	42be      	cmp	r6, r7
 800cf26:	dd6b      	ble.n	800d000 <__gethex+0x368>
 800cf28:	9b01      	ldr	r3, [sp, #4]
 800cf2a:	1bf6      	subs	r6, r6, r7
 800cf2c:	42b3      	cmp	r3, r6
 800cf2e:	dc32      	bgt.n	800cf96 <__gethex+0x2fe>
 800cf30:	9b02      	ldr	r3, [sp, #8]
 800cf32:	68db      	ldr	r3, [r3, #12]
 800cf34:	2b02      	cmp	r3, #2
 800cf36:	d026      	beq.n	800cf86 <__gethex+0x2ee>
 800cf38:	2b03      	cmp	r3, #3
 800cf3a:	d028      	beq.n	800cf8e <__gethex+0x2f6>
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d119      	bne.n	800cf74 <__gethex+0x2dc>
 800cf40:	9b01      	ldr	r3, [sp, #4]
 800cf42:	42b3      	cmp	r3, r6
 800cf44:	d116      	bne.n	800cf74 <__gethex+0x2dc>
 800cf46:	2b01      	cmp	r3, #1
 800cf48:	dc0d      	bgt.n	800cf66 <__gethex+0x2ce>
 800cf4a:	9b02      	ldr	r3, [sp, #8]
 800cf4c:	2662      	movs	r6, #98	; 0x62
 800cf4e:	685b      	ldr	r3, [r3, #4]
 800cf50:	9301      	str	r3, [sp, #4]
 800cf52:	9a01      	ldr	r2, [sp, #4]
 800cf54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf56:	601a      	str	r2, [r3, #0]
 800cf58:	2301      	movs	r3, #1
 800cf5a:	9a03      	ldr	r2, [sp, #12]
 800cf5c:	612b      	str	r3, [r5, #16]
 800cf5e:	6013      	str	r3, [r2, #0]
 800cf60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cf62:	601d      	str	r5, [r3, #0]
 800cf64:	e72c      	b.n	800cdc0 <__gethex+0x128>
 800cf66:	9901      	ldr	r1, [sp, #4]
 800cf68:	0028      	movs	r0, r5
 800cf6a:	3901      	subs	r1, #1
 800cf6c:	f000 fdf5 	bl	800db5a <__any_on>
 800cf70:	2800      	cmp	r0, #0
 800cf72:	d1ea      	bne.n	800cf4a <__gethex+0x2b2>
 800cf74:	0029      	movs	r1, r5
 800cf76:	9805      	ldr	r0, [sp, #20]
 800cf78:	f000 fa53 	bl	800d422 <_Bfree>
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cf80:	2650      	movs	r6, #80	; 0x50
 800cf82:	6013      	str	r3, [r2, #0]
 800cf84:	e71c      	b.n	800cdc0 <__gethex+0x128>
 800cf86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d0de      	beq.n	800cf4a <__gethex+0x2b2>
 800cf8c:	e7f2      	b.n	800cf74 <__gethex+0x2dc>
 800cf8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d1da      	bne.n	800cf4a <__gethex+0x2b2>
 800cf94:	e7ee      	b.n	800cf74 <__gethex+0x2dc>
 800cf96:	1e77      	subs	r7, r6, #1
 800cf98:	2c00      	cmp	r4, #0
 800cf9a:	d12f      	bne.n	800cffc <__gethex+0x364>
 800cf9c:	2f00      	cmp	r7, #0
 800cf9e:	d004      	beq.n	800cfaa <__gethex+0x312>
 800cfa0:	0039      	movs	r1, r7
 800cfa2:	0028      	movs	r0, r5
 800cfa4:	f000 fdd9 	bl	800db5a <__any_on>
 800cfa8:	0004      	movs	r4, r0
 800cfaa:	231f      	movs	r3, #31
 800cfac:	117a      	asrs	r2, r7, #5
 800cfae:	401f      	ands	r7, r3
 800cfb0:	3b1e      	subs	r3, #30
 800cfb2:	40bb      	lsls	r3, r7
 800cfb4:	9903      	ldr	r1, [sp, #12]
 800cfb6:	0092      	lsls	r2, r2, #2
 800cfb8:	5852      	ldr	r2, [r2, r1]
 800cfba:	421a      	tst	r2, r3
 800cfbc:	d001      	beq.n	800cfc2 <__gethex+0x32a>
 800cfbe:	2302      	movs	r3, #2
 800cfc0:	431c      	orrs	r4, r3
 800cfc2:	9b01      	ldr	r3, [sp, #4]
 800cfc4:	0031      	movs	r1, r6
 800cfc6:	1b9b      	subs	r3, r3, r6
 800cfc8:	2602      	movs	r6, #2
 800cfca:	0028      	movs	r0, r5
 800cfcc:	9301      	str	r3, [sp, #4]
 800cfce:	f7ff fe1a 	bl	800cc06 <rshift>
 800cfd2:	9b02      	ldr	r3, [sp, #8]
 800cfd4:	685f      	ldr	r7, [r3, #4]
 800cfd6:	2c00      	cmp	r4, #0
 800cfd8:	d040      	beq.n	800d05c <__gethex+0x3c4>
 800cfda:	9b02      	ldr	r3, [sp, #8]
 800cfdc:	68db      	ldr	r3, [r3, #12]
 800cfde:	2b02      	cmp	r3, #2
 800cfe0:	d010      	beq.n	800d004 <__gethex+0x36c>
 800cfe2:	2b03      	cmp	r3, #3
 800cfe4:	d012      	beq.n	800d00c <__gethex+0x374>
 800cfe6:	2b01      	cmp	r3, #1
 800cfe8:	d106      	bne.n	800cff8 <__gethex+0x360>
 800cfea:	07a2      	lsls	r2, r4, #30
 800cfec:	d504      	bpl.n	800cff8 <__gethex+0x360>
 800cfee:	9a03      	ldr	r2, [sp, #12]
 800cff0:	6812      	ldr	r2, [r2, #0]
 800cff2:	4314      	orrs	r4, r2
 800cff4:	421c      	tst	r4, r3
 800cff6:	d10c      	bne.n	800d012 <__gethex+0x37a>
 800cff8:	2310      	movs	r3, #16
 800cffa:	e02e      	b.n	800d05a <__gethex+0x3c2>
 800cffc:	2401      	movs	r4, #1
 800cffe:	e7d4      	b.n	800cfaa <__gethex+0x312>
 800d000:	2601      	movs	r6, #1
 800d002:	e7e8      	b.n	800cfd6 <__gethex+0x33e>
 800d004:	2301      	movs	r3, #1
 800d006:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d008:	1a9b      	subs	r3, r3, r2
 800d00a:	9313      	str	r3, [sp, #76]	; 0x4c
 800d00c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d0f2      	beq.n	800cff8 <__gethex+0x360>
 800d012:	692c      	ldr	r4, [r5, #16]
 800d014:	00a3      	lsls	r3, r4, #2
 800d016:	9304      	str	r3, [sp, #16]
 800d018:	002b      	movs	r3, r5
 800d01a:	00a2      	lsls	r2, r4, #2
 800d01c:	3314      	adds	r3, #20
 800d01e:	1899      	adds	r1, r3, r2
 800d020:	2200      	movs	r2, #0
 800d022:	4694      	mov	ip, r2
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	1c50      	adds	r0, r2, #1
 800d028:	d01d      	beq.n	800d066 <__gethex+0x3ce>
 800d02a:	3201      	adds	r2, #1
 800d02c:	601a      	str	r2, [r3, #0]
 800d02e:	002b      	movs	r3, r5
 800d030:	3314      	adds	r3, #20
 800d032:	2e02      	cmp	r6, #2
 800d034:	d13a      	bne.n	800d0ac <__gethex+0x414>
 800d036:	9a02      	ldr	r2, [sp, #8]
 800d038:	9901      	ldr	r1, [sp, #4]
 800d03a:	6812      	ldr	r2, [r2, #0]
 800d03c:	3a01      	subs	r2, #1
 800d03e:	428a      	cmp	r2, r1
 800d040:	d10a      	bne.n	800d058 <__gethex+0x3c0>
 800d042:	114a      	asrs	r2, r1, #5
 800d044:	211f      	movs	r1, #31
 800d046:	9801      	ldr	r0, [sp, #4]
 800d048:	0092      	lsls	r2, r2, #2
 800d04a:	4001      	ands	r1, r0
 800d04c:	2001      	movs	r0, #1
 800d04e:	0004      	movs	r4, r0
 800d050:	408c      	lsls	r4, r1
 800d052:	58d3      	ldr	r3, [r2, r3]
 800d054:	4223      	tst	r3, r4
 800d056:	d148      	bne.n	800d0ea <__gethex+0x452>
 800d058:	2320      	movs	r3, #32
 800d05a:	431e      	orrs	r6, r3
 800d05c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d05e:	601d      	str	r5, [r3, #0]
 800d060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d062:	601f      	str	r7, [r3, #0]
 800d064:	e6ac      	b.n	800cdc0 <__gethex+0x128>
 800d066:	4662      	mov	r2, ip
 800d068:	c304      	stmia	r3!, {r2}
 800d06a:	4299      	cmp	r1, r3
 800d06c:	d8da      	bhi.n	800d024 <__gethex+0x38c>
 800d06e:	68ab      	ldr	r3, [r5, #8]
 800d070:	429c      	cmp	r4, r3
 800d072:	db12      	blt.n	800d09a <__gethex+0x402>
 800d074:	686b      	ldr	r3, [r5, #4]
 800d076:	9805      	ldr	r0, [sp, #20]
 800d078:	1c59      	adds	r1, r3, #1
 800d07a:	f000 f99a 	bl	800d3b2 <_Balloc>
 800d07e:	0029      	movs	r1, r5
 800d080:	692b      	ldr	r3, [r5, #16]
 800d082:	9003      	str	r0, [sp, #12]
 800d084:	1c9a      	adds	r2, r3, #2
 800d086:	0092      	lsls	r2, r2, #2
 800d088:	310c      	adds	r1, #12
 800d08a:	300c      	adds	r0, #12
 800d08c:	f7fc ff09 	bl	8009ea2 <memcpy>
 800d090:	0029      	movs	r1, r5
 800d092:	9805      	ldr	r0, [sp, #20]
 800d094:	f000 f9c5 	bl	800d422 <_Bfree>
 800d098:	9d03      	ldr	r5, [sp, #12]
 800d09a:	692b      	ldr	r3, [r5, #16]
 800d09c:	1c5a      	adds	r2, r3, #1
 800d09e:	612a      	str	r2, [r5, #16]
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	3304      	adds	r3, #4
 800d0a4:	009b      	lsls	r3, r3, #2
 800d0a6:	18eb      	adds	r3, r5, r3
 800d0a8:	605a      	str	r2, [r3, #4]
 800d0aa:	e7c0      	b.n	800d02e <__gethex+0x396>
 800d0ac:	692a      	ldr	r2, [r5, #16]
 800d0ae:	42a2      	cmp	r2, r4
 800d0b0:	dd0a      	ble.n	800d0c8 <__gethex+0x430>
 800d0b2:	2101      	movs	r1, #1
 800d0b4:	0028      	movs	r0, r5
 800d0b6:	f7ff fda6 	bl	800cc06 <rshift>
 800d0ba:	9b02      	ldr	r3, [sp, #8]
 800d0bc:	3701      	adds	r7, #1
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	2601      	movs	r6, #1
 800d0c2:	42bb      	cmp	r3, r7
 800d0c4:	dac8      	bge.n	800d058 <__gethex+0x3c0>
 800d0c6:	e6dc      	b.n	800ce82 <__gethex+0x1ea>
 800d0c8:	241f      	movs	r4, #31
 800d0ca:	9a01      	ldr	r2, [sp, #4]
 800d0cc:	2601      	movs	r6, #1
 800d0ce:	4022      	ands	r2, r4
 800d0d0:	1e14      	subs	r4, r2, #0
 800d0d2:	d0c1      	beq.n	800d058 <__gethex+0x3c0>
 800d0d4:	9a04      	ldr	r2, [sp, #16]
 800d0d6:	189b      	adds	r3, r3, r2
 800d0d8:	3b04      	subs	r3, #4
 800d0da:	6818      	ldr	r0, [r3, #0]
 800d0dc:	f000 fa36 	bl	800d54c <__hi0bits>
 800d0e0:	2120      	movs	r1, #32
 800d0e2:	1b0c      	subs	r4, r1, r4
 800d0e4:	42a0      	cmp	r0, r4
 800d0e6:	dbe4      	blt.n	800d0b2 <__gethex+0x41a>
 800d0e8:	e7b6      	b.n	800d058 <__gethex+0x3c0>
 800d0ea:	0006      	movs	r6, r0
 800d0ec:	e7b4      	b.n	800d058 <__gethex+0x3c0>

0800d0ee <L_shift>:
 800d0ee:	2308      	movs	r3, #8
 800d0f0:	b570      	push	{r4, r5, r6, lr}
 800d0f2:	2520      	movs	r5, #32
 800d0f4:	1a9a      	subs	r2, r3, r2
 800d0f6:	0092      	lsls	r2, r2, #2
 800d0f8:	1aad      	subs	r5, r5, r2
 800d0fa:	6843      	ldr	r3, [r0, #4]
 800d0fc:	6806      	ldr	r6, [r0, #0]
 800d0fe:	001c      	movs	r4, r3
 800d100:	40ac      	lsls	r4, r5
 800d102:	40d3      	lsrs	r3, r2
 800d104:	4334      	orrs	r4, r6
 800d106:	6004      	str	r4, [r0, #0]
 800d108:	6043      	str	r3, [r0, #4]
 800d10a:	3004      	adds	r0, #4
 800d10c:	4288      	cmp	r0, r1
 800d10e:	d3f4      	bcc.n	800d0fa <L_shift+0xc>
 800d110:	bd70      	pop	{r4, r5, r6, pc}

0800d112 <__match>:
 800d112:	b530      	push	{r4, r5, lr}
 800d114:	6803      	ldr	r3, [r0, #0]
 800d116:	780c      	ldrb	r4, [r1, #0]
 800d118:	3301      	adds	r3, #1
 800d11a:	2c00      	cmp	r4, #0
 800d11c:	d102      	bne.n	800d124 <__match+0x12>
 800d11e:	6003      	str	r3, [r0, #0]
 800d120:	2001      	movs	r0, #1
 800d122:	bd30      	pop	{r4, r5, pc}
 800d124:	781a      	ldrb	r2, [r3, #0]
 800d126:	0015      	movs	r5, r2
 800d128:	3d41      	subs	r5, #65	; 0x41
 800d12a:	2d19      	cmp	r5, #25
 800d12c:	d800      	bhi.n	800d130 <__match+0x1e>
 800d12e:	3220      	adds	r2, #32
 800d130:	3101      	adds	r1, #1
 800d132:	42a2      	cmp	r2, r4
 800d134:	d0ef      	beq.n	800d116 <__match+0x4>
 800d136:	2000      	movs	r0, #0
 800d138:	e7f3      	b.n	800d122 <__match+0x10>

0800d13a <__hexnan>:
 800d13a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d13c:	b08b      	sub	sp, #44	; 0x2c
 800d13e:	9201      	str	r2, [sp, #4]
 800d140:	680a      	ldr	r2, [r1, #0]
 800d142:	9901      	ldr	r1, [sp, #4]
 800d144:	1153      	asrs	r3, r2, #5
 800d146:	009b      	lsls	r3, r3, #2
 800d148:	18cb      	adds	r3, r1, r3
 800d14a:	9304      	str	r3, [sp, #16]
 800d14c:	231f      	movs	r3, #31
 800d14e:	401a      	ands	r2, r3
 800d150:	9008      	str	r0, [sp, #32]
 800d152:	9206      	str	r2, [sp, #24]
 800d154:	d002      	beq.n	800d15c <__hexnan+0x22>
 800d156:	9b04      	ldr	r3, [sp, #16]
 800d158:	3304      	adds	r3, #4
 800d15a:	9304      	str	r3, [sp, #16]
 800d15c:	9b04      	ldr	r3, [sp, #16]
 800d15e:	2500      	movs	r5, #0
 800d160:	1f1e      	subs	r6, r3, #4
 800d162:	0037      	movs	r7, r6
 800d164:	0034      	movs	r4, r6
 800d166:	9b08      	ldr	r3, [sp, #32]
 800d168:	6035      	str	r5, [r6, #0]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	9507      	str	r5, [sp, #28]
 800d16e:	9305      	str	r3, [sp, #20]
 800d170:	9502      	str	r5, [sp, #8]
 800d172:	9b05      	ldr	r3, [sp, #20]
 800d174:	3301      	adds	r3, #1
 800d176:	9309      	str	r3, [sp, #36]	; 0x24
 800d178:	9b05      	ldr	r3, [sp, #20]
 800d17a:	785b      	ldrb	r3, [r3, #1]
 800d17c:	9303      	str	r3, [sp, #12]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d028      	beq.n	800d1d4 <__hexnan+0x9a>
 800d182:	9803      	ldr	r0, [sp, #12]
 800d184:	f7ff fd73 	bl	800cc6e <__hexdig_fun>
 800d188:	2800      	cmp	r0, #0
 800d18a:	d145      	bne.n	800d218 <__hexnan+0xde>
 800d18c:	9b03      	ldr	r3, [sp, #12]
 800d18e:	2b20      	cmp	r3, #32
 800d190:	d819      	bhi.n	800d1c6 <__hexnan+0x8c>
 800d192:	9b02      	ldr	r3, [sp, #8]
 800d194:	9a07      	ldr	r2, [sp, #28]
 800d196:	4293      	cmp	r3, r2
 800d198:	dd12      	ble.n	800d1c0 <__hexnan+0x86>
 800d19a:	42bc      	cmp	r4, r7
 800d19c:	d206      	bcs.n	800d1ac <__hexnan+0x72>
 800d19e:	2d07      	cmp	r5, #7
 800d1a0:	dc04      	bgt.n	800d1ac <__hexnan+0x72>
 800d1a2:	002a      	movs	r2, r5
 800d1a4:	0039      	movs	r1, r7
 800d1a6:	0020      	movs	r0, r4
 800d1a8:	f7ff ffa1 	bl	800d0ee <L_shift>
 800d1ac:	9b01      	ldr	r3, [sp, #4]
 800d1ae:	2508      	movs	r5, #8
 800d1b0:	429c      	cmp	r4, r3
 800d1b2:	d905      	bls.n	800d1c0 <__hexnan+0x86>
 800d1b4:	1f27      	subs	r7, r4, #4
 800d1b6:	2500      	movs	r5, #0
 800d1b8:	003c      	movs	r4, r7
 800d1ba:	9b02      	ldr	r3, [sp, #8]
 800d1bc:	603d      	str	r5, [r7, #0]
 800d1be:	9307      	str	r3, [sp, #28]
 800d1c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1c2:	9305      	str	r3, [sp, #20]
 800d1c4:	e7d5      	b.n	800d172 <__hexnan+0x38>
 800d1c6:	9b03      	ldr	r3, [sp, #12]
 800d1c8:	2b29      	cmp	r3, #41	; 0x29
 800d1ca:	d14a      	bne.n	800d262 <__hexnan+0x128>
 800d1cc:	9b05      	ldr	r3, [sp, #20]
 800d1ce:	9a08      	ldr	r2, [sp, #32]
 800d1d0:	3302      	adds	r3, #2
 800d1d2:	6013      	str	r3, [r2, #0]
 800d1d4:	9b02      	ldr	r3, [sp, #8]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d043      	beq.n	800d262 <__hexnan+0x128>
 800d1da:	42bc      	cmp	r4, r7
 800d1dc:	d206      	bcs.n	800d1ec <__hexnan+0xb2>
 800d1de:	2d07      	cmp	r5, #7
 800d1e0:	dc04      	bgt.n	800d1ec <__hexnan+0xb2>
 800d1e2:	002a      	movs	r2, r5
 800d1e4:	0039      	movs	r1, r7
 800d1e6:	0020      	movs	r0, r4
 800d1e8:	f7ff ff81 	bl	800d0ee <L_shift>
 800d1ec:	9b01      	ldr	r3, [sp, #4]
 800d1ee:	429c      	cmp	r4, r3
 800d1f0:	d926      	bls.n	800d240 <__hexnan+0x106>
 800d1f2:	cc04      	ldmia	r4!, {r2}
 800d1f4:	601a      	str	r2, [r3, #0]
 800d1f6:	3304      	adds	r3, #4
 800d1f8:	42a6      	cmp	r6, r4
 800d1fa:	d2fa      	bcs.n	800d1f2 <__hexnan+0xb8>
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	c304      	stmia	r3!, {r2}
 800d200:	429e      	cmp	r6, r3
 800d202:	d2fc      	bcs.n	800d1fe <__hexnan+0xc4>
 800d204:	6833      	ldr	r3, [r6, #0]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d104      	bne.n	800d214 <__hexnan+0xda>
 800d20a:	9b01      	ldr	r3, [sp, #4]
 800d20c:	429e      	cmp	r6, r3
 800d20e:	d126      	bne.n	800d25e <__hexnan+0x124>
 800d210:	2301      	movs	r3, #1
 800d212:	6033      	str	r3, [r6, #0]
 800d214:	2005      	movs	r0, #5
 800d216:	e025      	b.n	800d264 <__hexnan+0x12a>
 800d218:	9b02      	ldr	r3, [sp, #8]
 800d21a:	3501      	adds	r5, #1
 800d21c:	3301      	adds	r3, #1
 800d21e:	9302      	str	r3, [sp, #8]
 800d220:	2d08      	cmp	r5, #8
 800d222:	dd06      	ble.n	800d232 <__hexnan+0xf8>
 800d224:	9b01      	ldr	r3, [sp, #4]
 800d226:	429c      	cmp	r4, r3
 800d228:	d9ca      	bls.n	800d1c0 <__hexnan+0x86>
 800d22a:	2300      	movs	r3, #0
 800d22c:	2501      	movs	r5, #1
 800d22e:	3c04      	subs	r4, #4
 800d230:	6023      	str	r3, [r4, #0]
 800d232:	220f      	movs	r2, #15
 800d234:	6823      	ldr	r3, [r4, #0]
 800d236:	4010      	ands	r0, r2
 800d238:	011b      	lsls	r3, r3, #4
 800d23a:	4318      	orrs	r0, r3
 800d23c:	6020      	str	r0, [r4, #0]
 800d23e:	e7bf      	b.n	800d1c0 <__hexnan+0x86>
 800d240:	9b06      	ldr	r3, [sp, #24]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d0de      	beq.n	800d204 <__hexnan+0xca>
 800d246:	2120      	movs	r1, #32
 800d248:	9a06      	ldr	r2, [sp, #24]
 800d24a:	9b04      	ldr	r3, [sp, #16]
 800d24c:	1a89      	subs	r1, r1, r2
 800d24e:	2201      	movs	r2, #1
 800d250:	4252      	negs	r2, r2
 800d252:	40ca      	lsrs	r2, r1
 800d254:	3b04      	subs	r3, #4
 800d256:	6819      	ldr	r1, [r3, #0]
 800d258:	400a      	ands	r2, r1
 800d25a:	601a      	str	r2, [r3, #0]
 800d25c:	e7d2      	b.n	800d204 <__hexnan+0xca>
 800d25e:	3e04      	subs	r6, #4
 800d260:	e7d0      	b.n	800d204 <__hexnan+0xca>
 800d262:	2004      	movs	r0, #4
 800d264:	b00b      	add	sp, #44	; 0x2c
 800d266:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d268 <__locale_ctype_ptr_l>:
 800d268:	30ec      	adds	r0, #236	; 0xec
 800d26a:	6800      	ldr	r0, [r0, #0]
 800d26c:	4770      	bx	lr

0800d26e <__localeconv_l>:
 800d26e:	30f0      	adds	r0, #240	; 0xf0
 800d270:	4770      	bx	lr
	...

0800d274 <_localeconv_r>:
 800d274:	4b03      	ldr	r3, [pc, #12]	; (800d284 <_localeconv_r+0x10>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	6a18      	ldr	r0, [r3, #32]
 800d27a:	2800      	cmp	r0, #0
 800d27c:	d100      	bne.n	800d280 <_localeconv_r+0xc>
 800d27e:	4802      	ldr	r0, [pc, #8]	; (800d288 <_localeconv_r+0x14>)
 800d280:	30f0      	adds	r0, #240	; 0xf0
 800d282:	4770      	bx	lr
 800d284:	20000064 	.word	0x20000064
 800d288:	200000c8 	.word	0x200000c8

0800d28c <__swhatbuf_r>:
 800d28c:	b570      	push	{r4, r5, r6, lr}
 800d28e:	000e      	movs	r6, r1
 800d290:	001d      	movs	r5, r3
 800d292:	230e      	movs	r3, #14
 800d294:	5ec9      	ldrsh	r1, [r1, r3]
 800d296:	b096      	sub	sp, #88	; 0x58
 800d298:	0014      	movs	r4, r2
 800d29a:	2900      	cmp	r1, #0
 800d29c:	da07      	bge.n	800d2ae <__swhatbuf_r+0x22>
 800d29e:	2300      	movs	r3, #0
 800d2a0:	602b      	str	r3, [r5, #0]
 800d2a2:	89b3      	ldrh	r3, [r6, #12]
 800d2a4:	061b      	lsls	r3, r3, #24
 800d2a6:	d411      	bmi.n	800d2cc <__swhatbuf_r+0x40>
 800d2a8:	2380      	movs	r3, #128	; 0x80
 800d2aa:	00db      	lsls	r3, r3, #3
 800d2ac:	e00f      	b.n	800d2ce <__swhatbuf_r+0x42>
 800d2ae:	466a      	mov	r2, sp
 800d2b0:	f001 f86c 	bl	800e38c <_fstat_r>
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	dbf2      	blt.n	800d29e <__swhatbuf_r+0x12>
 800d2b8:	22f0      	movs	r2, #240	; 0xf0
 800d2ba:	9b01      	ldr	r3, [sp, #4]
 800d2bc:	0212      	lsls	r2, r2, #8
 800d2be:	4013      	ands	r3, r2
 800d2c0:	4a05      	ldr	r2, [pc, #20]	; (800d2d8 <__swhatbuf_r+0x4c>)
 800d2c2:	189b      	adds	r3, r3, r2
 800d2c4:	425a      	negs	r2, r3
 800d2c6:	4153      	adcs	r3, r2
 800d2c8:	602b      	str	r3, [r5, #0]
 800d2ca:	e7ed      	b.n	800d2a8 <__swhatbuf_r+0x1c>
 800d2cc:	2340      	movs	r3, #64	; 0x40
 800d2ce:	2000      	movs	r0, #0
 800d2d0:	6023      	str	r3, [r4, #0]
 800d2d2:	b016      	add	sp, #88	; 0x58
 800d2d4:	bd70      	pop	{r4, r5, r6, pc}
 800d2d6:	46c0      	nop			; (mov r8, r8)
 800d2d8:	ffffe000 	.word	0xffffe000

0800d2dc <__smakebuf_r>:
 800d2dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2de:	2602      	movs	r6, #2
 800d2e0:	898b      	ldrh	r3, [r1, #12]
 800d2e2:	0005      	movs	r5, r0
 800d2e4:	000c      	movs	r4, r1
 800d2e6:	4233      	tst	r3, r6
 800d2e8:	d006      	beq.n	800d2f8 <__smakebuf_r+0x1c>
 800d2ea:	0023      	movs	r3, r4
 800d2ec:	3347      	adds	r3, #71	; 0x47
 800d2ee:	6023      	str	r3, [r4, #0]
 800d2f0:	6123      	str	r3, [r4, #16]
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	6163      	str	r3, [r4, #20]
 800d2f6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800d2f8:	ab01      	add	r3, sp, #4
 800d2fa:	466a      	mov	r2, sp
 800d2fc:	f7ff ffc6 	bl	800d28c <__swhatbuf_r>
 800d300:	9900      	ldr	r1, [sp, #0]
 800d302:	0007      	movs	r7, r0
 800d304:	0028      	movs	r0, r5
 800d306:	f000 fca3 	bl	800dc50 <_malloc_r>
 800d30a:	2800      	cmp	r0, #0
 800d30c:	d108      	bne.n	800d320 <__smakebuf_r+0x44>
 800d30e:	220c      	movs	r2, #12
 800d310:	5ea3      	ldrsh	r3, [r4, r2]
 800d312:	059a      	lsls	r2, r3, #22
 800d314:	d4ef      	bmi.n	800d2f6 <__smakebuf_r+0x1a>
 800d316:	2203      	movs	r2, #3
 800d318:	4393      	bics	r3, r2
 800d31a:	431e      	orrs	r6, r3
 800d31c:	81a6      	strh	r6, [r4, #12]
 800d31e:	e7e4      	b.n	800d2ea <__smakebuf_r+0xe>
 800d320:	4b0f      	ldr	r3, [pc, #60]	; (800d360 <__smakebuf_r+0x84>)
 800d322:	62ab      	str	r3, [r5, #40]	; 0x28
 800d324:	2380      	movs	r3, #128	; 0x80
 800d326:	89a2      	ldrh	r2, [r4, #12]
 800d328:	6020      	str	r0, [r4, #0]
 800d32a:	4313      	orrs	r3, r2
 800d32c:	81a3      	strh	r3, [r4, #12]
 800d32e:	9b00      	ldr	r3, [sp, #0]
 800d330:	6120      	str	r0, [r4, #16]
 800d332:	6163      	str	r3, [r4, #20]
 800d334:	9b01      	ldr	r3, [sp, #4]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d00d      	beq.n	800d356 <__smakebuf_r+0x7a>
 800d33a:	230e      	movs	r3, #14
 800d33c:	5ee1      	ldrsh	r1, [r4, r3]
 800d33e:	0028      	movs	r0, r5
 800d340:	f001 f836 	bl	800e3b0 <_isatty_r>
 800d344:	2800      	cmp	r0, #0
 800d346:	d006      	beq.n	800d356 <__smakebuf_r+0x7a>
 800d348:	2203      	movs	r2, #3
 800d34a:	89a3      	ldrh	r3, [r4, #12]
 800d34c:	4393      	bics	r3, r2
 800d34e:	001a      	movs	r2, r3
 800d350:	2301      	movs	r3, #1
 800d352:	4313      	orrs	r3, r2
 800d354:	81a3      	strh	r3, [r4, #12]
 800d356:	89a0      	ldrh	r0, [r4, #12]
 800d358:	4338      	orrs	r0, r7
 800d35a:	81a0      	strh	r0, [r4, #12]
 800d35c:	e7cb      	b.n	800d2f6 <__smakebuf_r+0x1a>
 800d35e:	46c0      	nop			; (mov r8, r8)
 800d360:	0800caa5 	.word	0x0800caa5

0800d364 <malloc>:
 800d364:	b510      	push	{r4, lr}
 800d366:	4b03      	ldr	r3, [pc, #12]	; (800d374 <malloc+0x10>)
 800d368:	0001      	movs	r1, r0
 800d36a:	6818      	ldr	r0, [r3, #0]
 800d36c:	f000 fc70 	bl	800dc50 <_malloc_r>
 800d370:	bd10      	pop	{r4, pc}
 800d372:	46c0      	nop			; (mov r8, r8)
 800d374:	20000064 	.word	0x20000064

0800d378 <__ascii_mbtowc>:
 800d378:	b082      	sub	sp, #8
 800d37a:	2900      	cmp	r1, #0
 800d37c:	d100      	bne.n	800d380 <__ascii_mbtowc+0x8>
 800d37e:	a901      	add	r1, sp, #4
 800d380:	1e10      	subs	r0, r2, #0
 800d382:	d006      	beq.n	800d392 <__ascii_mbtowc+0x1a>
 800d384:	2b00      	cmp	r3, #0
 800d386:	d006      	beq.n	800d396 <__ascii_mbtowc+0x1e>
 800d388:	7813      	ldrb	r3, [r2, #0]
 800d38a:	600b      	str	r3, [r1, #0]
 800d38c:	7810      	ldrb	r0, [r2, #0]
 800d38e:	1e43      	subs	r3, r0, #1
 800d390:	4198      	sbcs	r0, r3
 800d392:	b002      	add	sp, #8
 800d394:	4770      	bx	lr
 800d396:	2002      	movs	r0, #2
 800d398:	4240      	negs	r0, r0
 800d39a:	e7fa      	b.n	800d392 <__ascii_mbtowc+0x1a>

0800d39c <memchr>:
 800d39c:	b2c9      	uxtb	r1, r1
 800d39e:	1882      	adds	r2, r0, r2
 800d3a0:	4290      	cmp	r0, r2
 800d3a2:	d101      	bne.n	800d3a8 <memchr+0xc>
 800d3a4:	2000      	movs	r0, #0
 800d3a6:	4770      	bx	lr
 800d3a8:	7803      	ldrb	r3, [r0, #0]
 800d3aa:	428b      	cmp	r3, r1
 800d3ac:	d0fb      	beq.n	800d3a6 <memchr+0xa>
 800d3ae:	3001      	adds	r0, #1
 800d3b0:	e7f6      	b.n	800d3a0 <memchr+0x4>

0800d3b2 <_Balloc>:
 800d3b2:	b570      	push	{r4, r5, r6, lr}
 800d3b4:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d3b6:	0004      	movs	r4, r0
 800d3b8:	000d      	movs	r5, r1
 800d3ba:	2e00      	cmp	r6, #0
 800d3bc:	d107      	bne.n	800d3ce <_Balloc+0x1c>
 800d3be:	2010      	movs	r0, #16
 800d3c0:	f7ff ffd0 	bl	800d364 <malloc>
 800d3c4:	6260      	str	r0, [r4, #36]	; 0x24
 800d3c6:	6046      	str	r6, [r0, #4]
 800d3c8:	6086      	str	r6, [r0, #8]
 800d3ca:	6006      	str	r6, [r0, #0]
 800d3cc:	60c6      	str	r6, [r0, #12]
 800d3ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d3d0:	68f3      	ldr	r3, [r6, #12]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d013      	beq.n	800d3fe <_Balloc+0x4c>
 800d3d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3d8:	00aa      	lsls	r2, r5, #2
 800d3da:	68db      	ldr	r3, [r3, #12]
 800d3dc:	189b      	adds	r3, r3, r2
 800d3de:	6818      	ldr	r0, [r3, #0]
 800d3e0:	2800      	cmp	r0, #0
 800d3e2:	d118      	bne.n	800d416 <_Balloc+0x64>
 800d3e4:	2101      	movs	r1, #1
 800d3e6:	000e      	movs	r6, r1
 800d3e8:	40ae      	lsls	r6, r5
 800d3ea:	1d72      	adds	r2, r6, #5
 800d3ec:	0092      	lsls	r2, r2, #2
 800d3ee:	0020      	movs	r0, r4
 800d3f0:	f000 fbd5 	bl	800db9e <_calloc_r>
 800d3f4:	2800      	cmp	r0, #0
 800d3f6:	d00c      	beq.n	800d412 <_Balloc+0x60>
 800d3f8:	6045      	str	r5, [r0, #4]
 800d3fa:	6086      	str	r6, [r0, #8]
 800d3fc:	e00d      	b.n	800d41a <_Balloc+0x68>
 800d3fe:	2221      	movs	r2, #33	; 0x21
 800d400:	2104      	movs	r1, #4
 800d402:	0020      	movs	r0, r4
 800d404:	f000 fbcb 	bl	800db9e <_calloc_r>
 800d408:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d40a:	60f0      	str	r0, [r6, #12]
 800d40c:	68db      	ldr	r3, [r3, #12]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d1e1      	bne.n	800d3d6 <_Balloc+0x24>
 800d412:	2000      	movs	r0, #0
 800d414:	bd70      	pop	{r4, r5, r6, pc}
 800d416:	6802      	ldr	r2, [r0, #0]
 800d418:	601a      	str	r2, [r3, #0]
 800d41a:	2300      	movs	r3, #0
 800d41c:	6103      	str	r3, [r0, #16]
 800d41e:	60c3      	str	r3, [r0, #12]
 800d420:	e7f8      	b.n	800d414 <_Balloc+0x62>

0800d422 <_Bfree>:
 800d422:	b570      	push	{r4, r5, r6, lr}
 800d424:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d426:	0006      	movs	r6, r0
 800d428:	000d      	movs	r5, r1
 800d42a:	2c00      	cmp	r4, #0
 800d42c:	d107      	bne.n	800d43e <_Bfree+0x1c>
 800d42e:	2010      	movs	r0, #16
 800d430:	f7ff ff98 	bl	800d364 <malloc>
 800d434:	6270      	str	r0, [r6, #36]	; 0x24
 800d436:	6044      	str	r4, [r0, #4]
 800d438:	6084      	str	r4, [r0, #8]
 800d43a:	6004      	str	r4, [r0, #0]
 800d43c:	60c4      	str	r4, [r0, #12]
 800d43e:	2d00      	cmp	r5, #0
 800d440:	d007      	beq.n	800d452 <_Bfree+0x30>
 800d442:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d444:	686a      	ldr	r2, [r5, #4]
 800d446:	68db      	ldr	r3, [r3, #12]
 800d448:	0092      	lsls	r2, r2, #2
 800d44a:	189b      	adds	r3, r3, r2
 800d44c:	681a      	ldr	r2, [r3, #0]
 800d44e:	602a      	str	r2, [r5, #0]
 800d450:	601d      	str	r5, [r3, #0]
 800d452:	bd70      	pop	{r4, r5, r6, pc}

0800d454 <__multadd>:
 800d454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d456:	001e      	movs	r6, r3
 800d458:	2314      	movs	r3, #20
 800d45a:	469c      	mov	ip, r3
 800d45c:	0007      	movs	r7, r0
 800d45e:	000c      	movs	r4, r1
 800d460:	2000      	movs	r0, #0
 800d462:	690d      	ldr	r5, [r1, #16]
 800d464:	448c      	add	ip, r1
 800d466:	4663      	mov	r3, ip
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	3001      	adds	r0, #1
 800d46c:	b299      	uxth	r1, r3
 800d46e:	4663      	mov	r3, ip
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	4351      	muls	r1, r2
 800d474:	0c1b      	lsrs	r3, r3, #16
 800d476:	4353      	muls	r3, r2
 800d478:	1989      	adds	r1, r1, r6
 800d47a:	0c0e      	lsrs	r6, r1, #16
 800d47c:	199b      	adds	r3, r3, r6
 800d47e:	b289      	uxth	r1, r1
 800d480:	0c1e      	lsrs	r6, r3, #16
 800d482:	041b      	lsls	r3, r3, #16
 800d484:	185b      	adds	r3, r3, r1
 800d486:	4661      	mov	r1, ip
 800d488:	c108      	stmia	r1!, {r3}
 800d48a:	468c      	mov	ip, r1
 800d48c:	4285      	cmp	r5, r0
 800d48e:	dcea      	bgt.n	800d466 <__multadd+0x12>
 800d490:	2e00      	cmp	r6, #0
 800d492:	d01b      	beq.n	800d4cc <__multadd+0x78>
 800d494:	68a3      	ldr	r3, [r4, #8]
 800d496:	42ab      	cmp	r3, r5
 800d498:	dc12      	bgt.n	800d4c0 <__multadd+0x6c>
 800d49a:	6863      	ldr	r3, [r4, #4]
 800d49c:	0038      	movs	r0, r7
 800d49e:	1c59      	adds	r1, r3, #1
 800d4a0:	f7ff ff87 	bl	800d3b2 <_Balloc>
 800d4a4:	0021      	movs	r1, r4
 800d4a6:	6923      	ldr	r3, [r4, #16]
 800d4a8:	9001      	str	r0, [sp, #4]
 800d4aa:	1c9a      	adds	r2, r3, #2
 800d4ac:	0092      	lsls	r2, r2, #2
 800d4ae:	310c      	adds	r1, #12
 800d4b0:	300c      	adds	r0, #12
 800d4b2:	f7fc fcf6 	bl	8009ea2 <memcpy>
 800d4b6:	0021      	movs	r1, r4
 800d4b8:	0038      	movs	r0, r7
 800d4ba:	f7ff ffb2 	bl	800d422 <_Bfree>
 800d4be:	9c01      	ldr	r4, [sp, #4]
 800d4c0:	1d2b      	adds	r3, r5, #4
 800d4c2:	009b      	lsls	r3, r3, #2
 800d4c4:	18e3      	adds	r3, r4, r3
 800d4c6:	3501      	adds	r5, #1
 800d4c8:	605e      	str	r6, [r3, #4]
 800d4ca:	6125      	str	r5, [r4, #16]
 800d4cc:	0020      	movs	r0, r4
 800d4ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800d4d0 <__s2b>:
 800d4d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4d2:	0006      	movs	r6, r0
 800d4d4:	0018      	movs	r0, r3
 800d4d6:	000c      	movs	r4, r1
 800d4d8:	3008      	adds	r0, #8
 800d4da:	2109      	movs	r1, #9
 800d4dc:	9301      	str	r3, [sp, #4]
 800d4de:	0015      	movs	r5, r2
 800d4e0:	f7f2 feae 	bl	8000240 <__divsi3>
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	2100      	movs	r1, #0
 800d4e8:	4283      	cmp	r3, r0
 800d4ea:	db1f      	blt.n	800d52c <__s2b+0x5c>
 800d4ec:	0030      	movs	r0, r6
 800d4ee:	f7ff ff60 	bl	800d3b2 <_Balloc>
 800d4f2:	9b08      	ldr	r3, [sp, #32]
 800d4f4:	6143      	str	r3, [r0, #20]
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	6103      	str	r3, [r0, #16]
 800d4fa:	2d09      	cmp	r5, #9
 800d4fc:	dd19      	ble.n	800d532 <__s2b+0x62>
 800d4fe:	0023      	movs	r3, r4
 800d500:	3309      	adds	r3, #9
 800d502:	001f      	movs	r7, r3
 800d504:	9300      	str	r3, [sp, #0]
 800d506:	1964      	adds	r4, r4, r5
 800d508:	783b      	ldrb	r3, [r7, #0]
 800d50a:	0001      	movs	r1, r0
 800d50c:	3b30      	subs	r3, #48	; 0x30
 800d50e:	220a      	movs	r2, #10
 800d510:	0030      	movs	r0, r6
 800d512:	3701      	adds	r7, #1
 800d514:	f7ff ff9e 	bl	800d454 <__multadd>
 800d518:	42a7      	cmp	r7, r4
 800d51a:	d1f5      	bne.n	800d508 <__s2b+0x38>
 800d51c:	9b00      	ldr	r3, [sp, #0]
 800d51e:	195c      	adds	r4, r3, r5
 800d520:	3c08      	subs	r4, #8
 800d522:	002f      	movs	r7, r5
 800d524:	9b01      	ldr	r3, [sp, #4]
 800d526:	429f      	cmp	r7, r3
 800d528:	db06      	blt.n	800d538 <__s2b+0x68>
 800d52a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d52c:	005b      	lsls	r3, r3, #1
 800d52e:	3101      	adds	r1, #1
 800d530:	e7da      	b.n	800d4e8 <__s2b+0x18>
 800d532:	340a      	adds	r4, #10
 800d534:	2509      	movs	r5, #9
 800d536:	e7f4      	b.n	800d522 <__s2b+0x52>
 800d538:	1b63      	subs	r3, r4, r5
 800d53a:	5ddb      	ldrb	r3, [r3, r7]
 800d53c:	0001      	movs	r1, r0
 800d53e:	3b30      	subs	r3, #48	; 0x30
 800d540:	220a      	movs	r2, #10
 800d542:	0030      	movs	r0, r6
 800d544:	f7ff ff86 	bl	800d454 <__multadd>
 800d548:	3701      	adds	r7, #1
 800d54a:	e7eb      	b.n	800d524 <__s2b+0x54>

0800d54c <__hi0bits>:
 800d54c:	0003      	movs	r3, r0
 800d54e:	0c02      	lsrs	r2, r0, #16
 800d550:	2000      	movs	r0, #0
 800d552:	4282      	cmp	r2, r0
 800d554:	d101      	bne.n	800d55a <__hi0bits+0xe>
 800d556:	041b      	lsls	r3, r3, #16
 800d558:	3010      	adds	r0, #16
 800d55a:	0e1a      	lsrs	r2, r3, #24
 800d55c:	d101      	bne.n	800d562 <__hi0bits+0x16>
 800d55e:	3008      	adds	r0, #8
 800d560:	021b      	lsls	r3, r3, #8
 800d562:	0f1a      	lsrs	r2, r3, #28
 800d564:	d101      	bne.n	800d56a <__hi0bits+0x1e>
 800d566:	3004      	adds	r0, #4
 800d568:	011b      	lsls	r3, r3, #4
 800d56a:	0f9a      	lsrs	r2, r3, #30
 800d56c:	d101      	bne.n	800d572 <__hi0bits+0x26>
 800d56e:	3002      	adds	r0, #2
 800d570:	009b      	lsls	r3, r3, #2
 800d572:	2b00      	cmp	r3, #0
 800d574:	db03      	blt.n	800d57e <__hi0bits+0x32>
 800d576:	3001      	adds	r0, #1
 800d578:	005b      	lsls	r3, r3, #1
 800d57a:	d400      	bmi.n	800d57e <__hi0bits+0x32>
 800d57c:	2020      	movs	r0, #32
 800d57e:	4770      	bx	lr

0800d580 <__lo0bits>:
 800d580:	2207      	movs	r2, #7
 800d582:	6803      	ldr	r3, [r0, #0]
 800d584:	b510      	push	{r4, lr}
 800d586:	0001      	movs	r1, r0
 800d588:	401a      	ands	r2, r3
 800d58a:	d00d      	beq.n	800d5a8 <__lo0bits+0x28>
 800d58c:	2401      	movs	r4, #1
 800d58e:	2000      	movs	r0, #0
 800d590:	4223      	tst	r3, r4
 800d592:	d105      	bne.n	800d5a0 <__lo0bits+0x20>
 800d594:	3002      	adds	r0, #2
 800d596:	4203      	tst	r3, r0
 800d598:	d003      	beq.n	800d5a2 <__lo0bits+0x22>
 800d59a:	40e3      	lsrs	r3, r4
 800d59c:	0020      	movs	r0, r4
 800d59e:	600b      	str	r3, [r1, #0]
 800d5a0:	bd10      	pop	{r4, pc}
 800d5a2:	089b      	lsrs	r3, r3, #2
 800d5a4:	600b      	str	r3, [r1, #0]
 800d5a6:	e7fb      	b.n	800d5a0 <__lo0bits+0x20>
 800d5a8:	b29c      	uxth	r4, r3
 800d5aa:	0010      	movs	r0, r2
 800d5ac:	2c00      	cmp	r4, #0
 800d5ae:	d101      	bne.n	800d5b4 <__lo0bits+0x34>
 800d5b0:	2010      	movs	r0, #16
 800d5b2:	0c1b      	lsrs	r3, r3, #16
 800d5b4:	b2da      	uxtb	r2, r3
 800d5b6:	2a00      	cmp	r2, #0
 800d5b8:	d101      	bne.n	800d5be <__lo0bits+0x3e>
 800d5ba:	3008      	adds	r0, #8
 800d5bc:	0a1b      	lsrs	r3, r3, #8
 800d5be:	071a      	lsls	r2, r3, #28
 800d5c0:	d101      	bne.n	800d5c6 <__lo0bits+0x46>
 800d5c2:	3004      	adds	r0, #4
 800d5c4:	091b      	lsrs	r3, r3, #4
 800d5c6:	079a      	lsls	r2, r3, #30
 800d5c8:	d101      	bne.n	800d5ce <__lo0bits+0x4e>
 800d5ca:	3002      	adds	r0, #2
 800d5cc:	089b      	lsrs	r3, r3, #2
 800d5ce:	07da      	lsls	r2, r3, #31
 800d5d0:	d4e8      	bmi.n	800d5a4 <__lo0bits+0x24>
 800d5d2:	085b      	lsrs	r3, r3, #1
 800d5d4:	d001      	beq.n	800d5da <__lo0bits+0x5a>
 800d5d6:	3001      	adds	r0, #1
 800d5d8:	e7e4      	b.n	800d5a4 <__lo0bits+0x24>
 800d5da:	2020      	movs	r0, #32
 800d5dc:	e7e0      	b.n	800d5a0 <__lo0bits+0x20>

0800d5de <__i2b>:
 800d5de:	b510      	push	{r4, lr}
 800d5e0:	000c      	movs	r4, r1
 800d5e2:	2101      	movs	r1, #1
 800d5e4:	f7ff fee5 	bl	800d3b2 <_Balloc>
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	6144      	str	r4, [r0, #20]
 800d5ec:	6103      	str	r3, [r0, #16]
 800d5ee:	bd10      	pop	{r4, pc}

0800d5f0 <__multiply>:
 800d5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5f2:	690b      	ldr	r3, [r1, #16]
 800d5f4:	0014      	movs	r4, r2
 800d5f6:	6912      	ldr	r2, [r2, #16]
 800d5f8:	b089      	sub	sp, #36	; 0x24
 800d5fa:	000d      	movs	r5, r1
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	da01      	bge.n	800d604 <__multiply+0x14>
 800d600:	0025      	movs	r5, r4
 800d602:	000c      	movs	r4, r1
 800d604:	692f      	ldr	r7, [r5, #16]
 800d606:	6926      	ldr	r6, [r4, #16]
 800d608:	6869      	ldr	r1, [r5, #4]
 800d60a:	19bb      	adds	r3, r7, r6
 800d60c:	9302      	str	r3, [sp, #8]
 800d60e:	68ab      	ldr	r3, [r5, #8]
 800d610:	19ba      	adds	r2, r7, r6
 800d612:	4293      	cmp	r3, r2
 800d614:	da00      	bge.n	800d618 <__multiply+0x28>
 800d616:	3101      	adds	r1, #1
 800d618:	f7ff fecb 	bl	800d3b2 <_Balloc>
 800d61c:	0002      	movs	r2, r0
 800d61e:	19bb      	adds	r3, r7, r6
 800d620:	3214      	adds	r2, #20
 800d622:	009b      	lsls	r3, r3, #2
 800d624:	18d3      	adds	r3, r2, r3
 800d626:	469c      	mov	ip, r3
 800d628:	2100      	movs	r1, #0
 800d62a:	0013      	movs	r3, r2
 800d62c:	9004      	str	r0, [sp, #16]
 800d62e:	4563      	cmp	r3, ip
 800d630:	d31d      	bcc.n	800d66e <__multiply+0x7e>
 800d632:	3514      	adds	r5, #20
 800d634:	00bf      	lsls	r7, r7, #2
 800d636:	19eb      	adds	r3, r5, r7
 800d638:	3414      	adds	r4, #20
 800d63a:	00b6      	lsls	r6, r6, #2
 800d63c:	9305      	str	r3, [sp, #20]
 800d63e:	19a3      	adds	r3, r4, r6
 800d640:	9503      	str	r5, [sp, #12]
 800d642:	9401      	str	r4, [sp, #4]
 800d644:	9307      	str	r3, [sp, #28]
 800d646:	9b07      	ldr	r3, [sp, #28]
 800d648:	9901      	ldr	r1, [sp, #4]
 800d64a:	4299      	cmp	r1, r3
 800d64c:	d311      	bcc.n	800d672 <__multiply+0x82>
 800d64e:	9b02      	ldr	r3, [sp, #8]
 800d650:	2b00      	cmp	r3, #0
 800d652:	dd06      	ble.n	800d662 <__multiply+0x72>
 800d654:	2304      	movs	r3, #4
 800d656:	425b      	negs	r3, r3
 800d658:	449c      	add	ip, r3
 800d65a:	4663      	mov	r3, ip
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d051      	beq.n	800d706 <__multiply+0x116>
 800d662:	9b04      	ldr	r3, [sp, #16]
 800d664:	9a02      	ldr	r2, [sp, #8]
 800d666:	0018      	movs	r0, r3
 800d668:	611a      	str	r2, [r3, #16]
 800d66a:	b009      	add	sp, #36	; 0x24
 800d66c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d66e:	c302      	stmia	r3!, {r1}
 800d670:	e7dd      	b.n	800d62e <__multiply+0x3e>
 800d672:	9b01      	ldr	r3, [sp, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	b298      	uxth	r0, r3
 800d678:	2800      	cmp	r0, #0
 800d67a:	d01c      	beq.n	800d6b6 <__multiply+0xc6>
 800d67c:	0015      	movs	r5, r2
 800d67e:	2600      	movs	r6, #0
 800d680:	9f03      	ldr	r7, [sp, #12]
 800d682:	cf02      	ldmia	r7!, {r1}
 800d684:	682c      	ldr	r4, [r5, #0]
 800d686:	b28b      	uxth	r3, r1
 800d688:	4343      	muls	r3, r0
 800d68a:	0c09      	lsrs	r1, r1, #16
 800d68c:	4341      	muls	r1, r0
 800d68e:	b2a4      	uxth	r4, r4
 800d690:	191b      	adds	r3, r3, r4
 800d692:	199b      	adds	r3, r3, r6
 800d694:	000e      	movs	r6, r1
 800d696:	6829      	ldr	r1, [r5, #0]
 800d698:	9506      	str	r5, [sp, #24]
 800d69a:	0c09      	lsrs	r1, r1, #16
 800d69c:	1871      	adds	r1, r6, r1
 800d69e:	0c1e      	lsrs	r6, r3, #16
 800d6a0:	1989      	adds	r1, r1, r6
 800d6a2:	0c0e      	lsrs	r6, r1, #16
 800d6a4:	b29b      	uxth	r3, r3
 800d6a6:	0409      	lsls	r1, r1, #16
 800d6a8:	430b      	orrs	r3, r1
 800d6aa:	c508      	stmia	r5!, {r3}
 800d6ac:	9b05      	ldr	r3, [sp, #20]
 800d6ae:	42bb      	cmp	r3, r7
 800d6b0:	d8e7      	bhi.n	800d682 <__multiply+0x92>
 800d6b2:	9b06      	ldr	r3, [sp, #24]
 800d6b4:	605e      	str	r6, [r3, #4]
 800d6b6:	9b01      	ldr	r3, [sp, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	0c1d      	lsrs	r5, r3, #16
 800d6bc:	d01e      	beq.n	800d6fc <__multiply+0x10c>
 800d6be:	0010      	movs	r0, r2
 800d6c0:	2700      	movs	r7, #0
 800d6c2:	6813      	ldr	r3, [r2, #0]
 800d6c4:	9e03      	ldr	r6, [sp, #12]
 800d6c6:	6831      	ldr	r1, [r6, #0]
 800d6c8:	6804      	ldr	r4, [r0, #0]
 800d6ca:	b289      	uxth	r1, r1
 800d6cc:	4369      	muls	r1, r5
 800d6ce:	0c24      	lsrs	r4, r4, #16
 800d6d0:	1909      	adds	r1, r1, r4
 800d6d2:	19c9      	adds	r1, r1, r7
 800d6d4:	040f      	lsls	r7, r1, #16
 800d6d6:	b29b      	uxth	r3, r3
 800d6d8:	433b      	orrs	r3, r7
 800d6da:	6003      	str	r3, [r0, #0]
 800d6dc:	ce80      	ldmia	r6!, {r7}
 800d6de:	6843      	ldr	r3, [r0, #4]
 800d6e0:	0c3f      	lsrs	r7, r7, #16
 800d6e2:	436f      	muls	r7, r5
 800d6e4:	b29b      	uxth	r3, r3
 800d6e6:	18fb      	adds	r3, r7, r3
 800d6e8:	0c09      	lsrs	r1, r1, #16
 800d6ea:	185b      	adds	r3, r3, r1
 800d6ec:	9905      	ldr	r1, [sp, #20]
 800d6ee:	9006      	str	r0, [sp, #24]
 800d6f0:	0c1f      	lsrs	r7, r3, #16
 800d6f2:	3004      	adds	r0, #4
 800d6f4:	42b1      	cmp	r1, r6
 800d6f6:	d8e6      	bhi.n	800d6c6 <__multiply+0xd6>
 800d6f8:	9906      	ldr	r1, [sp, #24]
 800d6fa:	604b      	str	r3, [r1, #4]
 800d6fc:	9b01      	ldr	r3, [sp, #4]
 800d6fe:	3204      	adds	r2, #4
 800d700:	3304      	adds	r3, #4
 800d702:	9301      	str	r3, [sp, #4]
 800d704:	e79f      	b.n	800d646 <__multiply+0x56>
 800d706:	9b02      	ldr	r3, [sp, #8]
 800d708:	3b01      	subs	r3, #1
 800d70a:	9302      	str	r3, [sp, #8]
 800d70c:	e79f      	b.n	800d64e <__multiply+0x5e>
	...

0800d710 <__pow5mult>:
 800d710:	2303      	movs	r3, #3
 800d712:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d714:	4013      	ands	r3, r2
 800d716:	0005      	movs	r5, r0
 800d718:	000e      	movs	r6, r1
 800d71a:	0014      	movs	r4, r2
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d008      	beq.n	800d732 <__pow5mult+0x22>
 800d720:	4922      	ldr	r1, [pc, #136]	; (800d7ac <__pow5mult+0x9c>)
 800d722:	3b01      	subs	r3, #1
 800d724:	009a      	lsls	r2, r3, #2
 800d726:	5852      	ldr	r2, [r2, r1]
 800d728:	2300      	movs	r3, #0
 800d72a:	0031      	movs	r1, r6
 800d72c:	f7ff fe92 	bl	800d454 <__multadd>
 800d730:	0006      	movs	r6, r0
 800d732:	10a3      	asrs	r3, r4, #2
 800d734:	9301      	str	r3, [sp, #4]
 800d736:	d036      	beq.n	800d7a6 <__pow5mult+0x96>
 800d738:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800d73a:	2c00      	cmp	r4, #0
 800d73c:	d107      	bne.n	800d74e <__pow5mult+0x3e>
 800d73e:	2010      	movs	r0, #16
 800d740:	f7ff fe10 	bl	800d364 <malloc>
 800d744:	6268      	str	r0, [r5, #36]	; 0x24
 800d746:	6044      	str	r4, [r0, #4]
 800d748:	6084      	str	r4, [r0, #8]
 800d74a:	6004      	str	r4, [r0, #0]
 800d74c:	60c4      	str	r4, [r0, #12]
 800d74e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800d750:	68bc      	ldr	r4, [r7, #8]
 800d752:	2c00      	cmp	r4, #0
 800d754:	d107      	bne.n	800d766 <__pow5mult+0x56>
 800d756:	4916      	ldr	r1, [pc, #88]	; (800d7b0 <__pow5mult+0xa0>)
 800d758:	0028      	movs	r0, r5
 800d75a:	f7ff ff40 	bl	800d5de <__i2b>
 800d75e:	2300      	movs	r3, #0
 800d760:	0004      	movs	r4, r0
 800d762:	60b8      	str	r0, [r7, #8]
 800d764:	6003      	str	r3, [r0, #0]
 800d766:	2201      	movs	r2, #1
 800d768:	9b01      	ldr	r3, [sp, #4]
 800d76a:	4213      	tst	r3, r2
 800d76c:	d00a      	beq.n	800d784 <__pow5mult+0x74>
 800d76e:	0031      	movs	r1, r6
 800d770:	0022      	movs	r2, r4
 800d772:	0028      	movs	r0, r5
 800d774:	f7ff ff3c 	bl	800d5f0 <__multiply>
 800d778:	0007      	movs	r7, r0
 800d77a:	0031      	movs	r1, r6
 800d77c:	0028      	movs	r0, r5
 800d77e:	f7ff fe50 	bl	800d422 <_Bfree>
 800d782:	003e      	movs	r6, r7
 800d784:	9b01      	ldr	r3, [sp, #4]
 800d786:	105b      	asrs	r3, r3, #1
 800d788:	9301      	str	r3, [sp, #4]
 800d78a:	d00c      	beq.n	800d7a6 <__pow5mult+0x96>
 800d78c:	6820      	ldr	r0, [r4, #0]
 800d78e:	2800      	cmp	r0, #0
 800d790:	d107      	bne.n	800d7a2 <__pow5mult+0x92>
 800d792:	0022      	movs	r2, r4
 800d794:	0021      	movs	r1, r4
 800d796:	0028      	movs	r0, r5
 800d798:	f7ff ff2a 	bl	800d5f0 <__multiply>
 800d79c:	2300      	movs	r3, #0
 800d79e:	6020      	str	r0, [r4, #0]
 800d7a0:	6003      	str	r3, [r0, #0]
 800d7a2:	0004      	movs	r4, r0
 800d7a4:	e7df      	b.n	800d766 <__pow5mult+0x56>
 800d7a6:	0030      	movs	r0, r6
 800d7a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d7aa:	46c0      	nop			; (mov r8, r8)
 800d7ac:	0800ec58 	.word	0x0800ec58
 800d7b0:	00000271 	.word	0x00000271

0800d7b4 <__lshift>:
 800d7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7b6:	000d      	movs	r5, r1
 800d7b8:	0017      	movs	r7, r2
 800d7ba:	692b      	ldr	r3, [r5, #16]
 800d7bc:	1154      	asrs	r4, r2, #5
 800d7be:	b085      	sub	sp, #20
 800d7c0:	18e3      	adds	r3, r4, r3
 800d7c2:	9301      	str	r3, [sp, #4]
 800d7c4:	3301      	adds	r3, #1
 800d7c6:	9300      	str	r3, [sp, #0]
 800d7c8:	6849      	ldr	r1, [r1, #4]
 800d7ca:	68ab      	ldr	r3, [r5, #8]
 800d7cc:	9002      	str	r0, [sp, #8]
 800d7ce:	9a00      	ldr	r2, [sp, #0]
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	db35      	blt.n	800d840 <__lshift+0x8c>
 800d7d4:	9802      	ldr	r0, [sp, #8]
 800d7d6:	f7ff fdec 	bl	800d3b2 <_Balloc>
 800d7da:	2300      	movs	r3, #0
 800d7dc:	0002      	movs	r2, r0
 800d7de:	0006      	movs	r6, r0
 800d7e0:	0019      	movs	r1, r3
 800d7e2:	3214      	adds	r2, #20
 800d7e4:	42a3      	cmp	r3, r4
 800d7e6:	db2e      	blt.n	800d846 <__lshift+0x92>
 800d7e8:	43e3      	mvns	r3, r4
 800d7ea:	17db      	asrs	r3, r3, #31
 800d7ec:	401c      	ands	r4, r3
 800d7ee:	002b      	movs	r3, r5
 800d7f0:	00a4      	lsls	r4, r4, #2
 800d7f2:	1914      	adds	r4, r2, r4
 800d7f4:	692a      	ldr	r2, [r5, #16]
 800d7f6:	3314      	adds	r3, #20
 800d7f8:	0092      	lsls	r2, r2, #2
 800d7fa:	189a      	adds	r2, r3, r2
 800d7fc:	4694      	mov	ip, r2
 800d7fe:	221f      	movs	r2, #31
 800d800:	4017      	ands	r7, r2
 800d802:	d024      	beq.n	800d84e <__lshift+0x9a>
 800d804:	3201      	adds	r2, #1
 800d806:	1bd2      	subs	r2, r2, r7
 800d808:	9203      	str	r2, [sp, #12]
 800d80a:	2200      	movs	r2, #0
 800d80c:	6819      	ldr	r1, [r3, #0]
 800d80e:	0020      	movs	r0, r4
 800d810:	40b9      	lsls	r1, r7
 800d812:	430a      	orrs	r2, r1
 800d814:	c404      	stmia	r4!, {r2}
 800d816:	cb04      	ldmia	r3!, {r2}
 800d818:	9903      	ldr	r1, [sp, #12]
 800d81a:	40ca      	lsrs	r2, r1
 800d81c:	459c      	cmp	ip, r3
 800d81e:	d8f5      	bhi.n	800d80c <__lshift+0x58>
 800d820:	6042      	str	r2, [r0, #4]
 800d822:	2a00      	cmp	r2, #0
 800d824:	d002      	beq.n	800d82c <__lshift+0x78>
 800d826:	9b01      	ldr	r3, [sp, #4]
 800d828:	3302      	adds	r3, #2
 800d82a:	9300      	str	r3, [sp, #0]
 800d82c:	9b00      	ldr	r3, [sp, #0]
 800d82e:	9802      	ldr	r0, [sp, #8]
 800d830:	3b01      	subs	r3, #1
 800d832:	6133      	str	r3, [r6, #16]
 800d834:	0029      	movs	r1, r5
 800d836:	f7ff fdf4 	bl	800d422 <_Bfree>
 800d83a:	0030      	movs	r0, r6
 800d83c:	b005      	add	sp, #20
 800d83e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d840:	3101      	adds	r1, #1
 800d842:	005b      	lsls	r3, r3, #1
 800d844:	e7c3      	b.n	800d7ce <__lshift+0x1a>
 800d846:	0098      	lsls	r0, r3, #2
 800d848:	5011      	str	r1, [r2, r0]
 800d84a:	3301      	adds	r3, #1
 800d84c:	e7ca      	b.n	800d7e4 <__lshift+0x30>
 800d84e:	cb04      	ldmia	r3!, {r2}
 800d850:	c404      	stmia	r4!, {r2}
 800d852:	459c      	cmp	ip, r3
 800d854:	d8fb      	bhi.n	800d84e <__lshift+0x9a>
 800d856:	e7e9      	b.n	800d82c <__lshift+0x78>

0800d858 <__mcmp>:
 800d858:	690a      	ldr	r2, [r1, #16]
 800d85a:	6903      	ldr	r3, [r0, #16]
 800d85c:	b530      	push	{r4, r5, lr}
 800d85e:	1a9b      	subs	r3, r3, r2
 800d860:	d10d      	bne.n	800d87e <__mcmp+0x26>
 800d862:	0092      	lsls	r2, r2, #2
 800d864:	3014      	adds	r0, #20
 800d866:	3114      	adds	r1, #20
 800d868:	1884      	adds	r4, r0, r2
 800d86a:	1889      	adds	r1, r1, r2
 800d86c:	3c04      	subs	r4, #4
 800d86e:	3904      	subs	r1, #4
 800d870:	6825      	ldr	r5, [r4, #0]
 800d872:	680a      	ldr	r2, [r1, #0]
 800d874:	4295      	cmp	r5, r2
 800d876:	d004      	beq.n	800d882 <__mcmp+0x2a>
 800d878:	2301      	movs	r3, #1
 800d87a:	4295      	cmp	r5, r2
 800d87c:	d304      	bcc.n	800d888 <__mcmp+0x30>
 800d87e:	0018      	movs	r0, r3
 800d880:	bd30      	pop	{r4, r5, pc}
 800d882:	42a0      	cmp	r0, r4
 800d884:	d3f2      	bcc.n	800d86c <__mcmp+0x14>
 800d886:	e7fa      	b.n	800d87e <__mcmp+0x26>
 800d888:	425b      	negs	r3, r3
 800d88a:	e7f8      	b.n	800d87e <__mcmp+0x26>

0800d88c <__mdiff>:
 800d88c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d88e:	000d      	movs	r5, r1
 800d890:	b085      	sub	sp, #20
 800d892:	0007      	movs	r7, r0
 800d894:	0011      	movs	r1, r2
 800d896:	0028      	movs	r0, r5
 800d898:	0014      	movs	r4, r2
 800d89a:	f7ff ffdd 	bl	800d858 <__mcmp>
 800d89e:	1e06      	subs	r6, r0, #0
 800d8a0:	d108      	bne.n	800d8b4 <__mdiff+0x28>
 800d8a2:	0001      	movs	r1, r0
 800d8a4:	0038      	movs	r0, r7
 800d8a6:	f7ff fd84 	bl	800d3b2 <_Balloc>
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	6146      	str	r6, [r0, #20]
 800d8ae:	6103      	str	r3, [r0, #16]
 800d8b0:	b005      	add	sp, #20
 800d8b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	9301      	str	r3, [sp, #4]
 800d8b8:	2800      	cmp	r0, #0
 800d8ba:	db04      	blt.n	800d8c6 <__mdiff+0x3a>
 800d8bc:	0023      	movs	r3, r4
 800d8be:	002c      	movs	r4, r5
 800d8c0:	001d      	movs	r5, r3
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	9301      	str	r3, [sp, #4]
 800d8c6:	6861      	ldr	r1, [r4, #4]
 800d8c8:	0038      	movs	r0, r7
 800d8ca:	f7ff fd72 	bl	800d3b2 <_Balloc>
 800d8ce:	002f      	movs	r7, r5
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	9b01      	ldr	r3, [sp, #4]
 800d8d4:	6926      	ldr	r6, [r4, #16]
 800d8d6:	60c3      	str	r3, [r0, #12]
 800d8d8:	3414      	adds	r4, #20
 800d8da:	00b3      	lsls	r3, r6, #2
 800d8dc:	18e3      	adds	r3, r4, r3
 800d8de:	9302      	str	r3, [sp, #8]
 800d8e0:	692b      	ldr	r3, [r5, #16]
 800d8e2:	3714      	adds	r7, #20
 800d8e4:	009b      	lsls	r3, r3, #2
 800d8e6:	18fb      	adds	r3, r7, r3
 800d8e8:	9303      	str	r3, [sp, #12]
 800d8ea:	0003      	movs	r3, r0
 800d8ec:	4694      	mov	ip, r2
 800d8ee:	3314      	adds	r3, #20
 800d8f0:	cc20      	ldmia	r4!, {r5}
 800d8f2:	cf04      	ldmia	r7!, {r2}
 800d8f4:	9201      	str	r2, [sp, #4]
 800d8f6:	b2aa      	uxth	r2, r5
 800d8f8:	4494      	add	ip, r2
 800d8fa:	466a      	mov	r2, sp
 800d8fc:	4661      	mov	r1, ip
 800d8fe:	8892      	ldrh	r2, [r2, #4]
 800d900:	0c2d      	lsrs	r5, r5, #16
 800d902:	1a8a      	subs	r2, r1, r2
 800d904:	9901      	ldr	r1, [sp, #4]
 800d906:	0c09      	lsrs	r1, r1, #16
 800d908:	1a69      	subs	r1, r5, r1
 800d90a:	1415      	asrs	r5, r2, #16
 800d90c:	1949      	adds	r1, r1, r5
 800d90e:	140d      	asrs	r5, r1, #16
 800d910:	b292      	uxth	r2, r2
 800d912:	0409      	lsls	r1, r1, #16
 800d914:	430a      	orrs	r2, r1
 800d916:	601a      	str	r2, [r3, #0]
 800d918:	9a03      	ldr	r2, [sp, #12]
 800d91a:	46ac      	mov	ip, r5
 800d91c:	3304      	adds	r3, #4
 800d91e:	42ba      	cmp	r2, r7
 800d920:	d8e6      	bhi.n	800d8f0 <__mdiff+0x64>
 800d922:	9902      	ldr	r1, [sp, #8]
 800d924:	001a      	movs	r2, r3
 800d926:	428c      	cmp	r4, r1
 800d928:	d305      	bcc.n	800d936 <__mdiff+0xaa>
 800d92a:	3a04      	subs	r2, #4
 800d92c:	6813      	ldr	r3, [r2, #0]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d00e      	beq.n	800d950 <__mdiff+0xc4>
 800d932:	6106      	str	r6, [r0, #16]
 800d934:	e7bc      	b.n	800d8b0 <__mdiff+0x24>
 800d936:	cc04      	ldmia	r4!, {r2}
 800d938:	b291      	uxth	r1, r2
 800d93a:	4461      	add	r1, ip
 800d93c:	140d      	asrs	r5, r1, #16
 800d93e:	0c12      	lsrs	r2, r2, #16
 800d940:	1952      	adds	r2, r2, r5
 800d942:	1415      	asrs	r5, r2, #16
 800d944:	b289      	uxth	r1, r1
 800d946:	0412      	lsls	r2, r2, #16
 800d948:	430a      	orrs	r2, r1
 800d94a:	46ac      	mov	ip, r5
 800d94c:	c304      	stmia	r3!, {r2}
 800d94e:	e7e8      	b.n	800d922 <__mdiff+0x96>
 800d950:	3e01      	subs	r6, #1
 800d952:	e7ea      	b.n	800d92a <__mdiff+0x9e>

0800d954 <__ulp>:
 800d954:	000b      	movs	r3, r1
 800d956:	4910      	ldr	r1, [pc, #64]	; (800d998 <__ulp+0x44>)
 800d958:	b510      	push	{r4, lr}
 800d95a:	4019      	ands	r1, r3
 800d95c:	4b0f      	ldr	r3, [pc, #60]	; (800d99c <__ulp+0x48>)
 800d95e:	18c9      	adds	r1, r1, r3
 800d960:	2900      	cmp	r1, #0
 800d962:	dd04      	ble.n	800d96e <__ulp+0x1a>
 800d964:	2200      	movs	r2, #0
 800d966:	000b      	movs	r3, r1
 800d968:	0010      	movs	r0, r2
 800d96a:	0019      	movs	r1, r3
 800d96c:	bd10      	pop	{r4, pc}
 800d96e:	4249      	negs	r1, r1
 800d970:	1509      	asrs	r1, r1, #20
 800d972:	2200      	movs	r2, #0
 800d974:	2300      	movs	r3, #0
 800d976:	2913      	cmp	r1, #19
 800d978:	dc04      	bgt.n	800d984 <__ulp+0x30>
 800d97a:	2080      	movs	r0, #128	; 0x80
 800d97c:	0300      	lsls	r0, r0, #12
 800d97e:	4108      	asrs	r0, r1
 800d980:	0003      	movs	r3, r0
 800d982:	e7f1      	b.n	800d968 <__ulp+0x14>
 800d984:	3914      	subs	r1, #20
 800d986:	2001      	movs	r0, #1
 800d988:	291e      	cmp	r1, #30
 800d98a:	dc02      	bgt.n	800d992 <__ulp+0x3e>
 800d98c:	241f      	movs	r4, #31
 800d98e:	1a61      	subs	r1, r4, r1
 800d990:	4088      	lsls	r0, r1
 800d992:	0002      	movs	r2, r0
 800d994:	e7e8      	b.n	800d968 <__ulp+0x14>
 800d996:	46c0      	nop			; (mov r8, r8)
 800d998:	7ff00000 	.word	0x7ff00000
 800d99c:	fcc00000 	.word	0xfcc00000

0800d9a0 <__b2d>:
 800d9a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d9a2:	0006      	movs	r6, r0
 800d9a4:	6903      	ldr	r3, [r0, #16]
 800d9a6:	3614      	adds	r6, #20
 800d9a8:	009b      	lsls	r3, r3, #2
 800d9aa:	18f3      	adds	r3, r6, r3
 800d9ac:	1f1d      	subs	r5, r3, #4
 800d9ae:	682c      	ldr	r4, [r5, #0]
 800d9b0:	000f      	movs	r7, r1
 800d9b2:	0020      	movs	r0, r4
 800d9b4:	9301      	str	r3, [sp, #4]
 800d9b6:	f7ff fdc9 	bl	800d54c <__hi0bits>
 800d9ba:	2320      	movs	r3, #32
 800d9bc:	1a1b      	subs	r3, r3, r0
 800d9be:	603b      	str	r3, [r7, #0]
 800d9c0:	491c      	ldr	r1, [pc, #112]	; (800da34 <__b2d+0x94>)
 800d9c2:	280a      	cmp	r0, #10
 800d9c4:	dc16      	bgt.n	800d9f4 <__b2d+0x54>
 800d9c6:	230b      	movs	r3, #11
 800d9c8:	0027      	movs	r7, r4
 800d9ca:	1a1b      	subs	r3, r3, r0
 800d9cc:	40df      	lsrs	r7, r3
 800d9ce:	4339      	orrs	r1, r7
 800d9d0:	469c      	mov	ip, r3
 800d9d2:	000b      	movs	r3, r1
 800d9d4:	2100      	movs	r1, #0
 800d9d6:	42ae      	cmp	r6, r5
 800d9d8:	d202      	bcs.n	800d9e0 <__b2d+0x40>
 800d9da:	9901      	ldr	r1, [sp, #4]
 800d9dc:	3908      	subs	r1, #8
 800d9de:	6809      	ldr	r1, [r1, #0]
 800d9e0:	3015      	adds	r0, #21
 800d9e2:	4084      	lsls	r4, r0
 800d9e4:	4660      	mov	r0, ip
 800d9e6:	40c1      	lsrs	r1, r0
 800d9e8:	430c      	orrs	r4, r1
 800d9ea:	0022      	movs	r2, r4
 800d9ec:	0010      	movs	r0, r2
 800d9ee:	0019      	movs	r1, r3
 800d9f0:	b003      	add	sp, #12
 800d9f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9f4:	2700      	movs	r7, #0
 800d9f6:	42ae      	cmp	r6, r5
 800d9f8:	d202      	bcs.n	800da00 <__b2d+0x60>
 800d9fa:	9d01      	ldr	r5, [sp, #4]
 800d9fc:	3d08      	subs	r5, #8
 800d9fe:	682f      	ldr	r7, [r5, #0]
 800da00:	380b      	subs	r0, #11
 800da02:	4684      	mov	ip, r0
 800da04:	1e03      	subs	r3, r0, #0
 800da06:	d012      	beq.n	800da2e <__b2d+0x8e>
 800da08:	409c      	lsls	r4, r3
 800da0a:	2020      	movs	r0, #32
 800da0c:	4321      	orrs	r1, r4
 800da0e:	003c      	movs	r4, r7
 800da10:	1ac0      	subs	r0, r0, r3
 800da12:	40c4      	lsrs	r4, r0
 800da14:	4321      	orrs	r1, r4
 800da16:	000b      	movs	r3, r1
 800da18:	2100      	movs	r1, #0
 800da1a:	42b5      	cmp	r5, r6
 800da1c:	d901      	bls.n	800da22 <__b2d+0x82>
 800da1e:	3d04      	subs	r5, #4
 800da20:	6829      	ldr	r1, [r5, #0]
 800da22:	4664      	mov	r4, ip
 800da24:	40c1      	lsrs	r1, r0
 800da26:	40a7      	lsls	r7, r4
 800da28:	430f      	orrs	r7, r1
 800da2a:	003a      	movs	r2, r7
 800da2c:	e7de      	b.n	800d9ec <__b2d+0x4c>
 800da2e:	4321      	orrs	r1, r4
 800da30:	000b      	movs	r3, r1
 800da32:	e7fa      	b.n	800da2a <__b2d+0x8a>
 800da34:	3ff00000 	.word	0x3ff00000

0800da38 <__d2b>:
 800da38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da3a:	001d      	movs	r5, r3
 800da3c:	2101      	movs	r1, #1
 800da3e:	0014      	movs	r4, r2
 800da40:	9f08      	ldr	r7, [sp, #32]
 800da42:	f7ff fcb6 	bl	800d3b2 <_Balloc>
 800da46:	032b      	lsls	r3, r5, #12
 800da48:	006d      	lsls	r5, r5, #1
 800da4a:	0006      	movs	r6, r0
 800da4c:	0b1b      	lsrs	r3, r3, #12
 800da4e:	0d6d      	lsrs	r5, r5, #21
 800da50:	d124      	bne.n	800da9c <__d2b+0x64>
 800da52:	9301      	str	r3, [sp, #4]
 800da54:	2c00      	cmp	r4, #0
 800da56:	d027      	beq.n	800daa8 <__d2b+0x70>
 800da58:	4668      	mov	r0, sp
 800da5a:	9400      	str	r4, [sp, #0]
 800da5c:	f7ff fd90 	bl	800d580 <__lo0bits>
 800da60:	9c00      	ldr	r4, [sp, #0]
 800da62:	2800      	cmp	r0, #0
 800da64:	d01e      	beq.n	800daa4 <__d2b+0x6c>
 800da66:	9b01      	ldr	r3, [sp, #4]
 800da68:	2120      	movs	r1, #32
 800da6a:	001a      	movs	r2, r3
 800da6c:	1a09      	subs	r1, r1, r0
 800da6e:	408a      	lsls	r2, r1
 800da70:	40c3      	lsrs	r3, r0
 800da72:	4322      	orrs	r2, r4
 800da74:	6172      	str	r2, [r6, #20]
 800da76:	9301      	str	r3, [sp, #4]
 800da78:	9c01      	ldr	r4, [sp, #4]
 800da7a:	61b4      	str	r4, [r6, #24]
 800da7c:	1e63      	subs	r3, r4, #1
 800da7e:	419c      	sbcs	r4, r3
 800da80:	3401      	adds	r4, #1
 800da82:	6134      	str	r4, [r6, #16]
 800da84:	2d00      	cmp	r5, #0
 800da86:	d018      	beq.n	800daba <__d2b+0x82>
 800da88:	4b12      	ldr	r3, [pc, #72]	; (800dad4 <__d2b+0x9c>)
 800da8a:	18ed      	adds	r5, r5, r3
 800da8c:	2335      	movs	r3, #53	; 0x35
 800da8e:	182d      	adds	r5, r5, r0
 800da90:	603d      	str	r5, [r7, #0]
 800da92:	1a18      	subs	r0, r3, r0
 800da94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da96:	6018      	str	r0, [r3, #0]
 800da98:	0030      	movs	r0, r6
 800da9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800da9c:	2280      	movs	r2, #128	; 0x80
 800da9e:	0352      	lsls	r2, r2, #13
 800daa0:	4313      	orrs	r3, r2
 800daa2:	e7d6      	b.n	800da52 <__d2b+0x1a>
 800daa4:	6174      	str	r4, [r6, #20]
 800daa6:	e7e7      	b.n	800da78 <__d2b+0x40>
 800daa8:	a801      	add	r0, sp, #4
 800daaa:	f7ff fd69 	bl	800d580 <__lo0bits>
 800daae:	2401      	movs	r4, #1
 800dab0:	9b01      	ldr	r3, [sp, #4]
 800dab2:	6134      	str	r4, [r6, #16]
 800dab4:	6173      	str	r3, [r6, #20]
 800dab6:	3020      	adds	r0, #32
 800dab8:	e7e4      	b.n	800da84 <__d2b+0x4c>
 800daba:	4b07      	ldr	r3, [pc, #28]	; (800dad8 <__d2b+0xa0>)
 800dabc:	18c0      	adds	r0, r0, r3
 800dabe:	4b07      	ldr	r3, [pc, #28]	; (800dadc <__d2b+0xa4>)
 800dac0:	6038      	str	r0, [r7, #0]
 800dac2:	18e3      	adds	r3, r4, r3
 800dac4:	009b      	lsls	r3, r3, #2
 800dac6:	18f3      	adds	r3, r6, r3
 800dac8:	6958      	ldr	r0, [r3, #20]
 800daca:	f7ff fd3f 	bl	800d54c <__hi0bits>
 800dace:	0164      	lsls	r4, r4, #5
 800dad0:	1a20      	subs	r0, r4, r0
 800dad2:	e7df      	b.n	800da94 <__d2b+0x5c>
 800dad4:	fffffbcd 	.word	0xfffffbcd
 800dad8:	fffffbce 	.word	0xfffffbce
 800dadc:	3fffffff 	.word	0x3fffffff

0800dae0 <__ratio>:
 800dae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dae2:	b085      	sub	sp, #20
 800dae4:	000f      	movs	r7, r1
 800dae6:	a902      	add	r1, sp, #8
 800dae8:	0006      	movs	r6, r0
 800daea:	f7ff ff59 	bl	800d9a0 <__b2d>
 800daee:	0004      	movs	r4, r0
 800daf0:	000d      	movs	r5, r1
 800daf2:	0038      	movs	r0, r7
 800daf4:	a903      	add	r1, sp, #12
 800daf6:	9400      	str	r4, [sp, #0]
 800daf8:	9501      	str	r5, [sp, #4]
 800dafa:	f7ff ff51 	bl	800d9a0 <__b2d>
 800dafe:	6936      	ldr	r6, [r6, #16]
 800db00:	693f      	ldr	r7, [r7, #16]
 800db02:	0002      	movs	r2, r0
 800db04:	1bf7      	subs	r7, r6, r7
 800db06:	017e      	lsls	r6, r7, #5
 800db08:	46b4      	mov	ip, r6
 800db0a:	9f03      	ldr	r7, [sp, #12]
 800db0c:	9e02      	ldr	r6, [sp, #8]
 800db0e:	000b      	movs	r3, r1
 800db10:	1bf6      	subs	r6, r6, r7
 800db12:	4466      	add	r6, ip
 800db14:	0537      	lsls	r7, r6, #20
 800db16:	2e00      	cmp	r6, #0
 800db18:	dd07      	ble.n	800db2a <__ratio+0x4a>
 800db1a:	1979      	adds	r1, r7, r5
 800db1c:	9101      	str	r1, [sp, #4]
 800db1e:	9800      	ldr	r0, [sp, #0]
 800db20:	9901      	ldr	r1, [sp, #4]
 800db22:	f7f3 fd8f 	bl	8001644 <__aeabi_ddiv>
 800db26:	b005      	add	sp, #20
 800db28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db2a:	1bcb      	subs	r3, r1, r7
 800db2c:	e7f7      	b.n	800db1e <__ratio+0x3e>

0800db2e <__copybits>:
 800db2e:	0013      	movs	r3, r2
 800db30:	3901      	subs	r1, #1
 800db32:	b510      	push	{r4, lr}
 800db34:	1149      	asrs	r1, r1, #5
 800db36:	6912      	ldr	r2, [r2, #16]
 800db38:	3101      	adds	r1, #1
 800db3a:	0089      	lsls	r1, r1, #2
 800db3c:	3314      	adds	r3, #20
 800db3e:	0092      	lsls	r2, r2, #2
 800db40:	1841      	adds	r1, r0, r1
 800db42:	189a      	adds	r2, r3, r2
 800db44:	429a      	cmp	r2, r3
 800db46:	d803      	bhi.n	800db50 <__copybits+0x22>
 800db48:	2300      	movs	r3, #0
 800db4a:	4281      	cmp	r1, r0
 800db4c:	d803      	bhi.n	800db56 <__copybits+0x28>
 800db4e:	bd10      	pop	{r4, pc}
 800db50:	cb10      	ldmia	r3!, {r4}
 800db52:	c010      	stmia	r0!, {r4}
 800db54:	e7f6      	b.n	800db44 <__copybits+0x16>
 800db56:	c008      	stmia	r0!, {r3}
 800db58:	e7f7      	b.n	800db4a <__copybits+0x1c>

0800db5a <__any_on>:
 800db5a:	0002      	movs	r2, r0
 800db5c:	6900      	ldr	r0, [r0, #16]
 800db5e:	b510      	push	{r4, lr}
 800db60:	3214      	adds	r2, #20
 800db62:	114b      	asrs	r3, r1, #5
 800db64:	4298      	cmp	r0, r3
 800db66:	db12      	blt.n	800db8e <__any_on+0x34>
 800db68:	dd0b      	ble.n	800db82 <__any_on+0x28>
 800db6a:	201f      	movs	r0, #31
 800db6c:	4001      	ands	r1, r0
 800db6e:	d008      	beq.n	800db82 <__any_on+0x28>
 800db70:	0098      	lsls	r0, r3, #2
 800db72:	5884      	ldr	r4, [r0, r2]
 800db74:	0020      	movs	r0, r4
 800db76:	40c8      	lsrs	r0, r1
 800db78:	4088      	lsls	r0, r1
 800db7a:	0001      	movs	r1, r0
 800db7c:	2001      	movs	r0, #1
 800db7e:	428c      	cmp	r4, r1
 800db80:	d104      	bne.n	800db8c <__any_on+0x32>
 800db82:	009b      	lsls	r3, r3, #2
 800db84:	18d3      	adds	r3, r2, r3
 800db86:	4293      	cmp	r3, r2
 800db88:	d803      	bhi.n	800db92 <__any_on+0x38>
 800db8a:	2000      	movs	r0, #0
 800db8c:	bd10      	pop	{r4, pc}
 800db8e:	0003      	movs	r3, r0
 800db90:	e7f7      	b.n	800db82 <__any_on+0x28>
 800db92:	3b04      	subs	r3, #4
 800db94:	6819      	ldr	r1, [r3, #0]
 800db96:	2900      	cmp	r1, #0
 800db98:	d0f5      	beq.n	800db86 <__any_on+0x2c>
 800db9a:	2001      	movs	r0, #1
 800db9c:	e7f6      	b.n	800db8c <__any_on+0x32>

0800db9e <_calloc_r>:
 800db9e:	434a      	muls	r2, r1
 800dba0:	b570      	push	{r4, r5, r6, lr}
 800dba2:	0011      	movs	r1, r2
 800dba4:	0014      	movs	r4, r2
 800dba6:	f000 f853 	bl	800dc50 <_malloc_r>
 800dbaa:	1e05      	subs	r5, r0, #0
 800dbac:	d003      	beq.n	800dbb6 <_calloc_r+0x18>
 800dbae:	0022      	movs	r2, r4
 800dbb0:	2100      	movs	r1, #0
 800dbb2:	f7fc f97f 	bl	8009eb4 <memset>
 800dbb6:	0028      	movs	r0, r5
 800dbb8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dbbc <_free_r>:
 800dbbc:	b570      	push	{r4, r5, r6, lr}
 800dbbe:	0005      	movs	r5, r0
 800dbc0:	2900      	cmp	r1, #0
 800dbc2:	d010      	beq.n	800dbe6 <_free_r+0x2a>
 800dbc4:	1f0c      	subs	r4, r1, #4
 800dbc6:	6823      	ldr	r3, [r4, #0]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	da00      	bge.n	800dbce <_free_r+0x12>
 800dbcc:	18e4      	adds	r4, r4, r3
 800dbce:	0028      	movs	r0, r5
 800dbd0:	f000 fc27 	bl	800e422 <__malloc_lock>
 800dbd4:	4a1d      	ldr	r2, [pc, #116]	; (800dc4c <_free_r+0x90>)
 800dbd6:	6813      	ldr	r3, [r2, #0]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d105      	bne.n	800dbe8 <_free_r+0x2c>
 800dbdc:	6063      	str	r3, [r4, #4]
 800dbde:	6014      	str	r4, [r2, #0]
 800dbe0:	0028      	movs	r0, r5
 800dbe2:	f000 fc1f 	bl	800e424 <__malloc_unlock>
 800dbe6:	bd70      	pop	{r4, r5, r6, pc}
 800dbe8:	42a3      	cmp	r3, r4
 800dbea:	d909      	bls.n	800dc00 <_free_r+0x44>
 800dbec:	6821      	ldr	r1, [r4, #0]
 800dbee:	1860      	adds	r0, r4, r1
 800dbf0:	4283      	cmp	r3, r0
 800dbf2:	d1f3      	bne.n	800dbdc <_free_r+0x20>
 800dbf4:	6818      	ldr	r0, [r3, #0]
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	1841      	adds	r1, r0, r1
 800dbfa:	6021      	str	r1, [r4, #0]
 800dbfc:	e7ee      	b.n	800dbdc <_free_r+0x20>
 800dbfe:	0013      	movs	r3, r2
 800dc00:	685a      	ldr	r2, [r3, #4]
 800dc02:	2a00      	cmp	r2, #0
 800dc04:	d001      	beq.n	800dc0a <_free_r+0x4e>
 800dc06:	42a2      	cmp	r2, r4
 800dc08:	d9f9      	bls.n	800dbfe <_free_r+0x42>
 800dc0a:	6819      	ldr	r1, [r3, #0]
 800dc0c:	1858      	adds	r0, r3, r1
 800dc0e:	42a0      	cmp	r0, r4
 800dc10:	d10b      	bne.n	800dc2a <_free_r+0x6e>
 800dc12:	6820      	ldr	r0, [r4, #0]
 800dc14:	1809      	adds	r1, r1, r0
 800dc16:	1858      	adds	r0, r3, r1
 800dc18:	6019      	str	r1, [r3, #0]
 800dc1a:	4282      	cmp	r2, r0
 800dc1c:	d1e0      	bne.n	800dbe0 <_free_r+0x24>
 800dc1e:	6810      	ldr	r0, [r2, #0]
 800dc20:	6852      	ldr	r2, [r2, #4]
 800dc22:	1841      	adds	r1, r0, r1
 800dc24:	6019      	str	r1, [r3, #0]
 800dc26:	605a      	str	r2, [r3, #4]
 800dc28:	e7da      	b.n	800dbe0 <_free_r+0x24>
 800dc2a:	42a0      	cmp	r0, r4
 800dc2c:	d902      	bls.n	800dc34 <_free_r+0x78>
 800dc2e:	230c      	movs	r3, #12
 800dc30:	602b      	str	r3, [r5, #0]
 800dc32:	e7d5      	b.n	800dbe0 <_free_r+0x24>
 800dc34:	6821      	ldr	r1, [r4, #0]
 800dc36:	1860      	adds	r0, r4, r1
 800dc38:	4282      	cmp	r2, r0
 800dc3a:	d103      	bne.n	800dc44 <_free_r+0x88>
 800dc3c:	6810      	ldr	r0, [r2, #0]
 800dc3e:	6852      	ldr	r2, [r2, #4]
 800dc40:	1841      	adds	r1, r0, r1
 800dc42:	6021      	str	r1, [r4, #0]
 800dc44:	6062      	str	r2, [r4, #4]
 800dc46:	605c      	str	r4, [r3, #4]
 800dc48:	e7ca      	b.n	800dbe0 <_free_r+0x24>
 800dc4a:	46c0      	nop			; (mov r8, r8)
 800dc4c:	20000670 	.word	0x20000670

0800dc50 <_malloc_r>:
 800dc50:	2303      	movs	r3, #3
 800dc52:	b570      	push	{r4, r5, r6, lr}
 800dc54:	1ccd      	adds	r5, r1, #3
 800dc56:	439d      	bics	r5, r3
 800dc58:	3508      	adds	r5, #8
 800dc5a:	0006      	movs	r6, r0
 800dc5c:	2d0c      	cmp	r5, #12
 800dc5e:	d21e      	bcs.n	800dc9e <_malloc_r+0x4e>
 800dc60:	250c      	movs	r5, #12
 800dc62:	42a9      	cmp	r1, r5
 800dc64:	d81d      	bhi.n	800dca2 <_malloc_r+0x52>
 800dc66:	0030      	movs	r0, r6
 800dc68:	f000 fbdb 	bl	800e422 <__malloc_lock>
 800dc6c:	4a25      	ldr	r2, [pc, #148]	; (800dd04 <_malloc_r+0xb4>)
 800dc6e:	6814      	ldr	r4, [r2, #0]
 800dc70:	0021      	movs	r1, r4
 800dc72:	2900      	cmp	r1, #0
 800dc74:	d119      	bne.n	800dcaa <_malloc_r+0x5a>
 800dc76:	4c24      	ldr	r4, [pc, #144]	; (800dd08 <_malloc_r+0xb8>)
 800dc78:	6823      	ldr	r3, [r4, #0]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d103      	bne.n	800dc86 <_malloc_r+0x36>
 800dc7e:	0030      	movs	r0, r6
 800dc80:	f000 fae2 	bl	800e248 <_sbrk_r>
 800dc84:	6020      	str	r0, [r4, #0]
 800dc86:	0029      	movs	r1, r5
 800dc88:	0030      	movs	r0, r6
 800dc8a:	f000 fadd 	bl	800e248 <_sbrk_r>
 800dc8e:	1c43      	adds	r3, r0, #1
 800dc90:	d12b      	bne.n	800dcea <_malloc_r+0x9a>
 800dc92:	230c      	movs	r3, #12
 800dc94:	0030      	movs	r0, r6
 800dc96:	6033      	str	r3, [r6, #0]
 800dc98:	f000 fbc4 	bl	800e424 <__malloc_unlock>
 800dc9c:	e003      	b.n	800dca6 <_malloc_r+0x56>
 800dc9e:	2d00      	cmp	r5, #0
 800dca0:	dadf      	bge.n	800dc62 <_malloc_r+0x12>
 800dca2:	230c      	movs	r3, #12
 800dca4:	6033      	str	r3, [r6, #0]
 800dca6:	2000      	movs	r0, #0
 800dca8:	bd70      	pop	{r4, r5, r6, pc}
 800dcaa:	680b      	ldr	r3, [r1, #0]
 800dcac:	1b5b      	subs	r3, r3, r5
 800dcae:	d419      	bmi.n	800dce4 <_malloc_r+0x94>
 800dcb0:	2b0b      	cmp	r3, #11
 800dcb2:	d903      	bls.n	800dcbc <_malloc_r+0x6c>
 800dcb4:	600b      	str	r3, [r1, #0]
 800dcb6:	18cc      	adds	r4, r1, r3
 800dcb8:	6025      	str	r5, [r4, #0]
 800dcba:	e003      	b.n	800dcc4 <_malloc_r+0x74>
 800dcbc:	684b      	ldr	r3, [r1, #4]
 800dcbe:	428c      	cmp	r4, r1
 800dcc0:	d10d      	bne.n	800dcde <_malloc_r+0x8e>
 800dcc2:	6013      	str	r3, [r2, #0]
 800dcc4:	0030      	movs	r0, r6
 800dcc6:	f000 fbad 	bl	800e424 <__malloc_unlock>
 800dcca:	0020      	movs	r0, r4
 800dccc:	2207      	movs	r2, #7
 800dcce:	300b      	adds	r0, #11
 800dcd0:	1d23      	adds	r3, r4, #4
 800dcd2:	4390      	bics	r0, r2
 800dcd4:	1ac3      	subs	r3, r0, r3
 800dcd6:	d0e7      	beq.n	800dca8 <_malloc_r+0x58>
 800dcd8:	425a      	negs	r2, r3
 800dcda:	50e2      	str	r2, [r4, r3]
 800dcdc:	e7e4      	b.n	800dca8 <_malloc_r+0x58>
 800dcde:	6063      	str	r3, [r4, #4]
 800dce0:	000c      	movs	r4, r1
 800dce2:	e7ef      	b.n	800dcc4 <_malloc_r+0x74>
 800dce4:	000c      	movs	r4, r1
 800dce6:	6849      	ldr	r1, [r1, #4]
 800dce8:	e7c3      	b.n	800dc72 <_malloc_r+0x22>
 800dcea:	2303      	movs	r3, #3
 800dcec:	1cc4      	adds	r4, r0, #3
 800dcee:	439c      	bics	r4, r3
 800dcf0:	42a0      	cmp	r0, r4
 800dcf2:	d0e1      	beq.n	800dcb8 <_malloc_r+0x68>
 800dcf4:	1a21      	subs	r1, r4, r0
 800dcf6:	0030      	movs	r0, r6
 800dcf8:	f000 faa6 	bl	800e248 <_sbrk_r>
 800dcfc:	1c43      	adds	r3, r0, #1
 800dcfe:	d1db      	bne.n	800dcb8 <_malloc_r+0x68>
 800dd00:	e7c7      	b.n	800dc92 <_malloc_r+0x42>
 800dd02:	46c0      	nop			; (mov r8, r8)
 800dd04:	20000670 	.word	0x20000670
 800dd08:	20000674 	.word	0x20000674

0800dd0c <__ssputs_r>:
 800dd0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd0e:	688e      	ldr	r6, [r1, #8]
 800dd10:	b085      	sub	sp, #20
 800dd12:	0007      	movs	r7, r0
 800dd14:	000c      	movs	r4, r1
 800dd16:	9203      	str	r2, [sp, #12]
 800dd18:	9301      	str	r3, [sp, #4]
 800dd1a:	429e      	cmp	r6, r3
 800dd1c:	d83c      	bhi.n	800dd98 <__ssputs_r+0x8c>
 800dd1e:	2390      	movs	r3, #144	; 0x90
 800dd20:	898a      	ldrh	r2, [r1, #12]
 800dd22:	00db      	lsls	r3, r3, #3
 800dd24:	421a      	tst	r2, r3
 800dd26:	d034      	beq.n	800dd92 <__ssputs_r+0x86>
 800dd28:	2503      	movs	r5, #3
 800dd2a:	6909      	ldr	r1, [r1, #16]
 800dd2c:	6823      	ldr	r3, [r4, #0]
 800dd2e:	1a5b      	subs	r3, r3, r1
 800dd30:	9302      	str	r3, [sp, #8]
 800dd32:	6963      	ldr	r3, [r4, #20]
 800dd34:	9802      	ldr	r0, [sp, #8]
 800dd36:	435d      	muls	r5, r3
 800dd38:	0feb      	lsrs	r3, r5, #31
 800dd3a:	195d      	adds	r5, r3, r5
 800dd3c:	9b01      	ldr	r3, [sp, #4]
 800dd3e:	106d      	asrs	r5, r5, #1
 800dd40:	3301      	adds	r3, #1
 800dd42:	181b      	adds	r3, r3, r0
 800dd44:	42ab      	cmp	r3, r5
 800dd46:	d900      	bls.n	800dd4a <__ssputs_r+0x3e>
 800dd48:	001d      	movs	r5, r3
 800dd4a:	0553      	lsls	r3, r2, #21
 800dd4c:	d532      	bpl.n	800ddb4 <__ssputs_r+0xa8>
 800dd4e:	0029      	movs	r1, r5
 800dd50:	0038      	movs	r0, r7
 800dd52:	f7ff ff7d 	bl	800dc50 <_malloc_r>
 800dd56:	1e06      	subs	r6, r0, #0
 800dd58:	d109      	bne.n	800dd6e <__ssputs_r+0x62>
 800dd5a:	230c      	movs	r3, #12
 800dd5c:	603b      	str	r3, [r7, #0]
 800dd5e:	2340      	movs	r3, #64	; 0x40
 800dd60:	2001      	movs	r0, #1
 800dd62:	89a2      	ldrh	r2, [r4, #12]
 800dd64:	4240      	negs	r0, r0
 800dd66:	4313      	orrs	r3, r2
 800dd68:	81a3      	strh	r3, [r4, #12]
 800dd6a:	b005      	add	sp, #20
 800dd6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd6e:	9a02      	ldr	r2, [sp, #8]
 800dd70:	6921      	ldr	r1, [r4, #16]
 800dd72:	f7fc f896 	bl	8009ea2 <memcpy>
 800dd76:	89a3      	ldrh	r3, [r4, #12]
 800dd78:	4a14      	ldr	r2, [pc, #80]	; (800ddcc <__ssputs_r+0xc0>)
 800dd7a:	401a      	ands	r2, r3
 800dd7c:	2380      	movs	r3, #128	; 0x80
 800dd7e:	4313      	orrs	r3, r2
 800dd80:	81a3      	strh	r3, [r4, #12]
 800dd82:	9b02      	ldr	r3, [sp, #8]
 800dd84:	6126      	str	r6, [r4, #16]
 800dd86:	18f6      	adds	r6, r6, r3
 800dd88:	6026      	str	r6, [r4, #0]
 800dd8a:	6165      	str	r5, [r4, #20]
 800dd8c:	9e01      	ldr	r6, [sp, #4]
 800dd8e:	1aed      	subs	r5, r5, r3
 800dd90:	60a5      	str	r5, [r4, #8]
 800dd92:	9b01      	ldr	r3, [sp, #4]
 800dd94:	429e      	cmp	r6, r3
 800dd96:	d900      	bls.n	800dd9a <__ssputs_r+0x8e>
 800dd98:	9e01      	ldr	r6, [sp, #4]
 800dd9a:	0032      	movs	r2, r6
 800dd9c:	9903      	ldr	r1, [sp, #12]
 800dd9e:	6820      	ldr	r0, [r4, #0]
 800dda0:	f000 fb2c 	bl	800e3fc <memmove>
 800dda4:	68a3      	ldr	r3, [r4, #8]
 800dda6:	2000      	movs	r0, #0
 800dda8:	1b9b      	subs	r3, r3, r6
 800ddaa:	60a3      	str	r3, [r4, #8]
 800ddac:	6823      	ldr	r3, [r4, #0]
 800ddae:	199e      	adds	r6, r3, r6
 800ddb0:	6026      	str	r6, [r4, #0]
 800ddb2:	e7da      	b.n	800dd6a <__ssputs_r+0x5e>
 800ddb4:	002a      	movs	r2, r5
 800ddb6:	0038      	movs	r0, r7
 800ddb8:	f000 fb35 	bl	800e426 <_realloc_r>
 800ddbc:	1e06      	subs	r6, r0, #0
 800ddbe:	d1e0      	bne.n	800dd82 <__ssputs_r+0x76>
 800ddc0:	6921      	ldr	r1, [r4, #16]
 800ddc2:	0038      	movs	r0, r7
 800ddc4:	f7ff fefa 	bl	800dbbc <_free_r>
 800ddc8:	e7c7      	b.n	800dd5a <__ssputs_r+0x4e>
 800ddca:	46c0      	nop			; (mov r8, r8)
 800ddcc:	fffffb7f 	.word	0xfffffb7f

0800ddd0 <_svfiprintf_r>:
 800ddd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddd2:	b0a1      	sub	sp, #132	; 0x84
 800ddd4:	9003      	str	r0, [sp, #12]
 800ddd6:	001d      	movs	r5, r3
 800ddd8:	898b      	ldrh	r3, [r1, #12]
 800ddda:	000f      	movs	r7, r1
 800dddc:	0016      	movs	r6, r2
 800ddde:	061b      	lsls	r3, r3, #24
 800dde0:	d511      	bpl.n	800de06 <_svfiprintf_r+0x36>
 800dde2:	690b      	ldr	r3, [r1, #16]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d10e      	bne.n	800de06 <_svfiprintf_r+0x36>
 800dde8:	2140      	movs	r1, #64	; 0x40
 800ddea:	f7ff ff31 	bl	800dc50 <_malloc_r>
 800ddee:	6038      	str	r0, [r7, #0]
 800ddf0:	6138      	str	r0, [r7, #16]
 800ddf2:	2800      	cmp	r0, #0
 800ddf4:	d105      	bne.n	800de02 <_svfiprintf_r+0x32>
 800ddf6:	230c      	movs	r3, #12
 800ddf8:	9a03      	ldr	r2, [sp, #12]
 800ddfa:	3801      	subs	r0, #1
 800ddfc:	6013      	str	r3, [r2, #0]
 800ddfe:	b021      	add	sp, #132	; 0x84
 800de00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de02:	2340      	movs	r3, #64	; 0x40
 800de04:	617b      	str	r3, [r7, #20]
 800de06:	2300      	movs	r3, #0
 800de08:	ac08      	add	r4, sp, #32
 800de0a:	6163      	str	r3, [r4, #20]
 800de0c:	3320      	adds	r3, #32
 800de0e:	7663      	strb	r3, [r4, #25]
 800de10:	3310      	adds	r3, #16
 800de12:	76a3      	strb	r3, [r4, #26]
 800de14:	9507      	str	r5, [sp, #28]
 800de16:	0035      	movs	r5, r6
 800de18:	782b      	ldrb	r3, [r5, #0]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d001      	beq.n	800de22 <_svfiprintf_r+0x52>
 800de1e:	2b25      	cmp	r3, #37	; 0x25
 800de20:	d146      	bne.n	800deb0 <_svfiprintf_r+0xe0>
 800de22:	1bab      	subs	r3, r5, r6
 800de24:	9305      	str	r3, [sp, #20]
 800de26:	d00c      	beq.n	800de42 <_svfiprintf_r+0x72>
 800de28:	0032      	movs	r2, r6
 800de2a:	0039      	movs	r1, r7
 800de2c:	9803      	ldr	r0, [sp, #12]
 800de2e:	f7ff ff6d 	bl	800dd0c <__ssputs_r>
 800de32:	1c43      	adds	r3, r0, #1
 800de34:	d100      	bne.n	800de38 <_svfiprintf_r+0x68>
 800de36:	e0ae      	b.n	800df96 <_svfiprintf_r+0x1c6>
 800de38:	6962      	ldr	r2, [r4, #20]
 800de3a:	9b05      	ldr	r3, [sp, #20]
 800de3c:	4694      	mov	ip, r2
 800de3e:	4463      	add	r3, ip
 800de40:	6163      	str	r3, [r4, #20]
 800de42:	782b      	ldrb	r3, [r5, #0]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d100      	bne.n	800de4a <_svfiprintf_r+0x7a>
 800de48:	e0a5      	b.n	800df96 <_svfiprintf_r+0x1c6>
 800de4a:	2201      	movs	r2, #1
 800de4c:	2300      	movs	r3, #0
 800de4e:	4252      	negs	r2, r2
 800de50:	6062      	str	r2, [r4, #4]
 800de52:	a904      	add	r1, sp, #16
 800de54:	3254      	adds	r2, #84	; 0x54
 800de56:	1852      	adds	r2, r2, r1
 800de58:	1c6e      	adds	r6, r5, #1
 800de5a:	6023      	str	r3, [r4, #0]
 800de5c:	60e3      	str	r3, [r4, #12]
 800de5e:	60a3      	str	r3, [r4, #8]
 800de60:	7013      	strb	r3, [r2, #0]
 800de62:	65a3      	str	r3, [r4, #88]	; 0x58
 800de64:	7831      	ldrb	r1, [r6, #0]
 800de66:	2205      	movs	r2, #5
 800de68:	4853      	ldr	r0, [pc, #332]	; (800dfb8 <_svfiprintf_r+0x1e8>)
 800de6a:	f7ff fa97 	bl	800d39c <memchr>
 800de6e:	1c75      	adds	r5, r6, #1
 800de70:	2800      	cmp	r0, #0
 800de72:	d11f      	bne.n	800deb4 <_svfiprintf_r+0xe4>
 800de74:	6822      	ldr	r2, [r4, #0]
 800de76:	06d3      	lsls	r3, r2, #27
 800de78:	d504      	bpl.n	800de84 <_svfiprintf_r+0xb4>
 800de7a:	2353      	movs	r3, #83	; 0x53
 800de7c:	a904      	add	r1, sp, #16
 800de7e:	185b      	adds	r3, r3, r1
 800de80:	2120      	movs	r1, #32
 800de82:	7019      	strb	r1, [r3, #0]
 800de84:	0713      	lsls	r3, r2, #28
 800de86:	d504      	bpl.n	800de92 <_svfiprintf_r+0xc2>
 800de88:	2353      	movs	r3, #83	; 0x53
 800de8a:	a904      	add	r1, sp, #16
 800de8c:	185b      	adds	r3, r3, r1
 800de8e:	212b      	movs	r1, #43	; 0x2b
 800de90:	7019      	strb	r1, [r3, #0]
 800de92:	7833      	ldrb	r3, [r6, #0]
 800de94:	2b2a      	cmp	r3, #42	; 0x2a
 800de96:	d016      	beq.n	800dec6 <_svfiprintf_r+0xf6>
 800de98:	0035      	movs	r5, r6
 800de9a:	2100      	movs	r1, #0
 800de9c:	200a      	movs	r0, #10
 800de9e:	68e3      	ldr	r3, [r4, #12]
 800dea0:	782a      	ldrb	r2, [r5, #0]
 800dea2:	1c6e      	adds	r6, r5, #1
 800dea4:	3a30      	subs	r2, #48	; 0x30
 800dea6:	2a09      	cmp	r2, #9
 800dea8:	d94e      	bls.n	800df48 <_svfiprintf_r+0x178>
 800deaa:	2900      	cmp	r1, #0
 800deac:	d018      	beq.n	800dee0 <_svfiprintf_r+0x110>
 800deae:	e010      	b.n	800ded2 <_svfiprintf_r+0x102>
 800deb0:	3501      	adds	r5, #1
 800deb2:	e7b1      	b.n	800de18 <_svfiprintf_r+0x48>
 800deb4:	4b40      	ldr	r3, [pc, #256]	; (800dfb8 <_svfiprintf_r+0x1e8>)
 800deb6:	6822      	ldr	r2, [r4, #0]
 800deb8:	1ac0      	subs	r0, r0, r3
 800deba:	2301      	movs	r3, #1
 800debc:	4083      	lsls	r3, r0
 800debe:	4313      	orrs	r3, r2
 800dec0:	6023      	str	r3, [r4, #0]
 800dec2:	002e      	movs	r6, r5
 800dec4:	e7ce      	b.n	800de64 <_svfiprintf_r+0x94>
 800dec6:	9b07      	ldr	r3, [sp, #28]
 800dec8:	1d19      	adds	r1, r3, #4
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	9107      	str	r1, [sp, #28]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	db01      	blt.n	800ded6 <_svfiprintf_r+0x106>
 800ded2:	930b      	str	r3, [sp, #44]	; 0x2c
 800ded4:	e004      	b.n	800dee0 <_svfiprintf_r+0x110>
 800ded6:	425b      	negs	r3, r3
 800ded8:	60e3      	str	r3, [r4, #12]
 800deda:	2302      	movs	r3, #2
 800dedc:	4313      	orrs	r3, r2
 800dede:	6023      	str	r3, [r4, #0]
 800dee0:	782b      	ldrb	r3, [r5, #0]
 800dee2:	2b2e      	cmp	r3, #46	; 0x2e
 800dee4:	d10a      	bne.n	800defc <_svfiprintf_r+0x12c>
 800dee6:	786b      	ldrb	r3, [r5, #1]
 800dee8:	2b2a      	cmp	r3, #42	; 0x2a
 800deea:	d135      	bne.n	800df58 <_svfiprintf_r+0x188>
 800deec:	9b07      	ldr	r3, [sp, #28]
 800deee:	3502      	adds	r5, #2
 800def0:	1d1a      	adds	r2, r3, #4
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	9207      	str	r2, [sp, #28]
 800def6:	2b00      	cmp	r3, #0
 800def8:	db2b      	blt.n	800df52 <_svfiprintf_r+0x182>
 800defa:	9309      	str	r3, [sp, #36]	; 0x24
 800defc:	4e2f      	ldr	r6, [pc, #188]	; (800dfbc <_svfiprintf_r+0x1ec>)
 800defe:	7829      	ldrb	r1, [r5, #0]
 800df00:	2203      	movs	r2, #3
 800df02:	0030      	movs	r0, r6
 800df04:	f7ff fa4a 	bl	800d39c <memchr>
 800df08:	2800      	cmp	r0, #0
 800df0a:	d006      	beq.n	800df1a <_svfiprintf_r+0x14a>
 800df0c:	2340      	movs	r3, #64	; 0x40
 800df0e:	1b80      	subs	r0, r0, r6
 800df10:	4083      	lsls	r3, r0
 800df12:	6822      	ldr	r2, [r4, #0]
 800df14:	3501      	adds	r5, #1
 800df16:	4313      	orrs	r3, r2
 800df18:	6023      	str	r3, [r4, #0]
 800df1a:	7829      	ldrb	r1, [r5, #0]
 800df1c:	2206      	movs	r2, #6
 800df1e:	4828      	ldr	r0, [pc, #160]	; (800dfc0 <_svfiprintf_r+0x1f0>)
 800df20:	1c6e      	adds	r6, r5, #1
 800df22:	7621      	strb	r1, [r4, #24]
 800df24:	f7ff fa3a 	bl	800d39c <memchr>
 800df28:	2800      	cmp	r0, #0
 800df2a:	d03c      	beq.n	800dfa6 <_svfiprintf_r+0x1d6>
 800df2c:	4b25      	ldr	r3, [pc, #148]	; (800dfc4 <_svfiprintf_r+0x1f4>)
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d125      	bne.n	800df7e <_svfiprintf_r+0x1ae>
 800df32:	2207      	movs	r2, #7
 800df34:	9b07      	ldr	r3, [sp, #28]
 800df36:	3307      	adds	r3, #7
 800df38:	4393      	bics	r3, r2
 800df3a:	3308      	adds	r3, #8
 800df3c:	9307      	str	r3, [sp, #28]
 800df3e:	6963      	ldr	r3, [r4, #20]
 800df40:	9a04      	ldr	r2, [sp, #16]
 800df42:	189b      	adds	r3, r3, r2
 800df44:	6163      	str	r3, [r4, #20]
 800df46:	e766      	b.n	800de16 <_svfiprintf_r+0x46>
 800df48:	4343      	muls	r3, r0
 800df4a:	2101      	movs	r1, #1
 800df4c:	189b      	adds	r3, r3, r2
 800df4e:	0035      	movs	r5, r6
 800df50:	e7a6      	b.n	800dea0 <_svfiprintf_r+0xd0>
 800df52:	2301      	movs	r3, #1
 800df54:	425b      	negs	r3, r3
 800df56:	e7d0      	b.n	800defa <_svfiprintf_r+0x12a>
 800df58:	2300      	movs	r3, #0
 800df5a:	200a      	movs	r0, #10
 800df5c:	001a      	movs	r2, r3
 800df5e:	3501      	adds	r5, #1
 800df60:	6063      	str	r3, [r4, #4]
 800df62:	7829      	ldrb	r1, [r5, #0]
 800df64:	1c6e      	adds	r6, r5, #1
 800df66:	3930      	subs	r1, #48	; 0x30
 800df68:	2909      	cmp	r1, #9
 800df6a:	d903      	bls.n	800df74 <_svfiprintf_r+0x1a4>
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d0c5      	beq.n	800defc <_svfiprintf_r+0x12c>
 800df70:	9209      	str	r2, [sp, #36]	; 0x24
 800df72:	e7c3      	b.n	800defc <_svfiprintf_r+0x12c>
 800df74:	4342      	muls	r2, r0
 800df76:	2301      	movs	r3, #1
 800df78:	1852      	adds	r2, r2, r1
 800df7a:	0035      	movs	r5, r6
 800df7c:	e7f1      	b.n	800df62 <_svfiprintf_r+0x192>
 800df7e:	ab07      	add	r3, sp, #28
 800df80:	9300      	str	r3, [sp, #0]
 800df82:	003a      	movs	r2, r7
 800df84:	4b10      	ldr	r3, [pc, #64]	; (800dfc8 <_svfiprintf_r+0x1f8>)
 800df86:	0021      	movs	r1, r4
 800df88:	9803      	ldr	r0, [sp, #12]
 800df8a:	f7fc f837 	bl	8009ffc <_printf_float>
 800df8e:	9004      	str	r0, [sp, #16]
 800df90:	9b04      	ldr	r3, [sp, #16]
 800df92:	3301      	adds	r3, #1
 800df94:	d1d3      	bne.n	800df3e <_svfiprintf_r+0x16e>
 800df96:	89bb      	ldrh	r3, [r7, #12]
 800df98:	980d      	ldr	r0, [sp, #52]	; 0x34
 800df9a:	065b      	lsls	r3, r3, #25
 800df9c:	d400      	bmi.n	800dfa0 <_svfiprintf_r+0x1d0>
 800df9e:	e72e      	b.n	800ddfe <_svfiprintf_r+0x2e>
 800dfa0:	2001      	movs	r0, #1
 800dfa2:	4240      	negs	r0, r0
 800dfa4:	e72b      	b.n	800ddfe <_svfiprintf_r+0x2e>
 800dfa6:	ab07      	add	r3, sp, #28
 800dfa8:	9300      	str	r3, [sp, #0]
 800dfaa:	003a      	movs	r2, r7
 800dfac:	4b06      	ldr	r3, [pc, #24]	; (800dfc8 <_svfiprintf_r+0x1f8>)
 800dfae:	0021      	movs	r1, r4
 800dfb0:	9803      	ldr	r0, [sp, #12]
 800dfb2:	f7fc fadd 	bl	800a570 <_printf_i>
 800dfb6:	e7ea      	b.n	800df8e <_svfiprintf_r+0x1be>
 800dfb8:	0800ec64 	.word	0x0800ec64
 800dfbc:	0800ec6a 	.word	0x0800ec6a
 800dfc0:	0800ec6e 	.word	0x0800ec6e
 800dfc4:	08009ffd 	.word	0x08009ffd
 800dfc8:	0800dd0d 	.word	0x0800dd0d

0800dfcc <__sfputc_r>:
 800dfcc:	6893      	ldr	r3, [r2, #8]
 800dfce:	b510      	push	{r4, lr}
 800dfd0:	3b01      	subs	r3, #1
 800dfd2:	6093      	str	r3, [r2, #8]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	da04      	bge.n	800dfe2 <__sfputc_r+0x16>
 800dfd8:	6994      	ldr	r4, [r2, #24]
 800dfda:	42a3      	cmp	r3, r4
 800dfdc:	db07      	blt.n	800dfee <__sfputc_r+0x22>
 800dfde:	290a      	cmp	r1, #10
 800dfe0:	d005      	beq.n	800dfee <__sfputc_r+0x22>
 800dfe2:	6813      	ldr	r3, [r2, #0]
 800dfe4:	1c58      	adds	r0, r3, #1
 800dfe6:	6010      	str	r0, [r2, #0]
 800dfe8:	7019      	strb	r1, [r3, #0]
 800dfea:	0008      	movs	r0, r1
 800dfec:	bd10      	pop	{r4, pc}
 800dfee:	f7fd fd4d 	bl	800ba8c <__swbuf_r>
 800dff2:	0001      	movs	r1, r0
 800dff4:	e7f9      	b.n	800dfea <__sfputc_r+0x1e>

0800dff6 <__sfputs_r>:
 800dff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dff8:	0006      	movs	r6, r0
 800dffa:	000f      	movs	r7, r1
 800dffc:	0014      	movs	r4, r2
 800dffe:	18d5      	adds	r5, r2, r3
 800e000:	42ac      	cmp	r4, r5
 800e002:	d101      	bne.n	800e008 <__sfputs_r+0x12>
 800e004:	2000      	movs	r0, #0
 800e006:	e007      	b.n	800e018 <__sfputs_r+0x22>
 800e008:	7821      	ldrb	r1, [r4, #0]
 800e00a:	003a      	movs	r2, r7
 800e00c:	0030      	movs	r0, r6
 800e00e:	f7ff ffdd 	bl	800dfcc <__sfputc_r>
 800e012:	3401      	adds	r4, #1
 800e014:	1c43      	adds	r3, r0, #1
 800e016:	d1f3      	bne.n	800e000 <__sfputs_r+0xa>
 800e018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e01c <_vfiprintf_r>:
 800e01c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e01e:	b0a1      	sub	sp, #132	; 0x84
 800e020:	9003      	str	r0, [sp, #12]
 800e022:	000f      	movs	r7, r1
 800e024:	0016      	movs	r6, r2
 800e026:	001d      	movs	r5, r3
 800e028:	2800      	cmp	r0, #0
 800e02a:	d005      	beq.n	800e038 <_vfiprintf_r+0x1c>
 800e02c:	6983      	ldr	r3, [r0, #24]
 800e02e:	9305      	str	r3, [sp, #20]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d101      	bne.n	800e038 <_vfiprintf_r+0x1c>
 800e034:	f7fe fd54 	bl	800cae0 <__sinit>
 800e038:	4b7b      	ldr	r3, [pc, #492]	; (800e228 <_vfiprintf_r+0x20c>)
 800e03a:	429f      	cmp	r7, r3
 800e03c:	d15c      	bne.n	800e0f8 <_vfiprintf_r+0xdc>
 800e03e:	9b03      	ldr	r3, [sp, #12]
 800e040:	685f      	ldr	r7, [r3, #4]
 800e042:	89bb      	ldrh	r3, [r7, #12]
 800e044:	071b      	lsls	r3, r3, #28
 800e046:	d563      	bpl.n	800e110 <_vfiprintf_r+0xf4>
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d060      	beq.n	800e110 <_vfiprintf_r+0xf4>
 800e04e:	2300      	movs	r3, #0
 800e050:	ac08      	add	r4, sp, #32
 800e052:	6163      	str	r3, [r4, #20]
 800e054:	3320      	adds	r3, #32
 800e056:	7663      	strb	r3, [r4, #25]
 800e058:	3310      	adds	r3, #16
 800e05a:	76a3      	strb	r3, [r4, #26]
 800e05c:	9507      	str	r5, [sp, #28]
 800e05e:	0035      	movs	r5, r6
 800e060:	782b      	ldrb	r3, [r5, #0]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d001      	beq.n	800e06a <_vfiprintf_r+0x4e>
 800e066:	2b25      	cmp	r3, #37	; 0x25
 800e068:	d15c      	bne.n	800e124 <_vfiprintf_r+0x108>
 800e06a:	1bab      	subs	r3, r5, r6
 800e06c:	9305      	str	r3, [sp, #20]
 800e06e:	d00c      	beq.n	800e08a <_vfiprintf_r+0x6e>
 800e070:	0032      	movs	r2, r6
 800e072:	0039      	movs	r1, r7
 800e074:	9803      	ldr	r0, [sp, #12]
 800e076:	f7ff ffbe 	bl	800dff6 <__sfputs_r>
 800e07a:	1c43      	adds	r3, r0, #1
 800e07c:	d100      	bne.n	800e080 <_vfiprintf_r+0x64>
 800e07e:	e0c4      	b.n	800e20a <_vfiprintf_r+0x1ee>
 800e080:	6962      	ldr	r2, [r4, #20]
 800e082:	9b05      	ldr	r3, [sp, #20]
 800e084:	4694      	mov	ip, r2
 800e086:	4463      	add	r3, ip
 800e088:	6163      	str	r3, [r4, #20]
 800e08a:	782b      	ldrb	r3, [r5, #0]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d100      	bne.n	800e092 <_vfiprintf_r+0x76>
 800e090:	e0bb      	b.n	800e20a <_vfiprintf_r+0x1ee>
 800e092:	2201      	movs	r2, #1
 800e094:	2300      	movs	r3, #0
 800e096:	4252      	negs	r2, r2
 800e098:	6062      	str	r2, [r4, #4]
 800e09a:	a904      	add	r1, sp, #16
 800e09c:	3254      	adds	r2, #84	; 0x54
 800e09e:	1852      	adds	r2, r2, r1
 800e0a0:	1c6e      	adds	r6, r5, #1
 800e0a2:	6023      	str	r3, [r4, #0]
 800e0a4:	60e3      	str	r3, [r4, #12]
 800e0a6:	60a3      	str	r3, [r4, #8]
 800e0a8:	7013      	strb	r3, [r2, #0]
 800e0aa:	65a3      	str	r3, [r4, #88]	; 0x58
 800e0ac:	7831      	ldrb	r1, [r6, #0]
 800e0ae:	2205      	movs	r2, #5
 800e0b0:	485e      	ldr	r0, [pc, #376]	; (800e22c <_vfiprintf_r+0x210>)
 800e0b2:	f7ff f973 	bl	800d39c <memchr>
 800e0b6:	1c75      	adds	r5, r6, #1
 800e0b8:	2800      	cmp	r0, #0
 800e0ba:	d135      	bne.n	800e128 <_vfiprintf_r+0x10c>
 800e0bc:	6822      	ldr	r2, [r4, #0]
 800e0be:	06d3      	lsls	r3, r2, #27
 800e0c0:	d504      	bpl.n	800e0cc <_vfiprintf_r+0xb0>
 800e0c2:	2353      	movs	r3, #83	; 0x53
 800e0c4:	a904      	add	r1, sp, #16
 800e0c6:	185b      	adds	r3, r3, r1
 800e0c8:	2120      	movs	r1, #32
 800e0ca:	7019      	strb	r1, [r3, #0]
 800e0cc:	0713      	lsls	r3, r2, #28
 800e0ce:	d504      	bpl.n	800e0da <_vfiprintf_r+0xbe>
 800e0d0:	2353      	movs	r3, #83	; 0x53
 800e0d2:	a904      	add	r1, sp, #16
 800e0d4:	185b      	adds	r3, r3, r1
 800e0d6:	212b      	movs	r1, #43	; 0x2b
 800e0d8:	7019      	strb	r1, [r3, #0]
 800e0da:	7833      	ldrb	r3, [r6, #0]
 800e0dc:	2b2a      	cmp	r3, #42	; 0x2a
 800e0de:	d02c      	beq.n	800e13a <_vfiprintf_r+0x11e>
 800e0e0:	0035      	movs	r5, r6
 800e0e2:	2100      	movs	r1, #0
 800e0e4:	200a      	movs	r0, #10
 800e0e6:	68e3      	ldr	r3, [r4, #12]
 800e0e8:	782a      	ldrb	r2, [r5, #0]
 800e0ea:	1c6e      	adds	r6, r5, #1
 800e0ec:	3a30      	subs	r2, #48	; 0x30
 800e0ee:	2a09      	cmp	r2, #9
 800e0f0:	d964      	bls.n	800e1bc <_vfiprintf_r+0x1a0>
 800e0f2:	2900      	cmp	r1, #0
 800e0f4:	d02e      	beq.n	800e154 <_vfiprintf_r+0x138>
 800e0f6:	e026      	b.n	800e146 <_vfiprintf_r+0x12a>
 800e0f8:	4b4d      	ldr	r3, [pc, #308]	; (800e230 <_vfiprintf_r+0x214>)
 800e0fa:	429f      	cmp	r7, r3
 800e0fc:	d102      	bne.n	800e104 <_vfiprintf_r+0xe8>
 800e0fe:	9b03      	ldr	r3, [sp, #12]
 800e100:	689f      	ldr	r7, [r3, #8]
 800e102:	e79e      	b.n	800e042 <_vfiprintf_r+0x26>
 800e104:	4b4b      	ldr	r3, [pc, #300]	; (800e234 <_vfiprintf_r+0x218>)
 800e106:	429f      	cmp	r7, r3
 800e108:	d19b      	bne.n	800e042 <_vfiprintf_r+0x26>
 800e10a:	9b03      	ldr	r3, [sp, #12]
 800e10c:	68df      	ldr	r7, [r3, #12]
 800e10e:	e798      	b.n	800e042 <_vfiprintf_r+0x26>
 800e110:	0039      	movs	r1, r7
 800e112:	9803      	ldr	r0, [sp, #12]
 800e114:	f7fd fd10 	bl	800bb38 <__swsetup_r>
 800e118:	2800      	cmp	r0, #0
 800e11a:	d098      	beq.n	800e04e <_vfiprintf_r+0x32>
 800e11c:	2001      	movs	r0, #1
 800e11e:	4240      	negs	r0, r0
 800e120:	b021      	add	sp, #132	; 0x84
 800e122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e124:	3501      	adds	r5, #1
 800e126:	e79b      	b.n	800e060 <_vfiprintf_r+0x44>
 800e128:	4b40      	ldr	r3, [pc, #256]	; (800e22c <_vfiprintf_r+0x210>)
 800e12a:	6822      	ldr	r2, [r4, #0]
 800e12c:	1ac0      	subs	r0, r0, r3
 800e12e:	2301      	movs	r3, #1
 800e130:	4083      	lsls	r3, r0
 800e132:	4313      	orrs	r3, r2
 800e134:	6023      	str	r3, [r4, #0]
 800e136:	002e      	movs	r6, r5
 800e138:	e7b8      	b.n	800e0ac <_vfiprintf_r+0x90>
 800e13a:	9b07      	ldr	r3, [sp, #28]
 800e13c:	1d19      	adds	r1, r3, #4
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	9107      	str	r1, [sp, #28]
 800e142:	2b00      	cmp	r3, #0
 800e144:	db01      	blt.n	800e14a <_vfiprintf_r+0x12e>
 800e146:	930b      	str	r3, [sp, #44]	; 0x2c
 800e148:	e004      	b.n	800e154 <_vfiprintf_r+0x138>
 800e14a:	425b      	negs	r3, r3
 800e14c:	60e3      	str	r3, [r4, #12]
 800e14e:	2302      	movs	r3, #2
 800e150:	4313      	orrs	r3, r2
 800e152:	6023      	str	r3, [r4, #0]
 800e154:	782b      	ldrb	r3, [r5, #0]
 800e156:	2b2e      	cmp	r3, #46	; 0x2e
 800e158:	d10a      	bne.n	800e170 <_vfiprintf_r+0x154>
 800e15a:	786b      	ldrb	r3, [r5, #1]
 800e15c:	2b2a      	cmp	r3, #42	; 0x2a
 800e15e:	d135      	bne.n	800e1cc <_vfiprintf_r+0x1b0>
 800e160:	9b07      	ldr	r3, [sp, #28]
 800e162:	3502      	adds	r5, #2
 800e164:	1d1a      	adds	r2, r3, #4
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	9207      	str	r2, [sp, #28]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	db2b      	blt.n	800e1c6 <_vfiprintf_r+0x1aa>
 800e16e:	9309      	str	r3, [sp, #36]	; 0x24
 800e170:	4e31      	ldr	r6, [pc, #196]	; (800e238 <_vfiprintf_r+0x21c>)
 800e172:	7829      	ldrb	r1, [r5, #0]
 800e174:	2203      	movs	r2, #3
 800e176:	0030      	movs	r0, r6
 800e178:	f7ff f910 	bl	800d39c <memchr>
 800e17c:	2800      	cmp	r0, #0
 800e17e:	d006      	beq.n	800e18e <_vfiprintf_r+0x172>
 800e180:	2340      	movs	r3, #64	; 0x40
 800e182:	1b80      	subs	r0, r0, r6
 800e184:	4083      	lsls	r3, r0
 800e186:	6822      	ldr	r2, [r4, #0]
 800e188:	3501      	adds	r5, #1
 800e18a:	4313      	orrs	r3, r2
 800e18c:	6023      	str	r3, [r4, #0]
 800e18e:	7829      	ldrb	r1, [r5, #0]
 800e190:	2206      	movs	r2, #6
 800e192:	482a      	ldr	r0, [pc, #168]	; (800e23c <_vfiprintf_r+0x220>)
 800e194:	1c6e      	adds	r6, r5, #1
 800e196:	7621      	strb	r1, [r4, #24]
 800e198:	f7ff f900 	bl	800d39c <memchr>
 800e19c:	2800      	cmp	r0, #0
 800e19e:	d03a      	beq.n	800e216 <_vfiprintf_r+0x1fa>
 800e1a0:	4b27      	ldr	r3, [pc, #156]	; (800e240 <_vfiprintf_r+0x224>)
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d125      	bne.n	800e1f2 <_vfiprintf_r+0x1d6>
 800e1a6:	2207      	movs	r2, #7
 800e1a8:	9b07      	ldr	r3, [sp, #28]
 800e1aa:	3307      	adds	r3, #7
 800e1ac:	4393      	bics	r3, r2
 800e1ae:	3308      	adds	r3, #8
 800e1b0:	9307      	str	r3, [sp, #28]
 800e1b2:	6963      	ldr	r3, [r4, #20]
 800e1b4:	9a04      	ldr	r2, [sp, #16]
 800e1b6:	189b      	adds	r3, r3, r2
 800e1b8:	6163      	str	r3, [r4, #20]
 800e1ba:	e750      	b.n	800e05e <_vfiprintf_r+0x42>
 800e1bc:	4343      	muls	r3, r0
 800e1be:	2101      	movs	r1, #1
 800e1c0:	189b      	adds	r3, r3, r2
 800e1c2:	0035      	movs	r5, r6
 800e1c4:	e790      	b.n	800e0e8 <_vfiprintf_r+0xcc>
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	425b      	negs	r3, r3
 800e1ca:	e7d0      	b.n	800e16e <_vfiprintf_r+0x152>
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	200a      	movs	r0, #10
 800e1d0:	001a      	movs	r2, r3
 800e1d2:	3501      	adds	r5, #1
 800e1d4:	6063      	str	r3, [r4, #4]
 800e1d6:	7829      	ldrb	r1, [r5, #0]
 800e1d8:	1c6e      	adds	r6, r5, #1
 800e1da:	3930      	subs	r1, #48	; 0x30
 800e1dc:	2909      	cmp	r1, #9
 800e1de:	d903      	bls.n	800e1e8 <_vfiprintf_r+0x1cc>
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d0c5      	beq.n	800e170 <_vfiprintf_r+0x154>
 800e1e4:	9209      	str	r2, [sp, #36]	; 0x24
 800e1e6:	e7c3      	b.n	800e170 <_vfiprintf_r+0x154>
 800e1e8:	4342      	muls	r2, r0
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	1852      	adds	r2, r2, r1
 800e1ee:	0035      	movs	r5, r6
 800e1f0:	e7f1      	b.n	800e1d6 <_vfiprintf_r+0x1ba>
 800e1f2:	ab07      	add	r3, sp, #28
 800e1f4:	9300      	str	r3, [sp, #0]
 800e1f6:	003a      	movs	r2, r7
 800e1f8:	4b12      	ldr	r3, [pc, #72]	; (800e244 <_vfiprintf_r+0x228>)
 800e1fa:	0021      	movs	r1, r4
 800e1fc:	9803      	ldr	r0, [sp, #12]
 800e1fe:	f7fb fefd 	bl	8009ffc <_printf_float>
 800e202:	9004      	str	r0, [sp, #16]
 800e204:	9b04      	ldr	r3, [sp, #16]
 800e206:	3301      	adds	r3, #1
 800e208:	d1d3      	bne.n	800e1b2 <_vfiprintf_r+0x196>
 800e20a:	89bb      	ldrh	r3, [r7, #12]
 800e20c:	065b      	lsls	r3, r3, #25
 800e20e:	d500      	bpl.n	800e212 <_vfiprintf_r+0x1f6>
 800e210:	e784      	b.n	800e11c <_vfiprintf_r+0x100>
 800e212:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e214:	e784      	b.n	800e120 <_vfiprintf_r+0x104>
 800e216:	ab07      	add	r3, sp, #28
 800e218:	9300      	str	r3, [sp, #0]
 800e21a:	003a      	movs	r2, r7
 800e21c:	4b09      	ldr	r3, [pc, #36]	; (800e244 <_vfiprintf_r+0x228>)
 800e21e:	0021      	movs	r1, r4
 800e220:	9803      	ldr	r0, [sp, #12]
 800e222:	f7fc f9a5 	bl	800a570 <_printf_i>
 800e226:	e7ec      	b.n	800e202 <_vfiprintf_r+0x1e6>
 800e228:	0800eb18 	.word	0x0800eb18
 800e22c:	0800ec64 	.word	0x0800ec64
 800e230:	0800eb38 	.word	0x0800eb38
 800e234:	0800eaf8 	.word	0x0800eaf8
 800e238:	0800ec6a 	.word	0x0800ec6a
 800e23c:	0800ec6e 	.word	0x0800ec6e
 800e240:	08009ffd 	.word	0x08009ffd
 800e244:	0800dff7 	.word	0x0800dff7

0800e248 <_sbrk_r>:
 800e248:	2300      	movs	r3, #0
 800e24a:	b570      	push	{r4, r5, r6, lr}
 800e24c:	4c06      	ldr	r4, [pc, #24]	; (800e268 <_sbrk_r+0x20>)
 800e24e:	0005      	movs	r5, r0
 800e250:	0008      	movs	r0, r1
 800e252:	6023      	str	r3, [r4, #0]
 800e254:	f7f6 ffe0 	bl	8005218 <_sbrk>
 800e258:	1c43      	adds	r3, r0, #1
 800e25a:	d103      	bne.n	800e264 <_sbrk_r+0x1c>
 800e25c:	6823      	ldr	r3, [r4, #0]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d000      	beq.n	800e264 <_sbrk_r+0x1c>
 800e262:	602b      	str	r3, [r5, #0]
 800e264:	bd70      	pop	{r4, r5, r6, pc}
 800e266:	46c0      	nop			; (mov r8, r8)
 800e268:	200012cc 	.word	0x200012cc

0800e26c <__sread>:
 800e26c:	b570      	push	{r4, r5, r6, lr}
 800e26e:	000c      	movs	r4, r1
 800e270:	250e      	movs	r5, #14
 800e272:	5f49      	ldrsh	r1, [r1, r5]
 800e274:	f000 f8fe 	bl	800e474 <_read_r>
 800e278:	2800      	cmp	r0, #0
 800e27a:	db03      	blt.n	800e284 <__sread+0x18>
 800e27c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e27e:	181b      	adds	r3, r3, r0
 800e280:	6563      	str	r3, [r4, #84]	; 0x54
 800e282:	bd70      	pop	{r4, r5, r6, pc}
 800e284:	89a3      	ldrh	r3, [r4, #12]
 800e286:	4a02      	ldr	r2, [pc, #8]	; (800e290 <__sread+0x24>)
 800e288:	4013      	ands	r3, r2
 800e28a:	81a3      	strh	r3, [r4, #12]
 800e28c:	e7f9      	b.n	800e282 <__sread+0x16>
 800e28e:	46c0      	nop			; (mov r8, r8)
 800e290:	ffffefff 	.word	0xffffefff

0800e294 <__swrite>:
 800e294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e296:	001f      	movs	r7, r3
 800e298:	898b      	ldrh	r3, [r1, #12]
 800e29a:	0005      	movs	r5, r0
 800e29c:	000c      	movs	r4, r1
 800e29e:	0016      	movs	r6, r2
 800e2a0:	05db      	lsls	r3, r3, #23
 800e2a2:	d505      	bpl.n	800e2b0 <__swrite+0x1c>
 800e2a4:	230e      	movs	r3, #14
 800e2a6:	5ec9      	ldrsh	r1, [r1, r3]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	2302      	movs	r3, #2
 800e2ac:	f000 f892 	bl	800e3d4 <_lseek_r>
 800e2b0:	89a3      	ldrh	r3, [r4, #12]
 800e2b2:	4a05      	ldr	r2, [pc, #20]	; (800e2c8 <__swrite+0x34>)
 800e2b4:	0028      	movs	r0, r5
 800e2b6:	4013      	ands	r3, r2
 800e2b8:	81a3      	strh	r3, [r4, #12]
 800e2ba:	0032      	movs	r2, r6
 800e2bc:	230e      	movs	r3, #14
 800e2be:	5ee1      	ldrsh	r1, [r4, r3]
 800e2c0:	003b      	movs	r3, r7
 800e2c2:	f000 f83d 	bl	800e340 <_write_r>
 800e2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2c8:	ffffefff 	.word	0xffffefff

0800e2cc <__sseek>:
 800e2cc:	b570      	push	{r4, r5, r6, lr}
 800e2ce:	000c      	movs	r4, r1
 800e2d0:	250e      	movs	r5, #14
 800e2d2:	5f49      	ldrsh	r1, [r1, r5]
 800e2d4:	f000 f87e 	bl	800e3d4 <_lseek_r>
 800e2d8:	89a3      	ldrh	r3, [r4, #12]
 800e2da:	1c42      	adds	r2, r0, #1
 800e2dc:	d103      	bne.n	800e2e6 <__sseek+0x1a>
 800e2de:	4a05      	ldr	r2, [pc, #20]	; (800e2f4 <__sseek+0x28>)
 800e2e0:	4013      	ands	r3, r2
 800e2e2:	81a3      	strh	r3, [r4, #12]
 800e2e4:	bd70      	pop	{r4, r5, r6, pc}
 800e2e6:	2280      	movs	r2, #128	; 0x80
 800e2e8:	0152      	lsls	r2, r2, #5
 800e2ea:	4313      	orrs	r3, r2
 800e2ec:	81a3      	strh	r3, [r4, #12]
 800e2ee:	6560      	str	r0, [r4, #84]	; 0x54
 800e2f0:	e7f8      	b.n	800e2e4 <__sseek+0x18>
 800e2f2:	46c0      	nop			; (mov r8, r8)
 800e2f4:	ffffefff 	.word	0xffffefff

0800e2f8 <__sclose>:
 800e2f8:	b510      	push	{r4, lr}
 800e2fa:	230e      	movs	r3, #14
 800e2fc:	5ec9      	ldrsh	r1, [r1, r3]
 800e2fe:	f000 f833 	bl	800e368 <_close_r>
 800e302:	bd10      	pop	{r4, pc}

0800e304 <strncmp>:
 800e304:	2300      	movs	r3, #0
 800e306:	b530      	push	{r4, r5, lr}
 800e308:	429a      	cmp	r2, r3
 800e30a:	d00a      	beq.n	800e322 <strncmp+0x1e>
 800e30c:	3a01      	subs	r2, #1
 800e30e:	5cc4      	ldrb	r4, [r0, r3]
 800e310:	5ccd      	ldrb	r5, [r1, r3]
 800e312:	42ac      	cmp	r4, r5
 800e314:	d104      	bne.n	800e320 <strncmp+0x1c>
 800e316:	4293      	cmp	r3, r2
 800e318:	d002      	beq.n	800e320 <strncmp+0x1c>
 800e31a:	3301      	adds	r3, #1
 800e31c:	2c00      	cmp	r4, #0
 800e31e:	d1f6      	bne.n	800e30e <strncmp+0xa>
 800e320:	1b63      	subs	r3, r4, r5
 800e322:	0018      	movs	r0, r3
 800e324:	bd30      	pop	{r4, r5, pc}

0800e326 <__ascii_wctomb>:
 800e326:	1e0b      	subs	r3, r1, #0
 800e328:	d004      	beq.n	800e334 <__ascii_wctomb+0xe>
 800e32a:	2aff      	cmp	r2, #255	; 0xff
 800e32c:	d904      	bls.n	800e338 <__ascii_wctomb+0x12>
 800e32e:	238a      	movs	r3, #138	; 0x8a
 800e330:	6003      	str	r3, [r0, #0]
 800e332:	3b8b      	subs	r3, #139	; 0x8b
 800e334:	0018      	movs	r0, r3
 800e336:	4770      	bx	lr
 800e338:	700a      	strb	r2, [r1, #0]
 800e33a:	2301      	movs	r3, #1
 800e33c:	e7fa      	b.n	800e334 <__ascii_wctomb+0xe>
	...

0800e340 <_write_r>:
 800e340:	b570      	push	{r4, r5, r6, lr}
 800e342:	0005      	movs	r5, r0
 800e344:	0008      	movs	r0, r1
 800e346:	0011      	movs	r1, r2
 800e348:	2200      	movs	r2, #0
 800e34a:	4c06      	ldr	r4, [pc, #24]	; (800e364 <_write_r+0x24>)
 800e34c:	6022      	str	r2, [r4, #0]
 800e34e:	001a      	movs	r2, r3
 800e350:	f7f6 ff19 	bl	8005186 <_write>
 800e354:	1c43      	adds	r3, r0, #1
 800e356:	d103      	bne.n	800e360 <_write_r+0x20>
 800e358:	6823      	ldr	r3, [r4, #0]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d000      	beq.n	800e360 <_write_r+0x20>
 800e35e:	602b      	str	r3, [r5, #0]
 800e360:	bd70      	pop	{r4, r5, r6, pc}
 800e362:	46c0      	nop			; (mov r8, r8)
 800e364:	200012cc 	.word	0x200012cc

0800e368 <_close_r>:
 800e368:	2300      	movs	r3, #0
 800e36a:	b570      	push	{r4, r5, r6, lr}
 800e36c:	4c06      	ldr	r4, [pc, #24]	; (800e388 <_close_r+0x20>)
 800e36e:	0005      	movs	r5, r0
 800e370:	0008      	movs	r0, r1
 800e372:	6023      	str	r3, [r4, #0]
 800e374:	f7f6 ff23 	bl	80051be <_close>
 800e378:	1c43      	adds	r3, r0, #1
 800e37a:	d103      	bne.n	800e384 <_close_r+0x1c>
 800e37c:	6823      	ldr	r3, [r4, #0]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d000      	beq.n	800e384 <_close_r+0x1c>
 800e382:	602b      	str	r3, [r5, #0]
 800e384:	bd70      	pop	{r4, r5, r6, pc}
 800e386:	46c0      	nop			; (mov r8, r8)
 800e388:	200012cc 	.word	0x200012cc

0800e38c <_fstat_r>:
 800e38c:	2300      	movs	r3, #0
 800e38e:	b570      	push	{r4, r5, r6, lr}
 800e390:	4c06      	ldr	r4, [pc, #24]	; (800e3ac <_fstat_r+0x20>)
 800e392:	0005      	movs	r5, r0
 800e394:	0008      	movs	r0, r1
 800e396:	0011      	movs	r1, r2
 800e398:	6023      	str	r3, [r4, #0]
 800e39a:	f7f6 ff1a 	bl	80051d2 <_fstat>
 800e39e:	1c43      	adds	r3, r0, #1
 800e3a0:	d103      	bne.n	800e3aa <_fstat_r+0x1e>
 800e3a2:	6823      	ldr	r3, [r4, #0]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d000      	beq.n	800e3aa <_fstat_r+0x1e>
 800e3a8:	602b      	str	r3, [r5, #0]
 800e3aa:	bd70      	pop	{r4, r5, r6, pc}
 800e3ac:	200012cc 	.word	0x200012cc

0800e3b0 <_isatty_r>:
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	b570      	push	{r4, r5, r6, lr}
 800e3b4:	4c06      	ldr	r4, [pc, #24]	; (800e3d0 <_isatty_r+0x20>)
 800e3b6:	0005      	movs	r5, r0
 800e3b8:	0008      	movs	r0, r1
 800e3ba:	6023      	str	r3, [r4, #0]
 800e3bc:	f7f6 ff17 	bl	80051ee <_isatty>
 800e3c0:	1c43      	adds	r3, r0, #1
 800e3c2:	d103      	bne.n	800e3cc <_isatty_r+0x1c>
 800e3c4:	6823      	ldr	r3, [r4, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d000      	beq.n	800e3cc <_isatty_r+0x1c>
 800e3ca:	602b      	str	r3, [r5, #0]
 800e3cc:	bd70      	pop	{r4, r5, r6, pc}
 800e3ce:	46c0      	nop			; (mov r8, r8)
 800e3d0:	200012cc 	.word	0x200012cc

0800e3d4 <_lseek_r>:
 800e3d4:	b570      	push	{r4, r5, r6, lr}
 800e3d6:	0005      	movs	r5, r0
 800e3d8:	0008      	movs	r0, r1
 800e3da:	0011      	movs	r1, r2
 800e3dc:	2200      	movs	r2, #0
 800e3de:	4c06      	ldr	r4, [pc, #24]	; (800e3f8 <_lseek_r+0x24>)
 800e3e0:	6022      	str	r2, [r4, #0]
 800e3e2:	001a      	movs	r2, r3
 800e3e4:	f7f6 ff0c 	bl	8005200 <_lseek>
 800e3e8:	1c43      	adds	r3, r0, #1
 800e3ea:	d103      	bne.n	800e3f4 <_lseek_r+0x20>
 800e3ec:	6823      	ldr	r3, [r4, #0]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d000      	beq.n	800e3f4 <_lseek_r+0x20>
 800e3f2:	602b      	str	r3, [r5, #0]
 800e3f4:	bd70      	pop	{r4, r5, r6, pc}
 800e3f6:	46c0      	nop			; (mov r8, r8)
 800e3f8:	200012cc 	.word	0x200012cc

0800e3fc <memmove>:
 800e3fc:	b510      	push	{r4, lr}
 800e3fe:	4288      	cmp	r0, r1
 800e400:	d902      	bls.n	800e408 <memmove+0xc>
 800e402:	188b      	adds	r3, r1, r2
 800e404:	4298      	cmp	r0, r3
 800e406:	d303      	bcc.n	800e410 <memmove+0x14>
 800e408:	2300      	movs	r3, #0
 800e40a:	e007      	b.n	800e41c <memmove+0x20>
 800e40c:	5c8b      	ldrb	r3, [r1, r2]
 800e40e:	5483      	strb	r3, [r0, r2]
 800e410:	3a01      	subs	r2, #1
 800e412:	d2fb      	bcs.n	800e40c <memmove+0x10>
 800e414:	bd10      	pop	{r4, pc}
 800e416:	5ccc      	ldrb	r4, [r1, r3]
 800e418:	54c4      	strb	r4, [r0, r3]
 800e41a:	3301      	adds	r3, #1
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d1fa      	bne.n	800e416 <memmove+0x1a>
 800e420:	e7f8      	b.n	800e414 <memmove+0x18>

0800e422 <__malloc_lock>:
 800e422:	4770      	bx	lr

0800e424 <__malloc_unlock>:
 800e424:	4770      	bx	lr

0800e426 <_realloc_r>:
 800e426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e428:	0007      	movs	r7, r0
 800e42a:	000d      	movs	r5, r1
 800e42c:	0016      	movs	r6, r2
 800e42e:	2900      	cmp	r1, #0
 800e430:	d105      	bne.n	800e43e <_realloc_r+0x18>
 800e432:	0011      	movs	r1, r2
 800e434:	f7ff fc0c 	bl	800dc50 <_malloc_r>
 800e438:	0004      	movs	r4, r0
 800e43a:	0020      	movs	r0, r4
 800e43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e43e:	2a00      	cmp	r2, #0
 800e440:	d103      	bne.n	800e44a <_realloc_r+0x24>
 800e442:	f7ff fbbb 	bl	800dbbc <_free_r>
 800e446:	0034      	movs	r4, r6
 800e448:	e7f7      	b.n	800e43a <_realloc_r+0x14>
 800e44a:	f000 f827 	bl	800e49c <_malloc_usable_size_r>
 800e44e:	002c      	movs	r4, r5
 800e450:	42b0      	cmp	r0, r6
 800e452:	d2f2      	bcs.n	800e43a <_realloc_r+0x14>
 800e454:	0031      	movs	r1, r6
 800e456:	0038      	movs	r0, r7
 800e458:	f7ff fbfa 	bl	800dc50 <_malloc_r>
 800e45c:	1e04      	subs	r4, r0, #0
 800e45e:	d0ec      	beq.n	800e43a <_realloc_r+0x14>
 800e460:	0029      	movs	r1, r5
 800e462:	0032      	movs	r2, r6
 800e464:	f7fb fd1d 	bl	8009ea2 <memcpy>
 800e468:	0029      	movs	r1, r5
 800e46a:	0038      	movs	r0, r7
 800e46c:	f7ff fba6 	bl	800dbbc <_free_r>
 800e470:	e7e3      	b.n	800e43a <_realloc_r+0x14>
	...

0800e474 <_read_r>:
 800e474:	b570      	push	{r4, r5, r6, lr}
 800e476:	0005      	movs	r5, r0
 800e478:	0008      	movs	r0, r1
 800e47a:	0011      	movs	r1, r2
 800e47c:	2200      	movs	r2, #0
 800e47e:	4c06      	ldr	r4, [pc, #24]	; (800e498 <_read_r+0x24>)
 800e480:	6022      	str	r2, [r4, #0]
 800e482:	001a      	movs	r2, r3
 800e484:	f7f6 fe62 	bl	800514c <_read>
 800e488:	1c43      	adds	r3, r0, #1
 800e48a:	d103      	bne.n	800e494 <_read_r+0x20>
 800e48c:	6823      	ldr	r3, [r4, #0]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d000      	beq.n	800e494 <_read_r+0x20>
 800e492:	602b      	str	r3, [r5, #0]
 800e494:	bd70      	pop	{r4, r5, r6, pc}
 800e496:	46c0      	nop			; (mov r8, r8)
 800e498:	200012cc 	.word	0x200012cc

0800e49c <_malloc_usable_size_r>:
 800e49c:	1f0b      	subs	r3, r1, #4
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	1f18      	subs	r0, r3, #4
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	da01      	bge.n	800e4aa <_malloc_usable_size_r+0xe>
 800e4a6:	580b      	ldr	r3, [r1, r0]
 800e4a8:	18c0      	adds	r0, r0, r3
 800e4aa:	4770      	bx	lr

0800e4ac <_init>:
 800e4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4ae:	46c0      	nop			; (mov r8, r8)
 800e4b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4b2:	bc08      	pop	{r3}
 800e4b4:	469e      	mov	lr, r3
 800e4b6:	4770      	bx	lr

0800e4b8 <_fini>:
 800e4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4ba:	46c0      	nop			; (mov r8, r8)
 800e4bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4be:	bc08      	pop	{r3}
 800e4c0:	469e      	mov	lr, r3
 800e4c2:	4770      	bx	lr
