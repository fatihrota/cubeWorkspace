
L0_WifiEnergyMeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .app_info     00000008  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000e814  080000c8  080000c8  000100c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000988  0800e8e0  0800e8e0  0001e8e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800f268  0800f268  0002f4cc  2**0
                  CONTENTS
  5 .ARM          00000008  0800f268  0800f268  0001f268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800f270  0800f270  0002f4cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800f270  0800f270  0001f270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800f274  0800f274  0001f274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RAMVectorTable 00000100  20000000  20000000  00030000  2**2
                  ALLOC
 10 .IAPMailbox   00000008  20000100  20000100  00030000  2**2
                  ALLOC
 11 .data         00000240  20000108  0800f278  00020108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .app_sha      00000014  0800f4b8  0800f4b8  0002f4b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .conf         00000000  0802f000  0802f000  0002f4cc  2**0
                  CONTENTS
 14 .bss          000010b0  20000348  20000348  00030000  2**3
                  ALLOC
 15 ._user_heap_stack 00000600  200013f8  200013f8  00030000  2**0
                  ALLOC
 16 .ARM.attributes 00000028  00000000  00000000  0002f4cc  2**0
                  CONTENTS, READONLY
 17 .debug_info   0001b6f3  00000000  00000000  0002f4f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00003acc  00000000  00000000  0004abe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00000f50  00000000  00000000  0004e6b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00000dd0  00000000  00000000  0004f608  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  00018f0b  00000000  00000000  000503d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   000110b2  00000000  00000000  000692e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    0008438b  00000000  00000000  0007a395  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  000fe720  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00004828  00000000  00000000  000fe79c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c8 <__do_global_dtors_aux>:
 80000c8:	b510      	push	{r4, lr}
 80000ca:	4c06      	ldr	r4, [pc, #24]	; (80000e4 <__do_global_dtors_aux+0x1c>)
 80000cc:	7823      	ldrb	r3, [r4, #0]
 80000ce:	2b00      	cmp	r3, #0
 80000d0:	d107      	bne.n	80000e2 <__do_global_dtors_aux+0x1a>
 80000d2:	4b05      	ldr	r3, [pc, #20]	; (80000e8 <__do_global_dtors_aux+0x20>)
 80000d4:	2b00      	cmp	r3, #0
 80000d6:	d002      	beq.n	80000de <__do_global_dtors_aux+0x16>
 80000d8:	4804      	ldr	r0, [pc, #16]	; (80000ec <__do_global_dtors_aux+0x24>)
 80000da:	e000      	b.n	80000de <__do_global_dtors_aux+0x16>
 80000dc:	bf00      	nop
 80000de:	2301      	movs	r3, #1
 80000e0:	7023      	strb	r3, [r4, #0]
 80000e2:	bd10      	pop	{r4, pc}
 80000e4:	20000348 	.word	0x20000348
 80000e8:	00000000 	.word	0x00000000
 80000ec:	0800e8c4 	.word	0x0800e8c4

080000f0 <frame_dummy>:
 80000f0:	4b04      	ldr	r3, [pc, #16]	; (8000104 <frame_dummy+0x14>)
 80000f2:	b510      	push	{r4, lr}
 80000f4:	2b00      	cmp	r3, #0
 80000f6:	d003      	beq.n	8000100 <frame_dummy+0x10>
 80000f8:	4903      	ldr	r1, [pc, #12]	; (8000108 <frame_dummy+0x18>)
 80000fa:	4804      	ldr	r0, [pc, #16]	; (800010c <frame_dummy+0x1c>)
 80000fc:	e000      	b.n	8000100 <frame_dummy+0x10>
 80000fe:	bf00      	nop
 8000100:	bd10      	pop	{r4, pc}
 8000102:	46c0      	nop			; (mov r8, r8)
 8000104:	00000000 	.word	0x00000000
 8000108:	2000034c 	.word	0x2000034c
 800010c:	0800e8c4 	.word	0x0800e8c4

08000110 <strlen>:
 8000110:	2300      	movs	r3, #0
 8000112:	5cc2      	ldrb	r2, [r0, r3]
 8000114:	3301      	adds	r3, #1
 8000116:	2a00      	cmp	r2, #0
 8000118:	d1fb      	bne.n	8000112 <strlen+0x2>
 800011a:	1e58      	subs	r0, r3, #1
 800011c:	4770      	bx	lr
	...

08000120 <__gnu_thumb1_case_uqi>:
 8000120:	b402      	push	{r1}
 8000122:	4671      	mov	r1, lr
 8000124:	0849      	lsrs	r1, r1, #1
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	5c09      	ldrb	r1, [r1, r0]
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	448e      	add	lr, r1
 800012e:	bc02      	pop	{r1}
 8000130:	4770      	bx	lr
 8000132:	46c0      	nop			; (mov r8, r8)

08000134 <__udivsi3>:
 8000134:	2200      	movs	r2, #0
 8000136:	0843      	lsrs	r3, r0, #1
 8000138:	428b      	cmp	r3, r1
 800013a:	d374      	bcc.n	8000226 <__udivsi3+0xf2>
 800013c:	0903      	lsrs	r3, r0, #4
 800013e:	428b      	cmp	r3, r1
 8000140:	d35f      	bcc.n	8000202 <__udivsi3+0xce>
 8000142:	0a03      	lsrs	r3, r0, #8
 8000144:	428b      	cmp	r3, r1
 8000146:	d344      	bcc.n	80001d2 <__udivsi3+0x9e>
 8000148:	0b03      	lsrs	r3, r0, #12
 800014a:	428b      	cmp	r3, r1
 800014c:	d328      	bcc.n	80001a0 <__udivsi3+0x6c>
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d30d      	bcc.n	8000170 <__udivsi3+0x3c>
 8000154:	22ff      	movs	r2, #255	; 0xff
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	ba12      	rev	r2, r2
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d302      	bcc.n	8000166 <__udivsi3+0x32>
 8000160:	1212      	asrs	r2, r2, #8
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	d065      	beq.n	8000232 <__udivsi3+0xfe>
 8000166:	0b03      	lsrs	r3, r0, #12
 8000168:	428b      	cmp	r3, r1
 800016a:	d319      	bcc.n	80001a0 <__udivsi3+0x6c>
 800016c:	e000      	b.n	8000170 <__udivsi3+0x3c>
 800016e:	0a09      	lsrs	r1, r1, #8
 8000170:	0bc3      	lsrs	r3, r0, #15
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x46>
 8000176:	03cb      	lsls	r3, r1, #15
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b83      	lsrs	r3, r0, #14
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x52>
 8000182:	038b      	lsls	r3, r1, #14
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b43      	lsrs	r3, r0, #13
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x5e>
 800018e:	034b      	lsls	r3, r1, #13
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b03      	lsrs	r3, r0, #12
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x6a>
 800019a:	030b      	lsls	r3, r1, #12
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0ac3      	lsrs	r3, r0, #11
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x76>
 80001a6:	02cb      	lsls	r3, r1, #11
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a83      	lsrs	r3, r0, #10
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x82>
 80001b2:	028b      	lsls	r3, r1, #10
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a43      	lsrs	r3, r0, #9
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x8e>
 80001be:	024b      	lsls	r3, r1, #9
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a03      	lsrs	r3, r0, #8
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x9a>
 80001ca:	020b      	lsls	r3, r1, #8
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	d2cd      	bcs.n	800016e <__udivsi3+0x3a>
 80001d2:	09c3      	lsrs	r3, r0, #7
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xa8>
 80001d8:	01cb      	lsls	r3, r1, #7
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0983      	lsrs	r3, r0, #6
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xb4>
 80001e4:	018b      	lsls	r3, r1, #6
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0943      	lsrs	r3, r0, #5
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xc0>
 80001f0:	014b      	lsls	r3, r1, #5
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0903      	lsrs	r3, r0, #4
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xcc>
 80001fc:	010b      	lsls	r3, r1, #4
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	08c3      	lsrs	r3, r0, #3
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xd8>
 8000208:	00cb      	lsls	r3, r1, #3
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0883      	lsrs	r3, r0, #2
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xe4>
 8000214:	008b      	lsls	r3, r1, #2
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0843      	lsrs	r3, r0, #1
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xf0>
 8000220:	004b      	lsls	r3, r1, #1
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	1a41      	subs	r1, r0, r1
 8000228:	d200      	bcs.n	800022c <__udivsi3+0xf8>
 800022a:	4601      	mov	r1, r0
 800022c:	4152      	adcs	r2, r2
 800022e:	4610      	mov	r0, r2
 8000230:	4770      	bx	lr
 8000232:	e7ff      	b.n	8000234 <__udivsi3+0x100>
 8000234:	b501      	push	{r0, lr}
 8000236:	2000      	movs	r0, #0
 8000238:	f000 f8f0 	bl	800041c <__aeabi_idiv0>
 800023c:	bd02      	pop	{r1, pc}
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <__aeabi_uidivmod>:
 8000240:	2900      	cmp	r1, #0
 8000242:	d0f7      	beq.n	8000234 <__udivsi3+0x100>
 8000244:	e776      	b.n	8000134 <__udivsi3>
 8000246:	4770      	bx	lr

08000248 <__divsi3>:
 8000248:	4603      	mov	r3, r0
 800024a:	430b      	orrs	r3, r1
 800024c:	d47f      	bmi.n	800034e <__divsi3+0x106>
 800024e:	2200      	movs	r2, #0
 8000250:	0843      	lsrs	r3, r0, #1
 8000252:	428b      	cmp	r3, r1
 8000254:	d374      	bcc.n	8000340 <__divsi3+0xf8>
 8000256:	0903      	lsrs	r3, r0, #4
 8000258:	428b      	cmp	r3, r1
 800025a:	d35f      	bcc.n	800031c <__divsi3+0xd4>
 800025c:	0a03      	lsrs	r3, r0, #8
 800025e:	428b      	cmp	r3, r1
 8000260:	d344      	bcc.n	80002ec <__divsi3+0xa4>
 8000262:	0b03      	lsrs	r3, r0, #12
 8000264:	428b      	cmp	r3, r1
 8000266:	d328      	bcc.n	80002ba <__divsi3+0x72>
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d30d      	bcc.n	800028a <__divsi3+0x42>
 800026e:	22ff      	movs	r2, #255	; 0xff
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	ba12      	rev	r2, r2
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d302      	bcc.n	8000280 <__divsi3+0x38>
 800027a:	1212      	asrs	r2, r2, #8
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	d065      	beq.n	800034c <__divsi3+0x104>
 8000280:	0b03      	lsrs	r3, r0, #12
 8000282:	428b      	cmp	r3, r1
 8000284:	d319      	bcc.n	80002ba <__divsi3+0x72>
 8000286:	e000      	b.n	800028a <__divsi3+0x42>
 8000288:	0a09      	lsrs	r1, r1, #8
 800028a:	0bc3      	lsrs	r3, r0, #15
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x4c>
 8000290:	03cb      	lsls	r3, r1, #15
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b83      	lsrs	r3, r0, #14
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x58>
 800029c:	038b      	lsls	r3, r1, #14
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b43      	lsrs	r3, r0, #13
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x64>
 80002a8:	034b      	lsls	r3, r1, #13
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b03      	lsrs	r3, r0, #12
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x70>
 80002b4:	030b      	lsls	r3, r1, #12
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0ac3      	lsrs	r3, r0, #11
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x7c>
 80002c0:	02cb      	lsls	r3, r1, #11
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a83      	lsrs	r3, r0, #10
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x88>
 80002cc:	028b      	lsls	r3, r1, #10
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a43      	lsrs	r3, r0, #9
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x94>
 80002d8:	024b      	lsls	r3, r1, #9
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a03      	lsrs	r3, r0, #8
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0xa0>
 80002e4:	020b      	lsls	r3, r1, #8
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	d2cd      	bcs.n	8000288 <__divsi3+0x40>
 80002ec:	09c3      	lsrs	r3, r0, #7
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xae>
 80002f2:	01cb      	lsls	r3, r1, #7
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0983      	lsrs	r3, r0, #6
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xba>
 80002fe:	018b      	lsls	r3, r1, #6
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0943      	lsrs	r3, r0, #5
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xc6>
 800030a:	014b      	lsls	r3, r1, #5
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0903      	lsrs	r3, r0, #4
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xd2>
 8000316:	010b      	lsls	r3, r1, #4
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	08c3      	lsrs	r3, r0, #3
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xde>
 8000322:	00cb      	lsls	r3, r1, #3
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0883      	lsrs	r3, r0, #2
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xea>
 800032e:	008b      	lsls	r3, r1, #2
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0843      	lsrs	r3, r0, #1
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xf6>
 800033a:	004b      	lsls	r3, r1, #1
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	1a41      	subs	r1, r0, r1
 8000342:	d200      	bcs.n	8000346 <__divsi3+0xfe>
 8000344:	4601      	mov	r1, r0
 8000346:	4152      	adcs	r2, r2
 8000348:	4610      	mov	r0, r2
 800034a:	4770      	bx	lr
 800034c:	e05d      	b.n	800040a <__divsi3+0x1c2>
 800034e:	0fca      	lsrs	r2, r1, #31
 8000350:	d000      	beq.n	8000354 <__divsi3+0x10c>
 8000352:	4249      	negs	r1, r1
 8000354:	1003      	asrs	r3, r0, #32
 8000356:	d300      	bcc.n	800035a <__divsi3+0x112>
 8000358:	4240      	negs	r0, r0
 800035a:	4053      	eors	r3, r2
 800035c:	2200      	movs	r2, #0
 800035e:	469c      	mov	ip, r3
 8000360:	0903      	lsrs	r3, r0, #4
 8000362:	428b      	cmp	r3, r1
 8000364:	d32d      	bcc.n	80003c2 <__divsi3+0x17a>
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d312      	bcc.n	8000392 <__divsi3+0x14a>
 800036c:	22fc      	movs	r2, #252	; 0xfc
 800036e:	0189      	lsls	r1, r1, #6
 8000370:	ba12      	rev	r2, r2
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d30c      	bcc.n	8000392 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d308      	bcc.n	8000392 <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d304      	bcc.n	8000392 <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	d03a      	beq.n	8000402 <__divsi3+0x1ba>
 800038c:	1192      	asrs	r2, r2, #6
 800038e:	e000      	b.n	8000392 <__divsi3+0x14a>
 8000390:	0989      	lsrs	r1, r1, #6
 8000392:	09c3      	lsrs	r3, r0, #7
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x154>
 8000398:	01cb      	lsls	r3, r1, #7
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0983      	lsrs	r3, r0, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x160>
 80003a4:	018b      	lsls	r3, r1, #6
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0943      	lsrs	r3, r0, #5
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x16c>
 80003b0:	014b      	lsls	r3, r1, #5
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0903      	lsrs	r3, r0, #4
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x178>
 80003bc:	010b      	lsls	r3, r1, #4
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	08c3      	lsrs	r3, r0, #3
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x184>
 80003c8:	00cb      	lsls	r3, r1, #3
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0883      	lsrs	r3, r0, #2
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x190>
 80003d4:	008b      	lsls	r3, r1, #2
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	d2d9      	bcs.n	8000390 <__divsi3+0x148>
 80003dc:	0843      	lsrs	r3, r0, #1
 80003de:	428b      	cmp	r3, r1
 80003e0:	d301      	bcc.n	80003e6 <__divsi3+0x19e>
 80003e2:	004b      	lsls	r3, r1, #1
 80003e4:	1ac0      	subs	r0, r0, r3
 80003e6:	4152      	adcs	r2, r2
 80003e8:	1a41      	subs	r1, r0, r1
 80003ea:	d200      	bcs.n	80003ee <__divsi3+0x1a6>
 80003ec:	4601      	mov	r1, r0
 80003ee:	4663      	mov	r3, ip
 80003f0:	4152      	adcs	r2, r2
 80003f2:	105b      	asrs	r3, r3, #1
 80003f4:	4610      	mov	r0, r2
 80003f6:	d301      	bcc.n	80003fc <__divsi3+0x1b4>
 80003f8:	4240      	negs	r0, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d500      	bpl.n	8000400 <__divsi3+0x1b8>
 80003fe:	4249      	negs	r1, r1
 8000400:	4770      	bx	lr
 8000402:	4663      	mov	r3, ip
 8000404:	105b      	asrs	r3, r3, #1
 8000406:	d300      	bcc.n	800040a <__divsi3+0x1c2>
 8000408:	4240      	negs	r0, r0
 800040a:	b501      	push	{r0, lr}
 800040c:	2000      	movs	r0, #0
 800040e:	f000 f805 	bl	800041c <__aeabi_idiv0>
 8000412:	bd02      	pop	{r1, pc}

08000414 <__aeabi_idivmod>:
 8000414:	2900      	cmp	r1, #0
 8000416:	d0f8      	beq.n	800040a <__divsi3+0x1c2>
 8000418:	e716      	b.n	8000248 <__divsi3>
 800041a:	4770      	bx	lr

0800041c <__aeabi_idiv0>:
 800041c:	4770      	bx	lr
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__aeabi_cdrcmple>:
 8000420:	4684      	mov	ip, r0
 8000422:	1c10      	adds	r0, r2, #0
 8000424:	4662      	mov	r2, ip
 8000426:	468c      	mov	ip, r1
 8000428:	1c19      	adds	r1, r3, #0
 800042a:	4663      	mov	r3, ip
 800042c:	e000      	b.n	8000430 <__aeabi_cdcmpeq>
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_cdcmpeq>:
 8000430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000432:	f001 fcad 	bl	8001d90 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	d401      	bmi.n	800043e <__aeabi_cdcmpeq+0xe>
 800043a:	2100      	movs	r1, #0
 800043c:	42c8      	cmn	r0, r1
 800043e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000440 <__aeabi_dcmpeq>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f001 fc05 	bl	8001c50 <__eqdf2>
 8000446:	4240      	negs	r0, r0
 8000448:	3001      	adds	r0, #1
 800044a:	bd10      	pop	{r4, pc}

0800044c <__aeabi_dcmplt>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fc9f 	bl	8001d90 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	db01      	blt.n	800045a <__aeabi_dcmplt+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__aeabi_dcmple>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 fc95 	bl	8001d90 <__ledf2>
 8000466:	2800      	cmp	r0, #0
 8000468:	dd01      	ble.n	800046e <__aeabi_dcmple+0xe>
 800046a:	2000      	movs	r0, #0
 800046c:	bd10      	pop	{r4, pc}
 800046e:	2001      	movs	r0, #1
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__aeabi_dcmpgt>:
 8000474:	b510      	push	{r4, lr}
 8000476:	f001 fc27 	bl	8001cc8 <__gedf2>
 800047a:	2800      	cmp	r0, #0
 800047c:	dc01      	bgt.n	8000482 <__aeabi_dcmpgt+0xe>
 800047e:	2000      	movs	r0, #0
 8000480:	bd10      	pop	{r4, pc}
 8000482:	2001      	movs	r0, #1
 8000484:	bd10      	pop	{r4, pc}
 8000486:	46c0      	nop			; (mov r8, r8)

08000488 <__aeabi_dcmpge>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f001 fc1d 	bl	8001cc8 <__gedf2>
 800048e:	2800      	cmp	r0, #0
 8000490:	da01      	bge.n	8000496 <__aeabi_dcmpge+0xe>
 8000492:	2000      	movs	r0, #0
 8000494:	bd10      	pop	{r4, pc}
 8000496:	2001      	movs	r0, #1
 8000498:	bd10      	pop	{r4, pc}
 800049a:	46c0      	nop			; (mov r8, r8)

0800049c <__aeabi_uldivmod>:
 800049c:	2b00      	cmp	r3, #0
 800049e:	d111      	bne.n	80004c4 <__aeabi_uldivmod+0x28>
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	d10f      	bne.n	80004c4 <__aeabi_uldivmod+0x28>
 80004a4:	2900      	cmp	r1, #0
 80004a6:	d100      	bne.n	80004aa <__aeabi_uldivmod+0xe>
 80004a8:	2800      	cmp	r0, #0
 80004aa:	d002      	beq.n	80004b2 <__aeabi_uldivmod+0x16>
 80004ac:	2100      	movs	r1, #0
 80004ae:	43c9      	mvns	r1, r1
 80004b0:	1c08      	adds	r0, r1, #0
 80004b2:	b407      	push	{r0, r1, r2}
 80004b4:	4802      	ldr	r0, [pc, #8]	; (80004c0 <__aeabi_uldivmod+0x24>)
 80004b6:	a102      	add	r1, pc, #8	; (adr r1, 80004c0 <__aeabi_uldivmod+0x24>)
 80004b8:	1840      	adds	r0, r0, r1
 80004ba:	9002      	str	r0, [sp, #8]
 80004bc:	bd03      	pop	{r0, r1, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	ffffff5d 	.word	0xffffff5d
 80004c4:	b403      	push	{r0, r1}
 80004c6:	4668      	mov	r0, sp
 80004c8:	b501      	push	{r0, lr}
 80004ca:	9802      	ldr	r0, [sp, #8]
 80004cc:	f000 f84e 	bl	800056c <__udivmoddi4>
 80004d0:	9b01      	ldr	r3, [sp, #4]
 80004d2:	469e      	mov	lr, r3
 80004d4:	b002      	add	sp, #8
 80004d6:	bc0c      	pop	{r2, r3}
 80004d8:	4770      	bx	lr
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_lmul>:
 80004dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004de:	46ce      	mov	lr, r9
 80004e0:	4647      	mov	r7, r8
 80004e2:	0415      	lsls	r5, r2, #16
 80004e4:	0c2d      	lsrs	r5, r5, #16
 80004e6:	002e      	movs	r6, r5
 80004e8:	b580      	push	{r7, lr}
 80004ea:	0407      	lsls	r7, r0, #16
 80004ec:	0c14      	lsrs	r4, r2, #16
 80004ee:	0c3f      	lsrs	r7, r7, #16
 80004f0:	4699      	mov	r9, r3
 80004f2:	0c03      	lsrs	r3, r0, #16
 80004f4:	437e      	muls	r6, r7
 80004f6:	435d      	muls	r5, r3
 80004f8:	4367      	muls	r7, r4
 80004fa:	4363      	muls	r3, r4
 80004fc:	197f      	adds	r7, r7, r5
 80004fe:	0c34      	lsrs	r4, r6, #16
 8000500:	19e4      	adds	r4, r4, r7
 8000502:	469c      	mov	ip, r3
 8000504:	42a5      	cmp	r5, r4
 8000506:	d903      	bls.n	8000510 <__aeabi_lmul+0x34>
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	025b      	lsls	r3, r3, #9
 800050c:	4698      	mov	r8, r3
 800050e:	44c4      	add	ip, r8
 8000510:	464b      	mov	r3, r9
 8000512:	4343      	muls	r3, r0
 8000514:	4351      	muls	r1, r2
 8000516:	0c25      	lsrs	r5, r4, #16
 8000518:	0436      	lsls	r6, r6, #16
 800051a:	4465      	add	r5, ip
 800051c:	0c36      	lsrs	r6, r6, #16
 800051e:	0424      	lsls	r4, r4, #16
 8000520:	19a4      	adds	r4, r4, r6
 8000522:	195b      	adds	r3, r3, r5
 8000524:	1859      	adds	r1, r3, r1
 8000526:	0020      	movs	r0, r4
 8000528:	bc0c      	pop	{r2, r3}
 800052a:	4690      	mov	r8, r2
 800052c:	4699      	mov	r9, r3
 800052e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000530 <__aeabi_d2uiz>:
 8000530:	b570      	push	{r4, r5, r6, lr}
 8000532:	2200      	movs	r2, #0
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <__aeabi_d2uiz+0x38>)
 8000536:	0004      	movs	r4, r0
 8000538:	000d      	movs	r5, r1
 800053a:	f7ff ffa5 	bl	8000488 <__aeabi_dcmpge>
 800053e:	2800      	cmp	r0, #0
 8000540:	d104      	bne.n	800054c <__aeabi_d2uiz+0x1c>
 8000542:	0020      	movs	r0, r4
 8000544:	0029      	movs	r1, r5
 8000546:	f002 fa61 	bl	8002a0c <__aeabi_d2iz>
 800054a:	bd70      	pop	{r4, r5, r6, pc}
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <__aeabi_d2uiz+0x38>)
 800054e:	2200      	movs	r2, #0
 8000550:	0020      	movs	r0, r4
 8000552:	0029      	movs	r1, r5
 8000554:	f001 fef6 	bl	8002344 <__aeabi_dsub>
 8000558:	f002 fa58 	bl	8002a0c <__aeabi_d2iz>
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	061b      	lsls	r3, r3, #24
 8000560:	469c      	mov	ip, r3
 8000562:	4460      	add	r0, ip
 8000564:	e7f1      	b.n	800054a <__aeabi_d2uiz+0x1a>
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	41e00000 	.word	0x41e00000

0800056c <__udivmoddi4>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	464f      	mov	r7, r9
 8000570:	4646      	mov	r6, r8
 8000572:	46d6      	mov	lr, sl
 8000574:	b5c0      	push	{r6, r7, lr}
 8000576:	0004      	movs	r4, r0
 8000578:	b082      	sub	sp, #8
 800057a:	000d      	movs	r5, r1
 800057c:	4691      	mov	r9, r2
 800057e:	4698      	mov	r8, r3
 8000580:	428b      	cmp	r3, r1
 8000582:	d82f      	bhi.n	80005e4 <__udivmoddi4+0x78>
 8000584:	d02c      	beq.n	80005e0 <__udivmoddi4+0x74>
 8000586:	4641      	mov	r1, r8
 8000588:	4648      	mov	r0, r9
 800058a:	f002 fbd5 	bl	8002d38 <__clzdi2>
 800058e:	0029      	movs	r1, r5
 8000590:	0006      	movs	r6, r0
 8000592:	0020      	movs	r0, r4
 8000594:	f002 fbd0 	bl	8002d38 <__clzdi2>
 8000598:	1a33      	subs	r3, r6, r0
 800059a:	469c      	mov	ip, r3
 800059c:	3b20      	subs	r3, #32
 800059e:	469a      	mov	sl, r3
 80005a0:	d500      	bpl.n	80005a4 <__udivmoddi4+0x38>
 80005a2:	e076      	b.n	8000692 <__udivmoddi4+0x126>
 80005a4:	464b      	mov	r3, r9
 80005a6:	4652      	mov	r2, sl
 80005a8:	4093      	lsls	r3, r2
 80005aa:	001f      	movs	r7, r3
 80005ac:	464b      	mov	r3, r9
 80005ae:	4662      	mov	r2, ip
 80005b0:	4093      	lsls	r3, r2
 80005b2:	001e      	movs	r6, r3
 80005b4:	42af      	cmp	r7, r5
 80005b6:	d828      	bhi.n	800060a <__udivmoddi4+0x9e>
 80005b8:	d025      	beq.n	8000606 <__udivmoddi4+0x9a>
 80005ba:	4653      	mov	r3, sl
 80005bc:	1ba4      	subs	r4, r4, r6
 80005be:	41bd      	sbcs	r5, r7
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	da00      	bge.n	80005c6 <__udivmoddi4+0x5a>
 80005c4:	e07b      	b.n	80006be <__udivmoddi4+0x152>
 80005c6:	2200      	movs	r2, #0
 80005c8:	2300      	movs	r3, #0
 80005ca:	9200      	str	r2, [sp, #0]
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2301      	movs	r3, #1
 80005d0:	4652      	mov	r2, sl
 80005d2:	4093      	lsls	r3, r2
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	2301      	movs	r3, #1
 80005d8:	4662      	mov	r2, ip
 80005da:	4093      	lsls	r3, r2
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	e018      	b.n	8000612 <__udivmoddi4+0xa6>
 80005e0:	4282      	cmp	r2, r0
 80005e2:	d9d0      	bls.n	8000586 <__udivmoddi4+0x1a>
 80005e4:	2200      	movs	r2, #0
 80005e6:	2300      	movs	r3, #0
 80005e8:	9200      	str	r2, [sp, #0]
 80005ea:	9301      	str	r3, [sp, #4]
 80005ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <__udivmoddi4+0x8a>
 80005f2:	601c      	str	r4, [r3, #0]
 80005f4:	605d      	str	r5, [r3, #4]
 80005f6:	9800      	ldr	r0, [sp, #0]
 80005f8:	9901      	ldr	r1, [sp, #4]
 80005fa:	b002      	add	sp, #8
 80005fc:	bc1c      	pop	{r2, r3, r4}
 80005fe:	4690      	mov	r8, r2
 8000600:	4699      	mov	r9, r3
 8000602:	46a2      	mov	sl, r4
 8000604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000606:	42a3      	cmp	r3, r4
 8000608:	d9d7      	bls.n	80005ba <__udivmoddi4+0x4e>
 800060a:	2200      	movs	r2, #0
 800060c:	2300      	movs	r3, #0
 800060e:	9200      	str	r2, [sp, #0]
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	4663      	mov	r3, ip
 8000614:	2b00      	cmp	r3, #0
 8000616:	d0e9      	beq.n	80005ec <__udivmoddi4+0x80>
 8000618:	07fb      	lsls	r3, r7, #31
 800061a:	4698      	mov	r8, r3
 800061c:	4641      	mov	r1, r8
 800061e:	0872      	lsrs	r2, r6, #1
 8000620:	430a      	orrs	r2, r1
 8000622:	087b      	lsrs	r3, r7, #1
 8000624:	4666      	mov	r6, ip
 8000626:	e00e      	b.n	8000646 <__udivmoddi4+0xda>
 8000628:	42ab      	cmp	r3, r5
 800062a:	d101      	bne.n	8000630 <__udivmoddi4+0xc4>
 800062c:	42a2      	cmp	r2, r4
 800062e:	d80c      	bhi.n	800064a <__udivmoddi4+0xde>
 8000630:	1aa4      	subs	r4, r4, r2
 8000632:	419d      	sbcs	r5, r3
 8000634:	2001      	movs	r0, #1
 8000636:	1924      	adds	r4, r4, r4
 8000638:	416d      	adcs	r5, r5
 800063a:	2100      	movs	r1, #0
 800063c:	3e01      	subs	r6, #1
 800063e:	1824      	adds	r4, r4, r0
 8000640:	414d      	adcs	r5, r1
 8000642:	2e00      	cmp	r6, #0
 8000644:	d006      	beq.n	8000654 <__udivmoddi4+0xe8>
 8000646:	42ab      	cmp	r3, r5
 8000648:	d9ee      	bls.n	8000628 <__udivmoddi4+0xbc>
 800064a:	3e01      	subs	r6, #1
 800064c:	1924      	adds	r4, r4, r4
 800064e:	416d      	adcs	r5, r5
 8000650:	2e00      	cmp	r6, #0
 8000652:	d1f8      	bne.n	8000646 <__udivmoddi4+0xda>
 8000654:	9800      	ldr	r0, [sp, #0]
 8000656:	9901      	ldr	r1, [sp, #4]
 8000658:	4653      	mov	r3, sl
 800065a:	1900      	adds	r0, r0, r4
 800065c:	4169      	adcs	r1, r5
 800065e:	2b00      	cmp	r3, #0
 8000660:	db23      	blt.n	80006aa <__udivmoddi4+0x13e>
 8000662:	002b      	movs	r3, r5
 8000664:	4652      	mov	r2, sl
 8000666:	40d3      	lsrs	r3, r2
 8000668:	002a      	movs	r2, r5
 800066a:	4664      	mov	r4, ip
 800066c:	40e2      	lsrs	r2, r4
 800066e:	001c      	movs	r4, r3
 8000670:	4653      	mov	r3, sl
 8000672:	0015      	movs	r5, r2
 8000674:	2b00      	cmp	r3, #0
 8000676:	db2d      	blt.n	80006d4 <__udivmoddi4+0x168>
 8000678:	0026      	movs	r6, r4
 800067a:	4657      	mov	r7, sl
 800067c:	40be      	lsls	r6, r7
 800067e:	0033      	movs	r3, r6
 8000680:	0026      	movs	r6, r4
 8000682:	4667      	mov	r7, ip
 8000684:	40be      	lsls	r6, r7
 8000686:	0032      	movs	r2, r6
 8000688:	1a80      	subs	r0, r0, r2
 800068a:	4199      	sbcs	r1, r3
 800068c:	9000      	str	r0, [sp, #0]
 800068e:	9101      	str	r1, [sp, #4]
 8000690:	e7ac      	b.n	80005ec <__udivmoddi4+0x80>
 8000692:	4662      	mov	r2, ip
 8000694:	2320      	movs	r3, #32
 8000696:	1a9b      	subs	r3, r3, r2
 8000698:	464a      	mov	r2, r9
 800069a:	40da      	lsrs	r2, r3
 800069c:	4661      	mov	r1, ip
 800069e:	0013      	movs	r3, r2
 80006a0:	4642      	mov	r2, r8
 80006a2:	408a      	lsls	r2, r1
 80006a4:	0017      	movs	r7, r2
 80006a6:	431f      	orrs	r7, r3
 80006a8:	e780      	b.n	80005ac <__udivmoddi4+0x40>
 80006aa:	4662      	mov	r2, ip
 80006ac:	2320      	movs	r3, #32
 80006ae:	1a9b      	subs	r3, r3, r2
 80006b0:	002a      	movs	r2, r5
 80006b2:	4666      	mov	r6, ip
 80006b4:	409a      	lsls	r2, r3
 80006b6:	0023      	movs	r3, r4
 80006b8:	40f3      	lsrs	r3, r6
 80006ba:	4313      	orrs	r3, r2
 80006bc:	e7d4      	b.n	8000668 <__udivmoddi4+0xfc>
 80006be:	4662      	mov	r2, ip
 80006c0:	2320      	movs	r3, #32
 80006c2:	2100      	movs	r1, #0
 80006c4:	1a9b      	subs	r3, r3, r2
 80006c6:	2200      	movs	r2, #0
 80006c8:	9100      	str	r1, [sp, #0]
 80006ca:	9201      	str	r2, [sp, #4]
 80006cc:	2201      	movs	r2, #1
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	9201      	str	r2, [sp, #4]
 80006d2:	e780      	b.n	80005d6 <__udivmoddi4+0x6a>
 80006d4:	2320      	movs	r3, #32
 80006d6:	4662      	mov	r2, ip
 80006d8:	0026      	movs	r6, r4
 80006da:	1a9b      	subs	r3, r3, r2
 80006dc:	40de      	lsrs	r6, r3
 80006de:	002f      	movs	r7, r5
 80006e0:	46b0      	mov	r8, r6
 80006e2:	4666      	mov	r6, ip
 80006e4:	40b7      	lsls	r7, r6
 80006e6:	4646      	mov	r6, r8
 80006e8:	003b      	movs	r3, r7
 80006ea:	4333      	orrs	r3, r6
 80006ec:	e7c8      	b.n	8000680 <__udivmoddi4+0x114>
 80006ee:	46c0      	nop			; (mov r8, r8)

080006f0 <__aeabi_fdiv>:
 80006f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006f2:	4657      	mov	r7, sl
 80006f4:	464e      	mov	r6, r9
 80006f6:	4645      	mov	r5, r8
 80006f8:	46de      	mov	lr, fp
 80006fa:	0244      	lsls	r4, r0, #9
 80006fc:	b5e0      	push	{r5, r6, r7, lr}
 80006fe:	0046      	lsls	r6, r0, #1
 8000700:	4688      	mov	r8, r1
 8000702:	0a64      	lsrs	r4, r4, #9
 8000704:	0e36      	lsrs	r6, r6, #24
 8000706:	0fc7      	lsrs	r7, r0, #31
 8000708:	2e00      	cmp	r6, #0
 800070a:	d063      	beq.n	80007d4 <__aeabi_fdiv+0xe4>
 800070c:	2eff      	cmp	r6, #255	; 0xff
 800070e:	d024      	beq.n	800075a <__aeabi_fdiv+0x6a>
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	00e4      	lsls	r4, r4, #3
 8000714:	04db      	lsls	r3, r3, #19
 8000716:	431c      	orrs	r4, r3
 8000718:	2300      	movs	r3, #0
 800071a:	4699      	mov	r9, r3
 800071c:	469b      	mov	fp, r3
 800071e:	3e7f      	subs	r6, #127	; 0x7f
 8000720:	4643      	mov	r3, r8
 8000722:	4642      	mov	r2, r8
 8000724:	025d      	lsls	r5, r3, #9
 8000726:	0fd2      	lsrs	r2, r2, #31
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	0a6d      	lsrs	r5, r5, #9
 800072c:	0e1b      	lsrs	r3, r3, #24
 800072e:	4690      	mov	r8, r2
 8000730:	4692      	mov	sl, r2
 8000732:	d065      	beq.n	8000800 <__aeabi_fdiv+0x110>
 8000734:	2bff      	cmp	r3, #255	; 0xff
 8000736:	d055      	beq.n	80007e4 <__aeabi_fdiv+0xf4>
 8000738:	2280      	movs	r2, #128	; 0x80
 800073a:	2100      	movs	r1, #0
 800073c:	00ed      	lsls	r5, r5, #3
 800073e:	04d2      	lsls	r2, r2, #19
 8000740:	3b7f      	subs	r3, #127	; 0x7f
 8000742:	4315      	orrs	r5, r2
 8000744:	1af6      	subs	r6, r6, r3
 8000746:	4643      	mov	r3, r8
 8000748:	464a      	mov	r2, r9
 800074a:	407b      	eors	r3, r7
 800074c:	2a0f      	cmp	r2, #15
 800074e:	d900      	bls.n	8000752 <__aeabi_fdiv+0x62>
 8000750:	e08d      	b.n	800086e <__aeabi_fdiv+0x17e>
 8000752:	486d      	ldr	r0, [pc, #436]	; (8000908 <__aeabi_fdiv+0x218>)
 8000754:	0092      	lsls	r2, r2, #2
 8000756:	5882      	ldr	r2, [r0, r2]
 8000758:	4697      	mov	pc, r2
 800075a:	2c00      	cmp	r4, #0
 800075c:	d154      	bne.n	8000808 <__aeabi_fdiv+0x118>
 800075e:	2308      	movs	r3, #8
 8000760:	4699      	mov	r9, r3
 8000762:	3b06      	subs	r3, #6
 8000764:	26ff      	movs	r6, #255	; 0xff
 8000766:	469b      	mov	fp, r3
 8000768:	e7da      	b.n	8000720 <__aeabi_fdiv+0x30>
 800076a:	2500      	movs	r5, #0
 800076c:	4653      	mov	r3, sl
 800076e:	2902      	cmp	r1, #2
 8000770:	d01b      	beq.n	80007aa <__aeabi_fdiv+0xba>
 8000772:	2903      	cmp	r1, #3
 8000774:	d100      	bne.n	8000778 <__aeabi_fdiv+0x88>
 8000776:	e0bf      	b.n	80008f8 <__aeabi_fdiv+0x208>
 8000778:	2901      	cmp	r1, #1
 800077a:	d028      	beq.n	80007ce <__aeabi_fdiv+0xde>
 800077c:	0030      	movs	r0, r6
 800077e:	307f      	adds	r0, #127	; 0x7f
 8000780:	2800      	cmp	r0, #0
 8000782:	dd20      	ble.n	80007c6 <__aeabi_fdiv+0xd6>
 8000784:	076a      	lsls	r2, r5, #29
 8000786:	d004      	beq.n	8000792 <__aeabi_fdiv+0xa2>
 8000788:	220f      	movs	r2, #15
 800078a:	402a      	ands	r2, r5
 800078c:	2a04      	cmp	r2, #4
 800078e:	d000      	beq.n	8000792 <__aeabi_fdiv+0xa2>
 8000790:	3504      	adds	r5, #4
 8000792:	012a      	lsls	r2, r5, #4
 8000794:	d503      	bpl.n	800079e <__aeabi_fdiv+0xae>
 8000796:	0030      	movs	r0, r6
 8000798:	4a5c      	ldr	r2, [pc, #368]	; (800090c <__aeabi_fdiv+0x21c>)
 800079a:	3080      	adds	r0, #128	; 0x80
 800079c:	4015      	ands	r5, r2
 800079e:	28fe      	cmp	r0, #254	; 0xfe
 80007a0:	dc03      	bgt.n	80007aa <__aeabi_fdiv+0xba>
 80007a2:	01ac      	lsls	r4, r5, #6
 80007a4:	0a64      	lsrs	r4, r4, #9
 80007a6:	b2c2      	uxtb	r2, r0
 80007a8:	e001      	b.n	80007ae <__aeabi_fdiv+0xbe>
 80007aa:	22ff      	movs	r2, #255	; 0xff
 80007ac:	2400      	movs	r4, #0
 80007ae:	0264      	lsls	r4, r4, #9
 80007b0:	05d2      	lsls	r2, r2, #23
 80007b2:	0a60      	lsrs	r0, r4, #9
 80007b4:	07db      	lsls	r3, r3, #31
 80007b6:	4310      	orrs	r0, r2
 80007b8:	4318      	orrs	r0, r3
 80007ba:	bc3c      	pop	{r2, r3, r4, r5}
 80007bc:	4690      	mov	r8, r2
 80007be:	4699      	mov	r9, r3
 80007c0:	46a2      	mov	sl, r4
 80007c2:	46ab      	mov	fp, r5
 80007c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007c6:	2201      	movs	r2, #1
 80007c8:	1a10      	subs	r0, r2, r0
 80007ca:	281b      	cmp	r0, #27
 80007cc:	dd7c      	ble.n	80008c8 <__aeabi_fdiv+0x1d8>
 80007ce:	2200      	movs	r2, #0
 80007d0:	2400      	movs	r4, #0
 80007d2:	e7ec      	b.n	80007ae <__aeabi_fdiv+0xbe>
 80007d4:	2c00      	cmp	r4, #0
 80007d6:	d11d      	bne.n	8000814 <__aeabi_fdiv+0x124>
 80007d8:	2304      	movs	r3, #4
 80007da:	4699      	mov	r9, r3
 80007dc:	3b03      	subs	r3, #3
 80007de:	2600      	movs	r6, #0
 80007e0:	469b      	mov	fp, r3
 80007e2:	e79d      	b.n	8000720 <__aeabi_fdiv+0x30>
 80007e4:	3eff      	subs	r6, #255	; 0xff
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d120      	bne.n	800082c <__aeabi_fdiv+0x13c>
 80007ea:	2102      	movs	r1, #2
 80007ec:	4643      	mov	r3, r8
 80007ee:	464a      	mov	r2, r9
 80007f0:	407b      	eors	r3, r7
 80007f2:	430a      	orrs	r2, r1
 80007f4:	2a0f      	cmp	r2, #15
 80007f6:	d8d8      	bhi.n	80007aa <__aeabi_fdiv+0xba>
 80007f8:	4845      	ldr	r0, [pc, #276]	; (8000910 <__aeabi_fdiv+0x220>)
 80007fa:	0092      	lsls	r2, r2, #2
 80007fc:	5882      	ldr	r2, [r0, r2]
 80007fe:	4697      	mov	pc, r2
 8000800:	2d00      	cmp	r5, #0
 8000802:	d119      	bne.n	8000838 <__aeabi_fdiv+0x148>
 8000804:	2101      	movs	r1, #1
 8000806:	e7f1      	b.n	80007ec <__aeabi_fdiv+0xfc>
 8000808:	230c      	movs	r3, #12
 800080a:	4699      	mov	r9, r3
 800080c:	3b09      	subs	r3, #9
 800080e:	26ff      	movs	r6, #255	; 0xff
 8000810:	469b      	mov	fp, r3
 8000812:	e785      	b.n	8000720 <__aeabi_fdiv+0x30>
 8000814:	0020      	movs	r0, r4
 8000816:	f002 fa71 	bl	8002cfc <__clzsi2>
 800081a:	2676      	movs	r6, #118	; 0x76
 800081c:	1f43      	subs	r3, r0, #5
 800081e:	409c      	lsls	r4, r3
 8000820:	2300      	movs	r3, #0
 8000822:	4276      	negs	r6, r6
 8000824:	1a36      	subs	r6, r6, r0
 8000826:	4699      	mov	r9, r3
 8000828:	469b      	mov	fp, r3
 800082a:	e779      	b.n	8000720 <__aeabi_fdiv+0x30>
 800082c:	464a      	mov	r2, r9
 800082e:	2303      	movs	r3, #3
 8000830:	431a      	orrs	r2, r3
 8000832:	4691      	mov	r9, r2
 8000834:	2103      	movs	r1, #3
 8000836:	e786      	b.n	8000746 <__aeabi_fdiv+0x56>
 8000838:	0028      	movs	r0, r5
 800083a:	f002 fa5f 	bl	8002cfc <__clzsi2>
 800083e:	1f43      	subs	r3, r0, #5
 8000840:	1836      	adds	r6, r6, r0
 8000842:	409d      	lsls	r5, r3
 8000844:	3676      	adds	r6, #118	; 0x76
 8000846:	2100      	movs	r1, #0
 8000848:	e77d      	b.n	8000746 <__aeabi_fdiv+0x56>
 800084a:	2480      	movs	r4, #128	; 0x80
 800084c:	2300      	movs	r3, #0
 800084e:	03e4      	lsls	r4, r4, #15
 8000850:	22ff      	movs	r2, #255	; 0xff
 8000852:	e7ac      	b.n	80007ae <__aeabi_fdiv+0xbe>
 8000854:	2500      	movs	r5, #0
 8000856:	2380      	movs	r3, #128	; 0x80
 8000858:	03db      	lsls	r3, r3, #15
 800085a:	421c      	tst	r4, r3
 800085c:	d028      	beq.n	80008b0 <__aeabi_fdiv+0x1c0>
 800085e:	421d      	tst	r5, r3
 8000860:	d126      	bne.n	80008b0 <__aeabi_fdiv+0x1c0>
 8000862:	432b      	orrs	r3, r5
 8000864:	025c      	lsls	r4, r3, #9
 8000866:	0a64      	lsrs	r4, r4, #9
 8000868:	4643      	mov	r3, r8
 800086a:	22ff      	movs	r2, #255	; 0xff
 800086c:	e79f      	b.n	80007ae <__aeabi_fdiv+0xbe>
 800086e:	0162      	lsls	r2, r4, #5
 8000870:	016c      	lsls	r4, r5, #5
 8000872:	42a2      	cmp	r2, r4
 8000874:	d224      	bcs.n	80008c0 <__aeabi_fdiv+0x1d0>
 8000876:	211b      	movs	r1, #27
 8000878:	2500      	movs	r5, #0
 800087a:	3e01      	subs	r6, #1
 800087c:	2701      	movs	r7, #1
 800087e:	0010      	movs	r0, r2
 8000880:	006d      	lsls	r5, r5, #1
 8000882:	0052      	lsls	r2, r2, #1
 8000884:	2800      	cmp	r0, #0
 8000886:	db01      	blt.n	800088c <__aeabi_fdiv+0x19c>
 8000888:	4294      	cmp	r4, r2
 800088a:	d801      	bhi.n	8000890 <__aeabi_fdiv+0x1a0>
 800088c:	1b12      	subs	r2, r2, r4
 800088e:	433d      	orrs	r5, r7
 8000890:	3901      	subs	r1, #1
 8000892:	2900      	cmp	r1, #0
 8000894:	d1f3      	bne.n	800087e <__aeabi_fdiv+0x18e>
 8000896:	0014      	movs	r4, r2
 8000898:	1e62      	subs	r2, r4, #1
 800089a:	4194      	sbcs	r4, r2
 800089c:	4325      	orrs	r5, r4
 800089e:	e76d      	b.n	800077c <__aeabi_fdiv+0x8c>
 80008a0:	46ba      	mov	sl, r7
 80008a2:	4659      	mov	r1, fp
 80008a4:	0025      	movs	r5, r4
 80008a6:	4653      	mov	r3, sl
 80008a8:	2902      	cmp	r1, #2
 80008aa:	d000      	beq.n	80008ae <__aeabi_fdiv+0x1be>
 80008ac:	e761      	b.n	8000772 <__aeabi_fdiv+0x82>
 80008ae:	e77c      	b.n	80007aa <__aeabi_fdiv+0xba>
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	03db      	lsls	r3, r3, #15
 80008b4:	431c      	orrs	r4, r3
 80008b6:	0264      	lsls	r4, r4, #9
 80008b8:	0a64      	lsrs	r4, r4, #9
 80008ba:	003b      	movs	r3, r7
 80008bc:	22ff      	movs	r2, #255	; 0xff
 80008be:	e776      	b.n	80007ae <__aeabi_fdiv+0xbe>
 80008c0:	1b12      	subs	r2, r2, r4
 80008c2:	211a      	movs	r1, #26
 80008c4:	2501      	movs	r5, #1
 80008c6:	e7d9      	b.n	800087c <__aeabi_fdiv+0x18c>
 80008c8:	369e      	adds	r6, #158	; 0x9e
 80008ca:	002a      	movs	r2, r5
 80008cc:	40b5      	lsls	r5, r6
 80008ce:	002c      	movs	r4, r5
 80008d0:	40c2      	lsrs	r2, r0
 80008d2:	1e65      	subs	r5, r4, #1
 80008d4:	41ac      	sbcs	r4, r5
 80008d6:	4314      	orrs	r4, r2
 80008d8:	0762      	lsls	r2, r4, #29
 80008da:	d004      	beq.n	80008e6 <__aeabi_fdiv+0x1f6>
 80008dc:	220f      	movs	r2, #15
 80008de:	4022      	ands	r2, r4
 80008e0:	2a04      	cmp	r2, #4
 80008e2:	d000      	beq.n	80008e6 <__aeabi_fdiv+0x1f6>
 80008e4:	3404      	adds	r4, #4
 80008e6:	0162      	lsls	r2, r4, #5
 80008e8:	d403      	bmi.n	80008f2 <__aeabi_fdiv+0x202>
 80008ea:	01a4      	lsls	r4, r4, #6
 80008ec:	0a64      	lsrs	r4, r4, #9
 80008ee:	2200      	movs	r2, #0
 80008f0:	e75d      	b.n	80007ae <__aeabi_fdiv+0xbe>
 80008f2:	2201      	movs	r2, #1
 80008f4:	2400      	movs	r4, #0
 80008f6:	e75a      	b.n	80007ae <__aeabi_fdiv+0xbe>
 80008f8:	2480      	movs	r4, #128	; 0x80
 80008fa:	03e4      	lsls	r4, r4, #15
 80008fc:	432c      	orrs	r4, r5
 80008fe:	0264      	lsls	r4, r4, #9
 8000900:	0a64      	lsrs	r4, r4, #9
 8000902:	22ff      	movs	r2, #255	; 0xff
 8000904:	e753      	b.n	80007ae <__aeabi_fdiv+0xbe>
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	0800eaec 	.word	0x0800eaec
 800090c:	f7ffffff 	.word	0xf7ffffff
 8000910:	0800eb2c 	.word	0x0800eb2c

08000914 <__aeabi_fmul>:
 8000914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000916:	464e      	mov	r6, r9
 8000918:	4657      	mov	r7, sl
 800091a:	4645      	mov	r5, r8
 800091c:	46de      	mov	lr, fp
 800091e:	b5e0      	push	{r5, r6, r7, lr}
 8000920:	0243      	lsls	r3, r0, #9
 8000922:	0a5b      	lsrs	r3, r3, #9
 8000924:	0045      	lsls	r5, r0, #1
 8000926:	b083      	sub	sp, #12
 8000928:	1c0f      	adds	r7, r1, #0
 800092a:	4699      	mov	r9, r3
 800092c:	0e2d      	lsrs	r5, r5, #24
 800092e:	0fc6      	lsrs	r6, r0, #31
 8000930:	2d00      	cmp	r5, #0
 8000932:	d057      	beq.n	80009e4 <__aeabi_fmul+0xd0>
 8000934:	2dff      	cmp	r5, #255	; 0xff
 8000936:	d024      	beq.n	8000982 <__aeabi_fmul+0x6e>
 8000938:	2080      	movs	r0, #128	; 0x80
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	04c0      	lsls	r0, r0, #19
 800093e:	4318      	orrs	r0, r3
 8000940:	2300      	movs	r3, #0
 8000942:	4681      	mov	r9, r0
 8000944:	469a      	mov	sl, r3
 8000946:	469b      	mov	fp, r3
 8000948:	3d7f      	subs	r5, #127	; 0x7f
 800094a:	027c      	lsls	r4, r7, #9
 800094c:	007a      	lsls	r2, r7, #1
 800094e:	0ffb      	lsrs	r3, r7, #31
 8000950:	0a64      	lsrs	r4, r4, #9
 8000952:	0e12      	lsrs	r2, r2, #24
 8000954:	4698      	mov	r8, r3
 8000956:	d023      	beq.n	80009a0 <__aeabi_fmul+0x8c>
 8000958:	2aff      	cmp	r2, #255	; 0xff
 800095a:	d04b      	beq.n	80009f4 <__aeabi_fmul+0xe0>
 800095c:	00e3      	lsls	r3, r4, #3
 800095e:	2480      	movs	r4, #128	; 0x80
 8000960:	2000      	movs	r0, #0
 8000962:	04e4      	lsls	r4, r4, #19
 8000964:	3a7f      	subs	r2, #127	; 0x7f
 8000966:	431c      	orrs	r4, r3
 8000968:	18ad      	adds	r5, r5, r2
 800096a:	1c6b      	adds	r3, r5, #1
 800096c:	4647      	mov	r7, r8
 800096e:	9301      	str	r3, [sp, #4]
 8000970:	4653      	mov	r3, sl
 8000972:	4077      	eors	r7, r6
 8000974:	003a      	movs	r2, r7
 8000976:	2b0f      	cmp	r3, #15
 8000978:	d848      	bhi.n	8000a0c <__aeabi_fmul+0xf8>
 800097a:	497d      	ldr	r1, [pc, #500]	; (8000b70 <__aeabi_fmul+0x25c>)
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	58cb      	ldr	r3, [r1, r3]
 8000980:	469f      	mov	pc, r3
 8000982:	2b00      	cmp	r3, #0
 8000984:	d000      	beq.n	8000988 <__aeabi_fmul+0x74>
 8000986:	e085      	b.n	8000a94 <__aeabi_fmul+0x180>
 8000988:	3308      	adds	r3, #8
 800098a:	469a      	mov	sl, r3
 800098c:	3b06      	subs	r3, #6
 800098e:	469b      	mov	fp, r3
 8000990:	027c      	lsls	r4, r7, #9
 8000992:	007a      	lsls	r2, r7, #1
 8000994:	0ffb      	lsrs	r3, r7, #31
 8000996:	25ff      	movs	r5, #255	; 0xff
 8000998:	0a64      	lsrs	r4, r4, #9
 800099a:	0e12      	lsrs	r2, r2, #24
 800099c:	4698      	mov	r8, r3
 800099e:	d1db      	bne.n	8000958 <__aeabi_fmul+0x44>
 80009a0:	2c00      	cmp	r4, #0
 80009a2:	d000      	beq.n	80009a6 <__aeabi_fmul+0x92>
 80009a4:	e090      	b.n	8000ac8 <__aeabi_fmul+0x1b4>
 80009a6:	4652      	mov	r2, sl
 80009a8:	2301      	movs	r3, #1
 80009aa:	431a      	orrs	r2, r3
 80009ac:	4692      	mov	sl, r2
 80009ae:	2001      	movs	r0, #1
 80009b0:	e7db      	b.n	800096a <__aeabi_fmul+0x56>
 80009b2:	464c      	mov	r4, r9
 80009b4:	4658      	mov	r0, fp
 80009b6:	0017      	movs	r7, r2
 80009b8:	2802      	cmp	r0, #2
 80009ba:	d024      	beq.n	8000a06 <__aeabi_fmul+0xf2>
 80009bc:	2803      	cmp	r0, #3
 80009be:	d100      	bne.n	80009c2 <__aeabi_fmul+0xae>
 80009c0:	e0cf      	b.n	8000b62 <__aeabi_fmul+0x24e>
 80009c2:	2200      	movs	r2, #0
 80009c4:	2300      	movs	r3, #0
 80009c6:	2801      	cmp	r0, #1
 80009c8:	d14d      	bne.n	8000a66 <__aeabi_fmul+0x152>
 80009ca:	0258      	lsls	r0, r3, #9
 80009cc:	05d2      	lsls	r2, r2, #23
 80009ce:	0a40      	lsrs	r0, r0, #9
 80009d0:	07ff      	lsls	r7, r7, #31
 80009d2:	4310      	orrs	r0, r2
 80009d4:	4338      	orrs	r0, r7
 80009d6:	b003      	add	sp, #12
 80009d8:	bc3c      	pop	{r2, r3, r4, r5}
 80009da:	4690      	mov	r8, r2
 80009dc:	4699      	mov	r9, r3
 80009de:	46a2      	mov	sl, r4
 80009e0:	46ab      	mov	fp, r5
 80009e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d15b      	bne.n	8000aa0 <__aeabi_fmul+0x18c>
 80009e8:	2304      	movs	r3, #4
 80009ea:	469a      	mov	sl, r3
 80009ec:	3b03      	subs	r3, #3
 80009ee:	2500      	movs	r5, #0
 80009f0:	469b      	mov	fp, r3
 80009f2:	e7aa      	b.n	800094a <__aeabi_fmul+0x36>
 80009f4:	35ff      	adds	r5, #255	; 0xff
 80009f6:	2c00      	cmp	r4, #0
 80009f8:	d160      	bne.n	8000abc <__aeabi_fmul+0x1a8>
 80009fa:	4652      	mov	r2, sl
 80009fc:	2302      	movs	r3, #2
 80009fe:	431a      	orrs	r2, r3
 8000a00:	4692      	mov	sl, r2
 8000a02:	2002      	movs	r0, #2
 8000a04:	e7b1      	b.n	800096a <__aeabi_fmul+0x56>
 8000a06:	22ff      	movs	r2, #255	; 0xff
 8000a08:	2300      	movs	r3, #0
 8000a0a:	e7de      	b.n	80009ca <__aeabi_fmul+0xb6>
 8000a0c:	464b      	mov	r3, r9
 8000a0e:	0c1b      	lsrs	r3, r3, #16
 8000a10:	469c      	mov	ip, r3
 8000a12:	464b      	mov	r3, r9
 8000a14:	0426      	lsls	r6, r4, #16
 8000a16:	0c36      	lsrs	r6, r6, #16
 8000a18:	0418      	lsls	r0, r3, #16
 8000a1a:	4661      	mov	r1, ip
 8000a1c:	0033      	movs	r3, r6
 8000a1e:	0c22      	lsrs	r2, r4, #16
 8000a20:	4664      	mov	r4, ip
 8000a22:	0c00      	lsrs	r0, r0, #16
 8000a24:	4343      	muls	r3, r0
 8000a26:	434e      	muls	r6, r1
 8000a28:	4350      	muls	r0, r2
 8000a2a:	4354      	muls	r4, r2
 8000a2c:	1980      	adds	r0, r0, r6
 8000a2e:	0c1a      	lsrs	r2, r3, #16
 8000a30:	1812      	adds	r2, r2, r0
 8000a32:	4296      	cmp	r6, r2
 8000a34:	d903      	bls.n	8000a3e <__aeabi_fmul+0x12a>
 8000a36:	2180      	movs	r1, #128	; 0x80
 8000a38:	0249      	lsls	r1, r1, #9
 8000a3a:	468c      	mov	ip, r1
 8000a3c:	4464      	add	r4, ip
 8000a3e:	041b      	lsls	r3, r3, #16
 8000a40:	0c1b      	lsrs	r3, r3, #16
 8000a42:	0410      	lsls	r0, r2, #16
 8000a44:	18c0      	adds	r0, r0, r3
 8000a46:	0183      	lsls	r3, r0, #6
 8000a48:	1e5e      	subs	r6, r3, #1
 8000a4a:	41b3      	sbcs	r3, r6
 8000a4c:	0e80      	lsrs	r0, r0, #26
 8000a4e:	4318      	orrs	r0, r3
 8000a50:	0c13      	lsrs	r3, r2, #16
 8000a52:	191b      	adds	r3, r3, r4
 8000a54:	019b      	lsls	r3, r3, #6
 8000a56:	4303      	orrs	r3, r0
 8000a58:	001c      	movs	r4, r3
 8000a5a:	0123      	lsls	r3, r4, #4
 8000a5c:	d579      	bpl.n	8000b52 <__aeabi_fmul+0x23e>
 8000a5e:	2301      	movs	r3, #1
 8000a60:	0862      	lsrs	r2, r4, #1
 8000a62:	401c      	ands	r4, r3
 8000a64:	4314      	orrs	r4, r2
 8000a66:	9a01      	ldr	r2, [sp, #4]
 8000a68:	327f      	adds	r2, #127	; 0x7f
 8000a6a:	2a00      	cmp	r2, #0
 8000a6c:	dd4d      	ble.n	8000b0a <__aeabi_fmul+0x1f6>
 8000a6e:	0763      	lsls	r3, r4, #29
 8000a70:	d004      	beq.n	8000a7c <__aeabi_fmul+0x168>
 8000a72:	230f      	movs	r3, #15
 8000a74:	4023      	ands	r3, r4
 8000a76:	2b04      	cmp	r3, #4
 8000a78:	d000      	beq.n	8000a7c <__aeabi_fmul+0x168>
 8000a7a:	3404      	adds	r4, #4
 8000a7c:	0123      	lsls	r3, r4, #4
 8000a7e:	d503      	bpl.n	8000a88 <__aeabi_fmul+0x174>
 8000a80:	4b3c      	ldr	r3, [pc, #240]	; (8000b74 <__aeabi_fmul+0x260>)
 8000a82:	9a01      	ldr	r2, [sp, #4]
 8000a84:	401c      	ands	r4, r3
 8000a86:	3280      	adds	r2, #128	; 0x80
 8000a88:	2afe      	cmp	r2, #254	; 0xfe
 8000a8a:	dcbc      	bgt.n	8000a06 <__aeabi_fmul+0xf2>
 8000a8c:	01a3      	lsls	r3, r4, #6
 8000a8e:	0a5b      	lsrs	r3, r3, #9
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	e79a      	b.n	80009ca <__aeabi_fmul+0xb6>
 8000a94:	230c      	movs	r3, #12
 8000a96:	469a      	mov	sl, r3
 8000a98:	3b09      	subs	r3, #9
 8000a9a:	25ff      	movs	r5, #255	; 0xff
 8000a9c:	469b      	mov	fp, r3
 8000a9e:	e754      	b.n	800094a <__aeabi_fmul+0x36>
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f002 f92b 	bl	8002cfc <__clzsi2>
 8000aa6:	464a      	mov	r2, r9
 8000aa8:	1f43      	subs	r3, r0, #5
 8000aaa:	2576      	movs	r5, #118	; 0x76
 8000aac:	409a      	lsls	r2, r3
 8000aae:	2300      	movs	r3, #0
 8000ab0:	426d      	negs	r5, r5
 8000ab2:	4691      	mov	r9, r2
 8000ab4:	1a2d      	subs	r5, r5, r0
 8000ab6:	469a      	mov	sl, r3
 8000ab8:	469b      	mov	fp, r3
 8000aba:	e746      	b.n	800094a <__aeabi_fmul+0x36>
 8000abc:	4652      	mov	r2, sl
 8000abe:	2303      	movs	r3, #3
 8000ac0:	431a      	orrs	r2, r3
 8000ac2:	4692      	mov	sl, r2
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	e750      	b.n	800096a <__aeabi_fmul+0x56>
 8000ac8:	0020      	movs	r0, r4
 8000aca:	f002 f917 	bl	8002cfc <__clzsi2>
 8000ace:	1f43      	subs	r3, r0, #5
 8000ad0:	1a2d      	subs	r5, r5, r0
 8000ad2:	409c      	lsls	r4, r3
 8000ad4:	3d76      	subs	r5, #118	; 0x76
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	e747      	b.n	800096a <__aeabi_fmul+0x56>
 8000ada:	2380      	movs	r3, #128	; 0x80
 8000adc:	2700      	movs	r7, #0
 8000ade:	03db      	lsls	r3, r3, #15
 8000ae0:	22ff      	movs	r2, #255	; 0xff
 8000ae2:	e772      	b.n	80009ca <__aeabi_fmul+0xb6>
 8000ae4:	4642      	mov	r2, r8
 8000ae6:	e766      	b.n	80009b6 <__aeabi_fmul+0xa2>
 8000ae8:	464c      	mov	r4, r9
 8000aea:	0032      	movs	r2, r6
 8000aec:	4658      	mov	r0, fp
 8000aee:	e762      	b.n	80009b6 <__aeabi_fmul+0xa2>
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	464a      	mov	r2, r9
 8000af4:	03db      	lsls	r3, r3, #15
 8000af6:	421a      	tst	r2, r3
 8000af8:	d022      	beq.n	8000b40 <__aeabi_fmul+0x22c>
 8000afa:	421c      	tst	r4, r3
 8000afc:	d120      	bne.n	8000b40 <__aeabi_fmul+0x22c>
 8000afe:	4323      	orrs	r3, r4
 8000b00:	025b      	lsls	r3, r3, #9
 8000b02:	0a5b      	lsrs	r3, r3, #9
 8000b04:	4647      	mov	r7, r8
 8000b06:	22ff      	movs	r2, #255	; 0xff
 8000b08:	e75f      	b.n	80009ca <__aeabi_fmul+0xb6>
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	1a9a      	subs	r2, r3, r2
 8000b0e:	2a1b      	cmp	r2, #27
 8000b10:	dc21      	bgt.n	8000b56 <__aeabi_fmul+0x242>
 8000b12:	0023      	movs	r3, r4
 8000b14:	9901      	ldr	r1, [sp, #4]
 8000b16:	40d3      	lsrs	r3, r2
 8000b18:	319e      	adds	r1, #158	; 0x9e
 8000b1a:	408c      	lsls	r4, r1
 8000b1c:	001a      	movs	r2, r3
 8000b1e:	0023      	movs	r3, r4
 8000b20:	1e5c      	subs	r4, r3, #1
 8000b22:	41a3      	sbcs	r3, r4
 8000b24:	4313      	orrs	r3, r2
 8000b26:	075a      	lsls	r2, r3, #29
 8000b28:	d004      	beq.n	8000b34 <__aeabi_fmul+0x220>
 8000b2a:	220f      	movs	r2, #15
 8000b2c:	401a      	ands	r2, r3
 8000b2e:	2a04      	cmp	r2, #4
 8000b30:	d000      	beq.n	8000b34 <__aeabi_fmul+0x220>
 8000b32:	3304      	adds	r3, #4
 8000b34:	015a      	lsls	r2, r3, #5
 8000b36:	d411      	bmi.n	8000b5c <__aeabi_fmul+0x248>
 8000b38:	019b      	lsls	r3, r3, #6
 8000b3a:	0a5b      	lsrs	r3, r3, #9
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	e744      	b.n	80009ca <__aeabi_fmul+0xb6>
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	464a      	mov	r2, r9
 8000b44:	03db      	lsls	r3, r3, #15
 8000b46:	4313      	orrs	r3, r2
 8000b48:	025b      	lsls	r3, r3, #9
 8000b4a:	0a5b      	lsrs	r3, r3, #9
 8000b4c:	0037      	movs	r7, r6
 8000b4e:	22ff      	movs	r2, #255	; 0xff
 8000b50:	e73b      	b.n	80009ca <__aeabi_fmul+0xb6>
 8000b52:	9501      	str	r5, [sp, #4]
 8000b54:	e787      	b.n	8000a66 <__aeabi_fmul+0x152>
 8000b56:	2200      	movs	r2, #0
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e736      	b.n	80009ca <__aeabi_fmul+0xb6>
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e733      	b.n	80009ca <__aeabi_fmul+0xb6>
 8000b62:	2380      	movs	r3, #128	; 0x80
 8000b64:	03db      	lsls	r3, r3, #15
 8000b66:	4323      	orrs	r3, r4
 8000b68:	025b      	lsls	r3, r3, #9
 8000b6a:	0a5b      	lsrs	r3, r3, #9
 8000b6c:	22ff      	movs	r2, #255	; 0xff
 8000b6e:	e72c      	b.n	80009ca <__aeabi_fmul+0xb6>
 8000b70:	0800eb6c 	.word	0x0800eb6c
 8000b74:	f7ffffff 	.word	0xf7ffffff

08000b78 <__aeabi_fsub>:
 8000b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b7a:	4647      	mov	r7, r8
 8000b7c:	46ce      	mov	lr, r9
 8000b7e:	0044      	lsls	r4, r0, #1
 8000b80:	0fc2      	lsrs	r2, r0, #31
 8000b82:	b580      	push	{r7, lr}
 8000b84:	0247      	lsls	r7, r0, #9
 8000b86:	0248      	lsls	r0, r1, #9
 8000b88:	0a40      	lsrs	r0, r0, #9
 8000b8a:	4684      	mov	ip, r0
 8000b8c:	4666      	mov	r6, ip
 8000b8e:	0048      	lsls	r0, r1, #1
 8000b90:	0a7f      	lsrs	r7, r7, #9
 8000b92:	0e24      	lsrs	r4, r4, #24
 8000b94:	00f6      	lsls	r6, r6, #3
 8000b96:	0025      	movs	r5, r4
 8000b98:	4690      	mov	r8, r2
 8000b9a:	00fb      	lsls	r3, r7, #3
 8000b9c:	0e00      	lsrs	r0, r0, #24
 8000b9e:	0fc9      	lsrs	r1, r1, #31
 8000ba0:	46b1      	mov	r9, r6
 8000ba2:	28ff      	cmp	r0, #255	; 0xff
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_fsub+0x30>
 8000ba6:	e085      	b.n	8000cb4 <__aeabi_fsub+0x13c>
 8000ba8:	2601      	movs	r6, #1
 8000baa:	4071      	eors	r1, r6
 8000bac:	1a26      	subs	r6, r4, r0
 8000bae:	4291      	cmp	r1, r2
 8000bb0:	d057      	beq.n	8000c62 <__aeabi_fsub+0xea>
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	dd43      	ble.n	8000c3e <__aeabi_fsub+0xc6>
 8000bb6:	2800      	cmp	r0, #0
 8000bb8:	d000      	beq.n	8000bbc <__aeabi_fsub+0x44>
 8000bba:	e07f      	b.n	8000cbc <__aeabi_fsub+0x144>
 8000bbc:	4649      	mov	r1, r9
 8000bbe:	2900      	cmp	r1, #0
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_fsub+0x4c>
 8000bc2:	e0aa      	b.n	8000d1a <__aeabi_fsub+0x1a2>
 8000bc4:	3e01      	subs	r6, #1
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d000      	beq.n	8000bcc <__aeabi_fsub+0x54>
 8000bca:	e0f7      	b.n	8000dbc <__aeabi_fsub+0x244>
 8000bcc:	1a5b      	subs	r3, r3, r1
 8000bce:	015a      	lsls	r2, r3, #5
 8000bd0:	d400      	bmi.n	8000bd4 <__aeabi_fsub+0x5c>
 8000bd2:	e08b      	b.n	8000cec <__aeabi_fsub+0x174>
 8000bd4:	019b      	lsls	r3, r3, #6
 8000bd6:	099c      	lsrs	r4, r3, #6
 8000bd8:	0020      	movs	r0, r4
 8000bda:	f002 f88f 	bl	8002cfc <__clzsi2>
 8000bde:	3805      	subs	r0, #5
 8000be0:	4084      	lsls	r4, r0
 8000be2:	4285      	cmp	r5, r0
 8000be4:	dd00      	ble.n	8000be8 <__aeabi_fsub+0x70>
 8000be6:	e0d3      	b.n	8000d90 <__aeabi_fsub+0x218>
 8000be8:	1b45      	subs	r5, r0, r5
 8000bea:	0023      	movs	r3, r4
 8000bec:	2020      	movs	r0, #32
 8000bee:	3501      	adds	r5, #1
 8000bf0:	40eb      	lsrs	r3, r5
 8000bf2:	1b45      	subs	r5, r0, r5
 8000bf4:	40ac      	lsls	r4, r5
 8000bf6:	1e62      	subs	r2, r4, #1
 8000bf8:	4194      	sbcs	r4, r2
 8000bfa:	4323      	orrs	r3, r4
 8000bfc:	2407      	movs	r4, #7
 8000bfe:	2500      	movs	r5, #0
 8000c00:	401c      	ands	r4, r3
 8000c02:	2201      	movs	r2, #1
 8000c04:	4641      	mov	r1, r8
 8000c06:	400a      	ands	r2, r1
 8000c08:	2c00      	cmp	r4, #0
 8000c0a:	d004      	beq.n	8000c16 <__aeabi_fsub+0x9e>
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	4019      	ands	r1, r3
 8000c10:	2904      	cmp	r1, #4
 8000c12:	d000      	beq.n	8000c16 <__aeabi_fsub+0x9e>
 8000c14:	3304      	adds	r3, #4
 8000c16:	0159      	lsls	r1, r3, #5
 8000c18:	d400      	bmi.n	8000c1c <__aeabi_fsub+0xa4>
 8000c1a:	e080      	b.n	8000d1e <__aeabi_fsub+0x1a6>
 8000c1c:	3501      	adds	r5, #1
 8000c1e:	b2ec      	uxtb	r4, r5
 8000c20:	2dff      	cmp	r5, #255	; 0xff
 8000c22:	d000      	beq.n	8000c26 <__aeabi_fsub+0xae>
 8000c24:	e0a3      	b.n	8000d6e <__aeabi_fsub+0x1f6>
 8000c26:	24ff      	movs	r4, #255	; 0xff
 8000c28:	2300      	movs	r3, #0
 8000c2a:	025b      	lsls	r3, r3, #9
 8000c2c:	05e4      	lsls	r4, r4, #23
 8000c2e:	0a58      	lsrs	r0, r3, #9
 8000c30:	07d2      	lsls	r2, r2, #31
 8000c32:	4320      	orrs	r0, r4
 8000c34:	4310      	orrs	r0, r2
 8000c36:	bc0c      	pop	{r2, r3}
 8000c38:	4690      	mov	r8, r2
 8000c3a:	4699      	mov	r9, r3
 8000c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	d174      	bne.n	8000d2c <__aeabi_fsub+0x1b4>
 8000c42:	1c60      	adds	r0, r4, #1
 8000c44:	b2c0      	uxtb	r0, r0
 8000c46:	2801      	cmp	r0, #1
 8000c48:	dc00      	bgt.n	8000c4c <__aeabi_fsub+0xd4>
 8000c4a:	e0a7      	b.n	8000d9c <__aeabi_fsub+0x224>
 8000c4c:	464a      	mov	r2, r9
 8000c4e:	1a9c      	subs	r4, r3, r2
 8000c50:	0162      	lsls	r2, r4, #5
 8000c52:	d500      	bpl.n	8000c56 <__aeabi_fsub+0xde>
 8000c54:	e0b6      	b.n	8000dc4 <__aeabi_fsub+0x24c>
 8000c56:	2c00      	cmp	r4, #0
 8000c58:	d1be      	bne.n	8000bd8 <__aeabi_fsub+0x60>
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2400      	movs	r4, #0
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e7e3      	b.n	8000c2a <__aeabi_fsub+0xb2>
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	dc00      	bgt.n	8000c68 <__aeabi_fsub+0xf0>
 8000c66:	e085      	b.n	8000d74 <__aeabi_fsub+0x1fc>
 8000c68:	2800      	cmp	r0, #0
 8000c6a:	d046      	beq.n	8000cfa <__aeabi_fsub+0x182>
 8000c6c:	2cff      	cmp	r4, #255	; 0xff
 8000c6e:	d049      	beq.n	8000d04 <__aeabi_fsub+0x18c>
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	4648      	mov	r0, r9
 8000c74:	04d2      	lsls	r2, r2, #19
 8000c76:	4310      	orrs	r0, r2
 8000c78:	4681      	mov	r9, r0
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2e1b      	cmp	r6, #27
 8000c7e:	dc09      	bgt.n	8000c94 <__aeabi_fsub+0x11c>
 8000c80:	2020      	movs	r0, #32
 8000c82:	464c      	mov	r4, r9
 8000c84:	1b80      	subs	r0, r0, r6
 8000c86:	4084      	lsls	r4, r0
 8000c88:	464a      	mov	r2, r9
 8000c8a:	0020      	movs	r0, r4
 8000c8c:	40f2      	lsrs	r2, r6
 8000c8e:	1e44      	subs	r4, r0, #1
 8000c90:	41a0      	sbcs	r0, r4
 8000c92:	4302      	orrs	r2, r0
 8000c94:	189b      	adds	r3, r3, r2
 8000c96:	015a      	lsls	r2, r3, #5
 8000c98:	d528      	bpl.n	8000cec <__aeabi_fsub+0x174>
 8000c9a:	3501      	adds	r5, #1
 8000c9c:	2dff      	cmp	r5, #255	; 0xff
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_fsub+0x12a>
 8000ca0:	e0a8      	b.n	8000df4 <__aeabi_fsub+0x27c>
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2407      	movs	r4, #7
 8000ca6:	4994      	ldr	r1, [pc, #592]	; (8000ef8 <__aeabi_fsub+0x380>)
 8000ca8:	401a      	ands	r2, r3
 8000caa:	085b      	lsrs	r3, r3, #1
 8000cac:	400b      	ands	r3, r1
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	401c      	ands	r4, r3
 8000cb2:	e7a6      	b.n	8000c02 <__aeabi_fsub+0x8a>
 8000cb4:	2e00      	cmp	r6, #0
 8000cb6:	d000      	beq.n	8000cba <__aeabi_fsub+0x142>
 8000cb8:	e778      	b.n	8000bac <__aeabi_fsub+0x34>
 8000cba:	e775      	b.n	8000ba8 <__aeabi_fsub+0x30>
 8000cbc:	2cff      	cmp	r4, #255	; 0xff
 8000cbe:	d054      	beq.n	8000d6a <__aeabi_fsub+0x1f2>
 8000cc0:	2280      	movs	r2, #128	; 0x80
 8000cc2:	4649      	mov	r1, r9
 8000cc4:	04d2      	lsls	r2, r2, #19
 8000cc6:	4311      	orrs	r1, r2
 8000cc8:	4689      	mov	r9, r1
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2e1b      	cmp	r6, #27
 8000cce:	dc09      	bgt.n	8000ce4 <__aeabi_fsub+0x16c>
 8000cd0:	2120      	movs	r1, #32
 8000cd2:	4648      	mov	r0, r9
 8000cd4:	1b89      	subs	r1, r1, r6
 8000cd6:	4088      	lsls	r0, r1
 8000cd8:	464a      	mov	r2, r9
 8000cda:	0001      	movs	r1, r0
 8000cdc:	40f2      	lsrs	r2, r6
 8000cde:	1e48      	subs	r0, r1, #1
 8000ce0:	4181      	sbcs	r1, r0
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	1a9b      	subs	r3, r3, r2
 8000ce6:	015a      	lsls	r2, r3, #5
 8000ce8:	d500      	bpl.n	8000cec <__aeabi_fsub+0x174>
 8000cea:	e773      	b.n	8000bd4 <__aeabi_fsub+0x5c>
 8000cec:	2201      	movs	r2, #1
 8000cee:	4641      	mov	r1, r8
 8000cf0:	400a      	ands	r2, r1
 8000cf2:	0759      	lsls	r1, r3, #29
 8000cf4:	d000      	beq.n	8000cf8 <__aeabi_fsub+0x180>
 8000cf6:	e789      	b.n	8000c0c <__aeabi_fsub+0x94>
 8000cf8:	e011      	b.n	8000d1e <__aeabi_fsub+0x1a6>
 8000cfa:	4648      	mov	r0, r9
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	d158      	bne.n	8000db2 <__aeabi_fsub+0x23a>
 8000d00:	2cff      	cmp	r4, #255	; 0xff
 8000d02:	d10c      	bne.n	8000d1e <__aeabi_fsub+0x1a6>
 8000d04:	08db      	lsrs	r3, r3, #3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d100      	bne.n	8000d0c <__aeabi_fsub+0x194>
 8000d0a:	e78c      	b.n	8000c26 <__aeabi_fsub+0xae>
 8000d0c:	2080      	movs	r0, #128	; 0x80
 8000d0e:	03c0      	lsls	r0, r0, #15
 8000d10:	4303      	orrs	r3, r0
 8000d12:	025b      	lsls	r3, r3, #9
 8000d14:	0a5b      	lsrs	r3, r3, #9
 8000d16:	24ff      	movs	r4, #255	; 0xff
 8000d18:	e787      	b.n	8000c2a <__aeabi_fsub+0xb2>
 8000d1a:	2cff      	cmp	r4, #255	; 0xff
 8000d1c:	d025      	beq.n	8000d6a <__aeabi_fsub+0x1f2>
 8000d1e:	08db      	lsrs	r3, r3, #3
 8000d20:	2dff      	cmp	r5, #255	; 0xff
 8000d22:	d0f0      	beq.n	8000d06 <__aeabi_fsub+0x18e>
 8000d24:	025b      	lsls	r3, r3, #9
 8000d26:	0a5b      	lsrs	r3, r3, #9
 8000d28:	b2ec      	uxtb	r4, r5
 8000d2a:	e77e      	b.n	8000c2a <__aeabi_fsub+0xb2>
 8000d2c:	2c00      	cmp	r4, #0
 8000d2e:	d04d      	beq.n	8000dcc <__aeabi_fsub+0x254>
 8000d30:	28ff      	cmp	r0, #255	; 0xff
 8000d32:	d018      	beq.n	8000d66 <__aeabi_fsub+0x1ee>
 8000d34:	2480      	movs	r4, #128	; 0x80
 8000d36:	04e4      	lsls	r4, r4, #19
 8000d38:	4272      	negs	r2, r6
 8000d3a:	4323      	orrs	r3, r4
 8000d3c:	2a1b      	cmp	r2, #27
 8000d3e:	dd00      	ble.n	8000d42 <__aeabi_fsub+0x1ca>
 8000d40:	e0c4      	b.n	8000ecc <__aeabi_fsub+0x354>
 8000d42:	001c      	movs	r4, r3
 8000d44:	2520      	movs	r5, #32
 8000d46:	40d4      	lsrs	r4, r2
 8000d48:	1aaa      	subs	r2, r5, r2
 8000d4a:	4093      	lsls	r3, r2
 8000d4c:	1e5a      	subs	r2, r3, #1
 8000d4e:	4193      	sbcs	r3, r2
 8000d50:	4323      	orrs	r3, r4
 8000d52:	464a      	mov	r2, r9
 8000d54:	0005      	movs	r5, r0
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	4688      	mov	r8, r1
 8000d5a:	e738      	b.n	8000bce <__aeabi_fsub+0x56>
 8000d5c:	1c72      	adds	r2, r6, #1
 8000d5e:	d0f8      	beq.n	8000d52 <__aeabi_fsub+0x1da>
 8000d60:	43f2      	mvns	r2, r6
 8000d62:	28ff      	cmp	r0, #255	; 0xff
 8000d64:	d1ea      	bne.n	8000d3c <__aeabi_fsub+0x1c4>
 8000d66:	000a      	movs	r2, r1
 8000d68:	464b      	mov	r3, r9
 8000d6a:	25ff      	movs	r5, #255	; 0xff
 8000d6c:	e7d7      	b.n	8000d1e <__aeabi_fsub+0x1a6>
 8000d6e:	019b      	lsls	r3, r3, #6
 8000d70:	0a5b      	lsrs	r3, r3, #9
 8000d72:	e75a      	b.n	8000c2a <__aeabi_fsub+0xb2>
 8000d74:	2e00      	cmp	r6, #0
 8000d76:	d141      	bne.n	8000dfc <__aeabi_fsub+0x284>
 8000d78:	1c65      	adds	r5, r4, #1
 8000d7a:	b2e9      	uxtb	r1, r5
 8000d7c:	2901      	cmp	r1, #1
 8000d7e:	dd45      	ble.n	8000e0c <__aeabi_fsub+0x294>
 8000d80:	2dff      	cmp	r5, #255	; 0xff
 8000d82:	d100      	bne.n	8000d86 <__aeabi_fsub+0x20e>
 8000d84:	e74f      	b.n	8000c26 <__aeabi_fsub+0xae>
 8000d86:	2407      	movs	r4, #7
 8000d88:	444b      	add	r3, r9
 8000d8a:	085b      	lsrs	r3, r3, #1
 8000d8c:	401c      	ands	r4, r3
 8000d8e:	e738      	b.n	8000c02 <__aeabi_fsub+0x8a>
 8000d90:	2207      	movs	r2, #7
 8000d92:	4b5a      	ldr	r3, [pc, #360]	; (8000efc <__aeabi_fsub+0x384>)
 8000d94:	1a2d      	subs	r5, r5, r0
 8000d96:	4023      	ands	r3, r4
 8000d98:	4014      	ands	r4, r2
 8000d9a:	e732      	b.n	8000c02 <__aeabi_fsub+0x8a>
 8000d9c:	2c00      	cmp	r4, #0
 8000d9e:	d11d      	bne.n	8000ddc <__aeabi_fsub+0x264>
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d17a      	bne.n	8000e9a <__aeabi_fsub+0x322>
 8000da4:	464b      	mov	r3, r9
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d100      	bne.n	8000dac <__aeabi_fsub+0x234>
 8000daa:	e091      	b.n	8000ed0 <__aeabi_fsub+0x358>
 8000dac:	000a      	movs	r2, r1
 8000dae:	2500      	movs	r5, #0
 8000db0:	e7b5      	b.n	8000d1e <__aeabi_fsub+0x1a6>
 8000db2:	3e01      	subs	r6, #1
 8000db4:	2e00      	cmp	r6, #0
 8000db6:	d119      	bne.n	8000dec <__aeabi_fsub+0x274>
 8000db8:	444b      	add	r3, r9
 8000dba:	e76c      	b.n	8000c96 <__aeabi_fsub+0x11e>
 8000dbc:	2cff      	cmp	r4, #255	; 0xff
 8000dbe:	d184      	bne.n	8000cca <__aeabi_fsub+0x152>
 8000dc0:	25ff      	movs	r5, #255	; 0xff
 8000dc2:	e7ac      	b.n	8000d1e <__aeabi_fsub+0x1a6>
 8000dc4:	464a      	mov	r2, r9
 8000dc6:	4688      	mov	r8, r1
 8000dc8:	1ad4      	subs	r4, r2, r3
 8000dca:	e705      	b.n	8000bd8 <__aeabi_fsub+0x60>
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1c5      	bne.n	8000d5c <__aeabi_fsub+0x1e4>
 8000dd0:	000a      	movs	r2, r1
 8000dd2:	28ff      	cmp	r0, #255	; 0xff
 8000dd4:	d0c8      	beq.n	8000d68 <__aeabi_fsub+0x1f0>
 8000dd6:	0005      	movs	r5, r0
 8000dd8:	464b      	mov	r3, r9
 8000dda:	e7a0      	b.n	8000d1e <__aeabi_fsub+0x1a6>
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d149      	bne.n	8000e74 <__aeabi_fsub+0x2fc>
 8000de0:	464b      	mov	r3, r9
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d077      	beq.n	8000ed6 <__aeabi_fsub+0x35e>
 8000de6:	000a      	movs	r2, r1
 8000de8:	25ff      	movs	r5, #255	; 0xff
 8000dea:	e798      	b.n	8000d1e <__aeabi_fsub+0x1a6>
 8000dec:	2cff      	cmp	r4, #255	; 0xff
 8000dee:	d000      	beq.n	8000df2 <__aeabi_fsub+0x27a>
 8000df0:	e743      	b.n	8000c7a <__aeabi_fsub+0x102>
 8000df2:	e787      	b.n	8000d04 <__aeabi_fsub+0x18c>
 8000df4:	000a      	movs	r2, r1
 8000df6:	24ff      	movs	r4, #255	; 0xff
 8000df8:	2300      	movs	r3, #0
 8000dfa:	e716      	b.n	8000c2a <__aeabi_fsub+0xb2>
 8000dfc:	2c00      	cmp	r4, #0
 8000dfe:	d115      	bne.n	8000e2c <__aeabi_fsub+0x2b4>
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d157      	bne.n	8000eb4 <__aeabi_fsub+0x33c>
 8000e04:	28ff      	cmp	r0, #255	; 0xff
 8000e06:	d1e6      	bne.n	8000dd6 <__aeabi_fsub+0x25e>
 8000e08:	464b      	mov	r3, r9
 8000e0a:	e77b      	b.n	8000d04 <__aeabi_fsub+0x18c>
 8000e0c:	2c00      	cmp	r4, #0
 8000e0e:	d120      	bne.n	8000e52 <__aeabi_fsub+0x2da>
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d057      	beq.n	8000ec4 <__aeabi_fsub+0x34c>
 8000e14:	4649      	mov	r1, r9
 8000e16:	2900      	cmp	r1, #0
 8000e18:	d053      	beq.n	8000ec2 <__aeabi_fsub+0x34a>
 8000e1a:	444b      	add	r3, r9
 8000e1c:	015a      	lsls	r2, r3, #5
 8000e1e:	d568      	bpl.n	8000ef2 <__aeabi_fsub+0x37a>
 8000e20:	2407      	movs	r4, #7
 8000e22:	4a36      	ldr	r2, [pc, #216]	; (8000efc <__aeabi_fsub+0x384>)
 8000e24:	401c      	ands	r4, r3
 8000e26:	2501      	movs	r5, #1
 8000e28:	4013      	ands	r3, r2
 8000e2a:	e6ea      	b.n	8000c02 <__aeabi_fsub+0x8a>
 8000e2c:	28ff      	cmp	r0, #255	; 0xff
 8000e2e:	d0eb      	beq.n	8000e08 <__aeabi_fsub+0x290>
 8000e30:	2280      	movs	r2, #128	; 0x80
 8000e32:	04d2      	lsls	r2, r2, #19
 8000e34:	4276      	negs	r6, r6
 8000e36:	4313      	orrs	r3, r2
 8000e38:	2e1b      	cmp	r6, #27
 8000e3a:	dc53      	bgt.n	8000ee4 <__aeabi_fsub+0x36c>
 8000e3c:	2520      	movs	r5, #32
 8000e3e:	1bad      	subs	r5, r5, r6
 8000e40:	001a      	movs	r2, r3
 8000e42:	40ab      	lsls	r3, r5
 8000e44:	40f2      	lsrs	r2, r6
 8000e46:	1e5c      	subs	r4, r3, #1
 8000e48:	41a3      	sbcs	r3, r4
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	444b      	add	r3, r9
 8000e4e:	0005      	movs	r5, r0
 8000e50:	e721      	b.n	8000c96 <__aeabi_fsub+0x11e>
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d0d8      	beq.n	8000e08 <__aeabi_fsub+0x290>
 8000e56:	4649      	mov	r1, r9
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	d100      	bne.n	8000e5e <__aeabi_fsub+0x2e6>
 8000e5c:	e752      	b.n	8000d04 <__aeabi_fsub+0x18c>
 8000e5e:	2180      	movs	r1, #128	; 0x80
 8000e60:	03c9      	lsls	r1, r1, #15
 8000e62:	420f      	tst	r7, r1
 8000e64:	d100      	bne.n	8000e68 <__aeabi_fsub+0x2f0>
 8000e66:	e74d      	b.n	8000d04 <__aeabi_fsub+0x18c>
 8000e68:	4660      	mov	r0, ip
 8000e6a:	4208      	tst	r0, r1
 8000e6c:	d000      	beq.n	8000e70 <__aeabi_fsub+0x2f8>
 8000e6e:	e749      	b.n	8000d04 <__aeabi_fsub+0x18c>
 8000e70:	464b      	mov	r3, r9
 8000e72:	e747      	b.n	8000d04 <__aeabi_fsub+0x18c>
 8000e74:	4648      	mov	r0, r9
 8000e76:	25ff      	movs	r5, #255	; 0xff
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	d100      	bne.n	8000e7e <__aeabi_fsub+0x306>
 8000e7c:	e74f      	b.n	8000d1e <__aeabi_fsub+0x1a6>
 8000e7e:	2280      	movs	r2, #128	; 0x80
 8000e80:	03d2      	lsls	r2, r2, #15
 8000e82:	4217      	tst	r7, r2
 8000e84:	d004      	beq.n	8000e90 <__aeabi_fsub+0x318>
 8000e86:	4660      	mov	r0, ip
 8000e88:	4210      	tst	r0, r2
 8000e8a:	d101      	bne.n	8000e90 <__aeabi_fsub+0x318>
 8000e8c:	464b      	mov	r3, r9
 8000e8e:	4688      	mov	r8, r1
 8000e90:	2201      	movs	r2, #1
 8000e92:	4641      	mov	r1, r8
 8000e94:	25ff      	movs	r5, #255	; 0xff
 8000e96:	400a      	ands	r2, r1
 8000e98:	e741      	b.n	8000d1e <__aeabi_fsub+0x1a6>
 8000e9a:	4648      	mov	r0, r9
 8000e9c:	2800      	cmp	r0, #0
 8000e9e:	d01f      	beq.n	8000ee0 <__aeabi_fsub+0x368>
 8000ea0:	1a1a      	subs	r2, r3, r0
 8000ea2:	0150      	lsls	r0, r2, #5
 8000ea4:	d520      	bpl.n	8000ee8 <__aeabi_fsub+0x370>
 8000ea6:	464a      	mov	r2, r9
 8000ea8:	2407      	movs	r4, #7
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	401c      	ands	r4, r3
 8000eae:	4688      	mov	r8, r1
 8000eb0:	2500      	movs	r5, #0
 8000eb2:	e6a6      	b.n	8000c02 <__aeabi_fsub+0x8a>
 8000eb4:	1c74      	adds	r4, r6, #1
 8000eb6:	d0c9      	beq.n	8000e4c <__aeabi_fsub+0x2d4>
 8000eb8:	43f6      	mvns	r6, r6
 8000eba:	28ff      	cmp	r0, #255	; 0xff
 8000ebc:	d1bc      	bne.n	8000e38 <__aeabi_fsub+0x2c0>
 8000ebe:	464b      	mov	r3, r9
 8000ec0:	e720      	b.n	8000d04 <__aeabi_fsub+0x18c>
 8000ec2:	4699      	mov	r9, r3
 8000ec4:	464b      	mov	r3, r9
 8000ec6:	2500      	movs	r5, #0
 8000ec8:	08db      	lsrs	r3, r3, #3
 8000eca:	e72b      	b.n	8000d24 <__aeabi_fsub+0x1ac>
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e740      	b.n	8000d52 <__aeabi_fsub+0x1da>
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e6a9      	b.n	8000c2a <__aeabi_fsub+0xb2>
 8000ed6:	2380      	movs	r3, #128	; 0x80
 8000ed8:	2200      	movs	r2, #0
 8000eda:	03db      	lsls	r3, r3, #15
 8000edc:	24ff      	movs	r4, #255	; 0xff
 8000ede:	e6a4      	b.n	8000c2a <__aeabi_fsub+0xb2>
 8000ee0:	2500      	movs	r5, #0
 8000ee2:	e71c      	b.n	8000d1e <__aeabi_fsub+0x1a6>
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e7b1      	b.n	8000e4c <__aeabi_fsub+0x2d4>
 8000ee8:	2a00      	cmp	r2, #0
 8000eea:	d0f1      	beq.n	8000ed0 <__aeabi_fsub+0x358>
 8000eec:	0013      	movs	r3, r2
 8000eee:	2500      	movs	r5, #0
 8000ef0:	e6fc      	b.n	8000cec <__aeabi_fsub+0x174>
 8000ef2:	2500      	movs	r5, #0
 8000ef4:	e6fa      	b.n	8000cec <__aeabi_fsub+0x174>
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	7dffffff 	.word	0x7dffffff
 8000efc:	fbffffff 	.word	0xfbffffff

08000f00 <__aeabi_i2f>:
 8000f00:	b570      	push	{r4, r5, r6, lr}
 8000f02:	2800      	cmp	r0, #0
 8000f04:	d03d      	beq.n	8000f82 <__aeabi_i2f+0x82>
 8000f06:	17c3      	asrs	r3, r0, #31
 8000f08:	18c5      	adds	r5, r0, r3
 8000f0a:	405d      	eors	r5, r3
 8000f0c:	0fc4      	lsrs	r4, r0, #31
 8000f0e:	0028      	movs	r0, r5
 8000f10:	f001 fef4 	bl	8002cfc <__clzsi2>
 8000f14:	229e      	movs	r2, #158	; 0x9e
 8000f16:	1a12      	subs	r2, r2, r0
 8000f18:	2a96      	cmp	r2, #150	; 0x96
 8000f1a:	dc07      	bgt.n	8000f2c <__aeabi_i2f+0x2c>
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	2808      	cmp	r0, #8
 8000f20:	dd33      	ble.n	8000f8a <__aeabi_i2f+0x8a>
 8000f22:	3808      	subs	r0, #8
 8000f24:	4085      	lsls	r5, r0
 8000f26:	0268      	lsls	r0, r5, #9
 8000f28:	0a40      	lsrs	r0, r0, #9
 8000f2a:	e023      	b.n	8000f74 <__aeabi_i2f+0x74>
 8000f2c:	2a99      	cmp	r2, #153	; 0x99
 8000f2e:	dd0b      	ble.n	8000f48 <__aeabi_i2f+0x48>
 8000f30:	2305      	movs	r3, #5
 8000f32:	0029      	movs	r1, r5
 8000f34:	1a1b      	subs	r3, r3, r0
 8000f36:	40d9      	lsrs	r1, r3
 8000f38:	0003      	movs	r3, r0
 8000f3a:	331b      	adds	r3, #27
 8000f3c:	409d      	lsls	r5, r3
 8000f3e:	002b      	movs	r3, r5
 8000f40:	1e5d      	subs	r5, r3, #1
 8000f42:	41ab      	sbcs	r3, r5
 8000f44:	4319      	orrs	r1, r3
 8000f46:	000d      	movs	r5, r1
 8000f48:	2805      	cmp	r0, #5
 8000f4a:	dd01      	ble.n	8000f50 <__aeabi_i2f+0x50>
 8000f4c:	1f43      	subs	r3, r0, #5
 8000f4e:	409d      	lsls	r5, r3
 8000f50:	002b      	movs	r3, r5
 8000f52:	490f      	ldr	r1, [pc, #60]	; (8000f90 <__aeabi_i2f+0x90>)
 8000f54:	400b      	ands	r3, r1
 8000f56:	076e      	lsls	r6, r5, #29
 8000f58:	d009      	beq.n	8000f6e <__aeabi_i2f+0x6e>
 8000f5a:	260f      	movs	r6, #15
 8000f5c:	4035      	ands	r5, r6
 8000f5e:	2d04      	cmp	r5, #4
 8000f60:	d005      	beq.n	8000f6e <__aeabi_i2f+0x6e>
 8000f62:	3304      	adds	r3, #4
 8000f64:	015d      	lsls	r5, r3, #5
 8000f66:	d502      	bpl.n	8000f6e <__aeabi_i2f+0x6e>
 8000f68:	229f      	movs	r2, #159	; 0x9f
 8000f6a:	400b      	ands	r3, r1
 8000f6c:	1a12      	subs	r2, r2, r0
 8000f6e:	019b      	lsls	r3, r3, #6
 8000f70:	0a58      	lsrs	r0, r3, #9
 8000f72:	b2d2      	uxtb	r2, r2
 8000f74:	0240      	lsls	r0, r0, #9
 8000f76:	05d2      	lsls	r2, r2, #23
 8000f78:	0a40      	lsrs	r0, r0, #9
 8000f7a:	07e4      	lsls	r4, r4, #31
 8000f7c:	4310      	orrs	r0, r2
 8000f7e:	4320      	orrs	r0, r4
 8000f80:	bd70      	pop	{r4, r5, r6, pc}
 8000f82:	2400      	movs	r4, #0
 8000f84:	2200      	movs	r2, #0
 8000f86:	2000      	movs	r0, #0
 8000f88:	e7f4      	b.n	8000f74 <__aeabi_i2f+0x74>
 8000f8a:	0268      	lsls	r0, r5, #9
 8000f8c:	0a40      	lsrs	r0, r0, #9
 8000f8e:	e7f1      	b.n	8000f74 <__aeabi_i2f+0x74>
 8000f90:	fbffffff 	.word	0xfbffffff

08000f94 <__aeabi_ui2f>:
 8000f94:	b570      	push	{r4, r5, r6, lr}
 8000f96:	1e04      	subs	r4, r0, #0
 8000f98:	d034      	beq.n	8001004 <__aeabi_ui2f+0x70>
 8000f9a:	f001 feaf 	bl	8002cfc <__clzsi2>
 8000f9e:	229e      	movs	r2, #158	; 0x9e
 8000fa0:	1a12      	subs	r2, r2, r0
 8000fa2:	2a96      	cmp	r2, #150	; 0x96
 8000fa4:	dc07      	bgt.n	8000fb6 <__aeabi_ui2f+0x22>
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	2808      	cmp	r0, #8
 8000faa:	dd2e      	ble.n	800100a <__aeabi_ui2f+0x76>
 8000fac:	3808      	subs	r0, #8
 8000fae:	4084      	lsls	r4, r0
 8000fb0:	0260      	lsls	r0, r4, #9
 8000fb2:	0a40      	lsrs	r0, r0, #9
 8000fb4:	e021      	b.n	8000ffa <__aeabi_ui2f+0x66>
 8000fb6:	2a99      	cmp	r2, #153	; 0x99
 8000fb8:	dd09      	ble.n	8000fce <__aeabi_ui2f+0x3a>
 8000fba:	0003      	movs	r3, r0
 8000fbc:	0021      	movs	r1, r4
 8000fbe:	331b      	adds	r3, #27
 8000fc0:	4099      	lsls	r1, r3
 8000fc2:	1e4b      	subs	r3, r1, #1
 8000fc4:	4199      	sbcs	r1, r3
 8000fc6:	2305      	movs	r3, #5
 8000fc8:	1a1b      	subs	r3, r3, r0
 8000fca:	40dc      	lsrs	r4, r3
 8000fcc:	430c      	orrs	r4, r1
 8000fce:	2805      	cmp	r0, #5
 8000fd0:	dd01      	ble.n	8000fd6 <__aeabi_ui2f+0x42>
 8000fd2:	1f43      	subs	r3, r0, #5
 8000fd4:	409c      	lsls	r4, r3
 8000fd6:	0023      	movs	r3, r4
 8000fd8:	490d      	ldr	r1, [pc, #52]	; (8001010 <__aeabi_ui2f+0x7c>)
 8000fda:	400b      	ands	r3, r1
 8000fdc:	0765      	lsls	r5, r4, #29
 8000fde:	d009      	beq.n	8000ff4 <__aeabi_ui2f+0x60>
 8000fe0:	250f      	movs	r5, #15
 8000fe2:	402c      	ands	r4, r5
 8000fe4:	2c04      	cmp	r4, #4
 8000fe6:	d005      	beq.n	8000ff4 <__aeabi_ui2f+0x60>
 8000fe8:	3304      	adds	r3, #4
 8000fea:	015c      	lsls	r4, r3, #5
 8000fec:	d502      	bpl.n	8000ff4 <__aeabi_ui2f+0x60>
 8000fee:	229f      	movs	r2, #159	; 0x9f
 8000ff0:	400b      	ands	r3, r1
 8000ff2:	1a12      	subs	r2, r2, r0
 8000ff4:	019b      	lsls	r3, r3, #6
 8000ff6:	0a58      	lsrs	r0, r3, #9
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	0240      	lsls	r0, r0, #9
 8000ffc:	05d2      	lsls	r2, r2, #23
 8000ffe:	0a40      	lsrs	r0, r0, #9
 8001000:	4310      	orrs	r0, r2
 8001002:	bd70      	pop	{r4, r5, r6, pc}
 8001004:	2200      	movs	r2, #0
 8001006:	2000      	movs	r0, #0
 8001008:	e7f7      	b.n	8000ffa <__aeabi_ui2f+0x66>
 800100a:	0260      	lsls	r0, r4, #9
 800100c:	0a40      	lsrs	r0, r0, #9
 800100e:	e7f4      	b.n	8000ffa <__aeabi_ui2f+0x66>
 8001010:	fbffffff 	.word	0xfbffffff

08001014 <__aeabi_dadd>:
 8001014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001016:	464f      	mov	r7, r9
 8001018:	4646      	mov	r6, r8
 800101a:	46d6      	mov	lr, sl
 800101c:	000c      	movs	r4, r1
 800101e:	0309      	lsls	r1, r1, #12
 8001020:	b5c0      	push	{r6, r7, lr}
 8001022:	0a49      	lsrs	r1, r1, #9
 8001024:	0f47      	lsrs	r7, r0, #29
 8001026:	005e      	lsls	r6, r3, #1
 8001028:	4339      	orrs	r1, r7
 800102a:	031f      	lsls	r7, r3, #12
 800102c:	0fdb      	lsrs	r3, r3, #31
 800102e:	469c      	mov	ip, r3
 8001030:	0065      	lsls	r5, r4, #1
 8001032:	0a7b      	lsrs	r3, r7, #9
 8001034:	0f57      	lsrs	r7, r2, #29
 8001036:	431f      	orrs	r7, r3
 8001038:	0d6d      	lsrs	r5, r5, #21
 800103a:	0fe4      	lsrs	r4, r4, #31
 800103c:	0d76      	lsrs	r6, r6, #21
 800103e:	46a1      	mov	r9, r4
 8001040:	00c0      	lsls	r0, r0, #3
 8001042:	46b8      	mov	r8, r7
 8001044:	00d2      	lsls	r2, r2, #3
 8001046:	1bab      	subs	r3, r5, r6
 8001048:	4564      	cmp	r4, ip
 800104a:	d07b      	beq.n	8001144 <__aeabi_dadd+0x130>
 800104c:	2b00      	cmp	r3, #0
 800104e:	dd5f      	ble.n	8001110 <__aeabi_dadd+0xfc>
 8001050:	2e00      	cmp	r6, #0
 8001052:	d000      	beq.n	8001056 <__aeabi_dadd+0x42>
 8001054:	e0a4      	b.n	80011a0 <__aeabi_dadd+0x18c>
 8001056:	003e      	movs	r6, r7
 8001058:	4316      	orrs	r6, r2
 800105a:	d100      	bne.n	800105e <__aeabi_dadd+0x4a>
 800105c:	e112      	b.n	8001284 <__aeabi_dadd+0x270>
 800105e:	1e5e      	subs	r6, r3, #1
 8001060:	2e00      	cmp	r6, #0
 8001062:	d000      	beq.n	8001066 <__aeabi_dadd+0x52>
 8001064:	e19e      	b.n	80013a4 <__aeabi_dadd+0x390>
 8001066:	1a87      	subs	r7, r0, r2
 8001068:	4643      	mov	r3, r8
 800106a:	42b8      	cmp	r0, r7
 800106c:	4180      	sbcs	r0, r0
 800106e:	2501      	movs	r5, #1
 8001070:	1ac9      	subs	r1, r1, r3
 8001072:	4240      	negs	r0, r0
 8001074:	1a09      	subs	r1, r1, r0
 8001076:	020b      	lsls	r3, r1, #8
 8001078:	d400      	bmi.n	800107c <__aeabi_dadd+0x68>
 800107a:	e131      	b.n	80012e0 <__aeabi_dadd+0x2cc>
 800107c:	0249      	lsls	r1, r1, #9
 800107e:	0a4e      	lsrs	r6, r1, #9
 8001080:	2e00      	cmp	r6, #0
 8001082:	d100      	bne.n	8001086 <__aeabi_dadd+0x72>
 8001084:	e16e      	b.n	8001364 <__aeabi_dadd+0x350>
 8001086:	0030      	movs	r0, r6
 8001088:	f001 fe38 	bl	8002cfc <__clzsi2>
 800108c:	0003      	movs	r3, r0
 800108e:	3b08      	subs	r3, #8
 8001090:	2b1f      	cmp	r3, #31
 8001092:	dd00      	ble.n	8001096 <__aeabi_dadd+0x82>
 8001094:	e161      	b.n	800135a <__aeabi_dadd+0x346>
 8001096:	2220      	movs	r2, #32
 8001098:	0039      	movs	r1, r7
 800109a:	1ad2      	subs	r2, r2, r3
 800109c:	409e      	lsls	r6, r3
 800109e:	40d1      	lsrs	r1, r2
 80010a0:	409f      	lsls	r7, r3
 80010a2:	430e      	orrs	r6, r1
 80010a4:	429d      	cmp	r5, r3
 80010a6:	dd00      	ble.n	80010aa <__aeabi_dadd+0x96>
 80010a8:	e151      	b.n	800134e <__aeabi_dadd+0x33a>
 80010aa:	1b5d      	subs	r5, r3, r5
 80010ac:	1c6b      	adds	r3, r5, #1
 80010ae:	2b1f      	cmp	r3, #31
 80010b0:	dd00      	ble.n	80010b4 <__aeabi_dadd+0xa0>
 80010b2:	e17c      	b.n	80013ae <__aeabi_dadd+0x39a>
 80010b4:	2120      	movs	r1, #32
 80010b6:	1ac9      	subs	r1, r1, r3
 80010b8:	003d      	movs	r5, r7
 80010ba:	0030      	movs	r0, r6
 80010bc:	408f      	lsls	r7, r1
 80010be:	4088      	lsls	r0, r1
 80010c0:	40dd      	lsrs	r5, r3
 80010c2:	1e79      	subs	r1, r7, #1
 80010c4:	418f      	sbcs	r7, r1
 80010c6:	0031      	movs	r1, r6
 80010c8:	2207      	movs	r2, #7
 80010ca:	4328      	orrs	r0, r5
 80010cc:	40d9      	lsrs	r1, r3
 80010ce:	2500      	movs	r5, #0
 80010d0:	4307      	orrs	r7, r0
 80010d2:	403a      	ands	r2, r7
 80010d4:	2a00      	cmp	r2, #0
 80010d6:	d009      	beq.n	80010ec <__aeabi_dadd+0xd8>
 80010d8:	230f      	movs	r3, #15
 80010da:	403b      	ands	r3, r7
 80010dc:	2b04      	cmp	r3, #4
 80010de:	d005      	beq.n	80010ec <__aeabi_dadd+0xd8>
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	42bb      	cmp	r3, r7
 80010e4:	41bf      	sbcs	r7, r7
 80010e6:	427f      	negs	r7, r7
 80010e8:	19c9      	adds	r1, r1, r7
 80010ea:	001f      	movs	r7, r3
 80010ec:	020b      	lsls	r3, r1, #8
 80010ee:	d400      	bmi.n	80010f2 <__aeabi_dadd+0xde>
 80010f0:	e226      	b.n	8001540 <__aeabi_dadd+0x52c>
 80010f2:	1c6a      	adds	r2, r5, #1
 80010f4:	4bc6      	ldr	r3, [pc, #792]	; (8001410 <__aeabi_dadd+0x3fc>)
 80010f6:	0555      	lsls	r5, r2, #21
 80010f8:	0d6d      	lsrs	r5, r5, #21
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d100      	bne.n	8001100 <__aeabi_dadd+0xec>
 80010fe:	e106      	b.n	800130e <__aeabi_dadd+0x2fa>
 8001100:	4ac4      	ldr	r2, [pc, #784]	; (8001414 <__aeabi_dadd+0x400>)
 8001102:	08ff      	lsrs	r7, r7, #3
 8001104:	400a      	ands	r2, r1
 8001106:	0753      	lsls	r3, r2, #29
 8001108:	0252      	lsls	r2, r2, #9
 800110a:	433b      	orrs	r3, r7
 800110c:	0b12      	lsrs	r2, r2, #12
 800110e:	e08e      	b.n	800122e <__aeabi_dadd+0x21a>
 8001110:	2b00      	cmp	r3, #0
 8001112:	d000      	beq.n	8001116 <__aeabi_dadd+0x102>
 8001114:	e0b8      	b.n	8001288 <__aeabi_dadd+0x274>
 8001116:	1c6b      	adds	r3, r5, #1
 8001118:	055b      	lsls	r3, r3, #21
 800111a:	0d5b      	lsrs	r3, r3, #21
 800111c:	2b01      	cmp	r3, #1
 800111e:	dc00      	bgt.n	8001122 <__aeabi_dadd+0x10e>
 8001120:	e130      	b.n	8001384 <__aeabi_dadd+0x370>
 8001122:	1a87      	subs	r7, r0, r2
 8001124:	4643      	mov	r3, r8
 8001126:	42b8      	cmp	r0, r7
 8001128:	41b6      	sbcs	r6, r6
 800112a:	1acb      	subs	r3, r1, r3
 800112c:	4276      	negs	r6, r6
 800112e:	1b9e      	subs	r6, r3, r6
 8001130:	0233      	lsls	r3, r6, #8
 8001132:	d500      	bpl.n	8001136 <__aeabi_dadd+0x122>
 8001134:	e14c      	b.n	80013d0 <__aeabi_dadd+0x3bc>
 8001136:	003b      	movs	r3, r7
 8001138:	4333      	orrs	r3, r6
 800113a:	d1a1      	bne.n	8001080 <__aeabi_dadd+0x6c>
 800113c:	2200      	movs	r2, #0
 800113e:	2400      	movs	r4, #0
 8001140:	2500      	movs	r5, #0
 8001142:	e070      	b.n	8001226 <__aeabi_dadd+0x212>
 8001144:	2b00      	cmp	r3, #0
 8001146:	dc00      	bgt.n	800114a <__aeabi_dadd+0x136>
 8001148:	e0e5      	b.n	8001316 <__aeabi_dadd+0x302>
 800114a:	2e00      	cmp	r6, #0
 800114c:	d100      	bne.n	8001150 <__aeabi_dadd+0x13c>
 800114e:	e083      	b.n	8001258 <__aeabi_dadd+0x244>
 8001150:	4eaf      	ldr	r6, [pc, #700]	; (8001410 <__aeabi_dadd+0x3fc>)
 8001152:	42b5      	cmp	r5, r6
 8001154:	d060      	beq.n	8001218 <__aeabi_dadd+0x204>
 8001156:	2680      	movs	r6, #128	; 0x80
 8001158:	0436      	lsls	r6, r6, #16
 800115a:	4337      	orrs	r7, r6
 800115c:	46b8      	mov	r8, r7
 800115e:	2b38      	cmp	r3, #56	; 0x38
 8001160:	dc00      	bgt.n	8001164 <__aeabi_dadd+0x150>
 8001162:	e13e      	b.n	80013e2 <__aeabi_dadd+0x3ce>
 8001164:	4643      	mov	r3, r8
 8001166:	4313      	orrs	r3, r2
 8001168:	001f      	movs	r7, r3
 800116a:	1e7a      	subs	r2, r7, #1
 800116c:	4197      	sbcs	r7, r2
 800116e:	183f      	adds	r7, r7, r0
 8001170:	4287      	cmp	r7, r0
 8001172:	4180      	sbcs	r0, r0
 8001174:	4240      	negs	r0, r0
 8001176:	1809      	adds	r1, r1, r0
 8001178:	020b      	lsls	r3, r1, #8
 800117a:	d400      	bmi.n	800117e <__aeabi_dadd+0x16a>
 800117c:	e0b0      	b.n	80012e0 <__aeabi_dadd+0x2cc>
 800117e:	4ba4      	ldr	r3, [pc, #656]	; (8001410 <__aeabi_dadd+0x3fc>)
 8001180:	3501      	adds	r5, #1
 8001182:	429d      	cmp	r5, r3
 8001184:	d100      	bne.n	8001188 <__aeabi_dadd+0x174>
 8001186:	e0c3      	b.n	8001310 <__aeabi_dadd+0x2fc>
 8001188:	4aa2      	ldr	r2, [pc, #648]	; (8001414 <__aeabi_dadd+0x400>)
 800118a:	087b      	lsrs	r3, r7, #1
 800118c:	400a      	ands	r2, r1
 800118e:	2101      	movs	r1, #1
 8001190:	400f      	ands	r7, r1
 8001192:	431f      	orrs	r7, r3
 8001194:	0851      	lsrs	r1, r2, #1
 8001196:	07d3      	lsls	r3, r2, #31
 8001198:	2207      	movs	r2, #7
 800119a:	431f      	orrs	r7, r3
 800119c:	403a      	ands	r2, r7
 800119e:	e799      	b.n	80010d4 <__aeabi_dadd+0xc0>
 80011a0:	4e9b      	ldr	r6, [pc, #620]	; (8001410 <__aeabi_dadd+0x3fc>)
 80011a2:	42b5      	cmp	r5, r6
 80011a4:	d038      	beq.n	8001218 <__aeabi_dadd+0x204>
 80011a6:	2680      	movs	r6, #128	; 0x80
 80011a8:	0436      	lsls	r6, r6, #16
 80011aa:	4337      	orrs	r7, r6
 80011ac:	46b8      	mov	r8, r7
 80011ae:	2b38      	cmp	r3, #56	; 0x38
 80011b0:	dd00      	ble.n	80011b4 <__aeabi_dadd+0x1a0>
 80011b2:	e0dc      	b.n	800136e <__aeabi_dadd+0x35a>
 80011b4:	2b1f      	cmp	r3, #31
 80011b6:	dc00      	bgt.n	80011ba <__aeabi_dadd+0x1a6>
 80011b8:	e130      	b.n	800141c <__aeabi_dadd+0x408>
 80011ba:	001e      	movs	r6, r3
 80011bc:	4647      	mov	r7, r8
 80011be:	3e20      	subs	r6, #32
 80011c0:	40f7      	lsrs	r7, r6
 80011c2:	46bc      	mov	ip, r7
 80011c4:	2b20      	cmp	r3, #32
 80011c6:	d004      	beq.n	80011d2 <__aeabi_dadd+0x1be>
 80011c8:	2640      	movs	r6, #64	; 0x40
 80011ca:	1af3      	subs	r3, r6, r3
 80011cc:	4646      	mov	r6, r8
 80011ce:	409e      	lsls	r6, r3
 80011d0:	4332      	orrs	r2, r6
 80011d2:	0017      	movs	r7, r2
 80011d4:	4663      	mov	r3, ip
 80011d6:	1e7a      	subs	r2, r7, #1
 80011d8:	4197      	sbcs	r7, r2
 80011da:	431f      	orrs	r7, r3
 80011dc:	e0cc      	b.n	8001378 <__aeabi_dadd+0x364>
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d100      	bne.n	80011e4 <__aeabi_dadd+0x1d0>
 80011e2:	e204      	b.n	80015ee <__aeabi_dadd+0x5da>
 80011e4:	4643      	mov	r3, r8
 80011e6:	4313      	orrs	r3, r2
 80011e8:	d100      	bne.n	80011ec <__aeabi_dadd+0x1d8>
 80011ea:	e159      	b.n	80014a0 <__aeabi_dadd+0x48c>
 80011ec:	074b      	lsls	r3, r1, #29
 80011ee:	08c0      	lsrs	r0, r0, #3
 80011f0:	4318      	orrs	r0, r3
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	08c9      	lsrs	r1, r1, #3
 80011f6:	031b      	lsls	r3, r3, #12
 80011f8:	4219      	tst	r1, r3
 80011fa:	d008      	beq.n	800120e <__aeabi_dadd+0x1fa>
 80011fc:	4645      	mov	r5, r8
 80011fe:	08ed      	lsrs	r5, r5, #3
 8001200:	421d      	tst	r5, r3
 8001202:	d104      	bne.n	800120e <__aeabi_dadd+0x1fa>
 8001204:	4643      	mov	r3, r8
 8001206:	08d0      	lsrs	r0, r2, #3
 8001208:	0759      	lsls	r1, r3, #29
 800120a:	4308      	orrs	r0, r1
 800120c:	0029      	movs	r1, r5
 800120e:	0f42      	lsrs	r2, r0, #29
 8001210:	00c9      	lsls	r1, r1, #3
 8001212:	4d7f      	ldr	r5, [pc, #508]	; (8001410 <__aeabi_dadd+0x3fc>)
 8001214:	4311      	orrs	r1, r2
 8001216:	00c0      	lsls	r0, r0, #3
 8001218:	074b      	lsls	r3, r1, #29
 800121a:	08ca      	lsrs	r2, r1, #3
 800121c:	497c      	ldr	r1, [pc, #496]	; (8001410 <__aeabi_dadd+0x3fc>)
 800121e:	08c0      	lsrs	r0, r0, #3
 8001220:	4303      	orrs	r3, r0
 8001222:	428d      	cmp	r5, r1
 8001224:	d068      	beq.n	80012f8 <__aeabi_dadd+0x2e4>
 8001226:	0312      	lsls	r2, r2, #12
 8001228:	056d      	lsls	r5, r5, #21
 800122a:	0b12      	lsrs	r2, r2, #12
 800122c:	0d6d      	lsrs	r5, r5, #21
 800122e:	2100      	movs	r1, #0
 8001230:	0312      	lsls	r2, r2, #12
 8001232:	0018      	movs	r0, r3
 8001234:	0b13      	lsrs	r3, r2, #12
 8001236:	0d0a      	lsrs	r2, r1, #20
 8001238:	0512      	lsls	r2, r2, #20
 800123a:	431a      	orrs	r2, r3
 800123c:	4b76      	ldr	r3, [pc, #472]	; (8001418 <__aeabi_dadd+0x404>)
 800123e:	052d      	lsls	r5, r5, #20
 8001240:	4013      	ands	r3, r2
 8001242:	432b      	orrs	r3, r5
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	07e4      	lsls	r4, r4, #31
 8001248:	085b      	lsrs	r3, r3, #1
 800124a:	4323      	orrs	r3, r4
 800124c:	0019      	movs	r1, r3
 800124e:	bc1c      	pop	{r2, r3, r4}
 8001250:	4690      	mov	r8, r2
 8001252:	4699      	mov	r9, r3
 8001254:	46a2      	mov	sl, r4
 8001256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001258:	003e      	movs	r6, r7
 800125a:	4316      	orrs	r6, r2
 800125c:	d012      	beq.n	8001284 <__aeabi_dadd+0x270>
 800125e:	1e5e      	subs	r6, r3, #1
 8001260:	2e00      	cmp	r6, #0
 8001262:	d000      	beq.n	8001266 <__aeabi_dadd+0x252>
 8001264:	e100      	b.n	8001468 <__aeabi_dadd+0x454>
 8001266:	1887      	adds	r7, r0, r2
 8001268:	4287      	cmp	r7, r0
 800126a:	4180      	sbcs	r0, r0
 800126c:	4441      	add	r1, r8
 800126e:	4240      	negs	r0, r0
 8001270:	1809      	adds	r1, r1, r0
 8001272:	2501      	movs	r5, #1
 8001274:	020b      	lsls	r3, r1, #8
 8001276:	d533      	bpl.n	80012e0 <__aeabi_dadd+0x2cc>
 8001278:	2502      	movs	r5, #2
 800127a:	e785      	b.n	8001188 <__aeabi_dadd+0x174>
 800127c:	4664      	mov	r4, ip
 800127e:	0033      	movs	r3, r6
 8001280:	4641      	mov	r1, r8
 8001282:	0010      	movs	r0, r2
 8001284:	001d      	movs	r5, r3
 8001286:	e7c7      	b.n	8001218 <__aeabi_dadd+0x204>
 8001288:	2d00      	cmp	r5, #0
 800128a:	d000      	beq.n	800128e <__aeabi_dadd+0x27a>
 800128c:	e0da      	b.n	8001444 <__aeabi_dadd+0x430>
 800128e:	000c      	movs	r4, r1
 8001290:	4304      	orrs	r4, r0
 8001292:	d0f3      	beq.n	800127c <__aeabi_dadd+0x268>
 8001294:	1c5c      	adds	r4, r3, #1
 8001296:	d100      	bne.n	800129a <__aeabi_dadd+0x286>
 8001298:	e19f      	b.n	80015da <__aeabi_dadd+0x5c6>
 800129a:	4c5d      	ldr	r4, [pc, #372]	; (8001410 <__aeabi_dadd+0x3fc>)
 800129c:	42a6      	cmp	r6, r4
 800129e:	d100      	bne.n	80012a2 <__aeabi_dadd+0x28e>
 80012a0:	e12f      	b.n	8001502 <__aeabi_dadd+0x4ee>
 80012a2:	43db      	mvns	r3, r3
 80012a4:	2b38      	cmp	r3, #56	; 0x38
 80012a6:	dd00      	ble.n	80012aa <__aeabi_dadd+0x296>
 80012a8:	e166      	b.n	8001578 <__aeabi_dadd+0x564>
 80012aa:	2b1f      	cmp	r3, #31
 80012ac:	dd00      	ble.n	80012b0 <__aeabi_dadd+0x29c>
 80012ae:	e183      	b.n	80015b8 <__aeabi_dadd+0x5a4>
 80012b0:	2420      	movs	r4, #32
 80012b2:	0005      	movs	r5, r0
 80012b4:	1ae4      	subs	r4, r4, r3
 80012b6:	000f      	movs	r7, r1
 80012b8:	40dd      	lsrs	r5, r3
 80012ba:	40d9      	lsrs	r1, r3
 80012bc:	40a0      	lsls	r0, r4
 80012be:	4643      	mov	r3, r8
 80012c0:	40a7      	lsls	r7, r4
 80012c2:	1a5b      	subs	r3, r3, r1
 80012c4:	1e44      	subs	r4, r0, #1
 80012c6:	41a0      	sbcs	r0, r4
 80012c8:	4698      	mov	r8, r3
 80012ca:	432f      	orrs	r7, r5
 80012cc:	4338      	orrs	r0, r7
 80012ce:	1a17      	subs	r7, r2, r0
 80012d0:	42ba      	cmp	r2, r7
 80012d2:	4192      	sbcs	r2, r2
 80012d4:	4643      	mov	r3, r8
 80012d6:	4252      	negs	r2, r2
 80012d8:	1a99      	subs	r1, r3, r2
 80012da:	4664      	mov	r4, ip
 80012dc:	0035      	movs	r5, r6
 80012de:	e6ca      	b.n	8001076 <__aeabi_dadd+0x62>
 80012e0:	2207      	movs	r2, #7
 80012e2:	403a      	ands	r2, r7
 80012e4:	2a00      	cmp	r2, #0
 80012e6:	d000      	beq.n	80012ea <__aeabi_dadd+0x2d6>
 80012e8:	e6f6      	b.n	80010d8 <__aeabi_dadd+0xc4>
 80012ea:	074b      	lsls	r3, r1, #29
 80012ec:	08ca      	lsrs	r2, r1, #3
 80012ee:	4948      	ldr	r1, [pc, #288]	; (8001410 <__aeabi_dadd+0x3fc>)
 80012f0:	08ff      	lsrs	r7, r7, #3
 80012f2:	433b      	orrs	r3, r7
 80012f4:	428d      	cmp	r5, r1
 80012f6:	d196      	bne.n	8001226 <__aeabi_dadd+0x212>
 80012f8:	0019      	movs	r1, r3
 80012fa:	4311      	orrs	r1, r2
 80012fc:	d100      	bne.n	8001300 <__aeabi_dadd+0x2ec>
 80012fe:	e19e      	b.n	800163e <__aeabi_dadd+0x62a>
 8001300:	2180      	movs	r1, #128	; 0x80
 8001302:	0309      	lsls	r1, r1, #12
 8001304:	430a      	orrs	r2, r1
 8001306:	0312      	lsls	r2, r2, #12
 8001308:	0b12      	lsrs	r2, r2, #12
 800130a:	4d41      	ldr	r5, [pc, #260]	; (8001410 <__aeabi_dadd+0x3fc>)
 800130c:	e78f      	b.n	800122e <__aeabi_dadd+0x21a>
 800130e:	0015      	movs	r5, r2
 8001310:	2200      	movs	r2, #0
 8001312:	2300      	movs	r3, #0
 8001314:	e78b      	b.n	800122e <__aeabi_dadd+0x21a>
 8001316:	2b00      	cmp	r3, #0
 8001318:	d000      	beq.n	800131c <__aeabi_dadd+0x308>
 800131a:	e0c7      	b.n	80014ac <__aeabi_dadd+0x498>
 800131c:	1c6b      	adds	r3, r5, #1
 800131e:	055f      	lsls	r7, r3, #21
 8001320:	0d7f      	lsrs	r7, r7, #21
 8001322:	2f01      	cmp	r7, #1
 8001324:	dc00      	bgt.n	8001328 <__aeabi_dadd+0x314>
 8001326:	e0f1      	b.n	800150c <__aeabi_dadd+0x4f8>
 8001328:	4d39      	ldr	r5, [pc, #228]	; (8001410 <__aeabi_dadd+0x3fc>)
 800132a:	42ab      	cmp	r3, r5
 800132c:	d100      	bne.n	8001330 <__aeabi_dadd+0x31c>
 800132e:	e0b9      	b.n	80014a4 <__aeabi_dadd+0x490>
 8001330:	1885      	adds	r5, r0, r2
 8001332:	000a      	movs	r2, r1
 8001334:	4285      	cmp	r5, r0
 8001336:	4189      	sbcs	r1, r1
 8001338:	4442      	add	r2, r8
 800133a:	4249      	negs	r1, r1
 800133c:	1851      	adds	r1, r2, r1
 800133e:	2207      	movs	r2, #7
 8001340:	07cf      	lsls	r7, r1, #31
 8001342:	086d      	lsrs	r5, r5, #1
 8001344:	432f      	orrs	r7, r5
 8001346:	0849      	lsrs	r1, r1, #1
 8001348:	403a      	ands	r2, r7
 800134a:	001d      	movs	r5, r3
 800134c:	e6c2      	b.n	80010d4 <__aeabi_dadd+0xc0>
 800134e:	2207      	movs	r2, #7
 8001350:	4930      	ldr	r1, [pc, #192]	; (8001414 <__aeabi_dadd+0x400>)
 8001352:	1aed      	subs	r5, r5, r3
 8001354:	4031      	ands	r1, r6
 8001356:	403a      	ands	r2, r7
 8001358:	e6bc      	b.n	80010d4 <__aeabi_dadd+0xc0>
 800135a:	003e      	movs	r6, r7
 800135c:	3828      	subs	r0, #40	; 0x28
 800135e:	4086      	lsls	r6, r0
 8001360:	2700      	movs	r7, #0
 8001362:	e69f      	b.n	80010a4 <__aeabi_dadd+0x90>
 8001364:	0038      	movs	r0, r7
 8001366:	f001 fcc9 	bl	8002cfc <__clzsi2>
 800136a:	3020      	adds	r0, #32
 800136c:	e68e      	b.n	800108c <__aeabi_dadd+0x78>
 800136e:	4643      	mov	r3, r8
 8001370:	4313      	orrs	r3, r2
 8001372:	001f      	movs	r7, r3
 8001374:	1e7a      	subs	r2, r7, #1
 8001376:	4197      	sbcs	r7, r2
 8001378:	1bc7      	subs	r7, r0, r7
 800137a:	42b8      	cmp	r0, r7
 800137c:	4180      	sbcs	r0, r0
 800137e:	4240      	negs	r0, r0
 8001380:	1a09      	subs	r1, r1, r0
 8001382:	e678      	b.n	8001076 <__aeabi_dadd+0x62>
 8001384:	000e      	movs	r6, r1
 8001386:	003b      	movs	r3, r7
 8001388:	4306      	orrs	r6, r0
 800138a:	4313      	orrs	r3, r2
 800138c:	2d00      	cmp	r5, #0
 800138e:	d161      	bne.n	8001454 <__aeabi_dadd+0x440>
 8001390:	2e00      	cmp	r6, #0
 8001392:	d000      	beq.n	8001396 <__aeabi_dadd+0x382>
 8001394:	e0f4      	b.n	8001580 <__aeabi_dadd+0x56c>
 8001396:	2b00      	cmp	r3, #0
 8001398:	d100      	bne.n	800139c <__aeabi_dadd+0x388>
 800139a:	e11b      	b.n	80015d4 <__aeabi_dadd+0x5c0>
 800139c:	4664      	mov	r4, ip
 800139e:	0039      	movs	r1, r7
 80013a0:	0010      	movs	r0, r2
 80013a2:	e739      	b.n	8001218 <__aeabi_dadd+0x204>
 80013a4:	4f1a      	ldr	r7, [pc, #104]	; (8001410 <__aeabi_dadd+0x3fc>)
 80013a6:	42bb      	cmp	r3, r7
 80013a8:	d07a      	beq.n	80014a0 <__aeabi_dadd+0x48c>
 80013aa:	0033      	movs	r3, r6
 80013ac:	e6ff      	b.n	80011ae <__aeabi_dadd+0x19a>
 80013ae:	0030      	movs	r0, r6
 80013b0:	3d1f      	subs	r5, #31
 80013b2:	40e8      	lsrs	r0, r5
 80013b4:	2b20      	cmp	r3, #32
 80013b6:	d003      	beq.n	80013c0 <__aeabi_dadd+0x3ac>
 80013b8:	2140      	movs	r1, #64	; 0x40
 80013ba:	1acb      	subs	r3, r1, r3
 80013bc:	409e      	lsls	r6, r3
 80013be:	4337      	orrs	r7, r6
 80013c0:	1e7b      	subs	r3, r7, #1
 80013c2:	419f      	sbcs	r7, r3
 80013c4:	2207      	movs	r2, #7
 80013c6:	4307      	orrs	r7, r0
 80013c8:	403a      	ands	r2, r7
 80013ca:	2100      	movs	r1, #0
 80013cc:	2500      	movs	r5, #0
 80013ce:	e789      	b.n	80012e4 <__aeabi_dadd+0x2d0>
 80013d0:	1a17      	subs	r7, r2, r0
 80013d2:	4643      	mov	r3, r8
 80013d4:	42ba      	cmp	r2, r7
 80013d6:	41b6      	sbcs	r6, r6
 80013d8:	1a59      	subs	r1, r3, r1
 80013da:	4276      	negs	r6, r6
 80013dc:	1b8e      	subs	r6, r1, r6
 80013de:	4664      	mov	r4, ip
 80013e0:	e64e      	b.n	8001080 <__aeabi_dadd+0x6c>
 80013e2:	2b1f      	cmp	r3, #31
 80013e4:	dd00      	ble.n	80013e8 <__aeabi_dadd+0x3d4>
 80013e6:	e0ad      	b.n	8001544 <__aeabi_dadd+0x530>
 80013e8:	2620      	movs	r6, #32
 80013ea:	4647      	mov	r7, r8
 80013ec:	1af6      	subs	r6, r6, r3
 80013ee:	40b7      	lsls	r7, r6
 80013f0:	46b9      	mov	r9, r7
 80013f2:	0017      	movs	r7, r2
 80013f4:	46b2      	mov	sl, r6
 80013f6:	40df      	lsrs	r7, r3
 80013f8:	464e      	mov	r6, r9
 80013fa:	433e      	orrs	r6, r7
 80013fc:	0037      	movs	r7, r6
 80013fe:	4656      	mov	r6, sl
 8001400:	40b2      	lsls	r2, r6
 8001402:	1e56      	subs	r6, r2, #1
 8001404:	41b2      	sbcs	r2, r6
 8001406:	4317      	orrs	r7, r2
 8001408:	4642      	mov	r2, r8
 800140a:	40da      	lsrs	r2, r3
 800140c:	1889      	adds	r1, r1, r2
 800140e:	e6ae      	b.n	800116e <__aeabi_dadd+0x15a>
 8001410:	000007ff 	.word	0x000007ff
 8001414:	ff7fffff 	.word	0xff7fffff
 8001418:	800fffff 	.word	0x800fffff
 800141c:	2620      	movs	r6, #32
 800141e:	4647      	mov	r7, r8
 8001420:	1af6      	subs	r6, r6, r3
 8001422:	40b7      	lsls	r7, r6
 8001424:	46b9      	mov	r9, r7
 8001426:	0017      	movs	r7, r2
 8001428:	46b2      	mov	sl, r6
 800142a:	40df      	lsrs	r7, r3
 800142c:	464e      	mov	r6, r9
 800142e:	433e      	orrs	r6, r7
 8001430:	0037      	movs	r7, r6
 8001432:	4656      	mov	r6, sl
 8001434:	40b2      	lsls	r2, r6
 8001436:	1e56      	subs	r6, r2, #1
 8001438:	41b2      	sbcs	r2, r6
 800143a:	4317      	orrs	r7, r2
 800143c:	4642      	mov	r2, r8
 800143e:	40da      	lsrs	r2, r3
 8001440:	1a89      	subs	r1, r1, r2
 8001442:	e799      	b.n	8001378 <__aeabi_dadd+0x364>
 8001444:	4c7f      	ldr	r4, [pc, #508]	; (8001644 <__aeabi_dadd+0x630>)
 8001446:	42a6      	cmp	r6, r4
 8001448:	d05b      	beq.n	8001502 <__aeabi_dadd+0x4ee>
 800144a:	2480      	movs	r4, #128	; 0x80
 800144c:	0424      	lsls	r4, r4, #16
 800144e:	425b      	negs	r3, r3
 8001450:	4321      	orrs	r1, r4
 8001452:	e727      	b.n	80012a4 <__aeabi_dadd+0x290>
 8001454:	2e00      	cmp	r6, #0
 8001456:	d10c      	bne.n	8001472 <__aeabi_dadd+0x45e>
 8001458:	2b00      	cmp	r3, #0
 800145a:	d100      	bne.n	800145e <__aeabi_dadd+0x44a>
 800145c:	e0cb      	b.n	80015f6 <__aeabi_dadd+0x5e2>
 800145e:	4664      	mov	r4, ip
 8001460:	0039      	movs	r1, r7
 8001462:	0010      	movs	r0, r2
 8001464:	4d77      	ldr	r5, [pc, #476]	; (8001644 <__aeabi_dadd+0x630>)
 8001466:	e6d7      	b.n	8001218 <__aeabi_dadd+0x204>
 8001468:	4f76      	ldr	r7, [pc, #472]	; (8001644 <__aeabi_dadd+0x630>)
 800146a:	42bb      	cmp	r3, r7
 800146c:	d018      	beq.n	80014a0 <__aeabi_dadd+0x48c>
 800146e:	0033      	movs	r3, r6
 8001470:	e675      	b.n	800115e <__aeabi_dadd+0x14a>
 8001472:	2b00      	cmp	r3, #0
 8001474:	d014      	beq.n	80014a0 <__aeabi_dadd+0x48c>
 8001476:	074b      	lsls	r3, r1, #29
 8001478:	08c0      	lsrs	r0, r0, #3
 800147a:	4318      	orrs	r0, r3
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	08c9      	lsrs	r1, r1, #3
 8001480:	031b      	lsls	r3, r3, #12
 8001482:	4219      	tst	r1, r3
 8001484:	d007      	beq.n	8001496 <__aeabi_dadd+0x482>
 8001486:	08fc      	lsrs	r4, r7, #3
 8001488:	421c      	tst	r4, r3
 800148a:	d104      	bne.n	8001496 <__aeabi_dadd+0x482>
 800148c:	0779      	lsls	r1, r7, #29
 800148e:	08d0      	lsrs	r0, r2, #3
 8001490:	4308      	orrs	r0, r1
 8001492:	46e1      	mov	r9, ip
 8001494:	0021      	movs	r1, r4
 8001496:	464c      	mov	r4, r9
 8001498:	0f42      	lsrs	r2, r0, #29
 800149a:	00c9      	lsls	r1, r1, #3
 800149c:	4311      	orrs	r1, r2
 800149e:	00c0      	lsls	r0, r0, #3
 80014a0:	4d68      	ldr	r5, [pc, #416]	; (8001644 <__aeabi_dadd+0x630>)
 80014a2:	e6b9      	b.n	8001218 <__aeabi_dadd+0x204>
 80014a4:	001d      	movs	r5, r3
 80014a6:	2200      	movs	r2, #0
 80014a8:	2300      	movs	r3, #0
 80014aa:	e6c0      	b.n	800122e <__aeabi_dadd+0x21a>
 80014ac:	2d00      	cmp	r5, #0
 80014ae:	d15b      	bne.n	8001568 <__aeabi_dadd+0x554>
 80014b0:	000d      	movs	r5, r1
 80014b2:	4305      	orrs	r5, r0
 80014b4:	d100      	bne.n	80014b8 <__aeabi_dadd+0x4a4>
 80014b6:	e6e2      	b.n	800127e <__aeabi_dadd+0x26a>
 80014b8:	1c5d      	adds	r5, r3, #1
 80014ba:	d100      	bne.n	80014be <__aeabi_dadd+0x4aa>
 80014bc:	e0b0      	b.n	8001620 <__aeabi_dadd+0x60c>
 80014be:	4d61      	ldr	r5, [pc, #388]	; (8001644 <__aeabi_dadd+0x630>)
 80014c0:	42ae      	cmp	r6, r5
 80014c2:	d01f      	beq.n	8001504 <__aeabi_dadd+0x4f0>
 80014c4:	43db      	mvns	r3, r3
 80014c6:	2b38      	cmp	r3, #56	; 0x38
 80014c8:	dc71      	bgt.n	80015ae <__aeabi_dadd+0x59a>
 80014ca:	2b1f      	cmp	r3, #31
 80014cc:	dd00      	ble.n	80014d0 <__aeabi_dadd+0x4bc>
 80014ce:	e096      	b.n	80015fe <__aeabi_dadd+0x5ea>
 80014d0:	2520      	movs	r5, #32
 80014d2:	000f      	movs	r7, r1
 80014d4:	1aed      	subs	r5, r5, r3
 80014d6:	40af      	lsls	r7, r5
 80014d8:	46b9      	mov	r9, r7
 80014da:	0007      	movs	r7, r0
 80014dc:	46aa      	mov	sl, r5
 80014de:	40df      	lsrs	r7, r3
 80014e0:	464d      	mov	r5, r9
 80014e2:	433d      	orrs	r5, r7
 80014e4:	002f      	movs	r7, r5
 80014e6:	4655      	mov	r5, sl
 80014e8:	40a8      	lsls	r0, r5
 80014ea:	40d9      	lsrs	r1, r3
 80014ec:	1e45      	subs	r5, r0, #1
 80014ee:	41a8      	sbcs	r0, r5
 80014f0:	4488      	add	r8, r1
 80014f2:	4307      	orrs	r7, r0
 80014f4:	18bf      	adds	r7, r7, r2
 80014f6:	4297      	cmp	r7, r2
 80014f8:	4192      	sbcs	r2, r2
 80014fa:	4251      	negs	r1, r2
 80014fc:	4441      	add	r1, r8
 80014fe:	0035      	movs	r5, r6
 8001500:	e63a      	b.n	8001178 <__aeabi_dadd+0x164>
 8001502:	4664      	mov	r4, ip
 8001504:	0035      	movs	r5, r6
 8001506:	4641      	mov	r1, r8
 8001508:	0010      	movs	r0, r2
 800150a:	e685      	b.n	8001218 <__aeabi_dadd+0x204>
 800150c:	000b      	movs	r3, r1
 800150e:	4303      	orrs	r3, r0
 8001510:	2d00      	cmp	r5, #0
 8001512:	d000      	beq.n	8001516 <__aeabi_dadd+0x502>
 8001514:	e663      	b.n	80011de <__aeabi_dadd+0x1ca>
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f5      	beq.n	8001506 <__aeabi_dadd+0x4f2>
 800151a:	4643      	mov	r3, r8
 800151c:	4313      	orrs	r3, r2
 800151e:	d100      	bne.n	8001522 <__aeabi_dadd+0x50e>
 8001520:	e67a      	b.n	8001218 <__aeabi_dadd+0x204>
 8001522:	1887      	adds	r7, r0, r2
 8001524:	4287      	cmp	r7, r0
 8001526:	4180      	sbcs	r0, r0
 8001528:	2207      	movs	r2, #7
 800152a:	4441      	add	r1, r8
 800152c:	4240      	negs	r0, r0
 800152e:	1809      	adds	r1, r1, r0
 8001530:	403a      	ands	r2, r7
 8001532:	020b      	lsls	r3, r1, #8
 8001534:	d400      	bmi.n	8001538 <__aeabi_dadd+0x524>
 8001536:	e6d5      	b.n	80012e4 <__aeabi_dadd+0x2d0>
 8001538:	4b43      	ldr	r3, [pc, #268]	; (8001648 <__aeabi_dadd+0x634>)
 800153a:	3501      	adds	r5, #1
 800153c:	4019      	ands	r1, r3
 800153e:	e5c9      	b.n	80010d4 <__aeabi_dadd+0xc0>
 8001540:	0038      	movs	r0, r7
 8001542:	e669      	b.n	8001218 <__aeabi_dadd+0x204>
 8001544:	001e      	movs	r6, r3
 8001546:	4647      	mov	r7, r8
 8001548:	3e20      	subs	r6, #32
 800154a:	40f7      	lsrs	r7, r6
 800154c:	46bc      	mov	ip, r7
 800154e:	2b20      	cmp	r3, #32
 8001550:	d004      	beq.n	800155c <__aeabi_dadd+0x548>
 8001552:	2640      	movs	r6, #64	; 0x40
 8001554:	1af3      	subs	r3, r6, r3
 8001556:	4646      	mov	r6, r8
 8001558:	409e      	lsls	r6, r3
 800155a:	4332      	orrs	r2, r6
 800155c:	0017      	movs	r7, r2
 800155e:	4663      	mov	r3, ip
 8001560:	1e7a      	subs	r2, r7, #1
 8001562:	4197      	sbcs	r7, r2
 8001564:	431f      	orrs	r7, r3
 8001566:	e602      	b.n	800116e <__aeabi_dadd+0x15a>
 8001568:	4d36      	ldr	r5, [pc, #216]	; (8001644 <__aeabi_dadd+0x630>)
 800156a:	42ae      	cmp	r6, r5
 800156c:	d0ca      	beq.n	8001504 <__aeabi_dadd+0x4f0>
 800156e:	2580      	movs	r5, #128	; 0x80
 8001570:	042d      	lsls	r5, r5, #16
 8001572:	425b      	negs	r3, r3
 8001574:	4329      	orrs	r1, r5
 8001576:	e7a6      	b.n	80014c6 <__aeabi_dadd+0x4b2>
 8001578:	4308      	orrs	r0, r1
 800157a:	1e41      	subs	r1, r0, #1
 800157c:	4188      	sbcs	r0, r1
 800157e:	e6a6      	b.n	80012ce <__aeabi_dadd+0x2ba>
 8001580:	2b00      	cmp	r3, #0
 8001582:	d100      	bne.n	8001586 <__aeabi_dadd+0x572>
 8001584:	e648      	b.n	8001218 <__aeabi_dadd+0x204>
 8001586:	1a87      	subs	r7, r0, r2
 8001588:	4643      	mov	r3, r8
 800158a:	42b8      	cmp	r0, r7
 800158c:	41b6      	sbcs	r6, r6
 800158e:	1acb      	subs	r3, r1, r3
 8001590:	4276      	negs	r6, r6
 8001592:	1b9e      	subs	r6, r3, r6
 8001594:	0233      	lsls	r3, r6, #8
 8001596:	d54b      	bpl.n	8001630 <__aeabi_dadd+0x61c>
 8001598:	1a17      	subs	r7, r2, r0
 800159a:	4643      	mov	r3, r8
 800159c:	42ba      	cmp	r2, r7
 800159e:	4192      	sbcs	r2, r2
 80015a0:	1a59      	subs	r1, r3, r1
 80015a2:	4252      	negs	r2, r2
 80015a4:	1a89      	subs	r1, r1, r2
 80015a6:	2207      	movs	r2, #7
 80015a8:	4664      	mov	r4, ip
 80015aa:	403a      	ands	r2, r7
 80015ac:	e592      	b.n	80010d4 <__aeabi_dadd+0xc0>
 80015ae:	4301      	orrs	r1, r0
 80015b0:	000f      	movs	r7, r1
 80015b2:	1e79      	subs	r1, r7, #1
 80015b4:	418f      	sbcs	r7, r1
 80015b6:	e79d      	b.n	80014f4 <__aeabi_dadd+0x4e0>
 80015b8:	001c      	movs	r4, r3
 80015ba:	000f      	movs	r7, r1
 80015bc:	3c20      	subs	r4, #32
 80015be:	40e7      	lsrs	r7, r4
 80015c0:	2b20      	cmp	r3, #32
 80015c2:	d003      	beq.n	80015cc <__aeabi_dadd+0x5b8>
 80015c4:	2440      	movs	r4, #64	; 0x40
 80015c6:	1ae3      	subs	r3, r4, r3
 80015c8:	4099      	lsls	r1, r3
 80015ca:	4308      	orrs	r0, r1
 80015cc:	1e41      	subs	r1, r0, #1
 80015ce:	4188      	sbcs	r0, r1
 80015d0:	4338      	orrs	r0, r7
 80015d2:	e67c      	b.n	80012ce <__aeabi_dadd+0x2ba>
 80015d4:	2200      	movs	r2, #0
 80015d6:	2400      	movs	r4, #0
 80015d8:	e625      	b.n	8001226 <__aeabi_dadd+0x212>
 80015da:	1a17      	subs	r7, r2, r0
 80015dc:	4643      	mov	r3, r8
 80015de:	42ba      	cmp	r2, r7
 80015e0:	4192      	sbcs	r2, r2
 80015e2:	1a59      	subs	r1, r3, r1
 80015e4:	4252      	negs	r2, r2
 80015e6:	1a89      	subs	r1, r1, r2
 80015e8:	4664      	mov	r4, ip
 80015ea:	0035      	movs	r5, r6
 80015ec:	e543      	b.n	8001076 <__aeabi_dadd+0x62>
 80015ee:	4641      	mov	r1, r8
 80015f0:	0010      	movs	r0, r2
 80015f2:	4d14      	ldr	r5, [pc, #80]	; (8001644 <__aeabi_dadd+0x630>)
 80015f4:	e610      	b.n	8001218 <__aeabi_dadd+0x204>
 80015f6:	2280      	movs	r2, #128	; 0x80
 80015f8:	2400      	movs	r4, #0
 80015fa:	0312      	lsls	r2, r2, #12
 80015fc:	e680      	b.n	8001300 <__aeabi_dadd+0x2ec>
 80015fe:	001d      	movs	r5, r3
 8001600:	000f      	movs	r7, r1
 8001602:	3d20      	subs	r5, #32
 8001604:	40ef      	lsrs	r7, r5
 8001606:	46bc      	mov	ip, r7
 8001608:	2b20      	cmp	r3, #32
 800160a:	d003      	beq.n	8001614 <__aeabi_dadd+0x600>
 800160c:	2540      	movs	r5, #64	; 0x40
 800160e:	1aeb      	subs	r3, r5, r3
 8001610:	4099      	lsls	r1, r3
 8001612:	4308      	orrs	r0, r1
 8001614:	0007      	movs	r7, r0
 8001616:	4663      	mov	r3, ip
 8001618:	1e78      	subs	r0, r7, #1
 800161a:	4187      	sbcs	r7, r0
 800161c:	431f      	orrs	r7, r3
 800161e:	e769      	b.n	80014f4 <__aeabi_dadd+0x4e0>
 8001620:	1887      	adds	r7, r0, r2
 8001622:	4297      	cmp	r7, r2
 8001624:	419b      	sbcs	r3, r3
 8001626:	4441      	add	r1, r8
 8001628:	425b      	negs	r3, r3
 800162a:	18c9      	adds	r1, r1, r3
 800162c:	0035      	movs	r5, r6
 800162e:	e5a3      	b.n	8001178 <__aeabi_dadd+0x164>
 8001630:	003b      	movs	r3, r7
 8001632:	4333      	orrs	r3, r6
 8001634:	d0ce      	beq.n	80015d4 <__aeabi_dadd+0x5c0>
 8001636:	2207      	movs	r2, #7
 8001638:	0031      	movs	r1, r6
 800163a:	403a      	ands	r2, r7
 800163c:	e652      	b.n	80012e4 <__aeabi_dadd+0x2d0>
 800163e:	2300      	movs	r3, #0
 8001640:	001a      	movs	r2, r3
 8001642:	e5f4      	b.n	800122e <__aeabi_dadd+0x21a>
 8001644:	000007ff 	.word	0x000007ff
 8001648:	ff7fffff 	.word	0xff7fffff

0800164c <__aeabi_ddiv>:
 800164c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800164e:	4657      	mov	r7, sl
 8001650:	46de      	mov	lr, fp
 8001652:	464e      	mov	r6, r9
 8001654:	4645      	mov	r5, r8
 8001656:	b5e0      	push	{r5, r6, r7, lr}
 8001658:	4683      	mov	fp, r0
 800165a:	0007      	movs	r7, r0
 800165c:	030e      	lsls	r6, r1, #12
 800165e:	0048      	lsls	r0, r1, #1
 8001660:	b085      	sub	sp, #20
 8001662:	4692      	mov	sl, r2
 8001664:	001c      	movs	r4, r3
 8001666:	0b36      	lsrs	r6, r6, #12
 8001668:	0d40      	lsrs	r0, r0, #21
 800166a:	0fcd      	lsrs	r5, r1, #31
 800166c:	2800      	cmp	r0, #0
 800166e:	d100      	bne.n	8001672 <__aeabi_ddiv+0x26>
 8001670:	e09d      	b.n	80017ae <__aeabi_ddiv+0x162>
 8001672:	4b95      	ldr	r3, [pc, #596]	; (80018c8 <__aeabi_ddiv+0x27c>)
 8001674:	4298      	cmp	r0, r3
 8001676:	d039      	beq.n	80016ec <__aeabi_ddiv+0xa0>
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	00f6      	lsls	r6, r6, #3
 800167c:	041b      	lsls	r3, r3, #16
 800167e:	431e      	orrs	r6, r3
 8001680:	4a92      	ldr	r2, [pc, #584]	; (80018cc <__aeabi_ddiv+0x280>)
 8001682:	0f7b      	lsrs	r3, r7, #29
 8001684:	4333      	orrs	r3, r6
 8001686:	4699      	mov	r9, r3
 8001688:	4694      	mov	ip, r2
 800168a:	0003      	movs	r3, r0
 800168c:	4463      	add	r3, ip
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2300      	movs	r3, #0
 8001692:	2600      	movs	r6, #0
 8001694:	00ff      	lsls	r7, r7, #3
 8001696:	9302      	str	r3, [sp, #8]
 8001698:	0323      	lsls	r3, r4, #12
 800169a:	0b1b      	lsrs	r3, r3, #12
 800169c:	4698      	mov	r8, r3
 800169e:	0063      	lsls	r3, r4, #1
 80016a0:	0fe4      	lsrs	r4, r4, #31
 80016a2:	4652      	mov	r2, sl
 80016a4:	0d5b      	lsrs	r3, r3, #21
 80016a6:	9401      	str	r4, [sp, #4]
 80016a8:	d100      	bne.n	80016ac <__aeabi_ddiv+0x60>
 80016aa:	e0b3      	b.n	8001814 <__aeabi_ddiv+0x1c8>
 80016ac:	4986      	ldr	r1, [pc, #536]	; (80018c8 <__aeabi_ddiv+0x27c>)
 80016ae:	428b      	cmp	r3, r1
 80016b0:	d100      	bne.n	80016b4 <__aeabi_ddiv+0x68>
 80016b2:	e09e      	b.n	80017f2 <__aeabi_ddiv+0x1a6>
 80016b4:	4642      	mov	r2, r8
 80016b6:	00d1      	lsls	r1, r2, #3
 80016b8:	2280      	movs	r2, #128	; 0x80
 80016ba:	0412      	lsls	r2, r2, #16
 80016bc:	430a      	orrs	r2, r1
 80016be:	4651      	mov	r1, sl
 80016c0:	0f49      	lsrs	r1, r1, #29
 80016c2:	4311      	orrs	r1, r2
 80016c4:	468b      	mov	fp, r1
 80016c6:	4981      	ldr	r1, [pc, #516]	; (80018cc <__aeabi_ddiv+0x280>)
 80016c8:	4652      	mov	r2, sl
 80016ca:	468c      	mov	ip, r1
 80016cc:	9900      	ldr	r1, [sp, #0]
 80016ce:	4463      	add	r3, ip
 80016d0:	1acb      	subs	r3, r1, r3
 80016d2:	2100      	movs	r1, #0
 80016d4:	00d2      	lsls	r2, r2, #3
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	002b      	movs	r3, r5
 80016da:	4063      	eors	r3, r4
 80016dc:	469a      	mov	sl, r3
 80016de:	2e0f      	cmp	r6, #15
 80016e0:	d900      	bls.n	80016e4 <__aeabi_ddiv+0x98>
 80016e2:	e105      	b.n	80018f0 <__aeabi_ddiv+0x2a4>
 80016e4:	4b7a      	ldr	r3, [pc, #488]	; (80018d0 <__aeabi_ddiv+0x284>)
 80016e6:	00b6      	lsls	r6, r6, #2
 80016e8:	599b      	ldr	r3, [r3, r6]
 80016ea:	469f      	mov	pc, r3
 80016ec:	465b      	mov	r3, fp
 80016ee:	4333      	orrs	r3, r6
 80016f0:	4699      	mov	r9, r3
 80016f2:	d000      	beq.n	80016f6 <__aeabi_ddiv+0xaa>
 80016f4:	e0b8      	b.n	8001868 <__aeabi_ddiv+0x21c>
 80016f6:	2302      	movs	r3, #2
 80016f8:	2608      	movs	r6, #8
 80016fa:	2700      	movs	r7, #0
 80016fc:	9000      	str	r0, [sp, #0]
 80016fe:	9302      	str	r3, [sp, #8]
 8001700:	e7ca      	b.n	8001698 <__aeabi_ddiv+0x4c>
 8001702:	46cb      	mov	fp, r9
 8001704:	003a      	movs	r2, r7
 8001706:	9902      	ldr	r1, [sp, #8]
 8001708:	9501      	str	r5, [sp, #4]
 800170a:	9b01      	ldr	r3, [sp, #4]
 800170c:	469a      	mov	sl, r3
 800170e:	2902      	cmp	r1, #2
 8001710:	d027      	beq.n	8001762 <__aeabi_ddiv+0x116>
 8001712:	2903      	cmp	r1, #3
 8001714:	d100      	bne.n	8001718 <__aeabi_ddiv+0xcc>
 8001716:	e280      	b.n	8001c1a <__aeabi_ddiv+0x5ce>
 8001718:	2901      	cmp	r1, #1
 800171a:	d044      	beq.n	80017a6 <__aeabi_ddiv+0x15a>
 800171c:	496d      	ldr	r1, [pc, #436]	; (80018d4 <__aeabi_ddiv+0x288>)
 800171e:	9b00      	ldr	r3, [sp, #0]
 8001720:	468c      	mov	ip, r1
 8001722:	4463      	add	r3, ip
 8001724:	001c      	movs	r4, r3
 8001726:	2c00      	cmp	r4, #0
 8001728:	dd38      	ble.n	800179c <__aeabi_ddiv+0x150>
 800172a:	0753      	lsls	r3, r2, #29
 800172c:	d000      	beq.n	8001730 <__aeabi_ddiv+0xe4>
 800172e:	e213      	b.n	8001b58 <__aeabi_ddiv+0x50c>
 8001730:	08d2      	lsrs	r2, r2, #3
 8001732:	465b      	mov	r3, fp
 8001734:	01db      	lsls	r3, r3, #7
 8001736:	d509      	bpl.n	800174c <__aeabi_ddiv+0x100>
 8001738:	4659      	mov	r1, fp
 800173a:	4b67      	ldr	r3, [pc, #412]	; (80018d8 <__aeabi_ddiv+0x28c>)
 800173c:	4019      	ands	r1, r3
 800173e:	468b      	mov	fp, r1
 8001740:	2180      	movs	r1, #128	; 0x80
 8001742:	00c9      	lsls	r1, r1, #3
 8001744:	468c      	mov	ip, r1
 8001746:	9b00      	ldr	r3, [sp, #0]
 8001748:	4463      	add	r3, ip
 800174a:	001c      	movs	r4, r3
 800174c:	4b63      	ldr	r3, [pc, #396]	; (80018dc <__aeabi_ddiv+0x290>)
 800174e:	429c      	cmp	r4, r3
 8001750:	dc07      	bgt.n	8001762 <__aeabi_ddiv+0x116>
 8001752:	465b      	mov	r3, fp
 8001754:	0564      	lsls	r4, r4, #21
 8001756:	075f      	lsls	r7, r3, #29
 8001758:	025b      	lsls	r3, r3, #9
 800175a:	4317      	orrs	r7, r2
 800175c:	0b1b      	lsrs	r3, r3, #12
 800175e:	0d62      	lsrs	r2, r4, #21
 8001760:	e002      	b.n	8001768 <__aeabi_ddiv+0x11c>
 8001762:	2300      	movs	r3, #0
 8001764:	2700      	movs	r7, #0
 8001766:	4a58      	ldr	r2, [pc, #352]	; (80018c8 <__aeabi_ddiv+0x27c>)
 8001768:	2100      	movs	r1, #0
 800176a:	031b      	lsls	r3, r3, #12
 800176c:	0b1c      	lsrs	r4, r3, #12
 800176e:	0d0b      	lsrs	r3, r1, #20
 8001770:	051b      	lsls	r3, r3, #20
 8001772:	4323      	orrs	r3, r4
 8001774:	0514      	lsls	r4, r2, #20
 8001776:	4a5a      	ldr	r2, [pc, #360]	; (80018e0 <__aeabi_ddiv+0x294>)
 8001778:	0038      	movs	r0, r7
 800177a:	4013      	ands	r3, r2
 800177c:	431c      	orrs	r4, r3
 800177e:	4653      	mov	r3, sl
 8001780:	0064      	lsls	r4, r4, #1
 8001782:	07db      	lsls	r3, r3, #31
 8001784:	0864      	lsrs	r4, r4, #1
 8001786:	431c      	orrs	r4, r3
 8001788:	0021      	movs	r1, r4
 800178a:	b005      	add	sp, #20
 800178c:	bc3c      	pop	{r2, r3, r4, r5}
 800178e:	4690      	mov	r8, r2
 8001790:	4699      	mov	r9, r3
 8001792:	46a2      	mov	sl, r4
 8001794:	46ab      	mov	fp, r5
 8001796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001798:	2201      	movs	r2, #1
 800179a:	4252      	negs	r2, r2
 800179c:	2301      	movs	r3, #1
 800179e:	1b1b      	subs	r3, r3, r4
 80017a0:	2b38      	cmp	r3, #56	; 0x38
 80017a2:	dc00      	bgt.n	80017a6 <__aeabi_ddiv+0x15a>
 80017a4:	e1ad      	b.n	8001b02 <__aeabi_ddiv+0x4b6>
 80017a6:	2200      	movs	r2, #0
 80017a8:	2300      	movs	r3, #0
 80017aa:	2700      	movs	r7, #0
 80017ac:	e7dc      	b.n	8001768 <__aeabi_ddiv+0x11c>
 80017ae:	465b      	mov	r3, fp
 80017b0:	4333      	orrs	r3, r6
 80017b2:	4699      	mov	r9, r3
 80017b4:	d05e      	beq.n	8001874 <__aeabi_ddiv+0x228>
 80017b6:	2e00      	cmp	r6, #0
 80017b8:	d100      	bne.n	80017bc <__aeabi_ddiv+0x170>
 80017ba:	e18a      	b.n	8001ad2 <__aeabi_ddiv+0x486>
 80017bc:	0030      	movs	r0, r6
 80017be:	f001 fa9d 	bl	8002cfc <__clzsi2>
 80017c2:	0003      	movs	r3, r0
 80017c4:	3b0b      	subs	r3, #11
 80017c6:	2b1c      	cmp	r3, #28
 80017c8:	dd00      	ble.n	80017cc <__aeabi_ddiv+0x180>
 80017ca:	e17b      	b.n	8001ac4 <__aeabi_ddiv+0x478>
 80017cc:	221d      	movs	r2, #29
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	465a      	mov	r2, fp
 80017d2:	0001      	movs	r1, r0
 80017d4:	40da      	lsrs	r2, r3
 80017d6:	3908      	subs	r1, #8
 80017d8:	408e      	lsls	r6, r1
 80017da:	0013      	movs	r3, r2
 80017dc:	465f      	mov	r7, fp
 80017de:	4333      	orrs	r3, r6
 80017e0:	4699      	mov	r9, r3
 80017e2:	408f      	lsls	r7, r1
 80017e4:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <__aeabi_ddiv+0x298>)
 80017e6:	2600      	movs	r6, #0
 80017e8:	1a1b      	subs	r3, r3, r0
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	2300      	movs	r3, #0
 80017ee:	9302      	str	r3, [sp, #8]
 80017f0:	e752      	b.n	8001698 <__aeabi_ddiv+0x4c>
 80017f2:	4641      	mov	r1, r8
 80017f4:	4653      	mov	r3, sl
 80017f6:	430b      	orrs	r3, r1
 80017f8:	493b      	ldr	r1, [pc, #236]	; (80018e8 <__aeabi_ddiv+0x29c>)
 80017fa:	469b      	mov	fp, r3
 80017fc:	468c      	mov	ip, r1
 80017fe:	9b00      	ldr	r3, [sp, #0]
 8001800:	4463      	add	r3, ip
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	465b      	mov	r3, fp
 8001806:	2b00      	cmp	r3, #0
 8001808:	d13b      	bne.n	8001882 <__aeabi_ddiv+0x236>
 800180a:	2302      	movs	r3, #2
 800180c:	2200      	movs	r2, #0
 800180e:	431e      	orrs	r6, r3
 8001810:	2102      	movs	r1, #2
 8001812:	e761      	b.n	80016d8 <__aeabi_ddiv+0x8c>
 8001814:	4643      	mov	r3, r8
 8001816:	4313      	orrs	r3, r2
 8001818:	469b      	mov	fp, r3
 800181a:	d037      	beq.n	800188c <__aeabi_ddiv+0x240>
 800181c:	4643      	mov	r3, r8
 800181e:	2b00      	cmp	r3, #0
 8001820:	d100      	bne.n	8001824 <__aeabi_ddiv+0x1d8>
 8001822:	e162      	b.n	8001aea <__aeabi_ddiv+0x49e>
 8001824:	4640      	mov	r0, r8
 8001826:	f001 fa69 	bl	8002cfc <__clzsi2>
 800182a:	0003      	movs	r3, r0
 800182c:	3b0b      	subs	r3, #11
 800182e:	2b1c      	cmp	r3, #28
 8001830:	dd00      	ble.n	8001834 <__aeabi_ddiv+0x1e8>
 8001832:	e153      	b.n	8001adc <__aeabi_ddiv+0x490>
 8001834:	0002      	movs	r2, r0
 8001836:	4641      	mov	r1, r8
 8001838:	3a08      	subs	r2, #8
 800183a:	4091      	lsls	r1, r2
 800183c:	4688      	mov	r8, r1
 800183e:	211d      	movs	r1, #29
 8001840:	1acb      	subs	r3, r1, r3
 8001842:	4651      	mov	r1, sl
 8001844:	40d9      	lsrs	r1, r3
 8001846:	000b      	movs	r3, r1
 8001848:	4641      	mov	r1, r8
 800184a:	430b      	orrs	r3, r1
 800184c:	469b      	mov	fp, r3
 800184e:	4653      	mov	r3, sl
 8001850:	4093      	lsls	r3, r2
 8001852:	001a      	movs	r2, r3
 8001854:	9b00      	ldr	r3, [sp, #0]
 8001856:	4925      	ldr	r1, [pc, #148]	; (80018ec <__aeabi_ddiv+0x2a0>)
 8001858:	469c      	mov	ip, r3
 800185a:	4460      	add	r0, ip
 800185c:	0003      	movs	r3, r0
 800185e:	468c      	mov	ip, r1
 8001860:	4463      	add	r3, ip
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	2100      	movs	r1, #0
 8001866:	e737      	b.n	80016d8 <__aeabi_ddiv+0x8c>
 8001868:	2303      	movs	r3, #3
 800186a:	46b1      	mov	r9, r6
 800186c:	9000      	str	r0, [sp, #0]
 800186e:	260c      	movs	r6, #12
 8001870:	9302      	str	r3, [sp, #8]
 8001872:	e711      	b.n	8001698 <__aeabi_ddiv+0x4c>
 8001874:	2300      	movs	r3, #0
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	3301      	adds	r3, #1
 800187a:	2604      	movs	r6, #4
 800187c:	2700      	movs	r7, #0
 800187e:	9302      	str	r3, [sp, #8]
 8001880:	e70a      	b.n	8001698 <__aeabi_ddiv+0x4c>
 8001882:	2303      	movs	r3, #3
 8001884:	46c3      	mov	fp, r8
 8001886:	431e      	orrs	r6, r3
 8001888:	2103      	movs	r1, #3
 800188a:	e725      	b.n	80016d8 <__aeabi_ddiv+0x8c>
 800188c:	3301      	adds	r3, #1
 800188e:	431e      	orrs	r6, r3
 8001890:	2200      	movs	r2, #0
 8001892:	2101      	movs	r1, #1
 8001894:	e720      	b.n	80016d8 <__aeabi_ddiv+0x8c>
 8001896:	2300      	movs	r3, #0
 8001898:	469a      	mov	sl, r3
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	2700      	movs	r7, #0
 800189e:	031b      	lsls	r3, r3, #12
 80018a0:	4a09      	ldr	r2, [pc, #36]	; (80018c8 <__aeabi_ddiv+0x27c>)
 80018a2:	e761      	b.n	8001768 <__aeabi_ddiv+0x11c>
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	4649      	mov	r1, r9
 80018a8:	031b      	lsls	r3, r3, #12
 80018aa:	4219      	tst	r1, r3
 80018ac:	d100      	bne.n	80018b0 <__aeabi_ddiv+0x264>
 80018ae:	e0e2      	b.n	8001a76 <__aeabi_ddiv+0x42a>
 80018b0:	4659      	mov	r1, fp
 80018b2:	4219      	tst	r1, r3
 80018b4:	d000      	beq.n	80018b8 <__aeabi_ddiv+0x26c>
 80018b6:	e0de      	b.n	8001a76 <__aeabi_ddiv+0x42a>
 80018b8:	430b      	orrs	r3, r1
 80018ba:	031b      	lsls	r3, r3, #12
 80018bc:	0017      	movs	r7, r2
 80018be:	0b1b      	lsrs	r3, r3, #12
 80018c0:	46a2      	mov	sl, r4
 80018c2:	4a01      	ldr	r2, [pc, #4]	; (80018c8 <__aeabi_ddiv+0x27c>)
 80018c4:	e750      	b.n	8001768 <__aeabi_ddiv+0x11c>
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	000007ff 	.word	0x000007ff
 80018cc:	fffffc01 	.word	0xfffffc01
 80018d0:	0800ebac 	.word	0x0800ebac
 80018d4:	000003ff 	.word	0x000003ff
 80018d8:	feffffff 	.word	0xfeffffff
 80018dc:	000007fe 	.word	0x000007fe
 80018e0:	800fffff 	.word	0x800fffff
 80018e4:	fffffc0d 	.word	0xfffffc0d
 80018e8:	fffff801 	.word	0xfffff801
 80018ec:	000003f3 	.word	0x000003f3
 80018f0:	45d9      	cmp	r9, fp
 80018f2:	d900      	bls.n	80018f6 <__aeabi_ddiv+0x2aa>
 80018f4:	e0cb      	b.n	8001a8e <__aeabi_ddiv+0x442>
 80018f6:	d100      	bne.n	80018fa <__aeabi_ddiv+0x2ae>
 80018f8:	e0c6      	b.n	8001a88 <__aeabi_ddiv+0x43c>
 80018fa:	003c      	movs	r4, r7
 80018fc:	4648      	mov	r0, r9
 80018fe:	2700      	movs	r7, #0
 8001900:	9b00      	ldr	r3, [sp, #0]
 8001902:	3b01      	subs	r3, #1
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	465b      	mov	r3, fp
 8001908:	0e16      	lsrs	r6, r2, #24
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	431e      	orrs	r6, r3
 800190e:	0213      	lsls	r3, r2, #8
 8001910:	4698      	mov	r8, r3
 8001912:	0433      	lsls	r3, r6, #16
 8001914:	0c1b      	lsrs	r3, r3, #16
 8001916:	4699      	mov	r9, r3
 8001918:	0c31      	lsrs	r1, r6, #16
 800191a:	9101      	str	r1, [sp, #4]
 800191c:	f7fe fc90 	bl	8000240 <__aeabi_uidivmod>
 8001920:	464a      	mov	r2, r9
 8001922:	4342      	muls	r2, r0
 8001924:	040b      	lsls	r3, r1, #16
 8001926:	0c21      	lsrs	r1, r4, #16
 8001928:	0005      	movs	r5, r0
 800192a:	4319      	orrs	r1, r3
 800192c:	428a      	cmp	r2, r1
 800192e:	d907      	bls.n	8001940 <__aeabi_ddiv+0x2f4>
 8001930:	1989      	adds	r1, r1, r6
 8001932:	3d01      	subs	r5, #1
 8001934:	428e      	cmp	r6, r1
 8001936:	d803      	bhi.n	8001940 <__aeabi_ddiv+0x2f4>
 8001938:	428a      	cmp	r2, r1
 800193a:	d901      	bls.n	8001940 <__aeabi_ddiv+0x2f4>
 800193c:	1e85      	subs	r5, r0, #2
 800193e:	1989      	adds	r1, r1, r6
 8001940:	1a88      	subs	r0, r1, r2
 8001942:	9901      	ldr	r1, [sp, #4]
 8001944:	f7fe fc7c 	bl	8000240 <__aeabi_uidivmod>
 8001948:	0409      	lsls	r1, r1, #16
 800194a:	468c      	mov	ip, r1
 800194c:	464a      	mov	r2, r9
 800194e:	0421      	lsls	r1, r4, #16
 8001950:	4664      	mov	r4, ip
 8001952:	4342      	muls	r2, r0
 8001954:	0c09      	lsrs	r1, r1, #16
 8001956:	0003      	movs	r3, r0
 8001958:	4321      	orrs	r1, r4
 800195a:	428a      	cmp	r2, r1
 800195c:	d904      	bls.n	8001968 <__aeabi_ddiv+0x31c>
 800195e:	1989      	adds	r1, r1, r6
 8001960:	3b01      	subs	r3, #1
 8001962:	428e      	cmp	r6, r1
 8001964:	d800      	bhi.n	8001968 <__aeabi_ddiv+0x31c>
 8001966:	e0f1      	b.n	8001b4c <__aeabi_ddiv+0x500>
 8001968:	042d      	lsls	r5, r5, #16
 800196a:	431d      	orrs	r5, r3
 800196c:	46ab      	mov	fp, r5
 800196e:	4643      	mov	r3, r8
 8001970:	1a89      	subs	r1, r1, r2
 8001972:	4642      	mov	r2, r8
 8001974:	0c28      	lsrs	r0, r5, #16
 8001976:	0412      	lsls	r2, r2, #16
 8001978:	0c1d      	lsrs	r5, r3, #16
 800197a:	465b      	mov	r3, fp
 800197c:	0c14      	lsrs	r4, r2, #16
 800197e:	0022      	movs	r2, r4
 8001980:	041b      	lsls	r3, r3, #16
 8001982:	0c1b      	lsrs	r3, r3, #16
 8001984:	435a      	muls	r2, r3
 8001986:	9403      	str	r4, [sp, #12]
 8001988:	436b      	muls	r3, r5
 800198a:	4344      	muls	r4, r0
 800198c:	9502      	str	r5, [sp, #8]
 800198e:	4368      	muls	r0, r5
 8001990:	191b      	adds	r3, r3, r4
 8001992:	0c15      	lsrs	r5, r2, #16
 8001994:	18eb      	adds	r3, r5, r3
 8001996:	429c      	cmp	r4, r3
 8001998:	d903      	bls.n	80019a2 <__aeabi_ddiv+0x356>
 800199a:	2480      	movs	r4, #128	; 0x80
 800199c:	0264      	lsls	r4, r4, #9
 800199e:	46a4      	mov	ip, r4
 80019a0:	4460      	add	r0, ip
 80019a2:	0c1c      	lsrs	r4, r3, #16
 80019a4:	0415      	lsls	r5, r2, #16
 80019a6:	041b      	lsls	r3, r3, #16
 80019a8:	0c2d      	lsrs	r5, r5, #16
 80019aa:	1820      	adds	r0, r4, r0
 80019ac:	195d      	adds	r5, r3, r5
 80019ae:	4281      	cmp	r1, r0
 80019b0:	d377      	bcc.n	8001aa2 <__aeabi_ddiv+0x456>
 80019b2:	d073      	beq.n	8001a9c <__aeabi_ddiv+0x450>
 80019b4:	1a0c      	subs	r4, r1, r0
 80019b6:	4aa2      	ldr	r2, [pc, #648]	; (8001c40 <__aeabi_ddiv+0x5f4>)
 80019b8:	1b7d      	subs	r5, r7, r5
 80019ba:	42af      	cmp	r7, r5
 80019bc:	41bf      	sbcs	r7, r7
 80019be:	4694      	mov	ip, r2
 80019c0:	9b00      	ldr	r3, [sp, #0]
 80019c2:	427f      	negs	r7, r7
 80019c4:	4463      	add	r3, ip
 80019c6:	1be0      	subs	r0, r4, r7
 80019c8:	001c      	movs	r4, r3
 80019ca:	4286      	cmp	r6, r0
 80019cc:	d100      	bne.n	80019d0 <__aeabi_ddiv+0x384>
 80019ce:	e0db      	b.n	8001b88 <__aeabi_ddiv+0x53c>
 80019d0:	9901      	ldr	r1, [sp, #4]
 80019d2:	f7fe fc35 	bl	8000240 <__aeabi_uidivmod>
 80019d6:	464a      	mov	r2, r9
 80019d8:	4342      	muls	r2, r0
 80019da:	040b      	lsls	r3, r1, #16
 80019dc:	0c29      	lsrs	r1, r5, #16
 80019de:	0007      	movs	r7, r0
 80019e0:	4319      	orrs	r1, r3
 80019e2:	428a      	cmp	r2, r1
 80019e4:	d907      	bls.n	80019f6 <__aeabi_ddiv+0x3aa>
 80019e6:	1989      	adds	r1, r1, r6
 80019e8:	3f01      	subs	r7, #1
 80019ea:	428e      	cmp	r6, r1
 80019ec:	d803      	bhi.n	80019f6 <__aeabi_ddiv+0x3aa>
 80019ee:	428a      	cmp	r2, r1
 80019f0:	d901      	bls.n	80019f6 <__aeabi_ddiv+0x3aa>
 80019f2:	1e87      	subs	r7, r0, #2
 80019f4:	1989      	adds	r1, r1, r6
 80019f6:	1a88      	subs	r0, r1, r2
 80019f8:	9901      	ldr	r1, [sp, #4]
 80019fa:	f7fe fc21 	bl	8000240 <__aeabi_uidivmod>
 80019fe:	0409      	lsls	r1, r1, #16
 8001a00:	464a      	mov	r2, r9
 8001a02:	4689      	mov	r9, r1
 8001a04:	0429      	lsls	r1, r5, #16
 8001a06:	464d      	mov	r5, r9
 8001a08:	4342      	muls	r2, r0
 8001a0a:	0c09      	lsrs	r1, r1, #16
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	4329      	orrs	r1, r5
 8001a10:	428a      	cmp	r2, r1
 8001a12:	d907      	bls.n	8001a24 <__aeabi_ddiv+0x3d8>
 8001a14:	1989      	adds	r1, r1, r6
 8001a16:	3b01      	subs	r3, #1
 8001a18:	428e      	cmp	r6, r1
 8001a1a:	d803      	bhi.n	8001a24 <__aeabi_ddiv+0x3d8>
 8001a1c:	428a      	cmp	r2, r1
 8001a1e:	d901      	bls.n	8001a24 <__aeabi_ddiv+0x3d8>
 8001a20:	1e83      	subs	r3, r0, #2
 8001a22:	1989      	adds	r1, r1, r6
 8001a24:	043f      	lsls	r7, r7, #16
 8001a26:	1a89      	subs	r1, r1, r2
 8001a28:	003a      	movs	r2, r7
 8001a2a:	9f03      	ldr	r7, [sp, #12]
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	0038      	movs	r0, r7
 8001a30:	0413      	lsls	r3, r2, #16
 8001a32:	0c1b      	lsrs	r3, r3, #16
 8001a34:	4358      	muls	r0, r3
 8001a36:	4681      	mov	r9, r0
 8001a38:	9802      	ldr	r0, [sp, #8]
 8001a3a:	0c15      	lsrs	r5, r2, #16
 8001a3c:	436f      	muls	r7, r5
 8001a3e:	4343      	muls	r3, r0
 8001a40:	4345      	muls	r5, r0
 8001a42:	4648      	mov	r0, r9
 8001a44:	0c00      	lsrs	r0, r0, #16
 8001a46:	4684      	mov	ip, r0
 8001a48:	19db      	adds	r3, r3, r7
 8001a4a:	4463      	add	r3, ip
 8001a4c:	429f      	cmp	r7, r3
 8001a4e:	d903      	bls.n	8001a58 <__aeabi_ddiv+0x40c>
 8001a50:	2080      	movs	r0, #128	; 0x80
 8001a52:	0240      	lsls	r0, r0, #9
 8001a54:	4684      	mov	ip, r0
 8001a56:	4465      	add	r5, ip
 8001a58:	4648      	mov	r0, r9
 8001a5a:	0c1f      	lsrs	r7, r3, #16
 8001a5c:	0400      	lsls	r0, r0, #16
 8001a5e:	041b      	lsls	r3, r3, #16
 8001a60:	0c00      	lsrs	r0, r0, #16
 8001a62:	197d      	adds	r5, r7, r5
 8001a64:	1818      	adds	r0, r3, r0
 8001a66:	42a9      	cmp	r1, r5
 8001a68:	d200      	bcs.n	8001a6c <__aeabi_ddiv+0x420>
 8001a6a:	e084      	b.n	8001b76 <__aeabi_ddiv+0x52a>
 8001a6c:	d100      	bne.n	8001a70 <__aeabi_ddiv+0x424>
 8001a6e:	e07f      	b.n	8001b70 <__aeabi_ddiv+0x524>
 8001a70:	2301      	movs	r3, #1
 8001a72:	431a      	orrs	r2, r3
 8001a74:	e657      	b.n	8001726 <__aeabi_ddiv+0xda>
 8001a76:	2380      	movs	r3, #128	; 0x80
 8001a78:	464a      	mov	r2, r9
 8001a7a:	031b      	lsls	r3, r3, #12
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	031b      	lsls	r3, r3, #12
 8001a80:	0b1b      	lsrs	r3, r3, #12
 8001a82:	46aa      	mov	sl, r5
 8001a84:	4a6f      	ldr	r2, [pc, #444]	; (8001c44 <__aeabi_ddiv+0x5f8>)
 8001a86:	e66f      	b.n	8001768 <__aeabi_ddiv+0x11c>
 8001a88:	42ba      	cmp	r2, r7
 8001a8a:	d900      	bls.n	8001a8e <__aeabi_ddiv+0x442>
 8001a8c:	e735      	b.n	80018fa <__aeabi_ddiv+0x2ae>
 8001a8e:	464b      	mov	r3, r9
 8001a90:	07dc      	lsls	r4, r3, #31
 8001a92:	0858      	lsrs	r0, r3, #1
 8001a94:	087b      	lsrs	r3, r7, #1
 8001a96:	431c      	orrs	r4, r3
 8001a98:	07ff      	lsls	r7, r7, #31
 8001a9a:	e734      	b.n	8001906 <__aeabi_ddiv+0x2ba>
 8001a9c:	2400      	movs	r4, #0
 8001a9e:	42af      	cmp	r7, r5
 8001aa0:	d289      	bcs.n	80019b6 <__aeabi_ddiv+0x36a>
 8001aa2:	4447      	add	r7, r8
 8001aa4:	4547      	cmp	r7, r8
 8001aa6:	41a4      	sbcs	r4, r4
 8001aa8:	465b      	mov	r3, fp
 8001aaa:	4264      	negs	r4, r4
 8001aac:	19a4      	adds	r4, r4, r6
 8001aae:	1864      	adds	r4, r4, r1
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	42a6      	cmp	r6, r4
 8001ab4:	d21e      	bcs.n	8001af4 <__aeabi_ddiv+0x4a8>
 8001ab6:	42a0      	cmp	r0, r4
 8001ab8:	d86d      	bhi.n	8001b96 <__aeabi_ddiv+0x54a>
 8001aba:	d100      	bne.n	8001abe <__aeabi_ddiv+0x472>
 8001abc:	e0b6      	b.n	8001c2c <__aeabi_ddiv+0x5e0>
 8001abe:	1a24      	subs	r4, r4, r0
 8001ac0:	469b      	mov	fp, r3
 8001ac2:	e778      	b.n	80019b6 <__aeabi_ddiv+0x36a>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	465a      	mov	r2, fp
 8001ac8:	3b28      	subs	r3, #40	; 0x28
 8001aca:	409a      	lsls	r2, r3
 8001acc:	2700      	movs	r7, #0
 8001ace:	4691      	mov	r9, r2
 8001ad0:	e688      	b.n	80017e4 <__aeabi_ddiv+0x198>
 8001ad2:	4658      	mov	r0, fp
 8001ad4:	f001 f912 	bl	8002cfc <__clzsi2>
 8001ad8:	3020      	adds	r0, #32
 8001ada:	e672      	b.n	80017c2 <__aeabi_ddiv+0x176>
 8001adc:	0003      	movs	r3, r0
 8001ade:	4652      	mov	r2, sl
 8001ae0:	3b28      	subs	r3, #40	; 0x28
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	4693      	mov	fp, r2
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	e6b4      	b.n	8001854 <__aeabi_ddiv+0x208>
 8001aea:	4650      	mov	r0, sl
 8001aec:	f001 f906 	bl	8002cfc <__clzsi2>
 8001af0:	3020      	adds	r0, #32
 8001af2:	e69a      	b.n	800182a <__aeabi_ddiv+0x1de>
 8001af4:	42a6      	cmp	r6, r4
 8001af6:	d1e2      	bne.n	8001abe <__aeabi_ddiv+0x472>
 8001af8:	45b8      	cmp	r8, r7
 8001afa:	d9dc      	bls.n	8001ab6 <__aeabi_ddiv+0x46a>
 8001afc:	1a34      	subs	r4, r6, r0
 8001afe:	469b      	mov	fp, r3
 8001b00:	e759      	b.n	80019b6 <__aeabi_ddiv+0x36a>
 8001b02:	2b1f      	cmp	r3, #31
 8001b04:	dc65      	bgt.n	8001bd2 <__aeabi_ddiv+0x586>
 8001b06:	4c50      	ldr	r4, [pc, #320]	; (8001c48 <__aeabi_ddiv+0x5fc>)
 8001b08:	9900      	ldr	r1, [sp, #0]
 8001b0a:	46a4      	mov	ip, r4
 8001b0c:	465c      	mov	r4, fp
 8001b0e:	4461      	add	r1, ip
 8001b10:	0008      	movs	r0, r1
 8001b12:	408c      	lsls	r4, r1
 8001b14:	0011      	movs	r1, r2
 8001b16:	4082      	lsls	r2, r0
 8001b18:	40d9      	lsrs	r1, r3
 8001b1a:	1e50      	subs	r0, r2, #1
 8001b1c:	4182      	sbcs	r2, r0
 8001b1e:	430c      	orrs	r4, r1
 8001b20:	4314      	orrs	r4, r2
 8001b22:	465a      	mov	r2, fp
 8001b24:	40da      	lsrs	r2, r3
 8001b26:	0013      	movs	r3, r2
 8001b28:	0762      	lsls	r2, r4, #29
 8001b2a:	d009      	beq.n	8001b40 <__aeabi_ddiv+0x4f4>
 8001b2c:	220f      	movs	r2, #15
 8001b2e:	4022      	ands	r2, r4
 8001b30:	2a04      	cmp	r2, #4
 8001b32:	d005      	beq.n	8001b40 <__aeabi_ddiv+0x4f4>
 8001b34:	0022      	movs	r2, r4
 8001b36:	1d14      	adds	r4, r2, #4
 8001b38:	4294      	cmp	r4, r2
 8001b3a:	4189      	sbcs	r1, r1
 8001b3c:	4249      	negs	r1, r1
 8001b3e:	185b      	adds	r3, r3, r1
 8001b40:	021a      	lsls	r2, r3, #8
 8001b42:	d562      	bpl.n	8001c0a <__aeabi_ddiv+0x5be>
 8001b44:	2201      	movs	r2, #1
 8001b46:	2300      	movs	r3, #0
 8001b48:	2700      	movs	r7, #0
 8001b4a:	e60d      	b.n	8001768 <__aeabi_ddiv+0x11c>
 8001b4c:	428a      	cmp	r2, r1
 8001b4e:	d800      	bhi.n	8001b52 <__aeabi_ddiv+0x506>
 8001b50:	e70a      	b.n	8001968 <__aeabi_ddiv+0x31c>
 8001b52:	1e83      	subs	r3, r0, #2
 8001b54:	1989      	adds	r1, r1, r6
 8001b56:	e707      	b.n	8001968 <__aeabi_ddiv+0x31c>
 8001b58:	230f      	movs	r3, #15
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d100      	bne.n	8001b62 <__aeabi_ddiv+0x516>
 8001b60:	e5e6      	b.n	8001730 <__aeabi_ddiv+0xe4>
 8001b62:	1d17      	adds	r7, r2, #4
 8001b64:	4297      	cmp	r7, r2
 8001b66:	4192      	sbcs	r2, r2
 8001b68:	4253      	negs	r3, r2
 8001b6a:	449b      	add	fp, r3
 8001b6c:	08fa      	lsrs	r2, r7, #3
 8001b6e:	e5e0      	b.n	8001732 <__aeabi_ddiv+0xe6>
 8001b70:	2800      	cmp	r0, #0
 8001b72:	d100      	bne.n	8001b76 <__aeabi_ddiv+0x52a>
 8001b74:	e5d7      	b.n	8001726 <__aeabi_ddiv+0xda>
 8001b76:	1871      	adds	r1, r6, r1
 8001b78:	1e53      	subs	r3, r2, #1
 8001b7a:	42b1      	cmp	r1, r6
 8001b7c:	d327      	bcc.n	8001bce <__aeabi_ddiv+0x582>
 8001b7e:	42a9      	cmp	r1, r5
 8001b80:	d315      	bcc.n	8001bae <__aeabi_ddiv+0x562>
 8001b82:	d058      	beq.n	8001c36 <__aeabi_ddiv+0x5ea>
 8001b84:	001a      	movs	r2, r3
 8001b86:	e773      	b.n	8001a70 <__aeabi_ddiv+0x424>
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	dc00      	bgt.n	8001b8e <__aeabi_ddiv+0x542>
 8001b8c:	e604      	b.n	8001798 <__aeabi_ddiv+0x14c>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	2200      	movs	r2, #0
 8001b92:	449b      	add	fp, r3
 8001b94:	e5cd      	b.n	8001732 <__aeabi_ddiv+0xe6>
 8001b96:	2302      	movs	r3, #2
 8001b98:	4447      	add	r7, r8
 8001b9a:	4547      	cmp	r7, r8
 8001b9c:	4189      	sbcs	r1, r1
 8001b9e:	425b      	negs	r3, r3
 8001ba0:	469c      	mov	ip, r3
 8001ba2:	4249      	negs	r1, r1
 8001ba4:	1989      	adds	r1, r1, r6
 8001ba6:	190c      	adds	r4, r1, r4
 8001ba8:	44e3      	add	fp, ip
 8001baa:	1a24      	subs	r4, r4, r0
 8001bac:	e703      	b.n	80019b6 <__aeabi_ddiv+0x36a>
 8001bae:	4643      	mov	r3, r8
 8001bb0:	005f      	lsls	r7, r3, #1
 8001bb2:	4547      	cmp	r7, r8
 8001bb4:	419b      	sbcs	r3, r3
 8001bb6:	46b8      	mov	r8, r7
 8001bb8:	425b      	negs	r3, r3
 8001bba:	199e      	adds	r6, r3, r6
 8001bbc:	3a02      	subs	r2, #2
 8001bbe:	1989      	adds	r1, r1, r6
 8001bc0:	42a9      	cmp	r1, r5
 8001bc2:	d000      	beq.n	8001bc6 <__aeabi_ddiv+0x57a>
 8001bc4:	e754      	b.n	8001a70 <__aeabi_ddiv+0x424>
 8001bc6:	4540      	cmp	r0, r8
 8001bc8:	d000      	beq.n	8001bcc <__aeabi_ddiv+0x580>
 8001bca:	e751      	b.n	8001a70 <__aeabi_ddiv+0x424>
 8001bcc:	e5ab      	b.n	8001726 <__aeabi_ddiv+0xda>
 8001bce:	001a      	movs	r2, r3
 8001bd0:	e7f6      	b.n	8001bc0 <__aeabi_ddiv+0x574>
 8001bd2:	211f      	movs	r1, #31
 8001bd4:	465f      	mov	r7, fp
 8001bd6:	4249      	negs	r1, r1
 8001bd8:	1b0c      	subs	r4, r1, r4
 8001bda:	40e7      	lsrs	r7, r4
 8001bdc:	2b20      	cmp	r3, #32
 8001bde:	d007      	beq.n	8001bf0 <__aeabi_ddiv+0x5a4>
 8001be0:	491a      	ldr	r1, [pc, #104]	; (8001c4c <__aeabi_ddiv+0x600>)
 8001be2:	9b00      	ldr	r3, [sp, #0]
 8001be4:	468c      	mov	ip, r1
 8001be6:	4463      	add	r3, ip
 8001be8:	0018      	movs	r0, r3
 8001bea:	465b      	mov	r3, fp
 8001bec:	4083      	lsls	r3, r0
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	1e50      	subs	r0, r2, #1
 8001bf2:	4182      	sbcs	r2, r0
 8001bf4:	433a      	orrs	r2, r7
 8001bf6:	2707      	movs	r7, #7
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	4017      	ands	r7, r2
 8001bfc:	d009      	beq.n	8001c12 <__aeabi_ddiv+0x5c6>
 8001bfe:	210f      	movs	r1, #15
 8001c00:	2300      	movs	r3, #0
 8001c02:	4011      	ands	r1, r2
 8001c04:	0014      	movs	r4, r2
 8001c06:	2904      	cmp	r1, #4
 8001c08:	d195      	bne.n	8001b36 <__aeabi_ddiv+0x4ea>
 8001c0a:	0022      	movs	r2, r4
 8001c0c:	075f      	lsls	r7, r3, #29
 8001c0e:	025b      	lsls	r3, r3, #9
 8001c10:	0b1b      	lsrs	r3, r3, #12
 8001c12:	08d2      	lsrs	r2, r2, #3
 8001c14:	4317      	orrs	r7, r2
 8001c16:	2200      	movs	r2, #0
 8001c18:	e5a6      	b.n	8001768 <__aeabi_ddiv+0x11c>
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	4659      	mov	r1, fp
 8001c1e:	031b      	lsls	r3, r3, #12
 8001c20:	430b      	orrs	r3, r1
 8001c22:	031b      	lsls	r3, r3, #12
 8001c24:	0017      	movs	r7, r2
 8001c26:	0b1b      	lsrs	r3, r3, #12
 8001c28:	4a06      	ldr	r2, [pc, #24]	; (8001c44 <__aeabi_ddiv+0x5f8>)
 8001c2a:	e59d      	b.n	8001768 <__aeabi_ddiv+0x11c>
 8001c2c:	42bd      	cmp	r5, r7
 8001c2e:	d8b2      	bhi.n	8001b96 <__aeabi_ddiv+0x54a>
 8001c30:	469b      	mov	fp, r3
 8001c32:	2400      	movs	r4, #0
 8001c34:	e6bf      	b.n	80019b6 <__aeabi_ddiv+0x36a>
 8001c36:	4580      	cmp	r8, r0
 8001c38:	d3b9      	bcc.n	8001bae <__aeabi_ddiv+0x562>
 8001c3a:	001a      	movs	r2, r3
 8001c3c:	e7c3      	b.n	8001bc6 <__aeabi_ddiv+0x57a>
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	000003ff 	.word	0x000003ff
 8001c44:	000007ff 	.word	0x000007ff
 8001c48:	0000041e 	.word	0x0000041e
 8001c4c:	0000043e 	.word	0x0000043e

08001c50 <__eqdf2>:
 8001c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c52:	464f      	mov	r7, r9
 8001c54:	4646      	mov	r6, r8
 8001c56:	46d6      	mov	lr, sl
 8001c58:	4684      	mov	ip, r0
 8001c5a:	b5c0      	push	{r6, r7, lr}
 8001c5c:	4680      	mov	r8, r0
 8001c5e:	4e19      	ldr	r6, [pc, #100]	; (8001cc4 <__eqdf2+0x74>)
 8001c60:	0318      	lsls	r0, r3, #12
 8001c62:	030f      	lsls	r7, r1, #12
 8001c64:	004d      	lsls	r5, r1, #1
 8001c66:	0b00      	lsrs	r0, r0, #12
 8001c68:	005c      	lsls	r4, r3, #1
 8001c6a:	4682      	mov	sl, r0
 8001c6c:	0b3f      	lsrs	r7, r7, #12
 8001c6e:	0d6d      	lsrs	r5, r5, #21
 8001c70:	0fc9      	lsrs	r1, r1, #31
 8001c72:	4691      	mov	r9, r2
 8001c74:	0d64      	lsrs	r4, r4, #21
 8001c76:	0fdb      	lsrs	r3, r3, #31
 8001c78:	2001      	movs	r0, #1
 8001c7a:	42b5      	cmp	r5, r6
 8001c7c:	d00a      	beq.n	8001c94 <__eqdf2+0x44>
 8001c7e:	42b4      	cmp	r4, r6
 8001c80:	d003      	beq.n	8001c8a <__eqdf2+0x3a>
 8001c82:	42a5      	cmp	r5, r4
 8001c84:	d101      	bne.n	8001c8a <__eqdf2+0x3a>
 8001c86:	4557      	cmp	r7, sl
 8001c88:	d00c      	beq.n	8001ca4 <__eqdf2+0x54>
 8001c8a:	bc1c      	pop	{r2, r3, r4}
 8001c8c:	4690      	mov	r8, r2
 8001c8e:	4699      	mov	r9, r3
 8001c90:	46a2      	mov	sl, r4
 8001c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c94:	4666      	mov	r6, ip
 8001c96:	433e      	orrs	r6, r7
 8001c98:	d1f7      	bne.n	8001c8a <__eqdf2+0x3a>
 8001c9a:	42ac      	cmp	r4, r5
 8001c9c:	d1f5      	bne.n	8001c8a <__eqdf2+0x3a>
 8001c9e:	4654      	mov	r4, sl
 8001ca0:	4314      	orrs	r4, r2
 8001ca2:	d1f2      	bne.n	8001c8a <__eqdf2+0x3a>
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	45c8      	cmp	r8, r9
 8001ca8:	d1ef      	bne.n	8001c8a <__eqdf2+0x3a>
 8001caa:	4299      	cmp	r1, r3
 8001cac:	d007      	beq.n	8001cbe <__eqdf2+0x6e>
 8001cae:	2d00      	cmp	r5, #0
 8001cb0:	d1eb      	bne.n	8001c8a <__eqdf2+0x3a>
 8001cb2:	4663      	mov	r3, ip
 8001cb4:	431f      	orrs	r7, r3
 8001cb6:	0038      	movs	r0, r7
 8001cb8:	1e47      	subs	r7, r0, #1
 8001cba:	41b8      	sbcs	r0, r7
 8001cbc:	e7e5      	b.n	8001c8a <__eqdf2+0x3a>
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	e7e3      	b.n	8001c8a <__eqdf2+0x3a>
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	000007ff 	.word	0x000007ff

08001cc8 <__gedf2>:
 8001cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cca:	464f      	mov	r7, r9
 8001ccc:	4646      	mov	r6, r8
 8001cce:	46d6      	mov	lr, sl
 8001cd0:	004d      	lsls	r5, r1, #1
 8001cd2:	b5c0      	push	{r6, r7, lr}
 8001cd4:	030e      	lsls	r6, r1, #12
 8001cd6:	0fc9      	lsrs	r1, r1, #31
 8001cd8:	468a      	mov	sl, r1
 8001cda:	492c      	ldr	r1, [pc, #176]	; (8001d8c <__gedf2+0xc4>)
 8001cdc:	031f      	lsls	r7, r3, #12
 8001cde:	005c      	lsls	r4, r3, #1
 8001ce0:	4680      	mov	r8, r0
 8001ce2:	0b36      	lsrs	r6, r6, #12
 8001ce4:	0d6d      	lsrs	r5, r5, #21
 8001ce6:	4691      	mov	r9, r2
 8001ce8:	0b3f      	lsrs	r7, r7, #12
 8001cea:	0d64      	lsrs	r4, r4, #21
 8001cec:	0fdb      	lsrs	r3, r3, #31
 8001cee:	428d      	cmp	r5, r1
 8001cf0:	d01e      	beq.n	8001d30 <__gedf2+0x68>
 8001cf2:	428c      	cmp	r4, r1
 8001cf4:	d016      	beq.n	8001d24 <__gedf2+0x5c>
 8001cf6:	2d00      	cmp	r5, #0
 8001cf8:	d11e      	bne.n	8001d38 <__gedf2+0x70>
 8001cfa:	4330      	orrs	r0, r6
 8001cfc:	4684      	mov	ip, r0
 8001cfe:	2c00      	cmp	r4, #0
 8001d00:	d101      	bne.n	8001d06 <__gedf2+0x3e>
 8001d02:	433a      	orrs	r2, r7
 8001d04:	d023      	beq.n	8001d4e <__gedf2+0x86>
 8001d06:	4662      	mov	r2, ip
 8001d08:	2a00      	cmp	r2, #0
 8001d0a:	d01a      	beq.n	8001d42 <__gedf2+0x7a>
 8001d0c:	459a      	cmp	sl, r3
 8001d0e:	d029      	beq.n	8001d64 <__gedf2+0x9c>
 8001d10:	4651      	mov	r1, sl
 8001d12:	2002      	movs	r0, #2
 8001d14:	3901      	subs	r1, #1
 8001d16:	4008      	ands	r0, r1
 8001d18:	3801      	subs	r0, #1
 8001d1a:	bc1c      	pop	{r2, r3, r4}
 8001d1c:	4690      	mov	r8, r2
 8001d1e:	4699      	mov	r9, r3
 8001d20:	46a2      	mov	sl, r4
 8001d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d24:	0039      	movs	r1, r7
 8001d26:	4311      	orrs	r1, r2
 8001d28:	d0e5      	beq.n	8001cf6 <__gedf2+0x2e>
 8001d2a:	2002      	movs	r0, #2
 8001d2c:	4240      	negs	r0, r0
 8001d2e:	e7f4      	b.n	8001d1a <__gedf2+0x52>
 8001d30:	4330      	orrs	r0, r6
 8001d32:	d1fa      	bne.n	8001d2a <__gedf2+0x62>
 8001d34:	42ac      	cmp	r4, r5
 8001d36:	d00f      	beq.n	8001d58 <__gedf2+0x90>
 8001d38:	2c00      	cmp	r4, #0
 8001d3a:	d10f      	bne.n	8001d5c <__gedf2+0x94>
 8001d3c:	433a      	orrs	r2, r7
 8001d3e:	d0e7      	beq.n	8001d10 <__gedf2+0x48>
 8001d40:	e00c      	b.n	8001d5c <__gedf2+0x94>
 8001d42:	2201      	movs	r2, #1
 8001d44:	3b01      	subs	r3, #1
 8001d46:	4393      	bics	r3, r2
 8001d48:	0018      	movs	r0, r3
 8001d4a:	3001      	adds	r0, #1
 8001d4c:	e7e5      	b.n	8001d1a <__gedf2+0x52>
 8001d4e:	4663      	mov	r3, ip
 8001d50:	2000      	movs	r0, #0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0e1      	beq.n	8001d1a <__gedf2+0x52>
 8001d56:	e7db      	b.n	8001d10 <__gedf2+0x48>
 8001d58:	433a      	orrs	r2, r7
 8001d5a:	d1e6      	bne.n	8001d2a <__gedf2+0x62>
 8001d5c:	459a      	cmp	sl, r3
 8001d5e:	d1d7      	bne.n	8001d10 <__gedf2+0x48>
 8001d60:	42a5      	cmp	r5, r4
 8001d62:	dcd5      	bgt.n	8001d10 <__gedf2+0x48>
 8001d64:	42a5      	cmp	r5, r4
 8001d66:	db05      	blt.n	8001d74 <__gedf2+0xac>
 8001d68:	42be      	cmp	r6, r7
 8001d6a:	d8d1      	bhi.n	8001d10 <__gedf2+0x48>
 8001d6c:	d008      	beq.n	8001d80 <__gedf2+0xb8>
 8001d6e:	2000      	movs	r0, #0
 8001d70:	42be      	cmp	r6, r7
 8001d72:	d2d2      	bcs.n	8001d1a <__gedf2+0x52>
 8001d74:	4650      	mov	r0, sl
 8001d76:	2301      	movs	r3, #1
 8001d78:	3801      	subs	r0, #1
 8001d7a:	4398      	bics	r0, r3
 8001d7c:	3001      	adds	r0, #1
 8001d7e:	e7cc      	b.n	8001d1a <__gedf2+0x52>
 8001d80:	45c8      	cmp	r8, r9
 8001d82:	d8c5      	bhi.n	8001d10 <__gedf2+0x48>
 8001d84:	2000      	movs	r0, #0
 8001d86:	45c8      	cmp	r8, r9
 8001d88:	d3f4      	bcc.n	8001d74 <__gedf2+0xac>
 8001d8a:	e7c6      	b.n	8001d1a <__gedf2+0x52>
 8001d8c:	000007ff 	.word	0x000007ff

08001d90 <__ledf2>:
 8001d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d92:	464f      	mov	r7, r9
 8001d94:	4646      	mov	r6, r8
 8001d96:	46d6      	mov	lr, sl
 8001d98:	004d      	lsls	r5, r1, #1
 8001d9a:	b5c0      	push	{r6, r7, lr}
 8001d9c:	030e      	lsls	r6, r1, #12
 8001d9e:	0fc9      	lsrs	r1, r1, #31
 8001da0:	468a      	mov	sl, r1
 8001da2:	492e      	ldr	r1, [pc, #184]	; (8001e5c <__ledf2+0xcc>)
 8001da4:	031f      	lsls	r7, r3, #12
 8001da6:	005c      	lsls	r4, r3, #1
 8001da8:	4680      	mov	r8, r0
 8001daa:	0b36      	lsrs	r6, r6, #12
 8001dac:	0d6d      	lsrs	r5, r5, #21
 8001dae:	4691      	mov	r9, r2
 8001db0:	0b3f      	lsrs	r7, r7, #12
 8001db2:	0d64      	lsrs	r4, r4, #21
 8001db4:	0fdb      	lsrs	r3, r3, #31
 8001db6:	428d      	cmp	r5, r1
 8001db8:	d018      	beq.n	8001dec <__ledf2+0x5c>
 8001dba:	428c      	cmp	r4, r1
 8001dbc:	d011      	beq.n	8001de2 <__ledf2+0x52>
 8001dbe:	2d00      	cmp	r5, #0
 8001dc0:	d118      	bne.n	8001df4 <__ledf2+0x64>
 8001dc2:	4330      	orrs	r0, r6
 8001dc4:	4684      	mov	ip, r0
 8001dc6:	2c00      	cmp	r4, #0
 8001dc8:	d11e      	bne.n	8001e08 <__ledf2+0x78>
 8001dca:	433a      	orrs	r2, r7
 8001dcc:	d11c      	bne.n	8001e08 <__ledf2+0x78>
 8001dce:	4663      	mov	r3, ip
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d030      	beq.n	8001e38 <__ledf2+0xa8>
 8001dd6:	4651      	mov	r1, sl
 8001dd8:	2002      	movs	r0, #2
 8001dda:	3901      	subs	r1, #1
 8001ddc:	4008      	ands	r0, r1
 8001dde:	3801      	subs	r0, #1
 8001de0:	e02a      	b.n	8001e38 <__ledf2+0xa8>
 8001de2:	0039      	movs	r1, r7
 8001de4:	4311      	orrs	r1, r2
 8001de6:	d0ea      	beq.n	8001dbe <__ledf2+0x2e>
 8001de8:	2002      	movs	r0, #2
 8001dea:	e025      	b.n	8001e38 <__ledf2+0xa8>
 8001dec:	4330      	orrs	r0, r6
 8001dee:	d1fb      	bne.n	8001de8 <__ledf2+0x58>
 8001df0:	42ac      	cmp	r4, r5
 8001df2:	d026      	beq.n	8001e42 <__ledf2+0xb2>
 8001df4:	2c00      	cmp	r4, #0
 8001df6:	d126      	bne.n	8001e46 <__ledf2+0xb6>
 8001df8:	433a      	orrs	r2, r7
 8001dfa:	d124      	bne.n	8001e46 <__ledf2+0xb6>
 8001dfc:	4651      	mov	r1, sl
 8001dfe:	2002      	movs	r0, #2
 8001e00:	3901      	subs	r1, #1
 8001e02:	4008      	ands	r0, r1
 8001e04:	3801      	subs	r0, #1
 8001e06:	e017      	b.n	8001e38 <__ledf2+0xa8>
 8001e08:	4662      	mov	r2, ip
 8001e0a:	2a00      	cmp	r2, #0
 8001e0c:	d00f      	beq.n	8001e2e <__ledf2+0x9e>
 8001e0e:	459a      	cmp	sl, r3
 8001e10:	d1e1      	bne.n	8001dd6 <__ledf2+0x46>
 8001e12:	42a5      	cmp	r5, r4
 8001e14:	db05      	blt.n	8001e22 <__ledf2+0x92>
 8001e16:	42be      	cmp	r6, r7
 8001e18:	d8dd      	bhi.n	8001dd6 <__ledf2+0x46>
 8001e1a:	d019      	beq.n	8001e50 <__ledf2+0xc0>
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	42be      	cmp	r6, r7
 8001e20:	d20a      	bcs.n	8001e38 <__ledf2+0xa8>
 8001e22:	4650      	mov	r0, sl
 8001e24:	2301      	movs	r3, #1
 8001e26:	3801      	subs	r0, #1
 8001e28:	4398      	bics	r0, r3
 8001e2a:	3001      	adds	r0, #1
 8001e2c:	e004      	b.n	8001e38 <__ledf2+0xa8>
 8001e2e:	2201      	movs	r2, #1
 8001e30:	3b01      	subs	r3, #1
 8001e32:	4393      	bics	r3, r2
 8001e34:	0018      	movs	r0, r3
 8001e36:	3001      	adds	r0, #1
 8001e38:	bc1c      	pop	{r2, r3, r4}
 8001e3a:	4690      	mov	r8, r2
 8001e3c:	4699      	mov	r9, r3
 8001e3e:	46a2      	mov	sl, r4
 8001e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e42:	433a      	orrs	r2, r7
 8001e44:	d1d0      	bne.n	8001de8 <__ledf2+0x58>
 8001e46:	459a      	cmp	sl, r3
 8001e48:	d1c5      	bne.n	8001dd6 <__ledf2+0x46>
 8001e4a:	42a5      	cmp	r5, r4
 8001e4c:	dcc3      	bgt.n	8001dd6 <__ledf2+0x46>
 8001e4e:	e7e0      	b.n	8001e12 <__ledf2+0x82>
 8001e50:	45c8      	cmp	r8, r9
 8001e52:	d8c0      	bhi.n	8001dd6 <__ledf2+0x46>
 8001e54:	2000      	movs	r0, #0
 8001e56:	45c8      	cmp	r8, r9
 8001e58:	d3e3      	bcc.n	8001e22 <__ledf2+0x92>
 8001e5a:	e7ed      	b.n	8001e38 <__ledf2+0xa8>
 8001e5c:	000007ff 	.word	0x000007ff

08001e60 <__aeabi_dmul>:
 8001e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e62:	4657      	mov	r7, sl
 8001e64:	46de      	mov	lr, fp
 8001e66:	464e      	mov	r6, r9
 8001e68:	4645      	mov	r5, r8
 8001e6a:	b5e0      	push	{r5, r6, r7, lr}
 8001e6c:	4683      	mov	fp, r0
 8001e6e:	0006      	movs	r6, r0
 8001e70:	030f      	lsls	r7, r1, #12
 8001e72:	0048      	lsls	r0, r1, #1
 8001e74:	b087      	sub	sp, #28
 8001e76:	4692      	mov	sl, r2
 8001e78:	001d      	movs	r5, r3
 8001e7a:	0b3f      	lsrs	r7, r7, #12
 8001e7c:	0d40      	lsrs	r0, r0, #21
 8001e7e:	0fcc      	lsrs	r4, r1, #31
 8001e80:	2800      	cmp	r0, #0
 8001e82:	d100      	bne.n	8001e86 <__aeabi_dmul+0x26>
 8001e84:	e06f      	b.n	8001f66 <__aeabi_dmul+0x106>
 8001e86:	4bde      	ldr	r3, [pc, #888]	; (8002200 <__aeabi_dmul+0x3a0>)
 8001e88:	4298      	cmp	r0, r3
 8001e8a:	d038      	beq.n	8001efe <__aeabi_dmul+0x9e>
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	00ff      	lsls	r7, r7, #3
 8001e90:	041b      	lsls	r3, r3, #16
 8001e92:	431f      	orrs	r7, r3
 8001e94:	0f73      	lsrs	r3, r6, #29
 8001e96:	433b      	orrs	r3, r7
 8001e98:	9301      	str	r3, [sp, #4]
 8001e9a:	4bda      	ldr	r3, [pc, #872]	; (8002204 <__aeabi_dmul+0x3a4>)
 8001e9c:	2700      	movs	r7, #0
 8001e9e:	4699      	mov	r9, r3
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	469b      	mov	fp, r3
 8001ea4:	00f6      	lsls	r6, r6, #3
 8001ea6:	4481      	add	r9, r0
 8001ea8:	032b      	lsls	r3, r5, #12
 8001eaa:	0069      	lsls	r1, r5, #1
 8001eac:	0b1b      	lsrs	r3, r3, #12
 8001eae:	4652      	mov	r2, sl
 8001eb0:	4698      	mov	r8, r3
 8001eb2:	0d49      	lsrs	r1, r1, #21
 8001eb4:	0fed      	lsrs	r5, r5, #31
 8001eb6:	2900      	cmp	r1, #0
 8001eb8:	d100      	bne.n	8001ebc <__aeabi_dmul+0x5c>
 8001eba:	e085      	b.n	8001fc8 <__aeabi_dmul+0x168>
 8001ebc:	4bd0      	ldr	r3, [pc, #832]	; (8002200 <__aeabi_dmul+0x3a0>)
 8001ebe:	4299      	cmp	r1, r3
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_dmul+0x64>
 8001ec2:	e073      	b.n	8001fac <__aeabi_dmul+0x14c>
 8001ec4:	4643      	mov	r3, r8
 8001ec6:	00da      	lsls	r2, r3, #3
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	041b      	lsls	r3, r3, #16
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	4652      	mov	r2, sl
 8001ed0:	48cc      	ldr	r0, [pc, #816]	; (8002204 <__aeabi_dmul+0x3a4>)
 8001ed2:	0f52      	lsrs	r2, r2, #29
 8001ed4:	4684      	mov	ip, r0
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	4652      	mov	r2, sl
 8001eda:	2000      	movs	r0, #0
 8001edc:	4461      	add	r1, ip
 8001ede:	00d2      	lsls	r2, r2, #3
 8001ee0:	4489      	add	r9, r1
 8001ee2:	0021      	movs	r1, r4
 8001ee4:	4069      	eors	r1, r5
 8001ee6:	9100      	str	r1, [sp, #0]
 8001ee8:	468c      	mov	ip, r1
 8001eea:	2101      	movs	r1, #1
 8001eec:	4449      	add	r1, r9
 8001eee:	468a      	mov	sl, r1
 8001ef0:	2f0f      	cmp	r7, #15
 8001ef2:	d900      	bls.n	8001ef6 <__aeabi_dmul+0x96>
 8001ef4:	e090      	b.n	8002018 <__aeabi_dmul+0x1b8>
 8001ef6:	49c4      	ldr	r1, [pc, #784]	; (8002208 <__aeabi_dmul+0x3a8>)
 8001ef8:	00bf      	lsls	r7, r7, #2
 8001efa:	59cf      	ldr	r7, [r1, r7]
 8001efc:	46bf      	mov	pc, r7
 8001efe:	465b      	mov	r3, fp
 8001f00:	433b      	orrs	r3, r7
 8001f02:	9301      	str	r3, [sp, #4]
 8001f04:	d000      	beq.n	8001f08 <__aeabi_dmul+0xa8>
 8001f06:	e16a      	b.n	80021de <__aeabi_dmul+0x37e>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	2708      	movs	r7, #8
 8001f0c:	2600      	movs	r6, #0
 8001f0e:	4681      	mov	r9, r0
 8001f10:	469b      	mov	fp, r3
 8001f12:	e7c9      	b.n	8001ea8 <__aeabi_dmul+0x48>
 8001f14:	0032      	movs	r2, r6
 8001f16:	4658      	mov	r0, fp
 8001f18:	9b01      	ldr	r3, [sp, #4]
 8001f1a:	4661      	mov	r1, ip
 8001f1c:	9100      	str	r1, [sp, #0]
 8001f1e:	2802      	cmp	r0, #2
 8001f20:	d100      	bne.n	8001f24 <__aeabi_dmul+0xc4>
 8001f22:	e075      	b.n	8002010 <__aeabi_dmul+0x1b0>
 8001f24:	2803      	cmp	r0, #3
 8001f26:	d100      	bne.n	8001f2a <__aeabi_dmul+0xca>
 8001f28:	e1fe      	b.n	8002328 <__aeabi_dmul+0x4c8>
 8001f2a:	2801      	cmp	r0, #1
 8001f2c:	d000      	beq.n	8001f30 <__aeabi_dmul+0xd0>
 8001f2e:	e12c      	b.n	800218a <__aeabi_dmul+0x32a>
 8001f30:	2300      	movs	r3, #0
 8001f32:	2700      	movs	r7, #0
 8001f34:	2600      	movs	r6, #0
 8001f36:	2500      	movs	r5, #0
 8001f38:	033f      	lsls	r7, r7, #12
 8001f3a:	0d2a      	lsrs	r2, r5, #20
 8001f3c:	0b3f      	lsrs	r7, r7, #12
 8001f3e:	48b3      	ldr	r0, [pc, #716]	; (800220c <__aeabi_dmul+0x3ac>)
 8001f40:	0512      	lsls	r2, r2, #20
 8001f42:	433a      	orrs	r2, r7
 8001f44:	4002      	ands	r2, r0
 8001f46:	051b      	lsls	r3, r3, #20
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	9a00      	ldr	r2, [sp, #0]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	07d1      	lsls	r1, r2, #31
 8001f50:	085b      	lsrs	r3, r3, #1
 8001f52:	430b      	orrs	r3, r1
 8001f54:	0030      	movs	r0, r6
 8001f56:	0019      	movs	r1, r3
 8001f58:	b007      	add	sp, #28
 8001f5a:	bc3c      	pop	{r2, r3, r4, r5}
 8001f5c:	4690      	mov	r8, r2
 8001f5e:	4699      	mov	r9, r3
 8001f60:	46a2      	mov	sl, r4
 8001f62:	46ab      	mov	fp, r5
 8001f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f66:	465b      	mov	r3, fp
 8001f68:	433b      	orrs	r3, r7
 8001f6a:	9301      	str	r3, [sp, #4]
 8001f6c:	d100      	bne.n	8001f70 <__aeabi_dmul+0x110>
 8001f6e:	e12f      	b.n	80021d0 <__aeabi_dmul+0x370>
 8001f70:	2f00      	cmp	r7, #0
 8001f72:	d100      	bne.n	8001f76 <__aeabi_dmul+0x116>
 8001f74:	e1a5      	b.n	80022c2 <__aeabi_dmul+0x462>
 8001f76:	0038      	movs	r0, r7
 8001f78:	f000 fec0 	bl	8002cfc <__clzsi2>
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	3b0b      	subs	r3, #11
 8001f80:	2b1c      	cmp	r3, #28
 8001f82:	dd00      	ble.n	8001f86 <__aeabi_dmul+0x126>
 8001f84:	e196      	b.n	80022b4 <__aeabi_dmul+0x454>
 8001f86:	221d      	movs	r2, #29
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	465a      	mov	r2, fp
 8001f8c:	0001      	movs	r1, r0
 8001f8e:	40da      	lsrs	r2, r3
 8001f90:	465e      	mov	r6, fp
 8001f92:	3908      	subs	r1, #8
 8001f94:	408f      	lsls	r7, r1
 8001f96:	0013      	movs	r3, r2
 8001f98:	408e      	lsls	r6, r1
 8001f9a:	433b      	orrs	r3, r7
 8001f9c:	9301      	str	r3, [sp, #4]
 8001f9e:	4b9c      	ldr	r3, [pc, #624]	; (8002210 <__aeabi_dmul+0x3b0>)
 8001fa0:	2700      	movs	r7, #0
 8001fa2:	1a1b      	subs	r3, r3, r0
 8001fa4:	4699      	mov	r9, r3
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	469b      	mov	fp, r3
 8001faa:	e77d      	b.n	8001ea8 <__aeabi_dmul+0x48>
 8001fac:	4641      	mov	r1, r8
 8001fae:	4653      	mov	r3, sl
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	4993      	ldr	r1, [pc, #588]	; (8002200 <__aeabi_dmul+0x3a0>)
 8001fb4:	468c      	mov	ip, r1
 8001fb6:	44e1      	add	r9, ip
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d000      	beq.n	8001fbe <__aeabi_dmul+0x15e>
 8001fbc:	e11a      	b.n	80021f4 <__aeabi_dmul+0x394>
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	2002      	movs	r0, #2
 8001fc2:	4317      	orrs	r7, r2
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	e78c      	b.n	8001ee2 <__aeabi_dmul+0x82>
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	d100      	bne.n	8001fce <__aeabi_dmul+0x16e>
 8001fcc:	e10d      	b.n	80021ea <__aeabi_dmul+0x38a>
 8001fce:	4643      	mov	r3, r8
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d100      	bne.n	8001fd6 <__aeabi_dmul+0x176>
 8001fd4:	e181      	b.n	80022da <__aeabi_dmul+0x47a>
 8001fd6:	4640      	mov	r0, r8
 8001fd8:	f000 fe90 	bl	8002cfc <__clzsi2>
 8001fdc:	0002      	movs	r2, r0
 8001fde:	3a0b      	subs	r2, #11
 8001fe0:	2a1c      	cmp	r2, #28
 8001fe2:	dd00      	ble.n	8001fe6 <__aeabi_dmul+0x186>
 8001fe4:	e172      	b.n	80022cc <__aeabi_dmul+0x46c>
 8001fe6:	0001      	movs	r1, r0
 8001fe8:	4643      	mov	r3, r8
 8001fea:	3908      	subs	r1, #8
 8001fec:	408b      	lsls	r3, r1
 8001fee:	4698      	mov	r8, r3
 8001ff0:	231d      	movs	r3, #29
 8001ff2:	1a9a      	subs	r2, r3, r2
 8001ff4:	4653      	mov	r3, sl
 8001ff6:	40d3      	lsrs	r3, r2
 8001ff8:	001a      	movs	r2, r3
 8001ffa:	4643      	mov	r3, r8
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	4652      	mov	r2, sl
 8002000:	408a      	lsls	r2, r1
 8002002:	4649      	mov	r1, r9
 8002004:	1a08      	subs	r0, r1, r0
 8002006:	4982      	ldr	r1, [pc, #520]	; (8002210 <__aeabi_dmul+0x3b0>)
 8002008:	4689      	mov	r9, r1
 800200a:	4481      	add	r9, r0
 800200c:	2000      	movs	r0, #0
 800200e:	e768      	b.n	8001ee2 <__aeabi_dmul+0x82>
 8002010:	4b7b      	ldr	r3, [pc, #492]	; (8002200 <__aeabi_dmul+0x3a0>)
 8002012:	2700      	movs	r7, #0
 8002014:	2600      	movs	r6, #0
 8002016:	e78e      	b.n	8001f36 <__aeabi_dmul+0xd6>
 8002018:	0c14      	lsrs	r4, r2, #16
 800201a:	0412      	lsls	r2, r2, #16
 800201c:	0c12      	lsrs	r2, r2, #16
 800201e:	0011      	movs	r1, r2
 8002020:	0c37      	lsrs	r7, r6, #16
 8002022:	0436      	lsls	r6, r6, #16
 8002024:	0c35      	lsrs	r5, r6, #16
 8002026:	4379      	muls	r1, r7
 8002028:	0028      	movs	r0, r5
 800202a:	468c      	mov	ip, r1
 800202c:	002e      	movs	r6, r5
 800202e:	4360      	muls	r0, r4
 8002030:	4460      	add	r0, ip
 8002032:	4683      	mov	fp, r0
 8002034:	4356      	muls	r6, r2
 8002036:	0021      	movs	r1, r4
 8002038:	0c30      	lsrs	r0, r6, #16
 800203a:	4680      	mov	r8, r0
 800203c:	4658      	mov	r0, fp
 800203e:	4379      	muls	r1, r7
 8002040:	4440      	add	r0, r8
 8002042:	9102      	str	r1, [sp, #8]
 8002044:	4584      	cmp	ip, r0
 8002046:	d906      	bls.n	8002056 <__aeabi_dmul+0x1f6>
 8002048:	4688      	mov	r8, r1
 800204a:	2180      	movs	r1, #128	; 0x80
 800204c:	0249      	lsls	r1, r1, #9
 800204e:	468c      	mov	ip, r1
 8002050:	44e0      	add	r8, ip
 8002052:	4641      	mov	r1, r8
 8002054:	9102      	str	r1, [sp, #8]
 8002056:	0436      	lsls	r6, r6, #16
 8002058:	0c01      	lsrs	r1, r0, #16
 800205a:	0c36      	lsrs	r6, r6, #16
 800205c:	0400      	lsls	r0, r0, #16
 800205e:	468b      	mov	fp, r1
 8002060:	1981      	adds	r1, r0, r6
 8002062:	0c1e      	lsrs	r6, r3, #16
 8002064:	041b      	lsls	r3, r3, #16
 8002066:	0c1b      	lsrs	r3, r3, #16
 8002068:	9103      	str	r1, [sp, #12]
 800206a:	0019      	movs	r1, r3
 800206c:	4379      	muls	r1, r7
 800206e:	468c      	mov	ip, r1
 8002070:	0028      	movs	r0, r5
 8002072:	4375      	muls	r5, r6
 8002074:	4465      	add	r5, ip
 8002076:	46a8      	mov	r8, r5
 8002078:	4358      	muls	r0, r3
 800207a:	0c05      	lsrs	r5, r0, #16
 800207c:	4445      	add	r5, r8
 800207e:	4377      	muls	r7, r6
 8002080:	42a9      	cmp	r1, r5
 8002082:	d903      	bls.n	800208c <__aeabi_dmul+0x22c>
 8002084:	2180      	movs	r1, #128	; 0x80
 8002086:	0249      	lsls	r1, r1, #9
 8002088:	468c      	mov	ip, r1
 800208a:	4467      	add	r7, ip
 800208c:	0c29      	lsrs	r1, r5, #16
 800208e:	468c      	mov	ip, r1
 8002090:	0039      	movs	r1, r7
 8002092:	0400      	lsls	r0, r0, #16
 8002094:	0c00      	lsrs	r0, r0, #16
 8002096:	042d      	lsls	r5, r5, #16
 8002098:	182d      	adds	r5, r5, r0
 800209a:	4461      	add	r1, ip
 800209c:	44ab      	add	fp, r5
 800209e:	9105      	str	r1, [sp, #20]
 80020a0:	4659      	mov	r1, fp
 80020a2:	9104      	str	r1, [sp, #16]
 80020a4:	9901      	ldr	r1, [sp, #4]
 80020a6:	040f      	lsls	r7, r1, #16
 80020a8:	0c3f      	lsrs	r7, r7, #16
 80020aa:	0c08      	lsrs	r0, r1, #16
 80020ac:	0039      	movs	r1, r7
 80020ae:	4351      	muls	r1, r2
 80020b0:	4342      	muls	r2, r0
 80020b2:	4690      	mov	r8, r2
 80020b4:	0002      	movs	r2, r0
 80020b6:	468c      	mov	ip, r1
 80020b8:	0c09      	lsrs	r1, r1, #16
 80020ba:	468b      	mov	fp, r1
 80020bc:	4362      	muls	r2, r4
 80020be:	437c      	muls	r4, r7
 80020c0:	4444      	add	r4, r8
 80020c2:	445c      	add	r4, fp
 80020c4:	45a0      	cmp	r8, r4
 80020c6:	d903      	bls.n	80020d0 <__aeabi_dmul+0x270>
 80020c8:	2180      	movs	r1, #128	; 0x80
 80020ca:	0249      	lsls	r1, r1, #9
 80020cc:	4688      	mov	r8, r1
 80020ce:	4442      	add	r2, r8
 80020d0:	0c21      	lsrs	r1, r4, #16
 80020d2:	4688      	mov	r8, r1
 80020d4:	4661      	mov	r1, ip
 80020d6:	0409      	lsls	r1, r1, #16
 80020d8:	0c09      	lsrs	r1, r1, #16
 80020da:	468c      	mov	ip, r1
 80020dc:	0039      	movs	r1, r7
 80020de:	4359      	muls	r1, r3
 80020e0:	4343      	muls	r3, r0
 80020e2:	4370      	muls	r0, r6
 80020e4:	437e      	muls	r6, r7
 80020e6:	0c0f      	lsrs	r7, r1, #16
 80020e8:	18f6      	adds	r6, r6, r3
 80020ea:	0424      	lsls	r4, r4, #16
 80020ec:	19be      	adds	r6, r7, r6
 80020ee:	4464      	add	r4, ip
 80020f0:	4442      	add	r2, r8
 80020f2:	468c      	mov	ip, r1
 80020f4:	42b3      	cmp	r3, r6
 80020f6:	d903      	bls.n	8002100 <__aeabi_dmul+0x2a0>
 80020f8:	2380      	movs	r3, #128	; 0x80
 80020fa:	025b      	lsls	r3, r3, #9
 80020fc:	4698      	mov	r8, r3
 80020fe:	4440      	add	r0, r8
 8002100:	9b02      	ldr	r3, [sp, #8]
 8002102:	4661      	mov	r1, ip
 8002104:	4698      	mov	r8, r3
 8002106:	9b04      	ldr	r3, [sp, #16]
 8002108:	0437      	lsls	r7, r6, #16
 800210a:	4443      	add	r3, r8
 800210c:	469b      	mov	fp, r3
 800210e:	45ab      	cmp	fp, r5
 8002110:	41ad      	sbcs	r5, r5
 8002112:	426b      	negs	r3, r5
 8002114:	040d      	lsls	r5, r1, #16
 8002116:	9905      	ldr	r1, [sp, #20]
 8002118:	0c2d      	lsrs	r5, r5, #16
 800211a:	468c      	mov	ip, r1
 800211c:	197f      	adds	r7, r7, r5
 800211e:	4467      	add	r7, ip
 8002120:	18fd      	adds	r5, r7, r3
 8002122:	46a8      	mov	r8, r5
 8002124:	465d      	mov	r5, fp
 8002126:	192d      	adds	r5, r5, r4
 8002128:	42a5      	cmp	r5, r4
 800212a:	41a4      	sbcs	r4, r4
 800212c:	4693      	mov	fp, r2
 800212e:	4264      	negs	r4, r4
 8002130:	46a4      	mov	ip, r4
 8002132:	44c3      	add	fp, r8
 8002134:	44dc      	add	ip, fp
 8002136:	428f      	cmp	r7, r1
 8002138:	41bf      	sbcs	r7, r7
 800213a:	4598      	cmp	r8, r3
 800213c:	419b      	sbcs	r3, r3
 800213e:	4593      	cmp	fp, r2
 8002140:	4192      	sbcs	r2, r2
 8002142:	45a4      	cmp	ip, r4
 8002144:	41a4      	sbcs	r4, r4
 8002146:	425b      	negs	r3, r3
 8002148:	427f      	negs	r7, r7
 800214a:	431f      	orrs	r7, r3
 800214c:	0c36      	lsrs	r6, r6, #16
 800214e:	4252      	negs	r2, r2
 8002150:	4264      	negs	r4, r4
 8002152:	19bf      	adds	r7, r7, r6
 8002154:	4322      	orrs	r2, r4
 8002156:	18bf      	adds	r7, r7, r2
 8002158:	4662      	mov	r2, ip
 800215a:	1838      	adds	r0, r7, r0
 800215c:	0243      	lsls	r3, r0, #9
 800215e:	0dd2      	lsrs	r2, r2, #23
 8002160:	9903      	ldr	r1, [sp, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	026a      	lsls	r2, r5, #9
 8002166:	430a      	orrs	r2, r1
 8002168:	1e50      	subs	r0, r2, #1
 800216a:	4182      	sbcs	r2, r0
 800216c:	4661      	mov	r1, ip
 800216e:	0ded      	lsrs	r5, r5, #23
 8002170:	432a      	orrs	r2, r5
 8002172:	024e      	lsls	r6, r1, #9
 8002174:	4332      	orrs	r2, r6
 8002176:	01d9      	lsls	r1, r3, #7
 8002178:	d400      	bmi.n	800217c <__aeabi_dmul+0x31c>
 800217a:	e0b3      	b.n	80022e4 <__aeabi_dmul+0x484>
 800217c:	2601      	movs	r6, #1
 800217e:	0850      	lsrs	r0, r2, #1
 8002180:	4032      	ands	r2, r6
 8002182:	4302      	orrs	r2, r0
 8002184:	07de      	lsls	r6, r3, #31
 8002186:	4332      	orrs	r2, r6
 8002188:	085b      	lsrs	r3, r3, #1
 800218a:	4c22      	ldr	r4, [pc, #136]	; (8002214 <__aeabi_dmul+0x3b4>)
 800218c:	4454      	add	r4, sl
 800218e:	2c00      	cmp	r4, #0
 8002190:	dd62      	ble.n	8002258 <__aeabi_dmul+0x3f8>
 8002192:	0751      	lsls	r1, r2, #29
 8002194:	d009      	beq.n	80021aa <__aeabi_dmul+0x34a>
 8002196:	200f      	movs	r0, #15
 8002198:	4010      	ands	r0, r2
 800219a:	2804      	cmp	r0, #4
 800219c:	d005      	beq.n	80021aa <__aeabi_dmul+0x34a>
 800219e:	1d10      	adds	r0, r2, #4
 80021a0:	4290      	cmp	r0, r2
 80021a2:	4192      	sbcs	r2, r2
 80021a4:	4252      	negs	r2, r2
 80021a6:	189b      	adds	r3, r3, r2
 80021a8:	0002      	movs	r2, r0
 80021aa:	01d9      	lsls	r1, r3, #7
 80021ac:	d504      	bpl.n	80021b8 <__aeabi_dmul+0x358>
 80021ae:	2480      	movs	r4, #128	; 0x80
 80021b0:	4819      	ldr	r0, [pc, #100]	; (8002218 <__aeabi_dmul+0x3b8>)
 80021b2:	00e4      	lsls	r4, r4, #3
 80021b4:	4003      	ands	r3, r0
 80021b6:	4454      	add	r4, sl
 80021b8:	4818      	ldr	r0, [pc, #96]	; (800221c <__aeabi_dmul+0x3bc>)
 80021ba:	4284      	cmp	r4, r0
 80021bc:	dd00      	ble.n	80021c0 <__aeabi_dmul+0x360>
 80021be:	e727      	b.n	8002010 <__aeabi_dmul+0x1b0>
 80021c0:	075e      	lsls	r6, r3, #29
 80021c2:	025b      	lsls	r3, r3, #9
 80021c4:	08d2      	lsrs	r2, r2, #3
 80021c6:	0b1f      	lsrs	r7, r3, #12
 80021c8:	0563      	lsls	r3, r4, #21
 80021ca:	4316      	orrs	r6, r2
 80021cc:	0d5b      	lsrs	r3, r3, #21
 80021ce:	e6b2      	b.n	8001f36 <__aeabi_dmul+0xd6>
 80021d0:	2300      	movs	r3, #0
 80021d2:	4699      	mov	r9, r3
 80021d4:	3301      	adds	r3, #1
 80021d6:	2704      	movs	r7, #4
 80021d8:	2600      	movs	r6, #0
 80021da:	469b      	mov	fp, r3
 80021dc:	e664      	b.n	8001ea8 <__aeabi_dmul+0x48>
 80021de:	2303      	movs	r3, #3
 80021e0:	9701      	str	r7, [sp, #4]
 80021e2:	4681      	mov	r9, r0
 80021e4:	270c      	movs	r7, #12
 80021e6:	469b      	mov	fp, r3
 80021e8:	e65e      	b.n	8001ea8 <__aeabi_dmul+0x48>
 80021ea:	2201      	movs	r2, #1
 80021ec:	2001      	movs	r0, #1
 80021ee:	4317      	orrs	r7, r2
 80021f0:	2200      	movs	r2, #0
 80021f2:	e676      	b.n	8001ee2 <__aeabi_dmul+0x82>
 80021f4:	2303      	movs	r3, #3
 80021f6:	2003      	movs	r0, #3
 80021f8:	431f      	orrs	r7, r3
 80021fa:	4643      	mov	r3, r8
 80021fc:	e671      	b.n	8001ee2 <__aeabi_dmul+0x82>
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	000007ff 	.word	0x000007ff
 8002204:	fffffc01 	.word	0xfffffc01
 8002208:	0800ebec 	.word	0x0800ebec
 800220c:	800fffff 	.word	0x800fffff
 8002210:	fffffc0d 	.word	0xfffffc0d
 8002214:	000003ff 	.word	0x000003ff
 8002218:	feffffff 	.word	0xfeffffff
 800221c:	000007fe 	.word	0x000007fe
 8002220:	2300      	movs	r3, #0
 8002222:	2780      	movs	r7, #128	; 0x80
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	033f      	lsls	r7, r7, #12
 8002228:	2600      	movs	r6, #0
 800222a:	4b43      	ldr	r3, [pc, #268]	; (8002338 <__aeabi_dmul+0x4d8>)
 800222c:	e683      	b.n	8001f36 <__aeabi_dmul+0xd6>
 800222e:	9b01      	ldr	r3, [sp, #4]
 8002230:	0032      	movs	r2, r6
 8002232:	46a4      	mov	ip, r4
 8002234:	4658      	mov	r0, fp
 8002236:	e670      	b.n	8001f1a <__aeabi_dmul+0xba>
 8002238:	46ac      	mov	ip, r5
 800223a:	e66e      	b.n	8001f1a <__aeabi_dmul+0xba>
 800223c:	2780      	movs	r7, #128	; 0x80
 800223e:	9901      	ldr	r1, [sp, #4]
 8002240:	033f      	lsls	r7, r7, #12
 8002242:	4239      	tst	r1, r7
 8002244:	d02d      	beq.n	80022a2 <__aeabi_dmul+0x442>
 8002246:	423b      	tst	r3, r7
 8002248:	d12b      	bne.n	80022a2 <__aeabi_dmul+0x442>
 800224a:	431f      	orrs	r7, r3
 800224c:	033f      	lsls	r7, r7, #12
 800224e:	0b3f      	lsrs	r7, r7, #12
 8002250:	9500      	str	r5, [sp, #0]
 8002252:	0016      	movs	r6, r2
 8002254:	4b38      	ldr	r3, [pc, #224]	; (8002338 <__aeabi_dmul+0x4d8>)
 8002256:	e66e      	b.n	8001f36 <__aeabi_dmul+0xd6>
 8002258:	2501      	movs	r5, #1
 800225a:	1b2d      	subs	r5, r5, r4
 800225c:	2d38      	cmp	r5, #56	; 0x38
 800225e:	dd00      	ble.n	8002262 <__aeabi_dmul+0x402>
 8002260:	e666      	b.n	8001f30 <__aeabi_dmul+0xd0>
 8002262:	2d1f      	cmp	r5, #31
 8002264:	dc40      	bgt.n	80022e8 <__aeabi_dmul+0x488>
 8002266:	4835      	ldr	r0, [pc, #212]	; (800233c <__aeabi_dmul+0x4dc>)
 8002268:	001c      	movs	r4, r3
 800226a:	4450      	add	r0, sl
 800226c:	0016      	movs	r6, r2
 800226e:	4082      	lsls	r2, r0
 8002270:	4084      	lsls	r4, r0
 8002272:	40ee      	lsrs	r6, r5
 8002274:	1e50      	subs	r0, r2, #1
 8002276:	4182      	sbcs	r2, r0
 8002278:	4334      	orrs	r4, r6
 800227a:	4314      	orrs	r4, r2
 800227c:	40eb      	lsrs	r3, r5
 800227e:	0762      	lsls	r2, r4, #29
 8002280:	d009      	beq.n	8002296 <__aeabi_dmul+0x436>
 8002282:	220f      	movs	r2, #15
 8002284:	4022      	ands	r2, r4
 8002286:	2a04      	cmp	r2, #4
 8002288:	d005      	beq.n	8002296 <__aeabi_dmul+0x436>
 800228a:	0022      	movs	r2, r4
 800228c:	1d14      	adds	r4, r2, #4
 800228e:	4294      	cmp	r4, r2
 8002290:	4180      	sbcs	r0, r0
 8002292:	4240      	negs	r0, r0
 8002294:	181b      	adds	r3, r3, r0
 8002296:	021a      	lsls	r2, r3, #8
 8002298:	d53e      	bpl.n	8002318 <__aeabi_dmul+0x4b8>
 800229a:	2301      	movs	r3, #1
 800229c:	2700      	movs	r7, #0
 800229e:	2600      	movs	r6, #0
 80022a0:	e649      	b.n	8001f36 <__aeabi_dmul+0xd6>
 80022a2:	2780      	movs	r7, #128	; 0x80
 80022a4:	9b01      	ldr	r3, [sp, #4]
 80022a6:	033f      	lsls	r7, r7, #12
 80022a8:	431f      	orrs	r7, r3
 80022aa:	033f      	lsls	r7, r7, #12
 80022ac:	0b3f      	lsrs	r7, r7, #12
 80022ae:	9400      	str	r4, [sp, #0]
 80022b0:	4b21      	ldr	r3, [pc, #132]	; (8002338 <__aeabi_dmul+0x4d8>)
 80022b2:	e640      	b.n	8001f36 <__aeabi_dmul+0xd6>
 80022b4:	0003      	movs	r3, r0
 80022b6:	465a      	mov	r2, fp
 80022b8:	3b28      	subs	r3, #40	; 0x28
 80022ba:	409a      	lsls	r2, r3
 80022bc:	2600      	movs	r6, #0
 80022be:	9201      	str	r2, [sp, #4]
 80022c0:	e66d      	b.n	8001f9e <__aeabi_dmul+0x13e>
 80022c2:	4658      	mov	r0, fp
 80022c4:	f000 fd1a 	bl	8002cfc <__clzsi2>
 80022c8:	3020      	adds	r0, #32
 80022ca:	e657      	b.n	8001f7c <__aeabi_dmul+0x11c>
 80022cc:	0003      	movs	r3, r0
 80022ce:	4652      	mov	r2, sl
 80022d0:	3b28      	subs	r3, #40	; 0x28
 80022d2:	409a      	lsls	r2, r3
 80022d4:	0013      	movs	r3, r2
 80022d6:	2200      	movs	r2, #0
 80022d8:	e693      	b.n	8002002 <__aeabi_dmul+0x1a2>
 80022da:	4650      	mov	r0, sl
 80022dc:	f000 fd0e 	bl	8002cfc <__clzsi2>
 80022e0:	3020      	adds	r0, #32
 80022e2:	e67b      	b.n	8001fdc <__aeabi_dmul+0x17c>
 80022e4:	46ca      	mov	sl, r9
 80022e6:	e750      	b.n	800218a <__aeabi_dmul+0x32a>
 80022e8:	201f      	movs	r0, #31
 80022ea:	001e      	movs	r6, r3
 80022ec:	4240      	negs	r0, r0
 80022ee:	1b04      	subs	r4, r0, r4
 80022f0:	40e6      	lsrs	r6, r4
 80022f2:	2d20      	cmp	r5, #32
 80022f4:	d003      	beq.n	80022fe <__aeabi_dmul+0x49e>
 80022f6:	4c12      	ldr	r4, [pc, #72]	; (8002340 <__aeabi_dmul+0x4e0>)
 80022f8:	4454      	add	r4, sl
 80022fa:	40a3      	lsls	r3, r4
 80022fc:	431a      	orrs	r2, r3
 80022fe:	1e50      	subs	r0, r2, #1
 8002300:	4182      	sbcs	r2, r0
 8002302:	4332      	orrs	r2, r6
 8002304:	2607      	movs	r6, #7
 8002306:	2700      	movs	r7, #0
 8002308:	4016      	ands	r6, r2
 800230a:	d009      	beq.n	8002320 <__aeabi_dmul+0x4c0>
 800230c:	200f      	movs	r0, #15
 800230e:	2300      	movs	r3, #0
 8002310:	4010      	ands	r0, r2
 8002312:	0014      	movs	r4, r2
 8002314:	2804      	cmp	r0, #4
 8002316:	d1b9      	bne.n	800228c <__aeabi_dmul+0x42c>
 8002318:	0022      	movs	r2, r4
 800231a:	075e      	lsls	r6, r3, #29
 800231c:	025b      	lsls	r3, r3, #9
 800231e:	0b1f      	lsrs	r7, r3, #12
 8002320:	08d2      	lsrs	r2, r2, #3
 8002322:	4316      	orrs	r6, r2
 8002324:	2300      	movs	r3, #0
 8002326:	e606      	b.n	8001f36 <__aeabi_dmul+0xd6>
 8002328:	2780      	movs	r7, #128	; 0x80
 800232a:	033f      	lsls	r7, r7, #12
 800232c:	431f      	orrs	r7, r3
 800232e:	033f      	lsls	r7, r7, #12
 8002330:	0b3f      	lsrs	r7, r7, #12
 8002332:	0016      	movs	r6, r2
 8002334:	4b00      	ldr	r3, [pc, #0]	; (8002338 <__aeabi_dmul+0x4d8>)
 8002336:	e5fe      	b.n	8001f36 <__aeabi_dmul+0xd6>
 8002338:	000007ff 	.word	0x000007ff
 800233c:	0000041e 	.word	0x0000041e
 8002340:	0000043e 	.word	0x0000043e

08002344 <__aeabi_dsub>:
 8002344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002346:	4657      	mov	r7, sl
 8002348:	464e      	mov	r6, r9
 800234a:	4645      	mov	r5, r8
 800234c:	46de      	mov	lr, fp
 800234e:	000c      	movs	r4, r1
 8002350:	0309      	lsls	r1, r1, #12
 8002352:	b5e0      	push	{r5, r6, r7, lr}
 8002354:	0a49      	lsrs	r1, r1, #9
 8002356:	0f46      	lsrs	r6, r0, #29
 8002358:	005f      	lsls	r7, r3, #1
 800235a:	4331      	orrs	r1, r6
 800235c:	031e      	lsls	r6, r3, #12
 800235e:	0fdb      	lsrs	r3, r3, #31
 8002360:	0a76      	lsrs	r6, r6, #9
 8002362:	469b      	mov	fp, r3
 8002364:	0f53      	lsrs	r3, r2, #29
 8002366:	4333      	orrs	r3, r6
 8002368:	4ec8      	ldr	r6, [pc, #800]	; (800268c <__aeabi_dsub+0x348>)
 800236a:	0065      	lsls	r5, r4, #1
 800236c:	00c0      	lsls	r0, r0, #3
 800236e:	0fe4      	lsrs	r4, r4, #31
 8002370:	00d2      	lsls	r2, r2, #3
 8002372:	0d6d      	lsrs	r5, r5, #21
 8002374:	46a2      	mov	sl, r4
 8002376:	4681      	mov	r9, r0
 8002378:	0d7f      	lsrs	r7, r7, #21
 800237a:	469c      	mov	ip, r3
 800237c:	4690      	mov	r8, r2
 800237e:	42b7      	cmp	r7, r6
 8002380:	d100      	bne.n	8002384 <__aeabi_dsub+0x40>
 8002382:	e0b9      	b.n	80024f8 <__aeabi_dsub+0x1b4>
 8002384:	465b      	mov	r3, fp
 8002386:	2601      	movs	r6, #1
 8002388:	4073      	eors	r3, r6
 800238a:	469b      	mov	fp, r3
 800238c:	1bee      	subs	r6, r5, r7
 800238e:	45a3      	cmp	fp, r4
 8002390:	d100      	bne.n	8002394 <__aeabi_dsub+0x50>
 8002392:	e083      	b.n	800249c <__aeabi_dsub+0x158>
 8002394:	2e00      	cmp	r6, #0
 8002396:	dd63      	ble.n	8002460 <__aeabi_dsub+0x11c>
 8002398:	2f00      	cmp	r7, #0
 800239a:	d000      	beq.n	800239e <__aeabi_dsub+0x5a>
 800239c:	e0b1      	b.n	8002502 <__aeabi_dsub+0x1be>
 800239e:	4663      	mov	r3, ip
 80023a0:	4313      	orrs	r3, r2
 80023a2:	d100      	bne.n	80023a6 <__aeabi_dsub+0x62>
 80023a4:	e123      	b.n	80025ee <__aeabi_dsub+0x2aa>
 80023a6:	1e73      	subs	r3, r6, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d000      	beq.n	80023ae <__aeabi_dsub+0x6a>
 80023ac:	e1ba      	b.n	8002724 <__aeabi_dsub+0x3e0>
 80023ae:	1a86      	subs	r6, r0, r2
 80023b0:	4663      	mov	r3, ip
 80023b2:	42b0      	cmp	r0, r6
 80023b4:	4180      	sbcs	r0, r0
 80023b6:	2501      	movs	r5, #1
 80023b8:	1ac9      	subs	r1, r1, r3
 80023ba:	4240      	negs	r0, r0
 80023bc:	1a09      	subs	r1, r1, r0
 80023be:	020b      	lsls	r3, r1, #8
 80023c0:	d400      	bmi.n	80023c4 <__aeabi_dsub+0x80>
 80023c2:	e147      	b.n	8002654 <__aeabi_dsub+0x310>
 80023c4:	0249      	lsls	r1, r1, #9
 80023c6:	0a4b      	lsrs	r3, r1, #9
 80023c8:	4698      	mov	r8, r3
 80023ca:	4643      	mov	r3, r8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d100      	bne.n	80023d2 <__aeabi_dsub+0x8e>
 80023d0:	e189      	b.n	80026e6 <__aeabi_dsub+0x3a2>
 80023d2:	4640      	mov	r0, r8
 80023d4:	f000 fc92 	bl	8002cfc <__clzsi2>
 80023d8:	0003      	movs	r3, r0
 80023da:	3b08      	subs	r3, #8
 80023dc:	2b1f      	cmp	r3, #31
 80023de:	dd00      	ble.n	80023e2 <__aeabi_dsub+0x9e>
 80023e0:	e17c      	b.n	80026dc <__aeabi_dsub+0x398>
 80023e2:	2220      	movs	r2, #32
 80023e4:	0030      	movs	r0, r6
 80023e6:	1ad2      	subs	r2, r2, r3
 80023e8:	4641      	mov	r1, r8
 80023ea:	40d0      	lsrs	r0, r2
 80023ec:	4099      	lsls	r1, r3
 80023ee:	0002      	movs	r2, r0
 80023f0:	409e      	lsls	r6, r3
 80023f2:	430a      	orrs	r2, r1
 80023f4:	429d      	cmp	r5, r3
 80023f6:	dd00      	ble.n	80023fa <__aeabi_dsub+0xb6>
 80023f8:	e16a      	b.n	80026d0 <__aeabi_dsub+0x38c>
 80023fa:	1b5d      	subs	r5, r3, r5
 80023fc:	1c6b      	adds	r3, r5, #1
 80023fe:	2b1f      	cmp	r3, #31
 8002400:	dd00      	ble.n	8002404 <__aeabi_dsub+0xc0>
 8002402:	e194      	b.n	800272e <__aeabi_dsub+0x3ea>
 8002404:	2120      	movs	r1, #32
 8002406:	0010      	movs	r0, r2
 8002408:	0035      	movs	r5, r6
 800240a:	1ac9      	subs	r1, r1, r3
 800240c:	408e      	lsls	r6, r1
 800240e:	40da      	lsrs	r2, r3
 8002410:	4088      	lsls	r0, r1
 8002412:	40dd      	lsrs	r5, r3
 8002414:	1e71      	subs	r1, r6, #1
 8002416:	418e      	sbcs	r6, r1
 8002418:	0011      	movs	r1, r2
 800241a:	2207      	movs	r2, #7
 800241c:	4328      	orrs	r0, r5
 800241e:	2500      	movs	r5, #0
 8002420:	4306      	orrs	r6, r0
 8002422:	4032      	ands	r2, r6
 8002424:	2a00      	cmp	r2, #0
 8002426:	d009      	beq.n	800243c <__aeabi_dsub+0xf8>
 8002428:	230f      	movs	r3, #15
 800242a:	4033      	ands	r3, r6
 800242c:	2b04      	cmp	r3, #4
 800242e:	d005      	beq.n	800243c <__aeabi_dsub+0xf8>
 8002430:	1d33      	adds	r3, r6, #4
 8002432:	42b3      	cmp	r3, r6
 8002434:	41b6      	sbcs	r6, r6
 8002436:	4276      	negs	r6, r6
 8002438:	1989      	adds	r1, r1, r6
 800243a:	001e      	movs	r6, r3
 800243c:	020b      	lsls	r3, r1, #8
 800243e:	d400      	bmi.n	8002442 <__aeabi_dsub+0xfe>
 8002440:	e23d      	b.n	80028be <__aeabi_dsub+0x57a>
 8002442:	1c6a      	adds	r2, r5, #1
 8002444:	4b91      	ldr	r3, [pc, #580]	; (800268c <__aeabi_dsub+0x348>)
 8002446:	0555      	lsls	r5, r2, #21
 8002448:	0d6d      	lsrs	r5, r5, #21
 800244a:	429a      	cmp	r2, r3
 800244c:	d100      	bne.n	8002450 <__aeabi_dsub+0x10c>
 800244e:	e119      	b.n	8002684 <__aeabi_dsub+0x340>
 8002450:	4a8f      	ldr	r2, [pc, #572]	; (8002690 <__aeabi_dsub+0x34c>)
 8002452:	08f6      	lsrs	r6, r6, #3
 8002454:	400a      	ands	r2, r1
 8002456:	0757      	lsls	r7, r2, #29
 8002458:	0252      	lsls	r2, r2, #9
 800245a:	4337      	orrs	r7, r6
 800245c:	0b12      	lsrs	r2, r2, #12
 800245e:	e09b      	b.n	8002598 <__aeabi_dsub+0x254>
 8002460:	2e00      	cmp	r6, #0
 8002462:	d000      	beq.n	8002466 <__aeabi_dsub+0x122>
 8002464:	e0c5      	b.n	80025f2 <__aeabi_dsub+0x2ae>
 8002466:	1c6e      	adds	r6, r5, #1
 8002468:	0576      	lsls	r6, r6, #21
 800246a:	0d76      	lsrs	r6, r6, #21
 800246c:	2e01      	cmp	r6, #1
 800246e:	dc00      	bgt.n	8002472 <__aeabi_dsub+0x12e>
 8002470:	e148      	b.n	8002704 <__aeabi_dsub+0x3c0>
 8002472:	4667      	mov	r7, ip
 8002474:	1a86      	subs	r6, r0, r2
 8002476:	1bcb      	subs	r3, r1, r7
 8002478:	42b0      	cmp	r0, r6
 800247a:	41bf      	sbcs	r7, r7
 800247c:	427f      	negs	r7, r7
 800247e:	46b8      	mov	r8, r7
 8002480:	001f      	movs	r7, r3
 8002482:	4643      	mov	r3, r8
 8002484:	1aff      	subs	r7, r7, r3
 8002486:	003b      	movs	r3, r7
 8002488:	46b8      	mov	r8, r7
 800248a:	021b      	lsls	r3, r3, #8
 800248c:	d500      	bpl.n	8002490 <__aeabi_dsub+0x14c>
 800248e:	e15f      	b.n	8002750 <__aeabi_dsub+0x40c>
 8002490:	4337      	orrs	r7, r6
 8002492:	d19a      	bne.n	80023ca <__aeabi_dsub+0x86>
 8002494:	2200      	movs	r2, #0
 8002496:	2400      	movs	r4, #0
 8002498:	2500      	movs	r5, #0
 800249a:	e079      	b.n	8002590 <__aeabi_dsub+0x24c>
 800249c:	2e00      	cmp	r6, #0
 800249e:	dc00      	bgt.n	80024a2 <__aeabi_dsub+0x15e>
 80024a0:	e0fa      	b.n	8002698 <__aeabi_dsub+0x354>
 80024a2:	2f00      	cmp	r7, #0
 80024a4:	d100      	bne.n	80024a8 <__aeabi_dsub+0x164>
 80024a6:	e08d      	b.n	80025c4 <__aeabi_dsub+0x280>
 80024a8:	4b78      	ldr	r3, [pc, #480]	; (800268c <__aeabi_dsub+0x348>)
 80024aa:	429d      	cmp	r5, r3
 80024ac:	d067      	beq.n	800257e <__aeabi_dsub+0x23a>
 80024ae:	2380      	movs	r3, #128	; 0x80
 80024b0:	4667      	mov	r7, ip
 80024b2:	041b      	lsls	r3, r3, #16
 80024b4:	431f      	orrs	r7, r3
 80024b6:	46bc      	mov	ip, r7
 80024b8:	2e38      	cmp	r6, #56	; 0x38
 80024ba:	dc00      	bgt.n	80024be <__aeabi_dsub+0x17a>
 80024bc:	e152      	b.n	8002764 <__aeabi_dsub+0x420>
 80024be:	4663      	mov	r3, ip
 80024c0:	4313      	orrs	r3, r2
 80024c2:	1e5a      	subs	r2, r3, #1
 80024c4:	4193      	sbcs	r3, r2
 80024c6:	181e      	adds	r6, r3, r0
 80024c8:	4286      	cmp	r6, r0
 80024ca:	4180      	sbcs	r0, r0
 80024cc:	4240      	negs	r0, r0
 80024ce:	1809      	adds	r1, r1, r0
 80024d0:	020b      	lsls	r3, r1, #8
 80024d2:	d400      	bmi.n	80024d6 <__aeabi_dsub+0x192>
 80024d4:	e0be      	b.n	8002654 <__aeabi_dsub+0x310>
 80024d6:	4b6d      	ldr	r3, [pc, #436]	; (800268c <__aeabi_dsub+0x348>)
 80024d8:	3501      	adds	r5, #1
 80024da:	429d      	cmp	r5, r3
 80024dc:	d100      	bne.n	80024e0 <__aeabi_dsub+0x19c>
 80024de:	e0d2      	b.n	8002686 <__aeabi_dsub+0x342>
 80024e0:	4a6b      	ldr	r2, [pc, #428]	; (8002690 <__aeabi_dsub+0x34c>)
 80024e2:	0873      	lsrs	r3, r6, #1
 80024e4:	400a      	ands	r2, r1
 80024e6:	2101      	movs	r1, #1
 80024e8:	400e      	ands	r6, r1
 80024ea:	431e      	orrs	r6, r3
 80024ec:	0851      	lsrs	r1, r2, #1
 80024ee:	07d3      	lsls	r3, r2, #31
 80024f0:	2207      	movs	r2, #7
 80024f2:	431e      	orrs	r6, r3
 80024f4:	4032      	ands	r2, r6
 80024f6:	e795      	b.n	8002424 <__aeabi_dsub+0xe0>
 80024f8:	001e      	movs	r6, r3
 80024fa:	4316      	orrs	r6, r2
 80024fc:	d000      	beq.n	8002500 <__aeabi_dsub+0x1bc>
 80024fe:	e745      	b.n	800238c <__aeabi_dsub+0x48>
 8002500:	e740      	b.n	8002384 <__aeabi_dsub+0x40>
 8002502:	4b62      	ldr	r3, [pc, #392]	; (800268c <__aeabi_dsub+0x348>)
 8002504:	429d      	cmp	r5, r3
 8002506:	d03a      	beq.n	800257e <__aeabi_dsub+0x23a>
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	4667      	mov	r7, ip
 800250c:	041b      	lsls	r3, r3, #16
 800250e:	431f      	orrs	r7, r3
 8002510:	46bc      	mov	ip, r7
 8002512:	2e38      	cmp	r6, #56	; 0x38
 8002514:	dd00      	ble.n	8002518 <__aeabi_dsub+0x1d4>
 8002516:	e0eb      	b.n	80026f0 <__aeabi_dsub+0x3ac>
 8002518:	2e1f      	cmp	r6, #31
 800251a:	dc00      	bgt.n	800251e <__aeabi_dsub+0x1da>
 800251c:	e13a      	b.n	8002794 <__aeabi_dsub+0x450>
 800251e:	0033      	movs	r3, r6
 8002520:	4667      	mov	r7, ip
 8002522:	3b20      	subs	r3, #32
 8002524:	40df      	lsrs	r7, r3
 8002526:	003b      	movs	r3, r7
 8002528:	2e20      	cmp	r6, #32
 800252a:	d005      	beq.n	8002538 <__aeabi_dsub+0x1f4>
 800252c:	2740      	movs	r7, #64	; 0x40
 800252e:	1bbf      	subs	r7, r7, r6
 8002530:	4666      	mov	r6, ip
 8002532:	40be      	lsls	r6, r7
 8002534:	4332      	orrs	r2, r6
 8002536:	4690      	mov	r8, r2
 8002538:	4646      	mov	r6, r8
 800253a:	1e72      	subs	r2, r6, #1
 800253c:	4196      	sbcs	r6, r2
 800253e:	4333      	orrs	r3, r6
 8002540:	e0da      	b.n	80026f8 <__aeabi_dsub+0x3b4>
 8002542:	2b00      	cmp	r3, #0
 8002544:	d100      	bne.n	8002548 <__aeabi_dsub+0x204>
 8002546:	e214      	b.n	8002972 <__aeabi_dsub+0x62e>
 8002548:	4663      	mov	r3, ip
 800254a:	4313      	orrs	r3, r2
 800254c:	d100      	bne.n	8002550 <__aeabi_dsub+0x20c>
 800254e:	e168      	b.n	8002822 <__aeabi_dsub+0x4de>
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	074e      	lsls	r6, r1, #29
 8002554:	08c0      	lsrs	r0, r0, #3
 8002556:	08c9      	lsrs	r1, r1, #3
 8002558:	031b      	lsls	r3, r3, #12
 800255a:	4306      	orrs	r6, r0
 800255c:	4219      	tst	r1, r3
 800255e:	d008      	beq.n	8002572 <__aeabi_dsub+0x22e>
 8002560:	4660      	mov	r0, ip
 8002562:	08c0      	lsrs	r0, r0, #3
 8002564:	4218      	tst	r0, r3
 8002566:	d104      	bne.n	8002572 <__aeabi_dsub+0x22e>
 8002568:	4663      	mov	r3, ip
 800256a:	0001      	movs	r1, r0
 800256c:	08d2      	lsrs	r2, r2, #3
 800256e:	075e      	lsls	r6, r3, #29
 8002570:	4316      	orrs	r6, r2
 8002572:	00f3      	lsls	r3, r6, #3
 8002574:	4699      	mov	r9, r3
 8002576:	00c9      	lsls	r1, r1, #3
 8002578:	0f72      	lsrs	r2, r6, #29
 800257a:	4d44      	ldr	r5, [pc, #272]	; (800268c <__aeabi_dsub+0x348>)
 800257c:	4311      	orrs	r1, r2
 800257e:	464b      	mov	r3, r9
 8002580:	08de      	lsrs	r6, r3, #3
 8002582:	4b42      	ldr	r3, [pc, #264]	; (800268c <__aeabi_dsub+0x348>)
 8002584:	074f      	lsls	r7, r1, #29
 8002586:	4337      	orrs	r7, r6
 8002588:	08ca      	lsrs	r2, r1, #3
 800258a:	429d      	cmp	r5, r3
 800258c:	d100      	bne.n	8002590 <__aeabi_dsub+0x24c>
 800258e:	e06e      	b.n	800266e <__aeabi_dsub+0x32a>
 8002590:	0312      	lsls	r2, r2, #12
 8002592:	056d      	lsls	r5, r5, #21
 8002594:	0b12      	lsrs	r2, r2, #12
 8002596:	0d6d      	lsrs	r5, r5, #21
 8002598:	2100      	movs	r1, #0
 800259a:	0312      	lsls	r2, r2, #12
 800259c:	0b13      	lsrs	r3, r2, #12
 800259e:	0d0a      	lsrs	r2, r1, #20
 80025a0:	0512      	lsls	r2, r2, #20
 80025a2:	431a      	orrs	r2, r3
 80025a4:	4b3b      	ldr	r3, [pc, #236]	; (8002694 <__aeabi_dsub+0x350>)
 80025a6:	052d      	lsls	r5, r5, #20
 80025a8:	4013      	ands	r3, r2
 80025aa:	432b      	orrs	r3, r5
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	07e4      	lsls	r4, r4, #31
 80025b0:	085b      	lsrs	r3, r3, #1
 80025b2:	4323      	orrs	r3, r4
 80025b4:	0038      	movs	r0, r7
 80025b6:	0019      	movs	r1, r3
 80025b8:	bc3c      	pop	{r2, r3, r4, r5}
 80025ba:	4690      	mov	r8, r2
 80025bc:	4699      	mov	r9, r3
 80025be:	46a2      	mov	sl, r4
 80025c0:	46ab      	mov	fp, r5
 80025c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025c4:	4663      	mov	r3, ip
 80025c6:	4313      	orrs	r3, r2
 80025c8:	d011      	beq.n	80025ee <__aeabi_dsub+0x2aa>
 80025ca:	1e73      	subs	r3, r6, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d000      	beq.n	80025d2 <__aeabi_dsub+0x28e>
 80025d0:	e107      	b.n	80027e2 <__aeabi_dsub+0x49e>
 80025d2:	1886      	adds	r6, r0, r2
 80025d4:	4286      	cmp	r6, r0
 80025d6:	4180      	sbcs	r0, r0
 80025d8:	4461      	add	r1, ip
 80025da:	4240      	negs	r0, r0
 80025dc:	1809      	adds	r1, r1, r0
 80025de:	2501      	movs	r5, #1
 80025e0:	020b      	lsls	r3, r1, #8
 80025e2:	d537      	bpl.n	8002654 <__aeabi_dsub+0x310>
 80025e4:	2502      	movs	r5, #2
 80025e6:	e77b      	b.n	80024e0 <__aeabi_dsub+0x19c>
 80025e8:	003e      	movs	r6, r7
 80025ea:	4661      	mov	r1, ip
 80025ec:	4691      	mov	r9, r2
 80025ee:	0035      	movs	r5, r6
 80025f0:	e7c5      	b.n	800257e <__aeabi_dsub+0x23a>
 80025f2:	465c      	mov	r4, fp
 80025f4:	2d00      	cmp	r5, #0
 80025f6:	d000      	beq.n	80025fa <__aeabi_dsub+0x2b6>
 80025f8:	e0e1      	b.n	80027be <__aeabi_dsub+0x47a>
 80025fa:	000b      	movs	r3, r1
 80025fc:	4303      	orrs	r3, r0
 80025fe:	d0f3      	beq.n	80025e8 <__aeabi_dsub+0x2a4>
 8002600:	1c73      	adds	r3, r6, #1
 8002602:	d100      	bne.n	8002606 <__aeabi_dsub+0x2c2>
 8002604:	e1ac      	b.n	8002960 <__aeabi_dsub+0x61c>
 8002606:	4b21      	ldr	r3, [pc, #132]	; (800268c <__aeabi_dsub+0x348>)
 8002608:	429f      	cmp	r7, r3
 800260a:	d100      	bne.n	800260e <__aeabi_dsub+0x2ca>
 800260c:	e13a      	b.n	8002884 <__aeabi_dsub+0x540>
 800260e:	43f3      	mvns	r3, r6
 8002610:	2b38      	cmp	r3, #56	; 0x38
 8002612:	dd00      	ble.n	8002616 <__aeabi_dsub+0x2d2>
 8002614:	e16f      	b.n	80028f6 <__aeabi_dsub+0x5b2>
 8002616:	2b1f      	cmp	r3, #31
 8002618:	dd00      	ble.n	800261c <__aeabi_dsub+0x2d8>
 800261a:	e18c      	b.n	8002936 <__aeabi_dsub+0x5f2>
 800261c:	2520      	movs	r5, #32
 800261e:	000e      	movs	r6, r1
 8002620:	1aed      	subs	r5, r5, r3
 8002622:	40ae      	lsls	r6, r5
 8002624:	46b0      	mov	r8, r6
 8002626:	0006      	movs	r6, r0
 8002628:	46aa      	mov	sl, r5
 800262a:	40de      	lsrs	r6, r3
 800262c:	4645      	mov	r5, r8
 800262e:	4335      	orrs	r5, r6
 8002630:	002e      	movs	r6, r5
 8002632:	4655      	mov	r5, sl
 8002634:	40d9      	lsrs	r1, r3
 8002636:	40a8      	lsls	r0, r5
 8002638:	4663      	mov	r3, ip
 800263a:	1e45      	subs	r5, r0, #1
 800263c:	41a8      	sbcs	r0, r5
 800263e:	1a5b      	subs	r3, r3, r1
 8002640:	469c      	mov	ip, r3
 8002642:	4330      	orrs	r0, r6
 8002644:	1a16      	subs	r6, r2, r0
 8002646:	42b2      	cmp	r2, r6
 8002648:	4192      	sbcs	r2, r2
 800264a:	4663      	mov	r3, ip
 800264c:	4252      	negs	r2, r2
 800264e:	1a99      	subs	r1, r3, r2
 8002650:	003d      	movs	r5, r7
 8002652:	e6b4      	b.n	80023be <__aeabi_dsub+0x7a>
 8002654:	2207      	movs	r2, #7
 8002656:	4032      	ands	r2, r6
 8002658:	2a00      	cmp	r2, #0
 800265a:	d000      	beq.n	800265e <__aeabi_dsub+0x31a>
 800265c:	e6e4      	b.n	8002428 <__aeabi_dsub+0xe4>
 800265e:	4b0b      	ldr	r3, [pc, #44]	; (800268c <__aeabi_dsub+0x348>)
 8002660:	08f6      	lsrs	r6, r6, #3
 8002662:	074f      	lsls	r7, r1, #29
 8002664:	4337      	orrs	r7, r6
 8002666:	08ca      	lsrs	r2, r1, #3
 8002668:	429d      	cmp	r5, r3
 800266a:	d000      	beq.n	800266e <__aeabi_dsub+0x32a>
 800266c:	e790      	b.n	8002590 <__aeabi_dsub+0x24c>
 800266e:	003b      	movs	r3, r7
 8002670:	4313      	orrs	r3, r2
 8002672:	d100      	bne.n	8002676 <__aeabi_dsub+0x332>
 8002674:	e1a6      	b.n	80029c4 <__aeabi_dsub+0x680>
 8002676:	2380      	movs	r3, #128	; 0x80
 8002678:	031b      	lsls	r3, r3, #12
 800267a:	431a      	orrs	r2, r3
 800267c:	0312      	lsls	r2, r2, #12
 800267e:	0b12      	lsrs	r2, r2, #12
 8002680:	4d02      	ldr	r5, [pc, #8]	; (800268c <__aeabi_dsub+0x348>)
 8002682:	e789      	b.n	8002598 <__aeabi_dsub+0x254>
 8002684:	0015      	movs	r5, r2
 8002686:	2200      	movs	r2, #0
 8002688:	2700      	movs	r7, #0
 800268a:	e785      	b.n	8002598 <__aeabi_dsub+0x254>
 800268c:	000007ff 	.word	0x000007ff
 8002690:	ff7fffff 	.word	0xff7fffff
 8002694:	800fffff 	.word	0x800fffff
 8002698:	2e00      	cmp	r6, #0
 800269a:	d000      	beq.n	800269e <__aeabi_dsub+0x35a>
 800269c:	e0c7      	b.n	800282e <__aeabi_dsub+0x4ea>
 800269e:	1c6b      	adds	r3, r5, #1
 80026a0:	055e      	lsls	r6, r3, #21
 80026a2:	0d76      	lsrs	r6, r6, #21
 80026a4:	2e01      	cmp	r6, #1
 80026a6:	dc00      	bgt.n	80026aa <__aeabi_dsub+0x366>
 80026a8:	e0f0      	b.n	800288c <__aeabi_dsub+0x548>
 80026aa:	4dc8      	ldr	r5, [pc, #800]	; (80029cc <__aeabi_dsub+0x688>)
 80026ac:	42ab      	cmp	r3, r5
 80026ae:	d100      	bne.n	80026b2 <__aeabi_dsub+0x36e>
 80026b0:	e0b9      	b.n	8002826 <__aeabi_dsub+0x4e2>
 80026b2:	1885      	adds	r5, r0, r2
 80026b4:	000a      	movs	r2, r1
 80026b6:	4285      	cmp	r5, r0
 80026b8:	4189      	sbcs	r1, r1
 80026ba:	4462      	add	r2, ip
 80026bc:	4249      	negs	r1, r1
 80026be:	1851      	adds	r1, r2, r1
 80026c0:	2207      	movs	r2, #7
 80026c2:	07ce      	lsls	r6, r1, #31
 80026c4:	086d      	lsrs	r5, r5, #1
 80026c6:	432e      	orrs	r6, r5
 80026c8:	0849      	lsrs	r1, r1, #1
 80026ca:	4032      	ands	r2, r6
 80026cc:	001d      	movs	r5, r3
 80026ce:	e6a9      	b.n	8002424 <__aeabi_dsub+0xe0>
 80026d0:	49bf      	ldr	r1, [pc, #764]	; (80029d0 <__aeabi_dsub+0x68c>)
 80026d2:	1aed      	subs	r5, r5, r3
 80026d4:	4011      	ands	r1, r2
 80026d6:	2207      	movs	r2, #7
 80026d8:	4032      	ands	r2, r6
 80026da:	e6a3      	b.n	8002424 <__aeabi_dsub+0xe0>
 80026dc:	0032      	movs	r2, r6
 80026de:	3828      	subs	r0, #40	; 0x28
 80026e0:	4082      	lsls	r2, r0
 80026e2:	2600      	movs	r6, #0
 80026e4:	e686      	b.n	80023f4 <__aeabi_dsub+0xb0>
 80026e6:	0030      	movs	r0, r6
 80026e8:	f000 fb08 	bl	8002cfc <__clzsi2>
 80026ec:	3020      	adds	r0, #32
 80026ee:	e673      	b.n	80023d8 <__aeabi_dsub+0x94>
 80026f0:	4663      	mov	r3, ip
 80026f2:	4313      	orrs	r3, r2
 80026f4:	1e5a      	subs	r2, r3, #1
 80026f6:	4193      	sbcs	r3, r2
 80026f8:	1ac6      	subs	r6, r0, r3
 80026fa:	42b0      	cmp	r0, r6
 80026fc:	4180      	sbcs	r0, r0
 80026fe:	4240      	negs	r0, r0
 8002700:	1a09      	subs	r1, r1, r0
 8002702:	e65c      	b.n	80023be <__aeabi_dsub+0x7a>
 8002704:	000e      	movs	r6, r1
 8002706:	4667      	mov	r7, ip
 8002708:	4306      	orrs	r6, r0
 800270a:	4317      	orrs	r7, r2
 800270c:	2d00      	cmp	r5, #0
 800270e:	d15e      	bne.n	80027ce <__aeabi_dsub+0x48a>
 8002710:	2e00      	cmp	r6, #0
 8002712:	d000      	beq.n	8002716 <__aeabi_dsub+0x3d2>
 8002714:	e0f3      	b.n	80028fe <__aeabi_dsub+0x5ba>
 8002716:	2f00      	cmp	r7, #0
 8002718:	d100      	bne.n	800271c <__aeabi_dsub+0x3d8>
 800271a:	e11e      	b.n	800295a <__aeabi_dsub+0x616>
 800271c:	465c      	mov	r4, fp
 800271e:	4661      	mov	r1, ip
 8002720:	4691      	mov	r9, r2
 8002722:	e72c      	b.n	800257e <__aeabi_dsub+0x23a>
 8002724:	4fa9      	ldr	r7, [pc, #676]	; (80029cc <__aeabi_dsub+0x688>)
 8002726:	42be      	cmp	r6, r7
 8002728:	d07b      	beq.n	8002822 <__aeabi_dsub+0x4de>
 800272a:	001e      	movs	r6, r3
 800272c:	e6f1      	b.n	8002512 <__aeabi_dsub+0x1ce>
 800272e:	0010      	movs	r0, r2
 8002730:	3d1f      	subs	r5, #31
 8002732:	40e8      	lsrs	r0, r5
 8002734:	2b20      	cmp	r3, #32
 8002736:	d003      	beq.n	8002740 <__aeabi_dsub+0x3fc>
 8002738:	2140      	movs	r1, #64	; 0x40
 800273a:	1acb      	subs	r3, r1, r3
 800273c:	409a      	lsls	r2, r3
 800273e:	4316      	orrs	r6, r2
 8002740:	1e73      	subs	r3, r6, #1
 8002742:	419e      	sbcs	r6, r3
 8002744:	2207      	movs	r2, #7
 8002746:	4306      	orrs	r6, r0
 8002748:	4032      	ands	r2, r6
 800274a:	2100      	movs	r1, #0
 800274c:	2500      	movs	r5, #0
 800274e:	e783      	b.n	8002658 <__aeabi_dsub+0x314>
 8002750:	1a16      	subs	r6, r2, r0
 8002752:	4663      	mov	r3, ip
 8002754:	42b2      	cmp	r2, r6
 8002756:	4180      	sbcs	r0, r0
 8002758:	1a59      	subs	r1, r3, r1
 800275a:	4240      	negs	r0, r0
 800275c:	1a0b      	subs	r3, r1, r0
 800275e:	4698      	mov	r8, r3
 8002760:	465c      	mov	r4, fp
 8002762:	e632      	b.n	80023ca <__aeabi_dsub+0x86>
 8002764:	2e1f      	cmp	r6, #31
 8002766:	dd00      	ble.n	800276a <__aeabi_dsub+0x426>
 8002768:	e0ab      	b.n	80028c2 <__aeabi_dsub+0x57e>
 800276a:	2720      	movs	r7, #32
 800276c:	1bbb      	subs	r3, r7, r6
 800276e:	469a      	mov	sl, r3
 8002770:	4663      	mov	r3, ip
 8002772:	4657      	mov	r7, sl
 8002774:	40bb      	lsls	r3, r7
 8002776:	4699      	mov	r9, r3
 8002778:	0013      	movs	r3, r2
 800277a:	464f      	mov	r7, r9
 800277c:	40f3      	lsrs	r3, r6
 800277e:	431f      	orrs	r7, r3
 8002780:	003b      	movs	r3, r7
 8002782:	4657      	mov	r7, sl
 8002784:	40ba      	lsls	r2, r7
 8002786:	1e57      	subs	r7, r2, #1
 8002788:	41ba      	sbcs	r2, r7
 800278a:	4313      	orrs	r3, r2
 800278c:	4662      	mov	r2, ip
 800278e:	40f2      	lsrs	r2, r6
 8002790:	1889      	adds	r1, r1, r2
 8002792:	e698      	b.n	80024c6 <__aeabi_dsub+0x182>
 8002794:	2720      	movs	r7, #32
 8002796:	1bbb      	subs	r3, r7, r6
 8002798:	469a      	mov	sl, r3
 800279a:	4663      	mov	r3, ip
 800279c:	4657      	mov	r7, sl
 800279e:	40bb      	lsls	r3, r7
 80027a0:	4699      	mov	r9, r3
 80027a2:	0013      	movs	r3, r2
 80027a4:	464f      	mov	r7, r9
 80027a6:	40f3      	lsrs	r3, r6
 80027a8:	431f      	orrs	r7, r3
 80027aa:	003b      	movs	r3, r7
 80027ac:	4657      	mov	r7, sl
 80027ae:	40ba      	lsls	r2, r7
 80027b0:	1e57      	subs	r7, r2, #1
 80027b2:	41ba      	sbcs	r2, r7
 80027b4:	4313      	orrs	r3, r2
 80027b6:	4662      	mov	r2, ip
 80027b8:	40f2      	lsrs	r2, r6
 80027ba:	1a89      	subs	r1, r1, r2
 80027bc:	e79c      	b.n	80026f8 <__aeabi_dsub+0x3b4>
 80027be:	4b83      	ldr	r3, [pc, #524]	; (80029cc <__aeabi_dsub+0x688>)
 80027c0:	429f      	cmp	r7, r3
 80027c2:	d05f      	beq.n	8002884 <__aeabi_dsub+0x540>
 80027c4:	2580      	movs	r5, #128	; 0x80
 80027c6:	042d      	lsls	r5, r5, #16
 80027c8:	4273      	negs	r3, r6
 80027ca:	4329      	orrs	r1, r5
 80027cc:	e720      	b.n	8002610 <__aeabi_dsub+0x2cc>
 80027ce:	2e00      	cmp	r6, #0
 80027d0:	d10c      	bne.n	80027ec <__aeabi_dsub+0x4a8>
 80027d2:	2f00      	cmp	r7, #0
 80027d4:	d100      	bne.n	80027d8 <__aeabi_dsub+0x494>
 80027d6:	e0d0      	b.n	800297a <__aeabi_dsub+0x636>
 80027d8:	465c      	mov	r4, fp
 80027da:	4661      	mov	r1, ip
 80027dc:	4691      	mov	r9, r2
 80027de:	4d7b      	ldr	r5, [pc, #492]	; (80029cc <__aeabi_dsub+0x688>)
 80027e0:	e6cd      	b.n	800257e <__aeabi_dsub+0x23a>
 80027e2:	4f7a      	ldr	r7, [pc, #488]	; (80029cc <__aeabi_dsub+0x688>)
 80027e4:	42be      	cmp	r6, r7
 80027e6:	d01c      	beq.n	8002822 <__aeabi_dsub+0x4de>
 80027e8:	001e      	movs	r6, r3
 80027ea:	e665      	b.n	80024b8 <__aeabi_dsub+0x174>
 80027ec:	2f00      	cmp	r7, #0
 80027ee:	d018      	beq.n	8002822 <__aeabi_dsub+0x4de>
 80027f0:	08c0      	lsrs	r0, r0, #3
 80027f2:	074e      	lsls	r6, r1, #29
 80027f4:	4306      	orrs	r6, r0
 80027f6:	2080      	movs	r0, #128	; 0x80
 80027f8:	08c9      	lsrs	r1, r1, #3
 80027fa:	0300      	lsls	r0, r0, #12
 80027fc:	4201      	tst	r1, r0
 80027fe:	d008      	beq.n	8002812 <__aeabi_dsub+0x4ce>
 8002800:	4663      	mov	r3, ip
 8002802:	08dc      	lsrs	r4, r3, #3
 8002804:	4204      	tst	r4, r0
 8002806:	d104      	bne.n	8002812 <__aeabi_dsub+0x4ce>
 8002808:	0021      	movs	r1, r4
 800280a:	46da      	mov	sl, fp
 800280c:	08d2      	lsrs	r2, r2, #3
 800280e:	075e      	lsls	r6, r3, #29
 8002810:	4316      	orrs	r6, r2
 8002812:	00f3      	lsls	r3, r6, #3
 8002814:	4699      	mov	r9, r3
 8002816:	2401      	movs	r4, #1
 8002818:	4653      	mov	r3, sl
 800281a:	00c9      	lsls	r1, r1, #3
 800281c:	0f72      	lsrs	r2, r6, #29
 800281e:	4311      	orrs	r1, r2
 8002820:	401c      	ands	r4, r3
 8002822:	4d6a      	ldr	r5, [pc, #424]	; (80029cc <__aeabi_dsub+0x688>)
 8002824:	e6ab      	b.n	800257e <__aeabi_dsub+0x23a>
 8002826:	001d      	movs	r5, r3
 8002828:	2200      	movs	r2, #0
 800282a:	2700      	movs	r7, #0
 800282c:	e6b4      	b.n	8002598 <__aeabi_dsub+0x254>
 800282e:	2d00      	cmp	r5, #0
 8002830:	d159      	bne.n	80028e6 <__aeabi_dsub+0x5a2>
 8002832:	000b      	movs	r3, r1
 8002834:	4303      	orrs	r3, r0
 8002836:	d100      	bne.n	800283a <__aeabi_dsub+0x4f6>
 8002838:	e6d6      	b.n	80025e8 <__aeabi_dsub+0x2a4>
 800283a:	1c73      	adds	r3, r6, #1
 800283c:	d100      	bne.n	8002840 <__aeabi_dsub+0x4fc>
 800283e:	e0b2      	b.n	80029a6 <__aeabi_dsub+0x662>
 8002840:	4b62      	ldr	r3, [pc, #392]	; (80029cc <__aeabi_dsub+0x688>)
 8002842:	429f      	cmp	r7, r3
 8002844:	d01e      	beq.n	8002884 <__aeabi_dsub+0x540>
 8002846:	43f3      	mvns	r3, r6
 8002848:	2b38      	cmp	r3, #56	; 0x38
 800284a:	dc6f      	bgt.n	800292c <__aeabi_dsub+0x5e8>
 800284c:	2b1f      	cmp	r3, #31
 800284e:	dd00      	ble.n	8002852 <__aeabi_dsub+0x50e>
 8002850:	e097      	b.n	8002982 <__aeabi_dsub+0x63e>
 8002852:	2520      	movs	r5, #32
 8002854:	000e      	movs	r6, r1
 8002856:	1aed      	subs	r5, r5, r3
 8002858:	40ae      	lsls	r6, r5
 800285a:	46b0      	mov	r8, r6
 800285c:	0006      	movs	r6, r0
 800285e:	46aa      	mov	sl, r5
 8002860:	40de      	lsrs	r6, r3
 8002862:	4645      	mov	r5, r8
 8002864:	4335      	orrs	r5, r6
 8002866:	002e      	movs	r6, r5
 8002868:	4655      	mov	r5, sl
 800286a:	40a8      	lsls	r0, r5
 800286c:	40d9      	lsrs	r1, r3
 800286e:	1e45      	subs	r5, r0, #1
 8002870:	41a8      	sbcs	r0, r5
 8002872:	448c      	add	ip, r1
 8002874:	4306      	orrs	r6, r0
 8002876:	18b6      	adds	r6, r6, r2
 8002878:	4296      	cmp	r6, r2
 800287a:	4192      	sbcs	r2, r2
 800287c:	4251      	negs	r1, r2
 800287e:	4461      	add	r1, ip
 8002880:	003d      	movs	r5, r7
 8002882:	e625      	b.n	80024d0 <__aeabi_dsub+0x18c>
 8002884:	003d      	movs	r5, r7
 8002886:	4661      	mov	r1, ip
 8002888:	4691      	mov	r9, r2
 800288a:	e678      	b.n	800257e <__aeabi_dsub+0x23a>
 800288c:	000b      	movs	r3, r1
 800288e:	4303      	orrs	r3, r0
 8002890:	2d00      	cmp	r5, #0
 8002892:	d000      	beq.n	8002896 <__aeabi_dsub+0x552>
 8002894:	e655      	b.n	8002542 <__aeabi_dsub+0x1fe>
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f5      	beq.n	8002886 <__aeabi_dsub+0x542>
 800289a:	4663      	mov	r3, ip
 800289c:	4313      	orrs	r3, r2
 800289e:	d100      	bne.n	80028a2 <__aeabi_dsub+0x55e>
 80028a0:	e66d      	b.n	800257e <__aeabi_dsub+0x23a>
 80028a2:	1886      	adds	r6, r0, r2
 80028a4:	4286      	cmp	r6, r0
 80028a6:	4180      	sbcs	r0, r0
 80028a8:	4461      	add	r1, ip
 80028aa:	4240      	negs	r0, r0
 80028ac:	1809      	adds	r1, r1, r0
 80028ae:	2200      	movs	r2, #0
 80028b0:	020b      	lsls	r3, r1, #8
 80028b2:	d400      	bmi.n	80028b6 <__aeabi_dsub+0x572>
 80028b4:	e6d0      	b.n	8002658 <__aeabi_dsub+0x314>
 80028b6:	4b46      	ldr	r3, [pc, #280]	; (80029d0 <__aeabi_dsub+0x68c>)
 80028b8:	3501      	adds	r5, #1
 80028ba:	4019      	ands	r1, r3
 80028bc:	e5b2      	b.n	8002424 <__aeabi_dsub+0xe0>
 80028be:	46b1      	mov	r9, r6
 80028c0:	e65d      	b.n	800257e <__aeabi_dsub+0x23a>
 80028c2:	0033      	movs	r3, r6
 80028c4:	4667      	mov	r7, ip
 80028c6:	3b20      	subs	r3, #32
 80028c8:	40df      	lsrs	r7, r3
 80028ca:	003b      	movs	r3, r7
 80028cc:	2e20      	cmp	r6, #32
 80028ce:	d005      	beq.n	80028dc <__aeabi_dsub+0x598>
 80028d0:	2740      	movs	r7, #64	; 0x40
 80028d2:	1bbf      	subs	r7, r7, r6
 80028d4:	4666      	mov	r6, ip
 80028d6:	40be      	lsls	r6, r7
 80028d8:	4332      	orrs	r2, r6
 80028da:	4690      	mov	r8, r2
 80028dc:	4646      	mov	r6, r8
 80028de:	1e72      	subs	r2, r6, #1
 80028e0:	4196      	sbcs	r6, r2
 80028e2:	4333      	orrs	r3, r6
 80028e4:	e5ef      	b.n	80024c6 <__aeabi_dsub+0x182>
 80028e6:	4b39      	ldr	r3, [pc, #228]	; (80029cc <__aeabi_dsub+0x688>)
 80028e8:	429f      	cmp	r7, r3
 80028ea:	d0cb      	beq.n	8002884 <__aeabi_dsub+0x540>
 80028ec:	2580      	movs	r5, #128	; 0x80
 80028ee:	042d      	lsls	r5, r5, #16
 80028f0:	4273      	negs	r3, r6
 80028f2:	4329      	orrs	r1, r5
 80028f4:	e7a8      	b.n	8002848 <__aeabi_dsub+0x504>
 80028f6:	4308      	orrs	r0, r1
 80028f8:	1e41      	subs	r1, r0, #1
 80028fa:	4188      	sbcs	r0, r1
 80028fc:	e6a2      	b.n	8002644 <__aeabi_dsub+0x300>
 80028fe:	2f00      	cmp	r7, #0
 8002900:	d100      	bne.n	8002904 <__aeabi_dsub+0x5c0>
 8002902:	e63c      	b.n	800257e <__aeabi_dsub+0x23a>
 8002904:	4663      	mov	r3, ip
 8002906:	1a86      	subs	r6, r0, r2
 8002908:	1acf      	subs	r7, r1, r3
 800290a:	42b0      	cmp	r0, r6
 800290c:	419b      	sbcs	r3, r3
 800290e:	425b      	negs	r3, r3
 8002910:	1afb      	subs	r3, r7, r3
 8002912:	4698      	mov	r8, r3
 8002914:	021b      	lsls	r3, r3, #8
 8002916:	d54e      	bpl.n	80029b6 <__aeabi_dsub+0x672>
 8002918:	1a16      	subs	r6, r2, r0
 800291a:	4663      	mov	r3, ip
 800291c:	42b2      	cmp	r2, r6
 800291e:	4192      	sbcs	r2, r2
 8002920:	1a59      	subs	r1, r3, r1
 8002922:	4252      	negs	r2, r2
 8002924:	1a89      	subs	r1, r1, r2
 8002926:	465c      	mov	r4, fp
 8002928:	2200      	movs	r2, #0
 800292a:	e57b      	b.n	8002424 <__aeabi_dsub+0xe0>
 800292c:	4301      	orrs	r1, r0
 800292e:	000e      	movs	r6, r1
 8002930:	1e71      	subs	r1, r6, #1
 8002932:	418e      	sbcs	r6, r1
 8002934:	e79f      	b.n	8002876 <__aeabi_dsub+0x532>
 8002936:	001d      	movs	r5, r3
 8002938:	000e      	movs	r6, r1
 800293a:	3d20      	subs	r5, #32
 800293c:	40ee      	lsrs	r6, r5
 800293e:	46b0      	mov	r8, r6
 8002940:	2b20      	cmp	r3, #32
 8002942:	d004      	beq.n	800294e <__aeabi_dsub+0x60a>
 8002944:	2540      	movs	r5, #64	; 0x40
 8002946:	1aeb      	subs	r3, r5, r3
 8002948:	4099      	lsls	r1, r3
 800294a:	4308      	orrs	r0, r1
 800294c:	4681      	mov	r9, r0
 800294e:	4648      	mov	r0, r9
 8002950:	4643      	mov	r3, r8
 8002952:	1e41      	subs	r1, r0, #1
 8002954:	4188      	sbcs	r0, r1
 8002956:	4318      	orrs	r0, r3
 8002958:	e674      	b.n	8002644 <__aeabi_dsub+0x300>
 800295a:	2200      	movs	r2, #0
 800295c:	2400      	movs	r4, #0
 800295e:	e617      	b.n	8002590 <__aeabi_dsub+0x24c>
 8002960:	1a16      	subs	r6, r2, r0
 8002962:	4663      	mov	r3, ip
 8002964:	42b2      	cmp	r2, r6
 8002966:	4192      	sbcs	r2, r2
 8002968:	1a59      	subs	r1, r3, r1
 800296a:	4252      	negs	r2, r2
 800296c:	1a89      	subs	r1, r1, r2
 800296e:	003d      	movs	r5, r7
 8002970:	e525      	b.n	80023be <__aeabi_dsub+0x7a>
 8002972:	4661      	mov	r1, ip
 8002974:	4691      	mov	r9, r2
 8002976:	4d15      	ldr	r5, [pc, #84]	; (80029cc <__aeabi_dsub+0x688>)
 8002978:	e601      	b.n	800257e <__aeabi_dsub+0x23a>
 800297a:	2280      	movs	r2, #128	; 0x80
 800297c:	2400      	movs	r4, #0
 800297e:	0312      	lsls	r2, r2, #12
 8002980:	e679      	b.n	8002676 <__aeabi_dsub+0x332>
 8002982:	001d      	movs	r5, r3
 8002984:	000e      	movs	r6, r1
 8002986:	3d20      	subs	r5, #32
 8002988:	40ee      	lsrs	r6, r5
 800298a:	46b0      	mov	r8, r6
 800298c:	2b20      	cmp	r3, #32
 800298e:	d004      	beq.n	800299a <__aeabi_dsub+0x656>
 8002990:	2540      	movs	r5, #64	; 0x40
 8002992:	1aeb      	subs	r3, r5, r3
 8002994:	4099      	lsls	r1, r3
 8002996:	4308      	orrs	r0, r1
 8002998:	4681      	mov	r9, r0
 800299a:	464e      	mov	r6, r9
 800299c:	4643      	mov	r3, r8
 800299e:	1e71      	subs	r1, r6, #1
 80029a0:	418e      	sbcs	r6, r1
 80029a2:	431e      	orrs	r6, r3
 80029a4:	e767      	b.n	8002876 <__aeabi_dsub+0x532>
 80029a6:	1886      	adds	r6, r0, r2
 80029a8:	4296      	cmp	r6, r2
 80029aa:	419b      	sbcs	r3, r3
 80029ac:	4461      	add	r1, ip
 80029ae:	425b      	negs	r3, r3
 80029b0:	18c9      	adds	r1, r1, r3
 80029b2:	003d      	movs	r5, r7
 80029b4:	e58c      	b.n	80024d0 <__aeabi_dsub+0x18c>
 80029b6:	4647      	mov	r7, r8
 80029b8:	4337      	orrs	r7, r6
 80029ba:	d0ce      	beq.n	800295a <__aeabi_dsub+0x616>
 80029bc:	2207      	movs	r2, #7
 80029be:	4641      	mov	r1, r8
 80029c0:	4032      	ands	r2, r6
 80029c2:	e649      	b.n	8002658 <__aeabi_dsub+0x314>
 80029c4:	2700      	movs	r7, #0
 80029c6:	003a      	movs	r2, r7
 80029c8:	e5e6      	b.n	8002598 <__aeabi_dsub+0x254>
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	000007ff 	.word	0x000007ff
 80029d0:	ff7fffff 	.word	0xff7fffff

080029d4 <__aeabi_dcmpun>:
 80029d4:	b570      	push	{r4, r5, r6, lr}
 80029d6:	4e0c      	ldr	r6, [pc, #48]	; (8002a08 <__aeabi_dcmpun+0x34>)
 80029d8:	030d      	lsls	r5, r1, #12
 80029da:	031c      	lsls	r4, r3, #12
 80029dc:	0049      	lsls	r1, r1, #1
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	0b2d      	lsrs	r5, r5, #12
 80029e2:	0d49      	lsrs	r1, r1, #21
 80029e4:	0b24      	lsrs	r4, r4, #12
 80029e6:	0d5b      	lsrs	r3, r3, #21
 80029e8:	42b1      	cmp	r1, r6
 80029ea:	d008      	beq.n	80029fe <__aeabi_dcmpun+0x2a>
 80029ec:	4906      	ldr	r1, [pc, #24]	; (8002a08 <__aeabi_dcmpun+0x34>)
 80029ee:	2000      	movs	r0, #0
 80029f0:	428b      	cmp	r3, r1
 80029f2:	d103      	bne.n	80029fc <__aeabi_dcmpun+0x28>
 80029f4:	4314      	orrs	r4, r2
 80029f6:	0020      	movs	r0, r4
 80029f8:	1e44      	subs	r4, r0, #1
 80029fa:	41a0      	sbcs	r0, r4
 80029fc:	bd70      	pop	{r4, r5, r6, pc}
 80029fe:	4305      	orrs	r5, r0
 8002a00:	2001      	movs	r0, #1
 8002a02:	2d00      	cmp	r5, #0
 8002a04:	d1fa      	bne.n	80029fc <__aeabi_dcmpun+0x28>
 8002a06:	e7f1      	b.n	80029ec <__aeabi_dcmpun+0x18>
 8002a08:	000007ff 	.word	0x000007ff

08002a0c <__aeabi_d2iz>:
 8002a0c:	b530      	push	{r4, r5, lr}
 8002a0e:	4d14      	ldr	r5, [pc, #80]	; (8002a60 <__aeabi_d2iz+0x54>)
 8002a10:	030a      	lsls	r2, r1, #12
 8002a12:	004b      	lsls	r3, r1, #1
 8002a14:	0b12      	lsrs	r2, r2, #12
 8002a16:	0d5b      	lsrs	r3, r3, #21
 8002a18:	0fc9      	lsrs	r1, r1, #31
 8002a1a:	2400      	movs	r4, #0
 8002a1c:	42ab      	cmp	r3, r5
 8002a1e:	dd11      	ble.n	8002a44 <__aeabi_d2iz+0x38>
 8002a20:	4c10      	ldr	r4, [pc, #64]	; (8002a64 <__aeabi_d2iz+0x58>)
 8002a22:	42a3      	cmp	r3, r4
 8002a24:	dc10      	bgt.n	8002a48 <__aeabi_d2iz+0x3c>
 8002a26:	2480      	movs	r4, #128	; 0x80
 8002a28:	0364      	lsls	r4, r4, #13
 8002a2a:	4322      	orrs	r2, r4
 8002a2c:	4c0e      	ldr	r4, [pc, #56]	; (8002a68 <__aeabi_d2iz+0x5c>)
 8002a2e:	1ae4      	subs	r4, r4, r3
 8002a30:	2c1f      	cmp	r4, #31
 8002a32:	dd0c      	ble.n	8002a4e <__aeabi_d2iz+0x42>
 8002a34:	480d      	ldr	r0, [pc, #52]	; (8002a6c <__aeabi_d2iz+0x60>)
 8002a36:	1ac3      	subs	r3, r0, r3
 8002a38:	40da      	lsrs	r2, r3
 8002a3a:	0013      	movs	r3, r2
 8002a3c:	425c      	negs	r4, r3
 8002a3e:	2900      	cmp	r1, #0
 8002a40:	d100      	bne.n	8002a44 <__aeabi_d2iz+0x38>
 8002a42:	001c      	movs	r4, r3
 8002a44:	0020      	movs	r0, r4
 8002a46:	bd30      	pop	{r4, r5, pc}
 8002a48:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <__aeabi_d2iz+0x64>)
 8002a4a:	18cc      	adds	r4, r1, r3
 8002a4c:	e7fa      	b.n	8002a44 <__aeabi_d2iz+0x38>
 8002a4e:	4d09      	ldr	r5, [pc, #36]	; (8002a74 <__aeabi_d2iz+0x68>)
 8002a50:	40e0      	lsrs	r0, r4
 8002a52:	46ac      	mov	ip, r5
 8002a54:	4463      	add	r3, ip
 8002a56:	409a      	lsls	r2, r3
 8002a58:	0013      	movs	r3, r2
 8002a5a:	4303      	orrs	r3, r0
 8002a5c:	e7ee      	b.n	8002a3c <__aeabi_d2iz+0x30>
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	000003fe 	.word	0x000003fe
 8002a64:	0000041d 	.word	0x0000041d
 8002a68:	00000433 	.word	0x00000433
 8002a6c:	00000413 	.word	0x00000413
 8002a70:	7fffffff 	.word	0x7fffffff
 8002a74:	fffffbed 	.word	0xfffffbed

08002a78 <__aeabi_i2d>:
 8002a78:	b570      	push	{r4, r5, r6, lr}
 8002a7a:	2800      	cmp	r0, #0
 8002a7c:	d02d      	beq.n	8002ada <__aeabi_i2d+0x62>
 8002a7e:	17c3      	asrs	r3, r0, #31
 8002a80:	18c5      	adds	r5, r0, r3
 8002a82:	405d      	eors	r5, r3
 8002a84:	0fc4      	lsrs	r4, r0, #31
 8002a86:	0028      	movs	r0, r5
 8002a88:	f000 f938 	bl	8002cfc <__clzsi2>
 8002a8c:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <__aeabi_i2d+0x6c>)
 8002a8e:	1a1b      	subs	r3, r3, r0
 8002a90:	055b      	lsls	r3, r3, #21
 8002a92:	0d5b      	lsrs	r3, r3, #21
 8002a94:	280a      	cmp	r0, #10
 8002a96:	dd15      	ble.n	8002ac4 <__aeabi_i2d+0x4c>
 8002a98:	380b      	subs	r0, #11
 8002a9a:	4085      	lsls	r5, r0
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	032d      	lsls	r5, r5, #12
 8002aa0:	0b2d      	lsrs	r5, r5, #12
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	0010      	movs	r0, r2
 8002aa6:	032d      	lsls	r5, r5, #12
 8002aa8:	0d0a      	lsrs	r2, r1, #20
 8002aaa:	0b2d      	lsrs	r5, r5, #12
 8002aac:	0512      	lsls	r2, r2, #20
 8002aae:	432a      	orrs	r2, r5
 8002ab0:	4d0d      	ldr	r5, [pc, #52]	; (8002ae8 <__aeabi_i2d+0x70>)
 8002ab2:	051b      	lsls	r3, r3, #20
 8002ab4:	402a      	ands	r2, r5
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	07e4      	lsls	r4, r4, #31
 8002abc:	085b      	lsrs	r3, r3, #1
 8002abe:	4323      	orrs	r3, r4
 8002ac0:	0019      	movs	r1, r3
 8002ac2:	bd70      	pop	{r4, r5, r6, pc}
 8002ac4:	0002      	movs	r2, r0
 8002ac6:	0029      	movs	r1, r5
 8002ac8:	3215      	adds	r2, #21
 8002aca:	4091      	lsls	r1, r2
 8002acc:	000a      	movs	r2, r1
 8002ace:	210b      	movs	r1, #11
 8002ad0:	1a08      	subs	r0, r1, r0
 8002ad2:	40c5      	lsrs	r5, r0
 8002ad4:	032d      	lsls	r5, r5, #12
 8002ad6:	0b2d      	lsrs	r5, r5, #12
 8002ad8:	e7e3      	b.n	8002aa2 <__aeabi_i2d+0x2a>
 8002ada:	2400      	movs	r4, #0
 8002adc:	2300      	movs	r3, #0
 8002ade:	2500      	movs	r5, #0
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	e7de      	b.n	8002aa2 <__aeabi_i2d+0x2a>
 8002ae4:	0000041e 	.word	0x0000041e
 8002ae8:	800fffff 	.word	0x800fffff

08002aec <__aeabi_ui2d>:
 8002aec:	b510      	push	{r4, lr}
 8002aee:	1e04      	subs	r4, r0, #0
 8002af0:	d025      	beq.n	8002b3e <__aeabi_ui2d+0x52>
 8002af2:	f000 f903 	bl	8002cfc <__clzsi2>
 8002af6:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <__aeabi_ui2d+0x5c>)
 8002af8:	1a1b      	subs	r3, r3, r0
 8002afa:	055b      	lsls	r3, r3, #21
 8002afc:	0d5b      	lsrs	r3, r3, #21
 8002afe:	280a      	cmp	r0, #10
 8002b00:	dd12      	ble.n	8002b28 <__aeabi_ui2d+0x3c>
 8002b02:	380b      	subs	r0, #11
 8002b04:	4084      	lsls	r4, r0
 8002b06:	2200      	movs	r2, #0
 8002b08:	0324      	lsls	r4, r4, #12
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	0010      	movs	r0, r2
 8002b10:	0324      	lsls	r4, r4, #12
 8002b12:	0d0a      	lsrs	r2, r1, #20
 8002b14:	0b24      	lsrs	r4, r4, #12
 8002b16:	0512      	lsls	r2, r2, #20
 8002b18:	4322      	orrs	r2, r4
 8002b1a:	4c0c      	ldr	r4, [pc, #48]	; (8002b4c <__aeabi_ui2d+0x60>)
 8002b1c:	051b      	lsls	r3, r3, #20
 8002b1e:	4022      	ands	r2, r4
 8002b20:	4313      	orrs	r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	0859      	lsrs	r1, r3, #1
 8002b26:	bd10      	pop	{r4, pc}
 8002b28:	0002      	movs	r2, r0
 8002b2a:	0021      	movs	r1, r4
 8002b2c:	3215      	adds	r2, #21
 8002b2e:	4091      	lsls	r1, r2
 8002b30:	000a      	movs	r2, r1
 8002b32:	210b      	movs	r1, #11
 8002b34:	1a08      	subs	r0, r1, r0
 8002b36:	40c4      	lsrs	r4, r0
 8002b38:	0324      	lsls	r4, r4, #12
 8002b3a:	0b24      	lsrs	r4, r4, #12
 8002b3c:	e7e6      	b.n	8002b0c <__aeabi_ui2d+0x20>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	2400      	movs	r4, #0
 8002b42:	2200      	movs	r2, #0
 8002b44:	e7e2      	b.n	8002b0c <__aeabi_ui2d+0x20>
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	0000041e 	.word	0x0000041e
 8002b4c:	800fffff 	.word	0x800fffff

08002b50 <__aeabi_f2d>:
 8002b50:	0041      	lsls	r1, r0, #1
 8002b52:	0e09      	lsrs	r1, r1, #24
 8002b54:	1c4b      	adds	r3, r1, #1
 8002b56:	b570      	push	{r4, r5, r6, lr}
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	0246      	lsls	r6, r0, #9
 8002b5c:	0a75      	lsrs	r5, r6, #9
 8002b5e:	0fc4      	lsrs	r4, r0, #31
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	dd14      	ble.n	8002b8e <__aeabi_f2d+0x3e>
 8002b64:	23e0      	movs	r3, #224	; 0xe0
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	076d      	lsls	r5, r5, #29
 8002b6a:	0b36      	lsrs	r6, r6, #12
 8002b6c:	18cb      	adds	r3, r1, r3
 8002b6e:	2100      	movs	r1, #0
 8002b70:	0d0a      	lsrs	r2, r1, #20
 8002b72:	0028      	movs	r0, r5
 8002b74:	0512      	lsls	r2, r2, #20
 8002b76:	4d1c      	ldr	r5, [pc, #112]	; (8002be8 <__aeabi_f2d+0x98>)
 8002b78:	4332      	orrs	r2, r6
 8002b7a:	055b      	lsls	r3, r3, #21
 8002b7c:	402a      	ands	r2, r5
 8002b7e:	085b      	lsrs	r3, r3, #1
 8002b80:	4313      	orrs	r3, r2
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	07e4      	lsls	r4, r4, #31
 8002b86:	085b      	lsrs	r3, r3, #1
 8002b88:	4323      	orrs	r3, r4
 8002b8a:	0019      	movs	r1, r3
 8002b8c:	bd70      	pop	{r4, r5, r6, pc}
 8002b8e:	2900      	cmp	r1, #0
 8002b90:	d114      	bne.n	8002bbc <__aeabi_f2d+0x6c>
 8002b92:	2d00      	cmp	r5, #0
 8002b94:	d01e      	beq.n	8002bd4 <__aeabi_f2d+0x84>
 8002b96:	0028      	movs	r0, r5
 8002b98:	f000 f8b0 	bl	8002cfc <__clzsi2>
 8002b9c:	280a      	cmp	r0, #10
 8002b9e:	dc1c      	bgt.n	8002bda <__aeabi_f2d+0x8a>
 8002ba0:	230b      	movs	r3, #11
 8002ba2:	002a      	movs	r2, r5
 8002ba4:	1a1b      	subs	r3, r3, r0
 8002ba6:	40da      	lsrs	r2, r3
 8002ba8:	0003      	movs	r3, r0
 8002baa:	3315      	adds	r3, #21
 8002bac:	409d      	lsls	r5, r3
 8002bae:	4b0f      	ldr	r3, [pc, #60]	; (8002bec <__aeabi_f2d+0x9c>)
 8002bb0:	0312      	lsls	r2, r2, #12
 8002bb2:	1a1b      	subs	r3, r3, r0
 8002bb4:	055b      	lsls	r3, r3, #21
 8002bb6:	0b16      	lsrs	r6, r2, #12
 8002bb8:	0d5b      	lsrs	r3, r3, #21
 8002bba:	e7d8      	b.n	8002b6e <__aeabi_f2d+0x1e>
 8002bbc:	2d00      	cmp	r5, #0
 8002bbe:	d006      	beq.n	8002bce <__aeabi_f2d+0x7e>
 8002bc0:	0b32      	lsrs	r2, r6, #12
 8002bc2:	2680      	movs	r6, #128	; 0x80
 8002bc4:	0336      	lsls	r6, r6, #12
 8002bc6:	076d      	lsls	r5, r5, #29
 8002bc8:	4316      	orrs	r6, r2
 8002bca:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <__aeabi_f2d+0xa0>)
 8002bcc:	e7cf      	b.n	8002b6e <__aeabi_f2d+0x1e>
 8002bce:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <__aeabi_f2d+0xa0>)
 8002bd0:	2600      	movs	r6, #0
 8002bd2:	e7cc      	b.n	8002b6e <__aeabi_f2d+0x1e>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	2600      	movs	r6, #0
 8002bd8:	e7c9      	b.n	8002b6e <__aeabi_f2d+0x1e>
 8002bda:	0003      	movs	r3, r0
 8002bdc:	002a      	movs	r2, r5
 8002bde:	3b0b      	subs	r3, #11
 8002be0:	409a      	lsls	r2, r3
 8002be2:	2500      	movs	r5, #0
 8002be4:	e7e3      	b.n	8002bae <__aeabi_f2d+0x5e>
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	800fffff 	.word	0x800fffff
 8002bec:	00000389 	.word	0x00000389
 8002bf0:	000007ff 	.word	0x000007ff

08002bf4 <__aeabi_d2f>:
 8002bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bf6:	004c      	lsls	r4, r1, #1
 8002bf8:	0d64      	lsrs	r4, r4, #21
 8002bfa:	030b      	lsls	r3, r1, #12
 8002bfc:	1c62      	adds	r2, r4, #1
 8002bfe:	0a5b      	lsrs	r3, r3, #9
 8002c00:	0f46      	lsrs	r6, r0, #29
 8002c02:	0552      	lsls	r2, r2, #21
 8002c04:	0fc9      	lsrs	r1, r1, #31
 8002c06:	431e      	orrs	r6, r3
 8002c08:	00c5      	lsls	r5, r0, #3
 8002c0a:	0d52      	lsrs	r2, r2, #21
 8002c0c:	2a01      	cmp	r2, #1
 8002c0e:	dd29      	ble.n	8002c64 <__aeabi_d2f+0x70>
 8002c10:	4b37      	ldr	r3, [pc, #220]	; (8002cf0 <__aeabi_d2f+0xfc>)
 8002c12:	18e7      	adds	r7, r4, r3
 8002c14:	2ffe      	cmp	r7, #254	; 0xfe
 8002c16:	dc1c      	bgt.n	8002c52 <__aeabi_d2f+0x5e>
 8002c18:	2f00      	cmp	r7, #0
 8002c1a:	dd3b      	ble.n	8002c94 <__aeabi_d2f+0xa0>
 8002c1c:	0180      	lsls	r0, r0, #6
 8002c1e:	1e43      	subs	r3, r0, #1
 8002c20:	4198      	sbcs	r0, r3
 8002c22:	2207      	movs	r2, #7
 8002c24:	00f3      	lsls	r3, r6, #3
 8002c26:	0f6d      	lsrs	r5, r5, #29
 8002c28:	4303      	orrs	r3, r0
 8002c2a:	432b      	orrs	r3, r5
 8002c2c:	401a      	ands	r2, r3
 8002c2e:	2a00      	cmp	r2, #0
 8002c30:	d004      	beq.n	8002c3c <__aeabi_d2f+0x48>
 8002c32:	220f      	movs	r2, #15
 8002c34:	401a      	ands	r2, r3
 8002c36:	2a04      	cmp	r2, #4
 8002c38:	d000      	beq.n	8002c3c <__aeabi_d2f+0x48>
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	2280      	movs	r2, #128	; 0x80
 8002c3e:	04d2      	lsls	r2, r2, #19
 8002c40:	401a      	ands	r2, r3
 8002c42:	d024      	beq.n	8002c8e <__aeabi_d2f+0x9a>
 8002c44:	3701      	adds	r7, #1
 8002c46:	b2fa      	uxtb	r2, r7
 8002c48:	2fff      	cmp	r7, #255	; 0xff
 8002c4a:	d002      	beq.n	8002c52 <__aeabi_d2f+0x5e>
 8002c4c:	019b      	lsls	r3, r3, #6
 8002c4e:	0a58      	lsrs	r0, r3, #9
 8002c50:	e001      	b.n	8002c56 <__aeabi_d2f+0x62>
 8002c52:	22ff      	movs	r2, #255	; 0xff
 8002c54:	2000      	movs	r0, #0
 8002c56:	0240      	lsls	r0, r0, #9
 8002c58:	05d2      	lsls	r2, r2, #23
 8002c5a:	0a40      	lsrs	r0, r0, #9
 8002c5c:	07c9      	lsls	r1, r1, #31
 8002c5e:	4310      	orrs	r0, r2
 8002c60:	4308      	orrs	r0, r1
 8002c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c64:	4335      	orrs	r5, r6
 8002c66:	2c00      	cmp	r4, #0
 8002c68:	d104      	bne.n	8002c74 <__aeabi_d2f+0x80>
 8002c6a:	2d00      	cmp	r5, #0
 8002c6c:	d10a      	bne.n	8002c84 <__aeabi_d2f+0x90>
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2000      	movs	r0, #0
 8002c72:	e7f0      	b.n	8002c56 <__aeabi_d2f+0x62>
 8002c74:	2d00      	cmp	r5, #0
 8002c76:	d0ec      	beq.n	8002c52 <__aeabi_d2f+0x5e>
 8002c78:	2080      	movs	r0, #128	; 0x80
 8002c7a:	03c0      	lsls	r0, r0, #15
 8002c7c:	4330      	orrs	r0, r6
 8002c7e:	22ff      	movs	r2, #255	; 0xff
 8002c80:	e7e9      	b.n	8002c56 <__aeabi_d2f+0x62>
 8002c82:	2400      	movs	r4, #0
 8002c84:	2300      	movs	r3, #0
 8002c86:	025b      	lsls	r3, r3, #9
 8002c88:	0a58      	lsrs	r0, r3, #9
 8002c8a:	b2e2      	uxtb	r2, r4
 8002c8c:	e7e3      	b.n	8002c56 <__aeabi_d2f+0x62>
 8002c8e:	08db      	lsrs	r3, r3, #3
 8002c90:	003c      	movs	r4, r7
 8002c92:	e7f8      	b.n	8002c86 <__aeabi_d2f+0x92>
 8002c94:	003b      	movs	r3, r7
 8002c96:	3317      	adds	r3, #23
 8002c98:	dbf3      	blt.n	8002c82 <__aeabi_d2f+0x8e>
 8002c9a:	2380      	movs	r3, #128	; 0x80
 8002c9c:	041b      	lsls	r3, r3, #16
 8002c9e:	4333      	orrs	r3, r6
 8002ca0:	261e      	movs	r6, #30
 8002ca2:	1bf6      	subs	r6, r6, r7
 8002ca4:	2e1f      	cmp	r6, #31
 8002ca6:	dd14      	ble.n	8002cd2 <__aeabi_d2f+0xde>
 8002ca8:	2202      	movs	r2, #2
 8002caa:	4252      	negs	r2, r2
 8002cac:	1bd7      	subs	r7, r2, r7
 8002cae:	001a      	movs	r2, r3
 8002cb0:	40fa      	lsrs	r2, r7
 8002cb2:	0017      	movs	r7, r2
 8002cb4:	2e20      	cmp	r6, #32
 8002cb6:	d004      	beq.n	8002cc2 <__aeabi_d2f+0xce>
 8002cb8:	4a0e      	ldr	r2, [pc, #56]	; (8002cf4 <__aeabi_d2f+0x100>)
 8002cba:	4694      	mov	ip, r2
 8002cbc:	4464      	add	r4, ip
 8002cbe:	40a3      	lsls	r3, r4
 8002cc0:	431d      	orrs	r5, r3
 8002cc2:	002b      	movs	r3, r5
 8002cc4:	1e5d      	subs	r5, r3, #1
 8002cc6:	41ab      	sbcs	r3, r5
 8002cc8:	2207      	movs	r2, #7
 8002cca:	433b      	orrs	r3, r7
 8002ccc:	401a      	ands	r2, r3
 8002cce:	2700      	movs	r7, #0
 8002cd0:	e7ad      	b.n	8002c2e <__aeabi_d2f+0x3a>
 8002cd2:	4a09      	ldr	r2, [pc, #36]	; (8002cf8 <__aeabi_d2f+0x104>)
 8002cd4:	0028      	movs	r0, r5
 8002cd6:	18a2      	adds	r2, r4, r2
 8002cd8:	4095      	lsls	r5, r2
 8002cda:	4093      	lsls	r3, r2
 8002cdc:	1e6c      	subs	r4, r5, #1
 8002cde:	41a5      	sbcs	r5, r4
 8002ce0:	40f0      	lsrs	r0, r6
 8002ce2:	2207      	movs	r2, #7
 8002ce4:	432b      	orrs	r3, r5
 8002ce6:	4303      	orrs	r3, r0
 8002ce8:	401a      	ands	r2, r3
 8002cea:	2700      	movs	r7, #0
 8002cec:	e79f      	b.n	8002c2e <__aeabi_d2f+0x3a>
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	fffffc80 	.word	0xfffffc80
 8002cf4:	fffffca2 	.word	0xfffffca2
 8002cf8:	fffffc82 	.word	0xfffffc82

08002cfc <__clzsi2>:
 8002cfc:	211c      	movs	r1, #28
 8002cfe:	2301      	movs	r3, #1
 8002d00:	041b      	lsls	r3, r3, #16
 8002d02:	4298      	cmp	r0, r3
 8002d04:	d301      	bcc.n	8002d0a <__clzsi2+0xe>
 8002d06:	0c00      	lsrs	r0, r0, #16
 8002d08:	3910      	subs	r1, #16
 8002d0a:	0a1b      	lsrs	r3, r3, #8
 8002d0c:	4298      	cmp	r0, r3
 8002d0e:	d301      	bcc.n	8002d14 <__clzsi2+0x18>
 8002d10:	0a00      	lsrs	r0, r0, #8
 8002d12:	3908      	subs	r1, #8
 8002d14:	091b      	lsrs	r3, r3, #4
 8002d16:	4298      	cmp	r0, r3
 8002d18:	d301      	bcc.n	8002d1e <__clzsi2+0x22>
 8002d1a:	0900      	lsrs	r0, r0, #4
 8002d1c:	3904      	subs	r1, #4
 8002d1e:	a202      	add	r2, pc, #8	; (adr r2, 8002d28 <__clzsi2+0x2c>)
 8002d20:	5c10      	ldrb	r0, [r2, r0]
 8002d22:	1840      	adds	r0, r0, r1
 8002d24:	4770      	bx	lr
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	02020304 	.word	0x02020304
 8002d2c:	01010101 	.word	0x01010101
	...

08002d38 <__clzdi2>:
 8002d38:	b510      	push	{r4, lr}
 8002d3a:	2900      	cmp	r1, #0
 8002d3c:	d103      	bne.n	8002d46 <__clzdi2+0xe>
 8002d3e:	f7ff ffdd 	bl	8002cfc <__clzsi2>
 8002d42:	3020      	adds	r0, #32
 8002d44:	e002      	b.n	8002d4c <__clzdi2+0x14>
 8002d46:	1c08      	adds	r0, r1, #0
 8002d48:	f7ff ffd8 	bl	8002cfc <__clzsi2>
 8002d4c:	bd10      	pop	{r4, pc}
 8002d4e:	46c0      	nop			; (mov r8, r8)

08002d50 <max31856_select>:
/*============================================================================*/
/* Implementation of functions                                                */
/*============================================================================*/

void max31856_select(tMAX31856 *tc)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
	tc->CS_Port->BRR = tc->CS_Pin;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6852      	ldr	r2, [r2, #4]
 8002d60:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b002      	add	sp, #8
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <max31856_deselect>:

/*****************************************************************************/
void max31856_deselect(tMAX31856 *tc)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
	tc->CS_Port->BSRR = tc->CS_Pin;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6852      	ldr	r2, [r2, #4]
 8002d7a:	619a      	str	r2, [r3, #24]
}
 8002d7c:	46c0      	nop			; (mov r8, r8)
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	b002      	add	sp, #8
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <max31856_wr_reg>:
 * @param reg		register address offset
 * @param value		value to be written
 * @param length	length of transmitted data
 */
void max31856_wr_reg(tMAX31856 *ch, uint8_t reg, uint8_t *value, uint8_t length)
{
 8002d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d86:	b08b      	sub	sp, #44	; 0x2c
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	0008      	movs	r0, r1
 8002d8e:	607a      	str	r2, [r7, #4]
 8002d90:	0019      	movs	r1, r3
 8002d92:	250b      	movs	r5, #11
 8002d94:	197b      	adds	r3, r7, r5
 8002d96:	1c02      	adds	r2, r0, #0
 8002d98:	701a      	strb	r2, [r3, #0]
 8002d9a:	240a      	movs	r4, #10
 8002d9c:	193b      	adds	r3, r7, r4
 8002d9e:	1c0a      	adds	r2, r1, #0
 8002da0:	701a      	strb	r2, [r3, #0]
	uint8_t txData;
	uint8_t buffer[16];

	memcpy(buffer,value,length);
 8002da2:	193b      	adds	r3, r7, r4
 8002da4:	781a      	ldrb	r2, [r3, #0]
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	2614      	movs	r6, #20
 8002daa:	19bb      	adds	r3, r7, r6
 8002dac:	0018      	movs	r0, r3
 8002dae:	f007 fa84 	bl	800a2ba <memcpy>

	txData = reg + MAX31856_WR_REG;
 8002db2:	197b      	adds	r3, r7, r5
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	3b80      	subs	r3, #128	; 0x80
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	2527      	movs	r5, #39	; 0x27
 8002dbc:	197b      	adds	r3, r7, r5
 8002dbe:	701a      	strb	r2, [r3, #0]

	max31856_select(ch);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f7ff ffc4 	bl	8002d50 <max31856_select>
	HAL_SPI_Transmit(&hspi2,&txData,1,1000);
 8002dc8:	23fa      	movs	r3, #250	; 0xfa
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	1979      	adds	r1, r7, r5
 8002dce:	480a      	ldr	r0, [pc, #40]	; (8002df8 <max31856_wr_reg+0x74>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f004 fc9f 	bl	8007714 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,buffer,length,1000);
 8002dd6:	193b      	adds	r3, r7, r4
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	23fa      	movs	r3, #250	; 0xfa
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	19b9      	adds	r1, r7, r6
 8002de2:	4805      	ldr	r0, [pc, #20]	; (8002df8 <max31856_wr_reg+0x74>)
 8002de4:	f004 fc96 	bl	8007714 <HAL_SPI_Transmit>
	max31856_deselect(ch);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	0018      	movs	r0, r3
 8002dec:	f7ff ffbd 	bl	8002d6a <max31856_deselect>
}
 8002df0:	46c0      	nop			; (mov r8, r8)
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b00b      	add	sp, #44	; 0x2c
 8002df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002df8:	20000d20 	.word	0x20000d20

08002dfc <max31856_rd_reg>:
 * @param reg		register address offset
 * @param value		pointer tot value to be read
 * @param length	length of received data
 */
void max31856_rd_reg(tMAX31856 *ch, uint8_t reg, uint8_t *value, uint8_t length)
{
 8002dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dfe:	b08f      	sub	sp, #60	; 0x3c
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	0008      	movs	r0, r1
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	0019      	movs	r1, r3
 8002e0a:	230b      	movs	r3, #11
 8002e0c:	18fb      	adds	r3, r7, r3
 8002e0e:	1c02      	adds	r2, r0, #0
 8002e10:	701a      	strb	r2, [r3, #0]
 8002e12:	240a      	movs	r4, #10
 8002e14:	193b      	adds	r3, r7, r4
 8002e16:	1c0a      	adds	r2, r1, #0
 8002e18:	701a      	strb	r2, [r3, #0]
	uint8_t txData[16];
	uint8_t rxData[17];


	memset(rxData,0,16);
 8002e1a:	2514      	movs	r5, #20
 8002e1c:	197b      	adds	r3, r7, r5
 8002e1e:	2210      	movs	r2, #16
 8002e20:	2100      	movs	r1, #0
 8002e22:	0018      	movs	r0, r3
 8002e24:	f007 fa52 	bl	800a2cc <memset>
	memset(txData,0,16);
 8002e28:	2628      	movs	r6, #40	; 0x28
 8002e2a:	19bb      	adds	r3, r7, r6
 8002e2c:	2210      	movs	r2, #16
 8002e2e:	2100      	movs	r1, #0
 8002e30:	0018      	movs	r0, r3
 8002e32:	f007 fa4b 	bl	800a2cc <memset>

	txData[0] = reg;
 8002e36:	19bb      	adds	r3, r7, r6
 8002e38:	220b      	movs	r2, #11
 8002e3a:	18ba      	adds	r2, r7, r2
 8002e3c:	7812      	ldrb	r2, [r2, #0]
 8002e3e:	701a      	strb	r2, [r3, #0]

	max31856_select(ch);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	0018      	movs	r0, r3
 8002e44:	f7ff ff84 	bl	8002d50 <max31856_select>
	//HAL_SPI_TransmitReceive(&hspi2,txData,rxData,length+1,1000);
	HAL_SPI_Transmit(&hspi2,txData,1,1000);
 8002e48:	23fa      	movs	r3, #250	; 0xfa
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	19b9      	adds	r1, r7, r6
 8002e4e:	480e      	ldr	r0, [pc, #56]	; (8002e88 <max31856_rd_reg+0x8c>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	f004 fc5f 	bl	8007714 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,rxData,length,1000);
 8002e56:	193b      	adds	r3, r7, r4
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	23fa      	movs	r3, #250	; 0xfa
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	1979      	adds	r1, r7, r5
 8002e62:	4809      	ldr	r0, [pc, #36]	; (8002e88 <max31856_rd_reg+0x8c>)
 8002e64:	f004 fdac 	bl	80079c0 <HAL_SPI_Receive>
	max31856_deselect(ch);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f7ff ff7d 	bl	8002d6a <max31856_deselect>

	memcpy(value,rxData,length);
 8002e70:	193b      	adds	r3, r7, r4
 8002e72:	781a      	ldrb	r2, [r3, #0]
 8002e74:	1979      	adds	r1, r7, r5
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f007 fa1e 	bl	800a2ba <memcpy>
}
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	46bd      	mov	sp, r7
 8002e82:	b00f      	add	sp, #60	; 0x3c
 8002e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	20000d20 	.word	0x20000d20

08002e8c <max31856_read_raw_buffered>:
	max31856_rd_reg(&tc[ch],MAX31856_LTCBH,raw,4);
}

/*****************************************************************************/
void max31856_read_raw_buffered(uint32_t ch,uint8_t *raw)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
	memcpy(raw,&gMAX31856_buffer[ch*MAX31856_READ_SIZE],MAX31856_READ_SIZE);
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	0013      	movs	r3, r2
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	189b      	adds	r3, r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	001a      	movs	r2, r3
 8002ea2:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <max31856_read_raw_buffered+0x2c>)
 8002ea4:	18d1      	adds	r1, r2, r3
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2206      	movs	r2, #6
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f007 fa05 	bl	800a2ba <memcpy>
}
 8002eb0:	46c0      	nop			; (mov r8, r8)
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	b002      	add	sp, #8
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	20000790 	.word	0x20000790

08002ebc <max31856_read_conf>:

/*****************************************************************************/
void max31856_read_conf(uint32_t ch, uint8_t *data)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
	max31856_rd_reg(&tc[ch],MAX31856_CR0,&data[0],2);
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	0013      	movs	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	189b      	adds	r3, r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4a10      	ldr	r2, [pc, #64]	; (8002f14 <max31856_read_conf+0x58>)
 8002ed2:	1898      	adds	r0, r3, r2
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	2100      	movs	r1, #0
 8002eda:	f7ff ff8f 	bl	8002dfc <max31856_rd_reg>
	max31856_rd_reg(&tc[ch],MAX31856_CJTO,&data[2],1);
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	0013      	movs	r3, r2
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	189b      	adds	r3, r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4a0a      	ldr	r2, [pc, #40]	; (8002f14 <max31856_read_conf+0x58>)
 8002eea:	1898      	adds	r0, r3, r2
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	1c9a      	adds	r2, r3, #2
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	2109      	movs	r1, #9
 8002ef4:	f7ff ff82 	bl	8002dfc <max31856_rd_reg>

	memcpy(&data[3], &extColdJOffset[ch], 4);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	1cd8      	adds	r0, r3, #3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	009a      	lsls	r2, r3, #2
 8002f00:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <max31856_read_conf+0x5c>)
 8002f02:	18d3      	adds	r3, r2, r3
 8002f04:	2204      	movs	r2, #4
 8002f06:	0019      	movs	r1, r3
 8002f08:	f007 f9d7 	bl	800a2ba <memcpy>

}
 8002f0c:	46c0      	nop			; (mov r8, r8)
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b002      	add	sp, #8
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	20000108 	.word	0x20000108
 8002f18:	20000860 	.word	0x20000860

08002f1c <max31856_write_conf>:

/*****************************************************************************/
void max31856_write_conf(uint32_t ch, uint8_t *data)
{
 8002f1c:	b590      	push	{r4, r7, lr}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
	memcpy(&extColdJOffset[ch], &data[3], 4);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	009a      	lsls	r2, r3, #2
 8002f2a:	4b1e      	ldr	r3, [pc, #120]	; (8002fa4 <max31856_write_conf+0x88>)
 8002f2c:	18d0      	adds	r0, r2, r3
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	3303      	adds	r3, #3
 8002f32:	2204      	movs	r2, #4
 8002f34:	0019      	movs	r1, r3
 8002f36:	f007 f9c0 	bl	800a2ba <memcpy>
	max31856_wr_reg(&tc[ch],MAX31856_CR0,&data[0],2);
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	0013      	movs	r3, r2
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	189b      	adds	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4a18      	ldr	r2, [pc, #96]	; (8002fa8 <max31856_write_conf+0x8c>)
 8002f46:	1898      	adds	r0, r3, r2
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	f7ff ff19 	bl	8002d84 <max31856_wr_reg>
	data[2] = extColdJOffset[ch] / 0.0625;
 8002f52:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <max31856_write_conf+0x88>)
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	0092      	lsls	r2, r2, #2
 8002f58:	58d3      	ldr	r3, [r2, r3]
 8002f5a:	1c18      	adds	r0, r3, #0
 8002f5c:	f7ff fdf8 	bl	8002b50 <__aeabi_f2d>
 8002f60:	2200      	movs	r2, #0
 8002f62:	4b12      	ldr	r3, [pc, #72]	; (8002fac <max31856_write_conf+0x90>)
 8002f64:	f7fe fb72 	bl	800164c <__aeabi_ddiv>
 8002f68:	0003      	movs	r3, r0
 8002f6a:	000c      	movs	r4, r1
 8002f6c:	0019      	movs	r1, r3
 8002f6e:	0022      	movs	r2, r4
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	1c9c      	adds	r4, r3, #2
 8002f74:	0008      	movs	r0, r1
 8002f76:	0011      	movs	r1, r2
 8002f78:	f7fd fada 	bl	8000530 <__aeabi_d2uiz>
 8002f7c:	0003      	movs	r3, r0
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	7023      	strb	r3, [r4, #0]
	max31856_wr_reg(&tc[ch],MAX31856_CJTO,&data[2],1);
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	0013      	movs	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	189b      	adds	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4a06      	ldr	r2, [pc, #24]	; (8002fa8 <max31856_write_conf+0x8c>)
 8002f8e:	1898      	adds	r0, r3, r2
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	1c9a      	adds	r2, r3, #2
 8002f94:	2301      	movs	r3, #1
 8002f96:	2109      	movs	r1, #9
 8002f98:	f7ff fef4 	bl	8002d84 <max31856_wr_reg>
}
 8002f9c:	46c0      	nop			; (mov r8, r8)
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b003      	add	sp, #12
 8002fa2:	bd90      	pop	{r4, r7, pc}
 8002fa4:	20000860 	.word	0x20000860
 8002fa8:	20000108 	.word	0x20000108
 8002fac:	3fb00000 	.word	0x3fb00000

08002fb0 <sampleExtCj>:
 * @brief Read sample data from external cold junction STS31 thermal sensor
 * @param ch	Channel number
 * @param mux_ch	mux_ch or not
 */
void sampleExtCj(int ch, int mux_ch)
{
 8002fb0:	b5b0      	push	{r4, r5, r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
	static uint32_t extcjCounter=0;

	float extTemp;
	if (extcjCounter == 0)
 8002fba:	4b4a      	ldr	r3, [pc, #296]	; (80030e4 <sampleExtCj+0x134>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d000      	beq.n	8002fc4 <sampleExtCj+0x14>
 8002fc2:	e07e      	b.n	80030c2 <sampleExtCj+0x112>
	{

		if (EXTCJ_ReadTemperature(&extTemp) == 0)
 8002fc4:	2308      	movs	r3, #8
 8002fc6:	18fb      	adds	r3, r7, r3
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f001 fc3b 	bl	8004844 <EXTCJ_ReadTemperature>
 8002fce:	1e03      	subs	r3, r0, #0
 8002fd0:	d171      	bne.n	80030b6 <sampleExtCj+0x106>
		{
			if (fabs(extTempf[ch] - extTemp) > 0.3)
 8002fd2:	4b45      	ldr	r3, [pc, #276]	; (80030e8 <sampleExtCj+0x138>)
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	0092      	lsls	r2, r2, #2
 8002fd8:	58d3      	ldr	r3, [r2, r3]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	1c11      	adds	r1, r2, #0
 8002fde:	1c18      	adds	r0, r3, #0
 8002fe0:	f7fd fdca 	bl	8000b78 <__aeabi_fsub>
 8002fe4:	1c03      	adds	r3, r0, #0
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	085b      	lsrs	r3, r3, #1
 8002fea:	1c18      	adds	r0, r3, #0
 8002fec:	f7ff fdb0 	bl	8002b50 <__aeabi_f2d>
 8002ff0:	4a3e      	ldr	r2, [pc, #248]	; (80030ec <sampleExtCj+0x13c>)
 8002ff2:	4b3f      	ldr	r3, [pc, #252]	; (80030f0 <sampleExtCj+0x140>)
 8002ff4:	f7fd fa3e 	bl	8000474 <__aeabi_dcmpgt>
 8002ff8:	1e03      	subs	r3, r0, #0
 8002ffa:	d005      	beq.n	8003008 <sampleExtCj+0x58>
				extTempf[ch] = extTemp;
 8002ffc:	68b9      	ldr	r1, [r7, #8]
 8002ffe:	4b3a      	ldr	r3, [pc, #232]	; (80030e8 <sampleExtCj+0x138>)
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	0092      	lsls	r2, r2, #2
 8003004:	50d1      	str	r1, [r2, r3]
 8003006:	e027      	b.n	8003058 <sampleExtCj+0xa8>
			else
				extTempf[ch] = extTempf[ch] * 0.99 +  extTemp *0.01;
 8003008:	4b37      	ldr	r3, [pc, #220]	; (80030e8 <sampleExtCj+0x138>)
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	0092      	lsls	r2, r2, #2
 800300e:	58d3      	ldr	r3, [r2, r3]
 8003010:	1c18      	adds	r0, r3, #0
 8003012:	f7ff fd9d 	bl	8002b50 <__aeabi_f2d>
 8003016:	4a37      	ldr	r2, [pc, #220]	; (80030f4 <sampleExtCj+0x144>)
 8003018:	4b37      	ldr	r3, [pc, #220]	; (80030f8 <sampleExtCj+0x148>)
 800301a:	f7fe ff21 	bl	8001e60 <__aeabi_dmul>
 800301e:	0003      	movs	r3, r0
 8003020:	000c      	movs	r4, r1
 8003022:	0025      	movs	r5, r4
 8003024:	001c      	movs	r4, r3
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	1c18      	adds	r0, r3, #0
 800302a:	f7ff fd91 	bl	8002b50 <__aeabi_f2d>
 800302e:	4a33      	ldr	r2, [pc, #204]	; (80030fc <sampleExtCj+0x14c>)
 8003030:	4b33      	ldr	r3, [pc, #204]	; (8003100 <sampleExtCj+0x150>)
 8003032:	f7fe ff15 	bl	8001e60 <__aeabi_dmul>
 8003036:	0002      	movs	r2, r0
 8003038:	000b      	movs	r3, r1
 800303a:	0020      	movs	r0, r4
 800303c:	0029      	movs	r1, r5
 800303e:	f7fd ffe9 	bl	8001014 <__aeabi_dadd>
 8003042:	0003      	movs	r3, r0
 8003044:	000c      	movs	r4, r1
 8003046:	0018      	movs	r0, r3
 8003048:	0021      	movs	r1, r4
 800304a:	f7ff fdd3 	bl	8002bf4 <__aeabi_d2f>
 800304e:	1c01      	adds	r1, r0, #0
 8003050:	4b25      	ldr	r3, [pc, #148]	; (80030e8 <sampleExtCj+0x138>)
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	0092      	lsls	r2, r2, #2
 8003056:	50d1      	str	r1, [r2, r3]

			int16_t max31CJ = 0;
 8003058:	250e      	movs	r5, #14
 800305a:	197b      	adds	r3, r7, r5
 800305c:	2200      	movs	r2, #0
 800305e:	801a      	strh	r2, [r3, #0]

			max31CJ = (extTempf[ch]-extColdJOffset[ch]) / 0.00390625;
 8003060:	4b21      	ldr	r3, [pc, #132]	; (80030e8 <sampleExtCj+0x138>)
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	0092      	lsls	r2, r2, #2
 8003066:	58d0      	ldr	r0, [r2, r3]
 8003068:	4b26      	ldr	r3, [pc, #152]	; (8003104 <sampleExtCj+0x154>)
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	0092      	lsls	r2, r2, #2
 800306e:	58d3      	ldr	r3, [r2, r3]
 8003070:	1c19      	adds	r1, r3, #0
 8003072:	f7fd fd81 	bl	8000b78 <__aeabi_fsub>
 8003076:	1c03      	adds	r3, r0, #0
 8003078:	1c18      	adds	r0, r3, #0
 800307a:	f7ff fd69 	bl	8002b50 <__aeabi_f2d>
 800307e:	2200      	movs	r2, #0
 8003080:	4b21      	ldr	r3, [pc, #132]	; (8003108 <sampleExtCj+0x158>)
 8003082:	f7fe fae3 	bl	800164c <__aeabi_ddiv>
 8003086:	0003      	movs	r3, r0
 8003088:	000c      	movs	r4, r1
 800308a:	001a      	movs	r2, r3
 800308c:	0023      	movs	r3, r4
 800308e:	197c      	adds	r4, r7, r5
 8003090:	0010      	movs	r0, r2
 8003092:	0019      	movs	r1, r3
 8003094:	f7ff fcba 	bl	8002a0c <__aeabi_d2iz>
 8003098:	0003      	movs	r3, r0
 800309a:	8023      	strh	r3, [r4, #0]


			extCJTemp[0] = (max31CJ & 0xFF00)>>8;
 800309c:	197b      	adds	r3, r7, r5
 800309e:	2200      	movs	r2, #0
 80030a0:	5e9b      	ldrsh	r3, [r3, r2]
 80030a2:	121b      	asrs	r3, r3, #8
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	4b19      	ldr	r3, [pc, #100]	; (800310c <sampleExtCj+0x15c>)
 80030a8:	701a      	strb	r2, [r3, #0]
			extCJTemp[1] = (max31CJ & 0xFF);
 80030aa:	197b      	adds	r3, r7, r5
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	4b16      	ldr	r3, [pc, #88]	; (800310c <sampleExtCj+0x15c>)
 80030b2:	705a      	strb	r2, [r3, #1]
	{
		extcjCounter++;
	}
	//dbg_printf("ch : %d - Ext CJ : %f\r\n", ch, extTemp);

}
 80030b4:	e012      	b.n	80030dc <sampleExtCj+0x12c>
			extCjErrCount++;
 80030b6:	4b16      	ldr	r3, [pc, #88]	; (8003110 <sampleExtCj+0x160>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	4b14      	ldr	r3, [pc, #80]	; (8003110 <sampleExtCj+0x160>)
 80030be:	601a      	str	r2, [r3, #0]
}
 80030c0:	e00c      	b.n	80030dc <sampleExtCj+0x12c>
	else if (extcjCounter > 250)
 80030c2:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <sampleExtCj+0x134>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2bfa      	cmp	r3, #250	; 0xfa
 80030c8:	d903      	bls.n	80030d2 <sampleExtCj+0x122>
		extcjCounter=0;
 80030ca:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <sampleExtCj+0x134>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
}
 80030d0:	e004      	b.n	80030dc <sampleExtCj+0x12c>
		extcjCounter++;
 80030d2:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <sampleExtCj+0x134>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	4b02      	ldr	r3, [pc, #8]	; (80030e4 <sampleExtCj+0x134>)
 80030da:	601a      	str	r2, [r3, #0]
}
 80030dc:	46c0      	nop			; (mov r8, r8)
 80030de:	46bd      	mov	sp, r7
 80030e0:	b004      	add	sp, #16
 80030e2:	bdb0      	pop	{r4, r5, r7, pc}
 80030e4:	2000036c 	.word	0x2000036c
 80030e8:	200007a8 	.word	0x200007a8
 80030ec:	33333333 	.word	0x33333333
 80030f0:	3fd33333 	.word	0x3fd33333
 80030f4:	7ae147ae 	.word	0x7ae147ae
 80030f8:	3fefae14 	.word	0x3fefae14
 80030fc:	47ae147b 	.word	0x47ae147b
 8003100:	3f847ae1 	.word	0x3f847ae1
 8003104:	20000860 	.word	0x20000860
 8003108:	3f700000 	.word	0x3f700000
 800310c:	200007b0 	.word	0x200007b0
 8003110:	20000368 	.word	0x20000368

08003114 <max31856_nonmuxed_sample>:
/**
 * @brief Read Thermocouple sensor value. Function is generated for non-muxed thermocouple
 * boards.
 */
void max31856_nonmuxed_sample()
{
 8003114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003116:	b089      	sub	sp, #36	; 0x24
 8003118:	af02      	add	r7, sp, #8
	int32_t temp;
	double tempf = 0;
 800311a:	2300      	movs	r3, #0
 800311c:	2400      	movs	r4, #0
 800311e:	60bb      	str	r3, [r7, #8]
 8003120:	60fc      	str	r4, [r7, #12]
	static uint8_t ch;
	static uint8_t counter;

	if (counter % 4)
 8003122:	4bc3      	ldr	r3, [pc, #780]	; (8003430 <max31856_nonmuxed_sample+0x31c>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2203      	movs	r2, #3
 8003128:	4013      	ands	r3, r2
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d006      	beq.n	800313e <max31856_nonmuxed_sample+0x2a>
		counter ++;
 8003130:	4bbf      	ldr	r3, [pc, #764]	; (8003430 <max31856_nonmuxed_sample+0x31c>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	3301      	adds	r3, #1
 8003136:	b2da      	uxtb	r2, r3
 8003138:	4bbd      	ldr	r3, [pc, #756]	; (8003430 <max31856_nonmuxed_sample+0x31c>)
 800313a:	701a      	strb	r2, [r3, #0]
		}

		counter = 0;
	}

}
 800313c:	e174      	b.n	8003428 <max31856_nonmuxed_sample+0x314>
		if (gExtCjEnabled)
 800313e:	4bbd      	ldr	r3, [pc, #756]	; (8003434 <max31856_nonmuxed_sample+0x320>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d005      	beq.n	8003152 <max31856_nonmuxed_sample+0x3e>
			sampleExtCj(ch, 0);
 8003146:	4bbc      	ldr	r3, [pc, #752]	; (8003438 <max31856_nonmuxed_sample+0x324>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2100      	movs	r1, #0
 800314c:	0018      	movs	r0, r3
 800314e:	f7ff ff2f 	bl	8002fb0 <sampleExtCj>
		if (gExtCjEnabled)
 8003152:	4bb8      	ldr	r3, [pc, #736]	; (8003434 <max31856_nonmuxed_sample+0x320>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00d      	beq.n	8003176 <max31856_nonmuxed_sample+0x62>
			max31856_wr_reg(&tc[ch],MAX31856_CJTH,&extCJTemp[0],2);
 800315a:	4bb7      	ldr	r3, [pc, #732]	; (8003438 <max31856_nonmuxed_sample+0x324>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	001a      	movs	r2, r3
 8003160:	0013      	movs	r3, r2
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	189b      	adds	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4ab4      	ldr	r2, [pc, #720]	; (800343c <max31856_nonmuxed_sample+0x328>)
 800316a:	1898      	adds	r0, r3, r2
 800316c:	4ab4      	ldr	r2, [pc, #720]	; (8003440 <max31856_nonmuxed_sample+0x32c>)
 800316e:	2302      	movs	r3, #2
 8003170:	210a      	movs	r1, #10
 8003172:	f7ff fe07 	bl	8002d84 <max31856_wr_reg>
		HAL_Delay(100);
 8003176:	2064      	movs	r0, #100	; 0x64
 8003178:	f002 fb54 	bl	8005824 <HAL_Delay>
		max31856_rd_reg(&tc[ch],MAX31856_READ_START,&tempData[ch][0],MAX31856_READ_SIZE);
 800317c:	4bae      	ldr	r3, [pc, #696]	; (8003438 <max31856_nonmuxed_sample+0x324>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	001a      	movs	r2, r3
 8003182:	0013      	movs	r3, r2
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	189b      	adds	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4aac      	ldr	r2, [pc, #688]	; (800343c <max31856_nonmuxed_sample+0x328>)
 800318c:	1898      	adds	r0, r3, r2
 800318e:	4baa      	ldr	r3, [pc, #680]	; (8003438 <max31856_nonmuxed_sample+0x324>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	001a      	movs	r2, r3
 8003194:	0013      	movs	r3, r2
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	189b      	adds	r3, r3, r2
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	4aa9      	ldr	r2, [pc, #676]	; (8003444 <max31856_nonmuxed_sample+0x330>)
 800319e:	189a      	adds	r2, r3, r2
 80031a0:	2306      	movs	r3, #6
 80031a2:	210a      	movs	r1, #10
 80031a4:	f7ff fe2a 	bl	8002dfc <max31856_rd_reg>
			temp =  (int32_t)tempData[ch][2] << 16;
 80031a8:	4ba3      	ldr	r3, [pc, #652]	; (8003438 <max31856_nonmuxed_sample+0x324>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	0019      	movs	r1, r3
 80031ae:	4aa5      	ldr	r2, [pc, #660]	; (8003444 <max31856_nonmuxed_sample+0x330>)
 80031b0:	000b      	movs	r3, r1
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	185b      	adds	r3, r3, r1
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	18d3      	adds	r3, r2, r3
 80031ba:	3302      	adds	r3, #2
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	041b      	lsls	r3, r3, #16
 80031c0:	617b      	str	r3, [r7, #20]
			temp |= (int32_t)tempData[ch][3] << 8;
 80031c2:	4b9d      	ldr	r3, [pc, #628]	; (8003438 <max31856_nonmuxed_sample+0x324>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	0019      	movs	r1, r3
 80031c8:	4a9e      	ldr	r2, [pc, #632]	; (8003444 <max31856_nonmuxed_sample+0x330>)
 80031ca:	000b      	movs	r3, r1
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	185b      	adds	r3, r3, r1
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	18d3      	adds	r3, r2, r3
 80031d4:	3303      	adds	r3, #3
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4313      	orrs	r3, r2
 80031de:	617b      	str	r3, [r7, #20]
			temp |= (int32_t)tempData[ch][4];
 80031e0:	4b95      	ldr	r3, [pc, #596]	; (8003438 <max31856_nonmuxed_sample+0x324>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	0019      	movs	r1, r3
 80031e6:	4a97      	ldr	r2, [pc, #604]	; (8003444 <max31856_nonmuxed_sample+0x330>)
 80031e8:	000b      	movs	r3, r1
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	185b      	adds	r3, r3, r1
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	18d3      	adds	r3, r2, r3
 80031f2:	3304      	adds	r3, #4
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	001a      	movs	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]
			if (temp & 0x00800000)
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	2380      	movs	r3, #128	; 0x80
 8003202:	041b      	lsls	r3, r3, #16
 8003204:	4013      	ands	r3, r2
 8003206:	d004      	beq.n	8003212 <max31856_nonmuxed_sample+0xfe>
				temp |= 0xFF000000;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	22ff      	movs	r2, #255	; 0xff
 800320c:	0612      	lsls	r2, r2, #24
 800320e:	4313      	orrs	r3, r2
 8003210:	617b      	str	r3, [r7, #20]
			temp = temp >> 5;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	115b      	asrs	r3, r3, #5
 8003216:	617b      	str	r3, [r7, #20]
			tempf = (float) temp * 0.0078125f;
 8003218:	6978      	ldr	r0, [r7, #20]
 800321a:	f7fd fe71 	bl	8000f00 <__aeabi_i2f>
 800321e:	1c03      	adds	r3, r0, #0
 8003220:	21f0      	movs	r1, #240	; 0xf0
 8003222:	0589      	lsls	r1, r1, #22
 8003224:	1c18      	adds	r0, r3, #0
 8003226:	f7fd fb75 	bl	8000914 <__aeabi_fmul>
 800322a:	1c03      	adds	r3, r0, #0
 800322c:	1c18      	adds	r0, r3, #0
 800322e:	f7ff fc8f 	bl	8002b50 <__aeabi_f2d>
 8003232:	0003      	movs	r3, r0
 8003234:	000c      	movs	r4, r1
 8003236:	60bb      	str	r3, [r7, #8]
 8003238:	60fc      	str	r4, [r7, #12]
			if (fabs(tempf - tempSkip[ch]) > 25)
 800323a:	4b7f      	ldr	r3, [pc, #508]	; (8003438 <max31856_nonmuxed_sample+0x324>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	4a82      	ldr	r2, [pc, #520]	; (8003448 <max31856_nonmuxed_sample+0x334>)
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	18d3      	adds	r3, r2, r3
 8003244:	685c      	ldr	r4, [r3, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	001a      	movs	r2, r3
 800324a:	0023      	movs	r3, r4
 800324c:	68b8      	ldr	r0, [r7, #8]
 800324e:	68f9      	ldr	r1, [r7, #12]
 8003250:	f7ff f878 	bl	8002344 <__aeabi_dsub>
 8003254:	0003      	movs	r3, r0
 8003256:	000c      	movs	r4, r1
 8003258:	001a      	movs	r2, r3
 800325a:	603a      	str	r2, [r7, #0]
 800325c:	0063      	lsls	r3, r4, #1
 800325e:	085b      	lsrs	r3, r3, #1
 8003260:	607b      	str	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	4b79      	ldr	r3, [pc, #484]	; (800344c <max31856_nonmuxed_sample+0x338>)
 8003266:	6838      	ldr	r0, [r7, #0]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	f7fd f903 	bl	8000474 <__aeabi_dcmpgt>
 800326e:	1e03      	subs	r3, r0, #0
 8003270:	d008      	beq.n	8003284 <max31856_nonmuxed_sample+0x170>
				tempSkip[ch] = tempf;
 8003272:	4b71      	ldr	r3, [pc, #452]	; (8003438 <max31856_nonmuxed_sample+0x324>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	4a74      	ldr	r2, [pc, #464]	; (8003448 <max31856_nonmuxed_sample+0x334>)
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	18d2      	adds	r2, r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	68fc      	ldr	r4, [r7, #12]
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	6054      	str	r4, [r2, #4]
			if (fabs(filterData[ch]-tempf) > 0.3f)
 8003284:	4b6c      	ldr	r3, [pc, #432]	; (8003438 <max31856_nonmuxed_sample+0x324>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	4a71      	ldr	r2, [pc, #452]	; (8003450 <max31856_nonmuxed_sample+0x33c>)
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	18d3      	adds	r3, r2, r3
 800328e:	6818      	ldr	r0, [r3, #0]
 8003290:	6859      	ldr	r1, [r3, #4]
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f7ff f855 	bl	8002344 <__aeabi_dsub>
 800329a:	0003      	movs	r3, r0
 800329c:	000c      	movs	r4, r1
 800329e:	001a      	movs	r2, r3
 80032a0:	0015      	movs	r5, r2
 80032a2:	0063      	lsls	r3, r4, #1
 80032a4:	085e      	lsrs	r6, r3, #1
 80032a6:	2280      	movs	r2, #128	; 0x80
 80032a8:	05d2      	lsls	r2, r2, #23
 80032aa:	4b6a      	ldr	r3, [pc, #424]	; (8003454 <max31856_nonmuxed_sample+0x340>)
 80032ac:	0028      	movs	r0, r5
 80032ae:	0031      	movs	r1, r6
 80032b0:	f7fd f8e0 	bl	8000474 <__aeabi_dcmpgt>
 80032b4:	1e03      	subs	r3, r0, #0
 80032b6:	d009      	beq.n	80032cc <max31856_nonmuxed_sample+0x1b8>
				filterData[ch] = tempf;
 80032b8:	4b5f      	ldr	r3, [pc, #380]	; (8003438 <max31856_nonmuxed_sample+0x324>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	4a64      	ldr	r2, [pc, #400]	; (8003450 <max31856_nonmuxed_sample+0x33c>)
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	18d2      	adds	r2, r2, r3
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	68fc      	ldr	r4, [r7, #12]
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	6054      	str	r4, [r2, #4]
 80032ca:	e02a      	b.n	8003322 <max31856_nonmuxed_sample+0x20e>
				filterData[ch] = filterData[ch]*0.998f + ((double)tempf)*0.002f;
 80032cc:	4b5a      	ldr	r3, [pc, #360]	; (8003438 <max31856_nonmuxed_sample+0x324>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	4a5f      	ldr	r2, [pc, #380]	; (8003450 <max31856_nonmuxed_sample+0x33c>)
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	18d3      	adds	r3, r2, r3
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	6859      	ldr	r1, [r3, #4]
 80032da:	22c0      	movs	r2, #192	; 0xc0
 80032dc:	0612      	lsls	r2, r2, #24
 80032de:	4b5e      	ldr	r3, [pc, #376]	; (8003458 <max31856_nonmuxed_sample+0x344>)
 80032e0:	f7fe fdbe 	bl	8001e60 <__aeabi_dmul>
 80032e4:	0003      	movs	r3, r0
 80032e6:	000c      	movs	r4, r1
 80032e8:	603b      	str	r3, [r7, #0]
 80032ea:	607c      	str	r4, [r7, #4]
 80032ec:	22e0      	movs	r2, #224	; 0xe0
 80032ee:	0612      	lsls	r2, r2, #24
 80032f0:	4b5a      	ldr	r3, [pc, #360]	; (800345c <max31856_nonmuxed_sample+0x348>)
 80032f2:	68b8      	ldr	r0, [r7, #8]
 80032f4:	68f9      	ldr	r1, [r7, #12]
 80032f6:	f7fe fdb3 	bl	8001e60 <__aeabi_dmul>
 80032fa:	0003      	movs	r3, r0
 80032fc:	000c      	movs	r4, r1
 80032fe:	0019      	movs	r1, r3
 8003300:	0022      	movs	r2, r4
 8003302:	4b4d      	ldr	r3, [pc, #308]	; (8003438 <max31856_nonmuxed_sample+0x324>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	001d      	movs	r5, r3
 8003308:	0013      	movs	r3, r2
 800330a:	000a      	movs	r2, r1
 800330c:	6838      	ldr	r0, [r7, #0]
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	f7fd fe80 	bl	8001014 <__aeabi_dadd>
 8003314:	0003      	movs	r3, r0
 8003316:	000c      	movs	r4, r1
 8003318:	494d      	ldr	r1, [pc, #308]	; (8003450 <max31856_nonmuxed_sample+0x33c>)
 800331a:	00ea      	lsls	r2, r5, #3
 800331c:	188a      	adds	r2, r1, r2
 800331e:	6013      	str	r3, [r2, #0]
 8003320:	6054      	str	r4, [r2, #4]
			temp =  (filterData[ch] / 0.0078125f);
 8003322:	4b45      	ldr	r3, [pc, #276]	; (8003438 <max31856_nonmuxed_sample+0x324>)
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	4a4a      	ldr	r2, [pc, #296]	; (8003450 <max31856_nonmuxed_sample+0x33c>)
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	18d3      	adds	r3, r2, r3
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	6859      	ldr	r1, [r3, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	23fe      	movs	r3, #254	; 0xfe
 8003334:	059b      	lsls	r3, r3, #22
 8003336:	f7fe f989 	bl	800164c <__aeabi_ddiv>
 800333a:	0003      	movs	r3, r0
 800333c:	000c      	movs	r4, r1
 800333e:	0018      	movs	r0, r3
 8003340:	0021      	movs	r1, r4
 8003342:	f7ff fb63 	bl	8002a0c <__aeabi_d2iz>
 8003346:	0003      	movs	r3, r0
 8003348:	617b      	str	r3, [r7, #20]
			temp = temp << 5;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	015b      	lsls	r3, r3, #5
 800334e:	617b      	str	r3, [r7, #20]
			tempData[ch][2] = (temp & 0x00FF0000) >> 16;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	141a      	asrs	r2, r3, #16
 8003354:	4b38      	ldr	r3, [pc, #224]	; (8003438 <max31856_nonmuxed_sample+0x324>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	0019      	movs	r1, r3
 800335a:	b2d0      	uxtb	r0, r2
 800335c:	4a39      	ldr	r2, [pc, #228]	; (8003444 <max31856_nonmuxed_sample+0x330>)
 800335e:	000b      	movs	r3, r1
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	185b      	adds	r3, r3, r1
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	18d3      	adds	r3, r2, r3
 8003368:	3302      	adds	r3, #2
 800336a:	1c02      	adds	r2, r0, #0
 800336c:	701a      	strb	r2, [r3, #0]
			tempData[ch][3] = (temp & 0x0000FF00) >> 8;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	121a      	asrs	r2, r3, #8
 8003372:	4b31      	ldr	r3, [pc, #196]	; (8003438 <max31856_nonmuxed_sample+0x324>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	0019      	movs	r1, r3
 8003378:	b2d0      	uxtb	r0, r2
 800337a:	4a32      	ldr	r2, [pc, #200]	; (8003444 <max31856_nonmuxed_sample+0x330>)
 800337c:	000b      	movs	r3, r1
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	185b      	adds	r3, r3, r1
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	18d3      	adds	r3, r2, r3
 8003386:	3303      	adds	r3, #3
 8003388:	1c02      	adds	r2, r0, #0
 800338a:	701a      	strb	r2, [r3, #0]
			tempData[ch][4] = (temp & 0x000000FF);
 800338c:	4b2a      	ldr	r3, [pc, #168]	; (8003438 <max31856_nonmuxed_sample+0x324>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	0019      	movs	r1, r3
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	b2d8      	uxtb	r0, r3
 8003396:	4a2b      	ldr	r2, [pc, #172]	; (8003444 <max31856_nonmuxed_sample+0x330>)
 8003398:	000b      	movs	r3, r1
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	185b      	adds	r3, r3, r1
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	18d3      	adds	r3, r2, r3
 80033a2:	3304      	adds	r3, #4
 80033a4:	1c02      	adds	r2, r0, #0
 80033a6:	701a      	strb	r2, [r3, #0]
		dbg_printf("ch[%d]: %f -- %x \n",ch, tempf, tempData[ch][5]);
 80033a8:	4b23      	ldr	r3, [pc, #140]	; (8003438 <max31856_nonmuxed_sample+0x324>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	001d      	movs	r5, r3
 80033ae:	4b22      	ldr	r3, [pc, #136]	; (8003438 <max31856_nonmuxed_sample+0x324>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	0019      	movs	r1, r3
 80033b4:	4a23      	ldr	r2, [pc, #140]	; (8003444 <max31856_nonmuxed_sample+0x330>)
 80033b6:	000b      	movs	r3, r1
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	185b      	adds	r3, r3, r1
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	18d3      	adds	r3, r2, r3
 80033c0:	3305      	adds	r3, #5
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	001a      	movs	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	68fc      	ldr	r4, [r7, #12]
 80033ca:	4825      	ldr	r0, [pc, #148]	; (8003460 <max31856_nonmuxed_sample+0x34c>)
 80033cc:	9200      	str	r2, [sp, #0]
 80033ce:	001a      	movs	r2, r3
 80033d0:	0023      	movs	r3, r4
 80033d2:	0029      	movs	r1, r5
 80033d4:	f007 fdde 	bl	800af94 <iprintf>
		memcpy(&gMAX31856_buffer[ch*MAX31856_READ_SIZE],&tempData[ch],MAX31856_READ_SIZE);
 80033d8:	4b17      	ldr	r3, [pc, #92]	; (8003438 <max31856_nonmuxed_sample+0x324>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	001a      	movs	r2, r3
 80033de:	0013      	movs	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	189b      	adds	r3, r3, r2
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	001a      	movs	r2, r3
 80033e8:	4b1e      	ldr	r3, [pc, #120]	; (8003464 <max31856_nonmuxed_sample+0x350>)
 80033ea:	18d0      	adds	r0, r2, r3
 80033ec:	4b12      	ldr	r3, [pc, #72]	; (8003438 <max31856_nonmuxed_sample+0x324>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	001a      	movs	r2, r3
 80033f2:	0013      	movs	r3, r2
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	189b      	adds	r3, r3, r2
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	4a12      	ldr	r2, [pc, #72]	; (8003444 <max31856_nonmuxed_sample+0x330>)
 80033fc:	189b      	adds	r3, r3, r2
 80033fe:	2206      	movs	r2, #6
 8003400:	0019      	movs	r1, r3
 8003402:	f006 ff5a 	bl	800a2ba <memcpy>
		if(ch >= 3)
 8003406:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <max31856_nonmuxed_sample+0x324>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d903      	bls.n	8003416 <max31856_nonmuxed_sample+0x302>
			ch=0;
 800340e:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <max31856_nonmuxed_sample+0x324>)
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]
 8003414:	e005      	b.n	8003422 <max31856_nonmuxed_sample+0x30e>
			ch++;
 8003416:	4b08      	ldr	r3, [pc, #32]	; (8003438 <max31856_nonmuxed_sample+0x324>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	3301      	adds	r3, #1
 800341c:	b2da      	uxtb	r2, r3
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <max31856_nonmuxed_sample+0x324>)
 8003420:	701a      	strb	r2, [r3, #0]
		counter = 0;
 8003422:	4b03      	ldr	r3, [pc, #12]	; (8003430 <max31856_nonmuxed_sample+0x31c>)
 8003424:	2200      	movs	r2, #0
 8003426:	701a      	strb	r2, [r3, #0]
}
 8003428:	46c0      	nop			; (mov r8, r8)
 800342a:	46bd      	mov	sp, r7
 800342c:	b007      	add	sp, #28
 800342e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003430:	20000370 	.word	0x20000370
 8003434:	20000364 	.word	0x20000364
 8003438:	20000371 	.word	0x20000371
 800343c:	20000108 	.word	0x20000108
 8003440:	200007b0 	.word	0x200007b0
 8003444:	20000848 	.word	0x20000848
 8003448:	20000828 	.word	0x20000828
 800344c:	40390000 	.word	0x40390000
 8003450:	200007e8 	.word	0x200007e8
 8003454:	3fd33333 	.word	0x3fd33333
 8003458:	3fefef9d 	.word	0x3fefef9d
 800345c:	3f60624d 	.word	0x3f60624d
 8003460:	0800e8e0 	.word	0x0800e8e0
 8003464:	20000790 	.word	0x20000790

08003468 <max31856_init>:
 * @param cr0	cr0 configuration
 * @param cr1	cr1 configuration
 * @return	0 or 1
 */
int max31856_init(tMAX31856 *ch,uint8_t cr0,uint8_t cr1)
{
 8003468:	b590      	push	{r4, r7, lr}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	0008      	movs	r0, r1
 8003472:	0011      	movs	r1, r2
 8003474:	1cfb      	adds	r3, r7, #3
 8003476:	1c02      	adds	r2, r0, #0
 8003478:	701a      	strb	r2, [r3, #0]
 800347a:	1cbb      	adds	r3, r7, #2
 800347c:	1c0a      	adds	r2, r1, #0
 800347e:	701a      	strb	r2, [r3, #0]
	uint8_t datar[2] = {0};
 8003480:	2308      	movs	r3, #8
 8003482:	18fb      	adds	r3, r7, r3
 8003484:	2200      	movs	r2, #0
 8003486:	801a      	strh	r2, [r3, #0]

	for (int i=0;i<10;i++)
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	e03a      	b.n	8003504 <max31856_init+0x9c>
	{
		max31856_wr_reg(ch,MAX31856_CR0,&cr0,1);
 800348e:	1cfa      	adds	r2, r7, #3
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	2301      	movs	r3, #1
 8003494:	2100      	movs	r1, #0
 8003496:	f7ff fc75 	bl	8002d84 <max31856_wr_reg>
		max31856_wr_reg(ch,MAX31856_CR1,&cr1,1);
 800349a:	1cba      	adds	r2, r7, #2
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	2301      	movs	r3, #1
 80034a0:	2101      	movs	r1, #1
 80034a2:	f7ff fc6f 	bl	8002d84 <max31856_wr_reg>

		max31856_rd_reg(ch,MAX31856_CR0,&datar[0],1);
 80034a6:	2408      	movs	r4, #8
 80034a8:	193a      	adds	r2, r7, r4
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	2301      	movs	r3, #1
 80034ae:	2100      	movs	r1, #0
 80034b0:	f7ff fca4 	bl	8002dfc <max31856_rd_reg>
		max31856_rd_reg(ch,MAX31856_CR1,&datar[1],1);
 80034b4:	193b      	adds	r3, r7, r4
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	2301      	movs	r3, #1
 80034bc:	2101      	movs	r1, #1
 80034be:	f7ff fc9d 	bl	8002dfc <max31856_rd_reg>
		ch->flags |= MAX31856_F_INIT_VALID;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	2201      	movs	r2, #1
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	609a      	str	r2, [r3, #8]
		if ((cr0 == datar[0]) && (cr1 == datar[1]))
 80034ce:	193b      	adds	r3, r7, r4
 80034d0:	781a      	ldrb	r2, [r3, #0]
 80034d2:	1cfb      	adds	r3, r7, #3
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d10e      	bne.n	80034f8 <max31856_init+0x90>
 80034da:	2308      	movs	r3, #8
 80034dc:	18fb      	adds	r3, r7, r3
 80034de:	785a      	ldrb	r2, [r3, #1]
 80034e0:	1cbb      	adds	r3, r7, #2
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d107      	bne.n	80034f8 <max31856_init+0x90>
		{
			ch->flags |= MAX31856_F_INIT_VALID;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2201      	movs	r2, #1
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	609a      	str	r2, [r3, #8]
			return 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	e009      	b.n	800350c <max31856_init+0xa4>
		}
		HAL_Delay(10);
 80034f8:	200a      	movs	r0, #10
 80034fa:	f002 f993 	bl	8005824 <HAL_Delay>
	for (int i=0;i<10;i++)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	3301      	adds	r3, #1
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2b09      	cmp	r3, #9
 8003508:	ddc1      	ble.n	800348e <max31856_init+0x26>
	}
	return 1;
 800350a:	2301      	movs	r3, #1
}
 800350c:	0018      	movs	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	b005      	add	sp, #20
 8003512:	bd90      	pop	{r4, r7, pc}

08003514 <tc_init>:

/*****************************************************************************/
void tc_init(int extcj)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
	dbg_printf("Init TCs\n");
 800351c:	4b5e      	ldr	r3, [pc, #376]	; (8003698 <tc_init+0x184>)
 800351e:	0018      	movs	r0, r3
 8003520:	f007 fdb2 	bl	800b088 <puts>
	if (extcj < 0)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	da04      	bge.n	8003534 <tc_init+0x20>
	{
		dbg_printf("ExtCj Init Internal Err\n");
 800352a:	4b5c      	ldr	r3, [pc, #368]	; (800369c <tc_init+0x188>)
 800352c:	0018      	movs	r0, r3
 800352e:	f007 fdab 	bl	800b088 <puts>
 8003532:	e019      	b.n	8003568 <tc_init+0x54>
	}
	else if (extcj == 1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d116      	bne.n	8003568 <tc_init+0x54>
	{
		/** Disable internal CJ sensing */
		gExtCjEnabled = 1; // this is a external CJ enabled board
 800353a:	4b59      	ldr	r3, [pc, #356]	; (80036a0 <tc_init+0x18c>)
 800353c:	2201      	movs	r2, #1
 800353e:	701a      	strb	r2, [r3, #0]

		/** Not a muxed one but has external CJ Sensors */
		for (int i=0;i<MAX_TC_CHANNELS;i++)
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	e00d      	b.n	8003562 <tc_init+0x4e>
		{
			extColdJOffset[i] = gBoardConfig.gConfig_tc.ch_conf[i].cjOffset.cjOff;
 8003546:	4a57      	ldr	r2, [pc, #348]	; (80036a4 <tc_init+0x190>)
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	3301      	adds	r3, #1
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	18d3      	adds	r3, r2, r3
 8003550:	3304      	adds	r3, #4
 8003552:	6819      	ldr	r1, [r3, #0]
 8003554:	4b54      	ldr	r3, [pc, #336]	; (80036a8 <tc_init+0x194>)
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	0092      	lsls	r2, r2, #2
 800355a:	50d1      	str	r1, [r2, r3]
		for (int i=0;i<MAX_TC_CHANNELS;i++)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	3301      	adds	r3, #1
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2b03      	cmp	r3, #3
 8003566:	ddee      	ble.n	8003546 <tc_init+0x32>
		}

	}

	dbg_printf("cj_offset 0: %d", gBoardConfig.gConfig_tc.ch_conf[0].cj_offset);
 8003568:	4b4e      	ldr	r3, [pc, #312]	; (80036a4 <tc_init+0x190>)
 800356a:	7a9b      	ldrb	r3, [r3, #10]
 800356c:	b25b      	sxtb	r3, r3
 800356e:	001a      	movs	r2, r3
 8003570:	4b4e      	ldr	r3, [pc, #312]	; (80036ac <tc_init+0x198>)
 8003572:	0011      	movs	r1, r2
 8003574:	0018      	movs	r0, r3
 8003576:	f007 fd0d 	bl	800af94 <iprintf>
	dbg_printf("cj_offset 1: %d", gBoardConfig.gConfig_tc.ch_conf[1].cj_offset);
 800357a:	4b4a      	ldr	r3, [pc, #296]	; (80036a4 <tc_init+0x190>)
 800357c:	7c9b      	ldrb	r3, [r3, #18]
 800357e:	b25b      	sxtb	r3, r3
 8003580:	001a      	movs	r2, r3
 8003582:	4b4b      	ldr	r3, [pc, #300]	; (80036b0 <tc_init+0x19c>)
 8003584:	0011      	movs	r1, r2
 8003586:	0018      	movs	r0, r3
 8003588:	f007 fd04 	bl	800af94 <iprintf>
	dbg_printf("cj_offset 2: %d", gBoardConfig.gConfig_tc.ch_conf[2].cj_offset);
 800358c:	4b45      	ldr	r3, [pc, #276]	; (80036a4 <tc_init+0x190>)
 800358e:	7e9b      	ldrb	r3, [r3, #26]
 8003590:	b25b      	sxtb	r3, r3
 8003592:	001a      	movs	r2, r3
 8003594:	4b47      	ldr	r3, [pc, #284]	; (80036b4 <tc_init+0x1a0>)
 8003596:	0011      	movs	r1, r2
 8003598:	0018      	movs	r0, r3
 800359a:	f007 fcfb 	bl	800af94 <iprintf>
	dbg_printf("cj_offset 3: %d", gBoardConfig.gConfig_tc.ch_conf[3].cj_offset);
 800359e:	4b41      	ldr	r3, [pc, #260]	; (80036a4 <tc_init+0x190>)
 80035a0:	2222      	movs	r2, #34	; 0x22
 80035a2:	569b      	ldrsb	r3, [r3, r2]
 80035a4:	001a      	movs	r2, r3
 80035a6:	4b44      	ldr	r3, [pc, #272]	; (80036b8 <tc_init+0x1a4>)
 80035a8:	0011      	movs	r1, r2
 80035aa:	0018      	movs	r0, r3
 80035ac:	f007 fcf2 	bl	800af94 <iprintf>
	dbg_printf("cr0 : %x", gBoardConfig.gConfig_tc.ch_conf[0].cr0);
 80035b0:	4b3c      	ldr	r3, [pc, #240]	; (80036a4 <tc_init+0x190>)
 80035b2:	7a1b      	ldrb	r3, [r3, #8]
 80035b4:	001a      	movs	r2, r3
 80035b6:	4b41      	ldr	r3, [pc, #260]	; (80036bc <tc_init+0x1a8>)
 80035b8:	0011      	movs	r1, r2
 80035ba:	0018      	movs	r0, r3
 80035bc:	f007 fcea 	bl	800af94 <iprintf>
	dbg_printf("cr1 : %x\r\n", gBoardConfig.gConfig_tc.ch_conf[0].cr1);
 80035c0:	4b38      	ldr	r3, [pc, #224]	; (80036a4 <tc_init+0x190>)
 80035c2:	7a5b      	ldrb	r3, [r3, #9]
 80035c4:	001a      	movs	r2, r3
 80035c6:	4b3e      	ldr	r3, [pc, #248]	; (80036c0 <tc_init+0x1ac>)
 80035c8:	0011      	movs	r1, r2
 80035ca:	0018      	movs	r0, r3
 80035cc:	f007 fce2 	bl	800af94 <iprintf>


	uint32_t try = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	613b      	str	r3, [r7, #16]

	for (int i=0;i<MAX_TC_CHANNELS;i++)
 80035d4:	2300      	movs	r3, #0
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	e057      	b.n	800368a <tc_init+0x176>
	{
		max31856_deselect(&tc[i]);
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	0013      	movs	r3, r2
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	189b      	adds	r3, r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4a37      	ldr	r2, [pc, #220]	; (80036c4 <tc_init+0x1b0>)
 80035e6:	189b      	adds	r3, r3, r2
 80035e8:	0018      	movs	r0, r3
 80035ea:	f7ff fbbe 	bl	8002d6a <max31856_deselect>
		HAL_Delay(10);
 80035ee:	200a      	movs	r0, #10
 80035f0:	f002 f918 	bl	8005824 <HAL_Delay>

		try = 0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	613b      	str	r3, [r7, #16]
		while(try < 20)
 80035f8:	e041      	b.n	800367e <tc_init+0x16a>
		{
			if (!max31856_init(&tc[i],gBoardConfig.gConfig_tc.ch_conf[i].cr0,gBoardConfig.gConfig_tc.ch_conf[i].cr1))
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	0013      	movs	r3, r2
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	189b      	adds	r3, r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4a2f      	ldr	r2, [pc, #188]	; (80036c4 <tc_init+0x1b0>)
 8003606:	1898      	adds	r0, r3, r2
 8003608:	4b26      	ldr	r3, [pc, #152]	; (80036a4 <tc_init+0x190>)
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	3201      	adds	r2, #1
 800360e:	00d2      	lsls	r2, r2, #3
 8003610:	5cd1      	ldrb	r1, [r2, r3]
 8003612:	4a24      	ldr	r2, [pc, #144]	; (80036a4 <tc_init+0x190>)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	3301      	adds	r3, #1
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	18d3      	adds	r3, r2, r3
 800361c:	3301      	adds	r3, #1
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	001a      	movs	r2, r3
 8003622:	f7ff ff21 	bl	8003468 <max31856_init>
 8003626:	1e03      	subs	r3, r0, #0
 8003628:	d11c      	bne.n	8003664 <tc_init+0x150>
			{
				if (!gExtCjEnabled)
 800362a:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <tc_init+0x18c>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d110      	bne.n	8003654 <tc_init+0x140>
					max31856_wr_reg(&tc[i],MAX31856_CJTO,(unsigned char* )&gBoardConfig.gConfig_tc.ch_conf[i].cj_offset,1);
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	0013      	movs	r3, r2
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	189b      	adds	r3, r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4a21      	ldr	r2, [pc, #132]	; (80036c4 <tc_init+0x1b0>)
 800363e:	1898      	adds	r0, r3, r2
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	3301      	adds	r3, #1
 8003644:	00da      	lsls	r2, r3, #3
 8003646:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <tc_init+0x190>)
 8003648:	18d3      	adds	r3, r2, r3
 800364a:	1c9a      	adds	r2, r3, #2
 800364c:	2301      	movs	r3, #1
 800364e:	2109      	movs	r1, #9
 8003650:	f7ff fb98 	bl	8002d84 <max31856_wr_reg>
				dbg_printf("TC Ch %d OK\n",i+1);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	4b1b      	ldr	r3, [pc, #108]	; (80036c8 <tc_init+0x1b4>)
 800365a:	0011      	movs	r1, r2
 800365c:	0018      	movs	r0, r3
 800365e:	f007 fc99 	bl	800af94 <iprintf>
				break;
 8003662:	e00f      	b.n	8003684 <tc_init+0x170>
			}
			else
			{
				dbg_printf("TC Ch %d Fail\n",i+1);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	4b18      	ldr	r3, [pc, #96]	; (80036cc <tc_init+0x1b8>)
 800366a:	0011      	movs	r1, r2
 800366c:	0018      	movs	r0, r3
 800366e:	f007 fc91 	bl	800af94 <iprintf>
			}
			HAL_Delay(10);
 8003672:	200a      	movs	r0, #10
 8003674:	f002 f8d6 	bl	8005824 <HAL_Delay>
			try++;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	3301      	adds	r3, #1
 800367c:	613b      	str	r3, [r7, #16]
		while(try < 20)
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	2b13      	cmp	r3, #19
 8003682:	d9ba      	bls.n	80035fa <tc_init+0xe6>
	for (int i=0;i<MAX_TC_CHANNELS;i++)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	3301      	adds	r3, #1
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b03      	cmp	r3, #3
 800368e:	dda4      	ble.n	80035da <tc_init+0xc6>
		}
	}

}
 8003690:	46c0      	nop			; (mov r8, r8)
 8003692:	46bd      	mov	sp, r7
 8003694:	b006      	add	sp, #24
 8003696:	bd80      	pop	{r7, pc}
 8003698:	0800e8f4 	.word	0x0800e8f4
 800369c:	0800e900 	.word	0x0800e900
 80036a0:	20000364 	.word	0x20000364
 80036a4:	200007b4 	.word	0x200007b4
 80036a8:	20000860 	.word	0x20000860
 80036ac:	0800e918 	.word	0x0800e918
 80036b0:	0800e928 	.word	0x0800e928
 80036b4:	0800e938 	.word	0x0800e938
 80036b8:	0800e948 	.word	0x0800e948
 80036bc:	0800e958 	.word	0x0800e958
 80036c0:	0800e964 	.word	0x0800e964
 80036c4:	20000108 	.word	0x20000108
 80036c8:	0800e970 	.word	0x0800e970
 80036cc:	0800e980 	.word	0x0800e980

080036d0 <max31856_process>:


/*****************************************************************************/
void max31856_process()
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
	for (int i=0; i<MAX_TC_CHANNELS; i++)
 80036d6:	2300      	movs	r3, #0
 80036d8:	607b      	str	r3, [r7, #4]
 80036da:	e004      	b.n	80036e6 <max31856_process+0x16>
		max31856_nonmuxed_sample();
 80036dc:	f7ff fd1a 	bl	8003114 <max31856_nonmuxed_sample>
	for (int i=0; i<MAX_TC_CHANNELS; i++)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3301      	adds	r3, #1
 80036e4:	607b      	str	r3, [r7, #4]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	ddf7      	ble.n	80036dc <max31856_process+0xc>
}
 80036ec:	46c0      	nop			; (mov r8, r8)
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b002      	add	sp, #8
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <bl_remapMemToSRAM>:
/*============================================================================*/
/* Implementation of functions                                                */
/*============================================================================*/

void bl_remapMemToSRAM( void )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
	uint32_t size = 0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	603b      	str	r3, [r7, #0]
	int32_t vecIndex = 0;
 80036fe:	2300      	movs	r3, #0
 8003700:	607b      	str	r3, [r7, #4]
	static uint32_t  *app_start = &__APPLICATION_ISR_START;

	size = ((&__APPLICATION_ISR_END) - (&__APPLICATION_ISR_START));
 8003702:	4a12      	ldr	r2, [pc, #72]	; (800374c <bl_remapMemToSRAM+0x58>)
 8003704:	4b12      	ldr	r3, [pc, #72]	; (8003750 <bl_remapMemToSRAM+0x5c>)
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	109b      	asrs	r3, r3, #2
 800370a:	603b      	str	r3, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800370c:	b672      	cpsid	i

	/** Remap Verctor Table and interrupts */
	__disable_irq();
	for(vecIndex = 0; vecIndex < size; vecIndex++){
 800370e:	2300      	movs	r3, #0
 8003710:	607b      	str	r3, [r7, #4]
 8003712:	e00c      	b.n	800372e <bl_remapMemToSRAM+0x3a>
		VectorTable[vecIndex] = app_start[vecIndex];
 8003714:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <bl_remapMemToSRAM+0x60>)
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	18d3      	adds	r3, r2, r3
 800371e:	6819      	ldr	r1, [r3, #0]
 8003720:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <bl_remapMemToSRAM+0x64>)
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	0092      	lsls	r2, r2, #2
 8003726:	50d1      	str	r1, [r2, r3]
	for(vecIndex = 0; vecIndex < size; vecIndex++){
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3301      	adds	r3, #1
 800372c:	607b      	str	r3, [r7, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d8ee      	bhi.n	8003714 <bl_remapMemToSRAM+0x20>
	}
	__HAL_SYSCFG_REMAPMEMORY_SRAM();
 8003736:	4b09      	ldr	r3, [pc, #36]	; (800375c <bl_remapMemToSRAM+0x68>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4b08      	ldr	r3, [pc, #32]	; (800375c <bl_remapMemToSRAM+0x68>)
 800373c:	2103      	movs	r1, #3
 800373e:	430a      	orrs	r2, r1
 8003740:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003742:	b662      	cpsie	i
	__enable_irq();
}
 8003744:	46c0      	nop			; (mov r8, r8)
 8003746:	46bd      	mov	sp, r7
 8003748:	b002      	add	sp, #8
 800374a:	bd80      	pop	{r7, pc}
 800374c:	080000c0 	.word	0x080000c0
 8003750:	08000000 	.word	0x08000000
 8003754:	20000138 	.word	0x20000138
 8003758:	20000000 	.word	0x20000000
 800375c:	40010000 	.word	0x40010000

08003760 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003764:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003768:	4b03      	ldr	r3, [pc, #12]	; (8003778 <__NVIC_SystemReset+0x18>)
 800376a:	4a04      	ldr	r2, [pc, #16]	; (800377c <__NVIC_SystemReset+0x1c>)
 800376c:	60da      	str	r2, [r3, #12]
 800376e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	e7fd      	b.n	8003772 <__NVIC_SystemReset+0x12>
 8003776:	46c0      	nop			; (mov r8, r8)
 8003778:	e000ed00 	.word	0xe000ed00
 800377c:	05fa0004 	.word	0x05fa0004

08003780 <bus_cmd_both_read_handler>:
/*============================================================================*/
/* Implementation of functions                                                */
/*============================================================================*/

uint32_t bus_cmd_both_read_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	607a      	str	r2, [r7, #4]
 800378a:	603b      	str	r3, [r7, #0]
 800378c:	230a      	movs	r3, #10
 800378e:	18fb      	adds	r3, r7, r3
 8003790:	1c0a      	adds	r2, r1, #0
 8003792:	801a      	strh	r2, [r3, #0]
	uint8_t *data = &txData[0];
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	617b      	str	r3, [r7, #20]
	*txLen = stmp3x_read_raw_buffered(data);
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	0018      	movs	r0, r3
 800379c:	f001 fdca 	bl	8005334 <stmp3x_read_raw_buffered>
 80037a0:	0003      	movs	r3, r0
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	801a      	strh	r2, [r3, #0]
	data += 350;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	335f      	adds	r3, #95	; 0x5f
 80037ac:	33ff      	adds	r3, #255	; 0xff
 80037ae:	617b      	str	r3, [r7, #20]

	for (int i=0;i<MAX_TC_CHANNELS;i++)
 80037b0:	2300      	movs	r3, #0
 80037b2:	613b      	str	r3, [r7, #16]
 80037b4:	e00b      	b.n	80037ce <bus_cmd_both_read_handler+0x4e>
	{
		max31856_read_raw_buffered(i,data);
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	0011      	movs	r1, r2
 80037bc:	0018      	movs	r0, r3
 80037be:	f7ff fb65 	bl	8002e8c <max31856_read_raw_buffered>
		data+=TC_CH_SAMPLE_SIZE;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	3306      	adds	r3, #6
 80037c6:	617b      	str	r3, [r7, #20]
	for (int i=0;i<MAX_TC_CHANNELS;i++)
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	3301      	adds	r3, #1
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	ddf0      	ble.n	80037b6 <bus_cmd_both_read_handler+0x36>
	}

	*txLen += TC_CH_SAMPLE_SIZE * MAX_TC_CHANNELS;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	3318      	adds	r3, #24
 80037da:	b29a      	uxth	r2, r3
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	801a      	strh	r2, [r3, #0]

	return 0;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	0018      	movs	r0, r3
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b006      	add	sp, #24
 80037e8:	bd80      	pop	{r7, pc}

080037ea <bus_cmd_tc_read_handler>:
 * @param txData send msg
 * @param txLen send msg length
 * @return uint32_t 0
 */
uint32_t bus_cmd_tc_read_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b086      	sub	sp, #24
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	603b      	str	r3, [r7, #0]
 80037f6:	230a      	movs	r3, #10
 80037f8:	18fb      	adds	r3, r7, r3
 80037fa:	1c0a      	adds	r2, r1, #0
 80037fc:	801a      	strh	r2, [r3, #0]
	uint8_t *data = &txData[0];
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	617b      	str	r3, [r7, #20]
	for (int i=0;i<MAX_TC_CHANNELS;i++)
 8003802:	2300      	movs	r3, #0
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	e00b      	b.n	8003820 <bus_cmd_tc_read_handler+0x36>
	{
		max31856_read_raw_buffered(i,data);
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	0011      	movs	r1, r2
 800380e:	0018      	movs	r0, r3
 8003810:	f7ff fb3c 	bl	8002e8c <max31856_read_raw_buffered>
		data+=TC_CH_SAMPLE_SIZE;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	3306      	adds	r3, #6
 8003818:	617b      	str	r3, [r7, #20]
	for (int i=0;i<MAX_TC_CHANNELS;i++)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	3301      	adds	r3, #1
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	2b03      	cmp	r3, #3
 8003824:	ddf0      	ble.n	8003808 <bus_cmd_tc_read_handler+0x1e>
	}

	*txLen = TC_CH_SAMPLE_SIZE * MAX_TC_CHANNELS;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2218      	movs	r2, #24
 800382a:	801a      	strh	r2, [r3, #0]

	return 0;
 800382c:	2300      	movs	r3, #0
}
 800382e:	0018      	movs	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	b006      	add	sp, #24
 8003834:	bd80      	pop	{r7, pc}

08003836 <bus_cmd_pa_read_handler>:
 * @param txData send msg
 * @param txLen send msg length
 * @return uint32_t 
 */
uint32_t bus_cmd_pa_read_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b086      	sub	sp, #24
 800383a:	af00      	add	r7, sp, #0
 800383c:	60f8      	str	r0, [r7, #12]
 800383e:	607a      	str	r2, [r7, #4]
 8003840:	603b      	str	r3, [r7, #0]
 8003842:	230a      	movs	r3, #10
 8003844:	18fb      	adds	r3, r7, r3
 8003846:	1c0a      	adds	r2, r1, #0
 8003848:	801a      	strh	r2, [r3, #0]
	uint8_t *data = &txData[0];
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	617b      	str	r3, [r7, #20]
	*txLen = stmp3x_read_raw_buffered(data);
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	0018      	movs	r0, r3
 8003852:	f001 fd6f 	bl	8005334 <stmp3x_read_raw_buffered>
 8003856:	0003      	movs	r3, r0
 8003858:	b29a      	uxth	r2, r3
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	801a      	strh	r2, [r3, #0]
	return 0;
 800385e:	2300      	movs	r3, #0
}
 8003860:	0018      	movs	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	b006      	add	sp, #24
 8003866:	bd80      	pop	{r7, pc}

08003868 <bus_cmd_ping_handler>:

/******************************************************************************/

uint32_t bus_cmd_ping_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	607a      	str	r2, [r7, #4]
 8003872:	603b      	str	r3, [r7, #0]
 8003874:	230a      	movs	r3, #10
 8003876:	18fb      	adds	r3, r7, r3
 8003878:	1c0a      	adds	r2, r1, #0
 800387a:	801a      	strh	r2, [r3, #0]
	return 0;
 800387c:	2300      	movs	r3, #0
}
 800387e:	0018      	movs	r0, r3
 8003880:	46bd      	mov	sp, r7
 8003882:	b004      	add	sp, #16
 8003884:	bd80      	pop	{r7, pc}

08003886 <bus_cmd_tc_conf_read_handler>:

/******************************************************************************/

uint32_t bus_cmd_tc_conf_read_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b086      	sub	sp, #24
 800388a:	af00      	add	r7, sp, #0
 800388c:	60f8      	str	r0, [r7, #12]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	603b      	str	r3, [r7, #0]
 8003892:	230a      	movs	r3, #10
 8003894:	18fb      	adds	r3, r7, r3
 8003896:	1c0a      	adds	r2, r1, #0
 8003898:	801a      	strh	r2, [r3, #0]
	uint8_t *data = &txData[0];
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	617b      	str	r3, [r7, #20]
	for (int i=0;i<MAX_TC_CHANNELS;i++)
 800389e:	2300      	movs	r3, #0
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	e00b      	b.n	80038bc <bus_cmd_tc_conf_read_handler+0x36>
	{
		max31856_read_conf(i,data);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	0011      	movs	r1, r2
 80038aa:	0018      	movs	r0, r3
 80038ac:	f7ff fb06 	bl	8002ebc <max31856_read_conf>
		data+=TC_CH_CONF_LENGTH;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	3308      	adds	r3, #8
 80038b4:	617b      	str	r3, [r7, #20]
	for (int i=0;i<MAX_TC_CHANNELS;i++)
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	3301      	adds	r3, #1
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	2b03      	cmp	r3, #3
 80038c0:	ddf0      	ble.n	80038a4 <bus_cmd_tc_conf_read_handler+0x1e>
	}
	*txLen = MAX_TC_CHANNELS*TC_CH_CONF_LENGTH;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2220      	movs	r2, #32
 80038c6:	801a      	strh	r2, [r3, #0]
	return 0;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	0018      	movs	r0, r3
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b006      	add	sp, #24
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <bus_cmd_tc_conf_write_handler>:

/******************************************************************************/

uint32_t bus_cmd_tc_conf_write_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 80038d4:	b590      	push	{r4, r7, lr}
 80038d6:	b089      	sub	sp, #36	; 0x24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	607a      	str	r2, [r7, #4]
 80038de:	603b      	str	r3, [r7, #0]
 80038e0:	230a      	movs	r3, #10
 80038e2:	18fb      	adds	r3, r7, r3
 80038e4:	1c0a      	adds	r2, r1, #0
 80038e6:	801a      	strh	r2, [r3, #0]
	uint8_t *data = &rxData[0];
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	61fb      	str	r3, [r7, #28]
	for (int i=0;i<MAX_TC_CHANNELS;i++)
 80038ec:	2300      	movs	r3, #0
 80038ee:	61bb      	str	r3, [r7, #24]
 80038f0:	e051      	b.n	8003996 <bus_cmd_tc_conf_write_handler+0xc2>
	{
		max31856_write_conf(i,data);
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	69fa      	ldr	r2, [r7, #28]
 80038f6:	0011      	movs	r1, r2
 80038f8:	0018      	movs	r0, r3
 80038fa:	f7ff fb0f 	bl	8002f1c <max31856_write_conf>

		gBoardConfig.gConfig_tc.ch_conf[i].cr0 = data[0];
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	7819      	ldrb	r1, [r3, #0]
 8003902:	4b2b      	ldr	r3, [pc, #172]	; (80039b0 <bus_cmd_tc_conf_write_handler+0xdc>)
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	3201      	adds	r2, #1
 8003908:	00d2      	lsls	r2, r2, #3
 800390a:	54d1      	strb	r1, [r2, r3]
		gBoardConfig.gConfig_tc.ch_conf[i].cr1 = data[1];
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	7859      	ldrb	r1, [r3, #1]
 8003910:	4a27      	ldr	r2, [pc, #156]	; (80039b0 <bus_cmd_tc_conf_write_handler+0xdc>)
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	3301      	adds	r3, #1
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	18d3      	adds	r3, r2, r3
 800391a:	3301      	adds	r3, #1
 800391c:	1c0a      	adds	r2, r1, #0
 800391e:	701a      	strb	r2, [r3, #0]
		for (int j=0; j<4; j++)
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	e010      	b.n	8003948 <bus_cmd_tc_conf_write_handler+0x74>
		{
			gBoardConfig.gConfig_tc.ch_conf[i].cjOffset.cjOffBytes[j] = data[j+3];
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	3303      	adds	r3, #3
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	18d3      	adds	r3, r2, r3
 800392e:	7819      	ldrb	r1, [r3, #0]
 8003930:	4a1f      	ldr	r2, [pc, #124]	; (80039b0 <bus_cmd_tc_conf_write_handler+0xdc>)
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	18d2      	adds	r2, r2, r3
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	18d3      	adds	r3, r2, r3
 800393c:	330c      	adds	r3, #12
 800393e:	1c0a      	adds	r2, r1, #0
 8003940:	701a      	strb	r2, [r3, #0]
		for (int j=0; j<4; j++)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	3301      	adds	r3, #1
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	2b03      	cmp	r3, #3
 800394c:	ddeb      	ble.n	8003926 <bus_cmd_tc_conf_write_handler+0x52>
		}
		gBoardConfig.gConfig_tc.ch_conf[i].cj_offset = gBoardConfig.gConfig_tc.ch_conf[i].cjOffset.cjOff / 0.0625;
 800394e:	4a18      	ldr	r2, [pc, #96]	; (80039b0 <bus_cmd_tc_conf_write_handler+0xdc>)
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	3301      	adds	r3, #1
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	18d3      	adds	r3, r2, r3
 8003958:	3304      	adds	r3, #4
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	1c18      	adds	r0, r3, #0
 800395e:	f7ff f8f7 	bl	8002b50 <__aeabi_f2d>
 8003962:	2200      	movs	r2, #0
 8003964:	4b13      	ldr	r3, [pc, #76]	; (80039b4 <bus_cmd_tc_conf_write_handler+0xe0>)
 8003966:	f7fd fe71 	bl	800164c <__aeabi_ddiv>
 800396a:	0003      	movs	r3, r0
 800396c:	000c      	movs	r4, r1
 800396e:	0018      	movs	r0, r3
 8003970:	0021      	movs	r1, r4
 8003972:	f7ff f84b 	bl	8002a0c <__aeabi_d2iz>
 8003976:	0003      	movs	r3, r0
 8003978:	b259      	sxtb	r1, r3
 800397a:	4a0d      	ldr	r2, [pc, #52]	; (80039b0 <bus_cmd_tc_conf_write_handler+0xdc>)
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	3301      	adds	r3, #1
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	18d3      	adds	r3, r2, r3
 8003984:	3302      	adds	r3, #2
 8003986:	1c0a      	adds	r2, r1, #0
 8003988:	701a      	strb	r2, [r3, #0]
		//dbg_printf("Write TC Config ch : %d data[0] : %x - data[1] : %x - data[2] : %x \n", i, data[0],data[1],data[2]);
		data += TC_CH_CONF_LENGTH;
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	3308      	adds	r3, #8
 800398e:	61fb      	str	r3, [r7, #28]
	for (int i=0;i<MAX_TC_CHANNELS;i++)
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	3301      	adds	r3, #1
 8003994:	61bb      	str	r3, [r7, #24]
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	2b03      	cmp	r3, #3
 800399a:	ddaa      	ble.n	80038f2 <bus_cmd_tc_conf_write_handler+0x1e>
	}

	conf_save();
 800399c:	f000 fb62 	bl	8004064 <conf_save>

	*txLen = 0;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	2200      	movs	r2, #0
 80039a4:	801a      	strh	r2, [r3, #0]
	return 0;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	0018      	movs	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b009      	add	sp, #36	; 0x24
 80039ae:	bd90      	pop	{r4, r7, pc}
 80039b0:	200007b4 	.word	0x200007b4
 80039b4:	3fb00000 	.word	0x3fb00000

080039b8 <bus_cmd_pa_conf_read_handler>:

/******************************************************************************/

uint32_t bus_cmd_pa_conf_read_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	607a      	str	r2, [r7, #4]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	230a      	movs	r3, #10
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	1c0a      	adds	r2, r1, #0
 80039ca:	801a      	strh	r2, [r3, #0]
	uint8_t *data = &txData[0];
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	617b      	str	r3, [r7, #20]
	data[0] = gBoardConfig.gConfig_pa.value;
 80039d0:	4b1a      	ldr	r3, [pc, #104]	; (8003a3c <bus_cmd_pa_conf_read_handler+0x84>)
 80039d2:	2228      	movs	r2, #40	; 0x28
 80039d4:	5c9a      	ldrb	r2, [r3, r2]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<4; i++)
 80039da:	2300      	movs	r3, #0
 80039dc:	61fb      	str	r3, [r7, #28]
 80039de:	e00d      	b.n	80039fc <bus_cmd_pa_conf_read_handler+0x44>
	{
		data[i+1] = gBoardConfig.gConfig_pa.voltCal.voltBytes[i];
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	3301      	adds	r3, #1
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	18d3      	adds	r3, r2, r3
 80039e8:	4914      	ldr	r1, [pc, #80]	; (8003a3c <bus_cmd_pa_conf_read_handler+0x84>)
 80039ea:	202c      	movs	r0, #44	; 0x2c
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	188a      	adds	r2, r1, r2
 80039f0:	1812      	adds	r2, r2, r0
 80039f2:	7812      	ldrb	r2, [r2, #0]
 80039f4:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<4; i++)
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	3301      	adds	r3, #1
 80039fa:	61fb      	str	r3, [r7, #28]
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	ddee      	ble.n	80039e0 <bus_cmd_pa_conf_read_handler+0x28>
	}
	for (int j=0; j<4; j++)
 8003a02:	2300      	movs	r3, #0
 8003a04:	61bb      	str	r3, [r7, #24]
 8003a06:	e00d      	b.n	8003a24 <bus_cmd_pa_conf_read_handler+0x6c>
	{
		data[j+5] = gBoardConfig.gConfig_pa.curCal.curBytes[j];
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	3305      	adds	r3, #5
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	18d3      	adds	r3, r2, r3
 8003a10:	490a      	ldr	r1, [pc, #40]	; (8003a3c <bus_cmd_pa_conf_read_handler+0x84>)
 8003a12:	2030      	movs	r0, #48	; 0x30
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	188a      	adds	r2, r1, r2
 8003a18:	1812      	adds	r2, r2, r0
 8003a1a:	7812      	ldrb	r2, [r2, #0]
 8003a1c:	701a      	strb	r2, [r3, #0]
	for (int j=0; j<4; j++)
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	3301      	adds	r3, #1
 8003a22:	61bb      	str	r3, [r7, #24]
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	ddee      	ble.n	8003a08 <bus_cmd_pa_conf_read_handler+0x50>
	}

	*txLen = PA_CONF_LENGTH;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2209      	movs	r2, #9
 8003a2e:	801a      	strh	r2, [r3, #0]
	return 0;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	0018      	movs	r0, r3
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b008      	add	sp, #32
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	200007b4 	.word	0x200007b4

08003a40 <bus_cmd_pa_conf_write_handler>:

/******************************************************************************/

uint32_t bus_cmd_pa_conf_write_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b088      	sub	sp, #32
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	607a      	str	r2, [r7, #4]
 8003a4a:	603b      	str	r3, [r7, #0]
 8003a4c:	230a      	movs	r3, #10
 8003a4e:	18fb      	adds	r3, r7, r3
 8003a50:	1c0a      	adds	r2, r1, #0
 8003a52:	801a      	strh	r2, [r3, #0]
	uint8_t *data = &rxData[0];
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	617b      	str	r3, [r7, #20]
	gBoardConfig.gConfig_pa.value = data[0];
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	7819      	ldrb	r1, [r3, #0]
 8003a5c:	4b20      	ldr	r3, [pc, #128]	; (8003ae0 <bus_cmd_pa_conf_write_handler+0xa0>)
 8003a5e:	2228      	movs	r2, #40	; 0x28
 8003a60:	5499      	strb	r1, [r3, r2]
	for (int i=0; i<4; i++)
 8003a62:	2300      	movs	r3, #0
 8003a64:	61fb      	str	r3, [r7, #28]
 8003a66:	e00e      	b.n	8003a86 <bus_cmd_pa_conf_write_handler+0x46>
	{
		gBoardConfig.gConfig_pa.voltCal.voltBytes[i] = data[i+1];
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	18d3      	adds	r3, r2, r3
 8003a70:	7818      	ldrb	r0, [r3, #0]
 8003a72:	4a1b      	ldr	r2, [pc, #108]	; (8003ae0 <bus_cmd_pa_conf_write_handler+0xa0>)
 8003a74:	212c      	movs	r1, #44	; 0x2c
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	18d3      	adds	r3, r2, r3
 8003a7a:	185b      	adds	r3, r3, r1
 8003a7c:	1c02      	adds	r2, r0, #0
 8003a7e:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<4; i++)
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	3301      	adds	r3, #1
 8003a84:	61fb      	str	r3, [r7, #28]
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	dded      	ble.n	8003a68 <bus_cmd_pa_conf_write_handler+0x28>
	}
	for (int j=0; j<4; j++)
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61bb      	str	r3, [r7, #24]
 8003a90:	e00e      	b.n	8003ab0 <bus_cmd_pa_conf_write_handler+0x70>
	{
		gBoardConfig.gConfig_pa.curCal.curBytes[j] = data[j+5];
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	3305      	adds	r3, #5
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	18d3      	adds	r3, r2, r3
 8003a9a:	7818      	ldrb	r0, [r3, #0]
 8003a9c:	4a10      	ldr	r2, [pc, #64]	; (8003ae0 <bus_cmd_pa_conf_write_handler+0xa0>)
 8003a9e:	2130      	movs	r1, #48	; 0x30
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	18d3      	adds	r3, r2, r3
 8003aa4:	185b      	adds	r3, r3, r1
 8003aa6:	1c02      	adds	r2, r0, #0
 8003aa8:	701a      	strb	r2, [r3, #0]
	for (int j=0; j<4; j++)
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	3301      	adds	r3, #1
 8003aae:	61bb      	str	r3, [r7, #24]
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	dded      	ble.n	8003a92 <bus_cmd_pa_conf_write_handler+0x52>
	}

	dbg_printf("Write PA Config data[0] : %x - data[1] : %x - data[5] : %x \n", data[0],data[1],data[5]);
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	0019      	movs	r1, r3
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	001a      	movs	r2, r3
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	3305      	adds	r3, #5
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	4806      	ldr	r0, [pc, #24]	; (8003ae4 <bus_cmd_pa_conf_write_handler+0xa4>)
 8003acc:	f007 fa62 	bl	800af94 <iprintf>

	conf_save();
 8003ad0:	f000 fac8 	bl	8004064 <conf_save>
	return 0;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b008      	add	sp, #32
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	46c0      	nop			; (mov r8, r8)
 8003ae0:	200007b4 	.word	0x200007b4
 8003ae4:	0800e990 	.word	0x0800e990

08003ae8 <bus_cmd_read_info_handler>:

/******************************************************************************/

uint32_t bus_cmd_read_info_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	607a      	str	r2, [r7, #4]
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	230a      	movs	r3, #10
 8003af6:	18fb      	adds	r3, r7, r3
 8003af8:	1c0a      	adds	r2, r1, #0
 8003afa:	801a      	strh	r2, [r3, #0]
	uint32_t length = 0;
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]

	for (int i=11;i>=0;i--)
 8003b00:	230b      	movs	r3, #11
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	e00c      	b.n	8003b20 <bus_cmd_read_info_handler+0x38>
	{
		txData[length++] = *((uint8_t *)UID_BASE + i);
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	4a26      	ldr	r2, [pc, #152]	; (8003ba4 <bus_cmd_read_info_handler+0xbc>)
 8003b0a:	189a      	adds	r2, r3, r2
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	1c59      	adds	r1, r3, #1
 8003b10:	6179      	str	r1, [r7, #20]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	18cb      	adds	r3, r1, r3
 8003b16:	7812      	ldrb	r2, [r2, #0]
 8003b18:	701a      	strb	r2, [r3, #0]
	for (int i=11;i>=0;i--)
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	daef      	bge.n	8003b06 <bus_cmd_read_info_handler+0x1e>
	}


	sprintf((char *)&txData[length],"%s %s",__DATE__,__TIME__);
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	18d0      	adds	r0, r2, r3
 8003b2c:	4b1e      	ldr	r3, [pc, #120]	; (8003ba8 <bus_cmd_read_info_handler+0xc0>)
 8003b2e:	4a1f      	ldr	r2, [pc, #124]	; (8003bac <bus_cmd_read_info_handler+0xc4>)
 8003b30:	491f      	ldr	r1, [pc, #124]	; (8003bb0 <bus_cmd_read_info_handler+0xc8>)
 8003b32:	f007 fab7 	bl	800b0a4 <siprintf>
	length += 32;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	3320      	adds	r3, #32
 8003b3a:	617b      	str	r3, [r7, #20]

	memcpy(&txData[length],&appinfo,sizeof(appinfo));		//Copy App Version
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	18d3      	adds	r3, r2, r3
 8003b42:	491c      	ldr	r1, [pc, #112]	; (8003bb4 <bus_cmd_read_info_handler+0xcc>)
 8003b44:	2208      	movs	r2, #8
 8003b46:	0018      	movs	r0, r3
 8003b48:	f006 fbb7 	bl	800a2ba <memcpy>
	length += sizeof(appinfo);
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	3308      	adds	r3, #8
 8003b50:	617b      	str	r3, [r7, #20]

	memcpy(&txData[length],appsha,sizeof(appsha));			// Copy SHA of application
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	18d2      	adds	r2, r2, r3
 8003b58:	4b17      	ldr	r3, [pc, #92]	; (8003bb8 <bus_cmd_read_info_handler+0xd0>)
 8003b5a:	0010      	movs	r0, r2
 8003b5c:	0019      	movs	r1, r3
 8003b5e:	2314      	movs	r3, #20
 8003b60:	001a      	movs	r2, r3
 8003b62:	f006 fbaa 	bl	800a2ba <memcpy>
	length += sizeof(appsha);
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	3314      	adds	r3, #20
 8003b6a:	617b      	str	r3, [r7, #20]

	memcpy(&txData[length],&gFrameCount,sizeof(uint32_t));	// Copy Total Received Frame Count
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	18d3      	adds	r3, r2, r3
 8003b72:	4912      	ldr	r1, [pc, #72]	; (8003bbc <bus_cmd_read_info_handler+0xd4>)
 8003b74:	2204      	movs	r2, #4
 8003b76:	0018      	movs	r0, r3
 8003b78:	f006 fb9f 	bl	800a2ba <memcpy>
	length += sizeof(uint32_t);
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	3304      	adds	r3, #4
 8003b80:	617b      	str	r3, [r7, #20]

	txData[length] = BOARD_TYPE_WEM;
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	18d3      	adds	r3, r2, r3
 8003b88:	2263      	movs	r2, #99	; 0x63
 8003b8a:	701a      	strb	r2, [r3, #0]
	length += 4;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	3304      	adds	r3, #4
 8003b90:	617b      	str	r3, [r7, #20]

	*txLen = length;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	801a      	strh	r2, [r3, #0]
	return 0;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b006      	add	sp, #24
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	1ff80050 	.word	0x1ff80050
 8003ba8:	0800e9d0 	.word	0x0800e9d0
 8003bac:	0800e9dc 	.word	0x0800e9dc
 8003bb0:	0800e9e8 	.word	0x0800e9e8
 8003bb4:	080000c0 	.word	0x080000c0
 8003bb8:	0800f4b8 	.word	0x0800f4b8
 8003bbc:	20000374 	.word	0x20000374

08003bc0 <rt_bus_cmd_enter_bootloader>:
 * @param txData send msg
 * @param txLen send msg length
 * @return uint32_t 0
 */
uint32_t rt_bus_cmd_enter_bootloader (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	607a      	str	r2, [r7, #4]
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	230a      	movs	r3, #10
 8003bce:	18fb      	adds	r3, r7, r3
 8003bd0:	1c0a      	adds	r2, r1, #0
 8003bd2:	801a      	strh	r2, [r3, #0]
	//bus_entering_bootlaoder_hook();
	enterBL = 1;
 8003bd4:	4b03      	ldr	r3, [pc, #12]	; (8003be4 <rt_bus_cmd_enter_bootloader+0x24>)
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	701a      	strb	r2, [r3, #0]

	return 0;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	0018      	movs	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b004      	add	sp, #16
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	20000372 	.word	0x20000372

08003be8 <rt_bus_cmd_reset>:
 * @param txData send msg
 * @param txLen send msg length
 * @return uint32_t 
 */
uint32_t rt_bus_cmd_reset (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	607a      	str	r2, [r7, #4]
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	230a      	movs	r3, #10
 8003bf6:	18fb      	adds	r3, r7, r3
 8003bf8:	1c0a      	adds	r2, r1, #0
 8003bfa:	801a      	strh	r2, [r3, #0]
	iapMailbox[0] = 0;
 8003bfc:	4b03      	ldr	r3, [pc, #12]	; (8003c0c <rt_bus_cmd_reset+0x24>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
	iapMailbox[1] = 0;
 8003c02:	4b02      	ldr	r3, [pc, #8]	; (8003c0c <rt_bus_cmd_reset+0x24>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	605a      	str	r2, [r3, #4]
	//bus_reseting_hook();
	NVIC_SystemReset();
 8003c08:	f7ff fdaa 	bl	8003760 <__NVIC_SystemReset>
 8003c0c:	20000100 	.word	0x20000100

08003c10 <rt_bus_cmd_bl_stay>:
 * @param txData send msg
 * @param txLen send msg length
 * @return uint32_t 
 */
uint32_t rt_bus_cmd_bl_stay (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	607a      	str	r2, [r7, #4]
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	230a      	movs	r3, #10
 8003c1e:	18fb      	adds	r3, r7, r3
 8003c20:	1c0a      	adds	r2, r1, #0
 8003c22:	801a      	strh	r2, [r3, #0]
	*txData = 0;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	701a      	strb	r2, [r3, #0]
	txData[1] = 0;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	2200      	movs	r2, #0
 8003c30:	701a      	strb	r2, [r3, #0]
	*txLen = 2;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2202      	movs	r2, #2
 8003c36:	801a      	strh	r2, [r3, #0]
	return 0;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	b004      	add	sp, #16
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <rt_bus_cmd_bl_read_handler>:


/******************************************************************************/

uint32_t rt_bus_cmd_bl_read_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b084      	sub	sp, #16
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	607a      	str	r2, [r7, #4]
 8003c4c:	603b      	str	r3, [r7, #0]
 8003c4e:	230a      	movs	r3, #10
 8003c50:	18fb      	adds	r3, r7, r3
 8003c52:	1c0a      	adds	r2, r1, #0
 8003c54:	801a      	strh	r2, [r3, #0]
	return 0;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	0018      	movs	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	b004      	add	sp, #16
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <rt_bus_cmd_bl_write_handler>:

/******************************************************************************/
uint32_t rt_bus_cmd_bl_write_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	607a      	str	r2, [r7, #4]
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	230a      	movs	r3, #10
 8003c6e:	18fb      	adds	r3, r7, r3
 8003c70:	1c0a      	adds	r2, r1, #0
 8003c72:	801a      	strh	r2, [r3, #0]

	return 0;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	0018      	movs	r0, r3
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	b004      	add	sp, #16
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <rt_bus_cmd_bl_erase_handler>:

/******************************************************************************/

uint32_t rt_bus_cmd_bl_erase_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	603b      	str	r3, [r7, #0]
 8003c8a:	230a      	movs	r3, #10
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	1c0a      	adds	r2, r1, #0
 8003c90:	801a      	strh	r2, [r3, #0]

	return 0;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	0018      	movs	r0, r3
 8003c96:	46bd      	mov	sp, r7
 8003c98:	b004      	add	sp, #16
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <crc_ccitt_byte>:
};

/******************************************************************************/

static inline unsigned short crc_ccitt_byte(uint16_t crc, const uint8_t c)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	0002      	movs	r2, r0
 8003ca4:	1dbb      	adds	r3, r7, #6
 8003ca6:	801a      	strh	r2, [r3, #0]
 8003ca8:	1d7b      	adds	r3, r7, #5
 8003caa:	1c0a      	adds	r2, r1, #0
 8003cac:	701a      	strb	r2, [r3, #0]
	return (crc >> 8) ^ crc_ccitt_table[(crc ^ c) & 0xff];
 8003cae:	1dbb      	adds	r3, r7, #6
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	0a1b      	lsrs	r3, r3, #8
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	1dbb      	adds	r3, r7, #6
 8003cb8:	8819      	ldrh	r1, [r3, #0]
 8003cba:	1d7b      	adds	r3, r7, #5
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	404b      	eors	r3, r1
 8003cc0:	21ff      	movs	r1, #255	; 0xff
 8003cc2:	4019      	ands	r1, r3
 8003cc4:	4b04      	ldr	r3, [pc, #16]	; (8003cd8 <crc_ccitt_byte+0x3c>)
 8003cc6:	0049      	lsls	r1, r1, #1
 8003cc8:	5acb      	ldrh	r3, [r1, r3]
 8003cca:	4053      	eors	r3, r2
 8003ccc:	b29b      	uxth	r3, r3
}
 8003cce:	0018      	movs	r0, r3
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	b002      	add	sp, #8
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	0800eca4 	.word	0x0800eca4

08003cdc <crc16>:

/******************************************************************************/

unsigned short crc16(unsigned char *data_p, unsigned short length)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	000a      	movs	r2, r1
 8003ce6:	1cbb      	adds	r3, r7, #2
 8003ce8:	801a      	strh	r2, [r3, #0]
	unsigned int crc = 0x0000;
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
	while (length--)
 8003cee:	e00a      	b.n	8003d06 <crc16+0x2a>
		crc = crc_ccitt_byte(crc, *data_p++);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	b298      	uxth	r0, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	607a      	str	r2, [r7, #4]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	0019      	movs	r1, r3
 8003cfe:	f7ff ffcd 	bl	8003c9c <crc_ccitt_byte>
 8003d02:	0003      	movs	r3, r0
 8003d04:	60fb      	str	r3, [r7, #12]
	while (length--)
 8003d06:	1cbb      	adds	r3, r7, #2
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	1cba      	adds	r2, r7, #2
 8003d0c:	1e59      	subs	r1, r3, #1
 8003d0e:	8011      	strh	r1, [r2, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1ed      	bne.n	8003cf0 <crc16+0x14>
	return (crc>>8) | (crc<<8);;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	0a1b      	lsrs	r3, r3, #8
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	021b      	lsls	r3, r3, #8
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	4313      	orrs	r3, r2
 8003d24:	b29b      	uxth	r3, r3
}
 8003d26:	0018      	movs	r0, r3
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	b004      	add	sp, #16
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <bus_frame_pack>:
 * @brief SPI send/receive data format. Received from VTS bus communication
 * @param cmd message command type
 * @param datalength message length
 */
void bus_frame_pack(uint8_t cmd, uint16_t *datalength)
{
 8003d30:	b5b0      	push	{r4, r5, r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	0002      	movs	r2, r0
 8003d38:	6039      	str	r1, [r7, #0]
 8003d3a:	1dfb      	adds	r3, r7, #7
 8003d3c:	701a      	strb	r2, [r3, #0]
	uint16_t cCRC = 0;
 8003d3e:	210e      	movs	r1, #14
 8003d40:	187b      	adds	r3, r7, r1
 8003d42:	2200      	movs	r2, #0
 8003d44:	801a      	strh	r2, [r3, #0]

	spiTxBuffer[0] = PRT_STX;
 8003d46:	4b1d      	ldr	r3, [pc, #116]	; (8003dbc <bus_frame_pack+0x8c>)
 8003d48:	2201      	movs	r2, #1
 8003d4a:	701a      	strb	r2, [r3, #0]

	//txBuffer[1] = (uBusId & 0xFF00)>>8;
	//txBuffer[2] = (uBusId & 0x00FF);

	spiTxBuffer[3] = (((*datalength)+1) & 0xFF00)>>8;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	3301      	adds	r3, #1
 8003d52:	121b      	asrs	r3, r3, #8
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	4b19      	ldr	r3, [pc, #100]	; (8003dbc <bus_frame_pack+0x8c>)
 8003d58:	70da      	strb	r2, [r3, #3]
	spiTxBuffer[4] = (((*datalength)+1) & 0xFF);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	881b      	ldrh	r3, [r3, #0]
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	3301      	adds	r3, #1
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	4b15      	ldr	r3, [pc, #84]	; (8003dbc <bus_frame_pack+0x8c>)
 8003d66:	711a      	strb	r2, [r3, #4]

	spiTxBuffer[5] = cmd;
 8003d68:	4b14      	ldr	r3, [pc, #80]	; (8003dbc <bus_frame_pack+0x8c>)
 8003d6a:	1dfa      	adds	r2, r7, #7
 8003d6c:	7812      	ldrb	r2, [r2, #0]
 8003d6e:	715a      	strb	r2, [r3, #5]

	cCRC =  crc16(&spiTxBuffer[PRT_AD_MSB_IDX], MAX_SPI_DATA - 4);
 8003d70:	000d      	movs	r5, r1
 8003d72:	187c      	adds	r4, r7, r1
 8003d74:	23fe      	movs	r3, #254	; 0xfe
 8003d76:	005a      	lsls	r2, r3, #1
 8003d78:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <bus_frame_pack+0x90>)
 8003d7a:	0011      	movs	r1, r2
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f7ff ffad 	bl	8003cdc <crc16>
 8003d82:	0003      	movs	r3, r0
 8003d84:	8023      	strh	r3, [r4, #0]

	spiTxBuffer[MAX_SPI_DATA - 3] = (cCRC & 0xFF00)>>8;
 8003d86:	0029      	movs	r1, r5
 8003d88:	0008      	movs	r0, r1
 8003d8a:	187b      	adds	r3, r7, r1
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	0a1b      	lsrs	r3, r3, #8
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	b2d9      	uxtb	r1, r3
 8003d94:	4a09      	ldr	r2, [pc, #36]	; (8003dbc <bus_frame_pack+0x8c>)
 8003d96:	23fe      	movs	r3, #254	; 0xfe
 8003d98:	33ff      	adds	r3, #255	; 0xff
 8003d9a:	54d1      	strb	r1, [r2, r3]
	spiTxBuffer[MAX_SPI_DATA - 2] = (cCRC & 0x00FF);
 8003d9c:	0001      	movs	r1, r0
 8003d9e:	187b      	adds	r3, r7, r1
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	b2d9      	uxtb	r1, r3
 8003da4:	4a05      	ldr	r2, [pc, #20]	; (8003dbc <bus_frame_pack+0x8c>)
 8003da6:	23ff      	movs	r3, #255	; 0xff
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	54d1      	strb	r1, [r2, r3]
	spiTxBuffer[MAX_SPI_DATA - 1] = PRT_ETX;
 8003dac:	4b03      	ldr	r3, [pc, #12]	; (8003dbc <bus_frame_pack+0x8c>)
 8003dae:	4a05      	ldr	r2, [pc, #20]	; (8003dc4 <bus_frame_pack+0x94>)
 8003db0:	2103      	movs	r1, #3
 8003db2:	5499      	strb	r1, [r3, r2]
}
 8003db4:	46c0      	nop			; (mov r8, r8)
 8003db6:	46bd      	mov	sp, r7
 8003db8:	b004      	add	sp, #16
 8003dba:	bdb0      	pop	{r4, r5, r7, pc}
 8003dbc:	20000870 	.word	0x20000870
 8003dc0:	20000871 	.word	0x20000871
 8003dc4:	000001ff 	.word	0x000001ff

08003dc8 <bus_process>:
/******************************************************************************/



void bus_process(void)
{
 8003dc8:	b5b0      	push	{r4, r5, r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af02      	add	r7, sp, #8
	if (espMsgRcvd)
 8003dce:	4b5b      	ldr	r3, [pc, #364]	; (8003f3c <bus_process+0x174>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d100      	bne.n	8003dd8 <bus_process+0x10>
 8003dd6:	e0ad      	b.n	8003f34 <bus_process+0x16c>
	{
		uint16_t calc_CRC = 0;
 8003dd8:	2308      	movs	r3, #8
 8003dda:	18fb      	adds	r3, r7, r3
 8003ddc:	2200      	movs	r2, #0
 8003dde:	801a      	strh	r2, [r3, #0]
		uint16_t txSize = 0;
 8003de0:	1dbb      	adds	r3, r7, #6
 8003de2:	2200      	movs	r2, #0
 8003de4:	801a      	strh	r2, [r3, #0]

		memset(spiTxBuffer, 0, MAX_SPI_DATA);
 8003de6:	2380      	movs	r3, #128	; 0x80
 8003de8:	009a      	lsls	r2, r3, #2
 8003dea:	4b55      	ldr	r3, [pc, #340]	; (8003f40 <bus_process+0x178>)
 8003dec:	2100      	movs	r1, #0
 8003dee:	0018      	movs	r0, r3
 8003df0:	f006 fa6c 	bl	800a2cc <memset>
		dbg_printf("[0] : %d - [1] : %d - cmd[5] : %d - [511] : %d\r\n", spiRxBuffer[0], spiRxBuffer[1], spiRxBuffer[5], spiRxBuffer[511]);
 8003df4:	4b53      	ldr	r3, [pc, #332]	; (8003f44 <bus_process+0x17c>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	0019      	movs	r1, r3
 8003dfa:	4b52      	ldr	r3, [pc, #328]	; (8003f44 <bus_process+0x17c>)
 8003dfc:	785b      	ldrb	r3, [r3, #1]
 8003dfe:	001c      	movs	r4, r3
 8003e00:	4b50      	ldr	r3, [pc, #320]	; (8003f44 <bus_process+0x17c>)
 8003e02:	795b      	ldrb	r3, [r3, #5]
 8003e04:	001d      	movs	r5, r3
 8003e06:	4b4f      	ldr	r3, [pc, #316]	; (8003f44 <bus_process+0x17c>)
 8003e08:	4a4f      	ldr	r2, [pc, #316]	; (8003f48 <bus_process+0x180>)
 8003e0a:	5c9b      	ldrb	r3, [r3, r2]
 8003e0c:	484f      	ldr	r0, [pc, #316]	; (8003f4c <bus_process+0x184>)
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	002b      	movs	r3, r5
 8003e12:	0022      	movs	r2, r4
 8003e14:	f007 f8be 	bl	800af94 <iprintf>
		spiTxBuffer[511] = 0x3;
 8003e18:	4b49      	ldr	r3, [pc, #292]	; (8003f40 <bus_process+0x178>)
 8003e1a:	4a4b      	ldr	r2, [pc, #300]	; (8003f48 <bus_process+0x180>)
 8003e1c:	2103      	movs	r1, #3
 8003e1e:	5499      	strb	r1, [r3, r2]

		if ((spiRxBuffer[PRT_STX_IDX] == PRT_STX) && spiRxBuffer[MAX_SPI_DATA - PRT_ETX_LEFT_IDX] == PRT_ETX)
 8003e20:	4b48      	ldr	r3, [pc, #288]	; (8003f44 <bus_process+0x17c>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d15a      	bne.n	8003ede <bus_process+0x116>
 8003e28:	4b46      	ldr	r3, [pc, #280]	; (8003f44 <bus_process+0x17c>)
 8003e2a:	4a47      	ldr	r2, [pc, #284]	; (8003f48 <bus_process+0x180>)
 8003e2c:	5c9b      	ldrb	r3, [r3, r2]
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	d155      	bne.n	8003ede <bus_process+0x116>
		{
			calc_CRC = crc16(&spiRxBuffer[PRT_AD_MSB_IDX], MAX_SPI_DATA-4);
 8003e32:	23fe      	movs	r3, #254	; 0xfe
 8003e34:	005a      	lsls	r2, r3, #1
 8003e36:	4b46      	ldr	r3, [pc, #280]	; (8003f50 <bus_process+0x188>)
 8003e38:	0011      	movs	r1, r2
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	f7ff ff4e 	bl	8003cdc <crc16>
 8003e40:	0003      	movs	r3, r0
 8003e42:	001a      	movs	r2, r3
 8003e44:	2108      	movs	r1, #8
 8003e46:	187b      	adds	r3, r7, r1
 8003e48:	801a      	strh	r2, [r3, #0]
			if (memcmp(&spiRxBuffer[MAX_SPI_DATA-3],&calc_CRC,2)==0)
 8003e4a:	1879      	adds	r1, r7, r1
 8003e4c:	4b41      	ldr	r3, [pc, #260]	; (8003f54 <bus_process+0x18c>)
 8003e4e:	2202      	movs	r2, #2
 8003e50:	0018      	movs	r0, r3
 8003e52:	f006 fa23 	bl	800a29c <memcmp>
 8003e56:	1e03      	subs	r3, r0, #0
 8003e58:	d13a      	bne.n	8003ed0 <bus_process+0x108>
			{
				for (int i=0;i<gCommandCount ;i++)
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	e033      	b.n	8003ec8 <bus_process+0x100>
				{
					if (commands[i].cmd == spiRxBuffer[PRT_CMD_IDX])
 8003e60:	4b3d      	ldr	r3, [pc, #244]	; (8003f58 <bus_process+0x190>)
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	00d2      	lsls	r2, r2, #3
 8003e66:	5cd2      	ldrb	r2, [r2, r3]
 8003e68:	4b36      	ldr	r3, [pc, #216]	; (8003f44 <bus_process+0x17c>)
 8003e6a:	795b      	ldrb	r3, [r3, #5]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d128      	bne.n	8003ec2 <bus_process+0xfa>
					{
						uint8_t ret = commands[i].handler(&spiRxBuffer[PRT_DATA_S_IDX], MAX_SPI_DATA, &spiTxBuffer[PRT_DATA_S_IDX + 1], &txSize);
 8003e70:	4a39      	ldr	r2, [pc, #228]	; (8003f58 <bus_process+0x190>)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	18d3      	adds	r3, r2, r3
 8003e78:	3304      	adds	r3, #4
 8003e7a:	681c      	ldr	r4, [r3, #0]
 8003e7c:	1dbd      	adds	r5, r7, #6
 8003e7e:	4a37      	ldr	r2, [pc, #220]	; (8003f5c <bus_process+0x194>)
 8003e80:	2380      	movs	r3, #128	; 0x80
 8003e82:	0099      	lsls	r1, r3, #2
 8003e84:	4836      	ldr	r0, [pc, #216]	; (8003f60 <bus_process+0x198>)
 8003e86:	002b      	movs	r3, r5
 8003e88:	47a0      	blx	r4
 8003e8a:	0002      	movs	r2, r0
 8003e8c:	230b      	movs	r3, #11
 8003e8e:	18fb      	adds	r3, r7, r3
 8003e90:	701a      	strb	r2, [r3, #0]
						gFrameCount++;
 8003e92:	4b34      	ldr	r3, [pc, #208]	; (8003f64 <bus_process+0x19c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	4b32      	ldr	r3, [pc, #200]	; (8003f64 <bus_process+0x19c>)
 8003e9a:	601a      	str	r2, [r3, #0]
						spiTxBuffer[PRT_DATA_S_IDX] = PRT_ACK;
 8003e9c:	4b28      	ldr	r3, [pc, #160]	; (8003f40 <bus_process+0x178>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	719a      	strb	r2, [r3, #6]
						txSize ++;
 8003ea2:	1dbb      	adds	r3, r7, #6
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	1dbb      	adds	r3, r7, #6
 8003eac:	801a      	strh	r2, [r3, #0]

						bus_frame_pack(commands[i].cmd,&txSize);
 8003eae:	4b2a      	ldr	r3, [pc, #168]	; (8003f58 <bus_process+0x190>)
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	00d2      	lsls	r2, r2, #3
 8003eb4:	5cd3      	ldrb	r3, [r2, r3]
 8003eb6:	1dba      	adds	r2, r7, #6
 8003eb8:	0011      	movs	r1, r2
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f7ff ff38 	bl	8003d30 <bus_frame_pack>
						//bus_transmit(MAX_SPI_DATA);
						break;
 8003ec0:	e006      	b.n	8003ed0 <bus_process+0x108>
				for (int i=0;i<gCommandCount ;i++)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	220f      	movs	r2, #15
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	dbc7      	blt.n	8003e60 <bus_process+0x98>
					}
				}
			}
			memset(spiRxBuffer, 0, MAX_SPI_DATA);
 8003ed0:	2380      	movs	r3, #128	; 0x80
 8003ed2:	009a      	lsls	r2, r3, #2
 8003ed4:	4b1b      	ldr	r3, [pc, #108]	; (8003f44 <bus_process+0x17c>)
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	0018      	movs	r0, r3
 8003eda:	f006 f9f7 	bl	800a2cc <memset>
		}



		/* Disable the peripheral */
		hdma_spi1_tx.Instance->CCR &= ~DMA_CCR_EN;
 8003ede:	4b22      	ldr	r3, [pc, #136]	; (8003f68 <bus_process+0x1a0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	4b20      	ldr	r3, [pc, #128]	; (8003f68 <bus_process+0x1a0>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2101      	movs	r1, #1
 8003eea:	438a      	bics	r2, r1
 8003eec:	601a      	str	r2, [r3, #0]
		hdma_spi1_tx.DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma_spi1_tx.ChannelIndex);
 8003eee:	4b1e      	ldr	r3, [pc, #120]	; (8003f68 <bus_process+0x1a0>)
 8003ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ef2:	4b1d      	ldr	r3, [pc, #116]	; (8003f68 <bus_process+0x1a0>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	4091      	lsls	r1, r2
 8003efa:	000a      	movs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]
		/* Configure DMA Channel data length */
		hdma_spi1_tx.Instance->CNDTR = MAX_SPI_DATA;
 8003efe:	4b1a      	ldr	r3, [pc, #104]	; (8003f68 <bus_process+0x1a0>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2280      	movs	r2, #128	; 0x80
 8003f04:	0092      	lsls	r2, r2, #2
 8003f06:	605a      	str	r2, [r3, #4]
		/* Configure DMA Channel destination address */
		hdma_spi1_tx.Instance->CPAR = (uint32_t)&hspi1.Instance->DR;
 8003f08:	4b18      	ldr	r3, [pc, #96]	; (8003f6c <bus_process+0x1a4>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	330c      	adds	r3, #12
 8003f0e:	001a      	movs	r2, r3
 8003f10:	4b15      	ldr	r3, [pc, #84]	; (8003f68 <bus_process+0x1a0>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	609a      	str	r2, [r3, #8]
		/* Configure DMA Channel source address */
		hdma_spi1_tx.Instance->CMAR = (uint32_t)&spiTxBuffer[0];
 8003f16:	4b14      	ldr	r3, [pc, #80]	; (8003f68 <bus_process+0x1a0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a09      	ldr	r2, [pc, #36]	; (8003f40 <bus_process+0x178>)
 8003f1c:	60da      	str	r2, [r3, #12]
		/* Enable the Peripheral */
		hdma_spi1_tx.Instance->CCR |= DMA_CCR_EN;
 8003f1e:	4b12      	ldr	r3, [pc, #72]	; (8003f68 <bus_process+0x1a0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <bus_process+0x1a0>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2101      	movs	r1, #1
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	601a      	str	r2, [r3, #0]


		espMsgRcvd = 0;
 8003f2e:	4b03      	ldr	r3, [pc, #12]	; (8003f3c <bus_process+0x174>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	701a      	strb	r2, [r3, #0]


	}


}
 8003f34:	46c0      	nop			; (mov r8, r8)
 8003f36:	46bd      	mov	sp, r7
 8003f38:	b004      	add	sp, #16
 8003f3a:	bdb0      	pop	{r4, r5, r7, pc}
 8003f3c:	2000077c 	.word	0x2000077c
 8003f40:	20000870 	.word	0x20000870
 8003f44:	2000057c 	.word	0x2000057c
 8003f48:	000001ff 	.word	0x000001ff
 8003f4c:	0800e9f0 	.word	0x0800e9f0
 8003f50:	2000057d 	.word	0x2000057d
 8003f54:	20000779 	.word	0x20000779
 8003f58:	0800ec2c 	.word	0x0800ec2c
 8003f5c:	20000877 	.word	0x20000877
 8003f60:	20000582 	.word	0x20000582
 8003f64:	20000374 	.word	0x20000374
 8003f68:	20000f68 	.word	0x20000f68
 8003f6c:	20000e44 	.word	0x20000e44

08003f70 <bus_comm_process>:

/******************************************************************************/

void bus_comm_process(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0

	/*dbg_printf("main  :[0]: %x - [1] : %x - [2] : %x [3] : %x\n", spiRxBuffer[0], spiRxBuffer[1], spiRxBuffer[2], spiRxBuffer[3]);
	dbg_printf("main  :[0]: %x - [1] : %x - [2] : %x [3] : %x\n", spiRxBuffer[4], spiRxBuffer[5], spiRxBuffer[6], spiRxBuffer[7]);
	dbg_printf("rxBuffer  :[511]: %x \n", spiRxBuffer[SPI_RX_BUFFER_SIZE-1]);*/

	if (enterBL)
 8003f74:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <bus_comm_process+0x1c>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <bus_comm_process+0x14>
	{
		HAL_Delay(200);
 8003f7c:	20c8      	movs	r0, #200	; 0xc8
 8003f7e:	f001 fc51 	bl	8005824 <HAL_Delay>
		while(1)
 8003f82:	e7fe      	b.n	8003f82 <bus_comm_process+0x12>
		{
			//bl_jump();
		}
	}

}
 8003f84:	46c0      	nop			; (mov r8, r8)
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	20000372 	.word	0x20000372

08003f90 <conf_writeconf>:
/* Implementation of functions                                                */
/*============================================================================*/


void conf_writeconf (tBoardConfig * c)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
	static tBoardConfig  *conf = (tBoardConfig *)&__CONFIG_START;
	for (int i=0;i<3;i++)
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	e01f      	b.n	8003fde <conf_writeconf+0x4e>
	{
		FLASH_If_Erase((uint32_t)&__CONFIG_START,FLASH_PAGE_SIZE); 								//Delete 1 page
 8003f9e:	4b13      	ldr	r3, [pc, #76]	; (8003fec <conf_writeconf+0x5c>)
 8003fa0:	2180      	movs	r1, #128	; 0x80
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f000 fca0 	bl	80048e8 <FLASH_If_Erase>
		FLASH_If_Write((uint32_t)&__CONFIG_START,(uint32_t *)c,sizeof(tBoardConfig)/sizeof(uint32_t));
 8003fa8:	4b10      	ldr	r3, [pc, #64]	; (8003fec <conf_writeconf+0x5c>)
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	220d      	movs	r2, #13
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f000 fccf 	bl	8004952 <FLASH_If_Write>
		if (memcmp(conf,c,sizeof(tBoardConfig))==0)
 8003fb4:	4b0e      	ldr	r3, [pc, #56]	; (8003ff0 <conf_writeconf+0x60>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	2234      	movs	r2, #52	; 0x34
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f006 f96d 	bl	800a29c <memcmp>
 8003fc2:	1e03      	subs	r3, r0, #0
 8003fc4:	d104      	bne.n	8003fd0 <conf_writeconf+0x40>
		{
			dbg_printf("Write comp OK!!\r\n");
 8003fc6:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <conf_writeconf+0x64>)
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f007 f85d 	bl	800b088 <puts>
			break;
 8003fce:	e009      	b.n	8003fe4 <conf_writeconf+0x54>
		}
		dbg_printf("Write comp not ok\r\n");
 8003fd0:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <conf_writeconf+0x68>)
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	f007 f858 	bl	800b088 <puts>
	for (int i=0;i<3;i++)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	dddc      	ble.n	8003f9e <conf_writeconf+0xe>
	}

}
 8003fe4:	46c0      	nop			; (mov r8, r8)
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	b004      	add	sp, #16
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	0802f000 	.word	0x0802f000
 8003ff0:	2000013c 	.word	0x2000013c
 8003ff4:	0800ea24 	.word	0x0800ea24
 8003ff8:	0800ea38 	.word	0x0800ea38

08003ffc <conf_checkandload>:

/******************************************************************************/
void conf_checkandload()
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
	static tBoardConfig  *conf = (tBoardConfig *)&__CONFIG_START;

	if ((memcmp(&conf->magic,&DefaultConfig.magic,4)!= 0) || (conf->vers != DefaultConfig.vers))
 8004000:	4b13      	ldr	r3, [pc, #76]	; (8004050 <conf_checkandload+0x54>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	0018      	movs	r0, r3
 8004006:	4b13      	ldr	r3, [pc, #76]	; (8004054 <conf_checkandload+0x58>)
 8004008:	2204      	movs	r2, #4
 800400a:	0019      	movs	r1, r3
 800400c:	f006 f946 	bl	800a29c <memcmp>
 8004010:	1e03      	subs	r3, r0, #0
 8004012:	d106      	bne.n	8004022 <conf_checkandload+0x26>
 8004014:	4b0e      	ldr	r3, [pc, #56]	; (8004050 <conf_checkandload+0x54>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	4b0e      	ldr	r3, [pc, #56]	; (8004054 <conf_checkandload+0x58>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	429a      	cmp	r2, r3
 8004020:	d007      	beq.n	8004032 <conf_checkandload+0x36>
	{
		dbg_printf("Load Default Conf\r\n");
 8004022:	4b0d      	ldr	r3, [pc, #52]	; (8004058 <conf_checkandload+0x5c>)
 8004024:	0018      	movs	r0, r3
 8004026:	f007 f82f 	bl	800b088 <puts>
		conf_writeconf((tBoardConfig *)&DefaultConfig);
 800402a:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <conf_checkandload+0x58>)
 800402c:	0018      	movs	r0, r3
 800402e:	f7ff ffaf 	bl	8003f90 <conf_writeconf>
	}
	dbg_printf("Load Check Conf\r\n");
 8004032:	4b0a      	ldr	r3, [pc, #40]	; (800405c <conf_checkandload+0x60>)
 8004034:	0018      	movs	r0, r3
 8004036:	f007 f827 	bl	800b088 <puts>
	memcpy(&gBoardConfig,conf,sizeof(tBoardConfig));
 800403a:	4b05      	ldr	r3, [pc, #20]	; (8004050 <conf_checkandload+0x54>)
 800403c:	6819      	ldr	r1, [r3, #0]
 800403e:	4b08      	ldr	r3, [pc, #32]	; (8004060 <conf_checkandload+0x64>)
 8004040:	2234      	movs	r2, #52	; 0x34
 8004042:	0018      	movs	r0, r3
 8004044:	f006 f939 	bl	800a2ba <memcpy>
}
 8004048:	46c0      	nop			; (mov r8, r8)
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	20000140 	.word	0x20000140
 8004054:	0800eea4 	.word	0x0800eea4
 8004058:	0800ea4c 	.word	0x0800ea4c
 800405c:	0800ea60 	.word	0x0800ea60
 8004060:	200007b4 	.word	0x200007b4

08004064 <conf_save>:

/******************************************************************************/
void conf_save()
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
	static tBoardConfig  *conf = (tBoardConfig *)&__CONFIG_START;

	memcpy(&gBoardConfig.magic,&DefaultConfig.magic,4); 		//Ensure that magic and vers is the right value
 8004068:	4b07      	ldr	r3, [pc, #28]	; (8004088 <conf_save+0x24>)
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	4b07      	ldr	r3, [pc, #28]	; (800408c <conf_save+0x28>)
 800406e:	601a      	str	r2, [r3, #0]
	gBoardConfig.vers = DefaultConfig.vers;
 8004070:	4b05      	ldr	r3, [pc, #20]	; (8004088 <conf_save+0x24>)
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	4b05      	ldr	r3, [pc, #20]	; (800408c <conf_save+0x28>)
 8004076:	605a      	str	r2, [r3, #4]

	/*if (memcmp(&gConfig,conf,sizeof(tConfig))==0)		// Flash configuration and ram configuration matches so don't do anything
		return;
*/

	conf_writeconf(&gBoardConfig);
 8004078:	4b04      	ldr	r3, [pc, #16]	; (800408c <conf_save+0x28>)
 800407a:	0018      	movs	r0, r3
 800407c:	f7ff ff88 	bl	8003f90 <conf_writeconf>
}
 8004080:	46c0      	nop			; (mov r8, r8)
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	0800eea4 	.word	0x0800eea4
 800408c:	200007b4 	.word	0x200007b4

08004090 <conf_init>:
	memcpy(&gBoardConfig,conf,sizeof(tBoardConfig));
}

/******************************************************************************/
void conf_init()
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
	FLASH_If_Init();
 8004094:	f000 fc18 	bl	80048c8 <FLASH_If_Init>
	conf_checkandload();
 8004098:	f7ff ffb0 	bl	8003ffc <conf_checkandload>
}
 800409c:	46c0      	nop			; (mov r8, r8)
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <debug_init>:
/*============================================================================*/
/* Implementation of functions                                                */
/*============================================================================*/

void debug_init()
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
	memset(dbg_tx_buffer,0,DEBUG_TX_BUFFER_SIZE);
 80040a8:	2380      	movs	r3, #128	; 0x80
 80040aa:	005a      	lsls	r2, r3, #1
 80040ac:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <debug_init+0x20>)
 80040ae:	2100      	movs	r1, #0
 80040b0:	0018      	movs	r0, r3
 80040b2:	f006 f90b 	bl	800a2cc <memset>
	dbg_tx_count = 0;
 80040b6:	4b04      	ldr	r3, [pc, #16]	; (80040c8 <debug_init+0x24>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]
}
 80040bc:	46c0      	nop			; (mov r8, r8)
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	20000b70 	.word	0x20000b70
 80040c8:	20000378 	.word	0x20000378

080040cc <debug_transmit_buffer>:


/******************************************************************************/
void debug_transmit_buffer()
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
	uint32_t count = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	607b      	str	r3, [r7, #4]
	while ((DEBUG_UART->gState != HAL_UART_STATE_READY) & (count < 65000))
 80040d6:	e002      	b.n	80040de <debug_transmit_buffer+0x12>
	{
		//WDT_Feed();
		count ++;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3301      	adds	r3, #1
 80040dc:	607b      	str	r3, [r7, #4]
	while ((DEBUG_UART->gState != HAL_UART_STATE_READY) & (count < 65000))
 80040de:	4b13      	ldr	r3, [pc, #76]	; (800412c <debug_transmit_buffer+0x60>)
 80040e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040e2:	3b20      	subs	r3, #32
 80040e4:	1e5a      	subs	r2, r3, #1
 80040e6:	4193      	sbcs	r3, r2
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	4810      	ldr	r0, [pc, #64]	; (8004130 <debug_transmit_buffer+0x64>)
 80040ee:	2300      	movs	r3, #0
 80040f0:	4288      	cmp	r0, r1
 80040f2:	415b      	adcs	r3, r3
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	4013      	ands	r3, r2
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1ec      	bne.n	80040d8 <debug_transmit_buffer+0xc>
	}
	memcpy(dbg_tx_dma_buffer,dbg_tx_buffer,dbg_tx_count);
 80040fe:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <debug_transmit_buffer+0x68>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	490d      	ldr	r1, [pc, #52]	; (8004138 <debug_transmit_buffer+0x6c>)
 8004104:	4b0d      	ldr	r3, [pc, #52]	; (800413c <debug_transmit_buffer+0x70>)
 8004106:	0018      	movs	r0, r3
 8004108:	f006 f8d7 	bl	800a2ba <memcpy>
	dbg_tx(dbg_tx_dma_buffer,dbg_tx_count);
 800410c:	4b09      	ldr	r3, [pc, #36]	; (8004134 <debug_transmit_buffer+0x68>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	b29a      	uxth	r2, r3
 8004112:	490a      	ldr	r1, [pc, #40]	; (800413c <debug_transmit_buffer+0x70>)
 8004114:	4b05      	ldr	r3, [pc, #20]	; (800412c <debug_transmit_buffer+0x60>)
 8004116:	0018      	movs	r0, r3
 8004118:	f004 fd76 	bl	8008c08 <HAL_UART_Transmit_DMA>
	dbg_tx_count = 0;
 800411c:	4b05      	ldr	r3, [pc, #20]	; (8004134 <debug_transmit_buffer+0x68>)
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]
}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	46bd      	mov	sp, r7
 8004126:	b002      	add	sp, #8
 8004128:	bd80      	pop	{r7, pc}
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	20000dc0 	.word	0x20000dc0
 8004130:	0000fde7 	.word	0x0000fde7
 8004134:	20000378 	.word	0x20000378
 8004138:	20000b70 	.word	0x20000b70
 800413c:	20000a70 	.word	0x20000a70

08004140 <__io_putchar>:

/******************************************************************************/

PUTCHAR_PROTOTYPE
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
	if (ch != '\r')
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b0d      	cmp	r3, #13
 800414c:	d019      	beq.n	8004182 <__io_putchar+0x42>
	{
		dbg_tx_buffer[dbg_tx_count++] = ch;
 800414e:	4b0f      	ldr	r3, [pc, #60]	; (800418c <__io_putchar+0x4c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	1c59      	adds	r1, r3, #1
 8004154:	4a0d      	ldr	r2, [pc, #52]	; (800418c <__io_putchar+0x4c>)
 8004156:	6011      	str	r1, [r2, #0]
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	b2d1      	uxtb	r1, r2
 800415c:	4a0c      	ldr	r2, [pc, #48]	; (8004190 <__io_putchar+0x50>)
 800415e:	54d1      	strb	r1, [r2, r3]

		if ((ch == '\n') || (dbg_tx_count >= DEBUG_TX_BUFFER_SIZE))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b0a      	cmp	r3, #10
 8004164:	d003      	beq.n	800416e <__io_putchar+0x2e>
 8004166:	4b09      	ldr	r3, [pc, #36]	; (800418c <__io_putchar+0x4c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2bff      	cmp	r3, #255	; 0xff
 800416c:	d909      	bls.n	8004182 <__io_putchar+0x42>
		{
			dbg_tx_buffer[dbg_tx_count++] = '\r';
 800416e:	4b07      	ldr	r3, [pc, #28]	; (800418c <__io_putchar+0x4c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	1c59      	adds	r1, r3, #1
 8004174:	4a05      	ldr	r2, [pc, #20]	; (800418c <__io_putchar+0x4c>)
 8004176:	6011      	str	r1, [r2, #0]
 8004178:	4a05      	ldr	r2, [pc, #20]	; (8004190 <__io_putchar+0x50>)
 800417a:	210d      	movs	r1, #13
 800417c:	54d1      	strb	r1, [r2, r3]
			debug_transmit_buffer();
 800417e:	f7ff ffa5 	bl	80040cc <debug_transmit_buffer>
		}
	}

	return ch;
 8004182:	687b      	ldr	r3, [r7, #4]
}
 8004184:	0018      	movs	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	b002      	add	sp, #8
 800418a:	bd80      	pop	{r7, pc}
 800418c:	20000378 	.word	0x20000378
 8004190:	20000b70 	.word	0x20000b70

08004194 <Delay>:
/**
 * @brief Delay for specified period
 * @param micros	delay time in microseconds
 */
void Delay(uint32_t micros)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
	  /* Go to clock cycles */
	  	micros *= (SystemCoreClock / 1000000) / 5;
 800419c:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <Delay+0x34>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	490a      	ldr	r1, [pc, #40]	; (80041cc <Delay+0x38>)
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7fb ffc6 	bl	8000134 <__udivsi3>
 80041a8:	0003      	movs	r3, r0
 80041aa:	001a      	movs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4353      	muls	r3, r2
 80041b0:	607b      	str	r3, [r7, #4]

	  	/* Wait till done */
	  	while (micros--);
 80041b2:	46c0      	nop			; (mov r8, r8)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	1e5a      	subs	r2, r3, #1
 80041b8:	607a      	str	r2, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1fa      	bne.n	80041b4 <Delay+0x20>
}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	46bd      	mov	sp, r7
 80041c2:	b002      	add	sp, #8
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	2000016c 	.word	0x2000016c
 80041cc:	004c4b40 	.word	0x004c4b40

080041d0 <softI2C_sleep_usec>:
/**
 * @brief Sleep required for softI2C implementation
 * @param useconds	delay time in microseconds
 */
void softI2C_sleep_usec(uint32_t useconds)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
	Delay(useconds);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	0018      	movs	r0, r3
 80041dc:	f7ff ffda 	bl	8004194 <Delay>
}
 80041e0:	46c0      	nop			; (mov r8, r8)
 80041e2:	46bd      	mov	sp, r7
 80041e4:	b002      	add	sp, #8
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <softI2C_SCL_read>:
/**
 * @brief Read SCL pin and return
 * @return
 */
uint8_t softI2C_SCL_read(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
    return (uint8_t)HAL_GPIO_ReadPin(gSoftIC2.port, gSoftIC2.scl) == GPIO_PIN_SET;
 80041ec:	4b06      	ldr	r3, [pc, #24]	; (8004208 <softI2C_SCL_read+0x20>)
 80041ee:	2240      	movs	r2, #64	; 0x40
 80041f0:	0011      	movs	r1, r2
 80041f2:	0018      	movs	r0, r3
 80041f4:	f002 fa56 	bl	80066a4 <HAL_GPIO_ReadPin>
 80041f8:	0003      	movs	r3, r0
 80041fa:	3b01      	subs	r3, #1
 80041fc:	425a      	negs	r2, r3
 80041fe:	4153      	adcs	r3, r2
 8004200:	b2db      	uxtb	r3, r3
}
 8004202:	0018      	movs	r0, r3
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	50000400 	.word	0x50000400

0800420c <softI2C_SDA_read>:
/**
 * @brief Read SDA pin and return
 * @return
 */
uint8_t softI2C_SDA_read(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
    return (uint8_t)HAL_GPIO_ReadPin(gSoftIC2.port, gSoftIC2.sda) == GPIO_PIN_SET;
 8004210:	4b06      	ldr	r3, [pc, #24]	; (800422c <softI2C_SDA_read+0x20>)
 8004212:	2280      	movs	r2, #128	; 0x80
 8004214:	0011      	movs	r1, r2
 8004216:	0018      	movs	r0, r3
 8004218:	f002 fa44 	bl	80066a4 <HAL_GPIO_ReadPin>
 800421c:	0003      	movs	r3, r0
 800421e:	3b01      	subs	r3, #1
 8004220:	425a      	negs	r2, r3
 8004222:	4153      	adcs	r3, r2
 8004224:	b2db      	uxtb	r3, r3
}
 8004226:	0018      	movs	r0, r3
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	50000400 	.word	0x50000400

08004230 <softI2C_wait_while_clock_stretching>:
/**
 * @brief Wait for SoftI2C
 * @return 0 or -1
 */
static uint8_t softI2C_wait_while_clock_stretching(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
    uint8_t timeout = 100;
 8004236:	1dfb      	adds	r3, r7, #7
 8004238:	2264      	movs	r2, #100	; 0x64
 800423a:	701a      	strb	r2, [r3, #0]

    while (--timeout) {
 800423c:	e008      	b.n	8004250 <softI2C_wait_while_clock_stretching+0x20>
        if (softI2C_SCL_read())
 800423e:	f7ff ffd3 	bl	80041e8 <softI2C_SCL_read>
 8004242:	1e03      	subs	r3, r0, #0
 8004244:	d001      	beq.n	800424a <softI2C_wait_while_clock_stretching+0x1a>
            return 0;
 8004246:	2300      	movs	r3, #0
 8004248:	e00c      	b.n	8004264 <softI2C_wait_while_clock_stretching+0x34>
        softI2C_sleep_usec(SOFTI2C_WAIT);
 800424a:	2005      	movs	r0, #5
 800424c:	f7ff ffc0 	bl	80041d0 <softI2C_sleep_usec>
    while (--timeout) {
 8004250:	1dfb      	adds	r3, r7, #7
 8004252:	1dfa      	adds	r2, r7, #7
 8004254:	7812      	ldrb	r2, [r2, #0]
 8004256:	3a01      	subs	r2, #1
 8004258:	701a      	strb	r2, [r3, #0]
 800425a:	1dfb      	adds	r3, r7, #7
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1ed      	bne.n	800423e <softI2C_wait_while_clock_stretching+0xe>
    }

    return -1;
 8004262:	23ff      	movs	r3, #255	; 0xff
}
 8004264:	0018      	movs	r0, r3
 8004266:	46bd      	mov	sp, r7
 8004268:	b002      	add	sp, #8
 800426a:	bd80      	pop	{r7, pc}

0800426c <softI2C_SDA_in>:
/*****************************************************************************/
/**
 * @brief Change SDA mode input
 */
void softI2C_SDA_in(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {
 8004272:	1d3b      	adds	r3, r7, #4
 8004274:	0018      	movs	r0, r3
 8004276:	2314      	movs	r3, #20
 8004278:	001a      	movs	r2, r3
 800427a:	2100      	movs	r1, #0
 800427c:	f006 f826 	bl	800a2cc <memset>
        .Pin = gSoftIC2.sda,
 8004280:	2380      	movs	r3, #128	; 0x80
 8004282:	001a      	movs	r2, r3
    GPIO_InitTypeDef GPIO_InitStruct = {
 8004284:	1d3b      	adds	r3, r7, #4
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	1d3b      	adds	r3, r7, #4
 800428a:	2201      	movs	r2, #1
 800428c:	609a      	str	r2, [r3, #8]
 800428e:	1d3b      	adds	r3, r7, #4
 8004290:	2202      	movs	r2, #2
 8004292:	60da      	str	r2, [r3, #12]
        .Mode = GPIO_MODE_INPUT,
        .Pull = GPIO_PULLUP,
        .Speed = GPIO_SPEED_FREQ_HIGH,
    };
    HAL_GPIO_Init(gSoftIC2.port, &GPIO_InitStruct);
 8004294:	4a04      	ldr	r2, [pc, #16]	; (80042a8 <softI2C_SDA_in+0x3c>)
 8004296:	1d3b      	adds	r3, r7, #4
 8004298:	0019      	movs	r1, r3
 800429a:	0010      	movs	r0, r2
 800429c:	f002 f884 	bl	80063a8 <HAL_GPIO_Init>
}
 80042a0:	46c0      	nop			; (mov r8, r8)
 80042a2:	46bd      	mov	sp, r7
 80042a4:	b006      	add	sp, #24
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	50000400 	.word	0x50000400

080042ac <softI2C_SDA_out>:
/*****************************************************************************/
/**
 * @brief Change SDA mode output
 */
void softI2C_SDA_out(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {
 80042b2:	1d3b      	adds	r3, r7, #4
 80042b4:	0018      	movs	r0, r3
 80042b6:	2314      	movs	r3, #20
 80042b8:	001a      	movs	r2, r3
 80042ba:	2100      	movs	r1, #0
 80042bc:	f006 f806 	bl	800a2cc <memset>
        .Pin = gSoftIC2.sda,
 80042c0:	2380      	movs	r3, #128	; 0x80
 80042c2:	001a      	movs	r2, r3
    GPIO_InitTypeDef GPIO_InitStruct = {
 80042c4:	1d3b      	adds	r3, r7, #4
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	1d3b      	adds	r3, r7, #4
 80042ca:	2201      	movs	r2, #1
 80042cc:	605a      	str	r2, [r3, #4]
 80042ce:	1d3b      	adds	r3, r7, #4
 80042d0:	2201      	movs	r2, #1
 80042d2:	609a      	str	r2, [r3, #8]
 80042d4:	1d3b      	adds	r3, r7, #4
 80042d6:	2202      	movs	r2, #2
 80042d8:	60da      	str	r2, [r3, #12]
        .Mode = GPIO_MODE_OUTPUT_PP,
        .Pull = GPIO_PULLUP,
        .Speed = GPIO_SPEED_FREQ_HIGH,
    };
    HAL_GPIO_Init(gSoftIC2.port, &GPIO_InitStruct);
 80042da:	4a08      	ldr	r2, [pc, #32]	; (80042fc <softI2C_SDA_out+0x50>)
 80042dc:	1d3b      	adds	r3, r7, #4
 80042de:	0019      	movs	r1, r3
 80042e0:	0010      	movs	r0, r2
 80042e2:	f002 f861 	bl	80063a8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(gSoftIC2.port, gSoftIC2.sda, GPIO_PIN_RESET);
 80042e6:	4b05      	ldr	r3, [pc, #20]	; (80042fc <softI2C_SDA_out+0x50>)
 80042e8:	2180      	movs	r1, #128	; 0x80
 80042ea:	2200      	movs	r2, #0
 80042ec:	0018      	movs	r0, r3
 80042ee:	f002 f9f6 	bl	80066de <HAL_GPIO_WritePin>
}
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	46bd      	mov	sp, r7
 80042f6:	b006      	add	sp, #24
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	50000400 	.word	0x50000400

08004300 <softI2C_SCL_in>:
/*****************************************************************************/
/**
 * @brief Change SCL mode input
 */
void softI2C_SCL_in(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {
 8004306:	1d3b      	adds	r3, r7, #4
 8004308:	0018      	movs	r0, r3
 800430a:	2314      	movs	r3, #20
 800430c:	001a      	movs	r2, r3
 800430e:	2100      	movs	r1, #0
 8004310:	f005 ffdc 	bl	800a2cc <memset>
        .Pin = gSoftIC2.scl,
 8004314:	2340      	movs	r3, #64	; 0x40
 8004316:	001a      	movs	r2, r3
    GPIO_InitTypeDef GPIO_InitStruct = {
 8004318:	1d3b      	adds	r3, r7, #4
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	1d3b      	adds	r3, r7, #4
 800431e:	2201      	movs	r2, #1
 8004320:	609a      	str	r2, [r3, #8]
 8004322:	1d3b      	adds	r3, r7, #4
 8004324:	2202      	movs	r2, #2
 8004326:	60da      	str	r2, [r3, #12]
        .Mode = GPIO_MODE_INPUT,
        .Pull = GPIO_PULLUP,
        .Speed = GPIO_SPEED_FREQ_HIGH,
    };
    HAL_GPIO_Init(gSoftIC2.port, &GPIO_InitStruct);
 8004328:	4a04      	ldr	r2, [pc, #16]	; (800433c <softI2C_SCL_in+0x3c>)
 800432a:	1d3b      	adds	r3, r7, #4
 800432c:	0019      	movs	r1, r3
 800432e:	0010      	movs	r0, r2
 8004330:	f002 f83a 	bl	80063a8 <HAL_GPIO_Init>
}
 8004334:	46c0      	nop			; (mov r8, r8)
 8004336:	46bd      	mov	sp, r7
 8004338:	b006      	add	sp, #24
 800433a:	bd80      	pop	{r7, pc}
 800433c:	50000400 	.word	0x50000400

08004340 <softI2C_SCL_out>:
/*****************************************************************************/
/**
 * @brief Change SCL mode output
 */
void softI2C_SCL_out(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {
 8004346:	1d3b      	adds	r3, r7, #4
 8004348:	0018      	movs	r0, r3
 800434a:	2314      	movs	r3, #20
 800434c:	001a      	movs	r2, r3
 800434e:	2100      	movs	r1, #0
 8004350:	f005 ffbc 	bl	800a2cc <memset>
        .Pin = gSoftIC2.scl,
 8004354:	2340      	movs	r3, #64	; 0x40
 8004356:	001a      	movs	r2, r3
    GPIO_InitTypeDef GPIO_InitStruct = {
 8004358:	1d3b      	adds	r3, r7, #4
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	1d3b      	adds	r3, r7, #4
 800435e:	2201      	movs	r2, #1
 8004360:	605a      	str	r2, [r3, #4]
 8004362:	1d3b      	adds	r3, r7, #4
 8004364:	2201      	movs	r2, #1
 8004366:	609a      	str	r2, [r3, #8]
 8004368:	1d3b      	adds	r3, r7, #4
 800436a:	2202      	movs	r2, #2
 800436c:	60da      	str	r2, [r3, #12]
        .Mode = GPIO_MODE_OUTPUT_PP,
        .Pull = GPIO_PULLUP,
        .Speed = GPIO_SPEED_FREQ_HIGH,
    };
    HAL_GPIO_Init(gSoftIC2.port, &GPIO_InitStruct);
 800436e:	4a08      	ldr	r2, [pc, #32]	; (8004390 <softI2C_SCL_out+0x50>)
 8004370:	1d3b      	adds	r3, r7, #4
 8004372:	0019      	movs	r1, r3
 8004374:	0010      	movs	r0, r2
 8004376:	f002 f817 	bl	80063a8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(gSoftIC2.port, gSoftIC2.scl, GPIO_PIN_RESET);
 800437a:	4b05      	ldr	r3, [pc, #20]	; (8004390 <softI2C_SCL_out+0x50>)
 800437c:	2140      	movs	r1, #64	; 0x40
 800437e:	2200      	movs	r2, #0
 8004380:	0018      	movs	r0, r3
 8004382:	f002 f9ac 	bl	80066de <HAL_GPIO_WritePin>
}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	46bd      	mov	sp, r7
 800438a:	b006      	add	sp, #24
 800438c:	bd80      	pop	{r7, pc}
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	50000400 	.word	0x50000400

08004394 <softI2C_start>:
/**
 * @brief Soft I2C start
 * @return	-1 or 0
 */
static uint8_t softI2C_start(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
    softI2C_SCL_in();
 8004398:	f7ff ffb2 	bl	8004300 <softI2C_SCL_in>
    if (softI2C_wait_while_clock_stretching())
 800439c:	f7ff ff48 	bl	8004230 <softI2C_wait_while_clock_stretching>
 80043a0:	1e03      	subs	r3, r0, #0
 80043a2:	d001      	beq.n	80043a8 <softI2C_start+0x14>
        return -1;
 80043a4:	23ff      	movs	r3, #255	; 0xff
 80043a6:	e00a      	b.n	80043be <softI2C_start+0x2a>

    softI2C_SDA_out();
 80043a8:	f7ff ff80 	bl	80042ac <softI2C_SDA_out>
    softI2C_sleep_usec(SOFTI2C_WAIT);
 80043ac:	2005      	movs	r0, #5
 80043ae:	f7ff ff0f 	bl	80041d0 <softI2C_sleep_usec>
    softI2C_SCL_out();
 80043b2:	f7ff ffc5 	bl	8004340 <softI2C_SCL_out>
    softI2C_sleep_usec(SOFTI2C_WAIT);
 80043b6:	2005      	movs	r0, #5
 80043b8:	f7ff ff0a 	bl	80041d0 <softI2C_sleep_usec>
    return 0;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	0018      	movs	r0, r3
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <softI2C_stop>:
/*****************************************************************************/
/**
 * @brief Soft I2C stop
 */
static void softI2C_stop(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
	softI2C_SDA_out();
 80043c8:	f7ff ff70 	bl	80042ac <softI2C_SDA_out>
	softI2C_sleep_usec(SOFTI2C_WAIT);
 80043cc:	2005      	movs	r0, #5
 80043ce:	f7ff feff 	bl	80041d0 <softI2C_sleep_usec>
    softI2C_SCL_in();
 80043d2:	f7ff ff95 	bl	8004300 <softI2C_SCL_in>
    softI2C_sleep_usec(SOFTI2C_WAIT);
 80043d6:	2005      	movs	r0, #5
 80043d8:	f7ff fefa 	bl	80041d0 <softI2C_sleep_usec>
    softI2C_SDA_in();
 80043dc:	f7ff ff46 	bl	800426c <softI2C_SDA_in>
    softI2C_sleep_usec(SOFTI2C_WAIT);
 80043e0:	2005      	movs	r0, #5
 80043e2:	f7ff fef5 	bl	80041d0 <softI2C_sleep_usec>
}
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <softI2C_fill_cmd_send_buf>:
 * @param num_args	number of arguments	(Unused)
 * @return	index in buffer
 */
uint16_t softI2C_fill_cmd_send_buf(uint8_t *buf, uint16_t cmd,
                                     const uint16_t *args, uint8_t num_args)
{
 80043ec:	b5b0      	push	{r4, r5, r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	0008      	movs	r0, r1
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	0019      	movs	r1, r3
 80043fa:	250a      	movs	r5, #10
 80043fc:	197b      	adds	r3, r7, r5
 80043fe:	1c02      	adds	r2, r0, #0
 8004400:	801a      	strh	r2, [r3, #0]
 8004402:	2309      	movs	r3, #9
 8004404:	18fb      	adds	r3, r7, r3
 8004406:	1c0a      	adds	r2, r1, #0
 8004408:	701a      	strb	r2, [r3, #0]
    uint16_t idx = 0;
 800440a:	2016      	movs	r0, #22
 800440c:	183b      	adds	r3, r7, r0
 800440e:	2200      	movs	r2, #0
 8004410:	801a      	strh	r2, [r3, #0]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 8004412:	197b      	adds	r3, r7, r5
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	0a1b      	lsrs	r3, r3, #8
 8004418:	b299      	uxth	r1, r3
 800441a:	183b      	adds	r3, r7, r0
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	0004      	movs	r4, r0
 8004420:	183a      	adds	r2, r7, r0
 8004422:	1c58      	adds	r0, r3, #1
 8004424:	8010      	strh	r0, [r2, #0]
 8004426:	001a      	movs	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	189b      	adds	r3, r3, r2
 800442c:	b2ca      	uxtb	r2, r1
 800442e:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 8004430:	0020      	movs	r0, r4
 8004432:	183b      	adds	r3, r7, r0
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	183a      	adds	r2, r7, r0
 8004438:	1c59      	adds	r1, r3, #1
 800443a:	8011      	strh	r1, [r2, #0]
 800443c:	001a      	movs	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	189b      	adds	r3, r3, r2
 8004442:	197a      	adds	r2, r7, r5
 8004444:	8812      	ldrh	r2, [r2, #0]
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	701a      	strb	r2, [r3, #0]

    return idx;
 800444a:	183b      	adds	r3, r7, r0
 800444c:	881b      	ldrh	r3, [r3, #0]
}
 800444e:	0018      	movs	r0, r3
 8004450:	46bd      	mov	sp, r7
 8004452:	b006      	add	sp, #24
 8004454:	bdb0      	pop	{r4, r5, r7, pc}

08004456 <STS31_WriteCmd_soft>:
 * @brief SoftI2C Write command to STS31 thermal sensor chip
 * @param data	data to be sent
 * @return	-1 or 0
 */
int STS31_WriteCmd_soft(uint8_t data)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b084      	sub	sp, #16
 800445a:	af00      	add	r7, sp, #0
 800445c:	0002      	movs	r2, r0
 800445e:	1dfb      	adds	r3, r7, #7
 8004460:	701a      	strb	r2, [r3, #0]
	int8_t nack, i;
	for (i = 7; i >= 0; i--)
 8004462:	230f      	movs	r3, #15
 8004464:	18fb      	adds	r3, r7, r3
 8004466:	2207      	movs	r2, #7
 8004468:	701a      	strb	r2, [r3, #0]
 800446a:	e029      	b.n	80044c0 <STS31_WriteCmd_soft+0x6a>
	{
		softI2C_SCL_out();
 800446c:	f7ff ff68 	bl	8004340 <softI2C_SCL_out>
		if ((data >> i) & 0x01)
 8004470:	1dfb      	adds	r3, r7, #7
 8004472:	781a      	ldrb	r2, [r3, #0]
 8004474:	230f      	movs	r3, #15
 8004476:	18fb      	adds	r3, r7, r3
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	b25b      	sxtb	r3, r3
 800447c:	411a      	asrs	r2, r3
 800447e:	0013      	movs	r3, r2
 8004480:	2201      	movs	r2, #1
 8004482:	4013      	ands	r3, r2
 8004484:	d002      	beq.n	800448c <STS31_WriteCmd_soft+0x36>
			softI2C_SDA_in();
 8004486:	f7ff fef1 	bl	800426c <softI2C_SDA_in>
 800448a:	e001      	b.n	8004490 <STS31_WriteCmd_soft+0x3a>
		else
			softI2C_SDA_out();
 800448c:	f7ff ff0e 	bl	80042ac <softI2C_SDA_out>
		softI2C_sleep_usec(SOFTI2C_WAIT);
 8004490:	2005      	movs	r0, #5
 8004492:	f7ff fe9d 	bl	80041d0 <softI2C_sleep_usec>
		softI2C_SCL_in();
 8004496:	f7ff ff33 	bl	8004300 <softI2C_SCL_in>
		softI2C_sleep_usec(SOFTI2C_WAIT);
 800449a:	2005      	movs	r0, #5
 800449c:	f7ff fe98 	bl	80041d0 <softI2C_sleep_usec>
		if (softI2C_wait_while_clock_stretching())
 80044a0:	f7ff fec6 	bl	8004230 <softI2C_wait_while_clock_stretching>
 80044a4:	1e03      	subs	r3, r0, #0
 80044a6:	d002      	beq.n	80044ae <STS31_WriteCmd_soft+0x58>
			return -1;
 80044a8:	2301      	movs	r3, #1
 80044aa:	425b      	negs	r3, r3
 80044ac:	e029      	b.n	8004502 <STS31_WriteCmd_soft+0xac>
	for (i = 7; i >= 0; i--)
 80044ae:	210f      	movs	r1, #15
 80044b0:	187b      	adds	r3, r7, r1
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	b25b      	sxtb	r3, r3
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	187b      	adds	r3, r7, r1
 80044be:	701a      	strb	r2, [r3, #0]
 80044c0:	230f      	movs	r3, #15
 80044c2:	18fb      	adds	r3, r7, r3
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b7f      	cmp	r3, #127	; 0x7f
 80044c8:	d9d0      	bls.n	800446c <STS31_WriteCmd_soft+0x16>
	}
	softI2C_SCL_out();
 80044ca:	f7ff ff39 	bl	8004340 <softI2C_SCL_out>
	softI2C_SDA_in();
 80044ce:	f7ff fecd 	bl	800426c <softI2C_SDA_in>
	softI2C_sleep_usec(SOFTI2C_WAIT);
 80044d2:	2005      	movs	r0, #5
 80044d4:	f7ff fe7c 	bl	80041d0 <softI2C_sleep_usec>
	softI2C_SCL_in();
 80044d8:	f7ff ff12 	bl	8004300 <softI2C_SCL_in>
	if (softI2C_wait_while_clock_stretching())
 80044dc:	f7ff fea8 	bl	8004230 <softI2C_wait_while_clock_stretching>
 80044e0:	1e03      	subs	r3, r0, #0
 80044e2:	d002      	beq.n	80044ea <STS31_WriteCmd_soft+0x94>
		return -1;
 80044e4:	2301      	movs	r3, #1
 80044e6:	425b      	negs	r3, r3
 80044e8:	e00b      	b.n	8004502 <STS31_WriteCmd_soft+0xac>
	nack = (softI2C_SDA_read() != 0);
 80044ea:	f7ff fe8f 	bl	800420c <softI2C_SDA_read>
 80044ee:	0003      	movs	r3, r0
 80044f0:	1e5a      	subs	r2, r3, #1
 80044f2:	4193      	sbcs	r3, r2
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	230e      	movs	r3, #14
 80044f8:	18fb      	adds	r3, r7, r3
 80044fa:	701a      	strb	r2, [r3, #0]
	softI2C_SCL_out();
 80044fc:	f7ff ff20 	bl	8004340 <softI2C_SCL_out>

	return 0;
 8004500:	2300      	movs	r3, #0
}
 8004502:	0018      	movs	r0, r3
 8004504:	46bd      	mov	sp, r7
 8004506:	b004      	add	sp, #16
 8004508:	bd80      	pop	{r7, pc}

0800450a <STS31_ReadCmd_soft>:
 * @brief SoftI2C Read command from STS31 thermal sensor chip
 * @param ack	send ack or not
 * @return	data or -1
 */
int STS31_ReadCmd_soft(uint8_t ack)
{
 800450a:	b590      	push	{r4, r7, lr}
 800450c:	b085      	sub	sp, #20
 800450e:	af00      	add	r7, sp, #0
 8004510:	0002      	movs	r2, r0
 8004512:	1dfb      	adds	r3, r7, #7
 8004514:	701a      	strb	r2, [r3, #0]
	int8_t i;
	uint8_t data = 0;
 8004516:	230e      	movs	r3, #14
 8004518:	18fb      	adds	r3, r7, r3
 800451a:	2200      	movs	r2, #0
 800451c:	701a      	strb	r2, [r3, #0]
	softI2C_SDA_in();
 800451e:	f7ff fea5 	bl	800426c <softI2C_SDA_in>
	for (i = 7; i >= 0; i--)
 8004522:	230f      	movs	r3, #15
 8004524:	18fb      	adds	r3, r7, r3
 8004526:	2207      	movs	r2, #7
 8004528:	701a      	strb	r2, [r3, #0]
 800452a:	e02b      	b.n	8004584 <STS31_ReadCmd_soft+0x7a>
	{
		softI2C_sleep_usec(SOFTI2C_WAIT);
 800452c:	2005      	movs	r0, #5
 800452e:	f7ff fe4f 	bl	80041d0 <softI2C_sleep_usec>
		softI2C_SCL_in();
 8004532:	f7ff fee5 	bl	8004300 <softI2C_SCL_in>
		if (softI2C_wait_while_clock_stretching())
 8004536:	f7ff fe7b 	bl	8004230 <softI2C_wait_while_clock_stretching>
 800453a:	1e03      	subs	r3, r0, #0
 800453c:	d002      	beq.n	8004544 <STS31_ReadCmd_soft+0x3a>
			return -1;
 800453e:	2301      	movs	r3, #1
 8004540:	425b      	negs	r3, r3
 8004542:	e043      	b.n	80045cc <STS31_ReadCmd_soft+0xc2>
		data |= (softI2C_SDA_read() != 0) << i;
 8004544:	f7ff fe62 	bl	800420c <softI2C_SDA_read>
 8004548:	0003      	movs	r3, r0
 800454a:	1e5a      	subs	r2, r3, #1
 800454c:	4193      	sbcs	r3, r2
 800454e:	b2db      	uxtb	r3, r3
 8004550:	001a      	movs	r2, r3
 8004552:	240f      	movs	r4, #15
 8004554:	193b      	adds	r3, r7, r4
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	b25b      	sxtb	r3, r3
 800455a:	409a      	lsls	r2, r3
 800455c:	0013      	movs	r3, r2
 800455e:	b25a      	sxtb	r2, r3
 8004560:	210e      	movs	r1, #14
 8004562:	187b      	adds	r3, r7, r1
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	b25b      	sxtb	r3, r3
 8004568:	4313      	orrs	r3, r2
 800456a:	b25a      	sxtb	r2, r3
 800456c:	187b      	adds	r3, r7, r1
 800456e:	701a      	strb	r2, [r3, #0]
		softI2C_SCL_out();
 8004570:	f7ff fee6 	bl	8004340 <softI2C_SCL_out>
	for (i = 7; i >= 0; i--)
 8004574:	193b      	adds	r3, r7, r4
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	b25b      	sxtb	r3, r3
 800457a:	b2db      	uxtb	r3, r3
 800457c:	3b01      	subs	r3, #1
 800457e:	b2da      	uxtb	r2, r3
 8004580:	193b      	adds	r3, r7, r4
 8004582:	701a      	strb	r2, [r3, #0]
 8004584:	230f      	movs	r3, #15
 8004586:	18fb      	adds	r3, r7, r3
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b7f      	cmp	r3, #127	; 0x7f
 800458c:	d9ce      	bls.n	800452c <STS31_ReadCmd_soft+0x22>
	}
	if (ack)
 800458e:	1dfb      	adds	r3, r7, #7
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <STS31_ReadCmd_soft+0x92>
		softI2C_SDA_out();
 8004596:	f7ff fe89 	bl	80042ac <softI2C_SDA_out>
 800459a:	e001      	b.n	80045a0 <STS31_ReadCmd_soft+0x96>
	else
		softI2C_SDA_in();
 800459c:	f7ff fe66 	bl	800426c <softI2C_SDA_in>
	softI2C_sleep_usec(SOFTI2C_WAIT);
 80045a0:	2005      	movs	r0, #5
 80045a2:	f7ff fe15 	bl	80041d0 <softI2C_sleep_usec>
	softI2C_SCL_in();
 80045a6:	f7ff feab 	bl	8004300 <softI2C_SCL_in>
	softI2C_sleep_usec(SOFTI2C_WAIT);
 80045aa:	2005      	movs	r0, #5
 80045ac:	f7ff fe10 	bl	80041d0 <softI2C_sleep_usec>
	if (softI2C_wait_while_clock_stretching())
 80045b0:	f7ff fe3e 	bl	8004230 <softI2C_wait_while_clock_stretching>
 80045b4:	1e03      	subs	r3, r0, #0
 80045b6:	d002      	beq.n	80045be <STS31_ReadCmd_soft+0xb4>
		return -1;
 80045b8:	2301      	movs	r3, #1
 80045ba:	425b      	negs	r3, r3
 80045bc:	e006      	b.n	80045cc <STS31_ReadCmd_soft+0xc2>
	softI2C_SCL_out();
 80045be:	f7ff febf 	bl	8004340 <softI2C_SCL_out>
	softI2C_SDA_in();
 80045c2:	f7ff fe53 	bl	800426c <softI2C_SDA_in>

	return data;
 80045c6:	230e      	movs	r3, #14
 80045c8:	18fb      	adds	r3, r7, r3
 80045ca:	781b      	ldrb	r3, [r3, #0]
}
 80045cc:	0018      	movs	r0, r3
 80045ce:	46bd      	mov	sp, r7
 80045d0:	b005      	add	sp, #20
 80045d2:	bd90      	pop	{r4, r7, pc}

080045d4 <softI2C_i2c_write>:
 * @param count		unused
 * @return	-1 or return value
 */
int8_t softI2C_i2c_write(uint8_t address, const uint16_t cmd,
                           uint16_t count)
{
 80045d4:	b590      	push	{r4, r7, lr}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	0004      	movs	r4, r0
 80045dc:	0008      	movs	r0, r1
 80045de:	0011      	movs	r1, r2
 80045e0:	1dfb      	adds	r3, r7, #7
 80045e2:	1c22      	adds	r2, r4, #0
 80045e4:	701a      	strb	r2, [r3, #0]
 80045e6:	1d3b      	adds	r3, r7, #4
 80045e8:	1c02      	adds	r2, r0, #0
 80045ea:	801a      	strh	r2, [r3, #0]
 80045ec:	1cbb      	adds	r3, r7, #2
 80045ee:	1c0a      	adds	r2, r1, #0
 80045f0:	801a      	strh	r2, [r3, #0]
    int8_t ret;
    uint8_t buf[2];

    softI2C_fill_cmd_send_buf(buf, cmd, NULL, 0);
 80045f2:	1d3b      	adds	r3, r7, #4
 80045f4:	8819      	ldrh	r1, [r3, #0]
 80045f6:	230c      	movs	r3, #12
 80045f8:	18f8      	adds	r0, r7, r3
 80045fa:	2300      	movs	r3, #0
 80045fc:	2200      	movs	r2, #0
 80045fe:	f7ff fef5 	bl	80043ec <softI2C_fill_cmd_send_buf>

    ret = softI2C_start();
 8004602:	f7ff fec7 	bl	8004394 <softI2C_start>
 8004606:	0003      	movs	r3, r0
 8004608:	001a      	movs	r2, r3
 800460a:	2117      	movs	r1, #23
 800460c:	187b      	adds	r3, r7, r1
 800460e:	701a      	strb	r2, [r3, #0]
    if (ret != 0)
 8004610:	187b      	adds	r3, r7, r1
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	b25b      	sxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <softI2C_i2c_write+0x4c>
        return -1;
 800461a:	2301      	movs	r3, #1
 800461c:	425b      	negs	r3, r3
 800461e:	e02f      	b.n	8004680 <softI2C_i2c_write+0xac>

    ret = STS31_WriteCmd_soft(address << 1 | 0);
 8004620:	1dfb      	adds	r3, r7, #7
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	18db      	adds	r3, r3, r3
 8004626:	b2db      	uxtb	r3, r3
 8004628:	0018      	movs	r0, r3
 800462a:	f7ff ff14 	bl	8004456 <STS31_WriteCmd_soft>
 800462e:	0002      	movs	r2, r0
 8004630:	2117      	movs	r1, #23
 8004632:	187b      	adds	r3, r7, r1
 8004634:	701a      	strb	r2, [r3, #0]
    if (ret != 0) {
 8004636:	187b      	adds	r3, r7, r1
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	b25b      	sxtb	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d004      	beq.n	800464a <softI2C_i2c_write+0x76>
        softI2C_stop();
 8004640:	f7ff fec0 	bl	80043c4 <softI2C_stop>
        return -1;
 8004644:	2301      	movs	r3, #1
 8004646:	425b      	negs	r3, r3
 8004648:	e01a      	b.n	8004680 <softI2C_i2c_write+0xac>
    }

    for (int i = 0; i < 2; i++)
 800464a:	2300      	movs	r3, #0
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	e00e      	b.n	800466e <softI2C_i2c_write+0x9a>
    {
    	ret = STS31_WriteCmd_soft(buf[i]);
 8004650:	230c      	movs	r3, #12
 8004652:	18fa      	adds	r2, r7, r3
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	18d3      	adds	r3, r2, r3
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	0018      	movs	r0, r3
 800465c:	f7ff fefb 	bl	8004456 <STS31_WriteCmd_soft>
 8004660:	0002      	movs	r2, r0
 8004662:	2317      	movs	r3, #23
 8004664:	18fb      	adds	r3, r7, r3
 8004666:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 2; i++)
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	3301      	adds	r3, #1
 800466c:	613b      	str	r3, [r7, #16]
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	2b01      	cmp	r3, #1
 8004672:	dded      	ble.n	8004650 <softI2C_i2c_write+0x7c>
    }

    softI2C_stop();
 8004674:	f7ff fea6 	bl	80043c4 <softI2C_stop>
    return ret;
 8004678:	2317      	movs	r3, #23
 800467a:	18fb      	adds	r3, r7, r3
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	b25b      	sxtb	r3, r3
}
 8004680:	0018      	movs	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	b007      	add	sp, #28
 8004686:	bd90      	pop	{r4, r7, pc}

08004688 <softI2C_i2c_read>:
 * @param data		pointer to read data buffer
 * @param count		(unusued)
 * @return	0 or return value
 */
int8_t softI2C_i2c_read(uint8_t address, uint16_t cmd, uint16_t *data, uint16_t count)
{
 8004688:	b5b0      	push	{r4, r5, r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	0004      	movs	r4, r0
 8004690:	0008      	movs	r0, r1
 8004692:	60ba      	str	r2, [r7, #8]
 8004694:	0019      	movs	r1, r3
 8004696:	250f      	movs	r5, #15
 8004698:	197b      	adds	r3, r7, r5
 800469a:	1c22      	adds	r2, r4, #0
 800469c:	701a      	strb	r2, [r3, #0]
 800469e:	240c      	movs	r4, #12
 80046a0:	193b      	adds	r3, r7, r4
 80046a2:	1c02      	adds	r2, r0, #0
 80046a4:	801a      	strh	r2, [r3, #0]
 80046a6:	1dbb      	adds	r3, r7, #6
 80046a8:	1c0a      	adds	r2, r1, #0
 80046aa:	801a      	strh	r2, [r3, #0]
    int8_t ret;
    uint8_t v[2];

    softI2C_i2c_write(address, cmd, 1);
 80046ac:	193b      	adds	r3, r7, r4
 80046ae:	8819      	ldrh	r1, [r3, #0]
 80046b0:	197b      	adds	r3, r7, r5
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	2201      	movs	r2, #1
 80046b6:	0018      	movs	r0, r3
 80046b8:	f7ff ff8c 	bl	80045d4 <softI2C_i2c_write>

    ret = softI2C_start();
 80046bc:	f7ff fe6a 	bl	8004394 <softI2C_start>
 80046c0:	0003      	movs	r3, r0
 80046c2:	001a      	movs	r2, r3
 80046c4:	2117      	movs	r1, #23
 80046c6:	187b      	adds	r3, r7, r1
 80046c8:	701a      	strb	r2, [r3, #0]
    if (ret != 0)
 80046ca:	187b      	adds	r3, r7, r1
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	b25b      	sxtb	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d004      	beq.n	80046de <softI2C_i2c_read+0x56>
        return ret;
 80046d4:	2317      	movs	r3, #23
 80046d6:	18fb      	adds	r3, r7, r3
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	b25b      	sxtb	r3, r3
 80046dc:	e041      	b.n	8004762 <softI2C_i2c_read+0xda>

    ret = STS31_WriteCmd_soft((address << 1) | 1);
 80046de:	230f      	movs	r3, #15
 80046e0:	18fb      	adds	r3, r7, r3
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	b25b      	sxtb	r3, r3
 80046e8:	2201      	movs	r2, #1
 80046ea:	4313      	orrs	r3, r2
 80046ec:	b25b      	sxtb	r3, r3
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	0018      	movs	r0, r3
 80046f2:	f7ff feb0 	bl	8004456 <STS31_WriteCmd_soft>
 80046f6:	0002      	movs	r2, r0
 80046f8:	2117      	movs	r1, #23
 80046fa:	187b      	adds	r3, r7, r1
 80046fc:	701a      	strb	r2, [r3, #0]
    if (ret != 0) {
 80046fe:	187b      	adds	r3, r7, r1
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	b25b      	sxtb	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d006      	beq.n	8004716 <softI2C_i2c_read+0x8e>
    	softI2C_stop();
 8004708:	f7ff fe5c 	bl	80043c4 <softI2C_stop>
        return ret;
 800470c:	2317      	movs	r3, #23
 800470e:	18fb      	adds	r3, r7, r3
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	b25b      	sxtb	r3, r3
 8004714:	e025      	b.n	8004762 <softI2C_i2c_read+0xda>
    }

    v[0] = STS31_ReadCmd_soft(1);
 8004716:	2001      	movs	r0, #1
 8004718:	f7ff fef7 	bl	800450a <STS31_ReadCmd_soft>
 800471c:	0003      	movs	r3, r0
 800471e:	b2da      	uxtb	r2, r3
 8004720:	2414      	movs	r4, #20
 8004722:	193b      	adds	r3, r7, r4
 8004724:	701a      	strb	r2, [r3, #0]
    v[1] = STS31_ReadCmd_soft(1);
 8004726:	2001      	movs	r0, #1
 8004728:	f7ff feef 	bl	800450a <STS31_ReadCmd_soft>
 800472c:	0003      	movs	r3, r0
 800472e:	b2da      	uxtb	r2, r3
 8004730:	193b      	adds	r3, r7, r4
 8004732:	705a      	strb	r2, [r3, #1]
    uint8_t c = STS31_ReadCmd_soft(0);
 8004734:	2000      	movs	r0, #0
 8004736:	f7ff fee8 	bl	800450a <STS31_ReadCmd_soft>
 800473a:	0002      	movs	r2, r0
 800473c:	2316      	movs	r3, #22
 800473e:	18fb      	adds	r3, r7, r3
 8004740:	701a      	strb	r2, [r3, #0]

    *data= (((uint16_t )v[0])<<8) | v[1];
 8004742:	0021      	movs	r1, r4
 8004744:	187b      	adds	r3, r7, r1
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	021b      	lsls	r3, r3, #8
 800474a:	b21a      	sxth	r2, r3
 800474c:	187b      	adds	r3, r7, r1
 800474e:	785b      	ldrb	r3, [r3, #1]
 8004750:	b21b      	sxth	r3, r3
 8004752:	4313      	orrs	r3, r2
 8004754:	b21b      	sxth	r3, r3
 8004756:	b29a      	uxth	r2, r3
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	801a      	strh	r2, [r3, #0]

    softI2C_stop();
 800475c:	f7ff fe32 	bl	80043c4 <softI2C_stop>
    return 0;
 8004760:	2300      	movs	r3, #0
}
 8004762:	0018      	movs	r0, r3
 8004764:	46bd      	mov	sp, r7
 8004766:	b006      	add	sp, #24
 8004768:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800476c <STS31_SoftReset_soft>:
 * @brief STS31 Reset
 * @param ch	Select STS31 thermal sensor chip
 * @return
 */
int STS31_SoftReset_soft()
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
	return softI2C_i2c_write(STS_ADDR,0x30A2,1);
 8004770:	234a      	movs	r3, #74	; 0x4a
 8004772:	4904      	ldr	r1, [pc, #16]	; (8004784 <STS31_SoftReset_soft+0x18>)
 8004774:	2201      	movs	r2, #1
 8004776:	0018      	movs	r0, r3
 8004778:	f7ff ff2c 	bl	80045d4 <softI2C_i2c_write>
 800477c:	0003      	movs	r3, r0
}
 800477e:	0018      	movs	r0, r3
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	000030a2 	.word	0x000030a2

08004788 <STS31_EnterPeriodicMode_soft>:
 * @brief STS31 Periodic Mode
 * @param ch	Select STS31 thermal sensor chip
 * @return
 */
int STS31_EnterPeriodicMode_soft()
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
	return softI2C_i2c_write(STS_ADDR,0x2032,1);
 800478c:	234a      	movs	r3, #74	; 0x4a
 800478e:	4904      	ldr	r1, [pc, #16]	; (80047a0 <STS31_EnterPeriodicMode_soft+0x18>)
 8004790:	2201      	movs	r2, #1
 8004792:	0018      	movs	r0, r3
 8004794:	f7ff ff1e 	bl	80045d4 <softI2C_i2c_write>
 8004798:	0003      	movs	r3, r0
}
 800479a:	0018      	movs	r0, r3
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	00002032 	.word	0x00002032

080047a4 <EXTCJ_ll_init_soft>:
/**
 * @brief Initialize softI2C
 * @return	external Cold Junction STS31 thermal sensor count
 */
int EXTCJ_ll_init_soft(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80047aa:	4b1e      	ldr	r3, [pc, #120]	; (8004824 <EXTCJ_ll_init_soft+0x80>)
 80047ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ae:	4b1d      	ldr	r3, [pc, #116]	; (8004824 <EXTCJ_ll_init_soft+0x80>)
 80047b0:	2102      	movs	r1, #2
 80047b2:	430a      	orrs	r2, r1
 80047b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80047b6:	4b1b      	ldr	r3, [pc, #108]	; (8004824 <EXTCJ_ll_init_soft+0x80>)
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	2202      	movs	r2, #2
 80047bc:	4013      	ands	r3, r2
 80047be:	607b      	str	r3, [r7, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
	uint8_t extCJ_count = 0;
 80047c2:	230f      	movs	r3, #15
 80047c4:	18fb      	adds	r3, r7, r3
 80047c6:	2200      	movs	r2, #0
 80047c8:	701a      	strb	r2, [r3, #0]
	softI2C_SDA_in();
 80047ca:	f7ff fd4f 	bl	800426c <softI2C_SDA_in>
	softI2C_SCL_in();
 80047ce:	f7ff fd97 	bl	8004300 <softI2C_SCL_in>

	for(int i=0; i<EXT_THERMAL_COUNT; i++)
 80047d2:	2300      	movs	r3, #0
 80047d4:	60bb      	str	r3, [r7, #8]
 80047d6:	e01b      	b.n	8004810 <EXTCJ_ll_init_soft+0x6c>
	{
		if (STS31_SoftReset_soft(i) < 0)
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	0018      	movs	r0, r3
 80047dc:	f7ff ffc6 	bl	800476c <STS31_SoftReset_soft>
 80047e0:	1e03      	subs	r3, r0, #0
 80047e2:	da01      	bge.n	80047e8 <EXTCJ_ll_init_soft+0x44>
		{
			return 0;
 80047e4:	2300      	movs	r3, #0
 80047e6:	e019      	b.n	800481c <EXTCJ_ll_init_soft+0x78>
		}
		HAL_Delay(50);
 80047e8:	2032      	movs	r0, #50	; 0x32
 80047ea:	f001 f81b 	bl	8005824 <HAL_Delay>
		if (STS31_EnterPeriodicMode_soft(i) < 0)
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	0018      	movs	r0, r3
 80047f2:	f7ff ffc9 	bl	8004788 <STS31_EnterPeriodicMode_soft>
 80047f6:	1e03      	subs	r3, r0, #0
 80047f8:	da01      	bge.n	80047fe <EXTCJ_ll_init_soft+0x5a>
		{
			return 0;
 80047fa:	2300      	movs	r3, #0
 80047fc:	e00e      	b.n	800481c <EXTCJ_ll_init_soft+0x78>
		}

		extCJ_count++;
 80047fe:	210f      	movs	r1, #15
 8004800:	187b      	adds	r3, r7, r1
 8004802:	781a      	ldrb	r2, [r3, #0]
 8004804:	187b      	adds	r3, r7, r1
 8004806:	3201      	adds	r2, #1
 8004808:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<EXT_THERMAL_COUNT; i++)
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	3301      	adds	r3, #1
 800480e:	60bb      	str	r3, [r7, #8]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	dde0      	ble.n	80047d8 <EXTCJ_ll_init_soft+0x34>
	}

	return extCJ_count;
 8004816:	230f      	movs	r3, #15
 8004818:	18fb      	adds	r3, r7, r3
 800481a:	781b      	ldrb	r3, [r3, #0]
}
 800481c:	0018      	movs	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	b004      	add	sp, #16
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40021000 	.word	0x40021000

08004828 <EXTCJ_init>:

/*****************************************************************************/
int EXTCJ_init(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
	if (EXTCJ_ll_init_soft() < EXT_THERMAL_COUNT)
 800482c:	f7ff ffba 	bl	80047a4 <EXTCJ_ll_init_soft>
 8004830:	1e03      	subs	r3, r0, #0
 8004832:	dc02      	bgt.n	800483a <EXTCJ_init+0x12>
	{
		return -1;
 8004834:	2301      	movs	r3, #1
 8004836:	425b      	negs	r3, r3
 8004838:	e000      	b.n	800483c <EXTCJ_init+0x14>
	}

	return EXT_THERMAL_COUNT;
 800483a:	2301      	movs	r3, #1
}
 800483c:	0018      	movs	r0, r3
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <EXTCJ_ReadTemperature>:

int EXTCJ_ReadTemperature(float *data)
/*****************************************************************************/
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
	uint16_t t;
	int r;
	softI2C_i2c_write(STS_ADDR,0x2032,1);	/**< Fetch Temperature Command */
 800484c:	234a      	movs	r3, #74	; 0x4a
 800484e:	491a      	ldr	r1, [pc, #104]	; (80048b8 <EXTCJ_ReadTemperature+0x74>)
 8004850:	2201      	movs	r2, #1
 8004852:	0018      	movs	r0, r3
 8004854:	f7ff febe 	bl	80045d4 <softI2C_i2c_write>
	HAL_Delay(5);
 8004858:	2005      	movs	r0, #5
 800485a:	f000 ffe3 	bl	8005824 <HAL_Delay>
	r=softI2C_i2c_read(STS_ADDR,0xE000,&t,1);	/**< Read Temperature Data */
 800485e:	204a      	movs	r0, #74	; 0x4a
 8004860:	230a      	movs	r3, #10
 8004862:	18fa      	adds	r2, r7, r3
 8004864:	23e0      	movs	r3, #224	; 0xe0
 8004866:	0219      	lsls	r1, r3, #8
 8004868:	2301      	movs	r3, #1
 800486a:	f7ff ff0d 	bl	8004688 <softI2C_i2c_read>
 800486e:	0003      	movs	r3, r0
 8004870:	60fb      	str	r3, [r7, #12]
	if (r != 0)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <EXTCJ_ReadTemperature+0x38>
		return r;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	e019      	b.n	80048b0 <EXTCJ_ReadTemperature+0x6c>
	*data = (((float)t * 175.0f) / 65535.0f) - 45.0f;
 800487c:	230a      	movs	r3, #10
 800487e:	18fb      	adds	r3, r7, r3
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	0018      	movs	r0, r3
 8004884:	f7fc fb86 	bl	8000f94 <__aeabi_ui2f>
 8004888:	1c03      	adds	r3, r0, #0
 800488a:	490c      	ldr	r1, [pc, #48]	; (80048bc <EXTCJ_ReadTemperature+0x78>)
 800488c:	1c18      	adds	r0, r3, #0
 800488e:	f7fc f841 	bl	8000914 <__aeabi_fmul>
 8004892:	1c03      	adds	r3, r0, #0
 8004894:	490a      	ldr	r1, [pc, #40]	; (80048c0 <EXTCJ_ReadTemperature+0x7c>)
 8004896:	1c18      	adds	r0, r3, #0
 8004898:	f7fb ff2a 	bl	80006f0 <__aeabi_fdiv>
 800489c:	1c03      	adds	r3, r0, #0
 800489e:	4909      	ldr	r1, [pc, #36]	; (80048c4 <EXTCJ_ReadTemperature+0x80>)
 80048a0:	1c18      	adds	r0, r3, #0
 80048a2:	f7fc f969 	bl	8000b78 <__aeabi_fsub>
 80048a6:	1c03      	adds	r3, r0, #0
 80048a8:	1c1a      	adds	r2, r3, #0
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	601a      	str	r2, [r3, #0]

	return 0;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	0018      	movs	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	b004      	add	sp, #16
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	00002032 	.word	0x00002032
 80048bc:	432f0000 	.word	0x432f0000
 80048c0:	477fff00 	.word	0x477fff00
 80048c4:	42340000 	.word	0x42340000

080048c8 <FLASH_If_Init>:
 * @brief  Unlocks Flash for write access
 * @param  None
 * @retval None
 */
void FLASH_If_Init(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
	/* Unlock the Program memory */
	HAL_FLASH_Unlock();
 80048cc:	f001 fb72 	bl	8005fb4 <HAL_FLASH_Unlock>

	/* Clear all FLASH flags */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_PGAERR | FLASH_FLAG_WRPERR);
 80048d0:	4b03      	ldr	r3, [pc, #12]	; (80048e0 <FLASH_If_Init+0x18>)
 80048d2:	4a04      	ldr	r2, [pc, #16]	; (80048e4 <FLASH_If_Init+0x1c>)
 80048d4:	619a      	str	r2, [r3, #24]
	/* Unlock the Program memory */
	HAL_FLASH_Lock();
 80048d6:	f001 fbbd 	bl	8006054 <HAL_FLASH_Lock>
}
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	40022000 	.word	0x40022000
 80048e4:	00000302 	.word	0x00000302

080048e8 <FLASH_If_Erase>:
 * @param  start: start of user flash area
 * @retval FLASHIF_OK : user flash area successfully erased
 *         FLASHIF_ERASEKO : error occurred
 */
uint32_t FLASH_If_Erase(uint32_t start,uint32_t length)
{
 80048e8:	b5b0      	push	{r4, r5, r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
	uint32_t NbrOfPages = 0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61fb      	str	r3, [r7, #28]
	uint32_t PageError = 0;
 80048f6:	2300      	movs	r3, #0
 80048f8:	617b      	str	r3, [r7, #20]
	FLASH_EraseInitTypeDef pEraseInit;
	HAL_StatusTypeDef status = HAL_OK;
 80048fa:	241b      	movs	r4, #27
 80048fc:	193b      	adds	r3, r7, r4
 80048fe:	2200      	movs	r2, #0
 8004900:	701a      	strb	r2, [r3, #0]

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8004902:	f001 fb57 	bl	8005fb4 <HAL_FLASH_Unlock>

	/* Get the sector where start the user flash area */
	NbrOfPages = length/FLASH_PAGE_SIZE;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	09db      	lsrs	r3, r3, #7
 800490a:	61fb      	str	r3, [r7, #28]

	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 800490c:	2108      	movs	r1, #8
 800490e:	187b      	adds	r3, r7, r1
 8004910:	2200      	movs	r2, #0
 8004912:	601a      	str	r2, [r3, #0]
	pEraseInit.PageAddress = start;
 8004914:	187b      	adds	r3, r7, r1
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	605a      	str	r2, [r3, #4]
	//pEraseInit.Banks = FLASH_BANK_1;
	pEraseInit.NbPages = NbrOfPages;
 800491a:	187b      	adds	r3, r7, r1
 800491c:	69fa      	ldr	r2, [r7, #28]
 800491e:	609a      	str	r2, [r3, #8]
	status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8004920:	0025      	movs	r5, r4
 8004922:	193c      	adds	r4, r7, r4
 8004924:	2314      	movs	r3, #20
 8004926:	18fa      	adds	r2, r7, r3
 8004928:	187b      	adds	r3, r7, r1
 800492a:	0011      	movs	r1, r2
 800492c:	0018      	movs	r0, r3
 800492e:	f001 fcb3 	bl	8006298 <HAL_FLASHEx_Erase>
 8004932:	0003      	movs	r3, r0
 8004934:	7023      	strb	r3, [r4, #0]

	/* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8004936:	f001 fb8d 	bl	8006054 <HAL_FLASH_Lock>

	if (status != HAL_OK)
 800493a:	002c      	movs	r4, r5
 800493c:	193b      	adds	r3, r7, r4
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <FLASH_If_Erase+0x60>
	{
		/* Error occurred while page erase */
		return FLASHIF_ERASEKO;
 8004944:	2301      	movs	r3, #1
 8004946:	e000      	b.n	800494a <FLASH_If_Erase+0x62>
	}

	return FLASHIF_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	0018      	movs	r0, r3
 800494c:	46bd      	mov	sp, r7
 800494e:	b008      	add	sp, #32
 8004950:	bdb0      	pop	{r4, r5, r7, pc}

08004952 <FLASH_If_Write>:
 * @retval uint32_t 0: Data successfully written to Flash memory
 *         1: Error occurred while writing data in Flash memory
 *         2: Written Data in flash memory is different from expected one
 */
uint32_t FLASH_If_Write(uint32_t destination, uint32_t *p_source, uint32_t length)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b086      	sub	sp, #24
 8004956:	af00      	add	r7, sp, #0
 8004958:	60f8      	str	r0, [r7, #12]
 800495a:	60b9      	str	r1, [r7, #8]
 800495c:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 800495e:	2300      	movs	r3, #0
 8004960:	617b      	str	r3, [r7, #20]

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8004962:	f001 fb27 	bl	8005fb4 <HAL_FLASH_Unlock>

	for (i = 0; i < length; i++)
 8004966:	2300      	movs	r3, #0
 8004968:	617b      	str	r3, [r7, #20]
 800496a:	e01f      	b.n	80049ac <FLASH_If_Write+0x5a>
	{
		/* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, destination, (p_source[i])) == HAL_OK)
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	18d3      	adds	r3, r2, r3
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	0019      	movs	r1, r3
 800497a:	2002      	movs	r0, #2
 800497c:	f001 fade 	bl	8005f3c <HAL_FLASH_Program>
 8004980:	1e03      	subs	r3, r0, #0
 8004982:	d10e      	bne.n	80049a2 <FLASH_If_Write+0x50>
		{
			/* Check the written value */
			if (*(uint32_t*)destination != *(uint32_t*)(p_source+i))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	68b9      	ldr	r1, [r7, #8]
 800498e:	18cb      	adds	r3, r1, r3
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	429a      	cmp	r2, r3
 8004994:	d001      	beq.n	800499a <FLASH_If_Write+0x48>
			{
				/* Flash content doesn't match SRAM content */
				return(FLASHIF_WRITINGCTRL_ERROR);
 8004996:	2302      	movs	r3, #2
 8004998:	e00f      	b.n	80049ba <FLASH_If_Write+0x68>
			}
			/* Increment FLASH destination address */
			destination += 4;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	3304      	adds	r3, #4
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	e001      	b.n	80049a6 <FLASH_If_Write+0x54>
		}
		else
		{
			/* Error occurred while writing data in Flash memory */
			return (FLASHIF_WRITING_ERROR);
 80049a2:	2303      	movs	r3, #3
 80049a4:	e009      	b.n	80049ba <FLASH_If_Write+0x68>
	for (i = 0; i < length; i++)
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	3301      	adds	r3, #1
 80049aa:	617b      	str	r3, [r7, #20]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d3db      	bcc.n	800496c <FLASH_If_Write+0x1a>
		}
	}

	/* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 80049b4:	f001 fb4e 	bl	8006054 <HAL_FLASH_Lock>

	return (FLASHIF_OK);
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	0018      	movs	r0, r3
 80049bc:	46bd      	mov	sp, r7
 80049be:	b006      	add	sp, #24
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <HAL_SPI_RxCpltCallback>:
		dbg_printf("GPIO\r\n");
		csTriggered = 1;
	}
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
//	dbg_printf("RX Main ALL\r\n");

	/*if (csTriggered)
	{*/
		memcpy(spiRxBuffer, SPI_RxDMABuffer, 512);
 80049cc:	4a0d      	ldr	r2, [pc, #52]	; (8004a04 <HAL_SPI_RxCpltCallback+0x40>)
 80049ce:	4b0e      	ldr	r3, [pc, #56]	; (8004a08 <HAL_SPI_RxCpltCallback+0x44>)
 80049d0:	0010      	movs	r0, r2
 80049d2:	0019      	movs	r1, r3
 80049d4:	2380      	movs	r3, #128	; 0x80
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	001a      	movs	r2, r3
 80049da:	f005 fc6e 	bl	800a2ba <memcpy>
		espMsgRcvd = 1;
 80049de:	4b0b      	ldr	r3, [pc, #44]	; (8004a0c <HAL_SPI_RxCpltCallback+0x48>)
 80049e0:	2201      	movs	r2, #1
 80049e2:	701a      	strb	r2, [r3, #0]
		bus_process();
 80049e4:	f7ff f9f0 	bl	8003dc8 <bus_process>
		memset(SPI_RxDMABuffer, 0, 512);
 80049e8:	2380      	movs	r3, #128	; 0x80
 80049ea:	009a      	lsls	r2, r3, #2
 80049ec:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <HAL_SPI_RxCpltCallback+0x44>)
 80049ee:	2100      	movs	r1, #0
 80049f0:	0018      	movs	r0, r3
 80049f2:	f005 fc6b 	bl	800a2cc <memset>
		csTriggered = 0;
 80049f6:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <HAL_SPI_RxCpltCallback+0x4c>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	701a      	strb	r2, [r3, #0]
	//}

}
 80049fc:	46c0      	nop			; (mov r8, r8)
 80049fe:	46bd      	mov	sp, r7
 8004a00:	b002      	add	sp, #8
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	2000057c 	.word	0x2000057c
 8004a08:	2000037c 	.word	0x2000037c
 8004a0c:	2000077c 	.word	0x2000077c
 8004a10:	2000077d 	.word	0x2000077d

08004a14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	bl_remapMemToSRAM();
 8004a1a:	f7fe fe6b 	bl	80036f4 <bl_remapMemToSRAM>

	iapMailbox[0] = 0x00;
 8004a1e:	4b2d      	ldr	r3, [pc, #180]	; (8004ad4 <main+0xc0>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]
	iapMailbox[1] = 0x00;
 8004a24:	4b2b      	ldr	r3, [pc, #172]	; (8004ad4 <main+0xc0>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	605a      	str	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004a2a:	f000 fe8b 	bl	8005744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004a2e:	f000 f861 	bl	8004af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004a32:	f000 f9c3 	bl	8004dbc <MX_GPIO_Init>
  MX_DMA_Init();
 8004a36:	f000 f99b 	bl	8004d70 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8004a3a:	f000 f939 	bl	8004cb0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004a3e:	f000 f967 	bl	8004d10 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8004a42:	f000 f8fd 	bl	8004c40 <MX_SPI2_Init>
  MX_SPI1_Init();
 8004a46:	f000 f8c9 	bl	8004bdc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  debug_init();
 8004a4a:	f7ff fb2b 	bl	80040a4 <debug_init>
  conf_init();
 8004a4e:	f7ff fb1f 	bl	8004090 <conf_init>
  stpm_init();
 8004a52:	f000 fc99 	bl	8005388 <stpm_init>

  int extcjr = EXTCJ_init();
 8004a56:	f7ff fee7 	bl	8004828 <EXTCJ_init>
 8004a5a:	0003      	movs	r3, r0
 8004a5c:	607b      	str	r3, [r7, #4]
  dbg_printf("extcj : %d\r\n", extcjr);
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	4b1d      	ldr	r3, [pc, #116]	; (8004ad8 <main+0xc4>)
 8004a62:	0011      	movs	r1, r2
 8004a64:	0018      	movs	r0, r3
 8004a66:	f006 fa95 	bl	800af94 <iprintf>
  tc_init(extcjr);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f7fe fd51 	bl	8003514 <tc_init>

  HAL_SPI_Receive_DMA(&hspi1, SPI_RxDMABuffer, 512);
 8004a72:	2380      	movs	r3, #128	; 0x80
 8004a74:	009a      	lsls	r2, r3, #2
 8004a76:	4919      	ldr	r1, [pc, #100]	; (8004adc <main+0xc8>)
 8004a78:	4b19      	ldr	r3, [pc, #100]	; (8004ae0 <main+0xcc>)
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f003 fa82 	bl	8007f84 <HAL_SPI_Receive_DMA>
  //HAL_SPI_Transmit_DMA(&hspi1, spiTxBuffer, 512);

  //__HAL_SPI_ENABLE((&hspi1));
  SET_BIT(hspi1.Instance->CR2, SPI_CR2_TXDMAEN);
 8004a80:	4b17      	ldr	r3, [pc, #92]	; (8004ae0 <main+0xcc>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	4b16      	ldr	r3, [pc, #88]	; (8004ae0 <main+0xcc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2102      	movs	r1, #2
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(hspi1.Instance->CR1, SPI_CR1_SSM);
 8004a90:	4b13      	ldr	r3, [pc, #76]	; (8004ae0 <main+0xcc>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	4b12      	ldr	r3, [pc, #72]	; (8004ae0 <main+0xcc>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4912      	ldr	r1, [pc, #72]	; (8004ae4 <main+0xd0>)
 8004a9c:	400a      	ands	r2, r1
 8004a9e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(hspi1.Instance->CR1, SPI_CR1_SSI);
 8004aa0:	4b0f      	ldr	r3, [pc, #60]	; (8004ae0 <main+0xcc>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	4b0e      	ldr	r3, [pc, #56]	; (8004ae0 <main+0xcc>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	490f      	ldr	r1, [pc, #60]	; (8004ae8 <main+0xd4>)
 8004aac:	400a      	ands	r2, r1
 8004aae:	601a      	str	r2, [r3, #0]

  HAL_DMA_Start(&hdma_spi1_tx, (uint32_t)&spiTxBuffer[0], (uint32_t)&hspi1.Instance->DR, 512);
 8004ab0:	490e      	ldr	r1, [pc, #56]	; (8004aec <main+0xd8>)
 8004ab2:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <main+0xcc>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	330c      	adds	r3, #12
 8004ab8:	001a      	movs	r2, r3
 8004aba:	2380      	movs	r3, #128	; 0x80
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	480c      	ldr	r0, [pc, #48]	; (8004af0 <main+0xdc>)
 8004ac0:	f001 f828 	bl	8005b14 <HAL_DMA_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /*dbg_printf("Test\r\n");
	  HAL_Delay(1000);*/
	  stpm_Process();
 8004ac4:	f000 fccc 	bl	8005460 <stpm_Process>
	  max31856_process();
 8004ac8:	f7fe fe02 	bl	80036d0 <max31856_process>
	  bus_comm_process();
 8004acc:	f7ff fa50 	bl	8003f70 <bus_comm_process>
	  stpm_Process();
 8004ad0:	e7f8      	b.n	8004ac4 <main+0xb0>
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	20000100 	.word	0x20000100
 8004ad8:	0800ea84 	.word	0x0800ea84
 8004adc:	2000037c 	.word	0x2000037c
 8004ae0:	20000e44 	.word	0x20000e44
 8004ae4:	fffffdff 	.word	0xfffffdff
 8004ae8:	fffffeff 	.word	0xfffffeff
 8004aec:	20000870 	.word	0x20000870
 8004af0:	20000f68 	.word	0x20000f68

08004af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004af4:	b590      	push	{r4, r7, lr}
 8004af6:	b09f      	sub	sp, #124	; 0x7c
 8004af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004afa:	2440      	movs	r4, #64	; 0x40
 8004afc:	193b      	adds	r3, r7, r4
 8004afe:	0018      	movs	r0, r3
 8004b00:	2338      	movs	r3, #56	; 0x38
 8004b02:	001a      	movs	r2, r3
 8004b04:	2100      	movs	r1, #0
 8004b06:	f005 fbe1 	bl	800a2cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b0a:	232c      	movs	r3, #44	; 0x2c
 8004b0c:	18fb      	adds	r3, r7, r3
 8004b0e:	0018      	movs	r0, r3
 8004b10:	2314      	movs	r3, #20
 8004b12:	001a      	movs	r2, r3
 8004b14:	2100      	movs	r1, #0
 8004b16:	f005 fbd9 	bl	800a2cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b1a:	1d3b      	adds	r3, r7, #4
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	2328      	movs	r3, #40	; 0x28
 8004b20:	001a      	movs	r2, r3
 8004b22:	2100      	movs	r1, #0
 8004b24:	f005 fbd2 	bl	800a2cc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b28:	4b2a      	ldr	r3, [pc, #168]	; (8004bd4 <SystemClock_Config+0xe0>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a2a      	ldr	r2, [pc, #168]	; (8004bd8 <SystemClock_Config+0xe4>)
 8004b2e:	401a      	ands	r2, r3
 8004b30:	4b28      	ldr	r3, [pc, #160]	; (8004bd4 <SystemClock_Config+0xe0>)
 8004b32:	2180      	movs	r1, #128	; 0x80
 8004b34:	0109      	lsls	r1, r1, #4
 8004b36:	430a      	orrs	r2, r1
 8004b38:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004b3a:	0021      	movs	r1, r4
 8004b3c:	187b      	adds	r3, r7, r1
 8004b3e:	2202      	movs	r2, #2
 8004b40:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b42:	187b      	adds	r3, r7, r1
 8004b44:	2201      	movs	r2, #1
 8004b46:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004b48:	187b      	adds	r3, r7, r1
 8004b4a:	2210      	movs	r2, #16
 8004b4c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b4e:	187b      	adds	r3, r7, r1
 8004b50:	2202      	movs	r2, #2
 8004b52:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004b54:	187b      	adds	r3, r7, r1
 8004b56:	2200      	movs	r2, #0
 8004b58:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8004b5a:	187b      	adds	r3, r7, r1
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8004b60:	187b      	adds	r3, r7, r1
 8004b62:	2280      	movs	r2, #128	; 0x80
 8004b64:	03d2      	lsls	r2, r2, #15
 8004b66:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b68:	187b      	adds	r3, r7, r1
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f001 fdd4 	bl	8006718 <HAL_RCC_OscConfig>
 8004b70:	1e03      	subs	r3, r0, #0
 8004b72:	d001      	beq.n	8004b78 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8004b74:	f000 f97a 	bl	8004e6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b78:	212c      	movs	r1, #44	; 0x2c
 8004b7a:	187b      	adds	r3, r7, r1
 8004b7c:	220f      	movs	r2, #15
 8004b7e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b80:	187b      	adds	r3, r7, r1
 8004b82:	2203      	movs	r2, #3
 8004b84:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b86:	187b      	adds	r3, r7, r1
 8004b88:	2200      	movs	r2, #0
 8004b8a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004b8c:	187b      	adds	r3, r7, r1
 8004b8e:	2200      	movs	r2, #0
 8004b90:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004b92:	187b      	adds	r3, r7, r1
 8004b94:	2200      	movs	r2, #0
 8004b96:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004b98:	187b      	adds	r3, r7, r1
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	f002 f991 	bl	8006ec4 <HAL_RCC_ClockConfig>
 8004ba2:	1e03      	subs	r3, r0, #0
 8004ba4:	d001      	beq.n	8004baa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8004ba6:	f000 f961 	bl	8004e6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8004baa:	1d3b      	adds	r3, r7, #4
 8004bac:	2203      	movs	r2, #3
 8004bae:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004bb0:	1d3b      	adds	r3, r7, #4
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004bb6:	1d3b      	adds	r3, r7, #4
 8004bb8:	2200      	movs	r2, #0
 8004bba:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004bbc:	1d3b      	adds	r3, r7, #4
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	f002 fba0 	bl	8007304 <HAL_RCCEx_PeriphCLKConfig>
 8004bc4:	1e03      	subs	r3, r0, #0
 8004bc6:	d001      	beq.n	8004bcc <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8004bc8:	f000 f950 	bl	8004e6c <Error_Handler>
  }
}
 8004bcc:	46c0      	nop			; (mov r8, r8)
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	b01f      	add	sp, #124	; 0x7c
 8004bd2:	bd90      	pop	{r4, r7, pc}
 8004bd4:	40007000 	.word	0x40007000
 8004bd8:	ffffe7ff 	.word	0xffffe7ff

08004bdc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004be0:	4b15      	ldr	r3, [pc, #84]	; (8004c38 <MX_SPI1_Init+0x5c>)
 8004be2:	4a16      	ldr	r2, [pc, #88]	; (8004c3c <MX_SPI1_Init+0x60>)
 8004be4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8004be6:	4b14      	ldr	r3, [pc, #80]	; (8004c38 <MX_SPI1_Init+0x5c>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004bec:	4b12      	ldr	r3, [pc, #72]	; (8004c38 <MX_SPI1_Init+0x5c>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004bf2:	4b11      	ldr	r3, [pc, #68]	; (8004c38 <MX_SPI1_Init+0x5c>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bf8:	4b0f      	ldr	r3, [pc, #60]	; (8004c38 <MX_SPI1_Init+0x5c>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004bfe:	4b0e      	ldr	r3, [pc, #56]	; (8004c38 <MX_SPI1_Init+0x5c>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8004c04:	4b0c      	ldr	r3, [pc, #48]	; (8004c38 <MX_SPI1_Init+0x5c>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c0a:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <MX_SPI1_Init+0x5c>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c10:	4b09      	ldr	r3, [pc, #36]	; (8004c38 <MX_SPI1_Init+0x5c>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c16:	4b08      	ldr	r3, [pc, #32]	; (8004c38 <MX_SPI1_Init+0x5c>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004c1c:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <MX_SPI1_Init+0x5c>)
 8004c1e:	2207      	movs	r2, #7
 8004c20:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004c22:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <MX_SPI1_Init+0x5c>)
 8004c24:	0018      	movs	r0, r3
 8004c26:	f002 fce1 	bl	80075ec <HAL_SPI_Init>
 8004c2a:	1e03      	subs	r3, r0, #0
 8004c2c:	d001      	beq.n	8004c32 <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 8004c2e:	f000 f91d 	bl	8004e6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004c32:	46c0      	nop			; (mov r8, r8)
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	20000e44 	.word	0x20000e44
 8004c3c:	40013000 	.word	0x40013000

08004c40 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004c44:	4b18      	ldr	r3, [pc, #96]	; (8004ca8 <MX_SPI2_Init+0x68>)
 8004c46:	4a19      	ldr	r2, [pc, #100]	; (8004cac <MX_SPI2_Init+0x6c>)
 8004c48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004c4a:	4b17      	ldr	r3, [pc, #92]	; (8004ca8 <MX_SPI2_Init+0x68>)
 8004c4c:	2282      	movs	r2, #130	; 0x82
 8004c4e:	0052      	lsls	r2, r2, #1
 8004c50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004c52:	4b15      	ldr	r3, [pc, #84]	; (8004ca8 <MX_SPI2_Init+0x68>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004c58:	4b13      	ldr	r3, [pc, #76]	; (8004ca8 <MX_SPI2_Init+0x68>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004c5e:	4b12      	ldr	r3, [pc, #72]	; (8004ca8 <MX_SPI2_Init+0x68>)
 8004c60:	2202      	movs	r2, #2
 8004c62:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004c64:	4b10      	ldr	r3, [pc, #64]	; (8004ca8 <MX_SPI2_Init+0x68>)
 8004c66:	2201      	movs	r2, #1
 8004c68:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004c6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ca8 <MX_SPI2_Init+0x68>)
 8004c6c:	2280      	movs	r2, #128	; 0x80
 8004c6e:	0092      	lsls	r2, r2, #2
 8004c70:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004c72:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <MX_SPI2_Init+0x68>)
 8004c74:	2218      	movs	r2, #24
 8004c76:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c78:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <MX_SPI2_Init+0x68>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c7e:	4b0a      	ldr	r3, [pc, #40]	; (8004ca8 <MX_SPI2_Init+0x68>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c84:	4b08      	ldr	r3, [pc, #32]	; (8004ca8 <MX_SPI2_Init+0x68>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004c8a:	4b07      	ldr	r3, [pc, #28]	; (8004ca8 <MX_SPI2_Init+0x68>)
 8004c8c:	2207      	movs	r2, #7
 8004c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004c90:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <MX_SPI2_Init+0x68>)
 8004c92:	0018      	movs	r0, r3
 8004c94:	f002 fcaa 	bl	80075ec <HAL_SPI_Init>
 8004c98:	1e03      	subs	r3, r0, #0
 8004c9a:	d001      	beq.n	8004ca0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004c9c:	f000 f8e6 	bl	8004e6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004ca0:	46c0      	nop			; (mov r8, r8)
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	46c0      	nop			; (mov r8, r8)
 8004ca8:	20000d20 	.word	0x20000d20
 8004cac:	40003800 	.word	0x40003800

08004cb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004cb4:	4b14      	ldr	r3, [pc, #80]	; (8004d08 <MX_USART1_UART_Init+0x58>)
 8004cb6:	4a15      	ldr	r2, [pc, #84]	; (8004d0c <MX_USART1_UART_Init+0x5c>)
 8004cb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004cba:	4b13      	ldr	r3, [pc, #76]	; (8004d08 <MX_USART1_UART_Init+0x58>)
 8004cbc:	22e1      	movs	r2, #225	; 0xe1
 8004cbe:	0252      	lsls	r2, r2, #9
 8004cc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004cc2:	4b11      	ldr	r3, [pc, #68]	; (8004d08 <MX_USART1_UART_Init+0x58>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004cc8:	4b0f      	ldr	r3, [pc, #60]	; (8004d08 <MX_USART1_UART_Init+0x58>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004cce:	4b0e      	ldr	r3, [pc, #56]	; (8004d08 <MX_USART1_UART_Init+0x58>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8004cd4:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <MX_USART1_UART_Init+0x58>)
 8004cd6:	2208      	movs	r2, #8
 8004cd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004cda:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <MX_USART1_UART_Init+0x58>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ce0:	4b09      	ldr	r3, [pc, #36]	; (8004d08 <MX_USART1_UART_Init+0x58>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ce6:	4b08      	ldr	r3, [pc, #32]	; (8004d08 <MX_USART1_UART_Init+0x58>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004cec:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <MX_USART1_UART_Init+0x58>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004cf2:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <MX_USART1_UART_Init+0x58>)
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f003 fe8b 	bl	8008a10 <HAL_UART_Init>
 8004cfa:	1e03      	subs	r3, r0, #0
 8004cfc:	d001      	beq.n	8004d02 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004cfe:	f000 f8b5 	bl	8004e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004d02:	46c0      	nop			; (mov r8, r8)
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	20000dc0 	.word	0x20000dc0
 8004d0c:	40013800 	.word	0x40013800

08004d10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004d14:	4b14      	ldr	r3, [pc, #80]	; (8004d68 <MX_USART2_UART_Init+0x58>)
 8004d16:	4a15      	ldr	r2, [pc, #84]	; (8004d6c <MX_USART2_UART_Init+0x5c>)
 8004d18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004d1a:	4b13      	ldr	r3, [pc, #76]	; (8004d68 <MX_USART2_UART_Init+0x58>)
 8004d1c:	2296      	movs	r2, #150	; 0x96
 8004d1e:	0192      	lsls	r2, r2, #6
 8004d20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004d22:	4b11      	ldr	r3, [pc, #68]	; (8004d68 <MX_USART2_UART_Init+0x58>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004d28:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <MX_USART2_UART_Init+0x58>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004d2e:	4b0e      	ldr	r3, [pc, #56]	; (8004d68 <MX_USART2_UART_Init+0x58>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004d34:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <MX_USART2_UART_Init+0x58>)
 8004d36:	220c      	movs	r2, #12
 8004d38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d3a:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <MX_USART2_UART_Init+0x58>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d40:	4b09      	ldr	r3, [pc, #36]	; (8004d68 <MX_USART2_UART_Init+0x58>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004d46:	4b08      	ldr	r3, [pc, #32]	; (8004d68 <MX_USART2_UART_Init+0x58>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004d4c:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <MX_USART2_UART_Init+0x58>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004d52:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <MX_USART2_UART_Init+0x58>)
 8004d54:	0018      	movs	r0, r3
 8004d56:	f003 fe5b 	bl	8008a10 <HAL_UART_Init>
 8004d5a:	1e03      	subs	r3, r0, #0
 8004d5c:	d001      	beq.n	8004d62 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004d5e:	f000 f885 	bl	8004e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	20000e9c 	.word	0x20000e9c
 8004d6c:	40004400 	.word	0x40004400

08004d70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004d76:	4b10      	ldr	r3, [pc, #64]	; (8004db8 <MX_DMA_Init+0x48>)
 8004d78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d7a:	4b0f      	ldr	r3, [pc, #60]	; (8004db8 <MX_DMA_Init+0x48>)
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	631a      	str	r2, [r3, #48]	; 0x30
 8004d82:	4b0d      	ldr	r3, [pc, #52]	; (8004db8 <MX_DMA_Init+0x48>)
 8004d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d86:	2201      	movs	r2, #1
 8004d88:	4013      	ands	r3, r2
 8004d8a:	607b      	str	r3, [r7, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8004d8e:	2200      	movs	r2, #0
 8004d90:	2100      	movs	r1, #0
 8004d92:	200a      	movs	r0, #10
 8004d94:	f000 fe14 	bl	80059c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8004d98:	200a      	movs	r0, #10
 8004d9a:	f000 fe26 	bl	80059ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8004d9e:	2200      	movs	r2, #0
 8004da0:	2100      	movs	r1, #0
 8004da2:	200b      	movs	r0, #11
 8004da4:	f000 fe0c 	bl	80059c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8004da8:	200b      	movs	r0, #11
 8004daa:	f000 fe1e 	bl	80059ea <HAL_NVIC_EnableIRQ>

}
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	46bd      	mov	sp, r7
 8004db2:	b002      	add	sp, #8
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	46c0      	nop			; (mov r8, r8)
 8004db8:	40021000 	.word	0x40021000

08004dbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004dbc:	b590      	push	{r4, r7, lr}
 8004dbe:	b089      	sub	sp, #36	; 0x24
 8004dc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dc2:	240c      	movs	r4, #12
 8004dc4:	193b      	adds	r3, r7, r4
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	2314      	movs	r3, #20
 8004dca:	001a      	movs	r2, r3
 8004dcc:	2100      	movs	r1, #0
 8004dce:	f005 fa7d 	bl	800a2cc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dd2:	4b23      	ldr	r3, [pc, #140]	; (8004e60 <MX_GPIO_Init+0xa4>)
 8004dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd6:	4b22      	ldr	r3, [pc, #136]	; (8004e60 <MX_GPIO_Init+0xa4>)
 8004dd8:	2101      	movs	r1, #1
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	62da      	str	r2, [r3, #44]	; 0x2c
 8004dde:	4b20      	ldr	r3, [pc, #128]	; (8004e60 <MX_GPIO_Init+0xa4>)
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	2201      	movs	r2, #1
 8004de4:	4013      	ands	r3, r2
 8004de6:	60bb      	str	r3, [r7, #8]
 8004de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dea:	4b1d      	ldr	r3, [pc, #116]	; (8004e60 <MX_GPIO_Init+0xa4>)
 8004dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dee:	4b1c      	ldr	r3, [pc, #112]	; (8004e60 <MX_GPIO_Init+0xa4>)
 8004df0:	2102      	movs	r1, #2
 8004df2:	430a      	orrs	r2, r1
 8004df4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004df6:	4b1a      	ldr	r3, [pc, #104]	; (8004e60 <MX_GPIO_Init+0xa4>)
 8004df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	607b      	str	r3, [r7, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TC_CH_3_Pin|TC_CH_2_Pin|TC_CH_1_Pin|TC_CH_0_Pin, GPIO_PIN_SET);
 8004e02:	4918      	ldr	r1, [pc, #96]	; (8004e64 <MX_GPIO_Init+0xa8>)
 8004e04:	4b18      	ldr	r3, [pc, #96]	; (8004e68 <MX_GPIO_Init+0xac>)
 8004e06:	2201      	movs	r2, #1
 8004e08:	0018      	movs	r0, r3
 8004e0a:	f001 fc68 	bl	80066de <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TC_CH_3_Pin TC_CH_2_Pin TC_CH_1_Pin TC_CH_0_Pin */
  GPIO_InitStruct.Pin = TC_CH_3_Pin|TC_CH_2_Pin|TC_CH_1_Pin|TC_CH_0_Pin;
 8004e0e:	0021      	movs	r1, r4
 8004e10:	187b      	adds	r3, r7, r1
 8004e12:	4a14      	ldr	r2, [pc, #80]	; (8004e64 <MX_GPIO_Init+0xa8>)
 8004e14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e16:	187b      	adds	r3, r7, r1
 8004e18:	2201      	movs	r2, #1
 8004e1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e1c:	187b      	adds	r3, r7, r1
 8004e1e:	2200      	movs	r2, #0
 8004e20:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e22:	187b      	adds	r3, r7, r1
 8004e24:	2202      	movs	r2, #2
 8004e26:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e28:	000c      	movs	r4, r1
 8004e2a:	187b      	adds	r3, r7, r1
 8004e2c:	4a0e      	ldr	r2, [pc, #56]	; (8004e68 <MX_GPIO_Init+0xac>)
 8004e2e:	0019      	movs	r1, r3
 8004e30:	0010      	movs	r0, r2
 8004e32:	f001 fab9 	bl	80063a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CJ_ALERT_Pin */
  GPIO_InitStruct.Pin = CJ_ALERT_Pin;
 8004e36:	0021      	movs	r1, r4
 8004e38:	187b      	adds	r3, r7, r1
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e3e:	187b      	adds	r3, r7, r1
 8004e40:	2200      	movs	r2, #0
 8004e42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e44:	187b      	adds	r3, r7, r1
 8004e46:	2200      	movs	r2, #0
 8004e48:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CJ_ALERT_GPIO_Port, &GPIO_InitStruct);
 8004e4a:	187b      	adds	r3, r7, r1
 8004e4c:	4a06      	ldr	r2, [pc, #24]	; (8004e68 <MX_GPIO_Init+0xac>)
 8004e4e:	0019      	movs	r1, r3
 8004e50:	0010      	movs	r0, r2
 8004e52:	f001 faa9 	bl	80063a8 <HAL_GPIO_Init>

}
 8004e56:	46c0      	nop			; (mov r8, r8)
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	b009      	add	sp, #36	; 0x24
 8004e5c:	bd90      	pop	{r4, r7, pc}
 8004e5e:	46c0      	nop			; (mov r8, r8)
 8004e60:	40021000 	.word	0x40021000
 8004e64:	00000c06 	.word	0x00000c06
 8004e68:	50000400 	.word	0x50000400

08004e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004e70:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004e72:	e7fe      	b.n	8004e72 <Error_Handler+0x6>

08004e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e78:	4b07      	ldr	r3, [pc, #28]	; (8004e98 <HAL_MspInit+0x24>)
 8004e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e7c:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <HAL_MspInit+0x24>)
 8004e7e:	2101      	movs	r1, #1
 8004e80:	430a      	orrs	r2, r1
 8004e82:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e84:	4b04      	ldr	r3, [pc, #16]	; (8004e98 <HAL_MspInit+0x24>)
 8004e86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e88:	4b03      	ldr	r3, [pc, #12]	; (8004e98 <HAL_MspInit+0x24>)
 8004e8a:	2180      	movs	r1, #128	; 0x80
 8004e8c:	0549      	lsls	r1, r1, #21
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40021000 	.word	0x40021000

08004e9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b08a      	sub	sp, #40	; 0x28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ea4:	2314      	movs	r3, #20
 8004ea6:	18fb      	adds	r3, r7, r3
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	2314      	movs	r3, #20
 8004eac:	001a      	movs	r2, r3
 8004eae:	2100      	movs	r1, #0
 8004eb0:	f005 fa0c 	bl	800a2cc <memset>
  if(hspi->Instance==SPI1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a62      	ldr	r2, [pc, #392]	; (8005044 <HAL_SPI_MspInit+0x1a8>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d000      	beq.n	8004ec0 <HAL_SPI_MspInit+0x24>
 8004ebe:	e086      	b.n	8004fce <HAL_SPI_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004ec0:	4b61      	ldr	r3, [pc, #388]	; (8005048 <HAL_SPI_MspInit+0x1ac>)
 8004ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ec4:	4b60      	ldr	r3, [pc, #384]	; (8005048 <HAL_SPI_MspInit+0x1ac>)
 8004ec6:	2180      	movs	r1, #128	; 0x80
 8004ec8:	0149      	lsls	r1, r1, #5
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ece:	4b5e      	ldr	r3, [pc, #376]	; (8005048 <HAL_SPI_MspInit+0x1ac>)
 8004ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed2:	4b5d      	ldr	r3, [pc, #372]	; (8005048 <HAL_SPI_MspInit+0x1ac>)
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	62da      	str	r2, [r3, #44]	; 0x2c
 8004eda:	4b5b      	ldr	r3, [pc, #364]	; (8005048 <HAL_SPI_MspInit+0x1ac>)
 8004edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ede:	2201      	movs	r2, #1
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
 8004ee4:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004ee6:	2114      	movs	r1, #20
 8004ee8:	187b      	adds	r3, r7, r1
 8004eea:	22f0      	movs	r2, #240	; 0xf0
 8004eec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eee:	187b      	adds	r3, r7, r1
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef4:	187b      	adds	r3, r7, r1
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004efa:	187b      	adds	r3, r7, r1
 8004efc:	2203      	movs	r2, #3
 8004efe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004f00:	187b      	adds	r3, r7, r1
 8004f02:	2200      	movs	r2, #0
 8004f04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f06:	187a      	adds	r2, r7, r1
 8004f08:	23a0      	movs	r3, #160	; 0xa0
 8004f0a:	05db      	lsls	r3, r3, #23
 8004f0c:	0011      	movs	r1, r2
 8004f0e:	0018      	movs	r0, r3
 8004f10:	f001 fa4a 	bl	80063a8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8004f14:	4b4d      	ldr	r3, [pc, #308]	; (800504c <HAL_SPI_MspInit+0x1b0>)
 8004f16:	4a4e      	ldr	r2, [pc, #312]	; (8005050 <HAL_SPI_MspInit+0x1b4>)
 8004f18:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8004f1a:	4b4c      	ldr	r3, [pc, #304]	; (800504c <HAL_SPI_MspInit+0x1b0>)
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f20:	4b4a      	ldr	r3, [pc, #296]	; (800504c <HAL_SPI_MspInit+0x1b0>)
 8004f22:	2210      	movs	r2, #16
 8004f24:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f26:	4b49      	ldr	r3, [pc, #292]	; (800504c <HAL_SPI_MspInit+0x1b0>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004f2c:	4b47      	ldr	r3, [pc, #284]	; (800504c <HAL_SPI_MspInit+0x1b0>)
 8004f2e:	2280      	movs	r2, #128	; 0x80
 8004f30:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f32:	4b46      	ldr	r3, [pc, #280]	; (800504c <HAL_SPI_MspInit+0x1b0>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f38:	4b44      	ldr	r3, [pc, #272]	; (800504c <HAL_SPI_MspInit+0x1b0>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004f3e:	4b43      	ldr	r3, [pc, #268]	; (800504c <HAL_SPI_MspInit+0x1b0>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004f44:	4b41      	ldr	r3, [pc, #260]	; (800504c <HAL_SPI_MspInit+0x1b0>)
 8004f46:	2280      	movs	r2, #128	; 0x80
 8004f48:	0152      	lsls	r2, r2, #5
 8004f4a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004f4c:	4b3f      	ldr	r3, [pc, #252]	; (800504c <HAL_SPI_MspInit+0x1b0>)
 8004f4e:	0018      	movs	r0, r3
 8004f50:	f000 fd68 	bl	8005a24 <HAL_DMA_Init>
 8004f54:	1e03      	subs	r3, r0, #0
 8004f56:	d001      	beq.n	8004f5c <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8004f58:	f7ff ff88 	bl	8004e6c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a3b      	ldr	r2, [pc, #236]	; (800504c <HAL_SPI_MspInit+0x1b0>)
 8004f60:	649a      	str	r2, [r3, #72]	; 0x48
 8004f62:	4b3a      	ldr	r3, [pc, #232]	; (800504c <HAL_SPI_MspInit+0x1b0>)
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8004f68:	4b3a      	ldr	r3, [pc, #232]	; (8005054 <HAL_SPI_MspInit+0x1b8>)
 8004f6a:	4a3b      	ldr	r2, [pc, #236]	; (8005058 <HAL_SPI_MspInit+0x1bc>)
 8004f6c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8004f6e:	4b39      	ldr	r3, [pc, #228]	; (8005054 <HAL_SPI_MspInit+0x1b8>)
 8004f70:	2201      	movs	r2, #1
 8004f72:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f74:	4b37      	ldr	r3, [pc, #220]	; (8005054 <HAL_SPI_MspInit+0x1b8>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f7a:	4b36      	ldr	r3, [pc, #216]	; (8005054 <HAL_SPI_MspInit+0x1b8>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004f80:	4b34      	ldr	r3, [pc, #208]	; (8005054 <HAL_SPI_MspInit+0x1b8>)
 8004f82:	2280      	movs	r2, #128	; 0x80
 8004f84:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f86:	4b33      	ldr	r3, [pc, #204]	; (8005054 <HAL_SPI_MspInit+0x1b8>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f8c:	4b31      	ldr	r3, [pc, #196]	; (8005054 <HAL_SPI_MspInit+0x1b8>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8004f92:	4b30      	ldr	r3, [pc, #192]	; (8005054 <HAL_SPI_MspInit+0x1b8>)
 8004f94:	2220      	movs	r2, #32
 8004f96:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004f98:	4b2e      	ldr	r3, [pc, #184]	; (8005054 <HAL_SPI_MspInit+0x1b8>)
 8004f9a:	2280      	movs	r2, #128	; 0x80
 8004f9c:	0192      	lsls	r2, r2, #6
 8004f9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004fa0:	4b2c      	ldr	r3, [pc, #176]	; (8005054 <HAL_SPI_MspInit+0x1b8>)
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	f000 fd3e 	bl	8005a24 <HAL_DMA_Init>
 8004fa8:	1e03      	subs	r3, r0, #0
 8004faa:	d001      	beq.n	8004fb0 <HAL_SPI_MspInit+0x114>
    {
      Error_Handler();
 8004fac:	f7ff ff5e 	bl	8004e6c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a28      	ldr	r2, [pc, #160]	; (8005054 <HAL_SPI_MspInit+0x1b8>)
 8004fb4:	64da      	str	r2, [r3, #76]	; 0x4c
 8004fb6:	4b27      	ldr	r3, [pc, #156]	; (8005054 <HAL_SPI_MspInit+0x1b8>)
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	2019      	movs	r0, #25
 8004fc2:	f000 fcfd 	bl	80059c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004fc6:	2019      	movs	r0, #25
 8004fc8:	f000 fd0f 	bl	80059ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004fcc:	e036      	b.n	800503c <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI2)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a22      	ldr	r2, [pc, #136]	; (800505c <HAL_SPI_MspInit+0x1c0>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d131      	bne.n	800503c <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004fd8:	4b1b      	ldr	r3, [pc, #108]	; (8005048 <HAL_SPI_MspInit+0x1ac>)
 8004fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fdc:	4b1a      	ldr	r3, [pc, #104]	; (8005048 <HAL_SPI_MspInit+0x1ac>)
 8004fde:	2180      	movs	r1, #128	; 0x80
 8004fe0:	01c9      	lsls	r1, r1, #7
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fe6:	4b18      	ldr	r3, [pc, #96]	; (8005048 <HAL_SPI_MspInit+0x1ac>)
 8004fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fea:	4b17      	ldr	r3, [pc, #92]	; (8005048 <HAL_SPI_MspInit+0x1ac>)
 8004fec:	2102      	movs	r1, #2
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ff2:	4b15      	ldr	r3, [pc, #84]	; (8005048 <HAL_SPI_MspInit+0x1ac>)
 8004ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004ffe:	2114      	movs	r1, #20
 8005000:	187b      	adds	r3, r7, r1
 8005002:	22e0      	movs	r2, #224	; 0xe0
 8005004:	0212      	lsls	r2, r2, #8
 8005006:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005008:	187b      	adds	r3, r7, r1
 800500a:	2202      	movs	r2, #2
 800500c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800500e:	187b      	adds	r3, r7, r1
 8005010:	2200      	movs	r2, #0
 8005012:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005014:	187b      	adds	r3, r7, r1
 8005016:	2203      	movs	r2, #3
 8005018:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800501a:	187b      	adds	r3, r7, r1
 800501c:	2200      	movs	r2, #0
 800501e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005020:	187b      	adds	r3, r7, r1
 8005022:	4a0f      	ldr	r2, [pc, #60]	; (8005060 <HAL_SPI_MspInit+0x1c4>)
 8005024:	0019      	movs	r1, r3
 8005026:	0010      	movs	r0, r2
 8005028:	f001 f9be 	bl	80063a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800502c:	2200      	movs	r2, #0
 800502e:	2100      	movs	r1, #0
 8005030:	201a      	movs	r0, #26
 8005032:	f000 fcc5 	bl	80059c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8005036:	201a      	movs	r0, #26
 8005038:	f000 fcd7 	bl	80059ea <HAL_NVIC_EnableIRQ>
}
 800503c:	46c0      	nop			; (mov r8, r8)
 800503e:	46bd      	mov	sp, r7
 8005040:	b00a      	add	sp, #40	; 0x28
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40013000 	.word	0x40013000
 8005048:	40021000 	.word	0x40021000
 800504c:	20000f68 	.word	0x20000f68
 8005050:	40020030 	.word	0x40020030
 8005054:	20000f20 	.word	0x20000f20
 8005058:	4002001c 	.word	0x4002001c
 800505c:	40003800 	.word	0x40003800
 8005060:	50000400 	.word	0x50000400

08005064 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08a      	sub	sp, #40	; 0x28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800506c:	2314      	movs	r3, #20
 800506e:	18fb      	adds	r3, r7, r3
 8005070:	0018      	movs	r0, r3
 8005072:	2314      	movs	r3, #20
 8005074:	001a      	movs	r2, r3
 8005076:	2100      	movs	r1, #0
 8005078:	f005 f928 	bl	800a2cc <memset>
  if(huart->Instance==USART1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a62      	ldr	r2, [pc, #392]	; (800520c <HAL_UART_MspInit+0x1a8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d15c      	bne.n	8005140 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005086:	4b62      	ldr	r3, [pc, #392]	; (8005210 <HAL_UART_MspInit+0x1ac>)
 8005088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800508a:	4b61      	ldr	r3, [pc, #388]	; (8005210 <HAL_UART_MspInit+0x1ac>)
 800508c:	2180      	movs	r1, #128	; 0x80
 800508e:	01c9      	lsls	r1, r1, #7
 8005090:	430a      	orrs	r2, r1
 8005092:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005094:	4b5e      	ldr	r3, [pc, #376]	; (8005210 <HAL_UART_MspInit+0x1ac>)
 8005096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005098:	4b5d      	ldr	r3, [pc, #372]	; (8005210 <HAL_UART_MspInit+0x1ac>)
 800509a:	2101      	movs	r1, #1
 800509c:	430a      	orrs	r2, r1
 800509e:	62da      	str	r2, [r3, #44]	; 0x2c
 80050a0:	4b5b      	ldr	r3, [pc, #364]	; (8005210 <HAL_UART_MspInit+0x1ac>)
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	2201      	movs	r2, #1
 80050a6:	4013      	ands	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]
 80050aa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80050ac:	2114      	movs	r1, #20
 80050ae:	187b      	adds	r3, r7, r1
 80050b0:	22c0      	movs	r2, #192	; 0xc0
 80050b2:	00d2      	lsls	r2, r2, #3
 80050b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050b6:	187b      	adds	r3, r7, r1
 80050b8:	2202      	movs	r2, #2
 80050ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050bc:	187b      	adds	r3, r7, r1
 80050be:	2200      	movs	r2, #0
 80050c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050c2:	187b      	adds	r3, r7, r1
 80050c4:	2203      	movs	r2, #3
 80050c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80050c8:	187b      	adds	r3, r7, r1
 80050ca:	2204      	movs	r2, #4
 80050cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050ce:	187a      	adds	r2, r7, r1
 80050d0:	23a0      	movs	r3, #160	; 0xa0
 80050d2:	05db      	lsls	r3, r3, #23
 80050d4:	0011      	movs	r1, r2
 80050d6:	0018      	movs	r0, r3
 80050d8:	f001 f966 	bl	80063a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80050dc:	4b4d      	ldr	r3, [pc, #308]	; (8005214 <HAL_UART_MspInit+0x1b0>)
 80050de:	4a4e      	ldr	r2, [pc, #312]	; (8005218 <HAL_UART_MspInit+0x1b4>)
 80050e0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 80050e2:	4b4c      	ldr	r3, [pc, #304]	; (8005214 <HAL_UART_MspInit+0x1b0>)
 80050e4:	2203      	movs	r2, #3
 80050e6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050e8:	4b4a      	ldr	r3, [pc, #296]	; (8005214 <HAL_UART_MspInit+0x1b0>)
 80050ea:	2210      	movs	r2, #16
 80050ec:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050ee:	4b49      	ldr	r3, [pc, #292]	; (8005214 <HAL_UART_MspInit+0x1b0>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80050f4:	4b47      	ldr	r3, [pc, #284]	; (8005214 <HAL_UART_MspInit+0x1b0>)
 80050f6:	2280      	movs	r2, #128	; 0x80
 80050f8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050fa:	4b46      	ldr	r3, [pc, #280]	; (8005214 <HAL_UART_MspInit+0x1b0>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005100:	4b44      	ldr	r3, [pc, #272]	; (8005214 <HAL_UART_MspInit+0x1b0>)
 8005102:	2200      	movs	r2, #0
 8005104:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005106:	4b43      	ldr	r3, [pc, #268]	; (8005214 <HAL_UART_MspInit+0x1b0>)
 8005108:	2200      	movs	r2, #0
 800510a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800510c:	4b41      	ldr	r3, [pc, #260]	; (8005214 <HAL_UART_MspInit+0x1b0>)
 800510e:	2200      	movs	r2, #0
 8005110:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005112:	4b40      	ldr	r3, [pc, #256]	; (8005214 <HAL_UART_MspInit+0x1b0>)
 8005114:	0018      	movs	r0, r3
 8005116:	f000 fc85 	bl	8005a24 <HAL_DMA_Init>
 800511a:	1e03      	subs	r3, r0, #0
 800511c:	d001      	beq.n	8005122 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 800511e:	f7ff fea5 	bl	8004e6c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a3b      	ldr	r2, [pc, #236]	; (8005214 <HAL_UART_MspInit+0x1b0>)
 8005126:	66da      	str	r2, [r3, #108]	; 0x6c
 8005128:	4b3a      	ldr	r3, [pc, #232]	; (8005214 <HAL_UART_MspInit+0x1b0>)
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800512e:	2200      	movs	r2, #0
 8005130:	2100      	movs	r1, #0
 8005132:	201b      	movs	r0, #27
 8005134:	f000 fc44 	bl	80059c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005138:	201b      	movs	r0, #27
 800513a:	f000 fc56 	bl	80059ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800513e:	e060      	b.n	8005202 <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART2)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a35      	ldr	r2, [pc, #212]	; (800521c <HAL_UART_MspInit+0x1b8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d15b      	bne.n	8005202 <HAL_UART_MspInit+0x19e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800514a:	4b31      	ldr	r3, [pc, #196]	; (8005210 <HAL_UART_MspInit+0x1ac>)
 800514c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800514e:	4b30      	ldr	r3, [pc, #192]	; (8005210 <HAL_UART_MspInit+0x1ac>)
 8005150:	2180      	movs	r1, #128	; 0x80
 8005152:	0289      	lsls	r1, r1, #10
 8005154:	430a      	orrs	r2, r1
 8005156:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005158:	4b2d      	ldr	r3, [pc, #180]	; (8005210 <HAL_UART_MspInit+0x1ac>)
 800515a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800515c:	4b2c      	ldr	r3, [pc, #176]	; (8005210 <HAL_UART_MspInit+0x1ac>)
 800515e:	2101      	movs	r1, #1
 8005160:	430a      	orrs	r2, r1
 8005162:	62da      	str	r2, [r3, #44]	; 0x2c
 8005164:	4b2a      	ldr	r3, [pc, #168]	; (8005210 <HAL_UART_MspInit+0x1ac>)
 8005166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005168:	2201      	movs	r2, #1
 800516a:	4013      	ands	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005170:	2114      	movs	r1, #20
 8005172:	187b      	adds	r3, r7, r1
 8005174:	220c      	movs	r2, #12
 8005176:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005178:	187b      	adds	r3, r7, r1
 800517a:	2202      	movs	r2, #2
 800517c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800517e:	187b      	adds	r3, r7, r1
 8005180:	2200      	movs	r2, #0
 8005182:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005184:	187b      	adds	r3, r7, r1
 8005186:	2203      	movs	r2, #3
 8005188:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800518a:	187b      	adds	r3, r7, r1
 800518c:	2204      	movs	r2, #4
 800518e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005190:	187a      	adds	r2, r7, r1
 8005192:	23a0      	movs	r3, #160	; 0xa0
 8005194:	05db      	lsls	r3, r3, #23
 8005196:	0011      	movs	r1, r2
 8005198:	0018      	movs	r0, r3
 800519a:	f001 f905 	bl	80063a8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 800519e:	4b20      	ldr	r3, [pc, #128]	; (8005220 <HAL_UART_MspInit+0x1bc>)
 80051a0:	4a20      	ldr	r2, [pc, #128]	; (8005224 <HAL_UART_MspInit+0x1c0>)
 80051a2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 80051a4:	4b1e      	ldr	r3, [pc, #120]	; (8005220 <HAL_UART_MspInit+0x1bc>)
 80051a6:	2204      	movs	r2, #4
 80051a8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051aa:	4b1d      	ldr	r3, [pc, #116]	; (8005220 <HAL_UART_MspInit+0x1bc>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051b0:	4b1b      	ldr	r3, [pc, #108]	; (8005220 <HAL_UART_MspInit+0x1bc>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80051b6:	4b1a      	ldr	r3, [pc, #104]	; (8005220 <HAL_UART_MspInit+0x1bc>)
 80051b8:	2280      	movs	r2, #128	; 0x80
 80051ba:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051bc:	4b18      	ldr	r3, [pc, #96]	; (8005220 <HAL_UART_MspInit+0x1bc>)
 80051be:	2200      	movs	r2, #0
 80051c0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051c2:	4b17      	ldr	r3, [pc, #92]	; (8005220 <HAL_UART_MspInit+0x1bc>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80051c8:	4b15      	ldr	r3, [pc, #84]	; (8005220 <HAL_UART_MspInit+0x1bc>)
 80051ca:	2220      	movs	r2, #32
 80051cc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80051ce:	4b14      	ldr	r3, [pc, #80]	; (8005220 <HAL_UART_MspInit+0x1bc>)
 80051d0:	22c0      	movs	r2, #192	; 0xc0
 80051d2:	0192      	lsls	r2, r2, #6
 80051d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80051d6:	4b12      	ldr	r3, [pc, #72]	; (8005220 <HAL_UART_MspInit+0x1bc>)
 80051d8:	0018      	movs	r0, r3
 80051da:	f000 fc23 	bl	8005a24 <HAL_DMA_Init>
 80051de:	1e03      	subs	r3, r0, #0
 80051e0:	d001      	beq.n	80051e6 <HAL_UART_MspInit+0x182>
      Error_Handler();
 80051e2:	f7ff fe43 	bl	8004e6c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a0d      	ldr	r2, [pc, #52]	; (8005220 <HAL_UART_MspInit+0x1bc>)
 80051ea:	671a      	str	r2, [r3, #112]	; 0x70
 80051ec:	4b0c      	ldr	r3, [pc, #48]	; (8005220 <HAL_UART_MspInit+0x1bc>)
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80051f2:	2200      	movs	r2, #0
 80051f4:	2100      	movs	r1, #0
 80051f6:	201c      	movs	r0, #28
 80051f8:	f000 fbe2 	bl	80059c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80051fc:	201c      	movs	r0, #28
 80051fe:	f000 fbf4 	bl	80059ea <HAL_NVIC_EnableIRQ>
}
 8005202:	46c0      	nop			; (mov r8, r8)
 8005204:	46bd      	mov	sp, r7
 8005206:	b00a      	add	sp, #40	; 0x28
 8005208:	bd80      	pop	{r7, pc}
 800520a:	46c0      	nop			; (mov r8, r8)
 800520c:	40013800 	.word	0x40013800
 8005210:	40021000 	.word	0x40021000
 8005214:	20000d78 	.word	0x20000d78
 8005218:	40020044 	.word	0x40020044
 800521c:	40004400 	.word	0x40004400
 8005220:	20000cd8 	.word	0x20000cd8
 8005224:	40020058 	.word	0x40020058

08005228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800522c:	e7fe      	b.n	800522c <NMI_Handler+0x4>

0800522e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005232:	e7fe      	b.n	8005232 <HardFault_Handler+0x4>

08005234 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005238:	46c0      	nop			; (mov r8, r8)
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005242:	46c0      	nop			; (mov r8, r8)
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800524c:	f000 face 	bl	80057ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005250:	46c0      	nop			; (mov r8, r8)
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800525c:	4b05      	ldr	r3, [pc, #20]	; (8005274 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800525e:	0018      	movs	r0, r3
 8005260:	f000 fd8f 	bl	8005d82 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005264:	4b04      	ldr	r3, [pc, #16]	; (8005278 <DMA1_Channel2_3_IRQHandler+0x20>)
 8005266:	0018      	movs	r0, r3
 8005268:	f000 fd8b 	bl	8005d82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800526c:	46c0      	nop			; (mov r8, r8)
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	46c0      	nop			; (mov r8, r8)
 8005274:	20000f20 	.word	0x20000f20
 8005278:	20000f68 	.word	0x20000f68

0800527c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005280:	4b05      	ldr	r3, [pc, #20]	; (8005298 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 8005282:	0018      	movs	r0, r3
 8005284:	f000 fd7d 	bl	8005d82 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005288:	4b04      	ldr	r3, [pc, #16]	; (800529c <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 800528a:	0018      	movs	r0, r3
 800528c:	f000 fd79 	bl	8005d82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8005290:	46c0      	nop			; (mov r8, r8)
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	46c0      	nop			; (mov r8, r8)
 8005298:	20000d78 	.word	0x20000d78
 800529c:	20000cd8 	.word	0x20000cd8

080052a0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80052a4:	4b03      	ldr	r3, [pc, #12]	; (80052b4 <SPI1_IRQHandler+0x14>)
 80052a6:	0018      	movs	r0, r3
 80052a8:	f003 f860 	bl	800836c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80052ac:	46c0      	nop			; (mov r8, r8)
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	46c0      	nop			; (mov r8, r8)
 80052b4:	20000e44 	.word	0x20000e44

080052b8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80052bc:	4b03      	ldr	r3, [pc, #12]	; (80052cc <SPI2_IRQHandler+0x14>)
 80052be:	0018      	movs	r0, r3
 80052c0:	f003 f854 	bl	800836c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80052c4:	46c0      	nop			; (mov r8, r8)
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	20000d20 	.word	0x20000d20

080052d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80052d4:	4b03      	ldr	r3, [pc, #12]	; (80052e4 <USART1_IRQHandler+0x14>)
 80052d6:	0018      	movs	r0, r3
 80052d8:	f003 fd9c 	bl	8008e14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80052dc:	46c0      	nop			; (mov r8, r8)
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	46c0      	nop			; (mov r8, r8)
 80052e4:	20000dc0 	.word	0x20000dc0

080052e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80052ec:	4b03      	ldr	r3, [pc, #12]	; (80052fc <USART2_IRQHandler+0x14>)
 80052ee:	0018      	movs	r0, r3
 80052f0:	f003 fd90 	bl	8008e14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80052f4:	46c0      	nop			; (mov r8, r8)
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	46c0      	nop			; (mov r8, r8)
 80052fc:	20000e9c 	.word	0x20000e9c

08005300 <HAL_UART_RxCpltCallback>:
/*============================================================================*/
/* Implementation of functions                                                */
/*============================================================================*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
	dbg_printf("RX STPM3x ALL\r\n");
 8005308:	4b07      	ldr	r3, [pc, #28]	; (8005328 <HAL_UART_RxCpltCallback+0x28>)
 800530a:	0018      	movs	r0, r3
 800530c:	f005 febc 	bl	800b088 <puts>
	memcpy(&stpm_rxBuffer[0],&rxDMABuffer[10],STPM3x_SAMPLE_SIZE);
 8005310:	23af      	movs	r3, #175	; 0xaf
 8005312:	005a      	lsls	r2, r3, #1
 8005314:	4905      	ldr	r1, [pc, #20]	; (800532c <HAL_UART_RxCpltCallback+0x2c>)
 8005316:	4b06      	ldr	r3, [pc, #24]	; (8005330 <HAL_UART_RxCpltCallback+0x30>)
 8005318:	0018      	movs	r0, r3
 800531a:	f004 ffce 	bl	800a2ba <memcpy>
}
 800531e:	46c0      	nop			; (mov r8, r8)
 8005320:	46bd      	mov	sp, r7
 8005322:	b002      	add	sp, #8
 8005324:	bd80      	pop	{r7, pc}
 8005326:	46c0      	nop			; (mov r8, r8)
 8005328:	0800ea94 	.word	0x0800ea94
 800532c:	20000fba 	.word	0x20000fba
 8005330:	20001118 	.word	0x20001118

08005334 <stmp3x_read_raw_buffered>:

int stmp3x_read_raw_buffered(uint8_t *data)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
	memcpy(data, &stpm_rxBuffer[0], STPM3x_SAMPLE_SIZE);
 800533c:	23af      	movs	r3, #175	; 0xaf
 800533e:	005a      	lsls	r2, r3, #1
 8005340:	4905      	ldr	r1, [pc, #20]	; (8005358 <stmp3x_read_raw_buffered+0x24>)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	0018      	movs	r0, r3
 8005346:	f004 ffb8 	bl	800a2ba <memcpy>
	return STPM3x_SAMPLE_SIZE;
 800534a:	23af      	movs	r3, #175	; 0xaf
 800534c:	005b      	lsls	r3, r3, #1
}
 800534e:	0018      	movs	r0, r3
 8005350:	46bd      	mov	sp, r7
 8005352:	b002      	add	sp, #8
 8005354:	bd80      	pop	{r7, pc}
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	20001118 	.word	0x20001118

0800535c <stpmReset>:


/*****************************************************************************/
void stpmReset(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, &configReset[0], 5, 1000);
 8005360:	23fa      	movs	r3, #250	; 0xfa
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4906      	ldr	r1, [pc, #24]	; (8005380 <stpmReset+0x24>)
 8005366:	4807      	ldr	r0, [pc, #28]	; (8005384 <stpmReset+0x28>)
 8005368:	2205      	movs	r2, #5
 800536a:	f003 fba5 	bl	8008ab8 <HAL_UART_Transmit>
	HAL_Delay(1000);
 800536e:	23fa      	movs	r3, #250	; 0xfa
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	0018      	movs	r0, r3
 8005374:	f000 fa56 	bl	8005824 <HAL_Delay>
	/*HAL_DMA_Abort(&hdma_usart2_rx);
	HAL_Delay(1000);
	NVIC_SystemReset();*/


}
 8005378:	46c0      	nop			; (mov r8, r8)
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	20000164 	.word	0x20000164
 8005384:	20000e9c 	.word	0x20000e9c

08005388 <stpm_init>:

/*****************************************************************************/
void stpm_init(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0

	for (int i=0;i<STPM3x_SAMPLE_SIZE;i++)
 800538e:	2300      	movs	r3, #0
 8005390:	607b      	str	r3, [r7, #4]
 8005392:	e007      	b.n	80053a4 <stpm_init+0x1c>
		stpm_rxBuffer[i] = 0;
 8005394:	4a2b      	ldr	r2, [pc, #172]	; (8005444 <stpm_init+0xbc>)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	18d3      	adds	r3, r2, r3
 800539a:	2200      	movs	r2, #0
 800539c:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<STPM3x_SAMPLE_SIZE;i++)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	3301      	adds	r3, #1
 80053a2:	607b      	str	r3, [r7, #4]
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	235e      	movs	r3, #94	; 0x5e
 80053a8:	33ff      	adds	r3, #255	; 0xff
 80053aa:	429a      	cmp	r2, r3
 80053ac:	ddf2      	ble.n	8005394 <stpm_init+0xc>
	for (int i=0;i<STPM3x_SAMPLE_SIZE;i++)
 80053ae:	2300      	movs	r3, #0
 80053b0:	603b      	str	r3, [r7, #0]
 80053b2:	e007      	b.n	80053c4 <stpm_init+0x3c>
		stpm_txBuffer[i] = 0;
 80053b4:	4a24      	ldr	r2, [pc, #144]	; (8005448 <stpm_init+0xc0>)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	18d3      	adds	r3, r2, r3
 80053ba:	2200      	movs	r2, #0
 80053bc:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<STPM3x_SAMPLE_SIZE;i++)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	3301      	adds	r3, #1
 80053c2:	603b      	str	r3, [r7, #0]
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	235e      	movs	r3, #94	; 0x5e
 80053c8:	33ff      	adds	r3, #255	; 0xff
 80053ca:	429a      	cmp	r2, r3
 80053cc:	ddf2      	ble.n	80053b4 <stpm_init+0x2c>

	//MX_USART2_UART_Init();

	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);   // enable idle line interru
 80053ce:	4b1f      	ldr	r3, [pc, #124]	; (800544c <stpm_init+0xc4>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	4b1d      	ldr	r3, [pc, #116]	; (800544c <stpm_init+0xc4>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2120      	movs	r1, #32
 80053da:	430a      	orrs	r2, r1
 80053dc:	601a      	str	r2, [r3, #0]

	stpmReset();
 80053de:	f7ff ffbd 	bl	800535c <stpmReset>


	/** Initial command sequence to activate STPM3x to read periodically. */
	HAL_UART_Transmit(&huart2, &readCR3[0], 5, 1000);
 80053e2:	23fa      	movs	r3, #250	; 0xfa
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	491a      	ldr	r1, [pc, #104]	; (8005450 <stpm_init+0xc8>)
 80053e8:	4818      	ldr	r0, [pc, #96]	; (800544c <stpm_init+0xc4>)
 80053ea:	2205      	movs	r2, #5
 80053ec:	f003 fb64 	bl	8008ab8 <HAL_UART_Transmit>
	HAL_Delay(100);
 80053f0:	2064      	movs	r0, #100	; 0x64
 80053f2:	f000 fa17 	bl	8005824 <HAL_Delay>
	HAL_UART_Transmit(&huart2, &readCR3[0], 5, 1000);
 80053f6:	23fa      	movs	r3, #250	; 0xfa
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4915      	ldr	r1, [pc, #84]	; (8005450 <stpm_init+0xc8>)
 80053fc:	4813      	ldr	r0, [pc, #76]	; (800544c <stpm_init+0xc4>)
 80053fe:	2205      	movs	r2, #5
 8005400:	f003 fb5a 	bl	8008ab8 <HAL_UART_Transmit>
	HAL_Delay(100);
 8005404:	2064      	movs	r0, #100	; 0x64
 8005406:	f000 fa0d 	bl	8005824 <HAL_Delay>
	HAL_UART_Transmit(&huart2, &sndCommand[0], 5, 1000);
 800540a:	23fa      	movs	r3, #250	; 0xfa
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4911      	ldr	r1, [pc, #68]	; (8005454 <stpm_init+0xcc>)
 8005410:	480e      	ldr	r0, [pc, #56]	; (800544c <stpm_init+0xc4>)
 8005412:	2205      	movs	r2, #5
 8005414:	f003 fb50 	bl	8008ab8 <HAL_UART_Transmit>
	HAL_Delay(100);
 8005418:	2064      	movs	r0, #100	; 0x64
 800541a:	f000 fa03 	bl	8005824 <HAL_Delay>
	HAL_UART_Transmit(&huart2, &configCR3_2[0], 5, 1000);
 800541e:	23fa      	movs	r3, #250	; 0xfa
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	490d      	ldr	r1, [pc, #52]	; (8005458 <stpm_init+0xd0>)
 8005424:	4809      	ldr	r0, [pc, #36]	; (800544c <stpm_init+0xc4>)
 8005426:	2205      	movs	r2, #5
 8005428:	f003 fb46 	bl	8008ab8 <HAL_UART_Transmit>

	/** Start UART receive via DMA */
	HAL_UART_Receive_DMA(&huart2, rxDMABuffer, STPM3x_RX_BUFFER_SIZE);
 800542c:	23b4      	movs	r3, #180	; 0xb4
 800542e:	005a      	lsls	r2, r3, #1
 8005430:	490a      	ldr	r1, [pc, #40]	; (800545c <stpm_init+0xd4>)
 8005432:	4b06      	ldr	r3, [pc, #24]	; (800544c <stpm_init+0xc4>)
 8005434:	0018      	movs	r0, r3
 8005436:	f003 fc87 	bl	8008d48 <HAL_UART_Receive_DMA>


}
 800543a:	46c0      	nop			; (mov r8, r8)
 800543c:	46bd      	mov	sp, r7
 800543e:	b002      	add	sp, #8
 8005440:	bd80      	pop	{r7, pc}
 8005442:	46c0      	nop			; (mov r8, r8)
 8005444:	20001118 	.word	0x20001118
 8005448:	20001278 	.word	0x20001278
 800544c:	20000e9c 	.word	0x20000e9c
 8005450:	2000015c 	.word	0x2000015c
 8005454:	20000144 	.word	0x20000144
 8005458:	20000154 	.word	0x20000154
 800545c:	20000fb0 	.word	0x20000fb0

08005460 <stpm_Process>:


/*****************************************************************************/
void stpm_Process(void)
{
 8005460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005462:	b08b      	sub	sp, #44	; 0x2c
 8005464:	af04      	add	r7, sp, #16

	/** Set LATCH */
	errorCode = HAL_UART_Transmit(&huart2, &configCR3_2[0], 5, 1000);
 8005466:	23fa      	movs	r3, #250	; 0xfa
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4946      	ldr	r1, [pc, #280]	; (8005584 <stpm_Process+0x124>)
 800546c:	4846      	ldr	r0, [pc, #280]	; (8005588 <stpm_Process+0x128>)
 800546e:	2205      	movs	r2, #5
 8005470:	f003 fb22 	bl	8008ab8 <HAL_UART_Transmit>
 8005474:	0003      	movs	r3, r0
 8005476:	001a      	movs	r2, r3
 8005478:	4b44      	ldr	r3, [pc, #272]	; (800558c <stpm_Process+0x12c>)
 800547a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(20);
 800547c:	2014      	movs	r0, #20
 800547e:	f000 f9d1 	bl	8005824 <HAL_Delay>

	if (errorCode != HAL_OK)
 8005482:	4b42      	ldr	r3, [pc, #264]	; (800558c <stpm_Process+0x12c>)
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d007      	beq.n	800549a <stpm_Process+0x3a>
	{
		dbg_printf("errcode 1 : %d\n", errorCode);
 800548a:	4b40      	ldr	r3, [pc, #256]	; (800558c <stpm_Process+0x12c>)
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	001a      	movs	r2, r3
 8005490:	4b3f      	ldr	r3, [pc, #252]	; (8005590 <stpm_Process+0x130>)
 8005492:	0011      	movs	r1, r2
 8005494:	0018      	movs	r0, r3
 8005496:	f005 fd7d 	bl	800af94 <iprintf>
	}

	/** Start from register 0 */
	errorCode = HAL_UART_Transmit(&huart2, &initCommand[0], 5, 1000);
 800549a:	23fa      	movs	r3, #250	; 0xfa
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	493d      	ldr	r1, [pc, #244]	; (8005594 <stpm_Process+0x134>)
 80054a0:	4839      	ldr	r0, [pc, #228]	; (8005588 <stpm_Process+0x128>)
 80054a2:	2205      	movs	r2, #5
 80054a4:	f003 fb08 	bl	8008ab8 <HAL_UART_Transmit>
 80054a8:	0003      	movs	r3, r0
 80054aa:	001a      	movs	r2, r3
 80054ac:	4b37      	ldr	r3, [pc, #220]	; (800558c <stpm_Process+0x12c>)
 80054ae:	701a      	strb	r2, [r3, #0]
	HAL_Delay(20);
 80054b0:	2014      	movs	r0, #20
 80054b2:	f000 f9b7 	bl	8005824 <HAL_Delay>

	if (errorCode != HAL_OK)
 80054b6:	4b35      	ldr	r3, [pc, #212]	; (800558c <stpm_Process+0x12c>)
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d007      	beq.n	80054ce <stpm_Process+0x6e>
	{
		dbg_printf("errcode 2 : %d\n", errorCode);
 80054be:	4b33      	ldr	r3, [pc, #204]	; (800558c <stpm_Process+0x12c>)
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	001a      	movs	r2, r3
 80054c4:	4b34      	ldr	r3, [pc, #208]	; (8005598 <stpm_Process+0x138>)
 80054c6:	0011      	movs	r1, r2
 80054c8:	0018      	movs	r0, r3
 80054ca:	f005 fd63 	bl	800af94 <iprintf>
	}

	/** Read all registers */
	for (int i = 0; i < 70; i++)
 80054ce:	2300      	movs	r3, #0
 80054d0:	617b      	str	r3, [r7, #20]
 80054d2:	e010      	b.n	80054f6 <stpm_Process+0x96>
	{
		errorCode = HAL_UART_Transmit(&huart2, &sndCommand[0], 5, 1000);
 80054d4:	23fa      	movs	r3, #250	; 0xfa
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4930      	ldr	r1, [pc, #192]	; (800559c <stpm_Process+0x13c>)
 80054da:	482b      	ldr	r0, [pc, #172]	; (8005588 <stpm_Process+0x128>)
 80054dc:	2205      	movs	r2, #5
 80054de:	f003 faeb 	bl	8008ab8 <HAL_UART_Transmit>
 80054e2:	0003      	movs	r3, r0
 80054e4:	001a      	movs	r2, r3
 80054e6:	4b29      	ldr	r3, [pc, #164]	; (800558c <stpm_Process+0x12c>)
 80054e8:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 80054ea:	200a      	movs	r0, #10
 80054ec:	f000 f99a 	bl	8005824 <HAL_Delay>
	for (int i = 0; i < 70; i++)
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	3301      	adds	r3, #1
 80054f4:	617b      	str	r3, [r7, #20]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2b45      	cmp	r3, #69	; 0x45
 80054fa:	ddeb      	ble.n	80054d4 <stpm_Process+0x74>
	}

	if (errorCode != HAL_OK)
 80054fc:	4b23      	ldr	r3, [pc, #140]	; (800558c <stpm_Process+0x12c>)
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d007      	beq.n	8005514 <stpm_Process+0xb4>
	{
		dbg_printf("errcode 3 : %d\n", errorCode);
 8005504:	4b21      	ldr	r3, [pc, #132]	; (800558c <stpm_Process+0x12c>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	001a      	movs	r2, r3
 800550a:	4b25      	ldr	r3, [pc, #148]	; (80055a0 <stpm_Process+0x140>)
 800550c:	0011      	movs	r1, r2
 800550e:	0018      	movs	r0, r3
 8005510:	f005 fd40 	bl	800af94 <iprintf>
	}

	HAL_Delay(20);
 8005514:	2014      	movs	r0, #20
 8005516:	f000 f985 	bl	8005824 <HAL_Delay>

#ifdef RTDEBUG
	//dbg_printf("RX Buffer : \n");
	int j = 0;
 800551a:	2300      	movs	r3, #0
 800551c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 70; i++)
 800551e:	2300      	movs	r3, #0
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	e028      	b.n	8005576 <stpm_Process+0x116>
	{
		j = i *5;
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	0013      	movs	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	189b      	adds	r3, r3, r2
 800552c:	60fb      	str	r3, [r7, #12]
		dbg_printf("[%d] - %x:%x:%x:%x:%x \n", i, stpm_rxBuffer[j], stpm_rxBuffer[j+1], stpm_rxBuffer[j+2], stpm_rxBuffer[j+3], stpm_rxBuffer[j+4]);
 800552e:	4a1d      	ldr	r2, [pc, #116]	; (80055a4 <stpm_Process+0x144>)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	18d3      	adds	r3, r2, r3
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	001e      	movs	r6, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	3301      	adds	r3, #1
 800553c:	4a19      	ldr	r2, [pc, #100]	; (80055a4 <stpm_Process+0x144>)
 800553e:	5cd3      	ldrb	r3, [r2, r3]
 8005540:	607b      	str	r3, [r7, #4]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	3302      	adds	r3, #2
 8005546:	4a17      	ldr	r2, [pc, #92]	; (80055a4 <stpm_Process+0x144>)
 8005548:	5cd3      	ldrb	r3, [r2, r3]
 800554a:	001c      	movs	r4, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	3303      	adds	r3, #3
 8005550:	4a14      	ldr	r2, [pc, #80]	; (80055a4 <stpm_Process+0x144>)
 8005552:	5cd3      	ldrb	r3, [r2, r3]
 8005554:	001d      	movs	r5, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	3304      	adds	r3, #4
 800555a:	4a12      	ldr	r2, [pc, #72]	; (80055a4 <stpm_Process+0x144>)
 800555c:	5cd3      	ldrb	r3, [r2, r3]
 800555e:	6939      	ldr	r1, [r7, #16]
 8005560:	4811      	ldr	r0, [pc, #68]	; (80055a8 <stpm_Process+0x148>)
 8005562:	9302      	str	r3, [sp, #8]
 8005564:	9501      	str	r5, [sp, #4]
 8005566:	9400      	str	r4, [sp, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	0032      	movs	r2, r6
 800556c:	f005 fd12 	bl	800af94 <iprintf>
	for (int i = 0; i < 70; i++)
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	3301      	adds	r3, #1
 8005574:	613b      	str	r3, [r7, #16]
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	2b45      	cmp	r3, #69	; 0x45
 800557a:	ddd3      	ble.n	8005524 <stpm_Process+0xc4>
	}
#endif

	//HAL_Delay(1000);

}
 800557c:	46c0      	nop			; (mov r8, r8)
 800557e:	46bd      	mov	sp, r7
 8005580:	b007      	add	sp, #28
 8005582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005584:	20000154 	.word	0x20000154
 8005588:	20000e9c 	.word	0x20000e9c
 800558c:	20001276 	.word	0x20001276
 8005590:	0800eaa4 	.word	0x0800eaa4
 8005594:	2000014c 	.word	0x2000014c
 8005598:	0800eab4 	.word	0x0800eab4
 800559c:	20000144 	.word	0x20000144
 80055a0:	0800eac4 	.word	0x0800eac4
 80055a4:	20001118 	.word	0x20001118
 80055a8:	0800ead4 	.word	0x0800ead4

080055ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055b8:	2300      	movs	r3, #0
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	e00a      	b.n	80055d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80055be:	e000      	b.n	80055c2 <_read+0x16>
 80055c0:	bf00      	nop
 80055c2:	0001      	movs	r1, r0
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	60ba      	str	r2, [r7, #8]
 80055ca:	b2ca      	uxtb	r2, r1
 80055cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	3301      	adds	r3, #1
 80055d2:	617b      	str	r3, [r7, #20]
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	429a      	cmp	r2, r3
 80055da:	dbf0      	blt.n	80055be <_read+0x12>
	}

return len;
 80055dc:	687b      	ldr	r3, [r7, #4]
}
 80055de:	0018      	movs	r0, r3
 80055e0:	46bd      	mov	sp, r7
 80055e2:	b006      	add	sp, #24
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b086      	sub	sp, #24
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	60f8      	str	r0, [r7, #12]
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055f2:	2300      	movs	r3, #0
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	e009      	b.n	800560c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	60ba      	str	r2, [r7, #8]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	0018      	movs	r0, r3
 8005602:	f7fe fd9d 	bl	8004140 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	3301      	adds	r3, #1
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	429a      	cmp	r2, r3
 8005612:	dbf1      	blt.n	80055f8 <_write+0x12>
	}
	return len;
 8005614:	687b      	ldr	r3, [r7, #4]
}
 8005616:	0018      	movs	r0, r3
 8005618:	46bd      	mov	sp, r7
 800561a:	b006      	add	sp, #24
 800561c:	bd80      	pop	{r7, pc}

0800561e <_close>:

int _close(int file)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b082      	sub	sp, #8
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
	return -1;
 8005626:	2301      	movs	r3, #1
 8005628:	425b      	negs	r3, r3
}
 800562a:	0018      	movs	r0, r3
 800562c:	46bd      	mov	sp, r7
 800562e:	b002      	add	sp, #8
 8005630:	bd80      	pop	{r7, pc}

08005632 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b082      	sub	sp, #8
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
 800563a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	2280      	movs	r2, #128	; 0x80
 8005640:	0192      	lsls	r2, r2, #6
 8005642:	605a      	str	r2, [r3, #4]
	return 0;
 8005644:	2300      	movs	r3, #0
}
 8005646:	0018      	movs	r0, r3
 8005648:	46bd      	mov	sp, r7
 800564a:	b002      	add	sp, #8
 800564c:	bd80      	pop	{r7, pc}

0800564e <_isatty>:

int _isatty(int file)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
	return 1;
 8005656:	2301      	movs	r3, #1
}
 8005658:	0018      	movs	r0, r3
 800565a:	46bd      	mov	sp, r7
 800565c:	b002      	add	sp, #8
 800565e:	bd80      	pop	{r7, pc}

08005660 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
	return 0;
 800566c:	2300      	movs	r3, #0
}
 800566e:	0018      	movs	r0, r3
 8005670:	46bd      	mov	sp, r7
 8005672:	b004      	add	sp, #16
 8005674:	bd80      	pop	{r7, pc}
	...

08005678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005680:	4a14      	ldr	r2, [pc, #80]	; (80056d4 <_sbrk+0x5c>)
 8005682:	4b15      	ldr	r3, [pc, #84]	; (80056d8 <_sbrk+0x60>)
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800568c:	4b13      	ldr	r3, [pc, #76]	; (80056dc <_sbrk+0x64>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d102      	bne.n	800569a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005694:	4b11      	ldr	r3, [pc, #68]	; (80056dc <_sbrk+0x64>)
 8005696:	4a12      	ldr	r2, [pc, #72]	; (80056e0 <_sbrk+0x68>)
 8005698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800569a:	4b10      	ldr	r3, [pc, #64]	; (80056dc <_sbrk+0x64>)
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	18d3      	adds	r3, r2, r3
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d207      	bcs.n	80056b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80056a8:	f004 fdce 	bl	800a248 <__errno>
 80056ac:	0003      	movs	r3, r0
 80056ae:	220c      	movs	r2, #12
 80056b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80056b2:	2301      	movs	r3, #1
 80056b4:	425b      	negs	r3, r3
 80056b6:	e009      	b.n	80056cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80056b8:	4b08      	ldr	r3, [pc, #32]	; (80056dc <_sbrk+0x64>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80056be:	4b07      	ldr	r3, [pc, #28]	; (80056dc <_sbrk+0x64>)
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	18d2      	adds	r2, r2, r3
 80056c6:	4b05      	ldr	r3, [pc, #20]	; (80056dc <_sbrk+0x64>)
 80056c8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80056ca:	68fb      	ldr	r3, [r7, #12]
}
 80056cc:	0018      	movs	r0, r3
 80056ce:	46bd      	mov	sp, r7
 80056d0:	b006      	add	sp, #24
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	20005000 	.word	0x20005000
 80056d8:	00000400 	.word	0x00000400
 80056dc:	20000780 	.word	0x20000780
 80056e0:	200013f8 	.word	0x200013f8

080056e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80056e8:	46c0      	nop			; (mov r8, r8)
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80056f0:	480d      	ldr	r0, [pc, #52]	; (8005728 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80056f2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80056f4:	480d      	ldr	r0, [pc, #52]	; (800572c <LoopForever+0x6>)
  ldr r1, =_edata
 80056f6:	490e      	ldr	r1, [pc, #56]	; (8005730 <LoopForever+0xa>)
  ldr r2, =_sidata
 80056f8:	4a0e      	ldr	r2, [pc, #56]	; (8005734 <LoopForever+0xe>)
  movs r3, #0
 80056fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80056fc:	e002      	b.n	8005704 <LoopCopyDataInit>

080056fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80056fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005702:	3304      	adds	r3, #4

08005704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005708:	d3f9      	bcc.n	80056fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800570a:	4a0b      	ldr	r2, [pc, #44]	; (8005738 <LoopForever+0x12>)
  ldr r4, =_ebss
 800570c:	4c0b      	ldr	r4, [pc, #44]	; (800573c <LoopForever+0x16>)
  movs r3, #0
 800570e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005710:	e001      	b.n	8005716 <LoopFillZerobss>

08005712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005714:	3204      	adds	r2, #4

08005716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005718:	d3fb      	bcc.n	8005712 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800571a:	f7ff ffe3 	bl	80056e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800571e:	f004 fd99 	bl	800a254 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005722:	f7ff f977 	bl	8004a14 <main>

08005726 <LoopForever>:

LoopForever:
    b LoopForever
 8005726:	e7fe      	b.n	8005726 <LoopForever>
   ldr   r0, =_estack
 8005728:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800572c:	20000108 	.word	0x20000108
  ldr r1, =_edata
 8005730:	20000348 	.word	0x20000348
  ldr r2, =_sidata
 8005734:	0800f278 	.word	0x0800f278
  ldr r2, =_sbss
 8005738:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 800573c:	200013f8 	.word	0x200013f8

08005740 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005740:	e7fe      	b.n	8005740 <ADC1_COMP_IRQHandler>
	...

08005744 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800574a:	1dfb      	adds	r3, r7, #7
 800574c:	2200      	movs	r2, #0
 800574e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8005750:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <HAL_Init+0x3c>)
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	4b0a      	ldr	r3, [pc, #40]	; (8005780 <HAL_Init+0x3c>)
 8005756:	2140      	movs	r1, #64	; 0x40
 8005758:	430a      	orrs	r2, r1
 800575a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800575c:	2000      	movs	r0, #0
 800575e:	f000 f811 	bl	8005784 <HAL_InitTick>
 8005762:	1e03      	subs	r3, r0, #0
 8005764:	d003      	beq.n	800576e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8005766:	1dfb      	adds	r3, r7, #7
 8005768:	2201      	movs	r2, #1
 800576a:	701a      	strb	r2, [r3, #0]
 800576c:	e001      	b.n	8005772 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800576e:	f7ff fb81 	bl	8004e74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005772:	1dfb      	adds	r3, r7, #7
 8005774:	781b      	ldrb	r3, [r3, #0]
}
 8005776:	0018      	movs	r0, r3
 8005778:	46bd      	mov	sp, r7
 800577a:	b002      	add	sp, #8
 800577c:	bd80      	pop	{r7, pc}
 800577e:	46c0      	nop			; (mov r8, r8)
 8005780:	40022000 	.word	0x40022000

08005784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005784:	b590      	push	{r4, r7, lr}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800578c:	4b14      	ldr	r3, [pc, #80]	; (80057e0 <HAL_InitTick+0x5c>)
 800578e:	681c      	ldr	r4, [r3, #0]
 8005790:	4b14      	ldr	r3, [pc, #80]	; (80057e4 <HAL_InitTick+0x60>)
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	0019      	movs	r1, r3
 8005796:	23fa      	movs	r3, #250	; 0xfa
 8005798:	0098      	lsls	r0, r3, #2
 800579a:	f7fa fccb 	bl	8000134 <__udivsi3>
 800579e:	0003      	movs	r3, r0
 80057a0:	0019      	movs	r1, r3
 80057a2:	0020      	movs	r0, r4
 80057a4:	f7fa fcc6 	bl	8000134 <__udivsi3>
 80057a8:	0003      	movs	r3, r0
 80057aa:	0018      	movs	r0, r3
 80057ac:	f000 f92d 	bl	8005a0a <HAL_SYSTICK_Config>
 80057b0:	1e03      	subs	r3, r0, #0
 80057b2:	d001      	beq.n	80057b8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e00f      	b.n	80057d8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d80b      	bhi.n	80057d6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057be:	6879      	ldr	r1, [r7, #4]
 80057c0:	2301      	movs	r3, #1
 80057c2:	425b      	negs	r3, r3
 80057c4:	2200      	movs	r2, #0
 80057c6:	0018      	movs	r0, r3
 80057c8:	f000 f8fa 	bl	80059c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80057cc:	4b06      	ldr	r3, [pc, #24]	; (80057e8 <HAL_InitTick+0x64>)
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	e000      	b.n	80057d8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
}
 80057d8:	0018      	movs	r0, r3
 80057da:	46bd      	mov	sp, r7
 80057dc:	b003      	add	sp, #12
 80057de:	bd90      	pop	{r4, r7, pc}
 80057e0:	2000016c 	.word	0x2000016c
 80057e4:	20000174 	.word	0x20000174
 80057e8:	20000170 	.word	0x20000170

080057ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80057f0:	4b05      	ldr	r3, [pc, #20]	; (8005808 <HAL_IncTick+0x1c>)
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	001a      	movs	r2, r3
 80057f6:	4b05      	ldr	r3, [pc, #20]	; (800580c <HAL_IncTick+0x20>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	18d2      	adds	r2, r2, r3
 80057fc:	4b03      	ldr	r3, [pc, #12]	; (800580c <HAL_IncTick+0x20>)
 80057fe:	601a      	str	r2, [r3, #0]
}
 8005800:	46c0      	nop			; (mov r8, r8)
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	46c0      	nop			; (mov r8, r8)
 8005808:	20000174 	.word	0x20000174
 800580c:	200013d8 	.word	0x200013d8

08005810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
  return uwTick;
 8005814:	4b02      	ldr	r3, [pc, #8]	; (8005820 <HAL_GetTick+0x10>)
 8005816:	681b      	ldr	r3, [r3, #0]
}
 8005818:	0018      	movs	r0, r3
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	46c0      	nop			; (mov r8, r8)
 8005820:	200013d8 	.word	0x200013d8

08005824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800582c:	f7ff fff0 	bl	8005810 <HAL_GetTick>
 8005830:	0003      	movs	r3, r0
 8005832:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	3301      	adds	r3, #1
 800583c:	d005      	beq.n	800584a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800583e:	4b09      	ldr	r3, [pc, #36]	; (8005864 <HAL_Delay+0x40>)
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	001a      	movs	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	189b      	adds	r3, r3, r2
 8005848:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800584a:	46c0      	nop			; (mov r8, r8)
 800584c:	f7ff ffe0 	bl	8005810 <HAL_GetTick>
 8005850:	0002      	movs	r2, r0
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	429a      	cmp	r2, r3
 800585a:	d8f7      	bhi.n	800584c <HAL_Delay+0x28>
  {
  }
}
 800585c:	46c0      	nop			; (mov r8, r8)
 800585e:	46bd      	mov	sp, r7
 8005860:	b004      	add	sp, #16
 8005862:	bd80      	pop	{r7, pc}
 8005864:	20000174 	.word	0x20000174

08005868 <__NVIC_EnableIRQ>:
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	0002      	movs	r2, r0
 8005870:	1dfb      	adds	r3, r7, #7
 8005872:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005874:	1dfb      	adds	r3, r7, #7
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b7f      	cmp	r3, #127	; 0x7f
 800587a:	d809      	bhi.n	8005890 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800587c:	1dfb      	adds	r3, r7, #7
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	001a      	movs	r2, r3
 8005882:	231f      	movs	r3, #31
 8005884:	401a      	ands	r2, r3
 8005886:	4b04      	ldr	r3, [pc, #16]	; (8005898 <__NVIC_EnableIRQ+0x30>)
 8005888:	2101      	movs	r1, #1
 800588a:	4091      	lsls	r1, r2
 800588c:	000a      	movs	r2, r1
 800588e:	601a      	str	r2, [r3, #0]
}
 8005890:	46c0      	nop			; (mov r8, r8)
 8005892:	46bd      	mov	sp, r7
 8005894:	b002      	add	sp, #8
 8005896:	bd80      	pop	{r7, pc}
 8005898:	e000e100 	.word	0xe000e100

0800589c <__NVIC_SetPriority>:
{
 800589c:	b590      	push	{r4, r7, lr}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	0002      	movs	r2, r0
 80058a4:	6039      	str	r1, [r7, #0]
 80058a6:	1dfb      	adds	r3, r7, #7
 80058a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80058aa:	1dfb      	adds	r3, r7, #7
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	2b7f      	cmp	r3, #127	; 0x7f
 80058b0:	d828      	bhi.n	8005904 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80058b2:	4a2f      	ldr	r2, [pc, #188]	; (8005970 <__NVIC_SetPriority+0xd4>)
 80058b4:	1dfb      	adds	r3, r7, #7
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	b25b      	sxtb	r3, r3
 80058ba:	089b      	lsrs	r3, r3, #2
 80058bc:	33c0      	adds	r3, #192	; 0xc0
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	589b      	ldr	r3, [r3, r2]
 80058c2:	1dfa      	adds	r2, r7, #7
 80058c4:	7812      	ldrb	r2, [r2, #0]
 80058c6:	0011      	movs	r1, r2
 80058c8:	2203      	movs	r2, #3
 80058ca:	400a      	ands	r2, r1
 80058cc:	00d2      	lsls	r2, r2, #3
 80058ce:	21ff      	movs	r1, #255	; 0xff
 80058d0:	4091      	lsls	r1, r2
 80058d2:	000a      	movs	r2, r1
 80058d4:	43d2      	mvns	r2, r2
 80058d6:	401a      	ands	r2, r3
 80058d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	019b      	lsls	r3, r3, #6
 80058de:	22ff      	movs	r2, #255	; 0xff
 80058e0:	401a      	ands	r2, r3
 80058e2:	1dfb      	adds	r3, r7, #7
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	0018      	movs	r0, r3
 80058e8:	2303      	movs	r3, #3
 80058ea:	4003      	ands	r3, r0
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80058f0:	481f      	ldr	r0, [pc, #124]	; (8005970 <__NVIC_SetPriority+0xd4>)
 80058f2:	1dfb      	adds	r3, r7, #7
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	b25b      	sxtb	r3, r3
 80058f8:	089b      	lsrs	r3, r3, #2
 80058fa:	430a      	orrs	r2, r1
 80058fc:	33c0      	adds	r3, #192	; 0xc0
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	501a      	str	r2, [r3, r0]
}
 8005902:	e031      	b.n	8005968 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005904:	4a1b      	ldr	r2, [pc, #108]	; (8005974 <__NVIC_SetPriority+0xd8>)
 8005906:	1dfb      	adds	r3, r7, #7
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	0019      	movs	r1, r3
 800590c:	230f      	movs	r3, #15
 800590e:	400b      	ands	r3, r1
 8005910:	3b08      	subs	r3, #8
 8005912:	089b      	lsrs	r3, r3, #2
 8005914:	3306      	adds	r3, #6
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	18d3      	adds	r3, r2, r3
 800591a:	3304      	adds	r3, #4
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	1dfa      	adds	r2, r7, #7
 8005920:	7812      	ldrb	r2, [r2, #0]
 8005922:	0011      	movs	r1, r2
 8005924:	2203      	movs	r2, #3
 8005926:	400a      	ands	r2, r1
 8005928:	00d2      	lsls	r2, r2, #3
 800592a:	21ff      	movs	r1, #255	; 0xff
 800592c:	4091      	lsls	r1, r2
 800592e:	000a      	movs	r2, r1
 8005930:	43d2      	mvns	r2, r2
 8005932:	401a      	ands	r2, r3
 8005934:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	019b      	lsls	r3, r3, #6
 800593a:	22ff      	movs	r2, #255	; 0xff
 800593c:	401a      	ands	r2, r3
 800593e:	1dfb      	adds	r3, r7, #7
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	0018      	movs	r0, r3
 8005944:	2303      	movs	r3, #3
 8005946:	4003      	ands	r3, r0
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800594c:	4809      	ldr	r0, [pc, #36]	; (8005974 <__NVIC_SetPriority+0xd8>)
 800594e:	1dfb      	adds	r3, r7, #7
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	001c      	movs	r4, r3
 8005954:	230f      	movs	r3, #15
 8005956:	4023      	ands	r3, r4
 8005958:	3b08      	subs	r3, #8
 800595a:	089b      	lsrs	r3, r3, #2
 800595c:	430a      	orrs	r2, r1
 800595e:	3306      	adds	r3, #6
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	18c3      	adds	r3, r0, r3
 8005964:	3304      	adds	r3, #4
 8005966:	601a      	str	r2, [r3, #0]
}
 8005968:	46c0      	nop			; (mov r8, r8)
 800596a:	46bd      	mov	sp, r7
 800596c:	b003      	add	sp, #12
 800596e:	bd90      	pop	{r4, r7, pc}
 8005970:	e000e100 	.word	0xe000e100
 8005974:	e000ed00 	.word	0xe000ed00

08005978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	3b01      	subs	r3, #1
 8005984:	4a0c      	ldr	r2, [pc, #48]	; (80059b8 <SysTick_Config+0x40>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d901      	bls.n	800598e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800598a:	2301      	movs	r3, #1
 800598c:	e010      	b.n	80059b0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800598e:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <SysTick_Config+0x44>)
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	3a01      	subs	r2, #1
 8005994:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005996:	2301      	movs	r3, #1
 8005998:	425b      	negs	r3, r3
 800599a:	2103      	movs	r1, #3
 800599c:	0018      	movs	r0, r3
 800599e:	f7ff ff7d 	bl	800589c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059a2:	4b06      	ldr	r3, [pc, #24]	; (80059bc <SysTick_Config+0x44>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059a8:	4b04      	ldr	r3, [pc, #16]	; (80059bc <SysTick_Config+0x44>)
 80059aa:	2207      	movs	r2, #7
 80059ac:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	0018      	movs	r0, r3
 80059b2:	46bd      	mov	sp, r7
 80059b4:	b002      	add	sp, #8
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	00ffffff 	.word	0x00ffffff
 80059bc:	e000e010 	.word	0xe000e010

080059c0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60b9      	str	r1, [r7, #8]
 80059c8:	607a      	str	r2, [r7, #4]
 80059ca:	210f      	movs	r1, #15
 80059cc:	187b      	adds	r3, r7, r1
 80059ce:	1c02      	adds	r2, r0, #0
 80059d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	187b      	adds	r3, r7, r1
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	b25b      	sxtb	r3, r3
 80059da:	0011      	movs	r1, r2
 80059dc:	0018      	movs	r0, r3
 80059de:	f7ff ff5d 	bl	800589c <__NVIC_SetPriority>
}
 80059e2:	46c0      	nop			; (mov r8, r8)
 80059e4:	46bd      	mov	sp, r7
 80059e6:	b004      	add	sp, #16
 80059e8:	bd80      	pop	{r7, pc}

080059ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b082      	sub	sp, #8
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	0002      	movs	r2, r0
 80059f2:	1dfb      	adds	r3, r7, #7
 80059f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059f6:	1dfb      	adds	r3, r7, #7
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	b25b      	sxtb	r3, r3
 80059fc:	0018      	movs	r0, r3
 80059fe:	f7ff ff33 	bl	8005868 <__NVIC_EnableIRQ>
}
 8005a02:	46c0      	nop			; (mov r8, r8)
 8005a04:	46bd      	mov	sp, r7
 8005a06:	b002      	add	sp, #8
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b082      	sub	sp, #8
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	0018      	movs	r0, r3
 8005a16:	f7ff ffaf 	bl	8005978 <SysTick_Config>
 8005a1a:	0003      	movs	r3, r0
}
 8005a1c:	0018      	movs	r0, r3
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	b002      	add	sp, #8
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e061      	b.n	8005afa <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a32      	ldr	r2, [pc, #200]	; (8005b04 <HAL_DMA_Init+0xe0>)
 8005a3c:	4694      	mov	ip, r2
 8005a3e:	4463      	add	r3, ip
 8005a40:	2114      	movs	r1, #20
 8005a42:	0018      	movs	r0, r3
 8005a44:	f7fa fb76 	bl	8000134 <__udivsi3>
 8005a48:	0003      	movs	r3, r0
 8005a4a:	009a      	lsls	r2, r3, #2
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a2d      	ldr	r2, [pc, #180]	; (8005b08 <HAL_DMA_Init+0xe4>)
 8005a54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2225      	movs	r2, #37	; 0x25
 8005a5a:	2102      	movs	r1, #2
 8005a5c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	4a28      	ldr	r2, [pc, #160]	; (8005b0c <HAL_DMA_Init+0xe8>)
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005a76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	2380      	movs	r3, #128	; 0x80
 8005aaa:	01db      	lsls	r3, r3, #7
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d018      	beq.n	8005ae2 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005ab0:	4b17      	ldr	r3, [pc, #92]	; (8005b10 <HAL_DMA_Init+0xec>)
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab8:	211c      	movs	r1, #28
 8005aba:	400b      	ands	r3, r1
 8005abc:	210f      	movs	r1, #15
 8005abe:	4099      	lsls	r1, r3
 8005ac0:	000b      	movs	r3, r1
 8005ac2:	43d9      	mvns	r1, r3
 8005ac4:	4b12      	ldr	r3, [pc, #72]	; (8005b10 <HAL_DMA_Init+0xec>)
 8005ac6:	400a      	ands	r2, r1
 8005ac8:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005aca:	4b11      	ldr	r3, [pc, #68]	; (8005b10 <HAL_DMA_Init+0xec>)
 8005acc:	6819      	ldr	r1, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad6:	201c      	movs	r0, #28
 8005ad8:	4003      	ands	r3, r0
 8005ada:	409a      	lsls	r2, r3
 8005adc:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <HAL_DMA_Init+0xec>)
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2225      	movs	r2, #37	; 0x25
 8005aec:	2101      	movs	r1, #1
 8005aee:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2224      	movs	r2, #36	; 0x24
 8005af4:	2100      	movs	r1, #0
 8005af6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	0018      	movs	r0, r3
 8005afc:	46bd      	mov	sp, r7
 8005afe:	b004      	add	sp, #16
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	46c0      	nop			; (mov r8, r8)
 8005b04:	bffdfff8 	.word	0xbffdfff8
 8005b08:	40020000 	.word	0x40020000
 8005b0c:	ffff800f 	.word	0xffff800f
 8005b10:	400200a8 	.word	0x400200a8

08005b14 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
 8005b20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b22:	2317      	movs	r3, #23
 8005b24:	18fb      	adds	r3, r7, r3
 8005b26:	2200      	movs	r2, #0
 8005b28:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2224      	movs	r2, #36	; 0x24
 8005b2e:	5c9b      	ldrb	r3, [r3, r2]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d101      	bne.n	8005b38 <HAL_DMA_Start+0x24>
 8005b34:	2302      	movs	r3, #2
 8005b36:	e032      	b.n	8005b9e <HAL_DMA_Start+0x8a>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2224      	movs	r2, #36	; 0x24
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2225      	movs	r2, #37	; 0x25
 8005b44:	5c9b      	ldrb	r3, [r3, r2]
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d11d      	bne.n	8005b88 <HAL_DMA_Start+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2225      	movs	r2, #37	; 0x25
 8005b50:	2102      	movs	r1, #2
 8005b52:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2101      	movs	r1, #1
 8005b66:	438a      	bics	r2, r1
 8005b68:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	68b9      	ldr	r1, [r7, #8]
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f000 f9b4 	bl	8005ede <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2101      	movs	r1, #1
 8005b82:	430a      	orrs	r2, r1
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	e007      	b.n	8005b98 <HAL_DMA_Start+0x84>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2224      	movs	r2, #36	; 0x24
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	5499      	strb	r1, [r3, r2]
    status = HAL_BUSY;
 8005b90:	2317      	movs	r3, #23
 8005b92:	18fb      	adds	r3, r7, r3
 8005b94:	2202      	movs	r2, #2
 8005b96:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8005b98:	2317      	movs	r3, #23
 8005b9a:	18fb      	adds	r3, r7, r3
 8005b9c:	781b      	ldrb	r3, [r3, #0]
}
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	b006      	add	sp, #24
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b086      	sub	sp, #24
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	60f8      	str	r0, [r7, #12]
 8005bae:	60b9      	str	r1, [r7, #8]
 8005bb0:	607a      	str	r2, [r7, #4]
 8005bb2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb4:	2317      	movs	r3, #23
 8005bb6:	18fb      	adds	r3, r7, r3
 8005bb8:	2200      	movs	r2, #0
 8005bba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2224      	movs	r2, #36	; 0x24
 8005bc0:	5c9b      	ldrb	r3, [r3, r2]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d101      	bne.n	8005bca <HAL_DMA_Start_IT+0x24>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e04f      	b.n	8005c6a <HAL_DMA_Start_IT+0xc4>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2224      	movs	r2, #36	; 0x24
 8005bce:	2101      	movs	r1, #1
 8005bd0:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2225      	movs	r2, #37	; 0x25
 8005bd6:	5c9b      	ldrb	r3, [r3, r2]
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d13a      	bne.n	8005c54 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2225      	movs	r2, #37	; 0x25
 8005be2:	2102      	movs	r1, #2
 8005be4:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	438a      	bics	r2, r1
 8005bfa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	68b9      	ldr	r1, [r7, #8]
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 f96b 	bl	8005ede <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d008      	beq.n	8005c22 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	210e      	movs	r1, #14
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	e00f      	b.n	8005c42 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2104      	movs	r1, #4
 8005c2e:	438a      	bics	r2, r1
 8005c30:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	210a      	movs	r1, #10
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	e007      	b.n	8005c64 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2224      	movs	r2, #36	; 0x24
 8005c58:	2100      	movs	r1, #0
 8005c5a:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005c5c:	2317      	movs	r3, #23
 8005c5e:	18fb      	adds	r3, r7, r3
 8005c60:	2202      	movs	r2, #2
 8005c62:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8005c64:	2317      	movs	r3, #23
 8005c66:	18fb      	adds	r3, r7, r3
 8005c68:	781b      	ldrb	r3, [r3, #0]
}
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	b006      	add	sp, #24
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b084      	sub	sp, #16
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c7a:	230f      	movs	r3, #15
 8005c7c:	18fb      	adds	r3, r7, r3
 8005c7e:	2200      	movs	r2, #0
 8005c80:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2225      	movs	r2, #37	; 0x25
 8005c86:	5c9b      	ldrb	r3, [r3, r2]
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d008      	beq.n	8005ca0 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2204      	movs	r2, #4
 8005c92:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2224      	movs	r2, #36	; 0x24
 8005c98:	2100      	movs	r1, #0
 8005c9a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e024      	b.n	8005cea <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	210e      	movs	r1, #14
 8005cac:	438a      	bics	r2, r1
 8005cae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2101      	movs	r1, #1
 8005cbc:	438a      	bics	r2, r1
 8005cbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc4:	221c      	movs	r2, #28
 8005cc6:	401a      	ands	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ccc:	2101      	movs	r1, #1
 8005cce:	4091      	lsls	r1, r2
 8005cd0:	000a      	movs	r2, r1
 8005cd2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2225      	movs	r2, #37	; 0x25
 8005cd8:	2101      	movs	r1, #1
 8005cda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2224      	movs	r2, #36	; 0x24
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	5499      	strb	r1, [r3, r2]

    return status;
 8005ce4:	230f      	movs	r3, #15
 8005ce6:	18fb      	adds	r3, r7, r3
 8005ce8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005cea:	0018      	movs	r0, r3
 8005cec:	46bd      	mov	sp, r7
 8005cee:	b004      	add	sp, #16
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cfa:	230f      	movs	r3, #15
 8005cfc:	18fb      	adds	r3, r7, r3
 8005cfe:	2200      	movs	r2, #0
 8005d00:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2225      	movs	r2, #37	; 0x25
 8005d06:	5c9b      	ldrb	r3, [r3, r2]
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d007      	beq.n	8005d1e <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2204      	movs	r2, #4
 8005d12:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005d14:	230f      	movs	r3, #15
 8005d16:	18fb      	adds	r3, r7, r3
 8005d18:	2201      	movs	r2, #1
 8005d1a:	701a      	strb	r2, [r3, #0]
 8005d1c:	e02a      	b.n	8005d74 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	210e      	movs	r1, #14
 8005d2a:	438a      	bics	r2, r1
 8005d2c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2101      	movs	r1, #1
 8005d3a:	438a      	bics	r2, r1
 8005d3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d42:	221c      	movs	r2, #28
 8005d44:	401a      	ands	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	4091      	lsls	r1, r2
 8005d4e:	000a      	movs	r2, r1
 8005d50:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2225      	movs	r2, #37	; 0x25
 8005d56:	2101      	movs	r1, #1
 8005d58:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2224      	movs	r2, #36	; 0x24
 8005d5e:	2100      	movs	r1, #0
 8005d60:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d004      	beq.n	8005d74 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	0010      	movs	r0, r2
 8005d72:	4798      	blx	r3
    }
  }
  return status;
 8005d74:	230f      	movs	r3, #15
 8005d76:	18fb      	adds	r3, r7, r3
 8005d78:	781b      	ldrb	r3, [r3, #0]
}
 8005d7a:	0018      	movs	r0, r3
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	b004      	add	sp, #16
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b084      	sub	sp, #16
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9e:	221c      	movs	r2, #28
 8005da0:	4013      	ands	r3, r2
 8005da2:	2204      	movs	r2, #4
 8005da4:	409a      	lsls	r2, r3
 8005da6:	0013      	movs	r3, r2
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	4013      	ands	r3, r2
 8005dac:	d026      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x7a>
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2204      	movs	r2, #4
 8005db2:	4013      	ands	r3, r2
 8005db4:	d022      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	d107      	bne.n	8005dd2 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2104      	movs	r1, #4
 8005dce:	438a      	bics	r2, r1
 8005dd0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd6:	221c      	movs	r2, #28
 8005dd8:	401a      	ands	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dde:	2104      	movs	r1, #4
 8005de0:	4091      	lsls	r1, r2
 8005de2:	000a      	movs	r2, r1
 8005de4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d100      	bne.n	8005df0 <HAL_DMA_IRQHandler+0x6e>
 8005dee:	e071      	b.n	8005ed4 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	0010      	movs	r0, r2
 8005df8:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8005dfa:	e06b      	b.n	8005ed4 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e00:	221c      	movs	r2, #28
 8005e02:	4013      	ands	r3, r2
 8005e04:	2202      	movs	r2, #2
 8005e06:	409a      	lsls	r2, r3
 8005e08:	0013      	movs	r3, r2
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	d02d      	beq.n	8005e6c <HAL_DMA_IRQHandler+0xea>
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2202      	movs	r2, #2
 8005e14:	4013      	ands	r3, r2
 8005e16:	d029      	beq.n	8005e6c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	4013      	ands	r3, r2
 8005e22:	d10b      	bne.n	8005e3c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	210a      	movs	r1, #10
 8005e30:	438a      	bics	r2, r1
 8005e32:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2225      	movs	r2, #37	; 0x25
 8005e38:	2101      	movs	r1, #1
 8005e3a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e40:	221c      	movs	r2, #28
 8005e42:	401a      	ands	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e48:	2102      	movs	r1, #2
 8005e4a:	4091      	lsls	r1, r2
 8005e4c:	000a      	movs	r2, r1
 8005e4e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2224      	movs	r2, #36	; 0x24
 8005e54:	2100      	movs	r1, #0
 8005e56:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d039      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	0010      	movs	r0, r2
 8005e68:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005e6a:	e033      	b.n	8005ed4 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e70:	221c      	movs	r2, #28
 8005e72:	4013      	ands	r3, r2
 8005e74:	2208      	movs	r2, #8
 8005e76:	409a      	lsls	r2, r3
 8005e78:	0013      	movs	r3, r2
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	d02a      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0x154>
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2208      	movs	r2, #8
 8005e84:	4013      	ands	r3, r2
 8005e86:	d026      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	210e      	movs	r1, #14
 8005e94:	438a      	bics	r2, r1
 8005e96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e9c:	221c      	movs	r2, #28
 8005e9e:	401a      	ands	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	4091      	lsls	r1, r2
 8005ea8:	000a      	movs	r2, r1
 8005eaa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2225      	movs	r2, #37	; 0x25
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2224      	movs	r2, #36	; 0x24
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d005      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	0010      	movs	r0, r2
 8005ed2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005ed4:	46c0      	nop			; (mov r8, r8)
 8005ed6:	46c0      	nop			; (mov r8, r8)
}
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	b004      	add	sp, #16
 8005edc:	bd80      	pop	{r7, pc}

08005ede <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b084      	sub	sp, #16
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	60f8      	str	r0, [r7, #12]
 8005ee6:	60b9      	str	r1, [r7, #8]
 8005ee8:	607a      	str	r2, [r7, #4]
 8005eea:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef0:	221c      	movs	r2, #28
 8005ef2:	401a      	ands	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef8:	2101      	movs	r1, #1
 8005efa:	4091      	lsls	r1, r2
 8005efc:	000a      	movs	r2, r1
 8005efe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	683a      	ldr	r2, [r7, #0]
 8005f06:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	2b10      	cmp	r3, #16
 8005f0e:	d108      	bne.n	8005f22 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005f20:	e007      	b.n	8005f32 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	60da      	str	r2, [r3, #12]
}
 8005f32:	46c0      	nop			; (mov r8, r8)
 8005f34:	46bd      	mov	sp, r7
 8005f36:	b004      	add	sp, #16
 8005f38:	bd80      	pop	{r7, pc}
	...

08005f3c <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8005f3c:	b5b0      	push	{r4, r5, r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005f48:	2317      	movs	r3, #23
 8005f4a:	18fb      	adds	r3, r7, r3
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005f50:	4b16      	ldr	r3, [pc, #88]	; (8005fac <HAL_FLASH_Program+0x70>)
 8005f52:	7c1b      	ldrb	r3, [r3, #16]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d101      	bne.n	8005f5c <HAL_FLASH_Program+0x20>
 8005f58:	2302      	movs	r3, #2
 8005f5a:	e022      	b.n	8005fa2 <HAL_FLASH_Program+0x66>
 8005f5c:	4b13      	ldr	r3, [pc, #76]	; (8005fac <HAL_FLASH_Program+0x70>)
 8005f5e:	2201      	movs	r2, #1
 8005f60:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005f62:	2517      	movs	r5, #23
 8005f64:	197c      	adds	r4, r7, r5
 8005f66:	4b12      	ldr	r3, [pc, #72]	; (8005fb0 <HAL_FLASH_Program+0x74>)
 8005f68:	0018      	movs	r0, r3
 8005f6a:	f000 f887 	bl	800607c <FLASH_WaitForLastOperation>
 8005f6e:	0003      	movs	r3, r0
 8005f70:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8005f72:	197b      	adds	r3, r7, r5
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10d      	bne.n	8005f96 <HAL_FLASH_Program+0x5a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005f7a:	4b0c      	ldr	r3, [pc, #48]	; (8005fac <HAL_FLASH_Program+0x70>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	615a      	str	r2, [r3, #20]

    /*Program word (32-bit) at a specified address.*/
    *(__IO uint32_t *)Address = Data;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005f86:	2317      	movs	r3, #23
 8005f88:	18fc      	adds	r4, r7, r3
 8005f8a:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <HAL_FLASH_Program+0x74>)
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	f000 f875 	bl	800607c <FLASH_WaitForLastOperation>
 8005f92:	0003      	movs	r3, r0
 8005f94:	7023      	strb	r3, [r4, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005f96:	4b05      	ldr	r3, [pc, #20]	; (8005fac <HAL_FLASH_Program+0x70>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	741a      	strb	r2, [r3, #16]

  return status;
 8005f9c:	2317      	movs	r3, #23
 8005f9e:	18fb      	adds	r3, r7, r3
 8005fa0:	781b      	ldrb	r3, [r3, #0]
}
 8005fa2:	0018      	movs	r0, r3
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	b006      	add	sp, #24
 8005fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8005faa:	46c0      	nop			; (mov r8, r8)
 8005fac:	200013dc 	.word	0x200013dc
 8005fb0:	0000c350 	.word	0x0000c350

08005fb4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  /* Unlocking FLASH_PECR register access*/
  if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8005fba:	4b21      	ldr	r3, [pc, #132]	; (8006040 <HAL_FLASH_Unlock+0x8c>)
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d118      	bne.n	8005ff8 <HAL_FLASH_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fc6:	f3ef 8310 	mrs	r3, PRIMASK
 8005fca:	60fb      	str	r3, [r7, #12]
  return(result);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8005fce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005fd0:	b672      	cpsid	i
    __disable_irq();

    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 8005fd2:	4b1b      	ldr	r3, [pc, #108]	; (8006040 <HAL_FLASH_Unlock+0x8c>)
 8005fd4:	4a1b      	ldr	r2, [pc, #108]	; (8006044 <HAL_FLASH_Unlock+0x90>)
 8005fd6:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 8005fd8:	4b19      	ldr	r3, [pc, #100]	; (8006040 <HAL_FLASH_Unlock+0x8c>)
 8005fda:	4a1b      	ldr	r2, [pc, #108]	; (8006048 <HAL_FLASH_Unlock+0x94>)
 8005fdc:	60da      	str	r2, [r3, #12]
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f383 8810 	msr	PRIMASK, r3

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8005fe8:	4b15      	ldr	r3, [pc, #84]	; (8006040 <HAL_FLASH_Unlock+0x8c>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	4013      	ands	r3, r2
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d101      	bne.n	8005ff8 <HAL_FLASH_Unlock+0x44>
    {
      return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e01f      	b.n	8006038 <HAL_FLASH_Unlock+0x84>
    }
  }

  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8005ff8:	4b11      	ldr	r3, [pc, #68]	; (8006040 <HAL_FLASH_Unlock+0x8c>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	2202      	movs	r2, #2
 8005ffe:	4013      	ands	r3, r2
 8006000:	2b02      	cmp	r3, #2
 8006002:	d118      	bne.n	8006036 <HAL_FLASH_Unlock+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006004:	f3ef 8310 	mrs	r3, PRIMASK
 8006008:	607b      	str	r3, [r7, #4]
  return(result);
 800600a:	687b      	ldr	r3, [r7, #4]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800600c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800600e:	b672      	cpsid	i
    __disable_irq();

    /* Unlocking the program memory access */
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 8006010:	4b0b      	ldr	r3, [pc, #44]	; (8006040 <HAL_FLASH_Unlock+0x8c>)
 8006012:	4a0e      	ldr	r2, [pc, #56]	; (800604c <HAL_FLASH_Unlock+0x98>)
 8006014:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 8006016:	4b0a      	ldr	r3, [pc, #40]	; (8006040 <HAL_FLASH_Unlock+0x8c>)
 8006018:	4a0d      	ldr	r2, [pc, #52]	; (8006050 <HAL_FLASH_Unlock+0x9c>)
 800601a:	611a      	str	r2, [r3, #16]
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f383 8810 	msr	PRIMASK, r3

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8006026:	4b06      	ldr	r3, [pc, #24]	; (8006040 <HAL_FLASH_Unlock+0x8c>)
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	4013      	ands	r3, r2
 800602e:	2b02      	cmp	r3, #2
 8006030:	d101      	bne.n	8006036 <HAL_FLASH_Unlock+0x82>
    {
      return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e000      	b.n	8006038 <HAL_FLASH_Unlock+0x84>
    }
  }

  return HAL_OK; 
 8006036:	2300      	movs	r3, #0
}
 8006038:	0018      	movs	r0, r3
 800603a:	46bd      	mov	sp, r7
 800603c:	b006      	add	sp, #24
 800603e:	bd80      	pop	{r7, pc}
 8006040:	40022000 	.word	0x40022000
 8006044:	89abcdef 	.word	0x89abcdef
 8006048:	02030405 	.word	0x02030405
 800604c:	8c9daebf 	.word	0x8c9daebf
 8006050:	13141516 	.word	0x13141516

08006054 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	af00      	add	r7, sp, #0
  /* Set the PRGLOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8006058:	4b07      	ldr	r3, [pc, #28]	; (8006078 <HAL_FLASH_Lock+0x24>)
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	4b06      	ldr	r3, [pc, #24]	; (8006078 <HAL_FLASH_Lock+0x24>)
 800605e:	2102      	movs	r1, #2
 8006060:	430a      	orrs	r2, r1
 8006062:	605a      	str	r2, [r3, #4]
  
  /* Set the PELOCK Bit to lock the PECR Register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8006064:	4b04      	ldr	r3, [pc, #16]	; (8006078 <HAL_FLASH_Lock+0x24>)
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	4b03      	ldr	r3, [pc, #12]	; (8006078 <HAL_FLASH_Lock+0x24>)
 800606a:	2101      	movs	r1, #1
 800606c:	430a      	orrs	r2, r1
 800606e:	605a      	str	r2, [r3, #4]

  return HAL_OK;  
 8006070:	2300      	movs	r3, #0
}
 8006072:	0018      	movs	r0, r3
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	40022000 	.word	0x40022000

0800607c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8006084:	f7ff fbc4 	bl	8005810 <HAL_GetTick>
 8006088:	0003      	movs	r3, r0
 800608a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800608c:	e00f      	b.n	80060ae <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	3301      	adds	r3, #1
 8006092:	d00c      	beq.n	80060ae <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d007      	beq.n	80060aa <FLASH_WaitForLastOperation+0x2e>
 800609a:	f7ff fbb9 	bl	8005810 <HAL_GetTick>
 800609e:	0002      	movs	r2, r0
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d201      	bcs.n	80060ae <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e052      	b.n	8006154 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80060ae:	4b2b      	ldr	r3, [pc, #172]	; (800615c <FLASH_WaitForLastOperation+0xe0>)
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	2201      	movs	r2, #1
 80060b4:	4013      	ands	r3, r2
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d0e9      	beq.n	800608e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80060ba:	4b28      	ldr	r3, [pc, #160]	; (800615c <FLASH_WaitForLastOperation+0xe0>)
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	2202      	movs	r2, #2
 80060c0:	4013      	ands	r3, r2
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d102      	bne.n	80060cc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80060c6:	4b25      	ldr	r3, [pc, #148]	; (800615c <FLASH_WaitForLastOperation+0xe0>)
 80060c8:	2202      	movs	r2, #2
 80060ca:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80060cc:	4b23      	ldr	r3, [pc, #140]	; (800615c <FLASH_WaitForLastOperation+0xe0>)
 80060ce:	699a      	ldr	r2, [r3, #24]
 80060d0:	2380      	movs	r3, #128	; 0x80
 80060d2:	005b      	lsls	r3, r3, #1
 80060d4:	401a      	ands	r2, r3
 80060d6:	2380      	movs	r3, #128	; 0x80
 80060d8:	005b      	lsls	r3, r3, #1
 80060da:	429a      	cmp	r2, r3
 80060dc:	d035      	beq.n	800614a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80060de:	4b1f      	ldr	r3, [pc, #124]	; (800615c <FLASH_WaitForLastOperation+0xe0>)
 80060e0:	699a      	ldr	r2, [r3, #24]
 80060e2:	2380      	movs	r3, #128	; 0x80
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80060e8:	2380      	movs	r3, #128	; 0x80
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d02c      	beq.n	800614a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80060f0:	4b1a      	ldr	r3, [pc, #104]	; (800615c <FLASH_WaitForLastOperation+0xe0>)
 80060f2:	699a      	ldr	r2, [r3, #24]
 80060f4:	2380      	movs	r3, #128	; 0x80
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80060fa:	2380      	movs	r3, #128	; 0x80
 80060fc:	00db      	lsls	r3, r3, #3
 80060fe:	429a      	cmp	r2, r3
 8006100:	d023      	beq.n	800614a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8006102:	4b16      	ldr	r3, [pc, #88]	; (800615c <FLASH_WaitForLastOperation+0xe0>)
 8006104:	699a      	ldr	r2, [r3, #24]
 8006106:	2380      	movs	r3, #128	; 0x80
 8006108:	011b      	lsls	r3, r3, #4
 800610a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800610c:	2380      	movs	r3, #128	; 0x80
 800610e:	011b      	lsls	r3, r3, #4
 8006110:	429a      	cmp	r2, r3
 8006112:	d01a      	beq.n	800614a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8006114:	4b11      	ldr	r3, [pc, #68]	; (800615c <FLASH_WaitForLastOperation+0xe0>)
 8006116:	699a      	ldr	r2, [r3, #24]
 8006118:	2380      	movs	r3, #128	; 0x80
 800611a:	019b      	lsls	r3, r3, #6
 800611c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800611e:	2380      	movs	r3, #128	; 0x80
 8006120:	019b      	lsls	r3, r3, #6
 8006122:	429a      	cmp	r2, r3
 8006124:	d011      	beq.n	800614a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8006126:	4b0d      	ldr	r3, [pc, #52]	; (800615c <FLASH_WaitForLastOperation+0xe0>)
 8006128:	699a      	ldr	r2, [r3, #24]
 800612a:	2380      	movs	r3, #128	; 0x80
 800612c:	029b      	lsls	r3, r3, #10
 800612e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8006130:	2380      	movs	r3, #128	; 0x80
 8006132:	029b      	lsls	r3, r3, #10
 8006134:	429a      	cmp	r2, r3
 8006136:	d008      	beq.n	800614a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8006138:	4b08      	ldr	r3, [pc, #32]	; (800615c <FLASH_WaitForLastOperation+0xe0>)
 800613a:	699a      	ldr	r2, [r3, #24]
 800613c:	2380      	movs	r3, #128	; 0x80
 800613e:	025b      	lsls	r3, r3, #9
 8006140:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8006142:	2380      	movs	r3, #128	; 0x80
 8006144:	025b      	lsls	r3, r3, #9
 8006146:	429a      	cmp	r2, r3
 8006148:	d103      	bne.n	8006152 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800614a:	f000 f809 	bl	8006160 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e000      	b.n	8006154 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	0018      	movs	r0, r3
 8006156:	46bd      	mov	sp, r7
 8006158:	b004      	add	sp, #16
 800615a:	bd80      	pop	{r7, pc}
 800615c:	40022000 	.word	0x40022000

08006160 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8006166:	2300      	movs	r3, #0
 8006168:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800616a:	4b49      	ldr	r3, [pc, #292]	; (8006290 <FLASH_SetErrorCode+0x130>)
 800616c:	699a      	ldr	r2, [r3, #24]
 800616e:	2380      	movs	r3, #128	; 0x80
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	401a      	ands	r2, r3
 8006174:	2380      	movs	r3, #128	; 0x80
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	429a      	cmp	r2, r3
 800617a:	d10a      	bne.n	8006192 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800617c:	4b45      	ldr	r3, [pc, #276]	; (8006294 <FLASH_SetErrorCode+0x134>)
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	2202      	movs	r2, #2
 8006182:	431a      	orrs	r2, r3
 8006184:	4b43      	ldr	r3, [pc, #268]	; (8006294 <FLASH_SetErrorCode+0x134>)
 8006186:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2280      	movs	r2, #128	; 0x80
 800618c:	0052      	lsls	r2, r2, #1
 800618e:	4313      	orrs	r3, r2
 8006190:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8006192:	4b3f      	ldr	r3, [pc, #252]	; (8006290 <FLASH_SetErrorCode+0x130>)
 8006194:	699a      	ldr	r2, [r3, #24]
 8006196:	2380      	movs	r3, #128	; 0x80
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	401a      	ands	r2, r3
 800619c:	2380      	movs	r3, #128	; 0x80
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d10a      	bne.n	80061ba <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80061a4:	4b3b      	ldr	r3, [pc, #236]	; (8006294 <FLASH_SetErrorCode+0x134>)
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	2201      	movs	r2, #1
 80061aa:	431a      	orrs	r2, r3
 80061ac:	4b39      	ldr	r3, [pc, #228]	; (8006294 <FLASH_SetErrorCode+0x134>)
 80061ae:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2280      	movs	r2, #128	; 0x80
 80061b4:	0092      	lsls	r2, r2, #2
 80061b6:	4313      	orrs	r3, r2
 80061b8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80061ba:	4b35      	ldr	r3, [pc, #212]	; (8006290 <FLASH_SetErrorCode+0x130>)
 80061bc:	699a      	ldr	r2, [r3, #24]
 80061be:	2380      	movs	r3, #128	; 0x80
 80061c0:	00db      	lsls	r3, r3, #3
 80061c2:	401a      	ands	r2, r3
 80061c4:	2380      	movs	r3, #128	; 0x80
 80061c6:	00db      	lsls	r3, r3, #3
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d10a      	bne.n	80061e2 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80061cc:	4b31      	ldr	r3, [pc, #196]	; (8006294 <FLASH_SetErrorCode+0x134>)
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	2208      	movs	r2, #8
 80061d2:	431a      	orrs	r2, r3
 80061d4:	4b2f      	ldr	r3, [pc, #188]	; (8006294 <FLASH_SetErrorCode+0x134>)
 80061d6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2280      	movs	r2, #128	; 0x80
 80061dc:	00d2      	lsls	r2, r2, #3
 80061de:	4313      	orrs	r3, r2
 80061e0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80061e2:	4b2b      	ldr	r3, [pc, #172]	; (8006290 <FLASH_SetErrorCode+0x130>)
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	2380      	movs	r3, #128	; 0x80
 80061e8:	011b      	lsls	r3, r3, #4
 80061ea:	401a      	ands	r2, r3
 80061ec:	2380      	movs	r3, #128	; 0x80
 80061ee:	011b      	lsls	r3, r3, #4
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d10a      	bne.n	800620a <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80061f4:	4b27      	ldr	r3, [pc, #156]	; (8006294 <FLASH_SetErrorCode+0x134>)
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	2204      	movs	r2, #4
 80061fa:	431a      	orrs	r2, r3
 80061fc:	4b25      	ldr	r3, [pc, #148]	; (8006294 <FLASH_SetErrorCode+0x134>)
 80061fe:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2280      	movs	r2, #128	; 0x80
 8006204:	0112      	lsls	r2, r2, #4
 8006206:	4313      	orrs	r3, r2
 8006208:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800620a:	4b21      	ldr	r3, [pc, #132]	; (8006290 <FLASH_SetErrorCode+0x130>)
 800620c:	699a      	ldr	r2, [r3, #24]
 800620e:	2380      	movs	r3, #128	; 0x80
 8006210:	019b      	lsls	r3, r3, #6
 8006212:	401a      	ands	r2, r3
 8006214:	2380      	movs	r3, #128	; 0x80
 8006216:	019b      	lsls	r3, r3, #6
 8006218:	429a      	cmp	r2, r3
 800621a:	d10a      	bne.n	8006232 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800621c:	4b1d      	ldr	r3, [pc, #116]	; (8006294 <FLASH_SetErrorCode+0x134>)
 800621e:	695b      	ldr	r3, [r3, #20]
 8006220:	2210      	movs	r2, #16
 8006222:	431a      	orrs	r2, r3
 8006224:	4b1b      	ldr	r3, [pc, #108]	; (8006294 <FLASH_SetErrorCode+0x134>)
 8006226:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2280      	movs	r2, #128	; 0x80
 800622c:	0192      	lsls	r2, r2, #6
 800622e:	4313      	orrs	r3, r2
 8006230:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8006232:	4b17      	ldr	r3, [pc, #92]	; (8006290 <FLASH_SetErrorCode+0x130>)
 8006234:	699a      	ldr	r2, [r3, #24]
 8006236:	2380      	movs	r3, #128	; 0x80
 8006238:	029b      	lsls	r3, r3, #10
 800623a:	401a      	ands	r2, r3
 800623c:	2380      	movs	r3, #128	; 0x80
 800623e:	029b      	lsls	r3, r3, #10
 8006240:	429a      	cmp	r2, r3
 8006242:	d109      	bne.n	8006258 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8006244:	4b13      	ldr	r3, [pc, #76]	; (8006294 <FLASH_SetErrorCode+0x134>)
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	2220      	movs	r2, #32
 800624a:	431a      	orrs	r2, r3
 800624c:	4b11      	ldr	r3, [pc, #68]	; (8006294 <FLASH_SetErrorCode+0x134>)
 800624e:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2220      	movs	r2, #32
 8006254:	4313      	orrs	r3, r2
 8006256:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8006258:	4b0d      	ldr	r3, [pc, #52]	; (8006290 <FLASH_SetErrorCode+0x130>)
 800625a:	699a      	ldr	r2, [r3, #24]
 800625c:	2380      	movs	r3, #128	; 0x80
 800625e:	025b      	lsls	r3, r3, #9
 8006260:	401a      	ands	r2, r3
 8006262:	2380      	movs	r3, #128	; 0x80
 8006264:	025b      	lsls	r3, r3, #9
 8006266:	429a      	cmp	r2, r3
 8006268:	d10a      	bne.n	8006280 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800626a:	4b0a      	ldr	r3, [pc, #40]	; (8006294 <FLASH_SetErrorCode+0x134>)
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	2240      	movs	r2, #64	; 0x40
 8006270:	431a      	orrs	r2, r3
 8006272:	4b08      	ldr	r3, [pc, #32]	; (8006294 <FLASH_SetErrorCode+0x134>)
 8006274:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2280      	movs	r2, #128	; 0x80
 800627a:	0252      	lsls	r2, r2, #9
 800627c:	4313      	orrs	r3, r2
 800627e:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006280:	4b03      	ldr	r3, [pc, #12]	; (8006290 <FLASH_SetErrorCode+0x130>)
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	619a      	str	r2, [r3, #24]
}  
 8006286:	46c0      	nop			; (mov r8, r8)
 8006288:	46bd      	mov	sp, r7
 800628a:	b002      	add	sp, #8
 800628c:	bd80      	pop	{r7, pc}
 800628e:	46c0      	nop			; (mov r8, r8)
 8006290:	40022000 	.word	0x40022000
 8006294:	200013dc 	.word	0x200013dc

08006298 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006298:	b5b0      	push	{r4, r5, r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80062a2:	230f      	movs	r3, #15
 80062a4:	18fb      	adds	r3, r7, r3
 80062a6:	2201      	movs	r2, #1
 80062a8:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80062ae:	4b29      	ldr	r3, [pc, #164]	; (8006354 <HAL_FLASHEx_Erase+0xbc>)
 80062b0:	7c1b      	ldrb	r3, [r3, #16]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d101      	bne.n	80062ba <HAL_FLASHEx_Erase+0x22>
 80062b6:	2302      	movs	r3, #2
 80062b8:	e048      	b.n	800634c <HAL_FLASHEx_Erase+0xb4>
 80062ba:	4b26      	ldr	r3, [pc, #152]	; (8006354 <HAL_FLASHEx_Erase+0xbc>)
 80062bc:	2201      	movs	r2, #1
 80062be:	741a      	strb	r2, [r3, #16]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80062c0:	250f      	movs	r5, #15
 80062c2:	197c      	adds	r4, r7, r5
 80062c4:	4b24      	ldr	r3, [pc, #144]	; (8006358 <HAL_FLASHEx_Erase+0xc0>)
 80062c6:	0018      	movs	r0, r3
 80062c8:	f7ff fed8 	bl	800607c <FLASH_WaitForLastOperation>
 80062cc:	0003      	movs	r3, r0
 80062ce:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80062d0:	197b      	adds	r3, r7, r5
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d133      	bne.n	8006340 <HAL_FLASHEx_Erase+0xa8>
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	2201      	movs	r2, #1
 80062dc:	4252      	negs	r2, r2
 80062de:	601a      	str	r2, [r3, #0]
    assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_PROGRAM_ADDRESS((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEraseInit->NbPages * FLASH_PAGE_SIZE - 1U));

    /* Erase page by page to be done*/
    for(address = pEraseInit->PageAddress; 
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	60bb      	str	r3, [r7, #8]
 80062e6:	e022      	b.n	800632e <HAL_FLASHEx_Erase+0x96>
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
        address += FLASH_PAGE_SIZE)
    {
      FLASH_PageErase(address);
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	0018      	movs	r0, r3
 80062ec:	f000 f83a 	bl	8006364 <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80062f0:	250f      	movs	r5, #15
 80062f2:	197c      	adds	r4, r7, r5
 80062f4:	4b18      	ldr	r3, [pc, #96]	; (8006358 <HAL_FLASHEx_Erase+0xc0>)
 80062f6:	0018      	movs	r0, r3
 80062f8:	f7ff fec0 	bl	800607c <FLASH_WaitForLastOperation>
 80062fc:	0003      	movs	r3, r0
 80062fe:	7023      	strb	r3, [r4, #0]

      /* If the erase operation is completed, disable the ERASE Bit */
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8006300:	4b16      	ldr	r3, [pc, #88]	; (800635c <HAL_FLASHEx_Erase+0xc4>)
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	4b15      	ldr	r3, [pc, #84]	; (800635c <HAL_FLASHEx_Erase+0xc4>)
 8006306:	2108      	movs	r1, #8
 8006308:	438a      	bics	r2, r1
 800630a:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 800630c:	4b13      	ldr	r3, [pc, #76]	; (800635c <HAL_FLASHEx_Erase+0xc4>)
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	4b12      	ldr	r3, [pc, #72]	; (800635c <HAL_FLASHEx_Erase+0xc4>)
 8006312:	4913      	ldr	r1, [pc, #76]	; (8006360 <HAL_FLASHEx_Erase+0xc8>)
 8006314:	400a      	ands	r2, r1
 8006316:	605a      	str	r2, [r3, #4]

      if (status != HAL_OK) 
 8006318:	197b      	adds	r3, r7, r5
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <HAL_FLASHEx_Erase+0x90>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = address;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	601a      	str	r2, [r3, #0]
        break;
 8006326:	e00b      	b.n	8006340 <HAL_FLASHEx_Erase+0xa8>
        address += FLASH_PAGE_SIZE)
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	3380      	adds	r3, #128	; 0x80
 800632c:	60bb      	str	r3, [r7, #8]
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	01da      	lsls	r2, r3, #7
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	18d3      	adds	r3, r2, r3
    for(address = pEraseInit->PageAddress; 
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	429a      	cmp	r2, r3
 800633e:	d3d3      	bcc.n	80062e8 <HAL_FLASHEx_Erase+0x50>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006340:	4b04      	ldr	r3, [pc, #16]	; (8006354 <HAL_FLASHEx_Erase+0xbc>)
 8006342:	2200      	movs	r2, #0
 8006344:	741a      	strb	r2, [r3, #16]

  return status;
 8006346:	230f      	movs	r3, #15
 8006348:	18fb      	adds	r3, r7, r3
 800634a:	781b      	ldrb	r3, [r3, #0]
}
 800634c:	0018      	movs	r0, r3
 800634e:	46bd      	mov	sp, r7
 8006350:	b004      	add	sp, #16
 8006352:	bdb0      	pop	{r4, r5, r7, pc}
 8006354:	200013dc 	.word	0x200013dc
 8006358:	0000c350 	.word	0x0000c350
 800635c:	40022000 	.word	0x40022000
 8006360:	fffffdff 	.word	0xfffffdff

08006364 <FLASH_PageErase>:
  * @note   A Page is erased in the Program memory only if the address to load 
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800636c:	4b0c      	ldr	r3, [pc, #48]	; (80063a0 <FLASH_PageErase+0x3c>)
 800636e:	2200      	movs	r2, #0
 8006370:	615a      	str	r2, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8006372:	4b0c      	ldr	r3, [pc, #48]	; (80063a4 <FLASH_PageErase+0x40>)
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <FLASH_PageErase+0x40>)
 8006378:	2180      	movs	r1, #128	; 0x80
 800637a:	0089      	lsls	r1, r1, #2
 800637c:	430a      	orrs	r2, r1
 800637e:	605a      	str	r2, [r3, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8006380:	4b08      	ldr	r3, [pc, #32]	; (80063a4 <FLASH_PageErase+0x40>)
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	4b07      	ldr	r3, [pc, #28]	; (80063a4 <FLASH_PageErase+0x40>)
 8006386:	2108      	movs	r1, #8
 8006388:	430a      	orrs	r2, r1
 800638a:	605a      	str	r2, [r3, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	227f      	movs	r2, #127	; 0x7f
 8006390:	4393      	bics	r3, r2
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]
}
 8006396:	46c0      	nop			; (mov r8, r8)
 8006398:	46bd      	mov	sp, r7
 800639a:	b002      	add	sp, #8
 800639c:	bd80      	pop	{r7, pc}
 800639e:	46c0      	nop			; (mov r8, r8)
 80063a0:	200013dc 	.word	0x200013dc
 80063a4:	40022000 	.word	0x40022000

080063a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80063b6:	2300      	movs	r3, #0
 80063b8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80063ba:	2300      	movs	r3, #0
 80063bc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80063be:	e155      	b.n	800666c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2101      	movs	r1, #1
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	4091      	lsls	r1, r2
 80063ca:	000a      	movs	r2, r1
 80063cc:	4013      	ands	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d100      	bne.n	80063d8 <HAL_GPIO_Init+0x30>
 80063d6:	e146      	b.n	8006666 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	2203      	movs	r2, #3
 80063de:	4013      	ands	r3, r2
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d005      	beq.n	80063f0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	2203      	movs	r2, #3
 80063ea:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d130      	bne.n	8006452 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	2203      	movs	r2, #3
 80063fc:	409a      	lsls	r2, r3
 80063fe:	0013      	movs	r3, r2
 8006400:	43da      	mvns	r2, r3
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	4013      	ands	r3, r2
 8006406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	68da      	ldr	r2, [r3, #12]
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	409a      	lsls	r2, r3
 8006412:	0013      	movs	r3, r2
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	4313      	orrs	r3, r2
 8006418:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006426:	2201      	movs	r2, #1
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	409a      	lsls	r2, r3
 800642c:	0013      	movs	r3, r2
 800642e:	43da      	mvns	r2, r3
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	4013      	ands	r3, r2
 8006434:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	091b      	lsrs	r3, r3, #4
 800643c:	2201      	movs	r2, #1
 800643e:	401a      	ands	r2, r3
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	409a      	lsls	r2, r3
 8006444:	0013      	movs	r3, r2
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	4313      	orrs	r3, r2
 800644a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	2203      	movs	r2, #3
 8006458:	4013      	ands	r3, r2
 800645a:	2b03      	cmp	r3, #3
 800645c:	d017      	beq.n	800648e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	2203      	movs	r2, #3
 800646a:	409a      	lsls	r2, r3
 800646c:	0013      	movs	r3, r2
 800646e:	43da      	mvns	r2, r3
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	4013      	ands	r3, r2
 8006474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	689a      	ldr	r2, [r3, #8]
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	005b      	lsls	r3, r3, #1
 800647e:	409a      	lsls	r2, r3
 8006480:	0013      	movs	r3, r2
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	4313      	orrs	r3, r2
 8006486:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2203      	movs	r2, #3
 8006494:	4013      	ands	r3, r2
 8006496:	2b02      	cmp	r3, #2
 8006498:	d123      	bne.n	80064e2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	08da      	lsrs	r2, r3, #3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	3208      	adds	r2, #8
 80064a2:	0092      	lsls	r2, r2, #2
 80064a4:	58d3      	ldr	r3, [r2, r3]
 80064a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	2207      	movs	r2, #7
 80064ac:	4013      	ands	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	220f      	movs	r2, #15
 80064b2:	409a      	lsls	r2, r3
 80064b4:	0013      	movs	r3, r2
 80064b6:	43da      	mvns	r2, r3
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	4013      	ands	r3, r2
 80064bc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	691a      	ldr	r2, [r3, #16]
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	2107      	movs	r1, #7
 80064c6:	400b      	ands	r3, r1
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	409a      	lsls	r2, r3
 80064cc:	0013      	movs	r3, r2
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	08da      	lsrs	r2, r3, #3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	3208      	adds	r2, #8
 80064dc:	0092      	lsls	r2, r2, #2
 80064de:	6939      	ldr	r1, [r7, #16]
 80064e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	005b      	lsls	r3, r3, #1
 80064ec:	2203      	movs	r2, #3
 80064ee:	409a      	lsls	r2, r3
 80064f0:	0013      	movs	r3, r2
 80064f2:	43da      	mvns	r2, r3
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	4013      	ands	r3, r2
 80064f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	2203      	movs	r2, #3
 8006500:	401a      	ands	r2, r3
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	005b      	lsls	r3, r3, #1
 8006506:	409a      	lsls	r2, r3
 8006508:	0013      	movs	r3, r2
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	4313      	orrs	r3, r2
 800650e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	23c0      	movs	r3, #192	; 0xc0
 800651c:	029b      	lsls	r3, r3, #10
 800651e:	4013      	ands	r3, r2
 8006520:	d100      	bne.n	8006524 <HAL_GPIO_Init+0x17c>
 8006522:	e0a0      	b.n	8006666 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006524:	4b57      	ldr	r3, [pc, #348]	; (8006684 <HAL_GPIO_Init+0x2dc>)
 8006526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006528:	4b56      	ldr	r3, [pc, #344]	; (8006684 <HAL_GPIO_Init+0x2dc>)
 800652a:	2101      	movs	r1, #1
 800652c:	430a      	orrs	r2, r1
 800652e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8006530:	4a55      	ldr	r2, [pc, #340]	; (8006688 <HAL_GPIO_Init+0x2e0>)
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	089b      	lsrs	r3, r3, #2
 8006536:	3302      	adds	r3, #2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	589b      	ldr	r3, [r3, r2]
 800653c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2203      	movs	r2, #3
 8006542:	4013      	ands	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	220f      	movs	r2, #15
 8006548:	409a      	lsls	r2, r3
 800654a:	0013      	movs	r3, r2
 800654c:	43da      	mvns	r2, r3
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	4013      	ands	r3, r2
 8006552:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	23a0      	movs	r3, #160	; 0xa0
 8006558:	05db      	lsls	r3, r3, #23
 800655a:	429a      	cmp	r2, r3
 800655c:	d01f      	beq.n	800659e <HAL_GPIO_Init+0x1f6>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a4a      	ldr	r2, [pc, #296]	; (800668c <HAL_GPIO_Init+0x2e4>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d019      	beq.n	800659a <HAL_GPIO_Init+0x1f2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a49      	ldr	r2, [pc, #292]	; (8006690 <HAL_GPIO_Init+0x2e8>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d013      	beq.n	8006596 <HAL_GPIO_Init+0x1ee>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a48      	ldr	r2, [pc, #288]	; (8006694 <HAL_GPIO_Init+0x2ec>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d00d      	beq.n	8006592 <HAL_GPIO_Init+0x1ea>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a47      	ldr	r2, [pc, #284]	; (8006698 <HAL_GPIO_Init+0x2f0>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d007      	beq.n	800658e <HAL_GPIO_Init+0x1e6>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a46      	ldr	r2, [pc, #280]	; (800669c <HAL_GPIO_Init+0x2f4>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d101      	bne.n	800658a <HAL_GPIO_Init+0x1e2>
 8006586:	2305      	movs	r3, #5
 8006588:	e00a      	b.n	80065a0 <HAL_GPIO_Init+0x1f8>
 800658a:	2306      	movs	r3, #6
 800658c:	e008      	b.n	80065a0 <HAL_GPIO_Init+0x1f8>
 800658e:	2304      	movs	r3, #4
 8006590:	e006      	b.n	80065a0 <HAL_GPIO_Init+0x1f8>
 8006592:	2303      	movs	r3, #3
 8006594:	e004      	b.n	80065a0 <HAL_GPIO_Init+0x1f8>
 8006596:	2302      	movs	r3, #2
 8006598:	e002      	b.n	80065a0 <HAL_GPIO_Init+0x1f8>
 800659a:	2301      	movs	r3, #1
 800659c:	e000      	b.n	80065a0 <HAL_GPIO_Init+0x1f8>
 800659e:	2300      	movs	r3, #0
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	2103      	movs	r1, #3
 80065a4:	400a      	ands	r2, r1
 80065a6:	0092      	lsls	r2, r2, #2
 80065a8:	4093      	lsls	r3, r2
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80065b0:	4935      	ldr	r1, [pc, #212]	; (8006688 <HAL_GPIO_Init+0x2e0>)
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	089b      	lsrs	r3, r3, #2
 80065b6:	3302      	adds	r3, #2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80065be:	4b38      	ldr	r3, [pc, #224]	; (80066a0 <HAL_GPIO_Init+0x2f8>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	43da      	mvns	r2, r3
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	4013      	ands	r3, r2
 80065cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	2380      	movs	r3, #128	; 0x80
 80065d4:	025b      	lsls	r3, r3, #9
 80065d6:	4013      	ands	r3, r2
 80065d8:	d003      	beq.n	80065e2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4313      	orrs	r3, r2
 80065e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80065e2:	4b2f      	ldr	r3, [pc, #188]	; (80066a0 <HAL_GPIO_Init+0x2f8>)
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80065e8:	4b2d      	ldr	r3, [pc, #180]	; (80066a0 <HAL_GPIO_Init+0x2f8>)
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	43da      	mvns	r2, r3
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	4013      	ands	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	2380      	movs	r3, #128	; 0x80
 80065fe:	029b      	lsls	r3, r3, #10
 8006600:	4013      	ands	r3, r2
 8006602:	d003      	beq.n	800660c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4313      	orrs	r3, r2
 800660a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800660c:	4b24      	ldr	r3, [pc, #144]	; (80066a0 <HAL_GPIO_Init+0x2f8>)
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006612:	4b23      	ldr	r3, [pc, #140]	; (80066a0 <HAL_GPIO_Init+0x2f8>)
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	43da      	mvns	r2, r3
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	4013      	ands	r3, r2
 8006620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	2380      	movs	r3, #128	; 0x80
 8006628:	035b      	lsls	r3, r3, #13
 800662a:	4013      	ands	r3, r2
 800662c:	d003      	beq.n	8006636 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4313      	orrs	r3, r2
 8006634:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006636:	4b1a      	ldr	r3, [pc, #104]	; (80066a0 <HAL_GPIO_Init+0x2f8>)
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800663c:	4b18      	ldr	r3, [pc, #96]	; (80066a0 <HAL_GPIO_Init+0x2f8>)
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	43da      	mvns	r2, r3
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	4013      	ands	r3, r2
 800664a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	2380      	movs	r3, #128	; 0x80
 8006652:	039b      	lsls	r3, r3, #14
 8006654:	4013      	ands	r3, r2
 8006656:	d003      	beq.n	8006660 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	4313      	orrs	r3, r2
 800665e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006660:	4b0f      	ldr	r3, [pc, #60]	; (80066a0 <HAL_GPIO_Init+0x2f8>)
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	3301      	adds	r3, #1
 800666a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	40da      	lsrs	r2, r3
 8006674:	1e13      	subs	r3, r2, #0
 8006676:	d000      	beq.n	800667a <HAL_GPIO_Init+0x2d2>
 8006678:	e6a2      	b.n	80063c0 <HAL_GPIO_Init+0x18>
  }
}
 800667a:	46c0      	nop			; (mov r8, r8)
 800667c:	46bd      	mov	sp, r7
 800667e:	b006      	add	sp, #24
 8006680:	bd80      	pop	{r7, pc}
 8006682:	46c0      	nop			; (mov r8, r8)
 8006684:	40021000 	.word	0x40021000
 8006688:	40010000 	.word	0x40010000
 800668c:	50000400 	.word	0x50000400
 8006690:	50000800 	.word	0x50000800
 8006694:	50000c00 	.word	0x50000c00
 8006698:	50001000 	.word	0x50001000
 800669c:	50001c00 	.word	0x50001c00
 80066a0:	40010400 	.word	0x40010400

080066a4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	000a      	movs	r2, r1
 80066ae:	1cbb      	adds	r3, r7, #2
 80066b0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	1cba      	adds	r2, r7, #2
 80066b8:	8812      	ldrh	r2, [r2, #0]
 80066ba:	4013      	ands	r3, r2
 80066bc:	d004      	beq.n	80066c8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80066be:	230f      	movs	r3, #15
 80066c0:	18fb      	adds	r3, r7, r3
 80066c2:	2201      	movs	r2, #1
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	e003      	b.n	80066d0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80066c8:	230f      	movs	r3, #15
 80066ca:	18fb      	adds	r3, r7, r3
 80066cc:	2200      	movs	r2, #0
 80066ce:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80066d0:	230f      	movs	r3, #15
 80066d2:	18fb      	adds	r3, r7, r3
 80066d4:	781b      	ldrb	r3, [r3, #0]
}
 80066d6:	0018      	movs	r0, r3
 80066d8:	46bd      	mov	sp, r7
 80066da:	b004      	add	sp, #16
 80066dc:	bd80      	pop	{r7, pc}

080066de <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b082      	sub	sp, #8
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	0008      	movs	r0, r1
 80066e8:	0011      	movs	r1, r2
 80066ea:	1cbb      	adds	r3, r7, #2
 80066ec:	1c02      	adds	r2, r0, #0
 80066ee:	801a      	strh	r2, [r3, #0]
 80066f0:	1c7b      	adds	r3, r7, #1
 80066f2:	1c0a      	adds	r2, r1, #0
 80066f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80066f6:	1c7b      	adds	r3, r7, #1
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d004      	beq.n	8006708 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80066fe:	1cbb      	adds	r3, r7, #2
 8006700:	881a      	ldrh	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8006706:	e003      	b.n	8006710 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8006708:	1cbb      	adds	r3, r7, #2
 800670a:	881a      	ldrh	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006710:	46c0      	nop			; (mov r8, r8)
 8006712:	46bd      	mov	sp, r7
 8006714:	b002      	add	sp, #8
 8006716:	bd80      	pop	{r7, pc}

08006718 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006718:	b5b0      	push	{r4, r5, r7, lr}
 800671a:	b08a      	sub	sp, #40	; 0x28
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d102      	bne.n	800672c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	f000 fbc2 	bl	8006eb0 <HAL_RCC_OscConfig+0x798>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800672c:	4bca      	ldr	r3, [pc, #808]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	220c      	movs	r2, #12
 8006732:	4013      	ands	r3, r2
 8006734:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006736:	4bc8      	ldr	r3, [pc, #800]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 8006738:	68da      	ldr	r2, [r3, #12]
 800673a:	2380      	movs	r3, #128	; 0x80
 800673c:	025b      	lsls	r3, r3, #9
 800673e:	4013      	ands	r3, r2
 8006740:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2201      	movs	r2, #1
 8006748:	4013      	ands	r3, r2
 800674a:	d100      	bne.n	800674e <HAL_RCC_OscConfig+0x36>
 800674c:	e07e      	b.n	800684c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	2b08      	cmp	r3, #8
 8006752:	d007      	beq.n	8006764 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	2b0c      	cmp	r3, #12
 8006758:	d112      	bne.n	8006780 <HAL_RCC_OscConfig+0x68>
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	2380      	movs	r3, #128	; 0x80
 800675e:	025b      	lsls	r3, r3, #9
 8006760:	429a      	cmp	r2, r3
 8006762:	d10d      	bne.n	8006780 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006764:	4bbc      	ldr	r3, [pc, #752]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	2380      	movs	r3, #128	; 0x80
 800676a:	029b      	lsls	r3, r3, #10
 800676c:	4013      	ands	r3, r2
 800676e:	d100      	bne.n	8006772 <HAL_RCC_OscConfig+0x5a>
 8006770:	e06b      	b.n	800684a <HAL_RCC_OscConfig+0x132>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d167      	bne.n	800684a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	f000 fb98 	bl	8006eb0 <HAL_RCC_OscConfig+0x798>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	2380      	movs	r3, #128	; 0x80
 8006786:	025b      	lsls	r3, r3, #9
 8006788:	429a      	cmp	r2, r3
 800678a:	d107      	bne.n	800679c <HAL_RCC_OscConfig+0x84>
 800678c:	4bb2      	ldr	r3, [pc, #712]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	4bb1      	ldr	r3, [pc, #708]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 8006792:	2180      	movs	r1, #128	; 0x80
 8006794:	0249      	lsls	r1, r1, #9
 8006796:	430a      	orrs	r2, r1
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	e027      	b.n	80067ec <HAL_RCC_OscConfig+0xd4>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685a      	ldr	r2, [r3, #4]
 80067a0:	23a0      	movs	r3, #160	; 0xa0
 80067a2:	02db      	lsls	r3, r3, #11
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d10e      	bne.n	80067c6 <HAL_RCC_OscConfig+0xae>
 80067a8:	4bab      	ldr	r3, [pc, #684]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	4baa      	ldr	r3, [pc, #680]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 80067ae:	2180      	movs	r1, #128	; 0x80
 80067b0:	02c9      	lsls	r1, r1, #11
 80067b2:	430a      	orrs	r2, r1
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	4ba8      	ldr	r3, [pc, #672]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	4ba7      	ldr	r3, [pc, #668]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 80067bc:	2180      	movs	r1, #128	; 0x80
 80067be:	0249      	lsls	r1, r1, #9
 80067c0:	430a      	orrs	r2, r1
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	e012      	b.n	80067ec <HAL_RCC_OscConfig+0xd4>
 80067c6:	4ba4      	ldr	r3, [pc, #656]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	4ba3      	ldr	r3, [pc, #652]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 80067cc:	49a3      	ldr	r1, [pc, #652]	; (8006a5c <HAL_RCC_OscConfig+0x344>)
 80067ce:	400a      	ands	r2, r1
 80067d0:	601a      	str	r2, [r3, #0]
 80067d2:	4ba1      	ldr	r3, [pc, #644]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	2380      	movs	r3, #128	; 0x80
 80067d8:	025b      	lsls	r3, r3, #9
 80067da:	4013      	ands	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	4b9d      	ldr	r3, [pc, #628]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	4b9c      	ldr	r3, [pc, #624]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 80067e6:	499e      	ldr	r1, [pc, #632]	; (8006a60 <HAL_RCC_OscConfig+0x348>)
 80067e8:	400a      	ands	r2, r1
 80067ea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d015      	beq.n	8006820 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067f4:	f7ff f80c 	bl	8005810 <HAL_GetTick>
 80067f8:	0003      	movs	r3, r0
 80067fa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80067fc:	e009      	b.n	8006812 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067fe:	f7ff f807 	bl	8005810 <HAL_GetTick>
 8006802:	0002      	movs	r2, r0
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	2b64      	cmp	r3, #100	; 0x64
 800680a:	d902      	bls.n	8006812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	f000 fb4f 	bl	8006eb0 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006812:	4b91      	ldr	r3, [pc, #580]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	2380      	movs	r3, #128	; 0x80
 8006818:	029b      	lsls	r3, r3, #10
 800681a:	4013      	ands	r3, r2
 800681c:	d0ef      	beq.n	80067fe <HAL_RCC_OscConfig+0xe6>
 800681e:	e015      	b.n	800684c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006820:	f7fe fff6 	bl	8005810 <HAL_GetTick>
 8006824:	0003      	movs	r3, r0
 8006826:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006828:	e008      	b.n	800683c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800682a:	f7fe fff1 	bl	8005810 <HAL_GetTick>
 800682e:	0002      	movs	r2, r0
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	2b64      	cmp	r3, #100	; 0x64
 8006836:	d901      	bls.n	800683c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e339      	b.n	8006eb0 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800683c:	4b86      	ldr	r3, [pc, #536]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	2380      	movs	r3, #128	; 0x80
 8006842:	029b      	lsls	r3, r3, #10
 8006844:	4013      	ands	r3, r2
 8006846:	d1f0      	bne.n	800682a <HAL_RCC_OscConfig+0x112>
 8006848:	e000      	b.n	800684c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800684a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2202      	movs	r2, #2
 8006852:	4013      	ands	r3, r2
 8006854:	d100      	bne.n	8006858 <HAL_RCC_OscConfig+0x140>
 8006856:	e09a      	b.n	800698e <HAL_RCC_OscConfig+0x276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	2220      	movs	r2, #32
 8006862:	4013      	ands	r3, r2
 8006864:	d009      	beq.n	800687a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8006866:	4b7c      	ldr	r3, [pc, #496]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	4b7b      	ldr	r3, [pc, #492]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 800686c:	2120      	movs	r1, #32
 800686e:	430a      	orrs	r2, r1
 8006870:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8006872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006874:	2220      	movs	r2, #32
 8006876:	4393      	bics	r3, r2
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	2b04      	cmp	r3, #4
 800687e:	d005      	beq.n	800688c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	2b0c      	cmp	r3, #12
 8006884:	d13f      	bne.n	8006906 <HAL_RCC_OscConfig+0x1ee>
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d13c      	bne.n	8006906 <HAL_RCC_OscConfig+0x1ee>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800688c:	4b72      	ldr	r3, [pc, #456]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2204      	movs	r2, #4
 8006892:	4013      	ands	r3, r2
 8006894:	d004      	beq.n	80068a0 <HAL_RCC_OscConfig+0x188>
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e307      	b.n	8006eb0 <HAL_RCC_OscConfig+0x798>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068a0:	4b6d      	ldr	r3, [pc, #436]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	4a6f      	ldr	r2, [pc, #444]	; (8006a64 <HAL_RCC_OscConfig+0x34c>)
 80068a6:	4013      	ands	r3, r2
 80068a8:	0019      	movs	r1, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	021a      	lsls	r2, r3, #8
 80068b0:	4b69      	ldr	r3, [pc, #420]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 80068b2:	430a      	orrs	r2, r1
 80068b4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80068b6:	4b68      	ldr	r3, [pc, #416]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2209      	movs	r2, #9
 80068bc:	4393      	bics	r3, r2
 80068be:	0019      	movs	r1, r3
 80068c0:	4b65      	ldr	r3, [pc, #404]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 80068c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c4:	430a      	orrs	r2, r1
 80068c6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80068c8:	f000 fc44 	bl	8007154 <HAL_RCC_GetSysClockFreq>
 80068cc:	0001      	movs	r1, r0
 80068ce:	4b62      	ldr	r3, [pc, #392]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	091b      	lsrs	r3, r3, #4
 80068d4:	220f      	movs	r2, #15
 80068d6:	4013      	ands	r3, r2
 80068d8:	4a63      	ldr	r2, [pc, #396]	; (8006a68 <HAL_RCC_OscConfig+0x350>)
 80068da:	5cd3      	ldrb	r3, [r2, r3]
 80068dc:	000a      	movs	r2, r1
 80068de:	40da      	lsrs	r2, r3
 80068e0:	4b62      	ldr	r3, [pc, #392]	; (8006a6c <HAL_RCC_OscConfig+0x354>)
 80068e2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80068e4:	4b62      	ldr	r3, [pc, #392]	; (8006a70 <HAL_RCC_OscConfig+0x358>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2513      	movs	r5, #19
 80068ea:	197c      	adds	r4, r7, r5
 80068ec:	0018      	movs	r0, r3
 80068ee:	f7fe ff49 	bl	8005784 <HAL_InitTick>
 80068f2:	0003      	movs	r3, r0
 80068f4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80068f6:	197b      	adds	r3, r7, r5
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d047      	beq.n	800698e <HAL_RCC_OscConfig+0x276>
      {
        return status;
 80068fe:	2313      	movs	r3, #19
 8006900:	18fb      	adds	r3, r7, r3
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	e2d4      	b.n	8006eb0 <HAL_RCC_OscConfig+0x798>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006908:	2b00      	cmp	r3, #0
 800690a:	d027      	beq.n	800695c <HAL_RCC_OscConfig+0x244>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800690c:	4b52      	ldr	r3, [pc, #328]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2209      	movs	r2, #9
 8006912:	4393      	bics	r3, r2
 8006914:	0019      	movs	r1, r3
 8006916:	4b50      	ldr	r3, [pc, #320]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 8006918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800691a:	430a      	orrs	r2, r1
 800691c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800691e:	f7fe ff77 	bl	8005810 <HAL_GetTick>
 8006922:	0003      	movs	r3, r0
 8006924:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006926:	e008      	b.n	800693a <HAL_RCC_OscConfig+0x222>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006928:	f7fe ff72 	bl	8005810 <HAL_GetTick>
 800692c:	0002      	movs	r2, r0
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	2b02      	cmp	r3, #2
 8006934:	d901      	bls.n	800693a <HAL_RCC_OscConfig+0x222>
          {
            return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e2ba      	b.n	8006eb0 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800693a:	4b47      	ldr	r3, [pc, #284]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2204      	movs	r2, #4
 8006940:	4013      	ands	r3, r2
 8006942:	d0f1      	beq.n	8006928 <HAL_RCC_OscConfig+0x210>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006944:	4b44      	ldr	r3, [pc, #272]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	4a46      	ldr	r2, [pc, #280]	; (8006a64 <HAL_RCC_OscConfig+0x34c>)
 800694a:	4013      	ands	r3, r2
 800694c:	0019      	movs	r1, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	021a      	lsls	r2, r3, #8
 8006954:	4b40      	ldr	r3, [pc, #256]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 8006956:	430a      	orrs	r2, r1
 8006958:	605a      	str	r2, [r3, #4]
 800695a:	e018      	b.n	800698e <HAL_RCC_OscConfig+0x276>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800695c:	4b3e      	ldr	r3, [pc, #248]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	4b3d      	ldr	r3, [pc, #244]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 8006962:	2101      	movs	r1, #1
 8006964:	438a      	bics	r2, r1
 8006966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006968:	f7fe ff52 	bl	8005810 <HAL_GetTick>
 800696c:	0003      	movs	r3, r0
 800696e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006970:	e008      	b.n	8006984 <HAL_RCC_OscConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006972:	f7fe ff4d 	bl	8005810 <HAL_GetTick>
 8006976:	0002      	movs	r2, r0
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	2b02      	cmp	r3, #2
 800697e:	d901      	bls.n	8006984 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e295      	b.n	8006eb0 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006984:	4b34      	ldr	r3, [pc, #208]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2204      	movs	r2, #4
 800698a:	4013      	ands	r3, r2
 800698c:	d1f1      	bne.n	8006972 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2210      	movs	r2, #16
 8006994:	4013      	ands	r3, r2
 8006996:	d100      	bne.n	800699a <HAL_RCC_OscConfig+0x282>
 8006998:	e0a3      	b.n	8006ae2 <HAL_RCC_OscConfig+0x3ca>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d141      	bne.n	8006a24 <HAL_RCC_OscConfig+0x30c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80069a0:	4b2d      	ldr	r3, [pc, #180]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	2380      	movs	r3, #128	; 0x80
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	4013      	ands	r3, r2
 80069aa:	d005      	beq.n	80069b8 <HAL_RCC_OscConfig+0x2a0>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	69db      	ldr	r3, [r3, #28]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e27b      	b.n	8006eb0 <HAL_RCC_OscConfig+0x798>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80069b8:	4b27      	ldr	r3, [pc, #156]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	4a2d      	ldr	r2, [pc, #180]	; (8006a74 <HAL_RCC_OscConfig+0x35c>)
 80069be:	4013      	ands	r3, r2
 80069c0:	0019      	movs	r1, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069c6:	4b24      	ldr	r3, [pc, #144]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 80069c8:	430a      	orrs	r2, r1
 80069ca:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80069cc:	4b22      	ldr	r3, [pc, #136]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	021b      	lsls	r3, r3, #8
 80069d2:	0a19      	lsrs	r1, r3, #8
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	061a      	lsls	r2, r3, #24
 80069da:	4b1f      	ldr	r3, [pc, #124]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 80069dc:	430a      	orrs	r2, r1
 80069de:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e4:	0b5b      	lsrs	r3, r3, #13
 80069e6:	3301      	adds	r3, #1
 80069e8:	2280      	movs	r2, #128	; 0x80
 80069ea:	0212      	lsls	r2, r2, #8
 80069ec:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80069ee:	4b1a      	ldr	r3, [pc, #104]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	091b      	lsrs	r3, r3, #4
 80069f4:	210f      	movs	r1, #15
 80069f6:	400b      	ands	r3, r1
 80069f8:	491b      	ldr	r1, [pc, #108]	; (8006a68 <HAL_RCC_OscConfig+0x350>)
 80069fa:	5ccb      	ldrb	r3, [r1, r3]
 80069fc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80069fe:	4b1b      	ldr	r3, [pc, #108]	; (8006a6c <HAL_RCC_OscConfig+0x354>)
 8006a00:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8006a02:	4b1b      	ldr	r3, [pc, #108]	; (8006a70 <HAL_RCC_OscConfig+0x358>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2513      	movs	r5, #19
 8006a08:	197c      	adds	r4, r7, r5
 8006a0a:	0018      	movs	r0, r3
 8006a0c:	f7fe feba 	bl	8005784 <HAL_InitTick>
 8006a10:	0003      	movs	r3, r0
 8006a12:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8006a14:	197b      	adds	r3, r7, r5
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d062      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x3ca>
        {
          return status;
 8006a1c:	2313      	movs	r3, #19
 8006a1e:	18fb      	adds	r3, r7, r3
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	e245      	b.n	8006eb0 <HAL_RCC_OscConfig+0x798>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d040      	beq.n	8006aae <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006a2c:	4b0a      	ldr	r3, [pc, #40]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	4b09      	ldr	r3, [pc, #36]	; (8006a58 <HAL_RCC_OscConfig+0x340>)
 8006a32:	2180      	movs	r1, #128	; 0x80
 8006a34:	0049      	lsls	r1, r1, #1
 8006a36:	430a      	orrs	r2, r1
 8006a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a3a:	f7fe fee9 	bl	8005810 <HAL_GetTick>
 8006a3e:	0003      	movs	r3, r0
 8006a40:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006a42:	e019      	b.n	8006a78 <HAL_RCC_OscConfig+0x360>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006a44:	f7fe fee4 	bl	8005810 <HAL_GetTick>
 8006a48:	0002      	movs	r2, r0
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d912      	bls.n	8006a78 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e22c      	b.n	8006eb0 <HAL_RCC_OscConfig+0x798>
 8006a56:	46c0      	nop			; (mov r8, r8)
 8006a58:	40021000 	.word	0x40021000
 8006a5c:	fffeffff 	.word	0xfffeffff
 8006a60:	fffbffff 	.word	0xfffbffff
 8006a64:	ffffe0ff 	.word	0xffffe0ff
 8006a68:	0800eed8 	.word	0x0800eed8
 8006a6c:	2000016c 	.word	0x2000016c
 8006a70:	20000170 	.word	0x20000170
 8006a74:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006a78:	4bc6      	ldr	r3, [pc, #792]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	2380      	movs	r3, #128	; 0x80
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4013      	ands	r3, r2
 8006a82:	d0df      	beq.n	8006a44 <HAL_RCC_OscConfig+0x32c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a84:	4bc3      	ldr	r3, [pc, #780]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	4ac3      	ldr	r2, [pc, #780]	; (8006d98 <HAL_RCC_OscConfig+0x680>)
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	0019      	movs	r1, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a92:	4bc0      	ldr	r3, [pc, #768]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006a94:	430a      	orrs	r2, r1
 8006a96:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a98:	4bbe      	ldr	r3, [pc, #760]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	021b      	lsls	r3, r3, #8
 8006a9e:	0a19      	lsrs	r1, r3, #8
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	061a      	lsls	r2, r3, #24
 8006aa6:	4bbb      	ldr	r3, [pc, #748]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	605a      	str	r2, [r3, #4]
 8006aac:	e019      	b.n	8006ae2 <HAL_RCC_OscConfig+0x3ca>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006aae:	4bb9      	ldr	r3, [pc, #740]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	4bb8      	ldr	r3, [pc, #736]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006ab4:	49b9      	ldr	r1, [pc, #740]	; (8006d9c <HAL_RCC_OscConfig+0x684>)
 8006ab6:	400a      	ands	r2, r1
 8006ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aba:	f7fe fea9 	bl	8005810 <HAL_GetTick>
 8006abe:	0003      	movs	r3, r0
 8006ac0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006ac2:	e008      	b.n	8006ad6 <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ac4:	f7fe fea4 	bl	8005810 <HAL_GetTick>
 8006ac8:	0002      	movs	r2, r0
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d901      	bls.n	8006ad6 <HAL_RCC_OscConfig+0x3be>
          {
            return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e1ec      	b.n	8006eb0 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006ad6:	4baf      	ldr	r3, [pc, #700]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	2380      	movs	r3, #128	; 0x80
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4013      	ands	r3, r2
 8006ae0:	d1f0      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2208      	movs	r2, #8
 8006ae8:	4013      	ands	r3, r2
 8006aea:	d036      	beq.n	8006b5a <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d019      	beq.n	8006b28 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006af4:	4ba7      	ldr	r3, [pc, #668]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006af6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006af8:	4ba6      	ldr	r3, [pc, #664]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006afa:	2101      	movs	r1, #1
 8006afc:	430a      	orrs	r2, r1
 8006afe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b00:	f7fe fe86 	bl	8005810 <HAL_GetTick>
 8006b04:	0003      	movs	r3, r0
 8006b06:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b08:	e008      	b.n	8006b1c <HAL_RCC_OscConfig+0x404>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b0a:	f7fe fe81 	bl	8005810 <HAL_GetTick>
 8006b0e:	0002      	movs	r2, r0
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d901      	bls.n	8006b1c <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e1c9      	b.n	8006eb0 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b1c:	4b9d      	ldr	r3, [pc, #628]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b20:	2202      	movs	r2, #2
 8006b22:	4013      	ands	r3, r2
 8006b24:	d0f1      	beq.n	8006b0a <HAL_RCC_OscConfig+0x3f2>
 8006b26:	e018      	b.n	8006b5a <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b28:	4b9a      	ldr	r3, [pc, #616]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006b2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b2c:	4b99      	ldr	r3, [pc, #612]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006b2e:	2101      	movs	r1, #1
 8006b30:	438a      	bics	r2, r1
 8006b32:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b34:	f7fe fe6c 	bl	8005810 <HAL_GetTick>
 8006b38:	0003      	movs	r3, r0
 8006b3a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b3c:	e008      	b.n	8006b50 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b3e:	f7fe fe67 	bl	8005810 <HAL_GetTick>
 8006b42:	0002      	movs	r2, r0
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d901      	bls.n	8006b50 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e1af      	b.n	8006eb0 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b50:	4b90      	ldr	r3, [pc, #576]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b54:	2202      	movs	r2, #2
 8006b56:	4013      	ands	r3, r2
 8006b58:	d1f1      	bne.n	8006b3e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2204      	movs	r2, #4
 8006b60:	4013      	ands	r3, r2
 8006b62:	d100      	bne.n	8006b66 <HAL_RCC_OscConfig+0x44e>
 8006b64:	e0af      	b.n	8006cc6 <HAL_RCC_OscConfig+0x5ae>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b66:	2323      	movs	r3, #35	; 0x23
 8006b68:	18fb      	adds	r3, r7, r3
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b6e:	4b89      	ldr	r3, [pc, #548]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b72:	2380      	movs	r3, #128	; 0x80
 8006b74:	055b      	lsls	r3, r3, #21
 8006b76:	4013      	ands	r3, r2
 8006b78:	d10a      	bne.n	8006b90 <HAL_RCC_OscConfig+0x478>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b7a:	4b86      	ldr	r3, [pc, #536]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b7e:	4b85      	ldr	r3, [pc, #532]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006b80:	2180      	movs	r1, #128	; 0x80
 8006b82:	0549      	lsls	r1, r1, #21
 8006b84:	430a      	orrs	r2, r1
 8006b86:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006b88:	2323      	movs	r3, #35	; 0x23
 8006b8a:	18fb      	adds	r3, r7, r3
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b90:	4b83      	ldr	r3, [pc, #524]	; (8006da0 <HAL_RCC_OscConfig+0x688>)
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	2380      	movs	r3, #128	; 0x80
 8006b96:	005b      	lsls	r3, r3, #1
 8006b98:	4013      	ands	r3, r2
 8006b9a:	d11a      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b9c:	4b80      	ldr	r3, [pc, #512]	; (8006da0 <HAL_RCC_OscConfig+0x688>)
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	4b7f      	ldr	r3, [pc, #508]	; (8006da0 <HAL_RCC_OscConfig+0x688>)
 8006ba2:	2180      	movs	r1, #128	; 0x80
 8006ba4:	0049      	lsls	r1, r1, #1
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006baa:	f7fe fe31 	bl	8005810 <HAL_GetTick>
 8006bae:	0003      	movs	r3, r0
 8006bb0:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bb2:	e008      	b.n	8006bc6 <HAL_RCC_OscConfig+0x4ae>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bb4:	f7fe fe2c 	bl	8005810 <HAL_GetTick>
 8006bb8:	0002      	movs	r2, r0
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	2b64      	cmp	r3, #100	; 0x64
 8006bc0:	d901      	bls.n	8006bc6 <HAL_RCC_OscConfig+0x4ae>
        {
          return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e174      	b.n	8006eb0 <HAL_RCC_OscConfig+0x798>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bc6:	4b76      	ldr	r3, [pc, #472]	; (8006da0 <HAL_RCC_OscConfig+0x688>)
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	2380      	movs	r3, #128	; 0x80
 8006bcc:	005b      	lsls	r3, r3, #1
 8006bce:	4013      	ands	r3, r2
 8006bd0:	d0f0      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	689a      	ldr	r2, [r3, #8]
 8006bd6:	2380      	movs	r3, #128	; 0x80
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d107      	bne.n	8006bee <HAL_RCC_OscConfig+0x4d6>
 8006bde:	4b6d      	ldr	r3, [pc, #436]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006be0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006be2:	4b6c      	ldr	r3, [pc, #432]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006be4:	2180      	movs	r1, #128	; 0x80
 8006be6:	0049      	lsls	r1, r1, #1
 8006be8:	430a      	orrs	r2, r1
 8006bea:	651a      	str	r2, [r3, #80]	; 0x50
 8006bec:	e031      	b.n	8006c52 <HAL_RCC_OscConfig+0x53a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10c      	bne.n	8006c10 <HAL_RCC_OscConfig+0x4f8>
 8006bf6:	4b67      	ldr	r3, [pc, #412]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006bf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bfa:	4b66      	ldr	r3, [pc, #408]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006bfc:	4967      	ldr	r1, [pc, #412]	; (8006d9c <HAL_RCC_OscConfig+0x684>)
 8006bfe:	400a      	ands	r2, r1
 8006c00:	651a      	str	r2, [r3, #80]	; 0x50
 8006c02:	4b64      	ldr	r3, [pc, #400]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006c04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c06:	4b63      	ldr	r3, [pc, #396]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006c08:	4966      	ldr	r1, [pc, #408]	; (8006da4 <HAL_RCC_OscConfig+0x68c>)
 8006c0a:	400a      	ands	r2, r1
 8006c0c:	651a      	str	r2, [r3, #80]	; 0x50
 8006c0e:	e020      	b.n	8006c52 <HAL_RCC_OscConfig+0x53a>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	23a0      	movs	r3, #160	; 0xa0
 8006c16:	00db      	lsls	r3, r3, #3
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d10e      	bne.n	8006c3a <HAL_RCC_OscConfig+0x522>
 8006c1c:	4b5d      	ldr	r3, [pc, #372]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006c1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c20:	4b5c      	ldr	r3, [pc, #368]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006c22:	2180      	movs	r1, #128	; 0x80
 8006c24:	00c9      	lsls	r1, r1, #3
 8006c26:	430a      	orrs	r2, r1
 8006c28:	651a      	str	r2, [r3, #80]	; 0x50
 8006c2a:	4b5a      	ldr	r3, [pc, #360]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006c2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c2e:	4b59      	ldr	r3, [pc, #356]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006c30:	2180      	movs	r1, #128	; 0x80
 8006c32:	0049      	lsls	r1, r1, #1
 8006c34:	430a      	orrs	r2, r1
 8006c36:	651a      	str	r2, [r3, #80]	; 0x50
 8006c38:	e00b      	b.n	8006c52 <HAL_RCC_OscConfig+0x53a>
 8006c3a:	4b56      	ldr	r3, [pc, #344]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006c3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c3e:	4b55      	ldr	r3, [pc, #340]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006c40:	4956      	ldr	r1, [pc, #344]	; (8006d9c <HAL_RCC_OscConfig+0x684>)
 8006c42:	400a      	ands	r2, r1
 8006c44:	651a      	str	r2, [r3, #80]	; 0x50
 8006c46:	4b53      	ldr	r3, [pc, #332]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006c48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c4a:	4b52      	ldr	r3, [pc, #328]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006c4c:	4955      	ldr	r1, [pc, #340]	; (8006da4 <HAL_RCC_OscConfig+0x68c>)
 8006c4e:	400a      	ands	r2, r1
 8006c50:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d015      	beq.n	8006c86 <HAL_RCC_OscConfig+0x56e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c5a:	f7fe fdd9 	bl	8005810 <HAL_GetTick>
 8006c5e:	0003      	movs	r3, r0
 8006c60:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c62:	e009      	b.n	8006c78 <HAL_RCC_OscConfig+0x560>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c64:	f7fe fdd4 	bl	8005810 <HAL_GetTick>
 8006c68:	0002      	movs	r2, r0
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	4a4e      	ldr	r2, [pc, #312]	; (8006da8 <HAL_RCC_OscConfig+0x690>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d901      	bls.n	8006c78 <HAL_RCC_OscConfig+0x560>
        {
          return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e11b      	b.n	8006eb0 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c78:	4b46      	ldr	r3, [pc, #280]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006c7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c7c:	2380      	movs	r3, #128	; 0x80
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4013      	ands	r3, r2
 8006c82:	d0ef      	beq.n	8006c64 <HAL_RCC_OscConfig+0x54c>
 8006c84:	e014      	b.n	8006cb0 <HAL_RCC_OscConfig+0x598>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c86:	f7fe fdc3 	bl	8005810 <HAL_GetTick>
 8006c8a:	0003      	movs	r3, r0
 8006c8c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006c8e:	e009      	b.n	8006ca4 <HAL_RCC_OscConfig+0x58c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c90:	f7fe fdbe 	bl	8005810 <HAL_GetTick>
 8006c94:	0002      	movs	r2, r0
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	4a43      	ldr	r2, [pc, #268]	; (8006da8 <HAL_RCC_OscConfig+0x690>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d901      	bls.n	8006ca4 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e105      	b.n	8006eb0 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ca4:	4b3b      	ldr	r3, [pc, #236]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006ca6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ca8:	2380      	movs	r3, #128	; 0x80
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4013      	ands	r3, r2
 8006cae:	d1ef      	bne.n	8006c90 <HAL_RCC_OscConfig+0x578>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006cb0:	2323      	movs	r3, #35	; 0x23
 8006cb2:	18fb      	adds	r3, r7, r3
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d105      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x5ae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cba:	4b36      	ldr	r3, [pc, #216]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cbe:	4b35      	ldr	r3, [pc, #212]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006cc0:	493a      	ldr	r1, [pc, #232]	; (8006dac <HAL_RCC_OscConfig+0x694>)
 8006cc2:	400a      	ands	r2, r1
 8006cc4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	4013      	ands	r3, r2
 8006cce:	d049      	beq.n	8006d64 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d026      	beq.n	8006d26 <HAL_RCC_OscConfig+0x60e>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006cd8:	4b2e      	ldr	r3, [pc, #184]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006cda:	689a      	ldr	r2, [r3, #8]
 8006cdc:	4b2d      	ldr	r3, [pc, #180]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006cde:	2101      	movs	r1, #1
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	609a      	str	r2, [r3, #8]
 8006ce4:	4b2b      	ldr	r3, [pc, #172]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006ce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ce8:	4b2a      	ldr	r3, [pc, #168]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006cea:	2101      	movs	r1, #1
 8006cec:	430a      	orrs	r2, r1
 8006cee:	635a      	str	r2, [r3, #52]	; 0x34
 8006cf0:	4b2f      	ldr	r3, [pc, #188]	; (8006db0 <HAL_RCC_OscConfig+0x698>)
 8006cf2:	6a1a      	ldr	r2, [r3, #32]
 8006cf4:	4b2e      	ldr	r3, [pc, #184]	; (8006db0 <HAL_RCC_OscConfig+0x698>)
 8006cf6:	2180      	movs	r1, #128	; 0x80
 8006cf8:	0189      	lsls	r1, r1, #6
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cfe:	f7fe fd87 	bl	8005810 <HAL_GetTick>
 8006d02:	0003      	movs	r3, r0
 8006d04:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d06:	e008      	b.n	8006d1a <HAL_RCC_OscConfig+0x602>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d08:	f7fe fd82 	bl	8005810 <HAL_GetTick>
 8006d0c:	0002      	movs	r2, r0
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d901      	bls.n	8006d1a <HAL_RCC_OscConfig+0x602>
          {
            return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e0ca      	b.n	8006eb0 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d1a:	4b1e      	ldr	r3, [pc, #120]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	2202      	movs	r2, #2
 8006d20:	4013      	ands	r3, r2
 8006d22:	d0f1      	beq.n	8006d08 <HAL_RCC_OscConfig+0x5f0>
 8006d24:	e01e      	b.n	8006d64 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8006d26:	4b1b      	ldr	r3, [pc, #108]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006d28:	689a      	ldr	r2, [r3, #8]
 8006d2a:	4b1a      	ldr	r3, [pc, #104]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	438a      	bics	r2, r1
 8006d30:	609a      	str	r2, [r3, #8]
 8006d32:	4b1f      	ldr	r3, [pc, #124]	; (8006db0 <HAL_RCC_OscConfig+0x698>)
 8006d34:	6a1a      	ldr	r2, [r3, #32]
 8006d36:	4b1e      	ldr	r3, [pc, #120]	; (8006db0 <HAL_RCC_OscConfig+0x698>)
 8006d38:	491e      	ldr	r1, [pc, #120]	; (8006db4 <HAL_RCC_OscConfig+0x69c>)
 8006d3a:	400a      	ands	r2, r1
 8006d3c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d3e:	f7fe fd67 	bl	8005810 <HAL_GetTick>
 8006d42:	0003      	movs	r3, r0
 8006d44:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d46:	e008      	b.n	8006d5a <HAL_RCC_OscConfig+0x642>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d48:	f7fe fd62 	bl	8005810 <HAL_GetTick>
 8006d4c:	0002      	movs	r2, r0
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d901      	bls.n	8006d5a <HAL_RCC_OscConfig+0x642>
          {
            return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e0aa      	b.n	8006eb0 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d5a:	4b0e      	ldr	r3, [pc, #56]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	4013      	ands	r3, r2
 8006d62:	d1f1      	bne.n	8006d48 <HAL_RCC_OscConfig+0x630>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d100      	bne.n	8006d6e <HAL_RCC_OscConfig+0x656>
 8006d6c:	e09f      	b.n	8006eae <HAL_RCC_OscConfig+0x796>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	2b0c      	cmp	r3, #12
 8006d72:	d100      	bne.n	8006d76 <HAL_RCC_OscConfig+0x65e>
 8006d74:	e078      	b.n	8006e68 <HAL_RCC_OscConfig+0x750>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d159      	bne.n	8006e32 <HAL_RCC_OscConfig+0x71a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d7e:	4b05      	ldr	r3, [pc, #20]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	4b04      	ldr	r3, [pc, #16]	; (8006d94 <HAL_RCC_OscConfig+0x67c>)
 8006d84:	490c      	ldr	r1, [pc, #48]	; (8006db8 <HAL_RCC_OscConfig+0x6a0>)
 8006d86:	400a      	ands	r2, r1
 8006d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d8a:	f7fe fd41 	bl	8005810 <HAL_GetTick>
 8006d8e:	0003      	movs	r3, r0
 8006d90:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006d92:	e01c      	b.n	8006dce <HAL_RCC_OscConfig+0x6b6>
 8006d94:	40021000 	.word	0x40021000
 8006d98:	ffff1fff 	.word	0xffff1fff
 8006d9c:	fffffeff 	.word	0xfffffeff
 8006da0:	40007000 	.word	0x40007000
 8006da4:	fffffbff 	.word	0xfffffbff
 8006da8:	00001388 	.word	0x00001388
 8006dac:	efffffff 	.word	0xefffffff
 8006db0:	40010000 	.word	0x40010000
 8006db4:	ffffdfff 	.word	0xffffdfff
 8006db8:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dbc:	f7fe fd28 	bl	8005810 <HAL_GetTick>
 8006dc0:	0002      	movs	r2, r0
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e070      	b.n	8006eb0 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006dce:	4b3a      	ldr	r3, [pc, #232]	; (8006eb8 <HAL_RCC_OscConfig+0x7a0>)
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	2380      	movs	r3, #128	; 0x80
 8006dd4:	049b      	lsls	r3, r3, #18
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	d1f0      	bne.n	8006dbc <HAL_RCC_OscConfig+0x6a4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006dda:	4b37      	ldr	r3, [pc, #220]	; (8006eb8 <HAL_RCC_OscConfig+0x7a0>)
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	4a37      	ldr	r2, [pc, #220]	; (8006ebc <HAL_RCC_OscConfig+0x7a4>)
 8006de0:	4013      	ands	r3, r2
 8006de2:	0019      	movs	r1, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dec:	431a      	orrs	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df2:	431a      	orrs	r2, r3
 8006df4:	4b30      	ldr	r3, [pc, #192]	; (8006eb8 <HAL_RCC_OscConfig+0x7a0>)
 8006df6:	430a      	orrs	r2, r1
 8006df8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dfa:	4b2f      	ldr	r3, [pc, #188]	; (8006eb8 <HAL_RCC_OscConfig+0x7a0>)
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	4b2e      	ldr	r3, [pc, #184]	; (8006eb8 <HAL_RCC_OscConfig+0x7a0>)
 8006e00:	2180      	movs	r1, #128	; 0x80
 8006e02:	0449      	lsls	r1, r1, #17
 8006e04:	430a      	orrs	r2, r1
 8006e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e08:	f7fe fd02 	bl	8005810 <HAL_GetTick>
 8006e0c:	0003      	movs	r3, r0
 8006e0e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006e10:	e008      	b.n	8006e24 <HAL_RCC_OscConfig+0x70c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e12:	f7fe fcfd 	bl	8005810 <HAL_GetTick>
 8006e16:	0002      	movs	r2, r0
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d901      	bls.n	8006e24 <HAL_RCC_OscConfig+0x70c>
          {
            return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e045      	b.n	8006eb0 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006e24:	4b24      	ldr	r3, [pc, #144]	; (8006eb8 <HAL_RCC_OscConfig+0x7a0>)
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	2380      	movs	r3, #128	; 0x80
 8006e2a:	049b      	lsls	r3, r3, #18
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	d0f0      	beq.n	8006e12 <HAL_RCC_OscConfig+0x6fa>
 8006e30:	e03d      	b.n	8006eae <HAL_RCC_OscConfig+0x796>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e32:	4b21      	ldr	r3, [pc, #132]	; (8006eb8 <HAL_RCC_OscConfig+0x7a0>)
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	4b20      	ldr	r3, [pc, #128]	; (8006eb8 <HAL_RCC_OscConfig+0x7a0>)
 8006e38:	4921      	ldr	r1, [pc, #132]	; (8006ec0 <HAL_RCC_OscConfig+0x7a8>)
 8006e3a:	400a      	ands	r2, r1
 8006e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e3e:	f7fe fce7 	bl	8005810 <HAL_GetTick>
 8006e42:	0003      	movs	r3, r0
 8006e44:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006e46:	e008      	b.n	8006e5a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e48:	f7fe fce2 	bl	8005810 <HAL_GetTick>
 8006e4c:	0002      	movs	r2, r0
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d901      	bls.n	8006e5a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e02a      	b.n	8006eb0 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006e5a:	4b17      	ldr	r3, [pc, #92]	; (8006eb8 <HAL_RCC_OscConfig+0x7a0>)
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	2380      	movs	r3, #128	; 0x80
 8006e60:	049b      	lsls	r3, r3, #18
 8006e62:	4013      	ands	r3, r2
 8006e64:	d1f0      	bne.n	8006e48 <HAL_RCC_OscConfig+0x730>
 8006e66:	e022      	b.n	8006eae <HAL_RCC_OscConfig+0x796>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d101      	bne.n	8006e74 <HAL_RCC_OscConfig+0x75c>
      {
        return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e01d      	b.n	8006eb0 <HAL_RCC_OscConfig+0x798>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006e74:	4b10      	ldr	r3, [pc, #64]	; (8006eb8 <HAL_RCC_OscConfig+0x7a0>)
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e7a:	69ba      	ldr	r2, [r7, #24]
 8006e7c:	2380      	movs	r3, #128	; 0x80
 8006e7e:	025b      	lsls	r3, r3, #9
 8006e80:	401a      	ands	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d10f      	bne.n	8006eaa <HAL_RCC_OscConfig+0x792>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006e8a:	69ba      	ldr	r2, [r7, #24]
 8006e8c:	23f0      	movs	r3, #240	; 0xf0
 8006e8e:	039b      	lsls	r3, r3, #14
 8006e90:	401a      	ands	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d107      	bne.n	8006eaa <HAL_RCC_OscConfig+0x792>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	23c0      	movs	r3, #192	; 0xc0
 8006e9e:	041b      	lsls	r3, r3, #16
 8006ea0:	401a      	ands	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d001      	beq.n	8006eae <HAL_RCC_OscConfig+0x796>
        {
          return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e000      	b.n	8006eb0 <HAL_RCC_OscConfig+0x798>
        }
      }
    }
  }
  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	0018      	movs	r0, r3
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	b00a      	add	sp, #40	; 0x28
 8006eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8006eb8:	40021000 	.word	0x40021000
 8006ebc:	ff02ffff 	.word	0xff02ffff
 8006ec0:	feffffff 	.word	0xfeffffff

08006ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ec4:	b5b0      	push	{r4, r5, r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e129      	b.n	800712c <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ed8:	4b96      	ldr	r3, [pc, #600]	; (8007134 <HAL_RCC_ClockConfig+0x270>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2201      	movs	r2, #1
 8006ede:	4013      	ands	r3, r2
 8006ee0:	683a      	ldr	r2, [r7, #0]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d91e      	bls.n	8006f24 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ee6:	4b93      	ldr	r3, [pc, #588]	; (8007134 <HAL_RCC_ClockConfig+0x270>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2201      	movs	r2, #1
 8006eec:	4393      	bics	r3, r2
 8006eee:	0019      	movs	r1, r3
 8006ef0:	4b90      	ldr	r3, [pc, #576]	; (8007134 <HAL_RCC_ClockConfig+0x270>)
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006ef8:	f7fe fc8a 	bl	8005810 <HAL_GetTick>
 8006efc:	0003      	movs	r3, r0
 8006efe:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f00:	e009      	b.n	8006f16 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f02:	f7fe fc85 	bl	8005810 <HAL_GetTick>
 8006f06:	0002      	movs	r2, r0
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	4a8a      	ldr	r2, [pc, #552]	; (8007138 <HAL_RCC_ClockConfig+0x274>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e10a      	b.n	800712c <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f16:	4b87      	ldr	r3, [pc, #540]	; (8007134 <HAL_RCC_ClockConfig+0x270>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d1ee      	bne.n	8006f02 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2202      	movs	r2, #2
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	d009      	beq.n	8006f42 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f2e:	4b83      	ldr	r3, [pc, #524]	; (800713c <HAL_RCC_ClockConfig+0x278>)
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	22f0      	movs	r2, #240	; 0xf0
 8006f34:	4393      	bics	r3, r2
 8006f36:	0019      	movs	r1, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	689a      	ldr	r2, [r3, #8]
 8006f3c:	4b7f      	ldr	r3, [pc, #508]	; (800713c <HAL_RCC_ClockConfig+0x278>)
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2201      	movs	r2, #1
 8006f48:	4013      	ands	r3, r2
 8006f4a:	d100      	bne.n	8006f4e <HAL_RCC_ClockConfig+0x8a>
 8006f4c:	e089      	b.n	8007062 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d107      	bne.n	8006f66 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f56:	4b79      	ldr	r3, [pc, #484]	; (800713c <HAL_RCC_ClockConfig+0x278>)
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	2380      	movs	r3, #128	; 0x80
 8006f5c:	029b      	lsls	r3, r3, #10
 8006f5e:	4013      	ands	r3, r2
 8006f60:	d120      	bne.n	8006fa4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e0e2      	b.n	800712c <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	d107      	bne.n	8006f7e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f6e:	4b73      	ldr	r3, [pc, #460]	; (800713c <HAL_RCC_ClockConfig+0x278>)
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	2380      	movs	r3, #128	; 0x80
 8006f74:	049b      	lsls	r3, r3, #18
 8006f76:	4013      	ands	r3, r2
 8006f78:	d114      	bne.n	8006fa4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e0d6      	b.n	800712c <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d106      	bne.n	8006f94 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f86:	4b6d      	ldr	r3, [pc, #436]	; (800713c <HAL_RCC_ClockConfig+0x278>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2204      	movs	r2, #4
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	d109      	bne.n	8006fa4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e0cb      	b.n	800712c <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006f94:	4b69      	ldr	r3, [pc, #420]	; (800713c <HAL_RCC_ClockConfig+0x278>)
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	2380      	movs	r3, #128	; 0x80
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	d101      	bne.n	8006fa4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e0c3      	b.n	800712c <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fa4:	4b65      	ldr	r3, [pc, #404]	; (800713c <HAL_RCC_ClockConfig+0x278>)
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	2203      	movs	r2, #3
 8006faa:	4393      	bics	r3, r2
 8006fac:	0019      	movs	r1, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	4b62      	ldr	r3, [pc, #392]	; (800713c <HAL_RCC_ClockConfig+0x278>)
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006fb8:	f7fe fc2a 	bl	8005810 <HAL_GetTick>
 8006fbc:	0003      	movs	r3, r0
 8006fbe:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d111      	bne.n	8006fec <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006fc8:	e009      	b.n	8006fde <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fca:	f7fe fc21 	bl	8005810 <HAL_GetTick>
 8006fce:	0002      	movs	r2, r0
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	4a58      	ldr	r2, [pc, #352]	; (8007138 <HAL_RCC_ClockConfig+0x274>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d901      	bls.n	8006fde <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e0a6      	b.n	800712c <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006fde:	4b57      	ldr	r3, [pc, #348]	; (800713c <HAL_RCC_ClockConfig+0x278>)
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	220c      	movs	r2, #12
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	2b08      	cmp	r3, #8
 8006fe8:	d1ef      	bne.n	8006fca <HAL_RCC_ClockConfig+0x106>
 8006fea:	e03a      	b.n	8007062 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	d111      	bne.n	8007018 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ff4:	e009      	b.n	800700a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ff6:	f7fe fc0b 	bl	8005810 <HAL_GetTick>
 8006ffa:	0002      	movs	r2, r0
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	4a4d      	ldr	r2, [pc, #308]	; (8007138 <HAL_RCC_ClockConfig+0x274>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d901      	bls.n	800700a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e090      	b.n	800712c <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800700a:	4b4c      	ldr	r3, [pc, #304]	; (800713c <HAL_RCC_ClockConfig+0x278>)
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	220c      	movs	r2, #12
 8007010:	4013      	ands	r3, r2
 8007012:	2b0c      	cmp	r3, #12
 8007014:	d1ef      	bne.n	8006ff6 <HAL_RCC_ClockConfig+0x132>
 8007016:	e024      	b.n	8007062 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d11b      	bne.n	8007058 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007020:	e009      	b.n	8007036 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007022:	f7fe fbf5 	bl	8005810 <HAL_GetTick>
 8007026:	0002      	movs	r2, r0
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	4a42      	ldr	r2, [pc, #264]	; (8007138 <HAL_RCC_ClockConfig+0x274>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d901      	bls.n	8007036 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e07a      	b.n	800712c <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007036:	4b41      	ldr	r3, [pc, #260]	; (800713c <HAL_RCC_ClockConfig+0x278>)
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	220c      	movs	r2, #12
 800703c:	4013      	ands	r3, r2
 800703e:	2b04      	cmp	r3, #4
 8007040:	d1ef      	bne.n	8007022 <HAL_RCC_ClockConfig+0x15e>
 8007042:	e00e      	b.n	8007062 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007044:	f7fe fbe4 	bl	8005810 <HAL_GetTick>
 8007048:	0002      	movs	r2, r0
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	4a3a      	ldr	r2, [pc, #232]	; (8007138 <HAL_RCC_ClockConfig+0x274>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d901      	bls.n	8007058 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e069      	b.n	800712c <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007058:	4b38      	ldr	r3, [pc, #224]	; (800713c <HAL_RCC_ClockConfig+0x278>)
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	220c      	movs	r2, #12
 800705e:	4013      	ands	r3, r2
 8007060:	d1f0      	bne.n	8007044 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007062:	4b34      	ldr	r3, [pc, #208]	; (8007134 <HAL_RCC_ClockConfig+0x270>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2201      	movs	r2, #1
 8007068:	4013      	ands	r3, r2
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	429a      	cmp	r2, r3
 800706e:	d21e      	bcs.n	80070ae <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007070:	4b30      	ldr	r3, [pc, #192]	; (8007134 <HAL_RCC_ClockConfig+0x270>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2201      	movs	r2, #1
 8007076:	4393      	bics	r3, r2
 8007078:	0019      	movs	r1, r3
 800707a:	4b2e      	ldr	r3, [pc, #184]	; (8007134 <HAL_RCC_ClockConfig+0x270>)
 800707c:	683a      	ldr	r2, [r7, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007082:	f7fe fbc5 	bl	8005810 <HAL_GetTick>
 8007086:	0003      	movs	r3, r0
 8007088:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800708a:	e009      	b.n	80070a0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800708c:	f7fe fbc0 	bl	8005810 <HAL_GetTick>
 8007090:	0002      	movs	r2, r0
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	4a28      	ldr	r2, [pc, #160]	; (8007138 <HAL_RCC_ClockConfig+0x274>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d901      	bls.n	80070a0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e045      	b.n	800712c <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070a0:	4b24      	ldr	r3, [pc, #144]	; (8007134 <HAL_RCC_ClockConfig+0x270>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2201      	movs	r2, #1
 80070a6:	4013      	ands	r3, r2
 80070a8:	683a      	ldr	r2, [r7, #0]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d1ee      	bne.n	800708c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2204      	movs	r2, #4
 80070b4:	4013      	ands	r3, r2
 80070b6:	d009      	beq.n	80070cc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070b8:	4b20      	ldr	r3, [pc, #128]	; (800713c <HAL_RCC_ClockConfig+0x278>)
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	4a20      	ldr	r2, [pc, #128]	; (8007140 <HAL_RCC_ClockConfig+0x27c>)
 80070be:	4013      	ands	r3, r2
 80070c0:	0019      	movs	r1, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68da      	ldr	r2, [r3, #12]
 80070c6:	4b1d      	ldr	r3, [pc, #116]	; (800713c <HAL_RCC_ClockConfig+0x278>)
 80070c8:	430a      	orrs	r2, r1
 80070ca:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2208      	movs	r2, #8
 80070d2:	4013      	ands	r3, r2
 80070d4:	d00a      	beq.n	80070ec <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80070d6:	4b19      	ldr	r3, [pc, #100]	; (800713c <HAL_RCC_ClockConfig+0x278>)
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	4a1a      	ldr	r2, [pc, #104]	; (8007144 <HAL_RCC_ClockConfig+0x280>)
 80070dc:	4013      	ands	r3, r2
 80070de:	0019      	movs	r1, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	00da      	lsls	r2, r3, #3
 80070e6:	4b15      	ldr	r3, [pc, #84]	; (800713c <HAL_RCC_ClockConfig+0x278>)
 80070e8:	430a      	orrs	r2, r1
 80070ea:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80070ec:	f000 f832 	bl	8007154 <HAL_RCC_GetSysClockFreq>
 80070f0:	0001      	movs	r1, r0
 80070f2:	4b12      	ldr	r3, [pc, #72]	; (800713c <HAL_RCC_ClockConfig+0x278>)
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	091b      	lsrs	r3, r3, #4
 80070f8:	220f      	movs	r2, #15
 80070fa:	4013      	ands	r3, r2
 80070fc:	4a12      	ldr	r2, [pc, #72]	; (8007148 <HAL_RCC_ClockConfig+0x284>)
 80070fe:	5cd3      	ldrb	r3, [r2, r3]
 8007100:	000a      	movs	r2, r1
 8007102:	40da      	lsrs	r2, r3
 8007104:	4b11      	ldr	r3, [pc, #68]	; (800714c <HAL_RCC_ClockConfig+0x288>)
 8007106:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007108:	4b11      	ldr	r3, [pc, #68]	; (8007150 <HAL_RCC_ClockConfig+0x28c>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	250b      	movs	r5, #11
 800710e:	197c      	adds	r4, r7, r5
 8007110:	0018      	movs	r0, r3
 8007112:	f7fe fb37 	bl	8005784 <HAL_InitTick>
 8007116:	0003      	movs	r3, r0
 8007118:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800711a:	197b      	adds	r3, r7, r5
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d003      	beq.n	800712a <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 8007122:	230b      	movs	r3, #11
 8007124:	18fb      	adds	r3, r7, r3
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	e000      	b.n	800712c <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	0018      	movs	r0, r3
 800712e:	46bd      	mov	sp, r7
 8007130:	b004      	add	sp, #16
 8007132:	bdb0      	pop	{r4, r5, r7, pc}
 8007134:	40022000 	.word	0x40022000
 8007138:	00001388 	.word	0x00001388
 800713c:	40021000 	.word	0x40021000
 8007140:	fffff8ff 	.word	0xfffff8ff
 8007144:	ffffc7ff 	.word	0xffffc7ff
 8007148:	0800eed8 	.word	0x0800eed8
 800714c:	2000016c 	.word	0x2000016c
 8007150:	20000170 	.word	0x20000170

08007154 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007156:	b08f      	sub	sp, #60	; 0x3c
 8007158:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800715a:	4b4a      	ldr	r3, [pc, #296]	; (8007284 <HAL_RCC_GetSysClockFreq+0x130>)
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007162:	230c      	movs	r3, #12
 8007164:	4013      	ands	r3, r2
 8007166:	2b08      	cmp	r3, #8
 8007168:	d00f      	beq.n	800718a <HAL_RCC_GetSysClockFreq+0x36>
 800716a:	2b0c      	cmp	r3, #12
 800716c:	d010      	beq.n	8007190 <HAL_RCC_GetSysClockFreq+0x3c>
 800716e:	2b04      	cmp	r3, #4
 8007170:	d000      	beq.n	8007174 <HAL_RCC_GetSysClockFreq+0x20>
 8007172:	e073      	b.n	800725c <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8007174:	4b43      	ldr	r3, [pc, #268]	; (8007284 <HAL_RCC_GetSysClockFreq+0x130>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2210      	movs	r2, #16
 800717a:	4013      	ands	r3, r2
 800717c:	d002      	beq.n	8007184 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800717e:	4b42      	ldr	r3, [pc, #264]	; (8007288 <HAL_RCC_GetSysClockFreq+0x134>)
 8007180:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8007182:	e079      	b.n	8007278 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8007184:	4b41      	ldr	r3, [pc, #260]	; (800728c <HAL_RCC_GetSysClockFreq+0x138>)
 8007186:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007188:	e076      	b.n	8007278 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800718a:	4b41      	ldr	r3, [pc, #260]	; (8007290 <HAL_RCC_GetSysClockFreq+0x13c>)
 800718c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800718e:	e073      	b.n	8007278 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007192:	0c9a      	lsrs	r2, r3, #18
 8007194:	230f      	movs	r3, #15
 8007196:	401a      	ands	r2, r3
 8007198:	4b3e      	ldr	r3, [pc, #248]	; (8007294 <HAL_RCC_GetSysClockFreq+0x140>)
 800719a:	5c9b      	ldrb	r3, [r3, r2]
 800719c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	0d9a      	lsrs	r2, r3, #22
 80071a2:	2303      	movs	r3, #3
 80071a4:	4013      	ands	r3, r2
 80071a6:	3301      	adds	r3, #1
 80071a8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071aa:	4b36      	ldr	r3, [pc, #216]	; (8007284 <HAL_RCC_GetSysClockFreq+0x130>)
 80071ac:	68da      	ldr	r2, [r3, #12]
 80071ae:	2380      	movs	r3, #128	; 0x80
 80071b0:	025b      	lsls	r3, r3, #9
 80071b2:	4013      	ands	r3, r2
 80071b4:	d019      	beq.n	80071ea <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80071b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b8:	61bb      	str	r3, [r7, #24]
 80071ba:	2300      	movs	r3, #0
 80071bc:	61fb      	str	r3, [r7, #28]
 80071be:	4a34      	ldr	r2, [pc, #208]	; (8007290 <HAL_RCC_GetSysClockFreq+0x13c>)
 80071c0:	2300      	movs	r3, #0
 80071c2:	69b8      	ldr	r0, [r7, #24]
 80071c4:	69f9      	ldr	r1, [r7, #28]
 80071c6:	f7f9 f989 	bl	80004dc <__aeabi_lmul>
 80071ca:	0003      	movs	r3, r0
 80071cc:	000c      	movs	r4, r1
 80071ce:	0018      	movs	r0, r3
 80071d0:	0021      	movs	r1, r4
 80071d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d4:	613b      	str	r3, [r7, #16]
 80071d6:	2300      	movs	r3, #0
 80071d8:	617b      	str	r3, [r7, #20]
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	f7f9 f95d 	bl	800049c <__aeabi_uldivmod>
 80071e2:	0003      	movs	r3, r0
 80071e4:	000c      	movs	r4, r1
 80071e6:	637b      	str	r3, [r7, #52]	; 0x34
 80071e8:	e035      	b.n	8007256 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80071ea:	4b26      	ldr	r3, [pc, #152]	; (8007284 <HAL_RCC_GetSysClockFreq+0x130>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2210      	movs	r2, #16
 80071f0:	4013      	ands	r3, r2
 80071f2:	d019      	beq.n	8007228 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80071f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f6:	60bb      	str	r3, [r7, #8]
 80071f8:	2300      	movs	r3, #0
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	4a22      	ldr	r2, [pc, #136]	; (8007288 <HAL_RCC_GetSysClockFreq+0x134>)
 80071fe:	2300      	movs	r3, #0
 8007200:	68b8      	ldr	r0, [r7, #8]
 8007202:	68f9      	ldr	r1, [r7, #12]
 8007204:	f7f9 f96a 	bl	80004dc <__aeabi_lmul>
 8007208:	0003      	movs	r3, r0
 800720a:	000c      	movs	r4, r1
 800720c:	0018      	movs	r0, r3
 800720e:	0021      	movs	r1, r4
 8007210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007212:	603b      	str	r3, [r7, #0]
 8007214:	2300      	movs	r3, #0
 8007216:	607b      	str	r3, [r7, #4]
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f7f9 f93e 	bl	800049c <__aeabi_uldivmod>
 8007220:	0003      	movs	r3, r0
 8007222:	000c      	movs	r4, r1
 8007224:	637b      	str	r3, [r7, #52]	; 0x34
 8007226:	e016      	b.n	8007256 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722a:	0018      	movs	r0, r3
 800722c:	2300      	movs	r3, #0
 800722e:	0019      	movs	r1, r3
 8007230:	4a16      	ldr	r2, [pc, #88]	; (800728c <HAL_RCC_GetSysClockFreq+0x138>)
 8007232:	2300      	movs	r3, #0
 8007234:	f7f9 f952 	bl	80004dc <__aeabi_lmul>
 8007238:	0003      	movs	r3, r0
 800723a:	000c      	movs	r4, r1
 800723c:	0018      	movs	r0, r3
 800723e:	0021      	movs	r1, r4
 8007240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007242:	001d      	movs	r5, r3
 8007244:	2300      	movs	r3, #0
 8007246:	001e      	movs	r6, r3
 8007248:	002a      	movs	r2, r5
 800724a:	0033      	movs	r3, r6
 800724c:	f7f9 f926 	bl	800049c <__aeabi_uldivmod>
 8007250:	0003      	movs	r3, r0
 8007252:	000c      	movs	r4, r1
 8007254:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8007256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007258:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800725a:	e00d      	b.n	8007278 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800725c:	4b09      	ldr	r3, [pc, #36]	; (8007284 <HAL_RCC_GetSysClockFreq+0x130>)
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	0b5b      	lsrs	r3, r3, #13
 8007262:	2207      	movs	r2, #7
 8007264:	4013      	ands	r3, r2
 8007266:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	3301      	adds	r3, #1
 800726c:	2280      	movs	r2, #128	; 0x80
 800726e:	0212      	lsls	r2, r2, #8
 8007270:	409a      	lsls	r2, r3
 8007272:	0013      	movs	r3, r2
 8007274:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007276:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8007278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800727a:	0018      	movs	r0, r3
 800727c:	46bd      	mov	sp, r7
 800727e:	b00f      	add	sp, #60	; 0x3c
 8007280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007282:	46c0      	nop			; (mov r8, r8)
 8007284:	40021000 	.word	0x40021000
 8007288:	003d0900 	.word	0x003d0900
 800728c:	00f42400 	.word	0x00f42400
 8007290:	007a1200 	.word	0x007a1200
 8007294:	0800eef0 	.word	0x0800eef0

08007298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800729c:	4b02      	ldr	r3, [pc, #8]	; (80072a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800729e:	681b      	ldr	r3, [r3, #0]
}
 80072a0:	0018      	movs	r0, r3
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	46c0      	nop			; (mov r8, r8)
 80072a8:	2000016c 	.word	0x2000016c

080072ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80072b0:	f7ff fff2 	bl	8007298 <HAL_RCC_GetHCLKFreq>
 80072b4:	0001      	movs	r1, r0
 80072b6:	4b06      	ldr	r3, [pc, #24]	; (80072d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	0a1b      	lsrs	r3, r3, #8
 80072bc:	2207      	movs	r2, #7
 80072be:	4013      	ands	r3, r2
 80072c0:	4a04      	ldr	r2, [pc, #16]	; (80072d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80072c2:	5cd3      	ldrb	r3, [r2, r3]
 80072c4:	40d9      	lsrs	r1, r3
 80072c6:	000b      	movs	r3, r1
}
 80072c8:	0018      	movs	r0, r3
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	46c0      	nop			; (mov r8, r8)
 80072d0:	40021000 	.word	0x40021000
 80072d4:	0800eee8 	.word	0x0800eee8

080072d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80072dc:	f7ff ffdc 	bl	8007298 <HAL_RCC_GetHCLKFreq>
 80072e0:	0001      	movs	r1, r0
 80072e2:	4b06      	ldr	r3, [pc, #24]	; (80072fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	0adb      	lsrs	r3, r3, #11
 80072e8:	2207      	movs	r2, #7
 80072ea:	4013      	ands	r3, r2
 80072ec:	4a04      	ldr	r2, [pc, #16]	; (8007300 <HAL_RCC_GetPCLK2Freq+0x28>)
 80072ee:	5cd3      	ldrb	r3, [r2, r3]
 80072f0:	40d9      	lsrs	r1, r3
 80072f2:	000b      	movs	r3, r1
}
 80072f4:	0018      	movs	r0, r3
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	46c0      	nop			; (mov r8, r8)
 80072fc:	40021000 	.word	0x40021000
 8007300:	0800eee8 	.word	0x0800eee8

08007304 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800730c:	2317      	movs	r3, #23
 800730e:	18fb      	adds	r3, r7, r3
 8007310:	2200      	movs	r2, #0
 8007312:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2220      	movs	r2, #32
 800731a:	4013      	ands	r3, r2
 800731c:	d106      	bne.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	2380      	movs	r3, #128	; 0x80
 8007324:	011b      	lsls	r3, r3, #4
 8007326:	4013      	ands	r3, r2
 8007328:	d100      	bne.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800732a:	e0d9      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800732c:	4ba4      	ldr	r3, [pc, #656]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800732e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007330:	2380      	movs	r3, #128	; 0x80
 8007332:	055b      	lsls	r3, r3, #21
 8007334:	4013      	ands	r3, r2
 8007336:	d10a      	bne.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007338:	4ba1      	ldr	r3, [pc, #644]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800733a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800733c:	4ba0      	ldr	r3, [pc, #640]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800733e:	2180      	movs	r1, #128	; 0x80
 8007340:	0549      	lsls	r1, r1, #21
 8007342:	430a      	orrs	r2, r1
 8007344:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8007346:	2317      	movs	r3, #23
 8007348:	18fb      	adds	r3, r7, r3
 800734a:	2201      	movs	r2, #1
 800734c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800734e:	4b9d      	ldr	r3, [pc, #628]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	2380      	movs	r3, #128	; 0x80
 8007354:	005b      	lsls	r3, r3, #1
 8007356:	4013      	ands	r3, r2
 8007358:	d11a      	bne.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800735a:	4b9a      	ldr	r3, [pc, #616]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	4b99      	ldr	r3, [pc, #612]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007360:	2180      	movs	r1, #128	; 0x80
 8007362:	0049      	lsls	r1, r1, #1
 8007364:	430a      	orrs	r2, r1
 8007366:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007368:	f7fe fa52 	bl	8005810 <HAL_GetTick>
 800736c:	0003      	movs	r3, r0
 800736e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007370:	e008      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007372:	f7fe fa4d 	bl	8005810 <HAL_GetTick>
 8007376:	0002      	movs	r2, r0
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	2b64      	cmp	r3, #100	; 0x64
 800737e:	d901      	bls.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e118      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007384:	4b8f      	ldr	r3, [pc, #572]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	2380      	movs	r3, #128	; 0x80
 800738a:	005b      	lsls	r3, r3, #1
 800738c:	4013      	ands	r3, r2
 800738e:	d0f0      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8007390:	4b8b      	ldr	r3, [pc, #556]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	23c0      	movs	r3, #192	; 0xc0
 8007396:	039b      	lsls	r3, r3, #14
 8007398:	4013      	ands	r3, r2
 800739a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	23c0      	movs	r3, #192	; 0xc0
 80073a2:	039b      	lsls	r3, r3, #14
 80073a4:	4013      	ands	r3, r2
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d107      	bne.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689a      	ldr	r2, [r3, #8]
 80073b0:	23c0      	movs	r3, #192	; 0xc0
 80073b2:	039b      	lsls	r3, r3, #14
 80073b4:	4013      	ands	r3, r2
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d013      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	23c0      	movs	r3, #192	; 0xc0
 80073c2:	029b      	lsls	r3, r3, #10
 80073c4:	401a      	ands	r2, r3
 80073c6:	23c0      	movs	r3, #192	; 0xc0
 80073c8:	029b      	lsls	r3, r3, #10
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d10a      	bne.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80073ce:	4b7c      	ldr	r3, [pc, #496]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	2380      	movs	r3, #128	; 0x80
 80073d4:	029b      	lsls	r3, r3, #10
 80073d6:	401a      	ands	r2, r3
 80073d8:	2380      	movs	r3, #128	; 0x80
 80073da:	029b      	lsls	r3, r3, #10
 80073dc:	429a      	cmp	r2, r3
 80073de:	d101      	bne.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e0e8      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80073e4:	4b76      	ldr	r3, [pc, #472]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80073e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80073e8:	23c0      	movs	r3, #192	; 0xc0
 80073ea:	029b      	lsls	r3, r3, #10
 80073ec:	4013      	ands	r3, r2
 80073ee:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d049      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685a      	ldr	r2, [r3, #4]
 80073fa:	23c0      	movs	r3, #192	; 0xc0
 80073fc:	029b      	lsls	r3, r3, #10
 80073fe:	4013      	ands	r3, r2
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	429a      	cmp	r2, r3
 8007404:	d004      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2220      	movs	r2, #32
 800740c:	4013      	ands	r3, r2
 800740e:	d10d      	bne.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	23c0      	movs	r3, #192	; 0xc0
 8007416:	029b      	lsls	r3, r3, #10
 8007418:	4013      	ands	r3, r2
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	429a      	cmp	r2, r3
 800741e:	d034      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	2380      	movs	r3, #128	; 0x80
 8007426:	011b      	lsls	r3, r3, #4
 8007428:	4013      	ands	r3, r2
 800742a:	d02e      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800742c:	4b64      	ldr	r3, [pc, #400]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800742e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007430:	4a65      	ldr	r2, [pc, #404]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007432:	4013      	ands	r3, r2
 8007434:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007436:	4b62      	ldr	r3, [pc, #392]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007438:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800743a:	4b61      	ldr	r3, [pc, #388]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800743c:	2180      	movs	r1, #128	; 0x80
 800743e:	0309      	lsls	r1, r1, #12
 8007440:	430a      	orrs	r2, r1
 8007442:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007444:	4b5e      	ldr	r3, [pc, #376]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007446:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007448:	4b5d      	ldr	r3, [pc, #372]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800744a:	4960      	ldr	r1, [pc, #384]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800744c:	400a      	ands	r2, r1
 800744e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8007450:	4b5b      	ldr	r3, [pc, #364]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	2380      	movs	r3, #128	; 0x80
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	4013      	ands	r3, r2
 800745e:	d014      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007460:	f7fe f9d6 	bl	8005810 <HAL_GetTick>
 8007464:	0003      	movs	r3, r0
 8007466:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007468:	e009      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800746a:	f7fe f9d1 	bl	8005810 <HAL_GetTick>
 800746e:	0002      	movs	r2, r0
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	4a56      	ldr	r2, [pc, #344]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d901      	bls.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e09b      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800747e:	4b50      	ldr	r3, [pc, #320]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007480:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007482:	2380      	movs	r3, #128	; 0x80
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4013      	ands	r3, r2
 8007488:	d0ef      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	23c0      	movs	r3, #192	; 0xc0
 8007490:	029b      	lsls	r3, r3, #10
 8007492:	401a      	ands	r2, r3
 8007494:	23c0      	movs	r3, #192	; 0xc0
 8007496:	029b      	lsls	r3, r3, #10
 8007498:	429a      	cmp	r2, r3
 800749a:	d10c      	bne.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800749c:	4b48      	ldr	r3, [pc, #288]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a4c      	ldr	r2, [pc, #304]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80074a2:	4013      	ands	r3, r2
 80074a4:	0019      	movs	r1, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685a      	ldr	r2, [r3, #4]
 80074aa:	23c0      	movs	r3, #192	; 0xc0
 80074ac:	039b      	lsls	r3, r3, #14
 80074ae:	401a      	ands	r2, r3
 80074b0:	4b43      	ldr	r3, [pc, #268]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80074b2:	430a      	orrs	r2, r1
 80074b4:	601a      	str	r2, [r3, #0]
 80074b6:	4b42      	ldr	r3, [pc, #264]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80074b8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	23c0      	movs	r3, #192	; 0xc0
 80074c0:	029b      	lsls	r3, r3, #10
 80074c2:	401a      	ands	r2, r3
 80074c4:	4b3e      	ldr	r3, [pc, #248]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80074c6:	430a      	orrs	r2, r1
 80074c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80074ca:	2317      	movs	r3, #23
 80074cc:	18fb      	adds	r3, r7, r3
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d105      	bne.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074d4:	4b3a      	ldr	r3, [pc, #232]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80074d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074d8:	4b39      	ldr	r3, [pc, #228]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80074da:	493f      	ldr	r1, [pc, #252]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074dc:	400a      	ands	r2, r1
 80074de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2201      	movs	r2, #1
 80074e6:	4013      	ands	r3, r2
 80074e8:	d009      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80074ea:	4b35      	ldr	r3, [pc, #212]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80074ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ee:	2203      	movs	r2, #3
 80074f0:	4393      	bics	r3, r2
 80074f2:	0019      	movs	r1, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	68da      	ldr	r2, [r3, #12]
 80074f8:	4b31      	ldr	r3, [pc, #196]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80074fa:	430a      	orrs	r2, r1
 80074fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2202      	movs	r2, #2
 8007504:	4013      	ands	r3, r2
 8007506:	d009      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007508:	4b2d      	ldr	r3, [pc, #180]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800750a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800750c:	220c      	movs	r2, #12
 800750e:	4393      	bics	r3, r2
 8007510:	0019      	movs	r1, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	691a      	ldr	r2, [r3, #16]
 8007516:	4b2a      	ldr	r3, [pc, #168]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007518:	430a      	orrs	r2, r1
 800751a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2204      	movs	r2, #4
 8007522:	4013      	ands	r3, r2
 8007524:	d009      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007526:	4b26      	ldr	r3, [pc, #152]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800752a:	4a2c      	ldr	r2, [pc, #176]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800752c:	4013      	ands	r3, r2
 800752e:	0019      	movs	r1, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	695a      	ldr	r2, [r3, #20]
 8007534:	4b22      	ldr	r3, [pc, #136]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007536:	430a      	orrs	r2, r1
 8007538:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2208      	movs	r2, #8
 8007540:	4013      	ands	r3, r2
 8007542:	d009      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007544:	4b1e      	ldr	r3, [pc, #120]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007548:	4a25      	ldr	r2, [pc, #148]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800754a:	4013      	ands	r3, r2
 800754c:	0019      	movs	r1, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	699a      	ldr	r2, [r3, #24]
 8007552:	4b1b      	ldr	r3, [pc, #108]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007554:	430a      	orrs	r2, r1
 8007556:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	2380      	movs	r3, #128	; 0x80
 800755e:	005b      	lsls	r3, r3, #1
 8007560:	4013      	ands	r3, r2
 8007562:	d009      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007564:	4b16      	ldr	r3, [pc, #88]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007568:	4a17      	ldr	r2, [pc, #92]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800756a:	4013      	ands	r3, r2
 800756c:	0019      	movs	r1, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	69da      	ldr	r2, [r3, #28]
 8007572:	4b13      	ldr	r3, [pc, #76]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007574:	430a      	orrs	r2, r1
 8007576:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2240      	movs	r2, #64	; 0x40
 800757e:	4013      	ands	r3, r2
 8007580:	d009      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007582:	4b0f      	ldr	r3, [pc, #60]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007586:	4a17      	ldr	r2, [pc, #92]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8007588:	4013      	ands	r3, r2
 800758a:	0019      	movs	r1, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007590:	4b0b      	ldr	r3, [pc, #44]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007592:	430a      	orrs	r2, r1
 8007594:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2280      	movs	r2, #128	; 0x80
 800759c:	4013      	ands	r3, r2
 800759e:	d009      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80075a0:	4b07      	ldr	r3, [pc, #28]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80075a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075a4:	4a10      	ldr	r2, [pc, #64]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80075a6:	4013      	ands	r3, r2
 80075a8:	0019      	movs	r1, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a1a      	ldr	r2, [r3, #32]
 80075ae:	4b04      	ldr	r3, [pc, #16]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80075b0:	430a      	orrs	r2, r1
 80075b2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	0018      	movs	r0, r3
 80075b8:	46bd      	mov	sp, r7
 80075ba:	b006      	add	sp, #24
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	46c0      	nop			; (mov r8, r8)
 80075c0:	40021000 	.word	0x40021000
 80075c4:	40007000 	.word	0x40007000
 80075c8:	fffcffff 	.word	0xfffcffff
 80075cc:	fff7ffff 	.word	0xfff7ffff
 80075d0:	00001388 	.word	0x00001388
 80075d4:	ffcfffff 	.word	0xffcfffff
 80075d8:	efffffff 	.word	0xefffffff
 80075dc:	fffff3ff 	.word	0xfffff3ff
 80075e0:	ffffcfff 	.word	0xffffcfff
 80075e4:	fbffffff 	.word	0xfbffffff
 80075e8:	fff3ffff 	.word	0xfff3ffff

080075ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d101      	bne.n	80075fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e083      	b.n	8007706 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007602:	2b00      	cmp	r3, #0
 8007604:	d109      	bne.n	800761a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	685a      	ldr	r2, [r3, #4]
 800760a:	2382      	movs	r3, #130	; 0x82
 800760c:	005b      	lsls	r3, r3, #1
 800760e:	429a      	cmp	r2, r3
 8007610:	d009      	beq.n	8007626 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	61da      	str	r2, [r3, #28]
 8007618:	e005      	b.n	8007626 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2251      	movs	r2, #81	; 0x51
 8007630:	5c9b      	ldrb	r3, [r3, r2]
 8007632:	b2db      	uxtb	r3, r3
 8007634:	2b00      	cmp	r3, #0
 8007636:	d107      	bne.n	8007648 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2250      	movs	r2, #80	; 0x50
 800763c:	2100      	movs	r1, #0
 800763e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	0018      	movs	r0, r3
 8007644:	f7fd fc2a 	bl	8004e9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2251      	movs	r2, #81	; 0x51
 800764c:	2102      	movs	r1, #2
 800764e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2140      	movs	r1, #64	; 0x40
 800765c:	438a      	bics	r2, r1
 800765e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685a      	ldr	r2, [r3, #4]
 8007664:	2382      	movs	r3, #130	; 0x82
 8007666:	005b      	lsls	r3, r3, #1
 8007668:	401a      	ands	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6899      	ldr	r1, [r3, #8]
 800766e:	2384      	movs	r3, #132	; 0x84
 8007670:	021b      	lsls	r3, r3, #8
 8007672:	400b      	ands	r3, r1
 8007674:	431a      	orrs	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68d9      	ldr	r1, [r3, #12]
 800767a:	2380      	movs	r3, #128	; 0x80
 800767c:	011b      	lsls	r3, r3, #4
 800767e:	400b      	ands	r3, r1
 8007680:	431a      	orrs	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	2102      	movs	r1, #2
 8007688:	400b      	ands	r3, r1
 800768a:	431a      	orrs	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	2101      	movs	r1, #1
 8007692:	400b      	ands	r3, r1
 8007694:	431a      	orrs	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6999      	ldr	r1, [r3, #24]
 800769a:	2380      	movs	r3, #128	; 0x80
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	400b      	ands	r3, r1
 80076a0:	431a      	orrs	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	69db      	ldr	r3, [r3, #28]
 80076a6:	2138      	movs	r1, #56	; 0x38
 80076a8:	400b      	ands	r3, r1
 80076aa:	431a      	orrs	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a1b      	ldr	r3, [r3, #32]
 80076b0:	2180      	movs	r1, #128	; 0x80
 80076b2:	400b      	ands	r3, r1
 80076b4:	431a      	orrs	r2, r3
 80076b6:	0011      	movs	r1, r2
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076bc:	2380      	movs	r3, #128	; 0x80
 80076be:	019b      	lsls	r3, r3, #6
 80076c0:	401a      	ands	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	430a      	orrs	r2, r1
 80076c8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	0c1b      	lsrs	r3, r3, #16
 80076d0:	2204      	movs	r2, #4
 80076d2:	4013      	ands	r3, r2
 80076d4:	0019      	movs	r1, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076da:	2210      	movs	r2, #16
 80076dc:	401a      	ands	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	430a      	orrs	r2, r1
 80076e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	69da      	ldr	r2, [r3, #28]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4907      	ldr	r1, [pc, #28]	; (8007710 <HAL_SPI_Init+0x124>)
 80076f2:	400a      	ands	r2, r1
 80076f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2251      	movs	r2, #81	; 0x51
 8007700:	2101      	movs	r1, #1
 8007702:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	0018      	movs	r0, r3
 8007708:	46bd      	mov	sp, r7
 800770a:	b002      	add	sp, #8
 800770c:	bd80      	pop	{r7, pc}
 800770e:	46c0      	nop			; (mov r8, r8)
 8007710:	fffff7ff 	.word	0xfffff7ff

08007714 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b088      	sub	sp, #32
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	603b      	str	r3, [r7, #0]
 8007720:	1dbb      	adds	r3, r7, #6
 8007722:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007724:	231f      	movs	r3, #31
 8007726:	18fb      	adds	r3, r7, r3
 8007728:	2200      	movs	r2, #0
 800772a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2250      	movs	r2, #80	; 0x50
 8007730:	5c9b      	ldrb	r3, [r3, r2]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d101      	bne.n	800773a <HAL_SPI_Transmit+0x26>
 8007736:	2302      	movs	r3, #2
 8007738:	e13e      	b.n	80079b8 <HAL_SPI_Transmit+0x2a4>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2250      	movs	r2, #80	; 0x50
 800773e:	2101      	movs	r1, #1
 8007740:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007742:	f7fe f865 	bl	8005810 <HAL_GetTick>
 8007746:	0003      	movs	r3, r0
 8007748:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800774a:	2316      	movs	r3, #22
 800774c:	18fb      	adds	r3, r7, r3
 800774e:	1dba      	adds	r2, r7, #6
 8007750:	8812      	ldrh	r2, [r2, #0]
 8007752:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2251      	movs	r2, #81	; 0x51
 8007758:	5c9b      	ldrb	r3, [r3, r2]
 800775a:	b2db      	uxtb	r3, r3
 800775c:	2b01      	cmp	r3, #1
 800775e:	d004      	beq.n	800776a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8007760:	231f      	movs	r3, #31
 8007762:	18fb      	adds	r3, r7, r3
 8007764:	2202      	movs	r2, #2
 8007766:	701a      	strb	r2, [r3, #0]
    goto error;
 8007768:	e11b      	b.n	80079a2 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d003      	beq.n	8007778 <HAL_SPI_Transmit+0x64>
 8007770:	1dbb      	adds	r3, r7, #6
 8007772:	881b      	ldrh	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d104      	bne.n	8007782 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8007778:	231f      	movs	r3, #31
 800777a:	18fb      	adds	r3, r7, r3
 800777c:	2201      	movs	r2, #1
 800777e:	701a      	strb	r2, [r3, #0]
    goto error;
 8007780:	e10f      	b.n	80079a2 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2251      	movs	r2, #81	; 0x51
 8007786:	2103      	movs	r1, #3
 8007788:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	1dba      	adds	r2, r7, #6
 800779a:	8812      	ldrh	r2, [r2, #0]
 800779c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	1dba      	adds	r2, r7, #6
 80077a2:	8812      	ldrh	r2, [r2, #0]
 80077a4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	689a      	ldr	r2, [r3, #8]
 80077c8:	2380      	movs	r3, #128	; 0x80
 80077ca:	021b      	lsls	r3, r3, #8
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d110      	bne.n	80077f2 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2140      	movs	r1, #64	; 0x40
 80077dc:	438a      	bics	r2, r1
 80077de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2180      	movs	r1, #128	; 0x80
 80077ec:	01c9      	lsls	r1, r1, #7
 80077ee:	430a      	orrs	r2, r1
 80077f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2240      	movs	r2, #64	; 0x40
 80077fa:	4013      	ands	r3, r2
 80077fc:	2b40      	cmp	r3, #64	; 0x40
 80077fe:	d007      	beq.n	8007810 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2140      	movs	r1, #64	; 0x40
 800780c:	430a      	orrs	r2, r1
 800780e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	68da      	ldr	r2, [r3, #12]
 8007814:	2380      	movs	r3, #128	; 0x80
 8007816:	011b      	lsls	r3, r3, #4
 8007818:	429a      	cmp	r2, r3
 800781a:	d14e      	bne.n	80078ba <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d004      	beq.n	800782e <HAL_SPI_Transmit+0x11a>
 8007824:	2316      	movs	r3, #22
 8007826:	18fb      	adds	r3, r7, r3
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	2b01      	cmp	r3, #1
 800782c:	d13f      	bne.n	80078ae <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007832:	881a      	ldrh	r2, [r3, #0]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783e:	1c9a      	adds	r2, r3, #2
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007848:	b29b      	uxth	r3, r3
 800784a:	3b01      	subs	r3, #1
 800784c:	b29a      	uxth	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007852:	e02c      	b.n	80078ae <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	2202      	movs	r2, #2
 800785c:	4013      	ands	r3, r2
 800785e:	2b02      	cmp	r3, #2
 8007860:	d112      	bne.n	8007888 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007866:	881a      	ldrh	r2, [r3, #0]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007872:	1c9a      	adds	r2, r3, #2
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800787c:	b29b      	uxth	r3, r3
 800787e:	3b01      	subs	r3, #1
 8007880:	b29a      	uxth	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	86da      	strh	r2, [r3, #54]	; 0x36
 8007886:	e012      	b.n	80078ae <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007888:	f7fd ffc2 	bl	8005810 <HAL_GetTick>
 800788c:	0002      	movs	r2, r0
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	683a      	ldr	r2, [r7, #0]
 8007894:	429a      	cmp	r2, r3
 8007896:	d802      	bhi.n	800789e <HAL_SPI_Transmit+0x18a>
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	3301      	adds	r3, #1
 800789c:	d102      	bne.n	80078a4 <HAL_SPI_Transmit+0x190>
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d104      	bne.n	80078ae <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 80078a4:	231f      	movs	r3, #31
 80078a6:	18fb      	adds	r3, r7, r3
 80078a8:	2203      	movs	r2, #3
 80078aa:	701a      	strb	r2, [r3, #0]
          goto error;
 80078ac:	e079      	b.n	80079a2 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1cd      	bne.n	8007854 <HAL_SPI_Transmit+0x140>
 80078b8:	e04f      	b.n	800795a <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d004      	beq.n	80078cc <HAL_SPI_Transmit+0x1b8>
 80078c2:	2316      	movs	r3, #22
 80078c4:	18fb      	adds	r3, r7, r3
 80078c6:	881b      	ldrh	r3, [r3, #0]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d141      	bne.n	8007950 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	330c      	adds	r3, #12
 80078d6:	7812      	ldrb	r2, [r2, #0]
 80078d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078de:	1c5a      	adds	r2, r3, #1
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	3b01      	subs	r3, #1
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80078f2:	e02d      	b.n	8007950 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	2202      	movs	r2, #2
 80078fc:	4013      	ands	r3, r2
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d113      	bne.n	800792a <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	330c      	adds	r3, #12
 800790c:	7812      	ldrb	r2, [r2, #0]
 800790e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007914:	1c5a      	adds	r2, r3, #1
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800791e:	b29b      	uxth	r3, r3
 8007920:	3b01      	subs	r3, #1
 8007922:	b29a      	uxth	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	86da      	strh	r2, [r3, #54]	; 0x36
 8007928:	e012      	b.n	8007950 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800792a:	f7fd ff71 	bl	8005810 <HAL_GetTick>
 800792e:	0002      	movs	r2, r0
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	683a      	ldr	r2, [r7, #0]
 8007936:	429a      	cmp	r2, r3
 8007938:	d802      	bhi.n	8007940 <HAL_SPI_Transmit+0x22c>
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	3301      	adds	r3, #1
 800793e:	d102      	bne.n	8007946 <HAL_SPI_Transmit+0x232>
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d104      	bne.n	8007950 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 8007946:	231f      	movs	r3, #31
 8007948:	18fb      	adds	r3, r7, r3
 800794a:	2203      	movs	r2, #3
 800794c:	701a      	strb	r2, [r3, #0]
          goto error;
 800794e:	e028      	b.n	80079a2 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007954:	b29b      	uxth	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1cc      	bne.n	80078f4 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800795a:	69ba      	ldr	r2, [r7, #24]
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	0018      	movs	r0, r3
 8007962:	f001 f80f 	bl	8008984 <SPI_EndRxTxTransaction>
 8007966:	1e03      	subs	r3, r0, #0
 8007968:	d002      	beq.n	8007970 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2220      	movs	r2, #32
 800796e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10a      	bne.n	800798e <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007978:	2300      	movs	r3, #0
 800797a:	613b      	str	r3, [r7, #16]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	613b      	str	r3, [r7, #16]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	613b      	str	r3, [r7, #16]
 800798c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007992:	2b00      	cmp	r3, #0
 8007994:	d004      	beq.n	80079a0 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 8007996:	231f      	movs	r3, #31
 8007998:	18fb      	adds	r3, r7, r3
 800799a:	2201      	movs	r2, #1
 800799c:	701a      	strb	r2, [r3, #0]
 800799e:	e000      	b.n	80079a2 <HAL_SPI_Transmit+0x28e>
  }

error:
 80079a0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2251      	movs	r2, #81	; 0x51
 80079a6:	2101      	movs	r1, #1
 80079a8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2250      	movs	r2, #80	; 0x50
 80079ae:	2100      	movs	r1, #0
 80079b0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80079b2:	231f      	movs	r3, #31
 80079b4:	18fb      	adds	r3, r7, r3
 80079b6:	781b      	ldrb	r3, [r3, #0]
}
 80079b8:	0018      	movs	r0, r3
 80079ba:	46bd      	mov	sp, r7
 80079bc:	b008      	add	sp, #32
 80079be:	bd80      	pop	{r7, pc}

080079c0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079c0:	b590      	push	{r4, r7, lr}
 80079c2:	b089      	sub	sp, #36	; 0x24
 80079c4:	af02      	add	r7, sp, #8
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	603b      	str	r3, [r7, #0]
 80079cc:	1dbb      	adds	r3, r7, #6
 80079ce:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80079d0:	2317      	movs	r3, #23
 80079d2:	18fb      	adds	r3, r7, r3
 80079d4:	2200      	movs	r2, #0
 80079d6:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	2382      	movs	r3, #130	; 0x82
 80079de:	005b      	lsls	r3, r3, #1
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d113      	bne.n	8007a0c <HAL_SPI_Receive+0x4c>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d10f      	bne.n	8007a0c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2251      	movs	r2, #81	; 0x51
 80079f0:	2104      	movs	r1, #4
 80079f2:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80079f4:	1dbb      	adds	r3, r7, #6
 80079f6:	881c      	ldrh	r4, [r3, #0]
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	68b9      	ldr	r1, [r7, #8]
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	0023      	movs	r3, r4
 8007a04:	f000 f902 	bl	8007c0c <HAL_SPI_TransmitReceive>
 8007a08:	0003      	movs	r3, r0
 8007a0a:	e0f9      	b.n	8007c00 <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2250      	movs	r2, #80	; 0x50
 8007a10:	5c9b      	ldrb	r3, [r3, r2]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d101      	bne.n	8007a1a <HAL_SPI_Receive+0x5a>
 8007a16:	2302      	movs	r3, #2
 8007a18:	e0f2      	b.n	8007c00 <HAL_SPI_Receive+0x240>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2250      	movs	r2, #80	; 0x50
 8007a1e:	2101      	movs	r1, #1
 8007a20:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a22:	f7fd fef5 	bl	8005810 <HAL_GetTick>
 8007a26:	0003      	movs	r3, r0
 8007a28:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2251      	movs	r2, #81	; 0x51
 8007a2e:	5c9b      	ldrb	r3, [r3, r2]
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d004      	beq.n	8007a40 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8007a36:	2317      	movs	r3, #23
 8007a38:	18fb      	adds	r3, r7, r3
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	701a      	strb	r2, [r3, #0]
    goto error;
 8007a3e:	e0d4      	b.n	8007bea <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d003      	beq.n	8007a4e <HAL_SPI_Receive+0x8e>
 8007a46:	1dbb      	adds	r3, r7, #6
 8007a48:	881b      	ldrh	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d104      	bne.n	8007a58 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8007a4e:	2317      	movs	r3, #23
 8007a50:	18fb      	adds	r3, r7, r3
 8007a52:	2201      	movs	r2, #1
 8007a54:	701a      	strb	r2, [r3, #0]
    goto error;
 8007a56:	e0c8      	b.n	8007bea <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2251      	movs	r2, #81	; 0x51
 8007a5c:	2104      	movs	r1, #4
 8007a5e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	68ba      	ldr	r2, [r7, #8]
 8007a6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	1dba      	adds	r2, r7, #6
 8007a70:	8812      	ldrh	r2, [r2, #0]
 8007a72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	1dba      	adds	r2, r7, #6
 8007a78:	8812      	ldrh	r2, [r2, #0]
 8007a7a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	689a      	ldr	r2, [r3, #8]
 8007a9e:	2380      	movs	r3, #128	; 0x80
 8007aa0:	021b      	lsls	r3, r3, #8
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d10f      	bne.n	8007ac6 <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2140      	movs	r1, #64	; 0x40
 8007ab2:	438a      	bics	r2, r1
 8007ab4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4951      	ldr	r1, [pc, #324]	; (8007c08 <HAL_SPI_Receive+0x248>)
 8007ac2:	400a      	ands	r2, r1
 8007ac4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2240      	movs	r2, #64	; 0x40
 8007ace:	4013      	ands	r3, r2
 8007ad0:	2b40      	cmp	r3, #64	; 0x40
 8007ad2:	d007      	beq.n	8007ae4 <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2140      	movs	r1, #64	; 0x40
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d164      	bne.n	8007bb6 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007aec:	e02f      	b.n	8007b4e <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	2201      	movs	r2, #1
 8007af6:	4013      	ands	r3, r2
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d115      	bne.n	8007b28 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	330c      	adds	r3, #12
 8007b02:	001a      	movs	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b08:	7812      	ldrb	r2, [r2, #0]
 8007b0a:	b2d2      	uxtb	r2, r2
 8007b0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b12:	1c5a      	adds	r2, r3, #1
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b26:	e012      	b.n	8007b4e <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b28:	f7fd fe72 	bl	8005810 <HAL_GetTick>
 8007b2c:	0002      	movs	r2, r0
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d802      	bhi.n	8007b3e <HAL_SPI_Receive+0x17e>
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	d102      	bne.n	8007b44 <HAL_SPI_Receive+0x184>
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d104      	bne.n	8007b4e <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8007b44:	2317      	movs	r3, #23
 8007b46:	18fb      	adds	r3, r7, r3
 8007b48:	2203      	movs	r2, #3
 8007b4a:	701a      	strb	r2, [r3, #0]
          goto error;
 8007b4c:	e04d      	b.n	8007bea <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1ca      	bne.n	8007aee <HAL_SPI_Receive+0x12e>
 8007b58:	e032      	b.n	8007bc0 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	2201      	movs	r2, #1
 8007b62:	4013      	ands	r3, r2
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d113      	bne.n	8007b90 <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68da      	ldr	r2, [r3, #12]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b72:	b292      	uxth	r2, r2
 8007b74:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7a:	1c9a      	adds	r2, r3, #2
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	3b01      	subs	r3, #1
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b8e:	e012      	b.n	8007bb6 <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b90:	f7fd fe3e 	bl	8005810 <HAL_GetTick>
 8007b94:	0002      	movs	r2, r0
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d802      	bhi.n	8007ba6 <HAL_SPI_Receive+0x1e6>
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	d102      	bne.n	8007bac <HAL_SPI_Receive+0x1ec>
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d104      	bne.n	8007bb6 <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 8007bac:	2317      	movs	r3, #23
 8007bae:	18fb      	adds	r3, r7, r3
 8007bb0:	2203      	movs	r2, #3
 8007bb2:	701a      	strb	r2, [r3, #0]
          goto error;
 8007bb4:	e019      	b.n	8007bea <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1cc      	bne.n	8007b5a <HAL_SPI_Receive+0x19a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	0018      	movs	r0, r3
 8007bc8:	f000 fe72 	bl	80088b0 <SPI_EndRxTransaction>
 8007bcc:	1e03      	subs	r3, r0, #0
 8007bce:	d002      	beq.n	8007bd6 <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d004      	beq.n	8007be8 <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 8007bde:	2317      	movs	r3, #23
 8007be0:	18fb      	adds	r3, r7, r3
 8007be2:	2201      	movs	r2, #1
 8007be4:	701a      	strb	r2, [r3, #0]
 8007be6:	e000      	b.n	8007bea <HAL_SPI_Receive+0x22a>
  }

error :
 8007be8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2251      	movs	r2, #81	; 0x51
 8007bee:	2101      	movs	r1, #1
 8007bf0:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2250      	movs	r2, #80	; 0x50
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007bfa:	2317      	movs	r3, #23
 8007bfc:	18fb      	adds	r3, r7, r3
 8007bfe:	781b      	ldrb	r3, [r3, #0]
}
 8007c00:	0018      	movs	r0, r3
 8007c02:	46bd      	mov	sp, r7
 8007c04:	b007      	add	sp, #28
 8007c06:	bd90      	pop	{r4, r7, pc}
 8007c08:	ffffbfff 	.word	0xffffbfff

08007c0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b08c      	sub	sp, #48	; 0x30
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
 8007c18:	001a      	movs	r2, r3
 8007c1a:	1cbb      	adds	r3, r7, #2
 8007c1c:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007c22:	232b      	movs	r3, #43	; 0x2b
 8007c24:	18fb      	adds	r3, r7, r3
 8007c26:	2200      	movs	r2, #0
 8007c28:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2250      	movs	r2, #80	; 0x50
 8007c2e:	5c9b      	ldrb	r3, [r3, r2]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d101      	bne.n	8007c38 <HAL_SPI_TransmitReceive+0x2c>
 8007c34:	2302      	movs	r3, #2
 8007c36:	e1a1      	b.n	8007f7c <HAL_SPI_TransmitReceive+0x370>
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2250      	movs	r2, #80	; 0x50
 8007c3c:	2101      	movs	r1, #1
 8007c3e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c40:	f7fd fde6 	bl	8005810 <HAL_GetTick>
 8007c44:	0003      	movs	r3, r0
 8007c46:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c48:	2023      	movs	r0, #35	; 0x23
 8007c4a:	183b      	adds	r3, r7, r0
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	2151      	movs	r1, #81	; 0x51
 8007c50:	5c52      	ldrb	r2, [r2, r1]
 8007c52:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007c5a:	231a      	movs	r3, #26
 8007c5c:	18fb      	adds	r3, r7, r3
 8007c5e:	1cba      	adds	r2, r7, #2
 8007c60:	8812      	ldrh	r2, [r2, #0]
 8007c62:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c64:	183b      	adds	r3, r7, r0
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d012      	beq.n	8007c92 <HAL_SPI_TransmitReceive+0x86>
 8007c6c:	69fa      	ldr	r2, [r7, #28]
 8007c6e:	2382      	movs	r3, #130	; 0x82
 8007c70:	005b      	lsls	r3, r3, #1
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d108      	bne.n	8007c88 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d104      	bne.n	8007c88 <HAL_SPI_TransmitReceive+0x7c>
 8007c7e:	2323      	movs	r3, #35	; 0x23
 8007c80:	18fb      	adds	r3, r7, r3
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	2b04      	cmp	r3, #4
 8007c86:	d004      	beq.n	8007c92 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8007c88:	232b      	movs	r3, #43	; 0x2b
 8007c8a:	18fb      	adds	r3, r7, r3
 8007c8c:	2202      	movs	r2, #2
 8007c8e:	701a      	strb	r2, [r3, #0]
    goto error;
 8007c90:	e169      	b.n	8007f66 <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d006      	beq.n	8007ca6 <HAL_SPI_TransmitReceive+0x9a>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d003      	beq.n	8007ca6 <HAL_SPI_TransmitReceive+0x9a>
 8007c9e:	1cbb      	adds	r3, r7, #2
 8007ca0:	881b      	ldrh	r3, [r3, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d104      	bne.n	8007cb0 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 8007ca6:	232b      	movs	r3, #43	; 0x2b
 8007ca8:	18fb      	adds	r3, r7, r3
 8007caa:	2201      	movs	r2, #1
 8007cac:	701a      	strb	r2, [r3, #0]
    goto error;
 8007cae:	e15a      	b.n	8007f66 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2251      	movs	r2, #81	; 0x51
 8007cb4:	5c9b      	ldrb	r3, [r3, r2]
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b04      	cmp	r3, #4
 8007cba:	d003      	beq.n	8007cc4 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2251      	movs	r2, #81	; 0x51
 8007cc0:	2105      	movs	r1, #5
 8007cc2:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	1cba      	adds	r2, r7, #2
 8007cd4:	8812      	ldrh	r2, [r2, #0]
 8007cd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	1cba      	adds	r2, r7, #2
 8007cdc:	8812      	ldrh	r2, [r2, #0]
 8007cde:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	68ba      	ldr	r2, [r7, #8]
 8007ce4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	1cba      	adds	r2, r7, #2
 8007cea:	8812      	ldrh	r2, [r2, #0]
 8007cec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	1cba      	adds	r2, r7, #2
 8007cf2:	8812      	ldrh	r2, [r2, #0]
 8007cf4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2240      	movs	r2, #64	; 0x40
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	2b40      	cmp	r3, #64	; 0x40
 8007d0e:	d007      	beq.n	8007d20 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2140      	movs	r1, #64	; 0x40
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	68da      	ldr	r2, [r3, #12]
 8007d24:	2380      	movs	r3, #128	; 0x80
 8007d26:	011b      	lsls	r3, r3, #4
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d000      	beq.n	8007d2e <HAL_SPI_TransmitReceive+0x122>
 8007d2c:	e07a      	b.n	8007e24 <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d004      	beq.n	8007d40 <HAL_SPI_TransmitReceive+0x134>
 8007d36:	231a      	movs	r3, #26
 8007d38:	18fb      	adds	r3, r7, r3
 8007d3a:	881b      	ldrh	r3, [r3, #0]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d166      	bne.n	8007e0e <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d44:	881a      	ldrh	r2, [r3, #0]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d50:	1c9a      	adds	r2, r3, #2
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d64:	e053      	b.n	8007e0e <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	2202      	movs	r2, #2
 8007d6e:	4013      	ands	r3, r2
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d11b      	bne.n	8007dac <HAL_SPI_TransmitReceive+0x1a0>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d016      	beq.n	8007dac <HAL_SPI_TransmitReceive+0x1a0>
 8007d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d113      	bne.n	8007dac <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d88:	881a      	ldrh	r2, [r3, #0]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d94:	1c9a      	adds	r2, r3, #2
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	3b01      	subs	r3, #1
 8007da2:	b29a      	uxth	r2, r3
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007da8:	2300      	movs	r3, #0
 8007daa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	2201      	movs	r2, #1
 8007db4:	4013      	ands	r3, r2
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d119      	bne.n	8007dee <HAL_SPI_TransmitReceive+0x1e2>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d014      	beq.n	8007dee <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68da      	ldr	r2, [r3, #12]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dce:	b292      	uxth	r2, r2
 8007dd0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd6:	1c9a      	adds	r2, r3, #2
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	3b01      	subs	r3, #1
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007dea:	2301      	movs	r3, #1
 8007dec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007dee:	f7fd fd0f 	bl	8005810 <HAL_GetTick>
 8007df2:	0002      	movs	r2, r0
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d807      	bhi.n	8007e0e <HAL_SPI_TransmitReceive+0x202>
 8007dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e00:	3301      	adds	r3, #1
 8007e02:	d004      	beq.n	8007e0e <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 8007e04:	232b      	movs	r3, #43	; 0x2b
 8007e06:	18fb      	adds	r3, r7, r3
 8007e08:	2203      	movs	r2, #3
 8007e0a:	701a      	strb	r2, [r3, #0]
        goto error;
 8007e0c:	e0ab      	b.n	8007f66 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1a6      	bne.n	8007d66 <HAL_SPI_TransmitReceive+0x15a>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1a1      	bne.n	8007d66 <HAL_SPI_TransmitReceive+0x15a>
 8007e22:	e07f      	b.n	8007f24 <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d005      	beq.n	8007e38 <HAL_SPI_TransmitReceive+0x22c>
 8007e2c:	231a      	movs	r3, #26
 8007e2e:	18fb      	adds	r3, r7, r3
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d000      	beq.n	8007e38 <HAL_SPI_TransmitReceive+0x22c>
 8007e36:	e06b      	b.n	8007f10 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	330c      	adds	r3, #12
 8007e42:	7812      	ldrb	r2, [r2, #0]
 8007e44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4a:	1c5a      	adds	r2, r3, #1
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	3b01      	subs	r3, #1
 8007e58:	b29a      	uxth	r2, r3
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e5e:	e057      	b.n	8007f10 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	2202      	movs	r2, #2
 8007e68:	4013      	ands	r3, r2
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d11c      	bne.n	8007ea8 <HAL_SPI_TransmitReceive+0x29c>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d017      	beq.n	8007ea8 <HAL_SPI_TransmitReceive+0x29c>
 8007e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d114      	bne.n	8007ea8 <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	330c      	adds	r3, #12
 8007e88:	7812      	ldrb	r2, [r2, #0]
 8007e8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e90:	1c5a      	adds	r2, r3, #1
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d119      	bne.n	8007eea <HAL_SPI_TransmitReceive+0x2de>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d014      	beq.n	8007eea <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68da      	ldr	r2, [r3, #12]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eca:	b2d2      	uxtb	r2, r2
 8007ecc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed2:	1c5a      	adds	r2, r3, #1
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007eea:	f7fd fc91 	bl	8005810 <HAL_GetTick>
 8007eee:	0002      	movs	r2, r0
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d802      	bhi.n	8007f00 <HAL_SPI_TransmitReceive+0x2f4>
 8007efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efc:	3301      	adds	r3, #1
 8007efe:	d102      	bne.n	8007f06 <HAL_SPI_TransmitReceive+0x2fa>
 8007f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d104      	bne.n	8007f10 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 8007f06:	232b      	movs	r3, #43	; 0x2b
 8007f08:	18fb      	adds	r3, r7, r3
 8007f0a:	2203      	movs	r2, #3
 8007f0c:	701a      	strb	r2, [r3, #0]
        goto error;
 8007f0e:	e02a      	b.n	8007f66 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d1a2      	bne.n	8007e60 <HAL_SPI_TransmitReceive+0x254>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d19d      	bne.n	8007e60 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	0018      	movs	r0, r3
 8007f2c:	f000 fd2a 	bl	8008984 <SPI_EndRxTxTransaction>
 8007f30:	1e03      	subs	r3, r0, #0
 8007f32:	d007      	beq.n	8007f44 <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 8007f34:	232b      	movs	r3, #43	; 0x2b
 8007f36:	18fb      	adds	r3, r7, r3
 8007f38:	2201      	movs	r2, #1
 8007f3a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2220      	movs	r2, #32
 8007f40:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007f42:	e010      	b.n	8007f66 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10b      	bne.n	8007f64 <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	617b      	str	r3, [r7, #20]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	617b      	str	r3, [r7, #20]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	617b      	str	r3, [r7, #20]
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	e000      	b.n	8007f66 <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 8007f64:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2251      	movs	r2, #81	; 0x51
 8007f6a:	2101      	movs	r1, #1
 8007f6c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2250      	movs	r2, #80	; 0x50
 8007f72:	2100      	movs	r1, #0
 8007f74:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007f76:	232b      	movs	r3, #43	; 0x2b
 8007f78:	18fb      	adds	r3, r7, r3
 8007f7a:	781b      	ldrb	r3, [r3, #0]
}
 8007f7c:	0018      	movs	r0, r3
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	b00c      	add	sp, #48	; 0x30
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	1dbb      	adds	r3, r7, #6
 8007f90:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f92:	2317      	movs	r3, #23
 8007f94:	18fb      	adds	r3, r7, r3
 8007f96:	2200      	movs	r2, #0
 8007f98:	701a      	strb	r2, [r3, #0]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d112      	bne.n	8007fc8 <HAL_SPI_Receive_DMA+0x44>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	685a      	ldr	r2, [r3, #4]
 8007fa6:	2382      	movs	r3, #130	; 0x82
 8007fa8:	005b      	lsls	r3, r3, #1
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d10c      	bne.n	8007fc8 <HAL_SPI_Receive_DMA+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2251      	movs	r2, #81	; 0x51
 8007fb2:	2104      	movs	r1, #4
 8007fb4:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8007fb6:	1dbb      	adds	r3, r7, #6
 8007fb8:	881b      	ldrh	r3, [r3, #0]
 8007fba:	68ba      	ldr	r2, [r7, #8]
 8007fbc:	68b9      	ldr	r1, [r7, #8]
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f000 f8ba 	bl	8008138 <HAL_SPI_TransmitReceive_DMA>
 8007fc4:	0003      	movs	r3, r0
 8007fc6:	e0aa      	b.n	800811e <HAL_SPI_Receive_DMA+0x19a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2250      	movs	r2, #80	; 0x50
 8007fcc:	5c9b      	ldrb	r3, [r3, r2]
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d101      	bne.n	8007fd6 <HAL_SPI_Receive_DMA+0x52>
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	e0a3      	b.n	800811e <HAL_SPI_Receive_DMA+0x19a>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2250      	movs	r2, #80	; 0x50
 8007fda:	2101      	movs	r1, #1
 8007fdc:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2251      	movs	r2, #81	; 0x51
 8007fe2:	5c9b      	ldrb	r3, [r3, r2]
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d004      	beq.n	8007ff4 <HAL_SPI_Receive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8007fea:	2317      	movs	r3, #23
 8007fec:	18fb      	adds	r3, r7, r3
 8007fee:	2202      	movs	r2, #2
 8007ff0:	701a      	strb	r2, [r3, #0]
    goto error;
 8007ff2:	e08d      	b.n	8008110 <HAL_SPI_Receive_DMA+0x18c>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d003      	beq.n	8008002 <HAL_SPI_Receive_DMA+0x7e>
 8007ffa:	1dbb      	adds	r3, r7, #6
 8007ffc:	881b      	ldrh	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d104      	bne.n	800800c <HAL_SPI_Receive_DMA+0x88>
  {
    errorcode = HAL_ERROR;
 8008002:	2317      	movs	r3, #23
 8008004:	18fb      	adds	r3, r7, r3
 8008006:	2201      	movs	r2, #1
 8008008:	701a      	strb	r2, [r3, #0]
    goto error;
 800800a:	e081      	b.n	8008110 <HAL_SPI_Receive_DMA+0x18c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2251      	movs	r2, #81	; 0x51
 8008010:	2104      	movs	r1, #4
 8008012:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	1dba      	adds	r2, r7, #6
 8008024:	8812      	ldrh	r2, [r2, #0]
 8008026:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	1dba      	adds	r2, r7, #6
 800802c:	8812      	ldrh	r2, [r2, #0]
 800802e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2200      	movs	r2, #0
 8008034:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	689a      	ldr	r2, [r3, #8]
 800804c:	2380      	movs	r3, #128	; 0x80
 800804e:	021b      	lsls	r3, r3, #8
 8008050:	429a      	cmp	r2, r3
 8008052:	d10f      	bne.n	8008074 <HAL_SPI_Receive_DMA+0xf0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2140      	movs	r1, #64	; 0x40
 8008060:	438a      	bics	r2, r1
 8008062:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	492e      	ldr	r1, [pc, #184]	; (8008128 <HAL_SPI_Receive_DMA+0x1a4>)
 8008070:	400a      	ands	r2, r1
 8008072:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008078:	4a2c      	ldr	r2, [pc, #176]	; (800812c <HAL_SPI_Receive_DMA+0x1a8>)
 800807a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008080:	4a2b      	ldr	r2, [pc, #172]	; (8008130 <HAL_SPI_Receive_DMA+0x1ac>)
 8008082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008088:	4a2a      	ldr	r2, [pc, #168]	; (8008134 <HAL_SPI_Receive_DMA+0x1b0>)
 800808a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008090:	2200      	movs	r2, #0
 8008092:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	330c      	adds	r3, #12
 800809e:	0019      	movs	r1, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a4:	001a      	movs	r2, r3
                                 hspi->RxXferCount))
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080aa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80080ac:	f7fd fd7b 	bl	8005ba6 <HAL_DMA_Start_IT>
 80080b0:	1e03      	subs	r3, r0, #0
 80080b2:	d00e      	beq.n	80080d2 <HAL_SPI_Receive_DMA+0x14e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b8:	2210      	movs	r2, #16
 80080ba:	431a      	orrs	r2, r3
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80080c0:	2317      	movs	r3, #23
 80080c2:	18fb      	adds	r3, r7, r3
 80080c4:	2201      	movs	r2, #1
 80080c6:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2251      	movs	r2, #81	; 0x51
 80080cc:	2101      	movs	r1, #1
 80080ce:	5499      	strb	r1, [r3, r2]
    goto error;
 80080d0:	e01e      	b.n	8008110 <HAL_SPI_Receive_DMA+0x18c>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2240      	movs	r2, #64	; 0x40
 80080da:	4013      	ands	r3, r2
 80080dc:	2b40      	cmp	r3, #64	; 0x40
 80080de:	d007      	beq.n	80080f0 <HAL_SPI_Receive_DMA+0x16c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2140      	movs	r1, #64	; 0x40
 80080ec:	430a      	orrs	r2, r1
 80080ee:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	685a      	ldr	r2, [r3, #4]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2120      	movs	r1, #32
 80080fc:	430a      	orrs	r2, r1
 80080fe:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2101      	movs	r1, #1
 800810c:	430a      	orrs	r2, r1
 800810e:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2250      	movs	r2, #80	; 0x50
 8008114:	2100      	movs	r1, #0
 8008116:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008118:	2317      	movs	r3, #23
 800811a:	18fb      	adds	r3, r7, r3
 800811c:	781b      	ldrb	r3, [r3, #0]
}
 800811e:	0018      	movs	r0, r3
 8008120:	46bd      	mov	sp, r7
 8008122:	b006      	add	sp, #24
 8008124:	bd80      	pop	{r7, pc}
 8008126:	46c0      	nop			; (mov r8, r8)
 8008128:	ffffbfff 	.word	0xffffbfff
 800812c:	080086eb 	.word	0x080086eb
 8008130:	080085a9 	.word	0x080085a9
 8008134:	08008727 	.word	0x08008727

08008138 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
 8008144:	001a      	movs	r2, r3
 8008146:	1cbb      	adds	r3, r7, #2
 8008148:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800814a:	2317      	movs	r3, #23
 800814c:	18fb      	adds	r3, r7, r3
 800814e:	2200      	movs	r2, #0
 8008150:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2250      	movs	r2, #80	; 0x50
 8008156:	5c9b      	ldrb	r3, [r3, r2]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d101      	bne.n	8008160 <HAL_SPI_TransmitReceive_DMA+0x28>
 800815c:	2302      	movs	r3, #2
 800815e:	e0f6      	b.n	800834e <HAL_SPI_TransmitReceive_DMA+0x216>
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2250      	movs	r2, #80	; 0x50
 8008164:	2101      	movs	r1, #1
 8008166:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008168:	2016      	movs	r0, #22
 800816a:	183b      	adds	r3, r7, r0
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	2151      	movs	r1, #81	; 0x51
 8008170:	5c52      	ldrb	r2, [r2, r1]
 8008172:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800817a:	183b      	adds	r3, r7, r0
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	2b01      	cmp	r3, #1
 8008180:	d012      	beq.n	80081a8 <HAL_SPI_TransmitReceive_DMA+0x70>
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	2382      	movs	r3, #130	; 0x82
 8008186:	005b      	lsls	r3, r3, #1
 8008188:	429a      	cmp	r2, r3
 800818a:	d108      	bne.n	800819e <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d104      	bne.n	800819e <HAL_SPI_TransmitReceive_DMA+0x66>
 8008194:	2316      	movs	r3, #22
 8008196:	18fb      	adds	r3, r7, r3
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	2b04      	cmp	r3, #4
 800819c:	d004      	beq.n	80081a8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 800819e:	2317      	movs	r3, #23
 80081a0:	18fb      	adds	r3, r7, r3
 80081a2:	2202      	movs	r2, #2
 80081a4:	701a      	strb	r2, [r3, #0]
    goto error;
 80081a6:	e0cb      	b.n	8008340 <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d006      	beq.n	80081bc <HAL_SPI_TransmitReceive_DMA+0x84>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d003      	beq.n	80081bc <HAL_SPI_TransmitReceive_DMA+0x84>
 80081b4:	1cbb      	adds	r3, r7, #2
 80081b6:	881b      	ldrh	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d104      	bne.n	80081c6 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 80081bc:	2317      	movs	r3, #23
 80081be:	18fb      	adds	r3, r7, r3
 80081c0:	2201      	movs	r2, #1
 80081c2:	701a      	strb	r2, [r3, #0]
    goto error;
 80081c4:	e0bc      	b.n	8008340 <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2251      	movs	r2, #81	; 0x51
 80081ca:	5c9b      	ldrb	r3, [r3, r2]
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b04      	cmp	r3, #4
 80081d0:	d003      	beq.n	80081da <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2251      	movs	r2, #81	; 0x51
 80081d6:	2105      	movs	r1, #5
 80081d8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	1cba      	adds	r2, r7, #2
 80081ea:	8812      	ldrh	r2, [r2, #0]
 80081ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	1cba      	adds	r2, r7, #2
 80081f2:	8812      	ldrh	r2, [r2, #0]
 80081f4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	1cba      	adds	r2, r7, #2
 8008200:	8812      	ldrh	r2, [r2, #0]
 8008202:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	1cba      	adds	r2, r7, #2
 8008208:	8812      	ldrh	r2, [r2, #0]
 800820a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2200      	movs	r2, #0
 8008210:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2251      	movs	r2, #81	; 0x51
 800821c:	5c9b      	ldrb	r3, [r3, r2]
 800821e:	b2db      	uxtb	r3, r3
 8008220:	2b04      	cmp	r3, #4
 8008222:	d108      	bne.n	8008236 <HAL_SPI_TransmitReceive_DMA+0xfe>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008228:	4a4b      	ldr	r2, [pc, #300]	; (8008358 <HAL_SPI_TransmitReceive_DMA+0x220>)
 800822a:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008230:	4a4a      	ldr	r2, [pc, #296]	; (800835c <HAL_SPI_TransmitReceive_DMA+0x224>)
 8008232:	62da      	str	r2, [r3, #44]	; 0x2c
 8008234:	e007      	b.n	8008246 <HAL_SPI_TransmitReceive_DMA+0x10e>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800823a:	4a49      	ldr	r2, [pc, #292]	; (8008360 <HAL_SPI_TransmitReceive_DMA+0x228>)
 800823c:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008242:	4a48      	ldr	r2, [pc, #288]	; (8008364 <HAL_SPI_TransmitReceive_DMA+0x22c>)
 8008244:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800824a:	4a47      	ldr	r2, [pc, #284]	; (8008368 <HAL_SPI_TransmitReceive_DMA+0x230>)
 800824c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008252:	2200      	movs	r2, #0
 8008254:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	330c      	adds	r3, #12
 8008260:	0019      	movs	r1, r3
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008266:	001a      	movs	r2, r3
                                 hspi->RxXferCount))
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800826c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800826e:	f7fd fc9a 	bl	8005ba6 <HAL_DMA_Start_IT>
 8008272:	1e03      	subs	r3, r0, #0
 8008274:	d00e      	beq.n	8008294 <HAL_SPI_TransmitReceive_DMA+0x15c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800827a:	2210      	movs	r2, #16
 800827c:	431a      	orrs	r2, r3
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8008282:	2317      	movs	r3, #23
 8008284:	18fb      	adds	r3, r7, r3
 8008286:	2201      	movs	r2, #1
 8008288:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2251      	movs	r2, #81	; 0x51
 800828e:	2101      	movs	r1, #1
 8008290:	5499      	strb	r1, [r3, r2]
    goto error;
 8008292:	e055      	b.n	8008340 <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	685a      	ldr	r2, [r3, #4]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2101      	movs	r1, #1
 80082a0:	430a      	orrs	r2, r1
 80082a2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082a8:	2200      	movs	r2, #0
 80082aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082b0:	2200      	movs	r2, #0
 80082b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082b8:	2200      	movs	r2, #0
 80082ba:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082c0:	2200      	movs	r2, #0
 80082c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082cc:	0019      	movs	r1, r3
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	330c      	adds	r3, #12
 80082d4:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082da:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80082dc:	f7fd fc63 	bl	8005ba6 <HAL_DMA_Start_IT>
 80082e0:	1e03      	subs	r3, r0, #0
 80082e2:	d00e      	beq.n	8008302 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082e8:	2210      	movs	r2, #16
 80082ea:	431a      	orrs	r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80082f0:	2317      	movs	r3, #23
 80082f2:	18fb      	adds	r3, r7, r3
 80082f4:	2201      	movs	r2, #1
 80082f6:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2251      	movs	r2, #81	; 0x51
 80082fc:	2101      	movs	r1, #1
 80082fe:	5499      	strb	r1, [r3, r2]
    goto error;
 8008300:	e01e      	b.n	8008340 <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2240      	movs	r2, #64	; 0x40
 800830a:	4013      	ands	r3, r2
 800830c:	2b40      	cmp	r3, #64	; 0x40
 800830e:	d007      	beq.n	8008320 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2140      	movs	r1, #64	; 0x40
 800831c:	430a      	orrs	r2, r1
 800831e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	685a      	ldr	r2, [r3, #4]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2120      	movs	r1, #32
 800832c:	430a      	orrs	r2, r1
 800832e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	685a      	ldr	r2, [r3, #4]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2102      	movs	r1, #2
 800833c:	430a      	orrs	r2, r1
 800833e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2250      	movs	r2, #80	; 0x50
 8008344:	2100      	movs	r1, #0
 8008346:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008348:	2317      	movs	r3, #23
 800834a:	18fb      	adds	r3, r7, r3
 800834c:	781b      	ldrb	r3, [r3, #0]
}
 800834e:	0018      	movs	r0, r3
 8008350:	46bd      	mov	sp, r7
 8008352:	b006      	add	sp, #24
 8008354:	bd80      	pop	{r7, pc}
 8008356:	46c0      	nop			; (mov r8, r8)
 8008358:	080086eb 	.word	0x080086eb
 800835c:	080085a9 	.word	0x080085a9
 8008360:	08008709 	.word	0x08008709
 8008364:	08008657 	.word	0x08008657
 8008368:	08008727 	.word	0x08008727

0800836c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b088      	sub	sp, #32
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	099b      	lsrs	r3, r3, #6
 8008388:	001a      	movs	r2, r3
 800838a:	2301      	movs	r3, #1
 800838c:	4013      	ands	r3, r2
 800838e:	d10f      	bne.n	80083b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	2201      	movs	r2, #1
 8008394:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008396:	d00b      	beq.n	80083b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	099b      	lsrs	r3, r3, #6
 800839c:	001a      	movs	r2, r3
 800839e:	2301      	movs	r3, #1
 80083a0:	4013      	ands	r3, r2
 80083a2:	d005      	beq.n	80083b0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	0010      	movs	r0, r2
 80083ac:	4798      	blx	r3
    return;
 80083ae:	e0d6      	b.n	800855e <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	085b      	lsrs	r3, r3, #1
 80083b4:	001a      	movs	r2, r3
 80083b6:	2301      	movs	r3, #1
 80083b8:	4013      	ands	r3, r2
 80083ba:	d00b      	beq.n	80083d4 <HAL_SPI_IRQHandler+0x68>
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	09db      	lsrs	r3, r3, #7
 80083c0:	001a      	movs	r2, r3
 80083c2:	2301      	movs	r3, #1
 80083c4:	4013      	ands	r3, r2
 80083c6:	d005      	beq.n	80083d4 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	0010      	movs	r0, r2
 80083d0:	4798      	blx	r3
    return;
 80083d2:	e0c4      	b.n	800855e <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	095b      	lsrs	r3, r3, #5
 80083d8:	001a      	movs	r2, r3
 80083da:	2301      	movs	r3, #1
 80083dc:	4013      	ands	r3, r2
 80083de:	d10c      	bne.n	80083fa <HAL_SPI_IRQHandler+0x8e>
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	099b      	lsrs	r3, r3, #6
 80083e4:	001a      	movs	r2, r3
 80083e6:	2301      	movs	r3, #1
 80083e8:	4013      	ands	r3, r2
 80083ea:	d106      	bne.n	80083fa <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	0a1b      	lsrs	r3, r3, #8
 80083f0:	001a      	movs	r2, r3
 80083f2:	2301      	movs	r3, #1
 80083f4:	4013      	ands	r3, r2
 80083f6:	d100      	bne.n	80083fa <HAL_SPI_IRQHandler+0x8e>
 80083f8:	e0b1      	b.n	800855e <HAL_SPI_IRQHandler+0x1f2>
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	095b      	lsrs	r3, r3, #5
 80083fe:	001a      	movs	r2, r3
 8008400:	2301      	movs	r3, #1
 8008402:	4013      	ands	r3, r2
 8008404:	d100      	bne.n	8008408 <HAL_SPI_IRQHandler+0x9c>
 8008406:	e0aa      	b.n	800855e <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	099b      	lsrs	r3, r3, #6
 800840c:	001a      	movs	r2, r3
 800840e:	2301      	movs	r3, #1
 8008410:	4013      	ands	r3, r2
 8008412:	d023      	beq.n	800845c <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2251      	movs	r2, #81	; 0x51
 8008418:	5c9b      	ldrb	r3, [r3, r2]
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b03      	cmp	r3, #3
 800841e:	d011      	beq.n	8008444 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008424:	2204      	movs	r2, #4
 8008426:	431a      	orrs	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800842c:	2300      	movs	r3, #0
 800842e:	617b      	str	r3, [r7, #20]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	617b      	str	r3, [r7, #20]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	617b      	str	r3, [r7, #20]
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	e00b      	b.n	800845c <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008444:	2300      	movs	r3, #0
 8008446:	613b      	str	r3, [r7, #16]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	613b      	str	r3, [r7, #16]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	613b      	str	r3, [r7, #16]
 8008458:	693b      	ldr	r3, [r7, #16]
        return;
 800845a:	e080      	b.n	800855e <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	095b      	lsrs	r3, r3, #5
 8008460:	001a      	movs	r2, r3
 8008462:	2301      	movs	r3, #1
 8008464:	4013      	ands	r3, r2
 8008466:	d014      	beq.n	8008492 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800846c:	2201      	movs	r2, #1
 800846e:	431a      	orrs	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008474:	2300      	movs	r3, #0
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	60fb      	str	r3, [r7, #12]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2140      	movs	r1, #64	; 0x40
 800848c:	438a      	bics	r2, r1
 800848e:	601a      	str	r2, [r3, #0]
 8008490:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	0a1b      	lsrs	r3, r3, #8
 8008496:	001a      	movs	r2, r3
 8008498:	2301      	movs	r3, #1
 800849a:	4013      	ands	r3, r2
 800849c:	d00c      	beq.n	80084b8 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084a2:	2208      	movs	r2, #8
 80084a4:	431a      	orrs	r2, r3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80084aa:	2300      	movs	r3, #0
 80084ac:	60bb      	str	r3, [r7, #8]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	60bb      	str	r3, [r7, #8]
 80084b6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d04d      	beq.n	800855c <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	685a      	ldr	r2, [r3, #4]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	21e0      	movs	r1, #224	; 0xe0
 80084cc:	438a      	bics	r2, r1
 80084ce:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2251      	movs	r2, #81	; 0x51
 80084d4:	2101      	movs	r1, #1
 80084d6:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	2202      	movs	r2, #2
 80084dc:	4013      	ands	r3, r2
 80084de:	d103      	bne.n	80084e8 <HAL_SPI_IRQHandler+0x17c>
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	2201      	movs	r2, #1
 80084e4:	4013      	ands	r3, r2
 80084e6:	d032      	beq.n	800854e <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	685a      	ldr	r2, [r3, #4]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2103      	movs	r1, #3
 80084f4:	438a      	bics	r2, r1
 80084f6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d010      	beq.n	8008522 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008504:	4a17      	ldr	r2, [pc, #92]	; (8008564 <HAL_SPI_IRQHandler+0x1f8>)
 8008506:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800850c:	0018      	movs	r0, r3
 800850e:	f7fd fbf0 	bl	8005cf2 <HAL_DMA_Abort_IT>
 8008512:	1e03      	subs	r3, r0, #0
 8008514:	d005      	beq.n	8008522 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800851a:	2240      	movs	r2, #64	; 0x40
 800851c:	431a      	orrs	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008526:	2b00      	cmp	r3, #0
 8008528:	d016      	beq.n	8008558 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800852e:	4a0d      	ldr	r2, [pc, #52]	; (8008564 <HAL_SPI_IRQHandler+0x1f8>)
 8008530:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008536:	0018      	movs	r0, r3
 8008538:	f7fd fbdb 	bl	8005cf2 <HAL_DMA_Abort_IT>
 800853c:	1e03      	subs	r3, r0, #0
 800853e:	d00b      	beq.n	8008558 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008544:	2240      	movs	r2, #64	; 0x40
 8008546:	431a      	orrs	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800854c:	e004      	b.n	8008558 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	0018      	movs	r0, r3
 8008552:	f000 f821 	bl	8008598 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008556:	e000      	b.n	800855a <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8008558:	46c0      	nop			; (mov r8, r8)
    return;
 800855a:	46c0      	nop			; (mov r8, r8)
 800855c:	46c0      	nop			; (mov r8, r8)
  }
}
 800855e:	46bd      	mov	sp, r7
 8008560:	b008      	add	sp, #32
 8008562:	bd80      	pop	{r7, pc}
 8008564:	08008769 	.word	0x08008769

08008568 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008570:	46c0      	nop			; (mov r8, r8)
 8008572:	46bd      	mov	sp, r7
 8008574:	b002      	add	sp, #8
 8008576:	bd80      	pop	{r7, pc}

08008578 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008580:	46c0      	nop			; (mov r8, r8)
 8008582:	46bd      	mov	sp, r7
 8008584:	b002      	add	sp, #8
 8008586:	bd80      	pop	{r7, pc}

08008588 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008590:	46c0      	nop			; (mov r8, r8)
 8008592:	46bd      	mov	sp, r7
 8008594:	b002      	add	sp, #8
 8008596:	bd80      	pop	{r7, pc}

08008598 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80085a0:	46c0      	nop			; (mov r8, r8)
 80085a2:	46bd      	mov	sp, r7
 80085a4:	b002      	add	sp, #8
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085b6:	f7fd f92b 	bl	8005810 <HAL_GetTick>
 80085ba:	0003      	movs	r3, r0
 80085bc:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2220      	movs	r2, #32
 80085c6:	4013      	ands	r3, r2
 80085c8:	2b20      	cmp	r3, #32
 80085ca:	d03d      	beq.n	8008648 <SPI_DMAReceiveCplt+0xa0>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	685a      	ldr	r2, [r3, #4]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2120      	movs	r1, #32
 80085d8:	438a      	bics	r2, r1
 80085da:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10e      	bne.n	8008602 <SPI_DMAReceiveCplt+0x5a>
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	685a      	ldr	r2, [r3, #4]
 80085e8:	2382      	movs	r3, #130	; 0x82
 80085ea:	005b      	lsls	r3, r3, #1
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d108      	bne.n	8008602 <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	685a      	ldr	r2, [r3, #4]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2103      	movs	r1, #3
 80085fc:	438a      	bics	r2, r1
 80085fe:	605a      	str	r2, [r3, #4]
 8008600:	e007      	b.n	8008612 <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	685a      	ldr	r2, [r3, #4]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2101      	movs	r1, #1
 800860e:	438a      	bics	r2, r1
 8008610:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008612:	68ba      	ldr	r2, [r7, #8]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2164      	movs	r1, #100	; 0x64
 8008618:	0018      	movs	r0, r3
 800861a:	f000 f949 	bl	80088b0 <SPI_EndRxTransaction>
 800861e:	1e03      	subs	r3, r0, #0
 8008620:	d002      	beq.n	8008628 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2220      	movs	r2, #32
 8008626:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2251      	movs	r2, #81	; 0x51
 8008632:	2101      	movs	r1, #1
 8008634:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800863a:	2b00      	cmp	r3, #0
 800863c:	d004      	beq.n	8008648 <SPI_DMAReceiveCplt+0xa0>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	0018      	movs	r0, r3
 8008642:	f7ff ffa9 	bl	8008598 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008646:	e003      	b.n	8008650 <SPI_DMAReceiveCplt+0xa8>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	0018      	movs	r0, r3
 800864c:	f7fc f9ba 	bl	80049c4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008650:	46bd      	mov	sp, r7
 8008652:	b004      	add	sp, #16
 8008654:	bd80      	pop	{r7, pc}

08008656 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b084      	sub	sp, #16
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008662:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008664:	f7fd f8d4 	bl	8005810 <HAL_GetTick>
 8008668:	0003      	movs	r3, r0
 800866a:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2220      	movs	r2, #32
 8008674:	4013      	ands	r3, r2
 8008676:	2b20      	cmp	r3, #32
 8008678:	d030      	beq.n	80086dc <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	685a      	ldr	r2, [r3, #4]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2120      	movs	r1, #32
 8008686:	438a      	bics	r2, r1
 8008688:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2164      	movs	r1, #100	; 0x64
 8008690:	0018      	movs	r0, r3
 8008692:	f000 f977 	bl	8008984 <SPI_EndRxTxTransaction>
 8008696:	1e03      	subs	r3, r0, #0
 8008698:	d005      	beq.n	80086a6 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800869e:	2220      	movs	r2, #32
 80086a0:	431a      	orrs	r2, r3
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2103      	movs	r1, #3
 80086b2:	438a      	bics	r2, r1
 80086b4:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2200      	movs	r2, #0
 80086ba:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2251      	movs	r2, #81	; 0x51
 80086c6:	2101      	movs	r1, #1
 80086c8:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d004      	beq.n	80086dc <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	0018      	movs	r0, r3
 80086d6:	f7ff ff5f 	bl	8008598 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80086da:	e003      	b.n	80086e4 <SPI_DMATransmitReceiveCplt+0x8e>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	0018      	movs	r0, r3
 80086e0:	f7ff ff42 	bl	8008568 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80086e4:	46bd      	mov	sp, r7
 80086e6:	b004      	add	sp, #16
 80086e8:	bd80      	pop	{r7, pc}

080086ea <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f6:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	0018      	movs	r0, r3
 80086fc:	f7ff ff3c 	bl	8008578 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008700:	46c0      	nop			; (mov r8, r8)
 8008702:	46bd      	mov	sp, r7
 8008704:	b004      	add	sp, #16
 8008706:	bd80      	pop	{r7, pc}

08008708 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008714:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	0018      	movs	r0, r3
 800871a:	f7ff ff35 	bl	8008588 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800871e:	46c0      	nop			; (mov r8, r8)
 8008720:	46bd      	mov	sp, r7
 8008722:	b004      	add	sp, #16
 8008724:	bd80      	pop	{r7, pc}

08008726 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b084      	sub	sp, #16
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008732:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	685a      	ldr	r2, [r3, #4]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2103      	movs	r1, #3
 8008740:	438a      	bics	r2, r1
 8008742:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008748:	2210      	movs	r2, #16
 800874a:	431a      	orrs	r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2251      	movs	r2, #81	; 0x51
 8008754:	2101      	movs	r1, #1
 8008756:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	0018      	movs	r0, r3
 800875c:	f7ff ff1c 	bl	8008598 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008760:	46c0      	nop			; (mov r8, r8)
 8008762:	46bd      	mov	sp, r7
 8008764:	b004      	add	sp, #16
 8008766:	bd80      	pop	{r7, pc}

08008768 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008774:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	0018      	movs	r0, r3
 8008786:	f7ff ff07 	bl	8008598 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800878a:	46c0      	nop			; (mov r8, r8)
 800878c:	46bd      	mov	sp, r7
 800878e:	b004      	add	sp, #16
 8008790:	bd80      	pop	{r7, pc}
	...

08008794 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b088      	sub	sp, #32
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	603b      	str	r3, [r7, #0]
 80087a0:	1dfb      	adds	r3, r7, #7
 80087a2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80087a4:	f7fd f834 	bl	8005810 <HAL_GetTick>
 80087a8:	0002      	movs	r2, r0
 80087aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ac:	1a9b      	subs	r3, r3, r2
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	18d3      	adds	r3, r2, r3
 80087b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80087b4:	f7fd f82c 	bl	8005810 <HAL_GetTick>
 80087b8:	0003      	movs	r3, r0
 80087ba:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80087bc:	4b3a      	ldr	r3, [pc, #232]	; (80088a8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	015b      	lsls	r3, r3, #5
 80087c2:	0d1b      	lsrs	r3, r3, #20
 80087c4:	69fa      	ldr	r2, [r7, #28]
 80087c6:	4353      	muls	r3, r2
 80087c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087ca:	e058      	b.n	800887e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	3301      	adds	r3, #1
 80087d0:	d055      	beq.n	800887e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80087d2:	f7fd f81d 	bl	8005810 <HAL_GetTick>
 80087d6:	0002      	movs	r2, r0
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	69fa      	ldr	r2, [r7, #28]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d902      	bls.n	80087e8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d142      	bne.n	800886e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	21e0      	movs	r1, #224	; 0xe0
 80087f4:	438a      	bics	r2, r1
 80087f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	685a      	ldr	r2, [r3, #4]
 80087fc:	2382      	movs	r3, #130	; 0x82
 80087fe:	005b      	lsls	r3, r3, #1
 8008800:	429a      	cmp	r2, r3
 8008802:	d113      	bne.n	800882c <SPI_WaitFlagStateUntilTimeout+0x98>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	689a      	ldr	r2, [r3, #8]
 8008808:	2380      	movs	r3, #128	; 0x80
 800880a:	021b      	lsls	r3, r3, #8
 800880c:	429a      	cmp	r2, r3
 800880e:	d005      	beq.n	800881c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	689a      	ldr	r2, [r3, #8]
 8008814:	2380      	movs	r3, #128	; 0x80
 8008816:	00db      	lsls	r3, r3, #3
 8008818:	429a      	cmp	r2, r3
 800881a:	d107      	bne.n	800882c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2140      	movs	r1, #64	; 0x40
 8008828:	438a      	bics	r2, r1
 800882a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008830:	2380      	movs	r3, #128	; 0x80
 8008832:	019b      	lsls	r3, r3, #6
 8008834:	429a      	cmp	r2, r3
 8008836:	d110      	bne.n	800885a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	491a      	ldr	r1, [pc, #104]	; (80088ac <SPI_WaitFlagStateUntilTimeout+0x118>)
 8008844:	400a      	ands	r2, r1
 8008846:	601a      	str	r2, [r3, #0]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2180      	movs	r1, #128	; 0x80
 8008854:	0189      	lsls	r1, r1, #6
 8008856:	430a      	orrs	r2, r1
 8008858:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2251      	movs	r2, #81	; 0x51
 800885e:	2101      	movs	r1, #1
 8008860:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2250      	movs	r2, #80	; 0x50
 8008866:	2100      	movs	r1, #0
 8008868:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e017      	b.n	800889e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d101      	bne.n	8008878 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8008874:	2300      	movs	r3, #0
 8008876:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	3b01      	subs	r3, #1
 800887c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	4013      	ands	r3, r2
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	425a      	negs	r2, r3
 800888e:	4153      	adcs	r3, r2
 8008890:	b2db      	uxtb	r3, r3
 8008892:	001a      	movs	r2, r3
 8008894:	1dfb      	adds	r3, r7, #7
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	429a      	cmp	r2, r3
 800889a:	d197      	bne.n	80087cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	0018      	movs	r0, r3
 80088a0:	46bd      	mov	sp, r7
 80088a2:	b008      	add	sp, #32
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	46c0      	nop			; (mov r8, r8)
 80088a8:	2000016c 	.word	0x2000016c
 80088ac:	ffffdfff 	.word	0xffffdfff

080088b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af02      	add	r7, sp, #8
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	685a      	ldr	r2, [r3, #4]
 80088c0:	2382      	movs	r3, #130	; 0x82
 80088c2:	005b      	lsls	r3, r3, #1
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d113      	bne.n	80088f0 <SPI_EndRxTransaction+0x40>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	689a      	ldr	r2, [r3, #8]
 80088cc:	2380      	movs	r3, #128	; 0x80
 80088ce:	021b      	lsls	r3, r3, #8
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d005      	beq.n	80088e0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	689a      	ldr	r2, [r3, #8]
 80088d8:	2380      	movs	r3, #128	; 0x80
 80088da:	00db      	lsls	r3, r3, #3
 80088dc:	429a      	cmp	r2, r3
 80088de:	d107      	bne.n	80088f0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2140      	movs	r1, #64	; 0x40
 80088ec:	438a      	bics	r2, r1
 80088ee:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	685a      	ldr	r2, [r3, #4]
 80088f4:	2382      	movs	r3, #130	; 0x82
 80088f6:	005b      	lsls	r3, r3, #1
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d12b      	bne.n	8008954 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	689a      	ldr	r2, [r3, #8]
 8008900:	2380      	movs	r3, #128	; 0x80
 8008902:	00db      	lsls	r3, r3, #3
 8008904:	429a      	cmp	r2, r3
 8008906:	d012      	beq.n	800892e <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	0013      	movs	r3, r2
 8008912:	2200      	movs	r2, #0
 8008914:	2180      	movs	r1, #128	; 0x80
 8008916:	f7ff ff3d 	bl	8008794 <SPI_WaitFlagStateUntilTimeout>
 800891a:	1e03      	subs	r3, r0, #0
 800891c:	d02d      	beq.n	800897a <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008922:	2220      	movs	r2, #32
 8008924:	431a      	orrs	r2, r3
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	e026      	b.n	800897c <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	0013      	movs	r3, r2
 8008938:	2200      	movs	r2, #0
 800893a:	2101      	movs	r1, #1
 800893c:	f7ff ff2a 	bl	8008794 <SPI_WaitFlagStateUntilTimeout>
 8008940:	1e03      	subs	r3, r0, #0
 8008942:	d01a      	beq.n	800897a <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008948:	2220      	movs	r2, #32
 800894a:	431a      	orrs	r2, r3
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008950:	2303      	movs	r3, #3
 8008952:	e013      	b.n	800897c <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	9300      	str	r3, [sp, #0]
 800895c:	0013      	movs	r3, r2
 800895e:	2200      	movs	r2, #0
 8008960:	2101      	movs	r1, #1
 8008962:	f7ff ff17 	bl	8008794 <SPI_WaitFlagStateUntilTimeout>
 8008966:	1e03      	subs	r3, r0, #0
 8008968:	d007      	beq.n	800897a <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800896e:	2220      	movs	r2, #32
 8008970:	431a      	orrs	r2, r3
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008976:	2303      	movs	r3, #3
 8008978:	e000      	b.n	800897c <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	0018      	movs	r0, r3
 800897e:	46bd      	mov	sp, r7
 8008980:	b004      	add	sp, #16
 8008982:	bd80      	pop	{r7, pc}

08008984 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b088      	sub	sp, #32
 8008988:	af02      	add	r7, sp, #8
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008990:	4b1d      	ldr	r3, [pc, #116]	; (8008a08 <SPI_EndRxTxTransaction+0x84>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	491d      	ldr	r1, [pc, #116]	; (8008a0c <SPI_EndRxTxTransaction+0x88>)
 8008996:	0018      	movs	r0, r3
 8008998:	f7f7 fbcc 	bl	8000134 <__udivsi3>
 800899c:	0003      	movs	r3, r0
 800899e:	001a      	movs	r2, r3
 80089a0:	0013      	movs	r3, r2
 80089a2:	015b      	lsls	r3, r3, #5
 80089a4:	1a9b      	subs	r3, r3, r2
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	189b      	adds	r3, r3, r2
 80089aa:	00db      	lsls	r3, r3, #3
 80089ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	685a      	ldr	r2, [r3, #4]
 80089b2:	2382      	movs	r3, #130	; 0x82
 80089b4:	005b      	lsls	r3, r3, #1
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d112      	bne.n	80089e0 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	0013      	movs	r3, r2
 80089c4:	2200      	movs	r2, #0
 80089c6:	2180      	movs	r1, #128	; 0x80
 80089c8:	f7ff fee4 	bl	8008794 <SPI_WaitFlagStateUntilTimeout>
 80089cc:	1e03      	subs	r3, r0, #0
 80089ce:	d016      	beq.n	80089fe <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d4:	2220      	movs	r2, #32
 80089d6:	431a      	orrs	r2, r3
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80089dc:	2303      	movs	r3, #3
 80089de:	e00f      	b.n	8008a00 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00a      	beq.n	80089fc <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	3b01      	subs	r3, #1
 80089ea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	2280      	movs	r2, #128	; 0x80
 80089f4:	4013      	ands	r3, r2
 80089f6:	2b80      	cmp	r3, #128	; 0x80
 80089f8:	d0f2      	beq.n	80089e0 <SPI_EndRxTxTransaction+0x5c>
 80089fa:	e000      	b.n	80089fe <SPI_EndRxTxTransaction+0x7a>
        break;
 80089fc:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	0018      	movs	r0, r3
 8008a02:	46bd      	mov	sp, r7
 8008a04:	b006      	add	sp, #24
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	2000016c 	.word	0x2000016c
 8008a0c:	016e3600 	.word	0x016e3600

08008a10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d101      	bne.n	8008a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e044      	b.n	8008aac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d107      	bne.n	8008a3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2274      	movs	r2, #116	; 0x74
 8008a2e:	2100      	movs	r1, #0
 8008a30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	0018      	movs	r0, r3
 8008a36:	f7fc fb15 	bl	8005064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2224      	movs	r2, #36	; 0x24
 8008a3e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2101      	movs	r1, #1
 8008a4c:	438a      	bics	r2, r1
 8008a4e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	0018      	movs	r0, r3
 8008a54:	f000 fcdc 	bl	8009410 <UART_SetConfig>
 8008a58:	0003      	movs	r3, r0
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d101      	bne.n	8008a62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e024      	b.n	8008aac <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d003      	beq.n	8008a72 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	0018      	movs	r0, r3
 8008a6e:	f000 ff8b 	bl	8009988 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	685a      	ldr	r2, [r3, #4]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	490d      	ldr	r1, [pc, #52]	; (8008ab4 <HAL_UART_Init+0xa4>)
 8008a7e:	400a      	ands	r2, r1
 8008a80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	689a      	ldr	r2, [r3, #8]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	212a      	movs	r1, #42	; 0x2a
 8008a8e:	438a      	bics	r2, r1
 8008a90:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2101      	movs	r1, #1
 8008a9e:	430a      	orrs	r2, r1
 8008aa0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	0018      	movs	r0, r3
 8008aa6:	f001 f823 	bl	8009af0 <UART_CheckIdleState>
 8008aaa:	0003      	movs	r3, r0
}
 8008aac:	0018      	movs	r0, r3
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	b002      	add	sp, #8
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	ffffb7ff 	.word	0xffffb7ff

08008ab8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b08a      	sub	sp, #40	; 0x28
 8008abc:	af02      	add	r7, sp, #8
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	603b      	str	r3, [r7, #0]
 8008ac4:	1dbb      	adds	r3, r7, #6
 8008ac6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008acc:	2b20      	cmp	r3, #32
 8008ace:	d000      	beq.n	8008ad2 <HAL_UART_Transmit+0x1a>
 8008ad0:	e095      	b.n	8008bfe <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d003      	beq.n	8008ae0 <HAL_UART_Transmit+0x28>
 8008ad8:	1dbb      	adds	r3, r7, #6
 8008ada:	881b      	ldrh	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d101      	bne.n	8008ae4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e08d      	b.n	8008c00 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	689a      	ldr	r2, [r3, #8]
 8008ae8:	2380      	movs	r3, #128	; 0x80
 8008aea:	015b      	lsls	r3, r3, #5
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d109      	bne.n	8008b04 <HAL_UART_Transmit+0x4c>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d105      	bne.n	8008b04 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	2201      	movs	r2, #1
 8008afc:	4013      	ands	r3, r2
 8008afe:	d001      	beq.n	8008b04 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e07d      	b.n	8008c00 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2274      	movs	r2, #116	; 0x74
 8008b08:	5c9b      	ldrb	r3, [r3, r2]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d101      	bne.n	8008b12 <HAL_UART_Transmit+0x5a>
 8008b0e:	2302      	movs	r3, #2
 8008b10:	e076      	b.n	8008c00 <HAL_UART_Transmit+0x148>
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2274      	movs	r2, #116	; 0x74
 8008b16:	2101      	movs	r1, #1
 8008b18:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2280      	movs	r2, #128	; 0x80
 8008b1e:	2100      	movs	r1, #0
 8008b20:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2221      	movs	r2, #33	; 0x21
 8008b26:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b28:	f7fc fe72 	bl	8005810 <HAL_GetTick>
 8008b2c:	0003      	movs	r3, r0
 8008b2e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	1dba      	adds	r2, r7, #6
 8008b34:	2150      	movs	r1, #80	; 0x50
 8008b36:	8812      	ldrh	r2, [r2, #0]
 8008b38:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	1dba      	adds	r2, r7, #6
 8008b3e:	2152      	movs	r1, #82	; 0x52
 8008b40:	8812      	ldrh	r2, [r2, #0]
 8008b42:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	689a      	ldr	r2, [r3, #8]
 8008b48:	2380      	movs	r3, #128	; 0x80
 8008b4a:	015b      	lsls	r3, r3, #5
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d108      	bne.n	8008b62 <HAL_UART_Transmit+0xaa>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d104      	bne.n	8008b62 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	61bb      	str	r3, [r7, #24]
 8008b60:	e003      	b.n	8008b6a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b66:	2300      	movs	r3, #0
 8008b68:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2274      	movs	r2, #116	; 0x74
 8008b6e:	2100      	movs	r1, #0
 8008b70:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8008b72:	e02c      	b.n	8008bce <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b74:	697a      	ldr	r2, [r7, #20]
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	9300      	str	r3, [sp, #0]
 8008b7c:	0013      	movs	r3, r2
 8008b7e:	2200      	movs	r2, #0
 8008b80:	2180      	movs	r1, #128	; 0x80
 8008b82:	f000 ffff 	bl	8009b84 <UART_WaitOnFlagUntilTimeout>
 8008b86:	1e03      	subs	r3, r0, #0
 8008b88:	d001      	beq.n	8008b8e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	e038      	b.n	8008c00 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10b      	bne.n	8008bac <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	001a      	movs	r2, r3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	05d2      	lsls	r2, r2, #23
 8008ba0:	0dd2      	lsrs	r2, r2, #23
 8008ba2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	3302      	adds	r3, #2
 8008ba8:	61bb      	str	r3, [r7, #24]
 8008baa:	e007      	b.n	8008bbc <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	781a      	ldrb	r2, [r3, #0]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2252      	movs	r2, #82	; 0x52
 8008bc0:	5a9b      	ldrh	r3, [r3, r2]
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	b299      	uxth	r1, r3
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2252      	movs	r2, #82	; 0x52
 8008bcc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2252      	movs	r2, #82	; 0x52
 8008bd2:	5a9b      	ldrh	r3, [r3, r2]
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1cc      	bne.n	8008b74 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008bda:	697a      	ldr	r2, [r7, #20]
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	9300      	str	r3, [sp, #0]
 8008be2:	0013      	movs	r3, r2
 8008be4:	2200      	movs	r2, #0
 8008be6:	2140      	movs	r1, #64	; 0x40
 8008be8:	f000 ffcc 	bl	8009b84 <UART_WaitOnFlagUntilTimeout>
 8008bec:	1e03      	subs	r3, r0, #0
 8008bee:	d001      	beq.n	8008bf4 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	e005      	b.n	8008c00 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2220      	movs	r2, #32
 8008bf8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	e000      	b.n	8008c00 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8008bfe:	2302      	movs	r3, #2
  }
}
 8008c00:	0018      	movs	r0, r3
 8008c02:	46bd      	mov	sp, r7
 8008c04:	b008      	add	sp, #32
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b088      	sub	sp, #32
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	1dbb      	adds	r3, r7, #6
 8008c14:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c1a:	2b20      	cmp	r3, #32
 8008c1c:	d000      	beq.n	8008c20 <HAL_UART_Transmit_DMA+0x18>
 8008c1e:	e088      	b.n	8008d32 <HAL_UART_Transmit_DMA+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d003      	beq.n	8008c2e <HAL_UART_Transmit_DMA+0x26>
 8008c26:	1dbb      	adds	r3, r7, #6
 8008c28:	881b      	ldrh	r3, [r3, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d101      	bne.n	8008c32 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e080      	b.n	8008d34 <HAL_UART_Transmit_DMA+0x12c>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	689a      	ldr	r2, [r3, #8]
 8008c36:	2380      	movs	r3, #128	; 0x80
 8008c38:	015b      	lsls	r3, r3, #5
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d109      	bne.n	8008c52 <HAL_UART_Transmit_DMA+0x4a>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d105      	bne.n	8008c52 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	d001      	beq.n	8008c52 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e070      	b.n	8008d34 <HAL_UART_Transmit_DMA+0x12c>
      }
    }

    __HAL_LOCK(huart);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2274      	movs	r2, #116	; 0x74
 8008c56:	5c9b      	ldrb	r3, [r3, r2]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d101      	bne.n	8008c60 <HAL_UART_Transmit_DMA+0x58>
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	e069      	b.n	8008d34 <HAL_UART_Transmit_DMA+0x12c>
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2274      	movs	r2, #116	; 0x74
 8008c64:	2101      	movs	r1, #1
 8008c66:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	68ba      	ldr	r2, [r7, #8]
 8008c6c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	1dba      	adds	r2, r7, #6
 8008c72:	2150      	movs	r1, #80	; 0x50
 8008c74:	8812      	ldrh	r2, [r2, #0]
 8008c76:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	1dba      	adds	r2, r7, #6
 8008c7c:	2152      	movs	r1, #82	; 0x52
 8008c7e:	8812      	ldrh	r2, [r2, #0]
 8008c80:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2280      	movs	r2, #128	; 0x80
 8008c86:	2100      	movs	r1, #0
 8008c88:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2221      	movs	r2, #33	; 0x21
 8008c8e:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d02b      	beq.n	8008cf0 <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c9c:	4a27      	ldr	r2, [pc, #156]	; (8008d3c <HAL_UART_Transmit_DMA+0x134>)
 8008c9e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ca4:	4a26      	ldr	r2, [pc, #152]	; (8008d40 <HAL_UART_Transmit_DMA+0x138>)
 8008ca6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cac:	4a25      	ldr	r2, [pc, #148]	; (8008d44 <HAL_UART_Transmit_DMA+0x13c>)
 8008cae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cc0:	0019      	movs	r1, r3
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	3328      	adds	r3, #40	; 0x28
 8008cc8:	001a      	movs	r2, r3
 8008cca:	1dbb      	adds	r3, r7, #6
 8008ccc:	881b      	ldrh	r3, [r3, #0]
 8008cce:	f7fc ff6a 	bl	8005ba6 <HAL_DMA_Start_IT>
 8008cd2:	1e03      	subs	r3, r0, #0
 8008cd4:	d00c      	beq.n	8008cf0 <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2280      	movs	r2, #128	; 0x80
 8008cda:	2110      	movs	r1, #16
 8008cdc:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2274      	movs	r2, #116	; 0x74
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2220      	movs	r2, #32
 8008cea:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	e021      	b.n	8008d34 <HAL_UART_Transmit_DMA+0x12c>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2240      	movs	r2, #64	; 0x40
 8008cf6:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2274      	movs	r2, #116	; 0x74
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d00:	f3ef 8310 	mrs	r3, PRIMASK
 8008d04:	613b      	str	r3, [r7, #16]
  return(result);
 8008d06:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d08:	61fb      	str	r3, [r7, #28]
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	f383 8810 	msr	PRIMASK, r3
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	689a      	ldr	r2, [r3, #8]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2180      	movs	r1, #128	; 0x80
 8008d20:	430a      	orrs	r2, r1
 8008d22:	609a      	str	r2, [r3, #8]
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	61bb      	str	r3, [r7, #24]
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	f383 8810 	msr	PRIMASK, r3

    return HAL_OK;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	e000      	b.n	8008d34 <HAL_UART_Transmit_DMA+0x12c>
  }
  else
  {
    return HAL_BUSY;
 8008d32:	2302      	movs	r3, #2
  }
}
 8008d34:	0018      	movs	r0, r3
 8008d36:	46bd      	mov	sp, r7
 8008d38:	b008      	add	sp, #32
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	08009f31 	.word	0x08009f31
 8008d40:	08009fc1 	.word	0x08009fc1
 8008d44:	0800a135 	.word	0x0800a135

08008d48 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b088      	sub	sp, #32
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	1dbb      	adds	r3, r7, #6
 8008d54:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d5a:	2b20      	cmp	r3, #32
 8008d5c:	d153      	bne.n	8008e06 <HAL_UART_Receive_DMA+0xbe>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d003      	beq.n	8008d6c <HAL_UART_Receive_DMA+0x24>
 8008d64:	1dbb      	adds	r3, r7, #6
 8008d66:	881b      	ldrh	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d101      	bne.n	8008d70 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e04b      	b.n	8008e08 <HAL_UART_Receive_DMA+0xc0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	689a      	ldr	r2, [r3, #8]
 8008d74:	2380      	movs	r3, #128	; 0x80
 8008d76:	015b      	lsls	r3, r3, #5
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d109      	bne.n	8008d90 <HAL_UART_Receive_DMA+0x48>
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d105      	bne.n	8008d90 <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	2201      	movs	r2, #1
 8008d88:	4013      	ands	r3, r2
 8008d8a:	d001      	beq.n	8008d90 <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e03b      	b.n	8008e08 <HAL_UART_Receive_DMA+0xc0>
      }
    }

    __HAL_LOCK(huart);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2274      	movs	r2, #116	; 0x74
 8008d94:	5c9b      	ldrb	r3, [r3, r2]
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d101      	bne.n	8008d9e <HAL_UART_Receive_DMA+0x56>
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	e034      	b.n	8008e08 <HAL_UART_Receive_DMA+0xc0>
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2274      	movs	r2, #116	; 0x74
 8008da2:	2101      	movs	r1, #1
 8008da4:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a17      	ldr	r2, [pc, #92]	; (8008e10 <HAL_UART_Receive_DMA+0xc8>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d01e      	beq.n	8008df4 <HAL_UART_Receive_DMA+0xac>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	685a      	ldr	r2, [r3, #4]
 8008dbc:	2380      	movs	r3, #128	; 0x80
 8008dbe:	041b      	lsls	r3, r3, #16
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	d017      	beq.n	8008df4 <HAL_UART_Receive_DMA+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dc4:	f3ef 8310 	mrs	r3, PRIMASK
 8008dc8:	613b      	str	r3, [r7, #16]
  return(result);
 8008dca:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008dcc:	61fb      	str	r3, [r7, #28]
 8008dce:	2301      	movs	r3, #1
 8008dd0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	f383 8810 	msr	PRIMASK, r3
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2180      	movs	r1, #128	; 0x80
 8008de4:	04c9      	lsls	r1, r1, #19
 8008de6:	430a      	orrs	r2, r1
 8008de8:	601a      	str	r2, [r3, #0]
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	61bb      	str	r3, [r7, #24]
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	f383 8810 	msr	PRIMASK, r3
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008df4:	1dbb      	adds	r3, r7, #6
 8008df6:	881a      	ldrh	r2, [r3, #0]
 8008df8:	68b9      	ldr	r1, [r7, #8]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	0018      	movs	r0, r3
 8008dfe:	f000 ff7d 	bl	8009cfc <UART_Start_Receive_DMA>
 8008e02:	0003      	movs	r3, r0
 8008e04:	e000      	b.n	8008e08 <HAL_UART_Receive_DMA+0xc0>
  }
  else
  {
    return HAL_BUSY;
 8008e06:	2302      	movs	r3, #2
  }
}
 8008e08:	0018      	movs	r0, r3
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	b008      	add	sp, #32
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	40004800 	.word	0x40004800

08008e14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b0aa      	sub	sp, #168	; 0xa8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	69db      	ldr	r3, [r3, #28]
 8008e22:	22a4      	movs	r2, #164	; 0xa4
 8008e24:	18b9      	adds	r1, r7, r2
 8008e26:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	21a0      	movs	r1, #160	; 0xa0
 8008e30:	1879      	adds	r1, r7, r1
 8008e32:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	219c      	movs	r1, #156	; 0x9c
 8008e3c:	1879      	adds	r1, r7, r1
 8008e3e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008e40:	18bb      	adds	r3, r7, r2
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a99      	ldr	r2, [pc, #612]	; (80090ac <HAL_UART_IRQHandler+0x298>)
 8008e46:	4013      	ands	r3, r2
 8008e48:	2298      	movs	r2, #152	; 0x98
 8008e4a:	18b9      	adds	r1, r7, r2
 8008e4c:	600b      	str	r3, [r1, #0]
  if (errorflags == 0U)
 8008e4e:	18bb      	adds	r3, r7, r2
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d116      	bne.n	8008e84 <HAL_UART_IRQHandler+0x70>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008e56:	23a4      	movs	r3, #164	; 0xa4
 8008e58:	18fb      	adds	r3, r7, r3
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2220      	movs	r2, #32
 8008e5e:	4013      	ands	r3, r2
 8008e60:	d010      	beq.n	8008e84 <HAL_UART_IRQHandler+0x70>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008e62:	23a0      	movs	r3, #160	; 0xa0
 8008e64:	18fb      	adds	r3, r7, r3
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2220      	movs	r2, #32
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	d00a      	beq.n	8008e84 <HAL_UART_IRQHandler+0x70>
    {
      if (huart->RxISR != NULL)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d100      	bne.n	8008e78 <HAL_UART_IRQHandler+0x64>
 8008e76:	e28e      	b.n	8009396 <HAL_UART_IRQHandler+0x582>
      {
        huart->RxISR(huart);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	0010      	movs	r0, r2
 8008e80:	4798      	blx	r3
      }
      return;
 8008e82:	e288      	b.n	8009396 <HAL_UART_IRQHandler+0x582>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e84:	2398      	movs	r3, #152	; 0x98
 8008e86:	18fb      	adds	r3, r7, r3
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d100      	bne.n	8008e90 <HAL_UART_IRQHandler+0x7c>
 8008e8e:	e113      	b.n	80090b8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008e90:	239c      	movs	r3, #156	; 0x9c
 8008e92:	18fb      	adds	r3, r7, r3
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2201      	movs	r2, #1
 8008e98:	4013      	ands	r3, r2
 8008e9a:	d106      	bne.n	8008eaa <HAL_UART_IRQHandler+0x96>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008e9c:	23a0      	movs	r3, #160	; 0xa0
 8008e9e:	18fb      	adds	r3, r7, r3
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a83      	ldr	r2, [pc, #524]	; (80090b0 <HAL_UART_IRQHandler+0x29c>)
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	d100      	bne.n	8008eaa <HAL_UART_IRQHandler+0x96>
 8008ea8:	e106      	b.n	80090b8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008eaa:	23a4      	movs	r3, #164	; 0xa4
 8008eac:	18fb      	adds	r3, r7, r3
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	d012      	beq.n	8008edc <HAL_UART_IRQHandler+0xc8>
 8008eb6:	23a0      	movs	r3, #160	; 0xa0
 8008eb8:	18fb      	adds	r3, r7, r3
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	2380      	movs	r3, #128	; 0x80
 8008ebe:	005b      	lsls	r3, r3, #1
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	d00b      	beq.n	8008edc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2280      	movs	r2, #128	; 0x80
 8008ed0:	589b      	ldr	r3, [r3, r2]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	431a      	orrs	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2180      	movs	r1, #128	; 0x80
 8008eda:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008edc:	23a4      	movs	r3, #164	; 0xa4
 8008ede:	18fb      	adds	r3, r7, r3
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2202      	movs	r2, #2
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	d011      	beq.n	8008f0c <HAL_UART_IRQHandler+0xf8>
 8008ee8:	239c      	movs	r3, #156	; 0x9c
 8008eea:	18fb      	adds	r3, r7, r3
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	d00b      	beq.n	8008f0c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2202      	movs	r2, #2
 8008efa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2280      	movs	r2, #128	; 0x80
 8008f00:	589b      	ldr	r3, [r3, r2]
 8008f02:	2204      	movs	r2, #4
 8008f04:	431a      	orrs	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2180      	movs	r1, #128	; 0x80
 8008f0a:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f0c:	23a4      	movs	r3, #164	; 0xa4
 8008f0e:	18fb      	adds	r3, r7, r3
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2204      	movs	r2, #4
 8008f14:	4013      	ands	r3, r2
 8008f16:	d011      	beq.n	8008f3c <HAL_UART_IRQHandler+0x128>
 8008f18:	239c      	movs	r3, #156	; 0x9c
 8008f1a:	18fb      	adds	r3, r7, r3
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	4013      	ands	r3, r2
 8008f22:	d00b      	beq.n	8008f3c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2204      	movs	r2, #4
 8008f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2280      	movs	r2, #128	; 0x80
 8008f30:	589b      	ldr	r3, [r3, r2]
 8008f32:	2202      	movs	r2, #2
 8008f34:	431a      	orrs	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2180      	movs	r1, #128	; 0x80
 8008f3a:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008f3c:	23a4      	movs	r3, #164	; 0xa4
 8008f3e:	18fb      	adds	r3, r7, r3
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2208      	movs	r2, #8
 8008f44:	4013      	ands	r3, r2
 8008f46:	d017      	beq.n	8008f78 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008f48:	23a0      	movs	r3, #160	; 0xa0
 8008f4a:	18fb      	adds	r3, r7, r3
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2220      	movs	r2, #32
 8008f50:	4013      	ands	r3, r2
 8008f52:	d105      	bne.n	8008f60 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008f54:	239c      	movs	r3, #156	; 0x9c
 8008f56:	18fb      	adds	r3, r7, r3
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008f5e:	d00b      	beq.n	8008f78 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2208      	movs	r2, #8
 8008f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2280      	movs	r2, #128	; 0x80
 8008f6c:	589b      	ldr	r3, [r3, r2]
 8008f6e:	2208      	movs	r2, #8
 8008f70:	431a      	orrs	r2, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2180      	movs	r1, #128	; 0x80
 8008f76:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008f78:	23a4      	movs	r3, #164	; 0xa4
 8008f7a:	18fb      	adds	r3, r7, r3
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	2380      	movs	r3, #128	; 0x80
 8008f80:	011b      	lsls	r3, r3, #4
 8008f82:	4013      	ands	r3, r2
 8008f84:	d013      	beq.n	8008fae <HAL_UART_IRQHandler+0x19a>
 8008f86:	23a0      	movs	r3, #160	; 0xa0
 8008f88:	18fb      	adds	r3, r7, r3
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	2380      	movs	r3, #128	; 0x80
 8008f8e:	04db      	lsls	r3, r3, #19
 8008f90:	4013      	ands	r3, r2
 8008f92:	d00c      	beq.n	8008fae <HAL_UART_IRQHandler+0x19a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2280      	movs	r2, #128	; 0x80
 8008f9a:	0112      	lsls	r2, r2, #4
 8008f9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2280      	movs	r2, #128	; 0x80
 8008fa2:	589b      	ldr	r3, [r3, r2]
 8008fa4:	2220      	movs	r2, #32
 8008fa6:	431a      	orrs	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2180      	movs	r1, #128	; 0x80
 8008fac:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2280      	movs	r2, #128	; 0x80
 8008fb2:	589b      	ldr	r3, [r3, r2]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d100      	bne.n	8008fba <HAL_UART_IRQHandler+0x1a6>
 8008fb8:	e1ef      	b.n	800939a <HAL_UART_IRQHandler+0x586>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008fba:	23a4      	movs	r3, #164	; 0xa4
 8008fbc:	18fb      	adds	r3, r7, r3
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2220      	movs	r2, #32
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	d00e      	beq.n	8008fe4 <HAL_UART_IRQHandler+0x1d0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008fc6:	23a0      	movs	r3, #160	; 0xa0
 8008fc8:	18fb      	adds	r3, r7, r3
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2220      	movs	r2, #32
 8008fce:	4013      	ands	r3, r2
 8008fd0:	d008      	beq.n	8008fe4 <HAL_UART_IRQHandler+0x1d0>
      {
        if (huart->RxISR != NULL)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d004      	beq.n	8008fe4 <HAL_UART_IRQHandler+0x1d0>
        {
          huart->RxISR(huart);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	0010      	movs	r0, r2
 8008fe2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2280      	movs	r2, #128	; 0x80
 8008fe8:	589b      	ldr	r3, [r3, r2]
 8008fea:	2294      	movs	r2, #148	; 0x94
 8008fec:	18ba      	adds	r2, r7, r2
 8008fee:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	2240      	movs	r2, #64	; 0x40
 8008ff8:	4013      	ands	r3, r2
 8008ffa:	2b40      	cmp	r3, #64	; 0x40
 8008ffc:	d005      	beq.n	800900a <HAL_UART_IRQHandler+0x1f6>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008ffe:	2394      	movs	r3, #148	; 0x94
 8009000:	18fb      	adds	r3, r7, r3
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2228      	movs	r2, #40	; 0x28
 8009006:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009008:	d045      	beq.n	8009096 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	0018      	movs	r0, r3
 800900e:	f000 ff33 	bl	8009e78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	2240      	movs	r2, #64	; 0x40
 800901a:	4013      	ands	r3, r2
 800901c:	2b40      	cmp	r3, #64	; 0x40
 800901e:	d135      	bne.n	800908c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009020:	f3ef 8310 	mrs	r3, PRIMASK
 8009024:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8009026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009028:	2090      	movs	r0, #144	; 0x90
 800902a:	183a      	adds	r2, r7, r0
 800902c:	6013      	str	r3, [r2, #0]
 800902e:	2301      	movs	r3, #1
 8009030:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009034:	f383 8810 	msr	PRIMASK, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	689a      	ldr	r2, [r3, #8]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2140      	movs	r1, #64	; 0x40
 8009044:	438a      	bics	r2, r1
 8009046:	609a      	str	r2, [r3, #8]
 8009048:	183b      	adds	r3, r7, r0
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	66bb      	str	r3, [r7, #104]	; 0x68
 800904e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009050:	f383 8810 	msr	PRIMASK, r3

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009058:	2b00      	cmp	r3, #0
 800905a:	d012      	beq.n	8009082 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009060:	4a14      	ldr	r2, [pc, #80]	; (80090b4 <HAL_UART_IRQHandler+0x2a0>)
 8009062:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009068:	0018      	movs	r0, r3
 800906a:	f7fc fe42 	bl	8005cf2 <HAL_DMA_Abort_IT>
 800906e:	1e03      	subs	r3, r0, #0
 8009070:	d01a      	beq.n	80090a8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800907c:	0018      	movs	r0, r3
 800907e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009080:	e012      	b.n	80090a8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	0018      	movs	r0, r3
 8009086:	f000 f9af 	bl	80093e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800908a:	e00d      	b.n	80090a8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	0018      	movs	r0, r3
 8009090:	f000 f9aa 	bl	80093e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009094:	e008      	b.n	80090a8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	0018      	movs	r0, r3
 800909a:	f000 f9a5 	bl	80093e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2280      	movs	r2, #128	; 0x80
 80090a2:	2100      	movs	r1, #0
 80090a4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80090a6:	e178      	b.n	800939a <HAL_UART_IRQHandler+0x586>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090a8:	46c0      	nop			; (mov r8, r8)
    return;
 80090aa:	e176      	b.n	800939a <HAL_UART_IRQHandler+0x586>
 80090ac:	0000080f 	.word	0x0000080f
 80090b0:	04000120 	.word	0x04000120
 80090b4:	0800a1b7 	.word	0x0800a1b7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d000      	beq.n	80090c2 <HAL_UART_IRQHandler+0x2ae>
 80090c0:	e129      	b.n	8009316 <HAL_UART_IRQHandler+0x502>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80090c2:	23a4      	movs	r3, #164	; 0xa4
 80090c4:	18fb      	adds	r3, r7, r3
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2210      	movs	r2, #16
 80090ca:	4013      	ands	r3, r2
 80090cc:	d100      	bne.n	80090d0 <HAL_UART_IRQHandler+0x2bc>
 80090ce:	e122      	b.n	8009316 <HAL_UART_IRQHandler+0x502>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80090d0:	23a0      	movs	r3, #160	; 0xa0
 80090d2:	18fb      	adds	r3, r7, r3
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2210      	movs	r2, #16
 80090d8:	4013      	ands	r3, r2
 80090da:	d100      	bne.n	80090de <HAL_UART_IRQHandler+0x2ca>
 80090dc:	e11b      	b.n	8009316 <HAL_UART_IRQHandler+0x502>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2210      	movs	r2, #16
 80090e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	2240      	movs	r2, #64	; 0x40
 80090ee:	4013      	ands	r3, r2
 80090f0:	2b40      	cmp	r3, #64	; 0x40
 80090f2:	d000      	beq.n	80090f6 <HAL_UART_IRQHandler+0x2e2>
 80090f4:	e097      	b.n	8009226 <HAL_UART_IRQHandler+0x412>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	685a      	ldr	r2, [r3, #4]
 80090fe:	217e      	movs	r1, #126	; 0x7e
 8009100:	187b      	adds	r3, r7, r1
 8009102:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8009104:	187b      	adds	r3, r7, r1
 8009106:	881b      	ldrh	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d100      	bne.n	800910e <HAL_UART_IRQHandler+0x2fa>
 800910c:	e147      	b.n	800939e <HAL_UART_IRQHandler+0x58a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2258      	movs	r2, #88	; 0x58
 8009112:	5a9b      	ldrh	r3, [r3, r2]
 8009114:	227e      	movs	r2, #126	; 0x7e
 8009116:	18ba      	adds	r2, r7, r2
 8009118:	8812      	ldrh	r2, [r2, #0]
 800911a:	429a      	cmp	r2, r3
 800911c:	d300      	bcc.n	8009120 <HAL_UART_IRQHandler+0x30c>
 800911e:	e13e      	b.n	800939e <HAL_UART_IRQHandler+0x58a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	227e      	movs	r2, #126	; 0x7e
 8009124:	18ba      	adds	r2, r7, r2
 8009126:	215a      	movs	r1, #90	; 0x5a
 8009128:	8812      	ldrh	r2, [r2, #0]
 800912a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2220      	movs	r2, #32
 8009136:	4013      	ands	r3, r2
 8009138:	d166      	bne.n	8009208 <HAL_UART_IRQHandler+0x3f4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800913a:	f3ef 8310 	mrs	r3, PRIMASK
 800913e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8009140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009142:	67bb      	str	r3, [r7, #120]	; 0x78
 8009144:	2301      	movs	r3, #1
 8009146:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800914a:	f383 8810 	msr	PRIMASK, r3
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4995      	ldr	r1, [pc, #596]	; (80093b0 <HAL_UART_IRQHandler+0x59c>)
 800915a:	400a      	ands	r2, r1
 800915c:	601a      	str	r2, [r3, #0]
 800915e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009160:	63bb      	str	r3, [r7, #56]	; 0x38
 8009162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009164:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009168:	f3ef 8310 	mrs	r3, PRIMASK
 800916c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800916e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009170:	677b      	str	r3, [r7, #116]	; 0x74
 8009172:	2301      	movs	r3, #1
 8009174:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009178:	f383 8810 	msr	PRIMASK, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	689a      	ldr	r2, [r3, #8]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2101      	movs	r1, #1
 8009188:	438a      	bics	r2, r1
 800918a:	609a      	str	r2, [r3, #8]
 800918c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800918e:	647b      	str	r3, [r7, #68]	; 0x44
 8009190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009192:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009196:	f3ef 8310 	mrs	r3, PRIMASK
 800919a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800919c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800919e:	673b      	str	r3, [r7, #112]	; 0x70
 80091a0:	2301      	movs	r3, #1
 80091a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091a6:	f383 8810 	msr	PRIMASK, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	689a      	ldr	r2, [r3, #8]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2140      	movs	r1, #64	; 0x40
 80091b6:	438a      	bics	r2, r1
 80091b8:	609a      	str	r2, [r3, #8]
 80091ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091bc:	653b      	str	r3, [r7, #80]	; 0x50
 80091be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091c0:	f383 8810 	msr	PRIMASK, r3

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2220      	movs	r2, #32
 80091c8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091d0:	f3ef 8310 	mrs	r3, PRIMASK
 80091d4:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80091d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091da:	2301      	movs	r3, #1
 80091dc:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091e0:	f383 8810 	msr	PRIMASK, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2110      	movs	r1, #16
 80091f0:	438a      	bics	r2, r1
 80091f2:	601a      	str	r2, [r3, #0]
 80091f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091fa:	f383 8810 	msr	PRIMASK, r3

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009202:	0018      	movs	r0, r3
 8009204:	f7fc fd35 	bl	8005c72 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2258      	movs	r2, #88	; 0x58
 800920c:	5a9a      	ldrh	r2, [r3, r2]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	215a      	movs	r1, #90	; 0x5a
 8009212:	5a5b      	ldrh	r3, [r3, r1]
 8009214:	b29b      	uxth	r3, r3
 8009216:	1ad3      	subs	r3, r2, r3
 8009218:	b29a      	uxth	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	0011      	movs	r1, r2
 800921e:	0018      	movs	r0, r3
 8009220:	f000 f8ea 	bl	80093f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009224:	e0bb      	b.n	800939e <HAL_UART_IRQHandler+0x58a>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2258      	movs	r2, #88	; 0x58
 800922a:	5a99      	ldrh	r1, [r3, r2]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	225a      	movs	r2, #90	; 0x5a
 8009230:	5a9b      	ldrh	r3, [r3, r2]
 8009232:	b29a      	uxth	r2, r3
 8009234:	238e      	movs	r3, #142	; 0x8e
 8009236:	18fb      	adds	r3, r7, r3
 8009238:	1a8a      	subs	r2, r1, r2
 800923a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	225a      	movs	r2, #90	; 0x5a
 8009240:	5a9b      	ldrh	r3, [r3, r2]
 8009242:	b29b      	uxth	r3, r3
 8009244:	2b00      	cmp	r3, #0
 8009246:	d100      	bne.n	800924a <HAL_UART_IRQHandler+0x436>
 8009248:	e0ab      	b.n	80093a2 <HAL_UART_IRQHandler+0x58e>
          && (nb_rx_data > 0U))
 800924a:	238e      	movs	r3, #142	; 0x8e
 800924c:	18fb      	adds	r3, r7, r3
 800924e:	881b      	ldrh	r3, [r3, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d100      	bne.n	8009256 <HAL_UART_IRQHandler+0x442>
 8009254:	e0a5      	b.n	80093a2 <HAL_UART_IRQHandler+0x58e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009256:	f3ef 8310 	mrs	r3, PRIMASK
 800925a:	60fb      	str	r3, [r7, #12]
  return(result);
 800925c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800925e:	2088      	movs	r0, #136	; 0x88
 8009260:	183a      	adds	r2, r7, r0
 8009262:	6013      	str	r3, [r2, #0]
 8009264:	2301      	movs	r3, #1
 8009266:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	f383 8810 	msr	PRIMASK, r3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	494e      	ldr	r1, [pc, #312]	; (80093b4 <HAL_UART_IRQHandler+0x5a0>)
 800927a:	400a      	ands	r2, r1
 800927c:	601a      	str	r2, [r3, #0]
 800927e:	183b      	adds	r3, r7, r0
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	617b      	str	r3, [r7, #20]
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800928a:	f3ef 8310 	mrs	r3, PRIMASK
 800928e:	61bb      	str	r3, [r7, #24]
  return(result);
 8009290:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009292:	2084      	movs	r0, #132	; 0x84
 8009294:	183a      	adds	r2, r7, r0
 8009296:	6013      	str	r3, [r2, #0]
 8009298:	2301      	movs	r3, #1
 800929a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	f383 8810 	msr	PRIMASK, r3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	689a      	ldr	r2, [r3, #8]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2101      	movs	r1, #1
 80092ae:	438a      	bics	r2, r1
 80092b0:	609a      	str	r2, [r3, #8]
 80092b2:	183b      	adds	r3, r7, r0
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	623b      	str	r3, [r7, #32]
 80092b8:	6a3b      	ldr	r3, [r7, #32]
 80092ba:	f383 8810 	msr	PRIMASK, r3

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2220      	movs	r2, #32
 80092c2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092d0:	f3ef 8310 	mrs	r3, PRIMASK
 80092d4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80092d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092d8:	2080      	movs	r0, #128	; 0x80
 80092da:	183a      	adds	r2, r7, r0
 80092dc:	6013      	str	r3, [r2, #0]
 80092de:	2301      	movs	r3, #1
 80092e0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e4:	f383 8810 	msr	PRIMASK, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2110      	movs	r1, #16
 80092f4:	438a      	bics	r2, r1
 80092f6:	601a      	str	r2, [r3, #0]
 80092f8:	183b      	adds	r3, r7, r0
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009300:	f383 8810 	msr	PRIMASK, r3
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009304:	238e      	movs	r3, #142	; 0x8e
 8009306:	18fb      	adds	r3, r7, r3
 8009308:	881a      	ldrh	r2, [r3, #0]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	0011      	movs	r1, r2
 800930e:	0018      	movs	r0, r3
 8009310:	f000 f872 	bl	80093f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009314:	e045      	b.n	80093a2 <HAL_UART_IRQHandler+0x58e>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009316:	23a4      	movs	r3, #164	; 0xa4
 8009318:	18fb      	adds	r3, r7, r3
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	2380      	movs	r3, #128	; 0x80
 800931e:	035b      	lsls	r3, r3, #13
 8009320:	4013      	ands	r3, r2
 8009322:	d010      	beq.n	8009346 <HAL_UART_IRQHandler+0x532>
 8009324:	239c      	movs	r3, #156	; 0x9c
 8009326:	18fb      	adds	r3, r7, r3
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	2380      	movs	r3, #128	; 0x80
 800932c:	03db      	lsls	r3, r3, #15
 800932e:	4013      	ands	r3, r2
 8009330:	d009      	beq.n	8009346 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2280      	movs	r2, #128	; 0x80
 8009338:	0352      	lsls	r2, r2, #13
 800933a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	0018      	movs	r0, r3
 8009340:	f000 ff79 	bl	800a236 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009344:	e030      	b.n	80093a8 <HAL_UART_IRQHandler+0x594>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009346:	23a4      	movs	r3, #164	; 0xa4
 8009348:	18fb      	adds	r3, r7, r3
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2280      	movs	r2, #128	; 0x80
 800934e:	4013      	ands	r3, r2
 8009350:	d00f      	beq.n	8009372 <HAL_UART_IRQHandler+0x55e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009352:	23a0      	movs	r3, #160	; 0xa0
 8009354:	18fb      	adds	r3, r7, r3
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2280      	movs	r2, #128	; 0x80
 800935a:	4013      	ands	r3, r2
 800935c:	d009      	beq.n	8009372 <HAL_UART_IRQHandler+0x55e>
  {
    if (huart->TxISR != NULL)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009362:	2b00      	cmp	r3, #0
 8009364:	d01f      	beq.n	80093a6 <HAL_UART_IRQHandler+0x592>
    {
      huart->TxISR(huart);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	0010      	movs	r0, r2
 800936e:	4798      	blx	r3
    }
    return;
 8009370:	e019      	b.n	80093a6 <HAL_UART_IRQHandler+0x592>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009372:	23a4      	movs	r3, #164	; 0xa4
 8009374:	18fb      	adds	r3, r7, r3
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2240      	movs	r2, #64	; 0x40
 800937a:	4013      	ands	r3, r2
 800937c:	d014      	beq.n	80093a8 <HAL_UART_IRQHandler+0x594>
 800937e:	23a0      	movs	r3, #160	; 0xa0
 8009380:	18fb      	adds	r3, r7, r3
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2240      	movs	r2, #64	; 0x40
 8009386:	4013      	ands	r3, r2
 8009388:	d00e      	beq.n	80093a8 <HAL_UART_IRQHandler+0x594>
  {
    UART_EndTransmit_IT(huart);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	0018      	movs	r0, r3
 800938e:	f000 ff29 	bl	800a1e4 <UART_EndTransmit_IT>
    return;
 8009392:	46c0      	nop			; (mov r8, r8)
 8009394:	e008      	b.n	80093a8 <HAL_UART_IRQHandler+0x594>
      return;
 8009396:	46c0      	nop			; (mov r8, r8)
 8009398:	e006      	b.n	80093a8 <HAL_UART_IRQHandler+0x594>
    return;
 800939a:	46c0      	nop			; (mov r8, r8)
 800939c:	e004      	b.n	80093a8 <HAL_UART_IRQHandler+0x594>
      return;
 800939e:	46c0      	nop			; (mov r8, r8)
 80093a0:	e002      	b.n	80093a8 <HAL_UART_IRQHandler+0x594>
      return;
 80093a2:	46c0      	nop			; (mov r8, r8)
 80093a4:	e000      	b.n	80093a8 <HAL_UART_IRQHandler+0x594>
    return;
 80093a6:	46c0      	nop			; (mov r8, r8)
  }

}
 80093a8:	46bd      	mov	sp, r7
 80093aa:	b02a      	add	sp, #168	; 0xa8
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	46c0      	nop			; (mov r8, r8)
 80093b0:	fffffeff 	.word	0xfffffeff
 80093b4:	fffffedf 	.word	0xfffffedf

080093b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80093c0:	46c0      	nop			; (mov r8, r8)
 80093c2:	46bd      	mov	sp, r7
 80093c4:	b002      	add	sp, #8
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80093d0:	46c0      	nop			; (mov r8, r8)
 80093d2:	46bd      	mov	sp, r7
 80093d4:	b002      	add	sp, #8
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80093e0:	46c0      	nop			; (mov r8, r8)
 80093e2:	46bd      	mov	sp, r7
 80093e4:	b002      	add	sp, #8
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80093f0:	46c0      	nop			; (mov r8, r8)
 80093f2:	46bd      	mov	sp, r7
 80093f4:	b002      	add	sp, #8
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	000a      	movs	r2, r1
 8009402:	1cbb      	adds	r3, r7, #2
 8009404:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009406:	46c0      	nop			; (mov r8, r8)
 8009408:	46bd      	mov	sp, r7
 800940a:	b002      	add	sp, #8
 800940c:	bd80      	pop	{r7, pc}
	...

08009410 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009410:	b5b0      	push	{r4, r5, r7, lr}
 8009412:	b08e      	sub	sp, #56	; 0x38
 8009414:	af00      	add	r7, sp, #0
 8009416:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009418:	231a      	movs	r3, #26
 800941a:	2218      	movs	r2, #24
 800941c:	4694      	mov	ip, r2
 800941e:	44bc      	add	ip, r7
 8009420:	4463      	add	r3, ip
 8009422:	2200      	movs	r2, #0
 8009424:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	689a      	ldr	r2, [r3, #8]
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	431a      	orrs	r2, r3
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	695b      	ldr	r3, [r3, #20]
 8009434:	431a      	orrs	r2, r3
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	69db      	ldr	r3, [r3, #28]
 800943a:	4313      	orrs	r3, r2
 800943c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4acb      	ldr	r2, [pc, #812]	; (8009774 <UART_SetConfig+0x364>)
 8009446:	4013      	ands	r3, r2
 8009448:	0019      	movs	r1, r3
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009450:	430a      	orrs	r2, r1
 8009452:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	4ac7      	ldr	r2, [pc, #796]	; (8009778 <UART_SetConfig+0x368>)
 800945c:	4013      	ands	r3, r2
 800945e:	0019      	movs	r1, r3
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	68da      	ldr	r2, [r3, #12]
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	430a      	orrs	r2, r1
 800946a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	699b      	ldr	r3, [r3, #24]
 8009470:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4ac1      	ldr	r2, [pc, #772]	; (800977c <UART_SetConfig+0x36c>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d004      	beq.n	8009486 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	6a1b      	ldr	r3, [r3, #32]
 8009480:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009482:	4313      	orrs	r3, r2
 8009484:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	4abc      	ldr	r2, [pc, #752]	; (8009780 <UART_SetConfig+0x370>)
 800948e:	4013      	ands	r3, r2
 8009490:	0019      	movs	r1, r3
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009498:	430a      	orrs	r2, r1
 800949a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4ab8      	ldr	r2, [pc, #736]	; (8009784 <UART_SetConfig+0x374>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d134      	bne.n	8009510 <UART_SetConfig+0x100>
 80094a6:	4bb8      	ldr	r3, [pc, #736]	; (8009788 <UART_SetConfig+0x378>)
 80094a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094aa:	2203      	movs	r2, #3
 80094ac:	4013      	ands	r3, r2
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d015      	beq.n	80094de <UART_SetConfig+0xce>
 80094b2:	d304      	bcc.n	80094be <UART_SetConfig+0xae>
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d00a      	beq.n	80094ce <UART_SetConfig+0xbe>
 80094b8:	2b03      	cmp	r3, #3
 80094ba:	d018      	beq.n	80094ee <UART_SetConfig+0xde>
 80094bc:	e01f      	b.n	80094fe <UART_SetConfig+0xee>
 80094be:	231b      	movs	r3, #27
 80094c0:	2218      	movs	r2, #24
 80094c2:	4694      	mov	ip, r2
 80094c4:	44bc      	add	ip, r7
 80094c6:	4463      	add	r3, ip
 80094c8:	2201      	movs	r2, #1
 80094ca:	701a      	strb	r2, [r3, #0]
 80094cc:	e0c5      	b.n	800965a <UART_SetConfig+0x24a>
 80094ce:	231b      	movs	r3, #27
 80094d0:	2218      	movs	r2, #24
 80094d2:	4694      	mov	ip, r2
 80094d4:	44bc      	add	ip, r7
 80094d6:	4463      	add	r3, ip
 80094d8:	2202      	movs	r2, #2
 80094da:	701a      	strb	r2, [r3, #0]
 80094dc:	e0bd      	b.n	800965a <UART_SetConfig+0x24a>
 80094de:	231b      	movs	r3, #27
 80094e0:	2218      	movs	r2, #24
 80094e2:	4694      	mov	ip, r2
 80094e4:	44bc      	add	ip, r7
 80094e6:	4463      	add	r3, ip
 80094e8:	2204      	movs	r2, #4
 80094ea:	701a      	strb	r2, [r3, #0]
 80094ec:	e0b5      	b.n	800965a <UART_SetConfig+0x24a>
 80094ee:	231b      	movs	r3, #27
 80094f0:	2218      	movs	r2, #24
 80094f2:	4694      	mov	ip, r2
 80094f4:	44bc      	add	ip, r7
 80094f6:	4463      	add	r3, ip
 80094f8:	2208      	movs	r2, #8
 80094fa:	701a      	strb	r2, [r3, #0]
 80094fc:	e0ad      	b.n	800965a <UART_SetConfig+0x24a>
 80094fe:	231b      	movs	r3, #27
 8009500:	2218      	movs	r2, #24
 8009502:	4694      	mov	ip, r2
 8009504:	44bc      	add	ip, r7
 8009506:	4463      	add	r3, ip
 8009508:	2210      	movs	r2, #16
 800950a:	701a      	strb	r2, [r3, #0]
 800950c:	46c0      	nop			; (mov r8, r8)
 800950e:	e0a4      	b.n	800965a <UART_SetConfig+0x24a>
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a9d      	ldr	r2, [pc, #628]	; (800978c <UART_SetConfig+0x37c>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d137      	bne.n	800958a <UART_SetConfig+0x17a>
 800951a:	4b9b      	ldr	r3, [pc, #620]	; (8009788 <UART_SetConfig+0x378>)
 800951c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800951e:	220c      	movs	r2, #12
 8009520:	4013      	ands	r3, r2
 8009522:	2b04      	cmp	r3, #4
 8009524:	d018      	beq.n	8009558 <UART_SetConfig+0x148>
 8009526:	d802      	bhi.n	800952e <UART_SetConfig+0x11e>
 8009528:	2b00      	cmp	r3, #0
 800952a:	d005      	beq.n	8009538 <UART_SetConfig+0x128>
 800952c:	e024      	b.n	8009578 <UART_SetConfig+0x168>
 800952e:	2b08      	cmp	r3, #8
 8009530:	d00a      	beq.n	8009548 <UART_SetConfig+0x138>
 8009532:	2b0c      	cmp	r3, #12
 8009534:	d018      	beq.n	8009568 <UART_SetConfig+0x158>
 8009536:	e01f      	b.n	8009578 <UART_SetConfig+0x168>
 8009538:	231b      	movs	r3, #27
 800953a:	2218      	movs	r2, #24
 800953c:	4694      	mov	ip, r2
 800953e:	44bc      	add	ip, r7
 8009540:	4463      	add	r3, ip
 8009542:	2200      	movs	r2, #0
 8009544:	701a      	strb	r2, [r3, #0]
 8009546:	e088      	b.n	800965a <UART_SetConfig+0x24a>
 8009548:	231b      	movs	r3, #27
 800954a:	2218      	movs	r2, #24
 800954c:	4694      	mov	ip, r2
 800954e:	44bc      	add	ip, r7
 8009550:	4463      	add	r3, ip
 8009552:	2202      	movs	r2, #2
 8009554:	701a      	strb	r2, [r3, #0]
 8009556:	e080      	b.n	800965a <UART_SetConfig+0x24a>
 8009558:	231b      	movs	r3, #27
 800955a:	2218      	movs	r2, #24
 800955c:	4694      	mov	ip, r2
 800955e:	44bc      	add	ip, r7
 8009560:	4463      	add	r3, ip
 8009562:	2204      	movs	r2, #4
 8009564:	701a      	strb	r2, [r3, #0]
 8009566:	e078      	b.n	800965a <UART_SetConfig+0x24a>
 8009568:	231b      	movs	r3, #27
 800956a:	2218      	movs	r2, #24
 800956c:	4694      	mov	ip, r2
 800956e:	44bc      	add	ip, r7
 8009570:	4463      	add	r3, ip
 8009572:	2208      	movs	r2, #8
 8009574:	701a      	strb	r2, [r3, #0]
 8009576:	e070      	b.n	800965a <UART_SetConfig+0x24a>
 8009578:	231b      	movs	r3, #27
 800957a:	2218      	movs	r2, #24
 800957c:	4694      	mov	ip, r2
 800957e:	44bc      	add	ip, r7
 8009580:	4463      	add	r3, ip
 8009582:	2210      	movs	r2, #16
 8009584:	701a      	strb	r2, [r3, #0]
 8009586:	46c0      	nop			; (mov r8, r8)
 8009588:	e067      	b.n	800965a <UART_SetConfig+0x24a>
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a80      	ldr	r2, [pc, #512]	; (8009790 <UART_SetConfig+0x380>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d107      	bne.n	80095a4 <UART_SetConfig+0x194>
 8009594:	231b      	movs	r3, #27
 8009596:	2218      	movs	r2, #24
 8009598:	4694      	mov	ip, r2
 800959a:	44bc      	add	ip, r7
 800959c:	4463      	add	r3, ip
 800959e:	2200      	movs	r2, #0
 80095a0:	701a      	strb	r2, [r3, #0]
 80095a2:	e05a      	b.n	800965a <UART_SetConfig+0x24a>
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a7a      	ldr	r2, [pc, #488]	; (8009794 <UART_SetConfig+0x384>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d107      	bne.n	80095be <UART_SetConfig+0x1ae>
 80095ae:	231b      	movs	r3, #27
 80095b0:	2218      	movs	r2, #24
 80095b2:	4694      	mov	ip, r2
 80095b4:	44bc      	add	ip, r7
 80095b6:	4463      	add	r3, ip
 80095b8:	2200      	movs	r2, #0
 80095ba:	701a      	strb	r2, [r3, #0]
 80095bc:	e04d      	b.n	800965a <UART_SetConfig+0x24a>
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a6e      	ldr	r2, [pc, #440]	; (800977c <UART_SetConfig+0x36c>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d141      	bne.n	800964c <UART_SetConfig+0x23c>
 80095c8:	4b6f      	ldr	r3, [pc, #444]	; (8009788 <UART_SetConfig+0x378>)
 80095ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80095cc:	23c0      	movs	r3, #192	; 0xc0
 80095ce:	011b      	lsls	r3, r3, #4
 80095d0:	4013      	ands	r3, r2
 80095d2:	2280      	movs	r2, #128	; 0x80
 80095d4:	00d2      	lsls	r2, r2, #3
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d01f      	beq.n	800961a <UART_SetConfig+0x20a>
 80095da:	2280      	movs	r2, #128	; 0x80
 80095dc:	00d2      	lsls	r2, r2, #3
 80095de:	4293      	cmp	r3, r2
 80095e0:	d802      	bhi.n	80095e8 <UART_SetConfig+0x1d8>
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d009      	beq.n	80095fa <UART_SetConfig+0x1ea>
 80095e6:	e028      	b.n	800963a <UART_SetConfig+0x22a>
 80095e8:	2280      	movs	r2, #128	; 0x80
 80095ea:	0112      	lsls	r2, r2, #4
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d00c      	beq.n	800960a <UART_SetConfig+0x1fa>
 80095f0:	22c0      	movs	r2, #192	; 0xc0
 80095f2:	0112      	lsls	r2, r2, #4
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d018      	beq.n	800962a <UART_SetConfig+0x21a>
 80095f8:	e01f      	b.n	800963a <UART_SetConfig+0x22a>
 80095fa:	231b      	movs	r3, #27
 80095fc:	2218      	movs	r2, #24
 80095fe:	4694      	mov	ip, r2
 8009600:	44bc      	add	ip, r7
 8009602:	4463      	add	r3, ip
 8009604:	2200      	movs	r2, #0
 8009606:	701a      	strb	r2, [r3, #0]
 8009608:	e027      	b.n	800965a <UART_SetConfig+0x24a>
 800960a:	231b      	movs	r3, #27
 800960c:	2218      	movs	r2, #24
 800960e:	4694      	mov	ip, r2
 8009610:	44bc      	add	ip, r7
 8009612:	4463      	add	r3, ip
 8009614:	2202      	movs	r2, #2
 8009616:	701a      	strb	r2, [r3, #0]
 8009618:	e01f      	b.n	800965a <UART_SetConfig+0x24a>
 800961a:	231b      	movs	r3, #27
 800961c:	2218      	movs	r2, #24
 800961e:	4694      	mov	ip, r2
 8009620:	44bc      	add	ip, r7
 8009622:	4463      	add	r3, ip
 8009624:	2204      	movs	r2, #4
 8009626:	701a      	strb	r2, [r3, #0]
 8009628:	e017      	b.n	800965a <UART_SetConfig+0x24a>
 800962a:	231b      	movs	r3, #27
 800962c:	2218      	movs	r2, #24
 800962e:	4694      	mov	ip, r2
 8009630:	44bc      	add	ip, r7
 8009632:	4463      	add	r3, ip
 8009634:	2208      	movs	r2, #8
 8009636:	701a      	strb	r2, [r3, #0]
 8009638:	e00f      	b.n	800965a <UART_SetConfig+0x24a>
 800963a:	231b      	movs	r3, #27
 800963c:	2218      	movs	r2, #24
 800963e:	4694      	mov	ip, r2
 8009640:	44bc      	add	ip, r7
 8009642:	4463      	add	r3, ip
 8009644:	2210      	movs	r2, #16
 8009646:	701a      	strb	r2, [r3, #0]
 8009648:	46c0      	nop			; (mov r8, r8)
 800964a:	e006      	b.n	800965a <UART_SetConfig+0x24a>
 800964c:	231b      	movs	r3, #27
 800964e:	2218      	movs	r2, #24
 8009650:	4694      	mov	ip, r2
 8009652:	44bc      	add	ip, r7
 8009654:	4463      	add	r3, ip
 8009656:	2210      	movs	r2, #16
 8009658:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a47      	ldr	r2, [pc, #284]	; (800977c <UART_SetConfig+0x36c>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d000      	beq.n	8009666 <UART_SetConfig+0x256>
 8009664:	e0a0      	b.n	80097a8 <UART_SetConfig+0x398>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009666:	231b      	movs	r3, #27
 8009668:	2218      	movs	r2, #24
 800966a:	4694      	mov	ip, r2
 800966c:	44bc      	add	ip, r7
 800966e:	4463      	add	r3, ip
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	2b02      	cmp	r3, #2
 8009674:	d00d      	beq.n	8009692 <UART_SetConfig+0x282>
 8009676:	dc02      	bgt.n	800967e <UART_SetConfig+0x26e>
 8009678:	2b00      	cmp	r3, #0
 800967a:	d005      	beq.n	8009688 <UART_SetConfig+0x278>
 800967c:	e01d      	b.n	80096ba <UART_SetConfig+0x2aa>
 800967e:	2b04      	cmp	r3, #4
 8009680:	d012      	beq.n	80096a8 <UART_SetConfig+0x298>
 8009682:	2b08      	cmp	r3, #8
 8009684:	d015      	beq.n	80096b2 <UART_SetConfig+0x2a2>
 8009686:	e018      	b.n	80096ba <UART_SetConfig+0x2aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009688:	f7fd fe10 	bl	80072ac <HAL_RCC_GetPCLK1Freq>
 800968c:	0003      	movs	r3, r0
 800968e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009690:	e01d      	b.n	80096ce <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009692:	4b3d      	ldr	r3, [pc, #244]	; (8009788 <UART_SetConfig+0x378>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2210      	movs	r2, #16
 8009698:	4013      	ands	r3, r2
 800969a:	d002      	beq.n	80096a2 <UART_SetConfig+0x292>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800969c:	4b3e      	ldr	r3, [pc, #248]	; (8009798 <UART_SetConfig+0x388>)
 800969e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80096a0:	e015      	b.n	80096ce <UART_SetConfig+0x2be>
          pclk = (uint32_t) HSI_VALUE;
 80096a2:	4b3e      	ldr	r3, [pc, #248]	; (800979c <UART_SetConfig+0x38c>)
 80096a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80096a6:	e012      	b.n	80096ce <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096a8:	f7fd fd54 	bl	8007154 <HAL_RCC_GetSysClockFreq>
 80096ac:	0003      	movs	r3, r0
 80096ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80096b0:	e00d      	b.n	80096ce <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096b2:	2380      	movs	r3, #128	; 0x80
 80096b4:	021b      	lsls	r3, r3, #8
 80096b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80096b8:	e009      	b.n	80096ce <UART_SetConfig+0x2be>
      default:
        pclk = 0U;
 80096ba:	2300      	movs	r3, #0
 80096bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80096be:	231a      	movs	r3, #26
 80096c0:	2218      	movs	r2, #24
 80096c2:	4694      	mov	ip, r2
 80096c4:	44bc      	add	ip, r7
 80096c6:	4463      	add	r3, ip
 80096c8:	2201      	movs	r2, #1
 80096ca:	701a      	strb	r2, [r3, #0]
        break;
 80096cc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80096ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d100      	bne.n	80096d6 <UART_SetConfig+0x2c6>
 80096d4:	e13c      	b.n	8009950 <UART_SetConfig+0x540>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	685a      	ldr	r2, [r3, #4]
 80096da:	0013      	movs	r3, r2
 80096dc:	005b      	lsls	r3, r3, #1
 80096de:	189b      	adds	r3, r3, r2
 80096e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d305      	bcc.n	80096f2 <UART_SetConfig+0x2e2>
          (pclk > (4096U * huart->Init.BaudRate)))
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80096ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d907      	bls.n	8009702 <UART_SetConfig+0x2f2>
      {
        ret = HAL_ERROR;
 80096f2:	231a      	movs	r3, #26
 80096f4:	2218      	movs	r2, #24
 80096f6:	4694      	mov	ip, r2
 80096f8:	44bc      	add	ip, r7
 80096fa:	4463      	add	r3, ip
 80096fc:	2201      	movs	r2, #1
 80096fe:	701a      	strb	r2, [r3, #0]
 8009700:	e126      	b.n	8009950 <UART_SetConfig+0x540>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009704:	613b      	str	r3, [r7, #16]
 8009706:	2300      	movs	r3, #0
 8009708:	617b      	str	r3, [r7, #20]
 800970a:	6939      	ldr	r1, [r7, #16]
 800970c:	697a      	ldr	r2, [r7, #20]
 800970e:	000b      	movs	r3, r1
 8009710:	0e1b      	lsrs	r3, r3, #24
 8009712:	0010      	movs	r0, r2
 8009714:	0205      	lsls	r5, r0, #8
 8009716:	431d      	orrs	r5, r3
 8009718:	000b      	movs	r3, r1
 800971a:	021c      	lsls	r4, r3, #8
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	085b      	lsrs	r3, r3, #1
 8009722:	60bb      	str	r3, [r7, #8]
 8009724:	2300      	movs	r3, #0
 8009726:	60fb      	str	r3, [r7, #12]
 8009728:	68b8      	ldr	r0, [r7, #8]
 800972a:	68f9      	ldr	r1, [r7, #12]
 800972c:	1900      	adds	r0, r0, r4
 800972e:	4169      	adcs	r1, r5
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	603b      	str	r3, [r7, #0]
 8009736:	2300      	movs	r3, #0
 8009738:	607b      	str	r3, [r7, #4]
 800973a:	683a      	ldr	r2, [r7, #0]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f7f6 fead 	bl	800049c <__aeabi_uldivmod>
 8009742:	0003      	movs	r3, r0
 8009744:	000c      	movs	r4, r1
 8009746:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974a:	4a15      	ldr	r2, [pc, #84]	; (80097a0 <UART_SetConfig+0x390>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d908      	bls.n	8009762 <UART_SetConfig+0x352>
 8009750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009752:	4a14      	ldr	r2, [pc, #80]	; (80097a4 <UART_SetConfig+0x394>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d804      	bhi.n	8009762 <UART_SetConfig+0x352>
        {
          huart->Instance->BRR = usartdiv;
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800975e:	60da      	str	r2, [r3, #12]
 8009760:	e0f6      	b.n	8009950 <UART_SetConfig+0x540>
        }
        else
        {
          ret = HAL_ERROR;
 8009762:	231a      	movs	r3, #26
 8009764:	2218      	movs	r2, #24
 8009766:	4694      	mov	ip, r2
 8009768:	44bc      	add	ip, r7
 800976a:	4463      	add	r3, ip
 800976c:	2201      	movs	r2, #1
 800976e:	701a      	strb	r2, [r3, #0]
 8009770:	e0ee      	b.n	8009950 <UART_SetConfig+0x540>
 8009772:	46c0      	nop			; (mov r8, r8)
 8009774:	efff69f3 	.word	0xefff69f3
 8009778:	ffffcfff 	.word	0xffffcfff
 800977c:	40004800 	.word	0x40004800
 8009780:	fffff4ff 	.word	0xfffff4ff
 8009784:	40013800 	.word	0x40013800
 8009788:	40021000 	.word	0x40021000
 800978c:	40004400 	.word	0x40004400
 8009790:	40004c00 	.word	0x40004c00
 8009794:	40005000 	.word	0x40005000
 8009798:	003d0900 	.word	0x003d0900
 800979c:	00f42400 	.word	0x00f42400
 80097a0:	000002ff 	.word	0x000002ff
 80097a4:	000fffff 	.word	0x000fffff
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	69da      	ldr	r2, [r3, #28]
 80097ac:	2380      	movs	r3, #128	; 0x80
 80097ae:	021b      	lsls	r3, r3, #8
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d000      	beq.n	80097b6 <UART_SetConfig+0x3a6>
 80097b4:	e073      	b.n	800989e <UART_SetConfig+0x48e>
  {
    switch (clocksource)
 80097b6:	231b      	movs	r3, #27
 80097b8:	2218      	movs	r2, #24
 80097ba:	4694      	mov	ip, r2
 80097bc:	44bc      	add	ip, r7
 80097be:	4463      	add	r3, ip
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	2b08      	cmp	r3, #8
 80097c4:	d822      	bhi.n	800980c <UART_SetConfig+0x3fc>
 80097c6:	009a      	lsls	r2, r3, #2
 80097c8:	4b69      	ldr	r3, [pc, #420]	; (8009970 <UART_SetConfig+0x560>)
 80097ca:	18d3      	adds	r3, r2, r3
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097d0:	f7fd fd6c 	bl	80072ac <HAL_RCC_GetPCLK1Freq>
 80097d4:	0003      	movs	r3, r0
 80097d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097d8:	e022      	b.n	8009820 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097da:	f7fd fd7d 	bl	80072d8 <HAL_RCC_GetPCLK2Freq>
 80097de:	0003      	movs	r3, r0
 80097e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097e2:	e01d      	b.n	8009820 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097e4:	4b63      	ldr	r3, [pc, #396]	; (8009974 <UART_SetConfig+0x564>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2210      	movs	r2, #16
 80097ea:	4013      	ands	r3, r2
 80097ec:	d002      	beq.n	80097f4 <UART_SetConfig+0x3e4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80097ee:	4b62      	ldr	r3, [pc, #392]	; (8009978 <UART_SetConfig+0x568>)
 80097f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80097f2:	e015      	b.n	8009820 <UART_SetConfig+0x410>
          pclk = (uint32_t) HSI_VALUE;
 80097f4:	4b61      	ldr	r3, [pc, #388]	; (800997c <UART_SetConfig+0x56c>)
 80097f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097f8:	e012      	b.n	8009820 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80097fa:	f7fd fcab 	bl	8007154 <HAL_RCC_GetSysClockFreq>
 80097fe:	0003      	movs	r3, r0
 8009800:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009802:	e00d      	b.n	8009820 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009804:	2380      	movs	r3, #128	; 0x80
 8009806:	021b      	lsls	r3, r3, #8
 8009808:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800980a:	e009      	b.n	8009820 <UART_SetConfig+0x410>
      default:
        pclk = 0U;
 800980c:	2300      	movs	r3, #0
 800980e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009810:	231a      	movs	r3, #26
 8009812:	2218      	movs	r2, #24
 8009814:	4694      	mov	ip, r2
 8009816:	44bc      	add	ip, r7
 8009818:	4463      	add	r3, ip
 800981a:	2201      	movs	r2, #1
 800981c:	701a      	strb	r2, [r3, #0]
        break;
 800981e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009822:	2b00      	cmp	r3, #0
 8009824:	d100      	bne.n	8009828 <UART_SetConfig+0x418>
 8009826:	e093      	b.n	8009950 <UART_SetConfig+0x540>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982a:	005a      	lsls	r2, r3, #1
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	085b      	lsrs	r3, r3, #1
 8009832:	18d2      	adds	r2, r2, r3
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	0019      	movs	r1, r3
 800983a:	0010      	movs	r0, r2
 800983c:	f7f6 fc7a 	bl	8000134 <__udivsi3>
 8009840:	0003      	movs	r3, r0
 8009842:	b29b      	uxth	r3, r3
 8009844:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009848:	2b0f      	cmp	r3, #15
 800984a:	d920      	bls.n	800988e <UART_SetConfig+0x47e>
 800984c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984e:	4a4c      	ldr	r2, [pc, #304]	; (8009980 <UART_SetConfig+0x570>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d81c      	bhi.n	800988e <UART_SetConfig+0x47e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009856:	b29a      	uxth	r2, r3
 8009858:	200e      	movs	r0, #14
 800985a:	2418      	movs	r4, #24
 800985c:	193b      	adds	r3, r7, r4
 800985e:	181b      	adds	r3, r3, r0
 8009860:	210f      	movs	r1, #15
 8009862:	438a      	bics	r2, r1
 8009864:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009868:	085b      	lsrs	r3, r3, #1
 800986a:	b29b      	uxth	r3, r3
 800986c:	2207      	movs	r2, #7
 800986e:	4013      	ands	r3, r2
 8009870:	b299      	uxth	r1, r3
 8009872:	193b      	adds	r3, r7, r4
 8009874:	181b      	adds	r3, r3, r0
 8009876:	193a      	adds	r2, r7, r4
 8009878:	1812      	adds	r2, r2, r0
 800987a:	8812      	ldrh	r2, [r2, #0]
 800987c:	430a      	orrs	r2, r1
 800987e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	193a      	adds	r2, r7, r4
 8009886:	1812      	adds	r2, r2, r0
 8009888:	8812      	ldrh	r2, [r2, #0]
 800988a:	60da      	str	r2, [r3, #12]
 800988c:	e060      	b.n	8009950 <UART_SetConfig+0x540>
      }
      else
      {
        ret = HAL_ERROR;
 800988e:	231a      	movs	r3, #26
 8009890:	2218      	movs	r2, #24
 8009892:	4694      	mov	ip, r2
 8009894:	44bc      	add	ip, r7
 8009896:	4463      	add	r3, ip
 8009898:	2201      	movs	r2, #1
 800989a:	701a      	strb	r2, [r3, #0]
 800989c:	e058      	b.n	8009950 <UART_SetConfig+0x540>
      }
    }
  }
  else
  {
    switch (clocksource)
 800989e:	231b      	movs	r3, #27
 80098a0:	2218      	movs	r2, #24
 80098a2:	4694      	mov	ip, r2
 80098a4:	44bc      	add	ip, r7
 80098a6:	4463      	add	r3, ip
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	2b08      	cmp	r3, #8
 80098ac:	d822      	bhi.n	80098f4 <UART_SetConfig+0x4e4>
 80098ae:	009a      	lsls	r2, r3, #2
 80098b0:	4b34      	ldr	r3, [pc, #208]	; (8009984 <UART_SetConfig+0x574>)
 80098b2:	18d3      	adds	r3, r2, r3
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098b8:	f7fd fcf8 	bl	80072ac <HAL_RCC_GetPCLK1Freq>
 80098bc:	0003      	movs	r3, r0
 80098be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80098c0:	e022      	b.n	8009908 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098c2:	f7fd fd09 	bl	80072d8 <HAL_RCC_GetPCLK2Freq>
 80098c6:	0003      	movs	r3, r0
 80098c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80098ca:	e01d      	b.n	8009908 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098cc:	4b29      	ldr	r3, [pc, #164]	; (8009974 <UART_SetConfig+0x564>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2210      	movs	r2, #16
 80098d2:	4013      	ands	r3, r2
 80098d4:	d002      	beq.n	80098dc <UART_SetConfig+0x4cc>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80098d6:	4b28      	ldr	r3, [pc, #160]	; (8009978 <UART_SetConfig+0x568>)
 80098d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80098da:	e015      	b.n	8009908 <UART_SetConfig+0x4f8>
          pclk = (uint32_t) HSI_VALUE;
 80098dc:	4b27      	ldr	r3, [pc, #156]	; (800997c <UART_SetConfig+0x56c>)
 80098de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80098e0:	e012      	b.n	8009908 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098e2:	f7fd fc37 	bl	8007154 <HAL_RCC_GetSysClockFreq>
 80098e6:	0003      	movs	r3, r0
 80098e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80098ea:	e00d      	b.n	8009908 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098ec:	2380      	movs	r3, #128	; 0x80
 80098ee:	021b      	lsls	r3, r3, #8
 80098f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80098f2:	e009      	b.n	8009908 <UART_SetConfig+0x4f8>
      default:
        pclk = 0U;
 80098f4:	2300      	movs	r3, #0
 80098f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80098f8:	231a      	movs	r3, #26
 80098fa:	2218      	movs	r2, #24
 80098fc:	4694      	mov	ip, r2
 80098fe:	44bc      	add	ip, r7
 8009900:	4463      	add	r3, ip
 8009902:	2201      	movs	r2, #1
 8009904:	701a      	strb	r2, [r3, #0]
        break;
 8009906:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8009908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990a:	2b00      	cmp	r3, #0
 800990c:	d020      	beq.n	8009950 <UART_SetConfig+0x540>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800990e:	69fb      	ldr	r3, [r7, #28]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	085a      	lsrs	r2, r3, #1
 8009914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009916:	18d2      	adds	r2, r2, r3
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	0019      	movs	r1, r3
 800991e:	0010      	movs	r0, r2
 8009920:	f7f6 fc08 	bl	8000134 <__udivsi3>
 8009924:	0003      	movs	r3, r0
 8009926:	b29b      	uxth	r3, r3
 8009928:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800992a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992c:	2b0f      	cmp	r3, #15
 800992e:	d908      	bls.n	8009942 <UART_SetConfig+0x532>
 8009930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009932:	4a13      	ldr	r2, [pc, #76]	; (8009980 <UART_SetConfig+0x570>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d804      	bhi.n	8009942 <UART_SetConfig+0x532>
      {
        huart->Instance->BRR = usartdiv;
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800993e:	60da      	str	r2, [r3, #12]
 8009940:	e006      	b.n	8009950 <UART_SetConfig+0x540>
      }
      else
      {
        ret = HAL_ERROR;
 8009942:	231a      	movs	r3, #26
 8009944:	2218      	movs	r2, #24
 8009946:	4694      	mov	ip, r2
 8009948:	44bc      	add	ip, r7
 800994a:	4463      	add	r3, ip
 800994c:	2201      	movs	r2, #1
 800994e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	2200      	movs	r2, #0
 8009954:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	2200      	movs	r2, #0
 800995a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800995c:	231a      	movs	r3, #26
 800995e:	2218      	movs	r2, #24
 8009960:	4694      	mov	ip, r2
 8009962:	44bc      	add	ip, r7
 8009964:	4463      	add	r3, ip
 8009966:	781b      	ldrb	r3, [r3, #0]
}
 8009968:	0018      	movs	r0, r3
 800996a:	46bd      	mov	sp, r7
 800996c:	b00e      	add	sp, #56	; 0x38
 800996e:	bdb0      	pop	{r4, r5, r7, pc}
 8009970:	0800eefc 	.word	0x0800eefc
 8009974:	40021000 	.word	0x40021000
 8009978:	003d0900 	.word	0x003d0900
 800997c:	00f42400 	.word	0x00f42400
 8009980:	0000ffff 	.word	0x0000ffff
 8009984:	0800ef20 	.word	0x0800ef20

08009988 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009994:	2201      	movs	r2, #1
 8009996:	4013      	ands	r3, r2
 8009998:	d00b      	beq.n	80099b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	4a4a      	ldr	r2, [pc, #296]	; (8009acc <UART_AdvFeatureConfig+0x144>)
 80099a2:	4013      	ands	r3, r2
 80099a4:	0019      	movs	r1, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	430a      	orrs	r2, r1
 80099b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b6:	2202      	movs	r2, #2
 80099b8:	4013      	ands	r3, r2
 80099ba:	d00b      	beq.n	80099d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	4a43      	ldr	r2, [pc, #268]	; (8009ad0 <UART_AdvFeatureConfig+0x148>)
 80099c4:	4013      	ands	r3, r2
 80099c6:	0019      	movs	r1, r3
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	430a      	orrs	r2, r1
 80099d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d8:	2204      	movs	r2, #4
 80099da:	4013      	ands	r3, r2
 80099dc:	d00b      	beq.n	80099f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	4a3b      	ldr	r2, [pc, #236]	; (8009ad4 <UART_AdvFeatureConfig+0x14c>)
 80099e6:	4013      	ands	r3, r2
 80099e8:	0019      	movs	r1, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	430a      	orrs	r2, r1
 80099f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fa:	2208      	movs	r2, #8
 80099fc:	4013      	ands	r3, r2
 80099fe:	d00b      	beq.n	8009a18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	4a34      	ldr	r2, [pc, #208]	; (8009ad8 <UART_AdvFeatureConfig+0x150>)
 8009a08:	4013      	ands	r3, r2
 8009a0a:	0019      	movs	r1, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	430a      	orrs	r2, r1
 8009a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1c:	2210      	movs	r2, #16
 8009a1e:	4013      	ands	r3, r2
 8009a20:	d00b      	beq.n	8009a3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	4a2c      	ldr	r2, [pc, #176]	; (8009adc <UART_AdvFeatureConfig+0x154>)
 8009a2a:	4013      	ands	r3, r2
 8009a2c:	0019      	movs	r1, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	430a      	orrs	r2, r1
 8009a38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3e:	2220      	movs	r2, #32
 8009a40:	4013      	ands	r3, r2
 8009a42:	d00b      	beq.n	8009a5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	4a25      	ldr	r2, [pc, #148]	; (8009ae0 <UART_AdvFeatureConfig+0x158>)
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	0019      	movs	r1, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	430a      	orrs	r2, r1
 8009a5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a60:	2240      	movs	r2, #64	; 0x40
 8009a62:	4013      	ands	r3, r2
 8009a64:	d01d      	beq.n	8009aa2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	4a1d      	ldr	r2, [pc, #116]	; (8009ae4 <UART_AdvFeatureConfig+0x15c>)
 8009a6e:	4013      	ands	r3, r2
 8009a70:	0019      	movs	r1, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	430a      	orrs	r2, r1
 8009a7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a82:	2380      	movs	r3, #128	; 0x80
 8009a84:	035b      	lsls	r3, r3, #13
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d10b      	bne.n	8009aa2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	4a15      	ldr	r2, [pc, #84]	; (8009ae8 <UART_AdvFeatureConfig+0x160>)
 8009a92:	4013      	ands	r3, r2
 8009a94:	0019      	movs	r1, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	430a      	orrs	r2, r1
 8009aa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa6:	2280      	movs	r2, #128	; 0x80
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	d00b      	beq.n	8009ac4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	4a0e      	ldr	r2, [pc, #56]	; (8009aec <UART_AdvFeatureConfig+0x164>)
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	0019      	movs	r1, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	430a      	orrs	r2, r1
 8009ac2:	605a      	str	r2, [r3, #4]
  }
}
 8009ac4:	46c0      	nop			; (mov r8, r8)
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	b002      	add	sp, #8
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	fffdffff 	.word	0xfffdffff
 8009ad0:	fffeffff 	.word	0xfffeffff
 8009ad4:	fffbffff 	.word	0xfffbffff
 8009ad8:	ffff7fff 	.word	0xffff7fff
 8009adc:	ffffefff 	.word	0xffffefff
 8009ae0:	ffffdfff 	.word	0xffffdfff
 8009ae4:	ffefffff 	.word	0xffefffff
 8009ae8:	ff9fffff 	.word	0xff9fffff
 8009aec:	fff7ffff 	.word	0xfff7ffff

08009af0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b086      	sub	sp, #24
 8009af4:	af02      	add	r7, sp, #8
 8009af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2280      	movs	r2, #128	; 0x80
 8009afc:	2100      	movs	r1, #0
 8009afe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b00:	f7fb fe86 	bl	8005810 <HAL_GetTick>
 8009b04:	0003      	movs	r3, r0
 8009b06:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2208      	movs	r2, #8
 8009b10:	4013      	ands	r3, r2
 8009b12:	2b08      	cmp	r3, #8
 8009b14:	d10d      	bne.n	8009b32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b16:	68fa      	ldr	r2, [r7, #12]
 8009b18:	2380      	movs	r3, #128	; 0x80
 8009b1a:	0399      	lsls	r1, r3, #14
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	4b18      	ldr	r3, [pc, #96]	; (8009b80 <UART_CheckIdleState+0x90>)
 8009b20:	9300      	str	r3, [sp, #0]
 8009b22:	0013      	movs	r3, r2
 8009b24:	2200      	movs	r2, #0
 8009b26:	f000 f82d 	bl	8009b84 <UART_WaitOnFlagUntilTimeout>
 8009b2a:	1e03      	subs	r3, r0, #0
 8009b2c:	d001      	beq.n	8009b32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b2e:	2303      	movs	r3, #3
 8009b30:	e022      	b.n	8009b78 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2204      	movs	r2, #4
 8009b3a:	4013      	ands	r3, r2
 8009b3c:	2b04      	cmp	r3, #4
 8009b3e:	d10d      	bne.n	8009b5c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	2380      	movs	r3, #128	; 0x80
 8009b44:	03d9      	lsls	r1, r3, #15
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	4b0d      	ldr	r3, [pc, #52]	; (8009b80 <UART_CheckIdleState+0x90>)
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	0013      	movs	r3, r2
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f000 f818 	bl	8009b84 <UART_WaitOnFlagUntilTimeout>
 8009b54:	1e03      	subs	r3, r0, #0
 8009b56:	d001      	beq.n	8009b5c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b58:	2303      	movs	r3, #3
 8009b5a:	e00d      	b.n	8009b78 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2220      	movs	r2, #32
 8009b60:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2220      	movs	r2, #32
 8009b66:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2274      	movs	r2, #116	; 0x74
 8009b72:	2100      	movs	r1, #0
 8009b74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009b76:	2300      	movs	r3, #0
}
 8009b78:	0018      	movs	r0, r3
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	b004      	add	sp, #16
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	01ffffff 	.word	0x01ffffff

08009b84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b094      	sub	sp, #80	; 0x50
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	603b      	str	r3, [r7, #0]
 8009b90:	1dfb      	adds	r3, r7, #7
 8009b92:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b94:	e09b      	b.n	8009cce <UART_WaitOnFlagUntilTimeout+0x14a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b98:	3301      	adds	r3, #1
 8009b9a:	d100      	bne.n	8009b9e <UART_WaitOnFlagUntilTimeout+0x1a>
 8009b9c:	e097      	b.n	8009cce <UART_WaitOnFlagUntilTimeout+0x14a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b9e:	f7fb fe37 	bl	8005810 <HAL_GetTick>
 8009ba2:	0002      	movs	r2, r0
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	1ad3      	subs	r3, r2, r3
 8009ba8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d302      	bcc.n	8009bb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8009bae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d139      	bne.n	8009c28 <UART_WaitOnFlagUntilTimeout+0xa4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8009bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8009bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009bbc:	647b      	str	r3, [r7, #68]	; 0x44
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc4:	f383 8810 	msr	PRIMASK, r3
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4949      	ldr	r1, [pc, #292]	; (8009cf8 <UART_WaitOnFlagUntilTimeout+0x174>)
 8009bd4:	400a      	ands	r2, r1
 8009bd6:	601a      	str	r2, [r3, #0]
 8009bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bda:	633b      	str	r3, [r7, #48]	; 0x30
 8009bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bde:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009be2:	f3ef 8310 	mrs	r3, PRIMASK
 8009be6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8009be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bea:	643b      	str	r3, [r7, #64]	; 0x40
 8009bec:	2301      	movs	r3, #1
 8009bee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf2:	f383 8810 	msr	PRIMASK, r3
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	689a      	ldr	r2, [r3, #8]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2101      	movs	r1, #1
 8009c02:	438a      	bics	r2, r1
 8009c04:	609a      	str	r2, [r3, #8]
 8009c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c0c:	f383 8810 	msr	PRIMASK, r3

        huart->gState = HAL_UART_STATE_READY;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2220      	movs	r2, #32
 8009c14:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2220      	movs	r2, #32
 8009c1a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2274      	movs	r2, #116	; 0x74
 8009c20:	2100      	movs	r1, #0
 8009c22:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009c24:	2303      	movs	r3, #3
 8009c26:	e063      	b.n	8009cf0 <UART_WaitOnFlagUntilTimeout+0x16c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2204      	movs	r2, #4
 8009c30:	4013      	ands	r3, r2
 8009c32:	d04c      	beq.n	8009cce <UART_WaitOnFlagUntilTimeout+0x14a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	69da      	ldr	r2, [r3, #28]
 8009c3a:	2380      	movs	r3, #128	; 0x80
 8009c3c:	011b      	lsls	r3, r3, #4
 8009c3e:	401a      	ands	r2, r3
 8009c40:	2380      	movs	r3, #128	; 0x80
 8009c42:	011b      	lsls	r3, r3, #4
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d142      	bne.n	8009cce <UART_WaitOnFlagUntilTimeout+0x14a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2280      	movs	r2, #128	; 0x80
 8009c4e:	0112      	lsls	r2, r2, #4
 8009c50:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c52:	f3ef 8310 	mrs	r3, PRIMASK
 8009c56:	613b      	str	r3, [r7, #16]
  return(result);
 8009c58:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	f383 8810 	msr	PRIMASK, r3
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4921      	ldr	r1, [pc, #132]	; (8009cf8 <UART_WaitOnFlagUntilTimeout+0x174>)
 8009c72:	400a      	ands	r2, r1
 8009c74:	601a      	str	r2, [r3, #0]
 8009c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c78:	61bb      	str	r3, [r7, #24]
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c80:	f3ef 8310 	mrs	r3, PRIMASK
 8009c84:	61fb      	str	r3, [r7, #28]
  return(result);
 8009c86:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c88:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c8e:	6a3b      	ldr	r3, [r7, #32]
 8009c90:	f383 8810 	msr	PRIMASK, r3
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	689a      	ldr	r2, [r3, #8]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2101      	movs	r1, #1
 8009ca0:	438a      	bics	r2, r1
 8009ca2:	609a      	str	r2, [r3, #8]
 8009ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8009ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009caa:	f383 8810 	msr	PRIMASK, r3

          huart->gState = HAL_UART_STATE_READY;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2220      	movs	r2, #32
 8009cb2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2220      	movs	r2, #32
 8009cb8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2280      	movs	r2, #128	; 0x80
 8009cbe:	2120      	movs	r1, #32
 8009cc0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2274      	movs	r2, #116	; 0x74
 8009cc6:	2100      	movs	r1, #0
 8009cc8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	e010      	b.n	8009cf0 <UART_WaitOnFlagUntilTimeout+0x16c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	69db      	ldr	r3, [r3, #28]
 8009cd4:	68ba      	ldr	r2, [r7, #8]
 8009cd6:	4013      	ands	r3, r2
 8009cd8:	68ba      	ldr	r2, [r7, #8]
 8009cda:	1ad3      	subs	r3, r2, r3
 8009cdc:	425a      	negs	r2, r3
 8009cde:	4153      	adcs	r3, r2
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	001a      	movs	r2, r3
 8009ce4:	1dfb      	adds	r3, r7, #7
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d100      	bne.n	8009cee <UART_WaitOnFlagUntilTimeout+0x16a>
 8009cec:	e753      	b.n	8009b96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	0018      	movs	r0, r3
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	b014      	add	sp, #80	; 0x50
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	fffffe5f 	.word	0xfffffe5f

08009cfc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b090      	sub	sp, #64	; 0x40
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	1dbb      	adds	r3, r7, #6
 8009d08:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	68ba      	ldr	r2, [r7, #8]
 8009d0e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	1dba      	adds	r2, r7, #6
 8009d14:	2158      	movs	r1, #88	; 0x58
 8009d16:	8812      	ldrh	r2, [r2, #0]
 8009d18:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2280      	movs	r2, #128	; 0x80
 8009d1e:	2100      	movs	r1, #0
 8009d20:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2222      	movs	r2, #34	; 0x22
 8009d26:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d02b      	beq.n	8009d88 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d34:	4a3c      	ldr	r2, [pc, #240]	; (8009e28 <UART_Start_Receive_DMA+0x12c>)
 8009d36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d3c:	4a3b      	ldr	r2, [pc, #236]	; (8009e2c <UART_Start_Receive_DMA+0x130>)
 8009d3e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d44:	4a3a      	ldr	r2, [pc, #232]	; (8009e30 <UART_Start_Receive_DMA+0x134>)
 8009d46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	3324      	adds	r3, #36	; 0x24
 8009d5a:	0019      	movs	r1, r3
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d60:	001a      	movs	r2, r3
 8009d62:	1dbb      	adds	r3, r7, #6
 8009d64:	881b      	ldrh	r3, [r3, #0]
 8009d66:	f7fb ff1e 	bl	8005ba6 <HAL_DMA_Start_IT>
 8009d6a:	1e03      	subs	r3, r0, #0
 8009d6c:	d00c      	beq.n	8009d88 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2280      	movs	r2, #128	; 0x80
 8009d72:	2110      	movs	r1, #16
 8009d74:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2274      	movs	r2, #116	; 0x74
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2220      	movs	r2, #32
 8009d82:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	e04a      	b.n	8009e1e <UART_Start_Receive_DMA+0x122>
    }
  }
  __HAL_UNLOCK(huart);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2274      	movs	r2, #116	; 0x74
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d90:	f3ef 8310 	mrs	r3, PRIMASK
 8009d94:	613b      	str	r3, [r7, #16]
  return(result);
 8009d96:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	f383 8810 	msr	PRIMASK, r3
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2180      	movs	r1, #128	; 0x80
 8009db0:	0049      	lsls	r1, r1, #1
 8009db2:	430a      	orrs	r2, r1
 8009db4:	601a      	str	r2, [r3, #0]
 8009db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009db8:	61bb      	str	r3, [r7, #24]
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8009dc4:	61fb      	str	r3, [r7, #28]
  return(result);
 8009dc6:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8009dca:	2301      	movs	r3, #1
 8009dcc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dce:	6a3b      	ldr	r3, [r7, #32]
 8009dd0:	f383 8810 	msr	PRIMASK, r3
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	689a      	ldr	r2, [r3, #8]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2101      	movs	r1, #1
 8009de0:	430a      	orrs	r2, r1
 8009de2:	609a      	str	r2, [r3, #8]
 8009de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de6:	627b      	str	r3, [r7, #36]	; 0x24
 8009de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dea:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dee:	f3ef 8310 	mrs	r3, PRIMASK
 8009df2:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8009df4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009df6:	637b      	str	r3, [r7, #52]	; 0x34
 8009df8:	2301      	movs	r3, #1
 8009dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfe:	f383 8810 	msr	PRIMASK, r3
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	689a      	ldr	r2, [r3, #8]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2140      	movs	r1, #64	; 0x40
 8009e0e:	430a      	orrs	r2, r1
 8009e10:	609a      	str	r2, [r3, #8]
 8009e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e14:	633b      	str	r3, [r7, #48]	; 0x30
 8009e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e18:	f383 8810 	msr	PRIMASK, r3

  return HAL_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	0018      	movs	r0, r3
 8009e20:	46bd      	mov	sp, r7
 8009e22:	b010      	add	sp, #64	; 0x40
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	46c0      	nop			; (mov r8, r8)
 8009e28:	08009fe1 	.word	0x08009fe1
 8009e2c:	0800a0f9 	.word	0x0800a0f9
 8009e30:	0800a135 	.word	0x0800a135

08009e34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8009e40:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e42:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009e44:	617b      	str	r3, [r7, #20]
 8009e46:	2301      	movs	r3, #1
 8009e48:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f383 8810 	msr	PRIMASK, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	21c0      	movs	r1, #192	; 0xc0
 8009e5c:	438a      	bics	r2, r1
 8009e5e:	601a      	str	r2, [r3, #0]
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	613b      	str	r3, [r7, #16]
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	f383 8810 	msr	PRIMASK, r3

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2220      	movs	r2, #32
 8009e6e:	679a      	str	r2, [r3, #120]	; 0x78
}
 8009e70:	46c0      	nop			; (mov r8, r8)
 8009e72:	46bd      	mov	sp, r7
 8009e74:	b006      	add	sp, #24
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b08e      	sub	sp, #56	; 0x38
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e80:	f3ef 8310 	mrs	r3, PRIMASK
 8009e84:	617b      	str	r3, [r7, #20]
  return(result);
 8009e86:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e88:	637b      	str	r3, [r7, #52]	; 0x34
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	f383 8810 	msr	PRIMASK, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4923      	ldr	r1, [pc, #140]	; (8009f2c <UART_EndRxTransfer+0xb4>)
 8009ea0:	400a      	ands	r2, r1
 8009ea2:	601a      	str	r2, [r3, #0]
 8009ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ea6:	61fb      	str	r3, [r7, #28]
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009eae:	f3ef 8310 	mrs	r3, PRIMASK
 8009eb2:	623b      	str	r3, [r7, #32]
  return(result);
 8009eb4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009eb6:	633b      	str	r3, [r7, #48]	; 0x30
 8009eb8:	2301      	movs	r3, #1
 8009eba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebe:	f383 8810 	msr	PRIMASK, r3
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	689a      	ldr	r2, [r3, #8]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2101      	movs	r1, #1
 8009ece:	438a      	bics	r2, r1
 8009ed0:	609a      	str	r2, [r3, #8]
 8009ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed8:	f383 8810 	msr	PRIMASK, r3

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d116      	bne.n	8009f12 <UART_EndRxTransfer+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8009ee8:	60bb      	str	r3, [r7, #8]
  return(result);
 8009eea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009eee:	2301      	movs	r3, #1
 8009ef0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f383 8810 	msr	PRIMASK, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2110      	movs	r1, #16
 8009f04:	438a      	bics	r2, r1
 8009f06:	601a      	str	r2, [r3, #0]
 8009f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f0a:	613b      	str	r3, [r7, #16]
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	f383 8810 	msr	PRIMASK, r3
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2220      	movs	r2, #32
 8009f16:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009f24:	46c0      	nop			; (mov r8, r8)
 8009f26:	46bd      	mov	sp, r7
 8009f28:	b00e      	add	sp, #56	; 0x38
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	fffffedf 	.word	0xfffffedf

08009f30 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b08c      	sub	sp, #48	; 0x30
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f3c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2220      	movs	r2, #32
 8009f46:	4013      	ands	r3, r2
 8009f48:	d132      	bne.n	8009fb0 <UART_DMATransmitCplt+0x80>
  {
    huart->TxXferCount = 0U;
 8009f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f4c:	2252      	movs	r2, #82	; 0x52
 8009f4e:	2100      	movs	r1, #0
 8009f50:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f52:	f3ef 8310 	mrs	r3, PRIMASK
 8009f56:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f58:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009f5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	f383 8810 	msr	PRIMASK, r3
 8009f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	689a      	ldr	r2, [r3, #8]
 8009f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2180      	movs	r1, #128	; 0x80
 8009f72:	438a      	bics	r2, r1
 8009f74:	609a      	str	r2, [r3, #8]
 8009f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f78:	617b      	str	r3, [r7, #20]
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f80:	f3ef 8310 	mrs	r3, PRIMASK
 8009f84:	61bb      	str	r3, [r7, #24]
  return(result);
 8009f86:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f88:	627b      	str	r3, [r7, #36]	; 0x24
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	f383 8810 	msr	PRIMASK, r3
 8009f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2140      	movs	r1, #64	; 0x40
 8009fa0:	430a      	orrs	r2, r1
 8009fa2:	601a      	str	r2, [r3, #0]
 8009fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa6:	623b      	str	r3, [r7, #32]
 8009fa8:	6a3b      	ldr	r3, [r7, #32]
 8009faa:	f383 8810 	msr	PRIMASK, r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009fae:	e003      	b.n	8009fb8 <UART_DMATransmitCplt+0x88>
    HAL_UART_TxCpltCallback(huart);
 8009fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb2:	0018      	movs	r0, r3
 8009fb4:	f7ff fa00 	bl	80093b8 <HAL_UART_TxCpltCallback>
}
 8009fb8:	46c0      	nop			; (mov r8, r8)
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	b00c      	add	sp, #48	; 0x30
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fcc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	0018      	movs	r0, r3
 8009fd2:	f7ff f9f9 	bl	80093c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fd6:	46c0      	nop			; (mov r8, r8)
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	b004      	add	sp, #16
 8009fdc:	bd80      	pop	{r7, pc}
	...

08009fe0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b094      	sub	sp, #80	; 0x50
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fec:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2220      	movs	r2, #32
 8009ff6:	4013      	ands	r3, r2
 8009ff8:	d166      	bne.n	800a0c8 <UART_DMAReceiveCplt+0xe8>
  {
    huart->RxXferCount = 0U;
 8009ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ffc:	225a      	movs	r2, #90	; 0x5a
 8009ffe:	2100      	movs	r1, #0
 800a000:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a002:	f3ef 8310 	mrs	r3, PRIMASK
 800a006:	61bb      	str	r3, [r7, #24]
  return(result);
 800a008:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a00a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a00c:	2301      	movs	r3, #1
 800a00e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	f383 8810 	msr	PRIMASK, r3
 800a016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4934      	ldr	r1, [pc, #208]	; (800a0f4 <UART_DMAReceiveCplt+0x114>)
 800a022:	400a      	ands	r2, r1
 800a024:	601a      	str	r2, [r3, #0]
 800a026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a028:	623b      	str	r3, [r7, #32]
 800a02a:	6a3b      	ldr	r3, [r7, #32]
 800a02c:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a030:	f3ef 8310 	mrs	r3, PRIMASK
 800a034:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a038:	647b      	str	r3, [r7, #68]	; 0x44
 800a03a:	2301      	movs	r3, #1
 800a03c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a040:	f383 8810 	msr	PRIMASK, r3
 800a044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	689a      	ldr	r2, [r3, #8]
 800a04a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2101      	movs	r1, #1
 800a050:	438a      	bics	r2, r1
 800a052:	609a      	str	r2, [r3, #8]
 800a054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a056:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a05a:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a05e:	f3ef 8310 	mrs	r3, PRIMASK
 800a062:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800a064:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a066:	643b      	str	r3, [r7, #64]	; 0x40
 800a068:	2301      	movs	r3, #1
 800a06a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a06c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a06e:	f383 8810 	msr	PRIMASK, r3
 800a072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	689a      	ldr	r2, [r3, #8]
 800a078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2140      	movs	r1, #64	; 0x40
 800a07e:	438a      	bics	r2, r1
 800a080:	609a      	str	r2, [r3, #8]
 800a082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a084:	63bb      	str	r3, [r7, #56]	; 0x38
 800a086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a088:	f383 8810 	msr	PRIMASK, r3

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a08c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a08e:	2220      	movs	r2, #32
 800a090:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a096:	2b01      	cmp	r3, #1
 800a098:	d116      	bne.n	800a0c8 <UART_DMAReceiveCplt+0xe8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a09a:	f3ef 8310 	mrs	r3, PRIMASK
 800a09e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	f383 8810 	msr	PRIMASK, r3
 800a0ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2110      	movs	r1, #16
 800a0ba:	438a      	bics	r2, r1
 800a0bc:	601a      	str	r2, [r3, #0]
 800a0be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0c0:	617b      	str	r3, [r7, #20]
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	f383 8810 	msr	PRIMASK, r3
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d108      	bne.n	800a0e2 <UART_DMAReceiveCplt+0x102>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0d2:	2258      	movs	r2, #88	; 0x58
 800a0d4:	5a9a      	ldrh	r2, [r3, r2]
 800a0d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0d8:	0011      	movs	r1, r2
 800a0da:	0018      	movs	r0, r3
 800a0dc:	f7ff f98c 	bl	80093f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a0e0:	e003      	b.n	800a0ea <UART_DMAReceiveCplt+0x10a>
    HAL_UART_RxCpltCallback(huart);
 800a0e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0e4:	0018      	movs	r0, r3
 800a0e6:	f7fb f90b 	bl	8005300 <HAL_UART_RxCpltCallback>
}
 800a0ea:	46c0      	nop			; (mov r8, r8)
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	b014      	add	sp, #80	; 0x50
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	46c0      	nop			; (mov r8, r8)
 800a0f4:	fffffeff 	.word	0xfffffeff

0800a0f8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a104:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d10a      	bne.n	800a124 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2258      	movs	r2, #88	; 0x58
 800a112:	5a9b      	ldrh	r3, [r3, r2]
 800a114:	085b      	lsrs	r3, r3, #1
 800a116:	b29a      	uxth	r2, r3
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	0011      	movs	r1, r2
 800a11c:	0018      	movs	r0, r3
 800a11e:	f7ff f96b 	bl	80093f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a122:	e003      	b.n	800a12c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	0018      	movs	r0, r3
 800a128:	f7ff f956 	bl	80093d8 <HAL_UART_RxHalfCpltCallback>
}
 800a12c:	46c0      	nop			; (mov r8, r8)
 800a12e:	46bd      	mov	sp, r7
 800a130:	b004      	add	sp, #16
 800a132:	bd80      	pop	{r7, pc}

0800a134 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b086      	sub	sp, #24
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a140:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a146:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a14c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	2280      	movs	r2, #128	; 0x80
 800a156:	4013      	ands	r3, r2
 800a158:	2b80      	cmp	r3, #128	; 0x80
 800a15a:	d10a      	bne.n	800a172 <UART_DMAError+0x3e>
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	2b21      	cmp	r3, #33	; 0x21
 800a160:	d107      	bne.n	800a172 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	2252      	movs	r2, #82	; 0x52
 800a166:	2100      	movs	r1, #0
 800a168:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	0018      	movs	r0, r3
 800a16e:	f7ff fe61 	bl	8009e34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	2240      	movs	r2, #64	; 0x40
 800a17a:	4013      	ands	r3, r2
 800a17c:	2b40      	cmp	r3, #64	; 0x40
 800a17e:	d10a      	bne.n	800a196 <UART_DMAError+0x62>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2b22      	cmp	r3, #34	; 0x22
 800a184:	d107      	bne.n	800a196 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	225a      	movs	r2, #90	; 0x5a
 800a18a:	2100      	movs	r1, #0
 800a18c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	0018      	movs	r0, r3
 800a192:	f7ff fe71 	bl	8009e78 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	2280      	movs	r2, #128	; 0x80
 800a19a:	589b      	ldr	r3, [r3, r2]
 800a19c:	2210      	movs	r2, #16
 800a19e:	431a      	orrs	r2, r3
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	2180      	movs	r1, #128	; 0x80
 800a1a4:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	0018      	movs	r0, r3
 800a1aa:	f7ff f91d 	bl	80093e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1ae:	46c0      	nop			; (mov r8, r8)
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	b006      	add	sp, #24
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b084      	sub	sp, #16
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	225a      	movs	r2, #90	; 0x5a
 800a1c8:	2100      	movs	r1, #0
 800a1ca:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2252      	movs	r2, #82	; 0x52
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	0018      	movs	r0, r3
 800a1d8:	f7ff f906 	bl	80093e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1dc:	46c0      	nop			; (mov r8, r8)
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	b004      	add	sp, #16
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b086      	sub	sp, #24
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1ec:	f3ef 8310 	mrs	r3, PRIMASK
 800a1f0:	60bb      	str	r3, [r7, #8]
  return(result);
 800a1f2:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a1f4:	617b      	str	r3, [r7, #20]
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f383 8810 	msr	PRIMASK, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2140      	movs	r1, #64	; 0x40
 800a20c:	438a      	bics	r2, r1
 800a20e:	601a      	str	r2, [r3, #0]
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	613b      	str	r3, [r7, #16]
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	f383 8810 	msr	PRIMASK, r3

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2220      	movs	r2, #32
 800a21e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	0018      	movs	r0, r3
 800a22a:	f7ff f8c5 	bl	80093b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a22e:	46c0      	nop			; (mov r8, r8)
 800a230:	46bd      	mov	sp, r7
 800a232:	b006      	add	sp, #24
 800a234:	bd80      	pop	{r7, pc}

0800a236 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b082      	sub	sp, #8
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a23e:	46c0      	nop			; (mov r8, r8)
 800a240:	46bd      	mov	sp, r7
 800a242:	b002      	add	sp, #8
 800a244:	bd80      	pop	{r7, pc}
	...

0800a248 <__errno>:
 800a248:	4b01      	ldr	r3, [pc, #4]	; (800a250 <__errno+0x8>)
 800a24a:	6818      	ldr	r0, [r3, #0]
 800a24c:	4770      	bx	lr
 800a24e:	46c0      	nop			; (mov r8, r8)
 800a250:	20000178 	.word	0x20000178

0800a254 <__libc_init_array>:
 800a254:	b570      	push	{r4, r5, r6, lr}
 800a256:	2600      	movs	r6, #0
 800a258:	4d0c      	ldr	r5, [pc, #48]	; (800a28c <__libc_init_array+0x38>)
 800a25a:	4c0d      	ldr	r4, [pc, #52]	; (800a290 <__libc_init_array+0x3c>)
 800a25c:	1b64      	subs	r4, r4, r5
 800a25e:	10a4      	asrs	r4, r4, #2
 800a260:	42a6      	cmp	r6, r4
 800a262:	d109      	bne.n	800a278 <__libc_init_array+0x24>
 800a264:	2600      	movs	r6, #0
 800a266:	f004 fb2d 	bl	800e8c4 <_init>
 800a26a:	4d0a      	ldr	r5, [pc, #40]	; (800a294 <__libc_init_array+0x40>)
 800a26c:	4c0a      	ldr	r4, [pc, #40]	; (800a298 <__libc_init_array+0x44>)
 800a26e:	1b64      	subs	r4, r4, r5
 800a270:	10a4      	asrs	r4, r4, #2
 800a272:	42a6      	cmp	r6, r4
 800a274:	d105      	bne.n	800a282 <__libc_init_array+0x2e>
 800a276:	bd70      	pop	{r4, r5, r6, pc}
 800a278:	00b3      	lsls	r3, r6, #2
 800a27a:	58eb      	ldr	r3, [r5, r3]
 800a27c:	4798      	blx	r3
 800a27e:	3601      	adds	r6, #1
 800a280:	e7ee      	b.n	800a260 <__libc_init_array+0xc>
 800a282:	00b3      	lsls	r3, r6, #2
 800a284:	58eb      	ldr	r3, [r5, r3]
 800a286:	4798      	blx	r3
 800a288:	3601      	adds	r6, #1
 800a28a:	e7f2      	b.n	800a272 <__libc_init_array+0x1e>
 800a28c:	0800f270 	.word	0x0800f270
 800a290:	0800f270 	.word	0x0800f270
 800a294:	0800f270 	.word	0x0800f270
 800a298:	0800f274 	.word	0x0800f274

0800a29c <memcmp>:
 800a29c:	b530      	push	{r4, r5, lr}
 800a29e:	2400      	movs	r4, #0
 800a2a0:	42a2      	cmp	r2, r4
 800a2a2:	d101      	bne.n	800a2a8 <memcmp+0xc>
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	e005      	b.n	800a2b4 <memcmp+0x18>
 800a2a8:	5d03      	ldrb	r3, [r0, r4]
 800a2aa:	1c65      	adds	r5, r4, #1
 800a2ac:	5d0c      	ldrb	r4, [r1, r4]
 800a2ae:	42a3      	cmp	r3, r4
 800a2b0:	d001      	beq.n	800a2b6 <memcmp+0x1a>
 800a2b2:	1b18      	subs	r0, r3, r4
 800a2b4:	bd30      	pop	{r4, r5, pc}
 800a2b6:	002c      	movs	r4, r5
 800a2b8:	e7f2      	b.n	800a2a0 <memcmp+0x4>

0800a2ba <memcpy>:
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	b510      	push	{r4, lr}
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d100      	bne.n	800a2c4 <memcpy+0xa>
 800a2c2:	bd10      	pop	{r4, pc}
 800a2c4:	5ccc      	ldrb	r4, [r1, r3]
 800a2c6:	54c4      	strb	r4, [r0, r3]
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	e7f8      	b.n	800a2be <memcpy+0x4>

0800a2cc <memset>:
 800a2cc:	0003      	movs	r3, r0
 800a2ce:	1812      	adds	r2, r2, r0
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d100      	bne.n	800a2d6 <memset+0xa>
 800a2d4:	4770      	bx	lr
 800a2d6:	7019      	strb	r1, [r3, #0]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	e7f9      	b.n	800a2d0 <memset+0x4>

0800a2dc <__cvt>:
 800a2dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2de:	b08b      	sub	sp, #44	; 0x2c
 800a2e0:	0014      	movs	r4, r2
 800a2e2:	1e1d      	subs	r5, r3, #0
 800a2e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a2e6:	da53      	bge.n	800a390 <__cvt+0xb4>
 800a2e8:	2480      	movs	r4, #128	; 0x80
 800a2ea:	0624      	lsls	r4, r4, #24
 800a2ec:	191b      	adds	r3, r3, r4
 800a2ee:	001d      	movs	r5, r3
 800a2f0:	0014      	movs	r4, r2
 800a2f2:	232d      	movs	r3, #45	; 0x2d
 800a2f4:	700b      	strb	r3, [r1, #0]
 800a2f6:	2320      	movs	r3, #32
 800a2f8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800a2fa:	2203      	movs	r2, #3
 800a2fc:	439e      	bics	r6, r3
 800a2fe:	2e46      	cmp	r6, #70	; 0x46
 800a300:	d007      	beq.n	800a312 <__cvt+0x36>
 800a302:	0033      	movs	r3, r6
 800a304:	3b45      	subs	r3, #69	; 0x45
 800a306:	4259      	negs	r1, r3
 800a308:	414b      	adcs	r3, r1
 800a30a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a30c:	3a01      	subs	r2, #1
 800a30e:	18cb      	adds	r3, r1, r3
 800a310:	9310      	str	r3, [sp, #64]	; 0x40
 800a312:	ab09      	add	r3, sp, #36	; 0x24
 800a314:	9304      	str	r3, [sp, #16]
 800a316:	ab08      	add	r3, sp, #32
 800a318:	9303      	str	r3, [sp, #12]
 800a31a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a31c:	9200      	str	r2, [sp, #0]
 800a31e:	9302      	str	r3, [sp, #8]
 800a320:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a322:	0022      	movs	r2, r4
 800a324:	9301      	str	r3, [sp, #4]
 800a326:	002b      	movs	r3, r5
 800a328:	f001 ff0e 	bl	800c148 <_dtoa_r>
 800a32c:	0007      	movs	r7, r0
 800a32e:	2e47      	cmp	r6, #71	; 0x47
 800a330:	d102      	bne.n	800a338 <__cvt+0x5c>
 800a332:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a334:	07db      	lsls	r3, r3, #31
 800a336:	d524      	bpl.n	800a382 <__cvt+0xa6>
 800a338:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a33a:	18fb      	adds	r3, r7, r3
 800a33c:	9307      	str	r3, [sp, #28]
 800a33e:	2e46      	cmp	r6, #70	; 0x46
 800a340:	d114      	bne.n	800a36c <__cvt+0x90>
 800a342:	783b      	ldrb	r3, [r7, #0]
 800a344:	2b30      	cmp	r3, #48	; 0x30
 800a346:	d10c      	bne.n	800a362 <__cvt+0x86>
 800a348:	2200      	movs	r2, #0
 800a34a:	2300      	movs	r3, #0
 800a34c:	0020      	movs	r0, r4
 800a34e:	0029      	movs	r1, r5
 800a350:	f7f6 f876 	bl	8000440 <__aeabi_dcmpeq>
 800a354:	2800      	cmp	r0, #0
 800a356:	d104      	bne.n	800a362 <__cvt+0x86>
 800a358:	2301      	movs	r3, #1
 800a35a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a35c:	1a9b      	subs	r3, r3, r2
 800a35e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a360:	6013      	str	r3, [r2, #0]
 800a362:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a364:	9a07      	ldr	r2, [sp, #28]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	18d3      	adds	r3, r2, r3
 800a36a:	9307      	str	r3, [sp, #28]
 800a36c:	2200      	movs	r2, #0
 800a36e:	2300      	movs	r3, #0
 800a370:	0020      	movs	r0, r4
 800a372:	0029      	movs	r1, r5
 800a374:	f7f6 f864 	bl	8000440 <__aeabi_dcmpeq>
 800a378:	2230      	movs	r2, #48	; 0x30
 800a37a:	2800      	cmp	r0, #0
 800a37c:	d00d      	beq.n	800a39a <__cvt+0xbe>
 800a37e:	9b07      	ldr	r3, [sp, #28]
 800a380:	9309      	str	r3, [sp, #36]	; 0x24
 800a382:	0038      	movs	r0, r7
 800a384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a386:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a388:	1bdb      	subs	r3, r3, r7
 800a38a:	6013      	str	r3, [r2, #0]
 800a38c:	b00b      	add	sp, #44	; 0x2c
 800a38e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a390:	2300      	movs	r3, #0
 800a392:	e7af      	b.n	800a2f4 <__cvt+0x18>
 800a394:	1c59      	adds	r1, r3, #1
 800a396:	9109      	str	r1, [sp, #36]	; 0x24
 800a398:	701a      	strb	r2, [r3, #0]
 800a39a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a39c:	9907      	ldr	r1, [sp, #28]
 800a39e:	428b      	cmp	r3, r1
 800a3a0:	d3f8      	bcc.n	800a394 <__cvt+0xb8>
 800a3a2:	e7ee      	b.n	800a382 <__cvt+0xa6>

0800a3a4 <__exponent>:
 800a3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3a6:	1c83      	adds	r3, r0, #2
 800a3a8:	b085      	sub	sp, #20
 800a3aa:	9301      	str	r3, [sp, #4]
 800a3ac:	0006      	movs	r6, r0
 800a3ae:	000c      	movs	r4, r1
 800a3b0:	7002      	strb	r2, [r0, #0]
 800a3b2:	232b      	movs	r3, #43	; 0x2b
 800a3b4:	2900      	cmp	r1, #0
 800a3b6:	da01      	bge.n	800a3bc <__exponent+0x18>
 800a3b8:	232d      	movs	r3, #45	; 0x2d
 800a3ba:	424c      	negs	r4, r1
 800a3bc:	7073      	strb	r3, [r6, #1]
 800a3be:	2c09      	cmp	r4, #9
 800a3c0:	dd22      	ble.n	800a408 <__exponent+0x64>
 800a3c2:	ab02      	add	r3, sp, #8
 800a3c4:	1ddd      	adds	r5, r3, #7
 800a3c6:	0020      	movs	r0, r4
 800a3c8:	210a      	movs	r1, #10
 800a3ca:	f7f6 f823 	bl	8000414 <__aeabi_idivmod>
 800a3ce:	1e6f      	subs	r7, r5, #1
 800a3d0:	3130      	adds	r1, #48	; 0x30
 800a3d2:	7039      	strb	r1, [r7, #0]
 800a3d4:	0020      	movs	r0, r4
 800a3d6:	210a      	movs	r1, #10
 800a3d8:	f7f5 ff36 	bl	8000248 <__divsi3>
 800a3dc:	0004      	movs	r4, r0
 800a3de:	2809      	cmp	r0, #9
 800a3e0:	dc0b      	bgt.n	800a3fa <__exponent+0x56>
 800a3e2:	3d02      	subs	r5, #2
 800a3e4:	3430      	adds	r4, #48	; 0x30
 800a3e6:	9b01      	ldr	r3, [sp, #4]
 800a3e8:	702c      	strb	r4, [r5, #0]
 800a3ea:	aa02      	add	r2, sp, #8
 800a3ec:	3207      	adds	r2, #7
 800a3ee:	0018      	movs	r0, r3
 800a3f0:	42aa      	cmp	r2, r5
 800a3f2:	d804      	bhi.n	800a3fe <__exponent+0x5a>
 800a3f4:	1b80      	subs	r0, r0, r6
 800a3f6:	b005      	add	sp, #20
 800a3f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3fa:	003d      	movs	r5, r7
 800a3fc:	e7e3      	b.n	800a3c6 <__exponent+0x22>
 800a3fe:	782a      	ldrb	r2, [r5, #0]
 800a400:	3501      	adds	r5, #1
 800a402:	701a      	strb	r2, [r3, #0]
 800a404:	3301      	adds	r3, #1
 800a406:	e7f0      	b.n	800a3ea <__exponent+0x46>
 800a408:	2330      	movs	r3, #48	; 0x30
 800a40a:	18e4      	adds	r4, r4, r3
 800a40c:	70b3      	strb	r3, [r6, #2]
 800a40e:	1d30      	adds	r0, r6, #4
 800a410:	70f4      	strb	r4, [r6, #3]
 800a412:	e7ef      	b.n	800a3f4 <__exponent+0x50>

0800a414 <_printf_float>:
 800a414:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a416:	b095      	sub	sp, #84	; 0x54
 800a418:	000c      	movs	r4, r1
 800a41a:	920a      	str	r2, [sp, #40]	; 0x28
 800a41c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a41e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800a420:	9009      	str	r0, [sp, #36]	; 0x24
 800a422:	f003 f933 	bl	800d68c <_localeconv_r>
 800a426:	6803      	ldr	r3, [r0, #0]
 800a428:	0018      	movs	r0, r3
 800a42a:	930c      	str	r3, [sp, #48]	; 0x30
 800a42c:	f7f5 fe70 	bl	8000110 <strlen>
 800a430:	2300      	movs	r3, #0
 800a432:	9312      	str	r3, [sp, #72]	; 0x48
 800a434:	6823      	ldr	r3, [r4, #0]
 800a436:	900e      	str	r0, [sp, #56]	; 0x38
 800a438:	930d      	str	r3, [sp, #52]	; 0x34
 800a43a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a43c:	7e27      	ldrb	r7, [r4, #24]
 800a43e:	682b      	ldr	r3, [r5, #0]
 800a440:	2207      	movs	r2, #7
 800a442:	05c9      	lsls	r1, r1, #23
 800a444:	d545      	bpl.n	800a4d2 <_printf_float+0xbe>
 800a446:	189b      	adds	r3, r3, r2
 800a448:	4393      	bics	r3, r2
 800a44a:	001a      	movs	r2, r3
 800a44c:	3208      	adds	r2, #8
 800a44e:	602a      	str	r2, [r5, #0]
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	64a2      	str	r2, [r4, #72]	; 0x48
 800a456:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a458:	2201      	movs	r2, #1
 800a45a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800a45c:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 800a45e:	006b      	lsls	r3, r5, #1
 800a460:	085b      	lsrs	r3, r3, #1
 800a462:	930f      	str	r3, [sp, #60]	; 0x3c
 800a464:	4252      	negs	r2, r2
 800a466:	4bac      	ldr	r3, [pc, #688]	; (800a718 <_printf_float+0x304>)
 800a468:	0030      	movs	r0, r6
 800a46a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a46c:	f7f8 fab2 	bl	80029d4 <__aeabi_dcmpun>
 800a470:	2800      	cmp	r0, #0
 800a472:	d130      	bne.n	800a4d6 <_printf_float+0xc2>
 800a474:	2201      	movs	r2, #1
 800a476:	4ba8      	ldr	r3, [pc, #672]	; (800a718 <_printf_float+0x304>)
 800a478:	4252      	negs	r2, r2
 800a47a:	0030      	movs	r0, r6
 800a47c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a47e:	f7f5 ffef 	bl	8000460 <__aeabi_dcmple>
 800a482:	2800      	cmp	r0, #0
 800a484:	d127      	bne.n	800a4d6 <_printf_float+0xc2>
 800a486:	2200      	movs	r2, #0
 800a488:	2300      	movs	r3, #0
 800a48a:	0030      	movs	r0, r6
 800a48c:	0029      	movs	r1, r5
 800a48e:	f7f5 ffdd 	bl	800044c <__aeabi_dcmplt>
 800a492:	2800      	cmp	r0, #0
 800a494:	d003      	beq.n	800a49e <_printf_float+0x8a>
 800a496:	0023      	movs	r3, r4
 800a498:	222d      	movs	r2, #45	; 0x2d
 800a49a:	3343      	adds	r3, #67	; 0x43
 800a49c:	701a      	strb	r2, [r3, #0]
 800a49e:	4d9f      	ldr	r5, [pc, #636]	; (800a71c <_printf_float+0x308>)
 800a4a0:	2f47      	cmp	r7, #71	; 0x47
 800a4a2:	d800      	bhi.n	800a4a6 <_printf_float+0x92>
 800a4a4:	4d9e      	ldr	r5, [pc, #632]	; (800a720 <_printf_float+0x30c>)
 800a4a6:	2303      	movs	r3, #3
 800a4a8:	2600      	movs	r6, #0
 800a4aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a4ac:	6123      	str	r3, [r4, #16]
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	439a      	bics	r2, r3
 800a4b2:	6022      	str	r2, [r4, #0]
 800a4b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4b6:	aa13      	add	r2, sp, #76	; 0x4c
 800a4b8:	9300      	str	r3, [sp, #0]
 800a4ba:	0021      	movs	r1, r4
 800a4bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4c0:	f000 f9f4 	bl	800a8ac <_printf_common>
 800a4c4:	1c43      	adds	r3, r0, #1
 800a4c6:	d000      	beq.n	800a4ca <_printf_float+0xb6>
 800a4c8:	e093      	b.n	800a5f2 <_printf_float+0x1de>
 800a4ca:	2001      	movs	r0, #1
 800a4cc:	4240      	negs	r0, r0
 800a4ce:	b015      	add	sp, #84	; 0x54
 800a4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4d2:	3307      	adds	r3, #7
 800a4d4:	e7b8      	b.n	800a448 <_printf_float+0x34>
 800a4d6:	0032      	movs	r2, r6
 800a4d8:	002b      	movs	r3, r5
 800a4da:	0030      	movs	r0, r6
 800a4dc:	0029      	movs	r1, r5
 800a4de:	f7f8 fa79 	bl	80029d4 <__aeabi_dcmpun>
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	d004      	beq.n	800a4f0 <_printf_float+0xdc>
 800a4e6:	4d8f      	ldr	r5, [pc, #572]	; (800a724 <_printf_float+0x310>)
 800a4e8:	2f47      	cmp	r7, #71	; 0x47
 800a4ea:	d8dc      	bhi.n	800a4a6 <_printf_float+0x92>
 800a4ec:	4d8e      	ldr	r5, [pc, #568]	; (800a728 <_printf_float+0x314>)
 800a4ee:	e7da      	b.n	800a4a6 <_printf_float+0x92>
 800a4f0:	2380      	movs	r3, #128	; 0x80
 800a4f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a4f4:	6862      	ldr	r2, [r4, #4]
 800a4f6:	00db      	lsls	r3, r3, #3
 800a4f8:	430b      	orrs	r3, r1
 800a4fa:	1c51      	adds	r1, r2, #1
 800a4fc:	d143      	bne.n	800a586 <_printf_float+0x172>
 800a4fe:	3207      	adds	r2, #7
 800a500:	6062      	str	r2, [r4, #4]
 800a502:	aa12      	add	r2, sp, #72	; 0x48
 800a504:	2100      	movs	r1, #0
 800a506:	9205      	str	r2, [sp, #20]
 800a508:	aa11      	add	r2, sp, #68	; 0x44
 800a50a:	9203      	str	r2, [sp, #12]
 800a50c:	2223      	movs	r2, #35	; 0x23
 800a50e:	6023      	str	r3, [r4, #0]
 800a510:	9106      	str	r1, [sp, #24]
 800a512:	9301      	str	r3, [sp, #4]
 800a514:	a908      	add	r1, sp, #32
 800a516:	6863      	ldr	r3, [r4, #4]
 800a518:	1852      	adds	r2, r2, r1
 800a51a:	9202      	str	r2, [sp, #8]
 800a51c:	9300      	str	r3, [sp, #0]
 800a51e:	0032      	movs	r2, r6
 800a520:	002b      	movs	r3, r5
 800a522:	9704      	str	r7, [sp, #16]
 800a524:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a526:	f7ff fed9 	bl	800a2dc <__cvt>
 800a52a:	2320      	movs	r3, #32
 800a52c:	003a      	movs	r2, r7
 800a52e:	0005      	movs	r5, r0
 800a530:	439a      	bics	r2, r3
 800a532:	2a47      	cmp	r2, #71	; 0x47
 800a534:	d107      	bne.n	800a546 <_printf_float+0x132>
 800a536:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a538:	1cda      	adds	r2, r3, #3
 800a53a:	db02      	blt.n	800a542 <_printf_float+0x12e>
 800a53c:	6862      	ldr	r2, [r4, #4]
 800a53e:	4293      	cmp	r3, r2
 800a540:	dd45      	ble.n	800a5ce <_printf_float+0x1ba>
 800a542:	3f02      	subs	r7, #2
 800a544:	b2ff      	uxtb	r7, r7
 800a546:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a548:	2f65      	cmp	r7, #101	; 0x65
 800a54a:	d825      	bhi.n	800a598 <_printf_float+0x184>
 800a54c:	0020      	movs	r0, r4
 800a54e:	3901      	subs	r1, #1
 800a550:	003a      	movs	r2, r7
 800a552:	3050      	adds	r0, #80	; 0x50
 800a554:	9111      	str	r1, [sp, #68]	; 0x44
 800a556:	f7ff ff25 	bl	800a3a4 <__exponent>
 800a55a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a55c:	0006      	movs	r6, r0
 800a55e:	1813      	adds	r3, r2, r0
 800a560:	6123      	str	r3, [r4, #16]
 800a562:	2a01      	cmp	r2, #1
 800a564:	dc02      	bgt.n	800a56c <_printf_float+0x158>
 800a566:	6822      	ldr	r2, [r4, #0]
 800a568:	07d2      	lsls	r2, r2, #31
 800a56a:	d501      	bpl.n	800a570 <_printf_float+0x15c>
 800a56c:	3301      	adds	r3, #1
 800a56e:	6123      	str	r3, [r4, #16]
 800a570:	2323      	movs	r3, #35	; 0x23
 800a572:	aa08      	add	r2, sp, #32
 800a574:	189b      	adds	r3, r3, r2
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d09b      	beq.n	800a4b4 <_printf_float+0xa0>
 800a57c:	0023      	movs	r3, r4
 800a57e:	222d      	movs	r2, #45	; 0x2d
 800a580:	3343      	adds	r3, #67	; 0x43
 800a582:	701a      	strb	r2, [r3, #0]
 800a584:	e796      	b.n	800a4b4 <_printf_float+0xa0>
 800a586:	2f67      	cmp	r7, #103	; 0x67
 800a588:	d100      	bne.n	800a58c <_printf_float+0x178>
 800a58a:	e176      	b.n	800a87a <_printf_float+0x466>
 800a58c:	2f47      	cmp	r7, #71	; 0x47
 800a58e:	d1b8      	bne.n	800a502 <_printf_float+0xee>
 800a590:	2a00      	cmp	r2, #0
 800a592:	d1b6      	bne.n	800a502 <_printf_float+0xee>
 800a594:	2201      	movs	r2, #1
 800a596:	e7b3      	b.n	800a500 <_printf_float+0xec>
 800a598:	2f66      	cmp	r7, #102	; 0x66
 800a59a:	d119      	bne.n	800a5d0 <_printf_float+0x1bc>
 800a59c:	6863      	ldr	r3, [r4, #4]
 800a59e:	2900      	cmp	r1, #0
 800a5a0:	dd0c      	ble.n	800a5bc <_printf_float+0x1a8>
 800a5a2:	6121      	str	r1, [r4, #16]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d102      	bne.n	800a5ae <_printf_float+0x19a>
 800a5a8:	6822      	ldr	r2, [r4, #0]
 800a5aa:	07d2      	lsls	r2, r2, #31
 800a5ac:	d502      	bpl.n	800a5b4 <_printf_float+0x1a0>
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	185b      	adds	r3, r3, r1
 800a5b2:	6123      	str	r3, [r4, #16]
 800a5b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5b6:	2600      	movs	r6, #0
 800a5b8:	65a3      	str	r3, [r4, #88]	; 0x58
 800a5ba:	e7d9      	b.n	800a570 <_printf_float+0x15c>
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d103      	bne.n	800a5c8 <_printf_float+0x1b4>
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	6821      	ldr	r1, [r4, #0]
 800a5c4:	4211      	tst	r1, r2
 800a5c6:	d000      	beq.n	800a5ca <_printf_float+0x1b6>
 800a5c8:	1c9a      	adds	r2, r3, #2
 800a5ca:	6122      	str	r2, [r4, #16]
 800a5cc:	e7f2      	b.n	800a5b4 <_printf_float+0x1a0>
 800a5ce:	2767      	movs	r7, #103	; 0x67
 800a5d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	db05      	blt.n	800a5e4 <_printf_float+0x1d0>
 800a5d8:	6822      	ldr	r2, [r4, #0]
 800a5da:	6123      	str	r3, [r4, #16]
 800a5dc:	07d2      	lsls	r2, r2, #31
 800a5de:	d5e9      	bpl.n	800a5b4 <_printf_float+0x1a0>
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	e7e6      	b.n	800a5b2 <_printf_float+0x19e>
 800a5e4:	2101      	movs	r1, #1
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	dc01      	bgt.n	800a5ee <_printf_float+0x1da>
 800a5ea:	1849      	adds	r1, r1, r1
 800a5ec:	1ac9      	subs	r1, r1, r3
 800a5ee:	1852      	adds	r2, r2, r1
 800a5f0:	e7eb      	b.n	800a5ca <_printf_float+0x1b6>
 800a5f2:	6822      	ldr	r2, [r4, #0]
 800a5f4:	0553      	lsls	r3, r2, #21
 800a5f6:	d408      	bmi.n	800a60a <_printf_float+0x1f6>
 800a5f8:	6923      	ldr	r3, [r4, #16]
 800a5fa:	002a      	movs	r2, r5
 800a5fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a5fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a600:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a602:	47a8      	blx	r5
 800a604:	1c43      	adds	r3, r0, #1
 800a606:	d129      	bne.n	800a65c <_printf_float+0x248>
 800a608:	e75f      	b.n	800a4ca <_printf_float+0xb6>
 800a60a:	2f65      	cmp	r7, #101	; 0x65
 800a60c:	d800      	bhi.n	800a610 <_printf_float+0x1fc>
 800a60e:	e0e0      	b.n	800a7d2 <_printf_float+0x3be>
 800a610:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a612:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a614:	2200      	movs	r2, #0
 800a616:	2300      	movs	r3, #0
 800a618:	f7f5 ff12 	bl	8000440 <__aeabi_dcmpeq>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	d034      	beq.n	800a68a <_printf_float+0x276>
 800a620:	2301      	movs	r3, #1
 800a622:	4a42      	ldr	r2, [pc, #264]	; (800a72c <_printf_float+0x318>)
 800a624:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a626:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a628:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a62a:	47a8      	blx	r5
 800a62c:	1c43      	adds	r3, r0, #1
 800a62e:	d100      	bne.n	800a632 <_printf_float+0x21e>
 800a630:	e74b      	b.n	800a4ca <_printf_float+0xb6>
 800a632:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a634:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a636:	4293      	cmp	r3, r2
 800a638:	db02      	blt.n	800a640 <_printf_float+0x22c>
 800a63a:	6823      	ldr	r3, [r4, #0]
 800a63c:	07db      	lsls	r3, r3, #31
 800a63e:	d50d      	bpl.n	800a65c <_printf_float+0x248>
 800a640:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a642:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a644:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a646:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a648:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a64a:	47a8      	blx	r5
 800a64c:	2500      	movs	r5, #0
 800a64e:	1c43      	adds	r3, r0, #1
 800a650:	d100      	bne.n	800a654 <_printf_float+0x240>
 800a652:	e73a      	b.n	800a4ca <_printf_float+0xb6>
 800a654:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a656:	3b01      	subs	r3, #1
 800a658:	42ab      	cmp	r3, r5
 800a65a:	dc0a      	bgt.n	800a672 <_printf_float+0x25e>
 800a65c:	6823      	ldr	r3, [r4, #0]
 800a65e:	079b      	lsls	r3, r3, #30
 800a660:	d500      	bpl.n	800a664 <_printf_float+0x250>
 800a662:	e108      	b.n	800a876 <_printf_float+0x462>
 800a664:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a666:	68e0      	ldr	r0, [r4, #12]
 800a668:	4298      	cmp	r0, r3
 800a66a:	db00      	blt.n	800a66e <_printf_float+0x25a>
 800a66c:	e72f      	b.n	800a4ce <_printf_float+0xba>
 800a66e:	0018      	movs	r0, r3
 800a670:	e72d      	b.n	800a4ce <_printf_float+0xba>
 800a672:	0022      	movs	r2, r4
 800a674:	2301      	movs	r3, #1
 800a676:	321a      	adds	r2, #26
 800a678:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a67a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a67c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a67e:	47b0      	blx	r6
 800a680:	1c43      	adds	r3, r0, #1
 800a682:	d100      	bne.n	800a686 <_printf_float+0x272>
 800a684:	e721      	b.n	800a4ca <_printf_float+0xb6>
 800a686:	3501      	adds	r5, #1
 800a688:	e7e4      	b.n	800a654 <_printf_float+0x240>
 800a68a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	dc2d      	bgt.n	800a6ec <_printf_float+0x2d8>
 800a690:	2301      	movs	r3, #1
 800a692:	4a26      	ldr	r2, [pc, #152]	; (800a72c <_printf_float+0x318>)
 800a694:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a696:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a698:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a69a:	47b0      	blx	r6
 800a69c:	1c43      	adds	r3, r0, #1
 800a69e:	d100      	bne.n	800a6a2 <_printf_float+0x28e>
 800a6a0:	e713      	b.n	800a4ca <_printf_float+0xb6>
 800a6a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d105      	bne.n	800a6b4 <_printf_float+0x2a0>
 800a6a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d102      	bne.n	800a6b4 <_printf_float+0x2a0>
 800a6ae:	6823      	ldr	r3, [r4, #0]
 800a6b0:	07db      	lsls	r3, r3, #31
 800a6b2:	d5d3      	bpl.n	800a65c <_printf_float+0x248>
 800a6b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a6b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a6bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6be:	47b0      	blx	r6
 800a6c0:	2600      	movs	r6, #0
 800a6c2:	1c43      	adds	r3, r0, #1
 800a6c4:	d100      	bne.n	800a6c8 <_printf_float+0x2b4>
 800a6c6:	e700      	b.n	800a4ca <_printf_float+0xb6>
 800a6c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6ca:	425b      	negs	r3, r3
 800a6cc:	42b3      	cmp	r3, r6
 800a6ce:	dc01      	bgt.n	800a6d4 <_printf_float+0x2c0>
 800a6d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a6d2:	e792      	b.n	800a5fa <_printf_float+0x1e6>
 800a6d4:	0022      	movs	r2, r4
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	321a      	adds	r2, #26
 800a6da:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a6dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6de:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800a6e0:	47b8      	blx	r7
 800a6e2:	1c43      	adds	r3, r0, #1
 800a6e4:	d100      	bne.n	800a6e8 <_printf_float+0x2d4>
 800a6e6:	e6f0      	b.n	800a4ca <_printf_float+0xb6>
 800a6e8:	3601      	adds	r6, #1
 800a6ea:	e7ed      	b.n	800a6c8 <_printf_float+0x2b4>
 800a6ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a6ee:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800a6f0:	429f      	cmp	r7, r3
 800a6f2:	dd00      	ble.n	800a6f6 <_printf_float+0x2e2>
 800a6f4:	001f      	movs	r7, r3
 800a6f6:	2f00      	cmp	r7, #0
 800a6f8:	dd08      	ble.n	800a70c <_printf_float+0x2f8>
 800a6fa:	003b      	movs	r3, r7
 800a6fc:	002a      	movs	r2, r5
 800a6fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a700:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a702:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a704:	47b0      	blx	r6
 800a706:	1c43      	adds	r3, r0, #1
 800a708:	d100      	bne.n	800a70c <_printf_float+0x2f8>
 800a70a:	e6de      	b.n	800a4ca <_printf_float+0xb6>
 800a70c:	2300      	movs	r3, #0
 800a70e:	930d      	str	r3, [sp, #52]	; 0x34
 800a710:	43fb      	mvns	r3, r7
 800a712:	17db      	asrs	r3, r3, #31
 800a714:	930f      	str	r3, [sp, #60]	; 0x3c
 800a716:	e018      	b.n	800a74a <_printf_float+0x336>
 800a718:	7fefffff 	.word	0x7fefffff
 800a71c:	0800ef4c 	.word	0x0800ef4c
 800a720:	0800ef48 	.word	0x0800ef48
 800a724:	0800ef54 	.word	0x0800ef54
 800a728:	0800ef50 	.word	0x0800ef50
 800a72c:	0800ef58 	.word	0x0800ef58
 800a730:	0022      	movs	r2, r4
 800a732:	2301      	movs	r3, #1
 800a734:	321a      	adds	r2, #26
 800a736:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a738:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a73a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a73c:	47b0      	blx	r6
 800a73e:	1c43      	adds	r3, r0, #1
 800a740:	d100      	bne.n	800a744 <_printf_float+0x330>
 800a742:	e6c2      	b.n	800a4ca <_printf_float+0xb6>
 800a744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a746:	3301      	adds	r3, #1
 800a748:	930d      	str	r3, [sp, #52]	; 0x34
 800a74a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a74c:	6da6      	ldr	r6, [r4, #88]	; 0x58
 800a74e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a750:	403b      	ands	r3, r7
 800a752:	1af3      	subs	r3, r6, r3
 800a754:	4293      	cmp	r3, r2
 800a756:	dceb      	bgt.n	800a730 <_printf_float+0x31c>
 800a758:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a75a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a75c:	19ad      	adds	r5, r5, r6
 800a75e:	4293      	cmp	r3, r2
 800a760:	db10      	blt.n	800a784 <_printf_float+0x370>
 800a762:	6823      	ldr	r3, [r4, #0]
 800a764:	07db      	lsls	r3, r3, #31
 800a766:	d40d      	bmi.n	800a784 <_printf_float+0x370>
 800a768:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800a76a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a76c:	1bbe      	subs	r6, r7, r6
 800a76e:	1aff      	subs	r7, r7, r3
 800a770:	42b7      	cmp	r7, r6
 800a772:	dd00      	ble.n	800a776 <_printf_float+0x362>
 800a774:	0037      	movs	r7, r6
 800a776:	2f00      	cmp	r7, #0
 800a778:	dc0d      	bgt.n	800a796 <_printf_float+0x382>
 800a77a:	43fe      	mvns	r6, r7
 800a77c:	17f3      	asrs	r3, r6, #31
 800a77e:	2500      	movs	r5, #0
 800a780:	930c      	str	r3, [sp, #48]	; 0x30
 800a782:	e01c      	b.n	800a7be <_printf_float+0x3aa>
 800a784:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a786:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a788:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a78a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a78c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800a78e:	47b8      	blx	r7
 800a790:	1c43      	adds	r3, r0, #1
 800a792:	d1e9      	bne.n	800a768 <_printf_float+0x354>
 800a794:	e699      	b.n	800a4ca <_printf_float+0xb6>
 800a796:	003b      	movs	r3, r7
 800a798:	002a      	movs	r2, r5
 800a79a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a79c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a79e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a7a0:	47a8      	blx	r5
 800a7a2:	1c43      	adds	r3, r0, #1
 800a7a4:	d1e9      	bne.n	800a77a <_printf_float+0x366>
 800a7a6:	e690      	b.n	800a4ca <_printf_float+0xb6>
 800a7a8:	0022      	movs	r2, r4
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	321a      	adds	r2, #26
 800a7ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a7b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7b2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a7b4:	47b0      	blx	r6
 800a7b6:	1c43      	adds	r3, r0, #1
 800a7b8:	d100      	bne.n	800a7bc <_printf_float+0x3a8>
 800a7ba:	e686      	b.n	800a4ca <_printf_float+0xb6>
 800a7bc:	3501      	adds	r5, #1
 800a7be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a7c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a7c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a7c4:	1a9b      	subs	r3, r3, r2
 800a7c6:	003a      	movs	r2, r7
 800a7c8:	400a      	ands	r2, r1
 800a7ca:	1a9b      	subs	r3, r3, r2
 800a7cc:	42ab      	cmp	r3, r5
 800a7ce:	dceb      	bgt.n	800a7a8 <_printf_float+0x394>
 800a7d0:	e744      	b.n	800a65c <_printf_float+0x248>
 800a7d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	dc02      	bgt.n	800a7de <_printf_float+0x3ca>
 800a7d8:	2301      	movs	r3, #1
 800a7da:	421a      	tst	r2, r3
 800a7dc:	d032      	beq.n	800a844 <_printf_float+0x430>
 800a7de:	2301      	movs	r3, #1
 800a7e0:	002a      	movs	r2, r5
 800a7e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a7e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7e6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800a7e8:	47b8      	blx	r7
 800a7ea:	1c43      	adds	r3, r0, #1
 800a7ec:	d100      	bne.n	800a7f0 <_printf_float+0x3dc>
 800a7ee:	e66c      	b.n	800a4ca <_printf_float+0xb6>
 800a7f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a7f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7f8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800a7fa:	3501      	adds	r5, #1
 800a7fc:	47b8      	blx	r7
 800a7fe:	1c43      	adds	r3, r0, #1
 800a800:	d100      	bne.n	800a804 <_printf_float+0x3f0>
 800a802:	e662      	b.n	800a4ca <_printf_float+0xb6>
 800a804:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a806:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a808:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a80a:	2200      	movs	r2, #0
 800a80c:	1e5f      	subs	r7, r3, #1
 800a80e:	2300      	movs	r3, #0
 800a810:	f7f5 fe16 	bl	8000440 <__aeabi_dcmpeq>
 800a814:	003b      	movs	r3, r7
 800a816:	2800      	cmp	r0, #0
 800a818:	d014      	beq.n	800a844 <_printf_float+0x430>
 800a81a:	2500      	movs	r5, #0
 800a81c:	e00a      	b.n	800a834 <_printf_float+0x420>
 800a81e:	0022      	movs	r2, r4
 800a820:	2301      	movs	r3, #1
 800a822:	321a      	adds	r2, #26
 800a824:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a826:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a828:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800a82a:	47b8      	blx	r7
 800a82c:	1c43      	adds	r3, r0, #1
 800a82e:	d100      	bne.n	800a832 <_printf_float+0x41e>
 800a830:	e64b      	b.n	800a4ca <_printf_float+0xb6>
 800a832:	3501      	adds	r5, #1
 800a834:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a836:	3b01      	subs	r3, #1
 800a838:	42ab      	cmp	r3, r5
 800a83a:	dcf0      	bgt.n	800a81e <_printf_float+0x40a>
 800a83c:	0022      	movs	r2, r4
 800a83e:	0033      	movs	r3, r6
 800a840:	3250      	adds	r2, #80	; 0x50
 800a842:	e6db      	b.n	800a5fc <_printf_float+0x1e8>
 800a844:	002a      	movs	r2, r5
 800a846:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a848:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a84a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a84c:	47a8      	blx	r5
 800a84e:	1c43      	adds	r3, r0, #1
 800a850:	d1f4      	bne.n	800a83c <_printf_float+0x428>
 800a852:	e63a      	b.n	800a4ca <_printf_float+0xb6>
 800a854:	0022      	movs	r2, r4
 800a856:	2301      	movs	r3, #1
 800a858:	3219      	adds	r2, #25
 800a85a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a85c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a85e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a860:	47b0      	blx	r6
 800a862:	1c43      	adds	r3, r0, #1
 800a864:	d100      	bne.n	800a868 <_printf_float+0x454>
 800a866:	e630      	b.n	800a4ca <_printf_float+0xb6>
 800a868:	3501      	adds	r5, #1
 800a86a:	68e3      	ldr	r3, [r4, #12]
 800a86c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a86e:	1a9b      	subs	r3, r3, r2
 800a870:	42ab      	cmp	r3, r5
 800a872:	dcef      	bgt.n	800a854 <_printf_float+0x440>
 800a874:	e6f6      	b.n	800a664 <_printf_float+0x250>
 800a876:	2500      	movs	r5, #0
 800a878:	e7f7      	b.n	800a86a <_printf_float+0x456>
 800a87a:	2a00      	cmp	r2, #0
 800a87c:	d100      	bne.n	800a880 <_printf_float+0x46c>
 800a87e:	e689      	b.n	800a594 <_printf_float+0x180>
 800a880:	2100      	movs	r1, #0
 800a882:	9106      	str	r1, [sp, #24]
 800a884:	a912      	add	r1, sp, #72	; 0x48
 800a886:	9105      	str	r1, [sp, #20]
 800a888:	a911      	add	r1, sp, #68	; 0x44
 800a88a:	9103      	str	r1, [sp, #12]
 800a88c:	2123      	movs	r1, #35	; 0x23
 800a88e:	a808      	add	r0, sp, #32
 800a890:	1809      	adds	r1, r1, r0
 800a892:	6023      	str	r3, [r4, #0]
 800a894:	9301      	str	r3, [sp, #4]
 800a896:	9200      	str	r2, [sp, #0]
 800a898:	002b      	movs	r3, r5
 800a89a:	9704      	str	r7, [sp, #16]
 800a89c:	9102      	str	r1, [sp, #8]
 800a89e:	0032      	movs	r2, r6
 800a8a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8a2:	f7ff fd1b 	bl	800a2dc <__cvt>
 800a8a6:	0005      	movs	r5, r0
 800a8a8:	e645      	b.n	800a536 <_printf_float+0x122>
 800a8aa:	46c0      	nop			; (mov r8, r8)

0800a8ac <_printf_common>:
 800a8ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8ae:	0015      	movs	r5, r2
 800a8b0:	9301      	str	r3, [sp, #4]
 800a8b2:	688a      	ldr	r2, [r1, #8]
 800a8b4:	690b      	ldr	r3, [r1, #16]
 800a8b6:	9000      	str	r0, [sp, #0]
 800a8b8:	000c      	movs	r4, r1
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	da00      	bge.n	800a8c0 <_printf_common+0x14>
 800a8be:	0013      	movs	r3, r2
 800a8c0:	0022      	movs	r2, r4
 800a8c2:	602b      	str	r3, [r5, #0]
 800a8c4:	3243      	adds	r2, #67	; 0x43
 800a8c6:	7812      	ldrb	r2, [r2, #0]
 800a8c8:	2a00      	cmp	r2, #0
 800a8ca:	d001      	beq.n	800a8d0 <_printf_common+0x24>
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	602b      	str	r3, [r5, #0]
 800a8d0:	6823      	ldr	r3, [r4, #0]
 800a8d2:	069b      	lsls	r3, r3, #26
 800a8d4:	d502      	bpl.n	800a8dc <_printf_common+0x30>
 800a8d6:	682b      	ldr	r3, [r5, #0]
 800a8d8:	3302      	adds	r3, #2
 800a8da:	602b      	str	r3, [r5, #0]
 800a8dc:	2706      	movs	r7, #6
 800a8de:	6823      	ldr	r3, [r4, #0]
 800a8e0:	401f      	ands	r7, r3
 800a8e2:	d027      	beq.n	800a934 <_printf_common+0x88>
 800a8e4:	0023      	movs	r3, r4
 800a8e6:	3343      	adds	r3, #67	; 0x43
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	1e5a      	subs	r2, r3, #1
 800a8ec:	4193      	sbcs	r3, r2
 800a8ee:	6822      	ldr	r2, [r4, #0]
 800a8f0:	0692      	lsls	r2, r2, #26
 800a8f2:	d430      	bmi.n	800a956 <_printf_common+0xaa>
 800a8f4:	0022      	movs	r2, r4
 800a8f6:	9901      	ldr	r1, [sp, #4]
 800a8f8:	3243      	adds	r2, #67	; 0x43
 800a8fa:	9800      	ldr	r0, [sp, #0]
 800a8fc:	9e08      	ldr	r6, [sp, #32]
 800a8fe:	47b0      	blx	r6
 800a900:	1c43      	adds	r3, r0, #1
 800a902:	d025      	beq.n	800a950 <_printf_common+0xa4>
 800a904:	2306      	movs	r3, #6
 800a906:	6820      	ldr	r0, [r4, #0]
 800a908:	682a      	ldr	r2, [r5, #0]
 800a90a:	68e1      	ldr	r1, [r4, #12]
 800a90c:	4003      	ands	r3, r0
 800a90e:	2500      	movs	r5, #0
 800a910:	2b04      	cmp	r3, #4
 800a912:	d103      	bne.n	800a91c <_printf_common+0x70>
 800a914:	1a8d      	subs	r5, r1, r2
 800a916:	43eb      	mvns	r3, r5
 800a918:	17db      	asrs	r3, r3, #31
 800a91a:	401d      	ands	r5, r3
 800a91c:	68a3      	ldr	r3, [r4, #8]
 800a91e:	6922      	ldr	r2, [r4, #16]
 800a920:	4293      	cmp	r3, r2
 800a922:	dd01      	ble.n	800a928 <_printf_common+0x7c>
 800a924:	1a9b      	subs	r3, r3, r2
 800a926:	18ed      	adds	r5, r5, r3
 800a928:	2700      	movs	r7, #0
 800a92a:	42bd      	cmp	r5, r7
 800a92c:	d120      	bne.n	800a970 <_printf_common+0xc4>
 800a92e:	2000      	movs	r0, #0
 800a930:	e010      	b.n	800a954 <_printf_common+0xa8>
 800a932:	3701      	adds	r7, #1
 800a934:	68e3      	ldr	r3, [r4, #12]
 800a936:	682a      	ldr	r2, [r5, #0]
 800a938:	1a9b      	subs	r3, r3, r2
 800a93a:	42bb      	cmp	r3, r7
 800a93c:	ddd2      	ble.n	800a8e4 <_printf_common+0x38>
 800a93e:	0022      	movs	r2, r4
 800a940:	2301      	movs	r3, #1
 800a942:	3219      	adds	r2, #25
 800a944:	9901      	ldr	r1, [sp, #4]
 800a946:	9800      	ldr	r0, [sp, #0]
 800a948:	9e08      	ldr	r6, [sp, #32]
 800a94a:	47b0      	blx	r6
 800a94c:	1c43      	adds	r3, r0, #1
 800a94e:	d1f0      	bne.n	800a932 <_printf_common+0x86>
 800a950:	2001      	movs	r0, #1
 800a952:	4240      	negs	r0, r0
 800a954:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a956:	2030      	movs	r0, #48	; 0x30
 800a958:	18e1      	adds	r1, r4, r3
 800a95a:	3143      	adds	r1, #67	; 0x43
 800a95c:	7008      	strb	r0, [r1, #0]
 800a95e:	0021      	movs	r1, r4
 800a960:	1c5a      	adds	r2, r3, #1
 800a962:	3145      	adds	r1, #69	; 0x45
 800a964:	7809      	ldrb	r1, [r1, #0]
 800a966:	18a2      	adds	r2, r4, r2
 800a968:	3243      	adds	r2, #67	; 0x43
 800a96a:	3302      	adds	r3, #2
 800a96c:	7011      	strb	r1, [r2, #0]
 800a96e:	e7c1      	b.n	800a8f4 <_printf_common+0x48>
 800a970:	0022      	movs	r2, r4
 800a972:	2301      	movs	r3, #1
 800a974:	321a      	adds	r2, #26
 800a976:	9901      	ldr	r1, [sp, #4]
 800a978:	9800      	ldr	r0, [sp, #0]
 800a97a:	9e08      	ldr	r6, [sp, #32]
 800a97c:	47b0      	blx	r6
 800a97e:	1c43      	adds	r3, r0, #1
 800a980:	d0e6      	beq.n	800a950 <_printf_common+0xa4>
 800a982:	3701      	adds	r7, #1
 800a984:	e7d1      	b.n	800a92a <_printf_common+0x7e>
	...

0800a988 <_printf_i>:
 800a988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a98a:	b089      	sub	sp, #36	; 0x24
 800a98c:	9204      	str	r2, [sp, #16]
 800a98e:	000a      	movs	r2, r1
 800a990:	3243      	adds	r2, #67	; 0x43
 800a992:	9305      	str	r3, [sp, #20]
 800a994:	9003      	str	r0, [sp, #12]
 800a996:	9202      	str	r2, [sp, #8]
 800a998:	7e0a      	ldrb	r2, [r1, #24]
 800a99a:	000c      	movs	r4, r1
 800a99c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a99e:	2a6e      	cmp	r2, #110	; 0x6e
 800a9a0:	d100      	bne.n	800a9a4 <_printf_i+0x1c>
 800a9a2:	e086      	b.n	800aab2 <_printf_i+0x12a>
 800a9a4:	d81f      	bhi.n	800a9e6 <_printf_i+0x5e>
 800a9a6:	2a63      	cmp	r2, #99	; 0x63
 800a9a8:	d033      	beq.n	800aa12 <_printf_i+0x8a>
 800a9aa:	d808      	bhi.n	800a9be <_printf_i+0x36>
 800a9ac:	2a00      	cmp	r2, #0
 800a9ae:	d100      	bne.n	800a9b2 <_printf_i+0x2a>
 800a9b0:	e08c      	b.n	800aacc <_printf_i+0x144>
 800a9b2:	2a58      	cmp	r2, #88	; 0x58
 800a9b4:	d04d      	beq.n	800aa52 <_printf_i+0xca>
 800a9b6:	0025      	movs	r5, r4
 800a9b8:	3542      	adds	r5, #66	; 0x42
 800a9ba:	702a      	strb	r2, [r5, #0]
 800a9bc:	e030      	b.n	800aa20 <_printf_i+0x98>
 800a9be:	2a64      	cmp	r2, #100	; 0x64
 800a9c0:	d001      	beq.n	800a9c6 <_printf_i+0x3e>
 800a9c2:	2a69      	cmp	r2, #105	; 0x69
 800a9c4:	d1f7      	bne.n	800a9b6 <_printf_i+0x2e>
 800a9c6:	6819      	ldr	r1, [r3, #0]
 800a9c8:	6825      	ldr	r5, [r4, #0]
 800a9ca:	1d0a      	adds	r2, r1, #4
 800a9cc:	0628      	lsls	r0, r5, #24
 800a9ce:	d529      	bpl.n	800aa24 <_printf_i+0x9c>
 800a9d0:	6808      	ldr	r0, [r1, #0]
 800a9d2:	601a      	str	r2, [r3, #0]
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	da03      	bge.n	800a9e0 <_printf_i+0x58>
 800a9d8:	232d      	movs	r3, #45	; 0x2d
 800a9da:	9a02      	ldr	r2, [sp, #8]
 800a9dc:	4240      	negs	r0, r0
 800a9de:	7013      	strb	r3, [r2, #0]
 800a9e0:	4e6b      	ldr	r6, [pc, #428]	; (800ab90 <_printf_i+0x208>)
 800a9e2:	270a      	movs	r7, #10
 800a9e4:	e04f      	b.n	800aa86 <_printf_i+0xfe>
 800a9e6:	2a73      	cmp	r2, #115	; 0x73
 800a9e8:	d074      	beq.n	800aad4 <_printf_i+0x14c>
 800a9ea:	d808      	bhi.n	800a9fe <_printf_i+0x76>
 800a9ec:	2a6f      	cmp	r2, #111	; 0x6f
 800a9ee:	d01f      	beq.n	800aa30 <_printf_i+0xa8>
 800a9f0:	2a70      	cmp	r2, #112	; 0x70
 800a9f2:	d1e0      	bne.n	800a9b6 <_printf_i+0x2e>
 800a9f4:	2220      	movs	r2, #32
 800a9f6:	6809      	ldr	r1, [r1, #0]
 800a9f8:	430a      	orrs	r2, r1
 800a9fa:	6022      	str	r2, [r4, #0]
 800a9fc:	e003      	b.n	800aa06 <_printf_i+0x7e>
 800a9fe:	2a75      	cmp	r2, #117	; 0x75
 800aa00:	d016      	beq.n	800aa30 <_printf_i+0xa8>
 800aa02:	2a78      	cmp	r2, #120	; 0x78
 800aa04:	d1d7      	bne.n	800a9b6 <_printf_i+0x2e>
 800aa06:	0022      	movs	r2, r4
 800aa08:	2178      	movs	r1, #120	; 0x78
 800aa0a:	3245      	adds	r2, #69	; 0x45
 800aa0c:	7011      	strb	r1, [r2, #0]
 800aa0e:	4e61      	ldr	r6, [pc, #388]	; (800ab94 <_printf_i+0x20c>)
 800aa10:	e022      	b.n	800aa58 <_printf_i+0xd0>
 800aa12:	0025      	movs	r5, r4
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	3542      	adds	r5, #66	; 0x42
 800aa18:	1d11      	adds	r1, r2, #4
 800aa1a:	6019      	str	r1, [r3, #0]
 800aa1c:	6813      	ldr	r3, [r2, #0]
 800aa1e:	702b      	strb	r3, [r5, #0]
 800aa20:	2301      	movs	r3, #1
 800aa22:	e065      	b.n	800aaf0 <_printf_i+0x168>
 800aa24:	6808      	ldr	r0, [r1, #0]
 800aa26:	601a      	str	r2, [r3, #0]
 800aa28:	0669      	lsls	r1, r5, #25
 800aa2a:	d5d3      	bpl.n	800a9d4 <_printf_i+0x4c>
 800aa2c:	b200      	sxth	r0, r0
 800aa2e:	e7d1      	b.n	800a9d4 <_printf_i+0x4c>
 800aa30:	6819      	ldr	r1, [r3, #0]
 800aa32:	6825      	ldr	r5, [r4, #0]
 800aa34:	1d08      	adds	r0, r1, #4
 800aa36:	6018      	str	r0, [r3, #0]
 800aa38:	6808      	ldr	r0, [r1, #0]
 800aa3a:	062e      	lsls	r6, r5, #24
 800aa3c:	d505      	bpl.n	800aa4a <_printf_i+0xc2>
 800aa3e:	4e54      	ldr	r6, [pc, #336]	; (800ab90 <_printf_i+0x208>)
 800aa40:	2708      	movs	r7, #8
 800aa42:	2a6f      	cmp	r2, #111	; 0x6f
 800aa44:	d01b      	beq.n	800aa7e <_printf_i+0xf6>
 800aa46:	270a      	movs	r7, #10
 800aa48:	e019      	b.n	800aa7e <_printf_i+0xf6>
 800aa4a:	066d      	lsls	r5, r5, #25
 800aa4c:	d5f7      	bpl.n	800aa3e <_printf_i+0xb6>
 800aa4e:	b280      	uxth	r0, r0
 800aa50:	e7f5      	b.n	800aa3e <_printf_i+0xb6>
 800aa52:	3145      	adds	r1, #69	; 0x45
 800aa54:	4e4e      	ldr	r6, [pc, #312]	; (800ab90 <_printf_i+0x208>)
 800aa56:	700a      	strb	r2, [r1, #0]
 800aa58:	6818      	ldr	r0, [r3, #0]
 800aa5a:	6822      	ldr	r2, [r4, #0]
 800aa5c:	1d01      	adds	r1, r0, #4
 800aa5e:	6800      	ldr	r0, [r0, #0]
 800aa60:	6019      	str	r1, [r3, #0]
 800aa62:	0615      	lsls	r5, r2, #24
 800aa64:	d521      	bpl.n	800aaaa <_printf_i+0x122>
 800aa66:	07d3      	lsls	r3, r2, #31
 800aa68:	d502      	bpl.n	800aa70 <_printf_i+0xe8>
 800aa6a:	2320      	movs	r3, #32
 800aa6c:	431a      	orrs	r2, r3
 800aa6e:	6022      	str	r2, [r4, #0]
 800aa70:	2710      	movs	r7, #16
 800aa72:	2800      	cmp	r0, #0
 800aa74:	d103      	bne.n	800aa7e <_printf_i+0xf6>
 800aa76:	2320      	movs	r3, #32
 800aa78:	6822      	ldr	r2, [r4, #0]
 800aa7a:	439a      	bics	r2, r3
 800aa7c:	6022      	str	r2, [r4, #0]
 800aa7e:	0023      	movs	r3, r4
 800aa80:	2200      	movs	r2, #0
 800aa82:	3343      	adds	r3, #67	; 0x43
 800aa84:	701a      	strb	r2, [r3, #0]
 800aa86:	6863      	ldr	r3, [r4, #4]
 800aa88:	60a3      	str	r3, [r4, #8]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	db58      	blt.n	800ab40 <_printf_i+0x1b8>
 800aa8e:	2204      	movs	r2, #4
 800aa90:	6821      	ldr	r1, [r4, #0]
 800aa92:	4391      	bics	r1, r2
 800aa94:	6021      	str	r1, [r4, #0]
 800aa96:	2800      	cmp	r0, #0
 800aa98:	d154      	bne.n	800ab44 <_printf_i+0x1bc>
 800aa9a:	9d02      	ldr	r5, [sp, #8]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d05a      	beq.n	800ab56 <_printf_i+0x1ce>
 800aaa0:	0025      	movs	r5, r4
 800aaa2:	7833      	ldrb	r3, [r6, #0]
 800aaa4:	3542      	adds	r5, #66	; 0x42
 800aaa6:	702b      	strb	r3, [r5, #0]
 800aaa8:	e055      	b.n	800ab56 <_printf_i+0x1ce>
 800aaaa:	0655      	lsls	r5, r2, #25
 800aaac:	d5db      	bpl.n	800aa66 <_printf_i+0xde>
 800aaae:	b280      	uxth	r0, r0
 800aab0:	e7d9      	b.n	800aa66 <_printf_i+0xde>
 800aab2:	681a      	ldr	r2, [r3, #0]
 800aab4:	680d      	ldr	r5, [r1, #0]
 800aab6:	1d10      	adds	r0, r2, #4
 800aab8:	6949      	ldr	r1, [r1, #20]
 800aaba:	6018      	str	r0, [r3, #0]
 800aabc:	6813      	ldr	r3, [r2, #0]
 800aabe:	062e      	lsls	r6, r5, #24
 800aac0:	d501      	bpl.n	800aac6 <_printf_i+0x13e>
 800aac2:	6019      	str	r1, [r3, #0]
 800aac4:	e002      	b.n	800aacc <_printf_i+0x144>
 800aac6:	066d      	lsls	r5, r5, #25
 800aac8:	d5fb      	bpl.n	800aac2 <_printf_i+0x13a>
 800aaca:	8019      	strh	r1, [r3, #0]
 800aacc:	2300      	movs	r3, #0
 800aace:	9d02      	ldr	r5, [sp, #8]
 800aad0:	6123      	str	r3, [r4, #16]
 800aad2:	e04f      	b.n	800ab74 <_printf_i+0x1ec>
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	1d11      	adds	r1, r2, #4
 800aad8:	6019      	str	r1, [r3, #0]
 800aada:	6815      	ldr	r5, [r2, #0]
 800aadc:	2100      	movs	r1, #0
 800aade:	6862      	ldr	r2, [r4, #4]
 800aae0:	0028      	movs	r0, r5
 800aae2:	f002 fe67 	bl	800d7b4 <memchr>
 800aae6:	2800      	cmp	r0, #0
 800aae8:	d001      	beq.n	800aaee <_printf_i+0x166>
 800aaea:	1b40      	subs	r0, r0, r5
 800aaec:	6060      	str	r0, [r4, #4]
 800aaee:	6863      	ldr	r3, [r4, #4]
 800aaf0:	6123      	str	r3, [r4, #16]
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	9a02      	ldr	r2, [sp, #8]
 800aaf6:	7013      	strb	r3, [r2, #0]
 800aaf8:	e03c      	b.n	800ab74 <_printf_i+0x1ec>
 800aafa:	6923      	ldr	r3, [r4, #16]
 800aafc:	002a      	movs	r2, r5
 800aafe:	9904      	ldr	r1, [sp, #16]
 800ab00:	9803      	ldr	r0, [sp, #12]
 800ab02:	9d05      	ldr	r5, [sp, #20]
 800ab04:	47a8      	blx	r5
 800ab06:	1c43      	adds	r3, r0, #1
 800ab08:	d03e      	beq.n	800ab88 <_printf_i+0x200>
 800ab0a:	6823      	ldr	r3, [r4, #0]
 800ab0c:	079b      	lsls	r3, r3, #30
 800ab0e:	d415      	bmi.n	800ab3c <_printf_i+0x1b4>
 800ab10:	9b07      	ldr	r3, [sp, #28]
 800ab12:	68e0      	ldr	r0, [r4, #12]
 800ab14:	4298      	cmp	r0, r3
 800ab16:	da39      	bge.n	800ab8c <_printf_i+0x204>
 800ab18:	0018      	movs	r0, r3
 800ab1a:	e037      	b.n	800ab8c <_printf_i+0x204>
 800ab1c:	0022      	movs	r2, r4
 800ab1e:	2301      	movs	r3, #1
 800ab20:	3219      	adds	r2, #25
 800ab22:	9904      	ldr	r1, [sp, #16]
 800ab24:	9803      	ldr	r0, [sp, #12]
 800ab26:	9e05      	ldr	r6, [sp, #20]
 800ab28:	47b0      	blx	r6
 800ab2a:	1c43      	adds	r3, r0, #1
 800ab2c:	d02c      	beq.n	800ab88 <_printf_i+0x200>
 800ab2e:	3501      	adds	r5, #1
 800ab30:	68e3      	ldr	r3, [r4, #12]
 800ab32:	9a07      	ldr	r2, [sp, #28]
 800ab34:	1a9b      	subs	r3, r3, r2
 800ab36:	42ab      	cmp	r3, r5
 800ab38:	dcf0      	bgt.n	800ab1c <_printf_i+0x194>
 800ab3a:	e7e9      	b.n	800ab10 <_printf_i+0x188>
 800ab3c:	2500      	movs	r5, #0
 800ab3e:	e7f7      	b.n	800ab30 <_printf_i+0x1a8>
 800ab40:	2800      	cmp	r0, #0
 800ab42:	d0ad      	beq.n	800aaa0 <_printf_i+0x118>
 800ab44:	9d02      	ldr	r5, [sp, #8]
 800ab46:	0039      	movs	r1, r7
 800ab48:	f7f5 fb7a 	bl	8000240 <__aeabi_uidivmod>
 800ab4c:	5c73      	ldrb	r3, [r6, r1]
 800ab4e:	3d01      	subs	r5, #1
 800ab50:	702b      	strb	r3, [r5, #0]
 800ab52:	2800      	cmp	r0, #0
 800ab54:	d1f7      	bne.n	800ab46 <_printf_i+0x1be>
 800ab56:	2f08      	cmp	r7, #8
 800ab58:	d109      	bne.n	800ab6e <_printf_i+0x1e6>
 800ab5a:	6823      	ldr	r3, [r4, #0]
 800ab5c:	07db      	lsls	r3, r3, #31
 800ab5e:	d506      	bpl.n	800ab6e <_printf_i+0x1e6>
 800ab60:	6863      	ldr	r3, [r4, #4]
 800ab62:	6922      	ldr	r2, [r4, #16]
 800ab64:	4293      	cmp	r3, r2
 800ab66:	dc02      	bgt.n	800ab6e <_printf_i+0x1e6>
 800ab68:	2330      	movs	r3, #48	; 0x30
 800ab6a:	3d01      	subs	r5, #1
 800ab6c:	702b      	strb	r3, [r5, #0]
 800ab6e:	9b02      	ldr	r3, [sp, #8]
 800ab70:	1b5b      	subs	r3, r3, r5
 800ab72:	6123      	str	r3, [r4, #16]
 800ab74:	9b05      	ldr	r3, [sp, #20]
 800ab76:	aa07      	add	r2, sp, #28
 800ab78:	9300      	str	r3, [sp, #0]
 800ab7a:	0021      	movs	r1, r4
 800ab7c:	9b04      	ldr	r3, [sp, #16]
 800ab7e:	9803      	ldr	r0, [sp, #12]
 800ab80:	f7ff fe94 	bl	800a8ac <_printf_common>
 800ab84:	1c43      	adds	r3, r0, #1
 800ab86:	d1b8      	bne.n	800aafa <_printf_i+0x172>
 800ab88:	2001      	movs	r0, #1
 800ab8a:	4240      	negs	r0, r0
 800ab8c:	b009      	add	sp, #36	; 0x24
 800ab8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab90:	0800ef5a 	.word	0x0800ef5a
 800ab94:	0800ef6b 	.word	0x0800ef6b

0800ab98 <_scanf_float>:
 800ab98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab9a:	b08b      	sub	sp, #44	; 0x2c
 800ab9c:	9002      	str	r0, [sp, #8]
 800ab9e:	9200      	str	r2, [sp, #0]
 800aba0:	2000      	movs	r0, #0
 800aba2:	22ae      	movs	r2, #174	; 0xae
 800aba4:	9305      	str	r3, [sp, #20]
 800aba6:	688b      	ldr	r3, [r1, #8]
 800aba8:	000e      	movs	r6, r1
 800abaa:	1e59      	subs	r1, r3, #1
 800abac:	0052      	lsls	r2, r2, #1
 800abae:	9004      	str	r0, [sp, #16]
 800abb0:	4291      	cmp	r1, r2
 800abb2:	d905      	bls.n	800abc0 <_scanf_float+0x28>
 800abb4:	3b5e      	subs	r3, #94	; 0x5e
 800abb6:	3bff      	subs	r3, #255	; 0xff
 800abb8:	9304      	str	r3, [sp, #16]
 800abba:	235e      	movs	r3, #94	; 0x5e
 800abbc:	33ff      	adds	r3, #255	; 0xff
 800abbe:	60b3      	str	r3, [r6, #8]
 800abc0:	23f0      	movs	r3, #240	; 0xf0
 800abc2:	6832      	ldr	r2, [r6, #0]
 800abc4:	00db      	lsls	r3, r3, #3
 800abc6:	4313      	orrs	r3, r2
 800abc8:	6033      	str	r3, [r6, #0]
 800abca:	0033      	movs	r3, r6
 800abcc:	2700      	movs	r7, #0
 800abce:	331c      	adds	r3, #28
 800abd0:	001d      	movs	r5, r3
 800abd2:	003c      	movs	r4, r7
 800abd4:	9303      	str	r3, [sp, #12]
 800abd6:	9708      	str	r7, [sp, #32]
 800abd8:	9707      	str	r7, [sp, #28]
 800abda:	9701      	str	r7, [sp, #4]
 800abdc:	9706      	str	r7, [sp, #24]
 800abde:	68b2      	ldr	r2, [r6, #8]
 800abe0:	2a00      	cmp	r2, #0
 800abe2:	d013      	beq.n	800ac0c <_scanf_float+0x74>
 800abe4:	9b00      	ldr	r3, [sp, #0]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	9309      	str	r3, [sp, #36]	; 0x24
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	2b49      	cmp	r3, #73	; 0x49
 800abee:	d100      	bne.n	800abf2 <_scanf_float+0x5a>
 800abf0:	e07c      	b.n	800acec <_scanf_float+0x154>
 800abf2:	d854      	bhi.n	800ac9e <_scanf_float+0x106>
 800abf4:	2b39      	cmp	r3, #57	; 0x39
 800abf6:	d847      	bhi.n	800ac88 <_scanf_float+0xf0>
 800abf8:	2b31      	cmp	r3, #49	; 0x31
 800abfa:	d300      	bcc.n	800abfe <_scanf_float+0x66>
 800abfc:	e094      	b.n	800ad28 <_scanf_float+0x190>
 800abfe:	2b2d      	cmp	r3, #45	; 0x2d
 800ac00:	d100      	bne.n	800ac04 <_scanf_float+0x6c>
 800ac02:	e09c      	b.n	800ad3e <_scanf_float+0x1a6>
 800ac04:	d817      	bhi.n	800ac36 <_scanf_float+0x9e>
 800ac06:	2b2b      	cmp	r3, #43	; 0x2b
 800ac08:	d100      	bne.n	800ac0c <_scanf_float+0x74>
 800ac0a:	e098      	b.n	800ad3e <_scanf_float+0x1a6>
 800ac0c:	9b01      	ldr	r3, [sp, #4]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d003      	beq.n	800ac1a <_scanf_float+0x82>
 800ac12:	6832      	ldr	r2, [r6, #0]
 800ac14:	4b9b      	ldr	r3, [pc, #620]	; (800ae84 <_scanf_float+0x2ec>)
 800ac16:	4013      	ands	r3, r2
 800ac18:	6033      	str	r3, [r6, #0]
 800ac1a:	3c01      	subs	r4, #1
 800ac1c:	2c01      	cmp	r4, #1
 800ac1e:	d900      	bls.n	800ac22 <_scanf_float+0x8a>
 800ac20:	e0ee      	b.n	800ae00 <_scanf_float+0x268>
 800ac22:	24be      	movs	r4, #190	; 0xbe
 800ac24:	0064      	lsls	r4, r4, #1
 800ac26:	9b03      	ldr	r3, [sp, #12]
 800ac28:	429d      	cmp	r5, r3
 800ac2a:	d900      	bls.n	800ac2e <_scanf_float+0x96>
 800ac2c:	e0de      	b.n	800adec <_scanf_float+0x254>
 800ac2e:	2701      	movs	r7, #1
 800ac30:	0038      	movs	r0, r7
 800ac32:	b00b      	add	sp, #44	; 0x2c
 800ac34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac36:	2b2e      	cmp	r3, #46	; 0x2e
 800ac38:	d100      	bne.n	800ac3c <_scanf_float+0xa4>
 800ac3a:	e0a2      	b.n	800ad82 <_scanf_float+0x1ea>
 800ac3c:	2b30      	cmp	r3, #48	; 0x30
 800ac3e:	d1e5      	bne.n	800ac0c <_scanf_float+0x74>
 800ac40:	6831      	ldr	r1, [r6, #0]
 800ac42:	05c8      	lsls	r0, r1, #23
 800ac44:	d570      	bpl.n	800ad28 <_scanf_float+0x190>
 800ac46:	2380      	movs	r3, #128	; 0x80
 800ac48:	4399      	bics	r1, r3
 800ac4a:	9b01      	ldr	r3, [sp, #4]
 800ac4c:	6031      	str	r1, [r6, #0]
 800ac4e:	3301      	adds	r3, #1
 800ac50:	9301      	str	r3, [sp, #4]
 800ac52:	9b04      	ldr	r3, [sp, #16]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d003      	beq.n	800ac60 <_scanf_float+0xc8>
 800ac58:	3b01      	subs	r3, #1
 800ac5a:	3201      	adds	r2, #1
 800ac5c:	9304      	str	r3, [sp, #16]
 800ac5e:	60b2      	str	r2, [r6, #8]
 800ac60:	68b3      	ldr	r3, [r6, #8]
 800ac62:	9a00      	ldr	r2, [sp, #0]
 800ac64:	3b01      	subs	r3, #1
 800ac66:	60b3      	str	r3, [r6, #8]
 800ac68:	6933      	ldr	r3, [r6, #16]
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	6133      	str	r3, [r6, #16]
 800ac6e:	9b00      	ldr	r3, [sp, #0]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	9309      	str	r3, [sp, #36]	; 0x24
 800ac74:	3b01      	subs	r3, #1
 800ac76:	6053      	str	r3, [r2, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	dc00      	bgt.n	800ac7e <_scanf_float+0xe6>
 800ac7c:	e0ac      	b.n	800add8 <_scanf_float+0x240>
 800ac7e:	6813      	ldr	r3, [r2, #0]
 800ac80:	9309      	str	r3, [sp, #36]	; 0x24
 800ac82:	3301      	adds	r3, #1
 800ac84:	6013      	str	r3, [r2, #0]
 800ac86:	e7aa      	b.n	800abde <_scanf_float+0x46>
 800ac88:	2b45      	cmp	r3, #69	; 0x45
 800ac8a:	d100      	bne.n	800ac8e <_scanf_float+0xf6>
 800ac8c:	e083      	b.n	800ad96 <_scanf_float+0x1fe>
 800ac8e:	2b46      	cmp	r3, #70	; 0x46
 800ac90:	d06d      	beq.n	800ad6e <_scanf_float+0x1d6>
 800ac92:	2b41      	cmp	r3, #65	; 0x41
 800ac94:	d1ba      	bne.n	800ac0c <_scanf_float+0x74>
 800ac96:	2c01      	cmp	r4, #1
 800ac98:	d1b8      	bne.n	800ac0c <_scanf_float+0x74>
 800ac9a:	2402      	movs	r4, #2
 800ac9c:	e04c      	b.n	800ad38 <_scanf_float+0x1a0>
 800ac9e:	2b65      	cmp	r3, #101	; 0x65
 800aca0:	d079      	beq.n	800ad96 <_scanf_float+0x1fe>
 800aca2:	d81b      	bhi.n	800acdc <_scanf_float+0x144>
 800aca4:	2b54      	cmp	r3, #84	; 0x54
 800aca6:	d067      	beq.n	800ad78 <_scanf_float+0x1e0>
 800aca8:	d813      	bhi.n	800acd2 <_scanf_float+0x13a>
 800acaa:	2b4e      	cmp	r3, #78	; 0x4e
 800acac:	d1ae      	bne.n	800ac0c <_scanf_float+0x74>
 800acae:	2c00      	cmp	r4, #0
 800acb0:	d14c      	bne.n	800ad4c <_scanf_float+0x1b4>
 800acb2:	9a01      	ldr	r2, [sp, #4]
 800acb4:	2a00      	cmp	r2, #0
 800acb6:	d14b      	bne.n	800ad50 <_scanf_float+0x1b8>
 800acb8:	21e0      	movs	r1, #224	; 0xe0
 800acba:	20e0      	movs	r0, #224	; 0xe0
 800acbc:	6832      	ldr	r2, [r6, #0]
 800acbe:	00c9      	lsls	r1, r1, #3
 800acc0:	4011      	ands	r1, r2
 800acc2:	00c0      	lsls	r0, r0, #3
 800acc4:	4281      	cmp	r1, r0
 800acc6:	d143      	bne.n	800ad50 <_scanf_float+0x1b8>
 800acc8:	496f      	ldr	r1, [pc, #444]	; (800ae88 <_scanf_float+0x2f0>)
 800acca:	3401      	adds	r4, #1
 800accc:	400a      	ands	r2, r1
 800acce:	6032      	str	r2, [r6, #0]
 800acd0:	e032      	b.n	800ad38 <_scanf_float+0x1a0>
 800acd2:	2b59      	cmp	r3, #89	; 0x59
 800acd4:	d023      	beq.n	800ad1e <_scanf_float+0x186>
 800acd6:	2b61      	cmp	r3, #97	; 0x61
 800acd8:	d0dd      	beq.n	800ac96 <_scanf_float+0xfe>
 800acda:	e797      	b.n	800ac0c <_scanf_float+0x74>
 800acdc:	2b6e      	cmp	r3, #110	; 0x6e
 800acde:	d0e6      	beq.n	800acae <_scanf_float+0x116>
 800ace0:	d818      	bhi.n	800ad14 <_scanf_float+0x17c>
 800ace2:	2b66      	cmp	r3, #102	; 0x66
 800ace4:	d043      	beq.n	800ad6e <_scanf_float+0x1d6>
 800ace6:	2b69      	cmp	r3, #105	; 0x69
 800ace8:	d000      	beq.n	800acec <_scanf_float+0x154>
 800acea:	e78f      	b.n	800ac0c <_scanf_float+0x74>
 800acec:	2f00      	cmp	r7, #0
 800acee:	d137      	bne.n	800ad60 <_scanf_float+0x1c8>
 800acf0:	9a01      	ldr	r2, [sp, #4]
 800acf2:	2a00      	cmp	r2, #0
 800acf4:	d000      	beq.n	800acf8 <_scanf_float+0x160>
 800acf6:	e78c      	b.n	800ac12 <_scanf_float+0x7a>
 800acf8:	21e0      	movs	r1, #224	; 0xe0
 800acfa:	20e0      	movs	r0, #224	; 0xe0
 800acfc:	6832      	ldr	r2, [r6, #0]
 800acfe:	00c9      	lsls	r1, r1, #3
 800ad00:	4011      	ands	r1, r2
 800ad02:	00c0      	lsls	r0, r0, #3
 800ad04:	4281      	cmp	r1, r0
 800ad06:	d000      	beq.n	800ad0a <_scanf_float+0x172>
 800ad08:	e787      	b.n	800ac1a <_scanf_float+0x82>
 800ad0a:	495f      	ldr	r1, [pc, #380]	; (800ae88 <_scanf_float+0x2f0>)
 800ad0c:	3701      	adds	r7, #1
 800ad0e:	400a      	ands	r2, r1
 800ad10:	6032      	str	r2, [r6, #0]
 800ad12:	e011      	b.n	800ad38 <_scanf_float+0x1a0>
 800ad14:	2b74      	cmp	r3, #116	; 0x74
 800ad16:	d02f      	beq.n	800ad78 <_scanf_float+0x1e0>
 800ad18:	2b79      	cmp	r3, #121	; 0x79
 800ad1a:	d000      	beq.n	800ad1e <_scanf_float+0x186>
 800ad1c:	e776      	b.n	800ac0c <_scanf_float+0x74>
 800ad1e:	2f07      	cmp	r7, #7
 800ad20:	d000      	beq.n	800ad24 <_scanf_float+0x18c>
 800ad22:	e773      	b.n	800ac0c <_scanf_float+0x74>
 800ad24:	2708      	movs	r7, #8
 800ad26:	e007      	b.n	800ad38 <_scanf_float+0x1a0>
 800ad28:	19e2      	adds	r2, r4, r7
 800ad2a:	2a00      	cmp	r2, #0
 800ad2c:	d000      	beq.n	800ad30 <_scanf_float+0x198>
 800ad2e:	e76d      	b.n	800ac0c <_scanf_float+0x74>
 800ad30:	4a56      	ldr	r2, [pc, #344]	; (800ae8c <_scanf_float+0x2f4>)
 800ad32:	6831      	ldr	r1, [r6, #0]
 800ad34:	400a      	ands	r2, r1
 800ad36:	6032      	str	r2, [r6, #0]
 800ad38:	702b      	strb	r3, [r5, #0]
 800ad3a:	3501      	adds	r5, #1
 800ad3c:	e790      	b.n	800ac60 <_scanf_float+0xc8>
 800ad3e:	2180      	movs	r1, #128	; 0x80
 800ad40:	6832      	ldr	r2, [r6, #0]
 800ad42:	420a      	tst	r2, r1
 800ad44:	d100      	bne.n	800ad48 <_scanf_float+0x1b0>
 800ad46:	e761      	b.n	800ac0c <_scanf_float+0x74>
 800ad48:	438a      	bics	r2, r1
 800ad4a:	e7f4      	b.n	800ad36 <_scanf_float+0x19e>
 800ad4c:	2c02      	cmp	r4, #2
 800ad4e:	d041      	beq.n	800add4 <_scanf_float+0x23c>
 800ad50:	2f01      	cmp	r7, #1
 800ad52:	d002      	beq.n	800ad5a <_scanf_float+0x1c2>
 800ad54:	2f04      	cmp	r7, #4
 800ad56:	d000      	beq.n	800ad5a <_scanf_float+0x1c2>
 800ad58:	e758      	b.n	800ac0c <_scanf_float+0x74>
 800ad5a:	3701      	adds	r7, #1
 800ad5c:	b2ff      	uxtb	r7, r7
 800ad5e:	e7eb      	b.n	800ad38 <_scanf_float+0x1a0>
 800ad60:	2102      	movs	r1, #2
 800ad62:	1efa      	subs	r2, r7, #3
 800ad64:	438a      	bics	r2, r1
 800ad66:	b2d2      	uxtb	r2, r2
 800ad68:	2a00      	cmp	r2, #0
 800ad6a:	d0f6      	beq.n	800ad5a <_scanf_float+0x1c2>
 800ad6c:	e74e      	b.n	800ac0c <_scanf_float+0x74>
 800ad6e:	2f02      	cmp	r7, #2
 800ad70:	d000      	beq.n	800ad74 <_scanf_float+0x1dc>
 800ad72:	e74b      	b.n	800ac0c <_scanf_float+0x74>
 800ad74:	2703      	movs	r7, #3
 800ad76:	e7df      	b.n	800ad38 <_scanf_float+0x1a0>
 800ad78:	2f06      	cmp	r7, #6
 800ad7a:	d000      	beq.n	800ad7e <_scanf_float+0x1e6>
 800ad7c:	e746      	b.n	800ac0c <_scanf_float+0x74>
 800ad7e:	2707      	movs	r7, #7
 800ad80:	e7da      	b.n	800ad38 <_scanf_float+0x1a0>
 800ad82:	6832      	ldr	r2, [r6, #0]
 800ad84:	0591      	lsls	r1, r2, #22
 800ad86:	d400      	bmi.n	800ad8a <_scanf_float+0x1f2>
 800ad88:	e740      	b.n	800ac0c <_scanf_float+0x74>
 800ad8a:	4941      	ldr	r1, [pc, #260]	; (800ae90 <_scanf_float+0x2f8>)
 800ad8c:	400a      	ands	r2, r1
 800ad8e:	6032      	str	r2, [r6, #0]
 800ad90:	9a01      	ldr	r2, [sp, #4]
 800ad92:	9206      	str	r2, [sp, #24]
 800ad94:	e7d0      	b.n	800ad38 <_scanf_float+0x1a0>
 800ad96:	21a0      	movs	r1, #160	; 0xa0
 800ad98:	2080      	movs	r0, #128	; 0x80
 800ad9a:	6832      	ldr	r2, [r6, #0]
 800ad9c:	00c9      	lsls	r1, r1, #3
 800ad9e:	4011      	ands	r1, r2
 800ada0:	00c0      	lsls	r0, r0, #3
 800ada2:	4281      	cmp	r1, r0
 800ada4:	d006      	beq.n	800adb4 <_scanf_float+0x21c>
 800ada6:	4202      	tst	r2, r0
 800ada8:	d100      	bne.n	800adac <_scanf_float+0x214>
 800adaa:	e72f      	b.n	800ac0c <_scanf_float+0x74>
 800adac:	9901      	ldr	r1, [sp, #4]
 800adae:	2900      	cmp	r1, #0
 800adb0:	d100      	bne.n	800adb4 <_scanf_float+0x21c>
 800adb2:	e732      	b.n	800ac1a <_scanf_float+0x82>
 800adb4:	0591      	lsls	r1, r2, #22
 800adb6:	d404      	bmi.n	800adc2 <_scanf_float+0x22a>
 800adb8:	9901      	ldr	r1, [sp, #4]
 800adba:	9806      	ldr	r0, [sp, #24]
 800adbc:	9508      	str	r5, [sp, #32]
 800adbe:	1a09      	subs	r1, r1, r0
 800adc0:	9107      	str	r1, [sp, #28]
 800adc2:	4931      	ldr	r1, [pc, #196]	; (800ae88 <_scanf_float+0x2f0>)
 800adc4:	400a      	ands	r2, r1
 800adc6:	21c0      	movs	r1, #192	; 0xc0
 800adc8:	0049      	lsls	r1, r1, #1
 800adca:	430a      	orrs	r2, r1
 800adcc:	6032      	str	r2, [r6, #0]
 800adce:	2200      	movs	r2, #0
 800add0:	9201      	str	r2, [sp, #4]
 800add2:	e7b1      	b.n	800ad38 <_scanf_float+0x1a0>
 800add4:	2403      	movs	r4, #3
 800add6:	e7af      	b.n	800ad38 <_scanf_float+0x1a0>
 800add8:	23c0      	movs	r3, #192	; 0xc0
 800adda:	005b      	lsls	r3, r3, #1
 800addc:	58f3      	ldr	r3, [r6, r3]
 800adde:	9900      	ldr	r1, [sp, #0]
 800ade0:	9802      	ldr	r0, [sp, #8]
 800ade2:	4798      	blx	r3
 800ade4:	2800      	cmp	r0, #0
 800ade6:	d100      	bne.n	800adea <_scanf_float+0x252>
 800ade8:	e6f9      	b.n	800abde <_scanf_float+0x46>
 800adea:	e70f      	b.n	800ac0c <_scanf_float+0x74>
 800adec:	3d01      	subs	r5, #1
 800adee:	5933      	ldr	r3, [r6, r4]
 800adf0:	7829      	ldrb	r1, [r5, #0]
 800adf2:	9a00      	ldr	r2, [sp, #0]
 800adf4:	9802      	ldr	r0, [sp, #8]
 800adf6:	4798      	blx	r3
 800adf8:	6933      	ldr	r3, [r6, #16]
 800adfa:	3b01      	subs	r3, #1
 800adfc:	6133      	str	r3, [r6, #16]
 800adfe:	e712      	b.n	800ac26 <_scanf_float+0x8e>
 800ae00:	1e7b      	subs	r3, r7, #1
 800ae02:	2b06      	cmp	r3, #6
 800ae04:	d826      	bhi.n	800ae54 <_scanf_float+0x2bc>
 800ae06:	2f02      	cmp	r7, #2
 800ae08:	d839      	bhi.n	800ae7e <_scanf_float+0x2e6>
 800ae0a:	24be      	movs	r4, #190	; 0xbe
 800ae0c:	0064      	lsls	r4, r4, #1
 800ae0e:	9b03      	ldr	r3, [sp, #12]
 800ae10:	429d      	cmp	r5, r3
 800ae12:	d800      	bhi.n	800ae16 <_scanf_float+0x27e>
 800ae14:	e70b      	b.n	800ac2e <_scanf_float+0x96>
 800ae16:	3d01      	subs	r5, #1
 800ae18:	5933      	ldr	r3, [r6, r4]
 800ae1a:	7829      	ldrb	r1, [r5, #0]
 800ae1c:	9a00      	ldr	r2, [sp, #0]
 800ae1e:	9802      	ldr	r0, [sp, #8]
 800ae20:	4798      	blx	r3
 800ae22:	6933      	ldr	r3, [r6, #16]
 800ae24:	3b01      	subs	r3, #1
 800ae26:	6133      	str	r3, [r6, #16]
 800ae28:	e7f1      	b.n	800ae0e <_scanf_float+0x276>
 800ae2a:	9b04      	ldr	r3, [sp, #16]
 800ae2c:	9a00      	ldr	r2, [sp, #0]
 800ae2e:	3b01      	subs	r3, #1
 800ae30:	9304      	str	r3, [sp, #16]
 800ae32:	7819      	ldrb	r1, [r3, #0]
 800ae34:	23be      	movs	r3, #190	; 0xbe
 800ae36:	005b      	lsls	r3, r3, #1
 800ae38:	58f3      	ldr	r3, [r6, r3]
 800ae3a:	9802      	ldr	r0, [sp, #8]
 800ae3c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae3e:	4798      	blx	r3
 800ae40:	6933      	ldr	r3, [r6, #16]
 800ae42:	3b01      	subs	r3, #1
 800ae44:	6133      	str	r3, [r6, #16]
 800ae46:	3c01      	subs	r4, #1
 800ae48:	b2e4      	uxtb	r4, r4
 800ae4a:	2c02      	cmp	r4, #2
 800ae4c:	d1ed      	bne.n	800ae2a <_scanf_float+0x292>
 800ae4e:	3f03      	subs	r7, #3
 800ae50:	b2ff      	uxtb	r7, r7
 800ae52:	1bed      	subs	r5, r5, r7
 800ae54:	6833      	ldr	r3, [r6, #0]
 800ae56:	05da      	lsls	r2, r3, #23
 800ae58:	d537      	bpl.n	800aeca <_scanf_float+0x332>
 800ae5a:	055b      	lsls	r3, r3, #21
 800ae5c:	d51a      	bpl.n	800ae94 <_scanf_float+0x2fc>
 800ae5e:	24be      	movs	r4, #190	; 0xbe
 800ae60:	0064      	lsls	r4, r4, #1
 800ae62:	9b03      	ldr	r3, [sp, #12]
 800ae64:	429d      	cmp	r5, r3
 800ae66:	d800      	bhi.n	800ae6a <_scanf_float+0x2d2>
 800ae68:	e6e1      	b.n	800ac2e <_scanf_float+0x96>
 800ae6a:	3d01      	subs	r5, #1
 800ae6c:	5933      	ldr	r3, [r6, r4]
 800ae6e:	7829      	ldrb	r1, [r5, #0]
 800ae70:	9a00      	ldr	r2, [sp, #0]
 800ae72:	9802      	ldr	r0, [sp, #8]
 800ae74:	4798      	blx	r3
 800ae76:	6933      	ldr	r3, [r6, #16]
 800ae78:	3b01      	subs	r3, #1
 800ae7a:	6133      	str	r3, [r6, #16]
 800ae7c:	e7f1      	b.n	800ae62 <_scanf_float+0x2ca>
 800ae7e:	003c      	movs	r4, r7
 800ae80:	9504      	str	r5, [sp, #16]
 800ae82:	e7e0      	b.n	800ae46 <_scanf_float+0x2ae>
 800ae84:	fffffeff 	.word	0xfffffeff
 800ae88:	fffff87f 	.word	0xfffff87f
 800ae8c:	fffffe7f 	.word	0xfffffe7f
 800ae90:	fffffd7f 	.word	0xfffffd7f
 800ae94:	6933      	ldr	r3, [r6, #16]
 800ae96:	1e6c      	subs	r4, r5, #1
 800ae98:	7821      	ldrb	r1, [r4, #0]
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	6133      	str	r3, [r6, #16]
 800ae9e:	2965      	cmp	r1, #101	; 0x65
 800aea0:	d00c      	beq.n	800aebc <_scanf_float+0x324>
 800aea2:	2945      	cmp	r1, #69	; 0x45
 800aea4:	d00a      	beq.n	800aebc <_scanf_float+0x324>
 800aea6:	23be      	movs	r3, #190	; 0xbe
 800aea8:	005b      	lsls	r3, r3, #1
 800aeaa:	58f3      	ldr	r3, [r6, r3]
 800aeac:	9a00      	ldr	r2, [sp, #0]
 800aeae:	9802      	ldr	r0, [sp, #8]
 800aeb0:	4798      	blx	r3
 800aeb2:	6933      	ldr	r3, [r6, #16]
 800aeb4:	1eac      	subs	r4, r5, #2
 800aeb6:	3b01      	subs	r3, #1
 800aeb8:	7821      	ldrb	r1, [r4, #0]
 800aeba:	6133      	str	r3, [r6, #16]
 800aebc:	23be      	movs	r3, #190	; 0xbe
 800aebe:	005b      	lsls	r3, r3, #1
 800aec0:	58f3      	ldr	r3, [r6, r3]
 800aec2:	9a00      	ldr	r2, [sp, #0]
 800aec4:	9802      	ldr	r0, [sp, #8]
 800aec6:	4798      	blx	r3
 800aec8:	0025      	movs	r5, r4
 800aeca:	2710      	movs	r7, #16
 800aecc:	6833      	ldr	r3, [r6, #0]
 800aece:	401f      	ands	r7, r3
 800aed0:	d15b      	bne.n	800af8a <_scanf_float+0x3f2>
 800aed2:	23c0      	movs	r3, #192	; 0xc0
 800aed4:	702f      	strb	r7, [r5, #0]
 800aed6:	6832      	ldr	r2, [r6, #0]
 800aed8:	00db      	lsls	r3, r3, #3
 800aeda:	4013      	ands	r3, r2
 800aedc:	2280      	movs	r2, #128	; 0x80
 800aede:	00d2      	lsls	r2, r2, #3
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d11b      	bne.n	800af1c <_scanf_float+0x384>
 800aee4:	9a06      	ldr	r2, [sp, #24]
 800aee6:	9b01      	ldr	r3, [sp, #4]
 800aee8:	1a9b      	subs	r3, r3, r2
 800aeea:	425a      	negs	r2, r3
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d122      	bne.n	800af36 <_scanf_float+0x39e>
 800aef0:	2200      	movs	r2, #0
 800aef2:	9903      	ldr	r1, [sp, #12]
 800aef4:	9802      	ldr	r0, [sp, #8]
 800aef6:	f000 ff35 	bl	800bd64 <_strtod_r>
 800aefa:	9b05      	ldr	r3, [sp, #20]
 800aefc:	0004      	movs	r4, r0
 800aefe:	6830      	ldr	r0, [r6, #0]
 800af00:	000d      	movs	r5, r1
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	0782      	lsls	r2, r0, #30
 800af06:	d523      	bpl.n	800af50 <_scanf_float+0x3b8>
 800af08:	1d1a      	adds	r2, r3, #4
 800af0a:	9905      	ldr	r1, [sp, #20]
 800af0c:	600a      	str	r2, [r1, #0]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	601c      	str	r4, [r3, #0]
 800af12:	605d      	str	r5, [r3, #4]
 800af14:	68f3      	ldr	r3, [r6, #12]
 800af16:	3301      	adds	r3, #1
 800af18:	60f3      	str	r3, [r6, #12]
 800af1a:	e689      	b.n	800ac30 <_scanf_float+0x98>
 800af1c:	9b07      	ldr	r3, [sp, #28]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d0e6      	beq.n	800aef0 <_scanf_float+0x358>
 800af22:	9b08      	ldr	r3, [sp, #32]
 800af24:	003a      	movs	r2, r7
 800af26:	1c59      	adds	r1, r3, #1
 800af28:	9802      	ldr	r0, [sp, #8]
 800af2a:	230a      	movs	r3, #10
 800af2c:	f000 ffaa 	bl	800be84 <_strtol_r>
 800af30:	9b07      	ldr	r3, [sp, #28]
 800af32:	9d08      	ldr	r5, [sp, #32]
 800af34:	1ac2      	subs	r2, r0, r3
 800af36:	0033      	movs	r3, r6
 800af38:	3370      	adds	r3, #112	; 0x70
 800af3a:	33ff      	adds	r3, #255	; 0xff
 800af3c:	429d      	cmp	r5, r3
 800af3e:	d302      	bcc.n	800af46 <_scanf_float+0x3ae>
 800af40:	0035      	movs	r5, r6
 800af42:	356f      	adds	r5, #111	; 0x6f
 800af44:	35ff      	adds	r5, #255	; 0xff
 800af46:	4912      	ldr	r1, [pc, #72]	; (800af90 <_scanf_float+0x3f8>)
 800af48:	0028      	movs	r0, r5
 800af4a:	f000 f8ab 	bl	800b0a4 <siprintf>
 800af4e:	e7cf      	b.n	800aef0 <_scanf_float+0x358>
 800af50:	2104      	movs	r1, #4
 800af52:	4008      	ands	r0, r1
 800af54:	1d1a      	adds	r2, r3, #4
 800af56:	9001      	str	r0, [sp, #4]
 800af58:	2800      	cmp	r0, #0
 800af5a:	d1d6      	bne.n	800af0a <_scanf_float+0x372>
 800af5c:	9905      	ldr	r1, [sp, #20]
 800af5e:	0020      	movs	r0, r4
 800af60:	600a      	str	r2, [r1, #0]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	0022      	movs	r2, r4
 800af66:	9300      	str	r3, [sp, #0]
 800af68:	0029      	movs	r1, r5
 800af6a:	002b      	movs	r3, r5
 800af6c:	f7f7 fd32 	bl	80029d4 <__aeabi_dcmpun>
 800af70:	2800      	cmp	r0, #0
 800af72:	d005      	beq.n	800af80 <_scanf_float+0x3e8>
 800af74:	9801      	ldr	r0, [sp, #4]
 800af76:	f000 f891 	bl	800b09c <nanf>
 800af7a:	9b00      	ldr	r3, [sp, #0]
 800af7c:	6018      	str	r0, [r3, #0]
 800af7e:	e7c9      	b.n	800af14 <_scanf_float+0x37c>
 800af80:	0020      	movs	r0, r4
 800af82:	0029      	movs	r1, r5
 800af84:	f7f7 fe36 	bl	8002bf4 <__aeabi_d2f>
 800af88:	e7f7      	b.n	800af7a <_scanf_float+0x3e2>
 800af8a:	2700      	movs	r7, #0
 800af8c:	e650      	b.n	800ac30 <_scanf_float+0x98>
 800af8e:	46c0      	nop			; (mov r8, r8)
 800af90:	0800ef7c 	.word	0x0800ef7c

0800af94 <iprintf>:
 800af94:	b40f      	push	{r0, r1, r2, r3}
 800af96:	4b0b      	ldr	r3, [pc, #44]	; (800afc4 <iprintf+0x30>)
 800af98:	b513      	push	{r0, r1, r4, lr}
 800af9a:	681c      	ldr	r4, [r3, #0]
 800af9c:	2c00      	cmp	r4, #0
 800af9e:	d005      	beq.n	800afac <iprintf+0x18>
 800afa0:	69a3      	ldr	r3, [r4, #24]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d102      	bne.n	800afac <iprintf+0x18>
 800afa6:	0020      	movs	r0, r4
 800afa8:	f001 ffa6 	bl	800cef8 <__sinit>
 800afac:	ab05      	add	r3, sp, #20
 800afae:	9a04      	ldr	r2, [sp, #16]
 800afb0:	68a1      	ldr	r1, [r4, #8]
 800afb2:	0020      	movs	r0, r4
 800afb4:	9301      	str	r3, [sp, #4]
 800afb6:	f003 fa3d 	bl	800e434 <_vfiprintf_r>
 800afba:	bc16      	pop	{r1, r2, r4}
 800afbc:	bc08      	pop	{r3}
 800afbe:	b004      	add	sp, #16
 800afc0:	4718      	bx	r3
 800afc2:	46c0      	nop			; (mov r8, r8)
 800afc4:	20000178 	.word	0x20000178

0800afc8 <_puts_r>:
 800afc8:	b570      	push	{r4, r5, r6, lr}
 800afca:	0005      	movs	r5, r0
 800afcc:	000e      	movs	r6, r1
 800afce:	2800      	cmp	r0, #0
 800afd0:	d004      	beq.n	800afdc <_puts_r+0x14>
 800afd2:	6983      	ldr	r3, [r0, #24]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d101      	bne.n	800afdc <_puts_r+0x14>
 800afd8:	f001 ff8e 	bl	800cef8 <__sinit>
 800afdc:	69ab      	ldr	r3, [r5, #24]
 800afde:	68ac      	ldr	r4, [r5, #8]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d102      	bne.n	800afea <_puts_r+0x22>
 800afe4:	0028      	movs	r0, r5
 800afe6:	f001 ff87 	bl	800cef8 <__sinit>
 800afea:	4b24      	ldr	r3, [pc, #144]	; (800b07c <_puts_r+0xb4>)
 800afec:	429c      	cmp	r4, r3
 800afee:	d10f      	bne.n	800b010 <_puts_r+0x48>
 800aff0:	686c      	ldr	r4, [r5, #4]
 800aff2:	89a3      	ldrh	r3, [r4, #12]
 800aff4:	071b      	lsls	r3, r3, #28
 800aff6:	d502      	bpl.n	800affe <_puts_r+0x36>
 800aff8:	6923      	ldr	r3, [r4, #16]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d11f      	bne.n	800b03e <_puts_r+0x76>
 800affe:	0021      	movs	r1, r4
 800b000:	0028      	movs	r0, r5
 800b002:	f000 ffa5 	bl	800bf50 <__swsetup_r>
 800b006:	2800      	cmp	r0, #0
 800b008:	d019      	beq.n	800b03e <_puts_r+0x76>
 800b00a:	2001      	movs	r0, #1
 800b00c:	4240      	negs	r0, r0
 800b00e:	bd70      	pop	{r4, r5, r6, pc}
 800b010:	4b1b      	ldr	r3, [pc, #108]	; (800b080 <_puts_r+0xb8>)
 800b012:	429c      	cmp	r4, r3
 800b014:	d101      	bne.n	800b01a <_puts_r+0x52>
 800b016:	68ac      	ldr	r4, [r5, #8]
 800b018:	e7eb      	b.n	800aff2 <_puts_r+0x2a>
 800b01a:	4b1a      	ldr	r3, [pc, #104]	; (800b084 <_puts_r+0xbc>)
 800b01c:	429c      	cmp	r4, r3
 800b01e:	d1e8      	bne.n	800aff2 <_puts_r+0x2a>
 800b020:	68ec      	ldr	r4, [r5, #12]
 800b022:	e7e6      	b.n	800aff2 <_puts_r+0x2a>
 800b024:	3601      	adds	r6, #1
 800b026:	60a3      	str	r3, [r4, #8]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	da04      	bge.n	800b036 <_puts_r+0x6e>
 800b02c:	69a2      	ldr	r2, [r4, #24]
 800b02e:	429a      	cmp	r2, r3
 800b030:	dc16      	bgt.n	800b060 <_puts_r+0x98>
 800b032:	290a      	cmp	r1, #10
 800b034:	d014      	beq.n	800b060 <_puts_r+0x98>
 800b036:	6823      	ldr	r3, [r4, #0]
 800b038:	1c5a      	adds	r2, r3, #1
 800b03a:	6022      	str	r2, [r4, #0]
 800b03c:	7019      	strb	r1, [r3, #0]
 800b03e:	68a3      	ldr	r3, [r4, #8]
 800b040:	7831      	ldrb	r1, [r6, #0]
 800b042:	3b01      	subs	r3, #1
 800b044:	2900      	cmp	r1, #0
 800b046:	d1ed      	bne.n	800b024 <_puts_r+0x5c>
 800b048:	60a3      	str	r3, [r4, #8]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	da0f      	bge.n	800b06e <_puts_r+0xa6>
 800b04e:	0022      	movs	r2, r4
 800b050:	310a      	adds	r1, #10
 800b052:	0028      	movs	r0, r5
 800b054:	f000 ff26 	bl	800bea4 <__swbuf_r>
 800b058:	1c43      	adds	r3, r0, #1
 800b05a:	d0d6      	beq.n	800b00a <_puts_r+0x42>
 800b05c:	200a      	movs	r0, #10
 800b05e:	e7d6      	b.n	800b00e <_puts_r+0x46>
 800b060:	0022      	movs	r2, r4
 800b062:	0028      	movs	r0, r5
 800b064:	f000 ff1e 	bl	800bea4 <__swbuf_r>
 800b068:	1c43      	adds	r3, r0, #1
 800b06a:	d1e8      	bne.n	800b03e <_puts_r+0x76>
 800b06c:	e7cd      	b.n	800b00a <_puts_r+0x42>
 800b06e:	200a      	movs	r0, #10
 800b070:	6823      	ldr	r3, [r4, #0]
 800b072:	1c5a      	adds	r2, r3, #1
 800b074:	6022      	str	r2, [r4, #0]
 800b076:	7018      	strb	r0, [r3, #0]
 800b078:	e7c9      	b.n	800b00e <_puts_r+0x46>
 800b07a:	46c0      	nop			; (mov r8, r8)
 800b07c:	0800f008 	.word	0x0800f008
 800b080:	0800f028 	.word	0x0800f028
 800b084:	0800efe8 	.word	0x0800efe8

0800b088 <puts>:
 800b088:	b510      	push	{r4, lr}
 800b08a:	4b03      	ldr	r3, [pc, #12]	; (800b098 <puts+0x10>)
 800b08c:	0001      	movs	r1, r0
 800b08e:	6818      	ldr	r0, [r3, #0]
 800b090:	f7ff ff9a 	bl	800afc8 <_puts_r>
 800b094:	bd10      	pop	{r4, pc}
 800b096:	46c0      	nop			; (mov r8, r8)
 800b098:	20000178 	.word	0x20000178

0800b09c <nanf>:
 800b09c:	4800      	ldr	r0, [pc, #0]	; (800b0a0 <nanf+0x4>)
 800b09e:	4770      	bx	lr
 800b0a0:	7fc00000 	.word	0x7fc00000

0800b0a4 <siprintf>:
 800b0a4:	b40e      	push	{r1, r2, r3}
 800b0a6:	b500      	push	{lr}
 800b0a8:	490b      	ldr	r1, [pc, #44]	; (800b0d8 <siprintf+0x34>)
 800b0aa:	b09c      	sub	sp, #112	; 0x70
 800b0ac:	ab1d      	add	r3, sp, #116	; 0x74
 800b0ae:	9002      	str	r0, [sp, #8]
 800b0b0:	9006      	str	r0, [sp, #24]
 800b0b2:	9107      	str	r1, [sp, #28]
 800b0b4:	9104      	str	r1, [sp, #16]
 800b0b6:	4809      	ldr	r0, [pc, #36]	; (800b0dc <siprintf+0x38>)
 800b0b8:	4909      	ldr	r1, [pc, #36]	; (800b0e0 <siprintf+0x3c>)
 800b0ba:	cb04      	ldmia	r3!, {r2}
 800b0bc:	9105      	str	r1, [sp, #20]
 800b0be:	6800      	ldr	r0, [r0, #0]
 800b0c0:	a902      	add	r1, sp, #8
 800b0c2:	9301      	str	r3, [sp, #4]
 800b0c4:	f003 f890 	bl	800e1e8 <_svfiprintf_r>
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	9a02      	ldr	r2, [sp, #8]
 800b0cc:	7013      	strb	r3, [r2, #0]
 800b0ce:	b01c      	add	sp, #112	; 0x70
 800b0d0:	bc08      	pop	{r3}
 800b0d2:	b003      	add	sp, #12
 800b0d4:	4718      	bx	r3
 800b0d6:	46c0      	nop			; (mov r8, r8)
 800b0d8:	7fffffff 	.word	0x7fffffff
 800b0dc:	20000178 	.word	0x20000178
 800b0e0:	ffff0208 	.word	0xffff0208

0800b0e4 <sulp>:
 800b0e4:	b570      	push	{r4, r5, r6, lr}
 800b0e6:	0016      	movs	r6, r2
 800b0e8:	000d      	movs	r5, r1
 800b0ea:	f002 fe3f 	bl	800dd6c <__ulp>
 800b0ee:	2e00      	cmp	r6, #0
 800b0f0:	d00d      	beq.n	800b10e <sulp+0x2a>
 800b0f2:	236b      	movs	r3, #107	; 0x6b
 800b0f4:	006a      	lsls	r2, r5, #1
 800b0f6:	0d52      	lsrs	r2, r2, #21
 800b0f8:	1a9b      	subs	r3, r3, r2
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	dd07      	ble.n	800b10e <sulp+0x2a>
 800b0fe:	2400      	movs	r4, #0
 800b100:	4a03      	ldr	r2, [pc, #12]	; (800b110 <sulp+0x2c>)
 800b102:	051b      	lsls	r3, r3, #20
 800b104:	189d      	adds	r5, r3, r2
 800b106:	002b      	movs	r3, r5
 800b108:	0022      	movs	r2, r4
 800b10a:	f7f6 fea9 	bl	8001e60 <__aeabi_dmul>
 800b10e:	bd70      	pop	{r4, r5, r6, pc}
 800b110:	3ff00000 	.word	0x3ff00000

0800b114 <_strtod_l>:
 800b114:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b116:	b0a7      	sub	sp, #156	; 0x9c
 800b118:	9307      	str	r3, [sp, #28]
 800b11a:	2300      	movs	r3, #0
 800b11c:	9004      	str	r0, [sp, #16]
 800b11e:	9807      	ldr	r0, [sp, #28]
 800b120:	9322      	str	r3, [sp, #136]	; 0x88
 800b122:	9106      	str	r1, [sp, #24]
 800b124:	921d      	str	r2, [sp, #116]	; 0x74
 800b126:	f002 faae 	bl	800d686 <__localeconv_l>
 800b12a:	0005      	movs	r5, r0
 800b12c:	6800      	ldr	r0, [r0, #0]
 800b12e:	f7f4 ffef 	bl	8000110 <strlen>
 800b132:	2600      	movs	r6, #0
 800b134:	2700      	movs	r7, #0
 800b136:	9b06      	ldr	r3, [sp, #24]
 800b138:	9005      	str	r0, [sp, #20]
 800b13a:	9321      	str	r3, [sp, #132]	; 0x84
 800b13c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b13e:	781a      	ldrb	r2, [r3, #0]
 800b140:	2a0d      	cmp	r2, #13
 800b142:	d839      	bhi.n	800b1b8 <_strtod_l+0xa4>
 800b144:	2a09      	cmp	r2, #9
 800b146:	d23d      	bcs.n	800b1c4 <_strtod_l+0xb0>
 800b148:	2a00      	cmp	r2, #0
 800b14a:	d044      	beq.n	800b1d6 <_strtod_l+0xc2>
 800b14c:	2300      	movs	r3, #0
 800b14e:	9313      	str	r3, [sp, #76]	; 0x4c
 800b150:	2200      	movs	r2, #0
 800b152:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800b154:	920c      	str	r2, [sp, #48]	; 0x30
 800b156:	7823      	ldrb	r3, [r4, #0]
 800b158:	2b30      	cmp	r3, #48	; 0x30
 800b15a:	d000      	beq.n	800b15e <_strtod_l+0x4a>
 800b15c:	e07e      	b.n	800b25c <_strtod_l+0x148>
 800b15e:	7863      	ldrb	r3, [r4, #1]
 800b160:	2b58      	cmp	r3, #88	; 0x58
 800b162:	d002      	beq.n	800b16a <_strtod_l+0x56>
 800b164:	2b78      	cmp	r3, #120	; 0x78
 800b166:	d000      	beq.n	800b16a <_strtod_l+0x56>
 800b168:	e06e      	b.n	800b248 <_strtod_l+0x134>
 800b16a:	9b07      	ldr	r3, [sp, #28]
 800b16c:	4a96      	ldr	r2, [pc, #600]	; (800b3c8 <_strtod_l+0x2b4>)
 800b16e:	9302      	str	r3, [sp, #8]
 800b170:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b172:	a921      	add	r1, sp, #132	; 0x84
 800b174:	9301      	str	r3, [sp, #4]
 800b176:	ab22      	add	r3, sp, #136	; 0x88
 800b178:	9300      	str	r3, [sp, #0]
 800b17a:	9804      	ldr	r0, [sp, #16]
 800b17c:	ab23      	add	r3, sp, #140	; 0x8c
 800b17e:	f001 ff97 	bl	800d0b0 <__gethex>
 800b182:	2507      	movs	r5, #7
 800b184:	9005      	str	r0, [sp, #20]
 800b186:	4005      	ands	r5, r0
 800b188:	d005      	beq.n	800b196 <_strtod_l+0x82>
 800b18a:	2d06      	cmp	r5, #6
 800b18c:	d12f      	bne.n	800b1ee <_strtod_l+0xda>
 800b18e:	2300      	movs	r3, #0
 800b190:	3401      	adds	r4, #1
 800b192:	9421      	str	r4, [sp, #132]	; 0x84
 800b194:	9313      	str	r3, [sp, #76]	; 0x4c
 800b196:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d002      	beq.n	800b1a2 <_strtod_l+0x8e>
 800b19c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b19e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b1a0:	601a      	str	r2, [r3, #0]
 800b1a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d01d      	beq.n	800b1e4 <_strtod_l+0xd0>
 800b1a8:	2380      	movs	r3, #128	; 0x80
 800b1aa:	0032      	movs	r2, r6
 800b1ac:	061b      	lsls	r3, r3, #24
 800b1ae:	18fb      	adds	r3, r7, r3
 800b1b0:	0010      	movs	r0, r2
 800b1b2:	0019      	movs	r1, r3
 800b1b4:	b027      	add	sp, #156	; 0x9c
 800b1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1b8:	2a2b      	cmp	r2, #43	; 0x2b
 800b1ba:	d016      	beq.n	800b1ea <_strtod_l+0xd6>
 800b1bc:	2a2d      	cmp	r2, #45	; 0x2d
 800b1be:	d003      	beq.n	800b1c8 <_strtod_l+0xb4>
 800b1c0:	2a20      	cmp	r2, #32
 800b1c2:	d1c3      	bne.n	800b14c <_strtod_l+0x38>
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	e7b8      	b.n	800b13a <_strtod_l+0x26>
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	9213      	str	r2, [sp, #76]	; 0x4c
 800b1cc:	1c5a      	adds	r2, r3, #1
 800b1ce:	9221      	str	r2, [sp, #132]	; 0x84
 800b1d0:	785b      	ldrb	r3, [r3, #1]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d1bc      	bne.n	800b150 <_strtod_l+0x3c>
 800b1d6:	9b06      	ldr	r3, [sp, #24]
 800b1d8:	9321      	str	r3, [sp, #132]	; 0x84
 800b1da:	2300      	movs	r3, #0
 800b1dc:	9313      	str	r3, [sp, #76]	; 0x4c
 800b1de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d1db      	bne.n	800b19c <_strtod_l+0x88>
 800b1e4:	0032      	movs	r2, r6
 800b1e6:	003b      	movs	r3, r7
 800b1e8:	e7e2      	b.n	800b1b0 <_strtod_l+0x9c>
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	e7ed      	b.n	800b1ca <_strtod_l+0xb6>
 800b1ee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b1f0:	2a00      	cmp	r2, #0
 800b1f2:	d007      	beq.n	800b204 <_strtod_l+0xf0>
 800b1f4:	2135      	movs	r1, #53	; 0x35
 800b1f6:	a824      	add	r0, sp, #144	; 0x90
 800b1f8:	f002 fea5 	bl	800df46 <__copybits>
 800b1fc:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b1fe:	9804      	ldr	r0, [sp, #16]
 800b200:	f002 fb1b 	bl	800d83a <_Bfree>
 800b204:	1e68      	subs	r0, r5, #1
 800b206:	2804      	cmp	r0, #4
 800b208:	d806      	bhi.n	800b218 <_strtod_l+0x104>
 800b20a:	f7f4 ff89 	bl	8000120 <__gnu_thumb1_case_uqi>
 800b20e:	030c      	.short	0x030c
 800b210:	1917      	.short	0x1917
 800b212:	0c          	.byte	0x0c
 800b213:	00          	.byte	0x00
 800b214:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800b216:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800b218:	9b05      	ldr	r3, [sp, #20]
 800b21a:	071b      	lsls	r3, r3, #28
 800b21c:	d5bb      	bpl.n	800b196 <_strtod_l+0x82>
 800b21e:	2380      	movs	r3, #128	; 0x80
 800b220:	061b      	lsls	r3, r3, #24
 800b222:	431f      	orrs	r7, r3
 800b224:	e7b7      	b.n	800b196 <_strtod_l+0x82>
 800b226:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800b228:	4a68      	ldr	r2, [pc, #416]	; (800b3cc <_strtod_l+0x2b8>)
 800b22a:	4969      	ldr	r1, [pc, #420]	; (800b3d0 <_strtod_l+0x2bc>)
 800b22c:	401a      	ands	r2, r3
 800b22e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b230:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800b232:	185b      	adds	r3, r3, r1
 800b234:	051b      	lsls	r3, r3, #20
 800b236:	431a      	orrs	r2, r3
 800b238:	0017      	movs	r7, r2
 800b23a:	e7ed      	b.n	800b218 <_strtod_l+0x104>
 800b23c:	4f65      	ldr	r7, [pc, #404]	; (800b3d4 <_strtod_l+0x2c0>)
 800b23e:	e7eb      	b.n	800b218 <_strtod_l+0x104>
 800b240:	2601      	movs	r6, #1
 800b242:	4f65      	ldr	r7, [pc, #404]	; (800b3d8 <_strtod_l+0x2c4>)
 800b244:	4276      	negs	r6, r6
 800b246:	e7e7      	b.n	800b218 <_strtod_l+0x104>
 800b248:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b24a:	1c5a      	adds	r2, r3, #1
 800b24c:	9221      	str	r2, [sp, #132]	; 0x84
 800b24e:	785b      	ldrb	r3, [r3, #1]
 800b250:	2b30      	cmp	r3, #48	; 0x30
 800b252:	d0f9      	beq.n	800b248 <_strtod_l+0x134>
 800b254:	2b00      	cmp	r3, #0
 800b256:	d09e      	beq.n	800b196 <_strtod_l+0x82>
 800b258:	2301      	movs	r3, #1
 800b25a:	930c      	str	r3, [sp, #48]	; 0x30
 800b25c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b25e:	220a      	movs	r2, #10
 800b260:	9312      	str	r3, [sp, #72]	; 0x48
 800b262:	2300      	movs	r3, #0
 800b264:	930b      	str	r3, [sp, #44]	; 0x2c
 800b266:	9308      	str	r3, [sp, #32]
 800b268:	930a      	str	r3, [sp, #40]	; 0x28
 800b26a:	9821      	ldr	r0, [sp, #132]	; 0x84
 800b26c:	7804      	ldrb	r4, [r0, #0]
 800b26e:	0023      	movs	r3, r4
 800b270:	3b30      	subs	r3, #48	; 0x30
 800b272:	b2d9      	uxtb	r1, r3
 800b274:	2909      	cmp	r1, #9
 800b276:	d934      	bls.n	800b2e2 <_strtod_l+0x1ce>
 800b278:	9a05      	ldr	r2, [sp, #20]
 800b27a:	6829      	ldr	r1, [r5, #0]
 800b27c:	f003 fa4e 	bl	800e71c <strncmp>
 800b280:	2800      	cmp	r0, #0
 800b282:	d040      	beq.n	800b306 <_strtod_l+0x1f2>
 800b284:	2000      	movs	r0, #0
 800b286:	0023      	movs	r3, r4
 800b288:	4684      	mov	ip, r0
 800b28a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b28c:	9007      	str	r0, [sp, #28]
 800b28e:	9205      	str	r2, [sp, #20]
 800b290:	2220      	movs	r2, #32
 800b292:	0019      	movs	r1, r3
 800b294:	4391      	bics	r1, r2
 800b296:	000a      	movs	r2, r1
 800b298:	2100      	movs	r1, #0
 800b29a:	2a45      	cmp	r2, #69	; 0x45
 800b29c:	d000      	beq.n	800b2a0 <_strtod_l+0x18c>
 800b29e:	e0bf      	b.n	800b420 <_strtod_l+0x30c>
 800b2a0:	9b05      	ldr	r3, [sp, #20]
 800b2a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2a4:	4303      	orrs	r3, r0
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	428b      	cmp	r3, r1
 800b2aa:	d094      	beq.n	800b1d6 <_strtod_l+0xc2>
 800b2ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2ae:	9306      	str	r3, [sp, #24]
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	9321      	str	r3, [sp, #132]	; 0x84
 800b2b4:	9b06      	ldr	r3, [sp, #24]
 800b2b6:	785b      	ldrb	r3, [r3, #1]
 800b2b8:	2b2b      	cmp	r3, #43	; 0x2b
 800b2ba:	d100      	bne.n	800b2be <_strtod_l+0x1aa>
 800b2bc:	e082      	b.n	800b3c4 <_strtod_l+0x2b0>
 800b2be:	000c      	movs	r4, r1
 800b2c0:	2b2d      	cmp	r3, #45	; 0x2d
 800b2c2:	d105      	bne.n	800b2d0 <_strtod_l+0x1bc>
 800b2c4:	2401      	movs	r4, #1
 800b2c6:	9b06      	ldr	r3, [sp, #24]
 800b2c8:	3302      	adds	r3, #2
 800b2ca:	9321      	str	r3, [sp, #132]	; 0x84
 800b2cc:	9b06      	ldr	r3, [sp, #24]
 800b2ce:	789b      	ldrb	r3, [r3, #2]
 800b2d0:	001a      	movs	r2, r3
 800b2d2:	3a30      	subs	r2, #48	; 0x30
 800b2d4:	2a09      	cmp	r2, #9
 800b2d6:	d800      	bhi.n	800b2da <_strtod_l+0x1c6>
 800b2d8:	e084      	b.n	800b3e4 <_strtod_l+0x2d0>
 800b2da:	9a06      	ldr	r2, [sp, #24]
 800b2dc:	2100      	movs	r1, #0
 800b2de:	9221      	str	r2, [sp, #132]	; 0x84
 800b2e0:	e09e      	b.n	800b420 <_strtod_l+0x30c>
 800b2e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b2e4:	2908      	cmp	r1, #8
 800b2e6:	dc09      	bgt.n	800b2fc <_strtod_l+0x1e8>
 800b2e8:	9908      	ldr	r1, [sp, #32]
 800b2ea:	4351      	muls	r1, r2
 800b2ec:	18cb      	adds	r3, r1, r3
 800b2ee:	9308      	str	r3, [sp, #32]
 800b2f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2f2:	3001      	adds	r0, #1
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	930a      	str	r3, [sp, #40]	; 0x28
 800b2f8:	9021      	str	r0, [sp, #132]	; 0x84
 800b2fa:	e7b6      	b.n	800b26a <_strtod_l+0x156>
 800b2fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b2fe:	4351      	muls	r1, r2
 800b300:	18cb      	adds	r3, r1, r3
 800b302:	930b      	str	r3, [sp, #44]	; 0x2c
 800b304:	e7f4      	b.n	800b2f0 <_strtod_l+0x1dc>
 800b306:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b308:	9b05      	ldr	r3, [sp, #20]
 800b30a:	4694      	mov	ip, r2
 800b30c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b30e:	4463      	add	r3, ip
 800b310:	9321      	str	r3, [sp, #132]	; 0x84
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	2a00      	cmp	r2, #0
 800b316:	d036      	beq.n	800b386 <_strtod_l+0x272>
 800b318:	4684      	mov	ip, r0
 800b31a:	9205      	str	r2, [sp, #20]
 800b31c:	001a      	movs	r2, r3
 800b31e:	3a30      	subs	r2, #48	; 0x30
 800b320:	2a09      	cmp	r2, #9
 800b322:	d912      	bls.n	800b34a <_strtod_l+0x236>
 800b324:	2201      	movs	r2, #1
 800b326:	9207      	str	r2, [sp, #28]
 800b328:	e7b2      	b.n	800b290 <_strtod_l+0x17c>
 800b32a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b32c:	3001      	adds	r0, #1
 800b32e:	1c5a      	adds	r2, r3, #1
 800b330:	9221      	str	r2, [sp, #132]	; 0x84
 800b332:	785b      	ldrb	r3, [r3, #1]
 800b334:	2b30      	cmp	r3, #48	; 0x30
 800b336:	d0f8      	beq.n	800b32a <_strtod_l+0x216>
 800b338:	001a      	movs	r2, r3
 800b33a:	3a31      	subs	r2, #49	; 0x31
 800b33c:	2a08      	cmp	r2, #8
 800b33e:	d83c      	bhi.n	800b3ba <_strtod_l+0x2a6>
 800b340:	4684      	mov	ip, r0
 800b342:	2000      	movs	r0, #0
 800b344:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b346:	9005      	str	r0, [sp, #20]
 800b348:	9212      	str	r2, [sp, #72]	; 0x48
 800b34a:	3b30      	subs	r3, #48	; 0x30
 800b34c:	1c42      	adds	r2, r0, #1
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d013      	beq.n	800b37a <_strtod_l+0x266>
 800b352:	210a      	movs	r1, #10
 800b354:	4494      	add	ip, r2
 800b356:	9a05      	ldr	r2, [sp, #20]
 800b358:	1885      	adds	r5, r0, r2
 800b35a:	42aa      	cmp	r2, r5
 800b35c:	d115      	bne.n	800b38a <_strtod_l+0x276>
 800b35e:	9905      	ldr	r1, [sp, #20]
 800b360:	9a05      	ldr	r2, [sp, #20]
 800b362:	3101      	adds	r1, #1
 800b364:	1809      	adds	r1, r1, r0
 800b366:	1812      	adds	r2, r2, r0
 800b368:	9105      	str	r1, [sp, #20]
 800b36a:	2a08      	cmp	r2, #8
 800b36c:	dc1b      	bgt.n	800b3a6 <_strtod_l+0x292>
 800b36e:	220a      	movs	r2, #10
 800b370:	9908      	ldr	r1, [sp, #32]
 800b372:	434a      	muls	r2, r1
 800b374:	189b      	adds	r3, r3, r2
 800b376:	2200      	movs	r2, #0
 800b378:	9308      	str	r3, [sp, #32]
 800b37a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b37c:	0010      	movs	r0, r2
 800b37e:	1c59      	adds	r1, r3, #1
 800b380:	9121      	str	r1, [sp, #132]	; 0x84
 800b382:	785b      	ldrb	r3, [r3, #1]
 800b384:	e7ca      	b.n	800b31c <_strtod_l+0x208>
 800b386:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b388:	e7d4      	b.n	800b334 <_strtod_l+0x220>
 800b38a:	1c54      	adds	r4, r2, #1
 800b38c:	2a08      	cmp	r2, #8
 800b38e:	dc04      	bgt.n	800b39a <_strtod_l+0x286>
 800b390:	9a08      	ldr	r2, [sp, #32]
 800b392:	434a      	muls	r2, r1
 800b394:	9208      	str	r2, [sp, #32]
 800b396:	0022      	movs	r2, r4
 800b398:	e7df      	b.n	800b35a <_strtod_l+0x246>
 800b39a:	2c10      	cmp	r4, #16
 800b39c:	dcfb      	bgt.n	800b396 <_strtod_l+0x282>
 800b39e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b3a0:	434a      	muls	r2, r1
 800b3a2:	920b      	str	r2, [sp, #44]	; 0x2c
 800b3a4:	e7f7      	b.n	800b396 <_strtod_l+0x282>
 800b3a6:	9905      	ldr	r1, [sp, #20]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	2910      	cmp	r1, #16
 800b3ac:	dce5      	bgt.n	800b37a <_strtod_l+0x266>
 800b3ae:	210a      	movs	r1, #10
 800b3b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b3b2:	4341      	muls	r1, r0
 800b3b4:	185b      	adds	r3, r3, r1
 800b3b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3b8:	e7df      	b.n	800b37a <_strtod_l+0x266>
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	4694      	mov	ip, r2
 800b3be:	9205      	str	r2, [sp, #20]
 800b3c0:	3201      	adds	r2, #1
 800b3c2:	e7b0      	b.n	800b326 <_strtod_l+0x212>
 800b3c4:	000c      	movs	r4, r1
 800b3c6:	e77e      	b.n	800b2c6 <_strtod_l+0x1b2>
 800b3c8:	0800ef84 	.word	0x0800ef84
 800b3cc:	ffefffff 	.word	0xffefffff
 800b3d0:	00000433 	.word	0x00000433
 800b3d4:	7ff00000 	.word	0x7ff00000
 800b3d8:	7fffffff 	.word	0x7fffffff
 800b3dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3de:	1c5a      	adds	r2, r3, #1
 800b3e0:	9221      	str	r2, [sp, #132]	; 0x84
 800b3e2:	785b      	ldrb	r3, [r3, #1]
 800b3e4:	2b30      	cmp	r3, #48	; 0x30
 800b3e6:	d0f9      	beq.n	800b3dc <_strtod_l+0x2c8>
 800b3e8:	001a      	movs	r2, r3
 800b3ea:	3a31      	subs	r2, #49	; 0x31
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	2a08      	cmp	r2, #8
 800b3f0:	d816      	bhi.n	800b420 <_strtod_l+0x30c>
 800b3f2:	3b30      	subs	r3, #48	; 0x30
 800b3f4:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800b3f6:	930e      	str	r3, [sp, #56]	; 0x38
 800b3f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3fa:	1c59      	adds	r1, r3, #1
 800b3fc:	9121      	str	r1, [sp, #132]	; 0x84
 800b3fe:	785b      	ldrb	r3, [r3, #1]
 800b400:	001a      	movs	r2, r3
 800b402:	3a30      	subs	r2, #48	; 0x30
 800b404:	2a09      	cmp	r2, #9
 800b406:	d932      	bls.n	800b46e <_strtod_l+0x35a>
 800b408:	1b4a      	subs	r2, r1, r5
 800b40a:	4dad      	ldr	r5, [pc, #692]	; (800b6c0 <_strtod_l+0x5ac>)
 800b40c:	0029      	movs	r1, r5
 800b40e:	2a08      	cmp	r2, #8
 800b410:	dc03      	bgt.n	800b41a <_strtod_l+0x306>
 800b412:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b414:	42a9      	cmp	r1, r5
 800b416:	dd00      	ble.n	800b41a <_strtod_l+0x306>
 800b418:	0029      	movs	r1, r5
 800b41a:	2c00      	cmp	r4, #0
 800b41c:	d000      	beq.n	800b420 <_strtod_l+0x30c>
 800b41e:	4249      	negs	r1, r1
 800b420:	9a05      	ldr	r2, [sp, #20]
 800b422:	2a00      	cmp	r2, #0
 800b424:	d149      	bne.n	800b4ba <_strtod_l+0x3a6>
 800b426:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b428:	4310      	orrs	r0, r2
 800b42a:	d000      	beq.n	800b42e <_strtod_l+0x31a>
 800b42c:	e6b3      	b.n	800b196 <_strtod_l+0x82>
 800b42e:	9a07      	ldr	r2, [sp, #28]
 800b430:	2a00      	cmp	r2, #0
 800b432:	d000      	beq.n	800b436 <_strtod_l+0x322>
 800b434:	e6cf      	b.n	800b1d6 <_strtod_l+0xc2>
 800b436:	2b4e      	cmp	r3, #78	; 0x4e
 800b438:	d025      	beq.n	800b486 <_strtod_l+0x372>
 800b43a:	dc1f      	bgt.n	800b47c <_strtod_l+0x368>
 800b43c:	2b49      	cmp	r3, #73	; 0x49
 800b43e:	d000      	beq.n	800b442 <_strtod_l+0x32e>
 800b440:	e6c9      	b.n	800b1d6 <_strtod_l+0xc2>
 800b442:	49a0      	ldr	r1, [pc, #640]	; (800b6c4 <_strtod_l+0x5b0>)
 800b444:	a821      	add	r0, sp, #132	; 0x84
 800b446:	f002 f870 	bl	800d52a <__match>
 800b44a:	2800      	cmp	r0, #0
 800b44c:	d100      	bne.n	800b450 <_strtod_l+0x33c>
 800b44e:	e6c2      	b.n	800b1d6 <_strtod_l+0xc2>
 800b450:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b452:	499d      	ldr	r1, [pc, #628]	; (800b6c8 <_strtod_l+0x5b4>)
 800b454:	3b01      	subs	r3, #1
 800b456:	a821      	add	r0, sp, #132	; 0x84
 800b458:	9321      	str	r3, [sp, #132]	; 0x84
 800b45a:	f002 f866 	bl	800d52a <__match>
 800b45e:	2800      	cmp	r0, #0
 800b460:	d102      	bne.n	800b468 <_strtod_l+0x354>
 800b462:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b464:	3301      	adds	r3, #1
 800b466:	9321      	str	r3, [sp, #132]	; 0x84
 800b468:	4f98      	ldr	r7, [pc, #608]	; (800b6cc <_strtod_l+0x5b8>)
 800b46a:	2600      	movs	r6, #0
 800b46c:	e693      	b.n	800b196 <_strtod_l+0x82>
 800b46e:	220a      	movs	r2, #10
 800b470:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b472:	434a      	muls	r2, r1
 800b474:	18d2      	adds	r2, r2, r3
 800b476:	3a30      	subs	r2, #48	; 0x30
 800b478:	920e      	str	r2, [sp, #56]	; 0x38
 800b47a:	e7bd      	b.n	800b3f8 <_strtod_l+0x2e4>
 800b47c:	2b69      	cmp	r3, #105	; 0x69
 800b47e:	d0e0      	beq.n	800b442 <_strtod_l+0x32e>
 800b480:	2b6e      	cmp	r3, #110	; 0x6e
 800b482:	d000      	beq.n	800b486 <_strtod_l+0x372>
 800b484:	e6a7      	b.n	800b1d6 <_strtod_l+0xc2>
 800b486:	4992      	ldr	r1, [pc, #584]	; (800b6d0 <_strtod_l+0x5bc>)
 800b488:	a821      	add	r0, sp, #132	; 0x84
 800b48a:	f002 f84e 	bl	800d52a <__match>
 800b48e:	2800      	cmp	r0, #0
 800b490:	d100      	bne.n	800b494 <_strtod_l+0x380>
 800b492:	e6a0      	b.n	800b1d6 <_strtod_l+0xc2>
 800b494:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	2b28      	cmp	r3, #40	; 0x28
 800b49a:	d10c      	bne.n	800b4b6 <_strtod_l+0x3a2>
 800b49c:	aa24      	add	r2, sp, #144	; 0x90
 800b49e:	498d      	ldr	r1, [pc, #564]	; (800b6d4 <_strtod_l+0x5c0>)
 800b4a0:	a821      	add	r0, sp, #132	; 0x84
 800b4a2:	f002 f856 	bl	800d552 <__hexnan>
 800b4a6:	2805      	cmp	r0, #5
 800b4a8:	d105      	bne.n	800b4b6 <_strtod_l+0x3a2>
 800b4aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800b4ac:	4a87      	ldr	r2, [pc, #540]	; (800b6cc <_strtod_l+0x5b8>)
 800b4ae:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800b4b0:	431a      	orrs	r2, r3
 800b4b2:	0017      	movs	r7, r2
 800b4b4:	e66f      	b.n	800b196 <_strtod_l+0x82>
 800b4b6:	4f88      	ldr	r7, [pc, #544]	; (800b6d8 <_strtod_l+0x5c4>)
 800b4b8:	e7d7      	b.n	800b46a <_strtod_l+0x356>
 800b4ba:	4663      	mov	r3, ip
 800b4bc:	1acb      	subs	r3, r1, r3
 800b4be:	9307      	str	r3, [sp, #28]
 800b4c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d101      	bne.n	800b4ca <_strtod_l+0x3b6>
 800b4c6:	9b05      	ldr	r3, [sp, #20]
 800b4c8:	930a      	str	r3, [sp, #40]	; 0x28
 800b4ca:	9c05      	ldr	r4, [sp, #20]
 800b4cc:	2c10      	cmp	r4, #16
 800b4ce:	dd00      	ble.n	800b4d2 <_strtod_l+0x3be>
 800b4d0:	2410      	movs	r4, #16
 800b4d2:	9808      	ldr	r0, [sp, #32]
 800b4d4:	f7f7 fb0a 	bl	8002aec <__aeabi_ui2d>
 800b4d8:	9b05      	ldr	r3, [sp, #20]
 800b4da:	0006      	movs	r6, r0
 800b4dc:	000f      	movs	r7, r1
 800b4de:	2b09      	cmp	r3, #9
 800b4e0:	dc15      	bgt.n	800b50e <_strtod_l+0x3fa>
 800b4e2:	9b07      	ldr	r3, [sp, #28]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d100      	bne.n	800b4ea <_strtod_l+0x3d6>
 800b4e8:	e655      	b.n	800b196 <_strtod_l+0x82>
 800b4ea:	9b07      	ldr	r3, [sp, #28]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	dc00      	bgt.n	800b4f2 <_strtod_l+0x3de>
 800b4f0:	e07d      	b.n	800b5ee <_strtod_l+0x4da>
 800b4f2:	2b16      	cmp	r3, #22
 800b4f4:	dc62      	bgt.n	800b5bc <_strtod_l+0x4a8>
 800b4f6:	00dc      	lsls	r4, r3, #3
 800b4f8:	4b78      	ldr	r3, [pc, #480]	; (800b6dc <_strtod_l+0x5c8>)
 800b4fa:	0032      	movs	r2, r6
 800b4fc:	1919      	adds	r1, r3, r4
 800b4fe:	003b      	movs	r3, r7
 800b500:	6808      	ldr	r0, [r1, #0]
 800b502:	6849      	ldr	r1, [r1, #4]
 800b504:	f7f6 fcac 	bl	8001e60 <__aeabi_dmul>
 800b508:	0006      	movs	r6, r0
 800b50a:	000f      	movs	r7, r1
 800b50c:	e643      	b.n	800b196 <_strtod_l+0x82>
 800b50e:	0022      	movs	r2, r4
 800b510:	4b72      	ldr	r3, [pc, #456]	; (800b6dc <_strtod_l+0x5c8>)
 800b512:	3a09      	subs	r2, #9
 800b514:	00d2      	lsls	r2, r2, #3
 800b516:	189b      	adds	r3, r3, r2
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	f7f6 fca0 	bl	8001e60 <__aeabi_dmul>
 800b520:	0006      	movs	r6, r0
 800b522:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b524:	000f      	movs	r7, r1
 800b526:	f7f7 fae1 	bl	8002aec <__aeabi_ui2d>
 800b52a:	000b      	movs	r3, r1
 800b52c:	0002      	movs	r2, r0
 800b52e:	0039      	movs	r1, r7
 800b530:	0030      	movs	r0, r6
 800b532:	f7f5 fd6f 	bl	8001014 <__aeabi_dadd>
 800b536:	9b05      	ldr	r3, [sp, #20]
 800b538:	0006      	movs	r6, r0
 800b53a:	000f      	movs	r7, r1
 800b53c:	2b0f      	cmp	r3, #15
 800b53e:	ddd0      	ble.n	800b4e2 <_strtod_l+0x3ce>
 800b540:	9b05      	ldr	r3, [sp, #20]
 800b542:	1b1c      	subs	r4, r3, r4
 800b544:	9b07      	ldr	r3, [sp, #28]
 800b546:	18e4      	adds	r4, r4, r3
 800b548:	2c00      	cmp	r4, #0
 800b54a:	dc00      	bgt.n	800b54e <_strtod_l+0x43a>
 800b54c:	e094      	b.n	800b678 <_strtod_l+0x564>
 800b54e:	230f      	movs	r3, #15
 800b550:	4023      	ands	r3, r4
 800b552:	d00a      	beq.n	800b56a <_strtod_l+0x456>
 800b554:	4961      	ldr	r1, [pc, #388]	; (800b6dc <_strtod_l+0x5c8>)
 800b556:	00db      	lsls	r3, r3, #3
 800b558:	18c9      	adds	r1, r1, r3
 800b55a:	0032      	movs	r2, r6
 800b55c:	6808      	ldr	r0, [r1, #0]
 800b55e:	6849      	ldr	r1, [r1, #4]
 800b560:	003b      	movs	r3, r7
 800b562:	f7f6 fc7d 	bl	8001e60 <__aeabi_dmul>
 800b566:	0006      	movs	r6, r0
 800b568:	000f      	movs	r7, r1
 800b56a:	230f      	movs	r3, #15
 800b56c:	439c      	bics	r4, r3
 800b56e:	d06e      	beq.n	800b64e <_strtod_l+0x53a>
 800b570:	3326      	adds	r3, #38	; 0x26
 800b572:	33ff      	adds	r3, #255	; 0xff
 800b574:	429c      	cmp	r4, r3
 800b576:	dd48      	ble.n	800b60a <_strtod_l+0x4f6>
 800b578:	2400      	movs	r4, #0
 800b57a:	9405      	str	r4, [sp, #20]
 800b57c:	940b      	str	r4, [sp, #44]	; 0x2c
 800b57e:	940a      	str	r4, [sp, #40]	; 0x28
 800b580:	2322      	movs	r3, #34	; 0x22
 800b582:	2600      	movs	r6, #0
 800b584:	9a04      	ldr	r2, [sp, #16]
 800b586:	4f51      	ldr	r7, [pc, #324]	; (800b6cc <_strtod_l+0x5b8>)
 800b588:	6013      	str	r3, [r2, #0]
 800b58a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b58c:	42b3      	cmp	r3, r6
 800b58e:	d100      	bne.n	800b592 <_strtod_l+0x47e>
 800b590:	e601      	b.n	800b196 <_strtod_l+0x82>
 800b592:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b594:	9804      	ldr	r0, [sp, #16]
 800b596:	f002 f950 	bl	800d83a <_Bfree>
 800b59a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b59c:	9804      	ldr	r0, [sp, #16]
 800b59e:	f002 f94c 	bl	800d83a <_Bfree>
 800b5a2:	9905      	ldr	r1, [sp, #20]
 800b5a4:	9804      	ldr	r0, [sp, #16]
 800b5a6:	f002 f948 	bl	800d83a <_Bfree>
 800b5aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b5ac:	9804      	ldr	r0, [sp, #16]
 800b5ae:	f002 f944 	bl	800d83a <_Bfree>
 800b5b2:	0021      	movs	r1, r4
 800b5b4:	9804      	ldr	r0, [sp, #16]
 800b5b6:	f002 f940 	bl	800d83a <_Bfree>
 800b5ba:	e5ec      	b.n	800b196 <_strtod_l+0x82>
 800b5bc:	2325      	movs	r3, #37	; 0x25
 800b5be:	9a05      	ldr	r2, [sp, #20]
 800b5c0:	1a9b      	subs	r3, r3, r2
 800b5c2:	9a07      	ldr	r2, [sp, #28]
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	dbbb      	blt.n	800b540 <_strtod_l+0x42c>
 800b5c8:	230f      	movs	r3, #15
 800b5ca:	9a05      	ldr	r2, [sp, #20]
 800b5cc:	4c43      	ldr	r4, [pc, #268]	; (800b6dc <_strtod_l+0x5c8>)
 800b5ce:	1a9d      	subs	r5, r3, r2
 800b5d0:	00e9      	lsls	r1, r5, #3
 800b5d2:	1861      	adds	r1, r4, r1
 800b5d4:	0032      	movs	r2, r6
 800b5d6:	6808      	ldr	r0, [r1, #0]
 800b5d8:	6849      	ldr	r1, [r1, #4]
 800b5da:	003b      	movs	r3, r7
 800b5dc:	f7f6 fc40 	bl	8001e60 <__aeabi_dmul>
 800b5e0:	9b07      	ldr	r3, [sp, #28]
 800b5e2:	1b5e      	subs	r6, r3, r5
 800b5e4:	00f6      	lsls	r6, r6, #3
 800b5e6:	19a6      	adds	r6, r4, r6
 800b5e8:	6832      	ldr	r2, [r6, #0]
 800b5ea:	6873      	ldr	r3, [r6, #4]
 800b5ec:	e78a      	b.n	800b504 <_strtod_l+0x3f0>
 800b5ee:	9b07      	ldr	r3, [sp, #28]
 800b5f0:	3316      	adds	r3, #22
 800b5f2:	dba5      	blt.n	800b540 <_strtod_l+0x42c>
 800b5f4:	9b07      	ldr	r3, [sp, #28]
 800b5f6:	0030      	movs	r0, r6
 800b5f8:	00da      	lsls	r2, r3, #3
 800b5fa:	4b38      	ldr	r3, [pc, #224]	; (800b6dc <_strtod_l+0x5c8>)
 800b5fc:	0039      	movs	r1, r7
 800b5fe:	1a9b      	subs	r3, r3, r2
 800b600:	681a      	ldr	r2, [r3, #0]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	f7f6 f822 	bl	800164c <__aeabi_ddiv>
 800b608:	e77e      	b.n	800b508 <_strtod_l+0x3f4>
 800b60a:	2300      	movs	r3, #0
 800b60c:	0030      	movs	r0, r6
 800b60e:	0039      	movs	r1, r7
 800b610:	001d      	movs	r5, r3
 800b612:	1124      	asrs	r4, r4, #4
 800b614:	2c01      	cmp	r4, #1
 800b616:	dc1d      	bgt.n	800b654 <_strtod_l+0x540>
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d001      	beq.n	800b620 <_strtod_l+0x50c>
 800b61c:	0006      	movs	r6, r0
 800b61e:	000f      	movs	r7, r1
 800b620:	4b2f      	ldr	r3, [pc, #188]	; (800b6e0 <_strtod_l+0x5cc>)
 800b622:	00ed      	lsls	r5, r5, #3
 800b624:	18ff      	adds	r7, r7, r3
 800b626:	4b2f      	ldr	r3, [pc, #188]	; (800b6e4 <_strtod_l+0x5d0>)
 800b628:	0032      	movs	r2, r6
 800b62a:	195d      	adds	r5, r3, r5
 800b62c:	6828      	ldr	r0, [r5, #0]
 800b62e:	6869      	ldr	r1, [r5, #4]
 800b630:	003b      	movs	r3, r7
 800b632:	f7f6 fc15 	bl	8001e60 <__aeabi_dmul>
 800b636:	4b25      	ldr	r3, [pc, #148]	; (800b6cc <_strtod_l+0x5b8>)
 800b638:	4a2b      	ldr	r2, [pc, #172]	; (800b6e8 <_strtod_l+0x5d4>)
 800b63a:	0006      	movs	r6, r0
 800b63c:	400b      	ands	r3, r1
 800b63e:	4293      	cmp	r3, r2
 800b640:	d89a      	bhi.n	800b578 <_strtod_l+0x464>
 800b642:	4a2a      	ldr	r2, [pc, #168]	; (800b6ec <_strtod_l+0x5d8>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d913      	bls.n	800b670 <_strtod_l+0x55c>
 800b648:	2601      	movs	r6, #1
 800b64a:	4f29      	ldr	r7, [pc, #164]	; (800b6f0 <_strtod_l+0x5dc>)
 800b64c:	4276      	negs	r6, r6
 800b64e:	2300      	movs	r3, #0
 800b650:	9306      	str	r3, [sp, #24]
 800b652:	e07b      	b.n	800b74c <_strtod_l+0x638>
 800b654:	2201      	movs	r2, #1
 800b656:	4214      	tst	r4, r2
 800b658:	d007      	beq.n	800b66a <_strtod_l+0x556>
 800b65a:	4a22      	ldr	r2, [pc, #136]	; (800b6e4 <_strtod_l+0x5d0>)
 800b65c:	00eb      	lsls	r3, r5, #3
 800b65e:	189b      	adds	r3, r3, r2
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	f7f6 fbfc 	bl	8001e60 <__aeabi_dmul>
 800b668:	2301      	movs	r3, #1
 800b66a:	3501      	adds	r5, #1
 800b66c:	1064      	asrs	r4, r4, #1
 800b66e:	e7d1      	b.n	800b614 <_strtod_l+0x500>
 800b670:	23d4      	movs	r3, #212	; 0xd4
 800b672:	049b      	lsls	r3, r3, #18
 800b674:	18cf      	adds	r7, r1, r3
 800b676:	e7ea      	b.n	800b64e <_strtod_l+0x53a>
 800b678:	2c00      	cmp	r4, #0
 800b67a:	d0e8      	beq.n	800b64e <_strtod_l+0x53a>
 800b67c:	230f      	movs	r3, #15
 800b67e:	4264      	negs	r4, r4
 800b680:	4023      	ands	r3, r4
 800b682:	d00a      	beq.n	800b69a <_strtod_l+0x586>
 800b684:	4a15      	ldr	r2, [pc, #84]	; (800b6dc <_strtod_l+0x5c8>)
 800b686:	00db      	lsls	r3, r3, #3
 800b688:	18d3      	adds	r3, r2, r3
 800b68a:	0030      	movs	r0, r6
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	0039      	movs	r1, r7
 800b692:	f7f5 ffdb 	bl	800164c <__aeabi_ddiv>
 800b696:	0006      	movs	r6, r0
 800b698:	000f      	movs	r7, r1
 800b69a:	1124      	asrs	r4, r4, #4
 800b69c:	d0d7      	beq.n	800b64e <_strtod_l+0x53a>
 800b69e:	2c1f      	cmp	r4, #31
 800b6a0:	dd28      	ble.n	800b6f4 <_strtod_l+0x5e0>
 800b6a2:	2400      	movs	r4, #0
 800b6a4:	9405      	str	r4, [sp, #20]
 800b6a6:	940b      	str	r4, [sp, #44]	; 0x2c
 800b6a8:	940a      	str	r4, [sp, #40]	; 0x28
 800b6aa:	2322      	movs	r3, #34	; 0x22
 800b6ac:	9a04      	ldr	r2, [sp, #16]
 800b6ae:	2600      	movs	r6, #0
 800b6b0:	6013      	str	r3, [r2, #0]
 800b6b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6b4:	2700      	movs	r7, #0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d000      	beq.n	800b6bc <_strtod_l+0x5a8>
 800b6ba:	e76a      	b.n	800b592 <_strtod_l+0x47e>
 800b6bc:	e56b      	b.n	800b196 <_strtod_l+0x82>
 800b6be:	46c0      	nop			; (mov r8, r8)
 800b6c0:	00004e1f 	.word	0x00004e1f
 800b6c4:	0800ef4d 	.word	0x0800ef4d
 800b6c8:	0800efdb 	.word	0x0800efdb
 800b6cc:	7ff00000 	.word	0x7ff00000
 800b6d0:	0800ef55 	.word	0x0800ef55
 800b6d4:	0800ef98 	.word	0x0800ef98
 800b6d8:	fff80000 	.word	0xfff80000
 800b6dc:	0800f080 	.word	0x0800f080
 800b6e0:	fcb00000 	.word	0xfcb00000
 800b6e4:	0800f058 	.word	0x0800f058
 800b6e8:	7ca00000 	.word	0x7ca00000
 800b6ec:	7c900000 	.word	0x7c900000
 800b6f0:	7fefffff 	.word	0x7fefffff
 800b6f4:	2310      	movs	r3, #16
 800b6f6:	4023      	ands	r3, r4
 800b6f8:	9306      	str	r3, [sp, #24]
 800b6fa:	d001      	beq.n	800b700 <_strtod_l+0x5ec>
 800b6fc:	236a      	movs	r3, #106	; 0x6a
 800b6fe:	9306      	str	r3, [sp, #24]
 800b700:	2300      	movs	r3, #0
 800b702:	0030      	movs	r0, r6
 800b704:	0039      	movs	r1, r7
 800b706:	001d      	movs	r5, r3
 800b708:	2c00      	cmp	r4, #0
 800b70a:	dd00      	ble.n	800b70e <_strtod_l+0x5fa>
 800b70c:	e10e      	b.n	800b92c <_strtod_l+0x818>
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d001      	beq.n	800b716 <_strtod_l+0x602>
 800b712:	0006      	movs	r6, r0
 800b714:	000f      	movs	r7, r1
 800b716:	9b06      	ldr	r3, [sp, #24]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d00f      	beq.n	800b73c <_strtod_l+0x628>
 800b71c:	236b      	movs	r3, #107	; 0x6b
 800b71e:	0079      	lsls	r1, r7, #1
 800b720:	0d49      	lsrs	r1, r1, #21
 800b722:	003a      	movs	r2, r7
 800b724:	1a5b      	subs	r3, r3, r1
 800b726:	2b00      	cmp	r3, #0
 800b728:	dd08      	ble.n	800b73c <_strtod_l+0x628>
 800b72a:	2b1f      	cmp	r3, #31
 800b72c:	dc00      	bgt.n	800b730 <_strtod_l+0x61c>
 800b72e:	e112      	b.n	800b956 <_strtod_l+0x842>
 800b730:	2600      	movs	r6, #0
 800b732:	2b34      	cmp	r3, #52	; 0x34
 800b734:	dc00      	bgt.n	800b738 <_strtod_l+0x624>
 800b736:	e107      	b.n	800b948 <_strtod_l+0x834>
 800b738:	27dc      	movs	r7, #220	; 0xdc
 800b73a:	04bf      	lsls	r7, r7, #18
 800b73c:	2200      	movs	r2, #0
 800b73e:	2300      	movs	r3, #0
 800b740:	0030      	movs	r0, r6
 800b742:	0039      	movs	r1, r7
 800b744:	f7f4 fe7c 	bl	8000440 <__aeabi_dcmpeq>
 800b748:	2800      	cmp	r0, #0
 800b74a:	d1aa      	bne.n	800b6a2 <_strtod_l+0x58e>
 800b74c:	9b08      	ldr	r3, [sp, #32]
 800b74e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b750:	9300      	str	r3, [sp, #0]
 800b752:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b754:	9b05      	ldr	r3, [sp, #20]
 800b756:	9804      	ldr	r0, [sp, #16]
 800b758:	f002 f8c6 	bl	800d8e8 <__s2b>
 800b75c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b75e:	2800      	cmp	r0, #0
 800b760:	d100      	bne.n	800b764 <_strtod_l+0x650>
 800b762:	e709      	b.n	800b578 <_strtod_l+0x464>
 800b764:	9b07      	ldr	r3, [sp, #28]
 800b766:	9a07      	ldr	r2, [sp, #28]
 800b768:	17db      	asrs	r3, r3, #31
 800b76a:	4252      	negs	r2, r2
 800b76c:	4013      	ands	r3, r2
 800b76e:	9315      	str	r3, [sp, #84]	; 0x54
 800b770:	9b07      	ldr	r3, [sp, #28]
 800b772:	2400      	movs	r4, #0
 800b774:	43db      	mvns	r3, r3
 800b776:	9a07      	ldr	r2, [sp, #28]
 800b778:	17db      	asrs	r3, r3, #31
 800b77a:	401a      	ands	r2, r3
 800b77c:	921c      	str	r2, [sp, #112]	; 0x70
 800b77e:	9405      	str	r4, [sp, #20]
 800b780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b782:	9804      	ldr	r0, [sp, #16]
 800b784:	6859      	ldr	r1, [r3, #4]
 800b786:	f002 f820 	bl	800d7ca <_Balloc>
 800b78a:	900a      	str	r0, [sp, #40]	; 0x28
 800b78c:	2800      	cmp	r0, #0
 800b78e:	d100      	bne.n	800b792 <_strtod_l+0x67e>
 800b790:	e6f6      	b.n	800b580 <_strtod_l+0x46c>
 800b792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b794:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b796:	691b      	ldr	r3, [r3, #16]
 800b798:	310c      	adds	r1, #12
 800b79a:	1c9a      	adds	r2, r3, #2
 800b79c:	0092      	lsls	r2, r2, #2
 800b79e:	300c      	adds	r0, #12
 800b7a0:	9308      	str	r3, [sp, #32]
 800b7a2:	f7fe fd8a 	bl	800a2ba <memcpy>
 800b7a6:	ab24      	add	r3, sp, #144	; 0x90
 800b7a8:	9301      	str	r3, [sp, #4]
 800b7aa:	ab23      	add	r3, sp, #140	; 0x8c
 800b7ac:	9300      	str	r3, [sp, #0]
 800b7ae:	0032      	movs	r2, r6
 800b7b0:	003b      	movs	r3, r7
 800b7b2:	9804      	ldr	r0, [sp, #16]
 800b7b4:	960e      	str	r6, [sp, #56]	; 0x38
 800b7b6:	970f      	str	r7, [sp, #60]	; 0x3c
 800b7b8:	f002 fb4a 	bl	800de50 <__d2b>
 800b7bc:	9022      	str	r0, [sp, #136]	; 0x88
 800b7be:	2800      	cmp	r0, #0
 800b7c0:	d100      	bne.n	800b7c4 <_strtod_l+0x6b0>
 800b7c2:	e6dd      	b.n	800b580 <_strtod_l+0x46c>
 800b7c4:	2101      	movs	r1, #1
 800b7c6:	9804      	ldr	r0, [sp, #16]
 800b7c8:	f002 f915 	bl	800d9f6 <__i2b>
 800b7cc:	9005      	str	r0, [sp, #20]
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	d100      	bne.n	800b7d4 <_strtod_l+0x6c0>
 800b7d2:	e6d5      	b.n	800b580 <_strtod_l+0x46c>
 800b7d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	da00      	bge.n	800b7dc <_strtod_l+0x6c8>
 800b7da:	e0c1      	b.n	800b960 <_strtod_l+0x84c>
 800b7dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b7de:	189d      	adds	r5, r3, r2
 800b7e0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b7e2:	4694      	mov	ip, r2
 800b7e4:	9906      	ldr	r1, [sp, #24]
 800b7e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b7e8:	1a5b      	subs	r3, r3, r1
 800b7ea:	2136      	movs	r1, #54	; 0x36
 800b7ec:	189b      	adds	r3, r3, r2
 800b7ee:	1a8a      	subs	r2, r1, r2
 800b7f0:	49b2      	ldr	r1, [pc, #712]	; (800babc <_strtod_l+0x9a8>)
 800b7f2:	3b01      	subs	r3, #1
 800b7f4:	2001      	movs	r0, #1
 800b7f6:	428b      	cmp	r3, r1
 800b7f8:	db00      	blt.n	800b7fc <_strtod_l+0x6e8>
 800b7fa:	e0bd      	b.n	800b978 <_strtod_l+0x864>
 800b7fc:	1ac9      	subs	r1, r1, r3
 800b7fe:	1a52      	subs	r2, r2, r1
 800b800:	291f      	cmp	r1, #31
 800b802:	dd00      	ble.n	800b806 <_strtod_l+0x6f2>
 800b804:	e0b1      	b.n	800b96a <_strtod_l+0x856>
 800b806:	4088      	lsls	r0, r1
 800b808:	2300      	movs	r3, #0
 800b80a:	9014      	str	r0, [sp, #80]	; 0x50
 800b80c:	9310      	str	r3, [sp, #64]	; 0x40
 800b80e:	18ab      	adds	r3, r5, r2
 800b810:	9308      	str	r3, [sp, #32]
 800b812:	0013      	movs	r3, r2
 800b814:	9a06      	ldr	r2, [sp, #24]
 800b816:	4463      	add	r3, ip
 800b818:	18d3      	adds	r3, r2, r3
 800b81a:	9a08      	ldr	r2, [sp, #32]
 800b81c:	930c      	str	r3, [sp, #48]	; 0x30
 800b81e:	002b      	movs	r3, r5
 800b820:	4295      	cmp	r5, r2
 800b822:	dd00      	ble.n	800b826 <_strtod_l+0x712>
 800b824:	0013      	movs	r3, r2
 800b826:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b828:	4293      	cmp	r3, r2
 800b82a:	dd00      	ble.n	800b82e <_strtod_l+0x71a>
 800b82c:	0013      	movs	r3, r2
 800b82e:	2b00      	cmp	r3, #0
 800b830:	dd06      	ble.n	800b840 <_strtod_l+0x72c>
 800b832:	9a08      	ldr	r2, [sp, #32]
 800b834:	1aed      	subs	r5, r5, r3
 800b836:	1ad2      	subs	r2, r2, r3
 800b838:	9208      	str	r2, [sp, #32]
 800b83a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b83c:	1ad2      	subs	r2, r2, r3
 800b83e:	920c      	str	r2, [sp, #48]	; 0x30
 800b840:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b842:	2b00      	cmp	r3, #0
 800b844:	d017      	beq.n	800b876 <_strtod_l+0x762>
 800b846:	001a      	movs	r2, r3
 800b848:	9905      	ldr	r1, [sp, #20]
 800b84a:	9804      	ldr	r0, [sp, #16]
 800b84c:	f002 f96c 	bl	800db28 <__pow5mult>
 800b850:	9005      	str	r0, [sp, #20]
 800b852:	2800      	cmp	r0, #0
 800b854:	d100      	bne.n	800b858 <_strtod_l+0x744>
 800b856:	e693      	b.n	800b580 <_strtod_l+0x46c>
 800b858:	0001      	movs	r1, r0
 800b85a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b85c:	9804      	ldr	r0, [sp, #16]
 800b85e:	f002 f8d3 	bl	800da08 <__multiply>
 800b862:	9012      	str	r0, [sp, #72]	; 0x48
 800b864:	2800      	cmp	r0, #0
 800b866:	d100      	bne.n	800b86a <_strtod_l+0x756>
 800b868:	e68a      	b.n	800b580 <_strtod_l+0x46c>
 800b86a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b86c:	9804      	ldr	r0, [sp, #16]
 800b86e:	f001 ffe4 	bl	800d83a <_Bfree>
 800b872:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b874:	9322      	str	r3, [sp, #136]	; 0x88
 800b876:	9b08      	ldr	r3, [sp, #32]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	dd00      	ble.n	800b87e <_strtod_l+0x76a>
 800b87c:	e07f      	b.n	800b97e <_strtod_l+0x86a>
 800b87e:	9b07      	ldr	r3, [sp, #28]
 800b880:	2b00      	cmp	r3, #0
 800b882:	dd08      	ble.n	800b896 <_strtod_l+0x782>
 800b884:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b886:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b888:	9804      	ldr	r0, [sp, #16]
 800b88a:	f002 f94d 	bl	800db28 <__pow5mult>
 800b88e:	900a      	str	r0, [sp, #40]	; 0x28
 800b890:	2800      	cmp	r0, #0
 800b892:	d100      	bne.n	800b896 <_strtod_l+0x782>
 800b894:	e674      	b.n	800b580 <_strtod_l+0x46c>
 800b896:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b898:	2b00      	cmp	r3, #0
 800b89a:	dd08      	ble.n	800b8ae <_strtod_l+0x79a>
 800b89c:	001a      	movs	r2, r3
 800b89e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b8a0:	9804      	ldr	r0, [sp, #16]
 800b8a2:	f002 f993 	bl	800dbcc <__lshift>
 800b8a6:	900a      	str	r0, [sp, #40]	; 0x28
 800b8a8:	2800      	cmp	r0, #0
 800b8aa:	d100      	bne.n	800b8ae <_strtod_l+0x79a>
 800b8ac:	e668      	b.n	800b580 <_strtod_l+0x46c>
 800b8ae:	2d00      	cmp	r5, #0
 800b8b0:	dd08      	ble.n	800b8c4 <_strtod_l+0x7b0>
 800b8b2:	002a      	movs	r2, r5
 800b8b4:	9905      	ldr	r1, [sp, #20]
 800b8b6:	9804      	ldr	r0, [sp, #16]
 800b8b8:	f002 f988 	bl	800dbcc <__lshift>
 800b8bc:	9005      	str	r0, [sp, #20]
 800b8be:	2800      	cmp	r0, #0
 800b8c0:	d100      	bne.n	800b8c4 <_strtod_l+0x7b0>
 800b8c2:	e65d      	b.n	800b580 <_strtod_l+0x46c>
 800b8c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8c6:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b8c8:	9804      	ldr	r0, [sp, #16]
 800b8ca:	f002 f9eb 	bl	800dca4 <__mdiff>
 800b8ce:	1e04      	subs	r4, r0, #0
 800b8d0:	d100      	bne.n	800b8d4 <_strtod_l+0x7c0>
 800b8d2:	e655      	b.n	800b580 <_strtod_l+0x46c>
 800b8d4:	2500      	movs	r5, #0
 800b8d6:	68c3      	ldr	r3, [r0, #12]
 800b8d8:	9905      	ldr	r1, [sp, #20]
 800b8da:	60c5      	str	r5, [r0, #12]
 800b8dc:	9312      	str	r3, [sp, #72]	; 0x48
 800b8de:	f002 f9c7 	bl	800dc70 <__mcmp>
 800b8e2:	42a8      	cmp	r0, r5
 800b8e4:	da55      	bge.n	800b992 <_strtod_l+0x87e>
 800b8e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b8e8:	42ab      	cmp	r3, r5
 800b8ea:	d11b      	bne.n	800b924 <_strtod_l+0x810>
 800b8ec:	42ae      	cmp	r6, r5
 800b8ee:	d119      	bne.n	800b924 <_strtod_l+0x810>
 800b8f0:	033b      	lsls	r3, r7, #12
 800b8f2:	42ab      	cmp	r3, r5
 800b8f4:	d116      	bne.n	800b924 <_strtod_l+0x810>
 800b8f6:	22d6      	movs	r2, #214	; 0xd6
 800b8f8:	4b71      	ldr	r3, [pc, #452]	; (800bac0 <_strtod_l+0x9ac>)
 800b8fa:	04d2      	lsls	r2, r2, #19
 800b8fc:	403b      	ands	r3, r7
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d910      	bls.n	800b924 <_strtod_l+0x810>
 800b902:	6963      	ldr	r3, [r4, #20]
 800b904:	42ab      	cmp	r3, r5
 800b906:	d102      	bne.n	800b90e <_strtod_l+0x7fa>
 800b908:	6923      	ldr	r3, [r4, #16]
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	dd0a      	ble.n	800b924 <_strtod_l+0x810>
 800b90e:	0021      	movs	r1, r4
 800b910:	2201      	movs	r2, #1
 800b912:	9804      	ldr	r0, [sp, #16]
 800b914:	f002 f95a 	bl	800dbcc <__lshift>
 800b918:	9905      	ldr	r1, [sp, #20]
 800b91a:	0004      	movs	r4, r0
 800b91c:	f002 f9a8 	bl	800dc70 <__mcmp>
 800b920:	2800      	cmp	r0, #0
 800b922:	dc6b      	bgt.n	800b9fc <_strtod_l+0x8e8>
 800b924:	9b06      	ldr	r3, [sp, #24]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d178      	bne.n	800ba1c <_strtod_l+0x908>
 800b92a:	e632      	b.n	800b592 <_strtod_l+0x47e>
 800b92c:	2201      	movs	r2, #1
 800b92e:	4214      	tst	r4, r2
 800b930:	d007      	beq.n	800b942 <_strtod_l+0x82e>
 800b932:	4a64      	ldr	r2, [pc, #400]	; (800bac4 <_strtod_l+0x9b0>)
 800b934:	00eb      	lsls	r3, r5, #3
 800b936:	18d3      	adds	r3, r2, r3
 800b938:	681a      	ldr	r2, [r3, #0]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	f7f6 fa90 	bl	8001e60 <__aeabi_dmul>
 800b940:	2301      	movs	r3, #1
 800b942:	3501      	adds	r5, #1
 800b944:	1064      	asrs	r4, r4, #1
 800b946:	e6df      	b.n	800b708 <_strtod_l+0x5f4>
 800b948:	2101      	movs	r1, #1
 800b94a:	3b20      	subs	r3, #32
 800b94c:	4249      	negs	r1, r1
 800b94e:	4099      	lsls	r1, r3
 800b950:	400a      	ands	r2, r1
 800b952:	0017      	movs	r7, r2
 800b954:	e6f2      	b.n	800b73c <_strtod_l+0x628>
 800b956:	2201      	movs	r2, #1
 800b958:	4252      	negs	r2, r2
 800b95a:	409a      	lsls	r2, r3
 800b95c:	4016      	ands	r6, r2
 800b95e:	e6ed      	b.n	800b73c <_strtod_l+0x628>
 800b960:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b962:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b964:	1ad2      	subs	r2, r2, r3
 800b966:	4694      	mov	ip, r2
 800b968:	e73c      	b.n	800b7e4 <_strtod_l+0x6d0>
 800b96a:	4957      	ldr	r1, [pc, #348]	; (800bac8 <_strtod_l+0x9b4>)
 800b96c:	1acb      	subs	r3, r1, r3
 800b96e:	0001      	movs	r1, r0
 800b970:	4099      	lsls	r1, r3
 800b972:	9110      	str	r1, [sp, #64]	; 0x40
 800b974:	9014      	str	r0, [sp, #80]	; 0x50
 800b976:	e74a      	b.n	800b80e <_strtod_l+0x6fa>
 800b978:	2300      	movs	r3, #0
 800b97a:	9310      	str	r3, [sp, #64]	; 0x40
 800b97c:	e7fa      	b.n	800b974 <_strtod_l+0x860>
 800b97e:	9a08      	ldr	r2, [sp, #32]
 800b980:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b982:	9804      	ldr	r0, [sp, #16]
 800b984:	f002 f922 	bl	800dbcc <__lshift>
 800b988:	9022      	str	r0, [sp, #136]	; 0x88
 800b98a:	2800      	cmp	r0, #0
 800b98c:	d000      	beq.n	800b990 <_strtod_l+0x87c>
 800b98e:	e776      	b.n	800b87e <_strtod_l+0x76a>
 800b990:	e5f6      	b.n	800b580 <_strtod_l+0x46c>
 800b992:	970c      	str	r7, [sp, #48]	; 0x30
 800b994:	2800      	cmp	r0, #0
 800b996:	d000      	beq.n	800b99a <_strtod_l+0x886>
 800b998:	e0a0      	b.n	800badc <_strtod_l+0x9c8>
 800b99a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b99c:	033b      	lsls	r3, r7, #12
 800b99e:	0b1b      	lsrs	r3, r3, #12
 800b9a0:	2a00      	cmp	r2, #0
 800b9a2:	d027      	beq.n	800b9f4 <_strtod_l+0x8e0>
 800b9a4:	4a49      	ldr	r2, [pc, #292]	; (800bacc <_strtod_l+0x9b8>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d157      	bne.n	800ba5a <_strtod_l+0x946>
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	9b06      	ldr	r3, [sp, #24]
 800b9ae:	4252      	negs	r2, r2
 800b9b0:	0031      	movs	r1, r6
 800b9b2:	0010      	movs	r0, r2
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d00b      	beq.n	800b9d0 <_strtod_l+0x8bc>
 800b9b8:	25d4      	movs	r5, #212	; 0xd4
 800b9ba:	4b41      	ldr	r3, [pc, #260]	; (800bac0 <_strtod_l+0x9ac>)
 800b9bc:	04ed      	lsls	r5, r5, #19
 800b9be:	403b      	ands	r3, r7
 800b9c0:	0010      	movs	r0, r2
 800b9c2:	42ab      	cmp	r3, r5
 800b9c4:	d804      	bhi.n	800b9d0 <_strtod_l+0x8bc>
 800b9c6:	306c      	adds	r0, #108	; 0x6c
 800b9c8:	0d1b      	lsrs	r3, r3, #20
 800b9ca:	1ac3      	subs	r3, r0, r3
 800b9cc:	409a      	lsls	r2, r3
 800b9ce:	0010      	movs	r0, r2
 800b9d0:	4281      	cmp	r1, r0
 800b9d2:	d142      	bne.n	800ba5a <_strtod_l+0x946>
 800b9d4:	4b3e      	ldr	r3, [pc, #248]	; (800bad0 <_strtod_l+0x9bc>)
 800b9d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d102      	bne.n	800b9e2 <_strtod_l+0x8ce>
 800b9dc:	1c4b      	adds	r3, r1, #1
 800b9de:	d100      	bne.n	800b9e2 <_strtod_l+0x8ce>
 800b9e0:	e5ce      	b.n	800b580 <_strtod_l+0x46c>
 800b9e2:	4b37      	ldr	r3, [pc, #220]	; (800bac0 <_strtod_l+0x9ac>)
 800b9e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9e6:	2600      	movs	r6, #0
 800b9e8:	401a      	ands	r2, r3
 800b9ea:	0013      	movs	r3, r2
 800b9ec:	2280      	movs	r2, #128	; 0x80
 800b9ee:	0352      	lsls	r2, r2, #13
 800b9f0:	189f      	adds	r7, r3, r2
 800b9f2:	e797      	b.n	800b924 <_strtod_l+0x810>
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d130      	bne.n	800ba5a <_strtod_l+0x946>
 800b9f8:	2e00      	cmp	r6, #0
 800b9fa:	d12e      	bne.n	800ba5a <_strtod_l+0x946>
 800b9fc:	9906      	ldr	r1, [sp, #24]
 800b9fe:	003b      	movs	r3, r7
 800ba00:	4a2f      	ldr	r2, [pc, #188]	; (800bac0 <_strtod_l+0x9ac>)
 800ba02:	2900      	cmp	r1, #0
 800ba04:	d020      	beq.n	800ba48 <_strtod_l+0x934>
 800ba06:	0011      	movs	r1, r2
 800ba08:	20d6      	movs	r0, #214	; 0xd6
 800ba0a:	4039      	ands	r1, r7
 800ba0c:	04c0      	lsls	r0, r0, #19
 800ba0e:	4281      	cmp	r1, r0
 800ba10:	dc1a      	bgt.n	800ba48 <_strtod_l+0x934>
 800ba12:	23dc      	movs	r3, #220	; 0xdc
 800ba14:	049b      	lsls	r3, r3, #18
 800ba16:	4299      	cmp	r1, r3
 800ba18:	dc00      	bgt.n	800ba1c <_strtod_l+0x908>
 800ba1a:	e646      	b.n	800b6aa <_strtod_l+0x596>
 800ba1c:	4b2d      	ldr	r3, [pc, #180]	; (800bad4 <_strtod_l+0x9c0>)
 800ba1e:	0030      	movs	r0, r6
 800ba20:	931b      	str	r3, [sp, #108]	; 0x6c
 800ba22:	2300      	movs	r3, #0
 800ba24:	931a      	str	r3, [sp, #104]	; 0x68
 800ba26:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ba28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba2a:	0039      	movs	r1, r7
 800ba2c:	f7f6 fa18 	bl	8001e60 <__aeabi_dmul>
 800ba30:	0006      	movs	r6, r0
 800ba32:	000f      	movs	r7, r1
 800ba34:	1e0b      	subs	r3, r1, #0
 800ba36:	d000      	beq.n	800ba3a <_strtod_l+0x926>
 800ba38:	e5ab      	b.n	800b592 <_strtod_l+0x47e>
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	d000      	beq.n	800ba40 <_strtod_l+0x92c>
 800ba3e:	e5a8      	b.n	800b592 <_strtod_l+0x47e>
 800ba40:	9a04      	ldr	r2, [sp, #16]
 800ba42:	3322      	adds	r3, #34	; 0x22
 800ba44:	6013      	str	r3, [r2, #0]
 800ba46:	e5a4      	b.n	800b592 <_strtod_l+0x47e>
 800ba48:	2601      	movs	r6, #1
 800ba4a:	4013      	ands	r3, r2
 800ba4c:	4a22      	ldr	r2, [pc, #136]	; (800bad8 <_strtod_l+0x9c4>)
 800ba4e:	4276      	negs	r6, r6
 800ba50:	189b      	adds	r3, r3, r2
 800ba52:	4a1e      	ldr	r2, [pc, #120]	; (800bacc <_strtod_l+0x9b8>)
 800ba54:	431a      	orrs	r2, r3
 800ba56:	0017      	movs	r7, r2
 800ba58:	e764      	b.n	800b924 <_strtod_l+0x810>
 800ba5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d015      	beq.n	800ba8c <_strtod_l+0x978>
 800ba60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba62:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ba64:	4213      	tst	r3, r2
 800ba66:	d100      	bne.n	800ba6a <_strtod_l+0x956>
 800ba68:	e75c      	b.n	800b924 <_strtod_l+0x810>
 800ba6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba6c:	9a06      	ldr	r2, [sp, #24]
 800ba6e:	0030      	movs	r0, r6
 800ba70:	0039      	movs	r1, r7
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d00f      	beq.n	800ba96 <_strtod_l+0x982>
 800ba76:	f7ff fb35 	bl	800b0e4 <sulp>
 800ba7a:	0002      	movs	r2, r0
 800ba7c:	000b      	movs	r3, r1
 800ba7e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ba80:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ba82:	f7f5 fac7 	bl	8001014 <__aeabi_dadd>
 800ba86:	0006      	movs	r6, r0
 800ba88:	000f      	movs	r7, r1
 800ba8a:	e74b      	b.n	800b924 <_strtod_l+0x810>
 800ba8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba8e:	4233      	tst	r3, r6
 800ba90:	d100      	bne.n	800ba94 <_strtod_l+0x980>
 800ba92:	e747      	b.n	800b924 <_strtod_l+0x810>
 800ba94:	e7e9      	b.n	800ba6a <_strtod_l+0x956>
 800ba96:	f7ff fb25 	bl	800b0e4 <sulp>
 800ba9a:	0002      	movs	r2, r0
 800ba9c:	000b      	movs	r3, r1
 800ba9e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800baa0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800baa2:	f7f6 fc4f 	bl	8002344 <__aeabi_dsub>
 800baa6:	2200      	movs	r2, #0
 800baa8:	2300      	movs	r3, #0
 800baaa:	0006      	movs	r6, r0
 800baac:	000f      	movs	r7, r1
 800baae:	f7f4 fcc7 	bl	8000440 <__aeabi_dcmpeq>
 800bab2:	2800      	cmp	r0, #0
 800bab4:	d000      	beq.n	800bab8 <_strtod_l+0x9a4>
 800bab6:	e5f8      	b.n	800b6aa <_strtod_l+0x596>
 800bab8:	e734      	b.n	800b924 <_strtod_l+0x810>
 800baba:	46c0      	nop			; (mov r8, r8)
 800babc:	fffffc02 	.word	0xfffffc02
 800bac0:	7ff00000 	.word	0x7ff00000
 800bac4:	0800efb0 	.word	0x0800efb0
 800bac8:	fffffbe2 	.word	0xfffffbe2
 800bacc:	000fffff 	.word	0x000fffff
 800bad0:	7fefffff 	.word	0x7fefffff
 800bad4:	39500000 	.word	0x39500000
 800bad8:	fff00000 	.word	0xfff00000
 800badc:	9905      	ldr	r1, [sp, #20]
 800bade:	0020      	movs	r0, r4
 800bae0:	f002 fa0a 	bl	800def8 <__ratio>
 800bae4:	2380      	movs	r3, #128	; 0x80
 800bae6:	2200      	movs	r2, #0
 800bae8:	05db      	lsls	r3, r3, #23
 800baea:	9008      	str	r0, [sp, #32]
 800baec:	9109      	str	r1, [sp, #36]	; 0x24
 800baee:	f7f4 fcb7 	bl	8000460 <__aeabi_dcmple>
 800baf2:	2800      	cmp	r0, #0
 800baf4:	d100      	bne.n	800baf8 <_strtod_l+0x9e4>
 800baf6:	e07f      	b.n	800bbf8 <_strtod_l+0xae4>
 800baf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d04b      	beq.n	800bb96 <_strtod_l+0xa82>
 800bafe:	2200      	movs	r2, #0
 800bb00:	4b8a      	ldr	r3, [pc, #552]	; (800bd2c <_strtod_l+0xc18>)
 800bb02:	9210      	str	r2, [sp, #64]	; 0x40
 800bb04:	9311      	str	r3, [sp, #68]	; 0x44
 800bb06:	4b89      	ldr	r3, [pc, #548]	; (800bd2c <_strtod_l+0xc18>)
 800bb08:	9308      	str	r3, [sp, #32]
 800bb0a:	4a89      	ldr	r2, [pc, #548]	; (800bd30 <_strtod_l+0xc1c>)
 800bb0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb0e:	4013      	ands	r3, r2
 800bb10:	9314      	str	r3, [sp, #80]	; 0x50
 800bb12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bb14:	4b87      	ldr	r3, [pc, #540]	; (800bd34 <_strtod_l+0xc20>)
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d000      	beq.n	800bb1c <_strtod_l+0xa08>
 800bb1a:	e0ba      	b.n	800bc92 <_strtod_l+0xb7e>
 800bb1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb20:	921a      	str	r2, [sp, #104]	; 0x68
 800bb22:	931b      	str	r3, [sp, #108]	; 0x6c
 800bb24:	4a84      	ldr	r2, [pc, #528]	; (800bd38 <_strtod_l+0xc24>)
 800bb26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb28:	4694      	mov	ip, r2
 800bb2a:	4463      	add	r3, ip
 800bb2c:	001f      	movs	r7, r3
 800bb2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bb30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb32:	0030      	movs	r0, r6
 800bb34:	0039      	movs	r1, r7
 800bb36:	920c      	str	r2, [sp, #48]	; 0x30
 800bb38:	930d      	str	r3, [sp, #52]	; 0x34
 800bb3a:	f002 f917 	bl	800dd6c <__ulp>
 800bb3e:	0002      	movs	r2, r0
 800bb40:	000b      	movs	r3, r1
 800bb42:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bb44:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bb46:	f7f6 f98b 	bl	8001e60 <__aeabi_dmul>
 800bb4a:	0032      	movs	r2, r6
 800bb4c:	003b      	movs	r3, r7
 800bb4e:	f7f5 fa61 	bl	8001014 <__aeabi_dadd>
 800bb52:	4a77      	ldr	r2, [pc, #476]	; (800bd30 <_strtod_l+0xc1c>)
 800bb54:	4b79      	ldr	r3, [pc, #484]	; (800bd3c <_strtod_l+0xc28>)
 800bb56:	0006      	movs	r6, r0
 800bb58:	400a      	ands	r2, r1
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d964      	bls.n	800bc28 <_strtod_l+0xb14>
 800bb5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb60:	4a77      	ldr	r2, [pc, #476]	; (800bd40 <_strtod_l+0xc2c>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d103      	bne.n	800bb6e <_strtod_l+0xa5a>
 800bb66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb68:	3301      	adds	r3, #1
 800bb6a:	d100      	bne.n	800bb6e <_strtod_l+0xa5a>
 800bb6c:	e508      	b.n	800b580 <_strtod_l+0x46c>
 800bb6e:	2601      	movs	r6, #1
 800bb70:	4f73      	ldr	r7, [pc, #460]	; (800bd40 <_strtod_l+0xc2c>)
 800bb72:	4276      	negs	r6, r6
 800bb74:	9922      	ldr	r1, [sp, #136]	; 0x88
 800bb76:	9804      	ldr	r0, [sp, #16]
 800bb78:	f001 fe5f 	bl	800d83a <_Bfree>
 800bb7c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bb7e:	9804      	ldr	r0, [sp, #16]
 800bb80:	f001 fe5b 	bl	800d83a <_Bfree>
 800bb84:	9905      	ldr	r1, [sp, #20]
 800bb86:	9804      	ldr	r0, [sp, #16]
 800bb88:	f001 fe57 	bl	800d83a <_Bfree>
 800bb8c:	0021      	movs	r1, r4
 800bb8e:	9804      	ldr	r0, [sp, #16]
 800bb90:	f001 fe53 	bl	800d83a <_Bfree>
 800bb94:	e5f4      	b.n	800b780 <_strtod_l+0x66c>
 800bb96:	2e00      	cmp	r6, #0
 800bb98:	d11e      	bne.n	800bbd8 <_strtod_l+0xac4>
 800bb9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb9c:	031b      	lsls	r3, r3, #12
 800bb9e:	d121      	bne.n	800bbe4 <_strtod_l+0xad0>
 800bba0:	9808      	ldr	r0, [sp, #32]
 800bba2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bba4:	2200      	movs	r2, #0
 800bba6:	4b61      	ldr	r3, [pc, #388]	; (800bd2c <_strtod_l+0xc18>)
 800bba8:	f7f4 fc50 	bl	800044c <__aeabi_dcmplt>
 800bbac:	2800      	cmp	r0, #0
 800bbae:	d11f      	bne.n	800bbf0 <_strtod_l+0xadc>
 800bbb0:	9808      	ldr	r0, [sp, #32]
 800bbb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	4b63      	ldr	r3, [pc, #396]	; (800bd44 <_strtod_l+0xc30>)
 800bbb8:	f7f6 f952 	bl	8001e60 <__aeabi_dmul>
 800bbbc:	0005      	movs	r5, r0
 800bbbe:	9108      	str	r1, [sp, #32]
 800bbc0:	2280      	movs	r2, #128	; 0x80
 800bbc2:	0612      	lsls	r2, r2, #24
 800bbc4:	4694      	mov	ip, r2
 800bbc6:	9b08      	ldr	r3, [sp, #32]
 800bbc8:	951e      	str	r5, [sp, #120]	; 0x78
 800bbca:	4463      	add	r3, ip
 800bbcc:	931f      	str	r3, [sp, #124]	; 0x7c
 800bbce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bbd0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bbd2:	9210      	str	r2, [sp, #64]	; 0x40
 800bbd4:	9311      	str	r3, [sp, #68]	; 0x44
 800bbd6:	e798      	b.n	800bb0a <_strtod_l+0x9f6>
 800bbd8:	2e01      	cmp	r6, #1
 800bbda:	d103      	bne.n	800bbe4 <_strtod_l+0xad0>
 800bbdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d100      	bne.n	800bbe4 <_strtod_l+0xad0>
 800bbe2:	e562      	b.n	800b6aa <_strtod_l+0x596>
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	4b58      	ldr	r3, [pc, #352]	; (800bd48 <_strtod_l+0xc34>)
 800bbe8:	2500      	movs	r5, #0
 800bbea:	9210      	str	r2, [sp, #64]	; 0x40
 800bbec:	9311      	str	r3, [sp, #68]	; 0x44
 800bbee:	e78a      	b.n	800bb06 <_strtod_l+0x9f2>
 800bbf0:	4b54      	ldr	r3, [pc, #336]	; (800bd44 <_strtod_l+0xc30>)
 800bbf2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800bbf4:	9308      	str	r3, [sp, #32]
 800bbf6:	e7e3      	b.n	800bbc0 <_strtod_l+0xaac>
 800bbf8:	4b52      	ldr	r3, [pc, #328]	; (800bd44 <_strtod_l+0xc30>)
 800bbfa:	9808      	ldr	r0, [sp, #32]
 800bbfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f7f6 f92e 	bl	8001e60 <__aeabi_dmul>
 800bc04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bc06:	0005      	movs	r5, r0
 800bc08:	9108      	str	r1, [sp, #32]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d107      	bne.n	800bc1e <_strtod_l+0xb0a>
 800bc0e:	2380      	movs	r3, #128	; 0x80
 800bc10:	061b      	lsls	r3, r3, #24
 800bc12:	18cb      	adds	r3, r1, r3
 800bc14:	9016      	str	r0, [sp, #88]	; 0x58
 800bc16:	9317      	str	r3, [sp, #92]	; 0x5c
 800bc18:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bc1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc1c:	e7d9      	b.n	800bbd2 <_strtod_l+0xabe>
 800bc1e:	0002      	movs	r2, r0
 800bc20:	9b08      	ldr	r3, [sp, #32]
 800bc22:	9216      	str	r2, [sp, #88]	; 0x58
 800bc24:	9317      	str	r3, [sp, #92]	; 0x5c
 800bc26:	e7f7      	b.n	800bc18 <_strtod_l+0xb04>
 800bc28:	23d4      	movs	r3, #212	; 0xd4
 800bc2a:	049b      	lsls	r3, r3, #18
 800bc2c:	18cf      	adds	r7, r1, r3
 800bc2e:	9b06      	ldr	r3, [sp, #24]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d19f      	bne.n	800bb74 <_strtod_l+0xa60>
 800bc34:	4b3e      	ldr	r3, [pc, #248]	; (800bd30 <_strtod_l+0xc1c>)
 800bc36:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bc38:	970c      	str	r7, [sp, #48]	; 0x30
 800bc3a:	403b      	ands	r3, r7
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d199      	bne.n	800bb74 <_strtod_l+0xa60>
 800bc40:	9908      	ldr	r1, [sp, #32]
 800bc42:	0028      	movs	r0, r5
 800bc44:	f7f6 fee2 	bl	8002a0c <__aeabi_d2iz>
 800bc48:	f7f6 ff16 	bl	8002a78 <__aeabi_i2d>
 800bc4c:	000b      	movs	r3, r1
 800bc4e:	0002      	movs	r2, r0
 800bc50:	9908      	ldr	r1, [sp, #32]
 800bc52:	0028      	movs	r0, r5
 800bc54:	f7f6 fb76 	bl	8002344 <__aeabi_dsub>
 800bc58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bc5a:	9008      	str	r0, [sp, #32]
 800bc5c:	9109      	str	r1, [sp, #36]	; 0x24
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d104      	bne.n	800bc6c <_strtod_l+0xb58>
 800bc62:	2e00      	cmp	r6, #0
 800bc64:	d102      	bne.n	800bc6c <_strtod_l+0xb58>
 800bc66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc68:	031b      	lsls	r3, r3, #12
 800bc6a:	d058      	beq.n	800bd1e <_strtod_l+0xc0a>
 800bc6c:	9808      	ldr	r0, [sp, #32]
 800bc6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc70:	4a36      	ldr	r2, [pc, #216]	; (800bd4c <_strtod_l+0xc38>)
 800bc72:	4b37      	ldr	r3, [pc, #220]	; (800bd50 <_strtod_l+0xc3c>)
 800bc74:	f7f4 fbea 	bl	800044c <__aeabi_dcmplt>
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	d000      	beq.n	800bc7e <_strtod_l+0xb6a>
 800bc7c:	e489      	b.n	800b592 <_strtod_l+0x47e>
 800bc7e:	9808      	ldr	r0, [sp, #32]
 800bc80:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc82:	4a34      	ldr	r2, [pc, #208]	; (800bd54 <_strtod_l+0xc40>)
 800bc84:	4b2f      	ldr	r3, [pc, #188]	; (800bd44 <_strtod_l+0xc30>)
 800bc86:	f7f4 fbf5 	bl	8000474 <__aeabi_dcmpgt>
 800bc8a:	2800      	cmp	r0, #0
 800bc8c:	d100      	bne.n	800bc90 <_strtod_l+0xb7c>
 800bc8e:	e771      	b.n	800bb74 <_strtod_l+0xa60>
 800bc90:	e47f      	b.n	800b592 <_strtod_l+0x47e>
 800bc92:	9b06      	ldr	r3, [sp, #24]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d02a      	beq.n	800bcee <_strtod_l+0xbda>
 800bc98:	23d4      	movs	r3, #212	; 0xd4
 800bc9a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bc9c:	04db      	lsls	r3, r3, #19
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d825      	bhi.n	800bcee <_strtod_l+0xbda>
 800bca2:	4a2d      	ldr	r2, [pc, #180]	; (800bd58 <_strtod_l+0xc44>)
 800bca4:	4b2d      	ldr	r3, [pc, #180]	; (800bd5c <_strtod_l+0xc48>)
 800bca6:	0028      	movs	r0, r5
 800bca8:	9908      	ldr	r1, [sp, #32]
 800bcaa:	f7f4 fbd9 	bl	8000460 <__aeabi_dcmple>
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	d016      	beq.n	800bce0 <_strtod_l+0xbcc>
 800bcb2:	0028      	movs	r0, r5
 800bcb4:	9908      	ldr	r1, [sp, #32]
 800bcb6:	f7f4 fc3b 	bl	8000530 <__aeabi_d2uiz>
 800bcba:	2800      	cmp	r0, #0
 800bcbc:	d100      	bne.n	800bcc0 <_strtod_l+0xbac>
 800bcbe:	3001      	adds	r0, #1
 800bcc0:	f7f6 ff14 	bl	8002aec <__aeabi_ui2d>
 800bcc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bcc6:	0005      	movs	r5, r0
 800bcc8:	9108      	str	r1, [sp, #32]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d122      	bne.n	800bd14 <_strtod_l+0xc00>
 800bcce:	2380      	movs	r3, #128	; 0x80
 800bcd0:	061b      	lsls	r3, r3, #24
 800bcd2:	18cb      	adds	r3, r1, r3
 800bcd4:	9018      	str	r0, [sp, #96]	; 0x60
 800bcd6:	9319      	str	r3, [sp, #100]	; 0x64
 800bcd8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bcda:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bcdc:	9210      	str	r2, [sp, #64]	; 0x40
 800bcde:	9311      	str	r3, [sp, #68]	; 0x44
 800bce0:	22d6      	movs	r2, #214	; 0xd6
 800bce2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bce4:	04d2      	lsls	r2, r2, #19
 800bce6:	189b      	adds	r3, r3, r2
 800bce8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bcea:	1a9b      	subs	r3, r3, r2
 800bcec:	9311      	str	r3, [sp, #68]	; 0x44
 800bcee:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bcf0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bcf2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800bcf4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800bcf6:	f002 f839 	bl	800dd6c <__ulp>
 800bcfa:	0002      	movs	r2, r0
 800bcfc:	000b      	movs	r3, r1
 800bcfe:	0030      	movs	r0, r6
 800bd00:	0039      	movs	r1, r7
 800bd02:	f7f6 f8ad 	bl	8001e60 <__aeabi_dmul>
 800bd06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd0a:	f7f5 f983 	bl	8001014 <__aeabi_dadd>
 800bd0e:	0006      	movs	r6, r0
 800bd10:	000f      	movs	r7, r1
 800bd12:	e78c      	b.n	800bc2e <_strtod_l+0xb1a>
 800bd14:	0002      	movs	r2, r0
 800bd16:	9b08      	ldr	r3, [sp, #32]
 800bd18:	9218      	str	r2, [sp, #96]	; 0x60
 800bd1a:	9319      	str	r3, [sp, #100]	; 0x64
 800bd1c:	e7dc      	b.n	800bcd8 <_strtod_l+0xbc4>
 800bd1e:	4a0b      	ldr	r2, [pc, #44]	; (800bd4c <_strtod_l+0xc38>)
 800bd20:	4b0f      	ldr	r3, [pc, #60]	; (800bd60 <_strtod_l+0xc4c>)
 800bd22:	9808      	ldr	r0, [sp, #32]
 800bd24:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd26:	f7f4 fb91 	bl	800044c <__aeabi_dcmplt>
 800bd2a:	e7ae      	b.n	800bc8a <_strtod_l+0xb76>
 800bd2c:	3ff00000 	.word	0x3ff00000
 800bd30:	7ff00000 	.word	0x7ff00000
 800bd34:	7fe00000 	.word	0x7fe00000
 800bd38:	fcb00000 	.word	0xfcb00000
 800bd3c:	7c9fffff 	.word	0x7c9fffff
 800bd40:	7fefffff 	.word	0x7fefffff
 800bd44:	3fe00000 	.word	0x3fe00000
 800bd48:	bff00000 	.word	0xbff00000
 800bd4c:	94a03595 	.word	0x94a03595
 800bd50:	3fdfffff 	.word	0x3fdfffff
 800bd54:	35afe535 	.word	0x35afe535
 800bd58:	ffc00000 	.word	0xffc00000
 800bd5c:	41dfffff 	.word	0x41dfffff
 800bd60:	3fcfffff 	.word	0x3fcfffff

0800bd64 <_strtod_r>:
 800bd64:	4b04      	ldr	r3, [pc, #16]	; (800bd78 <_strtod_r+0x14>)
 800bd66:	b510      	push	{r4, lr}
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	6a1b      	ldr	r3, [r3, #32]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d100      	bne.n	800bd72 <_strtod_r+0xe>
 800bd70:	4b02      	ldr	r3, [pc, #8]	; (800bd7c <_strtod_r+0x18>)
 800bd72:	f7ff f9cf 	bl	800b114 <_strtod_l>
 800bd76:	bd10      	pop	{r4, pc}
 800bd78:	20000178 	.word	0x20000178
 800bd7c:	200001dc 	.word	0x200001dc

0800bd80 <_strtol_l.isra.0>:
 800bd80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd82:	001f      	movs	r7, r3
 800bd84:	000e      	movs	r6, r1
 800bd86:	b087      	sub	sp, #28
 800bd88:	9005      	str	r0, [sp, #20]
 800bd8a:	9101      	str	r1, [sp, #4]
 800bd8c:	9202      	str	r2, [sp, #8]
 800bd8e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bd90:	7834      	ldrb	r4, [r6, #0]
 800bd92:	f001 fc75 	bl	800d680 <__locale_ctype_ptr_l>
 800bd96:	2208      	movs	r2, #8
 800bd98:	1900      	adds	r0, r0, r4
 800bd9a:	7843      	ldrb	r3, [r0, #1]
 800bd9c:	1c75      	adds	r5, r6, #1
 800bd9e:	4013      	ands	r3, r2
 800bda0:	d136      	bne.n	800be10 <_strtol_l.isra.0+0x90>
 800bda2:	2c2d      	cmp	r4, #45	; 0x2d
 800bda4:	d136      	bne.n	800be14 <_strtol_l.isra.0+0x94>
 800bda6:	1cb5      	adds	r5, r6, #2
 800bda8:	7874      	ldrb	r4, [r6, #1]
 800bdaa:	2601      	movs	r6, #1
 800bdac:	2f00      	cmp	r7, #0
 800bdae:	d062      	beq.n	800be76 <_strtol_l.isra.0+0xf6>
 800bdb0:	2f10      	cmp	r7, #16
 800bdb2:	d109      	bne.n	800bdc8 <_strtol_l.isra.0+0x48>
 800bdb4:	2c30      	cmp	r4, #48	; 0x30
 800bdb6:	d107      	bne.n	800bdc8 <_strtol_l.isra.0+0x48>
 800bdb8:	2220      	movs	r2, #32
 800bdba:	782b      	ldrb	r3, [r5, #0]
 800bdbc:	4393      	bics	r3, r2
 800bdbe:	2b58      	cmp	r3, #88	; 0x58
 800bdc0:	d154      	bne.n	800be6c <_strtol_l.isra.0+0xec>
 800bdc2:	2710      	movs	r7, #16
 800bdc4:	786c      	ldrb	r4, [r5, #1]
 800bdc6:	3502      	adds	r5, #2
 800bdc8:	4b2d      	ldr	r3, [pc, #180]	; (800be80 <_strtol_l.isra.0+0x100>)
 800bdca:	0039      	movs	r1, r7
 800bdcc:	18f3      	adds	r3, r6, r3
 800bdce:	0018      	movs	r0, r3
 800bdd0:	9303      	str	r3, [sp, #12]
 800bdd2:	f7f4 fa35 	bl	8000240 <__aeabi_uidivmod>
 800bdd6:	9104      	str	r1, [sp, #16]
 800bdd8:	2101      	movs	r1, #1
 800bdda:	2300      	movs	r3, #0
 800bddc:	4249      	negs	r1, r1
 800bdde:	0002      	movs	r2, r0
 800bde0:	468c      	mov	ip, r1
 800bde2:	0018      	movs	r0, r3
 800bde4:	0021      	movs	r1, r4
 800bde6:	3930      	subs	r1, #48	; 0x30
 800bde8:	2909      	cmp	r1, #9
 800bdea:	d81a      	bhi.n	800be22 <_strtol_l.isra.0+0xa2>
 800bdec:	000c      	movs	r4, r1
 800bdee:	42a7      	cmp	r7, r4
 800bdf0:	dd23      	ble.n	800be3a <_strtol_l.isra.0+0xba>
 800bdf2:	1c59      	adds	r1, r3, #1
 800bdf4:	d009      	beq.n	800be0a <_strtol_l.isra.0+0x8a>
 800bdf6:	4663      	mov	r3, ip
 800bdf8:	4282      	cmp	r2, r0
 800bdfa:	d306      	bcc.n	800be0a <_strtol_l.isra.0+0x8a>
 800bdfc:	d102      	bne.n	800be04 <_strtol_l.isra.0+0x84>
 800bdfe:	9904      	ldr	r1, [sp, #16]
 800be00:	42a1      	cmp	r1, r4
 800be02:	db02      	blt.n	800be0a <_strtol_l.isra.0+0x8a>
 800be04:	2301      	movs	r3, #1
 800be06:	4378      	muls	r0, r7
 800be08:	1820      	adds	r0, r4, r0
 800be0a:	782c      	ldrb	r4, [r5, #0]
 800be0c:	3501      	adds	r5, #1
 800be0e:	e7e9      	b.n	800bde4 <_strtol_l.isra.0+0x64>
 800be10:	002e      	movs	r6, r5
 800be12:	e7bc      	b.n	800bd8e <_strtol_l.isra.0+0xe>
 800be14:	2c2b      	cmp	r4, #43	; 0x2b
 800be16:	d001      	beq.n	800be1c <_strtol_l.isra.0+0x9c>
 800be18:	001e      	movs	r6, r3
 800be1a:	e7c7      	b.n	800bdac <_strtol_l.isra.0+0x2c>
 800be1c:	1cb5      	adds	r5, r6, #2
 800be1e:	7874      	ldrb	r4, [r6, #1]
 800be20:	e7fa      	b.n	800be18 <_strtol_l.isra.0+0x98>
 800be22:	0021      	movs	r1, r4
 800be24:	3941      	subs	r1, #65	; 0x41
 800be26:	2919      	cmp	r1, #25
 800be28:	d801      	bhi.n	800be2e <_strtol_l.isra.0+0xae>
 800be2a:	3c37      	subs	r4, #55	; 0x37
 800be2c:	e7df      	b.n	800bdee <_strtol_l.isra.0+0x6e>
 800be2e:	0021      	movs	r1, r4
 800be30:	3961      	subs	r1, #97	; 0x61
 800be32:	2919      	cmp	r1, #25
 800be34:	d801      	bhi.n	800be3a <_strtol_l.isra.0+0xba>
 800be36:	3c57      	subs	r4, #87	; 0x57
 800be38:	e7d9      	b.n	800bdee <_strtol_l.isra.0+0x6e>
 800be3a:	1c5a      	adds	r2, r3, #1
 800be3c:	d108      	bne.n	800be50 <_strtol_l.isra.0+0xd0>
 800be3e:	9a05      	ldr	r2, [sp, #20]
 800be40:	3323      	adds	r3, #35	; 0x23
 800be42:	6013      	str	r3, [r2, #0]
 800be44:	9b02      	ldr	r3, [sp, #8]
 800be46:	9803      	ldr	r0, [sp, #12]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d109      	bne.n	800be60 <_strtol_l.isra.0+0xe0>
 800be4c:	b007      	add	sp, #28
 800be4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be50:	2e00      	cmp	r6, #0
 800be52:	d000      	beq.n	800be56 <_strtol_l.isra.0+0xd6>
 800be54:	4240      	negs	r0, r0
 800be56:	9a02      	ldr	r2, [sp, #8]
 800be58:	2a00      	cmp	r2, #0
 800be5a:	d0f7      	beq.n	800be4c <_strtol_l.isra.0+0xcc>
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d001      	beq.n	800be64 <_strtol_l.isra.0+0xe4>
 800be60:	1e6b      	subs	r3, r5, #1
 800be62:	9301      	str	r3, [sp, #4]
 800be64:	9b02      	ldr	r3, [sp, #8]
 800be66:	9a01      	ldr	r2, [sp, #4]
 800be68:	601a      	str	r2, [r3, #0]
 800be6a:	e7ef      	b.n	800be4c <_strtol_l.isra.0+0xcc>
 800be6c:	2430      	movs	r4, #48	; 0x30
 800be6e:	2f00      	cmp	r7, #0
 800be70:	d1aa      	bne.n	800bdc8 <_strtol_l.isra.0+0x48>
 800be72:	2708      	movs	r7, #8
 800be74:	e7a8      	b.n	800bdc8 <_strtol_l.isra.0+0x48>
 800be76:	2c30      	cmp	r4, #48	; 0x30
 800be78:	d09e      	beq.n	800bdb8 <_strtol_l.isra.0+0x38>
 800be7a:	270a      	movs	r7, #10
 800be7c:	e7a4      	b.n	800bdc8 <_strtol_l.isra.0+0x48>
 800be7e:	46c0      	nop			; (mov r8, r8)
 800be80:	7fffffff 	.word	0x7fffffff

0800be84 <_strtol_r>:
 800be84:	b513      	push	{r0, r1, r4, lr}
 800be86:	4c05      	ldr	r4, [pc, #20]	; (800be9c <_strtol_r+0x18>)
 800be88:	6824      	ldr	r4, [r4, #0]
 800be8a:	6a24      	ldr	r4, [r4, #32]
 800be8c:	2c00      	cmp	r4, #0
 800be8e:	d100      	bne.n	800be92 <_strtol_r+0xe>
 800be90:	4c03      	ldr	r4, [pc, #12]	; (800bea0 <_strtol_r+0x1c>)
 800be92:	9400      	str	r4, [sp, #0]
 800be94:	f7ff ff74 	bl	800bd80 <_strtol_l.isra.0>
 800be98:	bd16      	pop	{r1, r2, r4, pc}
 800be9a:	46c0      	nop			; (mov r8, r8)
 800be9c:	20000178 	.word	0x20000178
 800bea0:	200001dc 	.word	0x200001dc

0800bea4 <__swbuf_r>:
 800bea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bea6:	0005      	movs	r5, r0
 800bea8:	000e      	movs	r6, r1
 800beaa:	0014      	movs	r4, r2
 800beac:	2800      	cmp	r0, #0
 800beae:	d004      	beq.n	800beba <__swbuf_r+0x16>
 800beb0:	6983      	ldr	r3, [r0, #24]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d101      	bne.n	800beba <__swbuf_r+0x16>
 800beb6:	f001 f81f 	bl	800cef8 <__sinit>
 800beba:	4b22      	ldr	r3, [pc, #136]	; (800bf44 <__swbuf_r+0xa0>)
 800bebc:	429c      	cmp	r4, r3
 800bebe:	d12d      	bne.n	800bf1c <__swbuf_r+0x78>
 800bec0:	686c      	ldr	r4, [r5, #4]
 800bec2:	69a3      	ldr	r3, [r4, #24]
 800bec4:	60a3      	str	r3, [r4, #8]
 800bec6:	89a3      	ldrh	r3, [r4, #12]
 800bec8:	071b      	lsls	r3, r3, #28
 800beca:	d531      	bpl.n	800bf30 <__swbuf_r+0x8c>
 800becc:	6923      	ldr	r3, [r4, #16]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d02e      	beq.n	800bf30 <__swbuf_r+0x8c>
 800bed2:	6823      	ldr	r3, [r4, #0]
 800bed4:	6922      	ldr	r2, [r4, #16]
 800bed6:	b2f7      	uxtb	r7, r6
 800bed8:	1a98      	subs	r0, r3, r2
 800beda:	6963      	ldr	r3, [r4, #20]
 800bedc:	b2f6      	uxtb	r6, r6
 800bede:	4283      	cmp	r3, r0
 800bee0:	dc05      	bgt.n	800beee <__swbuf_r+0x4a>
 800bee2:	0021      	movs	r1, r4
 800bee4:	0028      	movs	r0, r5
 800bee6:	f000 ff99 	bl	800ce1c <_fflush_r>
 800beea:	2800      	cmp	r0, #0
 800beec:	d126      	bne.n	800bf3c <__swbuf_r+0x98>
 800beee:	68a3      	ldr	r3, [r4, #8]
 800bef0:	3001      	adds	r0, #1
 800bef2:	3b01      	subs	r3, #1
 800bef4:	60a3      	str	r3, [r4, #8]
 800bef6:	6823      	ldr	r3, [r4, #0]
 800bef8:	1c5a      	adds	r2, r3, #1
 800befa:	6022      	str	r2, [r4, #0]
 800befc:	701f      	strb	r7, [r3, #0]
 800befe:	6963      	ldr	r3, [r4, #20]
 800bf00:	4283      	cmp	r3, r0
 800bf02:	d004      	beq.n	800bf0e <__swbuf_r+0x6a>
 800bf04:	89a3      	ldrh	r3, [r4, #12]
 800bf06:	07db      	lsls	r3, r3, #31
 800bf08:	d51a      	bpl.n	800bf40 <__swbuf_r+0x9c>
 800bf0a:	2e0a      	cmp	r6, #10
 800bf0c:	d118      	bne.n	800bf40 <__swbuf_r+0x9c>
 800bf0e:	0021      	movs	r1, r4
 800bf10:	0028      	movs	r0, r5
 800bf12:	f000 ff83 	bl	800ce1c <_fflush_r>
 800bf16:	2800      	cmp	r0, #0
 800bf18:	d012      	beq.n	800bf40 <__swbuf_r+0x9c>
 800bf1a:	e00f      	b.n	800bf3c <__swbuf_r+0x98>
 800bf1c:	4b0a      	ldr	r3, [pc, #40]	; (800bf48 <__swbuf_r+0xa4>)
 800bf1e:	429c      	cmp	r4, r3
 800bf20:	d101      	bne.n	800bf26 <__swbuf_r+0x82>
 800bf22:	68ac      	ldr	r4, [r5, #8]
 800bf24:	e7cd      	b.n	800bec2 <__swbuf_r+0x1e>
 800bf26:	4b09      	ldr	r3, [pc, #36]	; (800bf4c <__swbuf_r+0xa8>)
 800bf28:	429c      	cmp	r4, r3
 800bf2a:	d1ca      	bne.n	800bec2 <__swbuf_r+0x1e>
 800bf2c:	68ec      	ldr	r4, [r5, #12]
 800bf2e:	e7c8      	b.n	800bec2 <__swbuf_r+0x1e>
 800bf30:	0021      	movs	r1, r4
 800bf32:	0028      	movs	r0, r5
 800bf34:	f000 f80c 	bl	800bf50 <__swsetup_r>
 800bf38:	2800      	cmp	r0, #0
 800bf3a:	d0ca      	beq.n	800bed2 <__swbuf_r+0x2e>
 800bf3c:	2601      	movs	r6, #1
 800bf3e:	4276      	negs	r6, r6
 800bf40:	0030      	movs	r0, r6
 800bf42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf44:	0800f008 	.word	0x0800f008
 800bf48:	0800f028 	.word	0x0800f028
 800bf4c:	0800efe8 	.word	0x0800efe8

0800bf50 <__swsetup_r>:
 800bf50:	4b36      	ldr	r3, [pc, #216]	; (800c02c <__swsetup_r+0xdc>)
 800bf52:	b570      	push	{r4, r5, r6, lr}
 800bf54:	681d      	ldr	r5, [r3, #0]
 800bf56:	0006      	movs	r6, r0
 800bf58:	000c      	movs	r4, r1
 800bf5a:	2d00      	cmp	r5, #0
 800bf5c:	d005      	beq.n	800bf6a <__swsetup_r+0x1a>
 800bf5e:	69ab      	ldr	r3, [r5, #24]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d102      	bne.n	800bf6a <__swsetup_r+0x1a>
 800bf64:	0028      	movs	r0, r5
 800bf66:	f000 ffc7 	bl	800cef8 <__sinit>
 800bf6a:	4b31      	ldr	r3, [pc, #196]	; (800c030 <__swsetup_r+0xe0>)
 800bf6c:	429c      	cmp	r4, r3
 800bf6e:	d10f      	bne.n	800bf90 <__swsetup_r+0x40>
 800bf70:	686c      	ldr	r4, [r5, #4]
 800bf72:	230c      	movs	r3, #12
 800bf74:	5ee2      	ldrsh	r2, [r4, r3]
 800bf76:	b293      	uxth	r3, r2
 800bf78:	0719      	lsls	r1, r3, #28
 800bf7a:	d42d      	bmi.n	800bfd8 <__swsetup_r+0x88>
 800bf7c:	06d9      	lsls	r1, r3, #27
 800bf7e:	d411      	bmi.n	800bfa4 <__swsetup_r+0x54>
 800bf80:	2309      	movs	r3, #9
 800bf82:	2001      	movs	r0, #1
 800bf84:	6033      	str	r3, [r6, #0]
 800bf86:	3337      	adds	r3, #55	; 0x37
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	81a3      	strh	r3, [r4, #12]
 800bf8c:	4240      	negs	r0, r0
 800bf8e:	bd70      	pop	{r4, r5, r6, pc}
 800bf90:	4b28      	ldr	r3, [pc, #160]	; (800c034 <__swsetup_r+0xe4>)
 800bf92:	429c      	cmp	r4, r3
 800bf94:	d101      	bne.n	800bf9a <__swsetup_r+0x4a>
 800bf96:	68ac      	ldr	r4, [r5, #8]
 800bf98:	e7eb      	b.n	800bf72 <__swsetup_r+0x22>
 800bf9a:	4b27      	ldr	r3, [pc, #156]	; (800c038 <__swsetup_r+0xe8>)
 800bf9c:	429c      	cmp	r4, r3
 800bf9e:	d1e8      	bne.n	800bf72 <__swsetup_r+0x22>
 800bfa0:	68ec      	ldr	r4, [r5, #12]
 800bfa2:	e7e6      	b.n	800bf72 <__swsetup_r+0x22>
 800bfa4:	075b      	lsls	r3, r3, #29
 800bfa6:	d513      	bpl.n	800bfd0 <__swsetup_r+0x80>
 800bfa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfaa:	2900      	cmp	r1, #0
 800bfac:	d008      	beq.n	800bfc0 <__swsetup_r+0x70>
 800bfae:	0023      	movs	r3, r4
 800bfb0:	3344      	adds	r3, #68	; 0x44
 800bfb2:	4299      	cmp	r1, r3
 800bfb4:	d002      	beq.n	800bfbc <__swsetup_r+0x6c>
 800bfb6:	0030      	movs	r0, r6
 800bfb8:	f002 f80c 	bl	800dfd4 <_free_r>
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	6363      	str	r3, [r4, #52]	; 0x34
 800bfc0:	2224      	movs	r2, #36	; 0x24
 800bfc2:	89a3      	ldrh	r3, [r4, #12]
 800bfc4:	4393      	bics	r3, r2
 800bfc6:	81a3      	strh	r3, [r4, #12]
 800bfc8:	2300      	movs	r3, #0
 800bfca:	6063      	str	r3, [r4, #4]
 800bfcc:	6923      	ldr	r3, [r4, #16]
 800bfce:	6023      	str	r3, [r4, #0]
 800bfd0:	2308      	movs	r3, #8
 800bfd2:	89a2      	ldrh	r2, [r4, #12]
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	81a3      	strh	r3, [r4, #12]
 800bfd8:	6923      	ldr	r3, [r4, #16]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d10b      	bne.n	800bff6 <__swsetup_r+0xa6>
 800bfde:	21a0      	movs	r1, #160	; 0xa0
 800bfe0:	2280      	movs	r2, #128	; 0x80
 800bfe2:	89a3      	ldrh	r3, [r4, #12]
 800bfe4:	0089      	lsls	r1, r1, #2
 800bfe6:	0092      	lsls	r2, r2, #2
 800bfe8:	400b      	ands	r3, r1
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d003      	beq.n	800bff6 <__swsetup_r+0xa6>
 800bfee:	0021      	movs	r1, r4
 800bff0:	0030      	movs	r0, r6
 800bff2:	f001 fb7f 	bl	800d6f4 <__smakebuf_r>
 800bff6:	2301      	movs	r3, #1
 800bff8:	89a2      	ldrh	r2, [r4, #12]
 800bffa:	4013      	ands	r3, r2
 800bffc:	d011      	beq.n	800c022 <__swsetup_r+0xd2>
 800bffe:	2300      	movs	r3, #0
 800c000:	60a3      	str	r3, [r4, #8]
 800c002:	6963      	ldr	r3, [r4, #20]
 800c004:	425b      	negs	r3, r3
 800c006:	61a3      	str	r3, [r4, #24]
 800c008:	2000      	movs	r0, #0
 800c00a:	6923      	ldr	r3, [r4, #16]
 800c00c:	4283      	cmp	r3, r0
 800c00e:	d1be      	bne.n	800bf8e <__swsetup_r+0x3e>
 800c010:	230c      	movs	r3, #12
 800c012:	5ee2      	ldrsh	r2, [r4, r3]
 800c014:	0613      	lsls	r3, r2, #24
 800c016:	d5ba      	bpl.n	800bf8e <__swsetup_r+0x3e>
 800c018:	2340      	movs	r3, #64	; 0x40
 800c01a:	4313      	orrs	r3, r2
 800c01c:	81a3      	strh	r3, [r4, #12]
 800c01e:	3801      	subs	r0, #1
 800c020:	e7b5      	b.n	800bf8e <__swsetup_r+0x3e>
 800c022:	0792      	lsls	r2, r2, #30
 800c024:	d400      	bmi.n	800c028 <__swsetup_r+0xd8>
 800c026:	6963      	ldr	r3, [r4, #20]
 800c028:	60a3      	str	r3, [r4, #8]
 800c02a:	e7ed      	b.n	800c008 <__swsetup_r+0xb8>
 800c02c:	20000178 	.word	0x20000178
 800c030:	0800f008 	.word	0x0800f008
 800c034:	0800f028 	.word	0x0800f028
 800c038:	0800efe8 	.word	0x0800efe8

0800c03c <quorem>:
 800c03c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c03e:	6903      	ldr	r3, [r0, #16]
 800c040:	690c      	ldr	r4, [r1, #16]
 800c042:	b089      	sub	sp, #36	; 0x24
 800c044:	0007      	movs	r7, r0
 800c046:	9105      	str	r1, [sp, #20]
 800c048:	2600      	movs	r6, #0
 800c04a:	42a3      	cmp	r3, r4
 800c04c:	db65      	blt.n	800c11a <quorem+0xde>
 800c04e:	000b      	movs	r3, r1
 800c050:	3c01      	subs	r4, #1
 800c052:	3314      	adds	r3, #20
 800c054:	00a5      	lsls	r5, r4, #2
 800c056:	9303      	str	r3, [sp, #12]
 800c058:	195b      	adds	r3, r3, r5
 800c05a:	9304      	str	r3, [sp, #16]
 800c05c:	0003      	movs	r3, r0
 800c05e:	3314      	adds	r3, #20
 800c060:	9302      	str	r3, [sp, #8]
 800c062:	195d      	adds	r5, r3, r5
 800c064:	9b04      	ldr	r3, [sp, #16]
 800c066:	6828      	ldr	r0, [r5, #0]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	1c59      	adds	r1, r3, #1
 800c06c:	9301      	str	r3, [sp, #4]
 800c06e:	f7f4 f861 	bl	8000134 <__udivsi3>
 800c072:	9001      	str	r0, [sp, #4]
 800c074:	42b0      	cmp	r0, r6
 800c076:	d029      	beq.n	800c0cc <quorem+0x90>
 800c078:	9b03      	ldr	r3, [sp, #12]
 800c07a:	9802      	ldr	r0, [sp, #8]
 800c07c:	469c      	mov	ip, r3
 800c07e:	9606      	str	r6, [sp, #24]
 800c080:	4662      	mov	r2, ip
 800c082:	ca08      	ldmia	r2!, {r3}
 800c084:	4694      	mov	ip, r2
 800c086:	9a01      	ldr	r2, [sp, #4]
 800c088:	b299      	uxth	r1, r3
 800c08a:	4351      	muls	r1, r2
 800c08c:	0c1b      	lsrs	r3, r3, #16
 800c08e:	4353      	muls	r3, r2
 800c090:	1989      	adds	r1, r1, r6
 800c092:	0c0a      	lsrs	r2, r1, #16
 800c094:	189b      	adds	r3, r3, r2
 800c096:	9307      	str	r3, [sp, #28]
 800c098:	0c1e      	lsrs	r6, r3, #16
 800c09a:	6803      	ldr	r3, [r0, #0]
 800c09c:	b289      	uxth	r1, r1
 800c09e:	b29a      	uxth	r2, r3
 800c0a0:	9b06      	ldr	r3, [sp, #24]
 800c0a2:	18d2      	adds	r2, r2, r3
 800c0a4:	6803      	ldr	r3, [r0, #0]
 800c0a6:	1a52      	subs	r2, r2, r1
 800c0a8:	0c19      	lsrs	r1, r3, #16
 800c0aa:	466b      	mov	r3, sp
 800c0ac:	8b9b      	ldrh	r3, [r3, #28]
 800c0ae:	1acb      	subs	r3, r1, r3
 800c0b0:	1411      	asrs	r1, r2, #16
 800c0b2:	185b      	adds	r3, r3, r1
 800c0b4:	1419      	asrs	r1, r3, #16
 800c0b6:	b292      	uxth	r2, r2
 800c0b8:	041b      	lsls	r3, r3, #16
 800c0ba:	431a      	orrs	r2, r3
 800c0bc:	9b04      	ldr	r3, [sp, #16]
 800c0be:	9106      	str	r1, [sp, #24]
 800c0c0:	c004      	stmia	r0!, {r2}
 800c0c2:	4563      	cmp	r3, ip
 800c0c4:	d2dc      	bcs.n	800c080 <quorem+0x44>
 800c0c6:	682b      	ldr	r3, [r5, #0]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d02d      	beq.n	800c128 <quorem+0xec>
 800c0cc:	9905      	ldr	r1, [sp, #20]
 800c0ce:	0038      	movs	r0, r7
 800c0d0:	f001 fdce 	bl	800dc70 <__mcmp>
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	db1f      	blt.n	800c118 <quorem+0xdc>
 800c0d8:	2500      	movs	r5, #0
 800c0da:	9b01      	ldr	r3, [sp, #4]
 800c0dc:	9802      	ldr	r0, [sp, #8]
 800c0de:	3301      	adds	r3, #1
 800c0e0:	9903      	ldr	r1, [sp, #12]
 800c0e2:	9301      	str	r3, [sp, #4]
 800c0e4:	6802      	ldr	r2, [r0, #0]
 800c0e6:	c908      	ldmia	r1!, {r3}
 800c0e8:	b292      	uxth	r2, r2
 800c0ea:	1955      	adds	r5, r2, r5
 800c0ec:	b29a      	uxth	r2, r3
 800c0ee:	1aaa      	subs	r2, r5, r2
 800c0f0:	6805      	ldr	r5, [r0, #0]
 800c0f2:	0c1b      	lsrs	r3, r3, #16
 800c0f4:	0c2d      	lsrs	r5, r5, #16
 800c0f6:	1aeb      	subs	r3, r5, r3
 800c0f8:	1415      	asrs	r5, r2, #16
 800c0fa:	195b      	adds	r3, r3, r5
 800c0fc:	141d      	asrs	r5, r3, #16
 800c0fe:	b292      	uxth	r2, r2
 800c100:	041b      	lsls	r3, r3, #16
 800c102:	4313      	orrs	r3, r2
 800c104:	c008      	stmia	r0!, {r3}
 800c106:	9b04      	ldr	r3, [sp, #16]
 800c108:	428b      	cmp	r3, r1
 800c10a:	d2eb      	bcs.n	800c0e4 <quorem+0xa8>
 800c10c:	9a02      	ldr	r2, [sp, #8]
 800c10e:	00a3      	lsls	r3, r4, #2
 800c110:	18d3      	adds	r3, r2, r3
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	2a00      	cmp	r2, #0
 800c116:	d011      	beq.n	800c13c <quorem+0x100>
 800c118:	9e01      	ldr	r6, [sp, #4]
 800c11a:	0030      	movs	r0, r6
 800c11c:	b009      	add	sp, #36	; 0x24
 800c11e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c120:	682b      	ldr	r3, [r5, #0]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d104      	bne.n	800c130 <quorem+0xf4>
 800c126:	3c01      	subs	r4, #1
 800c128:	9b02      	ldr	r3, [sp, #8]
 800c12a:	3d04      	subs	r5, #4
 800c12c:	42ab      	cmp	r3, r5
 800c12e:	d3f7      	bcc.n	800c120 <quorem+0xe4>
 800c130:	613c      	str	r4, [r7, #16]
 800c132:	e7cb      	b.n	800c0cc <quorem+0x90>
 800c134:	681a      	ldr	r2, [r3, #0]
 800c136:	2a00      	cmp	r2, #0
 800c138:	d104      	bne.n	800c144 <quorem+0x108>
 800c13a:	3c01      	subs	r4, #1
 800c13c:	9a02      	ldr	r2, [sp, #8]
 800c13e:	3b04      	subs	r3, #4
 800c140:	429a      	cmp	r2, r3
 800c142:	d3f7      	bcc.n	800c134 <quorem+0xf8>
 800c144:	613c      	str	r4, [r7, #16]
 800c146:	e7e7      	b.n	800c118 <quorem+0xdc>

0800c148 <_dtoa_r>:
 800c148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c14a:	0016      	movs	r6, r2
 800c14c:	001f      	movs	r7, r3
 800c14e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c150:	b09b      	sub	sp, #108	; 0x6c
 800c152:	9002      	str	r0, [sp, #8]
 800c154:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800c156:	9606      	str	r6, [sp, #24]
 800c158:	9707      	str	r7, [sp, #28]
 800c15a:	2c00      	cmp	r4, #0
 800c15c:	d108      	bne.n	800c170 <_dtoa_r+0x28>
 800c15e:	2010      	movs	r0, #16
 800c160:	f001 fb0c 	bl	800d77c <malloc>
 800c164:	9b02      	ldr	r3, [sp, #8]
 800c166:	6258      	str	r0, [r3, #36]	; 0x24
 800c168:	6044      	str	r4, [r0, #4]
 800c16a:	6084      	str	r4, [r0, #8]
 800c16c:	6004      	str	r4, [r0, #0]
 800c16e:	60c4      	str	r4, [r0, #12]
 800c170:	9b02      	ldr	r3, [sp, #8]
 800c172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c174:	6819      	ldr	r1, [r3, #0]
 800c176:	2900      	cmp	r1, #0
 800c178:	d00b      	beq.n	800c192 <_dtoa_r+0x4a>
 800c17a:	685a      	ldr	r2, [r3, #4]
 800c17c:	2301      	movs	r3, #1
 800c17e:	4093      	lsls	r3, r2
 800c180:	604a      	str	r2, [r1, #4]
 800c182:	608b      	str	r3, [r1, #8]
 800c184:	9802      	ldr	r0, [sp, #8]
 800c186:	f001 fb58 	bl	800d83a <_Bfree>
 800c18a:	2200      	movs	r2, #0
 800c18c:	9b02      	ldr	r3, [sp, #8]
 800c18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c190:	601a      	str	r2, [r3, #0]
 800c192:	2f00      	cmp	r7, #0
 800c194:	da20      	bge.n	800c1d8 <_dtoa_r+0x90>
 800c196:	2301      	movs	r3, #1
 800c198:	602b      	str	r3, [r5, #0]
 800c19a:	007b      	lsls	r3, r7, #1
 800c19c:	085b      	lsrs	r3, r3, #1
 800c19e:	9307      	str	r3, [sp, #28]
 800c1a0:	9c07      	ldr	r4, [sp, #28]
 800c1a2:	4bb2      	ldr	r3, [pc, #712]	; (800c46c <_dtoa_r+0x324>)
 800c1a4:	0022      	movs	r2, r4
 800c1a6:	9317      	str	r3, [sp, #92]	; 0x5c
 800c1a8:	401a      	ands	r2, r3
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d117      	bne.n	800c1de <_dtoa_r+0x96>
 800c1ae:	4bb0      	ldr	r3, [pc, #704]	; (800c470 <_dtoa_r+0x328>)
 800c1b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c1b2:	6013      	str	r3, [r2, #0]
 800c1b4:	9b06      	ldr	r3, [sp, #24]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d103      	bne.n	800c1c2 <_dtoa_r+0x7a>
 800c1ba:	0324      	lsls	r4, r4, #12
 800c1bc:	d101      	bne.n	800c1c2 <_dtoa_r+0x7a>
 800c1be:	f000 fd87 	bl	800ccd0 <_dtoa_r+0xb88>
 800c1c2:	4bac      	ldr	r3, [pc, #688]	; (800c474 <_dtoa_r+0x32c>)
 800c1c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c1c6:	9308      	str	r3, [sp, #32]
 800c1c8:	2a00      	cmp	r2, #0
 800c1ca:	d002      	beq.n	800c1d2 <_dtoa_r+0x8a>
 800c1cc:	4baa      	ldr	r3, [pc, #680]	; (800c478 <_dtoa_r+0x330>)
 800c1ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c1d0:	6013      	str	r3, [r2, #0]
 800c1d2:	9808      	ldr	r0, [sp, #32]
 800c1d4:	b01b      	add	sp, #108	; 0x6c
 800c1d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1d8:	2300      	movs	r3, #0
 800c1da:	602b      	str	r3, [r5, #0]
 800c1dc:	e7e0      	b.n	800c1a0 <_dtoa_r+0x58>
 800c1de:	9e06      	ldr	r6, [sp, #24]
 800c1e0:	9f07      	ldr	r7, [sp, #28]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	0030      	movs	r0, r6
 800c1e8:	0039      	movs	r1, r7
 800c1ea:	f7f4 f929 	bl	8000440 <__aeabi_dcmpeq>
 800c1ee:	1e05      	subs	r5, r0, #0
 800c1f0:	d00b      	beq.n	800c20a <_dtoa_r+0xc2>
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c1f6:	6013      	str	r3, [r2, #0]
 800c1f8:	4ba0      	ldr	r3, [pc, #640]	; (800c47c <_dtoa_r+0x334>)
 800c1fa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c1fc:	9308      	str	r3, [sp, #32]
 800c1fe:	2a00      	cmp	r2, #0
 800c200:	d0e7      	beq.n	800c1d2 <_dtoa_r+0x8a>
 800c202:	4a9f      	ldr	r2, [pc, #636]	; (800c480 <_dtoa_r+0x338>)
 800c204:	9924      	ldr	r1, [sp, #144]	; 0x90
 800c206:	600a      	str	r2, [r1, #0]
 800c208:	e7e3      	b.n	800c1d2 <_dtoa_r+0x8a>
 800c20a:	ab18      	add	r3, sp, #96	; 0x60
 800c20c:	9301      	str	r3, [sp, #4]
 800c20e:	ab19      	add	r3, sp, #100	; 0x64
 800c210:	9300      	str	r3, [sp, #0]
 800c212:	0032      	movs	r2, r6
 800c214:	003b      	movs	r3, r7
 800c216:	9802      	ldr	r0, [sp, #8]
 800c218:	f001 fe1a 	bl	800de50 <__d2b>
 800c21c:	0063      	lsls	r3, r4, #1
 800c21e:	9003      	str	r0, [sp, #12]
 800c220:	0d5b      	lsrs	r3, r3, #21
 800c222:	d074      	beq.n	800c30e <_dtoa_r+0x1c6>
 800c224:	033a      	lsls	r2, r7, #12
 800c226:	4c97      	ldr	r4, [pc, #604]	; (800c484 <_dtoa_r+0x33c>)
 800c228:	0b12      	lsrs	r2, r2, #12
 800c22a:	4314      	orrs	r4, r2
 800c22c:	0021      	movs	r1, r4
 800c22e:	4a96      	ldr	r2, [pc, #600]	; (800c488 <_dtoa_r+0x340>)
 800c230:	0030      	movs	r0, r6
 800c232:	9516      	str	r5, [sp, #88]	; 0x58
 800c234:	189e      	adds	r6, r3, r2
 800c236:	2200      	movs	r2, #0
 800c238:	4b94      	ldr	r3, [pc, #592]	; (800c48c <_dtoa_r+0x344>)
 800c23a:	f7f6 f883 	bl	8002344 <__aeabi_dsub>
 800c23e:	4a94      	ldr	r2, [pc, #592]	; (800c490 <_dtoa_r+0x348>)
 800c240:	4b94      	ldr	r3, [pc, #592]	; (800c494 <_dtoa_r+0x34c>)
 800c242:	f7f5 fe0d 	bl	8001e60 <__aeabi_dmul>
 800c246:	4a94      	ldr	r2, [pc, #592]	; (800c498 <_dtoa_r+0x350>)
 800c248:	4b94      	ldr	r3, [pc, #592]	; (800c49c <_dtoa_r+0x354>)
 800c24a:	f7f4 fee3 	bl	8001014 <__aeabi_dadd>
 800c24e:	0004      	movs	r4, r0
 800c250:	0030      	movs	r0, r6
 800c252:	000d      	movs	r5, r1
 800c254:	f7f6 fc10 	bl	8002a78 <__aeabi_i2d>
 800c258:	4a91      	ldr	r2, [pc, #580]	; (800c4a0 <_dtoa_r+0x358>)
 800c25a:	4b92      	ldr	r3, [pc, #584]	; (800c4a4 <_dtoa_r+0x35c>)
 800c25c:	f7f5 fe00 	bl	8001e60 <__aeabi_dmul>
 800c260:	0002      	movs	r2, r0
 800c262:	000b      	movs	r3, r1
 800c264:	0020      	movs	r0, r4
 800c266:	0029      	movs	r1, r5
 800c268:	f7f4 fed4 	bl	8001014 <__aeabi_dadd>
 800c26c:	0004      	movs	r4, r0
 800c26e:	000d      	movs	r5, r1
 800c270:	f7f6 fbcc 	bl	8002a0c <__aeabi_d2iz>
 800c274:	2200      	movs	r2, #0
 800c276:	0007      	movs	r7, r0
 800c278:	2300      	movs	r3, #0
 800c27a:	0020      	movs	r0, r4
 800c27c:	0029      	movs	r1, r5
 800c27e:	f7f4 f8e5 	bl	800044c <__aeabi_dcmplt>
 800c282:	2800      	cmp	r0, #0
 800c284:	d009      	beq.n	800c29a <_dtoa_r+0x152>
 800c286:	0038      	movs	r0, r7
 800c288:	f7f6 fbf6 	bl	8002a78 <__aeabi_i2d>
 800c28c:	002b      	movs	r3, r5
 800c28e:	0022      	movs	r2, r4
 800c290:	f7f4 f8d6 	bl	8000440 <__aeabi_dcmpeq>
 800c294:	4243      	negs	r3, r0
 800c296:	4158      	adcs	r0, r3
 800c298:	1a3f      	subs	r7, r7, r0
 800c29a:	2301      	movs	r3, #1
 800c29c:	9314      	str	r3, [sp, #80]	; 0x50
 800c29e:	2f16      	cmp	r7, #22
 800c2a0:	d80d      	bhi.n	800c2be <_dtoa_r+0x176>
 800c2a2:	4981      	ldr	r1, [pc, #516]	; (800c4a8 <_dtoa_r+0x360>)
 800c2a4:	00fb      	lsls	r3, r7, #3
 800c2a6:	18c9      	adds	r1, r1, r3
 800c2a8:	6808      	ldr	r0, [r1, #0]
 800c2aa:	6849      	ldr	r1, [r1, #4]
 800c2ac:	9a06      	ldr	r2, [sp, #24]
 800c2ae:	9b07      	ldr	r3, [sp, #28]
 800c2b0:	f7f4 f8e0 	bl	8000474 <__aeabi_dcmpgt>
 800c2b4:	2800      	cmp	r0, #0
 800c2b6:	d046      	beq.n	800c346 <_dtoa_r+0x1fe>
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	3f01      	subs	r7, #1
 800c2bc:	9314      	str	r3, [sp, #80]	; 0x50
 800c2be:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c2c0:	1b9e      	subs	r6, r3, r6
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	930a      	str	r3, [sp, #40]	; 0x28
 800c2c6:	0033      	movs	r3, r6
 800c2c8:	3b01      	subs	r3, #1
 800c2ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800c2cc:	d504      	bpl.n	800c2d8 <_dtoa_r+0x190>
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	1b9b      	subs	r3, r3, r6
 800c2d2:	930a      	str	r3, [sp, #40]	; 0x28
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c2d8:	2f00      	cmp	r7, #0
 800c2da:	db36      	blt.n	800c34a <_dtoa_r+0x202>
 800c2dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2de:	9711      	str	r7, [sp, #68]	; 0x44
 800c2e0:	19db      	adds	r3, r3, r7
 800c2e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	9304      	str	r3, [sp, #16]
 800c2e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c2ea:	2401      	movs	r4, #1
 800c2ec:	2b09      	cmp	r3, #9
 800c2ee:	d900      	bls.n	800c2f2 <_dtoa_r+0x1aa>
 800c2f0:	e084      	b.n	800c3fc <_dtoa_r+0x2b4>
 800c2f2:	2b05      	cmp	r3, #5
 800c2f4:	dd02      	ble.n	800c2fc <_dtoa_r+0x1b4>
 800c2f6:	2400      	movs	r4, #0
 800c2f8:	3b04      	subs	r3, #4
 800c2fa:	9320      	str	r3, [sp, #128]	; 0x80
 800c2fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c2fe:	1e98      	subs	r0, r3, #2
 800c300:	2803      	cmp	r0, #3
 800c302:	d900      	bls.n	800c306 <_dtoa_r+0x1be>
 800c304:	e084      	b.n	800c410 <_dtoa_r+0x2c8>
 800c306:	f7f3 ff0b 	bl	8000120 <__gnu_thumb1_case_uqi>
 800c30a:	7775      	.short	0x7775
 800c30c:	6a28      	.short	0x6a28
 800c30e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c310:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c312:	189e      	adds	r6, r3, r2
 800c314:	4b65      	ldr	r3, [pc, #404]	; (800c4ac <_dtoa_r+0x364>)
 800c316:	18f2      	adds	r2, r6, r3
 800c318:	2a20      	cmp	r2, #32
 800c31a:	dd0f      	ble.n	800c33c <_dtoa_r+0x1f4>
 800c31c:	2340      	movs	r3, #64	; 0x40
 800c31e:	1a9b      	subs	r3, r3, r2
 800c320:	409c      	lsls	r4, r3
 800c322:	4b63      	ldr	r3, [pc, #396]	; (800c4b0 <_dtoa_r+0x368>)
 800c324:	9806      	ldr	r0, [sp, #24]
 800c326:	18f3      	adds	r3, r6, r3
 800c328:	40d8      	lsrs	r0, r3
 800c32a:	4320      	orrs	r0, r4
 800c32c:	f7f6 fbde 	bl	8002aec <__aeabi_ui2d>
 800c330:	2301      	movs	r3, #1
 800c332:	4c60      	ldr	r4, [pc, #384]	; (800c4b4 <_dtoa_r+0x36c>)
 800c334:	3e01      	subs	r6, #1
 800c336:	1909      	adds	r1, r1, r4
 800c338:	9316      	str	r3, [sp, #88]	; 0x58
 800c33a:	e77c      	b.n	800c236 <_dtoa_r+0xee>
 800c33c:	2320      	movs	r3, #32
 800c33e:	9806      	ldr	r0, [sp, #24]
 800c340:	1a9b      	subs	r3, r3, r2
 800c342:	4098      	lsls	r0, r3
 800c344:	e7f2      	b.n	800c32c <_dtoa_r+0x1e4>
 800c346:	9014      	str	r0, [sp, #80]	; 0x50
 800c348:	e7b9      	b.n	800c2be <_dtoa_r+0x176>
 800c34a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c34c:	1bdb      	subs	r3, r3, r7
 800c34e:	930a      	str	r3, [sp, #40]	; 0x28
 800c350:	427b      	negs	r3, r7
 800c352:	9304      	str	r3, [sp, #16]
 800c354:	2300      	movs	r3, #0
 800c356:	9311      	str	r3, [sp, #68]	; 0x44
 800c358:	e7c6      	b.n	800c2e8 <_dtoa_r+0x1a0>
 800c35a:	2301      	movs	r3, #1
 800c35c:	930d      	str	r3, [sp, #52]	; 0x34
 800c35e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c360:	2b00      	cmp	r3, #0
 800c362:	dd59      	ble.n	800c418 <_dtoa_r+0x2d0>
 800c364:	930c      	str	r3, [sp, #48]	; 0x30
 800c366:	9309      	str	r3, [sp, #36]	; 0x24
 800c368:	9a02      	ldr	r2, [sp, #8]
 800c36a:	6a55      	ldr	r5, [r2, #36]	; 0x24
 800c36c:	2200      	movs	r2, #0
 800c36e:	606a      	str	r2, [r5, #4]
 800c370:	3204      	adds	r2, #4
 800c372:	0010      	movs	r0, r2
 800c374:	3014      	adds	r0, #20
 800c376:	6869      	ldr	r1, [r5, #4]
 800c378:	4298      	cmp	r0, r3
 800c37a:	d952      	bls.n	800c422 <_dtoa_r+0x2da>
 800c37c:	9802      	ldr	r0, [sp, #8]
 800c37e:	f001 fa24 	bl	800d7ca <_Balloc>
 800c382:	9b02      	ldr	r3, [sp, #8]
 800c384:	6028      	str	r0, [r5, #0]
 800c386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	9308      	str	r3, [sp, #32]
 800c38c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c38e:	2b0e      	cmp	r3, #14
 800c390:	d900      	bls.n	800c394 <_dtoa_r+0x24c>
 800c392:	e10a      	b.n	800c5aa <_dtoa_r+0x462>
 800c394:	2c00      	cmp	r4, #0
 800c396:	d100      	bne.n	800c39a <_dtoa_r+0x252>
 800c398:	e107      	b.n	800c5aa <_dtoa_r+0x462>
 800c39a:	9b06      	ldr	r3, [sp, #24]
 800c39c:	9c07      	ldr	r4, [sp, #28]
 800c39e:	9312      	str	r3, [sp, #72]	; 0x48
 800c3a0:	9413      	str	r4, [sp, #76]	; 0x4c
 800c3a2:	2f00      	cmp	r7, #0
 800c3a4:	dc00      	bgt.n	800c3a8 <_dtoa_r+0x260>
 800c3a6:	e089      	b.n	800c4bc <_dtoa_r+0x374>
 800c3a8:	210f      	movs	r1, #15
 800c3aa:	003a      	movs	r2, r7
 800c3ac:	4b3e      	ldr	r3, [pc, #248]	; (800c4a8 <_dtoa_r+0x360>)
 800c3ae:	400a      	ands	r2, r1
 800c3b0:	00d2      	lsls	r2, r2, #3
 800c3b2:	189b      	adds	r3, r3, r2
 800c3b4:	681d      	ldr	r5, [r3, #0]
 800c3b6:	685e      	ldr	r6, [r3, #4]
 800c3b8:	2302      	movs	r3, #2
 800c3ba:	113c      	asrs	r4, r7, #4
 800c3bc:	930e      	str	r3, [sp, #56]	; 0x38
 800c3be:	06e3      	lsls	r3, r4, #27
 800c3c0:	d50b      	bpl.n	800c3da <_dtoa_r+0x292>
 800c3c2:	4b3d      	ldr	r3, [pc, #244]	; (800c4b8 <_dtoa_r+0x370>)
 800c3c4:	400c      	ands	r4, r1
 800c3c6:	6a1a      	ldr	r2, [r3, #32]
 800c3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ca:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c3cc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c3ce:	f7f5 f93d 	bl	800164c <__aeabi_ddiv>
 800c3d2:	2303      	movs	r3, #3
 800c3d4:	9006      	str	r0, [sp, #24]
 800c3d6:	9107      	str	r1, [sp, #28]
 800c3d8:	930e      	str	r3, [sp, #56]	; 0x38
 800c3da:	2300      	movs	r3, #0
 800c3dc:	e03a      	b.n	800c454 <_dtoa_r+0x30c>
 800c3de:	2301      	movs	r3, #1
 800c3e0:	930d      	str	r3, [sp, #52]	; 0x34
 800c3e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3e4:	18fb      	adds	r3, r7, r3
 800c3e6:	930c      	str	r3, [sp, #48]	; 0x30
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	9309      	str	r3, [sp, #36]	; 0x24
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	dcbb      	bgt.n	800c368 <_dtoa_r+0x220>
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	e7b9      	b.n	800c368 <_dtoa_r+0x220>
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	e7b1      	b.n	800c35c <_dtoa_r+0x214>
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	e7f1      	b.n	800c3e0 <_dtoa_r+0x298>
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	940d      	str	r4, [sp, #52]	; 0x34
 800c400:	9320      	str	r3, [sp, #128]	; 0x80
 800c402:	3b01      	subs	r3, #1
 800c404:	2200      	movs	r2, #0
 800c406:	930c      	str	r3, [sp, #48]	; 0x30
 800c408:	9309      	str	r3, [sp, #36]	; 0x24
 800c40a:	3313      	adds	r3, #19
 800c40c:	9221      	str	r2, [sp, #132]	; 0x84
 800c40e:	e7ab      	b.n	800c368 <_dtoa_r+0x220>
 800c410:	2301      	movs	r3, #1
 800c412:	930d      	str	r3, [sp, #52]	; 0x34
 800c414:	3b02      	subs	r3, #2
 800c416:	e7f5      	b.n	800c404 <_dtoa_r+0x2bc>
 800c418:	2301      	movs	r3, #1
 800c41a:	930c      	str	r3, [sp, #48]	; 0x30
 800c41c:	9309      	str	r3, [sp, #36]	; 0x24
 800c41e:	001a      	movs	r2, r3
 800c420:	e7f4      	b.n	800c40c <_dtoa_r+0x2c4>
 800c422:	3101      	adds	r1, #1
 800c424:	6069      	str	r1, [r5, #4]
 800c426:	0052      	lsls	r2, r2, #1
 800c428:	e7a3      	b.n	800c372 <_dtoa_r+0x22a>
 800c42a:	2301      	movs	r3, #1
 800c42c:	421c      	tst	r4, r3
 800c42e:	d00e      	beq.n	800c44e <_dtoa_r+0x306>
 800c430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c432:	4a21      	ldr	r2, [pc, #132]	; (800c4b8 <_dtoa_r+0x370>)
 800c434:	3301      	adds	r3, #1
 800c436:	930e      	str	r3, [sp, #56]	; 0x38
 800c438:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c43a:	0028      	movs	r0, r5
 800c43c:	00db      	lsls	r3, r3, #3
 800c43e:	189b      	adds	r3, r3, r2
 800c440:	0031      	movs	r1, r6
 800c442:	681a      	ldr	r2, [r3, #0]
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	f7f5 fd0b 	bl	8001e60 <__aeabi_dmul>
 800c44a:	0005      	movs	r5, r0
 800c44c:	000e      	movs	r6, r1
 800c44e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c450:	1064      	asrs	r4, r4, #1
 800c452:	3301      	adds	r3, #1
 800c454:	9310      	str	r3, [sp, #64]	; 0x40
 800c456:	2c00      	cmp	r4, #0
 800c458:	d1e7      	bne.n	800c42a <_dtoa_r+0x2e2>
 800c45a:	9806      	ldr	r0, [sp, #24]
 800c45c:	9907      	ldr	r1, [sp, #28]
 800c45e:	002a      	movs	r2, r5
 800c460:	0033      	movs	r3, r6
 800c462:	f7f5 f8f3 	bl	800164c <__aeabi_ddiv>
 800c466:	9006      	str	r0, [sp, #24]
 800c468:	9107      	str	r1, [sp, #28]
 800c46a:	e042      	b.n	800c4f2 <_dtoa_r+0x3aa>
 800c46c:	7ff00000 	.word	0x7ff00000
 800c470:	0000270f 	.word	0x0000270f
 800c474:	0800efe1 	.word	0x0800efe1
 800c478:	0800efe4 	.word	0x0800efe4
 800c47c:	0800ef58 	.word	0x0800ef58
 800c480:	0800ef59 	.word	0x0800ef59
 800c484:	3ff00000 	.word	0x3ff00000
 800c488:	fffffc01 	.word	0xfffffc01
 800c48c:	3ff80000 	.word	0x3ff80000
 800c490:	636f4361 	.word	0x636f4361
 800c494:	3fd287a7 	.word	0x3fd287a7
 800c498:	8b60c8b3 	.word	0x8b60c8b3
 800c49c:	3fc68a28 	.word	0x3fc68a28
 800c4a0:	509f79fb 	.word	0x509f79fb
 800c4a4:	3fd34413 	.word	0x3fd34413
 800c4a8:	0800f080 	.word	0x0800f080
 800c4ac:	00000432 	.word	0x00000432
 800c4b0:	00000412 	.word	0x00000412
 800c4b4:	fe100000 	.word	0xfe100000
 800c4b8:	0800f058 	.word	0x0800f058
 800c4bc:	2302      	movs	r3, #2
 800c4be:	930e      	str	r3, [sp, #56]	; 0x38
 800c4c0:	2f00      	cmp	r7, #0
 800c4c2:	d016      	beq.n	800c4f2 <_dtoa_r+0x3aa>
 800c4c4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c4c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c4c8:	427c      	negs	r4, r7
 800c4ca:	330d      	adds	r3, #13
 800c4cc:	4023      	ands	r3, r4
 800c4ce:	4ace      	ldr	r2, [pc, #824]	; (800c808 <_dtoa_r+0x6c0>)
 800c4d0:	00db      	lsls	r3, r3, #3
 800c4d2:	18d3      	adds	r3, r2, r3
 800c4d4:	681a      	ldr	r2, [r3, #0]
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	f7f5 fcc2 	bl	8001e60 <__aeabi_dmul>
 800c4dc:	2300      	movs	r3, #0
 800c4de:	2601      	movs	r6, #1
 800c4e0:	001d      	movs	r5, r3
 800c4e2:	9006      	str	r0, [sp, #24]
 800c4e4:	9107      	str	r1, [sp, #28]
 800c4e6:	1124      	asrs	r4, r4, #4
 800c4e8:	2c00      	cmp	r4, #0
 800c4ea:	d000      	beq.n	800c4ee <_dtoa_r+0x3a6>
 800c4ec:	e08c      	b.n	800c608 <_dtoa_r+0x4c0>
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d1b9      	bne.n	800c466 <_dtoa_r+0x31e>
 800c4f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d100      	bne.n	800c4fa <_dtoa_r+0x3b2>
 800c4f8:	e096      	b.n	800c628 <_dtoa_r+0x4e0>
 800c4fa:	9c06      	ldr	r4, [sp, #24]
 800c4fc:	9d07      	ldr	r5, [sp, #28]
 800c4fe:	2200      	movs	r2, #0
 800c500:	4bc2      	ldr	r3, [pc, #776]	; (800c80c <_dtoa_r+0x6c4>)
 800c502:	0020      	movs	r0, r4
 800c504:	0029      	movs	r1, r5
 800c506:	f7f3 ffa1 	bl	800044c <__aeabi_dcmplt>
 800c50a:	2800      	cmp	r0, #0
 800c50c:	d100      	bne.n	800c510 <_dtoa_r+0x3c8>
 800c50e:	e08b      	b.n	800c628 <_dtoa_r+0x4e0>
 800c510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c512:	2b00      	cmp	r3, #0
 800c514:	d100      	bne.n	800c518 <_dtoa_r+0x3d0>
 800c516:	e087      	b.n	800c628 <_dtoa_r+0x4e0>
 800c518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	dd41      	ble.n	800c5a2 <_dtoa_r+0x45a>
 800c51e:	4bbc      	ldr	r3, [pc, #752]	; (800c810 <_dtoa_r+0x6c8>)
 800c520:	2200      	movs	r2, #0
 800c522:	0020      	movs	r0, r4
 800c524:	0029      	movs	r1, r5
 800c526:	f7f5 fc9b 	bl	8001e60 <__aeabi_dmul>
 800c52a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c52c:	9006      	str	r0, [sp, #24]
 800c52e:	9107      	str	r1, [sp, #28]
 800c530:	3301      	adds	r3, #1
 800c532:	930e      	str	r3, [sp, #56]	; 0x38
 800c534:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c536:	1e7e      	subs	r6, r7, #1
 800c538:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c53a:	9310      	str	r3, [sp, #64]	; 0x40
 800c53c:	f7f6 fa9c 	bl	8002a78 <__aeabi_i2d>
 800c540:	9a06      	ldr	r2, [sp, #24]
 800c542:	9b07      	ldr	r3, [sp, #28]
 800c544:	f7f5 fc8c 	bl	8001e60 <__aeabi_dmul>
 800c548:	2200      	movs	r2, #0
 800c54a:	4bb2      	ldr	r3, [pc, #712]	; (800c814 <_dtoa_r+0x6cc>)
 800c54c:	f7f4 fd62 	bl	8001014 <__aeabi_dadd>
 800c550:	4ab1      	ldr	r2, [pc, #708]	; (800c818 <_dtoa_r+0x6d0>)
 800c552:	900e      	str	r0, [sp, #56]	; 0x38
 800c554:	910f      	str	r1, [sp, #60]	; 0x3c
 800c556:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800c558:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c55a:	4694      	mov	ip, r2
 800c55c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c55e:	4463      	add	r3, ip
 800c560:	9315      	str	r3, [sp, #84]	; 0x54
 800c562:	001d      	movs	r5, r3
 800c564:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c566:	2b00      	cmp	r3, #0
 800c568:	d161      	bne.n	800c62e <_dtoa_r+0x4e6>
 800c56a:	9806      	ldr	r0, [sp, #24]
 800c56c:	9907      	ldr	r1, [sp, #28]
 800c56e:	2200      	movs	r2, #0
 800c570:	4baa      	ldr	r3, [pc, #680]	; (800c81c <_dtoa_r+0x6d4>)
 800c572:	f7f5 fee7 	bl	8002344 <__aeabi_dsub>
 800c576:	0022      	movs	r2, r4
 800c578:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c57a:	9006      	str	r0, [sp, #24]
 800c57c:	9107      	str	r1, [sp, #28]
 800c57e:	f7f3 ff79 	bl	8000474 <__aeabi_dcmpgt>
 800c582:	2800      	cmp	r0, #0
 800c584:	d000      	beq.n	800c588 <_dtoa_r+0x440>
 800c586:	e2a8      	b.n	800cada <_dtoa_r+0x992>
 800c588:	48a5      	ldr	r0, [pc, #660]	; (800c820 <_dtoa_r+0x6d8>)
 800c58a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c58c:	4684      	mov	ip, r0
 800c58e:	4461      	add	r1, ip
 800c590:	000b      	movs	r3, r1
 800c592:	9806      	ldr	r0, [sp, #24]
 800c594:	9907      	ldr	r1, [sp, #28]
 800c596:	0022      	movs	r2, r4
 800c598:	f7f3 ff58 	bl	800044c <__aeabi_dcmplt>
 800c59c:	2800      	cmp	r0, #0
 800c59e:	d000      	beq.n	800c5a2 <_dtoa_r+0x45a>
 800c5a0:	e295      	b.n	800cace <_dtoa_r+0x986>
 800c5a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c5a4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c5a6:	9306      	str	r3, [sp, #24]
 800c5a8:	9407      	str	r4, [sp, #28]
 800c5aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	da00      	bge.n	800c5b2 <_dtoa_r+0x46a>
 800c5b0:	e15c      	b.n	800c86c <_dtoa_r+0x724>
 800c5b2:	2f0e      	cmp	r7, #14
 800c5b4:	dd00      	ble.n	800c5b8 <_dtoa_r+0x470>
 800c5b6:	e159      	b.n	800c86c <_dtoa_r+0x724>
 800c5b8:	4b93      	ldr	r3, [pc, #588]	; (800c808 <_dtoa_r+0x6c0>)
 800c5ba:	00fa      	lsls	r2, r7, #3
 800c5bc:	189b      	adds	r3, r3, r2
 800c5be:	685c      	ldr	r4, [r3, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	9304      	str	r3, [sp, #16]
 800c5c4:	9405      	str	r4, [sp, #20]
 800c5c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	db00      	blt.n	800c5ce <_dtoa_r+0x486>
 800c5cc:	e0d8      	b.n	800c780 <_dtoa_r+0x638>
 800c5ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	dd00      	ble.n	800c5d6 <_dtoa_r+0x48e>
 800c5d4:	e0d4      	b.n	800c780 <_dtoa_r+0x638>
 800c5d6:	d000      	beq.n	800c5da <_dtoa_r+0x492>
 800c5d8:	e27d      	b.n	800cad6 <_dtoa_r+0x98e>
 800c5da:	9804      	ldr	r0, [sp, #16]
 800c5dc:	9905      	ldr	r1, [sp, #20]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	4b8e      	ldr	r3, [pc, #568]	; (800c81c <_dtoa_r+0x6d4>)
 800c5e2:	f7f5 fc3d 	bl	8001e60 <__aeabi_dmul>
 800c5e6:	9a06      	ldr	r2, [sp, #24]
 800c5e8:	9b07      	ldr	r3, [sp, #28]
 800c5ea:	f7f3 ff4d 	bl	8000488 <__aeabi_dcmpge>
 800c5ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5f0:	9304      	str	r3, [sp, #16]
 800c5f2:	001e      	movs	r6, r3
 800c5f4:	2800      	cmp	r0, #0
 800c5f6:	d000      	beq.n	800c5fa <_dtoa_r+0x4b2>
 800c5f8:	e24f      	b.n	800ca9a <_dtoa_r+0x952>
 800c5fa:	9b08      	ldr	r3, [sp, #32]
 800c5fc:	9a08      	ldr	r2, [sp, #32]
 800c5fe:	1c5d      	adds	r5, r3, #1
 800c600:	2331      	movs	r3, #49	; 0x31
 800c602:	3701      	adds	r7, #1
 800c604:	7013      	strb	r3, [r2, #0]
 800c606:	e24b      	b.n	800caa0 <_dtoa_r+0x958>
 800c608:	4234      	tst	r4, r6
 800c60a:	d00a      	beq.n	800c622 <_dtoa_r+0x4da>
 800c60c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c60e:	4a85      	ldr	r2, [pc, #532]	; (800c824 <_dtoa_r+0x6dc>)
 800c610:	3301      	adds	r3, #1
 800c612:	930e      	str	r3, [sp, #56]	; 0x38
 800c614:	00eb      	lsls	r3, r5, #3
 800c616:	189b      	adds	r3, r3, r2
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	f7f5 fc20 	bl	8001e60 <__aeabi_dmul>
 800c620:	0033      	movs	r3, r6
 800c622:	1064      	asrs	r4, r4, #1
 800c624:	3501      	adds	r5, #1
 800c626:	e75f      	b.n	800c4e8 <_dtoa_r+0x3a0>
 800c628:	003e      	movs	r6, r7
 800c62a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c62c:	e784      	b.n	800c538 <_dtoa_r+0x3f0>
 800c62e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c630:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c632:	1e5a      	subs	r2, r3, #1
 800c634:	4b74      	ldr	r3, [pc, #464]	; (800c808 <_dtoa_r+0x6c0>)
 800c636:	00d2      	lsls	r2, r2, #3
 800c638:	189b      	adds	r3, r3, r2
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	2900      	cmp	r1, #0
 800c640:	d049      	beq.n	800c6d6 <_dtoa_r+0x58e>
 800c642:	2000      	movs	r0, #0
 800c644:	4978      	ldr	r1, [pc, #480]	; (800c828 <_dtoa_r+0x6e0>)
 800c646:	f7f5 f801 	bl	800164c <__aeabi_ddiv>
 800c64a:	002b      	movs	r3, r5
 800c64c:	0022      	movs	r2, r4
 800c64e:	f7f5 fe79 	bl	8002344 <__aeabi_dsub>
 800c652:	9b08      	ldr	r3, [sp, #32]
 800c654:	900e      	str	r0, [sp, #56]	; 0x38
 800c656:	910f      	str	r1, [sp, #60]	; 0x3c
 800c658:	9315      	str	r3, [sp, #84]	; 0x54
 800c65a:	9806      	ldr	r0, [sp, #24]
 800c65c:	9907      	ldr	r1, [sp, #28]
 800c65e:	f7f6 f9d5 	bl	8002a0c <__aeabi_d2iz>
 800c662:	0004      	movs	r4, r0
 800c664:	f7f6 fa08 	bl	8002a78 <__aeabi_i2d>
 800c668:	0002      	movs	r2, r0
 800c66a:	000b      	movs	r3, r1
 800c66c:	9806      	ldr	r0, [sp, #24]
 800c66e:	9907      	ldr	r1, [sp, #28]
 800c670:	f7f5 fe68 	bl	8002344 <__aeabi_dsub>
 800c674:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c676:	3430      	adds	r4, #48	; 0x30
 800c678:	1c5d      	adds	r5, r3, #1
 800c67a:	701c      	strb	r4, [r3, #0]
 800c67c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c67e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c680:	9006      	str	r0, [sp, #24]
 800c682:	9107      	str	r1, [sp, #28]
 800c684:	f7f3 fee2 	bl	800044c <__aeabi_dcmplt>
 800c688:	2800      	cmp	r0, #0
 800c68a:	d16c      	bne.n	800c766 <_dtoa_r+0x61e>
 800c68c:	9a06      	ldr	r2, [sp, #24]
 800c68e:	9b07      	ldr	r3, [sp, #28]
 800c690:	2000      	movs	r0, #0
 800c692:	495e      	ldr	r1, [pc, #376]	; (800c80c <_dtoa_r+0x6c4>)
 800c694:	f7f5 fe56 	bl	8002344 <__aeabi_dsub>
 800c698:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c69a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c69c:	f7f3 fed6 	bl	800044c <__aeabi_dcmplt>
 800c6a0:	2800      	cmp	r0, #0
 800c6a2:	d000      	beq.n	800c6a6 <_dtoa_r+0x55e>
 800c6a4:	e0c3      	b.n	800c82e <_dtoa_r+0x6e6>
 800c6a6:	9b08      	ldr	r3, [sp, #32]
 800c6a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c6aa:	1aeb      	subs	r3, r5, r3
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	dc00      	bgt.n	800c6b2 <_dtoa_r+0x56a>
 800c6b0:	e777      	b.n	800c5a2 <_dtoa_r+0x45a>
 800c6b2:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c6b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	4b55      	ldr	r3, [pc, #340]	; (800c810 <_dtoa_r+0x6c8>)
 800c6ba:	f7f5 fbd1 	bl	8001e60 <__aeabi_dmul>
 800c6be:	2200      	movs	r2, #0
 800c6c0:	900e      	str	r0, [sp, #56]	; 0x38
 800c6c2:	910f      	str	r1, [sp, #60]	; 0x3c
 800c6c4:	9806      	ldr	r0, [sp, #24]
 800c6c6:	9907      	ldr	r1, [sp, #28]
 800c6c8:	4b51      	ldr	r3, [pc, #324]	; (800c810 <_dtoa_r+0x6c8>)
 800c6ca:	f7f5 fbc9 	bl	8001e60 <__aeabi_dmul>
 800c6ce:	9515      	str	r5, [sp, #84]	; 0x54
 800c6d0:	9006      	str	r0, [sp, #24]
 800c6d2:	9107      	str	r1, [sp, #28]
 800c6d4:	e7c1      	b.n	800c65a <_dtoa_r+0x512>
 800c6d6:	0020      	movs	r0, r4
 800c6d8:	0029      	movs	r1, r5
 800c6da:	f7f5 fbc1 	bl	8001e60 <__aeabi_dmul>
 800c6de:	9c08      	ldr	r4, [sp, #32]
 800c6e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c6e2:	0023      	movs	r3, r4
 800c6e4:	4694      	mov	ip, r2
 800c6e6:	900e      	str	r0, [sp, #56]	; 0x38
 800c6e8:	910f      	str	r1, [sp, #60]	; 0x3c
 800c6ea:	4463      	add	r3, ip
 800c6ec:	9315      	str	r3, [sp, #84]	; 0x54
 800c6ee:	9806      	ldr	r0, [sp, #24]
 800c6f0:	9907      	ldr	r1, [sp, #28]
 800c6f2:	f7f6 f98b 	bl	8002a0c <__aeabi_d2iz>
 800c6f6:	0005      	movs	r5, r0
 800c6f8:	f7f6 f9be 	bl	8002a78 <__aeabi_i2d>
 800c6fc:	000b      	movs	r3, r1
 800c6fe:	0002      	movs	r2, r0
 800c700:	9806      	ldr	r0, [sp, #24]
 800c702:	9907      	ldr	r1, [sp, #28]
 800c704:	f7f5 fe1e 	bl	8002344 <__aeabi_dsub>
 800c708:	3530      	adds	r5, #48	; 0x30
 800c70a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c70c:	7025      	strb	r5, [r4, #0]
 800c70e:	3401      	adds	r4, #1
 800c710:	9006      	str	r0, [sp, #24]
 800c712:	9107      	str	r1, [sp, #28]
 800c714:	42a3      	cmp	r3, r4
 800c716:	d12a      	bne.n	800c76e <_dtoa_r+0x626>
 800c718:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c71a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c71c:	9a08      	ldr	r2, [sp, #32]
 800c71e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c720:	4694      	mov	ip, r2
 800c722:	4463      	add	r3, ip
 800c724:	2200      	movs	r2, #0
 800c726:	001d      	movs	r5, r3
 800c728:	4b3f      	ldr	r3, [pc, #252]	; (800c828 <_dtoa_r+0x6e0>)
 800c72a:	f7f4 fc73 	bl	8001014 <__aeabi_dadd>
 800c72e:	0002      	movs	r2, r0
 800c730:	000b      	movs	r3, r1
 800c732:	9806      	ldr	r0, [sp, #24]
 800c734:	9907      	ldr	r1, [sp, #28]
 800c736:	f7f3 fe9d 	bl	8000474 <__aeabi_dcmpgt>
 800c73a:	2800      	cmp	r0, #0
 800c73c:	d000      	beq.n	800c740 <_dtoa_r+0x5f8>
 800c73e:	e076      	b.n	800c82e <_dtoa_r+0x6e6>
 800c740:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c742:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c744:	2000      	movs	r0, #0
 800c746:	4938      	ldr	r1, [pc, #224]	; (800c828 <_dtoa_r+0x6e0>)
 800c748:	f7f5 fdfc 	bl	8002344 <__aeabi_dsub>
 800c74c:	0002      	movs	r2, r0
 800c74e:	000b      	movs	r3, r1
 800c750:	9806      	ldr	r0, [sp, #24]
 800c752:	9907      	ldr	r1, [sp, #28]
 800c754:	f7f3 fe7a 	bl	800044c <__aeabi_dcmplt>
 800c758:	2800      	cmp	r0, #0
 800c75a:	d100      	bne.n	800c75e <_dtoa_r+0x616>
 800c75c:	e721      	b.n	800c5a2 <_dtoa_r+0x45a>
 800c75e:	1e6b      	subs	r3, r5, #1
 800c760:	781a      	ldrb	r2, [r3, #0]
 800c762:	2a30      	cmp	r2, #48	; 0x30
 800c764:	d001      	beq.n	800c76a <_dtoa_r+0x622>
 800c766:	0037      	movs	r7, r6
 800c768:	e03f      	b.n	800c7ea <_dtoa_r+0x6a2>
 800c76a:	001d      	movs	r5, r3
 800c76c:	e7f7      	b.n	800c75e <_dtoa_r+0x616>
 800c76e:	9806      	ldr	r0, [sp, #24]
 800c770:	9907      	ldr	r1, [sp, #28]
 800c772:	2200      	movs	r2, #0
 800c774:	4b26      	ldr	r3, [pc, #152]	; (800c810 <_dtoa_r+0x6c8>)
 800c776:	f7f5 fb73 	bl	8001e60 <__aeabi_dmul>
 800c77a:	9006      	str	r0, [sp, #24]
 800c77c:	9107      	str	r1, [sp, #28]
 800c77e:	e7b6      	b.n	800c6ee <_dtoa_r+0x5a6>
 800c780:	9e08      	ldr	r6, [sp, #32]
 800c782:	9a04      	ldr	r2, [sp, #16]
 800c784:	9b05      	ldr	r3, [sp, #20]
 800c786:	9806      	ldr	r0, [sp, #24]
 800c788:	9907      	ldr	r1, [sp, #28]
 800c78a:	f7f4 ff5f 	bl	800164c <__aeabi_ddiv>
 800c78e:	f7f6 f93d 	bl	8002a0c <__aeabi_d2iz>
 800c792:	0004      	movs	r4, r0
 800c794:	f7f6 f970 	bl	8002a78 <__aeabi_i2d>
 800c798:	9a04      	ldr	r2, [sp, #16]
 800c79a:	9b05      	ldr	r3, [sp, #20]
 800c79c:	f7f5 fb60 	bl	8001e60 <__aeabi_dmul>
 800c7a0:	0002      	movs	r2, r0
 800c7a2:	000b      	movs	r3, r1
 800c7a4:	9806      	ldr	r0, [sp, #24]
 800c7a6:	9907      	ldr	r1, [sp, #28]
 800c7a8:	f7f5 fdcc 	bl	8002344 <__aeabi_dsub>
 800c7ac:	0023      	movs	r3, r4
 800c7ae:	3330      	adds	r3, #48	; 0x30
 800c7b0:	7033      	strb	r3, [r6, #0]
 800c7b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7b4:	9b08      	ldr	r3, [sp, #32]
 800c7b6:	1c75      	adds	r5, r6, #1
 800c7b8:	1aeb      	subs	r3, r5, r3
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d148      	bne.n	800c850 <_dtoa_r+0x708>
 800c7be:	0002      	movs	r2, r0
 800c7c0:	000b      	movs	r3, r1
 800c7c2:	f7f4 fc27 	bl	8001014 <__aeabi_dadd>
 800c7c6:	9a04      	ldr	r2, [sp, #16]
 800c7c8:	9b05      	ldr	r3, [sp, #20]
 800c7ca:	9006      	str	r0, [sp, #24]
 800c7cc:	9107      	str	r1, [sp, #28]
 800c7ce:	f7f3 fe51 	bl	8000474 <__aeabi_dcmpgt>
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	d12a      	bne.n	800c82c <_dtoa_r+0x6e4>
 800c7d6:	9a04      	ldr	r2, [sp, #16]
 800c7d8:	9b05      	ldr	r3, [sp, #20]
 800c7da:	9806      	ldr	r0, [sp, #24]
 800c7dc:	9907      	ldr	r1, [sp, #28]
 800c7de:	f7f3 fe2f 	bl	8000440 <__aeabi_dcmpeq>
 800c7e2:	2800      	cmp	r0, #0
 800c7e4:	d001      	beq.n	800c7ea <_dtoa_r+0x6a2>
 800c7e6:	07e3      	lsls	r3, r4, #31
 800c7e8:	d420      	bmi.n	800c82c <_dtoa_r+0x6e4>
 800c7ea:	9903      	ldr	r1, [sp, #12]
 800c7ec:	9802      	ldr	r0, [sp, #8]
 800c7ee:	f001 f824 	bl	800d83a <_Bfree>
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	702b      	strb	r3, [r5, #0]
 800c7f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c7f8:	3701      	adds	r7, #1
 800c7fa:	601f      	str	r7, [r3, #0]
 800c7fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d100      	bne.n	800c804 <_dtoa_r+0x6bc>
 800c802:	e4e6      	b.n	800c1d2 <_dtoa_r+0x8a>
 800c804:	601d      	str	r5, [r3, #0]
 800c806:	e4e4      	b.n	800c1d2 <_dtoa_r+0x8a>
 800c808:	0800f080 	.word	0x0800f080
 800c80c:	3ff00000 	.word	0x3ff00000
 800c810:	40240000 	.word	0x40240000
 800c814:	401c0000 	.word	0x401c0000
 800c818:	fcc00000 	.word	0xfcc00000
 800c81c:	40140000 	.word	0x40140000
 800c820:	7cc00000 	.word	0x7cc00000
 800c824:	0800f058 	.word	0x0800f058
 800c828:	3fe00000 	.word	0x3fe00000
 800c82c:	003e      	movs	r6, r7
 800c82e:	1e6b      	subs	r3, r5, #1
 800c830:	781a      	ldrb	r2, [r3, #0]
 800c832:	2a39      	cmp	r2, #57	; 0x39
 800c834:	d106      	bne.n	800c844 <_dtoa_r+0x6fc>
 800c836:	9a08      	ldr	r2, [sp, #32]
 800c838:	429a      	cmp	r2, r3
 800c83a:	d107      	bne.n	800c84c <_dtoa_r+0x704>
 800c83c:	2330      	movs	r3, #48	; 0x30
 800c83e:	7013      	strb	r3, [r2, #0]
 800c840:	0013      	movs	r3, r2
 800c842:	3601      	adds	r6, #1
 800c844:	781a      	ldrb	r2, [r3, #0]
 800c846:	3201      	adds	r2, #1
 800c848:	701a      	strb	r2, [r3, #0]
 800c84a:	e78c      	b.n	800c766 <_dtoa_r+0x61e>
 800c84c:	001d      	movs	r5, r3
 800c84e:	e7ee      	b.n	800c82e <_dtoa_r+0x6e6>
 800c850:	2200      	movs	r2, #0
 800c852:	4ba4      	ldr	r3, [pc, #656]	; (800cae4 <_dtoa_r+0x99c>)
 800c854:	f7f5 fb04 	bl	8001e60 <__aeabi_dmul>
 800c858:	2200      	movs	r2, #0
 800c85a:	2300      	movs	r3, #0
 800c85c:	9006      	str	r0, [sp, #24]
 800c85e:	9107      	str	r1, [sp, #28]
 800c860:	002e      	movs	r6, r5
 800c862:	f7f3 fded 	bl	8000440 <__aeabi_dcmpeq>
 800c866:	2800      	cmp	r0, #0
 800c868:	d08b      	beq.n	800c782 <_dtoa_r+0x63a>
 800c86a:	e7be      	b.n	800c7ea <_dtoa_r+0x6a2>
 800c86c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c86e:	2a00      	cmp	r2, #0
 800c870:	d100      	bne.n	800c874 <_dtoa_r+0x72c>
 800c872:	e0da      	b.n	800ca2a <_dtoa_r+0x8e2>
 800c874:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c876:	2a01      	cmp	r2, #1
 800c878:	dd00      	ble.n	800c87c <_dtoa_r+0x734>
 800c87a:	e0bd      	b.n	800c9f8 <_dtoa_r+0x8b0>
 800c87c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c87e:	2a00      	cmp	r2, #0
 800c880:	d100      	bne.n	800c884 <_dtoa_r+0x73c>
 800c882:	e0b5      	b.n	800c9f0 <_dtoa_r+0x8a8>
 800c884:	4a98      	ldr	r2, [pc, #608]	; (800cae8 <_dtoa_r+0x9a0>)
 800c886:	189b      	adds	r3, r3, r2
 800c888:	9d04      	ldr	r5, [sp, #16]
 800c88a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c88c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c88e:	2101      	movs	r1, #1
 800c890:	18d2      	adds	r2, r2, r3
 800c892:	920a      	str	r2, [sp, #40]	; 0x28
 800c894:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c896:	9802      	ldr	r0, [sp, #8]
 800c898:	18d3      	adds	r3, r2, r3
 800c89a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c89c:	f001 f8ab 	bl	800d9f6 <__i2b>
 800c8a0:	0006      	movs	r6, r0
 800c8a2:	2c00      	cmp	r4, #0
 800c8a4:	dd0e      	ble.n	800c8c4 <_dtoa_r+0x77c>
 800c8a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	dd0b      	ble.n	800c8c4 <_dtoa_r+0x77c>
 800c8ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c8ae:	0023      	movs	r3, r4
 800c8b0:	4294      	cmp	r4, r2
 800c8b2:	dd00      	ble.n	800c8b6 <_dtoa_r+0x76e>
 800c8b4:	0013      	movs	r3, r2
 800c8b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8b8:	1ae4      	subs	r4, r4, r3
 800c8ba:	1ad2      	subs	r2, r2, r3
 800c8bc:	920a      	str	r2, [sp, #40]	; 0x28
 800c8be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c8c0:	1ad3      	subs	r3, r2, r3
 800c8c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c8c4:	9b04      	ldr	r3, [sp, #16]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d01f      	beq.n	800c90a <_dtoa_r+0x7c2>
 800c8ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d100      	bne.n	800c8d2 <_dtoa_r+0x78a>
 800c8d0:	e0af      	b.n	800ca32 <_dtoa_r+0x8ea>
 800c8d2:	2d00      	cmp	r5, #0
 800c8d4:	d011      	beq.n	800c8fa <_dtoa_r+0x7b2>
 800c8d6:	0031      	movs	r1, r6
 800c8d8:	002a      	movs	r2, r5
 800c8da:	9802      	ldr	r0, [sp, #8]
 800c8dc:	f001 f924 	bl	800db28 <__pow5mult>
 800c8e0:	9a03      	ldr	r2, [sp, #12]
 800c8e2:	0001      	movs	r1, r0
 800c8e4:	0006      	movs	r6, r0
 800c8e6:	9802      	ldr	r0, [sp, #8]
 800c8e8:	f001 f88e 	bl	800da08 <__multiply>
 800c8ec:	9903      	ldr	r1, [sp, #12]
 800c8ee:	9010      	str	r0, [sp, #64]	; 0x40
 800c8f0:	9802      	ldr	r0, [sp, #8]
 800c8f2:	f000 ffa2 	bl	800d83a <_Bfree>
 800c8f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c8f8:	9303      	str	r3, [sp, #12]
 800c8fa:	9b04      	ldr	r3, [sp, #16]
 800c8fc:	1b5a      	subs	r2, r3, r5
 800c8fe:	d004      	beq.n	800c90a <_dtoa_r+0x7c2>
 800c900:	9903      	ldr	r1, [sp, #12]
 800c902:	9802      	ldr	r0, [sp, #8]
 800c904:	f001 f910 	bl	800db28 <__pow5mult>
 800c908:	9003      	str	r0, [sp, #12]
 800c90a:	2101      	movs	r1, #1
 800c90c:	9802      	ldr	r0, [sp, #8]
 800c90e:	f001 f872 	bl	800d9f6 <__i2b>
 800c912:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c914:	9004      	str	r0, [sp, #16]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d100      	bne.n	800c91c <_dtoa_r+0x7d4>
 800c91a:	e1e3      	b.n	800cce4 <_dtoa_r+0xb9c>
 800c91c:	001a      	movs	r2, r3
 800c91e:	0001      	movs	r1, r0
 800c920:	9802      	ldr	r0, [sp, #8]
 800c922:	f001 f901 	bl	800db28 <__pow5mult>
 800c926:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c928:	9004      	str	r0, [sp, #16]
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	dd00      	ble.n	800c930 <_dtoa_r+0x7e8>
 800c92e:	e082      	b.n	800ca36 <_dtoa_r+0x8ee>
 800c930:	2500      	movs	r5, #0
 800c932:	9b06      	ldr	r3, [sp, #24]
 800c934:	42ab      	cmp	r3, r5
 800c936:	d10e      	bne.n	800c956 <_dtoa_r+0x80e>
 800c938:	9b07      	ldr	r3, [sp, #28]
 800c93a:	031b      	lsls	r3, r3, #12
 800c93c:	42ab      	cmp	r3, r5
 800c93e:	d10a      	bne.n	800c956 <_dtoa_r+0x80e>
 800c940:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c942:	9a07      	ldr	r2, [sp, #28]
 800c944:	4213      	tst	r3, r2
 800c946:	d006      	beq.n	800c956 <_dtoa_r+0x80e>
 800c948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c94a:	3501      	adds	r5, #1
 800c94c:	3301      	adds	r3, #1
 800c94e:	930a      	str	r3, [sp, #40]	; 0x28
 800c950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c952:	3301      	adds	r3, #1
 800c954:	930b      	str	r3, [sp, #44]	; 0x2c
 800c956:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c958:	2001      	movs	r0, #1
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d16c      	bne.n	800ca38 <_dtoa_r+0x8f0>
 800c95e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c960:	1818      	adds	r0, r3, r0
 800c962:	231f      	movs	r3, #31
 800c964:	4018      	ands	r0, r3
 800c966:	d07e      	beq.n	800ca66 <_dtoa_r+0x91e>
 800c968:	3301      	adds	r3, #1
 800c96a:	1a1b      	subs	r3, r3, r0
 800c96c:	2b04      	cmp	r3, #4
 800c96e:	dd70      	ble.n	800ca52 <_dtoa_r+0x90a>
 800c970:	231c      	movs	r3, #28
 800c972:	1a18      	subs	r0, r3, r0
 800c974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c976:	1824      	adds	r4, r4, r0
 800c978:	181b      	adds	r3, r3, r0
 800c97a:	930a      	str	r3, [sp, #40]	; 0x28
 800c97c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c97e:	181b      	adds	r3, r3, r0
 800c980:	930b      	str	r3, [sp, #44]	; 0x2c
 800c982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c984:	2b00      	cmp	r3, #0
 800c986:	dd05      	ble.n	800c994 <_dtoa_r+0x84c>
 800c988:	001a      	movs	r2, r3
 800c98a:	9903      	ldr	r1, [sp, #12]
 800c98c:	9802      	ldr	r0, [sp, #8]
 800c98e:	f001 f91d 	bl	800dbcc <__lshift>
 800c992:	9003      	str	r0, [sp, #12]
 800c994:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c996:	2b00      	cmp	r3, #0
 800c998:	dd05      	ble.n	800c9a6 <_dtoa_r+0x85e>
 800c99a:	001a      	movs	r2, r3
 800c99c:	9904      	ldr	r1, [sp, #16]
 800c99e:	9802      	ldr	r0, [sp, #8]
 800c9a0:	f001 f914 	bl	800dbcc <__lshift>
 800c9a4:	9004      	str	r0, [sp, #16]
 800c9a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d05e      	beq.n	800ca6a <_dtoa_r+0x922>
 800c9ac:	9904      	ldr	r1, [sp, #16]
 800c9ae:	9803      	ldr	r0, [sp, #12]
 800c9b0:	f001 f95e 	bl	800dc70 <__mcmp>
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	da58      	bge.n	800ca6a <_dtoa_r+0x922>
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	220a      	movs	r2, #10
 800c9bc:	9903      	ldr	r1, [sp, #12]
 800c9be:	9802      	ldr	r0, [sp, #8]
 800c9c0:	f000 ff54 	bl	800d86c <__multadd>
 800c9c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9c6:	3f01      	subs	r7, #1
 800c9c8:	9003      	str	r0, [sp, #12]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d100      	bne.n	800c9d0 <_dtoa_r+0x888>
 800c9ce:	e190      	b.n	800ccf2 <_dtoa_r+0xbaa>
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	0031      	movs	r1, r6
 800c9d4:	220a      	movs	r2, #10
 800c9d6:	9802      	ldr	r0, [sp, #8]
 800c9d8:	f000 ff48 	bl	800d86c <__multadd>
 800c9dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9de:	0006      	movs	r6, r0
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	dd00      	ble.n	800c9e6 <_dtoa_r+0x89e>
 800c9e4:	e088      	b.n	800caf8 <_dtoa_r+0x9b0>
 800c9e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c9e8:	2b02      	cmp	r3, #2
 800c9ea:	dc00      	bgt.n	800c9ee <_dtoa_r+0x8a6>
 800c9ec:	e084      	b.n	800caf8 <_dtoa_r+0x9b0>
 800c9ee:	e044      	b.n	800ca7a <_dtoa_r+0x932>
 800c9f0:	2336      	movs	r3, #54	; 0x36
 800c9f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c9f4:	1a9b      	subs	r3, r3, r2
 800c9f6:	e747      	b.n	800c888 <_dtoa_r+0x740>
 800c9f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9fa:	1e5d      	subs	r5, r3, #1
 800c9fc:	9b04      	ldr	r3, [sp, #16]
 800c9fe:	42ab      	cmp	r3, r5
 800ca00:	db08      	blt.n	800ca14 <_dtoa_r+0x8cc>
 800ca02:	1b5d      	subs	r5, r3, r5
 800ca04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	da0c      	bge.n	800ca24 <_dtoa_r+0x8dc>
 800ca0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca0e:	1a9c      	subs	r4, r3, r2
 800ca10:	2300      	movs	r3, #0
 800ca12:	e73b      	b.n	800c88c <_dtoa_r+0x744>
 800ca14:	9b04      	ldr	r3, [sp, #16]
 800ca16:	9504      	str	r5, [sp, #16]
 800ca18:	1aea      	subs	r2, r5, r3
 800ca1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca1c:	2500      	movs	r5, #0
 800ca1e:	189b      	adds	r3, r3, r2
 800ca20:	9311      	str	r3, [sp, #68]	; 0x44
 800ca22:	e7ef      	b.n	800ca04 <_dtoa_r+0x8bc>
 800ca24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ca26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca28:	e730      	b.n	800c88c <_dtoa_r+0x744>
 800ca2a:	9d04      	ldr	r5, [sp, #16]
 800ca2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ca2e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800ca30:	e737      	b.n	800c8a2 <_dtoa_r+0x75a>
 800ca32:	9a04      	ldr	r2, [sp, #16]
 800ca34:	e764      	b.n	800c900 <_dtoa_r+0x7b8>
 800ca36:	2500      	movs	r5, #0
 800ca38:	9b04      	ldr	r3, [sp, #16]
 800ca3a:	9a04      	ldr	r2, [sp, #16]
 800ca3c:	691b      	ldr	r3, [r3, #16]
 800ca3e:	9310      	str	r3, [sp, #64]	; 0x40
 800ca40:	3303      	adds	r3, #3
 800ca42:	009b      	lsls	r3, r3, #2
 800ca44:	18d3      	adds	r3, r2, r3
 800ca46:	6858      	ldr	r0, [r3, #4]
 800ca48:	f000 ff8c 	bl	800d964 <__hi0bits>
 800ca4c:	2320      	movs	r3, #32
 800ca4e:	1a18      	subs	r0, r3, r0
 800ca50:	e785      	b.n	800c95e <_dtoa_r+0x816>
 800ca52:	2b04      	cmp	r3, #4
 800ca54:	d095      	beq.n	800c982 <_dtoa_r+0x83a>
 800ca56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca58:	331c      	adds	r3, #28
 800ca5a:	18d2      	adds	r2, r2, r3
 800ca5c:	920a      	str	r2, [sp, #40]	; 0x28
 800ca5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ca60:	18e4      	adds	r4, r4, r3
 800ca62:	18d3      	adds	r3, r2, r3
 800ca64:	e78c      	b.n	800c980 <_dtoa_r+0x838>
 800ca66:	0003      	movs	r3, r0
 800ca68:	e7f5      	b.n	800ca56 <_dtoa_r+0x90e>
 800ca6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	dc3d      	bgt.n	800caec <_dtoa_r+0x9a4>
 800ca70:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ca72:	2b02      	cmp	r3, #2
 800ca74:	dd3a      	ble.n	800caec <_dtoa_r+0x9a4>
 800ca76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca78:	930c      	str	r3, [sp, #48]	; 0x30
 800ca7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d10c      	bne.n	800ca9a <_dtoa_r+0x952>
 800ca80:	9904      	ldr	r1, [sp, #16]
 800ca82:	2205      	movs	r2, #5
 800ca84:	9802      	ldr	r0, [sp, #8]
 800ca86:	f000 fef1 	bl	800d86c <__multadd>
 800ca8a:	9004      	str	r0, [sp, #16]
 800ca8c:	0001      	movs	r1, r0
 800ca8e:	9803      	ldr	r0, [sp, #12]
 800ca90:	f001 f8ee 	bl	800dc70 <__mcmp>
 800ca94:	2800      	cmp	r0, #0
 800ca96:	dd00      	ble.n	800ca9a <_dtoa_r+0x952>
 800ca98:	e5af      	b.n	800c5fa <_dtoa_r+0x4b2>
 800ca9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca9c:	9d08      	ldr	r5, [sp, #32]
 800ca9e:	43df      	mvns	r7, r3
 800caa0:	2300      	movs	r3, #0
 800caa2:	9309      	str	r3, [sp, #36]	; 0x24
 800caa4:	9904      	ldr	r1, [sp, #16]
 800caa6:	9802      	ldr	r0, [sp, #8]
 800caa8:	f000 fec7 	bl	800d83a <_Bfree>
 800caac:	2e00      	cmp	r6, #0
 800caae:	d100      	bne.n	800cab2 <_dtoa_r+0x96a>
 800cab0:	e69b      	b.n	800c7ea <_dtoa_r+0x6a2>
 800cab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d005      	beq.n	800cac4 <_dtoa_r+0x97c>
 800cab8:	42b3      	cmp	r3, r6
 800caba:	d003      	beq.n	800cac4 <_dtoa_r+0x97c>
 800cabc:	0019      	movs	r1, r3
 800cabe:	9802      	ldr	r0, [sp, #8]
 800cac0:	f000 febb 	bl	800d83a <_Bfree>
 800cac4:	0031      	movs	r1, r6
 800cac6:	9802      	ldr	r0, [sp, #8]
 800cac8:	f000 feb7 	bl	800d83a <_Bfree>
 800cacc:	e68d      	b.n	800c7ea <_dtoa_r+0x6a2>
 800cace:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cad0:	9304      	str	r3, [sp, #16]
 800cad2:	001e      	movs	r6, r3
 800cad4:	e7e1      	b.n	800ca9a <_dtoa_r+0x952>
 800cad6:	2300      	movs	r3, #0
 800cad8:	e7fa      	b.n	800cad0 <_dtoa_r+0x988>
 800cada:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cadc:	0037      	movs	r7, r6
 800cade:	9304      	str	r3, [sp, #16]
 800cae0:	001e      	movs	r6, r3
 800cae2:	e58a      	b.n	800c5fa <_dtoa_r+0x4b2>
 800cae4:	40240000 	.word	0x40240000
 800cae8:	00000433 	.word	0x00000433
 800caec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d100      	bne.n	800caf4 <_dtoa_r+0x9ac>
 800caf2:	e0b2      	b.n	800cc5a <_dtoa_r+0xb12>
 800caf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caf6:	930c      	str	r3, [sp, #48]	; 0x30
 800caf8:	2c00      	cmp	r4, #0
 800cafa:	dd05      	ble.n	800cb08 <_dtoa_r+0x9c0>
 800cafc:	0031      	movs	r1, r6
 800cafe:	0022      	movs	r2, r4
 800cb00:	9802      	ldr	r0, [sp, #8]
 800cb02:	f001 f863 	bl	800dbcc <__lshift>
 800cb06:	0006      	movs	r6, r0
 800cb08:	0030      	movs	r0, r6
 800cb0a:	2d00      	cmp	r5, #0
 800cb0c:	d011      	beq.n	800cb32 <_dtoa_r+0x9ea>
 800cb0e:	6871      	ldr	r1, [r6, #4]
 800cb10:	9802      	ldr	r0, [sp, #8]
 800cb12:	f000 fe5a 	bl	800d7ca <_Balloc>
 800cb16:	0031      	movs	r1, r6
 800cb18:	0004      	movs	r4, r0
 800cb1a:	6933      	ldr	r3, [r6, #16]
 800cb1c:	310c      	adds	r1, #12
 800cb1e:	1c9a      	adds	r2, r3, #2
 800cb20:	0092      	lsls	r2, r2, #2
 800cb22:	300c      	adds	r0, #12
 800cb24:	f7fd fbc9 	bl	800a2ba <memcpy>
 800cb28:	2201      	movs	r2, #1
 800cb2a:	0021      	movs	r1, r4
 800cb2c:	9802      	ldr	r0, [sp, #8]
 800cb2e:	f001 f84d 	bl	800dbcc <__lshift>
 800cb32:	9609      	str	r6, [sp, #36]	; 0x24
 800cb34:	0006      	movs	r6, r0
 800cb36:	9b08      	ldr	r3, [sp, #32]
 800cb38:	930a      	str	r3, [sp, #40]	; 0x28
 800cb3a:	9904      	ldr	r1, [sp, #16]
 800cb3c:	9803      	ldr	r0, [sp, #12]
 800cb3e:	f7ff fa7d 	bl	800c03c <quorem>
 800cb42:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb44:	900d      	str	r0, [sp, #52]	; 0x34
 800cb46:	0004      	movs	r4, r0
 800cb48:	9803      	ldr	r0, [sp, #12]
 800cb4a:	f001 f891 	bl	800dc70 <__mcmp>
 800cb4e:	0032      	movs	r2, r6
 800cb50:	9010      	str	r0, [sp, #64]	; 0x40
 800cb52:	9904      	ldr	r1, [sp, #16]
 800cb54:	9802      	ldr	r0, [sp, #8]
 800cb56:	f001 f8a5 	bl	800dca4 <__mdiff>
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb5e:	68c3      	ldr	r3, [r0, #12]
 800cb60:	3430      	adds	r4, #48	; 0x30
 800cb62:	0005      	movs	r5, r0
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d104      	bne.n	800cb72 <_dtoa_r+0xa2a>
 800cb68:	0001      	movs	r1, r0
 800cb6a:	9803      	ldr	r0, [sp, #12]
 800cb6c:	f001 f880 	bl	800dc70 <__mcmp>
 800cb70:	900b      	str	r0, [sp, #44]	; 0x2c
 800cb72:	0029      	movs	r1, r5
 800cb74:	9802      	ldr	r0, [sp, #8]
 800cb76:	f000 fe60 	bl	800d83a <_Bfree>
 800cb7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cb7e:	4313      	orrs	r3, r2
 800cb80:	d10e      	bne.n	800cba0 <_dtoa_r+0xa58>
 800cb82:	9a06      	ldr	r2, [sp, #24]
 800cb84:	3301      	adds	r3, #1
 800cb86:	4213      	tst	r3, r2
 800cb88:	d10a      	bne.n	800cba0 <_dtoa_r+0xa58>
 800cb8a:	2c39      	cmp	r4, #57	; 0x39
 800cb8c:	d026      	beq.n	800cbdc <_dtoa_r+0xa94>
 800cb8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	dd01      	ble.n	800cb98 <_dtoa_r+0xa50>
 800cb94:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800cb96:	3431      	adds	r4, #49	; 0x31
 800cb98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb9a:	1c5d      	adds	r5, r3, #1
 800cb9c:	701c      	strb	r4, [r3, #0]
 800cb9e:	e781      	b.n	800caa4 <_dtoa_r+0x95c>
 800cba0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	db07      	blt.n	800cbb6 <_dtoa_r+0xa6e>
 800cba6:	001d      	movs	r5, r3
 800cba8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cbaa:	431d      	orrs	r5, r3
 800cbac:	d122      	bne.n	800cbf4 <_dtoa_r+0xaac>
 800cbae:	2301      	movs	r3, #1
 800cbb0:	9a06      	ldr	r2, [sp, #24]
 800cbb2:	4213      	tst	r3, r2
 800cbb4:	d11e      	bne.n	800cbf4 <_dtoa_r+0xaac>
 800cbb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	dded      	ble.n	800cb98 <_dtoa_r+0xa50>
 800cbbc:	9903      	ldr	r1, [sp, #12]
 800cbbe:	2201      	movs	r2, #1
 800cbc0:	9802      	ldr	r0, [sp, #8]
 800cbc2:	f001 f803 	bl	800dbcc <__lshift>
 800cbc6:	9904      	ldr	r1, [sp, #16]
 800cbc8:	9003      	str	r0, [sp, #12]
 800cbca:	f001 f851 	bl	800dc70 <__mcmp>
 800cbce:	2800      	cmp	r0, #0
 800cbd0:	dc02      	bgt.n	800cbd8 <_dtoa_r+0xa90>
 800cbd2:	d1e1      	bne.n	800cb98 <_dtoa_r+0xa50>
 800cbd4:	07e3      	lsls	r3, r4, #31
 800cbd6:	d5df      	bpl.n	800cb98 <_dtoa_r+0xa50>
 800cbd8:	2c39      	cmp	r4, #57	; 0x39
 800cbda:	d1db      	bne.n	800cb94 <_dtoa_r+0xa4c>
 800cbdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbe0:	1c5d      	adds	r5, r3, #1
 800cbe2:	2339      	movs	r3, #57	; 0x39
 800cbe4:	7013      	strb	r3, [r2, #0]
 800cbe6:	1e6b      	subs	r3, r5, #1
 800cbe8:	781a      	ldrb	r2, [r3, #0]
 800cbea:	2a39      	cmp	r2, #57	; 0x39
 800cbec:	d067      	beq.n	800ccbe <_dtoa_r+0xb76>
 800cbee:	3201      	adds	r2, #1
 800cbf0:	701a      	strb	r2, [r3, #0]
 800cbf2:	e757      	b.n	800caa4 <_dtoa_r+0x95c>
 800cbf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbf6:	1c5d      	adds	r5, r3, #1
 800cbf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	dd04      	ble.n	800cc08 <_dtoa_r+0xac0>
 800cbfe:	2c39      	cmp	r4, #57	; 0x39
 800cc00:	d0ec      	beq.n	800cbdc <_dtoa_r+0xa94>
 800cc02:	3401      	adds	r4, #1
 800cc04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc06:	e7c9      	b.n	800cb9c <_dtoa_r+0xa54>
 800cc08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc0c:	701c      	strb	r4, [r3, #0]
 800cc0e:	9b08      	ldr	r3, [sp, #32]
 800cc10:	1aeb      	subs	r3, r5, r3
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d03e      	beq.n	800cc94 <_dtoa_r+0xb4c>
 800cc16:	2300      	movs	r3, #0
 800cc18:	220a      	movs	r2, #10
 800cc1a:	9903      	ldr	r1, [sp, #12]
 800cc1c:	9802      	ldr	r0, [sp, #8]
 800cc1e:	f000 fe25 	bl	800d86c <__multadd>
 800cc22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc24:	9003      	str	r0, [sp, #12]
 800cc26:	42b3      	cmp	r3, r6
 800cc28:	d109      	bne.n	800cc3e <_dtoa_r+0xaf6>
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	220a      	movs	r2, #10
 800cc2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc30:	9802      	ldr	r0, [sp, #8]
 800cc32:	f000 fe1b 	bl	800d86c <__multadd>
 800cc36:	9009      	str	r0, [sp, #36]	; 0x24
 800cc38:	0006      	movs	r6, r0
 800cc3a:	950a      	str	r5, [sp, #40]	; 0x28
 800cc3c:	e77d      	b.n	800cb3a <_dtoa_r+0x9f2>
 800cc3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc40:	2300      	movs	r3, #0
 800cc42:	220a      	movs	r2, #10
 800cc44:	9802      	ldr	r0, [sp, #8]
 800cc46:	f000 fe11 	bl	800d86c <__multadd>
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	9009      	str	r0, [sp, #36]	; 0x24
 800cc4e:	220a      	movs	r2, #10
 800cc50:	0031      	movs	r1, r6
 800cc52:	9802      	ldr	r0, [sp, #8]
 800cc54:	f000 fe0a 	bl	800d86c <__multadd>
 800cc58:	e7ee      	b.n	800cc38 <_dtoa_r+0xaf0>
 800cc5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc5c:	930c      	str	r3, [sp, #48]	; 0x30
 800cc5e:	9b08      	ldr	r3, [sp, #32]
 800cc60:	9306      	str	r3, [sp, #24]
 800cc62:	9904      	ldr	r1, [sp, #16]
 800cc64:	9803      	ldr	r0, [sp, #12]
 800cc66:	f7ff f9e9 	bl	800c03c <quorem>
 800cc6a:	9b06      	ldr	r3, [sp, #24]
 800cc6c:	3030      	adds	r0, #48	; 0x30
 800cc6e:	1c5d      	adds	r5, r3, #1
 800cc70:	7018      	strb	r0, [r3, #0]
 800cc72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc74:	9b08      	ldr	r3, [sp, #32]
 800cc76:	0004      	movs	r4, r0
 800cc78:	1aeb      	subs	r3, r5, r3
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	dd08      	ble.n	800cc90 <_dtoa_r+0xb48>
 800cc7e:	2300      	movs	r3, #0
 800cc80:	220a      	movs	r2, #10
 800cc82:	9903      	ldr	r1, [sp, #12]
 800cc84:	9802      	ldr	r0, [sp, #8]
 800cc86:	f000 fdf1 	bl	800d86c <__multadd>
 800cc8a:	9506      	str	r5, [sp, #24]
 800cc8c:	9003      	str	r0, [sp, #12]
 800cc8e:	e7e8      	b.n	800cc62 <_dtoa_r+0xb1a>
 800cc90:	2300      	movs	r3, #0
 800cc92:	9309      	str	r3, [sp, #36]	; 0x24
 800cc94:	9903      	ldr	r1, [sp, #12]
 800cc96:	2201      	movs	r2, #1
 800cc98:	9802      	ldr	r0, [sp, #8]
 800cc9a:	f000 ff97 	bl	800dbcc <__lshift>
 800cc9e:	9904      	ldr	r1, [sp, #16]
 800cca0:	9003      	str	r0, [sp, #12]
 800cca2:	f000 ffe5 	bl	800dc70 <__mcmp>
 800cca6:	2800      	cmp	r0, #0
 800cca8:	dc9d      	bgt.n	800cbe6 <_dtoa_r+0xa9e>
 800ccaa:	d101      	bne.n	800ccb0 <_dtoa_r+0xb68>
 800ccac:	07e3      	lsls	r3, r4, #31
 800ccae:	d49a      	bmi.n	800cbe6 <_dtoa_r+0xa9e>
 800ccb0:	1e6b      	subs	r3, r5, #1
 800ccb2:	781a      	ldrb	r2, [r3, #0]
 800ccb4:	2a30      	cmp	r2, #48	; 0x30
 800ccb6:	d000      	beq.n	800ccba <_dtoa_r+0xb72>
 800ccb8:	e6f4      	b.n	800caa4 <_dtoa_r+0x95c>
 800ccba:	001d      	movs	r5, r3
 800ccbc:	e7f8      	b.n	800ccb0 <_dtoa_r+0xb68>
 800ccbe:	9a08      	ldr	r2, [sp, #32]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d103      	bne.n	800cccc <_dtoa_r+0xb84>
 800ccc4:	2331      	movs	r3, #49	; 0x31
 800ccc6:	3701      	adds	r7, #1
 800ccc8:	7013      	strb	r3, [r2, #0]
 800ccca:	e6eb      	b.n	800caa4 <_dtoa_r+0x95c>
 800cccc:	001d      	movs	r5, r3
 800ccce:	e78a      	b.n	800cbe6 <_dtoa_r+0xa9e>
 800ccd0:	4b0b      	ldr	r3, [pc, #44]	; (800cd00 <_dtoa_r+0xbb8>)
 800ccd2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ccd4:	9308      	str	r3, [sp, #32]
 800ccd6:	4b0b      	ldr	r3, [pc, #44]	; (800cd04 <_dtoa_r+0xbbc>)
 800ccd8:	2a00      	cmp	r2, #0
 800ccda:	d001      	beq.n	800cce0 <_dtoa_r+0xb98>
 800ccdc:	f7ff fa77 	bl	800c1ce <_dtoa_r+0x86>
 800cce0:	f7ff fa77 	bl	800c1d2 <_dtoa_r+0x8a>
 800cce4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cce6:	2b01      	cmp	r3, #1
 800cce8:	dc00      	bgt.n	800ccec <_dtoa_r+0xba4>
 800ccea:	e621      	b.n	800c930 <_dtoa_r+0x7e8>
 800ccec:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800ccee:	2001      	movs	r0, #1
 800ccf0:	e635      	b.n	800c95e <_dtoa_r+0x816>
 800ccf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	dcb2      	bgt.n	800cc5e <_dtoa_r+0xb16>
 800ccf8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ccfa:	2b02      	cmp	r3, #2
 800ccfc:	ddaf      	ble.n	800cc5e <_dtoa_r+0xb16>
 800ccfe:	e6bc      	b.n	800ca7a <_dtoa_r+0x932>
 800cd00:	0800efd8 	.word	0x0800efd8
 800cd04:	0800efe0 	.word	0x0800efe0

0800cd08 <__sflush_r>:
 800cd08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd0a:	898a      	ldrh	r2, [r1, #12]
 800cd0c:	0005      	movs	r5, r0
 800cd0e:	000c      	movs	r4, r1
 800cd10:	0713      	lsls	r3, r2, #28
 800cd12:	d460      	bmi.n	800cdd6 <__sflush_r+0xce>
 800cd14:	684b      	ldr	r3, [r1, #4]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	dc04      	bgt.n	800cd24 <__sflush_r+0x1c>
 800cd1a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	dc01      	bgt.n	800cd24 <__sflush_r+0x1c>
 800cd20:	2000      	movs	r0, #0
 800cd22:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cd24:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800cd26:	2f00      	cmp	r7, #0
 800cd28:	d0fa      	beq.n	800cd20 <__sflush_r+0x18>
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	682e      	ldr	r6, [r5, #0]
 800cd2e:	602b      	str	r3, [r5, #0]
 800cd30:	2380      	movs	r3, #128	; 0x80
 800cd32:	015b      	lsls	r3, r3, #5
 800cd34:	6a21      	ldr	r1, [r4, #32]
 800cd36:	401a      	ands	r2, r3
 800cd38:	d034      	beq.n	800cda4 <__sflush_r+0x9c>
 800cd3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd3c:	89a3      	ldrh	r3, [r4, #12]
 800cd3e:	075b      	lsls	r3, r3, #29
 800cd40:	d506      	bpl.n	800cd50 <__sflush_r+0x48>
 800cd42:	6863      	ldr	r3, [r4, #4]
 800cd44:	1ac0      	subs	r0, r0, r3
 800cd46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d001      	beq.n	800cd50 <__sflush_r+0x48>
 800cd4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd4e:	1ac0      	subs	r0, r0, r3
 800cd50:	0002      	movs	r2, r0
 800cd52:	6a21      	ldr	r1, [r4, #32]
 800cd54:	2300      	movs	r3, #0
 800cd56:	0028      	movs	r0, r5
 800cd58:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800cd5a:	47b8      	blx	r7
 800cd5c:	89a1      	ldrh	r1, [r4, #12]
 800cd5e:	1c43      	adds	r3, r0, #1
 800cd60:	d106      	bne.n	800cd70 <__sflush_r+0x68>
 800cd62:	682b      	ldr	r3, [r5, #0]
 800cd64:	2b1d      	cmp	r3, #29
 800cd66:	d830      	bhi.n	800cdca <__sflush_r+0xc2>
 800cd68:	4a2b      	ldr	r2, [pc, #172]	; (800ce18 <__sflush_r+0x110>)
 800cd6a:	40da      	lsrs	r2, r3
 800cd6c:	07d3      	lsls	r3, r2, #31
 800cd6e:	d52c      	bpl.n	800cdca <__sflush_r+0xc2>
 800cd70:	2300      	movs	r3, #0
 800cd72:	6063      	str	r3, [r4, #4]
 800cd74:	6923      	ldr	r3, [r4, #16]
 800cd76:	6023      	str	r3, [r4, #0]
 800cd78:	04cb      	lsls	r3, r1, #19
 800cd7a:	d505      	bpl.n	800cd88 <__sflush_r+0x80>
 800cd7c:	1c43      	adds	r3, r0, #1
 800cd7e:	d102      	bne.n	800cd86 <__sflush_r+0x7e>
 800cd80:	682b      	ldr	r3, [r5, #0]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d100      	bne.n	800cd88 <__sflush_r+0x80>
 800cd86:	6560      	str	r0, [r4, #84]	; 0x54
 800cd88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd8a:	602e      	str	r6, [r5, #0]
 800cd8c:	2900      	cmp	r1, #0
 800cd8e:	d0c7      	beq.n	800cd20 <__sflush_r+0x18>
 800cd90:	0023      	movs	r3, r4
 800cd92:	3344      	adds	r3, #68	; 0x44
 800cd94:	4299      	cmp	r1, r3
 800cd96:	d002      	beq.n	800cd9e <__sflush_r+0x96>
 800cd98:	0028      	movs	r0, r5
 800cd9a:	f001 f91b 	bl	800dfd4 <_free_r>
 800cd9e:	2000      	movs	r0, #0
 800cda0:	6360      	str	r0, [r4, #52]	; 0x34
 800cda2:	e7be      	b.n	800cd22 <__sflush_r+0x1a>
 800cda4:	2301      	movs	r3, #1
 800cda6:	0028      	movs	r0, r5
 800cda8:	47b8      	blx	r7
 800cdaa:	1c43      	adds	r3, r0, #1
 800cdac:	d1c6      	bne.n	800cd3c <__sflush_r+0x34>
 800cdae:	682b      	ldr	r3, [r5, #0]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d0c3      	beq.n	800cd3c <__sflush_r+0x34>
 800cdb4:	2b1d      	cmp	r3, #29
 800cdb6:	d001      	beq.n	800cdbc <__sflush_r+0xb4>
 800cdb8:	2b16      	cmp	r3, #22
 800cdba:	d101      	bne.n	800cdc0 <__sflush_r+0xb8>
 800cdbc:	602e      	str	r6, [r5, #0]
 800cdbe:	e7af      	b.n	800cd20 <__sflush_r+0x18>
 800cdc0:	2340      	movs	r3, #64	; 0x40
 800cdc2:	89a2      	ldrh	r2, [r4, #12]
 800cdc4:	4313      	orrs	r3, r2
 800cdc6:	81a3      	strh	r3, [r4, #12]
 800cdc8:	e7ab      	b.n	800cd22 <__sflush_r+0x1a>
 800cdca:	2340      	movs	r3, #64	; 0x40
 800cdcc:	430b      	orrs	r3, r1
 800cdce:	2001      	movs	r0, #1
 800cdd0:	81a3      	strh	r3, [r4, #12]
 800cdd2:	4240      	negs	r0, r0
 800cdd4:	e7a5      	b.n	800cd22 <__sflush_r+0x1a>
 800cdd6:	690f      	ldr	r7, [r1, #16]
 800cdd8:	2f00      	cmp	r7, #0
 800cdda:	d0a1      	beq.n	800cd20 <__sflush_r+0x18>
 800cddc:	680b      	ldr	r3, [r1, #0]
 800cdde:	600f      	str	r7, [r1, #0]
 800cde0:	1bdb      	subs	r3, r3, r7
 800cde2:	9301      	str	r3, [sp, #4]
 800cde4:	2300      	movs	r3, #0
 800cde6:	0792      	lsls	r2, r2, #30
 800cde8:	d100      	bne.n	800cdec <__sflush_r+0xe4>
 800cdea:	694b      	ldr	r3, [r1, #20]
 800cdec:	60a3      	str	r3, [r4, #8]
 800cdee:	9b01      	ldr	r3, [sp, #4]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	dc00      	bgt.n	800cdf6 <__sflush_r+0xee>
 800cdf4:	e794      	b.n	800cd20 <__sflush_r+0x18>
 800cdf6:	9b01      	ldr	r3, [sp, #4]
 800cdf8:	003a      	movs	r2, r7
 800cdfa:	6a21      	ldr	r1, [r4, #32]
 800cdfc:	0028      	movs	r0, r5
 800cdfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ce00:	47b0      	blx	r6
 800ce02:	2800      	cmp	r0, #0
 800ce04:	dc03      	bgt.n	800ce0e <__sflush_r+0x106>
 800ce06:	2340      	movs	r3, #64	; 0x40
 800ce08:	89a2      	ldrh	r2, [r4, #12]
 800ce0a:	4313      	orrs	r3, r2
 800ce0c:	e7df      	b.n	800cdce <__sflush_r+0xc6>
 800ce0e:	9b01      	ldr	r3, [sp, #4]
 800ce10:	183f      	adds	r7, r7, r0
 800ce12:	1a1b      	subs	r3, r3, r0
 800ce14:	9301      	str	r3, [sp, #4]
 800ce16:	e7ea      	b.n	800cdee <__sflush_r+0xe6>
 800ce18:	20400001 	.word	0x20400001

0800ce1c <_fflush_r>:
 800ce1c:	690b      	ldr	r3, [r1, #16]
 800ce1e:	b570      	push	{r4, r5, r6, lr}
 800ce20:	0005      	movs	r5, r0
 800ce22:	000c      	movs	r4, r1
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d101      	bne.n	800ce2c <_fflush_r+0x10>
 800ce28:	2000      	movs	r0, #0
 800ce2a:	bd70      	pop	{r4, r5, r6, pc}
 800ce2c:	2800      	cmp	r0, #0
 800ce2e:	d004      	beq.n	800ce3a <_fflush_r+0x1e>
 800ce30:	6983      	ldr	r3, [r0, #24]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d101      	bne.n	800ce3a <_fflush_r+0x1e>
 800ce36:	f000 f85f 	bl	800cef8 <__sinit>
 800ce3a:	4b0b      	ldr	r3, [pc, #44]	; (800ce68 <_fflush_r+0x4c>)
 800ce3c:	429c      	cmp	r4, r3
 800ce3e:	d109      	bne.n	800ce54 <_fflush_r+0x38>
 800ce40:	686c      	ldr	r4, [r5, #4]
 800ce42:	220c      	movs	r2, #12
 800ce44:	5ea3      	ldrsh	r3, [r4, r2]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d0ee      	beq.n	800ce28 <_fflush_r+0xc>
 800ce4a:	0021      	movs	r1, r4
 800ce4c:	0028      	movs	r0, r5
 800ce4e:	f7ff ff5b 	bl	800cd08 <__sflush_r>
 800ce52:	e7ea      	b.n	800ce2a <_fflush_r+0xe>
 800ce54:	4b05      	ldr	r3, [pc, #20]	; (800ce6c <_fflush_r+0x50>)
 800ce56:	429c      	cmp	r4, r3
 800ce58:	d101      	bne.n	800ce5e <_fflush_r+0x42>
 800ce5a:	68ac      	ldr	r4, [r5, #8]
 800ce5c:	e7f1      	b.n	800ce42 <_fflush_r+0x26>
 800ce5e:	4b04      	ldr	r3, [pc, #16]	; (800ce70 <_fflush_r+0x54>)
 800ce60:	429c      	cmp	r4, r3
 800ce62:	d1ee      	bne.n	800ce42 <_fflush_r+0x26>
 800ce64:	68ec      	ldr	r4, [r5, #12]
 800ce66:	e7ec      	b.n	800ce42 <_fflush_r+0x26>
 800ce68:	0800f008 	.word	0x0800f008
 800ce6c:	0800f028 	.word	0x0800f028
 800ce70:	0800efe8 	.word	0x0800efe8

0800ce74 <std>:
 800ce74:	2300      	movs	r3, #0
 800ce76:	b510      	push	{r4, lr}
 800ce78:	0004      	movs	r4, r0
 800ce7a:	6003      	str	r3, [r0, #0]
 800ce7c:	6043      	str	r3, [r0, #4]
 800ce7e:	6083      	str	r3, [r0, #8]
 800ce80:	8181      	strh	r1, [r0, #12]
 800ce82:	6643      	str	r3, [r0, #100]	; 0x64
 800ce84:	81c2      	strh	r2, [r0, #14]
 800ce86:	6103      	str	r3, [r0, #16]
 800ce88:	6143      	str	r3, [r0, #20]
 800ce8a:	6183      	str	r3, [r0, #24]
 800ce8c:	0019      	movs	r1, r3
 800ce8e:	2208      	movs	r2, #8
 800ce90:	305c      	adds	r0, #92	; 0x5c
 800ce92:	f7fd fa1b 	bl	800a2cc <memset>
 800ce96:	4b05      	ldr	r3, [pc, #20]	; (800ceac <std+0x38>)
 800ce98:	6224      	str	r4, [r4, #32]
 800ce9a:	6263      	str	r3, [r4, #36]	; 0x24
 800ce9c:	4b04      	ldr	r3, [pc, #16]	; (800ceb0 <std+0x3c>)
 800ce9e:	62a3      	str	r3, [r4, #40]	; 0x28
 800cea0:	4b04      	ldr	r3, [pc, #16]	; (800ceb4 <std+0x40>)
 800cea2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cea4:	4b04      	ldr	r3, [pc, #16]	; (800ceb8 <std+0x44>)
 800cea6:	6323      	str	r3, [r4, #48]	; 0x30
 800cea8:	bd10      	pop	{r4, pc}
 800ceaa:	46c0      	nop			; (mov r8, r8)
 800ceac:	0800e685 	.word	0x0800e685
 800ceb0:	0800e6ad 	.word	0x0800e6ad
 800ceb4:	0800e6e5 	.word	0x0800e6e5
 800ceb8:	0800e711 	.word	0x0800e711

0800cebc <_cleanup_r>:
 800cebc:	b510      	push	{r4, lr}
 800cebe:	4902      	ldr	r1, [pc, #8]	; (800cec8 <_cleanup_r+0xc>)
 800cec0:	f000 f88c 	bl	800cfdc <_fwalk_reent>
 800cec4:	bd10      	pop	{r4, pc}
 800cec6:	46c0      	nop			; (mov r8, r8)
 800cec8:	0800ce1d 	.word	0x0800ce1d

0800cecc <__sfmoreglue>:
 800cecc:	b570      	push	{r4, r5, r6, lr}
 800cece:	2568      	movs	r5, #104	; 0x68
 800ced0:	1e4a      	subs	r2, r1, #1
 800ced2:	4355      	muls	r5, r2
 800ced4:	000e      	movs	r6, r1
 800ced6:	0029      	movs	r1, r5
 800ced8:	3174      	adds	r1, #116	; 0x74
 800ceda:	f001 f8c5 	bl	800e068 <_malloc_r>
 800cede:	1e04      	subs	r4, r0, #0
 800cee0:	d008      	beq.n	800cef4 <__sfmoreglue+0x28>
 800cee2:	2100      	movs	r1, #0
 800cee4:	002a      	movs	r2, r5
 800cee6:	6001      	str	r1, [r0, #0]
 800cee8:	6046      	str	r6, [r0, #4]
 800ceea:	300c      	adds	r0, #12
 800ceec:	60a0      	str	r0, [r4, #8]
 800ceee:	3268      	adds	r2, #104	; 0x68
 800cef0:	f7fd f9ec 	bl	800a2cc <memset>
 800cef4:	0020      	movs	r0, r4
 800cef6:	bd70      	pop	{r4, r5, r6, pc}

0800cef8 <__sinit>:
 800cef8:	6983      	ldr	r3, [r0, #24]
 800cefa:	b513      	push	{r0, r1, r4, lr}
 800cefc:	0004      	movs	r4, r0
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d128      	bne.n	800cf54 <__sinit+0x5c>
 800cf02:	6483      	str	r3, [r0, #72]	; 0x48
 800cf04:	64c3      	str	r3, [r0, #76]	; 0x4c
 800cf06:	6503      	str	r3, [r0, #80]	; 0x50
 800cf08:	4b13      	ldr	r3, [pc, #76]	; (800cf58 <__sinit+0x60>)
 800cf0a:	4a14      	ldr	r2, [pc, #80]	; (800cf5c <__sinit+0x64>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	6282      	str	r2, [r0, #40]	; 0x28
 800cf10:	9301      	str	r3, [sp, #4]
 800cf12:	4298      	cmp	r0, r3
 800cf14:	d101      	bne.n	800cf1a <__sinit+0x22>
 800cf16:	2301      	movs	r3, #1
 800cf18:	6183      	str	r3, [r0, #24]
 800cf1a:	0020      	movs	r0, r4
 800cf1c:	f000 f820 	bl	800cf60 <__sfp>
 800cf20:	6060      	str	r0, [r4, #4]
 800cf22:	0020      	movs	r0, r4
 800cf24:	f000 f81c 	bl	800cf60 <__sfp>
 800cf28:	60a0      	str	r0, [r4, #8]
 800cf2a:	0020      	movs	r0, r4
 800cf2c:	f000 f818 	bl	800cf60 <__sfp>
 800cf30:	2200      	movs	r2, #0
 800cf32:	60e0      	str	r0, [r4, #12]
 800cf34:	2104      	movs	r1, #4
 800cf36:	6860      	ldr	r0, [r4, #4]
 800cf38:	f7ff ff9c 	bl	800ce74 <std>
 800cf3c:	2201      	movs	r2, #1
 800cf3e:	2109      	movs	r1, #9
 800cf40:	68a0      	ldr	r0, [r4, #8]
 800cf42:	f7ff ff97 	bl	800ce74 <std>
 800cf46:	2202      	movs	r2, #2
 800cf48:	2112      	movs	r1, #18
 800cf4a:	68e0      	ldr	r0, [r4, #12]
 800cf4c:	f7ff ff92 	bl	800ce74 <std>
 800cf50:	2301      	movs	r3, #1
 800cf52:	61a3      	str	r3, [r4, #24]
 800cf54:	bd13      	pop	{r0, r1, r4, pc}
 800cf56:	46c0      	nop			; (mov r8, r8)
 800cf58:	0800ef44 	.word	0x0800ef44
 800cf5c:	0800cebd 	.word	0x0800cebd

0800cf60 <__sfp>:
 800cf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf62:	4b1c      	ldr	r3, [pc, #112]	; (800cfd4 <__sfp+0x74>)
 800cf64:	0007      	movs	r7, r0
 800cf66:	681e      	ldr	r6, [r3, #0]
 800cf68:	69b3      	ldr	r3, [r6, #24]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d102      	bne.n	800cf74 <__sfp+0x14>
 800cf6e:	0030      	movs	r0, r6
 800cf70:	f7ff ffc2 	bl	800cef8 <__sinit>
 800cf74:	3648      	adds	r6, #72	; 0x48
 800cf76:	68b4      	ldr	r4, [r6, #8]
 800cf78:	6873      	ldr	r3, [r6, #4]
 800cf7a:	3b01      	subs	r3, #1
 800cf7c:	d504      	bpl.n	800cf88 <__sfp+0x28>
 800cf7e:	6833      	ldr	r3, [r6, #0]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d007      	beq.n	800cf94 <__sfp+0x34>
 800cf84:	6836      	ldr	r6, [r6, #0]
 800cf86:	e7f6      	b.n	800cf76 <__sfp+0x16>
 800cf88:	220c      	movs	r2, #12
 800cf8a:	5ea5      	ldrsh	r5, [r4, r2]
 800cf8c:	2d00      	cmp	r5, #0
 800cf8e:	d00d      	beq.n	800cfac <__sfp+0x4c>
 800cf90:	3468      	adds	r4, #104	; 0x68
 800cf92:	e7f2      	b.n	800cf7a <__sfp+0x1a>
 800cf94:	2104      	movs	r1, #4
 800cf96:	0038      	movs	r0, r7
 800cf98:	f7ff ff98 	bl	800cecc <__sfmoreglue>
 800cf9c:	6030      	str	r0, [r6, #0]
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	d1f0      	bne.n	800cf84 <__sfp+0x24>
 800cfa2:	230c      	movs	r3, #12
 800cfa4:	0004      	movs	r4, r0
 800cfa6:	603b      	str	r3, [r7, #0]
 800cfa8:	0020      	movs	r0, r4
 800cfaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfac:	0020      	movs	r0, r4
 800cfae:	4b0a      	ldr	r3, [pc, #40]	; (800cfd8 <__sfp+0x78>)
 800cfb0:	6665      	str	r5, [r4, #100]	; 0x64
 800cfb2:	6025      	str	r5, [r4, #0]
 800cfb4:	6065      	str	r5, [r4, #4]
 800cfb6:	60a5      	str	r5, [r4, #8]
 800cfb8:	60e3      	str	r3, [r4, #12]
 800cfba:	6125      	str	r5, [r4, #16]
 800cfbc:	6165      	str	r5, [r4, #20]
 800cfbe:	61a5      	str	r5, [r4, #24]
 800cfc0:	2208      	movs	r2, #8
 800cfc2:	0029      	movs	r1, r5
 800cfc4:	305c      	adds	r0, #92	; 0x5c
 800cfc6:	f7fd f981 	bl	800a2cc <memset>
 800cfca:	6365      	str	r5, [r4, #52]	; 0x34
 800cfcc:	63a5      	str	r5, [r4, #56]	; 0x38
 800cfce:	64a5      	str	r5, [r4, #72]	; 0x48
 800cfd0:	64e5      	str	r5, [r4, #76]	; 0x4c
 800cfd2:	e7e9      	b.n	800cfa8 <__sfp+0x48>
 800cfd4:	0800ef44 	.word	0x0800ef44
 800cfd8:	ffff0001 	.word	0xffff0001

0800cfdc <_fwalk_reent>:
 800cfdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfde:	0004      	movs	r4, r0
 800cfe0:	0007      	movs	r7, r0
 800cfe2:	2600      	movs	r6, #0
 800cfe4:	9101      	str	r1, [sp, #4]
 800cfe6:	3448      	adds	r4, #72	; 0x48
 800cfe8:	2c00      	cmp	r4, #0
 800cfea:	d101      	bne.n	800cff0 <_fwalk_reent+0x14>
 800cfec:	0030      	movs	r0, r6
 800cfee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cff0:	6863      	ldr	r3, [r4, #4]
 800cff2:	68a5      	ldr	r5, [r4, #8]
 800cff4:	9300      	str	r3, [sp, #0]
 800cff6:	9b00      	ldr	r3, [sp, #0]
 800cff8:	3b01      	subs	r3, #1
 800cffa:	9300      	str	r3, [sp, #0]
 800cffc:	d501      	bpl.n	800d002 <_fwalk_reent+0x26>
 800cffe:	6824      	ldr	r4, [r4, #0]
 800d000:	e7f2      	b.n	800cfe8 <_fwalk_reent+0xc>
 800d002:	89ab      	ldrh	r3, [r5, #12]
 800d004:	2b01      	cmp	r3, #1
 800d006:	d908      	bls.n	800d01a <_fwalk_reent+0x3e>
 800d008:	220e      	movs	r2, #14
 800d00a:	5eab      	ldrsh	r3, [r5, r2]
 800d00c:	3301      	adds	r3, #1
 800d00e:	d004      	beq.n	800d01a <_fwalk_reent+0x3e>
 800d010:	0029      	movs	r1, r5
 800d012:	0038      	movs	r0, r7
 800d014:	9b01      	ldr	r3, [sp, #4]
 800d016:	4798      	blx	r3
 800d018:	4306      	orrs	r6, r0
 800d01a:	3568      	adds	r5, #104	; 0x68
 800d01c:	e7eb      	b.n	800cff6 <_fwalk_reent+0x1a>

0800d01e <rshift>:
 800d01e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d020:	0004      	movs	r4, r0
 800d022:	6905      	ldr	r5, [r0, #16]
 800d024:	3414      	adds	r4, #20
 800d026:	114b      	asrs	r3, r1, #5
 800d028:	0026      	movs	r6, r4
 800d02a:	429d      	cmp	r5, r3
 800d02c:	dd14      	ble.n	800d058 <rshift+0x3a>
 800d02e:	221f      	movs	r2, #31
 800d030:	00ad      	lsls	r5, r5, #2
 800d032:	009b      	lsls	r3, r3, #2
 800d034:	4011      	ands	r1, r2
 800d036:	1965      	adds	r5, r4, r5
 800d038:	18e3      	adds	r3, r4, r3
 800d03a:	0022      	movs	r2, r4
 800d03c:	2900      	cmp	r1, #0
 800d03e:	d01e      	beq.n	800d07e <rshift+0x60>
 800d040:	cb04      	ldmia	r3!, {r2}
 800d042:	2720      	movs	r7, #32
 800d044:	40ca      	lsrs	r2, r1
 800d046:	46a4      	mov	ip, r4
 800d048:	1a7f      	subs	r7, r7, r1
 800d04a:	4666      	mov	r6, ip
 800d04c:	429d      	cmp	r5, r3
 800d04e:	d80b      	bhi.n	800d068 <rshift+0x4a>
 800d050:	6032      	str	r2, [r6, #0]
 800d052:	2a00      	cmp	r2, #0
 800d054:	d000      	beq.n	800d058 <rshift+0x3a>
 800d056:	3604      	adds	r6, #4
 800d058:	1b33      	subs	r3, r6, r4
 800d05a:	109b      	asrs	r3, r3, #2
 800d05c:	6103      	str	r3, [r0, #16]
 800d05e:	42a6      	cmp	r6, r4
 800d060:	d101      	bne.n	800d066 <rshift+0x48>
 800d062:	2300      	movs	r3, #0
 800d064:	6143      	str	r3, [r0, #20]
 800d066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d068:	681e      	ldr	r6, [r3, #0]
 800d06a:	40be      	lsls	r6, r7
 800d06c:	4332      	orrs	r2, r6
 800d06e:	4666      	mov	r6, ip
 800d070:	c604      	stmia	r6!, {r2}
 800d072:	cb04      	ldmia	r3!, {r2}
 800d074:	46b4      	mov	ip, r6
 800d076:	40ca      	lsrs	r2, r1
 800d078:	e7e7      	b.n	800d04a <rshift+0x2c>
 800d07a:	cb02      	ldmia	r3!, {r1}
 800d07c:	c202      	stmia	r2!, {r1}
 800d07e:	0016      	movs	r6, r2
 800d080:	429d      	cmp	r5, r3
 800d082:	d8fa      	bhi.n	800d07a <rshift+0x5c>
 800d084:	e7e8      	b.n	800d058 <rshift+0x3a>

0800d086 <__hexdig_fun>:
 800d086:	0003      	movs	r3, r0
 800d088:	3b30      	subs	r3, #48	; 0x30
 800d08a:	2b09      	cmp	r3, #9
 800d08c:	d803      	bhi.n	800d096 <__hexdig_fun+0x10>
 800d08e:	3820      	subs	r0, #32
 800d090:	b2c3      	uxtb	r3, r0
 800d092:	0018      	movs	r0, r3
 800d094:	4770      	bx	lr
 800d096:	0003      	movs	r3, r0
 800d098:	3b61      	subs	r3, #97	; 0x61
 800d09a:	2b05      	cmp	r3, #5
 800d09c:	d801      	bhi.n	800d0a2 <__hexdig_fun+0x1c>
 800d09e:	3847      	subs	r0, #71	; 0x47
 800d0a0:	e7f6      	b.n	800d090 <__hexdig_fun+0xa>
 800d0a2:	0002      	movs	r2, r0
 800d0a4:	3a41      	subs	r2, #65	; 0x41
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	2a05      	cmp	r2, #5
 800d0aa:	d8f2      	bhi.n	800d092 <__hexdig_fun+0xc>
 800d0ac:	3827      	subs	r0, #39	; 0x27
 800d0ae:	e7ef      	b.n	800d090 <__hexdig_fun+0xa>

0800d0b0 <__gethex>:
 800d0b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0b2:	b08d      	sub	sp, #52	; 0x34
 800d0b4:	9005      	str	r0, [sp, #20]
 800d0b6:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d0b8:	9109      	str	r1, [sp, #36]	; 0x24
 800d0ba:	9202      	str	r2, [sp, #8]
 800d0bc:	930a      	str	r3, [sp, #40]	; 0x28
 800d0be:	f000 fae2 	bl	800d686 <__localeconv_l>
 800d0c2:	6803      	ldr	r3, [r0, #0]
 800d0c4:	0018      	movs	r0, r3
 800d0c6:	9307      	str	r3, [sp, #28]
 800d0c8:	f7f3 f822 	bl	8000110 <strlen>
 800d0cc:	2202      	movs	r2, #2
 800d0ce:	9b07      	ldr	r3, [sp, #28]
 800d0d0:	4252      	negs	r2, r2
 800d0d2:	181b      	adds	r3, r3, r0
 800d0d4:	3b01      	subs	r3, #1
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	9004      	str	r0, [sp, #16]
 800d0da:	930b      	str	r3, [sp, #44]	; 0x2c
 800d0dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0de:	6819      	ldr	r1, [r3, #0]
 800d0e0:	1c8b      	adds	r3, r1, #2
 800d0e2:	1a52      	subs	r2, r2, r1
 800d0e4:	18d1      	adds	r1, r2, r3
 800d0e6:	9301      	str	r3, [sp, #4]
 800d0e8:	9108      	str	r1, [sp, #32]
 800d0ea:	9901      	ldr	r1, [sp, #4]
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	7808      	ldrb	r0, [r1, #0]
 800d0f0:	2830      	cmp	r0, #48	; 0x30
 800d0f2:	d0f7      	beq.n	800d0e4 <__gethex+0x34>
 800d0f4:	f7ff ffc7 	bl	800d086 <__hexdig_fun>
 800d0f8:	1e07      	subs	r7, r0, #0
 800d0fa:	d000      	beq.n	800d0fe <__gethex+0x4e>
 800d0fc:	e06f      	b.n	800d1de <__gethex+0x12e>
 800d0fe:	9a04      	ldr	r2, [sp, #16]
 800d100:	9907      	ldr	r1, [sp, #28]
 800d102:	9801      	ldr	r0, [sp, #4]
 800d104:	f001 fb0a 	bl	800e71c <strncmp>
 800d108:	2800      	cmp	r0, #0
 800d10a:	d000      	beq.n	800d10e <__gethex+0x5e>
 800d10c:	e06d      	b.n	800d1ea <__gethex+0x13a>
 800d10e:	9b01      	ldr	r3, [sp, #4]
 800d110:	9a04      	ldr	r2, [sp, #16]
 800d112:	189c      	adds	r4, r3, r2
 800d114:	7820      	ldrb	r0, [r4, #0]
 800d116:	f7ff ffb6 	bl	800d086 <__hexdig_fun>
 800d11a:	2800      	cmp	r0, #0
 800d11c:	d069      	beq.n	800d1f2 <__gethex+0x142>
 800d11e:	9401      	str	r4, [sp, #4]
 800d120:	9b01      	ldr	r3, [sp, #4]
 800d122:	7818      	ldrb	r0, [r3, #0]
 800d124:	2830      	cmp	r0, #48	; 0x30
 800d126:	d009      	beq.n	800d13c <__gethex+0x8c>
 800d128:	f7ff ffad 	bl	800d086 <__hexdig_fun>
 800d12c:	4243      	negs	r3, r0
 800d12e:	4143      	adcs	r3, r0
 800d130:	9303      	str	r3, [sp, #12]
 800d132:	2301      	movs	r3, #1
 800d134:	0026      	movs	r6, r4
 800d136:	9308      	str	r3, [sp, #32]
 800d138:	9c01      	ldr	r4, [sp, #4]
 800d13a:	e004      	b.n	800d146 <__gethex+0x96>
 800d13c:	9b01      	ldr	r3, [sp, #4]
 800d13e:	3301      	adds	r3, #1
 800d140:	9301      	str	r3, [sp, #4]
 800d142:	e7ed      	b.n	800d120 <__gethex+0x70>
 800d144:	3401      	adds	r4, #1
 800d146:	7820      	ldrb	r0, [r4, #0]
 800d148:	f7ff ff9d 	bl	800d086 <__hexdig_fun>
 800d14c:	2800      	cmp	r0, #0
 800d14e:	d1f9      	bne.n	800d144 <__gethex+0x94>
 800d150:	9a04      	ldr	r2, [sp, #16]
 800d152:	9907      	ldr	r1, [sp, #28]
 800d154:	0020      	movs	r0, r4
 800d156:	f001 fae1 	bl	800e71c <strncmp>
 800d15a:	2800      	cmp	r0, #0
 800d15c:	d109      	bne.n	800d172 <__gethex+0xc2>
 800d15e:	2e00      	cmp	r6, #0
 800d160:	d10a      	bne.n	800d178 <__gethex+0xc8>
 800d162:	9b04      	ldr	r3, [sp, #16]
 800d164:	18e4      	adds	r4, r4, r3
 800d166:	0026      	movs	r6, r4
 800d168:	7820      	ldrb	r0, [r4, #0]
 800d16a:	f7ff ff8c 	bl	800d086 <__hexdig_fun>
 800d16e:	2800      	cmp	r0, #0
 800d170:	d139      	bne.n	800d1e6 <__gethex+0x136>
 800d172:	2700      	movs	r7, #0
 800d174:	42be      	cmp	r6, r7
 800d176:	d001      	beq.n	800d17c <__gethex+0xcc>
 800d178:	1b37      	subs	r7, r6, r4
 800d17a:	00bf      	lsls	r7, r7, #2
 800d17c:	7823      	ldrb	r3, [r4, #0]
 800d17e:	2b50      	cmp	r3, #80	; 0x50
 800d180:	d001      	beq.n	800d186 <__gethex+0xd6>
 800d182:	2b70      	cmp	r3, #112	; 0x70
 800d184:	d142      	bne.n	800d20c <__gethex+0x15c>
 800d186:	7863      	ldrb	r3, [r4, #1]
 800d188:	2b2b      	cmp	r3, #43	; 0x2b
 800d18a:	d034      	beq.n	800d1f6 <__gethex+0x146>
 800d18c:	2b2d      	cmp	r3, #45	; 0x2d
 800d18e:	d036      	beq.n	800d1fe <__gethex+0x14e>
 800d190:	2300      	movs	r3, #0
 800d192:	1c66      	adds	r6, r4, #1
 800d194:	9306      	str	r3, [sp, #24]
 800d196:	7830      	ldrb	r0, [r6, #0]
 800d198:	f7ff ff75 	bl	800d086 <__hexdig_fun>
 800d19c:	1e43      	subs	r3, r0, #1
 800d19e:	b2db      	uxtb	r3, r3
 800d1a0:	2b18      	cmp	r3, #24
 800d1a2:	d833      	bhi.n	800d20c <__gethex+0x15c>
 800d1a4:	3810      	subs	r0, #16
 800d1a6:	0005      	movs	r5, r0
 800d1a8:	3601      	adds	r6, #1
 800d1aa:	7830      	ldrb	r0, [r6, #0]
 800d1ac:	f7ff ff6b 	bl	800d086 <__hexdig_fun>
 800d1b0:	1e43      	subs	r3, r0, #1
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	2b18      	cmp	r3, #24
 800d1b6:	d924      	bls.n	800d202 <__gethex+0x152>
 800d1b8:	9b06      	ldr	r3, [sp, #24]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d000      	beq.n	800d1c0 <__gethex+0x110>
 800d1be:	426d      	negs	r5, r5
 800d1c0:	197f      	adds	r7, r7, r5
 800d1c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1c4:	601e      	str	r6, [r3, #0]
 800d1c6:	9b03      	ldr	r3, [sp, #12]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d021      	beq.n	800d210 <__gethex+0x160>
 800d1cc:	9b08      	ldr	r3, [sp, #32]
 800d1ce:	2606      	movs	r6, #6
 800d1d0:	425a      	negs	r2, r3
 800d1d2:	4153      	adcs	r3, r2
 800d1d4:	425b      	negs	r3, r3
 800d1d6:	401e      	ands	r6, r3
 800d1d8:	0030      	movs	r0, r6
 800d1da:	b00d      	add	sp, #52	; 0x34
 800d1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1de:	2300      	movs	r3, #0
 800d1e0:	9303      	str	r3, [sp, #12]
 800d1e2:	001e      	movs	r6, r3
 800d1e4:	e7a8      	b.n	800d138 <__gethex+0x88>
 800d1e6:	3401      	adds	r4, #1
 800d1e8:	e7be      	b.n	800d168 <__gethex+0xb8>
 800d1ea:	9c01      	ldr	r4, [sp, #4]
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	9303      	str	r3, [sp, #12]
 800d1f0:	e7c4      	b.n	800d17c <__gethex+0xcc>
 800d1f2:	0007      	movs	r7, r0
 800d1f4:	e7fa      	b.n	800d1ec <__gethex+0x13c>
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	9306      	str	r3, [sp, #24]
 800d1fa:	1ca6      	adds	r6, r4, #2
 800d1fc:	e7cb      	b.n	800d196 <__gethex+0xe6>
 800d1fe:	2301      	movs	r3, #1
 800d200:	e7fa      	b.n	800d1f8 <__gethex+0x148>
 800d202:	230a      	movs	r3, #10
 800d204:	435d      	muls	r5, r3
 800d206:	182d      	adds	r5, r5, r0
 800d208:	3d10      	subs	r5, #16
 800d20a:	e7cd      	b.n	800d1a8 <__gethex+0xf8>
 800d20c:	0026      	movs	r6, r4
 800d20e:	e7d8      	b.n	800d1c2 <__gethex+0x112>
 800d210:	9b01      	ldr	r3, [sp, #4]
 800d212:	9903      	ldr	r1, [sp, #12]
 800d214:	1ae3      	subs	r3, r4, r3
 800d216:	3b01      	subs	r3, #1
 800d218:	2b07      	cmp	r3, #7
 800d21a:	dc47      	bgt.n	800d2ac <__gethex+0x1fc>
 800d21c:	9805      	ldr	r0, [sp, #20]
 800d21e:	f000 fad4 	bl	800d7ca <_Balloc>
 800d222:	0003      	movs	r3, r0
 800d224:	3314      	adds	r3, #20
 800d226:	9303      	str	r3, [sp, #12]
 800d228:	9308      	str	r3, [sp, #32]
 800d22a:	2300      	movs	r3, #0
 800d22c:	0005      	movs	r5, r0
 800d22e:	001e      	movs	r6, r3
 800d230:	9306      	str	r3, [sp, #24]
 800d232:	9b01      	ldr	r3, [sp, #4]
 800d234:	42a3      	cmp	r3, r4
 800d236:	d33c      	bcc.n	800d2b2 <__gethex+0x202>
 800d238:	9c08      	ldr	r4, [sp, #32]
 800d23a:	9b03      	ldr	r3, [sp, #12]
 800d23c:	c440      	stmia	r4!, {r6}
 800d23e:	1ae4      	subs	r4, r4, r3
 800d240:	10a4      	asrs	r4, r4, #2
 800d242:	612c      	str	r4, [r5, #16]
 800d244:	0030      	movs	r0, r6
 800d246:	f000 fb8d 	bl	800d964 <__hi0bits>
 800d24a:	9b02      	ldr	r3, [sp, #8]
 800d24c:	0164      	lsls	r4, r4, #5
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	1a26      	subs	r6, r4, r0
 800d252:	9301      	str	r3, [sp, #4]
 800d254:	429e      	cmp	r6, r3
 800d256:	dd5f      	ble.n	800d318 <__gethex+0x268>
 800d258:	1af6      	subs	r6, r6, r3
 800d25a:	0031      	movs	r1, r6
 800d25c:	0028      	movs	r0, r5
 800d25e:	f000 fe88 	bl	800df72 <__any_on>
 800d262:	1e04      	subs	r4, r0, #0
 800d264:	d00f      	beq.n	800d286 <__gethex+0x1d6>
 800d266:	2401      	movs	r4, #1
 800d268:	211f      	movs	r1, #31
 800d26a:	0020      	movs	r0, r4
 800d26c:	1e73      	subs	r3, r6, #1
 800d26e:	4019      	ands	r1, r3
 800d270:	4088      	lsls	r0, r1
 800d272:	0001      	movs	r1, r0
 800d274:	115a      	asrs	r2, r3, #5
 800d276:	9803      	ldr	r0, [sp, #12]
 800d278:	0092      	lsls	r2, r2, #2
 800d27a:	5812      	ldr	r2, [r2, r0]
 800d27c:	420a      	tst	r2, r1
 800d27e:	d002      	beq.n	800d286 <__gethex+0x1d6>
 800d280:	42a3      	cmp	r3, r4
 800d282:	dc41      	bgt.n	800d308 <__gethex+0x258>
 800d284:	2402      	movs	r4, #2
 800d286:	0031      	movs	r1, r6
 800d288:	0028      	movs	r0, r5
 800d28a:	f7ff fec8 	bl	800d01e <rshift>
 800d28e:	19bf      	adds	r7, r7, r6
 800d290:	9b02      	ldr	r3, [sp, #8]
 800d292:	689b      	ldr	r3, [r3, #8]
 800d294:	9304      	str	r3, [sp, #16]
 800d296:	42bb      	cmp	r3, r7
 800d298:	da4e      	bge.n	800d338 <__gethex+0x288>
 800d29a:	0029      	movs	r1, r5
 800d29c:	9805      	ldr	r0, [sp, #20]
 800d29e:	f000 facc 	bl	800d83a <_Bfree>
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d2a6:	26a3      	movs	r6, #163	; 0xa3
 800d2a8:	6013      	str	r3, [r2, #0]
 800d2aa:	e795      	b.n	800d1d8 <__gethex+0x128>
 800d2ac:	3101      	adds	r1, #1
 800d2ae:	105b      	asrs	r3, r3, #1
 800d2b0:	e7b2      	b.n	800d218 <__gethex+0x168>
 800d2b2:	1e63      	subs	r3, r4, #1
 800d2b4:	9309      	str	r3, [sp, #36]	; 0x24
 800d2b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	d015      	beq.n	800d2ea <__gethex+0x23a>
 800d2be:	9b06      	ldr	r3, [sp, #24]
 800d2c0:	2b20      	cmp	r3, #32
 800d2c2:	d105      	bne.n	800d2d0 <__gethex+0x220>
 800d2c4:	9b08      	ldr	r3, [sp, #32]
 800d2c6:	601e      	str	r6, [r3, #0]
 800d2c8:	2600      	movs	r6, #0
 800d2ca:	3304      	adds	r3, #4
 800d2cc:	9308      	str	r3, [sp, #32]
 800d2ce:	9606      	str	r6, [sp, #24]
 800d2d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2d2:	7818      	ldrb	r0, [r3, #0]
 800d2d4:	f7ff fed7 	bl	800d086 <__hexdig_fun>
 800d2d8:	230f      	movs	r3, #15
 800d2da:	4018      	ands	r0, r3
 800d2dc:	9b06      	ldr	r3, [sp, #24]
 800d2de:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d2e0:	4098      	lsls	r0, r3
 800d2e2:	3304      	adds	r3, #4
 800d2e4:	4306      	orrs	r6, r0
 800d2e6:	9306      	str	r3, [sp, #24]
 800d2e8:	e7a3      	b.n	800d232 <__gethex+0x182>
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	9a04      	ldr	r2, [sp, #16]
 800d2ee:	1a9c      	subs	r4, r3, r2
 800d2f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2f2:	191c      	adds	r4, r3, r4
 800d2f4:	9b01      	ldr	r3, [sp, #4]
 800d2f6:	429c      	cmp	r4, r3
 800d2f8:	d3e1      	bcc.n	800d2be <__gethex+0x20e>
 800d2fa:	9907      	ldr	r1, [sp, #28]
 800d2fc:	0020      	movs	r0, r4
 800d2fe:	f001 fa0d 	bl	800e71c <strncmp>
 800d302:	2800      	cmp	r0, #0
 800d304:	d1db      	bne.n	800d2be <__gethex+0x20e>
 800d306:	e794      	b.n	800d232 <__gethex+0x182>
 800d308:	1eb1      	subs	r1, r6, #2
 800d30a:	0028      	movs	r0, r5
 800d30c:	f000 fe31 	bl	800df72 <__any_on>
 800d310:	2800      	cmp	r0, #0
 800d312:	d0b7      	beq.n	800d284 <__gethex+0x1d4>
 800d314:	2403      	movs	r4, #3
 800d316:	e7b6      	b.n	800d286 <__gethex+0x1d6>
 800d318:	9b01      	ldr	r3, [sp, #4]
 800d31a:	2400      	movs	r4, #0
 800d31c:	429e      	cmp	r6, r3
 800d31e:	dab7      	bge.n	800d290 <__gethex+0x1e0>
 800d320:	1b9e      	subs	r6, r3, r6
 800d322:	0029      	movs	r1, r5
 800d324:	0032      	movs	r2, r6
 800d326:	9805      	ldr	r0, [sp, #20]
 800d328:	f000 fc50 	bl	800dbcc <__lshift>
 800d32c:	0003      	movs	r3, r0
 800d32e:	3314      	adds	r3, #20
 800d330:	0005      	movs	r5, r0
 800d332:	1bbf      	subs	r7, r7, r6
 800d334:	9303      	str	r3, [sp, #12]
 800d336:	e7ab      	b.n	800d290 <__gethex+0x1e0>
 800d338:	9b02      	ldr	r3, [sp, #8]
 800d33a:	685e      	ldr	r6, [r3, #4]
 800d33c:	42be      	cmp	r6, r7
 800d33e:	dd6b      	ble.n	800d418 <__gethex+0x368>
 800d340:	9b01      	ldr	r3, [sp, #4]
 800d342:	1bf6      	subs	r6, r6, r7
 800d344:	42b3      	cmp	r3, r6
 800d346:	dc32      	bgt.n	800d3ae <__gethex+0x2fe>
 800d348:	9b02      	ldr	r3, [sp, #8]
 800d34a:	68db      	ldr	r3, [r3, #12]
 800d34c:	2b02      	cmp	r3, #2
 800d34e:	d026      	beq.n	800d39e <__gethex+0x2ee>
 800d350:	2b03      	cmp	r3, #3
 800d352:	d028      	beq.n	800d3a6 <__gethex+0x2f6>
 800d354:	2b01      	cmp	r3, #1
 800d356:	d119      	bne.n	800d38c <__gethex+0x2dc>
 800d358:	9b01      	ldr	r3, [sp, #4]
 800d35a:	42b3      	cmp	r3, r6
 800d35c:	d116      	bne.n	800d38c <__gethex+0x2dc>
 800d35e:	2b01      	cmp	r3, #1
 800d360:	dc0d      	bgt.n	800d37e <__gethex+0x2ce>
 800d362:	9b02      	ldr	r3, [sp, #8]
 800d364:	2662      	movs	r6, #98	; 0x62
 800d366:	685b      	ldr	r3, [r3, #4]
 800d368:	9301      	str	r3, [sp, #4]
 800d36a:	9a01      	ldr	r2, [sp, #4]
 800d36c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d36e:	601a      	str	r2, [r3, #0]
 800d370:	2301      	movs	r3, #1
 800d372:	9a03      	ldr	r2, [sp, #12]
 800d374:	612b      	str	r3, [r5, #16]
 800d376:	6013      	str	r3, [r2, #0]
 800d378:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d37a:	601d      	str	r5, [r3, #0]
 800d37c:	e72c      	b.n	800d1d8 <__gethex+0x128>
 800d37e:	9901      	ldr	r1, [sp, #4]
 800d380:	0028      	movs	r0, r5
 800d382:	3901      	subs	r1, #1
 800d384:	f000 fdf5 	bl	800df72 <__any_on>
 800d388:	2800      	cmp	r0, #0
 800d38a:	d1ea      	bne.n	800d362 <__gethex+0x2b2>
 800d38c:	0029      	movs	r1, r5
 800d38e:	9805      	ldr	r0, [sp, #20]
 800d390:	f000 fa53 	bl	800d83a <_Bfree>
 800d394:	2300      	movs	r3, #0
 800d396:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d398:	2650      	movs	r6, #80	; 0x50
 800d39a:	6013      	str	r3, [r2, #0]
 800d39c:	e71c      	b.n	800d1d8 <__gethex+0x128>
 800d39e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d0de      	beq.n	800d362 <__gethex+0x2b2>
 800d3a4:	e7f2      	b.n	800d38c <__gethex+0x2dc>
 800d3a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d1da      	bne.n	800d362 <__gethex+0x2b2>
 800d3ac:	e7ee      	b.n	800d38c <__gethex+0x2dc>
 800d3ae:	1e77      	subs	r7, r6, #1
 800d3b0:	2c00      	cmp	r4, #0
 800d3b2:	d12f      	bne.n	800d414 <__gethex+0x364>
 800d3b4:	2f00      	cmp	r7, #0
 800d3b6:	d004      	beq.n	800d3c2 <__gethex+0x312>
 800d3b8:	0039      	movs	r1, r7
 800d3ba:	0028      	movs	r0, r5
 800d3bc:	f000 fdd9 	bl	800df72 <__any_on>
 800d3c0:	0004      	movs	r4, r0
 800d3c2:	231f      	movs	r3, #31
 800d3c4:	117a      	asrs	r2, r7, #5
 800d3c6:	401f      	ands	r7, r3
 800d3c8:	3b1e      	subs	r3, #30
 800d3ca:	40bb      	lsls	r3, r7
 800d3cc:	9903      	ldr	r1, [sp, #12]
 800d3ce:	0092      	lsls	r2, r2, #2
 800d3d0:	5852      	ldr	r2, [r2, r1]
 800d3d2:	421a      	tst	r2, r3
 800d3d4:	d001      	beq.n	800d3da <__gethex+0x32a>
 800d3d6:	2302      	movs	r3, #2
 800d3d8:	431c      	orrs	r4, r3
 800d3da:	9b01      	ldr	r3, [sp, #4]
 800d3dc:	0031      	movs	r1, r6
 800d3de:	1b9b      	subs	r3, r3, r6
 800d3e0:	2602      	movs	r6, #2
 800d3e2:	0028      	movs	r0, r5
 800d3e4:	9301      	str	r3, [sp, #4]
 800d3e6:	f7ff fe1a 	bl	800d01e <rshift>
 800d3ea:	9b02      	ldr	r3, [sp, #8]
 800d3ec:	685f      	ldr	r7, [r3, #4]
 800d3ee:	2c00      	cmp	r4, #0
 800d3f0:	d040      	beq.n	800d474 <__gethex+0x3c4>
 800d3f2:	9b02      	ldr	r3, [sp, #8]
 800d3f4:	68db      	ldr	r3, [r3, #12]
 800d3f6:	2b02      	cmp	r3, #2
 800d3f8:	d010      	beq.n	800d41c <__gethex+0x36c>
 800d3fa:	2b03      	cmp	r3, #3
 800d3fc:	d012      	beq.n	800d424 <__gethex+0x374>
 800d3fe:	2b01      	cmp	r3, #1
 800d400:	d106      	bne.n	800d410 <__gethex+0x360>
 800d402:	07a2      	lsls	r2, r4, #30
 800d404:	d504      	bpl.n	800d410 <__gethex+0x360>
 800d406:	9a03      	ldr	r2, [sp, #12]
 800d408:	6812      	ldr	r2, [r2, #0]
 800d40a:	4314      	orrs	r4, r2
 800d40c:	421c      	tst	r4, r3
 800d40e:	d10c      	bne.n	800d42a <__gethex+0x37a>
 800d410:	2310      	movs	r3, #16
 800d412:	e02e      	b.n	800d472 <__gethex+0x3c2>
 800d414:	2401      	movs	r4, #1
 800d416:	e7d4      	b.n	800d3c2 <__gethex+0x312>
 800d418:	2601      	movs	r6, #1
 800d41a:	e7e8      	b.n	800d3ee <__gethex+0x33e>
 800d41c:	2301      	movs	r3, #1
 800d41e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d420:	1a9b      	subs	r3, r3, r2
 800d422:	9313      	str	r3, [sp, #76]	; 0x4c
 800d424:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d426:	2b00      	cmp	r3, #0
 800d428:	d0f2      	beq.n	800d410 <__gethex+0x360>
 800d42a:	692c      	ldr	r4, [r5, #16]
 800d42c:	00a3      	lsls	r3, r4, #2
 800d42e:	9304      	str	r3, [sp, #16]
 800d430:	002b      	movs	r3, r5
 800d432:	00a2      	lsls	r2, r4, #2
 800d434:	3314      	adds	r3, #20
 800d436:	1899      	adds	r1, r3, r2
 800d438:	2200      	movs	r2, #0
 800d43a:	4694      	mov	ip, r2
 800d43c:	681a      	ldr	r2, [r3, #0]
 800d43e:	1c50      	adds	r0, r2, #1
 800d440:	d01d      	beq.n	800d47e <__gethex+0x3ce>
 800d442:	3201      	adds	r2, #1
 800d444:	601a      	str	r2, [r3, #0]
 800d446:	002b      	movs	r3, r5
 800d448:	3314      	adds	r3, #20
 800d44a:	2e02      	cmp	r6, #2
 800d44c:	d13a      	bne.n	800d4c4 <__gethex+0x414>
 800d44e:	9a02      	ldr	r2, [sp, #8]
 800d450:	9901      	ldr	r1, [sp, #4]
 800d452:	6812      	ldr	r2, [r2, #0]
 800d454:	3a01      	subs	r2, #1
 800d456:	428a      	cmp	r2, r1
 800d458:	d10a      	bne.n	800d470 <__gethex+0x3c0>
 800d45a:	114a      	asrs	r2, r1, #5
 800d45c:	211f      	movs	r1, #31
 800d45e:	9801      	ldr	r0, [sp, #4]
 800d460:	0092      	lsls	r2, r2, #2
 800d462:	4001      	ands	r1, r0
 800d464:	2001      	movs	r0, #1
 800d466:	0004      	movs	r4, r0
 800d468:	408c      	lsls	r4, r1
 800d46a:	58d3      	ldr	r3, [r2, r3]
 800d46c:	4223      	tst	r3, r4
 800d46e:	d148      	bne.n	800d502 <__gethex+0x452>
 800d470:	2320      	movs	r3, #32
 800d472:	431e      	orrs	r6, r3
 800d474:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d476:	601d      	str	r5, [r3, #0]
 800d478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d47a:	601f      	str	r7, [r3, #0]
 800d47c:	e6ac      	b.n	800d1d8 <__gethex+0x128>
 800d47e:	4662      	mov	r2, ip
 800d480:	c304      	stmia	r3!, {r2}
 800d482:	4299      	cmp	r1, r3
 800d484:	d8da      	bhi.n	800d43c <__gethex+0x38c>
 800d486:	68ab      	ldr	r3, [r5, #8]
 800d488:	429c      	cmp	r4, r3
 800d48a:	db12      	blt.n	800d4b2 <__gethex+0x402>
 800d48c:	686b      	ldr	r3, [r5, #4]
 800d48e:	9805      	ldr	r0, [sp, #20]
 800d490:	1c59      	adds	r1, r3, #1
 800d492:	f000 f99a 	bl	800d7ca <_Balloc>
 800d496:	0029      	movs	r1, r5
 800d498:	692b      	ldr	r3, [r5, #16]
 800d49a:	9003      	str	r0, [sp, #12]
 800d49c:	1c9a      	adds	r2, r3, #2
 800d49e:	0092      	lsls	r2, r2, #2
 800d4a0:	310c      	adds	r1, #12
 800d4a2:	300c      	adds	r0, #12
 800d4a4:	f7fc ff09 	bl	800a2ba <memcpy>
 800d4a8:	0029      	movs	r1, r5
 800d4aa:	9805      	ldr	r0, [sp, #20]
 800d4ac:	f000 f9c5 	bl	800d83a <_Bfree>
 800d4b0:	9d03      	ldr	r5, [sp, #12]
 800d4b2:	692b      	ldr	r3, [r5, #16]
 800d4b4:	1c5a      	adds	r2, r3, #1
 800d4b6:	612a      	str	r2, [r5, #16]
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	3304      	adds	r3, #4
 800d4bc:	009b      	lsls	r3, r3, #2
 800d4be:	18eb      	adds	r3, r5, r3
 800d4c0:	605a      	str	r2, [r3, #4]
 800d4c2:	e7c0      	b.n	800d446 <__gethex+0x396>
 800d4c4:	692a      	ldr	r2, [r5, #16]
 800d4c6:	42a2      	cmp	r2, r4
 800d4c8:	dd0a      	ble.n	800d4e0 <__gethex+0x430>
 800d4ca:	2101      	movs	r1, #1
 800d4cc:	0028      	movs	r0, r5
 800d4ce:	f7ff fda6 	bl	800d01e <rshift>
 800d4d2:	9b02      	ldr	r3, [sp, #8]
 800d4d4:	3701      	adds	r7, #1
 800d4d6:	689b      	ldr	r3, [r3, #8]
 800d4d8:	2601      	movs	r6, #1
 800d4da:	42bb      	cmp	r3, r7
 800d4dc:	dac8      	bge.n	800d470 <__gethex+0x3c0>
 800d4de:	e6dc      	b.n	800d29a <__gethex+0x1ea>
 800d4e0:	241f      	movs	r4, #31
 800d4e2:	9a01      	ldr	r2, [sp, #4]
 800d4e4:	2601      	movs	r6, #1
 800d4e6:	4022      	ands	r2, r4
 800d4e8:	1e14      	subs	r4, r2, #0
 800d4ea:	d0c1      	beq.n	800d470 <__gethex+0x3c0>
 800d4ec:	9a04      	ldr	r2, [sp, #16]
 800d4ee:	189b      	adds	r3, r3, r2
 800d4f0:	3b04      	subs	r3, #4
 800d4f2:	6818      	ldr	r0, [r3, #0]
 800d4f4:	f000 fa36 	bl	800d964 <__hi0bits>
 800d4f8:	2120      	movs	r1, #32
 800d4fa:	1b0c      	subs	r4, r1, r4
 800d4fc:	42a0      	cmp	r0, r4
 800d4fe:	dbe4      	blt.n	800d4ca <__gethex+0x41a>
 800d500:	e7b6      	b.n	800d470 <__gethex+0x3c0>
 800d502:	0006      	movs	r6, r0
 800d504:	e7b4      	b.n	800d470 <__gethex+0x3c0>

0800d506 <L_shift>:
 800d506:	2308      	movs	r3, #8
 800d508:	b570      	push	{r4, r5, r6, lr}
 800d50a:	2520      	movs	r5, #32
 800d50c:	1a9a      	subs	r2, r3, r2
 800d50e:	0092      	lsls	r2, r2, #2
 800d510:	1aad      	subs	r5, r5, r2
 800d512:	6843      	ldr	r3, [r0, #4]
 800d514:	6806      	ldr	r6, [r0, #0]
 800d516:	001c      	movs	r4, r3
 800d518:	40ac      	lsls	r4, r5
 800d51a:	40d3      	lsrs	r3, r2
 800d51c:	4334      	orrs	r4, r6
 800d51e:	6004      	str	r4, [r0, #0]
 800d520:	6043      	str	r3, [r0, #4]
 800d522:	3004      	adds	r0, #4
 800d524:	4288      	cmp	r0, r1
 800d526:	d3f4      	bcc.n	800d512 <L_shift+0xc>
 800d528:	bd70      	pop	{r4, r5, r6, pc}

0800d52a <__match>:
 800d52a:	b530      	push	{r4, r5, lr}
 800d52c:	6803      	ldr	r3, [r0, #0]
 800d52e:	780c      	ldrb	r4, [r1, #0]
 800d530:	3301      	adds	r3, #1
 800d532:	2c00      	cmp	r4, #0
 800d534:	d102      	bne.n	800d53c <__match+0x12>
 800d536:	6003      	str	r3, [r0, #0]
 800d538:	2001      	movs	r0, #1
 800d53a:	bd30      	pop	{r4, r5, pc}
 800d53c:	781a      	ldrb	r2, [r3, #0]
 800d53e:	0015      	movs	r5, r2
 800d540:	3d41      	subs	r5, #65	; 0x41
 800d542:	2d19      	cmp	r5, #25
 800d544:	d800      	bhi.n	800d548 <__match+0x1e>
 800d546:	3220      	adds	r2, #32
 800d548:	3101      	adds	r1, #1
 800d54a:	42a2      	cmp	r2, r4
 800d54c:	d0ef      	beq.n	800d52e <__match+0x4>
 800d54e:	2000      	movs	r0, #0
 800d550:	e7f3      	b.n	800d53a <__match+0x10>

0800d552 <__hexnan>:
 800d552:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d554:	b08b      	sub	sp, #44	; 0x2c
 800d556:	9201      	str	r2, [sp, #4]
 800d558:	680a      	ldr	r2, [r1, #0]
 800d55a:	9901      	ldr	r1, [sp, #4]
 800d55c:	1153      	asrs	r3, r2, #5
 800d55e:	009b      	lsls	r3, r3, #2
 800d560:	18cb      	adds	r3, r1, r3
 800d562:	9304      	str	r3, [sp, #16]
 800d564:	231f      	movs	r3, #31
 800d566:	401a      	ands	r2, r3
 800d568:	9008      	str	r0, [sp, #32]
 800d56a:	9206      	str	r2, [sp, #24]
 800d56c:	d002      	beq.n	800d574 <__hexnan+0x22>
 800d56e:	9b04      	ldr	r3, [sp, #16]
 800d570:	3304      	adds	r3, #4
 800d572:	9304      	str	r3, [sp, #16]
 800d574:	9b04      	ldr	r3, [sp, #16]
 800d576:	2500      	movs	r5, #0
 800d578:	1f1e      	subs	r6, r3, #4
 800d57a:	0037      	movs	r7, r6
 800d57c:	0034      	movs	r4, r6
 800d57e:	9b08      	ldr	r3, [sp, #32]
 800d580:	6035      	str	r5, [r6, #0]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	9507      	str	r5, [sp, #28]
 800d586:	9305      	str	r3, [sp, #20]
 800d588:	9502      	str	r5, [sp, #8]
 800d58a:	9b05      	ldr	r3, [sp, #20]
 800d58c:	3301      	adds	r3, #1
 800d58e:	9309      	str	r3, [sp, #36]	; 0x24
 800d590:	9b05      	ldr	r3, [sp, #20]
 800d592:	785b      	ldrb	r3, [r3, #1]
 800d594:	9303      	str	r3, [sp, #12]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d028      	beq.n	800d5ec <__hexnan+0x9a>
 800d59a:	9803      	ldr	r0, [sp, #12]
 800d59c:	f7ff fd73 	bl	800d086 <__hexdig_fun>
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	d145      	bne.n	800d630 <__hexnan+0xde>
 800d5a4:	9b03      	ldr	r3, [sp, #12]
 800d5a6:	2b20      	cmp	r3, #32
 800d5a8:	d819      	bhi.n	800d5de <__hexnan+0x8c>
 800d5aa:	9b02      	ldr	r3, [sp, #8]
 800d5ac:	9a07      	ldr	r2, [sp, #28]
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	dd12      	ble.n	800d5d8 <__hexnan+0x86>
 800d5b2:	42bc      	cmp	r4, r7
 800d5b4:	d206      	bcs.n	800d5c4 <__hexnan+0x72>
 800d5b6:	2d07      	cmp	r5, #7
 800d5b8:	dc04      	bgt.n	800d5c4 <__hexnan+0x72>
 800d5ba:	002a      	movs	r2, r5
 800d5bc:	0039      	movs	r1, r7
 800d5be:	0020      	movs	r0, r4
 800d5c0:	f7ff ffa1 	bl	800d506 <L_shift>
 800d5c4:	9b01      	ldr	r3, [sp, #4]
 800d5c6:	2508      	movs	r5, #8
 800d5c8:	429c      	cmp	r4, r3
 800d5ca:	d905      	bls.n	800d5d8 <__hexnan+0x86>
 800d5cc:	1f27      	subs	r7, r4, #4
 800d5ce:	2500      	movs	r5, #0
 800d5d0:	003c      	movs	r4, r7
 800d5d2:	9b02      	ldr	r3, [sp, #8]
 800d5d4:	603d      	str	r5, [r7, #0]
 800d5d6:	9307      	str	r3, [sp, #28]
 800d5d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5da:	9305      	str	r3, [sp, #20]
 800d5dc:	e7d5      	b.n	800d58a <__hexnan+0x38>
 800d5de:	9b03      	ldr	r3, [sp, #12]
 800d5e0:	2b29      	cmp	r3, #41	; 0x29
 800d5e2:	d14a      	bne.n	800d67a <__hexnan+0x128>
 800d5e4:	9b05      	ldr	r3, [sp, #20]
 800d5e6:	9a08      	ldr	r2, [sp, #32]
 800d5e8:	3302      	adds	r3, #2
 800d5ea:	6013      	str	r3, [r2, #0]
 800d5ec:	9b02      	ldr	r3, [sp, #8]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d043      	beq.n	800d67a <__hexnan+0x128>
 800d5f2:	42bc      	cmp	r4, r7
 800d5f4:	d206      	bcs.n	800d604 <__hexnan+0xb2>
 800d5f6:	2d07      	cmp	r5, #7
 800d5f8:	dc04      	bgt.n	800d604 <__hexnan+0xb2>
 800d5fa:	002a      	movs	r2, r5
 800d5fc:	0039      	movs	r1, r7
 800d5fe:	0020      	movs	r0, r4
 800d600:	f7ff ff81 	bl	800d506 <L_shift>
 800d604:	9b01      	ldr	r3, [sp, #4]
 800d606:	429c      	cmp	r4, r3
 800d608:	d926      	bls.n	800d658 <__hexnan+0x106>
 800d60a:	cc04      	ldmia	r4!, {r2}
 800d60c:	601a      	str	r2, [r3, #0]
 800d60e:	3304      	adds	r3, #4
 800d610:	42a6      	cmp	r6, r4
 800d612:	d2fa      	bcs.n	800d60a <__hexnan+0xb8>
 800d614:	2200      	movs	r2, #0
 800d616:	c304      	stmia	r3!, {r2}
 800d618:	429e      	cmp	r6, r3
 800d61a:	d2fc      	bcs.n	800d616 <__hexnan+0xc4>
 800d61c:	6833      	ldr	r3, [r6, #0]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d104      	bne.n	800d62c <__hexnan+0xda>
 800d622:	9b01      	ldr	r3, [sp, #4]
 800d624:	429e      	cmp	r6, r3
 800d626:	d126      	bne.n	800d676 <__hexnan+0x124>
 800d628:	2301      	movs	r3, #1
 800d62a:	6033      	str	r3, [r6, #0]
 800d62c:	2005      	movs	r0, #5
 800d62e:	e025      	b.n	800d67c <__hexnan+0x12a>
 800d630:	9b02      	ldr	r3, [sp, #8]
 800d632:	3501      	adds	r5, #1
 800d634:	3301      	adds	r3, #1
 800d636:	9302      	str	r3, [sp, #8]
 800d638:	2d08      	cmp	r5, #8
 800d63a:	dd06      	ble.n	800d64a <__hexnan+0xf8>
 800d63c:	9b01      	ldr	r3, [sp, #4]
 800d63e:	429c      	cmp	r4, r3
 800d640:	d9ca      	bls.n	800d5d8 <__hexnan+0x86>
 800d642:	2300      	movs	r3, #0
 800d644:	2501      	movs	r5, #1
 800d646:	3c04      	subs	r4, #4
 800d648:	6023      	str	r3, [r4, #0]
 800d64a:	220f      	movs	r2, #15
 800d64c:	6823      	ldr	r3, [r4, #0]
 800d64e:	4010      	ands	r0, r2
 800d650:	011b      	lsls	r3, r3, #4
 800d652:	4318      	orrs	r0, r3
 800d654:	6020      	str	r0, [r4, #0]
 800d656:	e7bf      	b.n	800d5d8 <__hexnan+0x86>
 800d658:	9b06      	ldr	r3, [sp, #24]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d0de      	beq.n	800d61c <__hexnan+0xca>
 800d65e:	2120      	movs	r1, #32
 800d660:	9a06      	ldr	r2, [sp, #24]
 800d662:	9b04      	ldr	r3, [sp, #16]
 800d664:	1a89      	subs	r1, r1, r2
 800d666:	2201      	movs	r2, #1
 800d668:	4252      	negs	r2, r2
 800d66a:	40ca      	lsrs	r2, r1
 800d66c:	3b04      	subs	r3, #4
 800d66e:	6819      	ldr	r1, [r3, #0]
 800d670:	400a      	ands	r2, r1
 800d672:	601a      	str	r2, [r3, #0]
 800d674:	e7d2      	b.n	800d61c <__hexnan+0xca>
 800d676:	3e04      	subs	r6, #4
 800d678:	e7d0      	b.n	800d61c <__hexnan+0xca>
 800d67a:	2004      	movs	r0, #4
 800d67c:	b00b      	add	sp, #44	; 0x2c
 800d67e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d680 <__locale_ctype_ptr_l>:
 800d680:	30ec      	adds	r0, #236	; 0xec
 800d682:	6800      	ldr	r0, [r0, #0]
 800d684:	4770      	bx	lr

0800d686 <__localeconv_l>:
 800d686:	30f0      	adds	r0, #240	; 0xf0
 800d688:	4770      	bx	lr
	...

0800d68c <_localeconv_r>:
 800d68c:	4b03      	ldr	r3, [pc, #12]	; (800d69c <_localeconv_r+0x10>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	6a18      	ldr	r0, [r3, #32]
 800d692:	2800      	cmp	r0, #0
 800d694:	d100      	bne.n	800d698 <_localeconv_r+0xc>
 800d696:	4802      	ldr	r0, [pc, #8]	; (800d6a0 <_localeconv_r+0x14>)
 800d698:	30f0      	adds	r0, #240	; 0xf0
 800d69a:	4770      	bx	lr
 800d69c:	20000178 	.word	0x20000178
 800d6a0:	200001dc 	.word	0x200001dc

0800d6a4 <__swhatbuf_r>:
 800d6a4:	b570      	push	{r4, r5, r6, lr}
 800d6a6:	000e      	movs	r6, r1
 800d6a8:	001d      	movs	r5, r3
 800d6aa:	230e      	movs	r3, #14
 800d6ac:	5ec9      	ldrsh	r1, [r1, r3]
 800d6ae:	b096      	sub	sp, #88	; 0x58
 800d6b0:	0014      	movs	r4, r2
 800d6b2:	2900      	cmp	r1, #0
 800d6b4:	da07      	bge.n	800d6c6 <__swhatbuf_r+0x22>
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	602b      	str	r3, [r5, #0]
 800d6ba:	89b3      	ldrh	r3, [r6, #12]
 800d6bc:	061b      	lsls	r3, r3, #24
 800d6be:	d411      	bmi.n	800d6e4 <__swhatbuf_r+0x40>
 800d6c0:	2380      	movs	r3, #128	; 0x80
 800d6c2:	00db      	lsls	r3, r3, #3
 800d6c4:	e00f      	b.n	800d6e6 <__swhatbuf_r+0x42>
 800d6c6:	466a      	mov	r2, sp
 800d6c8:	f001 f86c 	bl	800e7a4 <_fstat_r>
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	dbf2      	blt.n	800d6b6 <__swhatbuf_r+0x12>
 800d6d0:	22f0      	movs	r2, #240	; 0xf0
 800d6d2:	9b01      	ldr	r3, [sp, #4]
 800d6d4:	0212      	lsls	r2, r2, #8
 800d6d6:	4013      	ands	r3, r2
 800d6d8:	4a05      	ldr	r2, [pc, #20]	; (800d6f0 <__swhatbuf_r+0x4c>)
 800d6da:	189b      	adds	r3, r3, r2
 800d6dc:	425a      	negs	r2, r3
 800d6de:	4153      	adcs	r3, r2
 800d6e0:	602b      	str	r3, [r5, #0]
 800d6e2:	e7ed      	b.n	800d6c0 <__swhatbuf_r+0x1c>
 800d6e4:	2340      	movs	r3, #64	; 0x40
 800d6e6:	2000      	movs	r0, #0
 800d6e8:	6023      	str	r3, [r4, #0]
 800d6ea:	b016      	add	sp, #88	; 0x58
 800d6ec:	bd70      	pop	{r4, r5, r6, pc}
 800d6ee:	46c0      	nop			; (mov r8, r8)
 800d6f0:	ffffe000 	.word	0xffffe000

0800d6f4 <__smakebuf_r>:
 800d6f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6f6:	2602      	movs	r6, #2
 800d6f8:	898b      	ldrh	r3, [r1, #12]
 800d6fa:	0005      	movs	r5, r0
 800d6fc:	000c      	movs	r4, r1
 800d6fe:	4233      	tst	r3, r6
 800d700:	d006      	beq.n	800d710 <__smakebuf_r+0x1c>
 800d702:	0023      	movs	r3, r4
 800d704:	3347      	adds	r3, #71	; 0x47
 800d706:	6023      	str	r3, [r4, #0]
 800d708:	6123      	str	r3, [r4, #16]
 800d70a:	2301      	movs	r3, #1
 800d70c:	6163      	str	r3, [r4, #20]
 800d70e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800d710:	ab01      	add	r3, sp, #4
 800d712:	466a      	mov	r2, sp
 800d714:	f7ff ffc6 	bl	800d6a4 <__swhatbuf_r>
 800d718:	9900      	ldr	r1, [sp, #0]
 800d71a:	0007      	movs	r7, r0
 800d71c:	0028      	movs	r0, r5
 800d71e:	f000 fca3 	bl	800e068 <_malloc_r>
 800d722:	2800      	cmp	r0, #0
 800d724:	d108      	bne.n	800d738 <__smakebuf_r+0x44>
 800d726:	220c      	movs	r2, #12
 800d728:	5ea3      	ldrsh	r3, [r4, r2]
 800d72a:	059a      	lsls	r2, r3, #22
 800d72c:	d4ef      	bmi.n	800d70e <__smakebuf_r+0x1a>
 800d72e:	2203      	movs	r2, #3
 800d730:	4393      	bics	r3, r2
 800d732:	431e      	orrs	r6, r3
 800d734:	81a6      	strh	r6, [r4, #12]
 800d736:	e7e4      	b.n	800d702 <__smakebuf_r+0xe>
 800d738:	4b0f      	ldr	r3, [pc, #60]	; (800d778 <__smakebuf_r+0x84>)
 800d73a:	62ab      	str	r3, [r5, #40]	; 0x28
 800d73c:	2380      	movs	r3, #128	; 0x80
 800d73e:	89a2      	ldrh	r2, [r4, #12]
 800d740:	6020      	str	r0, [r4, #0]
 800d742:	4313      	orrs	r3, r2
 800d744:	81a3      	strh	r3, [r4, #12]
 800d746:	9b00      	ldr	r3, [sp, #0]
 800d748:	6120      	str	r0, [r4, #16]
 800d74a:	6163      	str	r3, [r4, #20]
 800d74c:	9b01      	ldr	r3, [sp, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d00d      	beq.n	800d76e <__smakebuf_r+0x7a>
 800d752:	230e      	movs	r3, #14
 800d754:	5ee1      	ldrsh	r1, [r4, r3]
 800d756:	0028      	movs	r0, r5
 800d758:	f001 f836 	bl	800e7c8 <_isatty_r>
 800d75c:	2800      	cmp	r0, #0
 800d75e:	d006      	beq.n	800d76e <__smakebuf_r+0x7a>
 800d760:	2203      	movs	r2, #3
 800d762:	89a3      	ldrh	r3, [r4, #12]
 800d764:	4393      	bics	r3, r2
 800d766:	001a      	movs	r2, r3
 800d768:	2301      	movs	r3, #1
 800d76a:	4313      	orrs	r3, r2
 800d76c:	81a3      	strh	r3, [r4, #12]
 800d76e:	89a0      	ldrh	r0, [r4, #12]
 800d770:	4338      	orrs	r0, r7
 800d772:	81a0      	strh	r0, [r4, #12]
 800d774:	e7cb      	b.n	800d70e <__smakebuf_r+0x1a>
 800d776:	46c0      	nop			; (mov r8, r8)
 800d778:	0800cebd 	.word	0x0800cebd

0800d77c <malloc>:
 800d77c:	b510      	push	{r4, lr}
 800d77e:	4b03      	ldr	r3, [pc, #12]	; (800d78c <malloc+0x10>)
 800d780:	0001      	movs	r1, r0
 800d782:	6818      	ldr	r0, [r3, #0]
 800d784:	f000 fc70 	bl	800e068 <_malloc_r>
 800d788:	bd10      	pop	{r4, pc}
 800d78a:	46c0      	nop			; (mov r8, r8)
 800d78c:	20000178 	.word	0x20000178

0800d790 <__ascii_mbtowc>:
 800d790:	b082      	sub	sp, #8
 800d792:	2900      	cmp	r1, #0
 800d794:	d100      	bne.n	800d798 <__ascii_mbtowc+0x8>
 800d796:	a901      	add	r1, sp, #4
 800d798:	1e10      	subs	r0, r2, #0
 800d79a:	d006      	beq.n	800d7aa <__ascii_mbtowc+0x1a>
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d006      	beq.n	800d7ae <__ascii_mbtowc+0x1e>
 800d7a0:	7813      	ldrb	r3, [r2, #0]
 800d7a2:	600b      	str	r3, [r1, #0]
 800d7a4:	7810      	ldrb	r0, [r2, #0]
 800d7a6:	1e43      	subs	r3, r0, #1
 800d7a8:	4198      	sbcs	r0, r3
 800d7aa:	b002      	add	sp, #8
 800d7ac:	4770      	bx	lr
 800d7ae:	2002      	movs	r0, #2
 800d7b0:	4240      	negs	r0, r0
 800d7b2:	e7fa      	b.n	800d7aa <__ascii_mbtowc+0x1a>

0800d7b4 <memchr>:
 800d7b4:	b2c9      	uxtb	r1, r1
 800d7b6:	1882      	adds	r2, r0, r2
 800d7b8:	4290      	cmp	r0, r2
 800d7ba:	d101      	bne.n	800d7c0 <memchr+0xc>
 800d7bc:	2000      	movs	r0, #0
 800d7be:	4770      	bx	lr
 800d7c0:	7803      	ldrb	r3, [r0, #0]
 800d7c2:	428b      	cmp	r3, r1
 800d7c4:	d0fb      	beq.n	800d7be <memchr+0xa>
 800d7c6:	3001      	adds	r0, #1
 800d7c8:	e7f6      	b.n	800d7b8 <memchr+0x4>

0800d7ca <_Balloc>:
 800d7ca:	b570      	push	{r4, r5, r6, lr}
 800d7cc:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d7ce:	0004      	movs	r4, r0
 800d7d0:	000d      	movs	r5, r1
 800d7d2:	2e00      	cmp	r6, #0
 800d7d4:	d107      	bne.n	800d7e6 <_Balloc+0x1c>
 800d7d6:	2010      	movs	r0, #16
 800d7d8:	f7ff ffd0 	bl	800d77c <malloc>
 800d7dc:	6260      	str	r0, [r4, #36]	; 0x24
 800d7de:	6046      	str	r6, [r0, #4]
 800d7e0:	6086      	str	r6, [r0, #8]
 800d7e2:	6006      	str	r6, [r0, #0]
 800d7e4:	60c6      	str	r6, [r0, #12]
 800d7e6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d7e8:	68f3      	ldr	r3, [r6, #12]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d013      	beq.n	800d816 <_Balloc+0x4c>
 800d7ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7f0:	00aa      	lsls	r2, r5, #2
 800d7f2:	68db      	ldr	r3, [r3, #12]
 800d7f4:	189b      	adds	r3, r3, r2
 800d7f6:	6818      	ldr	r0, [r3, #0]
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	d118      	bne.n	800d82e <_Balloc+0x64>
 800d7fc:	2101      	movs	r1, #1
 800d7fe:	000e      	movs	r6, r1
 800d800:	40ae      	lsls	r6, r5
 800d802:	1d72      	adds	r2, r6, #5
 800d804:	0092      	lsls	r2, r2, #2
 800d806:	0020      	movs	r0, r4
 800d808:	f000 fbd5 	bl	800dfb6 <_calloc_r>
 800d80c:	2800      	cmp	r0, #0
 800d80e:	d00c      	beq.n	800d82a <_Balloc+0x60>
 800d810:	6045      	str	r5, [r0, #4]
 800d812:	6086      	str	r6, [r0, #8]
 800d814:	e00d      	b.n	800d832 <_Balloc+0x68>
 800d816:	2221      	movs	r2, #33	; 0x21
 800d818:	2104      	movs	r1, #4
 800d81a:	0020      	movs	r0, r4
 800d81c:	f000 fbcb 	bl	800dfb6 <_calloc_r>
 800d820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d822:	60f0      	str	r0, [r6, #12]
 800d824:	68db      	ldr	r3, [r3, #12]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d1e1      	bne.n	800d7ee <_Balloc+0x24>
 800d82a:	2000      	movs	r0, #0
 800d82c:	bd70      	pop	{r4, r5, r6, pc}
 800d82e:	6802      	ldr	r2, [r0, #0]
 800d830:	601a      	str	r2, [r3, #0]
 800d832:	2300      	movs	r3, #0
 800d834:	6103      	str	r3, [r0, #16]
 800d836:	60c3      	str	r3, [r0, #12]
 800d838:	e7f8      	b.n	800d82c <_Balloc+0x62>

0800d83a <_Bfree>:
 800d83a:	b570      	push	{r4, r5, r6, lr}
 800d83c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d83e:	0006      	movs	r6, r0
 800d840:	000d      	movs	r5, r1
 800d842:	2c00      	cmp	r4, #0
 800d844:	d107      	bne.n	800d856 <_Bfree+0x1c>
 800d846:	2010      	movs	r0, #16
 800d848:	f7ff ff98 	bl	800d77c <malloc>
 800d84c:	6270      	str	r0, [r6, #36]	; 0x24
 800d84e:	6044      	str	r4, [r0, #4]
 800d850:	6084      	str	r4, [r0, #8]
 800d852:	6004      	str	r4, [r0, #0]
 800d854:	60c4      	str	r4, [r0, #12]
 800d856:	2d00      	cmp	r5, #0
 800d858:	d007      	beq.n	800d86a <_Bfree+0x30>
 800d85a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d85c:	686a      	ldr	r2, [r5, #4]
 800d85e:	68db      	ldr	r3, [r3, #12]
 800d860:	0092      	lsls	r2, r2, #2
 800d862:	189b      	adds	r3, r3, r2
 800d864:	681a      	ldr	r2, [r3, #0]
 800d866:	602a      	str	r2, [r5, #0]
 800d868:	601d      	str	r5, [r3, #0]
 800d86a:	bd70      	pop	{r4, r5, r6, pc}

0800d86c <__multadd>:
 800d86c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d86e:	001e      	movs	r6, r3
 800d870:	2314      	movs	r3, #20
 800d872:	469c      	mov	ip, r3
 800d874:	0007      	movs	r7, r0
 800d876:	000c      	movs	r4, r1
 800d878:	2000      	movs	r0, #0
 800d87a:	690d      	ldr	r5, [r1, #16]
 800d87c:	448c      	add	ip, r1
 800d87e:	4663      	mov	r3, ip
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	3001      	adds	r0, #1
 800d884:	b299      	uxth	r1, r3
 800d886:	4663      	mov	r3, ip
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	4351      	muls	r1, r2
 800d88c:	0c1b      	lsrs	r3, r3, #16
 800d88e:	4353      	muls	r3, r2
 800d890:	1989      	adds	r1, r1, r6
 800d892:	0c0e      	lsrs	r6, r1, #16
 800d894:	199b      	adds	r3, r3, r6
 800d896:	b289      	uxth	r1, r1
 800d898:	0c1e      	lsrs	r6, r3, #16
 800d89a:	041b      	lsls	r3, r3, #16
 800d89c:	185b      	adds	r3, r3, r1
 800d89e:	4661      	mov	r1, ip
 800d8a0:	c108      	stmia	r1!, {r3}
 800d8a2:	468c      	mov	ip, r1
 800d8a4:	4285      	cmp	r5, r0
 800d8a6:	dcea      	bgt.n	800d87e <__multadd+0x12>
 800d8a8:	2e00      	cmp	r6, #0
 800d8aa:	d01b      	beq.n	800d8e4 <__multadd+0x78>
 800d8ac:	68a3      	ldr	r3, [r4, #8]
 800d8ae:	42ab      	cmp	r3, r5
 800d8b0:	dc12      	bgt.n	800d8d8 <__multadd+0x6c>
 800d8b2:	6863      	ldr	r3, [r4, #4]
 800d8b4:	0038      	movs	r0, r7
 800d8b6:	1c59      	adds	r1, r3, #1
 800d8b8:	f7ff ff87 	bl	800d7ca <_Balloc>
 800d8bc:	0021      	movs	r1, r4
 800d8be:	6923      	ldr	r3, [r4, #16]
 800d8c0:	9001      	str	r0, [sp, #4]
 800d8c2:	1c9a      	adds	r2, r3, #2
 800d8c4:	0092      	lsls	r2, r2, #2
 800d8c6:	310c      	adds	r1, #12
 800d8c8:	300c      	adds	r0, #12
 800d8ca:	f7fc fcf6 	bl	800a2ba <memcpy>
 800d8ce:	0021      	movs	r1, r4
 800d8d0:	0038      	movs	r0, r7
 800d8d2:	f7ff ffb2 	bl	800d83a <_Bfree>
 800d8d6:	9c01      	ldr	r4, [sp, #4]
 800d8d8:	1d2b      	adds	r3, r5, #4
 800d8da:	009b      	lsls	r3, r3, #2
 800d8dc:	18e3      	adds	r3, r4, r3
 800d8de:	3501      	adds	r5, #1
 800d8e0:	605e      	str	r6, [r3, #4]
 800d8e2:	6125      	str	r5, [r4, #16]
 800d8e4:	0020      	movs	r0, r4
 800d8e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800d8e8 <__s2b>:
 800d8e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d8ea:	0006      	movs	r6, r0
 800d8ec:	0018      	movs	r0, r3
 800d8ee:	000c      	movs	r4, r1
 800d8f0:	3008      	adds	r0, #8
 800d8f2:	2109      	movs	r1, #9
 800d8f4:	9301      	str	r3, [sp, #4]
 800d8f6:	0015      	movs	r5, r2
 800d8f8:	f7f2 fca6 	bl	8000248 <__divsi3>
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	2100      	movs	r1, #0
 800d900:	4283      	cmp	r3, r0
 800d902:	db1f      	blt.n	800d944 <__s2b+0x5c>
 800d904:	0030      	movs	r0, r6
 800d906:	f7ff ff60 	bl	800d7ca <_Balloc>
 800d90a:	9b08      	ldr	r3, [sp, #32]
 800d90c:	6143      	str	r3, [r0, #20]
 800d90e:	2301      	movs	r3, #1
 800d910:	6103      	str	r3, [r0, #16]
 800d912:	2d09      	cmp	r5, #9
 800d914:	dd19      	ble.n	800d94a <__s2b+0x62>
 800d916:	0023      	movs	r3, r4
 800d918:	3309      	adds	r3, #9
 800d91a:	001f      	movs	r7, r3
 800d91c:	9300      	str	r3, [sp, #0]
 800d91e:	1964      	adds	r4, r4, r5
 800d920:	783b      	ldrb	r3, [r7, #0]
 800d922:	0001      	movs	r1, r0
 800d924:	3b30      	subs	r3, #48	; 0x30
 800d926:	220a      	movs	r2, #10
 800d928:	0030      	movs	r0, r6
 800d92a:	3701      	adds	r7, #1
 800d92c:	f7ff ff9e 	bl	800d86c <__multadd>
 800d930:	42a7      	cmp	r7, r4
 800d932:	d1f5      	bne.n	800d920 <__s2b+0x38>
 800d934:	9b00      	ldr	r3, [sp, #0]
 800d936:	195c      	adds	r4, r3, r5
 800d938:	3c08      	subs	r4, #8
 800d93a:	002f      	movs	r7, r5
 800d93c:	9b01      	ldr	r3, [sp, #4]
 800d93e:	429f      	cmp	r7, r3
 800d940:	db06      	blt.n	800d950 <__s2b+0x68>
 800d942:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d944:	005b      	lsls	r3, r3, #1
 800d946:	3101      	adds	r1, #1
 800d948:	e7da      	b.n	800d900 <__s2b+0x18>
 800d94a:	340a      	adds	r4, #10
 800d94c:	2509      	movs	r5, #9
 800d94e:	e7f4      	b.n	800d93a <__s2b+0x52>
 800d950:	1b63      	subs	r3, r4, r5
 800d952:	5ddb      	ldrb	r3, [r3, r7]
 800d954:	0001      	movs	r1, r0
 800d956:	3b30      	subs	r3, #48	; 0x30
 800d958:	220a      	movs	r2, #10
 800d95a:	0030      	movs	r0, r6
 800d95c:	f7ff ff86 	bl	800d86c <__multadd>
 800d960:	3701      	adds	r7, #1
 800d962:	e7eb      	b.n	800d93c <__s2b+0x54>

0800d964 <__hi0bits>:
 800d964:	0003      	movs	r3, r0
 800d966:	0c02      	lsrs	r2, r0, #16
 800d968:	2000      	movs	r0, #0
 800d96a:	4282      	cmp	r2, r0
 800d96c:	d101      	bne.n	800d972 <__hi0bits+0xe>
 800d96e:	041b      	lsls	r3, r3, #16
 800d970:	3010      	adds	r0, #16
 800d972:	0e1a      	lsrs	r2, r3, #24
 800d974:	d101      	bne.n	800d97a <__hi0bits+0x16>
 800d976:	3008      	adds	r0, #8
 800d978:	021b      	lsls	r3, r3, #8
 800d97a:	0f1a      	lsrs	r2, r3, #28
 800d97c:	d101      	bne.n	800d982 <__hi0bits+0x1e>
 800d97e:	3004      	adds	r0, #4
 800d980:	011b      	lsls	r3, r3, #4
 800d982:	0f9a      	lsrs	r2, r3, #30
 800d984:	d101      	bne.n	800d98a <__hi0bits+0x26>
 800d986:	3002      	adds	r0, #2
 800d988:	009b      	lsls	r3, r3, #2
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	db03      	blt.n	800d996 <__hi0bits+0x32>
 800d98e:	3001      	adds	r0, #1
 800d990:	005b      	lsls	r3, r3, #1
 800d992:	d400      	bmi.n	800d996 <__hi0bits+0x32>
 800d994:	2020      	movs	r0, #32
 800d996:	4770      	bx	lr

0800d998 <__lo0bits>:
 800d998:	2207      	movs	r2, #7
 800d99a:	6803      	ldr	r3, [r0, #0]
 800d99c:	b510      	push	{r4, lr}
 800d99e:	0001      	movs	r1, r0
 800d9a0:	401a      	ands	r2, r3
 800d9a2:	d00d      	beq.n	800d9c0 <__lo0bits+0x28>
 800d9a4:	2401      	movs	r4, #1
 800d9a6:	2000      	movs	r0, #0
 800d9a8:	4223      	tst	r3, r4
 800d9aa:	d105      	bne.n	800d9b8 <__lo0bits+0x20>
 800d9ac:	3002      	adds	r0, #2
 800d9ae:	4203      	tst	r3, r0
 800d9b0:	d003      	beq.n	800d9ba <__lo0bits+0x22>
 800d9b2:	40e3      	lsrs	r3, r4
 800d9b4:	0020      	movs	r0, r4
 800d9b6:	600b      	str	r3, [r1, #0]
 800d9b8:	bd10      	pop	{r4, pc}
 800d9ba:	089b      	lsrs	r3, r3, #2
 800d9bc:	600b      	str	r3, [r1, #0]
 800d9be:	e7fb      	b.n	800d9b8 <__lo0bits+0x20>
 800d9c0:	b29c      	uxth	r4, r3
 800d9c2:	0010      	movs	r0, r2
 800d9c4:	2c00      	cmp	r4, #0
 800d9c6:	d101      	bne.n	800d9cc <__lo0bits+0x34>
 800d9c8:	2010      	movs	r0, #16
 800d9ca:	0c1b      	lsrs	r3, r3, #16
 800d9cc:	b2da      	uxtb	r2, r3
 800d9ce:	2a00      	cmp	r2, #0
 800d9d0:	d101      	bne.n	800d9d6 <__lo0bits+0x3e>
 800d9d2:	3008      	adds	r0, #8
 800d9d4:	0a1b      	lsrs	r3, r3, #8
 800d9d6:	071a      	lsls	r2, r3, #28
 800d9d8:	d101      	bne.n	800d9de <__lo0bits+0x46>
 800d9da:	3004      	adds	r0, #4
 800d9dc:	091b      	lsrs	r3, r3, #4
 800d9de:	079a      	lsls	r2, r3, #30
 800d9e0:	d101      	bne.n	800d9e6 <__lo0bits+0x4e>
 800d9e2:	3002      	adds	r0, #2
 800d9e4:	089b      	lsrs	r3, r3, #2
 800d9e6:	07da      	lsls	r2, r3, #31
 800d9e8:	d4e8      	bmi.n	800d9bc <__lo0bits+0x24>
 800d9ea:	085b      	lsrs	r3, r3, #1
 800d9ec:	d001      	beq.n	800d9f2 <__lo0bits+0x5a>
 800d9ee:	3001      	adds	r0, #1
 800d9f0:	e7e4      	b.n	800d9bc <__lo0bits+0x24>
 800d9f2:	2020      	movs	r0, #32
 800d9f4:	e7e0      	b.n	800d9b8 <__lo0bits+0x20>

0800d9f6 <__i2b>:
 800d9f6:	b510      	push	{r4, lr}
 800d9f8:	000c      	movs	r4, r1
 800d9fa:	2101      	movs	r1, #1
 800d9fc:	f7ff fee5 	bl	800d7ca <_Balloc>
 800da00:	2301      	movs	r3, #1
 800da02:	6144      	str	r4, [r0, #20]
 800da04:	6103      	str	r3, [r0, #16]
 800da06:	bd10      	pop	{r4, pc}

0800da08 <__multiply>:
 800da08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da0a:	690b      	ldr	r3, [r1, #16]
 800da0c:	0014      	movs	r4, r2
 800da0e:	6912      	ldr	r2, [r2, #16]
 800da10:	b089      	sub	sp, #36	; 0x24
 800da12:	000d      	movs	r5, r1
 800da14:	4293      	cmp	r3, r2
 800da16:	da01      	bge.n	800da1c <__multiply+0x14>
 800da18:	0025      	movs	r5, r4
 800da1a:	000c      	movs	r4, r1
 800da1c:	692f      	ldr	r7, [r5, #16]
 800da1e:	6926      	ldr	r6, [r4, #16]
 800da20:	6869      	ldr	r1, [r5, #4]
 800da22:	19bb      	adds	r3, r7, r6
 800da24:	9302      	str	r3, [sp, #8]
 800da26:	68ab      	ldr	r3, [r5, #8]
 800da28:	19ba      	adds	r2, r7, r6
 800da2a:	4293      	cmp	r3, r2
 800da2c:	da00      	bge.n	800da30 <__multiply+0x28>
 800da2e:	3101      	adds	r1, #1
 800da30:	f7ff fecb 	bl	800d7ca <_Balloc>
 800da34:	0002      	movs	r2, r0
 800da36:	19bb      	adds	r3, r7, r6
 800da38:	3214      	adds	r2, #20
 800da3a:	009b      	lsls	r3, r3, #2
 800da3c:	18d3      	adds	r3, r2, r3
 800da3e:	469c      	mov	ip, r3
 800da40:	2100      	movs	r1, #0
 800da42:	0013      	movs	r3, r2
 800da44:	9004      	str	r0, [sp, #16]
 800da46:	4563      	cmp	r3, ip
 800da48:	d31d      	bcc.n	800da86 <__multiply+0x7e>
 800da4a:	3514      	adds	r5, #20
 800da4c:	00bf      	lsls	r7, r7, #2
 800da4e:	19eb      	adds	r3, r5, r7
 800da50:	3414      	adds	r4, #20
 800da52:	00b6      	lsls	r6, r6, #2
 800da54:	9305      	str	r3, [sp, #20]
 800da56:	19a3      	adds	r3, r4, r6
 800da58:	9503      	str	r5, [sp, #12]
 800da5a:	9401      	str	r4, [sp, #4]
 800da5c:	9307      	str	r3, [sp, #28]
 800da5e:	9b07      	ldr	r3, [sp, #28]
 800da60:	9901      	ldr	r1, [sp, #4]
 800da62:	4299      	cmp	r1, r3
 800da64:	d311      	bcc.n	800da8a <__multiply+0x82>
 800da66:	9b02      	ldr	r3, [sp, #8]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	dd06      	ble.n	800da7a <__multiply+0x72>
 800da6c:	2304      	movs	r3, #4
 800da6e:	425b      	negs	r3, r3
 800da70:	449c      	add	ip, r3
 800da72:	4663      	mov	r3, ip
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d051      	beq.n	800db1e <__multiply+0x116>
 800da7a:	9b04      	ldr	r3, [sp, #16]
 800da7c:	9a02      	ldr	r2, [sp, #8]
 800da7e:	0018      	movs	r0, r3
 800da80:	611a      	str	r2, [r3, #16]
 800da82:	b009      	add	sp, #36	; 0x24
 800da84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da86:	c302      	stmia	r3!, {r1}
 800da88:	e7dd      	b.n	800da46 <__multiply+0x3e>
 800da8a:	9b01      	ldr	r3, [sp, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	b298      	uxth	r0, r3
 800da90:	2800      	cmp	r0, #0
 800da92:	d01c      	beq.n	800dace <__multiply+0xc6>
 800da94:	0015      	movs	r5, r2
 800da96:	2600      	movs	r6, #0
 800da98:	9f03      	ldr	r7, [sp, #12]
 800da9a:	cf02      	ldmia	r7!, {r1}
 800da9c:	682c      	ldr	r4, [r5, #0]
 800da9e:	b28b      	uxth	r3, r1
 800daa0:	4343      	muls	r3, r0
 800daa2:	0c09      	lsrs	r1, r1, #16
 800daa4:	4341      	muls	r1, r0
 800daa6:	b2a4      	uxth	r4, r4
 800daa8:	191b      	adds	r3, r3, r4
 800daaa:	199b      	adds	r3, r3, r6
 800daac:	000e      	movs	r6, r1
 800daae:	6829      	ldr	r1, [r5, #0]
 800dab0:	9506      	str	r5, [sp, #24]
 800dab2:	0c09      	lsrs	r1, r1, #16
 800dab4:	1871      	adds	r1, r6, r1
 800dab6:	0c1e      	lsrs	r6, r3, #16
 800dab8:	1989      	adds	r1, r1, r6
 800daba:	0c0e      	lsrs	r6, r1, #16
 800dabc:	b29b      	uxth	r3, r3
 800dabe:	0409      	lsls	r1, r1, #16
 800dac0:	430b      	orrs	r3, r1
 800dac2:	c508      	stmia	r5!, {r3}
 800dac4:	9b05      	ldr	r3, [sp, #20]
 800dac6:	42bb      	cmp	r3, r7
 800dac8:	d8e7      	bhi.n	800da9a <__multiply+0x92>
 800daca:	9b06      	ldr	r3, [sp, #24]
 800dacc:	605e      	str	r6, [r3, #4]
 800dace:	9b01      	ldr	r3, [sp, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	0c1d      	lsrs	r5, r3, #16
 800dad4:	d01e      	beq.n	800db14 <__multiply+0x10c>
 800dad6:	0010      	movs	r0, r2
 800dad8:	2700      	movs	r7, #0
 800dada:	6813      	ldr	r3, [r2, #0]
 800dadc:	9e03      	ldr	r6, [sp, #12]
 800dade:	6831      	ldr	r1, [r6, #0]
 800dae0:	6804      	ldr	r4, [r0, #0]
 800dae2:	b289      	uxth	r1, r1
 800dae4:	4369      	muls	r1, r5
 800dae6:	0c24      	lsrs	r4, r4, #16
 800dae8:	1909      	adds	r1, r1, r4
 800daea:	19c9      	adds	r1, r1, r7
 800daec:	040f      	lsls	r7, r1, #16
 800daee:	b29b      	uxth	r3, r3
 800daf0:	433b      	orrs	r3, r7
 800daf2:	6003      	str	r3, [r0, #0]
 800daf4:	ce80      	ldmia	r6!, {r7}
 800daf6:	6843      	ldr	r3, [r0, #4]
 800daf8:	0c3f      	lsrs	r7, r7, #16
 800dafa:	436f      	muls	r7, r5
 800dafc:	b29b      	uxth	r3, r3
 800dafe:	18fb      	adds	r3, r7, r3
 800db00:	0c09      	lsrs	r1, r1, #16
 800db02:	185b      	adds	r3, r3, r1
 800db04:	9905      	ldr	r1, [sp, #20]
 800db06:	9006      	str	r0, [sp, #24]
 800db08:	0c1f      	lsrs	r7, r3, #16
 800db0a:	3004      	adds	r0, #4
 800db0c:	42b1      	cmp	r1, r6
 800db0e:	d8e6      	bhi.n	800dade <__multiply+0xd6>
 800db10:	9906      	ldr	r1, [sp, #24]
 800db12:	604b      	str	r3, [r1, #4]
 800db14:	9b01      	ldr	r3, [sp, #4]
 800db16:	3204      	adds	r2, #4
 800db18:	3304      	adds	r3, #4
 800db1a:	9301      	str	r3, [sp, #4]
 800db1c:	e79f      	b.n	800da5e <__multiply+0x56>
 800db1e:	9b02      	ldr	r3, [sp, #8]
 800db20:	3b01      	subs	r3, #1
 800db22:	9302      	str	r3, [sp, #8]
 800db24:	e79f      	b.n	800da66 <__multiply+0x5e>
	...

0800db28 <__pow5mult>:
 800db28:	2303      	movs	r3, #3
 800db2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db2c:	4013      	ands	r3, r2
 800db2e:	0005      	movs	r5, r0
 800db30:	000e      	movs	r6, r1
 800db32:	0014      	movs	r4, r2
 800db34:	2b00      	cmp	r3, #0
 800db36:	d008      	beq.n	800db4a <__pow5mult+0x22>
 800db38:	4922      	ldr	r1, [pc, #136]	; (800dbc4 <__pow5mult+0x9c>)
 800db3a:	3b01      	subs	r3, #1
 800db3c:	009a      	lsls	r2, r3, #2
 800db3e:	5852      	ldr	r2, [r2, r1]
 800db40:	2300      	movs	r3, #0
 800db42:	0031      	movs	r1, r6
 800db44:	f7ff fe92 	bl	800d86c <__multadd>
 800db48:	0006      	movs	r6, r0
 800db4a:	10a3      	asrs	r3, r4, #2
 800db4c:	9301      	str	r3, [sp, #4]
 800db4e:	d036      	beq.n	800dbbe <__pow5mult+0x96>
 800db50:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800db52:	2c00      	cmp	r4, #0
 800db54:	d107      	bne.n	800db66 <__pow5mult+0x3e>
 800db56:	2010      	movs	r0, #16
 800db58:	f7ff fe10 	bl	800d77c <malloc>
 800db5c:	6268      	str	r0, [r5, #36]	; 0x24
 800db5e:	6044      	str	r4, [r0, #4]
 800db60:	6084      	str	r4, [r0, #8]
 800db62:	6004      	str	r4, [r0, #0]
 800db64:	60c4      	str	r4, [r0, #12]
 800db66:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800db68:	68bc      	ldr	r4, [r7, #8]
 800db6a:	2c00      	cmp	r4, #0
 800db6c:	d107      	bne.n	800db7e <__pow5mult+0x56>
 800db6e:	4916      	ldr	r1, [pc, #88]	; (800dbc8 <__pow5mult+0xa0>)
 800db70:	0028      	movs	r0, r5
 800db72:	f7ff ff40 	bl	800d9f6 <__i2b>
 800db76:	2300      	movs	r3, #0
 800db78:	0004      	movs	r4, r0
 800db7a:	60b8      	str	r0, [r7, #8]
 800db7c:	6003      	str	r3, [r0, #0]
 800db7e:	2201      	movs	r2, #1
 800db80:	9b01      	ldr	r3, [sp, #4]
 800db82:	4213      	tst	r3, r2
 800db84:	d00a      	beq.n	800db9c <__pow5mult+0x74>
 800db86:	0031      	movs	r1, r6
 800db88:	0022      	movs	r2, r4
 800db8a:	0028      	movs	r0, r5
 800db8c:	f7ff ff3c 	bl	800da08 <__multiply>
 800db90:	0007      	movs	r7, r0
 800db92:	0031      	movs	r1, r6
 800db94:	0028      	movs	r0, r5
 800db96:	f7ff fe50 	bl	800d83a <_Bfree>
 800db9a:	003e      	movs	r6, r7
 800db9c:	9b01      	ldr	r3, [sp, #4]
 800db9e:	105b      	asrs	r3, r3, #1
 800dba0:	9301      	str	r3, [sp, #4]
 800dba2:	d00c      	beq.n	800dbbe <__pow5mult+0x96>
 800dba4:	6820      	ldr	r0, [r4, #0]
 800dba6:	2800      	cmp	r0, #0
 800dba8:	d107      	bne.n	800dbba <__pow5mult+0x92>
 800dbaa:	0022      	movs	r2, r4
 800dbac:	0021      	movs	r1, r4
 800dbae:	0028      	movs	r0, r5
 800dbb0:	f7ff ff2a 	bl	800da08 <__multiply>
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	6020      	str	r0, [r4, #0]
 800dbb8:	6003      	str	r3, [r0, #0]
 800dbba:	0004      	movs	r4, r0
 800dbbc:	e7df      	b.n	800db7e <__pow5mult+0x56>
 800dbbe:	0030      	movs	r0, r6
 800dbc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dbc2:	46c0      	nop			; (mov r8, r8)
 800dbc4:	0800f148 	.word	0x0800f148
 800dbc8:	00000271 	.word	0x00000271

0800dbcc <__lshift>:
 800dbcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbce:	000d      	movs	r5, r1
 800dbd0:	0017      	movs	r7, r2
 800dbd2:	692b      	ldr	r3, [r5, #16]
 800dbd4:	1154      	asrs	r4, r2, #5
 800dbd6:	b085      	sub	sp, #20
 800dbd8:	18e3      	adds	r3, r4, r3
 800dbda:	9301      	str	r3, [sp, #4]
 800dbdc:	3301      	adds	r3, #1
 800dbde:	9300      	str	r3, [sp, #0]
 800dbe0:	6849      	ldr	r1, [r1, #4]
 800dbe2:	68ab      	ldr	r3, [r5, #8]
 800dbe4:	9002      	str	r0, [sp, #8]
 800dbe6:	9a00      	ldr	r2, [sp, #0]
 800dbe8:	4293      	cmp	r3, r2
 800dbea:	db35      	blt.n	800dc58 <__lshift+0x8c>
 800dbec:	9802      	ldr	r0, [sp, #8]
 800dbee:	f7ff fdec 	bl	800d7ca <_Balloc>
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	0002      	movs	r2, r0
 800dbf6:	0006      	movs	r6, r0
 800dbf8:	0019      	movs	r1, r3
 800dbfa:	3214      	adds	r2, #20
 800dbfc:	42a3      	cmp	r3, r4
 800dbfe:	db2e      	blt.n	800dc5e <__lshift+0x92>
 800dc00:	43e3      	mvns	r3, r4
 800dc02:	17db      	asrs	r3, r3, #31
 800dc04:	401c      	ands	r4, r3
 800dc06:	002b      	movs	r3, r5
 800dc08:	00a4      	lsls	r4, r4, #2
 800dc0a:	1914      	adds	r4, r2, r4
 800dc0c:	692a      	ldr	r2, [r5, #16]
 800dc0e:	3314      	adds	r3, #20
 800dc10:	0092      	lsls	r2, r2, #2
 800dc12:	189a      	adds	r2, r3, r2
 800dc14:	4694      	mov	ip, r2
 800dc16:	221f      	movs	r2, #31
 800dc18:	4017      	ands	r7, r2
 800dc1a:	d024      	beq.n	800dc66 <__lshift+0x9a>
 800dc1c:	3201      	adds	r2, #1
 800dc1e:	1bd2      	subs	r2, r2, r7
 800dc20:	9203      	str	r2, [sp, #12]
 800dc22:	2200      	movs	r2, #0
 800dc24:	6819      	ldr	r1, [r3, #0]
 800dc26:	0020      	movs	r0, r4
 800dc28:	40b9      	lsls	r1, r7
 800dc2a:	430a      	orrs	r2, r1
 800dc2c:	c404      	stmia	r4!, {r2}
 800dc2e:	cb04      	ldmia	r3!, {r2}
 800dc30:	9903      	ldr	r1, [sp, #12]
 800dc32:	40ca      	lsrs	r2, r1
 800dc34:	459c      	cmp	ip, r3
 800dc36:	d8f5      	bhi.n	800dc24 <__lshift+0x58>
 800dc38:	6042      	str	r2, [r0, #4]
 800dc3a:	2a00      	cmp	r2, #0
 800dc3c:	d002      	beq.n	800dc44 <__lshift+0x78>
 800dc3e:	9b01      	ldr	r3, [sp, #4]
 800dc40:	3302      	adds	r3, #2
 800dc42:	9300      	str	r3, [sp, #0]
 800dc44:	9b00      	ldr	r3, [sp, #0]
 800dc46:	9802      	ldr	r0, [sp, #8]
 800dc48:	3b01      	subs	r3, #1
 800dc4a:	6133      	str	r3, [r6, #16]
 800dc4c:	0029      	movs	r1, r5
 800dc4e:	f7ff fdf4 	bl	800d83a <_Bfree>
 800dc52:	0030      	movs	r0, r6
 800dc54:	b005      	add	sp, #20
 800dc56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc58:	3101      	adds	r1, #1
 800dc5a:	005b      	lsls	r3, r3, #1
 800dc5c:	e7c3      	b.n	800dbe6 <__lshift+0x1a>
 800dc5e:	0098      	lsls	r0, r3, #2
 800dc60:	5011      	str	r1, [r2, r0]
 800dc62:	3301      	adds	r3, #1
 800dc64:	e7ca      	b.n	800dbfc <__lshift+0x30>
 800dc66:	cb04      	ldmia	r3!, {r2}
 800dc68:	c404      	stmia	r4!, {r2}
 800dc6a:	459c      	cmp	ip, r3
 800dc6c:	d8fb      	bhi.n	800dc66 <__lshift+0x9a>
 800dc6e:	e7e9      	b.n	800dc44 <__lshift+0x78>

0800dc70 <__mcmp>:
 800dc70:	690a      	ldr	r2, [r1, #16]
 800dc72:	6903      	ldr	r3, [r0, #16]
 800dc74:	b530      	push	{r4, r5, lr}
 800dc76:	1a9b      	subs	r3, r3, r2
 800dc78:	d10d      	bne.n	800dc96 <__mcmp+0x26>
 800dc7a:	0092      	lsls	r2, r2, #2
 800dc7c:	3014      	adds	r0, #20
 800dc7e:	3114      	adds	r1, #20
 800dc80:	1884      	adds	r4, r0, r2
 800dc82:	1889      	adds	r1, r1, r2
 800dc84:	3c04      	subs	r4, #4
 800dc86:	3904      	subs	r1, #4
 800dc88:	6825      	ldr	r5, [r4, #0]
 800dc8a:	680a      	ldr	r2, [r1, #0]
 800dc8c:	4295      	cmp	r5, r2
 800dc8e:	d004      	beq.n	800dc9a <__mcmp+0x2a>
 800dc90:	2301      	movs	r3, #1
 800dc92:	4295      	cmp	r5, r2
 800dc94:	d304      	bcc.n	800dca0 <__mcmp+0x30>
 800dc96:	0018      	movs	r0, r3
 800dc98:	bd30      	pop	{r4, r5, pc}
 800dc9a:	42a0      	cmp	r0, r4
 800dc9c:	d3f2      	bcc.n	800dc84 <__mcmp+0x14>
 800dc9e:	e7fa      	b.n	800dc96 <__mcmp+0x26>
 800dca0:	425b      	negs	r3, r3
 800dca2:	e7f8      	b.n	800dc96 <__mcmp+0x26>

0800dca4 <__mdiff>:
 800dca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dca6:	000d      	movs	r5, r1
 800dca8:	b085      	sub	sp, #20
 800dcaa:	0007      	movs	r7, r0
 800dcac:	0011      	movs	r1, r2
 800dcae:	0028      	movs	r0, r5
 800dcb0:	0014      	movs	r4, r2
 800dcb2:	f7ff ffdd 	bl	800dc70 <__mcmp>
 800dcb6:	1e06      	subs	r6, r0, #0
 800dcb8:	d108      	bne.n	800dccc <__mdiff+0x28>
 800dcba:	0001      	movs	r1, r0
 800dcbc:	0038      	movs	r0, r7
 800dcbe:	f7ff fd84 	bl	800d7ca <_Balloc>
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	6146      	str	r6, [r0, #20]
 800dcc6:	6103      	str	r3, [r0, #16]
 800dcc8:	b005      	add	sp, #20
 800dcca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dccc:	2301      	movs	r3, #1
 800dcce:	9301      	str	r3, [sp, #4]
 800dcd0:	2800      	cmp	r0, #0
 800dcd2:	db04      	blt.n	800dcde <__mdiff+0x3a>
 800dcd4:	0023      	movs	r3, r4
 800dcd6:	002c      	movs	r4, r5
 800dcd8:	001d      	movs	r5, r3
 800dcda:	2300      	movs	r3, #0
 800dcdc:	9301      	str	r3, [sp, #4]
 800dcde:	6861      	ldr	r1, [r4, #4]
 800dce0:	0038      	movs	r0, r7
 800dce2:	f7ff fd72 	bl	800d7ca <_Balloc>
 800dce6:	002f      	movs	r7, r5
 800dce8:	2200      	movs	r2, #0
 800dcea:	9b01      	ldr	r3, [sp, #4]
 800dcec:	6926      	ldr	r6, [r4, #16]
 800dcee:	60c3      	str	r3, [r0, #12]
 800dcf0:	3414      	adds	r4, #20
 800dcf2:	00b3      	lsls	r3, r6, #2
 800dcf4:	18e3      	adds	r3, r4, r3
 800dcf6:	9302      	str	r3, [sp, #8]
 800dcf8:	692b      	ldr	r3, [r5, #16]
 800dcfa:	3714      	adds	r7, #20
 800dcfc:	009b      	lsls	r3, r3, #2
 800dcfe:	18fb      	adds	r3, r7, r3
 800dd00:	9303      	str	r3, [sp, #12]
 800dd02:	0003      	movs	r3, r0
 800dd04:	4694      	mov	ip, r2
 800dd06:	3314      	adds	r3, #20
 800dd08:	cc20      	ldmia	r4!, {r5}
 800dd0a:	cf04      	ldmia	r7!, {r2}
 800dd0c:	9201      	str	r2, [sp, #4]
 800dd0e:	b2aa      	uxth	r2, r5
 800dd10:	4494      	add	ip, r2
 800dd12:	466a      	mov	r2, sp
 800dd14:	4661      	mov	r1, ip
 800dd16:	8892      	ldrh	r2, [r2, #4]
 800dd18:	0c2d      	lsrs	r5, r5, #16
 800dd1a:	1a8a      	subs	r2, r1, r2
 800dd1c:	9901      	ldr	r1, [sp, #4]
 800dd1e:	0c09      	lsrs	r1, r1, #16
 800dd20:	1a69      	subs	r1, r5, r1
 800dd22:	1415      	asrs	r5, r2, #16
 800dd24:	1949      	adds	r1, r1, r5
 800dd26:	140d      	asrs	r5, r1, #16
 800dd28:	b292      	uxth	r2, r2
 800dd2a:	0409      	lsls	r1, r1, #16
 800dd2c:	430a      	orrs	r2, r1
 800dd2e:	601a      	str	r2, [r3, #0]
 800dd30:	9a03      	ldr	r2, [sp, #12]
 800dd32:	46ac      	mov	ip, r5
 800dd34:	3304      	adds	r3, #4
 800dd36:	42ba      	cmp	r2, r7
 800dd38:	d8e6      	bhi.n	800dd08 <__mdiff+0x64>
 800dd3a:	9902      	ldr	r1, [sp, #8]
 800dd3c:	001a      	movs	r2, r3
 800dd3e:	428c      	cmp	r4, r1
 800dd40:	d305      	bcc.n	800dd4e <__mdiff+0xaa>
 800dd42:	3a04      	subs	r2, #4
 800dd44:	6813      	ldr	r3, [r2, #0]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d00e      	beq.n	800dd68 <__mdiff+0xc4>
 800dd4a:	6106      	str	r6, [r0, #16]
 800dd4c:	e7bc      	b.n	800dcc8 <__mdiff+0x24>
 800dd4e:	cc04      	ldmia	r4!, {r2}
 800dd50:	b291      	uxth	r1, r2
 800dd52:	4461      	add	r1, ip
 800dd54:	140d      	asrs	r5, r1, #16
 800dd56:	0c12      	lsrs	r2, r2, #16
 800dd58:	1952      	adds	r2, r2, r5
 800dd5a:	1415      	asrs	r5, r2, #16
 800dd5c:	b289      	uxth	r1, r1
 800dd5e:	0412      	lsls	r2, r2, #16
 800dd60:	430a      	orrs	r2, r1
 800dd62:	46ac      	mov	ip, r5
 800dd64:	c304      	stmia	r3!, {r2}
 800dd66:	e7e8      	b.n	800dd3a <__mdiff+0x96>
 800dd68:	3e01      	subs	r6, #1
 800dd6a:	e7ea      	b.n	800dd42 <__mdiff+0x9e>

0800dd6c <__ulp>:
 800dd6c:	000b      	movs	r3, r1
 800dd6e:	4910      	ldr	r1, [pc, #64]	; (800ddb0 <__ulp+0x44>)
 800dd70:	b510      	push	{r4, lr}
 800dd72:	4019      	ands	r1, r3
 800dd74:	4b0f      	ldr	r3, [pc, #60]	; (800ddb4 <__ulp+0x48>)
 800dd76:	18c9      	adds	r1, r1, r3
 800dd78:	2900      	cmp	r1, #0
 800dd7a:	dd04      	ble.n	800dd86 <__ulp+0x1a>
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	000b      	movs	r3, r1
 800dd80:	0010      	movs	r0, r2
 800dd82:	0019      	movs	r1, r3
 800dd84:	bd10      	pop	{r4, pc}
 800dd86:	4249      	negs	r1, r1
 800dd88:	1509      	asrs	r1, r1, #20
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	2913      	cmp	r1, #19
 800dd90:	dc04      	bgt.n	800dd9c <__ulp+0x30>
 800dd92:	2080      	movs	r0, #128	; 0x80
 800dd94:	0300      	lsls	r0, r0, #12
 800dd96:	4108      	asrs	r0, r1
 800dd98:	0003      	movs	r3, r0
 800dd9a:	e7f1      	b.n	800dd80 <__ulp+0x14>
 800dd9c:	3914      	subs	r1, #20
 800dd9e:	2001      	movs	r0, #1
 800dda0:	291e      	cmp	r1, #30
 800dda2:	dc02      	bgt.n	800ddaa <__ulp+0x3e>
 800dda4:	241f      	movs	r4, #31
 800dda6:	1a61      	subs	r1, r4, r1
 800dda8:	4088      	lsls	r0, r1
 800ddaa:	0002      	movs	r2, r0
 800ddac:	e7e8      	b.n	800dd80 <__ulp+0x14>
 800ddae:	46c0      	nop			; (mov r8, r8)
 800ddb0:	7ff00000 	.word	0x7ff00000
 800ddb4:	fcc00000 	.word	0xfcc00000

0800ddb8 <__b2d>:
 800ddb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ddba:	0006      	movs	r6, r0
 800ddbc:	6903      	ldr	r3, [r0, #16]
 800ddbe:	3614      	adds	r6, #20
 800ddc0:	009b      	lsls	r3, r3, #2
 800ddc2:	18f3      	adds	r3, r6, r3
 800ddc4:	1f1d      	subs	r5, r3, #4
 800ddc6:	682c      	ldr	r4, [r5, #0]
 800ddc8:	000f      	movs	r7, r1
 800ddca:	0020      	movs	r0, r4
 800ddcc:	9301      	str	r3, [sp, #4]
 800ddce:	f7ff fdc9 	bl	800d964 <__hi0bits>
 800ddd2:	2320      	movs	r3, #32
 800ddd4:	1a1b      	subs	r3, r3, r0
 800ddd6:	603b      	str	r3, [r7, #0]
 800ddd8:	491c      	ldr	r1, [pc, #112]	; (800de4c <__b2d+0x94>)
 800ddda:	280a      	cmp	r0, #10
 800dddc:	dc16      	bgt.n	800de0c <__b2d+0x54>
 800ddde:	230b      	movs	r3, #11
 800dde0:	0027      	movs	r7, r4
 800dde2:	1a1b      	subs	r3, r3, r0
 800dde4:	40df      	lsrs	r7, r3
 800dde6:	4339      	orrs	r1, r7
 800dde8:	469c      	mov	ip, r3
 800ddea:	000b      	movs	r3, r1
 800ddec:	2100      	movs	r1, #0
 800ddee:	42ae      	cmp	r6, r5
 800ddf0:	d202      	bcs.n	800ddf8 <__b2d+0x40>
 800ddf2:	9901      	ldr	r1, [sp, #4]
 800ddf4:	3908      	subs	r1, #8
 800ddf6:	6809      	ldr	r1, [r1, #0]
 800ddf8:	3015      	adds	r0, #21
 800ddfa:	4084      	lsls	r4, r0
 800ddfc:	4660      	mov	r0, ip
 800ddfe:	40c1      	lsrs	r1, r0
 800de00:	430c      	orrs	r4, r1
 800de02:	0022      	movs	r2, r4
 800de04:	0010      	movs	r0, r2
 800de06:	0019      	movs	r1, r3
 800de08:	b003      	add	sp, #12
 800de0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de0c:	2700      	movs	r7, #0
 800de0e:	42ae      	cmp	r6, r5
 800de10:	d202      	bcs.n	800de18 <__b2d+0x60>
 800de12:	9d01      	ldr	r5, [sp, #4]
 800de14:	3d08      	subs	r5, #8
 800de16:	682f      	ldr	r7, [r5, #0]
 800de18:	380b      	subs	r0, #11
 800de1a:	4684      	mov	ip, r0
 800de1c:	1e03      	subs	r3, r0, #0
 800de1e:	d012      	beq.n	800de46 <__b2d+0x8e>
 800de20:	409c      	lsls	r4, r3
 800de22:	2020      	movs	r0, #32
 800de24:	4321      	orrs	r1, r4
 800de26:	003c      	movs	r4, r7
 800de28:	1ac0      	subs	r0, r0, r3
 800de2a:	40c4      	lsrs	r4, r0
 800de2c:	4321      	orrs	r1, r4
 800de2e:	000b      	movs	r3, r1
 800de30:	2100      	movs	r1, #0
 800de32:	42b5      	cmp	r5, r6
 800de34:	d901      	bls.n	800de3a <__b2d+0x82>
 800de36:	3d04      	subs	r5, #4
 800de38:	6829      	ldr	r1, [r5, #0]
 800de3a:	4664      	mov	r4, ip
 800de3c:	40c1      	lsrs	r1, r0
 800de3e:	40a7      	lsls	r7, r4
 800de40:	430f      	orrs	r7, r1
 800de42:	003a      	movs	r2, r7
 800de44:	e7de      	b.n	800de04 <__b2d+0x4c>
 800de46:	4321      	orrs	r1, r4
 800de48:	000b      	movs	r3, r1
 800de4a:	e7fa      	b.n	800de42 <__b2d+0x8a>
 800de4c:	3ff00000 	.word	0x3ff00000

0800de50 <__d2b>:
 800de50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de52:	001d      	movs	r5, r3
 800de54:	2101      	movs	r1, #1
 800de56:	0014      	movs	r4, r2
 800de58:	9f08      	ldr	r7, [sp, #32]
 800de5a:	f7ff fcb6 	bl	800d7ca <_Balloc>
 800de5e:	032b      	lsls	r3, r5, #12
 800de60:	006d      	lsls	r5, r5, #1
 800de62:	0006      	movs	r6, r0
 800de64:	0b1b      	lsrs	r3, r3, #12
 800de66:	0d6d      	lsrs	r5, r5, #21
 800de68:	d124      	bne.n	800deb4 <__d2b+0x64>
 800de6a:	9301      	str	r3, [sp, #4]
 800de6c:	2c00      	cmp	r4, #0
 800de6e:	d027      	beq.n	800dec0 <__d2b+0x70>
 800de70:	4668      	mov	r0, sp
 800de72:	9400      	str	r4, [sp, #0]
 800de74:	f7ff fd90 	bl	800d998 <__lo0bits>
 800de78:	9c00      	ldr	r4, [sp, #0]
 800de7a:	2800      	cmp	r0, #0
 800de7c:	d01e      	beq.n	800debc <__d2b+0x6c>
 800de7e:	9b01      	ldr	r3, [sp, #4]
 800de80:	2120      	movs	r1, #32
 800de82:	001a      	movs	r2, r3
 800de84:	1a09      	subs	r1, r1, r0
 800de86:	408a      	lsls	r2, r1
 800de88:	40c3      	lsrs	r3, r0
 800de8a:	4322      	orrs	r2, r4
 800de8c:	6172      	str	r2, [r6, #20]
 800de8e:	9301      	str	r3, [sp, #4]
 800de90:	9c01      	ldr	r4, [sp, #4]
 800de92:	61b4      	str	r4, [r6, #24]
 800de94:	1e63      	subs	r3, r4, #1
 800de96:	419c      	sbcs	r4, r3
 800de98:	3401      	adds	r4, #1
 800de9a:	6134      	str	r4, [r6, #16]
 800de9c:	2d00      	cmp	r5, #0
 800de9e:	d018      	beq.n	800ded2 <__d2b+0x82>
 800dea0:	4b12      	ldr	r3, [pc, #72]	; (800deec <__d2b+0x9c>)
 800dea2:	18ed      	adds	r5, r5, r3
 800dea4:	2335      	movs	r3, #53	; 0x35
 800dea6:	182d      	adds	r5, r5, r0
 800dea8:	603d      	str	r5, [r7, #0]
 800deaa:	1a18      	subs	r0, r3, r0
 800deac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deae:	6018      	str	r0, [r3, #0]
 800deb0:	0030      	movs	r0, r6
 800deb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800deb4:	2280      	movs	r2, #128	; 0x80
 800deb6:	0352      	lsls	r2, r2, #13
 800deb8:	4313      	orrs	r3, r2
 800deba:	e7d6      	b.n	800de6a <__d2b+0x1a>
 800debc:	6174      	str	r4, [r6, #20]
 800debe:	e7e7      	b.n	800de90 <__d2b+0x40>
 800dec0:	a801      	add	r0, sp, #4
 800dec2:	f7ff fd69 	bl	800d998 <__lo0bits>
 800dec6:	2401      	movs	r4, #1
 800dec8:	9b01      	ldr	r3, [sp, #4]
 800deca:	6134      	str	r4, [r6, #16]
 800decc:	6173      	str	r3, [r6, #20]
 800dece:	3020      	adds	r0, #32
 800ded0:	e7e4      	b.n	800de9c <__d2b+0x4c>
 800ded2:	4b07      	ldr	r3, [pc, #28]	; (800def0 <__d2b+0xa0>)
 800ded4:	18c0      	adds	r0, r0, r3
 800ded6:	4b07      	ldr	r3, [pc, #28]	; (800def4 <__d2b+0xa4>)
 800ded8:	6038      	str	r0, [r7, #0]
 800deda:	18e3      	adds	r3, r4, r3
 800dedc:	009b      	lsls	r3, r3, #2
 800dede:	18f3      	adds	r3, r6, r3
 800dee0:	6958      	ldr	r0, [r3, #20]
 800dee2:	f7ff fd3f 	bl	800d964 <__hi0bits>
 800dee6:	0164      	lsls	r4, r4, #5
 800dee8:	1a20      	subs	r0, r4, r0
 800deea:	e7df      	b.n	800deac <__d2b+0x5c>
 800deec:	fffffbcd 	.word	0xfffffbcd
 800def0:	fffffbce 	.word	0xfffffbce
 800def4:	3fffffff 	.word	0x3fffffff

0800def8 <__ratio>:
 800def8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800defa:	b085      	sub	sp, #20
 800defc:	000f      	movs	r7, r1
 800defe:	a902      	add	r1, sp, #8
 800df00:	0006      	movs	r6, r0
 800df02:	f7ff ff59 	bl	800ddb8 <__b2d>
 800df06:	0004      	movs	r4, r0
 800df08:	000d      	movs	r5, r1
 800df0a:	0038      	movs	r0, r7
 800df0c:	a903      	add	r1, sp, #12
 800df0e:	9400      	str	r4, [sp, #0]
 800df10:	9501      	str	r5, [sp, #4]
 800df12:	f7ff ff51 	bl	800ddb8 <__b2d>
 800df16:	6936      	ldr	r6, [r6, #16]
 800df18:	693f      	ldr	r7, [r7, #16]
 800df1a:	0002      	movs	r2, r0
 800df1c:	1bf7      	subs	r7, r6, r7
 800df1e:	017e      	lsls	r6, r7, #5
 800df20:	46b4      	mov	ip, r6
 800df22:	9f03      	ldr	r7, [sp, #12]
 800df24:	9e02      	ldr	r6, [sp, #8]
 800df26:	000b      	movs	r3, r1
 800df28:	1bf6      	subs	r6, r6, r7
 800df2a:	4466      	add	r6, ip
 800df2c:	0537      	lsls	r7, r6, #20
 800df2e:	2e00      	cmp	r6, #0
 800df30:	dd07      	ble.n	800df42 <__ratio+0x4a>
 800df32:	1979      	adds	r1, r7, r5
 800df34:	9101      	str	r1, [sp, #4]
 800df36:	9800      	ldr	r0, [sp, #0]
 800df38:	9901      	ldr	r1, [sp, #4]
 800df3a:	f7f3 fb87 	bl	800164c <__aeabi_ddiv>
 800df3e:	b005      	add	sp, #20
 800df40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df42:	1bcb      	subs	r3, r1, r7
 800df44:	e7f7      	b.n	800df36 <__ratio+0x3e>

0800df46 <__copybits>:
 800df46:	0013      	movs	r3, r2
 800df48:	3901      	subs	r1, #1
 800df4a:	b510      	push	{r4, lr}
 800df4c:	1149      	asrs	r1, r1, #5
 800df4e:	6912      	ldr	r2, [r2, #16]
 800df50:	3101      	adds	r1, #1
 800df52:	0089      	lsls	r1, r1, #2
 800df54:	3314      	adds	r3, #20
 800df56:	0092      	lsls	r2, r2, #2
 800df58:	1841      	adds	r1, r0, r1
 800df5a:	189a      	adds	r2, r3, r2
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d803      	bhi.n	800df68 <__copybits+0x22>
 800df60:	2300      	movs	r3, #0
 800df62:	4281      	cmp	r1, r0
 800df64:	d803      	bhi.n	800df6e <__copybits+0x28>
 800df66:	bd10      	pop	{r4, pc}
 800df68:	cb10      	ldmia	r3!, {r4}
 800df6a:	c010      	stmia	r0!, {r4}
 800df6c:	e7f6      	b.n	800df5c <__copybits+0x16>
 800df6e:	c008      	stmia	r0!, {r3}
 800df70:	e7f7      	b.n	800df62 <__copybits+0x1c>

0800df72 <__any_on>:
 800df72:	0002      	movs	r2, r0
 800df74:	6900      	ldr	r0, [r0, #16]
 800df76:	b510      	push	{r4, lr}
 800df78:	3214      	adds	r2, #20
 800df7a:	114b      	asrs	r3, r1, #5
 800df7c:	4298      	cmp	r0, r3
 800df7e:	db12      	blt.n	800dfa6 <__any_on+0x34>
 800df80:	dd0b      	ble.n	800df9a <__any_on+0x28>
 800df82:	201f      	movs	r0, #31
 800df84:	4001      	ands	r1, r0
 800df86:	d008      	beq.n	800df9a <__any_on+0x28>
 800df88:	0098      	lsls	r0, r3, #2
 800df8a:	5884      	ldr	r4, [r0, r2]
 800df8c:	0020      	movs	r0, r4
 800df8e:	40c8      	lsrs	r0, r1
 800df90:	4088      	lsls	r0, r1
 800df92:	0001      	movs	r1, r0
 800df94:	2001      	movs	r0, #1
 800df96:	428c      	cmp	r4, r1
 800df98:	d104      	bne.n	800dfa4 <__any_on+0x32>
 800df9a:	009b      	lsls	r3, r3, #2
 800df9c:	18d3      	adds	r3, r2, r3
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	d803      	bhi.n	800dfaa <__any_on+0x38>
 800dfa2:	2000      	movs	r0, #0
 800dfa4:	bd10      	pop	{r4, pc}
 800dfa6:	0003      	movs	r3, r0
 800dfa8:	e7f7      	b.n	800df9a <__any_on+0x28>
 800dfaa:	3b04      	subs	r3, #4
 800dfac:	6819      	ldr	r1, [r3, #0]
 800dfae:	2900      	cmp	r1, #0
 800dfb0:	d0f5      	beq.n	800df9e <__any_on+0x2c>
 800dfb2:	2001      	movs	r0, #1
 800dfb4:	e7f6      	b.n	800dfa4 <__any_on+0x32>

0800dfb6 <_calloc_r>:
 800dfb6:	434a      	muls	r2, r1
 800dfb8:	b570      	push	{r4, r5, r6, lr}
 800dfba:	0011      	movs	r1, r2
 800dfbc:	0014      	movs	r4, r2
 800dfbe:	f000 f853 	bl	800e068 <_malloc_r>
 800dfc2:	1e05      	subs	r5, r0, #0
 800dfc4:	d003      	beq.n	800dfce <_calloc_r+0x18>
 800dfc6:	0022      	movs	r2, r4
 800dfc8:	2100      	movs	r1, #0
 800dfca:	f7fc f97f 	bl	800a2cc <memset>
 800dfce:	0028      	movs	r0, r5
 800dfd0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dfd4 <_free_r>:
 800dfd4:	b570      	push	{r4, r5, r6, lr}
 800dfd6:	0005      	movs	r5, r0
 800dfd8:	2900      	cmp	r1, #0
 800dfda:	d010      	beq.n	800dffe <_free_r+0x2a>
 800dfdc:	1f0c      	subs	r4, r1, #4
 800dfde:	6823      	ldr	r3, [r4, #0]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	da00      	bge.n	800dfe6 <_free_r+0x12>
 800dfe4:	18e4      	adds	r4, r4, r3
 800dfe6:	0028      	movs	r0, r5
 800dfe8:	f000 fc27 	bl	800e83a <__malloc_lock>
 800dfec:	4a1d      	ldr	r2, [pc, #116]	; (800e064 <_free_r+0x90>)
 800dfee:	6813      	ldr	r3, [r2, #0]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d105      	bne.n	800e000 <_free_r+0x2c>
 800dff4:	6063      	str	r3, [r4, #4]
 800dff6:	6014      	str	r4, [r2, #0]
 800dff8:	0028      	movs	r0, r5
 800dffa:	f000 fc1f 	bl	800e83c <__malloc_unlock>
 800dffe:	bd70      	pop	{r4, r5, r6, pc}
 800e000:	42a3      	cmp	r3, r4
 800e002:	d909      	bls.n	800e018 <_free_r+0x44>
 800e004:	6821      	ldr	r1, [r4, #0]
 800e006:	1860      	adds	r0, r4, r1
 800e008:	4283      	cmp	r3, r0
 800e00a:	d1f3      	bne.n	800dff4 <_free_r+0x20>
 800e00c:	6818      	ldr	r0, [r3, #0]
 800e00e:	685b      	ldr	r3, [r3, #4]
 800e010:	1841      	adds	r1, r0, r1
 800e012:	6021      	str	r1, [r4, #0]
 800e014:	e7ee      	b.n	800dff4 <_free_r+0x20>
 800e016:	0013      	movs	r3, r2
 800e018:	685a      	ldr	r2, [r3, #4]
 800e01a:	2a00      	cmp	r2, #0
 800e01c:	d001      	beq.n	800e022 <_free_r+0x4e>
 800e01e:	42a2      	cmp	r2, r4
 800e020:	d9f9      	bls.n	800e016 <_free_r+0x42>
 800e022:	6819      	ldr	r1, [r3, #0]
 800e024:	1858      	adds	r0, r3, r1
 800e026:	42a0      	cmp	r0, r4
 800e028:	d10b      	bne.n	800e042 <_free_r+0x6e>
 800e02a:	6820      	ldr	r0, [r4, #0]
 800e02c:	1809      	adds	r1, r1, r0
 800e02e:	1858      	adds	r0, r3, r1
 800e030:	6019      	str	r1, [r3, #0]
 800e032:	4282      	cmp	r2, r0
 800e034:	d1e0      	bne.n	800dff8 <_free_r+0x24>
 800e036:	6810      	ldr	r0, [r2, #0]
 800e038:	6852      	ldr	r2, [r2, #4]
 800e03a:	1841      	adds	r1, r0, r1
 800e03c:	6019      	str	r1, [r3, #0]
 800e03e:	605a      	str	r2, [r3, #4]
 800e040:	e7da      	b.n	800dff8 <_free_r+0x24>
 800e042:	42a0      	cmp	r0, r4
 800e044:	d902      	bls.n	800e04c <_free_r+0x78>
 800e046:	230c      	movs	r3, #12
 800e048:	602b      	str	r3, [r5, #0]
 800e04a:	e7d5      	b.n	800dff8 <_free_r+0x24>
 800e04c:	6821      	ldr	r1, [r4, #0]
 800e04e:	1860      	adds	r0, r4, r1
 800e050:	4282      	cmp	r2, r0
 800e052:	d103      	bne.n	800e05c <_free_r+0x88>
 800e054:	6810      	ldr	r0, [r2, #0]
 800e056:	6852      	ldr	r2, [r2, #4]
 800e058:	1841      	adds	r1, r0, r1
 800e05a:	6021      	str	r1, [r4, #0]
 800e05c:	6062      	str	r2, [r4, #4]
 800e05e:	605c      	str	r4, [r3, #4]
 800e060:	e7ca      	b.n	800dff8 <_free_r+0x24>
 800e062:	46c0      	nop			; (mov r8, r8)
 800e064:	20000784 	.word	0x20000784

0800e068 <_malloc_r>:
 800e068:	2303      	movs	r3, #3
 800e06a:	b570      	push	{r4, r5, r6, lr}
 800e06c:	1ccd      	adds	r5, r1, #3
 800e06e:	439d      	bics	r5, r3
 800e070:	3508      	adds	r5, #8
 800e072:	0006      	movs	r6, r0
 800e074:	2d0c      	cmp	r5, #12
 800e076:	d21e      	bcs.n	800e0b6 <_malloc_r+0x4e>
 800e078:	250c      	movs	r5, #12
 800e07a:	42a9      	cmp	r1, r5
 800e07c:	d81d      	bhi.n	800e0ba <_malloc_r+0x52>
 800e07e:	0030      	movs	r0, r6
 800e080:	f000 fbdb 	bl	800e83a <__malloc_lock>
 800e084:	4a25      	ldr	r2, [pc, #148]	; (800e11c <_malloc_r+0xb4>)
 800e086:	6814      	ldr	r4, [r2, #0]
 800e088:	0021      	movs	r1, r4
 800e08a:	2900      	cmp	r1, #0
 800e08c:	d119      	bne.n	800e0c2 <_malloc_r+0x5a>
 800e08e:	4c24      	ldr	r4, [pc, #144]	; (800e120 <_malloc_r+0xb8>)
 800e090:	6823      	ldr	r3, [r4, #0]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d103      	bne.n	800e09e <_malloc_r+0x36>
 800e096:	0030      	movs	r0, r6
 800e098:	f000 fae2 	bl	800e660 <_sbrk_r>
 800e09c:	6020      	str	r0, [r4, #0]
 800e09e:	0029      	movs	r1, r5
 800e0a0:	0030      	movs	r0, r6
 800e0a2:	f000 fadd 	bl	800e660 <_sbrk_r>
 800e0a6:	1c43      	adds	r3, r0, #1
 800e0a8:	d12b      	bne.n	800e102 <_malloc_r+0x9a>
 800e0aa:	230c      	movs	r3, #12
 800e0ac:	0030      	movs	r0, r6
 800e0ae:	6033      	str	r3, [r6, #0]
 800e0b0:	f000 fbc4 	bl	800e83c <__malloc_unlock>
 800e0b4:	e003      	b.n	800e0be <_malloc_r+0x56>
 800e0b6:	2d00      	cmp	r5, #0
 800e0b8:	dadf      	bge.n	800e07a <_malloc_r+0x12>
 800e0ba:	230c      	movs	r3, #12
 800e0bc:	6033      	str	r3, [r6, #0]
 800e0be:	2000      	movs	r0, #0
 800e0c0:	bd70      	pop	{r4, r5, r6, pc}
 800e0c2:	680b      	ldr	r3, [r1, #0]
 800e0c4:	1b5b      	subs	r3, r3, r5
 800e0c6:	d419      	bmi.n	800e0fc <_malloc_r+0x94>
 800e0c8:	2b0b      	cmp	r3, #11
 800e0ca:	d903      	bls.n	800e0d4 <_malloc_r+0x6c>
 800e0cc:	600b      	str	r3, [r1, #0]
 800e0ce:	18cc      	adds	r4, r1, r3
 800e0d0:	6025      	str	r5, [r4, #0]
 800e0d2:	e003      	b.n	800e0dc <_malloc_r+0x74>
 800e0d4:	684b      	ldr	r3, [r1, #4]
 800e0d6:	428c      	cmp	r4, r1
 800e0d8:	d10d      	bne.n	800e0f6 <_malloc_r+0x8e>
 800e0da:	6013      	str	r3, [r2, #0]
 800e0dc:	0030      	movs	r0, r6
 800e0de:	f000 fbad 	bl	800e83c <__malloc_unlock>
 800e0e2:	0020      	movs	r0, r4
 800e0e4:	2207      	movs	r2, #7
 800e0e6:	300b      	adds	r0, #11
 800e0e8:	1d23      	adds	r3, r4, #4
 800e0ea:	4390      	bics	r0, r2
 800e0ec:	1ac3      	subs	r3, r0, r3
 800e0ee:	d0e7      	beq.n	800e0c0 <_malloc_r+0x58>
 800e0f0:	425a      	negs	r2, r3
 800e0f2:	50e2      	str	r2, [r4, r3]
 800e0f4:	e7e4      	b.n	800e0c0 <_malloc_r+0x58>
 800e0f6:	6063      	str	r3, [r4, #4]
 800e0f8:	000c      	movs	r4, r1
 800e0fa:	e7ef      	b.n	800e0dc <_malloc_r+0x74>
 800e0fc:	000c      	movs	r4, r1
 800e0fe:	6849      	ldr	r1, [r1, #4]
 800e100:	e7c3      	b.n	800e08a <_malloc_r+0x22>
 800e102:	2303      	movs	r3, #3
 800e104:	1cc4      	adds	r4, r0, #3
 800e106:	439c      	bics	r4, r3
 800e108:	42a0      	cmp	r0, r4
 800e10a:	d0e1      	beq.n	800e0d0 <_malloc_r+0x68>
 800e10c:	1a21      	subs	r1, r4, r0
 800e10e:	0030      	movs	r0, r6
 800e110:	f000 faa6 	bl	800e660 <_sbrk_r>
 800e114:	1c43      	adds	r3, r0, #1
 800e116:	d1db      	bne.n	800e0d0 <_malloc_r+0x68>
 800e118:	e7c7      	b.n	800e0aa <_malloc_r+0x42>
 800e11a:	46c0      	nop			; (mov r8, r8)
 800e11c:	20000784 	.word	0x20000784
 800e120:	20000788 	.word	0x20000788

0800e124 <__ssputs_r>:
 800e124:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e126:	688e      	ldr	r6, [r1, #8]
 800e128:	b085      	sub	sp, #20
 800e12a:	0007      	movs	r7, r0
 800e12c:	000c      	movs	r4, r1
 800e12e:	9203      	str	r2, [sp, #12]
 800e130:	9301      	str	r3, [sp, #4]
 800e132:	429e      	cmp	r6, r3
 800e134:	d83c      	bhi.n	800e1b0 <__ssputs_r+0x8c>
 800e136:	2390      	movs	r3, #144	; 0x90
 800e138:	898a      	ldrh	r2, [r1, #12]
 800e13a:	00db      	lsls	r3, r3, #3
 800e13c:	421a      	tst	r2, r3
 800e13e:	d034      	beq.n	800e1aa <__ssputs_r+0x86>
 800e140:	2503      	movs	r5, #3
 800e142:	6909      	ldr	r1, [r1, #16]
 800e144:	6823      	ldr	r3, [r4, #0]
 800e146:	1a5b      	subs	r3, r3, r1
 800e148:	9302      	str	r3, [sp, #8]
 800e14a:	6963      	ldr	r3, [r4, #20]
 800e14c:	9802      	ldr	r0, [sp, #8]
 800e14e:	435d      	muls	r5, r3
 800e150:	0feb      	lsrs	r3, r5, #31
 800e152:	195d      	adds	r5, r3, r5
 800e154:	9b01      	ldr	r3, [sp, #4]
 800e156:	106d      	asrs	r5, r5, #1
 800e158:	3301      	adds	r3, #1
 800e15a:	181b      	adds	r3, r3, r0
 800e15c:	42ab      	cmp	r3, r5
 800e15e:	d900      	bls.n	800e162 <__ssputs_r+0x3e>
 800e160:	001d      	movs	r5, r3
 800e162:	0553      	lsls	r3, r2, #21
 800e164:	d532      	bpl.n	800e1cc <__ssputs_r+0xa8>
 800e166:	0029      	movs	r1, r5
 800e168:	0038      	movs	r0, r7
 800e16a:	f7ff ff7d 	bl	800e068 <_malloc_r>
 800e16e:	1e06      	subs	r6, r0, #0
 800e170:	d109      	bne.n	800e186 <__ssputs_r+0x62>
 800e172:	230c      	movs	r3, #12
 800e174:	603b      	str	r3, [r7, #0]
 800e176:	2340      	movs	r3, #64	; 0x40
 800e178:	2001      	movs	r0, #1
 800e17a:	89a2      	ldrh	r2, [r4, #12]
 800e17c:	4240      	negs	r0, r0
 800e17e:	4313      	orrs	r3, r2
 800e180:	81a3      	strh	r3, [r4, #12]
 800e182:	b005      	add	sp, #20
 800e184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e186:	9a02      	ldr	r2, [sp, #8]
 800e188:	6921      	ldr	r1, [r4, #16]
 800e18a:	f7fc f896 	bl	800a2ba <memcpy>
 800e18e:	89a3      	ldrh	r3, [r4, #12]
 800e190:	4a14      	ldr	r2, [pc, #80]	; (800e1e4 <__ssputs_r+0xc0>)
 800e192:	401a      	ands	r2, r3
 800e194:	2380      	movs	r3, #128	; 0x80
 800e196:	4313      	orrs	r3, r2
 800e198:	81a3      	strh	r3, [r4, #12]
 800e19a:	9b02      	ldr	r3, [sp, #8]
 800e19c:	6126      	str	r6, [r4, #16]
 800e19e:	18f6      	adds	r6, r6, r3
 800e1a0:	6026      	str	r6, [r4, #0]
 800e1a2:	6165      	str	r5, [r4, #20]
 800e1a4:	9e01      	ldr	r6, [sp, #4]
 800e1a6:	1aed      	subs	r5, r5, r3
 800e1a8:	60a5      	str	r5, [r4, #8]
 800e1aa:	9b01      	ldr	r3, [sp, #4]
 800e1ac:	429e      	cmp	r6, r3
 800e1ae:	d900      	bls.n	800e1b2 <__ssputs_r+0x8e>
 800e1b0:	9e01      	ldr	r6, [sp, #4]
 800e1b2:	0032      	movs	r2, r6
 800e1b4:	9903      	ldr	r1, [sp, #12]
 800e1b6:	6820      	ldr	r0, [r4, #0]
 800e1b8:	f000 fb2c 	bl	800e814 <memmove>
 800e1bc:	68a3      	ldr	r3, [r4, #8]
 800e1be:	2000      	movs	r0, #0
 800e1c0:	1b9b      	subs	r3, r3, r6
 800e1c2:	60a3      	str	r3, [r4, #8]
 800e1c4:	6823      	ldr	r3, [r4, #0]
 800e1c6:	199e      	adds	r6, r3, r6
 800e1c8:	6026      	str	r6, [r4, #0]
 800e1ca:	e7da      	b.n	800e182 <__ssputs_r+0x5e>
 800e1cc:	002a      	movs	r2, r5
 800e1ce:	0038      	movs	r0, r7
 800e1d0:	f000 fb35 	bl	800e83e <_realloc_r>
 800e1d4:	1e06      	subs	r6, r0, #0
 800e1d6:	d1e0      	bne.n	800e19a <__ssputs_r+0x76>
 800e1d8:	6921      	ldr	r1, [r4, #16]
 800e1da:	0038      	movs	r0, r7
 800e1dc:	f7ff fefa 	bl	800dfd4 <_free_r>
 800e1e0:	e7c7      	b.n	800e172 <__ssputs_r+0x4e>
 800e1e2:	46c0      	nop			; (mov r8, r8)
 800e1e4:	fffffb7f 	.word	0xfffffb7f

0800e1e8 <_svfiprintf_r>:
 800e1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1ea:	b0a1      	sub	sp, #132	; 0x84
 800e1ec:	9003      	str	r0, [sp, #12]
 800e1ee:	001d      	movs	r5, r3
 800e1f0:	898b      	ldrh	r3, [r1, #12]
 800e1f2:	000f      	movs	r7, r1
 800e1f4:	0016      	movs	r6, r2
 800e1f6:	061b      	lsls	r3, r3, #24
 800e1f8:	d511      	bpl.n	800e21e <_svfiprintf_r+0x36>
 800e1fa:	690b      	ldr	r3, [r1, #16]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d10e      	bne.n	800e21e <_svfiprintf_r+0x36>
 800e200:	2140      	movs	r1, #64	; 0x40
 800e202:	f7ff ff31 	bl	800e068 <_malloc_r>
 800e206:	6038      	str	r0, [r7, #0]
 800e208:	6138      	str	r0, [r7, #16]
 800e20a:	2800      	cmp	r0, #0
 800e20c:	d105      	bne.n	800e21a <_svfiprintf_r+0x32>
 800e20e:	230c      	movs	r3, #12
 800e210:	9a03      	ldr	r2, [sp, #12]
 800e212:	3801      	subs	r0, #1
 800e214:	6013      	str	r3, [r2, #0]
 800e216:	b021      	add	sp, #132	; 0x84
 800e218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e21a:	2340      	movs	r3, #64	; 0x40
 800e21c:	617b      	str	r3, [r7, #20]
 800e21e:	2300      	movs	r3, #0
 800e220:	ac08      	add	r4, sp, #32
 800e222:	6163      	str	r3, [r4, #20]
 800e224:	3320      	adds	r3, #32
 800e226:	7663      	strb	r3, [r4, #25]
 800e228:	3310      	adds	r3, #16
 800e22a:	76a3      	strb	r3, [r4, #26]
 800e22c:	9507      	str	r5, [sp, #28]
 800e22e:	0035      	movs	r5, r6
 800e230:	782b      	ldrb	r3, [r5, #0]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d001      	beq.n	800e23a <_svfiprintf_r+0x52>
 800e236:	2b25      	cmp	r3, #37	; 0x25
 800e238:	d146      	bne.n	800e2c8 <_svfiprintf_r+0xe0>
 800e23a:	1bab      	subs	r3, r5, r6
 800e23c:	9305      	str	r3, [sp, #20]
 800e23e:	d00c      	beq.n	800e25a <_svfiprintf_r+0x72>
 800e240:	0032      	movs	r2, r6
 800e242:	0039      	movs	r1, r7
 800e244:	9803      	ldr	r0, [sp, #12]
 800e246:	f7ff ff6d 	bl	800e124 <__ssputs_r>
 800e24a:	1c43      	adds	r3, r0, #1
 800e24c:	d100      	bne.n	800e250 <_svfiprintf_r+0x68>
 800e24e:	e0ae      	b.n	800e3ae <_svfiprintf_r+0x1c6>
 800e250:	6962      	ldr	r2, [r4, #20]
 800e252:	9b05      	ldr	r3, [sp, #20]
 800e254:	4694      	mov	ip, r2
 800e256:	4463      	add	r3, ip
 800e258:	6163      	str	r3, [r4, #20]
 800e25a:	782b      	ldrb	r3, [r5, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d100      	bne.n	800e262 <_svfiprintf_r+0x7a>
 800e260:	e0a5      	b.n	800e3ae <_svfiprintf_r+0x1c6>
 800e262:	2201      	movs	r2, #1
 800e264:	2300      	movs	r3, #0
 800e266:	4252      	negs	r2, r2
 800e268:	6062      	str	r2, [r4, #4]
 800e26a:	a904      	add	r1, sp, #16
 800e26c:	3254      	adds	r2, #84	; 0x54
 800e26e:	1852      	adds	r2, r2, r1
 800e270:	1c6e      	adds	r6, r5, #1
 800e272:	6023      	str	r3, [r4, #0]
 800e274:	60e3      	str	r3, [r4, #12]
 800e276:	60a3      	str	r3, [r4, #8]
 800e278:	7013      	strb	r3, [r2, #0]
 800e27a:	65a3      	str	r3, [r4, #88]	; 0x58
 800e27c:	7831      	ldrb	r1, [r6, #0]
 800e27e:	2205      	movs	r2, #5
 800e280:	4853      	ldr	r0, [pc, #332]	; (800e3d0 <_svfiprintf_r+0x1e8>)
 800e282:	f7ff fa97 	bl	800d7b4 <memchr>
 800e286:	1c75      	adds	r5, r6, #1
 800e288:	2800      	cmp	r0, #0
 800e28a:	d11f      	bne.n	800e2cc <_svfiprintf_r+0xe4>
 800e28c:	6822      	ldr	r2, [r4, #0]
 800e28e:	06d3      	lsls	r3, r2, #27
 800e290:	d504      	bpl.n	800e29c <_svfiprintf_r+0xb4>
 800e292:	2353      	movs	r3, #83	; 0x53
 800e294:	a904      	add	r1, sp, #16
 800e296:	185b      	adds	r3, r3, r1
 800e298:	2120      	movs	r1, #32
 800e29a:	7019      	strb	r1, [r3, #0]
 800e29c:	0713      	lsls	r3, r2, #28
 800e29e:	d504      	bpl.n	800e2aa <_svfiprintf_r+0xc2>
 800e2a0:	2353      	movs	r3, #83	; 0x53
 800e2a2:	a904      	add	r1, sp, #16
 800e2a4:	185b      	adds	r3, r3, r1
 800e2a6:	212b      	movs	r1, #43	; 0x2b
 800e2a8:	7019      	strb	r1, [r3, #0]
 800e2aa:	7833      	ldrb	r3, [r6, #0]
 800e2ac:	2b2a      	cmp	r3, #42	; 0x2a
 800e2ae:	d016      	beq.n	800e2de <_svfiprintf_r+0xf6>
 800e2b0:	0035      	movs	r5, r6
 800e2b2:	2100      	movs	r1, #0
 800e2b4:	200a      	movs	r0, #10
 800e2b6:	68e3      	ldr	r3, [r4, #12]
 800e2b8:	782a      	ldrb	r2, [r5, #0]
 800e2ba:	1c6e      	adds	r6, r5, #1
 800e2bc:	3a30      	subs	r2, #48	; 0x30
 800e2be:	2a09      	cmp	r2, #9
 800e2c0:	d94e      	bls.n	800e360 <_svfiprintf_r+0x178>
 800e2c2:	2900      	cmp	r1, #0
 800e2c4:	d018      	beq.n	800e2f8 <_svfiprintf_r+0x110>
 800e2c6:	e010      	b.n	800e2ea <_svfiprintf_r+0x102>
 800e2c8:	3501      	adds	r5, #1
 800e2ca:	e7b1      	b.n	800e230 <_svfiprintf_r+0x48>
 800e2cc:	4b40      	ldr	r3, [pc, #256]	; (800e3d0 <_svfiprintf_r+0x1e8>)
 800e2ce:	6822      	ldr	r2, [r4, #0]
 800e2d0:	1ac0      	subs	r0, r0, r3
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	4083      	lsls	r3, r0
 800e2d6:	4313      	orrs	r3, r2
 800e2d8:	6023      	str	r3, [r4, #0]
 800e2da:	002e      	movs	r6, r5
 800e2dc:	e7ce      	b.n	800e27c <_svfiprintf_r+0x94>
 800e2de:	9b07      	ldr	r3, [sp, #28]
 800e2e0:	1d19      	adds	r1, r3, #4
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	9107      	str	r1, [sp, #28]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	db01      	blt.n	800e2ee <_svfiprintf_r+0x106>
 800e2ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800e2ec:	e004      	b.n	800e2f8 <_svfiprintf_r+0x110>
 800e2ee:	425b      	negs	r3, r3
 800e2f0:	60e3      	str	r3, [r4, #12]
 800e2f2:	2302      	movs	r3, #2
 800e2f4:	4313      	orrs	r3, r2
 800e2f6:	6023      	str	r3, [r4, #0]
 800e2f8:	782b      	ldrb	r3, [r5, #0]
 800e2fa:	2b2e      	cmp	r3, #46	; 0x2e
 800e2fc:	d10a      	bne.n	800e314 <_svfiprintf_r+0x12c>
 800e2fe:	786b      	ldrb	r3, [r5, #1]
 800e300:	2b2a      	cmp	r3, #42	; 0x2a
 800e302:	d135      	bne.n	800e370 <_svfiprintf_r+0x188>
 800e304:	9b07      	ldr	r3, [sp, #28]
 800e306:	3502      	adds	r5, #2
 800e308:	1d1a      	adds	r2, r3, #4
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	9207      	str	r2, [sp, #28]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	db2b      	blt.n	800e36a <_svfiprintf_r+0x182>
 800e312:	9309      	str	r3, [sp, #36]	; 0x24
 800e314:	4e2f      	ldr	r6, [pc, #188]	; (800e3d4 <_svfiprintf_r+0x1ec>)
 800e316:	7829      	ldrb	r1, [r5, #0]
 800e318:	2203      	movs	r2, #3
 800e31a:	0030      	movs	r0, r6
 800e31c:	f7ff fa4a 	bl	800d7b4 <memchr>
 800e320:	2800      	cmp	r0, #0
 800e322:	d006      	beq.n	800e332 <_svfiprintf_r+0x14a>
 800e324:	2340      	movs	r3, #64	; 0x40
 800e326:	1b80      	subs	r0, r0, r6
 800e328:	4083      	lsls	r3, r0
 800e32a:	6822      	ldr	r2, [r4, #0]
 800e32c:	3501      	adds	r5, #1
 800e32e:	4313      	orrs	r3, r2
 800e330:	6023      	str	r3, [r4, #0]
 800e332:	7829      	ldrb	r1, [r5, #0]
 800e334:	2206      	movs	r2, #6
 800e336:	4828      	ldr	r0, [pc, #160]	; (800e3d8 <_svfiprintf_r+0x1f0>)
 800e338:	1c6e      	adds	r6, r5, #1
 800e33a:	7621      	strb	r1, [r4, #24]
 800e33c:	f7ff fa3a 	bl	800d7b4 <memchr>
 800e340:	2800      	cmp	r0, #0
 800e342:	d03c      	beq.n	800e3be <_svfiprintf_r+0x1d6>
 800e344:	4b25      	ldr	r3, [pc, #148]	; (800e3dc <_svfiprintf_r+0x1f4>)
 800e346:	2b00      	cmp	r3, #0
 800e348:	d125      	bne.n	800e396 <_svfiprintf_r+0x1ae>
 800e34a:	2207      	movs	r2, #7
 800e34c:	9b07      	ldr	r3, [sp, #28]
 800e34e:	3307      	adds	r3, #7
 800e350:	4393      	bics	r3, r2
 800e352:	3308      	adds	r3, #8
 800e354:	9307      	str	r3, [sp, #28]
 800e356:	6963      	ldr	r3, [r4, #20]
 800e358:	9a04      	ldr	r2, [sp, #16]
 800e35a:	189b      	adds	r3, r3, r2
 800e35c:	6163      	str	r3, [r4, #20]
 800e35e:	e766      	b.n	800e22e <_svfiprintf_r+0x46>
 800e360:	4343      	muls	r3, r0
 800e362:	2101      	movs	r1, #1
 800e364:	189b      	adds	r3, r3, r2
 800e366:	0035      	movs	r5, r6
 800e368:	e7a6      	b.n	800e2b8 <_svfiprintf_r+0xd0>
 800e36a:	2301      	movs	r3, #1
 800e36c:	425b      	negs	r3, r3
 800e36e:	e7d0      	b.n	800e312 <_svfiprintf_r+0x12a>
 800e370:	2300      	movs	r3, #0
 800e372:	200a      	movs	r0, #10
 800e374:	001a      	movs	r2, r3
 800e376:	3501      	adds	r5, #1
 800e378:	6063      	str	r3, [r4, #4]
 800e37a:	7829      	ldrb	r1, [r5, #0]
 800e37c:	1c6e      	adds	r6, r5, #1
 800e37e:	3930      	subs	r1, #48	; 0x30
 800e380:	2909      	cmp	r1, #9
 800e382:	d903      	bls.n	800e38c <_svfiprintf_r+0x1a4>
 800e384:	2b00      	cmp	r3, #0
 800e386:	d0c5      	beq.n	800e314 <_svfiprintf_r+0x12c>
 800e388:	9209      	str	r2, [sp, #36]	; 0x24
 800e38a:	e7c3      	b.n	800e314 <_svfiprintf_r+0x12c>
 800e38c:	4342      	muls	r2, r0
 800e38e:	2301      	movs	r3, #1
 800e390:	1852      	adds	r2, r2, r1
 800e392:	0035      	movs	r5, r6
 800e394:	e7f1      	b.n	800e37a <_svfiprintf_r+0x192>
 800e396:	ab07      	add	r3, sp, #28
 800e398:	9300      	str	r3, [sp, #0]
 800e39a:	003a      	movs	r2, r7
 800e39c:	4b10      	ldr	r3, [pc, #64]	; (800e3e0 <_svfiprintf_r+0x1f8>)
 800e39e:	0021      	movs	r1, r4
 800e3a0:	9803      	ldr	r0, [sp, #12]
 800e3a2:	f7fc f837 	bl	800a414 <_printf_float>
 800e3a6:	9004      	str	r0, [sp, #16]
 800e3a8:	9b04      	ldr	r3, [sp, #16]
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	d1d3      	bne.n	800e356 <_svfiprintf_r+0x16e>
 800e3ae:	89bb      	ldrh	r3, [r7, #12]
 800e3b0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e3b2:	065b      	lsls	r3, r3, #25
 800e3b4:	d400      	bmi.n	800e3b8 <_svfiprintf_r+0x1d0>
 800e3b6:	e72e      	b.n	800e216 <_svfiprintf_r+0x2e>
 800e3b8:	2001      	movs	r0, #1
 800e3ba:	4240      	negs	r0, r0
 800e3bc:	e72b      	b.n	800e216 <_svfiprintf_r+0x2e>
 800e3be:	ab07      	add	r3, sp, #28
 800e3c0:	9300      	str	r3, [sp, #0]
 800e3c2:	003a      	movs	r2, r7
 800e3c4:	4b06      	ldr	r3, [pc, #24]	; (800e3e0 <_svfiprintf_r+0x1f8>)
 800e3c6:	0021      	movs	r1, r4
 800e3c8:	9803      	ldr	r0, [sp, #12]
 800e3ca:	f7fc fadd 	bl	800a988 <_printf_i>
 800e3ce:	e7ea      	b.n	800e3a6 <_svfiprintf_r+0x1be>
 800e3d0:	0800f154 	.word	0x0800f154
 800e3d4:	0800f15a 	.word	0x0800f15a
 800e3d8:	0800f15e 	.word	0x0800f15e
 800e3dc:	0800a415 	.word	0x0800a415
 800e3e0:	0800e125 	.word	0x0800e125

0800e3e4 <__sfputc_r>:
 800e3e4:	6893      	ldr	r3, [r2, #8]
 800e3e6:	b510      	push	{r4, lr}
 800e3e8:	3b01      	subs	r3, #1
 800e3ea:	6093      	str	r3, [r2, #8]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	da04      	bge.n	800e3fa <__sfputc_r+0x16>
 800e3f0:	6994      	ldr	r4, [r2, #24]
 800e3f2:	42a3      	cmp	r3, r4
 800e3f4:	db07      	blt.n	800e406 <__sfputc_r+0x22>
 800e3f6:	290a      	cmp	r1, #10
 800e3f8:	d005      	beq.n	800e406 <__sfputc_r+0x22>
 800e3fa:	6813      	ldr	r3, [r2, #0]
 800e3fc:	1c58      	adds	r0, r3, #1
 800e3fe:	6010      	str	r0, [r2, #0]
 800e400:	7019      	strb	r1, [r3, #0]
 800e402:	0008      	movs	r0, r1
 800e404:	bd10      	pop	{r4, pc}
 800e406:	f7fd fd4d 	bl	800bea4 <__swbuf_r>
 800e40a:	0001      	movs	r1, r0
 800e40c:	e7f9      	b.n	800e402 <__sfputc_r+0x1e>

0800e40e <__sfputs_r>:
 800e40e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e410:	0006      	movs	r6, r0
 800e412:	000f      	movs	r7, r1
 800e414:	0014      	movs	r4, r2
 800e416:	18d5      	adds	r5, r2, r3
 800e418:	42ac      	cmp	r4, r5
 800e41a:	d101      	bne.n	800e420 <__sfputs_r+0x12>
 800e41c:	2000      	movs	r0, #0
 800e41e:	e007      	b.n	800e430 <__sfputs_r+0x22>
 800e420:	7821      	ldrb	r1, [r4, #0]
 800e422:	003a      	movs	r2, r7
 800e424:	0030      	movs	r0, r6
 800e426:	f7ff ffdd 	bl	800e3e4 <__sfputc_r>
 800e42a:	3401      	adds	r4, #1
 800e42c:	1c43      	adds	r3, r0, #1
 800e42e:	d1f3      	bne.n	800e418 <__sfputs_r+0xa>
 800e430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e434 <_vfiprintf_r>:
 800e434:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e436:	b0a1      	sub	sp, #132	; 0x84
 800e438:	9003      	str	r0, [sp, #12]
 800e43a:	000f      	movs	r7, r1
 800e43c:	0016      	movs	r6, r2
 800e43e:	001d      	movs	r5, r3
 800e440:	2800      	cmp	r0, #0
 800e442:	d005      	beq.n	800e450 <_vfiprintf_r+0x1c>
 800e444:	6983      	ldr	r3, [r0, #24]
 800e446:	9305      	str	r3, [sp, #20]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d101      	bne.n	800e450 <_vfiprintf_r+0x1c>
 800e44c:	f7fe fd54 	bl	800cef8 <__sinit>
 800e450:	4b7b      	ldr	r3, [pc, #492]	; (800e640 <_vfiprintf_r+0x20c>)
 800e452:	429f      	cmp	r7, r3
 800e454:	d15c      	bne.n	800e510 <_vfiprintf_r+0xdc>
 800e456:	9b03      	ldr	r3, [sp, #12]
 800e458:	685f      	ldr	r7, [r3, #4]
 800e45a:	89bb      	ldrh	r3, [r7, #12]
 800e45c:	071b      	lsls	r3, r3, #28
 800e45e:	d563      	bpl.n	800e528 <_vfiprintf_r+0xf4>
 800e460:	693b      	ldr	r3, [r7, #16]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d060      	beq.n	800e528 <_vfiprintf_r+0xf4>
 800e466:	2300      	movs	r3, #0
 800e468:	ac08      	add	r4, sp, #32
 800e46a:	6163      	str	r3, [r4, #20]
 800e46c:	3320      	adds	r3, #32
 800e46e:	7663      	strb	r3, [r4, #25]
 800e470:	3310      	adds	r3, #16
 800e472:	76a3      	strb	r3, [r4, #26]
 800e474:	9507      	str	r5, [sp, #28]
 800e476:	0035      	movs	r5, r6
 800e478:	782b      	ldrb	r3, [r5, #0]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d001      	beq.n	800e482 <_vfiprintf_r+0x4e>
 800e47e:	2b25      	cmp	r3, #37	; 0x25
 800e480:	d15c      	bne.n	800e53c <_vfiprintf_r+0x108>
 800e482:	1bab      	subs	r3, r5, r6
 800e484:	9305      	str	r3, [sp, #20]
 800e486:	d00c      	beq.n	800e4a2 <_vfiprintf_r+0x6e>
 800e488:	0032      	movs	r2, r6
 800e48a:	0039      	movs	r1, r7
 800e48c:	9803      	ldr	r0, [sp, #12]
 800e48e:	f7ff ffbe 	bl	800e40e <__sfputs_r>
 800e492:	1c43      	adds	r3, r0, #1
 800e494:	d100      	bne.n	800e498 <_vfiprintf_r+0x64>
 800e496:	e0c4      	b.n	800e622 <_vfiprintf_r+0x1ee>
 800e498:	6962      	ldr	r2, [r4, #20]
 800e49a:	9b05      	ldr	r3, [sp, #20]
 800e49c:	4694      	mov	ip, r2
 800e49e:	4463      	add	r3, ip
 800e4a0:	6163      	str	r3, [r4, #20]
 800e4a2:	782b      	ldrb	r3, [r5, #0]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d100      	bne.n	800e4aa <_vfiprintf_r+0x76>
 800e4a8:	e0bb      	b.n	800e622 <_vfiprintf_r+0x1ee>
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	4252      	negs	r2, r2
 800e4b0:	6062      	str	r2, [r4, #4]
 800e4b2:	a904      	add	r1, sp, #16
 800e4b4:	3254      	adds	r2, #84	; 0x54
 800e4b6:	1852      	adds	r2, r2, r1
 800e4b8:	1c6e      	adds	r6, r5, #1
 800e4ba:	6023      	str	r3, [r4, #0]
 800e4bc:	60e3      	str	r3, [r4, #12]
 800e4be:	60a3      	str	r3, [r4, #8]
 800e4c0:	7013      	strb	r3, [r2, #0]
 800e4c2:	65a3      	str	r3, [r4, #88]	; 0x58
 800e4c4:	7831      	ldrb	r1, [r6, #0]
 800e4c6:	2205      	movs	r2, #5
 800e4c8:	485e      	ldr	r0, [pc, #376]	; (800e644 <_vfiprintf_r+0x210>)
 800e4ca:	f7ff f973 	bl	800d7b4 <memchr>
 800e4ce:	1c75      	adds	r5, r6, #1
 800e4d0:	2800      	cmp	r0, #0
 800e4d2:	d135      	bne.n	800e540 <_vfiprintf_r+0x10c>
 800e4d4:	6822      	ldr	r2, [r4, #0]
 800e4d6:	06d3      	lsls	r3, r2, #27
 800e4d8:	d504      	bpl.n	800e4e4 <_vfiprintf_r+0xb0>
 800e4da:	2353      	movs	r3, #83	; 0x53
 800e4dc:	a904      	add	r1, sp, #16
 800e4de:	185b      	adds	r3, r3, r1
 800e4e0:	2120      	movs	r1, #32
 800e4e2:	7019      	strb	r1, [r3, #0]
 800e4e4:	0713      	lsls	r3, r2, #28
 800e4e6:	d504      	bpl.n	800e4f2 <_vfiprintf_r+0xbe>
 800e4e8:	2353      	movs	r3, #83	; 0x53
 800e4ea:	a904      	add	r1, sp, #16
 800e4ec:	185b      	adds	r3, r3, r1
 800e4ee:	212b      	movs	r1, #43	; 0x2b
 800e4f0:	7019      	strb	r1, [r3, #0]
 800e4f2:	7833      	ldrb	r3, [r6, #0]
 800e4f4:	2b2a      	cmp	r3, #42	; 0x2a
 800e4f6:	d02c      	beq.n	800e552 <_vfiprintf_r+0x11e>
 800e4f8:	0035      	movs	r5, r6
 800e4fa:	2100      	movs	r1, #0
 800e4fc:	200a      	movs	r0, #10
 800e4fe:	68e3      	ldr	r3, [r4, #12]
 800e500:	782a      	ldrb	r2, [r5, #0]
 800e502:	1c6e      	adds	r6, r5, #1
 800e504:	3a30      	subs	r2, #48	; 0x30
 800e506:	2a09      	cmp	r2, #9
 800e508:	d964      	bls.n	800e5d4 <_vfiprintf_r+0x1a0>
 800e50a:	2900      	cmp	r1, #0
 800e50c:	d02e      	beq.n	800e56c <_vfiprintf_r+0x138>
 800e50e:	e026      	b.n	800e55e <_vfiprintf_r+0x12a>
 800e510:	4b4d      	ldr	r3, [pc, #308]	; (800e648 <_vfiprintf_r+0x214>)
 800e512:	429f      	cmp	r7, r3
 800e514:	d102      	bne.n	800e51c <_vfiprintf_r+0xe8>
 800e516:	9b03      	ldr	r3, [sp, #12]
 800e518:	689f      	ldr	r7, [r3, #8]
 800e51a:	e79e      	b.n	800e45a <_vfiprintf_r+0x26>
 800e51c:	4b4b      	ldr	r3, [pc, #300]	; (800e64c <_vfiprintf_r+0x218>)
 800e51e:	429f      	cmp	r7, r3
 800e520:	d19b      	bne.n	800e45a <_vfiprintf_r+0x26>
 800e522:	9b03      	ldr	r3, [sp, #12]
 800e524:	68df      	ldr	r7, [r3, #12]
 800e526:	e798      	b.n	800e45a <_vfiprintf_r+0x26>
 800e528:	0039      	movs	r1, r7
 800e52a:	9803      	ldr	r0, [sp, #12]
 800e52c:	f7fd fd10 	bl	800bf50 <__swsetup_r>
 800e530:	2800      	cmp	r0, #0
 800e532:	d098      	beq.n	800e466 <_vfiprintf_r+0x32>
 800e534:	2001      	movs	r0, #1
 800e536:	4240      	negs	r0, r0
 800e538:	b021      	add	sp, #132	; 0x84
 800e53a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e53c:	3501      	adds	r5, #1
 800e53e:	e79b      	b.n	800e478 <_vfiprintf_r+0x44>
 800e540:	4b40      	ldr	r3, [pc, #256]	; (800e644 <_vfiprintf_r+0x210>)
 800e542:	6822      	ldr	r2, [r4, #0]
 800e544:	1ac0      	subs	r0, r0, r3
 800e546:	2301      	movs	r3, #1
 800e548:	4083      	lsls	r3, r0
 800e54a:	4313      	orrs	r3, r2
 800e54c:	6023      	str	r3, [r4, #0]
 800e54e:	002e      	movs	r6, r5
 800e550:	e7b8      	b.n	800e4c4 <_vfiprintf_r+0x90>
 800e552:	9b07      	ldr	r3, [sp, #28]
 800e554:	1d19      	adds	r1, r3, #4
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	9107      	str	r1, [sp, #28]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	db01      	blt.n	800e562 <_vfiprintf_r+0x12e>
 800e55e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e560:	e004      	b.n	800e56c <_vfiprintf_r+0x138>
 800e562:	425b      	negs	r3, r3
 800e564:	60e3      	str	r3, [r4, #12]
 800e566:	2302      	movs	r3, #2
 800e568:	4313      	orrs	r3, r2
 800e56a:	6023      	str	r3, [r4, #0]
 800e56c:	782b      	ldrb	r3, [r5, #0]
 800e56e:	2b2e      	cmp	r3, #46	; 0x2e
 800e570:	d10a      	bne.n	800e588 <_vfiprintf_r+0x154>
 800e572:	786b      	ldrb	r3, [r5, #1]
 800e574:	2b2a      	cmp	r3, #42	; 0x2a
 800e576:	d135      	bne.n	800e5e4 <_vfiprintf_r+0x1b0>
 800e578:	9b07      	ldr	r3, [sp, #28]
 800e57a:	3502      	adds	r5, #2
 800e57c:	1d1a      	adds	r2, r3, #4
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	9207      	str	r2, [sp, #28]
 800e582:	2b00      	cmp	r3, #0
 800e584:	db2b      	blt.n	800e5de <_vfiprintf_r+0x1aa>
 800e586:	9309      	str	r3, [sp, #36]	; 0x24
 800e588:	4e31      	ldr	r6, [pc, #196]	; (800e650 <_vfiprintf_r+0x21c>)
 800e58a:	7829      	ldrb	r1, [r5, #0]
 800e58c:	2203      	movs	r2, #3
 800e58e:	0030      	movs	r0, r6
 800e590:	f7ff f910 	bl	800d7b4 <memchr>
 800e594:	2800      	cmp	r0, #0
 800e596:	d006      	beq.n	800e5a6 <_vfiprintf_r+0x172>
 800e598:	2340      	movs	r3, #64	; 0x40
 800e59a:	1b80      	subs	r0, r0, r6
 800e59c:	4083      	lsls	r3, r0
 800e59e:	6822      	ldr	r2, [r4, #0]
 800e5a0:	3501      	adds	r5, #1
 800e5a2:	4313      	orrs	r3, r2
 800e5a4:	6023      	str	r3, [r4, #0]
 800e5a6:	7829      	ldrb	r1, [r5, #0]
 800e5a8:	2206      	movs	r2, #6
 800e5aa:	482a      	ldr	r0, [pc, #168]	; (800e654 <_vfiprintf_r+0x220>)
 800e5ac:	1c6e      	adds	r6, r5, #1
 800e5ae:	7621      	strb	r1, [r4, #24]
 800e5b0:	f7ff f900 	bl	800d7b4 <memchr>
 800e5b4:	2800      	cmp	r0, #0
 800e5b6:	d03a      	beq.n	800e62e <_vfiprintf_r+0x1fa>
 800e5b8:	4b27      	ldr	r3, [pc, #156]	; (800e658 <_vfiprintf_r+0x224>)
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d125      	bne.n	800e60a <_vfiprintf_r+0x1d6>
 800e5be:	2207      	movs	r2, #7
 800e5c0:	9b07      	ldr	r3, [sp, #28]
 800e5c2:	3307      	adds	r3, #7
 800e5c4:	4393      	bics	r3, r2
 800e5c6:	3308      	adds	r3, #8
 800e5c8:	9307      	str	r3, [sp, #28]
 800e5ca:	6963      	ldr	r3, [r4, #20]
 800e5cc:	9a04      	ldr	r2, [sp, #16]
 800e5ce:	189b      	adds	r3, r3, r2
 800e5d0:	6163      	str	r3, [r4, #20]
 800e5d2:	e750      	b.n	800e476 <_vfiprintf_r+0x42>
 800e5d4:	4343      	muls	r3, r0
 800e5d6:	2101      	movs	r1, #1
 800e5d8:	189b      	adds	r3, r3, r2
 800e5da:	0035      	movs	r5, r6
 800e5dc:	e790      	b.n	800e500 <_vfiprintf_r+0xcc>
 800e5de:	2301      	movs	r3, #1
 800e5e0:	425b      	negs	r3, r3
 800e5e2:	e7d0      	b.n	800e586 <_vfiprintf_r+0x152>
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	200a      	movs	r0, #10
 800e5e8:	001a      	movs	r2, r3
 800e5ea:	3501      	adds	r5, #1
 800e5ec:	6063      	str	r3, [r4, #4]
 800e5ee:	7829      	ldrb	r1, [r5, #0]
 800e5f0:	1c6e      	adds	r6, r5, #1
 800e5f2:	3930      	subs	r1, #48	; 0x30
 800e5f4:	2909      	cmp	r1, #9
 800e5f6:	d903      	bls.n	800e600 <_vfiprintf_r+0x1cc>
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d0c5      	beq.n	800e588 <_vfiprintf_r+0x154>
 800e5fc:	9209      	str	r2, [sp, #36]	; 0x24
 800e5fe:	e7c3      	b.n	800e588 <_vfiprintf_r+0x154>
 800e600:	4342      	muls	r2, r0
 800e602:	2301      	movs	r3, #1
 800e604:	1852      	adds	r2, r2, r1
 800e606:	0035      	movs	r5, r6
 800e608:	e7f1      	b.n	800e5ee <_vfiprintf_r+0x1ba>
 800e60a:	ab07      	add	r3, sp, #28
 800e60c:	9300      	str	r3, [sp, #0]
 800e60e:	003a      	movs	r2, r7
 800e610:	4b12      	ldr	r3, [pc, #72]	; (800e65c <_vfiprintf_r+0x228>)
 800e612:	0021      	movs	r1, r4
 800e614:	9803      	ldr	r0, [sp, #12]
 800e616:	f7fb fefd 	bl	800a414 <_printf_float>
 800e61a:	9004      	str	r0, [sp, #16]
 800e61c:	9b04      	ldr	r3, [sp, #16]
 800e61e:	3301      	adds	r3, #1
 800e620:	d1d3      	bne.n	800e5ca <_vfiprintf_r+0x196>
 800e622:	89bb      	ldrh	r3, [r7, #12]
 800e624:	065b      	lsls	r3, r3, #25
 800e626:	d500      	bpl.n	800e62a <_vfiprintf_r+0x1f6>
 800e628:	e784      	b.n	800e534 <_vfiprintf_r+0x100>
 800e62a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e62c:	e784      	b.n	800e538 <_vfiprintf_r+0x104>
 800e62e:	ab07      	add	r3, sp, #28
 800e630:	9300      	str	r3, [sp, #0]
 800e632:	003a      	movs	r2, r7
 800e634:	4b09      	ldr	r3, [pc, #36]	; (800e65c <_vfiprintf_r+0x228>)
 800e636:	0021      	movs	r1, r4
 800e638:	9803      	ldr	r0, [sp, #12]
 800e63a:	f7fc f9a5 	bl	800a988 <_printf_i>
 800e63e:	e7ec      	b.n	800e61a <_vfiprintf_r+0x1e6>
 800e640:	0800f008 	.word	0x0800f008
 800e644:	0800f154 	.word	0x0800f154
 800e648:	0800f028 	.word	0x0800f028
 800e64c:	0800efe8 	.word	0x0800efe8
 800e650:	0800f15a 	.word	0x0800f15a
 800e654:	0800f15e 	.word	0x0800f15e
 800e658:	0800a415 	.word	0x0800a415
 800e65c:	0800e40f 	.word	0x0800e40f

0800e660 <_sbrk_r>:
 800e660:	2300      	movs	r3, #0
 800e662:	b570      	push	{r4, r5, r6, lr}
 800e664:	4c06      	ldr	r4, [pc, #24]	; (800e680 <_sbrk_r+0x20>)
 800e666:	0005      	movs	r5, r0
 800e668:	0008      	movs	r0, r1
 800e66a:	6023      	str	r3, [r4, #0]
 800e66c:	f7f7 f804 	bl	8005678 <_sbrk>
 800e670:	1c43      	adds	r3, r0, #1
 800e672:	d103      	bne.n	800e67c <_sbrk_r+0x1c>
 800e674:	6823      	ldr	r3, [r4, #0]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d000      	beq.n	800e67c <_sbrk_r+0x1c>
 800e67a:	602b      	str	r3, [r5, #0]
 800e67c:	bd70      	pop	{r4, r5, r6, pc}
 800e67e:	46c0      	nop			; (mov r8, r8)
 800e680:	200013f4 	.word	0x200013f4

0800e684 <__sread>:
 800e684:	b570      	push	{r4, r5, r6, lr}
 800e686:	000c      	movs	r4, r1
 800e688:	250e      	movs	r5, #14
 800e68a:	5f49      	ldrsh	r1, [r1, r5]
 800e68c:	f000 f8fe 	bl	800e88c <_read_r>
 800e690:	2800      	cmp	r0, #0
 800e692:	db03      	blt.n	800e69c <__sread+0x18>
 800e694:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e696:	181b      	adds	r3, r3, r0
 800e698:	6563      	str	r3, [r4, #84]	; 0x54
 800e69a:	bd70      	pop	{r4, r5, r6, pc}
 800e69c:	89a3      	ldrh	r3, [r4, #12]
 800e69e:	4a02      	ldr	r2, [pc, #8]	; (800e6a8 <__sread+0x24>)
 800e6a0:	4013      	ands	r3, r2
 800e6a2:	81a3      	strh	r3, [r4, #12]
 800e6a4:	e7f9      	b.n	800e69a <__sread+0x16>
 800e6a6:	46c0      	nop			; (mov r8, r8)
 800e6a8:	ffffefff 	.word	0xffffefff

0800e6ac <__swrite>:
 800e6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ae:	001f      	movs	r7, r3
 800e6b0:	898b      	ldrh	r3, [r1, #12]
 800e6b2:	0005      	movs	r5, r0
 800e6b4:	000c      	movs	r4, r1
 800e6b6:	0016      	movs	r6, r2
 800e6b8:	05db      	lsls	r3, r3, #23
 800e6ba:	d505      	bpl.n	800e6c8 <__swrite+0x1c>
 800e6bc:	230e      	movs	r3, #14
 800e6be:	5ec9      	ldrsh	r1, [r1, r3]
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	2302      	movs	r3, #2
 800e6c4:	f000 f892 	bl	800e7ec <_lseek_r>
 800e6c8:	89a3      	ldrh	r3, [r4, #12]
 800e6ca:	4a05      	ldr	r2, [pc, #20]	; (800e6e0 <__swrite+0x34>)
 800e6cc:	0028      	movs	r0, r5
 800e6ce:	4013      	ands	r3, r2
 800e6d0:	81a3      	strh	r3, [r4, #12]
 800e6d2:	0032      	movs	r2, r6
 800e6d4:	230e      	movs	r3, #14
 800e6d6:	5ee1      	ldrsh	r1, [r4, r3]
 800e6d8:	003b      	movs	r3, r7
 800e6da:	f000 f83d 	bl	800e758 <_write_r>
 800e6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6e0:	ffffefff 	.word	0xffffefff

0800e6e4 <__sseek>:
 800e6e4:	b570      	push	{r4, r5, r6, lr}
 800e6e6:	000c      	movs	r4, r1
 800e6e8:	250e      	movs	r5, #14
 800e6ea:	5f49      	ldrsh	r1, [r1, r5]
 800e6ec:	f000 f87e 	bl	800e7ec <_lseek_r>
 800e6f0:	89a3      	ldrh	r3, [r4, #12]
 800e6f2:	1c42      	adds	r2, r0, #1
 800e6f4:	d103      	bne.n	800e6fe <__sseek+0x1a>
 800e6f6:	4a05      	ldr	r2, [pc, #20]	; (800e70c <__sseek+0x28>)
 800e6f8:	4013      	ands	r3, r2
 800e6fa:	81a3      	strh	r3, [r4, #12]
 800e6fc:	bd70      	pop	{r4, r5, r6, pc}
 800e6fe:	2280      	movs	r2, #128	; 0x80
 800e700:	0152      	lsls	r2, r2, #5
 800e702:	4313      	orrs	r3, r2
 800e704:	81a3      	strh	r3, [r4, #12]
 800e706:	6560      	str	r0, [r4, #84]	; 0x54
 800e708:	e7f8      	b.n	800e6fc <__sseek+0x18>
 800e70a:	46c0      	nop			; (mov r8, r8)
 800e70c:	ffffefff 	.word	0xffffefff

0800e710 <__sclose>:
 800e710:	b510      	push	{r4, lr}
 800e712:	230e      	movs	r3, #14
 800e714:	5ec9      	ldrsh	r1, [r1, r3]
 800e716:	f000 f833 	bl	800e780 <_close_r>
 800e71a:	bd10      	pop	{r4, pc}

0800e71c <strncmp>:
 800e71c:	2300      	movs	r3, #0
 800e71e:	b530      	push	{r4, r5, lr}
 800e720:	429a      	cmp	r2, r3
 800e722:	d00a      	beq.n	800e73a <strncmp+0x1e>
 800e724:	3a01      	subs	r2, #1
 800e726:	5cc4      	ldrb	r4, [r0, r3]
 800e728:	5ccd      	ldrb	r5, [r1, r3]
 800e72a:	42ac      	cmp	r4, r5
 800e72c:	d104      	bne.n	800e738 <strncmp+0x1c>
 800e72e:	4293      	cmp	r3, r2
 800e730:	d002      	beq.n	800e738 <strncmp+0x1c>
 800e732:	3301      	adds	r3, #1
 800e734:	2c00      	cmp	r4, #0
 800e736:	d1f6      	bne.n	800e726 <strncmp+0xa>
 800e738:	1b63      	subs	r3, r4, r5
 800e73a:	0018      	movs	r0, r3
 800e73c:	bd30      	pop	{r4, r5, pc}

0800e73e <__ascii_wctomb>:
 800e73e:	1e0b      	subs	r3, r1, #0
 800e740:	d004      	beq.n	800e74c <__ascii_wctomb+0xe>
 800e742:	2aff      	cmp	r2, #255	; 0xff
 800e744:	d904      	bls.n	800e750 <__ascii_wctomb+0x12>
 800e746:	238a      	movs	r3, #138	; 0x8a
 800e748:	6003      	str	r3, [r0, #0]
 800e74a:	3b8b      	subs	r3, #139	; 0x8b
 800e74c:	0018      	movs	r0, r3
 800e74e:	4770      	bx	lr
 800e750:	700a      	strb	r2, [r1, #0]
 800e752:	2301      	movs	r3, #1
 800e754:	e7fa      	b.n	800e74c <__ascii_wctomb+0xe>
	...

0800e758 <_write_r>:
 800e758:	b570      	push	{r4, r5, r6, lr}
 800e75a:	0005      	movs	r5, r0
 800e75c:	0008      	movs	r0, r1
 800e75e:	0011      	movs	r1, r2
 800e760:	2200      	movs	r2, #0
 800e762:	4c06      	ldr	r4, [pc, #24]	; (800e77c <_write_r+0x24>)
 800e764:	6022      	str	r2, [r4, #0]
 800e766:	001a      	movs	r2, r3
 800e768:	f7f6 ff3d 	bl	80055e6 <_write>
 800e76c:	1c43      	adds	r3, r0, #1
 800e76e:	d103      	bne.n	800e778 <_write_r+0x20>
 800e770:	6823      	ldr	r3, [r4, #0]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d000      	beq.n	800e778 <_write_r+0x20>
 800e776:	602b      	str	r3, [r5, #0]
 800e778:	bd70      	pop	{r4, r5, r6, pc}
 800e77a:	46c0      	nop			; (mov r8, r8)
 800e77c:	200013f4 	.word	0x200013f4

0800e780 <_close_r>:
 800e780:	2300      	movs	r3, #0
 800e782:	b570      	push	{r4, r5, r6, lr}
 800e784:	4c06      	ldr	r4, [pc, #24]	; (800e7a0 <_close_r+0x20>)
 800e786:	0005      	movs	r5, r0
 800e788:	0008      	movs	r0, r1
 800e78a:	6023      	str	r3, [r4, #0]
 800e78c:	f7f6 ff47 	bl	800561e <_close>
 800e790:	1c43      	adds	r3, r0, #1
 800e792:	d103      	bne.n	800e79c <_close_r+0x1c>
 800e794:	6823      	ldr	r3, [r4, #0]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d000      	beq.n	800e79c <_close_r+0x1c>
 800e79a:	602b      	str	r3, [r5, #0]
 800e79c:	bd70      	pop	{r4, r5, r6, pc}
 800e79e:	46c0      	nop			; (mov r8, r8)
 800e7a0:	200013f4 	.word	0x200013f4

0800e7a4 <_fstat_r>:
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	b570      	push	{r4, r5, r6, lr}
 800e7a8:	4c06      	ldr	r4, [pc, #24]	; (800e7c4 <_fstat_r+0x20>)
 800e7aa:	0005      	movs	r5, r0
 800e7ac:	0008      	movs	r0, r1
 800e7ae:	0011      	movs	r1, r2
 800e7b0:	6023      	str	r3, [r4, #0]
 800e7b2:	f7f6 ff3e 	bl	8005632 <_fstat>
 800e7b6:	1c43      	adds	r3, r0, #1
 800e7b8:	d103      	bne.n	800e7c2 <_fstat_r+0x1e>
 800e7ba:	6823      	ldr	r3, [r4, #0]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d000      	beq.n	800e7c2 <_fstat_r+0x1e>
 800e7c0:	602b      	str	r3, [r5, #0]
 800e7c2:	bd70      	pop	{r4, r5, r6, pc}
 800e7c4:	200013f4 	.word	0x200013f4

0800e7c8 <_isatty_r>:
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	b570      	push	{r4, r5, r6, lr}
 800e7cc:	4c06      	ldr	r4, [pc, #24]	; (800e7e8 <_isatty_r+0x20>)
 800e7ce:	0005      	movs	r5, r0
 800e7d0:	0008      	movs	r0, r1
 800e7d2:	6023      	str	r3, [r4, #0]
 800e7d4:	f7f6 ff3b 	bl	800564e <_isatty>
 800e7d8:	1c43      	adds	r3, r0, #1
 800e7da:	d103      	bne.n	800e7e4 <_isatty_r+0x1c>
 800e7dc:	6823      	ldr	r3, [r4, #0]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d000      	beq.n	800e7e4 <_isatty_r+0x1c>
 800e7e2:	602b      	str	r3, [r5, #0]
 800e7e4:	bd70      	pop	{r4, r5, r6, pc}
 800e7e6:	46c0      	nop			; (mov r8, r8)
 800e7e8:	200013f4 	.word	0x200013f4

0800e7ec <_lseek_r>:
 800e7ec:	b570      	push	{r4, r5, r6, lr}
 800e7ee:	0005      	movs	r5, r0
 800e7f0:	0008      	movs	r0, r1
 800e7f2:	0011      	movs	r1, r2
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	4c06      	ldr	r4, [pc, #24]	; (800e810 <_lseek_r+0x24>)
 800e7f8:	6022      	str	r2, [r4, #0]
 800e7fa:	001a      	movs	r2, r3
 800e7fc:	f7f6 ff30 	bl	8005660 <_lseek>
 800e800:	1c43      	adds	r3, r0, #1
 800e802:	d103      	bne.n	800e80c <_lseek_r+0x20>
 800e804:	6823      	ldr	r3, [r4, #0]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d000      	beq.n	800e80c <_lseek_r+0x20>
 800e80a:	602b      	str	r3, [r5, #0]
 800e80c:	bd70      	pop	{r4, r5, r6, pc}
 800e80e:	46c0      	nop			; (mov r8, r8)
 800e810:	200013f4 	.word	0x200013f4

0800e814 <memmove>:
 800e814:	b510      	push	{r4, lr}
 800e816:	4288      	cmp	r0, r1
 800e818:	d902      	bls.n	800e820 <memmove+0xc>
 800e81a:	188b      	adds	r3, r1, r2
 800e81c:	4298      	cmp	r0, r3
 800e81e:	d303      	bcc.n	800e828 <memmove+0x14>
 800e820:	2300      	movs	r3, #0
 800e822:	e007      	b.n	800e834 <memmove+0x20>
 800e824:	5c8b      	ldrb	r3, [r1, r2]
 800e826:	5483      	strb	r3, [r0, r2]
 800e828:	3a01      	subs	r2, #1
 800e82a:	d2fb      	bcs.n	800e824 <memmove+0x10>
 800e82c:	bd10      	pop	{r4, pc}
 800e82e:	5ccc      	ldrb	r4, [r1, r3]
 800e830:	54c4      	strb	r4, [r0, r3]
 800e832:	3301      	adds	r3, #1
 800e834:	429a      	cmp	r2, r3
 800e836:	d1fa      	bne.n	800e82e <memmove+0x1a>
 800e838:	e7f8      	b.n	800e82c <memmove+0x18>

0800e83a <__malloc_lock>:
 800e83a:	4770      	bx	lr

0800e83c <__malloc_unlock>:
 800e83c:	4770      	bx	lr

0800e83e <_realloc_r>:
 800e83e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e840:	0007      	movs	r7, r0
 800e842:	000d      	movs	r5, r1
 800e844:	0016      	movs	r6, r2
 800e846:	2900      	cmp	r1, #0
 800e848:	d105      	bne.n	800e856 <_realloc_r+0x18>
 800e84a:	0011      	movs	r1, r2
 800e84c:	f7ff fc0c 	bl	800e068 <_malloc_r>
 800e850:	0004      	movs	r4, r0
 800e852:	0020      	movs	r0, r4
 800e854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e856:	2a00      	cmp	r2, #0
 800e858:	d103      	bne.n	800e862 <_realloc_r+0x24>
 800e85a:	f7ff fbbb 	bl	800dfd4 <_free_r>
 800e85e:	0034      	movs	r4, r6
 800e860:	e7f7      	b.n	800e852 <_realloc_r+0x14>
 800e862:	f000 f827 	bl	800e8b4 <_malloc_usable_size_r>
 800e866:	002c      	movs	r4, r5
 800e868:	42b0      	cmp	r0, r6
 800e86a:	d2f2      	bcs.n	800e852 <_realloc_r+0x14>
 800e86c:	0031      	movs	r1, r6
 800e86e:	0038      	movs	r0, r7
 800e870:	f7ff fbfa 	bl	800e068 <_malloc_r>
 800e874:	1e04      	subs	r4, r0, #0
 800e876:	d0ec      	beq.n	800e852 <_realloc_r+0x14>
 800e878:	0029      	movs	r1, r5
 800e87a:	0032      	movs	r2, r6
 800e87c:	f7fb fd1d 	bl	800a2ba <memcpy>
 800e880:	0029      	movs	r1, r5
 800e882:	0038      	movs	r0, r7
 800e884:	f7ff fba6 	bl	800dfd4 <_free_r>
 800e888:	e7e3      	b.n	800e852 <_realloc_r+0x14>
	...

0800e88c <_read_r>:
 800e88c:	b570      	push	{r4, r5, r6, lr}
 800e88e:	0005      	movs	r5, r0
 800e890:	0008      	movs	r0, r1
 800e892:	0011      	movs	r1, r2
 800e894:	2200      	movs	r2, #0
 800e896:	4c06      	ldr	r4, [pc, #24]	; (800e8b0 <_read_r+0x24>)
 800e898:	6022      	str	r2, [r4, #0]
 800e89a:	001a      	movs	r2, r3
 800e89c:	f7f6 fe86 	bl	80055ac <_read>
 800e8a0:	1c43      	adds	r3, r0, #1
 800e8a2:	d103      	bne.n	800e8ac <_read_r+0x20>
 800e8a4:	6823      	ldr	r3, [r4, #0]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d000      	beq.n	800e8ac <_read_r+0x20>
 800e8aa:	602b      	str	r3, [r5, #0]
 800e8ac:	bd70      	pop	{r4, r5, r6, pc}
 800e8ae:	46c0      	nop			; (mov r8, r8)
 800e8b0:	200013f4 	.word	0x200013f4

0800e8b4 <_malloc_usable_size_r>:
 800e8b4:	1f0b      	subs	r3, r1, #4
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	1f18      	subs	r0, r3, #4
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	da01      	bge.n	800e8c2 <_malloc_usable_size_r+0xe>
 800e8be:	580b      	ldr	r3, [r1, r0]
 800e8c0:	18c0      	adds	r0, r0, r3
 800e8c2:	4770      	bx	lr

0800e8c4 <_init>:
 800e8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8c6:	46c0      	nop			; (mov r8, r8)
 800e8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8ca:	bc08      	pop	{r3}
 800e8cc:	469e      	mov	lr, r3
 800e8ce:	4770      	bx	lr

0800e8d0 <_fini>:
 800e8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8d2:	46c0      	nop			; (mov r8, r8)
 800e8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8d6:	bc08      	pop	{r3}
 800e8d8:	469e      	mov	lr, r3
 800e8da:	4770      	bx	lr
