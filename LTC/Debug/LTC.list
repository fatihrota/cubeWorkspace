
LTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a55c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800a618  0800a618  0001a618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aab8  0800aab8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800aab8  0800aab8  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aab8  0800aab8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aab8  0800aab8  0001aab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aabc  0800aabc  0001aabc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800aac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000960  200001e0  0800aca0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b40  0800aca0  00020b40  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc78  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dee  00000000  00000000  0002be80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000988  00000000  00000000  0002dc70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c0  00000000  00000000  0002e5f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012833  00000000  00000000  0002eeb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008ce6  00000000  00000000  000416eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00069ccf  00000000  00000000  0004a3d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b40a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003358  00000000  00000000  000b411c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001e0 	.word	0x200001e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800a600 	.word	0x0800a600

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e4 	.word	0x200001e4
 8000100:	0800a600 	.word	0x0800a600

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdrcmple>:
 8000414:	4684      	mov	ip, r0
 8000416:	1c10      	adds	r0, r2, #0
 8000418:	4662      	mov	r2, ip
 800041a:	468c      	mov	ip, r1
 800041c:	1c19      	adds	r1, r3, #0
 800041e:	4663      	mov	r3, ip
 8000420:	e000      	b.n	8000424 <__aeabi_cdcmpeq>
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdcmpeq>:
 8000424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000426:	f001 f86b 	bl	8001500 <__ledf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	d401      	bmi.n	8000432 <__aeabi_cdcmpeq+0xe>
 800042e:	2100      	movs	r1, #0
 8000430:	42c8      	cmn	r0, r1
 8000432:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000434 <__aeabi_dcmpeq>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 ffc3 	bl	80013c0 <__eqdf2>
 800043a:	4240      	negs	r0, r0
 800043c:	3001      	adds	r0, #1
 800043e:	bd10      	pop	{r4, pc}

08000440 <__aeabi_dcmplt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f001 f85d 	bl	8001500 <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	db01      	blt.n	800044e <__aeabi_dcmplt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmple>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f853 	bl	8001500 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dd01      	ble.n	8000462 <__aeabi_dcmple+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmpgt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 ffe5 	bl	8001438 <__gedf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dc01      	bgt.n	8000476 <__aeabi_dcmpgt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpge>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ffdb 	bl	8001438 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	da01      	bge.n	800048a <__aeabi_dcmpge+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_d2uiz>:
 8000490:	b570      	push	{r4, r5, r6, lr}
 8000492:	2200      	movs	r2, #0
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <__aeabi_d2uiz+0x38>)
 8000496:	0004      	movs	r4, r0
 8000498:	000d      	movs	r5, r1
 800049a:	f7ff ffef 	bl	800047c <__aeabi_dcmpge>
 800049e:	2800      	cmp	r0, #0
 80004a0:	d104      	bne.n	80004ac <__aeabi_d2uiz+0x1c>
 80004a2:	0020      	movs	r0, r4
 80004a4:	0029      	movs	r1, r5
 80004a6:	f001 fe69 	bl	800217c <__aeabi_d2iz>
 80004aa:	bd70      	pop	{r4, r5, r6, pc}
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <__aeabi_d2uiz+0x38>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	0020      	movs	r0, r4
 80004b2:	0029      	movs	r1, r5
 80004b4:	f001 fafe 	bl	8001ab4 <__aeabi_dsub>
 80004b8:	f001 fe60 	bl	800217c <__aeabi_d2iz>
 80004bc:	2380      	movs	r3, #128	; 0x80
 80004be:	061b      	lsls	r3, r3, #24
 80004c0:	469c      	mov	ip, r3
 80004c2:	4460      	add	r0, ip
 80004c4:	e7f1      	b.n	80004aa <__aeabi_d2uiz+0x1a>
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	41e00000 	.word	0x41e00000

080004cc <__aeabi_fdiv>:
 80004cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ce:	4657      	mov	r7, sl
 80004d0:	464e      	mov	r6, r9
 80004d2:	4645      	mov	r5, r8
 80004d4:	46de      	mov	lr, fp
 80004d6:	0244      	lsls	r4, r0, #9
 80004d8:	b5e0      	push	{r5, r6, r7, lr}
 80004da:	0046      	lsls	r6, r0, #1
 80004dc:	4688      	mov	r8, r1
 80004de:	0a64      	lsrs	r4, r4, #9
 80004e0:	0e36      	lsrs	r6, r6, #24
 80004e2:	0fc7      	lsrs	r7, r0, #31
 80004e4:	2e00      	cmp	r6, #0
 80004e6:	d063      	beq.n	80005b0 <__aeabi_fdiv+0xe4>
 80004e8:	2eff      	cmp	r6, #255	; 0xff
 80004ea:	d024      	beq.n	8000536 <__aeabi_fdiv+0x6a>
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	00e4      	lsls	r4, r4, #3
 80004f0:	04db      	lsls	r3, r3, #19
 80004f2:	431c      	orrs	r4, r3
 80004f4:	2300      	movs	r3, #0
 80004f6:	4699      	mov	r9, r3
 80004f8:	469b      	mov	fp, r3
 80004fa:	3e7f      	subs	r6, #127	; 0x7f
 80004fc:	4643      	mov	r3, r8
 80004fe:	4642      	mov	r2, r8
 8000500:	025d      	lsls	r5, r3, #9
 8000502:	0fd2      	lsrs	r2, r2, #31
 8000504:	005b      	lsls	r3, r3, #1
 8000506:	0a6d      	lsrs	r5, r5, #9
 8000508:	0e1b      	lsrs	r3, r3, #24
 800050a:	4690      	mov	r8, r2
 800050c:	4692      	mov	sl, r2
 800050e:	d065      	beq.n	80005dc <__aeabi_fdiv+0x110>
 8000510:	2bff      	cmp	r3, #255	; 0xff
 8000512:	d055      	beq.n	80005c0 <__aeabi_fdiv+0xf4>
 8000514:	2280      	movs	r2, #128	; 0x80
 8000516:	2100      	movs	r1, #0
 8000518:	00ed      	lsls	r5, r5, #3
 800051a:	04d2      	lsls	r2, r2, #19
 800051c:	3b7f      	subs	r3, #127	; 0x7f
 800051e:	4315      	orrs	r5, r2
 8000520:	1af6      	subs	r6, r6, r3
 8000522:	4643      	mov	r3, r8
 8000524:	464a      	mov	r2, r9
 8000526:	407b      	eors	r3, r7
 8000528:	2a0f      	cmp	r2, #15
 800052a:	d900      	bls.n	800052e <__aeabi_fdiv+0x62>
 800052c:	e08d      	b.n	800064a <__aeabi_fdiv+0x17e>
 800052e:	486d      	ldr	r0, [pc, #436]	; (80006e4 <__aeabi_fdiv+0x218>)
 8000530:	0092      	lsls	r2, r2, #2
 8000532:	5882      	ldr	r2, [r0, r2]
 8000534:	4697      	mov	pc, r2
 8000536:	2c00      	cmp	r4, #0
 8000538:	d154      	bne.n	80005e4 <__aeabi_fdiv+0x118>
 800053a:	2308      	movs	r3, #8
 800053c:	4699      	mov	r9, r3
 800053e:	3b06      	subs	r3, #6
 8000540:	26ff      	movs	r6, #255	; 0xff
 8000542:	469b      	mov	fp, r3
 8000544:	e7da      	b.n	80004fc <__aeabi_fdiv+0x30>
 8000546:	2500      	movs	r5, #0
 8000548:	4653      	mov	r3, sl
 800054a:	2902      	cmp	r1, #2
 800054c:	d01b      	beq.n	8000586 <__aeabi_fdiv+0xba>
 800054e:	2903      	cmp	r1, #3
 8000550:	d100      	bne.n	8000554 <__aeabi_fdiv+0x88>
 8000552:	e0bf      	b.n	80006d4 <__aeabi_fdiv+0x208>
 8000554:	2901      	cmp	r1, #1
 8000556:	d028      	beq.n	80005aa <__aeabi_fdiv+0xde>
 8000558:	0030      	movs	r0, r6
 800055a:	307f      	adds	r0, #127	; 0x7f
 800055c:	2800      	cmp	r0, #0
 800055e:	dd20      	ble.n	80005a2 <__aeabi_fdiv+0xd6>
 8000560:	076a      	lsls	r2, r5, #29
 8000562:	d004      	beq.n	800056e <__aeabi_fdiv+0xa2>
 8000564:	220f      	movs	r2, #15
 8000566:	402a      	ands	r2, r5
 8000568:	2a04      	cmp	r2, #4
 800056a:	d000      	beq.n	800056e <__aeabi_fdiv+0xa2>
 800056c:	3504      	adds	r5, #4
 800056e:	012a      	lsls	r2, r5, #4
 8000570:	d503      	bpl.n	800057a <__aeabi_fdiv+0xae>
 8000572:	0030      	movs	r0, r6
 8000574:	4a5c      	ldr	r2, [pc, #368]	; (80006e8 <__aeabi_fdiv+0x21c>)
 8000576:	3080      	adds	r0, #128	; 0x80
 8000578:	4015      	ands	r5, r2
 800057a:	28fe      	cmp	r0, #254	; 0xfe
 800057c:	dc03      	bgt.n	8000586 <__aeabi_fdiv+0xba>
 800057e:	01ac      	lsls	r4, r5, #6
 8000580:	0a64      	lsrs	r4, r4, #9
 8000582:	b2c2      	uxtb	r2, r0
 8000584:	e001      	b.n	800058a <__aeabi_fdiv+0xbe>
 8000586:	22ff      	movs	r2, #255	; 0xff
 8000588:	2400      	movs	r4, #0
 800058a:	0264      	lsls	r4, r4, #9
 800058c:	05d2      	lsls	r2, r2, #23
 800058e:	0a60      	lsrs	r0, r4, #9
 8000590:	07db      	lsls	r3, r3, #31
 8000592:	4310      	orrs	r0, r2
 8000594:	4318      	orrs	r0, r3
 8000596:	bc3c      	pop	{r2, r3, r4, r5}
 8000598:	4690      	mov	r8, r2
 800059a:	4699      	mov	r9, r3
 800059c:	46a2      	mov	sl, r4
 800059e:	46ab      	mov	fp, r5
 80005a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005a2:	2201      	movs	r2, #1
 80005a4:	1a10      	subs	r0, r2, r0
 80005a6:	281b      	cmp	r0, #27
 80005a8:	dd7c      	ble.n	80006a4 <__aeabi_fdiv+0x1d8>
 80005aa:	2200      	movs	r2, #0
 80005ac:	2400      	movs	r4, #0
 80005ae:	e7ec      	b.n	800058a <__aeabi_fdiv+0xbe>
 80005b0:	2c00      	cmp	r4, #0
 80005b2:	d11d      	bne.n	80005f0 <__aeabi_fdiv+0x124>
 80005b4:	2304      	movs	r3, #4
 80005b6:	4699      	mov	r9, r3
 80005b8:	3b03      	subs	r3, #3
 80005ba:	2600      	movs	r6, #0
 80005bc:	469b      	mov	fp, r3
 80005be:	e79d      	b.n	80004fc <__aeabi_fdiv+0x30>
 80005c0:	3eff      	subs	r6, #255	; 0xff
 80005c2:	2d00      	cmp	r5, #0
 80005c4:	d120      	bne.n	8000608 <__aeabi_fdiv+0x13c>
 80005c6:	2102      	movs	r1, #2
 80005c8:	4643      	mov	r3, r8
 80005ca:	464a      	mov	r2, r9
 80005cc:	407b      	eors	r3, r7
 80005ce:	430a      	orrs	r2, r1
 80005d0:	2a0f      	cmp	r2, #15
 80005d2:	d8d8      	bhi.n	8000586 <__aeabi_fdiv+0xba>
 80005d4:	4845      	ldr	r0, [pc, #276]	; (80006ec <__aeabi_fdiv+0x220>)
 80005d6:	0092      	lsls	r2, r2, #2
 80005d8:	5882      	ldr	r2, [r0, r2]
 80005da:	4697      	mov	pc, r2
 80005dc:	2d00      	cmp	r5, #0
 80005de:	d119      	bne.n	8000614 <__aeabi_fdiv+0x148>
 80005e0:	2101      	movs	r1, #1
 80005e2:	e7f1      	b.n	80005c8 <__aeabi_fdiv+0xfc>
 80005e4:	230c      	movs	r3, #12
 80005e6:	4699      	mov	r9, r3
 80005e8:	3b09      	subs	r3, #9
 80005ea:	26ff      	movs	r6, #255	; 0xff
 80005ec:	469b      	mov	fp, r3
 80005ee:	e785      	b.n	80004fc <__aeabi_fdiv+0x30>
 80005f0:	0020      	movs	r0, r4
 80005f2:	f001 ff3b 	bl	800246c <__clzsi2>
 80005f6:	2676      	movs	r6, #118	; 0x76
 80005f8:	1f43      	subs	r3, r0, #5
 80005fa:	409c      	lsls	r4, r3
 80005fc:	2300      	movs	r3, #0
 80005fe:	4276      	negs	r6, r6
 8000600:	1a36      	subs	r6, r6, r0
 8000602:	4699      	mov	r9, r3
 8000604:	469b      	mov	fp, r3
 8000606:	e779      	b.n	80004fc <__aeabi_fdiv+0x30>
 8000608:	464a      	mov	r2, r9
 800060a:	2303      	movs	r3, #3
 800060c:	431a      	orrs	r2, r3
 800060e:	4691      	mov	r9, r2
 8000610:	2103      	movs	r1, #3
 8000612:	e786      	b.n	8000522 <__aeabi_fdiv+0x56>
 8000614:	0028      	movs	r0, r5
 8000616:	f001 ff29 	bl	800246c <__clzsi2>
 800061a:	1f43      	subs	r3, r0, #5
 800061c:	1836      	adds	r6, r6, r0
 800061e:	409d      	lsls	r5, r3
 8000620:	3676      	adds	r6, #118	; 0x76
 8000622:	2100      	movs	r1, #0
 8000624:	e77d      	b.n	8000522 <__aeabi_fdiv+0x56>
 8000626:	2480      	movs	r4, #128	; 0x80
 8000628:	2300      	movs	r3, #0
 800062a:	03e4      	lsls	r4, r4, #15
 800062c:	22ff      	movs	r2, #255	; 0xff
 800062e:	e7ac      	b.n	800058a <__aeabi_fdiv+0xbe>
 8000630:	2500      	movs	r5, #0
 8000632:	2380      	movs	r3, #128	; 0x80
 8000634:	03db      	lsls	r3, r3, #15
 8000636:	421c      	tst	r4, r3
 8000638:	d028      	beq.n	800068c <__aeabi_fdiv+0x1c0>
 800063a:	421d      	tst	r5, r3
 800063c:	d126      	bne.n	800068c <__aeabi_fdiv+0x1c0>
 800063e:	432b      	orrs	r3, r5
 8000640:	025c      	lsls	r4, r3, #9
 8000642:	0a64      	lsrs	r4, r4, #9
 8000644:	4643      	mov	r3, r8
 8000646:	22ff      	movs	r2, #255	; 0xff
 8000648:	e79f      	b.n	800058a <__aeabi_fdiv+0xbe>
 800064a:	0162      	lsls	r2, r4, #5
 800064c:	016c      	lsls	r4, r5, #5
 800064e:	42a2      	cmp	r2, r4
 8000650:	d224      	bcs.n	800069c <__aeabi_fdiv+0x1d0>
 8000652:	211b      	movs	r1, #27
 8000654:	2500      	movs	r5, #0
 8000656:	3e01      	subs	r6, #1
 8000658:	2701      	movs	r7, #1
 800065a:	0010      	movs	r0, r2
 800065c:	006d      	lsls	r5, r5, #1
 800065e:	0052      	lsls	r2, r2, #1
 8000660:	2800      	cmp	r0, #0
 8000662:	db01      	blt.n	8000668 <__aeabi_fdiv+0x19c>
 8000664:	4294      	cmp	r4, r2
 8000666:	d801      	bhi.n	800066c <__aeabi_fdiv+0x1a0>
 8000668:	1b12      	subs	r2, r2, r4
 800066a:	433d      	orrs	r5, r7
 800066c:	3901      	subs	r1, #1
 800066e:	2900      	cmp	r1, #0
 8000670:	d1f3      	bne.n	800065a <__aeabi_fdiv+0x18e>
 8000672:	0014      	movs	r4, r2
 8000674:	1e62      	subs	r2, r4, #1
 8000676:	4194      	sbcs	r4, r2
 8000678:	4325      	orrs	r5, r4
 800067a:	e76d      	b.n	8000558 <__aeabi_fdiv+0x8c>
 800067c:	46ba      	mov	sl, r7
 800067e:	4659      	mov	r1, fp
 8000680:	0025      	movs	r5, r4
 8000682:	4653      	mov	r3, sl
 8000684:	2902      	cmp	r1, #2
 8000686:	d000      	beq.n	800068a <__aeabi_fdiv+0x1be>
 8000688:	e761      	b.n	800054e <__aeabi_fdiv+0x82>
 800068a:	e77c      	b.n	8000586 <__aeabi_fdiv+0xba>
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	03db      	lsls	r3, r3, #15
 8000690:	431c      	orrs	r4, r3
 8000692:	0264      	lsls	r4, r4, #9
 8000694:	0a64      	lsrs	r4, r4, #9
 8000696:	003b      	movs	r3, r7
 8000698:	22ff      	movs	r2, #255	; 0xff
 800069a:	e776      	b.n	800058a <__aeabi_fdiv+0xbe>
 800069c:	1b12      	subs	r2, r2, r4
 800069e:	211a      	movs	r1, #26
 80006a0:	2501      	movs	r5, #1
 80006a2:	e7d9      	b.n	8000658 <__aeabi_fdiv+0x18c>
 80006a4:	369e      	adds	r6, #158	; 0x9e
 80006a6:	002a      	movs	r2, r5
 80006a8:	40b5      	lsls	r5, r6
 80006aa:	002c      	movs	r4, r5
 80006ac:	40c2      	lsrs	r2, r0
 80006ae:	1e65      	subs	r5, r4, #1
 80006b0:	41ac      	sbcs	r4, r5
 80006b2:	4314      	orrs	r4, r2
 80006b4:	0762      	lsls	r2, r4, #29
 80006b6:	d004      	beq.n	80006c2 <__aeabi_fdiv+0x1f6>
 80006b8:	220f      	movs	r2, #15
 80006ba:	4022      	ands	r2, r4
 80006bc:	2a04      	cmp	r2, #4
 80006be:	d000      	beq.n	80006c2 <__aeabi_fdiv+0x1f6>
 80006c0:	3404      	adds	r4, #4
 80006c2:	0162      	lsls	r2, r4, #5
 80006c4:	d403      	bmi.n	80006ce <__aeabi_fdiv+0x202>
 80006c6:	01a4      	lsls	r4, r4, #6
 80006c8:	0a64      	lsrs	r4, r4, #9
 80006ca:	2200      	movs	r2, #0
 80006cc:	e75d      	b.n	800058a <__aeabi_fdiv+0xbe>
 80006ce:	2201      	movs	r2, #1
 80006d0:	2400      	movs	r4, #0
 80006d2:	e75a      	b.n	800058a <__aeabi_fdiv+0xbe>
 80006d4:	2480      	movs	r4, #128	; 0x80
 80006d6:	03e4      	lsls	r4, r4, #15
 80006d8:	432c      	orrs	r4, r5
 80006da:	0264      	lsls	r4, r4, #9
 80006dc:	0a64      	lsrs	r4, r4, #9
 80006de:	22ff      	movs	r2, #255	; 0xff
 80006e0:	e753      	b.n	800058a <__aeabi_fdiv+0xbe>
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	0800a680 	.word	0x0800a680
 80006e8:	f7ffffff 	.word	0xf7ffffff
 80006ec:	0800a6c0 	.word	0x0800a6c0

080006f0 <__aeabi_i2f>:
 80006f0:	b570      	push	{r4, r5, r6, lr}
 80006f2:	2800      	cmp	r0, #0
 80006f4:	d03d      	beq.n	8000772 <__aeabi_i2f+0x82>
 80006f6:	17c3      	asrs	r3, r0, #31
 80006f8:	18c5      	adds	r5, r0, r3
 80006fa:	405d      	eors	r5, r3
 80006fc:	0fc4      	lsrs	r4, r0, #31
 80006fe:	0028      	movs	r0, r5
 8000700:	f001 feb4 	bl	800246c <__clzsi2>
 8000704:	229e      	movs	r2, #158	; 0x9e
 8000706:	1a12      	subs	r2, r2, r0
 8000708:	2a96      	cmp	r2, #150	; 0x96
 800070a:	dc07      	bgt.n	800071c <__aeabi_i2f+0x2c>
 800070c:	b2d2      	uxtb	r2, r2
 800070e:	2808      	cmp	r0, #8
 8000710:	dd33      	ble.n	800077a <__aeabi_i2f+0x8a>
 8000712:	3808      	subs	r0, #8
 8000714:	4085      	lsls	r5, r0
 8000716:	0268      	lsls	r0, r5, #9
 8000718:	0a40      	lsrs	r0, r0, #9
 800071a:	e023      	b.n	8000764 <__aeabi_i2f+0x74>
 800071c:	2a99      	cmp	r2, #153	; 0x99
 800071e:	dd0b      	ble.n	8000738 <__aeabi_i2f+0x48>
 8000720:	2305      	movs	r3, #5
 8000722:	0029      	movs	r1, r5
 8000724:	1a1b      	subs	r3, r3, r0
 8000726:	40d9      	lsrs	r1, r3
 8000728:	0003      	movs	r3, r0
 800072a:	331b      	adds	r3, #27
 800072c:	409d      	lsls	r5, r3
 800072e:	002b      	movs	r3, r5
 8000730:	1e5d      	subs	r5, r3, #1
 8000732:	41ab      	sbcs	r3, r5
 8000734:	4319      	orrs	r1, r3
 8000736:	000d      	movs	r5, r1
 8000738:	2805      	cmp	r0, #5
 800073a:	dd01      	ble.n	8000740 <__aeabi_i2f+0x50>
 800073c:	1f43      	subs	r3, r0, #5
 800073e:	409d      	lsls	r5, r3
 8000740:	002b      	movs	r3, r5
 8000742:	490f      	ldr	r1, [pc, #60]	; (8000780 <__aeabi_i2f+0x90>)
 8000744:	400b      	ands	r3, r1
 8000746:	076e      	lsls	r6, r5, #29
 8000748:	d009      	beq.n	800075e <__aeabi_i2f+0x6e>
 800074a:	260f      	movs	r6, #15
 800074c:	4035      	ands	r5, r6
 800074e:	2d04      	cmp	r5, #4
 8000750:	d005      	beq.n	800075e <__aeabi_i2f+0x6e>
 8000752:	3304      	adds	r3, #4
 8000754:	015d      	lsls	r5, r3, #5
 8000756:	d502      	bpl.n	800075e <__aeabi_i2f+0x6e>
 8000758:	229f      	movs	r2, #159	; 0x9f
 800075a:	400b      	ands	r3, r1
 800075c:	1a12      	subs	r2, r2, r0
 800075e:	019b      	lsls	r3, r3, #6
 8000760:	0a58      	lsrs	r0, r3, #9
 8000762:	b2d2      	uxtb	r2, r2
 8000764:	0240      	lsls	r0, r0, #9
 8000766:	05d2      	lsls	r2, r2, #23
 8000768:	0a40      	lsrs	r0, r0, #9
 800076a:	07e4      	lsls	r4, r4, #31
 800076c:	4310      	orrs	r0, r2
 800076e:	4320      	orrs	r0, r4
 8000770:	bd70      	pop	{r4, r5, r6, pc}
 8000772:	2400      	movs	r4, #0
 8000774:	2200      	movs	r2, #0
 8000776:	2000      	movs	r0, #0
 8000778:	e7f4      	b.n	8000764 <__aeabi_i2f+0x74>
 800077a:	0268      	lsls	r0, r5, #9
 800077c:	0a40      	lsrs	r0, r0, #9
 800077e:	e7f1      	b.n	8000764 <__aeabi_i2f+0x74>
 8000780:	fbffffff 	.word	0xfbffffff

08000784 <__aeabi_dadd>:
 8000784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000786:	464f      	mov	r7, r9
 8000788:	4646      	mov	r6, r8
 800078a:	46d6      	mov	lr, sl
 800078c:	000c      	movs	r4, r1
 800078e:	0309      	lsls	r1, r1, #12
 8000790:	b5c0      	push	{r6, r7, lr}
 8000792:	0a49      	lsrs	r1, r1, #9
 8000794:	0f47      	lsrs	r7, r0, #29
 8000796:	005e      	lsls	r6, r3, #1
 8000798:	4339      	orrs	r1, r7
 800079a:	031f      	lsls	r7, r3, #12
 800079c:	0fdb      	lsrs	r3, r3, #31
 800079e:	469c      	mov	ip, r3
 80007a0:	0065      	lsls	r5, r4, #1
 80007a2:	0a7b      	lsrs	r3, r7, #9
 80007a4:	0f57      	lsrs	r7, r2, #29
 80007a6:	431f      	orrs	r7, r3
 80007a8:	0d6d      	lsrs	r5, r5, #21
 80007aa:	0fe4      	lsrs	r4, r4, #31
 80007ac:	0d76      	lsrs	r6, r6, #21
 80007ae:	46a1      	mov	r9, r4
 80007b0:	00c0      	lsls	r0, r0, #3
 80007b2:	46b8      	mov	r8, r7
 80007b4:	00d2      	lsls	r2, r2, #3
 80007b6:	1bab      	subs	r3, r5, r6
 80007b8:	4564      	cmp	r4, ip
 80007ba:	d07b      	beq.n	80008b4 <__aeabi_dadd+0x130>
 80007bc:	2b00      	cmp	r3, #0
 80007be:	dd5f      	ble.n	8000880 <__aeabi_dadd+0xfc>
 80007c0:	2e00      	cmp	r6, #0
 80007c2:	d000      	beq.n	80007c6 <__aeabi_dadd+0x42>
 80007c4:	e0a4      	b.n	8000910 <__aeabi_dadd+0x18c>
 80007c6:	003e      	movs	r6, r7
 80007c8:	4316      	orrs	r6, r2
 80007ca:	d100      	bne.n	80007ce <__aeabi_dadd+0x4a>
 80007cc:	e112      	b.n	80009f4 <__aeabi_dadd+0x270>
 80007ce:	1e5e      	subs	r6, r3, #1
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d000      	beq.n	80007d6 <__aeabi_dadd+0x52>
 80007d4:	e19e      	b.n	8000b14 <__aeabi_dadd+0x390>
 80007d6:	1a87      	subs	r7, r0, r2
 80007d8:	4643      	mov	r3, r8
 80007da:	42b8      	cmp	r0, r7
 80007dc:	4180      	sbcs	r0, r0
 80007de:	2501      	movs	r5, #1
 80007e0:	1ac9      	subs	r1, r1, r3
 80007e2:	4240      	negs	r0, r0
 80007e4:	1a09      	subs	r1, r1, r0
 80007e6:	020b      	lsls	r3, r1, #8
 80007e8:	d400      	bmi.n	80007ec <__aeabi_dadd+0x68>
 80007ea:	e131      	b.n	8000a50 <__aeabi_dadd+0x2cc>
 80007ec:	0249      	lsls	r1, r1, #9
 80007ee:	0a4e      	lsrs	r6, r1, #9
 80007f0:	2e00      	cmp	r6, #0
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x72>
 80007f4:	e16e      	b.n	8000ad4 <__aeabi_dadd+0x350>
 80007f6:	0030      	movs	r0, r6
 80007f8:	f001 fe38 	bl	800246c <__clzsi2>
 80007fc:	0003      	movs	r3, r0
 80007fe:	3b08      	subs	r3, #8
 8000800:	2b1f      	cmp	r3, #31
 8000802:	dd00      	ble.n	8000806 <__aeabi_dadd+0x82>
 8000804:	e161      	b.n	8000aca <__aeabi_dadd+0x346>
 8000806:	2220      	movs	r2, #32
 8000808:	0039      	movs	r1, r7
 800080a:	1ad2      	subs	r2, r2, r3
 800080c:	409e      	lsls	r6, r3
 800080e:	40d1      	lsrs	r1, r2
 8000810:	409f      	lsls	r7, r3
 8000812:	430e      	orrs	r6, r1
 8000814:	429d      	cmp	r5, r3
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x96>
 8000818:	e151      	b.n	8000abe <__aeabi_dadd+0x33a>
 800081a:	1b5d      	subs	r5, r3, r5
 800081c:	1c6b      	adds	r3, r5, #1
 800081e:	2b1f      	cmp	r3, #31
 8000820:	dd00      	ble.n	8000824 <__aeabi_dadd+0xa0>
 8000822:	e17c      	b.n	8000b1e <__aeabi_dadd+0x39a>
 8000824:	2120      	movs	r1, #32
 8000826:	1ac9      	subs	r1, r1, r3
 8000828:	003d      	movs	r5, r7
 800082a:	0030      	movs	r0, r6
 800082c:	408f      	lsls	r7, r1
 800082e:	4088      	lsls	r0, r1
 8000830:	40dd      	lsrs	r5, r3
 8000832:	1e79      	subs	r1, r7, #1
 8000834:	418f      	sbcs	r7, r1
 8000836:	0031      	movs	r1, r6
 8000838:	2207      	movs	r2, #7
 800083a:	4328      	orrs	r0, r5
 800083c:	40d9      	lsrs	r1, r3
 800083e:	2500      	movs	r5, #0
 8000840:	4307      	orrs	r7, r0
 8000842:	403a      	ands	r2, r7
 8000844:	2a00      	cmp	r2, #0
 8000846:	d009      	beq.n	800085c <__aeabi_dadd+0xd8>
 8000848:	230f      	movs	r3, #15
 800084a:	403b      	ands	r3, r7
 800084c:	2b04      	cmp	r3, #4
 800084e:	d005      	beq.n	800085c <__aeabi_dadd+0xd8>
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	42bb      	cmp	r3, r7
 8000854:	41bf      	sbcs	r7, r7
 8000856:	427f      	negs	r7, r7
 8000858:	19c9      	adds	r1, r1, r7
 800085a:	001f      	movs	r7, r3
 800085c:	020b      	lsls	r3, r1, #8
 800085e:	d400      	bmi.n	8000862 <__aeabi_dadd+0xde>
 8000860:	e226      	b.n	8000cb0 <__aeabi_dadd+0x52c>
 8000862:	1c6a      	adds	r2, r5, #1
 8000864:	4bc6      	ldr	r3, [pc, #792]	; (8000b80 <__aeabi_dadd+0x3fc>)
 8000866:	0555      	lsls	r5, r2, #21
 8000868:	0d6d      	lsrs	r5, r5, #21
 800086a:	429a      	cmp	r2, r3
 800086c:	d100      	bne.n	8000870 <__aeabi_dadd+0xec>
 800086e:	e106      	b.n	8000a7e <__aeabi_dadd+0x2fa>
 8000870:	4ac4      	ldr	r2, [pc, #784]	; (8000b84 <__aeabi_dadd+0x400>)
 8000872:	08ff      	lsrs	r7, r7, #3
 8000874:	400a      	ands	r2, r1
 8000876:	0753      	lsls	r3, r2, #29
 8000878:	0252      	lsls	r2, r2, #9
 800087a:	433b      	orrs	r3, r7
 800087c:	0b12      	lsrs	r2, r2, #12
 800087e:	e08e      	b.n	800099e <__aeabi_dadd+0x21a>
 8000880:	2b00      	cmp	r3, #0
 8000882:	d000      	beq.n	8000886 <__aeabi_dadd+0x102>
 8000884:	e0b8      	b.n	80009f8 <__aeabi_dadd+0x274>
 8000886:	1c6b      	adds	r3, r5, #1
 8000888:	055b      	lsls	r3, r3, #21
 800088a:	0d5b      	lsrs	r3, r3, #21
 800088c:	2b01      	cmp	r3, #1
 800088e:	dc00      	bgt.n	8000892 <__aeabi_dadd+0x10e>
 8000890:	e130      	b.n	8000af4 <__aeabi_dadd+0x370>
 8000892:	1a87      	subs	r7, r0, r2
 8000894:	4643      	mov	r3, r8
 8000896:	42b8      	cmp	r0, r7
 8000898:	41b6      	sbcs	r6, r6
 800089a:	1acb      	subs	r3, r1, r3
 800089c:	4276      	negs	r6, r6
 800089e:	1b9e      	subs	r6, r3, r6
 80008a0:	0233      	lsls	r3, r6, #8
 80008a2:	d500      	bpl.n	80008a6 <__aeabi_dadd+0x122>
 80008a4:	e14c      	b.n	8000b40 <__aeabi_dadd+0x3bc>
 80008a6:	003b      	movs	r3, r7
 80008a8:	4333      	orrs	r3, r6
 80008aa:	d1a1      	bne.n	80007f0 <__aeabi_dadd+0x6c>
 80008ac:	2200      	movs	r2, #0
 80008ae:	2400      	movs	r4, #0
 80008b0:	2500      	movs	r5, #0
 80008b2:	e070      	b.n	8000996 <__aeabi_dadd+0x212>
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	dc00      	bgt.n	80008ba <__aeabi_dadd+0x136>
 80008b8:	e0e5      	b.n	8000a86 <__aeabi_dadd+0x302>
 80008ba:	2e00      	cmp	r6, #0
 80008bc:	d100      	bne.n	80008c0 <__aeabi_dadd+0x13c>
 80008be:	e083      	b.n	80009c8 <__aeabi_dadd+0x244>
 80008c0:	4eaf      	ldr	r6, [pc, #700]	; (8000b80 <__aeabi_dadd+0x3fc>)
 80008c2:	42b5      	cmp	r5, r6
 80008c4:	d060      	beq.n	8000988 <__aeabi_dadd+0x204>
 80008c6:	2680      	movs	r6, #128	; 0x80
 80008c8:	0436      	lsls	r6, r6, #16
 80008ca:	4337      	orrs	r7, r6
 80008cc:	46b8      	mov	r8, r7
 80008ce:	2b38      	cmp	r3, #56	; 0x38
 80008d0:	dc00      	bgt.n	80008d4 <__aeabi_dadd+0x150>
 80008d2:	e13e      	b.n	8000b52 <__aeabi_dadd+0x3ce>
 80008d4:	4643      	mov	r3, r8
 80008d6:	4313      	orrs	r3, r2
 80008d8:	001f      	movs	r7, r3
 80008da:	1e7a      	subs	r2, r7, #1
 80008dc:	4197      	sbcs	r7, r2
 80008de:	183f      	adds	r7, r7, r0
 80008e0:	4287      	cmp	r7, r0
 80008e2:	4180      	sbcs	r0, r0
 80008e4:	4240      	negs	r0, r0
 80008e6:	1809      	adds	r1, r1, r0
 80008e8:	020b      	lsls	r3, r1, #8
 80008ea:	d400      	bmi.n	80008ee <__aeabi_dadd+0x16a>
 80008ec:	e0b0      	b.n	8000a50 <__aeabi_dadd+0x2cc>
 80008ee:	4ba4      	ldr	r3, [pc, #656]	; (8000b80 <__aeabi_dadd+0x3fc>)
 80008f0:	3501      	adds	r5, #1
 80008f2:	429d      	cmp	r5, r3
 80008f4:	d100      	bne.n	80008f8 <__aeabi_dadd+0x174>
 80008f6:	e0c3      	b.n	8000a80 <__aeabi_dadd+0x2fc>
 80008f8:	4aa2      	ldr	r2, [pc, #648]	; (8000b84 <__aeabi_dadd+0x400>)
 80008fa:	087b      	lsrs	r3, r7, #1
 80008fc:	400a      	ands	r2, r1
 80008fe:	2101      	movs	r1, #1
 8000900:	400f      	ands	r7, r1
 8000902:	431f      	orrs	r7, r3
 8000904:	0851      	lsrs	r1, r2, #1
 8000906:	07d3      	lsls	r3, r2, #31
 8000908:	2207      	movs	r2, #7
 800090a:	431f      	orrs	r7, r3
 800090c:	403a      	ands	r2, r7
 800090e:	e799      	b.n	8000844 <__aeabi_dadd+0xc0>
 8000910:	4e9b      	ldr	r6, [pc, #620]	; (8000b80 <__aeabi_dadd+0x3fc>)
 8000912:	42b5      	cmp	r5, r6
 8000914:	d038      	beq.n	8000988 <__aeabi_dadd+0x204>
 8000916:	2680      	movs	r6, #128	; 0x80
 8000918:	0436      	lsls	r6, r6, #16
 800091a:	4337      	orrs	r7, r6
 800091c:	46b8      	mov	r8, r7
 800091e:	2b38      	cmp	r3, #56	; 0x38
 8000920:	dd00      	ble.n	8000924 <__aeabi_dadd+0x1a0>
 8000922:	e0dc      	b.n	8000ade <__aeabi_dadd+0x35a>
 8000924:	2b1f      	cmp	r3, #31
 8000926:	dc00      	bgt.n	800092a <__aeabi_dadd+0x1a6>
 8000928:	e130      	b.n	8000b8c <__aeabi_dadd+0x408>
 800092a:	001e      	movs	r6, r3
 800092c:	4647      	mov	r7, r8
 800092e:	3e20      	subs	r6, #32
 8000930:	40f7      	lsrs	r7, r6
 8000932:	46bc      	mov	ip, r7
 8000934:	2b20      	cmp	r3, #32
 8000936:	d004      	beq.n	8000942 <__aeabi_dadd+0x1be>
 8000938:	2640      	movs	r6, #64	; 0x40
 800093a:	1af3      	subs	r3, r6, r3
 800093c:	4646      	mov	r6, r8
 800093e:	409e      	lsls	r6, r3
 8000940:	4332      	orrs	r2, r6
 8000942:	0017      	movs	r7, r2
 8000944:	4663      	mov	r3, ip
 8000946:	1e7a      	subs	r2, r7, #1
 8000948:	4197      	sbcs	r7, r2
 800094a:	431f      	orrs	r7, r3
 800094c:	e0cc      	b.n	8000ae8 <__aeabi_dadd+0x364>
 800094e:	2b00      	cmp	r3, #0
 8000950:	d100      	bne.n	8000954 <__aeabi_dadd+0x1d0>
 8000952:	e204      	b.n	8000d5e <__aeabi_dadd+0x5da>
 8000954:	4643      	mov	r3, r8
 8000956:	4313      	orrs	r3, r2
 8000958:	d100      	bne.n	800095c <__aeabi_dadd+0x1d8>
 800095a:	e159      	b.n	8000c10 <__aeabi_dadd+0x48c>
 800095c:	074b      	lsls	r3, r1, #29
 800095e:	08c0      	lsrs	r0, r0, #3
 8000960:	4318      	orrs	r0, r3
 8000962:	2380      	movs	r3, #128	; 0x80
 8000964:	08c9      	lsrs	r1, r1, #3
 8000966:	031b      	lsls	r3, r3, #12
 8000968:	4219      	tst	r1, r3
 800096a:	d008      	beq.n	800097e <__aeabi_dadd+0x1fa>
 800096c:	4645      	mov	r5, r8
 800096e:	08ed      	lsrs	r5, r5, #3
 8000970:	421d      	tst	r5, r3
 8000972:	d104      	bne.n	800097e <__aeabi_dadd+0x1fa>
 8000974:	4643      	mov	r3, r8
 8000976:	08d0      	lsrs	r0, r2, #3
 8000978:	0759      	lsls	r1, r3, #29
 800097a:	4308      	orrs	r0, r1
 800097c:	0029      	movs	r1, r5
 800097e:	0f42      	lsrs	r2, r0, #29
 8000980:	00c9      	lsls	r1, r1, #3
 8000982:	4d7f      	ldr	r5, [pc, #508]	; (8000b80 <__aeabi_dadd+0x3fc>)
 8000984:	4311      	orrs	r1, r2
 8000986:	00c0      	lsls	r0, r0, #3
 8000988:	074b      	lsls	r3, r1, #29
 800098a:	08ca      	lsrs	r2, r1, #3
 800098c:	497c      	ldr	r1, [pc, #496]	; (8000b80 <__aeabi_dadd+0x3fc>)
 800098e:	08c0      	lsrs	r0, r0, #3
 8000990:	4303      	orrs	r3, r0
 8000992:	428d      	cmp	r5, r1
 8000994:	d068      	beq.n	8000a68 <__aeabi_dadd+0x2e4>
 8000996:	0312      	lsls	r2, r2, #12
 8000998:	056d      	lsls	r5, r5, #21
 800099a:	0b12      	lsrs	r2, r2, #12
 800099c:	0d6d      	lsrs	r5, r5, #21
 800099e:	2100      	movs	r1, #0
 80009a0:	0312      	lsls	r2, r2, #12
 80009a2:	0018      	movs	r0, r3
 80009a4:	0b13      	lsrs	r3, r2, #12
 80009a6:	0d0a      	lsrs	r2, r1, #20
 80009a8:	0512      	lsls	r2, r2, #20
 80009aa:	431a      	orrs	r2, r3
 80009ac:	4b76      	ldr	r3, [pc, #472]	; (8000b88 <__aeabi_dadd+0x404>)
 80009ae:	052d      	lsls	r5, r5, #20
 80009b0:	4013      	ands	r3, r2
 80009b2:	432b      	orrs	r3, r5
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	07e4      	lsls	r4, r4, #31
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	4323      	orrs	r3, r4
 80009bc:	0019      	movs	r1, r3
 80009be:	bc1c      	pop	{r2, r3, r4}
 80009c0:	4690      	mov	r8, r2
 80009c2:	4699      	mov	r9, r3
 80009c4:	46a2      	mov	sl, r4
 80009c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009c8:	003e      	movs	r6, r7
 80009ca:	4316      	orrs	r6, r2
 80009cc:	d012      	beq.n	80009f4 <__aeabi_dadd+0x270>
 80009ce:	1e5e      	subs	r6, r3, #1
 80009d0:	2e00      	cmp	r6, #0
 80009d2:	d000      	beq.n	80009d6 <__aeabi_dadd+0x252>
 80009d4:	e100      	b.n	8000bd8 <__aeabi_dadd+0x454>
 80009d6:	1887      	adds	r7, r0, r2
 80009d8:	4287      	cmp	r7, r0
 80009da:	4180      	sbcs	r0, r0
 80009dc:	4441      	add	r1, r8
 80009de:	4240      	negs	r0, r0
 80009e0:	1809      	adds	r1, r1, r0
 80009e2:	2501      	movs	r5, #1
 80009e4:	020b      	lsls	r3, r1, #8
 80009e6:	d533      	bpl.n	8000a50 <__aeabi_dadd+0x2cc>
 80009e8:	2502      	movs	r5, #2
 80009ea:	e785      	b.n	80008f8 <__aeabi_dadd+0x174>
 80009ec:	4664      	mov	r4, ip
 80009ee:	0033      	movs	r3, r6
 80009f0:	4641      	mov	r1, r8
 80009f2:	0010      	movs	r0, r2
 80009f4:	001d      	movs	r5, r3
 80009f6:	e7c7      	b.n	8000988 <__aeabi_dadd+0x204>
 80009f8:	2d00      	cmp	r5, #0
 80009fa:	d000      	beq.n	80009fe <__aeabi_dadd+0x27a>
 80009fc:	e0da      	b.n	8000bb4 <__aeabi_dadd+0x430>
 80009fe:	000c      	movs	r4, r1
 8000a00:	4304      	orrs	r4, r0
 8000a02:	d0f3      	beq.n	80009ec <__aeabi_dadd+0x268>
 8000a04:	1c5c      	adds	r4, r3, #1
 8000a06:	d100      	bne.n	8000a0a <__aeabi_dadd+0x286>
 8000a08:	e19f      	b.n	8000d4a <__aeabi_dadd+0x5c6>
 8000a0a:	4c5d      	ldr	r4, [pc, #372]	; (8000b80 <__aeabi_dadd+0x3fc>)
 8000a0c:	42a6      	cmp	r6, r4
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_dadd+0x28e>
 8000a10:	e12f      	b.n	8000c72 <__aeabi_dadd+0x4ee>
 8000a12:	43db      	mvns	r3, r3
 8000a14:	2b38      	cmp	r3, #56	; 0x38
 8000a16:	dd00      	ble.n	8000a1a <__aeabi_dadd+0x296>
 8000a18:	e166      	b.n	8000ce8 <__aeabi_dadd+0x564>
 8000a1a:	2b1f      	cmp	r3, #31
 8000a1c:	dd00      	ble.n	8000a20 <__aeabi_dadd+0x29c>
 8000a1e:	e183      	b.n	8000d28 <__aeabi_dadd+0x5a4>
 8000a20:	2420      	movs	r4, #32
 8000a22:	0005      	movs	r5, r0
 8000a24:	1ae4      	subs	r4, r4, r3
 8000a26:	000f      	movs	r7, r1
 8000a28:	40dd      	lsrs	r5, r3
 8000a2a:	40d9      	lsrs	r1, r3
 8000a2c:	40a0      	lsls	r0, r4
 8000a2e:	4643      	mov	r3, r8
 8000a30:	40a7      	lsls	r7, r4
 8000a32:	1a5b      	subs	r3, r3, r1
 8000a34:	1e44      	subs	r4, r0, #1
 8000a36:	41a0      	sbcs	r0, r4
 8000a38:	4698      	mov	r8, r3
 8000a3a:	432f      	orrs	r7, r5
 8000a3c:	4338      	orrs	r0, r7
 8000a3e:	1a17      	subs	r7, r2, r0
 8000a40:	42ba      	cmp	r2, r7
 8000a42:	4192      	sbcs	r2, r2
 8000a44:	4643      	mov	r3, r8
 8000a46:	4252      	negs	r2, r2
 8000a48:	1a99      	subs	r1, r3, r2
 8000a4a:	4664      	mov	r4, ip
 8000a4c:	0035      	movs	r5, r6
 8000a4e:	e6ca      	b.n	80007e6 <__aeabi_dadd+0x62>
 8000a50:	2207      	movs	r2, #7
 8000a52:	403a      	ands	r2, r7
 8000a54:	2a00      	cmp	r2, #0
 8000a56:	d000      	beq.n	8000a5a <__aeabi_dadd+0x2d6>
 8000a58:	e6f6      	b.n	8000848 <__aeabi_dadd+0xc4>
 8000a5a:	074b      	lsls	r3, r1, #29
 8000a5c:	08ca      	lsrs	r2, r1, #3
 8000a5e:	4948      	ldr	r1, [pc, #288]	; (8000b80 <__aeabi_dadd+0x3fc>)
 8000a60:	08ff      	lsrs	r7, r7, #3
 8000a62:	433b      	orrs	r3, r7
 8000a64:	428d      	cmp	r5, r1
 8000a66:	d196      	bne.n	8000996 <__aeabi_dadd+0x212>
 8000a68:	0019      	movs	r1, r3
 8000a6a:	4311      	orrs	r1, r2
 8000a6c:	d100      	bne.n	8000a70 <__aeabi_dadd+0x2ec>
 8000a6e:	e19e      	b.n	8000dae <__aeabi_dadd+0x62a>
 8000a70:	2180      	movs	r1, #128	; 0x80
 8000a72:	0309      	lsls	r1, r1, #12
 8000a74:	430a      	orrs	r2, r1
 8000a76:	0312      	lsls	r2, r2, #12
 8000a78:	0b12      	lsrs	r2, r2, #12
 8000a7a:	4d41      	ldr	r5, [pc, #260]	; (8000b80 <__aeabi_dadd+0x3fc>)
 8000a7c:	e78f      	b.n	800099e <__aeabi_dadd+0x21a>
 8000a7e:	0015      	movs	r5, r2
 8000a80:	2200      	movs	r2, #0
 8000a82:	2300      	movs	r3, #0
 8000a84:	e78b      	b.n	800099e <__aeabi_dadd+0x21a>
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d000      	beq.n	8000a8c <__aeabi_dadd+0x308>
 8000a8a:	e0c7      	b.n	8000c1c <__aeabi_dadd+0x498>
 8000a8c:	1c6b      	adds	r3, r5, #1
 8000a8e:	055f      	lsls	r7, r3, #21
 8000a90:	0d7f      	lsrs	r7, r7, #21
 8000a92:	2f01      	cmp	r7, #1
 8000a94:	dc00      	bgt.n	8000a98 <__aeabi_dadd+0x314>
 8000a96:	e0f1      	b.n	8000c7c <__aeabi_dadd+0x4f8>
 8000a98:	4d39      	ldr	r5, [pc, #228]	; (8000b80 <__aeabi_dadd+0x3fc>)
 8000a9a:	42ab      	cmp	r3, r5
 8000a9c:	d100      	bne.n	8000aa0 <__aeabi_dadd+0x31c>
 8000a9e:	e0b9      	b.n	8000c14 <__aeabi_dadd+0x490>
 8000aa0:	1885      	adds	r5, r0, r2
 8000aa2:	000a      	movs	r2, r1
 8000aa4:	4285      	cmp	r5, r0
 8000aa6:	4189      	sbcs	r1, r1
 8000aa8:	4442      	add	r2, r8
 8000aaa:	4249      	negs	r1, r1
 8000aac:	1851      	adds	r1, r2, r1
 8000aae:	2207      	movs	r2, #7
 8000ab0:	07cf      	lsls	r7, r1, #31
 8000ab2:	086d      	lsrs	r5, r5, #1
 8000ab4:	432f      	orrs	r7, r5
 8000ab6:	0849      	lsrs	r1, r1, #1
 8000ab8:	403a      	ands	r2, r7
 8000aba:	001d      	movs	r5, r3
 8000abc:	e6c2      	b.n	8000844 <__aeabi_dadd+0xc0>
 8000abe:	2207      	movs	r2, #7
 8000ac0:	4930      	ldr	r1, [pc, #192]	; (8000b84 <__aeabi_dadd+0x400>)
 8000ac2:	1aed      	subs	r5, r5, r3
 8000ac4:	4031      	ands	r1, r6
 8000ac6:	403a      	ands	r2, r7
 8000ac8:	e6bc      	b.n	8000844 <__aeabi_dadd+0xc0>
 8000aca:	003e      	movs	r6, r7
 8000acc:	3828      	subs	r0, #40	; 0x28
 8000ace:	4086      	lsls	r6, r0
 8000ad0:	2700      	movs	r7, #0
 8000ad2:	e69f      	b.n	8000814 <__aeabi_dadd+0x90>
 8000ad4:	0038      	movs	r0, r7
 8000ad6:	f001 fcc9 	bl	800246c <__clzsi2>
 8000ada:	3020      	adds	r0, #32
 8000adc:	e68e      	b.n	80007fc <__aeabi_dadd+0x78>
 8000ade:	4643      	mov	r3, r8
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	001f      	movs	r7, r3
 8000ae4:	1e7a      	subs	r2, r7, #1
 8000ae6:	4197      	sbcs	r7, r2
 8000ae8:	1bc7      	subs	r7, r0, r7
 8000aea:	42b8      	cmp	r0, r7
 8000aec:	4180      	sbcs	r0, r0
 8000aee:	4240      	negs	r0, r0
 8000af0:	1a09      	subs	r1, r1, r0
 8000af2:	e678      	b.n	80007e6 <__aeabi_dadd+0x62>
 8000af4:	000e      	movs	r6, r1
 8000af6:	003b      	movs	r3, r7
 8000af8:	4306      	orrs	r6, r0
 8000afa:	4313      	orrs	r3, r2
 8000afc:	2d00      	cmp	r5, #0
 8000afe:	d161      	bne.n	8000bc4 <__aeabi_dadd+0x440>
 8000b00:	2e00      	cmp	r6, #0
 8000b02:	d000      	beq.n	8000b06 <__aeabi_dadd+0x382>
 8000b04:	e0f4      	b.n	8000cf0 <__aeabi_dadd+0x56c>
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d100      	bne.n	8000b0c <__aeabi_dadd+0x388>
 8000b0a:	e11b      	b.n	8000d44 <__aeabi_dadd+0x5c0>
 8000b0c:	4664      	mov	r4, ip
 8000b0e:	0039      	movs	r1, r7
 8000b10:	0010      	movs	r0, r2
 8000b12:	e739      	b.n	8000988 <__aeabi_dadd+0x204>
 8000b14:	4f1a      	ldr	r7, [pc, #104]	; (8000b80 <__aeabi_dadd+0x3fc>)
 8000b16:	42bb      	cmp	r3, r7
 8000b18:	d07a      	beq.n	8000c10 <__aeabi_dadd+0x48c>
 8000b1a:	0033      	movs	r3, r6
 8000b1c:	e6ff      	b.n	800091e <__aeabi_dadd+0x19a>
 8000b1e:	0030      	movs	r0, r6
 8000b20:	3d1f      	subs	r5, #31
 8000b22:	40e8      	lsrs	r0, r5
 8000b24:	2b20      	cmp	r3, #32
 8000b26:	d003      	beq.n	8000b30 <__aeabi_dadd+0x3ac>
 8000b28:	2140      	movs	r1, #64	; 0x40
 8000b2a:	1acb      	subs	r3, r1, r3
 8000b2c:	409e      	lsls	r6, r3
 8000b2e:	4337      	orrs	r7, r6
 8000b30:	1e7b      	subs	r3, r7, #1
 8000b32:	419f      	sbcs	r7, r3
 8000b34:	2207      	movs	r2, #7
 8000b36:	4307      	orrs	r7, r0
 8000b38:	403a      	ands	r2, r7
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2500      	movs	r5, #0
 8000b3e:	e789      	b.n	8000a54 <__aeabi_dadd+0x2d0>
 8000b40:	1a17      	subs	r7, r2, r0
 8000b42:	4643      	mov	r3, r8
 8000b44:	42ba      	cmp	r2, r7
 8000b46:	41b6      	sbcs	r6, r6
 8000b48:	1a59      	subs	r1, r3, r1
 8000b4a:	4276      	negs	r6, r6
 8000b4c:	1b8e      	subs	r6, r1, r6
 8000b4e:	4664      	mov	r4, ip
 8000b50:	e64e      	b.n	80007f0 <__aeabi_dadd+0x6c>
 8000b52:	2b1f      	cmp	r3, #31
 8000b54:	dd00      	ble.n	8000b58 <__aeabi_dadd+0x3d4>
 8000b56:	e0ad      	b.n	8000cb4 <__aeabi_dadd+0x530>
 8000b58:	2620      	movs	r6, #32
 8000b5a:	4647      	mov	r7, r8
 8000b5c:	1af6      	subs	r6, r6, r3
 8000b5e:	40b7      	lsls	r7, r6
 8000b60:	46b9      	mov	r9, r7
 8000b62:	0017      	movs	r7, r2
 8000b64:	46b2      	mov	sl, r6
 8000b66:	40df      	lsrs	r7, r3
 8000b68:	464e      	mov	r6, r9
 8000b6a:	433e      	orrs	r6, r7
 8000b6c:	0037      	movs	r7, r6
 8000b6e:	4656      	mov	r6, sl
 8000b70:	40b2      	lsls	r2, r6
 8000b72:	1e56      	subs	r6, r2, #1
 8000b74:	41b2      	sbcs	r2, r6
 8000b76:	4317      	orrs	r7, r2
 8000b78:	4642      	mov	r2, r8
 8000b7a:	40da      	lsrs	r2, r3
 8000b7c:	1889      	adds	r1, r1, r2
 8000b7e:	e6ae      	b.n	80008de <__aeabi_dadd+0x15a>
 8000b80:	000007ff 	.word	0x000007ff
 8000b84:	ff7fffff 	.word	0xff7fffff
 8000b88:	800fffff 	.word	0x800fffff
 8000b8c:	2620      	movs	r6, #32
 8000b8e:	4647      	mov	r7, r8
 8000b90:	1af6      	subs	r6, r6, r3
 8000b92:	40b7      	lsls	r7, r6
 8000b94:	46b9      	mov	r9, r7
 8000b96:	0017      	movs	r7, r2
 8000b98:	46b2      	mov	sl, r6
 8000b9a:	40df      	lsrs	r7, r3
 8000b9c:	464e      	mov	r6, r9
 8000b9e:	433e      	orrs	r6, r7
 8000ba0:	0037      	movs	r7, r6
 8000ba2:	4656      	mov	r6, sl
 8000ba4:	40b2      	lsls	r2, r6
 8000ba6:	1e56      	subs	r6, r2, #1
 8000ba8:	41b2      	sbcs	r2, r6
 8000baa:	4317      	orrs	r7, r2
 8000bac:	4642      	mov	r2, r8
 8000bae:	40da      	lsrs	r2, r3
 8000bb0:	1a89      	subs	r1, r1, r2
 8000bb2:	e799      	b.n	8000ae8 <__aeabi_dadd+0x364>
 8000bb4:	4c7f      	ldr	r4, [pc, #508]	; (8000db4 <__aeabi_dadd+0x630>)
 8000bb6:	42a6      	cmp	r6, r4
 8000bb8:	d05b      	beq.n	8000c72 <__aeabi_dadd+0x4ee>
 8000bba:	2480      	movs	r4, #128	; 0x80
 8000bbc:	0424      	lsls	r4, r4, #16
 8000bbe:	425b      	negs	r3, r3
 8000bc0:	4321      	orrs	r1, r4
 8000bc2:	e727      	b.n	8000a14 <__aeabi_dadd+0x290>
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d10c      	bne.n	8000be2 <__aeabi_dadd+0x45e>
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d100      	bne.n	8000bce <__aeabi_dadd+0x44a>
 8000bcc:	e0cb      	b.n	8000d66 <__aeabi_dadd+0x5e2>
 8000bce:	4664      	mov	r4, ip
 8000bd0:	0039      	movs	r1, r7
 8000bd2:	0010      	movs	r0, r2
 8000bd4:	4d77      	ldr	r5, [pc, #476]	; (8000db4 <__aeabi_dadd+0x630>)
 8000bd6:	e6d7      	b.n	8000988 <__aeabi_dadd+0x204>
 8000bd8:	4f76      	ldr	r7, [pc, #472]	; (8000db4 <__aeabi_dadd+0x630>)
 8000bda:	42bb      	cmp	r3, r7
 8000bdc:	d018      	beq.n	8000c10 <__aeabi_dadd+0x48c>
 8000bde:	0033      	movs	r3, r6
 8000be0:	e675      	b.n	80008ce <__aeabi_dadd+0x14a>
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d014      	beq.n	8000c10 <__aeabi_dadd+0x48c>
 8000be6:	074b      	lsls	r3, r1, #29
 8000be8:	08c0      	lsrs	r0, r0, #3
 8000bea:	4318      	orrs	r0, r3
 8000bec:	2380      	movs	r3, #128	; 0x80
 8000bee:	08c9      	lsrs	r1, r1, #3
 8000bf0:	031b      	lsls	r3, r3, #12
 8000bf2:	4219      	tst	r1, r3
 8000bf4:	d007      	beq.n	8000c06 <__aeabi_dadd+0x482>
 8000bf6:	08fc      	lsrs	r4, r7, #3
 8000bf8:	421c      	tst	r4, r3
 8000bfa:	d104      	bne.n	8000c06 <__aeabi_dadd+0x482>
 8000bfc:	0779      	lsls	r1, r7, #29
 8000bfe:	08d0      	lsrs	r0, r2, #3
 8000c00:	4308      	orrs	r0, r1
 8000c02:	46e1      	mov	r9, ip
 8000c04:	0021      	movs	r1, r4
 8000c06:	464c      	mov	r4, r9
 8000c08:	0f42      	lsrs	r2, r0, #29
 8000c0a:	00c9      	lsls	r1, r1, #3
 8000c0c:	4311      	orrs	r1, r2
 8000c0e:	00c0      	lsls	r0, r0, #3
 8000c10:	4d68      	ldr	r5, [pc, #416]	; (8000db4 <__aeabi_dadd+0x630>)
 8000c12:	e6b9      	b.n	8000988 <__aeabi_dadd+0x204>
 8000c14:	001d      	movs	r5, r3
 8000c16:	2200      	movs	r2, #0
 8000c18:	2300      	movs	r3, #0
 8000c1a:	e6c0      	b.n	800099e <__aeabi_dadd+0x21a>
 8000c1c:	2d00      	cmp	r5, #0
 8000c1e:	d15b      	bne.n	8000cd8 <__aeabi_dadd+0x554>
 8000c20:	000d      	movs	r5, r1
 8000c22:	4305      	orrs	r5, r0
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x4a4>
 8000c26:	e6e2      	b.n	80009ee <__aeabi_dadd+0x26a>
 8000c28:	1c5d      	adds	r5, r3, #1
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_dadd+0x4aa>
 8000c2c:	e0b0      	b.n	8000d90 <__aeabi_dadd+0x60c>
 8000c2e:	4d61      	ldr	r5, [pc, #388]	; (8000db4 <__aeabi_dadd+0x630>)
 8000c30:	42ae      	cmp	r6, r5
 8000c32:	d01f      	beq.n	8000c74 <__aeabi_dadd+0x4f0>
 8000c34:	43db      	mvns	r3, r3
 8000c36:	2b38      	cmp	r3, #56	; 0x38
 8000c38:	dc71      	bgt.n	8000d1e <__aeabi_dadd+0x59a>
 8000c3a:	2b1f      	cmp	r3, #31
 8000c3c:	dd00      	ble.n	8000c40 <__aeabi_dadd+0x4bc>
 8000c3e:	e096      	b.n	8000d6e <__aeabi_dadd+0x5ea>
 8000c40:	2520      	movs	r5, #32
 8000c42:	000f      	movs	r7, r1
 8000c44:	1aed      	subs	r5, r5, r3
 8000c46:	40af      	lsls	r7, r5
 8000c48:	46b9      	mov	r9, r7
 8000c4a:	0007      	movs	r7, r0
 8000c4c:	46aa      	mov	sl, r5
 8000c4e:	40df      	lsrs	r7, r3
 8000c50:	464d      	mov	r5, r9
 8000c52:	433d      	orrs	r5, r7
 8000c54:	002f      	movs	r7, r5
 8000c56:	4655      	mov	r5, sl
 8000c58:	40a8      	lsls	r0, r5
 8000c5a:	40d9      	lsrs	r1, r3
 8000c5c:	1e45      	subs	r5, r0, #1
 8000c5e:	41a8      	sbcs	r0, r5
 8000c60:	4488      	add	r8, r1
 8000c62:	4307      	orrs	r7, r0
 8000c64:	18bf      	adds	r7, r7, r2
 8000c66:	4297      	cmp	r7, r2
 8000c68:	4192      	sbcs	r2, r2
 8000c6a:	4251      	negs	r1, r2
 8000c6c:	4441      	add	r1, r8
 8000c6e:	0035      	movs	r5, r6
 8000c70:	e63a      	b.n	80008e8 <__aeabi_dadd+0x164>
 8000c72:	4664      	mov	r4, ip
 8000c74:	0035      	movs	r5, r6
 8000c76:	4641      	mov	r1, r8
 8000c78:	0010      	movs	r0, r2
 8000c7a:	e685      	b.n	8000988 <__aeabi_dadd+0x204>
 8000c7c:	000b      	movs	r3, r1
 8000c7e:	4303      	orrs	r3, r0
 8000c80:	2d00      	cmp	r5, #0
 8000c82:	d000      	beq.n	8000c86 <__aeabi_dadd+0x502>
 8000c84:	e663      	b.n	800094e <__aeabi_dadd+0x1ca>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d0f5      	beq.n	8000c76 <__aeabi_dadd+0x4f2>
 8000c8a:	4643      	mov	r3, r8
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	d100      	bne.n	8000c92 <__aeabi_dadd+0x50e>
 8000c90:	e67a      	b.n	8000988 <__aeabi_dadd+0x204>
 8000c92:	1887      	adds	r7, r0, r2
 8000c94:	4287      	cmp	r7, r0
 8000c96:	4180      	sbcs	r0, r0
 8000c98:	2207      	movs	r2, #7
 8000c9a:	4441      	add	r1, r8
 8000c9c:	4240      	negs	r0, r0
 8000c9e:	1809      	adds	r1, r1, r0
 8000ca0:	403a      	ands	r2, r7
 8000ca2:	020b      	lsls	r3, r1, #8
 8000ca4:	d400      	bmi.n	8000ca8 <__aeabi_dadd+0x524>
 8000ca6:	e6d5      	b.n	8000a54 <__aeabi_dadd+0x2d0>
 8000ca8:	4b43      	ldr	r3, [pc, #268]	; (8000db8 <__aeabi_dadd+0x634>)
 8000caa:	3501      	adds	r5, #1
 8000cac:	4019      	ands	r1, r3
 8000cae:	e5c9      	b.n	8000844 <__aeabi_dadd+0xc0>
 8000cb0:	0038      	movs	r0, r7
 8000cb2:	e669      	b.n	8000988 <__aeabi_dadd+0x204>
 8000cb4:	001e      	movs	r6, r3
 8000cb6:	4647      	mov	r7, r8
 8000cb8:	3e20      	subs	r6, #32
 8000cba:	40f7      	lsrs	r7, r6
 8000cbc:	46bc      	mov	ip, r7
 8000cbe:	2b20      	cmp	r3, #32
 8000cc0:	d004      	beq.n	8000ccc <__aeabi_dadd+0x548>
 8000cc2:	2640      	movs	r6, #64	; 0x40
 8000cc4:	1af3      	subs	r3, r6, r3
 8000cc6:	4646      	mov	r6, r8
 8000cc8:	409e      	lsls	r6, r3
 8000cca:	4332      	orrs	r2, r6
 8000ccc:	0017      	movs	r7, r2
 8000cce:	4663      	mov	r3, ip
 8000cd0:	1e7a      	subs	r2, r7, #1
 8000cd2:	4197      	sbcs	r7, r2
 8000cd4:	431f      	orrs	r7, r3
 8000cd6:	e602      	b.n	80008de <__aeabi_dadd+0x15a>
 8000cd8:	4d36      	ldr	r5, [pc, #216]	; (8000db4 <__aeabi_dadd+0x630>)
 8000cda:	42ae      	cmp	r6, r5
 8000cdc:	d0ca      	beq.n	8000c74 <__aeabi_dadd+0x4f0>
 8000cde:	2580      	movs	r5, #128	; 0x80
 8000ce0:	042d      	lsls	r5, r5, #16
 8000ce2:	425b      	negs	r3, r3
 8000ce4:	4329      	orrs	r1, r5
 8000ce6:	e7a6      	b.n	8000c36 <__aeabi_dadd+0x4b2>
 8000ce8:	4308      	orrs	r0, r1
 8000cea:	1e41      	subs	r1, r0, #1
 8000cec:	4188      	sbcs	r0, r1
 8000cee:	e6a6      	b.n	8000a3e <__aeabi_dadd+0x2ba>
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_dadd+0x572>
 8000cf4:	e648      	b.n	8000988 <__aeabi_dadd+0x204>
 8000cf6:	1a87      	subs	r7, r0, r2
 8000cf8:	4643      	mov	r3, r8
 8000cfa:	42b8      	cmp	r0, r7
 8000cfc:	41b6      	sbcs	r6, r6
 8000cfe:	1acb      	subs	r3, r1, r3
 8000d00:	4276      	negs	r6, r6
 8000d02:	1b9e      	subs	r6, r3, r6
 8000d04:	0233      	lsls	r3, r6, #8
 8000d06:	d54b      	bpl.n	8000da0 <__aeabi_dadd+0x61c>
 8000d08:	1a17      	subs	r7, r2, r0
 8000d0a:	4643      	mov	r3, r8
 8000d0c:	42ba      	cmp	r2, r7
 8000d0e:	4192      	sbcs	r2, r2
 8000d10:	1a59      	subs	r1, r3, r1
 8000d12:	4252      	negs	r2, r2
 8000d14:	1a89      	subs	r1, r1, r2
 8000d16:	2207      	movs	r2, #7
 8000d18:	4664      	mov	r4, ip
 8000d1a:	403a      	ands	r2, r7
 8000d1c:	e592      	b.n	8000844 <__aeabi_dadd+0xc0>
 8000d1e:	4301      	orrs	r1, r0
 8000d20:	000f      	movs	r7, r1
 8000d22:	1e79      	subs	r1, r7, #1
 8000d24:	418f      	sbcs	r7, r1
 8000d26:	e79d      	b.n	8000c64 <__aeabi_dadd+0x4e0>
 8000d28:	001c      	movs	r4, r3
 8000d2a:	000f      	movs	r7, r1
 8000d2c:	3c20      	subs	r4, #32
 8000d2e:	40e7      	lsrs	r7, r4
 8000d30:	2b20      	cmp	r3, #32
 8000d32:	d003      	beq.n	8000d3c <__aeabi_dadd+0x5b8>
 8000d34:	2440      	movs	r4, #64	; 0x40
 8000d36:	1ae3      	subs	r3, r4, r3
 8000d38:	4099      	lsls	r1, r3
 8000d3a:	4308      	orrs	r0, r1
 8000d3c:	1e41      	subs	r1, r0, #1
 8000d3e:	4188      	sbcs	r0, r1
 8000d40:	4338      	orrs	r0, r7
 8000d42:	e67c      	b.n	8000a3e <__aeabi_dadd+0x2ba>
 8000d44:	2200      	movs	r2, #0
 8000d46:	2400      	movs	r4, #0
 8000d48:	e625      	b.n	8000996 <__aeabi_dadd+0x212>
 8000d4a:	1a17      	subs	r7, r2, r0
 8000d4c:	4643      	mov	r3, r8
 8000d4e:	42ba      	cmp	r2, r7
 8000d50:	4192      	sbcs	r2, r2
 8000d52:	1a59      	subs	r1, r3, r1
 8000d54:	4252      	negs	r2, r2
 8000d56:	1a89      	subs	r1, r1, r2
 8000d58:	4664      	mov	r4, ip
 8000d5a:	0035      	movs	r5, r6
 8000d5c:	e543      	b.n	80007e6 <__aeabi_dadd+0x62>
 8000d5e:	4641      	mov	r1, r8
 8000d60:	0010      	movs	r0, r2
 8000d62:	4d14      	ldr	r5, [pc, #80]	; (8000db4 <__aeabi_dadd+0x630>)
 8000d64:	e610      	b.n	8000988 <__aeabi_dadd+0x204>
 8000d66:	2280      	movs	r2, #128	; 0x80
 8000d68:	2400      	movs	r4, #0
 8000d6a:	0312      	lsls	r2, r2, #12
 8000d6c:	e680      	b.n	8000a70 <__aeabi_dadd+0x2ec>
 8000d6e:	001d      	movs	r5, r3
 8000d70:	000f      	movs	r7, r1
 8000d72:	3d20      	subs	r5, #32
 8000d74:	40ef      	lsrs	r7, r5
 8000d76:	46bc      	mov	ip, r7
 8000d78:	2b20      	cmp	r3, #32
 8000d7a:	d003      	beq.n	8000d84 <__aeabi_dadd+0x600>
 8000d7c:	2540      	movs	r5, #64	; 0x40
 8000d7e:	1aeb      	subs	r3, r5, r3
 8000d80:	4099      	lsls	r1, r3
 8000d82:	4308      	orrs	r0, r1
 8000d84:	0007      	movs	r7, r0
 8000d86:	4663      	mov	r3, ip
 8000d88:	1e78      	subs	r0, r7, #1
 8000d8a:	4187      	sbcs	r7, r0
 8000d8c:	431f      	orrs	r7, r3
 8000d8e:	e769      	b.n	8000c64 <__aeabi_dadd+0x4e0>
 8000d90:	1887      	adds	r7, r0, r2
 8000d92:	4297      	cmp	r7, r2
 8000d94:	419b      	sbcs	r3, r3
 8000d96:	4441      	add	r1, r8
 8000d98:	425b      	negs	r3, r3
 8000d9a:	18c9      	adds	r1, r1, r3
 8000d9c:	0035      	movs	r5, r6
 8000d9e:	e5a3      	b.n	80008e8 <__aeabi_dadd+0x164>
 8000da0:	003b      	movs	r3, r7
 8000da2:	4333      	orrs	r3, r6
 8000da4:	d0ce      	beq.n	8000d44 <__aeabi_dadd+0x5c0>
 8000da6:	2207      	movs	r2, #7
 8000da8:	0031      	movs	r1, r6
 8000daa:	403a      	ands	r2, r7
 8000dac:	e652      	b.n	8000a54 <__aeabi_dadd+0x2d0>
 8000dae:	2300      	movs	r3, #0
 8000db0:	001a      	movs	r2, r3
 8000db2:	e5f4      	b.n	800099e <__aeabi_dadd+0x21a>
 8000db4:	000007ff 	.word	0x000007ff
 8000db8:	ff7fffff 	.word	0xff7fffff

08000dbc <__aeabi_ddiv>:
 8000dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dbe:	4657      	mov	r7, sl
 8000dc0:	46de      	mov	lr, fp
 8000dc2:	464e      	mov	r6, r9
 8000dc4:	4645      	mov	r5, r8
 8000dc6:	b5e0      	push	{r5, r6, r7, lr}
 8000dc8:	4683      	mov	fp, r0
 8000dca:	0007      	movs	r7, r0
 8000dcc:	030e      	lsls	r6, r1, #12
 8000dce:	0048      	lsls	r0, r1, #1
 8000dd0:	b085      	sub	sp, #20
 8000dd2:	4692      	mov	sl, r2
 8000dd4:	001c      	movs	r4, r3
 8000dd6:	0b36      	lsrs	r6, r6, #12
 8000dd8:	0d40      	lsrs	r0, r0, #21
 8000dda:	0fcd      	lsrs	r5, r1, #31
 8000ddc:	2800      	cmp	r0, #0
 8000dde:	d100      	bne.n	8000de2 <__aeabi_ddiv+0x26>
 8000de0:	e09d      	b.n	8000f1e <__aeabi_ddiv+0x162>
 8000de2:	4b95      	ldr	r3, [pc, #596]	; (8001038 <__aeabi_ddiv+0x27c>)
 8000de4:	4298      	cmp	r0, r3
 8000de6:	d039      	beq.n	8000e5c <__aeabi_ddiv+0xa0>
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	00f6      	lsls	r6, r6, #3
 8000dec:	041b      	lsls	r3, r3, #16
 8000dee:	431e      	orrs	r6, r3
 8000df0:	4a92      	ldr	r2, [pc, #584]	; (800103c <__aeabi_ddiv+0x280>)
 8000df2:	0f7b      	lsrs	r3, r7, #29
 8000df4:	4333      	orrs	r3, r6
 8000df6:	4699      	mov	r9, r3
 8000df8:	4694      	mov	ip, r2
 8000dfa:	0003      	movs	r3, r0
 8000dfc:	4463      	add	r3, ip
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2300      	movs	r3, #0
 8000e02:	2600      	movs	r6, #0
 8000e04:	00ff      	lsls	r7, r7, #3
 8000e06:	9302      	str	r3, [sp, #8]
 8000e08:	0323      	lsls	r3, r4, #12
 8000e0a:	0b1b      	lsrs	r3, r3, #12
 8000e0c:	4698      	mov	r8, r3
 8000e0e:	0063      	lsls	r3, r4, #1
 8000e10:	0fe4      	lsrs	r4, r4, #31
 8000e12:	4652      	mov	r2, sl
 8000e14:	0d5b      	lsrs	r3, r3, #21
 8000e16:	9401      	str	r4, [sp, #4]
 8000e18:	d100      	bne.n	8000e1c <__aeabi_ddiv+0x60>
 8000e1a:	e0b3      	b.n	8000f84 <__aeabi_ddiv+0x1c8>
 8000e1c:	4986      	ldr	r1, [pc, #536]	; (8001038 <__aeabi_ddiv+0x27c>)
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d100      	bne.n	8000e24 <__aeabi_ddiv+0x68>
 8000e22:	e09e      	b.n	8000f62 <__aeabi_ddiv+0x1a6>
 8000e24:	4642      	mov	r2, r8
 8000e26:	00d1      	lsls	r1, r2, #3
 8000e28:	2280      	movs	r2, #128	; 0x80
 8000e2a:	0412      	lsls	r2, r2, #16
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	4651      	mov	r1, sl
 8000e30:	0f49      	lsrs	r1, r1, #29
 8000e32:	4311      	orrs	r1, r2
 8000e34:	468b      	mov	fp, r1
 8000e36:	4981      	ldr	r1, [pc, #516]	; (800103c <__aeabi_ddiv+0x280>)
 8000e38:	4652      	mov	r2, sl
 8000e3a:	468c      	mov	ip, r1
 8000e3c:	9900      	ldr	r1, [sp, #0]
 8000e3e:	4463      	add	r3, ip
 8000e40:	1acb      	subs	r3, r1, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	00d2      	lsls	r2, r2, #3
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	002b      	movs	r3, r5
 8000e4a:	4063      	eors	r3, r4
 8000e4c:	469a      	mov	sl, r3
 8000e4e:	2e0f      	cmp	r6, #15
 8000e50:	d900      	bls.n	8000e54 <__aeabi_ddiv+0x98>
 8000e52:	e105      	b.n	8001060 <__aeabi_ddiv+0x2a4>
 8000e54:	4b7a      	ldr	r3, [pc, #488]	; (8001040 <__aeabi_ddiv+0x284>)
 8000e56:	00b6      	lsls	r6, r6, #2
 8000e58:	599b      	ldr	r3, [r3, r6]
 8000e5a:	469f      	mov	pc, r3
 8000e5c:	465b      	mov	r3, fp
 8000e5e:	4333      	orrs	r3, r6
 8000e60:	4699      	mov	r9, r3
 8000e62:	d000      	beq.n	8000e66 <__aeabi_ddiv+0xaa>
 8000e64:	e0b8      	b.n	8000fd8 <__aeabi_ddiv+0x21c>
 8000e66:	2302      	movs	r3, #2
 8000e68:	2608      	movs	r6, #8
 8000e6a:	2700      	movs	r7, #0
 8000e6c:	9000      	str	r0, [sp, #0]
 8000e6e:	9302      	str	r3, [sp, #8]
 8000e70:	e7ca      	b.n	8000e08 <__aeabi_ddiv+0x4c>
 8000e72:	46cb      	mov	fp, r9
 8000e74:	003a      	movs	r2, r7
 8000e76:	9902      	ldr	r1, [sp, #8]
 8000e78:	9501      	str	r5, [sp, #4]
 8000e7a:	9b01      	ldr	r3, [sp, #4]
 8000e7c:	469a      	mov	sl, r3
 8000e7e:	2902      	cmp	r1, #2
 8000e80:	d027      	beq.n	8000ed2 <__aeabi_ddiv+0x116>
 8000e82:	2903      	cmp	r1, #3
 8000e84:	d100      	bne.n	8000e88 <__aeabi_ddiv+0xcc>
 8000e86:	e280      	b.n	800138a <__aeabi_ddiv+0x5ce>
 8000e88:	2901      	cmp	r1, #1
 8000e8a:	d044      	beq.n	8000f16 <__aeabi_ddiv+0x15a>
 8000e8c:	496d      	ldr	r1, [pc, #436]	; (8001044 <__aeabi_ddiv+0x288>)
 8000e8e:	9b00      	ldr	r3, [sp, #0]
 8000e90:	468c      	mov	ip, r1
 8000e92:	4463      	add	r3, ip
 8000e94:	001c      	movs	r4, r3
 8000e96:	2c00      	cmp	r4, #0
 8000e98:	dd38      	ble.n	8000f0c <__aeabi_ddiv+0x150>
 8000e9a:	0753      	lsls	r3, r2, #29
 8000e9c:	d000      	beq.n	8000ea0 <__aeabi_ddiv+0xe4>
 8000e9e:	e213      	b.n	80012c8 <__aeabi_ddiv+0x50c>
 8000ea0:	08d2      	lsrs	r2, r2, #3
 8000ea2:	465b      	mov	r3, fp
 8000ea4:	01db      	lsls	r3, r3, #7
 8000ea6:	d509      	bpl.n	8000ebc <__aeabi_ddiv+0x100>
 8000ea8:	4659      	mov	r1, fp
 8000eaa:	4b67      	ldr	r3, [pc, #412]	; (8001048 <__aeabi_ddiv+0x28c>)
 8000eac:	4019      	ands	r1, r3
 8000eae:	468b      	mov	fp, r1
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	00c9      	lsls	r1, r1, #3
 8000eb4:	468c      	mov	ip, r1
 8000eb6:	9b00      	ldr	r3, [sp, #0]
 8000eb8:	4463      	add	r3, ip
 8000eba:	001c      	movs	r4, r3
 8000ebc:	4b63      	ldr	r3, [pc, #396]	; (800104c <__aeabi_ddiv+0x290>)
 8000ebe:	429c      	cmp	r4, r3
 8000ec0:	dc07      	bgt.n	8000ed2 <__aeabi_ddiv+0x116>
 8000ec2:	465b      	mov	r3, fp
 8000ec4:	0564      	lsls	r4, r4, #21
 8000ec6:	075f      	lsls	r7, r3, #29
 8000ec8:	025b      	lsls	r3, r3, #9
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	0b1b      	lsrs	r3, r3, #12
 8000ece:	0d62      	lsrs	r2, r4, #21
 8000ed0:	e002      	b.n	8000ed8 <__aeabi_ddiv+0x11c>
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	4a58      	ldr	r2, [pc, #352]	; (8001038 <__aeabi_ddiv+0x27c>)
 8000ed8:	2100      	movs	r1, #0
 8000eda:	031b      	lsls	r3, r3, #12
 8000edc:	0b1c      	lsrs	r4, r3, #12
 8000ede:	0d0b      	lsrs	r3, r1, #20
 8000ee0:	051b      	lsls	r3, r3, #20
 8000ee2:	4323      	orrs	r3, r4
 8000ee4:	0514      	lsls	r4, r2, #20
 8000ee6:	4a5a      	ldr	r2, [pc, #360]	; (8001050 <__aeabi_ddiv+0x294>)
 8000ee8:	0038      	movs	r0, r7
 8000eea:	4013      	ands	r3, r2
 8000eec:	431c      	orrs	r4, r3
 8000eee:	4653      	mov	r3, sl
 8000ef0:	0064      	lsls	r4, r4, #1
 8000ef2:	07db      	lsls	r3, r3, #31
 8000ef4:	0864      	lsrs	r4, r4, #1
 8000ef6:	431c      	orrs	r4, r3
 8000ef8:	0021      	movs	r1, r4
 8000efa:	b005      	add	sp, #20
 8000efc:	bc3c      	pop	{r2, r3, r4, r5}
 8000efe:	4690      	mov	r8, r2
 8000f00:	4699      	mov	r9, r3
 8000f02:	46a2      	mov	sl, r4
 8000f04:	46ab      	mov	fp, r5
 8000f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4252      	negs	r2, r2
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	1b1b      	subs	r3, r3, r4
 8000f10:	2b38      	cmp	r3, #56	; 0x38
 8000f12:	dc00      	bgt.n	8000f16 <__aeabi_ddiv+0x15a>
 8000f14:	e1ad      	b.n	8001272 <__aeabi_ddiv+0x4b6>
 8000f16:	2200      	movs	r2, #0
 8000f18:	2300      	movs	r3, #0
 8000f1a:	2700      	movs	r7, #0
 8000f1c:	e7dc      	b.n	8000ed8 <__aeabi_ddiv+0x11c>
 8000f1e:	465b      	mov	r3, fp
 8000f20:	4333      	orrs	r3, r6
 8000f22:	4699      	mov	r9, r3
 8000f24:	d05e      	beq.n	8000fe4 <__aeabi_ddiv+0x228>
 8000f26:	2e00      	cmp	r6, #0
 8000f28:	d100      	bne.n	8000f2c <__aeabi_ddiv+0x170>
 8000f2a:	e18a      	b.n	8001242 <__aeabi_ddiv+0x486>
 8000f2c:	0030      	movs	r0, r6
 8000f2e:	f001 fa9d 	bl	800246c <__clzsi2>
 8000f32:	0003      	movs	r3, r0
 8000f34:	3b0b      	subs	r3, #11
 8000f36:	2b1c      	cmp	r3, #28
 8000f38:	dd00      	ble.n	8000f3c <__aeabi_ddiv+0x180>
 8000f3a:	e17b      	b.n	8001234 <__aeabi_ddiv+0x478>
 8000f3c:	221d      	movs	r2, #29
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	465a      	mov	r2, fp
 8000f42:	0001      	movs	r1, r0
 8000f44:	40da      	lsrs	r2, r3
 8000f46:	3908      	subs	r1, #8
 8000f48:	408e      	lsls	r6, r1
 8000f4a:	0013      	movs	r3, r2
 8000f4c:	465f      	mov	r7, fp
 8000f4e:	4333      	orrs	r3, r6
 8000f50:	4699      	mov	r9, r3
 8000f52:	408f      	lsls	r7, r1
 8000f54:	4b3f      	ldr	r3, [pc, #252]	; (8001054 <__aeabi_ddiv+0x298>)
 8000f56:	2600      	movs	r6, #0
 8000f58:	1a1b      	subs	r3, r3, r0
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	9302      	str	r3, [sp, #8]
 8000f60:	e752      	b.n	8000e08 <__aeabi_ddiv+0x4c>
 8000f62:	4641      	mov	r1, r8
 8000f64:	4653      	mov	r3, sl
 8000f66:	430b      	orrs	r3, r1
 8000f68:	493b      	ldr	r1, [pc, #236]	; (8001058 <__aeabi_ddiv+0x29c>)
 8000f6a:	469b      	mov	fp, r3
 8000f6c:	468c      	mov	ip, r1
 8000f6e:	9b00      	ldr	r3, [sp, #0]
 8000f70:	4463      	add	r3, ip
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	465b      	mov	r3, fp
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d13b      	bne.n	8000ff2 <__aeabi_ddiv+0x236>
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	431e      	orrs	r6, r3
 8000f80:	2102      	movs	r1, #2
 8000f82:	e761      	b.n	8000e48 <__aeabi_ddiv+0x8c>
 8000f84:	4643      	mov	r3, r8
 8000f86:	4313      	orrs	r3, r2
 8000f88:	469b      	mov	fp, r3
 8000f8a:	d037      	beq.n	8000ffc <__aeabi_ddiv+0x240>
 8000f8c:	4643      	mov	r3, r8
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d100      	bne.n	8000f94 <__aeabi_ddiv+0x1d8>
 8000f92:	e162      	b.n	800125a <__aeabi_ddiv+0x49e>
 8000f94:	4640      	mov	r0, r8
 8000f96:	f001 fa69 	bl	800246c <__clzsi2>
 8000f9a:	0003      	movs	r3, r0
 8000f9c:	3b0b      	subs	r3, #11
 8000f9e:	2b1c      	cmp	r3, #28
 8000fa0:	dd00      	ble.n	8000fa4 <__aeabi_ddiv+0x1e8>
 8000fa2:	e153      	b.n	800124c <__aeabi_ddiv+0x490>
 8000fa4:	0002      	movs	r2, r0
 8000fa6:	4641      	mov	r1, r8
 8000fa8:	3a08      	subs	r2, #8
 8000faa:	4091      	lsls	r1, r2
 8000fac:	4688      	mov	r8, r1
 8000fae:	211d      	movs	r1, #29
 8000fb0:	1acb      	subs	r3, r1, r3
 8000fb2:	4651      	mov	r1, sl
 8000fb4:	40d9      	lsrs	r1, r3
 8000fb6:	000b      	movs	r3, r1
 8000fb8:	4641      	mov	r1, r8
 8000fba:	430b      	orrs	r3, r1
 8000fbc:	469b      	mov	fp, r3
 8000fbe:	4653      	mov	r3, sl
 8000fc0:	4093      	lsls	r3, r2
 8000fc2:	001a      	movs	r2, r3
 8000fc4:	9b00      	ldr	r3, [sp, #0]
 8000fc6:	4925      	ldr	r1, [pc, #148]	; (800105c <__aeabi_ddiv+0x2a0>)
 8000fc8:	469c      	mov	ip, r3
 8000fca:	4460      	add	r0, ip
 8000fcc:	0003      	movs	r3, r0
 8000fce:	468c      	mov	ip, r1
 8000fd0:	4463      	add	r3, ip
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	e737      	b.n	8000e48 <__aeabi_ddiv+0x8c>
 8000fd8:	2303      	movs	r3, #3
 8000fda:	46b1      	mov	r9, r6
 8000fdc:	9000      	str	r0, [sp, #0]
 8000fde:	260c      	movs	r6, #12
 8000fe0:	9302      	str	r3, [sp, #8]
 8000fe2:	e711      	b.n	8000e08 <__aeabi_ddiv+0x4c>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	2604      	movs	r6, #4
 8000fec:	2700      	movs	r7, #0
 8000fee:	9302      	str	r3, [sp, #8]
 8000ff0:	e70a      	b.n	8000e08 <__aeabi_ddiv+0x4c>
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	46c3      	mov	fp, r8
 8000ff6:	431e      	orrs	r6, r3
 8000ff8:	2103      	movs	r1, #3
 8000ffa:	e725      	b.n	8000e48 <__aeabi_ddiv+0x8c>
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	431e      	orrs	r6, r3
 8001000:	2200      	movs	r2, #0
 8001002:	2101      	movs	r1, #1
 8001004:	e720      	b.n	8000e48 <__aeabi_ddiv+0x8c>
 8001006:	2300      	movs	r3, #0
 8001008:	469a      	mov	sl, r3
 800100a:	2380      	movs	r3, #128	; 0x80
 800100c:	2700      	movs	r7, #0
 800100e:	031b      	lsls	r3, r3, #12
 8001010:	4a09      	ldr	r2, [pc, #36]	; (8001038 <__aeabi_ddiv+0x27c>)
 8001012:	e761      	b.n	8000ed8 <__aeabi_ddiv+0x11c>
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	4649      	mov	r1, r9
 8001018:	031b      	lsls	r3, r3, #12
 800101a:	4219      	tst	r1, r3
 800101c:	d100      	bne.n	8001020 <__aeabi_ddiv+0x264>
 800101e:	e0e2      	b.n	80011e6 <__aeabi_ddiv+0x42a>
 8001020:	4659      	mov	r1, fp
 8001022:	4219      	tst	r1, r3
 8001024:	d000      	beq.n	8001028 <__aeabi_ddiv+0x26c>
 8001026:	e0de      	b.n	80011e6 <__aeabi_ddiv+0x42a>
 8001028:	430b      	orrs	r3, r1
 800102a:	031b      	lsls	r3, r3, #12
 800102c:	0017      	movs	r7, r2
 800102e:	0b1b      	lsrs	r3, r3, #12
 8001030:	46a2      	mov	sl, r4
 8001032:	4a01      	ldr	r2, [pc, #4]	; (8001038 <__aeabi_ddiv+0x27c>)
 8001034:	e750      	b.n	8000ed8 <__aeabi_ddiv+0x11c>
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	000007ff 	.word	0x000007ff
 800103c:	fffffc01 	.word	0xfffffc01
 8001040:	0800a700 	.word	0x0800a700
 8001044:	000003ff 	.word	0x000003ff
 8001048:	feffffff 	.word	0xfeffffff
 800104c:	000007fe 	.word	0x000007fe
 8001050:	800fffff 	.word	0x800fffff
 8001054:	fffffc0d 	.word	0xfffffc0d
 8001058:	fffff801 	.word	0xfffff801
 800105c:	000003f3 	.word	0x000003f3
 8001060:	45d9      	cmp	r9, fp
 8001062:	d900      	bls.n	8001066 <__aeabi_ddiv+0x2aa>
 8001064:	e0cb      	b.n	80011fe <__aeabi_ddiv+0x442>
 8001066:	d100      	bne.n	800106a <__aeabi_ddiv+0x2ae>
 8001068:	e0c6      	b.n	80011f8 <__aeabi_ddiv+0x43c>
 800106a:	003c      	movs	r4, r7
 800106c:	4648      	mov	r0, r9
 800106e:	2700      	movs	r7, #0
 8001070:	9b00      	ldr	r3, [sp, #0]
 8001072:	3b01      	subs	r3, #1
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	465b      	mov	r3, fp
 8001078:	0e16      	lsrs	r6, r2, #24
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	431e      	orrs	r6, r3
 800107e:	0213      	lsls	r3, r2, #8
 8001080:	4698      	mov	r8, r3
 8001082:	0433      	lsls	r3, r6, #16
 8001084:	0c1b      	lsrs	r3, r3, #16
 8001086:	4699      	mov	r9, r3
 8001088:	0c31      	lsrs	r1, r6, #16
 800108a:	9101      	str	r1, [sp, #4]
 800108c:	f7ff f8d2 	bl	8000234 <__aeabi_uidivmod>
 8001090:	464a      	mov	r2, r9
 8001092:	4342      	muls	r2, r0
 8001094:	040b      	lsls	r3, r1, #16
 8001096:	0c21      	lsrs	r1, r4, #16
 8001098:	0005      	movs	r5, r0
 800109a:	4319      	orrs	r1, r3
 800109c:	428a      	cmp	r2, r1
 800109e:	d907      	bls.n	80010b0 <__aeabi_ddiv+0x2f4>
 80010a0:	1989      	adds	r1, r1, r6
 80010a2:	3d01      	subs	r5, #1
 80010a4:	428e      	cmp	r6, r1
 80010a6:	d803      	bhi.n	80010b0 <__aeabi_ddiv+0x2f4>
 80010a8:	428a      	cmp	r2, r1
 80010aa:	d901      	bls.n	80010b0 <__aeabi_ddiv+0x2f4>
 80010ac:	1e85      	subs	r5, r0, #2
 80010ae:	1989      	adds	r1, r1, r6
 80010b0:	1a88      	subs	r0, r1, r2
 80010b2:	9901      	ldr	r1, [sp, #4]
 80010b4:	f7ff f8be 	bl	8000234 <__aeabi_uidivmod>
 80010b8:	0409      	lsls	r1, r1, #16
 80010ba:	468c      	mov	ip, r1
 80010bc:	464a      	mov	r2, r9
 80010be:	0421      	lsls	r1, r4, #16
 80010c0:	4664      	mov	r4, ip
 80010c2:	4342      	muls	r2, r0
 80010c4:	0c09      	lsrs	r1, r1, #16
 80010c6:	0003      	movs	r3, r0
 80010c8:	4321      	orrs	r1, r4
 80010ca:	428a      	cmp	r2, r1
 80010cc:	d904      	bls.n	80010d8 <__aeabi_ddiv+0x31c>
 80010ce:	1989      	adds	r1, r1, r6
 80010d0:	3b01      	subs	r3, #1
 80010d2:	428e      	cmp	r6, r1
 80010d4:	d800      	bhi.n	80010d8 <__aeabi_ddiv+0x31c>
 80010d6:	e0f1      	b.n	80012bc <__aeabi_ddiv+0x500>
 80010d8:	042d      	lsls	r5, r5, #16
 80010da:	431d      	orrs	r5, r3
 80010dc:	46ab      	mov	fp, r5
 80010de:	4643      	mov	r3, r8
 80010e0:	1a89      	subs	r1, r1, r2
 80010e2:	4642      	mov	r2, r8
 80010e4:	0c28      	lsrs	r0, r5, #16
 80010e6:	0412      	lsls	r2, r2, #16
 80010e8:	0c1d      	lsrs	r5, r3, #16
 80010ea:	465b      	mov	r3, fp
 80010ec:	0c14      	lsrs	r4, r2, #16
 80010ee:	0022      	movs	r2, r4
 80010f0:	041b      	lsls	r3, r3, #16
 80010f2:	0c1b      	lsrs	r3, r3, #16
 80010f4:	435a      	muls	r2, r3
 80010f6:	9403      	str	r4, [sp, #12]
 80010f8:	436b      	muls	r3, r5
 80010fa:	4344      	muls	r4, r0
 80010fc:	9502      	str	r5, [sp, #8]
 80010fe:	4368      	muls	r0, r5
 8001100:	191b      	adds	r3, r3, r4
 8001102:	0c15      	lsrs	r5, r2, #16
 8001104:	18eb      	adds	r3, r5, r3
 8001106:	429c      	cmp	r4, r3
 8001108:	d903      	bls.n	8001112 <__aeabi_ddiv+0x356>
 800110a:	2480      	movs	r4, #128	; 0x80
 800110c:	0264      	lsls	r4, r4, #9
 800110e:	46a4      	mov	ip, r4
 8001110:	4460      	add	r0, ip
 8001112:	0c1c      	lsrs	r4, r3, #16
 8001114:	0415      	lsls	r5, r2, #16
 8001116:	041b      	lsls	r3, r3, #16
 8001118:	0c2d      	lsrs	r5, r5, #16
 800111a:	1820      	adds	r0, r4, r0
 800111c:	195d      	adds	r5, r3, r5
 800111e:	4281      	cmp	r1, r0
 8001120:	d377      	bcc.n	8001212 <__aeabi_ddiv+0x456>
 8001122:	d073      	beq.n	800120c <__aeabi_ddiv+0x450>
 8001124:	1a0c      	subs	r4, r1, r0
 8001126:	4aa2      	ldr	r2, [pc, #648]	; (80013b0 <__aeabi_ddiv+0x5f4>)
 8001128:	1b7d      	subs	r5, r7, r5
 800112a:	42af      	cmp	r7, r5
 800112c:	41bf      	sbcs	r7, r7
 800112e:	4694      	mov	ip, r2
 8001130:	9b00      	ldr	r3, [sp, #0]
 8001132:	427f      	negs	r7, r7
 8001134:	4463      	add	r3, ip
 8001136:	1be0      	subs	r0, r4, r7
 8001138:	001c      	movs	r4, r3
 800113a:	4286      	cmp	r6, r0
 800113c:	d100      	bne.n	8001140 <__aeabi_ddiv+0x384>
 800113e:	e0db      	b.n	80012f8 <__aeabi_ddiv+0x53c>
 8001140:	9901      	ldr	r1, [sp, #4]
 8001142:	f7ff f877 	bl	8000234 <__aeabi_uidivmod>
 8001146:	464a      	mov	r2, r9
 8001148:	4342      	muls	r2, r0
 800114a:	040b      	lsls	r3, r1, #16
 800114c:	0c29      	lsrs	r1, r5, #16
 800114e:	0007      	movs	r7, r0
 8001150:	4319      	orrs	r1, r3
 8001152:	428a      	cmp	r2, r1
 8001154:	d907      	bls.n	8001166 <__aeabi_ddiv+0x3aa>
 8001156:	1989      	adds	r1, r1, r6
 8001158:	3f01      	subs	r7, #1
 800115a:	428e      	cmp	r6, r1
 800115c:	d803      	bhi.n	8001166 <__aeabi_ddiv+0x3aa>
 800115e:	428a      	cmp	r2, r1
 8001160:	d901      	bls.n	8001166 <__aeabi_ddiv+0x3aa>
 8001162:	1e87      	subs	r7, r0, #2
 8001164:	1989      	adds	r1, r1, r6
 8001166:	1a88      	subs	r0, r1, r2
 8001168:	9901      	ldr	r1, [sp, #4]
 800116a:	f7ff f863 	bl	8000234 <__aeabi_uidivmod>
 800116e:	0409      	lsls	r1, r1, #16
 8001170:	464a      	mov	r2, r9
 8001172:	4689      	mov	r9, r1
 8001174:	0429      	lsls	r1, r5, #16
 8001176:	464d      	mov	r5, r9
 8001178:	4342      	muls	r2, r0
 800117a:	0c09      	lsrs	r1, r1, #16
 800117c:	0003      	movs	r3, r0
 800117e:	4329      	orrs	r1, r5
 8001180:	428a      	cmp	r2, r1
 8001182:	d907      	bls.n	8001194 <__aeabi_ddiv+0x3d8>
 8001184:	1989      	adds	r1, r1, r6
 8001186:	3b01      	subs	r3, #1
 8001188:	428e      	cmp	r6, r1
 800118a:	d803      	bhi.n	8001194 <__aeabi_ddiv+0x3d8>
 800118c:	428a      	cmp	r2, r1
 800118e:	d901      	bls.n	8001194 <__aeabi_ddiv+0x3d8>
 8001190:	1e83      	subs	r3, r0, #2
 8001192:	1989      	adds	r1, r1, r6
 8001194:	043f      	lsls	r7, r7, #16
 8001196:	1a89      	subs	r1, r1, r2
 8001198:	003a      	movs	r2, r7
 800119a:	9f03      	ldr	r7, [sp, #12]
 800119c:	431a      	orrs	r2, r3
 800119e:	0038      	movs	r0, r7
 80011a0:	0413      	lsls	r3, r2, #16
 80011a2:	0c1b      	lsrs	r3, r3, #16
 80011a4:	4358      	muls	r0, r3
 80011a6:	4681      	mov	r9, r0
 80011a8:	9802      	ldr	r0, [sp, #8]
 80011aa:	0c15      	lsrs	r5, r2, #16
 80011ac:	436f      	muls	r7, r5
 80011ae:	4343      	muls	r3, r0
 80011b0:	4345      	muls	r5, r0
 80011b2:	4648      	mov	r0, r9
 80011b4:	0c00      	lsrs	r0, r0, #16
 80011b6:	4684      	mov	ip, r0
 80011b8:	19db      	adds	r3, r3, r7
 80011ba:	4463      	add	r3, ip
 80011bc:	429f      	cmp	r7, r3
 80011be:	d903      	bls.n	80011c8 <__aeabi_ddiv+0x40c>
 80011c0:	2080      	movs	r0, #128	; 0x80
 80011c2:	0240      	lsls	r0, r0, #9
 80011c4:	4684      	mov	ip, r0
 80011c6:	4465      	add	r5, ip
 80011c8:	4648      	mov	r0, r9
 80011ca:	0c1f      	lsrs	r7, r3, #16
 80011cc:	0400      	lsls	r0, r0, #16
 80011ce:	041b      	lsls	r3, r3, #16
 80011d0:	0c00      	lsrs	r0, r0, #16
 80011d2:	197d      	adds	r5, r7, r5
 80011d4:	1818      	adds	r0, r3, r0
 80011d6:	42a9      	cmp	r1, r5
 80011d8:	d200      	bcs.n	80011dc <__aeabi_ddiv+0x420>
 80011da:	e084      	b.n	80012e6 <__aeabi_ddiv+0x52a>
 80011dc:	d100      	bne.n	80011e0 <__aeabi_ddiv+0x424>
 80011de:	e07f      	b.n	80012e0 <__aeabi_ddiv+0x524>
 80011e0:	2301      	movs	r3, #1
 80011e2:	431a      	orrs	r2, r3
 80011e4:	e657      	b.n	8000e96 <__aeabi_ddiv+0xda>
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	464a      	mov	r2, r9
 80011ea:	031b      	lsls	r3, r3, #12
 80011ec:	4313      	orrs	r3, r2
 80011ee:	031b      	lsls	r3, r3, #12
 80011f0:	0b1b      	lsrs	r3, r3, #12
 80011f2:	46aa      	mov	sl, r5
 80011f4:	4a6f      	ldr	r2, [pc, #444]	; (80013b4 <__aeabi_ddiv+0x5f8>)
 80011f6:	e66f      	b.n	8000ed8 <__aeabi_ddiv+0x11c>
 80011f8:	42ba      	cmp	r2, r7
 80011fa:	d900      	bls.n	80011fe <__aeabi_ddiv+0x442>
 80011fc:	e735      	b.n	800106a <__aeabi_ddiv+0x2ae>
 80011fe:	464b      	mov	r3, r9
 8001200:	07dc      	lsls	r4, r3, #31
 8001202:	0858      	lsrs	r0, r3, #1
 8001204:	087b      	lsrs	r3, r7, #1
 8001206:	431c      	orrs	r4, r3
 8001208:	07ff      	lsls	r7, r7, #31
 800120a:	e734      	b.n	8001076 <__aeabi_ddiv+0x2ba>
 800120c:	2400      	movs	r4, #0
 800120e:	42af      	cmp	r7, r5
 8001210:	d289      	bcs.n	8001126 <__aeabi_ddiv+0x36a>
 8001212:	4447      	add	r7, r8
 8001214:	4547      	cmp	r7, r8
 8001216:	41a4      	sbcs	r4, r4
 8001218:	465b      	mov	r3, fp
 800121a:	4264      	negs	r4, r4
 800121c:	19a4      	adds	r4, r4, r6
 800121e:	1864      	adds	r4, r4, r1
 8001220:	3b01      	subs	r3, #1
 8001222:	42a6      	cmp	r6, r4
 8001224:	d21e      	bcs.n	8001264 <__aeabi_ddiv+0x4a8>
 8001226:	42a0      	cmp	r0, r4
 8001228:	d86d      	bhi.n	8001306 <__aeabi_ddiv+0x54a>
 800122a:	d100      	bne.n	800122e <__aeabi_ddiv+0x472>
 800122c:	e0b6      	b.n	800139c <__aeabi_ddiv+0x5e0>
 800122e:	1a24      	subs	r4, r4, r0
 8001230:	469b      	mov	fp, r3
 8001232:	e778      	b.n	8001126 <__aeabi_ddiv+0x36a>
 8001234:	0003      	movs	r3, r0
 8001236:	465a      	mov	r2, fp
 8001238:	3b28      	subs	r3, #40	; 0x28
 800123a:	409a      	lsls	r2, r3
 800123c:	2700      	movs	r7, #0
 800123e:	4691      	mov	r9, r2
 8001240:	e688      	b.n	8000f54 <__aeabi_ddiv+0x198>
 8001242:	4658      	mov	r0, fp
 8001244:	f001 f912 	bl	800246c <__clzsi2>
 8001248:	3020      	adds	r0, #32
 800124a:	e672      	b.n	8000f32 <__aeabi_ddiv+0x176>
 800124c:	0003      	movs	r3, r0
 800124e:	4652      	mov	r2, sl
 8001250:	3b28      	subs	r3, #40	; 0x28
 8001252:	409a      	lsls	r2, r3
 8001254:	4693      	mov	fp, r2
 8001256:	2200      	movs	r2, #0
 8001258:	e6b4      	b.n	8000fc4 <__aeabi_ddiv+0x208>
 800125a:	4650      	mov	r0, sl
 800125c:	f001 f906 	bl	800246c <__clzsi2>
 8001260:	3020      	adds	r0, #32
 8001262:	e69a      	b.n	8000f9a <__aeabi_ddiv+0x1de>
 8001264:	42a6      	cmp	r6, r4
 8001266:	d1e2      	bne.n	800122e <__aeabi_ddiv+0x472>
 8001268:	45b8      	cmp	r8, r7
 800126a:	d9dc      	bls.n	8001226 <__aeabi_ddiv+0x46a>
 800126c:	1a34      	subs	r4, r6, r0
 800126e:	469b      	mov	fp, r3
 8001270:	e759      	b.n	8001126 <__aeabi_ddiv+0x36a>
 8001272:	2b1f      	cmp	r3, #31
 8001274:	dc65      	bgt.n	8001342 <__aeabi_ddiv+0x586>
 8001276:	4c50      	ldr	r4, [pc, #320]	; (80013b8 <__aeabi_ddiv+0x5fc>)
 8001278:	9900      	ldr	r1, [sp, #0]
 800127a:	46a4      	mov	ip, r4
 800127c:	465c      	mov	r4, fp
 800127e:	4461      	add	r1, ip
 8001280:	0008      	movs	r0, r1
 8001282:	408c      	lsls	r4, r1
 8001284:	0011      	movs	r1, r2
 8001286:	4082      	lsls	r2, r0
 8001288:	40d9      	lsrs	r1, r3
 800128a:	1e50      	subs	r0, r2, #1
 800128c:	4182      	sbcs	r2, r0
 800128e:	430c      	orrs	r4, r1
 8001290:	4314      	orrs	r4, r2
 8001292:	465a      	mov	r2, fp
 8001294:	40da      	lsrs	r2, r3
 8001296:	0013      	movs	r3, r2
 8001298:	0762      	lsls	r2, r4, #29
 800129a:	d009      	beq.n	80012b0 <__aeabi_ddiv+0x4f4>
 800129c:	220f      	movs	r2, #15
 800129e:	4022      	ands	r2, r4
 80012a0:	2a04      	cmp	r2, #4
 80012a2:	d005      	beq.n	80012b0 <__aeabi_ddiv+0x4f4>
 80012a4:	0022      	movs	r2, r4
 80012a6:	1d14      	adds	r4, r2, #4
 80012a8:	4294      	cmp	r4, r2
 80012aa:	4189      	sbcs	r1, r1
 80012ac:	4249      	negs	r1, r1
 80012ae:	185b      	adds	r3, r3, r1
 80012b0:	021a      	lsls	r2, r3, #8
 80012b2:	d562      	bpl.n	800137a <__aeabi_ddiv+0x5be>
 80012b4:	2201      	movs	r2, #1
 80012b6:	2300      	movs	r3, #0
 80012b8:	2700      	movs	r7, #0
 80012ba:	e60d      	b.n	8000ed8 <__aeabi_ddiv+0x11c>
 80012bc:	428a      	cmp	r2, r1
 80012be:	d800      	bhi.n	80012c2 <__aeabi_ddiv+0x506>
 80012c0:	e70a      	b.n	80010d8 <__aeabi_ddiv+0x31c>
 80012c2:	1e83      	subs	r3, r0, #2
 80012c4:	1989      	adds	r1, r1, r6
 80012c6:	e707      	b.n	80010d8 <__aeabi_ddiv+0x31c>
 80012c8:	230f      	movs	r3, #15
 80012ca:	4013      	ands	r3, r2
 80012cc:	2b04      	cmp	r3, #4
 80012ce:	d100      	bne.n	80012d2 <__aeabi_ddiv+0x516>
 80012d0:	e5e6      	b.n	8000ea0 <__aeabi_ddiv+0xe4>
 80012d2:	1d17      	adds	r7, r2, #4
 80012d4:	4297      	cmp	r7, r2
 80012d6:	4192      	sbcs	r2, r2
 80012d8:	4253      	negs	r3, r2
 80012da:	449b      	add	fp, r3
 80012dc:	08fa      	lsrs	r2, r7, #3
 80012de:	e5e0      	b.n	8000ea2 <__aeabi_ddiv+0xe6>
 80012e0:	2800      	cmp	r0, #0
 80012e2:	d100      	bne.n	80012e6 <__aeabi_ddiv+0x52a>
 80012e4:	e5d7      	b.n	8000e96 <__aeabi_ddiv+0xda>
 80012e6:	1871      	adds	r1, r6, r1
 80012e8:	1e53      	subs	r3, r2, #1
 80012ea:	42b1      	cmp	r1, r6
 80012ec:	d327      	bcc.n	800133e <__aeabi_ddiv+0x582>
 80012ee:	42a9      	cmp	r1, r5
 80012f0:	d315      	bcc.n	800131e <__aeabi_ddiv+0x562>
 80012f2:	d058      	beq.n	80013a6 <__aeabi_ddiv+0x5ea>
 80012f4:	001a      	movs	r2, r3
 80012f6:	e773      	b.n	80011e0 <__aeabi_ddiv+0x424>
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	dc00      	bgt.n	80012fe <__aeabi_ddiv+0x542>
 80012fc:	e604      	b.n	8000f08 <__aeabi_ddiv+0x14c>
 80012fe:	2301      	movs	r3, #1
 8001300:	2200      	movs	r2, #0
 8001302:	449b      	add	fp, r3
 8001304:	e5cd      	b.n	8000ea2 <__aeabi_ddiv+0xe6>
 8001306:	2302      	movs	r3, #2
 8001308:	4447      	add	r7, r8
 800130a:	4547      	cmp	r7, r8
 800130c:	4189      	sbcs	r1, r1
 800130e:	425b      	negs	r3, r3
 8001310:	469c      	mov	ip, r3
 8001312:	4249      	negs	r1, r1
 8001314:	1989      	adds	r1, r1, r6
 8001316:	190c      	adds	r4, r1, r4
 8001318:	44e3      	add	fp, ip
 800131a:	1a24      	subs	r4, r4, r0
 800131c:	e703      	b.n	8001126 <__aeabi_ddiv+0x36a>
 800131e:	4643      	mov	r3, r8
 8001320:	005f      	lsls	r7, r3, #1
 8001322:	4547      	cmp	r7, r8
 8001324:	419b      	sbcs	r3, r3
 8001326:	46b8      	mov	r8, r7
 8001328:	425b      	negs	r3, r3
 800132a:	199e      	adds	r6, r3, r6
 800132c:	3a02      	subs	r2, #2
 800132e:	1989      	adds	r1, r1, r6
 8001330:	42a9      	cmp	r1, r5
 8001332:	d000      	beq.n	8001336 <__aeabi_ddiv+0x57a>
 8001334:	e754      	b.n	80011e0 <__aeabi_ddiv+0x424>
 8001336:	4540      	cmp	r0, r8
 8001338:	d000      	beq.n	800133c <__aeabi_ddiv+0x580>
 800133a:	e751      	b.n	80011e0 <__aeabi_ddiv+0x424>
 800133c:	e5ab      	b.n	8000e96 <__aeabi_ddiv+0xda>
 800133e:	001a      	movs	r2, r3
 8001340:	e7f6      	b.n	8001330 <__aeabi_ddiv+0x574>
 8001342:	211f      	movs	r1, #31
 8001344:	465f      	mov	r7, fp
 8001346:	4249      	negs	r1, r1
 8001348:	1b0c      	subs	r4, r1, r4
 800134a:	40e7      	lsrs	r7, r4
 800134c:	2b20      	cmp	r3, #32
 800134e:	d007      	beq.n	8001360 <__aeabi_ddiv+0x5a4>
 8001350:	491a      	ldr	r1, [pc, #104]	; (80013bc <__aeabi_ddiv+0x600>)
 8001352:	9b00      	ldr	r3, [sp, #0]
 8001354:	468c      	mov	ip, r1
 8001356:	4463      	add	r3, ip
 8001358:	0018      	movs	r0, r3
 800135a:	465b      	mov	r3, fp
 800135c:	4083      	lsls	r3, r0
 800135e:	431a      	orrs	r2, r3
 8001360:	1e50      	subs	r0, r2, #1
 8001362:	4182      	sbcs	r2, r0
 8001364:	433a      	orrs	r2, r7
 8001366:	2707      	movs	r7, #7
 8001368:	2300      	movs	r3, #0
 800136a:	4017      	ands	r7, r2
 800136c:	d009      	beq.n	8001382 <__aeabi_ddiv+0x5c6>
 800136e:	210f      	movs	r1, #15
 8001370:	2300      	movs	r3, #0
 8001372:	4011      	ands	r1, r2
 8001374:	0014      	movs	r4, r2
 8001376:	2904      	cmp	r1, #4
 8001378:	d195      	bne.n	80012a6 <__aeabi_ddiv+0x4ea>
 800137a:	0022      	movs	r2, r4
 800137c:	075f      	lsls	r7, r3, #29
 800137e:	025b      	lsls	r3, r3, #9
 8001380:	0b1b      	lsrs	r3, r3, #12
 8001382:	08d2      	lsrs	r2, r2, #3
 8001384:	4317      	orrs	r7, r2
 8001386:	2200      	movs	r2, #0
 8001388:	e5a6      	b.n	8000ed8 <__aeabi_ddiv+0x11c>
 800138a:	2380      	movs	r3, #128	; 0x80
 800138c:	4659      	mov	r1, fp
 800138e:	031b      	lsls	r3, r3, #12
 8001390:	430b      	orrs	r3, r1
 8001392:	031b      	lsls	r3, r3, #12
 8001394:	0017      	movs	r7, r2
 8001396:	0b1b      	lsrs	r3, r3, #12
 8001398:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <__aeabi_ddiv+0x5f8>)
 800139a:	e59d      	b.n	8000ed8 <__aeabi_ddiv+0x11c>
 800139c:	42bd      	cmp	r5, r7
 800139e:	d8b2      	bhi.n	8001306 <__aeabi_ddiv+0x54a>
 80013a0:	469b      	mov	fp, r3
 80013a2:	2400      	movs	r4, #0
 80013a4:	e6bf      	b.n	8001126 <__aeabi_ddiv+0x36a>
 80013a6:	4580      	cmp	r8, r0
 80013a8:	d3b9      	bcc.n	800131e <__aeabi_ddiv+0x562>
 80013aa:	001a      	movs	r2, r3
 80013ac:	e7c3      	b.n	8001336 <__aeabi_ddiv+0x57a>
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	000003ff 	.word	0x000003ff
 80013b4:	000007ff 	.word	0x000007ff
 80013b8:	0000041e 	.word	0x0000041e
 80013bc:	0000043e 	.word	0x0000043e

080013c0 <__eqdf2>:
 80013c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c2:	464f      	mov	r7, r9
 80013c4:	4646      	mov	r6, r8
 80013c6:	46d6      	mov	lr, sl
 80013c8:	4684      	mov	ip, r0
 80013ca:	b5c0      	push	{r6, r7, lr}
 80013cc:	4680      	mov	r8, r0
 80013ce:	4e19      	ldr	r6, [pc, #100]	; (8001434 <__eqdf2+0x74>)
 80013d0:	0318      	lsls	r0, r3, #12
 80013d2:	030f      	lsls	r7, r1, #12
 80013d4:	004d      	lsls	r5, r1, #1
 80013d6:	0b00      	lsrs	r0, r0, #12
 80013d8:	005c      	lsls	r4, r3, #1
 80013da:	4682      	mov	sl, r0
 80013dc:	0b3f      	lsrs	r7, r7, #12
 80013de:	0d6d      	lsrs	r5, r5, #21
 80013e0:	0fc9      	lsrs	r1, r1, #31
 80013e2:	4691      	mov	r9, r2
 80013e4:	0d64      	lsrs	r4, r4, #21
 80013e6:	0fdb      	lsrs	r3, r3, #31
 80013e8:	2001      	movs	r0, #1
 80013ea:	42b5      	cmp	r5, r6
 80013ec:	d00a      	beq.n	8001404 <__eqdf2+0x44>
 80013ee:	42b4      	cmp	r4, r6
 80013f0:	d003      	beq.n	80013fa <__eqdf2+0x3a>
 80013f2:	42a5      	cmp	r5, r4
 80013f4:	d101      	bne.n	80013fa <__eqdf2+0x3a>
 80013f6:	4557      	cmp	r7, sl
 80013f8:	d00c      	beq.n	8001414 <__eqdf2+0x54>
 80013fa:	bc1c      	pop	{r2, r3, r4}
 80013fc:	4690      	mov	r8, r2
 80013fe:	4699      	mov	r9, r3
 8001400:	46a2      	mov	sl, r4
 8001402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001404:	4666      	mov	r6, ip
 8001406:	433e      	orrs	r6, r7
 8001408:	d1f7      	bne.n	80013fa <__eqdf2+0x3a>
 800140a:	42ac      	cmp	r4, r5
 800140c:	d1f5      	bne.n	80013fa <__eqdf2+0x3a>
 800140e:	4654      	mov	r4, sl
 8001410:	4314      	orrs	r4, r2
 8001412:	d1f2      	bne.n	80013fa <__eqdf2+0x3a>
 8001414:	2001      	movs	r0, #1
 8001416:	45c8      	cmp	r8, r9
 8001418:	d1ef      	bne.n	80013fa <__eqdf2+0x3a>
 800141a:	4299      	cmp	r1, r3
 800141c:	d007      	beq.n	800142e <__eqdf2+0x6e>
 800141e:	2d00      	cmp	r5, #0
 8001420:	d1eb      	bne.n	80013fa <__eqdf2+0x3a>
 8001422:	4663      	mov	r3, ip
 8001424:	431f      	orrs	r7, r3
 8001426:	0038      	movs	r0, r7
 8001428:	1e47      	subs	r7, r0, #1
 800142a:	41b8      	sbcs	r0, r7
 800142c:	e7e5      	b.n	80013fa <__eqdf2+0x3a>
 800142e:	2000      	movs	r0, #0
 8001430:	e7e3      	b.n	80013fa <__eqdf2+0x3a>
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	000007ff 	.word	0x000007ff

08001438 <__gedf2>:
 8001438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143a:	464f      	mov	r7, r9
 800143c:	4646      	mov	r6, r8
 800143e:	46d6      	mov	lr, sl
 8001440:	004d      	lsls	r5, r1, #1
 8001442:	b5c0      	push	{r6, r7, lr}
 8001444:	030e      	lsls	r6, r1, #12
 8001446:	0fc9      	lsrs	r1, r1, #31
 8001448:	468a      	mov	sl, r1
 800144a:	492c      	ldr	r1, [pc, #176]	; (80014fc <__gedf2+0xc4>)
 800144c:	031f      	lsls	r7, r3, #12
 800144e:	005c      	lsls	r4, r3, #1
 8001450:	4680      	mov	r8, r0
 8001452:	0b36      	lsrs	r6, r6, #12
 8001454:	0d6d      	lsrs	r5, r5, #21
 8001456:	4691      	mov	r9, r2
 8001458:	0b3f      	lsrs	r7, r7, #12
 800145a:	0d64      	lsrs	r4, r4, #21
 800145c:	0fdb      	lsrs	r3, r3, #31
 800145e:	428d      	cmp	r5, r1
 8001460:	d01e      	beq.n	80014a0 <__gedf2+0x68>
 8001462:	428c      	cmp	r4, r1
 8001464:	d016      	beq.n	8001494 <__gedf2+0x5c>
 8001466:	2d00      	cmp	r5, #0
 8001468:	d11e      	bne.n	80014a8 <__gedf2+0x70>
 800146a:	4330      	orrs	r0, r6
 800146c:	4684      	mov	ip, r0
 800146e:	2c00      	cmp	r4, #0
 8001470:	d101      	bne.n	8001476 <__gedf2+0x3e>
 8001472:	433a      	orrs	r2, r7
 8001474:	d023      	beq.n	80014be <__gedf2+0x86>
 8001476:	4662      	mov	r2, ip
 8001478:	2a00      	cmp	r2, #0
 800147a:	d01a      	beq.n	80014b2 <__gedf2+0x7a>
 800147c:	459a      	cmp	sl, r3
 800147e:	d029      	beq.n	80014d4 <__gedf2+0x9c>
 8001480:	4651      	mov	r1, sl
 8001482:	2002      	movs	r0, #2
 8001484:	3901      	subs	r1, #1
 8001486:	4008      	ands	r0, r1
 8001488:	3801      	subs	r0, #1
 800148a:	bc1c      	pop	{r2, r3, r4}
 800148c:	4690      	mov	r8, r2
 800148e:	4699      	mov	r9, r3
 8001490:	46a2      	mov	sl, r4
 8001492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001494:	0039      	movs	r1, r7
 8001496:	4311      	orrs	r1, r2
 8001498:	d0e5      	beq.n	8001466 <__gedf2+0x2e>
 800149a:	2002      	movs	r0, #2
 800149c:	4240      	negs	r0, r0
 800149e:	e7f4      	b.n	800148a <__gedf2+0x52>
 80014a0:	4330      	orrs	r0, r6
 80014a2:	d1fa      	bne.n	800149a <__gedf2+0x62>
 80014a4:	42ac      	cmp	r4, r5
 80014a6:	d00f      	beq.n	80014c8 <__gedf2+0x90>
 80014a8:	2c00      	cmp	r4, #0
 80014aa:	d10f      	bne.n	80014cc <__gedf2+0x94>
 80014ac:	433a      	orrs	r2, r7
 80014ae:	d0e7      	beq.n	8001480 <__gedf2+0x48>
 80014b0:	e00c      	b.n	80014cc <__gedf2+0x94>
 80014b2:	2201      	movs	r2, #1
 80014b4:	3b01      	subs	r3, #1
 80014b6:	4393      	bics	r3, r2
 80014b8:	0018      	movs	r0, r3
 80014ba:	3001      	adds	r0, #1
 80014bc:	e7e5      	b.n	800148a <__gedf2+0x52>
 80014be:	4663      	mov	r3, ip
 80014c0:	2000      	movs	r0, #0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0e1      	beq.n	800148a <__gedf2+0x52>
 80014c6:	e7db      	b.n	8001480 <__gedf2+0x48>
 80014c8:	433a      	orrs	r2, r7
 80014ca:	d1e6      	bne.n	800149a <__gedf2+0x62>
 80014cc:	459a      	cmp	sl, r3
 80014ce:	d1d7      	bne.n	8001480 <__gedf2+0x48>
 80014d0:	42a5      	cmp	r5, r4
 80014d2:	dcd5      	bgt.n	8001480 <__gedf2+0x48>
 80014d4:	42a5      	cmp	r5, r4
 80014d6:	db05      	blt.n	80014e4 <__gedf2+0xac>
 80014d8:	42be      	cmp	r6, r7
 80014da:	d8d1      	bhi.n	8001480 <__gedf2+0x48>
 80014dc:	d008      	beq.n	80014f0 <__gedf2+0xb8>
 80014de:	2000      	movs	r0, #0
 80014e0:	42be      	cmp	r6, r7
 80014e2:	d2d2      	bcs.n	800148a <__gedf2+0x52>
 80014e4:	4650      	mov	r0, sl
 80014e6:	2301      	movs	r3, #1
 80014e8:	3801      	subs	r0, #1
 80014ea:	4398      	bics	r0, r3
 80014ec:	3001      	adds	r0, #1
 80014ee:	e7cc      	b.n	800148a <__gedf2+0x52>
 80014f0:	45c8      	cmp	r8, r9
 80014f2:	d8c5      	bhi.n	8001480 <__gedf2+0x48>
 80014f4:	2000      	movs	r0, #0
 80014f6:	45c8      	cmp	r8, r9
 80014f8:	d3f4      	bcc.n	80014e4 <__gedf2+0xac>
 80014fa:	e7c6      	b.n	800148a <__gedf2+0x52>
 80014fc:	000007ff 	.word	0x000007ff

08001500 <__ledf2>:
 8001500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001502:	464f      	mov	r7, r9
 8001504:	4646      	mov	r6, r8
 8001506:	46d6      	mov	lr, sl
 8001508:	004d      	lsls	r5, r1, #1
 800150a:	b5c0      	push	{r6, r7, lr}
 800150c:	030e      	lsls	r6, r1, #12
 800150e:	0fc9      	lsrs	r1, r1, #31
 8001510:	468a      	mov	sl, r1
 8001512:	492e      	ldr	r1, [pc, #184]	; (80015cc <__ledf2+0xcc>)
 8001514:	031f      	lsls	r7, r3, #12
 8001516:	005c      	lsls	r4, r3, #1
 8001518:	4680      	mov	r8, r0
 800151a:	0b36      	lsrs	r6, r6, #12
 800151c:	0d6d      	lsrs	r5, r5, #21
 800151e:	4691      	mov	r9, r2
 8001520:	0b3f      	lsrs	r7, r7, #12
 8001522:	0d64      	lsrs	r4, r4, #21
 8001524:	0fdb      	lsrs	r3, r3, #31
 8001526:	428d      	cmp	r5, r1
 8001528:	d018      	beq.n	800155c <__ledf2+0x5c>
 800152a:	428c      	cmp	r4, r1
 800152c:	d011      	beq.n	8001552 <__ledf2+0x52>
 800152e:	2d00      	cmp	r5, #0
 8001530:	d118      	bne.n	8001564 <__ledf2+0x64>
 8001532:	4330      	orrs	r0, r6
 8001534:	4684      	mov	ip, r0
 8001536:	2c00      	cmp	r4, #0
 8001538:	d11e      	bne.n	8001578 <__ledf2+0x78>
 800153a:	433a      	orrs	r2, r7
 800153c:	d11c      	bne.n	8001578 <__ledf2+0x78>
 800153e:	4663      	mov	r3, ip
 8001540:	2000      	movs	r0, #0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d030      	beq.n	80015a8 <__ledf2+0xa8>
 8001546:	4651      	mov	r1, sl
 8001548:	2002      	movs	r0, #2
 800154a:	3901      	subs	r1, #1
 800154c:	4008      	ands	r0, r1
 800154e:	3801      	subs	r0, #1
 8001550:	e02a      	b.n	80015a8 <__ledf2+0xa8>
 8001552:	0039      	movs	r1, r7
 8001554:	4311      	orrs	r1, r2
 8001556:	d0ea      	beq.n	800152e <__ledf2+0x2e>
 8001558:	2002      	movs	r0, #2
 800155a:	e025      	b.n	80015a8 <__ledf2+0xa8>
 800155c:	4330      	orrs	r0, r6
 800155e:	d1fb      	bne.n	8001558 <__ledf2+0x58>
 8001560:	42ac      	cmp	r4, r5
 8001562:	d026      	beq.n	80015b2 <__ledf2+0xb2>
 8001564:	2c00      	cmp	r4, #0
 8001566:	d126      	bne.n	80015b6 <__ledf2+0xb6>
 8001568:	433a      	orrs	r2, r7
 800156a:	d124      	bne.n	80015b6 <__ledf2+0xb6>
 800156c:	4651      	mov	r1, sl
 800156e:	2002      	movs	r0, #2
 8001570:	3901      	subs	r1, #1
 8001572:	4008      	ands	r0, r1
 8001574:	3801      	subs	r0, #1
 8001576:	e017      	b.n	80015a8 <__ledf2+0xa8>
 8001578:	4662      	mov	r2, ip
 800157a:	2a00      	cmp	r2, #0
 800157c:	d00f      	beq.n	800159e <__ledf2+0x9e>
 800157e:	459a      	cmp	sl, r3
 8001580:	d1e1      	bne.n	8001546 <__ledf2+0x46>
 8001582:	42a5      	cmp	r5, r4
 8001584:	db05      	blt.n	8001592 <__ledf2+0x92>
 8001586:	42be      	cmp	r6, r7
 8001588:	d8dd      	bhi.n	8001546 <__ledf2+0x46>
 800158a:	d019      	beq.n	80015c0 <__ledf2+0xc0>
 800158c:	2000      	movs	r0, #0
 800158e:	42be      	cmp	r6, r7
 8001590:	d20a      	bcs.n	80015a8 <__ledf2+0xa8>
 8001592:	4650      	mov	r0, sl
 8001594:	2301      	movs	r3, #1
 8001596:	3801      	subs	r0, #1
 8001598:	4398      	bics	r0, r3
 800159a:	3001      	adds	r0, #1
 800159c:	e004      	b.n	80015a8 <__ledf2+0xa8>
 800159e:	2201      	movs	r2, #1
 80015a0:	3b01      	subs	r3, #1
 80015a2:	4393      	bics	r3, r2
 80015a4:	0018      	movs	r0, r3
 80015a6:	3001      	adds	r0, #1
 80015a8:	bc1c      	pop	{r2, r3, r4}
 80015aa:	4690      	mov	r8, r2
 80015ac:	4699      	mov	r9, r3
 80015ae:	46a2      	mov	sl, r4
 80015b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015b2:	433a      	orrs	r2, r7
 80015b4:	d1d0      	bne.n	8001558 <__ledf2+0x58>
 80015b6:	459a      	cmp	sl, r3
 80015b8:	d1c5      	bne.n	8001546 <__ledf2+0x46>
 80015ba:	42a5      	cmp	r5, r4
 80015bc:	dcc3      	bgt.n	8001546 <__ledf2+0x46>
 80015be:	e7e0      	b.n	8001582 <__ledf2+0x82>
 80015c0:	45c8      	cmp	r8, r9
 80015c2:	d8c0      	bhi.n	8001546 <__ledf2+0x46>
 80015c4:	2000      	movs	r0, #0
 80015c6:	45c8      	cmp	r8, r9
 80015c8:	d3e3      	bcc.n	8001592 <__ledf2+0x92>
 80015ca:	e7ed      	b.n	80015a8 <__ledf2+0xa8>
 80015cc:	000007ff 	.word	0x000007ff

080015d0 <__aeabi_dmul>:
 80015d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015d2:	4657      	mov	r7, sl
 80015d4:	46de      	mov	lr, fp
 80015d6:	464e      	mov	r6, r9
 80015d8:	4645      	mov	r5, r8
 80015da:	b5e0      	push	{r5, r6, r7, lr}
 80015dc:	4683      	mov	fp, r0
 80015de:	0006      	movs	r6, r0
 80015e0:	030f      	lsls	r7, r1, #12
 80015e2:	0048      	lsls	r0, r1, #1
 80015e4:	b087      	sub	sp, #28
 80015e6:	4692      	mov	sl, r2
 80015e8:	001d      	movs	r5, r3
 80015ea:	0b3f      	lsrs	r7, r7, #12
 80015ec:	0d40      	lsrs	r0, r0, #21
 80015ee:	0fcc      	lsrs	r4, r1, #31
 80015f0:	2800      	cmp	r0, #0
 80015f2:	d100      	bne.n	80015f6 <__aeabi_dmul+0x26>
 80015f4:	e06f      	b.n	80016d6 <__aeabi_dmul+0x106>
 80015f6:	4bde      	ldr	r3, [pc, #888]	; (8001970 <__aeabi_dmul+0x3a0>)
 80015f8:	4298      	cmp	r0, r3
 80015fa:	d038      	beq.n	800166e <__aeabi_dmul+0x9e>
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	00ff      	lsls	r7, r7, #3
 8001600:	041b      	lsls	r3, r3, #16
 8001602:	431f      	orrs	r7, r3
 8001604:	0f73      	lsrs	r3, r6, #29
 8001606:	433b      	orrs	r3, r7
 8001608:	9301      	str	r3, [sp, #4]
 800160a:	4bda      	ldr	r3, [pc, #872]	; (8001974 <__aeabi_dmul+0x3a4>)
 800160c:	2700      	movs	r7, #0
 800160e:	4699      	mov	r9, r3
 8001610:	2300      	movs	r3, #0
 8001612:	469b      	mov	fp, r3
 8001614:	00f6      	lsls	r6, r6, #3
 8001616:	4481      	add	r9, r0
 8001618:	032b      	lsls	r3, r5, #12
 800161a:	0069      	lsls	r1, r5, #1
 800161c:	0b1b      	lsrs	r3, r3, #12
 800161e:	4652      	mov	r2, sl
 8001620:	4698      	mov	r8, r3
 8001622:	0d49      	lsrs	r1, r1, #21
 8001624:	0fed      	lsrs	r5, r5, #31
 8001626:	2900      	cmp	r1, #0
 8001628:	d100      	bne.n	800162c <__aeabi_dmul+0x5c>
 800162a:	e085      	b.n	8001738 <__aeabi_dmul+0x168>
 800162c:	4bd0      	ldr	r3, [pc, #832]	; (8001970 <__aeabi_dmul+0x3a0>)
 800162e:	4299      	cmp	r1, r3
 8001630:	d100      	bne.n	8001634 <__aeabi_dmul+0x64>
 8001632:	e073      	b.n	800171c <__aeabi_dmul+0x14c>
 8001634:	4643      	mov	r3, r8
 8001636:	00da      	lsls	r2, r3, #3
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	041b      	lsls	r3, r3, #16
 800163c:	4313      	orrs	r3, r2
 800163e:	4652      	mov	r2, sl
 8001640:	48cc      	ldr	r0, [pc, #816]	; (8001974 <__aeabi_dmul+0x3a4>)
 8001642:	0f52      	lsrs	r2, r2, #29
 8001644:	4684      	mov	ip, r0
 8001646:	4313      	orrs	r3, r2
 8001648:	4652      	mov	r2, sl
 800164a:	2000      	movs	r0, #0
 800164c:	4461      	add	r1, ip
 800164e:	00d2      	lsls	r2, r2, #3
 8001650:	4489      	add	r9, r1
 8001652:	0021      	movs	r1, r4
 8001654:	4069      	eors	r1, r5
 8001656:	9100      	str	r1, [sp, #0]
 8001658:	468c      	mov	ip, r1
 800165a:	2101      	movs	r1, #1
 800165c:	4449      	add	r1, r9
 800165e:	468a      	mov	sl, r1
 8001660:	2f0f      	cmp	r7, #15
 8001662:	d900      	bls.n	8001666 <__aeabi_dmul+0x96>
 8001664:	e090      	b.n	8001788 <__aeabi_dmul+0x1b8>
 8001666:	49c4      	ldr	r1, [pc, #784]	; (8001978 <__aeabi_dmul+0x3a8>)
 8001668:	00bf      	lsls	r7, r7, #2
 800166a:	59cf      	ldr	r7, [r1, r7]
 800166c:	46bf      	mov	pc, r7
 800166e:	465b      	mov	r3, fp
 8001670:	433b      	orrs	r3, r7
 8001672:	9301      	str	r3, [sp, #4]
 8001674:	d000      	beq.n	8001678 <__aeabi_dmul+0xa8>
 8001676:	e16a      	b.n	800194e <__aeabi_dmul+0x37e>
 8001678:	2302      	movs	r3, #2
 800167a:	2708      	movs	r7, #8
 800167c:	2600      	movs	r6, #0
 800167e:	4681      	mov	r9, r0
 8001680:	469b      	mov	fp, r3
 8001682:	e7c9      	b.n	8001618 <__aeabi_dmul+0x48>
 8001684:	0032      	movs	r2, r6
 8001686:	4658      	mov	r0, fp
 8001688:	9b01      	ldr	r3, [sp, #4]
 800168a:	4661      	mov	r1, ip
 800168c:	9100      	str	r1, [sp, #0]
 800168e:	2802      	cmp	r0, #2
 8001690:	d100      	bne.n	8001694 <__aeabi_dmul+0xc4>
 8001692:	e075      	b.n	8001780 <__aeabi_dmul+0x1b0>
 8001694:	2803      	cmp	r0, #3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0xca>
 8001698:	e1fe      	b.n	8001a98 <__aeabi_dmul+0x4c8>
 800169a:	2801      	cmp	r0, #1
 800169c:	d000      	beq.n	80016a0 <__aeabi_dmul+0xd0>
 800169e:	e12c      	b.n	80018fa <__aeabi_dmul+0x32a>
 80016a0:	2300      	movs	r3, #0
 80016a2:	2700      	movs	r7, #0
 80016a4:	2600      	movs	r6, #0
 80016a6:	2500      	movs	r5, #0
 80016a8:	033f      	lsls	r7, r7, #12
 80016aa:	0d2a      	lsrs	r2, r5, #20
 80016ac:	0b3f      	lsrs	r7, r7, #12
 80016ae:	48b3      	ldr	r0, [pc, #716]	; (800197c <__aeabi_dmul+0x3ac>)
 80016b0:	0512      	lsls	r2, r2, #20
 80016b2:	433a      	orrs	r2, r7
 80016b4:	4002      	ands	r2, r0
 80016b6:	051b      	lsls	r3, r3, #20
 80016b8:	4313      	orrs	r3, r2
 80016ba:	9a00      	ldr	r2, [sp, #0]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	07d1      	lsls	r1, r2, #31
 80016c0:	085b      	lsrs	r3, r3, #1
 80016c2:	430b      	orrs	r3, r1
 80016c4:	0030      	movs	r0, r6
 80016c6:	0019      	movs	r1, r3
 80016c8:	b007      	add	sp, #28
 80016ca:	bc3c      	pop	{r2, r3, r4, r5}
 80016cc:	4690      	mov	r8, r2
 80016ce:	4699      	mov	r9, r3
 80016d0:	46a2      	mov	sl, r4
 80016d2:	46ab      	mov	fp, r5
 80016d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d6:	465b      	mov	r3, fp
 80016d8:	433b      	orrs	r3, r7
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	d100      	bne.n	80016e0 <__aeabi_dmul+0x110>
 80016de:	e12f      	b.n	8001940 <__aeabi_dmul+0x370>
 80016e0:	2f00      	cmp	r7, #0
 80016e2:	d100      	bne.n	80016e6 <__aeabi_dmul+0x116>
 80016e4:	e1a5      	b.n	8001a32 <__aeabi_dmul+0x462>
 80016e6:	0038      	movs	r0, r7
 80016e8:	f000 fec0 	bl	800246c <__clzsi2>
 80016ec:	0003      	movs	r3, r0
 80016ee:	3b0b      	subs	r3, #11
 80016f0:	2b1c      	cmp	r3, #28
 80016f2:	dd00      	ble.n	80016f6 <__aeabi_dmul+0x126>
 80016f4:	e196      	b.n	8001a24 <__aeabi_dmul+0x454>
 80016f6:	221d      	movs	r2, #29
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	465a      	mov	r2, fp
 80016fc:	0001      	movs	r1, r0
 80016fe:	40da      	lsrs	r2, r3
 8001700:	465e      	mov	r6, fp
 8001702:	3908      	subs	r1, #8
 8001704:	408f      	lsls	r7, r1
 8001706:	0013      	movs	r3, r2
 8001708:	408e      	lsls	r6, r1
 800170a:	433b      	orrs	r3, r7
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	4b9c      	ldr	r3, [pc, #624]	; (8001980 <__aeabi_dmul+0x3b0>)
 8001710:	2700      	movs	r7, #0
 8001712:	1a1b      	subs	r3, r3, r0
 8001714:	4699      	mov	r9, r3
 8001716:	2300      	movs	r3, #0
 8001718:	469b      	mov	fp, r3
 800171a:	e77d      	b.n	8001618 <__aeabi_dmul+0x48>
 800171c:	4641      	mov	r1, r8
 800171e:	4653      	mov	r3, sl
 8001720:	430b      	orrs	r3, r1
 8001722:	4993      	ldr	r1, [pc, #588]	; (8001970 <__aeabi_dmul+0x3a0>)
 8001724:	468c      	mov	ip, r1
 8001726:	44e1      	add	r9, ip
 8001728:	2b00      	cmp	r3, #0
 800172a:	d000      	beq.n	800172e <__aeabi_dmul+0x15e>
 800172c:	e11a      	b.n	8001964 <__aeabi_dmul+0x394>
 800172e:	2202      	movs	r2, #2
 8001730:	2002      	movs	r0, #2
 8001732:	4317      	orrs	r7, r2
 8001734:	2200      	movs	r2, #0
 8001736:	e78c      	b.n	8001652 <__aeabi_dmul+0x82>
 8001738:	4313      	orrs	r3, r2
 800173a:	d100      	bne.n	800173e <__aeabi_dmul+0x16e>
 800173c:	e10d      	b.n	800195a <__aeabi_dmul+0x38a>
 800173e:	4643      	mov	r3, r8
 8001740:	2b00      	cmp	r3, #0
 8001742:	d100      	bne.n	8001746 <__aeabi_dmul+0x176>
 8001744:	e181      	b.n	8001a4a <__aeabi_dmul+0x47a>
 8001746:	4640      	mov	r0, r8
 8001748:	f000 fe90 	bl	800246c <__clzsi2>
 800174c:	0002      	movs	r2, r0
 800174e:	3a0b      	subs	r2, #11
 8001750:	2a1c      	cmp	r2, #28
 8001752:	dd00      	ble.n	8001756 <__aeabi_dmul+0x186>
 8001754:	e172      	b.n	8001a3c <__aeabi_dmul+0x46c>
 8001756:	0001      	movs	r1, r0
 8001758:	4643      	mov	r3, r8
 800175a:	3908      	subs	r1, #8
 800175c:	408b      	lsls	r3, r1
 800175e:	4698      	mov	r8, r3
 8001760:	231d      	movs	r3, #29
 8001762:	1a9a      	subs	r2, r3, r2
 8001764:	4653      	mov	r3, sl
 8001766:	40d3      	lsrs	r3, r2
 8001768:	001a      	movs	r2, r3
 800176a:	4643      	mov	r3, r8
 800176c:	4313      	orrs	r3, r2
 800176e:	4652      	mov	r2, sl
 8001770:	408a      	lsls	r2, r1
 8001772:	4649      	mov	r1, r9
 8001774:	1a08      	subs	r0, r1, r0
 8001776:	4982      	ldr	r1, [pc, #520]	; (8001980 <__aeabi_dmul+0x3b0>)
 8001778:	4689      	mov	r9, r1
 800177a:	4481      	add	r9, r0
 800177c:	2000      	movs	r0, #0
 800177e:	e768      	b.n	8001652 <__aeabi_dmul+0x82>
 8001780:	4b7b      	ldr	r3, [pc, #492]	; (8001970 <__aeabi_dmul+0x3a0>)
 8001782:	2700      	movs	r7, #0
 8001784:	2600      	movs	r6, #0
 8001786:	e78e      	b.n	80016a6 <__aeabi_dmul+0xd6>
 8001788:	0c14      	lsrs	r4, r2, #16
 800178a:	0412      	lsls	r2, r2, #16
 800178c:	0c12      	lsrs	r2, r2, #16
 800178e:	0011      	movs	r1, r2
 8001790:	0c37      	lsrs	r7, r6, #16
 8001792:	0436      	lsls	r6, r6, #16
 8001794:	0c35      	lsrs	r5, r6, #16
 8001796:	4379      	muls	r1, r7
 8001798:	0028      	movs	r0, r5
 800179a:	468c      	mov	ip, r1
 800179c:	002e      	movs	r6, r5
 800179e:	4360      	muls	r0, r4
 80017a0:	4460      	add	r0, ip
 80017a2:	4683      	mov	fp, r0
 80017a4:	4356      	muls	r6, r2
 80017a6:	0021      	movs	r1, r4
 80017a8:	0c30      	lsrs	r0, r6, #16
 80017aa:	4680      	mov	r8, r0
 80017ac:	4658      	mov	r0, fp
 80017ae:	4379      	muls	r1, r7
 80017b0:	4440      	add	r0, r8
 80017b2:	9102      	str	r1, [sp, #8]
 80017b4:	4584      	cmp	ip, r0
 80017b6:	d906      	bls.n	80017c6 <__aeabi_dmul+0x1f6>
 80017b8:	4688      	mov	r8, r1
 80017ba:	2180      	movs	r1, #128	; 0x80
 80017bc:	0249      	lsls	r1, r1, #9
 80017be:	468c      	mov	ip, r1
 80017c0:	44e0      	add	r8, ip
 80017c2:	4641      	mov	r1, r8
 80017c4:	9102      	str	r1, [sp, #8]
 80017c6:	0436      	lsls	r6, r6, #16
 80017c8:	0c01      	lsrs	r1, r0, #16
 80017ca:	0c36      	lsrs	r6, r6, #16
 80017cc:	0400      	lsls	r0, r0, #16
 80017ce:	468b      	mov	fp, r1
 80017d0:	1981      	adds	r1, r0, r6
 80017d2:	0c1e      	lsrs	r6, r3, #16
 80017d4:	041b      	lsls	r3, r3, #16
 80017d6:	0c1b      	lsrs	r3, r3, #16
 80017d8:	9103      	str	r1, [sp, #12]
 80017da:	0019      	movs	r1, r3
 80017dc:	4379      	muls	r1, r7
 80017de:	468c      	mov	ip, r1
 80017e0:	0028      	movs	r0, r5
 80017e2:	4375      	muls	r5, r6
 80017e4:	4465      	add	r5, ip
 80017e6:	46a8      	mov	r8, r5
 80017e8:	4358      	muls	r0, r3
 80017ea:	0c05      	lsrs	r5, r0, #16
 80017ec:	4445      	add	r5, r8
 80017ee:	4377      	muls	r7, r6
 80017f0:	42a9      	cmp	r1, r5
 80017f2:	d903      	bls.n	80017fc <__aeabi_dmul+0x22c>
 80017f4:	2180      	movs	r1, #128	; 0x80
 80017f6:	0249      	lsls	r1, r1, #9
 80017f8:	468c      	mov	ip, r1
 80017fa:	4467      	add	r7, ip
 80017fc:	0c29      	lsrs	r1, r5, #16
 80017fe:	468c      	mov	ip, r1
 8001800:	0039      	movs	r1, r7
 8001802:	0400      	lsls	r0, r0, #16
 8001804:	0c00      	lsrs	r0, r0, #16
 8001806:	042d      	lsls	r5, r5, #16
 8001808:	182d      	adds	r5, r5, r0
 800180a:	4461      	add	r1, ip
 800180c:	44ab      	add	fp, r5
 800180e:	9105      	str	r1, [sp, #20]
 8001810:	4659      	mov	r1, fp
 8001812:	9104      	str	r1, [sp, #16]
 8001814:	9901      	ldr	r1, [sp, #4]
 8001816:	040f      	lsls	r7, r1, #16
 8001818:	0c3f      	lsrs	r7, r7, #16
 800181a:	0c08      	lsrs	r0, r1, #16
 800181c:	0039      	movs	r1, r7
 800181e:	4351      	muls	r1, r2
 8001820:	4342      	muls	r2, r0
 8001822:	4690      	mov	r8, r2
 8001824:	0002      	movs	r2, r0
 8001826:	468c      	mov	ip, r1
 8001828:	0c09      	lsrs	r1, r1, #16
 800182a:	468b      	mov	fp, r1
 800182c:	4362      	muls	r2, r4
 800182e:	437c      	muls	r4, r7
 8001830:	4444      	add	r4, r8
 8001832:	445c      	add	r4, fp
 8001834:	45a0      	cmp	r8, r4
 8001836:	d903      	bls.n	8001840 <__aeabi_dmul+0x270>
 8001838:	2180      	movs	r1, #128	; 0x80
 800183a:	0249      	lsls	r1, r1, #9
 800183c:	4688      	mov	r8, r1
 800183e:	4442      	add	r2, r8
 8001840:	0c21      	lsrs	r1, r4, #16
 8001842:	4688      	mov	r8, r1
 8001844:	4661      	mov	r1, ip
 8001846:	0409      	lsls	r1, r1, #16
 8001848:	0c09      	lsrs	r1, r1, #16
 800184a:	468c      	mov	ip, r1
 800184c:	0039      	movs	r1, r7
 800184e:	4359      	muls	r1, r3
 8001850:	4343      	muls	r3, r0
 8001852:	4370      	muls	r0, r6
 8001854:	437e      	muls	r6, r7
 8001856:	0c0f      	lsrs	r7, r1, #16
 8001858:	18f6      	adds	r6, r6, r3
 800185a:	0424      	lsls	r4, r4, #16
 800185c:	19be      	adds	r6, r7, r6
 800185e:	4464      	add	r4, ip
 8001860:	4442      	add	r2, r8
 8001862:	468c      	mov	ip, r1
 8001864:	42b3      	cmp	r3, r6
 8001866:	d903      	bls.n	8001870 <__aeabi_dmul+0x2a0>
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	025b      	lsls	r3, r3, #9
 800186c:	4698      	mov	r8, r3
 800186e:	4440      	add	r0, r8
 8001870:	9b02      	ldr	r3, [sp, #8]
 8001872:	4661      	mov	r1, ip
 8001874:	4698      	mov	r8, r3
 8001876:	9b04      	ldr	r3, [sp, #16]
 8001878:	0437      	lsls	r7, r6, #16
 800187a:	4443      	add	r3, r8
 800187c:	469b      	mov	fp, r3
 800187e:	45ab      	cmp	fp, r5
 8001880:	41ad      	sbcs	r5, r5
 8001882:	426b      	negs	r3, r5
 8001884:	040d      	lsls	r5, r1, #16
 8001886:	9905      	ldr	r1, [sp, #20]
 8001888:	0c2d      	lsrs	r5, r5, #16
 800188a:	468c      	mov	ip, r1
 800188c:	197f      	adds	r7, r7, r5
 800188e:	4467      	add	r7, ip
 8001890:	18fd      	adds	r5, r7, r3
 8001892:	46a8      	mov	r8, r5
 8001894:	465d      	mov	r5, fp
 8001896:	192d      	adds	r5, r5, r4
 8001898:	42a5      	cmp	r5, r4
 800189a:	41a4      	sbcs	r4, r4
 800189c:	4693      	mov	fp, r2
 800189e:	4264      	negs	r4, r4
 80018a0:	46a4      	mov	ip, r4
 80018a2:	44c3      	add	fp, r8
 80018a4:	44dc      	add	ip, fp
 80018a6:	428f      	cmp	r7, r1
 80018a8:	41bf      	sbcs	r7, r7
 80018aa:	4598      	cmp	r8, r3
 80018ac:	419b      	sbcs	r3, r3
 80018ae:	4593      	cmp	fp, r2
 80018b0:	4192      	sbcs	r2, r2
 80018b2:	45a4      	cmp	ip, r4
 80018b4:	41a4      	sbcs	r4, r4
 80018b6:	425b      	negs	r3, r3
 80018b8:	427f      	negs	r7, r7
 80018ba:	431f      	orrs	r7, r3
 80018bc:	0c36      	lsrs	r6, r6, #16
 80018be:	4252      	negs	r2, r2
 80018c0:	4264      	negs	r4, r4
 80018c2:	19bf      	adds	r7, r7, r6
 80018c4:	4322      	orrs	r2, r4
 80018c6:	18bf      	adds	r7, r7, r2
 80018c8:	4662      	mov	r2, ip
 80018ca:	1838      	adds	r0, r7, r0
 80018cc:	0243      	lsls	r3, r0, #9
 80018ce:	0dd2      	lsrs	r2, r2, #23
 80018d0:	9903      	ldr	r1, [sp, #12]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	026a      	lsls	r2, r5, #9
 80018d6:	430a      	orrs	r2, r1
 80018d8:	1e50      	subs	r0, r2, #1
 80018da:	4182      	sbcs	r2, r0
 80018dc:	4661      	mov	r1, ip
 80018de:	0ded      	lsrs	r5, r5, #23
 80018e0:	432a      	orrs	r2, r5
 80018e2:	024e      	lsls	r6, r1, #9
 80018e4:	4332      	orrs	r2, r6
 80018e6:	01d9      	lsls	r1, r3, #7
 80018e8:	d400      	bmi.n	80018ec <__aeabi_dmul+0x31c>
 80018ea:	e0b3      	b.n	8001a54 <__aeabi_dmul+0x484>
 80018ec:	2601      	movs	r6, #1
 80018ee:	0850      	lsrs	r0, r2, #1
 80018f0:	4032      	ands	r2, r6
 80018f2:	4302      	orrs	r2, r0
 80018f4:	07de      	lsls	r6, r3, #31
 80018f6:	4332      	orrs	r2, r6
 80018f8:	085b      	lsrs	r3, r3, #1
 80018fa:	4c22      	ldr	r4, [pc, #136]	; (8001984 <__aeabi_dmul+0x3b4>)
 80018fc:	4454      	add	r4, sl
 80018fe:	2c00      	cmp	r4, #0
 8001900:	dd62      	ble.n	80019c8 <__aeabi_dmul+0x3f8>
 8001902:	0751      	lsls	r1, r2, #29
 8001904:	d009      	beq.n	800191a <__aeabi_dmul+0x34a>
 8001906:	200f      	movs	r0, #15
 8001908:	4010      	ands	r0, r2
 800190a:	2804      	cmp	r0, #4
 800190c:	d005      	beq.n	800191a <__aeabi_dmul+0x34a>
 800190e:	1d10      	adds	r0, r2, #4
 8001910:	4290      	cmp	r0, r2
 8001912:	4192      	sbcs	r2, r2
 8001914:	4252      	negs	r2, r2
 8001916:	189b      	adds	r3, r3, r2
 8001918:	0002      	movs	r2, r0
 800191a:	01d9      	lsls	r1, r3, #7
 800191c:	d504      	bpl.n	8001928 <__aeabi_dmul+0x358>
 800191e:	2480      	movs	r4, #128	; 0x80
 8001920:	4819      	ldr	r0, [pc, #100]	; (8001988 <__aeabi_dmul+0x3b8>)
 8001922:	00e4      	lsls	r4, r4, #3
 8001924:	4003      	ands	r3, r0
 8001926:	4454      	add	r4, sl
 8001928:	4818      	ldr	r0, [pc, #96]	; (800198c <__aeabi_dmul+0x3bc>)
 800192a:	4284      	cmp	r4, r0
 800192c:	dd00      	ble.n	8001930 <__aeabi_dmul+0x360>
 800192e:	e727      	b.n	8001780 <__aeabi_dmul+0x1b0>
 8001930:	075e      	lsls	r6, r3, #29
 8001932:	025b      	lsls	r3, r3, #9
 8001934:	08d2      	lsrs	r2, r2, #3
 8001936:	0b1f      	lsrs	r7, r3, #12
 8001938:	0563      	lsls	r3, r4, #21
 800193a:	4316      	orrs	r6, r2
 800193c:	0d5b      	lsrs	r3, r3, #21
 800193e:	e6b2      	b.n	80016a6 <__aeabi_dmul+0xd6>
 8001940:	2300      	movs	r3, #0
 8001942:	4699      	mov	r9, r3
 8001944:	3301      	adds	r3, #1
 8001946:	2704      	movs	r7, #4
 8001948:	2600      	movs	r6, #0
 800194a:	469b      	mov	fp, r3
 800194c:	e664      	b.n	8001618 <__aeabi_dmul+0x48>
 800194e:	2303      	movs	r3, #3
 8001950:	9701      	str	r7, [sp, #4]
 8001952:	4681      	mov	r9, r0
 8001954:	270c      	movs	r7, #12
 8001956:	469b      	mov	fp, r3
 8001958:	e65e      	b.n	8001618 <__aeabi_dmul+0x48>
 800195a:	2201      	movs	r2, #1
 800195c:	2001      	movs	r0, #1
 800195e:	4317      	orrs	r7, r2
 8001960:	2200      	movs	r2, #0
 8001962:	e676      	b.n	8001652 <__aeabi_dmul+0x82>
 8001964:	2303      	movs	r3, #3
 8001966:	2003      	movs	r0, #3
 8001968:	431f      	orrs	r7, r3
 800196a:	4643      	mov	r3, r8
 800196c:	e671      	b.n	8001652 <__aeabi_dmul+0x82>
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	000007ff 	.word	0x000007ff
 8001974:	fffffc01 	.word	0xfffffc01
 8001978:	0800a740 	.word	0x0800a740
 800197c:	800fffff 	.word	0x800fffff
 8001980:	fffffc0d 	.word	0xfffffc0d
 8001984:	000003ff 	.word	0x000003ff
 8001988:	feffffff 	.word	0xfeffffff
 800198c:	000007fe 	.word	0x000007fe
 8001990:	2300      	movs	r3, #0
 8001992:	2780      	movs	r7, #128	; 0x80
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	033f      	lsls	r7, r7, #12
 8001998:	2600      	movs	r6, #0
 800199a:	4b43      	ldr	r3, [pc, #268]	; (8001aa8 <__aeabi_dmul+0x4d8>)
 800199c:	e683      	b.n	80016a6 <__aeabi_dmul+0xd6>
 800199e:	9b01      	ldr	r3, [sp, #4]
 80019a0:	0032      	movs	r2, r6
 80019a2:	46a4      	mov	ip, r4
 80019a4:	4658      	mov	r0, fp
 80019a6:	e670      	b.n	800168a <__aeabi_dmul+0xba>
 80019a8:	46ac      	mov	ip, r5
 80019aa:	e66e      	b.n	800168a <__aeabi_dmul+0xba>
 80019ac:	2780      	movs	r7, #128	; 0x80
 80019ae:	9901      	ldr	r1, [sp, #4]
 80019b0:	033f      	lsls	r7, r7, #12
 80019b2:	4239      	tst	r1, r7
 80019b4:	d02d      	beq.n	8001a12 <__aeabi_dmul+0x442>
 80019b6:	423b      	tst	r3, r7
 80019b8:	d12b      	bne.n	8001a12 <__aeabi_dmul+0x442>
 80019ba:	431f      	orrs	r7, r3
 80019bc:	033f      	lsls	r7, r7, #12
 80019be:	0b3f      	lsrs	r7, r7, #12
 80019c0:	9500      	str	r5, [sp, #0]
 80019c2:	0016      	movs	r6, r2
 80019c4:	4b38      	ldr	r3, [pc, #224]	; (8001aa8 <__aeabi_dmul+0x4d8>)
 80019c6:	e66e      	b.n	80016a6 <__aeabi_dmul+0xd6>
 80019c8:	2501      	movs	r5, #1
 80019ca:	1b2d      	subs	r5, r5, r4
 80019cc:	2d38      	cmp	r5, #56	; 0x38
 80019ce:	dd00      	ble.n	80019d2 <__aeabi_dmul+0x402>
 80019d0:	e666      	b.n	80016a0 <__aeabi_dmul+0xd0>
 80019d2:	2d1f      	cmp	r5, #31
 80019d4:	dc40      	bgt.n	8001a58 <__aeabi_dmul+0x488>
 80019d6:	4835      	ldr	r0, [pc, #212]	; (8001aac <__aeabi_dmul+0x4dc>)
 80019d8:	001c      	movs	r4, r3
 80019da:	4450      	add	r0, sl
 80019dc:	0016      	movs	r6, r2
 80019de:	4082      	lsls	r2, r0
 80019e0:	4084      	lsls	r4, r0
 80019e2:	40ee      	lsrs	r6, r5
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	4182      	sbcs	r2, r0
 80019e8:	4334      	orrs	r4, r6
 80019ea:	4314      	orrs	r4, r2
 80019ec:	40eb      	lsrs	r3, r5
 80019ee:	0762      	lsls	r2, r4, #29
 80019f0:	d009      	beq.n	8001a06 <__aeabi_dmul+0x436>
 80019f2:	220f      	movs	r2, #15
 80019f4:	4022      	ands	r2, r4
 80019f6:	2a04      	cmp	r2, #4
 80019f8:	d005      	beq.n	8001a06 <__aeabi_dmul+0x436>
 80019fa:	0022      	movs	r2, r4
 80019fc:	1d14      	adds	r4, r2, #4
 80019fe:	4294      	cmp	r4, r2
 8001a00:	4180      	sbcs	r0, r0
 8001a02:	4240      	negs	r0, r0
 8001a04:	181b      	adds	r3, r3, r0
 8001a06:	021a      	lsls	r2, r3, #8
 8001a08:	d53e      	bpl.n	8001a88 <__aeabi_dmul+0x4b8>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	2700      	movs	r7, #0
 8001a0e:	2600      	movs	r6, #0
 8001a10:	e649      	b.n	80016a6 <__aeabi_dmul+0xd6>
 8001a12:	2780      	movs	r7, #128	; 0x80
 8001a14:	9b01      	ldr	r3, [sp, #4]
 8001a16:	033f      	lsls	r7, r7, #12
 8001a18:	431f      	orrs	r7, r3
 8001a1a:	033f      	lsls	r7, r7, #12
 8001a1c:	0b3f      	lsrs	r7, r7, #12
 8001a1e:	9400      	str	r4, [sp, #0]
 8001a20:	4b21      	ldr	r3, [pc, #132]	; (8001aa8 <__aeabi_dmul+0x4d8>)
 8001a22:	e640      	b.n	80016a6 <__aeabi_dmul+0xd6>
 8001a24:	0003      	movs	r3, r0
 8001a26:	465a      	mov	r2, fp
 8001a28:	3b28      	subs	r3, #40	; 0x28
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	2600      	movs	r6, #0
 8001a2e:	9201      	str	r2, [sp, #4]
 8001a30:	e66d      	b.n	800170e <__aeabi_dmul+0x13e>
 8001a32:	4658      	mov	r0, fp
 8001a34:	f000 fd1a 	bl	800246c <__clzsi2>
 8001a38:	3020      	adds	r0, #32
 8001a3a:	e657      	b.n	80016ec <__aeabi_dmul+0x11c>
 8001a3c:	0003      	movs	r3, r0
 8001a3e:	4652      	mov	r2, sl
 8001a40:	3b28      	subs	r3, #40	; 0x28
 8001a42:	409a      	lsls	r2, r3
 8001a44:	0013      	movs	r3, r2
 8001a46:	2200      	movs	r2, #0
 8001a48:	e693      	b.n	8001772 <__aeabi_dmul+0x1a2>
 8001a4a:	4650      	mov	r0, sl
 8001a4c:	f000 fd0e 	bl	800246c <__clzsi2>
 8001a50:	3020      	adds	r0, #32
 8001a52:	e67b      	b.n	800174c <__aeabi_dmul+0x17c>
 8001a54:	46ca      	mov	sl, r9
 8001a56:	e750      	b.n	80018fa <__aeabi_dmul+0x32a>
 8001a58:	201f      	movs	r0, #31
 8001a5a:	001e      	movs	r6, r3
 8001a5c:	4240      	negs	r0, r0
 8001a5e:	1b04      	subs	r4, r0, r4
 8001a60:	40e6      	lsrs	r6, r4
 8001a62:	2d20      	cmp	r5, #32
 8001a64:	d003      	beq.n	8001a6e <__aeabi_dmul+0x49e>
 8001a66:	4c12      	ldr	r4, [pc, #72]	; (8001ab0 <__aeabi_dmul+0x4e0>)
 8001a68:	4454      	add	r4, sl
 8001a6a:	40a3      	lsls	r3, r4
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	1e50      	subs	r0, r2, #1
 8001a70:	4182      	sbcs	r2, r0
 8001a72:	4332      	orrs	r2, r6
 8001a74:	2607      	movs	r6, #7
 8001a76:	2700      	movs	r7, #0
 8001a78:	4016      	ands	r6, r2
 8001a7a:	d009      	beq.n	8001a90 <__aeabi_dmul+0x4c0>
 8001a7c:	200f      	movs	r0, #15
 8001a7e:	2300      	movs	r3, #0
 8001a80:	4010      	ands	r0, r2
 8001a82:	0014      	movs	r4, r2
 8001a84:	2804      	cmp	r0, #4
 8001a86:	d1b9      	bne.n	80019fc <__aeabi_dmul+0x42c>
 8001a88:	0022      	movs	r2, r4
 8001a8a:	075e      	lsls	r6, r3, #29
 8001a8c:	025b      	lsls	r3, r3, #9
 8001a8e:	0b1f      	lsrs	r7, r3, #12
 8001a90:	08d2      	lsrs	r2, r2, #3
 8001a92:	4316      	orrs	r6, r2
 8001a94:	2300      	movs	r3, #0
 8001a96:	e606      	b.n	80016a6 <__aeabi_dmul+0xd6>
 8001a98:	2780      	movs	r7, #128	; 0x80
 8001a9a:	033f      	lsls	r7, r7, #12
 8001a9c:	431f      	orrs	r7, r3
 8001a9e:	033f      	lsls	r7, r7, #12
 8001aa0:	0b3f      	lsrs	r7, r7, #12
 8001aa2:	0016      	movs	r6, r2
 8001aa4:	4b00      	ldr	r3, [pc, #0]	; (8001aa8 <__aeabi_dmul+0x4d8>)
 8001aa6:	e5fe      	b.n	80016a6 <__aeabi_dmul+0xd6>
 8001aa8:	000007ff 	.word	0x000007ff
 8001aac:	0000041e 	.word	0x0000041e
 8001ab0:	0000043e 	.word	0x0000043e

08001ab4 <__aeabi_dsub>:
 8001ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ab6:	4657      	mov	r7, sl
 8001ab8:	464e      	mov	r6, r9
 8001aba:	4645      	mov	r5, r8
 8001abc:	46de      	mov	lr, fp
 8001abe:	000c      	movs	r4, r1
 8001ac0:	0309      	lsls	r1, r1, #12
 8001ac2:	b5e0      	push	{r5, r6, r7, lr}
 8001ac4:	0a49      	lsrs	r1, r1, #9
 8001ac6:	0f46      	lsrs	r6, r0, #29
 8001ac8:	005f      	lsls	r7, r3, #1
 8001aca:	4331      	orrs	r1, r6
 8001acc:	031e      	lsls	r6, r3, #12
 8001ace:	0fdb      	lsrs	r3, r3, #31
 8001ad0:	0a76      	lsrs	r6, r6, #9
 8001ad2:	469b      	mov	fp, r3
 8001ad4:	0f53      	lsrs	r3, r2, #29
 8001ad6:	4333      	orrs	r3, r6
 8001ad8:	4ec8      	ldr	r6, [pc, #800]	; (8001dfc <__aeabi_dsub+0x348>)
 8001ada:	0065      	lsls	r5, r4, #1
 8001adc:	00c0      	lsls	r0, r0, #3
 8001ade:	0fe4      	lsrs	r4, r4, #31
 8001ae0:	00d2      	lsls	r2, r2, #3
 8001ae2:	0d6d      	lsrs	r5, r5, #21
 8001ae4:	46a2      	mov	sl, r4
 8001ae6:	4681      	mov	r9, r0
 8001ae8:	0d7f      	lsrs	r7, r7, #21
 8001aea:	469c      	mov	ip, r3
 8001aec:	4690      	mov	r8, r2
 8001aee:	42b7      	cmp	r7, r6
 8001af0:	d100      	bne.n	8001af4 <__aeabi_dsub+0x40>
 8001af2:	e0b9      	b.n	8001c68 <__aeabi_dsub+0x1b4>
 8001af4:	465b      	mov	r3, fp
 8001af6:	2601      	movs	r6, #1
 8001af8:	4073      	eors	r3, r6
 8001afa:	469b      	mov	fp, r3
 8001afc:	1bee      	subs	r6, r5, r7
 8001afe:	45a3      	cmp	fp, r4
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dsub+0x50>
 8001b02:	e083      	b.n	8001c0c <__aeabi_dsub+0x158>
 8001b04:	2e00      	cmp	r6, #0
 8001b06:	dd63      	ble.n	8001bd0 <__aeabi_dsub+0x11c>
 8001b08:	2f00      	cmp	r7, #0
 8001b0a:	d000      	beq.n	8001b0e <__aeabi_dsub+0x5a>
 8001b0c:	e0b1      	b.n	8001c72 <__aeabi_dsub+0x1be>
 8001b0e:	4663      	mov	r3, ip
 8001b10:	4313      	orrs	r3, r2
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dsub+0x62>
 8001b14:	e123      	b.n	8001d5e <__aeabi_dsub+0x2aa>
 8001b16:	1e73      	subs	r3, r6, #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d000      	beq.n	8001b1e <__aeabi_dsub+0x6a>
 8001b1c:	e1ba      	b.n	8001e94 <__aeabi_dsub+0x3e0>
 8001b1e:	1a86      	subs	r6, r0, r2
 8001b20:	4663      	mov	r3, ip
 8001b22:	42b0      	cmp	r0, r6
 8001b24:	4180      	sbcs	r0, r0
 8001b26:	2501      	movs	r5, #1
 8001b28:	1ac9      	subs	r1, r1, r3
 8001b2a:	4240      	negs	r0, r0
 8001b2c:	1a09      	subs	r1, r1, r0
 8001b2e:	020b      	lsls	r3, r1, #8
 8001b30:	d400      	bmi.n	8001b34 <__aeabi_dsub+0x80>
 8001b32:	e147      	b.n	8001dc4 <__aeabi_dsub+0x310>
 8001b34:	0249      	lsls	r1, r1, #9
 8001b36:	0a4b      	lsrs	r3, r1, #9
 8001b38:	4698      	mov	r8, r3
 8001b3a:	4643      	mov	r3, r8
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dsub+0x8e>
 8001b40:	e189      	b.n	8001e56 <__aeabi_dsub+0x3a2>
 8001b42:	4640      	mov	r0, r8
 8001b44:	f000 fc92 	bl	800246c <__clzsi2>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	3b08      	subs	r3, #8
 8001b4c:	2b1f      	cmp	r3, #31
 8001b4e:	dd00      	ble.n	8001b52 <__aeabi_dsub+0x9e>
 8001b50:	e17c      	b.n	8001e4c <__aeabi_dsub+0x398>
 8001b52:	2220      	movs	r2, #32
 8001b54:	0030      	movs	r0, r6
 8001b56:	1ad2      	subs	r2, r2, r3
 8001b58:	4641      	mov	r1, r8
 8001b5a:	40d0      	lsrs	r0, r2
 8001b5c:	4099      	lsls	r1, r3
 8001b5e:	0002      	movs	r2, r0
 8001b60:	409e      	lsls	r6, r3
 8001b62:	430a      	orrs	r2, r1
 8001b64:	429d      	cmp	r5, r3
 8001b66:	dd00      	ble.n	8001b6a <__aeabi_dsub+0xb6>
 8001b68:	e16a      	b.n	8001e40 <__aeabi_dsub+0x38c>
 8001b6a:	1b5d      	subs	r5, r3, r5
 8001b6c:	1c6b      	adds	r3, r5, #1
 8001b6e:	2b1f      	cmp	r3, #31
 8001b70:	dd00      	ble.n	8001b74 <__aeabi_dsub+0xc0>
 8001b72:	e194      	b.n	8001e9e <__aeabi_dsub+0x3ea>
 8001b74:	2120      	movs	r1, #32
 8001b76:	0010      	movs	r0, r2
 8001b78:	0035      	movs	r5, r6
 8001b7a:	1ac9      	subs	r1, r1, r3
 8001b7c:	408e      	lsls	r6, r1
 8001b7e:	40da      	lsrs	r2, r3
 8001b80:	4088      	lsls	r0, r1
 8001b82:	40dd      	lsrs	r5, r3
 8001b84:	1e71      	subs	r1, r6, #1
 8001b86:	418e      	sbcs	r6, r1
 8001b88:	0011      	movs	r1, r2
 8001b8a:	2207      	movs	r2, #7
 8001b8c:	4328      	orrs	r0, r5
 8001b8e:	2500      	movs	r5, #0
 8001b90:	4306      	orrs	r6, r0
 8001b92:	4032      	ands	r2, r6
 8001b94:	2a00      	cmp	r2, #0
 8001b96:	d009      	beq.n	8001bac <__aeabi_dsub+0xf8>
 8001b98:	230f      	movs	r3, #15
 8001b9a:	4033      	ands	r3, r6
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d005      	beq.n	8001bac <__aeabi_dsub+0xf8>
 8001ba0:	1d33      	adds	r3, r6, #4
 8001ba2:	42b3      	cmp	r3, r6
 8001ba4:	41b6      	sbcs	r6, r6
 8001ba6:	4276      	negs	r6, r6
 8001ba8:	1989      	adds	r1, r1, r6
 8001baa:	001e      	movs	r6, r3
 8001bac:	020b      	lsls	r3, r1, #8
 8001bae:	d400      	bmi.n	8001bb2 <__aeabi_dsub+0xfe>
 8001bb0:	e23d      	b.n	800202e <__aeabi_dsub+0x57a>
 8001bb2:	1c6a      	adds	r2, r5, #1
 8001bb4:	4b91      	ldr	r3, [pc, #580]	; (8001dfc <__aeabi_dsub+0x348>)
 8001bb6:	0555      	lsls	r5, r2, #21
 8001bb8:	0d6d      	lsrs	r5, r5, #21
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_dsub+0x10c>
 8001bbe:	e119      	b.n	8001df4 <__aeabi_dsub+0x340>
 8001bc0:	4a8f      	ldr	r2, [pc, #572]	; (8001e00 <__aeabi_dsub+0x34c>)
 8001bc2:	08f6      	lsrs	r6, r6, #3
 8001bc4:	400a      	ands	r2, r1
 8001bc6:	0757      	lsls	r7, r2, #29
 8001bc8:	0252      	lsls	r2, r2, #9
 8001bca:	4337      	orrs	r7, r6
 8001bcc:	0b12      	lsrs	r2, r2, #12
 8001bce:	e09b      	b.n	8001d08 <__aeabi_dsub+0x254>
 8001bd0:	2e00      	cmp	r6, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dsub+0x122>
 8001bd4:	e0c5      	b.n	8001d62 <__aeabi_dsub+0x2ae>
 8001bd6:	1c6e      	adds	r6, r5, #1
 8001bd8:	0576      	lsls	r6, r6, #21
 8001bda:	0d76      	lsrs	r6, r6, #21
 8001bdc:	2e01      	cmp	r6, #1
 8001bde:	dc00      	bgt.n	8001be2 <__aeabi_dsub+0x12e>
 8001be0:	e148      	b.n	8001e74 <__aeabi_dsub+0x3c0>
 8001be2:	4667      	mov	r7, ip
 8001be4:	1a86      	subs	r6, r0, r2
 8001be6:	1bcb      	subs	r3, r1, r7
 8001be8:	42b0      	cmp	r0, r6
 8001bea:	41bf      	sbcs	r7, r7
 8001bec:	427f      	negs	r7, r7
 8001bee:	46b8      	mov	r8, r7
 8001bf0:	001f      	movs	r7, r3
 8001bf2:	4643      	mov	r3, r8
 8001bf4:	1aff      	subs	r7, r7, r3
 8001bf6:	003b      	movs	r3, r7
 8001bf8:	46b8      	mov	r8, r7
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	d500      	bpl.n	8001c00 <__aeabi_dsub+0x14c>
 8001bfe:	e15f      	b.n	8001ec0 <__aeabi_dsub+0x40c>
 8001c00:	4337      	orrs	r7, r6
 8001c02:	d19a      	bne.n	8001b3a <__aeabi_dsub+0x86>
 8001c04:	2200      	movs	r2, #0
 8001c06:	2400      	movs	r4, #0
 8001c08:	2500      	movs	r5, #0
 8001c0a:	e079      	b.n	8001d00 <__aeabi_dsub+0x24c>
 8001c0c:	2e00      	cmp	r6, #0
 8001c0e:	dc00      	bgt.n	8001c12 <__aeabi_dsub+0x15e>
 8001c10:	e0fa      	b.n	8001e08 <__aeabi_dsub+0x354>
 8001c12:	2f00      	cmp	r7, #0
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x164>
 8001c16:	e08d      	b.n	8001d34 <__aeabi_dsub+0x280>
 8001c18:	4b78      	ldr	r3, [pc, #480]	; (8001dfc <__aeabi_dsub+0x348>)
 8001c1a:	429d      	cmp	r5, r3
 8001c1c:	d067      	beq.n	8001cee <__aeabi_dsub+0x23a>
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	4667      	mov	r7, ip
 8001c22:	041b      	lsls	r3, r3, #16
 8001c24:	431f      	orrs	r7, r3
 8001c26:	46bc      	mov	ip, r7
 8001c28:	2e38      	cmp	r6, #56	; 0x38
 8001c2a:	dc00      	bgt.n	8001c2e <__aeabi_dsub+0x17a>
 8001c2c:	e152      	b.n	8001ed4 <__aeabi_dsub+0x420>
 8001c2e:	4663      	mov	r3, ip
 8001c30:	4313      	orrs	r3, r2
 8001c32:	1e5a      	subs	r2, r3, #1
 8001c34:	4193      	sbcs	r3, r2
 8001c36:	181e      	adds	r6, r3, r0
 8001c38:	4286      	cmp	r6, r0
 8001c3a:	4180      	sbcs	r0, r0
 8001c3c:	4240      	negs	r0, r0
 8001c3e:	1809      	adds	r1, r1, r0
 8001c40:	020b      	lsls	r3, r1, #8
 8001c42:	d400      	bmi.n	8001c46 <__aeabi_dsub+0x192>
 8001c44:	e0be      	b.n	8001dc4 <__aeabi_dsub+0x310>
 8001c46:	4b6d      	ldr	r3, [pc, #436]	; (8001dfc <__aeabi_dsub+0x348>)
 8001c48:	3501      	adds	r5, #1
 8001c4a:	429d      	cmp	r5, r3
 8001c4c:	d100      	bne.n	8001c50 <__aeabi_dsub+0x19c>
 8001c4e:	e0d2      	b.n	8001df6 <__aeabi_dsub+0x342>
 8001c50:	4a6b      	ldr	r2, [pc, #428]	; (8001e00 <__aeabi_dsub+0x34c>)
 8001c52:	0873      	lsrs	r3, r6, #1
 8001c54:	400a      	ands	r2, r1
 8001c56:	2101      	movs	r1, #1
 8001c58:	400e      	ands	r6, r1
 8001c5a:	431e      	orrs	r6, r3
 8001c5c:	0851      	lsrs	r1, r2, #1
 8001c5e:	07d3      	lsls	r3, r2, #31
 8001c60:	2207      	movs	r2, #7
 8001c62:	431e      	orrs	r6, r3
 8001c64:	4032      	ands	r2, r6
 8001c66:	e795      	b.n	8001b94 <__aeabi_dsub+0xe0>
 8001c68:	001e      	movs	r6, r3
 8001c6a:	4316      	orrs	r6, r2
 8001c6c:	d000      	beq.n	8001c70 <__aeabi_dsub+0x1bc>
 8001c6e:	e745      	b.n	8001afc <__aeabi_dsub+0x48>
 8001c70:	e740      	b.n	8001af4 <__aeabi_dsub+0x40>
 8001c72:	4b62      	ldr	r3, [pc, #392]	; (8001dfc <__aeabi_dsub+0x348>)
 8001c74:	429d      	cmp	r5, r3
 8001c76:	d03a      	beq.n	8001cee <__aeabi_dsub+0x23a>
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	4667      	mov	r7, ip
 8001c7c:	041b      	lsls	r3, r3, #16
 8001c7e:	431f      	orrs	r7, r3
 8001c80:	46bc      	mov	ip, r7
 8001c82:	2e38      	cmp	r6, #56	; 0x38
 8001c84:	dd00      	ble.n	8001c88 <__aeabi_dsub+0x1d4>
 8001c86:	e0eb      	b.n	8001e60 <__aeabi_dsub+0x3ac>
 8001c88:	2e1f      	cmp	r6, #31
 8001c8a:	dc00      	bgt.n	8001c8e <__aeabi_dsub+0x1da>
 8001c8c:	e13a      	b.n	8001f04 <__aeabi_dsub+0x450>
 8001c8e:	0033      	movs	r3, r6
 8001c90:	4667      	mov	r7, ip
 8001c92:	3b20      	subs	r3, #32
 8001c94:	40df      	lsrs	r7, r3
 8001c96:	003b      	movs	r3, r7
 8001c98:	2e20      	cmp	r6, #32
 8001c9a:	d005      	beq.n	8001ca8 <__aeabi_dsub+0x1f4>
 8001c9c:	2740      	movs	r7, #64	; 0x40
 8001c9e:	1bbf      	subs	r7, r7, r6
 8001ca0:	4666      	mov	r6, ip
 8001ca2:	40be      	lsls	r6, r7
 8001ca4:	4332      	orrs	r2, r6
 8001ca6:	4690      	mov	r8, r2
 8001ca8:	4646      	mov	r6, r8
 8001caa:	1e72      	subs	r2, r6, #1
 8001cac:	4196      	sbcs	r6, r2
 8001cae:	4333      	orrs	r3, r6
 8001cb0:	e0da      	b.n	8001e68 <__aeabi_dsub+0x3b4>
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_dsub+0x204>
 8001cb6:	e214      	b.n	80020e2 <__aeabi_dsub+0x62e>
 8001cb8:	4663      	mov	r3, ip
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x20c>
 8001cbe:	e168      	b.n	8001f92 <__aeabi_dsub+0x4de>
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	074e      	lsls	r6, r1, #29
 8001cc4:	08c0      	lsrs	r0, r0, #3
 8001cc6:	08c9      	lsrs	r1, r1, #3
 8001cc8:	031b      	lsls	r3, r3, #12
 8001cca:	4306      	orrs	r6, r0
 8001ccc:	4219      	tst	r1, r3
 8001cce:	d008      	beq.n	8001ce2 <__aeabi_dsub+0x22e>
 8001cd0:	4660      	mov	r0, ip
 8001cd2:	08c0      	lsrs	r0, r0, #3
 8001cd4:	4218      	tst	r0, r3
 8001cd6:	d104      	bne.n	8001ce2 <__aeabi_dsub+0x22e>
 8001cd8:	4663      	mov	r3, ip
 8001cda:	0001      	movs	r1, r0
 8001cdc:	08d2      	lsrs	r2, r2, #3
 8001cde:	075e      	lsls	r6, r3, #29
 8001ce0:	4316      	orrs	r6, r2
 8001ce2:	00f3      	lsls	r3, r6, #3
 8001ce4:	4699      	mov	r9, r3
 8001ce6:	00c9      	lsls	r1, r1, #3
 8001ce8:	0f72      	lsrs	r2, r6, #29
 8001cea:	4d44      	ldr	r5, [pc, #272]	; (8001dfc <__aeabi_dsub+0x348>)
 8001cec:	4311      	orrs	r1, r2
 8001cee:	464b      	mov	r3, r9
 8001cf0:	08de      	lsrs	r6, r3, #3
 8001cf2:	4b42      	ldr	r3, [pc, #264]	; (8001dfc <__aeabi_dsub+0x348>)
 8001cf4:	074f      	lsls	r7, r1, #29
 8001cf6:	4337      	orrs	r7, r6
 8001cf8:	08ca      	lsrs	r2, r1, #3
 8001cfa:	429d      	cmp	r5, r3
 8001cfc:	d100      	bne.n	8001d00 <__aeabi_dsub+0x24c>
 8001cfe:	e06e      	b.n	8001dde <__aeabi_dsub+0x32a>
 8001d00:	0312      	lsls	r2, r2, #12
 8001d02:	056d      	lsls	r5, r5, #21
 8001d04:	0b12      	lsrs	r2, r2, #12
 8001d06:	0d6d      	lsrs	r5, r5, #21
 8001d08:	2100      	movs	r1, #0
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	0b13      	lsrs	r3, r2, #12
 8001d0e:	0d0a      	lsrs	r2, r1, #20
 8001d10:	0512      	lsls	r2, r2, #20
 8001d12:	431a      	orrs	r2, r3
 8001d14:	4b3b      	ldr	r3, [pc, #236]	; (8001e04 <__aeabi_dsub+0x350>)
 8001d16:	052d      	lsls	r5, r5, #20
 8001d18:	4013      	ands	r3, r2
 8001d1a:	432b      	orrs	r3, r5
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	07e4      	lsls	r4, r4, #31
 8001d20:	085b      	lsrs	r3, r3, #1
 8001d22:	4323      	orrs	r3, r4
 8001d24:	0038      	movs	r0, r7
 8001d26:	0019      	movs	r1, r3
 8001d28:	bc3c      	pop	{r2, r3, r4, r5}
 8001d2a:	4690      	mov	r8, r2
 8001d2c:	4699      	mov	r9, r3
 8001d2e:	46a2      	mov	sl, r4
 8001d30:	46ab      	mov	fp, r5
 8001d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d34:	4663      	mov	r3, ip
 8001d36:	4313      	orrs	r3, r2
 8001d38:	d011      	beq.n	8001d5e <__aeabi_dsub+0x2aa>
 8001d3a:	1e73      	subs	r3, r6, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d000      	beq.n	8001d42 <__aeabi_dsub+0x28e>
 8001d40:	e107      	b.n	8001f52 <__aeabi_dsub+0x49e>
 8001d42:	1886      	adds	r6, r0, r2
 8001d44:	4286      	cmp	r6, r0
 8001d46:	4180      	sbcs	r0, r0
 8001d48:	4461      	add	r1, ip
 8001d4a:	4240      	negs	r0, r0
 8001d4c:	1809      	adds	r1, r1, r0
 8001d4e:	2501      	movs	r5, #1
 8001d50:	020b      	lsls	r3, r1, #8
 8001d52:	d537      	bpl.n	8001dc4 <__aeabi_dsub+0x310>
 8001d54:	2502      	movs	r5, #2
 8001d56:	e77b      	b.n	8001c50 <__aeabi_dsub+0x19c>
 8001d58:	003e      	movs	r6, r7
 8001d5a:	4661      	mov	r1, ip
 8001d5c:	4691      	mov	r9, r2
 8001d5e:	0035      	movs	r5, r6
 8001d60:	e7c5      	b.n	8001cee <__aeabi_dsub+0x23a>
 8001d62:	465c      	mov	r4, fp
 8001d64:	2d00      	cmp	r5, #0
 8001d66:	d000      	beq.n	8001d6a <__aeabi_dsub+0x2b6>
 8001d68:	e0e1      	b.n	8001f2e <__aeabi_dsub+0x47a>
 8001d6a:	000b      	movs	r3, r1
 8001d6c:	4303      	orrs	r3, r0
 8001d6e:	d0f3      	beq.n	8001d58 <__aeabi_dsub+0x2a4>
 8001d70:	1c73      	adds	r3, r6, #1
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x2c2>
 8001d74:	e1ac      	b.n	80020d0 <__aeabi_dsub+0x61c>
 8001d76:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <__aeabi_dsub+0x348>)
 8001d78:	429f      	cmp	r7, r3
 8001d7a:	d100      	bne.n	8001d7e <__aeabi_dsub+0x2ca>
 8001d7c:	e13a      	b.n	8001ff4 <__aeabi_dsub+0x540>
 8001d7e:	43f3      	mvns	r3, r6
 8001d80:	2b38      	cmp	r3, #56	; 0x38
 8001d82:	dd00      	ble.n	8001d86 <__aeabi_dsub+0x2d2>
 8001d84:	e16f      	b.n	8002066 <__aeabi_dsub+0x5b2>
 8001d86:	2b1f      	cmp	r3, #31
 8001d88:	dd00      	ble.n	8001d8c <__aeabi_dsub+0x2d8>
 8001d8a:	e18c      	b.n	80020a6 <__aeabi_dsub+0x5f2>
 8001d8c:	2520      	movs	r5, #32
 8001d8e:	000e      	movs	r6, r1
 8001d90:	1aed      	subs	r5, r5, r3
 8001d92:	40ae      	lsls	r6, r5
 8001d94:	46b0      	mov	r8, r6
 8001d96:	0006      	movs	r6, r0
 8001d98:	46aa      	mov	sl, r5
 8001d9a:	40de      	lsrs	r6, r3
 8001d9c:	4645      	mov	r5, r8
 8001d9e:	4335      	orrs	r5, r6
 8001da0:	002e      	movs	r6, r5
 8001da2:	4655      	mov	r5, sl
 8001da4:	40d9      	lsrs	r1, r3
 8001da6:	40a8      	lsls	r0, r5
 8001da8:	4663      	mov	r3, ip
 8001daa:	1e45      	subs	r5, r0, #1
 8001dac:	41a8      	sbcs	r0, r5
 8001dae:	1a5b      	subs	r3, r3, r1
 8001db0:	469c      	mov	ip, r3
 8001db2:	4330      	orrs	r0, r6
 8001db4:	1a16      	subs	r6, r2, r0
 8001db6:	42b2      	cmp	r2, r6
 8001db8:	4192      	sbcs	r2, r2
 8001dba:	4663      	mov	r3, ip
 8001dbc:	4252      	negs	r2, r2
 8001dbe:	1a99      	subs	r1, r3, r2
 8001dc0:	003d      	movs	r5, r7
 8001dc2:	e6b4      	b.n	8001b2e <__aeabi_dsub+0x7a>
 8001dc4:	2207      	movs	r2, #7
 8001dc6:	4032      	ands	r2, r6
 8001dc8:	2a00      	cmp	r2, #0
 8001dca:	d000      	beq.n	8001dce <__aeabi_dsub+0x31a>
 8001dcc:	e6e4      	b.n	8001b98 <__aeabi_dsub+0xe4>
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <__aeabi_dsub+0x348>)
 8001dd0:	08f6      	lsrs	r6, r6, #3
 8001dd2:	074f      	lsls	r7, r1, #29
 8001dd4:	4337      	orrs	r7, r6
 8001dd6:	08ca      	lsrs	r2, r1, #3
 8001dd8:	429d      	cmp	r5, r3
 8001dda:	d000      	beq.n	8001dde <__aeabi_dsub+0x32a>
 8001ddc:	e790      	b.n	8001d00 <__aeabi_dsub+0x24c>
 8001dde:	003b      	movs	r3, r7
 8001de0:	4313      	orrs	r3, r2
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x332>
 8001de4:	e1a6      	b.n	8002134 <__aeabi_dsub+0x680>
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	031b      	lsls	r3, r3, #12
 8001dea:	431a      	orrs	r2, r3
 8001dec:	0312      	lsls	r2, r2, #12
 8001dee:	0b12      	lsrs	r2, r2, #12
 8001df0:	4d02      	ldr	r5, [pc, #8]	; (8001dfc <__aeabi_dsub+0x348>)
 8001df2:	e789      	b.n	8001d08 <__aeabi_dsub+0x254>
 8001df4:	0015      	movs	r5, r2
 8001df6:	2200      	movs	r2, #0
 8001df8:	2700      	movs	r7, #0
 8001dfa:	e785      	b.n	8001d08 <__aeabi_dsub+0x254>
 8001dfc:	000007ff 	.word	0x000007ff
 8001e00:	ff7fffff 	.word	0xff7fffff
 8001e04:	800fffff 	.word	0x800fffff
 8001e08:	2e00      	cmp	r6, #0
 8001e0a:	d000      	beq.n	8001e0e <__aeabi_dsub+0x35a>
 8001e0c:	e0c7      	b.n	8001f9e <__aeabi_dsub+0x4ea>
 8001e0e:	1c6b      	adds	r3, r5, #1
 8001e10:	055e      	lsls	r6, r3, #21
 8001e12:	0d76      	lsrs	r6, r6, #21
 8001e14:	2e01      	cmp	r6, #1
 8001e16:	dc00      	bgt.n	8001e1a <__aeabi_dsub+0x366>
 8001e18:	e0f0      	b.n	8001ffc <__aeabi_dsub+0x548>
 8001e1a:	4dc8      	ldr	r5, [pc, #800]	; (800213c <__aeabi_dsub+0x688>)
 8001e1c:	42ab      	cmp	r3, r5
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x36e>
 8001e20:	e0b9      	b.n	8001f96 <__aeabi_dsub+0x4e2>
 8001e22:	1885      	adds	r5, r0, r2
 8001e24:	000a      	movs	r2, r1
 8001e26:	4285      	cmp	r5, r0
 8001e28:	4189      	sbcs	r1, r1
 8001e2a:	4462      	add	r2, ip
 8001e2c:	4249      	negs	r1, r1
 8001e2e:	1851      	adds	r1, r2, r1
 8001e30:	2207      	movs	r2, #7
 8001e32:	07ce      	lsls	r6, r1, #31
 8001e34:	086d      	lsrs	r5, r5, #1
 8001e36:	432e      	orrs	r6, r5
 8001e38:	0849      	lsrs	r1, r1, #1
 8001e3a:	4032      	ands	r2, r6
 8001e3c:	001d      	movs	r5, r3
 8001e3e:	e6a9      	b.n	8001b94 <__aeabi_dsub+0xe0>
 8001e40:	49bf      	ldr	r1, [pc, #764]	; (8002140 <__aeabi_dsub+0x68c>)
 8001e42:	1aed      	subs	r5, r5, r3
 8001e44:	4011      	ands	r1, r2
 8001e46:	2207      	movs	r2, #7
 8001e48:	4032      	ands	r2, r6
 8001e4a:	e6a3      	b.n	8001b94 <__aeabi_dsub+0xe0>
 8001e4c:	0032      	movs	r2, r6
 8001e4e:	3828      	subs	r0, #40	; 0x28
 8001e50:	4082      	lsls	r2, r0
 8001e52:	2600      	movs	r6, #0
 8001e54:	e686      	b.n	8001b64 <__aeabi_dsub+0xb0>
 8001e56:	0030      	movs	r0, r6
 8001e58:	f000 fb08 	bl	800246c <__clzsi2>
 8001e5c:	3020      	adds	r0, #32
 8001e5e:	e673      	b.n	8001b48 <__aeabi_dsub+0x94>
 8001e60:	4663      	mov	r3, ip
 8001e62:	4313      	orrs	r3, r2
 8001e64:	1e5a      	subs	r2, r3, #1
 8001e66:	4193      	sbcs	r3, r2
 8001e68:	1ac6      	subs	r6, r0, r3
 8001e6a:	42b0      	cmp	r0, r6
 8001e6c:	4180      	sbcs	r0, r0
 8001e6e:	4240      	negs	r0, r0
 8001e70:	1a09      	subs	r1, r1, r0
 8001e72:	e65c      	b.n	8001b2e <__aeabi_dsub+0x7a>
 8001e74:	000e      	movs	r6, r1
 8001e76:	4667      	mov	r7, ip
 8001e78:	4306      	orrs	r6, r0
 8001e7a:	4317      	orrs	r7, r2
 8001e7c:	2d00      	cmp	r5, #0
 8001e7e:	d15e      	bne.n	8001f3e <__aeabi_dsub+0x48a>
 8001e80:	2e00      	cmp	r6, #0
 8001e82:	d000      	beq.n	8001e86 <__aeabi_dsub+0x3d2>
 8001e84:	e0f3      	b.n	800206e <__aeabi_dsub+0x5ba>
 8001e86:	2f00      	cmp	r7, #0
 8001e88:	d100      	bne.n	8001e8c <__aeabi_dsub+0x3d8>
 8001e8a:	e11e      	b.n	80020ca <__aeabi_dsub+0x616>
 8001e8c:	465c      	mov	r4, fp
 8001e8e:	4661      	mov	r1, ip
 8001e90:	4691      	mov	r9, r2
 8001e92:	e72c      	b.n	8001cee <__aeabi_dsub+0x23a>
 8001e94:	4fa9      	ldr	r7, [pc, #676]	; (800213c <__aeabi_dsub+0x688>)
 8001e96:	42be      	cmp	r6, r7
 8001e98:	d07b      	beq.n	8001f92 <__aeabi_dsub+0x4de>
 8001e9a:	001e      	movs	r6, r3
 8001e9c:	e6f1      	b.n	8001c82 <__aeabi_dsub+0x1ce>
 8001e9e:	0010      	movs	r0, r2
 8001ea0:	3d1f      	subs	r5, #31
 8001ea2:	40e8      	lsrs	r0, r5
 8001ea4:	2b20      	cmp	r3, #32
 8001ea6:	d003      	beq.n	8001eb0 <__aeabi_dsub+0x3fc>
 8001ea8:	2140      	movs	r1, #64	; 0x40
 8001eaa:	1acb      	subs	r3, r1, r3
 8001eac:	409a      	lsls	r2, r3
 8001eae:	4316      	orrs	r6, r2
 8001eb0:	1e73      	subs	r3, r6, #1
 8001eb2:	419e      	sbcs	r6, r3
 8001eb4:	2207      	movs	r2, #7
 8001eb6:	4306      	orrs	r6, r0
 8001eb8:	4032      	ands	r2, r6
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2500      	movs	r5, #0
 8001ebe:	e783      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001ec0:	1a16      	subs	r6, r2, r0
 8001ec2:	4663      	mov	r3, ip
 8001ec4:	42b2      	cmp	r2, r6
 8001ec6:	4180      	sbcs	r0, r0
 8001ec8:	1a59      	subs	r1, r3, r1
 8001eca:	4240      	negs	r0, r0
 8001ecc:	1a0b      	subs	r3, r1, r0
 8001ece:	4698      	mov	r8, r3
 8001ed0:	465c      	mov	r4, fp
 8001ed2:	e632      	b.n	8001b3a <__aeabi_dsub+0x86>
 8001ed4:	2e1f      	cmp	r6, #31
 8001ed6:	dd00      	ble.n	8001eda <__aeabi_dsub+0x426>
 8001ed8:	e0ab      	b.n	8002032 <__aeabi_dsub+0x57e>
 8001eda:	2720      	movs	r7, #32
 8001edc:	1bbb      	subs	r3, r7, r6
 8001ede:	469a      	mov	sl, r3
 8001ee0:	4663      	mov	r3, ip
 8001ee2:	4657      	mov	r7, sl
 8001ee4:	40bb      	lsls	r3, r7
 8001ee6:	4699      	mov	r9, r3
 8001ee8:	0013      	movs	r3, r2
 8001eea:	464f      	mov	r7, r9
 8001eec:	40f3      	lsrs	r3, r6
 8001eee:	431f      	orrs	r7, r3
 8001ef0:	003b      	movs	r3, r7
 8001ef2:	4657      	mov	r7, sl
 8001ef4:	40ba      	lsls	r2, r7
 8001ef6:	1e57      	subs	r7, r2, #1
 8001ef8:	41ba      	sbcs	r2, r7
 8001efa:	4313      	orrs	r3, r2
 8001efc:	4662      	mov	r2, ip
 8001efe:	40f2      	lsrs	r2, r6
 8001f00:	1889      	adds	r1, r1, r2
 8001f02:	e698      	b.n	8001c36 <__aeabi_dsub+0x182>
 8001f04:	2720      	movs	r7, #32
 8001f06:	1bbb      	subs	r3, r7, r6
 8001f08:	469a      	mov	sl, r3
 8001f0a:	4663      	mov	r3, ip
 8001f0c:	4657      	mov	r7, sl
 8001f0e:	40bb      	lsls	r3, r7
 8001f10:	4699      	mov	r9, r3
 8001f12:	0013      	movs	r3, r2
 8001f14:	464f      	mov	r7, r9
 8001f16:	40f3      	lsrs	r3, r6
 8001f18:	431f      	orrs	r7, r3
 8001f1a:	003b      	movs	r3, r7
 8001f1c:	4657      	mov	r7, sl
 8001f1e:	40ba      	lsls	r2, r7
 8001f20:	1e57      	subs	r7, r2, #1
 8001f22:	41ba      	sbcs	r2, r7
 8001f24:	4313      	orrs	r3, r2
 8001f26:	4662      	mov	r2, ip
 8001f28:	40f2      	lsrs	r2, r6
 8001f2a:	1a89      	subs	r1, r1, r2
 8001f2c:	e79c      	b.n	8001e68 <__aeabi_dsub+0x3b4>
 8001f2e:	4b83      	ldr	r3, [pc, #524]	; (800213c <__aeabi_dsub+0x688>)
 8001f30:	429f      	cmp	r7, r3
 8001f32:	d05f      	beq.n	8001ff4 <__aeabi_dsub+0x540>
 8001f34:	2580      	movs	r5, #128	; 0x80
 8001f36:	042d      	lsls	r5, r5, #16
 8001f38:	4273      	negs	r3, r6
 8001f3a:	4329      	orrs	r1, r5
 8001f3c:	e720      	b.n	8001d80 <__aeabi_dsub+0x2cc>
 8001f3e:	2e00      	cmp	r6, #0
 8001f40:	d10c      	bne.n	8001f5c <__aeabi_dsub+0x4a8>
 8001f42:	2f00      	cmp	r7, #0
 8001f44:	d100      	bne.n	8001f48 <__aeabi_dsub+0x494>
 8001f46:	e0d0      	b.n	80020ea <__aeabi_dsub+0x636>
 8001f48:	465c      	mov	r4, fp
 8001f4a:	4661      	mov	r1, ip
 8001f4c:	4691      	mov	r9, r2
 8001f4e:	4d7b      	ldr	r5, [pc, #492]	; (800213c <__aeabi_dsub+0x688>)
 8001f50:	e6cd      	b.n	8001cee <__aeabi_dsub+0x23a>
 8001f52:	4f7a      	ldr	r7, [pc, #488]	; (800213c <__aeabi_dsub+0x688>)
 8001f54:	42be      	cmp	r6, r7
 8001f56:	d01c      	beq.n	8001f92 <__aeabi_dsub+0x4de>
 8001f58:	001e      	movs	r6, r3
 8001f5a:	e665      	b.n	8001c28 <__aeabi_dsub+0x174>
 8001f5c:	2f00      	cmp	r7, #0
 8001f5e:	d018      	beq.n	8001f92 <__aeabi_dsub+0x4de>
 8001f60:	08c0      	lsrs	r0, r0, #3
 8001f62:	074e      	lsls	r6, r1, #29
 8001f64:	4306      	orrs	r6, r0
 8001f66:	2080      	movs	r0, #128	; 0x80
 8001f68:	08c9      	lsrs	r1, r1, #3
 8001f6a:	0300      	lsls	r0, r0, #12
 8001f6c:	4201      	tst	r1, r0
 8001f6e:	d008      	beq.n	8001f82 <__aeabi_dsub+0x4ce>
 8001f70:	4663      	mov	r3, ip
 8001f72:	08dc      	lsrs	r4, r3, #3
 8001f74:	4204      	tst	r4, r0
 8001f76:	d104      	bne.n	8001f82 <__aeabi_dsub+0x4ce>
 8001f78:	0021      	movs	r1, r4
 8001f7a:	46da      	mov	sl, fp
 8001f7c:	08d2      	lsrs	r2, r2, #3
 8001f7e:	075e      	lsls	r6, r3, #29
 8001f80:	4316      	orrs	r6, r2
 8001f82:	00f3      	lsls	r3, r6, #3
 8001f84:	4699      	mov	r9, r3
 8001f86:	2401      	movs	r4, #1
 8001f88:	4653      	mov	r3, sl
 8001f8a:	00c9      	lsls	r1, r1, #3
 8001f8c:	0f72      	lsrs	r2, r6, #29
 8001f8e:	4311      	orrs	r1, r2
 8001f90:	401c      	ands	r4, r3
 8001f92:	4d6a      	ldr	r5, [pc, #424]	; (800213c <__aeabi_dsub+0x688>)
 8001f94:	e6ab      	b.n	8001cee <__aeabi_dsub+0x23a>
 8001f96:	001d      	movs	r5, r3
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2700      	movs	r7, #0
 8001f9c:	e6b4      	b.n	8001d08 <__aeabi_dsub+0x254>
 8001f9e:	2d00      	cmp	r5, #0
 8001fa0:	d159      	bne.n	8002056 <__aeabi_dsub+0x5a2>
 8001fa2:	000b      	movs	r3, r1
 8001fa4:	4303      	orrs	r3, r0
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dsub+0x4f6>
 8001fa8:	e6d6      	b.n	8001d58 <__aeabi_dsub+0x2a4>
 8001faa:	1c73      	adds	r3, r6, #1
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_dsub+0x4fc>
 8001fae:	e0b2      	b.n	8002116 <__aeabi_dsub+0x662>
 8001fb0:	4b62      	ldr	r3, [pc, #392]	; (800213c <__aeabi_dsub+0x688>)
 8001fb2:	429f      	cmp	r7, r3
 8001fb4:	d01e      	beq.n	8001ff4 <__aeabi_dsub+0x540>
 8001fb6:	43f3      	mvns	r3, r6
 8001fb8:	2b38      	cmp	r3, #56	; 0x38
 8001fba:	dc6f      	bgt.n	800209c <__aeabi_dsub+0x5e8>
 8001fbc:	2b1f      	cmp	r3, #31
 8001fbe:	dd00      	ble.n	8001fc2 <__aeabi_dsub+0x50e>
 8001fc0:	e097      	b.n	80020f2 <__aeabi_dsub+0x63e>
 8001fc2:	2520      	movs	r5, #32
 8001fc4:	000e      	movs	r6, r1
 8001fc6:	1aed      	subs	r5, r5, r3
 8001fc8:	40ae      	lsls	r6, r5
 8001fca:	46b0      	mov	r8, r6
 8001fcc:	0006      	movs	r6, r0
 8001fce:	46aa      	mov	sl, r5
 8001fd0:	40de      	lsrs	r6, r3
 8001fd2:	4645      	mov	r5, r8
 8001fd4:	4335      	orrs	r5, r6
 8001fd6:	002e      	movs	r6, r5
 8001fd8:	4655      	mov	r5, sl
 8001fda:	40a8      	lsls	r0, r5
 8001fdc:	40d9      	lsrs	r1, r3
 8001fde:	1e45      	subs	r5, r0, #1
 8001fe0:	41a8      	sbcs	r0, r5
 8001fe2:	448c      	add	ip, r1
 8001fe4:	4306      	orrs	r6, r0
 8001fe6:	18b6      	adds	r6, r6, r2
 8001fe8:	4296      	cmp	r6, r2
 8001fea:	4192      	sbcs	r2, r2
 8001fec:	4251      	negs	r1, r2
 8001fee:	4461      	add	r1, ip
 8001ff0:	003d      	movs	r5, r7
 8001ff2:	e625      	b.n	8001c40 <__aeabi_dsub+0x18c>
 8001ff4:	003d      	movs	r5, r7
 8001ff6:	4661      	mov	r1, ip
 8001ff8:	4691      	mov	r9, r2
 8001ffa:	e678      	b.n	8001cee <__aeabi_dsub+0x23a>
 8001ffc:	000b      	movs	r3, r1
 8001ffe:	4303      	orrs	r3, r0
 8002000:	2d00      	cmp	r5, #0
 8002002:	d000      	beq.n	8002006 <__aeabi_dsub+0x552>
 8002004:	e655      	b.n	8001cb2 <__aeabi_dsub+0x1fe>
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f5      	beq.n	8001ff6 <__aeabi_dsub+0x542>
 800200a:	4663      	mov	r3, ip
 800200c:	4313      	orrs	r3, r2
 800200e:	d100      	bne.n	8002012 <__aeabi_dsub+0x55e>
 8002010:	e66d      	b.n	8001cee <__aeabi_dsub+0x23a>
 8002012:	1886      	adds	r6, r0, r2
 8002014:	4286      	cmp	r6, r0
 8002016:	4180      	sbcs	r0, r0
 8002018:	4461      	add	r1, ip
 800201a:	4240      	negs	r0, r0
 800201c:	1809      	adds	r1, r1, r0
 800201e:	2200      	movs	r2, #0
 8002020:	020b      	lsls	r3, r1, #8
 8002022:	d400      	bmi.n	8002026 <__aeabi_dsub+0x572>
 8002024:	e6d0      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8002026:	4b46      	ldr	r3, [pc, #280]	; (8002140 <__aeabi_dsub+0x68c>)
 8002028:	3501      	adds	r5, #1
 800202a:	4019      	ands	r1, r3
 800202c:	e5b2      	b.n	8001b94 <__aeabi_dsub+0xe0>
 800202e:	46b1      	mov	r9, r6
 8002030:	e65d      	b.n	8001cee <__aeabi_dsub+0x23a>
 8002032:	0033      	movs	r3, r6
 8002034:	4667      	mov	r7, ip
 8002036:	3b20      	subs	r3, #32
 8002038:	40df      	lsrs	r7, r3
 800203a:	003b      	movs	r3, r7
 800203c:	2e20      	cmp	r6, #32
 800203e:	d005      	beq.n	800204c <__aeabi_dsub+0x598>
 8002040:	2740      	movs	r7, #64	; 0x40
 8002042:	1bbf      	subs	r7, r7, r6
 8002044:	4666      	mov	r6, ip
 8002046:	40be      	lsls	r6, r7
 8002048:	4332      	orrs	r2, r6
 800204a:	4690      	mov	r8, r2
 800204c:	4646      	mov	r6, r8
 800204e:	1e72      	subs	r2, r6, #1
 8002050:	4196      	sbcs	r6, r2
 8002052:	4333      	orrs	r3, r6
 8002054:	e5ef      	b.n	8001c36 <__aeabi_dsub+0x182>
 8002056:	4b39      	ldr	r3, [pc, #228]	; (800213c <__aeabi_dsub+0x688>)
 8002058:	429f      	cmp	r7, r3
 800205a:	d0cb      	beq.n	8001ff4 <__aeabi_dsub+0x540>
 800205c:	2580      	movs	r5, #128	; 0x80
 800205e:	042d      	lsls	r5, r5, #16
 8002060:	4273      	negs	r3, r6
 8002062:	4329      	orrs	r1, r5
 8002064:	e7a8      	b.n	8001fb8 <__aeabi_dsub+0x504>
 8002066:	4308      	orrs	r0, r1
 8002068:	1e41      	subs	r1, r0, #1
 800206a:	4188      	sbcs	r0, r1
 800206c:	e6a2      	b.n	8001db4 <__aeabi_dsub+0x300>
 800206e:	2f00      	cmp	r7, #0
 8002070:	d100      	bne.n	8002074 <__aeabi_dsub+0x5c0>
 8002072:	e63c      	b.n	8001cee <__aeabi_dsub+0x23a>
 8002074:	4663      	mov	r3, ip
 8002076:	1a86      	subs	r6, r0, r2
 8002078:	1acf      	subs	r7, r1, r3
 800207a:	42b0      	cmp	r0, r6
 800207c:	419b      	sbcs	r3, r3
 800207e:	425b      	negs	r3, r3
 8002080:	1afb      	subs	r3, r7, r3
 8002082:	4698      	mov	r8, r3
 8002084:	021b      	lsls	r3, r3, #8
 8002086:	d54e      	bpl.n	8002126 <__aeabi_dsub+0x672>
 8002088:	1a16      	subs	r6, r2, r0
 800208a:	4663      	mov	r3, ip
 800208c:	42b2      	cmp	r2, r6
 800208e:	4192      	sbcs	r2, r2
 8002090:	1a59      	subs	r1, r3, r1
 8002092:	4252      	negs	r2, r2
 8002094:	1a89      	subs	r1, r1, r2
 8002096:	465c      	mov	r4, fp
 8002098:	2200      	movs	r2, #0
 800209a:	e57b      	b.n	8001b94 <__aeabi_dsub+0xe0>
 800209c:	4301      	orrs	r1, r0
 800209e:	000e      	movs	r6, r1
 80020a0:	1e71      	subs	r1, r6, #1
 80020a2:	418e      	sbcs	r6, r1
 80020a4:	e79f      	b.n	8001fe6 <__aeabi_dsub+0x532>
 80020a6:	001d      	movs	r5, r3
 80020a8:	000e      	movs	r6, r1
 80020aa:	3d20      	subs	r5, #32
 80020ac:	40ee      	lsrs	r6, r5
 80020ae:	46b0      	mov	r8, r6
 80020b0:	2b20      	cmp	r3, #32
 80020b2:	d004      	beq.n	80020be <__aeabi_dsub+0x60a>
 80020b4:	2540      	movs	r5, #64	; 0x40
 80020b6:	1aeb      	subs	r3, r5, r3
 80020b8:	4099      	lsls	r1, r3
 80020ba:	4308      	orrs	r0, r1
 80020bc:	4681      	mov	r9, r0
 80020be:	4648      	mov	r0, r9
 80020c0:	4643      	mov	r3, r8
 80020c2:	1e41      	subs	r1, r0, #1
 80020c4:	4188      	sbcs	r0, r1
 80020c6:	4318      	orrs	r0, r3
 80020c8:	e674      	b.n	8001db4 <__aeabi_dsub+0x300>
 80020ca:	2200      	movs	r2, #0
 80020cc:	2400      	movs	r4, #0
 80020ce:	e617      	b.n	8001d00 <__aeabi_dsub+0x24c>
 80020d0:	1a16      	subs	r6, r2, r0
 80020d2:	4663      	mov	r3, ip
 80020d4:	42b2      	cmp	r2, r6
 80020d6:	4192      	sbcs	r2, r2
 80020d8:	1a59      	subs	r1, r3, r1
 80020da:	4252      	negs	r2, r2
 80020dc:	1a89      	subs	r1, r1, r2
 80020de:	003d      	movs	r5, r7
 80020e0:	e525      	b.n	8001b2e <__aeabi_dsub+0x7a>
 80020e2:	4661      	mov	r1, ip
 80020e4:	4691      	mov	r9, r2
 80020e6:	4d15      	ldr	r5, [pc, #84]	; (800213c <__aeabi_dsub+0x688>)
 80020e8:	e601      	b.n	8001cee <__aeabi_dsub+0x23a>
 80020ea:	2280      	movs	r2, #128	; 0x80
 80020ec:	2400      	movs	r4, #0
 80020ee:	0312      	lsls	r2, r2, #12
 80020f0:	e679      	b.n	8001de6 <__aeabi_dsub+0x332>
 80020f2:	001d      	movs	r5, r3
 80020f4:	000e      	movs	r6, r1
 80020f6:	3d20      	subs	r5, #32
 80020f8:	40ee      	lsrs	r6, r5
 80020fa:	46b0      	mov	r8, r6
 80020fc:	2b20      	cmp	r3, #32
 80020fe:	d004      	beq.n	800210a <__aeabi_dsub+0x656>
 8002100:	2540      	movs	r5, #64	; 0x40
 8002102:	1aeb      	subs	r3, r5, r3
 8002104:	4099      	lsls	r1, r3
 8002106:	4308      	orrs	r0, r1
 8002108:	4681      	mov	r9, r0
 800210a:	464e      	mov	r6, r9
 800210c:	4643      	mov	r3, r8
 800210e:	1e71      	subs	r1, r6, #1
 8002110:	418e      	sbcs	r6, r1
 8002112:	431e      	orrs	r6, r3
 8002114:	e767      	b.n	8001fe6 <__aeabi_dsub+0x532>
 8002116:	1886      	adds	r6, r0, r2
 8002118:	4296      	cmp	r6, r2
 800211a:	419b      	sbcs	r3, r3
 800211c:	4461      	add	r1, ip
 800211e:	425b      	negs	r3, r3
 8002120:	18c9      	adds	r1, r1, r3
 8002122:	003d      	movs	r5, r7
 8002124:	e58c      	b.n	8001c40 <__aeabi_dsub+0x18c>
 8002126:	4647      	mov	r7, r8
 8002128:	4337      	orrs	r7, r6
 800212a:	d0ce      	beq.n	80020ca <__aeabi_dsub+0x616>
 800212c:	2207      	movs	r2, #7
 800212e:	4641      	mov	r1, r8
 8002130:	4032      	ands	r2, r6
 8002132:	e649      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8002134:	2700      	movs	r7, #0
 8002136:	003a      	movs	r2, r7
 8002138:	e5e6      	b.n	8001d08 <__aeabi_dsub+0x254>
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	000007ff 	.word	0x000007ff
 8002140:	ff7fffff 	.word	0xff7fffff

08002144 <__aeabi_dcmpun>:
 8002144:	b570      	push	{r4, r5, r6, lr}
 8002146:	4e0c      	ldr	r6, [pc, #48]	; (8002178 <__aeabi_dcmpun+0x34>)
 8002148:	030d      	lsls	r5, r1, #12
 800214a:	031c      	lsls	r4, r3, #12
 800214c:	0049      	lsls	r1, r1, #1
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	0b2d      	lsrs	r5, r5, #12
 8002152:	0d49      	lsrs	r1, r1, #21
 8002154:	0b24      	lsrs	r4, r4, #12
 8002156:	0d5b      	lsrs	r3, r3, #21
 8002158:	42b1      	cmp	r1, r6
 800215a:	d008      	beq.n	800216e <__aeabi_dcmpun+0x2a>
 800215c:	4906      	ldr	r1, [pc, #24]	; (8002178 <__aeabi_dcmpun+0x34>)
 800215e:	2000      	movs	r0, #0
 8002160:	428b      	cmp	r3, r1
 8002162:	d103      	bne.n	800216c <__aeabi_dcmpun+0x28>
 8002164:	4314      	orrs	r4, r2
 8002166:	0020      	movs	r0, r4
 8002168:	1e44      	subs	r4, r0, #1
 800216a:	41a0      	sbcs	r0, r4
 800216c:	bd70      	pop	{r4, r5, r6, pc}
 800216e:	4305      	orrs	r5, r0
 8002170:	2001      	movs	r0, #1
 8002172:	2d00      	cmp	r5, #0
 8002174:	d1fa      	bne.n	800216c <__aeabi_dcmpun+0x28>
 8002176:	e7f1      	b.n	800215c <__aeabi_dcmpun+0x18>
 8002178:	000007ff 	.word	0x000007ff

0800217c <__aeabi_d2iz>:
 800217c:	b530      	push	{r4, r5, lr}
 800217e:	4d14      	ldr	r5, [pc, #80]	; (80021d0 <__aeabi_d2iz+0x54>)
 8002180:	030a      	lsls	r2, r1, #12
 8002182:	004b      	lsls	r3, r1, #1
 8002184:	0b12      	lsrs	r2, r2, #12
 8002186:	0d5b      	lsrs	r3, r3, #21
 8002188:	0fc9      	lsrs	r1, r1, #31
 800218a:	2400      	movs	r4, #0
 800218c:	42ab      	cmp	r3, r5
 800218e:	dd11      	ble.n	80021b4 <__aeabi_d2iz+0x38>
 8002190:	4c10      	ldr	r4, [pc, #64]	; (80021d4 <__aeabi_d2iz+0x58>)
 8002192:	42a3      	cmp	r3, r4
 8002194:	dc10      	bgt.n	80021b8 <__aeabi_d2iz+0x3c>
 8002196:	2480      	movs	r4, #128	; 0x80
 8002198:	0364      	lsls	r4, r4, #13
 800219a:	4322      	orrs	r2, r4
 800219c:	4c0e      	ldr	r4, [pc, #56]	; (80021d8 <__aeabi_d2iz+0x5c>)
 800219e:	1ae4      	subs	r4, r4, r3
 80021a0:	2c1f      	cmp	r4, #31
 80021a2:	dd0c      	ble.n	80021be <__aeabi_d2iz+0x42>
 80021a4:	480d      	ldr	r0, [pc, #52]	; (80021dc <__aeabi_d2iz+0x60>)
 80021a6:	1ac3      	subs	r3, r0, r3
 80021a8:	40da      	lsrs	r2, r3
 80021aa:	0013      	movs	r3, r2
 80021ac:	425c      	negs	r4, r3
 80021ae:	2900      	cmp	r1, #0
 80021b0:	d100      	bne.n	80021b4 <__aeabi_d2iz+0x38>
 80021b2:	001c      	movs	r4, r3
 80021b4:	0020      	movs	r0, r4
 80021b6:	bd30      	pop	{r4, r5, pc}
 80021b8:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <__aeabi_d2iz+0x64>)
 80021ba:	18cc      	adds	r4, r1, r3
 80021bc:	e7fa      	b.n	80021b4 <__aeabi_d2iz+0x38>
 80021be:	4d09      	ldr	r5, [pc, #36]	; (80021e4 <__aeabi_d2iz+0x68>)
 80021c0:	40e0      	lsrs	r0, r4
 80021c2:	46ac      	mov	ip, r5
 80021c4:	4463      	add	r3, ip
 80021c6:	409a      	lsls	r2, r3
 80021c8:	0013      	movs	r3, r2
 80021ca:	4303      	orrs	r3, r0
 80021cc:	e7ee      	b.n	80021ac <__aeabi_d2iz+0x30>
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	000003fe 	.word	0x000003fe
 80021d4:	0000041d 	.word	0x0000041d
 80021d8:	00000433 	.word	0x00000433
 80021dc:	00000413 	.word	0x00000413
 80021e0:	7fffffff 	.word	0x7fffffff
 80021e4:	fffffbed 	.word	0xfffffbed

080021e8 <__aeabi_i2d>:
 80021e8:	b570      	push	{r4, r5, r6, lr}
 80021ea:	2800      	cmp	r0, #0
 80021ec:	d02d      	beq.n	800224a <__aeabi_i2d+0x62>
 80021ee:	17c3      	asrs	r3, r0, #31
 80021f0:	18c5      	adds	r5, r0, r3
 80021f2:	405d      	eors	r5, r3
 80021f4:	0fc4      	lsrs	r4, r0, #31
 80021f6:	0028      	movs	r0, r5
 80021f8:	f000 f938 	bl	800246c <__clzsi2>
 80021fc:	4b15      	ldr	r3, [pc, #84]	; (8002254 <__aeabi_i2d+0x6c>)
 80021fe:	1a1b      	subs	r3, r3, r0
 8002200:	055b      	lsls	r3, r3, #21
 8002202:	0d5b      	lsrs	r3, r3, #21
 8002204:	280a      	cmp	r0, #10
 8002206:	dd15      	ble.n	8002234 <__aeabi_i2d+0x4c>
 8002208:	380b      	subs	r0, #11
 800220a:	4085      	lsls	r5, r0
 800220c:	2200      	movs	r2, #0
 800220e:	032d      	lsls	r5, r5, #12
 8002210:	0b2d      	lsrs	r5, r5, #12
 8002212:	2100      	movs	r1, #0
 8002214:	0010      	movs	r0, r2
 8002216:	032d      	lsls	r5, r5, #12
 8002218:	0d0a      	lsrs	r2, r1, #20
 800221a:	0b2d      	lsrs	r5, r5, #12
 800221c:	0512      	lsls	r2, r2, #20
 800221e:	432a      	orrs	r2, r5
 8002220:	4d0d      	ldr	r5, [pc, #52]	; (8002258 <__aeabi_i2d+0x70>)
 8002222:	051b      	lsls	r3, r3, #20
 8002224:	402a      	ands	r2, r5
 8002226:	4313      	orrs	r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	07e4      	lsls	r4, r4, #31
 800222c:	085b      	lsrs	r3, r3, #1
 800222e:	4323      	orrs	r3, r4
 8002230:	0019      	movs	r1, r3
 8002232:	bd70      	pop	{r4, r5, r6, pc}
 8002234:	0002      	movs	r2, r0
 8002236:	0029      	movs	r1, r5
 8002238:	3215      	adds	r2, #21
 800223a:	4091      	lsls	r1, r2
 800223c:	000a      	movs	r2, r1
 800223e:	210b      	movs	r1, #11
 8002240:	1a08      	subs	r0, r1, r0
 8002242:	40c5      	lsrs	r5, r0
 8002244:	032d      	lsls	r5, r5, #12
 8002246:	0b2d      	lsrs	r5, r5, #12
 8002248:	e7e3      	b.n	8002212 <__aeabi_i2d+0x2a>
 800224a:	2400      	movs	r4, #0
 800224c:	2300      	movs	r3, #0
 800224e:	2500      	movs	r5, #0
 8002250:	2200      	movs	r2, #0
 8002252:	e7de      	b.n	8002212 <__aeabi_i2d+0x2a>
 8002254:	0000041e 	.word	0x0000041e
 8002258:	800fffff 	.word	0x800fffff

0800225c <__aeabi_ui2d>:
 800225c:	b510      	push	{r4, lr}
 800225e:	1e04      	subs	r4, r0, #0
 8002260:	d025      	beq.n	80022ae <__aeabi_ui2d+0x52>
 8002262:	f000 f903 	bl	800246c <__clzsi2>
 8002266:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <__aeabi_ui2d+0x5c>)
 8002268:	1a1b      	subs	r3, r3, r0
 800226a:	055b      	lsls	r3, r3, #21
 800226c:	0d5b      	lsrs	r3, r3, #21
 800226e:	280a      	cmp	r0, #10
 8002270:	dd12      	ble.n	8002298 <__aeabi_ui2d+0x3c>
 8002272:	380b      	subs	r0, #11
 8002274:	4084      	lsls	r4, r0
 8002276:	2200      	movs	r2, #0
 8002278:	0324      	lsls	r4, r4, #12
 800227a:	0b24      	lsrs	r4, r4, #12
 800227c:	2100      	movs	r1, #0
 800227e:	0010      	movs	r0, r2
 8002280:	0324      	lsls	r4, r4, #12
 8002282:	0d0a      	lsrs	r2, r1, #20
 8002284:	0b24      	lsrs	r4, r4, #12
 8002286:	0512      	lsls	r2, r2, #20
 8002288:	4322      	orrs	r2, r4
 800228a:	4c0c      	ldr	r4, [pc, #48]	; (80022bc <__aeabi_ui2d+0x60>)
 800228c:	051b      	lsls	r3, r3, #20
 800228e:	4022      	ands	r2, r4
 8002290:	4313      	orrs	r3, r2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	0859      	lsrs	r1, r3, #1
 8002296:	bd10      	pop	{r4, pc}
 8002298:	0002      	movs	r2, r0
 800229a:	0021      	movs	r1, r4
 800229c:	3215      	adds	r2, #21
 800229e:	4091      	lsls	r1, r2
 80022a0:	000a      	movs	r2, r1
 80022a2:	210b      	movs	r1, #11
 80022a4:	1a08      	subs	r0, r1, r0
 80022a6:	40c4      	lsrs	r4, r0
 80022a8:	0324      	lsls	r4, r4, #12
 80022aa:	0b24      	lsrs	r4, r4, #12
 80022ac:	e7e6      	b.n	800227c <__aeabi_ui2d+0x20>
 80022ae:	2300      	movs	r3, #0
 80022b0:	2400      	movs	r4, #0
 80022b2:	2200      	movs	r2, #0
 80022b4:	e7e2      	b.n	800227c <__aeabi_ui2d+0x20>
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	0000041e 	.word	0x0000041e
 80022bc:	800fffff 	.word	0x800fffff

080022c0 <__aeabi_f2d>:
 80022c0:	0041      	lsls	r1, r0, #1
 80022c2:	0e09      	lsrs	r1, r1, #24
 80022c4:	1c4b      	adds	r3, r1, #1
 80022c6:	b570      	push	{r4, r5, r6, lr}
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	0246      	lsls	r6, r0, #9
 80022cc:	0a75      	lsrs	r5, r6, #9
 80022ce:	0fc4      	lsrs	r4, r0, #31
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	dd14      	ble.n	80022fe <__aeabi_f2d+0x3e>
 80022d4:	23e0      	movs	r3, #224	; 0xe0
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	076d      	lsls	r5, r5, #29
 80022da:	0b36      	lsrs	r6, r6, #12
 80022dc:	18cb      	adds	r3, r1, r3
 80022de:	2100      	movs	r1, #0
 80022e0:	0d0a      	lsrs	r2, r1, #20
 80022e2:	0028      	movs	r0, r5
 80022e4:	0512      	lsls	r2, r2, #20
 80022e6:	4d1c      	ldr	r5, [pc, #112]	; (8002358 <__aeabi_f2d+0x98>)
 80022e8:	4332      	orrs	r2, r6
 80022ea:	055b      	lsls	r3, r3, #21
 80022ec:	402a      	ands	r2, r5
 80022ee:	085b      	lsrs	r3, r3, #1
 80022f0:	4313      	orrs	r3, r2
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	07e4      	lsls	r4, r4, #31
 80022f6:	085b      	lsrs	r3, r3, #1
 80022f8:	4323      	orrs	r3, r4
 80022fa:	0019      	movs	r1, r3
 80022fc:	bd70      	pop	{r4, r5, r6, pc}
 80022fe:	2900      	cmp	r1, #0
 8002300:	d114      	bne.n	800232c <__aeabi_f2d+0x6c>
 8002302:	2d00      	cmp	r5, #0
 8002304:	d01e      	beq.n	8002344 <__aeabi_f2d+0x84>
 8002306:	0028      	movs	r0, r5
 8002308:	f000 f8b0 	bl	800246c <__clzsi2>
 800230c:	280a      	cmp	r0, #10
 800230e:	dc1c      	bgt.n	800234a <__aeabi_f2d+0x8a>
 8002310:	230b      	movs	r3, #11
 8002312:	002a      	movs	r2, r5
 8002314:	1a1b      	subs	r3, r3, r0
 8002316:	40da      	lsrs	r2, r3
 8002318:	0003      	movs	r3, r0
 800231a:	3315      	adds	r3, #21
 800231c:	409d      	lsls	r5, r3
 800231e:	4b0f      	ldr	r3, [pc, #60]	; (800235c <__aeabi_f2d+0x9c>)
 8002320:	0312      	lsls	r2, r2, #12
 8002322:	1a1b      	subs	r3, r3, r0
 8002324:	055b      	lsls	r3, r3, #21
 8002326:	0b16      	lsrs	r6, r2, #12
 8002328:	0d5b      	lsrs	r3, r3, #21
 800232a:	e7d8      	b.n	80022de <__aeabi_f2d+0x1e>
 800232c:	2d00      	cmp	r5, #0
 800232e:	d006      	beq.n	800233e <__aeabi_f2d+0x7e>
 8002330:	0b32      	lsrs	r2, r6, #12
 8002332:	2680      	movs	r6, #128	; 0x80
 8002334:	0336      	lsls	r6, r6, #12
 8002336:	076d      	lsls	r5, r5, #29
 8002338:	4316      	orrs	r6, r2
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <__aeabi_f2d+0xa0>)
 800233c:	e7cf      	b.n	80022de <__aeabi_f2d+0x1e>
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <__aeabi_f2d+0xa0>)
 8002340:	2600      	movs	r6, #0
 8002342:	e7cc      	b.n	80022de <__aeabi_f2d+0x1e>
 8002344:	2300      	movs	r3, #0
 8002346:	2600      	movs	r6, #0
 8002348:	e7c9      	b.n	80022de <__aeabi_f2d+0x1e>
 800234a:	0003      	movs	r3, r0
 800234c:	002a      	movs	r2, r5
 800234e:	3b0b      	subs	r3, #11
 8002350:	409a      	lsls	r2, r3
 8002352:	2500      	movs	r5, #0
 8002354:	e7e3      	b.n	800231e <__aeabi_f2d+0x5e>
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	800fffff 	.word	0x800fffff
 800235c:	00000389 	.word	0x00000389
 8002360:	000007ff 	.word	0x000007ff

08002364 <__aeabi_d2f>:
 8002364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002366:	004c      	lsls	r4, r1, #1
 8002368:	0d64      	lsrs	r4, r4, #21
 800236a:	030b      	lsls	r3, r1, #12
 800236c:	1c62      	adds	r2, r4, #1
 800236e:	0a5b      	lsrs	r3, r3, #9
 8002370:	0f46      	lsrs	r6, r0, #29
 8002372:	0552      	lsls	r2, r2, #21
 8002374:	0fc9      	lsrs	r1, r1, #31
 8002376:	431e      	orrs	r6, r3
 8002378:	00c5      	lsls	r5, r0, #3
 800237a:	0d52      	lsrs	r2, r2, #21
 800237c:	2a01      	cmp	r2, #1
 800237e:	dd29      	ble.n	80023d4 <__aeabi_d2f+0x70>
 8002380:	4b37      	ldr	r3, [pc, #220]	; (8002460 <__aeabi_d2f+0xfc>)
 8002382:	18e7      	adds	r7, r4, r3
 8002384:	2ffe      	cmp	r7, #254	; 0xfe
 8002386:	dc1c      	bgt.n	80023c2 <__aeabi_d2f+0x5e>
 8002388:	2f00      	cmp	r7, #0
 800238a:	dd3b      	ble.n	8002404 <__aeabi_d2f+0xa0>
 800238c:	0180      	lsls	r0, r0, #6
 800238e:	1e43      	subs	r3, r0, #1
 8002390:	4198      	sbcs	r0, r3
 8002392:	2207      	movs	r2, #7
 8002394:	00f3      	lsls	r3, r6, #3
 8002396:	0f6d      	lsrs	r5, r5, #29
 8002398:	4303      	orrs	r3, r0
 800239a:	432b      	orrs	r3, r5
 800239c:	401a      	ands	r2, r3
 800239e:	2a00      	cmp	r2, #0
 80023a0:	d004      	beq.n	80023ac <__aeabi_d2f+0x48>
 80023a2:	220f      	movs	r2, #15
 80023a4:	401a      	ands	r2, r3
 80023a6:	2a04      	cmp	r2, #4
 80023a8:	d000      	beq.n	80023ac <__aeabi_d2f+0x48>
 80023aa:	3304      	adds	r3, #4
 80023ac:	2280      	movs	r2, #128	; 0x80
 80023ae:	04d2      	lsls	r2, r2, #19
 80023b0:	401a      	ands	r2, r3
 80023b2:	d024      	beq.n	80023fe <__aeabi_d2f+0x9a>
 80023b4:	3701      	adds	r7, #1
 80023b6:	b2fa      	uxtb	r2, r7
 80023b8:	2fff      	cmp	r7, #255	; 0xff
 80023ba:	d002      	beq.n	80023c2 <__aeabi_d2f+0x5e>
 80023bc:	019b      	lsls	r3, r3, #6
 80023be:	0a58      	lsrs	r0, r3, #9
 80023c0:	e001      	b.n	80023c6 <__aeabi_d2f+0x62>
 80023c2:	22ff      	movs	r2, #255	; 0xff
 80023c4:	2000      	movs	r0, #0
 80023c6:	0240      	lsls	r0, r0, #9
 80023c8:	05d2      	lsls	r2, r2, #23
 80023ca:	0a40      	lsrs	r0, r0, #9
 80023cc:	07c9      	lsls	r1, r1, #31
 80023ce:	4310      	orrs	r0, r2
 80023d0:	4308      	orrs	r0, r1
 80023d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d4:	4335      	orrs	r5, r6
 80023d6:	2c00      	cmp	r4, #0
 80023d8:	d104      	bne.n	80023e4 <__aeabi_d2f+0x80>
 80023da:	2d00      	cmp	r5, #0
 80023dc:	d10a      	bne.n	80023f4 <__aeabi_d2f+0x90>
 80023de:	2200      	movs	r2, #0
 80023e0:	2000      	movs	r0, #0
 80023e2:	e7f0      	b.n	80023c6 <__aeabi_d2f+0x62>
 80023e4:	2d00      	cmp	r5, #0
 80023e6:	d0ec      	beq.n	80023c2 <__aeabi_d2f+0x5e>
 80023e8:	2080      	movs	r0, #128	; 0x80
 80023ea:	03c0      	lsls	r0, r0, #15
 80023ec:	4330      	orrs	r0, r6
 80023ee:	22ff      	movs	r2, #255	; 0xff
 80023f0:	e7e9      	b.n	80023c6 <__aeabi_d2f+0x62>
 80023f2:	2400      	movs	r4, #0
 80023f4:	2300      	movs	r3, #0
 80023f6:	025b      	lsls	r3, r3, #9
 80023f8:	0a58      	lsrs	r0, r3, #9
 80023fa:	b2e2      	uxtb	r2, r4
 80023fc:	e7e3      	b.n	80023c6 <__aeabi_d2f+0x62>
 80023fe:	08db      	lsrs	r3, r3, #3
 8002400:	003c      	movs	r4, r7
 8002402:	e7f8      	b.n	80023f6 <__aeabi_d2f+0x92>
 8002404:	003b      	movs	r3, r7
 8002406:	3317      	adds	r3, #23
 8002408:	dbf3      	blt.n	80023f2 <__aeabi_d2f+0x8e>
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	041b      	lsls	r3, r3, #16
 800240e:	4333      	orrs	r3, r6
 8002410:	261e      	movs	r6, #30
 8002412:	1bf6      	subs	r6, r6, r7
 8002414:	2e1f      	cmp	r6, #31
 8002416:	dd14      	ble.n	8002442 <__aeabi_d2f+0xde>
 8002418:	2202      	movs	r2, #2
 800241a:	4252      	negs	r2, r2
 800241c:	1bd7      	subs	r7, r2, r7
 800241e:	001a      	movs	r2, r3
 8002420:	40fa      	lsrs	r2, r7
 8002422:	0017      	movs	r7, r2
 8002424:	2e20      	cmp	r6, #32
 8002426:	d004      	beq.n	8002432 <__aeabi_d2f+0xce>
 8002428:	4a0e      	ldr	r2, [pc, #56]	; (8002464 <__aeabi_d2f+0x100>)
 800242a:	4694      	mov	ip, r2
 800242c:	4464      	add	r4, ip
 800242e:	40a3      	lsls	r3, r4
 8002430:	431d      	orrs	r5, r3
 8002432:	002b      	movs	r3, r5
 8002434:	1e5d      	subs	r5, r3, #1
 8002436:	41ab      	sbcs	r3, r5
 8002438:	2207      	movs	r2, #7
 800243a:	433b      	orrs	r3, r7
 800243c:	401a      	ands	r2, r3
 800243e:	2700      	movs	r7, #0
 8002440:	e7ad      	b.n	800239e <__aeabi_d2f+0x3a>
 8002442:	4a09      	ldr	r2, [pc, #36]	; (8002468 <__aeabi_d2f+0x104>)
 8002444:	0028      	movs	r0, r5
 8002446:	18a2      	adds	r2, r4, r2
 8002448:	4095      	lsls	r5, r2
 800244a:	4093      	lsls	r3, r2
 800244c:	1e6c      	subs	r4, r5, #1
 800244e:	41a5      	sbcs	r5, r4
 8002450:	40f0      	lsrs	r0, r6
 8002452:	2207      	movs	r2, #7
 8002454:	432b      	orrs	r3, r5
 8002456:	4303      	orrs	r3, r0
 8002458:	401a      	ands	r2, r3
 800245a:	2700      	movs	r7, #0
 800245c:	e79f      	b.n	800239e <__aeabi_d2f+0x3a>
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	fffffc80 	.word	0xfffffc80
 8002464:	fffffca2 	.word	0xfffffca2
 8002468:	fffffc82 	.word	0xfffffc82

0800246c <__clzsi2>:
 800246c:	211c      	movs	r1, #28
 800246e:	2301      	movs	r3, #1
 8002470:	041b      	lsls	r3, r3, #16
 8002472:	4298      	cmp	r0, r3
 8002474:	d301      	bcc.n	800247a <__clzsi2+0xe>
 8002476:	0c00      	lsrs	r0, r0, #16
 8002478:	3910      	subs	r1, #16
 800247a:	0a1b      	lsrs	r3, r3, #8
 800247c:	4298      	cmp	r0, r3
 800247e:	d301      	bcc.n	8002484 <__clzsi2+0x18>
 8002480:	0a00      	lsrs	r0, r0, #8
 8002482:	3908      	subs	r1, #8
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	4298      	cmp	r0, r3
 8002488:	d301      	bcc.n	800248e <__clzsi2+0x22>
 800248a:	0900      	lsrs	r0, r0, #4
 800248c:	3904      	subs	r1, #4
 800248e:	a202      	add	r2, pc, #8	; (adr r2, 8002498 <__clzsi2+0x2c>)
 8002490:	5c10      	ldrb	r0, [r2, r0]
 8002492:	1840      	adds	r0, r0, r1
 8002494:	4770      	bx	lr
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	02020304 	.word	0x02020304
 800249c:	01010101 	.word	0x01010101
	...

080024a8 <debug_init>:

unsigned int dbg_tx_count = 0;


void debug_init()
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
	memset(dbg_tx_buffer,0,DEBUG_TX_BUFFER_SIZE);
 80024ac:	2380      	movs	r3, #128	; 0x80
 80024ae:	00da      	lsls	r2, r3, #3
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <debug_init+0x20>)
 80024b2:	2100      	movs	r1, #0
 80024b4:	0018      	movs	r0, r3
 80024b6:	f003 fe10 	bl	80060da <memset>
	dbg_tx_count = 0;
 80024ba:	4b04      	ldr	r3, [pc, #16]	; (80024cc <debug_init+0x24>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
}
 80024c0:	46c0      	nop			; (mov r8, r8)
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	2000060c 	.word	0x2000060c
 80024cc:	200001fc 	.word	0x200001fc

080024d0 <debug_transmit_buffer>:

void debug_transmit_buffer()
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
	uint32_t count = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	607b      	str	r3, [r7, #4]

	memcpy(dbg_tx_dma_buffer,dbg_tx_buffer,dbg_tx_count);
 80024da:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <debug_transmit_buffer+0x38>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	490b      	ldr	r1, [pc, #44]	; (800250c <debug_transmit_buffer+0x3c>)
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <debug_transmit_buffer+0x40>)
 80024e2:	0018      	movs	r0, r3
 80024e4:	f003 fdf0 	bl	80060c8 <memcpy>
	dbg_tx(dbg_tx_dma_buffer,dbg_tx_count);
 80024e8:	4b07      	ldr	r3, [pc, #28]	; (8002508 <debug_transmit_buffer+0x38>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	4908      	ldr	r1, [pc, #32]	; (8002510 <debug_transmit_buffer+0x40>)
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <debug_transmit_buffer+0x44>)
 80024f2:	0018      	movs	r0, r3
 80024f4:	f002 ff3e 	bl	8005374 <HAL_UART_Transmit_DMA>
	dbg_tx_count = 0;
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <debug_transmit_buffer+0x38>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	46bd      	mov	sp, r7
 8002502:	b002      	add	sp, #8
 8002504:	bd80      	pop	{r7, pc}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	200001fc 	.word	0x200001fc
 800250c:	2000060c 	.word	0x2000060c
 8002510:	2000020c 	.word	0x2000020c
 8002514:	20000ab4 	.word	0x20000ab4

08002518 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
	if (ch != '\r')
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b0d      	cmp	r3, #13
 8002524:	d01a      	beq.n	800255c <__io_putchar+0x44>
	{
		dbg_tx_buffer[dbg_tx_count++] = ch;
 8002526:	4b10      	ldr	r3, [pc, #64]	; (8002568 <__io_putchar+0x50>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	1c59      	adds	r1, r3, #1
 800252c:	4a0e      	ldr	r2, [pc, #56]	; (8002568 <__io_putchar+0x50>)
 800252e:	6011      	str	r1, [r2, #0]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	b2d1      	uxtb	r1, r2
 8002534:	4a0d      	ldr	r2, [pc, #52]	; (800256c <__io_putchar+0x54>)
 8002536:	54d1      	strb	r1, [r2, r3]

		if ((ch == '\n') || (dbg_tx_count >= DEBUG_TX_BUFFER_SIZE))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b0a      	cmp	r3, #10
 800253c:	d004      	beq.n	8002548 <__io_putchar+0x30>
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <__io_putchar+0x50>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a0b      	ldr	r2, [pc, #44]	; (8002570 <__io_putchar+0x58>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d909      	bls.n	800255c <__io_putchar+0x44>
		{
			dbg_tx_buffer[dbg_tx_count++] = '\r';
 8002548:	4b07      	ldr	r3, [pc, #28]	; (8002568 <__io_putchar+0x50>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	1c59      	adds	r1, r3, #1
 800254e:	4a06      	ldr	r2, [pc, #24]	; (8002568 <__io_putchar+0x50>)
 8002550:	6011      	str	r1, [r2, #0]
 8002552:	4a06      	ldr	r2, [pc, #24]	; (800256c <__io_putchar+0x54>)
 8002554:	210d      	movs	r1, #13
 8002556:	54d1      	strb	r1, [r2, r3]
			debug_transmit_buffer();
 8002558:	f7ff ffba 	bl	80024d0 <debug_transmit_buffer>
		}
	}

	return ch;
 800255c:	687b      	ldr	r3, [r7, #4]
}
 800255e:	0018      	movs	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	b002      	add	sp, #8
 8002564:	bd80      	pop	{r7, pc}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	200001fc 	.word	0x200001fc
 800256c:	2000060c 	.word	0x2000060c
 8002570:	000003ff 	.word	0x000003ff

08002574 <LTC_writeReg8>:

extern SPI_HandleTypeDef hspi1;


void LTC_writeReg8(uint16_t addr, uint8_t value)
{
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	0002      	movs	r2, r0
 800257c:	1dbb      	adds	r3, r7, #6
 800257e:	801a      	strh	r2, [r3, #0]
 8002580:	1d7b      	adds	r3, r7, #5
 8002582:	1c0a      	adds	r2, r1, #0
 8002584:	701a      	strb	r2, [r3, #0]
	uint8_t addrArr[2];
	addrArr[1] = addr & 0xFF;
 8002586:	1dbb      	adds	r3, r7, #6
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	b2da      	uxtb	r2, r3
 800258c:	240c      	movs	r4, #12
 800258e:	193b      	adds	r3, r7, r4
 8002590:	705a      	strb	r2, [r3, #1]
	addrArr[0] = addr >> 8;
 8002592:	1dbb      	adds	r3, r7, #6
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	0a1b      	lsrs	r3, r3, #8
 8002598:	b29b      	uxth	r3, r3
 800259a:	b2da      	uxtb	r2, r3
 800259c:	193b      	adds	r3, r7, r4
 800259e:	701a      	strb	r2, [r3, #0]


	HAL_GPIO_WritePin(LTC_CS_PIN, LTC_CS_PIN_NO, GPIO_PIN_RESET);
 80025a0:	2380      	movs	r3, #128	; 0x80
 80025a2:	015b      	lsls	r3, r3, #5
 80025a4:	4812      	ldr	r0, [pc, #72]	; (80025f0 <LTC_writeReg8+0x7c>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	0019      	movs	r1, r3
 80025aa:	f001 faf5 	bl	8003b98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &writeCmd, 1, 1000);
 80025ae:	23fa      	movs	r3, #250	; 0xfa
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4910      	ldr	r1, [pc, #64]	; (80025f4 <LTC_writeReg8+0x80>)
 80025b4:	4810      	ldr	r0, [pc, #64]	; (80025f8 <LTC_writeReg8+0x84>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	f002 f848 	bl	800464c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &addrArr[0], 2, 1000);
 80025bc:	23fa      	movs	r3, #250	; 0xfa
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	1939      	adds	r1, r7, r4
 80025c2:	480d      	ldr	r0, [pc, #52]	; (80025f8 <LTC_writeReg8+0x84>)
 80025c4:	2202      	movs	r2, #2
 80025c6:	f002 f841 	bl	800464c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 80025ca:	23fa      	movs	r3, #250	; 0xfa
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	1d79      	adds	r1, r7, #5
 80025d0:	4809      	ldr	r0, [pc, #36]	; (80025f8 <LTC_writeReg8+0x84>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	f002 f83a 	bl	800464c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTC_CS_PIN, LTC_CS_PIN_NO, GPIO_PIN_SET);
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	015b      	lsls	r3, r3, #5
 80025dc:	4804      	ldr	r0, [pc, #16]	; (80025f0 <LTC_writeReg8+0x7c>)
 80025de:	2201      	movs	r2, #1
 80025e0:	0019      	movs	r1, r3
 80025e2:	f001 fad9 	bl	8003b98 <HAL_GPIO_WritePin>

}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	46bd      	mov	sp, r7
 80025ea:	b005      	add	sp, #20
 80025ec:	bd90      	pop	{r4, r7, pc}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	48000400 	.word	0x48000400
 80025f4:	20000000 	.word	0x20000000
 80025f8:	20000a50 	.word	0x20000a50

080025fc <LTC_writeReg32>:

void LTC_writeReg32(uint16_t addr, uint32_t value)
{
 80025fc:	b5b0      	push	{r4, r5, r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	0002      	movs	r2, r0
 8002604:	6039      	str	r1, [r7, #0]
 8002606:	1dbb      	adds	r3, r7, #6
 8002608:	801a      	strh	r2, [r3, #0]
	uint8_t addrArr[2];
	addrArr[1] = addr & 0xFF;
 800260a:	1dbb      	adds	r3, r7, #6
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	b2da      	uxtb	r2, r3
 8002610:	250c      	movs	r5, #12
 8002612:	197b      	adds	r3, r7, r5
 8002614:	705a      	strb	r2, [r3, #1]
	addrArr[0] = addr >> 8;
 8002616:	1dbb      	adds	r3, r7, #6
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	0a1b      	lsrs	r3, r3, #8
 800261c:	b29b      	uxth	r3, r3
 800261e:	b2da      	uxtb	r2, r3
 8002620:	197b      	adds	r3, r7, r5
 8002622:	701a      	strb	r2, [r3, #0]

	uint8_t dataArray[4];
	dataArray[3] = (uint8_t)value;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	b2da      	uxtb	r2, r3
 8002628:	2408      	movs	r4, #8
 800262a:	193b      	adds	r3, r7, r4
 800262c:	70da      	strb	r2, [r3, #3]
	dataArray[2] = (uint8_t)(value>>=8);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	0a1b      	lsrs	r3, r3, #8
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	b2da      	uxtb	r2, r3
 8002638:	193b      	adds	r3, r7, r4
 800263a:	709a      	strb	r2, [r3, #2]
	dataArray[1] = (uint8_t)(value>>=8);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	0a1b      	lsrs	r3, r3, #8
 8002640:	603b      	str	r3, [r7, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	b2da      	uxtb	r2, r3
 8002646:	193b      	adds	r3, r7, r4
 8002648:	705a      	strb	r2, [r3, #1]
	dataArray[0] = (uint8_t)(value>>=8);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	0a1b      	lsrs	r3, r3, #8
 800264e:	603b      	str	r3, [r7, #0]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	193b      	adds	r3, r7, r4
 8002656:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LTC_CS_PIN, LTC_CS_PIN_NO, GPIO_PIN_RESET);
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	015b      	lsls	r3, r3, #5
 800265c:	4812      	ldr	r0, [pc, #72]	; (80026a8 <LTC_writeReg32+0xac>)
 800265e:	2200      	movs	r2, #0
 8002660:	0019      	movs	r1, r3
 8002662:	f001 fa99 	bl	8003b98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &writeCmd, 1, 1000);
 8002666:	23fa      	movs	r3, #250	; 0xfa
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4910      	ldr	r1, [pc, #64]	; (80026ac <LTC_writeReg32+0xb0>)
 800266c:	4810      	ldr	r0, [pc, #64]	; (80026b0 <LTC_writeReg32+0xb4>)
 800266e:	2201      	movs	r2, #1
 8002670:	f001 ffec 	bl	800464c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &addrArr[0], 2, 1000);
 8002674:	23fa      	movs	r3, #250	; 0xfa
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	1979      	adds	r1, r7, r5
 800267a:	480d      	ldr	r0, [pc, #52]	; (80026b0 <LTC_writeReg32+0xb4>)
 800267c:	2202      	movs	r2, #2
 800267e:	f001 ffe5 	bl	800464c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &dataArray[0], 4, 1000);
 8002682:	23fa      	movs	r3, #250	; 0xfa
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	1939      	adds	r1, r7, r4
 8002688:	4809      	ldr	r0, [pc, #36]	; (80026b0 <LTC_writeReg32+0xb4>)
 800268a:	2204      	movs	r2, #4
 800268c:	f001 ffde 	bl	800464c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTC_CS_PIN, LTC_CS_PIN_NO, GPIO_PIN_SET);
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	015b      	lsls	r3, r3, #5
 8002694:	4804      	ldr	r0, [pc, #16]	; (80026a8 <LTC_writeReg32+0xac>)
 8002696:	2201      	movs	r2, #1
 8002698:	0019      	movs	r1, r3
 800269a:	f001 fa7d 	bl	8003b98 <HAL_GPIO_WritePin>

}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	46bd      	mov	sp, r7
 80026a2:	b004      	add	sp, #16
 80026a4:	bdb0      	pop	{r4, r5, r7, pc}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	48000400 	.word	0x48000400
 80026ac:	20000000 	.word	0x20000000
 80026b0:	20000a50 	.word	0x20000a50

080026b4 <LTC_readReg8>:

uint8_t LTC_readReg8(uint16_t addr)
{
 80026b4:	b5b0      	push	{r4, r5, r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	0002      	movs	r2, r0
 80026bc:	1dbb      	adds	r3, r7, #6
 80026be:	801a      	strh	r2, [r3, #0]
	uint8_t addrArr[2];
	addrArr[1] = addr & 0xFF;
 80026c0:	1dbb      	adds	r3, r7, #6
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	240c      	movs	r4, #12
 80026c8:	193b      	adds	r3, r7, r4
 80026ca:	705a      	strb	r2, [r3, #1]
	addrArr[0] = addr >> 8;
 80026cc:	1dbb      	adds	r3, r7, #6
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	0a1b      	lsrs	r3, r3, #8
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	193b      	adds	r3, r7, r4
 80026d8:	701a      	strb	r2, [r3, #0]

	uint8_t readVal = 0;
 80026da:	250b      	movs	r5, #11
 80026dc:	197b      	adds	r3, r7, r5
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LTC_CS_PIN, LTC_CS_PIN_NO, GPIO_PIN_RESET);
 80026e2:	2380      	movs	r3, #128	; 0x80
 80026e4:	015b      	lsls	r3, r3, #5
 80026e6:	4813      	ldr	r0, [pc, #76]	; (8002734 <LTC_readReg8+0x80>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	0019      	movs	r1, r3
 80026ec:	f001 fa54 	bl	8003b98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &readCmd, 1, 1000);
 80026f0:	23fa      	movs	r3, #250	; 0xfa
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4910      	ldr	r1, [pc, #64]	; (8002738 <LTC_readReg8+0x84>)
 80026f6:	4811      	ldr	r0, [pc, #68]	; (800273c <LTC_readReg8+0x88>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	f001 ffa7 	bl	800464c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &addrArr[0], 2, 1000);
 80026fe:	23fa      	movs	r3, #250	; 0xfa
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	1939      	adds	r1, r7, r4
 8002704:	480d      	ldr	r0, [pc, #52]	; (800273c <LTC_readReg8+0x88>)
 8002706:	2202      	movs	r2, #2
 8002708:	f001 ffa0 	bl	800464c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &readVal, 1, 1000);
 800270c:	23fa      	movs	r3, #250	; 0xfa
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	1979      	adds	r1, r7, r5
 8002712:	480a      	ldr	r0, [pc, #40]	; (800273c <LTC_readReg8+0x88>)
 8002714:	2201      	movs	r2, #1
 8002716:	f002 f8f1 	bl	80048fc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LTC_CS_PIN, LTC_CS_PIN_NO, GPIO_PIN_SET);
 800271a:	2380      	movs	r3, #128	; 0x80
 800271c:	015b      	lsls	r3, r3, #5
 800271e:	4805      	ldr	r0, [pc, #20]	; (8002734 <LTC_readReg8+0x80>)
 8002720:	2201      	movs	r2, #1
 8002722:	0019      	movs	r1, r3
 8002724:	f001 fa38 	bl	8003b98 <HAL_GPIO_WritePin>

	return readVal;
 8002728:	197b      	adds	r3, r7, r5
 800272a:	781b      	ldrb	r3, [r3, #0]
}
 800272c:	0018      	movs	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	b004      	add	sp, #16
 8002732:	bdb0      	pop	{r4, r5, r7, pc}
 8002734:	48000400 	.word	0x48000400
 8002738:	20000001 	.word	0x20000001
 800273c:	20000a50 	.word	0x20000a50

08002740 <LTC_readReg32>:

uint32_t LTC_readReg32(uint16_t addr)
{
 8002740:	b590      	push	{r4, r7, lr}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	0002      	movs	r2, r0
 8002748:	1dbb      	adds	r3, r7, #6
 800274a:	801a      	strh	r2, [r3, #0]
	uint8_t addrArr[2];
	addrArr[1] = addr & 0xFF;
 800274c:	1dbb      	adds	r3, r7, #6
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	b2da      	uxtb	r2, r3
 8002752:	2410      	movs	r4, #16
 8002754:	193b      	adds	r3, r7, r4
 8002756:	705a      	strb	r2, [r3, #1]
	addrArr[0] = addr >> 8;
 8002758:	1dbb      	adds	r3, r7, #6
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	0a1b      	lsrs	r3, r3, #8
 800275e:	b29b      	uxth	r3, r3
 8002760:	b2da      	uxtb	r2, r3
 8002762:	193b      	adds	r3, r7, r4
 8002764:	701a      	strb	r2, [r3, #0]

	uint8_t readVal[4];

	HAL_GPIO_WritePin(LTC_CS_PIN, LTC_CS_PIN_NO, GPIO_PIN_RESET);
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	015b      	lsls	r3, r3, #5
 800276a:	481c      	ldr	r0, [pc, #112]	; (80027dc <LTC_readReg32+0x9c>)
 800276c:	2200      	movs	r2, #0
 800276e:	0019      	movs	r1, r3
 8002770:	f001 fa12 	bl	8003b98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &readCmd, 1, 1000);
 8002774:	23fa      	movs	r3, #250	; 0xfa
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4919      	ldr	r1, [pc, #100]	; (80027e0 <LTC_readReg32+0xa0>)
 800277a:	481a      	ldr	r0, [pc, #104]	; (80027e4 <LTC_readReg32+0xa4>)
 800277c:	2201      	movs	r2, #1
 800277e:	f001 ff65 	bl	800464c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &addrArr[0], 2, 1000);
 8002782:	23fa      	movs	r3, #250	; 0xfa
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	1939      	adds	r1, r7, r4
 8002788:	4816      	ldr	r0, [pc, #88]	; (80027e4 <LTC_readReg32+0xa4>)
 800278a:	2202      	movs	r2, #2
 800278c:	f001 ff5e 	bl	800464c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &readVal, 4, 1000);
 8002790:	23fa      	movs	r3, #250	; 0xfa
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	210c      	movs	r1, #12
 8002796:	000c      	movs	r4, r1
 8002798:	1879      	adds	r1, r7, r1
 800279a:	4812      	ldr	r0, [pc, #72]	; (80027e4 <LTC_readReg32+0xa4>)
 800279c:	2204      	movs	r2, #4
 800279e:	f002 f8ad 	bl	80048fc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LTC_CS_PIN, LTC_CS_PIN_NO, GPIO_PIN_SET);
 80027a2:	2380      	movs	r3, #128	; 0x80
 80027a4:	015b      	lsls	r3, r3, #5
 80027a6:	480d      	ldr	r0, [pc, #52]	; (80027dc <LTC_readReg32+0x9c>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	0019      	movs	r1, r3
 80027ac:	f001 f9f4 	bl	8003b98 <HAL_GPIO_WritePin>

	uint32_t rawData = (((uint32_t) readVal[0]) << 24 |
 80027b0:	0021      	movs	r1, r4
 80027b2:	187b      	adds	r3, r7, r1
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	061a      	lsls	r2, r3, #24
					  ((uint32_t) readVal[1]) << 16 |
 80027b8:	187b      	adds	r3, r7, r1
 80027ba:	785b      	ldrb	r3, [r3, #1]
 80027bc:	041b      	lsls	r3, r3, #16
	uint32_t rawData = (((uint32_t) readVal[0]) << 24 |
 80027be:	431a      	orrs	r2, r3
					  ((uint32_t) readVal[2]) <<  8 |
 80027c0:	187b      	adds	r3, r7, r1
 80027c2:	789b      	ldrb	r3, [r3, #2]
 80027c4:	021b      	lsls	r3, r3, #8
					  ((uint32_t) readVal[1]) << 16 |
 80027c6:	4313      	orrs	r3, r2
					  ((uint32_t) readVal[3]) <<  0);
 80027c8:	187a      	adds	r2, r7, r1
 80027ca:	78d2      	ldrb	r2, [r2, #3]
	uint32_t rawData = (((uint32_t) readVal[0]) << 24 |
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]

	return rawData;
 80027d0:	697b      	ldr	r3, [r7, #20]
}
 80027d2:	0018      	movs	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b007      	add	sp, #28
 80027d8:	bd90      	pop	{r4, r7, pc}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	48000400 	.word	0x48000400
 80027e0:	20000001 	.word	0x20000001
 80027e4:	20000a50 	.word	0x20000a50

080027e8 <LTC_waitUntilFinish>:

void LTC_waitUntilFinish(void)
{
 80027e8:	b590      	push	{r4, r7, lr}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
	uint8_t process_fin = 0;
 80027ee:	1dfb      	adds	r3, r7, #7
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]

	while(process_fin == 0)
 80027f4:	e00b      	b.n	800280e <LTC_waitUntilFinish+0x26>
	{
		uint8_t status = LTC_readReg8(COMMAND_STATUS_REGISTER);
 80027f6:	1dbc      	adds	r4, r7, #6
 80027f8:	2000      	movs	r0, #0
 80027fa:	f7ff ff5b 	bl	80026b4 <LTC_readReg8>
 80027fe:	0003      	movs	r3, r0
 8002800:	7023      	strb	r3, [r4, #0]

		process_fin = status & 0x40;
 8002802:	1dfb      	adds	r3, r7, #7
 8002804:	1dba      	adds	r2, r7, #6
 8002806:	7812      	ldrb	r2, [r2, #0]
 8002808:	2140      	movs	r1, #64	; 0x40
 800280a:	400a      	ands	r2, r1
 800280c:	701a      	strb	r2, [r3, #0]
	while(process_fin == 0)
 800280e:	1dfb      	adds	r3, r7, #7
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0ef      	beq.n	80027f6 <LTC_waitUntilFinish+0xe>
	}
}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	46bd      	mov	sp, r7
 800281a:	b003      	add	sp, #12
 800281c:	bd90      	pop	{r4, r7, pc}

0800281e <LTC_beginConv>:

void LTC_beginConv(uint8_t ch)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	0002      	movs	r2, r0
 8002826:	1dfb      	adds	r3, r7, #7
 8002828:	701a      	strb	r2, [r3, #0]
	uint8_t beginConv = 0x80 | ch;
 800282a:	200f      	movs	r0, #15
 800282c:	183b      	adds	r3, r7, r0
 800282e:	1dfa      	adds	r2, r7, #7
 8002830:	7812      	ldrb	r2, [r2, #0]
 8002832:	2180      	movs	r1, #128	; 0x80
 8002834:	4249      	negs	r1, r1
 8002836:	430a      	orrs	r2, r1
 8002838:	701a      	strb	r2, [r3, #0]
	LTC_writeReg8(COMMAND_STATUS_REGISTER, beginConv);
 800283a:	183b      	adds	r3, r7, r0
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	0019      	movs	r1, r3
 8002840:	2000      	movs	r0, #0
 8002842:	f7ff fe97 	bl	8002574 <LTC_writeReg8>

	LTC_waitUntilFinish();
 8002846:	f7ff ffcf 	bl	80027e8 <LTC_waitUntilFinish>
}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	46bd      	mov	sp, r7
 800284e:	b004      	add	sp, #16
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <LTC_readTemperature>:

void LTC_readTemperature(void)
{
 8002854:	b590      	push	{r4, r7, lr}
 8002856:	b089      	sub	sp, #36	; 0x24
 8002858:	af02      	add	r7, sp, #8
	for (int idx = 0; idx < 20; idx++)
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	e040      	b.n	80028e2 <LTC_readTemperature+0x8e>
	{
		uint32_t rawTemperature = LTC_readReg32(READ_CH_BASE + 4 * idx);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	3304      	adds	r3, #4
 8002864:	b29b      	uxth	r3, r3
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	b29b      	uxth	r3, r3
 800286a:	0018      	movs	r0, r3
 800286c:	f7ff ff68 	bl	8002740 <LTC_readReg32>
 8002870:	0003      	movs	r3, r0
 8002872:	60fb      	str	r3, [r7, #12]
		uint8_t flag = rawTemperature >> 24;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	0e1a      	lsrs	r2, r3, #24
 8002878:	230b      	movs	r3, #11
 800287a:	18fb      	adds	r3, r7, r3
 800287c:	701a      	strb	r2, [r3, #0]

		uint32_t rawConvData = rawTemperature & 0xFFFFFF;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	021b      	lsls	r3, r3, #8
 8002882:	0a1b      	lsrs	r3, r3, #8
 8002884:	607b      	str	r3, [r7, #4]

		int signedRawData = rawConvData;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	613b      	str	r3, [r7, #16]

		if(signedRawData & 0x800000)
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	2380      	movs	r3, #128	; 0x80
 800288e:	041b      	lsls	r3, r3, #16
 8002890:	4013      	ands	r3, r2
 8002892:	d004      	beq.n	800289e <LTC_readTemperature+0x4a>
			signedRawData = signedRawData | 0xFF000000;
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	22ff      	movs	r2, #255	; 0xff
 8002898:	0612      	lsls	r2, r2, #24
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]

		float temperature = (float)signedRawData / 1024;
 800289e:	6938      	ldr	r0, [r7, #16]
 80028a0:	f7fd ff26 	bl	80006f0 <__aeabi_i2f>
 80028a4:	1c03      	adds	r3, r0, #0
 80028a6:	2189      	movs	r1, #137	; 0x89
 80028a8:	05c9      	lsls	r1, r1, #23
 80028aa:	1c18      	adds	r0, r3, #0
 80028ac:	f7fd fe0e 	bl	80004cc <__aeabi_fdiv>
 80028b0:	1c03      	adds	r3, r0, #0
 80028b2:	603b      	str	r3, [r7, #0]

		dbg_printf("Ch : %d - Temperature : %f status : %x - %d\n", idx+1, temperature, flag);
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	1c5c      	adds	r4, r3, #1
 80028b8:	6838      	ldr	r0, [r7, #0]
 80028ba:	f7ff fd01 	bl	80022c0 <__aeabi_f2d>
 80028be:	000a      	movs	r2, r1
 80028c0:	0001      	movs	r1, r0
 80028c2:	230b      	movs	r3, #11
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	4809      	ldr	r0, [pc, #36]	; (80028f0 <LTC_readTemperature+0x9c>)
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	0013      	movs	r3, r2
 80028ce:	000a      	movs	r2, r1
 80028d0:	0021      	movs	r1, r4
 80028d2:	f004 fa67 	bl	8006da4 <iprintf>
		HAL_Delay(100);
 80028d6:	2064      	movs	r0, #100	; 0x64
 80028d8:	f000 fcd8 	bl	800328c <HAL_Delay>
	for (int idx = 0; idx < 20; idx++)
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	3301      	adds	r3, #1
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2b13      	cmp	r3, #19
 80028e6:	ddbb      	ble.n	8002860 <LTC_readTemperature+0xc>
	}
}
 80028e8:	46c0      	nop			; (mov r8, r8)
 80028ea:	46bd      	mov	sp, r7
 80028ec:	b007      	add	sp, #28
 80028ee:	bd90      	pop	{r4, r7, pc}
 80028f0:	0800a618 	.word	0x0800a618

080028f4 <LTC_TC_configureChannel>:

void LTC_TC_configureChannel(uint32_t ch, uint32_t tcType, uint32_t cjChannel, uint32_t singleEnded, uint32_t openCktDetect, uint32_t openCktDetectCurrent)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
 8002900:	603b      	str	r3, [r7, #0]
	uint32_t chCfgData = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
	chCfgData = tcType | cjChannel | singleEnded | openCktDetect | openCktDetectCurrent;
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	431a      	orrs	r2, r3
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	431a      	orrs	r2, r3
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	4313      	orrs	r3, r2
 8002914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]

	LTC_writeReg32(CH_ADDRESS_BASE + 4*ch, chCfgData);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	3380      	adds	r3, #128	; 0x80
 800291e:	b29b      	uxth	r3, r3
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	b29b      	uxth	r3, r3
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	0011      	movs	r1, r2
 8002928:	0018      	movs	r0, r3
 800292a:	f7ff fe67 	bl	80025fc <LTC_writeReg32>
}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	46bd      	mov	sp, r7
 8002932:	b006      	add	sp, #24
 8002934:	bd80      	pop	{r7, pc}

08002936 <LTC_RTD_configureChannel>:

void LTC_RTD_configureChannel(uint32_t ch, uint32_t rtdSensorType, uint32_t rSenseChannel, uint32_t wireNo, uint32_t excitationMode, uint32_t excitationCurrent, uint32_t rtdStandard)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b086      	sub	sp, #24
 800293a:	af00      	add	r7, sp, #0
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	603b      	str	r3, [r7, #0]
	uint32_t rtdData = rtdSensorType | rSenseChannel | wireNo | excitationMode | excitationCurrent | rtdStandard;
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	431a      	orrs	r2, r3
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	431a      	orrs	r2, r3
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	431a      	orrs	r2, r3
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	4313      	orrs	r3, r2
 8002956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002958:	4313      	orrs	r3, r2
 800295a:	617b      	str	r3, [r7, #20]

	LTC_writeReg32(CH_ADDRESS_BASE + 0x2c, rtdData);
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	238b      	movs	r3, #139	; 0x8b
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	0011      	movs	r1, r2
 8002964:	0018      	movs	r0, r3
 8002966:	f7ff fe49 	bl	80025fc <LTC_writeReg32>

}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	46bd      	mov	sp, r7
 800296e:	b006      	add	sp, #24
 8002970:	bd80      	pop	{r7, pc}

08002972 <LTC_RTD_configureRSense>:

void LTC_RTD_configureRSense(uint32_t ch, uint32_t sensorType, uint32_t rSenseValHigh, uint32_t rSenseValLow)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b086      	sub	sp, #24
 8002976:	af00      	add	r7, sp, #0
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	607a      	str	r2, [r7, #4]
 800297e:	603b      	str	r3, [r7, #0]
	uint32_t rSenseData = sensorType | rSenseValHigh | rSenseValLow;
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4313      	orrs	r3, r2
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	4313      	orrs	r3, r2
 800298a:	617b      	str	r3, [r7, #20]

	LTC_writeReg32(CH_ADDRESS_BASE + 4 * ch, rSenseData);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	3380      	adds	r3, #128	; 0x80
 8002990:	b29b      	uxth	r3, r3
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	b29b      	uxth	r3, r3
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	0011      	movs	r1, r2
 800299a:	0018      	movs	r0, r3
 800299c:	f7ff fe2e 	bl	80025fc <LTC_writeReg32>
}
 80029a0:	46c0      	nop			; (mov r8, r8)
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b006      	add	sp, #24
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <LTC_init>:

void LTC_init(void)
{
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b089      	sub	sp, #36	; 0x24
 80029ac:	af04      	add	r7, sp, #16
	uint8_t status = LTC_readReg8(COMMAND_STATUS_REGISTER);
 80029ae:	1cfc      	adds	r4, r7, #3
 80029b0:	2000      	movs	r0, #0
 80029b2:	f7ff fe7f 	bl	80026b4 <LTC_readReg8>
 80029b6:	0003      	movs	r3, r0
 80029b8:	7023      	strb	r3, [r4, #0]
	dbg_printf("Initial status : %x\n", status);
 80029ba:	1cfb      	adds	r3, r7, #3
 80029bc:	781a      	ldrb	r2, [r3, #0]
 80029be:	4b37      	ldr	r3, [pc, #220]	; (8002a9c <LTC_init+0xf4>)
 80029c0:	0011      	movs	r1, r2
 80029c2:	0018      	movs	r0, r3
 80029c4:	f004 f9ee 	bl	8006da4 <iprintf>

	uint32_t readMulti = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]

	for (int idx = 0; idx < 8; idx++)
 80029cc:	2300      	movs	r3, #0
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	e019      	b.n	8002a06 <LTC_init+0x5e>
	{
		LTC_TC_configureChannel(idx, SENSOR_TYPE__TYPE_T_THERMOCOUPLE, TC_COLD_JUNCTION_CH__12,
 80029d2:	68b8      	ldr	r0, [r7, #8]
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	039c      	lsls	r4, r3, #14
 80029d8:	23c0      	movs	r3, #192	; 0xc0
 80029da:	049a      	lsls	r2, r3, #18
 80029dc:	23e0      	movs	r3, #224	; 0xe0
 80029de:	0599      	lsls	r1, r3, #22
 80029e0:	2300      	movs	r3, #0
 80029e2:	9301      	str	r3, [sp, #4]
 80029e4:	2380      	movs	r3, #128	; 0x80
 80029e6:	035b      	lsls	r3, r3, #13
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	0023      	movs	r3, r4
 80029ec:	f7ff ff82 	bl	80028f4 <LTC_TC_configureChannel>
										TC_SINGLE_ENDED, TC_OPEN_CKT_DETECT__YES, TC_OPEN_CKT_DETECT_CURRENT__10UA);
		readMulti |= (1 << idx);
 80029f0:	2201      	movs	r2, #1
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	409a      	lsls	r2, r3
 80029f6:	0013      	movs	r3, r2
 80029f8:	001a      	movs	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
	for (int idx = 0; idx < 8; idx++)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	3301      	adds	r3, #1
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2b07      	cmp	r3, #7
 8002a0a:	dde2      	ble.n	80029d2 <LTC_init+0x2a>
	}

	for (int idx = 12; idx < 20; idx++)
 8002a0c:	230c      	movs	r3, #12
 8002a0e:	607b      	str	r3, [r7, #4]
 8002a10:	e019      	b.n	8002a46 <LTC_init+0x9e>
	{
		LTC_TC_configureChannel(idx, SENSOR_TYPE__TYPE_T_THERMOCOUPLE, TC_COLD_JUNCTION_CH__12,
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	039c      	lsls	r4, r3, #14
 8002a18:	23c0      	movs	r3, #192	; 0xc0
 8002a1a:	049a      	lsls	r2, r3, #18
 8002a1c:	23e0      	movs	r3, #224	; 0xe0
 8002a1e:	0599      	lsls	r1, r3, #22
 8002a20:	2300      	movs	r3, #0
 8002a22:	9301      	str	r3, [sp, #4]
 8002a24:	2380      	movs	r3, #128	; 0x80
 8002a26:	035b      	lsls	r3, r3, #13
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	0023      	movs	r3, r4
 8002a2c:	f7ff ff62 	bl	80028f4 <LTC_TC_configureChannel>
										TC_SINGLE_ENDED, TC_OPEN_CKT_DETECT__YES, TC_OPEN_CKT_DETECT_CURRENT__10UA);
		readMulti |= (1 << idx);
 8002a30:	2201      	movs	r2, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	409a      	lsls	r2, r3
 8002a36:	0013      	movs	r3, r2
 8002a38:	001a      	movs	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]
	for (int idx = 12; idx < 20; idx++)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3301      	adds	r3, #1
 8002a44:	607b      	str	r3, [r7, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b13      	cmp	r3, #19
 8002a4a:	dde2      	ble.n	8002a12 <LTC_init+0x6a>
	}

	LTC_writeReg32(MULTI_READ_CH_REGISTER, readMulti);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	0019      	movs	r1, r3
 8002a50:	20f4      	movs	r0, #244	; 0xf4
 8002a52:	f7ff fdd3 	bl	80025fc <LTC_writeReg32>

	LTC_RTD_configureChannel(11, SENSOR_TYPE__RTD_PT_100, RTD_RSENSE_CHANNEL__10, RTD_NUM_WIRES__4_WIRE,
 8002a56:	2380      	movs	r3, #128	; 0x80
 8002a58:	0398      	lsls	r0, r3, #14
 8002a5a:	23a0      	movs	r3, #160	; 0xa0
 8002a5c:	049a      	lsls	r2, r3, #18
 8002a5e:	23c0      	movs	r3, #192	; 0xc0
 8002a60:	05d9      	lsls	r1, r3, #23
 8002a62:	2300      	movs	r3, #0
 8002a64:	9302      	str	r3, [sp, #8]
 8002a66:	23c0      	movs	r3, #192	; 0xc0
 8002a68:	021b      	lsls	r3, r3, #8
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	0003      	movs	r3, r0
 8002a72:	200b      	movs	r0, #11
 8002a74:	f7ff ff5f 	bl	8002936 <LTC_RTD_configureChannel>
							RTD_EXCITATION_MODE__NO_ROTATION_NO_SHARING, RTD_EXCITATION_CURRENT__25UA, RTD_STANDARD__EUROPEAN);


	LTC_RTD_configureRSense(9, SENSOR_TYPE__SENSE_RESISTOR, RSENSE_2K, RSENSE_03K);
 8002a78:	23fa      	movs	r3, #250	; 0xfa
 8002a7a:	035a      	lsls	r2, r3, #13
 8002a7c:	23e8      	movs	r3, #232	; 0xe8
 8002a7e:	0619      	lsls	r1, r3, #24
 8002a80:	231e      	movs	r3, #30
 8002a82:	2009      	movs	r0, #9
 8002a84:	f7ff ff75 	bl	8002972 <LTC_RTD_configureRSense>


	HAL_Delay(1000);
 8002a88:	23fa      	movs	r3, #250	; 0xfa
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f000 fbfd 	bl	800328c <HAL_Delay>

}
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	46bd      	mov	sp, r7
 8002a96:	b005      	add	sp, #20
 8002a98:	bd90      	pop	{r4, r7, pc}
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	0800a648 	.word	0x0800a648

08002aa0 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	0002      	movs	r2, r0
 8002aa8:	1dbb      	adds	r3, r7, #6
 8002aaa:	801a      	strh	r2, [r3, #0]
	{
		//dbg_printf("INT\r\n");
	}


}
 8002aac:	46c0      	nop			; (mov r8, r8)
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b002      	add	sp, #8
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ab8:	f000 fb84 	bl	80031c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002abc:	f000 f82a 	bl	8002b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ac0:	f000 f8f4 	bl	8002cac <MX_GPIO_Init>
  MX_DMA_Init();
 8002ac4:	f000 f8d4 	bl	8002c70 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002ac8:	f000 f8a2 	bl	8002c10 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002acc:	f000 f862 	bl	8002b94 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  debug_init();
 8002ad0:	f7ff fcea 	bl	80024a8 <debug_init>

  LTC_init();
 8002ad4:	f7ff ff68 	bl	80029a8 <LTC_init>

  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8002ad8:	2390      	movs	r3, #144	; 0x90
 8002ada:	05db      	lsls	r3, r3, #23
 8002adc:	2201      	movs	r2, #1
 8002ade:	2102      	movs	r1, #2
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	f001 f859 	bl	8003b98 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8002ae6:	23fa      	movs	r3, #250	; 0xfa
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	0018      	movs	r0, r3
 8002aec:	f000 fbce 	bl	800328c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8002af0:	2390      	movs	r3, #144	; 0x90
 8002af2:	05db      	lsls	r3, r3, #23
 8002af4:	2200      	movs	r2, #0
 8002af6:	2102      	movs	r1, #2
 8002af8:	0018      	movs	r0, r3
 8002afa:	f001 f84d 	bl	8003b98 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8002afe:	23fa      	movs	r3, #250	; 0xfa
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	0018      	movs	r0, r3
 8002b04:	f000 fbc2 	bl	800328c <HAL_Delay>

	  LTC_beginConv(0);
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f7ff fe88 	bl	800281e <LTC_beginConv>
	  LTC_readTemperature();
 8002b0e:	f7ff fea1 	bl	8002854 <LTC_readTemperature>
  {
 8002b12:	e7e1      	b.n	8002ad8 <main+0x24>

08002b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b14:	b590      	push	{r4, r7, lr}
 8002b16:	b091      	sub	sp, #68	; 0x44
 8002b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b1a:	2410      	movs	r4, #16
 8002b1c:	193b      	adds	r3, r7, r4
 8002b1e:	0018      	movs	r0, r3
 8002b20:	2330      	movs	r3, #48	; 0x30
 8002b22:	001a      	movs	r2, r3
 8002b24:	2100      	movs	r1, #0
 8002b26:	f003 fad8 	bl	80060da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b2a:	003b      	movs	r3, r7
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	2310      	movs	r3, #16
 8002b30:	001a      	movs	r2, r3
 8002b32:	2100      	movs	r1, #0
 8002b34:	f003 fad1 	bl	80060da <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b38:	0021      	movs	r1, r4
 8002b3a:	187b      	adds	r3, r7, r1
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b40:	187b      	adds	r3, r7, r1
 8002b42:	2201      	movs	r2, #1
 8002b44:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b46:	187b      	adds	r3, r7, r1
 8002b48:	2210      	movs	r2, #16
 8002b4a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002b4c:	187b      	adds	r3, r7, r1
 8002b4e:	2200      	movs	r2, #0
 8002b50:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b52:	187b      	adds	r3, r7, r1
 8002b54:	0018      	movs	r0, r3
 8002b56:	f001 f859 	bl	8003c0c <HAL_RCC_OscConfig>
 8002b5a:	1e03      	subs	r3, r0, #0
 8002b5c:	d001      	beq.n	8002b62 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8002b5e:	f000 f927 	bl	8002db0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b62:	003b      	movs	r3, r7
 8002b64:	2207      	movs	r2, #7
 8002b66:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002b68:	003b      	movs	r3, r7
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b6e:	003b      	movs	r3, r7
 8002b70:	2200      	movs	r2, #0
 8002b72:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b74:	003b      	movs	r3, r7
 8002b76:	2200      	movs	r2, #0
 8002b78:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b7a:	003b      	movs	r3, r7
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f001 fb5c 	bl	800423c <HAL_RCC_ClockConfig>
 8002b84:	1e03      	subs	r3, r0, #0
 8002b86:	d001      	beq.n	8002b8c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002b88:	f000 f912 	bl	8002db0 <Error_Handler>
  }
}
 8002b8c:	46c0      	nop			; (mov r8, r8)
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b011      	add	sp, #68	; 0x44
 8002b92:	bd90      	pop	{r4, r7, pc}

08002b94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b98:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <MX_SPI1_Init+0x74>)
 8002b9a:	4a1c      	ldr	r2, [pc, #112]	; (8002c0c <MX_SPI1_Init+0x78>)
 8002b9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b9e:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <MX_SPI1_Init+0x74>)
 8002ba0:	2282      	movs	r2, #130	; 0x82
 8002ba2:	0052      	lsls	r2, r2, #1
 8002ba4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ba6:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <MX_SPI1_Init+0x74>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bac:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <MX_SPI1_Init+0x74>)
 8002bae:	22e0      	movs	r2, #224	; 0xe0
 8002bb0:	00d2      	lsls	r2, r2, #3
 8002bb2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bb4:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <MX_SPI1_Init+0x74>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bba:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <MX_SPI1_Init+0x74>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <MX_SPI1_Init+0x74>)
 8002bc2:	2280      	movs	r2, #128	; 0x80
 8002bc4:	0092      	lsls	r2, r2, #2
 8002bc6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002bc8:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <MX_SPI1_Init+0x74>)
 8002bca:	2208      	movs	r2, #8
 8002bcc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bce:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <MX_SPI1_Init+0x74>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <MX_SPI1_Init+0x74>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bda:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <MX_SPI1_Init+0x74>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002be0:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <MX_SPI1_Init+0x74>)
 8002be2:	2207      	movs	r2, #7
 8002be4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <MX_SPI1_Init+0x74>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <MX_SPI1_Init+0x74>)
 8002bee:	2208      	movs	r2, #8
 8002bf0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bf2:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <MX_SPI1_Init+0x74>)
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f001 fc71 	bl	80044dc <HAL_SPI_Init>
 8002bfa:	1e03      	subs	r3, r0, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002bfe:	f000 f8d7 	bl	8002db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20000a50 	.word	0x20000a50
 8002c0c:	40013000 	.word	0x40013000

08002c10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c14:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <MX_USART2_UART_Init+0x58>)
 8002c16:	4a15      	ldr	r2, [pc, #84]	; (8002c6c <MX_USART2_UART_Init+0x5c>)
 8002c18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c1a:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <MX_USART2_UART_Init+0x58>)
 8002c1c:	22e1      	movs	r2, #225	; 0xe1
 8002c1e:	0252      	lsls	r2, r2, #9
 8002c20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c22:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <MX_USART2_UART_Init+0x58>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c28:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <MX_USART2_UART_Init+0x58>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c2e:	4b0e      	ldr	r3, [pc, #56]	; (8002c68 <MX_USART2_UART_Init+0x58>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <MX_USART2_UART_Init+0x58>)
 8002c36:	2208      	movs	r2, #8
 8002c38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c3a:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <MX_USART2_UART_Init+0x58>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <MX_USART2_UART_Init+0x58>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c46:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <MX_USART2_UART_Init+0x58>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <MX_USART2_UART_Init+0x58>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c52:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <MX_USART2_UART_Init+0x58>)
 8002c54:	0018      	movs	r0, r3
 8002c56:	f002 fb39 	bl	80052cc <HAL_UART_Init>
 8002c5a:	1e03      	subs	r3, r0, #0
 8002c5c:	d001      	beq.n	8002c62 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002c5e:	f000 f8a7 	bl	8002db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	20000ab4 	.word	0x20000ab4
 8002c6c:	40004400 	.word	0x40004400

08002c70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c76:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <MX_DMA_Init+0x38>)
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <MX_DMA_Init+0x38>)
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	615a      	str	r2, [r3, #20]
 8002c82:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <MX_DMA_Init+0x38>)
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	2201      	movs	r2, #1
 8002c88:	4013      	ands	r3, r2
 8002c8a:	607b      	str	r3, [r7, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2100      	movs	r1, #0
 8002c92:	200a      	movs	r0, #10
 8002c94:	f000 fbc8 	bl	8003428 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002c98:	200a      	movs	r0, #10
 8002c9a:	f000 fbda 	bl	8003452 <HAL_NVIC_EnableIRQ>

}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	b002      	add	sp, #8
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	40021000 	.word	0x40021000

08002cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cac:	b590      	push	{r4, r7, lr}
 8002cae:	b089      	sub	sp, #36	; 0x24
 8002cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb2:	240c      	movs	r4, #12
 8002cb4:	193b      	adds	r3, r7, r4
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	2314      	movs	r3, #20
 8002cba:	001a      	movs	r2, r3
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	f003 fa0c 	bl	80060da <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc2:	4b38      	ldr	r3, [pc, #224]	; (8002da4 <MX_GPIO_Init+0xf8>)
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	4b37      	ldr	r3, [pc, #220]	; (8002da4 <MX_GPIO_Init+0xf8>)
 8002cc8:	2180      	movs	r1, #128	; 0x80
 8002cca:	0289      	lsls	r1, r1, #10
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	615a      	str	r2, [r3, #20]
 8002cd0:	4b34      	ldr	r3, [pc, #208]	; (8002da4 <MX_GPIO_Init+0xf8>)
 8002cd2:	695a      	ldr	r2, [r3, #20]
 8002cd4:	2380      	movs	r3, #128	; 0x80
 8002cd6:	029b      	lsls	r3, r3, #10
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cde:	4b31      	ldr	r3, [pc, #196]	; (8002da4 <MX_GPIO_Init+0xf8>)
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	4b30      	ldr	r3, [pc, #192]	; (8002da4 <MX_GPIO_Init+0xf8>)
 8002ce4:	2180      	movs	r1, #128	; 0x80
 8002ce6:	02c9      	lsls	r1, r1, #11
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	615a      	str	r2, [r3, #20]
 8002cec:	4b2d      	ldr	r3, [pc, #180]	; (8002da4 <MX_GPIO_Init+0xf8>)
 8002cee:	695a      	ldr	r2, [r3, #20]
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	02db      	lsls	r3, r3, #11
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	607b      	str	r3, [r7, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8002cfa:	2390      	movs	r3, #144	; 0x90
 8002cfc:	05db      	lsls	r3, r3, #23
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2103      	movs	r1, #3
 8002d02:	0018      	movs	r0, r3
 8002d04:	f000 ff48 	bl	8003b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	015b      	lsls	r3, r3, #5
 8002d0c:	4826      	ldr	r0, [pc, #152]	; (8002da8 <MX_GPIO_Init+0xfc>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	0019      	movs	r1, r3
 8002d12:	f000 ff41 	bl	8003b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d16:	0021      	movs	r1, r4
 8002d18:	187b      	adds	r3, r7, r1
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d1e:	187b      	adds	r3, r7, r1
 8002d20:	2201      	movs	r2, #1
 8002d22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d24:	187b      	adds	r3, r7, r1
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2a:	187b      	adds	r3, r7, r1
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d30:	000c      	movs	r4, r1
 8002d32:	187a      	adds	r2, r7, r1
 8002d34:	2390      	movs	r3, #144	; 0x90
 8002d36:	05db      	lsls	r3, r3, #23
 8002d38:	0011      	movs	r1, r2
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f000 fdbc 	bl	80038b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002d40:	0021      	movs	r1, r4
 8002d42:	187b      	adds	r3, r7, r1
 8002d44:	2280      	movs	r2, #128	; 0x80
 8002d46:	0112      	lsls	r2, r2, #4
 8002d48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d4a:	187b      	adds	r3, r7, r1
 8002d4c:	4a17      	ldr	r2, [pc, #92]	; (8002dac <MX_GPIO_Init+0x100>)
 8002d4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	187b      	adds	r3, r7, r1
 8002d52:	2200      	movs	r2, #0
 8002d54:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d56:	000c      	movs	r4, r1
 8002d58:	187b      	adds	r3, r7, r1
 8002d5a:	4a13      	ldr	r2, [pc, #76]	; (8002da8 <MX_GPIO_Init+0xfc>)
 8002d5c:	0019      	movs	r1, r3
 8002d5e:	0010      	movs	r0, r2
 8002d60:	f000 fdaa 	bl	80038b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002d64:	0021      	movs	r1, r4
 8002d66:	187b      	adds	r3, r7, r1
 8002d68:	2280      	movs	r2, #128	; 0x80
 8002d6a:	0152      	lsls	r2, r2, #5
 8002d6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d6e:	187b      	adds	r3, r7, r1
 8002d70:	2201      	movs	r2, #1
 8002d72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	187b      	adds	r3, r7, r1
 8002d76:	2200      	movs	r2, #0
 8002d78:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7a:	187b      	adds	r3, r7, r1
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d80:	187b      	adds	r3, r7, r1
 8002d82:	4a09      	ldr	r2, [pc, #36]	; (8002da8 <MX_GPIO_Init+0xfc>)
 8002d84:	0019      	movs	r1, r3
 8002d86:	0010      	movs	r0, r2
 8002d88:	f000 fd96 	bl	80038b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2100      	movs	r1, #0
 8002d90:	2007      	movs	r0, #7
 8002d92:	f000 fb49 	bl	8003428 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002d96:	2007      	movs	r0, #7
 8002d98:	f000 fb5b 	bl	8003452 <HAL_NVIC_EnableIRQ>

}
 8002d9c:	46c0      	nop			; (mov r8, r8)
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b009      	add	sp, #36	; 0x24
 8002da2:	bd90      	pop	{r4, r7, pc}
 8002da4:	40021000 	.word	0x40021000
 8002da8:	48000400 	.word	0x48000400
 8002dac:	10110000 	.word	0x10110000

08002db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002db4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002db6:	e7fe      	b.n	8002db6 <Error_Handler+0x6>

08002db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dbe:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <HAL_MspInit+0x44>)
 8002dc0:	699a      	ldr	r2, [r3, #24]
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <HAL_MspInit+0x44>)
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	619a      	str	r2, [r3, #24]
 8002dca:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <HAL_MspInit+0x44>)
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	607b      	str	r3, [r7, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dd6:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <HAL_MspInit+0x44>)
 8002dd8:	69da      	ldr	r2, [r3, #28]
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <HAL_MspInit+0x44>)
 8002ddc:	2180      	movs	r1, #128	; 0x80
 8002dde:	0549      	lsls	r1, r1, #21
 8002de0:	430a      	orrs	r2, r1
 8002de2:	61da      	str	r2, [r3, #28]
 8002de4:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_MspInit+0x44>)
 8002de6:	69da      	ldr	r2, [r3, #28]
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	055b      	lsls	r3, r3, #21
 8002dec:	4013      	ands	r3, r2
 8002dee:	603b      	str	r3, [r7, #0]
 8002df0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	46bd      	mov	sp, r7
 8002df6:	b002      	add	sp, #8
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	40021000 	.word	0x40021000

08002e00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08a      	sub	sp, #40	; 0x28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e08:	2314      	movs	r3, #20
 8002e0a:	18fb      	adds	r3, r7, r3
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	2314      	movs	r3, #20
 8002e10:	001a      	movs	r2, r3
 8002e12:	2100      	movs	r1, #0
 8002e14:	f003 f961 	bl	80060da <memset>
  if(hspi->Instance==SPI1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a1c      	ldr	r2, [pc, #112]	; (8002e90 <HAL_SPI_MspInit+0x90>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d132      	bne.n	8002e88 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e22:	4b1c      	ldr	r3, [pc, #112]	; (8002e94 <HAL_SPI_MspInit+0x94>)
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <HAL_SPI_MspInit+0x94>)
 8002e28:	2180      	movs	r1, #128	; 0x80
 8002e2a:	0149      	lsls	r1, r1, #5
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	619a      	str	r2, [r3, #24]
 8002e30:	4b18      	ldr	r3, [pc, #96]	; (8002e94 <HAL_SPI_MspInit+0x94>)
 8002e32:	699a      	ldr	r2, [r3, #24]
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	015b      	lsls	r3, r3, #5
 8002e38:	4013      	ands	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e3e:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <HAL_SPI_MspInit+0x94>)
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	4b14      	ldr	r3, [pc, #80]	; (8002e94 <HAL_SPI_MspInit+0x94>)
 8002e44:	2180      	movs	r1, #128	; 0x80
 8002e46:	0289      	lsls	r1, r1, #10
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	615a      	str	r2, [r3, #20]
 8002e4c:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <HAL_SPI_MspInit+0x94>)
 8002e4e:	695a      	ldr	r2, [r3, #20]
 8002e50:	2380      	movs	r3, #128	; 0x80
 8002e52:	029b      	lsls	r3, r3, #10
 8002e54:	4013      	ands	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002e5a:	2114      	movs	r1, #20
 8002e5c:	187b      	adds	r3, r7, r1
 8002e5e:	22e0      	movs	r2, #224	; 0xe0
 8002e60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e62:	187b      	adds	r3, r7, r1
 8002e64:	2202      	movs	r2, #2
 8002e66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	187b      	adds	r3, r7, r1
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e6e:	187b      	adds	r3, r7, r1
 8002e70:	2203      	movs	r2, #3
 8002e72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002e74:	187b      	adds	r3, r7, r1
 8002e76:	2200      	movs	r2, #0
 8002e78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e7a:	187a      	adds	r2, r7, r1
 8002e7c:	2390      	movs	r3, #144	; 0x90
 8002e7e:	05db      	lsls	r3, r3, #23
 8002e80:	0011      	movs	r1, r2
 8002e82:	0018      	movs	r0, r3
 8002e84:	f000 fd18 	bl	80038b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002e88:	46c0      	nop			; (mov r8, r8)
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	b00a      	add	sp, #40	; 0x28
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40013000 	.word	0x40013000
 8002e94:	40021000 	.word	0x40021000

08002e98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08a      	sub	sp, #40	; 0x28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea0:	2314      	movs	r3, #20
 8002ea2:	18fb      	adds	r3, r7, r3
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	2314      	movs	r3, #20
 8002ea8:	001a      	movs	r2, r3
 8002eaa:	2100      	movs	r1, #0
 8002eac:	f003 f915 	bl	80060da <memset>
  if(huart->Instance==USART2)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a3b      	ldr	r2, [pc, #236]	; (8002fa4 <HAL_UART_MspInit+0x10c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d170      	bne.n	8002f9c <HAL_UART_MspInit+0x104>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002eba:	4b3b      	ldr	r3, [pc, #236]	; (8002fa8 <HAL_UART_MspInit+0x110>)
 8002ebc:	69da      	ldr	r2, [r3, #28]
 8002ebe:	4b3a      	ldr	r3, [pc, #232]	; (8002fa8 <HAL_UART_MspInit+0x110>)
 8002ec0:	2180      	movs	r1, #128	; 0x80
 8002ec2:	0289      	lsls	r1, r1, #10
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	61da      	str	r2, [r3, #28]
 8002ec8:	4b37      	ldr	r3, [pc, #220]	; (8002fa8 <HAL_UART_MspInit+0x110>)
 8002eca:	69da      	ldr	r2, [r3, #28]
 8002ecc:	2380      	movs	r3, #128	; 0x80
 8002ece:	029b      	lsls	r3, r3, #10
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed6:	4b34      	ldr	r3, [pc, #208]	; (8002fa8 <HAL_UART_MspInit+0x110>)
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	4b33      	ldr	r3, [pc, #204]	; (8002fa8 <HAL_UART_MspInit+0x110>)
 8002edc:	2180      	movs	r1, #128	; 0x80
 8002ede:	0289      	lsls	r1, r1, #10
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	615a      	str	r2, [r3, #20]
 8002ee4:	4b30      	ldr	r3, [pc, #192]	; (8002fa8 <HAL_UART_MspInit+0x110>)
 8002ee6:	695a      	ldr	r2, [r3, #20]
 8002ee8:	2380      	movs	r3, #128	; 0x80
 8002eea:	029b      	lsls	r3, r3, #10
 8002eec:	4013      	ands	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ef2:	2114      	movs	r1, #20
 8002ef4:	187b      	adds	r3, r7, r1
 8002ef6:	220c      	movs	r2, #12
 8002ef8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efa:	187b      	adds	r3, r7, r1
 8002efc:	2202      	movs	r2, #2
 8002efe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f00:	187b      	adds	r3, r7, r1
 8002f02:	2200      	movs	r2, #0
 8002f04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f06:	187b      	adds	r3, r7, r1
 8002f08:	2203      	movs	r2, #3
 8002f0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002f0c:	187b      	adds	r3, r7, r1
 8002f0e:	2201      	movs	r2, #1
 8002f10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f12:	187a      	adds	r2, r7, r1
 8002f14:	2390      	movs	r3, #144	; 0x90
 8002f16:	05db      	lsls	r3, r3, #23
 8002f18:	0011      	movs	r1, r2
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f000 fccc 	bl	80038b8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8002f20:	4b22      	ldr	r3, [pc, #136]	; (8002fac <HAL_UART_MspInit+0x114>)
 8002f22:	4a23      	ldr	r2, [pc, #140]	; (8002fb0 <HAL_UART_MspInit+0x118>)
 8002f24:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f26:	4b21      	ldr	r3, [pc, #132]	; (8002fac <HAL_UART_MspInit+0x114>)
 8002f28:	2210      	movs	r2, #16
 8002f2a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f2c:	4b1f      	ldr	r3, [pc, #124]	; (8002fac <HAL_UART_MspInit+0x114>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f32:	4b1e      	ldr	r3, [pc, #120]	; (8002fac <HAL_UART_MspInit+0x114>)
 8002f34:	2280      	movs	r2, #128	; 0x80
 8002f36:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f38:	4b1c      	ldr	r3, [pc, #112]	; (8002fac <HAL_UART_MspInit+0x114>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f3e:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <HAL_UART_MspInit+0x114>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002f44:	4b19      	ldr	r3, [pc, #100]	; (8002fac <HAL_UART_MspInit+0x114>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f4a:	4b18      	ldr	r3, [pc, #96]	; (8002fac <HAL_UART_MspInit+0x114>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002f50:	4b16      	ldr	r3, [pc, #88]	; (8002fac <HAL_UART_MspInit+0x114>)
 8002f52:	0018      	movs	r0, r3
 8002f54:	f000 fa9a 	bl	800348c <HAL_DMA_Init>
 8002f58:	1e03      	subs	r3, r0, #0
 8002f5a:	d001      	beq.n	8002f60 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8002f5c:	f7ff ff28 	bl	8002db0 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 8002f60:	4a14      	ldr	r2, [pc, #80]	; (8002fb4 <HAL_UART_MspInit+0x11c>)
 8002f62:	23a8      	movs	r3, #168	; 0xa8
 8002f64:	58d3      	ldr	r3, [r2, r3]
 8002f66:	4913      	ldr	r1, [pc, #76]	; (8002fb4 <HAL_UART_MspInit+0x11c>)
 8002f68:	22f0      	movs	r2, #240	; 0xf0
 8002f6a:	4393      	bics	r3, r2
 8002f6c:	22a8      	movs	r2, #168	; 0xa8
 8002f6e:	508b      	str	r3, [r1, r2]
 8002f70:	4a10      	ldr	r2, [pc, #64]	; (8002fb4 <HAL_UART_MspInit+0x11c>)
 8002f72:	23a8      	movs	r3, #168	; 0xa8
 8002f74:	58d3      	ldr	r3, [r2, r3]
 8002f76:	490f      	ldr	r1, [pc, #60]	; (8002fb4 <HAL_UART_MspInit+0x11c>)
 8002f78:	2290      	movs	r2, #144	; 0x90
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	22a8      	movs	r2, #168	; 0xa8
 8002f7e:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a0a      	ldr	r2, [pc, #40]	; (8002fac <HAL_UART_MspInit+0x114>)
 8002f84:	66da      	str	r2, [r3, #108]	; 0x6c
 8002f86:	4b09      	ldr	r3, [pc, #36]	; (8002fac <HAL_UART_MspInit+0x114>)
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2100      	movs	r1, #0
 8002f90:	201c      	movs	r0, #28
 8002f92:	f000 fa49 	bl	8003428 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f96:	201c      	movs	r0, #28
 8002f98:	f000 fa5b 	bl	8003452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f9c:	46c0      	nop			; (mov r8, r8)
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b00a      	add	sp, #40	; 0x28
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40004400 	.word	0x40004400
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	20000a0c 	.word	0x20000a0c
 8002fb0:	4002001c 	.word	0x4002001c
 8002fb4:	40020000 	.word	0x40020000

08002fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fbc:	e7fe      	b.n	8002fbc <NMI_Handler+0x4>

08002fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fc2:	e7fe      	b.n	8002fc2 <HardFault_Handler+0x4>

08002fc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002fc8:	46c0      	nop			; (mov r8, r8)
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fdc:	f000 f93a 	bl	8003254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fe0:	46c0      	nop			; (mov r8, r8)
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002fea:	2380      	movs	r3, #128	; 0x80
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f000 fdf0 	bl	8003bd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002ff4:	46c0      	nop			; (mov r8, r8)
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
	...

08002ffc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003000:	4b03      	ldr	r3, [pc, #12]	; (8003010 <DMA1_Channel2_3_IRQHandler+0x14>)
 8003002:	0018      	movs	r0, r3
 8003004:	f000 fb6e 	bl	80036e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003008:	46c0      	nop			; (mov r8, r8)
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	20000a0c 	.word	0x20000a0c

08003014 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003018:	4b03      	ldr	r3, [pc, #12]	; (8003028 <USART2_IRQHandler+0x14>)
 800301a:	0018      	movs	r0, r3
 800301c:	f002 fa3c 	bl	8005498 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003020:	46c0      	nop			; (mov r8, r8)
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	20000ab4 	.word	0x20000ab4

0800302c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	e00a      	b.n	8003054 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800303e:	e000      	b.n	8003042 <_read+0x16>
 8003040:	bf00      	nop
 8003042:	0001      	movs	r1, r0
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	60ba      	str	r2, [r7, #8]
 800304a:	b2ca      	uxtb	r2, r1
 800304c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	3301      	adds	r3, #1
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	429a      	cmp	r2, r3
 800305a:	dbf0      	blt.n	800303e <_read+0x12>
	}

return len;
 800305c:	687b      	ldr	r3, [r7, #4]
}
 800305e:	0018      	movs	r0, r3
 8003060:	46bd      	mov	sp, r7
 8003062:	b006      	add	sp, #24
 8003064:	bd80      	pop	{r7, pc}

08003066 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b086      	sub	sp, #24
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	e009      	b.n	800308c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	60ba      	str	r2, [r7, #8]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	0018      	movs	r0, r3
 8003082:	f7ff fa49 	bl	8002518 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	3301      	adds	r3, #1
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	429a      	cmp	r2, r3
 8003092:	dbf1      	blt.n	8003078 <_write+0x12>
	}
	return len;
 8003094:	687b      	ldr	r3, [r7, #4]
}
 8003096:	0018      	movs	r0, r3
 8003098:	46bd      	mov	sp, r7
 800309a:	b006      	add	sp, #24
 800309c:	bd80      	pop	{r7, pc}

0800309e <_close>:

int _close(int file)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
	return -1;
 80030a6:	2301      	movs	r3, #1
 80030a8:	425b      	negs	r3, r3
}
 80030aa:	0018      	movs	r0, r3
 80030ac:	46bd      	mov	sp, r7
 80030ae:	b002      	add	sp, #8
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2280      	movs	r2, #128	; 0x80
 80030c0:	0192      	lsls	r2, r2, #6
 80030c2:	605a      	str	r2, [r3, #4]
	return 0;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	0018      	movs	r0, r3
 80030c8:	46bd      	mov	sp, r7
 80030ca:	b002      	add	sp, #8
 80030cc:	bd80      	pop	{r7, pc}

080030ce <_isatty>:

int _isatty(int file)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
	return 1;
 80030d6:	2301      	movs	r3, #1
}
 80030d8:	0018      	movs	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	b002      	add	sp, #8
 80030de:	bd80      	pop	{r7, pc}

080030e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
	return 0;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	0018      	movs	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	b004      	add	sp, #16
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003100:	4a14      	ldr	r2, [pc, #80]	; (8003154 <_sbrk+0x5c>)
 8003102:	4b15      	ldr	r3, [pc, #84]	; (8003158 <_sbrk+0x60>)
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800310c:	4b13      	ldr	r3, [pc, #76]	; (800315c <_sbrk+0x64>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d102      	bne.n	800311a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003114:	4b11      	ldr	r3, [pc, #68]	; (800315c <_sbrk+0x64>)
 8003116:	4a12      	ldr	r2, [pc, #72]	; (8003160 <_sbrk+0x68>)
 8003118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800311a:	4b10      	ldr	r3, [pc, #64]	; (800315c <_sbrk+0x64>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	18d3      	adds	r3, r2, r3
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	429a      	cmp	r2, r3
 8003126:	d207      	bcs.n	8003138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003128:	f002 ffa4 	bl	8006074 <__errno>
 800312c:	0003      	movs	r3, r0
 800312e:	220c      	movs	r2, #12
 8003130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003132:	2301      	movs	r3, #1
 8003134:	425b      	negs	r3, r3
 8003136:	e009      	b.n	800314c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003138:	4b08      	ldr	r3, [pc, #32]	; (800315c <_sbrk+0x64>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800313e:	4b07      	ldr	r3, [pc, #28]	; (800315c <_sbrk+0x64>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	18d2      	adds	r2, r2, r3
 8003146:	4b05      	ldr	r3, [pc, #20]	; (800315c <_sbrk+0x64>)
 8003148:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800314a:	68fb      	ldr	r3, [r7, #12]
}
 800314c:	0018      	movs	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	b006      	add	sp, #24
 8003152:	bd80      	pop	{r7, pc}
 8003154:	20008000 	.word	0x20008000
 8003158:	00000400 	.word	0x00000400
 800315c:	20000200 	.word	0x20000200
 8003160:	20000b40 	.word	0x20000b40

08003164 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003168:	46c0      	nop			; (mov r8, r8)
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003170:	480d      	ldr	r0, [pc, #52]	; (80031a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003172:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003174:	480d      	ldr	r0, [pc, #52]	; (80031ac <LoopForever+0x6>)
  ldr r1, =_edata
 8003176:	490e      	ldr	r1, [pc, #56]	; (80031b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003178:	4a0e      	ldr	r2, [pc, #56]	; (80031b4 <LoopForever+0xe>)
  movs r3, #0
 800317a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800317c:	e002      	b.n	8003184 <LoopCopyDataInit>

0800317e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800317e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003182:	3304      	adds	r3, #4

08003184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003188:	d3f9      	bcc.n	800317e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800318a:	4a0b      	ldr	r2, [pc, #44]	; (80031b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800318c:	4c0b      	ldr	r4, [pc, #44]	; (80031bc <LoopForever+0x16>)
  movs r3, #0
 800318e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003190:	e001      	b.n	8003196 <LoopFillZerobss>

08003192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003194:	3204      	adds	r2, #4

08003196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003198:	d3fb      	bcc.n	8003192 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800319a:	f7ff ffe3 	bl	8003164 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800319e:	f002 ff6f 	bl	8006080 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031a2:	f7ff fc87 	bl	8002ab4 <main>

080031a6 <LoopForever>:

LoopForever:
    b LoopForever
 80031a6:	e7fe      	b.n	80031a6 <LoopForever>
  ldr   r0, =_estack
 80031a8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80031ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031b0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80031b4:	0800aac0 	.word	0x0800aac0
  ldr r2, =_sbss
 80031b8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80031bc:	20000b40 	.word	0x20000b40

080031c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031c0:	e7fe      	b.n	80031c0 <ADC1_IRQHandler>
	...

080031c4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031c8:	4b07      	ldr	r3, [pc, #28]	; (80031e8 <HAL_Init+0x24>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <HAL_Init+0x24>)
 80031ce:	2110      	movs	r1, #16
 80031d0:	430a      	orrs	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80031d4:	2003      	movs	r0, #3
 80031d6:	f000 f809 	bl	80031ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031da:	f7ff fded 	bl	8002db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	0018      	movs	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	40022000 	.word	0x40022000

080031ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031ec:	b590      	push	{r4, r7, lr}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031f4:	4b14      	ldr	r3, [pc, #80]	; (8003248 <HAL_InitTick+0x5c>)
 80031f6:	681c      	ldr	r4, [r3, #0]
 80031f8:	4b14      	ldr	r3, [pc, #80]	; (800324c <HAL_InitTick+0x60>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	0019      	movs	r1, r3
 80031fe:	23fa      	movs	r3, #250	; 0xfa
 8003200:	0098      	lsls	r0, r3, #2
 8003202:	f7fc ff91 	bl	8000128 <__udivsi3>
 8003206:	0003      	movs	r3, r0
 8003208:	0019      	movs	r1, r3
 800320a:	0020      	movs	r0, r4
 800320c:	f7fc ff8c 	bl	8000128 <__udivsi3>
 8003210:	0003      	movs	r3, r0
 8003212:	0018      	movs	r0, r3
 8003214:	f000 f92d 	bl	8003472 <HAL_SYSTICK_Config>
 8003218:	1e03      	subs	r3, r0, #0
 800321a:	d001      	beq.n	8003220 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e00f      	b.n	8003240 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b03      	cmp	r3, #3
 8003224:	d80b      	bhi.n	800323e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	2301      	movs	r3, #1
 800322a:	425b      	negs	r3, r3
 800322c:	2200      	movs	r2, #0
 800322e:	0018      	movs	r0, r3
 8003230:	f000 f8fa 	bl	8003428 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003234:	4b06      	ldr	r3, [pc, #24]	; (8003250 <HAL_InitTick+0x64>)
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	e000      	b.n	8003240 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
}
 8003240:	0018      	movs	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	b003      	add	sp, #12
 8003246:	bd90      	pop	{r4, r7, pc}
 8003248:	20000004 	.word	0x20000004
 800324c:	2000000c 	.word	0x2000000c
 8003250:	20000008 	.word	0x20000008

08003254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003258:	4b05      	ldr	r3, [pc, #20]	; (8003270 <HAL_IncTick+0x1c>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	001a      	movs	r2, r3
 800325e:	4b05      	ldr	r3, [pc, #20]	; (8003274 <HAL_IncTick+0x20>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	18d2      	adds	r2, r2, r3
 8003264:	4b03      	ldr	r3, [pc, #12]	; (8003274 <HAL_IncTick+0x20>)
 8003266:	601a      	str	r2, [r3, #0]
}
 8003268:	46c0      	nop			; (mov r8, r8)
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	2000000c 	.word	0x2000000c
 8003274:	20000b38 	.word	0x20000b38

08003278 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  return uwTick;
 800327c:	4b02      	ldr	r3, [pc, #8]	; (8003288 <HAL_GetTick+0x10>)
 800327e:	681b      	ldr	r3, [r3, #0]
}
 8003280:	0018      	movs	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	20000b38 	.word	0x20000b38

0800328c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003294:	f7ff fff0 	bl	8003278 <HAL_GetTick>
 8003298:	0003      	movs	r3, r0
 800329a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	3301      	adds	r3, #1
 80032a4:	d005      	beq.n	80032b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032a6:	4b09      	ldr	r3, [pc, #36]	; (80032cc <HAL_Delay+0x40>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	001a      	movs	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	189b      	adds	r3, r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	f7ff ffe0 	bl	8003278 <HAL_GetTick>
 80032b8:	0002      	movs	r2, r0
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d8f7      	bhi.n	80032b4 <HAL_Delay+0x28>
  {
  }
}
 80032c4:	46c0      	nop			; (mov r8, r8)
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b004      	add	sp, #16
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	2000000c 	.word	0x2000000c

080032d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	0002      	movs	r2, r0
 80032d8:	1dfb      	adds	r3, r7, #7
 80032da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032dc:	1dfb      	adds	r3, r7, #7
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b7f      	cmp	r3, #127	; 0x7f
 80032e2:	d809      	bhi.n	80032f8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032e4:	1dfb      	adds	r3, r7, #7
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	001a      	movs	r2, r3
 80032ea:	231f      	movs	r3, #31
 80032ec:	401a      	ands	r2, r3
 80032ee:	4b04      	ldr	r3, [pc, #16]	; (8003300 <__NVIC_EnableIRQ+0x30>)
 80032f0:	2101      	movs	r1, #1
 80032f2:	4091      	lsls	r1, r2
 80032f4:	000a      	movs	r2, r1
 80032f6:	601a      	str	r2, [r3, #0]
  }
}
 80032f8:	46c0      	nop			; (mov r8, r8)
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b002      	add	sp, #8
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	e000e100 	.word	0xe000e100

08003304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003304:	b590      	push	{r4, r7, lr}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	0002      	movs	r2, r0
 800330c:	6039      	str	r1, [r7, #0]
 800330e:	1dfb      	adds	r3, r7, #7
 8003310:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003312:	1dfb      	adds	r3, r7, #7
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b7f      	cmp	r3, #127	; 0x7f
 8003318:	d828      	bhi.n	800336c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800331a:	4a2f      	ldr	r2, [pc, #188]	; (80033d8 <__NVIC_SetPriority+0xd4>)
 800331c:	1dfb      	adds	r3, r7, #7
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	b25b      	sxtb	r3, r3
 8003322:	089b      	lsrs	r3, r3, #2
 8003324:	33c0      	adds	r3, #192	; 0xc0
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	589b      	ldr	r3, [r3, r2]
 800332a:	1dfa      	adds	r2, r7, #7
 800332c:	7812      	ldrb	r2, [r2, #0]
 800332e:	0011      	movs	r1, r2
 8003330:	2203      	movs	r2, #3
 8003332:	400a      	ands	r2, r1
 8003334:	00d2      	lsls	r2, r2, #3
 8003336:	21ff      	movs	r1, #255	; 0xff
 8003338:	4091      	lsls	r1, r2
 800333a:	000a      	movs	r2, r1
 800333c:	43d2      	mvns	r2, r2
 800333e:	401a      	ands	r2, r3
 8003340:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	019b      	lsls	r3, r3, #6
 8003346:	22ff      	movs	r2, #255	; 0xff
 8003348:	401a      	ands	r2, r3
 800334a:	1dfb      	adds	r3, r7, #7
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	0018      	movs	r0, r3
 8003350:	2303      	movs	r3, #3
 8003352:	4003      	ands	r3, r0
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003358:	481f      	ldr	r0, [pc, #124]	; (80033d8 <__NVIC_SetPriority+0xd4>)
 800335a:	1dfb      	adds	r3, r7, #7
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	b25b      	sxtb	r3, r3
 8003360:	089b      	lsrs	r3, r3, #2
 8003362:	430a      	orrs	r2, r1
 8003364:	33c0      	adds	r3, #192	; 0xc0
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800336a:	e031      	b.n	80033d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800336c:	4a1b      	ldr	r2, [pc, #108]	; (80033dc <__NVIC_SetPriority+0xd8>)
 800336e:	1dfb      	adds	r3, r7, #7
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	0019      	movs	r1, r3
 8003374:	230f      	movs	r3, #15
 8003376:	400b      	ands	r3, r1
 8003378:	3b08      	subs	r3, #8
 800337a:	089b      	lsrs	r3, r3, #2
 800337c:	3306      	adds	r3, #6
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	18d3      	adds	r3, r2, r3
 8003382:	3304      	adds	r3, #4
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	1dfa      	adds	r2, r7, #7
 8003388:	7812      	ldrb	r2, [r2, #0]
 800338a:	0011      	movs	r1, r2
 800338c:	2203      	movs	r2, #3
 800338e:	400a      	ands	r2, r1
 8003390:	00d2      	lsls	r2, r2, #3
 8003392:	21ff      	movs	r1, #255	; 0xff
 8003394:	4091      	lsls	r1, r2
 8003396:	000a      	movs	r2, r1
 8003398:	43d2      	mvns	r2, r2
 800339a:	401a      	ands	r2, r3
 800339c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	019b      	lsls	r3, r3, #6
 80033a2:	22ff      	movs	r2, #255	; 0xff
 80033a4:	401a      	ands	r2, r3
 80033a6:	1dfb      	adds	r3, r7, #7
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	0018      	movs	r0, r3
 80033ac:	2303      	movs	r3, #3
 80033ae:	4003      	ands	r3, r0
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033b4:	4809      	ldr	r0, [pc, #36]	; (80033dc <__NVIC_SetPriority+0xd8>)
 80033b6:	1dfb      	adds	r3, r7, #7
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	001c      	movs	r4, r3
 80033bc:	230f      	movs	r3, #15
 80033be:	4023      	ands	r3, r4
 80033c0:	3b08      	subs	r3, #8
 80033c2:	089b      	lsrs	r3, r3, #2
 80033c4:	430a      	orrs	r2, r1
 80033c6:	3306      	adds	r3, #6
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	18c3      	adds	r3, r0, r3
 80033cc:	3304      	adds	r3, #4
 80033ce:	601a      	str	r2, [r3, #0]
}
 80033d0:	46c0      	nop			; (mov r8, r8)
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b003      	add	sp, #12
 80033d6:	bd90      	pop	{r4, r7, pc}
 80033d8:	e000e100 	.word	0xe000e100
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	4a0c      	ldr	r2, [pc, #48]	; (8003420 <SysTick_Config+0x40>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d901      	bls.n	80033f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033f2:	2301      	movs	r3, #1
 80033f4:	e010      	b.n	8003418 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033f6:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <SysTick_Config+0x44>)
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	3a01      	subs	r2, #1
 80033fc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033fe:	2301      	movs	r3, #1
 8003400:	425b      	negs	r3, r3
 8003402:	2103      	movs	r1, #3
 8003404:	0018      	movs	r0, r3
 8003406:	f7ff ff7d 	bl	8003304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800340a:	4b06      	ldr	r3, [pc, #24]	; (8003424 <SysTick_Config+0x44>)
 800340c:	2200      	movs	r2, #0
 800340e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003410:	4b04      	ldr	r3, [pc, #16]	; (8003424 <SysTick_Config+0x44>)
 8003412:	2207      	movs	r2, #7
 8003414:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003416:	2300      	movs	r3, #0
}
 8003418:	0018      	movs	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	b002      	add	sp, #8
 800341e:	bd80      	pop	{r7, pc}
 8003420:	00ffffff 	.word	0x00ffffff
 8003424:	e000e010 	.word	0xe000e010

08003428 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	607a      	str	r2, [r7, #4]
 8003432:	210f      	movs	r1, #15
 8003434:	187b      	adds	r3, r7, r1
 8003436:	1c02      	adds	r2, r0, #0
 8003438:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	187b      	adds	r3, r7, r1
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	b25b      	sxtb	r3, r3
 8003442:	0011      	movs	r1, r2
 8003444:	0018      	movs	r0, r3
 8003446:	f7ff ff5d 	bl	8003304 <__NVIC_SetPriority>
}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	46bd      	mov	sp, r7
 800344e:	b004      	add	sp, #16
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	0002      	movs	r2, r0
 800345a:	1dfb      	adds	r3, r7, #7
 800345c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800345e:	1dfb      	adds	r3, r7, #7
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	b25b      	sxtb	r3, r3
 8003464:	0018      	movs	r0, r3
 8003466:	f7ff ff33 	bl	80032d0 <__NVIC_EnableIRQ>
}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	46bd      	mov	sp, r7
 800346e:	b002      	add	sp, #8
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	0018      	movs	r0, r3
 800347e:	f7ff ffaf 	bl	80033e0 <SysTick_Config>
 8003482:	0003      	movs	r3, r0
}
 8003484:	0018      	movs	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	b002      	add	sp, #8
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e036      	b.n	8003510 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2221      	movs	r2, #33	; 0x21
 80034a6:	2102      	movs	r1, #2
 80034a8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	4a18      	ldr	r2, [pc, #96]	; (8003518 <HAL_DMA_Init+0x8c>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80034c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	0018      	movs	r0, r3
 80034f4:	f000 f9c4 	bl	8003880 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2221      	movs	r2, #33	; 0x21
 8003502:	2101      	movs	r1, #1
 8003504:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2220      	movs	r2, #32
 800350a:	2100      	movs	r1, #0
 800350c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}  
 8003510:	0018      	movs	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	b004      	add	sp, #16
 8003516:	bd80      	pop	{r7, pc}
 8003518:	ffffc00f 	.word	0xffffc00f

0800351c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800352a:	2317      	movs	r3, #23
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	2200      	movs	r2, #0
 8003530:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	5c9b      	ldrb	r3, [r3, r2]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_DMA_Start_IT+0x24>
 800353c:	2302      	movs	r3, #2
 800353e:	e04f      	b.n	80035e0 <HAL_DMA_Start_IT+0xc4>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2220      	movs	r2, #32
 8003544:	2101      	movs	r1, #1
 8003546:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2221      	movs	r2, #33	; 0x21
 800354c:	5c9b      	ldrb	r3, [r3, r2]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b01      	cmp	r3, #1
 8003552:	d13a      	bne.n	80035ca <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2221      	movs	r2, #33	; 0x21
 8003558:	2102      	movs	r1, #2
 800355a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2101      	movs	r1, #1
 800356e:	438a      	bics	r2, r1
 8003570:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	68b9      	ldr	r1, [r7, #8]
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 f955 	bl	8003828 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003582:	2b00      	cmp	r3, #0
 8003584:	d008      	beq.n	8003598 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	210e      	movs	r1, #14
 8003592:	430a      	orrs	r2, r1
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	e00f      	b.n	80035b8 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	210a      	movs	r1, #10
 80035a4:	430a      	orrs	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2104      	movs	r1, #4
 80035b4:	438a      	bics	r2, r1
 80035b6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2101      	movs	r1, #1
 80035c4:	430a      	orrs	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	e007      	b.n	80035da <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2220      	movs	r2, #32
 80035ce:	2100      	movs	r1, #0
 80035d0:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80035d2:	2317      	movs	r3, #23
 80035d4:	18fb      	adds	r3, r7, r3
 80035d6:	2202      	movs	r2, #2
 80035d8:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80035da:	2317      	movs	r3, #23
 80035dc:	18fb      	adds	r3, r7, r3
 80035de:	781b      	ldrb	r3, [r3, #0]
} 
 80035e0:	0018      	movs	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b006      	add	sp, #24
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2221      	movs	r2, #33	; 0x21
 80035f4:	5c9b      	ldrb	r3, [r3, r2]
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d008      	beq.n	800360e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2204      	movs	r2, #4
 8003600:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	2100      	movs	r1, #0
 8003608:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e020      	b.n	8003650 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	210e      	movs	r1, #14
 800361a:	438a      	bics	r2, r1
 800361c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2101      	movs	r1, #1
 800362a:	438a      	bics	r2, r1
 800362c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003636:	2101      	movs	r1, #1
 8003638:	4091      	lsls	r1, r2
 800363a:	000a      	movs	r2, r1
 800363c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2221      	movs	r2, #33	; 0x21
 8003642:	2101      	movs	r1, #1
 8003644:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	2100      	movs	r1, #0
 800364c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	0018      	movs	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	b002      	add	sp, #8
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003660:	230f      	movs	r3, #15
 8003662:	18fb      	adds	r3, r7, r3
 8003664:	2200      	movs	r2, #0
 8003666:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2221      	movs	r2, #33	; 0x21
 800366c:	5c9b      	ldrb	r3, [r3, r2]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d007      	beq.n	8003684 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2204      	movs	r2, #4
 8003678:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800367a:	230f      	movs	r3, #15
 800367c:	18fb      	adds	r3, r7, r3
 800367e:	2201      	movs	r2, #1
 8003680:	701a      	strb	r2, [r3, #0]
 8003682:	e028      	b.n	80036d6 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	210e      	movs	r1, #14
 8003690:	438a      	bics	r2, r1
 8003692:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2101      	movs	r1, #1
 80036a0:	438a      	bics	r2, r1
 80036a2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ac:	2101      	movs	r1, #1
 80036ae:	4091      	lsls	r1, r2
 80036b0:	000a      	movs	r2, r1
 80036b2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2221      	movs	r2, #33	; 0x21
 80036b8:	2101      	movs	r1, #1
 80036ba:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2220      	movs	r2, #32
 80036c0:	2100      	movs	r1, #0
 80036c2:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d004      	beq.n	80036d6 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	0010      	movs	r0, r2
 80036d4:	4798      	blx	r3
    } 
  }
  return status;
 80036d6:	230f      	movs	r3, #15
 80036d8:	18fb      	adds	r3, r7, r3
 80036da:	781b      	ldrb	r3, [r3, #0]
}
 80036dc:	0018      	movs	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	b004      	add	sp, #16
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	2204      	movs	r2, #4
 8003702:	409a      	lsls	r2, r3
 8003704:	0013      	movs	r3, r2
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4013      	ands	r3, r2
 800370a:	d024      	beq.n	8003756 <HAL_DMA_IRQHandler+0x72>
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2204      	movs	r2, #4
 8003710:	4013      	ands	r3, r2
 8003712:	d020      	beq.n	8003756 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2220      	movs	r2, #32
 800371c:	4013      	ands	r3, r2
 800371e:	d107      	bne.n	8003730 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2104      	movs	r1, #4
 800372c:	438a      	bics	r2, r1
 800372e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003738:	2104      	movs	r1, #4
 800373a:	4091      	lsls	r1, r2
 800373c:	000a      	movs	r2, r1
 800373e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	2b00      	cmp	r3, #0
 8003746:	d100      	bne.n	800374a <HAL_DMA_IRQHandler+0x66>
 8003748:	e06a      	b.n	8003820 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	0010      	movs	r0, r2
 8003752:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003754:	e064      	b.n	8003820 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	2202      	movs	r2, #2
 800375c:	409a      	lsls	r2, r3
 800375e:	0013      	movs	r3, r2
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4013      	ands	r3, r2
 8003764:	d02b      	beq.n	80037be <HAL_DMA_IRQHandler+0xda>
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2202      	movs	r2, #2
 800376a:	4013      	ands	r3, r2
 800376c:	d027      	beq.n	80037be <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2220      	movs	r2, #32
 8003776:	4013      	ands	r3, r2
 8003778:	d10b      	bne.n	8003792 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	210a      	movs	r1, #10
 8003786:	438a      	bics	r2, r1
 8003788:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2221      	movs	r2, #33	; 0x21
 800378e:	2101      	movs	r1, #1
 8003790:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379a:	2102      	movs	r1, #2
 800379c:	4091      	lsls	r1, r2
 800379e:	000a      	movs	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2220      	movs	r2, #32
 80037a6:	2100      	movs	r1, #0
 80037a8:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d036      	beq.n	8003820 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	0010      	movs	r0, r2
 80037ba:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80037bc:	e030      	b.n	8003820 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	2208      	movs	r2, #8
 80037c4:	409a      	lsls	r2, r3
 80037c6:	0013      	movs	r3, r2
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	4013      	ands	r3, r2
 80037cc:	d028      	beq.n	8003820 <HAL_DMA_IRQHandler+0x13c>
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2208      	movs	r2, #8
 80037d2:	4013      	ands	r3, r2
 80037d4:	d024      	beq.n	8003820 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	210e      	movs	r1, #14
 80037e2:	438a      	bics	r2, r1
 80037e4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ee:	2101      	movs	r1, #1
 80037f0:	4091      	lsls	r1, r2
 80037f2:	000a      	movs	r2, r1
 80037f4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2221      	movs	r2, #33	; 0x21
 8003800:	2101      	movs	r1, #1
 8003802:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	2100      	movs	r1, #0
 800380a:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	0010      	movs	r0, r2
 800381c:	4798      	blx	r3
    }
   }
}  
 800381e:	e7ff      	b.n	8003820 <HAL_DMA_IRQHandler+0x13c>
 8003820:	46c0      	nop			; (mov r8, r8)
 8003822:	46bd      	mov	sp, r7
 8003824:	b004      	add	sp, #16
 8003826:	bd80      	pop	{r7, pc}

08003828 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383e:	2101      	movs	r1, #1
 8003840:	4091      	lsls	r1, r2
 8003842:	000a      	movs	r2, r1
 8003844:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b10      	cmp	r3, #16
 8003854:	d108      	bne.n	8003868 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003866:	e007      	b.n	8003878 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	60da      	str	r2, [r3, #12]
}
 8003878:	46c0      	nop			; (mov r8, r8)
 800387a:	46bd      	mov	sp, r7
 800387c:	b004      	add	sp, #16
 800387e:	bd80      	pop	{r7, pc}

08003880 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a08      	ldr	r2, [pc, #32]	; (80038b0 <DMA_CalcBaseAndBitshift+0x30>)
 800388e:	4694      	mov	ip, r2
 8003890:	4463      	add	r3, ip
 8003892:	2114      	movs	r1, #20
 8003894:	0018      	movs	r0, r3
 8003896:	f7fc fc47 	bl	8000128 <__udivsi3>
 800389a:	0003      	movs	r3, r0
 800389c:	009a      	lsls	r2, r3, #2
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a03      	ldr	r2, [pc, #12]	; (80038b4 <DMA_CalcBaseAndBitshift+0x34>)
 80038a6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80038a8:	46c0      	nop			; (mov r8, r8)
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b002      	add	sp, #8
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	bffdfff8 	.word	0xbffdfff8
 80038b4:	40020000 	.word	0x40020000

080038b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038c6:	e14f      	b.n	8003b68 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2101      	movs	r1, #1
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4091      	lsls	r1, r2
 80038d2:	000a      	movs	r2, r1
 80038d4:	4013      	ands	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d100      	bne.n	80038e0 <HAL_GPIO_Init+0x28>
 80038de:	e140      	b.n	8003b62 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d00b      	beq.n	8003900 <HAL_GPIO_Init+0x48>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d007      	beq.n	8003900 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038f4:	2b11      	cmp	r3, #17
 80038f6:	d003      	beq.n	8003900 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b12      	cmp	r3, #18
 80038fe:	d130      	bne.n	8003962 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	2203      	movs	r2, #3
 800390c:	409a      	lsls	r2, r3
 800390e:	0013      	movs	r3, r2
 8003910:	43da      	mvns	r2, r3
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4013      	ands	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	409a      	lsls	r2, r3
 8003922:	0013      	movs	r3, r2
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003936:	2201      	movs	r2, #1
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	409a      	lsls	r2, r3
 800393c:	0013      	movs	r3, r2
 800393e:	43da      	mvns	r2, r3
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	4013      	ands	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	091b      	lsrs	r3, r3, #4
 800394c:	2201      	movs	r2, #1
 800394e:	401a      	ands	r2, r3
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	409a      	lsls	r2, r3
 8003954:	0013      	movs	r3, r2
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	2203      	movs	r2, #3
 800396e:	409a      	lsls	r2, r3
 8003970:	0013      	movs	r3, r2
 8003972:	43da      	mvns	r2, r3
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4013      	ands	r3, r2
 8003978:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	409a      	lsls	r2, r3
 8003984:	0013      	movs	r3, r2
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	4313      	orrs	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d003      	beq.n	80039a2 <HAL_GPIO_Init+0xea>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b12      	cmp	r3, #18
 80039a0:	d123      	bne.n	80039ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	08da      	lsrs	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3208      	adds	r2, #8
 80039aa:	0092      	lsls	r2, r2, #2
 80039ac:	58d3      	ldr	r3, [r2, r3]
 80039ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2207      	movs	r2, #7
 80039b4:	4013      	ands	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	220f      	movs	r2, #15
 80039ba:	409a      	lsls	r2, r3
 80039bc:	0013      	movs	r3, r2
 80039be:	43da      	mvns	r2, r3
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4013      	ands	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	691a      	ldr	r2, [r3, #16]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2107      	movs	r1, #7
 80039ce:	400b      	ands	r3, r1
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	409a      	lsls	r2, r3
 80039d4:	0013      	movs	r3, r2
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	08da      	lsrs	r2, r3, #3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3208      	adds	r2, #8
 80039e4:	0092      	lsls	r2, r2, #2
 80039e6:	6939      	ldr	r1, [r7, #16]
 80039e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	2203      	movs	r2, #3
 80039f6:	409a      	lsls	r2, r3
 80039f8:	0013      	movs	r3, r2
 80039fa:	43da      	mvns	r2, r3
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	4013      	ands	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2203      	movs	r2, #3
 8003a08:	401a      	ands	r2, r3
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	0013      	movs	r3, r2
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	2380      	movs	r3, #128	; 0x80
 8003a24:	055b      	lsls	r3, r3, #21
 8003a26:	4013      	ands	r3, r2
 8003a28:	d100      	bne.n	8003a2c <HAL_GPIO_Init+0x174>
 8003a2a:	e09a      	b.n	8003b62 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a2c:	4b54      	ldr	r3, [pc, #336]	; (8003b80 <HAL_GPIO_Init+0x2c8>)
 8003a2e:	699a      	ldr	r2, [r3, #24]
 8003a30:	4b53      	ldr	r3, [pc, #332]	; (8003b80 <HAL_GPIO_Init+0x2c8>)
 8003a32:	2101      	movs	r1, #1
 8003a34:	430a      	orrs	r2, r1
 8003a36:	619a      	str	r2, [r3, #24]
 8003a38:	4b51      	ldr	r3, [pc, #324]	; (8003b80 <HAL_GPIO_Init+0x2c8>)
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	4013      	ands	r3, r2
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a44:	4a4f      	ldr	r2, [pc, #316]	; (8003b84 <HAL_GPIO_Init+0x2cc>)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	089b      	lsrs	r3, r3, #2
 8003a4a:	3302      	adds	r3, #2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	589b      	ldr	r3, [r3, r2]
 8003a50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2203      	movs	r2, #3
 8003a56:	4013      	ands	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	220f      	movs	r2, #15
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	0013      	movs	r3, r2
 8003a60:	43da      	mvns	r2, r3
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	4013      	ands	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	2390      	movs	r3, #144	; 0x90
 8003a6c:	05db      	lsls	r3, r3, #23
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d013      	beq.n	8003a9a <HAL_GPIO_Init+0x1e2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a44      	ldr	r2, [pc, #272]	; (8003b88 <HAL_GPIO_Init+0x2d0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00d      	beq.n	8003a96 <HAL_GPIO_Init+0x1de>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a43      	ldr	r2, [pc, #268]	; (8003b8c <HAL_GPIO_Init+0x2d4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d007      	beq.n	8003a92 <HAL_GPIO_Init+0x1da>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a42      	ldr	r2, [pc, #264]	; (8003b90 <HAL_GPIO_Init+0x2d8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d101      	bne.n	8003a8e <HAL_GPIO_Init+0x1d6>
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e006      	b.n	8003a9c <HAL_GPIO_Init+0x1e4>
 8003a8e:	2305      	movs	r3, #5
 8003a90:	e004      	b.n	8003a9c <HAL_GPIO_Init+0x1e4>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e002      	b.n	8003a9c <HAL_GPIO_Init+0x1e4>
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <HAL_GPIO_Init+0x1e4>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	2103      	movs	r1, #3
 8003aa0:	400a      	ands	r2, r1
 8003aa2:	0092      	lsls	r2, r2, #2
 8003aa4:	4093      	lsls	r3, r2
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003aac:	4935      	ldr	r1, [pc, #212]	; (8003b84 <HAL_GPIO_Init+0x2cc>)
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	089b      	lsrs	r3, r3, #2
 8003ab2:	3302      	adds	r3, #2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003aba:	4b36      	ldr	r3, [pc, #216]	; (8003b94 <HAL_GPIO_Init+0x2dc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	43da      	mvns	r2, r3
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	2380      	movs	r3, #128	; 0x80
 8003ad0:	025b      	lsls	r3, r3, #9
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d003      	beq.n	8003ade <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ade:	4b2d      	ldr	r3, [pc, #180]	; (8003b94 <HAL_GPIO_Init+0x2dc>)
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003ae4:	4b2b      	ldr	r3, [pc, #172]	; (8003b94 <HAL_GPIO_Init+0x2dc>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	43da      	mvns	r2, r3
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	4013      	ands	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	2380      	movs	r3, #128	; 0x80
 8003afa:	029b      	lsls	r3, r3, #10
 8003afc:	4013      	ands	r3, r2
 8003afe:	d003      	beq.n	8003b08 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003b08:	4b22      	ldr	r3, [pc, #136]	; (8003b94 <HAL_GPIO_Init+0x2dc>)
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b0e:	4b21      	ldr	r3, [pc, #132]	; (8003b94 <HAL_GPIO_Init+0x2dc>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	43da      	mvns	r2, r3
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	2380      	movs	r3, #128	; 0x80
 8003b24:	035b      	lsls	r3, r3, #13
 8003b26:	4013      	ands	r3, r2
 8003b28:	d003      	beq.n	8003b32 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003b32:	4b18      	ldr	r3, [pc, #96]	; (8003b94 <HAL_GPIO_Init+0x2dc>)
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003b38:	4b16      	ldr	r3, [pc, #88]	; (8003b94 <HAL_GPIO_Init+0x2dc>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	43da      	mvns	r2, r3
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4013      	ands	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	2380      	movs	r3, #128	; 0x80
 8003b4e:	039b      	lsls	r3, r3, #14
 8003b50:	4013      	ands	r3, r2
 8003b52:	d003      	beq.n	8003b5c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003b5c:	4b0d      	ldr	r3, [pc, #52]	; (8003b94 <HAL_GPIO_Init+0x2dc>)
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	3301      	adds	r3, #1
 8003b66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	40da      	lsrs	r2, r3
 8003b70:	1e13      	subs	r3, r2, #0
 8003b72:	d000      	beq.n	8003b76 <HAL_GPIO_Init+0x2be>
 8003b74:	e6a8      	b.n	80038c8 <HAL_GPIO_Init+0x10>
  } 
}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b006      	add	sp, #24
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	46c0      	nop			; (mov r8, r8)
 8003b80:	40021000 	.word	0x40021000
 8003b84:	40010000 	.word	0x40010000
 8003b88:	48000400 	.word	0x48000400
 8003b8c:	48000800 	.word	0x48000800
 8003b90:	48000c00 	.word	0x48000c00
 8003b94:	40010400 	.word	0x40010400

08003b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	0008      	movs	r0, r1
 8003ba2:	0011      	movs	r1, r2
 8003ba4:	1cbb      	adds	r3, r7, #2
 8003ba6:	1c02      	adds	r2, r0, #0
 8003ba8:	801a      	strh	r2, [r3, #0]
 8003baa:	1c7b      	adds	r3, r7, #1
 8003bac:	1c0a      	adds	r2, r1, #0
 8003bae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bb0:	1c7b      	adds	r3, r7, #1
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d004      	beq.n	8003bc2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bb8:	1cbb      	adds	r3, r7, #2
 8003bba:	881a      	ldrh	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bc0:	e003      	b.n	8003bca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bc2:	1cbb      	adds	r3, r7, #2
 8003bc4:	881a      	ldrh	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	b002      	add	sp, #8
 8003bd0:	bd80      	pop	{r7, pc}
	...

08003bd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	0002      	movs	r2, r0
 8003bdc:	1dbb      	adds	r3, r7, #6
 8003bde:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003be0:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	1dba      	adds	r2, r7, #6
 8003be6:	8812      	ldrh	r2, [r2, #0]
 8003be8:	4013      	ands	r3, r2
 8003bea:	d008      	beq.n	8003bfe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bec:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003bee:	1dba      	adds	r2, r7, #6
 8003bf0:	8812      	ldrh	r2, [r2, #0]
 8003bf2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bf4:	1dbb      	adds	r3, r7, #6
 8003bf6:	881b      	ldrh	r3, [r3, #0]
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f7fe ff51 	bl	8002aa0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	46bd      	mov	sp, r7
 8003c02:	b002      	add	sp, #8
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	40010400 	.word	0x40010400

08003c0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e2ff      	b.n	800421e <HAL_RCC_OscConfig+0x612>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2201      	movs	r2, #1
 8003c24:	4013      	ands	r3, r2
 8003c26:	d100      	bne.n	8003c2a <HAL_RCC_OscConfig+0x1e>
 8003c28:	e08d      	b.n	8003d46 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003c2a:	4bc2      	ldr	r3, [pc, #776]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	220c      	movs	r2, #12
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d00e      	beq.n	8003c54 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c36:	4bbf      	ldr	r3, [pc, #764]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	220c      	movs	r2, #12
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b08      	cmp	r3, #8
 8003c40:	d116      	bne.n	8003c70 <HAL_RCC_OscConfig+0x64>
 8003c42:	4bbc      	ldr	r3, [pc, #752]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	2380      	movs	r3, #128	; 0x80
 8003c48:	025b      	lsls	r3, r3, #9
 8003c4a:	401a      	ands	r2, r3
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	025b      	lsls	r3, r3, #9
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d10d      	bne.n	8003c70 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c54:	4bb7      	ldr	r3, [pc, #732]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	2380      	movs	r3, #128	; 0x80
 8003c5a:	029b      	lsls	r3, r3, #10
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	d100      	bne.n	8003c62 <HAL_RCC_OscConfig+0x56>
 8003c60:	e070      	b.n	8003d44 <HAL_RCC_OscConfig+0x138>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d000      	beq.n	8003c6c <HAL_RCC_OscConfig+0x60>
 8003c6a:	e06b      	b.n	8003d44 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e2d6      	b.n	800421e <HAL_RCC_OscConfig+0x612>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d107      	bne.n	8003c88 <HAL_RCC_OscConfig+0x7c>
 8003c78:	4bae      	ldr	r3, [pc, #696]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	4bad      	ldr	r3, [pc, #692]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003c7e:	2180      	movs	r1, #128	; 0x80
 8003c80:	0249      	lsls	r1, r1, #9
 8003c82:	430a      	orrs	r2, r1
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	e02f      	b.n	8003ce8 <HAL_RCC_OscConfig+0xdc>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10c      	bne.n	8003caa <HAL_RCC_OscConfig+0x9e>
 8003c90:	4ba8      	ldr	r3, [pc, #672]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	4ba7      	ldr	r3, [pc, #668]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003c96:	49a8      	ldr	r1, [pc, #672]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003c98:	400a      	ands	r2, r1
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	4ba5      	ldr	r3, [pc, #660]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	4ba4      	ldr	r3, [pc, #656]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003ca2:	49a6      	ldr	r1, [pc, #664]	; (8003f3c <HAL_RCC_OscConfig+0x330>)
 8003ca4:	400a      	ands	r2, r1
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	e01e      	b.n	8003ce8 <HAL_RCC_OscConfig+0xdc>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b05      	cmp	r3, #5
 8003cb0:	d10e      	bne.n	8003cd0 <HAL_RCC_OscConfig+0xc4>
 8003cb2:	4ba0      	ldr	r3, [pc, #640]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	4b9f      	ldr	r3, [pc, #636]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003cb8:	2180      	movs	r1, #128	; 0x80
 8003cba:	02c9      	lsls	r1, r1, #11
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	4b9c      	ldr	r3, [pc, #624]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	4b9b      	ldr	r3, [pc, #620]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003cc6:	2180      	movs	r1, #128	; 0x80
 8003cc8:	0249      	lsls	r1, r1, #9
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	e00b      	b.n	8003ce8 <HAL_RCC_OscConfig+0xdc>
 8003cd0:	4b98      	ldr	r3, [pc, #608]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	4b97      	ldr	r3, [pc, #604]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003cd6:	4998      	ldr	r1, [pc, #608]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003cd8:	400a      	ands	r2, r1
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	4b95      	ldr	r3, [pc, #596]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	4b94      	ldr	r3, [pc, #592]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003ce2:	4996      	ldr	r1, [pc, #600]	; (8003f3c <HAL_RCC_OscConfig+0x330>)
 8003ce4:	400a      	ands	r2, r1
 8003ce6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d014      	beq.n	8003d1a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf0:	f7ff fac2 	bl	8003278 <HAL_GetTick>
 8003cf4:	0003      	movs	r3, r0
 8003cf6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cfa:	f7ff fabd 	bl	8003278 <HAL_GetTick>
 8003cfe:	0002      	movs	r2, r0
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b64      	cmp	r3, #100	; 0x64
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e288      	b.n	800421e <HAL_RCC_OscConfig+0x612>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0c:	4b89      	ldr	r3, [pc, #548]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	2380      	movs	r3, #128	; 0x80
 8003d12:	029b      	lsls	r3, r3, #10
 8003d14:	4013      	ands	r3, r2
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCC_OscConfig+0xee>
 8003d18:	e015      	b.n	8003d46 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1a:	f7ff faad 	bl	8003278 <HAL_GetTick>
 8003d1e:	0003      	movs	r3, r0
 8003d20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d24:	f7ff faa8 	bl	8003278 <HAL_GetTick>
 8003d28:	0002      	movs	r2, r0
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b64      	cmp	r3, #100	; 0x64
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e273      	b.n	800421e <HAL_RCC_OscConfig+0x612>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d36:	4b7f      	ldr	r3, [pc, #508]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	2380      	movs	r3, #128	; 0x80
 8003d3c:	029b      	lsls	r3, r3, #10
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d1f0      	bne.n	8003d24 <HAL_RCC_OscConfig+0x118>
 8003d42:	e000      	b.n	8003d46 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d44:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	d100      	bne.n	8003d52 <HAL_RCC_OscConfig+0x146>
 8003d50:	e066      	b.n	8003e20 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d52:	4b78      	ldr	r3, [pc, #480]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	220c      	movs	r2, #12
 8003d58:	4013      	ands	r3, r2
 8003d5a:	d008      	beq.n	8003d6e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003d5c:	4b75      	ldr	r3, [pc, #468]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	220c      	movs	r2, #12
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d119      	bne.n	8003d9c <HAL_RCC_OscConfig+0x190>
 8003d68:	4b72      	ldr	r3, [pc, #456]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	e016      	b.n	8003d9c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d6e:	4b71      	ldr	r3, [pc, #452]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2202      	movs	r2, #2
 8003d74:	4013      	ands	r3, r2
 8003d76:	d005      	beq.n	8003d84 <HAL_RCC_OscConfig+0x178>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d001      	beq.n	8003d84 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e24c      	b.n	800421e <HAL_RCC_OscConfig+0x612>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d84:	4b6b      	ldr	r3, [pc, #428]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	22f8      	movs	r2, #248	; 0xf8
 8003d8a:	4393      	bics	r3, r2
 8003d8c:	0019      	movs	r1, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	00da      	lsls	r2, r3, #3
 8003d94:	4b67      	ldr	r3, [pc, #412]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003d96:	430a      	orrs	r2, r1
 8003d98:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d9a:	e041      	b.n	8003e20 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d024      	beq.n	8003dee <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003da4:	4b63      	ldr	r3, [pc, #396]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	4b62      	ldr	r3, [pc, #392]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003daa:	2101      	movs	r1, #1
 8003dac:	430a      	orrs	r2, r1
 8003dae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db0:	f7ff fa62 	bl	8003278 <HAL_GetTick>
 8003db4:	0003      	movs	r3, r0
 8003db6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dba:	f7ff fa5d 	bl	8003278 <HAL_GetTick>
 8003dbe:	0002      	movs	r2, r0
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e228      	b.n	800421e <HAL_RCC_OscConfig+0x612>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dcc:	4b59      	ldr	r3, [pc, #356]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	d0f1      	beq.n	8003dba <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd6:	4b57      	ldr	r3, [pc, #348]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	22f8      	movs	r2, #248	; 0xf8
 8003ddc:	4393      	bics	r3, r2
 8003dde:	0019      	movs	r1, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	00da      	lsls	r2, r3, #3
 8003de6:	4b53      	ldr	r3, [pc, #332]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003de8:	430a      	orrs	r2, r1
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	e018      	b.n	8003e20 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dee:	4b51      	ldr	r3, [pc, #324]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	4b50      	ldr	r3, [pc, #320]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003df4:	2101      	movs	r1, #1
 8003df6:	438a      	bics	r2, r1
 8003df8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfa:	f7ff fa3d 	bl	8003278 <HAL_GetTick>
 8003dfe:	0003      	movs	r3, r0
 8003e00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e04:	f7ff fa38 	bl	8003278 <HAL_GetTick>
 8003e08:	0002      	movs	r2, r0
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e203      	b.n	800421e <HAL_RCC_OscConfig+0x612>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e16:	4b47      	ldr	r3, [pc, #284]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	d1f1      	bne.n	8003e04 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2208      	movs	r2, #8
 8003e26:	4013      	ands	r3, r2
 8003e28:	d036      	beq.n	8003e98 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d019      	beq.n	8003e66 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e32:	4b40      	ldr	r3, [pc, #256]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003e34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e36:	4b3f      	ldr	r3, [pc, #252]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003e38:	2101      	movs	r1, #1
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e3e:	f7ff fa1b 	bl	8003278 <HAL_GetTick>
 8003e42:	0003      	movs	r3, r0
 8003e44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e48:	f7ff fa16 	bl	8003278 <HAL_GetTick>
 8003e4c:	0002      	movs	r2, r0
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e1e1      	b.n	800421e <HAL_RCC_OscConfig+0x612>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e5a:	4b36      	ldr	r3, [pc, #216]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	2202      	movs	r2, #2
 8003e60:	4013      	ands	r3, r2
 8003e62:	d0f1      	beq.n	8003e48 <HAL_RCC_OscConfig+0x23c>
 8003e64:	e018      	b.n	8003e98 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e66:	4b33      	ldr	r3, [pc, #204]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e6a:	4b32      	ldr	r3, [pc, #200]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	438a      	bics	r2, r1
 8003e70:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e72:	f7ff fa01 	bl	8003278 <HAL_GetTick>
 8003e76:	0003      	movs	r3, r0
 8003e78:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e7c:	f7ff f9fc 	bl	8003278 <HAL_GetTick>
 8003e80:	0002      	movs	r2, r0
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e1c7      	b.n	800421e <HAL_RCC_OscConfig+0x612>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e8e:	4b29      	ldr	r3, [pc, #164]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	2202      	movs	r2, #2
 8003e94:	4013      	ands	r3, r2
 8003e96:	d1f1      	bne.n	8003e7c <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2204      	movs	r2, #4
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	d100      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x298>
 8003ea2:	e0b5      	b.n	8004010 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ea4:	231f      	movs	r3, #31
 8003ea6:	18fb      	adds	r3, r7, r3
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eac:	4b21      	ldr	r3, [pc, #132]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003eae:	69da      	ldr	r2, [r3, #28]
 8003eb0:	2380      	movs	r3, #128	; 0x80
 8003eb2:	055b      	lsls	r3, r3, #21
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d111      	bne.n	8003edc <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eb8:	4b1e      	ldr	r3, [pc, #120]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003eba:	69da      	ldr	r2, [r3, #28]
 8003ebc:	4b1d      	ldr	r3, [pc, #116]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003ebe:	2180      	movs	r1, #128	; 0x80
 8003ec0:	0549      	lsls	r1, r1, #21
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	61da      	str	r2, [r3, #28]
 8003ec6:	4b1b      	ldr	r3, [pc, #108]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003ec8:	69da      	ldr	r2, [r3, #28]
 8003eca:	2380      	movs	r3, #128	; 0x80
 8003ecc:	055b      	lsls	r3, r3, #21
 8003ece:	4013      	ands	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ed4:	231f      	movs	r3, #31
 8003ed6:	18fb      	adds	r3, r7, r3
 8003ed8:	2201      	movs	r2, #1
 8003eda:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003edc:	4b18      	ldr	r3, [pc, #96]	; (8003f40 <HAL_RCC_OscConfig+0x334>)
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	2380      	movs	r3, #128	; 0x80
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d11a      	bne.n	8003f1e <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ee8:	4b15      	ldr	r3, [pc, #84]	; (8003f40 <HAL_RCC_OscConfig+0x334>)
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	4b14      	ldr	r3, [pc, #80]	; (8003f40 <HAL_RCC_OscConfig+0x334>)
 8003eee:	2180      	movs	r1, #128	; 0x80
 8003ef0:	0049      	lsls	r1, r1, #1
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ef6:	f7ff f9bf 	bl	8003278 <HAL_GetTick>
 8003efa:	0003      	movs	r3, r0
 8003efc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f00:	f7ff f9ba 	bl	8003278 <HAL_GetTick>
 8003f04:	0002      	movs	r2, r0
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b64      	cmp	r3, #100	; 0x64
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e185      	b.n	800421e <HAL_RCC_OscConfig+0x612>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f12:	4b0b      	ldr	r3, [pc, #44]	; (8003f40 <HAL_RCC_OscConfig+0x334>)
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	2380      	movs	r3, #128	; 0x80
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	d0f0      	beq.n	8003f00 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d10e      	bne.n	8003f44 <HAL_RCC_OscConfig+0x338>
 8003f26:	4b03      	ldr	r3, [pc, #12]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003f28:	6a1a      	ldr	r2, [r3, #32]
 8003f2a:	4b02      	ldr	r3, [pc, #8]	; (8003f34 <HAL_RCC_OscConfig+0x328>)
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	621a      	str	r2, [r3, #32]
 8003f32:	e035      	b.n	8003fa0 <HAL_RCC_OscConfig+0x394>
 8003f34:	40021000 	.word	0x40021000
 8003f38:	fffeffff 	.word	0xfffeffff
 8003f3c:	fffbffff 	.word	0xfffbffff
 8003f40:	40007000 	.word	0x40007000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10c      	bne.n	8003f66 <HAL_RCC_OscConfig+0x35a>
 8003f4c:	4bb6      	ldr	r3, [pc, #728]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8003f4e:	6a1a      	ldr	r2, [r3, #32]
 8003f50:	4bb5      	ldr	r3, [pc, #724]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8003f52:	2101      	movs	r1, #1
 8003f54:	438a      	bics	r2, r1
 8003f56:	621a      	str	r2, [r3, #32]
 8003f58:	4bb3      	ldr	r3, [pc, #716]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8003f5a:	6a1a      	ldr	r2, [r3, #32]
 8003f5c:	4bb2      	ldr	r3, [pc, #712]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8003f5e:	2104      	movs	r1, #4
 8003f60:	438a      	bics	r2, r1
 8003f62:	621a      	str	r2, [r3, #32]
 8003f64:	e01c      	b.n	8003fa0 <HAL_RCC_OscConfig+0x394>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	2b05      	cmp	r3, #5
 8003f6c:	d10c      	bne.n	8003f88 <HAL_RCC_OscConfig+0x37c>
 8003f6e:	4bae      	ldr	r3, [pc, #696]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8003f70:	6a1a      	ldr	r2, [r3, #32]
 8003f72:	4bad      	ldr	r3, [pc, #692]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8003f74:	2104      	movs	r1, #4
 8003f76:	430a      	orrs	r2, r1
 8003f78:	621a      	str	r2, [r3, #32]
 8003f7a:	4bab      	ldr	r3, [pc, #684]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8003f7c:	6a1a      	ldr	r2, [r3, #32]
 8003f7e:	4baa      	ldr	r3, [pc, #680]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8003f80:	2101      	movs	r1, #1
 8003f82:	430a      	orrs	r2, r1
 8003f84:	621a      	str	r2, [r3, #32]
 8003f86:	e00b      	b.n	8003fa0 <HAL_RCC_OscConfig+0x394>
 8003f88:	4ba7      	ldr	r3, [pc, #668]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8003f8a:	6a1a      	ldr	r2, [r3, #32]
 8003f8c:	4ba6      	ldr	r3, [pc, #664]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8003f8e:	2101      	movs	r1, #1
 8003f90:	438a      	bics	r2, r1
 8003f92:	621a      	str	r2, [r3, #32]
 8003f94:	4ba4      	ldr	r3, [pc, #656]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8003f96:	6a1a      	ldr	r2, [r3, #32]
 8003f98:	4ba3      	ldr	r3, [pc, #652]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8003f9a:	2104      	movs	r1, #4
 8003f9c:	438a      	bics	r2, r1
 8003f9e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d014      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa8:	f7ff f966 	bl	8003278 <HAL_GetTick>
 8003fac:	0003      	movs	r3, r0
 8003fae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb0:	e009      	b.n	8003fc6 <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb2:	f7ff f961 	bl	8003278 <HAL_GetTick>
 8003fb6:	0002      	movs	r2, r0
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	4a9b      	ldr	r2, [pc, #620]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e12b      	b.n	800421e <HAL_RCC_OscConfig+0x612>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc6:	4b98      	ldr	r3, [pc, #608]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d0f0      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x3a6>
 8003fd0:	e013      	b.n	8003ffa <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd2:	f7ff f951 	bl	8003278 <HAL_GetTick>
 8003fd6:	0003      	movs	r3, r0
 8003fd8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fda:	e009      	b.n	8003ff0 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fdc:	f7ff f94c 	bl	8003278 <HAL_GetTick>
 8003fe0:	0002      	movs	r2, r0
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	4a91      	ldr	r2, [pc, #580]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e116      	b.n	800421e <HAL_RCC_OscConfig+0x612>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff0:	4b8d      	ldr	r3, [pc, #564]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ffa:	231f      	movs	r3, #31
 8003ffc:	18fb      	adds	r3, r7, r3
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d105      	bne.n	8004010 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004004:	4b88      	ldr	r3, [pc, #544]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8004006:	69da      	ldr	r2, [r3, #28]
 8004008:	4b87      	ldr	r3, [pc, #540]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 800400a:	4989      	ldr	r1, [pc, #548]	; (8004230 <HAL_RCC_OscConfig+0x624>)
 800400c:	400a      	ands	r2, r1
 800400e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2210      	movs	r2, #16
 8004016:	4013      	ands	r3, r2
 8004018:	d063      	beq.n	80040e2 <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d12a      	bne.n	8004078 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004022:	4b81      	ldr	r3, [pc, #516]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8004024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004026:	4b80      	ldr	r3, [pc, #512]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8004028:	2104      	movs	r1, #4
 800402a:	430a      	orrs	r2, r1
 800402c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800402e:	4b7e      	ldr	r3, [pc, #504]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8004030:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004032:	4b7d      	ldr	r3, [pc, #500]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8004034:	2101      	movs	r1, #1
 8004036:	430a      	orrs	r2, r1
 8004038:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800403a:	f7ff f91d 	bl	8003278 <HAL_GetTick>
 800403e:	0003      	movs	r3, r0
 8004040:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004044:	f7ff f918 	bl	8003278 <HAL_GetTick>
 8004048:	0002      	movs	r2, r0
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e0e3      	b.n	800421e <HAL_RCC_OscConfig+0x612>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004056:	4b74      	ldr	r3, [pc, #464]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8004058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405a:	2202      	movs	r2, #2
 800405c:	4013      	ands	r3, r2
 800405e:	d0f1      	beq.n	8004044 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004060:	4b71      	ldr	r3, [pc, #452]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8004062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004064:	22f8      	movs	r2, #248	; 0xf8
 8004066:	4393      	bics	r3, r2
 8004068:	0019      	movs	r1, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	00da      	lsls	r2, r3, #3
 8004070:	4b6d      	ldr	r3, [pc, #436]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8004072:	430a      	orrs	r2, r1
 8004074:	635a      	str	r2, [r3, #52]	; 0x34
 8004076:	e034      	b.n	80040e2 <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	3305      	adds	r3, #5
 800407e:	d111      	bne.n	80040a4 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004080:	4b69      	ldr	r3, [pc, #420]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8004082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004084:	4b68      	ldr	r3, [pc, #416]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8004086:	2104      	movs	r1, #4
 8004088:	438a      	bics	r2, r1
 800408a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800408c:	4b66      	ldr	r3, [pc, #408]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 800408e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004090:	22f8      	movs	r2, #248	; 0xf8
 8004092:	4393      	bics	r3, r2
 8004094:	0019      	movs	r1, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	00da      	lsls	r2, r3, #3
 800409c:	4b62      	ldr	r3, [pc, #392]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 800409e:	430a      	orrs	r2, r1
 80040a0:	635a      	str	r2, [r3, #52]	; 0x34
 80040a2:	e01e      	b.n	80040e2 <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80040a4:	4b60      	ldr	r3, [pc, #384]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 80040a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040a8:	4b5f      	ldr	r3, [pc, #380]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 80040aa:	2104      	movs	r1, #4
 80040ac:	430a      	orrs	r2, r1
 80040ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80040b0:	4b5d      	ldr	r3, [pc, #372]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 80040b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040b4:	4b5c      	ldr	r3, [pc, #368]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 80040b6:	2101      	movs	r1, #1
 80040b8:	438a      	bics	r2, r1
 80040ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040bc:	f7ff f8dc 	bl	8003278 <HAL_GetTick>
 80040c0:	0003      	movs	r3, r0
 80040c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80040c4:	e008      	b.n	80040d8 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80040c6:	f7ff f8d7 	bl	8003278 <HAL_GetTick>
 80040ca:	0002      	movs	r2, r0
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e0a2      	b.n	800421e <HAL_RCC_OscConfig+0x612>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80040d8:	4b53      	ldr	r3, [pc, #332]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 80040da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040dc:	2202      	movs	r2, #2
 80040de:	4013      	ands	r3, r2
 80040e0:	d1f1      	bne.n	80040c6 <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d100      	bne.n	80040ec <HAL_RCC_OscConfig+0x4e0>
 80040ea:	e097      	b.n	800421c <HAL_RCC_OscConfig+0x610>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040ec:	4b4e      	ldr	r3, [pc, #312]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	220c      	movs	r2, #12
 80040f2:	4013      	ands	r3, r2
 80040f4:	2b08      	cmp	r3, #8
 80040f6:	d100      	bne.n	80040fa <HAL_RCC_OscConfig+0x4ee>
 80040f8:	e06b      	b.n	80041d2 <HAL_RCC_OscConfig+0x5c6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d14c      	bne.n	800419c <HAL_RCC_OscConfig+0x590>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004102:	4b49      	ldr	r3, [pc, #292]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	4b48      	ldr	r3, [pc, #288]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8004108:	494a      	ldr	r1, [pc, #296]	; (8004234 <HAL_RCC_OscConfig+0x628>)
 800410a:	400a      	ands	r2, r1
 800410c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410e:	f7ff f8b3 	bl	8003278 <HAL_GetTick>
 8004112:	0003      	movs	r3, r0
 8004114:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004118:	f7ff f8ae 	bl	8003278 <HAL_GetTick>
 800411c:	0002      	movs	r2, r0
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e079      	b.n	800421e <HAL_RCC_OscConfig+0x612>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800412a:	4b3f      	ldr	r3, [pc, #252]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	2380      	movs	r3, #128	; 0x80
 8004130:	049b      	lsls	r3, r3, #18
 8004132:	4013      	ands	r3, r2
 8004134:	d1f0      	bne.n	8004118 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004136:	4b3c      	ldr	r3, [pc, #240]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8004138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413a:	220f      	movs	r2, #15
 800413c:	4393      	bics	r3, r2
 800413e:	0019      	movs	r1, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004144:	4b38      	ldr	r3, [pc, #224]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8004146:	430a      	orrs	r2, r1
 8004148:	62da      	str	r2, [r3, #44]	; 0x2c
 800414a:	4b37      	ldr	r3, [pc, #220]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	4a3a      	ldr	r2, [pc, #232]	; (8004238 <HAL_RCC_OscConfig+0x62c>)
 8004150:	4013      	ands	r3, r2
 8004152:	0019      	movs	r1, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	431a      	orrs	r2, r3
 800415e:	4b32      	ldr	r3, [pc, #200]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8004160:	430a      	orrs	r2, r1
 8004162:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004164:	4b30      	ldr	r3, [pc, #192]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	4b2f      	ldr	r3, [pc, #188]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 800416a:	2180      	movs	r1, #128	; 0x80
 800416c:	0449      	lsls	r1, r1, #17
 800416e:	430a      	orrs	r2, r1
 8004170:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004172:	f7ff f881 	bl	8003278 <HAL_GetTick>
 8004176:	0003      	movs	r3, r0
 8004178:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x582>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800417c:	f7ff f87c 	bl	8003278 <HAL_GetTick>
 8004180:	0002      	movs	r2, r0
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e047      	b.n	800421e <HAL_RCC_OscConfig+0x612>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800418e:	4b26      	ldr	r3, [pc, #152]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	2380      	movs	r3, #128	; 0x80
 8004194:	049b      	lsls	r3, r3, #18
 8004196:	4013      	ands	r3, r2
 8004198:	d0f0      	beq.n	800417c <HAL_RCC_OscConfig+0x570>
 800419a:	e03f      	b.n	800421c <HAL_RCC_OscConfig+0x610>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800419c:	4b22      	ldr	r3, [pc, #136]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	4b21      	ldr	r3, [pc, #132]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 80041a2:	4924      	ldr	r1, [pc, #144]	; (8004234 <HAL_RCC_OscConfig+0x628>)
 80041a4:	400a      	ands	r2, r1
 80041a6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a8:	f7ff f866 	bl	8003278 <HAL_GetTick>
 80041ac:	0003      	movs	r3, r0
 80041ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b2:	f7ff f861 	bl	8003278 <HAL_GetTick>
 80041b6:	0002      	movs	r2, r0
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e02c      	b.n	800421e <HAL_RCC_OscConfig+0x612>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041c4:	4b18      	ldr	r3, [pc, #96]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	049b      	lsls	r3, r3, #18
 80041cc:	4013      	ands	r3, r2
 80041ce:	d1f0      	bne.n	80041b2 <HAL_RCC_OscConfig+0x5a6>
 80041d0:	e024      	b.n	800421c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d101      	bne.n	80041de <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e01f      	b.n	800421e <HAL_RCC_OscConfig+0x612>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80041de:	4b12      	ldr	r3, [pc, #72]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80041e4:	4b10      	ldr	r3, [pc, #64]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	2380      	movs	r3, #128	; 0x80
 80041ee:	025b      	lsls	r3, r3, #9
 80041f0:	401a      	ands	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d10e      	bne.n	8004218 <HAL_RCC_OscConfig+0x60c>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	220f      	movs	r2, #15
 80041fe:	401a      	ands	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004204:	429a      	cmp	r2, r3
 8004206:	d107      	bne.n	8004218 <HAL_RCC_OscConfig+0x60c>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	23f0      	movs	r3, #240	; 0xf0
 800420c:	039b      	lsls	r3, r3, #14
 800420e:	401a      	ands	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004214:	429a      	cmp	r2, r3
 8004216:	d001      	beq.n	800421c <HAL_RCC_OscConfig+0x610>
        {
          return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e000      	b.n	800421e <HAL_RCC_OscConfig+0x612>
        }
      }
    }
  }

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	0018      	movs	r0, r3
 8004220:	46bd      	mov	sp, r7
 8004222:	b008      	add	sp, #32
 8004224:	bd80      	pop	{r7, pc}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	40021000 	.word	0x40021000
 800422c:	00001388 	.word	0x00001388
 8004230:	efffffff 	.word	0xefffffff
 8004234:	feffffff 	.word	0xfeffffff
 8004238:	ffc2ffff 	.word	0xffc2ffff

0800423c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e0b3      	b.n	80043b8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004250:	4b5b      	ldr	r3, [pc, #364]	; (80043c0 <HAL_RCC_ClockConfig+0x184>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2201      	movs	r2, #1
 8004256:	4013      	ands	r3, r2
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d911      	bls.n	8004282 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425e:	4b58      	ldr	r3, [pc, #352]	; (80043c0 <HAL_RCC_ClockConfig+0x184>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2201      	movs	r2, #1
 8004264:	4393      	bics	r3, r2
 8004266:	0019      	movs	r1, r3
 8004268:	4b55      	ldr	r3, [pc, #340]	; (80043c0 <HAL_RCC_ClockConfig+0x184>)
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004270:	4b53      	ldr	r3, [pc, #332]	; (80043c0 <HAL_RCC_ClockConfig+0x184>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2201      	movs	r2, #1
 8004276:	4013      	ands	r3, r2
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d001      	beq.n	8004282 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e09a      	b.n	80043b8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2202      	movs	r2, #2
 8004288:	4013      	ands	r3, r2
 800428a:	d015      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2204      	movs	r2, #4
 8004292:	4013      	ands	r3, r2
 8004294:	d006      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004296:	4b4b      	ldr	r3, [pc, #300]	; (80043c4 <HAL_RCC_ClockConfig+0x188>)
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	4b4a      	ldr	r3, [pc, #296]	; (80043c4 <HAL_RCC_ClockConfig+0x188>)
 800429c:	21e0      	movs	r1, #224	; 0xe0
 800429e:	00c9      	lsls	r1, r1, #3
 80042a0:	430a      	orrs	r2, r1
 80042a2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a4:	4b47      	ldr	r3, [pc, #284]	; (80043c4 <HAL_RCC_ClockConfig+0x188>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	22f0      	movs	r2, #240	; 0xf0
 80042aa:	4393      	bics	r3, r2
 80042ac:	0019      	movs	r1, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689a      	ldr	r2, [r3, #8]
 80042b2:	4b44      	ldr	r3, [pc, #272]	; (80043c4 <HAL_RCC_ClockConfig+0x188>)
 80042b4:	430a      	orrs	r2, r1
 80042b6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2201      	movs	r2, #1
 80042be:	4013      	ands	r3, r2
 80042c0:	d040      	beq.n	8004344 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d107      	bne.n	80042da <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ca:	4b3e      	ldr	r3, [pc, #248]	; (80043c4 <HAL_RCC_ClockConfig+0x188>)
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	2380      	movs	r3, #128	; 0x80
 80042d0:	029b      	lsls	r3, r3, #10
 80042d2:	4013      	ands	r3, r2
 80042d4:	d114      	bne.n	8004300 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e06e      	b.n	80043b8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d107      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e2:	4b38      	ldr	r3, [pc, #224]	; (80043c4 <HAL_RCC_ClockConfig+0x188>)
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	2380      	movs	r3, #128	; 0x80
 80042e8:	049b      	lsls	r3, r3, #18
 80042ea:	4013      	ands	r3, r2
 80042ec:	d108      	bne.n	8004300 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e062      	b.n	80043b8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f2:	4b34      	ldr	r3, [pc, #208]	; (80043c4 <HAL_RCC_ClockConfig+0x188>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2202      	movs	r2, #2
 80042f8:	4013      	ands	r3, r2
 80042fa:	d101      	bne.n	8004300 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e05b      	b.n	80043b8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004300:	4b30      	ldr	r3, [pc, #192]	; (80043c4 <HAL_RCC_ClockConfig+0x188>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2203      	movs	r2, #3
 8004306:	4393      	bics	r3, r2
 8004308:	0019      	movs	r1, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	4b2d      	ldr	r3, [pc, #180]	; (80043c4 <HAL_RCC_ClockConfig+0x188>)
 8004310:	430a      	orrs	r2, r1
 8004312:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004314:	f7fe ffb0 	bl	8003278 <HAL_GetTick>
 8004318:	0003      	movs	r3, r0
 800431a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800431c:	e009      	b.n	8004332 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800431e:	f7fe ffab 	bl	8003278 <HAL_GetTick>
 8004322:	0002      	movs	r2, r0
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	4a27      	ldr	r2, [pc, #156]	; (80043c8 <HAL_RCC_ClockConfig+0x18c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e042      	b.n	80043b8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004332:	4b24      	ldr	r3, [pc, #144]	; (80043c4 <HAL_RCC_ClockConfig+0x188>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	220c      	movs	r2, #12
 8004338:	401a      	ands	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	429a      	cmp	r2, r3
 8004342:	d1ec      	bne.n	800431e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004344:	4b1e      	ldr	r3, [pc, #120]	; (80043c0 <HAL_RCC_ClockConfig+0x184>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2201      	movs	r2, #1
 800434a:	4013      	ands	r3, r2
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d211      	bcs.n	8004376 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004352:	4b1b      	ldr	r3, [pc, #108]	; (80043c0 <HAL_RCC_ClockConfig+0x184>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2201      	movs	r2, #1
 8004358:	4393      	bics	r3, r2
 800435a:	0019      	movs	r1, r3
 800435c:	4b18      	ldr	r3, [pc, #96]	; (80043c0 <HAL_RCC_ClockConfig+0x184>)
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004364:	4b16      	ldr	r3, [pc, #88]	; (80043c0 <HAL_RCC_ClockConfig+0x184>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2201      	movs	r2, #1
 800436a:	4013      	ands	r3, r2
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d001      	beq.n	8004376 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e020      	b.n	80043b8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2204      	movs	r2, #4
 800437c:	4013      	ands	r3, r2
 800437e:	d009      	beq.n	8004394 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004380:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <HAL_RCC_ClockConfig+0x188>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	4a11      	ldr	r2, [pc, #68]	; (80043cc <HAL_RCC_ClockConfig+0x190>)
 8004386:	4013      	ands	r3, r2
 8004388:	0019      	movs	r1, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	4b0d      	ldr	r3, [pc, #52]	; (80043c4 <HAL_RCC_ClockConfig+0x188>)
 8004390:	430a      	orrs	r2, r1
 8004392:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004394:	f000 f820 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
 8004398:	0001      	movs	r1, r0
 800439a:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <HAL_RCC_ClockConfig+0x188>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	091b      	lsrs	r3, r3, #4
 80043a0:	220f      	movs	r2, #15
 80043a2:	4013      	ands	r3, r2
 80043a4:	4a0a      	ldr	r2, [pc, #40]	; (80043d0 <HAL_RCC_ClockConfig+0x194>)
 80043a6:	5cd3      	ldrb	r3, [r2, r3]
 80043a8:	000a      	movs	r2, r1
 80043aa:	40da      	lsrs	r2, r3
 80043ac:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <HAL_RCC_ClockConfig+0x198>)
 80043ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80043b0:	2003      	movs	r0, #3
 80043b2:	f7fe ff1b 	bl	80031ec <HAL_InitTick>
  
  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	0018      	movs	r0, r3
 80043ba:	46bd      	mov	sp, r7
 80043bc:	b004      	add	sp, #16
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40022000 	.word	0x40022000
 80043c4:	40021000 	.word	0x40021000
 80043c8:	00001388 	.word	0x00001388
 80043cc:	fffff8ff 	.word	0xfffff8ff
 80043d0:	0800a780 	.word	0x0800a780
 80043d4:	20000004 	.word	0x20000004

080043d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043d8:	b590      	push	{r4, r7, lr}
 80043da:	b08f      	sub	sp, #60	; 0x3c
 80043dc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80043de:	2314      	movs	r3, #20
 80043e0:	18fb      	adds	r3, r7, r3
 80043e2:	4a2a      	ldr	r2, [pc, #168]	; (800448c <HAL_RCC_GetSysClockFreq+0xb4>)
 80043e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043e6:	c313      	stmia	r3!, {r0, r1, r4}
 80043e8:	6812      	ldr	r2, [r2, #0]
 80043ea:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80043ec:	1d3b      	adds	r3, r7, #4
 80043ee:	4a28      	ldr	r2, [pc, #160]	; (8004490 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043f2:	c313      	stmia	r3!, {r0, r1, r4}
 80043f4:	6812      	ldr	r2, [r2, #0]
 80043f6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043fc:	2300      	movs	r3, #0
 80043fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004400:	2300      	movs	r3, #0
 8004402:	637b      	str	r3, [r7, #52]	; 0x34
 8004404:	2300      	movs	r3, #0
 8004406:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800440c:	4b21      	ldr	r3, [pc, #132]	; (8004494 <HAL_RCC_GetSysClockFreq+0xbc>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004414:	220c      	movs	r2, #12
 8004416:	4013      	ands	r3, r2
 8004418:	2b04      	cmp	r3, #4
 800441a:	d002      	beq.n	8004422 <HAL_RCC_GetSysClockFreq+0x4a>
 800441c:	2b08      	cmp	r3, #8
 800441e:	d003      	beq.n	8004428 <HAL_RCC_GetSysClockFreq+0x50>
 8004420:	e02c      	b.n	800447c <HAL_RCC_GetSysClockFreq+0xa4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004422:	4b1d      	ldr	r3, [pc, #116]	; (8004498 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004424:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004426:	e02c      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0xaa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442a:	0c9b      	lsrs	r3, r3, #18
 800442c:	220f      	movs	r2, #15
 800442e:	4013      	ands	r3, r2
 8004430:	2214      	movs	r2, #20
 8004432:	18ba      	adds	r2, r7, r2
 8004434:	5cd3      	ldrb	r3, [r2, r3]
 8004436:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004438:	4b16      	ldr	r3, [pc, #88]	; (8004494 <HAL_RCC_GetSysClockFreq+0xbc>)
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	220f      	movs	r2, #15
 800443e:	4013      	ands	r3, r2
 8004440:	1d3a      	adds	r2, r7, #4
 8004442:	5cd3      	ldrb	r3, [r2, r3]
 8004444:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004448:	2380      	movs	r3, #128	; 0x80
 800444a:	025b      	lsls	r3, r3, #9
 800444c:	4013      	ands	r3, r2
 800444e:	d009      	beq.n	8004464 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004450:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004452:	4811      	ldr	r0, [pc, #68]	; (8004498 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004454:	f7fb fe68 	bl	8000128 <__udivsi3>
 8004458:	0003      	movs	r3, r0
 800445a:	001a      	movs	r2, r3
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	4353      	muls	r3, r2
 8004460:	637b      	str	r3, [r7, #52]	; 0x34
 8004462:	e008      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0x9e>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004464:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004466:	480c      	ldr	r0, [pc, #48]	; (8004498 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004468:	f7fb fe5e 	bl	8000128 <__udivsi3>
 800446c:	0003      	movs	r3, r0
 800446e:	001a      	movs	r2, r3
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	4353      	muls	r3, r2
 8004474:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004478:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800447a:	e002      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0xaa>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800447c:	4b06      	ldr	r3, [pc, #24]	; (8004498 <HAL_RCC_GetSysClockFreq+0xc0>)
 800447e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004480:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004484:	0018      	movs	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	b00f      	add	sp, #60	; 0x3c
 800448a:	bd90      	pop	{r4, r7, pc}
 800448c:	0800a660 	.word	0x0800a660
 8004490:	0800a670 	.word	0x0800a670
 8004494:	40021000 	.word	0x40021000
 8004498:	007a1200 	.word	0x007a1200

0800449c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044a0:	4b02      	ldr	r3, [pc, #8]	; (80044ac <HAL_RCC_GetHCLKFreq+0x10>)
 80044a2:	681b      	ldr	r3, [r3, #0]
}
 80044a4:	0018      	movs	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	20000004 	.word	0x20000004

080044b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80044b4:	f7ff fff2 	bl	800449c <HAL_RCC_GetHCLKFreq>
 80044b8:	0001      	movs	r1, r0
 80044ba:	4b06      	ldr	r3, [pc, #24]	; (80044d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	0a1b      	lsrs	r3, r3, #8
 80044c0:	2207      	movs	r2, #7
 80044c2:	4013      	ands	r3, r2
 80044c4:	4a04      	ldr	r2, [pc, #16]	; (80044d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044c6:	5cd3      	ldrb	r3, [r2, r3]
 80044c8:	40d9      	lsrs	r1, r3
 80044ca:	000b      	movs	r3, r1
}    
 80044cc:	0018      	movs	r0, r3
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	46c0      	nop			; (mov r8, r8)
 80044d4:	40021000 	.word	0x40021000
 80044d8:	0800a790 	.word	0x0800a790

080044dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e0a8      	b.n	8004640 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d109      	bne.n	800450a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	2382      	movs	r3, #130	; 0x82
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	429a      	cmp	r2, r3
 8004500:	d009      	beq.n	8004516 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	61da      	str	r2, [r3, #28]
 8004508:	e005      	b.n	8004516 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	225d      	movs	r2, #93	; 0x5d
 8004520:	5c9b      	ldrb	r3, [r3, r2]
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d107      	bne.n	8004538 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	225c      	movs	r2, #92	; 0x5c
 800452c:	2100      	movs	r1, #0
 800452e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	0018      	movs	r0, r3
 8004534:	f7fe fc64 	bl	8002e00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	225d      	movs	r2, #93	; 0x5d
 800453c:	2102      	movs	r1, #2
 800453e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2140      	movs	r1, #64	; 0x40
 800454c:	438a      	bics	r2, r1
 800454e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	23e0      	movs	r3, #224	; 0xe0
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	429a      	cmp	r2, r3
 800455a:	d902      	bls.n	8004562 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	e002      	b.n	8004568 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004562:	2380      	movs	r3, #128	; 0x80
 8004564:	015b      	lsls	r3, r3, #5
 8004566:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	23f0      	movs	r3, #240	; 0xf0
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	429a      	cmp	r2, r3
 8004572:	d008      	beq.n	8004586 <HAL_SPI_Init+0xaa>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	23e0      	movs	r3, #224	; 0xe0
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	429a      	cmp	r2, r3
 800457e:	d002      	beq.n	8004586 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	2382      	movs	r3, #130	; 0x82
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	401a      	ands	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6899      	ldr	r1, [r3, #8]
 8004594:	2384      	movs	r3, #132	; 0x84
 8004596:	021b      	lsls	r3, r3, #8
 8004598:	400b      	ands	r3, r1
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	2102      	movs	r1, #2
 80045a2:	400b      	ands	r3, r1
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	2101      	movs	r1, #1
 80045ac:	400b      	ands	r3, r1
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6999      	ldr	r1, [r3, #24]
 80045b4:	2380      	movs	r3, #128	; 0x80
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	400b      	ands	r3, r1
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	2138      	movs	r1, #56	; 0x38
 80045c2:	400b      	ands	r3, r1
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	2180      	movs	r1, #128	; 0x80
 80045cc:	400b      	ands	r3, r1
 80045ce:	431a      	orrs	r2, r3
 80045d0:	0011      	movs	r1, r2
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045d6:	2380      	movs	r3, #128	; 0x80
 80045d8:	019b      	lsls	r3, r3, #6
 80045da:	401a      	ands	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	0c1b      	lsrs	r3, r3, #16
 80045ea:	2204      	movs	r2, #4
 80045ec:	401a      	ands	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	2110      	movs	r1, #16
 80045f4:	400b      	ands	r3, r1
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fc:	2108      	movs	r1, #8
 80045fe:	400b      	ands	r3, r1
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68d9      	ldr	r1, [r3, #12]
 8004606:	23f0      	movs	r3, #240	; 0xf0
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	400b      	ands	r3, r1
 800460c:	431a      	orrs	r2, r3
 800460e:	0011      	movs	r1, r2
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	2380      	movs	r3, #128	; 0x80
 8004614:	015b      	lsls	r3, r3, #5
 8004616:	401a      	ands	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	69da      	ldr	r2, [r3, #28]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4907      	ldr	r1, [pc, #28]	; (8004648 <HAL_SPI_Init+0x16c>)
 800462c:	400a      	ands	r2, r1
 800462e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	225d      	movs	r2, #93	; 0x5d
 800463a:	2101      	movs	r1, #1
 800463c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	0018      	movs	r0, r3
 8004642:	46bd      	mov	sp, r7
 8004644:	b004      	add	sp, #16
 8004646:	bd80      	pop	{r7, pc}
 8004648:	fffff7ff 	.word	0xfffff7ff

0800464c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	1dbb      	adds	r3, r7, #6
 800465a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800465c:	231f      	movs	r3, #31
 800465e:	18fb      	adds	r3, r7, r3
 8004660:	2200      	movs	r2, #0
 8004662:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	225c      	movs	r2, #92	; 0x5c
 8004668:	5c9b      	ldrb	r3, [r3, r2]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d101      	bne.n	8004672 <HAL_SPI_Transmit+0x26>
 800466e:	2302      	movs	r3, #2
 8004670:	e140      	b.n	80048f4 <HAL_SPI_Transmit+0x2a8>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	225c      	movs	r2, #92	; 0x5c
 8004676:	2101      	movs	r1, #1
 8004678:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800467a:	f7fe fdfd 	bl	8003278 <HAL_GetTick>
 800467e:	0003      	movs	r3, r0
 8004680:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004682:	2316      	movs	r3, #22
 8004684:	18fb      	adds	r3, r7, r3
 8004686:	1dba      	adds	r2, r7, #6
 8004688:	8812      	ldrh	r2, [r2, #0]
 800468a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	225d      	movs	r2, #93	; 0x5d
 8004690:	5c9b      	ldrb	r3, [r3, r2]
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b01      	cmp	r3, #1
 8004696:	d004      	beq.n	80046a2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004698:	231f      	movs	r3, #31
 800469a:	18fb      	adds	r3, r7, r3
 800469c:	2202      	movs	r2, #2
 800469e:	701a      	strb	r2, [r3, #0]
    goto error;
 80046a0:	e11d      	b.n	80048de <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <HAL_SPI_Transmit+0x64>
 80046a8:	1dbb      	adds	r3, r7, #6
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d104      	bne.n	80046ba <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80046b0:	231f      	movs	r3, #31
 80046b2:	18fb      	adds	r3, r7, r3
 80046b4:	2201      	movs	r2, #1
 80046b6:	701a      	strb	r2, [r3, #0]
    goto error;
 80046b8:	e111      	b.n	80048de <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	225d      	movs	r2, #93	; 0x5d
 80046be:	2103      	movs	r1, #3
 80046c0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	1dba      	adds	r2, r7, #6
 80046d2:	8812      	ldrh	r2, [r2, #0]
 80046d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	1dba      	adds	r2, r7, #6
 80046da:	8812      	ldrh	r2, [r2, #0]
 80046dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2244      	movs	r2, #68	; 0x44
 80046e8:	2100      	movs	r1, #0
 80046ea:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2246      	movs	r2, #70	; 0x46
 80046f0:	2100      	movs	r1, #0
 80046f2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	2380      	movs	r3, #128	; 0x80
 8004706:	021b      	lsls	r3, r3, #8
 8004708:	429a      	cmp	r2, r3
 800470a:	d110      	bne.n	800472e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2140      	movs	r1, #64	; 0x40
 8004718:	438a      	bics	r2, r1
 800471a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2180      	movs	r1, #128	; 0x80
 8004728:	01c9      	lsls	r1, r1, #7
 800472a:	430a      	orrs	r2, r1
 800472c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2240      	movs	r2, #64	; 0x40
 8004736:	4013      	ands	r3, r2
 8004738:	2b40      	cmp	r3, #64	; 0x40
 800473a:	d007      	beq.n	800474c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2140      	movs	r1, #64	; 0x40
 8004748:	430a      	orrs	r2, r1
 800474a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	23e0      	movs	r3, #224	; 0xe0
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	429a      	cmp	r2, r3
 8004756:	d94e      	bls.n	80047f6 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d004      	beq.n	800476a <HAL_SPI_Transmit+0x11e>
 8004760:	2316      	movs	r3, #22
 8004762:	18fb      	adds	r3, r7, r3
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d13f      	bne.n	80047ea <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476e:	881a      	ldrh	r2, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477a:	1c9a      	adds	r2, r3, #2
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004784:	b29b      	uxth	r3, r3
 8004786:	3b01      	subs	r3, #1
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800478e:	e02c      	b.n	80047ea <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2202      	movs	r2, #2
 8004798:	4013      	ands	r3, r2
 800479a:	2b02      	cmp	r3, #2
 800479c:	d112      	bne.n	80047c4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	881a      	ldrh	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ae:	1c9a      	adds	r2, r3, #2
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047c2:	e012      	b.n	80047ea <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047c4:	f7fe fd58 	bl	8003278 <HAL_GetTick>
 80047c8:	0002      	movs	r2, r0
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d802      	bhi.n	80047da <HAL_SPI_Transmit+0x18e>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	3301      	adds	r3, #1
 80047d8:	d102      	bne.n	80047e0 <HAL_SPI_Transmit+0x194>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d104      	bne.n	80047ea <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80047e0:	231f      	movs	r3, #31
 80047e2:	18fb      	adds	r3, r7, r3
 80047e4:	2203      	movs	r2, #3
 80047e6:	701a      	strb	r2, [r3, #0]
          goto error;
 80047e8:	e079      	b.n	80048de <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1cd      	bne.n	8004790 <HAL_SPI_Transmit+0x144>
 80047f4:	e04f      	b.n	8004896 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d004      	beq.n	8004808 <HAL_SPI_Transmit+0x1bc>
 80047fe:	2316      	movs	r3, #22
 8004800:	18fb      	adds	r3, r7, r3
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d141      	bne.n	800488c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	330c      	adds	r3, #12
 8004812:	7812      	ldrb	r2, [r2, #0]
 8004814:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800482e:	e02d      	b.n	800488c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	2202      	movs	r2, #2
 8004838:	4013      	ands	r3, r2
 800483a:	2b02      	cmp	r3, #2
 800483c:	d113      	bne.n	8004866 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	330c      	adds	r3, #12
 8004848:	7812      	ldrb	r2, [r2, #0]
 800484a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004850:	1c5a      	adds	r2, r3, #1
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800485a:	b29b      	uxth	r3, r3
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004864:	e012      	b.n	800488c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004866:	f7fe fd07 	bl	8003278 <HAL_GetTick>
 800486a:	0002      	movs	r2, r0
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	429a      	cmp	r2, r3
 8004874:	d802      	bhi.n	800487c <HAL_SPI_Transmit+0x230>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	3301      	adds	r3, #1
 800487a:	d102      	bne.n	8004882 <HAL_SPI_Transmit+0x236>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d104      	bne.n	800488c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8004882:	231f      	movs	r3, #31
 8004884:	18fb      	adds	r3, r7, r3
 8004886:	2203      	movs	r2, #3
 8004888:	701a      	strb	r2, [r3, #0]
          goto error;
 800488a:	e028      	b.n	80048de <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004890:	b29b      	uxth	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1cc      	bne.n	8004830 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	6839      	ldr	r1, [r7, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	0018      	movs	r0, r3
 800489e:	f000 fccf 	bl	8005240 <SPI_EndRxTxTransaction>
 80048a2:	1e03      	subs	r3, r0, #0
 80048a4:	d002      	beq.n	80048ac <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2220      	movs	r2, #32
 80048aa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10a      	bne.n	80048ca <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048b4:	2300      	movs	r3, #0
 80048b6:	613b      	str	r3, [r7, #16]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	613b      	str	r3, [r7, #16]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	613b      	str	r3, [r7, #16]
 80048c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d004      	beq.n	80048dc <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80048d2:	231f      	movs	r3, #31
 80048d4:	18fb      	adds	r3, r7, r3
 80048d6:	2201      	movs	r2, #1
 80048d8:	701a      	strb	r2, [r3, #0]
 80048da:	e000      	b.n	80048de <HAL_SPI_Transmit+0x292>
  }

error:
 80048dc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	225d      	movs	r2, #93	; 0x5d
 80048e2:	2101      	movs	r1, #1
 80048e4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	225c      	movs	r2, #92	; 0x5c
 80048ea:	2100      	movs	r1, #0
 80048ec:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80048ee:	231f      	movs	r3, #31
 80048f0:	18fb      	adds	r3, r7, r3
 80048f2:	781b      	ldrb	r3, [r3, #0]
}
 80048f4:	0018      	movs	r0, r3
 80048f6:	46bd      	mov	sp, r7
 80048f8:	b008      	add	sp, #32
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048fc:	b590      	push	{r4, r7, lr}
 80048fe:	b089      	sub	sp, #36	; 0x24
 8004900:	af02      	add	r7, sp, #8
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	603b      	str	r3, [r7, #0]
 8004908:	1dbb      	adds	r3, r7, #6
 800490a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800490c:	2317      	movs	r3, #23
 800490e:	18fb      	adds	r3, r7, r3
 8004910:	2200      	movs	r2, #0
 8004912:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	2382      	movs	r3, #130	; 0x82
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	429a      	cmp	r2, r3
 800491e:	d113      	bne.n	8004948 <HAL_SPI_Receive+0x4c>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10f      	bne.n	8004948 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	225d      	movs	r2, #93	; 0x5d
 800492c:	2104      	movs	r1, #4
 800492e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004930:	1dbb      	adds	r3, r7, #6
 8004932:	881c      	ldrh	r4, [r3, #0]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	68b9      	ldr	r1, [r7, #8]
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	0023      	movs	r3, r4
 8004940:	f000 f928 	bl	8004b94 <HAL_SPI_TransmitReceive>
 8004944:	0003      	movs	r3, r0
 8004946:	e11c      	b.n	8004b82 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	225c      	movs	r2, #92	; 0x5c
 800494c:	5c9b      	ldrb	r3, [r3, r2]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_SPI_Receive+0x5a>
 8004952:	2302      	movs	r3, #2
 8004954:	e115      	b.n	8004b82 <HAL_SPI_Receive+0x286>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	225c      	movs	r2, #92	; 0x5c
 800495a:	2101      	movs	r1, #1
 800495c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800495e:	f7fe fc8b 	bl	8003278 <HAL_GetTick>
 8004962:	0003      	movs	r3, r0
 8004964:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	225d      	movs	r2, #93	; 0x5d
 800496a:	5c9b      	ldrb	r3, [r3, r2]
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b01      	cmp	r3, #1
 8004970:	d004      	beq.n	800497c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8004972:	2317      	movs	r3, #23
 8004974:	18fb      	adds	r3, r7, r3
 8004976:	2202      	movs	r2, #2
 8004978:	701a      	strb	r2, [r3, #0]
    goto error;
 800497a:	e0f7      	b.n	8004b6c <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_SPI_Receive+0x8e>
 8004982:	1dbb      	adds	r3, r7, #6
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d104      	bne.n	8004994 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800498a:	2317      	movs	r3, #23
 800498c:	18fb      	adds	r3, r7, r3
 800498e:	2201      	movs	r2, #1
 8004990:	701a      	strb	r2, [r3, #0]
    goto error;
 8004992:	e0eb      	b.n	8004b6c <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	225d      	movs	r2, #93	; 0x5d
 8004998:	2104      	movs	r1, #4
 800499a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	1dba      	adds	r2, r7, #6
 80049ac:	2144      	movs	r1, #68	; 0x44
 80049ae:	8812      	ldrh	r2, [r2, #0]
 80049b0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1dba      	adds	r2, r7, #6
 80049b6:	2146      	movs	r1, #70	; 0x46
 80049b8:	8812      	ldrh	r2, [r2, #0]
 80049ba:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	23e0      	movs	r3, #224	; 0xe0
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d908      	bls.n	80049f8 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4966      	ldr	r1, [pc, #408]	; (8004b8c <HAL_SPI_Receive+0x290>)
 80049f2:	400a      	ands	r2, r1
 80049f4:	605a      	str	r2, [r3, #4]
 80049f6:	e008      	b.n	8004a0a <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2180      	movs	r1, #128	; 0x80
 8004a04:	0149      	lsls	r1, r1, #5
 8004a06:	430a      	orrs	r2, r1
 8004a08:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	2380      	movs	r3, #128	; 0x80
 8004a10:	021b      	lsls	r3, r3, #8
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d10f      	bne.n	8004a36 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2140      	movs	r1, #64	; 0x40
 8004a22:	438a      	bics	r2, r1
 8004a24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4957      	ldr	r1, [pc, #348]	; (8004b90 <HAL_SPI_Receive+0x294>)
 8004a32:	400a      	ands	r2, r1
 8004a34:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2240      	movs	r2, #64	; 0x40
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b40      	cmp	r3, #64	; 0x40
 8004a42:	d007      	beq.n	8004a54 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2140      	movs	r1, #64	; 0x40
 8004a50:	430a      	orrs	r2, r1
 8004a52:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	23e0      	movs	r3, #224	; 0xe0
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d900      	bls.n	8004a62 <HAL_SPI_Receive+0x166>
 8004a60:	e069      	b.n	8004b36 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004a62:	e031      	b.n	8004ac8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d117      	bne.n	8004aa2 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	330c      	adds	r3, #12
 8004a78:	001a      	movs	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	7812      	ldrb	r2, [r2, #0]
 8004a80:	b2d2      	uxtb	r2, r2
 8004a82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2246      	movs	r2, #70	; 0x46
 8004a92:	5a9b      	ldrh	r3, [r3, r2]
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b299      	uxth	r1, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2246      	movs	r2, #70	; 0x46
 8004a9e:	5299      	strh	r1, [r3, r2]
 8004aa0:	e012      	b.n	8004ac8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aa2:	f7fe fbe9 	bl	8003278 <HAL_GetTick>
 8004aa6:	0002      	movs	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d802      	bhi.n	8004ab8 <HAL_SPI_Receive+0x1bc>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	d102      	bne.n	8004abe <HAL_SPI_Receive+0x1c2>
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d104      	bne.n	8004ac8 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8004abe:	2317      	movs	r3, #23
 8004ac0:	18fb      	adds	r3, r7, r3
 8004ac2:	2203      	movs	r2, #3
 8004ac4:	701a      	strb	r2, [r3, #0]
          goto error;
 8004ac6:	e051      	b.n	8004b6c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2246      	movs	r2, #70	; 0x46
 8004acc:	5a9b      	ldrh	r3, [r3, r2]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1c7      	bne.n	8004a64 <HAL_SPI_Receive+0x168>
 8004ad4:	e035      	b.n	8004b42 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	2201      	movs	r2, #1
 8004ade:	4013      	ands	r3, r2
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d115      	bne.n	8004b10 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68da      	ldr	r2, [r3, #12]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	b292      	uxth	r2, r2
 8004af0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	1c9a      	adds	r2, r3, #2
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2246      	movs	r2, #70	; 0x46
 8004b00:	5a9b      	ldrh	r3, [r3, r2]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	3b01      	subs	r3, #1
 8004b06:	b299      	uxth	r1, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2246      	movs	r2, #70	; 0x46
 8004b0c:	5299      	strh	r1, [r3, r2]
 8004b0e:	e012      	b.n	8004b36 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b10:	f7fe fbb2 	bl	8003278 <HAL_GetTick>
 8004b14:	0002      	movs	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d802      	bhi.n	8004b26 <HAL_SPI_Receive+0x22a>
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	3301      	adds	r3, #1
 8004b24:	d102      	bne.n	8004b2c <HAL_SPI_Receive+0x230>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d104      	bne.n	8004b36 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8004b2c:	2317      	movs	r3, #23
 8004b2e:	18fb      	adds	r3, r7, r3
 8004b30:	2203      	movs	r2, #3
 8004b32:	701a      	strb	r2, [r3, #0]
          goto error;
 8004b34:	e01a      	b.n	8004b6c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2246      	movs	r2, #70	; 0x46
 8004b3a:	5a9b      	ldrh	r3, [r3, r2]
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1c9      	bne.n	8004ad6 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	6839      	ldr	r1, [r7, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f000 fb1b 	bl	8005184 <SPI_EndRxTransaction>
 8004b4e:	1e03      	subs	r3, r0, #0
 8004b50:	d002      	beq.n	8004b58 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2220      	movs	r2, #32
 8004b56:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d004      	beq.n	8004b6a <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8004b60:	2317      	movs	r3, #23
 8004b62:	18fb      	adds	r3, r7, r3
 8004b64:	2201      	movs	r2, #1
 8004b66:	701a      	strb	r2, [r3, #0]
 8004b68:	e000      	b.n	8004b6c <HAL_SPI_Receive+0x270>
  }

error :
 8004b6a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	225d      	movs	r2, #93	; 0x5d
 8004b70:	2101      	movs	r1, #1
 8004b72:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	225c      	movs	r2, #92	; 0x5c
 8004b78:	2100      	movs	r1, #0
 8004b7a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004b7c:	2317      	movs	r3, #23
 8004b7e:	18fb      	adds	r3, r7, r3
 8004b80:	781b      	ldrb	r3, [r3, #0]
}
 8004b82:	0018      	movs	r0, r3
 8004b84:	46bd      	mov	sp, r7
 8004b86:	b007      	add	sp, #28
 8004b88:	bd90      	pop	{r4, r7, pc}
 8004b8a:	46c0      	nop			; (mov r8, r8)
 8004b8c:	ffffefff 	.word	0xffffefff
 8004b90:	ffffbfff 	.word	0xffffbfff

08004b94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08a      	sub	sp, #40	; 0x28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	001a      	movs	r2, r3
 8004ba2:	1cbb      	adds	r3, r7, #2
 8004ba4:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004baa:	2323      	movs	r3, #35	; 0x23
 8004bac:	18fb      	adds	r3, r7, r3
 8004bae:	2200      	movs	r2, #0
 8004bb0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	225c      	movs	r2, #92	; 0x5c
 8004bb6:	5c9b      	ldrb	r3, [r3, r2]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d101      	bne.n	8004bc0 <HAL_SPI_TransmitReceive+0x2c>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	e1b6      	b.n	8004f2e <HAL_SPI_TransmitReceive+0x39a>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	225c      	movs	r2, #92	; 0x5c
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bc8:	f7fe fb56 	bl	8003278 <HAL_GetTick>
 8004bcc:	0003      	movs	r3, r0
 8004bce:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bd0:	201b      	movs	r0, #27
 8004bd2:	183b      	adds	r3, r7, r0
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	215d      	movs	r1, #93	; 0x5d
 8004bd8:	5c52      	ldrb	r2, [r2, r1]
 8004bda:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004be2:	2312      	movs	r3, #18
 8004be4:	18fb      	adds	r3, r7, r3
 8004be6:	1cba      	adds	r2, r7, #2
 8004be8:	8812      	ldrh	r2, [r2, #0]
 8004bea:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bec:	183b      	adds	r3, r7, r0
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d012      	beq.n	8004c1a <HAL_SPI_TransmitReceive+0x86>
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	2382      	movs	r3, #130	; 0x82
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d108      	bne.n	8004c10 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d104      	bne.n	8004c10 <HAL_SPI_TransmitReceive+0x7c>
 8004c06:	231b      	movs	r3, #27
 8004c08:	18fb      	adds	r3, r7, r3
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d004      	beq.n	8004c1a <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8004c10:	2323      	movs	r3, #35	; 0x23
 8004c12:	18fb      	adds	r3, r7, r3
 8004c14:	2202      	movs	r2, #2
 8004c16:	701a      	strb	r2, [r3, #0]
    goto error;
 8004c18:	e17e      	b.n	8004f18 <HAL_SPI_TransmitReceive+0x384>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d006      	beq.n	8004c2e <HAL_SPI_TransmitReceive+0x9a>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_SPI_TransmitReceive+0x9a>
 8004c26:	1cbb      	adds	r3, r7, #2
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d104      	bne.n	8004c38 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 8004c2e:	2323      	movs	r3, #35	; 0x23
 8004c30:	18fb      	adds	r3, r7, r3
 8004c32:	2201      	movs	r2, #1
 8004c34:	701a      	strb	r2, [r3, #0]
    goto error;
 8004c36:	e16f      	b.n	8004f18 <HAL_SPI_TransmitReceive+0x384>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	225d      	movs	r2, #93	; 0x5d
 8004c3c:	5c9b      	ldrb	r3, [r3, r2]
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b04      	cmp	r3, #4
 8004c42:	d003      	beq.n	8004c4c <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	225d      	movs	r2, #93	; 0x5d
 8004c48:	2105      	movs	r1, #5
 8004c4a:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	1cba      	adds	r2, r7, #2
 8004c5c:	2146      	movs	r1, #70	; 0x46
 8004c5e:	8812      	ldrh	r2, [r2, #0]
 8004c60:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	1cba      	adds	r2, r7, #2
 8004c66:	2144      	movs	r1, #68	; 0x44
 8004c68:	8812      	ldrh	r2, [r2, #0]
 8004c6a:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1cba      	adds	r2, r7, #2
 8004c76:	8812      	ldrh	r2, [r2, #0]
 8004c78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	1cba      	adds	r2, r7, #2
 8004c7e:	8812      	ldrh	r2, [r2, #0]
 8004c80:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	23e0      	movs	r3, #224	; 0xe0
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d908      	bls.n	8004cac <HAL_SPI_TransmitReceive+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	49a4      	ldr	r1, [pc, #656]	; (8004f38 <HAL_SPI_TransmitReceive+0x3a4>)
 8004ca6:	400a      	ands	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]
 8004caa:	e008      	b.n	8004cbe <HAL_SPI_TransmitReceive+0x12a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2180      	movs	r1, #128	; 0x80
 8004cb8:	0149      	lsls	r1, r1, #5
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2240      	movs	r2, #64	; 0x40
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	2b40      	cmp	r3, #64	; 0x40
 8004cca:	d007      	beq.n	8004cdc <HAL_SPI_TransmitReceive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2140      	movs	r1, #64	; 0x40
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	23e0      	movs	r3, #224	; 0xe0
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d800      	bhi.n	8004cea <HAL_SPI_TransmitReceive+0x156>
 8004ce8:	e07f      	b.n	8004dea <HAL_SPI_TransmitReceive+0x256>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d005      	beq.n	8004cfe <HAL_SPI_TransmitReceive+0x16a>
 8004cf2:	2312      	movs	r3, #18
 8004cf4:	18fb      	adds	r3, r7, r3
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d000      	beq.n	8004cfe <HAL_SPI_TransmitReceive+0x16a>
 8004cfc:	e069      	b.n	8004dd2 <HAL_SPI_TransmitReceive+0x23e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	881a      	ldrh	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	1c9a      	adds	r2, r3, #2
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d22:	e056      	b.n	8004dd2 <HAL_SPI_TransmitReceive+0x23e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d11b      	bne.n	8004d6a <HAL_SPI_TransmitReceive+0x1d6>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d016      	beq.n	8004d6a <HAL_SPI_TransmitReceive+0x1d6>
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d113      	bne.n	8004d6a <HAL_SPI_TransmitReceive+0x1d6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	881a      	ldrh	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	1c9a      	adds	r2, r3, #2
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d66:	2300      	movs	r3, #0
 8004d68:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	2201      	movs	r2, #1
 8004d72:	4013      	ands	r3, r2
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d11c      	bne.n	8004db2 <HAL_SPI_TransmitReceive+0x21e>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2246      	movs	r2, #70	; 0x46
 8004d7c:	5a9b      	ldrh	r3, [r3, r2]
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d016      	beq.n	8004db2 <HAL_SPI_TransmitReceive+0x21e>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	b292      	uxth	r2, r2
 8004d90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	1c9a      	adds	r2, r3, #2
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2246      	movs	r2, #70	; 0x46
 8004da0:	5a9b      	ldrh	r3, [r3, r2]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b299      	uxth	r1, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2246      	movs	r2, #70	; 0x46
 8004dac:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dae:	2301      	movs	r3, #1
 8004db0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004db2:	f7fe fa61 	bl	8003278 <HAL_GetTick>
 8004db6:	0002      	movs	r2, r0
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d807      	bhi.n	8004dd2 <HAL_SPI_TransmitReceive+0x23e>
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	d004      	beq.n	8004dd2 <HAL_SPI_TransmitReceive+0x23e>
      {
        errorcode = HAL_TIMEOUT;
 8004dc8:	2323      	movs	r3, #35	; 0x23
 8004dca:	18fb      	adds	r3, r7, r3
 8004dcc:	2203      	movs	r2, #3
 8004dce:	701a      	strb	r2, [r3, #0]
        goto error;
 8004dd0:	e0a2      	b.n	8004f18 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1a3      	bne.n	8004d24 <HAL_SPI_TransmitReceive+0x190>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2246      	movs	r2, #70	; 0x46
 8004de0:	5a9b      	ldrh	r3, [r3, r2]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d19d      	bne.n	8004d24 <HAL_SPI_TransmitReceive+0x190>
 8004de8:	e085      	b.n	8004ef6 <HAL_SPI_TransmitReceive+0x362>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d005      	beq.n	8004dfe <HAL_SPI_TransmitReceive+0x26a>
 8004df2:	2312      	movs	r3, #18
 8004df4:	18fb      	adds	r3, r7, r3
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d000      	beq.n	8004dfe <HAL_SPI_TransmitReceive+0x26a>
 8004dfc:	e070      	b.n	8004ee0 <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	330c      	adds	r3, #12
 8004e08:	7812      	ldrb	r2, [r2, #0]
 8004e0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e24:	e05c      	b.n	8004ee0 <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	4013      	ands	r3, r2
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d11c      	bne.n	8004e6e <HAL_SPI_TransmitReceive+0x2da>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d017      	beq.n	8004e6e <HAL_SPI_TransmitReceive+0x2da>
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d114      	bne.n	8004e6e <HAL_SPI_TransmitReceive+0x2da>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	330c      	adds	r3, #12
 8004e4e:	7812      	ldrb	r2, [r2, #0]
 8004e50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	2201      	movs	r2, #1
 8004e76:	4013      	ands	r3, r2
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d11e      	bne.n	8004eba <HAL_SPI_TransmitReceive+0x326>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2246      	movs	r2, #70	; 0x46
 8004e80:	5a9b      	ldrh	r3, [r3, r2]
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d018      	beq.n	8004eba <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	330c      	adds	r3, #12
 8004e8e:	001a      	movs	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e94:	7812      	ldrb	r2, [r2, #0]
 8004e96:	b2d2      	uxtb	r2, r2
 8004e98:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2246      	movs	r2, #70	; 0x46
 8004ea8:	5a9b      	ldrh	r3, [r3, r2]
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	3b01      	subs	r3, #1
 8004eae:	b299      	uxth	r1, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2246      	movs	r2, #70	; 0x46
 8004eb4:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004eba:	f7fe f9dd 	bl	8003278 <HAL_GetTick>
 8004ebe:	0002      	movs	r2, r0
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d802      	bhi.n	8004ed0 <HAL_SPI_TransmitReceive+0x33c>
 8004eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ecc:	3301      	adds	r3, #1
 8004ece:	d102      	bne.n	8004ed6 <HAL_SPI_TransmitReceive+0x342>
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d104      	bne.n	8004ee0 <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 8004ed6:	2323      	movs	r3, #35	; 0x23
 8004ed8:	18fb      	adds	r3, r7, r3
 8004eda:	2203      	movs	r2, #3
 8004edc:	701a      	strb	r2, [r3, #0]
        goto error;
 8004ede:	e01b      	b.n	8004f18 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d19d      	bne.n	8004e26 <HAL_SPI_TransmitReceive+0x292>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2246      	movs	r2, #70	; 0x46
 8004eee:	5a9b      	ldrh	r3, [r3, r2]
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d197      	bne.n	8004e26 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ef6:	69fa      	ldr	r2, [r7, #28]
 8004ef8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	0018      	movs	r0, r3
 8004efe:	f000 f99f 	bl	8005240 <SPI_EndRxTxTransaction>
 8004f02:	1e03      	subs	r3, r0, #0
 8004f04:	d007      	beq.n	8004f16 <HAL_SPI_TransmitReceive+0x382>
  {
    errorcode = HAL_ERROR;
 8004f06:	2323      	movs	r3, #35	; 0x23
 8004f08:	18fb      	adds	r3, r7, r3
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2220      	movs	r2, #32
 8004f12:	661a      	str	r2, [r3, #96]	; 0x60
 8004f14:	e000      	b.n	8004f18 <HAL_SPI_TransmitReceive+0x384>
  }

error :
 8004f16:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	225d      	movs	r2, #93	; 0x5d
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	225c      	movs	r2, #92	; 0x5c
 8004f24:	2100      	movs	r1, #0
 8004f26:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004f28:	2323      	movs	r3, #35	; 0x23
 8004f2a:	18fb      	adds	r3, r7, r3
 8004f2c:	781b      	ldrb	r3, [r3, #0]
}
 8004f2e:	0018      	movs	r0, r3
 8004f30:	46bd      	mov	sp, r7
 8004f32:	b00a      	add	sp, #40	; 0x28
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	46c0      	nop			; (mov r8, r8)
 8004f38:	ffffefff 	.word	0xffffefff

08004f3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b088      	sub	sp, #32
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	603b      	str	r3, [r7, #0]
 8004f48:	1dfb      	adds	r3, r7, #7
 8004f4a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f4c:	f7fe f994 	bl	8003278 <HAL_GetTick>
 8004f50:	0002      	movs	r2, r0
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	1a9b      	subs	r3, r3, r2
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	18d3      	adds	r3, r2, r3
 8004f5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f5c:	f7fe f98c 	bl	8003278 <HAL_GetTick>
 8004f60:	0003      	movs	r3, r0
 8004f62:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f64:	4b3a      	ldr	r3, [pc, #232]	; (8005050 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	015b      	lsls	r3, r3, #5
 8004f6a:	0d1b      	lsrs	r3, r3, #20
 8004f6c:	69fa      	ldr	r2, [r7, #28]
 8004f6e:	4353      	muls	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f72:	e058      	b.n	8005026 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	3301      	adds	r3, #1
 8004f78:	d055      	beq.n	8005026 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f7a:	f7fe f97d 	bl	8003278 <HAL_GetTick>
 8004f7e:	0002      	movs	r2, r0
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	69fa      	ldr	r2, [r7, #28]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d902      	bls.n	8004f90 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d142      	bne.n	8005016 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	21e0      	movs	r1, #224	; 0xe0
 8004f9c:	438a      	bics	r2, r1
 8004f9e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	2382      	movs	r3, #130	; 0x82
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d113      	bne.n	8004fd4 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	2380      	movs	r3, #128	; 0x80
 8004fb2:	021b      	lsls	r3, r3, #8
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d005      	beq.n	8004fc4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	2380      	movs	r3, #128	; 0x80
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d107      	bne.n	8004fd4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2140      	movs	r1, #64	; 0x40
 8004fd0:	438a      	bics	r2, r1
 8004fd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fd8:	2380      	movs	r3, #128	; 0x80
 8004fda:	019b      	lsls	r3, r3, #6
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d110      	bne.n	8005002 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	491a      	ldr	r1, [pc, #104]	; (8005054 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004fec:	400a      	ands	r2, r1
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2180      	movs	r1, #128	; 0x80
 8004ffc:	0189      	lsls	r1, r1, #6
 8004ffe:	430a      	orrs	r2, r1
 8005000:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	225d      	movs	r2, #93	; 0x5d
 8005006:	2101      	movs	r1, #1
 8005008:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	225c      	movs	r2, #92	; 0x5c
 800500e:	2100      	movs	r1, #0
 8005010:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e017      	b.n	8005046 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800501c:	2300      	movs	r3, #0
 800501e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	3b01      	subs	r3, #1
 8005024:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	4013      	ands	r3, r2
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	425a      	negs	r2, r3
 8005036:	4153      	adcs	r3, r2
 8005038:	b2db      	uxtb	r3, r3
 800503a:	001a      	movs	r2, r3
 800503c:	1dfb      	adds	r3, r7, #7
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d197      	bne.n	8004f74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	0018      	movs	r0, r3
 8005048:	46bd      	mov	sp, r7
 800504a:	b008      	add	sp, #32
 800504c:	bd80      	pop	{r7, pc}
 800504e:	46c0      	nop			; (mov r8, r8)
 8005050:	20000004 	.word	0x20000004
 8005054:	ffffdfff 	.word	0xffffdfff

08005058 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b088      	sub	sp, #32
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
 8005064:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005066:	f7fe f907 	bl	8003278 <HAL_GetTick>
 800506a:	0002      	movs	r2, r0
 800506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506e:	1a9b      	subs	r3, r3, r2
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	18d3      	adds	r3, r2, r3
 8005074:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005076:	f7fe f8ff 	bl	8003278 <HAL_GetTick>
 800507a:	0003      	movs	r3, r0
 800507c:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800507e:	4b3f      	ldr	r3, [pc, #252]	; (800517c <SPI_WaitFifoStateUntilTimeout+0x124>)
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	0013      	movs	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	189b      	adds	r3, r3, r2
 8005088:	00da      	lsls	r2, r3, #3
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	0d1b      	lsrs	r3, r3, #20
 800508e:	69fa      	ldr	r2, [r7, #28]
 8005090:	4353      	muls	r3, r2
 8005092:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8005094:	e064      	b.n	8005160 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	23c0      	movs	r3, #192	; 0xc0
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	429a      	cmp	r2, r3
 800509e:	d106      	bne.n	80050ae <SPI_WaitFifoStateUntilTimeout+0x56>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d103      	bne.n	80050ae <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	330c      	adds	r3, #12
 80050ac:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	3301      	adds	r3, #1
 80050b2:	d055      	beq.n	8005160 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050b4:	f7fe f8e0 	bl	8003278 <HAL_GetTick>
 80050b8:	0002      	movs	r2, r0
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	69fa      	ldr	r2, [r7, #28]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d902      	bls.n	80050ca <SPI_WaitFifoStateUntilTimeout+0x72>
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d142      	bne.n	8005150 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	21e0      	movs	r1, #224	; 0xe0
 80050d6:	438a      	bics	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	2382      	movs	r3, #130	; 0x82
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d113      	bne.n	800510e <SPI_WaitFifoStateUntilTimeout+0xb6>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	689a      	ldr	r2, [r3, #8]
 80050ea:	2380      	movs	r3, #128	; 0x80
 80050ec:	021b      	lsls	r3, r3, #8
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d005      	beq.n	80050fe <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	2380      	movs	r3, #128	; 0x80
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d107      	bne.n	800510e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2140      	movs	r1, #64	; 0x40
 800510a:	438a      	bics	r2, r1
 800510c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005112:	2380      	movs	r3, #128	; 0x80
 8005114:	019b      	lsls	r3, r3, #6
 8005116:	429a      	cmp	r2, r3
 8005118:	d110      	bne.n	800513c <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4916      	ldr	r1, [pc, #88]	; (8005180 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005126:	400a      	ands	r2, r1
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2180      	movs	r1, #128	; 0x80
 8005136:	0189      	lsls	r1, r1, #6
 8005138:	430a      	orrs	r2, r1
 800513a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	225d      	movs	r2, #93	; 0x5d
 8005140:	2101      	movs	r1, #1
 8005142:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	225c      	movs	r2, #92	; 0x5c
 8005148:	2100      	movs	r1, #0
 800514a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e010      	b.n	8005172 <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	3b01      	subs	r3, #1
 800515e:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	4013      	ands	r3, r2
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	429a      	cmp	r2, r3
 800516e:	d192      	bne.n	8005096 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	0018      	movs	r0, r3
 8005174:	46bd      	mov	sp, r7
 8005176:	b008      	add	sp, #32
 8005178:	bd80      	pop	{r7, pc}
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	20000004 	.word	0x20000004
 8005180:	ffffdfff 	.word	0xffffdfff

08005184 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af02      	add	r7, sp, #8
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	2382      	movs	r3, #130	; 0x82
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	429a      	cmp	r2, r3
 800519a:	d113      	bne.n	80051c4 <SPI_EndRxTransaction+0x40>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	689a      	ldr	r2, [r3, #8]
 80051a0:	2380      	movs	r3, #128	; 0x80
 80051a2:	021b      	lsls	r3, r3, #8
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d005      	beq.n	80051b4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	2380      	movs	r3, #128	; 0x80
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d107      	bne.n	80051c4 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2140      	movs	r1, #64	; 0x40
 80051c0:	438a      	bics	r2, r1
 80051c2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	0013      	movs	r3, r2
 80051ce:	2200      	movs	r2, #0
 80051d0:	2180      	movs	r1, #128	; 0x80
 80051d2:	f7ff feb3 	bl	8004f3c <SPI_WaitFlagStateUntilTimeout>
 80051d6:	1e03      	subs	r3, r0, #0
 80051d8:	d007      	beq.n	80051ea <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051de:	2220      	movs	r2, #32
 80051e0:	431a      	orrs	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e026      	b.n	8005238 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	2382      	movs	r3, #130	; 0x82
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d11f      	bne.n	8005236 <SPI_EndRxTransaction+0xb2>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	689a      	ldr	r2, [r3, #8]
 80051fa:	2380      	movs	r3, #128	; 0x80
 80051fc:	021b      	lsls	r3, r3, #8
 80051fe:	429a      	cmp	r2, r3
 8005200:	d005      	beq.n	800520e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	2380      	movs	r3, #128	; 0x80
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	429a      	cmp	r2, r3
 800520c:	d113      	bne.n	8005236 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	23c0      	movs	r3, #192	; 0xc0
 8005212:	00d9      	lsls	r1, r3, #3
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	0013      	movs	r3, r2
 800521c:	2200      	movs	r2, #0
 800521e:	f7ff ff1b 	bl	8005058 <SPI_WaitFifoStateUntilTimeout>
 8005222:	1e03      	subs	r3, r0, #0
 8005224:	d007      	beq.n	8005236 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800522a:	2220      	movs	r2, #32
 800522c:	431a      	orrs	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e000      	b.n	8005238 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	0018      	movs	r0, r3
 800523a:	46bd      	mov	sp, r7
 800523c:	b004      	add	sp, #16
 800523e:	bd80      	pop	{r7, pc}

08005240 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af02      	add	r7, sp, #8
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	23c0      	movs	r3, #192	; 0xc0
 8005250:	0159      	lsls	r1, r3, #5
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	0013      	movs	r3, r2
 800525a:	2200      	movs	r2, #0
 800525c:	f7ff fefc 	bl	8005058 <SPI_WaitFifoStateUntilTimeout>
 8005260:	1e03      	subs	r3, r0, #0
 8005262:	d007      	beq.n	8005274 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005268:	2220      	movs	r2, #32
 800526a:	431a      	orrs	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e027      	b.n	80052c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	0013      	movs	r3, r2
 800527e:	2200      	movs	r2, #0
 8005280:	2180      	movs	r1, #128	; 0x80
 8005282:	f7ff fe5b 	bl	8004f3c <SPI_WaitFlagStateUntilTimeout>
 8005286:	1e03      	subs	r3, r0, #0
 8005288:	d007      	beq.n	800529a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800528e:	2220      	movs	r2, #32
 8005290:	431a      	orrs	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e014      	b.n	80052c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	23c0      	movs	r3, #192	; 0xc0
 800529e:	00d9      	lsls	r1, r3, #3
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	0013      	movs	r3, r2
 80052a8:	2200      	movs	r2, #0
 80052aa:	f7ff fed5 	bl	8005058 <SPI_WaitFifoStateUntilTimeout>
 80052ae:	1e03      	subs	r3, r0, #0
 80052b0:	d007      	beq.n	80052c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052b6:	2220      	movs	r2, #32
 80052b8:	431a      	orrs	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e000      	b.n	80052c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	0018      	movs	r0, r3
 80052c6:	46bd      	mov	sp, r7
 80052c8:	b004      	add	sp, #16
 80052ca:	bd80      	pop	{r7, pc}

080052cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e044      	b.n	8005368 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d107      	bne.n	80052f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2274      	movs	r2, #116	; 0x74
 80052ea:	2100      	movs	r1, #0
 80052ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	0018      	movs	r0, r3
 80052f2:	f7fd fdd1 	bl	8002e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2224      	movs	r2, #36	; 0x24
 80052fa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2101      	movs	r1, #1
 8005308:	438a      	bics	r2, r1
 800530a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	0018      	movs	r0, r3
 8005310:	f000 fad8 	bl	80058c4 <UART_SetConfig>
 8005314:	0003      	movs	r3, r0
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e024      	b.n	8005368 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	0018      	movs	r0, r3
 800532a:	f000 fc39 	bl	8005ba0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	490d      	ldr	r1, [pc, #52]	; (8005370 <HAL_UART_Init+0xa4>)
 800533a:	400a      	ands	r2, r1
 800533c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2108      	movs	r1, #8
 800534a:	438a      	bics	r2, r1
 800534c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2101      	movs	r1, #1
 800535a:	430a      	orrs	r2, r1
 800535c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	0018      	movs	r0, r3
 8005362:	f000 fcd1 	bl	8005d08 <UART_CheckIdleState>
 8005366:	0003      	movs	r3, r0
}
 8005368:	0018      	movs	r0, r3
 800536a:	46bd      	mov	sp, r7
 800536c:	b002      	add	sp, #8
 800536e:	bd80      	pop	{r7, pc}
 8005370:	fffff7ff 	.word	0xfffff7ff

08005374 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	1dbb      	adds	r3, r7, #6
 8005380:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005386:	2b20      	cmp	r3, #32
 8005388:	d000      	beq.n	800538c <HAL_UART_Transmit_DMA+0x18>
 800538a:	e079      	b.n	8005480 <HAL_UART_Transmit_DMA+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_UART_Transmit_DMA+0x26>
 8005392:	1dbb      	adds	r3, r7, #6
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e071      	b.n	8005482 <HAL_UART_Transmit_DMA+0x10e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	2380      	movs	r3, #128	; 0x80
 80053a4:	015b      	lsls	r3, r3, #5
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d109      	bne.n	80053be <HAL_UART_Transmit_DMA+0x4a>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d105      	bne.n	80053be <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2201      	movs	r2, #1
 80053b6:	4013      	ands	r3, r2
 80053b8:	d001      	beq.n	80053be <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e061      	b.n	8005482 <HAL_UART_Transmit_DMA+0x10e>
      }
    }

    __HAL_LOCK(huart);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2274      	movs	r2, #116	; 0x74
 80053c2:	5c9b      	ldrb	r3, [r3, r2]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d101      	bne.n	80053cc <HAL_UART_Transmit_DMA+0x58>
 80053c8:	2302      	movs	r3, #2
 80053ca:	e05a      	b.n	8005482 <HAL_UART_Transmit_DMA+0x10e>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2274      	movs	r2, #116	; 0x74
 80053d0:	2101      	movs	r1, #1
 80053d2:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	1dba      	adds	r2, r7, #6
 80053de:	2150      	movs	r1, #80	; 0x50
 80053e0:	8812      	ldrh	r2, [r2, #0]
 80053e2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	1dba      	adds	r2, r7, #6
 80053e8:	2152      	movs	r1, #82	; 0x52
 80053ea:	8812      	ldrh	r2, [r2, #0]
 80053ec:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2280      	movs	r2, #128	; 0x80
 80053f2:	2100      	movs	r1, #0
 80053f4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2221      	movs	r2, #33	; 0x21
 80053fa:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005400:	2b00      	cmp	r3, #0
 8005402:	d02b      	beq.n	800545c <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005408:	4a20      	ldr	r2, [pc, #128]	; (800548c <HAL_UART_Transmit_DMA+0x118>)
 800540a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005410:	4a1f      	ldr	r2, [pc, #124]	; (8005490 <HAL_UART_Transmit_DMA+0x11c>)
 8005412:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005418:	4a1e      	ldr	r2, [pc, #120]	; (8005494 <HAL_UART_Transmit_DMA+0x120>)
 800541a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005420:	2200      	movs	r2, #0
 8005422:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800542c:	0019      	movs	r1, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3328      	adds	r3, #40	; 0x28
 8005434:	001a      	movs	r2, r3
 8005436:	1dbb      	adds	r3, r7, #6
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	f7fe f86f 	bl	800351c <HAL_DMA_Start_IT>
 800543e:	1e03      	subs	r3, r0, #0
 8005440:	d00c      	beq.n	800545c <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2280      	movs	r2, #128	; 0x80
 8005446:	2110      	movs	r1, #16
 8005448:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2274      	movs	r2, #116	; 0x74
 800544e:	2100      	movs	r1, #0
 8005450:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2220      	movs	r2, #32
 8005456:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e012      	b.n	8005482 <HAL_UART_Transmit_DMA+0x10e>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2240      	movs	r2, #64	; 0x40
 8005462:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2274      	movs	r2, #116	; 0x74
 8005468:	2100      	movs	r1, #0
 800546a:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689a      	ldr	r2, [r3, #8]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2180      	movs	r1, #128	; 0x80
 8005478:	430a      	orrs	r2, r1
 800547a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	e000      	b.n	8005482 <HAL_UART_Transmit_DMA+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005480:	2302      	movs	r3, #2
  }
}
 8005482:	0018      	movs	r0, r3
 8005484:	46bd      	mov	sp, r7
 8005486:	b004      	add	sp, #16
 8005488:	bd80      	pop	{r7, pc}
 800548a:	46c0      	nop			; (mov r8, r8)
 800548c:	08005f21 	.word	0x08005f21
 8005490:	08005f71 	.word	0x08005f71
 8005494:	08005f8f 	.word	0x08005f8f

08005498 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b088      	sub	sp, #32
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	4ab5      	ldr	r2, [pc, #724]	; (8005790 <HAL_UART_IRQHandler+0x2f8>)
 80054bc:	4013      	ands	r3, r2
 80054be:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d112      	bne.n	80054ec <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	2220      	movs	r2, #32
 80054ca:	4013      	ands	r3, r2
 80054cc:	d00e      	beq.n	80054ec <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	2220      	movs	r2, #32
 80054d2:	4013      	ands	r3, r2
 80054d4:	d00a      	beq.n	80054ec <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d100      	bne.n	80054e0 <HAL_UART_IRQHandler+0x48>
 80054de:	e1bf      	b.n	8005860 <HAL_UART_IRQHandler+0x3c8>
      {
        huart->RxISR(huart);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	0010      	movs	r0, r2
 80054e8:	4798      	blx	r3
      }
      return;
 80054ea:	e1b9      	b.n	8005860 <HAL_UART_IRQHandler+0x3c8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d100      	bne.n	80054f4 <HAL_UART_IRQHandler+0x5c>
 80054f2:	e0d9      	b.n	80056a8 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	2201      	movs	r2, #1
 80054f8:	4013      	ands	r3, r2
 80054fa:	d104      	bne.n	8005506 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	4aa5      	ldr	r2, [pc, #660]	; (8005794 <HAL_UART_IRQHandler+0x2fc>)
 8005500:	4013      	ands	r3, r2
 8005502:	d100      	bne.n	8005506 <HAL_UART_IRQHandler+0x6e>
 8005504:	e0d0      	b.n	80056a8 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	2201      	movs	r2, #1
 800550a:	4013      	ands	r3, r2
 800550c:	d010      	beq.n	8005530 <HAL_UART_IRQHandler+0x98>
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	2380      	movs	r3, #128	; 0x80
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	4013      	ands	r3, r2
 8005516:	d00b      	beq.n	8005530 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2201      	movs	r2, #1
 800551e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2280      	movs	r2, #128	; 0x80
 8005524:	589b      	ldr	r3, [r3, r2]
 8005526:	2201      	movs	r2, #1
 8005528:	431a      	orrs	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2180      	movs	r1, #128	; 0x80
 800552e:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	2202      	movs	r2, #2
 8005534:	4013      	ands	r3, r2
 8005536:	d00f      	beq.n	8005558 <HAL_UART_IRQHandler+0xc0>
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	2201      	movs	r2, #1
 800553c:	4013      	ands	r3, r2
 800553e:	d00b      	beq.n	8005558 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2202      	movs	r2, #2
 8005546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2280      	movs	r2, #128	; 0x80
 800554c:	589b      	ldr	r3, [r3, r2]
 800554e:	2204      	movs	r2, #4
 8005550:	431a      	orrs	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2180      	movs	r1, #128	; 0x80
 8005556:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	2204      	movs	r2, #4
 800555c:	4013      	ands	r3, r2
 800555e:	d00f      	beq.n	8005580 <HAL_UART_IRQHandler+0xe8>
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	2201      	movs	r2, #1
 8005564:	4013      	ands	r3, r2
 8005566:	d00b      	beq.n	8005580 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2204      	movs	r2, #4
 800556e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2280      	movs	r2, #128	; 0x80
 8005574:	589b      	ldr	r3, [r3, r2]
 8005576:	2202      	movs	r2, #2
 8005578:	431a      	orrs	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2180      	movs	r1, #128	; 0x80
 800557e:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	2208      	movs	r2, #8
 8005584:	4013      	ands	r3, r2
 8005586:	d013      	beq.n	80055b0 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	2220      	movs	r2, #32
 800558c:	4013      	ands	r3, r2
 800558e:	d103      	bne.n	8005598 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	2201      	movs	r2, #1
 8005594:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005596:	d00b      	beq.n	80055b0 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2208      	movs	r2, #8
 800559e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2280      	movs	r2, #128	; 0x80
 80055a4:	589b      	ldr	r3, [r3, r2]
 80055a6:	2208      	movs	r2, #8
 80055a8:	431a      	orrs	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2180      	movs	r1, #128	; 0x80
 80055ae:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80055b0:	69fa      	ldr	r2, [r7, #28]
 80055b2:	2380      	movs	r3, #128	; 0x80
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	4013      	ands	r3, r2
 80055b8:	d011      	beq.n	80055de <HAL_UART_IRQHandler+0x146>
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	2380      	movs	r3, #128	; 0x80
 80055be:	04db      	lsls	r3, r3, #19
 80055c0:	4013      	ands	r3, r2
 80055c2:	d00c      	beq.n	80055de <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2280      	movs	r2, #128	; 0x80
 80055ca:	0112      	lsls	r2, r2, #4
 80055cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2280      	movs	r2, #128	; 0x80
 80055d2:	589b      	ldr	r3, [r3, r2]
 80055d4:	2220      	movs	r2, #32
 80055d6:	431a      	orrs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2180      	movs	r1, #128	; 0x80
 80055dc:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2280      	movs	r2, #128	; 0x80
 80055e2:	589b      	ldr	r3, [r3, r2]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d100      	bne.n	80055ea <HAL_UART_IRQHandler+0x152>
 80055e8:	e13c      	b.n	8005864 <HAL_UART_IRQHandler+0x3cc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	2220      	movs	r2, #32
 80055ee:	4013      	ands	r3, r2
 80055f0:	d00c      	beq.n	800560c <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	2220      	movs	r2, #32
 80055f6:	4013      	ands	r3, r2
 80055f8:	d008      	beq.n	800560c <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d004      	beq.n	800560c <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	0010      	movs	r0, r2
 800560a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2280      	movs	r2, #128	; 0x80
 8005610:	589b      	ldr	r3, [r3, r2]
 8005612:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	2240      	movs	r2, #64	; 0x40
 800561c:	4013      	ands	r3, r2
 800561e:	2b40      	cmp	r3, #64	; 0x40
 8005620:	d003      	beq.n	800562a <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2228      	movs	r2, #40	; 0x28
 8005626:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005628:	d033      	beq.n	8005692 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	0018      	movs	r0, r3
 800562e:	f000 fc47 	bl	8005ec0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	2240      	movs	r2, #64	; 0x40
 800563a:	4013      	ands	r3, r2
 800563c:	2b40      	cmp	r3, #64	; 0x40
 800563e:	d123      	bne.n	8005688 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689a      	ldr	r2, [r3, #8]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2140      	movs	r1, #64	; 0x40
 800564c:	438a      	bics	r2, r1
 800564e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005654:	2b00      	cmp	r3, #0
 8005656:	d012      	beq.n	800567e <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565c:	4a4e      	ldr	r2, [pc, #312]	; (8005798 <HAL_UART_IRQHandler+0x300>)
 800565e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005664:	0018      	movs	r0, r3
 8005666:	f7fd fff7 	bl	8003658 <HAL_DMA_Abort_IT>
 800566a:	1e03      	subs	r3, r0, #0
 800566c:	d01a      	beq.n	80056a4 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005678:	0018      	movs	r0, r3
 800567a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800567c:	e012      	b.n	80056a4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	0018      	movs	r0, r3
 8005682:	f000 f90b 	bl	800589c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005686:	e00d      	b.n	80056a4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	0018      	movs	r0, r3
 800568c:	f000 f906 	bl	800589c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005690:	e008      	b.n	80056a4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	0018      	movs	r0, r3
 8005696:	f000 f901 	bl	800589c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2280      	movs	r2, #128	; 0x80
 800569e:	2100      	movs	r1, #0
 80056a0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80056a2:	e0df      	b.n	8005864 <HAL_UART_IRQHandler+0x3cc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a4:	46c0      	nop			; (mov r8, r8)
    return;
 80056a6:	e0dd      	b.n	8005864 <HAL_UART_IRQHandler+0x3cc>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d000      	beq.n	80056b2 <HAL_UART_IRQHandler+0x21a>
 80056b0:	e0b6      	b.n	8005820 <HAL_UART_IRQHandler+0x388>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	2210      	movs	r2, #16
 80056b6:	4013      	ands	r3, r2
 80056b8:	d100      	bne.n	80056bc <HAL_UART_IRQHandler+0x224>
 80056ba:	e0b1      	b.n	8005820 <HAL_UART_IRQHandler+0x388>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	2210      	movs	r2, #16
 80056c0:	4013      	ands	r3, r2
 80056c2:	d100      	bne.n	80056c6 <HAL_UART_IRQHandler+0x22e>
 80056c4:	e0ac      	b.n	8005820 <HAL_UART_IRQHandler+0x388>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2210      	movs	r2, #16
 80056cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	2240      	movs	r2, #64	; 0x40
 80056d6:	4013      	ands	r3, r2
 80056d8:	2b40      	cmp	r3, #64	; 0x40
 80056da:	d161      	bne.n	80057a0 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	2108      	movs	r1, #8
 80056e6:	187b      	adds	r3, r7, r1
 80056e8:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 80056ea:	187b      	adds	r3, r7, r1
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d100      	bne.n	80056f4 <HAL_UART_IRQHandler+0x25c>
 80056f2:	e0b9      	b.n	8005868 <HAL_UART_IRQHandler+0x3d0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2258      	movs	r2, #88	; 0x58
 80056f8:	5a9b      	ldrh	r3, [r3, r2]
 80056fa:	2208      	movs	r2, #8
 80056fc:	18ba      	adds	r2, r7, r2
 80056fe:	8812      	ldrh	r2, [r2, #0]
 8005700:	429a      	cmp	r2, r3
 8005702:	d300      	bcc.n	8005706 <HAL_UART_IRQHandler+0x26e>
 8005704:	e0b0      	b.n	8005868 <HAL_UART_IRQHandler+0x3d0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2208      	movs	r2, #8
 800570a:	18ba      	adds	r2, r7, r2
 800570c:	215a      	movs	r1, #90	; 0x5a
 800570e:	8812      	ldrh	r2, [r2, #0]
 8005710:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	2b20      	cmp	r3, #32
 800571a:	d02a      	beq.n	8005772 <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	491d      	ldr	r1, [pc, #116]	; (800579c <HAL_UART_IRQHandler+0x304>)
 8005728:	400a      	ands	r2, r1
 800572a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689a      	ldr	r2, [r3, #8]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2101      	movs	r1, #1
 8005738:	438a      	bics	r2, r1
 800573a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2140      	movs	r1, #64	; 0x40
 8005748:	438a      	bics	r2, r1
 800574a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2110      	movs	r1, #16
 8005764:	438a      	bics	r2, r1
 8005766:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576c:	0018      	movs	r0, r3
 800576e:	f7fd ff3b 	bl	80035e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2258      	movs	r2, #88	; 0x58
 8005776:	5a9a      	ldrh	r2, [r3, r2]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	215a      	movs	r1, #90	; 0x5a
 800577c:	5a5b      	ldrh	r3, [r3, r1]
 800577e:	b29b      	uxth	r3, r3
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	b29a      	uxth	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	0011      	movs	r1, r2
 8005788:	0018      	movs	r0, r3
 800578a:	f000 f88f 	bl	80058ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800578e:	e06b      	b.n	8005868 <HAL_UART_IRQHandler+0x3d0>
 8005790:	0000080f 	.word	0x0000080f
 8005794:	04000120 	.word	0x04000120
 8005798:	08006011 	.word	0x08006011
 800579c:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2258      	movs	r2, #88	; 0x58
 80057a4:	5a99      	ldrh	r1, [r3, r2]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	225a      	movs	r2, #90	; 0x5a
 80057aa:	5a9b      	ldrh	r3, [r3, r2]
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	230a      	movs	r3, #10
 80057b0:	18fb      	adds	r3, r7, r3
 80057b2:	1a8a      	subs	r2, r1, r2
 80057b4:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	225a      	movs	r2, #90	; 0x5a
 80057ba:	5a9b      	ldrh	r3, [r3, r2]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d054      	beq.n	800586c <HAL_UART_IRQHandler+0x3d4>
          &&(nb_rx_data > 0U) )
 80057c2:	230a      	movs	r3, #10
 80057c4:	18fb      	adds	r3, r7, r3
 80057c6:	881b      	ldrh	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d04f      	beq.n	800586c <HAL_UART_IRQHandler+0x3d4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4928      	ldr	r1, [pc, #160]	; (8005878 <HAL_UART_IRQHandler+0x3e0>)
 80057d8:	400a      	ands	r2, r1
 80057da:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689a      	ldr	r2, [r3, #8]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2101      	movs	r1, #1
 80057e8:	438a      	bics	r2, r1
 80057ea:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2220      	movs	r2, #32
 80057f0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2110      	movs	r1, #16
 800580a:	438a      	bics	r2, r1
 800580c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800580e:	230a      	movs	r3, #10
 8005810:	18fb      	adds	r3, r7, r3
 8005812:	881a      	ldrh	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	0011      	movs	r1, r2
 8005818:	0018      	movs	r0, r3
 800581a:	f000 f847 	bl	80058ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800581e:	e025      	b.n	800586c <HAL_UART_IRQHandler+0x3d4>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	2280      	movs	r2, #128	; 0x80
 8005824:	4013      	ands	r3, r2
 8005826:	d00d      	beq.n	8005844 <HAL_UART_IRQHandler+0x3ac>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	2280      	movs	r2, #128	; 0x80
 800582c:	4013      	ands	r3, r2
 800582e:	d009      	beq.n	8005844 <HAL_UART_IRQHandler+0x3ac>
  {
    if (huart->TxISR != NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005834:	2b00      	cmp	r3, #0
 8005836:	d01b      	beq.n	8005870 <HAL_UART_IRQHandler+0x3d8>
    {
      huart->TxISR(huart);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	0010      	movs	r0, r2
 8005840:	4798      	blx	r3
    }
    return;
 8005842:	e015      	b.n	8005870 <HAL_UART_IRQHandler+0x3d8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	2240      	movs	r2, #64	; 0x40
 8005848:	4013      	ands	r3, r2
 800584a:	d012      	beq.n	8005872 <HAL_UART_IRQHandler+0x3da>
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	2240      	movs	r2, #64	; 0x40
 8005850:	4013      	ands	r3, r2
 8005852:	d00e      	beq.n	8005872 <HAL_UART_IRQHandler+0x3da>
  {
    UART_EndTransmit_IT(huart);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	0018      	movs	r0, r3
 8005858:	f000 fbf1 	bl	800603e <UART_EndTransmit_IT>
    return;
 800585c:	46c0      	nop			; (mov r8, r8)
 800585e:	e008      	b.n	8005872 <HAL_UART_IRQHandler+0x3da>
      return;
 8005860:	46c0      	nop			; (mov r8, r8)
 8005862:	e006      	b.n	8005872 <HAL_UART_IRQHandler+0x3da>
    return;
 8005864:	46c0      	nop			; (mov r8, r8)
 8005866:	e004      	b.n	8005872 <HAL_UART_IRQHandler+0x3da>
      return;
 8005868:	46c0      	nop			; (mov r8, r8)
 800586a:	e002      	b.n	8005872 <HAL_UART_IRQHandler+0x3da>
      return;
 800586c:	46c0      	nop			; (mov r8, r8)
 800586e:	e000      	b.n	8005872 <HAL_UART_IRQHandler+0x3da>
    return;
 8005870:	46c0      	nop			; (mov r8, r8)
  }

}
 8005872:	46bd      	mov	sp, r7
 8005874:	b008      	add	sp, #32
 8005876:	bd80      	pop	{r7, pc}
 8005878:	fffffedf 	.word	0xfffffedf

0800587c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005884:	46c0      	nop			; (mov r8, r8)
 8005886:	46bd      	mov	sp, r7
 8005888:	b002      	add	sp, #8
 800588a:	bd80      	pop	{r7, pc}

0800588c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005894:	46c0      	nop			; (mov r8, r8)
 8005896:	46bd      	mov	sp, r7
 8005898:	b002      	add	sp, #8
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058a4:	46c0      	nop			; (mov r8, r8)
 80058a6:	46bd      	mov	sp, r7
 80058a8:	b002      	add	sp, #8
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	000a      	movs	r2, r1
 80058b6:	1cbb      	adds	r3, r7, #2
 80058b8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058ba:	46c0      	nop			; (mov r8, r8)
 80058bc:	46bd      	mov	sp, r7
 80058be:	b002      	add	sp, #8
 80058c0:	bd80      	pop	{r7, pc}
	...

080058c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b088      	sub	sp, #32
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058cc:	231e      	movs	r3, #30
 80058ce:	18fb      	adds	r3, r7, r3
 80058d0:	2200      	movs	r2, #0
 80058d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a9f      	ldr	r2, [pc, #636]	; (8005b70 <UART_SetConfig+0x2ac>)
 80058f4:	4013      	ands	r3, r2
 80058f6:	0019      	movs	r1, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	430a      	orrs	r2, r1
 8005900:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	4a9a      	ldr	r2, [pc, #616]	; (8005b74 <UART_SetConfig+0x2b0>)
 800590a:	4013      	ands	r3, r2
 800590c:	0019      	movs	r1, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	4313      	orrs	r3, r2
 8005928:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	4a91      	ldr	r2, [pc, #580]	; (8005b78 <UART_SetConfig+0x2b4>)
 8005932:	4013      	ands	r3, r2
 8005934:	0019      	movs	r1, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	430a      	orrs	r2, r1
 800593e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a8d      	ldr	r2, [pc, #564]	; (8005b7c <UART_SetConfig+0x2b8>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d125      	bne.n	8005996 <UART_SetConfig+0xd2>
 800594a:	4b8d      	ldr	r3, [pc, #564]	; (8005b80 <UART_SetConfig+0x2bc>)
 800594c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594e:	2203      	movs	r2, #3
 8005950:	4013      	ands	r3, r2
 8005952:	2b01      	cmp	r3, #1
 8005954:	d00f      	beq.n	8005976 <UART_SetConfig+0xb2>
 8005956:	d304      	bcc.n	8005962 <UART_SetConfig+0x9e>
 8005958:	2b02      	cmp	r3, #2
 800595a:	d011      	beq.n	8005980 <UART_SetConfig+0xbc>
 800595c:	2b03      	cmp	r3, #3
 800595e:	d005      	beq.n	800596c <UART_SetConfig+0xa8>
 8005960:	e013      	b.n	800598a <UART_SetConfig+0xc6>
 8005962:	231f      	movs	r3, #31
 8005964:	18fb      	adds	r3, r7, r3
 8005966:	2200      	movs	r2, #0
 8005968:	701a      	strb	r2, [r3, #0]
 800596a:	e04a      	b.n	8005a02 <UART_SetConfig+0x13e>
 800596c:	231f      	movs	r3, #31
 800596e:	18fb      	adds	r3, r7, r3
 8005970:	2202      	movs	r2, #2
 8005972:	701a      	strb	r2, [r3, #0]
 8005974:	e045      	b.n	8005a02 <UART_SetConfig+0x13e>
 8005976:	231f      	movs	r3, #31
 8005978:	18fb      	adds	r3, r7, r3
 800597a:	2204      	movs	r2, #4
 800597c:	701a      	strb	r2, [r3, #0]
 800597e:	e040      	b.n	8005a02 <UART_SetConfig+0x13e>
 8005980:	231f      	movs	r3, #31
 8005982:	18fb      	adds	r3, r7, r3
 8005984:	2208      	movs	r2, #8
 8005986:	701a      	strb	r2, [r3, #0]
 8005988:	e03b      	b.n	8005a02 <UART_SetConfig+0x13e>
 800598a:	231f      	movs	r3, #31
 800598c:	18fb      	adds	r3, r7, r3
 800598e:	2210      	movs	r2, #16
 8005990:	701a      	strb	r2, [r3, #0]
 8005992:	46c0      	nop			; (mov r8, r8)
 8005994:	e035      	b.n	8005a02 <UART_SetConfig+0x13e>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a7a      	ldr	r2, [pc, #488]	; (8005b84 <UART_SetConfig+0x2c0>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d104      	bne.n	80059aa <UART_SetConfig+0xe6>
 80059a0:	231f      	movs	r3, #31
 80059a2:	18fb      	adds	r3, r7, r3
 80059a4:	2200      	movs	r2, #0
 80059a6:	701a      	strb	r2, [r3, #0]
 80059a8:	e02b      	b.n	8005a02 <UART_SetConfig+0x13e>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a76      	ldr	r2, [pc, #472]	; (8005b88 <UART_SetConfig+0x2c4>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d104      	bne.n	80059be <UART_SetConfig+0xfa>
 80059b4:	231f      	movs	r3, #31
 80059b6:	18fb      	adds	r3, r7, r3
 80059b8:	2200      	movs	r2, #0
 80059ba:	701a      	strb	r2, [r3, #0]
 80059bc:	e021      	b.n	8005a02 <UART_SetConfig+0x13e>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a72      	ldr	r2, [pc, #456]	; (8005b8c <UART_SetConfig+0x2c8>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d104      	bne.n	80059d2 <UART_SetConfig+0x10e>
 80059c8:	231f      	movs	r3, #31
 80059ca:	18fb      	adds	r3, r7, r3
 80059cc:	2200      	movs	r2, #0
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	e017      	b.n	8005a02 <UART_SetConfig+0x13e>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a6e      	ldr	r2, [pc, #440]	; (8005b90 <UART_SetConfig+0x2cc>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d104      	bne.n	80059e6 <UART_SetConfig+0x122>
 80059dc:	231f      	movs	r3, #31
 80059de:	18fb      	adds	r3, r7, r3
 80059e0:	2200      	movs	r2, #0
 80059e2:	701a      	strb	r2, [r3, #0]
 80059e4:	e00d      	b.n	8005a02 <UART_SetConfig+0x13e>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a6a      	ldr	r2, [pc, #424]	; (8005b94 <UART_SetConfig+0x2d0>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d104      	bne.n	80059fa <UART_SetConfig+0x136>
 80059f0:	231f      	movs	r3, #31
 80059f2:	18fb      	adds	r3, r7, r3
 80059f4:	2200      	movs	r2, #0
 80059f6:	701a      	strb	r2, [r3, #0]
 80059f8:	e003      	b.n	8005a02 <UART_SetConfig+0x13e>
 80059fa:	231f      	movs	r3, #31
 80059fc:	18fb      	adds	r3, r7, r3
 80059fe:	2210      	movs	r2, #16
 8005a00:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	69da      	ldr	r2, [r3, #28]
 8005a06:	2380      	movs	r3, #128	; 0x80
 8005a08:	021b      	lsls	r3, r3, #8
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d15c      	bne.n	8005ac8 <UART_SetConfig+0x204>
  {
    switch (clocksource)
 8005a0e:	231f      	movs	r3, #31
 8005a10:	18fb      	adds	r3, r7, r3
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d00d      	beq.n	8005a34 <UART_SetConfig+0x170>
 8005a18:	dc02      	bgt.n	8005a20 <UART_SetConfig+0x15c>
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d005      	beq.n	8005a2a <UART_SetConfig+0x166>
 8005a1e:	e015      	b.n	8005a4c <UART_SetConfig+0x188>
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d00a      	beq.n	8005a3a <UART_SetConfig+0x176>
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d00d      	beq.n	8005a44 <UART_SetConfig+0x180>
 8005a28:	e010      	b.n	8005a4c <UART_SetConfig+0x188>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a2a:	f7fe fd41 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
 8005a2e:	0003      	movs	r3, r0
 8005a30:	61bb      	str	r3, [r7, #24]
        break;
 8005a32:	e012      	b.n	8005a5a <UART_SetConfig+0x196>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a34:	4b58      	ldr	r3, [pc, #352]	; (8005b98 <UART_SetConfig+0x2d4>)
 8005a36:	61bb      	str	r3, [r7, #24]
        break;
 8005a38:	e00f      	b.n	8005a5a <UART_SetConfig+0x196>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a3a:	f7fe fccd 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
 8005a3e:	0003      	movs	r3, r0
 8005a40:	61bb      	str	r3, [r7, #24]
        break;
 8005a42:	e00a      	b.n	8005a5a <UART_SetConfig+0x196>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a44:	2380      	movs	r3, #128	; 0x80
 8005a46:	021b      	lsls	r3, r3, #8
 8005a48:	61bb      	str	r3, [r7, #24]
        break;
 8005a4a:	e006      	b.n	8005a5a <UART_SetConfig+0x196>
      default:
        pclk = 0U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a50:	231e      	movs	r3, #30
 8005a52:	18fb      	adds	r3, r7, r3
 8005a54:	2201      	movs	r2, #1
 8005a56:	701a      	strb	r2, [r3, #0]
        break;
 8005a58:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d100      	bne.n	8005a62 <UART_SetConfig+0x19e>
 8005a60:	e079      	b.n	8005b56 <UART_SetConfig+0x292>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	005a      	lsls	r2, r3, #1
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	085b      	lsrs	r3, r3, #1
 8005a6c:	18d2      	adds	r2, r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	0019      	movs	r1, r3
 8005a74:	0010      	movs	r0, r2
 8005a76:	f7fa fb57 	bl	8000128 <__udivsi3>
 8005a7a:	0003      	movs	r3, r0
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	2b0f      	cmp	r3, #15
 8005a84:	d91b      	bls.n	8005abe <UART_SetConfig+0x1fa>
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	4a44      	ldr	r2, [pc, #272]	; (8005b9c <UART_SetConfig+0x2d8>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d817      	bhi.n	8005abe <UART_SetConfig+0x1fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	200e      	movs	r0, #14
 8005a94:	183b      	adds	r3, r7, r0
 8005a96:	210f      	movs	r1, #15
 8005a98:	438a      	bics	r2, r1
 8005a9a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	085b      	lsrs	r3, r3, #1
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	2207      	movs	r2, #7
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	b299      	uxth	r1, r3
 8005aa8:	183b      	adds	r3, r7, r0
 8005aaa:	183a      	adds	r2, r7, r0
 8005aac:	8812      	ldrh	r2, [r2, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	183a      	adds	r2, r7, r0
 8005ab8:	8812      	ldrh	r2, [r2, #0]
 8005aba:	60da      	str	r2, [r3, #12]
 8005abc:	e04b      	b.n	8005b56 <UART_SetConfig+0x292>
      }
      else
      {
        ret = HAL_ERROR;
 8005abe:	231e      	movs	r3, #30
 8005ac0:	18fb      	adds	r3, r7, r3
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	701a      	strb	r2, [r3, #0]
 8005ac6:	e046      	b.n	8005b56 <UART_SetConfig+0x292>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ac8:	231f      	movs	r3, #31
 8005aca:	18fb      	adds	r3, r7, r3
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d00d      	beq.n	8005aee <UART_SetConfig+0x22a>
 8005ad2:	dc02      	bgt.n	8005ada <UART_SetConfig+0x216>
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d005      	beq.n	8005ae4 <UART_SetConfig+0x220>
 8005ad8:	e015      	b.n	8005b06 <UART_SetConfig+0x242>
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d00a      	beq.n	8005af4 <UART_SetConfig+0x230>
 8005ade:	2b08      	cmp	r3, #8
 8005ae0:	d00d      	beq.n	8005afe <UART_SetConfig+0x23a>
 8005ae2:	e010      	b.n	8005b06 <UART_SetConfig+0x242>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ae4:	f7fe fce4 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
 8005ae8:	0003      	movs	r3, r0
 8005aea:	61bb      	str	r3, [r7, #24]
        break;
 8005aec:	e012      	b.n	8005b14 <UART_SetConfig+0x250>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005aee:	4b2a      	ldr	r3, [pc, #168]	; (8005b98 <UART_SetConfig+0x2d4>)
 8005af0:	61bb      	str	r3, [r7, #24]
        break;
 8005af2:	e00f      	b.n	8005b14 <UART_SetConfig+0x250>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005af4:	f7fe fc70 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
 8005af8:	0003      	movs	r3, r0
 8005afa:	61bb      	str	r3, [r7, #24]
        break;
 8005afc:	e00a      	b.n	8005b14 <UART_SetConfig+0x250>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005afe:	2380      	movs	r3, #128	; 0x80
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	61bb      	str	r3, [r7, #24]
        break;
 8005b04:	e006      	b.n	8005b14 <UART_SetConfig+0x250>
      default:
        pclk = 0U;
 8005b06:	2300      	movs	r3, #0
 8005b08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b0a:	231e      	movs	r3, #30
 8005b0c:	18fb      	adds	r3, r7, r3
 8005b0e:	2201      	movs	r2, #1
 8005b10:	701a      	strb	r2, [r3, #0]
        break;
 8005b12:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d01d      	beq.n	8005b56 <UART_SetConfig+0x292>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	085a      	lsrs	r2, r3, #1
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	18d2      	adds	r2, r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	0019      	movs	r1, r3
 8005b2a:	0010      	movs	r0, r2
 8005b2c:	f7fa fafc 	bl	8000128 <__udivsi3>
 8005b30:	0003      	movs	r3, r0
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	2b0f      	cmp	r3, #15
 8005b3a:	d908      	bls.n	8005b4e <UART_SetConfig+0x28a>
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	4a17      	ldr	r2, [pc, #92]	; (8005b9c <UART_SetConfig+0x2d8>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d804      	bhi.n	8005b4e <UART_SetConfig+0x28a>
      {
        huart->Instance->BRR = usartdiv;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	60da      	str	r2, [r3, #12]
 8005b4c:	e003      	b.n	8005b56 <UART_SetConfig+0x292>
      }
      else
      {
        ret = HAL_ERROR;
 8005b4e:	231e      	movs	r3, #30
 8005b50:	18fb      	adds	r3, r7, r3
 8005b52:	2201      	movs	r2, #1
 8005b54:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005b62:	231e      	movs	r3, #30
 8005b64:	18fb      	adds	r3, r7, r3
 8005b66:	781b      	ldrb	r3, [r3, #0]
}
 8005b68:	0018      	movs	r0, r3
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	b008      	add	sp, #32
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	efff69f3 	.word	0xefff69f3
 8005b74:	ffffcfff 	.word	0xffffcfff
 8005b78:	fffff4ff 	.word	0xfffff4ff
 8005b7c:	40013800 	.word	0x40013800
 8005b80:	40021000 	.word	0x40021000
 8005b84:	40004400 	.word	0x40004400
 8005b88:	40004800 	.word	0x40004800
 8005b8c:	40004c00 	.word	0x40004c00
 8005b90:	40005000 	.word	0x40005000
 8005b94:	40011400 	.word	0x40011400
 8005b98:	007a1200 	.word	0x007a1200
 8005b9c:	0000ffff 	.word	0x0000ffff

08005ba0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	2201      	movs	r2, #1
 8005bae:	4013      	ands	r3, r2
 8005bb0:	d00b      	beq.n	8005bca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	4a4a      	ldr	r2, [pc, #296]	; (8005ce4 <UART_AdvFeatureConfig+0x144>)
 8005bba:	4013      	ands	r3, r2
 8005bbc:	0019      	movs	r1, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bce:	2202      	movs	r2, #2
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	d00b      	beq.n	8005bec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	4a43      	ldr	r2, [pc, #268]	; (8005ce8 <UART_AdvFeatureConfig+0x148>)
 8005bdc:	4013      	ands	r3, r2
 8005bde:	0019      	movs	r1, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	2204      	movs	r2, #4
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	d00b      	beq.n	8005c0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	4a3b      	ldr	r2, [pc, #236]	; (8005cec <UART_AdvFeatureConfig+0x14c>)
 8005bfe:	4013      	ands	r3, r2
 8005c00:	0019      	movs	r1, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	2208      	movs	r2, #8
 8005c14:	4013      	ands	r3, r2
 8005c16:	d00b      	beq.n	8005c30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	4a34      	ldr	r2, [pc, #208]	; (8005cf0 <UART_AdvFeatureConfig+0x150>)
 8005c20:	4013      	ands	r3, r2
 8005c22:	0019      	movs	r1, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	2210      	movs	r2, #16
 8005c36:	4013      	ands	r3, r2
 8005c38:	d00b      	beq.n	8005c52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	4a2c      	ldr	r2, [pc, #176]	; (8005cf4 <UART_AdvFeatureConfig+0x154>)
 8005c42:	4013      	ands	r3, r2
 8005c44:	0019      	movs	r1, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	2220      	movs	r2, #32
 8005c58:	4013      	ands	r3, r2
 8005c5a:	d00b      	beq.n	8005c74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	4a25      	ldr	r2, [pc, #148]	; (8005cf8 <UART_AdvFeatureConfig+0x158>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	0019      	movs	r1, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	2240      	movs	r2, #64	; 0x40
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	d01d      	beq.n	8005cba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	4a1d      	ldr	r2, [pc, #116]	; (8005cfc <UART_AdvFeatureConfig+0x15c>)
 8005c86:	4013      	ands	r3, r2
 8005c88:	0019      	movs	r1, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c9a:	2380      	movs	r3, #128	; 0x80
 8005c9c:	035b      	lsls	r3, r3, #13
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d10b      	bne.n	8005cba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	4a15      	ldr	r2, [pc, #84]	; (8005d00 <UART_AdvFeatureConfig+0x160>)
 8005caa:	4013      	ands	r3, r2
 8005cac:	0019      	movs	r1, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbe:	2280      	movs	r2, #128	; 0x80
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	d00b      	beq.n	8005cdc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	4a0e      	ldr	r2, [pc, #56]	; (8005d04 <UART_AdvFeatureConfig+0x164>)
 8005ccc:	4013      	ands	r3, r2
 8005cce:	0019      	movs	r1, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	605a      	str	r2, [r3, #4]
  }
}
 8005cdc:	46c0      	nop			; (mov r8, r8)
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	b002      	add	sp, #8
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	fffdffff 	.word	0xfffdffff
 8005ce8:	fffeffff 	.word	0xfffeffff
 8005cec:	fffbffff 	.word	0xfffbffff
 8005cf0:	ffff7fff 	.word	0xffff7fff
 8005cf4:	ffffefff 	.word	0xffffefff
 8005cf8:	ffffdfff 	.word	0xffffdfff
 8005cfc:	ffefffff 	.word	0xffefffff
 8005d00:	ff9fffff 	.word	0xff9fffff
 8005d04:	fff7ffff 	.word	0xfff7ffff

08005d08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af02      	add	r7, sp, #8
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2280      	movs	r2, #128	; 0x80
 8005d14:	2100      	movs	r1, #0
 8005d16:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d18:	f7fd faae 	bl	8003278 <HAL_GetTick>
 8005d1c:	0003      	movs	r3, r0
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2208      	movs	r2, #8
 8005d28:	4013      	ands	r3, r2
 8005d2a:	2b08      	cmp	r3, #8
 8005d2c:	d10d      	bne.n	8005d4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	2380      	movs	r3, #128	; 0x80
 8005d32:	0399      	lsls	r1, r3, #14
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	4b18      	ldr	r3, [pc, #96]	; (8005d98 <UART_CheckIdleState+0x90>)
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	0013      	movs	r3, r2
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f000 f82d 	bl	8005d9c <UART_WaitOnFlagUntilTimeout>
 8005d42:	1e03      	subs	r3, r0, #0
 8005d44:	d001      	beq.n	8005d4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e022      	b.n	8005d90 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2204      	movs	r2, #4
 8005d52:	4013      	ands	r3, r2
 8005d54:	2b04      	cmp	r3, #4
 8005d56:	d10d      	bne.n	8005d74 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	2380      	movs	r3, #128	; 0x80
 8005d5c:	03d9      	lsls	r1, r3, #15
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	4b0d      	ldr	r3, [pc, #52]	; (8005d98 <UART_CheckIdleState+0x90>)
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	0013      	movs	r3, r2
 8005d66:	2200      	movs	r2, #0
 8005d68:	f000 f818 	bl	8005d9c <UART_WaitOnFlagUntilTimeout>
 8005d6c:	1e03      	subs	r3, r0, #0
 8005d6e:	d001      	beq.n	8005d74 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e00d      	b.n	8005d90 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2220      	movs	r2, #32
 8005d78:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2274      	movs	r2, #116	; 0x74
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	0018      	movs	r0, r3
 8005d92:	46bd      	mov	sp, r7
 8005d94:	b004      	add	sp, #16
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	01ffffff 	.word	0x01ffffff

08005d9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	603b      	str	r3, [r7, #0]
 8005da8:	1dfb      	adds	r3, r7, #7
 8005daa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dac:	e05e      	b.n	8005e6c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	3301      	adds	r3, #1
 8005db2:	d05b      	beq.n	8005e6c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005db4:	f7fd fa60 	bl	8003278 <HAL_GetTick>
 8005db8:	0002      	movs	r2, r0
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d302      	bcc.n	8005dca <UART_WaitOnFlagUntilTimeout+0x2e>
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d11b      	bne.n	8005e02 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	492f      	ldr	r1, [pc, #188]	; (8005e94 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005dd6:	400a      	ands	r2, r1
 8005dd8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2101      	movs	r1, #1
 8005de6:	438a      	bics	r2, r1
 8005de8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2220      	movs	r2, #32
 8005dee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2220      	movs	r2, #32
 8005df4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2274      	movs	r2, #116	; 0x74
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e044      	b.n	8005e8c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2204      	movs	r2, #4
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	d02e      	beq.n	8005e6c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69da      	ldr	r2, [r3, #28]
 8005e14:	2380      	movs	r3, #128	; 0x80
 8005e16:	011b      	lsls	r3, r3, #4
 8005e18:	401a      	ands	r2, r3
 8005e1a:	2380      	movs	r3, #128	; 0x80
 8005e1c:	011b      	lsls	r3, r3, #4
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d124      	bne.n	8005e6c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2280      	movs	r2, #128	; 0x80
 8005e28:	0112      	lsls	r2, r2, #4
 8005e2a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4917      	ldr	r1, [pc, #92]	; (8005e94 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005e38:	400a      	ands	r2, r1
 8005e3a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689a      	ldr	r2, [r3, #8]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2101      	movs	r1, #1
 8005e48:	438a      	bics	r2, r1
 8005e4a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2220      	movs	r2, #32
 8005e56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2280      	movs	r2, #128	; 0x80
 8005e5c:	2120      	movs	r1, #32
 8005e5e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2274      	movs	r2, #116	; 0x74
 8005e64:	2100      	movs	r1, #0
 8005e66:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e00f      	b.n	8005e8c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	4013      	ands	r3, r2
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	425a      	negs	r2, r3
 8005e7c:	4153      	adcs	r3, r2
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	001a      	movs	r2, r3
 8005e82:	1dfb      	adds	r3, r7, #7
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d091      	beq.n	8005dae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	b004      	add	sp, #16
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	fffffe5f 	.word	0xfffffe5f

08005e98 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	21c0      	movs	r1, #192	; 0xc0
 8005eac:	438a      	bics	r2, r1
 8005eae:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005eb6:	46c0      	nop			; (mov r8, r8)
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	b002      	add	sp, #8
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4912      	ldr	r1, [pc, #72]	; (8005f1c <UART_EndRxTransfer+0x5c>)
 8005ed4:	400a      	ands	r2, r1
 8005ed6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689a      	ldr	r2, [r3, #8]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2101      	movs	r1, #1
 8005ee4:	438a      	bics	r2, r1
 8005ee6:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d107      	bne.n	8005f00 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2110      	movs	r1, #16
 8005efc:	438a      	bics	r2, r1
 8005efe:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2220      	movs	r2, #32
 8005f04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005f12:	46c0      	nop			; (mov r8, r8)
 8005f14:	46bd      	mov	sp, r7
 8005f16:	b002      	add	sp, #8
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	46c0      	nop			; (mov r8, r8)
 8005f1c:	fffffedf 	.word	0xfffffedf

08005f20 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	2b20      	cmp	r3, #32
 8005f34:	d014      	beq.n	8005f60 <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2252      	movs	r2, #82	; 0x52
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2180      	movs	r1, #128	; 0x80
 8005f4a:	438a      	bics	r2, r1
 8005f4c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2140      	movs	r1, #64	; 0x40
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f5e:	e003      	b.n	8005f68 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	0018      	movs	r0, r3
 8005f64:	f7ff fc8a 	bl	800587c <HAL_UART_TxCpltCallback>
}
 8005f68:	46c0      	nop			; (mov r8, r8)
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	b004      	add	sp, #16
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	0018      	movs	r0, r3
 8005f82:	f7ff fc83 	bl	800588c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f86:	46c0      	nop			; (mov r8, r8)
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	b004      	add	sp, #16
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b086      	sub	sp, #24
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fa0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	2280      	movs	r2, #128	; 0x80
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	2b80      	cmp	r3, #128	; 0x80
 8005fb4:	d10a      	bne.n	8005fcc <UART_DMAError+0x3e>
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	2b21      	cmp	r3, #33	; 0x21
 8005fba:	d107      	bne.n	8005fcc <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2252      	movs	r2, #82	; 0x52
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	f7ff ff66 	bl	8005e98 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	2240      	movs	r2, #64	; 0x40
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	2b40      	cmp	r3, #64	; 0x40
 8005fd8:	d10a      	bne.n	8005ff0 <UART_DMAError+0x62>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2b22      	cmp	r3, #34	; 0x22
 8005fde:	d107      	bne.n	8005ff0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	225a      	movs	r2, #90	; 0x5a
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	0018      	movs	r0, r3
 8005fec:	f7ff ff68 	bl	8005ec0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	2280      	movs	r2, #128	; 0x80
 8005ff4:	589b      	ldr	r3, [r3, r2]
 8005ff6:	2210      	movs	r2, #16
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	2180      	movs	r1, #128	; 0x80
 8005ffe:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	0018      	movs	r0, r3
 8006004:	f7ff fc4a 	bl	800589c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006008:	46c0      	nop			; (mov r8, r8)
 800600a:	46bd      	mov	sp, r7
 800600c:	b006      	add	sp, #24
 800600e:	bd80      	pop	{r7, pc}

08006010 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	225a      	movs	r2, #90	; 0x5a
 8006022:	2100      	movs	r1, #0
 8006024:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2252      	movs	r2, #82	; 0x52
 800602a:	2100      	movs	r1, #0
 800602c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	0018      	movs	r0, r3
 8006032:	f7ff fc33 	bl	800589c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006036:	46c0      	nop			; (mov r8, r8)
 8006038:	46bd      	mov	sp, r7
 800603a:	b004      	add	sp, #16
 800603c:	bd80      	pop	{r7, pc}

0800603e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b082      	sub	sp, #8
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2140      	movs	r1, #64	; 0x40
 8006052:	438a      	bics	r2, r1
 8006054:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2220      	movs	r2, #32
 800605a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	0018      	movs	r0, r3
 8006066:	f7ff fc09 	bl	800587c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800606a:	46c0      	nop			; (mov r8, r8)
 800606c:	46bd      	mov	sp, r7
 800606e:	b002      	add	sp, #8
 8006070:	bd80      	pop	{r7, pc}
	...

08006074 <__errno>:
 8006074:	4b01      	ldr	r3, [pc, #4]	; (800607c <__errno+0x8>)
 8006076:	6818      	ldr	r0, [r3, #0]
 8006078:	4770      	bx	lr
 800607a:	46c0      	nop			; (mov r8, r8)
 800607c:	20000010 	.word	0x20000010

08006080 <__libc_init_array>:
 8006080:	b570      	push	{r4, r5, r6, lr}
 8006082:	2600      	movs	r6, #0
 8006084:	4d0c      	ldr	r5, [pc, #48]	; (80060b8 <__libc_init_array+0x38>)
 8006086:	4c0d      	ldr	r4, [pc, #52]	; (80060bc <__libc_init_array+0x3c>)
 8006088:	1b64      	subs	r4, r4, r5
 800608a:	10a4      	asrs	r4, r4, #2
 800608c:	42a6      	cmp	r6, r4
 800608e:	d109      	bne.n	80060a4 <__libc_init_array+0x24>
 8006090:	2600      	movs	r6, #0
 8006092:	f004 fab5 	bl	800a600 <_init>
 8006096:	4d0a      	ldr	r5, [pc, #40]	; (80060c0 <__libc_init_array+0x40>)
 8006098:	4c0a      	ldr	r4, [pc, #40]	; (80060c4 <__libc_init_array+0x44>)
 800609a:	1b64      	subs	r4, r4, r5
 800609c:	10a4      	asrs	r4, r4, #2
 800609e:	42a6      	cmp	r6, r4
 80060a0:	d105      	bne.n	80060ae <__libc_init_array+0x2e>
 80060a2:	bd70      	pop	{r4, r5, r6, pc}
 80060a4:	00b3      	lsls	r3, r6, #2
 80060a6:	58eb      	ldr	r3, [r5, r3]
 80060a8:	4798      	blx	r3
 80060aa:	3601      	adds	r6, #1
 80060ac:	e7ee      	b.n	800608c <__libc_init_array+0xc>
 80060ae:	00b3      	lsls	r3, r6, #2
 80060b0:	58eb      	ldr	r3, [r5, r3]
 80060b2:	4798      	blx	r3
 80060b4:	3601      	adds	r6, #1
 80060b6:	e7f2      	b.n	800609e <__libc_init_array+0x1e>
 80060b8:	0800aab8 	.word	0x0800aab8
 80060bc:	0800aab8 	.word	0x0800aab8
 80060c0:	0800aab8 	.word	0x0800aab8
 80060c4:	0800aabc 	.word	0x0800aabc

080060c8 <memcpy>:
 80060c8:	2300      	movs	r3, #0
 80060ca:	b510      	push	{r4, lr}
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d100      	bne.n	80060d2 <memcpy+0xa>
 80060d0:	bd10      	pop	{r4, pc}
 80060d2:	5ccc      	ldrb	r4, [r1, r3]
 80060d4:	54c4      	strb	r4, [r0, r3]
 80060d6:	3301      	adds	r3, #1
 80060d8:	e7f8      	b.n	80060cc <memcpy+0x4>

080060da <memset>:
 80060da:	0003      	movs	r3, r0
 80060dc:	1812      	adds	r2, r2, r0
 80060de:	4293      	cmp	r3, r2
 80060e0:	d100      	bne.n	80060e4 <memset+0xa>
 80060e2:	4770      	bx	lr
 80060e4:	7019      	strb	r1, [r3, #0]
 80060e6:	3301      	adds	r3, #1
 80060e8:	e7f9      	b.n	80060de <memset+0x4>

080060ea <__cvt>:
 80060ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ec:	b08b      	sub	sp, #44	; 0x2c
 80060ee:	0014      	movs	r4, r2
 80060f0:	1e1d      	subs	r5, r3, #0
 80060f2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80060f4:	da53      	bge.n	800619e <__cvt+0xb4>
 80060f6:	2480      	movs	r4, #128	; 0x80
 80060f8:	0624      	lsls	r4, r4, #24
 80060fa:	191b      	adds	r3, r3, r4
 80060fc:	001d      	movs	r5, r3
 80060fe:	0014      	movs	r4, r2
 8006100:	232d      	movs	r3, #45	; 0x2d
 8006102:	700b      	strb	r3, [r1, #0]
 8006104:	2320      	movs	r3, #32
 8006106:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8006108:	2203      	movs	r2, #3
 800610a:	439e      	bics	r6, r3
 800610c:	2e46      	cmp	r6, #70	; 0x46
 800610e:	d007      	beq.n	8006120 <__cvt+0x36>
 8006110:	0033      	movs	r3, r6
 8006112:	3b45      	subs	r3, #69	; 0x45
 8006114:	4259      	negs	r1, r3
 8006116:	414b      	adcs	r3, r1
 8006118:	9910      	ldr	r1, [sp, #64]	; 0x40
 800611a:	3a01      	subs	r2, #1
 800611c:	18cb      	adds	r3, r1, r3
 800611e:	9310      	str	r3, [sp, #64]	; 0x40
 8006120:	ab09      	add	r3, sp, #36	; 0x24
 8006122:	9304      	str	r3, [sp, #16]
 8006124:	ab08      	add	r3, sp, #32
 8006126:	9303      	str	r3, [sp, #12]
 8006128:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800612a:	9200      	str	r2, [sp, #0]
 800612c:	9302      	str	r3, [sp, #8]
 800612e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006130:	0022      	movs	r2, r4
 8006132:	9301      	str	r3, [sp, #4]
 8006134:	002b      	movs	r3, r5
 8006136:	f001 fdd9 	bl	8007cec <_dtoa_r>
 800613a:	0007      	movs	r7, r0
 800613c:	2e47      	cmp	r6, #71	; 0x47
 800613e:	d102      	bne.n	8006146 <__cvt+0x5c>
 8006140:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006142:	07db      	lsls	r3, r3, #31
 8006144:	d524      	bpl.n	8006190 <__cvt+0xa6>
 8006146:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006148:	18fb      	adds	r3, r7, r3
 800614a:	9307      	str	r3, [sp, #28]
 800614c:	2e46      	cmp	r6, #70	; 0x46
 800614e:	d114      	bne.n	800617a <__cvt+0x90>
 8006150:	783b      	ldrb	r3, [r7, #0]
 8006152:	2b30      	cmp	r3, #48	; 0x30
 8006154:	d10c      	bne.n	8006170 <__cvt+0x86>
 8006156:	2200      	movs	r2, #0
 8006158:	2300      	movs	r3, #0
 800615a:	0020      	movs	r0, r4
 800615c:	0029      	movs	r1, r5
 800615e:	f7fa f969 	bl	8000434 <__aeabi_dcmpeq>
 8006162:	2800      	cmp	r0, #0
 8006164:	d104      	bne.n	8006170 <__cvt+0x86>
 8006166:	2301      	movs	r3, #1
 8006168:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800616a:	1a9b      	subs	r3, r3, r2
 800616c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006172:	9a07      	ldr	r2, [sp, #28]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	18d3      	adds	r3, r2, r3
 8006178:	9307      	str	r3, [sp, #28]
 800617a:	2200      	movs	r2, #0
 800617c:	2300      	movs	r3, #0
 800617e:	0020      	movs	r0, r4
 8006180:	0029      	movs	r1, r5
 8006182:	f7fa f957 	bl	8000434 <__aeabi_dcmpeq>
 8006186:	2230      	movs	r2, #48	; 0x30
 8006188:	2800      	cmp	r0, #0
 800618a:	d00d      	beq.n	80061a8 <__cvt+0xbe>
 800618c:	9b07      	ldr	r3, [sp, #28]
 800618e:	9309      	str	r3, [sp, #36]	; 0x24
 8006190:	0038      	movs	r0, r7
 8006192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006194:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006196:	1bdb      	subs	r3, r3, r7
 8006198:	6013      	str	r3, [r2, #0]
 800619a:	b00b      	add	sp, #44	; 0x2c
 800619c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800619e:	2300      	movs	r3, #0
 80061a0:	e7af      	b.n	8006102 <__cvt+0x18>
 80061a2:	1c59      	adds	r1, r3, #1
 80061a4:	9109      	str	r1, [sp, #36]	; 0x24
 80061a6:	701a      	strb	r2, [r3, #0]
 80061a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061aa:	9907      	ldr	r1, [sp, #28]
 80061ac:	428b      	cmp	r3, r1
 80061ae:	d3f8      	bcc.n	80061a2 <__cvt+0xb8>
 80061b0:	e7ee      	b.n	8006190 <__cvt+0xa6>

080061b2 <__exponent>:
 80061b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061b4:	1c83      	adds	r3, r0, #2
 80061b6:	b085      	sub	sp, #20
 80061b8:	9301      	str	r3, [sp, #4]
 80061ba:	0006      	movs	r6, r0
 80061bc:	000c      	movs	r4, r1
 80061be:	7002      	strb	r2, [r0, #0]
 80061c0:	232b      	movs	r3, #43	; 0x2b
 80061c2:	2900      	cmp	r1, #0
 80061c4:	da01      	bge.n	80061ca <__exponent+0x18>
 80061c6:	232d      	movs	r3, #45	; 0x2d
 80061c8:	424c      	negs	r4, r1
 80061ca:	7073      	strb	r3, [r6, #1]
 80061cc:	2c09      	cmp	r4, #9
 80061ce:	dd22      	ble.n	8006216 <__exponent+0x64>
 80061d0:	ab02      	add	r3, sp, #8
 80061d2:	1ddd      	adds	r5, r3, #7
 80061d4:	0020      	movs	r0, r4
 80061d6:	210a      	movs	r1, #10
 80061d8:	f7fa f916 	bl	8000408 <__aeabi_idivmod>
 80061dc:	1e6f      	subs	r7, r5, #1
 80061de:	3130      	adds	r1, #48	; 0x30
 80061e0:	7039      	strb	r1, [r7, #0]
 80061e2:	0020      	movs	r0, r4
 80061e4:	210a      	movs	r1, #10
 80061e6:	f7fa f829 	bl	800023c <__divsi3>
 80061ea:	0004      	movs	r4, r0
 80061ec:	2809      	cmp	r0, #9
 80061ee:	dc0b      	bgt.n	8006208 <__exponent+0x56>
 80061f0:	3d02      	subs	r5, #2
 80061f2:	3430      	adds	r4, #48	; 0x30
 80061f4:	9b01      	ldr	r3, [sp, #4]
 80061f6:	702c      	strb	r4, [r5, #0]
 80061f8:	aa02      	add	r2, sp, #8
 80061fa:	3207      	adds	r2, #7
 80061fc:	0018      	movs	r0, r3
 80061fe:	42aa      	cmp	r2, r5
 8006200:	d804      	bhi.n	800620c <__exponent+0x5a>
 8006202:	1b80      	subs	r0, r0, r6
 8006204:	b005      	add	sp, #20
 8006206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006208:	003d      	movs	r5, r7
 800620a:	e7e3      	b.n	80061d4 <__exponent+0x22>
 800620c:	782a      	ldrb	r2, [r5, #0]
 800620e:	3501      	adds	r5, #1
 8006210:	701a      	strb	r2, [r3, #0]
 8006212:	3301      	adds	r3, #1
 8006214:	e7f0      	b.n	80061f8 <__exponent+0x46>
 8006216:	2330      	movs	r3, #48	; 0x30
 8006218:	18e4      	adds	r4, r4, r3
 800621a:	70b3      	strb	r3, [r6, #2]
 800621c:	1d30      	adds	r0, r6, #4
 800621e:	70f4      	strb	r4, [r6, #3]
 8006220:	e7ef      	b.n	8006202 <__exponent+0x50>
	...

08006224 <_printf_float>:
 8006224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006226:	b095      	sub	sp, #84	; 0x54
 8006228:	000c      	movs	r4, r1
 800622a:	920a      	str	r2, [sp, #40]	; 0x28
 800622c:	930b      	str	r3, [sp, #44]	; 0x2c
 800622e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006230:	9009      	str	r0, [sp, #36]	; 0x24
 8006232:	f002 ff47 	bl	80090c4 <_localeconv_r>
 8006236:	6803      	ldr	r3, [r0, #0]
 8006238:	0018      	movs	r0, r3
 800623a:	930c      	str	r3, [sp, #48]	; 0x30
 800623c:	f7f9 ff62 	bl	8000104 <strlen>
 8006240:	2300      	movs	r3, #0
 8006242:	9312      	str	r3, [sp, #72]	; 0x48
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	900e      	str	r0, [sp, #56]	; 0x38
 8006248:	930d      	str	r3, [sp, #52]	; 0x34
 800624a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800624c:	7e27      	ldrb	r7, [r4, #24]
 800624e:	682b      	ldr	r3, [r5, #0]
 8006250:	2207      	movs	r2, #7
 8006252:	05c9      	lsls	r1, r1, #23
 8006254:	d545      	bpl.n	80062e2 <_printf_float+0xbe>
 8006256:	189b      	adds	r3, r3, r2
 8006258:	4393      	bics	r3, r2
 800625a:	001a      	movs	r2, r3
 800625c:	3208      	adds	r2, #8
 800625e:	602a      	str	r2, [r5, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	64a2      	str	r2, [r4, #72]	; 0x48
 8006266:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006268:	2201      	movs	r2, #1
 800626a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800626c:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 800626e:	006b      	lsls	r3, r5, #1
 8006270:	085b      	lsrs	r3, r3, #1
 8006272:	930f      	str	r3, [sp, #60]	; 0x3c
 8006274:	4252      	negs	r2, r2
 8006276:	4bac      	ldr	r3, [pc, #688]	; (8006528 <_printf_float+0x304>)
 8006278:	0030      	movs	r0, r6
 800627a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800627c:	f7fb ff62 	bl	8002144 <__aeabi_dcmpun>
 8006280:	2800      	cmp	r0, #0
 8006282:	d130      	bne.n	80062e6 <_printf_float+0xc2>
 8006284:	2201      	movs	r2, #1
 8006286:	4ba8      	ldr	r3, [pc, #672]	; (8006528 <_printf_float+0x304>)
 8006288:	4252      	negs	r2, r2
 800628a:	0030      	movs	r0, r6
 800628c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800628e:	f7fa f8e1 	bl	8000454 <__aeabi_dcmple>
 8006292:	2800      	cmp	r0, #0
 8006294:	d127      	bne.n	80062e6 <_printf_float+0xc2>
 8006296:	2200      	movs	r2, #0
 8006298:	2300      	movs	r3, #0
 800629a:	0030      	movs	r0, r6
 800629c:	0029      	movs	r1, r5
 800629e:	f7fa f8cf 	bl	8000440 <__aeabi_dcmplt>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d003      	beq.n	80062ae <_printf_float+0x8a>
 80062a6:	0023      	movs	r3, r4
 80062a8:	222d      	movs	r2, #45	; 0x2d
 80062aa:	3343      	adds	r3, #67	; 0x43
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	4d9f      	ldr	r5, [pc, #636]	; (800652c <_printf_float+0x308>)
 80062b0:	2f47      	cmp	r7, #71	; 0x47
 80062b2:	d800      	bhi.n	80062b6 <_printf_float+0x92>
 80062b4:	4d9e      	ldr	r5, [pc, #632]	; (8006530 <_printf_float+0x30c>)
 80062b6:	2303      	movs	r3, #3
 80062b8:	2600      	movs	r6, #0
 80062ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80062bc:	6123      	str	r3, [r4, #16]
 80062be:	3301      	adds	r3, #1
 80062c0:	439a      	bics	r2, r3
 80062c2:	6022      	str	r2, [r4, #0]
 80062c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062c6:	aa13      	add	r2, sp, #76	; 0x4c
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	0021      	movs	r1, r4
 80062cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062d0:	f000 f9f4 	bl	80066bc <_printf_common>
 80062d4:	1c43      	adds	r3, r0, #1
 80062d6:	d000      	beq.n	80062da <_printf_float+0xb6>
 80062d8:	e093      	b.n	8006402 <_printf_float+0x1de>
 80062da:	2001      	movs	r0, #1
 80062dc:	4240      	negs	r0, r0
 80062de:	b015      	add	sp, #84	; 0x54
 80062e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062e2:	3307      	adds	r3, #7
 80062e4:	e7b8      	b.n	8006258 <_printf_float+0x34>
 80062e6:	0032      	movs	r2, r6
 80062e8:	002b      	movs	r3, r5
 80062ea:	0030      	movs	r0, r6
 80062ec:	0029      	movs	r1, r5
 80062ee:	f7fb ff29 	bl	8002144 <__aeabi_dcmpun>
 80062f2:	2800      	cmp	r0, #0
 80062f4:	d004      	beq.n	8006300 <_printf_float+0xdc>
 80062f6:	4d8f      	ldr	r5, [pc, #572]	; (8006534 <_printf_float+0x310>)
 80062f8:	2f47      	cmp	r7, #71	; 0x47
 80062fa:	d8dc      	bhi.n	80062b6 <_printf_float+0x92>
 80062fc:	4d8e      	ldr	r5, [pc, #568]	; (8006538 <_printf_float+0x314>)
 80062fe:	e7da      	b.n	80062b6 <_printf_float+0x92>
 8006300:	2380      	movs	r3, #128	; 0x80
 8006302:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006304:	6862      	ldr	r2, [r4, #4]
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	430b      	orrs	r3, r1
 800630a:	1c51      	adds	r1, r2, #1
 800630c:	d143      	bne.n	8006396 <_printf_float+0x172>
 800630e:	3207      	adds	r2, #7
 8006310:	6062      	str	r2, [r4, #4]
 8006312:	aa12      	add	r2, sp, #72	; 0x48
 8006314:	2100      	movs	r1, #0
 8006316:	9205      	str	r2, [sp, #20]
 8006318:	aa11      	add	r2, sp, #68	; 0x44
 800631a:	9203      	str	r2, [sp, #12]
 800631c:	2223      	movs	r2, #35	; 0x23
 800631e:	6023      	str	r3, [r4, #0]
 8006320:	9106      	str	r1, [sp, #24]
 8006322:	9301      	str	r3, [sp, #4]
 8006324:	a908      	add	r1, sp, #32
 8006326:	6863      	ldr	r3, [r4, #4]
 8006328:	1852      	adds	r2, r2, r1
 800632a:	9202      	str	r2, [sp, #8]
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	0032      	movs	r2, r6
 8006330:	002b      	movs	r3, r5
 8006332:	9704      	str	r7, [sp, #16]
 8006334:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006336:	f7ff fed8 	bl	80060ea <__cvt>
 800633a:	2320      	movs	r3, #32
 800633c:	003a      	movs	r2, r7
 800633e:	0005      	movs	r5, r0
 8006340:	439a      	bics	r2, r3
 8006342:	2a47      	cmp	r2, #71	; 0x47
 8006344:	d107      	bne.n	8006356 <_printf_float+0x132>
 8006346:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006348:	1cda      	adds	r2, r3, #3
 800634a:	db02      	blt.n	8006352 <_printf_float+0x12e>
 800634c:	6862      	ldr	r2, [r4, #4]
 800634e:	4293      	cmp	r3, r2
 8006350:	dd45      	ble.n	80063de <_printf_float+0x1ba>
 8006352:	3f02      	subs	r7, #2
 8006354:	b2ff      	uxtb	r7, r7
 8006356:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006358:	2f65      	cmp	r7, #101	; 0x65
 800635a:	d825      	bhi.n	80063a8 <_printf_float+0x184>
 800635c:	0020      	movs	r0, r4
 800635e:	3901      	subs	r1, #1
 8006360:	003a      	movs	r2, r7
 8006362:	3050      	adds	r0, #80	; 0x50
 8006364:	9111      	str	r1, [sp, #68]	; 0x44
 8006366:	f7ff ff24 	bl	80061b2 <__exponent>
 800636a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800636c:	0006      	movs	r6, r0
 800636e:	1813      	adds	r3, r2, r0
 8006370:	6123      	str	r3, [r4, #16]
 8006372:	2a01      	cmp	r2, #1
 8006374:	dc02      	bgt.n	800637c <_printf_float+0x158>
 8006376:	6822      	ldr	r2, [r4, #0]
 8006378:	07d2      	lsls	r2, r2, #31
 800637a:	d501      	bpl.n	8006380 <_printf_float+0x15c>
 800637c:	3301      	adds	r3, #1
 800637e:	6123      	str	r3, [r4, #16]
 8006380:	2323      	movs	r3, #35	; 0x23
 8006382:	aa08      	add	r2, sp, #32
 8006384:	189b      	adds	r3, r3, r2
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d09b      	beq.n	80062c4 <_printf_float+0xa0>
 800638c:	0023      	movs	r3, r4
 800638e:	222d      	movs	r2, #45	; 0x2d
 8006390:	3343      	adds	r3, #67	; 0x43
 8006392:	701a      	strb	r2, [r3, #0]
 8006394:	e796      	b.n	80062c4 <_printf_float+0xa0>
 8006396:	2f67      	cmp	r7, #103	; 0x67
 8006398:	d100      	bne.n	800639c <_printf_float+0x178>
 800639a:	e176      	b.n	800668a <_printf_float+0x466>
 800639c:	2f47      	cmp	r7, #71	; 0x47
 800639e:	d1b8      	bne.n	8006312 <_printf_float+0xee>
 80063a0:	2a00      	cmp	r2, #0
 80063a2:	d1b6      	bne.n	8006312 <_printf_float+0xee>
 80063a4:	2201      	movs	r2, #1
 80063a6:	e7b3      	b.n	8006310 <_printf_float+0xec>
 80063a8:	2f66      	cmp	r7, #102	; 0x66
 80063aa:	d119      	bne.n	80063e0 <_printf_float+0x1bc>
 80063ac:	6863      	ldr	r3, [r4, #4]
 80063ae:	2900      	cmp	r1, #0
 80063b0:	dd0c      	ble.n	80063cc <_printf_float+0x1a8>
 80063b2:	6121      	str	r1, [r4, #16]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d102      	bne.n	80063be <_printf_float+0x19a>
 80063b8:	6822      	ldr	r2, [r4, #0]
 80063ba:	07d2      	lsls	r2, r2, #31
 80063bc:	d502      	bpl.n	80063c4 <_printf_float+0x1a0>
 80063be:	3301      	adds	r3, #1
 80063c0:	185b      	adds	r3, r3, r1
 80063c2:	6123      	str	r3, [r4, #16]
 80063c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063c6:	2600      	movs	r6, #0
 80063c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80063ca:	e7d9      	b.n	8006380 <_printf_float+0x15c>
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d103      	bne.n	80063d8 <_printf_float+0x1b4>
 80063d0:	2201      	movs	r2, #1
 80063d2:	6821      	ldr	r1, [r4, #0]
 80063d4:	4211      	tst	r1, r2
 80063d6:	d000      	beq.n	80063da <_printf_float+0x1b6>
 80063d8:	1c9a      	adds	r2, r3, #2
 80063da:	6122      	str	r2, [r4, #16]
 80063dc:	e7f2      	b.n	80063c4 <_printf_float+0x1a0>
 80063de:	2767      	movs	r7, #103	; 0x67
 80063e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80063e4:	4293      	cmp	r3, r2
 80063e6:	db05      	blt.n	80063f4 <_printf_float+0x1d0>
 80063e8:	6822      	ldr	r2, [r4, #0]
 80063ea:	6123      	str	r3, [r4, #16]
 80063ec:	07d2      	lsls	r2, r2, #31
 80063ee:	d5e9      	bpl.n	80063c4 <_printf_float+0x1a0>
 80063f0:	3301      	adds	r3, #1
 80063f2:	e7e6      	b.n	80063c2 <_printf_float+0x19e>
 80063f4:	2101      	movs	r1, #1
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	dc01      	bgt.n	80063fe <_printf_float+0x1da>
 80063fa:	1849      	adds	r1, r1, r1
 80063fc:	1ac9      	subs	r1, r1, r3
 80063fe:	1852      	adds	r2, r2, r1
 8006400:	e7eb      	b.n	80063da <_printf_float+0x1b6>
 8006402:	6822      	ldr	r2, [r4, #0]
 8006404:	0553      	lsls	r3, r2, #21
 8006406:	d408      	bmi.n	800641a <_printf_float+0x1f6>
 8006408:	6923      	ldr	r3, [r4, #16]
 800640a:	002a      	movs	r2, r5
 800640c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800640e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006410:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006412:	47a8      	blx	r5
 8006414:	1c43      	adds	r3, r0, #1
 8006416:	d129      	bne.n	800646c <_printf_float+0x248>
 8006418:	e75f      	b.n	80062da <_printf_float+0xb6>
 800641a:	2f65      	cmp	r7, #101	; 0x65
 800641c:	d800      	bhi.n	8006420 <_printf_float+0x1fc>
 800641e:	e0e0      	b.n	80065e2 <_printf_float+0x3be>
 8006420:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006422:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006424:	2200      	movs	r2, #0
 8006426:	2300      	movs	r3, #0
 8006428:	f7fa f804 	bl	8000434 <__aeabi_dcmpeq>
 800642c:	2800      	cmp	r0, #0
 800642e:	d034      	beq.n	800649a <_printf_float+0x276>
 8006430:	2301      	movs	r3, #1
 8006432:	4a42      	ldr	r2, [pc, #264]	; (800653c <_printf_float+0x318>)
 8006434:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006436:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006438:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800643a:	47a8      	blx	r5
 800643c:	1c43      	adds	r3, r0, #1
 800643e:	d100      	bne.n	8006442 <_printf_float+0x21e>
 8006440:	e74b      	b.n	80062da <_printf_float+0xb6>
 8006442:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006444:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006446:	4293      	cmp	r3, r2
 8006448:	db02      	blt.n	8006450 <_printf_float+0x22c>
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	07db      	lsls	r3, r3, #31
 800644e:	d50d      	bpl.n	800646c <_printf_float+0x248>
 8006450:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006452:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006454:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006456:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006458:	9809      	ldr	r0, [sp, #36]	; 0x24
 800645a:	47a8      	blx	r5
 800645c:	2500      	movs	r5, #0
 800645e:	1c43      	adds	r3, r0, #1
 8006460:	d100      	bne.n	8006464 <_printf_float+0x240>
 8006462:	e73a      	b.n	80062da <_printf_float+0xb6>
 8006464:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006466:	3b01      	subs	r3, #1
 8006468:	42ab      	cmp	r3, r5
 800646a:	dc0a      	bgt.n	8006482 <_printf_float+0x25e>
 800646c:	6823      	ldr	r3, [r4, #0]
 800646e:	079b      	lsls	r3, r3, #30
 8006470:	d500      	bpl.n	8006474 <_printf_float+0x250>
 8006472:	e108      	b.n	8006686 <_printf_float+0x462>
 8006474:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006476:	68e0      	ldr	r0, [r4, #12]
 8006478:	4298      	cmp	r0, r3
 800647a:	db00      	blt.n	800647e <_printf_float+0x25a>
 800647c:	e72f      	b.n	80062de <_printf_float+0xba>
 800647e:	0018      	movs	r0, r3
 8006480:	e72d      	b.n	80062de <_printf_float+0xba>
 8006482:	0022      	movs	r2, r4
 8006484:	2301      	movs	r3, #1
 8006486:	321a      	adds	r2, #26
 8006488:	990a      	ldr	r1, [sp, #40]	; 0x28
 800648a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800648c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800648e:	47b0      	blx	r6
 8006490:	1c43      	adds	r3, r0, #1
 8006492:	d100      	bne.n	8006496 <_printf_float+0x272>
 8006494:	e721      	b.n	80062da <_printf_float+0xb6>
 8006496:	3501      	adds	r5, #1
 8006498:	e7e4      	b.n	8006464 <_printf_float+0x240>
 800649a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800649c:	2b00      	cmp	r3, #0
 800649e:	dc2d      	bgt.n	80064fc <_printf_float+0x2d8>
 80064a0:	2301      	movs	r3, #1
 80064a2:	4a26      	ldr	r2, [pc, #152]	; (800653c <_printf_float+0x318>)
 80064a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80064a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064a8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80064aa:	47b0      	blx	r6
 80064ac:	1c43      	adds	r3, r0, #1
 80064ae:	d100      	bne.n	80064b2 <_printf_float+0x28e>
 80064b0:	e713      	b.n	80062da <_printf_float+0xb6>
 80064b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d105      	bne.n	80064c4 <_printf_float+0x2a0>
 80064b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d102      	bne.n	80064c4 <_printf_float+0x2a0>
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	07db      	lsls	r3, r3, #31
 80064c2:	d5d3      	bpl.n	800646c <_printf_float+0x248>
 80064c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80064c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064ca:	990a      	ldr	r1, [sp, #40]	; 0x28
 80064cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064ce:	47b0      	blx	r6
 80064d0:	2600      	movs	r6, #0
 80064d2:	1c43      	adds	r3, r0, #1
 80064d4:	d100      	bne.n	80064d8 <_printf_float+0x2b4>
 80064d6:	e700      	b.n	80062da <_printf_float+0xb6>
 80064d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064da:	425b      	negs	r3, r3
 80064dc:	42b3      	cmp	r3, r6
 80064de:	dc01      	bgt.n	80064e4 <_printf_float+0x2c0>
 80064e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064e2:	e792      	b.n	800640a <_printf_float+0x1e6>
 80064e4:	0022      	movs	r2, r4
 80064e6:	2301      	movs	r3, #1
 80064e8:	321a      	adds	r2, #26
 80064ea:	990a      	ldr	r1, [sp, #40]	; 0x28
 80064ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064ee:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80064f0:	47b8      	blx	r7
 80064f2:	1c43      	adds	r3, r0, #1
 80064f4:	d100      	bne.n	80064f8 <_printf_float+0x2d4>
 80064f6:	e6f0      	b.n	80062da <_printf_float+0xb6>
 80064f8:	3601      	adds	r6, #1
 80064fa:	e7ed      	b.n	80064d8 <_printf_float+0x2b4>
 80064fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064fe:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8006500:	429f      	cmp	r7, r3
 8006502:	dd00      	ble.n	8006506 <_printf_float+0x2e2>
 8006504:	001f      	movs	r7, r3
 8006506:	2f00      	cmp	r7, #0
 8006508:	dd08      	ble.n	800651c <_printf_float+0x2f8>
 800650a:	003b      	movs	r3, r7
 800650c:	002a      	movs	r2, r5
 800650e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006510:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006512:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006514:	47b0      	blx	r6
 8006516:	1c43      	adds	r3, r0, #1
 8006518:	d100      	bne.n	800651c <_printf_float+0x2f8>
 800651a:	e6de      	b.n	80062da <_printf_float+0xb6>
 800651c:	2300      	movs	r3, #0
 800651e:	930d      	str	r3, [sp, #52]	; 0x34
 8006520:	43fb      	mvns	r3, r7
 8006522:	17db      	asrs	r3, r3, #31
 8006524:	930f      	str	r3, [sp, #60]	; 0x3c
 8006526:	e018      	b.n	800655a <_printf_float+0x336>
 8006528:	7fefffff 	.word	0x7fefffff
 800652c:	0800a7a0 	.word	0x0800a7a0
 8006530:	0800a79c 	.word	0x0800a79c
 8006534:	0800a7a8 	.word	0x0800a7a8
 8006538:	0800a7a4 	.word	0x0800a7a4
 800653c:	0800a7ac 	.word	0x0800a7ac
 8006540:	0022      	movs	r2, r4
 8006542:	2301      	movs	r3, #1
 8006544:	321a      	adds	r2, #26
 8006546:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006548:	9809      	ldr	r0, [sp, #36]	; 0x24
 800654a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800654c:	47b0      	blx	r6
 800654e:	1c43      	adds	r3, r0, #1
 8006550:	d100      	bne.n	8006554 <_printf_float+0x330>
 8006552:	e6c2      	b.n	80062da <_printf_float+0xb6>
 8006554:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006556:	3301      	adds	r3, #1
 8006558:	930d      	str	r3, [sp, #52]	; 0x34
 800655a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800655c:	6da6      	ldr	r6, [r4, #88]	; 0x58
 800655e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006560:	403b      	ands	r3, r7
 8006562:	1af3      	subs	r3, r6, r3
 8006564:	4293      	cmp	r3, r2
 8006566:	dceb      	bgt.n	8006540 <_printf_float+0x31c>
 8006568:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800656a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800656c:	19ad      	adds	r5, r5, r6
 800656e:	4293      	cmp	r3, r2
 8006570:	db10      	blt.n	8006594 <_printf_float+0x370>
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	07db      	lsls	r3, r3, #31
 8006576:	d40d      	bmi.n	8006594 <_printf_float+0x370>
 8006578:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800657a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800657c:	1bbe      	subs	r6, r7, r6
 800657e:	1aff      	subs	r7, r7, r3
 8006580:	42b7      	cmp	r7, r6
 8006582:	dd00      	ble.n	8006586 <_printf_float+0x362>
 8006584:	0037      	movs	r7, r6
 8006586:	2f00      	cmp	r7, #0
 8006588:	dc0d      	bgt.n	80065a6 <_printf_float+0x382>
 800658a:	43fe      	mvns	r6, r7
 800658c:	17f3      	asrs	r3, r6, #31
 800658e:	2500      	movs	r5, #0
 8006590:	930c      	str	r3, [sp, #48]	; 0x30
 8006592:	e01c      	b.n	80065ce <_printf_float+0x3aa>
 8006594:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006596:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006598:	990a      	ldr	r1, [sp, #40]	; 0x28
 800659a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800659c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800659e:	47b8      	blx	r7
 80065a0:	1c43      	adds	r3, r0, #1
 80065a2:	d1e9      	bne.n	8006578 <_printf_float+0x354>
 80065a4:	e699      	b.n	80062da <_printf_float+0xb6>
 80065a6:	003b      	movs	r3, r7
 80065a8:	002a      	movs	r2, r5
 80065aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80065ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065ae:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80065b0:	47a8      	blx	r5
 80065b2:	1c43      	adds	r3, r0, #1
 80065b4:	d1e9      	bne.n	800658a <_printf_float+0x366>
 80065b6:	e690      	b.n	80062da <_printf_float+0xb6>
 80065b8:	0022      	movs	r2, r4
 80065ba:	2301      	movs	r3, #1
 80065bc:	321a      	adds	r2, #26
 80065be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80065c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065c2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80065c4:	47b0      	blx	r6
 80065c6:	1c43      	adds	r3, r0, #1
 80065c8:	d100      	bne.n	80065cc <_printf_float+0x3a8>
 80065ca:	e686      	b.n	80062da <_printf_float+0xb6>
 80065cc:	3501      	adds	r5, #1
 80065ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80065d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80065d4:	1a9b      	subs	r3, r3, r2
 80065d6:	003a      	movs	r2, r7
 80065d8:	400a      	ands	r2, r1
 80065da:	1a9b      	subs	r3, r3, r2
 80065dc:	42ab      	cmp	r3, r5
 80065de:	dceb      	bgt.n	80065b8 <_printf_float+0x394>
 80065e0:	e744      	b.n	800646c <_printf_float+0x248>
 80065e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	dc02      	bgt.n	80065ee <_printf_float+0x3ca>
 80065e8:	2301      	movs	r3, #1
 80065ea:	421a      	tst	r2, r3
 80065ec:	d032      	beq.n	8006654 <_printf_float+0x430>
 80065ee:	2301      	movs	r3, #1
 80065f0:	002a      	movs	r2, r5
 80065f2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80065f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065f6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80065f8:	47b8      	blx	r7
 80065fa:	1c43      	adds	r3, r0, #1
 80065fc:	d100      	bne.n	8006600 <_printf_float+0x3dc>
 80065fe:	e66c      	b.n	80062da <_printf_float+0xb6>
 8006600:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006602:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006604:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006606:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006608:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800660a:	3501      	adds	r5, #1
 800660c:	47b8      	blx	r7
 800660e:	1c43      	adds	r3, r0, #1
 8006610:	d100      	bne.n	8006614 <_printf_float+0x3f0>
 8006612:	e662      	b.n	80062da <_printf_float+0xb6>
 8006614:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006616:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006618:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800661a:	2200      	movs	r2, #0
 800661c:	1e5f      	subs	r7, r3, #1
 800661e:	2300      	movs	r3, #0
 8006620:	f7f9 ff08 	bl	8000434 <__aeabi_dcmpeq>
 8006624:	003b      	movs	r3, r7
 8006626:	2800      	cmp	r0, #0
 8006628:	d014      	beq.n	8006654 <_printf_float+0x430>
 800662a:	2500      	movs	r5, #0
 800662c:	e00a      	b.n	8006644 <_printf_float+0x420>
 800662e:	0022      	movs	r2, r4
 8006630:	2301      	movs	r3, #1
 8006632:	321a      	adds	r2, #26
 8006634:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006636:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006638:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800663a:	47b8      	blx	r7
 800663c:	1c43      	adds	r3, r0, #1
 800663e:	d100      	bne.n	8006642 <_printf_float+0x41e>
 8006640:	e64b      	b.n	80062da <_printf_float+0xb6>
 8006642:	3501      	adds	r5, #1
 8006644:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006646:	3b01      	subs	r3, #1
 8006648:	42ab      	cmp	r3, r5
 800664a:	dcf0      	bgt.n	800662e <_printf_float+0x40a>
 800664c:	0022      	movs	r2, r4
 800664e:	0033      	movs	r3, r6
 8006650:	3250      	adds	r2, #80	; 0x50
 8006652:	e6db      	b.n	800640c <_printf_float+0x1e8>
 8006654:	002a      	movs	r2, r5
 8006656:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006658:	9809      	ldr	r0, [sp, #36]	; 0x24
 800665a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800665c:	47a8      	blx	r5
 800665e:	1c43      	adds	r3, r0, #1
 8006660:	d1f4      	bne.n	800664c <_printf_float+0x428>
 8006662:	e63a      	b.n	80062da <_printf_float+0xb6>
 8006664:	0022      	movs	r2, r4
 8006666:	2301      	movs	r3, #1
 8006668:	3219      	adds	r2, #25
 800666a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800666c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800666e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006670:	47b0      	blx	r6
 8006672:	1c43      	adds	r3, r0, #1
 8006674:	d100      	bne.n	8006678 <_printf_float+0x454>
 8006676:	e630      	b.n	80062da <_printf_float+0xb6>
 8006678:	3501      	adds	r5, #1
 800667a:	68e3      	ldr	r3, [r4, #12]
 800667c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800667e:	1a9b      	subs	r3, r3, r2
 8006680:	42ab      	cmp	r3, r5
 8006682:	dcef      	bgt.n	8006664 <_printf_float+0x440>
 8006684:	e6f6      	b.n	8006474 <_printf_float+0x250>
 8006686:	2500      	movs	r5, #0
 8006688:	e7f7      	b.n	800667a <_printf_float+0x456>
 800668a:	2a00      	cmp	r2, #0
 800668c:	d100      	bne.n	8006690 <_printf_float+0x46c>
 800668e:	e689      	b.n	80063a4 <_printf_float+0x180>
 8006690:	2100      	movs	r1, #0
 8006692:	9106      	str	r1, [sp, #24]
 8006694:	a912      	add	r1, sp, #72	; 0x48
 8006696:	9105      	str	r1, [sp, #20]
 8006698:	a911      	add	r1, sp, #68	; 0x44
 800669a:	9103      	str	r1, [sp, #12]
 800669c:	2123      	movs	r1, #35	; 0x23
 800669e:	a808      	add	r0, sp, #32
 80066a0:	1809      	adds	r1, r1, r0
 80066a2:	6023      	str	r3, [r4, #0]
 80066a4:	9301      	str	r3, [sp, #4]
 80066a6:	9200      	str	r2, [sp, #0]
 80066a8:	002b      	movs	r3, r5
 80066aa:	9704      	str	r7, [sp, #16]
 80066ac:	9102      	str	r1, [sp, #8]
 80066ae:	0032      	movs	r2, r6
 80066b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066b2:	f7ff fd1a 	bl	80060ea <__cvt>
 80066b6:	0005      	movs	r5, r0
 80066b8:	e645      	b.n	8006346 <_printf_float+0x122>
 80066ba:	46c0      	nop			; (mov r8, r8)

080066bc <_printf_common>:
 80066bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066be:	0015      	movs	r5, r2
 80066c0:	9301      	str	r3, [sp, #4]
 80066c2:	688a      	ldr	r2, [r1, #8]
 80066c4:	690b      	ldr	r3, [r1, #16]
 80066c6:	9000      	str	r0, [sp, #0]
 80066c8:	000c      	movs	r4, r1
 80066ca:	4293      	cmp	r3, r2
 80066cc:	da00      	bge.n	80066d0 <_printf_common+0x14>
 80066ce:	0013      	movs	r3, r2
 80066d0:	0022      	movs	r2, r4
 80066d2:	602b      	str	r3, [r5, #0]
 80066d4:	3243      	adds	r2, #67	; 0x43
 80066d6:	7812      	ldrb	r2, [r2, #0]
 80066d8:	2a00      	cmp	r2, #0
 80066da:	d001      	beq.n	80066e0 <_printf_common+0x24>
 80066dc:	3301      	adds	r3, #1
 80066de:	602b      	str	r3, [r5, #0]
 80066e0:	6823      	ldr	r3, [r4, #0]
 80066e2:	069b      	lsls	r3, r3, #26
 80066e4:	d502      	bpl.n	80066ec <_printf_common+0x30>
 80066e6:	682b      	ldr	r3, [r5, #0]
 80066e8:	3302      	adds	r3, #2
 80066ea:	602b      	str	r3, [r5, #0]
 80066ec:	2706      	movs	r7, #6
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	401f      	ands	r7, r3
 80066f2:	d027      	beq.n	8006744 <_printf_common+0x88>
 80066f4:	0023      	movs	r3, r4
 80066f6:	3343      	adds	r3, #67	; 0x43
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	1e5a      	subs	r2, r3, #1
 80066fc:	4193      	sbcs	r3, r2
 80066fe:	6822      	ldr	r2, [r4, #0]
 8006700:	0692      	lsls	r2, r2, #26
 8006702:	d430      	bmi.n	8006766 <_printf_common+0xaa>
 8006704:	0022      	movs	r2, r4
 8006706:	9901      	ldr	r1, [sp, #4]
 8006708:	3243      	adds	r2, #67	; 0x43
 800670a:	9800      	ldr	r0, [sp, #0]
 800670c:	9e08      	ldr	r6, [sp, #32]
 800670e:	47b0      	blx	r6
 8006710:	1c43      	adds	r3, r0, #1
 8006712:	d025      	beq.n	8006760 <_printf_common+0xa4>
 8006714:	2306      	movs	r3, #6
 8006716:	6820      	ldr	r0, [r4, #0]
 8006718:	682a      	ldr	r2, [r5, #0]
 800671a:	68e1      	ldr	r1, [r4, #12]
 800671c:	4003      	ands	r3, r0
 800671e:	2500      	movs	r5, #0
 8006720:	2b04      	cmp	r3, #4
 8006722:	d103      	bne.n	800672c <_printf_common+0x70>
 8006724:	1a8d      	subs	r5, r1, r2
 8006726:	43eb      	mvns	r3, r5
 8006728:	17db      	asrs	r3, r3, #31
 800672a:	401d      	ands	r5, r3
 800672c:	68a3      	ldr	r3, [r4, #8]
 800672e:	6922      	ldr	r2, [r4, #16]
 8006730:	4293      	cmp	r3, r2
 8006732:	dd01      	ble.n	8006738 <_printf_common+0x7c>
 8006734:	1a9b      	subs	r3, r3, r2
 8006736:	18ed      	adds	r5, r5, r3
 8006738:	2700      	movs	r7, #0
 800673a:	42bd      	cmp	r5, r7
 800673c:	d120      	bne.n	8006780 <_printf_common+0xc4>
 800673e:	2000      	movs	r0, #0
 8006740:	e010      	b.n	8006764 <_printf_common+0xa8>
 8006742:	3701      	adds	r7, #1
 8006744:	68e3      	ldr	r3, [r4, #12]
 8006746:	682a      	ldr	r2, [r5, #0]
 8006748:	1a9b      	subs	r3, r3, r2
 800674a:	42bb      	cmp	r3, r7
 800674c:	ddd2      	ble.n	80066f4 <_printf_common+0x38>
 800674e:	0022      	movs	r2, r4
 8006750:	2301      	movs	r3, #1
 8006752:	3219      	adds	r2, #25
 8006754:	9901      	ldr	r1, [sp, #4]
 8006756:	9800      	ldr	r0, [sp, #0]
 8006758:	9e08      	ldr	r6, [sp, #32]
 800675a:	47b0      	blx	r6
 800675c:	1c43      	adds	r3, r0, #1
 800675e:	d1f0      	bne.n	8006742 <_printf_common+0x86>
 8006760:	2001      	movs	r0, #1
 8006762:	4240      	negs	r0, r0
 8006764:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006766:	2030      	movs	r0, #48	; 0x30
 8006768:	18e1      	adds	r1, r4, r3
 800676a:	3143      	adds	r1, #67	; 0x43
 800676c:	7008      	strb	r0, [r1, #0]
 800676e:	0021      	movs	r1, r4
 8006770:	1c5a      	adds	r2, r3, #1
 8006772:	3145      	adds	r1, #69	; 0x45
 8006774:	7809      	ldrb	r1, [r1, #0]
 8006776:	18a2      	adds	r2, r4, r2
 8006778:	3243      	adds	r2, #67	; 0x43
 800677a:	3302      	adds	r3, #2
 800677c:	7011      	strb	r1, [r2, #0]
 800677e:	e7c1      	b.n	8006704 <_printf_common+0x48>
 8006780:	0022      	movs	r2, r4
 8006782:	2301      	movs	r3, #1
 8006784:	321a      	adds	r2, #26
 8006786:	9901      	ldr	r1, [sp, #4]
 8006788:	9800      	ldr	r0, [sp, #0]
 800678a:	9e08      	ldr	r6, [sp, #32]
 800678c:	47b0      	blx	r6
 800678e:	1c43      	adds	r3, r0, #1
 8006790:	d0e6      	beq.n	8006760 <_printf_common+0xa4>
 8006792:	3701      	adds	r7, #1
 8006794:	e7d1      	b.n	800673a <_printf_common+0x7e>
	...

08006798 <_printf_i>:
 8006798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800679a:	b089      	sub	sp, #36	; 0x24
 800679c:	9204      	str	r2, [sp, #16]
 800679e:	000a      	movs	r2, r1
 80067a0:	3243      	adds	r2, #67	; 0x43
 80067a2:	9305      	str	r3, [sp, #20]
 80067a4:	9003      	str	r0, [sp, #12]
 80067a6:	9202      	str	r2, [sp, #8]
 80067a8:	7e0a      	ldrb	r2, [r1, #24]
 80067aa:	000c      	movs	r4, r1
 80067ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067ae:	2a6e      	cmp	r2, #110	; 0x6e
 80067b0:	d100      	bne.n	80067b4 <_printf_i+0x1c>
 80067b2:	e086      	b.n	80068c2 <_printf_i+0x12a>
 80067b4:	d81f      	bhi.n	80067f6 <_printf_i+0x5e>
 80067b6:	2a63      	cmp	r2, #99	; 0x63
 80067b8:	d033      	beq.n	8006822 <_printf_i+0x8a>
 80067ba:	d808      	bhi.n	80067ce <_printf_i+0x36>
 80067bc:	2a00      	cmp	r2, #0
 80067be:	d100      	bne.n	80067c2 <_printf_i+0x2a>
 80067c0:	e08c      	b.n	80068dc <_printf_i+0x144>
 80067c2:	2a58      	cmp	r2, #88	; 0x58
 80067c4:	d04d      	beq.n	8006862 <_printf_i+0xca>
 80067c6:	0025      	movs	r5, r4
 80067c8:	3542      	adds	r5, #66	; 0x42
 80067ca:	702a      	strb	r2, [r5, #0]
 80067cc:	e030      	b.n	8006830 <_printf_i+0x98>
 80067ce:	2a64      	cmp	r2, #100	; 0x64
 80067d0:	d001      	beq.n	80067d6 <_printf_i+0x3e>
 80067d2:	2a69      	cmp	r2, #105	; 0x69
 80067d4:	d1f7      	bne.n	80067c6 <_printf_i+0x2e>
 80067d6:	6819      	ldr	r1, [r3, #0]
 80067d8:	6825      	ldr	r5, [r4, #0]
 80067da:	1d0a      	adds	r2, r1, #4
 80067dc:	0628      	lsls	r0, r5, #24
 80067de:	d529      	bpl.n	8006834 <_printf_i+0x9c>
 80067e0:	6808      	ldr	r0, [r1, #0]
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	2800      	cmp	r0, #0
 80067e6:	da03      	bge.n	80067f0 <_printf_i+0x58>
 80067e8:	232d      	movs	r3, #45	; 0x2d
 80067ea:	9a02      	ldr	r2, [sp, #8]
 80067ec:	4240      	negs	r0, r0
 80067ee:	7013      	strb	r3, [r2, #0]
 80067f0:	4e6b      	ldr	r6, [pc, #428]	; (80069a0 <_printf_i+0x208>)
 80067f2:	270a      	movs	r7, #10
 80067f4:	e04f      	b.n	8006896 <_printf_i+0xfe>
 80067f6:	2a73      	cmp	r2, #115	; 0x73
 80067f8:	d074      	beq.n	80068e4 <_printf_i+0x14c>
 80067fa:	d808      	bhi.n	800680e <_printf_i+0x76>
 80067fc:	2a6f      	cmp	r2, #111	; 0x6f
 80067fe:	d01f      	beq.n	8006840 <_printf_i+0xa8>
 8006800:	2a70      	cmp	r2, #112	; 0x70
 8006802:	d1e0      	bne.n	80067c6 <_printf_i+0x2e>
 8006804:	2220      	movs	r2, #32
 8006806:	6809      	ldr	r1, [r1, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	6022      	str	r2, [r4, #0]
 800680c:	e003      	b.n	8006816 <_printf_i+0x7e>
 800680e:	2a75      	cmp	r2, #117	; 0x75
 8006810:	d016      	beq.n	8006840 <_printf_i+0xa8>
 8006812:	2a78      	cmp	r2, #120	; 0x78
 8006814:	d1d7      	bne.n	80067c6 <_printf_i+0x2e>
 8006816:	0022      	movs	r2, r4
 8006818:	2178      	movs	r1, #120	; 0x78
 800681a:	3245      	adds	r2, #69	; 0x45
 800681c:	7011      	strb	r1, [r2, #0]
 800681e:	4e61      	ldr	r6, [pc, #388]	; (80069a4 <_printf_i+0x20c>)
 8006820:	e022      	b.n	8006868 <_printf_i+0xd0>
 8006822:	0025      	movs	r5, r4
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	3542      	adds	r5, #66	; 0x42
 8006828:	1d11      	adds	r1, r2, #4
 800682a:	6019      	str	r1, [r3, #0]
 800682c:	6813      	ldr	r3, [r2, #0]
 800682e:	702b      	strb	r3, [r5, #0]
 8006830:	2301      	movs	r3, #1
 8006832:	e065      	b.n	8006900 <_printf_i+0x168>
 8006834:	6808      	ldr	r0, [r1, #0]
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	0669      	lsls	r1, r5, #25
 800683a:	d5d3      	bpl.n	80067e4 <_printf_i+0x4c>
 800683c:	b200      	sxth	r0, r0
 800683e:	e7d1      	b.n	80067e4 <_printf_i+0x4c>
 8006840:	6819      	ldr	r1, [r3, #0]
 8006842:	6825      	ldr	r5, [r4, #0]
 8006844:	1d08      	adds	r0, r1, #4
 8006846:	6018      	str	r0, [r3, #0]
 8006848:	6808      	ldr	r0, [r1, #0]
 800684a:	062e      	lsls	r6, r5, #24
 800684c:	d505      	bpl.n	800685a <_printf_i+0xc2>
 800684e:	4e54      	ldr	r6, [pc, #336]	; (80069a0 <_printf_i+0x208>)
 8006850:	2708      	movs	r7, #8
 8006852:	2a6f      	cmp	r2, #111	; 0x6f
 8006854:	d01b      	beq.n	800688e <_printf_i+0xf6>
 8006856:	270a      	movs	r7, #10
 8006858:	e019      	b.n	800688e <_printf_i+0xf6>
 800685a:	066d      	lsls	r5, r5, #25
 800685c:	d5f7      	bpl.n	800684e <_printf_i+0xb6>
 800685e:	b280      	uxth	r0, r0
 8006860:	e7f5      	b.n	800684e <_printf_i+0xb6>
 8006862:	3145      	adds	r1, #69	; 0x45
 8006864:	4e4e      	ldr	r6, [pc, #312]	; (80069a0 <_printf_i+0x208>)
 8006866:	700a      	strb	r2, [r1, #0]
 8006868:	6818      	ldr	r0, [r3, #0]
 800686a:	6822      	ldr	r2, [r4, #0]
 800686c:	1d01      	adds	r1, r0, #4
 800686e:	6800      	ldr	r0, [r0, #0]
 8006870:	6019      	str	r1, [r3, #0]
 8006872:	0615      	lsls	r5, r2, #24
 8006874:	d521      	bpl.n	80068ba <_printf_i+0x122>
 8006876:	07d3      	lsls	r3, r2, #31
 8006878:	d502      	bpl.n	8006880 <_printf_i+0xe8>
 800687a:	2320      	movs	r3, #32
 800687c:	431a      	orrs	r2, r3
 800687e:	6022      	str	r2, [r4, #0]
 8006880:	2710      	movs	r7, #16
 8006882:	2800      	cmp	r0, #0
 8006884:	d103      	bne.n	800688e <_printf_i+0xf6>
 8006886:	2320      	movs	r3, #32
 8006888:	6822      	ldr	r2, [r4, #0]
 800688a:	439a      	bics	r2, r3
 800688c:	6022      	str	r2, [r4, #0]
 800688e:	0023      	movs	r3, r4
 8006890:	2200      	movs	r2, #0
 8006892:	3343      	adds	r3, #67	; 0x43
 8006894:	701a      	strb	r2, [r3, #0]
 8006896:	6863      	ldr	r3, [r4, #4]
 8006898:	60a3      	str	r3, [r4, #8]
 800689a:	2b00      	cmp	r3, #0
 800689c:	db58      	blt.n	8006950 <_printf_i+0x1b8>
 800689e:	2204      	movs	r2, #4
 80068a0:	6821      	ldr	r1, [r4, #0]
 80068a2:	4391      	bics	r1, r2
 80068a4:	6021      	str	r1, [r4, #0]
 80068a6:	2800      	cmp	r0, #0
 80068a8:	d154      	bne.n	8006954 <_printf_i+0x1bc>
 80068aa:	9d02      	ldr	r5, [sp, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d05a      	beq.n	8006966 <_printf_i+0x1ce>
 80068b0:	0025      	movs	r5, r4
 80068b2:	7833      	ldrb	r3, [r6, #0]
 80068b4:	3542      	adds	r5, #66	; 0x42
 80068b6:	702b      	strb	r3, [r5, #0]
 80068b8:	e055      	b.n	8006966 <_printf_i+0x1ce>
 80068ba:	0655      	lsls	r5, r2, #25
 80068bc:	d5db      	bpl.n	8006876 <_printf_i+0xde>
 80068be:	b280      	uxth	r0, r0
 80068c0:	e7d9      	b.n	8006876 <_printf_i+0xde>
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	680d      	ldr	r5, [r1, #0]
 80068c6:	1d10      	adds	r0, r2, #4
 80068c8:	6949      	ldr	r1, [r1, #20]
 80068ca:	6018      	str	r0, [r3, #0]
 80068cc:	6813      	ldr	r3, [r2, #0]
 80068ce:	062e      	lsls	r6, r5, #24
 80068d0:	d501      	bpl.n	80068d6 <_printf_i+0x13e>
 80068d2:	6019      	str	r1, [r3, #0]
 80068d4:	e002      	b.n	80068dc <_printf_i+0x144>
 80068d6:	066d      	lsls	r5, r5, #25
 80068d8:	d5fb      	bpl.n	80068d2 <_printf_i+0x13a>
 80068da:	8019      	strh	r1, [r3, #0]
 80068dc:	2300      	movs	r3, #0
 80068de:	9d02      	ldr	r5, [sp, #8]
 80068e0:	6123      	str	r3, [r4, #16]
 80068e2:	e04f      	b.n	8006984 <_printf_i+0x1ec>
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	1d11      	adds	r1, r2, #4
 80068e8:	6019      	str	r1, [r3, #0]
 80068ea:	6815      	ldr	r5, [r2, #0]
 80068ec:	2100      	movs	r1, #0
 80068ee:	6862      	ldr	r2, [r4, #4]
 80068f0:	0028      	movs	r0, r5
 80068f2:	f002 fc0f 	bl	8009114 <memchr>
 80068f6:	2800      	cmp	r0, #0
 80068f8:	d001      	beq.n	80068fe <_printf_i+0x166>
 80068fa:	1b40      	subs	r0, r0, r5
 80068fc:	6060      	str	r0, [r4, #4]
 80068fe:	6863      	ldr	r3, [r4, #4]
 8006900:	6123      	str	r3, [r4, #16]
 8006902:	2300      	movs	r3, #0
 8006904:	9a02      	ldr	r2, [sp, #8]
 8006906:	7013      	strb	r3, [r2, #0]
 8006908:	e03c      	b.n	8006984 <_printf_i+0x1ec>
 800690a:	6923      	ldr	r3, [r4, #16]
 800690c:	002a      	movs	r2, r5
 800690e:	9904      	ldr	r1, [sp, #16]
 8006910:	9803      	ldr	r0, [sp, #12]
 8006912:	9d05      	ldr	r5, [sp, #20]
 8006914:	47a8      	blx	r5
 8006916:	1c43      	adds	r3, r0, #1
 8006918:	d03e      	beq.n	8006998 <_printf_i+0x200>
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	079b      	lsls	r3, r3, #30
 800691e:	d415      	bmi.n	800694c <_printf_i+0x1b4>
 8006920:	9b07      	ldr	r3, [sp, #28]
 8006922:	68e0      	ldr	r0, [r4, #12]
 8006924:	4298      	cmp	r0, r3
 8006926:	da39      	bge.n	800699c <_printf_i+0x204>
 8006928:	0018      	movs	r0, r3
 800692a:	e037      	b.n	800699c <_printf_i+0x204>
 800692c:	0022      	movs	r2, r4
 800692e:	2301      	movs	r3, #1
 8006930:	3219      	adds	r2, #25
 8006932:	9904      	ldr	r1, [sp, #16]
 8006934:	9803      	ldr	r0, [sp, #12]
 8006936:	9e05      	ldr	r6, [sp, #20]
 8006938:	47b0      	blx	r6
 800693a:	1c43      	adds	r3, r0, #1
 800693c:	d02c      	beq.n	8006998 <_printf_i+0x200>
 800693e:	3501      	adds	r5, #1
 8006940:	68e3      	ldr	r3, [r4, #12]
 8006942:	9a07      	ldr	r2, [sp, #28]
 8006944:	1a9b      	subs	r3, r3, r2
 8006946:	42ab      	cmp	r3, r5
 8006948:	dcf0      	bgt.n	800692c <_printf_i+0x194>
 800694a:	e7e9      	b.n	8006920 <_printf_i+0x188>
 800694c:	2500      	movs	r5, #0
 800694e:	e7f7      	b.n	8006940 <_printf_i+0x1a8>
 8006950:	2800      	cmp	r0, #0
 8006952:	d0ad      	beq.n	80068b0 <_printf_i+0x118>
 8006954:	9d02      	ldr	r5, [sp, #8]
 8006956:	0039      	movs	r1, r7
 8006958:	f7f9 fc6c 	bl	8000234 <__aeabi_uidivmod>
 800695c:	5c73      	ldrb	r3, [r6, r1]
 800695e:	3d01      	subs	r5, #1
 8006960:	702b      	strb	r3, [r5, #0]
 8006962:	2800      	cmp	r0, #0
 8006964:	d1f7      	bne.n	8006956 <_printf_i+0x1be>
 8006966:	2f08      	cmp	r7, #8
 8006968:	d109      	bne.n	800697e <_printf_i+0x1e6>
 800696a:	6823      	ldr	r3, [r4, #0]
 800696c:	07db      	lsls	r3, r3, #31
 800696e:	d506      	bpl.n	800697e <_printf_i+0x1e6>
 8006970:	6863      	ldr	r3, [r4, #4]
 8006972:	6922      	ldr	r2, [r4, #16]
 8006974:	4293      	cmp	r3, r2
 8006976:	dc02      	bgt.n	800697e <_printf_i+0x1e6>
 8006978:	2330      	movs	r3, #48	; 0x30
 800697a:	3d01      	subs	r5, #1
 800697c:	702b      	strb	r3, [r5, #0]
 800697e:	9b02      	ldr	r3, [sp, #8]
 8006980:	1b5b      	subs	r3, r3, r5
 8006982:	6123      	str	r3, [r4, #16]
 8006984:	9b05      	ldr	r3, [sp, #20]
 8006986:	aa07      	add	r2, sp, #28
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	0021      	movs	r1, r4
 800698c:	9b04      	ldr	r3, [sp, #16]
 800698e:	9803      	ldr	r0, [sp, #12]
 8006990:	f7ff fe94 	bl	80066bc <_printf_common>
 8006994:	1c43      	adds	r3, r0, #1
 8006996:	d1b8      	bne.n	800690a <_printf_i+0x172>
 8006998:	2001      	movs	r0, #1
 800699a:	4240      	negs	r0, r0
 800699c:	b009      	add	sp, #36	; 0x24
 800699e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069a0:	0800a7ae 	.word	0x0800a7ae
 80069a4:	0800a7bf 	.word	0x0800a7bf

080069a8 <_scanf_float>:
 80069a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069aa:	b08b      	sub	sp, #44	; 0x2c
 80069ac:	9002      	str	r0, [sp, #8]
 80069ae:	9200      	str	r2, [sp, #0]
 80069b0:	2000      	movs	r0, #0
 80069b2:	22ae      	movs	r2, #174	; 0xae
 80069b4:	9305      	str	r3, [sp, #20]
 80069b6:	688b      	ldr	r3, [r1, #8]
 80069b8:	000e      	movs	r6, r1
 80069ba:	1e59      	subs	r1, r3, #1
 80069bc:	0052      	lsls	r2, r2, #1
 80069be:	9004      	str	r0, [sp, #16]
 80069c0:	4291      	cmp	r1, r2
 80069c2:	d905      	bls.n	80069d0 <_scanf_float+0x28>
 80069c4:	3b5e      	subs	r3, #94	; 0x5e
 80069c6:	3bff      	subs	r3, #255	; 0xff
 80069c8:	9304      	str	r3, [sp, #16]
 80069ca:	235e      	movs	r3, #94	; 0x5e
 80069cc:	33ff      	adds	r3, #255	; 0xff
 80069ce:	60b3      	str	r3, [r6, #8]
 80069d0:	23f0      	movs	r3, #240	; 0xf0
 80069d2:	6832      	ldr	r2, [r6, #0]
 80069d4:	00db      	lsls	r3, r3, #3
 80069d6:	4313      	orrs	r3, r2
 80069d8:	6033      	str	r3, [r6, #0]
 80069da:	0033      	movs	r3, r6
 80069dc:	2700      	movs	r7, #0
 80069de:	331c      	adds	r3, #28
 80069e0:	001d      	movs	r5, r3
 80069e2:	003c      	movs	r4, r7
 80069e4:	9303      	str	r3, [sp, #12]
 80069e6:	9708      	str	r7, [sp, #32]
 80069e8:	9707      	str	r7, [sp, #28]
 80069ea:	9701      	str	r7, [sp, #4]
 80069ec:	9706      	str	r7, [sp, #24]
 80069ee:	68b2      	ldr	r2, [r6, #8]
 80069f0:	2a00      	cmp	r2, #0
 80069f2:	d013      	beq.n	8006a1c <_scanf_float+0x74>
 80069f4:	9b00      	ldr	r3, [sp, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	9309      	str	r3, [sp, #36]	; 0x24
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	2b49      	cmp	r3, #73	; 0x49
 80069fe:	d100      	bne.n	8006a02 <_scanf_float+0x5a>
 8006a00:	e07c      	b.n	8006afc <_scanf_float+0x154>
 8006a02:	d854      	bhi.n	8006aae <_scanf_float+0x106>
 8006a04:	2b39      	cmp	r3, #57	; 0x39
 8006a06:	d847      	bhi.n	8006a98 <_scanf_float+0xf0>
 8006a08:	2b31      	cmp	r3, #49	; 0x31
 8006a0a:	d300      	bcc.n	8006a0e <_scanf_float+0x66>
 8006a0c:	e094      	b.n	8006b38 <_scanf_float+0x190>
 8006a0e:	2b2d      	cmp	r3, #45	; 0x2d
 8006a10:	d100      	bne.n	8006a14 <_scanf_float+0x6c>
 8006a12:	e09c      	b.n	8006b4e <_scanf_float+0x1a6>
 8006a14:	d817      	bhi.n	8006a46 <_scanf_float+0x9e>
 8006a16:	2b2b      	cmp	r3, #43	; 0x2b
 8006a18:	d100      	bne.n	8006a1c <_scanf_float+0x74>
 8006a1a:	e098      	b.n	8006b4e <_scanf_float+0x1a6>
 8006a1c:	9b01      	ldr	r3, [sp, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <_scanf_float+0x82>
 8006a22:	6832      	ldr	r2, [r6, #0]
 8006a24:	4b9b      	ldr	r3, [pc, #620]	; (8006c94 <_scanf_float+0x2ec>)
 8006a26:	4013      	ands	r3, r2
 8006a28:	6033      	str	r3, [r6, #0]
 8006a2a:	3c01      	subs	r4, #1
 8006a2c:	2c01      	cmp	r4, #1
 8006a2e:	d900      	bls.n	8006a32 <_scanf_float+0x8a>
 8006a30:	e0ee      	b.n	8006c10 <_scanf_float+0x268>
 8006a32:	24be      	movs	r4, #190	; 0xbe
 8006a34:	0064      	lsls	r4, r4, #1
 8006a36:	9b03      	ldr	r3, [sp, #12]
 8006a38:	429d      	cmp	r5, r3
 8006a3a:	d900      	bls.n	8006a3e <_scanf_float+0x96>
 8006a3c:	e0de      	b.n	8006bfc <_scanf_float+0x254>
 8006a3e:	2701      	movs	r7, #1
 8006a40:	0038      	movs	r0, r7
 8006a42:	b00b      	add	sp, #44	; 0x2c
 8006a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a46:	2b2e      	cmp	r3, #46	; 0x2e
 8006a48:	d100      	bne.n	8006a4c <_scanf_float+0xa4>
 8006a4a:	e0a2      	b.n	8006b92 <_scanf_float+0x1ea>
 8006a4c:	2b30      	cmp	r3, #48	; 0x30
 8006a4e:	d1e5      	bne.n	8006a1c <_scanf_float+0x74>
 8006a50:	6831      	ldr	r1, [r6, #0]
 8006a52:	05c8      	lsls	r0, r1, #23
 8006a54:	d570      	bpl.n	8006b38 <_scanf_float+0x190>
 8006a56:	2380      	movs	r3, #128	; 0x80
 8006a58:	4399      	bics	r1, r3
 8006a5a:	9b01      	ldr	r3, [sp, #4]
 8006a5c:	6031      	str	r1, [r6, #0]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	9301      	str	r3, [sp, #4]
 8006a62:	9b04      	ldr	r3, [sp, #16]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d003      	beq.n	8006a70 <_scanf_float+0xc8>
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	3201      	adds	r2, #1
 8006a6c:	9304      	str	r3, [sp, #16]
 8006a6e:	60b2      	str	r2, [r6, #8]
 8006a70:	68b3      	ldr	r3, [r6, #8]
 8006a72:	9a00      	ldr	r2, [sp, #0]
 8006a74:	3b01      	subs	r3, #1
 8006a76:	60b3      	str	r3, [r6, #8]
 8006a78:	6933      	ldr	r3, [r6, #16]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	6133      	str	r3, [r6, #16]
 8006a7e:	9b00      	ldr	r3, [sp, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	9309      	str	r3, [sp, #36]	; 0x24
 8006a84:	3b01      	subs	r3, #1
 8006a86:	6053      	str	r3, [r2, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	dc00      	bgt.n	8006a8e <_scanf_float+0xe6>
 8006a8c:	e0ac      	b.n	8006be8 <_scanf_float+0x240>
 8006a8e:	6813      	ldr	r3, [r2, #0]
 8006a90:	9309      	str	r3, [sp, #36]	; 0x24
 8006a92:	3301      	adds	r3, #1
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	e7aa      	b.n	80069ee <_scanf_float+0x46>
 8006a98:	2b45      	cmp	r3, #69	; 0x45
 8006a9a:	d100      	bne.n	8006a9e <_scanf_float+0xf6>
 8006a9c:	e083      	b.n	8006ba6 <_scanf_float+0x1fe>
 8006a9e:	2b46      	cmp	r3, #70	; 0x46
 8006aa0:	d06d      	beq.n	8006b7e <_scanf_float+0x1d6>
 8006aa2:	2b41      	cmp	r3, #65	; 0x41
 8006aa4:	d1ba      	bne.n	8006a1c <_scanf_float+0x74>
 8006aa6:	2c01      	cmp	r4, #1
 8006aa8:	d1b8      	bne.n	8006a1c <_scanf_float+0x74>
 8006aaa:	2402      	movs	r4, #2
 8006aac:	e04c      	b.n	8006b48 <_scanf_float+0x1a0>
 8006aae:	2b65      	cmp	r3, #101	; 0x65
 8006ab0:	d079      	beq.n	8006ba6 <_scanf_float+0x1fe>
 8006ab2:	d81b      	bhi.n	8006aec <_scanf_float+0x144>
 8006ab4:	2b54      	cmp	r3, #84	; 0x54
 8006ab6:	d067      	beq.n	8006b88 <_scanf_float+0x1e0>
 8006ab8:	d813      	bhi.n	8006ae2 <_scanf_float+0x13a>
 8006aba:	2b4e      	cmp	r3, #78	; 0x4e
 8006abc:	d1ae      	bne.n	8006a1c <_scanf_float+0x74>
 8006abe:	2c00      	cmp	r4, #0
 8006ac0:	d14c      	bne.n	8006b5c <_scanf_float+0x1b4>
 8006ac2:	9a01      	ldr	r2, [sp, #4]
 8006ac4:	2a00      	cmp	r2, #0
 8006ac6:	d14b      	bne.n	8006b60 <_scanf_float+0x1b8>
 8006ac8:	21e0      	movs	r1, #224	; 0xe0
 8006aca:	20e0      	movs	r0, #224	; 0xe0
 8006acc:	6832      	ldr	r2, [r6, #0]
 8006ace:	00c9      	lsls	r1, r1, #3
 8006ad0:	4011      	ands	r1, r2
 8006ad2:	00c0      	lsls	r0, r0, #3
 8006ad4:	4281      	cmp	r1, r0
 8006ad6:	d143      	bne.n	8006b60 <_scanf_float+0x1b8>
 8006ad8:	496f      	ldr	r1, [pc, #444]	; (8006c98 <_scanf_float+0x2f0>)
 8006ada:	3401      	adds	r4, #1
 8006adc:	400a      	ands	r2, r1
 8006ade:	6032      	str	r2, [r6, #0]
 8006ae0:	e032      	b.n	8006b48 <_scanf_float+0x1a0>
 8006ae2:	2b59      	cmp	r3, #89	; 0x59
 8006ae4:	d023      	beq.n	8006b2e <_scanf_float+0x186>
 8006ae6:	2b61      	cmp	r3, #97	; 0x61
 8006ae8:	d0dd      	beq.n	8006aa6 <_scanf_float+0xfe>
 8006aea:	e797      	b.n	8006a1c <_scanf_float+0x74>
 8006aec:	2b6e      	cmp	r3, #110	; 0x6e
 8006aee:	d0e6      	beq.n	8006abe <_scanf_float+0x116>
 8006af0:	d818      	bhi.n	8006b24 <_scanf_float+0x17c>
 8006af2:	2b66      	cmp	r3, #102	; 0x66
 8006af4:	d043      	beq.n	8006b7e <_scanf_float+0x1d6>
 8006af6:	2b69      	cmp	r3, #105	; 0x69
 8006af8:	d000      	beq.n	8006afc <_scanf_float+0x154>
 8006afa:	e78f      	b.n	8006a1c <_scanf_float+0x74>
 8006afc:	2f00      	cmp	r7, #0
 8006afe:	d137      	bne.n	8006b70 <_scanf_float+0x1c8>
 8006b00:	9a01      	ldr	r2, [sp, #4]
 8006b02:	2a00      	cmp	r2, #0
 8006b04:	d000      	beq.n	8006b08 <_scanf_float+0x160>
 8006b06:	e78c      	b.n	8006a22 <_scanf_float+0x7a>
 8006b08:	21e0      	movs	r1, #224	; 0xe0
 8006b0a:	20e0      	movs	r0, #224	; 0xe0
 8006b0c:	6832      	ldr	r2, [r6, #0]
 8006b0e:	00c9      	lsls	r1, r1, #3
 8006b10:	4011      	ands	r1, r2
 8006b12:	00c0      	lsls	r0, r0, #3
 8006b14:	4281      	cmp	r1, r0
 8006b16:	d000      	beq.n	8006b1a <_scanf_float+0x172>
 8006b18:	e787      	b.n	8006a2a <_scanf_float+0x82>
 8006b1a:	495f      	ldr	r1, [pc, #380]	; (8006c98 <_scanf_float+0x2f0>)
 8006b1c:	3701      	adds	r7, #1
 8006b1e:	400a      	ands	r2, r1
 8006b20:	6032      	str	r2, [r6, #0]
 8006b22:	e011      	b.n	8006b48 <_scanf_float+0x1a0>
 8006b24:	2b74      	cmp	r3, #116	; 0x74
 8006b26:	d02f      	beq.n	8006b88 <_scanf_float+0x1e0>
 8006b28:	2b79      	cmp	r3, #121	; 0x79
 8006b2a:	d000      	beq.n	8006b2e <_scanf_float+0x186>
 8006b2c:	e776      	b.n	8006a1c <_scanf_float+0x74>
 8006b2e:	2f07      	cmp	r7, #7
 8006b30:	d000      	beq.n	8006b34 <_scanf_float+0x18c>
 8006b32:	e773      	b.n	8006a1c <_scanf_float+0x74>
 8006b34:	2708      	movs	r7, #8
 8006b36:	e007      	b.n	8006b48 <_scanf_float+0x1a0>
 8006b38:	19e2      	adds	r2, r4, r7
 8006b3a:	2a00      	cmp	r2, #0
 8006b3c:	d000      	beq.n	8006b40 <_scanf_float+0x198>
 8006b3e:	e76d      	b.n	8006a1c <_scanf_float+0x74>
 8006b40:	4a56      	ldr	r2, [pc, #344]	; (8006c9c <_scanf_float+0x2f4>)
 8006b42:	6831      	ldr	r1, [r6, #0]
 8006b44:	400a      	ands	r2, r1
 8006b46:	6032      	str	r2, [r6, #0]
 8006b48:	702b      	strb	r3, [r5, #0]
 8006b4a:	3501      	adds	r5, #1
 8006b4c:	e790      	b.n	8006a70 <_scanf_float+0xc8>
 8006b4e:	2180      	movs	r1, #128	; 0x80
 8006b50:	6832      	ldr	r2, [r6, #0]
 8006b52:	420a      	tst	r2, r1
 8006b54:	d100      	bne.n	8006b58 <_scanf_float+0x1b0>
 8006b56:	e761      	b.n	8006a1c <_scanf_float+0x74>
 8006b58:	438a      	bics	r2, r1
 8006b5a:	e7f4      	b.n	8006b46 <_scanf_float+0x19e>
 8006b5c:	2c02      	cmp	r4, #2
 8006b5e:	d041      	beq.n	8006be4 <_scanf_float+0x23c>
 8006b60:	2f01      	cmp	r7, #1
 8006b62:	d002      	beq.n	8006b6a <_scanf_float+0x1c2>
 8006b64:	2f04      	cmp	r7, #4
 8006b66:	d000      	beq.n	8006b6a <_scanf_float+0x1c2>
 8006b68:	e758      	b.n	8006a1c <_scanf_float+0x74>
 8006b6a:	3701      	adds	r7, #1
 8006b6c:	b2ff      	uxtb	r7, r7
 8006b6e:	e7eb      	b.n	8006b48 <_scanf_float+0x1a0>
 8006b70:	2102      	movs	r1, #2
 8006b72:	1efa      	subs	r2, r7, #3
 8006b74:	438a      	bics	r2, r1
 8006b76:	b2d2      	uxtb	r2, r2
 8006b78:	2a00      	cmp	r2, #0
 8006b7a:	d0f6      	beq.n	8006b6a <_scanf_float+0x1c2>
 8006b7c:	e74e      	b.n	8006a1c <_scanf_float+0x74>
 8006b7e:	2f02      	cmp	r7, #2
 8006b80:	d000      	beq.n	8006b84 <_scanf_float+0x1dc>
 8006b82:	e74b      	b.n	8006a1c <_scanf_float+0x74>
 8006b84:	2703      	movs	r7, #3
 8006b86:	e7df      	b.n	8006b48 <_scanf_float+0x1a0>
 8006b88:	2f06      	cmp	r7, #6
 8006b8a:	d000      	beq.n	8006b8e <_scanf_float+0x1e6>
 8006b8c:	e746      	b.n	8006a1c <_scanf_float+0x74>
 8006b8e:	2707      	movs	r7, #7
 8006b90:	e7da      	b.n	8006b48 <_scanf_float+0x1a0>
 8006b92:	6832      	ldr	r2, [r6, #0]
 8006b94:	0591      	lsls	r1, r2, #22
 8006b96:	d400      	bmi.n	8006b9a <_scanf_float+0x1f2>
 8006b98:	e740      	b.n	8006a1c <_scanf_float+0x74>
 8006b9a:	4941      	ldr	r1, [pc, #260]	; (8006ca0 <_scanf_float+0x2f8>)
 8006b9c:	400a      	ands	r2, r1
 8006b9e:	6032      	str	r2, [r6, #0]
 8006ba0:	9a01      	ldr	r2, [sp, #4]
 8006ba2:	9206      	str	r2, [sp, #24]
 8006ba4:	e7d0      	b.n	8006b48 <_scanf_float+0x1a0>
 8006ba6:	21a0      	movs	r1, #160	; 0xa0
 8006ba8:	2080      	movs	r0, #128	; 0x80
 8006baa:	6832      	ldr	r2, [r6, #0]
 8006bac:	00c9      	lsls	r1, r1, #3
 8006bae:	4011      	ands	r1, r2
 8006bb0:	00c0      	lsls	r0, r0, #3
 8006bb2:	4281      	cmp	r1, r0
 8006bb4:	d006      	beq.n	8006bc4 <_scanf_float+0x21c>
 8006bb6:	4202      	tst	r2, r0
 8006bb8:	d100      	bne.n	8006bbc <_scanf_float+0x214>
 8006bba:	e72f      	b.n	8006a1c <_scanf_float+0x74>
 8006bbc:	9901      	ldr	r1, [sp, #4]
 8006bbe:	2900      	cmp	r1, #0
 8006bc0:	d100      	bne.n	8006bc4 <_scanf_float+0x21c>
 8006bc2:	e732      	b.n	8006a2a <_scanf_float+0x82>
 8006bc4:	0591      	lsls	r1, r2, #22
 8006bc6:	d404      	bmi.n	8006bd2 <_scanf_float+0x22a>
 8006bc8:	9901      	ldr	r1, [sp, #4]
 8006bca:	9806      	ldr	r0, [sp, #24]
 8006bcc:	9508      	str	r5, [sp, #32]
 8006bce:	1a09      	subs	r1, r1, r0
 8006bd0:	9107      	str	r1, [sp, #28]
 8006bd2:	4931      	ldr	r1, [pc, #196]	; (8006c98 <_scanf_float+0x2f0>)
 8006bd4:	400a      	ands	r2, r1
 8006bd6:	21c0      	movs	r1, #192	; 0xc0
 8006bd8:	0049      	lsls	r1, r1, #1
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	6032      	str	r2, [r6, #0]
 8006bde:	2200      	movs	r2, #0
 8006be0:	9201      	str	r2, [sp, #4]
 8006be2:	e7b1      	b.n	8006b48 <_scanf_float+0x1a0>
 8006be4:	2403      	movs	r4, #3
 8006be6:	e7af      	b.n	8006b48 <_scanf_float+0x1a0>
 8006be8:	23c0      	movs	r3, #192	; 0xc0
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	58f3      	ldr	r3, [r6, r3]
 8006bee:	9900      	ldr	r1, [sp, #0]
 8006bf0:	9802      	ldr	r0, [sp, #8]
 8006bf2:	4798      	blx	r3
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	d100      	bne.n	8006bfa <_scanf_float+0x252>
 8006bf8:	e6f9      	b.n	80069ee <_scanf_float+0x46>
 8006bfa:	e70f      	b.n	8006a1c <_scanf_float+0x74>
 8006bfc:	3d01      	subs	r5, #1
 8006bfe:	5933      	ldr	r3, [r6, r4]
 8006c00:	7829      	ldrb	r1, [r5, #0]
 8006c02:	9a00      	ldr	r2, [sp, #0]
 8006c04:	9802      	ldr	r0, [sp, #8]
 8006c06:	4798      	blx	r3
 8006c08:	6933      	ldr	r3, [r6, #16]
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	6133      	str	r3, [r6, #16]
 8006c0e:	e712      	b.n	8006a36 <_scanf_float+0x8e>
 8006c10:	1e7b      	subs	r3, r7, #1
 8006c12:	2b06      	cmp	r3, #6
 8006c14:	d826      	bhi.n	8006c64 <_scanf_float+0x2bc>
 8006c16:	2f02      	cmp	r7, #2
 8006c18:	d839      	bhi.n	8006c8e <_scanf_float+0x2e6>
 8006c1a:	24be      	movs	r4, #190	; 0xbe
 8006c1c:	0064      	lsls	r4, r4, #1
 8006c1e:	9b03      	ldr	r3, [sp, #12]
 8006c20:	429d      	cmp	r5, r3
 8006c22:	d800      	bhi.n	8006c26 <_scanf_float+0x27e>
 8006c24:	e70b      	b.n	8006a3e <_scanf_float+0x96>
 8006c26:	3d01      	subs	r5, #1
 8006c28:	5933      	ldr	r3, [r6, r4]
 8006c2a:	7829      	ldrb	r1, [r5, #0]
 8006c2c:	9a00      	ldr	r2, [sp, #0]
 8006c2e:	9802      	ldr	r0, [sp, #8]
 8006c30:	4798      	blx	r3
 8006c32:	6933      	ldr	r3, [r6, #16]
 8006c34:	3b01      	subs	r3, #1
 8006c36:	6133      	str	r3, [r6, #16]
 8006c38:	e7f1      	b.n	8006c1e <_scanf_float+0x276>
 8006c3a:	9b04      	ldr	r3, [sp, #16]
 8006c3c:	9a00      	ldr	r2, [sp, #0]
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	9304      	str	r3, [sp, #16]
 8006c42:	7819      	ldrb	r1, [r3, #0]
 8006c44:	23be      	movs	r3, #190	; 0xbe
 8006c46:	005b      	lsls	r3, r3, #1
 8006c48:	58f3      	ldr	r3, [r6, r3]
 8006c4a:	9802      	ldr	r0, [sp, #8]
 8006c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c4e:	4798      	blx	r3
 8006c50:	6933      	ldr	r3, [r6, #16]
 8006c52:	3b01      	subs	r3, #1
 8006c54:	6133      	str	r3, [r6, #16]
 8006c56:	3c01      	subs	r4, #1
 8006c58:	b2e4      	uxtb	r4, r4
 8006c5a:	2c02      	cmp	r4, #2
 8006c5c:	d1ed      	bne.n	8006c3a <_scanf_float+0x292>
 8006c5e:	3f03      	subs	r7, #3
 8006c60:	b2ff      	uxtb	r7, r7
 8006c62:	1bed      	subs	r5, r5, r7
 8006c64:	6833      	ldr	r3, [r6, #0]
 8006c66:	05da      	lsls	r2, r3, #23
 8006c68:	d537      	bpl.n	8006cda <_scanf_float+0x332>
 8006c6a:	055b      	lsls	r3, r3, #21
 8006c6c:	d51a      	bpl.n	8006ca4 <_scanf_float+0x2fc>
 8006c6e:	24be      	movs	r4, #190	; 0xbe
 8006c70:	0064      	lsls	r4, r4, #1
 8006c72:	9b03      	ldr	r3, [sp, #12]
 8006c74:	429d      	cmp	r5, r3
 8006c76:	d800      	bhi.n	8006c7a <_scanf_float+0x2d2>
 8006c78:	e6e1      	b.n	8006a3e <_scanf_float+0x96>
 8006c7a:	3d01      	subs	r5, #1
 8006c7c:	5933      	ldr	r3, [r6, r4]
 8006c7e:	7829      	ldrb	r1, [r5, #0]
 8006c80:	9a00      	ldr	r2, [sp, #0]
 8006c82:	9802      	ldr	r0, [sp, #8]
 8006c84:	4798      	blx	r3
 8006c86:	6933      	ldr	r3, [r6, #16]
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	6133      	str	r3, [r6, #16]
 8006c8c:	e7f1      	b.n	8006c72 <_scanf_float+0x2ca>
 8006c8e:	003c      	movs	r4, r7
 8006c90:	9504      	str	r5, [sp, #16]
 8006c92:	e7e0      	b.n	8006c56 <_scanf_float+0x2ae>
 8006c94:	fffffeff 	.word	0xfffffeff
 8006c98:	fffff87f 	.word	0xfffff87f
 8006c9c:	fffffe7f 	.word	0xfffffe7f
 8006ca0:	fffffd7f 	.word	0xfffffd7f
 8006ca4:	6933      	ldr	r3, [r6, #16]
 8006ca6:	1e6c      	subs	r4, r5, #1
 8006ca8:	7821      	ldrb	r1, [r4, #0]
 8006caa:	3b01      	subs	r3, #1
 8006cac:	6133      	str	r3, [r6, #16]
 8006cae:	2965      	cmp	r1, #101	; 0x65
 8006cb0:	d00c      	beq.n	8006ccc <_scanf_float+0x324>
 8006cb2:	2945      	cmp	r1, #69	; 0x45
 8006cb4:	d00a      	beq.n	8006ccc <_scanf_float+0x324>
 8006cb6:	23be      	movs	r3, #190	; 0xbe
 8006cb8:	005b      	lsls	r3, r3, #1
 8006cba:	58f3      	ldr	r3, [r6, r3]
 8006cbc:	9a00      	ldr	r2, [sp, #0]
 8006cbe:	9802      	ldr	r0, [sp, #8]
 8006cc0:	4798      	blx	r3
 8006cc2:	6933      	ldr	r3, [r6, #16]
 8006cc4:	1eac      	subs	r4, r5, #2
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	7821      	ldrb	r1, [r4, #0]
 8006cca:	6133      	str	r3, [r6, #16]
 8006ccc:	23be      	movs	r3, #190	; 0xbe
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	58f3      	ldr	r3, [r6, r3]
 8006cd2:	9a00      	ldr	r2, [sp, #0]
 8006cd4:	9802      	ldr	r0, [sp, #8]
 8006cd6:	4798      	blx	r3
 8006cd8:	0025      	movs	r5, r4
 8006cda:	2710      	movs	r7, #16
 8006cdc:	6833      	ldr	r3, [r6, #0]
 8006cde:	401f      	ands	r7, r3
 8006ce0:	d15b      	bne.n	8006d9a <_scanf_float+0x3f2>
 8006ce2:	23c0      	movs	r3, #192	; 0xc0
 8006ce4:	702f      	strb	r7, [r5, #0]
 8006ce6:	6832      	ldr	r2, [r6, #0]
 8006ce8:	00db      	lsls	r3, r3, #3
 8006cea:	4013      	ands	r3, r2
 8006cec:	2280      	movs	r2, #128	; 0x80
 8006cee:	00d2      	lsls	r2, r2, #3
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d11b      	bne.n	8006d2c <_scanf_float+0x384>
 8006cf4:	9a06      	ldr	r2, [sp, #24]
 8006cf6:	9b01      	ldr	r3, [sp, #4]
 8006cf8:	1a9b      	subs	r3, r3, r2
 8006cfa:	425a      	negs	r2, r3
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d122      	bne.n	8006d46 <_scanf_float+0x39e>
 8006d00:	2200      	movs	r2, #0
 8006d02:	9903      	ldr	r1, [sp, #12]
 8006d04:	9802      	ldr	r0, [sp, #8]
 8006d06:	f000 fecb 	bl	8007aa0 <_strtod_r>
 8006d0a:	9b05      	ldr	r3, [sp, #20]
 8006d0c:	0004      	movs	r4, r0
 8006d0e:	6830      	ldr	r0, [r6, #0]
 8006d10:	000d      	movs	r5, r1
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	0782      	lsls	r2, r0, #30
 8006d16:	d523      	bpl.n	8006d60 <_scanf_float+0x3b8>
 8006d18:	1d1a      	adds	r2, r3, #4
 8006d1a:	9905      	ldr	r1, [sp, #20]
 8006d1c:	600a      	str	r2, [r1, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	601c      	str	r4, [r3, #0]
 8006d22:	605d      	str	r5, [r3, #4]
 8006d24:	68f3      	ldr	r3, [r6, #12]
 8006d26:	3301      	adds	r3, #1
 8006d28:	60f3      	str	r3, [r6, #12]
 8006d2a:	e689      	b.n	8006a40 <_scanf_float+0x98>
 8006d2c:	9b07      	ldr	r3, [sp, #28]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d0e6      	beq.n	8006d00 <_scanf_float+0x358>
 8006d32:	9b08      	ldr	r3, [sp, #32]
 8006d34:	003a      	movs	r2, r7
 8006d36:	1c59      	adds	r1, r3, #1
 8006d38:	9802      	ldr	r0, [sp, #8]
 8006d3a:	230a      	movs	r3, #10
 8006d3c:	f000 ff40 	bl	8007bc0 <_strtol_r>
 8006d40:	9b07      	ldr	r3, [sp, #28]
 8006d42:	9d08      	ldr	r5, [sp, #32]
 8006d44:	1ac2      	subs	r2, r0, r3
 8006d46:	0033      	movs	r3, r6
 8006d48:	3370      	adds	r3, #112	; 0x70
 8006d4a:	33ff      	adds	r3, #255	; 0xff
 8006d4c:	429d      	cmp	r5, r3
 8006d4e:	d302      	bcc.n	8006d56 <_scanf_float+0x3ae>
 8006d50:	0035      	movs	r5, r6
 8006d52:	356f      	adds	r5, #111	; 0x6f
 8006d54:	35ff      	adds	r5, #255	; 0xff
 8006d56:	4912      	ldr	r1, [pc, #72]	; (8006da0 <_scanf_float+0x3f8>)
 8006d58:	0028      	movs	r0, r5
 8006d5a:	f000 f841 	bl	8006de0 <siprintf>
 8006d5e:	e7cf      	b.n	8006d00 <_scanf_float+0x358>
 8006d60:	2104      	movs	r1, #4
 8006d62:	4008      	ands	r0, r1
 8006d64:	1d1a      	adds	r2, r3, #4
 8006d66:	9001      	str	r0, [sp, #4]
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	d1d6      	bne.n	8006d1a <_scanf_float+0x372>
 8006d6c:	9905      	ldr	r1, [sp, #20]
 8006d6e:	0020      	movs	r0, r4
 8006d70:	600a      	str	r2, [r1, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	0022      	movs	r2, r4
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	0029      	movs	r1, r5
 8006d7a:	002b      	movs	r3, r5
 8006d7c:	f7fb f9e2 	bl	8002144 <__aeabi_dcmpun>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	d005      	beq.n	8006d90 <_scanf_float+0x3e8>
 8006d84:	9801      	ldr	r0, [sp, #4]
 8006d86:	f000 f827 	bl	8006dd8 <nanf>
 8006d8a:	9b00      	ldr	r3, [sp, #0]
 8006d8c:	6018      	str	r0, [r3, #0]
 8006d8e:	e7c9      	b.n	8006d24 <_scanf_float+0x37c>
 8006d90:	0020      	movs	r0, r4
 8006d92:	0029      	movs	r1, r5
 8006d94:	f7fb fae6 	bl	8002364 <__aeabi_d2f>
 8006d98:	e7f7      	b.n	8006d8a <_scanf_float+0x3e2>
 8006d9a:	2700      	movs	r7, #0
 8006d9c:	e650      	b.n	8006a40 <_scanf_float+0x98>
 8006d9e:	46c0      	nop			; (mov r8, r8)
 8006da0:	0800a7d0 	.word	0x0800a7d0

08006da4 <iprintf>:
 8006da4:	b40f      	push	{r0, r1, r2, r3}
 8006da6:	4b0b      	ldr	r3, [pc, #44]	; (8006dd4 <iprintf+0x30>)
 8006da8:	b513      	push	{r0, r1, r4, lr}
 8006daa:	681c      	ldr	r4, [r3, #0]
 8006dac:	2c00      	cmp	r4, #0
 8006dae:	d005      	beq.n	8006dbc <iprintf+0x18>
 8006db0:	69a3      	ldr	r3, [r4, #24]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d102      	bne.n	8006dbc <iprintf+0x18>
 8006db6:	0020      	movs	r0, r4
 8006db8:	f001 fdba 	bl	8008930 <__sinit>
 8006dbc:	ab05      	add	r3, sp, #20
 8006dbe:	9a04      	ldr	r2, [sp, #16]
 8006dc0:	68a1      	ldr	r1, [r4, #8]
 8006dc2:	0020      	movs	r0, r4
 8006dc4:	9301      	str	r3, [sp, #4]
 8006dc6:	f002 ffe5 	bl	8009d94 <_vfiprintf_r>
 8006dca:	bc16      	pop	{r1, r2, r4}
 8006dcc:	bc08      	pop	{r3}
 8006dce:	b004      	add	sp, #16
 8006dd0:	4718      	bx	r3
 8006dd2:	46c0      	nop			; (mov r8, r8)
 8006dd4:	20000010 	.word	0x20000010

08006dd8 <nanf>:
 8006dd8:	4800      	ldr	r0, [pc, #0]	; (8006ddc <nanf+0x4>)
 8006dda:	4770      	bx	lr
 8006ddc:	7fc00000 	.word	0x7fc00000

08006de0 <siprintf>:
 8006de0:	b40e      	push	{r1, r2, r3}
 8006de2:	b500      	push	{lr}
 8006de4:	490b      	ldr	r1, [pc, #44]	; (8006e14 <siprintf+0x34>)
 8006de6:	b09c      	sub	sp, #112	; 0x70
 8006de8:	ab1d      	add	r3, sp, #116	; 0x74
 8006dea:	9002      	str	r0, [sp, #8]
 8006dec:	9006      	str	r0, [sp, #24]
 8006dee:	9107      	str	r1, [sp, #28]
 8006df0:	9104      	str	r1, [sp, #16]
 8006df2:	4809      	ldr	r0, [pc, #36]	; (8006e18 <siprintf+0x38>)
 8006df4:	4909      	ldr	r1, [pc, #36]	; (8006e1c <siprintf+0x3c>)
 8006df6:	cb04      	ldmia	r3!, {r2}
 8006df8:	9105      	str	r1, [sp, #20]
 8006dfa:	6800      	ldr	r0, [r0, #0]
 8006dfc:	a902      	add	r1, sp, #8
 8006dfe:	9301      	str	r3, [sp, #4]
 8006e00:	f002 fea2 	bl	8009b48 <_svfiprintf_r>
 8006e04:	2300      	movs	r3, #0
 8006e06:	9a02      	ldr	r2, [sp, #8]
 8006e08:	7013      	strb	r3, [r2, #0]
 8006e0a:	b01c      	add	sp, #112	; 0x70
 8006e0c:	bc08      	pop	{r3}
 8006e0e:	b003      	add	sp, #12
 8006e10:	4718      	bx	r3
 8006e12:	46c0      	nop			; (mov r8, r8)
 8006e14:	7fffffff 	.word	0x7fffffff
 8006e18:	20000010 	.word	0x20000010
 8006e1c:	ffff0208 	.word	0xffff0208

08006e20 <sulp>:
 8006e20:	b570      	push	{r4, r5, r6, lr}
 8006e22:	0016      	movs	r6, r2
 8006e24:	000d      	movs	r5, r1
 8006e26:	f002 fc51 	bl	80096cc <__ulp>
 8006e2a:	2e00      	cmp	r6, #0
 8006e2c:	d00d      	beq.n	8006e4a <sulp+0x2a>
 8006e2e:	236b      	movs	r3, #107	; 0x6b
 8006e30:	006a      	lsls	r2, r5, #1
 8006e32:	0d52      	lsrs	r2, r2, #21
 8006e34:	1a9b      	subs	r3, r3, r2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	dd07      	ble.n	8006e4a <sulp+0x2a>
 8006e3a:	2400      	movs	r4, #0
 8006e3c:	4a03      	ldr	r2, [pc, #12]	; (8006e4c <sulp+0x2c>)
 8006e3e:	051b      	lsls	r3, r3, #20
 8006e40:	189d      	adds	r5, r3, r2
 8006e42:	002b      	movs	r3, r5
 8006e44:	0022      	movs	r2, r4
 8006e46:	f7fa fbc3 	bl	80015d0 <__aeabi_dmul>
 8006e4a:	bd70      	pop	{r4, r5, r6, pc}
 8006e4c:	3ff00000 	.word	0x3ff00000

08006e50 <_strtod_l>:
 8006e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e52:	b0a7      	sub	sp, #156	; 0x9c
 8006e54:	9307      	str	r3, [sp, #28]
 8006e56:	2300      	movs	r3, #0
 8006e58:	9004      	str	r0, [sp, #16]
 8006e5a:	9807      	ldr	r0, [sp, #28]
 8006e5c:	9322      	str	r3, [sp, #136]	; 0x88
 8006e5e:	9106      	str	r1, [sp, #24]
 8006e60:	921d      	str	r2, [sp, #116]	; 0x74
 8006e62:	f002 f92c 	bl	80090be <__localeconv_l>
 8006e66:	0005      	movs	r5, r0
 8006e68:	6800      	ldr	r0, [r0, #0]
 8006e6a:	f7f9 f94b 	bl	8000104 <strlen>
 8006e6e:	2600      	movs	r6, #0
 8006e70:	2700      	movs	r7, #0
 8006e72:	9b06      	ldr	r3, [sp, #24]
 8006e74:	9005      	str	r0, [sp, #20]
 8006e76:	9321      	str	r3, [sp, #132]	; 0x84
 8006e78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e7a:	781a      	ldrb	r2, [r3, #0]
 8006e7c:	2a0d      	cmp	r2, #13
 8006e7e:	d839      	bhi.n	8006ef4 <_strtod_l+0xa4>
 8006e80:	2a09      	cmp	r2, #9
 8006e82:	d23d      	bcs.n	8006f00 <_strtod_l+0xb0>
 8006e84:	2a00      	cmp	r2, #0
 8006e86:	d044      	beq.n	8006f12 <_strtod_l+0xc2>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8006e90:	920c      	str	r2, [sp, #48]	; 0x30
 8006e92:	7823      	ldrb	r3, [r4, #0]
 8006e94:	2b30      	cmp	r3, #48	; 0x30
 8006e96:	d000      	beq.n	8006e9a <_strtod_l+0x4a>
 8006e98:	e07e      	b.n	8006f98 <_strtod_l+0x148>
 8006e9a:	7863      	ldrb	r3, [r4, #1]
 8006e9c:	2b58      	cmp	r3, #88	; 0x58
 8006e9e:	d002      	beq.n	8006ea6 <_strtod_l+0x56>
 8006ea0:	2b78      	cmp	r3, #120	; 0x78
 8006ea2:	d000      	beq.n	8006ea6 <_strtod_l+0x56>
 8006ea4:	e06e      	b.n	8006f84 <_strtod_l+0x134>
 8006ea6:	9b07      	ldr	r3, [sp, #28]
 8006ea8:	4a96      	ldr	r2, [pc, #600]	; (8007104 <_strtod_l+0x2b4>)
 8006eaa:	9302      	str	r3, [sp, #8]
 8006eac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006eae:	a921      	add	r1, sp, #132	; 0x84
 8006eb0:	9301      	str	r3, [sp, #4]
 8006eb2:	ab22      	add	r3, sp, #136	; 0x88
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	9804      	ldr	r0, [sp, #16]
 8006eb8:	ab23      	add	r3, sp, #140	; 0x8c
 8006eba:	f001 fe15 	bl	8008ae8 <__gethex>
 8006ebe:	2507      	movs	r5, #7
 8006ec0:	9005      	str	r0, [sp, #20]
 8006ec2:	4005      	ands	r5, r0
 8006ec4:	d005      	beq.n	8006ed2 <_strtod_l+0x82>
 8006ec6:	2d06      	cmp	r5, #6
 8006ec8:	d12f      	bne.n	8006f2a <_strtod_l+0xda>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	3401      	adds	r4, #1
 8006ece:	9421      	str	r4, [sp, #132]	; 0x84
 8006ed0:	9313      	str	r3, [sp, #76]	; 0x4c
 8006ed2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d002      	beq.n	8006ede <_strtod_l+0x8e>
 8006ed8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006eda:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006edc:	601a      	str	r2, [r3, #0]
 8006ede:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d01d      	beq.n	8006f20 <_strtod_l+0xd0>
 8006ee4:	2380      	movs	r3, #128	; 0x80
 8006ee6:	0032      	movs	r2, r6
 8006ee8:	061b      	lsls	r3, r3, #24
 8006eea:	18fb      	adds	r3, r7, r3
 8006eec:	0010      	movs	r0, r2
 8006eee:	0019      	movs	r1, r3
 8006ef0:	b027      	add	sp, #156	; 0x9c
 8006ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ef4:	2a2b      	cmp	r2, #43	; 0x2b
 8006ef6:	d016      	beq.n	8006f26 <_strtod_l+0xd6>
 8006ef8:	2a2d      	cmp	r2, #45	; 0x2d
 8006efa:	d003      	beq.n	8006f04 <_strtod_l+0xb4>
 8006efc:	2a20      	cmp	r2, #32
 8006efe:	d1c3      	bne.n	8006e88 <_strtod_l+0x38>
 8006f00:	3301      	adds	r3, #1
 8006f02:	e7b8      	b.n	8006e76 <_strtod_l+0x26>
 8006f04:	2201      	movs	r2, #1
 8006f06:	9213      	str	r2, [sp, #76]	; 0x4c
 8006f08:	1c5a      	adds	r2, r3, #1
 8006f0a:	9221      	str	r2, [sp, #132]	; 0x84
 8006f0c:	785b      	ldrb	r3, [r3, #1]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1bc      	bne.n	8006e8c <_strtod_l+0x3c>
 8006f12:	9b06      	ldr	r3, [sp, #24]
 8006f14:	9321      	str	r3, [sp, #132]	; 0x84
 8006f16:	2300      	movs	r3, #0
 8006f18:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f1a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1db      	bne.n	8006ed8 <_strtod_l+0x88>
 8006f20:	0032      	movs	r2, r6
 8006f22:	003b      	movs	r3, r7
 8006f24:	e7e2      	b.n	8006eec <_strtod_l+0x9c>
 8006f26:	2200      	movs	r2, #0
 8006f28:	e7ed      	b.n	8006f06 <_strtod_l+0xb6>
 8006f2a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006f2c:	2a00      	cmp	r2, #0
 8006f2e:	d007      	beq.n	8006f40 <_strtod_l+0xf0>
 8006f30:	2135      	movs	r1, #53	; 0x35
 8006f32:	a824      	add	r0, sp, #144	; 0x90
 8006f34:	f002 fcb7 	bl	80098a6 <__copybits>
 8006f38:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006f3a:	9804      	ldr	r0, [sp, #16]
 8006f3c:	f002 f92d 	bl	800919a <_Bfree>
 8006f40:	1e68      	subs	r0, r5, #1
 8006f42:	2804      	cmp	r0, #4
 8006f44:	d806      	bhi.n	8006f54 <_strtod_l+0x104>
 8006f46:	f7f9 f8e5 	bl	8000114 <__gnu_thumb1_case_uqi>
 8006f4a:	030c      	.short	0x030c
 8006f4c:	1917      	.short	0x1917
 8006f4e:	0c          	.byte	0x0c
 8006f4f:	00          	.byte	0x00
 8006f50:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8006f52:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8006f54:	9b05      	ldr	r3, [sp, #20]
 8006f56:	071b      	lsls	r3, r3, #28
 8006f58:	d5bb      	bpl.n	8006ed2 <_strtod_l+0x82>
 8006f5a:	2380      	movs	r3, #128	; 0x80
 8006f5c:	061b      	lsls	r3, r3, #24
 8006f5e:	431f      	orrs	r7, r3
 8006f60:	e7b7      	b.n	8006ed2 <_strtod_l+0x82>
 8006f62:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006f64:	4a68      	ldr	r2, [pc, #416]	; (8007108 <_strtod_l+0x2b8>)
 8006f66:	4969      	ldr	r1, [pc, #420]	; (800710c <_strtod_l+0x2bc>)
 8006f68:	401a      	ands	r2, r3
 8006f6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f6c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8006f6e:	185b      	adds	r3, r3, r1
 8006f70:	051b      	lsls	r3, r3, #20
 8006f72:	431a      	orrs	r2, r3
 8006f74:	0017      	movs	r7, r2
 8006f76:	e7ed      	b.n	8006f54 <_strtod_l+0x104>
 8006f78:	4f65      	ldr	r7, [pc, #404]	; (8007110 <_strtod_l+0x2c0>)
 8006f7a:	e7eb      	b.n	8006f54 <_strtod_l+0x104>
 8006f7c:	2601      	movs	r6, #1
 8006f7e:	4f65      	ldr	r7, [pc, #404]	; (8007114 <_strtod_l+0x2c4>)
 8006f80:	4276      	negs	r6, r6
 8006f82:	e7e7      	b.n	8006f54 <_strtod_l+0x104>
 8006f84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f86:	1c5a      	adds	r2, r3, #1
 8006f88:	9221      	str	r2, [sp, #132]	; 0x84
 8006f8a:	785b      	ldrb	r3, [r3, #1]
 8006f8c:	2b30      	cmp	r3, #48	; 0x30
 8006f8e:	d0f9      	beq.n	8006f84 <_strtod_l+0x134>
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d09e      	beq.n	8006ed2 <_strtod_l+0x82>
 8006f94:	2301      	movs	r3, #1
 8006f96:	930c      	str	r3, [sp, #48]	; 0x30
 8006f98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f9a:	220a      	movs	r2, #10
 8006f9c:	9312      	str	r3, [sp, #72]	; 0x48
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fa2:	9308      	str	r3, [sp, #32]
 8006fa4:	930a      	str	r3, [sp, #40]	; 0x28
 8006fa6:	9821      	ldr	r0, [sp, #132]	; 0x84
 8006fa8:	7804      	ldrb	r4, [r0, #0]
 8006faa:	0023      	movs	r3, r4
 8006fac:	3b30      	subs	r3, #48	; 0x30
 8006fae:	b2d9      	uxtb	r1, r3
 8006fb0:	2909      	cmp	r1, #9
 8006fb2:	d934      	bls.n	800701e <_strtod_l+0x1ce>
 8006fb4:	9a05      	ldr	r2, [sp, #20]
 8006fb6:	6829      	ldr	r1, [r5, #0]
 8006fb8:	f003 f860 	bl	800a07c <strncmp>
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	d040      	beq.n	8007042 <_strtod_l+0x1f2>
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	0023      	movs	r3, r4
 8006fc4:	4684      	mov	ip, r0
 8006fc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fc8:	9007      	str	r0, [sp, #28]
 8006fca:	9205      	str	r2, [sp, #20]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	0019      	movs	r1, r3
 8006fd0:	4391      	bics	r1, r2
 8006fd2:	000a      	movs	r2, r1
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	2a45      	cmp	r2, #69	; 0x45
 8006fd8:	d000      	beq.n	8006fdc <_strtod_l+0x18c>
 8006fda:	e0bf      	b.n	800715c <_strtod_l+0x30c>
 8006fdc:	9b05      	ldr	r3, [sp, #20]
 8006fde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fe0:	4303      	orrs	r3, r0
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	428b      	cmp	r3, r1
 8006fe6:	d094      	beq.n	8006f12 <_strtod_l+0xc2>
 8006fe8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fea:	9306      	str	r3, [sp, #24]
 8006fec:	3301      	adds	r3, #1
 8006fee:	9321      	str	r3, [sp, #132]	; 0x84
 8006ff0:	9b06      	ldr	r3, [sp, #24]
 8006ff2:	785b      	ldrb	r3, [r3, #1]
 8006ff4:	2b2b      	cmp	r3, #43	; 0x2b
 8006ff6:	d100      	bne.n	8006ffa <_strtod_l+0x1aa>
 8006ff8:	e082      	b.n	8007100 <_strtod_l+0x2b0>
 8006ffa:	000c      	movs	r4, r1
 8006ffc:	2b2d      	cmp	r3, #45	; 0x2d
 8006ffe:	d105      	bne.n	800700c <_strtod_l+0x1bc>
 8007000:	2401      	movs	r4, #1
 8007002:	9b06      	ldr	r3, [sp, #24]
 8007004:	3302      	adds	r3, #2
 8007006:	9321      	str	r3, [sp, #132]	; 0x84
 8007008:	9b06      	ldr	r3, [sp, #24]
 800700a:	789b      	ldrb	r3, [r3, #2]
 800700c:	001a      	movs	r2, r3
 800700e:	3a30      	subs	r2, #48	; 0x30
 8007010:	2a09      	cmp	r2, #9
 8007012:	d800      	bhi.n	8007016 <_strtod_l+0x1c6>
 8007014:	e084      	b.n	8007120 <_strtod_l+0x2d0>
 8007016:	9a06      	ldr	r2, [sp, #24]
 8007018:	2100      	movs	r1, #0
 800701a:	9221      	str	r2, [sp, #132]	; 0x84
 800701c:	e09e      	b.n	800715c <_strtod_l+0x30c>
 800701e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007020:	2908      	cmp	r1, #8
 8007022:	dc09      	bgt.n	8007038 <_strtod_l+0x1e8>
 8007024:	9908      	ldr	r1, [sp, #32]
 8007026:	4351      	muls	r1, r2
 8007028:	18cb      	adds	r3, r1, r3
 800702a:	9308      	str	r3, [sp, #32]
 800702c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800702e:	3001      	adds	r0, #1
 8007030:	3301      	adds	r3, #1
 8007032:	930a      	str	r3, [sp, #40]	; 0x28
 8007034:	9021      	str	r0, [sp, #132]	; 0x84
 8007036:	e7b6      	b.n	8006fa6 <_strtod_l+0x156>
 8007038:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800703a:	4351      	muls	r1, r2
 800703c:	18cb      	adds	r3, r1, r3
 800703e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007040:	e7f4      	b.n	800702c <_strtod_l+0x1dc>
 8007042:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007044:	9b05      	ldr	r3, [sp, #20]
 8007046:	4694      	mov	ip, r2
 8007048:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800704a:	4463      	add	r3, ip
 800704c:	9321      	str	r3, [sp, #132]	; 0x84
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	2a00      	cmp	r2, #0
 8007052:	d036      	beq.n	80070c2 <_strtod_l+0x272>
 8007054:	4684      	mov	ip, r0
 8007056:	9205      	str	r2, [sp, #20]
 8007058:	001a      	movs	r2, r3
 800705a:	3a30      	subs	r2, #48	; 0x30
 800705c:	2a09      	cmp	r2, #9
 800705e:	d912      	bls.n	8007086 <_strtod_l+0x236>
 8007060:	2201      	movs	r2, #1
 8007062:	9207      	str	r2, [sp, #28]
 8007064:	e7b2      	b.n	8006fcc <_strtod_l+0x17c>
 8007066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007068:	3001      	adds	r0, #1
 800706a:	1c5a      	adds	r2, r3, #1
 800706c:	9221      	str	r2, [sp, #132]	; 0x84
 800706e:	785b      	ldrb	r3, [r3, #1]
 8007070:	2b30      	cmp	r3, #48	; 0x30
 8007072:	d0f8      	beq.n	8007066 <_strtod_l+0x216>
 8007074:	001a      	movs	r2, r3
 8007076:	3a31      	subs	r2, #49	; 0x31
 8007078:	2a08      	cmp	r2, #8
 800707a:	d83c      	bhi.n	80070f6 <_strtod_l+0x2a6>
 800707c:	4684      	mov	ip, r0
 800707e:	2000      	movs	r0, #0
 8007080:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007082:	9005      	str	r0, [sp, #20]
 8007084:	9212      	str	r2, [sp, #72]	; 0x48
 8007086:	3b30      	subs	r3, #48	; 0x30
 8007088:	1c42      	adds	r2, r0, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	d013      	beq.n	80070b6 <_strtod_l+0x266>
 800708e:	210a      	movs	r1, #10
 8007090:	4494      	add	ip, r2
 8007092:	9a05      	ldr	r2, [sp, #20]
 8007094:	1885      	adds	r5, r0, r2
 8007096:	42aa      	cmp	r2, r5
 8007098:	d115      	bne.n	80070c6 <_strtod_l+0x276>
 800709a:	9905      	ldr	r1, [sp, #20]
 800709c:	9a05      	ldr	r2, [sp, #20]
 800709e:	3101      	adds	r1, #1
 80070a0:	1809      	adds	r1, r1, r0
 80070a2:	1812      	adds	r2, r2, r0
 80070a4:	9105      	str	r1, [sp, #20]
 80070a6:	2a08      	cmp	r2, #8
 80070a8:	dc1b      	bgt.n	80070e2 <_strtod_l+0x292>
 80070aa:	220a      	movs	r2, #10
 80070ac:	9908      	ldr	r1, [sp, #32]
 80070ae:	434a      	muls	r2, r1
 80070b0:	189b      	adds	r3, r3, r2
 80070b2:	2200      	movs	r2, #0
 80070b4:	9308      	str	r3, [sp, #32]
 80070b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070b8:	0010      	movs	r0, r2
 80070ba:	1c59      	adds	r1, r3, #1
 80070bc:	9121      	str	r1, [sp, #132]	; 0x84
 80070be:	785b      	ldrb	r3, [r3, #1]
 80070c0:	e7ca      	b.n	8007058 <_strtod_l+0x208>
 80070c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80070c4:	e7d4      	b.n	8007070 <_strtod_l+0x220>
 80070c6:	1c54      	adds	r4, r2, #1
 80070c8:	2a08      	cmp	r2, #8
 80070ca:	dc04      	bgt.n	80070d6 <_strtod_l+0x286>
 80070cc:	9a08      	ldr	r2, [sp, #32]
 80070ce:	434a      	muls	r2, r1
 80070d0:	9208      	str	r2, [sp, #32]
 80070d2:	0022      	movs	r2, r4
 80070d4:	e7df      	b.n	8007096 <_strtod_l+0x246>
 80070d6:	2c10      	cmp	r4, #16
 80070d8:	dcfb      	bgt.n	80070d2 <_strtod_l+0x282>
 80070da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80070dc:	434a      	muls	r2, r1
 80070de:	920b      	str	r2, [sp, #44]	; 0x2c
 80070e0:	e7f7      	b.n	80070d2 <_strtod_l+0x282>
 80070e2:	9905      	ldr	r1, [sp, #20]
 80070e4:	2200      	movs	r2, #0
 80070e6:	2910      	cmp	r1, #16
 80070e8:	dce5      	bgt.n	80070b6 <_strtod_l+0x266>
 80070ea:	210a      	movs	r1, #10
 80070ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80070ee:	4341      	muls	r1, r0
 80070f0:	185b      	adds	r3, r3, r1
 80070f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80070f4:	e7df      	b.n	80070b6 <_strtod_l+0x266>
 80070f6:	2200      	movs	r2, #0
 80070f8:	4694      	mov	ip, r2
 80070fa:	9205      	str	r2, [sp, #20]
 80070fc:	3201      	adds	r2, #1
 80070fe:	e7b0      	b.n	8007062 <_strtod_l+0x212>
 8007100:	000c      	movs	r4, r1
 8007102:	e77e      	b.n	8007002 <_strtod_l+0x1b2>
 8007104:	0800a7d8 	.word	0x0800a7d8
 8007108:	ffefffff 	.word	0xffefffff
 800710c:	00000433 	.word	0x00000433
 8007110:	7ff00000 	.word	0x7ff00000
 8007114:	7fffffff 	.word	0x7fffffff
 8007118:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800711a:	1c5a      	adds	r2, r3, #1
 800711c:	9221      	str	r2, [sp, #132]	; 0x84
 800711e:	785b      	ldrb	r3, [r3, #1]
 8007120:	2b30      	cmp	r3, #48	; 0x30
 8007122:	d0f9      	beq.n	8007118 <_strtod_l+0x2c8>
 8007124:	001a      	movs	r2, r3
 8007126:	3a31      	subs	r2, #49	; 0x31
 8007128:	2100      	movs	r1, #0
 800712a:	2a08      	cmp	r2, #8
 800712c:	d816      	bhi.n	800715c <_strtod_l+0x30c>
 800712e:	3b30      	subs	r3, #48	; 0x30
 8007130:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8007132:	930e      	str	r3, [sp, #56]	; 0x38
 8007134:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007136:	1c59      	adds	r1, r3, #1
 8007138:	9121      	str	r1, [sp, #132]	; 0x84
 800713a:	785b      	ldrb	r3, [r3, #1]
 800713c:	001a      	movs	r2, r3
 800713e:	3a30      	subs	r2, #48	; 0x30
 8007140:	2a09      	cmp	r2, #9
 8007142:	d932      	bls.n	80071aa <_strtod_l+0x35a>
 8007144:	1b4a      	subs	r2, r1, r5
 8007146:	4dad      	ldr	r5, [pc, #692]	; (80073fc <_strtod_l+0x5ac>)
 8007148:	0029      	movs	r1, r5
 800714a:	2a08      	cmp	r2, #8
 800714c:	dc03      	bgt.n	8007156 <_strtod_l+0x306>
 800714e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007150:	42a9      	cmp	r1, r5
 8007152:	dd00      	ble.n	8007156 <_strtod_l+0x306>
 8007154:	0029      	movs	r1, r5
 8007156:	2c00      	cmp	r4, #0
 8007158:	d000      	beq.n	800715c <_strtod_l+0x30c>
 800715a:	4249      	negs	r1, r1
 800715c:	9a05      	ldr	r2, [sp, #20]
 800715e:	2a00      	cmp	r2, #0
 8007160:	d149      	bne.n	80071f6 <_strtod_l+0x3a6>
 8007162:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007164:	4310      	orrs	r0, r2
 8007166:	d000      	beq.n	800716a <_strtod_l+0x31a>
 8007168:	e6b3      	b.n	8006ed2 <_strtod_l+0x82>
 800716a:	9a07      	ldr	r2, [sp, #28]
 800716c:	2a00      	cmp	r2, #0
 800716e:	d000      	beq.n	8007172 <_strtod_l+0x322>
 8007170:	e6cf      	b.n	8006f12 <_strtod_l+0xc2>
 8007172:	2b4e      	cmp	r3, #78	; 0x4e
 8007174:	d025      	beq.n	80071c2 <_strtod_l+0x372>
 8007176:	dc1f      	bgt.n	80071b8 <_strtod_l+0x368>
 8007178:	2b49      	cmp	r3, #73	; 0x49
 800717a:	d000      	beq.n	800717e <_strtod_l+0x32e>
 800717c:	e6c9      	b.n	8006f12 <_strtod_l+0xc2>
 800717e:	49a0      	ldr	r1, [pc, #640]	; (8007400 <_strtod_l+0x5b0>)
 8007180:	a821      	add	r0, sp, #132	; 0x84
 8007182:	f001 feee 	bl	8008f62 <__match>
 8007186:	2800      	cmp	r0, #0
 8007188:	d100      	bne.n	800718c <_strtod_l+0x33c>
 800718a:	e6c2      	b.n	8006f12 <_strtod_l+0xc2>
 800718c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800718e:	499d      	ldr	r1, [pc, #628]	; (8007404 <_strtod_l+0x5b4>)
 8007190:	3b01      	subs	r3, #1
 8007192:	a821      	add	r0, sp, #132	; 0x84
 8007194:	9321      	str	r3, [sp, #132]	; 0x84
 8007196:	f001 fee4 	bl	8008f62 <__match>
 800719a:	2800      	cmp	r0, #0
 800719c:	d102      	bne.n	80071a4 <_strtod_l+0x354>
 800719e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071a0:	3301      	adds	r3, #1
 80071a2:	9321      	str	r3, [sp, #132]	; 0x84
 80071a4:	4f98      	ldr	r7, [pc, #608]	; (8007408 <_strtod_l+0x5b8>)
 80071a6:	2600      	movs	r6, #0
 80071a8:	e693      	b.n	8006ed2 <_strtod_l+0x82>
 80071aa:	220a      	movs	r2, #10
 80071ac:	990e      	ldr	r1, [sp, #56]	; 0x38
 80071ae:	434a      	muls	r2, r1
 80071b0:	18d2      	adds	r2, r2, r3
 80071b2:	3a30      	subs	r2, #48	; 0x30
 80071b4:	920e      	str	r2, [sp, #56]	; 0x38
 80071b6:	e7bd      	b.n	8007134 <_strtod_l+0x2e4>
 80071b8:	2b69      	cmp	r3, #105	; 0x69
 80071ba:	d0e0      	beq.n	800717e <_strtod_l+0x32e>
 80071bc:	2b6e      	cmp	r3, #110	; 0x6e
 80071be:	d000      	beq.n	80071c2 <_strtod_l+0x372>
 80071c0:	e6a7      	b.n	8006f12 <_strtod_l+0xc2>
 80071c2:	4992      	ldr	r1, [pc, #584]	; (800740c <_strtod_l+0x5bc>)
 80071c4:	a821      	add	r0, sp, #132	; 0x84
 80071c6:	f001 fecc 	bl	8008f62 <__match>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	d100      	bne.n	80071d0 <_strtod_l+0x380>
 80071ce:	e6a0      	b.n	8006f12 <_strtod_l+0xc2>
 80071d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	2b28      	cmp	r3, #40	; 0x28
 80071d6:	d10c      	bne.n	80071f2 <_strtod_l+0x3a2>
 80071d8:	aa24      	add	r2, sp, #144	; 0x90
 80071da:	498d      	ldr	r1, [pc, #564]	; (8007410 <_strtod_l+0x5c0>)
 80071dc:	a821      	add	r0, sp, #132	; 0x84
 80071de:	f001 fed4 	bl	8008f8a <__hexnan>
 80071e2:	2805      	cmp	r0, #5
 80071e4:	d105      	bne.n	80071f2 <_strtod_l+0x3a2>
 80071e6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80071e8:	4a87      	ldr	r2, [pc, #540]	; (8007408 <_strtod_l+0x5b8>)
 80071ea:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80071ec:	431a      	orrs	r2, r3
 80071ee:	0017      	movs	r7, r2
 80071f0:	e66f      	b.n	8006ed2 <_strtod_l+0x82>
 80071f2:	4f88      	ldr	r7, [pc, #544]	; (8007414 <_strtod_l+0x5c4>)
 80071f4:	e7d7      	b.n	80071a6 <_strtod_l+0x356>
 80071f6:	4663      	mov	r3, ip
 80071f8:	1acb      	subs	r3, r1, r3
 80071fa:	9307      	str	r3, [sp, #28]
 80071fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d101      	bne.n	8007206 <_strtod_l+0x3b6>
 8007202:	9b05      	ldr	r3, [sp, #20]
 8007204:	930a      	str	r3, [sp, #40]	; 0x28
 8007206:	9c05      	ldr	r4, [sp, #20]
 8007208:	2c10      	cmp	r4, #16
 800720a:	dd00      	ble.n	800720e <_strtod_l+0x3be>
 800720c:	2410      	movs	r4, #16
 800720e:	9808      	ldr	r0, [sp, #32]
 8007210:	f7fb f824 	bl	800225c <__aeabi_ui2d>
 8007214:	9b05      	ldr	r3, [sp, #20]
 8007216:	0006      	movs	r6, r0
 8007218:	000f      	movs	r7, r1
 800721a:	2b09      	cmp	r3, #9
 800721c:	dc15      	bgt.n	800724a <_strtod_l+0x3fa>
 800721e:	9b07      	ldr	r3, [sp, #28]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d100      	bne.n	8007226 <_strtod_l+0x3d6>
 8007224:	e655      	b.n	8006ed2 <_strtod_l+0x82>
 8007226:	9b07      	ldr	r3, [sp, #28]
 8007228:	2b00      	cmp	r3, #0
 800722a:	dc00      	bgt.n	800722e <_strtod_l+0x3de>
 800722c:	e07d      	b.n	800732a <_strtod_l+0x4da>
 800722e:	2b16      	cmp	r3, #22
 8007230:	dc62      	bgt.n	80072f8 <_strtod_l+0x4a8>
 8007232:	00dc      	lsls	r4, r3, #3
 8007234:	4b78      	ldr	r3, [pc, #480]	; (8007418 <_strtod_l+0x5c8>)
 8007236:	0032      	movs	r2, r6
 8007238:	1919      	adds	r1, r3, r4
 800723a:	003b      	movs	r3, r7
 800723c:	6808      	ldr	r0, [r1, #0]
 800723e:	6849      	ldr	r1, [r1, #4]
 8007240:	f7fa f9c6 	bl	80015d0 <__aeabi_dmul>
 8007244:	0006      	movs	r6, r0
 8007246:	000f      	movs	r7, r1
 8007248:	e643      	b.n	8006ed2 <_strtod_l+0x82>
 800724a:	0022      	movs	r2, r4
 800724c:	4b72      	ldr	r3, [pc, #456]	; (8007418 <_strtod_l+0x5c8>)
 800724e:	3a09      	subs	r2, #9
 8007250:	00d2      	lsls	r2, r2, #3
 8007252:	189b      	adds	r3, r3, r2
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	f7fa f9ba 	bl	80015d0 <__aeabi_dmul>
 800725c:	0006      	movs	r6, r0
 800725e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007260:	000f      	movs	r7, r1
 8007262:	f7fa fffb 	bl	800225c <__aeabi_ui2d>
 8007266:	000b      	movs	r3, r1
 8007268:	0002      	movs	r2, r0
 800726a:	0039      	movs	r1, r7
 800726c:	0030      	movs	r0, r6
 800726e:	f7f9 fa89 	bl	8000784 <__aeabi_dadd>
 8007272:	9b05      	ldr	r3, [sp, #20]
 8007274:	0006      	movs	r6, r0
 8007276:	000f      	movs	r7, r1
 8007278:	2b0f      	cmp	r3, #15
 800727a:	ddd0      	ble.n	800721e <_strtod_l+0x3ce>
 800727c:	9b05      	ldr	r3, [sp, #20]
 800727e:	1b1c      	subs	r4, r3, r4
 8007280:	9b07      	ldr	r3, [sp, #28]
 8007282:	18e4      	adds	r4, r4, r3
 8007284:	2c00      	cmp	r4, #0
 8007286:	dc00      	bgt.n	800728a <_strtod_l+0x43a>
 8007288:	e094      	b.n	80073b4 <_strtod_l+0x564>
 800728a:	230f      	movs	r3, #15
 800728c:	4023      	ands	r3, r4
 800728e:	d00a      	beq.n	80072a6 <_strtod_l+0x456>
 8007290:	4961      	ldr	r1, [pc, #388]	; (8007418 <_strtod_l+0x5c8>)
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	18c9      	adds	r1, r1, r3
 8007296:	0032      	movs	r2, r6
 8007298:	6808      	ldr	r0, [r1, #0]
 800729a:	6849      	ldr	r1, [r1, #4]
 800729c:	003b      	movs	r3, r7
 800729e:	f7fa f997 	bl	80015d0 <__aeabi_dmul>
 80072a2:	0006      	movs	r6, r0
 80072a4:	000f      	movs	r7, r1
 80072a6:	230f      	movs	r3, #15
 80072a8:	439c      	bics	r4, r3
 80072aa:	d06e      	beq.n	800738a <_strtod_l+0x53a>
 80072ac:	3326      	adds	r3, #38	; 0x26
 80072ae:	33ff      	adds	r3, #255	; 0xff
 80072b0:	429c      	cmp	r4, r3
 80072b2:	dd48      	ble.n	8007346 <_strtod_l+0x4f6>
 80072b4:	2400      	movs	r4, #0
 80072b6:	9405      	str	r4, [sp, #20]
 80072b8:	940b      	str	r4, [sp, #44]	; 0x2c
 80072ba:	940a      	str	r4, [sp, #40]	; 0x28
 80072bc:	2322      	movs	r3, #34	; 0x22
 80072be:	2600      	movs	r6, #0
 80072c0:	9a04      	ldr	r2, [sp, #16]
 80072c2:	4f51      	ldr	r7, [pc, #324]	; (8007408 <_strtod_l+0x5b8>)
 80072c4:	6013      	str	r3, [r2, #0]
 80072c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072c8:	42b3      	cmp	r3, r6
 80072ca:	d100      	bne.n	80072ce <_strtod_l+0x47e>
 80072cc:	e601      	b.n	8006ed2 <_strtod_l+0x82>
 80072ce:	9922      	ldr	r1, [sp, #136]	; 0x88
 80072d0:	9804      	ldr	r0, [sp, #16]
 80072d2:	f001 ff62 	bl	800919a <_Bfree>
 80072d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80072d8:	9804      	ldr	r0, [sp, #16]
 80072da:	f001 ff5e 	bl	800919a <_Bfree>
 80072de:	9905      	ldr	r1, [sp, #20]
 80072e0:	9804      	ldr	r0, [sp, #16]
 80072e2:	f001 ff5a 	bl	800919a <_Bfree>
 80072e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072e8:	9804      	ldr	r0, [sp, #16]
 80072ea:	f001 ff56 	bl	800919a <_Bfree>
 80072ee:	0021      	movs	r1, r4
 80072f0:	9804      	ldr	r0, [sp, #16]
 80072f2:	f001 ff52 	bl	800919a <_Bfree>
 80072f6:	e5ec      	b.n	8006ed2 <_strtod_l+0x82>
 80072f8:	2325      	movs	r3, #37	; 0x25
 80072fa:	9a05      	ldr	r2, [sp, #20]
 80072fc:	1a9b      	subs	r3, r3, r2
 80072fe:	9a07      	ldr	r2, [sp, #28]
 8007300:	4293      	cmp	r3, r2
 8007302:	dbbb      	blt.n	800727c <_strtod_l+0x42c>
 8007304:	230f      	movs	r3, #15
 8007306:	9a05      	ldr	r2, [sp, #20]
 8007308:	4c43      	ldr	r4, [pc, #268]	; (8007418 <_strtod_l+0x5c8>)
 800730a:	1a9d      	subs	r5, r3, r2
 800730c:	00e9      	lsls	r1, r5, #3
 800730e:	1861      	adds	r1, r4, r1
 8007310:	0032      	movs	r2, r6
 8007312:	6808      	ldr	r0, [r1, #0]
 8007314:	6849      	ldr	r1, [r1, #4]
 8007316:	003b      	movs	r3, r7
 8007318:	f7fa f95a 	bl	80015d0 <__aeabi_dmul>
 800731c:	9b07      	ldr	r3, [sp, #28]
 800731e:	1b5e      	subs	r6, r3, r5
 8007320:	00f6      	lsls	r6, r6, #3
 8007322:	19a6      	adds	r6, r4, r6
 8007324:	6832      	ldr	r2, [r6, #0]
 8007326:	6873      	ldr	r3, [r6, #4]
 8007328:	e78a      	b.n	8007240 <_strtod_l+0x3f0>
 800732a:	9b07      	ldr	r3, [sp, #28]
 800732c:	3316      	adds	r3, #22
 800732e:	dba5      	blt.n	800727c <_strtod_l+0x42c>
 8007330:	9b07      	ldr	r3, [sp, #28]
 8007332:	0030      	movs	r0, r6
 8007334:	00da      	lsls	r2, r3, #3
 8007336:	4b38      	ldr	r3, [pc, #224]	; (8007418 <_strtod_l+0x5c8>)
 8007338:	0039      	movs	r1, r7
 800733a:	1a9b      	subs	r3, r3, r2
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f7f9 fd3c 	bl	8000dbc <__aeabi_ddiv>
 8007344:	e77e      	b.n	8007244 <_strtod_l+0x3f4>
 8007346:	2300      	movs	r3, #0
 8007348:	0030      	movs	r0, r6
 800734a:	0039      	movs	r1, r7
 800734c:	001d      	movs	r5, r3
 800734e:	1124      	asrs	r4, r4, #4
 8007350:	2c01      	cmp	r4, #1
 8007352:	dc1d      	bgt.n	8007390 <_strtod_l+0x540>
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <_strtod_l+0x50c>
 8007358:	0006      	movs	r6, r0
 800735a:	000f      	movs	r7, r1
 800735c:	4b2f      	ldr	r3, [pc, #188]	; (800741c <_strtod_l+0x5cc>)
 800735e:	00ed      	lsls	r5, r5, #3
 8007360:	18ff      	adds	r7, r7, r3
 8007362:	4b2f      	ldr	r3, [pc, #188]	; (8007420 <_strtod_l+0x5d0>)
 8007364:	0032      	movs	r2, r6
 8007366:	195d      	adds	r5, r3, r5
 8007368:	6828      	ldr	r0, [r5, #0]
 800736a:	6869      	ldr	r1, [r5, #4]
 800736c:	003b      	movs	r3, r7
 800736e:	f7fa f92f 	bl	80015d0 <__aeabi_dmul>
 8007372:	4b25      	ldr	r3, [pc, #148]	; (8007408 <_strtod_l+0x5b8>)
 8007374:	4a2b      	ldr	r2, [pc, #172]	; (8007424 <_strtod_l+0x5d4>)
 8007376:	0006      	movs	r6, r0
 8007378:	400b      	ands	r3, r1
 800737a:	4293      	cmp	r3, r2
 800737c:	d89a      	bhi.n	80072b4 <_strtod_l+0x464>
 800737e:	4a2a      	ldr	r2, [pc, #168]	; (8007428 <_strtod_l+0x5d8>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d913      	bls.n	80073ac <_strtod_l+0x55c>
 8007384:	2601      	movs	r6, #1
 8007386:	4f29      	ldr	r7, [pc, #164]	; (800742c <_strtod_l+0x5dc>)
 8007388:	4276      	negs	r6, r6
 800738a:	2300      	movs	r3, #0
 800738c:	9306      	str	r3, [sp, #24]
 800738e:	e07b      	b.n	8007488 <_strtod_l+0x638>
 8007390:	2201      	movs	r2, #1
 8007392:	4214      	tst	r4, r2
 8007394:	d007      	beq.n	80073a6 <_strtod_l+0x556>
 8007396:	4a22      	ldr	r2, [pc, #136]	; (8007420 <_strtod_l+0x5d0>)
 8007398:	00eb      	lsls	r3, r5, #3
 800739a:	189b      	adds	r3, r3, r2
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f7fa f916 	bl	80015d0 <__aeabi_dmul>
 80073a4:	2301      	movs	r3, #1
 80073a6:	3501      	adds	r5, #1
 80073a8:	1064      	asrs	r4, r4, #1
 80073aa:	e7d1      	b.n	8007350 <_strtod_l+0x500>
 80073ac:	23d4      	movs	r3, #212	; 0xd4
 80073ae:	049b      	lsls	r3, r3, #18
 80073b0:	18cf      	adds	r7, r1, r3
 80073b2:	e7ea      	b.n	800738a <_strtod_l+0x53a>
 80073b4:	2c00      	cmp	r4, #0
 80073b6:	d0e8      	beq.n	800738a <_strtod_l+0x53a>
 80073b8:	230f      	movs	r3, #15
 80073ba:	4264      	negs	r4, r4
 80073bc:	4023      	ands	r3, r4
 80073be:	d00a      	beq.n	80073d6 <_strtod_l+0x586>
 80073c0:	4a15      	ldr	r2, [pc, #84]	; (8007418 <_strtod_l+0x5c8>)
 80073c2:	00db      	lsls	r3, r3, #3
 80073c4:	18d3      	adds	r3, r2, r3
 80073c6:	0030      	movs	r0, r6
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	0039      	movs	r1, r7
 80073ce:	f7f9 fcf5 	bl	8000dbc <__aeabi_ddiv>
 80073d2:	0006      	movs	r6, r0
 80073d4:	000f      	movs	r7, r1
 80073d6:	1124      	asrs	r4, r4, #4
 80073d8:	d0d7      	beq.n	800738a <_strtod_l+0x53a>
 80073da:	2c1f      	cmp	r4, #31
 80073dc:	dd28      	ble.n	8007430 <_strtod_l+0x5e0>
 80073de:	2400      	movs	r4, #0
 80073e0:	9405      	str	r4, [sp, #20]
 80073e2:	940b      	str	r4, [sp, #44]	; 0x2c
 80073e4:	940a      	str	r4, [sp, #40]	; 0x28
 80073e6:	2322      	movs	r3, #34	; 0x22
 80073e8:	9a04      	ldr	r2, [sp, #16]
 80073ea:	2600      	movs	r6, #0
 80073ec:	6013      	str	r3, [r2, #0]
 80073ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073f0:	2700      	movs	r7, #0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d000      	beq.n	80073f8 <_strtod_l+0x5a8>
 80073f6:	e76a      	b.n	80072ce <_strtod_l+0x47e>
 80073f8:	e56b      	b.n	8006ed2 <_strtod_l+0x82>
 80073fa:	46c0      	nop			; (mov r8, r8)
 80073fc:	00004e1f 	.word	0x00004e1f
 8007400:	0800a7a1 	.word	0x0800a7a1
 8007404:	0800a82b 	.word	0x0800a82b
 8007408:	7ff00000 	.word	0x7ff00000
 800740c:	0800a7a9 	.word	0x0800a7a9
 8007410:	0800a7ec 	.word	0x0800a7ec
 8007414:	fff80000 	.word	0xfff80000
 8007418:	0800a8d0 	.word	0x0800a8d0
 800741c:	fcb00000 	.word	0xfcb00000
 8007420:	0800a8a8 	.word	0x0800a8a8
 8007424:	7ca00000 	.word	0x7ca00000
 8007428:	7c900000 	.word	0x7c900000
 800742c:	7fefffff 	.word	0x7fefffff
 8007430:	2310      	movs	r3, #16
 8007432:	4023      	ands	r3, r4
 8007434:	9306      	str	r3, [sp, #24]
 8007436:	d001      	beq.n	800743c <_strtod_l+0x5ec>
 8007438:	236a      	movs	r3, #106	; 0x6a
 800743a:	9306      	str	r3, [sp, #24]
 800743c:	2300      	movs	r3, #0
 800743e:	0030      	movs	r0, r6
 8007440:	0039      	movs	r1, r7
 8007442:	001d      	movs	r5, r3
 8007444:	2c00      	cmp	r4, #0
 8007446:	dd00      	ble.n	800744a <_strtod_l+0x5fa>
 8007448:	e10e      	b.n	8007668 <_strtod_l+0x818>
 800744a:	2b00      	cmp	r3, #0
 800744c:	d001      	beq.n	8007452 <_strtod_l+0x602>
 800744e:	0006      	movs	r6, r0
 8007450:	000f      	movs	r7, r1
 8007452:	9b06      	ldr	r3, [sp, #24]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00f      	beq.n	8007478 <_strtod_l+0x628>
 8007458:	236b      	movs	r3, #107	; 0x6b
 800745a:	0079      	lsls	r1, r7, #1
 800745c:	0d49      	lsrs	r1, r1, #21
 800745e:	003a      	movs	r2, r7
 8007460:	1a5b      	subs	r3, r3, r1
 8007462:	2b00      	cmp	r3, #0
 8007464:	dd08      	ble.n	8007478 <_strtod_l+0x628>
 8007466:	2b1f      	cmp	r3, #31
 8007468:	dc00      	bgt.n	800746c <_strtod_l+0x61c>
 800746a:	e112      	b.n	8007692 <_strtod_l+0x842>
 800746c:	2600      	movs	r6, #0
 800746e:	2b34      	cmp	r3, #52	; 0x34
 8007470:	dc00      	bgt.n	8007474 <_strtod_l+0x624>
 8007472:	e107      	b.n	8007684 <_strtod_l+0x834>
 8007474:	27dc      	movs	r7, #220	; 0xdc
 8007476:	04bf      	lsls	r7, r7, #18
 8007478:	2200      	movs	r2, #0
 800747a:	2300      	movs	r3, #0
 800747c:	0030      	movs	r0, r6
 800747e:	0039      	movs	r1, r7
 8007480:	f7f8 ffd8 	bl	8000434 <__aeabi_dcmpeq>
 8007484:	2800      	cmp	r0, #0
 8007486:	d1aa      	bne.n	80073de <_strtod_l+0x58e>
 8007488:	9b08      	ldr	r3, [sp, #32]
 800748a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007490:	9b05      	ldr	r3, [sp, #20]
 8007492:	9804      	ldr	r0, [sp, #16]
 8007494:	f001 fed8 	bl	8009248 <__s2b>
 8007498:	900b      	str	r0, [sp, #44]	; 0x2c
 800749a:	2800      	cmp	r0, #0
 800749c:	d100      	bne.n	80074a0 <_strtod_l+0x650>
 800749e:	e709      	b.n	80072b4 <_strtod_l+0x464>
 80074a0:	9b07      	ldr	r3, [sp, #28]
 80074a2:	9a07      	ldr	r2, [sp, #28]
 80074a4:	17db      	asrs	r3, r3, #31
 80074a6:	4252      	negs	r2, r2
 80074a8:	4013      	ands	r3, r2
 80074aa:	9315      	str	r3, [sp, #84]	; 0x54
 80074ac:	9b07      	ldr	r3, [sp, #28]
 80074ae:	2400      	movs	r4, #0
 80074b0:	43db      	mvns	r3, r3
 80074b2:	9a07      	ldr	r2, [sp, #28]
 80074b4:	17db      	asrs	r3, r3, #31
 80074b6:	401a      	ands	r2, r3
 80074b8:	921c      	str	r2, [sp, #112]	; 0x70
 80074ba:	9405      	str	r4, [sp, #20]
 80074bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074be:	9804      	ldr	r0, [sp, #16]
 80074c0:	6859      	ldr	r1, [r3, #4]
 80074c2:	f001 fe32 	bl	800912a <_Balloc>
 80074c6:	900a      	str	r0, [sp, #40]	; 0x28
 80074c8:	2800      	cmp	r0, #0
 80074ca:	d100      	bne.n	80074ce <_strtod_l+0x67e>
 80074cc:	e6f6      	b.n	80072bc <_strtod_l+0x46c>
 80074ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	310c      	adds	r1, #12
 80074d6:	1c9a      	adds	r2, r3, #2
 80074d8:	0092      	lsls	r2, r2, #2
 80074da:	300c      	adds	r0, #12
 80074dc:	9308      	str	r3, [sp, #32]
 80074de:	f7fe fdf3 	bl	80060c8 <memcpy>
 80074e2:	ab24      	add	r3, sp, #144	; 0x90
 80074e4:	9301      	str	r3, [sp, #4]
 80074e6:	ab23      	add	r3, sp, #140	; 0x8c
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	0032      	movs	r2, r6
 80074ec:	003b      	movs	r3, r7
 80074ee:	9804      	ldr	r0, [sp, #16]
 80074f0:	960e      	str	r6, [sp, #56]	; 0x38
 80074f2:	970f      	str	r7, [sp, #60]	; 0x3c
 80074f4:	f002 f95c 	bl	80097b0 <__d2b>
 80074f8:	9022      	str	r0, [sp, #136]	; 0x88
 80074fa:	2800      	cmp	r0, #0
 80074fc:	d100      	bne.n	8007500 <_strtod_l+0x6b0>
 80074fe:	e6dd      	b.n	80072bc <_strtod_l+0x46c>
 8007500:	2101      	movs	r1, #1
 8007502:	9804      	ldr	r0, [sp, #16]
 8007504:	f001 ff27 	bl	8009356 <__i2b>
 8007508:	9005      	str	r0, [sp, #20]
 800750a:	2800      	cmp	r0, #0
 800750c:	d100      	bne.n	8007510 <_strtod_l+0x6c0>
 800750e:	e6d5      	b.n	80072bc <_strtod_l+0x46c>
 8007510:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007512:	2b00      	cmp	r3, #0
 8007514:	da00      	bge.n	8007518 <_strtod_l+0x6c8>
 8007516:	e0c1      	b.n	800769c <_strtod_l+0x84c>
 8007518:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800751a:	189d      	adds	r5, r3, r2
 800751c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800751e:	4694      	mov	ip, r2
 8007520:	9906      	ldr	r1, [sp, #24]
 8007522:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007524:	1a5b      	subs	r3, r3, r1
 8007526:	2136      	movs	r1, #54	; 0x36
 8007528:	189b      	adds	r3, r3, r2
 800752a:	1a8a      	subs	r2, r1, r2
 800752c:	49b2      	ldr	r1, [pc, #712]	; (80077f8 <_strtod_l+0x9a8>)
 800752e:	3b01      	subs	r3, #1
 8007530:	2001      	movs	r0, #1
 8007532:	428b      	cmp	r3, r1
 8007534:	db00      	blt.n	8007538 <_strtod_l+0x6e8>
 8007536:	e0bd      	b.n	80076b4 <_strtod_l+0x864>
 8007538:	1ac9      	subs	r1, r1, r3
 800753a:	1a52      	subs	r2, r2, r1
 800753c:	291f      	cmp	r1, #31
 800753e:	dd00      	ble.n	8007542 <_strtod_l+0x6f2>
 8007540:	e0b1      	b.n	80076a6 <_strtod_l+0x856>
 8007542:	4088      	lsls	r0, r1
 8007544:	2300      	movs	r3, #0
 8007546:	9014      	str	r0, [sp, #80]	; 0x50
 8007548:	9310      	str	r3, [sp, #64]	; 0x40
 800754a:	18ab      	adds	r3, r5, r2
 800754c:	9308      	str	r3, [sp, #32]
 800754e:	0013      	movs	r3, r2
 8007550:	9a06      	ldr	r2, [sp, #24]
 8007552:	4463      	add	r3, ip
 8007554:	18d3      	adds	r3, r2, r3
 8007556:	9a08      	ldr	r2, [sp, #32]
 8007558:	930c      	str	r3, [sp, #48]	; 0x30
 800755a:	002b      	movs	r3, r5
 800755c:	4295      	cmp	r5, r2
 800755e:	dd00      	ble.n	8007562 <_strtod_l+0x712>
 8007560:	0013      	movs	r3, r2
 8007562:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007564:	4293      	cmp	r3, r2
 8007566:	dd00      	ble.n	800756a <_strtod_l+0x71a>
 8007568:	0013      	movs	r3, r2
 800756a:	2b00      	cmp	r3, #0
 800756c:	dd06      	ble.n	800757c <_strtod_l+0x72c>
 800756e:	9a08      	ldr	r2, [sp, #32]
 8007570:	1aed      	subs	r5, r5, r3
 8007572:	1ad2      	subs	r2, r2, r3
 8007574:	9208      	str	r2, [sp, #32]
 8007576:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007578:	1ad2      	subs	r2, r2, r3
 800757a:	920c      	str	r2, [sp, #48]	; 0x30
 800757c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800757e:	2b00      	cmp	r3, #0
 8007580:	d017      	beq.n	80075b2 <_strtod_l+0x762>
 8007582:	001a      	movs	r2, r3
 8007584:	9905      	ldr	r1, [sp, #20]
 8007586:	9804      	ldr	r0, [sp, #16]
 8007588:	f001 ff7e 	bl	8009488 <__pow5mult>
 800758c:	9005      	str	r0, [sp, #20]
 800758e:	2800      	cmp	r0, #0
 8007590:	d100      	bne.n	8007594 <_strtod_l+0x744>
 8007592:	e693      	b.n	80072bc <_strtod_l+0x46c>
 8007594:	0001      	movs	r1, r0
 8007596:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007598:	9804      	ldr	r0, [sp, #16]
 800759a:	f001 fee5 	bl	8009368 <__multiply>
 800759e:	9012      	str	r0, [sp, #72]	; 0x48
 80075a0:	2800      	cmp	r0, #0
 80075a2:	d100      	bne.n	80075a6 <_strtod_l+0x756>
 80075a4:	e68a      	b.n	80072bc <_strtod_l+0x46c>
 80075a6:	9922      	ldr	r1, [sp, #136]	; 0x88
 80075a8:	9804      	ldr	r0, [sp, #16]
 80075aa:	f001 fdf6 	bl	800919a <_Bfree>
 80075ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075b0:	9322      	str	r3, [sp, #136]	; 0x88
 80075b2:	9b08      	ldr	r3, [sp, #32]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	dd00      	ble.n	80075ba <_strtod_l+0x76a>
 80075b8:	e07f      	b.n	80076ba <_strtod_l+0x86a>
 80075ba:	9b07      	ldr	r3, [sp, #28]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	dd08      	ble.n	80075d2 <_strtod_l+0x782>
 80075c0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80075c2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80075c4:	9804      	ldr	r0, [sp, #16]
 80075c6:	f001 ff5f 	bl	8009488 <__pow5mult>
 80075ca:	900a      	str	r0, [sp, #40]	; 0x28
 80075cc:	2800      	cmp	r0, #0
 80075ce:	d100      	bne.n	80075d2 <_strtod_l+0x782>
 80075d0:	e674      	b.n	80072bc <_strtod_l+0x46c>
 80075d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	dd08      	ble.n	80075ea <_strtod_l+0x79a>
 80075d8:	001a      	movs	r2, r3
 80075da:	990a      	ldr	r1, [sp, #40]	; 0x28
 80075dc:	9804      	ldr	r0, [sp, #16]
 80075de:	f001 ffa5 	bl	800952c <__lshift>
 80075e2:	900a      	str	r0, [sp, #40]	; 0x28
 80075e4:	2800      	cmp	r0, #0
 80075e6:	d100      	bne.n	80075ea <_strtod_l+0x79a>
 80075e8:	e668      	b.n	80072bc <_strtod_l+0x46c>
 80075ea:	2d00      	cmp	r5, #0
 80075ec:	dd08      	ble.n	8007600 <_strtod_l+0x7b0>
 80075ee:	002a      	movs	r2, r5
 80075f0:	9905      	ldr	r1, [sp, #20]
 80075f2:	9804      	ldr	r0, [sp, #16]
 80075f4:	f001 ff9a 	bl	800952c <__lshift>
 80075f8:	9005      	str	r0, [sp, #20]
 80075fa:	2800      	cmp	r0, #0
 80075fc:	d100      	bne.n	8007600 <_strtod_l+0x7b0>
 80075fe:	e65d      	b.n	80072bc <_strtod_l+0x46c>
 8007600:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007602:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007604:	9804      	ldr	r0, [sp, #16]
 8007606:	f001 fffd 	bl	8009604 <__mdiff>
 800760a:	1e04      	subs	r4, r0, #0
 800760c:	d100      	bne.n	8007610 <_strtod_l+0x7c0>
 800760e:	e655      	b.n	80072bc <_strtod_l+0x46c>
 8007610:	2500      	movs	r5, #0
 8007612:	68c3      	ldr	r3, [r0, #12]
 8007614:	9905      	ldr	r1, [sp, #20]
 8007616:	60c5      	str	r5, [r0, #12]
 8007618:	9312      	str	r3, [sp, #72]	; 0x48
 800761a:	f001 ffd9 	bl	80095d0 <__mcmp>
 800761e:	42a8      	cmp	r0, r5
 8007620:	da55      	bge.n	80076ce <_strtod_l+0x87e>
 8007622:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007624:	42ab      	cmp	r3, r5
 8007626:	d11b      	bne.n	8007660 <_strtod_l+0x810>
 8007628:	42ae      	cmp	r6, r5
 800762a:	d119      	bne.n	8007660 <_strtod_l+0x810>
 800762c:	033b      	lsls	r3, r7, #12
 800762e:	42ab      	cmp	r3, r5
 8007630:	d116      	bne.n	8007660 <_strtod_l+0x810>
 8007632:	22d6      	movs	r2, #214	; 0xd6
 8007634:	4b71      	ldr	r3, [pc, #452]	; (80077fc <_strtod_l+0x9ac>)
 8007636:	04d2      	lsls	r2, r2, #19
 8007638:	403b      	ands	r3, r7
 800763a:	4293      	cmp	r3, r2
 800763c:	d910      	bls.n	8007660 <_strtod_l+0x810>
 800763e:	6963      	ldr	r3, [r4, #20]
 8007640:	42ab      	cmp	r3, r5
 8007642:	d102      	bne.n	800764a <_strtod_l+0x7fa>
 8007644:	6923      	ldr	r3, [r4, #16]
 8007646:	2b01      	cmp	r3, #1
 8007648:	dd0a      	ble.n	8007660 <_strtod_l+0x810>
 800764a:	0021      	movs	r1, r4
 800764c:	2201      	movs	r2, #1
 800764e:	9804      	ldr	r0, [sp, #16]
 8007650:	f001 ff6c 	bl	800952c <__lshift>
 8007654:	9905      	ldr	r1, [sp, #20]
 8007656:	0004      	movs	r4, r0
 8007658:	f001 ffba 	bl	80095d0 <__mcmp>
 800765c:	2800      	cmp	r0, #0
 800765e:	dc6b      	bgt.n	8007738 <_strtod_l+0x8e8>
 8007660:	9b06      	ldr	r3, [sp, #24]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d178      	bne.n	8007758 <_strtod_l+0x908>
 8007666:	e632      	b.n	80072ce <_strtod_l+0x47e>
 8007668:	2201      	movs	r2, #1
 800766a:	4214      	tst	r4, r2
 800766c:	d007      	beq.n	800767e <_strtod_l+0x82e>
 800766e:	4a64      	ldr	r2, [pc, #400]	; (8007800 <_strtod_l+0x9b0>)
 8007670:	00eb      	lsls	r3, r5, #3
 8007672:	18d3      	adds	r3, r2, r3
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	f7f9 ffaa 	bl	80015d0 <__aeabi_dmul>
 800767c:	2301      	movs	r3, #1
 800767e:	3501      	adds	r5, #1
 8007680:	1064      	asrs	r4, r4, #1
 8007682:	e6df      	b.n	8007444 <_strtod_l+0x5f4>
 8007684:	2101      	movs	r1, #1
 8007686:	3b20      	subs	r3, #32
 8007688:	4249      	negs	r1, r1
 800768a:	4099      	lsls	r1, r3
 800768c:	400a      	ands	r2, r1
 800768e:	0017      	movs	r7, r2
 8007690:	e6f2      	b.n	8007478 <_strtod_l+0x628>
 8007692:	2201      	movs	r2, #1
 8007694:	4252      	negs	r2, r2
 8007696:	409a      	lsls	r2, r3
 8007698:	4016      	ands	r6, r2
 800769a:	e6ed      	b.n	8007478 <_strtod_l+0x628>
 800769c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800769e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80076a0:	1ad2      	subs	r2, r2, r3
 80076a2:	4694      	mov	ip, r2
 80076a4:	e73c      	b.n	8007520 <_strtod_l+0x6d0>
 80076a6:	4957      	ldr	r1, [pc, #348]	; (8007804 <_strtod_l+0x9b4>)
 80076a8:	1acb      	subs	r3, r1, r3
 80076aa:	0001      	movs	r1, r0
 80076ac:	4099      	lsls	r1, r3
 80076ae:	9110      	str	r1, [sp, #64]	; 0x40
 80076b0:	9014      	str	r0, [sp, #80]	; 0x50
 80076b2:	e74a      	b.n	800754a <_strtod_l+0x6fa>
 80076b4:	2300      	movs	r3, #0
 80076b6:	9310      	str	r3, [sp, #64]	; 0x40
 80076b8:	e7fa      	b.n	80076b0 <_strtod_l+0x860>
 80076ba:	9a08      	ldr	r2, [sp, #32]
 80076bc:	9922      	ldr	r1, [sp, #136]	; 0x88
 80076be:	9804      	ldr	r0, [sp, #16]
 80076c0:	f001 ff34 	bl	800952c <__lshift>
 80076c4:	9022      	str	r0, [sp, #136]	; 0x88
 80076c6:	2800      	cmp	r0, #0
 80076c8:	d000      	beq.n	80076cc <_strtod_l+0x87c>
 80076ca:	e776      	b.n	80075ba <_strtod_l+0x76a>
 80076cc:	e5f6      	b.n	80072bc <_strtod_l+0x46c>
 80076ce:	970c      	str	r7, [sp, #48]	; 0x30
 80076d0:	2800      	cmp	r0, #0
 80076d2:	d000      	beq.n	80076d6 <_strtod_l+0x886>
 80076d4:	e0a0      	b.n	8007818 <_strtod_l+0x9c8>
 80076d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076d8:	033b      	lsls	r3, r7, #12
 80076da:	0b1b      	lsrs	r3, r3, #12
 80076dc:	2a00      	cmp	r2, #0
 80076de:	d027      	beq.n	8007730 <_strtod_l+0x8e0>
 80076e0:	4a49      	ldr	r2, [pc, #292]	; (8007808 <_strtod_l+0x9b8>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d157      	bne.n	8007796 <_strtod_l+0x946>
 80076e6:	2201      	movs	r2, #1
 80076e8:	9b06      	ldr	r3, [sp, #24]
 80076ea:	4252      	negs	r2, r2
 80076ec:	0031      	movs	r1, r6
 80076ee:	0010      	movs	r0, r2
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00b      	beq.n	800770c <_strtod_l+0x8bc>
 80076f4:	25d4      	movs	r5, #212	; 0xd4
 80076f6:	4b41      	ldr	r3, [pc, #260]	; (80077fc <_strtod_l+0x9ac>)
 80076f8:	04ed      	lsls	r5, r5, #19
 80076fa:	403b      	ands	r3, r7
 80076fc:	0010      	movs	r0, r2
 80076fe:	42ab      	cmp	r3, r5
 8007700:	d804      	bhi.n	800770c <_strtod_l+0x8bc>
 8007702:	306c      	adds	r0, #108	; 0x6c
 8007704:	0d1b      	lsrs	r3, r3, #20
 8007706:	1ac3      	subs	r3, r0, r3
 8007708:	409a      	lsls	r2, r3
 800770a:	0010      	movs	r0, r2
 800770c:	4281      	cmp	r1, r0
 800770e:	d142      	bne.n	8007796 <_strtod_l+0x946>
 8007710:	4b3e      	ldr	r3, [pc, #248]	; (800780c <_strtod_l+0x9bc>)
 8007712:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007714:	429a      	cmp	r2, r3
 8007716:	d102      	bne.n	800771e <_strtod_l+0x8ce>
 8007718:	1c4b      	adds	r3, r1, #1
 800771a:	d100      	bne.n	800771e <_strtod_l+0x8ce>
 800771c:	e5ce      	b.n	80072bc <_strtod_l+0x46c>
 800771e:	4b37      	ldr	r3, [pc, #220]	; (80077fc <_strtod_l+0x9ac>)
 8007720:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007722:	2600      	movs	r6, #0
 8007724:	401a      	ands	r2, r3
 8007726:	0013      	movs	r3, r2
 8007728:	2280      	movs	r2, #128	; 0x80
 800772a:	0352      	lsls	r2, r2, #13
 800772c:	189f      	adds	r7, r3, r2
 800772e:	e797      	b.n	8007660 <_strtod_l+0x810>
 8007730:	2b00      	cmp	r3, #0
 8007732:	d130      	bne.n	8007796 <_strtod_l+0x946>
 8007734:	2e00      	cmp	r6, #0
 8007736:	d12e      	bne.n	8007796 <_strtod_l+0x946>
 8007738:	9906      	ldr	r1, [sp, #24]
 800773a:	003b      	movs	r3, r7
 800773c:	4a2f      	ldr	r2, [pc, #188]	; (80077fc <_strtod_l+0x9ac>)
 800773e:	2900      	cmp	r1, #0
 8007740:	d020      	beq.n	8007784 <_strtod_l+0x934>
 8007742:	0011      	movs	r1, r2
 8007744:	20d6      	movs	r0, #214	; 0xd6
 8007746:	4039      	ands	r1, r7
 8007748:	04c0      	lsls	r0, r0, #19
 800774a:	4281      	cmp	r1, r0
 800774c:	dc1a      	bgt.n	8007784 <_strtod_l+0x934>
 800774e:	23dc      	movs	r3, #220	; 0xdc
 8007750:	049b      	lsls	r3, r3, #18
 8007752:	4299      	cmp	r1, r3
 8007754:	dc00      	bgt.n	8007758 <_strtod_l+0x908>
 8007756:	e646      	b.n	80073e6 <_strtod_l+0x596>
 8007758:	4b2d      	ldr	r3, [pc, #180]	; (8007810 <_strtod_l+0x9c0>)
 800775a:	0030      	movs	r0, r6
 800775c:	931b      	str	r3, [sp, #108]	; 0x6c
 800775e:	2300      	movs	r3, #0
 8007760:	931a      	str	r3, [sp, #104]	; 0x68
 8007762:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007764:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007766:	0039      	movs	r1, r7
 8007768:	f7f9 ff32 	bl	80015d0 <__aeabi_dmul>
 800776c:	0006      	movs	r6, r0
 800776e:	000f      	movs	r7, r1
 8007770:	1e0b      	subs	r3, r1, #0
 8007772:	d000      	beq.n	8007776 <_strtod_l+0x926>
 8007774:	e5ab      	b.n	80072ce <_strtod_l+0x47e>
 8007776:	2800      	cmp	r0, #0
 8007778:	d000      	beq.n	800777c <_strtod_l+0x92c>
 800777a:	e5a8      	b.n	80072ce <_strtod_l+0x47e>
 800777c:	9a04      	ldr	r2, [sp, #16]
 800777e:	3322      	adds	r3, #34	; 0x22
 8007780:	6013      	str	r3, [r2, #0]
 8007782:	e5a4      	b.n	80072ce <_strtod_l+0x47e>
 8007784:	2601      	movs	r6, #1
 8007786:	4013      	ands	r3, r2
 8007788:	4a22      	ldr	r2, [pc, #136]	; (8007814 <_strtod_l+0x9c4>)
 800778a:	4276      	negs	r6, r6
 800778c:	189b      	adds	r3, r3, r2
 800778e:	4a1e      	ldr	r2, [pc, #120]	; (8007808 <_strtod_l+0x9b8>)
 8007790:	431a      	orrs	r2, r3
 8007792:	0017      	movs	r7, r2
 8007794:	e764      	b.n	8007660 <_strtod_l+0x810>
 8007796:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007798:	2b00      	cmp	r3, #0
 800779a:	d015      	beq.n	80077c8 <_strtod_l+0x978>
 800779c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800779e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077a0:	4213      	tst	r3, r2
 80077a2:	d100      	bne.n	80077a6 <_strtod_l+0x956>
 80077a4:	e75c      	b.n	8007660 <_strtod_l+0x810>
 80077a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077a8:	9a06      	ldr	r2, [sp, #24]
 80077aa:	0030      	movs	r0, r6
 80077ac:	0039      	movs	r1, r7
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00f      	beq.n	80077d2 <_strtod_l+0x982>
 80077b2:	f7ff fb35 	bl	8006e20 <sulp>
 80077b6:	0002      	movs	r2, r0
 80077b8:	000b      	movs	r3, r1
 80077ba:	980e      	ldr	r0, [sp, #56]	; 0x38
 80077bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80077be:	f7f8 ffe1 	bl	8000784 <__aeabi_dadd>
 80077c2:	0006      	movs	r6, r0
 80077c4:	000f      	movs	r7, r1
 80077c6:	e74b      	b.n	8007660 <_strtod_l+0x810>
 80077c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077ca:	4233      	tst	r3, r6
 80077cc:	d100      	bne.n	80077d0 <_strtod_l+0x980>
 80077ce:	e747      	b.n	8007660 <_strtod_l+0x810>
 80077d0:	e7e9      	b.n	80077a6 <_strtod_l+0x956>
 80077d2:	f7ff fb25 	bl	8006e20 <sulp>
 80077d6:	0002      	movs	r2, r0
 80077d8:	000b      	movs	r3, r1
 80077da:	980e      	ldr	r0, [sp, #56]	; 0x38
 80077dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80077de:	f7fa f969 	bl	8001ab4 <__aeabi_dsub>
 80077e2:	2200      	movs	r2, #0
 80077e4:	2300      	movs	r3, #0
 80077e6:	0006      	movs	r6, r0
 80077e8:	000f      	movs	r7, r1
 80077ea:	f7f8 fe23 	bl	8000434 <__aeabi_dcmpeq>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	d000      	beq.n	80077f4 <_strtod_l+0x9a4>
 80077f2:	e5f8      	b.n	80073e6 <_strtod_l+0x596>
 80077f4:	e734      	b.n	8007660 <_strtod_l+0x810>
 80077f6:	46c0      	nop			; (mov r8, r8)
 80077f8:	fffffc02 	.word	0xfffffc02
 80077fc:	7ff00000 	.word	0x7ff00000
 8007800:	0800a800 	.word	0x0800a800
 8007804:	fffffbe2 	.word	0xfffffbe2
 8007808:	000fffff 	.word	0x000fffff
 800780c:	7fefffff 	.word	0x7fefffff
 8007810:	39500000 	.word	0x39500000
 8007814:	fff00000 	.word	0xfff00000
 8007818:	9905      	ldr	r1, [sp, #20]
 800781a:	0020      	movs	r0, r4
 800781c:	f002 f81c 	bl	8009858 <__ratio>
 8007820:	2380      	movs	r3, #128	; 0x80
 8007822:	2200      	movs	r2, #0
 8007824:	05db      	lsls	r3, r3, #23
 8007826:	9008      	str	r0, [sp, #32]
 8007828:	9109      	str	r1, [sp, #36]	; 0x24
 800782a:	f7f8 fe13 	bl	8000454 <__aeabi_dcmple>
 800782e:	2800      	cmp	r0, #0
 8007830:	d100      	bne.n	8007834 <_strtod_l+0x9e4>
 8007832:	e07f      	b.n	8007934 <_strtod_l+0xae4>
 8007834:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007836:	2b00      	cmp	r3, #0
 8007838:	d04b      	beq.n	80078d2 <_strtod_l+0xa82>
 800783a:	2200      	movs	r2, #0
 800783c:	4b8a      	ldr	r3, [pc, #552]	; (8007a68 <_strtod_l+0xc18>)
 800783e:	9210      	str	r2, [sp, #64]	; 0x40
 8007840:	9311      	str	r3, [sp, #68]	; 0x44
 8007842:	4b89      	ldr	r3, [pc, #548]	; (8007a68 <_strtod_l+0xc18>)
 8007844:	9308      	str	r3, [sp, #32]
 8007846:	4a89      	ldr	r2, [pc, #548]	; (8007a6c <_strtod_l+0xc1c>)
 8007848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800784a:	4013      	ands	r3, r2
 800784c:	9314      	str	r3, [sp, #80]	; 0x50
 800784e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007850:	4b87      	ldr	r3, [pc, #540]	; (8007a70 <_strtod_l+0xc20>)
 8007852:	429a      	cmp	r2, r3
 8007854:	d000      	beq.n	8007858 <_strtod_l+0xa08>
 8007856:	e0ba      	b.n	80079ce <_strtod_l+0xb7e>
 8007858:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800785a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800785c:	921a      	str	r2, [sp, #104]	; 0x68
 800785e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007860:	4a84      	ldr	r2, [pc, #528]	; (8007a74 <_strtod_l+0xc24>)
 8007862:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007864:	4694      	mov	ip, r2
 8007866:	4463      	add	r3, ip
 8007868:	001f      	movs	r7, r3
 800786a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800786c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800786e:	0030      	movs	r0, r6
 8007870:	0039      	movs	r1, r7
 8007872:	920c      	str	r2, [sp, #48]	; 0x30
 8007874:	930d      	str	r3, [sp, #52]	; 0x34
 8007876:	f001 ff29 	bl	80096cc <__ulp>
 800787a:	0002      	movs	r2, r0
 800787c:	000b      	movs	r3, r1
 800787e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007880:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007882:	f7f9 fea5 	bl	80015d0 <__aeabi_dmul>
 8007886:	0032      	movs	r2, r6
 8007888:	003b      	movs	r3, r7
 800788a:	f7f8 ff7b 	bl	8000784 <__aeabi_dadd>
 800788e:	4a77      	ldr	r2, [pc, #476]	; (8007a6c <_strtod_l+0xc1c>)
 8007890:	4b79      	ldr	r3, [pc, #484]	; (8007a78 <_strtod_l+0xc28>)
 8007892:	0006      	movs	r6, r0
 8007894:	400a      	ands	r2, r1
 8007896:	429a      	cmp	r2, r3
 8007898:	d964      	bls.n	8007964 <_strtod_l+0xb14>
 800789a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800789c:	4a77      	ldr	r2, [pc, #476]	; (8007a7c <_strtod_l+0xc2c>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d103      	bne.n	80078aa <_strtod_l+0xa5a>
 80078a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078a4:	3301      	adds	r3, #1
 80078a6:	d100      	bne.n	80078aa <_strtod_l+0xa5a>
 80078a8:	e508      	b.n	80072bc <_strtod_l+0x46c>
 80078aa:	2601      	movs	r6, #1
 80078ac:	4f73      	ldr	r7, [pc, #460]	; (8007a7c <_strtod_l+0xc2c>)
 80078ae:	4276      	negs	r6, r6
 80078b0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80078b2:	9804      	ldr	r0, [sp, #16]
 80078b4:	f001 fc71 	bl	800919a <_Bfree>
 80078b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80078ba:	9804      	ldr	r0, [sp, #16]
 80078bc:	f001 fc6d 	bl	800919a <_Bfree>
 80078c0:	9905      	ldr	r1, [sp, #20]
 80078c2:	9804      	ldr	r0, [sp, #16]
 80078c4:	f001 fc69 	bl	800919a <_Bfree>
 80078c8:	0021      	movs	r1, r4
 80078ca:	9804      	ldr	r0, [sp, #16]
 80078cc:	f001 fc65 	bl	800919a <_Bfree>
 80078d0:	e5f4      	b.n	80074bc <_strtod_l+0x66c>
 80078d2:	2e00      	cmp	r6, #0
 80078d4:	d11e      	bne.n	8007914 <_strtod_l+0xac4>
 80078d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078d8:	031b      	lsls	r3, r3, #12
 80078da:	d121      	bne.n	8007920 <_strtod_l+0xad0>
 80078dc:	9808      	ldr	r0, [sp, #32]
 80078de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078e0:	2200      	movs	r2, #0
 80078e2:	4b61      	ldr	r3, [pc, #388]	; (8007a68 <_strtod_l+0xc18>)
 80078e4:	f7f8 fdac 	bl	8000440 <__aeabi_dcmplt>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d11f      	bne.n	800792c <_strtod_l+0xadc>
 80078ec:	9808      	ldr	r0, [sp, #32]
 80078ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078f0:	2200      	movs	r2, #0
 80078f2:	4b63      	ldr	r3, [pc, #396]	; (8007a80 <_strtod_l+0xc30>)
 80078f4:	f7f9 fe6c 	bl	80015d0 <__aeabi_dmul>
 80078f8:	0005      	movs	r5, r0
 80078fa:	9108      	str	r1, [sp, #32]
 80078fc:	2280      	movs	r2, #128	; 0x80
 80078fe:	0612      	lsls	r2, r2, #24
 8007900:	4694      	mov	ip, r2
 8007902:	9b08      	ldr	r3, [sp, #32]
 8007904:	951e      	str	r5, [sp, #120]	; 0x78
 8007906:	4463      	add	r3, ip
 8007908:	931f      	str	r3, [sp, #124]	; 0x7c
 800790a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800790c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800790e:	9210      	str	r2, [sp, #64]	; 0x40
 8007910:	9311      	str	r3, [sp, #68]	; 0x44
 8007912:	e798      	b.n	8007846 <_strtod_l+0x9f6>
 8007914:	2e01      	cmp	r6, #1
 8007916:	d103      	bne.n	8007920 <_strtod_l+0xad0>
 8007918:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800791a:	2b00      	cmp	r3, #0
 800791c:	d100      	bne.n	8007920 <_strtod_l+0xad0>
 800791e:	e562      	b.n	80073e6 <_strtod_l+0x596>
 8007920:	2200      	movs	r2, #0
 8007922:	4b58      	ldr	r3, [pc, #352]	; (8007a84 <_strtod_l+0xc34>)
 8007924:	2500      	movs	r5, #0
 8007926:	9210      	str	r2, [sp, #64]	; 0x40
 8007928:	9311      	str	r3, [sp, #68]	; 0x44
 800792a:	e78a      	b.n	8007842 <_strtod_l+0x9f2>
 800792c:	4b54      	ldr	r3, [pc, #336]	; (8007a80 <_strtod_l+0xc30>)
 800792e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8007930:	9308      	str	r3, [sp, #32]
 8007932:	e7e3      	b.n	80078fc <_strtod_l+0xaac>
 8007934:	4b52      	ldr	r3, [pc, #328]	; (8007a80 <_strtod_l+0xc30>)
 8007936:	9808      	ldr	r0, [sp, #32]
 8007938:	9909      	ldr	r1, [sp, #36]	; 0x24
 800793a:	2200      	movs	r2, #0
 800793c:	f7f9 fe48 	bl	80015d0 <__aeabi_dmul>
 8007940:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007942:	0005      	movs	r5, r0
 8007944:	9108      	str	r1, [sp, #32]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d107      	bne.n	800795a <_strtod_l+0xb0a>
 800794a:	2380      	movs	r3, #128	; 0x80
 800794c:	061b      	lsls	r3, r3, #24
 800794e:	18cb      	adds	r3, r1, r3
 8007950:	9016      	str	r0, [sp, #88]	; 0x58
 8007952:	9317      	str	r3, [sp, #92]	; 0x5c
 8007954:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007956:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007958:	e7d9      	b.n	800790e <_strtod_l+0xabe>
 800795a:	0002      	movs	r2, r0
 800795c:	9b08      	ldr	r3, [sp, #32]
 800795e:	9216      	str	r2, [sp, #88]	; 0x58
 8007960:	9317      	str	r3, [sp, #92]	; 0x5c
 8007962:	e7f7      	b.n	8007954 <_strtod_l+0xb04>
 8007964:	23d4      	movs	r3, #212	; 0xd4
 8007966:	049b      	lsls	r3, r3, #18
 8007968:	18cf      	adds	r7, r1, r3
 800796a:	9b06      	ldr	r3, [sp, #24]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d19f      	bne.n	80078b0 <_strtod_l+0xa60>
 8007970:	4b3e      	ldr	r3, [pc, #248]	; (8007a6c <_strtod_l+0xc1c>)
 8007972:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007974:	970c      	str	r7, [sp, #48]	; 0x30
 8007976:	403b      	ands	r3, r7
 8007978:	429a      	cmp	r2, r3
 800797a:	d199      	bne.n	80078b0 <_strtod_l+0xa60>
 800797c:	9908      	ldr	r1, [sp, #32]
 800797e:	0028      	movs	r0, r5
 8007980:	f7fa fbfc 	bl	800217c <__aeabi_d2iz>
 8007984:	f7fa fc30 	bl	80021e8 <__aeabi_i2d>
 8007988:	000b      	movs	r3, r1
 800798a:	0002      	movs	r2, r0
 800798c:	9908      	ldr	r1, [sp, #32]
 800798e:	0028      	movs	r0, r5
 8007990:	f7fa f890 	bl	8001ab4 <__aeabi_dsub>
 8007994:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007996:	9008      	str	r0, [sp, #32]
 8007998:	9109      	str	r1, [sp, #36]	; 0x24
 800799a:	2b00      	cmp	r3, #0
 800799c:	d104      	bne.n	80079a8 <_strtod_l+0xb58>
 800799e:	2e00      	cmp	r6, #0
 80079a0:	d102      	bne.n	80079a8 <_strtod_l+0xb58>
 80079a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079a4:	031b      	lsls	r3, r3, #12
 80079a6:	d058      	beq.n	8007a5a <_strtod_l+0xc0a>
 80079a8:	9808      	ldr	r0, [sp, #32]
 80079aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079ac:	4a36      	ldr	r2, [pc, #216]	; (8007a88 <_strtod_l+0xc38>)
 80079ae:	4b37      	ldr	r3, [pc, #220]	; (8007a8c <_strtod_l+0xc3c>)
 80079b0:	f7f8 fd46 	bl	8000440 <__aeabi_dcmplt>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	d000      	beq.n	80079ba <_strtod_l+0xb6a>
 80079b8:	e489      	b.n	80072ce <_strtod_l+0x47e>
 80079ba:	9808      	ldr	r0, [sp, #32]
 80079bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079be:	4a34      	ldr	r2, [pc, #208]	; (8007a90 <_strtod_l+0xc40>)
 80079c0:	4b2f      	ldr	r3, [pc, #188]	; (8007a80 <_strtod_l+0xc30>)
 80079c2:	f7f8 fd51 	bl	8000468 <__aeabi_dcmpgt>
 80079c6:	2800      	cmp	r0, #0
 80079c8:	d100      	bne.n	80079cc <_strtod_l+0xb7c>
 80079ca:	e771      	b.n	80078b0 <_strtod_l+0xa60>
 80079cc:	e47f      	b.n	80072ce <_strtod_l+0x47e>
 80079ce:	9b06      	ldr	r3, [sp, #24]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d02a      	beq.n	8007a2a <_strtod_l+0xbda>
 80079d4:	23d4      	movs	r3, #212	; 0xd4
 80079d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80079d8:	04db      	lsls	r3, r3, #19
 80079da:	429a      	cmp	r2, r3
 80079dc:	d825      	bhi.n	8007a2a <_strtod_l+0xbda>
 80079de:	4a2d      	ldr	r2, [pc, #180]	; (8007a94 <_strtod_l+0xc44>)
 80079e0:	4b2d      	ldr	r3, [pc, #180]	; (8007a98 <_strtod_l+0xc48>)
 80079e2:	0028      	movs	r0, r5
 80079e4:	9908      	ldr	r1, [sp, #32]
 80079e6:	f7f8 fd35 	bl	8000454 <__aeabi_dcmple>
 80079ea:	2800      	cmp	r0, #0
 80079ec:	d016      	beq.n	8007a1c <_strtod_l+0xbcc>
 80079ee:	0028      	movs	r0, r5
 80079f0:	9908      	ldr	r1, [sp, #32]
 80079f2:	f7f8 fd4d 	bl	8000490 <__aeabi_d2uiz>
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d100      	bne.n	80079fc <_strtod_l+0xbac>
 80079fa:	3001      	adds	r0, #1
 80079fc:	f7fa fc2e 	bl	800225c <__aeabi_ui2d>
 8007a00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a02:	0005      	movs	r5, r0
 8007a04:	9108      	str	r1, [sp, #32]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d122      	bne.n	8007a50 <_strtod_l+0xc00>
 8007a0a:	2380      	movs	r3, #128	; 0x80
 8007a0c:	061b      	lsls	r3, r3, #24
 8007a0e:	18cb      	adds	r3, r1, r3
 8007a10:	9018      	str	r0, [sp, #96]	; 0x60
 8007a12:	9319      	str	r3, [sp, #100]	; 0x64
 8007a14:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007a16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a18:	9210      	str	r2, [sp, #64]	; 0x40
 8007a1a:	9311      	str	r3, [sp, #68]	; 0x44
 8007a1c:	22d6      	movs	r2, #214	; 0xd6
 8007a1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a20:	04d2      	lsls	r2, r2, #19
 8007a22:	189b      	adds	r3, r3, r2
 8007a24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007a26:	1a9b      	subs	r3, r3, r2
 8007a28:	9311      	str	r3, [sp, #68]	; 0x44
 8007a2a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007a2c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a2e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007a30:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8007a32:	f001 fe4b 	bl	80096cc <__ulp>
 8007a36:	0002      	movs	r2, r0
 8007a38:	000b      	movs	r3, r1
 8007a3a:	0030      	movs	r0, r6
 8007a3c:	0039      	movs	r1, r7
 8007a3e:	f7f9 fdc7 	bl	80015d0 <__aeabi_dmul>
 8007a42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a46:	f7f8 fe9d 	bl	8000784 <__aeabi_dadd>
 8007a4a:	0006      	movs	r6, r0
 8007a4c:	000f      	movs	r7, r1
 8007a4e:	e78c      	b.n	800796a <_strtod_l+0xb1a>
 8007a50:	0002      	movs	r2, r0
 8007a52:	9b08      	ldr	r3, [sp, #32]
 8007a54:	9218      	str	r2, [sp, #96]	; 0x60
 8007a56:	9319      	str	r3, [sp, #100]	; 0x64
 8007a58:	e7dc      	b.n	8007a14 <_strtod_l+0xbc4>
 8007a5a:	4a0b      	ldr	r2, [pc, #44]	; (8007a88 <_strtod_l+0xc38>)
 8007a5c:	4b0f      	ldr	r3, [pc, #60]	; (8007a9c <_strtod_l+0xc4c>)
 8007a5e:	9808      	ldr	r0, [sp, #32]
 8007a60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a62:	f7f8 fced 	bl	8000440 <__aeabi_dcmplt>
 8007a66:	e7ae      	b.n	80079c6 <_strtod_l+0xb76>
 8007a68:	3ff00000 	.word	0x3ff00000
 8007a6c:	7ff00000 	.word	0x7ff00000
 8007a70:	7fe00000 	.word	0x7fe00000
 8007a74:	fcb00000 	.word	0xfcb00000
 8007a78:	7c9fffff 	.word	0x7c9fffff
 8007a7c:	7fefffff 	.word	0x7fefffff
 8007a80:	3fe00000 	.word	0x3fe00000
 8007a84:	bff00000 	.word	0xbff00000
 8007a88:	94a03595 	.word	0x94a03595
 8007a8c:	3fdfffff 	.word	0x3fdfffff
 8007a90:	35afe535 	.word	0x35afe535
 8007a94:	ffc00000 	.word	0xffc00000
 8007a98:	41dfffff 	.word	0x41dfffff
 8007a9c:	3fcfffff 	.word	0x3fcfffff

08007aa0 <_strtod_r>:
 8007aa0:	4b04      	ldr	r3, [pc, #16]	; (8007ab4 <_strtod_r+0x14>)
 8007aa2:	b510      	push	{r4, lr}
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6a1b      	ldr	r3, [r3, #32]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d100      	bne.n	8007aae <_strtod_r+0xe>
 8007aac:	4b02      	ldr	r3, [pc, #8]	; (8007ab8 <_strtod_r+0x18>)
 8007aae:	f7ff f9cf 	bl	8006e50 <_strtod_l>
 8007ab2:	bd10      	pop	{r4, pc}
 8007ab4:	20000010 	.word	0x20000010
 8007ab8:	20000074 	.word	0x20000074

08007abc <_strtol_l.isra.0>:
 8007abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007abe:	001f      	movs	r7, r3
 8007ac0:	000e      	movs	r6, r1
 8007ac2:	b087      	sub	sp, #28
 8007ac4:	9005      	str	r0, [sp, #20]
 8007ac6:	9101      	str	r1, [sp, #4]
 8007ac8:	9202      	str	r2, [sp, #8]
 8007aca:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007acc:	7834      	ldrb	r4, [r6, #0]
 8007ace:	f001 faf3 	bl	80090b8 <__locale_ctype_ptr_l>
 8007ad2:	2208      	movs	r2, #8
 8007ad4:	1900      	adds	r0, r0, r4
 8007ad6:	7843      	ldrb	r3, [r0, #1]
 8007ad8:	1c75      	adds	r5, r6, #1
 8007ada:	4013      	ands	r3, r2
 8007adc:	d136      	bne.n	8007b4c <_strtol_l.isra.0+0x90>
 8007ade:	2c2d      	cmp	r4, #45	; 0x2d
 8007ae0:	d136      	bne.n	8007b50 <_strtol_l.isra.0+0x94>
 8007ae2:	1cb5      	adds	r5, r6, #2
 8007ae4:	7874      	ldrb	r4, [r6, #1]
 8007ae6:	2601      	movs	r6, #1
 8007ae8:	2f00      	cmp	r7, #0
 8007aea:	d062      	beq.n	8007bb2 <_strtol_l.isra.0+0xf6>
 8007aec:	2f10      	cmp	r7, #16
 8007aee:	d109      	bne.n	8007b04 <_strtol_l.isra.0+0x48>
 8007af0:	2c30      	cmp	r4, #48	; 0x30
 8007af2:	d107      	bne.n	8007b04 <_strtol_l.isra.0+0x48>
 8007af4:	2220      	movs	r2, #32
 8007af6:	782b      	ldrb	r3, [r5, #0]
 8007af8:	4393      	bics	r3, r2
 8007afa:	2b58      	cmp	r3, #88	; 0x58
 8007afc:	d154      	bne.n	8007ba8 <_strtol_l.isra.0+0xec>
 8007afe:	2710      	movs	r7, #16
 8007b00:	786c      	ldrb	r4, [r5, #1]
 8007b02:	3502      	adds	r5, #2
 8007b04:	4b2d      	ldr	r3, [pc, #180]	; (8007bbc <_strtol_l.isra.0+0x100>)
 8007b06:	0039      	movs	r1, r7
 8007b08:	18f3      	adds	r3, r6, r3
 8007b0a:	0018      	movs	r0, r3
 8007b0c:	9303      	str	r3, [sp, #12]
 8007b0e:	f7f8 fb91 	bl	8000234 <__aeabi_uidivmod>
 8007b12:	9104      	str	r1, [sp, #16]
 8007b14:	2101      	movs	r1, #1
 8007b16:	2300      	movs	r3, #0
 8007b18:	4249      	negs	r1, r1
 8007b1a:	0002      	movs	r2, r0
 8007b1c:	468c      	mov	ip, r1
 8007b1e:	0018      	movs	r0, r3
 8007b20:	0021      	movs	r1, r4
 8007b22:	3930      	subs	r1, #48	; 0x30
 8007b24:	2909      	cmp	r1, #9
 8007b26:	d81a      	bhi.n	8007b5e <_strtol_l.isra.0+0xa2>
 8007b28:	000c      	movs	r4, r1
 8007b2a:	42a7      	cmp	r7, r4
 8007b2c:	dd23      	ble.n	8007b76 <_strtol_l.isra.0+0xba>
 8007b2e:	1c59      	adds	r1, r3, #1
 8007b30:	d009      	beq.n	8007b46 <_strtol_l.isra.0+0x8a>
 8007b32:	4663      	mov	r3, ip
 8007b34:	4282      	cmp	r2, r0
 8007b36:	d306      	bcc.n	8007b46 <_strtol_l.isra.0+0x8a>
 8007b38:	d102      	bne.n	8007b40 <_strtol_l.isra.0+0x84>
 8007b3a:	9904      	ldr	r1, [sp, #16]
 8007b3c:	42a1      	cmp	r1, r4
 8007b3e:	db02      	blt.n	8007b46 <_strtol_l.isra.0+0x8a>
 8007b40:	2301      	movs	r3, #1
 8007b42:	4378      	muls	r0, r7
 8007b44:	1820      	adds	r0, r4, r0
 8007b46:	782c      	ldrb	r4, [r5, #0]
 8007b48:	3501      	adds	r5, #1
 8007b4a:	e7e9      	b.n	8007b20 <_strtol_l.isra.0+0x64>
 8007b4c:	002e      	movs	r6, r5
 8007b4e:	e7bc      	b.n	8007aca <_strtol_l.isra.0+0xe>
 8007b50:	2c2b      	cmp	r4, #43	; 0x2b
 8007b52:	d001      	beq.n	8007b58 <_strtol_l.isra.0+0x9c>
 8007b54:	001e      	movs	r6, r3
 8007b56:	e7c7      	b.n	8007ae8 <_strtol_l.isra.0+0x2c>
 8007b58:	1cb5      	adds	r5, r6, #2
 8007b5a:	7874      	ldrb	r4, [r6, #1]
 8007b5c:	e7fa      	b.n	8007b54 <_strtol_l.isra.0+0x98>
 8007b5e:	0021      	movs	r1, r4
 8007b60:	3941      	subs	r1, #65	; 0x41
 8007b62:	2919      	cmp	r1, #25
 8007b64:	d801      	bhi.n	8007b6a <_strtol_l.isra.0+0xae>
 8007b66:	3c37      	subs	r4, #55	; 0x37
 8007b68:	e7df      	b.n	8007b2a <_strtol_l.isra.0+0x6e>
 8007b6a:	0021      	movs	r1, r4
 8007b6c:	3961      	subs	r1, #97	; 0x61
 8007b6e:	2919      	cmp	r1, #25
 8007b70:	d801      	bhi.n	8007b76 <_strtol_l.isra.0+0xba>
 8007b72:	3c57      	subs	r4, #87	; 0x57
 8007b74:	e7d9      	b.n	8007b2a <_strtol_l.isra.0+0x6e>
 8007b76:	1c5a      	adds	r2, r3, #1
 8007b78:	d108      	bne.n	8007b8c <_strtol_l.isra.0+0xd0>
 8007b7a:	9a05      	ldr	r2, [sp, #20]
 8007b7c:	3323      	adds	r3, #35	; 0x23
 8007b7e:	6013      	str	r3, [r2, #0]
 8007b80:	9b02      	ldr	r3, [sp, #8]
 8007b82:	9803      	ldr	r0, [sp, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d109      	bne.n	8007b9c <_strtol_l.isra.0+0xe0>
 8007b88:	b007      	add	sp, #28
 8007b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b8c:	2e00      	cmp	r6, #0
 8007b8e:	d000      	beq.n	8007b92 <_strtol_l.isra.0+0xd6>
 8007b90:	4240      	negs	r0, r0
 8007b92:	9a02      	ldr	r2, [sp, #8]
 8007b94:	2a00      	cmp	r2, #0
 8007b96:	d0f7      	beq.n	8007b88 <_strtol_l.isra.0+0xcc>
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <_strtol_l.isra.0+0xe4>
 8007b9c:	1e6b      	subs	r3, r5, #1
 8007b9e:	9301      	str	r3, [sp, #4]
 8007ba0:	9b02      	ldr	r3, [sp, #8]
 8007ba2:	9a01      	ldr	r2, [sp, #4]
 8007ba4:	601a      	str	r2, [r3, #0]
 8007ba6:	e7ef      	b.n	8007b88 <_strtol_l.isra.0+0xcc>
 8007ba8:	2430      	movs	r4, #48	; 0x30
 8007baa:	2f00      	cmp	r7, #0
 8007bac:	d1aa      	bne.n	8007b04 <_strtol_l.isra.0+0x48>
 8007bae:	2708      	movs	r7, #8
 8007bb0:	e7a8      	b.n	8007b04 <_strtol_l.isra.0+0x48>
 8007bb2:	2c30      	cmp	r4, #48	; 0x30
 8007bb4:	d09e      	beq.n	8007af4 <_strtol_l.isra.0+0x38>
 8007bb6:	270a      	movs	r7, #10
 8007bb8:	e7a4      	b.n	8007b04 <_strtol_l.isra.0+0x48>
 8007bba:	46c0      	nop			; (mov r8, r8)
 8007bbc:	7fffffff 	.word	0x7fffffff

08007bc0 <_strtol_r>:
 8007bc0:	b513      	push	{r0, r1, r4, lr}
 8007bc2:	4c05      	ldr	r4, [pc, #20]	; (8007bd8 <_strtol_r+0x18>)
 8007bc4:	6824      	ldr	r4, [r4, #0]
 8007bc6:	6a24      	ldr	r4, [r4, #32]
 8007bc8:	2c00      	cmp	r4, #0
 8007bca:	d100      	bne.n	8007bce <_strtol_r+0xe>
 8007bcc:	4c03      	ldr	r4, [pc, #12]	; (8007bdc <_strtol_r+0x1c>)
 8007bce:	9400      	str	r4, [sp, #0]
 8007bd0:	f7ff ff74 	bl	8007abc <_strtol_l.isra.0>
 8007bd4:	bd16      	pop	{r1, r2, r4, pc}
 8007bd6:	46c0      	nop			; (mov r8, r8)
 8007bd8:	20000010 	.word	0x20000010
 8007bdc:	20000074 	.word	0x20000074

08007be0 <quorem>:
 8007be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007be2:	6903      	ldr	r3, [r0, #16]
 8007be4:	690c      	ldr	r4, [r1, #16]
 8007be6:	b089      	sub	sp, #36	; 0x24
 8007be8:	0007      	movs	r7, r0
 8007bea:	9105      	str	r1, [sp, #20]
 8007bec:	2600      	movs	r6, #0
 8007bee:	42a3      	cmp	r3, r4
 8007bf0:	db65      	blt.n	8007cbe <quorem+0xde>
 8007bf2:	000b      	movs	r3, r1
 8007bf4:	3c01      	subs	r4, #1
 8007bf6:	3314      	adds	r3, #20
 8007bf8:	00a5      	lsls	r5, r4, #2
 8007bfa:	9303      	str	r3, [sp, #12]
 8007bfc:	195b      	adds	r3, r3, r5
 8007bfe:	9304      	str	r3, [sp, #16]
 8007c00:	0003      	movs	r3, r0
 8007c02:	3314      	adds	r3, #20
 8007c04:	9302      	str	r3, [sp, #8]
 8007c06:	195d      	adds	r5, r3, r5
 8007c08:	9b04      	ldr	r3, [sp, #16]
 8007c0a:	6828      	ldr	r0, [r5, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	1c59      	adds	r1, r3, #1
 8007c10:	9301      	str	r3, [sp, #4]
 8007c12:	f7f8 fa89 	bl	8000128 <__udivsi3>
 8007c16:	9001      	str	r0, [sp, #4]
 8007c18:	42b0      	cmp	r0, r6
 8007c1a:	d029      	beq.n	8007c70 <quorem+0x90>
 8007c1c:	9b03      	ldr	r3, [sp, #12]
 8007c1e:	9802      	ldr	r0, [sp, #8]
 8007c20:	469c      	mov	ip, r3
 8007c22:	9606      	str	r6, [sp, #24]
 8007c24:	4662      	mov	r2, ip
 8007c26:	ca08      	ldmia	r2!, {r3}
 8007c28:	4694      	mov	ip, r2
 8007c2a:	9a01      	ldr	r2, [sp, #4]
 8007c2c:	b299      	uxth	r1, r3
 8007c2e:	4351      	muls	r1, r2
 8007c30:	0c1b      	lsrs	r3, r3, #16
 8007c32:	4353      	muls	r3, r2
 8007c34:	1989      	adds	r1, r1, r6
 8007c36:	0c0a      	lsrs	r2, r1, #16
 8007c38:	189b      	adds	r3, r3, r2
 8007c3a:	9307      	str	r3, [sp, #28]
 8007c3c:	0c1e      	lsrs	r6, r3, #16
 8007c3e:	6803      	ldr	r3, [r0, #0]
 8007c40:	b289      	uxth	r1, r1
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	9b06      	ldr	r3, [sp, #24]
 8007c46:	18d2      	adds	r2, r2, r3
 8007c48:	6803      	ldr	r3, [r0, #0]
 8007c4a:	1a52      	subs	r2, r2, r1
 8007c4c:	0c19      	lsrs	r1, r3, #16
 8007c4e:	466b      	mov	r3, sp
 8007c50:	8b9b      	ldrh	r3, [r3, #28]
 8007c52:	1acb      	subs	r3, r1, r3
 8007c54:	1411      	asrs	r1, r2, #16
 8007c56:	185b      	adds	r3, r3, r1
 8007c58:	1419      	asrs	r1, r3, #16
 8007c5a:	b292      	uxth	r2, r2
 8007c5c:	041b      	lsls	r3, r3, #16
 8007c5e:	431a      	orrs	r2, r3
 8007c60:	9b04      	ldr	r3, [sp, #16]
 8007c62:	9106      	str	r1, [sp, #24]
 8007c64:	c004      	stmia	r0!, {r2}
 8007c66:	4563      	cmp	r3, ip
 8007c68:	d2dc      	bcs.n	8007c24 <quorem+0x44>
 8007c6a:	682b      	ldr	r3, [r5, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d02d      	beq.n	8007ccc <quorem+0xec>
 8007c70:	9905      	ldr	r1, [sp, #20]
 8007c72:	0038      	movs	r0, r7
 8007c74:	f001 fcac 	bl	80095d0 <__mcmp>
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	db1f      	blt.n	8007cbc <quorem+0xdc>
 8007c7c:	2500      	movs	r5, #0
 8007c7e:	9b01      	ldr	r3, [sp, #4]
 8007c80:	9802      	ldr	r0, [sp, #8]
 8007c82:	3301      	adds	r3, #1
 8007c84:	9903      	ldr	r1, [sp, #12]
 8007c86:	9301      	str	r3, [sp, #4]
 8007c88:	6802      	ldr	r2, [r0, #0]
 8007c8a:	c908      	ldmia	r1!, {r3}
 8007c8c:	b292      	uxth	r2, r2
 8007c8e:	1955      	adds	r5, r2, r5
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	1aaa      	subs	r2, r5, r2
 8007c94:	6805      	ldr	r5, [r0, #0]
 8007c96:	0c1b      	lsrs	r3, r3, #16
 8007c98:	0c2d      	lsrs	r5, r5, #16
 8007c9a:	1aeb      	subs	r3, r5, r3
 8007c9c:	1415      	asrs	r5, r2, #16
 8007c9e:	195b      	adds	r3, r3, r5
 8007ca0:	141d      	asrs	r5, r3, #16
 8007ca2:	b292      	uxth	r2, r2
 8007ca4:	041b      	lsls	r3, r3, #16
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	c008      	stmia	r0!, {r3}
 8007caa:	9b04      	ldr	r3, [sp, #16]
 8007cac:	428b      	cmp	r3, r1
 8007cae:	d2eb      	bcs.n	8007c88 <quorem+0xa8>
 8007cb0:	9a02      	ldr	r2, [sp, #8]
 8007cb2:	00a3      	lsls	r3, r4, #2
 8007cb4:	18d3      	adds	r3, r2, r3
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	2a00      	cmp	r2, #0
 8007cba:	d011      	beq.n	8007ce0 <quorem+0x100>
 8007cbc:	9e01      	ldr	r6, [sp, #4]
 8007cbe:	0030      	movs	r0, r6
 8007cc0:	b009      	add	sp, #36	; 0x24
 8007cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cc4:	682b      	ldr	r3, [r5, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d104      	bne.n	8007cd4 <quorem+0xf4>
 8007cca:	3c01      	subs	r4, #1
 8007ccc:	9b02      	ldr	r3, [sp, #8]
 8007cce:	3d04      	subs	r5, #4
 8007cd0:	42ab      	cmp	r3, r5
 8007cd2:	d3f7      	bcc.n	8007cc4 <quorem+0xe4>
 8007cd4:	613c      	str	r4, [r7, #16]
 8007cd6:	e7cb      	b.n	8007c70 <quorem+0x90>
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	2a00      	cmp	r2, #0
 8007cdc:	d104      	bne.n	8007ce8 <quorem+0x108>
 8007cde:	3c01      	subs	r4, #1
 8007ce0:	9a02      	ldr	r2, [sp, #8]
 8007ce2:	3b04      	subs	r3, #4
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d3f7      	bcc.n	8007cd8 <quorem+0xf8>
 8007ce8:	613c      	str	r4, [r7, #16]
 8007cea:	e7e7      	b.n	8007cbc <quorem+0xdc>

08007cec <_dtoa_r>:
 8007cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cee:	0016      	movs	r6, r2
 8007cf0:	001f      	movs	r7, r3
 8007cf2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007cf4:	b09b      	sub	sp, #108	; 0x6c
 8007cf6:	9002      	str	r0, [sp, #8]
 8007cf8:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8007cfa:	9606      	str	r6, [sp, #24]
 8007cfc:	9707      	str	r7, [sp, #28]
 8007cfe:	2c00      	cmp	r4, #0
 8007d00:	d108      	bne.n	8007d14 <_dtoa_r+0x28>
 8007d02:	2010      	movs	r0, #16
 8007d04:	f001 f9ea 	bl	80090dc <malloc>
 8007d08:	9b02      	ldr	r3, [sp, #8]
 8007d0a:	6258      	str	r0, [r3, #36]	; 0x24
 8007d0c:	6044      	str	r4, [r0, #4]
 8007d0e:	6084      	str	r4, [r0, #8]
 8007d10:	6004      	str	r4, [r0, #0]
 8007d12:	60c4      	str	r4, [r0, #12]
 8007d14:	9b02      	ldr	r3, [sp, #8]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d18:	6819      	ldr	r1, [r3, #0]
 8007d1a:	2900      	cmp	r1, #0
 8007d1c:	d00b      	beq.n	8007d36 <_dtoa_r+0x4a>
 8007d1e:	685a      	ldr	r2, [r3, #4]
 8007d20:	2301      	movs	r3, #1
 8007d22:	4093      	lsls	r3, r2
 8007d24:	604a      	str	r2, [r1, #4]
 8007d26:	608b      	str	r3, [r1, #8]
 8007d28:	9802      	ldr	r0, [sp, #8]
 8007d2a:	f001 fa36 	bl	800919a <_Bfree>
 8007d2e:	2200      	movs	r2, #0
 8007d30:	9b02      	ldr	r3, [sp, #8]
 8007d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d34:	601a      	str	r2, [r3, #0]
 8007d36:	2f00      	cmp	r7, #0
 8007d38:	da20      	bge.n	8007d7c <_dtoa_r+0x90>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	602b      	str	r3, [r5, #0]
 8007d3e:	007b      	lsls	r3, r7, #1
 8007d40:	085b      	lsrs	r3, r3, #1
 8007d42:	9307      	str	r3, [sp, #28]
 8007d44:	9c07      	ldr	r4, [sp, #28]
 8007d46:	4bb2      	ldr	r3, [pc, #712]	; (8008010 <_dtoa_r+0x324>)
 8007d48:	0022      	movs	r2, r4
 8007d4a:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d4c:	401a      	ands	r2, r3
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d117      	bne.n	8007d82 <_dtoa_r+0x96>
 8007d52:	4bb0      	ldr	r3, [pc, #704]	; (8008014 <_dtoa_r+0x328>)
 8007d54:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007d56:	6013      	str	r3, [r2, #0]
 8007d58:	9b06      	ldr	r3, [sp, #24]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d103      	bne.n	8007d66 <_dtoa_r+0x7a>
 8007d5e:	0324      	lsls	r4, r4, #12
 8007d60:	d101      	bne.n	8007d66 <_dtoa_r+0x7a>
 8007d62:	f000 fd87 	bl	8008874 <_dtoa_r+0xb88>
 8007d66:	4bac      	ldr	r3, [pc, #688]	; (8008018 <_dtoa_r+0x32c>)
 8007d68:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007d6a:	9308      	str	r3, [sp, #32]
 8007d6c:	2a00      	cmp	r2, #0
 8007d6e:	d002      	beq.n	8007d76 <_dtoa_r+0x8a>
 8007d70:	4baa      	ldr	r3, [pc, #680]	; (800801c <_dtoa_r+0x330>)
 8007d72:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007d74:	6013      	str	r3, [r2, #0]
 8007d76:	9808      	ldr	r0, [sp, #32]
 8007d78:	b01b      	add	sp, #108	; 0x6c
 8007d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	602b      	str	r3, [r5, #0]
 8007d80:	e7e0      	b.n	8007d44 <_dtoa_r+0x58>
 8007d82:	9e06      	ldr	r6, [sp, #24]
 8007d84:	9f07      	ldr	r7, [sp, #28]
 8007d86:	2200      	movs	r2, #0
 8007d88:	2300      	movs	r3, #0
 8007d8a:	0030      	movs	r0, r6
 8007d8c:	0039      	movs	r1, r7
 8007d8e:	f7f8 fb51 	bl	8000434 <__aeabi_dcmpeq>
 8007d92:	1e05      	subs	r5, r0, #0
 8007d94:	d00b      	beq.n	8007dae <_dtoa_r+0xc2>
 8007d96:	2301      	movs	r3, #1
 8007d98:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007d9a:	6013      	str	r3, [r2, #0]
 8007d9c:	4ba0      	ldr	r3, [pc, #640]	; (8008020 <_dtoa_r+0x334>)
 8007d9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007da0:	9308      	str	r3, [sp, #32]
 8007da2:	2a00      	cmp	r2, #0
 8007da4:	d0e7      	beq.n	8007d76 <_dtoa_r+0x8a>
 8007da6:	4a9f      	ldr	r2, [pc, #636]	; (8008024 <_dtoa_r+0x338>)
 8007da8:	9924      	ldr	r1, [sp, #144]	; 0x90
 8007daa:	600a      	str	r2, [r1, #0]
 8007dac:	e7e3      	b.n	8007d76 <_dtoa_r+0x8a>
 8007dae:	ab18      	add	r3, sp, #96	; 0x60
 8007db0:	9301      	str	r3, [sp, #4]
 8007db2:	ab19      	add	r3, sp, #100	; 0x64
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	0032      	movs	r2, r6
 8007db8:	003b      	movs	r3, r7
 8007dba:	9802      	ldr	r0, [sp, #8]
 8007dbc:	f001 fcf8 	bl	80097b0 <__d2b>
 8007dc0:	0063      	lsls	r3, r4, #1
 8007dc2:	9003      	str	r0, [sp, #12]
 8007dc4:	0d5b      	lsrs	r3, r3, #21
 8007dc6:	d074      	beq.n	8007eb2 <_dtoa_r+0x1c6>
 8007dc8:	033a      	lsls	r2, r7, #12
 8007dca:	4c97      	ldr	r4, [pc, #604]	; (8008028 <_dtoa_r+0x33c>)
 8007dcc:	0b12      	lsrs	r2, r2, #12
 8007dce:	4314      	orrs	r4, r2
 8007dd0:	0021      	movs	r1, r4
 8007dd2:	4a96      	ldr	r2, [pc, #600]	; (800802c <_dtoa_r+0x340>)
 8007dd4:	0030      	movs	r0, r6
 8007dd6:	9516      	str	r5, [sp, #88]	; 0x58
 8007dd8:	189e      	adds	r6, r3, r2
 8007dda:	2200      	movs	r2, #0
 8007ddc:	4b94      	ldr	r3, [pc, #592]	; (8008030 <_dtoa_r+0x344>)
 8007dde:	f7f9 fe69 	bl	8001ab4 <__aeabi_dsub>
 8007de2:	4a94      	ldr	r2, [pc, #592]	; (8008034 <_dtoa_r+0x348>)
 8007de4:	4b94      	ldr	r3, [pc, #592]	; (8008038 <_dtoa_r+0x34c>)
 8007de6:	f7f9 fbf3 	bl	80015d0 <__aeabi_dmul>
 8007dea:	4a94      	ldr	r2, [pc, #592]	; (800803c <_dtoa_r+0x350>)
 8007dec:	4b94      	ldr	r3, [pc, #592]	; (8008040 <_dtoa_r+0x354>)
 8007dee:	f7f8 fcc9 	bl	8000784 <__aeabi_dadd>
 8007df2:	0004      	movs	r4, r0
 8007df4:	0030      	movs	r0, r6
 8007df6:	000d      	movs	r5, r1
 8007df8:	f7fa f9f6 	bl	80021e8 <__aeabi_i2d>
 8007dfc:	4a91      	ldr	r2, [pc, #580]	; (8008044 <_dtoa_r+0x358>)
 8007dfe:	4b92      	ldr	r3, [pc, #584]	; (8008048 <_dtoa_r+0x35c>)
 8007e00:	f7f9 fbe6 	bl	80015d0 <__aeabi_dmul>
 8007e04:	0002      	movs	r2, r0
 8007e06:	000b      	movs	r3, r1
 8007e08:	0020      	movs	r0, r4
 8007e0a:	0029      	movs	r1, r5
 8007e0c:	f7f8 fcba 	bl	8000784 <__aeabi_dadd>
 8007e10:	0004      	movs	r4, r0
 8007e12:	000d      	movs	r5, r1
 8007e14:	f7fa f9b2 	bl	800217c <__aeabi_d2iz>
 8007e18:	2200      	movs	r2, #0
 8007e1a:	0007      	movs	r7, r0
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	0020      	movs	r0, r4
 8007e20:	0029      	movs	r1, r5
 8007e22:	f7f8 fb0d 	bl	8000440 <__aeabi_dcmplt>
 8007e26:	2800      	cmp	r0, #0
 8007e28:	d009      	beq.n	8007e3e <_dtoa_r+0x152>
 8007e2a:	0038      	movs	r0, r7
 8007e2c:	f7fa f9dc 	bl	80021e8 <__aeabi_i2d>
 8007e30:	002b      	movs	r3, r5
 8007e32:	0022      	movs	r2, r4
 8007e34:	f7f8 fafe 	bl	8000434 <__aeabi_dcmpeq>
 8007e38:	4243      	negs	r3, r0
 8007e3a:	4158      	adcs	r0, r3
 8007e3c:	1a3f      	subs	r7, r7, r0
 8007e3e:	2301      	movs	r3, #1
 8007e40:	9314      	str	r3, [sp, #80]	; 0x50
 8007e42:	2f16      	cmp	r7, #22
 8007e44:	d80d      	bhi.n	8007e62 <_dtoa_r+0x176>
 8007e46:	4981      	ldr	r1, [pc, #516]	; (800804c <_dtoa_r+0x360>)
 8007e48:	00fb      	lsls	r3, r7, #3
 8007e4a:	18c9      	adds	r1, r1, r3
 8007e4c:	6808      	ldr	r0, [r1, #0]
 8007e4e:	6849      	ldr	r1, [r1, #4]
 8007e50:	9a06      	ldr	r2, [sp, #24]
 8007e52:	9b07      	ldr	r3, [sp, #28]
 8007e54:	f7f8 fb08 	bl	8000468 <__aeabi_dcmpgt>
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	d046      	beq.n	8007eea <_dtoa_r+0x1fe>
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	3f01      	subs	r7, #1
 8007e60:	9314      	str	r3, [sp, #80]	; 0x50
 8007e62:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007e64:	1b9e      	subs	r6, r3, r6
 8007e66:	2300      	movs	r3, #0
 8007e68:	930a      	str	r3, [sp, #40]	; 0x28
 8007e6a:	0033      	movs	r3, r6
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e70:	d504      	bpl.n	8007e7c <_dtoa_r+0x190>
 8007e72:	2301      	movs	r3, #1
 8007e74:	1b9b      	subs	r3, r3, r6
 8007e76:	930a      	str	r3, [sp, #40]	; 0x28
 8007e78:	2300      	movs	r3, #0
 8007e7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e7c:	2f00      	cmp	r7, #0
 8007e7e:	db36      	blt.n	8007eee <_dtoa_r+0x202>
 8007e80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e82:	9711      	str	r7, [sp, #68]	; 0x44
 8007e84:	19db      	adds	r3, r3, r7
 8007e86:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e88:	2300      	movs	r3, #0
 8007e8a:	9304      	str	r3, [sp, #16]
 8007e8c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007e8e:	2401      	movs	r4, #1
 8007e90:	2b09      	cmp	r3, #9
 8007e92:	d900      	bls.n	8007e96 <_dtoa_r+0x1aa>
 8007e94:	e084      	b.n	8007fa0 <_dtoa_r+0x2b4>
 8007e96:	2b05      	cmp	r3, #5
 8007e98:	dd02      	ble.n	8007ea0 <_dtoa_r+0x1b4>
 8007e9a:	2400      	movs	r4, #0
 8007e9c:	3b04      	subs	r3, #4
 8007e9e:	9320      	str	r3, [sp, #128]	; 0x80
 8007ea0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007ea2:	1e98      	subs	r0, r3, #2
 8007ea4:	2803      	cmp	r0, #3
 8007ea6:	d900      	bls.n	8007eaa <_dtoa_r+0x1be>
 8007ea8:	e084      	b.n	8007fb4 <_dtoa_r+0x2c8>
 8007eaa:	f7f8 f933 	bl	8000114 <__gnu_thumb1_case_uqi>
 8007eae:	7775      	.short	0x7775
 8007eb0:	6a28      	.short	0x6a28
 8007eb2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007eb4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007eb6:	189e      	adds	r6, r3, r2
 8007eb8:	4b65      	ldr	r3, [pc, #404]	; (8008050 <_dtoa_r+0x364>)
 8007eba:	18f2      	adds	r2, r6, r3
 8007ebc:	2a20      	cmp	r2, #32
 8007ebe:	dd0f      	ble.n	8007ee0 <_dtoa_r+0x1f4>
 8007ec0:	2340      	movs	r3, #64	; 0x40
 8007ec2:	1a9b      	subs	r3, r3, r2
 8007ec4:	409c      	lsls	r4, r3
 8007ec6:	4b63      	ldr	r3, [pc, #396]	; (8008054 <_dtoa_r+0x368>)
 8007ec8:	9806      	ldr	r0, [sp, #24]
 8007eca:	18f3      	adds	r3, r6, r3
 8007ecc:	40d8      	lsrs	r0, r3
 8007ece:	4320      	orrs	r0, r4
 8007ed0:	f7fa f9c4 	bl	800225c <__aeabi_ui2d>
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	4c60      	ldr	r4, [pc, #384]	; (8008058 <_dtoa_r+0x36c>)
 8007ed8:	3e01      	subs	r6, #1
 8007eda:	1909      	adds	r1, r1, r4
 8007edc:	9316      	str	r3, [sp, #88]	; 0x58
 8007ede:	e77c      	b.n	8007dda <_dtoa_r+0xee>
 8007ee0:	2320      	movs	r3, #32
 8007ee2:	9806      	ldr	r0, [sp, #24]
 8007ee4:	1a9b      	subs	r3, r3, r2
 8007ee6:	4098      	lsls	r0, r3
 8007ee8:	e7f2      	b.n	8007ed0 <_dtoa_r+0x1e4>
 8007eea:	9014      	str	r0, [sp, #80]	; 0x50
 8007eec:	e7b9      	b.n	8007e62 <_dtoa_r+0x176>
 8007eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ef0:	1bdb      	subs	r3, r3, r7
 8007ef2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ef4:	427b      	negs	r3, r7
 8007ef6:	9304      	str	r3, [sp, #16]
 8007ef8:	2300      	movs	r3, #0
 8007efa:	9311      	str	r3, [sp, #68]	; 0x44
 8007efc:	e7c6      	b.n	8007e8c <_dtoa_r+0x1a0>
 8007efe:	2301      	movs	r3, #1
 8007f00:	930d      	str	r3, [sp, #52]	; 0x34
 8007f02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	dd59      	ble.n	8007fbc <_dtoa_r+0x2d0>
 8007f08:	930c      	str	r3, [sp, #48]	; 0x30
 8007f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f0c:	9a02      	ldr	r2, [sp, #8]
 8007f0e:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8007f10:	2200      	movs	r2, #0
 8007f12:	606a      	str	r2, [r5, #4]
 8007f14:	3204      	adds	r2, #4
 8007f16:	0010      	movs	r0, r2
 8007f18:	3014      	adds	r0, #20
 8007f1a:	6869      	ldr	r1, [r5, #4]
 8007f1c:	4298      	cmp	r0, r3
 8007f1e:	d952      	bls.n	8007fc6 <_dtoa_r+0x2da>
 8007f20:	9802      	ldr	r0, [sp, #8]
 8007f22:	f001 f902 	bl	800912a <_Balloc>
 8007f26:	9b02      	ldr	r3, [sp, #8]
 8007f28:	6028      	str	r0, [r5, #0]
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	9308      	str	r3, [sp, #32]
 8007f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f32:	2b0e      	cmp	r3, #14
 8007f34:	d900      	bls.n	8007f38 <_dtoa_r+0x24c>
 8007f36:	e10a      	b.n	800814e <_dtoa_r+0x462>
 8007f38:	2c00      	cmp	r4, #0
 8007f3a:	d100      	bne.n	8007f3e <_dtoa_r+0x252>
 8007f3c:	e107      	b.n	800814e <_dtoa_r+0x462>
 8007f3e:	9b06      	ldr	r3, [sp, #24]
 8007f40:	9c07      	ldr	r4, [sp, #28]
 8007f42:	9312      	str	r3, [sp, #72]	; 0x48
 8007f44:	9413      	str	r4, [sp, #76]	; 0x4c
 8007f46:	2f00      	cmp	r7, #0
 8007f48:	dc00      	bgt.n	8007f4c <_dtoa_r+0x260>
 8007f4a:	e089      	b.n	8008060 <_dtoa_r+0x374>
 8007f4c:	210f      	movs	r1, #15
 8007f4e:	003a      	movs	r2, r7
 8007f50:	4b3e      	ldr	r3, [pc, #248]	; (800804c <_dtoa_r+0x360>)
 8007f52:	400a      	ands	r2, r1
 8007f54:	00d2      	lsls	r2, r2, #3
 8007f56:	189b      	adds	r3, r3, r2
 8007f58:	681d      	ldr	r5, [r3, #0]
 8007f5a:	685e      	ldr	r6, [r3, #4]
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	113c      	asrs	r4, r7, #4
 8007f60:	930e      	str	r3, [sp, #56]	; 0x38
 8007f62:	06e3      	lsls	r3, r4, #27
 8007f64:	d50b      	bpl.n	8007f7e <_dtoa_r+0x292>
 8007f66:	4b3d      	ldr	r3, [pc, #244]	; (800805c <_dtoa_r+0x370>)
 8007f68:	400c      	ands	r4, r1
 8007f6a:	6a1a      	ldr	r2, [r3, #32]
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007f70:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007f72:	f7f8 ff23 	bl	8000dbc <__aeabi_ddiv>
 8007f76:	2303      	movs	r3, #3
 8007f78:	9006      	str	r0, [sp, #24]
 8007f7a:	9107      	str	r1, [sp, #28]
 8007f7c:	930e      	str	r3, [sp, #56]	; 0x38
 8007f7e:	2300      	movs	r3, #0
 8007f80:	e03a      	b.n	8007ff8 <_dtoa_r+0x30c>
 8007f82:	2301      	movs	r3, #1
 8007f84:	930d      	str	r3, [sp, #52]	; 0x34
 8007f86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f88:	18fb      	adds	r3, r7, r3
 8007f8a:	930c      	str	r3, [sp, #48]	; 0x30
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	dcbb      	bgt.n	8007f0c <_dtoa_r+0x220>
 8007f94:	2301      	movs	r3, #1
 8007f96:	e7b9      	b.n	8007f0c <_dtoa_r+0x220>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	e7b1      	b.n	8007f00 <_dtoa_r+0x214>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	e7f1      	b.n	8007f84 <_dtoa_r+0x298>
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	940d      	str	r4, [sp, #52]	; 0x34
 8007fa4:	9320      	str	r3, [sp, #128]	; 0x80
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	2200      	movs	r2, #0
 8007faa:	930c      	str	r3, [sp, #48]	; 0x30
 8007fac:	9309      	str	r3, [sp, #36]	; 0x24
 8007fae:	3313      	adds	r3, #19
 8007fb0:	9221      	str	r2, [sp, #132]	; 0x84
 8007fb2:	e7ab      	b.n	8007f0c <_dtoa_r+0x220>
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	930d      	str	r3, [sp, #52]	; 0x34
 8007fb8:	3b02      	subs	r3, #2
 8007fba:	e7f5      	b.n	8007fa8 <_dtoa_r+0x2bc>
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	930c      	str	r3, [sp, #48]	; 0x30
 8007fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8007fc2:	001a      	movs	r2, r3
 8007fc4:	e7f4      	b.n	8007fb0 <_dtoa_r+0x2c4>
 8007fc6:	3101      	adds	r1, #1
 8007fc8:	6069      	str	r1, [r5, #4]
 8007fca:	0052      	lsls	r2, r2, #1
 8007fcc:	e7a3      	b.n	8007f16 <_dtoa_r+0x22a>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	421c      	tst	r4, r3
 8007fd2:	d00e      	beq.n	8007ff2 <_dtoa_r+0x306>
 8007fd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fd6:	4a21      	ldr	r2, [pc, #132]	; (800805c <_dtoa_r+0x370>)
 8007fd8:	3301      	adds	r3, #1
 8007fda:	930e      	str	r3, [sp, #56]	; 0x38
 8007fdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fde:	0028      	movs	r0, r5
 8007fe0:	00db      	lsls	r3, r3, #3
 8007fe2:	189b      	adds	r3, r3, r2
 8007fe4:	0031      	movs	r1, r6
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f7f9 faf1 	bl	80015d0 <__aeabi_dmul>
 8007fee:	0005      	movs	r5, r0
 8007ff0:	000e      	movs	r6, r1
 8007ff2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ff4:	1064      	asrs	r4, r4, #1
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	9310      	str	r3, [sp, #64]	; 0x40
 8007ffa:	2c00      	cmp	r4, #0
 8007ffc:	d1e7      	bne.n	8007fce <_dtoa_r+0x2e2>
 8007ffe:	9806      	ldr	r0, [sp, #24]
 8008000:	9907      	ldr	r1, [sp, #28]
 8008002:	002a      	movs	r2, r5
 8008004:	0033      	movs	r3, r6
 8008006:	f7f8 fed9 	bl	8000dbc <__aeabi_ddiv>
 800800a:	9006      	str	r0, [sp, #24]
 800800c:	9107      	str	r1, [sp, #28]
 800800e:	e042      	b.n	8008096 <_dtoa_r+0x3aa>
 8008010:	7ff00000 	.word	0x7ff00000
 8008014:	0000270f 	.word	0x0000270f
 8008018:	0800a831 	.word	0x0800a831
 800801c:	0800a834 	.word	0x0800a834
 8008020:	0800a7ac 	.word	0x0800a7ac
 8008024:	0800a7ad 	.word	0x0800a7ad
 8008028:	3ff00000 	.word	0x3ff00000
 800802c:	fffffc01 	.word	0xfffffc01
 8008030:	3ff80000 	.word	0x3ff80000
 8008034:	636f4361 	.word	0x636f4361
 8008038:	3fd287a7 	.word	0x3fd287a7
 800803c:	8b60c8b3 	.word	0x8b60c8b3
 8008040:	3fc68a28 	.word	0x3fc68a28
 8008044:	509f79fb 	.word	0x509f79fb
 8008048:	3fd34413 	.word	0x3fd34413
 800804c:	0800a8d0 	.word	0x0800a8d0
 8008050:	00000432 	.word	0x00000432
 8008054:	00000412 	.word	0x00000412
 8008058:	fe100000 	.word	0xfe100000
 800805c:	0800a8a8 	.word	0x0800a8a8
 8008060:	2302      	movs	r3, #2
 8008062:	930e      	str	r3, [sp, #56]	; 0x38
 8008064:	2f00      	cmp	r7, #0
 8008066:	d016      	beq.n	8008096 <_dtoa_r+0x3aa>
 8008068:	9812      	ldr	r0, [sp, #72]	; 0x48
 800806a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800806c:	427c      	negs	r4, r7
 800806e:	330d      	adds	r3, #13
 8008070:	4023      	ands	r3, r4
 8008072:	4ace      	ldr	r2, [pc, #824]	; (80083ac <_dtoa_r+0x6c0>)
 8008074:	00db      	lsls	r3, r3, #3
 8008076:	18d3      	adds	r3, r2, r3
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f7f9 faa8 	bl	80015d0 <__aeabi_dmul>
 8008080:	2300      	movs	r3, #0
 8008082:	2601      	movs	r6, #1
 8008084:	001d      	movs	r5, r3
 8008086:	9006      	str	r0, [sp, #24]
 8008088:	9107      	str	r1, [sp, #28]
 800808a:	1124      	asrs	r4, r4, #4
 800808c:	2c00      	cmp	r4, #0
 800808e:	d000      	beq.n	8008092 <_dtoa_r+0x3a6>
 8008090:	e08c      	b.n	80081ac <_dtoa_r+0x4c0>
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1b9      	bne.n	800800a <_dtoa_r+0x31e>
 8008096:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008098:	2b00      	cmp	r3, #0
 800809a:	d100      	bne.n	800809e <_dtoa_r+0x3b2>
 800809c:	e096      	b.n	80081cc <_dtoa_r+0x4e0>
 800809e:	9c06      	ldr	r4, [sp, #24]
 80080a0:	9d07      	ldr	r5, [sp, #28]
 80080a2:	2200      	movs	r2, #0
 80080a4:	4bc2      	ldr	r3, [pc, #776]	; (80083b0 <_dtoa_r+0x6c4>)
 80080a6:	0020      	movs	r0, r4
 80080a8:	0029      	movs	r1, r5
 80080aa:	f7f8 f9c9 	bl	8000440 <__aeabi_dcmplt>
 80080ae:	2800      	cmp	r0, #0
 80080b0:	d100      	bne.n	80080b4 <_dtoa_r+0x3c8>
 80080b2:	e08b      	b.n	80081cc <_dtoa_r+0x4e0>
 80080b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d100      	bne.n	80080bc <_dtoa_r+0x3d0>
 80080ba:	e087      	b.n	80081cc <_dtoa_r+0x4e0>
 80080bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080be:	2b00      	cmp	r3, #0
 80080c0:	dd41      	ble.n	8008146 <_dtoa_r+0x45a>
 80080c2:	4bbc      	ldr	r3, [pc, #752]	; (80083b4 <_dtoa_r+0x6c8>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	0020      	movs	r0, r4
 80080c8:	0029      	movs	r1, r5
 80080ca:	f7f9 fa81 	bl	80015d0 <__aeabi_dmul>
 80080ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080d0:	9006      	str	r0, [sp, #24]
 80080d2:	9107      	str	r1, [sp, #28]
 80080d4:	3301      	adds	r3, #1
 80080d6:	930e      	str	r3, [sp, #56]	; 0x38
 80080d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080da:	1e7e      	subs	r6, r7, #1
 80080dc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80080de:	9310      	str	r3, [sp, #64]	; 0x40
 80080e0:	f7fa f882 	bl	80021e8 <__aeabi_i2d>
 80080e4:	9a06      	ldr	r2, [sp, #24]
 80080e6:	9b07      	ldr	r3, [sp, #28]
 80080e8:	f7f9 fa72 	bl	80015d0 <__aeabi_dmul>
 80080ec:	2200      	movs	r2, #0
 80080ee:	4bb2      	ldr	r3, [pc, #712]	; (80083b8 <_dtoa_r+0x6cc>)
 80080f0:	f7f8 fb48 	bl	8000784 <__aeabi_dadd>
 80080f4:	4ab1      	ldr	r2, [pc, #708]	; (80083bc <_dtoa_r+0x6d0>)
 80080f6:	900e      	str	r0, [sp, #56]	; 0x38
 80080f8:	910f      	str	r1, [sp, #60]	; 0x3c
 80080fa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80080fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80080fe:	4694      	mov	ip, r2
 8008100:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008102:	4463      	add	r3, ip
 8008104:	9315      	str	r3, [sp, #84]	; 0x54
 8008106:	001d      	movs	r5, r3
 8008108:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800810a:	2b00      	cmp	r3, #0
 800810c:	d161      	bne.n	80081d2 <_dtoa_r+0x4e6>
 800810e:	9806      	ldr	r0, [sp, #24]
 8008110:	9907      	ldr	r1, [sp, #28]
 8008112:	2200      	movs	r2, #0
 8008114:	4baa      	ldr	r3, [pc, #680]	; (80083c0 <_dtoa_r+0x6d4>)
 8008116:	f7f9 fccd 	bl	8001ab4 <__aeabi_dsub>
 800811a:	0022      	movs	r2, r4
 800811c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800811e:	9006      	str	r0, [sp, #24]
 8008120:	9107      	str	r1, [sp, #28]
 8008122:	f7f8 f9a1 	bl	8000468 <__aeabi_dcmpgt>
 8008126:	2800      	cmp	r0, #0
 8008128:	d000      	beq.n	800812c <_dtoa_r+0x440>
 800812a:	e2a8      	b.n	800867e <_dtoa_r+0x992>
 800812c:	48a5      	ldr	r0, [pc, #660]	; (80083c4 <_dtoa_r+0x6d8>)
 800812e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008130:	4684      	mov	ip, r0
 8008132:	4461      	add	r1, ip
 8008134:	000b      	movs	r3, r1
 8008136:	9806      	ldr	r0, [sp, #24]
 8008138:	9907      	ldr	r1, [sp, #28]
 800813a:	0022      	movs	r2, r4
 800813c:	f7f8 f980 	bl	8000440 <__aeabi_dcmplt>
 8008140:	2800      	cmp	r0, #0
 8008142:	d000      	beq.n	8008146 <_dtoa_r+0x45a>
 8008144:	e295      	b.n	8008672 <_dtoa_r+0x986>
 8008146:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008148:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800814a:	9306      	str	r3, [sp, #24]
 800814c:	9407      	str	r4, [sp, #28]
 800814e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008150:	2b00      	cmp	r3, #0
 8008152:	da00      	bge.n	8008156 <_dtoa_r+0x46a>
 8008154:	e15c      	b.n	8008410 <_dtoa_r+0x724>
 8008156:	2f0e      	cmp	r7, #14
 8008158:	dd00      	ble.n	800815c <_dtoa_r+0x470>
 800815a:	e159      	b.n	8008410 <_dtoa_r+0x724>
 800815c:	4b93      	ldr	r3, [pc, #588]	; (80083ac <_dtoa_r+0x6c0>)
 800815e:	00fa      	lsls	r2, r7, #3
 8008160:	189b      	adds	r3, r3, r2
 8008162:	685c      	ldr	r4, [r3, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	9304      	str	r3, [sp, #16]
 8008168:	9405      	str	r4, [sp, #20]
 800816a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800816c:	2b00      	cmp	r3, #0
 800816e:	db00      	blt.n	8008172 <_dtoa_r+0x486>
 8008170:	e0d8      	b.n	8008324 <_dtoa_r+0x638>
 8008172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008174:	2b00      	cmp	r3, #0
 8008176:	dd00      	ble.n	800817a <_dtoa_r+0x48e>
 8008178:	e0d4      	b.n	8008324 <_dtoa_r+0x638>
 800817a:	d000      	beq.n	800817e <_dtoa_r+0x492>
 800817c:	e27d      	b.n	800867a <_dtoa_r+0x98e>
 800817e:	9804      	ldr	r0, [sp, #16]
 8008180:	9905      	ldr	r1, [sp, #20]
 8008182:	2200      	movs	r2, #0
 8008184:	4b8e      	ldr	r3, [pc, #568]	; (80083c0 <_dtoa_r+0x6d4>)
 8008186:	f7f9 fa23 	bl	80015d0 <__aeabi_dmul>
 800818a:	9a06      	ldr	r2, [sp, #24]
 800818c:	9b07      	ldr	r3, [sp, #28]
 800818e:	f7f8 f975 	bl	800047c <__aeabi_dcmpge>
 8008192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008194:	9304      	str	r3, [sp, #16]
 8008196:	001e      	movs	r6, r3
 8008198:	2800      	cmp	r0, #0
 800819a:	d000      	beq.n	800819e <_dtoa_r+0x4b2>
 800819c:	e24f      	b.n	800863e <_dtoa_r+0x952>
 800819e:	9b08      	ldr	r3, [sp, #32]
 80081a0:	9a08      	ldr	r2, [sp, #32]
 80081a2:	1c5d      	adds	r5, r3, #1
 80081a4:	2331      	movs	r3, #49	; 0x31
 80081a6:	3701      	adds	r7, #1
 80081a8:	7013      	strb	r3, [r2, #0]
 80081aa:	e24b      	b.n	8008644 <_dtoa_r+0x958>
 80081ac:	4234      	tst	r4, r6
 80081ae:	d00a      	beq.n	80081c6 <_dtoa_r+0x4da>
 80081b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081b2:	4a85      	ldr	r2, [pc, #532]	; (80083c8 <_dtoa_r+0x6dc>)
 80081b4:	3301      	adds	r3, #1
 80081b6:	930e      	str	r3, [sp, #56]	; 0x38
 80081b8:	00eb      	lsls	r3, r5, #3
 80081ba:	189b      	adds	r3, r3, r2
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f7f9 fa06 	bl	80015d0 <__aeabi_dmul>
 80081c4:	0033      	movs	r3, r6
 80081c6:	1064      	asrs	r4, r4, #1
 80081c8:	3501      	adds	r5, #1
 80081ca:	e75f      	b.n	800808c <_dtoa_r+0x3a0>
 80081cc:	003e      	movs	r6, r7
 80081ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d0:	e784      	b.n	80080dc <_dtoa_r+0x3f0>
 80081d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081d4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80081d6:	1e5a      	subs	r2, r3, #1
 80081d8:	4b74      	ldr	r3, [pc, #464]	; (80083ac <_dtoa_r+0x6c0>)
 80081da:	00d2      	lsls	r2, r2, #3
 80081dc:	189b      	adds	r3, r3, r2
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	2900      	cmp	r1, #0
 80081e4:	d049      	beq.n	800827a <_dtoa_r+0x58e>
 80081e6:	2000      	movs	r0, #0
 80081e8:	4978      	ldr	r1, [pc, #480]	; (80083cc <_dtoa_r+0x6e0>)
 80081ea:	f7f8 fde7 	bl	8000dbc <__aeabi_ddiv>
 80081ee:	002b      	movs	r3, r5
 80081f0:	0022      	movs	r2, r4
 80081f2:	f7f9 fc5f 	bl	8001ab4 <__aeabi_dsub>
 80081f6:	9b08      	ldr	r3, [sp, #32]
 80081f8:	900e      	str	r0, [sp, #56]	; 0x38
 80081fa:	910f      	str	r1, [sp, #60]	; 0x3c
 80081fc:	9315      	str	r3, [sp, #84]	; 0x54
 80081fe:	9806      	ldr	r0, [sp, #24]
 8008200:	9907      	ldr	r1, [sp, #28]
 8008202:	f7f9 ffbb 	bl	800217c <__aeabi_d2iz>
 8008206:	0004      	movs	r4, r0
 8008208:	f7f9 ffee 	bl	80021e8 <__aeabi_i2d>
 800820c:	0002      	movs	r2, r0
 800820e:	000b      	movs	r3, r1
 8008210:	9806      	ldr	r0, [sp, #24]
 8008212:	9907      	ldr	r1, [sp, #28]
 8008214:	f7f9 fc4e 	bl	8001ab4 <__aeabi_dsub>
 8008218:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800821a:	3430      	adds	r4, #48	; 0x30
 800821c:	1c5d      	adds	r5, r3, #1
 800821e:	701c      	strb	r4, [r3, #0]
 8008220:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008222:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008224:	9006      	str	r0, [sp, #24]
 8008226:	9107      	str	r1, [sp, #28]
 8008228:	f7f8 f90a 	bl	8000440 <__aeabi_dcmplt>
 800822c:	2800      	cmp	r0, #0
 800822e:	d16c      	bne.n	800830a <_dtoa_r+0x61e>
 8008230:	9a06      	ldr	r2, [sp, #24]
 8008232:	9b07      	ldr	r3, [sp, #28]
 8008234:	2000      	movs	r0, #0
 8008236:	495e      	ldr	r1, [pc, #376]	; (80083b0 <_dtoa_r+0x6c4>)
 8008238:	f7f9 fc3c 	bl	8001ab4 <__aeabi_dsub>
 800823c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800823e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008240:	f7f8 f8fe 	bl	8000440 <__aeabi_dcmplt>
 8008244:	2800      	cmp	r0, #0
 8008246:	d000      	beq.n	800824a <_dtoa_r+0x55e>
 8008248:	e0c3      	b.n	80083d2 <_dtoa_r+0x6e6>
 800824a:	9b08      	ldr	r3, [sp, #32]
 800824c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800824e:	1aeb      	subs	r3, r5, r3
 8008250:	429a      	cmp	r2, r3
 8008252:	dc00      	bgt.n	8008256 <_dtoa_r+0x56a>
 8008254:	e777      	b.n	8008146 <_dtoa_r+0x45a>
 8008256:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008258:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800825a:	2200      	movs	r2, #0
 800825c:	4b55      	ldr	r3, [pc, #340]	; (80083b4 <_dtoa_r+0x6c8>)
 800825e:	f7f9 f9b7 	bl	80015d0 <__aeabi_dmul>
 8008262:	2200      	movs	r2, #0
 8008264:	900e      	str	r0, [sp, #56]	; 0x38
 8008266:	910f      	str	r1, [sp, #60]	; 0x3c
 8008268:	9806      	ldr	r0, [sp, #24]
 800826a:	9907      	ldr	r1, [sp, #28]
 800826c:	4b51      	ldr	r3, [pc, #324]	; (80083b4 <_dtoa_r+0x6c8>)
 800826e:	f7f9 f9af 	bl	80015d0 <__aeabi_dmul>
 8008272:	9515      	str	r5, [sp, #84]	; 0x54
 8008274:	9006      	str	r0, [sp, #24]
 8008276:	9107      	str	r1, [sp, #28]
 8008278:	e7c1      	b.n	80081fe <_dtoa_r+0x512>
 800827a:	0020      	movs	r0, r4
 800827c:	0029      	movs	r1, r5
 800827e:	f7f9 f9a7 	bl	80015d0 <__aeabi_dmul>
 8008282:	9c08      	ldr	r4, [sp, #32]
 8008284:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008286:	0023      	movs	r3, r4
 8008288:	4694      	mov	ip, r2
 800828a:	900e      	str	r0, [sp, #56]	; 0x38
 800828c:	910f      	str	r1, [sp, #60]	; 0x3c
 800828e:	4463      	add	r3, ip
 8008290:	9315      	str	r3, [sp, #84]	; 0x54
 8008292:	9806      	ldr	r0, [sp, #24]
 8008294:	9907      	ldr	r1, [sp, #28]
 8008296:	f7f9 ff71 	bl	800217c <__aeabi_d2iz>
 800829a:	0005      	movs	r5, r0
 800829c:	f7f9 ffa4 	bl	80021e8 <__aeabi_i2d>
 80082a0:	000b      	movs	r3, r1
 80082a2:	0002      	movs	r2, r0
 80082a4:	9806      	ldr	r0, [sp, #24]
 80082a6:	9907      	ldr	r1, [sp, #28]
 80082a8:	f7f9 fc04 	bl	8001ab4 <__aeabi_dsub>
 80082ac:	3530      	adds	r5, #48	; 0x30
 80082ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082b0:	7025      	strb	r5, [r4, #0]
 80082b2:	3401      	adds	r4, #1
 80082b4:	9006      	str	r0, [sp, #24]
 80082b6:	9107      	str	r1, [sp, #28]
 80082b8:	42a3      	cmp	r3, r4
 80082ba:	d12a      	bne.n	8008312 <_dtoa_r+0x626>
 80082bc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80082be:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80082c0:	9a08      	ldr	r2, [sp, #32]
 80082c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082c4:	4694      	mov	ip, r2
 80082c6:	4463      	add	r3, ip
 80082c8:	2200      	movs	r2, #0
 80082ca:	001d      	movs	r5, r3
 80082cc:	4b3f      	ldr	r3, [pc, #252]	; (80083cc <_dtoa_r+0x6e0>)
 80082ce:	f7f8 fa59 	bl	8000784 <__aeabi_dadd>
 80082d2:	0002      	movs	r2, r0
 80082d4:	000b      	movs	r3, r1
 80082d6:	9806      	ldr	r0, [sp, #24]
 80082d8:	9907      	ldr	r1, [sp, #28]
 80082da:	f7f8 f8c5 	bl	8000468 <__aeabi_dcmpgt>
 80082de:	2800      	cmp	r0, #0
 80082e0:	d000      	beq.n	80082e4 <_dtoa_r+0x5f8>
 80082e2:	e076      	b.n	80083d2 <_dtoa_r+0x6e6>
 80082e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082e8:	2000      	movs	r0, #0
 80082ea:	4938      	ldr	r1, [pc, #224]	; (80083cc <_dtoa_r+0x6e0>)
 80082ec:	f7f9 fbe2 	bl	8001ab4 <__aeabi_dsub>
 80082f0:	0002      	movs	r2, r0
 80082f2:	000b      	movs	r3, r1
 80082f4:	9806      	ldr	r0, [sp, #24]
 80082f6:	9907      	ldr	r1, [sp, #28]
 80082f8:	f7f8 f8a2 	bl	8000440 <__aeabi_dcmplt>
 80082fc:	2800      	cmp	r0, #0
 80082fe:	d100      	bne.n	8008302 <_dtoa_r+0x616>
 8008300:	e721      	b.n	8008146 <_dtoa_r+0x45a>
 8008302:	1e6b      	subs	r3, r5, #1
 8008304:	781a      	ldrb	r2, [r3, #0]
 8008306:	2a30      	cmp	r2, #48	; 0x30
 8008308:	d001      	beq.n	800830e <_dtoa_r+0x622>
 800830a:	0037      	movs	r7, r6
 800830c:	e03f      	b.n	800838e <_dtoa_r+0x6a2>
 800830e:	001d      	movs	r5, r3
 8008310:	e7f7      	b.n	8008302 <_dtoa_r+0x616>
 8008312:	9806      	ldr	r0, [sp, #24]
 8008314:	9907      	ldr	r1, [sp, #28]
 8008316:	2200      	movs	r2, #0
 8008318:	4b26      	ldr	r3, [pc, #152]	; (80083b4 <_dtoa_r+0x6c8>)
 800831a:	f7f9 f959 	bl	80015d0 <__aeabi_dmul>
 800831e:	9006      	str	r0, [sp, #24]
 8008320:	9107      	str	r1, [sp, #28]
 8008322:	e7b6      	b.n	8008292 <_dtoa_r+0x5a6>
 8008324:	9e08      	ldr	r6, [sp, #32]
 8008326:	9a04      	ldr	r2, [sp, #16]
 8008328:	9b05      	ldr	r3, [sp, #20]
 800832a:	9806      	ldr	r0, [sp, #24]
 800832c:	9907      	ldr	r1, [sp, #28]
 800832e:	f7f8 fd45 	bl	8000dbc <__aeabi_ddiv>
 8008332:	f7f9 ff23 	bl	800217c <__aeabi_d2iz>
 8008336:	0004      	movs	r4, r0
 8008338:	f7f9 ff56 	bl	80021e8 <__aeabi_i2d>
 800833c:	9a04      	ldr	r2, [sp, #16]
 800833e:	9b05      	ldr	r3, [sp, #20]
 8008340:	f7f9 f946 	bl	80015d0 <__aeabi_dmul>
 8008344:	0002      	movs	r2, r0
 8008346:	000b      	movs	r3, r1
 8008348:	9806      	ldr	r0, [sp, #24]
 800834a:	9907      	ldr	r1, [sp, #28]
 800834c:	f7f9 fbb2 	bl	8001ab4 <__aeabi_dsub>
 8008350:	0023      	movs	r3, r4
 8008352:	3330      	adds	r3, #48	; 0x30
 8008354:	7033      	strb	r3, [r6, #0]
 8008356:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008358:	9b08      	ldr	r3, [sp, #32]
 800835a:	1c75      	adds	r5, r6, #1
 800835c:	1aeb      	subs	r3, r5, r3
 800835e:	429a      	cmp	r2, r3
 8008360:	d148      	bne.n	80083f4 <_dtoa_r+0x708>
 8008362:	0002      	movs	r2, r0
 8008364:	000b      	movs	r3, r1
 8008366:	f7f8 fa0d 	bl	8000784 <__aeabi_dadd>
 800836a:	9a04      	ldr	r2, [sp, #16]
 800836c:	9b05      	ldr	r3, [sp, #20]
 800836e:	9006      	str	r0, [sp, #24]
 8008370:	9107      	str	r1, [sp, #28]
 8008372:	f7f8 f879 	bl	8000468 <__aeabi_dcmpgt>
 8008376:	2800      	cmp	r0, #0
 8008378:	d12a      	bne.n	80083d0 <_dtoa_r+0x6e4>
 800837a:	9a04      	ldr	r2, [sp, #16]
 800837c:	9b05      	ldr	r3, [sp, #20]
 800837e:	9806      	ldr	r0, [sp, #24]
 8008380:	9907      	ldr	r1, [sp, #28]
 8008382:	f7f8 f857 	bl	8000434 <__aeabi_dcmpeq>
 8008386:	2800      	cmp	r0, #0
 8008388:	d001      	beq.n	800838e <_dtoa_r+0x6a2>
 800838a:	07e3      	lsls	r3, r4, #31
 800838c:	d420      	bmi.n	80083d0 <_dtoa_r+0x6e4>
 800838e:	9903      	ldr	r1, [sp, #12]
 8008390:	9802      	ldr	r0, [sp, #8]
 8008392:	f000 ff02 	bl	800919a <_Bfree>
 8008396:	2300      	movs	r3, #0
 8008398:	702b      	strb	r3, [r5, #0]
 800839a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800839c:	3701      	adds	r7, #1
 800839e:	601f      	str	r7, [r3, #0]
 80083a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d100      	bne.n	80083a8 <_dtoa_r+0x6bc>
 80083a6:	e4e6      	b.n	8007d76 <_dtoa_r+0x8a>
 80083a8:	601d      	str	r5, [r3, #0]
 80083aa:	e4e4      	b.n	8007d76 <_dtoa_r+0x8a>
 80083ac:	0800a8d0 	.word	0x0800a8d0
 80083b0:	3ff00000 	.word	0x3ff00000
 80083b4:	40240000 	.word	0x40240000
 80083b8:	401c0000 	.word	0x401c0000
 80083bc:	fcc00000 	.word	0xfcc00000
 80083c0:	40140000 	.word	0x40140000
 80083c4:	7cc00000 	.word	0x7cc00000
 80083c8:	0800a8a8 	.word	0x0800a8a8
 80083cc:	3fe00000 	.word	0x3fe00000
 80083d0:	003e      	movs	r6, r7
 80083d2:	1e6b      	subs	r3, r5, #1
 80083d4:	781a      	ldrb	r2, [r3, #0]
 80083d6:	2a39      	cmp	r2, #57	; 0x39
 80083d8:	d106      	bne.n	80083e8 <_dtoa_r+0x6fc>
 80083da:	9a08      	ldr	r2, [sp, #32]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d107      	bne.n	80083f0 <_dtoa_r+0x704>
 80083e0:	2330      	movs	r3, #48	; 0x30
 80083e2:	7013      	strb	r3, [r2, #0]
 80083e4:	0013      	movs	r3, r2
 80083e6:	3601      	adds	r6, #1
 80083e8:	781a      	ldrb	r2, [r3, #0]
 80083ea:	3201      	adds	r2, #1
 80083ec:	701a      	strb	r2, [r3, #0]
 80083ee:	e78c      	b.n	800830a <_dtoa_r+0x61e>
 80083f0:	001d      	movs	r5, r3
 80083f2:	e7ee      	b.n	80083d2 <_dtoa_r+0x6e6>
 80083f4:	2200      	movs	r2, #0
 80083f6:	4ba4      	ldr	r3, [pc, #656]	; (8008688 <_dtoa_r+0x99c>)
 80083f8:	f7f9 f8ea 	bl	80015d0 <__aeabi_dmul>
 80083fc:	2200      	movs	r2, #0
 80083fe:	2300      	movs	r3, #0
 8008400:	9006      	str	r0, [sp, #24]
 8008402:	9107      	str	r1, [sp, #28]
 8008404:	002e      	movs	r6, r5
 8008406:	f7f8 f815 	bl	8000434 <__aeabi_dcmpeq>
 800840a:	2800      	cmp	r0, #0
 800840c:	d08b      	beq.n	8008326 <_dtoa_r+0x63a>
 800840e:	e7be      	b.n	800838e <_dtoa_r+0x6a2>
 8008410:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008412:	2a00      	cmp	r2, #0
 8008414:	d100      	bne.n	8008418 <_dtoa_r+0x72c>
 8008416:	e0da      	b.n	80085ce <_dtoa_r+0x8e2>
 8008418:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800841a:	2a01      	cmp	r2, #1
 800841c:	dd00      	ble.n	8008420 <_dtoa_r+0x734>
 800841e:	e0bd      	b.n	800859c <_dtoa_r+0x8b0>
 8008420:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008422:	2a00      	cmp	r2, #0
 8008424:	d100      	bne.n	8008428 <_dtoa_r+0x73c>
 8008426:	e0b5      	b.n	8008594 <_dtoa_r+0x8a8>
 8008428:	4a98      	ldr	r2, [pc, #608]	; (800868c <_dtoa_r+0x9a0>)
 800842a:	189b      	adds	r3, r3, r2
 800842c:	9d04      	ldr	r5, [sp, #16]
 800842e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008430:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008432:	2101      	movs	r1, #1
 8008434:	18d2      	adds	r2, r2, r3
 8008436:	920a      	str	r2, [sp, #40]	; 0x28
 8008438:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800843a:	9802      	ldr	r0, [sp, #8]
 800843c:	18d3      	adds	r3, r2, r3
 800843e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008440:	f000 ff89 	bl	8009356 <__i2b>
 8008444:	0006      	movs	r6, r0
 8008446:	2c00      	cmp	r4, #0
 8008448:	dd0e      	ble.n	8008468 <_dtoa_r+0x77c>
 800844a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800844c:	2b00      	cmp	r3, #0
 800844e:	dd0b      	ble.n	8008468 <_dtoa_r+0x77c>
 8008450:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008452:	0023      	movs	r3, r4
 8008454:	4294      	cmp	r4, r2
 8008456:	dd00      	ble.n	800845a <_dtoa_r+0x76e>
 8008458:	0013      	movs	r3, r2
 800845a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800845c:	1ae4      	subs	r4, r4, r3
 800845e:	1ad2      	subs	r2, r2, r3
 8008460:	920a      	str	r2, [sp, #40]	; 0x28
 8008462:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	930b      	str	r3, [sp, #44]	; 0x2c
 8008468:	9b04      	ldr	r3, [sp, #16]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d01f      	beq.n	80084ae <_dtoa_r+0x7c2>
 800846e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008470:	2b00      	cmp	r3, #0
 8008472:	d100      	bne.n	8008476 <_dtoa_r+0x78a>
 8008474:	e0af      	b.n	80085d6 <_dtoa_r+0x8ea>
 8008476:	2d00      	cmp	r5, #0
 8008478:	d011      	beq.n	800849e <_dtoa_r+0x7b2>
 800847a:	0031      	movs	r1, r6
 800847c:	002a      	movs	r2, r5
 800847e:	9802      	ldr	r0, [sp, #8]
 8008480:	f001 f802 	bl	8009488 <__pow5mult>
 8008484:	9a03      	ldr	r2, [sp, #12]
 8008486:	0001      	movs	r1, r0
 8008488:	0006      	movs	r6, r0
 800848a:	9802      	ldr	r0, [sp, #8]
 800848c:	f000 ff6c 	bl	8009368 <__multiply>
 8008490:	9903      	ldr	r1, [sp, #12]
 8008492:	9010      	str	r0, [sp, #64]	; 0x40
 8008494:	9802      	ldr	r0, [sp, #8]
 8008496:	f000 fe80 	bl	800919a <_Bfree>
 800849a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800849c:	9303      	str	r3, [sp, #12]
 800849e:	9b04      	ldr	r3, [sp, #16]
 80084a0:	1b5a      	subs	r2, r3, r5
 80084a2:	d004      	beq.n	80084ae <_dtoa_r+0x7c2>
 80084a4:	9903      	ldr	r1, [sp, #12]
 80084a6:	9802      	ldr	r0, [sp, #8]
 80084a8:	f000 ffee 	bl	8009488 <__pow5mult>
 80084ac:	9003      	str	r0, [sp, #12]
 80084ae:	2101      	movs	r1, #1
 80084b0:	9802      	ldr	r0, [sp, #8]
 80084b2:	f000 ff50 	bl	8009356 <__i2b>
 80084b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084b8:	9004      	str	r0, [sp, #16]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d100      	bne.n	80084c0 <_dtoa_r+0x7d4>
 80084be:	e1e3      	b.n	8008888 <_dtoa_r+0xb9c>
 80084c0:	001a      	movs	r2, r3
 80084c2:	0001      	movs	r1, r0
 80084c4:	9802      	ldr	r0, [sp, #8]
 80084c6:	f000 ffdf 	bl	8009488 <__pow5mult>
 80084ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80084cc:	9004      	str	r0, [sp, #16]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	dd00      	ble.n	80084d4 <_dtoa_r+0x7e8>
 80084d2:	e082      	b.n	80085da <_dtoa_r+0x8ee>
 80084d4:	2500      	movs	r5, #0
 80084d6:	9b06      	ldr	r3, [sp, #24]
 80084d8:	42ab      	cmp	r3, r5
 80084da:	d10e      	bne.n	80084fa <_dtoa_r+0x80e>
 80084dc:	9b07      	ldr	r3, [sp, #28]
 80084de:	031b      	lsls	r3, r3, #12
 80084e0:	42ab      	cmp	r3, r5
 80084e2:	d10a      	bne.n	80084fa <_dtoa_r+0x80e>
 80084e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084e6:	9a07      	ldr	r2, [sp, #28]
 80084e8:	4213      	tst	r3, r2
 80084ea:	d006      	beq.n	80084fa <_dtoa_r+0x80e>
 80084ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ee:	3501      	adds	r5, #1
 80084f0:	3301      	adds	r3, #1
 80084f2:	930a      	str	r3, [sp, #40]	; 0x28
 80084f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084f6:	3301      	adds	r3, #1
 80084f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80084fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084fc:	2001      	movs	r0, #1
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d16c      	bne.n	80085dc <_dtoa_r+0x8f0>
 8008502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008504:	1818      	adds	r0, r3, r0
 8008506:	231f      	movs	r3, #31
 8008508:	4018      	ands	r0, r3
 800850a:	d07e      	beq.n	800860a <_dtoa_r+0x91e>
 800850c:	3301      	adds	r3, #1
 800850e:	1a1b      	subs	r3, r3, r0
 8008510:	2b04      	cmp	r3, #4
 8008512:	dd70      	ble.n	80085f6 <_dtoa_r+0x90a>
 8008514:	231c      	movs	r3, #28
 8008516:	1a18      	subs	r0, r3, r0
 8008518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800851a:	1824      	adds	r4, r4, r0
 800851c:	181b      	adds	r3, r3, r0
 800851e:	930a      	str	r3, [sp, #40]	; 0x28
 8008520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008522:	181b      	adds	r3, r3, r0
 8008524:	930b      	str	r3, [sp, #44]	; 0x2c
 8008526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008528:	2b00      	cmp	r3, #0
 800852a:	dd05      	ble.n	8008538 <_dtoa_r+0x84c>
 800852c:	001a      	movs	r2, r3
 800852e:	9903      	ldr	r1, [sp, #12]
 8008530:	9802      	ldr	r0, [sp, #8]
 8008532:	f000 fffb 	bl	800952c <__lshift>
 8008536:	9003      	str	r0, [sp, #12]
 8008538:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800853a:	2b00      	cmp	r3, #0
 800853c:	dd05      	ble.n	800854a <_dtoa_r+0x85e>
 800853e:	001a      	movs	r2, r3
 8008540:	9904      	ldr	r1, [sp, #16]
 8008542:	9802      	ldr	r0, [sp, #8]
 8008544:	f000 fff2 	bl	800952c <__lshift>
 8008548:	9004      	str	r0, [sp, #16]
 800854a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800854c:	2b00      	cmp	r3, #0
 800854e:	d05e      	beq.n	800860e <_dtoa_r+0x922>
 8008550:	9904      	ldr	r1, [sp, #16]
 8008552:	9803      	ldr	r0, [sp, #12]
 8008554:	f001 f83c 	bl	80095d0 <__mcmp>
 8008558:	2800      	cmp	r0, #0
 800855a:	da58      	bge.n	800860e <_dtoa_r+0x922>
 800855c:	2300      	movs	r3, #0
 800855e:	220a      	movs	r2, #10
 8008560:	9903      	ldr	r1, [sp, #12]
 8008562:	9802      	ldr	r0, [sp, #8]
 8008564:	f000 fe32 	bl	80091cc <__multadd>
 8008568:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800856a:	3f01      	subs	r7, #1
 800856c:	9003      	str	r0, [sp, #12]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d100      	bne.n	8008574 <_dtoa_r+0x888>
 8008572:	e190      	b.n	8008896 <_dtoa_r+0xbaa>
 8008574:	2300      	movs	r3, #0
 8008576:	0031      	movs	r1, r6
 8008578:	220a      	movs	r2, #10
 800857a:	9802      	ldr	r0, [sp, #8]
 800857c:	f000 fe26 	bl	80091cc <__multadd>
 8008580:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008582:	0006      	movs	r6, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	dd00      	ble.n	800858a <_dtoa_r+0x89e>
 8008588:	e088      	b.n	800869c <_dtoa_r+0x9b0>
 800858a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800858c:	2b02      	cmp	r3, #2
 800858e:	dc00      	bgt.n	8008592 <_dtoa_r+0x8a6>
 8008590:	e084      	b.n	800869c <_dtoa_r+0x9b0>
 8008592:	e044      	b.n	800861e <_dtoa_r+0x932>
 8008594:	2336      	movs	r3, #54	; 0x36
 8008596:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008598:	1a9b      	subs	r3, r3, r2
 800859a:	e747      	b.n	800842c <_dtoa_r+0x740>
 800859c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800859e:	1e5d      	subs	r5, r3, #1
 80085a0:	9b04      	ldr	r3, [sp, #16]
 80085a2:	42ab      	cmp	r3, r5
 80085a4:	db08      	blt.n	80085b8 <_dtoa_r+0x8cc>
 80085a6:	1b5d      	subs	r5, r3, r5
 80085a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	da0c      	bge.n	80085c8 <_dtoa_r+0x8dc>
 80085ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085b2:	1a9c      	subs	r4, r3, r2
 80085b4:	2300      	movs	r3, #0
 80085b6:	e73b      	b.n	8008430 <_dtoa_r+0x744>
 80085b8:	9b04      	ldr	r3, [sp, #16]
 80085ba:	9504      	str	r5, [sp, #16]
 80085bc:	1aea      	subs	r2, r5, r3
 80085be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085c0:	2500      	movs	r5, #0
 80085c2:	189b      	adds	r3, r3, r2
 80085c4:	9311      	str	r3, [sp, #68]	; 0x44
 80085c6:	e7ef      	b.n	80085a8 <_dtoa_r+0x8bc>
 80085c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80085ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085cc:	e730      	b.n	8008430 <_dtoa_r+0x744>
 80085ce:	9d04      	ldr	r5, [sp, #16]
 80085d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80085d2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80085d4:	e737      	b.n	8008446 <_dtoa_r+0x75a>
 80085d6:	9a04      	ldr	r2, [sp, #16]
 80085d8:	e764      	b.n	80084a4 <_dtoa_r+0x7b8>
 80085da:	2500      	movs	r5, #0
 80085dc:	9b04      	ldr	r3, [sp, #16]
 80085de:	9a04      	ldr	r2, [sp, #16]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	9310      	str	r3, [sp, #64]	; 0x40
 80085e4:	3303      	adds	r3, #3
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	18d3      	adds	r3, r2, r3
 80085ea:	6858      	ldr	r0, [r3, #4]
 80085ec:	f000 fe6a 	bl	80092c4 <__hi0bits>
 80085f0:	2320      	movs	r3, #32
 80085f2:	1a18      	subs	r0, r3, r0
 80085f4:	e785      	b.n	8008502 <_dtoa_r+0x816>
 80085f6:	2b04      	cmp	r3, #4
 80085f8:	d095      	beq.n	8008526 <_dtoa_r+0x83a>
 80085fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085fc:	331c      	adds	r3, #28
 80085fe:	18d2      	adds	r2, r2, r3
 8008600:	920a      	str	r2, [sp, #40]	; 0x28
 8008602:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008604:	18e4      	adds	r4, r4, r3
 8008606:	18d3      	adds	r3, r2, r3
 8008608:	e78c      	b.n	8008524 <_dtoa_r+0x838>
 800860a:	0003      	movs	r3, r0
 800860c:	e7f5      	b.n	80085fa <_dtoa_r+0x90e>
 800860e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008610:	2b00      	cmp	r3, #0
 8008612:	dc3d      	bgt.n	8008690 <_dtoa_r+0x9a4>
 8008614:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008616:	2b02      	cmp	r3, #2
 8008618:	dd3a      	ble.n	8008690 <_dtoa_r+0x9a4>
 800861a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800861c:	930c      	str	r3, [sp, #48]	; 0x30
 800861e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10c      	bne.n	800863e <_dtoa_r+0x952>
 8008624:	9904      	ldr	r1, [sp, #16]
 8008626:	2205      	movs	r2, #5
 8008628:	9802      	ldr	r0, [sp, #8]
 800862a:	f000 fdcf 	bl	80091cc <__multadd>
 800862e:	9004      	str	r0, [sp, #16]
 8008630:	0001      	movs	r1, r0
 8008632:	9803      	ldr	r0, [sp, #12]
 8008634:	f000 ffcc 	bl	80095d0 <__mcmp>
 8008638:	2800      	cmp	r0, #0
 800863a:	dd00      	ble.n	800863e <_dtoa_r+0x952>
 800863c:	e5af      	b.n	800819e <_dtoa_r+0x4b2>
 800863e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008640:	9d08      	ldr	r5, [sp, #32]
 8008642:	43df      	mvns	r7, r3
 8008644:	2300      	movs	r3, #0
 8008646:	9309      	str	r3, [sp, #36]	; 0x24
 8008648:	9904      	ldr	r1, [sp, #16]
 800864a:	9802      	ldr	r0, [sp, #8]
 800864c:	f000 fda5 	bl	800919a <_Bfree>
 8008650:	2e00      	cmp	r6, #0
 8008652:	d100      	bne.n	8008656 <_dtoa_r+0x96a>
 8008654:	e69b      	b.n	800838e <_dtoa_r+0x6a2>
 8008656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008658:	2b00      	cmp	r3, #0
 800865a:	d005      	beq.n	8008668 <_dtoa_r+0x97c>
 800865c:	42b3      	cmp	r3, r6
 800865e:	d003      	beq.n	8008668 <_dtoa_r+0x97c>
 8008660:	0019      	movs	r1, r3
 8008662:	9802      	ldr	r0, [sp, #8]
 8008664:	f000 fd99 	bl	800919a <_Bfree>
 8008668:	0031      	movs	r1, r6
 800866a:	9802      	ldr	r0, [sp, #8]
 800866c:	f000 fd95 	bl	800919a <_Bfree>
 8008670:	e68d      	b.n	800838e <_dtoa_r+0x6a2>
 8008672:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008674:	9304      	str	r3, [sp, #16]
 8008676:	001e      	movs	r6, r3
 8008678:	e7e1      	b.n	800863e <_dtoa_r+0x952>
 800867a:	2300      	movs	r3, #0
 800867c:	e7fa      	b.n	8008674 <_dtoa_r+0x988>
 800867e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008680:	0037      	movs	r7, r6
 8008682:	9304      	str	r3, [sp, #16]
 8008684:	001e      	movs	r6, r3
 8008686:	e58a      	b.n	800819e <_dtoa_r+0x4b2>
 8008688:	40240000 	.word	0x40240000
 800868c:	00000433 	.word	0x00000433
 8008690:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008692:	2b00      	cmp	r3, #0
 8008694:	d100      	bne.n	8008698 <_dtoa_r+0x9ac>
 8008696:	e0b2      	b.n	80087fe <_dtoa_r+0xb12>
 8008698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800869a:	930c      	str	r3, [sp, #48]	; 0x30
 800869c:	2c00      	cmp	r4, #0
 800869e:	dd05      	ble.n	80086ac <_dtoa_r+0x9c0>
 80086a0:	0031      	movs	r1, r6
 80086a2:	0022      	movs	r2, r4
 80086a4:	9802      	ldr	r0, [sp, #8]
 80086a6:	f000 ff41 	bl	800952c <__lshift>
 80086aa:	0006      	movs	r6, r0
 80086ac:	0030      	movs	r0, r6
 80086ae:	2d00      	cmp	r5, #0
 80086b0:	d011      	beq.n	80086d6 <_dtoa_r+0x9ea>
 80086b2:	6871      	ldr	r1, [r6, #4]
 80086b4:	9802      	ldr	r0, [sp, #8]
 80086b6:	f000 fd38 	bl	800912a <_Balloc>
 80086ba:	0031      	movs	r1, r6
 80086bc:	0004      	movs	r4, r0
 80086be:	6933      	ldr	r3, [r6, #16]
 80086c0:	310c      	adds	r1, #12
 80086c2:	1c9a      	adds	r2, r3, #2
 80086c4:	0092      	lsls	r2, r2, #2
 80086c6:	300c      	adds	r0, #12
 80086c8:	f7fd fcfe 	bl	80060c8 <memcpy>
 80086cc:	2201      	movs	r2, #1
 80086ce:	0021      	movs	r1, r4
 80086d0:	9802      	ldr	r0, [sp, #8]
 80086d2:	f000 ff2b 	bl	800952c <__lshift>
 80086d6:	9609      	str	r6, [sp, #36]	; 0x24
 80086d8:	0006      	movs	r6, r0
 80086da:	9b08      	ldr	r3, [sp, #32]
 80086dc:	930a      	str	r3, [sp, #40]	; 0x28
 80086de:	9904      	ldr	r1, [sp, #16]
 80086e0:	9803      	ldr	r0, [sp, #12]
 80086e2:	f7ff fa7d 	bl	8007be0 <quorem>
 80086e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086e8:	900d      	str	r0, [sp, #52]	; 0x34
 80086ea:	0004      	movs	r4, r0
 80086ec:	9803      	ldr	r0, [sp, #12]
 80086ee:	f000 ff6f 	bl	80095d0 <__mcmp>
 80086f2:	0032      	movs	r2, r6
 80086f4:	9010      	str	r0, [sp, #64]	; 0x40
 80086f6:	9904      	ldr	r1, [sp, #16]
 80086f8:	9802      	ldr	r0, [sp, #8]
 80086fa:	f000 ff83 	bl	8009604 <__mdiff>
 80086fe:	2301      	movs	r3, #1
 8008700:	930b      	str	r3, [sp, #44]	; 0x2c
 8008702:	68c3      	ldr	r3, [r0, #12]
 8008704:	3430      	adds	r4, #48	; 0x30
 8008706:	0005      	movs	r5, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d104      	bne.n	8008716 <_dtoa_r+0xa2a>
 800870c:	0001      	movs	r1, r0
 800870e:	9803      	ldr	r0, [sp, #12]
 8008710:	f000 ff5e 	bl	80095d0 <__mcmp>
 8008714:	900b      	str	r0, [sp, #44]	; 0x2c
 8008716:	0029      	movs	r1, r5
 8008718:	9802      	ldr	r0, [sp, #8]
 800871a:	f000 fd3e 	bl	800919a <_Bfree>
 800871e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008720:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008722:	4313      	orrs	r3, r2
 8008724:	d10e      	bne.n	8008744 <_dtoa_r+0xa58>
 8008726:	9a06      	ldr	r2, [sp, #24]
 8008728:	3301      	adds	r3, #1
 800872a:	4213      	tst	r3, r2
 800872c:	d10a      	bne.n	8008744 <_dtoa_r+0xa58>
 800872e:	2c39      	cmp	r4, #57	; 0x39
 8008730:	d026      	beq.n	8008780 <_dtoa_r+0xa94>
 8008732:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008734:	2b00      	cmp	r3, #0
 8008736:	dd01      	ble.n	800873c <_dtoa_r+0xa50>
 8008738:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800873a:	3431      	adds	r4, #49	; 0x31
 800873c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800873e:	1c5d      	adds	r5, r3, #1
 8008740:	701c      	strb	r4, [r3, #0]
 8008742:	e781      	b.n	8008648 <_dtoa_r+0x95c>
 8008744:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008746:	2b00      	cmp	r3, #0
 8008748:	db07      	blt.n	800875a <_dtoa_r+0xa6e>
 800874a:	001d      	movs	r5, r3
 800874c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800874e:	431d      	orrs	r5, r3
 8008750:	d122      	bne.n	8008798 <_dtoa_r+0xaac>
 8008752:	2301      	movs	r3, #1
 8008754:	9a06      	ldr	r2, [sp, #24]
 8008756:	4213      	tst	r3, r2
 8008758:	d11e      	bne.n	8008798 <_dtoa_r+0xaac>
 800875a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800875c:	2b00      	cmp	r3, #0
 800875e:	dded      	ble.n	800873c <_dtoa_r+0xa50>
 8008760:	9903      	ldr	r1, [sp, #12]
 8008762:	2201      	movs	r2, #1
 8008764:	9802      	ldr	r0, [sp, #8]
 8008766:	f000 fee1 	bl	800952c <__lshift>
 800876a:	9904      	ldr	r1, [sp, #16]
 800876c:	9003      	str	r0, [sp, #12]
 800876e:	f000 ff2f 	bl	80095d0 <__mcmp>
 8008772:	2800      	cmp	r0, #0
 8008774:	dc02      	bgt.n	800877c <_dtoa_r+0xa90>
 8008776:	d1e1      	bne.n	800873c <_dtoa_r+0xa50>
 8008778:	07e3      	lsls	r3, r4, #31
 800877a:	d5df      	bpl.n	800873c <_dtoa_r+0xa50>
 800877c:	2c39      	cmp	r4, #57	; 0x39
 800877e:	d1db      	bne.n	8008738 <_dtoa_r+0xa4c>
 8008780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008782:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008784:	1c5d      	adds	r5, r3, #1
 8008786:	2339      	movs	r3, #57	; 0x39
 8008788:	7013      	strb	r3, [r2, #0]
 800878a:	1e6b      	subs	r3, r5, #1
 800878c:	781a      	ldrb	r2, [r3, #0]
 800878e:	2a39      	cmp	r2, #57	; 0x39
 8008790:	d067      	beq.n	8008862 <_dtoa_r+0xb76>
 8008792:	3201      	adds	r2, #1
 8008794:	701a      	strb	r2, [r3, #0]
 8008796:	e757      	b.n	8008648 <_dtoa_r+0x95c>
 8008798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800879a:	1c5d      	adds	r5, r3, #1
 800879c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800879e:	2b00      	cmp	r3, #0
 80087a0:	dd04      	ble.n	80087ac <_dtoa_r+0xac0>
 80087a2:	2c39      	cmp	r4, #57	; 0x39
 80087a4:	d0ec      	beq.n	8008780 <_dtoa_r+0xa94>
 80087a6:	3401      	adds	r4, #1
 80087a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087aa:	e7c9      	b.n	8008740 <_dtoa_r+0xa54>
 80087ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087b0:	701c      	strb	r4, [r3, #0]
 80087b2:	9b08      	ldr	r3, [sp, #32]
 80087b4:	1aeb      	subs	r3, r5, r3
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d03e      	beq.n	8008838 <_dtoa_r+0xb4c>
 80087ba:	2300      	movs	r3, #0
 80087bc:	220a      	movs	r2, #10
 80087be:	9903      	ldr	r1, [sp, #12]
 80087c0:	9802      	ldr	r0, [sp, #8]
 80087c2:	f000 fd03 	bl	80091cc <__multadd>
 80087c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087c8:	9003      	str	r0, [sp, #12]
 80087ca:	42b3      	cmp	r3, r6
 80087cc:	d109      	bne.n	80087e2 <_dtoa_r+0xaf6>
 80087ce:	2300      	movs	r3, #0
 80087d0:	220a      	movs	r2, #10
 80087d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087d4:	9802      	ldr	r0, [sp, #8]
 80087d6:	f000 fcf9 	bl	80091cc <__multadd>
 80087da:	9009      	str	r0, [sp, #36]	; 0x24
 80087dc:	0006      	movs	r6, r0
 80087de:	950a      	str	r5, [sp, #40]	; 0x28
 80087e0:	e77d      	b.n	80086de <_dtoa_r+0x9f2>
 80087e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087e4:	2300      	movs	r3, #0
 80087e6:	220a      	movs	r2, #10
 80087e8:	9802      	ldr	r0, [sp, #8]
 80087ea:	f000 fcef 	bl	80091cc <__multadd>
 80087ee:	2300      	movs	r3, #0
 80087f0:	9009      	str	r0, [sp, #36]	; 0x24
 80087f2:	220a      	movs	r2, #10
 80087f4:	0031      	movs	r1, r6
 80087f6:	9802      	ldr	r0, [sp, #8]
 80087f8:	f000 fce8 	bl	80091cc <__multadd>
 80087fc:	e7ee      	b.n	80087dc <_dtoa_r+0xaf0>
 80087fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008800:	930c      	str	r3, [sp, #48]	; 0x30
 8008802:	9b08      	ldr	r3, [sp, #32]
 8008804:	9306      	str	r3, [sp, #24]
 8008806:	9904      	ldr	r1, [sp, #16]
 8008808:	9803      	ldr	r0, [sp, #12]
 800880a:	f7ff f9e9 	bl	8007be0 <quorem>
 800880e:	9b06      	ldr	r3, [sp, #24]
 8008810:	3030      	adds	r0, #48	; 0x30
 8008812:	1c5d      	adds	r5, r3, #1
 8008814:	7018      	strb	r0, [r3, #0]
 8008816:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008818:	9b08      	ldr	r3, [sp, #32]
 800881a:	0004      	movs	r4, r0
 800881c:	1aeb      	subs	r3, r5, r3
 800881e:	429a      	cmp	r2, r3
 8008820:	dd08      	ble.n	8008834 <_dtoa_r+0xb48>
 8008822:	2300      	movs	r3, #0
 8008824:	220a      	movs	r2, #10
 8008826:	9903      	ldr	r1, [sp, #12]
 8008828:	9802      	ldr	r0, [sp, #8]
 800882a:	f000 fccf 	bl	80091cc <__multadd>
 800882e:	9506      	str	r5, [sp, #24]
 8008830:	9003      	str	r0, [sp, #12]
 8008832:	e7e8      	b.n	8008806 <_dtoa_r+0xb1a>
 8008834:	2300      	movs	r3, #0
 8008836:	9309      	str	r3, [sp, #36]	; 0x24
 8008838:	9903      	ldr	r1, [sp, #12]
 800883a:	2201      	movs	r2, #1
 800883c:	9802      	ldr	r0, [sp, #8]
 800883e:	f000 fe75 	bl	800952c <__lshift>
 8008842:	9904      	ldr	r1, [sp, #16]
 8008844:	9003      	str	r0, [sp, #12]
 8008846:	f000 fec3 	bl	80095d0 <__mcmp>
 800884a:	2800      	cmp	r0, #0
 800884c:	dc9d      	bgt.n	800878a <_dtoa_r+0xa9e>
 800884e:	d101      	bne.n	8008854 <_dtoa_r+0xb68>
 8008850:	07e3      	lsls	r3, r4, #31
 8008852:	d49a      	bmi.n	800878a <_dtoa_r+0xa9e>
 8008854:	1e6b      	subs	r3, r5, #1
 8008856:	781a      	ldrb	r2, [r3, #0]
 8008858:	2a30      	cmp	r2, #48	; 0x30
 800885a:	d000      	beq.n	800885e <_dtoa_r+0xb72>
 800885c:	e6f4      	b.n	8008648 <_dtoa_r+0x95c>
 800885e:	001d      	movs	r5, r3
 8008860:	e7f8      	b.n	8008854 <_dtoa_r+0xb68>
 8008862:	9a08      	ldr	r2, [sp, #32]
 8008864:	429a      	cmp	r2, r3
 8008866:	d103      	bne.n	8008870 <_dtoa_r+0xb84>
 8008868:	2331      	movs	r3, #49	; 0x31
 800886a:	3701      	adds	r7, #1
 800886c:	7013      	strb	r3, [r2, #0]
 800886e:	e6eb      	b.n	8008648 <_dtoa_r+0x95c>
 8008870:	001d      	movs	r5, r3
 8008872:	e78a      	b.n	800878a <_dtoa_r+0xa9e>
 8008874:	4b0b      	ldr	r3, [pc, #44]	; (80088a4 <_dtoa_r+0xbb8>)
 8008876:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008878:	9308      	str	r3, [sp, #32]
 800887a:	4b0b      	ldr	r3, [pc, #44]	; (80088a8 <_dtoa_r+0xbbc>)
 800887c:	2a00      	cmp	r2, #0
 800887e:	d001      	beq.n	8008884 <_dtoa_r+0xb98>
 8008880:	f7ff fa77 	bl	8007d72 <_dtoa_r+0x86>
 8008884:	f7ff fa77 	bl	8007d76 <_dtoa_r+0x8a>
 8008888:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800888a:	2b01      	cmp	r3, #1
 800888c:	dc00      	bgt.n	8008890 <_dtoa_r+0xba4>
 800888e:	e621      	b.n	80084d4 <_dtoa_r+0x7e8>
 8008890:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008892:	2001      	movs	r0, #1
 8008894:	e635      	b.n	8008502 <_dtoa_r+0x816>
 8008896:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008898:	2b00      	cmp	r3, #0
 800889a:	dcb2      	bgt.n	8008802 <_dtoa_r+0xb16>
 800889c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800889e:	2b02      	cmp	r3, #2
 80088a0:	ddaf      	ble.n	8008802 <_dtoa_r+0xb16>
 80088a2:	e6bc      	b.n	800861e <_dtoa_r+0x932>
 80088a4:	0800a828 	.word	0x0800a828
 80088a8:	0800a830 	.word	0x0800a830

080088ac <std>:
 80088ac:	2300      	movs	r3, #0
 80088ae:	b510      	push	{r4, lr}
 80088b0:	0004      	movs	r4, r0
 80088b2:	6003      	str	r3, [r0, #0]
 80088b4:	6043      	str	r3, [r0, #4]
 80088b6:	6083      	str	r3, [r0, #8]
 80088b8:	8181      	strh	r1, [r0, #12]
 80088ba:	6643      	str	r3, [r0, #100]	; 0x64
 80088bc:	81c2      	strh	r2, [r0, #14]
 80088be:	6103      	str	r3, [r0, #16]
 80088c0:	6143      	str	r3, [r0, #20]
 80088c2:	6183      	str	r3, [r0, #24]
 80088c4:	0019      	movs	r1, r3
 80088c6:	2208      	movs	r2, #8
 80088c8:	305c      	adds	r0, #92	; 0x5c
 80088ca:	f7fd fc06 	bl	80060da <memset>
 80088ce:	4b05      	ldr	r3, [pc, #20]	; (80088e4 <std+0x38>)
 80088d0:	6224      	str	r4, [r4, #32]
 80088d2:	6263      	str	r3, [r4, #36]	; 0x24
 80088d4:	4b04      	ldr	r3, [pc, #16]	; (80088e8 <std+0x3c>)
 80088d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80088d8:	4b04      	ldr	r3, [pc, #16]	; (80088ec <std+0x40>)
 80088da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80088dc:	4b04      	ldr	r3, [pc, #16]	; (80088f0 <std+0x44>)
 80088de:	6323      	str	r3, [r4, #48]	; 0x30
 80088e0:	bd10      	pop	{r4, pc}
 80088e2:	46c0      	nop			; (mov r8, r8)
 80088e4:	08009fe5 	.word	0x08009fe5
 80088e8:	0800a00d 	.word	0x0800a00d
 80088ec:	0800a045 	.word	0x0800a045
 80088f0:	0800a071 	.word	0x0800a071

080088f4 <_cleanup_r>:
 80088f4:	b510      	push	{r4, lr}
 80088f6:	4902      	ldr	r1, [pc, #8]	; (8008900 <_cleanup_r+0xc>)
 80088f8:	f000 f88c 	bl	8008a14 <_fwalk_reent>
 80088fc:	bd10      	pop	{r4, pc}
 80088fe:	46c0      	nop			; (mov r8, r8)
 8008900:	0800a3b1 	.word	0x0800a3b1

08008904 <__sfmoreglue>:
 8008904:	b570      	push	{r4, r5, r6, lr}
 8008906:	2568      	movs	r5, #104	; 0x68
 8008908:	1e4a      	subs	r2, r1, #1
 800890a:	4355      	muls	r5, r2
 800890c:	000e      	movs	r6, r1
 800890e:	0029      	movs	r1, r5
 8008910:	3174      	adds	r1, #116	; 0x74
 8008912:	f001 f859 	bl	80099c8 <_malloc_r>
 8008916:	1e04      	subs	r4, r0, #0
 8008918:	d008      	beq.n	800892c <__sfmoreglue+0x28>
 800891a:	2100      	movs	r1, #0
 800891c:	002a      	movs	r2, r5
 800891e:	6001      	str	r1, [r0, #0]
 8008920:	6046      	str	r6, [r0, #4]
 8008922:	300c      	adds	r0, #12
 8008924:	60a0      	str	r0, [r4, #8]
 8008926:	3268      	adds	r2, #104	; 0x68
 8008928:	f7fd fbd7 	bl	80060da <memset>
 800892c:	0020      	movs	r0, r4
 800892e:	bd70      	pop	{r4, r5, r6, pc}

08008930 <__sinit>:
 8008930:	6983      	ldr	r3, [r0, #24]
 8008932:	b513      	push	{r0, r1, r4, lr}
 8008934:	0004      	movs	r4, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d128      	bne.n	800898c <__sinit+0x5c>
 800893a:	6483      	str	r3, [r0, #72]	; 0x48
 800893c:	64c3      	str	r3, [r0, #76]	; 0x4c
 800893e:	6503      	str	r3, [r0, #80]	; 0x50
 8008940:	4b13      	ldr	r3, [pc, #76]	; (8008990 <__sinit+0x60>)
 8008942:	4a14      	ldr	r2, [pc, #80]	; (8008994 <__sinit+0x64>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	6282      	str	r2, [r0, #40]	; 0x28
 8008948:	9301      	str	r3, [sp, #4]
 800894a:	4298      	cmp	r0, r3
 800894c:	d101      	bne.n	8008952 <__sinit+0x22>
 800894e:	2301      	movs	r3, #1
 8008950:	6183      	str	r3, [r0, #24]
 8008952:	0020      	movs	r0, r4
 8008954:	f000 f820 	bl	8008998 <__sfp>
 8008958:	6060      	str	r0, [r4, #4]
 800895a:	0020      	movs	r0, r4
 800895c:	f000 f81c 	bl	8008998 <__sfp>
 8008960:	60a0      	str	r0, [r4, #8]
 8008962:	0020      	movs	r0, r4
 8008964:	f000 f818 	bl	8008998 <__sfp>
 8008968:	2200      	movs	r2, #0
 800896a:	60e0      	str	r0, [r4, #12]
 800896c:	2104      	movs	r1, #4
 800896e:	6860      	ldr	r0, [r4, #4]
 8008970:	f7ff ff9c 	bl	80088ac <std>
 8008974:	2201      	movs	r2, #1
 8008976:	2109      	movs	r1, #9
 8008978:	68a0      	ldr	r0, [r4, #8]
 800897a:	f7ff ff97 	bl	80088ac <std>
 800897e:	2202      	movs	r2, #2
 8008980:	2112      	movs	r1, #18
 8008982:	68e0      	ldr	r0, [r4, #12]
 8008984:	f7ff ff92 	bl	80088ac <std>
 8008988:	2301      	movs	r3, #1
 800898a:	61a3      	str	r3, [r4, #24]
 800898c:	bd13      	pop	{r0, r1, r4, pc}
 800898e:	46c0      	nop			; (mov r8, r8)
 8008990:	0800a798 	.word	0x0800a798
 8008994:	080088f5 	.word	0x080088f5

08008998 <__sfp>:
 8008998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800899a:	4b1c      	ldr	r3, [pc, #112]	; (8008a0c <__sfp+0x74>)
 800899c:	0007      	movs	r7, r0
 800899e:	681e      	ldr	r6, [r3, #0]
 80089a0:	69b3      	ldr	r3, [r6, #24]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d102      	bne.n	80089ac <__sfp+0x14>
 80089a6:	0030      	movs	r0, r6
 80089a8:	f7ff ffc2 	bl	8008930 <__sinit>
 80089ac:	3648      	adds	r6, #72	; 0x48
 80089ae:	68b4      	ldr	r4, [r6, #8]
 80089b0:	6873      	ldr	r3, [r6, #4]
 80089b2:	3b01      	subs	r3, #1
 80089b4:	d504      	bpl.n	80089c0 <__sfp+0x28>
 80089b6:	6833      	ldr	r3, [r6, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d007      	beq.n	80089cc <__sfp+0x34>
 80089bc:	6836      	ldr	r6, [r6, #0]
 80089be:	e7f6      	b.n	80089ae <__sfp+0x16>
 80089c0:	220c      	movs	r2, #12
 80089c2:	5ea5      	ldrsh	r5, [r4, r2]
 80089c4:	2d00      	cmp	r5, #0
 80089c6:	d00d      	beq.n	80089e4 <__sfp+0x4c>
 80089c8:	3468      	adds	r4, #104	; 0x68
 80089ca:	e7f2      	b.n	80089b2 <__sfp+0x1a>
 80089cc:	2104      	movs	r1, #4
 80089ce:	0038      	movs	r0, r7
 80089d0:	f7ff ff98 	bl	8008904 <__sfmoreglue>
 80089d4:	6030      	str	r0, [r6, #0]
 80089d6:	2800      	cmp	r0, #0
 80089d8:	d1f0      	bne.n	80089bc <__sfp+0x24>
 80089da:	230c      	movs	r3, #12
 80089dc:	0004      	movs	r4, r0
 80089de:	603b      	str	r3, [r7, #0]
 80089e0:	0020      	movs	r0, r4
 80089e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089e4:	0020      	movs	r0, r4
 80089e6:	4b0a      	ldr	r3, [pc, #40]	; (8008a10 <__sfp+0x78>)
 80089e8:	6665      	str	r5, [r4, #100]	; 0x64
 80089ea:	6025      	str	r5, [r4, #0]
 80089ec:	6065      	str	r5, [r4, #4]
 80089ee:	60a5      	str	r5, [r4, #8]
 80089f0:	60e3      	str	r3, [r4, #12]
 80089f2:	6125      	str	r5, [r4, #16]
 80089f4:	6165      	str	r5, [r4, #20]
 80089f6:	61a5      	str	r5, [r4, #24]
 80089f8:	2208      	movs	r2, #8
 80089fa:	0029      	movs	r1, r5
 80089fc:	305c      	adds	r0, #92	; 0x5c
 80089fe:	f7fd fb6c 	bl	80060da <memset>
 8008a02:	6365      	str	r5, [r4, #52]	; 0x34
 8008a04:	63a5      	str	r5, [r4, #56]	; 0x38
 8008a06:	64a5      	str	r5, [r4, #72]	; 0x48
 8008a08:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008a0a:	e7e9      	b.n	80089e0 <__sfp+0x48>
 8008a0c:	0800a798 	.word	0x0800a798
 8008a10:	ffff0001 	.word	0xffff0001

08008a14 <_fwalk_reent>:
 8008a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a16:	0004      	movs	r4, r0
 8008a18:	0007      	movs	r7, r0
 8008a1a:	2600      	movs	r6, #0
 8008a1c:	9101      	str	r1, [sp, #4]
 8008a1e:	3448      	adds	r4, #72	; 0x48
 8008a20:	2c00      	cmp	r4, #0
 8008a22:	d101      	bne.n	8008a28 <_fwalk_reent+0x14>
 8008a24:	0030      	movs	r0, r6
 8008a26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008a28:	6863      	ldr	r3, [r4, #4]
 8008a2a:	68a5      	ldr	r5, [r4, #8]
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	9b00      	ldr	r3, [sp, #0]
 8008a30:	3b01      	subs	r3, #1
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	d501      	bpl.n	8008a3a <_fwalk_reent+0x26>
 8008a36:	6824      	ldr	r4, [r4, #0]
 8008a38:	e7f2      	b.n	8008a20 <_fwalk_reent+0xc>
 8008a3a:	89ab      	ldrh	r3, [r5, #12]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d908      	bls.n	8008a52 <_fwalk_reent+0x3e>
 8008a40:	220e      	movs	r2, #14
 8008a42:	5eab      	ldrsh	r3, [r5, r2]
 8008a44:	3301      	adds	r3, #1
 8008a46:	d004      	beq.n	8008a52 <_fwalk_reent+0x3e>
 8008a48:	0029      	movs	r1, r5
 8008a4a:	0038      	movs	r0, r7
 8008a4c:	9b01      	ldr	r3, [sp, #4]
 8008a4e:	4798      	blx	r3
 8008a50:	4306      	orrs	r6, r0
 8008a52:	3568      	adds	r5, #104	; 0x68
 8008a54:	e7eb      	b.n	8008a2e <_fwalk_reent+0x1a>

08008a56 <rshift>:
 8008a56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a58:	0004      	movs	r4, r0
 8008a5a:	6905      	ldr	r5, [r0, #16]
 8008a5c:	3414      	adds	r4, #20
 8008a5e:	114b      	asrs	r3, r1, #5
 8008a60:	0026      	movs	r6, r4
 8008a62:	429d      	cmp	r5, r3
 8008a64:	dd14      	ble.n	8008a90 <rshift+0x3a>
 8008a66:	221f      	movs	r2, #31
 8008a68:	00ad      	lsls	r5, r5, #2
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	4011      	ands	r1, r2
 8008a6e:	1965      	adds	r5, r4, r5
 8008a70:	18e3      	adds	r3, r4, r3
 8008a72:	0022      	movs	r2, r4
 8008a74:	2900      	cmp	r1, #0
 8008a76:	d01e      	beq.n	8008ab6 <rshift+0x60>
 8008a78:	cb04      	ldmia	r3!, {r2}
 8008a7a:	2720      	movs	r7, #32
 8008a7c:	40ca      	lsrs	r2, r1
 8008a7e:	46a4      	mov	ip, r4
 8008a80:	1a7f      	subs	r7, r7, r1
 8008a82:	4666      	mov	r6, ip
 8008a84:	429d      	cmp	r5, r3
 8008a86:	d80b      	bhi.n	8008aa0 <rshift+0x4a>
 8008a88:	6032      	str	r2, [r6, #0]
 8008a8a:	2a00      	cmp	r2, #0
 8008a8c:	d000      	beq.n	8008a90 <rshift+0x3a>
 8008a8e:	3604      	adds	r6, #4
 8008a90:	1b33      	subs	r3, r6, r4
 8008a92:	109b      	asrs	r3, r3, #2
 8008a94:	6103      	str	r3, [r0, #16]
 8008a96:	42a6      	cmp	r6, r4
 8008a98:	d101      	bne.n	8008a9e <rshift+0x48>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	6143      	str	r3, [r0, #20]
 8008a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aa0:	681e      	ldr	r6, [r3, #0]
 8008aa2:	40be      	lsls	r6, r7
 8008aa4:	4332      	orrs	r2, r6
 8008aa6:	4666      	mov	r6, ip
 8008aa8:	c604      	stmia	r6!, {r2}
 8008aaa:	cb04      	ldmia	r3!, {r2}
 8008aac:	46b4      	mov	ip, r6
 8008aae:	40ca      	lsrs	r2, r1
 8008ab0:	e7e7      	b.n	8008a82 <rshift+0x2c>
 8008ab2:	cb02      	ldmia	r3!, {r1}
 8008ab4:	c202      	stmia	r2!, {r1}
 8008ab6:	0016      	movs	r6, r2
 8008ab8:	429d      	cmp	r5, r3
 8008aba:	d8fa      	bhi.n	8008ab2 <rshift+0x5c>
 8008abc:	e7e8      	b.n	8008a90 <rshift+0x3a>

08008abe <__hexdig_fun>:
 8008abe:	0003      	movs	r3, r0
 8008ac0:	3b30      	subs	r3, #48	; 0x30
 8008ac2:	2b09      	cmp	r3, #9
 8008ac4:	d803      	bhi.n	8008ace <__hexdig_fun+0x10>
 8008ac6:	3820      	subs	r0, #32
 8008ac8:	b2c3      	uxtb	r3, r0
 8008aca:	0018      	movs	r0, r3
 8008acc:	4770      	bx	lr
 8008ace:	0003      	movs	r3, r0
 8008ad0:	3b61      	subs	r3, #97	; 0x61
 8008ad2:	2b05      	cmp	r3, #5
 8008ad4:	d801      	bhi.n	8008ada <__hexdig_fun+0x1c>
 8008ad6:	3847      	subs	r0, #71	; 0x47
 8008ad8:	e7f6      	b.n	8008ac8 <__hexdig_fun+0xa>
 8008ada:	0002      	movs	r2, r0
 8008adc:	3a41      	subs	r2, #65	; 0x41
 8008ade:	2300      	movs	r3, #0
 8008ae0:	2a05      	cmp	r2, #5
 8008ae2:	d8f2      	bhi.n	8008aca <__hexdig_fun+0xc>
 8008ae4:	3827      	subs	r0, #39	; 0x27
 8008ae6:	e7ef      	b.n	8008ac8 <__hexdig_fun+0xa>

08008ae8 <__gethex>:
 8008ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aea:	b08d      	sub	sp, #52	; 0x34
 8008aec:	9005      	str	r0, [sp, #20]
 8008aee:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008af0:	9109      	str	r1, [sp, #36]	; 0x24
 8008af2:	9202      	str	r2, [sp, #8]
 8008af4:	930a      	str	r3, [sp, #40]	; 0x28
 8008af6:	f000 fae2 	bl	80090be <__localeconv_l>
 8008afa:	6803      	ldr	r3, [r0, #0]
 8008afc:	0018      	movs	r0, r3
 8008afe:	9307      	str	r3, [sp, #28]
 8008b00:	f7f7 fb00 	bl	8000104 <strlen>
 8008b04:	2202      	movs	r2, #2
 8008b06:	9b07      	ldr	r3, [sp, #28]
 8008b08:	4252      	negs	r2, r2
 8008b0a:	181b      	adds	r3, r3, r0
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	9004      	str	r0, [sp, #16]
 8008b12:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b16:	6819      	ldr	r1, [r3, #0]
 8008b18:	1c8b      	adds	r3, r1, #2
 8008b1a:	1a52      	subs	r2, r2, r1
 8008b1c:	18d1      	adds	r1, r2, r3
 8008b1e:	9301      	str	r3, [sp, #4]
 8008b20:	9108      	str	r1, [sp, #32]
 8008b22:	9901      	ldr	r1, [sp, #4]
 8008b24:	3301      	adds	r3, #1
 8008b26:	7808      	ldrb	r0, [r1, #0]
 8008b28:	2830      	cmp	r0, #48	; 0x30
 8008b2a:	d0f7      	beq.n	8008b1c <__gethex+0x34>
 8008b2c:	f7ff ffc7 	bl	8008abe <__hexdig_fun>
 8008b30:	1e07      	subs	r7, r0, #0
 8008b32:	d000      	beq.n	8008b36 <__gethex+0x4e>
 8008b34:	e06f      	b.n	8008c16 <__gethex+0x12e>
 8008b36:	9a04      	ldr	r2, [sp, #16]
 8008b38:	9907      	ldr	r1, [sp, #28]
 8008b3a:	9801      	ldr	r0, [sp, #4]
 8008b3c:	f001 fa9e 	bl	800a07c <strncmp>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	d000      	beq.n	8008b46 <__gethex+0x5e>
 8008b44:	e06d      	b.n	8008c22 <__gethex+0x13a>
 8008b46:	9b01      	ldr	r3, [sp, #4]
 8008b48:	9a04      	ldr	r2, [sp, #16]
 8008b4a:	189c      	adds	r4, r3, r2
 8008b4c:	7820      	ldrb	r0, [r4, #0]
 8008b4e:	f7ff ffb6 	bl	8008abe <__hexdig_fun>
 8008b52:	2800      	cmp	r0, #0
 8008b54:	d069      	beq.n	8008c2a <__gethex+0x142>
 8008b56:	9401      	str	r4, [sp, #4]
 8008b58:	9b01      	ldr	r3, [sp, #4]
 8008b5a:	7818      	ldrb	r0, [r3, #0]
 8008b5c:	2830      	cmp	r0, #48	; 0x30
 8008b5e:	d009      	beq.n	8008b74 <__gethex+0x8c>
 8008b60:	f7ff ffad 	bl	8008abe <__hexdig_fun>
 8008b64:	4243      	negs	r3, r0
 8008b66:	4143      	adcs	r3, r0
 8008b68:	9303      	str	r3, [sp, #12]
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	0026      	movs	r6, r4
 8008b6e:	9308      	str	r3, [sp, #32]
 8008b70:	9c01      	ldr	r4, [sp, #4]
 8008b72:	e004      	b.n	8008b7e <__gethex+0x96>
 8008b74:	9b01      	ldr	r3, [sp, #4]
 8008b76:	3301      	adds	r3, #1
 8008b78:	9301      	str	r3, [sp, #4]
 8008b7a:	e7ed      	b.n	8008b58 <__gethex+0x70>
 8008b7c:	3401      	adds	r4, #1
 8008b7e:	7820      	ldrb	r0, [r4, #0]
 8008b80:	f7ff ff9d 	bl	8008abe <__hexdig_fun>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	d1f9      	bne.n	8008b7c <__gethex+0x94>
 8008b88:	9a04      	ldr	r2, [sp, #16]
 8008b8a:	9907      	ldr	r1, [sp, #28]
 8008b8c:	0020      	movs	r0, r4
 8008b8e:	f001 fa75 	bl	800a07c <strncmp>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d109      	bne.n	8008baa <__gethex+0xc2>
 8008b96:	2e00      	cmp	r6, #0
 8008b98:	d10a      	bne.n	8008bb0 <__gethex+0xc8>
 8008b9a:	9b04      	ldr	r3, [sp, #16]
 8008b9c:	18e4      	adds	r4, r4, r3
 8008b9e:	0026      	movs	r6, r4
 8008ba0:	7820      	ldrb	r0, [r4, #0]
 8008ba2:	f7ff ff8c 	bl	8008abe <__hexdig_fun>
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	d139      	bne.n	8008c1e <__gethex+0x136>
 8008baa:	2700      	movs	r7, #0
 8008bac:	42be      	cmp	r6, r7
 8008bae:	d001      	beq.n	8008bb4 <__gethex+0xcc>
 8008bb0:	1b37      	subs	r7, r6, r4
 8008bb2:	00bf      	lsls	r7, r7, #2
 8008bb4:	7823      	ldrb	r3, [r4, #0]
 8008bb6:	2b50      	cmp	r3, #80	; 0x50
 8008bb8:	d001      	beq.n	8008bbe <__gethex+0xd6>
 8008bba:	2b70      	cmp	r3, #112	; 0x70
 8008bbc:	d142      	bne.n	8008c44 <__gethex+0x15c>
 8008bbe:	7863      	ldrb	r3, [r4, #1]
 8008bc0:	2b2b      	cmp	r3, #43	; 0x2b
 8008bc2:	d034      	beq.n	8008c2e <__gethex+0x146>
 8008bc4:	2b2d      	cmp	r3, #45	; 0x2d
 8008bc6:	d036      	beq.n	8008c36 <__gethex+0x14e>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	1c66      	adds	r6, r4, #1
 8008bcc:	9306      	str	r3, [sp, #24]
 8008bce:	7830      	ldrb	r0, [r6, #0]
 8008bd0:	f7ff ff75 	bl	8008abe <__hexdig_fun>
 8008bd4:	1e43      	subs	r3, r0, #1
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	2b18      	cmp	r3, #24
 8008bda:	d833      	bhi.n	8008c44 <__gethex+0x15c>
 8008bdc:	3810      	subs	r0, #16
 8008bde:	0005      	movs	r5, r0
 8008be0:	3601      	adds	r6, #1
 8008be2:	7830      	ldrb	r0, [r6, #0]
 8008be4:	f7ff ff6b 	bl	8008abe <__hexdig_fun>
 8008be8:	1e43      	subs	r3, r0, #1
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	2b18      	cmp	r3, #24
 8008bee:	d924      	bls.n	8008c3a <__gethex+0x152>
 8008bf0:	9b06      	ldr	r3, [sp, #24]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d000      	beq.n	8008bf8 <__gethex+0x110>
 8008bf6:	426d      	negs	r5, r5
 8008bf8:	197f      	adds	r7, r7, r5
 8008bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bfc:	601e      	str	r6, [r3, #0]
 8008bfe:	9b03      	ldr	r3, [sp, #12]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d021      	beq.n	8008c48 <__gethex+0x160>
 8008c04:	9b08      	ldr	r3, [sp, #32]
 8008c06:	2606      	movs	r6, #6
 8008c08:	425a      	negs	r2, r3
 8008c0a:	4153      	adcs	r3, r2
 8008c0c:	425b      	negs	r3, r3
 8008c0e:	401e      	ands	r6, r3
 8008c10:	0030      	movs	r0, r6
 8008c12:	b00d      	add	sp, #52	; 0x34
 8008c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c16:	2300      	movs	r3, #0
 8008c18:	9303      	str	r3, [sp, #12]
 8008c1a:	001e      	movs	r6, r3
 8008c1c:	e7a8      	b.n	8008b70 <__gethex+0x88>
 8008c1e:	3401      	adds	r4, #1
 8008c20:	e7be      	b.n	8008ba0 <__gethex+0xb8>
 8008c22:	9c01      	ldr	r4, [sp, #4]
 8008c24:	2301      	movs	r3, #1
 8008c26:	9303      	str	r3, [sp, #12]
 8008c28:	e7c4      	b.n	8008bb4 <__gethex+0xcc>
 8008c2a:	0007      	movs	r7, r0
 8008c2c:	e7fa      	b.n	8008c24 <__gethex+0x13c>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	9306      	str	r3, [sp, #24]
 8008c32:	1ca6      	adds	r6, r4, #2
 8008c34:	e7cb      	b.n	8008bce <__gethex+0xe6>
 8008c36:	2301      	movs	r3, #1
 8008c38:	e7fa      	b.n	8008c30 <__gethex+0x148>
 8008c3a:	230a      	movs	r3, #10
 8008c3c:	435d      	muls	r5, r3
 8008c3e:	182d      	adds	r5, r5, r0
 8008c40:	3d10      	subs	r5, #16
 8008c42:	e7cd      	b.n	8008be0 <__gethex+0xf8>
 8008c44:	0026      	movs	r6, r4
 8008c46:	e7d8      	b.n	8008bfa <__gethex+0x112>
 8008c48:	9b01      	ldr	r3, [sp, #4]
 8008c4a:	9903      	ldr	r1, [sp, #12]
 8008c4c:	1ae3      	subs	r3, r4, r3
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	2b07      	cmp	r3, #7
 8008c52:	dc47      	bgt.n	8008ce4 <__gethex+0x1fc>
 8008c54:	9805      	ldr	r0, [sp, #20]
 8008c56:	f000 fa68 	bl	800912a <_Balloc>
 8008c5a:	0003      	movs	r3, r0
 8008c5c:	3314      	adds	r3, #20
 8008c5e:	9303      	str	r3, [sp, #12]
 8008c60:	9308      	str	r3, [sp, #32]
 8008c62:	2300      	movs	r3, #0
 8008c64:	0005      	movs	r5, r0
 8008c66:	001e      	movs	r6, r3
 8008c68:	9306      	str	r3, [sp, #24]
 8008c6a:	9b01      	ldr	r3, [sp, #4]
 8008c6c:	42a3      	cmp	r3, r4
 8008c6e:	d33c      	bcc.n	8008cea <__gethex+0x202>
 8008c70:	9c08      	ldr	r4, [sp, #32]
 8008c72:	9b03      	ldr	r3, [sp, #12]
 8008c74:	c440      	stmia	r4!, {r6}
 8008c76:	1ae4      	subs	r4, r4, r3
 8008c78:	10a4      	asrs	r4, r4, #2
 8008c7a:	612c      	str	r4, [r5, #16]
 8008c7c:	0030      	movs	r0, r6
 8008c7e:	f000 fb21 	bl	80092c4 <__hi0bits>
 8008c82:	9b02      	ldr	r3, [sp, #8]
 8008c84:	0164      	lsls	r4, r4, #5
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	1a26      	subs	r6, r4, r0
 8008c8a:	9301      	str	r3, [sp, #4]
 8008c8c:	429e      	cmp	r6, r3
 8008c8e:	dd5f      	ble.n	8008d50 <__gethex+0x268>
 8008c90:	1af6      	subs	r6, r6, r3
 8008c92:	0031      	movs	r1, r6
 8008c94:	0028      	movs	r0, r5
 8008c96:	f000 fe1c 	bl	80098d2 <__any_on>
 8008c9a:	1e04      	subs	r4, r0, #0
 8008c9c:	d00f      	beq.n	8008cbe <__gethex+0x1d6>
 8008c9e:	2401      	movs	r4, #1
 8008ca0:	211f      	movs	r1, #31
 8008ca2:	0020      	movs	r0, r4
 8008ca4:	1e73      	subs	r3, r6, #1
 8008ca6:	4019      	ands	r1, r3
 8008ca8:	4088      	lsls	r0, r1
 8008caa:	0001      	movs	r1, r0
 8008cac:	115a      	asrs	r2, r3, #5
 8008cae:	9803      	ldr	r0, [sp, #12]
 8008cb0:	0092      	lsls	r2, r2, #2
 8008cb2:	5812      	ldr	r2, [r2, r0]
 8008cb4:	420a      	tst	r2, r1
 8008cb6:	d002      	beq.n	8008cbe <__gethex+0x1d6>
 8008cb8:	42a3      	cmp	r3, r4
 8008cba:	dc41      	bgt.n	8008d40 <__gethex+0x258>
 8008cbc:	2402      	movs	r4, #2
 8008cbe:	0031      	movs	r1, r6
 8008cc0:	0028      	movs	r0, r5
 8008cc2:	f7ff fec8 	bl	8008a56 <rshift>
 8008cc6:	19bf      	adds	r7, r7, r6
 8008cc8:	9b02      	ldr	r3, [sp, #8]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	9304      	str	r3, [sp, #16]
 8008cce:	42bb      	cmp	r3, r7
 8008cd0:	da4e      	bge.n	8008d70 <__gethex+0x288>
 8008cd2:	0029      	movs	r1, r5
 8008cd4:	9805      	ldr	r0, [sp, #20]
 8008cd6:	f000 fa60 	bl	800919a <_Bfree>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008cde:	26a3      	movs	r6, #163	; 0xa3
 8008ce0:	6013      	str	r3, [r2, #0]
 8008ce2:	e795      	b.n	8008c10 <__gethex+0x128>
 8008ce4:	3101      	adds	r1, #1
 8008ce6:	105b      	asrs	r3, r3, #1
 8008ce8:	e7b2      	b.n	8008c50 <__gethex+0x168>
 8008cea:	1e63      	subs	r3, r4, #1
 8008cec:	9309      	str	r3, [sp, #36]	; 0x24
 8008cee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d015      	beq.n	8008d22 <__gethex+0x23a>
 8008cf6:	9b06      	ldr	r3, [sp, #24]
 8008cf8:	2b20      	cmp	r3, #32
 8008cfa:	d105      	bne.n	8008d08 <__gethex+0x220>
 8008cfc:	9b08      	ldr	r3, [sp, #32]
 8008cfe:	601e      	str	r6, [r3, #0]
 8008d00:	2600      	movs	r6, #0
 8008d02:	3304      	adds	r3, #4
 8008d04:	9308      	str	r3, [sp, #32]
 8008d06:	9606      	str	r6, [sp, #24]
 8008d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d0a:	7818      	ldrb	r0, [r3, #0]
 8008d0c:	f7ff fed7 	bl	8008abe <__hexdig_fun>
 8008d10:	230f      	movs	r3, #15
 8008d12:	4018      	ands	r0, r3
 8008d14:	9b06      	ldr	r3, [sp, #24]
 8008d16:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008d18:	4098      	lsls	r0, r3
 8008d1a:	3304      	adds	r3, #4
 8008d1c:	4306      	orrs	r6, r0
 8008d1e:	9306      	str	r3, [sp, #24]
 8008d20:	e7a3      	b.n	8008c6a <__gethex+0x182>
 8008d22:	2301      	movs	r3, #1
 8008d24:	9a04      	ldr	r2, [sp, #16]
 8008d26:	1a9c      	subs	r4, r3, r2
 8008d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d2a:	191c      	adds	r4, r3, r4
 8008d2c:	9b01      	ldr	r3, [sp, #4]
 8008d2e:	429c      	cmp	r4, r3
 8008d30:	d3e1      	bcc.n	8008cf6 <__gethex+0x20e>
 8008d32:	9907      	ldr	r1, [sp, #28]
 8008d34:	0020      	movs	r0, r4
 8008d36:	f001 f9a1 	bl	800a07c <strncmp>
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	d1db      	bne.n	8008cf6 <__gethex+0x20e>
 8008d3e:	e794      	b.n	8008c6a <__gethex+0x182>
 8008d40:	1eb1      	subs	r1, r6, #2
 8008d42:	0028      	movs	r0, r5
 8008d44:	f000 fdc5 	bl	80098d2 <__any_on>
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	d0b7      	beq.n	8008cbc <__gethex+0x1d4>
 8008d4c:	2403      	movs	r4, #3
 8008d4e:	e7b6      	b.n	8008cbe <__gethex+0x1d6>
 8008d50:	9b01      	ldr	r3, [sp, #4]
 8008d52:	2400      	movs	r4, #0
 8008d54:	429e      	cmp	r6, r3
 8008d56:	dab7      	bge.n	8008cc8 <__gethex+0x1e0>
 8008d58:	1b9e      	subs	r6, r3, r6
 8008d5a:	0029      	movs	r1, r5
 8008d5c:	0032      	movs	r2, r6
 8008d5e:	9805      	ldr	r0, [sp, #20]
 8008d60:	f000 fbe4 	bl	800952c <__lshift>
 8008d64:	0003      	movs	r3, r0
 8008d66:	3314      	adds	r3, #20
 8008d68:	0005      	movs	r5, r0
 8008d6a:	1bbf      	subs	r7, r7, r6
 8008d6c:	9303      	str	r3, [sp, #12]
 8008d6e:	e7ab      	b.n	8008cc8 <__gethex+0x1e0>
 8008d70:	9b02      	ldr	r3, [sp, #8]
 8008d72:	685e      	ldr	r6, [r3, #4]
 8008d74:	42be      	cmp	r6, r7
 8008d76:	dd6b      	ble.n	8008e50 <__gethex+0x368>
 8008d78:	9b01      	ldr	r3, [sp, #4]
 8008d7a:	1bf6      	subs	r6, r6, r7
 8008d7c:	42b3      	cmp	r3, r6
 8008d7e:	dc32      	bgt.n	8008de6 <__gethex+0x2fe>
 8008d80:	9b02      	ldr	r3, [sp, #8]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d026      	beq.n	8008dd6 <__gethex+0x2ee>
 8008d88:	2b03      	cmp	r3, #3
 8008d8a:	d028      	beq.n	8008dde <__gethex+0x2f6>
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d119      	bne.n	8008dc4 <__gethex+0x2dc>
 8008d90:	9b01      	ldr	r3, [sp, #4]
 8008d92:	42b3      	cmp	r3, r6
 8008d94:	d116      	bne.n	8008dc4 <__gethex+0x2dc>
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	dc0d      	bgt.n	8008db6 <__gethex+0x2ce>
 8008d9a:	9b02      	ldr	r3, [sp, #8]
 8008d9c:	2662      	movs	r6, #98	; 0x62
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	9301      	str	r3, [sp, #4]
 8008da2:	9a01      	ldr	r2, [sp, #4]
 8008da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008da6:	601a      	str	r2, [r3, #0]
 8008da8:	2301      	movs	r3, #1
 8008daa:	9a03      	ldr	r2, [sp, #12]
 8008dac:	612b      	str	r3, [r5, #16]
 8008dae:	6013      	str	r3, [r2, #0]
 8008db0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008db2:	601d      	str	r5, [r3, #0]
 8008db4:	e72c      	b.n	8008c10 <__gethex+0x128>
 8008db6:	9901      	ldr	r1, [sp, #4]
 8008db8:	0028      	movs	r0, r5
 8008dba:	3901      	subs	r1, #1
 8008dbc:	f000 fd89 	bl	80098d2 <__any_on>
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	d1ea      	bne.n	8008d9a <__gethex+0x2b2>
 8008dc4:	0029      	movs	r1, r5
 8008dc6:	9805      	ldr	r0, [sp, #20]
 8008dc8:	f000 f9e7 	bl	800919a <_Bfree>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008dd0:	2650      	movs	r6, #80	; 0x50
 8008dd2:	6013      	str	r3, [r2, #0]
 8008dd4:	e71c      	b.n	8008c10 <__gethex+0x128>
 8008dd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d0de      	beq.n	8008d9a <__gethex+0x2b2>
 8008ddc:	e7f2      	b.n	8008dc4 <__gethex+0x2dc>
 8008dde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1da      	bne.n	8008d9a <__gethex+0x2b2>
 8008de4:	e7ee      	b.n	8008dc4 <__gethex+0x2dc>
 8008de6:	1e77      	subs	r7, r6, #1
 8008de8:	2c00      	cmp	r4, #0
 8008dea:	d12f      	bne.n	8008e4c <__gethex+0x364>
 8008dec:	2f00      	cmp	r7, #0
 8008dee:	d004      	beq.n	8008dfa <__gethex+0x312>
 8008df0:	0039      	movs	r1, r7
 8008df2:	0028      	movs	r0, r5
 8008df4:	f000 fd6d 	bl	80098d2 <__any_on>
 8008df8:	0004      	movs	r4, r0
 8008dfa:	231f      	movs	r3, #31
 8008dfc:	117a      	asrs	r2, r7, #5
 8008dfe:	401f      	ands	r7, r3
 8008e00:	3b1e      	subs	r3, #30
 8008e02:	40bb      	lsls	r3, r7
 8008e04:	9903      	ldr	r1, [sp, #12]
 8008e06:	0092      	lsls	r2, r2, #2
 8008e08:	5852      	ldr	r2, [r2, r1]
 8008e0a:	421a      	tst	r2, r3
 8008e0c:	d001      	beq.n	8008e12 <__gethex+0x32a>
 8008e0e:	2302      	movs	r3, #2
 8008e10:	431c      	orrs	r4, r3
 8008e12:	9b01      	ldr	r3, [sp, #4]
 8008e14:	0031      	movs	r1, r6
 8008e16:	1b9b      	subs	r3, r3, r6
 8008e18:	2602      	movs	r6, #2
 8008e1a:	0028      	movs	r0, r5
 8008e1c:	9301      	str	r3, [sp, #4]
 8008e1e:	f7ff fe1a 	bl	8008a56 <rshift>
 8008e22:	9b02      	ldr	r3, [sp, #8]
 8008e24:	685f      	ldr	r7, [r3, #4]
 8008e26:	2c00      	cmp	r4, #0
 8008e28:	d040      	beq.n	8008eac <__gethex+0x3c4>
 8008e2a:	9b02      	ldr	r3, [sp, #8]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d010      	beq.n	8008e54 <__gethex+0x36c>
 8008e32:	2b03      	cmp	r3, #3
 8008e34:	d012      	beq.n	8008e5c <__gethex+0x374>
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d106      	bne.n	8008e48 <__gethex+0x360>
 8008e3a:	07a2      	lsls	r2, r4, #30
 8008e3c:	d504      	bpl.n	8008e48 <__gethex+0x360>
 8008e3e:	9a03      	ldr	r2, [sp, #12]
 8008e40:	6812      	ldr	r2, [r2, #0]
 8008e42:	4314      	orrs	r4, r2
 8008e44:	421c      	tst	r4, r3
 8008e46:	d10c      	bne.n	8008e62 <__gethex+0x37a>
 8008e48:	2310      	movs	r3, #16
 8008e4a:	e02e      	b.n	8008eaa <__gethex+0x3c2>
 8008e4c:	2401      	movs	r4, #1
 8008e4e:	e7d4      	b.n	8008dfa <__gethex+0x312>
 8008e50:	2601      	movs	r6, #1
 8008e52:	e7e8      	b.n	8008e26 <__gethex+0x33e>
 8008e54:	2301      	movs	r3, #1
 8008e56:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008e58:	1a9b      	subs	r3, r3, r2
 8008e5a:	9313      	str	r3, [sp, #76]	; 0x4c
 8008e5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d0f2      	beq.n	8008e48 <__gethex+0x360>
 8008e62:	692c      	ldr	r4, [r5, #16]
 8008e64:	00a3      	lsls	r3, r4, #2
 8008e66:	9304      	str	r3, [sp, #16]
 8008e68:	002b      	movs	r3, r5
 8008e6a:	00a2      	lsls	r2, r4, #2
 8008e6c:	3314      	adds	r3, #20
 8008e6e:	1899      	adds	r1, r3, r2
 8008e70:	2200      	movs	r2, #0
 8008e72:	4694      	mov	ip, r2
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	1c50      	adds	r0, r2, #1
 8008e78:	d01d      	beq.n	8008eb6 <__gethex+0x3ce>
 8008e7a:	3201      	adds	r2, #1
 8008e7c:	601a      	str	r2, [r3, #0]
 8008e7e:	002b      	movs	r3, r5
 8008e80:	3314      	adds	r3, #20
 8008e82:	2e02      	cmp	r6, #2
 8008e84:	d13a      	bne.n	8008efc <__gethex+0x414>
 8008e86:	9a02      	ldr	r2, [sp, #8]
 8008e88:	9901      	ldr	r1, [sp, #4]
 8008e8a:	6812      	ldr	r2, [r2, #0]
 8008e8c:	3a01      	subs	r2, #1
 8008e8e:	428a      	cmp	r2, r1
 8008e90:	d10a      	bne.n	8008ea8 <__gethex+0x3c0>
 8008e92:	114a      	asrs	r2, r1, #5
 8008e94:	211f      	movs	r1, #31
 8008e96:	9801      	ldr	r0, [sp, #4]
 8008e98:	0092      	lsls	r2, r2, #2
 8008e9a:	4001      	ands	r1, r0
 8008e9c:	2001      	movs	r0, #1
 8008e9e:	0004      	movs	r4, r0
 8008ea0:	408c      	lsls	r4, r1
 8008ea2:	58d3      	ldr	r3, [r2, r3]
 8008ea4:	4223      	tst	r3, r4
 8008ea6:	d148      	bne.n	8008f3a <__gethex+0x452>
 8008ea8:	2320      	movs	r3, #32
 8008eaa:	431e      	orrs	r6, r3
 8008eac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008eae:	601d      	str	r5, [r3, #0]
 8008eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eb2:	601f      	str	r7, [r3, #0]
 8008eb4:	e6ac      	b.n	8008c10 <__gethex+0x128>
 8008eb6:	4662      	mov	r2, ip
 8008eb8:	c304      	stmia	r3!, {r2}
 8008eba:	4299      	cmp	r1, r3
 8008ebc:	d8da      	bhi.n	8008e74 <__gethex+0x38c>
 8008ebe:	68ab      	ldr	r3, [r5, #8]
 8008ec0:	429c      	cmp	r4, r3
 8008ec2:	db12      	blt.n	8008eea <__gethex+0x402>
 8008ec4:	686b      	ldr	r3, [r5, #4]
 8008ec6:	9805      	ldr	r0, [sp, #20]
 8008ec8:	1c59      	adds	r1, r3, #1
 8008eca:	f000 f92e 	bl	800912a <_Balloc>
 8008ece:	0029      	movs	r1, r5
 8008ed0:	692b      	ldr	r3, [r5, #16]
 8008ed2:	9003      	str	r0, [sp, #12]
 8008ed4:	1c9a      	adds	r2, r3, #2
 8008ed6:	0092      	lsls	r2, r2, #2
 8008ed8:	310c      	adds	r1, #12
 8008eda:	300c      	adds	r0, #12
 8008edc:	f7fd f8f4 	bl	80060c8 <memcpy>
 8008ee0:	0029      	movs	r1, r5
 8008ee2:	9805      	ldr	r0, [sp, #20]
 8008ee4:	f000 f959 	bl	800919a <_Bfree>
 8008ee8:	9d03      	ldr	r5, [sp, #12]
 8008eea:	692b      	ldr	r3, [r5, #16]
 8008eec:	1c5a      	adds	r2, r3, #1
 8008eee:	612a      	str	r2, [r5, #16]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	3304      	adds	r3, #4
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	18eb      	adds	r3, r5, r3
 8008ef8:	605a      	str	r2, [r3, #4]
 8008efa:	e7c0      	b.n	8008e7e <__gethex+0x396>
 8008efc:	692a      	ldr	r2, [r5, #16]
 8008efe:	42a2      	cmp	r2, r4
 8008f00:	dd0a      	ble.n	8008f18 <__gethex+0x430>
 8008f02:	2101      	movs	r1, #1
 8008f04:	0028      	movs	r0, r5
 8008f06:	f7ff fda6 	bl	8008a56 <rshift>
 8008f0a:	9b02      	ldr	r3, [sp, #8]
 8008f0c:	3701      	adds	r7, #1
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	2601      	movs	r6, #1
 8008f12:	42bb      	cmp	r3, r7
 8008f14:	dac8      	bge.n	8008ea8 <__gethex+0x3c0>
 8008f16:	e6dc      	b.n	8008cd2 <__gethex+0x1ea>
 8008f18:	241f      	movs	r4, #31
 8008f1a:	9a01      	ldr	r2, [sp, #4]
 8008f1c:	2601      	movs	r6, #1
 8008f1e:	4022      	ands	r2, r4
 8008f20:	1e14      	subs	r4, r2, #0
 8008f22:	d0c1      	beq.n	8008ea8 <__gethex+0x3c0>
 8008f24:	9a04      	ldr	r2, [sp, #16]
 8008f26:	189b      	adds	r3, r3, r2
 8008f28:	3b04      	subs	r3, #4
 8008f2a:	6818      	ldr	r0, [r3, #0]
 8008f2c:	f000 f9ca 	bl	80092c4 <__hi0bits>
 8008f30:	2120      	movs	r1, #32
 8008f32:	1b0c      	subs	r4, r1, r4
 8008f34:	42a0      	cmp	r0, r4
 8008f36:	dbe4      	blt.n	8008f02 <__gethex+0x41a>
 8008f38:	e7b6      	b.n	8008ea8 <__gethex+0x3c0>
 8008f3a:	0006      	movs	r6, r0
 8008f3c:	e7b4      	b.n	8008ea8 <__gethex+0x3c0>

08008f3e <L_shift>:
 8008f3e:	2308      	movs	r3, #8
 8008f40:	b570      	push	{r4, r5, r6, lr}
 8008f42:	2520      	movs	r5, #32
 8008f44:	1a9a      	subs	r2, r3, r2
 8008f46:	0092      	lsls	r2, r2, #2
 8008f48:	1aad      	subs	r5, r5, r2
 8008f4a:	6843      	ldr	r3, [r0, #4]
 8008f4c:	6806      	ldr	r6, [r0, #0]
 8008f4e:	001c      	movs	r4, r3
 8008f50:	40ac      	lsls	r4, r5
 8008f52:	40d3      	lsrs	r3, r2
 8008f54:	4334      	orrs	r4, r6
 8008f56:	6004      	str	r4, [r0, #0]
 8008f58:	6043      	str	r3, [r0, #4]
 8008f5a:	3004      	adds	r0, #4
 8008f5c:	4288      	cmp	r0, r1
 8008f5e:	d3f4      	bcc.n	8008f4a <L_shift+0xc>
 8008f60:	bd70      	pop	{r4, r5, r6, pc}

08008f62 <__match>:
 8008f62:	b530      	push	{r4, r5, lr}
 8008f64:	6803      	ldr	r3, [r0, #0]
 8008f66:	780c      	ldrb	r4, [r1, #0]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	2c00      	cmp	r4, #0
 8008f6c:	d102      	bne.n	8008f74 <__match+0x12>
 8008f6e:	6003      	str	r3, [r0, #0]
 8008f70:	2001      	movs	r0, #1
 8008f72:	bd30      	pop	{r4, r5, pc}
 8008f74:	781a      	ldrb	r2, [r3, #0]
 8008f76:	0015      	movs	r5, r2
 8008f78:	3d41      	subs	r5, #65	; 0x41
 8008f7a:	2d19      	cmp	r5, #25
 8008f7c:	d800      	bhi.n	8008f80 <__match+0x1e>
 8008f7e:	3220      	adds	r2, #32
 8008f80:	3101      	adds	r1, #1
 8008f82:	42a2      	cmp	r2, r4
 8008f84:	d0ef      	beq.n	8008f66 <__match+0x4>
 8008f86:	2000      	movs	r0, #0
 8008f88:	e7f3      	b.n	8008f72 <__match+0x10>

08008f8a <__hexnan>:
 8008f8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f8c:	b08b      	sub	sp, #44	; 0x2c
 8008f8e:	9201      	str	r2, [sp, #4]
 8008f90:	680a      	ldr	r2, [r1, #0]
 8008f92:	9901      	ldr	r1, [sp, #4]
 8008f94:	1153      	asrs	r3, r2, #5
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	18cb      	adds	r3, r1, r3
 8008f9a:	9304      	str	r3, [sp, #16]
 8008f9c:	231f      	movs	r3, #31
 8008f9e:	401a      	ands	r2, r3
 8008fa0:	9008      	str	r0, [sp, #32]
 8008fa2:	9206      	str	r2, [sp, #24]
 8008fa4:	d002      	beq.n	8008fac <__hexnan+0x22>
 8008fa6:	9b04      	ldr	r3, [sp, #16]
 8008fa8:	3304      	adds	r3, #4
 8008faa:	9304      	str	r3, [sp, #16]
 8008fac:	9b04      	ldr	r3, [sp, #16]
 8008fae:	2500      	movs	r5, #0
 8008fb0:	1f1e      	subs	r6, r3, #4
 8008fb2:	0037      	movs	r7, r6
 8008fb4:	0034      	movs	r4, r6
 8008fb6:	9b08      	ldr	r3, [sp, #32]
 8008fb8:	6035      	str	r5, [r6, #0]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	9507      	str	r5, [sp, #28]
 8008fbe:	9305      	str	r3, [sp, #20]
 8008fc0:	9502      	str	r5, [sp, #8]
 8008fc2:	9b05      	ldr	r3, [sp, #20]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fc8:	9b05      	ldr	r3, [sp, #20]
 8008fca:	785b      	ldrb	r3, [r3, #1]
 8008fcc:	9303      	str	r3, [sp, #12]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d028      	beq.n	8009024 <__hexnan+0x9a>
 8008fd2:	9803      	ldr	r0, [sp, #12]
 8008fd4:	f7ff fd73 	bl	8008abe <__hexdig_fun>
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	d145      	bne.n	8009068 <__hexnan+0xde>
 8008fdc:	9b03      	ldr	r3, [sp, #12]
 8008fde:	2b20      	cmp	r3, #32
 8008fe0:	d819      	bhi.n	8009016 <__hexnan+0x8c>
 8008fe2:	9b02      	ldr	r3, [sp, #8]
 8008fe4:	9a07      	ldr	r2, [sp, #28]
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	dd12      	ble.n	8009010 <__hexnan+0x86>
 8008fea:	42bc      	cmp	r4, r7
 8008fec:	d206      	bcs.n	8008ffc <__hexnan+0x72>
 8008fee:	2d07      	cmp	r5, #7
 8008ff0:	dc04      	bgt.n	8008ffc <__hexnan+0x72>
 8008ff2:	002a      	movs	r2, r5
 8008ff4:	0039      	movs	r1, r7
 8008ff6:	0020      	movs	r0, r4
 8008ff8:	f7ff ffa1 	bl	8008f3e <L_shift>
 8008ffc:	9b01      	ldr	r3, [sp, #4]
 8008ffe:	2508      	movs	r5, #8
 8009000:	429c      	cmp	r4, r3
 8009002:	d905      	bls.n	8009010 <__hexnan+0x86>
 8009004:	1f27      	subs	r7, r4, #4
 8009006:	2500      	movs	r5, #0
 8009008:	003c      	movs	r4, r7
 800900a:	9b02      	ldr	r3, [sp, #8]
 800900c:	603d      	str	r5, [r7, #0]
 800900e:	9307      	str	r3, [sp, #28]
 8009010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009012:	9305      	str	r3, [sp, #20]
 8009014:	e7d5      	b.n	8008fc2 <__hexnan+0x38>
 8009016:	9b03      	ldr	r3, [sp, #12]
 8009018:	2b29      	cmp	r3, #41	; 0x29
 800901a:	d14a      	bne.n	80090b2 <__hexnan+0x128>
 800901c:	9b05      	ldr	r3, [sp, #20]
 800901e:	9a08      	ldr	r2, [sp, #32]
 8009020:	3302      	adds	r3, #2
 8009022:	6013      	str	r3, [r2, #0]
 8009024:	9b02      	ldr	r3, [sp, #8]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d043      	beq.n	80090b2 <__hexnan+0x128>
 800902a:	42bc      	cmp	r4, r7
 800902c:	d206      	bcs.n	800903c <__hexnan+0xb2>
 800902e:	2d07      	cmp	r5, #7
 8009030:	dc04      	bgt.n	800903c <__hexnan+0xb2>
 8009032:	002a      	movs	r2, r5
 8009034:	0039      	movs	r1, r7
 8009036:	0020      	movs	r0, r4
 8009038:	f7ff ff81 	bl	8008f3e <L_shift>
 800903c:	9b01      	ldr	r3, [sp, #4]
 800903e:	429c      	cmp	r4, r3
 8009040:	d926      	bls.n	8009090 <__hexnan+0x106>
 8009042:	cc04      	ldmia	r4!, {r2}
 8009044:	601a      	str	r2, [r3, #0]
 8009046:	3304      	adds	r3, #4
 8009048:	42a6      	cmp	r6, r4
 800904a:	d2fa      	bcs.n	8009042 <__hexnan+0xb8>
 800904c:	2200      	movs	r2, #0
 800904e:	c304      	stmia	r3!, {r2}
 8009050:	429e      	cmp	r6, r3
 8009052:	d2fc      	bcs.n	800904e <__hexnan+0xc4>
 8009054:	6833      	ldr	r3, [r6, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d104      	bne.n	8009064 <__hexnan+0xda>
 800905a:	9b01      	ldr	r3, [sp, #4]
 800905c:	429e      	cmp	r6, r3
 800905e:	d126      	bne.n	80090ae <__hexnan+0x124>
 8009060:	2301      	movs	r3, #1
 8009062:	6033      	str	r3, [r6, #0]
 8009064:	2005      	movs	r0, #5
 8009066:	e025      	b.n	80090b4 <__hexnan+0x12a>
 8009068:	9b02      	ldr	r3, [sp, #8]
 800906a:	3501      	adds	r5, #1
 800906c:	3301      	adds	r3, #1
 800906e:	9302      	str	r3, [sp, #8]
 8009070:	2d08      	cmp	r5, #8
 8009072:	dd06      	ble.n	8009082 <__hexnan+0xf8>
 8009074:	9b01      	ldr	r3, [sp, #4]
 8009076:	429c      	cmp	r4, r3
 8009078:	d9ca      	bls.n	8009010 <__hexnan+0x86>
 800907a:	2300      	movs	r3, #0
 800907c:	2501      	movs	r5, #1
 800907e:	3c04      	subs	r4, #4
 8009080:	6023      	str	r3, [r4, #0]
 8009082:	220f      	movs	r2, #15
 8009084:	6823      	ldr	r3, [r4, #0]
 8009086:	4010      	ands	r0, r2
 8009088:	011b      	lsls	r3, r3, #4
 800908a:	4318      	orrs	r0, r3
 800908c:	6020      	str	r0, [r4, #0]
 800908e:	e7bf      	b.n	8009010 <__hexnan+0x86>
 8009090:	9b06      	ldr	r3, [sp, #24]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d0de      	beq.n	8009054 <__hexnan+0xca>
 8009096:	2120      	movs	r1, #32
 8009098:	9a06      	ldr	r2, [sp, #24]
 800909a:	9b04      	ldr	r3, [sp, #16]
 800909c:	1a89      	subs	r1, r1, r2
 800909e:	2201      	movs	r2, #1
 80090a0:	4252      	negs	r2, r2
 80090a2:	40ca      	lsrs	r2, r1
 80090a4:	3b04      	subs	r3, #4
 80090a6:	6819      	ldr	r1, [r3, #0]
 80090a8:	400a      	ands	r2, r1
 80090aa:	601a      	str	r2, [r3, #0]
 80090ac:	e7d2      	b.n	8009054 <__hexnan+0xca>
 80090ae:	3e04      	subs	r6, #4
 80090b0:	e7d0      	b.n	8009054 <__hexnan+0xca>
 80090b2:	2004      	movs	r0, #4
 80090b4:	b00b      	add	sp, #44	; 0x2c
 80090b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080090b8 <__locale_ctype_ptr_l>:
 80090b8:	30ec      	adds	r0, #236	; 0xec
 80090ba:	6800      	ldr	r0, [r0, #0]
 80090bc:	4770      	bx	lr

080090be <__localeconv_l>:
 80090be:	30f0      	adds	r0, #240	; 0xf0
 80090c0:	4770      	bx	lr
	...

080090c4 <_localeconv_r>:
 80090c4:	4b03      	ldr	r3, [pc, #12]	; (80090d4 <_localeconv_r+0x10>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	6a18      	ldr	r0, [r3, #32]
 80090ca:	2800      	cmp	r0, #0
 80090cc:	d100      	bne.n	80090d0 <_localeconv_r+0xc>
 80090ce:	4802      	ldr	r0, [pc, #8]	; (80090d8 <_localeconv_r+0x14>)
 80090d0:	30f0      	adds	r0, #240	; 0xf0
 80090d2:	4770      	bx	lr
 80090d4:	20000010 	.word	0x20000010
 80090d8:	20000074 	.word	0x20000074

080090dc <malloc>:
 80090dc:	b510      	push	{r4, lr}
 80090de:	4b03      	ldr	r3, [pc, #12]	; (80090ec <malloc+0x10>)
 80090e0:	0001      	movs	r1, r0
 80090e2:	6818      	ldr	r0, [r3, #0]
 80090e4:	f000 fc70 	bl	80099c8 <_malloc_r>
 80090e8:	bd10      	pop	{r4, pc}
 80090ea:	46c0      	nop			; (mov r8, r8)
 80090ec:	20000010 	.word	0x20000010

080090f0 <__ascii_mbtowc>:
 80090f0:	b082      	sub	sp, #8
 80090f2:	2900      	cmp	r1, #0
 80090f4:	d100      	bne.n	80090f8 <__ascii_mbtowc+0x8>
 80090f6:	a901      	add	r1, sp, #4
 80090f8:	1e10      	subs	r0, r2, #0
 80090fa:	d006      	beq.n	800910a <__ascii_mbtowc+0x1a>
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d006      	beq.n	800910e <__ascii_mbtowc+0x1e>
 8009100:	7813      	ldrb	r3, [r2, #0]
 8009102:	600b      	str	r3, [r1, #0]
 8009104:	7810      	ldrb	r0, [r2, #0]
 8009106:	1e43      	subs	r3, r0, #1
 8009108:	4198      	sbcs	r0, r3
 800910a:	b002      	add	sp, #8
 800910c:	4770      	bx	lr
 800910e:	2002      	movs	r0, #2
 8009110:	4240      	negs	r0, r0
 8009112:	e7fa      	b.n	800910a <__ascii_mbtowc+0x1a>

08009114 <memchr>:
 8009114:	b2c9      	uxtb	r1, r1
 8009116:	1882      	adds	r2, r0, r2
 8009118:	4290      	cmp	r0, r2
 800911a:	d101      	bne.n	8009120 <memchr+0xc>
 800911c:	2000      	movs	r0, #0
 800911e:	4770      	bx	lr
 8009120:	7803      	ldrb	r3, [r0, #0]
 8009122:	428b      	cmp	r3, r1
 8009124:	d0fb      	beq.n	800911e <memchr+0xa>
 8009126:	3001      	adds	r0, #1
 8009128:	e7f6      	b.n	8009118 <memchr+0x4>

0800912a <_Balloc>:
 800912a:	b570      	push	{r4, r5, r6, lr}
 800912c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800912e:	0004      	movs	r4, r0
 8009130:	000d      	movs	r5, r1
 8009132:	2e00      	cmp	r6, #0
 8009134:	d107      	bne.n	8009146 <_Balloc+0x1c>
 8009136:	2010      	movs	r0, #16
 8009138:	f7ff ffd0 	bl	80090dc <malloc>
 800913c:	6260      	str	r0, [r4, #36]	; 0x24
 800913e:	6046      	str	r6, [r0, #4]
 8009140:	6086      	str	r6, [r0, #8]
 8009142:	6006      	str	r6, [r0, #0]
 8009144:	60c6      	str	r6, [r0, #12]
 8009146:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009148:	68f3      	ldr	r3, [r6, #12]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d013      	beq.n	8009176 <_Balloc+0x4c>
 800914e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009150:	00aa      	lsls	r2, r5, #2
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	189b      	adds	r3, r3, r2
 8009156:	6818      	ldr	r0, [r3, #0]
 8009158:	2800      	cmp	r0, #0
 800915a:	d118      	bne.n	800918e <_Balloc+0x64>
 800915c:	2101      	movs	r1, #1
 800915e:	000e      	movs	r6, r1
 8009160:	40ae      	lsls	r6, r5
 8009162:	1d72      	adds	r2, r6, #5
 8009164:	0092      	lsls	r2, r2, #2
 8009166:	0020      	movs	r0, r4
 8009168:	f000 fbd5 	bl	8009916 <_calloc_r>
 800916c:	2800      	cmp	r0, #0
 800916e:	d00c      	beq.n	800918a <_Balloc+0x60>
 8009170:	6045      	str	r5, [r0, #4]
 8009172:	6086      	str	r6, [r0, #8]
 8009174:	e00d      	b.n	8009192 <_Balloc+0x68>
 8009176:	2221      	movs	r2, #33	; 0x21
 8009178:	2104      	movs	r1, #4
 800917a:	0020      	movs	r0, r4
 800917c:	f000 fbcb 	bl	8009916 <_calloc_r>
 8009180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009182:	60f0      	str	r0, [r6, #12]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1e1      	bne.n	800914e <_Balloc+0x24>
 800918a:	2000      	movs	r0, #0
 800918c:	bd70      	pop	{r4, r5, r6, pc}
 800918e:	6802      	ldr	r2, [r0, #0]
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	2300      	movs	r3, #0
 8009194:	6103      	str	r3, [r0, #16]
 8009196:	60c3      	str	r3, [r0, #12]
 8009198:	e7f8      	b.n	800918c <_Balloc+0x62>

0800919a <_Bfree>:
 800919a:	b570      	push	{r4, r5, r6, lr}
 800919c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800919e:	0006      	movs	r6, r0
 80091a0:	000d      	movs	r5, r1
 80091a2:	2c00      	cmp	r4, #0
 80091a4:	d107      	bne.n	80091b6 <_Bfree+0x1c>
 80091a6:	2010      	movs	r0, #16
 80091a8:	f7ff ff98 	bl	80090dc <malloc>
 80091ac:	6270      	str	r0, [r6, #36]	; 0x24
 80091ae:	6044      	str	r4, [r0, #4]
 80091b0:	6084      	str	r4, [r0, #8]
 80091b2:	6004      	str	r4, [r0, #0]
 80091b4:	60c4      	str	r4, [r0, #12]
 80091b6:	2d00      	cmp	r5, #0
 80091b8:	d007      	beq.n	80091ca <_Bfree+0x30>
 80091ba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80091bc:	686a      	ldr	r2, [r5, #4]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	0092      	lsls	r2, r2, #2
 80091c2:	189b      	adds	r3, r3, r2
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	602a      	str	r2, [r5, #0]
 80091c8:	601d      	str	r5, [r3, #0]
 80091ca:	bd70      	pop	{r4, r5, r6, pc}

080091cc <__multadd>:
 80091cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091ce:	001e      	movs	r6, r3
 80091d0:	2314      	movs	r3, #20
 80091d2:	469c      	mov	ip, r3
 80091d4:	0007      	movs	r7, r0
 80091d6:	000c      	movs	r4, r1
 80091d8:	2000      	movs	r0, #0
 80091da:	690d      	ldr	r5, [r1, #16]
 80091dc:	448c      	add	ip, r1
 80091de:	4663      	mov	r3, ip
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	3001      	adds	r0, #1
 80091e4:	b299      	uxth	r1, r3
 80091e6:	4663      	mov	r3, ip
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4351      	muls	r1, r2
 80091ec:	0c1b      	lsrs	r3, r3, #16
 80091ee:	4353      	muls	r3, r2
 80091f0:	1989      	adds	r1, r1, r6
 80091f2:	0c0e      	lsrs	r6, r1, #16
 80091f4:	199b      	adds	r3, r3, r6
 80091f6:	b289      	uxth	r1, r1
 80091f8:	0c1e      	lsrs	r6, r3, #16
 80091fa:	041b      	lsls	r3, r3, #16
 80091fc:	185b      	adds	r3, r3, r1
 80091fe:	4661      	mov	r1, ip
 8009200:	c108      	stmia	r1!, {r3}
 8009202:	468c      	mov	ip, r1
 8009204:	4285      	cmp	r5, r0
 8009206:	dcea      	bgt.n	80091de <__multadd+0x12>
 8009208:	2e00      	cmp	r6, #0
 800920a:	d01b      	beq.n	8009244 <__multadd+0x78>
 800920c:	68a3      	ldr	r3, [r4, #8]
 800920e:	42ab      	cmp	r3, r5
 8009210:	dc12      	bgt.n	8009238 <__multadd+0x6c>
 8009212:	6863      	ldr	r3, [r4, #4]
 8009214:	0038      	movs	r0, r7
 8009216:	1c59      	adds	r1, r3, #1
 8009218:	f7ff ff87 	bl	800912a <_Balloc>
 800921c:	0021      	movs	r1, r4
 800921e:	6923      	ldr	r3, [r4, #16]
 8009220:	9001      	str	r0, [sp, #4]
 8009222:	1c9a      	adds	r2, r3, #2
 8009224:	0092      	lsls	r2, r2, #2
 8009226:	310c      	adds	r1, #12
 8009228:	300c      	adds	r0, #12
 800922a:	f7fc ff4d 	bl	80060c8 <memcpy>
 800922e:	0021      	movs	r1, r4
 8009230:	0038      	movs	r0, r7
 8009232:	f7ff ffb2 	bl	800919a <_Bfree>
 8009236:	9c01      	ldr	r4, [sp, #4]
 8009238:	1d2b      	adds	r3, r5, #4
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	18e3      	adds	r3, r4, r3
 800923e:	3501      	adds	r5, #1
 8009240:	605e      	str	r6, [r3, #4]
 8009242:	6125      	str	r5, [r4, #16]
 8009244:	0020      	movs	r0, r4
 8009246:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08009248 <__s2b>:
 8009248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800924a:	0006      	movs	r6, r0
 800924c:	0018      	movs	r0, r3
 800924e:	000c      	movs	r4, r1
 8009250:	3008      	adds	r0, #8
 8009252:	2109      	movs	r1, #9
 8009254:	9301      	str	r3, [sp, #4]
 8009256:	0015      	movs	r5, r2
 8009258:	f7f6 fff0 	bl	800023c <__divsi3>
 800925c:	2301      	movs	r3, #1
 800925e:	2100      	movs	r1, #0
 8009260:	4283      	cmp	r3, r0
 8009262:	db1f      	blt.n	80092a4 <__s2b+0x5c>
 8009264:	0030      	movs	r0, r6
 8009266:	f7ff ff60 	bl	800912a <_Balloc>
 800926a:	9b08      	ldr	r3, [sp, #32]
 800926c:	6143      	str	r3, [r0, #20]
 800926e:	2301      	movs	r3, #1
 8009270:	6103      	str	r3, [r0, #16]
 8009272:	2d09      	cmp	r5, #9
 8009274:	dd19      	ble.n	80092aa <__s2b+0x62>
 8009276:	0023      	movs	r3, r4
 8009278:	3309      	adds	r3, #9
 800927a:	001f      	movs	r7, r3
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	1964      	adds	r4, r4, r5
 8009280:	783b      	ldrb	r3, [r7, #0]
 8009282:	0001      	movs	r1, r0
 8009284:	3b30      	subs	r3, #48	; 0x30
 8009286:	220a      	movs	r2, #10
 8009288:	0030      	movs	r0, r6
 800928a:	3701      	adds	r7, #1
 800928c:	f7ff ff9e 	bl	80091cc <__multadd>
 8009290:	42a7      	cmp	r7, r4
 8009292:	d1f5      	bne.n	8009280 <__s2b+0x38>
 8009294:	9b00      	ldr	r3, [sp, #0]
 8009296:	195c      	adds	r4, r3, r5
 8009298:	3c08      	subs	r4, #8
 800929a:	002f      	movs	r7, r5
 800929c:	9b01      	ldr	r3, [sp, #4]
 800929e:	429f      	cmp	r7, r3
 80092a0:	db06      	blt.n	80092b0 <__s2b+0x68>
 80092a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80092a4:	005b      	lsls	r3, r3, #1
 80092a6:	3101      	adds	r1, #1
 80092a8:	e7da      	b.n	8009260 <__s2b+0x18>
 80092aa:	340a      	adds	r4, #10
 80092ac:	2509      	movs	r5, #9
 80092ae:	e7f4      	b.n	800929a <__s2b+0x52>
 80092b0:	1b63      	subs	r3, r4, r5
 80092b2:	5ddb      	ldrb	r3, [r3, r7]
 80092b4:	0001      	movs	r1, r0
 80092b6:	3b30      	subs	r3, #48	; 0x30
 80092b8:	220a      	movs	r2, #10
 80092ba:	0030      	movs	r0, r6
 80092bc:	f7ff ff86 	bl	80091cc <__multadd>
 80092c0:	3701      	adds	r7, #1
 80092c2:	e7eb      	b.n	800929c <__s2b+0x54>

080092c4 <__hi0bits>:
 80092c4:	0003      	movs	r3, r0
 80092c6:	0c02      	lsrs	r2, r0, #16
 80092c8:	2000      	movs	r0, #0
 80092ca:	4282      	cmp	r2, r0
 80092cc:	d101      	bne.n	80092d2 <__hi0bits+0xe>
 80092ce:	041b      	lsls	r3, r3, #16
 80092d0:	3010      	adds	r0, #16
 80092d2:	0e1a      	lsrs	r2, r3, #24
 80092d4:	d101      	bne.n	80092da <__hi0bits+0x16>
 80092d6:	3008      	adds	r0, #8
 80092d8:	021b      	lsls	r3, r3, #8
 80092da:	0f1a      	lsrs	r2, r3, #28
 80092dc:	d101      	bne.n	80092e2 <__hi0bits+0x1e>
 80092de:	3004      	adds	r0, #4
 80092e0:	011b      	lsls	r3, r3, #4
 80092e2:	0f9a      	lsrs	r2, r3, #30
 80092e4:	d101      	bne.n	80092ea <__hi0bits+0x26>
 80092e6:	3002      	adds	r0, #2
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	db03      	blt.n	80092f6 <__hi0bits+0x32>
 80092ee:	3001      	adds	r0, #1
 80092f0:	005b      	lsls	r3, r3, #1
 80092f2:	d400      	bmi.n	80092f6 <__hi0bits+0x32>
 80092f4:	2020      	movs	r0, #32
 80092f6:	4770      	bx	lr

080092f8 <__lo0bits>:
 80092f8:	2207      	movs	r2, #7
 80092fa:	6803      	ldr	r3, [r0, #0]
 80092fc:	b510      	push	{r4, lr}
 80092fe:	0001      	movs	r1, r0
 8009300:	401a      	ands	r2, r3
 8009302:	d00d      	beq.n	8009320 <__lo0bits+0x28>
 8009304:	2401      	movs	r4, #1
 8009306:	2000      	movs	r0, #0
 8009308:	4223      	tst	r3, r4
 800930a:	d105      	bne.n	8009318 <__lo0bits+0x20>
 800930c:	3002      	adds	r0, #2
 800930e:	4203      	tst	r3, r0
 8009310:	d003      	beq.n	800931a <__lo0bits+0x22>
 8009312:	40e3      	lsrs	r3, r4
 8009314:	0020      	movs	r0, r4
 8009316:	600b      	str	r3, [r1, #0]
 8009318:	bd10      	pop	{r4, pc}
 800931a:	089b      	lsrs	r3, r3, #2
 800931c:	600b      	str	r3, [r1, #0]
 800931e:	e7fb      	b.n	8009318 <__lo0bits+0x20>
 8009320:	b29c      	uxth	r4, r3
 8009322:	0010      	movs	r0, r2
 8009324:	2c00      	cmp	r4, #0
 8009326:	d101      	bne.n	800932c <__lo0bits+0x34>
 8009328:	2010      	movs	r0, #16
 800932a:	0c1b      	lsrs	r3, r3, #16
 800932c:	b2da      	uxtb	r2, r3
 800932e:	2a00      	cmp	r2, #0
 8009330:	d101      	bne.n	8009336 <__lo0bits+0x3e>
 8009332:	3008      	adds	r0, #8
 8009334:	0a1b      	lsrs	r3, r3, #8
 8009336:	071a      	lsls	r2, r3, #28
 8009338:	d101      	bne.n	800933e <__lo0bits+0x46>
 800933a:	3004      	adds	r0, #4
 800933c:	091b      	lsrs	r3, r3, #4
 800933e:	079a      	lsls	r2, r3, #30
 8009340:	d101      	bne.n	8009346 <__lo0bits+0x4e>
 8009342:	3002      	adds	r0, #2
 8009344:	089b      	lsrs	r3, r3, #2
 8009346:	07da      	lsls	r2, r3, #31
 8009348:	d4e8      	bmi.n	800931c <__lo0bits+0x24>
 800934a:	085b      	lsrs	r3, r3, #1
 800934c:	d001      	beq.n	8009352 <__lo0bits+0x5a>
 800934e:	3001      	adds	r0, #1
 8009350:	e7e4      	b.n	800931c <__lo0bits+0x24>
 8009352:	2020      	movs	r0, #32
 8009354:	e7e0      	b.n	8009318 <__lo0bits+0x20>

08009356 <__i2b>:
 8009356:	b510      	push	{r4, lr}
 8009358:	000c      	movs	r4, r1
 800935a:	2101      	movs	r1, #1
 800935c:	f7ff fee5 	bl	800912a <_Balloc>
 8009360:	2301      	movs	r3, #1
 8009362:	6144      	str	r4, [r0, #20]
 8009364:	6103      	str	r3, [r0, #16]
 8009366:	bd10      	pop	{r4, pc}

08009368 <__multiply>:
 8009368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800936a:	690b      	ldr	r3, [r1, #16]
 800936c:	0014      	movs	r4, r2
 800936e:	6912      	ldr	r2, [r2, #16]
 8009370:	b089      	sub	sp, #36	; 0x24
 8009372:	000d      	movs	r5, r1
 8009374:	4293      	cmp	r3, r2
 8009376:	da01      	bge.n	800937c <__multiply+0x14>
 8009378:	0025      	movs	r5, r4
 800937a:	000c      	movs	r4, r1
 800937c:	692f      	ldr	r7, [r5, #16]
 800937e:	6926      	ldr	r6, [r4, #16]
 8009380:	6869      	ldr	r1, [r5, #4]
 8009382:	19bb      	adds	r3, r7, r6
 8009384:	9302      	str	r3, [sp, #8]
 8009386:	68ab      	ldr	r3, [r5, #8]
 8009388:	19ba      	adds	r2, r7, r6
 800938a:	4293      	cmp	r3, r2
 800938c:	da00      	bge.n	8009390 <__multiply+0x28>
 800938e:	3101      	adds	r1, #1
 8009390:	f7ff fecb 	bl	800912a <_Balloc>
 8009394:	0002      	movs	r2, r0
 8009396:	19bb      	adds	r3, r7, r6
 8009398:	3214      	adds	r2, #20
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	18d3      	adds	r3, r2, r3
 800939e:	469c      	mov	ip, r3
 80093a0:	2100      	movs	r1, #0
 80093a2:	0013      	movs	r3, r2
 80093a4:	9004      	str	r0, [sp, #16]
 80093a6:	4563      	cmp	r3, ip
 80093a8:	d31d      	bcc.n	80093e6 <__multiply+0x7e>
 80093aa:	3514      	adds	r5, #20
 80093ac:	00bf      	lsls	r7, r7, #2
 80093ae:	19eb      	adds	r3, r5, r7
 80093b0:	3414      	adds	r4, #20
 80093b2:	00b6      	lsls	r6, r6, #2
 80093b4:	9305      	str	r3, [sp, #20]
 80093b6:	19a3      	adds	r3, r4, r6
 80093b8:	9503      	str	r5, [sp, #12]
 80093ba:	9401      	str	r4, [sp, #4]
 80093bc:	9307      	str	r3, [sp, #28]
 80093be:	9b07      	ldr	r3, [sp, #28]
 80093c0:	9901      	ldr	r1, [sp, #4]
 80093c2:	4299      	cmp	r1, r3
 80093c4:	d311      	bcc.n	80093ea <__multiply+0x82>
 80093c6:	9b02      	ldr	r3, [sp, #8]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	dd06      	ble.n	80093da <__multiply+0x72>
 80093cc:	2304      	movs	r3, #4
 80093ce:	425b      	negs	r3, r3
 80093d0:	449c      	add	ip, r3
 80093d2:	4663      	mov	r3, ip
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d051      	beq.n	800947e <__multiply+0x116>
 80093da:	9b04      	ldr	r3, [sp, #16]
 80093dc:	9a02      	ldr	r2, [sp, #8]
 80093de:	0018      	movs	r0, r3
 80093e0:	611a      	str	r2, [r3, #16]
 80093e2:	b009      	add	sp, #36	; 0x24
 80093e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093e6:	c302      	stmia	r3!, {r1}
 80093e8:	e7dd      	b.n	80093a6 <__multiply+0x3e>
 80093ea:	9b01      	ldr	r3, [sp, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	b298      	uxth	r0, r3
 80093f0:	2800      	cmp	r0, #0
 80093f2:	d01c      	beq.n	800942e <__multiply+0xc6>
 80093f4:	0015      	movs	r5, r2
 80093f6:	2600      	movs	r6, #0
 80093f8:	9f03      	ldr	r7, [sp, #12]
 80093fa:	cf02      	ldmia	r7!, {r1}
 80093fc:	682c      	ldr	r4, [r5, #0]
 80093fe:	b28b      	uxth	r3, r1
 8009400:	4343      	muls	r3, r0
 8009402:	0c09      	lsrs	r1, r1, #16
 8009404:	4341      	muls	r1, r0
 8009406:	b2a4      	uxth	r4, r4
 8009408:	191b      	adds	r3, r3, r4
 800940a:	199b      	adds	r3, r3, r6
 800940c:	000e      	movs	r6, r1
 800940e:	6829      	ldr	r1, [r5, #0]
 8009410:	9506      	str	r5, [sp, #24]
 8009412:	0c09      	lsrs	r1, r1, #16
 8009414:	1871      	adds	r1, r6, r1
 8009416:	0c1e      	lsrs	r6, r3, #16
 8009418:	1989      	adds	r1, r1, r6
 800941a:	0c0e      	lsrs	r6, r1, #16
 800941c:	b29b      	uxth	r3, r3
 800941e:	0409      	lsls	r1, r1, #16
 8009420:	430b      	orrs	r3, r1
 8009422:	c508      	stmia	r5!, {r3}
 8009424:	9b05      	ldr	r3, [sp, #20]
 8009426:	42bb      	cmp	r3, r7
 8009428:	d8e7      	bhi.n	80093fa <__multiply+0x92>
 800942a:	9b06      	ldr	r3, [sp, #24]
 800942c:	605e      	str	r6, [r3, #4]
 800942e:	9b01      	ldr	r3, [sp, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	0c1d      	lsrs	r5, r3, #16
 8009434:	d01e      	beq.n	8009474 <__multiply+0x10c>
 8009436:	0010      	movs	r0, r2
 8009438:	2700      	movs	r7, #0
 800943a:	6813      	ldr	r3, [r2, #0]
 800943c:	9e03      	ldr	r6, [sp, #12]
 800943e:	6831      	ldr	r1, [r6, #0]
 8009440:	6804      	ldr	r4, [r0, #0]
 8009442:	b289      	uxth	r1, r1
 8009444:	4369      	muls	r1, r5
 8009446:	0c24      	lsrs	r4, r4, #16
 8009448:	1909      	adds	r1, r1, r4
 800944a:	19c9      	adds	r1, r1, r7
 800944c:	040f      	lsls	r7, r1, #16
 800944e:	b29b      	uxth	r3, r3
 8009450:	433b      	orrs	r3, r7
 8009452:	6003      	str	r3, [r0, #0]
 8009454:	ce80      	ldmia	r6!, {r7}
 8009456:	6843      	ldr	r3, [r0, #4]
 8009458:	0c3f      	lsrs	r7, r7, #16
 800945a:	436f      	muls	r7, r5
 800945c:	b29b      	uxth	r3, r3
 800945e:	18fb      	adds	r3, r7, r3
 8009460:	0c09      	lsrs	r1, r1, #16
 8009462:	185b      	adds	r3, r3, r1
 8009464:	9905      	ldr	r1, [sp, #20]
 8009466:	9006      	str	r0, [sp, #24]
 8009468:	0c1f      	lsrs	r7, r3, #16
 800946a:	3004      	adds	r0, #4
 800946c:	42b1      	cmp	r1, r6
 800946e:	d8e6      	bhi.n	800943e <__multiply+0xd6>
 8009470:	9906      	ldr	r1, [sp, #24]
 8009472:	604b      	str	r3, [r1, #4]
 8009474:	9b01      	ldr	r3, [sp, #4]
 8009476:	3204      	adds	r2, #4
 8009478:	3304      	adds	r3, #4
 800947a:	9301      	str	r3, [sp, #4]
 800947c:	e79f      	b.n	80093be <__multiply+0x56>
 800947e:	9b02      	ldr	r3, [sp, #8]
 8009480:	3b01      	subs	r3, #1
 8009482:	9302      	str	r3, [sp, #8]
 8009484:	e79f      	b.n	80093c6 <__multiply+0x5e>
	...

08009488 <__pow5mult>:
 8009488:	2303      	movs	r3, #3
 800948a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800948c:	4013      	ands	r3, r2
 800948e:	0005      	movs	r5, r0
 8009490:	000e      	movs	r6, r1
 8009492:	0014      	movs	r4, r2
 8009494:	2b00      	cmp	r3, #0
 8009496:	d008      	beq.n	80094aa <__pow5mult+0x22>
 8009498:	4922      	ldr	r1, [pc, #136]	; (8009524 <__pow5mult+0x9c>)
 800949a:	3b01      	subs	r3, #1
 800949c:	009a      	lsls	r2, r3, #2
 800949e:	5852      	ldr	r2, [r2, r1]
 80094a0:	2300      	movs	r3, #0
 80094a2:	0031      	movs	r1, r6
 80094a4:	f7ff fe92 	bl	80091cc <__multadd>
 80094a8:	0006      	movs	r6, r0
 80094aa:	10a3      	asrs	r3, r4, #2
 80094ac:	9301      	str	r3, [sp, #4]
 80094ae:	d036      	beq.n	800951e <__pow5mult+0x96>
 80094b0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80094b2:	2c00      	cmp	r4, #0
 80094b4:	d107      	bne.n	80094c6 <__pow5mult+0x3e>
 80094b6:	2010      	movs	r0, #16
 80094b8:	f7ff fe10 	bl	80090dc <malloc>
 80094bc:	6268      	str	r0, [r5, #36]	; 0x24
 80094be:	6044      	str	r4, [r0, #4]
 80094c0:	6084      	str	r4, [r0, #8]
 80094c2:	6004      	str	r4, [r0, #0]
 80094c4:	60c4      	str	r4, [r0, #12]
 80094c6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 80094c8:	68bc      	ldr	r4, [r7, #8]
 80094ca:	2c00      	cmp	r4, #0
 80094cc:	d107      	bne.n	80094de <__pow5mult+0x56>
 80094ce:	4916      	ldr	r1, [pc, #88]	; (8009528 <__pow5mult+0xa0>)
 80094d0:	0028      	movs	r0, r5
 80094d2:	f7ff ff40 	bl	8009356 <__i2b>
 80094d6:	2300      	movs	r3, #0
 80094d8:	0004      	movs	r4, r0
 80094da:	60b8      	str	r0, [r7, #8]
 80094dc:	6003      	str	r3, [r0, #0]
 80094de:	2201      	movs	r2, #1
 80094e0:	9b01      	ldr	r3, [sp, #4]
 80094e2:	4213      	tst	r3, r2
 80094e4:	d00a      	beq.n	80094fc <__pow5mult+0x74>
 80094e6:	0031      	movs	r1, r6
 80094e8:	0022      	movs	r2, r4
 80094ea:	0028      	movs	r0, r5
 80094ec:	f7ff ff3c 	bl	8009368 <__multiply>
 80094f0:	0007      	movs	r7, r0
 80094f2:	0031      	movs	r1, r6
 80094f4:	0028      	movs	r0, r5
 80094f6:	f7ff fe50 	bl	800919a <_Bfree>
 80094fa:	003e      	movs	r6, r7
 80094fc:	9b01      	ldr	r3, [sp, #4]
 80094fe:	105b      	asrs	r3, r3, #1
 8009500:	9301      	str	r3, [sp, #4]
 8009502:	d00c      	beq.n	800951e <__pow5mult+0x96>
 8009504:	6820      	ldr	r0, [r4, #0]
 8009506:	2800      	cmp	r0, #0
 8009508:	d107      	bne.n	800951a <__pow5mult+0x92>
 800950a:	0022      	movs	r2, r4
 800950c:	0021      	movs	r1, r4
 800950e:	0028      	movs	r0, r5
 8009510:	f7ff ff2a 	bl	8009368 <__multiply>
 8009514:	2300      	movs	r3, #0
 8009516:	6020      	str	r0, [r4, #0]
 8009518:	6003      	str	r3, [r0, #0]
 800951a:	0004      	movs	r4, r0
 800951c:	e7df      	b.n	80094de <__pow5mult+0x56>
 800951e:	0030      	movs	r0, r6
 8009520:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009522:	46c0      	nop			; (mov r8, r8)
 8009524:	0800a998 	.word	0x0800a998
 8009528:	00000271 	.word	0x00000271

0800952c <__lshift>:
 800952c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800952e:	000d      	movs	r5, r1
 8009530:	0017      	movs	r7, r2
 8009532:	692b      	ldr	r3, [r5, #16]
 8009534:	1154      	asrs	r4, r2, #5
 8009536:	b085      	sub	sp, #20
 8009538:	18e3      	adds	r3, r4, r3
 800953a:	9301      	str	r3, [sp, #4]
 800953c:	3301      	adds	r3, #1
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	6849      	ldr	r1, [r1, #4]
 8009542:	68ab      	ldr	r3, [r5, #8]
 8009544:	9002      	str	r0, [sp, #8]
 8009546:	9a00      	ldr	r2, [sp, #0]
 8009548:	4293      	cmp	r3, r2
 800954a:	db35      	blt.n	80095b8 <__lshift+0x8c>
 800954c:	9802      	ldr	r0, [sp, #8]
 800954e:	f7ff fdec 	bl	800912a <_Balloc>
 8009552:	2300      	movs	r3, #0
 8009554:	0002      	movs	r2, r0
 8009556:	0006      	movs	r6, r0
 8009558:	0019      	movs	r1, r3
 800955a:	3214      	adds	r2, #20
 800955c:	42a3      	cmp	r3, r4
 800955e:	db2e      	blt.n	80095be <__lshift+0x92>
 8009560:	43e3      	mvns	r3, r4
 8009562:	17db      	asrs	r3, r3, #31
 8009564:	401c      	ands	r4, r3
 8009566:	002b      	movs	r3, r5
 8009568:	00a4      	lsls	r4, r4, #2
 800956a:	1914      	adds	r4, r2, r4
 800956c:	692a      	ldr	r2, [r5, #16]
 800956e:	3314      	adds	r3, #20
 8009570:	0092      	lsls	r2, r2, #2
 8009572:	189a      	adds	r2, r3, r2
 8009574:	4694      	mov	ip, r2
 8009576:	221f      	movs	r2, #31
 8009578:	4017      	ands	r7, r2
 800957a:	d024      	beq.n	80095c6 <__lshift+0x9a>
 800957c:	3201      	adds	r2, #1
 800957e:	1bd2      	subs	r2, r2, r7
 8009580:	9203      	str	r2, [sp, #12]
 8009582:	2200      	movs	r2, #0
 8009584:	6819      	ldr	r1, [r3, #0]
 8009586:	0020      	movs	r0, r4
 8009588:	40b9      	lsls	r1, r7
 800958a:	430a      	orrs	r2, r1
 800958c:	c404      	stmia	r4!, {r2}
 800958e:	cb04      	ldmia	r3!, {r2}
 8009590:	9903      	ldr	r1, [sp, #12]
 8009592:	40ca      	lsrs	r2, r1
 8009594:	459c      	cmp	ip, r3
 8009596:	d8f5      	bhi.n	8009584 <__lshift+0x58>
 8009598:	6042      	str	r2, [r0, #4]
 800959a:	2a00      	cmp	r2, #0
 800959c:	d002      	beq.n	80095a4 <__lshift+0x78>
 800959e:	9b01      	ldr	r3, [sp, #4]
 80095a0:	3302      	adds	r3, #2
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	9b00      	ldr	r3, [sp, #0]
 80095a6:	9802      	ldr	r0, [sp, #8]
 80095a8:	3b01      	subs	r3, #1
 80095aa:	6133      	str	r3, [r6, #16]
 80095ac:	0029      	movs	r1, r5
 80095ae:	f7ff fdf4 	bl	800919a <_Bfree>
 80095b2:	0030      	movs	r0, r6
 80095b4:	b005      	add	sp, #20
 80095b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095b8:	3101      	adds	r1, #1
 80095ba:	005b      	lsls	r3, r3, #1
 80095bc:	e7c3      	b.n	8009546 <__lshift+0x1a>
 80095be:	0098      	lsls	r0, r3, #2
 80095c0:	5011      	str	r1, [r2, r0]
 80095c2:	3301      	adds	r3, #1
 80095c4:	e7ca      	b.n	800955c <__lshift+0x30>
 80095c6:	cb04      	ldmia	r3!, {r2}
 80095c8:	c404      	stmia	r4!, {r2}
 80095ca:	459c      	cmp	ip, r3
 80095cc:	d8fb      	bhi.n	80095c6 <__lshift+0x9a>
 80095ce:	e7e9      	b.n	80095a4 <__lshift+0x78>

080095d0 <__mcmp>:
 80095d0:	690a      	ldr	r2, [r1, #16]
 80095d2:	6903      	ldr	r3, [r0, #16]
 80095d4:	b530      	push	{r4, r5, lr}
 80095d6:	1a9b      	subs	r3, r3, r2
 80095d8:	d10d      	bne.n	80095f6 <__mcmp+0x26>
 80095da:	0092      	lsls	r2, r2, #2
 80095dc:	3014      	adds	r0, #20
 80095de:	3114      	adds	r1, #20
 80095e0:	1884      	adds	r4, r0, r2
 80095e2:	1889      	adds	r1, r1, r2
 80095e4:	3c04      	subs	r4, #4
 80095e6:	3904      	subs	r1, #4
 80095e8:	6825      	ldr	r5, [r4, #0]
 80095ea:	680a      	ldr	r2, [r1, #0]
 80095ec:	4295      	cmp	r5, r2
 80095ee:	d004      	beq.n	80095fa <__mcmp+0x2a>
 80095f0:	2301      	movs	r3, #1
 80095f2:	4295      	cmp	r5, r2
 80095f4:	d304      	bcc.n	8009600 <__mcmp+0x30>
 80095f6:	0018      	movs	r0, r3
 80095f8:	bd30      	pop	{r4, r5, pc}
 80095fa:	42a0      	cmp	r0, r4
 80095fc:	d3f2      	bcc.n	80095e4 <__mcmp+0x14>
 80095fe:	e7fa      	b.n	80095f6 <__mcmp+0x26>
 8009600:	425b      	negs	r3, r3
 8009602:	e7f8      	b.n	80095f6 <__mcmp+0x26>

08009604 <__mdiff>:
 8009604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009606:	000d      	movs	r5, r1
 8009608:	b085      	sub	sp, #20
 800960a:	0007      	movs	r7, r0
 800960c:	0011      	movs	r1, r2
 800960e:	0028      	movs	r0, r5
 8009610:	0014      	movs	r4, r2
 8009612:	f7ff ffdd 	bl	80095d0 <__mcmp>
 8009616:	1e06      	subs	r6, r0, #0
 8009618:	d108      	bne.n	800962c <__mdiff+0x28>
 800961a:	0001      	movs	r1, r0
 800961c:	0038      	movs	r0, r7
 800961e:	f7ff fd84 	bl	800912a <_Balloc>
 8009622:	2301      	movs	r3, #1
 8009624:	6146      	str	r6, [r0, #20]
 8009626:	6103      	str	r3, [r0, #16]
 8009628:	b005      	add	sp, #20
 800962a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800962c:	2301      	movs	r3, #1
 800962e:	9301      	str	r3, [sp, #4]
 8009630:	2800      	cmp	r0, #0
 8009632:	db04      	blt.n	800963e <__mdiff+0x3a>
 8009634:	0023      	movs	r3, r4
 8009636:	002c      	movs	r4, r5
 8009638:	001d      	movs	r5, r3
 800963a:	2300      	movs	r3, #0
 800963c:	9301      	str	r3, [sp, #4]
 800963e:	6861      	ldr	r1, [r4, #4]
 8009640:	0038      	movs	r0, r7
 8009642:	f7ff fd72 	bl	800912a <_Balloc>
 8009646:	002f      	movs	r7, r5
 8009648:	2200      	movs	r2, #0
 800964a:	9b01      	ldr	r3, [sp, #4]
 800964c:	6926      	ldr	r6, [r4, #16]
 800964e:	60c3      	str	r3, [r0, #12]
 8009650:	3414      	adds	r4, #20
 8009652:	00b3      	lsls	r3, r6, #2
 8009654:	18e3      	adds	r3, r4, r3
 8009656:	9302      	str	r3, [sp, #8]
 8009658:	692b      	ldr	r3, [r5, #16]
 800965a:	3714      	adds	r7, #20
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	18fb      	adds	r3, r7, r3
 8009660:	9303      	str	r3, [sp, #12]
 8009662:	0003      	movs	r3, r0
 8009664:	4694      	mov	ip, r2
 8009666:	3314      	adds	r3, #20
 8009668:	cc20      	ldmia	r4!, {r5}
 800966a:	cf04      	ldmia	r7!, {r2}
 800966c:	9201      	str	r2, [sp, #4]
 800966e:	b2aa      	uxth	r2, r5
 8009670:	4494      	add	ip, r2
 8009672:	466a      	mov	r2, sp
 8009674:	4661      	mov	r1, ip
 8009676:	8892      	ldrh	r2, [r2, #4]
 8009678:	0c2d      	lsrs	r5, r5, #16
 800967a:	1a8a      	subs	r2, r1, r2
 800967c:	9901      	ldr	r1, [sp, #4]
 800967e:	0c09      	lsrs	r1, r1, #16
 8009680:	1a69      	subs	r1, r5, r1
 8009682:	1415      	asrs	r5, r2, #16
 8009684:	1949      	adds	r1, r1, r5
 8009686:	140d      	asrs	r5, r1, #16
 8009688:	b292      	uxth	r2, r2
 800968a:	0409      	lsls	r1, r1, #16
 800968c:	430a      	orrs	r2, r1
 800968e:	601a      	str	r2, [r3, #0]
 8009690:	9a03      	ldr	r2, [sp, #12]
 8009692:	46ac      	mov	ip, r5
 8009694:	3304      	adds	r3, #4
 8009696:	42ba      	cmp	r2, r7
 8009698:	d8e6      	bhi.n	8009668 <__mdiff+0x64>
 800969a:	9902      	ldr	r1, [sp, #8]
 800969c:	001a      	movs	r2, r3
 800969e:	428c      	cmp	r4, r1
 80096a0:	d305      	bcc.n	80096ae <__mdiff+0xaa>
 80096a2:	3a04      	subs	r2, #4
 80096a4:	6813      	ldr	r3, [r2, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00e      	beq.n	80096c8 <__mdiff+0xc4>
 80096aa:	6106      	str	r6, [r0, #16]
 80096ac:	e7bc      	b.n	8009628 <__mdiff+0x24>
 80096ae:	cc04      	ldmia	r4!, {r2}
 80096b0:	b291      	uxth	r1, r2
 80096b2:	4461      	add	r1, ip
 80096b4:	140d      	asrs	r5, r1, #16
 80096b6:	0c12      	lsrs	r2, r2, #16
 80096b8:	1952      	adds	r2, r2, r5
 80096ba:	1415      	asrs	r5, r2, #16
 80096bc:	b289      	uxth	r1, r1
 80096be:	0412      	lsls	r2, r2, #16
 80096c0:	430a      	orrs	r2, r1
 80096c2:	46ac      	mov	ip, r5
 80096c4:	c304      	stmia	r3!, {r2}
 80096c6:	e7e8      	b.n	800969a <__mdiff+0x96>
 80096c8:	3e01      	subs	r6, #1
 80096ca:	e7ea      	b.n	80096a2 <__mdiff+0x9e>

080096cc <__ulp>:
 80096cc:	000b      	movs	r3, r1
 80096ce:	4910      	ldr	r1, [pc, #64]	; (8009710 <__ulp+0x44>)
 80096d0:	b510      	push	{r4, lr}
 80096d2:	4019      	ands	r1, r3
 80096d4:	4b0f      	ldr	r3, [pc, #60]	; (8009714 <__ulp+0x48>)
 80096d6:	18c9      	adds	r1, r1, r3
 80096d8:	2900      	cmp	r1, #0
 80096da:	dd04      	ble.n	80096e6 <__ulp+0x1a>
 80096dc:	2200      	movs	r2, #0
 80096de:	000b      	movs	r3, r1
 80096e0:	0010      	movs	r0, r2
 80096e2:	0019      	movs	r1, r3
 80096e4:	bd10      	pop	{r4, pc}
 80096e6:	4249      	negs	r1, r1
 80096e8:	1509      	asrs	r1, r1, #20
 80096ea:	2200      	movs	r2, #0
 80096ec:	2300      	movs	r3, #0
 80096ee:	2913      	cmp	r1, #19
 80096f0:	dc04      	bgt.n	80096fc <__ulp+0x30>
 80096f2:	2080      	movs	r0, #128	; 0x80
 80096f4:	0300      	lsls	r0, r0, #12
 80096f6:	4108      	asrs	r0, r1
 80096f8:	0003      	movs	r3, r0
 80096fa:	e7f1      	b.n	80096e0 <__ulp+0x14>
 80096fc:	3914      	subs	r1, #20
 80096fe:	2001      	movs	r0, #1
 8009700:	291e      	cmp	r1, #30
 8009702:	dc02      	bgt.n	800970a <__ulp+0x3e>
 8009704:	241f      	movs	r4, #31
 8009706:	1a61      	subs	r1, r4, r1
 8009708:	4088      	lsls	r0, r1
 800970a:	0002      	movs	r2, r0
 800970c:	e7e8      	b.n	80096e0 <__ulp+0x14>
 800970e:	46c0      	nop			; (mov r8, r8)
 8009710:	7ff00000 	.word	0x7ff00000
 8009714:	fcc00000 	.word	0xfcc00000

08009718 <__b2d>:
 8009718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800971a:	0006      	movs	r6, r0
 800971c:	6903      	ldr	r3, [r0, #16]
 800971e:	3614      	adds	r6, #20
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	18f3      	adds	r3, r6, r3
 8009724:	1f1d      	subs	r5, r3, #4
 8009726:	682c      	ldr	r4, [r5, #0]
 8009728:	000f      	movs	r7, r1
 800972a:	0020      	movs	r0, r4
 800972c:	9301      	str	r3, [sp, #4]
 800972e:	f7ff fdc9 	bl	80092c4 <__hi0bits>
 8009732:	2320      	movs	r3, #32
 8009734:	1a1b      	subs	r3, r3, r0
 8009736:	603b      	str	r3, [r7, #0]
 8009738:	491c      	ldr	r1, [pc, #112]	; (80097ac <__b2d+0x94>)
 800973a:	280a      	cmp	r0, #10
 800973c:	dc16      	bgt.n	800976c <__b2d+0x54>
 800973e:	230b      	movs	r3, #11
 8009740:	0027      	movs	r7, r4
 8009742:	1a1b      	subs	r3, r3, r0
 8009744:	40df      	lsrs	r7, r3
 8009746:	4339      	orrs	r1, r7
 8009748:	469c      	mov	ip, r3
 800974a:	000b      	movs	r3, r1
 800974c:	2100      	movs	r1, #0
 800974e:	42ae      	cmp	r6, r5
 8009750:	d202      	bcs.n	8009758 <__b2d+0x40>
 8009752:	9901      	ldr	r1, [sp, #4]
 8009754:	3908      	subs	r1, #8
 8009756:	6809      	ldr	r1, [r1, #0]
 8009758:	3015      	adds	r0, #21
 800975a:	4084      	lsls	r4, r0
 800975c:	4660      	mov	r0, ip
 800975e:	40c1      	lsrs	r1, r0
 8009760:	430c      	orrs	r4, r1
 8009762:	0022      	movs	r2, r4
 8009764:	0010      	movs	r0, r2
 8009766:	0019      	movs	r1, r3
 8009768:	b003      	add	sp, #12
 800976a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800976c:	2700      	movs	r7, #0
 800976e:	42ae      	cmp	r6, r5
 8009770:	d202      	bcs.n	8009778 <__b2d+0x60>
 8009772:	9d01      	ldr	r5, [sp, #4]
 8009774:	3d08      	subs	r5, #8
 8009776:	682f      	ldr	r7, [r5, #0]
 8009778:	380b      	subs	r0, #11
 800977a:	4684      	mov	ip, r0
 800977c:	1e03      	subs	r3, r0, #0
 800977e:	d012      	beq.n	80097a6 <__b2d+0x8e>
 8009780:	409c      	lsls	r4, r3
 8009782:	2020      	movs	r0, #32
 8009784:	4321      	orrs	r1, r4
 8009786:	003c      	movs	r4, r7
 8009788:	1ac0      	subs	r0, r0, r3
 800978a:	40c4      	lsrs	r4, r0
 800978c:	4321      	orrs	r1, r4
 800978e:	000b      	movs	r3, r1
 8009790:	2100      	movs	r1, #0
 8009792:	42b5      	cmp	r5, r6
 8009794:	d901      	bls.n	800979a <__b2d+0x82>
 8009796:	3d04      	subs	r5, #4
 8009798:	6829      	ldr	r1, [r5, #0]
 800979a:	4664      	mov	r4, ip
 800979c:	40c1      	lsrs	r1, r0
 800979e:	40a7      	lsls	r7, r4
 80097a0:	430f      	orrs	r7, r1
 80097a2:	003a      	movs	r2, r7
 80097a4:	e7de      	b.n	8009764 <__b2d+0x4c>
 80097a6:	4321      	orrs	r1, r4
 80097a8:	000b      	movs	r3, r1
 80097aa:	e7fa      	b.n	80097a2 <__b2d+0x8a>
 80097ac:	3ff00000 	.word	0x3ff00000

080097b0 <__d2b>:
 80097b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097b2:	001d      	movs	r5, r3
 80097b4:	2101      	movs	r1, #1
 80097b6:	0014      	movs	r4, r2
 80097b8:	9f08      	ldr	r7, [sp, #32]
 80097ba:	f7ff fcb6 	bl	800912a <_Balloc>
 80097be:	032b      	lsls	r3, r5, #12
 80097c0:	006d      	lsls	r5, r5, #1
 80097c2:	0006      	movs	r6, r0
 80097c4:	0b1b      	lsrs	r3, r3, #12
 80097c6:	0d6d      	lsrs	r5, r5, #21
 80097c8:	d124      	bne.n	8009814 <__d2b+0x64>
 80097ca:	9301      	str	r3, [sp, #4]
 80097cc:	2c00      	cmp	r4, #0
 80097ce:	d027      	beq.n	8009820 <__d2b+0x70>
 80097d0:	4668      	mov	r0, sp
 80097d2:	9400      	str	r4, [sp, #0]
 80097d4:	f7ff fd90 	bl	80092f8 <__lo0bits>
 80097d8:	9c00      	ldr	r4, [sp, #0]
 80097da:	2800      	cmp	r0, #0
 80097dc:	d01e      	beq.n	800981c <__d2b+0x6c>
 80097de:	9b01      	ldr	r3, [sp, #4]
 80097e0:	2120      	movs	r1, #32
 80097e2:	001a      	movs	r2, r3
 80097e4:	1a09      	subs	r1, r1, r0
 80097e6:	408a      	lsls	r2, r1
 80097e8:	40c3      	lsrs	r3, r0
 80097ea:	4322      	orrs	r2, r4
 80097ec:	6172      	str	r2, [r6, #20]
 80097ee:	9301      	str	r3, [sp, #4]
 80097f0:	9c01      	ldr	r4, [sp, #4]
 80097f2:	61b4      	str	r4, [r6, #24]
 80097f4:	1e63      	subs	r3, r4, #1
 80097f6:	419c      	sbcs	r4, r3
 80097f8:	3401      	adds	r4, #1
 80097fa:	6134      	str	r4, [r6, #16]
 80097fc:	2d00      	cmp	r5, #0
 80097fe:	d018      	beq.n	8009832 <__d2b+0x82>
 8009800:	4b12      	ldr	r3, [pc, #72]	; (800984c <__d2b+0x9c>)
 8009802:	18ed      	adds	r5, r5, r3
 8009804:	2335      	movs	r3, #53	; 0x35
 8009806:	182d      	adds	r5, r5, r0
 8009808:	603d      	str	r5, [r7, #0]
 800980a:	1a18      	subs	r0, r3, r0
 800980c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800980e:	6018      	str	r0, [r3, #0]
 8009810:	0030      	movs	r0, r6
 8009812:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009814:	2280      	movs	r2, #128	; 0x80
 8009816:	0352      	lsls	r2, r2, #13
 8009818:	4313      	orrs	r3, r2
 800981a:	e7d6      	b.n	80097ca <__d2b+0x1a>
 800981c:	6174      	str	r4, [r6, #20]
 800981e:	e7e7      	b.n	80097f0 <__d2b+0x40>
 8009820:	a801      	add	r0, sp, #4
 8009822:	f7ff fd69 	bl	80092f8 <__lo0bits>
 8009826:	2401      	movs	r4, #1
 8009828:	9b01      	ldr	r3, [sp, #4]
 800982a:	6134      	str	r4, [r6, #16]
 800982c:	6173      	str	r3, [r6, #20]
 800982e:	3020      	adds	r0, #32
 8009830:	e7e4      	b.n	80097fc <__d2b+0x4c>
 8009832:	4b07      	ldr	r3, [pc, #28]	; (8009850 <__d2b+0xa0>)
 8009834:	18c0      	adds	r0, r0, r3
 8009836:	4b07      	ldr	r3, [pc, #28]	; (8009854 <__d2b+0xa4>)
 8009838:	6038      	str	r0, [r7, #0]
 800983a:	18e3      	adds	r3, r4, r3
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	18f3      	adds	r3, r6, r3
 8009840:	6958      	ldr	r0, [r3, #20]
 8009842:	f7ff fd3f 	bl	80092c4 <__hi0bits>
 8009846:	0164      	lsls	r4, r4, #5
 8009848:	1a20      	subs	r0, r4, r0
 800984a:	e7df      	b.n	800980c <__d2b+0x5c>
 800984c:	fffffbcd 	.word	0xfffffbcd
 8009850:	fffffbce 	.word	0xfffffbce
 8009854:	3fffffff 	.word	0x3fffffff

08009858 <__ratio>:
 8009858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800985a:	b085      	sub	sp, #20
 800985c:	000f      	movs	r7, r1
 800985e:	a902      	add	r1, sp, #8
 8009860:	0006      	movs	r6, r0
 8009862:	f7ff ff59 	bl	8009718 <__b2d>
 8009866:	0004      	movs	r4, r0
 8009868:	000d      	movs	r5, r1
 800986a:	0038      	movs	r0, r7
 800986c:	a903      	add	r1, sp, #12
 800986e:	9400      	str	r4, [sp, #0]
 8009870:	9501      	str	r5, [sp, #4]
 8009872:	f7ff ff51 	bl	8009718 <__b2d>
 8009876:	6936      	ldr	r6, [r6, #16]
 8009878:	693f      	ldr	r7, [r7, #16]
 800987a:	0002      	movs	r2, r0
 800987c:	1bf7      	subs	r7, r6, r7
 800987e:	017e      	lsls	r6, r7, #5
 8009880:	46b4      	mov	ip, r6
 8009882:	9f03      	ldr	r7, [sp, #12]
 8009884:	9e02      	ldr	r6, [sp, #8]
 8009886:	000b      	movs	r3, r1
 8009888:	1bf6      	subs	r6, r6, r7
 800988a:	4466      	add	r6, ip
 800988c:	0537      	lsls	r7, r6, #20
 800988e:	2e00      	cmp	r6, #0
 8009890:	dd07      	ble.n	80098a2 <__ratio+0x4a>
 8009892:	1979      	adds	r1, r7, r5
 8009894:	9101      	str	r1, [sp, #4]
 8009896:	9800      	ldr	r0, [sp, #0]
 8009898:	9901      	ldr	r1, [sp, #4]
 800989a:	f7f7 fa8f 	bl	8000dbc <__aeabi_ddiv>
 800989e:	b005      	add	sp, #20
 80098a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098a2:	1bcb      	subs	r3, r1, r7
 80098a4:	e7f7      	b.n	8009896 <__ratio+0x3e>

080098a6 <__copybits>:
 80098a6:	0013      	movs	r3, r2
 80098a8:	3901      	subs	r1, #1
 80098aa:	b510      	push	{r4, lr}
 80098ac:	1149      	asrs	r1, r1, #5
 80098ae:	6912      	ldr	r2, [r2, #16]
 80098b0:	3101      	adds	r1, #1
 80098b2:	0089      	lsls	r1, r1, #2
 80098b4:	3314      	adds	r3, #20
 80098b6:	0092      	lsls	r2, r2, #2
 80098b8:	1841      	adds	r1, r0, r1
 80098ba:	189a      	adds	r2, r3, r2
 80098bc:	429a      	cmp	r2, r3
 80098be:	d803      	bhi.n	80098c8 <__copybits+0x22>
 80098c0:	2300      	movs	r3, #0
 80098c2:	4281      	cmp	r1, r0
 80098c4:	d803      	bhi.n	80098ce <__copybits+0x28>
 80098c6:	bd10      	pop	{r4, pc}
 80098c8:	cb10      	ldmia	r3!, {r4}
 80098ca:	c010      	stmia	r0!, {r4}
 80098cc:	e7f6      	b.n	80098bc <__copybits+0x16>
 80098ce:	c008      	stmia	r0!, {r3}
 80098d0:	e7f7      	b.n	80098c2 <__copybits+0x1c>

080098d2 <__any_on>:
 80098d2:	0002      	movs	r2, r0
 80098d4:	6900      	ldr	r0, [r0, #16]
 80098d6:	b510      	push	{r4, lr}
 80098d8:	3214      	adds	r2, #20
 80098da:	114b      	asrs	r3, r1, #5
 80098dc:	4298      	cmp	r0, r3
 80098de:	db12      	blt.n	8009906 <__any_on+0x34>
 80098e0:	dd0b      	ble.n	80098fa <__any_on+0x28>
 80098e2:	201f      	movs	r0, #31
 80098e4:	4001      	ands	r1, r0
 80098e6:	d008      	beq.n	80098fa <__any_on+0x28>
 80098e8:	0098      	lsls	r0, r3, #2
 80098ea:	5884      	ldr	r4, [r0, r2]
 80098ec:	0020      	movs	r0, r4
 80098ee:	40c8      	lsrs	r0, r1
 80098f0:	4088      	lsls	r0, r1
 80098f2:	0001      	movs	r1, r0
 80098f4:	2001      	movs	r0, #1
 80098f6:	428c      	cmp	r4, r1
 80098f8:	d104      	bne.n	8009904 <__any_on+0x32>
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	18d3      	adds	r3, r2, r3
 80098fe:	4293      	cmp	r3, r2
 8009900:	d803      	bhi.n	800990a <__any_on+0x38>
 8009902:	2000      	movs	r0, #0
 8009904:	bd10      	pop	{r4, pc}
 8009906:	0003      	movs	r3, r0
 8009908:	e7f7      	b.n	80098fa <__any_on+0x28>
 800990a:	3b04      	subs	r3, #4
 800990c:	6819      	ldr	r1, [r3, #0]
 800990e:	2900      	cmp	r1, #0
 8009910:	d0f5      	beq.n	80098fe <__any_on+0x2c>
 8009912:	2001      	movs	r0, #1
 8009914:	e7f6      	b.n	8009904 <__any_on+0x32>

08009916 <_calloc_r>:
 8009916:	434a      	muls	r2, r1
 8009918:	b570      	push	{r4, r5, r6, lr}
 800991a:	0011      	movs	r1, r2
 800991c:	0014      	movs	r4, r2
 800991e:	f000 f853 	bl	80099c8 <_malloc_r>
 8009922:	1e05      	subs	r5, r0, #0
 8009924:	d003      	beq.n	800992e <_calloc_r+0x18>
 8009926:	0022      	movs	r2, r4
 8009928:	2100      	movs	r1, #0
 800992a:	f7fc fbd6 	bl	80060da <memset>
 800992e:	0028      	movs	r0, r5
 8009930:	bd70      	pop	{r4, r5, r6, pc}
	...

08009934 <_free_r>:
 8009934:	b570      	push	{r4, r5, r6, lr}
 8009936:	0005      	movs	r5, r0
 8009938:	2900      	cmp	r1, #0
 800993a:	d010      	beq.n	800995e <_free_r+0x2a>
 800993c:	1f0c      	subs	r4, r1, #4
 800993e:	6823      	ldr	r3, [r4, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	da00      	bge.n	8009946 <_free_r+0x12>
 8009944:	18e4      	adds	r4, r4, r3
 8009946:	0028      	movs	r0, r5
 8009948:	f000 fdf1 	bl	800a52e <__malloc_lock>
 800994c:	4a1d      	ldr	r2, [pc, #116]	; (80099c4 <_free_r+0x90>)
 800994e:	6813      	ldr	r3, [r2, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d105      	bne.n	8009960 <_free_r+0x2c>
 8009954:	6063      	str	r3, [r4, #4]
 8009956:	6014      	str	r4, [r2, #0]
 8009958:	0028      	movs	r0, r5
 800995a:	f000 fde9 	bl	800a530 <__malloc_unlock>
 800995e:	bd70      	pop	{r4, r5, r6, pc}
 8009960:	42a3      	cmp	r3, r4
 8009962:	d909      	bls.n	8009978 <_free_r+0x44>
 8009964:	6821      	ldr	r1, [r4, #0]
 8009966:	1860      	adds	r0, r4, r1
 8009968:	4283      	cmp	r3, r0
 800996a:	d1f3      	bne.n	8009954 <_free_r+0x20>
 800996c:	6818      	ldr	r0, [r3, #0]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	1841      	adds	r1, r0, r1
 8009972:	6021      	str	r1, [r4, #0]
 8009974:	e7ee      	b.n	8009954 <_free_r+0x20>
 8009976:	0013      	movs	r3, r2
 8009978:	685a      	ldr	r2, [r3, #4]
 800997a:	2a00      	cmp	r2, #0
 800997c:	d001      	beq.n	8009982 <_free_r+0x4e>
 800997e:	42a2      	cmp	r2, r4
 8009980:	d9f9      	bls.n	8009976 <_free_r+0x42>
 8009982:	6819      	ldr	r1, [r3, #0]
 8009984:	1858      	adds	r0, r3, r1
 8009986:	42a0      	cmp	r0, r4
 8009988:	d10b      	bne.n	80099a2 <_free_r+0x6e>
 800998a:	6820      	ldr	r0, [r4, #0]
 800998c:	1809      	adds	r1, r1, r0
 800998e:	1858      	adds	r0, r3, r1
 8009990:	6019      	str	r1, [r3, #0]
 8009992:	4282      	cmp	r2, r0
 8009994:	d1e0      	bne.n	8009958 <_free_r+0x24>
 8009996:	6810      	ldr	r0, [r2, #0]
 8009998:	6852      	ldr	r2, [r2, #4]
 800999a:	1841      	adds	r1, r0, r1
 800999c:	6019      	str	r1, [r3, #0]
 800999e:	605a      	str	r2, [r3, #4]
 80099a0:	e7da      	b.n	8009958 <_free_r+0x24>
 80099a2:	42a0      	cmp	r0, r4
 80099a4:	d902      	bls.n	80099ac <_free_r+0x78>
 80099a6:	230c      	movs	r3, #12
 80099a8:	602b      	str	r3, [r5, #0]
 80099aa:	e7d5      	b.n	8009958 <_free_r+0x24>
 80099ac:	6821      	ldr	r1, [r4, #0]
 80099ae:	1860      	adds	r0, r4, r1
 80099b0:	4282      	cmp	r2, r0
 80099b2:	d103      	bne.n	80099bc <_free_r+0x88>
 80099b4:	6810      	ldr	r0, [r2, #0]
 80099b6:	6852      	ldr	r2, [r2, #4]
 80099b8:	1841      	adds	r1, r0, r1
 80099ba:	6021      	str	r1, [r4, #0]
 80099bc:	6062      	str	r2, [r4, #4]
 80099be:	605c      	str	r4, [r3, #4]
 80099c0:	e7ca      	b.n	8009958 <_free_r+0x24>
 80099c2:	46c0      	nop			; (mov r8, r8)
 80099c4:	20000204 	.word	0x20000204

080099c8 <_malloc_r>:
 80099c8:	2303      	movs	r3, #3
 80099ca:	b570      	push	{r4, r5, r6, lr}
 80099cc:	1ccd      	adds	r5, r1, #3
 80099ce:	439d      	bics	r5, r3
 80099d0:	3508      	adds	r5, #8
 80099d2:	0006      	movs	r6, r0
 80099d4:	2d0c      	cmp	r5, #12
 80099d6:	d21e      	bcs.n	8009a16 <_malloc_r+0x4e>
 80099d8:	250c      	movs	r5, #12
 80099da:	42a9      	cmp	r1, r5
 80099dc:	d81d      	bhi.n	8009a1a <_malloc_r+0x52>
 80099de:	0030      	movs	r0, r6
 80099e0:	f000 fda5 	bl	800a52e <__malloc_lock>
 80099e4:	4a25      	ldr	r2, [pc, #148]	; (8009a7c <_malloc_r+0xb4>)
 80099e6:	6814      	ldr	r4, [r2, #0]
 80099e8:	0021      	movs	r1, r4
 80099ea:	2900      	cmp	r1, #0
 80099ec:	d119      	bne.n	8009a22 <_malloc_r+0x5a>
 80099ee:	4c24      	ldr	r4, [pc, #144]	; (8009a80 <_malloc_r+0xb8>)
 80099f0:	6823      	ldr	r3, [r4, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d103      	bne.n	80099fe <_malloc_r+0x36>
 80099f6:	0030      	movs	r0, r6
 80099f8:	f000 fae2 	bl	8009fc0 <_sbrk_r>
 80099fc:	6020      	str	r0, [r4, #0]
 80099fe:	0029      	movs	r1, r5
 8009a00:	0030      	movs	r0, r6
 8009a02:	f000 fadd 	bl	8009fc0 <_sbrk_r>
 8009a06:	1c43      	adds	r3, r0, #1
 8009a08:	d12b      	bne.n	8009a62 <_malloc_r+0x9a>
 8009a0a:	230c      	movs	r3, #12
 8009a0c:	0030      	movs	r0, r6
 8009a0e:	6033      	str	r3, [r6, #0]
 8009a10:	f000 fd8e 	bl	800a530 <__malloc_unlock>
 8009a14:	e003      	b.n	8009a1e <_malloc_r+0x56>
 8009a16:	2d00      	cmp	r5, #0
 8009a18:	dadf      	bge.n	80099da <_malloc_r+0x12>
 8009a1a:	230c      	movs	r3, #12
 8009a1c:	6033      	str	r3, [r6, #0]
 8009a1e:	2000      	movs	r0, #0
 8009a20:	bd70      	pop	{r4, r5, r6, pc}
 8009a22:	680b      	ldr	r3, [r1, #0]
 8009a24:	1b5b      	subs	r3, r3, r5
 8009a26:	d419      	bmi.n	8009a5c <_malloc_r+0x94>
 8009a28:	2b0b      	cmp	r3, #11
 8009a2a:	d903      	bls.n	8009a34 <_malloc_r+0x6c>
 8009a2c:	600b      	str	r3, [r1, #0]
 8009a2e:	18cc      	adds	r4, r1, r3
 8009a30:	6025      	str	r5, [r4, #0]
 8009a32:	e003      	b.n	8009a3c <_malloc_r+0x74>
 8009a34:	684b      	ldr	r3, [r1, #4]
 8009a36:	428c      	cmp	r4, r1
 8009a38:	d10d      	bne.n	8009a56 <_malloc_r+0x8e>
 8009a3a:	6013      	str	r3, [r2, #0]
 8009a3c:	0030      	movs	r0, r6
 8009a3e:	f000 fd77 	bl	800a530 <__malloc_unlock>
 8009a42:	0020      	movs	r0, r4
 8009a44:	2207      	movs	r2, #7
 8009a46:	300b      	adds	r0, #11
 8009a48:	1d23      	adds	r3, r4, #4
 8009a4a:	4390      	bics	r0, r2
 8009a4c:	1ac3      	subs	r3, r0, r3
 8009a4e:	d0e7      	beq.n	8009a20 <_malloc_r+0x58>
 8009a50:	425a      	negs	r2, r3
 8009a52:	50e2      	str	r2, [r4, r3]
 8009a54:	e7e4      	b.n	8009a20 <_malloc_r+0x58>
 8009a56:	6063      	str	r3, [r4, #4]
 8009a58:	000c      	movs	r4, r1
 8009a5a:	e7ef      	b.n	8009a3c <_malloc_r+0x74>
 8009a5c:	000c      	movs	r4, r1
 8009a5e:	6849      	ldr	r1, [r1, #4]
 8009a60:	e7c3      	b.n	80099ea <_malloc_r+0x22>
 8009a62:	2303      	movs	r3, #3
 8009a64:	1cc4      	adds	r4, r0, #3
 8009a66:	439c      	bics	r4, r3
 8009a68:	42a0      	cmp	r0, r4
 8009a6a:	d0e1      	beq.n	8009a30 <_malloc_r+0x68>
 8009a6c:	1a21      	subs	r1, r4, r0
 8009a6e:	0030      	movs	r0, r6
 8009a70:	f000 faa6 	bl	8009fc0 <_sbrk_r>
 8009a74:	1c43      	adds	r3, r0, #1
 8009a76:	d1db      	bne.n	8009a30 <_malloc_r+0x68>
 8009a78:	e7c7      	b.n	8009a0a <_malloc_r+0x42>
 8009a7a:	46c0      	nop			; (mov r8, r8)
 8009a7c:	20000204 	.word	0x20000204
 8009a80:	20000208 	.word	0x20000208

08009a84 <__ssputs_r>:
 8009a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a86:	688e      	ldr	r6, [r1, #8]
 8009a88:	b085      	sub	sp, #20
 8009a8a:	0007      	movs	r7, r0
 8009a8c:	000c      	movs	r4, r1
 8009a8e:	9203      	str	r2, [sp, #12]
 8009a90:	9301      	str	r3, [sp, #4]
 8009a92:	429e      	cmp	r6, r3
 8009a94:	d83c      	bhi.n	8009b10 <__ssputs_r+0x8c>
 8009a96:	2390      	movs	r3, #144	; 0x90
 8009a98:	898a      	ldrh	r2, [r1, #12]
 8009a9a:	00db      	lsls	r3, r3, #3
 8009a9c:	421a      	tst	r2, r3
 8009a9e:	d034      	beq.n	8009b0a <__ssputs_r+0x86>
 8009aa0:	2503      	movs	r5, #3
 8009aa2:	6909      	ldr	r1, [r1, #16]
 8009aa4:	6823      	ldr	r3, [r4, #0]
 8009aa6:	1a5b      	subs	r3, r3, r1
 8009aa8:	9302      	str	r3, [sp, #8]
 8009aaa:	6963      	ldr	r3, [r4, #20]
 8009aac:	9802      	ldr	r0, [sp, #8]
 8009aae:	435d      	muls	r5, r3
 8009ab0:	0feb      	lsrs	r3, r5, #31
 8009ab2:	195d      	adds	r5, r3, r5
 8009ab4:	9b01      	ldr	r3, [sp, #4]
 8009ab6:	106d      	asrs	r5, r5, #1
 8009ab8:	3301      	adds	r3, #1
 8009aba:	181b      	adds	r3, r3, r0
 8009abc:	42ab      	cmp	r3, r5
 8009abe:	d900      	bls.n	8009ac2 <__ssputs_r+0x3e>
 8009ac0:	001d      	movs	r5, r3
 8009ac2:	0553      	lsls	r3, r2, #21
 8009ac4:	d532      	bpl.n	8009b2c <__ssputs_r+0xa8>
 8009ac6:	0029      	movs	r1, r5
 8009ac8:	0038      	movs	r0, r7
 8009aca:	f7ff ff7d 	bl	80099c8 <_malloc_r>
 8009ace:	1e06      	subs	r6, r0, #0
 8009ad0:	d109      	bne.n	8009ae6 <__ssputs_r+0x62>
 8009ad2:	230c      	movs	r3, #12
 8009ad4:	603b      	str	r3, [r7, #0]
 8009ad6:	2340      	movs	r3, #64	; 0x40
 8009ad8:	2001      	movs	r0, #1
 8009ada:	89a2      	ldrh	r2, [r4, #12]
 8009adc:	4240      	negs	r0, r0
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	81a3      	strh	r3, [r4, #12]
 8009ae2:	b005      	add	sp, #20
 8009ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ae6:	9a02      	ldr	r2, [sp, #8]
 8009ae8:	6921      	ldr	r1, [r4, #16]
 8009aea:	f7fc faed 	bl	80060c8 <memcpy>
 8009aee:	89a3      	ldrh	r3, [r4, #12]
 8009af0:	4a14      	ldr	r2, [pc, #80]	; (8009b44 <__ssputs_r+0xc0>)
 8009af2:	401a      	ands	r2, r3
 8009af4:	2380      	movs	r3, #128	; 0x80
 8009af6:	4313      	orrs	r3, r2
 8009af8:	81a3      	strh	r3, [r4, #12]
 8009afa:	9b02      	ldr	r3, [sp, #8]
 8009afc:	6126      	str	r6, [r4, #16]
 8009afe:	18f6      	adds	r6, r6, r3
 8009b00:	6026      	str	r6, [r4, #0]
 8009b02:	6165      	str	r5, [r4, #20]
 8009b04:	9e01      	ldr	r6, [sp, #4]
 8009b06:	1aed      	subs	r5, r5, r3
 8009b08:	60a5      	str	r5, [r4, #8]
 8009b0a:	9b01      	ldr	r3, [sp, #4]
 8009b0c:	429e      	cmp	r6, r3
 8009b0e:	d900      	bls.n	8009b12 <__ssputs_r+0x8e>
 8009b10:	9e01      	ldr	r6, [sp, #4]
 8009b12:	0032      	movs	r2, r6
 8009b14:	9903      	ldr	r1, [sp, #12]
 8009b16:	6820      	ldr	r0, [r4, #0]
 8009b18:	f000 fcf6 	bl	800a508 <memmove>
 8009b1c:	68a3      	ldr	r3, [r4, #8]
 8009b1e:	2000      	movs	r0, #0
 8009b20:	1b9b      	subs	r3, r3, r6
 8009b22:	60a3      	str	r3, [r4, #8]
 8009b24:	6823      	ldr	r3, [r4, #0]
 8009b26:	199e      	adds	r6, r3, r6
 8009b28:	6026      	str	r6, [r4, #0]
 8009b2a:	e7da      	b.n	8009ae2 <__ssputs_r+0x5e>
 8009b2c:	002a      	movs	r2, r5
 8009b2e:	0038      	movs	r0, r7
 8009b30:	f000 fcff 	bl	800a532 <_realloc_r>
 8009b34:	1e06      	subs	r6, r0, #0
 8009b36:	d1e0      	bne.n	8009afa <__ssputs_r+0x76>
 8009b38:	6921      	ldr	r1, [r4, #16]
 8009b3a:	0038      	movs	r0, r7
 8009b3c:	f7ff fefa 	bl	8009934 <_free_r>
 8009b40:	e7c7      	b.n	8009ad2 <__ssputs_r+0x4e>
 8009b42:	46c0      	nop			; (mov r8, r8)
 8009b44:	fffffb7f 	.word	0xfffffb7f

08009b48 <_svfiprintf_r>:
 8009b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b4a:	b0a1      	sub	sp, #132	; 0x84
 8009b4c:	9003      	str	r0, [sp, #12]
 8009b4e:	001d      	movs	r5, r3
 8009b50:	898b      	ldrh	r3, [r1, #12]
 8009b52:	000f      	movs	r7, r1
 8009b54:	0016      	movs	r6, r2
 8009b56:	061b      	lsls	r3, r3, #24
 8009b58:	d511      	bpl.n	8009b7e <_svfiprintf_r+0x36>
 8009b5a:	690b      	ldr	r3, [r1, #16]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d10e      	bne.n	8009b7e <_svfiprintf_r+0x36>
 8009b60:	2140      	movs	r1, #64	; 0x40
 8009b62:	f7ff ff31 	bl	80099c8 <_malloc_r>
 8009b66:	6038      	str	r0, [r7, #0]
 8009b68:	6138      	str	r0, [r7, #16]
 8009b6a:	2800      	cmp	r0, #0
 8009b6c:	d105      	bne.n	8009b7a <_svfiprintf_r+0x32>
 8009b6e:	230c      	movs	r3, #12
 8009b70:	9a03      	ldr	r2, [sp, #12]
 8009b72:	3801      	subs	r0, #1
 8009b74:	6013      	str	r3, [r2, #0]
 8009b76:	b021      	add	sp, #132	; 0x84
 8009b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b7a:	2340      	movs	r3, #64	; 0x40
 8009b7c:	617b      	str	r3, [r7, #20]
 8009b7e:	2300      	movs	r3, #0
 8009b80:	ac08      	add	r4, sp, #32
 8009b82:	6163      	str	r3, [r4, #20]
 8009b84:	3320      	adds	r3, #32
 8009b86:	7663      	strb	r3, [r4, #25]
 8009b88:	3310      	adds	r3, #16
 8009b8a:	76a3      	strb	r3, [r4, #26]
 8009b8c:	9507      	str	r5, [sp, #28]
 8009b8e:	0035      	movs	r5, r6
 8009b90:	782b      	ldrb	r3, [r5, #0]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d001      	beq.n	8009b9a <_svfiprintf_r+0x52>
 8009b96:	2b25      	cmp	r3, #37	; 0x25
 8009b98:	d146      	bne.n	8009c28 <_svfiprintf_r+0xe0>
 8009b9a:	1bab      	subs	r3, r5, r6
 8009b9c:	9305      	str	r3, [sp, #20]
 8009b9e:	d00c      	beq.n	8009bba <_svfiprintf_r+0x72>
 8009ba0:	0032      	movs	r2, r6
 8009ba2:	0039      	movs	r1, r7
 8009ba4:	9803      	ldr	r0, [sp, #12]
 8009ba6:	f7ff ff6d 	bl	8009a84 <__ssputs_r>
 8009baa:	1c43      	adds	r3, r0, #1
 8009bac:	d100      	bne.n	8009bb0 <_svfiprintf_r+0x68>
 8009bae:	e0ae      	b.n	8009d0e <_svfiprintf_r+0x1c6>
 8009bb0:	6962      	ldr	r2, [r4, #20]
 8009bb2:	9b05      	ldr	r3, [sp, #20]
 8009bb4:	4694      	mov	ip, r2
 8009bb6:	4463      	add	r3, ip
 8009bb8:	6163      	str	r3, [r4, #20]
 8009bba:	782b      	ldrb	r3, [r5, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d100      	bne.n	8009bc2 <_svfiprintf_r+0x7a>
 8009bc0:	e0a5      	b.n	8009d0e <_svfiprintf_r+0x1c6>
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	4252      	negs	r2, r2
 8009bc8:	6062      	str	r2, [r4, #4]
 8009bca:	a904      	add	r1, sp, #16
 8009bcc:	3254      	adds	r2, #84	; 0x54
 8009bce:	1852      	adds	r2, r2, r1
 8009bd0:	1c6e      	adds	r6, r5, #1
 8009bd2:	6023      	str	r3, [r4, #0]
 8009bd4:	60e3      	str	r3, [r4, #12]
 8009bd6:	60a3      	str	r3, [r4, #8]
 8009bd8:	7013      	strb	r3, [r2, #0]
 8009bda:	65a3      	str	r3, [r4, #88]	; 0x58
 8009bdc:	7831      	ldrb	r1, [r6, #0]
 8009bde:	2205      	movs	r2, #5
 8009be0:	4853      	ldr	r0, [pc, #332]	; (8009d30 <_svfiprintf_r+0x1e8>)
 8009be2:	f7ff fa97 	bl	8009114 <memchr>
 8009be6:	1c75      	adds	r5, r6, #1
 8009be8:	2800      	cmp	r0, #0
 8009bea:	d11f      	bne.n	8009c2c <_svfiprintf_r+0xe4>
 8009bec:	6822      	ldr	r2, [r4, #0]
 8009bee:	06d3      	lsls	r3, r2, #27
 8009bf0:	d504      	bpl.n	8009bfc <_svfiprintf_r+0xb4>
 8009bf2:	2353      	movs	r3, #83	; 0x53
 8009bf4:	a904      	add	r1, sp, #16
 8009bf6:	185b      	adds	r3, r3, r1
 8009bf8:	2120      	movs	r1, #32
 8009bfa:	7019      	strb	r1, [r3, #0]
 8009bfc:	0713      	lsls	r3, r2, #28
 8009bfe:	d504      	bpl.n	8009c0a <_svfiprintf_r+0xc2>
 8009c00:	2353      	movs	r3, #83	; 0x53
 8009c02:	a904      	add	r1, sp, #16
 8009c04:	185b      	adds	r3, r3, r1
 8009c06:	212b      	movs	r1, #43	; 0x2b
 8009c08:	7019      	strb	r1, [r3, #0]
 8009c0a:	7833      	ldrb	r3, [r6, #0]
 8009c0c:	2b2a      	cmp	r3, #42	; 0x2a
 8009c0e:	d016      	beq.n	8009c3e <_svfiprintf_r+0xf6>
 8009c10:	0035      	movs	r5, r6
 8009c12:	2100      	movs	r1, #0
 8009c14:	200a      	movs	r0, #10
 8009c16:	68e3      	ldr	r3, [r4, #12]
 8009c18:	782a      	ldrb	r2, [r5, #0]
 8009c1a:	1c6e      	adds	r6, r5, #1
 8009c1c:	3a30      	subs	r2, #48	; 0x30
 8009c1e:	2a09      	cmp	r2, #9
 8009c20:	d94e      	bls.n	8009cc0 <_svfiprintf_r+0x178>
 8009c22:	2900      	cmp	r1, #0
 8009c24:	d018      	beq.n	8009c58 <_svfiprintf_r+0x110>
 8009c26:	e010      	b.n	8009c4a <_svfiprintf_r+0x102>
 8009c28:	3501      	adds	r5, #1
 8009c2a:	e7b1      	b.n	8009b90 <_svfiprintf_r+0x48>
 8009c2c:	4b40      	ldr	r3, [pc, #256]	; (8009d30 <_svfiprintf_r+0x1e8>)
 8009c2e:	6822      	ldr	r2, [r4, #0]
 8009c30:	1ac0      	subs	r0, r0, r3
 8009c32:	2301      	movs	r3, #1
 8009c34:	4083      	lsls	r3, r0
 8009c36:	4313      	orrs	r3, r2
 8009c38:	6023      	str	r3, [r4, #0]
 8009c3a:	002e      	movs	r6, r5
 8009c3c:	e7ce      	b.n	8009bdc <_svfiprintf_r+0x94>
 8009c3e:	9b07      	ldr	r3, [sp, #28]
 8009c40:	1d19      	adds	r1, r3, #4
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	9107      	str	r1, [sp, #28]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	db01      	blt.n	8009c4e <_svfiprintf_r+0x106>
 8009c4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c4c:	e004      	b.n	8009c58 <_svfiprintf_r+0x110>
 8009c4e:	425b      	negs	r3, r3
 8009c50:	60e3      	str	r3, [r4, #12]
 8009c52:	2302      	movs	r3, #2
 8009c54:	4313      	orrs	r3, r2
 8009c56:	6023      	str	r3, [r4, #0]
 8009c58:	782b      	ldrb	r3, [r5, #0]
 8009c5a:	2b2e      	cmp	r3, #46	; 0x2e
 8009c5c:	d10a      	bne.n	8009c74 <_svfiprintf_r+0x12c>
 8009c5e:	786b      	ldrb	r3, [r5, #1]
 8009c60:	2b2a      	cmp	r3, #42	; 0x2a
 8009c62:	d135      	bne.n	8009cd0 <_svfiprintf_r+0x188>
 8009c64:	9b07      	ldr	r3, [sp, #28]
 8009c66:	3502      	adds	r5, #2
 8009c68:	1d1a      	adds	r2, r3, #4
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	9207      	str	r2, [sp, #28]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	db2b      	blt.n	8009cca <_svfiprintf_r+0x182>
 8009c72:	9309      	str	r3, [sp, #36]	; 0x24
 8009c74:	4e2f      	ldr	r6, [pc, #188]	; (8009d34 <_svfiprintf_r+0x1ec>)
 8009c76:	7829      	ldrb	r1, [r5, #0]
 8009c78:	2203      	movs	r2, #3
 8009c7a:	0030      	movs	r0, r6
 8009c7c:	f7ff fa4a 	bl	8009114 <memchr>
 8009c80:	2800      	cmp	r0, #0
 8009c82:	d006      	beq.n	8009c92 <_svfiprintf_r+0x14a>
 8009c84:	2340      	movs	r3, #64	; 0x40
 8009c86:	1b80      	subs	r0, r0, r6
 8009c88:	4083      	lsls	r3, r0
 8009c8a:	6822      	ldr	r2, [r4, #0]
 8009c8c:	3501      	adds	r5, #1
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	6023      	str	r3, [r4, #0]
 8009c92:	7829      	ldrb	r1, [r5, #0]
 8009c94:	2206      	movs	r2, #6
 8009c96:	4828      	ldr	r0, [pc, #160]	; (8009d38 <_svfiprintf_r+0x1f0>)
 8009c98:	1c6e      	adds	r6, r5, #1
 8009c9a:	7621      	strb	r1, [r4, #24]
 8009c9c:	f7ff fa3a 	bl	8009114 <memchr>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d03c      	beq.n	8009d1e <_svfiprintf_r+0x1d6>
 8009ca4:	4b25      	ldr	r3, [pc, #148]	; (8009d3c <_svfiprintf_r+0x1f4>)
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d125      	bne.n	8009cf6 <_svfiprintf_r+0x1ae>
 8009caa:	2207      	movs	r2, #7
 8009cac:	9b07      	ldr	r3, [sp, #28]
 8009cae:	3307      	adds	r3, #7
 8009cb0:	4393      	bics	r3, r2
 8009cb2:	3308      	adds	r3, #8
 8009cb4:	9307      	str	r3, [sp, #28]
 8009cb6:	6963      	ldr	r3, [r4, #20]
 8009cb8:	9a04      	ldr	r2, [sp, #16]
 8009cba:	189b      	adds	r3, r3, r2
 8009cbc:	6163      	str	r3, [r4, #20]
 8009cbe:	e766      	b.n	8009b8e <_svfiprintf_r+0x46>
 8009cc0:	4343      	muls	r3, r0
 8009cc2:	2101      	movs	r1, #1
 8009cc4:	189b      	adds	r3, r3, r2
 8009cc6:	0035      	movs	r5, r6
 8009cc8:	e7a6      	b.n	8009c18 <_svfiprintf_r+0xd0>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	425b      	negs	r3, r3
 8009cce:	e7d0      	b.n	8009c72 <_svfiprintf_r+0x12a>
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	200a      	movs	r0, #10
 8009cd4:	001a      	movs	r2, r3
 8009cd6:	3501      	adds	r5, #1
 8009cd8:	6063      	str	r3, [r4, #4]
 8009cda:	7829      	ldrb	r1, [r5, #0]
 8009cdc:	1c6e      	adds	r6, r5, #1
 8009cde:	3930      	subs	r1, #48	; 0x30
 8009ce0:	2909      	cmp	r1, #9
 8009ce2:	d903      	bls.n	8009cec <_svfiprintf_r+0x1a4>
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d0c5      	beq.n	8009c74 <_svfiprintf_r+0x12c>
 8009ce8:	9209      	str	r2, [sp, #36]	; 0x24
 8009cea:	e7c3      	b.n	8009c74 <_svfiprintf_r+0x12c>
 8009cec:	4342      	muls	r2, r0
 8009cee:	2301      	movs	r3, #1
 8009cf0:	1852      	adds	r2, r2, r1
 8009cf2:	0035      	movs	r5, r6
 8009cf4:	e7f1      	b.n	8009cda <_svfiprintf_r+0x192>
 8009cf6:	ab07      	add	r3, sp, #28
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	003a      	movs	r2, r7
 8009cfc:	4b10      	ldr	r3, [pc, #64]	; (8009d40 <_svfiprintf_r+0x1f8>)
 8009cfe:	0021      	movs	r1, r4
 8009d00:	9803      	ldr	r0, [sp, #12]
 8009d02:	f7fc fa8f 	bl	8006224 <_printf_float>
 8009d06:	9004      	str	r0, [sp, #16]
 8009d08:	9b04      	ldr	r3, [sp, #16]
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	d1d3      	bne.n	8009cb6 <_svfiprintf_r+0x16e>
 8009d0e:	89bb      	ldrh	r3, [r7, #12]
 8009d10:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009d12:	065b      	lsls	r3, r3, #25
 8009d14:	d400      	bmi.n	8009d18 <_svfiprintf_r+0x1d0>
 8009d16:	e72e      	b.n	8009b76 <_svfiprintf_r+0x2e>
 8009d18:	2001      	movs	r0, #1
 8009d1a:	4240      	negs	r0, r0
 8009d1c:	e72b      	b.n	8009b76 <_svfiprintf_r+0x2e>
 8009d1e:	ab07      	add	r3, sp, #28
 8009d20:	9300      	str	r3, [sp, #0]
 8009d22:	003a      	movs	r2, r7
 8009d24:	4b06      	ldr	r3, [pc, #24]	; (8009d40 <_svfiprintf_r+0x1f8>)
 8009d26:	0021      	movs	r1, r4
 8009d28:	9803      	ldr	r0, [sp, #12]
 8009d2a:	f7fc fd35 	bl	8006798 <_printf_i>
 8009d2e:	e7ea      	b.n	8009d06 <_svfiprintf_r+0x1be>
 8009d30:	0800a9a4 	.word	0x0800a9a4
 8009d34:	0800a9aa 	.word	0x0800a9aa
 8009d38:	0800a9ae 	.word	0x0800a9ae
 8009d3c:	08006225 	.word	0x08006225
 8009d40:	08009a85 	.word	0x08009a85

08009d44 <__sfputc_r>:
 8009d44:	6893      	ldr	r3, [r2, #8]
 8009d46:	b510      	push	{r4, lr}
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	6093      	str	r3, [r2, #8]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	da04      	bge.n	8009d5a <__sfputc_r+0x16>
 8009d50:	6994      	ldr	r4, [r2, #24]
 8009d52:	42a3      	cmp	r3, r4
 8009d54:	db07      	blt.n	8009d66 <__sfputc_r+0x22>
 8009d56:	290a      	cmp	r1, #10
 8009d58:	d005      	beq.n	8009d66 <__sfputc_r+0x22>
 8009d5a:	6813      	ldr	r3, [r2, #0]
 8009d5c:	1c58      	adds	r0, r3, #1
 8009d5e:	6010      	str	r0, [r2, #0]
 8009d60:	7019      	strb	r1, [r3, #0]
 8009d62:	0008      	movs	r0, r1
 8009d64:	bd10      	pop	{r4, pc}
 8009d66:	f000 f99b 	bl	800a0a0 <__swbuf_r>
 8009d6a:	0001      	movs	r1, r0
 8009d6c:	e7f9      	b.n	8009d62 <__sfputc_r+0x1e>

08009d6e <__sfputs_r>:
 8009d6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d70:	0006      	movs	r6, r0
 8009d72:	000f      	movs	r7, r1
 8009d74:	0014      	movs	r4, r2
 8009d76:	18d5      	adds	r5, r2, r3
 8009d78:	42ac      	cmp	r4, r5
 8009d7a:	d101      	bne.n	8009d80 <__sfputs_r+0x12>
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	e007      	b.n	8009d90 <__sfputs_r+0x22>
 8009d80:	7821      	ldrb	r1, [r4, #0]
 8009d82:	003a      	movs	r2, r7
 8009d84:	0030      	movs	r0, r6
 8009d86:	f7ff ffdd 	bl	8009d44 <__sfputc_r>
 8009d8a:	3401      	adds	r4, #1
 8009d8c:	1c43      	adds	r3, r0, #1
 8009d8e:	d1f3      	bne.n	8009d78 <__sfputs_r+0xa>
 8009d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d94 <_vfiprintf_r>:
 8009d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d96:	b0a1      	sub	sp, #132	; 0x84
 8009d98:	9003      	str	r0, [sp, #12]
 8009d9a:	000f      	movs	r7, r1
 8009d9c:	0016      	movs	r6, r2
 8009d9e:	001d      	movs	r5, r3
 8009da0:	2800      	cmp	r0, #0
 8009da2:	d005      	beq.n	8009db0 <_vfiprintf_r+0x1c>
 8009da4:	6983      	ldr	r3, [r0, #24]
 8009da6:	9305      	str	r3, [sp, #20]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d101      	bne.n	8009db0 <_vfiprintf_r+0x1c>
 8009dac:	f7fe fdc0 	bl	8008930 <__sinit>
 8009db0:	4b7b      	ldr	r3, [pc, #492]	; (8009fa0 <_vfiprintf_r+0x20c>)
 8009db2:	429f      	cmp	r7, r3
 8009db4:	d15c      	bne.n	8009e70 <_vfiprintf_r+0xdc>
 8009db6:	9b03      	ldr	r3, [sp, #12]
 8009db8:	685f      	ldr	r7, [r3, #4]
 8009dba:	89bb      	ldrh	r3, [r7, #12]
 8009dbc:	071b      	lsls	r3, r3, #28
 8009dbe:	d563      	bpl.n	8009e88 <_vfiprintf_r+0xf4>
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d060      	beq.n	8009e88 <_vfiprintf_r+0xf4>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	ac08      	add	r4, sp, #32
 8009dca:	6163      	str	r3, [r4, #20]
 8009dcc:	3320      	adds	r3, #32
 8009dce:	7663      	strb	r3, [r4, #25]
 8009dd0:	3310      	adds	r3, #16
 8009dd2:	76a3      	strb	r3, [r4, #26]
 8009dd4:	9507      	str	r5, [sp, #28]
 8009dd6:	0035      	movs	r5, r6
 8009dd8:	782b      	ldrb	r3, [r5, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d001      	beq.n	8009de2 <_vfiprintf_r+0x4e>
 8009dde:	2b25      	cmp	r3, #37	; 0x25
 8009de0:	d15c      	bne.n	8009e9c <_vfiprintf_r+0x108>
 8009de2:	1bab      	subs	r3, r5, r6
 8009de4:	9305      	str	r3, [sp, #20]
 8009de6:	d00c      	beq.n	8009e02 <_vfiprintf_r+0x6e>
 8009de8:	0032      	movs	r2, r6
 8009dea:	0039      	movs	r1, r7
 8009dec:	9803      	ldr	r0, [sp, #12]
 8009dee:	f7ff ffbe 	bl	8009d6e <__sfputs_r>
 8009df2:	1c43      	adds	r3, r0, #1
 8009df4:	d100      	bne.n	8009df8 <_vfiprintf_r+0x64>
 8009df6:	e0c4      	b.n	8009f82 <_vfiprintf_r+0x1ee>
 8009df8:	6962      	ldr	r2, [r4, #20]
 8009dfa:	9b05      	ldr	r3, [sp, #20]
 8009dfc:	4694      	mov	ip, r2
 8009dfe:	4463      	add	r3, ip
 8009e00:	6163      	str	r3, [r4, #20]
 8009e02:	782b      	ldrb	r3, [r5, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d100      	bne.n	8009e0a <_vfiprintf_r+0x76>
 8009e08:	e0bb      	b.n	8009f82 <_vfiprintf_r+0x1ee>
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	4252      	negs	r2, r2
 8009e10:	6062      	str	r2, [r4, #4]
 8009e12:	a904      	add	r1, sp, #16
 8009e14:	3254      	adds	r2, #84	; 0x54
 8009e16:	1852      	adds	r2, r2, r1
 8009e18:	1c6e      	adds	r6, r5, #1
 8009e1a:	6023      	str	r3, [r4, #0]
 8009e1c:	60e3      	str	r3, [r4, #12]
 8009e1e:	60a3      	str	r3, [r4, #8]
 8009e20:	7013      	strb	r3, [r2, #0]
 8009e22:	65a3      	str	r3, [r4, #88]	; 0x58
 8009e24:	7831      	ldrb	r1, [r6, #0]
 8009e26:	2205      	movs	r2, #5
 8009e28:	485e      	ldr	r0, [pc, #376]	; (8009fa4 <_vfiprintf_r+0x210>)
 8009e2a:	f7ff f973 	bl	8009114 <memchr>
 8009e2e:	1c75      	adds	r5, r6, #1
 8009e30:	2800      	cmp	r0, #0
 8009e32:	d135      	bne.n	8009ea0 <_vfiprintf_r+0x10c>
 8009e34:	6822      	ldr	r2, [r4, #0]
 8009e36:	06d3      	lsls	r3, r2, #27
 8009e38:	d504      	bpl.n	8009e44 <_vfiprintf_r+0xb0>
 8009e3a:	2353      	movs	r3, #83	; 0x53
 8009e3c:	a904      	add	r1, sp, #16
 8009e3e:	185b      	adds	r3, r3, r1
 8009e40:	2120      	movs	r1, #32
 8009e42:	7019      	strb	r1, [r3, #0]
 8009e44:	0713      	lsls	r3, r2, #28
 8009e46:	d504      	bpl.n	8009e52 <_vfiprintf_r+0xbe>
 8009e48:	2353      	movs	r3, #83	; 0x53
 8009e4a:	a904      	add	r1, sp, #16
 8009e4c:	185b      	adds	r3, r3, r1
 8009e4e:	212b      	movs	r1, #43	; 0x2b
 8009e50:	7019      	strb	r1, [r3, #0]
 8009e52:	7833      	ldrb	r3, [r6, #0]
 8009e54:	2b2a      	cmp	r3, #42	; 0x2a
 8009e56:	d02c      	beq.n	8009eb2 <_vfiprintf_r+0x11e>
 8009e58:	0035      	movs	r5, r6
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	200a      	movs	r0, #10
 8009e5e:	68e3      	ldr	r3, [r4, #12]
 8009e60:	782a      	ldrb	r2, [r5, #0]
 8009e62:	1c6e      	adds	r6, r5, #1
 8009e64:	3a30      	subs	r2, #48	; 0x30
 8009e66:	2a09      	cmp	r2, #9
 8009e68:	d964      	bls.n	8009f34 <_vfiprintf_r+0x1a0>
 8009e6a:	2900      	cmp	r1, #0
 8009e6c:	d02e      	beq.n	8009ecc <_vfiprintf_r+0x138>
 8009e6e:	e026      	b.n	8009ebe <_vfiprintf_r+0x12a>
 8009e70:	4b4d      	ldr	r3, [pc, #308]	; (8009fa8 <_vfiprintf_r+0x214>)
 8009e72:	429f      	cmp	r7, r3
 8009e74:	d102      	bne.n	8009e7c <_vfiprintf_r+0xe8>
 8009e76:	9b03      	ldr	r3, [sp, #12]
 8009e78:	689f      	ldr	r7, [r3, #8]
 8009e7a:	e79e      	b.n	8009dba <_vfiprintf_r+0x26>
 8009e7c:	4b4b      	ldr	r3, [pc, #300]	; (8009fac <_vfiprintf_r+0x218>)
 8009e7e:	429f      	cmp	r7, r3
 8009e80:	d19b      	bne.n	8009dba <_vfiprintf_r+0x26>
 8009e82:	9b03      	ldr	r3, [sp, #12]
 8009e84:	68df      	ldr	r7, [r3, #12]
 8009e86:	e798      	b.n	8009dba <_vfiprintf_r+0x26>
 8009e88:	0039      	movs	r1, r7
 8009e8a:	9803      	ldr	r0, [sp, #12]
 8009e8c:	f000 f97e 	bl	800a18c <__swsetup_r>
 8009e90:	2800      	cmp	r0, #0
 8009e92:	d098      	beq.n	8009dc6 <_vfiprintf_r+0x32>
 8009e94:	2001      	movs	r0, #1
 8009e96:	4240      	negs	r0, r0
 8009e98:	b021      	add	sp, #132	; 0x84
 8009e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e9c:	3501      	adds	r5, #1
 8009e9e:	e79b      	b.n	8009dd8 <_vfiprintf_r+0x44>
 8009ea0:	4b40      	ldr	r3, [pc, #256]	; (8009fa4 <_vfiprintf_r+0x210>)
 8009ea2:	6822      	ldr	r2, [r4, #0]
 8009ea4:	1ac0      	subs	r0, r0, r3
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	4083      	lsls	r3, r0
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	6023      	str	r3, [r4, #0]
 8009eae:	002e      	movs	r6, r5
 8009eb0:	e7b8      	b.n	8009e24 <_vfiprintf_r+0x90>
 8009eb2:	9b07      	ldr	r3, [sp, #28]
 8009eb4:	1d19      	adds	r1, r3, #4
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	9107      	str	r1, [sp, #28]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	db01      	blt.n	8009ec2 <_vfiprintf_r+0x12e>
 8009ebe:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ec0:	e004      	b.n	8009ecc <_vfiprintf_r+0x138>
 8009ec2:	425b      	negs	r3, r3
 8009ec4:	60e3      	str	r3, [r4, #12]
 8009ec6:	2302      	movs	r3, #2
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	6023      	str	r3, [r4, #0]
 8009ecc:	782b      	ldrb	r3, [r5, #0]
 8009ece:	2b2e      	cmp	r3, #46	; 0x2e
 8009ed0:	d10a      	bne.n	8009ee8 <_vfiprintf_r+0x154>
 8009ed2:	786b      	ldrb	r3, [r5, #1]
 8009ed4:	2b2a      	cmp	r3, #42	; 0x2a
 8009ed6:	d135      	bne.n	8009f44 <_vfiprintf_r+0x1b0>
 8009ed8:	9b07      	ldr	r3, [sp, #28]
 8009eda:	3502      	adds	r5, #2
 8009edc:	1d1a      	adds	r2, r3, #4
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	9207      	str	r2, [sp, #28]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	db2b      	blt.n	8009f3e <_vfiprintf_r+0x1aa>
 8009ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ee8:	4e31      	ldr	r6, [pc, #196]	; (8009fb0 <_vfiprintf_r+0x21c>)
 8009eea:	7829      	ldrb	r1, [r5, #0]
 8009eec:	2203      	movs	r2, #3
 8009eee:	0030      	movs	r0, r6
 8009ef0:	f7ff f910 	bl	8009114 <memchr>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d006      	beq.n	8009f06 <_vfiprintf_r+0x172>
 8009ef8:	2340      	movs	r3, #64	; 0x40
 8009efa:	1b80      	subs	r0, r0, r6
 8009efc:	4083      	lsls	r3, r0
 8009efe:	6822      	ldr	r2, [r4, #0]
 8009f00:	3501      	adds	r5, #1
 8009f02:	4313      	orrs	r3, r2
 8009f04:	6023      	str	r3, [r4, #0]
 8009f06:	7829      	ldrb	r1, [r5, #0]
 8009f08:	2206      	movs	r2, #6
 8009f0a:	482a      	ldr	r0, [pc, #168]	; (8009fb4 <_vfiprintf_r+0x220>)
 8009f0c:	1c6e      	adds	r6, r5, #1
 8009f0e:	7621      	strb	r1, [r4, #24]
 8009f10:	f7ff f900 	bl	8009114 <memchr>
 8009f14:	2800      	cmp	r0, #0
 8009f16:	d03a      	beq.n	8009f8e <_vfiprintf_r+0x1fa>
 8009f18:	4b27      	ldr	r3, [pc, #156]	; (8009fb8 <_vfiprintf_r+0x224>)
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d125      	bne.n	8009f6a <_vfiprintf_r+0x1d6>
 8009f1e:	2207      	movs	r2, #7
 8009f20:	9b07      	ldr	r3, [sp, #28]
 8009f22:	3307      	adds	r3, #7
 8009f24:	4393      	bics	r3, r2
 8009f26:	3308      	adds	r3, #8
 8009f28:	9307      	str	r3, [sp, #28]
 8009f2a:	6963      	ldr	r3, [r4, #20]
 8009f2c:	9a04      	ldr	r2, [sp, #16]
 8009f2e:	189b      	adds	r3, r3, r2
 8009f30:	6163      	str	r3, [r4, #20]
 8009f32:	e750      	b.n	8009dd6 <_vfiprintf_r+0x42>
 8009f34:	4343      	muls	r3, r0
 8009f36:	2101      	movs	r1, #1
 8009f38:	189b      	adds	r3, r3, r2
 8009f3a:	0035      	movs	r5, r6
 8009f3c:	e790      	b.n	8009e60 <_vfiprintf_r+0xcc>
 8009f3e:	2301      	movs	r3, #1
 8009f40:	425b      	negs	r3, r3
 8009f42:	e7d0      	b.n	8009ee6 <_vfiprintf_r+0x152>
 8009f44:	2300      	movs	r3, #0
 8009f46:	200a      	movs	r0, #10
 8009f48:	001a      	movs	r2, r3
 8009f4a:	3501      	adds	r5, #1
 8009f4c:	6063      	str	r3, [r4, #4]
 8009f4e:	7829      	ldrb	r1, [r5, #0]
 8009f50:	1c6e      	adds	r6, r5, #1
 8009f52:	3930      	subs	r1, #48	; 0x30
 8009f54:	2909      	cmp	r1, #9
 8009f56:	d903      	bls.n	8009f60 <_vfiprintf_r+0x1cc>
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d0c5      	beq.n	8009ee8 <_vfiprintf_r+0x154>
 8009f5c:	9209      	str	r2, [sp, #36]	; 0x24
 8009f5e:	e7c3      	b.n	8009ee8 <_vfiprintf_r+0x154>
 8009f60:	4342      	muls	r2, r0
 8009f62:	2301      	movs	r3, #1
 8009f64:	1852      	adds	r2, r2, r1
 8009f66:	0035      	movs	r5, r6
 8009f68:	e7f1      	b.n	8009f4e <_vfiprintf_r+0x1ba>
 8009f6a:	ab07      	add	r3, sp, #28
 8009f6c:	9300      	str	r3, [sp, #0]
 8009f6e:	003a      	movs	r2, r7
 8009f70:	4b12      	ldr	r3, [pc, #72]	; (8009fbc <_vfiprintf_r+0x228>)
 8009f72:	0021      	movs	r1, r4
 8009f74:	9803      	ldr	r0, [sp, #12]
 8009f76:	f7fc f955 	bl	8006224 <_printf_float>
 8009f7a:	9004      	str	r0, [sp, #16]
 8009f7c:	9b04      	ldr	r3, [sp, #16]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	d1d3      	bne.n	8009f2a <_vfiprintf_r+0x196>
 8009f82:	89bb      	ldrh	r3, [r7, #12]
 8009f84:	065b      	lsls	r3, r3, #25
 8009f86:	d500      	bpl.n	8009f8a <_vfiprintf_r+0x1f6>
 8009f88:	e784      	b.n	8009e94 <_vfiprintf_r+0x100>
 8009f8a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009f8c:	e784      	b.n	8009e98 <_vfiprintf_r+0x104>
 8009f8e:	ab07      	add	r3, sp, #28
 8009f90:	9300      	str	r3, [sp, #0]
 8009f92:	003a      	movs	r2, r7
 8009f94:	4b09      	ldr	r3, [pc, #36]	; (8009fbc <_vfiprintf_r+0x228>)
 8009f96:	0021      	movs	r1, r4
 8009f98:	9803      	ldr	r0, [sp, #12]
 8009f9a:	f7fc fbfd 	bl	8006798 <_printf_i>
 8009f9e:	e7ec      	b.n	8009f7a <_vfiprintf_r+0x1e6>
 8009fa0:	0800a858 	.word	0x0800a858
 8009fa4:	0800a9a4 	.word	0x0800a9a4
 8009fa8:	0800a878 	.word	0x0800a878
 8009fac:	0800a838 	.word	0x0800a838
 8009fb0:	0800a9aa 	.word	0x0800a9aa
 8009fb4:	0800a9ae 	.word	0x0800a9ae
 8009fb8:	08006225 	.word	0x08006225
 8009fbc:	08009d6f 	.word	0x08009d6f

08009fc0 <_sbrk_r>:
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	b570      	push	{r4, r5, r6, lr}
 8009fc4:	4c06      	ldr	r4, [pc, #24]	; (8009fe0 <_sbrk_r+0x20>)
 8009fc6:	0005      	movs	r5, r0
 8009fc8:	0008      	movs	r0, r1
 8009fca:	6023      	str	r3, [r4, #0]
 8009fcc:	f7f9 f894 	bl	80030f8 <_sbrk>
 8009fd0:	1c43      	adds	r3, r0, #1
 8009fd2:	d103      	bne.n	8009fdc <_sbrk_r+0x1c>
 8009fd4:	6823      	ldr	r3, [r4, #0]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d000      	beq.n	8009fdc <_sbrk_r+0x1c>
 8009fda:	602b      	str	r3, [r5, #0]
 8009fdc:	bd70      	pop	{r4, r5, r6, pc}
 8009fde:	46c0      	nop			; (mov r8, r8)
 8009fe0:	20000b3c 	.word	0x20000b3c

08009fe4 <__sread>:
 8009fe4:	b570      	push	{r4, r5, r6, lr}
 8009fe6:	000c      	movs	r4, r1
 8009fe8:	250e      	movs	r5, #14
 8009fea:	5f49      	ldrsh	r1, [r1, r5]
 8009fec:	f000 fac8 	bl	800a580 <_read_r>
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	db03      	blt.n	8009ffc <__sread+0x18>
 8009ff4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009ff6:	181b      	adds	r3, r3, r0
 8009ff8:	6563      	str	r3, [r4, #84]	; 0x54
 8009ffa:	bd70      	pop	{r4, r5, r6, pc}
 8009ffc:	89a3      	ldrh	r3, [r4, #12]
 8009ffe:	4a02      	ldr	r2, [pc, #8]	; (800a008 <__sread+0x24>)
 800a000:	4013      	ands	r3, r2
 800a002:	81a3      	strh	r3, [r4, #12]
 800a004:	e7f9      	b.n	8009ffa <__sread+0x16>
 800a006:	46c0      	nop			; (mov r8, r8)
 800a008:	ffffefff 	.word	0xffffefff

0800a00c <__swrite>:
 800a00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a00e:	001f      	movs	r7, r3
 800a010:	898b      	ldrh	r3, [r1, #12]
 800a012:	0005      	movs	r5, r0
 800a014:	000c      	movs	r4, r1
 800a016:	0016      	movs	r6, r2
 800a018:	05db      	lsls	r3, r3, #23
 800a01a:	d505      	bpl.n	800a028 <__swrite+0x1c>
 800a01c:	230e      	movs	r3, #14
 800a01e:	5ec9      	ldrsh	r1, [r1, r3]
 800a020:	2200      	movs	r2, #0
 800a022:	2302      	movs	r3, #2
 800a024:	f000 f9f0 	bl	800a408 <_lseek_r>
 800a028:	89a3      	ldrh	r3, [r4, #12]
 800a02a:	4a05      	ldr	r2, [pc, #20]	; (800a040 <__swrite+0x34>)
 800a02c:	0028      	movs	r0, r5
 800a02e:	4013      	ands	r3, r2
 800a030:	81a3      	strh	r3, [r4, #12]
 800a032:	0032      	movs	r2, r6
 800a034:	230e      	movs	r3, #14
 800a036:	5ee1      	ldrsh	r1, [r4, r3]
 800a038:	003b      	movs	r3, r7
 800a03a:	f000 f893 	bl	800a164 <_write_r>
 800a03e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a040:	ffffefff 	.word	0xffffefff

0800a044 <__sseek>:
 800a044:	b570      	push	{r4, r5, r6, lr}
 800a046:	000c      	movs	r4, r1
 800a048:	250e      	movs	r5, #14
 800a04a:	5f49      	ldrsh	r1, [r1, r5]
 800a04c:	f000 f9dc 	bl	800a408 <_lseek_r>
 800a050:	89a3      	ldrh	r3, [r4, #12]
 800a052:	1c42      	adds	r2, r0, #1
 800a054:	d103      	bne.n	800a05e <__sseek+0x1a>
 800a056:	4a05      	ldr	r2, [pc, #20]	; (800a06c <__sseek+0x28>)
 800a058:	4013      	ands	r3, r2
 800a05a:	81a3      	strh	r3, [r4, #12]
 800a05c:	bd70      	pop	{r4, r5, r6, pc}
 800a05e:	2280      	movs	r2, #128	; 0x80
 800a060:	0152      	lsls	r2, r2, #5
 800a062:	4313      	orrs	r3, r2
 800a064:	81a3      	strh	r3, [r4, #12]
 800a066:	6560      	str	r0, [r4, #84]	; 0x54
 800a068:	e7f8      	b.n	800a05c <__sseek+0x18>
 800a06a:	46c0      	nop			; (mov r8, r8)
 800a06c:	ffffefff 	.word	0xffffefff

0800a070 <__sclose>:
 800a070:	b510      	push	{r4, lr}
 800a072:	230e      	movs	r3, #14
 800a074:	5ec9      	ldrsh	r1, [r1, r3]
 800a076:	f000 f8ff 	bl	800a278 <_close_r>
 800a07a:	bd10      	pop	{r4, pc}

0800a07c <strncmp>:
 800a07c:	2300      	movs	r3, #0
 800a07e:	b530      	push	{r4, r5, lr}
 800a080:	429a      	cmp	r2, r3
 800a082:	d00a      	beq.n	800a09a <strncmp+0x1e>
 800a084:	3a01      	subs	r2, #1
 800a086:	5cc4      	ldrb	r4, [r0, r3]
 800a088:	5ccd      	ldrb	r5, [r1, r3]
 800a08a:	42ac      	cmp	r4, r5
 800a08c:	d104      	bne.n	800a098 <strncmp+0x1c>
 800a08e:	4293      	cmp	r3, r2
 800a090:	d002      	beq.n	800a098 <strncmp+0x1c>
 800a092:	3301      	adds	r3, #1
 800a094:	2c00      	cmp	r4, #0
 800a096:	d1f6      	bne.n	800a086 <strncmp+0xa>
 800a098:	1b63      	subs	r3, r4, r5
 800a09a:	0018      	movs	r0, r3
 800a09c:	bd30      	pop	{r4, r5, pc}
	...

0800a0a0 <__swbuf_r>:
 800a0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a2:	0005      	movs	r5, r0
 800a0a4:	000e      	movs	r6, r1
 800a0a6:	0014      	movs	r4, r2
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	d004      	beq.n	800a0b6 <__swbuf_r+0x16>
 800a0ac:	6983      	ldr	r3, [r0, #24]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d101      	bne.n	800a0b6 <__swbuf_r+0x16>
 800a0b2:	f7fe fc3d 	bl	8008930 <__sinit>
 800a0b6:	4b22      	ldr	r3, [pc, #136]	; (800a140 <__swbuf_r+0xa0>)
 800a0b8:	429c      	cmp	r4, r3
 800a0ba:	d12d      	bne.n	800a118 <__swbuf_r+0x78>
 800a0bc:	686c      	ldr	r4, [r5, #4]
 800a0be:	69a3      	ldr	r3, [r4, #24]
 800a0c0:	60a3      	str	r3, [r4, #8]
 800a0c2:	89a3      	ldrh	r3, [r4, #12]
 800a0c4:	071b      	lsls	r3, r3, #28
 800a0c6:	d531      	bpl.n	800a12c <__swbuf_r+0x8c>
 800a0c8:	6923      	ldr	r3, [r4, #16]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d02e      	beq.n	800a12c <__swbuf_r+0x8c>
 800a0ce:	6823      	ldr	r3, [r4, #0]
 800a0d0:	6922      	ldr	r2, [r4, #16]
 800a0d2:	b2f7      	uxtb	r7, r6
 800a0d4:	1a98      	subs	r0, r3, r2
 800a0d6:	6963      	ldr	r3, [r4, #20]
 800a0d8:	b2f6      	uxtb	r6, r6
 800a0da:	4283      	cmp	r3, r0
 800a0dc:	dc05      	bgt.n	800a0ea <__swbuf_r+0x4a>
 800a0de:	0021      	movs	r1, r4
 800a0e0:	0028      	movs	r0, r5
 800a0e2:	f000 f965 	bl	800a3b0 <_fflush_r>
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	d126      	bne.n	800a138 <__swbuf_r+0x98>
 800a0ea:	68a3      	ldr	r3, [r4, #8]
 800a0ec:	3001      	adds	r0, #1
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	60a3      	str	r3, [r4, #8]
 800a0f2:	6823      	ldr	r3, [r4, #0]
 800a0f4:	1c5a      	adds	r2, r3, #1
 800a0f6:	6022      	str	r2, [r4, #0]
 800a0f8:	701f      	strb	r7, [r3, #0]
 800a0fa:	6963      	ldr	r3, [r4, #20]
 800a0fc:	4283      	cmp	r3, r0
 800a0fe:	d004      	beq.n	800a10a <__swbuf_r+0x6a>
 800a100:	89a3      	ldrh	r3, [r4, #12]
 800a102:	07db      	lsls	r3, r3, #31
 800a104:	d51a      	bpl.n	800a13c <__swbuf_r+0x9c>
 800a106:	2e0a      	cmp	r6, #10
 800a108:	d118      	bne.n	800a13c <__swbuf_r+0x9c>
 800a10a:	0021      	movs	r1, r4
 800a10c:	0028      	movs	r0, r5
 800a10e:	f000 f94f 	bl	800a3b0 <_fflush_r>
 800a112:	2800      	cmp	r0, #0
 800a114:	d012      	beq.n	800a13c <__swbuf_r+0x9c>
 800a116:	e00f      	b.n	800a138 <__swbuf_r+0x98>
 800a118:	4b0a      	ldr	r3, [pc, #40]	; (800a144 <__swbuf_r+0xa4>)
 800a11a:	429c      	cmp	r4, r3
 800a11c:	d101      	bne.n	800a122 <__swbuf_r+0x82>
 800a11e:	68ac      	ldr	r4, [r5, #8]
 800a120:	e7cd      	b.n	800a0be <__swbuf_r+0x1e>
 800a122:	4b09      	ldr	r3, [pc, #36]	; (800a148 <__swbuf_r+0xa8>)
 800a124:	429c      	cmp	r4, r3
 800a126:	d1ca      	bne.n	800a0be <__swbuf_r+0x1e>
 800a128:	68ec      	ldr	r4, [r5, #12]
 800a12a:	e7c8      	b.n	800a0be <__swbuf_r+0x1e>
 800a12c:	0021      	movs	r1, r4
 800a12e:	0028      	movs	r0, r5
 800a130:	f000 f82c 	bl	800a18c <__swsetup_r>
 800a134:	2800      	cmp	r0, #0
 800a136:	d0ca      	beq.n	800a0ce <__swbuf_r+0x2e>
 800a138:	2601      	movs	r6, #1
 800a13a:	4276      	negs	r6, r6
 800a13c:	0030      	movs	r0, r6
 800a13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a140:	0800a858 	.word	0x0800a858
 800a144:	0800a878 	.word	0x0800a878
 800a148:	0800a838 	.word	0x0800a838

0800a14c <__ascii_wctomb>:
 800a14c:	1e0b      	subs	r3, r1, #0
 800a14e:	d004      	beq.n	800a15a <__ascii_wctomb+0xe>
 800a150:	2aff      	cmp	r2, #255	; 0xff
 800a152:	d904      	bls.n	800a15e <__ascii_wctomb+0x12>
 800a154:	238a      	movs	r3, #138	; 0x8a
 800a156:	6003      	str	r3, [r0, #0]
 800a158:	3b8b      	subs	r3, #139	; 0x8b
 800a15a:	0018      	movs	r0, r3
 800a15c:	4770      	bx	lr
 800a15e:	700a      	strb	r2, [r1, #0]
 800a160:	2301      	movs	r3, #1
 800a162:	e7fa      	b.n	800a15a <__ascii_wctomb+0xe>

0800a164 <_write_r>:
 800a164:	b570      	push	{r4, r5, r6, lr}
 800a166:	0005      	movs	r5, r0
 800a168:	0008      	movs	r0, r1
 800a16a:	0011      	movs	r1, r2
 800a16c:	2200      	movs	r2, #0
 800a16e:	4c06      	ldr	r4, [pc, #24]	; (800a188 <_write_r+0x24>)
 800a170:	6022      	str	r2, [r4, #0]
 800a172:	001a      	movs	r2, r3
 800a174:	f7f8 ff77 	bl	8003066 <_write>
 800a178:	1c43      	adds	r3, r0, #1
 800a17a:	d103      	bne.n	800a184 <_write_r+0x20>
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d000      	beq.n	800a184 <_write_r+0x20>
 800a182:	602b      	str	r3, [r5, #0]
 800a184:	bd70      	pop	{r4, r5, r6, pc}
 800a186:	46c0      	nop			; (mov r8, r8)
 800a188:	20000b3c 	.word	0x20000b3c

0800a18c <__swsetup_r>:
 800a18c:	4b36      	ldr	r3, [pc, #216]	; (800a268 <__swsetup_r+0xdc>)
 800a18e:	b570      	push	{r4, r5, r6, lr}
 800a190:	681d      	ldr	r5, [r3, #0]
 800a192:	0006      	movs	r6, r0
 800a194:	000c      	movs	r4, r1
 800a196:	2d00      	cmp	r5, #0
 800a198:	d005      	beq.n	800a1a6 <__swsetup_r+0x1a>
 800a19a:	69ab      	ldr	r3, [r5, #24]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d102      	bne.n	800a1a6 <__swsetup_r+0x1a>
 800a1a0:	0028      	movs	r0, r5
 800a1a2:	f7fe fbc5 	bl	8008930 <__sinit>
 800a1a6:	4b31      	ldr	r3, [pc, #196]	; (800a26c <__swsetup_r+0xe0>)
 800a1a8:	429c      	cmp	r4, r3
 800a1aa:	d10f      	bne.n	800a1cc <__swsetup_r+0x40>
 800a1ac:	686c      	ldr	r4, [r5, #4]
 800a1ae:	230c      	movs	r3, #12
 800a1b0:	5ee2      	ldrsh	r2, [r4, r3]
 800a1b2:	b293      	uxth	r3, r2
 800a1b4:	0719      	lsls	r1, r3, #28
 800a1b6:	d42d      	bmi.n	800a214 <__swsetup_r+0x88>
 800a1b8:	06d9      	lsls	r1, r3, #27
 800a1ba:	d411      	bmi.n	800a1e0 <__swsetup_r+0x54>
 800a1bc:	2309      	movs	r3, #9
 800a1be:	2001      	movs	r0, #1
 800a1c0:	6033      	str	r3, [r6, #0]
 800a1c2:	3337      	adds	r3, #55	; 0x37
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	81a3      	strh	r3, [r4, #12]
 800a1c8:	4240      	negs	r0, r0
 800a1ca:	bd70      	pop	{r4, r5, r6, pc}
 800a1cc:	4b28      	ldr	r3, [pc, #160]	; (800a270 <__swsetup_r+0xe4>)
 800a1ce:	429c      	cmp	r4, r3
 800a1d0:	d101      	bne.n	800a1d6 <__swsetup_r+0x4a>
 800a1d2:	68ac      	ldr	r4, [r5, #8]
 800a1d4:	e7eb      	b.n	800a1ae <__swsetup_r+0x22>
 800a1d6:	4b27      	ldr	r3, [pc, #156]	; (800a274 <__swsetup_r+0xe8>)
 800a1d8:	429c      	cmp	r4, r3
 800a1da:	d1e8      	bne.n	800a1ae <__swsetup_r+0x22>
 800a1dc:	68ec      	ldr	r4, [r5, #12]
 800a1de:	e7e6      	b.n	800a1ae <__swsetup_r+0x22>
 800a1e0:	075b      	lsls	r3, r3, #29
 800a1e2:	d513      	bpl.n	800a20c <__swsetup_r+0x80>
 800a1e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1e6:	2900      	cmp	r1, #0
 800a1e8:	d008      	beq.n	800a1fc <__swsetup_r+0x70>
 800a1ea:	0023      	movs	r3, r4
 800a1ec:	3344      	adds	r3, #68	; 0x44
 800a1ee:	4299      	cmp	r1, r3
 800a1f0:	d002      	beq.n	800a1f8 <__swsetup_r+0x6c>
 800a1f2:	0030      	movs	r0, r6
 800a1f4:	f7ff fb9e 	bl	8009934 <_free_r>
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	6363      	str	r3, [r4, #52]	; 0x34
 800a1fc:	2224      	movs	r2, #36	; 0x24
 800a1fe:	89a3      	ldrh	r3, [r4, #12]
 800a200:	4393      	bics	r3, r2
 800a202:	81a3      	strh	r3, [r4, #12]
 800a204:	2300      	movs	r3, #0
 800a206:	6063      	str	r3, [r4, #4]
 800a208:	6923      	ldr	r3, [r4, #16]
 800a20a:	6023      	str	r3, [r4, #0]
 800a20c:	2308      	movs	r3, #8
 800a20e:	89a2      	ldrh	r2, [r4, #12]
 800a210:	4313      	orrs	r3, r2
 800a212:	81a3      	strh	r3, [r4, #12]
 800a214:	6923      	ldr	r3, [r4, #16]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d10b      	bne.n	800a232 <__swsetup_r+0xa6>
 800a21a:	21a0      	movs	r1, #160	; 0xa0
 800a21c:	2280      	movs	r2, #128	; 0x80
 800a21e:	89a3      	ldrh	r3, [r4, #12]
 800a220:	0089      	lsls	r1, r1, #2
 800a222:	0092      	lsls	r2, r2, #2
 800a224:	400b      	ands	r3, r1
 800a226:	4293      	cmp	r3, r2
 800a228:	d003      	beq.n	800a232 <__swsetup_r+0xa6>
 800a22a:	0021      	movs	r1, r4
 800a22c:	0030      	movs	r0, r6
 800a22e:	f000 f927 	bl	800a480 <__smakebuf_r>
 800a232:	2301      	movs	r3, #1
 800a234:	89a2      	ldrh	r2, [r4, #12]
 800a236:	4013      	ands	r3, r2
 800a238:	d011      	beq.n	800a25e <__swsetup_r+0xd2>
 800a23a:	2300      	movs	r3, #0
 800a23c:	60a3      	str	r3, [r4, #8]
 800a23e:	6963      	ldr	r3, [r4, #20]
 800a240:	425b      	negs	r3, r3
 800a242:	61a3      	str	r3, [r4, #24]
 800a244:	2000      	movs	r0, #0
 800a246:	6923      	ldr	r3, [r4, #16]
 800a248:	4283      	cmp	r3, r0
 800a24a:	d1be      	bne.n	800a1ca <__swsetup_r+0x3e>
 800a24c:	230c      	movs	r3, #12
 800a24e:	5ee2      	ldrsh	r2, [r4, r3]
 800a250:	0613      	lsls	r3, r2, #24
 800a252:	d5ba      	bpl.n	800a1ca <__swsetup_r+0x3e>
 800a254:	2340      	movs	r3, #64	; 0x40
 800a256:	4313      	orrs	r3, r2
 800a258:	81a3      	strh	r3, [r4, #12]
 800a25a:	3801      	subs	r0, #1
 800a25c:	e7b5      	b.n	800a1ca <__swsetup_r+0x3e>
 800a25e:	0792      	lsls	r2, r2, #30
 800a260:	d400      	bmi.n	800a264 <__swsetup_r+0xd8>
 800a262:	6963      	ldr	r3, [r4, #20]
 800a264:	60a3      	str	r3, [r4, #8]
 800a266:	e7ed      	b.n	800a244 <__swsetup_r+0xb8>
 800a268:	20000010 	.word	0x20000010
 800a26c:	0800a858 	.word	0x0800a858
 800a270:	0800a878 	.word	0x0800a878
 800a274:	0800a838 	.word	0x0800a838

0800a278 <_close_r>:
 800a278:	2300      	movs	r3, #0
 800a27a:	b570      	push	{r4, r5, r6, lr}
 800a27c:	4c06      	ldr	r4, [pc, #24]	; (800a298 <_close_r+0x20>)
 800a27e:	0005      	movs	r5, r0
 800a280:	0008      	movs	r0, r1
 800a282:	6023      	str	r3, [r4, #0]
 800a284:	f7f8 ff0b 	bl	800309e <_close>
 800a288:	1c43      	adds	r3, r0, #1
 800a28a:	d103      	bne.n	800a294 <_close_r+0x1c>
 800a28c:	6823      	ldr	r3, [r4, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d000      	beq.n	800a294 <_close_r+0x1c>
 800a292:	602b      	str	r3, [r5, #0]
 800a294:	bd70      	pop	{r4, r5, r6, pc}
 800a296:	46c0      	nop			; (mov r8, r8)
 800a298:	20000b3c 	.word	0x20000b3c

0800a29c <__sflush_r>:
 800a29c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a29e:	898a      	ldrh	r2, [r1, #12]
 800a2a0:	0005      	movs	r5, r0
 800a2a2:	000c      	movs	r4, r1
 800a2a4:	0713      	lsls	r3, r2, #28
 800a2a6:	d460      	bmi.n	800a36a <__sflush_r+0xce>
 800a2a8:	684b      	ldr	r3, [r1, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	dc04      	bgt.n	800a2b8 <__sflush_r+0x1c>
 800a2ae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	dc01      	bgt.n	800a2b8 <__sflush_r+0x1c>
 800a2b4:	2000      	movs	r0, #0
 800a2b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a2b8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a2ba:	2f00      	cmp	r7, #0
 800a2bc:	d0fa      	beq.n	800a2b4 <__sflush_r+0x18>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	682e      	ldr	r6, [r5, #0]
 800a2c2:	602b      	str	r3, [r5, #0]
 800a2c4:	2380      	movs	r3, #128	; 0x80
 800a2c6:	015b      	lsls	r3, r3, #5
 800a2c8:	6a21      	ldr	r1, [r4, #32]
 800a2ca:	401a      	ands	r2, r3
 800a2cc:	d034      	beq.n	800a338 <__sflush_r+0x9c>
 800a2ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2d0:	89a3      	ldrh	r3, [r4, #12]
 800a2d2:	075b      	lsls	r3, r3, #29
 800a2d4:	d506      	bpl.n	800a2e4 <__sflush_r+0x48>
 800a2d6:	6863      	ldr	r3, [r4, #4]
 800a2d8:	1ac0      	subs	r0, r0, r3
 800a2da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d001      	beq.n	800a2e4 <__sflush_r+0x48>
 800a2e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2e2:	1ac0      	subs	r0, r0, r3
 800a2e4:	0002      	movs	r2, r0
 800a2e6:	6a21      	ldr	r1, [r4, #32]
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	0028      	movs	r0, r5
 800a2ec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a2ee:	47b8      	blx	r7
 800a2f0:	89a1      	ldrh	r1, [r4, #12]
 800a2f2:	1c43      	adds	r3, r0, #1
 800a2f4:	d106      	bne.n	800a304 <__sflush_r+0x68>
 800a2f6:	682b      	ldr	r3, [r5, #0]
 800a2f8:	2b1d      	cmp	r3, #29
 800a2fa:	d830      	bhi.n	800a35e <__sflush_r+0xc2>
 800a2fc:	4a2b      	ldr	r2, [pc, #172]	; (800a3ac <__sflush_r+0x110>)
 800a2fe:	40da      	lsrs	r2, r3
 800a300:	07d3      	lsls	r3, r2, #31
 800a302:	d52c      	bpl.n	800a35e <__sflush_r+0xc2>
 800a304:	2300      	movs	r3, #0
 800a306:	6063      	str	r3, [r4, #4]
 800a308:	6923      	ldr	r3, [r4, #16]
 800a30a:	6023      	str	r3, [r4, #0]
 800a30c:	04cb      	lsls	r3, r1, #19
 800a30e:	d505      	bpl.n	800a31c <__sflush_r+0x80>
 800a310:	1c43      	adds	r3, r0, #1
 800a312:	d102      	bne.n	800a31a <__sflush_r+0x7e>
 800a314:	682b      	ldr	r3, [r5, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d100      	bne.n	800a31c <__sflush_r+0x80>
 800a31a:	6560      	str	r0, [r4, #84]	; 0x54
 800a31c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a31e:	602e      	str	r6, [r5, #0]
 800a320:	2900      	cmp	r1, #0
 800a322:	d0c7      	beq.n	800a2b4 <__sflush_r+0x18>
 800a324:	0023      	movs	r3, r4
 800a326:	3344      	adds	r3, #68	; 0x44
 800a328:	4299      	cmp	r1, r3
 800a32a:	d002      	beq.n	800a332 <__sflush_r+0x96>
 800a32c:	0028      	movs	r0, r5
 800a32e:	f7ff fb01 	bl	8009934 <_free_r>
 800a332:	2000      	movs	r0, #0
 800a334:	6360      	str	r0, [r4, #52]	; 0x34
 800a336:	e7be      	b.n	800a2b6 <__sflush_r+0x1a>
 800a338:	2301      	movs	r3, #1
 800a33a:	0028      	movs	r0, r5
 800a33c:	47b8      	blx	r7
 800a33e:	1c43      	adds	r3, r0, #1
 800a340:	d1c6      	bne.n	800a2d0 <__sflush_r+0x34>
 800a342:	682b      	ldr	r3, [r5, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d0c3      	beq.n	800a2d0 <__sflush_r+0x34>
 800a348:	2b1d      	cmp	r3, #29
 800a34a:	d001      	beq.n	800a350 <__sflush_r+0xb4>
 800a34c:	2b16      	cmp	r3, #22
 800a34e:	d101      	bne.n	800a354 <__sflush_r+0xb8>
 800a350:	602e      	str	r6, [r5, #0]
 800a352:	e7af      	b.n	800a2b4 <__sflush_r+0x18>
 800a354:	2340      	movs	r3, #64	; 0x40
 800a356:	89a2      	ldrh	r2, [r4, #12]
 800a358:	4313      	orrs	r3, r2
 800a35a:	81a3      	strh	r3, [r4, #12]
 800a35c:	e7ab      	b.n	800a2b6 <__sflush_r+0x1a>
 800a35e:	2340      	movs	r3, #64	; 0x40
 800a360:	430b      	orrs	r3, r1
 800a362:	2001      	movs	r0, #1
 800a364:	81a3      	strh	r3, [r4, #12]
 800a366:	4240      	negs	r0, r0
 800a368:	e7a5      	b.n	800a2b6 <__sflush_r+0x1a>
 800a36a:	690f      	ldr	r7, [r1, #16]
 800a36c:	2f00      	cmp	r7, #0
 800a36e:	d0a1      	beq.n	800a2b4 <__sflush_r+0x18>
 800a370:	680b      	ldr	r3, [r1, #0]
 800a372:	600f      	str	r7, [r1, #0]
 800a374:	1bdb      	subs	r3, r3, r7
 800a376:	9301      	str	r3, [sp, #4]
 800a378:	2300      	movs	r3, #0
 800a37a:	0792      	lsls	r2, r2, #30
 800a37c:	d100      	bne.n	800a380 <__sflush_r+0xe4>
 800a37e:	694b      	ldr	r3, [r1, #20]
 800a380:	60a3      	str	r3, [r4, #8]
 800a382:	9b01      	ldr	r3, [sp, #4]
 800a384:	2b00      	cmp	r3, #0
 800a386:	dc00      	bgt.n	800a38a <__sflush_r+0xee>
 800a388:	e794      	b.n	800a2b4 <__sflush_r+0x18>
 800a38a:	9b01      	ldr	r3, [sp, #4]
 800a38c:	003a      	movs	r2, r7
 800a38e:	6a21      	ldr	r1, [r4, #32]
 800a390:	0028      	movs	r0, r5
 800a392:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a394:	47b0      	blx	r6
 800a396:	2800      	cmp	r0, #0
 800a398:	dc03      	bgt.n	800a3a2 <__sflush_r+0x106>
 800a39a:	2340      	movs	r3, #64	; 0x40
 800a39c:	89a2      	ldrh	r2, [r4, #12]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	e7df      	b.n	800a362 <__sflush_r+0xc6>
 800a3a2:	9b01      	ldr	r3, [sp, #4]
 800a3a4:	183f      	adds	r7, r7, r0
 800a3a6:	1a1b      	subs	r3, r3, r0
 800a3a8:	9301      	str	r3, [sp, #4]
 800a3aa:	e7ea      	b.n	800a382 <__sflush_r+0xe6>
 800a3ac:	20400001 	.word	0x20400001

0800a3b0 <_fflush_r>:
 800a3b0:	690b      	ldr	r3, [r1, #16]
 800a3b2:	b570      	push	{r4, r5, r6, lr}
 800a3b4:	0005      	movs	r5, r0
 800a3b6:	000c      	movs	r4, r1
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d101      	bne.n	800a3c0 <_fflush_r+0x10>
 800a3bc:	2000      	movs	r0, #0
 800a3be:	bd70      	pop	{r4, r5, r6, pc}
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	d004      	beq.n	800a3ce <_fflush_r+0x1e>
 800a3c4:	6983      	ldr	r3, [r0, #24]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d101      	bne.n	800a3ce <_fflush_r+0x1e>
 800a3ca:	f7fe fab1 	bl	8008930 <__sinit>
 800a3ce:	4b0b      	ldr	r3, [pc, #44]	; (800a3fc <_fflush_r+0x4c>)
 800a3d0:	429c      	cmp	r4, r3
 800a3d2:	d109      	bne.n	800a3e8 <_fflush_r+0x38>
 800a3d4:	686c      	ldr	r4, [r5, #4]
 800a3d6:	220c      	movs	r2, #12
 800a3d8:	5ea3      	ldrsh	r3, [r4, r2]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d0ee      	beq.n	800a3bc <_fflush_r+0xc>
 800a3de:	0021      	movs	r1, r4
 800a3e0:	0028      	movs	r0, r5
 800a3e2:	f7ff ff5b 	bl	800a29c <__sflush_r>
 800a3e6:	e7ea      	b.n	800a3be <_fflush_r+0xe>
 800a3e8:	4b05      	ldr	r3, [pc, #20]	; (800a400 <_fflush_r+0x50>)
 800a3ea:	429c      	cmp	r4, r3
 800a3ec:	d101      	bne.n	800a3f2 <_fflush_r+0x42>
 800a3ee:	68ac      	ldr	r4, [r5, #8]
 800a3f0:	e7f1      	b.n	800a3d6 <_fflush_r+0x26>
 800a3f2:	4b04      	ldr	r3, [pc, #16]	; (800a404 <_fflush_r+0x54>)
 800a3f4:	429c      	cmp	r4, r3
 800a3f6:	d1ee      	bne.n	800a3d6 <_fflush_r+0x26>
 800a3f8:	68ec      	ldr	r4, [r5, #12]
 800a3fa:	e7ec      	b.n	800a3d6 <_fflush_r+0x26>
 800a3fc:	0800a858 	.word	0x0800a858
 800a400:	0800a878 	.word	0x0800a878
 800a404:	0800a838 	.word	0x0800a838

0800a408 <_lseek_r>:
 800a408:	b570      	push	{r4, r5, r6, lr}
 800a40a:	0005      	movs	r5, r0
 800a40c:	0008      	movs	r0, r1
 800a40e:	0011      	movs	r1, r2
 800a410:	2200      	movs	r2, #0
 800a412:	4c06      	ldr	r4, [pc, #24]	; (800a42c <_lseek_r+0x24>)
 800a414:	6022      	str	r2, [r4, #0]
 800a416:	001a      	movs	r2, r3
 800a418:	f7f8 fe62 	bl	80030e0 <_lseek>
 800a41c:	1c43      	adds	r3, r0, #1
 800a41e:	d103      	bne.n	800a428 <_lseek_r+0x20>
 800a420:	6823      	ldr	r3, [r4, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d000      	beq.n	800a428 <_lseek_r+0x20>
 800a426:	602b      	str	r3, [r5, #0]
 800a428:	bd70      	pop	{r4, r5, r6, pc}
 800a42a:	46c0      	nop			; (mov r8, r8)
 800a42c:	20000b3c 	.word	0x20000b3c

0800a430 <__swhatbuf_r>:
 800a430:	b570      	push	{r4, r5, r6, lr}
 800a432:	000e      	movs	r6, r1
 800a434:	001d      	movs	r5, r3
 800a436:	230e      	movs	r3, #14
 800a438:	5ec9      	ldrsh	r1, [r1, r3]
 800a43a:	b096      	sub	sp, #88	; 0x58
 800a43c:	0014      	movs	r4, r2
 800a43e:	2900      	cmp	r1, #0
 800a440:	da07      	bge.n	800a452 <__swhatbuf_r+0x22>
 800a442:	2300      	movs	r3, #0
 800a444:	602b      	str	r3, [r5, #0]
 800a446:	89b3      	ldrh	r3, [r6, #12]
 800a448:	061b      	lsls	r3, r3, #24
 800a44a:	d411      	bmi.n	800a470 <__swhatbuf_r+0x40>
 800a44c:	2380      	movs	r3, #128	; 0x80
 800a44e:	00db      	lsls	r3, r3, #3
 800a450:	e00f      	b.n	800a472 <__swhatbuf_r+0x42>
 800a452:	466a      	mov	r2, sp
 800a454:	f000 f8a8 	bl	800a5a8 <_fstat_r>
 800a458:	2800      	cmp	r0, #0
 800a45a:	dbf2      	blt.n	800a442 <__swhatbuf_r+0x12>
 800a45c:	22f0      	movs	r2, #240	; 0xf0
 800a45e:	9b01      	ldr	r3, [sp, #4]
 800a460:	0212      	lsls	r2, r2, #8
 800a462:	4013      	ands	r3, r2
 800a464:	4a05      	ldr	r2, [pc, #20]	; (800a47c <__swhatbuf_r+0x4c>)
 800a466:	189b      	adds	r3, r3, r2
 800a468:	425a      	negs	r2, r3
 800a46a:	4153      	adcs	r3, r2
 800a46c:	602b      	str	r3, [r5, #0]
 800a46e:	e7ed      	b.n	800a44c <__swhatbuf_r+0x1c>
 800a470:	2340      	movs	r3, #64	; 0x40
 800a472:	2000      	movs	r0, #0
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	b016      	add	sp, #88	; 0x58
 800a478:	bd70      	pop	{r4, r5, r6, pc}
 800a47a:	46c0      	nop			; (mov r8, r8)
 800a47c:	ffffe000 	.word	0xffffe000

0800a480 <__smakebuf_r>:
 800a480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a482:	2602      	movs	r6, #2
 800a484:	898b      	ldrh	r3, [r1, #12]
 800a486:	0005      	movs	r5, r0
 800a488:	000c      	movs	r4, r1
 800a48a:	4233      	tst	r3, r6
 800a48c:	d006      	beq.n	800a49c <__smakebuf_r+0x1c>
 800a48e:	0023      	movs	r3, r4
 800a490:	3347      	adds	r3, #71	; 0x47
 800a492:	6023      	str	r3, [r4, #0]
 800a494:	6123      	str	r3, [r4, #16]
 800a496:	2301      	movs	r3, #1
 800a498:	6163      	str	r3, [r4, #20]
 800a49a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a49c:	ab01      	add	r3, sp, #4
 800a49e:	466a      	mov	r2, sp
 800a4a0:	f7ff ffc6 	bl	800a430 <__swhatbuf_r>
 800a4a4:	9900      	ldr	r1, [sp, #0]
 800a4a6:	0007      	movs	r7, r0
 800a4a8:	0028      	movs	r0, r5
 800a4aa:	f7ff fa8d 	bl	80099c8 <_malloc_r>
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	d108      	bne.n	800a4c4 <__smakebuf_r+0x44>
 800a4b2:	220c      	movs	r2, #12
 800a4b4:	5ea3      	ldrsh	r3, [r4, r2]
 800a4b6:	059a      	lsls	r2, r3, #22
 800a4b8:	d4ef      	bmi.n	800a49a <__smakebuf_r+0x1a>
 800a4ba:	2203      	movs	r2, #3
 800a4bc:	4393      	bics	r3, r2
 800a4be:	431e      	orrs	r6, r3
 800a4c0:	81a6      	strh	r6, [r4, #12]
 800a4c2:	e7e4      	b.n	800a48e <__smakebuf_r+0xe>
 800a4c4:	4b0f      	ldr	r3, [pc, #60]	; (800a504 <__smakebuf_r+0x84>)
 800a4c6:	62ab      	str	r3, [r5, #40]	; 0x28
 800a4c8:	2380      	movs	r3, #128	; 0x80
 800a4ca:	89a2      	ldrh	r2, [r4, #12]
 800a4cc:	6020      	str	r0, [r4, #0]
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	81a3      	strh	r3, [r4, #12]
 800a4d2:	9b00      	ldr	r3, [sp, #0]
 800a4d4:	6120      	str	r0, [r4, #16]
 800a4d6:	6163      	str	r3, [r4, #20]
 800a4d8:	9b01      	ldr	r3, [sp, #4]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00d      	beq.n	800a4fa <__smakebuf_r+0x7a>
 800a4de:	230e      	movs	r3, #14
 800a4e0:	5ee1      	ldrsh	r1, [r4, r3]
 800a4e2:	0028      	movs	r0, r5
 800a4e4:	f000 f872 	bl	800a5cc <_isatty_r>
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	d006      	beq.n	800a4fa <__smakebuf_r+0x7a>
 800a4ec:	2203      	movs	r2, #3
 800a4ee:	89a3      	ldrh	r3, [r4, #12]
 800a4f0:	4393      	bics	r3, r2
 800a4f2:	001a      	movs	r2, r3
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	81a3      	strh	r3, [r4, #12]
 800a4fa:	89a0      	ldrh	r0, [r4, #12]
 800a4fc:	4338      	orrs	r0, r7
 800a4fe:	81a0      	strh	r0, [r4, #12]
 800a500:	e7cb      	b.n	800a49a <__smakebuf_r+0x1a>
 800a502:	46c0      	nop			; (mov r8, r8)
 800a504:	080088f5 	.word	0x080088f5

0800a508 <memmove>:
 800a508:	b510      	push	{r4, lr}
 800a50a:	4288      	cmp	r0, r1
 800a50c:	d902      	bls.n	800a514 <memmove+0xc>
 800a50e:	188b      	adds	r3, r1, r2
 800a510:	4298      	cmp	r0, r3
 800a512:	d303      	bcc.n	800a51c <memmove+0x14>
 800a514:	2300      	movs	r3, #0
 800a516:	e007      	b.n	800a528 <memmove+0x20>
 800a518:	5c8b      	ldrb	r3, [r1, r2]
 800a51a:	5483      	strb	r3, [r0, r2]
 800a51c:	3a01      	subs	r2, #1
 800a51e:	d2fb      	bcs.n	800a518 <memmove+0x10>
 800a520:	bd10      	pop	{r4, pc}
 800a522:	5ccc      	ldrb	r4, [r1, r3]
 800a524:	54c4      	strb	r4, [r0, r3]
 800a526:	3301      	adds	r3, #1
 800a528:	429a      	cmp	r2, r3
 800a52a:	d1fa      	bne.n	800a522 <memmove+0x1a>
 800a52c:	e7f8      	b.n	800a520 <memmove+0x18>

0800a52e <__malloc_lock>:
 800a52e:	4770      	bx	lr

0800a530 <__malloc_unlock>:
 800a530:	4770      	bx	lr

0800a532 <_realloc_r>:
 800a532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a534:	0007      	movs	r7, r0
 800a536:	000d      	movs	r5, r1
 800a538:	0016      	movs	r6, r2
 800a53a:	2900      	cmp	r1, #0
 800a53c:	d105      	bne.n	800a54a <_realloc_r+0x18>
 800a53e:	0011      	movs	r1, r2
 800a540:	f7ff fa42 	bl	80099c8 <_malloc_r>
 800a544:	0004      	movs	r4, r0
 800a546:	0020      	movs	r0, r4
 800a548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a54a:	2a00      	cmp	r2, #0
 800a54c:	d103      	bne.n	800a556 <_realloc_r+0x24>
 800a54e:	f7ff f9f1 	bl	8009934 <_free_r>
 800a552:	0034      	movs	r4, r6
 800a554:	e7f7      	b.n	800a546 <_realloc_r+0x14>
 800a556:	f000 f84b 	bl	800a5f0 <_malloc_usable_size_r>
 800a55a:	002c      	movs	r4, r5
 800a55c:	42b0      	cmp	r0, r6
 800a55e:	d2f2      	bcs.n	800a546 <_realloc_r+0x14>
 800a560:	0031      	movs	r1, r6
 800a562:	0038      	movs	r0, r7
 800a564:	f7ff fa30 	bl	80099c8 <_malloc_r>
 800a568:	1e04      	subs	r4, r0, #0
 800a56a:	d0ec      	beq.n	800a546 <_realloc_r+0x14>
 800a56c:	0029      	movs	r1, r5
 800a56e:	0032      	movs	r2, r6
 800a570:	f7fb fdaa 	bl	80060c8 <memcpy>
 800a574:	0029      	movs	r1, r5
 800a576:	0038      	movs	r0, r7
 800a578:	f7ff f9dc 	bl	8009934 <_free_r>
 800a57c:	e7e3      	b.n	800a546 <_realloc_r+0x14>
	...

0800a580 <_read_r>:
 800a580:	b570      	push	{r4, r5, r6, lr}
 800a582:	0005      	movs	r5, r0
 800a584:	0008      	movs	r0, r1
 800a586:	0011      	movs	r1, r2
 800a588:	2200      	movs	r2, #0
 800a58a:	4c06      	ldr	r4, [pc, #24]	; (800a5a4 <_read_r+0x24>)
 800a58c:	6022      	str	r2, [r4, #0]
 800a58e:	001a      	movs	r2, r3
 800a590:	f7f8 fd4c 	bl	800302c <_read>
 800a594:	1c43      	adds	r3, r0, #1
 800a596:	d103      	bne.n	800a5a0 <_read_r+0x20>
 800a598:	6823      	ldr	r3, [r4, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d000      	beq.n	800a5a0 <_read_r+0x20>
 800a59e:	602b      	str	r3, [r5, #0]
 800a5a0:	bd70      	pop	{r4, r5, r6, pc}
 800a5a2:	46c0      	nop			; (mov r8, r8)
 800a5a4:	20000b3c 	.word	0x20000b3c

0800a5a8 <_fstat_r>:
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	b570      	push	{r4, r5, r6, lr}
 800a5ac:	4c06      	ldr	r4, [pc, #24]	; (800a5c8 <_fstat_r+0x20>)
 800a5ae:	0005      	movs	r5, r0
 800a5b0:	0008      	movs	r0, r1
 800a5b2:	0011      	movs	r1, r2
 800a5b4:	6023      	str	r3, [r4, #0]
 800a5b6:	f7f8 fd7c 	bl	80030b2 <_fstat>
 800a5ba:	1c43      	adds	r3, r0, #1
 800a5bc:	d103      	bne.n	800a5c6 <_fstat_r+0x1e>
 800a5be:	6823      	ldr	r3, [r4, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d000      	beq.n	800a5c6 <_fstat_r+0x1e>
 800a5c4:	602b      	str	r3, [r5, #0]
 800a5c6:	bd70      	pop	{r4, r5, r6, pc}
 800a5c8:	20000b3c 	.word	0x20000b3c

0800a5cc <_isatty_r>:
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	b570      	push	{r4, r5, r6, lr}
 800a5d0:	4c06      	ldr	r4, [pc, #24]	; (800a5ec <_isatty_r+0x20>)
 800a5d2:	0005      	movs	r5, r0
 800a5d4:	0008      	movs	r0, r1
 800a5d6:	6023      	str	r3, [r4, #0]
 800a5d8:	f7f8 fd79 	bl	80030ce <_isatty>
 800a5dc:	1c43      	adds	r3, r0, #1
 800a5de:	d103      	bne.n	800a5e8 <_isatty_r+0x1c>
 800a5e0:	6823      	ldr	r3, [r4, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d000      	beq.n	800a5e8 <_isatty_r+0x1c>
 800a5e6:	602b      	str	r3, [r5, #0]
 800a5e8:	bd70      	pop	{r4, r5, r6, pc}
 800a5ea:	46c0      	nop			; (mov r8, r8)
 800a5ec:	20000b3c 	.word	0x20000b3c

0800a5f0 <_malloc_usable_size_r>:
 800a5f0:	1f0b      	subs	r3, r1, #4
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	1f18      	subs	r0, r3, #4
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	da01      	bge.n	800a5fe <_malloc_usable_size_r+0xe>
 800a5fa:	580b      	ldr	r3, [r1, r0]
 800a5fc:	18c0      	adds	r0, r0, r3
 800a5fe:	4770      	bx	lr

0800a600 <_init>:
 800a600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a602:	46c0      	nop			; (mov r8, r8)
 800a604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a606:	bc08      	pop	{r3}
 800a608:	469e      	mov	lr, r3
 800a60a:	4770      	bx	lr

0800a60c <_fini>:
 800a60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a60e:	46c0      	nop			; (mov r8, r8)
 800a610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a612:	bc08      	pop	{r3}
 800a614:	469e      	mov	lr, r3
 800a616:	4770      	bx	lr
